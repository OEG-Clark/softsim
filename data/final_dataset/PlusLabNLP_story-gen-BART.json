{"home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_plot_preprocessing.generate_WP_training_files.recover_hyperparams": [[9, 13], ["re.findall"], "function", ["None"], ["def", "recover_hyperparams", "(", "filename", ")", ":", "\n", "    ", "\"\"\"hacky. gets the hyperparams for RAKE from the filename to use in generating new filenames\"\"\"", "\n", "h_params", "=", "re", ".", "findall", "(", "'\\d'", ",", "filename", ")", "\n", "return", "h_params", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_plot_preprocessing.make_cc_version_pnw_data.no_rep_shuffle": [[33, 46], ["list", "next", "len", "zip", "random.shuffle", "zip", "zip", "range", "len"], "function", ["None"], ["def", "no_rep_shuffle", "(", "l", ")", ":", "\n", "    ", "if", "len", "(", "l", ")", "<=", "1", ":", "#since then can't shuffle", "\n", "        ", "return", "l", "\n", "", "l", "=", "list", "(", "zip", "(", "l", ",", "range", "(", "len", "(", "l", ")", ")", ")", ")", "\n", "nu_l", "=", "l", "[", ":", "]", "\n", "while", "True", ":", "\n", "        ", "random", ".", "shuffle", "(", "nu_l", ")", "\n", "for", "x", ",", "y", "in", "zip", "(", "l", ",", "nu_l", ")", ":", "\n", "            ", "if", "x", "==", "y", ":", "\n", "                ", "break", "\n", "", "", "else", ":", "\n", "            ", "break", "\n", "", "", "return", "next", "(", "zip", "(", "*", "nu_l", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_plot_preprocessing.make_cc_version_pnw_data.make_shuffled_keywords": [[48, 55], ["re.compile", "re.compile.sub", "make_cc_version_pnw_data.no_rep_shuffle", "make_cc_version_pnw_data.no_rep_shuffle", "shuffle_str.strip", "phrases.strip().split", "phrases.strip"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.preprocessing.make_cc_version_pnw_data.no_rep_shuffle", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.preprocessing.make_cc_version_pnw_data.no_rep_shuffle"], ["", "def", "make_shuffled_keywords", "(", "str_list", ",", "remove_char", "=", "\"<EOL>\"", ")", ":", "\n", "    ", "\"\"\" takes list of strings, and characters to remove, and returns shuffled version with remove_chars at end \"\"\"", "\n", "remove", "=", "re", ".", "compile", "(", "\"<EOL>\"", ")", "\n", "clean_str", "=", "[", "remove", ".", "sub", "(", "\"\"", ",", "text", ")", "for", "text", "in", "str_list", "]", "\n", "internally_shuffled", "=", "[", "\" \"", ".", "join", "(", "no_rep_shuffle", "(", "phrases", ".", "strip", "(", ")", ".", "split", "(", ")", ")", ")", "for", "phrases", "in", "clean_str", "]", "\n", "shuffle_str", "=", "(", "' %s '", "%", "args", ".", "sent_sym", ")", ".", "join", "(", "no_rep_shuffle", "(", "internally_shuffled", ")", ")", "\n", "return", "shuffle_str", ".", "strip", "(", ")", "+", "\" \"", "+", "remove_char", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_plot_preprocessing.create_nli_dataset.read_txt": [[5, 7], ["open().read().split", "open().read", "open"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.dataset_reader.DatasetReader.read", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open"], ["def", "read_txt", "(", "fname", ")", ":", "\n", "    ", "return", "open", "(", "fname", ")", ".", "read", "(", ")", ".", "split", "(", "'\\n'", ")", "[", ":", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_plot_preprocessing.create_classifier_dataset.read_txt": [[12, 14], ["open().read().split", "open().read", "open"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.dataset_reader.DatasetReader.read", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open"], ["def", "read_txt", "(", "fname", ")", ":", "\n", "    ", "return", "open", "(", "fname", ")", ".", "read", "(", ")", ".", "split", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_plot_preprocessing.concat_data.load": [[4, 9], ["open", "fin.read", "len", "os.path.join", "fin.read.split"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.dataset_reader.DatasetReader.read"], ["def", "load", "(", "dir", ",", "file", ")", ":", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "file", ")", ",", "\"r\"", ")", "as", "fin", ":", "\n", "        ", "data", "=", "fin", ".", "read", "(", ")", "\n", "length", "=", "len", "(", "data", ".", "split", "(", "\"\\n\"", ")", ")", "\n", "", "return", "data", ",", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_plot_preprocessing.general_preprocessing.NEREntity.__init__": [[27, 32], ["set", "set", "ent_string.split"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "ent_string", ",", "ent_type", ",", "id", ")", ":", "\n", "        ", "self", ".", "ent_string", "=", "ent_string", "\n", "self", ".", "ent_type", "=", "ent_type", "\n", "self", ".", "id", "=", "id", "\n", "self", ".", "aka", "=", "set", "(", "ent_string", ".", "split", "(", "'_'", ")", ")", "if", "'_'", "in", "ent_string", "else", "set", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_plot_preprocessing.general_preprocessing.NEREntity.__str__": [[33, 36], ["None"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Entities will print as the type and the locally unique ID, e.g. <PERSON+1>\"\"\"", "\n", "return", "\"<{}+{}>\"", ".", "format", "(", "self", ".", "ent_type", ",", "self", ".", "id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_plot_preprocessing.general_preprocessing.get_vocab": [[38, 46], ["collections.Counter", "open", "collections.Counter", "infile.read().strip().split", "infile.read().strip", "infile.read"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.dataset_reader.DatasetReader.read"], ["", "", "def", "get_vocab", "(", "files", ")", ":", "\n", "    ", "\"\"\"takes a list of files, returns a counter of frequencies of all tokens\"\"\"", "\n", "all_vocab", "=", "Counter", "(", ")", "\n", "for", "file", "in", "files", ":", "\n", "        ", "with", "open", "(", "file", ",", "\"r\"", ")", "as", "infile", ":", "\n", "            ", "vocab_counter", "=", "Counter", "(", "infile", ".", "read", "(", ")", ".", "strip", "(", ")", ".", "split", "(", ")", ")", "\n", "", "all_vocab", "+=", "vocab_counter", "\n", "", "return", "all_vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_plot_preprocessing.general_preprocessing.find_below_threshold": [[48, 51], ["None"], "function", ["None"], ["", "def", "find_below_threshold", "(", "vocab_dict", ",", "threshold", ")", ":", "\n", "    ", "\"\"\"takes a counter of vocab items and an int and returns a set of words below threshold\"\"\"", "\n", "return", "{", "k", "for", "k", "in", "vocab_dict", "if", "vocab_dict", "[", "k", "]", "<", "threshold", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_plot_preprocessing.general_preprocessing.replace_all_with_char": [[53, 89], ["print", "print", "len", "open", "infile.readlines", "open", "outfile.write", "re.sub.strip", "line.strip().split", "replace_dict.get", "re.sub", "line.strip", "newline.append", "newline.append", "print", "replace_dict.get.split", "range", "replace_dict.get", "len", "replace_dict.get"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], ["", "def", "replace_all_with_char", "(", "replace_set", ",", "replace_dict", ",", "files", ",", "has_whitespace", "=", "False", ")", ":", "\n", "    ", "\"\"\"takes a set of things to be replaced, a dict of things to replace them with, files, and a boolean for whether the character to be replaced contains internal whitespace.\n    No return, modifies files in place.\"\"\"", "\n", "\n", "print", "(", "\"Starting replacing {} in {} files\"", ".", "format", "(", "replace_set", ",", "len", "(", "files", ")", ")", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "for", "file", "in", "files", ":", "\n", "        ", "with", "open", "(", "file", ",", "\"r\"", ")", "as", "infile", ":", "\n", "            ", "all_lines", "=", "infile", ".", "readlines", "(", ")", "\n", "", "with", "open", "(", "file", ",", "\"w\"", ")", "as", "outfile", ":", "\n", "            ", "for", "line", "in", "all_lines", ":", "\n", "                ", "if", "has_whitespace", ":", "# have to use regex even though slower", "\n", "                    ", "outline", "=", "line", "\n", "for", "pattern", "in", "replace_set", ":", "\n", "                        ", "replace_str", "=", "replace_dict", ".", "get", "(", "pattern", ",", "'<unk>'", ")", "\n", "outline", "=", "re", ".", "sub", "(", "pattern", ",", "replace_str", ",", "outline", ")", "\n", "", "outline", "=", "outline", ".", "strip", "(", ")", "\n", "", "else", ":", "\n", "                    ", "newline", "=", "[", "]", "\n", "for", "tok", "in", "line", ".", "strip", "(", ")", ".", "split", "(", ")", ":", "\n", "                        ", "if", "tok", "in", "replace_set", ":", "\n", "                            ", "if", "'_'", "in", "tok", ":", "#this is special cases to split phrases before making them unks", "\n", "                                ", "print", "(", "\"Splitting {}\"", ".", "format", "(", "tok", ")", ")", "\n", "new_toks", "=", "tok", ".", "split", "(", "'_'", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "new_toks", ")", ")", ":", "\n", "                                    ", "if", "new_toks", "[", "i", "]", "in", "replace_set", ":", "\n", "                                        ", "new_toks", "[", "i", "]", "=", "replace_dict", ".", "get", "(", "new_toks", "[", "i", "]", ",", "'<unk>'", ")", "\n", "", "", "tok", "=", "\" \"", ".", "join", "(", "new_toks", ")", "\n", "", "else", ":", "\n", "                                ", "tok", "=", "replace_dict", ".", "get", "(", "tok", ",", "'<unk>'", ")", "\n", "", "newline", ".", "append", "(", "tok", ")", "\n", "", "else", ":", "\n", "                            ", "newline", ".", "append", "(", "tok", ")", "\n", "", "", "outline", "=", "\" \"", ".", "join", "(", "newline", ")", "\n", "\n", "", "outfile", ".", "write", "(", "\"{}\\n\"", ".", "format", "(", "outline", ")", ")", "\n", "", "", "", "print", "(", "\"Done\\n\"", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_plot_preprocessing.general_preprocessing.truncate": [[91, 114], ["print", "print", "len", "open", "open", "outfile.write", "outlines.append", "line.strip().split", "start.strip", "line.strip", "line.strip().split", "rest.strip().split", "line.strip", "rest.strip"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write"], ["", "def", "truncate", "(", "files", ",", "max_tok", ",", "start_char", "=", "None", ",", "end_char", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    truncates text in files, writes over input files.\n    If start_char is None, assumes start at the beginning of the line.\n    If end_char is None, assumes each line is a block to be truncated\n    No return -> modifies files in place\n    \"\"\"", "\n", "\n", "print", "(", "\"Starting truncating {} files\"", ".", "format", "(", "len", "(", "files", ")", ")", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "for", "file", "in", "files", ":", "\n", "        ", "outlines", "=", "[", "]", "\n", "with", "open", "(", "file", ",", "\"r\"", ")", "as", "infile", ":", "\n", "            ", "for", "line", "in", "infile", ":", "\n", "                ", "if", "start_char", ":", "\n", "                    ", "start", ",", "rest", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "start_char", ",", "1", ")", "\n", "trunc_line", "=", "\"{} {} {}\"", ".", "format", "(", "start", ".", "strip", "(", ")", ",", "start_char", ",", "\n", "' '", ".", "join", "(", "rest", ".", "strip", "(", ")", ".", "split", "(", ")", "[", ":", "max_tok", "]", ")", ")", "\n", "", "else", ":", "\n", "                    ", "trunc_line", "=", "' '", ".", "join", "(", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "[", ":", "max_tok", "]", ")", "\n", "", "outlines", ".", "append", "(", "trunc_line", ")", "\n", "", "", "with", "open", "(", "file", ",", "\"w\"", ")", "as", "outfile", ":", "\n", "            ", "outfile", ".", "write", "(", "\"\\n\"", ".", "join", "(", "outlines", ")", ")", "\n", "", "", "print", "(", "\"Done\\n\"", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_plot_preprocessing.general_preprocessing.to_lower": [[116, 129], ["print", "print", "len", "open", "open", "outfile.write", "outdata.append", "tok.lower", "line.strip().split", "line.strip"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write"], ["", "def", "to_lower", "(", "files", ",", "special_chars", ")", ":", "\n", "    ", "\"\"\"lowercases files, excepting a set of special characters. Modifies files in place\"\"\"", "\n", "print", "(", "\"Lowercasing {} files\\nIgnoring: {}\"", ".", "format", "(", "len", "(", "files", ")", ",", "special_chars", ")", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "for", "file", "in", "files", ":", "\n", "        ", "outdata", "=", "[", "]", "\n", "with", "open", "(", "file", ",", "\"r\"", ")", "as", "infile", ":", "\n", "            ", "for", "line", "in", "infile", ":", "\n", "                ", "outline", "=", "\" \"", ".", "join", "(", "[", "tok", "if", "tok", "in", "special_chars", "else", "tok", ".", "lower", "(", ")", "\n", "for", "tok", "in", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "]", ")", "\n", "outdata", ".", "append", "(", "outline", ")", "\n", "", "", "with", "open", "(", "file", ",", "\"w\"", ")", "as", "outfile", ":", "\n", "            ", "outfile", ".", "write", "(", "\"\\n\"", ".", "join", "(", "outdata", ")", ")", "\n", "", "", "print", "(", "\"Done\\n\"", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_plot_preprocessing.general_preprocessing.write_sentence_sep": [[131, 165], ["print", "print", "len", "open", "open", "outfile.write", "re.sub", "outdata.append", "line.strip().split", "line.strip", "sent_detector.pop", "re.sub", "sent_detector", "line.strip", "sent_detector"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write"], ["", "def", "write_sentence_sep", "(", "files", ",", "sep_char", ",", "sent_detector", ",", "chop", "=", "False", ",", "tok_type", "=", "None", ",", "start_char", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Tokenizes a list of file paths into sentences using a sent_detector, and delimits them with a given sep_char.\n    Supports either a spacy or an NLTK punkt model object as sent_detector, and the type is declared in tok_type.\n    if chop is True then the final sentence is removed - this handles a case where it may have been truncated.\n    if start_char is given, things before start_char are not modified.\n    Returns None -> modifies in place.\n    \"\"\"", "\n", "print", "(", "\"Tokenizing Sentences in {} files and adding separation char: {}\"", ".", "format", "(", "len", "(", "files", ")", ",", "sep_char", ")", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "for", "file", "in", "files", ":", "\n", "        ", "outdata", "=", "[", "]", "\n", "with", "open", "(", "file", ",", "\"r\"", ")", "as", "infile", ":", "\n", "            ", "for", "line", "in", "infile", ":", "\n", "                ", "if", "start_char", ":", "\n", "                    ", "prefix", ",", "story", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "start_char", ")", "# this is to be sure we don't mess with non-story parts.", "\n", "", "else", ":", "\n", "                    ", "story", "=", "line", ".", "strip", "(", ")", "\n", "", "detok_story", "=", "re", ".", "sub", "(", "'\\s(?=[.])'", ",", "''", ",", "story", ")", "\n", "if", "tok_type", "==", "\"spacy\"", ":", "\n", "                    ", "story_sentences", "=", "[", "sent", ".", "text", "for", "sent", "in", "sent_detector", "(", "detok_story", ")", ".", "sents", "]", "\n", "", "elif", "tok_type", "==", "\"punkt\"", ":", "\n", "                    ", "story_sentences", "=", "sent_detector", "(", "detok_story", ")", "#TODO make sure the else (of the if-else) is taken care of", "\n", "", "if", "chop", ":", "\n", "                    ", "story_sentences", ".", "pop", "(", ")", "# This removes the final sentence, which may be incomplete", "\n", "# re-tokenize. Not using something like word_tokenize because it messed with special chars", "\n", "", "tok_story_sentences", "=", "[", "re", ".", "sub", "(", "'(?<=\\S)[.]'", ",", "' .'", ",", "sent", ")", "for", "sent", "in", "story_sentences", "]", "\n", "\n", "outline", "=", "\" {} \"", ".", "format", "(", "sep_char", ")", ".", "join", "(", "tok_story_sentences", ")", "\n", "if", "start_char", ":", "\n", "                    ", "outline", "=", "prefix", "+", "\" {} {} \"", ".", "format", "(", "start_char", ",", "sep_char", ")", "+", "outline", "\n", "", "outdata", ".", "append", "(", "outline", ")", "\n", "", "", "with", "open", "(", "file", ",", "\"w\"", ")", "as", "outfile", ":", "\n", "            ", "outfile", ".", "write", "(", "\"\\n\"", ".", "join", "(", "outdata", ")", ")", "\n", "", "", "print", "(", "\"Done\\n\"", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_plot_preprocessing.general_preprocessing.ner_processing": [[167, 263], ["print", "set", "re.compile", "print", "set", "print", "open", "outfile.write", "len", "open", "open", "outfile.write", "print", "nlp_model", "set", "set.update", "all_stories.append", "all_entities.update", "key_val_pairs.extend", "collections.Counter", "set", "re.compile.sub().lower", "entity.merge", "set", "ent_str.split", "ent_str.split", "range", "set", "re.compile.sub", "full_story.append", "set", "multi_word_ents.add", "general_preprocessing.NEREntity", "set.add", "len", "str.lower", "str", "re.compile.sub", "re.compile.sub().lower", "str", "str", "sorted", "string2entity.values", "string2entity.items", "re.compile.sub", "tok.text.istitle", "str.lower"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.update", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.update", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.translation_moe.score.merge", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.eval_lm.WordStat.add", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.eval_lm.WordStat.add"], ["", "def", "ner_processing", "(", "nlp_model", ",", "files", ",", "target_dir", "=", "\"./\"", ")", ":", "\n", "    ", "\"\"\"takes a Spacy model capable of NER, a set of files, and a target_dir for output. \n    Modifies files in place, but also writes out the entity to string mappings used. \n    returns the strings used as entities to they can be tracked as special chars.\n    Not very fast.\"\"\"", "\n", "\n", "print", "(", "\"Running Named Entity Recognition on {} files\"", ".", "format", "(", "len", "(", "files", ")", ")", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "\n", "all_entities", ",", "key_val_pairs", "=", "set", "(", ")", ",", "[", "]", "\n", "non_entity_caps", "=", "set", "(", ")", "# used to store things that might have been missed by NER. Will get all things that are start of sentence caps, but those should all be pretty common so won't be picked up by thresholding anyway.", "\n", "#id2entity, id2string = [None], [args.unk]", "\n", "internal_whitespace", "=", "re", ".", "compile", "(", "'(?!<=^)\\s+(?!=$)'", ")", "\n", "\n", "for", "file", "in", "files", ":", "\n", "        ", "all_stories", "=", "[", "]", "\n", "with", "open", "(", "file", ",", "\"r\"", ")", "as", "infile", ":", "\n", "            ", "for", "line", "in", "infile", ":", "\n", "# string to entity stores an entity based on a string, entity ids is used to set ids by entity type", "\n", "                ", "string2entity", ",", "entity_ids", ",", "multi_word_ents", "=", "{", "}", ",", "Counter", "(", ")", ",", "set", "(", ")", "\n", "\n", "nlp_text", "=", "nlp_model", "(", "line", ")", "\n", "# find entities, assign entities with ids and make mappings, removing whitespace", "\n", "for", "entity", "in", "nlp_text", ".", "ents", ":", "\n", "                    ", "ent_string", "=", "internal_whitespace", ".", "sub", "(", "'_'", ",", "entity", ".", "text", ")", ".", "lower", "(", ")", "\n", "# keep multi_word ones for later merging", "\n", "if", "'_'", "in", "ent_string", ":", "\n", "                        ", "multi_word_ents", ".", "add", "(", "ent_string", ")", "\n", "\n", "", "if", "ent_string", "not", "in", "string2entity", ":", "\n", "# make a mapping where entity ids are local to each story. As stories are one per line", "\n", "                        ", "string2entity", "[", "ent_string", "]", "=", "NEREntity", "(", "ent_string", ",", "entity", ".", "label_", ",", "entity_ids", "[", "entity", ".", "label_", "]", ")", "\n", "entity_ids", "[", "entity", ".", "label_", "]", "+=", "1", "# increment the id for each type", "\n", "\n", "", "entity", ".", "merge", "(", ")", "# this merges entity tokens into one token if it spans multiple", "\n", "\n", "# TODO break out into sep function", "\n", "# if entities exist in multiword settings assume same entity and merge ids. This is to handle stuff like John Smith", "\n", "", "has_title", "=", "set", "(", ")", "# this is to handle things like Mr. and Miss separately", "\n", "titles", "=", "{", "'mr'", ",", "'mrs'", ",", "'miss'", ",", "'sir'", ",", "'lady'", ",", "'lord'", ",", "'ms'", ",", "'dr'", ",", "'doctor'", ",", "\n", "'general'", ",", "'captain'", ",", "'father'", ",", "'count'", ",", "'countess'", ",", "'baron'", ",", "\n", "'baroness'", ",", "'king'", ",", "'queen'", ",", "'prince'", ",", "'princess'", ",", "'madam'", ",", "'earl'", "}", "\n", "\n", "# Clean up the mappings - this is basically cause NER isn't good enough and sometimes catches just a title", "\n", "for", "title", "in", "(", "titles", "&", "set", "(", "string2entity", ")", ")", ":", "\n", "                    ", "del", "string2entity", "[", "title", "]", "\n", "\n", "", "for", "ent_str", "in", "multi_word_ents", ":", "\n", "                    ", "ent_tokens", "=", "ent_str", ".", "split", "(", "'_'", ")", "\n", "if", "ent_tokens", "[", "0", "]", "in", "titles", ":", "\n", "                        ", "has_title", ".", "add", "(", "ent_str", ")", "\n", "continue", "\n", "", "for", "tok", "in", "ent_tokens", ":", "\n", "                        ", "if", "tok", "in", "string2entity", ":", "\n", "                            ", "if", "string2entity", "[", "tok", "]", ".", "ent_type", "==", "string2entity", "[", "ent_str", "]", ".", "ent_type", ":", "\n", "                                ", "string2entity", "[", "tok", "]", ".", "id", "=", "string2entity", "[", "ent_str", "]", ".", "id", "\n", "", "", "", "", "for", "ent_str", "in", "has_title", ":", "\n", "                    ", "ent_tokens", "=", "ent_str", ".", "split", "(", "'_'", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "ent_tokens", ")", ")", ":", "\n", "                        ", "tok", "=", "ent_tokens", "[", "i", "]", "\n", "if", "tok", "in", "string2entity", ":", "\n", "                            ", "if", "string2entity", "[", "tok", "]", ".", "ent_type", "==", "string2entity", "[", "ent_str", "]", ".", "ent_type", ":", "\n", "                                ", "string2entity", "[", "tok", "]", ".", "id", "=", "string2entity", "[", "ent_str", "]", ".", "id", "\n", "\n", "# Heuristic, if a string is not an entity but is capitalized it might be an entity. The particularly effects entities that appear only at the start of sentences.", "\n", "", "", "", "", "non_entity_caps", ".", "update", "(", "set", "(", "[", "internal_whitespace", ".", "sub", "(", "'_'", ",", "tok", ".", "text", ")", ".", "lower", "(", ")", "for", "tok", "in", "nlp_text", "\n", "if", "(", "tok", ".", "ent_type", "==", "0", "and", "tok", ".", "text", ".", "istitle", "(", ")", ")", "]", ")", ")", "\n", "\n", "# make substitutions", "\n", "full_story", "=", "[", "]", "\n", "for", "tok", "in", "nlp_text", ":", "\n", "                    ", "new_tok", "=", "internal_whitespace", ".", "sub", "(", "'_'", ",", "tok", ".", "text", ")", "\n", "if", "new_tok", ".", "lower", "(", ")", "in", "string2entity", ":", "\n", "                        ", "new_tok", "=", "str", "(", "string2entity", "[", "new_tok", ".", "lower", "(", ")", "]", ")", "\n", "", "full_story", ".", "append", "(", "new_tok", ")", "\n", "#full_story = [internal_whitespace.sub('_', tok.text) for tok in nlp_text] # can add if tok.ent_type > 1 if want to only do this for entities", "\n", "", "all_stories", ".", "append", "(", "\" \"", ".", "join", "(", "full_story", ")", ")", "\n", "\n", "# store all entity replacements for later special characters", "\n", "all_entities", ".", "update", "(", "set", "(", "[", "str", "(", "val", ")", "for", "val", "in", "string2entity", ".", "values", "(", ")", "]", ")", ")", "\n", "# and for writing out", "\n", "key_val_pairs", ".", "extend", "(", "[", "\"{} {}\"", ".", "format", "(", "key", ",", "str", "(", "val", ")", ")", "for", "key", ",", "val", "in", "\n", "sorted", "(", "string2entity", ".", "items", "(", ")", ")", "]", ")", "\n", "\n", "", "", "with", "open", "(", "file", ",", "\"w\"", ")", "as", "outfile", ":", "\n", "            ", "outfile", ".", "write", "(", "\"\\n\"", ".", "join", "(", "all_stories", ")", ")", "\n", "print", "(", "\"Finished 1 file\"", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "", "print", "(", "\"Done\"", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "\n", "# Print string 2 entity file", "\n", "", "string2entity_file", "=", "\"string2entity.txt\"", "\n", "print", "(", "\"Writing {} to target_directory (defaults are this one and inputdir)\"", ".", "format", "(", "string2entity_file", ")", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "with", "open", "(", "target_dir", "+", "string2entity_file", ",", "\"w\"", ")", "as", "outfile", ":", "\n", "#key_val_pairs = [\"{} {}\".format(key, str(val)) for key, val in sorted(string2entity.items())]", "\n", "        ", "outfile", ".", "write", "(", "\"\\n\"", ".", "join", "(", "key_val_pairs", ")", ")", "\n", "\n", "", "return", "all_entities", ",", "non_entity_caps", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_plot_preprocessing.concat_json.concat": [[5, 19], ["os.listdir", "os.path.join", "io.open", "json.dump", "i.endswith", "open", "json.load", "all.append"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.load"], ["def", "concat", "(", "inpath", ",", "outdir", ")", ":", "\n", "\n", "    ", "files", "=", "os", ".", "listdir", "(", "inpath", ")", "\n", "\n", "files_txt", "=", "[", "os", ".", "path", ".", "join", "(", "inpath", ",", "i", ")", "for", "i", "in", "files", "if", "i", ".", "endswith", "(", "'.json'", ")", "]", "\n", "all", "=", "[", "]", "\n", "for", "file", "in", "files_txt", ":", "\n", "        ", "with", "open", "(", "file", ",", "\"r\"", ")", "as", "fin", ":", "\n", "            ", "data", "=", "json", ".", "load", "(", "fin", ")", "\n", "for", "item", "in", "data", ":", "\n", "                ", "all", ".", "append", "(", "item", ")", "\n", "\n", "", "", "", "with", "io", ".", "open", "(", "outdir", ",", "\"w\"", ",", "encoding", "=", "'utf8'", ")", "as", "fout", ":", "\n", "        ", "json", ".", "dump", "(", "all", ",", "fout", ",", "ensure_ascii", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.data_helper.load_stories": [[6, 14], ["print", "open", "articles.append", "len", "line.strip().split", "line.strip"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open"], ["def", "load_stories", "(", "infile", ")", ":", "\n", "    ", "articles", "=", "[", "]", "\n", "with", "open", "(", "infile", ")", "as", "inf", ":", "\n", "        ", "for", "line", "in", "inf", ":", "\n", "            ", "texts", "=", "' '", ".", "join", "(", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", ")", "\n", "articles", ".", "append", "(", "texts", ")", "\n", "", "", "print", "(", "'loaded %d stories!'", "%", "len", "(", "articles", ")", ")", "\n", "return", "articles", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.data_helper.check_number_of_sentence": [[15, 23], ["len", "story.split", "story.split", "len", "sentence.split"], "function", ["None"], ["", "def", "check_number_of_sentence", "(", "story", ")", ":", "\n", "    ", "length", "=", "len", "(", "story", ".", "split", "(", "\"</s>\"", ")", ")", "\n", "max", "=", "0", "\n", "for", "sentence", "in", "story", ".", "split", "(", "\"</s>\"", ")", ":", "\n", "        ", "word_length", "=", "len", "(", "sentence", ".", "split", "(", "\" \"", ")", ")", "\n", "if", "word_length", ">", "max", ":", "\n", "            ", "max", "=", "word_length", "\n", "", "", "return", "length", ",", "max", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.data_helper.count": [[24, 53], ["pandas.DataFrame", "df[].astype", "enumerate", "data_helper.check_number_of_sentence", "df.append.append", "[].item"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.data_helper.check_number_of_sentence", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item"], ["", "def", "count", "(", "stories", ")", ":", "\n", "    ", "df", "=", "pd", ".", "DataFrame", "(", "\n", "{", "\n", "\"number_of_sentence\"", ":", "[", "]", ",", "\n", "\"count\"", ":", "[", "]", ",", "\n", "\"max_form_which_story\"", ":", "[", "]", ",", "\n", "\"maxmium_sentence_length\"", ":", "[", "]", "\n", "}", "\n", ")", "\n", "df", "[", "[", "\"number_of_sentence\"", ",", "\"count\"", ",", "\"max_form_which_story\"", ",", "\"maxmium_sentence_length\"", "]", "]", "=", "df", "[", "\n", "[", "\"number_of_sentence\"", ",", "\"count\"", ",", "\"max_form_which_story\"", ",", "\"maxmium_sentence_length\"", "]", "]", ".", "astype", "(", "int", ")", "\n", "for", "i", ",", "text", "in", "enumerate", "(", "stories", ")", ":", "\n", "        ", "length", ",", "max", "=", "check_number_of_sentence", "(", "text", ")", "\n", "if", "(", "(", "df", "[", "'number_of_sentence'", "]", "==", "length", ")", ".", "any", "(", ")", ")", "==", "False", ":", "\n", "# print(\"***************\")", "\n", "# if length not in df['number_of_sentence']:", "\n", "            ", "df", "=", "df", ".", "append", "(", "{", "\"number_of_sentence\"", ":", "length", ",", "\n", "\"count\"", ":", "1", ",", "\n", "\"max_form_which_story\"", ":", "i", ",", "\n", "\"maxmium_sentence_length\"", ":", "max", "}", ",", "\n", "ignore_index", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "df", ".", "loc", "[", "df", "[", "'number_of_sentence'", "]", "==", "length", ",", "'count'", "]", "=", "df", ".", "loc", "[", "df", ".", "number_of_sentence", "==", "length", "]", "[", "'count'", "]", "+", "1", "\n", "if", "max", ">", "df", ".", "loc", "[", "df", "[", "'number_of_sentence'", "]", "==", "length", "]", "[", "'maxmium_sentence_length'", "]", ".", "item", "(", ")", ":", "\n", "                ", "df", ".", "loc", "[", "df", "[", "'number_of_sentence'", "]", "==", "length", ",", "'maxmium_sentence_length'", "]", "=", "max", "\n", "df", ".", "loc", "[", "df", "[", "'number_of_sentence'", "]", "==", "length", ",", "'max_form_which_story'", "]", "=", "i", "\n", "", "else", ":", "\n", "                ", "pass", "\n", "", "", "", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.data_helper.count_blank_line": [[54, 60], ["print", "len"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], ["", "def", "count_blank_line", "(", "stories", ")", ":", "\n", "    ", "count", "=", "0", "\n", "for", "story", "in", "stories", ":", "\n", "        ", "if", "len", "(", "story", ")", "==", "0", ":", "\n", "            ", "count", "+=", "1", "\n", "", "", "print", "(", "\"Empty lines:\"", ",", "count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.datasetReader.SrlReader.__init__": [[127, 142], ["allennlp.data.dataset_readers.dataset_reader.DatasetReader.__init__", "pytorch_pretrained_bert.tokenization.BertTokenizer.from_pretrained", "allennlp.data.token_indexers.SingleIdTokenIndexer"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.model.BARTModel.from_pretrained"], ["def", "__init__", "(", "self", ",", "\n", "token_indexers", ":", "Dict", "[", "str", ",", "TokenIndexer", "]", "=", "None", ",", "\n", "domain_identifier", ":", "str", "=", "None", ",", "\n", "lazy", ":", "bool", "=", "False", ",", "\n", "bert_model_name", ":", "str", "=", "None", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "lazy", ")", "\n", "self", ".", "_token_indexers", "=", "token_indexers", "or", "{", "\"tokens\"", ":", "SingleIdTokenIndexer", "(", ")", "}", "\n", "self", ".", "_domain_identifier", "=", "domain_identifier", "\n", "\n", "if", "bert_model_name", "is", "not", "None", ":", "\n", "            ", "self", ".", "bert_tokenizer", "=", "BertTokenizer", ".", "from_pretrained", "(", "bert_model_name", ")", "\n", "self", ".", "lowercase_input", "=", "\"uncased\"", "in", "bert_model_name", "\n", "", "else", ":", "\n", "            ", "self", ".", "bert_tokenizer", "=", "None", "\n", "self", ".", "lowercase_input", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.datasetReader.SrlReader._wordpiece_tokenize_input": [[143, 193], ["datasetReader.SrlReader.bert_tokenizer.wordpiece_tokenizer.tokenize", "start_offsets.append", "len", "end_offsets.append", "word_piece_tokens.extend", "token.lower.lower.lower"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.hub_utils.GeneratorHubInterface.tokenize"], ["", "", "def", "_wordpiece_tokenize_input", "(", "self", ",", "tokens", ":", "List", "[", "str", "]", ")", "->", "Tuple", "[", "List", "[", "str", "]", ",", "List", "[", "int", "]", ",", "List", "[", "int", "]", "]", ":", "\n", "        ", "\"\"\"\n        Convert a list of tokens to wordpiece tokens and offsets, as well as adding\n        BERT CLS and SEP tokens to the begining and end of the sentence.\n\n        A slight oddity with this function is that it also returns the wordpiece offsets\n        corresponding to the _start_ of words as well as the end.\n\n        We need both of these offsets (or at least, it's easiest to use both), because we need\n        to convert the labels to tags using the end_offsets. However, when we are decoding a\n        BIO sequence inside the SRL model itself, it's important that we use the start_offsets,\n        because otherwise we might select an ill-formed BIO sequence from the BIO sequence on top of\n        wordpieces (this happens in the case that a word is split into multiple word pieces,\n        and then we take the last tag of the word, which might correspond to, e.g, I-V, which\n        would not be allowed as it is not preceeded by a B tag).\n\n        For example:\n\n        `annotate` will be bert tokenized as [\"anno\", \"##tate\"].\n        If this is tagged as [B-V, I-V] as it should be, we need to select the\n        _first_ wordpiece label to be the label for the token, because otherwise\n        we may end up with invalid tag sequences (we cannot start a new tag with an I).\n\n        Returns\n        -------\n        wordpieces : List[str]\n            The BERT wordpieces from the words in the sentence.\n        end_offsets : List[int]\n            Indices into wordpieces such that `[wordpieces[i] for i in end_offsets]`\n            results in the end wordpiece of each word being chosen.\n        start_offsets : List[int]\n            Indices into wordpieces such that `[wordpieces[i] for i in start_offsets]`\n            results in the start wordpiece of each word being chosen.\n        \"\"\"", "\n", "word_piece_tokens", ":", "List", "[", "str", "]", "=", "[", "]", "\n", "end_offsets", "=", "[", "]", "\n", "start_offsets", "=", "[", "]", "\n", "cumulative", "=", "0", "\n", "for", "token", "in", "tokens", ":", "\n", "            ", "if", "self", ".", "lowercase_input", ":", "\n", "                ", "token", "=", "token", ".", "lower", "(", ")", "\n", "", "word_pieces", "=", "self", ".", "bert_tokenizer", ".", "wordpiece_tokenizer", ".", "tokenize", "(", "token", ")", "\n", "start_offsets", ".", "append", "(", "cumulative", "+", "1", ")", "\n", "cumulative", "+=", "len", "(", "word_pieces", ")", "\n", "end_offsets", ".", "append", "(", "cumulative", ")", "\n", "word_piece_tokens", ".", "extend", "(", "word_pieces", ")", "\n", "\n", "", "wordpieces", "=", "[", "\"[CLS]\"", "]", "+", "word_piece_tokens", "+", "[", "\"[SEP]\"", "]", "\n", "\n", "return", "wordpieces", ",", "end_offsets", ",", "start_offsets", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.datasetReader.SrlReader._read": [[194, 214], ["allennlp.common.file_utils.cached_path", "allennlp.data.dataset_readers.dataset_utils.Ontonotes", "logger.info", "datasetReader.SrlReader._ontonotes_subset", "logger.info", "allennlp.data.tokenizers.Token", "datasetReader.SrlReader.text_to_instance", "datasetReader.SrlReader.text_to_instance"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_utils.cached_path", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.datasetReader.SrlReader._ontonotes_subset", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.dataset_reader.DatasetReader.text_to_instance", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.dataset_reader.DatasetReader.text_to_instance"], ["", "@", "overrides", "\n", "def", "_read", "(", "self", ",", "file_path", ":", "str", ")", ":", "\n", "# if `file_path` is a URL, redirect to the cache", "\n", "        ", "file_path", "=", "cached_path", "(", "file_path", ")", "\n", "ontonotes_reader", "=", "Ontonotes", "(", ")", "\n", "logger", ".", "info", "(", "\"Reading SRL instances from dataset files at: %s\"", ",", "file_path", ")", "\n", "if", "self", ".", "_domain_identifier", "is", "not", "None", ":", "\n", "            ", "logger", ".", "info", "(", "\"Filtering to only include file paths containing the %s domain\"", ",", "self", ".", "_domain_identifier", ")", "\n", "\n", "", "for", "sentence", "in", "self", ".", "_ontonotes_subset", "(", "ontonotes_reader", ",", "file_path", ",", "self", ".", "_domain_identifier", ")", ":", "\n", "            ", "tokens", "=", "[", "Token", "(", "t", ")", "for", "t", "in", "sentence", ".", "words", "]", "\n", "if", "not", "sentence", ".", "srl_frames", ":", "\n", "# Sentence contains no predicates.", "\n", "                ", "tags", "=", "[", "\"O\"", "for", "_", "in", "tokens", "]", "\n", "verb_label", "=", "[", "0", "for", "_", "in", "tokens", "]", "\n", "yield", "self", ".", "text_to_instance", "(", "tokens", ",", "verb_label", ",", "tags", ")", "\n", "", "else", ":", "\n", "                ", "for", "(", "_", ",", "tags", ")", "in", "sentence", ".", "srl_frames", ":", "\n", "                    ", "verb_indicator", "=", "[", "1", "if", "label", "[", "-", "2", ":", "]", "==", "\"-V\"", "else", "0", "for", "label", "in", "tags", "]", "\n", "yield", "self", ".", "text_to_instance", "(", "tokens", ",", "verb_indicator", ",", "tags", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.datasetReader.SrlReader._ontonotes_subset": [[215, 227], ["ontonotes_reader.dataset_path_iterator", "ontonotes_reader.sentence_iterator"], "methods", ["None"], ["", "", "", "", "@", "staticmethod", "\n", "def", "_ontonotes_subset", "(", "ontonotes_reader", ":", "Ontonotes", ",", "\n", "file_path", ":", "str", ",", "\n", "domain_identifier", ":", "str", ")", "->", "Iterable", "[", "OntonotesSentence", "]", ":", "\n", "        ", "\"\"\"\n        Iterates over the Ontonotes 5.0 dataset using an optional domain identifier.\n        If the domain identifier is present, only examples which contain the domain\n        identifier in the file path are yielded.\n        \"\"\"", "\n", "for", "conll_file", "in", "ontonotes_reader", ".", "dataset_path_iterator", "(", "file_path", ")", ":", "\n", "            ", "if", "domain_identifier", "is", "None", "or", "f\"/{domain_identifier}/\"", "in", "conll_file", ":", "\n", "                ", "yield", "from", "ontonotes_reader", ".", "sentence_iterator", "(", "conll_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.datasetReader.SrlReader.text_to_instance": [[228, 278], ["all", "allennlp.data.fields.MetadataField", "allennlp.data.instance.Instance", "datasetReader.SrlReader._wordpiece_tokenize_input", "datasetReader._convert_verb_indices_to_wordpiece_indices", "allennlp.data.fields.TextField", "allennlp.data.fields.SequenceLabelField", "allennlp.data.fields.TextField", "allennlp.data.fields.SequenceLabelField", "verb_label.index", "datasetReader._convert_tags_to_wordpiece_tags", "allennlp.data.fields.SequenceLabelField", "allennlp.data.fields.SequenceLabelField", "allennlp.data.tokenizers.Token"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.datasetReader.SrlReader._wordpiece_tokenize_input", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.datasetReader._convert_verb_indices_to_wordpiece_indices", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.index", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.datasetReader._convert_tags_to_wordpiece_tags"], ["", "", "", "def", "text_to_instance", "(", "self", ",", "# type: ignore", "\n", "tokens", ":", "List", "[", "Token", "]", ",", "\n", "verb_label", ":", "List", "[", "int", "]", ",", "\n", "tags", ":", "List", "[", "str", "]", "=", "None", ")", "->", "Instance", ":", "\n", "        ", "\"\"\"\n        We take `pre-tokenized` input here, along with a verb label.  The verb label should be a\n        one-hot binary vector, the same length as the tokens, indicating the position of the verb\n        to find arguments for.\n        \"\"\"", "\n", "# pylint: disable=arguments-differ", "\n", "metadata_dict", ":", "Dict", "[", "str", ",", "Any", "]", "=", "{", "}", "\n", "if", "self", ".", "bert_tokenizer", "is", "not", "None", ":", "\n", "            ", "wordpieces", ",", "offsets", ",", "start_offsets", "=", "self", ".", "_wordpiece_tokenize_input", "(", "[", "t", ".", "text", "for", "t", "in", "tokens", "]", ")", "\n", "new_verbs", "=", "_convert_verb_indices_to_wordpiece_indices", "(", "verb_label", ",", "offsets", ")", "\n", "metadata_dict", "[", "\"offsets\"", "]", "=", "start_offsets", "\n", "# In order to override the indexing mechanism, we need to set the `text_id`", "\n", "# attribute directly. This causes the indexing to use this id.", "\n", "text_field", "=", "TextField", "(", "[", "Token", "(", "t", ",", "text_id", "=", "self", ".", "bert_tokenizer", ".", "vocab", "[", "t", "]", ")", "for", "t", "in", "wordpieces", "]", ",", "\n", "token_indexers", "=", "self", ".", "_token_indexers", ")", "\n", "verb_indicator", "=", "SequenceLabelField", "(", "new_verbs", ",", "text_field", ")", "\n", "\n", "", "else", ":", "\n", "            ", "text_field", "=", "TextField", "(", "tokens", ",", "token_indexers", "=", "self", ".", "_token_indexers", ")", "\n", "verb_indicator", "=", "SequenceLabelField", "(", "verb_label", ",", "text_field", ")", "\n", "\n", "", "fields", ":", "Dict", "[", "str", ",", "Field", "]", "=", "{", "}", "\n", "fields", "[", "'tokens'", "]", "=", "text_field", "\n", "fields", "[", "'verb_indicator'", "]", "=", "verb_indicator", "\n", "\n", "if", "all", "(", "[", "x", "==", "0", "for", "x", "in", "verb_label", "]", ")", ":", "\n", "            ", "verb", "=", "None", "\n", "verb_index", "=", "None", "\n", "", "else", ":", "\n", "            ", "verb_index", "=", "verb_label", ".", "index", "(", "1", ")", "\n", "verb", "=", "tokens", "[", "verb_index", "]", ".", "text", "\n", "\n", "", "metadata_dict", "[", "\"words\"", "]", "=", "[", "x", ".", "text", "for", "x", "in", "tokens", "]", "\n", "metadata_dict", "[", "\"verb\"", "]", "=", "verb", "\n", "metadata_dict", "[", "\"verb_index\"", "]", "=", "verb_index", "\n", "\n", "if", "tags", ":", "\n", "            ", "if", "self", ".", "bert_tokenizer", "is", "not", "None", ":", "\n", "                ", "new_tags", "=", "_convert_tags_to_wordpiece_tags", "(", "tags", ",", "offsets", ")", "\n", "fields", "[", "'tags'", "]", "=", "SequenceLabelField", "(", "new_tags", ",", "text_field", ")", "\n", "", "else", ":", "\n", "                ", "fields", "[", "'tags'", "]", "=", "SequenceLabelField", "(", "tags", ",", "text_field", ")", "\n", "", "metadata_dict", "[", "\"gold_tags\"", "]", "=", "tags", "\n", "\n", "", "fields", "[", "\"metadata\"", "]", "=", "MetadataField", "(", "metadata_dict", ")", "\n", "return", "Instance", "(", "fields", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.datasetReader._convert_tags_to_wordpiece_tags": [[19, 62], ["enumerate", "new_tags.append", "tag.startswith", "new_tags.append", "tag.startswith", "new_tags.append", "tag.startswith", "tag.split", "new_tags.append"], "function", ["None"], ["def", "_convert_tags_to_wordpiece_tags", "(", "tags", ":", "List", "[", "str", "]", ",", "offsets", ":", "List", "[", "int", "]", ")", "->", "List", "[", "str", "]", ":", "\n", "    ", "\"\"\"\n    Converts a series of BIO tags to account for a wordpiece tokenizer,\n    extending/modifying BIO tags where appropriate to deal with words which\n    are split into multiple wordpieces by the tokenizer.\n\n    This is only used if you pass a `bert_model_name` to the dataset reader below.\n\n    Parameters\n    ----------\n    tags : `List[str]`\n        The BIO formatted tags to convert to BIO tags for wordpieces\n    offsets : `List[int]`\n        The wordpiece offsets.\n\n    Returns\n    -------\n    The new BIO tags.\n    \"\"\"", "\n", "new_tags", "=", "[", "]", "\n", "j", "=", "0", "\n", "for", "i", ",", "offset", "in", "enumerate", "(", "offsets", ")", ":", "\n", "        ", "tag", "=", "tags", "[", "i", "]", "\n", "is_o", "=", "tag", "==", "\"O\"", "\n", "is_start", "=", "True", "\n", "while", "j", "<", "offset", ":", "\n", "            ", "if", "is_o", ":", "\n", "                ", "new_tags", ".", "append", "(", "\"O\"", ")", "\n", "\n", "", "elif", "tag", ".", "startswith", "(", "\"I\"", ")", ":", "\n", "                ", "new_tags", ".", "append", "(", "tag", ")", "\n", "\n", "", "elif", "is_start", "and", "tag", ".", "startswith", "(", "\"B\"", ")", ":", "\n", "                ", "new_tags", ".", "append", "(", "tag", ")", "\n", "is_start", "=", "False", "\n", "\n", "", "elif", "tag", ".", "startswith", "(", "\"B\"", ")", ":", "\n", "                ", "_", ",", "label", "=", "tag", ".", "split", "(", "\"-\"", ",", "1", ")", "\n", "new_tags", ".", "append", "(", "\"I-\"", "+", "label", ")", "\n", "", "j", "+=", "1", "\n", "\n", "# Add O tags for cls and sep tokens.", "\n", "", "", "return", "[", "\"O\"", "]", "+", "new_tags", "+", "[", "\"O\"", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.datasetReader._convert_verb_indices_to_wordpiece_indices": [[64, 93], ["enumerate", "new_verb_indices.append"], "function", ["None"], ["", "def", "_convert_verb_indices_to_wordpiece_indices", "(", "verb_indices", ":", "List", "[", "int", "]", ",", "offsets", ":", "List", "[", "int", "]", ")", ":", "# pylint: disable=invalid-name", "\n", "    ", "\"\"\"\n    Converts binary verb indicators to account for a wordpiece tokenizer,\n    extending/modifying BIO tags where appropriate to deal with words which\n    are split into multiple wordpieces by the tokenizer.\n\n    This is only used if you pass a `bert_model_name` to the dataset reader below.\n\n    Parameters\n    ----------\n    verb_indices : `List[int]`\n        The binary verb indicators, 0 for not a verb, 1 for verb.\n    offsets : `List[int]`\n        The wordpiece offsets.\n\n    Returns\n    -------\n    The new verb indices.\n    \"\"\"", "\n", "j", "=", "0", "\n", "new_verb_indices", "=", "[", "]", "\n", "for", "i", ",", "offset", "in", "enumerate", "(", "offsets", ")", ":", "\n", "        ", "indicator", "=", "verb_indices", "[", "i", "]", "\n", "while", "j", "<", "offset", ":", "\n", "            ", "new_verb_indices", ".", "append", "(", "indicator", ")", "\n", "j", "+=", "1", "\n", "\n", "# Add 0 indicators for cls and sep tokens.", "\n", "", "", "return", "[", "0", "]", "+", "new_verb_indices", "+", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.pretrained.PretrainedModel.__init__": [[13, 16], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "archive_file", ":", "str", ",", "predictor_name", ":", "str", ")", "->", "None", ":", "\n", "        ", "self", ".", "archive_file", "=", "archive_file", "\n", "self", ".", "predictor_name", "=", "predictor_name", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.pretrained.PretrainedModel.predictor": [[17, 20], ["allennlp.models.archival.load_archive", "allennlp.predictors.Predictor.from_archive"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.predictor.Predictor.from_archive"], ["", "def", "predictor", "(", "self", ")", "->", "Predictor", ":", "\n", "        ", "archive", "=", "load_archive", "(", "self", ".", "archive_file", ")", "\n", "return", "Predictor", ".", "from_archive", "(", "archive", ",", "self", ".", "predictor_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.pretrained.srl_with_elmo_luheng_2018": [[24, 30], ["warnings.catch_warnings", "warnings.simplefilter", "pretrained.PretrainedModel", "pretrained.PretrainedModel.predictor"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.pretrained.PretrainedModel.predictor"], ["", "", "def", "srl_with_elmo_luheng_2018", "(", ")", "->", "predictors", ".", "SemanticRoleLabelerPredictor", ":", "\n", "    ", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "        ", "warnings", ".", "simplefilter", "(", "action", "=", "\"ignore\"", ",", "category", "=", "DeprecationWarning", ")", "\n", "model", "=", "PretrainedModel", "(", "'https://allennlp.s3.amazonaws.com/models/srl-model-2018.05.25.tar.gz'", ",", "\n", "'semantic-role-labeling'", ")", "\n", "return", "model", ".", "predictor", "(", ")", "# type: ignore", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.pretrained.bert_srl_shi_2019": [[32, 38], ["warnings.catch_warnings", "warnings.simplefilter", "pretrained.PretrainedModel", "pretrained.PretrainedModel.predictor"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.pretrained.PretrainedModel.predictor"], ["", "", "def", "bert_srl_shi_2019", "(", ")", "->", "predictors", ".", "SemanticRoleLabelerPredictor", ":", "\n", "    ", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "        ", "warnings", ".", "simplefilter", "(", "action", "=", "\"ignore\"", ",", "category", "=", "DeprecationWarning", ")", "\n", "model", "=", "PretrainedModel", "(", "'https://s3-us-west-2.amazonaws.com/allennlp/models/bert-base-srl-2019.06.17.tar.gz'", ",", "\n", "'semantic-role-labeling'", ")", "\n", "return", "model", ".", "predictor", "(", ")", "# type: ignore", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.pretrained.bidirectional_attention_flow_seo_2017": [[40, 46], ["warnings.catch_warnings", "warnings.simplefilter", "pretrained.PretrainedModel", "pretrained.PretrainedModel.predictor"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.pretrained.PretrainedModel.predictor"], ["", "", "def", "bidirectional_attention_flow_seo_2017", "(", ")", "->", "predictors", ".", "BidafPredictor", ":", "\n", "    ", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "        ", "warnings", ".", "simplefilter", "(", "action", "=", "\"ignore\"", ",", "category", "=", "DeprecationWarning", ")", "\n", "model", "=", "PretrainedModel", "(", "'https://allennlp.s3.amazonaws.com/models/bidaf-model-2017.09.15-charpad.tar.gz'", ",", "\n", "'machine-comprehension'", ")", "\n", "return", "model", ".", "predictor", "(", ")", "# type: ignore", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.pretrained.naqanet_dua_2019": [[47, 53], ["warnings.catch_warnings", "warnings.simplefilter", "pretrained.PretrainedModel", "pretrained.PretrainedModel.predictor"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.pretrained.PretrainedModel.predictor"], ["", "", "def", "naqanet_dua_2019", "(", ")", "->", "predictors", ".", "BidafPredictor", ":", "\n", "    ", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "        ", "warnings", ".", "simplefilter", "(", "action", "=", "\"ignore\"", ",", "category", "=", "DeprecationWarning", ")", "\n", "model", "=", "PretrainedModel", "(", "'https://allennlp.s3.amazonaws.com/models/naqanet-2019.04.29-fixed-weight-names.tar.gz'", ",", "\n", "'machine-comprehension'", ")", "\n", "return", "model", ".", "predictor", "(", ")", "# type: ignore", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.pretrained.open_information_extraction_stanovsky_2018": [[54, 58], ["pretrained.PretrainedModel", "pretrained.PretrainedModel.predictor"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.pretrained.PretrainedModel.predictor"], ["", "", "def", "open_information_extraction_stanovsky_2018", "(", ")", "->", "predictors", ".", "OpenIePredictor", ":", "\n", "    ", "model", "=", "PretrainedModel", "(", "'https://allennlp.s3.amazonaws.com/models/openie-model.2018-08-20.tar.gz'", ",", "\n", "'open-information-extraction'", ")", "\n", "return", "model", ".", "predictor", "(", ")", "# type: ignore", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.pretrained.decomposable_attention_with_elmo_parikh_2017": [[59, 65], ["warnings.catch_warnings", "warnings.simplefilter", "pretrained.PretrainedModel", "pretrained.PretrainedModel.predictor"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.pretrained.PretrainedModel.predictor"], ["", "def", "decomposable_attention_with_elmo_parikh_2017", "(", ")", "->", "predictors", ".", "DecomposableAttentionPredictor", ":", "\n", "    ", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "        ", "warnings", ".", "simplefilter", "(", "action", "=", "\"ignore\"", ",", "category", "=", "DeprecationWarning", ")", "\n", "model", "=", "PretrainedModel", "(", "'https://allennlp.s3.amazonaws.com/models/decomposable-attention-elmo-2018.02.19.tar.gz'", ",", "\n", "'textual-entailment'", ")", "\n", "return", "model", ".", "predictor", "(", ")", "# type: ignore", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.pretrained.neural_coreference_resolution_lee_2017": [[66, 75], ["warnings.catch_warnings", "warnings.simplefilter", "pretrained.PretrainedModel", "pretrained.PretrainedModel.predictor"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.pretrained.PretrainedModel.predictor"], ["", "", "def", "neural_coreference_resolution_lee_2017", "(", ")", "->", "predictors", ".", "CorefPredictor", ":", "\n", "    ", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "        ", "warnings", ".", "simplefilter", "(", "action", "=", "\"ignore\"", ",", "category", "=", "DeprecationWarning", ")", "\n", "model", "=", "PretrainedModel", "(", "'https://allennlp.s3.amazonaws.com/models/coref-model-2018.02.05.tar.gz'", ",", "\n", "'coreference-resolution'", ")", "\n", "predictor", "=", "model", ".", "predictor", "(", ")", "\n", "# pylint: disable=protected-access", "\n", "predictor", ".", "_dataset_reader", ".", "_token_indexers", "[", "'token_characters'", "]", ".", "_min_padding_length", "=", "5", "# type: ignore", "\n", "return", "predictor", "# type: ignore", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.pretrained.named_entity_recognition_with_elmo_peters_2018": [[76, 85], ["warnings.catch_warnings", "warnings.simplefilter", "pretrained.PretrainedModel", "pretrained.PretrainedModel.predictor"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.pretrained.PretrainedModel.predictor"], ["", "", "def", "named_entity_recognition_with_elmo_peters_2018", "(", ")", "->", "predictors", ".", "SentenceTaggerPredictor", ":", "\n", "    ", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "        ", "warnings", ".", "simplefilter", "(", "action", "=", "\"ignore\"", ",", "category", "=", "DeprecationWarning", ")", "\n", "model", "=", "PretrainedModel", "(", "'https://allennlp.s3.amazonaws.com/models/ner-model-2018.12.18.tar.gz'", ",", "\n", "'sentence-tagger'", ")", "\n", "predictor", "=", "model", ".", "predictor", "(", ")", "\n", "# pylint: disable=protected-access", "\n", "predictor", ".", "_dataset_reader", ".", "_token_indexers", "[", "'token_characters'", "]", ".", "_min_padding_length", "=", "3", "# type: ignore", "\n", "return", "predictor", "# type: ignore", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.pretrained.fine_grained_named_entity_recognition_with_elmo_peters_2018": [[86, 93], ["pretrained.PretrainedModel", "pretrained.PretrainedModel.predictor"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.pretrained.PretrainedModel.predictor"], ["", "", "def", "fine_grained_named_entity_recognition_with_elmo_peters_2018", "(", ")", "->", "predictors", ".", "SentenceTaggerPredictor", ":", "\n", "    ", "model", "=", "PretrainedModel", "(", "'https://allennlp.s3.amazonaws.com/models/fine-grained-ner-model-elmo-2018.12.21.tar.gz'", ",", "\n", "'sentence-tagger'", ")", "\n", "predictor", "=", "model", ".", "predictor", "(", ")", "\n", "# pylint: disable=protected-access", "\n", "predictor", ".", "_dataset_reader", ".", "_token_indexers", "[", "'token_characters'", "]", ".", "_min_padding_length", "=", "3", "# type: ignore", "\n", "return", "predictor", "# type: ignore", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.pretrained.span_based_constituency_parsing_with_elmo_joshi_2018": [[94, 100], ["warnings.catch_warnings", "warnings.simplefilter", "pretrained.PretrainedModel", "pretrained.PretrainedModel.predictor"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.pretrained.PretrainedModel.predictor"], ["", "def", "span_based_constituency_parsing_with_elmo_joshi_2018", "(", ")", "->", "predictors", ".", "ConstituencyParserPredictor", ":", "\n", "    ", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "        ", "warnings", ".", "simplefilter", "(", "action", "=", "\"ignore\"", ",", "category", "=", "DeprecationWarning", ")", "\n", "model", "=", "PretrainedModel", "(", "'https://allennlp.s3.amazonaws.com/models/elmo-constituency-parser-2018.03.14.tar.gz'", ",", "\n", "'constituency-parser'", ")", "\n", "return", "model", ".", "predictor", "(", ")", "# type: ignore", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.pretrained.biaffine_parser_stanford_dependencies_todzat_2017": [[101, 107], ["warnings.catch_warnings", "warnings.simplefilter", "pretrained.PretrainedModel", "pretrained.PretrainedModel.predictor"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.pretrained.PretrainedModel.predictor"], ["", "", "def", "biaffine_parser_stanford_dependencies_todzat_2017", "(", ")", "->", "predictors", ".", "BiaffineDependencyParserPredictor", ":", "\n", "    ", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "        ", "warnings", ".", "simplefilter", "(", "action", "=", "\"ignore\"", ",", "category", "=", "DeprecationWarning", ")", "\n", "model", "=", "PretrainedModel", "(", "'https://allennlp.s3.amazonaws.com/models/biaffine-dependency-parser-ptb-2018.08.23.tar.gz'", ",", "\n", "'biaffine-dependency-parser'", ")", "\n", "return", "model", ".", "predictor", "(", ")", "# type: ignore", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.pretrained.biaffine_parser_universal_dependencies_todzat_2017": [[110, 116], ["warnings.catch_warnings", "warnings.simplefilter", "pretrained.PretrainedModel", "pretrained.PretrainedModel.predictor"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.pretrained.PretrainedModel.predictor"], ["", "", "def", "biaffine_parser_universal_dependencies_todzat_2017", "(", ")", "->", "predictors", ".", "BiaffineDependencyParserPredictor", ":", "\n", "    ", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "        ", "warnings", ".", "simplefilter", "(", "action", "=", "\"ignore\"", ",", "category", "=", "DeprecationWarning", ")", "\n", "model", "=", "PretrainedModel", "(", "'https://allennlp.s3.amazonaws.com/models/biaffine-dependency-parser-ud-2018.08.23.tar.gz'", ",", "\n", "'biaffine-dependency-parser'", ")", "\n", "return", "model", ".", "predictor", "(", ")", "# type: ignore", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.pretrained.esim_nli_with_elmo_chen_2017": [[117, 123], ["warnings.catch_warnings", "warnings.simplefilter", "pretrained.PretrainedModel", "pretrained.PretrainedModel.predictor"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.pretrained.PretrainedModel.predictor"], ["", "", "def", "esim_nli_with_elmo_chen_2017", "(", ")", "->", "predictors", ".", "DecomposableAttentionPredictor", ":", "\n", "    ", "with", "warnings", ".", "catch_warnings", "(", ")", ":", "\n", "        ", "warnings", ".", "simplefilter", "(", "action", "=", "\"ignore\"", ",", "category", "=", "DeprecationWarning", ")", "\n", "model", "=", "PretrainedModel", "(", "'https://allennlp.s3.amazonaws.com/models/esim-elmo-2018.05.17.tar.gz'", ",", "\n", "'textual-entailment'", ")", "\n", "return", "model", ".", "predictor", "(", ")", "# type: ignore", "", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.predictor.Predictor.__init__": [[44, 47], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "model", ":", "Model", ",", "dataset_reader", ":", "DatasetReader", ")", "->", "None", ":", "\n", "        ", "self", ".", "_model", "=", "model", "\n", "self", ".", "_dataset_reader", "=", "dataset_reader", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.predictor.Predictor.load_line": [[48, 54], ["json.loads"], "methods", ["None"], ["", "def", "load_line", "(", "self", ",", "line", ":", "str", ")", "->", "JsonDict", ":", "# pylint: disable=no-self-use", "\n", "        ", "\"\"\"\n        If your inputs are not in JSON-lines format (e.g. you have a CSV)\n        you can override this function to parse them correctly.\n        \"\"\"", "\n", "return", "json", ".", "loads", "(", "line", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.predictor.Predictor.dump_line": [[55, 61], ["json.dumps"], "methods", ["None"], ["", "def", "dump_line", "(", "self", ",", "outputs", ":", "JsonDict", ")", "->", "str", ":", "# pylint: disable=no-self-use", "\n", "        ", "\"\"\"\n        If you don't want your outputs in JSON-lines format\n        you can override this function to output them differently.\n        \"\"\"", "\n", "return", "json", ".", "dumps", "(", "outputs", ")", "+", "\"\\n\"", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.predictor.Predictor.predict_json": [[62, 65], ["predictor.Predictor._json_to_instance", "predictor.Predictor.predict_instance"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.predictor.Predictor._json_to_instance", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.predictor.Predictor.predict_instance"], ["", "def", "predict_json", "(", "self", ",", "inputs", ":", "JsonDict", ")", "->", "JsonDict", ":", "\n", "        ", "instance", "=", "self", ".", "_json_to_instance", "(", "inputs", ")", "\n", "return", "self", ".", "predict_instance", "(", "instance", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.predictor.Predictor.json_to_labeled_instances": [[66, 80], ["predictor.Predictor._json_to_instance", "predictor.Predictor._model.forward_on_instance", "predictor.Predictor.predictions_to_labeled_instances"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.predictor.Predictor._json_to_instance", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.predictor.Predictor.predictions_to_labeled_instances"], ["", "def", "json_to_labeled_instances", "(", "self", ",", "inputs", ":", "JsonDict", ")", "->", "List", "[", "Instance", "]", ":", "\n", "        ", "\"\"\"\n        Converts incoming json to a :class:`~allennlp.data.instance.Instance`,\n        runs the model on the newly created instance, and adds labels to the\n        :class:`~allennlp.data.instance.Instance`s given by the model's output.\n        Returns\n        -------\n        List[instance]\n        A list of :class:`~allennlp.data.instance.Instance`\n        \"\"\"", "\n", "instance", "=", "self", ".", "_json_to_instance", "(", "inputs", ")", "\n", "outputs", "=", "self", ".", "_model", ".", "forward_on_instance", "(", "instance", ")", "\n", "new_instances", "=", "self", ".", "predictions_to_labeled_instances", "(", "instance", ",", "outputs", ")", "\n", "return", "new_instances", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.predictor.Predictor.get_gradients": [[81, 125], ["predictor.Predictor._register_embedding_gradient_hooks", "allennlp.data.dataset.Batch", "allennlp.data.dataset.Batch.index_instances", "predictor.Predictor._model.decode", "predictor.Predictor._model.zero_grad", "loss.backward", "dict", "enumerate", "predictor.Predictor._model.forward", "hook.remove", "grad.squeeze_().detach().cpu().numpy", "str", "allennlp.data.dataset.Batch.as_tensor_dict", "grad.squeeze_().detach().cpu", "grad.squeeze_().detach", "grad.squeeze_"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.predictor.Predictor._register_embedding_gradient_hooks", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.decode", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer._MemoryEfficientFP16OptimizerMixin.zero_grad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.dynamicconvFunction.backward", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.forward"], ["", "def", "get_gradients", "(", "self", ",", "\n", "instances", ":", "List", "[", "Instance", "]", ")", "->", "Tuple", "[", "Dict", "[", "str", ",", "Any", "]", ",", "Dict", "[", "str", ",", "Any", "]", "]", ":", "\n", "        ", "\"\"\"\n        Gets the gradients of the loss with respect to the model inputs.\n\n        Parameters\n        ----------\n        instances: List[Instance]\n\n        Returns\n        -------\n        Tuple[Dict[str, Any], Dict[str, Any]]\n        The first item is a Dict of gradient entries for each input.\n        The keys have the form  ``{grad_input_1: ..., grad_input_2: ... }``\n        up to the number of inputs given. The second item is the model's output.\n\n        Notes\n        -----\n        Takes a ``JsonDict`` representing the inputs of the model and converts\n        them to :class:`~allennlp.data.instance.Instance`s, sends these through\n        the model :func:`forward` function after registering hooks on the embedding\n        layer of the model. Calls :func:`backward` on the loss and then removes the\n        hooks.\n        \"\"\"", "\n", "embedding_gradients", ":", "List", "[", "Tensor", "]", "=", "[", "]", "\n", "hooks", ":", "List", "[", "RemovableHandle", "]", "=", "self", ".", "_register_embedding_gradient_hooks", "(", "embedding_gradients", ")", "\n", "\n", "dataset", "=", "Batch", "(", "instances", ")", "\n", "dataset", ".", "index_instances", "(", "self", ".", "_model", ".", "vocab", ")", "\n", "outputs", "=", "self", ".", "_model", ".", "decode", "(", "self", ".", "_model", ".", "forward", "(", "**", "dataset", ".", "as_tensor_dict", "(", ")", ")", ")", "\n", "\n", "loss", "=", "outputs", "[", "'loss'", "]", "\n", "self", ".", "_model", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "for", "hook", "in", "hooks", ":", "\n", "            ", "hook", ".", "remove", "(", ")", "\n", "\n", "", "grad_dict", "=", "dict", "(", ")", "\n", "for", "idx", ",", "grad", "in", "enumerate", "(", "embedding_gradients", ")", ":", "\n", "            ", "key", "=", "'grad_input_'", "+", "str", "(", "idx", "+", "1", ")", "\n", "grad_dict", "[", "key", "]", "=", "grad", ".", "squeeze_", "(", "0", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "", "return", "grad_dict", ",", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.predictor.Predictor._register_embedding_gradient_hooks": [[126, 145], ["predictor.Predictor._model.modules", "embedding_gradients.append", "isinstance", "backward_hooks.append", "module.register_backward_hook"], "methods", ["None"], ["", "def", "_register_embedding_gradient_hooks", "(", "self", ",", "embedding_gradients", ")", ":", "\n", "        ", "\"\"\"\n        Registers a backward hook on the\n        :class:`~allennlp.modules.text_field_embedder.basic_text_field_embbedder.BasicTextFieldEmbedder`\n        class. Used to save the gradients of the embeddings for use in get_gradients()\n\n        When there are multiple inputs (e.g., a passage and question), the hook\n        will be called multiple times. We append all the embeddings gradients\n        to a list.\n        \"\"\"", "\n", "def", "hook_layers", "(", "module", ",", "grad_in", ",", "grad_out", ")", ":", "# pylint: disable=unused-argument", "\n", "            ", "embedding_gradients", ".", "append", "(", "grad_out", "[", "0", "]", ")", "\n", "\n", "", "backward_hooks", "=", "[", "]", "\n", "for", "module", "in", "self", ".", "_model", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "TextFieldEmbedder", ")", ":", "\n", "                ", "backward_hooks", ".", "append", "(", "module", ".", "register_backward_hook", "(", "hook_layers", ")", ")", "\n", "\n", "", "", "return", "backward_hooks", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.predictor.Predictor.capture_model_internals": [[146, 179], ["enumerate", "predictor.Predictor._model.modules", "module.register_forward_hook.remove", "module.register_forward_hook", "hooks.append", "str", "allennlp.common.util.sanitize", "predictor.Predictor.capture_model_internals.add_output"], "methods", ["None"], ["", "@", "contextmanager", "\n", "def", "capture_model_internals", "(", "self", ")", "->", "Iterator", "[", "dict", "]", ":", "\n", "        ", "\"\"\"\n        Context manager that captures the internal-module outputs of\n        this predictor's model. The idea is that you could use it as follows:\n\n        .. code-block:: python\n\n            with predictor.capture_model_internals() as internals:\n                outputs = predictor.predict_json(inputs)\n\n            return {**outputs, \"model_internals\": internals}\n        \"\"\"", "\n", "results", "=", "{", "}", "\n", "hooks", "=", "[", "]", "\n", "\n", "# First we'll register hooks to add the outputs of each module to the results dict.", "\n", "def", "add_output", "(", "idx", ":", "int", ")", ":", "\n", "            ", "def", "_add_output", "(", "mod", ",", "_", ",", "outputs", ")", ":", "\n", "                ", "results", "[", "idx", "]", "=", "{", "\"name\"", ":", "str", "(", "mod", ")", ",", "\"output\"", ":", "sanitize", "(", "outputs", ")", "}", "\n", "", "return", "_add_output", "\n", "\n", "", "for", "idx", ",", "module", "in", "enumerate", "(", "self", ".", "_model", ".", "modules", "(", ")", ")", ":", "\n", "            ", "if", "module", "!=", "self", ".", "_model", ":", "\n", "                ", "hook", "=", "module", ".", "register_forward_hook", "(", "add_output", "(", "idx", ")", ")", "\n", "hooks", ".", "append", "(", "hook", ")", "\n", "\n", "# If you capture the return value of the context manager, you get the results dict.", "\n", "", "", "yield", "results", "\n", "\n", "# And then when you exit the context we remove all the hooks.", "\n", "for", "hook", "in", "hooks", ":", "\n", "            ", "hook", ".", "remove", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.predictor.Predictor.predict_instance": [[180, 183], ["predictor.Predictor._model.forward_on_instance", "allennlp.common.util.sanitize"], "methods", ["None"], ["", "", "def", "predict_instance", "(", "self", ",", "instance", ":", "Instance", ")", "->", "JsonDict", ":", "\n", "        ", "outputs", "=", "self", ".", "_model", ".", "forward_on_instance", "(", "instance", ")", "\n", "return", "sanitize", "(", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.predictor.Predictor.predictions_to_labeled_instances": [[184, 199], ["RuntimeError"], "methods", ["None"], ["", "def", "predictions_to_labeled_instances", "(", "self", ",", "\n", "instance", ":", "Instance", ",", "\n", "outputs", ":", "Dict", "[", "str", ",", "numpy", ".", "ndarray", "]", ")", "->", "List", "[", "Instance", "]", ":", "\n", "        ", "\"\"\"\n        This function takes a model's outputs for an Instance, and it labels that instance according\n        to the output. For example, in classification this function labels the instance according\n        to the class with the highest probability. This function is used to to compute gradients\n        of what the model predicted. The return type is a list because in some tasks there are\n        multiple predictions in the output (e.g., in NER a model predicts multiple spans). In this\n        case, each instance in the returned list of Instances contains an individual\n        entity prediction as the label.\n\n        \"\"\"", "\n", "# pylint: disable=unused-argument,no-self-use", "\n", "raise", "RuntimeError", "(", "\"implement this method for model interpretations or attacks\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.predictor.Predictor._json_to_instance": [[200, 207], ["None"], "methods", ["None"], ["", "def", "_json_to_instance", "(", "self", ",", "json_dict", ":", "JsonDict", ")", "->", "Instance", ":", "\n", "        ", "\"\"\"\n        Converts a JSON object into an :class:`~allennlp.data.instance.Instance`\n        and a ``JsonDict`` of information which the ``Predictor`` should pass through,\n        such as tokenised inputs.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.predictor.Predictor.predict_batch_json": [[208, 211], ["predictor.Predictor._batch_json_to_instances", "predictor.Predictor.predict_batch_instance"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.predictor.Predictor._batch_json_to_instances", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.predictor.Predictor.predict_batch_instance"], ["", "def", "predict_batch_json", "(", "self", ",", "inputs", ":", "List", "[", "JsonDict", "]", ")", "->", "List", "[", "JsonDict", "]", ":", "\n", "        ", "instances", "=", "self", ".", "_batch_json_to_instances", "(", "inputs", ")", "\n", "return", "self", ".", "predict_batch_instance", "(", "instances", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.predictor.Predictor.predict_batch_instance": [[212, 215], ["predictor.Predictor._model.forward_on_instances", "allennlp.common.util.sanitize"], "methods", ["None"], ["", "def", "predict_batch_instance", "(", "self", ",", "instances", ":", "List", "[", "Instance", "]", ")", "->", "List", "[", "JsonDict", "]", ":", "\n", "        ", "outputs", "=", "self", ".", "_model", ".", "forward_on_instances", "(", "instances", ")", "\n", "return", "sanitize", "(", "outputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.predictor.Predictor._batch_json_to_instances": [[216, 229], ["instances.append", "predictor.Predictor._json_to_instance"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.predictor.Predictor._json_to_instance"], ["", "def", "_batch_json_to_instances", "(", "self", ",", "json_dicts", ":", "List", "[", "JsonDict", "]", ")", "->", "List", "[", "Instance", "]", ":", "\n", "        ", "\"\"\"\n        Converts a list of JSON objects into a list of :class:`~allennlp.data.instance.Instance`s.\n        By default, this expects that a \"batch\" consists of a list of JSON blobs which would\n        individually be predicted by :func:`predict_json`. In order to use this method for\n        batch prediction, :func:`_json_to_instance` should be implemented by the subclass, or\n        if the instances have some dependency on each other, this method should be overridden\n        directly.\n        \"\"\"", "\n", "instances", "=", "[", "]", "\n", "for", "json_dict", "in", "json_dicts", ":", "\n", "            ", "instances", ".", "append", "(", "self", ".", "_json_to_instance", "(", "json_dict", ")", ")", "\n", "", "return", "instances", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.predictor.Predictor.from_path": [[230, 259], ["predictor.Predictor.from_archive", "allennlp.models.archival.load_archive"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.predictor.Predictor.from_archive"], ["", "@", "classmethod", "\n", "def", "from_path", "(", "cls", ",", "archive_path", ":", "str", ",", "predictor_name", ":", "str", "=", "None", ",", "cuda_device", ":", "int", "=", "-", "1", ",", "\n", "dataset_reader_to_load", ":", "str", "=", "\"validation\"", ")", "->", "'Predictor'", ":", "\n", "        ", "\"\"\"\n        Instantiate a :class:`Predictor` from an archive path.\n\n        If you need more detailed configuration options, such as overrides,\n        please use `from_archive`.\n\n        Parameters\n        ----------\n        archive_path: ``str``\n            The path to the archive.\n        predictor_name: ``str``, optional (default=None)\n            Name that the predictor is registered as, or None to use the\n            predictor associated with the model.\n        cuda_device: ``int``, optional (default=-1)\n            If `cuda_device` is >= 0, the model will be loaded onto the\n            corresponding GPU. Otherwise it will be loaded onto the CPU.\n        dataset_reader_to_load: ``str``, optional (default=\"validation\")\n            Which dataset reader to load from the archive, either \"train\" or\n            \"validation\".\n\n        Returns\n        -------\n        A Predictor instance.\n        \"\"\"", "\n", "return", "Predictor", ".", "from_archive", "(", "load_archive", "(", "archive_path", ",", "cuda_device", "=", "cuda_device", ")", ",", "predictor_name", ",", "\n", "dataset_reader_to_load", "=", "dataset_reader_to_load", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.predictor.Predictor.from_archive": [[260, 290], ["archive.config.duplicate", "allennlp.data.DatasetReader.from_params", "model.eval", "archive.config.duplicate.get().get", "Predictor.by_name", "allennlp.common.checks.ConfigurationError", "archive.config.duplicate.get"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval"], ["", "@", "classmethod", "\n", "def", "from_archive", "(", "cls", ",", "archive", ":", "Archive", ",", "predictor_name", ":", "str", "=", "None", ",", "\n", "dataset_reader_to_load", ":", "str", "=", "\"validation\"", ")", "->", "'Predictor'", ":", "\n", "        ", "\"\"\"\n        Instantiate a :class:`Predictor` from an :class:`~allennlp.models.archival.Archive`;\n        that is, from the result of training a model. Optionally specify which `Predictor`\n        subclass; otherwise, the default one for the model will be used. Optionally specify\n        which :class:`DatasetReader` should be loaded; otherwise, the validation one will be used\n        if it exists followed by the training dataset reader.\n        \"\"\"", "\n", "# Duplicate the config so that the config inside the archive doesn't get consumed", "\n", "config", "=", "archive", ".", "config", ".", "duplicate", "(", ")", "\n", "\n", "if", "not", "predictor_name", ":", "\n", "            ", "model_type", "=", "config", ".", "get", "(", "\"model\"", ")", ".", "get", "(", "\"type\"", ")", "\n", "if", "not", "model_type", "in", "DEFAULT_PREDICTORS", ":", "\n", "                ", "raise", "ConfigurationError", "(", "f\"No default predictor for model type {model_type}.\\n\"", "f\"Please specify a predictor explicitly.\"", ")", "\n", "", "predictor_name", "=", "DEFAULT_PREDICTORS", "[", "model_type", "]", "\n", "\n", "", "if", "dataset_reader_to_load", "==", "\"validation\"", "and", "\"validation_dataset_reader\"", "in", "config", ":", "\n", "            ", "dataset_reader_params", "=", "config", "[", "\"validation_dataset_reader\"", "]", "\n", "", "else", ":", "\n", "            ", "dataset_reader_params", "=", "config", "[", "\"dataset_reader\"", "]", "\n", "", "dataset_reader", "=", "DatasetReader", ".", "from_params", "(", "dataset_reader_params", ")", "\n", "\n", "model", "=", "archive", ".", "model", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "return", "Predictor", ".", "by_name", "(", "predictor_name", ")", "(", "model", ",", "dataset_reader", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.srl_to_storyline.Sentence.__init__": [[26, 31], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["def", "__init__", "(", "self", ",", "string", ",", "begin", ",", "end", ")", ":", "\n", "        ", "super", "(", "Sentence", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "string", "=", "string", "\n", "self", ".", "begin", "=", "begin", "\n", "self", ".", "end", "=", "end", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.srl_to_storyline.Story.__init__": [[35, 38], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["def", "__init__", "(", "self", ",", "char_list", ")", ":", "\n", "        ", "super", "(", "Story", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "char_list", "=", "char_list", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.srl_to_storyline.Story.join_sentence": [[39, 64], ["len", "srl_to_storyline.Sentence", "sentences.append", "len", "srl_to_storyline.Sentence", "sentences.append", "len", "len"], "methods", ["None"], ["", "def", "join_sentence", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        After using Allennlp coref pareser,\n        use the word_tokenzied list from a whole story to join a sent_tokenized list,\n        sep flag is </s>\n        \"\"\"", "\n", "idx", "=", "0", "\n", "length", "=", "len", "(", "self", ".", "char_list", ")", "\n", "pre_idx", "=", "0", "\n", "curent_string", "=", "''", "\n", "sentences", "=", "[", "]", "\n", "while", "idx", "<", "len", "(", "self", ".", "char_list", ")", ":", "\n", "            ", "if", "self", ".", "char_list", "[", "idx", "]", "==", "'</s>'", "and", "idx", "+", "1", "<", "length", ":", "\n", "#if self.char_list[idx] == '<' and idx + 2 < length and self.char_list[idx + 1] == '/s' and self.char_list[idx + 2] == '>':", "\n", "                ", "sentence", "=", "Sentence", "(", "curent_string", "[", ":", "len", "(", "curent_string", ")", "-", "1", "]", ",", "pre_idx", ",", "idx", ")", "\n", "sentences", ".", "append", "(", "sentence", ")", "\n", "curent_string", "=", "''", "\n", "# pre_idx = idx = idx + 3", "\n", "pre_idx", "=", "idx", "=", "idx", "+", "1", "\n", "", "else", ":", "\n", "                ", "curent_string", "=", "curent_string", "+", "self", ".", "char_list", "[", "idx", "]", "+", "\" \"", "\n", "idx", "+=", "1", "\n", "", "", "sentence", "=", "Sentence", "(", "curent_string", "[", ":", "len", "(", "curent_string", ")", "-", "1", "]", ",", "pre_idx", ",", "idx", ")", "\n", "sentences", ".", "append", "(", "sentence", ")", "\n", "return", "sentences", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.srl_to_storyline.load_stories": [[65, 73], ["print", "open", "articles.append", "len", "line.strip().split", "line.strip"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open"], ["", "", "def", "load_stories", "(", "infile", ")", ":", "\n", "    ", "articles", "=", "[", "]", "\n", "with", "open", "(", "infile", ")", "as", "inf", ":", "\n", "        ", "for", "line", "in", "inf", ":", "\n", "            ", "texts", "=", "' '", ".", "join", "(", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", ")", "\n", "articles", ".", "append", "(", "texts", ")", "\n", "", "", "print", "(", "'loaded %d stories!'", "%", "len", "(", "articles", ")", ")", "\n", "return", "articles", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.srl_to_storyline.coref_resolution": [[75, 86], ["allennlp.predictors.coref.CorefPredictor.predict_tokenized", "CorefPredictor.predict_tokenized.get", "CorefPredictor.predict_tokenized.get"], "function", ["None"], ["", "def", "coref_resolution", "(", "text", ",", "CorefPredictor", ")", ":", "\n", "    ", "\"\"\"\n    using Allennlp pretranied model to do coreference resolution\n    :param text: a story\n    :param coref_model: pretrained model weight, you should define its path in hyperpramenter\n    :param cuda_device: if it >=0, it will load archival model on GPU otherwise CPU\n    :return:  first return is a list of word_tokennize list of one story,\n            second returen is a three layers list, [[[1,1],[3,5]],[6,6],[8,11]], same entity's index will be clusted together\n    \"\"\"", "\n", "result", "=", "CorefPredictor", ".", "predict_tokenized", "(", "text", ")", "\n", "return", "result", ".", "get", "(", "\"document\"", ")", ",", "result", ".", "get", "(", "\"clusters\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.srl_to_storyline.SRL": [[88, 135], ["text.split", "srl_to_storyline.SRL._run_predictor"], "function", ["None"], ["", "def", "SRL", "(", "text", ",", "SRLpredictor", ",", "batch_size", ")", ":", "\n", "    ", "\"\"\"\n    :param text: a string of  story\n    :param srl_model: pretrained model weight, you should define its path in hyperpramenter\n    :param batch_size:\n    :param cuda_device: if it >=0, it will load archival model on GPU otherwise CPU\n    :return: all predictions after srl\n    \"\"\"", "\n", "\n", "def", "_run_predictor", "(", "batch_data", ")", ":", "\n", "        ", "if", "len", "(", "batch_data", ")", "==", "1", ":", "\n", "            ", "result", "=", "SRLpredictor", ".", "predict_json", "(", "batch_data", "[", "0", "]", ")", "\n", "# Batch results return a list of json objects, so in", "\n", "# order to iterate over the result below we wrap this in a list.", "\n", "results", "=", "[", "result", "]", "\n", "", "else", ":", "\n", "            ", "results", "=", "SRLpredictor", ".", "predict_batch_json", "(", "batch_data", ")", "\n", "", "return", "results", "\n", "\n", "", "batch_data", "=", "[", "]", "\n", "all_predictions", "=", "[", "]", "\n", "for", "line", "in", "text", ".", "split", "(", "\"</s>\"", ")", ":", "\n", "        ", "if", "not", "line", ".", "isspace", "(", ")", ":", "\n", "            ", "line", "=", "{", "\"sentence\"", ":", "line", ".", "strip", "(", ")", "}", "\n", "line", "=", "json", ".", "dumps", "(", "line", ")", "\n", "json_data", "=", "SRLpredictor", ".", "load_line", "(", "line", ")", "\n", "batch_data", ".", "append", "(", "json_data", ")", "\n", "# print(batch_data)", "\n", "if", "len", "(", "batch_data", ")", "==", "batch_size", ":", "\n", "                ", "predictions", "=", "_run_predictor", "(", "batch_data", ")", "\n", "# print(\"==========================\")", "\n", "# print(len(predictions))", "\n", "all_predictions", ".", "append", "(", "predictions", ")", "\n", "batch_data", "=", "[", "]", "\n", "", "", "", "if", "batch_data", ":", "\n", "        ", "predictions", "=", "_run_predictor", "(", "batch_data", ")", "\n", "all_predictions", ".", "append", "(", "predictions", ")", "\n", "", "all_description", "=", "[", "]", "\n", "\n", "for", "batch", "in", "all_predictions", ":", "\n", "        ", "for", "sentence", "in", "batch", ":", "\n", "            ", "verbs", "=", "sentence", ".", "get", "(", "\"verbs\"", ")", "\n", "description", "=", "[", "]", "\n", "for", "verb", "in", "verbs", ":", "\n", "                ", "description", ".", "append", "(", "verb", ".", "get", "(", "\"description\"", ")", ")", "\n", "", "all_description", ".", "append", "(", "description", ")", "\n", "", "", "return", "all_description", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.srl_to_storyline.extract_storyline": [[137, 178], ["print", "srl_to_storyline.Story", "srl_to_storyline.Story.join_sentence", "srl_to_storyline.SRL", "len", "len", "storyline.append", "re.findall", "srl_to_storyline.compress", "document.join_sentence.index", "len", "storyline.append", "storyline.append", "item.split", "item.split", "srl_to_storyline.replace_ent", "range"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.resume_srl.Story.join_sentence", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.srl_to_storyline1.SRL", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.resume_srl.compress", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.index", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.resume_srl.replace_ent"], ["", "def", "extract_storyline", "(", "doc", ",", "clusters", ",", "SRLpredictor", ",", "batch_size", ")", ":", "\n", "    ", "print", "(", "doc", ")", "\n", "\"\"\"\n    After getting all srl anf coref clusters, we need check if one ARG is in clusters, if so we need to change it to \"ent{}\"\n    :param doc:\n    :param clusters:\n    :param srl_model:\n    :param batch_size:\n    :param cuda_device:\n    :return:\n    \"\"\"", "\n", "document", "=", "Story", "(", "doc", ")", "\n", "sentences", "=", "document", ".", "join_sentence", "(", ")", "\n", "text", "=", "\" \"", ".", "join", "(", "document", ".", "char_list", ")", "\n", "all_descriptions", "=", "SRL", "(", "text", ",", "SRLpredictor", ",", "batch_size", ")", "\n", "storyline", "=", "[", "]", "\n", "# print(len(sentences))", "\n", "# print(len(all_descriptions))", "\n", "if", "len", "(", "sentences", ")", "!=", "len", "(", "all_descriptions", ")", ":", "\n", "        ", "assert", "(", "\"SRL WRONG, the length of sentence is not equal to length of descriptions\"", ")", "\n", "", "for", "s", "in", "sentences", ":", "\n", "        ", "descriptions", "=", "all_descriptions", "[", "sentences", ".", "index", "(", "s", ")", "]", "\n", "for", "description", "in", "descriptions", ":", "\n", "            ", "sentence_description", "=", "{", "}", "\n", "items", "=", "re", ".", "findall", "(", "r\"\\[(.+?)\\]+?\"", ",", "description", ")", "# only context", "\n", "for", "item", "in", "items", ":", "\n", "                ", "tag", "=", "item", ".", "split", "(", "\": \"", ")", "[", "0", "]", "\n", "if", "tag", "==", "\"V\"", ":", "\n", "                    ", "sentence_description", "[", "\"<V>\"", "]", "=", "item", ".", "split", "(", "': '", ")", "[", "1", "]", "\n", "", "elif", "tag", "in", "[", "\"ARG0\"", ",", "\"ARG1\"", ",", "\"ARG2\"", "]", ":", "\n", "                    ", "new_argument", "=", "replace_ent", "(", "item", ",", "s", ",", "doc", ",", "clusters", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "                        ", "if", "tag", "==", "\"ARG{}\"", ".", "format", "(", "i", ")", ":", "\n", "                            ", "sentence_description", "[", "\"<A{}>\"", ".", "format", "(", "i", ")", "]", "=", "new_argument", "\n", "", "", "", "", "sentence_description", "=", "compress", "(", "sentence_description", ")", "\n", "if", "len", "(", "sentence_description", ")", ">", "0", ":", "\n", "                ", "storyline", ".", "append", "(", "sentence_description", ")", "\n", "storyline", ".", "append", "(", "\"#\"", ")", "\n", "", "", "storyline", ".", "append", "(", "\"</s>\"", ")", "\n", "# print(storyline_add_demilt)", "\n", "", "return", "storyline", ",", "all_descriptions", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.srl_to_storyline.intersection": [[179, 191], ["max", "min"], "function", ["None"], ["", "def", "intersection", "(", "list1", ",", "list2", ")", ":", "\n", "    ", "\"\"\"\n    helper function to find wheter srl argument index overlap with coref_resolution clusters list\n    :param list1:\n    :param list2:\n    :return: the intersection part of two list\n    \"\"\"", "\n", "l", "=", "max", "(", "list1", "[", "0", "]", ",", "list2", "[", "0", "]", ")", "\n", "r", "=", "min", "(", "list1", "[", "1", "]", ",", "list2", "[", "1", "]", ")", "\n", "if", "l", ">", "r", ":", "\n", "      ", "return", "[", "]", "\n", "", "return", "[", "l", ",", "r", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.srl_to_storyline.replace_ent": [[192, 225], ["sub_sentence.split", "range", "range", "range", "argument.split", "range", "len", "len", "len", "len", "srl_to_storyline.intersection", "len", "len", "range", "len", "min", "len"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.resume_srl.intersection"], ["", "def", "replace_ent", "(", "argument", ",", "sentence", ",", "doc", ",", "clusters", ")", ":", "\n", "    ", "\"\"\"\n    comparing the srl results and coreference resolution results,\n    and change \"ARG{}\" to \"ent{}\" if in clusters\n    \"\"\"", "\n", "sub_sentence", "=", "argument", ".", "split", "(", "': '", ")", "[", "1", "]", "\n", "sub_sentence_words", "=", "sub_sentence", ".", "split", "(", "' '", ")", "\n", "new_argument", "=", "''", "\n", "begin", "=", "end", "=", "-", "1", "\n", "for", "i", "in", "range", "(", "sentence", ".", "begin", ",", "sentence", ".", "end", "-", "len", "(", "sub_sentence_words", ")", ")", ":", "\n", "        ", "is_match", "=", "True", "\n", "for", "j", "in", "range", "(", "len", "(", "sub_sentence_words", ")", ")", ":", "\n", "            ", "if", "sub_sentence_words", "[", "j", "]", "!=", "doc", "[", "i", "+", "j", "]", ":", "\n", "                ", "is_match", "=", "False", "\n", "break", "\n", "", "", "if", "is_match", ":", "\n", "            ", "begin", "=", "i", "\n", "end", "=", "i", "+", "len", "(", "sub_sentence_words", ")", "\n", "break", "\n", "", "", "for", "ent_idx", "in", "range", "(", "len", "(", "clusters", ")", ")", ":", "\n", "        ", "for", "ent_range", "in", "clusters", "[", "ent_idx", "]", ":", "\n", "            ", "intersection_range", "=", "intersection", "(", "ent_range", ",", "[", "begin", ",", "end", "]", ")", "\n", "if", "len", "(", "intersection_range", ")", ">", "0", ":", "\n", "                ", "for", "replace_idx", "in", "range", "(", "0", ",", "min", "(", "len", "(", "sub_sentence_words", ")", ",", "intersection_range", "[", "1", "]", "-", "intersection_range", "[", "0", "]", "+", "1", ")", ")", ":", "\n", "                    ", "sub_sentence_words", "[", "replace_idx", "]", "=", "\"ent {}\"", ".", "format", "(", "ent_idx", ")", "\n", "", "", "", "", "for", "i", "in", "range", "(", "len", "(", "sub_sentence_words", ")", ")", ":", "\n", "        ", "if", "i", "==", "0", "or", "sub_sentence_words", "[", "i", "-", "1", "]", "!=", "sub_sentence_words", "[", "i", "]", ":", "\n", "            ", "new_argument", "+=", "sub_sentence_words", "[", "i", "]", "\n", "", "else", ":", "\n", "            ", "continue", "\n", "", "if", "i", "!=", "len", "(", "sub_sentence_words", ")", "-", "1", ":", "\n", "            ", "new_argument", "+=", "' '", "\n", "", "", "return", "new_argument", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.srl_to_storyline.compress": [[227, 247], ["range", "sentence_description.get", "len", "sentence_description.get().split", "sentence_description.get"], "function", ["None"], ["", "def", "compress", "(", "sentence_description", ")", ":", "\n", "# conpress very long and messy SRL output to more abstract", "\n", "    ", "new_dic", "=", "sentence_description", "\n", "#rule 1:Delete some lines which only have V, since SRL aim is to learn info like \u201cwho does what\u201d, or \u201c who does what to who\u201d,", "\n", "# if it only has a verb prediction, it\u2019s useless", "\n", "if", "\"<A0>\"", "not", "in", "sentence_description", "and", "\"<A1>\"", "not", "in", "sentence_description", "and", "\"<A2>\"", "not", "in", "sentence_description", ":", "\n", "        ", "new_dic", "=", "{", "}", "\n", "return", "new_dic", "\n", "#rule 2:  Delete some lines whose Verb is \u201cbe\u201d or modal verb.", "\n", "", "if", "sentence_description", ".", "get", "(", "\"<V>\"", ")", "in", "[", "\"is\"", ",", "\"was\"", ",", "\"were\"", ",", "\"are\"", ",", "\"be\"", ",", "\"\\'s\"", ",", "\"\\'re\"", ",", "\"\\'ll\"", ",", "\n", "\"can\"", ",", "\"could\"", ",", "\"must\"", ",", "\"may\"", ",", "\"have to\"", ",", "\"has to\"", ",", "\n", "\"had to\"", ",", "\"will\"", ",", "\"would\"", ",", "\"has\"", ",", "\"have\"", ",", "\"had\"", ",", "\"do\"", ",", "\"does\"", ",", "\"did\"", "]", ":", "\n", "        ", "new_dic", "=", "{", "}", "\n", "return", "new_dic", "\n", "#rule 3: Delete some lines whose AGR length exceed 5, then delete that line.", "\n", "", "for", "i", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "        ", "if", "\"<A{}>\"", ".", "format", "(", "i", ")", "in", "sentence_description", "and", "len", "(", "sentence_description", ".", "get", "(", "\"<A{}>\"", ".", "format", "(", "i", ")", ")", ".", "split", "(", "\" \"", ")", ")", ">", "5", ":", "\n", "            ", "new_dic", "=", "{", "}", "\n", "return", "new_dic", "\n", "", "", "return", "new_dic", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.srl_to_storyline.label_story": [[248, 258], ["enumerate"], "function", ["None"], ["", "def", "label_story", "(", "doc", ",", "cluster", ")", ":", "\n", "    ", "for", "i", ",", "item", "in", "enumerate", "(", "cluster", ")", ":", "\n", "        ", "for", "ent", "in", "item", ":", "\n", "            ", "beg", "=", "ent", "[", "0", "]", "\n", "end", "=", "ent", "[", "1", "]", "\n", "#TODO change this logic", "\n", "doc", "[", "beg", "]", "=", "\"<ent> {0} {1}\"", ".", "format", "(", "i", ",", "doc", "[", "beg", "]", ")", "\n", "doc", "[", "end", "]", "=", "\"{0} </ent> {1}\"", ".", "format", "(", "doc", "[", "end", "]", ",", "i", ")", "\n", "", "", "labeled_story", "=", "\" \"", ".", "join", "(", "doc", ")", "\n", "return", "labeled_story", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.srl_to_storyline.spacy_word_token": [[259, 263], ["nlp"], "function", ["None"], ["", "def", "spacy_word_token", "(", "text", ",", "nlp", ")", ":", "\n", "    ", "doc", "=", "nlp", "(", "text", ")", "\n", "token_list", "=", "[", "t", ".", "text", "for", "t", "in", "doc", "]", "\n", "return", "token_list", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.check_marker.check": [[7, 37], ["enumerate", "print", "pandas.DataFrame", "pd.DataFrame.to_csv", "open", "fin.readlines", "print", "open", "fin.readlines", "print", "_plot.count", "storys[].count", "list", "plot_list.append", "story_list.append", "idx_list.append", "zip", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.data_helper.count", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.data_helper.count"], ["def", "check", "(", "plotfile", ",", "storyfile", ",", "csvfile", ",", "count", "=", "0", ")", ":", "\n", "    ", "with", "open", "(", "plotfile", ",", "'r'", ")", "as", "fin", ":", "\n", "        ", "plots", "=", "fin", ".", "readlines", "(", ")", "\n", "print", "(", "'plot : {} lines'", ".", "format", "(", "len", "(", "plots", ")", ")", ")", "\n", "\n", "", "with", "open", "(", "storyfile", ",", "'r'", ")", "as", "fin", ":", "\n", "        ", "storys", "=", "fin", ".", "readlines", "(", ")", "\n", "print", "(", "'story : {} lines'", ".", "format", "(", "len", "(", "storys", ")", ")", ")", "\n", "", "count", "==", "0", "\n", "idx_list", "=", "[", "]", "\n", "plot_list", "=", "[", "]", "\n", "story_list", "=", "[", "]", "\n", "for", "idx", ",", "_plot", "in", "enumerate", "(", "plots", ")", ":", "\n", "        ", "plots_marker", "=", "_plot", ".", "count", "(", "'</s>'", ")", "\n", "story_marker", "=", "storys", "[", "idx", "]", ".", "count", "(", "'</s>'", ")", "\n", "dic", "=", "{", "}", "\n", "if", "plots_marker", "!=", "story_marker", ":", "\n", "            ", "count", "+=", "1", "\n", "# no_equal_list.append(idx)", "\n", "plot_list", ".", "append", "(", "plots_marker", ")", "\n", "story_list", ".", "append", "(", "story_marker", ")", "\n", "idx_list", ".", "append", "(", "idx", "+", "1", ")", "\n", "\n", "# print('Line {} </s> markers number is\\'nt equal, plot: {}, story: {}'.format((idx+1),plots_marker,story_marker))", "\n", "", "else", ":", "\n", "            ", "pass", "\n", "", "", "print", "(", "'Non-equal count: {}, percentage: {} '", ".", "format", "(", "count", ",", "count", "/", "len", "(", "plots", ")", ")", ")", "\n", "df", "=", "pd", ".", "DataFrame", "(", "list", "(", "zip", "(", "idx_list", ",", "plot_list", ",", "story_list", ")", ")", ",", "\n", "columns", "=", "[", "'Line'", ",", "'</s> in plot'", ",", "'</s> in story'", "]", ")", "\n", "df", ".", "to_csv", "(", "csvfile", ",", "index", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.word_token.spacy_word_token": [[3, 15], ["spacy.load", "spacy.load.", "print", "spacy.load.tokenizer.add_special_case", "dict"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.load", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], ["def", "spacy_word_token", "(", "text", ")", ":", "\n", "    ", "special_chars", "=", "{", "'<EOL>'", ",", "'<EOT>'", ",", "'<eos>'", ",", "'</s>'", ",", "'#'", ",", "'<P>'", ",", "'``'", ",", "'\\'\\''", "}", "# harcoded list of special characters not to touch", "\n", "nlp", "=", "None", "# this is for spacy use but it is slow so we don't load it if not necessary", "\n", "spacy_model", "=", "'en_core_web_lg'", "\n", "nlp", "=", "spacy", ".", "load", "(", "spacy_model", ")", "\n", "# Need to special case all special chars for tokenization", "\n", "for", "key", "in", "special_chars", ":", "\n", "        ", "nlp", ".", "tokenizer", ".", "add_special_case", "(", "key", ",", "[", "dict", "(", "ORTH", "=", "key", ")", "]", ")", "\n", "", "doc", "=", "nlp", "(", "text", ")", "\n", "token_list", "=", "[", "t", ".", "text", "for", "t", "in", "doc", "]", "\n", "print", "(", "token_list", ")", "\n", "return", "token_list", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.concat_data.load": [[5, 10], ["open", "fin.read"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.dataset_reader.DatasetReader.read"], ["    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "dir", ",", "file", ")", ",", "\"r\"", ")", "as", "fin", ":", "\n", "        ", "data", "=", "fin", ".", "read", "(", ")", "\n", "length", "=", "len", "(", "data", ".", "split", "(", "\"\\n\"", ")", ")", "\n", "", "return", "data", ",", "length", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.srl_bert.SrlBert.__init__": [[35, 60], ["allennlp.nn.InitializerApplicator", "allennlp.models.model.Model.__init__", "isinstance", "srl_bert.SrlBert.vocab.get_vocab_size", "allennlp.training.metrics.SpanBasedF1Measure", "torch.nn.modules.Linear", "torch.nn.modules.Linear", "torch.nn.modules.Dropout", "torch.nn.modules.Dropout", "initializer", "pytorch_pretrained_bert.modeling.BertModel.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.multiprocessing_bpe_encoder.MultiprocessingEncoder.initializer", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.model.BARTModel.from_pretrained"], ["def", "__init__", "(", "self", ",", "\n", "vocab", ":", "Vocabulary", ",", "\n", "bert_model", ":", "Union", "[", "str", ",", "BertModel", "]", ",", "\n", "embedding_dropout", ":", "float", "=", "0.0", ",", "\n", "initializer", ":", "InitializerApplicator", "=", "InitializerApplicator", "(", ")", ",", "\n", "regularizer", ":", "Optional", "[", "RegularizerApplicator", "]", "=", "None", ",", "\n", "label_smoothing", ":", "float", "=", "None", ",", "\n", "ignore_span_metric", ":", "bool", "=", "False", ")", "->", "None", ":", "\n", "        ", "super", "(", "SrlBert", ",", "self", ")", ".", "__init__", "(", "vocab", ",", "regularizer", ")", "\n", "\n", "if", "isinstance", "(", "bert_model", ",", "str", ")", ":", "\n", "            ", "self", ".", "bert_model", "=", "BertModel", ".", "from_pretrained", "(", "bert_model", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bert_model", "=", "bert_model", "\n", "\n", "", "self", ".", "num_classes", "=", "self", ".", "vocab", ".", "get_vocab_size", "(", "\"labels\"", ")", "\n", "# For the span based evaluation, we don't want to consider labels", "\n", "# for verb, because the verb index is provided to the model.", "\n", "self", ".", "span_metric", "=", "SpanBasedF1Measure", "(", "vocab", ",", "tag_namespace", "=", "\"labels\"", ",", "ignore_classes", "=", "[", "\"V\"", "]", ")", "\n", "self", ".", "tag_projection_layer", "=", "Linear", "(", "self", ".", "bert_model", ".", "config", ".", "hidden_size", ",", "self", ".", "num_classes", ")", "\n", "\n", "self", ".", "embedding_dropout", "=", "Dropout", "(", "p", "=", "embedding_dropout", ")", "\n", "self", ".", "_label_smoothing", "=", "label_smoothing", "\n", "self", ".", "ignore_span_metric", "=", "ignore_span_metric", "\n", "initializer", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.srl_bert.SrlBert.forward": [[61, 133], ["allennlp.nn.util.get_text_field_mask", "srl_bert.SrlBert.bert_model", "srl_bert.SrlBert.embedding_dropout", "srl_bert.SrlBert.size", "srl_bert.SrlBert.tag_projection_layer", "srl_bert.SrlBert.view", "torch.softmax().view", "torch.softmax().view", "zip", "list", "list", "list", "allennlp.nn.util.sequence_cross_entropy_with_logits", "torch.softmax", "torch.softmax", "srl_bert.SrlBert.span_metric"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax"], ["", "def", "forward", "(", "self", ",", "# type: ignore", "\n", "tokens", ":", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ",", "\n", "verb_indicator", ":", "torch", ".", "Tensor", ",", "\n", "metadata", ":", "List", "[", "Any", "]", ",", "\n", "tags", ":", "torch", ".", "LongTensor", "=", "None", ")", ":", "\n", "# pylint: disable=arguments-differ", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        tokens : Dict[str, torch.LongTensor], required\n            The output of ``TextField.as_array()``, which should typically be passed directly to a\n            ``TextFieldEmbedder``. For this model, this must be a `SingleIdTokenIndexer` which\n            indexes wordpieces from the BERT vocabulary.\n        verb_indicator: torch.LongTensor, required.\n            An integer ``SequenceFeatureField`` representation of the position of the verb\n            in the sentence. This should have shape (batch_size, num_tokens) and importantly, can be\n            all zeros, in the case that the sentence has no verbal predicate.\n        tags : torch.LongTensor, optional (default = None)\n            A torch tensor representing the sequence of integer gold class labels\n            of shape ``(batch_size, num_tokens)``\n        metadata : ``List[Dict[str, Any]]``, optional, (default = None)\n            metadata containg the original words in the sentence, the verb to compute the\n            frame for, and start offsets for converting wordpieces back to a sequence of words,\n            under 'words', 'verb' and 'offsets' keys, respectively.\n\n        Returns\n        -------\n        An output dictionary consisting of:\n        logits : torch.FloatTensor\n            A tensor of shape ``(batch_size, num_tokens, tag_vocab_size)`` representing\n            unnormalised log probabilities of the tag classes.\n        class_probabilities : torch.FloatTensor\n            A tensor of shape ``(batch_size, num_tokens, tag_vocab_size)`` representing\n            a distribution of the tag classes per word.\n        loss : torch.FloatTensor, optional\n            A scalar loss to be optimised.\n        \"\"\"", "\n", "mask", "=", "get_text_field_mask", "(", "tokens", ")", "\n", "bert_embeddings", ",", "_", "=", "self", ".", "bert_model", "(", "input_ids", "=", "tokens", "[", "\"tokens\"", "]", ",", "\n", "token_type_ids", "=", "verb_indicator", ",", "\n", "attention_mask", "=", "mask", ",", "\n", "output_all_encoded_layers", "=", "False", ")", "\n", "\n", "embedded_text_input", "=", "self", ".", "embedding_dropout", "(", "bert_embeddings", ")", "\n", "batch_size", ",", "sequence_length", ",", "_", "=", "embedded_text_input", ".", "size", "(", ")", "\n", "logits", "=", "self", ".", "tag_projection_layer", "(", "embedded_text_input", ")", "\n", "\n", "reshaped_log_probs", "=", "logits", ".", "view", "(", "-", "1", ",", "self", ".", "num_classes", ")", "\n", "class_probabilities", "=", "F", ".", "softmax", "(", "reshaped_log_probs", ",", "dim", "=", "-", "1", ")", ".", "view", "(", "[", "batch_size", ",", "\n", "sequence_length", ",", "\n", "self", ".", "num_classes", "]", ")", "\n", "output_dict", "=", "{", "\"logits\"", ":", "logits", ",", "\"class_probabilities\"", ":", "class_probabilities", "}", "\n", "if", "tags", "is", "not", "None", ":", "\n", "            ", "loss", "=", "sequence_cross_entropy_with_logits", "(", "logits", ",", "\n", "tags", ",", "\n", "mask", ",", "\n", "label_smoothing", "=", "self", ".", "_label_smoothing", ")", "\n", "if", "not", "self", ".", "ignore_span_metric", ":", "\n", "                ", "self", ".", "span_metric", "(", "class_probabilities", ",", "tags", ",", "mask", ")", "\n", "", "output_dict", "[", "\"loss\"", "]", "=", "loss", "\n", "\n", "# We need to retain the mask in the output dictionary", "\n", "# so that we can crop the sequences to remove padding", "\n", "# when we do viterbi inference in self.decode.", "\n", "", "output_dict", "[", "\"mask\"", "]", "=", "mask", "\n", "\n", "# We add in the offsets here so we can compute the un-wordpieced tags.", "\n", "words", ",", "verbs", ",", "offsets", "=", "zip", "(", "*", "[", "(", "x", "[", "\"words\"", "]", ",", "x", "[", "\"verb\"", "]", ",", "x", "[", "\"offsets\"", "]", ")", "for", "x", "in", "metadata", "]", ")", "\n", "output_dict", "[", "\"words\"", "]", "=", "list", "(", "words", ")", "\n", "output_dict", "[", "\"verb\"", "]", "=", "list", "(", "verbs", ")", "\n", "output_dict", "[", "\"wordpiece_offsets\"", "]", "=", "list", "(", "offsets", ")", "\n", "return", "output_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.srl_bert.SrlBert.decode": [[134, 179], ["allennlp.nn.util.get_lengths_from_binary_sequence_mask().data.tolist", "srl_bert.SrlBert.get_viterbi_pairwise_potentials", "srl_bert.SrlBert.get_start_transitions", "zip", "all_predictions.dim", "allennlp.nn.util.viterbi_decode", "wordpiece_tags.append", "word_tags.append", "all_predictions[].detach().cpu", "srl_bert.SrlBert.vocab.get_token_from_index", "allennlp.nn.util.get_lengths_from_binary_sequence_mask", "range", "all_predictions[].detach", "all_predictions.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.srl_bert.SrlBert.get_viterbi_pairwise_potentials", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.srl_bert.SrlBert.get_start_transitions", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "@", "overrides", "\n", "def", "decode", "(", "self", ",", "output_dict", ":", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ")", "->", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        Does constrained viterbi decoding on class probabilities output in :func:`forward`.  The\n        constraint simply specifies that the output tags must be a valid BIO sequence.  We add a\n        ``\"tags\"`` key to the dictionary with the result.\n\n        NOTE: First, we decode a BIO sequence on top of the wordpieces. This is important; viterbi\n        decoding produces low quality output if you decode on top of word representations directly,\n        because the model gets confused by the 'missing' positions (which is sensible as it is trained\n        to perform tagging on wordpieces, not words).\n\n        Secondly, it's important that the indices we use to recover words from the wordpieces are the\n        start_offsets (i.e offsets which correspond to using the first wordpiece of words which are\n        tokenized into multiple wordpieces) as otherwise, we might get an ill-formed BIO sequence\n        when we select out the word tags from the wordpiece tags. This happens in the case that a word\n        is split into multiple word pieces, and then we take the last tag of the word, which might\n        correspond to, e.g, I-V, which would not be allowed as it is not preceeded by a B tag.\n        \"\"\"", "\n", "all_predictions", "=", "output_dict", "[", "'class_probabilities'", "]", "\n", "sequence_lengths", "=", "get_lengths_from_binary_sequence_mask", "(", "output_dict", "[", "\"mask\"", "]", ")", ".", "data", ".", "tolist", "(", ")", "\n", "\n", "if", "all_predictions", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "predictions_list", "=", "[", "all_predictions", "[", "i", "]", ".", "detach", "(", ")", ".", "cpu", "(", ")", "for", "i", "in", "range", "(", "all_predictions", ".", "size", "(", "0", ")", ")", "]", "\n", "", "else", ":", "\n", "            ", "predictions_list", "=", "[", "all_predictions", "]", "\n", "", "wordpiece_tags", "=", "[", "]", "\n", "word_tags", "=", "[", "]", "\n", "transition_matrix", "=", "self", ".", "get_viterbi_pairwise_potentials", "(", ")", "\n", "start_transitions", "=", "self", ".", "get_start_transitions", "(", ")", "\n", "# **************** Different ********************", "\n", "# We add in the offsets here so we can compute the un-wordpieced tags.", "\n", "for", "predictions", ",", "length", ",", "offsets", "in", "zip", "(", "predictions_list", ",", "\n", "sequence_lengths", ",", "\n", "output_dict", "[", "\"wordpiece_offsets\"", "]", ")", ":", "\n", "            ", "max_likelihood_sequence", ",", "_", "=", "viterbi_decode", "(", "predictions", "[", ":", "length", "]", ",", "transition_matrix", ",", "\n", "allowed_start_transitions", "=", "start_transitions", ")", "\n", "tags", "=", "[", "self", ".", "vocab", ".", "get_token_from_index", "(", "x", ",", "namespace", "=", "\"labels\"", ")", "\n", "for", "x", "in", "max_likelihood_sequence", "]", "\n", "\n", "wordpiece_tags", ".", "append", "(", "tags", ")", "\n", "word_tags", ".", "append", "(", "[", "tags", "[", "i", "]", "for", "i", "in", "offsets", "]", ")", "\n", "", "output_dict", "[", "'wordpiece_tags'", "]", "=", "wordpiece_tags", "\n", "output_dict", "[", "'tags'", "]", "=", "word_tags", "\n", "return", "output_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.srl_bert.SrlBert.get_metrics": [[180, 192], ["srl_bert.SrlBert.span_metric.get_metric", "srl_bert.SrlBert.items"], "methods", ["None"], ["", "def", "get_metrics", "(", "self", ",", "reset", ":", "bool", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "ignore_span_metric", ":", "\n", "# Return an empty dictionary if ignoring the", "\n", "# span metric", "\n", "            ", "return", "{", "}", "\n", "\n", "", "else", ":", "\n", "            ", "metric_dict", "=", "self", ".", "span_metric", ".", "get_metric", "(", "reset", "=", "reset", ")", "\n", "\n", "# This can be a lot of metrics, as there are 3 per class.", "\n", "# we only really care about the overall metrics, so we filter for them here.", "\n", "return", "{", "x", ":", "y", "for", "x", ",", "y", "in", "metric_dict", ".", "items", "(", ")", "if", "\"overall\"", "in", "x", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.srl_bert.SrlBert.get_viterbi_pairwise_potentials": [[193, 217], ["srl_bert.SrlBert.vocab.get_index_to_token_vocabulary", "len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "srl_bert.SrlBert.items", "srl_bert.SrlBert.items", "float"], "methods", ["None"], ["", "", "def", "get_viterbi_pairwise_potentials", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Generate a matrix of pairwise transition potentials for the BIO labels.\n        The only constraint implemented here is that I-XXX labels must be preceded\n        by either an identical I-XXX tag or a B-XXX tag. In order to achieve this\n        constraint, pairs of labels which do not satisfy this constraint have a\n        pairwise potential of -inf.\n\n        Returns\n        -------\n        transition_matrix : torch.Tensor\n            A (num_labels, num_labels) matrix of pairwise potentials.\n        \"\"\"", "\n", "all_labels", "=", "self", ".", "vocab", ".", "get_index_to_token_vocabulary", "(", "\"labels\"", ")", "\n", "num_labels", "=", "len", "(", "all_labels", ")", "\n", "transition_matrix", "=", "torch", ".", "zeros", "(", "[", "num_labels", ",", "num_labels", "]", ")", "\n", "\n", "for", "i", ",", "previous_label", "in", "all_labels", ".", "items", "(", ")", ":", "\n", "            ", "for", "j", ",", "label", "in", "all_labels", ".", "items", "(", ")", ":", "\n", "# I labels can only be preceded by themselves or", "\n", "# their corresponding B tag.", "\n", "                ", "if", "i", "!=", "j", "and", "label", "[", "0", "]", "==", "'I'", "and", "not", "previous_label", "==", "'B'", "+", "label", "[", "1", ":", "]", ":", "\n", "                    ", "transition_matrix", "[", "i", ",", "j", "]", "=", "float", "(", "\"-inf\"", ")", "\n", "", "", "", "return", "transition_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.srl_bert.SrlBert.get_start_transitions": [[219, 240], ["srl_bert.SrlBert.vocab.get_index_to_token_vocabulary", "len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "srl_bert.SrlBert.items", "float"], "methods", ["None"], ["", "def", "get_start_transitions", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        In the BIO sequence, we cannot start the sequence with an I-XXX tag.\n        This transition sequence is passed to viterbi_decode to specify this constraint.\n\n        Returns\n        -------\n        start_transitions : torch.Tensor\n            The pairwise potentials between a START token and\n            the first token of the sequence.\n        \"\"\"", "\n", "all_labels", "=", "self", ".", "vocab", ".", "get_index_to_token_vocabulary", "(", "\"labels\"", ")", "\n", "num_labels", "=", "len", "(", "all_labels", ")", "\n", "\n", "start_transitions", "=", "torch", ".", "zeros", "(", "num_labels", ")", "\n", "\n", "for", "i", ",", "label", "in", "all_labels", ".", "items", "(", ")", ":", "\n", "            ", "if", "label", "[", "0", "]", "==", "\"I\"", ":", "\n", "                ", "start_transitions", "[", "i", "]", "=", "float", "(", "\"-inf\"", ")", "\n", "\n", "", "", "return", "start_transitions", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.prepare_SRL_storyline_format.change_format": [[4, 21], ["open", "json.load", "open", "fout.write", "print", "SRL.items"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.load", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.prepare_SRL_storyline_format.unpack_json": [[22, 31], ["open", "json.load", "open", "fout.write"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.load", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.prepare_SRL_storyline_format.main": [[32, 38], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "prepare_SRL_storyline_format.change_format"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.prepare_SRL_storyline_format.change_format"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.srl_to_storyline1.Sentence.__init__": [[19, 24], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["def", "__init__", "(", "self", ",", "string", ",", "begin", ",", "end", ")", ":", "\n", "        ", "super", "(", "Sentence", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "string", "=", "string", "\n", "self", ".", "begin", "=", "begin", "\n", "self", ".", "end", "=", "end", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.srl_to_storyline1.Story.__init__": [[28, 31], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["def", "__init__", "(", "self", ",", "char_list", ")", ":", "\n", "        ", "super", "(", "Story", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "char_list", "=", "char_list", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.srl_to_storyline1.Story.join_sentence": [[32, 57], ["len", "srl_to_storyline1.Sentence", "sentences.append", "len", "srl_to_storyline1.Sentence", "sentences.append", "len", "len"], "methods", ["None"], ["", "def", "join_sentence", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        After using Allennlp coref pareser,\n        use the word_tokenzied list from a whole story to join a sent_tokenized list,\n        sep flag is </s>\n        \"\"\"", "\n", "idx", "=", "0", "\n", "length", "=", "len", "(", "self", ".", "char_list", ")", "\n", "pre_idx", "=", "0", "\n", "curent_string", "=", "''", "\n", "sentences", "=", "[", "]", "\n", "while", "idx", "<", "len", "(", "self", ".", "char_list", ")", ":", "\n", "            ", "if", "self", ".", "char_list", "[", "idx", "]", "==", "'</s>'", "and", "idx", "+", "1", "<", "length", ":", "\n", "#if self.char_list[idx] == '<' and idx + 2 < length and self.char_list[idx + 1] == '/s' and self.char_list[idx + 2] == '>':", "\n", "                ", "sentence", "=", "Sentence", "(", "curent_string", "[", ":", "len", "(", "curent_string", ")", "-", "1", "]", ",", "pre_idx", ",", "idx", ")", "\n", "sentences", ".", "append", "(", "sentence", ")", "\n", "curent_string", "=", "''", "\n", "# pre_idx = idx = idx + 3", "\n", "pre_idx", "=", "idx", "=", "idx", "+", "1", "\n", "", "else", ":", "\n", "                ", "curent_string", "=", "curent_string", "+", "self", ".", "char_list", "[", "idx", "]", "+", "\" \"", "\n", "idx", "+=", "1", "\n", "", "", "sentence", "=", "Sentence", "(", "curent_string", "[", ":", "len", "(", "curent_string", ")", "-", "1", "]", ",", "pre_idx", ",", "idx", ")", "\n", "sentences", ".", "append", "(", "sentence", ")", "\n", "return", "sentences", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.srl_to_storyline1.load_stories": [[58, 66], ["print", "open", "articles.append", "len", "line.strip().split", "line.strip"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open"], ["", "", "def", "load_stories", "(", "infile", ")", ":", "\n", "    ", "articles", "=", "[", "]", "\n", "with", "open", "(", "infile", ")", "as", "inf", ":", "\n", "        ", "for", "line", "in", "inf", ":", "\n", "            ", "texts", "=", "' '", ".", "join", "(", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", ")", "\n", "articles", ".", "append", "(", "texts", ")", "\n", "", "", "print", "(", "'loaded %d stories!'", "%", "len", "(", "articles", ")", ")", "\n", "return", "articles", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.srl_to_storyline1.coref_resolution": [[68, 79], ["allennlp.predictors.coref.CorefPredictor.predict_tokenized", "CorefPredictor.predict_tokenized.get", "CorefPredictor.predict_tokenized.get"], "function", ["None"], ["", "def", "coref_resolution", "(", "text", ",", "CorefPredictor", ")", ":", "\n", "    ", "\"\"\"\n    using Allennlp pretranied model to do coreference resolution\n    :param text: a story\n    :param coref_model: pretrained model weight, you should define its path in hyperpramenter\n    :param cuda_device: if it >=0, it will load archival model on GPU otherwise CPU\n    :return:  first return is a list of word_tokennize list of one story,\n            second returen is a three layers list, [[[1,1],[3,5]],[6,6],[8,11]], same entity's index will be clusted together\n    \"\"\"", "\n", "result", "=", "CorefPredictor", ".", "predict_tokenized", "(", "text", ")", "\n", "return", "result", ".", "get", "(", "\"document\"", ")", ",", "result", ".", "get", "(", "\"clusters\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.srl_to_storyline1.SRL": [[81, 132], ["time.time", "text.split", "print", "time.time", "print", "srl_to_storyline1.SRL._run_predictor"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], ["", "def", "SRL", "(", "text", ",", "SRLpredictor", ",", "batch_size", ")", ":", "\n", "    ", "start_srl_time", "=", "time", ".", "time", "(", ")", "\n", "\"\"\"\n    :param text: a string of  story\n    :param srl_model: pretrained model weight, you should define its path in hyperpramenter\n    :param batch_size:\n    :param cuda_device: if it >=0, it will load archival model on GPU otherwise CPU\n    :return: all predictions after srl\n    \"\"\"", "\n", "\n", "def", "_run_predictor", "(", "batch_data", ")", ":", "\n", "        ", "start_batch_srl_predicte_time", "=", "time", ".", "time", "(", ")", "\n", "if", "len", "(", "batch_data", ")", "==", "1", ":", "\n", "            ", "result", "=", "SRLpredictor", ".", "predict_json", "(", "batch_data", "[", "0", "]", ")", "\n", "# Batch results return a list of json objects, so in", "\n", "# order to iterate over the result below we wrap this in a list.", "\n", "results", "=", "[", "result", "]", "\n", "", "else", ":", "\n", "            ", "results", "=", "SRLpredictor", ".", "predict_batch_json", "(", "batch_data", ")", "\n", "", "print", "(", "(", "\"--- One batch SRL %s seconds ---\"", "%", "(", "time", ".", "time", "(", ")", "-", "start_batch_srl_predicte_time", ")", ")", ")", "\n", "return", "results", "\n", "\n", "", "batch_data", "=", "[", "]", "\n", "all_predictions", "=", "[", "]", "\n", "for", "line", "in", "text", ".", "split", "(", "\"</s>\"", ")", ":", "\n", "        ", "if", "not", "line", ".", "isspace", "(", ")", ":", "\n", "            ", "line", "=", "{", "\"sentence\"", ":", "line", ".", "strip", "(", ")", "}", "\n", "line", "=", "json", ".", "dumps", "(", "line", ")", "\n", "json_data", "=", "SRLpredictor", ".", "load_line", "(", "line", ")", "\n", "batch_data", ".", "append", "(", "json_data", ")", "\n", "# print(batch_data)", "\n", "if", "len", "(", "batch_data", ")", "==", "batch_size", ":", "\n", "                ", "predictions", "=", "_run_predictor", "(", "batch_data", ")", "\n", "# print(\"==========================\")", "\n", "# print(len(predictions))", "\n", "all_predictions", ".", "append", "(", "predictions", ")", "\n", "batch_data", "=", "[", "]", "\n", "", "", "", "if", "batch_data", ":", "\n", "        ", "predictions", "=", "_run_predictor", "(", "batch_data", ")", "\n", "all_predictions", ".", "append", "(", "predictions", ")", "\n", "", "all_description", "=", "[", "]", "\n", "\n", "for", "batch", "in", "all_predictions", ":", "\n", "        ", "for", "sentence", "in", "batch", ":", "\n", "            ", "verbs", "=", "sentence", ".", "get", "(", "\"verbs\"", ")", "\n", "description", "=", "[", "]", "\n", "for", "verb", "in", "verbs", ":", "\n", "                ", "description", ".", "append", "(", "verb", ".", "get", "(", "\"description\"", ")", ")", "\n", "", "all_description", ".", "append", "(", "description", ")", "\n", "", "", "print", "(", "\"--- SRL %s seconds ---\"", "%", "(", "time", ".", "time", "(", ")", "-", "start_srl_time", ")", ")", "\n", "return", "all_description", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.srl_to_storyline1.extract_storyline": [[134, 170], ["srl_to_storyline1.Story", "srl_to_storyline1.Story.join_sentence", "srl_to_storyline1.SRL", "len", "len", "re.findall", "srl_to_storyline1.compress", "document.join_sentence.index", "len", "storyline.append", "storyline.append", "item.split", "item.split", "srl_to_storyline1.replace_ent", "range"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.resume_srl.Story.join_sentence", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.srl_to_storyline1.SRL", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.resume_srl.compress", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.index", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.resume_srl.replace_ent"], ["", "def", "extract_storyline", "(", "doc", ",", "clusters", ",", "SRLpredictor", ",", "batch_size", ")", ":", "\n", "    ", "\"\"\"\n    After getting all srl anf coref clusters, we need check if one ARG is in clusters, if so we need to change it to \"ent{}\"\n    :param doc:\n    :param clusters:\n    :param srl_model:\n    :param batch_size:\n    :param cuda_device:\n    :return:\n    \"\"\"", "\n", "document", "=", "Story", "(", "doc", ")", "\n", "sentences", "=", "document", ".", "join_sentence", "(", ")", "\n", "text", "=", "\" \"", ".", "join", "(", "document", ".", "char_list", ")", "\n", "all_descriptions", "=", "SRL", "(", "text", ",", "SRLpredictor", ",", "batch_size", ")", "\n", "storyline", "=", "[", "]", "\n", "if", "len", "(", "sentences", ")", "!=", "len", "(", "all_descriptions", ")", ":", "\n", "        ", "assert", "(", "\"SRL WRONG, the length of sentence is not equal to length of descriptions\"", ")", "\n", "", "for", "s", "in", "sentences", ":", "\n", "        ", "descriptions", "=", "all_descriptions", "[", "sentences", ".", "index", "(", "s", ")", "]", "\n", "for", "description", "in", "descriptions", ":", "\n", "            ", "sentence_description", "=", "{", "}", "\n", "items", "=", "re", ".", "findall", "(", "r\"\\[(.+?)\\]+?\"", ",", "description", ")", "# only context", "\n", "for", "item", "in", "items", ":", "\n", "                ", "tag", "=", "item", ".", "split", "(", "\": \"", ")", "[", "0", "]", "\n", "if", "tag", "==", "\"V\"", ":", "\n", "                    ", "sentence_description", "[", "\"<V>\"", "]", "=", "item", ".", "split", "(", "': '", ")", "[", "1", "]", "\n", "", "elif", "tag", "in", "[", "\"ARG0\"", ",", "\"ARG1\"", ",", "\"ARG2\"", "]", ":", "\n", "                    ", "new_argument", "=", "replace_ent", "(", "item", ",", "s", ",", "doc", ",", "clusters", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "                        ", "if", "tag", "==", "\"ARG{}\"", ".", "format", "(", "i", ")", ":", "\n", "                            ", "sentence_description", "[", "\"<A{}>\"", ".", "format", "(", "i", ")", "]", "=", "new_argument", "\n", "", "", "", "", "sentence_description", "=", "compress", "(", "sentence_description", ")", "\n", "if", "len", "(", "sentence_description", ")", ">", "0", ":", "\n", "                ", "storyline", ".", "append", "(", "sentence_description", ")", "\n", "storyline", ".", "append", "(", "\"#\"", ")", "\n", "", "", "", "return", "storyline", ",", "all_descriptions", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.srl_to_storyline1.intersection": [[171, 183], ["max", "min"], "function", ["None"], ["", "def", "intersection", "(", "list1", ",", "list2", ")", ":", "\n", "    ", "\"\"\"\n    helper function to find wheter srl argument index overlap with coref_resolution clusters list\n    :param list1:\n    :param list2:\n    :return: the intersection part of two list\n    \"\"\"", "\n", "l", "=", "max", "(", "list1", "[", "0", "]", ",", "list2", "[", "0", "]", ")", "\n", "r", "=", "min", "(", "list1", "[", "1", "]", ",", "list2", "[", "1", "]", ")", "\n", "if", "l", ">", "r", ":", "\n", "      ", "return", "[", "]", "\n", "", "return", "[", "l", ",", "r", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.srl_to_storyline1.replace_ent": [[184, 219], ["time.time", "sub_sentence.split", "range", "range", "range", "print", "argument.split", "range", "len", "len", "len", "len", "srl_to_storyline1.intersection", "len", "len", "range", "len", "time.time", "min", "len"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.resume_srl.intersection"], ["", "def", "replace_ent", "(", "argument", ",", "sentence", ",", "doc", ",", "clusters", ")", ":", "\n", "    ", "start_replace_time", "=", "time", ".", "time", "(", ")", "\n", "\"\"\"\n    comparing the srl results and coreference resolution results,\n    and change \"ARG{}\" to \"ent{}\" if in clusters\n    \"\"\"", "\n", "sub_sentence", "=", "argument", ".", "split", "(", "': '", ")", "[", "1", "]", "\n", "sub_sentence_words", "=", "sub_sentence", ".", "split", "(", "' '", ")", "\n", "new_argument", "=", "''", "\n", "begin", "=", "end", "=", "-", "1", "\n", "for", "i", "in", "range", "(", "sentence", ".", "begin", ",", "sentence", ".", "end", "-", "len", "(", "sub_sentence_words", ")", ")", ":", "\n", "        ", "is_match", "=", "True", "\n", "for", "j", "in", "range", "(", "len", "(", "sub_sentence_words", ")", ")", ":", "\n", "            ", "if", "sub_sentence_words", "[", "j", "]", "!=", "doc", "[", "i", "+", "j", "]", ":", "\n", "                ", "is_match", "=", "False", "\n", "break", "\n", "", "", "if", "is_match", ":", "\n", "            ", "begin", "=", "i", "\n", "end", "=", "i", "+", "len", "(", "sub_sentence_words", ")", "\n", "break", "\n", "", "", "for", "ent_idx", "in", "range", "(", "len", "(", "clusters", ")", ")", ":", "\n", "        ", "for", "ent_range", "in", "clusters", "[", "ent_idx", "]", ":", "\n", "            ", "intersection_range", "=", "intersection", "(", "ent_range", ",", "[", "begin", ",", "end", "]", ")", "\n", "if", "len", "(", "intersection_range", ")", ">", "0", ":", "\n", "                ", "for", "replace_idx", "in", "range", "(", "0", ",", "min", "(", "len", "(", "sub_sentence_words", ")", ",", "intersection_range", "[", "1", "]", "-", "intersection_range", "[", "0", "]", "+", "1", ")", ")", ":", "\n", "                    ", "sub_sentence_words", "[", "replace_idx", "]", "=", "\"ent {}\"", ".", "format", "(", "ent_idx", ")", "\n", "", "", "", "", "for", "i", "in", "range", "(", "len", "(", "sub_sentence_words", ")", ")", ":", "\n", "        ", "if", "i", "==", "0", "or", "sub_sentence_words", "[", "i", "-", "1", "]", "!=", "sub_sentence_words", "[", "i", "]", ":", "\n", "            ", "new_argument", "+=", "sub_sentence_words", "[", "i", "]", "\n", "", "else", ":", "\n", "            ", "continue", "\n", "", "if", "i", "!=", "len", "(", "sub_sentence_words", ")", "-", "1", ":", "\n", "            ", "new_argument", "+=", "' '", "\n", "", "", "print", "(", "\"--- Replace ent %s seconds ---\"", "%", "(", "time", ".", "time", "(", ")", "-", "start_replace_time", ")", ")", "\n", "return", "new_argument", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.srl_to_storyline1.compress": [[221, 241], ["range", "sentence_description.get", "len", "sentence_description.get().split", "sentence_description.get"], "function", ["None"], ["", "def", "compress", "(", "sentence_description", ")", ":", "\n", "# conpress very long and messy SRL output to more abstract", "\n", "    ", "new_dic", "=", "sentence_description", "\n", "#rule 1:Delete some lines which only have V, since SRL aim is to learn info like \u201cwho does what\u201d, or \u201c who does what to who\u201d,", "\n", "# if it only has a verb prediction, it\u2019s useless", "\n", "if", "\"<A0>\"", "not", "in", "sentence_description", "and", "\"<A1>\"", "not", "in", "sentence_description", "and", "\"<A2>\"", "not", "in", "sentence_description", ":", "\n", "        ", "new_dic", "=", "{", "}", "\n", "return", "new_dic", "\n", "#rule 2:  Delete some lines whose Verb is \u201cbe\u201d or modal verb.", "\n", "", "if", "sentence_description", ".", "get", "(", "\"<V>\"", ")", "in", "[", "\"is\"", ",", "\"was\"", ",", "\"were\"", ",", "\"are\"", ",", "\"be\"", ",", "\"\\'s\"", ",", "\"\\'re\"", ",", "\"\\'ll\"", ",", "\n", "\"can\"", ",", "\"could\"", ",", "\"must\"", ",", "\"may\"", ",", "\"have to\"", ",", "\"has to\"", ",", "\n", "\"had to\"", ",", "\"will\"", ",", "\"would\"", ",", "\"has\"", ",", "\"have\"", ",", "\"had\"", "]", ":", "\n", "        ", "new_dic", "=", "{", "}", "\n", "return", "new_dic", "\n", "#rule 3: Delete some lines whose AGR length exceed 5, then delete that line.", "\n", "", "for", "i", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "        ", "if", "\"<A{}>\"", ".", "format", "(", "i", ")", "in", "sentence_description", "and", "len", "(", "sentence_description", ".", "get", "(", "\"<A{}>\"", ".", "format", "(", "i", ")", ")", ".", "split", "(", "\" \"", ")", ")", ">", "5", ":", "\n", "            ", "new_dic", "=", "{", "}", "\n", "return", "new_dic", "\n", "", "", "return", "new_dic", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.srl_to_storyline1.label_sotry": [[242, 251], ["enumerate"], "function", ["None"], ["", "def", "label_sotry", "(", "doc", ",", "cluster", ")", ":", "\n", "    ", "for", "i", ",", "item", "in", "enumerate", "(", "cluster", ")", ":", "\n", "        ", "for", "ent", "in", "item", ":", "\n", "            ", "beg", "=", "ent", "[", "0", "]", "\n", "end", "=", "ent", "[", "1", "]", "\n", "doc", "[", "beg", "]", "=", "\"<ent> {0} {1}\"", ".", "format", "(", "i", ",", "doc", "[", "beg", "]", ")", "\n", "doc", "[", "end", "]", "=", "\"{0} </ent> {1}\"", ".", "format", "(", "doc", "[", "end", "]", ",", "i", ")", "\n", "", "", "labeled_story", "=", "\" \"", ".", "join", "(", "doc", ")", "\n", "return", "labeled_story", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.srl_to_storyline1.spacy_word_token": [[252, 256], ["nlp"], "function", ["None"], ["", "def", "spacy_word_token", "(", "text", ",", "nlp", ")", ":", "\n", "    ", "doc", "=", "nlp", "(", "text", ")", "\n", "token_list", "=", "[", "t", ".", "text", "for", "t", "in", "doc", "]", "\n", "return", "token_list", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.srl_to_storyline1.main": [[257, 348], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "allennlp.common.checks.check_for_gpu", "time.time", "allennlp.predictors.semantic_role_labeler.SemanticRoleLabelerPredictor.from_archive", "print", "time.time", "allennlp.predictors.coref.CorefPredictor.from_archive", "print", "time.time", "spacy.load", "print", "time.time", "srl_to_storyline1.load_stories", "print", "tqdm.tqdm", "allennlp.models.archival.load_archive", "allennlp.models.archival.load_archive", "spacy.load.tokenizer.add_special_case", "len", "print", "print", "print", "print", "srl_to_storyline1.spacy_word_token", "time.time", "srl_to_storyline1.coref_resolution", "print", "srl_to_storyline1.extract_storyline", "srl_to_storyline1.label_sotry", "len", "all_storyline.append", "all_prediction.append", "all_labeled_stories.append", "all_title.append", "io.open", "json.dump", "io.open", "json.dump", "io.open", "json.dump", "io.open", "json.dump", "time.time", "time.time", "dict", "time.time", "time.time", "text.split", "print", "print", "print", "print", "len", "len", "len", "len", "text.split", "time.time"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.predictor.Predictor.from_archive", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.predictor.Predictor.from_archive", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.load", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.srl_to_storyline1.load_stories", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.srl_to_storyline1.spacy_word_token", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.srl_to_storyline1.coref_resolution", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.resume_srl.extract_storyline", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.srl_to_storyline1.label_sotry", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'--input_file'", ",", "type", "=", "str", ",", "help", "=", "'path to input file'", ")", "\n", "parser", ".", "add_argument", "(", "'--output_file'", ",", "type", "=", "str", ",", "help", "=", "'path to output file'", ")", "\n", "parser", ".", "add_argument", "(", "'--coref_model'", ",", "type", "=", "str", ",", "help", "=", "'path to pretrained model weight for corefrence resolution'", ")", "\n", "parser", ".", "add_argument", "(", "'--srl_model'", ",", "type", "=", "str", ",", "help", "=", "'path to pretrained mode weight for semantic role labeler'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'The batch size to use for processing'", ")", "\n", "parser", ".", "add_argument", "(", "'--cuda'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "help", "=", "'id of GPU to use (if any)'", ")", "\n", "parser", ".", "add_argument", "(", "'--save_coref_srl'", ",", "type", "=", "str", ",", "help", "=", "'dir for saving coref clusters and doc and srl for reusme'", ")", "\n", "parser", ".", "add_argument", "(", "'--label_story'", ",", "type", "=", "str", ",", "help", "=", "'dir for saving the stories after add ent label'", ")", "\n", "parser", ".", "add_argument", "(", "'--title'", ",", "type", "=", "str", ",", "help", "=", "'dir for saving the valid titles'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "# Check GPU memeory.", "\n", "check_for_gpu", "(", "args", ".", "cuda", ")", "\n", "\n", "start_downloda_SRL_time", "=", "time", ".", "time", "(", ")", "\n", "SRLpredictor", "=", "SemanticRoleLabelerPredictor", ".", "from_archive", "(", "load_archive", "(", "args", ".", "srl_model", ",", "args", ".", "cuda", ")", ")", "\n", "print", "(", "\"--- Download SRL predictor %s seconds ---\"", "%", "(", "time", ".", "time", "(", ")", "-", "start_downloda_SRL_time", ")", ")", "\n", "\n", "start_downloda_Coref_time", "=", "time", ".", "time", "(", ")", "\n", "Corefpredictor", "=", "CorefPredictor", ".", "from_archive", "(", "load_archive", "(", "args", ".", "coref_model", ",", "args", ".", "cuda", ")", ")", "\n", "print", "(", "\"--- Download Coref predictor %s seconds ---\"", "%", "(", "time", ".", "time", "(", ")", "-", "start_downloda_Coref_time", ")", ")", "\n", "\n", "#load spacy tokenizer", "\n", "start_download_Spacy_time", "=", "time", ".", "time", "(", ")", "\n", "special_chars", "=", "{", "'<EOL>'", ",", "'<EOT>'", ",", "'<eos>'", ",", "'</s>'", ",", "'#'", ",", "'<P>'", ",", "\"``\"", ",", "\"\\\"\"", "}", "# harcoded list of special characters not to touch", "\n", "spacy_model", "=", "'en_core_web_lg'", "\n", "nlp", "=", "spacy", ".", "load", "(", "spacy_model", ")", "\n", "# Need to special case all special chars for tokenization", "\n", "for", "key", "in", "special_chars", ":", "\n", "        ", "nlp", ".", "tokenizer", ".", "add_special_case", "(", "key", ",", "[", "dict", "(", "ORTH", "=", "key", ")", "]", ")", "\n", "", "print", "(", "\"--- Download Spacy model %s seconds ---\"", "%", "(", "time", ".", "time", "(", ")", "-", "start_download_Spacy_time", ")", ")", "\n", "\n", "start_download_story_time", "=", "time", ".", "time", "(", ")", "\n", "articles", "=", "load_stories", "(", "args", ".", "input_file", ")", "\n", "print", "(", "\"--- Download story %s seconds ---\"", "%", "(", "time", ".", "time", "(", ")", "-", "start_download_story_time", ")", ")", "\n", "\n", "all_storyline", "=", "[", "]", "\n", "all_prediction", "=", "[", "]", "\n", "all_labeled_stories", "=", "[", "]", "\n", "all_title", "=", "[", "]", "\n", "\n", "for", "text", "in", "tqdm", "(", "articles", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "title", "=", "text", ".", "split", "(", "\" <EOT> \"", ")", "[", "0", "]", "\n", "", "except", ":", "\n", "            ", "print", "(", "\"title is empty, out of range\"", ")", "\n", "", "try", ":", "\n", "            ", "story", "=", "spacy_word_token", "(", "text", ".", "split", "(", "\" <EOT> \"", ")", "[", "1", "]", ",", "nlp", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "\"story is empty, out of range\"", ")", "\n", "", "text_info", "=", "{", "}", "\n", "try", ":", "\n", "            ", "start_coref_time", "=", "time", ".", "time", "(", ")", "\n", "doc", ",", "clusters", "=", "coref_resolution", "(", "story", ",", "Corefpredictor", ")", "\n", "print", "(", "\"--- Coref resolution %s seconds ---\"", "%", "(", "time", ".", "time", "(", ")", "-", "start_coref_time", ")", ")", "\n", "\n", "storyline", ",", "srl", "=", "extract_storyline", "(", "doc", ",", "clusters", ",", "SRLpredictor", ",", "args", ".", "batch", ")", "\n", "\n", "labeled_story", "=", "label_sotry", "(", "doc", ",", "clusters", ")", "\n", "", "except", "RuntimeError", ":", "\n", "            ", "print", "(", "\"Runtime Error\"", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "\"Something else went wrong\"", ")", "\n", "\n", "", "if", "len", "(", "storyline", ")", ">", "0", ":", "\n", "            ", "all_storyline", ".", "append", "(", "storyline", ")", "\n", "text_info", "[", "\"doc\"", "]", "=", "doc", "\n", "text_info", "[", "\"clusters\"", "]", "=", "clusters", "\n", "text_info", "[", "\"srl\"", "]", "=", "srl", "\n", "all_prediction", ".", "append", "(", "text_info", ")", "\n", "all_labeled_stories", ".", "append", "(", "labeled_story", ")", "\n", "all_title", ".", "append", "(", "title", ")", "\n", "", "", "if", "len", "(", "all_storyline", ")", ">", "0", ":", "\n", "        ", "print", "(", "\"Save {} storylines!\"", ".", "format", "(", "len", "(", "all_storyline", ")", ")", ")", "\n", "with", "io", ".", "open", "(", "args", ".", "output_file", ",", "\"w\"", ",", "encoding", "=", "'utf8'", ")", "as", "fout", ":", "\n", "            ", "json", ".", "dump", "(", "all_storyline", ",", "fout", ",", "ensure_ascii", "=", "False", ")", "\n", "\n", "", "print", "(", "\"Save {} valid titles!\"", ".", "format", "(", "len", "(", "all_title", ")", ")", ")", "\n", "with", "io", ".", "open", "(", "args", ".", "title", ",", "\"w\"", ",", "encoding", "=", "'utf8'", ")", "as", "fout", ":", "\n", "            ", "json", ".", "dump", "(", "all_title", ",", "fout", ",", "ensure_ascii", "=", "False", ")", "\n", "\n", "", "print", "(", "\"Save {} valid and labeled stories!\"", ".", "format", "(", "len", "(", "all_labeled_stories", ")", ")", ")", "\n", "with", "io", ".", "open", "(", "args", ".", "label_story", ",", "\"w\"", ",", "encoding", "=", "'utf8'", ")", "as", "fout", ":", "\n", "            ", "json", ".", "dump", "(", "all_labeled_stories", ",", "fout", ",", "ensure_ascii", "=", "False", ")", "\n", "\n", "\n", "", "print", "(", "\"Save {} coref and srl predictions!\"", ".", "format", "(", "len", "(", "all_prediction", ")", ")", ")", "\n", "with", "io", ".", "open", "(", "args", ".", "save_coref_srl", ",", "\"w\"", ",", "encoding", "=", "'utf8'", ")", "as", "fout", ":", "\n", "            ", "json", ".", "dump", "(", "all_prediction", ",", "fout", ",", "ensure_ascii", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.resume_srl.Sentence.__init__": [[87, 92], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["def", "__init__", "(", "self", ",", "string", ",", "begin", ",", "end", ")", ":", "\n", "        ", "super", "(", "Sentence", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "string", "=", "string", "\n", "self", ".", "begin", "=", "begin", "\n", "self", ".", "end", "=", "end", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.resume_srl.Story.__init__": [[96, 99], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["def", "__init__", "(", "self", ",", "char_list", ")", ":", "\n", "        ", "super", "(", "Story", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "char_list", "=", "char_list", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.resume_srl.Story.join_sentence": [[100, 125], ["len", "resume_srl.Sentence", "sentences.append", "len", "resume_srl.Sentence", "sentences.append", "len", "len"], "methods", ["None"], ["", "def", "join_sentence", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        After using Allennlp coref pareser,\n        use the word_tokenzied list from a whole story to join a sent_tokenized list,\n        sep flag is </s>\n        \"\"\"", "\n", "idx", "=", "0", "\n", "length", "=", "len", "(", "self", ".", "char_list", ")", "\n", "pre_idx", "=", "0", "\n", "curent_string", "=", "''", "\n", "sentences", "=", "[", "]", "\n", "while", "idx", "<", "len", "(", "self", ".", "char_list", ")", ":", "\n", "            ", "if", "self", ".", "char_list", "[", "idx", "]", "==", "'</s>'", "and", "idx", "+", "1", "<", "length", ":", "\n", "#if self.char_list[idx] == '<' and idx + 2 < length and self.char_list[idx + 1] == '/s' and self.char_list[idx + 2] == '>':", "\n", "                ", "sentence", "=", "Sentence", "(", "curent_string", "[", ":", "len", "(", "curent_string", ")", "-", "1", "]", ",", "pre_idx", ",", "idx", ")", "\n", "sentences", ".", "append", "(", "sentence", ")", "\n", "curent_string", "=", "''", "\n", "# pre_idx = idx = idx + 3", "\n", "pre_idx", "=", "idx", "=", "idx", "+", "1", "\n", "", "else", ":", "\n", "                ", "curent_string", "=", "curent_string", "+", "self", ".", "char_list", "[", "idx", "]", "+", "\" \"", "\n", "idx", "+=", "1", "\n", "", "", "sentence", "=", "Sentence", "(", "curent_string", "[", ":", "len", "(", "curent_string", ")", "-", "1", "]", ",", "pre_idx", ",", "idx", ")", "\n", "sentences", ".", "append", "(", "sentence", ")", "\n", "return", "sentences", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.resume_srl.srl_resume": [[14, 48], ["open", "json.load", "json.load", "tqdm.tqdm", "resume_srl.extract_storyline", "all_storyline_list.append", "open", "fout.write", "resume_srl.clean_token", "doc.append", "tmp2.append", "_des.items", "tmp.append"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.load", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.load", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.resume_srl.extract_storyline", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.resume_srl.clean_token"], ["def", "srl_resume", "(", "fin", ",", "fout", ")", ":", "\n", "    ", "with", "open", "(", "fin", ",", "\"r\"", ")", "as", "fin", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "fin", ")", "\n", "all_storyline_list", "=", "[", "]", "\n", "for", "story", "in", "tqdm", "(", "data", ")", ":", "\n", "            ", "labeled_doc", "=", "story", "[", "\"doc\"", "]", "\n", "doc", "=", "[", "]", "\n", "# print(labeled_doc)", "\n", "for", "token", "in", "labeled_doc", ":", "\n", "                ", "token", "=", "clean_token", "(", "token", ")", "\n", "doc", ".", "append", "(", "token", ")", "\n", "# print(\"Clean doc\", doc)", "\n", "", "all_descriptions", "=", "story", "[", "\"srl\"", "]", "\n", "clusters", "=", "story", "[", "\"clusters\"", "]", "\n", "storyline", "=", "extract_storyline", "(", "doc", ",", "clusters", ",", "all_descriptions", ")", "\n", "# print(storyline)", "\n", "tmp2", "=", "[", "]", "\n", "for", "sent_des", "in", "storyline", ":", "\n", "                ", "tmp", "=", "[", "]", "\n", "for", "_des", "in", "sent_des", ":", "\n", "                    ", "for", "tag", ",", "word", "in", "_des", ".", "items", "(", ")", ":", "\n", "                        ", "_des", "=", "''", ".", "join", "(", "tag", "+", "' '", "+", "word", ")", "\n", "tmp", ".", "append", "(", "_des", ")", "\n", "", "", "sent_storyline", "=", "' # '", ".", "join", "(", "tmp", ")", "\n", "# print(sent_storyline)", "\n", "tmp2", ".", "append", "(", "sent_storyline", ")", "\n", "tmp3", "=", "' </s> '", ".", "join", "(", "tmp2", ")", "\n", "# print('\\n')", "\n", "# print(\"ALLL\", tmp3)", "\n", "", "all_storyline_list", ".", "append", "(", "tmp3", ")", "\n", "# print(\"=\"*89)", "\n", "", "all_storyline", "=", "'\\n'", ".", "join", "(", "all_storyline_list", ")", "\n", "with", "open", "(", "fout", ",", "'w'", ")", "as", "fout", ":", "\n", "            ", "fout", ".", "write", "(", "all_storyline", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.resume_srl.clean_token": [[50, 53], ["re.sub", "re.sub"], "function", ["None"], ["", "", "", "def", "clean_token", "(", "token", ")", ":", "\n", "    ", "token", "=", "re", ".", "sub", "(", "r'(<ent> [0-9]*) | (</ent> [0-9]*)'", ",", "''", ",", "token", ")", "\n", "return", "token", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.resume_srl.doc_resume": [[54, 67], ["open", "json.load", "json.load", "tqdm.tqdm", "open", "fout.write", "all_story_list.append", "len", "labeled_doc.pop"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.load", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.load", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write"], ["", "def", "doc_resume", "(", "fin", ",", "fout", ")", ":", "\n", "    ", "with", "open", "(", "fin", ",", "\"r\"", ")", "as", "fin", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "fin", ")", "\n", "all_story_list", "=", "[", "]", "\n", "for", "story", "in", "tqdm", "(", "data", ")", ":", "\n", "            ", "labeled_doc", "=", "story", "[", "\"doc\"", "]", "\n", "if", "len", "(", "labeled_doc", ")", ">", "1", ":", "\n", "                ", "labeled_doc", ".", "pop", "(", ")", "\n", "one_story", "=", "' '", ".", "join", "(", "labeled_doc", ")", "\n", "", "all_story_list", ".", "append", "(", "one_story", ")", "\n", "", "all_story", "=", "'\\n'", ".", "join", "(", "all_story_list", ")", "\n", "", "with", "open", "(", "fout", ",", "'w'", ")", "as", "fout", ":", "\n", "        ", "fout", ".", "write", "(", "all_story", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.resume_srl.story_resume": [[68, 84], ["open", "json.load", "json.load", "tqdm.tqdm", "open", "fout.write", "all_story_list.append", "resume_srl.clean_token", "doc.append"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.load", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.load", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.resume_srl.clean_token"], ["", "", "def", "story_resume", "(", "fin", ",", "fout", ")", ":", "\n", "    ", "with", "open", "(", "fin", ",", "\"r\"", ")", "as", "fin", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "fin", ")", "\n", "all_story_list", "=", "[", "]", "\n", "for", "story", "in", "tqdm", "(", "data", ")", ":", "\n", "            ", "labeled_doc", "=", "story", "[", "\"doc\"", "]", "\n", "doc", "=", "[", "]", "\n", "# print(labeled_doc)", "\n", "for", "token", "in", "labeled_doc", ":", "\n", "                ", "token", "=", "clean_token", "(", "token", ")", "\n", "doc", ".", "append", "(", "token", ")", "\n", "one_story", "=", "' '", ".", "join", "(", "doc", ")", "\n", "", "all_story_list", ".", "append", "(", "one_story", ")", "\n", "", "all_story", "=", "'\\n'", ".", "join", "(", "all_story_list", ")", "\n", "", "with", "open", "(", "fout", ",", "'w'", ")", "as", "fout", ":", "\n", "        ", "fout", ".", "write", "(", "all_story", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.resume_srl.extract_storyline": [[126, 172], ["resume_srl.Story", "resume_srl.Story.join_sentence", "len", "len", "storyline.append", "re.findall", "re.findall", "resume_srl.compress", "document.join_sentence.index", "len", "sentence_description.append", "item.split", "item.split", "resume_srl.replace_ent", "range"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.resume_srl.Story.join_sentence", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.resume_srl.compress", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.index", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.resume_srl.replace_ent"], ["", "", "def", "extract_storyline", "(", "doc", ",", "clusters", ",", "all_descriptions", ")", ":", "\n", "    ", "\"\"\"\n    After getting all srl anf coref clusters, we need check if one ARG is in clusters, if so we need to change it to \"ent{}\"\n    :param doc:\n    :param clusters:\n    :param srl_model:\n    :param batch_size:\n    :param cuda_device:\n    :return:\n    \"\"\"", "\n", "document", "=", "Story", "(", "doc", ")", "\n", "sentences", "=", "document", ".", "join_sentence", "(", ")", "\n", "text", "=", "\" \"", ".", "join", "(", "document", ".", "char_list", ")", "\n", "all_descriptions", "=", "all_descriptions", "\n", "storyline", "=", "[", "]", "\n", "# print(len(sentences))", "\n", "# print(len(all_descriptions))", "\n", "if", "len", "(", "sentences", ")", "!=", "len", "(", "all_descriptions", ")", ":", "\n", "        ", "assert", "(", "\"SRL WRONG, the length of sentence is not equal to length of descriptions\"", ")", "\n", "", "for", "s", "in", "sentences", ":", "\n", "        ", "descriptions", "=", "all_descriptions", "[", "sentences", ".", "index", "(", "s", ")", "]", "\n", "sentence_description", "=", "[", "]", "\n", "for", "description", "in", "descriptions", ":", "\n", "            ", "items", "=", "re", ".", "findall", "(", "r\"\\[(.+?)\\]+?\"", ",", "description", ")", "# only context", "\n", "_description", "=", "{", "}", "\n", "for", "item", "in", "items", ":", "\n", "                ", "tag", "=", "item", ".", "split", "(", "\": \"", ")", "[", "0", "]", "\n", "if", "tag", "==", "\"V\"", ":", "\n", "                    ", "_description", "[", "\"<V>\"", "]", "=", "item", ".", "split", "(", "': '", ")", "[", "1", "]", "\n", "", "elif", "tag", "in", "[", "\"ARG0\"", ",", "\"ARG1\"", ",", "\"ARG2\"", "]", ":", "\n", "                    ", "new_argument", "=", "replace_ent", "(", "item", ",", "s", ",", "doc", ",", "clusters", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "                        ", "if", "tag", "==", "\"ARG{}\"", ".", "format", "(", "i", ")", ":", "\n", "                            ", "_description", "[", "\"<A{}>\"", ".", "format", "(", "i", ")", "]", "=", "new_argument", "\n", "", "", "", "", "_description", "=", "compress", "(", "_description", ")", "\n", "# print(\"*****\")", "\n", "# print(_description)", "\n", "# tmp.append(_description)", "\n", "# print(\"*****\")", "\n", "\n", "if", "len", "(", "_description", ")", ">", "0", ":", "\n", "                ", "sentence_description", ".", "append", "(", "_description", ")", "\n", "# storyline.append(\" #\")", "\n", "", "", "storyline", ".", "append", "(", "sentence_description", ")", "\n", "# print(storyline_add_demilt)", "\n", "", "return", "storyline", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.resume_srl.intersection": [[173, 185], ["max", "min"], "function", ["None"], ["", "def", "intersection", "(", "list1", ",", "list2", ")", ":", "\n", "    ", "\"\"\"\n    helper function to find wheter srl argument index overlap with coref_resolution clusters list\n    :param list1:\n    :param list2:\n    :return: the intersection part of two list\n    \"\"\"", "\n", "l", "=", "max", "(", "list1", "[", "0", "]", ",", "list2", "[", "0", "]", ")", "\n", "r", "=", "min", "(", "list1", "[", "1", "]", ",", "list2", "[", "1", "]", ")", "\n", "if", "l", ">", "r", ":", "\n", "      ", "return", "[", "]", "\n", "", "return", "[", "l", ",", "r", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.resume_srl.replace_ent": [[186, 219], ["sub_sentence.split", "range", "range", "range", "argument.split", "range", "len", "len", "len", "len", "resume_srl.intersection", "len", "len", "range", "len", "min", "len"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.resume_srl.intersection"], ["", "def", "replace_ent", "(", "argument", ",", "sentence", ",", "doc", ",", "clusters", ")", ":", "\n", "    ", "\"\"\"\n    comparing the srl results and coreference resolution results,\n    and change \"ARG{}\" to \"ent{}\" if in clusters\n    \"\"\"", "\n", "sub_sentence", "=", "argument", ".", "split", "(", "': '", ")", "[", "1", "]", "\n", "sub_sentence_words", "=", "sub_sentence", ".", "split", "(", "' '", ")", "\n", "new_argument", "=", "''", "\n", "begin", "=", "end", "=", "-", "1", "\n", "for", "i", "in", "range", "(", "sentence", ".", "begin", ",", "sentence", ".", "end", "-", "len", "(", "sub_sentence_words", ")", ")", ":", "\n", "        ", "is_match", "=", "True", "\n", "for", "j", "in", "range", "(", "len", "(", "sub_sentence_words", ")", ")", ":", "\n", "            ", "if", "sub_sentence_words", "[", "j", "]", "!=", "doc", "[", "i", "+", "j", "]", ":", "\n", "                ", "is_match", "=", "False", "\n", "break", "\n", "", "", "if", "is_match", ":", "\n", "            ", "begin", "=", "i", "\n", "end", "=", "i", "+", "len", "(", "sub_sentence_words", ")", "\n", "break", "\n", "", "", "for", "ent_idx", "in", "range", "(", "len", "(", "clusters", ")", ")", ":", "\n", "        ", "for", "ent_range", "in", "clusters", "[", "ent_idx", "]", ":", "\n", "            ", "intersection_range", "=", "intersection", "(", "ent_range", ",", "[", "begin", ",", "end", "]", ")", "\n", "if", "len", "(", "intersection_range", ")", ">", "0", ":", "\n", "                ", "for", "replace_idx", "in", "range", "(", "0", ",", "min", "(", "len", "(", "sub_sentence_words", ")", ",", "intersection_range", "[", "1", "]", "-", "intersection_range", "[", "0", "]", "+", "1", ")", ")", ":", "\n", "                    ", "sub_sentence_words", "[", "replace_idx", "]", "=", "\"ent {}\"", ".", "format", "(", "ent_idx", ")", "\n", "", "", "", "", "for", "i", "in", "range", "(", "len", "(", "sub_sentence_words", ")", ")", ":", "\n", "        ", "if", "i", "==", "0", "or", "sub_sentence_words", "[", "i", "-", "1", "]", "!=", "sub_sentence_words", "[", "i", "]", ":", "\n", "            ", "new_argument", "+=", "sub_sentence_words", "[", "i", "]", "\n", "", "else", ":", "\n", "            ", "continue", "\n", "", "if", "i", "!=", "len", "(", "sub_sentence_words", ")", "-", "1", ":", "\n", "            ", "new_argument", "+=", "' '", "\n", "", "", "return", "new_argument", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.resume_srl.compress": [[221, 241], ["range", "sentence_description.get", "len", "sentence_description.get().split", "sentence_description.get"], "function", ["None"], ["", "def", "compress", "(", "sentence_description", ")", ":", "\n", "# conpress very long and messy SRL output to more abstract", "\n", "    ", "new_dic", "=", "sentence_description", "\n", "#rule 1:Delete some lines which only have V, since SRL aim is to learn info like \u201cwho does what\u201d, or \u201c who does what to who\u201d,", "\n", "# if it only has a verb prediction, it\u2019s useless", "\n", "if", "\"<A0>\"", "not", "in", "sentence_description", "and", "\"<A1>\"", "not", "in", "sentence_description", "and", "\"<A2>\"", "not", "in", "sentence_description", ":", "\n", "        ", "new_dic", "=", "{", "}", "\n", "return", "new_dic", "\n", "#rule 2:  Delete some lines whose Verb is \u201cbe\u201d or modal verb.", "\n", "", "if", "sentence_description", ".", "get", "(", "\"<V>\"", ")", "in", "[", "\"is\"", ",", "\"was\"", ",", "\"were\"", ",", "\"are\"", ",", "\"be\"", ",", "\"\\'s\"", ",", "\"\\'re\"", ",", "\"\\'ll\"", ",", "\n", "\"can\"", ",", "\"could\"", ",", "\"must\"", ",", "\"may\"", ",", "\"have to\"", ",", "\"has to\"", ",", "\n", "\"had to\"", ",", "\"will\"", ",", "\"would\"", ",", "\"has\"", ",", "\"have\"", ",", "\"had\"", ",", "\"do\"", ",", "\"does\"", ",", "\"did\"", "]", ":", "\n", "        ", "new_dic", "=", "{", "}", "\n", "return", "new_dic", "\n", "#rule 3: Delete some lines whose AGR length exceed 5, then delete that line.", "\n", "", "for", "i", "in", "range", "(", "0", ",", "3", ")", ":", "\n", "        ", "if", "\"<A{}>\"", ".", "format", "(", "i", ")", "in", "sentence_description", "and", "len", "(", "sentence_description", ".", "get", "(", "\"<A{}>\"", ".", "format", "(", "i", ")", ")", ".", "split", "(", "\" \"", ")", ")", ">", "5", ":", "\n", "            ", "new_dic", "=", "{", "}", "\n", "return", "new_dic", "\n", "", "", "return", "new_dic", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.concact.recover_hyperparams": [[12, 16], ["re.findall"], "function", ["None"], ["def", "recover_hyperparams", "(", "filename", ")", ":", "\n", "    ", "\"\"\"hacky. gets the hyperparams for RAKE from the filename to use in generating new filenames\"\"\"", "\n", "h_params", "=", "re", ".", "findall", "(", "'\\d'", ",", "filename", ")", "\n", "return", "h_params", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.concact.title_key": [[17, 32], ["print", "len", "open", "open", "open", "range", "titles.append", "keywords.append", "len", "len", "outfile.write", "outfile.write", "line.strip", "line.strip", "title_kw_pattern.format"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write"], ["", "def", "title_key", "(", "title_file", ",", "kw_file", ",", "title_key_file", ")", ":", "\n", "    ", "titles", ",", "keywords", "=", "[", "]", ",", "[", "]", "\n", "title_kw_pattern", "=", "'{0} <EOT> {1} <EOL>'", "\n", "with", "open", "(", "title_file", ",", "'r'", ")", "as", "infile", ":", "\n", "        ", "for", "line", "in", "infile", ":", "\n", "            ", "titles", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "\n", "", "", "with", "open", "(", "kw_file", ",", "'r'", ")", "as", "infile", ":", "\n", "        ", "for", "line", "in", "infile", ":", "\n", "            ", "keywords", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "\n", "", "", "print", "(", "\"Concat {0} title with {1} storylines\"", ".", "format", "(", "len", "(", "titles", ")", ",", "len", "(", "keywords", ")", ")", ")", "\n", "total_lines", "=", "len", "(", "titles", ")", "\n", "with", "open", "(", "title_key_file", ",", "'w'", ")", "as", "outfile", ":", "\n", "        ", "for", "i", "in", "range", "(", "total_lines", ")", ":", "\n", "            ", "outfile", ".", "write", "(", "title_kw_pattern", ".", "format", "(", "titles", "[", "i", "]", ",", "keywords", "[", "i", "]", ")", ")", "\n", "outfile", ".", "write", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.concact.title_key_story": [[33, 51], ["print", "len", "open", "open", "open", "open", "range", "titles.append", "keywords.append", "stories.append", "len", "len", "len", "outfile.write", "outfile.write", "line.strip", "line.strip", "line.strip", "all_pattern.format"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write"], ["", "", "", "def", "title_key_story", "(", "title_file", ",", "kw_file", ",", "story_file", ",", "title_key_story_file", ")", ":", "\n", "    ", "titles", ",", "keywords", ",", "stories", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "all_pattern", "=", "'{0} <EOT> {1} <EOL> {2}'", "\n", "with", "open", "(", "title_file", ",", "'r'", ")", "as", "infile", ":", "\n", "        ", "for", "line", "in", "infile", ":", "\n", "            ", "titles", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "\n", "", "", "with", "open", "(", "kw_file", ",", "'r'", ")", "as", "infile", ":", "\n", "        ", "for", "line", "in", "infile", ":", "\n", "            ", "keywords", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "\n", "", "", "with", "open", "(", "story_file", ",", "'r'", ")", "as", "infile", ":", "\n", "        ", "for", "line", "in", "infile", ":", "\n", "            ", "stories", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "\n", "", "", "print", "(", "\"Concat {0} title with {1} storylines and {2} stories\"", ".", "format", "(", "len", "(", "titles", ")", ",", "len", "(", "keywords", ")", ",", "len", "(", "stories", ")", ")", ")", "\n", "total_lines", "=", "len", "(", "titles", ")", "\n", "with", "open", "(", "title_key_story_file", ",", "'w'", ")", "as", "outfile", ":", "\n", "        ", "for", "i", "in", "range", "(", "total_lines", ")", ":", "\n", "            ", "outfile", ".", "write", "(", "all_pattern", ".", "format", "(", "titles", "[", "i", "]", ",", "keywords", "[", "i", "]", ",", "stories", "[", "i", "]", ")", ")", "\n", "outfile", ".", "write", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.concact.key_story": [[52, 67], ["print", "len", "open", "open", "open", "range", "keywords.append", "stories.append", "len", "len", "outfile.write", "outfile.write", "line.strip", "line.strip", "kw_story_pattern.format"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write"], ["", "", "", "def", "key_story", "(", "kw_file", ",", "story_file", ",", "key_story_file", ")", ":", "\n", "    ", "keywords", ",", "stories", "=", "[", "]", ",", "[", "]", "\n", "kw_story_pattern", "=", "'{0} <EOL> {1}'", "\n", "with", "open", "(", "kw_file", ",", "'r'", ")", "as", "infile", ":", "\n", "        ", "for", "line", "in", "infile", ":", "\n", "            ", "keywords", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "\n", "", "", "with", "open", "(", "story_file", ",", "'r'", ")", "as", "infile", ":", "\n", "        ", "for", "line", "in", "infile", ":", "\n", "            ", "stories", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "\n", "", "", "print", "(", "\"Concat {0} storylines with {1} stories\"", ".", "format", "(", "len", "(", "keywords", ")", ",", "len", "(", "stories", ")", ")", ")", "\n", "total_lines", "=", "len", "(", "keywords", ")", "\n", "with", "open", "(", "key_story_file", ",", "'w'", ")", "as", "outfile", ":", "\n", "        ", "for", "i", "in", "range", "(", "total_lines", ")", ":", "\n", "            ", "outfile", ".", "write", "(", "kw_story_pattern", ".", "format", "(", "keywords", "[", "i", "]", ",", "stories", "[", "i", "]", ")", ")", "\n", "outfile", ".", "write", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.concact.title_story": [[68, 83], ["print", "len", "open", "open", "open", "range", "titles.append", "stories.append", "len", "len", "outfile.write", "outfile.write", "line.strip", "line.strip", "title_story_pattern.format"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write"], ["", "", "", "def", "title_story", "(", "title_file", ",", "story_file", ",", "title_story_file", ")", ":", "\n", "    ", "titles", ",", "stories", "=", "[", "]", ",", "[", "]", "\n", "title_story_pattern", "=", "'{0} <EOT> {1}'", "\n", "with", "open", "(", "title_file", ",", "'r'", ")", "as", "infile", ":", "\n", "        ", "for", "line", "in", "infile", ":", "\n", "            ", "titles", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "\n", "", "", "with", "open", "(", "story_file", ",", "'r'", ")", "as", "infile", ":", "\n", "        ", "for", "line", "in", "infile", ":", "\n", "            ", "stories", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "\n", "", "", "print", "(", "\"Concat {0} titles with {1} stories\"", ".", "format", "(", "len", "(", "titles", ")", ",", "len", "(", "stories", ")", ")", ")", "\n", "total_lines", "=", "len", "(", "titles", ")", "\n", "with", "open", "(", "title_story_file", ",", "'w'", ")", "as", "outfile", ":", "\n", "        ", "for", "i", "in", "range", "(", "total_lines", ")", ":", "\n", "            ", "outfile", ".", "write", "(", "title_story_pattern", ".", "format", "(", "titles", "[", "i", "]", ",", "stories", "[", "i", "]", ")", ")", "\n", "outfile", ".", "write", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.dataset_reader._LazyInstances.__init__": [[20, 30], ["typing.Iterable.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["def", "__init__", "(", "self", ",", "\n", "instance_generator", ":", "Callable", "[", "[", "]", ",", "Iterable", "[", "Instance", "]", "]", ",", "\n", "cache_file", ":", "str", "=", "None", ",", "\n", "deserialize", ":", "Callable", "[", "[", "str", "]", ",", "Instance", "]", "=", "None", ",", "\n", "serialize", ":", "Callable", "[", "[", "Instance", "]", ",", "str", "]", "=", "None", ")", "->", "None", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "instance_generator", "=", "instance_generator", "\n", "self", ".", "cache_file", "=", "cache_file", "\n", "self", ".", "deserialize", "=", "deserialize", "\n", "self", ".", "serialize", "=", "serialize", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.dataset_reader._LazyInstances.__iter__": [[31, 50], ["os.path.exists", "open", "dataset_reader._LazyInstances.instance_generator", "isinstance", "open", "dataset_reader._LazyInstances.instance_generator", "allennlp.common.checks.ConfigurationError", "dataset_reader._LazyInstances.deserialize", "data_file.write", "data_file.write", "dataset_reader._LazyInstances.serialize"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write"], ["", "def", "__iter__", "(", "self", ")", "->", "Iterator", "[", "Instance", "]", ":", "\n", "# Case 1: Use cached instances", "\n", "        ", "if", "self", ".", "cache_file", "is", "not", "None", "and", "os", ".", "path", ".", "exists", "(", "self", ".", "cache_file", ")", ":", "\n", "            ", "with", "open", "(", "self", ".", "cache_file", ")", "as", "data_file", ":", "\n", "                ", "for", "line", "in", "data_file", ":", "\n", "                    ", "yield", "self", ".", "deserialize", "(", "line", ")", "\n", "# Case 2: Need to cache instances", "\n", "", "", "", "elif", "self", ".", "cache_file", "is", "not", "None", ":", "\n", "            ", "with", "open", "(", "self", ".", "cache_file", ",", "'w'", ")", "as", "data_file", ":", "\n", "                ", "for", "instance", "in", "self", ".", "instance_generator", "(", ")", ":", "\n", "                    ", "data_file", ".", "write", "(", "self", ".", "serialize", "(", "instance", ")", ")", "\n", "data_file", ".", "write", "(", "\"\\n\"", ")", "\n", "yield", "instance", "\n", "# Case 3: No cache", "\n", "", "", "", "else", ":", "\n", "            ", "instances", "=", "self", ".", "instance_generator", "(", ")", "\n", "if", "isinstance", "(", "instances", ",", "list", ")", ":", "\n", "                ", "raise", "ConfigurationError", "(", "\"For a lazy dataset reader, _read() must return a generator\"", ")", "\n", "", "yield", "from", "instances", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.dataset_reader.DatasetReader.__init__": [[68, 71], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "lazy", ":", "bool", "=", "False", ")", "->", "None", ":", "\n", "        ", "self", ".", "lazy", "=", "lazy", "\n", "self", ".", "_cache_directory", ":", "pathlib", ".", "Path", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.dataset_reader.DatasetReader.cache_data": [[72, 90], ["pathlib.Path", "os.makedirs"], "methods", ["None"], ["", "def", "cache_data", "(", "self", ",", "cache_directory", ":", "str", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        When you call this method, we will use this directory to store a cache of already-processed\n        ``Instances`` in every file passed to :func:`read`, serialized as one string-formatted\n        ``Instance`` per line.  If the cache file for a given ``file_path`` exists, we read the\n        ``Instances`` from the cache instead of re-processing the data (using\n        :func:`deserialize_instance`).  If the cache file does `not` exist, we will `create` it on\n        our first pass through the data (using :func:`serialize_instance`).\n\n        IMPORTANT CAVEAT: It is the `caller's` responsibility to make sure that this directory is\n        unique for any combination of code and parameters that you use.  That is, if you call this\n        method, we will use any existing cache files in that directory `regardless of the\n        parameters you set for this DatasetReader!`  If you use our commands, the ``Train`` command\n        is responsible for calling this method and ensuring that unique parameters correspond to\n        unique cache directories.  If you don't use our commands, that is your responsibility.\n        \"\"\"", "\n", "self", ".", "_cache_directory", "=", "pathlib", ".", "Path", "(", "cache_directory", ")", "\n", "os", ".", "makedirs", "(", "self", ".", "_cache_directory", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.dataset_reader.DatasetReader.read": [[91, 146], ["getattr", "logger.warning", "dataset_reader.DatasetReader._get_cache_location_for_file_path", "dataset_reader._LazyInstances", "os.path.exists", "dataset_reader.DatasetReader._instances_from_cache_file", "dataset_reader.DatasetReader._read", "isinstance", "allennlp.common.checks.ConfigurationError", "logger.info", "dataset_reader.DatasetReader._read", "os.path.exists", "open", "allennlp.common.Tqdm.tqdm", "allennlp.common.Tqdm.tqdm", "cache.write", "dataset_reader.DatasetReader.serialize_instance"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.dataset_reader.DatasetReader._get_cache_location_for_file_path", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.dataset_reader.DatasetReader._instances_from_cache_file", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.dataset_reader.DatasetReader._read", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.dataset_reader.DatasetReader._read", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.dataset_reader.DatasetReader.serialize_instance"], ["", "def", "read", "(", "self", ",", "file_path", ":", "str", ")", "->", "Iterable", "[", "Instance", "]", ":", "\n", "        ", "\"\"\"\n        Returns an ``Iterable`` containing all the instances\n        in the specified dataset.\n\n        If ``self.lazy`` is False, this calls ``self._read()``,\n        ensures that the result is a list, then returns the resulting list.\n\n        If ``self.lazy`` is True, this returns an object whose\n        ``__iter__`` method calls ``self._read()`` each iteration.\n        In this case your implementation of ``_read()`` must also be lazy\n        (that is, not load all instances into memory at once), otherwise\n        you will get a ``ConfigurationError``.\n\n        In either case, the returned ``Iterable`` can be iterated\n        over multiple times. It's unlikely you want to override this function,\n        but if you do your result should likewise be repeatedly iterable.\n        \"\"\"", "\n", "lazy", "=", "getattr", "(", "self", ",", "'lazy'", ",", "None", ")", "\n", "\n", "if", "lazy", "is", "None", ":", "\n", "            ", "logger", ".", "warning", "(", "\"DatasetReader.lazy is not set, \"", "\n", "\"did you forget to call the superclass constructor?\"", ")", "\n", "\n", "", "if", "self", ".", "_cache_directory", ":", "\n", "            ", "cache_file", "=", "self", ".", "_get_cache_location_for_file_path", "(", "file_path", ")", "\n", "", "else", ":", "\n", "            ", "cache_file", "=", "None", "\n", "\n", "", "if", "lazy", ":", "\n", "            ", "return", "_LazyInstances", "(", "lambda", ":", "self", ".", "_read", "(", "file_path", ")", ",", "\n", "cache_file", ",", "\n", "self", ".", "deserialize_instance", ",", "\n", "self", ".", "serialize_instance", ")", "\n", "", "else", ":", "\n", "# First we read the instances, either from a cache or from the original file.", "\n", "            ", "if", "cache_file", "and", "os", ".", "path", ".", "exists", "(", "cache_file", ")", ":", "\n", "                ", "instances", "=", "self", ".", "_instances_from_cache_file", "(", "cache_file", ")", "\n", "", "else", ":", "\n", "                ", "instances", "=", "self", ".", "_read", "(", "file_path", ")", "\n", "\n", "# Then some validation.", "\n", "", "if", "not", "isinstance", "(", "instances", ",", "list", ")", ":", "\n", "                ", "instances", "=", "[", "instance", "for", "instance", "in", "Tqdm", ".", "tqdm", "(", "instances", ")", "]", "\n", "", "if", "not", "instances", ":", "\n", "                ", "raise", "ConfigurationError", "(", "\"No instances were read from the given filepath {}. \"", "\n", "\"Is the path correct?\"", ".", "format", "(", "file_path", ")", ")", "\n", "\n", "# And finally we write to the cache if we need to.", "\n", "", "if", "cache_file", "and", "not", "os", ".", "path", ".", "exists", "(", "cache_file", ")", ":", "\n", "                ", "logger", ".", "info", "(", "f\"Caching instances to {cache_file}\"", ")", "\n", "with", "open", "(", "cache_file", ",", "'w'", ")", "as", "cache", ":", "\n", "                    ", "for", "instance", "in", "Tqdm", ".", "tqdm", "(", "instances", ")", ":", "\n", "                        ", "cache", ".", "write", "(", "self", ".", "serialize_instance", "(", "instance", ")", "+", "'\\n'", ")", "\n", "", "", "", "return", "instances", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.dataset_reader.DatasetReader._get_cache_location_for_file_path": [[147, 149], ["str", "allennlp.common.util.flatten_filename", "str"], "methods", ["None"], ["", "", "def", "_get_cache_location_for_file_path", "(", "self", ",", "file_path", ":", "str", ")", "->", "str", ":", "\n", "        ", "return", "str", "(", "self", ".", "_cache_directory", "/", "util", ".", "flatten_filename", "(", "str", "(", "file_path", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.dataset_reader.DatasetReader._read": [[150, 158], ["None"], "methods", ["None"], ["", "def", "_read", "(", "self", ",", "file_path", ":", "str", ")", "->", "Iterable", "[", "Instance", "]", ":", "\n", "        ", "\"\"\"\n        Reads the instances from the given file_path and returns them as an\n        `Iterable` (which could be a list or could be a generator).\n        You are strongly encouraged to use a generator, so that users can\n        read a dataset in a lazy way, if they so choose.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.dataset_reader.DatasetReader._instances_from_cache_file": [[159, 163], ["open", "dataset_reader.DatasetReader.deserialize_instance", "line.strip"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.dataset_reader.DatasetReader.deserialize_instance"], ["", "def", "_instances_from_cache_file", "(", "self", ",", "cache_filename", ":", "str", ")", "->", "Iterable", "[", "Instance", "]", ":", "\n", "        ", "with", "open", "(", "cache_filename", ",", "'r'", ")", "as", "cache_file", ":", "\n", "            ", "for", "line", "in", "cache_file", ":", "\n", "                ", "yield", "self", ".", "deserialize_instance", "(", "line", ".", "strip", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.dataset_reader.DatasetReader.text_to_instance": [[164, 182], ["None"], "methods", ["None"], ["", "", "", "def", "text_to_instance", "(", "self", ",", "*", "inputs", ")", "->", "Instance", ":", "\n", "        ", "\"\"\"\n        Does whatever tokenization or processing is necessary to go from textual input to an\n        ``Instance``.  The primary intended use for this is with a\n        :class:`~allennlp.service.predictors.predictor.Predictor`, which gets text input as a JSON\n        object and needs to process it to be input to a model.\n\n        The intent here is to share code between :func:`_read` and what happens at\n        model serving time, or any other time you want to make a prediction from new data.  We need\n        to process the data in the same way it was done at training time.  Allowing the\n        ``DatasetReader`` to process new text lets us accomplish this, as we can just call\n        ``DatasetReader.text_to_instance`` when serving predictions.\n\n        The input type here is rather vaguely specified, unfortunately.  The ``Predictor`` will\n        have to make some assumptions about the kind of ``DatasetReader`` that it's using, in order\n        to pass it the right information.\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.dataset_reader.DatasetReader.serialize_instance": [[183, 192], ["jsonpickle.dumps"], "methods", ["None"], ["", "def", "serialize_instance", "(", "self", ",", "instance", ":", "Instance", ")", "->", "str", ":", "\n", "        ", "\"\"\"\n        Serializes an ``Instance`` to a string.  We use this for caching the processed data.\n\n        The default implementation is to use ``jsonpickle``.  If you would like some other format\n        for your pre-processed data, override this method.\n        \"\"\"", "\n", "# pylint: disable=no-self-use", "\n", "return", "jsonpickle", ".", "dumps", "(", "instance", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.dataset_reader.DatasetReader.deserialize_instance": [[193, 203], ["jsonpickle.loads"], "methods", ["None"], ["", "def", "deserialize_instance", "(", "self", ",", "string", ":", "str", ")", "->", "Instance", ":", "\n", "        ", "\"\"\"\n        Deserializes an ``Instance`` from a string.  We use this when reading processed data from a\n        cache.\n\n        The default implementation is to use ``jsonpickle``.  If you would like some other format\n        for your pre-processed data, override this method.\n        \"\"\"", "\n", "# pylint: disable=no-self-use", "\n", "return", "jsonpickle", ".", "loads", "(", "string", ")", "# type: ignore", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.decomposable_attention_classifier.DecomposableAttentionClassifier.__init__": [[11, 48], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "decomposable_attention_classifier.DecomposableAttentionClassifier._mlp_layers", "decomposable_attention_classifier.DecomposableAttentionClassifier._mlp_layers", "decomposable_attention_classifier.DecomposableAttentionClassifier._mlp_layers", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "decomposable_attention_classifier.DecomposableAttentionClassifier.modules", "isinstance", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "torch.nn.utils.weight_norm", "m.weight.data.normal_", "m.bias.data.normal_"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.Embedding", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.Embedding", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.Embedding", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.Embedding", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.decomposable_attention_classifier.DecomposableAttentionClassifier._mlp_layers", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.decomposable_attention_classifier.DecomposableAttentionClassifier._mlp_layers", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.decomposable_attention_classifier.DecomposableAttentionClassifier._mlp_layers", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear"], ["    ", "def", "__init__", "(", "self", ",", "vocab_size", ",", "label_size", ",", "embedding_dim", ",", "hidden_dim", ",", "\n", "dropout_rate", ",", "init_normal_var", "=", "0.01", ",", "\n", "embed_mat", "=", "None", ",", "fix_embeddings", "=", "False", ")", ":", "\n", "        ", "super", "(", "DecomposableAttentionClassifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "embedding_dim", "=", "embedding_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "dropout_rate", "=", "dropout_rate", "\n", "self", ".", "label_size", "=", "label_size", "\n", "self", ".", "fix_embeddings", "=", "fix_embeddings", "\n", "\n", "self", ".", "word_embeds", "=", "nn", ".", "Embedding", "(", "vocab_size", ",", "embedding_dim", ")", "\n", "if", "embed_mat", "is", "not", "None", ":", "\n", "            ", "self", ".", "word_embeds", ".", "weight", ".", "data", "=", "embed_mat", "\n", "if", "fix_embeddings", ":", "\n", "                ", "self", ".", "word_embeds", ".", "weight", ".", "requires_grad", "=", "False", "\n", "self", ".", "word_embeds", "=", "weight_norm", "(", "self", ".", "word_embeds", ",", "dim", "=", "1", ")", "\n", "\n", "# linear layer on input", "\n", "", "", "self", ".", "input_linear", "=", "nn", ".", "Linear", "(", "\n", "self", ".", "embedding_dim", ",", "self", ".", "hidden_dim", ",", "bias", "=", "False", ")", "# linear transformation", "\n", "\n", "self", ".", "mlp_f", "=", "self", ".", "_mlp_layers", "(", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ")", "\n", "self", ".", "mlp_g", "=", "self", ".", "_mlp_layers", "(", "2", "*", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ")", "\n", "self", ".", "mlp_h", "=", "self", ".", "_mlp_layers", "(", "2", "*", "self", ".", "hidden_dim", ",", "self", ".", "hidden_dim", ")", "\n", "\n", "self", ".", "final_linear", "=", "nn", ".", "Linear", "(", "\n", "self", ".", "hidden_dim", ",", "self", ".", "label_size", ",", "bias", "=", "True", ")", "\n", "\n", "#self.drop = nn.Dropout(dropout_rate)", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "init_normal_var", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "normal_", "(", "0", ",", "init_normal_var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.decomposable_attention_classifier.DecomposableAttentionClassifier._mlp_layers": [[50, 61], ["mlp_layers.append", "mlp_layers.append", "mlp_layers.append", "mlp_layers.append", "mlp_layers.append", "mlp_layers.append", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear"], ["", "", "", "", "def", "_mlp_layers", "(", "self", ",", "input_dim", ",", "output_dim", ")", ":", "\n", "        ", "mlp_layers", "=", "[", "]", "\n", "mlp_layers", ".", "append", "(", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "dropout_rate", ")", ")", "\n", "mlp_layers", ".", "append", "(", "nn", ".", "Linear", "(", "\n", "input_dim", ",", "output_dim", ",", "bias", "=", "True", ")", ")", "\n", "mlp_layers", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "mlp_layers", ".", "append", "(", "nn", ".", "Dropout", "(", "p", "=", "self", ".", "dropout_rate", ")", ")", "\n", "mlp_layers", ".", "append", "(", "nn", ".", "Linear", "(", "\n", "output_dim", ",", "output_dim", ",", "bias", "=", "True", ")", ")", "\n", "mlp_layers", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "return", "nn", ".", "Sequential", "(", "*", "mlp_layers", ")", "# * used to unpack list", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.decomposable_attention_classifier.DecomposableAttentionClassifier.embed_seq": [[63, 70], ["decomposable_attention_classifier.DecomposableAttentionClassifier.word_embeds", "decomposable_attention_classifier.DecomposableAttentionClassifier.size", "decomposable_attention_classifier.DecomposableAttentionClassifier.input_linear().view", "vec.transpose().contiguous", "decomposable_attention_classifier.DecomposableAttentionClassifier.input_linear", "vec.transpose"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "embed_seq", "(", "self", ",", "vec", ")", ":", "\n", "        ", "vec1", "=", "self", ".", "word_embeds", "(", "vec", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ")", "\n", "#if self.fix_embeddings: #TODO test", "\n", "#  vec1 = F.normalize(vec1, p=2, dim=1)", "\n", "batch_size", "=", "vec1", ".", "size", "(", "0", ")", "\n", "proj_vec", "=", "self", ".", "input_linear", "(", "vec1", ")", ".", "view", "(", "batch_size", ",", "-", "1", ",", "self", ".", "hidden_dim", ")", "\n", "return", "proj_vec", "# dim [batch_size, length, hidden_dim]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.decomposable_attention_classifier.DecomposableAttentionClassifier.forward": [[78, 167], ["context.view.view.view", "ends.view", "decomposable_attention_classifier.DecomposableAttentionClassifier.embed_seq", "decomposable_attention_classifier.DecomposableAttentionClassifier.embed_seq", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "decomposable_attention_classifier.DecomposableAttentionClassifier.mlp_g().view", "decomposable_attention_classifier.DecomposableAttentionClassifier.mlp_g().view", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "torch.sum().squeeze", "decomposable_attention_classifier.DecomposableAttentionClassifier.mlp_h", "decomposable_attention_classifier.DecomposableAttentionClassifier.final_linear().view", "context.view.view.size", "context.view.view.size", "ends.size", "ends.view.size", "decomposable_attention_classifier.DecomposableAttentionClassifier.mlp_f().view", "decomposable_attention_classifier.DecomposableAttentionClassifier.mlp_f().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.bmm.view", "torch.bmm.view", "torch.bmm.view", "torch.bmm.view", "torch.softmax().view", "torch.softmax().view", "torch.softmax().view", "torch.softmax().view", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "score2.contiguous.contiguous.contiguous", "score2.contiguous.contiguous.view", "torch.softmax().view", "torch.softmax().view", "torch.softmax().view", "torch.softmax().view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "torch.mm().view", "decomposable_attention_classifier.DecomposableAttentionClassifier.mlp_f().view", "decomposable_attention_classifier.DecomposableAttentionClassifier.mlp_f().view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm.view", "torch.bmm.view", "torch.bmm.view", "torch.bmm.view", "torch.softmax().view", "torch.softmax().view", "torch.softmax().view", "torch.softmax().view", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "score2.contiguous.contiguous.contiguous", "score2.contiguous.contiguous.view", "torch.softmax().view", "torch.softmax().view", "torch.softmax().view", "torch.softmax().view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "sent1_embed.expand.expand.expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "sent2_embed.expand().contiguous.expand().contiguous.expand().contiguous", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.bmm.contiguous", "torch.bmm.contiguous", "torch.bmm.contiguous", "torch.bmm.contiguous", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "decomposable_attention_classifier.DecomposableAttentionClassifier.mlp_g", "decomposable_attention_classifier.DecomposableAttentionClassifier.mlp_g", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "decomposable_attention_classifier.DecomposableAttentionClassifier.final_linear", "decomposable_attention_classifier.DecomposableAttentionClassifier.mlp_f", "decomposable_attention_classifier.DecomposableAttentionClassifier.mlp_f", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "decomposable_attention_classifier.DecomposableAttentionClassifier.mlp_f", "decomposable_attention_classifier.DecomposableAttentionClassifier.mlp_f", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "sent1_embed.expand.expand.view", "sent2_embed.expand().contiguous.expand().contiguous.view", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.bmm.contiguous", "torch.bmm.contiguous", "torch.bmm.contiguous", "torch.bmm.contiguous", "torch.softmax().view.view", "sent1_embed.expand.expand.view", "sent2_embed.expand().contiguous.expand().contiguous.expand", "sent1_embed.expand.expand.view", "sent2_embed.expand().contiguous.expand().contiguous.view", "score2.contiguous.view.dim", "score2.contiguous.view.dim", "score2.contiguous.view.dim", "score2.contiguous.view.dim"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.pool_ending_classifier.PoolEndingClassifier.embed_seq", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.pool_ending_classifier.PoolEndingClassifier.embed_seq", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax"], ["", "def", "forward", "(", "self", ",", "context", ",", "endings", ",", "itos", "=", "None", ")", ":", "\n", "        ", "ends", "=", "endings", "[", "0", "]", "\n", "ends_ls", "=", "endings", "[", "1", "]", "\n", "seq_len1", "=", "context", ".", "size", "(", ")", "[", "0", "]", "\n", "context", "=", "context", ".", "view", "(", "seq_len1", ",", "-", "1", ")", "\n", "batch_size", "=", "context", ".", "size", "(", ")", "[", "1", "]", "\n", "\n", "seq_len2", "=", "ends", ".", "size", "(", ")", "[", "0", "]", "\n", "end", "=", "ends", ".", "view", "(", "seq_len2", ",", "-", "1", ")", "\n", "end_batch_size", "=", "end", ".", "size", "(", ")", "[", "1", "]", "\n", "decode_mode", "=", "(", "batch_size", "==", "1", "and", "end_batch_size", ">", "1", ")", "\n", "multi_decode_mode", "=", "(", "batch_size", ">", "1", "and", "end_batch_size", "==", "1", ")", "\n", "assert", "decode_mode", "or", "multi_decode_mode", "or", "batch_size", "==", "end_batch_size", "\n", "\n", "# Embed", "\n", "sent1_embed", "=", "self", ".", "embed_seq", "(", "context", ")", "# 1 x len1 x hidden", "\n", "sent2_embed", "=", "self", ".", "embed_seq", "(", "end", ")", "# batch x len2 x hidden", "\n", "\n", "# Attend ", "\n", "if", "decode_mode", ":", "\n", "            ", "f1", "=", "self", ".", "mlp_f", "(", "sent1_embed", ".", "view", "(", "-", "1", ",", "self", ".", "hidden_dim", ")", ")", ".", "view", "(", "-", "1", ",", "\n", "self", ".", "hidden_dim", ")", "# length x hidden_dim", "\n", "f2", "=", "self", ".", "mlp_f", "(", "sent2_embed", ".", "view", "(", "-", "1", ",", "self", ".", "hidden_dim", ")", ")", ".", "view", "(", "-", "1", ",", "\n", "self", ".", "hidden_dim", ")", "# (batch_size x len2) x hidden_size", "\n", "\n", "score1", "=", "torch", ".", "mm", "(", "f1", ",", "torch", ".", "transpose", "(", "f2", ",", "0", ",", "1", ")", ")", ".", "view", "(", "seq_len1", ",", "-", "1", ",", "seq_len2", ")", "\n", "# e_{ij} len1 x (batch_size x len2)", "\n", "\n", "score1", "=", "torch", ".", "transpose", "(", "score1", ".", "contiguous", "(", ")", ",", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "temp", "=", "score1", ".", "view", "(", "-", "1", ",", "seq_len2", ")", "\n", "prob1", "=", "F", ".", "softmax", "(", "temp", ",", "dim", "=", "temp", ".", "dim", "(", ")", "-", "1", ")", ".", "view", "(", "-", "1", ",", "seq_len1", ",", "seq_len2", ")", "# v0.2", "\n", "\n", "score2", "=", "torch", ".", "transpose", "(", "score1", ",", "1", ",", "2", ")", "# batch x len2 x len1", "\n", "score2", "=", "score2", ".", "contiguous", "(", ")", "\n", "temp", "=", "score2", ".", "view", "(", "-", "1", ",", "seq_len1", ")", "\n", "prob2", "=", "F", ".", "softmax", "(", "temp", ",", "dim", "=", "temp", ".", "dim", "(", ")", "-", "1", ")", ".", "view", "(", "-", "1", ",", "seq_len2", ",", "seq_len1", ")", "\n", "\n", "sent1_attended", "=", "torch", ".", "bmm", "(", "prob1", ",", "sent2_embed", ")", "\n", "sent2_attended", "=", "torch", ".", "mm", "(", "\n", "prob2", ".", "view", "(", "-", "1", ",", "seq_len1", ")", ",", "\n", "sent1_embed", ".", "view", "(", "seq_len1", ",", "-", "1", ")", ")", ".", "view", "(", "\n", "-", "1", ",", "seq_len2", ",", "self", ".", "hidden_dim", ")", "\n", "\n", "", "else", ":", "\n", "            ", "if", "multi_decode_mode", ":", "\n", "                ", "sent2_embed", "=", "sent2_embed", ".", "expand", "(", "batch_size", ",", "seq_len2", ",", "\n", "self", ".", "hidden_dim", ")", ".", "contiguous", "(", ")", "\n", "\n", "", "f1", "=", "self", ".", "mlp_f", "(", "sent1_embed", ".", "view", "(", "-", "1", ",", "self", ".", "hidden_dim", ")", ")", ".", "view", "(", "-", "1", ",", "\n", "seq_len1", ",", "self", ".", "hidden_dim", ")", "\n", "f2", "=", "self", ".", "mlp_f", "(", "sent2_embed", ".", "view", "(", "-", "1", ",", "self", ".", "hidden_dim", ")", ")", ".", "view", "(", "-", "1", ",", "\n", "seq_len2", ",", "self", ".", "hidden_dim", ")", "# batch_size x len2 x hidden_size", "\n", "\n", "score1", "=", "torch", ".", "bmm", "(", "f1", ",", "torch", ".", "transpose", "(", "f2", ",", "1", ",", "2", ")", ")", "\n", "# e_{ij} batch_size x len1 x len2", "\n", "\n", "temp", "=", "score1", ".", "view", "(", "-", "1", ",", "seq_len2", ")", "\n", "prob1", "=", "F", ".", "softmax", "(", "temp", ",", "dim", "=", "temp", ".", "dim", "(", ")", "-", "1", ")", ".", "view", "(", "-", "1", ",", "seq_len1", ",", "seq_len2", ")", "# v0.2", "\n", "\n", "score2", "=", "torch", ".", "transpose", "(", "score1", ".", "contiguous", "(", ")", ",", "1", ",", "2", ")", "\n", "score2", "=", "score2", ".", "contiguous", "(", ")", "# e_{ji} batch_size x len2 x len1", "\n", "temp", "=", "score2", ".", "view", "(", "-", "1", ",", "seq_len1", ")", "\n", "prob2", "=", "F", ".", "softmax", "(", "temp", ",", "temp", ".", "dim", "(", ")", "-", "1", ")", ".", "view", "(", "-", "1", ",", "seq_len2", ",", "seq_len1", ")", "\n", "\n", "sent1_attended", "=", "torch", ".", "bmm", "(", "prob1", ",", "sent2_embed", ")", "\n", "sent2_attended", "=", "torch", ".", "bmm", "(", "prob2", ",", "sent1_embed", ")", "\n", "\n", "# Compare", "\n", "", "if", "decode_mode", ":", "\n", "          ", "sent1_embed", "=", "sent1_embed", ".", "expand", "(", "end_batch_size", ",", "seq_len1", ",", "\n", "self", ".", "hidden_dim", ")", "\n", "\n", "", "sent1_combine", "=", "torch", ".", "cat", "(", "(", "sent1_embed", ",", "sent1_attended", ")", ",", "2", ")", ".", "view", "(", "-", "1", ",", "\n", "2", "*", "self", ".", "hidden_dim", ")", "\n", "sent2_combine", "=", "torch", ".", "cat", "(", "(", "sent2_embed", ",", "sent2_attended", ")", ",", "2", ")", ".", "view", "(", "-", "1", ",", "\n", "2", "*", "self", ".", "hidden_dim", ")", "\n", "\n", "g1", "=", "self", ".", "mlp_g", "(", "sent1_combine", ")", ".", "view", "(", "-", "1", ",", "seq_len1", ",", "self", ".", "hidden_dim", ")", "\n", "g2", "=", "self", ".", "mlp_g", "(", "sent2_combine", ")", ".", "view", "(", "-", "1", ",", "seq_len2", ",", "self", ".", "hidden_dim", ")", "\n", "\n", "# Aggregate", "\n", "sent1_output", "=", "torch", ".", "sum", "(", "g1", ",", "1", ")", ".", "squeeze", "(", "1", ")", "\n", "sent2_output", "=", "torch", ".", "sum", "(", "g2", ",", "1", ")", ".", "squeeze", "(", "1", ")", "# batch_size x hidden_size", "\n", "\n", "hidden", "=", "self", ".", "mlp_h", "(", "torch", ".", "cat", "(", "(", "sent1_output", ",", "sent2_output", ")", ",", "1", ")", ")", "# batch_size * hidden_size", "\n", "\n", "# Predict", "\n", "final", "=", "self", ".", "final_linear", "(", "hidden", ")", ".", "view", "(", "-", "1", ",", "self", ".", "label_size", ")", "\n", "return", "final", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.train_classifier.CustomIterableDataset.__init__": [[40, 49], ["train_classifier.CustomIterableDataset.preprocess"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.train_classifier.CustomIterableDataset.preprocess"], ["    ", "def", "__init__", "(", "self", ",", "filename", ",", "encoder", ",", "max_tokens", "=", "1024", ",", "saved_data", "=", "None", ")", ":", "\n", "        ", "self", ".", "filename", "=", "filename", "\n", "self", ".", "fields", "=", "[", "\"context\"", ",", "\"generated\"", ",", "\"gold\"", ",", "\"label\"", "]", "\n", "self", ".", "encoder", "=", "encoder", "\n", "self", ".", "max_tokens", "=", "max_tokens", "\n", "if", "not", "saved_data", ":", "\n", "            ", "self", ".", "data", "=", "self", ".", "preprocess", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "data", "=", "saved_data", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.train_classifier.CustomIterableDataset.__iter__": [[50, 52], ["iter"], "methods", ["None"], ["", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.train_classifier.CustomIterableDataset.__len__": [[53, 55], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.train_classifier.CustomIterableDataset.preprocess": [[56, 66], ["open", "csv.DictReader", "float", "data.append", "train_classifier.CustomIterableDataset.encoder.encode"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.encode"], ["", "def", "preprocess", "(", "self", ")", ":", "\n", "        ", "data", "=", "[", "]", "\n", "fin", "=", "open", "(", "self", ".", "filename", ",", "newline", "=", "''", ")", "\n", "file_itr", "=", "csv", ".", "DictReader", "(", "fin", ",", "delimiter", "=", "'\\t'", ",", "fieldnames", "=", "self", ".", "fields", ")", "\n", "for", "line", "in", "file_itr", ":", "\n", "            ", "for", "field", "in", "self", ".", "fields", "[", ":", "-", "1", "]", ":", "\n", "                ", "line", "[", "field", "]", "=", "self", ".", "encoder", ".", "encode", "(", "line", "[", "field", "]", ")", "[", ":", "self", ".", "max_tokens", "]", "\n", "", "line", "[", "self", ".", "fields", "[", "-", "1", "]", "]", "=", "float", "(", "line", "[", "self", ".", "fields", "[", "-", "1", "]", "]", ")", "\n", "data", ".", "append", "(", "line", ")", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.train_classifier.my_collate": [[76, 121], ["type", "isinstance", "TypeError", "fairseq.data.data_utils.collate_tokens", "default_collate_err_msg_format.format", "torch.utils.data.get_worker_info", "torch.utils.data.get_worker_info", "torch.utils.data.get_worker_info", "torch.utils.data.get_worker_info", "sum", "elem.storage()._new_shared", "elem.new", "isinstance", "train_classifier.my_collate", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "isinstance", "x.numel", "elem.storage", "np_str_obj_array_pattern.search", "TypeError", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "isinstance", "default_collate_err_msg_format.format", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "torch.as_tensor", "isinstance", "train_classifier.my_collate", "isinstance", "hasattr", "type.", "isinstance", "zip", "train_classifier.my_collate", "train_classifier.my_collate", "zip"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.collate_tokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.train_classifier.my_collate", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.train_classifier.my_collate", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.train_classifier.my_collate", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.train_classifier.my_collate"], ["def", "my_collate", "(", "batch", ")", ":", "\n", "    ", "r\"\"\"Puts each data field into a tensor with outer dimension batch size\"\"\"", "\n", "\n", "elem", "=", "batch", "[", "0", "]", "\n", "elem_type", "=", "type", "(", "elem", ")", "\n", "if", "isinstance", "(", "elem", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "out", "=", "None", "\n", "if", "torch", ".", "utils", ".", "data", ".", "get_worker_info", "(", ")", "is", "not", "None", ":", "\n", "# If we're in a background process, concatenate directly into a", "\n", "# shared memory tensor to avoid an extra copy", "\n", "            ", "numel", "=", "sum", "(", "[", "x", ".", "numel", "(", ")", "for", "x", "in", "batch", "]", ")", "\n", "storage", "=", "elem", ".", "storage", "(", ")", ".", "_new_shared", "(", "numel", ")", "\n", "out", "=", "elem", ".", "new", "(", "storage", ")", "\n", "#print(batch)", "\n", "#max_len = max(lambda x: x.size()[0], batch)", "\n", "#batch = pad_lengths(batch)", "\n", "", "return", "collate_tokens", "(", "batch", ",", "pad_idx", "=", "1", ")", "\n", "#return pad_sequence(batch, padding_value=1)", "\n", "#return torch.stack(batch, 0, out=out)", "\n", "", "elif", "elem_type", ".", "__module__", "==", "'numpy'", "and", "elem_type", ".", "__name__", "!=", "'str_'", "and", "elem_type", ".", "__name__", "!=", "'string_'", ":", "\n", "        ", "elem", "=", "batch", "[", "0", "]", "\n", "if", "elem_type", ".", "__name__", "==", "'ndarray'", ":", "\n", "# array of string classes and object", "\n", "            ", "if", "np_str_obj_array_pattern", ".", "search", "(", "elem", ".", "dtype", ".", "str", ")", "is", "not", "None", ":", "\n", "                ", "raise", "TypeError", "(", "default_collate_err_msg_format", ".", "format", "(", "elem", ".", "dtype", ")", ")", "\n", "\n", "", "return", "my_collate", "(", "[", "torch", ".", "as_tensor", "(", "b", ")", "for", "b", "in", "batch", "]", ")", "\n", "", "elif", "elem", ".", "shape", "==", "(", ")", ":", "# scalars", "\n", "            ", "return", "torch", ".", "as_tensor", "(", "batch", ")", "\n", "", "", "elif", "isinstance", "(", "elem", ",", "float", ")", ":", "\n", "        ", "return", "torch", ".", "tensor", "(", "batch", ",", "dtype", "=", "torch", ".", "half", ")", "\n", "", "elif", "isinstance", "(", "elem", ",", "int_classes", ")", ":", "\n", "        ", "return", "torch", ".", "tensor", "(", "batch", ")", "\n", "", "elif", "isinstance", "(", "elem", ",", "string_classes", ")", ":", "\n", "        ", "return", "batch", "\n", "", "elif", "isinstance", "(", "elem", ",", "container_abcs", ".", "Mapping", ")", ":", "\n", "        ", "return", "{", "key", ":", "my_collate", "(", "[", "d", "[", "key", "]", "for", "d", "in", "batch", "]", ")", "for", "key", "in", "elem", "}", "\n", "", "elif", "isinstance", "(", "elem", ",", "tuple", ")", "and", "hasattr", "(", "elem", ",", "'_fields'", ")", ":", "# namedtuple", "\n", "        ", "return", "elem_type", "(", "*", "(", "my_collate", "(", "samples", ")", "for", "samples", "in", "zip", "(", "*", "batch", ")", ")", ")", "\n", "", "elif", "isinstance", "(", "elem", ",", "container_abcs", ".", "Sequence", ")", ":", "\n", "        ", "transposed", "=", "zip", "(", "*", "batch", ")", "\n", "return", "[", "my_collate", "(", "samples", ")", "for", "samples", "in", "transposed", "]", "\n", "\n", "", "raise", "TypeError", "(", "default_collate_err_msg_format", ".", "format", "(", "elem_type", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.train_classifier.validation_loss": [[123, 162], ["model.eval", "enumerate", "print", "print", "model", "model", "dec.data.cpu().numpy", "numpy.round", "numpy.sum", "numpy.sum", "batch[].size", "batch[].transpose", "batch[].transpose", "batch[].transpose", "batch[].transpose", "scipy.special.expit", "numpy.equal", "dec.data.cpu", "numpy.ones", "type", "tuple", "t.cuda", "item.cuda"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "validation_loss", "(", "model", ",", "valid_iter", ",", "ranking_loss", ",", "margin_ranking_loss", ",", "cuda", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "#valid_iter.init_epoch()", "\n", "v_correct", ",", "v_total", "=", "0", ",", "0", "\n", "ones", "=", "0", "\n", "for", "k", ",", "batch", "in", "enumerate", "(", "valid_iter", ")", ":", "\n", "        ", "if", "cuda", ":", "\n", "#print(context, generated, gold)", "\n", "            ", "for", "key", "in", "batch", ":", "\n", "                ", "t", "=", "batch", "[", "key", "]", "\n", "if", "type", "(", "t", ")", "==", "tuple", ":", "\n", "                    ", "batch", "[", "key", "]", "=", "tuple", "(", "[", "item", ".", "cuda", "(", ")", "for", "item", "in", "t", "]", ")", "\n", "", "else", ":", "\n", "                    ", "batch", "[", "key", "]", "=", "t", ".", "cuda", "(", ")", "\n", "\n", "#if k % 100 == 0:", "\n", "#    print(k)", "\n", "", "", "", "b_size", "=", "batch", "[", "\"context\"", "]", ".", "size", "(", ")", "[", "0", "]", "\n", "\n", "decision_negative", "=", "model", "(", "batch", "[", "\"context\"", "]", ".", "transpose", "(", "0", ",", "1", ")", ",", "\n", "batch", "[", "\"generated\"", "]", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "decision_positive", "=", "model", "(", "batch", "[", "\"context\"", "]", ".", "transpose", "(", "0", ",", "1", ")", ",", "\n", "batch", "[", "\"gold\"", "]", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "\n", "if", "ranking_loss", "or", "margin_ranking_loss", ":", "\n", "            ", "dec", "=", "decision_positive", "-", "decision_negative", "\n", "", "else", ":", "\n", "# Evaluate predictions on gold", "\n", "            ", "dec", "=", "decision_positive", "\n", "\n", "", "decis", "=", "dec", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "predicts", "=", "np", ".", "round", "(", "expit", "(", "decis", ")", ")", "\n", "v_correct", "+=", "np", ".", "sum", "(", "np", ".", "equal", "(", "predicts", ",", "np", ".", "ones", "(", "b_size", ")", ")", ")", "\n", "v_total", "+=", "b_size", "\n", "ones", "+=", "np", ".", "sum", "(", "predicts", ")", "\n", "", "valid_acc", "=", "v_correct", "/", "v_total", "\n", "print", "(", "'Valid: %f'", "%", "valid_acc", ")", "\n", "print", "(", "'%d ones %d zeros'", "%", "(", "ones", ",", "v_total", "-", "ones", ")", ")", "\n", "return", "valid_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.make_cc_version_pnw_data.no_rep_shuffle": [[35, 48], ["list", "next", "len", "zip", "random.shuffle", "zip", "zip", "range", "len"], "function", ["None"], ["        ", "return", "l", "\n", "", "l", "=", "list", "(", "zip", "(", "l", ",", "range", "(", "len", "(", "l", ")", ")", ")", ")", "\n", "nu_l", "=", "l", "[", ":", "]", "\n", "while", "True", ":", "\n", "        ", "random", ".", "shuffle", "(", "nu_l", ")", "\n", "for", "x", ",", "y", "in", "zip", "(", "l", ",", "nu_l", ")", ":", "\n", "            ", "if", "x", "==", "y", ":", "\n", "                ", "break", "\n", "", "", "else", ":", "\n", "            ", "break", "\n", "", "", "return", "next", "(", "zip", "(", "*", "nu_l", ")", ")", "\n", "\n", "\n", "", "def", "make_shuffled_keywords", "(", "str_list", ",", "remove_char", "=", "\"<EOL>\"", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.make_cc_version_pnw_data.make_shuffled_keywords": [[50, 57], ["re.compile", "re.compile.sub", "make_cc_version_pnw_data.no_rep_shuffle", "make_cc_version_pnw_data.no_rep_shuffle", "shuffle_str.strip", "phrases.strip().split", "phrases.strip"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.preprocessing.make_cc_version_pnw_data.no_rep_shuffle", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.preprocessing.make_cc_version_pnw_data.no_rep_shuffle"], ["remove", "=", "re", ".", "compile", "(", "\"<EOL>\"", ")", "\n", "clean_str", "=", "[", "remove", ".", "sub", "(", "\"\"", ",", "text", ")", "for", "text", "in", "str_list", "]", "\n", "internally_shuffled", "=", "[", "\" \"", ".", "join", "(", "no_rep_shuffle", "(", "phrases", ".", "strip", "(", ")", ".", "split", "(", ")", ")", ")", "for", "phrases", "in", "clean_str", "]", "\n", "shuffle_str", "=", "(", "' %s '", "%", "args", ".", "sent_sym", ")", ".", "join", "(", "no_rep_shuffle", "(", "internally_shuffled", ")", ")", "\n", "return", "shuffle_str", ".", "strip", "(", ")", "+", "\" \"", "+", "remove_char", "\n", "\n", "", "filenames", "=", "[", "'disc_train.txt'", ",", "'valid.txt'", ",", "'test.txt'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.setup.NumpyExtension.__init__": [[29, 32], ["setuptools.Extension.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "__include_dirs", "=", "[", "]", "\n", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.setup.NumpyExtension.include_dirs": [[38, 41], ["None"], "methods", ["None"], ["", "@", "include_dirs", ".", "setter", "\n", "def", "include_dirs", "(", "self", ",", "dirs", ")", ":", "\n", "        ", "self", ".", "__include_dirs", "=", "dirs", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.create_classifier_dataset.read_txt": [[20, 22], ["open().read().split", "open().read", "open"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.dataset_reader.DatasetReader.read", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open"], ["if", "args", ".", "comp", "==", "'lm'", ":", "\n", "        ", "comp_end", "=", "read_txt", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "filename", ")", "+", "'.generated_continuation'", ")", "\n", "", "elif", "args", ".", "comp", "==", "'random'", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.create_classifier_dataset.get_verbs": [[26, 32], ["re.split", "re.split.index"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.index"], ["", "else", ":", "\n", "        ", "assert", "(", "False", ")", "\n", "", "true_end", "=", "read_txt", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "filename", ")", "+", "'.true_continuation'", ")", "\n", "\n", "tsv_lines", "=", "[", "]", "\n", "randomize", "=", "False", "\n", "incomplete_lines", "=", "0", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.create_classifier_dataset.replace_verbs": [[33, 39], ["re.split"], "function", ["None"], ["\n", "for", "cont", ",", "comp", ",", "true", "in", "zip", "(", "context", ",", "comp_end", ",", "true_end", ")", ":", "\n", "        ", "tsv_line", "=", "cont", ".", "strip", "(", ")", "+", "'\\t'", "\n", "if", "randomize", ":", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "tsv_line", "+=", "comp", ".", "strip", "(", ")", "+", "'\\t'", "+", "true", ".", "strip", "(", ")", "+", "'\\t'", "+", "'1'", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.create_classifier_dataset.event_intra_shuffle": [[41, 96], ["print", "print", "print", "print", "line.split", "shuffled_end.append", "len", "len", "len", "sent.split", "new_sents.append", "sent_delimiter.join", "len", "new_sents.append", "list", "list", "random.shuffle", "create_classifier_dataset.replace_verbs", "random.shuffle", "map", "range", "list", "range", "len", "enumerate", "map", "create_classifier_dataset.get_verbs", "len", "event_delimiter.join"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.preprocessing.create_classifier_dataset.replace_verbs", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.preprocessing.create_classifier_dataset.get_verbs"], ["", "", "else", ":", "\n", "            ", "tsv_line", "+=", "comp", ".", "strip", "(", ")", "+", "'\\t'", "+", "true", ".", "strip", "(", ")", "+", "'\\t'", "+", "'1'", "\n", "if", "not", "bool", "(", "comp", ".", "strip", "(", ")", ")", "or", "not", "(", "bool", "(", "cont", ".", "strip", "(", ")", ")", ")", ":", "\n", "                ", "incomplete_lines", "+=", "1", "\n", "continue", "\n", "", "", "tsv_lines", ".", "append", "(", "tsv_line", ")", "\n", "\n", "", "train_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "out_dir", ",", "filename", "[", ":", "-", "4", "]", "+", "'.tsv'", ")", "\n", "with", "open", "(", "train_file", ",", "'w'", ")", "as", "out", ":", "\n", "        ", "out", ".", "write", "(", "'\\n'", ".", "join", "(", "tsv_lines", ")", ")", "\n", "\n", "# validate that all lines have exactly 2 tabs", "\n", "", "invalid_lines", "=", "[", "]", "\n", "with", "open", "(", "train_file", ",", "'r'", ")", "as", "fin", ":", "\n", "        ", "for", "i", ",", "line", "in", "enumerate", "(", "fin", ")", ":", "\n", "            ", "num_examples_in_line", "=", "len", "(", "line", ".", "split", "(", "\"\\t\"", ")", ")", "\n", "if", "num_examples_in_line", "!=", "4", ":", "\n", "                ", "invalid_lines", ".", "append", "(", "(", "i", ",", "num_examples_in_line", ")", ")", "\n", "\n", "", "", "", "print", "(", "\"Lines removed due to one or more continuations being empty: {}\"", ".", "format", "(", "incomplete_lines", ")", ",", "\n", "file", "=", "sys", ".", "stderr", ")", "\n", "print", "(", "\"{} lines in file have too many or too few tabs\\n\"", "\n", "\"Lines: {}\\n Num items afer tab split: {}\"", ".", "format", "(", "len", "(", "invalid_lines", ")", ",", "\n", "[", "item", "[", "0", "]", "for", "item", "in", "invalid_lines", "]", ",", "\n", "[", "item", "[", "1", "]", "for", "item", "in", "invalid_lines", "]", ")", ",", "\n", "file", "=", "sys", ".", "stderr", ")", "\n", "\n", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.create_classifier_dataset.event_inter_shuffle": [[98, 112], ["print", "line.split", "random.sample", "shuffled_end.append", "len", "len", "len", "sent_delimiter.join", "len"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.hub_interface.BARTHubInterface.sample"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.cnn_context_classifier.CNNContextClassifier.__init__": [[10, 37], ["torch.Module.__init__", "copy.deepcopy", "copy.deepcopy", "copy.deepcopy", "torch.Conv1d().half", "torch.Conv1d().half", "torch.Conv1d().half", "torch.Conv1d().half", "torch.Conv1d().half", "torch.Conv1d().half", "torch.Conv1d().half", "torch.Conv1d().half", "torch.Linear().half", "torch.Linear().half", "torch.Linear().half", "torch.Linear().half", "torch.Dropout().half", "torch.Dropout().half", "torch.Dropout().half", "torch.Dropout().half", "next", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Dropout", "bart.parameters", "int", "int"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lightconv_layer.lightconv_layer.LightconvLayer.half", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lightconv_layer.lightconv_layer.LightconvLayer.half", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lightconv_layer.lightconv_layer.LightconvLayer.half", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lightconv_layer.lightconv_layer.LightconvLayer.half", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lightconv_layer.lightconv_layer.LightconvLayer.half", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lightconv_layer.lightconv_layer.LightconvLayer.half", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lightconv_layer.lightconv_layer.LightconvLayer.half", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lightconv_layer.lightconv_layer.LightconvLayer.half", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lightconv_layer.lightconv_layer.LightconvLayer.half", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lightconv_layer.lightconv_layer.LightconvLayer.half", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lightconv_layer.lightconv_layer.LightconvLayer.half", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lightconv_layer.lightconv_layer.LightconvLayer.half", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lightconv_layer.lightconv_layer.LightconvLayer.half", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lightconv_layer.lightconv_layer.LightconvLayer.half", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lightconv_layer.lightconv_layer.LightconvLayer.half", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lightconv_layer.lightconv_layer.LightconvLayer.half", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear"], ["    ", "def", "__init__", "(", "self", ",", "hidden_dim", ",", "\n", "filter_size", ",", "dropout_rate", ",", "bart", "=", "None", ",", "fix_embeddings", "=", "False", ")", ":", "\n", "        ", "super", "(", "CNNContextClassifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "vocab_size", "=", "copy", ".", "deepcopy", "(", "bart", ".", "model", ".", "encoder", ".", "embed_tokens", ".", "num_embeddings", ")", "\n", "self", ".", "embedding_dim", "=", "copy", ".", "deepcopy", "(", "bart", ".", "model", ".", "encoder", ".", "embed_tokens", ".", "embedding_dim", ")", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "\n", "self", ".", "word_embeds", "=", "bart", ".", "extract_features", "\n", "#vocab_size = 50264", "\n", "#self.word_embeds = nn.Embedding(self.vocab_size, self.embedding_dim).half()", "\n", "self", ".", "use_cuda", "=", "copy", ".", "deepcopy", "(", "next", "(", "bart", ".", "parameters", "(", ")", ")", ".", "is_cuda", ")", "\n", "# if embed_mat is not None:", "\n", "#     self.word_embeds.weight.data = embed_mat", "\n", "#     if fix_embeddings:", "\n", "#         self.word_embeds.weight.requires_grad=False", "\n", "\n", "self", ".", "context_conv", "=", "nn", ".", "Conv1d", "(", "self", ".", "embedding_dim", ",", "self", ".", "embedding_dim", ",", "\n", "filter_size", ",", "stride", "=", "1", ",", "padding", "=", "int", "(", "(", "filter_size", "-", "1", ")", "/", "2", ")", ",", "\n", "groups", "=", "self", ".", "embedding_dim", ")", ".", "half", "(", ")", "# else groups=1", "\n", "\n", "self", ".", "ending_conv", "=", "nn", ".", "Conv1d", "(", "self", ".", "embedding_dim", ",", "self", ".", "embedding_dim", ",", "\n", "filter_size", ",", "stride", "=", "1", ",", "padding", "=", "int", "(", "(", "filter_size", "-", "1", ")", "/", "2", ")", ",", "\n", "groups", "=", "self", ".", "embedding_dim", ")", ".", "half", "(", ")", "# else groups=1", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "self", ".", "embedding_dim", ",", "1", ")", ".", "half", "(", ")", "\n", "self", ".", "drop", "=", "nn", ".", "Dropout", "(", "dropout_rate", ")", ".", "half", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.cnn_context_classifier.CNNContextClassifier.embed_seq": [[40, 46], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "cnn_context_classifier.CNNContextClassifier.word_embeds", "cnn_context_classifier.CNNContextClassifier.transpose().contiguous", "vec.transpose", "cnn_context_classifier.CNNContextClassifier.transpose"], "methods", ["None"], ["", "def", "embed_seq", "(", "self", ",", "vec", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "all_embeddings", "=", "self", ".", "word_embeds", "(", "vec", ".", "transpose", "(", "0", ",", "1", ")", ")", "# results in batch x seq_len x embedsize", "\n", "\n", "vec_tr", "=", "all_embeddings", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "return", "vec_tr", "# dim [batch_size, embed_dim, length]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.cnn_context_classifier.CNNContextClassifier.forward": [[53, 94], ["context.size", "ends.view", "torch.MaxPool1d", "torch.MaxPool1d", "torch.MaxPool1d", "torch.MaxPool1d", "cnn_context_classifier.CNNContextClassifier.embed_seq", "cnn_context_classifier.CNNContextClassifier.context_conv", "torch.MaxPool1d.view", "torch.MaxPool1d", "torch.MaxPool1d", "torch.MaxPool1d", "torch.MaxPool1d", "cnn_context_classifier.CNNContextClassifier.embed_seq", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.MaxPool1d.view", "cnn_context_classifier.CNNContextClassifier.drop", "cnn_context_classifier.CNNContextClassifier.fc().view", "type", "ends.size", "ends.view.size", "cnn_context_classifier.CNNContextClassifier.ending_conv", "context_pooled.expand().contiguous.expand().contiguous.expand().contiguous", "torch.MaxPool1d.", "torch.MaxPool1d.", "cnn_context_classifier.CNNContextClassifier.fc", "context_pooled.expand().contiguous.expand().contiguous.expand"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.pool_ending_classifier.PoolEndingClassifier.embed_seq", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.pool_ending_classifier.PoolEndingClassifier.embed_seq", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "", "def", "forward", "(", "self", ",", "context", ",", "endings", ",", "itos", "=", "None", ")", ":", "\n", "#pdb.set_trace()", "\n", "        ", "if", "type", "(", "endings", ")", "==", "tuple", ":", "# this is a because sometimes we need tuples for other classifiers, and share a dataloader", "\n", "            ", "ends", "=", "endings", "[", "0", "]", "\n", "ends_ls", "=", "endings", "[", "1", "]", "\n", "", "else", ":", "\n", "            ", "ends", "=", "endings", "\n", "\n", "", "cont_seq_len", ",", "batch_size", "=", "context", ".", "size", "(", ")", "\n", "\n", "end_seq_len", "=", "ends", ".", "size", "(", ")", "[", "0", "]", "\n", "end", "=", "ends", ".", "view", "(", "end_seq_len", ",", "-", "1", ")", "\n", "end_batch_size", "=", "end", ".", "size", "(", ")", "[", "1", "]", "\n", "decode_mode", "=", "(", "batch_size", "==", "1", "and", "end_batch_size", ">", "1", ")", "\n", "if", "not", "decode_mode", ":", "\n", "            ", "assert", "batch_size", "==", "end_batch_size", ",", "\"Batch Size {} and End Batch Size {} do not match\"", ".", "format", "(", "batch_size", ",", "end_batch_size", ")", "\n", "\n", "", "maxpool", "=", "nn", ".", "MaxPool1d", "(", "cont_seq_len", ")", "# define layer for context length", "\n", "#print(context.size(), end.size())", "\n", "#embedding = torch.rand(batch_size, self.embedding_dim, cont_seq_len).half().cuda()", "\n", "embedding", "=", "self", ".", "embed_seq", "(", "context", ")", "\n", "#end_embedding = self.embed_seq(end) # weird memory experiments", "\n", "#return torch.ones(batch_size, requires_grad=True).half().cuda()", "\n", "\n", "context_convol", "=", "self", ".", "context_conv", "(", "embedding", ")", "\n", "context_pooled", "=", "maxpool", "(", "context_convol", ")", ".", "view", "(", "batch_size", ",", "self", ".", "embedding_dim", ")", "\n", "\n", "maxpool_end", "=", "nn", ".", "MaxPool1d", "(", "end_seq_len", ")", "\n", "#end_embedding = torch.rand(end_batch_size, self.embedding_dim, end_seq_len).half().cuda()", "\n", "end_embedding", "=", "self", ".", "embed_seq", "(", "end", ")", "\n", "end_conv", "=", "F", ".", "relu", "(", "self", ".", "ending_conv", "(", "end_embedding", ")", ")", "\n", "end_pooled", "=", "maxpool_end", "(", "end_conv", ")", ".", "view", "(", "end_batch_size", ",", "self", ".", "embedding_dim", ")", "\n", "\n", "if", "decode_mode", ":", "\n", "            ", "context_pooled", "=", "context_pooled", ".", "expand", "(", "end_batch_size", ",", "self", ".", "embedding_dim", ")", ".", "contiguous", "(", ")", "\n", "", "pooled", "=", "context_pooled", "*", "end_pooled", "\n", "\n", "dropped", "=", "self", ".", "drop", "(", "pooled", ")", "\n", "final", "=", "self", ".", "fc", "(", "dropped", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "return", "final", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.context_scorer.ContextScorer.__init__": [[9, 19], ["context_scorer.ContextScorer.model.eval", "torch.nn.LogSigmoid", "torch.nn.LogSigmoid", "torch.nn.LogSigmoid", "torch.nn.LogSigmoid", "context_scorer.ContextScorer.model.cuda", "context_scorer.ContextScorer.model.cpu"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval"], ["def", "__init__", "(", "self", ",", "model", ",", "use_cuda", "=", "True", ")", ":", "\n", "#with open(model_path, 'rb') as f:", "\n", "        ", "self", ".", "model", "=", "model", "\n", "if", "use_cuda", ":", "\n", "            ", "self", ".", "model", ".", "cuda", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", ".", "cpu", "(", ")", "\n", "", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "normalize", "=", "torch", ".", "nn", ".", "LogSigmoid", "(", ")", "\n", "self", ".", "use_cuda", "=", "use_cuda", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.context_scorer.ContextScorer.int_to_tensor": [[21, 26], ["torch.Variable().cuda().view", "torch.Variable().cuda().view", "torch.Variable().view", "torch.Variable().view", "torch.Variable().cuda", "torch.Variable().cuda", "torch.Variable", "torch.Variable", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.Variable", "torch.Variable", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["None"], ["", "def", "int_to_tensor", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "if", "self", ".", "use_cuda", ":", "\n", "            ", "return", "autograd", ".", "Variable", "(", "torch", ".", "LongTensor", "(", "tokens", ")", ")", ".", "cuda", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "return", "autograd", ".", "Variable", "(", "torch", ".", "LongTensor", "(", "tokens", ")", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.context_scorer.ContextScorer.__call__": [[27, 43], ["context_scorer.ContextScorer.model.eval", "context_scorer.ContextScorer.int_to_tensor", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "context_scorer.ContextScorer.int_to_tensor", "context_scorer.ContextScorer.model", "score_tensor.view.view.data.cpu().numpy", "context_scorer.ContextScorer.int_to_tensor", "context_scorer.ContextScorer.normalize().view", "score_tensor.view.view.view", "len", "score_tensor.view.view.data.cpu", "context_scorer.ContextScorer.normalize", "score_tensor.view.view.view"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.context_scorer.ContextScorer.int_to_tensor", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.context_scorer.ContextScorer.int_to_tensor", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.context_scorer.ContextScorer.int_to_tensor"], ["", "", "def", "__call__", "(", "self", ",", "init_tokens", ",", "conts", ",", "normalize_scores", ")", ":", "\n", "        ", "self", ".", "model", ".", "eval", "(", ")", "\n", "init_ind", "=", "self", ".", "int_to_tensor", "(", "init_tokens", ")", "\n", "conts_ind", "=", "[", "self", ".", "int_to_tensor", "(", "cont", ")", "for", "cont", "in", "conts", "]", "\n", "conts_ts", "=", "torch", ".", "cat", "(", "conts_ind", ",", "1", ")", "\n", "cont_lens", "=", "self", ".", "int_to_tensor", "(", "[", "len", "(", "cont", ")", "for", "cont", "in", "conts", "]", ")", "\n", "\n", "score_tensor", "=", "self", ".", "model", "(", "init_ind", ",", "(", "conts_ts", ",", "cont_lens", ")", ")", "\n", "\n", "if", "normalize_scores", ":", "\n", "            ", "score_tensor", "=", "self", ".", "normalize", "(", "score_tensor", ".", "view", "(", "1", ",", "-", "1", ")", ")", ".", "view", "(", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "score_tensor", "=", "score_tensor", ".", "view", "(", "-", "1", ")", "\n", "\n", "", "score", "=", "score_tensor", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.postprocess.setup_argparse": [[13, 29], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "setup_argparse", "(", ")", ":", "\n", "    ", "p", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "p", ".", "add_argument", "(", "'-d'", ",", "dest", "=", "'input_dir'", ")", "\n", "p", ".", "add_argument", "(", "'-f'", ",", "dest", "=", "'files'", ",", "nargs", "=", "'+'", ")", "\n", "p", ".", "add_argument", "(", "'--detokenize'", ",", "action", "=", "'store_true'", ")", "\n", "p", ".", "add_argument", "(", "'--truncate'", ",", "action", "=", "'store_true'", ")", "\n", "p", ".", "add_argument", "(", "'--concat_titles'", ",", "action", "=", "'store_true'", ")", "\n", "p", ".", "add_argument", "(", "'--titles'", ",", "type", "=", "str", ",", "help", "=", "\"path to title file if concat titles\"", ")", "\n", "p", ".", "add_argument", "(", "'--remove_partial'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "\"if True removes partial sentences that were truncated in generation\"", ")", "\n", "p", ".", "add_argument", "(", "'--sent_sym'", ",", "default", "=", "'</s>'", ",", "type", "=", "str", ",", "help", "=", "'if removing partial sentences, '", "\n", "'delimiting symbol'", ")", "\n", "p", ".", "add_argument", "(", "'--shuffle'", ",", "action", "=", "'store_true'", ",", "help", "=", "'create a shuffled version for coherence eval'", ")", "\n", "p", ".", "add_argument", "(", "'--needs_sent_tokenize'", ",", "action", "=", "'store_true'", ",", "help", "=", "'for removing partial sentences or '", "\n", "'shuffling for stories without sentence symbols'", ")", "\n", "return", "p", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.postprocess.strip_chars": [[31, 35], ["special_chars.sub", "re.sub"], "function", ["None"], ["", "def", "strip_chars", "(", "line", ":", "str", ")", ":", "\n", "    ", "line", "=", "special_chars", ".", "sub", "(", "\"\"", ",", "line", ")", "\n", "cleanline", "=", "re", ".", "sub", "(", "\"\\s+\"", ",", "\" \"", ",", "line", ")", "\n", "return", "cleanline", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.postprocess.make_human_readable": [[37, 59], ["print", "mosestokenizer.MosesDetokenizer", "print", "len", "open", "open", "postprocess.strip_chars", "fout.write", "sent_sym.join.strip().split", "random.shuffle", "sent_sym.join", "mosestokenizer.MosesDetokenizer.", "detokenizer.strip().split", "sent_sym.join.strip().split", "sent_sym.join.rfind", "sent_sym.join.strip", "detokenizer.strip", "sent_sym.join.strip"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.postprocess.strip_chars", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write"], ["", "def", "make_human_readable", "(", "files", ":", "list", ",", "detokenize", ":", "bool", ",", "truncate", ":", "bool", "=", "False", ",", "\n", "remove_partial_sent", ":", "bool", "=", "True", ",", "sent_sym", ":", "str", "=", "\"</s>\"", ")", ":", "\n", "    ", "if", "detokenize", ":", "\n", "        ", "detokenizer", "=", "MosesDetokenizer", "(", "\"en\"", ")", "\n", "", "print", "(", "\"Postprocessing on {} files...\"", ".", "format", "(", "len", "(", "files", ")", ")", ")", "\n", "for", "file", "in", "files", ":", "\n", "        ", "print", "(", "\"Working on: {}\"", ".", "format", "(", "file", ")", ")", "\n", "outfile", "=", "file", "+", "\".human_readable\"", "if", "not", "shuffle", "else", "file", "+", "\".shuffle\"", "\n", "with", "open", "(", "file", ",", "\"r\"", ")", "as", "fin", ",", "open", "(", "outfile", ",", "\"w\"", ")", "as", "fout", ":", "\n", "            ", "for", "line", "in", "fin", ":", "\n", "                ", "if", "truncate", ":", "\n", "                    ", "line", "=", "\" \"", ".", "join", "(", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "[", ":", "250", "]", ")", "\n", "", "if", "remove_partial_sent", ":", "\n", "                    ", "line", "=", "line", "[", ":", "line", ".", "rfind", "(", "sent_sym", ")", "]", "\n", "", "if", "shuffle", ":", "\n", "                    ", "split_line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "sent_sym", ")", "\n", "random", ".", "shuffle", "(", "split_line", ")", "\n", "line", "=", "sent_sym", ".", "join", "(", "split_line", ")", "\n", "", "cleanline", "=", "strip_chars", "(", "line", ")", "\n", "if", "detokenize", ":", "\n", "                    ", "cleanline", "=", "detokenizer", "(", "cleanline", ".", "strip", "(", ")", ".", "split", "(", ")", ")", "\n", "", "fout", ".", "write", "(", "\"{}\\n\"", ".", "format", "(", "cleanline", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.postprocess.concat_title_plot": [[61, 68], ["open", "t_fin.readlines", "open", "open", "enumerate", "fout.write", "all_titles[].strip", "line.strip"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write"], ["", "", "", "", "def", "concat_title_plot", "(", "title_file", ",", "plot_files", ")", ":", "\n", "    ", "with", "open", "(", "title_file", ",", "\"r\"", ")", "as", "t_fin", ":", "\n", "        ", "all_titles", "=", "t_fin", ".", "readlines", "(", ")", "\n", "", "for", "file", "in", "plot_files", ":", "\n", "        ", "with", "open", "(", "file", ",", "\"r\"", ")", "as", "fin", ",", "open", "(", "file", "+", "\".title+plot\"", ",", "\"w\"", ")", "as", "fout", ":", "\n", "            ", "for", "i", ",", "line", "in", "enumerate", "(", "fin", ")", ":", "\n", "                ", "fout", ".", "write", "(", "\"{} <EOT> {}\\n\"", ".", "format", "(", "all_titles", "[", "i", "]", ".", "strip", "(", ")", ",", "line", ".", "strip", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.pool_ending_classifier.PoolEndingClassifier.__init__": [[8, 23], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.Embedding", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.Embedding", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.Embedding", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.Embedding", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear"], ["    ", "def", "__init__", "(", "self", ",", "vocab_size", ",", "embedding_dim", ",", "hidden_dim", ",", "\n", "embed_mat", "=", "None", ",", "fix_embeddings", "=", "False", ")", ":", "\n", "        ", "super", "(", "PoolEndingClassifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "embedding_dim", "=", "embedding_dim", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "\n", "self", ".", "word_embeds", "=", "nn", ".", "Embedding", "(", "vocab_size", ",", "embedding_dim", ")", "\n", "if", "embed_mat", "is", "not", "None", ":", "\n", "            ", "self", ".", "word_embeds", ".", "weight", ".", "data", "=", "embed_mat", "\n", "if", "fix_embeddings", ":", "\n", "                ", "self", ".", "word_embeds", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "self", ".", "embedding_dim", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.pool_ending_classifier.PoolEndingClassifier.embed_seq": [[24, 28], ["pool_ending_classifier.PoolEndingClassifier.word_embeds", "pool_ending_classifier.PoolEndingClassifier.transpose().contiguous", "vec.transpose().contiguous", "pool_ending_classifier.PoolEndingClassifier.transpose", "vec.transpose"], "methods", ["None"], ["", "def", "embed_seq", "(", "self", ",", "vec", ")", ":", "\n", "        ", "vec1", "=", "self", ".", "word_embeds", "(", "vec", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ")", "\n", "vec_tr", "=", "vec1", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "return", "vec_tr", "# dim [batch_size, embed_dim, length]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.pool_ending_classifier.PoolEndingClassifier.forward": [[35, 51], ["ends.view", "torch.MaxPool1d", "torch.MaxPool1d", "torch.MaxPool1d", "torch.MaxPool1d", "pool_ending_classifier.PoolEndingClassifier.embed_seq", "torch.MaxPool1d.view", "pool_ending_classifier.PoolEndingClassifier.fc().view", "ends.size", "ends.view.size", "torch.MaxPool1d.", "pool_ending_classifier.PoolEndingClassifier.fc"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.pool_ending_classifier.PoolEndingClassifier.embed_seq", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "forward", "(", "self", ",", "context", ",", "endings", ",", "itos", "=", "None", ")", ":", "\n", "# context not used.", "\n", "        ", "ends", "=", "endings", "[", "0", "]", "\n", "ends_ls", "=", "endings", "[", "1", "]", "\n", "\n", "end_seq_len", "=", "ends", ".", "size", "(", ")", "[", "0", "]", "\n", "end", "=", "ends", ".", "view", "(", "end_seq_len", ",", "-", "1", ")", "\n", "end_batch_size", "=", "end", ".", "size", "(", ")", "[", "1", "]", "\n", "maxpool_end", "=", "nn", ".", "MaxPool1d", "(", "end_seq_len", ")", "\n", "\n", "end_embed", "=", "self", ".", "embed_seq", "(", "end", ")", "\n", "end_pooled", "=", "maxpool_end", "(", "end_embed", ")", ".", "view", "(", "end_batch_size", ",", "self", ".", "embedding_dim", ")", "\n", "#end_pooled = torch.sum(end_conv, 2)/end_seq_len", "\n", "\n", "final", "=", "self", ".", "fc", "(", "end_pooled", ")", ".", "view", "(", "-", "1", ")", "\n", "return", "final", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.lang_model_ranking.setup_argparse": [[10, 19], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["def", "setup_argparse", "(", ")", ":", "\n", "    ", "p", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "p", ".", "add_argument", "(", "'--data_type'", ",", "type", "=", "str", ",", "choices", "=", "[", "\"plot\"", ",", "\"story\"", "]", ")", "\n", "p", ".", "add_argument", "(", "'--ranking'", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"output ranking accuracy of x vs y pairs\"", ")", "\n", "p", ".", "add_argument", "(", "'--both'", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"output both ranking accuracy and mean scores\"", ")", "\n", "p", ".", "add_argument", "(", "'--gen_data'", ",", "nargs", "=", "\"+\"", ",", "help", "=", "\"generated files\"", ")", "\n", "p", ".", "add_argument", "(", "'--cond_data'", ",", "type", "=", "str", ",", "help", "=", "\"filename of conditional data\"", ")", "\n", "p", ".", "add_argument", "(", "'--gold'", ",", "type", "=", "str", ",", "help", "=", "\"gold stories, necessary for ranking accuracy\"", ")", "\n", "return", "p", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.load_scorers": [[6, 19], ["print", "open", "line.startswith", "line.strip().split", "coefs.append", "model_info.append", "scorer_config.append", "float", "line.strip"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open"], ["def", "load_scorers", "(", "filepath", ")", ":", "\n", "    ", "\"\"\"expects a tsv of coefficients paired with scorer model info (used to load it in)\"\"\"", "\n", "scorer_config", ",", "coefs", ",", "model_info", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "with", "open", "(", "filepath", ",", "\"r\"", ")", "as", "scorer_file", ":", "\n", "        ", "for", "line", "in", "scorer_file", ":", "\n", "            ", "if", "line", ".", "startswith", "(", "\"#\"", ")", ":", "\n", "                ", "continue", "\n", "", "fields", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "# expect coef and then name", "\n", "coefs", ".", "append", "(", "float", "(", "fields", "[", "0", "]", ")", ")", "\n", "model_info", ".", "append", "(", "fields", "[", "1", ":", "]", ")", "\n", "scorer_config", ".", "append", "(", "fields", ")", "\n", "", "", "print", "(", "\"Coefs:\"", ",", "coefs", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "return", "coefs", ",", "model_info", ",", "scorer_config", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.get_preprocessing_parser": [[15, 19], ["options.get_parser", "options.add_preprocess_args"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_manifest.get_parser", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.add_preprocess_args"], ["\n", "def", "get_preprocessing_parser", "(", "default_task", "=", "\"translation\"", ")", ":", "\n", "    ", "parser", "=", "get_parser", "(", "\"Preprocessing\"", ",", "default_task", ")", "\n", "add_preprocess_args", "(", "parser", ")", "\n", "return", "parser", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.get_training_parser": [[21, 29], ["options.get_parser", "options.add_dataset_args", "options.add_distributed_training_args", "options.add_model_args", "options.add_optimization_args", "options.add_checkpoint_args"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_manifest.get_parser", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.add_dataset_args", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.add_distributed_training_args", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.add_model_args", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.add_optimization_args", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.add_checkpoint_args"], ["\n", "", "def", "get_training_parser", "(", "default_task", "=", "\"translation\"", ")", ":", "\n", "    ", "parser", "=", "get_parser", "(", "\"Trainer\"", ",", "default_task", ")", "\n", "add_dataset_args", "(", "parser", ",", "train", "=", "True", ")", "\n", "add_distributed_training_args", "(", "parser", ")", "\n", "add_model_args", "(", "parser", ")", "\n", "add_optimization_args", "(", "parser", ")", "\n", "add_checkpoint_args", "(", "parser", ")", "\n", "return", "parser", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.get_generation_parser": [[31, 38], ["options.get_parser", "options.add_dataset_args", "options.add_generation_args", "options.add_interactive_args"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_manifest.get_parser", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.add_dataset_args", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.add_generation_args", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.add_interactive_args"], ["\n", "", "def", "get_generation_parser", "(", "interactive", "=", "False", ",", "default_task", "=", "\"translation\"", ")", ":", "\n", "    ", "parser", "=", "get_parser", "(", "\"Generation\"", ",", "default_task", ")", "\n", "add_dataset_args", "(", "parser", ",", "gen", "=", "True", ")", "\n", "add_generation_args", "(", "parser", ")", "\n", "if", "interactive", ":", "\n", "        ", "add_interactive_args", "(", "parser", ")", "\n", "", "return", "parser", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.get_interactive_generation_parser": [[40, 42], ["options.get_generation_parser"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.get_generation_parser"], ["\n", "", "def", "get_interactive_generation_parser", "(", "default_task", "=", "\"translation\"", ")", ":", "\n", "    ", "return", "get_generation_parser", "(", "interactive", "=", "True", ",", "default_task", "=", "default_task", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.get_eval_lm_parser": [[44, 49], ["options.get_parser", "options.add_dataset_args", "options.add_eval_lm_args"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_manifest.get_parser", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.add_dataset_args", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.add_eval_lm_args"], ["\n", "", "def", "get_eval_lm_parser", "(", "default_task", "=", "\"language_modeling\"", ")", ":", "\n", "    ", "parser", "=", "get_parser", "(", "\"Evaluate Language Model\"", ",", "default_task", ")", "\n", "add_dataset_args", "(", "parser", ",", "gen", "=", "True", ")", "\n", "add_eval_lm_args", "(", "parser", ")", "\n", "return", "parser", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.get_validation_parser": [[51, 57], ["options.get_parser", "options.add_dataset_args", "get_parser.add_argument_group", "options.add_common_eval_args"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_manifest.get_parser", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.add_dataset_args", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.add_common_eval_args"], ["\n", "", "def", "get_validation_parser", "(", "default_task", "=", "None", ")", ":", "\n", "    ", "parser", "=", "get_parser", "(", "\"Validation\"", ",", "default_task", ")", "\n", "add_dataset_args", "(", "parser", ",", "train", "=", "True", ")", "\n", "group", "=", "parser", ".", "add_argument_group", "(", "\"Evaluation\"", ")", "\n", "add_common_eval_args", "(", "group", ")", "\n", "return", "parser", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.eval_str_list": [[59, 68], ["isinstance", "eval", "list", "map", "type"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval"], ["\n", "", "def", "eval_str_list", "(", "x", ",", "type", "=", "float", ")", ":", "\n", "    ", "if", "x", "is", "None", ":", "\n", "        ", "return", "None", "\n", "", "if", "isinstance", "(", "x", ",", "str", ")", ":", "\n", "        ", "x", "=", "eval", "(", "x", ")", "\n", "", "try", ":", "\n", "        ", "return", "list", "(", "map", "(", "type", ",", "x", ")", ")", "\n", "", "except", "TypeError", ":", "\n", "        ", "return", "[", "type", "(", "x", ")", "]", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.eval_bool": [[70, 77], ["bool", "eval"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval"], ["\n", "", "", "def", "eval_bool", "(", "x", ",", "default", "=", "False", ")", ":", "\n", "    ", "if", "x", "is", "None", ":", "\n", "        ", "return", "default", "\n", "", "try", ":", "\n", "        ", "return", "bool", "(", "eval", "(", "x", ")", ")", "\n", "", "except", "TypeError", ":", "\n", "        ", "return", "default", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.parse_args_and_arch": [[79, 156], ["parser.parse_known_args", "hasattr", "REGISTRIES.items", "hasattr", "getattr", "getattr", "hasattr", "options.parse_args_and_arch", "argparse.ArgumentParser", "argparse.ArgumentParser.set_defaults", "argparse.ArgumentParser.parse_args", "argparse.Namespace", "parser.add_argument_group", "ARCH_MODEL_REGISTRY[].add_args", "getattr", "TASK_REGISTRY[].add_args", "FairseqBMUF.add_args", "parser.parse_known_args", "parser.parse_args", "hasattr", "hasattr", "hasattr", "cls.add_args", "vars().items", "vars().items", "vars", "vars"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.parse_args_and_arch", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.registry.set_defaults", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.add_args", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.add_args", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.add_args", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.add_args"], ["\n", "", "", "def", "parse_args_and_arch", "(", "\n", "parser", ":", "argparse", ".", "ArgumentParser", ",", "\n", "input_args", ":", "List", "[", "str", "]", "=", "None", ",", "\n", "parse_known", ":", "bool", "=", "False", ",", "\n", "suppress_defaults", ":", "bool", "=", "False", ",", "\n", "modify_parser", ":", "Optional", "[", "Callable", "[", "[", "argparse", ".", "ArgumentParser", "]", ",", "None", "]", "]", "=", "None", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Args:\n        parser (ArgumentParser): the parser\n        input_args (List[str]): strings to parse, defaults to sys.argv\n        parse_known (bool): only parse known arguments, similar to\n            `ArgumentParser.parse_known_args`\n        suppress_defaults (bool): parse while ignoring all default values\n        modify_parser (Optional[Callable[[ArgumentParser], None]]):\n            function to modify the parser, e.g., to set default values\n    \"\"\"", "\n", "if", "suppress_defaults", ":", "\n", "# Parse args without any default values. This requires us to parse", "\n", "# twice, once to identify all the necessary task/model args, and a second", "\n", "# time with all defaults set to None.", "\n", "        ", "args", "=", "parse_args_and_arch", "(", "\n", "parser", ",", "\n", "input_args", "=", "input_args", ",", "\n", "parse_known", "=", "parse_known", ",", "\n", "suppress_defaults", "=", "False", ",", "\n", ")", "\n", "suppressed_parser", "=", "argparse", ".", "ArgumentParser", "(", "add_help", "=", "False", ",", "parents", "=", "[", "parser", "]", ")", "\n", "suppressed_parser", ".", "set_defaults", "(", "**", "{", "k", ":", "None", "for", "k", ",", "v", "in", "vars", "(", "args", ")", ".", "items", "(", ")", "}", ")", "\n", "args", "=", "suppressed_parser", ".", "parse_args", "(", "input_args", ")", "\n", "return", "argparse", ".", "Namespace", "(", "\n", "**", "{", "k", ":", "v", "for", "k", ",", "v", "in", "vars", "(", "args", ")", ".", "items", "(", ")", "if", "v", "is", "not", "None", "}", "\n", ")", "\n", "\n", "", "from", "fairseq", ".", "models", "import", "ARCH_MODEL_REGISTRY", ",", "ARCH_CONFIG_REGISTRY", "\n", "\n", "if", "modify_parser", "is", "not", "None", ":", "\n", "        ", "modify_parser", "(", "parser", ")", "\n", "\n", "# The parser doesn't know about model/criterion/optimizer-specific args, so", "\n", "# we parse twice. First we parse the model/criterion/optimizer, then we", "\n", "# parse a second time after adding the *-specific arguments.", "\n", "# If input_args is given, we will parse those args instead of sys.argv.", "\n", "", "args", ",", "_", "=", "parser", ".", "parse_known_args", "(", "input_args", ")", "\n", "\n", "# Add model-specific args to parser.", "\n", "if", "hasattr", "(", "args", ",", "\"arch\"", ")", ":", "\n", "        ", "model_specific_group", "=", "parser", ".", "add_argument_group", "(", "\n", "\"Model-specific configuration\"", ",", "\n", "# Only include attributes which are explicitly given as command-line", "\n", "# arguments or which have default values.", "\n", "argument_default", "=", "argparse", ".", "SUPPRESS", ",", "\n", ")", "\n", "ARCH_MODEL_REGISTRY", "[", "args", ".", "arch", "]", ".", "add_args", "(", "model_specific_group", ")", "\n", "\n", "# Add *-specific args to parser.", "\n", "", "from", "fairseq", ".", "registry", "import", "REGISTRIES", "\n", "\n", "for", "registry_name", ",", "REGISTRY", "in", "REGISTRIES", ".", "items", "(", ")", ":", "\n", "        ", "choice", "=", "getattr", "(", "args", ",", "registry_name", ",", "None", ")", "\n", "if", "choice", "is", "not", "None", ":", "\n", "            ", "cls", "=", "REGISTRY", "[", "\"registry\"", "]", "[", "choice", "]", "\n", "if", "hasattr", "(", "cls", ",", "\"add_args\"", ")", ":", "\n", "                ", "cls", ".", "add_args", "(", "parser", ")", "\n", "", "", "", "if", "hasattr", "(", "args", ",", "\"task\"", ")", ":", "\n", "        ", "from", "fairseq", ".", "tasks", "import", "TASK_REGISTRY", "\n", "\n", "TASK_REGISTRY", "[", "args", ".", "task", "]", ".", "add_args", "(", "parser", ")", "\n", "", "if", "getattr", "(", "args", ",", "\"use_bmuf\"", ",", "False", ")", ":", "\n", "# hack to support extra args for block distributed data parallelism", "\n", "        ", "from", "fairseq", ".", "optim", ".", "bmuf", "import", "FairseqBMUF", "\n", "\n", "FairseqBMUF", ".", "add_args", "(", "parser", ")", "\n", "\n", "# Modify the parser a second time, since defaults may have been reset", "\n", "", "if", "modify_parser", "is", "not", "None", ":", "\n", "        ", "modify_parser", "(", "parser", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.get_parser": [[158, 216], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_known_args", "fairseq.utils.import_user_module", "argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "REGISTRIES.items", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "TASK_REGISTRY.keys", "registry_name.replace", "REGISTRY[].keys"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.import_user_module"], ["# Parse a second time.", "\n", "", "if", "parse_known", ":", "\n", "        ", "args", ",", "extra", "=", "parser", ".", "parse_known_args", "(", "input_args", ")", "\n", "", "else", ":", "\n", "        ", "args", "=", "parser", ".", "parse_args", "(", "input_args", ")", "\n", "extra", "=", "None", "\n", "\n", "# Post-process args.", "\n", "", "if", "hasattr", "(", "args", ",", "\"max_sentences_valid\"", ")", "and", "args", ".", "max_sentences_valid", "is", "None", ":", "\n", "        ", "args", ".", "max_sentences_valid", "=", "args", ".", "max_sentences", "\n", "", "if", "hasattr", "(", "args", ",", "\"max_tokens_valid\"", ")", "and", "args", ".", "max_tokens_valid", "is", "None", ":", "\n", "        ", "args", ".", "max_tokens_valid", "=", "args", ".", "max_tokens", "\n", "", "if", "getattr", "(", "args", ",", "\"memory_efficient_fp16\"", ",", "False", ")", ":", "\n", "        ", "args", ".", "fp16", "=", "True", "\n", "\n", "# Apply architecture configuration.", "\n", "", "if", "hasattr", "(", "args", ",", "\"arch\"", ")", ":", "\n", "        ", "ARCH_CONFIG_REGISTRY", "[", "args", ".", "arch", "]", "(", "args", ")", "\n", "\n", "", "if", "parse_known", ":", "\n", "        ", "return", "args", ",", "extra", "\n", "", "else", ":", "\n", "        ", "return", "args", "\n", "\n", "\n", "", "", "def", "get_parser", "(", "desc", ",", "default_task", "=", "\"translation\"", ")", ":", "\n", "# Before creating the true parser, we need to import optional user module", "\n", "# in order to eagerly import custom tasks, optimizers, architectures, etc.", "\n", "    ", "usr_parser", "=", "argparse", ".", "ArgumentParser", "(", "add_help", "=", "False", ",", "allow_abbrev", "=", "False", ")", "\n", "usr_parser", ".", "add_argument", "(", "\"--user-dir\"", ",", "default", "=", "None", ")", "\n", "usr_args", ",", "_", "=", "usr_parser", ".", "parse_known_args", "(", ")", "\n", "utils", ".", "import_user_module", "(", "usr_args", ")", "\n", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "allow_abbrev", "=", "False", ")", "\n", "# fmt: off", "\n", "parser", ".", "add_argument", "(", "'--no-progress-bar'", ",", "action", "=", "'store_true'", ",", "help", "=", "'disable progress bar'", ")", "\n", "parser", ".", "add_argument", "(", "'--log-interval'", ",", "type", "=", "int", ",", "default", "=", "1000", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'log progress every N batches (when progress bar is disabled)'", ")", "\n", "parser", ".", "add_argument", "(", "'--log-format'", ",", "default", "=", "None", ",", "help", "=", "'log format to use'", ",", "\n", "choices", "=", "[", "'json'", ",", "'none'", ",", "'simple'", ",", "'tqdm'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--tensorboard-logdir'", ",", "metavar", "=", "'DIR'", ",", "default", "=", "''", ",", "\n", "help", "=", "'path to save logs for tensorboard, should match --logdir '", "\n", "'of running tensorboard (default: no tensorboard logging)'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'pseudo random number generator seed'", ")", "\n", "parser", ".", "add_argument", "(", "'--cpu'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use CPU instead of CUDA'", ")", "\n", "parser", ".", "add_argument", "(", "'--fp16'", ",", "action", "=", "'store_true'", ",", "help", "=", "'use FP16'", ")", "\n", "parser", ".", "add_argument", "(", "'--memory-efficient-fp16'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use a memory-efficient version of FP16 training; implies --fp16'", ")", "\n", "parser", ".", "add_argument", "(", "'--fp16-no-flatten-grads'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'don\\'t flatten FP16 grads tensor'", ")", "\n", "parser", ".", "add_argument", "(", "'--fp16-init-scale'", ",", "default", "=", "2", "**", "7", ",", "type", "=", "int", ",", "\n", "help", "=", "'default FP16 loss scale'", ")", "\n", "parser", ".", "add_argument", "(", "'--fp16-scale-window'", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of updates before increasing loss scale'", ")", "\n", "parser", ".", "add_argument", "(", "'--fp16-scale-tolerance'", ",", "default", "=", "0.0", ",", "type", "=", "float", ",", "\n", "help", "=", "'pct of updates that can overflow before decreasing the loss scale'", ")", "\n", "parser", ".", "add_argument", "(", "'--min-loss-scale'", ",", "default", "=", "1e-4", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'minimum FP16 loss scale, after which training is stopped'", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.add_preprocess_args": [[218, 262], ["parser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "fairseq.data.indexed_dataset.get_available_dataset_impl"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.get_available_dataset_impl"], ["help", "=", "'threshold FP16 loss scale from below'", ")", "\n", "parser", ".", "add_argument", "(", "'--user-dir'", ",", "default", "=", "None", ",", "\n", "help", "=", "'path to a python module containing custom extensions (tasks and/or architectures)'", ")", "\n", "parser", ".", "add_argument", "(", "'--empty-cache-freq'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "'how often to clear the PyTorch CUDA cache (0 to disable)'", ")", "\n", "parser", ".", "add_argument", "(", "'--all-gather-list-size'", ",", "default", "=", "16384", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of bytes reserved for gathering stats from workers'", ")", "\n", "\n", "from", "fairseq", ".", "registry", "import", "REGISTRIES", "\n", "for", "registry_name", ",", "REGISTRY", "in", "REGISTRIES", ".", "items", "(", ")", ":", "\n", "        ", "parser", ".", "add_argument", "(", "\n", "'--'", "+", "registry_name", ".", "replace", "(", "'_'", ",", "'-'", ")", ",", "\n", "default", "=", "REGISTRY", "[", "'default'", "]", ",", "\n", "choices", "=", "REGISTRY", "[", "'registry'", "]", ".", "keys", "(", ")", ",", "\n", ")", "\n", "\n", "# Task definitions can be found under fairseq/tasks/", "\n", "", "from", "fairseq", ".", "tasks", "import", "TASK_REGISTRY", "\n", "parser", ".", "add_argument", "(", "'--task'", ",", "metavar", "=", "'TASK'", ",", "default", "=", "default_task", ",", "\n", "choices", "=", "TASK_REGISTRY", ".", "keys", "(", ")", ",", "\n", "help", "=", "'task'", ")", "\n", "# fmt: on", "\n", "return", "parser", "\n", "\n", "\n", "", "def", "add_preprocess_args", "(", "parser", ")", ":", "\n", "    ", "group", "=", "parser", ".", "add_argument_group", "(", "\"Preprocessing\"", ")", "\n", "# fmt: off", "\n", "group", ".", "add_argument", "(", "\"-s\"", ",", "\"--source-lang\"", ",", "default", "=", "None", ",", "metavar", "=", "\"SRC\"", ",", "\n", "help", "=", "\"source language\"", ")", "\n", "group", ".", "add_argument", "(", "\"-t\"", ",", "\"--target-lang\"", ",", "default", "=", "None", ",", "metavar", "=", "\"TARGET\"", ",", "\n", "help", "=", "\"target language\"", ")", "\n", "group", ".", "add_argument", "(", "\"--trainpref\"", ",", "metavar", "=", "\"FP\"", ",", "default", "=", "None", ",", "\n", "help", "=", "\"train file prefix\"", ")", "\n", "group", ".", "add_argument", "(", "\"--validpref\"", ",", "metavar", "=", "\"FP\"", ",", "default", "=", "None", ",", "\n", "help", "=", "\"comma separated, valid file prefixes\"", ")", "\n", "group", ".", "add_argument", "(", "\"--testpref\"", ",", "metavar", "=", "\"FP\"", ",", "default", "=", "None", ",", "\n", "help", "=", "\"comma separated, test file prefixes\"", ")", "\n", "group", ".", "add_argument", "(", "\"--align-suffix\"", ",", "metavar", "=", "\"FP\"", ",", "default", "=", "None", ",", "\n", "help", "=", "\"alignment file suffix\"", ")", "\n", "group", ".", "add_argument", "(", "\"--destdir\"", ",", "metavar", "=", "\"DIR\"", ",", "default", "=", "\"data-bin\"", ",", "\n", "help", "=", "\"destination dir\"", ")", "\n", "group", ".", "add_argument", "(", "\"--thresholdtgt\"", ",", "metavar", "=", "\"N\"", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "\"map words appearing less than threshold times to unknown\"", ")", "\n", "group", ".", "add_argument", "(", "\"--thresholdsrc\"", ",", "metavar", "=", "\"N\"", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.add_dataset_args": [[264, 309], ["parser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "fairseq.data.indexed_dataset.get_available_dataset_impl"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.get_available_dataset_impl"], ["group", ".", "add_argument", "(", "\"--tgtdict\"", ",", "metavar", "=", "\"FP\"", ",", "\n", "help", "=", "\"reuse given target dictionary\"", ")", "\n", "group", ".", "add_argument", "(", "\"--srcdict\"", ",", "metavar", "=", "\"FP\"", ",", "\n", "help", "=", "\"reuse given source dictionary\"", ")", "\n", "group", ".", "add_argument", "(", "\"--nwordstgt\"", ",", "metavar", "=", "\"N\"", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "\"number of target words to retain\"", ")", "\n", "group", ".", "add_argument", "(", "\"--nwordssrc\"", ",", "metavar", "=", "\"N\"", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "\"number of source words to retain\"", ")", "\n", "group", ".", "add_argument", "(", "\"--alignfile\"", ",", "metavar", "=", "\"ALIGN\"", ",", "default", "=", "None", ",", "\n", "help", "=", "\"an alignment file (optional)\"", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset-impl'", ",", "metavar", "=", "'FORMAT'", ",", "default", "=", "'mmap'", ",", "\n", "choices", "=", "get_available_dataset_impl", "(", ")", ",", "\n", "help", "=", "'output dataset implementation'", ")", "\n", "group", ".", "add_argument", "(", "\"--joined-dictionary\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Generate joined dictionary\"", ")", "\n", "group", ".", "add_argument", "(", "\"--only-source\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Only process the source language\"", ")", "\n", "group", ".", "add_argument", "(", "\"--padding-factor\"", ",", "metavar", "=", "\"N\"", ",", "default", "=", "8", ",", "type", "=", "int", ",", "\n", "help", "=", "\"Pad dictionary size to be multiple of N\"", ")", "\n", "group", ".", "add_argument", "(", "\"--workers\"", ",", "metavar", "=", "\"N\"", ",", "default", "=", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "\"number of parallel workers\"", ")", "\n", "# fmt: on", "\n", "return", "parser", "\n", "\n", "\n", "", "def", "add_dataset_args", "(", "parser", ",", "train", "=", "False", ",", "gen", "=", "False", ")", ":", "\n", "    ", "group", "=", "parser", ".", "add_argument_group", "(", "\"Dataset and data loading\"", ")", "\n", "# fmt: off", "\n", "group", ".", "add_argument", "(", "'--num-workers'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'how many subprocesses to use for data loading'", ")", "\n", "group", ".", "add_argument", "(", "'--skip-invalid-size-inputs-valid-test'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'ignore too long or too short lines in valid and test set'", ")", "\n", "group", ".", "add_argument", "(", "'--max-tokens'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'maximum number of tokens in a batch'", ")", "\n", "group", ".", "add_argument", "(", "'--max-sentences'", ",", "'--batch-size'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'maximum number of sentences in a batch'", ")", "\n", "group", ".", "add_argument", "(", "'--required-batch-size-multiple'", ",", "default", "=", "8", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'batch size will be a multiplier of this value'", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset-impl'", ",", "metavar", "=", "'FORMAT'", ",", "\n", "choices", "=", "get_available_dataset_impl", "(", ")", ",", "\n", "help", "=", "'output dataset implementation'", ")", "\n", "if", "train", ":", "\n", "        ", "group", ".", "add_argument", "(", "'--train-subset'", ",", "default", "=", "'train'", ",", "metavar", "=", "'SPLIT'", ",", "\n", "help", "=", "'data subset to use for training (e.g. train, valid, test)'", ")", "\n", "group", ".", "add_argument", "(", "'--valid-subset'", ",", "default", "=", "'valid'", ",", "metavar", "=", "'SPLIT'", ",", "\n", "help", "=", "'comma separated list of data subsets to use for validation'", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.add_distributed_training_args": [[311, 351], ["parser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "max", "torch.cuda.device_count"], "function", ["None"], ["group", ".", "add_argument", "(", "'--validate-interval'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'validate every N epochs'", ")", "\n", "group", ".", "add_argument", "(", "'--fixed-validation-seed'", ",", "default", "=", "None", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'specified random seed for validation'", ")", "\n", "group", ".", "add_argument", "(", "'--disable-validation'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'disable validation'", ")", "\n", "group", ".", "add_argument", "(", "'--max-tokens-valid'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'maximum number of tokens in a validation batch'", "\n", "' (defaults to --max-tokens)'", ")", "\n", "group", ".", "add_argument", "(", "'--max-sentences-valid'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'maximum number of sentences in a validation batch'", "\n", "' (defaults to --max-sentences)'", ")", "\n", "group", ".", "add_argument", "(", "'--curriculum'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'don\\'t shuffle batches for first N epochs'", ")", "\n", "", "if", "gen", ":", "\n", "        ", "group", ".", "add_argument", "(", "'--gen-subset'", ",", "default", "=", "'test'", ",", "metavar", "=", "'SPLIT'", ",", "\n", "help", "=", "'data subset to generate (train, valid, test)'", ")", "\n", "group", ".", "add_argument", "(", "'--num-shards'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'shard generation over N shards'", ")", "\n", "group", ".", "add_argument", "(", "'--shard-id'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "metavar", "=", "'ID'", ",", "\n", "help", "=", "'id of the shard to generate (id < num_shards)'", ")", "\n", "# fmt: on", "\n", "", "return", "group", "\n", "\n", "\n", "", "def", "add_distributed_training_args", "(", "parser", ")", ":", "\n", "    ", "group", "=", "parser", ".", "add_argument_group", "(", "\"Distributed training\"", ")", "\n", "# fmt: off", "\n", "group", ".", "add_argument", "(", "'--distributed-world-size'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "default", "=", "max", "(", "1", ",", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ",", "\n", "help", "=", "'total number of GPUs across all nodes (default: all visible GPUs)'", ")", "\n", "group", ".", "add_argument", "(", "'--distributed-rank'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "'rank of the current worker'", ")", "\n", "group", ".", "add_argument", "(", "'--distributed-backend'", ",", "default", "=", "'nccl'", ",", "type", "=", "str", ",", "\n", "help", "=", "'distributed backend'", ")", "\n", "group", ".", "add_argument", "(", "'--distributed-init-method'", ",", "default", "=", "None", ",", "type", "=", "str", ",", "\n", "help", "=", "'typically tcp://hostname:port that will be used to '", "\n", "'establish initial connetion'", ")", "\n", "group", ".", "add_argument", "(", "'--distributed-port'", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "'port number (not required if using --distributed-init-method)'", ")", "\n", "group", ".", "add_argument", "(", "'--device-id'", ",", "'--local_rank'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.add_optimization_args": [[353, 378], ["parser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "options.eval_str_list"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.eval_str_list"], ["group", ".", "add_argument", "(", "'--distributed-no-spawn'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'do not spawn multiple processes even if multiple GPUs are visible'", ")", "\n", "# \"c10d\" is PyTorch's DDP implementation and provides the fastest", "\n", "# training. \"no_c10d\" is a more robust, but slightly slower DDP", "\n", "# implementation. Try this if you get warning messages about", "\n", "# inconsistent gradients between workers, or if some of your model", "\n", "# parameters are not always used.", "\n", "group", ".", "add_argument", "(", "'--ddp-backend'", ",", "default", "=", "'c10d'", ",", "type", "=", "str", ",", "\n", "choices", "=", "[", "'c10d'", ",", "'no_c10d'", "]", ",", "\n", "help", "=", "'DistributedDataParallel backend'", ")", "\n", "group", ".", "add_argument", "(", "'--bucket-cap-mb'", ",", "default", "=", "25", ",", "type", "=", "int", ",", "metavar", "=", "'MB'", ",", "\n", "help", "=", "'bucket size for reduction'", ")", "\n", "group", ".", "add_argument", "(", "'--fix-batches-to-gpus'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'don\\'t shuffle batches between GPUs; this reduces overall '", "\n", "'randomness and may affect precision but avoids the cost of '", "\n", "'re-reading the data'", ")", "\n", "group", ".", "add_argument", "(", "'--find-unused-parameters'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'disable unused parameter detection (not applicable to '", "\n", "'no_c10d ddp-backend'", ")", "\n", "group", ".", "add_argument", "(", "'--fast-stat-sync'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'[deprecated] this is now defined per Criterion'", ")", "\n", "group", ".", "add_argument", "(", "'--broadcast-buffers'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Copy non-trainable parameters between GPUs, such as '", "\n", "'batchnorm population statistics'", ")", "\n", "# fmt: on", "\n", "return", "group", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.add_checkpoint_args": [[380, 426], ["parser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument"], "function", ["None"], ["\n", "", "def", "add_optimization_args", "(", "parser", ")", ":", "\n", "    ", "group", "=", "parser", ".", "add_argument_group", "(", "\"Optimization\"", ")", "\n", "# fmt: off", "\n", "group", ".", "add_argument", "(", "'--max-epoch'", ",", "'--me'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'force stop training at specified epoch'", ")", "\n", "group", ".", "add_argument", "(", "'--max-update'", ",", "'--mu'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'force stop training at specified update'", ")", "\n", "group", ".", "add_argument", "(", "'--clip-norm'", ",", "default", "=", "25", ",", "type", "=", "float", ",", "metavar", "=", "'NORM'", ",", "\n", "help", "=", "'clip threshold of gradients'", ")", "\n", "group", ".", "add_argument", "(", "'--sentence-avg'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'normalize gradients by the number of sentences in a batch'", "\n", "' (default is to normalize by number of tokens)'", ")", "\n", "group", ".", "add_argument", "(", "'--update-freq'", ",", "default", "=", "'1'", ",", "metavar", "=", "'N1,N2,...,N_K'", ",", "\n", "type", "=", "lambda", "uf", ":", "eval_str_list", "(", "uf", ",", "type", "=", "int", ")", ",", "\n", "help", "=", "'update parameters every N_i batches, when in epoch i'", ")", "\n", "group", ".", "add_argument", "(", "'--lr'", ",", "'--learning-rate'", ",", "default", "=", "'0.25'", ",", "type", "=", "eval_str_list", ",", "\n", "metavar", "=", "'LR_1,LR_2,...,LR_N'", ",", "\n", "help", "=", "'learning rate for the first N epochs; all epochs >N using LR_N'", "\n", "' (note: this may be interpreted differently depending on --lr-scheduler)'", ")", "\n", "group", ".", "add_argument", "(", "'--min-lr'", ",", "default", "=", "-", "1", ",", "type", "=", "float", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'stop training when the learning rate reaches this minimum'", ")", "\n", "group", ".", "add_argument", "(", "'--use-bmuf'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'specify global optimizer for syncing models on different GPUs/shards'", ")", "\n", "# fmt: on", "\n", "return", "group", "\n", "\n", "\n", "", "def", "add_checkpoint_args", "(", "parser", ")", ":", "\n", "    ", "group", "=", "parser", ".", "add_argument_group", "(", "\"Checkpointing\"", ")", "\n", "# fmt: off", "\n", "group", ".", "add_argument", "(", "'--save-dir'", ",", "metavar", "=", "'DIR'", ",", "default", "=", "'checkpoints'", ",", "\n", "help", "=", "'path to save checkpoints'", ")", "\n", "group", ".", "add_argument", "(", "'--restore-file'", ",", "default", "=", "'checkpoint_last.pt'", ",", "\n", "help", "=", "'filename from which to load checkpoint '", "\n", "'(default: <save-dir>/checkpoint_last.pt'", ")", "\n", "group", ".", "add_argument", "(", "'--reset-dataloader'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'if set, does not reload dataloader state from the checkpoint'", ")", "\n", "group", ".", "add_argument", "(", "'--reset-lr-scheduler'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'if set, does not load lr scheduler state from the checkpoint'", ")", "\n", "group", ".", "add_argument", "(", "'--reset-meters'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'if set, does not load meters from the checkpoint'", ")", "\n", "group", ".", "add_argument", "(", "'--reset-optimizer'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'if set, does not load optimizer state from the checkpoint'", ")", "\n", "group", ".", "add_argument", "(", "'--optimizer-overrides'", ",", "default", "=", "\"{}\"", ",", "type", "=", "str", ",", "metavar", "=", "'DICT'", ",", "\n", "help", "=", "'a dictionary used to override optimizer args when loading a checkpoint'", ")", "\n", "group", ".", "add_argument", "(", "'--save-interval'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "metavar", "=", "'N'", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.add_common_eval_args": [[428, 441], ["group.add_argument", "group.add_argument", "group.add_argument", "group.add_argument", "group.add_argument"], "function", ["None"], ["group", ".", "add_argument", "(", "'--save-interval-updates'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'save a checkpoint (and validate) every N updates'", ")", "\n", "group", ".", "add_argument", "(", "'--keep-interval-updates'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'keep the last N checkpoints saved with --save-interval-updates'", ")", "\n", "group", ".", "add_argument", "(", "'--keep-last-epochs'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'keep last N epoch checkpoints'", ")", "\n", "group", ".", "add_argument", "(", "'--keep-best-checkpoints'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'keep best N checkpoints based on scores'", ")", "\n", "group", ".", "add_argument", "(", "'--no-save'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'don\\'t save models or checkpoints'", ")", "\n", "group", ".", "add_argument", "(", "'--no-epoch-checkpoints'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'only store last and best checkpoints'", ")", "\n", "group", ".", "add_argument", "(", "'--no-last-checkpoints'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'don\\'t store last checkpoints'", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.add_eval_lm_args": [[444, 457], ["parser.add_argument_group", "options.add_common_eval_args", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.add_common_eval_args"], ["group", ".", "add_argument", "(", "'--best-checkpoint-metric'", ",", "type", "=", "str", ",", "default", "=", "'loss'", ",", "\n", "help", "=", "'metric to use for saving \"best\" checkpoints'", ")", "\n", "group", ".", "add_argument", "(", "'--maximize-best-checkpoint-metric'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'select the largest metric value for saving \"best\" checkpoints'", ")", "\n", "group", ".", "add_argument", "(", "'--patience'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "(", "'early stop training if valid performance doesn\\'t '", "\n", "'improve for N consecutive validation runs; note '", "\n", "'that this is influenced by --validate-interval'", ")", ")", "\n", "# fmt: on", "\n", "return", "group", "\n", "\n", "\n", "", "def", "add_common_eval_args", "(", "group", ")", ":", "\n", "# fmt: off", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.add_generation_args": [[461, 535], ["parser.add_argument_group", "options.add_common_eval_args", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.add_common_eval_args"], ["help", "=", "'remove BPE tokens before scoring (can be set to sentencepiece)'", ")", "\n", "group", ".", "add_argument", "(", "'--quiet'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'only print final scores'", ")", "\n", "group", ".", "add_argument", "(", "'--model-overrides'", ",", "default", "=", "\"{}\"", ",", "type", "=", "str", ",", "metavar", "=", "'DICT'", ",", "\n", "help", "=", "'a dictionary used to override model args at generation '", "\n", "'that were used during model training'", ")", "\n", "group", ".", "add_argument", "(", "'--results-path'", ",", "metavar", "=", "'RESDIR'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'path to save eval results (optional)\"'", ")", "\n", "# fmt: on", "\n", "\n", "\n", "", "def", "add_eval_lm_args", "(", "parser", ")", ":", "\n", "    ", "group", "=", "parser", ".", "add_argument_group", "(", "\"LM Evaluation\"", ")", "\n", "add_common_eval_args", "(", "group", ")", "\n", "# fmt: off", "\n", "group", ".", "add_argument", "(", "'--output-word-probs'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'if set, outputs words and their predicted log probabilities to standard output'", ")", "\n", "group", ".", "add_argument", "(", "'--output-word-stats'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'if set, outputs word statistics such as word count, average probability, etc'", ")", "\n", "group", ".", "add_argument", "(", "'--context-window'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'ensures that every evaluated token has access to a context of at least this size,'", "\n", "' if possible'", ")", "\n", "group", ".", "add_argument", "(", "'--softmax-batch'", ",", "default", "=", "sys", ".", "maxsize", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'if BxT is more than this, will batch the softmax over vocab to this amount of tokens'", "\n", "' in order to fit into GPU memory'", ")", "\n", "# fmt: on", "\n", "\n", "\n", "", "def", "add_generation_args", "(", "parser", ")", ":", "\n", "    ", "group", "=", "parser", ".", "add_argument_group", "(", "\"Generation\"", ")", "\n", "add_common_eval_args", "(", "group", ")", "\n", "# fmt: off", "\n", "group", ".", "add_argument", "(", "'--beam'", ",", "default", "=", "5", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'beam size'", ")", "\n", "group", ".", "add_argument", "(", "'--nbest'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of hypotheses to output'", ")", "\n", "group", ".", "add_argument", "(", "'--max-len-a'", ",", "default", "=", "0", ",", "type", "=", "float", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "(", "'generate sequences of maximum length ax + b, '", "\n", "'where x is the source length'", ")", ")", "\n", "group", ".", "add_argument", "(", "'--max-len-b'", ",", "default", "=", "200", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "(", "'generate sequences of maximum length ax + b, '", "\n", "'where x is the source length'", ")", ")", "\n", "group", ".", "add_argument", "(", "'--min-len'", ",", "default", "=", "1", ",", "type", "=", "float", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "(", "'minimum generation length'", ")", ")", "\n", "group", ".", "add_argument", "(", "'--match-source-len'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "(", "'generations should match the source length'", ")", ")", "\n", "group", ".", "add_argument", "(", "'--no-early-stop'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'deprecated'", ")", "\n", "group", ".", "add_argument", "(", "'--unnormalized'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'compare unnormalized hypothesis scores'", ")", "\n", "group", ".", "add_argument", "(", "'--no-beamable-mm'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'don\\'t use BeamableMM in attention layers'", ")", "\n", "group", ".", "add_argument", "(", "'--lenpen'", ",", "default", "=", "1", ",", "type", "=", "float", ",", "\n", "help", "=", "'length penalty: <1.0 favors shorter, >1.0 favors longer sentences'", ")", "\n", "group", ".", "add_argument", "(", "'--unkpen'", ",", "default", "=", "0", ",", "type", "=", "float", ",", "\n", "help", "=", "'unknown word penalty: <0 produces more unks, >0 produces fewer'", ")", "\n", "group", ".", "add_argument", "(", "'--replace-unk'", ",", "nargs", "=", "'?'", ",", "const", "=", "True", ",", "default", "=", "None", ",", "\n", "help", "=", "'perform unknown replacement (optionally with alignment dictionary)'", ")", "\n", "group", ".", "add_argument", "(", "'--sacrebleu'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'score with sacrebleu'", ")", "\n", "group", ".", "add_argument", "(", "'--score-reference'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'just score the reference translation'", ")", "\n", "group", ".", "add_argument", "(", "'--prefix-size'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "metavar", "=", "'PS'", ",", "\n", "help", "=", "'initialize generation by target prefix of given length'", ")", "\n", "group", ".", "add_argument", "(", "'--no-repeat-ngram-size'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'ngram blocking such that this size ngram cannot be repeated in the generation'", ")", "\n", "group", ".", "add_argument", "(", "'--sampling'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'sample hypotheses instead of using beam search'", ")", "\n", "group", ".", "add_argument", "(", "'--sampling-topk'", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "metavar", "=", "'PS'", ",", "\n", "help", "=", "'sample from top K likely next words instead of all words'", ")", "\n", "group", ".", "add_argument", "(", "'--sampling-topp'", ",", "default", "=", "-", "1.0", ",", "type", "=", "float", ",", "metavar", "=", "'PS'", ",", "\n", "help", "=", "'sample from the smallest set whose cumulative probability mass exceeds p for next words'", ")", "\n", "group", ".", "add_argument", "(", "'--temperature'", ",", "default", "=", "1.", ",", "type", "=", "float", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'temperature for generation'", ")", "\n", "group", ".", "add_argument", "(", "'--diverse-beam-groups'", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.add_interactive_args": [[537, 544], ["parser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument"], "function", ["None"], ["group", ".", "add_argument", "(", "'--diverse-beam-strength'", ",", "default", "=", "0.5", ",", "type", "=", "float", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'strength of diversity penalty for Diverse Beam Search'", ")", "\n", "group", ".", "add_argument", "(", "'--diversity-rate'", ",", "default", "=", "-", "1.0", ",", "type", "=", "float", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'strength of diversity penalty for Diverse Siblings Search'", ")", "\n", "group", ".", "add_argument", "(", "'--print-alignment'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'if set, uses attention feedback to compute and print alignment to source tokens'", ")", "\n", "group", ".", "add_argument", "(", "'--print-step'", ",", "action", "=", "'store_true'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.add_model_args": [[547, 564], ["parser.add_argument_group", "parser.add_argument_group.add_argument", "ARCH_MODEL_REGISTRY.keys"], "function", ["None"], ["help", "=", "'if > 0.0, it penalized early-stopping in decoding.'", ")", "\n", "group", ".", "add_argument", "(", "'--iter-decode-max-iter'", ",", "default", "=", "10", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'maximum iterations for iterative refinement.'", ")", "\n", "group", ".", "add_argument", "(", "'--iter-decode-force-max-iter'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'if set, run exact the maximum number of iterations without early stop'", ")", "\n", "group", ".", "add_argument", "(", "'--iter-decode-with-beam'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'if > 1, model will generate translations varying by the lengths.'", ")", "\n", "group", ".", "add_argument", "(", "'--iter-decode-with-external-reranker'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'if set, the last checkpoint are assumed to be a reranker to rescore the translations'", ")", ",", "\n", "group", ".", "add_argument", "(", "'--retain-iter-history'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'if set, decoding returns the whole history of iterative refinement'", ")", "\n", "\n", "# special decoding format for advanced decoding.", "\n", "group", ".", "add_argument", "(", "'--decoding-format'", ",", "default", "=", "None", ",", "type", "=", "str", ",", "choices", "=", "[", "'unigram'", ",", "'ensemble'", ",", "'vote'", ",", "'dp'", ",", "'bs'", "]", ")", "\n", "# fmt: on", "\n", "return", "group", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.distributed_utils.is_master": [[19, 21], ["None"], "function", ["None"], ["from", "fairseq", "import", "utils", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.distributed_utils.infer_init_method": [[23, 70], ["all", "int", "int", "os.environ.get", "os.environ.get", "subprocess.check_output", "int", "os.environ.get", "os.environ.get", "int", "int", "int", "int", "int", "int", "int", "[].decode", "os.environ.get", "os.environ.get", "os.environ.get", "os.environ.get", "os.environ.get", "subprocess.check_output.split"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.decode"], ["\n", "\n", "def", "is_master", "(", "args", ")", ":", "\n", "    ", "return", "args", ".", "distributed_rank", "==", "0", "\n", "\n", "\n", "", "def", "infer_init_method", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "distributed_init_method", "is", "not", "None", ":", "\n", "        ", "return", "\n", "\n", "# support torch.distributed.launch", "\n", "", "if", "all", "(", "key", "in", "os", ".", "environ", "for", "key", "in", "[", "\n", "'MASTER_ADDR'", ",", "'MASTER_PORT'", ",", "'WORLD_SIZE'", ",", "'RANK'", "\n", "]", ")", ":", "\n", "        ", "args", ".", "distributed_init_method", "=", "'env://'", "\n", "args", ".", "distributed_world_size", "=", "int", "(", "os", ".", "environ", "[", "'WORLD_SIZE'", "]", ")", "\n", "args", ".", "distributed_rank", "=", "int", "(", "os", ".", "environ", "[", "'RANK'", "]", ")", "\n", "\n", "# we can determine the init method automatically for Slurm", "\n", "", "elif", "args", ".", "distributed_port", ">", "0", ":", "\n", "        ", "node_list", "=", "os", ".", "environ", ".", "get", "(", "'SLURM_STEP_NODELIST'", ")", "\n", "if", "node_list", "is", "None", ":", "\n", "            ", "node_list", "=", "os", ".", "environ", ".", "get", "(", "'SLURM_JOB_NODELIST'", ")", "\n", "", "if", "node_list", "is", "not", "None", ":", "\n", "            ", "try", ":", "\n", "                ", "hostnames", "=", "subprocess", ".", "check_output", "(", "[", "'scontrol'", ",", "'show'", ",", "'hostnames'", ",", "node_list", "]", ")", "\n", "args", ".", "distributed_init_method", "=", "'tcp://{host}:{port}'", ".", "format", "(", "\n", "host", "=", "hostnames", ".", "split", "(", ")", "[", "0", "]", ".", "decode", "(", "'utf-8'", ")", ",", "\n", "port", "=", "args", ".", "distributed_port", ",", "\n", ")", "\n", "nnodes", "=", "int", "(", "os", ".", "environ", ".", "get", "(", "'SLURM_NNODES'", ")", ")", "\n", "ntasks_per_node", "=", "os", ".", "environ", ".", "get", "(", "'SLURM_NTASKS_PER_NODE'", ")", "\n", "if", "ntasks_per_node", "is", "not", "None", ":", "\n", "                    ", "ntasks_per_node", "=", "int", "(", "ntasks_per_node", ")", "\n", "", "else", ":", "\n", "                    ", "ntasks", "=", "int", "(", "os", ".", "environ", ".", "get", "(", "'SLURM_NTASKS'", ")", ")", "\n", "nnodes", "=", "int", "(", "os", ".", "environ", ".", "get", "(", "'SLURM_NNODES'", ")", ")", "\n", "assert", "ntasks", "%", "nnodes", "==", "0", "\n", "ntasks_per_node", "=", "int", "(", "ntasks", "/", "nnodes", ")", "\n", "", "if", "ntasks_per_node", "==", "1", ":", "\n", "                    ", "assert", "args", ".", "distributed_world_size", "%", "nnodes", "==", "0", "\n", "gpus_per_node", "=", "args", ".", "distributed_world_size", "//", "nnodes", "\n", "node_id", "=", "int", "(", "os", ".", "environ", ".", "get", "(", "'SLURM_NODEID'", ")", ")", "\n", "args", ".", "distributed_rank", "=", "node_id", "*", "gpus_per_node", "\n", "", "else", ":", "\n", "                    ", "assert", "ntasks_per_node", "==", "args", ".", "distributed_world_size", "//", "nnodes", "\n", "args", ".", "distributed_no_spawn", "=", "True", "\n", "args", ".", "distributed_rank", "=", "int", "(", "os", ".", "environ", ".", "get", "(", "'SLURM_PROCID'", ")", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.distributed_utils.distributed_init": [[72, 100], ["torch.distributed.is_initialized", "torch.distributed.is_initialized", "torch.distributed.get_rank", "torch.distributed.get_rank", "ValueError", "warnings.warn", "distributed_utils.suppress_output.print", "torch.init_process_group", "distributed_utils.suppress_output.print", "torch.cuda.is_available", "torch.cuda.is_available", "distributed_utils.suppress_output", "torch.all_reduce", "torch.all_reduce", "distributed_utils.is_master", "socket.gethostname", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.distributed_utils.get_rank", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.distributed_utils.get_rank", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.distributed_utils.suppress_output", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.distributed_utils.all_reduce", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.distributed_utils.all_reduce", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.distributed_utils.is_master"], ["", "", "except", "subprocess", ".", "CalledProcessError", "as", "e", ":", "# scontrol failed", "\n", "                ", "raise", "e", "\n", "", "except", "FileNotFoundError", ":", "# Slurm is not installed", "\n", "                ", "pass", "\n", "\n", "\n", "", "", "", "", "def", "distributed_init", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "distributed_world_size", "==", "1", ":", "\n", "        ", "raise", "ValueError", "(", "'Cannot initialize distributed with distributed_world_size=1'", ")", "\n", "\n", "", "if", "torch", ".", "distributed", ".", "is_initialized", "(", ")", ":", "\n", "        ", "warnings", ".", "warn", "(", "'Distributed is already initialized, cannot initialize twice!'", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "info", "(", "'distributed init (rank {}): {}'", ".", "format", "(", "\n", "args", ".", "distributed_rank", ",", "args", ".", "distributed_init_method", ",", "\n", ")", ")", "\n", "dist", ".", "init_process_group", "(", "\n", "backend", "=", "args", ".", "distributed_backend", ",", "\n", "init_method", "=", "args", ".", "distributed_init_method", ",", "\n", "world_size", "=", "args", ".", "distributed_world_size", ",", "\n", "rank", "=", "args", ".", "distributed_rank", ",", "\n", ")", "\n", "logger", ".", "info", "(", "'initialized host {} as rank {}'", ".", "format", "(", "\n", "socket", ".", "gethostname", "(", ")", ",", "args", ".", "distributed_rank", ",", "\n", ")", ")", "\n", "\n", "# perform a dummy all-reduce to initialize the NCCL communicator", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "dist", ".", "all_reduce", "(", "torch", ".", "zeros", "(", "1", ")", ".", "cuda", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.distributed_utils.get_rank": [[115, 117], ["torch.get_rank"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.distributed_utils.get_rank"], ["\n", "\n", "", "def", "get_world_size", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.distributed_utils.get_world_size": [[119, 121], ["torch.get_world_size"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.distributed_utils.get_world_size"], ["\n", "\n", "", "def", "get_default_group", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.distributed_utils.get_default_group": [[123, 125], ["None"], "function", ["None"], ["\n", "\n", "", "def", "all_reduce", "(", "tensor", ",", "group", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.distributed_utils.all_reduce": [[127, 131], ["torch.all_reduce", "distributed_utils.get_default_group"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.distributed_utils.all_reduce", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.distributed_utils.get_default_group"], ["        ", "group", "=", "get_default_group", "(", ")", "\n", "", "return", "dist", ".", "all_reduce", "(", "tensor", ",", "group", "=", "group", ")", "\n", "\n", "\n", "", "def", "all_gather_list", "(", "data", ",", "group", "=", "None", ",", "max_size", "=", "16384", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.distributed_utils.all_gather_list": [[133, 183], ["distributed_utils.get_rank", "distributed_utils.get_world_size", "buffer.cpu.zero_", "pickle.dumps", "len", "struct.pack", "torch.ByteTensor", "torch.ByteTensor", "buffer[].copy_", "distributed_utils.all_reduce", "buffer.cpu.cpu", "torch.cuda.ByteTensor", "torch.cuda.ByteTensor", "torch.ByteTensor().pin_memory", "torch.ByteTensor().pin_memory", "ValueError", "list", "range", "hasattr", "all_gather_list._buffer.numel", "struct.unpack", "Exception", "torch.ByteTensor", "torch.ByteTensor", "bytes", "result.append", "out_buffer[].tolist", "pickle.loads", "bytes", "out_buffer[].tolist"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.distributed_utils.get_rank", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.distributed_utils.get_world_size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.distributed_utils.all_reduce"], ["\n", "rank", "=", "get_rank", "(", ")", "\n", "world_size", "=", "get_world_size", "(", ")", "\n", "\n", "buffer_size", "=", "max_size", "*", "world_size", "\n", "if", "not", "hasattr", "(", "all_gather_list", ",", "'_buffer'", ")", "or", "all_gather_list", ".", "_buffer", ".", "numel", "(", ")", "<", "buffer_size", ":", "\n", "        ", "all_gather_list", ".", "_buffer", "=", "torch", ".", "cuda", ".", "ByteTensor", "(", "buffer_size", ")", "\n", "all_gather_list", ".", "_cpu_buffer", "=", "torch", ".", "ByteTensor", "(", "max_size", ")", ".", "pin_memory", "(", ")", "\n", "", "buffer", "=", "all_gather_list", ".", "_buffer", "\n", "buffer", ".", "zero_", "(", ")", "\n", "cpu_buffer", "=", "all_gather_list", ".", "_cpu_buffer", "\n", "\n", "enc", "=", "pickle", ".", "dumps", "(", "data", ")", "\n", "enc_size", "=", "len", "(", "enc", ")", "\n", "header_size", "=", "4", "# size of header that contains the length of the encoded data", "\n", "size", "=", "header_size", "+", "enc_size", "\n", "if", "size", ">", "max_size", ":", "\n", "        ", "raise", "ValueError", "(", "'encoded data size ({}) exceeds max_size ({})'", ".", "format", "(", "size", ",", "max_size", ")", ")", "\n", "\n", "", "header", "=", "struct", ".", "pack", "(", "\">I\"", ",", "enc_size", ")", "\n", "cpu_buffer", "[", ":", "size", "]", "=", "torch", ".", "ByteTensor", "(", "list", "(", "header", "+", "enc", ")", ")", "\n", "start", "=", "rank", "*", "max_size", "\n", "buffer", "[", "start", ":", "start", "+", "size", "]", ".", "copy_", "(", "cpu_buffer", "[", ":", "size", "]", ")", "\n", "\n", "all_reduce", "(", "buffer", ",", "group", "=", "group", ")", "\n", "\n", "buffer", "=", "buffer", ".", "cpu", "(", ")", "\n", "try", ":", "\n", "        ", "result", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "world_size", ")", ":", "\n", "            ", "out_buffer", "=", "buffer", "[", "i", "*", "max_size", ":", "(", "i", "+", "1", ")", "*", "max_size", "]", "\n", "enc_size", ",", "=", "struct", ".", "unpack", "(", "\">I\"", ",", "bytes", "(", "out_buffer", "[", ":", "header_size", "]", ".", "tolist", "(", ")", ")", ")", "\n", "if", "enc_size", ">", "0", ":", "\n", "                ", "result", ".", "append", "(", "pickle", ".", "loads", "(", "bytes", "(", "out_buffer", "[", "header_size", ":", "header_size", "+", "enc_size", "]", ".", "tolist", "(", ")", ")", ")", ")", "\n", "", "", "return", "result", "\n", "", "except", "pickle", ".", "UnpicklingError", ":", "\n", "        ", "raise", "Exception", "(", "\n", "'Unable to unpickle data from other workers. all_gather_list requires all '", "\n", "'workers to enter the function together, so this error usually indicates '", "\n", "'that the workers have fallen out of sync somehow. Workers can fall out of '", "\n", "'sync if one of them runs out of memory, or if there are other conditions '", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.distributed_utils.all_reduce_dict": [[190, 239], ["list", "collections.OrderedDict", "collections.OrderedDict", "distributed_utils.all_reduce_dict._all_reduce_dict"], "function", ["None"], ["", "", "def", "all_reduce_dict", "(", "\n", "data", ":", "Mapping", "[", "str", ",", "Any", "]", ",", "\n", "device", ",", "\n", "group", "=", "None", ",", "\n", ")", "->", "Dict", "[", "str", ",", "Any", "]", ":", "\n", "    ", "\"\"\"\n    AllReduce a dictionary of values across workers. We separately\n    reduce items that are already on the device and items on CPU for\n    better performance.\n\n    Args:\n        data (Mapping[str, Any]): dictionary of data to all-reduce, but\n            cannot be a nested dictionary\n        device (torch.device): device for the reduction\n        group (optional): group of the collective\n    \"\"\"", "\n", "data_keys", "=", "list", "(", "data", ".", "keys", "(", ")", ")", "\n", "\n", "# We want to separately reduce items that are already on the", "\n", "# device and items on CPU for performance reasons.", "\n", "cpu_data", "=", "OrderedDict", "(", ")", "\n", "device_data", "=", "OrderedDict", "(", ")", "\n", "for", "k", "in", "data_keys", ":", "\n", "        ", "t", "=", "data", "[", "k", "]", "\n", "if", "not", "torch", ".", "is_tensor", "(", "t", ")", ":", "\n", "            ", "cpu_data", "[", "k", "]", "=", "torch", ".", "tensor", "(", "t", ",", "dtype", "=", "torch", ".", "double", ")", "\n", "", "elif", "t", ".", "device", ".", "type", "!=", "device", ".", "type", ":", "\n", "            ", "cpu_data", "[", "k", "]", "=", "t", ".", "to", "(", "dtype", "=", "torch", ".", "double", ")", "\n", "", "else", ":", "\n", "            ", "device_data", "[", "k", "]", "=", "t", ".", "to", "(", "dtype", "=", "torch", ".", "double", ")", "\n", "\n", "", "", "def", "_all_reduce_dict", "(", "data", ":", "OrderedDict", ")", ":", "\n", "        ", "if", "len", "(", "data", ")", "==", "0", ":", "\n", "            ", "return", "data", "\n", "", "buf", "=", "torch", ".", "stack", "(", "list", "(", "data", ".", "values", "(", ")", ")", ")", ".", "to", "(", "device", "=", "device", ")", "\n", "all_reduce", "(", "buf", ",", "group", "=", "group", ")", "\n", "return", "{", "k", ":", "buf", "[", "i", "]", "for", "i", ",", "k", "in", "enumerate", "(", "data", ")", "}", "\n", "\n", "", "cpu_data", "=", "_all_reduce_dict", "(", "cpu_data", ")", "\n", "device_data", "=", "_all_reduce_dict", "(", "device_data", ")", "\n", "\n", "def", "get_from_stack", "(", "key", ")", ":", "\n", "        ", "if", "key", "in", "cpu_data", ":", "\n", "            ", "return", "cpu_data", "[", "key", "]", "\n", "", "elif", "key", "in", "device_data", ":", "\n", "            ", "return", "device_data", "[", "key", "]", "\n", "", "raise", "KeyError", "\n", "\n", "", "return", "OrderedDict", "(", "[", "(", "key", ",", "get_from_stack", "(", "key", ")", ")", "for", "key", "in", "data_keys", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.legacy_distributed_data_parallel.LegacyDistributedDataParallel.__init__": [[44, 68], ["torch.nn.Module.__init__", "min", "legacy_distributed_data_parallel.LegacyDistributedDataParallel._register_grad_hook", "sum", "p.numel", "module.parameters"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.legacy_distributed_data_parallel.LegacyDistributedDataParallel._register_grad_hook"], ["def", "__init__", "(", "self", ",", "module", ",", "world_size", ",", "process_group", "=", "None", ",", "buffer_size", "=", "2", "**", "28", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "module", "=", "module", "\n", "self", ".", "world_size", "=", "world_size", "\n", "self", ".", "process_group", "=", "process_group", "\n", "\n", "# Never use a bigger buffer than the number of model params", "\n", "self", ".", "buffer_size", "=", "min", "(", "buffer_size", ",", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "module", ".", "parameters", "(", ")", ")", ")", "\n", "self", ".", "buffer", "=", "None", "\n", "\n", "# Flag used by the NCCL backend to make sure we only reduce gradients", "\n", "# one time in the execution engine", "\n", "self", ".", "need_reduction", "=", "False", "\n", "\n", "# We can also forcibly accumulate grads locally and only do the", "\n", "# all-reduce at some later time", "\n", "self", ".", "accumulate_grads", "=", "False", "\n", "\n", "# For NCCL backend, since every single NCCL call is asynchoronous, we", "\n", "# therefore directly enqueue all the NCCL reduction calls to the", "\n", "# default CUDA stream without spawning up other reduction threads.", "\n", "# This achieves the best performance.", "\n", "self", ".", "_register_grad_hook", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.legacy_distributed_data_parallel.LegacyDistributedDataParallel.__getstate__": [[69, 72], ["copy.copy"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.copy"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "attrs", "=", "copy", ".", "copy", "(", "self", ".", "__dict__", ")", "\n", "return", "attrs", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.legacy_distributed_data_parallel.LegacyDistributedDataParallel.__setstate__": [[73, 76], ["super().__setstate__", "legacy_distributed_data_parallel.LegacyDistributedDataParallel._register_grad_hook"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.plasma_utils.PlasmaArray.__setstate__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.legacy_distributed_data_parallel.LegacyDistributedDataParallel._register_grad_hook"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "super", "(", ")", ".", "__setstate__", "(", "state", ")", "\n", "self", ".", "_register_grad_hook", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.legacy_distributed_data_parallel.LegacyDistributedDataParallel.no_sync": [[77, 84], ["None"], "methods", ["None"], ["", "@", "contextmanager", "\n", "def", "no_sync", "(", "self", ")", ":", "\n", "        ", "\"\"\"A context manager to disable gradient synchronization.\"\"\"", "\n", "old_accumulate_grads", "=", "self", ".", "accumulate_grads", "\n", "self", ".", "accumulate_grads", "=", "True", "\n", "yield", "\n", "self", ".", "accumulate_grads", "=", "old_accumulate_grads", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.legacy_distributed_data_parallel.LegacyDistributedDataParallel.forward": [[85, 87], ["legacy_distributed_data_parallel.LegacyDistributedDataParallel.module"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "module", "(", "*", "inputs", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.legacy_distributed_data_parallel.LegacyDistributedDataParallel._register_grad_hook": [[88, 181], ["legacy_distributed_data_parallel.LegacyDistributedDataParallel.module.parameters", "distributed_utils.all_reduce", "legacy_distributed_data_parallel.LegacyDistributedDataParallel.module.parameters", "len", "torch.zeros_like.div_", "p.numel", "next().new", "param.numel", "len", "legacy_distributed_data_parallel.LegacyDistributedDataParallel._register_grad_hook.all_reduce"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.distributed_utils.all_reduce", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.distributed_utils.all_reduce"], ["", "def", "_register_grad_hook", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        This function registers the callback all-reduction function for the\n        NCCL backend. All gradients will be all reduced in one single step.\n        The NCCL reduction will directly be enqueued into the default CUDA\n        stream. Therefore, no synchronization is needed.\n        \"\"\"", "\n", "\n", "def", "all_reduce", "(", "params", ")", ":", "\n", "            ", "buffer", "=", "self", ".", "buffer", "\n", "nonzero_buffer", "=", "False", "\n", "if", "len", "(", "params", ")", ">", "1", ":", "\n", "                ", "offset", "=", "0", "\n", "for", "p", "in", "params", ":", "\n", "                    ", "sz", "=", "p", ".", "numel", "(", ")", "\n", "if", "p", ".", "grad", "is", "not", "None", ":", "\n", "                        ", "buffer", "[", "offset", ":", "offset", "+", "sz", "]", ".", "copy_", "(", "p", ".", "grad", ".", "data", ".", "view", "(", "-", "1", ")", ")", "\n", "nonzero_buffer", "=", "True", "\n", "", "else", ":", "\n", "                        ", "buffer", "[", "offset", ":", "offset", "+", "sz", "]", ".", "zero_", "(", ")", "\n", "", "offset", "+=", "sz", "\n", "", "", "else", ":", "\n", "# we only have a single grad to all-reduce", "\n", "                ", "p", "=", "params", "[", "0", "]", "\n", "if", "p", ".", "grad", "is", "not", "None", ":", "\n", "                    ", "buffer", "=", "p", ".", "grad", ".", "data", "\n", "nonzero_buffer", "=", "True", "\n", "", "elif", "p", ".", "numel", "(", ")", "<=", "self", ".", "buffer", ".", "numel", "(", ")", ":", "\n", "                    ", "buffer", "=", "buffer", "[", ":", "p", ".", "numel", "(", ")", "]", "\n", "buffer", ".", "zero_", "(", ")", "\n", "", "else", ":", "\n", "                    ", "buffer", "=", "torch", ".", "zeros_like", "(", "p", ")", "\n", "\n", "", "", "if", "nonzero_buffer", ":", "\n", "                ", "buffer", ".", "div_", "(", "self", ".", "world_size", ")", "\n", "\n", "", "distributed_utils", ".", "all_reduce", "(", "buffer", ",", "self", ".", "process_group", ")", "\n", "\n", "# copy all-reduced grads back into their original place", "\n", "offset", "=", "0", "\n", "for", "p", "in", "params", ":", "\n", "                ", "sz", "=", "p", ".", "numel", "(", ")", "\n", "if", "p", ".", "grad", "is", "not", "None", ":", "\n", "                    ", "p", ".", "grad", ".", "data", ".", "copy_", "(", "buffer", "[", "offset", ":", "offset", "+", "sz", "]", ".", "view_as", "(", "p", ")", ")", "\n", "", "else", ":", "\n", "                    ", "p", ".", "grad", "=", "buffer", "[", "offset", ":", "offset", "+", "sz", "]", ".", "view_as", "(", "p", ")", ".", "clone", "(", ")", "\n", "", "offset", "+=", "sz", "\n", "\n", "", "", "def", "reduction_fn", "(", ")", ":", "\n", "# This function only needs to be called once", "\n", "            ", "if", "not", "self", ".", "need_reduction", "or", "self", ".", "accumulate_grads", ":", "\n", "                ", "return", "\n", "", "self", ".", "need_reduction", "=", "False", "\n", "\n", "if", "self", ".", "buffer", "is", "None", ":", "\n", "                ", "self", ".", "buffer", "=", "next", "(", "self", ".", "module", ".", "parameters", "(", ")", ")", ".", "new", "(", "self", ".", "buffer_size", ")", "\n", "\n", "# All-reduce the gradients in buckets", "\n", "", "offset", "=", "0", "\n", "buffered_params", "=", "[", "]", "\n", "for", "param", "in", "self", ".", "module", ".", "parameters", "(", ")", ":", "\n", "                ", "if", "not", "param", ".", "requires_grad", ":", "\n", "                    ", "continue", "\n", "", "if", "param", ".", "grad", "is", "None", ":", "\n", "                    ", "param", ".", "grad", "=", "torch", ".", "zeros_like", "(", "param", ")", "\n", "", "if", "param", ".", "grad", ".", "requires_grad", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\"DistributedDataParallel only works \"", "\n", "\"with gradients that don't require \"", "\n", "\"grad\"", ")", "\n", "", "sz", "=", "param", ".", "numel", "(", ")", "\n", "if", "sz", ">", "self", ".", "buffer", ".", "numel", "(", ")", ":", "\n", "# all-reduce big params directly", "\n", "                    ", "all_reduce", "(", "[", "param", "]", ")", "\n", "", "else", ":", "\n", "                    ", "if", "offset", "+", "sz", ">", "self", ".", "buffer", ".", "numel", "(", ")", ":", "\n", "                        ", "all_reduce", "(", "buffered_params", ")", "\n", "offset", "=", "0", "\n", "buffered_params", ".", "clear", "(", ")", "\n", "", "buffered_params", ".", "append", "(", "param", ")", "\n", "offset", "+=", "sz", "\n", "\n", "", "", "if", "len", "(", "buffered_params", ")", ">", "0", ":", "\n", "                ", "all_reduce", "(", "buffered_params", ")", "\n", "\n", "# Now register the reduction hook on the parameters", "\n", "", "", "for", "p", "in", "self", ".", "module", ".", "parameters", "(", ")", ":", "\n", "\n", "            ", "def", "allreduce_hook", "(", "*", "unused", ")", ":", "\n", "                ", "self", ".", "need_reduction", "=", "True", "\n", "Variable", ".", "_execution_engine", ".", "queue_callback", "(", "reduction_fn", ")", "\n", "\n", "", "if", "p", ".", "requires_grad", ":", "\n", "                ", "p", ".", "register_hook", "(", "allreduce_hook", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.progress_bar.__init__": [[68, 77], ["getattr"], "methods", ["None"], ["", "return", "stat", "\n", "\n", "\n", "", "class", "progress_bar", "(", "object", ")", ":", "\n", "    ", "\"\"\"Abstract class for progress bars.\"\"\"", "\n", "def", "__init__", "(", "self", ",", "iterable", ",", "epoch", "=", "None", ",", "prefix", "=", "None", ")", ":", "\n", "        ", "self", ".", "iterable", "=", "iterable", "\n", "self", ".", "offset", "=", "getattr", "(", "iterable", ",", "'offset'", ",", "0", ")", "\n", "self", ".", "epoch", "=", "epoch", "\n", "self", ".", "prefix", "=", "''", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.progress_bar.__len__": [[78, 80], ["len"], "methods", ["None"], ["if", "epoch", "is", "not", "None", ":", "\n", "            ", "self", ".", "prefix", "+=", "'epoch {:03d}'", ".", "format", "(", "epoch", ")", "\n", "", "if", "prefix", "is", "not", "None", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.progress_bar.__enter__": [[81, 83], ["None"], "methods", ["None"], ["            ", "self", ".", "prefix", "+=", "' | {}'", ".", "format", "(", "prefix", ")", "\n", "\n", "", "", "def", "__len__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.progress_bar.__exit__": [[84, 86], ["None"], "methods", ["None"], ["        ", "return", "len", "(", "self", ".", "iterable", ")", "\n", "\n", "", "def", "__enter__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.progress_bar.__iter__": [[87, 89], ["None"], "methods", ["None"], ["        ", "return", "self", "\n", "\n", "", "def", "__exit__", "(", "self", ",", "*", "exc", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.progress_bar.log": [[90, 93], ["None"], "methods", ["None"], ["        ", "return", "False", "\n", "\n", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.progress_bar.print": [[94, 97], ["None"], "methods", ["None"], ["\n", "", "def", "log", "(", "self", ",", "stats", ",", "tag", "=", "None", ",", "step", "=", "None", ")", ":", "\n", "        ", "\"\"\"Log intermediate stats according to log_interval.\"\"\"", "\n", "raise", "NotImplementedError", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.progress_bar._str_commas": [[98, 101], ["stats[].strip", "stats.keys"], "methods", ["None"], ["\n", "", "def", "print", "(", "self", ",", "stats", ",", "tag", "=", "None", ",", "step", "=", "None", ")", ":", "\n", "        ", "\"\"\"Print end-of-epoch stats.\"\"\"", "\n", "raise", "NotImplementedError", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.progress_bar._str_pipes": [[102, 105], ["stats[].strip", "stats.keys"], "methods", ["None"], ["\n", "", "def", "_str_commas", "(", "self", ",", "stats", ")", ":", "\n", "        ", "return", "', '", ".", "join", "(", "key", "+", "'='", "+", "stats", "[", "key", "]", ".", "strip", "(", ")", "\n", "for", "key", "in", "stats", ".", "keys", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.progress_bar._format_stats": [[106, 112], ["collections.OrderedDict", "collections.OrderedDict.keys", "str", "progress_bar.format_stat"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.format_stat"], ["\n", "", "def", "_str_pipes", "(", "self", ",", "stats", ")", ":", "\n", "        ", "return", "' | '", ".", "join", "(", "key", "+", "' '", "+", "stats", "[", "key", "]", ".", "strip", "(", ")", "\n", "for", "key", "in", "stats", ".", "keys", "(", ")", ")", "\n", "\n", "", "def", "_format_stats", "(", "self", ",", "stats", ")", ":", "\n", "        ", "postfix", "=", "OrderedDict", "(", "stats", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.json_progress_bar.__init__": [[117, 121], ["progress_bar.progress_bar.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["\n", "\n", "", "", "@", "contextmanager", "\n", "def", "rename_logger", "(", "logger", ",", "new_name", ")", ":", "\n", "    ", "old_name", "=", "logger", ".", "name", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.json_progress_bar.__iter__": [[122, 139], ["float", "enumerate", "len", "progress_bar.json_progress_bar._format_stats", "progress_bar.json_progress_bar.print"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.json_progress_bar._format_stats", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], ["if", "new_name", "is", "not", "None", ":", "\n", "        ", "logger", ".", "name", "=", "new_name", "\n", "", "yield", "logger", "\n", "logger", ".", "name", "=", "old_name", "\n", "\n", "\n", "", "class", "json_progress_bar", "(", "progress_bar", ")", ":", "\n", "    ", "\"\"\"Log output in JSON format.\"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "iterable", ",", "epoch", "=", "None", ",", "prefix", "=", "None", ",", "log_interval", "=", "1000", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "iterable", ",", "epoch", ",", "prefix", ")", "\n", "self", ".", "log_interval", "=", "log_interval", "\n", "self", ".", "stats", "=", "None", "\n", "self", ".", "tag", "=", "None", "\n", "\n", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "size", "=", "float", "(", "len", "(", "self", ".", "iterable", ")", ")", "\n", "for", "i", ",", "obj", "in", "enumerate", "(", "self", ".", "iterable", ",", "start", "=", "self", ".", "offset", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.json_progress_bar.log": [[140, 143], ["None"], "methods", ["None"], ["            ", "yield", "obj", "\n", "if", "(", "\n", "self", ".", "stats", "is", "not", "None", "\n", "and", "i", ">", "0", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.json_progress_bar.print": [[144, 151], ["progress_bar.json_progress_bar._format_stats", "progress_bar.json_progress_bar.print"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.json_progress_bar._format_stats", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], ["and", "self", ".", "log_interval", "is", "not", "None", "\n", "and", "(", "i", "+", "1", ")", "%", "self", ".", "log_interval", "==", "0", "\n", ")", ":", "\n", "                ", "update", "=", "(", "\n", "self", ".", "epoch", "-", "1", "+", "float", "(", "i", "/", "size", ")", "\n", "if", "self", ".", "epoch", "is", "not", "None", "\n", "else", "None", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.json_progress_bar._format_stats": [[152, 162], ["collections.OrderedDict", "stats.keys", "round", "progress_bar.format_stat"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.format_stat"], ["stats", "=", "self", ".", "_format_stats", "(", "self", ".", "stats", ",", "epoch", "=", "self", ".", "epoch", ",", "update", "=", "update", ")", "\n", "with", "rename_logger", "(", "logger", ",", "self", ".", "tag", ")", ":", "\n", "                    ", "logger", ".", "info", "(", "json", ".", "dumps", "(", "stats", ")", ")", "\n", "\n", "", "", "", "", "def", "log", "(", "self", ",", "stats", ",", "tag", "=", "None", ",", "step", "=", "None", ")", ":", "\n", "        ", "\"\"\"Log intermediate stats according to log_interval.\"\"\"", "\n", "self", ".", "stats", "=", "stats", "\n", "self", ".", "tag", "=", "tag", "\n", "\n", "", "def", "print", "(", "self", ",", "stats", ",", "tag", "=", "None", ",", "step", "=", "None", ")", ":", "\n", "        ", "\"\"\"Print end-of-epoch stats.\"\"\"", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.noop_progress_bar.__init__": [[167, 169], ["progress_bar.progress_bar.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["with", "rename_logger", "(", "logger", ",", "tag", ")", ":", "\n", "            ", "logger", ".", "info", "(", "json", ".", "dumps", "(", "stats", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.noop_progress_bar.__iter__": [[170, 173], ["None"], "methods", ["None"], ["", "", "def", "_format_stats", "(", "self", ",", "stats", ",", "epoch", "=", "None", ",", "update", "=", "None", ")", ":", "\n", "        ", "postfix", "=", "OrderedDict", "(", ")", "\n", "if", "epoch", "is", "not", "None", ":", "\n", "            ", "postfix", "[", "'epoch'", "]", "=", "epoch", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.noop_progress_bar.log": [[174, 177], ["None"], "methods", ["None"], ["", "if", "update", "is", "not", "None", ":", "\n", "            ", "postfix", "[", "'update'", "]", "=", "round", "(", "update", ",", "3", ")", "\n", "# Preprocess stats according to datatype", "\n", "", "for", "key", "in", "stats", ".", "keys", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.noop_progress_bar.print": [[178, 181], ["None"], "methods", ["None"], ["            ", "postfix", "[", "key", "]", "=", "format_stat", "(", "stats", "[", "key", "]", ")", "\n", "", "return", "postfix", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.simple_progress_bar.__init__": [[186, 190], ["progress_bar.progress_bar.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["        ", "super", "(", ")", ".", "__init__", "(", "iterable", ",", "epoch", ",", "prefix", ")", "\n", "\n", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "obj", "in", "self", ".", "iterable", ":", "\n", "            ", "yield", "obj", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.simple_progress_bar.__iter__": [[191, 204], ["len", "enumerate", "progress_bar.simple_progress_bar._str_commas", "progress_bar.simple_progress_bar.print"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.progress_bar._str_commas", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], ["\n", "", "", "def", "log", "(", "self", ",", "stats", ",", "tag", "=", "None", ",", "step", "=", "None", ")", ":", "\n", "        ", "\"\"\"Log intermediate stats according to log_interval.\"\"\"", "\n", "pass", "\n", "\n", "", "def", "print", "(", "self", ",", "stats", ",", "tag", "=", "None", ",", "step", "=", "None", ")", ":", "\n", "        ", "\"\"\"Print end-of-epoch stats.\"\"\"", "\n", "pass", "\n", "\n", "\n", "", "", "class", "simple_progress_bar", "(", "progress_bar", ")", ":", "\n", "    ", "\"\"\"A minimal logger for non-TTY environments.\"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "iterable", ",", "epoch", "=", "None", ",", "prefix", "=", "None", ",", "log_interval", "=", "1000", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.simple_progress_bar.log": [[205, 208], ["progress_bar.simple_progress_bar._format_stats"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.json_progress_bar._format_stats"], ["        ", "super", "(", ")", ".", "__init__", "(", "iterable", ",", "epoch", ",", "prefix", ")", "\n", "self", ".", "log_interval", "=", "log_interval", "\n", "self", ".", "stats", "=", "None", "\n", "self", ".", "tag", "=", "None", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.simple_progress_bar.print": [[209, 213], ["progress_bar.simple_progress_bar._str_pipes", "progress_bar.simple_progress_bar.print"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.progress_bar._str_pipes", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], ["\n", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "size", "=", "len", "(", "self", ".", "iterable", ")", "\n", "for", "i", ",", "obj", "in", "enumerate", "(", "self", ".", "iterable", ",", "start", "=", "self", ".", "offset", ")", ":", "\n", "            ", "yield", "obj", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tqdm_progress_bar.__init__": [[218, 222], ["progress_bar.progress_bar.__init__", "tqdm"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["and", "(", "i", "+", "1", ")", "%", "self", ".", "log_interval", "==", "0", "\n", ")", ":", "\n", "                ", "postfix", "=", "self", ".", "_str_commas", "(", "self", ".", "stats", ")", "\n", "with", "rename_logger", "(", "logger", ",", "self", ".", "tag", ")", ":", "\n", "                    ", "logger", ".", "info", "(", "'{}:  {:5d} / {:d} {}'", ".", "format", "(", "self", ".", "prefix", ",", "i", ",", "size", ",", "postfix", ")", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tqdm_progress_bar.__iter__": [[223, 225], ["iter"], "methods", ["None"], ["\n", "", "", "", "", "def", "log", "(", "self", ",", "stats", ",", "tag", "=", "None", ",", "step", "=", "None", ")", ":", "\n", "        ", "\"\"\"Log intermediate stats according to log_interval.\"\"\"", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tqdm_progress_bar.log": [[226, 229], ["progress_bar.tqdm_progress_bar.tqdm.set_postfix", "progress_bar.tqdm_progress_bar._format_stats"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.json_progress_bar._format_stats"], ["self", ".", "stats", "=", "self", ".", "_format_stats", "(", "stats", ")", "\n", "self", ".", "tag", "=", "tag", "\n", "\n", "", "def", "print", "(", "self", ",", "stats", ",", "tag", "=", "None", ",", "step", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tqdm_progress_bar.print": [[230, 234], ["progress_bar.tqdm_progress_bar._str_pipes", "progress_bar.tqdm_progress_bar.tqdm.write", "progress_bar.tqdm_progress_bar._format_stats"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.progress_bar._str_pipes", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.json_progress_bar._format_stats"], ["        ", "\"\"\"Print end-of-epoch stats.\"\"\"", "\n", "postfix", "=", "self", ".", "_str_pipes", "(", "self", ".", "_format_stats", "(", "stats", ")", ")", "\n", "with", "rename_logger", "(", "logger", ",", "tag", ")", ":", "\n", "            ", "logger", ".", "info", "(", "'{} | {}'", ".", "format", "(", "self", ".", "prefix", ",", "postfix", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.__init__": [[239, 252], ["progress_bar.tensorboard_log_wrapper.print"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], ["def", "__init__", "(", "self", ",", "iterable", ",", "epoch", "=", "None", ",", "prefix", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "iterable", ",", "epoch", ",", "prefix", ")", "\n", "from", "tqdm", "import", "tqdm", "\n", "self", ".", "tqdm", "=", "tqdm", "(", "iterable", ",", "self", ".", "prefix", ",", "leave", "=", "False", ")", "\n", "\n", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "tqdm", ")", "\n", "\n", "", "def", "log", "(", "self", ",", "stats", ",", "tag", "=", "None", ",", "step", "=", "None", ")", ":", "\n", "        ", "\"\"\"Log intermediate stats according to log_interval.\"\"\"", "\n", "self", ".", "tqdm", ".", "set_postfix", "(", "self", ".", "_format_stats", "(", "stats", ")", ",", "refresh", "=", "False", ")", "\n", "\n", "", "def", "print", "(", "self", ",", "stats", ",", "tag", "=", "None", ",", "step", "=", "None", ")", ":", "\n", "        ", "\"\"\"Print end-of-epoch stats.\"\"\"", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper._writer": [[253, 263], ["progress_bar.tensorboard_log_wrapper.SummaryWriter", "progress_bar.tensorboard_log_wrapper._writers[].add_text", "progress_bar.tensorboard_log_wrapper._writers[].add_text", "os.path.join", "str", "vars"], "methods", ["None"], ["postfix", "=", "self", ".", "_str_pipes", "(", "self", ".", "_format_stats", "(", "stats", ")", ")", "\n", "self", ".", "tqdm", ".", "write", "(", "'{} | {}'", ".", "format", "(", "self", ".", "tqdm", ".", "desc", ",", "postfix", ")", ")", "\n", "\n", "\n", "", "", "class", "tensorboard_log_wrapper", "(", "progress_bar", ")", ":", "\n", "    ", "\"\"\"Log to tensorboard.\"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "wrapped_bar", ",", "tensorboard_logdir", ",", "args", ")", ":", "\n", "        ", "self", ".", "wrapped_bar", "=", "wrapped_bar", "\n", "self", ".", "tensorboard_logdir", "=", "tensorboard_logdir", "\n", "self", ".", "args", "=", "args", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.__iter__": [[264, 266], ["iter"], "methods", ["None"], ["\n", "try", ":", "\n", "            ", "from", "tensorboardX", "import", "SummaryWriter", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log": [[267, 271], ["progress_bar.tensorboard_log_wrapper._log_to_tensorboard", "progress_bar.tensorboard_log_wrapper.wrapped_bar.log"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper._log_to_tensorboard", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log"], ["self", ".", "SummaryWriter", "=", "SummaryWriter", "\n", "self", ".", "_writers", "=", "{", "}", "\n", "", "except", "ImportError", ":", "\n", "            ", "logger", ".", "warning", "(", "\n", "\"tensorboard or required dependencies not found, \"", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print": [[272, 276], ["progress_bar.tensorboard_log_wrapper._log_to_tensorboard", "progress_bar.tensorboard_log_wrapper.wrapped_bar.print"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper._log_to_tensorboard", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], ["\"please see README for using tensorboard. (e.g. pip install tensorboardX)\"", "\n", ")", "\n", "self", ".", "SummaryWriter", "=", "None", "\n", "\n", "", "", "def", "_writer", "(", "self", ",", "key", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.__exit__": [[277, 281], ["getattr().values", "writer.close", "getattr"], "methods", ["None"], ["        ", "if", "self", ".", "SummaryWriter", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "if", "key", "not", "in", "self", ".", "_writers", ":", "\n", "            ", "self", ".", "_writers", "[", "key", "]", "=", "self", ".", "SummaryWriter", "(", "\n", "os", ".", "path", ".", "join", "(", "self", ".", "tensorboard_logdir", ",", "key", ")", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper._log_to_tensorboard": [[282, 293], ["progress_bar.tensorboard_log_wrapper._writer", "stats.keys", "isinstance", "progress_bar.tensorboard_log_wrapper.add_scalar", "isinstance", "progress_bar.tensorboard_log_wrapper.add_scalar"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper._writer"], [")", "\n", "self", ".", "_writers", "[", "key", "]", ".", "add_text", "(", "'args'", ",", "str", "(", "vars", "(", "self", ".", "args", ")", ")", ")", "\n", "self", ".", "_writers", "[", "key", "]", ".", "add_text", "(", "'sys.argv'", ",", "\" \"", ".", "join", "(", "sys", ".", "argv", ")", ")", "\n", "", "return", "self", ".", "_writers", "[", "key", "]", "\n", "\n", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "iter", "(", "self", ".", "wrapped_bar", ")", "\n", "\n", "", "def", "log", "(", "self", ",", "stats", ",", "tag", "=", "None", ",", "step", "=", "None", ")", ":", "\n", "        ", "\"\"\"Log intermediate stats to tensorboard.\"\"\"", "\n", "self", ".", "_log_to_tensorboard", "(", "stats", ",", "tag", ",", "step", ")", "\n", "self", ".", "wrapped_bar", ".", "log", "(", "stats", ",", "tag", "=", "tag", ",", "step", "=", "step", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.build_progress_bar": [[22, 50], ["progress_bar.json_progress_bar", "fairseq.distributed_utils.is_master", "sys.stderr.isatty", "progress_bar.noop_progress_bar", "fb_tbmf_wrapper", "progress_bar.simple_progress_bar", "progress_bar.tensorboard_log_wrapper", "progress_bar.tqdm_progress_bar", "ValueError"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.distributed_utils.is_master"], ["\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "\n", "def", "build_progress_bar", "(", "args", ",", "iterator", ",", "epoch", "=", "None", ",", "prefix", "=", "None", ",", "default", "=", "'tqdm'", ",", "no_progress_bar", "=", "'none'", ")", ":", "\n", "    ", "if", "args", ".", "log_format", "is", "None", ":", "\n", "        ", "args", ".", "log_format", "=", "no_progress_bar", "if", "args", ".", "no_progress_bar", "else", "default", "\n", "\n", "", "if", "args", ".", "log_format", "==", "'tqdm'", "and", "not", "sys", ".", "stderr", ".", "isatty", "(", ")", ":", "\n", "        ", "args", ".", "log_format", "=", "'simple'", "\n", "\n", "", "if", "args", ".", "log_format", "==", "'json'", ":", "\n", "        ", "bar", "=", "json_progress_bar", "(", "iterator", ",", "epoch", ",", "prefix", ",", "args", ".", "log_interval", ")", "\n", "", "elif", "args", ".", "log_format", "==", "'none'", ":", "\n", "        ", "bar", "=", "noop_progress_bar", "(", "iterator", ",", "epoch", ",", "prefix", ")", "\n", "", "elif", "args", ".", "log_format", "==", "'simple'", ":", "\n", "        ", "bar", "=", "simple_progress_bar", "(", "iterator", ",", "epoch", ",", "prefix", ",", "args", ".", "log_interval", ")", "\n", "", "elif", "args", ".", "log_format", "==", "'tqdm'", ":", "\n", "        ", "bar", "=", "tqdm_progress_bar", "(", "iterator", ",", "epoch", ",", "prefix", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown log format: {}'", ".", "format", "(", "args", ".", "log_format", ")", ")", "\n", "\n", "", "if", "args", ".", "tensorboard_logdir", "and", "distributed_utils", ".", "is_master", "(", "args", ")", ":", "\n", "        ", "try", ":", "\n", "# [FB only] custom wrapper for TensorBoard", "\n", "            ", "import", "palaas", "# noqa", "\n", "from", "fairseq", ".", "fb_tbmf_wrapper", "import", "fb_tbmf_wrapper", "\n", "bar", "=", "fb_tbmf_wrapper", "(", "bar", ",", "args", ",", "args", ".", "log_interval", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.format_stat": [[52, 64], ["isinstance", "isinstance", "isinstance", "isinstance", "round", "torch.is_tensor", "round", "stat.tolist.tolist"], "function", ["None"], ["            ", "bar", "=", "tensorboard_log_wrapper", "(", "bar", ",", "args", ".", "tensorboard_logdir", ",", "args", ")", "\n", "\n", "", "", "return", "bar", "\n", "\n", "\n", "", "def", "format_stat", "(", "stat", ")", ":", "\n", "    ", "if", "isinstance", "(", "stat", ",", "Number", ")", ":", "\n", "        ", "stat", "=", "'{:g}'", ".", "format", "(", "stat", ")", "\n", "", "elif", "isinstance", "(", "stat", ",", "AverageMeter", ")", ":", "\n", "        ", "stat", "=", "'{:.3f}'", ".", "format", "(", "stat", ".", "avg", ")", "\n", "", "elif", "isinstance", "(", "stat", ",", "TimeMeter", ")", ":", "\n", "        ", "stat", "=", "'{:g}'", ".", "format", "(", "round", "(", "stat", ".", "avg", ")", ")", "\n", "", "elif", "isinstance", "(", "stat", ",", "StopwatchMeter", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.rename_logger": [[119, 126], ["None"], "function", ["None"], ["", "", "@", "contextmanager", "\n", "def", "rename_logger", "(", "logger", ",", "new_name", ")", ":", "\n", "    ", "old_name", "=", "logger", ".", "name", "\n", "if", "new_name", "is", "not", "None", ":", "\n", "        ", "logger", ".", "name", "=", "new_name", "\n", "", "yield", "logger", "\n", "logger", ".", "name", "=", "old_name", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.hub_utils.GeneratorHubInterface.__init__": [[85, 116], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "fairseq.utils.load_align_dict", "fairseq.data.encoders.build_tokenizer", "fairseq.data.encoders.build_bpe", "fairseq.utils.resolve_max_positions", "hub_utils.GeneratorHubInterface.register_buffer", "model.make_generation_fast_", "getattr", "hub_utils.GeneratorHubInterface.task.max_positions", "torch.tensor", "getattr", "model.max_positions", "getattr", "getattr"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.load_align_dict", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.resolve_max_positions", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.TransformerDecoderLayer.make_generation_fast_", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.max_positions", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.max_positions"], ["\n", "\n", "def", "__init__", "(", "self", ",", "args", ",", "task", ",", "models", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "task", "=", "task", "\n", "self", ".", "models", "=", "nn", ".", "ModuleList", "(", "models", ")", "\n", "self", ".", "src_dict", "=", "task", ".", "source_dictionary", "\n", "self", ".", "tgt_dict", "=", "task", ".", "target_dictionary", "\n", "\n", "# optimize model for generation", "\n", "for", "model", "in", "self", ".", "models", ":", "\n", "            ", "model", ".", "make_generation_fast_", "(", "\n", "beamable_mm_beam_size", "=", "(", "\n", "None", "if", "getattr", "(", "args", ",", "'no_beamable_mm'", ",", "False", ")", "\n", "else", "getattr", "(", "args", ",", "'beam'", ",", "5", ")", "\n", ")", ",", "\n", "need_attn", "=", "getattr", "(", "args", ",", "'print_alignment'", ",", "False", ")", ",", "\n", ")", "\n", "\n", "# Load alignment dictionary for unknown word replacement", "\n", "# (None if no unknown word replacement, empty if no path to align dictionary)", "\n", "", "self", ".", "align_dict", "=", "utils", ".", "load_align_dict", "(", "getattr", "(", "args", ",", "'replace_unk'", ",", "None", ")", ")", "\n", "\n", "self", ".", "tokenizer", "=", "encoders", ".", "build_tokenizer", "(", "args", ")", "\n", "self", ".", "bpe", "=", "encoders", ".", "build_bpe", "(", "args", ")", "\n", "\n", "self", ".", "max_positions", "=", "utils", ".", "resolve_max_positions", "(", "\n", "self", ".", "task", ".", "max_positions", "(", ")", ",", "*", "[", "model", ".", "max_positions", "(", ")", "for", "model", "in", "models", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.hub_utils.GeneratorHubInterface.device": [[117, 120], ["None"], "methods", ["None"], ["\n", "# this is useful for determining the device", "\n", "self", ".", "register_buffer", "(", "'_float_tensor'", ",", "torch", ".", "tensor", "(", "[", "0", "]", ",", "dtype", "=", "torch", ".", "float", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.hub_utils.GeneratorHubInterface.translate": [[121, 123], ["hub_utils.GeneratorHubInterface.sample"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.hub_interface.BARTHubInterface.sample"], ["", "@", "property", "\n", "def", "device", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_float_tensor", ".", "device", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.hub_utils.GeneratorHubInterface.sample": [[124, 130], ["isinstance", "hub_utils.GeneratorHubInterface.generate", "hub_utils.GeneratorHubInterface.encode", "hub_utils.GeneratorHubInterface.decode", "hub_utils.GeneratorHubInterface.sample"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.hub_interface.BARTHubInterface.generate", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.encode", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.decode", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.hub_interface.BARTHubInterface.sample"], ["\n", "", "def", "translate", "(", "self", ",", "sentences", ":", "List", "[", "str", "]", ",", "beam", ":", "int", "=", "5", ",", "verbose", ":", "bool", "=", "False", ",", "**", "kwargs", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "return", "self", ".", "sample", "(", "sentences", ",", "beam", ",", "verbose", ",", "**", "kwargs", ")", "\n", "\n", "", "def", "sample", "(", "self", ",", "sentences", ":", "List", "[", "str", "]", ",", "beam", ":", "int", "=", "1", ",", "verbose", ":", "bool", "=", "False", ",", "**", "kwargs", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "if", "isinstance", "(", "sentences", ",", "str", ")", ":", "\n", "            ", "return", "self", ".", "sample", "(", "[", "sentences", "]", ",", "beam", "=", "beam", ",", "verbose", "=", "verbose", ",", "**", "kwargs", ")", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.hub_utils.GeneratorHubInterface.score": [[131, 137], ["isinstance", "hub_utils.GeneratorHubInterface.encode", "hub_utils.GeneratorHubInterface.score", "hub_utils.GeneratorHubInterface.generate"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.encode", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.bleu.Scorer.score", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.hub_interface.BARTHubInterface.generate"], ["", "tokenized_sentences", "=", "[", "self", ".", "encode", "(", "sentence", ")", "for", "sentence", "in", "sentences", "]", "\n", "batched_hypos", "=", "self", ".", "generate", "(", "tokenized_sentences", ",", "beam", ",", "verbose", ",", "**", "kwargs", ")", "\n", "return", "[", "self", ".", "decode", "(", "hypos", "[", "0", "]", "[", "'tokens'", "]", ")", "for", "hypos", "in", "batched_hypos", "]", "\n", "\n", "", "def", "score", "(", "self", ",", "sentences", ":", "List", "[", "str", "]", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "isinstance", "(", "sentences", ",", "str", ")", ":", "\n", "            ", "return", "self", ".", "score", "(", "[", "sentences", "]", ",", "**", "kwargs", ")", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.hub_utils.GeneratorHubInterface.generate": [[138, 187], ["copy.copy", "kwargs.items", "hub_utils.GeneratorHubInterface.task.build_generator", "hub_utils.GeneratorHubInterface._build_batches", "torch.is_tensor", "setattr", "fairseq.utils.apply_to_sample", "hub_utils.GeneratorHubInterface.task.inference_step", "zip", "zip", "tokenized_sentences.dim", "hub_utils.GeneratorHubInterface.generate", "batch[].tolist", "results.append", "sorted", "getattr", "hub_utils.GeneratorHubInterface.string", "print", "tokenized_sentences.unsqueeze", "t.to", "getattr", "hub_utils.GeneratorHubInterface.decode", "print", "print", "hub_utils.GeneratorHubInterface.generate.getarg"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.copy", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.fairseq_task.FairseqTask.build_generator", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.hub_utils.GeneratorHubInterface._build_batches", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.apply_to_sample", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.translation_moe.TranslationMoETask.inference_step", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.hub_interface.BARTHubInterface.generate", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.string", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.decode", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], ["# NOTE: this doesn't support translation tasks currently", "\n", "", "tokenized_sentences", "=", "[", "self", ".", "encode", "(", "sentence", ")", "for", "sentence", "in", "sentences", "]", "\n", "return", "[", "hypos", "[", "0", "]", "for", "hypos", "in", "self", ".", "generate", "(", "tokenized_sentences", ",", "score_reference", "=", "True", ",", "**", "kwargs", ")", "]", "\n", "\n", "", "def", "generate", "(", "\n", "self", ",", "\n", "tokenized_sentences", ":", "List", "[", "torch", ".", "LongTensor", "]", ",", "\n", "beam", ":", "int", "=", "5", ",", "\n", "verbose", ":", "bool", "=", "False", ",", "\n", "skip_invalid_size_inputs", "=", "False", ",", "\n", "**", "kwargs", "\n", ")", "->", "List", "[", "List", "[", "Dict", "[", "str", ",", "torch", ".", "Tensor", "]", "]", "]", ":", "\n", "        ", "if", "torch", ".", "is_tensor", "(", "tokenized_sentences", ")", "and", "tokenized_sentences", ".", "dim", "(", ")", "==", "1", ":", "\n", "            ", "return", "self", ".", "generate", "(", "\n", "tokenized_sentences", ".", "unsqueeze", "(", "0", ")", ",", "beam", "=", "beam", ",", "verbose", "=", "verbose", ",", "**", "kwargs", "\n", ")", "[", "0", "]", "\n", "\n", "# build generator using current args as well as any kwargs", "\n", "", "gen_args", "=", "copy", ".", "copy", "(", "self", ".", "args", ")", "\n", "gen_args", ".", "beam", "=", "beam", "\n", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "gen_args", ",", "k", ",", "v", ")", "\n", "", "generator", "=", "self", ".", "task", ".", "build_generator", "(", "gen_args", ")", "\n", "\n", "results", "=", "[", "]", "\n", "for", "batch", "in", "self", ".", "_build_batches", "(", "tokenized_sentences", ",", "skip_invalid_size_inputs", ")", ":", "\n", "            ", "batch", "=", "utils", ".", "apply_to_sample", "(", "lambda", "t", ":", "t", ".", "to", "(", "self", ".", "device", ")", ",", "batch", ")", "\n", "translations", "=", "self", ".", "task", ".", "inference_step", "(", "generator", ",", "self", ".", "models", ",", "batch", ")", "\n", "for", "id", ",", "hypos", "in", "zip", "(", "batch", "[", "\"id\"", "]", ".", "tolist", "(", ")", ",", "translations", ")", ":", "\n", "                ", "results", ".", "append", "(", "(", "id", ",", "hypos", ")", ")", "\n", "\n", "# sort output to match input order", "\n", "", "", "outputs", "=", "[", "hypos", "for", "_", ",", "hypos", "in", "sorted", "(", "results", ",", "key", "=", "lambda", "x", ":", "x", "[", "0", "]", ")", "]", "\n", "\n", "if", "verbose", ":", "\n", "\n", "            ", "def", "getarg", "(", "name", ",", "default", ")", ":", "\n", "                ", "return", "getattr", "(", "gen_args", ",", "name", ",", "getattr", "(", "self", ".", "args", ",", "name", ",", "default", ")", ")", "\n", "\n", "", "for", "source_tokens", ",", "target_hypotheses", "in", "zip", "(", "tokenized_sentences", ",", "outputs", ")", ":", "\n", "                ", "src_str_with_unk", "=", "self", ".", "string", "(", "source_tokens", ")", "\n", "logger", ".", "info", "(", "'S\\t{}'", ".", "format", "(", "src_str_with_unk", ")", ")", "\n", "for", "hypo", "in", "target_hypotheses", ":", "\n", "                    ", "hypo_str", "=", "self", ".", "decode", "(", "hypo", "[", "'tokens'", "]", ")", "\n", "logger", ".", "info", "(", "'H\\t{}\\t{}'", ".", "format", "(", "hypo", "[", "'score'", "]", ",", "hypo_str", ")", ")", "\n", "logger", ".", "info", "(", "'P\\t{}'", ".", "format", "(", "\n", "' '", ".", "join", "(", "map", "(", "lambda", "x", ":", "'{:.4f}'", ".", "format", "(", "x", ")", ",", "hypo", "[", "'positional_scores'", "]", ".", "tolist", "(", ")", ")", ")", "\n", ")", ")", "\n", "if", "hypo", "[", "'alignment'", "]", "is", "not", "None", "and", "getarg", "(", "'print_alignment'", ",", "False", ")", ":", "\n", "                        ", "logger", ".", "info", "(", "'A\\t{}'", ".", "format", "(", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.hub_utils.GeneratorHubInterface.encode": [[188, 192], ["hub_utils.GeneratorHubInterface.tokenize", "hub_utils.GeneratorHubInterface.apply_bpe", "hub_utils.GeneratorHubInterface.binarize"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.hub_utils.GeneratorHubInterface.tokenize", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.hub_utils.GeneratorHubInterface.apply_bpe", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_task.WSCTask.binarize"], ["' '", ".", "join", "(", "map", "(", "lambda", "x", ":", "str", "(", "utils", ".", "item", "(", "x", ")", ")", ",", "hypo", "[", "'alignment'", "]", ".", "int", "(", ")", ".", "cpu", "(", ")", ")", ")", "\n", ")", ")", "\n", "", "", "", "", "return", "outputs", "\n", "\n", "", "def", "encode", "(", "self", ",", "sentence", ":", "str", ")", "->", "torch", ".", "LongTensor", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.hub_utils.GeneratorHubInterface.decode": [[193, 197], ["hub_utils.GeneratorHubInterface.string", "hub_utils.GeneratorHubInterface.remove_bpe", "hub_utils.GeneratorHubInterface.detokenize"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.string", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.remove_bpe", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.hub_utils.GeneratorHubInterface.detokenize"], ["        ", "sentence", "=", "self", ".", "tokenize", "(", "sentence", ")", "\n", "sentence", "=", "self", ".", "apply_bpe", "(", "sentence", ")", "\n", "return", "self", ".", "binarize", "(", "sentence", ")", "\n", "\n", "", "def", "decode", "(", "self", ",", "tokens", ":", "torch", ".", "LongTensor", ")", "->", "str", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.hub_utils.GeneratorHubInterface.tokenize": [[198, 202], ["hub_utils.GeneratorHubInterface.tokenizer.encode"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.encode"], ["        ", "sentence", "=", "self", ".", "string", "(", "tokens", ")", "\n", "sentence", "=", "self", ".", "remove_bpe", "(", "sentence", ")", "\n", "return", "self", ".", "detokenize", "(", "sentence", ")", "\n", "\n", "", "def", "tokenize", "(", "self", ",", "sentence", ":", "str", ")", "->", "str", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.hub_utils.GeneratorHubInterface.detokenize": [[203, 207], ["hub_utils.GeneratorHubInterface.tokenizer.decode"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.decode"], ["        ", "if", "self", ".", "tokenizer", "is", "not", "None", ":", "\n", "            ", "sentence", "=", "self", ".", "tokenizer", ".", "encode", "(", "sentence", ")", "\n", "", "return", "sentence", "\n", "\n", "", "def", "detokenize", "(", "self", ",", "sentence", ":", "str", ")", "->", "str", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.hub_utils.GeneratorHubInterface.apply_bpe": [[208, 212], ["hub_utils.GeneratorHubInterface.bpe.encode"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.encode"], ["        ", "if", "self", ".", "tokenizer", "is", "not", "None", ":", "\n", "            ", "sentence", "=", "self", ".", "tokenizer", ".", "decode", "(", "sentence", ")", "\n", "", "return", "sentence", "\n", "\n", "", "def", "apply_bpe", "(", "self", ",", "sentence", ":", "str", ")", "->", "str", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.hub_utils.GeneratorHubInterface.remove_bpe": [[213, 217], ["hub_utils.GeneratorHubInterface.bpe.decode"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.decode"], ["        ", "if", "self", ".", "bpe", "is", "not", "None", ":", "\n", "            ", "sentence", "=", "self", ".", "bpe", ".", "encode", "(", "sentence", ")", "\n", "", "return", "sentence", "\n", "\n", "", "def", "remove_bpe", "(", "self", ",", "sentence", ":", "str", ")", "->", "str", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.hub_utils.GeneratorHubInterface.binarize": [[218, 220], ["hub_utils.GeneratorHubInterface.src_dict.encode_line().long", "hub_utils.GeneratorHubInterface.src_dict.encode_line"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.encode_line"], ["        ", "if", "self", ".", "bpe", "is", "not", "None", ":", "\n", "            ", "sentence", "=", "self", ".", "bpe", ".", "decode", "(", "sentence", ")", "\n", "", "return", "sentence", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.hub_utils.GeneratorHubInterface.string": [[221, 223], ["hub_utils.GeneratorHubInterface.tgt_dict.string"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.string"], ["\n", "", "def", "binarize", "(", "self", ",", "sentence", ":", "str", ")", "->", "torch", ".", "LongTensor", ":", "\n", "        ", "return", "self", ".", "src_dict", ".", "encode_line", "(", "sentence", ",", "add_if_not_exist", "=", "False", ")", ".", "long", "(", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.hub_utils.GeneratorHubInterface._build_batches": [[224, 236], ["torch.LongTensor", "hub_utils.GeneratorHubInterface.task.get_batch_iterator().next_epoch_itr", "t.numel", "hub_utils.GeneratorHubInterface.task.get_batch_iterator", "hub_utils.GeneratorHubInterface.task.build_dataset_for_inference"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.EpochBatchIterator.next_epoch_itr", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.fairseq_task.FairseqTask.get_batch_iterator", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.masked_lm.MaskedLMTask.build_dataset_for_inference"], ["\n", "", "def", "string", "(", "self", ",", "tokens", ":", "torch", ".", "LongTensor", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "tgt_dict", ".", "string", "(", "tokens", ")", "\n", "\n", "", "def", "_build_batches", "(", "\n", "self", ",", "tokens", ":", "List", "[", "List", "[", "int", "]", "]", ",", "skip_invalid_size_inputs", ":", "bool", "\n", ")", "->", "Iterator", "[", "Dict", "[", "str", ",", "Any", "]", "]", ":", "\n", "        ", "lengths", "=", "torch", ".", "LongTensor", "(", "[", "t", ".", "numel", "(", ")", "for", "t", "in", "tokens", "]", ")", "\n", "batch_iterator", "=", "self", ".", "task", ".", "get_batch_iterator", "(", "\n", "dataset", "=", "self", ".", "task", ".", "build_dataset_for_inference", "(", "tokens", ",", "lengths", ")", ",", "\n", "max_tokens", "=", "self", ".", "args", ".", "max_tokens", ",", "\n", "max_sentences", "=", "self", ".", "args", ".", "max_sentences", ",", "\n", "max_positions", "=", "self", ".", "max_positions", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.hub_utils.BPEHubInterface.__init__": [[241, 246], ["object.__init__", "argparse.Namespace", "fairseq.data.encoders.build_bpe"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["\n", "", "", "class", "BPEHubInterface", "(", "object", ")", ":", "\n", "    ", "\"\"\"PyTorch Hub interface for Byte-Pair Encoding (BPE).\"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "bpe", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.hub_utils.BPEHubInterface.encode": [[247, 249], ["hub_utils.BPEHubInterface.bpe.encode"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.encode"], ["args", "=", "argparse", ".", "Namespace", "(", "bpe", "=", "bpe", ",", "**", "kwargs", ")", "\n", "self", ".", "bpe", "=", "encoders", ".", "build_bpe", "(", "args", ")", "\n", "assert", "self", ".", "bpe", "is", "not", "None", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.hub_utils.BPEHubInterface.decode": [[250, 252], ["hub_utils.BPEHubInterface.bpe.decode"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.decode"], ["\n", "", "def", "encode", "(", "self", ",", "sentence", ":", "str", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "bpe", ".", "encode", "(", "sentence", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.hub_utils.TokenizerHubInterface.__init__": [[257, 262], ["object.__init__", "argparse.Namespace", "fairseq.data.encoders.build_tokenizer"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["\n", "", "", "class", "TokenizerHubInterface", "(", "object", ")", ":", "\n", "    ", "\"\"\"PyTorch Hub interface for tokenization.\"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "tokenizer", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.hub_utils.TokenizerHubInterface.encode": [[263, 265], ["hub_utils.TokenizerHubInterface.tokenizer.encode"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.encode"], ["args", "=", "argparse", ".", "Namespace", "(", "tokenizer", "=", "tokenizer", ",", "**", "kwargs", ")", "\n", "self", ".", "tokenizer", "=", "encoders", ".", "build_tokenizer", "(", "args", ")", "\n", "assert", "self", ".", "tokenizer", "is", "not", "None", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.hub_utils.TokenizerHubInterface.decode": [[266, 268], ["hub_utils.TokenizerHubInterface.tokenizer.decode"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.decode"], ["\n", "", "def", "encode", "(", "self", ",", "sentence", ":", "str", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "tokenizer", ".", "encode", "(", "sentence", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.hub_utils.from_pretrained": [[19, 76], ["file_utils.load_archive_file", "data_name_or_path.startswith", "checkpoint_utils.load_model_ensemble_and_task", "isinstance", "os.path.abspath", "file_utils.load_archive_file", "os.path.join", "os.path.exists", "fairseq.utils.import_user_module", "model_name_or_path.items", "os.path.join", "argparse.Namespace", "os.path.join", "checkpoint_file.split"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_utils.load_archive_file", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.checkpoint_utils.load_model_ensemble_and_task", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_utils.load_archive_file", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.import_user_module"], ["\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "\n", "def", "from_pretrained", "(", "\n", "model_name_or_path", ",", "\n", "checkpoint_file", "=", "'model.pt'", ",", "\n", "data_name_or_path", "=", "'.'", ",", "\n", "archive_map", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "    ", "from", "fairseq", "import", "checkpoint_utils", ",", "file_utils", "\n", "\n", "if", "archive_map", "is", "not", "None", ":", "\n", "        ", "if", "model_name_or_path", "in", "archive_map", ":", "\n", "            ", "model_name_or_path", "=", "archive_map", "[", "model_name_or_path", "]", "\n", "", "if", "data_name_or_path", "is", "not", "None", "and", "data_name_or_path", "in", "archive_map", ":", "\n", "            ", "data_name_or_path", "=", "archive_map", "[", "data_name_or_path", "]", "\n", "\n", "# allow archive_map to set default arg_overrides (e.g., tokenizer, bpe)", "\n", "# for each model", "\n", "", "if", "isinstance", "(", "model_name_or_path", ",", "dict", ")", ":", "\n", "            ", "for", "k", ",", "v", "in", "model_name_or_path", ".", "items", "(", ")", ":", "\n", "                ", "if", "k", "==", "'checkpoint_file'", ":", "\n", "                    ", "checkpoint_file", "=", "v", "\n", "", "elif", "(", "\n", "k", "!=", "'path'", "\n", "# only set kwargs that don't already have overrides", "\n", "and", "k", "not", "in", "kwargs", "\n", ")", ":", "\n", "                    ", "kwargs", "[", "k", "]", "=", "v", "\n", "", "", "model_name_or_path", "=", "model_name_or_path", "[", "'path'", "]", "\n", "\n", "", "", "model_path", "=", "file_utils", ".", "load_archive_file", "(", "model_name_or_path", ")", "\n", "\n", "# convenience hack for loading data and BPE codes from model archive", "\n", "if", "data_name_or_path", ".", "startswith", "(", "'.'", ")", ":", "\n", "        ", "kwargs", "[", "'data'", "]", "=", "os", ".", "path", ".", "abspath", "(", "os", ".", "path", ".", "join", "(", "model_path", ",", "data_name_or_path", ")", ")", "\n", "", "else", ":", "\n", "        ", "kwargs", "[", "'data'", "]", "=", "file_utils", ".", "load_archive_file", "(", "data_name_or_path", ")", "\n", "", "for", "file", ",", "arg", "in", "{", "\n", "'code'", ":", "'bpe_codes'", ",", "\n", "'bpecodes'", ":", "'bpe_codes'", ",", "\n", "'sentencepiece.bpe.model'", ":", "'sentencepiece_vocab'", ",", "\n", "}", ".", "items", "(", ")", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "model_path", ",", "file", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "            ", "kwargs", "[", "arg", "]", "=", "path", "\n", "\n", "", "", "if", "'user_dir'", "in", "kwargs", ":", "\n", "        ", "utils", ".", "import_user_module", "(", "argparse", ".", "Namespace", "(", "user_dir", "=", "kwargs", "[", "'user_dir'", "]", ")", ")", "\n", "\n", "", "models", ",", "args", ",", "task", "=", "checkpoint_utils", ".", "load_model_ensemble_and_task", "(", "\n", "[", "os", ".", "path", ".", "join", "(", "model_path", ",", "cpt", ")", "for", "cpt", "in", "checkpoint_file", ".", "split", "(", "os", ".", "pathsep", ")", "]", ",", "\n", "arg_overrides", "=", "kwargs", ",", "\n", ")", "\n", "\n", "return", "{", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.sequence_scorer.SequenceScorer.__init__": [[15, 21], ["tgt_dict.pad", "tgt_dict.eos"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos"], ["def", "__init__", "(", "self", ",", "tgt_dict", ",", "softmax_batch", "=", "None", ",", "compute_alignment", "=", "False", ")", ":", "\n", "        ", "self", ".", "pad", "=", "tgt_dict", ".", "pad", "(", ")", "\n", "self", ".", "eos", "=", "tgt_dict", ".", "eos", "(", ")", "\n", "self", ".", "softmax_batch", "=", "softmax_batch", "or", "sys", ".", "maxsize", "\n", "assert", "self", ".", "softmax_batch", ">", "0", "\n", "self", ".", "compute_alignment", "=", "compute_alignment", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.sequence_scorer.SequenceScorer.generate": [[22, 128], ["torch.no_grad", "avg_probs.size", "range", "curr_prob.new.gather", "model.eval", "model", "sequence_scorer.SequenceScorer.generate.batch_for_softmax"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.model"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "generate", "(", "self", ",", "models", ",", "sample", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Score a batch of translations.\"\"\"", "\n", "net_input", "=", "sample", "[", "'net_input'", "]", "\n", "\n", "def", "batch_for_softmax", "(", "dec_out", ",", "target", ")", ":", "\n", "# assumes decoder_out[0] is the only thing needed (may not be correct for future models!)", "\n", "            ", "first", ",", "rest", "=", "dec_out", "[", "0", "]", ",", "dec_out", "[", "1", ":", "]", "\n", "bsz", ",", "tsz", ",", "dim", "=", "first", ".", "shape", "\n", "if", "bsz", "*", "tsz", "<", "self", ".", "softmax_batch", ":", "\n", "                ", "yield", "dec_out", ",", "target", ",", "True", "\n", "", "else", ":", "\n", "                ", "flat", "=", "first", ".", "contiguous", "(", ")", ".", "view", "(", "1", ",", "-", "1", ",", "dim", ")", "\n", "flat_tgt", "=", "target", ".", "contiguous", "(", ")", ".", "view", "(", "flat", ".", "shape", "[", ":", "-", "1", "]", ")", "\n", "s", "=", "0", "\n", "while", "s", "<", "flat", ".", "size", "(", "1", ")", ":", "\n", "                    ", "e", "=", "s", "+", "self", ".", "softmax_batch", "\n", "yield", "(", "flat", "[", ":", ",", "s", ":", "e", "]", ",", ")", "+", "rest", ",", "flat_tgt", "[", ":", ",", "s", ":", "e", "]", ",", "False", "\n", "s", "=", "e", "\n", "\n", "", "", "", "def", "gather_target_probs", "(", "probs", ",", "target", ")", ":", "\n", "            ", "probs", "=", "probs", ".", "gather", "(", "\n", "dim", "=", "2", ",", "\n", "index", "=", "target", ".", "unsqueeze", "(", "-", "1", ")", ",", "\n", ")", "\n", "return", "probs", "\n", "\n", "", "orig_target", "=", "sample", "[", "'target'", "]", "\n", "\n", "# compute scores for each model in the ensemble", "\n", "avg_probs", "=", "None", "\n", "avg_attn", "=", "None", "\n", "for", "model", "in", "models", ":", "\n", "            ", "model", ".", "eval", "(", ")", "\n", "decoder_out", "=", "model", "(", "**", "net_input", ")", "\n", "attn", "=", "decoder_out", "[", "1", "]", "\n", "if", "type", "(", "attn", ")", "is", "dict", ":", "\n", "                ", "attn", "=", "attn", ".", "get", "(", "'attn'", ",", "None", ")", "\n", "\n", "", "batched", "=", "batch_for_softmax", "(", "decoder_out", ",", "orig_target", ")", "\n", "probs", ",", "idx", "=", "None", ",", "0", "\n", "for", "bd", ",", "tgt", ",", "is_single", "in", "batched", ":", "\n", "                ", "sample", "[", "'target'", "]", "=", "tgt", "\n", "curr_prob", "=", "model", ".", "get_normalized_probs", "(", "bd", ",", "log_probs", "=", "len", "(", "models", ")", "==", "1", ",", "sample", "=", "sample", ")", ".", "data", "\n", "if", "is_single", ":", "\n", "                    ", "probs", "=", "gather_target_probs", "(", "curr_prob", ",", "orig_target", ")", "\n", "", "else", ":", "\n", "                    ", "if", "probs", "is", "None", ":", "\n", "                        ", "probs", "=", "curr_prob", ".", "new", "(", "orig_target", ".", "numel", "(", ")", ")", "\n", "", "step", "=", "curr_prob", ".", "size", "(", "0", ")", "*", "curr_prob", ".", "size", "(", "1", ")", "\n", "end", "=", "step", "+", "idx", "\n", "tgt_probs", "=", "gather_target_probs", "(", "curr_prob", ".", "view", "(", "tgt", ".", "shape", "+", "(", "curr_prob", ".", "size", "(", "-", "1", ")", ",", ")", ")", ",", "tgt", ")", "\n", "probs", "[", "idx", ":", "end", "]", "=", "tgt_probs", ".", "view", "(", "-", "1", ")", "\n", "idx", "=", "end", "\n", "", "sample", "[", "'target'", "]", "=", "orig_target", "\n", "\n", "", "probs", "=", "probs", ".", "view", "(", "sample", "[", "'target'", "]", ".", "shape", ")", "\n", "\n", "if", "avg_probs", "is", "None", ":", "\n", "                ", "avg_probs", "=", "probs", "\n", "", "else", ":", "\n", "                ", "avg_probs", ".", "add_", "(", "probs", ")", "\n", "", "if", "attn", "is", "not", "None", "and", "torch", ".", "is_tensor", "(", "attn", ")", ":", "\n", "                ", "attn", "=", "attn", ".", "data", "\n", "if", "avg_attn", "is", "None", ":", "\n", "                    ", "avg_attn", "=", "attn", "\n", "", "else", ":", "\n", "                    ", "avg_attn", ".", "add_", "(", "attn", ")", "\n", "", "", "", "if", "len", "(", "models", ")", ">", "1", ":", "\n", "            ", "avg_probs", ".", "div_", "(", "len", "(", "models", ")", ")", "\n", "avg_probs", ".", "log_", "(", ")", "\n", "if", "avg_attn", "is", "not", "None", ":", "\n", "                ", "avg_attn", ".", "div_", "(", "len", "(", "models", ")", ")", "\n", "\n", "", "", "bsz", "=", "avg_probs", ".", "size", "(", "0", ")", "\n", "hypos", "=", "[", "]", "\n", "start_idxs", "=", "sample", "[", "'start_indices'", "]", "if", "'start_indices'", "in", "sample", "else", "[", "0", "]", "*", "bsz", "\n", "for", "i", "in", "range", "(", "bsz", ")", ":", "\n", "# remove padding from ref", "\n", "            ", "ref", "=", "utils", ".", "strip_pad", "(", "sample", "[", "'target'", "]", "[", "i", ",", "start_idxs", "[", "i", "]", ":", "]", ",", "self", ".", "pad", ")", "if", "sample", "[", "'target'", "]", "is", "not", "None", "else", "None", "\n", "tgt_len", "=", "ref", ".", "numel", "(", ")", "\n", "avg_probs_i", "=", "avg_probs", "[", "i", "]", "[", "start_idxs", "[", "i", "]", ":", "start_idxs", "[", "i", "]", "+", "tgt_len", "]", "\n", "score_i", "=", "avg_probs_i", ".", "sum", "(", ")", "/", "tgt_len", "\n", "if", "avg_attn", "is", "not", "None", ":", "\n", "                ", "avg_attn_i", "=", "avg_attn", "[", "i", "]", "\n", "if", "self", ".", "compute_alignment", ":", "\n", "                    ", "alignment", "=", "utils", ".", "extract_hard_alignment", "(", "\n", "avg_attn_i", ",", "\n", "sample", "[", "'net_input'", "]", "[", "'src_tokens'", "]", "[", "i", "]", ",", "\n", "sample", "[", "'target'", "]", "[", "i", "]", ",", "\n", "self", ".", "pad", ",", "\n", "self", ".", "eos", ",", "\n", ")", "\n", "", "else", ":", "\n", "                    ", "alignment", "=", "None", "\n", "", "", "else", ":", "\n", "                ", "avg_attn_i", "=", "alignment", "=", "None", "\n", "", "hypos", ".", "append", "(", "[", "{", "\n", "'tokens'", ":", "ref", ",", "\n", "'score'", ":", "score_i", ",", "\n", "'attention'", ":", "avg_attn_i", ",", "\n", "'alignment'", ":", "alignment", ",", "\n", "'positional_scores'", ":", "avg_probs_i", ",", "\n", "}", "]", ")", "\n", "", "return", "hypos", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.aggregate": [[36, 97], ["str", "meters.MetersDict", "_aggregators.setdefault", "_active_aggregators.copy", "_active_aggregators.clear", "_active_aggregators_cnt.copy", "_active_aggregators_cnt.clear", "_active_aggregators.clear", "_active_aggregators.update", "_active_aggregators_cnt.clear", "_active_aggregators_cnt.update", "uuid.uuid4", "meters.MetersDict"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.copy", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.copy", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.update", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.update"], ["@", "contextlib", ".", "contextmanager", "\n", "def", "aggregate", "(", "name", ":", "Optional", "[", "str", "]", "=", "None", ",", "new_root", ":", "bool", "=", "False", ")", ":", "\n", "    ", "\"\"\"Context manager to aggregate metrics under a given name.\n\n    Aggregations can be nested. If *new_root* is ``False``, then logged\n    metrics will be recorded along the entire stack of nested\n    aggregators, including a global \"default\" aggregator. If *new_root*\n    is ``True``, then this aggregator will be the root of a new\n    aggregation stack, thus bypassing any parent aggregators.\n\n    Note that aggregation contexts are uniquely identified by their\n    *name* (e.g., train, valid). Creating a context with an existing\n    name will reuse the corresponding :class:`MetersDict` instance.\n    If no name is given, then a temporary aggregator will be created.\n\n    Usage::\n\n        with metrics.aggregate(\"train\"):\n            for step, batch in enumerate(epoch):\n                with metrics.aggregate(\"train_inner\") as agg:\n                    metrics.log_scalar(\"loss\", get_loss(batch))\n                    if step % log_interval == 0:\n                        print(agg.get_smoothed_value(\"loss\"))\n                        agg.reset()\n        print(metrics.get_smoothed_values(\"train\")[\"loss\"])\n\n    Args:\n        name (str): name of the aggregation. Defaults to a\n            random/temporary name if not given explicitly.\n        new_root (bool): make this aggregation the root of a new\n            aggregation stack.\n    \"\"\"", "\n", "if", "name", "is", "None", ":", "\n", "# generate a temporary name", "\n", "        ", "name", "=", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", "\n", "assert", "name", "not", "in", "_aggregators", "\n", "agg", "=", "MetersDict", "(", ")", "\n", "", "else", ":", "\n", "        ", "assert", "name", "!=", "\"default\"", "\n", "agg", "=", "_aggregators", ".", "setdefault", "(", "name", ",", "MetersDict", "(", ")", ")", "\n", "\n", "", "if", "new_root", ":", "\n", "        ", "backup_aggregators", "=", "_active_aggregators", ".", "copy", "(", ")", "\n", "_active_aggregators", ".", "clear", "(", ")", "\n", "backup_aggregators_cnt", "=", "_active_aggregators_cnt", ".", "copy", "(", ")", "\n", "_active_aggregators_cnt", ".", "clear", "(", ")", "\n", "\n", "", "_active_aggregators", "[", "name", "]", "=", "agg", "\n", "_active_aggregators_cnt", "[", "name", "]", "+=", "1", "\n", "\n", "yield", "agg", "\n", "\n", "_active_aggregators_cnt", "[", "name", "]", "-=", "1", "\n", "if", "_active_aggregators_cnt", "[", "name", "]", "==", "0", "and", "name", "in", "_active_aggregators", ":", "\n", "        ", "del", "_active_aggregators", "[", "name", "]", "\n", "\n", "", "if", "new_root", ":", "\n", "        ", "_active_aggregators", ".", "clear", "(", ")", "\n", "_active_aggregators", ".", "update", "(", "backup_aggregators", ")", "\n", "_active_aggregators_cnt", ".", "clear", "(", ")", "\n", "_active_aggregators_cnt", ".", "update", "(", "backup_aggregators_cnt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.get_active_aggregators": [[99, 101], ["list", "_active_aggregators.values"], "function", ["None"], ["", "", "def", "get_active_aggregators", "(", ")", "->", "List", "[", "MetersDict", "]", ":", "\n", "    ", "return", "list", "(", "_active_aggregators", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_scalar": [[103, 124], ["metrics.get_active_aggregators", "agg[].update", "agg.add_meter", "meters.AverageMeter"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.get_active_aggregators", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.update", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.MetersDict.add_meter"], ["", "def", "log_scalar", "(", "\n", "key", ":", "str", ",", "\n", "value", ":", "float", ",", "\n", "weight", ":", "float", "=", "1", ",", "\n", "priority", ":", "int", "=", "10", ",", "\n", "round", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Log a scalar value.\n\n    Args:\n        key (str): name of the field to log\n        value (float): value to log\n        weight (float): weight that this value contributes to the average.\n            A weight of 0 will always log the latest value.\n        priority (int): smaller values are logged earlier in the output\n        round (Optional[int]): number of digits to round to when displaying\n    \"\"\"", "\n", "for", "agg", "in", "get_active_aggregators", "(", ")", ":", "\n", "        ", "if", "key", "not", "in", "agg", ":", "\n", "            ", "agg", ".", "add_meter", "(", "key", ",", "AverageMeter", "(", "round", "=", "round", ")", ",", "priority", ")", "\n", "", "agg", "[", "key", "]", ".", "update", "(", "value", ",", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_derived": [[126, 138], ["metrics.get_active_aggregators", "agg.add_meter", "meters.MetersDict._DerivedMeter"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.get_active_aggregators", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.MetersDict.add_meter"], ["", "", "def", "log_derived", "(", "key", ":", "str", ",", "fn", ":", "Callable", "[", "[", "MetersDict", "]", ",", "float", "]", ",", "priority", ":", "int", "=", "20", ")", ":", "\n", "    ", "\"\"\"Log a scalar value derived from other meters.\n\n    Args:\n        key (str): name of the field to log\n        fn (Callable[[MetersDict], float]): function that takes a single\n            argument *meters* and returns the derived value\n        priority (int): smaller values are logged earlier in the output\n    \"\"\"", "\n", "for", "agg", "in", "get_active_aggregators", "(", ")", ":", "\n", "        ", "if", "key", "not", "in", "agg", ":", "\n", "            ", "agg", ".", "add_meter", "(", "key", ",", "MetersDict", ".", "_DerivedMeter", "(", "fn", ")", ",", "priority", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_speed": [[140, 155], ["metrics.get_active_aggregators", "agg.add_meter", "agg[].reset", "agg[].update", "meters.TimeMeter"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.get_active_aggregators", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.MetersDict.add_meter", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.MetersDict.reset", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.update"], ["", "", "", "def", "log_speed", "(", "\n", "key", ":", "str", ",", "\n", "value", ":", "float", ",", "\n", "ignore_first", ":", "int", "=", "0", ",", "\n", "priority", ":", "int", "=", "30", ",", "\n", "round", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", ")", ":", "\n", "    ", "\"\"\"Log the rate of some quantity per second.\n\n    Args:\n        key (str): name of the field to log\n        value (float): value to log\n        ignore_first (int): ignore the first few values\n        priority (int): smaller values are logged earlier in the output\n        round (Optional[int]): number of digits to round to when displaying\n    \"\"\"", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_start_time": [[157, 171], ["metrics.get_active_aggregators", "agg[].start", "agg.add_meter", "meters.StopwatchMeter"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.get_active_aggregators", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.StopwatchMeter.start", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.MetersDict.add_meter"], ["        ", "if", "key", "not", "in", "agg", ":", "\n", "            ", "agg", ".", "add_meter", "(", "key", ",", "TimeMeter", "(", "ignore_first", "=", "ignore_first", ",", "round", "=", "round", ")", ",", "priority", ")", "\n", "agg", "[", "key", "]", ".", "reset", "(", ")", "# reset meter on the first call", "\n", "", "else", ":", "\n", "            ", "agg", "[", "key", "]", ".", "update", "(", "value", ")", "\n", "\n", "\n", "", "", "", "def", "log_start_time", "(", "key", ":", "str", ",", "priority", ":", "int", "=", "40", ",", "round", ":", "Optional", "[", "int", "]", "=", "None", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_stop_time": [[173, 185], ["metrics.get_active_aggregators", "agg[].stop"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.get_active_aggregators", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.StopwatchMeter.stop"], ["\n", "for", "agg", "in", "get_active_aggregators", "(", ")", ":", "\n", "        ", "if", "key", "not", "in", "agg", ":", "\n", "            ", "agg", ".", "add_meter", "(", "key", ",", "StopwatchMeter", "(", "round", "=", "round", ")", ",", "priority", ")", "\n", "", "agg", "[", "key", "]", ".", "start", "(", ")", "\n", "\n", "\n", "", "", "def", "log_stop_time", "(", "key", ":", "str", ",", "weight", ":", "float", "=", "0.", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_custom": [[187, 209], ["metrics.get_active_aggregators", "agg[].update", "agg.add_meter", "new_meter_fn"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.get_active_aggregators", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.update", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.MetersDict.add_meter"], ["\n", "for", "agg", "in", "get_active_aggregators", "(", ")", ":", "\n", "        ", "agg", "[", "key", "]", ".", "stop", "(", "weight", ")", "\n", "\n", "\n", "", "", "def", "log_custom", "(", "\n", "new_meter_fn", ":", "Callable", "[", "[", "]", ",", "Meter", "]", ",", "\n", "key", ":", "str", ",", "\n", "*", "args", ",", "\n", "priority", ":", "int", "=", "50", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.reset_meter": [[211, 216], ["metrics.get_meter", "get_meter.reset"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.get_meter", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.MetersDict.reset"], ["\n", "for", "agg", "in", "get_active_aggregators", "(", ")", ":", "\n", "        ", "if", "key", "not", "in", "agg", ":", "\n", "            ", "agg", ".", "add_meter", "(", "key", ",", "new_meter_fn", "(", ")", ",", "priority", ")", "\n", "", "agg", "[", "key", "]", ".", "update", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.reset_meters": [[218, 223], ["metrics.get_meters", "get_meters.reset"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.get_meters", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.MetersDict.reset"], ["", "", "def", "reset_meter", "(", "name", ":", "str", ",", "key", ":", "str", ")", "->", "None", ":", "\n", "    ", "\"\"\"Reset Meter instance aggregated under a given *name* and *key*.\"\"\"", "\n", "meter", "=", "get_meter", "(", "name", ",", "key", ")", "\n", "if", "meter", "is", "not", "None", ":", "\n", "        ", "meter", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.get_meter": [[225, 234], ["_aggregators[].get"], "function", ["None"], ["", "", "def", "reset_meters", "(", "name", ":", "str", ")", "->", "None", ":", "\n", "    ", "\"\"\"Reset Meter instances aggregated under a given *name*.\"\"\"", "\n", "meters", "=", "get_meters", "(", "name", ")", "\n", "if", "meters", "is", "not", "None", ":", "\n", "        ", "meters", ".", "reset", "(", ")", "\n", "\n", "\n", "", "", "def", "get_meter", "(", "name", ":", "str", ",", "key", ":", "str", ")", "->", "Meter", ":", "\n", "    "]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.get_meters": [[236, 243], ["_aggregators.get"], "function", ["None"], ["\n", "if", "name", "not", "in", "_aggregators", ":", "\n", "        ", "return", "None", "\n", "", "return", "_aggregators", "[", "name", "]", ".", "get", "(", "key", ",", "None", ")", "\n", "\n", "\n", "", "def", "get_meters", "(", "name", ":", "str", ")", "->", "MetersDict", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.get_smoothed_value": [[245, 252], ["_aggregators[].get_smoothed_value"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.MetersDict.get_smoothed_value"], ["\n", "return", "_aggregators", ".", "get", "(", "name", ",", "None", ")", "\n", "\n", "\n", "", "def", "get_smoothed_value", "(", "name", ":", "str", ",", "key", ":", "str", ")", "->", "float", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.get_smoothed_values": [[254, 261], ["_aggregators[].get_smoothed_values"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.MetersDict.get_smoothed_values"], ["\n", "return", "_aggregators", "[", "name", "]", ".", "get_smoothed_value", "(", "key", ")", "\n", "\n", "\n", "", "def", "get_smoothed_values", "(", "name", ":", "str", ")", "->", "Dict", "[", "str", ",", "float", "]", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.state_dict": [[263, 267], ["collections.OrderedDict", "agg.state_dict", "_aggregators.items"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.state_dict"], ["\n", "return", "_aggregators", "[", "name", "]", ".", "get_smoothed_values", "(", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.load_state_dict": [[270, 274], ["state_dict.items", "meters.MetersDict", "_aggregators[].load_state_dict"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.load_state_dict"], ["", "def", "state_dict", "(", ")", ":", "\n", "    ", "return", "OrderedDict", "(", "[", "\n", "(", "name", ",", "agg", ".", "state_dict", "(", ")", ")", "\n", "for", "name", ",", "agg", "in", "_aggregators", ".", "items", "(", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.tokenizer.tokenize_line": [[11, 15], ["SPACE_NORMALIZER.sub", "line.strip.strip", "line.strip.split"], "function", ["None"], ["def", "tokenize_line", "(", "line", ")", ":", "\n", "    ", "line", "=", "SPACE_NORMALIZER", ".", "sub", "(", "\" \"", ",", "line", ")", "\n", "line", "=", "line", ".", "strip", "(", ")", "\n", "return", "line", ".", "split", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_utils.load_archive_file": [[52, 88], ["file_utils.cached_path", "print", "print", "os.path.isdir", "tempfile.mkdtemp", "print", "os.remove", "shutil.move", "shutil.rmtree", "print", "tarfile.open", "os.path.commonprefix", "archive.extractall", "os.path.join", "os.path.splitext", "archive.getnames"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_utils.cached_path", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open"], ["def", "load_archive_file", "(", "archive_file", ")", ":", "\n", "# redirect to the cache, if necessary", "\n", "    ", "try", ":", "\n", "        ", "resolved_archive_file", "=", "cached_path", "(", "archive_file", ",", "cache_dir", "=", "None", ")", "\n", "", "except", "EnvironmentError", ":", "\n", "        ", "logger", ".", "info", "(", "\n", "\"Archive name '{}' was not found in archive name list. \"", "\n", "\"We assumed '{}' was a path or URL but couldn't find any file \"", "\n", "\"associated to this path or URL.\"", ".", "format", "(", "\n", "archive_file", ",", "\n", "archive_file", ",", "\n", ")", "\n", ")", "\n", "return", "None", "\n", "\n", "", "if", "resolved_archive_file", "==", "archive_file", ":", "\n", "        ", "logger", ".", "info", "(", "\"loading archive file {}\"", ".", "format", "(", "archive_file", ")", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "info", "(", "\"loading archive file {} from cache at {}\"", ".", "format", "(", "\n", "archive_file", ",", "resolved_archive_file", ")", ")", "\n", "\n", "# Extract archive to temp dir and replace .tar.bz2 if necessary", "\n", "", "tempdir", "=", "None", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "resolved_archive_file", ")", ":", "\n", "        ", "tempdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "logger", ".", "info", "(", "\"extracting archive file {} to temp dir {}\"", ".", "format", "(", "\n", "resolved_archive_file", ",", "tempdir", ")", ")", "\n", "ext", "=", "os", ".", "path", ".", "splitext", "(", "archive_file", ")", "[", "1", "]", "[", "1", ":", "]", "\n", "with", "tarfile", ".", "open", "(", "resolved_archive_file", ",", "'r:'", "+", "ext", ")", "as", "archive", ":", "\n", "            ", "top_dir", "=", "os", ".", "path", ".", "commonprefix", "(", "archive", ".", "getnames", "(", ")", ")", "\n", "archive", ".", "extractall", "(", "tempdir", ")", "\n", "", "os", ".", "remove", "(", "resolved_archive_file", ")", "\n", "shutil", ".", "move", "(", "os", ".", "path", ".", "join", "(", "tempdir", ",", "top_dir", ")", ",", "resolved_archive_file", ")", "\n", "shutil", ".", "rmtree", "(", "tempdir", ")", "\n", "\n", "", "return", "resolved_archive_file", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_utils.url_to_filename": [[90, 106], ["url.encode", "hashlib.sha256", "hashlib.sha256.hexdigest", "etag.encode", "hashlib.sha256", "hashlib.sha256.hexdigest"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.encode", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.encode"], ["", "def", "url_to_filename", "(", "url", ",", "etag", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Convert `url` into a hashed filename in a repeatable way.\n    If `etag` is specified, append its hash to the URL's, delimited\n    by a period.\n    \"\"\"", "\n", "url_bytes", "=", "url", ".", "encode", "(", "'utf-8'", ")", "\n", "url_hash", "=", "sha256", "(", "url_bytes", ")", "\n", "filename", "=", "url_hash", ".", "hexdigest", "(", ")", "\n", "\n", "if", "etag", ":", "\n", "        ", "etag_bytes", "=", "etag", ".", "encode", "(", "'utf-8'", ")", "\n", "etag_hash", "=", "sha256", "(", "etag_bytes", ")", "\n", "filename", "+=", "'.'", "+", "etag_hash", ".", "hexdigest", "(", ")", "\n", "\n", "", "return", "filename", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_utils.filename_to_url": [[108, 132], ["isinstance", "os.path.join", "str", "os.path.exists", "EnvironmentError", "os.path.exists", "EnvironmentError", "io.open", "json.load"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.load"], ["", "def", "filename_to_url", "(", "filename", ",", "cache_dir", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Return the url and etag (which may be ``None``) stored for `filename`.\n    Raise ``EnvironmentError`` if `filename` or its stored metadata do not exist.\n    \"\"\"", "\n", "if", "cache_dir", "is", "None", ":", "\n", "        ", "cache_dir", "=", "PYTORCH_FAIRSEQ_CACHE", "\n", "", "if", "isinstance", "(", "cache_dir", ",", "Path", ")", ":", "\n", "        ", "cache_dir", "=", "str", "(", "cache_dir", ")", "\n", "\n", "", "cache_path", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cache_path", ")", ":", "\n", "        ", "raise", "EnvironmentError", "(", "\"file {} not found\"", ".", "format", "(", "cache_path", ")", ")", "\n", "\n", "", "meta_path", "=", "cache_path", "+", "'.json'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "meta_path", ")", ":", "\n", "        ", "raise", "EnvironmentError", "(", "\"file {} not found\"", ".", "format", "(", "meta_path", ")", ")", "\n", "\n", "", "with", "open", "(", "meta_path", ",", "encoding", "=", "\"utf-8\"", ")", "as", "meta_file", ":", "\n", "        ", "metadata", "=", "json", ".", "load", "(", "meta_file", ")", "\n", "", "url", "=", "metadata", "[", "'url'", "]", "\n", "etag", "=", "metadata", "[", "'etag'", "]", "\n", "\n", "return", "url", ",", "etag", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_utils.cached_path": [[134, 162], ["isinstance", "isinstance", "urlparse", "str", "str", "file_utils.get_from_cache", "os.path.exists", "EnvironmentError", "ValueError"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_utils.get_from_cache", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists"], ["", "def", "cached_path", "(", "url_or_filename", ",", "cache_dir", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Given something that might be a URL (or might be a local path),\n    determine which. If it's a URL, download the file and cache it, and\n    return the path to the cached file. If it's already a local path,\n    make sure the file exists and then return the path.\n    \"\"\"", "\n", "if", "cache_dir", "is", "None", ":", "\n", "        ", "cache_dir", "=", "PYTORCH_FAIRSEQ_CACHE", "\n", "", "if", "isinstance", "(", "url_or_filename", ",", "Path", ")", ":", "\n", "        ", "url_or_filename", "=", "str", "(", "url_or_filename", ")", "\n", "", "if", "isinstance", "(", "cache_dir", ",", "Path", ")", ":", "\n", "        ", "cache_dir", "=", "str", "(", "cache_dir", ")", "\n", "\n", "", "parsed", "=", "urlparse", "(", "url_or_filename", ")", "\n", "\n", "if", "parsed", ".", "scheme", "in", "(", "'http'", ",", "'https'", ",", "'s3'", ")", ":", "\n", "# URL, so get it from the cache (downloading if necessary)", "\n", "        ", "return", "get_from_cache", "(", "url_or_filename", ",", "cache_dir", ")", "\n", "", "elif", "os", ".", "path", ".", "exists", "(", "url_or_filename", ")", ":", "\n", "# File, and it exists.", "\n", "        ", "return", "url_or_filename", "\n", "", "elif", "parsed", ".", "scheme", "==", "''", ":", "\n", "# File, but it doesn't exist.", "\n", "        ", "raise", "EnvironmentError", "(", "\"file {} not found\"", ".", "format", "(", "url_or_filename", ")", ")", "\n", "", "else", ":", "\n", "# Something unknown", "\n", "        ", "raise", "ValueError", "(", "\"unable to parse {} as a URL or as a local path\"", ".", "format", "(", "url_or_filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_utils.split_s3_path": [[164, 175], ["urlparse", "s3_path.startswith", "ValueError"], "function", ["None"], ["", "", "def", "split_s3_path", "(", "url", ")", ":", "\n", "    ", "\"\"\"Split a full s3 path into the bucket name and path.\"\"\"", "\n", "parsed", "=", "urlparse", "(", "url", ")", "\n", "if", "not", "parsed", ".", "netloc", "or", "not", "parsed", ".", "path", ":", "\n", "        ", "raise", "ValueError", "(", "\"bad s3 path {}\"", ".", "format", "(", "url", ")", ")", "\n", "", "bucket_name", "=", "parsed", ".", "netloc", "\n", "s3_path", "=", "parsed", ".", "path", "\n", "# Remove '/' at beginning of path.", "\n", "if", "s3_path", ".", "startswith", "(", "\"/\"", ")", ":", "\n", "        ", "s3_path", "=", "s3_path", "[", "1", ":", "]", "\n", "", "return", "bucket_name", ",", "s3_path", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_utils.s3_request": [[177, 195], ["functools.wraps", "func", "int", "EnvironmentError"], "function", ["None"], ["", "def", "s3_request", "(", "func", ")", ":", "\n", "    ", "\"\"\"\n    Wrapper function for s3 requests in order to create more helpful error\n    messages.\n    \"\"\"", "\n", "\n", "@", "wraps", "(", "func", ")", "\n", "def", "wrapper", "(", "url", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "from", "botocore", ".", "exceptions", "import", "ClientError", "\n", "try", ":", "\n", "            ", "return", "func", "(", "url", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "except", "ClientError", "as", "exc", ":", "\n", "            ", "if", "int", "(", "exc", ".", "response", "[", "\"Error\"", "]", "[", "\"Code\"", "]", ")", "==", "404", ":", "\n", "                ", "raise", "EnvironmentError", "(", "\"file {} not found\"", ".", "format", "(", "url", ")", ")", "\n", "", "else", ":", "\n", "                ", "raise", "\n", "\n", "", "", "", "return", "wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_utils.s3_etag": [[197, 205], ["boto3.resource", "file_utils.split_s3_path", "boto3.resource.Object"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_utils.split_s3_path"], ["", "@", "s3_request", "\n", "def", "s3_etag", "(", "url", ")", ":", "\n", "    ", "\"\"\"Check ETag on S3 object.\"\"\"", "\n", "import", "boto3", "\n", "s3_resource", "=", "boto3", ".", "resource", "(", "\"s3\"", ")", "\n", "bucket_name", ",", "s3_path", "=", "split_s3_path", "(", "url", ")", "\n", "s3_object", "=", "s3_resource", ".", "Object", "(", "bucket_name", ",", "s3_path", ")", "\n", "return", "s3_object", ".", "e_tag", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_utils.s3_get": [[207, 214], ["boto3.resource", "file_utils.split_s3_path", "boto3.resource.Bucket().download_fileobj", "boto3.resource.Bucket"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_utils.split_s3_path"], ["", "@", "s3_request", "\n", "def", "s3_get", "(", "url", ",", "temp_file", ")", ":", "\n", "    ", "\"\"\"Pull a file directly from S3.\"\"\"", "\n", "import", "boto3", "\n", "s3_resource", "=", "boto3", ".", "resource", "(", "\"s3\"", ")", "\n", "bucket_name", ",", "s3_path", "=", "split_s3_path", "(", "url", ")", "\n", "s3_resource", ".", "Bucket", "(", "bucket_name", ")", ".", "download_fileobj", "(", "s3_path", ",", "temp_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_utils.http_get": [[216, 228], ["requests.get", "requests.get.headers.get", "tqdm", "requests.get.iter_content", "tqdm.close", "int", "tqdm.update", "temp_file.write", "len"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.update", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write"], ["", "def", "http_get", "(", "url", ",", "temp_file", ")", ":", "\n", "    ", "import", "requests", "\n", "from", "tqdm", "import", "tqdm", "\n", "req", "=", "requests", ".", "get", "(", "url", ",", "stream", "=", "True", ")", "\n", "content_length", "=", "req", ".", "headers", ".", "get", "(", "'Content-Length'", ")", "\n", "total", "=", "int", "(", "content_length", ")", "if", "content_length", "is", "not", "None", "else", "None", "\n", "progress", "=", "tqdm", "(", "unit", "=", "\"B\"", ",", "total", "=", "total", ")", "\n", "for", "chunk", "in", "req", ".", "iter_content", "(", "chunk_size", "=", "1024", ")", ":", "\n", "        ", "if", "chunk", ":", "# filter out keep-alive new chunks", "\n", "            ", "progress", ".", "update", "(", "len", "(", "chunk", ")", ")", "\n", "temp_file", ".", "write", "(", "chunk", ")", "\n", "", "", "progress", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_utils.get_from_cache": [[230, 301], ["isinstance", "url.startswith", "file_utils.url_to_filename", "os.path.join", "str", "os.path.exists", "os.makedirs", "file_utils.s3_etag", "fnmatch.filter", "list", "os.path.exists", "requests.head", "os.path.exists", "os.listdir", "filter", "os.path.join", "tempfile.NamedTemporaryFile", "logger.info", "url.startswith", "temp_file.flush", "temp_file.seek", "logger.info", "logger.info", "logger.info", "requests.head.headers.get", "file_utils.s3_get", "file_utils.http_get", "io.open", "shutil.copyfileobj", "io.open", "json.dumps", "meta_file.write", "s.endswith"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_utils.url_to_filename", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_utils.s3_etag", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_utils.s3_get", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_utils.http_get", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write"], ["", "def", "get_from_cache", "(", "url", ",", "cache_dir", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Given a URL, look for the corresponding dataset in the local cache.\n    If it's not there, download it. Then return the path to the cached file.\n    \"\"\"", "\n", "if", "cache_dir", "is", "None", ":", "\n", "        ", "cache_dir", "=", "PYTORCH_FAIRSEQ_CACHE", "\n", "", "if", "isinstance", "(", "cache_dir", ",", "Path", ")", ":", "\n", "        ", "cache_dir", "=", "str", "(", "cache_dir", ")", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "cache_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "cache_dir", ")", "\n", "\n", "# Get eTag to add to filename, if it exists.", "\n", "", "if", "url", ".", "startswith", "(", "\"s3://\"", ")", ":", "\n", "        ", "etag", "=", "s3_etag", "(", "url", ")", "\n", "", "else", ":", "\n", "        ", "try", ":", "\n", "            ", "import", "requests", "\n", "response", "=", "requests", ".", "head", "(", "url", ",", "allow_redirects", "=", "True", ")", "\n", "if", "response", ".", "status_code", "!=", "200", ":", "\n", "                ", "etag", "=", "None", "\n", "", "else", ":", "\n", "                ", "etag", "=", "response", ".", "headers", ".", "get", "(", "\"ETag\"", ")", "\n", "", "", "except", "EnvironmentError", ":", "\n", "            ", "etag", "=", "None", "\n", "\n", "", "", "filename", "=", "url_to_filename", "(", "url", ",", "etag", ")", "\n", "\n", "# get cache path to put the file", "\n", "cache_path", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "filename", ")", "\n", "\n", "# If we don't have a connection (etag is None) and can't identify the file", "\n", "# try to get the last downloaded one", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "cache_path", ")", "and", "etag", "is", "None", ":", "\n", "        ", "matching_files", "=", "fnmatch", ".", "filter", "(", "os", ".", "listdir", "(", "cache_dir", ")", ",", "filename", "+", "'.*'", ")", "\n", "matching_files", "=", "list", "(", "filter", "(", "lambda", "s", ":", "not", "s", ".", "endswith", "(", "'.json'", ")", ",", "matching_files", ")", ")", "\n", "if", "matching_files", ":", "\n", "            ", "cache_path", "=", "os", ".", "path", ".", "join", "(", "cache_dir", ",", "matching_files", "[", "-", "1", "]", ")", "\n", "\n", "", "", "if", "not", "os", ".", "path", ".", "exists", "(", "cache_path", ")", ":", "\n", "# Download to temporary file, then copy to cache dir once finished.", "\n", "# Otherwise you get corrupt cache entries if the download gets interrupted.", "\n", "        ", "with", "tempfile", ".", "NamedTemporaryFile", "(", ")", "as", "temp_file", ":", "\n", "            ", "logger", ".", "info", "(", "\"%s not found in cache, downloading to %s\"", ",", "url", ",", "temp_file", ".", "name", ")", "\n", "\n", "# GET file object", "\n", "if", "url", ".", "startswith", "(", "\"s3://\"", ")", ":", "\n", "                ", "s3_get", "(", "url", ",", "temp_file", ")", "\n", "", "else", ":", "\n", "                ", "http_get", "(", "url", ",", "temp_file", ")", "\n", "\n", "# we are copying the file before closing it, so flush to avoid truncation", "\n", "", "temp_file", ".", "flush", "(", ")", "\n", "# shutil.copyfileobj() starts at the current position, so go to the start", "\n", "temp_file", ".", "seek", "(", "0", ")", "\n", "\n", "logger", ".", "info", "(", "\"copying %s to cache at %s\"", ",", "temp_file", ".", "name", ",", "cache_path", ")", "\n", "with", "open", "(", "cache_path", ",", "'wb'", ")", "as", "cache_file", ":", "\n", "                ", "shutil", ".", "copyfileobj", "(", "temp_file", ",", "cache_file", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"creating metadata file for %s\"", ",", "cache_path", ")", "\n", "meta", "=", "{", "'url'", ":", "url", ",", "'etag'", ":", "etag", "}", "\n", "meta_path", "=", "cache_path", "+", "'.json'", "\n", "with", "open", "(", "meta_path", ",", "'w'", ")", "as", "meta_file", ":", "\n", "                ", "output_string", "=", "json", ".", "dumps", "(", "meta", ")", "\n", "meta_file", ".", "write", "(", "output_string", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"removing temp file %s\"", ",", "temp_file", ".", "name", ")", "\n", "\n", "", "", "return", "cache_path", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_utils.read_set_from_file": [[303, 313], ["set", "io.open", "set.add", "line.rstrip"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.eval_lm.WordStat.add"], ["", "def", "read_set_from_file", "(", "filename", ")", ":", "\n", "    ", "'''\n    Extract a de-duped collection (set) of text from a file.\n    Expected file format is one item per line.\n    '''", "\n", "collection", "=", "set", "(", ")", "\n", "with", "open", "(", "filename", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "file_", ":", "\n", "        ", "for", "line", "in", "file_", ":", "\n", "            ", "collection", ".", "add", "(", "line", ".", "rstrip", "(", ")", ")", "\n", "", "", "return", "collection", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_utils.get_file_extension": [[315, 319], ["os.path.splitext", "ext.lower"], "function", ["None"], ["", "def", "get_file_extension", "(", "path", ",", "dot", "=", "True", ",", "lower", "=", "True", ")", ":", "\n", "    ", "ext", "=", "os", ".", "path", ".", "splitext", "(", "path", ")", "[", "1", "]", "\n", "ext", "=", "ext", "if", "dot", "else", "ext", "[", "1", ":", "]", "\n", "return", "ext", ".", "lower", "(", ")", "if", "lower", "else", "ext", "\n", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.bleu.SacrebleuScorer.__init__": [[37, 41], ["bleu.SacrebleuScorer.reset"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.MetersDict.reset"], ["if", "os", ".", "path", ".", "isfile", "(", "referencePath", ")", ":", "\n", "        ", "referencefiles", ".", "append", "(", "referencePath", ")", "\n", "", "else", ":", "\n", "        ", "referencefiles", "=", "os", ".", "listdir", "(", "referencePath", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "referencefiles", ")", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.bleu.SacrebleuScorer.reset": [[42, 47], ["None"], "methods", ["None"], ["            ", "referencefiles", "[", "i", "]", "=", "referencePath", "+", "\"/\"", "+", "referencefiles", "[", "i", "]", "\n", "", "", "return", "candidatefile", ",", "referencefiles", "\n", "\n", "", "def", "readFiles", "(", "candidatefile", ",", "referencefiles", ")", ":", "\n", "    ", "candidateData", "=", "[", "]", "\n", "referencesData", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.bleu.SacrebleuScorer.add_string": [[48, 51], ["bleu.SacrebleuScorer.ref.append", "bleu.SacrebleuScorer.sys.append"], "methods", ["None"], ["with", "open", "(", "candidatefile", ")", "as", "fp", ":", "\n", "        ", "for", "line", "in", "fp", ":", "\n", "            ", "candidateData", ".", "append", "(", "line", ".", "strip", "(", ")", ".", "split", "(", "\" \"", ")", ")", "\n", "", "", "for", "i", "in", "range", "(", "0", ",", "len", "(", "referencefiles", ")", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.bleu.SacrebleuScorer.score": [[52, 54], ["bleu.SacrebleuScorer.result_string"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.bleu.Scorer.result_string"], ["        ", "temp", "=", "[", "]", "\n", "with", "open", "(", "referencefiles", "[", "i", "]", ")", "as", "fp", ":", "\n", "            ", "for", "line", "in", "fp", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.bleu.SacrebleuScorer.result_string": [[55, 59], ["bleu.SacrebleuScorer.sacrebleu.corpus_bleu"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.translation_moe.score.corpus_bleu"], ["                ", "temp", ".", "append", "(", "line", ".", "strip", "(", ")", ".", "split", "(", "\" \"", ")", ")", "\n", "", "", "referencesData", ".", "append", "(", "temp", ")", "\n", "", "return", "candidateData", ",", "referencesData", "\n", "\n", "", "def", "uniGramDictionary", "(", "sentence", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.bleu.Scorer.__init__": [[62, 68], ["bleu.BleuStat", "bleu.Scorer.reset"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.MetersDict.reset"], ["i", "=", "0", "\n", "sentence", "=", "list", "(", "sentence", ")", "\n", "# print(type(sentence))", "\n", "while", "i", "<", "len", "(", "sentence", ")", ":", "\n", "        ", "unigram", "=", "sentence", "[", "i", "]", "\n", "#print \"unigram:\", unigram", "\n", "if", "unigram", "in", "dictionary", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.bleu.Scorer.reset": [[69, 74], ["C.bleu_one_init", "C.bleu_zero_init", "ctypes.byref", "ctypes.byref"], "methods", ["None"], ["            ", "dictionary", "[", "unigram", "]", "+=", "1", "\n", "", "else", ":", "\n", "            ", "dictionary", "[", "unigram", "]", "=", "1", "\n", "", "i", "+=", "1", "\n", "", "return", "dictionary", "\n", "", "def", "biGramDictionary", "(", "sentence", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.bleu.Scorer.add": [[75, 99], ["ref.clone", "rref.contiguous().view.contiguous().view.contiguous().view", "pred.contiguous().view.contiguous().view.contiguous().view", "C.bleu_add", "isinstance", "TypeError", "isinstance", "TypeError", "rref.contiguous().view.contiguous().view.lt().any", "ctypes.byref", "ctypes.c_size_t", "ctypes.c_void_p", "ctypes.c_size_t", "ctypes.c_void_p", "ctypes.c_int", "ctypes.c_int", "rref.contiguous().view.contiguous().view.eq", "rref.contiguous().view.contiguous().view.contiguous", "pred.contiguous().view.contiguous().view.contiguous", "rref.contiguous().view.contiguous().view.size", "rref.contiguous().view.contiguous().view.data_ptr", "pred.contiguous().view.contiguous().view.size", "pred.contiguous().view.contiguous().view.data_ptr", "type", "type", "rref.contiguous().view.contiguous().view.lt"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["    ", "dictionary", "=", "{", "}", "\n", "sentence", "=", "list", "(", "sentence", ")", "\n", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "sentence", ")", ":", "\n", "        ", "if", "i", "+", "1", ">=", "len", "(", "sentence", ")", ":", "\n", "            ", "break", "\n", "", "bigram", "=", "\"\"", ".", "join", "(", "sentence", "[", "i", "]", ")", "+", "\" \"", "+", "\"\"", ".", "join", "(", "sentence", "[", "i", "+", "1", "]", ")", "\n", "#print \"bigram:\", bigram", "\n", "if", "bigram", "in", "dictionary", ":", "\n", "            ", "dictionary", "[", "bigram", "]", "+=", "1", "\n", "", "else", ":", "\n", "            ", "dictionary", "[", "bigram", "]", "=", "1", "\n", "", "i", "+=", "1", "\n", "", "return", "dictionary", "\n", "", "def", "triGramDictionary", "(", "sentence", ")", ":", "\n", "    ", "sentence", "=", "list", "(", "sentence", ")", "\n", "dictionary", "=", "{", "}", "\n", "#sentence = sentence[0]", "\n", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "sentence", ")", ":", "\n", "        ", "if", "i", "+", "2", ">=", "len", "(", "sentence", ")", ":", "\n", "            ", "break", "\n", "", "trigram", "=", "\"\"", ".", "join", "(", "sentence", "[", "i", "]", ")", "+", "\" \"", "+", "\"\"", ".", "join", "(", "sentence", "[", "i", "+", "1", "]", ")", "+", "\" \"", "+", "\"\"", ".", "join", "(", "sentence", "[", "i", "+", "2", "]", ")", "\n", "#print \"trigram:\", trigram", "\n", "if", "trigram", "in", "dictionary", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.bleu.Scorer.score": [[100, 104], ["sum", "bleu.Scorer.brevity", "math.exp", "math.log", "float", "bleu.Scorer.precision"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.bleu.Scorer.brevity", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.bleu.Scorer.precision"], ["            ", "dictionary", "[", "trigram", "]", "+=", "1", "\n", "", "else", ":", "\n", "            ", "dictionary", "[", "trigram", "]", "=", "1", "\n", "", "i", "+=", "1", "\n", "", "return", "dictionary", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.bleu.Scorer.precision": [[105, 114], ["bleu.Scorer.precision.ratio"], "methods", ["None"], ["", "def", "quadrupleGramDictionary", "(", "sentence", ")", ":", "\n", "    ", "sentence", "=", "list", "(", "sentence", ")", "\n", "dictionary", "=", "{", "}", "\n", "#sentence = sentence[0]", "\n", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "sentence", ")", ":", "\n", "        ", "if", "i", "+", "3", ">=", "len", "(", "sentence", ")", ":", "\n", "            ", "break", "\n", "", "quadruplegram", "=", "\"\"", ".", "join", "(", "sentence", "[", "i", "]", ")", "+", "\" \"", "+", "\"\"", ".", "join", "(", "sentence", "[", "i", "+", "1", "]", ")", "+", "\" \"", "+", "\"\"", ".", "join", "(", "sentence", "[", "i", "+", "2", "]", ")", "+", "\" \"", "+", "\"\"", ".", "join", "(", "sentence", "[", "i", "+", "3", "]", ")", "\n", "#print \"quadruplegram:\", quadruplegram", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.bleu.Scorer.brevity": [[116, 119], ["min", "math.exp"], "methods", ["None"], ["            ", "dictionary", "[", "quadruplegram", "]", "+=", "1", "\n", "", "else", ":", "\n", "            ", "dictionary", "[", "quadruplegram", "]", "=", "1", "\n", "", "i", "+=", "1", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.bleu.Scorer.result_string": [[120, 130], ["range", "fmt.format", "bleu.Scorer.score", "bleu.Scorer.brevity", "bleu.Scorer.precision"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.bleu.Scorer.score", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.bleu.Scorer.brevity", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.bleu.Scorer.precision"], ["\n", "", "return", "dictionary", "\n", "", "def", "uniGram", "(", "candidateSentence", ",", "referenceSentences", ")", ":", "\n", "    ", "referenceDict", "=", "[", "]", "\n", "reference", "=", "[", "]", "\n", "#candidateSentence=candidateSentence.lower().split()", "\n", "candidateSentence", "=", "filter", "(", "None", ",", "candidateSentence", ")", "\n", "candidateDict", "=", "uniGramDictionary", "(", "candidateSentence", ")", "\n", "count", "=", "0", "\n", "for", "line", "in", "referenceSentences", ":", "\n", "#line=line.lower().split()", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.__init__": [[35, 67], ["set", "fairseq.metrics.log_start_time", "torch.cuda.is_available", "trainer.Trainer._criterion.half", "trainer.Trainer._model.half", "trainer.Trainer._criterion.cuda", "trainer.Trainer._model.cuda", "torch.cuda.DoubleTensor"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_start_time", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lightconv_layer.lightconv_layer.LightconvLayer.half", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lightconv_layer.lightconv_layer.LightconvLayer.half"], ["\n", "\n", "def", "__init__", "(", "self", ",", "args", ",", "task", ",", "model", ",", "criterion", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "task", "=", "task", "\n", "\n", "self", ".", "cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "not", "args", ".", "cpu", "\n", "if", "self", ".", "cuda", ":", "\n", "            ", "self", ".", "device", "=", "torch", ".", "device", "(", "'cuda'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "device", "=", "torch", ".", "device", "(", "'cpu'", ")", "\n", "\n", "# copy model and criterion to current device", "\n", "", "self", ".", "_criterion", "=", "criterion", "\n", "self", ".", "_model", "=", "model", "\n", "if", "args", ".", "fp16", ":", "\n", "            ", "self", ".", "_criterion", "=", "self", ".", "_criterion", ".", "half", "(", ")", "\n", "self", ".", "_model", "=", "self", ".", "_model", ".", "half", "(", ")", "\n", "", "self", ".", "_criterion", "=", "self", ".", "_criterion", ".", "to", "(", "device", "=", "self", ".", "device", ")", "\n", "self", ".", "_model", "=", "self", ".", "_model", ".", "to", "(", "device", "=", "self", ".", "device", ")", "\n", "\n", "self", ".", "_dummy_batch", "=", "None", "\n", "self", ".", "_lr_scheduler", "=", "None", "\n", "self", ".", "_num_updates", "=", "0", "\n", "self", ".", "_optim_history", "=", "None", "\n", "self", ".", "_optimizer", "=", "None", "\n", "self", ".", "_warn_once", "=", "set", "(", ")", "\n", "self", ".", "_wrapped_criterion", "=", "None", "\n", "self", ".", "_wrapped_model", "=", "None", "\n", "\n", "if", "self", ".", "cuda", "and", "args", ".", "distributed_world_size", ">", "1", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.criterion": [[68, 82], ["fairseq.utils.has_parameters", "fairseq.models.DistributedFairseqModel"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.has_parameters", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.distributed_fairseq_model.DistributedFairseqModel"], ["            ", "self", ".", "_grad_norm_buf", "=", "torch", ".", "cuda", ".", "DoubleTensor", "(", "args", ".", "distributed_world_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_grad_norm_buf", "=", "None", "\n", "\n", "", "metrics", ".", "log_start_time", "(", "\"wall\"", ",", "priority", "=", "790", ",", "round", "=", "0", ")", "\n", "\n", "", "@", "property", "\n", "def", "criterion", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_wrapped_criterion", "is", "None", ":", "\n", "            ", "if", "(", "\n", "utils", ".", "has_parameters", "(", "self", ".", "_criterion", ")", "\n", "and", "self", ".", "args", ".", "distributed_world_size", ">", "1", "\n", "and", "not", "self", ".", "args", ".", "use_bmuf", "\n", ")", ":", "\n", "                ", "self", ".", "_wrapped_criterion", "=", "models", ".", "DistributedFairseqModel", "(", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.model": [[83, 93], ["fairseq.models.DistributedFairseqModel"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.distributed_fairseq_model.DistributedFairseqModel"], ["self", ".", "args", ",", "self", ".", "_criterion", "\n", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "_wrapped_criterion", "=", "self", ".", "_criterion", "\n", "", "", "return", "self", ".", "_wrapped_criterion", "\n", "\n", "", "@", "property", "\n", "def", "model", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_wrapped_model", "is", "None", ":", "\n", "            ", "if", "self", ".", "args", ".", "distributed_world_size", ">", "1", "and", "not", "self", ".", "args", ".", "use_bmuf", ":", "\n", "                ", "self", ".", "_wrapped_model", "=", "models", ".", "DistributedFairseqModel", "(", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.optimizer": [[94, 99], ["trainer.Trainer._build_optimizer"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer._build_optimizer"], ["self", ".", "args", ",", "self", ".", "_model", "\n", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "_wrapped_model", "=", "self", ".", "_model", "\n", "", "", "return", "self", ".", "_wrapped_model", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.lr_scheduler": [[100, 105], ["trainer.Trainer._build_optimizer"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer._build_optimizer"], ["", "@", "property", "\n", "def", "optimizer", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_optimizer", "is", "None", ":", "\n", "            ", "self", ".", "_build_optimizer", "(", ")", "\n", "", "return", "self", ".", "_optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer._build_optimizer": [[106, 138], ["list", "fairseq.optim.lr_scheduler.build_lr_scheduler", "trainer.Trainer._lr_scheduler.step_update", "filter", "fairseq.optim.build_optimizer", "fairseq.optim.FairseqBMUF", "itertools.chain", "print", "fairseq.optim.MemoryEfficientFP16Optimizer.build_optimizer", "fairseq.optim.FP16Optimizer.build_optimizer", "print", "trainer.Trainer.model.parameters", "trainer.Trainer.criterion.parameters", "torch.cuda.get_device_capability", "torch.cuda.get_device_capability"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.polynomial_decay_schedule.PolynomialDecaySchedule.step_update", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.build_optimizer", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.build_optimizer", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.build_optimizer", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], ["", "@", "property", "\n", "def", "lr_scheduler", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_lr_scheduler", "is", "None", ":", "\n", "            ", "self", ".", "_build_optimizer", "(", ")", "# this will initialize self._lr_scheduler", "\n", "", "return", "self", ".", "_lr_scheduler", "\n", "\n", "", "def", "_build_optimizer", "(", "self", ")", ":", "\n", "        ", "params", "=", "list", "(", "\n", "filter", "(", "\n", "lambda", "p", ":", "p", ".", "requires_grad", ",", "\n", "chain", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "self", ".", "criterion", ".", "parameters", "(", ")", ")", ",", "\n", ")", "\n", ")", "\n", "\n", "if", "self", ".", "args", ".", "fp16", ":", "\n", "            ", "if", "self", ".", "cuda", "and", "torch", ".", "cuda", ".", "get_device_capability", "(", "0", ")", "[", "0", "]", "<", "7", ":", "\n", "                ", "logger", ".", "info", "(", "\n", "\"NOTE: your device does NOT support faster training with --fp16, \"", "\n", "\"please switch to FP32 which is likely to be faster\"", "\n", ")", "\n", "", "if", "self", ".", "args", ".", "memory_efficient_fp16", ":", "\n", "                ", "self", ".", "_optimizer", "=", "optim", ".", "MemoryEfficientFP16Optimizer", ".", "build_optimizer", "(", "\n", "self", ".", "args", ",", "params", "\n", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "_optimizer", "=", "optim", ".", "FP16Optimizer", ".", "build_optimizer", "(", "self", ".", "args", ",", "params", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "self", ".", "cuda", "and", "torch", ".", "cuda", ".", "get_device_capability", "(", "0", ")", "[", "0", "]", ">=", "7", ":", "\n", "                ", "logger", ".", "info", "(", "\"NOTE: your device may support faster training with --fp16\"", ")", "\n", "", "self", ".", "_optimizer", "=", "optim", ".", "build_optimizer", "(", "self", ".", "args", ",", "params", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "use_bmuf", ":", "\n", "            ", "self", ".", "_optimizer", "=", "optim", ".", "FairseqBMUF", "(", "self", ".", "args", ",", "self", ".", "_optimizer", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.save_checkpoint": [[139, 153], ["fairseq.distributed_utils.is_master", "fairseq.metrics.state_dict", "fairseq.checkpoint_utils.save_state", "trainer.Trainer.get_model().state_dict", "trainer.Trainer.get_criterion", "trainer.Trainer.get_num_updates", "trainer.Trainer.get_model"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.distributed_utils.is_master", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.state_dict", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.checkpoint_utils.save_state", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.state_dict", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.get_criterion", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.bmuf.FairseqBMUF.get_num_updates", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.get_model"], ["\n", "# We should initialize the learning rate scheduler immediately after", "\n", "# building the optimizer, so that the initial learning rate is set.", "\n", "", "self", ".", "_lr_scheduler", "=", "lr_scheduler", ".", "build_lr_scheduler", "(", "self", ".", "args", ",", "self", ".", "optimizer", ")", "\n", "self", ".", "_lr_scheduler", ".", "step_update", "(", "0", ")", "\n", "\n", "", "def", "save_checkpoint", "(", "self", ",", "filename", ",", "extra_state", ")", ":", "\n", "        ", "\"\"\"Save all training state in a checkpoint file.\"\"\"", "\n", "if", "distributed_utils", ".", "is_master", "(", "self", ".", "args", ")", ":", "# only save one checkpoint", "\n", "            ", "extra_state", "[", "\"metrics\"", "]", "=", "metrics", ".", "state_dict", "(", ")", "\n", "checkpoint_utils", ".", "save_state", "(", "\n", "filename", ",", "\n", "self", ".", "args", ",", "\n", "self", ".", "get_model", "(", ")", ".", "state_dict", "(", ")", ",", "\n", "self", ".", "get_criterion", "(", ")", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.load_checkpoint": [[155, 229], ["fairseq.file_io.PathManager.isfile", "fairseq.checkpoint_utils.load_checkpoint_to_cpu", "fairseq.checkpoint_utils.load_checkpoint_to_cpu.get", "trainer.Trainer._build_optimizer", "trainer.Trainer.optimizer.load_state_dict", "trainer.Trainer.set_num_updates", "print", "trainer.Trainer.lr_step", "print", "trainer.Trainer.get_model().load_state_dict", "fairseq.utils.has_parameters", "trainer.Trainer.lr_scheduler.load_state_dict", "fairseq.metrics.load_state_dict", "fairseq.metrics.get_meters", "trainer.Trainer.get_criterion", "trainer.Trainer.get_criterion().load_state_dict", "Exception", "trainer.Trainer.get_num_updates", "isinstance", "trainer.Trainer.get_model", "trainer.Trainer.get_criterion", "meter.reset", "trainer.Trainer.get_criterion"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.isfile", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.checkpoint_utils.load_checkpoint_to_cpu", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer._build_optimizer", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.load_state_dict", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.bmuf.FairseqBMUF.set_num_updates", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.lr_step", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.load_state_dict", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.has_parameters", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.load_state_dict", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.load_state_dict", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.get_meters", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.get_criterion", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.load_state_dict", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.bmuf.FairseqBMUF.get_num_updates", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.get_model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.get_criterion", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.MetersDict.reset", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.get_criterion"], ["self", ".", "lr_scheduler", ",", "\n", "self", ".", "get_num_updates", "(", ")", ",", "\n", "self", ".", "_optim_history", ",", "\n", "extra_state", ",", "\n", ")", "\n", "\n", "", "", "def", "load_checkpoint", "(", "\n", "self", ",", "\n", "filename", ",", "\n", "reset_optimizer", "=", "False", ",", "\n", "reset_lr_scheduler", "=", "False", ",", "\n", "optimizer_overrides", "=", "None", ",", "\n", "reset_meters", "=", "False", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Load all training state from a checkpoint file.\"\"\"", "\n", "extra_state", ",", "self", ".", "_optim_history", ",", "last_optim_state", "=", "None", ",", "[", "]", ",", "None", "\n", "\n", "bexists", "=", "PathManager", ".", "isfile", "(", "filename", ")", "\n", "if", "bexists", ":", "\n", "            ", "state", "=", "checkpoint_utils", ".", "load_checkpoint_to_cpu", "(", "filename", ")", "\n", "\n", "# load model parameters", "\n", "try", ":", "\n", "                ", "self", ".", "get_model", "(", ")", ".", "load_state_dict", "(", "\n", "state", "[", "\"model\"", "]", ",", "strict", "=", "True", ",", "args", "=", "self", ".", "args", "\n", ")", "\n", "if", "utils", ".", "has_parameters", "(", "self", ".", "get_criterion", "(", ")", ")", ":", "\n", "                    ", "self", ".", "get_criterion", "(", ")", ".", "load_state_dict", "(", "\n", "state", "[", "\"criterion\"", "]", ",", "strict", "=", "True", "\n", ")", "\n", "", "", "except", "Exception", ":", "\n", "                ", "raise", "Exception", "(", "\n", "\"Cannot load model parameters from checkpoint {}; \"", "\n", "\"please ensure that the architectures match.\"", ".", "format", "(", "filename", ")", "\n", ")", "\n", "\n", "", "extra_state", "=", "state", "[", "\"extra_state\"", "]", "\n", "self", ".", "_optim_history", "=", "state", "[", "\"optimizer_history\"", "]", "\n", "last_optim_state", "=", "state", ".", "get", "(", "\"last_optimizer_state\"", ",", "None", ")", "\n", "\n", "", "if", "last_optim_state", "is", "not", "None", "and", "not", "reset_optimizer", ":", "\n", "# rebuild optimizer after loading model, since params may have changed", "\n", "            ", "self", ".", "_build_optimizer", "(", ")", "\n", "\n", "# only reload optimizer and lr_scheduler if they match", "\n", "last_optim", "=", "self", ".", "_optim_history", "[", "-", "1", "]", "\n", "assert", "(", "\n", "last_optim", "[", "\"criterion_name\"", "]", "==", "self", ".", "get_criterion", "(", ")", ".", "__class__", ".", "__name__", "\n", ")", ",", "\"Criterion does not match; please reset the optimizer (--reset-optimizer).\"", "\n", "assert", "(", "\n", "last_optim", "[", "\"optimizer_name\"", "]", "==", "self", ".", "optimizer", ".", "__class__", ".", "__name__", "\n", ")", ",", "\"Optimizer does not match; please reset the optimizer (--reset-optimizer).\"", "\n", "\n", "if", "not", "reset_lr_scheduler", ":", "\n", "                ", "self", ".", "lr_scheduler", ".", "load_state_dict", "(", "last_optim", "[", "\"lr_scheduler_state\"", "]", ")", "\n", "", "self", ".", "optimizer", ".", "load_state_dict", "(", "last_optim_state", ",", "optimizer_overrides", ")", "\n", "\n", "self", ".", "set_num_updates", "(", "last_optim", "[", "\"num_updates\"", "]", ")", "\n", "\n", "", "if", "extra_state", "is", "not", "None", ":", "\n", "            ", "epoch", "=", "extra_state", "[", "\"train_iterator\"", "]", "[", "\"epoch\"", "]", "\n", "logger", ".", "info", "(", "\n", "\"loaded checkpoint {} (epoch {} @ {} updates)\"", ".", "format", "(", "\n", "filename", ",", "epoch", ",", "self", ".", "get_num_updates", "(", ")", "\n", ")", "\n", ")", "\n", "\n", "self", ".", "lr_step", "(", "epoch", ")", "\n", "\n", "if", "\"metrics\"", "in", "extra_state", "and", "not", "reset_meters", ":", "\n", "                ", "metrics", ".", "load_state_dict", "(", "extra_state", "[", "\"metrics\"", "]", ")", "\n", "\n", "# reset TimeMeters, since their start times don't make sense anymore", "\n", "for", "meter", "in", "metrics", ".", "get_meters", "(", "\"default\"", ")", ":", "\n", "                    ", "if", "isinstance", "(", "meter", ",", "TimeMeter", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.get_train_iterator": [[230, 263], ["trainer.Trainer.task.get_batch_iterator", "print", "trainer.Trainer.task.load_dataset", "trainer.Trainer.task.dataset", "fairseq.utils.resolve_max_positions", "trainer.Trainer.task.max_positions", "trainer.Trainer.model.max_positions"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.fairseq_task.FairseqTask.get_batch_iterator", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyLMTask.load_dataset", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.fairseq_task.FairseqTask.dataset", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.resolve_max_positions", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.max_positions", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.max_positions"], ["                        ", "meter", ".", "reset", "(", ")", "\n", "", "", "", "", "else", ":", "\n", "            ", "logger", ".", "info", "(", "\"no existing checkpoint found {}\"", ".", "format", "(", "filename", ")", ")", "\n", "\n", "", "return", "extra_state", "\n", "\n", "", "def", "get_train_iterator", "(", "\n", "self", ",", "\n", "epoch", ",", "\n", "combine", "=", "True", ",", "\n", "load_dataset", "=", "True", ",", "\n", "data_selector", "=", "None", ",", "\n", "shard_batch_itr", "=", "True", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Return an EpochBatchIterator over the training set for a given epoch.\"\"\"", "\n", "if", "load_dataset", ":", "\n", "            ", "logger", ".", "info", "(", "\"loading train data for epoch {}\"", ".", "format", "(", "epoch", ")", ")", "\n", "self", ".", "task", ".", "load_dataset", "(", "\n", "self", ".", "args", ".", "train_subset", ",", "\n", "epoch", "=", "epoch", ",", "\n", "combine", "=", "combine", ",", "\n", "data_selector", "=", "data_selector", ",", "\n", ")", "\n", "", "return", "self", ".", "task", ".", "get_batch_iterator", "(", "\n", "dataset", "=", "self", ".", "task", ".", "dataset", "(", "self", ".", "args", ".", "train_subset", ")", ",", "\n", "max_tokens", "=", "self", ".", "args", ".", "max_tokens", ",", "\n", "max_sentences", "=", "self", ".", "args", ".", "max_sentences", ",", "\n", "max_positions", "=", "utils", ".", "resolve_max_positions", "(", "\n", "self", ".", "task", ".", "max_positions", "(", ")", ",", "\n", "self", ".", "model", ".", "max_positions", "(", ")", ",", "\n", "self", ".", "args", ".", "max_tokens", ",", "\n", ")", ",", "\n", "ignore_invalid_inputs", "=", "True", ",", "\n", "required_batch_size_multiple", "=", "self", ".", "args", ".", "required_batch_size_multiple", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.train_step": [[265, 412], ["fairseq.metrics.aggregate", "trainer.Trainer._set_seed", "trainer.Trainer.model.train", "trainer.Trainer.criterion.train", "trainer.Trainer.zero_grad", "enumerate", "trainer.Trainer._sync_stats", "fairseq.metrics.log_scalar", "trainer.Trainer.clear_buffered_stats", "fairseq.metrics.log_stop_time", "fairseq.metrics.log_start_time", "trainer.Trainer._prepare_sample", "trainer.Trainer.handle_ooms", "trainer.Trainer._aggregate_logging_outputs", "len", "print", "trainer.Trainer.zero_grad", "trainer.Trainer.optimizer.clip_grad_norm", "trainer.Trainer.optimizer.step", "trainer.Trainer.set_num_updates", "trainer.Trainer.task.update_step", "trainer.Trainer._reduce_and_log_stats", "fairseq.metrics.log_speed", "fairseq.metrics.log_scalar", "fairseq.metrics.log_scalar", "fairseq.metrics.log_scalar", "trainer.Trainer._prepare_sample", "len", "trainer.Trainer._sync_stats", "trainer.Trainer._check_grad_norms", "fairseq.utils.item", "torch.cuda.is_available", "torch.cuda.empty_cache", "print", "trainer.Trainer.zero_grad", "hasattr", "trainer.Trainer.model.no_sync", "contextlib.ExitStack", "trainer.Trainer.train_step.maybe_no_sync"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.aggregate", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer._set_seed", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.train.train", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.train.train", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer._MemoryEfficientFP16OptimizerMixin.zero_grad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer._sync_stats", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_scalar", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.clear_buffered_stats", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_stop_time", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_start_time", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer._prepare_sample", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.handle_ooms", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer._aggregate_logging_outputs", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer._MemoryEfficientFP16OptimizerMixin.zero_grad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer._MemoryEfficientFP16OptimizerMixin.clip_grad_norm", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.polynomial_decay_schedule.PolynomialDecaySchedule.step", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.bmuf.FairseqBMUF.set_num_updates", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.fairseq_task.FairseqTask.update_step", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer._reduce_and_log_stats", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_speed", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_scalar", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_scalar", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_scalar", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer._prepare_sample", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer._sync_stats", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer._check_grad_norms", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer._MemoryEfficientFP16OptimizerMixin.zero_grad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.legacy_distributed_data_parallel.LegacyDistributedDataParallel.no_sync"], ["num_shards", "=", "self", ".", "args", ".", "distributed_world_size", "if", "shard_batch_itr", "else", "1", ",", "\n", "shard_id", "=", "self", ".", "args", ".", "distributed_rank", "if", "shard_batch_itr", "else", "0", ",", "\n", "num_workers", "=", "self", ".", "args", ".", "num_workers", ",", "\n", "epoch", "=", "epoch", ",", "\n", ")", "\n", "\n", "", "@", "metrics", ".", "aggregate", "(", "\"train\"", ")", "\n", "def", "train_step", "(", "self", ",", "samples", ",", "raise_oom", "=", "False", ")", ":", "\n", "        ", "\"\"\"Do forward, backward and parameter update.\"\"\"", "\n", "if", "self", ".", "_dummy_batch", "is", "None", ":", "\n", "            ", "self", ".", "_dummy_batch", "=", "samples", "[", "0", "]", "\n", "\n", "", "self", ".", "_set_seed", "(", ")", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "self", ".", "criterion", ".", "train", "(", ")", "\n", "self", ".", "zero_grad", "(", ")", "\n", "\n", "metrics", ".", "log_start_time", "(", "\"train_wall\"", ",", "priority", "=", "800", ",", "round", "=", "0", ")", "\n", "\n", "# forward and backward pass", "\n", "logging_outputs", ",", "sample_size", ",", "ooms", "=", "[", "]", ",", "0", ",", "0", "\n", "for", "i", ",", "sample", "in", "enumerate", "(", "samples", ")", ":", "\n", "            ", "sample", "=", "self", ".", "_prepare_sample", "(", "sample", ")", "\n", "if", "sample", "is", "None", ":", "\n", "# when sample is None, run forward/backward on a dummy batch", "\n", "# and ignore the resulting gradients", "\n", "                ", "sample", "=", "self", ".", "_prepare_sample", "(", "self", ".", "_dummy_batch", ")", "\n", "is_dummy_batch", "=", "True", "\n", "", "else", ":", "\n", "                ", "is_dummy_batch", "=", "False", "\n", "\n", "", "def", "maybe_no_sync", "(", ")", ":", "\n", "                ", "\"\"\"\n                Whenever *samples* contains more than one mini-batch, we\n                want to accumulate gradients locally and only call\n                all-reduce in the last backwards pass.\n                \"\"\"", "\n", "if", "(", "\n", "self", ".", "args", ".", "distributed_world_size", ">", "1", "\n", "and", "hasattr", "(", "self", ".", "model", ",", "\"no_sync\"", ")", "\n", "and", "i", "<", "len", "(", "samples", ")", "-", "1", "\n", ")", ":", "\n", "                    ", "return", "self", ".", "model", ".", "no_sync", "(", ")", "\n", "", "else", ":", "\n", "                    ", "return", "contextlib", ".", "ExitStack", "(", ")", "# dummy contextmanager", "\n", "\n", "", "", "try", ":", "\n", "                ", "with", "maybe_no_sync", "(", ")", ":", "\n", "# forward and backward", "\n", "                    ", "loss", ",", "sample_size_i", ",", "logging_output", "=", "self", ".", "task", ".", "train_step", "(", "\n", "sample", "=", "sample", ",", "\n", "model", "=", "self", ".", "model", ",", "\n", "criterion", "=", "self", ".", "criterion", ",", "\n", "optimizer", "=", "self", ".", "optimizer", ",", "\n", "ignore_grad", "=", "is_dummy_batch", ",", "\n", ")", "\n", "del", "loss", "\n", "\n", "", "logging_outputs", ".", "append", "(", "logging_output", ")", "\n", "if", "not", "is_dummy_batch", ":", "\n", "                    ", "sample_size", "+=", "sample_size_i", "\n", "\n", "# emptying the CUDA cache after the first step can", "\n", "# reduce the chance of OOM", "\n", "", "if", "self", ".", "cuda", "and", "self", ".", "get_num_updates", "(", ")", "==", "0", ":", "\n", "                    ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "", "", "except", "RuntimeError", "as", "e", ":", "\n", "                ", "if", "\"out of memory\"", "in", "str", "(", "e", ")", ":", "\n", "                    ", "self", ".", "_log_oom", "(", "e", ")", "\n", "if", "raise_oom", ":", "\n", "                        ", "raise", "e", "\n", "", "logger", ".", "warning", "(", "\n", "\"attempting to recover from OOM in forward/backward pass\"", "\n", ")", "\n", "ooms", "+=", "1", "\n", "self", ".", "zero_grad", "(", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "e", "\n", "\n", "# gather logging outputs from all replicas", "\n", "", "", "", "if", "self", ".", "_sync_stats", "(", ")", ":", "\n", "            ", "logging_outputs", ",", "(", "sample_size", ",", "ooms", ")", "=", "self", ".", "_aggregate_logging_outputs", "(", "\n", "logging_outputs", ",", "sample_size", ",", "ooms", ",", "ignore", "=", "is_dummy_batch", ",", "\n", ")", "\n", "\n", "", "metrics", ".", "log_scalar", "(", "\"oom\"", ",", "ooms", ",", "len", "(", "samples", ")", ",", "priority", "=", "600", ",", "round", "=", "3", ")", "\n", "if", "ooms", "==", "self", ".", "args", ".", "distributed_world_size", "*", "len", "(", "samples", ")", ":", "\n", "            ", "logger", ".", "warning", "(", "\"OOM in all workers, skipping update\"", ")", "\n", "self", ".", "zero_grad", "(", ")", "\n", "return", "None", "\n", "\n", "", "try", ":", "\n", "# normalize grads by sample size", "\n", "            ", "if", "sample_size", ">", "0", ":", "\n", "                ", "if", "self", ".", "_sync_stats", "(", ")", ":", "\n", "# multiply gradients by (# GPUs / sample_size) since DDP", "\n", "# already normalizes by the number of GPUs. Thus we get", "\n", "# (sum_of_gradients / sample_size).", "\n", "                    ", "self", ".", "optimizer", ".", "multiply_grads", "(", "self", ".", "args", ".", "distributed_world_size", "/", "sample_size", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "optimizer", ".", "multiply_grads", "(", "1", "/", "sample_size", ")", "\n", "\n", "# clip grads", "\n", "", "", "grad_norm", "=", "self", ".", "optimizer", ".", "clip_grad_norm", "(", "self", ".", "args", ".", "clip_norm", ")", "\n", "\n", "# check that grad norms are consistent across workers", "\n", "if", "not", "self", ".", "args", ".", "use_bmuf", ":", "\n", "                ", "self", ".", "_check_grad_norms", "(", "grad_norm", ")", "\n", "\n", "# take an optimization step", "\n", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "set_num_updates", "(", "self", ".", "get_num_updates", "(", ")", "+", "1", ")", "\n", "\n", "# task specific update per step", "\n", "self", ".", "task", ".", "update_step", "(", "self", ".", "get_num_updates", "(", ")", ")", "\n", "\n", "# log stats", "\n", "logging_output", "=", "self", ".", "_reduce_and_log_stats", "(", "logging_outputs", ",", "sample_size", ")", "\n", "metrics", ".", "log_speed", "(", "\"ups\"", ",", "1.", ",", "ignore_first", "=", "10", ",", "priority", "=", "100", ",", "round", "=", "2", ")", "\n", "metrics", ".", "log_scalar", "(", "\"gnorm\"", ",", "utils", ".", "item", "(", "grad_norm", ")", ",", "priority", "=", "400", ",", "round", "=", "3", ")", "\n", "metrics", ".", "log_scalar", "(", "\n", "\"clip\"", ",", "\n", "100", "if", "grad_norm", ">", "self", ".", "args", ".", "clip_norm", ">", "0", "else", "0", ",", "\n", "priority", "=", "500", ",", "\n", "round", "=", "1", ",", "\n", ")", "\n", "\n", "# clear CUDA cache to reduce memory fragmentation", "\n", "if", "(", "\n", "self", ".", "args", ".", "empty_cache_freq", ">", "0", "\n", "and", "(", "\n", "(", "self", ".", "get_num_updates", "(", ")", "+", "self", ".", "args", ".", "empty_cache_freq", "-", "1", ")", "\n", "%", "self", ".", "args", ".", "empty_cache_freq", "\n", ")", "==", "0", "\n", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "and", "not", "self", ".", "args", ".", "cpu", "\n", ")", ":", "\n", "                ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "", "", "except", "OverflowError", "as", "e", ":", "\n", "            ", "logger", ".", "info", "(", "\"NOTE: overflow detected, \"", "+", "str", "(", "e", ")", ")", "\n", "self", ".", "zero_grad", "(", ")", "\n", "logging_output", "=", "None", "\n", "", "except", "RuntimeError", "as", "e", ":", "\n", "            ", "if", "\"out of memory\"", "in", "str", "(", "e", ")", ":", "\n", "                ", "self", ".", "_log_oom", "(", "e", ")", "\n", "logger", ".", "error", "(", "\"OOM during optimization, irrecoverable\"", ")", "\n", "", "raise", "e", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.valid_step": [[413, 461], ["fairseq.metrics.aggregate", "trainer.Trainer._reduce_and_log_stats", "torch.no_grad", "trainer.Trainer.model.eval", "trainer.Trainer.criterion.eval", "trainer.Trainer._prepare_sample", "trainer.Trainer._aggregate_logging_outputs", "trainer.Trainer._prepare_sample", "trainer.Trainer.task.valid_step", "str", "trainer.Trainer._log_oom", "print", "trainer.Trainer.model.parameters", "trainer.Trainer.valid_step", "torch.cuda.empty_cache"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.aggregate", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer._reduce_and_log_stats", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer._prepare_sample", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer._aggregate_logging_outputs", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer._prepare_sample", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.translation_moe.TranslationMoETask.valid_step", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer._log_oom", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.translation_moe.TranslationMoETask.valid_step"], ["", "if", "self", ".", "args", ".", "fp16", ":", "\n", "            ", "metrics", ".", "log_scalar", "(", "\"loss_scale\"", ",", "self", ".", "optimizer", ".", "scaler", ".", "loss_scale", ",", "priority", "=", "700", ",", "round", "=", "0", ")", "\n", "\n", "", "metrics", ".", "log_stop_time", "(", "\"train_wall\"", ")", "\n", "\n", "return", "logging_output", "\n", "\n", "", "@", "metrics", ".", "aggregate", "(", "\"valid\"", ")", "\n", "def", "valid_step", "(", "self", ",", "sample", ",", "raise_oom", "=", "False", ")", ":", "\n", "        ", "\"\"\"Do forward pass in evaluation mode.\"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "model", ".", "eval", "(", ")", "\n", "self", ".", "criterion", ".", "eval", "(", ")", "\n", "\n", "sample", "=", "self", ".", "_prepare_sample", "(", "sample", ")", "\n", "if", "sample", "is", "None", ":", "\n", "                ", "sample", "=", "self", ".", "_prepare_sample", "(", "self", ".", "_dummy_batch", ")", "\n", "is_dummy_batch", "=", "True", "\n", "", "else", ":", "\n", "                ", "is_dummy_batch", "=", "False", "\n", "\n", "", "try", ":", "\n", "                ", "_loss", ",", "sample_size", ",", "logging_output", "=", "self", ".", "task", ".", "valid_step", "(", "\n", "sample", ",", "self", ".", "model", ",", "self", ".", "criterion", "\n", ")", "\n", "", "except", "RuntimeError", "as", "e", ":", "\n", "                ", "if", "\"out of memory\"", "in", "str", "(", "e", ")", ":", "\n", "                    ", "self", ".", "_log_oom", "(", "e", ")", "\n", "if", "not", "raise_oom", ":", "\n", "                        ", "logger", ".", "warning", "(", "\n", "\"ran out of memory in validation step, retrying batch\"", "\n", ")", "\n", "for", "p", "in", "self", ".", "model", ".", "parameters", "(", ")", ":", "\n", "                            ", "if", "p", ".", "grad", "is", "not", "None", ":", "\n", "                                ", "p", ".", "grad", "=", "None", "# free some memory", "\n", "", "", "if", "self", ".", "cuda", ":", "\n", "                            ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "", "return", "self", ".", "valid_step", "(", "sample", ",", "raise_oom", "=", "True", ")", "\n", "", "", "raise", "e", "\n", "\n", "", "logging_outputs", "=", "[", "logging_output", "]", "\n", "if", "is_dummy_batch", ":", "\n", "                ", "sample_size", "=", "0", "\n", "\n", "# gather logging outputs from all replicas", "\n", "", "", "if", "self", ".", "args", ".", "distributed_world_size", ">", "1", ":", "\n", "            ", "logging_outputs", ",", "(", "sample_size", ",", ")", "=", "self", ".", "_aggregate_logging_outputs", "(", "\n", "logging_outputs", ",", "sample_size", ",", "ignore", "=", "is_dummy_batch", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.zero_grad": [[476, 478], ["trainer.Trainer.optimizer.zero_grad"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer._MemoryEfficientFP16OptimizerMixin.zero_grad"], ["\n", "", "def", "lr_step_update", "(", "self", ")", ":", "\n", "        ", "\"\"\"Update the learning rate after each update.\"\"\"", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.lr_step": [[482, 487], ["trainer.Trainer.lr_scheduler.step", "trainer.Trainer.lr_step_update"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.polynomial_decay_schedule.PolynomialDecaySchedule.step", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.lr_step_update"], ["\n", "", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get the current learning rate.\"\"\"", "\n", "return", "self", ".", "optimizer", ".", "get_lr", "(", ")", "\n", "\n", "", "def", "get_model", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.lr_step_update": [[488, 493], ["trainer.Trainer.lr_scheduler.step_update", "fairseq.metrics.log_scalar", "trainer.Trainer.get_num_updates"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.polynomial_decay_schedule.PolynomialDecaySchedule.step_update", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_scalar", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.bmuf.FairseqBMUF.get_num_updates"], ["        ", "\"\"\"Get the (non-wrapped) model instance.\"\"\"", "\n", "return", "self", ".", "_model", "\n", "\n", "", "def", "get_criterion", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get the (non-wrapped) criterion instance.\"\"\"", "\n", "return", "self", ".", "_criterion", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.get_lr": [[494, 497], ["trainer.Trainer.optimizer.get_lr"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.get_lr"], ["\n", "", "def", "get_meter", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"[deprecated] Get a specific meter by name.\"\"\"", "\n", "from", "fairseq", "import", "meters", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.get_model": [[498, 501], ["None"], "methods", ["None"], ["\n", "if", "'get_meter'", "not", "in", "self", ".", "_warn_once", ":", "\n", "            ", "self", ".", "_warn_once", ".", "add", "(", "'get_meter'", ")", "\n", "utils", ".", "deprecation_warning", "(", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.get_criterion": [[502, 505], ["None"], "methods", ["None"], ["'Trainer.get_meter is deprecated. Please use fairseq.metrics instead.'", "\n", ")", "\n", "\n", "", "train_meters", "=", "metrics", ".", "get_meters", "(", "\"train\"", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.get_meter": [[506, 544], ["fairseq.metrics.get_meters", "trainer.Trainer._warn_once.add", "fairseq.utils.deprecation_warning", "fairseq.metrics.get_meters.get", "meters.AverageMeter", "fairseq.metrics.get_meter", "meters.TimeMeter", "fairseq.metrics.get_meter", "meters.TimeMeter", "fairseq.metrics.get_meter", "meters.AverageMeter", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.get_meters", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.eval_lm.WordStat.add", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.deprecation_warning", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.get_meter", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.get_meter", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.get_meter"], ["if", "train_meters", "is", "None", ":", "\n", "            ", "train_meters", "=", "{", "}", "\n", "\n", "", "if", "name", "==", "\"train_loss\"", "and", "\"loss\"", "in", "train_meters", ":", "\n", "            ", "return", "train_meters", "[", "\"loss\"", "]", "\n", "", "elif", "name", "==", "\"train_nll_loss\"", ":", "\n", "# support for legacy train.py, which assumed this meter is", "\n", "# always initialized", "\n", "            ", "m", "=", "train_meters", ".", "get", "(", "\"nll_loss\"", ",", "None", ")", "\n", "return", "m", "or", "meters", ".", "AverageMeter", "(", ")", "\n", "", "elif", "name", "==", "\"wall\"", ":", "\n", "# support for legacy train.py, which assumed this meter is", "\n", "# always initialized", "\n", "            ", "m", "=", "metrics", ".", "get_meter", "(", "\"default\"", ",", "\"wall\"", ")", "\n", "return", "m", "or", "meters", ".", "TimeMeter", "(", ")", "\n", "", "elif", "name", "==", "\"wps\"", ":", "\n", "            ", "m", "=", "metrics", ".", "get_meter", "(", "\"train\"", ",", "\"wps\"", ")", "\n", "return", "m", "or", "meters", ".", "TimeMeter", "(", ")", "\n", "", "elif", "name", "in", "{", "\"valid_loss\"", ",", "\"valid_nll_loss\"", "}", ":", "\n", "# support for legacy train.py, which assumed these meters", "\n", "# are always initialized", "\n", "            ", "k", "=", "name", "[", "len", "(", "\"valid_\"", ")", ":", "]", "\n", "m", "=", "metrics", ".", "get_meter", "(", "\"valid\"", ",", "k", ")", "\n", "return", "m", "or", "meters", ".", "AverageMeter", "(", ")", "\n", "", "elif", "name", "in", "train_meters", ":", "\n", "            ", "return", "train_meters", "[", "name", "]", "\n", "", "return", "None", "\n", "\n", "", "def", "get_num_updates", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get the number of parameters updates.\"\"\"", "\n", "return", "self", ".", "_num_updates", "\n", "\n", "", "def", "set_num_updates", "(", "self", ",", "num_updates", ")", ":", "\n", "        ", "\"\"\"Set the number of parameters updates.\"\"\"", "\n", "self", ".", "_num_updates", "=", "num_updates", "\n", "self", ".", "lr_step_update", "(", ")", "\n", "metrics", ".", "log_scalar", "(", "\"num_updates\"", ",", "self", ".", "_num_updates", ",", "weight", "=", "0", ",", "priority", "=", "200", ")", "\n", "\n", "", "def", "_prepare_sample", "(", "self", ",", "sample", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.get_num_updates": [[545, 548], ["None"], "methods", ["None"], ["        ", "if", "sample", "is", "None", "or", "len", "(", "sample", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "\n", "", "if", "self", ".", "cuda", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.set_num_updates": [[549, 554], ["trainer.Trainer.lr_step_update", "fairseq.metrics.log_scalar"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.lr_step_update", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_scalar"], ["            ", "sample", "=", "utils", ".", "move_to_cuda", "(", "sample", ")", "\n", "\n", "", "def", "apply_half", "(", "t", ")", ":", "\n", "            ", "if", "t", ".", "dtype", "is", "torch", ".", "float32", ":", "\n", "                ", "return", "t", ".", "half", "(", ")", "\n", "", "return", "t", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer._prepare_sample": [[555, 571], ["fairseq.utils.move_to_cuda", "fairseq.utils.apply_to_sample", "len", "t.half"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.move_to_cuda", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.apply_to_sample", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lightconv_layer.lightconv_layer.LightconvLayer.half"], ["\n", "", "if", "self", ".", "args", ".", "fp16", ":", "\n", "            ", "sample", "=", "utils", ".", "apply_to_sample", "(", "apply_half", ",", "sample", ")", "\n", "\n", "", "return", "sample", "\n", "\n", "", "def", "_set_seed", "(", "self", ")", ":", "\n", "# Set seed based on args.seed and the update number so that we get", "\n", "# reproducible results when resuming from checkpoints", "\n", "        ", "seed", "=", "self", ".", "args", ".", "seed", "+", "self", ".", "get_num_updates", "(", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "if", "self", ".", "cuda", ":", "\n", "            ", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "\n", "", "", "def", "_sync_stats", "(", "self", ")", ":", "\n", "# Return True if it's using multiple GPUs and DDP or multiple GPUs with", "\n", "# BMUF and it's a bmuf sync with warmup iterations completed before.", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer._set_seed": [[572, 579], ["torch.manual_seed", "trainer.Trainer.get_num_updates", "torch.cuda.manual_seed"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.bmuf.FairseqBMUF.get_num_updates"], ["        ", "return", "self", ".", "args", ".", "distributed_world_size", ">", "1", "and", "(", "\n", "(", "not", "self", ".", "args", ".", "use_bmuf", ")", "\n", "or", "(", "\n", "self", ".", "args", ".", "use_bmuf", "\n", "and", "(", "self", ".", "get_num_updates", "(", ")", "+", "1", ")", "%", "self", ".", "args", ".", "global_sync_iter", "==", "0", "\n", "and", "(", "self", ".", "get_num_updates", "(", ")", "+", "1", ")", ">", "self", ".", "args", ".", "warmup_iterations", "\n", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer._sync_stats": [[580, 589], ["trainer.Trainer.get_num_updates", "trainer.Trainer.get_num_updates"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.bmuf.FairseqBMUF.get_num_updates", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.bmuf.FairseqBMUF.get_num_updates"], ["\n", "", "def", "_log_oom", "(", "self", ",", "exc", ")", ":", "\n", "        ", "msg", "=", "\"OOM: Ran out of memory with exception: {}\"", ".", "format", "(", "exc", ")", "\n", "logger", ".", "warning", "(", "msg", ")", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "hasattr", "(", "torch", ".", "cuda", ",", "\"memory_summary\"", ")", ":", "\n", "            ", "for", "device_idx", "in", "range", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ")", ":", "\n", "                ", "logger", ".", "warning", "(", "torch", ".", "cuda", ".", "memory_summary", "(", "device", "=", "device_idx", ")", ")", "\n", "", "", "sys", ".", "stderr", ".", "flush", "(", ")", "\n", "\n", "", "def", "_aggregate_logging_outputs", "(", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer._log_oom": [[592, 603], ["print", "sys.stderr.flush", "torch.cuda.is_available", "hasattr", "range", "torch.cuda.device_count", "print", "torch.cuda.memory_summary"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], ["*", "extra_stats_to_sum", ",", "\n", "ignore", "=", "False", ",", "\n", ")", ":", "\n", "        ", "if", "self", ".", "task", ".", "__class__", ".", "logging_outputs_can_be_summed", "(", "self", ".", "get_criterion", "(", ")", ")", ":", "\n", "            ", "return", "self", ".", "_fast_stat_sync_sum", "(", "\n", "logging_outputs", ",", "*", "extra_stats_to_sum", ",", "ignore", "=", "ignore", "\n", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_all_gather_list_sync", "(", "\n", "logging_outputs", ",", "*", "extra_stats_to_sum", ",", "ignore", "=", "ignore", "\n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer._aggregate_logging_outputs": [[604, 613], ["trainer.Trainer.get_criterion().__class__.logging_outputs_can_be_summed", "trainer.Trainer._fast_stat_sync_sum", "trainer.Trainer._all_gather_list_sync", "trainer.Trainer.get_criterion"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.sentence_prediction.SentencePredictionCriterion.logging_outputs_can_be_summed", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer._fast_stat_sync_sum", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer._all_gather_list_sync", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.get_criterion"], ["", "", "def", "_all_gather_list_sync", "(", "\n", "self", ",", "\n", "logging_outputs", ":", "List", "[", "Dict", "[", "str", ",", "Any", "]", "]", ",", "\n", "*", "extra_stats_to_sum", ",", "\n", "ignore", "=", "False", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Sync logging outputs across workers. all_gather_list_sync is\n        suitable when logging outputs are complex types.\n        \"\"\"", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer._all_gather_list_sync": [[614, 633], ["list", "list", "zip", "itertools.chain.from_iterable", "sum", "fairseq.distributed_utils.all_gather_list", "list", "getattr"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.distributed_utils.all_gather_list"], ["if", "ignore", ":", "\n", "            ", "logging_outputs", "=", "[", "]", "\n", "", "results", "=", "list", "(", "zip", "(", "\n", "*", "distributed_utils", ".", "all_gather_list", "(", "\n", "[", "logging_outputs", "]", "+", "list", "(", "extra_stats_to_sum", ")", ",", "\n", "max_size", "=", "getattr", "(", "self", ".", "args", ",", "'all_gather_list_size'", ",", "16384", ")", ",", "\n", ")", "\n", ")", ")", "\n", "logging_outputs", ",", "extra_stats_to_sum", "=", "results", "[", "0", "]", ",", "results", "[", "1", ":", "]", "\n", "logging_outputs", "=", "list", "(", "chain", ".", "from_iterable", "(", "logging_outputs", ")", ")", "\n", "extra_stats_to_sum", "=", "[", "sum", "(", "s", ")", "for", "s", "in", "extra_stats_to_sum", "]", "\n", "return", "logging_outputs", ",", "extra_stats_to_sum", "\n", "\n", "", "def", "_fast_stat_sync_sum", "(", "\n", "self", ",", "\n", "logging_outputs", ":", "List", "[", "Dict", "[", "str", ",", "Any", "]", "]", ",", "\n", "*", "extra_stats_to_sum", ",", "\n", "ignore", "=", "False", ",", "\n", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer._fast_stat_sync_sum": [[634, 674], ["len", "fairseq.distributed_utils.all_reduce", "torch.zeros.tolist", "len", "sorted", "torch.cuda.DoubleTensor", "torch.zeros", "trainer.Trainer._all_gather_list_sync", "logging_outputs[].keys", "list", "sum", "len", "enumerate", "log.get"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.distributed_utils.all_reduce", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer._all_gather_list_sync"], ["\n", "data", "=", "{", "}", "\n", "for", "i", ",", "stat", "in", "enumerate", "(", "extra_stats_to_sum", ")", ":", "\n", "            ", "data", "[", "'extra_stats_'", "+", "str", "(", "i", ")", "]", "=", "stat", "\n", "", "if", "len", "(", "logging_outputs", ")", ">", "0", ":", "\n", "            ", "log_keys", "=", "list", "(", "logging_outputs", "[", "0", "]", ".", "keys", "(", ")", ")", "\n", "for", "k", "in", "log_keys", ":", "\n", "                ", "if", "not", "ignore", ":", "\n", "                    ", "v", "=", "sum", "(", "log", "[", "k", "]", "for", "log", "in", "logging_outputs", "if", "k", "in", "log", ")", "\n", "", "else", ":", "\n", "                    ", "v", "=", "logging_outputs", "[", "0", "]", "[", "k", "]", "\n", "v", "=", "torch", ".", "zeros_like", "(", "v", ")", "if", "torch", ".", "is_tensor", "(", "v", ")", "else", "0", "\n", "", "data", "[", "'logging_outputs_'", "+", "k", "]", "=", "v", "\n", "", "", "else", ":", "\n", "            ", "log_keys", "=", "None", "\n", "\n", "", "data", "=", "distributed_utils", ".", "all_reduce_dict", "(", "\n", "data", ",", "\n", "device", "=", "self", ".", "device", ",", "\n", ")", "\n", "\n", "extra_stats_to_sum", "=", "[", "\n", "data", "[", "'extra_stats_'", "+", "str", "(", "i", ")", "]", "for", "i", "in", "range", "(", "len", "(", "extra_stats_to_sum", ")", ")", "\n", "]", "\n", "if", "log_keys", "is", "not", "None", ":", "\n", "            ", "logging_outputs", "=", "[", "{", "k", ":", "data", "[", "'logging_outputs_'", "+", "k", "]", "for", "k", "in", "log_keys", "}", "]", "\n", "", "else", ":", "\n", "            ", "logging_outputs", "=", "[", "]", "\n", "", "return", "logging_outputs", ",", "extra_stats_to_sum", "\n", "\n", "", "def", "_check_grad_norms", "(", "self", ",", "grad_norm", ")", ":", "\n", "        ", "\"\"\"Check that grad norms are consistent across workers.\"\"\"", "\n", "if", "self", ".", "_grad_norm_buf", "is", "not", "None", ":", "\n", "            ", "self", ".", "_grad_norm_buf", ".", "zero_", "(", ")", "\n", "self", ".", "_grad_norm_buf", "[", "self", ".", "args", ".", "distributed_rank", "]", "=", "grad_norm", "\n", "distributed_utils", ".", "all_reduce", "(", "self", ".", "_grad_norm_buf", ")", "\n", "if", "not", "(", "self", ".", "_grad_norm_buf", "==", "self", ".", "_grad_norm_buf", "[", "0", "]", ")", ".", "all", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer._check_grad_norms": [[675, 684], ["trainer.Trainer._grad_norm_buf.zero_", "fairseq.distributed_utils.all_reduce", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.distributed_utils.all_reduce"], ["                ", "raise", "RuntimeError", "(", "\n", "\"Fatal error: gradients are inconsistent between workers. \"", "\n", "\"Try --ddp-backend=no_c10d.\"", "\n", ")", "\n", "\n", "", "", "", "def", "_reduce_and_log_stats", "(", "self", ",", "logging_outputs", ",", "sample_size", ")", ":", "\n", "        ", "if", "logging_outputs", "is", "None", "or", "len", "(", "logging_outputs", ")", "==", "0", ":", "\n", "            ", "return", "{", "\"sample_size\"", ":", "sample_size", "}", "\n", "", "with", "metrics", ".", "aggregate", "(", ")", "as", "agg", ":", "\n", "# convert logging_outputs to CPU to avoid unnecessary", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer._reduce_and_log_stats": [[687, 705], ["fairseq.metrics.aggregate", "fairseq.utils.apply_to_sample", "trainer.Trainer.task.reduce_metrics", "agg.get_smoothed_values", "trainer.Trainer.get_criterion", "t.to"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.aggregate", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.apply_to_sample", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.sentence_prediction.SentencePredictionCriterion.reduce_metrics", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.MetersDict.get_smoothed_values", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.get_criterion"], ["lambda", "t", ":", "t", ".", "to", "(", "device", "=", "'cpu'", ",", "non_blocking", "=", "True", ")", ",", "\n", "logging_outputs", "\n", ")", "\n", "\n", "self", ".", "task", ".", "reduce_metrics", "(", "logging_outputs", ",", "self", ".", "get_criterion", "(", ")", ")", "\n", "\n", "# support legacy interface", "\n", "logging_output", "=", "agg", ".", "get_smoothed_values", "(", ")", "\n", "logging_output", "[", "\"sample_size\"", "]", "=", "sample_size", "\n", "for", "key_to_delete", "in", "[", "\"ppl\"", ",", "\"wps\"", ",", "\"wpb\"", ",", "\"bsz\"", "]", ":", "\n", "                ", "if", "key_to_delete", "in", "logging_output", ":", "\n", "                    ", "del", "logging_output", "[", "key_to_delete", "]", "\n", "", "", "return", "logging_output", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.pdb.MultiprocessingPdb.__init__": [[29, 31], ["pdb.Pdb.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "pdb", ".", "Pdb", ".", "__init__", "(", "self", ",", "nosigint", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.pdb.MultiprocessingPdb._cmdloop": [[32, 43], ["pdb.MultiprocessingPdb.cmdloop", "os.fdopen"], "methods", ["None"], ["", "def", "_cmdloop", "(", "self", ")", ":", "\n", "        ", "stdin_bak", "=", "sys", ".", "stdin", "\n", "with", "_stdin_lock", ":", "\n", "            ", "try", ":", "\n", "                ", "if", "_stdin_fd", "is", "not", "None", ":", "\n", "                    ", "if", "not", "_stdin", "[", "0", "]", ":", "\n", "                        ", "_stdin", "[", "0", "]", "=", "os", ".", "fdopen", "(", "_stdin_fd", ")", "\n", "", "sys", ".", "stdin", "=", "_stdin", "[", "0", "]", "\n", "", "self", ".", "cmdloop", "(", ")", "\n", "", "finally", ":", "\n", "                ", "sys", ".", "stdin", "=", "stdin_bak", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.pdb.set_trace": [[45, 48], ["pdb.MultiprocessingPdb", "MultiprocessingPdb.set_trace", "sys._getframe"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.pdb.set_trace"], ["", "", "", "", "def", "set_trace", "(", ")", ":", "\n", "    ", "pdb", "=", "MultiprocessingPdb", "(", ")", "\n", "pdb", ".", "set_trace", "(", "sys", ".", "_getframe", "(", ")", ".", "f_back", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.registry.setup_registry": [[12, 63], ["registry_name[].replace.startswith", "registry_name[].replace", "set", "getattr", "hasattr", "registry.set_defaults", "getattr.", "getattr", "set.add", "ValueError", "ValueError", "ValueError", "issubclass"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.registry.set_defaults", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.eval_lm.WordStat.add"], ["def", "setup_registry", "(", "\n", "registry_name", ":", "str", ",", "\n", "base_class", "=", "None", ",", "\n", "default", "=", "None", ",", "\n", ")", ":", "\n", "    ", "assert", "registry_name", ".", "startswith", "(", "'--'", ")", "\n", "registry_name", "=", "registry_name", "[", "2", ":", "]", ".", "replace", "(", "'-'", ",", "'_'", ")", "\n", "\n", "REGISTRY", "=", "{", "}", "\n", "REGISTRY_CLASS_NAMES", "=", "set", "(", ")", "\n", "\n", "# maintain a registry of all registries", "\n", "if", "registry_name", "in", "REGISTRIES", ":", "\n", "        ", "return", "# registry already exists", "\n", "", "REGISTRIES", "[", "registry_name", "]", "=", "{", "\n", "'registry'", ":", "REGISTRY", ",", "\n", "'default'", ":", "default", ",", "\n", "}", "\n", "\n", "def", "build_x", "(", "args", ",", "*", "extra_args", ",", "**", "extra_kwargs", ")", ":", "\n", "        ", "choice", "=", "getattr", "(", "args", ",", "registry_name", ",", "None", ")", "\n", "if", "choice", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "cls", "=", "REGISTRY", "[", "choice", "]", "\n", "if", "hasattr", "(", "cls", ",", "'build_'", "+", "registry_name", ")", ":", "\n", "            ", "builder", "=", "getattr", "(", "cls", ",", "'build_'", "+", "registry_name", ")", "\n", "", "else", ":", "\n", "            ", "builder", "=", "cls", "\n", "", "set_defaults", "(", "args", ",", "cls", ")", "\n", "return", "builder", "(", "args", ",", "*", "extra_args", ",", "**", "extra_kwargs", ")", "\n", "\n", "", "def", "register_x", "(", "name", ")", ":", "\n", "\n", "        ", "def", "register_x_cls", "(", "cls", ")", ":", "\n", "            ", "if", "name", "in", "REGISTRY", ":", "\n", "                ", "raise", "ValueError", "(", "'Cannot register duplicate {} ({})'", ".", "format", "(", "registry_name", ",", "name", ")", ")", "\n", "", "if", "cls", ".", "__name__", "in", "REGISTRY_CLASS_NAMES", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "'Cannot register {} with duplicate class name ({})'", ".", "format", "(", "\n", "registry_name", ",", "cls", ".", "__name__", ",", "\n", ")", "\n", ")", "\n", "", "if", "base_class", "is", "not", "None", "and", "not", "issubclass", "(", "cls", ",", "base_class", ")", ":", "\n", "                ", "raise", "ValueError", "(", "'{} must extend {}'", ".", "format", "(", "cls", ".", "__name__", ",", "base_class", ".", "__name__", ")", ")", "\n", "", "REGISTRY", "[", "name", "]", "=", "cls", "\n", "REGISTRY_CLASS_NAMES", ".", "add", "(", "cls", ".", "__name__", ")", "\n", "return", "cls", "\n", "\n", "", "return", "register_x_cls", "\n", "\n", "", "return", "build_x", ",", "register_x", ",", "REGISTRY", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.registry.set_defaults": [[65, 81], ["argparse.ArgumentParser", "cls.add_args", "argparse.Namespace", "vars().items", "hasattr", "vars", "hasattr", "setattr", "hasattr", "setattr"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.add_args"], ["", "def", "set_defaults", "(", "args", ",", "cls", ")", ":", "\n", "    ", "\"\"\"Helper to set default arguments based on *add_args*.\"\"\"", "\n", "if", "not", "hasattr", "(", "cls", ",", "'add_args'", ")", ":", "\n", "        ", "return", "\n", "", "parser", "=", "argparse", ".", "ArgumentParser", "(", "argument_default", "=", "argparse", ".", "SUPPRESS", ",", "allow_abbrev", "=", "False", ")", "\n", "cls", ".", "add_args", "(", "parser", ")", "\n", "# copied from argparse.py:", "\n", "defaults", "=", "argparse", ".", "Namespace", "(", ")", "\n", "for", "action", "in", "parser", ".", "_actions", ":", "\n", "        ", "if", "action", ".", "dest", "is", "not", "argparse", ".", "SUPPRESS", ":", "\n", "            ", "if", "not", "hasattr", "(", "defaults", ",", "action", ".", "dest", ")", ":", "\n", "                ", "if", "action", ".", "default", "is", "not", "argparse", ".", "SUPPRESS", ":", "\n", "                    ", "setattr", "(", "defaults", ",", "action", ".", "dest", ",", "action", ".", "default", ")", "\n", "", "", "", "", "for", "key", ",", "default_value", "in", "vars", "(", "defaults", ")", ".", "items", "(", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "args", ",", "key", ")", ":", "\n", "            ", "setattr", "(", "args", ",", "key", ",", "default_value", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.binarizer.Binarizer.binarize": [[24, 54], ["collections.Counter", "open", "f.seek", "binarizer.safe_readline", "sum", "collections.Counter.update", "dict.encode_line", "len", "consumer", "f.readline", "collections.Counter.values", "f.tell"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.binarizer.safe_readline", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.update", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.encode_line"], ["    ", "@", "staticmethod", "\n", "def", "binarize", "(", "\n", "filename", ",", "\n", "dict", ",", "\n", "consumer", ",", "\n", "tokenize", "=", "tokenize_line", ",", "\n", "append_eos", "=", "True", ",", "\n", "reverse_order", "=", "False", ",", "\n", "offset", "=", "0", ",", "\n", "end", "=", "-", "1", ",", "\n", "already_numberized", "=", "False", ",", "\n", ")", ":", "\n", "        ", "nseq", ",", "ntok", "=", "0", ",", "0", "\n", "replaced", "=", "Counter", "(", ")", "\n", "\n", "def", "replaced_consumer", "(", "word", ",", "idx", ")", ":", "\n", "            ", "if", "idx", "==", "dict", ".", "unk_index", "and", "word", "!=", "dict", ".", "unk_word", ":", "\n", "                ", "replaced", ".", "update", "(", "[", "word", "]", ")", "\n", "\n", "", "", "with", "open", "(", "filename", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "seek", "(", "offset", ")", "\n", "# next(f) breaks f.tell(), hence readline() must be used", "\n", "line", "=", "safe_readline", "(", "f", ")", "\n", "while", "line", ":", "\n", "                ", "if", "end", ">", "0", "and", "f", ".", "tell", "(", ")", ">", "end", ":", "\n", "                    ", "break", "\n", "", "if", "already_numberized", ":", "\n", "                    ", "id_strings", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "id_list", "=", "[", "int", "(", "id_string", ")", "for", "id_string", "in", "id_strings", "]", "\n", "if", "reverse_order", ":", "\n", "                        ", "id_list", ".", "reverse", "(", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.binarizer.Binarizer.binarize_alignments": [[55, 70], ["open", "f.seek", "binarizer.safe_readline", "alignment_parser", "consumer", "f.readline", "f.tell"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.binarizer.safe_readline"], ["", "if", "append_eos", ":", "\n", "                        ", "id_list", ".", "append", "(", "dict", ".", "eos", "(", ")", ")", "\n", "", "ids", "=", "torch", ".", "IntTensor", "(", "id_list", ")", "\n", "", "else", ":", "\n", "                    ", "ids", "=", "dict", ".", "encode_line", "(", "\n", "line", "=", "line", ",", "\n", "line_tokenizer", "=", "tokenize", ",", "\n", "add_if_not_exist", "=", "False", ",", "\n", "consumer", "=", "replaced_consumer", ",", "\n", "append_eos", "=", "append_eos", ",", "\n", "reverse_order", "=", "reverse_order", ",", "\n", ")", "\n", "", "nseq", "+=", "1", "\n", "ntok", "+=", "len", "(", "ids", ")", "\n", "consumer", "(", "ids", ")", "\n", "line", "=", "f", ".", "readline", "(", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.binarizer.Binarizer.find_offsets": [[71, 82], ["open", "range", "os.fstat", "f.seek", "binarizer.safe_readline", "f.tell", "f.fileno", "range"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.binarizer.safe_readline"], ["", "", "return", "{", "\n", "\"nseq\"", ":", "nseq", ",", "\n", "\"nunk\"", ":", "sum", "(", "replaced", ".", "values", "(", ")", ")", ",", "\n", "\"ntok\"", ":", "ntok", ",", "\n", "\"replaced\"", ":", "replaced", ",", "\n", "}", "\n", "\n", "", "@", "staticmethod", "\n", "def", "binarize_alignments", "(", "filename", ",", "alignment_parser", ",", "consumer", ",", "offset", "=", "0", ",", "end", "=", "-", "1", ")", ":", "\n", "        ", "nseq", "=", "0", "\n", "\n", "with", "open", "(", "filename", ",", "\"r\"", ")", "as", "f", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.binarizer.safe_readline": [[12, 20], ["f.tell", "f.readline", "f.seek"], "function", ["None"], ["\n", "def", "safe_readline", "(", "f", ")", ":", "\n", "    ", "pos", "=", "f", ".", "tell", "(", ")", "\n", "while", "True", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "f", ".", "readline", "(", ")", "\n", "", "except", "UnicodeDecodeError", ":", "\n", "            ", "pos", "-=", "1", "\n", "f", ".", "seek", "(", "pos", ")", "# search where this character begins", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.Meter.__init__": [[15, 17], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.Meter.state_dict": [[18, 20], ["None"], "methods", ["None"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "return", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.Meter.load_state_dict": [[21, 23], ["None"], "methods", ["None"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.Meter.reset": [[24, 26], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.Meter.smoothed_value": [[27, 31], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "smoothed_value", "(", "self", ")", "->", "float", ":", "\n", "        ", "\"\"\"Smoothed value used for logging.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.AverageMeter.__init__": [[43, 46], ["meters.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.MetersDict.reset"], ["def", "__init__", "(", "self", ",", "round", ":", "Optional", "[", "int", "]", "=", "None", ")", ":", "\n", "        ", "self", ".", "round", "=", "round", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.AverageMeter.reset": [[47, 51], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "None", "# most recent update", "\n", "self", ".", "sum", "=", "0", "# sum from all updates", "\n", "self", ".", "count", "=", "0", "# total n from all updates", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.AverageMeter.update": [[52, 58], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "if", "val", "is", "not", "None", ":", "\n", "            ", "self", ".", "val", "=", "val", "\n", "if", "n", ">", "0", ":", "\n", "                ", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.AverageMeter.state_dict": [[59, 65], ["None"], "methods", ["None"], ["", "", "", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "'val'", ":", "self", ".", "val", ",", "\n", "'sum'", ":", "self", ".", "sum", ",", "\n", "'count'", ":", "self", ".", "count", ",", "\n", "'round'", ":", "self", ".", "round", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.AverageMeter.load_state_dict": [[67, 72], ["state_dict.get"], "methods", ["None"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "self", ".", "val", "=", "state_dict", "[", "'val'", "]", "\n", "self", ".", "sum", "=", "state_dict", "[", "'sum'", "]", "\n", "self", ".", "count", "=", "state_dict", "[", "'count'", "]", "\n", "self", ".", "round", "=", "state_dict", ".", "get", "(", "'round'", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.AverageMeter.avg": [[73, 76], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "avg", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "sum", "/", "self", ".", "count", "if", "self", ".", "count", ">", "0", "else", "self", ".", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.AverageMeter.smoothed_value": [[77, 83], ["meters.safe_round"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.safe_round"], ["", "@", "property", "\n", "def", "smoothed_value", "(", "self", ")", "->", "float", ":", "\n", "        ", "val", "=", "self", ".", "avg", "\n", "if", "self", ".", "round", "is", "not", "None", "and", "val", "is", "not", "None", ":", "\n", "            ", "val", "=", "safe_round", "(", "val", ",", "self", ".", "round", ")", "\n", "", "return", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.TimeMeter.__init__": [[88, 91], ["meters.TimeMeter.reset"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.MetersDict.reset"], ["def", "__init__", "(", "\n", "self", ",", "\n", "init", ":", "int", "=", "0", ",", "\n", "n", ":", "int", "=", "0", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.TimeMeter.reset": [[92, 96], ["time.time"], "methods", ["None"], ["ignore_first", ":", "int", "=", "0", ",", "\n", "round", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "self", ".", "ignore_first", "=", "ignore_first", "\n", "self", ".", "round", "=", "round", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.TimeMeter.update": [[97, 99], ["None"], "methods", ["None"], ["self", ".", "reset", "(", "init", ",", "n", ")", "\n", "\n", "", "def", "reset", "(", "self", ",", "init", "=", "0", ",", "n", "=", "0", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.TimeMeter.state_dict": [[100, 105], ["None"], "methods", ["None"], ["        ", "self", ".", "init", "=", "init", "\n", "self", ".", "start", "=", "time", ".", "perf_counter", "(", ")", "\n", "self", ".", "n", "=", "n", "\n", "self", ".", "i", "=", "0", "\n", "\n", "", "def", "update", "(", "self", ",", "val", "=", "1", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.TimeMeter.load_state_dict": [[107, 114], ["meters.TimeMeter.reset", "meters.TimeMeter.reset", "state_dict.get"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.MetersDict.reset", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.MetersDict.reset"], ["if", "self", ".", "i", ">", "self", ".", "ignore_first", ":", "\n", "            ", "self", ".", "n", "+=", "val", "\n", "", "else", ":", "\n", "            ", "self", ".", "start", "=", "time", ".", "perf_counter", "(", ")", "\n", "\n", "", "", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n", "'init'", ":", "self", ".", "elapsed_time", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.TimeMeter.avg": [[115, 118], ["None"], "methods", ["None"], ["'n'", ":", "self", ".", "n", ",", "\n", "'round'", ":", "self", ".", "round", ",", "\n", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.TimeMeter.elapsed_time": [[119, 122], ["time.time"], "methods", ["None"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "if", "'start'", "in", "state_dict", ":", "\n", "# backwards compatibility for old state_dicts", "\n", "            ", "self", ".", "reset", "(", "init", "=", "state_dict", "[", "'init'", "]", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.TimeMeter.smoothed_value": [[123, 129], ["meters.safe_round"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.safe_round"], ["", "else", ":", "\n", "            ", "self", ".", "reset", "(", "init", "=", "state_dict", "[", "'init'", "]", ",", "n", "=", "state_dict", "[", "'n'", "]", ")", "\n", "self", ".", "round", "=", "state_dict", ".", "get", "(", "'round'", ",", "None", ")", "\n", "\n", "", "", "@", "property", "\n", "def", "avg", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "n", "/", "self", ".", "elapsed_time", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.StopwatchMeter.__init__": [[134, 139], ["None"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "smoothed_value", "(", "self", ")", "->", "float", ":", "\n", "        ", "val", "=", "self", ".", "avg", "\n", "if", "self", ".", "round", "is", "not", "None", "and", "val", "is", "not", "None", ":", "\n", "            ", "val", "=", "safe_round", "(", "val", ",", "self", ".", "round", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.StopwatchMeter.start": [[140, 142], ["time.time"], "methods", ["None"], ["", "return", "val", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.StopwatchMeter.stop": [[143, 148], ["time.time"], "methods", ["None"], ["", "", "class", "StopwatchMeter", "(", "Meter", ")", ":", "\n", "    ", "\"\"\"Computes the sum/avg duration of some event in seconds\"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "round", ":", "Optional", "[", "int", "]", "=", "None", ")", ":", "\n", "        ", "self", ".", "round", "=", "round", "\n", "self", ".", "sum", "=", "0", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.StopwatchMeter.reset": [[149, 153], ["meters.StopwatchMeter.start"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.StopwatchMeter.start"], ["self", ".", "n", "=", "0", "\n", "self", ".", "start_time", "=", "None", "\n", "\n", "", "def", "start", "(", "self", ")", ":", "\n", "        ", "self", ".", "start_time", "=", "time", ".", "perf_counter", "(", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.StopwatchMeter.state_dict": [[154, 159], ["None"], "methods", ["None"], ["\n", "", "def", "stop", "(", "self", ",", "n", "=", "1", ")", ":", "\n", "        ", "if", "self", ".", "start_time", "is", "not", "None", ":", "\n", "            ", "delta", "=", "time", ".", "perf_counter", "(", ")", "-", "self", ".", "start_time", "\n", "self", ".", "sum", "+=", "delta", "\n", "self", ".", "n", "+=", "n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.StopwatchMeter.load_state_dict": [[161, 166], ["state_dict.get"], "methods", ["None"], ["", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "sum", "=", "0", "# cumulative time during which stopwatch was active", "\n", "self", ".", "n", "=", "0", "# total n across all start/stop", "\n", "self", ".", "start", "(", ")", "\n", "\n", "", "def", "state_dict", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.StopwatchMeter.avg": [[167, 170], ["None"], "methods", ["None"], ["        ", "return", "{", "\n", "'sum'", ":", "self", ".", "sum", ",", "\n", "'n'", ":", "self", ".", "n", ",", "\n", "'round'", ":", "self", ".", "round", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.StopwatchMeter.elapsed_time": [[171, 176], ["time.time"], "methods", ["None"], ["}", "\n", "\n", "", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "self", ".", "sum", "=", "state_dict", "[", "'sum'", "]", "\n", "self", ".", "n", "=", "state_dict", "[", "'n'", "]", "\n", "self", ".", "start_time", "=", "None", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.StopwatchMeter.smoothed_value": [[177, 183], ["meters.safe_round"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.safe_round"], ["self", ".", "round", "=", "state_dict", ".", "get", "(", "'round'", ",", "None", ")", "\n", "\n", "", "@", "property", "\n", "def", "avg", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "sum", "/", "self", ".", "n", "if", "self", ".", "n", ">", "0", "else", "self", ".", "sum", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.MetersDict.__init__": [[192, 195], ["collections.OrderedDict.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["if", "self", ".", "round", "is", "not", "None", "and", "val", "is", "not", "None", ":", "\n", "            ", "val", "=", "safe_round", "(", "val", ",", "self", ".", "round", ")", "\n", "", "return", "val", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.MetersDict.__setitem__": [[196, 203], ["bisect.insort", "super().__setitem__", "meters.MetersDict.move_to_end", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.MetersDict.__setitem__"], ["\n", "", "", "class", "MetersDict", "(", "OrderedDict", ")", ":", "\n", "    ", "\"\"\"A sorted dictionary of :class:`Meters`.\n\n    Meters are sorted according to a priority that is given when the\n    meter is first added to the dictionary.\n    \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.MetersDict.add_meter": [[204, 206], ["meters.MetersDict.__setitem__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.MetersDict.__setitem__"], ["def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "priorities", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.MetersDict.state_dict": [[207, 213], ["meters.MetersDict.state_dict", "isinstance"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.state_dict"], ["\n", "", "def", "__setitem__", "(", "self", ",", "key", ",", "value", ")", ":", "\n", "        ", "assert", "key", "not", "in", "self", ",", "\"MetersDict doesn't support reassignment\"", "\n", "priority", ",", "value", "=", "value", "\n", "bisect", ".", "insort", "(", "self", ".", "priorities", ",", "(", "priority", ",", "len", "(", "self", ".", "priorities", ")", ",", "key", ")", ")", "\n", "super", "(", ")", ".", "__setitem__", "(", "key", ",", "value", ")", "\n", "for", "_", ",", "_", ",", "key", "in", "self", ".", "priorities", ":", "# reorder dict to match priorities", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.MetersDict.load_state_dict": [[215, 222], ["meters.MetersDict.clear", "meters.MetersDict.priorities.clear", "meter.load_state_dict", "meters.MetersDict.add_meter", "globals"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.load_state_dict", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.MetersDict.add_meter"], ["\n", "", "", "def", "add_meter", "(", "self", ",", "key", ",", "meter", ",", "priority", ")", ":", "\n", "        ", "self", ".", "__setitem__", "(", "key", ",", "(", "priority", ",", "meter", ")", ")", "\n", "\n", "", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "return", "[", "\n", "(", "pri", ",", "key", ",", "self", "[", "key", "]", ".", "__class__", ".", "__name__", ",", "self", "[", "key", "]", ".", "state_dict", "(", ")", ")", "\n", "for", "pri", ",", "_", ",", "key", "in", "self", ".", "priorities", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.MetersDict.get_smoothed_value": [[223, 230], ["isinstance", "meter.fn"], "methods", ["None"], ["# can't serialize DerivedMeter instances", "\n", "if", "not", "isinstance", "(", "self", "[", "key", "]", ",", "MetersDict", ".", "_DerivedMeter", ")", "\n", "]", "\n", "\n", "", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "self", ".", "clear", "(", ")", "\n", "self", ".", "priorities", ".", "clear", "(", ")", "\n", "for", "pri", ",", "key", ",", "meter_cls", ",", "meter_state", "in", "state_dict", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.MetersDict.get_smoothed_values": [[231, 234], ["collections.OrderedDict", "meters.MetersDict.get_smoothed_value", "meters.MetersDict.keys"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.MetersDict.get_smoothed_value"], ["            ", "meter", "=", "globals", "(", ")", "[", "meter_cls", "]", "(", ")", "\n", "meter", ".", "load_state_dict", "(", "meter_state", ")", "\n", "self", ".", "add_meter", "(", "key", ",", "meter", ",", "pri", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.MetersDict.reset": [[235, 241], ["meters.MetersDict.values", "isinstance", "meter.reset"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.MetersDict.reset"], ["", "", "def", "get_smoothed_value", "(", "self", ",", "key", ":", "str", ")", "->", "float", ":", "\n", "        ", "\"\"\"Get a single smoothed value.\"\"\"", "\n", "meter", "=", "self", "[", "key", "]", "\n", "if", "isinstance", "(", "meter", ",", "MetersDict", ".", "_DerivedMeter", ")", ":", "\n", "            ", "return", "meter", ".", "fn", "(", "self", ")", "\n", "", "else", ":", "\n", "            ", "return", "meter", ".", "smoothed_value", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.safe_round": [[33, 38], ["hasattr", "round"], "function", ["None"], ["", "", "def", "safe_round", "(", "number", ",", "ndigits", ")", ":", "\n", "    ", "if", "hasattr", "(", "number", ",", "'__round__'", ")", ":", "\n", "        ", "return", "round", "(", "number", ",", "ndigits", ")", "\n", "", "else", ":", "\n", "        ", "return", "number", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.search.Search.__init__": [[13, 21], ["tgt_dict.pad", "tgt_dict.unk", "tgt_dict.eos", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.unk", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos"], ["\n", "class", "Search", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "tgt_dict", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pad", "=", "tgt_dict", ".", "pad", "(", ")", "\n", "self", ".", "unk", "=", "tgt_dict", ".", "unk", "(", ")", "\n", "self", ".", "eos", "=", "tgt_dict", ".", "eos", "(", ")", "\n", "self", ".", "vocab_size", "=", "len", "(", "tgt_dict", ")", "\n", "self", ".", "src_lengths", "=", "torch", ".", "tensor", "(", "-", "1", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.search.Search._init_buffers": [[22, 27], ["t.new", "torch.LongTensor().to", "torch.LongTensor().to", "torch.LongTensor", "torch.LongTensor"], "methods", ["None"], ["self", ".", "scores_buf", "=", "torch", ".", "Tensor", "(", ")", "\n", "self", ".", "indices_buf", "=", "torch", ".", "Tensor", "(", ")", ".", "long", "(", ")", "\n", "self", ".", "beams_buf", "=", "torch", ".", "Tensor", "(", ")", ".", "long", "(", ")", "\n", "\n", "", "@", "torch", ".", "jit", ".", "export", "\n", "def", "_init_buffers", "(", "self", ",", "t", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.search.Search.step": [[28, 49], ["None"], "methods", ["None"], ["        ", "if", "not", "self", ".", "scores_buf", ".", "size", "(", ")", "[", "0", "]", ":", "\n", "            ", "self", ".", "scores_buf", "=", "torch", ".", "empty", "(", "0", ")", ".", "to", "(", "t", ")", "\n", "self", ".", "indices_buf", "=", "torch", ".", "empty", "(", "0", ")", ".", "to", "(", "t", ")", ".", "long", "(", ")", "\n", "self", ".", "beams_buf", "=", "torch", ".", "empty", "(", "0", ")", ".", "to", "(", "t", ")", ".", "long", "(", ")", "\n", "\n", "", "", "def", "step", "(", "self", ",", "step", ",", "lprobs", ",", "scores", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.search.Search.set_src_lengths": [[50, 52], ["None"], "methods", ["None"], ["\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.search.BeamSearch.__init__": [[56, 58], ["search.Search.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["def", "set_src_lengths", "(", "self", ",", "src_lengths", ")", ":", "\n", "        ", "self", ".", "src_lengths", "=", "src_lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.search.BeamSearch.step": [[59, 84], ["search.Search._init_buffers", "lprobs[].contiguous.size", "torch.topk", "torch.div", "search.BeamSearch.indices_buf.fmod_", "lprobs[].contiguous", "lprobs[].contiguous.add_", "lprobs[].contiguous.view", "scores[].unsqueeze", "min", "lprobs[].contiguous.view().size", "lprobs[].contiguous.view"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.search.Search._init_buffers", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["\n", "", "", "class", "BeamSearch", "(", "Search", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "tgt_dict", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "tgt_dict", ")", "\n", "\n", "", "@", "torch", ".", "jit", ".", "export", "\n", "def", "step", "(", "self", ",", "step", ":", "int", ",", "lprobs", ",", "scores", ")", ":", "\n", "        ", "self", ".", "_init_buffers", "(", "lprobs", ")", "\n", "bsz", ",", "beam_size", ",", "vocab_size", "=", "lprobs", ".", "size", "(", ")", "\n", "\n", "if", "step", "==", "0", ":", "\n", "# at the first step all hypotheses are equally likely, so use", "\n", "# only the first beam", "\n", "            ", "lprobs", "=", "lprobs", "[", ":", ",", ":", ":", "beam_size", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "", "else", ":", "\n", "# make probs contain cumulative scores for each hypothesis", "\n", "            ", "lprobs", ".", "add_", "(", "scores", "[", ":", ",", ":", ",", "step", "-", "1", "]", ".", "unsqueeze", "(", "-", "1", ")", ")", "\n", "\n", "", "top_prediction", "=", "torch", ".", "topk", "(", "\n", "lprobs", ".", "view", "(", "bsz", ",", "-", "1", ")", ",", "\n", "k", "=", "min", "(", "\n", "# Take the best 2 x beam_size predictions. We'll choose the first", "\n", "# beam_size of these which don't predict eos to continue with.", "\n", "beam_size", "*", "2", ",", "\n", "lprobs", ".", "view", "(", "bsz", ",", "-", "1", ")", ".", "size", "(", "1", ")", "-", "1", ",", "# -1 so we never select pad", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.search.LengthConstrainedBeamSearch.__init__": [[88, 95], ["search.Search.__init__", "search.BeamSearch"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["self", ".", "beams_buf", "=", "torch", ".", "div", "(", "self", ".", "indices_buf", ",", "vocab_size", ")", "\n", "self", ".", "indices_buf", ".", "fmod_", "(", "vocab_size", ")", "\n", "return", "self", ".", "scores_buf", ",", "self", ".", "indices_buf", ",", "self", ".", "beams_buf", "\n", "\n", "\n", "", "", "class", "LengthConstrainedBeamSearch", "(", "Search", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "tgt_dict", ",", "min_len_a", ",", "min_len_b", ",", "max_len_a", ",", "max_len_b", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.search.LengthConstrainedBeamSearch.step": [[96, 103], ["search.LengthConstrainedBeamSearch.beam.step"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.polynomial_decay_schedule.PolynomialDecaySchedule.step"], ["        ", "super", "(", ")", ".", "__init__", "(", "tgt_dict", ")", "\n", "self", ".", "min_len_a", "=", "min_len_a", "\n", "self", ".", "min_len_b", "=", "min_len_b", "\n", "self", ".", "max_len_a", "=", "max_len_a", "\n", "self", ".", "max_len_b", "=", "max_len_b", "\n", "self", ".", "beam", "=", "BeamSearch", "(", "tgt_dict", ")", "\n", "\n", "", "def", "step", "(", "self", ",", "step", ",", "lprobs", ",", "scores", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.search.DiverseBeamSearch.__init__": [[115, 121], ["search.Search.__init__", "search.BeamSearch"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.search.DiverseBeamSearch.step": [[122, 165], ["search.Search._init_buffers", "lprobs.size", "torch.zeros", "range", "torch.stack().view", "torch.stack().view", "torch.stack().view", "ValueError", "lprobs.new", "lprobs[].size", "search.DiverseBeamSearch.beam.step", "beams_buf.mul_().add_", "scores_G.append", "indices_G.append", "beams_G.append", "search.DiverseBeamSearch.diversity_buf.scatter_add_", "torch.add", "lprobs_g.contiguous.contiguous.contiguous", "scores_buf.clone", "indices_buf.clone", "beams_buf.clone", "search.DiverseBeamSearch.diversity_buf.new_ones", "torch.stack", "torch.stack", "torch.stack", "search.DiverseBeamSearch.diversity_buf.unsqueeze", "beams_buf.mul_", "indices_buf.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.search.Search._init_buffers", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.polynomial_decay_schedule.PolynomialDecaySchedule.step", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.eval_lm.WordStat.add", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["def", "__init__", "(", "self", ",", "tgt_dict", ",", "num_groups", ",", "diversity_strength", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "tgt_dict", ")", "\n", "self", ".", "num_groups", "=", "num_groups", "\n", "self", ".", "diversity_strength", "=", "-", "diversity_strength", "\n", "self", ".", "diversity_buf", "=", "None", "\n", "self", ".", "beam", "=", "BeamSearch", "(", "tgt_dict", ")", "\n", "\n", "", "def", "step", "(", "self", ",", "step", ",", "lprobs", ",", "scores", ")", ":", "\n", "        ", "super", "(", ")", ".", "_init_buffers", "(", "lprobs", ")", "\n", "bsz", ",", "beam_size", ",", "vocab_size", "=", "lprobs", ".", "size", "(", ")", "\n", "if", "beam_size", "%", "self", ".", "num_groups", "!=", "0", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'DiverseBeamSearch requires --beam to be divisible by the number of groups'", "\n", ")", "\n", "\n", "# initialize diversity penalty", "\n", "", "if", "self", ".", "diversity_buf", "is", "None", ":", "\n", "            ", "self", ".", "diversity_buf", "=", "lprobs", ".", "new", "(", ")", "\n", "", "torch", ".", "zeros", "(", "lprobs", "[", ":", ",", "0", ",", ":", "]", ".", "size", "(", ")", ",", "out", "=", "self", ".", "diversity_buf", ")", "\n", "\n", "scores_G", ",", "indices_G", ",", "beams_G", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "g", "in", "range", "(", "self", ".", "num_groups", ")", ":", "\n", "            ", "lprobs_g", "=", "lprobs", "[", ":", ",", "g", ":", ":", "self", ".", "num_groups", ",", ":", "]", "\n", "scores_g", "=", "scores", "[", ":", ",", "g", ":", ":", "self", ".", "num_groups", ",", ":", "]", "if", "step", ">", "0", "else", "None", "\n", "\n", "# apply diversity penalty", "\n", "if", "g", ">", "0", ":", "\n", "                ", "lprobs_g", "=", "torch", ".", "add", "(", "lprobs_g", ",", "self", ".", "diversity_strength", ",", "self", ".", "diversity_buf", ".", "unsqueeze", "(", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "lprobs_g", "=", "lprobs_g", ".", "contiguous", "(", ")", "\n", "\n", "", "scores_buf", ",", "indices_buf", ",", "beams_buf", "=", "self", ".", "beam", ".", "step", "(", "step", ",", "lprobs_g", ",", "scores_g", ")", "\n", "beams_buf", ".", "mul_", "(", "self", ".", "num_groups", ")", ".", "add_", "(", "g", ")", "\n", "\n", "scores_G", ".", "append", "(", "scores_buf", ".", "clone", "(", ")", ")", "\n", "indices_G", ".", "append", "(", "indices_buf", ".", "clone", "(", ")", ")", "\n", "beams_G", ".", "append", "(", "beams_buf", ".", "clone", "(", ")", ")", "\n", "\n", "# update diversity penalty", "\n", "self", ".", "diversity_buf", ".", "scatter_add_", "(", "\n", "1", ",", "\n", "indices_buf", ",", "\n", "self", ".", "diversity_buf", ".", "new_ones", "(", "indices_buf", ".", "size", "(", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.search.Sampling.__init__": [[169, 173], ["search.Search.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["self", ".", "indices_buf", "=", "torch", ".", "stack", "(", "indices_G", ",", "dim", "=", "2", ",", "out", "=", "self", ".", "indices_buf", ")", ".", "view", "(", "bsz", ",", "-", "1", ")", "\n", "self", ".", "beams_buf", "=", "torch", ".", "stack", "(", "beams_G", ",", "dim", "=", "2", ",", "out", "=", "self", ".", "beams_buf", ")", ".", "view", "(", "bsz", ",", "-", "1", ")", "\n", "return", "self", ".", "scores_buf", ",", "self", ".", "indices_buf", ",", "self", ".", "beams_buf", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.search.Sampling._sample_topp": [[174, 218], ["lprobs.exp_", "lprobs.exp_.sort", "sorted_probs.cumsum", "sorted_probs.cumsum.lt", "mask.scatter_.scatter_.cumsum", "last_included.clamp_", "mask.scatter_.scatter_.scatter_", "last_included.max", "truncated_probs.masked_fill_", "mask.scatter_.scatter_.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.concat_dataset.ConcatDataset.cumsum", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.concat_dataset.ConcatDataset.cumsum", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "", "class", "Sampling", "(", "Search", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "tgt_dict", ",", "sampling_topk", "=", "-", "1", ",", "sampling_topp", "=", "-", "1.0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "tgt_dict", ")", "\n", "self", ".", "sampling_topk", "=", "sampling_topk", "\n", "self", ".", "sampling_topp", "=", "sampling_topp", "\n", "\n", "", "def", "_sample_topp", "(", "self", ",", "lprobs", ")", ":", "\n", "        ", "\"\"\"Sample among the smallest set of elements whose cumulative probability mass exceeds p.\n\n        See `\"The Curious Case of Neural Text Degeneration\"\n        (Holtzman et al., 2019) <https://arxiv.org/abs/1904.09751>`_.\n\n        Args:\n            lprobs: (bsz x input_beam_size x vocab_size)\n                the model's log-probabilities over the vocabulary at the current step\n\n        Return: A tuple of (trimed_probs, truncated_indices) where:\n            trimed_probs: (bsz x input_beam_size x ?)\n                the model's probabilities over the elements selected to sample from. The\n                width of the third dimension is determined by top-P.\n            truncated_indices: (bsz x input_beam_size x ?)\n                the indices of the chosen elements.\n        \"\"\"", "\n", "probs", "=", "lprobs", ".", "exp_", "(", ")", "\n", "\n", "# sort the last dimension (vocab dimension) in descending order", "\n", "sorted_probs", ",", "sorted_indices", "=", "probs", ".", "sort", "(", "descending", "=", "True", ")", "\n", "\n", "# compute a mask to indicate the words to be included in the top-P set.", "\n", "cumsum_probs", "=", "sorted_probs", ".", "cumsum", "(", "dim", "=", "2", ")", "\n", "mask", "=", "cumsum_probs", ".", "lt", "(", "self", ".", "sampling_topp", ")", "\n", "\n", "# note that mask was computed by 'lt'. One more word needs to be included", "\n", "# so that the cumulative probability mass can exceed p.", "\n", "cumsum_mask", "=", "mask", ".", "cumsum", "(", "dim", "=", "2", ")", "\n", "last_included", "=", "cumsum_mask", "[", ":", ",", ":", ",", "-", "1", ":", "]", "\n", "last_included", ".", "clamp_", "(", "0", ",", "mask", ".", "size", "(", ")", "[", "2", "]", "-", "1", ")", "\n", "mask", "=", "mask", ".", "scatter_", "(", "2", ",", "last_included", ",", "1", ")", "\n", "\n", "# truncate unnecessary dims.", "\n", "max_dim", "=", "last_included", ".", "max", "(", ")", "\n", "truncated_mask", "=", "mask", "[", ":", ",", ":", ",", ":", "max_dim", "+", "1", "]", "\n", "truncated_probs", "=", "sorted_probs", "[", ":", ",", ":", ",", ":", "max_dim", "+", "1", "]", "\n", "truncated_indices", "=", "sorted_indices", "[", ":", ",", ":", ",", ":", "max_dim", "+", "1", "]", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.search.Sampling.step": [[219, 289], ["search.Search._init_buffers", "lprobs[].contiguous.size", "torch.gather", "search.Sampling.scores_buf.log_().view", "lprobs[].contiguous", "search.Sampling._sample_topp", "torch.multinomial().view", "torch.multinomial().view", "lprobs[].contiguous.exp_.expand", "torch.gather().squeeze", "search.Sampling.indices_buf.new_zeros", "torch.arange().repeat", "search.Sampling.scores_buf.add_", "lprobs[].contiguous.topk", "lprobs[].contiguous.exp_", "lprobs[].contiguous.exp_", "search.Sampling.indices_buf.unsqueeze", "search.Sampling.scores_buf.log_", "torch.gather", "torch.multinomial", "torch.multinomial", "torch.gather", "torch.arange", "lprobs[].contiguous.exp_.view", "lprobs[].contiguous.exp_.view", "top_indices.expand", "search.Sampling.indices_buf.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.search.Search._init_buffers", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.search.Sampling._sample_topp"], ["\n", "# trim the words that are not in top-P by setting their probabilities", "\n", "# to 0, so that they would not be sampled later.", "\n", "trim_mask", "=", "(", "~", "truncated_mask", ")", "\n", "trimed_probs", "=", "truncated_probs", ".", "masked_fill_", "(", "trim_mask", ",", "0", ")", "\n", "return", "trimed_probs", ",", "truncated_indices", "\n", "\n", "", "def", "step", "(", "self", ",", "step", ",", "lprobs", ",", "scores", ",", "src_tokens", "=", "None", ",", "gen_tokens", "=", "None", ",", "**", "kwargs", ")", ":", "# src and tgt_tokens to far #TODO make sure that we get an empty tgt tokens on first pass", "\n", "\n", "        ", "super", "(", ")", ".", "_init_buffers", "(", "lprobs", ")", "\n", "bsz", ",", "beam_size", ",", "vocab_size", "=", "lprobs", ".", "size", "(", ")", "\n", "logprob", "=", "None", "\n", "\n", "# use kwargs to init discriminator stuff", "\n", "rescore", "=", "kwargs", ".", "get", "(", "\"rescore\"", ",", "\"False\"", ")", "\n", "coefs", "=", "kwargs", ".", "get", "(", "\"coefs\"", ",", "[", "]", ")", "\n", "scorers", "=", "kwargs", ".", "get", "(", "\"scorers\"", ",", "[", "]", ")", "\n", "learn", "=", "kwargs", ".", "get", "(", "\"learn\"", ",", "\"False\"", ")", "\n", "learn_every_token", "=", "kwargs", ".", "get", "(", "\"learn_every_token\"", ")", "\n", "coef_trainer", "=", "kwargs", ".", "get", "(", "\"coef_trainer\"", ")", "\n", "gold_tokens", "=", "kwargs", ".", "get", "(", "\"gold_tokens\"", ")", "\n", "gold_lm_score", "=", "kwargs", ".", "get", "(", "\"gold_lprobs\"", ")", "\n", "gen_lm_score", "=", "kwargs", ".", "get", "(", "\"gen_lprobs\"", ")", "\n", "\n", "if", "step", "==", "0", ":", "\n", "# at the first step all hypotheses are equally likely, so use", "\n", "# only the first beam", "\n", "            ", "lprobs", "=", "lprobs", "[", ":", ",", ":", ":", "beam_size", ",", ":", "]", ".", "contiguous", "(", ")", "\n", "\n", "", "if", "self", ".", "sampling_topp", ">", "0", ":", "\n", "# only sample from the smallest set of words whose cumulative probability mass exceeds p", "\n", "            ", "probs", ",", "top_indices", "=", "self", ".", "_sample_topp", "(", "lprobs", ")", "\n", "", "elif", "self", ".", "sampling_topk", ">", "0", ":", "\n", "# only sample from top-k candidates", "\n", "            ", "lprobs", ",", "top_indices", "=", "lprobs", ".", "topk", "(", "self", ".", "sampling_topk", ")", "\n", "logprob", "=", "lprobs", ".", "clone", "(", ")", "\n", "probs", "=", "lprobs", ".", "exp_", "(", ")", "\n", "", "else", ":", "\n", "            ", "probs", "=", "lprobs", ".", "exp_", "(", ")", "\n", "\n", "", "lprobs", "=", "logprob", ".", "clone", "(", ")", "\n", "#sample", "\n", "#print(\"initial lprobs, probs\")", "\n", "#print(lprobs, probs)", "\n", "if", "rescore", "and", "step", ">", "0", ":", "\n", "# potentially rescore", "\n", "# TODO support batch > 1 by chunking tensors", "\n", "            ", "top_indices", "=", "top_indices", ".", "squeeze", "(", "0", ")", "# make 2D, unclear why 3", "\n", "n_hypos", "=", "top_indices", ".", "shape", "[", "1", "]", "\n", "score_adjustment", "=", "np", ".", "zeros", "(", "n_hypos", ")", "\n", "#cont_tokens = todo make this work for multiple batch size  > 1 by chunking tensors", "\n", "if", "learn", "and", "learn_every_token", ":", "\n", "                ", "coefs", "=", "coef_trainer", ".", "weight_model", ".", "coefs", ".", "weight", ".", "data", ".", "cpu", "(", ")", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", "\n", "if", "not", "coefs", ".", "shape", ":", "# numpy makes single element arrays shapeless which makes them not iterable", "\n", "                    ", "coefs", "=", "[", "coefs", ".", "item", "(", ")", "]", "\n", "", "if", "step", "%", "100", "==", "0", ":", "\n", "                    ", "print", "(", "\"Coefs: {}\"", ".", "format", "(", "coefs", ")", ")", "\n", "", "", "all_raw_scores", "=", "[", "]", "\n", "for", "coef", ",", "scorer", "in", "zip", "(", "coefs", ",", "scorers", ")", ":", "\n", "# this makes an array for each scorer from calling the scorer forward function on the candidate tokens", "\n", "\n", "# assemble hypothesis batch", "\n", "                ", "all_tokens", "=", "torch", ".", "cat", "(", "(", "src_tokens", ",", "gen_tokens", ")", ",", "dim", "=", "1", ")", "if", "step", ">", "0", "else", "src_tokens", "# add the stuff generated so far to the fixed prefix", "\n", "all_tokens", "=", "all_tokens", ".", "repeat_interleave", "(", "n_hypos", ",", "dim", "=", "0", ")", "# repeat by k of topk", "\n", "#breakpoint()", "\n", "hypothesis_batch", "=", "torch", ".", "cat", "(", "(", "all_tokens", ",", "top_indices", ".", "transpose", "(", "0", ",", "1", ")", ")", ",", "dim", "=", "1", ")", "# builds a bunch of examples of src + cont toks", "\n", "\n", "if", "hypothesis_batch", ".", "shape", "[", "1", "]", ">", "512", ":", "# roberta can't take more than 512 tokens", "\n", "                    ", "hypothesis_batch", "=", "hypothesis_batch", "[", ":", ",", ":", "-", "512", "]", "\n", "", "gold_separate", "=", "False", "\n", "if", "learn", "and", "learn_every_token", ":", "# add the gold example to the end as new row", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.search.DiverseSiblingsSearch.__init__": [[306, 310], ["search.Search.__init__", "search.BeamSearch"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["# elementwise add the new scores to the np array after elementwise multiplying by coef", "\n", "score_adjustment", "+=", "raw_scores", "[", ":", "self", ".", "sampling_topk", "]", "*", "coef", "# truncate so don't include extra stuff like gold scores if in there", "\n", "#if learn and gold_separate:", "\n", "#    new_scores = scorer.predict(\"sentence_classification_head\", gold_example)", "\n", "#    raw_scores = np.array([score[1].data.item() for score in new_scores]) # index 1 is positive class", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.search.DiverseSiblingsSearch.step": [[311, 354], ["search.Search._init_buffers", "lprobs.size", "min", "lprobs.add_", "range", "torch.stack().view", "lprobs.new", "torch.LongTensor().to", "torch.LongTensor().to", "torch.topk", "torch.div", "range", "lprobs.new", "torch.LongTensor().to", "lprobs.new", "search.DiverseSiblingsSearch.beam.step", "scores[].unsqueeze", "torch.topk", "i_list[].fmod_", "s_list[].sub_", "torch.stack().view", "lprobs.view().size", "range", "range", "range", "lprobs[].view", "torch.stack", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.stack", "lprobs.view"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.search.Search._init_buffers", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.polynomial_decay_schedule.PolynomialDecaySchedule.step", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["#    all_raw_scores.append(raw_scores)", "\n", "#print([scores.shape for scores in all_raw_scores])", "\n", "", "all_raw_scores", "=", "np", ".", "stack", "(", "all_raw_scores", ",", "axis", "=", "-", "1", ")", "# this converts to num_candidates x num_scorers so each row is all adjusted scores for a candidate. Probs necessary only for proper beam search", "\n", "\n", "#if self.learn and num_cont_words < len(true_cont_tokens): # tgt_tokens should be the true cont tokens", "\n", "\n", "#print(\"Score Adjustment\")", "\n", "#print(score_adjustment)", "\n", "#print(\"Before Disc\")", "\n", "#print(lprobs, probs)", "\n", "\n", "mod_probs", "=", "lprobs", ".", "clone", "(", ")", "\n", "for", "i", "in", "range", "(", "n_hypos", ")", ":", "# unclear again why lprobs is 3D", "\n", "                ", "mod_probs", "[", "0", "]", "[", "0", "]", "[", "i", "]", "=", "lprobs", "[", "0", "]", "[", "0", "]", "[", "i", "]", "+", "score_adjustment", "[", "i", "]", "\n", "#print(\"After Disc\")", "\n", "", "lprobs", "=", "mod_probs", ".", "clone", "(", ")", "\n", "probs", "=", "mod_probs", ".", "clone", "(", ")", ".", "exp_", "(", ")", "\n", "#print(lprobs, probs)", "\n", "max_lprob", ",", "max_idx", "=", "lprobs", ".", "max", "(", "2", ")", "# along second dimension", "\n", "if", "learn", "and", "learn_every_token", ":", "\n", "                ", "next_gen_lm_score", "=", "torch", ".", "sum", "(", "torch", ".", "cat", "(", "(", "max_lprob", "[", "0", "]", ",", "gen_lm_score", ".", "unsqueeze", "(", "0", ")", ")", ")", ")", "\n", "gold_cont_raw_scores", "=", "all_raw_scores", "[", "-", "1", "]", "\n", "#train coefficients with lm score of gold, best candidate score, and continuation scores for gold", "\n", "loss", "=", "coef_trainer", ".", "train_coefficients", "(", "gold_lm_score", ",", "next_gen_lm_score", ",", "\n", "gold_cont_raw_scores", ",", "\n", "all_raw_scores", "[", "max_idx", ".", "data", ".", "item", "(", ")", "]", ")", "\n", "\n", "\n", "# sample", "\n", "", "", "if", "step", "==", "0", ":", "\n", "            ", "self", ".", "indices_buf", "=", "torch", ".", "multinomial", "(", "\n", "probs", ".", "view", "(", "bsz", ",", "-", "1", ")", ",", "\n", "beam_size", ",", "\n", "replacement", "=", "True", ",", "\n", "out", "=", "self", ".", "indices_buf", ",", "\n", ")", ".", "view", "(", "bsz", ",", "beam_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "indices_buf", "=", "torch", ".", "multinomial", "(", "\n", "probs", ".", "view", "(", "bsz", "*", "beam_size", ",", "-", "1", ")", ",", "\n", "1", ",", "\n", "replacement", "=", "True", ",", "\n", "out", "=", "self", ".", "indices_buf", ",", "\n", ")", ".", "view", "(", "bsz", ",", "beam_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.iterative_refinement_generator.IterativeRefinementGenerator.__init__": [[25, 66], ["tgt_dict.bos", "tgt_dict.pad", "tgt_dict.unk", "tgt_dict.eos", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.bos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.unk", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "tgt_dict", ",", "\n", "models", "=", "None", ",", "\n", "eos_penalty", "=", "0.0", ",", "\n", "max_iter", "=", "10", ",", "\n", "max_ratio", "=", "2", ",", "\n", "beam_size", "=", "1", ",", "\n", "decoding_format", "=", "None", ",", "\n", "retain_dropout", "=", "False", ",", "\n", "adaptive", "=", "True", ",", "\n", "retain_history", "=", "False", ",", "\n", "reranking", "=", "False", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Generates translations based on iterative refinement.\n\n        Args:\n            tgt_dict: target dictionary\n            eos_penalty: if > 0.0, it penalized early-stopping in decoding\n            max_iter: maximum number of refinement iterations\n            max_ratio: generate sequences of maximum length ax, where x is the source length\n            decoding_format: decoding mode in {'unigram', 'ensemble', 'vote', 'dp', 'bs'}\n            retain_dropout: retaining dropout in the inference\n            adaptive: decoding with early stop\n        \"\"\"", "\n", "self", ".", "bos", "=", "tgt_dict", ".", "bos", "(", ")", "\n", "self", ".", "pad", "=", "tgt_dict", ".", "pad", "(", ")", "\n", "self", ".", "unk", "=", "tgt_dict", ".", "unk", "(", ")", "\n", "self", ".", "eos", "=", "tgt_dict", ".", "eos", "(", ")", "\n", "self", ".", "vocab_size", "=", "len", "(", "tgt_dict", ")", "\n", "self", ".", "eos_penalty", "=", "eos_penalty", "\n", "self", ".", "max_iter", "=", "max_iter", "\n", "self", ".", "max_ratio", "=", "max_ratio", "\n", "self", ".", "beam_size", "=", "beam_size", "\n", "self", ".", "reranking", "=", "reranking", "\n", "self", ".", "decoding_format", "=", "decoding_format", "\n", "self", ".", "retain_dropout", "=", "retain_dropout", "\n", "self", ".", "retain_history", "=", "retain_history", "\n", "self", ".", "adaptive", "=", "adaptive", "\n", "self", ".", "models", "=", "models", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.iterative_refinement_generator.IterativeRefinementGenerator.generate_batched_itr": [[67, 105], ["enumerate", "timer.start", "torch.no_grad", "iterative_refinement_generator.IterativeRefinementGenerator.generate", "timer.stop", "fairseq.utils.strip_pad", "fairseq.utils.strip_pad"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.StopwatchMeter.start", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.hub_interface.BARTHubInterface.generate", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.StopwatchMeter.stop", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.strip_pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.strip_pad"], ["", "def", "generate_batched_itr", "(", "\n", "self", ",", "\n", "data_itr", ",", "\n", "maxlen_a", "=", "None", ",", "\n", "maxlen_b", "=", "None", ",", "\n", "cuda", "=", "False", ",", "\n", "timer", "=", "None", ",", "\n", "prefix_size", "=", "0", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Iterate over a batched dataset and yield individual translations.\n\n        Args:\n            maxlen_a/b: generate sequences of maximum length ax + b,\n                where x is the source sentence length.\n            cuda: use GPU for generation\n            timer: StopwatchMeter for timing generations.\n        \"\"\"", "\n", "\n", "for", "sample", "in", "data_itr", ":", "\n", "            ", "if", "\"net_input\"", "not", "in", "sample", ":", "\n", "                ", "continue", "\n", "", "if", "timer", "is", "not", "None", ":", "\n", "                ", "timer", ".", "start", "(", ")", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "hypos", "=", "self", ".", "generate", "(", "\n", "self", ".", "models", ",", "\n", "sample", ",", "\n", "prefix_tokens", "=", "sample", "[", "\"target\"", "]", "[", ":", ",", ":", "prefix_size", "]", "\n", "if", "prefix_size", ">", "0", "\n", "else", "None", ",", "\n", ")", "\n", "", "if", "timer", "is", "not", "None", ":", "\n", "                ", "timer", ".", "stop", "(", "sample", "[", "\"ntokens\"", "]", ")", "\n", "", "for", "i", ",", "id", "in", "enumerate", "(", "sample", "[", "\"id\"", "]", ")", ":", "\n", "# remove padding", "\n", "                ", "src", "=", "utils", ".", "strip_pad", "(", "sample", "[", "\"net_input\"", "]", "[", "\"src_tokens\"", "]", "[", "i", ",", ":", "]", ",", "self", ".", "pad", ")", "\n", "ref", "=", "utils", ".", "strip_pad", "(", "sample", "[", "\"target\"", "]", "[", "i", ",", ":", "]", ",", "self", ".", "pad", ")", "\n", "yield", "id", ",", "src", ",", "ref", ",", "hypos", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.iterative_refinement_generator.IterativeRefinementGenerator.generate": [[107, 283], ["torch.no_grad", "src_tokens.size", "model.forward_encoder", "model.initialize_output_tokens", "torch.arange", "decoder_out._replace._replace.output_tokens.clone", "range", "hasattr", "model.enable_ensemble", "fairseq.utils.new_arange().t().reshape", "model.encoder.reorder_encoder_out", "model.regenerate_length_beam", "decoder_out._replace._replace._replace", "prev_out_token.ne", "decoder_out._replace._replace._replace", "model.forward_decoder", "range", "decoder_out._replace._replace._replace", "model.encoder.reorder_encoder_out", "decoder_out._replace._replace.output_tokens.clone", "model.eval", "len", "len", "range", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat", "torch.cat", "scores.mean", "iterative_refinement_generator.IterativeRefinementGenerator.generate.is_a_loop"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles.BasicEnsembleModel.forward_encoder", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles.EnsembleLevT.initialize_output_tokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.fairseq_nat_model.FairseqNATModel.enable_ensemble", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles._EnsembleModelEncoder.reorder_encoder_out", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_transformer.NATransformerModel.regenerate_length_beam", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles.EnsembleLevT.forward_decoder", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles._EnsembleModelEncoder.reorder_encoder_out", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "generate", "(", "self", ",", "models", ",", "sample", ",", "prefix_tokens", "=", "None", ")", ":", "\n", "\n", "# TODO: iterative refinement generator does not support ensemble for now.", "\n", "        ", "if", "not", "self", ".", "retain_dropout", ":", "\n", "            ", "for", "model", "in", "models", ":", "\n", "                ", "model", ".", "eval", "(", ")", "\n", "\n", "", "", "model", ",", "reranker", "=", "models", "[", "0", "]", ",", "None", "\n", "if", "self", ".", "reranking", ":", "\n", "            ", "assert", "len", "(", "models", ")", ">", "1", ",", "\"Assuming the last checkpoint is the reranker\"", "\n", "assert", "self", ".", "beam_size", ">", "1", ",", "\"Reranking requires multiple translation for each example\"", "\n", "\n", "reranker", "=", "models", "[", "-", "1", "]", "\n", "models", "=", "models", "[", ":", "-", "1", "]", "\n", "\n", "", "if", "len", "(", "models", ")", ">", "1", "and", "hasattr", "(", "model", ",", "'enable_ensemble'", ")", ":", "\n", "            ", "assert", "model", ".", "allow_ensemble", ",", "\"{} does not support ensembling\"", ".", "format", "(", "model", ".", "__class__", ".", "__name__", ")", "\n", "model", ".", "enable_ensemble", "(", "models", ")", "\n", "\n", "# TODO: better encoder inputs?", "\n", "", "src_tokens", "=", "sample", "[", "\"net_input\"", "]", "[", "\"src_tokens\"", "]", "\n", "src_lengths", "=", "sample", "[", "\"net_input\"", "]", "[", "\"src_lengths\"", "]", "\n", "bsz", ",", "src_len", "=", "src_tokens", ".", "size", "(", ")", "\n", "\n", "# initialize", "\n", "encoder_out", "=", "model", ".", "forward_encoder", "(", "[", "src_tokens", ",", "src_lengths", "]", ")", "\n", "prev_decoder_out", "=", "model", ".", "initialize_output_tokens", "(", "encoder_out", ",", "src_tokens", ")", "\n", "\n", "if", "self", ".", "beam_size", ">", "1", ":", "\n", "            ", "assert", "model", ".", "allow_length_beam", ",", "\"{} does not support decoding with length beam.\"", ".", "format", "(", "model", ".", "__class__", ".", "__name__", ")", "\n", "\n", "# regenerate data based on length-beam", "\n", "length_beam_order", "=", "utils", ".", "new_arange", "(", "src_tokens", ",", "self", ".", "beam_size", ",", "bsz", ")", ".", "t", "(", ")", ".", "reshape", "(", "-", "1", ")", "\n", "encoder_out", "=", "model", ".", "encoder", ".", "reorder_encoder_out", "(", "encoder_out", ",", "length_beam_order", ")", "\n", "prev_decoder_out", "=", "model", ".", "regenerate_length_beam", "(", "prev_decoder_out", ",", "self", ".", "beam_size", ")", "\n", "bsz", "=", "bsz", "*", "self", ".", "beam_size", "\n", "\n", "", "sent_idxs", "=", "torch", ".", "arange", "(", "bsz", ")", "\n", "prev_output_tokens", "=", "prev_decoder_out", ".", "output_tokens", ".", "clone", "(", ")", "\n", "\n", "if", "self", ".", "retain_history", ":", "\n", "            ", "prev_decoder_out", "=", "prev_decoder_out", ".", "_replace", "(", "history", "=", "[", "prev_output_tokens", "]", ")", "\n", "\n", "", "finalized", "=", "[", "[", "]", "for", "_", "in", "range", "(", "bsz", ")", "]", "\n", "\n", "def", "is_a_loop", "(", "x", ",", "y", ",", "s", ",", "a", ")", ":", "\n", "            ", "b", ",", "l_x", ",", "l_y", "=", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ",", "y", ".", "size", "(", "1", ")", "\n", "if", "l_x", ">", "l_y", ":", "\n", "                ", "y", "=", "torch", ".", "cat", "(", "[", "y", ",", "x", ".", "new_zeros", "(", "b", ",", "l_x", "-", "l_y", ")", ".", "fill_", "(", "self", ".", "pad", ")", "]", ",", "1", ")", "\n", "s", "=", "torch", ".", "cat", "(", "[", "s", ",", "s", ".", "new_zeros", "(", "b", ",", "l_x", "-", "l_y", ")", "]", ",", "1", ")", "\n", "if", "a", "is", "not", "None", ":", "\n", "                    ", "a", "=", "torch", ".", "cat", "(", "[", "a", ",", "a", ".", "new_zeros", "(", "b", ",", "l_x", "-", "l_y", ",", "a", ".", "size", "(", "2", ")", ")", "]", ",", "1", ")", "\n", "", "", "elif", "l_x", "<", "l_y", ":", "\n", "                ", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "y", ".", "new_zeros", "(", "b", ",", "l_y", "-", "l_x", ")", ".", "fill_", "(", "self", ".", "pad", ")", "]", ",", "1", ")", "\n", "", "return", "(", "x", "==", "y", ")", ".", "all", "(", "1", ")", ",", "y", ",", "s", ",", "a", "\n", "\n", "", "def", "finalized_hypos", "(", "step", ",", "prev_out_token", ",", "prev_out_score", ",", "prev_out_attn", ")", ":", "\n", "            ", "cutoff", "=", "prev_out_token", ".", "ne", "(", "self", ".", "pad", ")", "\n", "tokens", "=", "prev_out_token", "[", "cutoff", "]", "\n", "if", "prev_out_score", "is", "None", ":", "\n", "                ", "scores", ",", "score", "=", "None", ",", "None", "\n", "", "else", ":", "\n", "                ", "scores", "=", "prev_out_score", "[", "cutoff", "]", "\n", "score", "=", "scores", ".", "mean", "(", ")", "\n", "\n", "", "if", "prev_out_attn", "is", "None", ":", "\n", "                ", "hypo_attn", ",", "alignment", "=", "None", ",", "None", "\n", "", "else", ":", "\n", "                ", "hypo_attn", "=", "prev_out_attn", "[", "cutoff", "]", "\n", "alignment", "=", "hypo_attn", ".", "max", "(", "dim", "=", "1", ")", "[", "1", "]", "\n", "", "return", "{", "\n", "\"steps\"", ":", "step", ",", "\n", "\"tokens\"", ":", "tokens", ",", "\n", "\"positional_scores\"", ":", "scores", ",", "\n", "\"score\"", ":", "score", ",", "\n", "\"hypo_attn\"", ":", "hypo_attn", ",", "\n", "\"alignment\"", ":", "alignment", ",", "\n", "}", "\n", "\n", "", "for", "step", "in", "range", "(", "self", ".", "max_iter", "+", "1", ")", ":", "\n", "\n", "            ", "decoder_options", "=", "{", "\n", "\"eos_penalty\"", ":", "self", ".", "eos_penalty", ",", "\n", "\"max_ratio\"", ":", "self", ".", "max_ratio", ",", "\n", "\"decoding_format\"", ":", "self", ".", "decoding_format", ",", "\n", "}", "\n", "prev_decoder_out", "=", "prev_decoder_out", ".", "_replace", "(", "\n", "step", "=", "step", ",", "\n", "max_step", "=", "self", ".", "max_iter", "+", "1", ",", "\n", ")", "\n", "\n", "decoder_out", "=", "model", ".", "forward_decoder", "(", "\n", "prev_decoder_out", ",", "encoder_out", ",", "**", "decoder_options", "\n", ")", "\n", "\n", "if", "self", ".", "adaptive", ":", "\n", "# terminate if there is a loop", "\n", "                ", "terminated", ",", "out_tokens", ",", "out_scores", ",", "out_attn", "=", "is_a_loop", "(", "\n", "prev_output_tokens", ",", "decoder_out", ".", "output_tokens", ",", "decoder_out", ".", "output_scores", ",", "decoder_out", ".", "attn", "\n", ")", "\n", "decoder_out", "=", "decoder_out", ".", "_replace", "(", "\n", "output_tokens", "=", "out_tokens", ",", "\n", "output_scores", "=", "out_scores", ",", "\n", "attn", "=", "out_attn", ",", "\n", ")", "\n", "\n", "", "else", ":", "\n", "                ", "terminated", "=", "decoder_out", ".", "output_tokens", ".", "new_zeros", "(", "decoder_out", ".", "output_tokens", ".", "size", "(", "0", ")", ")", ".", "bool", "(", ")", "\n", "\n", "", "if", "step", "==", "self", ".", "max_iter", ":", "# reach last iteration, terminate", "\n", "                ", "terminated", ".", "fill_", "(", "1", ")", "\n", "\n", "# collect finalized sentences", "\n", "", "finalized_idxs", "=", "sent_idxs", "[", "terminated", "]", "\n", "finalized_tokens", "=", "decoder_out", ".", "output_tokens", "[", "terminated", "]", "\n", "finalized_scores", "=", "decoder_out", ".", "output_scores", "[", "terminated", "]", "\n", "finalized_attn", "=", "(", "\n", "None", "if", "(", "decoder_out", ".", "attn", "is", "None", "or", "decoder_out", ".", "attn", ".", "size", "(", "0", ")", "==", "0", ")", "else", "decoder_out", ".", "attn", "[", "terminated", "]", "\n", ")", "\n", "\n", "if", "self", ".", "retain_history", ":", "\n", "                ", "finalized_history_tokens", "=", "[", "h", "[", "terminated", "]", "for", "h", "in", "decoder_out", ".", "history", "]", "\n", "\n", "", "for", "i", "in", "range", "(", "finalized_idxs", ".", "size", "(", "0", ")", ")", ":", "\n", "                ", "finalized", "[", "finalized_idxs", "[", "i", "]", "]", "=", "[", "\n", "finalized_hypos", "(", "\n", "step", ",", "\n", "finalized_tokens", "[", "i", "]", ",", "\n", "finalized_scores", "[", "i", "]", ",", "\n", "None", "if", "finalized_attn", "is", "None", "else", "finalized_attn", "[", "i", "]", ",", "\n", ")", "\n", "]", "\n", "\n", "if", "self", ".", "retain_history", ":", "\n", "                    ", "finalized", "[", "finalized_idxs", "[", "i", "]", "]", "[", "0", "]", "[", "'history'", "]", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "finalized_history_tokens", ")", ")", ":", "\n", "                        ", "finalized", "[", "finalized_idxs", "[", "i", "]", "]", "[", "0", "]", "[", "'history'", "]", ".", "append", "(", "\n", "finalized_hypos", "(", "\n", "step", ",", "\n", "finalized_history_tokens", "[", "j", "]", "[", "i", "]", ",", "\n", "None", ",", "None", "\n", ")", "\n", ")", "\n", "\n", "# check if all terminated", "\n", "", "", "", "if", "terminated", ".", "sum", "(", ")", "==", "terminated", ".", "size", "(", "0", ")", ":", "\n", "                ", "break", "\n", "\n", "# for next step", "\n", "", "not_terminated", "=", "~", "terminated", "\n", "prev_decoder_out", "=", "decoder_out", ".", "_replace", "(", "\n", "output_tokens", "=", "decoder_out", ".", "output_tokens", "[", "not_terminated", "]", ",", "\n", "output_scores", "=", "decoder_out", ".", "output_scores", "[", "not_terminated", "]", ",", "\n", "attn", "=", "decoder_out", ".", "attn", "[", "not_terminated", "]", "\n", "if", "(", "decoder_out", ".", "attn", "is", "not", "None", "and", "decoder_out", ".", "attn", ".", "size", "(", "0", ")", ">", "0", ")", "\n", "else", "None", ",", "\n", "history", "=", "[", "h", "[", "not_terminated", "]", "for", "h", "in", "decoder_out", ".", "history", "]", "\n", "if", "decoder_out", ".", "history", "is", "not", "None", "\n", "else", "None", ",", "\n", ")", "\n", "encoder_out", "=", "model", ".", "encoder", ".", "reorder_encoder_out", "(", "encoder_out", ",", "not_terminated", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", ")", "\n", "sent_idxs", "=", "sent_idxs", "[", "not_terminated", "]", "\n", "prev_output_tokens", "=", "prev_decoder_out", ".", "output_tokens", ".", "clone", "(", ")", "\n", "\n", "", "if", "self", ".", "beam_size", ">", "1", ":", "\n", "            ", "if", "reranker", "is", "not", "None", ":", "\n", "                ", "finalized", "=", "self", ".", "rerank", "(", "\n", "reranker", ",", "finalized", ",", "[", "src_tokens", ",", "src_lengths", "]", ",", "self", ".", "beam_size", "\n", ")", "\n", "\n", "# aggregate information from length beam", "\n", "", "finalized", "=", "[", "\n", "finalized", "[", "np", ".", "argmax", "(", "\n", "[", "finalized", "[", "self", ".", "beam_size", "*", "i", "+", "j", "]", "[", "0", "]", "[", "'score'", "]", "for", "j", "in", "range", "(", "self", ".", "beam_size", ")", "]", "\n", ")", "+", "self", ".", "beam_size", "*", "i", "]", "for", "i", "in", "range", "(", "len", "(", "finalized", ")", "//", "self", ".", "beam_size", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.iterative_refinement_generator.IterativeRefinementGenerator.rerank": [[284, 312], ["iterative_refinement_generator.IterativeRefinementGenerator.rerank.rebuild_batch"], "methods", ["None"], ["]", "\n", "\n", "", "return", "finalized", "\n", "\n", "", "def", "rerank", "(", "self", ",", "reranker", ",", "finalized", ",", "encoder_input", ",", "beam_size", ")", ":", "\n", "\n", "        ", "def", "rebuild_batch", "(", "finalized", ")", ":", "\n", "            ", "finalized_tokens", "=", "[", "f", "[", "0", "]", "[", "'tokens'", "]", "for", "f", "in", "finalized", "]", "\n", "finalized_maxlen", "=", "max", "(", "f", ".", "size", "(", "0", ")", "for", "f", "in", "finalized_tokens", ")", "\n", "final_output_tokens", "=", "finalized_tokens", "[", "0", "]", ".", "new_zeros", "(", "len", "(", "finalized_tokens", ")", ",", "finalized_maxlen", ")", ".", "fill_", "(", "self", ".", "pad", ")", "\n", "for", "i", ",", "f", "in", "enumerate", "(", "finalized_tokens", ")", ":", "\n", "                ", "final_output_tokens", "[", "i", ",", ":", "f", ".", "size", "(", "0", ")", "]", "=", "f", "\n", "", "return", "final_output_tokens", "\n", "\n", "", "final_output_tokens", "=", "rebuild_batch", "(", "finalized", ")", "\n", "final_output_tokens", "[", ":", ",", "0", "]", "=", "self", ".", "eos", "# autoregressive model assumes starting with EOS", "\n", "\n", "reranker_encoder_out", "=", "reranker", ".", "encoder", "(", "*", "encoder_input", ")", "\n", "length_beam_order", "=", "utils", ".", "new_arange", "(", "\n", "final_output_tokens", ",", "beam_size", ",", "reranker_encoder_out", ".", "encoder_out", ".", "size", "(", "1", ")", ")", ".", "t", "(", ")", ".", "reshape", "(", "-", "1", ")", "\n", "reranker_encoder_out", "=", "reranker", ".", "encoder", ".", "reorder_encoder_out", "(", "reranker_encoder_out", ",", "length_beam_order", ")", "\n", "reranking_scores", "=", "reranker", ".", "get_normalized_probs", "(", "\n", "reranker", ".", "decoder", "(", "final_output_tokens", "[", ":", ",", ":", "-", "1", "]", ",", "reranker_encoder_out", ")", ",", "True", ",", "None", ")", "\n", "reranking_scores", "=", "reranking_scores", ".", "gather", "(", "2", ",", "final_output_tokens", "[", ":", ",", "1", ":", ",", "None", "]", ")", "\n", "reranking_masks", "=", "final_output_tokens", "[", ":", ",", "1", ":", "]", ".", "ne", "(", "self", ".", "pad", ")", "\n", "reranking_scores", "=", "reranking_scores", "[", ":", ",", ":", ",", "0", "]", ".", "masked_fill_", "(", "~", "reranking_masks", ",", "0", ")", ".", "sum", "(", "1", ")", "\n", "reranking_scores", "=", "reranking_scores", "/", "reranking_masks", ".", "sum", "(", "1", ")", ".", "type_as", "(", "reranking_scores", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "finalized", ")", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.incremental_decoding_utils.FairseqIncrementalState.__init__": [[14, 17], ["object.__init__", "incremental_decoding_utils.FairseqIncrementalState.init_incremental_state"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.incremental_decoding_utils.FairseqIncrementalState.init_incremental_state"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "self", ".", "init_incremental_state", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.incremental_decoding_utils.FairseqIncrementalState.init_incremental_state": [[18, 20], ["str", "uuid.uuid4"], "methods", ["None"], ["", "def", "init_incremental_state", "(", "self", ")", ":", "\n", "        ", "self", ".", "_incremental_state_id", "=", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.incremental_decoding_utils.FairseqIncrementalState._get_full_incremental_state_key": [[21, 23], ["None"], "methods", ["None"], ["", "def", "_get_full_incremental_state_key", "(", "self", ",", "key", ":", "str", ")", "->", "str", ":", "\n", "        ", "return", "\"{}.{}\"", ".", "format", "(", "self", ".", "_incremental_state_id", ",", "key", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.incremental_decoding_utils.FairseqIncrementalState.get_incremental_state": [[24, 34], ["incremental_decoding_utils.FairseqIncrementalState._get_full_incremental_state_key"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils._get_full_incremental_state_key"], ["", "def", "get_incremental_state", "(", "\n", "self", ",", "\n", "incremental_state", ":", "Optional", "[", "Dict", "[", "str", ",", "Dict", "[", "str", ",", "Optional", "[", "Tensor", "]", "]", "]", "]", ",", "\n", "key", ":", "str", ",", "\n", ")", "->", "Optional", "[", "Dict", "[", "str", ",", "Optional", "[", "Tensor", "]", "]", "]", ":", "\n", "        ", "\"\"\"Helper for getting incremental state for an nn.Module.\"\"\"", "\n", "full_key", "=", "self", ".", "_get_full_incremental_state_key", "(", "key", ")", "\n", "if", "incremental_state", "is", "None", "or", "full_key", "not", "in", "incremental_state", ":", "\n", "            ", "return", "None", "\n", "", "return", "incremental_state", "[", "full_key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.incremental_decoding_utils.FairseqIncrementalState.set_incremental_state": [[35, 46], ["incremental_decoding_utils.FairseqIncrementalState._get_full_incremental_state_key"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils._get_full_incremental_state_key"], ["", "def", "set_incremental_state", "(", "\n", "self", ",", "\n", "incremental_state", ":", "Optional", "[", "Dict", "[", "str", ",", "Dict", "[", "str", ",", "Optional", "[", "Tensor", "]", "]", "]", "]", ",", "\n", "key", ":", "str", ",", "\n", "value", ":", "Dict", "[", "str", ",", "Optional", "[", "Tensor", "]", "]", ",", "\n", ")", "->", "Optional", "[", "Dict", "[", "str", ",", "Dict", "[", "str", ",", "Optional", "[", "Tensor", "]", "]", "]", "]", ":", "\n", "        ", "\"\"\"Helper for setting incremental state for an nn.Module.\"\"\"", "\n", "if", "incremental_state", "is", "not", "None", ":", "\n", "            ", "full_key", "=", "self", ".", "_get_full_incremental_state_key", "(", "key", ")", "\n", "incremental_state", "[", "full_key", "]", "=", "value", "\n", "", "return", "incremental_state", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.incremental_decoding_utils.with_incremental_state": [[48, 51], ["tuple"], "function", ["None"], ["", "", "def", "with_incremental_state", "(", "cls", ")", ":", "\n", "    ", "cls", ".", "__bases__", "=", "(", "FairseqIncrementalState", ",", ")", "+", "tuple", "(", "b", "for", "b", "in", "cls", ".", "__bases__", "if", "b", "!=", "FairseqIncrementalState", ")", "\n", "return", "cls", "\n", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open": [[27, 52], ["file_io.PathManager.open"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open"], ["@", "staticmethod", "\n", "def", "open", "(", "\n", "path", ":", "str", ",", "\n", "mode", ":", "str", "=", "\"r\"", ",", "\n", "buffering", ":", "int", "=", "-", "1", ",", "\n", "encoding", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "errors", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "newline", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "if", "FVCorePathManager", ":", "\n", "            ", "return", "FVCorePathManager", ".", "open", "(", "\n", "path", "=", "path", ",", "\n", "mode", "=", "mode", ",", "\n", "buffering", "=", "buffering", ",", "\n", "encoding", "=", "encoding", ",", "\n", "errors", "=", "errors", ",", "\n", "newline", "=", "newline", ",", "\n", ")", "\n", "", "return", "open", "(", "\n", "path", ",", "\n", "mode", "=", "mode", ",", "\n", "buffering", "=", "buffering", ",", "\n", "encoding", "=", "encoding", ",", "\n", "errors", "=", "errors", ",", "\n", "newline", "=", "newline", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.copy": [[54, 61], ["shutil.copyfile", "FVCorePathManager.copy"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.copy"], ["", "@", "staticmethod", "\n", "def", "copy", "(", "src_path", ":", "str", ",", "dst_path", ":", "str", ",", "overwrite", ":", "bool", "=", "False", ")", "->", "bool", ":", "\n", "        ", "if", "FVCorePathManager", ":", "\n", "            ", "return", "FVCorePathManager", ".", "copy", "(", "\n", "src_path", "=", "src_path", ",", "dst_path", "=", "dst_path", ",", "overwrite", "=", "overwrite", "\n", ")", "\n", "", "return", "shutil", ".", "copyfile", "(", "src_path", ",", "dst_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.get_local_path": [[62, 67], ["FVCorePathManager.get_local_path"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.get_local_path"], ["", "@", "staticmethod", "\n", "def", "get_local_path", "(", "path", ":", "str", ")", "->", "str", ":", "\n", "        ", "if", "FVCorePathManager", ":", "\n", "            ", "return", "FVCorePathManager", ".", "get_local_path", "(", "path", ")", "\n", "", "return", "path", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.exists": [[68, 73], ["os.path.exists", "FVCorePathManager.exists"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists"], ["", "@", "staticmethod", "\n", "def", "exists", "(", "path", ":", "str", ")", "->", "bool", ":", "\n", "        ", "if", "FVCorePathManager", ":", "\n", "            ", "return", "FVCorePathManager", ".", "exists", "(", "path", ")", "\n", "", "return", "os", ".", "path", ".", "exists", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.isfile": [[74, 79], ["os.path.isfile", "FVCorePathManager.isfile"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.isfile", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.isfile"], ["", "@", "staticmethod", "\n", "def", "isfile", "(", "path", ":", "str", ")", "->", "bool", ":", "\n", "        ", "if", "FVCorePathManager", ":", "\n", "            ", "return", "FVCorePathManager", ".", "isfile", "(", "path", ")", "\n", "", "return", "os", ".", "path", ".", "isfile", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.ls": [[80, 85], ["os.listdir", "FVCorePathManager.ls"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.ls"], ["", "@", "staticmethod", "\n", "def", "ls", "(", "path", ":", "str", ")", "->", "List", "[", "str", "]", ":", "\n", "        ", "if", "FVCorePathManager", ":", "\n", "            ", "return", "FVCorePathManager", ".", "ls", "(", "path", ")", "\n", "", "return", "os", ".", "listdir", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.mkdirs": [[86, 91], ["os.makedirs", "FVCorePathManager.mkdirs"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.mkdirs"], ["", "@", "staticmethod", "\n", "def", "mkdirs", "(", "path", ":", "str", ")", "->", "None", ":", "\n", "        ", "if", "FVCorePathManager", ":", "\n", "            ", "return", "FVCorePathManager", ".", "mkdirs", "(", "path", ")", "\n", "", "os", ".", "makedirs", "(", "path", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.rm": [[92, 97], ["os.remove", "FVCorePathManager.rm"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.rm"], ["", "@", "staticmethod", "\n", "def", "rm", "(", "path", ":", "str", ")", "->", "None", ":", "\n", "        ", "if", "FVCorePathManager", ":", "\n", "            ", "return", "FVCorePathManager", ".", "rm", "(", "path", ")", "\n", "", "os", ".", "remove", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.register_handler": [[98, 102], ["FVCorePathManager.register_handler"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.register_handler"], ["", "@", "staticmethod", "\n", "def", "register_handler", "(", "handler", ")", "->", "None", ":", "\n", "        ", "if", "FVCorePathManager", ":", "\n", "            ", "return", "FVCorePathManager", ".", "register_handler", "(", "handler", "=", "handler", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.checkpoint_utils.save_checkpoint": [[20, 111], ["getattr", "meters.StopwatchMeter", "meters.StopwatchMeter.start", "epoch_itr.end_of_epoch", "trainer.get_num_updates", "collections.OrderedDict", "hasattr", "best_function", "epoch_itr.state_dict", "extra_state.update", "os.path.join", "len", "trainer.save_checkpoint", "meters.StopwatchMeter.stop", "print", "checkpoint_utils.checkpoint_paths", "checkpoint_utils.checkpoint_paths", "checkpoint_utils.checkpoint_paths", "distributed_utils.is_master", "checkpoint_utils.save_checkpoint.is_better"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.StopwatchMeter.start", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.EpochBatchIterator.end_of_epoch", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.bmuf.FairseqBMUF.get_num_updates", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.state_dict", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.update", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.checkpoint_utils.save_checkpoint", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.StopwatchMeter.stop", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.checkpoint_utils.checkpoint_paths", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.checkpoint_utils.checkpoint_paths", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.checkpoint_utils.checkpoint_paths", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.distributed_utils.is_master"], ["logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "\n", "def", "save_checkpoint", "(", "args", ",", "trainer", ",", "epoch_itr", ",", "val_loss", ")", ":", "\n", "    ", "from", "fairseq", "import", "distributed_utils", ",", "meters", "\n", "\n", "prev_best", "=", "getattr", "(", "save_checkpoint", ",", "\"best\"", ",", "val_loss", ")", "\n", "if", "val_loss", "is", "not", "None", ":", "\n", "        ", "best_function", "=", "max", "if", "args", ".", "maximize_best_checkpoint_metric", "else", "min", "\n", "save_checkpoint", ".", "best", "=", "best_function", "(", "val_loss", ",", "prev_best", ")", "\n", "\n", "", "if", "args", ".", "no_save", "or", "not", "distributed_utils", ".", "is_master", "(", "args", ")", ":", "\n", "        ", "return", "\n", "\n", "", "def", "is_better", "(", "a", ",", "b", ")", ":", "\n", "        ", "return", "a", ">=", "b", "if", "args", ".", "maximize_best_checkpoint_metric", "else", "a", "<=", "b", "\n", "\n", "", "write_timer", "=", "meters", ".", "StopwatchMeter", "(", ")", "\n", "write_timer", ".", "start", "(", ")", "\n", "\n", "epoch", "=", "epoch_itr", ".", "epoch", "\n", "end_of_epoch", "=", "epoch_itr", ".", "end_of_epoch", "(", ")", "\n", "updates", "=", "trainer", ".", "get_num_updates", "(", ")", "\n", "\n", "checkpoint_conds", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "checkpoint_conds", "[", "\"checkpoint{}.pt\"", ".", "format", "(", "epoch", ")", "]", "=", "(", "\n", "end_of_epoch", "\n", "and", "not", "args", ".", "no_epoch_checkpoints", "\n", "and", "epoch", "%", "args", ".", "save_interval", "==", "0", "\n", ")", "\n", "checkpoint_conds", "[", "\"checkpoint_{}_{}.pt\"", ".", "format", "(", "epoch", ",", "updates", ")", "]", "=", "(", "\n", "not", "end_of_epoch", "\n", "and", "args", ".", "save_interval_updates", ">", "0", "\n", "and", "updates", "%", "args", ".", "save_interval_updates", "==", "0", "\n", ")", "\n", "checkpoint_conds", "[", "\"checkpoint_best.pt\"", "]", "=", "val_loss", "is", "not", "None", "and", "(", "\n", "not", "hasattr", "(", "save_checkpoint", ",", "\"best\"", ")", "\n", "or", "is_better", "(", "val_loss", ",", "save_checkpoint", ".", "best", ")", "\n", ")", "\n", "if", "val_loss", "is", "not", "None", "and", "args", ".", "keep_best_checkpoints", ">", "0", ":", "\n", "        ", "checkpoint_conds", "[", "\"checkpoint.best_{}_{:.2f}.pt\"", ".", "format", "(", "\n", "args", ".", "best_checkpoint_metric", ",", "val_loss", ")", "]", "=", "(", "\n", "not", "hasattr", "(", "save_checkpoint", ",", "\"best\"", ")", "\n", "or", "is_better", "(", "val_loss", ",", "save_checkpoint", ".", "best", ")", "\n", ")", "\n", "", "checkpoint_conds", "[", "\"checkpoint_last.pt\"", "]", "=", "not", "args", ".", "no_last_checkpoints", "\n", "\n", "extra_state", "=", "{", "\"train_iterator\"", ":", "epoch_itr", ".", "state_dict", "(", ")", ",", "\"val_loss\"", ":", "val_loss", "}", "\n", "if", "hasattr", "(", "save_checkpoint", ",", "\"best\"", ")", ":", "\n", "        ", "extra_state", ".", "update", "(", "{", "\"best\"", ":", "save_checkpoint", ".", "best", "}", ")", "\n", "\n", "", "checkpoints", "=", "[", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "fn", ")", "for", "fn", ",", "cond", "in", "checkpoint_conds", ".", "items", "(", ")", "if", "cond", "\n", "]", "\n", "if", "len", "(", "checkpoints", ")", ">", "0", ":", "\n", "        ", "trainer", ".", "save_checkpoint", "(", "checkpoints", "[", "0", "]", ",", "extra_state", ")", "\n", "for", "cp", "in", "checkpoints", "[", "1", ":", "]", ":", "\n", "            ", "PathManager", ".", "copy", "(", "checkpoints", "[", "0", "]", ",", "cp", ",", "overwrite", "=", "True", ")", "\n", "\n", "", "write_timer", ".", "stop", "(", ")", "\n", "logger", ".", "info", "(", "\n", "\"saved checkpoint {} (epoch {} @ {} updates, score {}) (writing took {} seconds)\"", ".", "format", "(", "\n", "checkpoints", "[", "0", "]", ",", "epoch", ",", "updates", ",", "val_loss", ",", "write_timer", ".", "sum", "\n", ")", "\n", ")", "\n", "\n", "", "if", "not", "end_of_epoch", "and", "args", ".", "keep_interval_updates", ">", "0", ":", "\n", "# remove old checkpoints; checkpoints are sorted in descending order", "\n", "        ", "checkpoints", "=", "checkpoint_paths", "(", "\n", "args", ".", "save_dir", ",", "pattern", "=", "r\"checkpoint_\\d+_(\\d+)\\.pt\"", "\n", ")", "\n", "for", "old_chk", "in", "checkpoints", "[", "args", ".", "keep_interval_updates", ":", "]", ":", "\n", "            ", "if", "os", ".", "path", ".", "lexists", "(", "old_chk", ")", ":", "\n", "                ", "os", ".", "remove", "(", "old_chk", ")", "\n", "\n", "", "", "", "if", "args", ".", "keep_last_epochs", ">", "0", ":", "\n", "# remove old epoch checkpoints; checkpoints are sorted in descending order", "\n", "        ", "checkpoints", "=", "checkpoint_paths", "(", "args", ".", "save_dir", ",", "pattern", "=", "r\"checkpoint(\\d+)\\.pt\"", ")", "\n", "for", "old_chk", "in", "checkpoints", "[", "args", ".", "keep_last_epochs", ":", "]", ":", "\n", "            ", "if", "os", ".", "path", ".", "lexists", "(", "old_chk", ")", ":", "\n", "                ", "os", ".", "remove", "(", "old_chk", ")", "\n", "\n", "", "", "", "if", "args", ".", "keep_best_checkpoints", ">", "0", ":", "\n", "# only keep the best N checkpoints according to validation metric", "\n", "        ", "checkpoints", "=", "checkpoint_paths", "(", "\n", "args", ".", "save_dir", ",", "pattern", "=", "r\"checkpoint\\.best_{}_(\\d+\\.?\\d*)\\.pt\"", ".", "format", "(", "args", ".", "best_checkpoint_metric", ")", ")", "\n", "if", "not", "args", ".", "maximize_best_checkpoint_metric", ":", "\n", "            ", "checkpoints", "=", "checkpoints", "[", ":", ":", "-", "1", "]", "\n", "", "for", "old_chk", "in", "checkpoints", "[", "args", ".", "keep_best_checkpoints", ":", "]", ":", "\n", "            ", "if", "os", ".", "path", ".", "lexists", "(", "old_chk", ")", ":", "\n", "                ", "os", ".", "remove", "(", "old_chk", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.checkpoint_utils.load_checkpoint": [[112, 159], ["trainer.load_checkpoint", "trainer.lr_step", "os.makedirs", "os.path.join", "eval", "trainer.get_train_iterator", "trainer.get_train_iterator.load_state_dict", "trainer.get_train_iterator"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.checkpoint_utils.load_checkpoint", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.lr_step", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.get_train_iterator", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.load_state_dict", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.get_train_iterator"], ["", "", "", "", "def", "load_checkpoint", "(", "args", ",", "trainer", ",", "**", "passthrough_args", ")", ":", "\n", "    ", "\"\"\"\n    Load a checkpoint and restore the training iterator.\n\n    *passthrough_args* will be passed through to\n    ``trainer.get_train_iterator``.\n    \"\"\"", "\n", "# only one worker should attempt to create the required dir", "\n", "if", "args", ".", "distributed_rank", "==", "0", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "save_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "if", "args", ".", "restore_file", "==", "\"checkpoint_last.pt\"", ":", "\n", "        ", "checkpoint_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "\"checkpoint_last.pt\"", ")", "\n", "", "else", ":", "\n", "        ", "checkpoint_path", "=", "args", ".", "restore_file", "\n", "\n", "", "extra_state", "=", "trainer", ".", "load_checkpoint", "(", "\n", "checkpoint_path", ",", "\n", "args", ".", "reset_optimizer", ",", "\n", "args", ".", "reset_lr_scheduler", ",", "\n", "eval", "(", "args", ".", "optimizer_overrides", ")", ",", "\n", "reset_meters", "=", "args", ".", "reset_meters", ",", "\n", ")", "\n", "\n", "if", "(", "\n", "extra_state", "is", "not", "None", "\n", "and", "\"best\"", "in", "extra_state", "\n", "and", "not", "args", ".", "reset_optimizer", "\n", "and", "not", "args", ".", "reset_meters", "\n", ")", ":", "\n", "        ", "save_checkpoint", ".", "best", "=", "extra_state", "[", "\"best\"", "]", "\n", "\n", "", "if", "extra_state", "is", "not", "None", "and", "not", "args", ".", "reset_dataloader", ":", "\n", "# restore iterator from checkpoint", "\n", "        ", "itr_state", "=", "extra_state", "[", "\"train_iterator\"", "]", "\n", "epoch_itr", "=", "trainer", ".", "get_train_iterator", "(", "\n", "epoch", "=", "itr_state", "[", "\"epoch\"", "]", ",", "load_dataset", "=", "True", ",", "**", "passthrough_args", "\n", ")", "\n", "epoch_itr", ".", "load_state_dict", "(", "itr_state", ")", "\n", "", "else", ":", "\n", "        ", "epoch_itr", "=", "trainer", ".", "get_train_iterator", "(", "\n", "epoch", "=", "0", ",", "load_dataset", "=", "True", ",", "**", "passthrough_args", "\n", ")", "\n", "\n", "", "trainer", ".", "lr_step", "(", "epoch_itr", ".", "epoch", ")", "\n", "\n", "return", "extra_state", ",", "epoch_itr", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.checkpoint_utils.load_checkpoint_to_cpu": [[161, 174], ["checkpoint_utils._upgrade_state_dict", "fairseq.file_io.PathManager.open", "torch.load", "arg_overrides.items", "setattr", "torch.serialization.default_restore_location"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.checkpoint_utils._upgrade_state_dict", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.load"], ["", "def", "load_checkpoint_to_cpu", "(", "path", ",", "arg_overrides", "=", "None", ")", ":", "\n", "    ", "\"\"\"Loads a checkpoint to CPU (with upgrading for backward compatibility).\"\"\"", "\n", "with", "PathManager", ".", "open", "(", "path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "state", "=", "torch", ".", "load", "(", "\n", "f", ",", "map_location", "=", "lambda", "s", ",", "l", ":", "default_restore_location", "(", "s", ",", "\"cpu\"", ")", "\n", ")", "\n", "\n", "", "args", "=", "state", "[", "\"args\"", "]", "\n", "if", "arg_overrides", "is", "not", "None", ":", "\n", "        ", "for", "arg_name", ",", "arg_val", "in", "arg_overrides", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "args", ",", "arg_name", ",", "arg_val", ")", "\n", "", "", "state", "=", "_upgrade_state_dict", "(", "state", ")", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.checkpoint_utils.load_model_ensemble": [[176, 187], ["checkpoint_utils.load_model_ensemble_and_task"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.checkpoint_utils.load_model_ensemble_and_task"], ["", "def", "load_model_ensemble", "(", "filenames", ",", "arg_overrides", "=", "None", ",", "task", "=", "None", ")", ":", "\n", "    ", "\"\"\"Loads an ensemble of models.\n\n    Args:\n        filenames (List[str]): checkpoint files to load\n        arg_overrides (Dict[str,Any], optional): override model args that\n            were used during model training\n        task (fairseq.tasks.FairseqTask, optional): task to use for loading\n    \"\"\"", "\n", "ensemble", ",", "args", ",", "_task", "=", "load_model_ensemble_and_task", "(", "filenames", ",", "arg_overrides", ",", "task", ")", "\n", "return", "ensemble", ",", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.checkpoint_utils.load_model_ensemble_and_task": [[189, 207], ["checkpoint_utils.load_checkpoint_to_cpu", "tasks.setup_task.build_model", "task.build_model.load_state_dict", "ensemble.append", "os.path.exists", "IOError", "tasks.setup_task"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.checkpoint_utils.load_checkpoint_to_cpu", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.build_model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.load_state_dict", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyLMTask.setup_task"], ["", "def", "load_model_ensemble_and_task", "(", "filenames", ",", "arg_overrides", "=", "None", ",", "task", "=", "None", ")", ":", "\n", "    ", "from", "fairseq", "import", "tasks", "\n", "\n", "ensemble", "=", "[", "]", "\n", "for", "filename", "in", "filenames", ":", "\n", "        ", "if", "not", "PathManager", ".", "exists", "(", "filename", ")", ":", "\n", "            ", "raise", "IOError", "(", "\"Model file not found: {}\"", ".", "format", "(", "filename", ")", ")", "\n", "", "state", "=", "load_checkpoint_to_cpu", "(", "filename", ",", "arg_overrides", ")", "\n", "\n", "args", "=", "state", "[", "\"args\"", "]", "\n", "if", "task", "is", "None", ":", "\n", "            ", "task", "=", "tasks", ".", "setup_task", "(", "args", ")", "\n", "\n", "# build model for ensemble", "\n", "", "model", "=", "task", ".", "build_model", "(", "args", ")", "\n", "model", ".", "load_state_dict", "(", "state", "[", "\"model\"", "]", ",", "strict", "=", "True", ",", "args", "=", "args", ")", "\n", "ensemble", ".", "append", "(", "model", ")", "\n", "", "return", "ensemble", ",", "args", ",", "task", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.checkpoint_utils.checkpoint_paths": [[209, 226], ["re.compile", "os.listdir", "enumerate", "re.compile.fullmatch", "os.path.join", "entries.append", "sorted", "float", "len", "pt_regexp.fullmatch.group", "pt_regexp.fullmatch.group", "pt_regexp.fullmatch.groups"], "function", ["None"], ["", "def", "checkpoint_paths", "(", "path", ",", "pattern", "=", "r\"checkpoint(\\d+)\\.pt\"", ")", ":", "\n", "    ", "\"\"\"Retrieves all checkpoints found in `path` directory.\n\n    Checkpoints are identified by matching filename to the specified pattern. If\n    the pattern contains groups, the result will be sorted by the first group in\n    descending order.\n    \"\"\"", "\n", "pt_regexp", "=", "re", ".", "compile", "(", "pattern", ")", "\n", "files", "=", "os", ".", "listdir", "(", "path", ")", "\n", "\n", "entries", "=", "[", "]", "\n", "for", "i", ",", "f", "in", "enumerate", "(", "files", ")", ":", "\n", "        ", "m", "=", "pt_regexp", ".", "fullmatch", "(", "f", ")", "\n", "if", "m", "is", "not", "None", ":", "\n", "            ", "idx", "=", "float", "(", "m", ".", "group", "(", "1", ")", ")", "if", "len", "(", "m", ".", "groups", "(", ")", ")", ">", "0", "else", "i", "\n", "entries", ".", "append", "(", "(", "idx", ",", "m", ".", "group", "(", "0", ")", ")", ")", "\n", "", "", "return", "[", "os", ".", "path", ".", "join", "(", "path", ",", "x", "[", "1", "]", ")", "for", "x", "in", "sorted", "(", "entries", ",", "reverse", "=", "True", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.checkpoint_utils.torch_persistent_save": [[228, 235], ["range", "torch.save", "logging.error", "traceback.format_exc"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.save", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.preprocessing.create_classifier_dataset.ParserWithUsage.error"], ["", "def", "torch_persistent_save", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "return", "torch", ".", "save", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "except", "Exception", ":", "\n", "            ", "if", "i", "==", "2", ":", "\n", "                ", "logger", ".", "error", "(", "traceback", ".", "format_exc", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.checkpoint_utils.convert_state_dict_type": [[237, 249], ["isinstance", "collections.OrderedDict", "state_dict.items", "isinstance", "checkpoint_utils.convert_state_dict_type", "torch.is_tensor", "checkpoint_utils.convert_state_dict_type", "state_dict.type"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.checkpoint_utils.convert_state_dict_type", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.checkpoint_utils.convert_state_dict_type"], ["", "", "", "", "def", "convert_state_dict_type", "(", "state_dict", ",", "ttype", "=", "torch", ".", "FloatTensor", ")", ":", "\n", "    ", "if", "isinstance", "(", "state_dict", ",", "dict", ")", ":", "\n", "        ", "cpu_dict", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "cpu_dict", "[", "k", "]", "=", "convert_state_dict_type", "(", "v", ")", "\n", "", "return", "cpu_dict", "\n", "", "elif", "isinstance", "(", "state_dict", ",", "list", ")", ":", "\n", "        ", "return", "[", "convert_state_dict_type", "(", "v", ")", "for", "v", "in", "state_dict", "]", "\n", "", "elif", "torch", ".", "is_tensor", "(", "state_dict", ")", ":", "\n", "        ", "return", "state_dict", ".", "type", "(", "ttype", ")", "\n", "", "else", ":", "\n", "        ", "return", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.checkpoint_utils.save_state": [[251, 291], ["utils.has_parameters", "criterion.state_dict", "checkpoint_utils.convert_state_dict_type", "fairseq.file_io.PathManager.open", "checkpoint_utils.torch_persistent_save", "optimizer.state_dict", "lr_scheduler.state_dict"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.has_parameters", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.state_dict", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.checkpoint_utils.convert_state_dict_type", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.checkpoint_utils.torch_persistent_save", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.state_dict", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.state_dict"], ["", "", "def", "save_state", "(", "\n", "filename", ",", "\n", "args", ",", "\n", "model_state_dict", ",", "\n", "criterion", ",", "\n", "optimizer", ",", "\n", "lr_scheduler", ",", "\n", "num_updates", ",", "\n", "optim_history", "=", "None", ",", "\n", "extra_state", "=", "None", ",", "\n", ")", ":", "\n", "    ", "from", "fairseq", "import", "utils", "\n", "\n", "if", "optim_history", "is", "None", ":", "\n", "        ", "optim_history", "=", "[", "]", "\n", "", "if", "extra_state", "is", "None", ":", "\n", "        ", "extra_state", "=", "{", "}", "\n", "", "state_dict", "=", "{", "\n", "\"args\"", ":", "args", ",", "\n", "\"model\"", ":", "model_state_dict", "if", "model_state_dict", "else", "{", "}", ",", "\n", "\"optimizer_history\"", ":", "optim_history", "\n", "+", "[", "\n", "{", "\n", "\"criterion_name\"", ":", "criterion", ".", "__class__", ".", "__name__", ",", "\n", "\"optimizer_name\"", ":", "optimizer", ".", "__class__", ".", "__name__", ",", "\n", "\"lr_scheduler_state\"", ":", "lr_scheduler", ".", "state_dict", "(", ")", ",", "\n", "\"num_updates\"", ":", "num_updates", ",", "\n", "}", "\n", "]", ",", "\n", "\"extra_state\"", ":", "extra_state", ",", "\n", "}", "\n", "if", "utils", ".", "has_parameters", "(", "criterion", ")", ":", "\n", "        ", "state_dict", "[", "\"criterion\"", "]", "=", "criterion", ".", "state_dict", "(", ")", "\n", "", "if", "not", "args", ".", "no_save_optimizer_state", ":", "\n", "        ", "state_dict", "[", "\"last_optimizer_state\"", "]", "=", "convert_state_dict_type", "(", "\n", "optimizer", ".", "state_dict", "(", ")", "\n", ")", "\n", "\n", "", "with", "PathManager", ".", "open", "(", "filename", ",", "\"wb\"", ")", "as", "f", ":", "\n", "        ", "torch_persistent_save", "(", "state_dict", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.checkpoint_utils._upgrade_state_dict": [[293, 363], ["getattr", "registry.set_defaults", "registry.set_defaults", "registry.REGISTRIES.items", "hasattr", "hasattr", "getattr", "getattr", "hasattr", "state[].get", "registry.set_defaults"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.registry.set_defaults", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.registry.set_defaults", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.registry.set_defaults"], ["", "", "def", "_upgrade_state_dict", "(", "state", ")", ":", "\n", "    ", "\"\"\"Helper for upgrading old model checkpoints.\"\"\"", "\n", "from", "fairseq", "import", "models", ",", "registry", ",", "tasks", "\n", "\n", "# add optimizer_history", "\n", "if", "\"optimizer_history\"", "not", "in", "state", ":", "\n", "        ", "state", "[", "\"optimizer_history\"", "]", "=", "[", "\n", "{", "\"criterion_name\"", ":", "\"CrossEntropyCriterion\"", ",", "\"best_loss\"", ":", "state", "[", "\"best_loss\"", "]", "}", "\n", "]", "\n", "state", "[", "\"last_optimizer_state\"", "]", "=", "state", "[", "\"optimizer\"", "]", "\n", "del", "state", "[", "\"optimizer\"", "]", "\n", "del", "state", "[", "\"best_loss\"", "]", "\n", "# move extra_state into sub-dictionary", "\n", "", "if", "\"epoch\"", "in", "state", "and", "\"extra_state\"", "not", "in", "state", ":", "\n", "        ", "state", "[", "\"extra_state\"", "]", "=", "{", "\n", "\"epoch\"", ":", "state", "[", "\"epoch\"", "]", ",", "\n", "\"batch_offset\"", ":", "state", "[", "\"batch_offset\"", "]", ",", "\n", "\"val_loss\"", ":", "state", "[", "\"val_loss\"", "]", ",", "\n", "}", "\n", "del", "state", "[", "\"epoch\"", "]", "\n", "del", "state", "[", "\"batch_offset\"", "]", "\n", "del", "state", "[", "\"val_loss\"", "]", "\n", "# reduce optimizer history's memory usage (only keep the last state)", "\n", "", "if", "\"optimizer\"", "in", "state", "[", "\"optimizer_history\"", "]", "[", "-", "1", "]", ":", "\n", "        ", "state", "[", "\"last_optimizer_state\"", "]", "=", "state", "[", "\"optimizer_history\"", "]", "[", "-", "1", "]", "[", "\"optimizer\"", "]", "\n", "for", "optim_hist", "in", "state", "[", "\"optimizer_history\"", "]", ":", "\n", "            ", "del", "optim_hist", "[", "\"optimizer\"", "]", "\n", "# record the optimizer class name", "\n", "", "", "if", "\"optimizer_name\"", "not", "in", "state", "[", "\"optimizer_history\"", "]", "[", "-", "1", "]", ":", "\n", "        ", "state", "[", "\"optimizer_history\"", "]", "[", "-", "1", "]", "[", "\"optimizer_name\"", "]", "=", "\"FairseqNAG\"", "\n", "# move best_loss into lr_scheduler_state", "\n", "", "if", "\"lr_scheduler_state\"", "not", "in", "state", "[", "\"optimizer_history\"", "]", "[", "-", "1", "]", ":", "\n", "        ", "state", "[", "\"optimizer_history\"", "]", "[", "-", "1", "]", "[", "\"lr_scheduler_state\"", "]", "=", "{", "\n", "\"best\"", ":", "state", "[", "\"optimizer_history\"", "]", "[", "-", "1", "]", "[", "\"best_loss\"", "]", "\n", "}", "\n", "del", "state", "[", "\"optimizer_history\"", "]", "[", "-", "1", "]", "[", "\"best_loss\"", "]", "\n", "# keep track of number of updates", "\n", "", "if", "\"num_updates\"", "not", "in", "state", "[", "\"optimizer_history\"", "]", "[", "-", "1", "]", ":", "\n", "        ", "state", "[", "\"optimizer_history\"", "]", "[", "-", "1", "]", "[", "\"num_updates\"", "]", "=", "0", "\n", "# old model checkpoints may not have separate source/target positions", "\n", "", "if", "hasattr", "(", "state", "[", "\"args\"", "]", ",", "\"max_positions\"", ")", "and", "not", "hasattr", "(", "\n", "state", "[", "\"args\"", "]", ",", "\"max_source_positions\"", "\n", ")", ":", "\n", "        ", "state", "[", "\"args\"", "]", ".", "max_source_positions", "=", "state", "[", "\"args\"", "]", ".", "max_positions", "\n", "state", "[", "\"args\"", "]", ".", "max_target_positions", "=", "state", "[", "\"args\"", "]", ".", "max_positions", "\n", "# use stateful training data iterator", "\n", "", "if", "\"train_iterator\"", "not", "in", "state", "[", "\"extra_state\"", "]", ":", "\n", "        ", "state", "[", "\"extra_state\"", "]", "[", "\"train_iterator\"", "]", "=", "{", "\n", "\"epoch\"", ":", "state", "[", "\"extra_state\"", "]", "[", "\"epoch\"", "]", ",", "\n", "\"iterations_in_epoch\"", ":", "state", "[", "\"extra_state\"", "]", ".", "get", "(", "\"batch_offset\"", ",", "0", ")", ",", "\n", "}", "\n", "# default to translation task", "\n", "", "if", "not", "hasattr", "(", "state", "[", "\"args\"", "]", ",", "\"task\"", ")", ":", "\n", "        ", "state", "[", "\"args\"", "]", ".", "task", "=", "\"translation\"", "\n", "# --raw-text and --lazy-load are deprecated", "\n", "", "if", "getattr", "(", "state", "[", "\"args\"", "]", ",", "\"raw_text\"", ",", "False", ")", ":", "\n", "        ", "state", "[", "\"args\"", "]", ".", "dataset_impl", "=", "\"raw\"", "\n", "", "elif", "getattr", "(", "state", "[", "\"args\"", "]", ",", "\"lazy_load\"", ",", "False", ")", ":", "\n", "        ", "state", "[", "\"args\"", "]", ".", "dataset_impl", "=", "\"lazy\"", "\n", "\n", "# set any missing default values in the task, model or other registries", "\n", "", "registry", ".", "set_defaults", "(", "state", "[", "\"args\"", "]", ",", "tasks", ".", "TASK_REGISTRY", "[", "state", "[", "\"args\"", "]", ".", "task", "]", ")", "\n", "registry", ".", "set_defaults", "(", "state", "[", "\"args\"", "]", ",", "models", ".", "ARCH_MODEL_REGISTRY", "[", "state", "[", "\"args\"", "]", ".", "arch", "]", ")", "\n", "for", "registry_name", ",", "REGISTRY", "in", "registry", ".", "REGISTRIES", ".", "items", "(", ")", ":", "\n", "        ", "choice", "=", "getattr", "(", "state", "[", "\"args\"", "]", ",", "registry_name", ",", "None", ")", "\n", "if", "choice", "is", "not", "None", ":", "\n", "            ", "cls", "=", "REGISTRY", "[", "\"registry\"", "]", "[", "choice", "]", "\n", "registry", ".", "set_defaults", "(", "state", "[", "\"args\"", "]", ",", "cls", ")", "\n", "\n", "", "", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.checkpoint_utils.prune_state_dict": [[365, 447], ["print", "state_dict.keys", "sorted", "range", "re.compile", "pruning_passes.append", "pruning_passes.append", "re.search", "re.search.group", "vars", "vars", "vars", "vars", "len", "str", "checkpoint_utils.prune_state_dict.create_pruning_pass"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], ["", "def", "prune_state_dict", "(", "state_dict", ",", "args", ")", ":", "\n", "    ", "\"\"\"Prune the given state_dict if desired for LayerDrop\n    (https://arxiv.org/abs/1909.11556).\n\n    Training with LayerDrop allows models to be robust to pruning at inference\n    time. This function prunes state_dict to allow smaller models to be loaded\n    from a larger model and re-maps the existing state_dict for this to occur.\n\n    It's called by functions that load models from checkpoints and does not\n    need to be called directly.\n    \"\"\"", "\n", "if", "not", "args", "or", "args", ".", "arch", "==", "\"ptt_transformer\"", ":", "\n", "# args should not be none, but don't crash if it is.", "\n", "        ", "return", "state_dict", "\n", "\n", "", "encoder_layers_to_keep", "=", "(", "\n", "args", ".", "encoder_layers_to_keep", "if", "\"encoder_layers_to_keep\"", "in", "vars", "(", "args", ")", "else", "None", "\n", ")", "\n", "decoder_layers_to_keep", "=", "(", "\n", "args", ".", "decoder_layers_to_keep", "if", "\"decoder_layers_to_keep\"", "in", "vars", "(", "args", ")", "else", "None", "\n", ")", "\n", "\n", "if", "not", "encoder_layers_to_keep", "and", "not", "decoder_layers_to_keep", ":", "\n", "        ", "return", "state_dict", "\n", "\n", "# apply pruning", "\n", "", "logger", ".", "info", "(", "\n", "\"Pruning model to specified layer configuration - this works best if the model was trained with LayerDrop\"", "\n", ")", "\n", "\n", "def", "create_pruning_pass", "(", "layers_to_keep", ",", "layer_name", ")", ":", "\n", "        ", "keep_layers", "=", "sorted", "(", "\n", "[", "int", "(", "layer_string", ")", "for", "layer_string", "in", "layers_to_keep", ".", "split", "(", "\",\"", ")", "]", "\n", ")", "\n", "mapping_dict", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "len", "(", "keep_layers", ")", ")", ":", "\n", "            ", "mapping_dict", "[", "str", "(", "keep_layers", "[", "i", "]", ")", "]", "=", "str", "(", "i", ")", "\n", "\n", "", "regex", "=", "re", ".", "compile", "(", "\"^{layer}.*\\.layers\\.(\\d+)\"", ".", "format", "(", "layer", "=", "layer_name", ")", ")", "\n", "return", "{", "\"substitution_regex\"", ":", "regex", ",", "\"mapping_dict\"", ":", "mapping_dict", "}", "\n", "\n", "", "pruning_passes", "=", "[", "]", "\n", "if", "encoder_layers_to_keep", ":", "\n", "        ", "pruning_passes", ".", "append", "(", "create_pruning_pass", "(", "encoder_layers_to_keep", ",", "\"encoder\"", ")", ")", "\n", "", "if", "decoder_layers_to_keep", ":", "\n", "        ", "pruning_passes", ".", "append", "(", "create_pruning_pass", "(", "decoder_layers_to_keep", ",", "\"decoder\"", ")", ")", "\n", "\n", "", "new_state_dict", "=", "{", "}", "\n", "for", "layer_name", "in", "state_dict", ".", "keys", "(", ")", ":", "\n", "        ", "match", "=", "re", ".", "search", "(", "\"\\.layers\\.(\\d+)\\.\"", ",", "layer_name", ")", "\n", "# if layer has no number in it, it is a supporting layer, such as an", "\n", "# embedding", "\n", "if", "not", "match", ":", "\n", "            ", "new_state_dict", "[", "layer_name", "]", "=", "state_dict", "[", "layer_name", "]", "\n", "continue", "\n", "\n", "# otherwise, layer should be pruned.", "\n", "", "original_layer_number", "=", "match", ".", "group", "(", "1", ")", "\n", "# figure out which mapping dict to replace from", "\n", "for", "pruning_pass", "in", "pruning_passes", ":", "\n", "            ", "if", "original_layer_number", "in", "pruning_pass", "[", "\"mapping_dict\"", "]", "and", "pruning_pass", "[", "\n", "\"substitution_regex\"", "\n", "]", ".", "search", "(", "layer_name", ")", ":", "\n", "                ", "new_layer_number", "=", "pruning_pass", "[", "\"mapping_dict\"", "]", "[", "original_layer_number", "]", "\n", "substitution_match", "=", "pruning_pass", "[", "\"substitution_regex\"", "]", ".", "search", "(", "\n", "layer_name", "\n", ")", "\n", "new_state_key", "=", "(", "\n", "layer_name", "[", ":", "substitution_match", ".", "start", "(", "1", ")", "]", "\n", "+", "new_layer_number", "\n", "+", "layer_name", "[", "substitution_match", ".", "end", "(", "1", ")", ":", "]", "\n", ")", "\n", "new_state_dict", "[", "new_state_key", "]", "=", "state_dict", "[", "layer_name", "]", "\n", "\n", "# Since layers are now pruned, *_layers_to_keep are no longer needed.", "\n", "# This is more of \"It would make it work fix\" rather than a proper fix.", "\n", "", "", "", "if", "\"encoder_layers_to_keep\"", "in", "vars", "(", "args", ")", ":", "\n", "        ", "args", ".", "encoder_layers_to_keep", "=", "None", "\n", "", "if", "\"decoder_layers_to_keep\"", "in", "vars", "(", "args", ")", ":", "\n", "        ", "args", ".", "decoder_layers_to_keep", "=", "None", "\n", "\n", "", "return", "new_state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.checkpoint_utils.load_pretrained_component_from_model": [[449, 478], ["checkpoint_utils.load_checkpoint_to_cpu", "isinstance", "collections.OrderedDict", "state[].keys", "component.load_state_dict", "os.path.exists", "IOError", "isinstance", "key.startswith", "ValueError", "len"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.checkpoint_utils.load_checkpoint_to_cpu", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.load_state_dict", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists"], ["", "def", "load_pretrained_component_from_model", "(", "\n", "component", ":", "Union", "[", "FairseqEncoder", ",", "FairseqDecoder", "]", ",", "checkpoint", ":", "str", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Load a pretrained FairseqEncoder or FairseqDecoder from checkpoint into the\n    provided `component` object. If state_dict fails to load, there may be a\n    mismatch in the architecture of the corresponding `component` found in the\n    `checkpoint` file.\n    \"\"\"", "\n", "if", "not", "PathManager", ".", "exists", "(", "checkpoint", ")", ":", "\n", "        ", "raise", "IOError", "(", "\"Model file not found: {}\"", ".", "format", "(", "checkpoint", ")", ")", "\n", "", "state", "=", "load_checkpoint_to_cpu", "(", "checkpoint", ")", "\n", "if", "isinstance", "(", "component", ",", "FairseqEncoder", ")", ":", "\n", "        ", "component_type", "=", "\"encoder\"", "\n", "", "elif", "isinstance", "(", "component", ",", "FairseqDecoder", ")", ":", "\n", "        ", "component_type", "=", "\"decoder\"", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\n", "\"component to load must be either a FairseqEncoder or \"", "\n", "\"FairseqDecoder. Loading other component types are not supported.\"", "\n", ")", "\n", "", "component_state_dict", "=", "OrderedDict", "(", ")", "\n", "for", "key", "in", "state", "[", "\"model\"", "]", ".", "keys", "(", ")", ":", "\n", "        ", "if", "key", ".", "startswith", "(", "component_type", ")", ":", "\n", "# encoder.input_layers.0.0.weight --> input_layers.0.0.weight", "\n", "            ", "component_subkey", "=", "key", "[", "len", "(", "component_type", ")", "+", "1", ":", "]", "\n", "component_state_dict", "[", "component_subkey", "]", "=", "state", "[", "\"model\"", "]", "[", "key", "]", "\n", "", "", "component", ".", "load_state_dict", "(", "component_state_dict", ",", "strict", "=", "True", ")", "\n", "return", "component", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.checkpoint_utils.verify_checkpoint_directory": [[480, 492], ["os.path.join", "os.path.exists", "os.makedirs", "os.remove", "open", "print"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], ["", "def", "verify_checkpoint_directory", "(", "save_dir", ":", "str", ")", "->", "None", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ",", "exist_ok", "=", "True", ")", "\n", "", "temp_file_path", "=", "os", ".", "path", ".", "join", "(", "save_dir", ",", "\"dummy\"", ")", "\n", "try", ":", "\n", "        ", "with", "open", "(", "temp_file_path", ",", "\"w\"", ")", ":", "\n", "            ", "pass", "\n", "", "", "except", "OSError", "as", "e", ":", "\n", "        ", "logger", ".", "warning", "(", "\"Unable to access checkpoint save directory: {}\"", ".", "format", "(", "save_dir", ")", ")", "\n", "raise", "e", "\n", "", "else", ":", "\n", "        ", "os", ".", "remove", "(", "temp_file_path", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.sequence_generator.SequenceGenerator.__init__": [[16, 76], ["tgt_dict.pad", "tgt_dict.unk", "tgt_dict.eos", "len", "min", "fairseq.search.BeamSearch"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.unk", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos"], ["class", "SequenceGenerator", "(", "object", ")", ":", "\n", "    ", "def", "__init__", "(", "\n", "self", ",", "\n", "tgt_dict", ",", "\n", "beam_size", "=", "1", ",", "\n", "max_len_a", "=", "0", ",", "\n", "max_len_b", "=", "200", ",", "\n", "min_len", "=", "1", ",", "\n", "normalize_scores", "=", "True", ",", "\n", "len_penalty", "=", "1.", ",", "\n", "unk_penalty", "=", "0.", ",", "\n", "retain_dropout", "=", "False", ",", "\n", "temperature", "=", "1.", ",", "\n", "match_source_len", "=", "False", ",", "\n", "no_repeat_ngram_size", "=", "0", ",", "\n", "search_strategy", "=", "None", ",", "\n", "dedup", "=", "False", ",", "\n", "verb", "=", "None", ",", "\n", "banned_toks", "=", "None", ",", "\n", "# used for training mixture coefficients only", "\n", "coefs", "=", "None", ",", "\n", "coef_trainer", "=", "None", ",", "\n", "learn", "=", "False", ",", "\n", "learn_every_token", "=", "False", ",", "\n", "\n", ")", ":", "\n", "        ", "\"\"\"Generates translations of a given source sentence.\n\n        Args:\n            tgt_dict (~fairseq.data.Dictionary): target dictionary\n            beam_size (int, optional): beam width (default: 1)\n            max_len_a/b (int, optional): generate sequences of maximum length\n                ax + b, where x is the source length\n            min_len (int, optional): the minimum length of the generated output\n                (not including end-of-sentence)\n            normalize_scores (bool, optional): normalize scores by the length\n                of the output (default: True)\n            len_penalty (float, optional): length penalty, where <1.0 favors\n                shorter, >1.0 favors longer sentences (default: 1.0)\n            unk_penalty (float, optional): unknown word penalty, where <0\n                produces more unks, >0 produces fewer (default: 0.0)\n            retain_dropout (bool, optional): use dropout when generating\n                (default: False)\n            temperature (float, optional): temperature, where values\n                >1.0 produce more uniform samples and values <1.0 produce\n                sharper samples (default: 1.0)\n            match_source_len (bool, optional): outputs should match the source\n                length (default: False)\n        \"\"\"", "\n", "self", ".", "pad", "=", "tgt_dict", ".", "pad", "(", ")", "\n", "self", ".", "unk", "=", "tgt_dict", ".", "unk", "(", ")", "\n", "self", ".", "eos", "=", "tgt_dict", ".", "eos", "(", ")", "\n", "self", ".", "verb", "=", "verb", "\n", "self", ".", "banned_toks", "=", "banned_toks", ",", "\n", "self", ".", "vocab_size", "=", "len", "(", "tgt_dict", ")", "\n", "self", ".", "beam_size", "=", "beam_size", "\n", "# the max beam size is the dictionary size - 1, since we never select pad", "\n", "self", ".", "beam_size", "=", "min", "(", "beam_size", ",", "self", ".", "vocab_size", "-", "1", ")", "\n", "self", ".", "max_len_a", "=", "max_len_a", "\n", "self", ".", "max_len_b", "=", "max_len_b", "\n", "self", ".", "min_len", "=", "min_len", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.sequence_generator.SequenceGenerator.generate": [[79, 93], ["torch.no_grad", "sequence_generator.EnsembleModel", "sequence_generator.SequenceGenerator._generate"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.sequence_generator.SequenceGenerator._generate"], ["self", ".", "unk_penalty", "=", "unk_penalty", "\n", "self", ".", "retain_dropout", "=", "retain_dropout", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "match_source_len", "=", "match_source_len", "\n", "self", ".", "no_repeat_ngram_size", "=", "no_repeat_ngram_size", "\n", "self", ".", "dedup", "=", "dedup", "\n", "# used for training mixture coefficients only", "\n", "self", ".", "coef_trainer", "=", "coef_trainer", "\n", "self", ".", "coefs", "=", "coefs", "\n", "self", ".", "learn", "=", "learn", "\n", "self", ".", "learn_every_token", "=", "learn_every_token", "# controls granularity of token learning", "\n", "assert", "temperature", ">", "0", ",", "'--temperature must be greater than 0'", "\n", "\n", "self", ".", "search", "=", "(", "\n", "search", ".", "BeamSearch", "(", "tgt_dict", ")", "if", "search_strategy", "is", "None", "else", "search_strategy", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.sequence_generator.SequenceGenerator._generate": [[94, 507], ["torch.no_grad", "src_tokens.size", "print", "print", "print", "model.forward_encoder", "torch.arange().view().repeat().view", "new_order.to().long.to().long.to().long", "model.reorder_encoder_out", "src_tokens.new().float().fill_", "replicate_first_beam.clone", "src_tokens.new().long().fill_", "replicate_first_beam.clone", "src_tokens.new_zeros().eq", "torch.arange().type_as", "range", "range", "model.eval", "src_lengths.max().item", "min", "replicate_first_beam.index_select", "set", "enumerate", "model.forward_decoder", "replicate_first_beam.type_as", "scores_buf.type_as.type_as.type_as", "sequence_generator.SequenceGenerator._generate.buffer"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles.BasicEnsembleModel.forward_encoder", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles._EnsembleModelEncoder.reorder_encoder_out", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles.EnsembleLevT.forward_decoder"], [")", "\n", "\n", "\n", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "generate", "(", "self", ",", "models", ",", "sample", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Generate a batch of translations.\n\n        Args:\n            models (List[~fairseq.models.FairseqModel]): ensemble of models\n            sample (dict): batch\n            prefix_tokens (torch.LongTensor, optional): force decoder to begin\n                with these tokens\n            bos_token (int, optional): beginning of sentence token\n                (default: self.eos)\n        \"\"\"", "\n", "model", "=", "EnsembleModel", "(", "models", ")", "\n", "return", "self", ".", "_generate", "(", "model", ",", "sample", ",", "**", "kwargs", ")", "\n", "\n", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_generate", "(", "\n", "self", ",", "\n", "model", ",", "\n", "sample", ",", "\n", "prefix_tokens", "=", "None", ",", "\n", "bos_token", "=", "None", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "if", "not", "self", ".", "retain_dropout", ":", "\n", "            ", "model", ".", "eval", "(", ")", "\n", "\n", "# model.forward normally channels prev_output_tokens into the decoder", "\n", "# separately, but SequenceGenerator directly calls model.encoder", "\n", "", "encoder_input", "=", "{", "\n", "k", ":", "v", "for", "k", ",", "v", "in", "sample", "[", "'net_input'", "]", ".", "items", "(", ")", "\n", "if", "k", "!=", "'prev_output_tokens'", "\n", "}", "\n", "\n", "src_tokens", "=", "encoder_input", "[", "'src_tokens'", "]", "\n", "src_lengths", "=", "(", "src_tokens", ".", "ne", "(", "self", ".", "eos", ")", "&", "src_tokens", ".", "ne", "(", "self", ".", "pad", ")", ")", ".", "long", "(", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "input_size", "=", "src_tokens", ".", "size", "(", ")", "\n", "# batch dimension goes first followed by source lengths", "\n", "bsz", "=", "input_size", "[", "0", "]", "\n", "src_len", "=", "input_size", "[", "1", "]", "\n", "beam_size", "=", "self", ".", "beam_size", "\n", "\n", "if", "self", ".", "match_source_len", ":", "\n", "            ", "max_len", "=", "src_lengths", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "            ", "max_len", "=", "min", "(", "\n", "int", "(", "self", ".", "max_len_a", "*", "src_len", "+", "self", ".", "max_len_b", ")", ",", "\n", "# exclude the EOS marker", "\n", "model", ".", "max_decoder_positions", "(", ")", "-", "1", ",", "\n", ")", "\n", "", "assert", "self", ".", "min_len", "<=", "max_len", ",", "'min_len cannot be larger than max_len, please adjust these!'", "\n", "\n", "# compute the encoder output for each beam", "\n", "encoder_outs", "=", "model", ".", "forward_encoder", "(", "encoder_input", ")", "\n", "new_order", "=", "torch", ".", "arange", "(", "bsz", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "1", ",", "beam_size", ")", ".", "view", "(", "-", "1", ")", "\n", "new_order", "=", "new_order", ".", "to", "(", "src_tokens", ".", "device", ")", ".", "long", "(", ")", "\n", "encoder_outs", "=", "model", ".", "reorder_encoder_out", "(", "encoder_outs", ",", "new_order", ")", "\n", "\n", "# initialize buffers", "\n", "scores", "=", "src_tokens", ".", "new", "(", "bsz", "*", "beam_size", ",", "max_len", "+", "1", ")", ".", "float", "(", ")", ".", "fill_", "(", "0", ")", "\n", "scores_buf", "=", "scores", ".", "clone", "(", ")", "\n", "tokens", "=", "src_tokens", ".", "new", "(", "bsz", "*", "beam_size", ",", "max_len", "+", "2", ")", ".", "long", "(", ")", ".", "fill_", "(", "self", ".", "pad", ")", "\n", "tokens_buf", "=", "tokens", ".", "clone", "(", ")", "\n", "tokens", "[", ":", ",", "0", "]", "=", "self", ".", "eos", "if", "bos_token", "is", "None", "else", "bos_token", "\n", "attn", ",", "attn_buf", "=", "None", ",", "None", "\n", "\n", "# The blacklist indicates candidates that should be ignored.", "\n", "# For example, suppose we're sampling and have already finalized 2/5", "\n", "# samples. Then the blacklist would mark 2 positions as being ignored,", "\n", "# so that we only finalize the remaining 3 samples.", "\n", "blacklist", "=", "src_tokens", ".", "new_zeros", "(", "bsz", ",", "beam_size", ")", ".", "eq", "(", "-", "1", ")", "# forward and backward-compatible False mask", "\n", "\n", "# list of completed sentences", "\n", "finalized", "=", "[", "[", "]", "for", "i", "in", "range", "(", "bsz", ")", "]", "\n", "finished", "=", "[", "False", "for", "i", "in", "range", "(", "bsz", ")", "]", "\n", "num_remaining_sent", "=", "bsz", "\n", "\n", "# number of candidate hypos per step", "\n", "cand_size", "=", "2", "*", "beam_size", "# 2 x beam size in case half are EOS", "\n", "\n", "# offset arrays for converting between different indexing schemes", "\n", "bbsz_offsets", "=", "(", "torch", ".", "arange", "(", "0", ",", "bsz", ")", "*", "beam_size", ")", ".", "unsqueeze", "(", "1", ")", ".", "type_as", "(", "tokens", ")", "\n", "cand_offsets", "=", "torch", ".", "arange", "(", "0", ",", "cand_size", ")", ".", "type_as", "(", "tokens", ")", "\n", "\n", "# helper function for allocating buffers on the fly", "\n", "buffers", "=", "{", "}", "\n", "\n", "def", "buffer", "(", "name", ",", "type_of", "=", "tokens", ")", ":", "# noqa", "\n", "            ", "if", "name", "not", "in", "buffers", ":", "\n", "                ", "buffers", "[", "name", "]", "=", "type_of", ".", "new", "(", ")", "\n", "", "return", "buffers", "[", "name", "]", "\n", "\n", "", "def", "is_finished", "(", "sent", ",", "step", ",", "unfin_idx", ")", ":", "\n", "            ", "\"\"\"\n            Check whether we've finished generation for a given sentence, by\n            comparing the worst score among finalized hypotheses to the best\n            possible score among unfinalized hypotheses.\n            \"\"\"", "\n", "assert", "len", "(", "finalized", "[", "sent", "]", ")", "<=", "beam_size", "\n", "if", "len", "(", "finalized", "[", "sent", "]", ")", "==", "beam_size", "or", "step", "==", "max_len", ":", "\n", "                ", "return", "True", "\n", "", "return", "False", "\n", "\n", "", "def", "finalize_hypos", "(", "step", ",", "bbsz_idx", ",", "eos_scores", ")", ":", "\n", "            ", "\"\"\"\n            Finalize the given hypotheses at this step, while keeping the total\n            number of finalized hypotheses per sentence <= beam_size.\n\n            Note: the input must be in the desired finalization order, so that\n            hypotheses that appear earlier in the input are preferred to those\n            that appear later.\n\n            Args:\n                step: current time step\n                bbsz_idx: A vector of indices in the range [0, bsz*beam_size),\n                    indicating which hypotheses to finalize\n                eos_scores: A vector of the same size as bbsz_idx containing\n                    scores for each hypothesis\n            \"\"\"", "\n", "assert", "bbsz_idx", ".", "numel", "(", ")", "==", "eos_scores", ".", "numel", "(", ")", "\n", "\n", "# clone relevant token and attention tensors", "\n", "tokens_clone", "=", "tokens", ".", "index_select", "(", "0", ",", "bbsz_idx", ")", "\n", "tokens_clone", "=", "tokens_clone", "[", ":", ",", "1", ":", "step", "+", "2", "]", "# skip the first index, which is EOS", "\n", "assert", "not", "tokens_clone", ".", "eq", "(", "self", ".", "eos", ")", ".", "any", "(", ")", "\n", "tokens_clone", "[", ":", ",", "step", "]", "=", "self", ".", "eos", "\n", "attn_clone", "=", "attn", ".", "index_select", "(", "0", ",", "bbsz_idx", ")", "[", ":", ",", ":", ",", "1", ":", "step", "+", "2", "]", "if", "attn", "is", "not", "None", "else", "None", "\n", "\n", "# compute scores per token position", "\n", "pos_scores", "=", "scores", ".", "index_select", "(", "0", ",", "bbsz_idx", ")", "[", ":", ",", ":", "step", "+", "1", "]", "\n", "pos_scores", "[", ":", ",", "step", "]", "=", "eos_scores", "\n", "# convert from cumulative to per-position scores", "\n", "pos_scores", "[", ":", ",", "1", ":", "]", "=", "pos_scores", "[", ":", ",", "1", ":", "]", "-", "pos_scores", "[", ":", ",", ":", "-", "1", "]", "\n", "\n", "# normalize sentence-level scores", "\n", "if", "self", ".", "normalize_scores", ":", "\n", "                ", "eos_scores", "/=", "(", "step", "+", "1", ")", "**", "self", ".", "len_penalty", "\n", "\n", "", "cum_unfin", "=", "[", "]", "\n", "prev", "=", "0", "\n", "for", "f", "in", "finished", ":", "\n", "                ", "if", "f", ":", "\n", "                    ", "prev", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "cum_unfin", ".", "append", "(", "prev", ")", "\n", "\n", "", "", "sents_seen", "=", "set", "(", ")", "\n", "for", "i", ",", "(", "idx", ",", "score", ")", "in", "enumerate", "(", "zip", "(", "bbsz_idx", ".", "tolist", "(", ")", ",", "eos_scores", ".", "tolist", "(", ")", ")", ")", ":", "\n", "                ", "unfin_idx", "=", "idx", "//", "beam_size", "\n", "sent", "=", "unfin_idx", "+", "cum_unfin", "[", "unfin_idx", "]", "\n", "\n", "sents_seen", ".", "add", "(", "(", "sent", ",", "unfin_idx", ")", ")", "\n", "\n", "if", "self", ".", "match_source_len", "and", "step", ">", "src_lengths", "[", "unfin_idx", "]", ":", "\n", "                    ", "score", "=", "-", "math", ".", "inf", "\n", "\n", "", "def", "get_hypo", "(", ")", ":", "\n", "\n", "                    ", "if", "attn_clone", "is", "not", "None", ":", "\n", "# remove padding tokens from attn scores", "\n", "                        ", "hypo_attn", "=", "attn_clone", "[", "i", "]", "\n", "", "else", ":", "\n", "                        ", "hypo_attn", "=", "None", "\n", "\n", "", "return", "{", "\n", "'tokens'", ":", "tokens_clone", "[", "i", "]", ",", "\n", "'score'", ":", "score", ",", "\n", "'attention'", ":", "hypo_attn", ",", "# src_len x tgt_len", "\n", "'alignment'", ":", "None", ",", "\n", "'positional_scores'", ":", "pos_scores", "[", "i", "]", ",", "\n", "}", "\n", "\n", "", "if", "len", "(", "finalized", "[", "sent", "]", ")", "<", "beam_size", ":", "\n", "                    ", "finalized", "[", "sent", "]", ".", "append", "(", "get_hypo", "(", ")", ")", "\n", "\n", "", "", "newly_finished", "=", "[", "]", "\n", "for", "sent", ",", "unfin_idx", "in", "sents_seen", ":", "\n", "# check termination conditions for this sentence", "\n", "                ", "if", "not", "finished", "[", "sent", "]", "and", "is_finished", "(", "sent", ",", "step", ",", "unfin_idx", ")", ":", "\n", "                    ", "finished", "[", "sent", "]", "=", "True", "\n", "newly_finished", ".", "append", "(", "unfin_idx", ")", "\n", "", "", "return", "newly_finished", "\n", "\n", "", "reorder_state", "=", "None", "\n", "batch_idxs", "=", "None", "\n", "for", "step", "in", "range", "(", "max_len", "+", "1", ")", ":", "# one extra step for EOS marker", "\n", "# reorder decoder internal states based on the prev choice of beams", "\n", "            ", "if", "reorder_state", "is", "not", "None", ":", "\n", "                ", "if", "batch_idxs", "is", "not", "None", ":", "\n", "# update beam indices to take into account removed sentences", "\n", "                    ", "corr", "=", "batch_idxs", "-", "torch", ".", "arange", "(", "batch_idxs", ".", "numel", "(", ")", ")", ".", "type_as", "(", "batch_idxs", ")", "\n", "reorder_state", ".", "view", "(", "-", "1", ",", "beam_size", ")", ".", "add_", "(", "corr", ".", "unsqueeze", "(", "-", "1", ")", "*", "beam_size", ")", "\n", "", "model", ".", "reorder_incremental_state", "(", "reorder_state", ")", "\n", "encoder_outs", "=", "model", ".", "reorder_encoder_out", "(", "encoder_outs", ",", "reorder_state", ")", "\n", "# this gives a distribution over vocab... but then later it zeros out everything but chosen token?", "\n", "", "lprobs", ",", "avg_attn_scores", "=", "model", ".", "forward_decoder", "(", "\n", "tokens", "[", ":", ",", ":", "step", "+", "1", "]", ",", "encoder_outs", ",", "temperature", "=", "self", ".", "temperature", ",", "\n", ")", "\n", "lprobs", "[", "lprobs", "!=", "lprobs", "]", "=", "-", "math", ".", "inf", "\n", "\n", "lprobs", "[", ":", ",", "self", ".", "pad", "]", "=", "-", "math", ".", "inf", "# never select pad", "\n", "lprobs", "[", ":", ",", "self", ".", "unk", "]", "-=", "self", ".", "unk_penalty", "# apply unk penalty", "\n", "\n", "# handle max length constraint", "\n", "if", "step", ">=", "max_len", ":", "\n", "                ", "lprobs", "[", ":", ",", ":", "self", ".", "eos", "]", "=", "-", "math", ".", "inf", "\n", "lprobs", "[", ":", ",", "self", ".", "eos", "+", "1", ":", "]", "=", "-", "math", ".", "inf", "\n", "\n", "# handle prefix tokens (possibly with different lengths)", "\n", "", "if", "prefix_tokens", "is", "not", "None", "and", "step", "<", "prefix_tokens", ".", "size", "(", "1", ")", "and", "step", "<", "max_len", ":", "\n", "                ", "prefix_toks", "=", "prefix_tokens", "[", ":", ",", "step", "]", ".", "unsqueeze", "(", "-", "1", ")", ".", "repeat", "(", "1", ",", "beam_size", ")", ".", "view", "(", "-", "1", ")", "\n", "prefix_lprobs", "=", "lprobs", ".", "gather", "(", "-", "1", ",", "prefix_toks", ".", "unsqueeze", "(", "-", "1", ")", ")", "\n", "prefix_mask", "=", "prefix_toks", ".", "ne", "(", "self", ".", "pad", ")", "\n", "lprobs", "[", "prefix_mask", "]", "=", "-", "math", ".", "inf", "\n", "lprobs", "[", "prefix_mask", "]", "=", "lprobs", "[", "prefix_mask", "]", ".", "scatter_", "(", "\n", "-", "1", ",", "prefix_toks", "[", "prefix_mask", "]", ".", "unsqueeze", "(", "-", "1", ")", ",", "prefix_lprobs", "[", "prefix_mask", "]", "\n", ")", "\n", "# if prefix includes eos, then we should make sure tokens and", "\n", "# scores are the same across all beams", "\n", "eos_mask", "=", "prefix_toks", ".", "eq", "(", "self", ".", "eos", ")", "\n", "if", "eos_mask", ".", "any", "(", ")", ":", "\n", "# validate that the first beam matches the prefix", "\n", "                    ", "first_beam", "=", "tokens", "[", "eos_mask", "]", ".", "view", "(", "-", "1", ",", "beam_size", ",", "tokens", ".", "size", "(", "-", "1", ")", ")", "[", ":", ",", "0", ",", "1", ":", "step", "+", "1", "]", "\n", "eos_mask_batch_dim", "=", "eos_mask", ".", "view", "(", "-", "1", ",", "beam_size", ")", "[", ":", ",", "0", "]", "\n", "target_prefix", "=", "prefix_tokens", "[", "eos_mask_batch_dim", "]", "[", ":", ",", ":", "step", "]", "\n", "assert", "(", "first_beam", "==", "target_prefix", ")", ".", "all", "(", ")", "\n", "\n", "def", "replicate_first_beam", "(", "tensor", ",", "mask", ")", ":", "\n", "                        ", "tensor", "=", "tensor", ".", "view", "(", "-", "1", ",", "beam_size", ",", "tensor", ".", "size", "(", "-", "1", ")", ")", "\n", "tensor", "[", "mask", "]", "=", "tensor", "[", "mask", "]", "[", ":", ",", ":", "1", ",", ":", "]", "\n", "return", "tensor", ".", "view", "(", "-", "1", ",", "tensor", ".", "size", "(", "-", "1", ")", ")", "\n", "\n", "# copy tokens, scores and lprobs from the first beam to all beams", "\n", "", "tokens", "=", "replicate_first_beam", "(", "tokens", ",", "eos_mask_batch_dim", ")", "\n", "scores", "=", "replicate_first_beam", "(", "scores", ",", "eos_mask_batch_dim", ")", "\n", "lprobs", "=", "replicate_first_beam", "(", "lprobs", ",", "eos_mask_batch_dim", ")", "\n", "", "", "elif", "step", "<", "self", ".", "min_len", ":", "\n", "# minimum length constraint (does not apply if using prefix_tokens)", "\n", "                ", "lprobs", "[", ":", ",", "self", ".", "eos", "]", "=", "-", "math", ".", "inf", "\n", "\n", "", "if", "self", ".", "no_repeat_ngram_size", ">", "0", ":", "\n", "# for each beam and batch sentence, generate a list of previous ngrams (will be same length as step)", "\n", "                ", "gen_ngrams", "=", "[", "{", "}", "for", "bbsz_idx", "in", "range", "(", "bsz", "*", "beam_size", ")", "]", "\n", "for", "bbsz_idx", "in", "range", "(", "bsz", "*", "beam_size", ")", ":", "\n", "                    ", "gen_tokens", "=", "tokens", "[", "bbsz_idx", "]", ".", "tolist", "(", ")", "\n", "for", "ngram", "in", "zip", "(", "*", "[", "gen_tokens", "[", "i", ":", "]", "for", "i", "in", "range", "(", "self", ".", "no_repeat_ngram_size", ")", "]", ")", ":", "\n", "                        ", "gen_ngrams", "[", "bbsz_idx", "]", "[", "tuple", "(", "ngram", "[", ":", "-", "1", "]", ")", "]", "=", "gen_ngrams", "[", "bbsz_idx", "]", ".", "get", "(", "tuple", "(", "ngram", "[", ":", "-", "1", "]", ")", ",", "[", "]", ")", "+", "[", "ngram", "[", "-", "1", "]", "]", "\n", "\n", "# Record attention scores", "\n", "", "", "", "if", "type", "(", "avg_attn_scores", ")", "is", "list", ":", "\n", "                ", "avg_attn_scores", "=", "avg_attn_scores", "[", "0", "]", "\n", "", "if", "avg_attn_scores", "is", "not", "None", ":", "\n", "                ", "if", "attn", "is", "None", ":", "\n", "                    ", "attn", "=", "scores", ".", "new", "(", "bsz", "*", "beam_size", ",", "src_tokens", ".", "size", "(", "1", ")", ",", "max_len", "+", "2", ")", "\n", "attn_buf", "=", "attn", ".", "clone", "(", ")", "\n", "", "attn", "[", ":", ",", ":", ",", "step", "+", "1", "]", ".", "copy_", "(", "avg_attn_scores", ")", "\n", "\n", "", "scores", "=", "scores", ".", "type_as", "(", "lprobs", ")", "\n", "scores_buf", "=", "scores_buf", ".", "type_as", "(", "lprobs", ")", "\n", "eos_bbsz_idx", "=", "buffer", "(", "'eos_bbsz_idx'", ")", "\n", "eos_scores", "=", "buffer", "(", "'eos_scores'", ",", "type_of", "=", "scores", ")", "\n", "\n", "self", ".", "search", ".", "set_src_lengths", "(", "src_lengths", ")", "\n", "\n", "if", "self", ".", "no_repeat_ngram_size", ">", "0", ":", "\n", "                ", "def", "calculate_banned_tokens", "(", "bbsz_idx", ")", ":", "\n", "# before decoding the next token, prevent decoding of ngrams that have already appeared", "\n", "# grabs a tuple of n -1 grams, so that can look in the dict for banned continuations (e.g. if ngram = 3, then tuple will be bigrams_", "\n", "                    ", "ngram_index", "=", "tuple", "(", "tokens", "[", "bbsz_idx", ",", "step", "+", "2", "-", "self", ".", "no_repeat_ngram_size", ":", "step", "+", "1", "]", ".", "tolist", "(", ")", ")", "\n", "return", "gen_ngrams", "[", "bbsz_idx", "]", ".", "get", "(", "ngram_index", ",", "[", "]", ")", "# returns the indices of banned continuations", "\n", "\n", "", "if", "step", "+", "2", "-", "self", ".", "no_repeat_ngram_size", ">=", "0", ":", "\n", "# no banned tokens if we haven't generated no_repeat_ngram_size tokens yet", "\n", "                    ", "banned_tokens", "=", "[", "calculate_banned_tokens", "(", "bbsz_idx", ")", "for", "bbsz_idx", "in", "range", "(", "bsz", "*", "beam_size", ")", "]", "\n", "", "else", ":", "\n", "                    ", "banned_tokens", "=", "[", "[", "]", "for", "bbsz_idx", "in", "range", "(", "bsz", "*", "beam_size", ")", "]", "\n", "\n", "", "for", "bbsz_idx", "in", "range", "(", "bsz", "*", "beam_size", ")", ":", "# batch size & beam size", "\n", "                    ", "lprobs", "[", "bbsz_idx", ",", "banned_tokens", "[", "bbsz_idx", "]", "]", "=", "-", "math", ".", "inf", "\n", "\n", "#print(\"banned verb ids {}\".format(self.verb))", "\n", "#print(\"banned tokens: {}\".format(self.banned_toks))", "\n", "", "", "if", "self", ".", "dedup", ":", "\n", "                ", "def", "find_verbs", "(", "bbsz_idx", ")", ":", "\n", "                    ", "np_toks", "=", "tokens", "[", "bbsz_idx", "]", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "verb_idxs", "=", "[", "]", "\n", "for", "verb", "in", "self", ".", "verb", ":", "\n", "                        ", "if", "verb", "not", "in", "np_toks", ":", "\n", "                            ", "continue", "\n", "", "verb_idxs", ".", "extend", "(", "np", ".", "where", "(", "np_toks", "==", "self", ".", "verb", ")", ")", "\n", "", "if", "not", "verb_idxs", ":", "\n", "                        ", "return", "[", "]", "\n", "#breakpoint()", "\n", "#print(verb_idxs)", "\n", "#print([tokens[bbsz_idx][i] for i in verb_idxs])", "\n", "", "return", "[", "tokens", "[", "bbsz_idx", "]", "[", "i", "+", "1", "]", ".", "item", "(", ")", "for", "i", "in", "verb_idxs", "[", "bbsz_idx", "]", "]", "# grab the next token following a verb symbol", "\n", "# find all tokens that are previously used verbs, zero out their lprobs", "\n", "# much harder to ban the whole \"word\" but should be able to just ban the first token since that effectively bans the word", "\n", "", "banned_tokens", "=", "[", "find_verbs", "(", "bbsz_idx", ")", "for", "bbsz_idx", "in", "range", "(", "bsz", "*", "beam_size", ")", "]", "\n", "#print(banned_tokens)", "\n", "for", "bbsz_idx", "in", "range", "(", "bsz", "*", "beam_size", ")", ":", "# batch size & beam size                                                                                                                          ", "\n", "                    ", "lprobs", "[", "bbsz_idx", ",", "banned_tokens", "[", "bbsz_idx", "]", "]", "=", "-", "math", ".", "inf", "\n", "\n", "", "", "if", "self", ".", "banned_toks", ":", "\n", "                ", "banned_tokens", "=", "[", "self", ".", "banned_toks", "[", "0", "]", "for", "bbsz_idx", "in", "range", "(", "bsz", "*", "beam_size", ")", "]", "\n", "for", "bbsz_idx", "in", "range", "(", "bsz", "*", "beam_size", ")", ":", "# batch size & beam size", "\n", "                    ", "lprobs", "[", "bbsz_idx", ",", "banned_tokens", "[", "bbsz_idx", "]", "]", "=", "-", "math", ".", "inf", "\n", "\n", "\n", "# calculate gold token language model score", "\n", "", "", "if", "self", ".", "learn", "and", "self", ".", "learn_every_token", "and", "step", ">", "0", ":", "\n", "# Have not tested this with beam > 1, some of the truncation might not work", "\n", "                ", "gold_sample", "=", "kwargs", ".", "get", "(", "'gold_sample'", ")", "\n", "gold_tokens", "=", "gold_sample", ".", "get", "(", "'target'", ")", "\n", "shift_gold_tokens", "=", "kwargs", ".", "get", "(", "'gold_sample'", ")", ".", "get", "(", "'net_input'", ")", ".", "get", "(", "\"prev_output_tokens\"", ")", "\n", "num_gold_tokens", "=", "gold_tokens", ".", "shape", "[", "1", "]", "\n", "num_shift", "=", "shift_gold_tokens", ".", "shape", "[", "1", "]", "\n", "reference_scorer", "=", "kwargs", ".", "get", "(", "'reference_scorer'", ")", "\n", "\n", "# gold_input = {", "\n", "#     k: v for k, v in gold_sample['net_input'].items()", "\n", "#     if k != 'prev_output_tokens'", "\n", "# }", "\n", "# gold_tokens = gold_input[\"src_tokens\"] # src_tokens is dim batch x length", "\n", "gold_length", "=", "min", "(", "step", "+", "1", ",", "num_gold_tokens", ")", "\n", "shift_length", "=", "min", "(", "step", "+", "1", ",", "num_shift", ")", "\n", "#print(type(gold_tokens))", "\n", "gold_tokens_trunc", "=", "gold_tokens", "[", ":", ",", ":", "gold_length", "]", "# model expects 2D", "\n", "shift_gold_trunc", "=", "shift_gold_tokens", "[", ":", ",", ":", "shift_length", "]", "\n", "#gold_input[\"src_lengths\"] = torch.tensor(src_lengths.data.item() + gold_length).unsqueeze(0)  # src_lengths is dim 1, as list of length for the batch", "\n", "#gold_input[\"src_tokens\"] = torch.cat((src_tokens, gold_tokens_trunc), dim=1)  # this should be 1D tensor of length of src_lengths", "\n", "\n", "#gold_sample = {\"net_input\": [src_tokens, src_lengths,  torch.tensor([2]).unsqueeze(0)]}", "\n", "trunc_gold_sample", "=", "copy", ".", "deepcopy", "(", "gold_sample", ")", "\n", "trunc_sample", "=", "copy", ".", "deepcopy", "(", "sample", ")", "\n", "trunc_sample", "[", "\"net_input\"", "]", "[", "\"prev_output_tokens\"", "]", "=", "tokens", "[", ":", ",", ":", "step", "+", "1", "]", "\n", "trunc_sample", "[", "\"target\"", "]", "=", "torch", ".", "cat", "(", "(", "tokens", "[", ":", ",", "1", ":", "step", "+", "1", "]", ",", "tokens", "[", ":", ",", "0", "]", ".", "unsqueeze", "(", "0", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n", "trunc_gold_sample", "[", "\"net_input\"", "]", "[", "\"prev_output_tokens\"", "]", "=", "shift_gold_trunc", "#torch.LongTensor([2]).unsqueeze(0)", "\n", "trunc_gold_sample", "[", "'target'", "]", "=", "gold_tokens_trunc", "\n", "seq_score", "=", "reference_scorer", ".", "generate", "(", "model", ".", "models", ",", "trunc_gold_sample", ")", "\n", "gen_seq_score", "=", "reference_scorer", ".", "generate", "(", "model", ".", "models", ",", "trunc_sample", ")", "# this will be one token less because we're generating one on the next step", "\n", "#breakpoint()", "\n", "# gold_encoder_outs = model.forward_encoder(gold_input)", "\n", "# # nothing about the ordering is dependent on the tokens, so can use new_order from original forward", "\n", "# gold_encoder_outs = model.reorder_encoder_out(gold_encoder_outs, new_order)", "\n", "\n", "#x = model.models[0](src_tokens, src_lengths, gold_tokens_trunc)", "\n", "##x = model.models[0].extract_features(gold_input[\"src_lengths\"], gold_input[\"src_tokens\"], [])", "\n", "\n", "#gold_lprobs, gold_avg_attn_scores = model.forward_decoder(gold_tokens, # this used to be tokens[:, :step + 1] -- check that \"tokens\" wasn't anything super special", "\n", "#                                                   gold_encoder_outs,", "\n", "#                                                   temperature=self.temperature)", "\n", "# add things to kwargs for access in step", "\n", "kwargs", "[", "\"gold_tokens\"", "]", "=", "gold_tokens_trunc", "\n", "kwargs", "[", "\"gold_lprobs\"", "]", "=", "seq_score", "[", "0", "]", "[", "0", "]", "[", "\"score\"", "]", "\n", "kwargs", "[", "\"gen_lprobs\"", "]", "=", "gen_seq_score", "[", "0", "]", "[", "0", "]", "[", "\"score\"", "]", "\n", "\n", "# the self.search.step actually only returns the top thing that you need. So we pass in src_tokens and tgt_tokens (so far) to be able to use discriminators in the search", "\n", "# in kwargs will be all the other things we need", "\n", "# print(kwargs)", "\n", "", "cand_scores", ",", "cand_indices", ",", "cand_beams", "=", "self", ".", "search", ".", "step", "(", "\n", "step", ",", "\n", "lprobs", ".", "view", "(", "bsz", ",", "-", "1", ",", "self", ".", "vocab_size", ")", ",", "\n", "scores", ".", "view", "(", "bsz", ",", "beam_size", ",", "-", "1", ")", "[", ":", ",", ":", ",", ":", "step", "]", ",", "\n", "src_tokens", ",", "\n", "tokens", "[", ":", ",", "1", ":", "step", "+", "1", "]", ",", "# this is the generated tokens till now, to cut off the padding ones. The one cuts off the first bos token?", "\n", "**", "kwargs", "\n", ")", "\n", "\n", "# cand_bbsz_idx contains beam indices for the top candidate", "\n", "# hypotheses, with a range of values: [0, bsz*beam_size),", "\n", "# and dimensions: [bsz, cand_size]", "\n", "cand_bbsz_idx", "=", "cand_beams", ".", "add", "(", "bbsz_offsets", ")", "\n", "\n", "# finalize hypotheses that end in eos, except for blacklisted ones", "\n", "# or candidates with a score of -inf", "\n", "eos_mask", "=", "cand_indices", ".", "eq", "(", "self", ".", "eos", ")", "&", "cand_scores", ".", "ne", "(", "-", "math", ".", "inf", ")", "\n", "eos_mask", "[", ":", ",", ":", "beam_size", "]", "[", "blacklist", "]", "=", "0", "\n", "\n", "# only consider eos when it's among the top beam_size indices", "\n", "torch", ".", "masked_select", "(", "\n", "cand_bbsz_idx", "[", ":", ",", ":", "beam_size", "]", ",", "\n", "mask", "=", "eos_mask", "[", ":", ",", ":", "beam_size", "]", ",", "\n", "out", "=", "eos_bbsz_idx", ",", "\n", ")", "\n", "\n", "finalized_sents", "=", "set", "(", ")", "\n", "if", "eos_bbsz_idx", ".", "numel", "(", ")", ">", "0", ":", "\n", "                ", "torch", ".", "masked_select", "(", "\n", "cand_scores", "[", ":", ",", ":", "beam_size", "]", ",", "\n", "mask", "=", "eos_mask", "[", ":", ",", ":", "beam_size", "]", ",", "\n", "out", "=", "eos_scores", ",", "\n", ")", "\n", "finalized_sents", "=", "finalize_hypos", "(", "step", ",", "eos_bbsz_idx", ",", "eos_scores", ")", "\n", "num_remaining_sent", "-=", "len", "(", "finalized_sents", ")", "\n", "\n", "", "assert", "num_remaining_sent", ">=", "0", "\n", "if", "num_remaining_sent", "==", "0", ":", "\n", "                ", "break", "\n", "", "assert", "step", "<", "max_len", "\n", "\n", "if", "len", "(", "finalized_sents", ")", ">", "0", ":", "\n", "                ", "new_bsz", "=", "bsz", "-", "len", "(", "finalized_sents", ")", "\n", "\n", "# construct batch_idxs which holds indices of batches to keep for the next pass", "\n", "batch_mask", "=", "cand_indices", ".", "new_ones", "(", "bsz", ")", "\n", "batch_mask", "[", "cand_indices", ".", "new", "(", "finalized_sents", ")", "]", "=", "0", "\n", "batch_idxs", "=", "batch_mask", ".", "nonzero", "(", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.sequence_generator.EnsembleModel.__init__": [[512, 518], ["super().__init__", "torch.nn.ModuleList", "all", "hasattr", "isinstance"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["cand_scores", "=", "cand_scores", "[", "batch_idxs", "]", "\n", "cand_indices", "=", "cand_indices", "[", "batch_idxs", "]", "\n", "if", "prefix_tokens", "is", "not", "None", ":", "\n", "                    ", "prefix_tokens", "=", "prefix_tokens", "[", "batch_idxs", "]", "\n", "", "src_lengths", "=", "src_lengths", "[", "batch_idxs", "]", "\n", "blacklist", "=", "blacklist", "[", "batch_idxs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.sequence_generator.EnsembleModel.has_encoder": [[519, 521], ["hasattr"], "methods", ["None"], ["scores", "=", "scores", ".", "view", "(", "bsz", ",", "-", "1", ")", "[", "batch_idxs", "]", ".", "view", "(", "new_bsz", "*", "beam_size", ",", "-", "1", ")", "\n", "scores_buf", ".", "resize_as_", "(", "scores", ")", "\n", "tokens", "=", "tokens", ".", "view", "(", "bsz", ",", "-", "1", ")", "[", "batch_idxs", "]", ".", "view", "(", "new_bsz", "*", "beam_size", ",", "-", "1", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.sequence_generator.EnsembleModel.max_decoder_positions": [[522, 524], ["min", "m.max_decoder_positions"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles.BasicEnsembleModel.max_decoder_positions"], ["tokens_buf", ".", "resize_as_", "(", "tokens", ")", "\n", "if", "attn", "is", "not", "None", ":", "\n", "                    ", "attn", "=", "attn", ".", "view", "(", "bsz", ",", "-", "1", ")", "[", "batch_idxs", "]", ".", "view", "(", "new_bsz", "*", "beam_size", ",", "attn", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.sequence_generator.EnsembleModel.forward_encoder": [[525, 530], ["torch.no_grad", "sequence_generator.EnsembleModel.has_encoder", "model.encoder"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles.BasicEnsembleModel.has_encoder", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqMultiModel.encoder"], ["attn_buf", ".", "resize_as_", "(", "attn", ")", "\n", "", "bsz", "=", "new_bsz", "\n", "", "else", ":", "\n", "                ", "batch_idxs", "=", "None", "\n", "\n", "# Set active_mask so that values > cand_size indicate eos or", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.sequence_generator.EnsembleModel.forward_decoder": [[531, 564], ["torch.no_grad", "zip", "len", "sequence_generator.EnsembleModel._decode_one", "sequence_generator.EnsembleModel._decode_one", "log_probs.append", "torch.logsumexp", "math.log", "avg_attn.div_", "torch.stack", "len", "len", "sequence_generator.EnsembleModel.has_encoder", "avg_attn.add_"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.sequence_generator.EnsembleModelWithAlignment._decode_one", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.sequence_generator.EnsembleModelWithAlignment._decode_one", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.dynamic_crf_layer.logsumexp", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles.BasicEnsembleModel.has_encoder"], ["# blacklisted hypos and values < cand_size indicate candidate", "\n", "# active hypos. After this, the min values per row are the top", "\n", "# candidate active hypos.", "\n", "", "active_mask", "=", "buffer", "(", "'active_mask'", ")", "\n", "eos_mask", "[", ":", ",", ":", "beam_size", "]", "|=", "blacklist", "\n", "torch", ".", "add", "(", "\n", "eos_mask", ".", "type_as", "(", "cand_offsets", ")", "*", "cand_size", ",", "\n", "cand_offsets", "[", ":", "eos_mask", ".", "size", "(", "1", ")", "]", ",", "\n", "out", "=", "active_mask", ",", "\n", ")", "\n", "\n", "# get the top beam_size active hypotheses, which are just the hypos", "\n", "# with the smallest values in active_mask", "\n", "active_hypos", ",", "new_blacklist", "=", "buffer", "(", "'active_hypos'", ")", ",", "buffer", "(", "'new_blacklist'", ")", "\n", "torch", ".", "topk", "(", "\n", "active_mask", ",", "k", "=", "beam_size", ",", "dim", "=", "1", ",", "largest", "=", "False", ",", "\n", "out", "=", "(", "new_blacklist", ",", "active_hypos", ")", "\n", ")", "\n", "\n", "# update blacklist to ignore any finalized hypos", "\n", "blacklist", "=", "new_blacklist", ".", "ge", "(", "cand_size", ")", "[", ":", ",", ":", "beam_size", "]", "\n", "assert", "(", "~", "blacklist", ")", ".", "any", "(", "dim", "=", "1", ")", ".", "all", "(", ")", "\n", "\n", "active_bbsz_idx", "=", "buffer", "(", "'active_bbsz_idx'", ")", "\n", "torch", ".", "gather", "(", "\n", "cand_bbsz_idx", ",", "dim", "=", "1", ",", "index", "=", "active_hypos", ",", "\n", "out", "=", "active_bbsz_idx", ",", "\n", ")", "\n", "active_scores", "=", "torch", ".", "gather", "(", "\n", "cand_scores", ",", "dim", "=", "1", ",", "index", "=", "active_hypos", ",", "\n", "out", "=", "scores", "[", ":", ",", "step", "]", ".", "view", "(", "bsz", ",", "beam_size", ")", ",", "\n", ")", "\n", "\n", "active_bbsz_idx", "=", "active_bbsz_idx", ".", "view", "(", "-", "1", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.sequence_generator.EnsembleModel._decode_one": [[565, 586], ["model.get_normalized_probs", "list", "list", "decoder_out[].div_", "type", "attn.get.get.get", "model.forward_decoder", "model.forward_decoder"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.get_normalized_probs", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles.EnsembleLevT.forward_decoder", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles.EnsembleLevT.forward_decoder"], ["active_scores", "=", "active_scores", ".", "view", "(", "-", "1", ")", "\n", "\n", "# copy tokens and scores for active hypotheses", "\n", "torch", ".", "index_select", "(", "\n", "tokens", "[", ":", ",", ":", "step", "+", "1", "]", ",", "dim", "=", "0", ",", "index", "=", "active_bbsz_idx", ",", "\n", "out", "=", "tokens_buf", "[", ":", ",", ":", "step", "+", "1", "]", ",", "\n", ")", "\n", "torch", ".", "gather", "(", "\n", "cand_indices", ",", "dim", "=", "1", ",", "index", "=", "active_hypos", ",", "\n", "out", "=", "tokens_buf", ".", "view", "(", "bsz", ",", "beam_size", ",", "-", "1", ")", "[", ":", ",", ":", ",", "step", "+", "1", "]", ",", "\n", ")", "\n", "if", "step", ">", "0", ":", "\n", "                ", "torch", ".", "index_select", "(", "\n", "scores", "[", ":", ",", ":", "step", "]", ",", "dim", "=", "0", ",", "index", "=", "active_bbsz_idx", ",", "\n", "out", "=", "scores_buf", "[", ":", ",", ":", "step", "]", ",", "\n", ")", "\n", "", "torch", ".", "gather", "(", "\n", "cand_scores", ",", "dim", "=", "1", ",", "index", "=", "active_hypos", ",", "\n", "out", "=", "scores_buf", ".", "view", "(", "bsz", ",", "beam_size", ",", "-", "1", ")", "[", ":", ",", ":", ",", "step", "]", ",", "\n", ")", "\n", "\n", "# copy attention for active hypotheses", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.sequence_generator.EnsembleModel.reorder_encoder_out": [[587, 593], ["sequence_generator.EnsembleModel.has_encoder", "model.encoder.reorder_encoder_out", "zip"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles.BasicEnsembleModel.has_encoder", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles._EnsembleModelEncoder.reorder_encoder_out"], ["if", "attn", "is", "not", "None", ":", "\n", "                ", "torch", ".", "index_select", "(", "\n", "attn", "[", ":", ",", ":", ",", ":", "step", "+", "2", "]", ",", "dim", "=", "0", ",", "index", "=", "active_bbsz_idx", ",", "\n", "out", "=", "attn_buf", "[", ":", ",", ":", ",", ":", "step", "+", "2", "]", ",", "\n", ")", "\n", "\n", "# swap buffers", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.sequence_generator.EnsembleModel.reorder_incremental_state": [[595, 600], ["model.decoder.reorder_incremental_state"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer.reorder_incremental_state"], ["scores", ",", "scores_buf", "=", "scores_buf", ",", "scores", "\n", "if", "attn", "is", "not", "None", ":", "\n", "                ", "attn", ",", "attn_buf", "=", "attn_buf", ",", "attn", "\n", "\n", "# reorder incremental state in decoder", "\n", "", "reorder_state", "=", "active_bbsz_idx", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.sequence_generator.SequenceGeneratorWithAlignment.__init__": [[604, 617], ["sequence_generator.SequenceGenerator.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["            ", "finalized", "[", "sent", "]", "=", "sorted", "(", "finalized", "[", "sent", "]", ",", "key", "=", "lambda", "r", ":", "r", "[", "'score'", "]", ",", "reverse", "=", "True", ")", "\n", "\n", "", "if", "self", ".", "learn", "and", "not", "self", ".", "learn_every_token", ":", "# only train on completed sequence TODO normalise LM scores by length? Or just truncate...", "\n", "            ", "all_raw_scores", ",", "gold_cont_raw_scores", "=", "[", "]", ",", "[", "]", "\n", "scorers", "=", "kwargs", ".", "get", "(", "\"scorers\"", ",", "[", "]", ")", "\n", "gold_sample", "=", "kwargs", ".", "get", "(", "'gold_sample'", ")", "\n", "gold_tokens", "=", "gold_sample", ".", "get", "(", "'target'", ")", "\n", "#num_gold_tokens = gold_tokens.shape[1]", "\n", "reference_scorer", "=", "kwargs", ".", "get", "(", "'reference_scorer'", ")", "\n", "coefs", "=", "self", ".", "coef_trainer", ".", "weight_model", ".", "coefs", ".", "weight", ".", "data", ".", "cpu", "(", ")", ".", "squeeze", "(", ")", ".", "numpy", "(", ")", "\n", "if", "not", "coefs", ".", "shape", ":", "# numpy makes single element arrays shapeless which makes them not iterable", "\n", "                ", "coefs", "=", "[", "coefs", ".", "item", "(", ")", "]", "\n", "#gen_lm_score = finalized[0][0][\"score\"] # this is untruncated why is this not the gen_lm_score?", "\n", "", "final_tokens", "=", "finalized", "[", "0", "]", "[", "0", "]", "[", "\"tokens\"", "]", ".", "unsqueeze", "(", "0", ")", "# since it is 1D", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.sequence_generator.SequenceGeneratorWithAlignment.generate": [[618, 641], ["torch.no_grad", "sequence_generator.EnsembleModelWithAlignment", "sequence_generator.SequenceGenerator._generate", "sequence_generator.SequenceGeneratorWithAlignment._prepare_batch_for_alignment", "any", "range", "sequence_generator.EnsembleModelWithAlignment.forward_align", "fairseq.utils.extract_hard_alignment", "getattr", "[].transpose", "range"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.sequence_generator.SequenceGenerator._generate", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.sequence_generator.SequenceGeneratorWithAlignment._prepare_batch_for_alignment", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.sequence_generator.EnsembleModelWithAlignment.forward_align", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.extract_hard_alignment"], ["shift_tokens", "=", "tokens", "[", ":", ",", ":", "step", "+", "1", "]", "\n", "num_final_tokens", "=", "final_tokens", ".", "shape", "[", "1", "]", "\n", "#max_tok = min(num_gold_tokens, num_final_tokens)", "\n", "#final_tok_trunc, gold_tok_trunc = final_tokens[:, :max_tok], gold_tokens[:, :max_tok]", "\n", "for", "coef", ",", "scorer", "in", "zip", "(", "coefs", ",", "scorers", ")", ":", "# get scores for generation and for gold, given source tokens", "\n", "                ", "raw_score", "=", "scorer", ".", "predict", "(", "\"sentence_classification_head\"", ",", "final_tokens", ")", "#final_tok_trunc)", "\n", "gold_score", "=", "scorer", ".", "predict", "(", "\"sentence_classification_head\"", ",", "gold_tokens", ")", "#gold_tok_trunc)", "\n", "#breakpoint()", "\n", "all_raw_scores", ".", "append", "(", "raw_score", "[", "0", "]", "[", "1", "]", ".", "data", ".", "item", "(", ")", ")", "\n", "gold_cont_raw_scores", ".", "append", "(", "gold_score", "[", "0", "]", "[", "1", "]", ".", "data", ".", "item", "(", ")", ")", "\n", "\n", "#get language model scores for gold sequence and gen sequence", "\n", "#if num_final_tokens <= max_tok:", "\n", "#    gen_lm_score = finalized[0][0][\"score\"]", "\n", "#else: #TODO I might not have to do the truncation since the logprobs are normalised anyway?", "\n", "#    # TODO make this a function as it is repeated code", "\n", "", "gen_sample", "=", "copy", ".", "deepcopy", "(", "sample", ")", "\n", "gen_sample", "[", "\"net_input\"", "]", "[", "\"prev_output_tokens\"", "]", "=", "shift_tokens", "\n", "gen_sample", "[", "\"target\"", "]", "=", "final_tokens", "\n", "seq_score", "=", "reference_scorer", ".", "generate", "(", "model", ".", "models", ",", "gen_sample", ")", "\n", "gen_lm_score", "=", "seq_score", "[", "0", "]", "[", "0", "]", "[", "\"score\"", "]", "\n", "#breakpoint()", "\n", "seq_score", "=", "reference_scorer", ".", "generate", "(", "model", ".", "models", ",", "gold_sample", ")", "\n", "gold_lm_score", "=", "seq_score", "[", "0", "]", "[", "0", "]", "[", "\"score\"", "]", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.sequence_generator.SequenceGeneratorWithAlignment._prepare_batch_for_alignment": [[642, 657], ["src_tokens[].expand().contiguous().view", "src_lengths[].expand().contiguous().view", "fairseq.data.data_utils.collate_tokens", "fairseq.data.data_utils.collate_tokens", "src_tokens[].expand().contiguous", "src_lengths[].expand().contiguous", "src_tokens[].expand", "src_lengths[].expand"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.collate_tokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.collate_tokens"], ["\n", "loss", "=", "self", ".", "coef_trainer", ".", "train_coefficients", "(", "gold_lm_score", ",", "gen_lm_score", ",", "\n", "gold_cont_raw_scores", ",", "\n", "all_raw_scores", ")", "\n", "\n", "", "return", "finalized", "\n", "\n", "\n", "", "", "class", "EnsembleModel", "(", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"A wrapper around an ensemble of models.\"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "models", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "models", "=", "torch", ".", "nn", ".", "ModuleList", "(", "models", ")", "\n", "self", ".", "incremental_states", "=", "None", "\n", "if", "all", "(", "hasattr", "(", "m", ",", "'decoder'", ")", "and", "isinstance", "(", "m", ".", "decoder", ",", "FairseqIncrementalDecoder", ")", "for", "m", "in", "models", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.sequence_generator.EnsembleModelWithAlignment.__init__": [[662, 664], ["sequence_generator.EnsembleModel.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["\n", "", "def", "max_decoder_positions", "(", "self", ")", ":", "\n", "        ", "return", "min", "(", "m", ".", "max_decoder_positions", "(", ")", "for", "m", "in", "self", ".", "models", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.sequence_generator.EnsembleModelWithAlignment.forward_align": [[665, 677], ["model", "len", "avg_attn.div_", "avg_attn.add_", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.model"], ["\n", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "forward_encoder", "(", "self", ",", "encoder_input", ")", ":", "\n", "        ", "if", "not", "self", ".", "has_encoder", "(", ")", ":", "\n", "            ", "return", "None", "\n", "", "return", "[", "model", ".", "encoder", "(", "**", "encoder_input", ")", "for", "model", "in", "self", ".", "models", "]", "\n", "\n", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "forward_decoder", "(", "self", ",", "tokens", ",", "encoder_outs", ",", "temperature", "=", "1.", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "models", ")", "==", "1", ":", "\n", "            ", "return", "self", ".", "_decode_one", "(", "\n", "tokens", ",", "\n", "self", ".", "models", "[", "0", "]", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.sequence_generator.EnsembleModelWithAlignment._decode_one": [[678, 701], ["model.get_normalized_probs", "list", "list", "decoder_out[].div_", "type", "attn.get.get.get", "model.forward_decoder", "model.forward_decoder"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.get_normalized_probs", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles.EnsembleLevT.forward_decoder", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles.EnsembleLevT.forward_decoder"], ["encoder_outs", "[", "0", "]", "if", "self", ".", "has_encoder", "(", ")", "else", "None", ",", "\n", "self", ".", "incremental_states", ",", "\n", "log_probs", "=", "True", ",", "\n", "temperature", "=", "temperature", ",", "\n", ")", "\n", "\n", "", "log_probs", "=", "[", "]", "\n", "avg_attn", "=", "None", "\n", "for", "model", ",", "encoder_out", "in", "zip", "(", "self", ".", "models", ",", "encoder_outs", ")", ":", "\n", "            ", "probs", ",", "attn", "=", "self", ".", "_decode_one", "(", "\n", "tokens", ",", "\n", "model", ",", "\n", "encoder_out", ",", "\n", "self", ".", "incremental_states", ",", "\n", "log_probs", "=", "True", ",", "\n", "temperature", "=", "temperature", ",", "\n", ")", "\n", "log_probs", ".", "append", "(", "probs", ")", "\n", "if", "attn", "is", "not", "None", ":", "\n", "                ", "if", "avg_attn", "is", "None", ":", "\n", "                    ", "avg_attn", "=", "attn", "\n", "", "else", ":", "\n", "                    ", "avg_attn", ".", "add_", "(", "attn", ")", "\n", "", "", "", "avg_probs", "=", "torch", ".", "logsumexp", "(", "torch", ".", "stack", "(", "log_probs", ",", "dim", "=", "0", ")", ",", "dim", "=", "0", ")", "-", "math", ".", "log", "(", "len", "(", "self", ".", "models", ")", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.StaticCoefficientModel.StaticCoefficientModel.__init__": [[9, 14], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.FloatTensor", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear"], ["    ", "def", "__init__", "(", "self", ",", "num_mods", ")", ":", "\n", "        ", "super", "(", "StaticCoefficientModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_mods", "=", "num_mods", "\n", "self", ".", "coefs", "=", "nn", ".", "Linear", "(", "num_mods", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "coefs", ".", "weight", ".", "data", "=", "torch", ".", "FloatTensor", "(", "np", ".", "ones", "(", "(", "1", ",", "num_mods", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.StaticCoefficientModel.StaticCoefficientModel.forward": [[15, 18], ["StaticCoefficientModel.StaticCoefficientModel.coefs"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "scores", ")", ":", "\n", "#print(scores)", "\n", "        ", "return", "self", ".", "coefs", "(", "scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.StaticCoefficientModel.CoefTrainer.__init__": [[23, 33], ["StaticCoefficientModel.StaticCoefficientModel", "torch.optim.SGD", "torch.nn.MarginRankingLoss", "torch.nn.MSELoss", "StaticCoefficientModel.CoefTrainer.weight_model.parameters"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "num_scorers", ",", "ranking_loss", ",", "lr", ",", "acc_every", "=", "200", ")", ":", "\n", "            ", "self", ".", "weight_model", "=", "StaticCoefficientModel", "(", "num_scorers", ")", "\n", "self", ".", "use_ranking_loss", "=", "ranking_loss", "\n", "if", "self", ".", "use_ranking_loss", ":", "\n", "                ", "self", ".", "loss", "=", "nn", ".", "MarginRankingLoss", "(", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "", "self", ".", "optimizer", "=", "optim", ".", "SGD", "(", "self", ".", "weight_model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ")", "\n", "self", ".", "total_loss", ",", "self", ".", "total_n", ",", "self", ".", "total_correct", "=", "0", ",", "0", ",", "0", "\n", "self", ".", "accuracy_every", "=", "acc_every", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.StaticCoefficientModel.CoefTrainer.train_coefficients": [[34, 77], ["torch.enable_grad", "StaticCoefficientModel.CoefTrainer.weight_model.zero_grad", "torch.Tensor", "torch.Tensor", "StaticCoefficientModel.CoefTrainer.weight_model().squeeze", "StaticCoefficientModel.CoefTrainer.backward", "StaticCoefficientModel.CoefTrainer.data.item", "StaticCoefficientModel.CoefTrainer.optimizer.step", "StaticCoefficientModel.CoefTrainer.weight_model.coefs.weight.data.clamp", "numpy.stack", "StaticCoefficientModel.CoefTrainer.loss", "StaticCoefficientModel.CoefTrainer.loss", "print", "sys.stdout.flush", "StaticCoefficientModel.CoefTrainer.weight_model", "pair_scores[].unsqueeze", "pair_scores[].unsqueeze", "torch.ones", "torch.FloatTensor", "StaticCoefficientModel.CoefTrainer.data.item", "print"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer._MemoryEfficientFP16OptimizerMixin.zero_grad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.dynamicconvFunction.backward", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.polynomial_decay_schedule.PolynomialDecaySchedule.step", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], ["", "def", "train_coefficients", "(", "self", ",", "truth_lm_score", ",", "candidate_lm_score", ",", "gold_cont_raw_scores", ",", "candidate_raw_scores", ")", ":", "\n", "            ", "with", "torch", ".", "enable_grad", "(", ")", ":", "\n", "                ", "self", ".", "weight_model", ".", "zero_grad", "(", ")", "\n", "#truth_lm_scores = logprobs(model, [init_tokens + true_cont_tokens]).squeeze().cpu().data.numpy()  # this will be the shape of (len input x embed dimension) where len input is init + cont", "\n", "#truth_lm_score = sum([truth_lm_scores[i + len(init_tokens) - 1, true_cont_tokens[i]] for i in", "\n", "#                      range(len(true_cont_tokens))])  # this is just the probability of the sequence #TODO is it necessary for init and cont tokens to be separate?", "\n", "#breakpoint()", "\n", "lm_scores", "=", "torch", ".", "Tensor", "(", "[", "truth_lm_score", ",", "candidate_lm_score", "]", ")", "# this is the probability of the true sequence paired with the score of the best sequence. Both floats", "\n", "# print(\"LM pair\", lm_scores)", "\n", "training_pair", "=", "[", "gold_cont_raw_scores", ",", "candidate_raw_scores", "]", "# this is scorer scores of gold continuation, and of the best continuation. Both 1D arrays of len num scorers.", "\n", "training_pair", "=", "torch", ".", "Tensor", "(", "np", ".", "stack", "(", "training_pair", ")", ")", "# so this is now one row per scorer, with gold and best candidate as columns", "\n", "#print(\"Training pair\", training_pair)", "\n", "# if self.use_cuda:", "\n", "#    training_pair.cuda()", "\n", "pair_scores", "=", "self", ".", "weight_model", "(", "training_pair", ")", ".", "squeeze", "(", ")", "\n", "#print(\"pair scores returned\", pair_scores)", "\n", "pair_scores", "=", "pair_scores", "+", "lm_scores", "\n", "#print(\"pair scores concat\", pair_scores)", "\n", "pred", "=", "pair_scores", "[", "0", "]", "-", "pair_scores", "[", "1", "]", "\n", "#breakpoint()", "\n", "if", "self", ".", "use_ranking_loss", ":", "\n", "                    ", "loss", "=", "self", ".", "loss", "(", "(", "pair_scores", "[", "0", "]", ")", ".", "unsqueeze", "(", "0", ")", ",", "\n", "(", "pair_scores", "[", "1", "]", ")", ".", "unsqueeze", "(", "0", ")", ",", "torch", ".", "ones", "(", "1", ")", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "loss", "=", "self", ".", "loss", "(", "pred", ",", "\n", "torch", ".", "FloatTensor", "(", "[", "0", "]", ")", ")", "# use MSELoss, ((input-target)**2).mean()", "\n", "#print(loss.data.item())", "\n", "", "loss", ".", "backward", "(", ")", "\n", "self", ".", "total_loss", "+=", "loss", ".", "data", ".", "item", "(", ")", "\n", "if", "self", ".", "use_ranking_loss", "and", "loss", ".", "data", ".", "item", "(", ")", "==", "0", ":", "\n", "                    ", "self", ".", "total_correct", "+=", "1", "# whether or not it is correct is whether the scorer did in fact say the gold was higher rank", "\n", "", "self", ".", "total_n", "+=", "1", "\n", "if", "self", ".", "total_n", "%", "self", ".", "accuracy_every", "==", "0", ":", "\n", "                    ", "if", "self", ".", "use_ranking_loss", ":", "\n", "                        ", "print", "(", "'Train Accuracy: %f'", "%", "(", "self", ".", "total_correct", "/", "self", ".", "total_n", ")", ")", "\n", "", "print", "(", "'Loss: %f'", "%", "(", "self", ".", "total_loss", "/", "self", ".", "total_n", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "\n", "", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "self", ".", "weight_model", ".", "coefs", ".", "weight", ".", "data", "=", "self", ".", "weight_model", ".", "coefs", ".", "weight", ".", "data", ".", "clamp", "(", "min", "=", "0", ")", "\n", "\n", "return", "loss", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.load_ensemble_for_inference": [[23, 31], ["utils.deprecation_warning", "checkpoint_utils.load_model_ensemble"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.deprecation_warning", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.checkpoint_utils.load_model_ensemble"], ["#     scorer_config, scorers, coefs = [], [], []", "\n", "#     print(\"Creating scorers\", file=sys.stderr)", "\n", "#     with open(filepath) as scorer_file:", "\n", "#         for line in scorer_file:", "\n", "#             fields = line.strip().split('\\t')", "\n", "#             scorer_config.append(fields)", "\n", "#             weight, module_path, classname = fields[:3]", "\n", "#             weight = float(weight)", "\n", "#             model_location = fields[3]", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.apply_to_sample": [[34, 52], ["utils.apply_to_sample._apply"], "function", ["None"], ["#             model = CNNContextClassifier(300, 3, 0.5, bart)", "\n", "#             x = torch.load(model_location)", "\n", "#             model.load_state_dict(x)", "\n", "#             scorer = constructor(model, cuda)", "\n", "#             scorers.append(scorer)", "\n", "#             coefs.append(weight)", "\n", "#     print(\"Coefs:\", coefs, file=sys.stderr)", "\n", "#     return scorer_config, scorers, coefs", "\n", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.move_to_cuda": [[54, 60], ["utils.apply_to_sample", "tensor.cuda"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.apply_to_sample"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.get_incremental_state": [[77, 83], ["utils._get_full_incremental_state_key"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils._get_full_incremental_state_key"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.set_incremental_state": [[85, 90], ["utils._get_full_incremental_state_key"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils._get_full_incremental_state_key"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.load_align_dict": [[92, 107], ["isinstance", "len", "open", "line.split"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.print_embed_overlap": [[109, 114], ["set", "set", "len", "print", "embed_dict.keys", "len"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.parse_embedding": [[116, 134], ["open", "next", "line.rstrip().split", "torch.Tensor", "torch.Tensor", "line.rstrip", "float"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.load_embedding": [[136, 142], ["range", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.replace_unk": [[144, 156], ["tokenizer.tokenize_line", "enumerate", "tokenizer.tokenize_line", "align_dict.get"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.tokenizer.tokenize_line", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.tokenizer.tokenize_line"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.post_process_prediction": [[158, 167], ["tgt_dict.string", "utils.replace_unk", "tgt_dict.encode_line", "tgt_dict.unk_string"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.string", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.replace_unk", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.encode_line", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.unk_string"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.make_positions": [[169, 182], ["tensor.ne().int", "tensor.ne", "torch.cumsum().type_as", "torch.cumsum().type_as", "torch.cumsum", "torch.cumsum"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.concat_dataset.ConcatDataset.cumsum", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.concat_dataset.ConcatDataset.cumsum"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.strip_pad": [[184, 186], ["tensor.ne"], "function", ["None"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.buffered_arange": [[188, 194], ["hasattr", "torch.LongTensor", "torch.LongTensor", "buffered_arange.buf.numel", "torch.arange", "torch.arange"], "function", ["None"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.convert_padding_direction": [[196, 216], ["src_tokens.eq", "src_tokens.size", "buffered_arange().type_as().expand_as", "src_tokens.eq.long().sum", "src_tokens.gather", "src_tokens.eq.any", "torch.remainder", "torch.remainder", "torch.remainder", "torch.remainder", "pad_mask[].any", "pad_mask[].any", "buffered_arange().type_as", "src_tokens.eq.long", "utils.buffered_arange"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.buffered_arange"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item": [[218, 224], ["hasattr", "hasattr", "tensor.item"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.clip_grad_norm_": [[226, 232], ["utils.item", "torch.norm", "torch.norm", "tensor.mul_"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.fill_with_neg_inf": [[234, 237], ["t.float().fill_().type_as", "t.float().fill_", "float", "t.float"], "function", ["None"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils._match_types": [[239, 258], ["isinstance", "isinstance", "isinstance", "isinstance", "utils._match_types.upgrade"], "function", ["None"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.resolve_max_positions": [[260, 297], ["copy.deepcopy", "min", "utils._match_types", "isinstance", "isinstance", "min", "isinstance", "utils.resolve_max_positions.map_value_update"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils._match_types"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.import_user_module": [[299, 313], ["getattr", "os.path.abspath", "os.path.split", "os.path.exists", "os.path.join", "os.path.exists", "sys.path.insert", "importlib.import_module", "sys.path.pop", "os.path.dirname"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax": [[315, 320], ["torch.softmax", "torch.softmax", "x.float"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax": [[322, 327], ["torch.log_softmax", "torch.log_softmax", "x.float"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.get_perplexity": [[329, 334], ["float", "float", "math.pow"], "function", ["None"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.deprecation_warning": [[336, 339], ["warnings.warn"], "function", ["None"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.get_activation_fn": [[341, 358], ["utils.deprecation_warning", "RuntimeError"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.deprecation_warning"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.get_available_activation_fns": [[360, 368], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval": [[371, 377], ["model.eval", "model.train"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.train.train"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.has_parameters": [[379, 385], ["next", "module.parameters"], "function", ["None"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.set_torch_seed": [[387, 393], ["isinstance", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed"], "function", ["None"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.parse_alignment": [[395, 414], ["line.strip().split", "torch.IntTensor", "torch.IntTensor", "enumerate", "alignment.split", "int", "int", "line.strip", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.get_token_to_word_mapping": [[416, 422], ["len", "list", "int", "itertools.accumulate", "range"], "function", ["None"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.extract_hard_alignment": [[424, 437], ["utils.get_token_to_word_mapping", "utils.get_token_to_word_mapping", "float", "attn_valid.max", "zip", "len", "len", "len", "alignment.append", "src_idx.item", "tgt_idx.item"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.get_token_to_word_mapping", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.get_token_to_word_mapping", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.new_arange": [[439, 447], ["torch.arange().expand().contiguous", "torch.arange().expand().contiguous", "len", "x.size", "torch.arange().expand", "torch.arange().expand", "torch.arange", "torch.arange"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.distributed_utils.suppress_output": [[102, 113], ["kwargs.pop", "builtin_print"], "function", ["None"], ["            ", "dist", ".", "all_reduce", "(", "torch", ".", "zeros", "(", "1", ")", ")", "\n", "\n", "", "if", "is_master", "(", "args", ")", ":", "\n", "            ", "logging", ".", "getLogger", "(", ")", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "", "else", ":", "\n", "            ", "logging", ".", "getLogger", "(", ")", ".", "setLevel", "(", "logging", ".", "WARNING", ")", "\n", "\n", "", "", "args", ".", "distributed_rank", "=", "torch", ".", "distributed", ".", "get_rank", "(", ")", "\n", "return", "args", ".", "distributed_rank", "\n", "\n", "\n", "", "def", "get_rank", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.dummy_train_step": [[462, 466], ["trainer.Trainer.train_step", "trainer.Trainer.zero_grad"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_bmuf.train_step", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer._MemoryEfficientFP16OptimizerMixin.zero_grad"], ["\n", "# log validation stats", "\n", "", "logging_output", "=", "self", ".", "_reduce_and_log_stats", "(", "logging_outputs", ",", "sample_size", ")", "\n", "\n", "return", "logging_output", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.handle_ooms": [[467, 475], ["range", "trainer.Trainer.train_step"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_bmuf.train_step"], ["\n", "", "def", "zero_grad", "(", "self", ")", ":", "\n", "        ", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "", "def", "lr_step", "(", "self", ",", "epoch", ",", "val_loss", "=", "None", ")", ":", "\n", "        ", "\"\"\"Adjust the learning rate based on the validation loss.\"\"\"", "\n", "self", ".", "lr_scheduler", ".", "step", "(", "epoch", ",", "val_loss", ")", "\n", "# prefer updating the LR based on the number of steps", "\n", "return", "self", ".", "lr_step_update", "(", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.clear_buffered_stats": [[479, 481], ["None"], "methods", ["None"], ["new_lr", "=", "self", ".", "lr_scheduler", ".", "step_update", "(", "self", ".", "get_num_updates", "(", ")", ")", "\n", "metrics", ".", "log_scalar", "(", "\"lr\"", ",", "new_lr", ",", "weight", "=", "0", ",", "priority", "=", "300", ")", "\n", "return", "new_lr", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils._get_full_incremental_state_key": [[65, 75], ["hasattr"], "function", ["None"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.preprocessing.make_cc_version_pnw_data.ParserWithUsage.error": [[22, 30], ["sys.stderr.write", "make_cc_version_pnw_data.ParserWithUsage.print_help", "sys.exit"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write"], ["parser", ".", "add_argument", "(", "'--len_continuation'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "'number of sentences in continuation. If none given, uses all'", ")", "\n", "parser", ".", "add_argument", "(", "'--doc_level'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use this flag if each line in the dataset is a document'", ")", "\n", "parser", ".", "add_argument", "(", "'--sent_sym'", ",", "type", "=", "str", ",", "default", "=", "'</s>'", ",", "\n", "help", "=", "'the sentence delimiter to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--keep_split_context'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'by default the first split character is added to the continuation. Use this flag to keep it on context.'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.preprocessing.make_cc_version_pnw_data.no_rep_shuffle": [[32, 55], ["list", "next", "len", "zip", "random.shuffle", "zip", "zip", "range", "len"], "function", ["None"], ["\n", "def", "no_rep_shuffle", "(", "l", ")", ":", "\n", "    ", "if", "len", "(", "l", ")", "<=", "1", ":", "#since then can't shuffle", "\n", "        ", "return", "l", "\n", "", "l", "=", "list", "(", "zip", "(", "l", ",", "range", "(", "len", "(", "l", ")", ")", ")", ")", "\n", "nu_l", "=", "l", "[", ":", "]", "\n", "while", "True", ":", "\n", "        ", "random", ".", "shuffle", "(", "nu_l", ")", "\n", "for", "x", ",", "y", "in", "zip", "(", "l", ",", "nu_l", ")", ":", "\n", "            ", "if", "x", "==", "y", ":", "\n", "                ", "break", "\n", "", "", "else", ":", "\n", "            ", "break", "\n", "", "", "return", "next", "(", "zip", "(", "*", "nu_l", ")", ")", "\n", "\n", "\n", "", "def", "make_shuffled_keywords", "(", "str_list", ",", "remove_char", "=", "\"<EOL>\"", ")", ":", "\n", "    ", "\"\"\" takes list of strings, and characters to remove, and returns shuffled version with remove_chars at end \"\"\"", "\n", "remove", "=", "re", ".", "compile", "(", "\"<EOL>\"", ")", "\n", "clean_str", "=", "[", "remove", ".", "sub", "(", "\"\"", ",", "text", ")", "for", "text", "in", "str_list", "]", "\n", "internally_shuffled", "=", "[", "\" \"", ".", "join", "(", "no_rep_shuffle", "(", "phrases", ".", "strip", "(", ")", ".", "split", "(", ")", ")", ")", "for", "phrases", "in", "clean_str", "]", "\n", "shuffle_str", "=", "(", "' %s '", "%", "args", ".", "sent_sym", ")", ".", "join", "(", "no_rep_shuffle", "(", "internally_shuffled", ")", ")", "\n", "return", "shuffle_str", ".", "strip", "(", ")", "+", "\" \"", "+", "remove_char", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.preprocessing.make_cc_version_pnw_data.make_shuffled_keywords": [[57, 83], ["re.compile", "re.compile.sub", "make_cc_version_pnw_data.no_rep_shuffle", "make_cc_version_pnw_data.no_rep_shuffle", "shuffle_str.strip", "phrases.strip().split", "phrases.strip"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.preprocessing.make_cc_version_pnw_data.no_rep_shuffle", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.preprocessing.make_cc_version_pnw_data.no_rep_shuffle"], ["\n", "\n", "for", "filename", "in", "filenames", ":", "\n", "    ", "incomplete_lines", "=", "0", "\n", "print", "(", "\"Working on {}\"", ".", "format", "(", "filename", ")", ")", "\n", "contexts", ",", "continuations", ",", "intra_shuffled_continuations", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "filename", ")", ",", "'r'", ")", "as", "lines", ":", "\n", "        ", "if", "args", ".", "doc_level", ":", "\n", "# TODO make this section work (wasn't working in L2w, but also wasn't used)", "\n", "            ", "assert", "(", "args", ".", "sent_sym", "is", "not", "None", ")", "\n", "for", "line", "in", "lines", ":", "\n", "                ", "sents", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "args", ".", "sent_sym", ")", "\n", "context", "=", "(", "' %s '", "%", "args", ".", "sent_sym", ")", ".", "join", "(", "sents", "[", ":", "args", ".", "len_context", "]", ")", "\n", "continuation", "=", "(", "' %s '", "%", "args", ".", "sent_sym", ")", ".", "join", "(", "sents", "[", "args", ".", "len_context", ":", "(", "args", ".", "len_context", "+", "args", ".", "len_continuation", ")", "]", ")", "\n", "contexts", ".", "append", "(", "context", ")", "\n", "continuations", ".", "append", "(", "continuation", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "i", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "                ", "sentences", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "args", ".", "sent_sym", ")", "\n", "if", "len", "(", "sentences", ")", "<=", "args", ".", "len_context", ":", "\n", "                    ", "incomplete_lines", "+=", "1", "\n", "continue", "\n", "", "else", ":", "\n", "                    ", "context", "=", "sentences", "[", ":", "args", ".", "len_context", "]", "\n", "if", "args", ".", "len_continuation", ":", "\n", "                        ", "continuation", "=", "sentences", "[", "args", ".", "len_context", ":", "args", ".", "len_continuation", "]", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.preprocessing.make_cc_version_pnw_data.main": [[85, 188], ["logging.basicConfig", "make_cc_version_pnw_data.ParserWithUsage", "ParserWithUsage.add_argument", "ParserWithUsage.add_argument", "ParserWithUsage.add_argument", "ParserWithUsage.add_argument", "ParserWithUsage.add_argument", "ParserWithUsage.add_argument", "ParserWithUsage.add_argument", "ParserWithUsage.add_argument", "ParserWithUsage.parse_args", "logging.info", "logging.info", "logging.info", "logging.info", "open", "logging.info", "pathlib.Path", "pathlib.Path", "open", "out.write", "open", "out.write", "open", "out.write", "open", "out.write", "os.path.join", "enumerate", "line.strip().split", "next", "contexts.append", "continuations.append", "intra_shuffled_continuations.append", "make_cc_version_pnw_data.no_rep_shuffle", "len", "make_cc_version_pnw_data.make_shuffled_keywords", "line.strip", "enumerate", "tok.strip"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.preprocessing.make_cc_version_pnw_data.no_rep_shuffle", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.preprocessing.make_cc_version_pnw_data.make_shuffled_keywords"], ["#print(sentences)", "\n", "", "context", "=", "(", "' %s '", "%", "args", ".", "sent_sym", ")", ".", "join", "(", "context", ")", "\n", "shuffled_continuation", "=", "make_shuffled_keywords", "(", "continuation", ")", "\n", "continuation", "=", "(", "' %s '", "%", "args", ".", "sent_sym", ")", ".", "join", "(", "continuation", ")", "\n", "\n", "if", "args", ".", "keep_split_context", ":", "\n", "                        ", "context", "=", "context", "+", "args", ".", "sent_sym", "\n", "", "else", ":", "\n", "                        ", "continuation", "=", "args", ".", "sent_sym", "+", "continuation", "\n", "shuffled_continuation", "=", "args", ".", "sent_sym", "+", "shuffled_continuation", "\n", "", "", "contexts", ".", "append", "(", "context", ")", "\n", "continuations", ".", "append", "(", "continuation", ")", "\n", "intra_shuffled_continuations", ".", "append", "(", "shuffled_continuation", ")", "\n", "\n", "#if i % 100 == 0:", "\n", "#    print(\"finished {} lines\".format(i), file=sys.stderr)", "\n", "", "", "print", "(", "\"{} lines were too short for sufficient context and were skipped\"", ".", "format", "(", "incomplete_lines", ")", ",", "\n", "file", "=", "sys", ".", "stderr", ")", "\n", "\n", "", "if", "args", ".", "out_dir", ":", "\n", "        ", "output", "=", "args", ".", "out_dir", "\n", "", "else", ":", "\n", "        ", "output", "=", "args", ".", "data_dir", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output", ",", "filename", "+", "'.context'", ")", ",", "'w'", ")", "as", "out", ":", "\n", "         ", "out", ".", "write", "(", "'\\n'", ".", "join", "(", "contexts", ")", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output", ",", "filename", "+", "'.true_continuation'", ")", ",", "'w'", ")", "as", "out", ":", "\n", "         ", "out", ".", "write", "(", "'\\n'", ".", "join", "(", "continuations", ")", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output", ",", "filename", "+", "'.shuffled_continuation'", ")", ",", "'w'", ")", "as", "out", ":", "\n", "         ", "out", ".", "write", "(", "'\\n'", ".", "join", "(", "no_rep_shuffle", "(", "continuations", ")", ")", ")", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "output", ",", "filename", "+", "'.all_shuffled_continuation'", ")", ",", "'w'", ")", "as", "out", ":", "\n", "        ", "out", ".", "write", "(", "'\\n'", ".", "join", "(", "intra_shuffled_continuations", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.preprocessing.create_classifier_dataset.ParserWithUsage.error": [[125, 133], ["sys.stderr.write", "create_classifier_dataset.ParserWithUsage.print_help", "sys.exit"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.preprocessing.create_classifier_dataset.get_verbs": [[11, 17], ["re.split", "re.split.index"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.index"], ["\n", "def", "read_txt", "(", "fname", ")", ":", "\n", "    ", "return", "open", "(", "fname", ")", ".", "read", "(", ")", ".", "split", "(", "'\\n'", ")", "\n", "\n", "", "assert", "len", "(", "sys", ".", "argv", ")", ">", "2", ",", "\"Arguments required.\"", "\n", "\n", "filenames", "=", "[", "'disc_train.txt'", ",", "'valid.txt'", ",", "'test.txt'", "]", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.preprocessing.create_classifier_dataset.replace_verbs": [[19, 25], ["re.split"], "function", ["None"], ["    ", "context", "=", "read_txt", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "filename", ")", "+", "'.context'", ")", "\n", "if", "args", ".", "comp", "==", "'lm'", ":", "\n", "        ", "comp_end", "=", "read_txt", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "filename", ")", "+", "'.generated_continuation'", ")", "\n", "", "elif", "args", ".", "comp", "==", "'random'", ":", "\n", "        ", "comp_end", "=", "read_txt", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "filename", ")", "+", "'.shuffled_continuation'", ")", "\n", "", "elif", "args", ".", "comp", "==", "'event'", ":", "\n", "        ", "comp_end", "=", "read_txt", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "filename", ")", "+", "'.all_shuffled_continuation'", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.preprocessing.create_classifier_dataset.event_intra_shuffle": [[27, 88], ["line.split", "shuffled_end.append", "len", "len", "sent.split", "new_sents.append", "sent_delimiter.join", "len", "new_sents.append", "list", "list", "random.shuffle", "create_classifier_dataset.replace_verbs", "random.shuffle", "map", "range", "list", "range", "len", "enumerate", "map", "create_classifier_dataset.get_verbs", "len", "event_delimiter.join"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.preprocessing.create_classifier_dataset.replace_verbs", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.preprocessing.create_classifier_dataset.get_verbs"], ["        ", "assert", "(", "False", ")", "\n", "", "true_end", "=", "read_txt", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data_dir", ",", "filename", ")", "+", "'.true_continuation'", ")", "\n", "\n", "tsv_lines", "=", "[", "]", "\n", "randomize", "=", "False", "\n", "incomplete_lines", "=", "0", "\n", "\n", "for", "cont", ",", "comp", ",", "true", "in", "zip", "(", "context", ",", "comp_end", ",", "true_end", ")", ":", "\n", "        ", "tsv_line", "=", "cont", ".", "strip", "(", ")", "+", "'\\t'", "\n", "if", "randomize", ":", "\n", "            ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "                ", "tsv_line", "+=", "comp", ".", "strip", "(", ")", "+", "'\\t'", "+", "true", ".", "strip", "(", ")", "+", "'\\t'", "+", "'1'", "\n", "", "else", ":", "\n", "                ", "tsv_line", "+=", "true", ".", "strip", "(", ")", "+", "'\\t'", "+", "comp", ".", "strip", "(", ")", "+", "'\\t'", "+", "'0'", "\n", "", "", "else", ":", "\n", "            ", "tsv_line", "+=", "comp", ".", "strip", "(", ")", "+", "'\\t'", "+", "true", ".", "strip", "(", ")", "+", "'\\t'", "+", "'1'", "\n", "if", "not", "bool", "(", "comp", ".", "strip", "(", ")", ")", "or", "not", "(", "bool", "(", "cont", ".", "strip", "(", ")", ")", ")", ":", "\n", "                ", "incomplete_lines", "+=", "1", "\n", "continue", "\n", "", "", "tsv_lines", ".", "append", "(", "tsv_line", ")", "\n", "\n", "", "train_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "out_dir", ",", "filename", "[", ":", "-", "4", "]", "+", "'.tsv'", ")", "\n", "with", "open", "(", "train_file", ",", "'w'", ")", "as", "out", ":", "\n", "        ", "out", ".", "write", "(", "'\\n'", ".", "join", "(", "tsv_lines", ")", ")", "\n", "\n", "# validate that all lines have exactly 2 tabs", "\n", "", "invalid_lines", "=", "[", "]", "\n", "with", "open", "(", "train_file", ",", "'r'", ")", "as", "fin", ":", "\n", "        ", "for", "i", ",", "line", "in", "enumerate", "(", "fin", ")", ":", "\n", "            ", "num_examples_in_line", "=", "len", "(", "line", ".", "split", "(", "\"\\t\"", ")", ")", "\n", "if", "num_examples_in_line", "!=", "4", ":", "\n", "                ", "invalid_lines", ".", "append", "(", "(", "i", ",", "num_examples_in_line", ")", ")", "\n", "\n", "", "", "", "print", "(", "\"Lines removed due to one or more continuations being empty: {}\"", ".", "format", "(", "incomplete_lines", ")", ",", "\n", "file", "=", "sys", ".", "stderr", ")", "\n", "print", "(", "\"{} lines in file have too many or too few tabs\\n\"", "\n", "\"Lines: {}\\n Num items afer tab split: {}\"", ".", "format", "(", "len", "(", "invalid_lines", ")", ",", "\n", "[", "item", "[", "0", "]", "for", "item", "in", "invalid_lines", "]", ",", "\n", "[", "item", "[", "1", "]", "for", "item", "in", "invalid_lines", "]", ")", ",", "\n", "file", "=", "sys", ".", "stderr", ")", "\n", "\n", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.preprocessing.create_classifier_dataset.event_inter_shuffle": [[90, 108], ["line.split", "random.sample", "shuffled_end.append", "len", "len", "sent_delimiter.join", "len"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.hub_interface.BARTHubInterface.sample"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.preprocessing.create_classifier_dataset.read_txt": [[110, 120], ["open().read().split", "open().read", "open"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.dataset_reader.DatasetReader.read", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.preprocessing.create_classifier_dataset.main": [[135, 236], ["logging.basicConfig", "create_classifier_dataset.ParserWithUsage", "ParserWithUsage.add_argument", "ParserWithUsage.add_argument", "ParserWithUsage.add_argument", "ParserWithUsage.add_argument", "ParserWithUsage.add_argument", "ParserWithUsage.parse_args", "logging.info", "logging.info", "create_classifier_dataset.read_txt", "create_classifier_dataset.read_txt", "zip", "os.path.join", "print", "print", "create_classifier_dataset.read_txt", "tsv_lines.append", "open", "out.write", "open", "enumerate", "create_classifier_dataset.read_txt", "cont.strip", "len", "len", "random.random", "line.split", "invalid_lines.append", "create_classifier_dataset.read_txt", "bool", "bool", "create_classifier_dataset.event_intra_shuffle", "true.strip", "comp.strip", "cont.strip", "os.path.splitext", "create_classifier_dataset.event_intra_shuffle", "true.strip", "comp.strip", "comp.strip", "create_classifier_dataset.event_inter_shuffle", "comp.strip", "true.strip"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.preprocessing.create_classifier_dataset.read_txt", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.preprocessing.create_classifier_dataset.read_txt", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.preprocessing.create_classifier_dataset.read_txt", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.preprocessing.create_classifier_dataset.read_txt", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.preprocessing.create_classifier_dataset.read_txt", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.preprocessing.create_classifier_dataset.event_intra_shuffle", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.preprocessing.create_classifier_dataset.event_intra_shuffle", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.preprocessing.create_classifier_dataset.event_inter_shuffle"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.validate.main": [[24, 101], ["fairseq.utils.import_user_module", "logger.info", "fairseq.checkpoint_utils.load_model_ensemble_and_task", "logger.info", "task.build_criterion", "task.build_criterion.eval", "args.valid_subset.split", "torch.cuda.is_available", "vars", "vars.update", "task.get_batch_iterator().next_epoch_itr", "fairseq.progress_bar.build_progress_bar", "enumerate", "progress_bar.build_progress_bar.print", "eval", "model.half", "model.cuda", "task.load_dataset", "task.dataset", "task.valid_step", "progress_bar.build_progress_bar.log", "log_outputs.append", "fairseq.metrics.aggregate", "task.reduce_metrics", "agg.get_smoothed_values", "getattr", "Exception", "task.get_batch_iterator", "fairseq.utils.move_to_cuda", "fairseq.utils.resolve_max_positions", "task.max_positions", "m.max_positions"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.import_user_module", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.checkpoint_utils.load_model_ensemble_and_task", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.composite_loss.CompositeLoss.build_criterion", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.update", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.EpochBatchIterator.next_epoch_itr", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.build_progress_bar", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lightconv_layer.lightconv_layer.LightconvLayer.half", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyLMTask.load_dataset", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.fairseq_task.FairseqTask.dataset", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.translation_moe.TranslationMoETask.valid_step", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.aggregate", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.sentence_prediction.SentencePredictionCriterion.reduce_metrics", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.MetersDict.get_smoothed_values", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.fairseq_task.FairseqTask.get_batch_iterator", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.move_to_cuda", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.resolve_max_positions", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.max_positions", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.max_positions"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.validate.cli_main": [[103, 112], ["fairseq.options.get_validation_parser", "fairseq.options.parse_args_and_arch", "fairseq.options.get_validation_parser", "fairseq.options.parse_args_and_arch", "validate.main"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.get_validation_parser", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.parse_args_and_arch", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.get_validation_parser", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.parse_args_and_arch", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.inter_rep.main"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.generate.main": [[21, 35], ["os.makedirs", "os.path.join", "generate._main", "open", "generate._main"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.generate._main", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.generate._main"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.generate._main": [[37, 223], ["logging.basicConfig", "logging.getLogger", "fairseq.utils.import_user_module", "logging.getLogger.info", "fairseq.tasks.setup_task", "tasks.setup_task.load_dataset", "logging.getLogger.info", "fairseq.checkpoint_utils.load_model_ensemble", "fairseq.utils.load_align_dict", "tasks.setup_task.get_batch_iterator().next_epoch_itr", "fairseq.meters.StopwatchMeter", "tasks.setup_task.build_generator", "logging.getLogger.info", "logging.getLogger.info", "torch.cuda.is_available", "getattr", "args.path.split", "model.make_generation_fast_", "fairseq.bleu.SacrebleuScorer", "fairseq.bleu.Scorer", "fairseq.progress_bar.build_progress_bar", "fairseq.meters.TimeMeter", "logging.getLogger.info", "eval", "model.half", "model.cuda", "tasks.setup_task.get_batch_iterator", "tgt_dict.pad", "tgt_dict.eos", "tgt_dict.unk", "fairseq.meters.StopwatchMeter.start", "tasks.setup_task.inference_step", "sum", "fairseq.meters.StopwatchMeter.stop", "enumerate", "fairseq.meters.TimeMeter.update", "t.log", "fairseq.utils.move_to_cuda", "sample[].tolist", "fairseq.utils.strip_pad", "enumerate", "bleu.Scorer.result_string", "tasks.setup_task.dataset", "fairseq.utils.resolve_max_positions", "len", "tgt_dict.pad", "fairseq.utils.strip_pad().int().cpu", "tasks.setup_task.dataset().src.get_original_text", "tasks.setup_task.dataset().tgt.get_original_text", "fairseq.utils.post_process_prediction", "round", "tasks.setup_task.max_positions", "getattr.string", "tgt_dict.string", "print", "print", "print", "print", "getattr", "hasattr", "fairseq.utils.strip_pad().int", "hypo[].int().cpu", "math.log", "print", "print", "enumerate", "tgt_dict.encode_line", "bleu.Scorer.add_string", "bleu.Scorer.add", "model.max_positions", "tasks.setup_task.dataset", "tasks.setup_task.dataset", "fairseq.utils.post_process_prediction", "print", "fairseq.utils.strip_pad", "hypo[].int", "map", "tgt_dict.pad", "hypo[].div_().tolist", "h[].int().cpu", "hypo[].div_", "h[].int", "math.log", "sys.stdout"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.import_user_module", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyLMTask.setup_task", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyLMTask.load_dataset", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.checkpoint_utils.load_model_ensemble", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.load_align_dict", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.EpochBatchIterator.next_epoch_itr", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.fairseq_task.FairseqTask.build_generator", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.TransformerDecoderLayer.make_generation_fast_", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.build_progress_bar", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lightconv_layer.lightconv_layer.LightconvLayer.half", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.fairseq_task.FairseqTask.get_batch_iterator", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.unk", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.StopwatchMeter.start", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.translation_moe.TranslationMoETask.inference_step", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.StopwatchMeter.stop", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.update", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.move_to_cuda", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.strip_pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.bleu.Scorer.result_string", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.fairseq_task.FairseqTask.dataset", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.resolve_max_positions", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.IndexedRawTextDataset.get_original_text", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.IndexedRawTextDataset.get_original_text", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.post_process_prediction", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.max_positions", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.string", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.string", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.encode_line", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.bleu.SacrebleuScorer.add_string", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.eval_lm.WordStat.add", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.max_positions", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.fairseq_task.FairseqTask.dataset", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.fairseq_task.FairseqTask.dataset", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.post_process_prediction", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.strip_pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.generate.cli_main": [[225, 229], ["fairseq.options.get_generation_parser", "fairseq.options.parse_args_and_arch", "generate.main"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.get_generation_parser", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.parse_args_and_arch", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.inter_rep.main"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.interactive.buffered_read": [[36, 47], ["fileinput.input", "len", "buffer.append", "fileinput.hook_encoded", "src_str.strip", "len"], "function", ["None"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.interactive.make_batches": [[49, 68], ["task.get_batch_iterator().next_epoch_itr", "task.source_dictionary.encode_line().long", "t.numel", "task.get_batch_iterator", "Batch", "task.source_dictionary.encode_line", "interactive.main.encode_fn", "task.build_dataset_for_inference"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.EpochBatchIterator.next_epoch_itr", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.fairseq_task.FairseqTask.get_batch_iterator", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.encode_line", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.masked_lm.MaskedLMTask.build_dataset_for_inference"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.interactive.main": [[71, 205], ["fairseq.utils.import_user_module", "logger.info", "fairseq.tasks.setup_task", "logger.info", "fairseq.checkpoint_utils.load_model_ensemble", "tasks.setup_task.build_generator", "fairseq.data.encoders.build_tokenizer", "fairseq.data.encoders.build_bpe", "fairseq.utils.load_align_dict", "fairseq.utils.resolve_max_positions", "logger.info", "logger.info", "interactive.buffered_read", "torch.cuda.is_available", "args.path.split", "model.make_generation_fast_", "tasks.setup_task.max_positions", "logger.info", "interactive.make_batches", "sorted", "len", "eval", "model.half", "model.cuda", "encoders.build_tokenizer.encode", "encoders.build_bpe.encode", "encoders.build_bpe.decode", "encoders.build_tokenizer.decode", "tasks.setup_task.inference_step", "enumerate", "model.max_positions", "src_tokens.cuda.cuda", "src_lengths.cuda.cuda", "zip", "fairseq.utils.strip_pad", "results.append", "src_dict.string", "print", "fairseq.utils.post_process_prediction", "interactive.main.decode_fn"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.import_user_module", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyLMTask.setup_task", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.checkpoint_utils.load_model_ensemble", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.fairseq_task.FairseqTask.build_generator", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.load_align_dict", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.resolve_max_positions", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.interactive.buffered_read", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.TransformerDecoderLayer.make_generation_fast_", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.max_positions", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.interactive.make_batches", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lightconv_layer.lightconv_layer.LightconvLayer.half", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.encode", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.encode", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.decode", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.decode", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.translation_moe.TranslationMoETask.inference_step", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.max_positions", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.strip_pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.string", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.post_process_prediction"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.interactive.cli_main": [[207, 211], ["fairseq.options.get_generation_parser", "fairseq.options.parse_args_and_arch", "interactive.main"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.get_generation_parser", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.parse_args_and_arch", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.inter_rep.main"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.train.main": [[36, 128], ["fairseq.utils.import_user_module", "numpy.random.seed", "torch.manual_seed", "fairseq.distributed_utils.is_master", "logger.info", "fairseq.tasks.setup_task", "args.valid_subset.split", "tasks.setup_task.build_model", "tasks.setup_task.build_criterion", "logger.info", "logger.info", "logger.info", "fairseq.trainer.Trainer", "logger.info", "logger.info", "fairseq.checkpoint_utils.load_checkpoint", "fairseq.trainer.Trainer.get_lr", "fairseq.meters.StopwatchMeter", "fairseq.meters.StopwatchMeter.start", "args.valid_subset.split", "fairseq.meters.StopwatchMeter.stop", "logger.info", "torch.cuda.is_available", "torch.cuda.set_device", "fairseq.distributed_utils.distributed_init", "fairseq.checkpoint_utils.verify_checkpoint_directory", "tasks.setup_task.load_dataset", "train.train", "fairseq.trainer.Trainer.lr_step", "train.should_stop_early", "fairseq.trainer.Trainer.get_train_iterator", "sum", "sum", "fairseq.trainer.Trainer.get_num_updates", "train.validate", "fairseq.checkpoint_utils.save_checkpoint", "logger.info", "p.numel", "p.numel", "getattr", "task.build_model.parameters", "task.build_model.parameters"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.import_user_module", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.distributed_utils.is_master", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyLMTask.setup_task", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.build_model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.composite_loss.CompositeLoss.build_criterion", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.checkpoint_utils.load_checkpoint", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.get_lr", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.StopwatchMeter.start", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.StopwatchMeter.stop", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.distributed_utils.distributed_init", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.checkpoint_utils.verify_checkpoint_directory", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyLMTask.load_dataset", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.train.train", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.lr_step", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.train.should_stop_early", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.get_train_iterator", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.bmuf.FairseqBMUF.get_num_updates", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.train.validate", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.checkpoint_utils.save_checkpoint"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.train.should_stop_early": [[130, 145], ["getattr", "train.should_stop_early.is_better"], "function", ["None"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.train.train": [[147, 198], ["fairseq.metrics.aggregate", "epoch_itr.next_epoch_itr", "fairseq.data.iterators.GroupedIterator", "fairseq.progress_bar.build_progress_bar", "task.begin_epoch", "args.valid_subset.split", "train.get_training_stats", "progress_bar.build_progress_bar.print", "fairseq.metrics.reset_meters", "trainer.get_model", "trainer.train_step", "trainer.get_num_updates", "train.get_training_stats", "progress_bar.build_progress_bar.log", "fairseq.metrics.get_smoothed_values", "len", "fairseq.metrics.get_smoothed_values", "train.validate", "fairseq.checkpoint_utils.save_checkpoint"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.aggregate", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.EpochBatchIterator.next_epoch_itr", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.build_progress_bar", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.fairseq_task.FairseqTask.begin_epoch", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.train.get_training_stats", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.reset_meters", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.get_model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_bmuf.train_step", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.bmuf.FairseqBMUF.get_num_updates", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.train.get_training_stats", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.MetersDict.get_smoothed_values", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.MetersDict.get_smoothed_values", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.train.validate", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.checkpoint_utils.save_checkpoint"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.train.get_training_stats": [[200, 205], ["round", "fairseq.utils.get_perplexity", "fairseq.metrics.get_meter"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.get_perplexity", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.get_meter"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.train.validate": [[207, 250], ["fairseq.utils.set_torch_seed", "task.get_batch_iterator().next_epoch_itr", "fairseq.progress_bar.build_progress_bar", "train.get_valid_stats", "progress_bar.build_progress_bar.print", "valid_losses.append", "fairseq.metrics.aggregate", "agg.get_smoothed_values", "task.get_batch_iterator", "trainer.valid_step", "trainer.get_num_updates", "task.dataset", "fairseq.utils.resolve_max_positions", "task.max_positions", "trainer.get_model().max_positions", "trainer.get_model"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.set_torch_seed", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.EpochBatchIterator.next_epoch_itr", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.build_progress_bar", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.train.get_valid_stats", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.aggregate", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.MetersDict.get_smoothed_values", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.fairseq_task.FairseqTask.get_batch_iterator", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.translation_moe.TranslationMoETask.valid_step", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.bmuf.FairseqBMUF.get_num_updates", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.fairseq_task.FairseqTask.dataset", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.resolve_max_positions", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.max_positions", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.max_positions", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.get_model"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.train.get_valid_stats": [[252, 264], ["trainer.get_num_updates", "hasattr", "fairseq.utils.get_perplexity", "best_function"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.bmuf.FairseqBMUF.get_num_updates", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.get_perplexity"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.train.distributed_main": [[266, 271], ["train.main"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.inter_rep.main"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.train.cli_main": [[273, 308], ["fairseq.options.get_training_parser", "fairseq.options.parse_args_and_arch", "fairseq.distributed_utils.infer_init_method", "torch.multiprocessing.spawn", "train.distributed_main", "random.randint", "torch.multiprocessing.spawn", "train.main", "torch.cuda.device_count", "torch.cuda.device_count", "logger.info", "torch.cuda.device_count", "max"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.get_training_parser", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.parse_args_and_arch", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.distributed_utils.infer_init_method", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.train.distributed_main", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.inter_rep.main"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.preprocess.main": [[32, 308], ["fairseq.utils.import_user_module", "os.makedirs", "logger.addHandler", "logger.info", "fairseq.tasks.get_task", "build_dictionary.save", "preprocess.main.make_all"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.import_user_module", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.__init__.get_task", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.save"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.preprocess.binarize": [[310, 321], ["fairseq.data.indexed_dataset.make_builder", "fairseq.binarizer.Binarizer.binarize", "indexed_dataset.make_builder.finalize", "preprocess.dataset_dest_file", "indexed_dataset.make_builder.add_item", "preprocess.dataset_dest_file", "len"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.make_builder", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_task.WSCTask.binarize", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDatasetBuilder.finalize", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.preprocess.dataset_dest_file", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDatasetBuilder.add_item", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.preprocess.dataset_dest_file"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.preprocess.binarize_alignments": [[323, 334], ["fairseq.data.indexed_dataset.make_builder", "fairseq.binarizer.Binarizer.binarize_alignments", "indexed_dataset.make_builder.finalize", "preprocess.dataset_dest_file", "indexed_dataset.make_builder.add_item", "preprocess.dataset_dest_file"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.make_builder", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.preprocess.binarize_alignments", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDatasetBuilder.finalize", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.preprocess.dataset_dest_file", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDatasetBuilder.add_item", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.preprocess.dataset_dest_file"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.preprocess.dataset_dest_prefix": [[336, 346], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.preprocess.dataset_dest_file": [[348, 351], ["preprocess.dataset_dest_prefix"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.preprocess.dataset_dest_prefix"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.preprocess.get_offsets": [[353, 355], ["fairseq.binarizer.Binarizer.find_offsets"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.binarizer.Binarizer.find_offsets"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.preprocess.cli_main": [[357, 361], ["fairseq.options.get_preprocessing_parser", "options.get_preprocessing_parser.parse_args", "preprocess.main"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.get_preprocessing_parser", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.inter_rep.main"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.score.get_parser": [[18, 33], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.score.cli_main": [[35, 85], ["score.get_parser", "get_parser.parse_args", "print", "os.path.exists", "fairseq.data.dictionary.Dictionary", "os.path.exists", "fd.readlines", "score.cli_main.score"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_manifest.get_parser", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.bleu.Scorer.score"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.eval_lm.WordStat.__init__": [[32, 39], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.eval_lm.WordStat.add": [[40, 51], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.eval_lm.WordStat.__str__": [[52, 55], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.eval_lm.main": [[57, 235], ["fairseq.utils.import_user_module", "logger.info", "fairseq.tasks.setup_task", "logger.info", "fairseq.checkpoint_utils.load_model_ensemble", "vars().keys", "fairseq.tasks.setup_task", "tasks.setup_task.load_dataset", "tasks.setup_task.dataset", "logger.info", "logger.info", "tasks.setup_task.get_batch_iterator().next_epoch_itr", "fairseq.meters.StopwatchMeter", "fairseq.sequence_scorer.SequenceScorer", "dict", "logger.info", "logger.info", "torch.cuda.is_available", "parsed_args.path.split", "fairseq.data.LMContextWindowDataset", "model.make_generation_fast_", "len", "len", "fairseq.progress_bar.build_progress_bar", "fairseq.meters.TimeMeter", "math.log", "sorted", "eval", "vars", "setattr", "len", "model.half", "model.cuda", "sum", "tasks.setup_task.get_batch_iterator", "args.remove_bpe.rstrip", "fairseq.meters.StopwatchMeter.start", "fairseq.sequence_scorer.SequenceScorer.generate", "fairseq.meters.StopwatchMeter.stop", "enumerate", "fairseq.meters.TimeMeter.update", "t.log", "dict.values", "logger.info", "getattr", "tasks.setup_task.source_dictionary.pad", "fairseq.utils.move_to_cuda", "tokens.numel", "hypo[].float", "inf_scores.any", "hypo[].float.sum().cpu", "p.numel", "fairseq.utils.resolve_max_positions", "range", "tasks.setup_task.source_dictionary[].endswith", "range", "hypo[].float.eq", "hypo[].float.eq", "logger.info", "hypo[].float.numel", "range", "round", "models[].parameters", "len", "[].item", "tasks.setup_task.target_dictionary.bos", "float", "float", "tasks.setup_task.target_dictionary.string", "hypo[].float.sum", "len", "tokens[].item", "logger.info", "tokens[].item", "word_prob.append", "dict.setdefault().add", "model.max_positions", "len", "pos_scores[].item", "inf_scores.nonzero", "pos_scores[].item", "pos_scores[].item", "dict.setdefault", "str", "eval_lm.WordStat", "int"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.import_user_module", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyLMTask.setup_task", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.checkpoint_utils.load_model_ensemble", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyLMTask.setup_task", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyLMTask.load_dataset", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.fairseq_task.FairseqTask.dataset", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.EpochBatchIterator.next_epoch_itr", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.TransformerDecoderLayer.make_generation_fast_", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.build_progress_bar", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lightconv_layer.lightconv_layer.LightconvLayer.half", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.fairseq_task.FairseqTask.get_batch_iterator", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.StopwatchMeter.start", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.hub_interface.BARTHubInterface.generate", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.StopwatchMeter.stop", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.update", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.move_to_cuda", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.resolve_max_positions", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.bos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.string", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.eval_lm.WordStat.add", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.max_positions", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.eval_lm.cli_main": [[237, 241], ["fairseq.options.get_eval_lm_parser", "fairseq.options.parse_args_and_arch", "eval_lm.main"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.get_eval_lm_parser", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.parse_args_and_arch", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.inter_rep.main"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.translation_moe.score.main": [[23, 45], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "score.load_sys", "print", "score.load_ref", "score.merge", "score.multi_ref", "score.intra_ref", "score.pairwise"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.translation_moe.score.load_sys", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.translation_moe.score.load_ref", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.translation_moe.score.merge", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.translation_moe.score.multi_ref", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.translation_moe.score.intra_ref", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.translation_moe.score.pairwise"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.translation_moe.score.dictolist": [[47, 50], ["sorted", "d.items"], "function", ["None"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.translation_moe.score.load_sys": [[52, 71], ["score.dictolist", "score.dictolist", "score.dictolist", "score.dictolist", "open", "line.rstrip.rstrip", "line.rstrip.startswith", "int", "line.rstrip.startswith", "line.rstrip.startswith", "line.rstrip.startswith", "hypos[].append", "log_probs[].append", "line.rstrip.split", "line.rstrip.split", "float", "line.rstrip.find", "line.rstrip.split", "line.rstrip.find", "line.rstrip.split"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.translation_moe.score.dictolist", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.translation_moe.score.dictolist", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.translation_moe.score.dictolist", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.translation_moe.score.dictolist", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.translation_moe.score.load_ref": [[73, 92], ["open", "f.readlines", "len", "lines[].startswith", "src.append", "lines[].startswith", "[].rstrip", "tgt.append", "refs.append", "[].rstrip", "lines[].startswith", "a.append", "len", "[].rstrip", "lines[].split", "lines[].split", "lines[].split"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.translation_moe.score.merge": [[94, 103], ["open", "zip", "f.write", "f.write", "f.write", "zip", "f.write", "f.write", "h.strip"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.translation_moe.score.corpus_bleu": [[105, 108], ["sacrebleu.corpus_bleu"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.translation_moe.score.corpus_bleu"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.translation_moe.score.sentence_bleu": [[110, 121], ["sacrebleu.corpus_bleu", "range", "sacrebleu.compute_bleu"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.translation_moe.score.corpus_bleu"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.translation_moe.score.pairwise": [[123, 132], ["sacrebleu.corpus_bleu", "range", "len", "range", "len", "_ref.append", "_hypo.append"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.translation_moe.score.corpus_bleu"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.translation_moe.score.multi_ref": [[134, 170], ["zip", "print", "list", "list", "len", "len", "range", "print", "len", "len", "set", "len", "zip", "zip", "loo_bleus.append", "numpy.argmax", "_ref.append", "_hypo.append", "set.add", "range", "range", "len", "sacrebleu.corpus_bleu", "numpy.mean", "score.sentence_bleu", "random.choice", "len", "len", "range", "range", "len"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.eval_lm.WordStat.add", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.translation_moe.score.corpus_bleu", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.translation_moe.score.sentence_bleu"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.translation_moe.score.intra_ref": [[172, 186], ["print", "list", "len", "enumerate", "list", "sacrebleu.corpus_bleu", "print", "zip", "list.append", "range", "itertools.chain.from_iterable", "score.pairwise", "range", "concat_rest[].extend"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.translation_moe.score.corpus_bleu", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.translation_moe.score.pairwise"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_options.get_reranking_parser": [[9, 13], ["fairseq.options.get_parser", "rerank_options.add_reranking_args"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_manifest.get_parser", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_options.add_reranking_args"], ["def", "get_reranking_parser", "(", "default_task", "=", "'translation'", ")", ":", "\n", "    ", "parser", "=", "options", ".", "get_parser", "(", "'Generation and reranking'", ",", "default_task", ")", "\n", "add_reranking_args", "(", "parser", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_options.get_tuning_parser": [[15, 20], ["fairseq.options.get_parser", "rerank_options.add_reranking_args", "rerank_options.add_tuning_args"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_manifest.get_parser", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_options.add_reranking_args", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_options.add_tuning_args"], ["", "def", "get_tuning_parser", "(", "default_task", "=", "'translation'", ")", ":", "\n", "    ", "parser", "=", "options", ".", "get_parser", "(", "'Reranking tuning'", ",", "default_task", ")", "\n", "add_reranking_args", "(", "parser", ")", "\n", "add_tuning_args", "(", "parser", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_options.add_reranking_args": [[22, 108], ["parser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument"], "function", ["None"], ["", "def", "add_reranking_args", "(", "parser", ")", ":", "\n", "    ", "group", "=", "parser", ".", "add_argument_group", "(", "\"Reranking\"", ")", "\n", "# fmt: off", "\n", "group", ".", "add_argument", "(", "'--score-model1'", ",", "'-s1'", ",", "type", "=", "str", ",", "metavar", "=", "'FILE'", ",", "required", "=", "True", ",", "\n", "help", "=", "'path to first model or ensemble of models for rescoring'", ")", "\n", "group", ".", "add_argument", "(", "'--score-model2'", ",", "'-s2'", ",", "type", "=", "str", ",", "metavar", "=", "'FILE'", ",", "required", "=", "False", ",", "\n", "help", "=", "'path to second model or ensemble of models for rescoring'", ")", "\n", "group", ".", "add_argument", "(", "'--num-rescore'", ",", "'-n'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "default", "=", "10", ",", "\n", "help", "=", "'the number of candidate hypothesis to rescore'", ")", "\n", "group", ".", "add_argument", "(", "'-bz'", ",", "'--batch-size'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "default", "=", "128", ",", "\n", "help", "=", "'batch size for generating the nbest list'", ")", "\n", "group", ".", "add_argument", "(", "'--gen-subset'", ",", "default", "=", "'test'", ",", "metavar", "=", "'SET'", ",", "choices", "=", "[", "'test'", ",", "'train'", ",", "'valid'", "]", ",", "\n", "help", "=", "'data subset to generate (train, valid, test)'", ")", "\n", "group", ".", "add_argument", "(", "'--gen-model'", ",", "default", "=", "None", ",", "metavar", "=", "'FILE'", ",", "\n", "help", "=", "'the model to generate translations'", ")", "\n", "group", ".", "add_argument", "(", "'-b1'", ",", "'--backwards1'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether or not the first model group is backwards'", ")", "\n", "group", ".", "add_argument", "(", "'-b2'", ",", "'--backwards2'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether or not the second model group is backwards'", ")", "\n", "group", ".", "add_argument", "(", "'-a'", ",", "'--weight1'", ",", "default", "=", "1", ",", "nargs", "=", "'+'", ",", "type", "=", "float", ",", "\n", "help", "=", "'the weight(s) of the first model'", ")", "\n", "group", ".", "add_argument", "(", "'-b'", ",", "'--weight2'", ",", "default", "=", "1", ",", "nargs", "=", "'+'", ",", "type", "=", "float", ",", "\n", "help", "=", "'the weight(s) of the second model, or the gen model if using nbest from interactive.py'", ")", "\n", "group", ".", "add_argument", "(", "'-c'", ",", "'--weight3'", ",", "default", "=", "1", ",", "nargs", "=", "'+'", ",", "type", "=", "float", ",", "\n", "help", "=", "'the weight(s) of the third model'", ")", "\n", "\n", "# lm arguments", "\n", "group", ".", "add_argument", "(", "'-lm'", ",", "'--language-model'", ",", "default", "=", "None", ",", "metavar", "=", "'FILE'", ",", "\n", "help", "=", "'language model for target language to rescore translations'", ")", "\n", "group", ".", "add_argument", "(", "'--lm-dict'", ",", "default", "=", "None", ",", "metavar", "=", "'FILE'", ",", "\n", "help", "=", "'the dict of the language model for the target language'", ")", "\n", "group", ".", "add_argument", "(", "'--lm-name'", ",", "default", "=", "None", ",", "\n", "help", "=", "'the name of the language model for the target language'", ")", "\n", "group", ".", "add_argument", "(", "'--lm-bpe-code'", ",", "default", "=", "None", ",", "metavar", "=", "'FILE'", ",", "\n", "help", "=", "'the bpe code for the language model for the target language'", ")", "\n", "group", ".", "add_argument", "(", "'--data-dir-name'", ",", "default", "=", "None", ",", "\n", "help", "=", "'name of data directory'", ")", "\n", "group", ".", "add_argument", "(", "'--lenpen'", ",", "default", "=", "1", ",", "nargs", "=", "'+'", ",", "type", "=", "float", ",", "\n", "help", "=", "'length penalty: <1.0 favors shorter, >1.0 favors longer sentences'", ")", "\n", "group", ".", "add_argument", "(", "'--score-dict-dir'", ",", "default", "=", "None", ",", "\n", "help", "=", "'the directory with dictionaries for the scoring models'", ")", "\n", "group", ".", "add_argument", "(", "'--right-to-left1'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether the first model group is a right to left model'", ")", "\n", "group", ".", "add_argument", "(", "'--right-to-left2'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether the second model group is a right to left model'", ")", "\n", "group", ".", "add_argument", "(", "'--remove-bpe'", ",", "default", "=", "'@@ '", ",", "\n", "help", "=", "'the bpe symbol, used for the bitext and LM'", ")", "\n", "group", ".", "add_argument", "(", "'--prefix-len'", ",", "default", "=", "None", ",", "type", "=", "int", ",", "\n", "help", "=", "'the length of the target prefix to use in rescoring (in terms of words wo bpe)'", ")", "\n", "group", ".", "add_argument", "(", "'--sampling'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use sampling instead of beam search for generating n best list'", ")", "\n", "group", ".", "add_argument", "(", "'--diff-bpe'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'bpe for rescoring and nbest list not the same'", ")", "\n", "group", ".", "add_argument", "(", "'--rescore-bpe-code'", ",", "default", "=", "None", ",", "\n", "help", "=", "'bpe code for rescoring models'", ")", "\n", "group", ".", "add_argument", "(", "'--nbest-list'", ",", "default", "=", "None", ",", "\n", "help", "=", "'use predefined nbest list in interactive.py format'", ")", "\n", "group", ".", "add_argument", "(", "'--write-hypos'", ",", "default", "=", "None", ",", "\n", "help", "=", "'filename prefix to write hypos to'", ")", "\n", "group", ".", "add_argument", "(", "'--ref-translation'", ",", "default", "=", "None", ",", "\n", "help", "=", "'reference translation to use with nbest list from interactive.py'", ")", "\n", "group", ".", "add_argument", "(", "'--backwards-score-dict-dir'", ",", "default", "=", "None", ",", "\n", "help", "=", "'the directory with dictionaries for the backwards model,'", "\n", "'if None then it is assumed the fw and backwards models share dictionaries'", ")", "\n", "\n", "# extra scaling args", "\n", "group", ".", "add_argument", "(", "'--gen-model-name'", ",", "default", "=", "None", ",", "\n", "help", "=", "'the name of the models that generated the nbest list'", ")", "\n", "group", ".", "add_argument", "(", "'--model1-name'", ",", "default", "=", "None", ",", "\n", "help", "=", "'the name of the set for model1 group '", ")", "\n", "group", ".", "add_argument", "(", "'--model2-name'", ",", "default", "=", "None", ",", "\n", "help", "=", "'the name of the set for model2 group'", ")", "\n", "group", ".", "add_argument", "(", "'--shard-id'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "\n", "help", "=", "'the id of the shard to generate'", ")", "\n", "group", ".", "add_argument", "(", "'--num-shards'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "'the number of shards to generate across'", ")", "\n", "group", ".", "add_argument", "(", "'--all-shards'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use all shards'", ")", "\n", "group", ".", "add_argument", "(", "'--target-prefix-frac'", ",", "default", "=", "None", ",", "type", "=", "float", ",", "\n", "help", "=", "'the fraction of the target prefix to use in rescoring (in terms of words wo bpe)'", ")", "\n", "group", ".", "add_argument", "(", "'--source-prefix-frac'", ",", "default", "=", "None", ",", "type", "=", "float", ",", "\n", "help", "=", "'the fraction of the source prefix to use in rescoring (in terms of words wo bpe)'", ")", "\n", "group", ".", "add_argument", "(", "'--normalize'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to normalize by src and target len'", ")", "\n", "\n", "return", "group", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_options.add_tuning_args": [[110, 127], ["parser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument"], "function", ["None"], ["", "def", "add_tuning_args", "(", "parser", ")", ":", "\n", "    ", "group", "=", "parser", ".", "add_argument_group", "(", "\"Tuning\"", ")", "\n", "\n", "group", ".", "add_argument", "(", "'--lower-bound'", ",", "default", "=", "[", "-", "0.7", "]", ",", "nargs", "=", "'+'", ",", "type", "=", "float", ",", "\n", "help", "=", "'lower bound of search space'", ")", "\n", "group", ".", "add_argument", "(", "'--upper-bound'", ",", "default", "=", "[", "3", "]", ",", "nargs", "=", "'+'", ",", "type", "=", "float", ",", "\n", "help", "=", "'upper bound of search space'", ")", "\n", "group", ".", "add_argument", "(", "'--tune-param'", ",", "default", "=", "[", "'lenpen'", "]", ",", "nargs", "=", "'+'", ",", "\n", "choices", "=", "[", "'lenpen'", ",", "'weight1'", ",", "'weight2'", ",", "'weight3'", "]", ",", "\n", "help", "=", "'the parameter(s) to tune'", ")", "\n", "group", ".", "add_argument", "(", "'--tune-subset'", ",", "default", "=", "'valid'", ",", "choices", "=", "[", "'valid'", ",", "'test'", ",", "'train'", "]", ",", "\n", "help", "=", "'the subset to tune on '", ")", "\n", "group", ".", "add_argument", "(", "'--num-trials'", ",", "default", "=", "1000", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of trials to do for random search'", ")", "\n", "group", ".", "add_argument", "(", "'--share-weights'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'share weight2 and weight 3'", ")", "\n", "return", "group", "\n", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank.score_target_hypo": [[23, 132], ["print", "rerank.load_score_files", "fairseq.data.dictionary.Dictionary", "fairseq.bleu.Scorer", "range", "bleu.Scorer.result_string", "rerank_utils.parse_bleu_scoring", "dictionary.Dictionary.pad", "dictionary.Dictionary.eos", "dictionary.Dictionary.unk", "len", "len", "range", "list", "range", "len", "print", "bitext1.rescore_source.keys", "len", "rerank_utils.get_score", "sorted", "len", "range", "open", "bitext1.rescore_hypo[].split", "hypo_lst.append", "score_lst.append", "source_lst.append", "reference_lst.append", "gen_output.no_bpe_target.keys", "dictionary.Dictionary.encode_line", "dictionary.Dictionary.encode_line", "bleu.Scorer.add", "rerank_utils.get_full_from_prefix", "dictionary.Dictionary.encode_line", "dictionary.Dictionary.encode_line", "bleu.Scorer.add", "len", "open", "range", "str", "rerank_utils.get_full_from_prefix", "len", "t.write", "h.write", "str", "str", "str", "str", "str", "str"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank.load_score_files", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.bleu.Scorer.result_string", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.parse_bleu_scoring", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.unk", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.get_score", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.encode_line", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.encode_line", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.eval_lm.WordStat.add", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.get_full_from_prefix", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.encode_line", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.encode_line", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.eval_lm.WordStat.add", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.get_full_from_prefix", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write"], ["def", "score_target_hypo", "(", "args", ",", "a", ",", "b", ",", "c", ",", "lenpen", ",", "target_outfile", ",", "hypo_outfile", ",", "write_hypos", ",", "normalize", ")", ":", "\n", "\n", "    ", "print", "(", "\"lenpen\"", ",", "lenpen", ",", "\"weight1\"", ",", "a", ",", "\"weight2\"", ",", "b", ",", "\"weight3\"", ",", "c", ")", "\n", "gen_output_lst", ",", "bitext1_lst", ",", "bitext2_lst", ",", "lm_res_lst", "=", "load_score_files", "(", "args", ")", "\n", "dict", "=", "dictionary", ".", "Dictionary", "(", ")", "\n", "scorer", "=", "bleu", ".", "Scorer", "(", "dict", ".", "pad", "(", ")", ",", "dict", ".", "eos", "(", ")", ",", "dict", ".", "unk", "(", ")", ")", "\n", "\n", "ordered_hypos", "=", "{", "}", "\n", "ordered_targets", "=", "{", "}", "\n", "\n", "for", "shard_id", "in", "range", "(", "len", "(", "bitext1_lst", ")", ")", ":", "\n", "        ", "bitext1", "=", "bitext1_lst", "[", "shard_id", "]", "\n", "bitext2", "=", "bitext2_lst", "[", "shard_id", "]", "\n", "gen_output", "=", "gen_output_lst", "[", "shard_id", "]", "\n", "lm_res", "=", "lm_res_lst", "[", "shard_id", "]", "\n", "\n", "total", "=", "len", "(", "bitext1", ".", "rescore_source", ".", "keys", "(", ")", ")", "\n", "source_lst", "=", "[", "]", "\n", "hypo_lst", "=", "[", "]", "\n", "score_lst", "=", "[", "]", "\n", "reference_lst", "=", "[", "]", "\n", "j", "=", "1", "\n", "best_score", "=", "-", "math", ".", "inf", "\n", "\n", "for", "i", "in", "range", "(", "total", ")", ":", "\n", "# length is measured in terms of words, not bpe tokens, since models may not share the same bpe", "\n", "            ", "target_len", "=", "len", "(", "bitext1", ".", "rescore_hypo", "[", "i", "]", ".", "split", "(", ")", ")", "\n", "\n", "if", "lm_res", "is", "not", "None", ":", "\n", "                ", "lm_score", "=", "lm_res", ".", "score", "[", "i", "]", "\n", "", "else", ":", "\n", "                ", "lm_score", "=", "0", "\n", "\n", "", "if", "bitext2", "is", "not", "None", ":", "\n", "                ", "bitext2_score", "=", "bitext2", ".", "rescore_score", "[", "i", "]", "\n", "bitext2_backwards", "=", "bitext2", ".", "backwards", "\n", "", "else", ":", "\n", "                ", "bitext2_score", "=", "None", "\n", "bitext2_backwards", "=", "None", "\n", "\n", "", "score", "=", "rerank_utils", ".", "get_score", "(", "a", ",", "b", ",", "c", ",", "target_len", ",", "\n", "bitext1", ".", "rescore_score", "[", "i", "]", ",", "bitext2_score", ",", "lm_score", "=", "lm_score", ",", "\n", "lenpen", "=", "lenpen", ",", "src_len", "=", "bitext1", ".", "source_lengths", "[", "i", "]", ",", "\n", "tgt_len", "=", "bitext1", ".", "target_lengths", "[", "i", "]", ",", "bitext1_backwards", "=", "bitext1", ".", "backwards", ",", "\n", "bitext2_backwards", "=", "bitext2_backwards", ",", "normalize", "=", "normalize", ")", "\n", "\n", "if", "score", ">", "best_score", ":", "\n", "                ", "best_score", "=", "score", "\n", "best_hypo", "=", "bitext1", ".", "rescore_hypo", "[", "i", "]", "\n", "\n", "", "if", "j", "==", "gen_output", ".", "num_hypos", "[", "i", "]", "or", "j", "==", "args", ".", "num_rescore", ":", "\n", "                ", "j", "=", "1", "\n", "hypo_lst", ".", "append", "(", "best_hypo", ")", "\n", "score_lst", ".", "append", "(", "best_score", ")", "\n", "source_lst", ".", "append", "(", "bitext1", ".", "rescore_source", "[", "i", "]", ")", "\n", "reference_lst", ".", "append", "(", "bitext1", ".", "rescore_target", "[", "i", "]", ")", "\n", "\n", "best_score", "=", "-", "math", ".", "inf", "\n", "best_hypo", "=", "\"\"", "\n", "", "else", ":", "\n", "                ", "j", "+=", "1", "\n", "\n", "", "", "gen_keys", "=", "list", "(", "sorted", "(", "gen_output", ".", "no_bpe_target", ".", "keys", "(", ")", ")", ")", "\n", "\n", "for", "key", "in", "range", "(", "len", "(", "gen_keys", ")", ")", ":", "\n", "            ", "if", "args", ".", "prefix_len", "is", "None", ":", "\n", "                ", "assert", "hypo_lst", "[", "key", "]", "in", "gen_output", ".", "no_bpe_hypo", "[", "gen_keys", "[", "key", "]", "]", ",", "(", "\n", "\"pred and rescore hypo mismatch: i: \"", "+", "str", "(", "key", ")", "+", "\", \"", "\n", "+", "str", "(", "hypo_lst", "[", "key", "]", ")", "+", "str", "(", "gen_keys", "[", "key", "]", ")", "\n", "+", "str", "(", "gen_output", ".", "no_bpe_hypo", "[", "key", "]", ")", "\n", ")", "\n", "sys_tok", "=", "dict", ".", "encode_line", "(", "hypo_lst", "[", "key", "]", ")", "\n", "ref_tok", "=", "dict", ".", "encode_line", "(", "gen_output", ".", "no_bpe_target", "[", "gen_keys", "[", "key", "]", "]", ")", "\n", "scorer", ".", "add", "(", "ref_tok", ",", "sys_tok", ")", "\n", "\n", "", "else", ":", "\n", "                ", "full_hypo", "=", "rerank_utils", ".", "get_full_from_prefix", "(", "hypo_lst", "[", "key", "]", ",", "gen_output", ".", "no_bpe_hypo", "[", "gen_keys", "[", "key", "]", "]", ")", "\n", "sys_tok", "=", "dict", ".", "encode_line", "(", "full_hypo", ")", "\n", "ref_tok", "=", "dict", ".", "encode_line", "(", "gen_output", ".", "no_bpe_target", "[", "gen_keys", "[", "key", "]", "]", ")", "\n", "scorer", ".", "add", "(", "ref_tok", ",", "sys_tok", ")", "\n", "\n", "# if only one set of hyper parameters is provided, write the predictions to a file", "\n", "", "", "if", "write_hypos", ":", "\n", "# recover the orinal ids from n best list generation", "\n", "            ", "for", "key", "in", "range", "(", "len", "(", "gen_output", ".", "no_bpe_target", ")", ")", ":", "\n", "                ", "if", "args", ".", "prefix_len", "is", "None", ":", "\n", "                    ", "assert", "hypo_lst", "[", "key", "]", "in", "gen_output", ".", "no_bpe_hypo", "[", "gen_keys", "[", "key", "]", "]", ",", "\"pred and rescore hypo mismatch:\"", "+", "\"i:\"", "+", "str", "(", "key", ")", "+", "str", "(", "hypo_lst", "[", "key", "]", ")", "+", "str", "(", "gen_output", ".", "no_bpe_hypo", "[", "key", "]", ")", "\n", "ordered_hypos", "[", "gen_keys", "[", "key", "]", "]", "=", "hypo_lst", "[", "key", "]", "\n", "ordered_targets", "[", "gen_keys", "[", "key", "]", "]", "=", "gen_output", ".", "no_bpe_target", "[", "gen_keys", "[", "key", "]", "]", "\n", "\n", "", "else", ":", "\n", "                    ", "full_hypo", "=", "rerank_utils", ".", "get_full_from_prefix", "(", "hypo_lst", "[", "key", "]", ",", "gen_output", ".", "no_bpe_hypo", "[", "gen_keys", "[", "key", "]", "]", ")", "\n", "ordered_hypos", "[", "gen_keys", "[", "key", "]", "]", "=", "full_hypo", "\n", "ordered_targets", "[", "gen_keys", "[", "key", "]", "]", "=", "gen_output", ".", "no_bpe_target", "[", "gen_keys", "[", "key", "]", "]", "\n", "\n", "# write the hypos in the original order from nbest list generation", "\n", "", "", "", "", "if", "args", ".", "num_shards", "==", "(", "len", "(", "bitext1_lst", ")", ")", ":", "\n", "        ", "with", "open", "(", "target_outfile", ",", "'w'", ")", "as", "t", ":", "\n", "            ", "with", "open", "(", "hypo_outfile", ",", "'w'", ")", "as", "h", ":", "\n", "                ", "for", "key", "in", "range", "(", "len", "(", "ordered_hypos", ")", ")", ":", "\n", "                    ", "t", ".", "write", "(", "ordered_targets", "[", "key", "]", ")", "\n", "h", ".", "write", "(", "ordered_hypos", "[", "key", "]", ")", "\n", "\n", "", "", "", "", "res", "=", "scorer", ".", "result_string", "(", "4", ")", "\n", "if", "write_hypos", ":", "\n", "        ", "print", "(", "res", ")", "\n", "", "score", "=", "rerank_utils", ".", "parse_bleu_scoring", "(", "res", ")", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank.match_target_hypo": [[134, 162], ["len", "rerank.score_target_hypo", "print", "len", "numpy.argmax", "print", "print", "print", "print", "print", "multiprocessing.Pool", "p.starmap", "range", "len"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank.score_target_hypo", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], ["", "def", "match_target_hypo", "(", "args", ",", "target_outfile", ",", "hypo_outfile", ")", ":", "\n", "    ", "\"\"\"combine scores from the LM and bitext models, and write the top scoring hypothesis to a file\"\"\"", "\n", "if", "len", "(", "args", ".", "weight1", ")", "==", "1", ":", "\n", "        ", "res", "=", "score_target_hypo", "(", "args", ",", "args", ".", "weight1", "[", "0", "]", ",", "args", ".", "weight2", "[", "0", "]", ",", "\n", "args", ".", "weight3", "[", "0", "]", ",", "args", ".", "lenpen", "[", "0", "]", ",", "target_outfile", ",", "\n", "hypo_outfile", ",", "True", ",", "args", ".", "normalize", ")", "\n", "rerank_scores", "=", "[", "res", "]", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"launching pool\"", ")", "\n", "with", "Pool", "(", "32", ")", "as", "p", ":", "\n", "            ", "rerank_scores", "=", "p", ".", "starmap", "(", "score_target_hypo", ",", "\n", "[", "(", "args", ",", "args", ".", "weight1", "[", "i", "]", ",", "args", ".", "weight2", "[", "i", "]", ",", "args", ".", "weight3", "[", "i", "]", ",", "\n", "args", ".", "lenpen", "[", "i", "]", ",", "target_outfile", ",", "hypo_outfile", ",", "\n", "False", ",", "args", ".", "normalize", ")", "for", "i", "in", "range", "(", "len", "(", "args", ".", "weight1", ")", ")", "]", ")", "\n", "\n", "", "", "if", "len", "(", "rerank_scores", ")", ">", "1", ":", "\n", "        ", "best_index", "=", "np", ".", "argmax", "(", "rerank_scores", ")", "\n", "best_score", "=", "rerank_scores", "[", "best_index", "]", "\n", "print", "(", "\"best score\"", ",", "best_score", ")", "\n", "print", "(", "\"best lenpen\"", ",", "args", ".", "lenpen", "[", "best_index", "]", ")", "\n", "print", "(", "\"best weight1\"", ",", "args", ".", "weight1", "[", "best_index", "]", ")", "\n", "print", "(", "\"best weight2\"", ",", "args", ".", "weight2", "[", "best_index", "]", ")", "\n", "print", "(", "\"best weight3\"", ",", "args", ".", "weight3", "[", "best_index", "]", ")", "\n", "return", "args", ".", "lenpen", "[", "best_index", "]", ",", "args", ".", "weight1", "[", "best_index", "]", ",", "args", ".", "weight2", "[", "best_index", "]", ",", "args", ".", "weight3", "[", "best_index", "]", ",", "best_score", "\n", "\n", "", "else", ":", "\n", "        ", "return", "args", ".", "lenpen", "[", "0", "]", ",", "args", ".", "weight1", "[", "0", "]", ",", "args", ".", "weight2", "[", "0", "]", ",", "args", ".", "weight3", "[", "0", "]", ",", "rerank_scores", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank.load_score_files": [[164, 244], ["list", "rerank_utils.get_directories", "rerank_utils.rescore_file_name", "rerank_utils.BitextOutputFromGen", "gen_output_lst.append", "bitext1_lst.append", "bitext2_lst.append", "lm_res1_lst.append", "range", "rerank_utils.rescore_file_name", "rerank_utils.rescore_file_name", "print", "rerank_utils.BitextOutput", "rerank_utils.LMOutput", "rerank_utils.BitextOutput"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.get_directories", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.rescore_file_name", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.rescore_file_name", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.rescore_file_name", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], ["", "", "def", "load_score_files", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "all_shards", ":", "\n", "        ", "shard_ids", "=", "list", "(", "range", "(", "args", ".", "num_shards", ")", ")", "\n", "", "else", ":", "\n", "        ", "shard_ids", "=", "[", "args", ".", "shard_id", "]", "\n", "\n", "", "gen_output_lst", "=", "[", "]", "\n", "bitext1_lst", "=", "[", "]", "\n", "bitext2_lst", "=", "[", "]", "\n", "lm_res1_lst", "=", "[", "]", "\n", "\n", "for", "shard_id", "in", "shard_ids", ":", "\n", "        ", "using_nbest", "=", "args", ".", "nbest_list", "is", "not", "None", "\n", "pre_gen", ",", "left_to_right_preprocessed_dir", ",", "right_to_left_preprocessed_dir", ",", "backwards_preprocessed_dir", ",", "lm_preprocessed_dir", "=", "rerank_utils", ".", "get_directories", "(", "args", ".", "data_dir_name", ",", "args", ".", "num_rescore", ",", "args", ".", "gen_subset", ",", "\n", "args", ".", "gen_model_name", ",", "shard_id", ",", "args", ".", "num_shards", ",", "args", ".", "sampling", ",", "\n", "args", ".", "prefix_len", ",", "args", ".", "target_prefix_frac", ",", "args", ".", "source_prefix_frac", ")", "\n", "\n", "rerank1_is_gen", "=", "args", ".", "gen_model", "==", "args", ".", "score_model1", "and", "args", ".", "source_prefix_frac", "is", "None", "\n", "rerank2_is_gen", "=", "args", ".", "gen_model", "==", "args", ".", "score_model2", "and", "args", ".", "source_prefix_frac", "is", "None", "\n", "\n", "score1_file", "=", "rerank_utils", ".", "rescore_file_name", "(", "pre_gen", ",", "args", ".", "prefix_len", ",", "args", ".", "model1_name", ",", "\n", "target_prefix_frac", "=", "args", ".", "target_prefix_frac", ",", "\n", "source_prefix_frac", "=", "args", ".", "source_prefix_frac", ",", "\n", "backwards", "=", "args", ".", "backwards1", ")", "\n", "if", "args", ".", "score_model2", "is", "not", "None", ":", "\n", "            ", "score2_file", "=", "rerank_utils", ".", "rescore_file_name", "(", "pre_gen", ",", "args", ".", "prefix_len", ",", "args", ".", "model2_name", ",", "\n", "target_prefix_frac", "=", "args", ".", "target_prefix_frac", ",", "\n", "source_prefix_frac", "=", "args", ".", "source_prefix_frac", ",", "\n", "backwards", "=", "args", ".", "backwards2", ")", "\n", "", "if", "args", ".", "language_model", "is", "not", "None", ":", "\n", "            ", "lm_score_file", "=", "rerank_utils", ".", "rescore_file_name", "(", "pre_gen", ",", "args", ".", "prefix_len", ",", "args", ".", "lm_name", ",", "lm_file", "=", "True", ")", "\n", "\n", "# get gen output", "\n", "", "predictions_bpe_file", "=", "pre_gen", "+", "\"/generate_output_bpe.txt\"", "\n", "if", "using_nbest", ":", "\n", "            ", "print", "(", "\"Using predefined n-best list from interactive.py\"", ")", "\n", "predictions_bpe_file", "=", "args", ".", "nbest_list", "\n", "", "gen_output", "=", "rerank_utils", ".", "BitextOutputFromGen", "(", "predictions_bpe_file", ",", "bpe_symbol", "=", "args", ".", "remove_bpe", ",", "\n", "nbest", "=", "using_nbest", ",", "prefix_len", "=", "args", ".", "prefix_len", ",", "\n", "target_prefix_frac", "=", "args", ".", "target_prefix_frac", ")", "\n", "\n", "if", "rerank1_is_gen", ":", "\n", "            ", "bitext1", "=", "gen_output", "\n", "", "else", ":", "\n", "            ", "bitext1", "=", "rerank_utils", ".", "BitextOutput", "(", "score1_file", ",", "args", ".", "backwards1", ",", "args", ".", "right_to_left1", ",", "\n", "args", ".", "remove_bpe", ",", "args", ".", "prefix_len", ",", "args", ".", "target_prefix_frac", ",", "\n", "args", ".", "source_prefix_frac", ")", "\n", "\n", "", "if", "args", ".", "score_model2", "is", "not", "None", "or", "args", ".", "nbest_list", "is", "not", "None", ":", "\n", "            ", "if", "rerank2_is_gen", ":", "\n", "                ", "bitext2", "=", "gen_output", "\n", "", "else", ":", "\n", "                ", "bitext2", "=", "rerank_utils", ".", "BitextOutput", "(", "score2_file", ",", "args", ".", "backwards2", ",", "args", ".", "right_to_left2", ",", "\n", "args", ".", "remove_bpe", ",", "args", ".", "prefix_len", ",", "args", ".", "target_prefix_frac", ",", "\n", "args", ".", "source_prefix_frac", ")", "\n", "\n", "assert", "bitext2", ".", "source_lengths", "==", "bitext1", ".", "source_lengths", ",", "\"source lengths for rescoring models do not match\"", "\n", "assert", "bitext2", ".", "target_lengths", "==", "bitext1", ".", "target_lengths", ",", "\"target lengths for rescoring models do not match\"", "\n", "", "", "else", ":", "\n", "            ", "if", "args", ".", "diff_bpe", ":", "\n", "                ", "assert", "args", ".", "score_model2", "is", "None", "\n", "bitext2", "=", "gen_output", "\n", "", "else", ":", "\n", "                ", "bitext2", "=", "None", "\n", "\n", "", "", "if", "args", ".", "language_model", "is", "not", "None", ":", "\n", "            ", "lm_res1", "=", "rerank_utils", ".", "LMOutput", "(", "lm_score_file", ",", "args", ".", "lm_dict", ",", "args", ".", "prefix_len", ",", "\n", "args", ".", "remove_bpe", ",", "args", ".", "target_prefix_frac", ")", "\n", "", "else", ":", "\n", "            ", "lm_res1", "=", "None", "\n", "\n", "", "gen_output_lst", ".", "append", "(", "gen_output", ")", "\n", "bitext1_lst", ".", "append", "(", "bitext1", ")", "\n", "bitext2_lst", ".", "append", "(", "bitext2", ")", "\n", "lm_res1_lst", ".", "append", "(", "lm_res1", ")", "\n", "", "return", "gen_output_lst", ",", "bitext1_lst", ",", "bitext2_lst", ",", "lm_res1_lst", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank.rerank": [[246, 285], ["rerank.match_target_hypo", "type", "type", "type", "type", "list", "rerank_utils.get_directories", "rerank_generate.gen_and_reprocess_nbest", "rerank_score_bw.score_bw", "rerank_score_lm.score_lm", "range"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank.match_target_hypo", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.get_directories", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_generate.gen_and_reprocess_nbest", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_score_bw.score_bw", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_score_lm.score_lm"], ["", "def", "rerank", "(", "args", ")", ":", "\n", "    ", "if", "type", "(", "args", ".", "lenpen", ")", "is", "not", "list", ":", "\n", "        ", "args", ".", "lenpen", "=", "[", "args", ".", "lenpen", "]", "\n", "", "if", "type", "(", "args", ".", "weight1", ")", "is", "not", "list", ":", "\n", "        ", "args", ".", "weight1", "=", "[", "args", ".", "weight1", "]", "\n", "", "if", "type", "(", "args", ".", "weight2", ")", "is", "not", "list", ":", "\n", "        ", "args", ".", "weight2", "=", "[", "args", ".", "weight2", "]", "\n", "", "if", "type", "(", "args", ".", "weight3", ")", "is", "not", "list", ":", "\n", "        ", "args", ".", "weight3", "=", "[", "args", ".", "weight3", "]", "\n", "", "if", "args", ".", "all_shards", ":", "\n", "        ", "shard_ids", "=", "list", "(", "range", "(", "args", ".", "num_shards", ")", ")", "\n", "", "else", ":", "\n", "        ", "shard_ids", "=", "[", "args", ".", "shard_id", "]", "\n", "\n", "", "for", "shard_id", "in", "shard_ids", ":", "\n", "        ", "pre_gen", ",", "left_to_right_preprocessed_dir", ",", "right_to_left_preprocessed_dir", ",", "backwards_preprocessed_dir", ",", "lm_preprocessed_dir", "=", "rerank_utils", ".", "get_directories", "(", "args", ".", "data_dir_name", ",", "args", ".", "num_rescore", ",", "args", ".", "gen_subset", ",", "\n", "args", ".", "gen_model_name", ",", "shard_id", ",", "args", ".", "num_shards", ",", "args", ".", "sampling", ",", "\n", "args", ".", "prefix_len", ",", "args", ".", "target_prefix_frac", ",", "args", ".", "source_prefix_frac", ")", "\n", "rerank_generate", ".", "gen_and_reprocess_nbest", "(", "args", ")", "\n", "rerank_score_bw", ".", "score_bw", "(", "args", ")", "\n", "rerank_score_lm", ".", "score_lm", "(", "args", ")", "\n", "\n", "if", "args", ".", "write_hypos", "is", "None", ":", "\n", "            ", "write_targets", "=", "pre_gen", "+", "\"/matched_targets\"", "\n", "write_hypos", "=", "pre_gen", "+", "\"/matched_hypos\"", "\n", "", "else", ":", "\n", "            ", "write_targets", "=", "args", ".", "write_hypos", "+", "\"_targets\"", "+", "args", ".", "gen_subset", "\n", "write_hypos", "=", "args", ".", "write_hypos", "+", "\"_hypos\"", "+", "args", ".", "gen_subset", "\n", "\n", "", "", "if", "args", ".", "all_shards", ":", "\n", "        ", "write_targets", "+=", "\"_all_shards\"", "\n", "write_hypos", "+=", "\"_all_shards\"", "\n", "\n", "", "best_lenpen", ",", "best_weight1", ",", "best_weight2", ",", "best_weight3", ",", "best_score", "=", "match_target_hypo", "(", "args", ",", "write_targets", ",", "write_hypos", ")", "\n", "\n", "return", "best_lenpen", ",", "best_weight1", ",", "best_weight2", ",", "best_weight3", ",", "best_score", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank.cli_main": [[287, 291], ["rerank_options.get_reranking_parser", "fairseq.options.parse_args_and_arch", "rerank.rerank"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_options.get_reranking_parser", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.parse_args_and_arch", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank.rerank"], ["", "def", "cli_main", "(", ")", ":", "\n", "    ", "parser", "=", "rerank_options", ".", "get_reranking_parser", "(", ")", "\n", "args", "=", "options", ".", "parse_args_and_arch", "(", "parser", ")", "\n", "rerank", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_score_bw.score_bw": [[15, 92], ["rerank_utils.get_directories", "rerank_utils.rescore_file_name", "rerank_utils.rescore_file_name", "str", "print", "fairseq.options.get_generation_parser", "fairseq.options.parse_args_and_arch", "print", "fairseq.options.get_generation_parser", "fairseq.options.parse_args_and_arch", "os.path.isfile", "open", "os.path.isfile", "open", "contextlib.redirect_stdout", "fairseq_cli.generate.main", "contextlib.redirect_stdout", "fairseq_cli.generate.main"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.get_directories", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.rescore_file_name", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.rescore_file_name", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.get_generation_parser", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.parse_args_and_arch", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.get_generation_parser", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.parse_args_and_arch", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.isfile", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.isfile", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.inter_rep.main", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.inter_rep.main"], ["def", "score_bw", "(", "args", ")", ":", "\n", "        ", "if", "args", ".", "backwards1", ":", "\n", "            ", "scorer1_src", "=", "args", ".", "target_lang", "\n", "scorer1_tgt", "=", "args", ".", "source_lang", "\n", "", "else", ":", "\n", "            ", "scorer1_src", "=", "args", ".", "source_lang", "\n", "scorer1_tgt", "=", "args", ".", "target_lang", "\n", "\n", "", "if", "args", ".", "score_model2", "is", "not", "None", ":", "\n", "            ", "if", "args", ".", "backwards2", ":", "\n", "                ", "scorer2_src", "=", "args", ".", "target_lang", "\n", "scorer2_tgt", "=", "args", ".", "source_lang", "\n", "", "else", ":", "\n", "                ", "scorer2_src", "=", "args", ".", "source_lang", "\n", "scorer2_tgt", "=", "args", ".", "target_lang", "\n", "\n", "", "", "rerank1_is_gen", "=", "args", ".", "gen_model", "==", "args", ".", "score_model1", "and", "args", ".", "source_prefix_frac", "is", "None", "\n", "rerank2_is_gen", "=", "args", ".", "gen_model", "==", "args", ".", "score_model2", "and", "args", ".", "source_prefix_frac", "is", "None", "\n", "\n", "pre_gen", ",", "left_to_right_preprocessed_dir", ",", "right_to_left_preprocessed_dir", ",", "backwards_preprocessed_dir", ",", "lm_preprocessed_dir", "=", "rerank_utils", ".", "get_directories", "(", "args", ".", "data_dir_name", ",", "args", ".", "num_rescore", ",", "args", ".", "gen_subset", ",", "\n", "args", ".", "gen_model_name", ",", "args", ".", "shard_id", ",", "args", ".", "num_shards", ",", "\n", "args", ".", "sampling", ",", "args", ".", "prefix_len", ",", "args", ".", "target_prefix_frac", ",", "\n", "args", ".", "source_prefix_frac", ")", "\n", "\n", "score1_file", "=", "rerank_utils", ".", "rescore_file_name", "(", "pre_gen", ",", "args", ".", "prefix_len", ",", "args", ".", "model1_name", ",", "\n", "target_prefix_frac", "=", "args", ".", "target_prefix_frac", ",", "\n", "source_prefix_frac", "=", "args", ".", "source_prefix_frac", ",", "\n", "backwards", "=", "args", ".", "backwards1", ")", "\n", "\n", "if", "args", ".", "score_model2", "is", "not", "None", ":", "\n", "            ", "score2_file", "=", "rerank_utils", ".", "rescore_file_name", "(", "pre_gen", ",", "args", ".", "prefix_len", ",", "args", ".", "model2_name", ",", "\n", "target_prefix_frac", "=", "args", ".", "target_prefix_frac", ",", "\n", "source_prefix_frac", "=", "args", ".", "source_prefix_frac", ",", "\n", "backwards", "=", "args", ".", "backwards2", ")", "\n", "\n", "", "if", "args", ".", "right_to_left1", ":", "\n", "            ", "rerank_data1", "=", "right_to_left_preprocessed_dir", "\n", "", "elif", "args", ".", "backwards1", ":", "\n", "            ", "rerank_data1", "=", "backwards_preprocessed_dir", "\n", "", "else", ":", "\n", "            ", "rerank_data1", "=", "left_to_right_preprocessed_dir", "\n", "\n", "", "gen_param", "=", "[", "\"--batch-size\"", ",", "str", "(", "128", ")", ",", "\"--score-reference\"", ",", "\"--gen-subset\"", ",", "\"train\"", "]", "\n", "if", "not", "rerank1_is_gen", "and", "not", "os", ".", "path", ".", "isfile", "(", "score1_file", ")", ":", "\n", "            ", "print", "(", "\"STEP 4: score the translations for model 1\"", ")", "\n", "\n", "model_param1", "=", "[", "\"--path\"", ",", "args", ".", "score_model1", ",", "\"--source-lang\"", ",", "scorer1_src", ",", "\"--target-lang\"", ",", "scorer1_tgt", "]", "\n", "gen_model1_param", "=", "[", "rerank_data1", "]", "+", "gen_param", "+", "model_param1", "\n", "\n", "gen_parser", "=", "options", ".", "get_generation_parser", "(", ")", "\n", "input_args", "=", "options", ".", "parse_args_and_arch", "(", "gen_parser", ",", "gen_model1_param", ")", "\n", "\n", "with", "open", "(", "score1_file", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "with", "redirect_stdout", "(", "f", ")", ":", "\n", "                    ", "generate", ".", "main", "(", "input_args", ")", "\n", "\n", "", "", "", "if", "args", ".", "score_model2", "is", "not", "None", "and", "not", "os", ".", "path", ".", "isfile", "(", "score2_file", ")", "and", "not", "rerank2_is_gen", ":", "\n", "            ", "print", "(", "\"STEP 4: score the translations for model 2\"", ")", "\n", "\n", "if", "args", ".", "right_to_left2", ":", "\n", "                ", "rerank_data2", "=", "right_to_left_preprocessed_dir", "\n", "", "elif", "args", ".", "backwards2", ":", "\n", "                ", "rerank_data2", "=", "backwards_preprocessed_dir", "\n", "", "else", ":", "\n", "                ", "rerank_data2", "=", "left_to_right_preprocessed_dir", "\n", "\n", "", "model_param2", "=", "[", "\"--path\"", ",", "args", ".", "score_model2", ",", "\"--source-lang\"", ",", "scorer2_src", ",", "\"--target-lang\"", ",", "scorer2_tgt", "]", "\n", "gen_model2_param", "=", "[", "rerank_data2", "]", "+", "gen_param", "+", "model_param2", "\n", "\n", "gen_parser", "=", "options", ".", "get_generation_parser", "(", ")", "\n", "input_args", "=", "options", ".", "parse_args_and_arch", "(", "gen_parser", ",", "gen_model2_param", ")", "\n", "\n", "with", "open", "(", "score2_file", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "with", "redirect_stdout", "(", "f", ")", ":", "\n", "                    ", "generate", ".", "main", "(", "input_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_score_bw.cli_main": [[94, 98], ["rerank_options.get_reranking_parser", "fairseq.options.parse_args_and_arch", "rerank_score_bw.score_bw"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_options.get_reranking_parser", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.parse_args_and_arch", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_score_bw.score_bw"], ["", "", "", "", "def", "cli_main", "(", ")", ":", "\n", "    ", "parser", "=", "rerank_options", ".", "get_reranking_parser", "(", ")", "\n", "args", "=", "options", ".", "parse_args_and_arch", "(", "parser", ")", "\n", "score_bw", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_score_lm.score_lm": [[13, 45], ["rerank_utils.get_directories", "rerank_utils.BitextOutputFromGen", "print", "rerank_utils.rescore_file_name", "print", "rerank_utils.lm_scoring", "os.path.isfile"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.get_directories", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.rescore_file_name", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.lm_scoring", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.isfile"], ["def", "score_lm", "(", "args", ")", ":", "\n", "    ", "using_nbest", "=", "args", ".", "nbest_list", "is", "not", "None", "\n", "pre_gen", ",", "left_to_right_preprocessed_dir", ",", "right_to_left_preprocessed_dir", ",", "backwards_preprocessed_dir", ",", "lm_preprocessed_dir", "=", "rerank_utils", ".", "get_directories", "(", "args", ".", "data_dir_name", ",", "args", ".", "num_rescore", ",", "args", ".", "gen_subset", ",", "\n", "args", ".", "gen_model_name", ",", "args", ".", "shard_id", ",", "args", ".", "num_shards", ",", "\n", "args", ".", "sampling", ",", "args", ".", "prefix_len", ",", "args", ".", "target_prefix_frac", ",", "\n", "args", ".", "source_prefix_frac", ")", "\n", "\n", "predictions_bpe_file", "=", "pre_gen", "+", "\"/generate_output_bpe.txt\"", "\n", "if", "using_nbest", ":", "\n", "        ", "print", "(", "\"Using predefined n-best list from interactive.py\"", ")", "\n", "predictions_bpe_file", "=", "args", ".", "nbest_list", "\n", "\n", "", "gen_output", "=", "rerank_utils", ".", "BitextOutputFromGen", "(", "predictions_bpe_file", ",", "bpe_symbol", "=", "args", ".", "remove_bpe", ",", "nbest", "=", "using_nbest", ")", "\n", "\n", "if", "args", ".", "language_model", "is", "not", "None", ":", "\n", "        ", "lm_score_file", "=", "rerank_utils", ".", "rescore_file_name", "(", "pre_gen", ",", "args", ".", "prefix_len", ",", "args", ".", "lm_name", ",", "lm_file", "=", "True", ")", "\n", "\n", "", "if", "args", ".", "language_model", "is", "not", "None", "and", "not", "os", ".", "path", ".", "isfile", "(", "lm_score_file", ")", ":", "\n", "        ", "print", "(", "\"STEP 4.5: language modeling for P(T)\"", ")", "\n", "if", "args", ".", "lm_bpe_code", "is", "None", ":", "\n", "            ", "bpe_status", "=", "\"no bpe\"", "\n", "", "elif", "args", ".", "lm_bpe_code", "==", "\"shared\"", ":", "\n", "            ", "bpe_status", "=", "\"shared\"", "\n", "", "else", ":", "\n", "            ", "bpe_status", "=", "\"different\"", "\n", "\n", "", "rerank_utils", ".", "lm_scoring", "(", "lm_preprocessed_dir", ",", "bpe_status", ",", "gen_output", ",", "pre_gen", ",", "\n", "args", ".", "lm_dict", ",", "args", ".", "lm_name", ",", "args", ".", "language_model", ",", "\n", "args", ".", "lm_bpe_code", ",", "128", ",", "lm_score_file", ",", "args", ".", "target_lang", ",", "\n", "args", ".", "source_lang", ",", "prefix_len", "=", "args", ".", "prefix_len", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_score_lm.cli_main": [[47, 51], ["rerank_options.get_reranking_parser", "fairseq.options.parse_args_and_arch", "rerank_score_lm.score_lm"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_options.get_reranking_parser", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.parse_args_and_arch", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_score_lm.score_lm"], ["", "", "def", "cli_main", "(", ")", ":", "\n", "    ", "parser", "=", "rerank_options", ".", "get_reranking_parser", "(", ")", "\n", "args", "=", "options", ".", "parse_args_and_arch", "(", "parser", ")", "\n", "score_lm", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_tune.random_search": [[15, 83], ["enumerate", "args.tune_param.copy", "range", "random.seed", "numpy.array", "numpy.array", "numpy.concatenate", "vars().copy", "range", "argparse.Namespace", "rerank.rerank", "vars().copy", "vars().copy", "argparse.Namespace", "rerank.rerank", "len", "tuneable_parameters.index", "len", "list", "args.tune_param.copy.index", "list", "argparse.Namespace", "rerank.rerank", "type", "vars", "vars", "vars", "random.uniform", "range", "range", "range", "range", "len", "len"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.copy", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.copy", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank.rerank", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.copy", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.copy", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank.rerank", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.index", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.index", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank.rerank"], ["def", "random_search", "(", "args", ")", ":", "\n", "    ", "param_values", "=", "[", "]", "\n", "tuneable_parameters", "=", "[", "'lenpen'", ",", "'weight1'", ",", "'weight2'", ",", "'weight3'", "]", "\n", "initial_params", "=", "[", "args", ".", "lenpen", ",", "args", ".", "weight1", ",", "args", ".", "weight2", ",", "args", ".", "weight3", "]", "\n", "for", "i", ",", "elem", "in", "enumerate", "(", "initial_params", ")", ":", "\n", "        ", "if", "type", "(", "elem", ")", "is", "not", "list", ":", "\n", "            ", "initial_params", "[", "i", "]", "=", "[", "elem", "]", "\n", "", "else", ":", "\n", "            ", "initial_params", "[", "i", "]", "=", "elem", "\n", "\n", "", "", "tune_parameters", "=", "args", ".", "tune_param", ".", "copy", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "args", ".", "tune_param", ")", ")", ":", "\n", "        ", "assert", "args", ".", "upper_bound", "[", "i", "]", ">=", "args", ".", "lower_bound", "[", "i", "]", "\n", "index", "=", "tuneable_parameters", ".", "index", "(", "args", ".", "tune_param", "[", "i", "]", ")", "\n", "del", "tuneable_parameters", "[", "index", "]", "\n", "del", "initial_params", "[", "index", "]", "\n", "\n", "", "tune_parameters", "+=", "tuneable_parameters", "\n", "param_values", "+=", "initial_params", "\n", "random", ".", "seed", "(", "args", ".", "seed", ")", "\n", "\n", "random_params", "=", "np", ".", "array", "(", "[", "\n", "[", "random", ".", "uniform", "(", "args", ".", "lower_bound", "[", "i", "]", ",", "args", ".", "upper_bound", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "args", ".", "tune_param", ")", ")", "]", "\n", "for", "k", "in", "range", "(", "args", ".", "num_trials", ")", "\n", "]", ")", "\n", "set_params", "=", "np", ".", "array", "(", "[", "\n", "[", "initial_params", "[", "i", "]", "[", "0", "]", "for", "i", "in", "range", "(", "len", "(", "tuneable_parameters", ")", ")", "]", "\n", "for", "k", "in", "range", "(", "args", ".", "num_trials", ")", "\n", "]", ")", "\n", "random_params", "=", "np", ".", "concatenate", "(", "(", "random_params", ",", "set_params", ")", ",", "1", ")", "\n", "\n", "rerank_args", "=", "vars", "(", "args", ")", ".", "copy", "(", ")", "\n", "if", "args", ".", "nbest_list", ":", "\n", "        ", "rerank_args", "[", "'gen_subset'", "]", "=", "'test'", "\n", "", "else", ":", "\n", "        ", "rerank_args", "[", "'gen_subset'", "]", "=", "args", ".", "tune_subset", "\n", "\n", "", "for", "k", "in", "range", "(", "len", "(", "tune_parameters", ")", ")", ":", "\n", "        ", "rerank_args", "[", "tune_parameters", "[", "k", "]", "]", "=", "list", "(", "random_params", "[", ":", ",", "k", "]", ")", "\n", "\n", "", "if", "args", ".", "share_weights", ":", "\n", "        ", "k", "=", "tune_parameters", ".", "index", "(", "'weight2'", ")", "\n", "rerank_args", "[", "'weight3'", "]", "=", "list", "(", "random_params", "[", ":", ",", "k", "]", ")", "\n", "\n", "", "rerank_args", "=", "argparse", ".", "Namespace", "(", "**", "rerank_args", ")", "\n", "best_lenpen", ",", "best_weight1", ",", "best_weight2", ",", "best_weight3", ",", "best_score", "=", "rerank", ".", "rerank", "(", "rerank_args", ")", "\n", "rerank_args", "=", "vars", "(", "args", ")", ".", "copy", "(", ")", "\n", "rerank_args", "[", "'lenpen'", "]", "=", "[", "best_lenpen", "]", "\n", "rerank_args", "[", "'weight1'", "]", "=", "[", "best_weight1", "]", "\n", "rerank_args", "[", "'weight2'", "]", "=", "[", "best_weight2", "]", "\n", "rerank_args", "[", "'weight3'", "]", "=", "[", "best_weight3", "]", "\n", "\n", "# write the hypothesis from the valid set from the best trial", "\n", "\n", "if", "args", ".", "gen_subset", "!=", "\"valid\"", ":", "\n", "        ", "rerank_args", "[", "'gen_subset'", "]", "=", "\"valid\"", "\n", "rerank_args", "=", "argparse", ".", "Namespace", "(", "**", "rerank_args", ")", "\n", "rerank", ".", "rerank", "(", "rerank_args", ")", "\n", "\n", "# test with the best hyperparameters on gen subset", "\n", "", "rerank_args", "=", "vars", "(", "args", ")", ".", "copy", "(", ")", "\n", "rerank_args", "[", "'gen_subset'", "]", "=", "args", ".", "gen_subset", "\n", "rerank_args", "[", "'lenpen'", "]", "=", "[", "best_lenpen", "]", "\n", "rerank_args", "[", "'weight1'", "]", "=", "[", "best_weight1", "]", "\n", "rerank_args", "[", "'weight2'", "]", "=", "[", "best_weight2", "]", "\n", "rerank_args", "[", "'weight3'", "]", "=", "[", "best_weight3", "]", "\n", "rerank_args", "=", "argparse", ".", "Namespace", "(", "**", "rerank_args", ")", "\n", "rerank", ".", "rerank", "(", "rerank_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_tune.cli_main": [[85, 90], ["rerank_options.get_tuning_parser", "fairseq.options.parse_args_and_arch", "rerank_tune.random_search"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_options.get_tuning_parser", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.parse_args_and_arch", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_tune.random_search"], ["", "def", "cli_main", "(", ")", ":", "\n", "    ", "parser", "=", "rerank_options", ".", "get_tuning_parser", "(", ")", "\n", "args", "=", "options", ".", "parse_args_and_arch", "(", "parser", ")", "\n", "\n", "random_search", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.BitextOutput.__init__": [[289, 360], ["rerank_utils.reprocess", "rerank_utils.get_score_from_pos", "hypo.keys", "source.keys", "len", "len", "rerank_utils.remove_bpe", "rerank_utils.remove_bpe", "rerank_utils.remove_bpe", "float", "len", "len", "[].split", "hypo[].split", "[].split", "source[].split", "rerank_utils.remove_bpe", "rerank_utils.remove_bpe", "rerank_utils.remove_bpe", "float", "rerank_utils.remove_bpe", "rerank_utils.remove_bpe", "rerank_utils.remove_bpe", "float", "rerank_utils.make_right_to_left", "rerank_utils.make_right_to_left", "rerank_utils.make_right_to_left", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.reprocess", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.get_score_from_pos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.remove_bpe", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.remove_bpe", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.remove_bpe", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.remove_bpe", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.remove_bpe", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.remove_bpe", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.remove_bpe", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.remove_bpe", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.remove_bpe", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.make_right_to_left", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.make_right_to_left", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.make_right_to_left"], ["    ", "def", "__init__", "(", "self", ",", "output_file", ",", "backwards", ",", "right_to_left", ",", "bpe_symbol", ",", "\n", "prefix_len", "=", "None", ",", "target_prefix_frac", "=", "None", ",", "source_prefix_frac", "=", "None", ")", ":", "\n", "        ", "\"\"\"process output from rescoring\"\"\"", "\n", "source", ",", "hypo", ",", "score", ",", "target", ",", "pos_score", "=", "reprocess", "(", "output_file", ")", "\n", "if", "backwards", ":", "\n", "            ", "self", ".", "hypo_fracs", "=", "source_prefix_frac", "\n", "", "else", ":", "\n", "            ", "self", ".", "hypo_fracs", "=", "target_prefix_frac", "\n", "\n", "# remove length penalty so we can use raw scores", "\n", "", "score", ",", "num_bpe_tokens", "=", "get_score_from_pos", "(", "pos_score", ",", "prefix_len", ",", "hypo", ",", "bpe_symbol", ",", "self", ".", "hypo_fracs", ",", "backwards", ")", "\n", "source_lengths", "=", "{", "}", "\n", "target_lengths", "=", "{", "}", "\n", "\n", "assert", "hypo", ".", "keys", "(", ")", "==", "source", ".", "keys", "(", ")", ",", "\"key mismatch\"", "\n", "if", "backwards", ":", "\n", "            ", "tmp", "=", "hypo", "\n", "hypo", "=", "source", "\n", "source", "=", "tmp", "\n", "", "for", "i", "in", "source", ":", "\n", "# since we are reranking, there should only be one hypo per source sentence", "\n", "            ", "if", "backwards", ":", "\n", "                ", "len_src", "=", "len", "(", "source", "[", "i", "]", "[", "0", "]", ".", "split", "(", ")", ")", "\n", "# record length without <eos>", "\n", "if", "len_src", "==", "num_bpe_tokens", "[", "i", "]", "[", "0", "]", "-", "1", ":", "\n", "                    ", "source_lengths", "[", "i", "]", "=", "num_bpe_tokens", "[", "i", "]", "[", "0", "]", "-", "1", "\n", "", "else", ":", "\n", "                    ", "source_lengths", "[", "i", "]", "=", "num_bpe_tokens", "[", "i", "]", "[", "0", "]", "\n", "\n", "", "target_lengths", "[", "i", "]", "=", "len", "(", "hypo", "[", "i", "]", ".", "split", "(", ")", ")", "\n", "\n", "source", "[", "i", "]", "=", "remove_bpe", "(", "source", "[", "i", "]", "[", "0", "]", ",", "bpe_symbol", ")", "\n", "target", "[", "i", "]", "=", "remove_bpe", "(", "target", "[", "i", "]", ",", "bpe_symbol", ")", "\n", "hypo", "[", "i", "]", "=", "remove_bpe", "(", "hypo", "[", "i", "]", ",", "bpe_symbol", ")", "\n", "\n", "score", "[", "i", "]", "=", "float", "(", "score", "[", "i", "]", "[", "0", "]", ")", "\n", "pos_score", "[", "i", "]", "=", "pos_score", "[", "i", "]", "[", "0", "]", "\n", "\n", "", "else", ":", "\n", "                ", "len_tgt", "=", "len", "(", "hypo", "[", "i", "]", "[", "0", "]", ".", "split", "(", ")", ")", "\n", "# record length without <eos>", "\n", "if", "len_tgt", "==", "num_bpe_tokens", "[", "i", "]", "[", "0", "]", "-", "1", ":", "\n", "                    ", "target_lengths", "[", "i", "]", "=", "num_bpe_tokens", "[", "i", "]", "[", "0", "]", "-", "1", "\n", "", "else", ":", "\n", "                    ", "target_lengths", "[", "i", "]", "=", "num_bpe_tokens", "[", "i", "]", "[", "0", "]", "\n", "\n", "", "source_lengths", "[", "i", "]", "=", "len", "(", "source", "[", "i", "]", ".", "split", "(", ")", ")", "\n", "\n", "if", "right_to_left", ":", "\n", "                    ", "source", "[", "i", "]", "=", "remove_bpe", "(", "make_right_to_left", "(", "source", "[", "i", "]", ")", ",", "bpe_symbol", ")", "\n", "target", "[", "i", "]", "=", "remove_bpe", "(", "make_right_to_left", "(", "target", "[", "i", "]", ")", ",", "bpe_symbol", ")", "\n", "hypo", "[", "i", "]", "=", "remove_bpe", "(", "make_right_to_left", "(", "hypo", "[", "i", "]", "[", "0", "]", ")", ",", "bpe_symbol", ")", "\n", "score", "[", "i", "]", "=", "float", "(", "score", "[", "i", "]", "[", "0", "]", ")", "\n", "pos_score", "[", "i", "]", "=", "pos_score", "[", "i", "]", "[", "0", "]", "\n", "", "else", ":", "\n", "                    ", "assert", "len", "(", "hypo", "[", "i", "]", ")", "==", "1", ",", "\"expected only one hypothesis per source sentence\"", "\n", "source", "[", "i", "]", "=", "remove_bpe", "(", "source", "[", "i", "]", ",", "bpe_symbol", ")", "\n", "target", "[", "i", "]", "=", "remove_bpe", "(", "target", "[", "i", "]", ",", "bpe_symbol", ")", "\n", "hypo", "[", "i", "]", "=", "remove_bpe", "(", "hypo", "[", "i", "]", "[", "0", "]", ",", "bpe_symbol", ")", "\n", "score", "[", "i", "]", "=", "float", "(", "score", "[", "i", "]", "[", "0", "]", ")", "\n", "pos_score", "[", "i", "]", "=", "pos_score", "[", "i", "]", "[", "0", "]", "\n", "\n", "", "", "", "self", ".", "rescore_source", "=", "source", "\n", "self", ".", "rescore_hypo", "=", "hypo", "\n", "self", ".", "rescore_score", "=", "score", "\n", "self", ".", "rescore_target", "=", "target", "\n", "self", ".", "rescore_pos_score", "=", "pos_score", "\n", "self", ".", "backwards", "=", "backwards", "\n", "self", ".", "right_to_left", "=", "right_to_left", "\n", "self", ".", "target_lengths", "=", "target_lengths", "\n", "self", ".", "source_lengths", "=", "source_lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.BitextOutputFromGen.__init__": [[363, 415], ["rerank_utils.get_score_from_pos", "rerank_utils.remove_bpe_dict", "rerank_utils.remove_bpe_dict", "rerank_utils.remove_bpe_dict", "sorted", "rerank_utils.reprocess_nbest", "rerank_utils.reprocess", "len", "len", "len", "len", "len", "len", "len", "len", "pred_source.copy", "pred_hypo.copy", "pred_target.copy", "pred_source.keys", "range", "len", "len", "len", "float", "len", "[].split", "rerank_utils.BitextOutputFromGen.source[].split"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.get_score_from_pos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.remove_bpe_dict", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.remove_bpe_dict", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.remove_bpe_dict", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.reprocess_nbest", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.reprocess", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.copy", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.copy", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.copy"], ["    ", "def", "__init__", "(", "self", ",", "predictions_bpe_file", ",", "bpe_symbol", "=", "None", ",", "nbest", "=", "False", ",", "prefix_len", "=", "None", ",", "target_prefix_frac", "=", "None", ")", ":", "\n", "        ", "if", "nbest", ":", "\n", "            ", "pred_source", ",", "pred_hypo", ",", "pred_score", ",", "pred_target", ",", "pred_pos_score", "=", "reprocess_nbest", "(", "predictions_bpe_file", ")", "\n", "", "else", ":", "\n", "            ", "pred_source", ",", "pred_hypo", ",", "pred_score", ",", "pred_target", ",", "pred_pos_score", "=", "reprocess", "(", "predictions_bpe_file", ")", "\n", "\n", "", "assert", "len", "(", "pred_source", ")", "==", "len", "(", "pred_hypo", ")", "\n", "assert", "len", "(", "pred_source", ")", "==", "len", "(", "pred_score", ")", "\n", "assert", "len", "(", "pred_source", ")", "==", "len", "(", "pred_target", ")", "\n", "assert", "len", "(", "pred_source", ")", "==", "len", "(", "pred_pos_score", ")", "\n", "\n", "# remove length penalty so we can use raw scores", "\n", "pred_score", ",", "num_bpe_tokens", "=", "get_score_from_pos", "(", "pred_pos_score", ",", "prefix_len", ",", "pred_hypo", ",", "\n", "bpe_symbol", ",", "target_prefix_frac", ",", "False", ")", "\n", "\n", "self", ".", "source", "=", "pred_source", "\n", "self", ".", "target", "=", "pred_target", "\n", "self", ".", "score", "=", "pred_score", "\n", "self", ".", "pos_score", "=", "pred_pos_score", "\n", "self", ".", "hypo", "=", "pred_hypo", "\n", "self", ".", "target_lengths", "=", "{", "}", "\n", "self", ".", "source_lengths", "=", "{", "}", "\n", "\n", "self", ".", "no_bpe_source", "=", "remove_bpe_dict", "(", "pred_source", ".", "copy", "(", ")", ",", "bpe_symbol", ")", "\n", "self", ".", "no_bpe_hypo", "=", "remove_bpe_dict", "(", "pred_hypo", ".", "copy", "(", ")", ",", "bpe_symbol", ")", "\n", "self", ".", "no_bpe_target", "=", "remove_bpe_dict", "(", "pred_target", ".", "copy", "(", ")", ",", "bpe_symbol", ")", "\n", "\n", "# indexes to match those from the rescoring models", "\n", "self", ".", "rescore_source", "=", "{", "}", "\n", "self", ".", "rescore_target", "=", "{", "}", "\n", "self", ".", "rescore_pos_score", "=", "{", "}", "\n", "self", ".", "rescore_hypo", "=", "{", "}", "\n", "self", ".", "rescore_score", "=", "{", "}", "\n", "self", ".", "num_hypos", "=", "{", "}", "\n", "self", ".", "backwards", "=", "False", "\n", "self", ".", "right_to_left", "=", "False", "\n", "\n", "index", "=", "0", "\n", "\n", "for", "i", "in", "sorted", "(", "pred_source", ".", "keys", "(", ")", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "len", "(", "pred_hypo", "[", "i", "]", ")", ")", ":", "\n", "\n", "                ", "self", ".", "target_lengths", "[", "index", "]", "=", "len", "(", "self", ".", "hypo", "[", "i", "]", "[", "j", "]", ".", "split", "(", ")", ")", "\n", "self", ".", "source_lengths", "[", "index", "]", "=", "len", "(", "self", ".", "source", "[", "i", "]", ".", "split", "(", ")", ")", "\n", "\n", "self", ".", "rescore_source", "[", "index", "]", "=", "self", ".", "no_bpe_source", "[", "i", "]", "\n", "self", ".", "rescore_target", "[", "index", "]", "=", "self", ".", "no_bpe_target", "[", "i", "]", "\n", "self", ".", "rescore_hypo", "[", "index", "]", "=", "self", ".", "no_bpe_hypo", "[", "i", "]", "[", "j", "]", "\n", "self", ".", "rescore_score", "[", "index", "]", "=", "float", "(", "pred_score", "[", "i", "]", "[", "j", "]", ")", "\n", "self", ".", "rescore_pos_score", "[", "index", "]", "=", "pred_pos_score", "[", "i", "]", "[", "j", "]", "\n", "self", ".", "num_hypos", "[", "index", "]", "=", "len", "(", "pred_hypo", "[", "i", "]", ")", "\n", "index", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.LMOutput.__init__": [[440, 451], ["rerank_utils.parse_lm"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.parse_lm"], ["    ", "def", "__init__", "(", "self", ",", "lm_score_file", ",", "lm_dict", "=", "None", ",", "prefix_len", "=", "None", ",", "bpe_symbol", "=", "None", ",", "target_prefix_frac", "=", "None", ")", ":", "\n", "        ", "lm_sentences", ",", "lm_sen_scores", ",", "lm_sen_pos_scores", ",", "lm_no_bpe_sentences", ",", "lm_bpe_tokens", "=", "parse_lm", "(", "lm_score_file", ",", "prefix_len", "=", "prefix_len", ",", "\n", "bpe_symbol", "=", "bpe_symbol", ",", "target_prefix_frac", "=", "target_prefix_frac", ")", "\n", "\n", "self", ".", "sentences", "=", "lm_sentences", "\n", "self", ".", "score", "=", "lm_sen_scores", "\n", "self", ".", "pos_score", "=", "lm_sen_pos_scores", "\n", "self", ".", "lm_dict", "=", "lm_dict", "\n", "self", ".", "no_bpe_sentences", "=", "lm_no_bpe_sentences", "\n", "self", ".", "bpe_tokens", "=", "lm_bpe_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.reprocess": [[16, 71], ["re.compile", "re.compile", "f.read.split", "open", "f.read", "re.search", "re.search.span", "int", "len", "re.search.group", "re.search.group", "re.search", "re.search.span", "re.search.group", "re.search.group", "hypothesis_dict[].append", "score_dict[].append", "float", "float", "line[].split", "float", "pos_score_dict[].append"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.dataset_reader.DatasetReader.read"], ["def", "reprocess", "(", "fle", ")", ":", "\n", "# takes in a file of generate.py translation generate_output", "\n", "# returns a source dict and hypothesis dict, where keys are the ID num (as a string)", "\n", "# and values and the corresponding source and translation. There may be several translations", "\n", "# per source, so the values for hypothesis_dict are lists.", "\n", "# parses output of generate.py", "\n", "\n", "    ", "with", "open", "(", "fle", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "txt", "=", "f", ".", "read", "(", ")", "\n", "\n", "", "\"\"\"reprocess generate.py output\"\"\"", "\n", "p", "=", "re", ".", "compile", "(", "r\"[STHP][-]\\d+\\s*\"", ")", "\n", "hp", "=", "re", ".", "compile", "(", "r\"(\\s*[-]?\\d+[.]?\\d+\\s*)|(\\s*(-inf)\\s*)\"", ")", "\n", "source_dict", "=", "{", "}", "\n", "hypothesis_dict", "=", "{", "}", "\n", "score_dict", "=", "{", "}", "\n", "target_dict", "=", "{", "}", "\n", "pos_score_dict", "=", "{", "}", "\n", "lines", "=", "txt", ".", "split", "(", "\"\\n\"", ")", "\n", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "line", "+=", "\"\\n\"", "\n", "prefix", "=", "re", ".", "search", "(", "p", ",", "line", ")", "\n", "if", "prefix", "is", "not", "None", ":", "\n", "            ", "assert", "len", "(", "prefix", ".", "group", "(", ")", ")", ">", "2", ",", "\"prefix id not found\"", "\n", "_", ",", "j", "=", "prefix", ".", "span", "(", ")", "\n", "id_num", "=", "prefix", ".", "group", "(", ")", "[", "2", ":", "]", "\n", "id_num", "=", "int", "(", "id_num", ")", "\n", "line_type", "=", "prefix", ".", "group", "(", ")", "[", "0", "]", "\n", "if", "line_type", "==", "\"H\"", ":", "\n", "                ", "h_txt", "=", "line", "[", "j", ":", "]", "\n", "hypo", "=", "re", ".", "search", "(", "hp", ",", "h_txt", ")", "\n", "assert", "hypo", "is", "not", "None", ",", "(", "\"regular expression failed to find the hypothesis scoring\"", ")", "\n", "_", ",", "i", "=", "hypo", ".", "span", "(", ")", "\n", "score", "=", "hypo", ".", "group", "(", ")", "\n", "if", "id_num", "in", "hypothesis_dict", ":", "\n", "                    ", "hypothesis_dict", "[", "id_num", "]", ".", "append", "(", "h_txt", "[", "i", ":", "]", ")", "\n", "score_dict", "[", "id_num", "]", ".", "append", "(", "float", "(", "score", ")", ")", "\n", "", "else", ":", "\n", "                    ", "hypothesis_dict", "[", "id_num", "]", "=", "[", "h_txt", "[", "i", ":", "]", "]", "\n", "score_dict", "[", "id_num", "]", "=", "[", "float", "(", "score", ")", "]", "\n", "\n", "", "", "elif", "line_type", "==", "\"S\"", ":", "\n", "                ", "source_dict", "[", "id_num", "]", "=", "(", "line", "[", "j", ":", "]", ")", "\n", "", "elif", "line_type", "==", "\"T\"", ":", "\n", "                ", "target_dict", "[", "id_num", "]", "=", "(", "line", "[", "j", ":", "]", ")", "\n", "", "elif", "line_type", "==", "\"P\"", ":", "\n", "                ", "pos_scores", "=", "(", "line", "[", "j", ":", "]", ")", ".", "split", "(", ")", "\n", "pos_scores", "=", "[", "float", "(", "x", ")", "for", "x", "in", "pos_scores", "]", "\n", "if", "id_num", "in", "pos_score_dict", ":", "\n", "                    ", "pos_score_dict", "[", "id_num", "]", ".", "append", "(", "pos_scores", ")", "\n", "", "else", ":", "\n", "                    ", "pos_score_dict", "[", "id_num", "]", "=", "[", "pos_scores", "]", "\n", "\n", "", "", "", "", "return", "source_dict", ",", "hypothesis_dict", ",", "score_dict", ",", "target_dict", ",", "pos_score_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.reprocess_nbest": [[73, 120], ["f.read.split", "re.compile", "enumerate", "open", "f.read", "source_dict.keys", "hypothesis_dict.keys", "source_dict.keys", "pos_score_dict.keys", "source_dict.keys", "score_dict.keys", "re.search", "re.search.span", "re.search.group", "score_dict[].append", "hypothesis_dict[].append", "float", "line[].strip", "float", "line[].strip", "float", "pos_score_dict[].append", "line.split"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.dataset_reader.DatasetReader.read"], ["", "def", "reprocess_nbest", "(", "fle", ")", ":", "\n", "    ", "\"\"\"reprocess interactive.py output\"\"\"", "\n", "with", "open", "(", "fle", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "txt", "=", "f", ".", "read", "(", ")", "\n", "\n", "", "source_dict", "=", "{", "}", "\n", "hypothesis_dict", "=", "{", "}", "\n", "score_dict", "=", "{", "}", "\n", "target_dict", "=", "{", "}", "\n", "pos_score_dict", "=", "{", "}", "\n", "lines", "=", "txt", ".", "split", "(", "\"\\n\"", ")", "\n", "\n", "hp", "=", "re", ".", "compile", "(", "r'[-]?\\d+[.]?\\d+'", ")", "\n", "j", "=", "-", "1", "\n", "\n", "for", "_i", ",", "line", "in", "enumerate", "(", "lines", ")", ":", "\n", "        ", "line", "+=", "\"\\n\"", "\n", "line_type", "=", "line", "[", "0", "]", "\n", "\n", "if", "line_type", "==", "\"H\"", ":", "\n", "            ", "hypo", "=", "re", ".", "search", "(", "hp", ",", "line", ")", "\n", "_", ",", "start_index", "=", "hypo", ".", "span", "(", ")", "\n", "score", "=", "hypo", ".", "group", "(", ")", "\n", "if", "j", "in", "score_dict", ":", "\n", "                ", "score_dict", "[", "j", "]", ".", "append", "(", "float", "(", "score", ")", ")", "\n", "hypothesis_dict", "[", "j", "]", ".", "append", "(", "line", "[", "start_index", ":", "]", ".", "strip", "(", "\"\\t\"", ")", ")", "\n", "", "else", ":", "\n", "                ", "score_dict", "[", "j", "]", "=", "[", "float", "(", "score", ")", "]", "\n", "hypothesis_dict", "[", "j", "]", "=", "[", "line", "[", "start_index", ":", "]", ".", "strip", "(", "\"\\t\"", ")", "]", "\n", "", "", "elif", "line_type", "==", "\"O\"", ":", "\n", "            ", "j", "+=", "1", "\n", "source_dict", "[", "j", "]", "=", "line", "[", "2", ":", "]", "\n", "# we don't have the targets for interactive.py", "\n", "target_dict", "[", "j", "]", "=", "\"filler\"", "\n", "\n", "", "elif", "line_type", "==", "\"P\"", ":", "\n", "            ", "pos_scores", "=", "[", "float", "(", "pos_score", ")", "for", "pos_score", "in", "line", ".", "split", "(", ")", "[", "1", ":", "]", "]", "\n", "if", "j", "in", "pos_score_dict", ":", "\n", "                ", "pos_score_dict", "[", "j", "]", ".", "append", "(", "pos_scores", ")", "\n", "", "else", ":", "\n", "                ", "pos_score_dict", "[", "j", "]", "=", "[", "pos_scores", "]", "\n", "\n", "", "", "", "assert", "source_dict", ".", "keys", "(", ")", "==", "hypothesis_dict", ".", "keys", "(", ")", "\n", "assert", "source_dict", ".", "keys", "(", ")", "==", "pos_score_dict", ".", "keys", "(", ")", "\n", "assert", "source_dict", ".", "keys", "(", ")", "==", "score_dict", ".", "keys", "(", ")", "\n", "\n", "return", "source_dict", ",", "hypothesis_dict", ",", "score_dict", ",", "target_dict", ",", "pos_score_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.write_reprocessed": [[122, 175], ["open", "open", "open", "len", "len", "range", "sorted", "len", "range", "sources.keys", "range", "len", "source_file.write", "target_file.write", "len", "hypo_file.write", "NotImplementedError", "hypo_file.write", "source_file.write", "target_file.write", "rerank_utils.make_right_to_left", "rerank_utils.make_right_to_left", "rerank_utils.get_prefix_no_bpe", "rerank_utils.calc_length_from_frac", "hypo_file.write", "source_file.write", "target_file.write", "rerank_utils.make_right_to_left", "rerank_utils.calc_length_from_frac", "hypo_file.write", "source_file.write", "target_file.write", "hypo_file.write", "source_file.write", "target_file.write"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.make_right_to_left", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.make_right_to_left", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.get_prefix_no_bpe", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.calc_length_from_frac", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.make_right_to_left", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.calc_length_from_frac", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write"], ["", "def", "write_reprocessed", "(", "sources", ",", "hypos", ",", "targets", ",", "source_outfile", ",", "\n", "hypo_outfile", ",", "target_outfile", ",", "right_to_left", "=", "False", ",", "\n", "prefix_len", "=", "None", ",", "bpe_symbol", "=", "None", ",", "\n", "target_prefix_frac", "=", "None", ",", "source_prefix_frac", "=", "None", ")", ":", "\n", "\n", "    ", "\"\"\"writes nbest hypothesis for rescoring\"\"\"", "\n", "assert", "not", "(", "prefix_len", "is", "not", "None", "and", "target_prefix_frac", "is", "not", "None", ")", ",", "\"in writing reprocessed, only one type of prefix may be used\"", "\n", "assert", "not", "(", "prefix_len", "is", "not", "None", "and", "source_prefix_frac", "is", "not", "None", ")", ",", "\"in writing reprocessed, only one type of prefix may be used\"", "\n", "assert", "not", "(", "target_prefix_frac", "is", "not", "None", "and", "source_prefix_frac", "is", "not", "None", ")", ",", "\"in writing reprocessed, only one type of prefix may be used\"", "\n", "\n", "with", "open", "(", "source_outfile", ",", "'w'", ")", "as", "source_file", ",", "open", "(", "hypo_outfile", ",", "'w'", ")", "as", "hypo_file", ",", "open", "(", "target_outfile", ",", "'w'", ")", "as", "target_file", ":", "\n", "\n", "        ", "assert", "len", "(", "sources", ")", "==", "len", "(", "hypos", ")", ",", "\"sources and hypos list length mismatch\"", "\n", "if", "right_to_left", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "sources", ")", ")", ":", "\n", "                    ", "for", "j", "in", "range", "(", "len", "(", "hypos", "[", "i", "]", ")", ")", ":", "\n", "                        ", "if", "prefix_len", "is", "None", ":", "\n", "                            ", "hypo_file", ".", "write", "(", "make_right_to_left", "(", "hypos", "[", "i", "]", "[", "j", "]", ")", "+", "\"\\n\"", ")", "\n", "", "else", ":", "\n", "                            ", "raise", "NotImplementedError", "(", ")", "\n", "", "source_file", ".", "write", "(", "make_right_to_left", "(", "sources", "[", "i", "]", ")", "+", "\"\\n\"", ")", "\n", "target_file", ".", "write", "(", "make_right_to_left", "(", "targets", "[", "i", "]", ")", "+", "\"\\n\"", ")", "\n", "", "", "", "else", ":", "\n", "            ", "for", "i", "in", "sorted", "(", "sources", ".", "keys", "(", ")", ")", ":", "\n", "                    ", "for", "j", "in", "range", "(", "len", "(", "hypos", "[", "i", "]", ")", ")", ":", "\n", "                        ", "if", "prefix_len", "is", "not", "None", ":", "\n", "                            ", "shortened", "=", "get_prefix_no_bpe", "(", "hypos", "[", "i", "]", "[", "j", "]", ",", "bpe_symbol", ",", "prefix_len", ")", "+", "\"\\n\"", "\n", "hypo_file", ".", "write", "(", "shortened", ")", "\n", "source_file", ".", "write", "(", "sources", "[", "i", "]", ")", "\n", "target_file", ".", "write", "(", "targets", "[", "i", "]", ")", "\n", "", "elif", "target_prefix_frac", "is", "not", "None", ":", "\n", "                            ", "num_words", ",", "shortened", ",", "num_bpe_tokens", "=", "calc_length_from_frac", "(", "hypos", "[", "i", "]", "[", "j", "]", ",", "target_prefix_frac", ",", "bpe_symbol", ")", "\n", "shortened", "+=", "\"\\n\"", "\n", "hypo_file", ".", "write", "(", "shortened", ")", "\n", "source_file", ".", "write", "(", "sources", "[", "i", "]", ")", "\n", "target_file", ".", "write", "(", "targets", "[", "i", "]", ")", "\n", "", "elif", "source_prefix_frac", "is", "not", "None", ":", "\n", "                            ", "num_words", ",", "shortened", ",", "num_bpe_tokensn", "=", "calc_length_from_frac", "(", "sources", "[", "i", "]", ",", "source_prefix_frac", ",", "bpe_symbol", ")", "\n", "shortened", "+=", "\"\\n\"", "\n", "hypo_file", ".", "write", "(", "hypos", "[", "i", "]", "[", "j", "]", ")", "\n", "source_file", ".", "write", "(", "shortened", ")", "\n", "target_file", ".", "write", "(", "targets", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                            ", "hypo_file", ".", "write", "(", "hypos", "[", "i", "]", "[", "j", "]", ")", "\n", "source_file", ".", "write", "(", "sources", "[", "i", "]", ")", "\n", "target_file", ".", "write", "(", "targets", "[", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.calc_length_from_frac": [[177, 186], ["rerank_utils.remove_bpe", "len", "math.ceil", "rerank_utils.get_prefix_no_bpe", "len", "remove_bpe.split", "get_prefix_no_bpe.split"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.remove_bpe", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.get_prefix_no_bpe"], ["", "", "", "", "", "", "def", "calc_length_from_frac", "(", "bpe_sentence", ",", "prefix_frac", ",", "bpe_symbol", ")", ":", "\n", "# return number of words, (not bpe tokens) that we want", "\n", "    ", "no_bpe_sen", "=", "remove_bpe", "(", "bpe_sentence", ",", "bpe_symbol", ")", "\n", "len_sen", "=", "len", "(", "no_bpe_sen", ".", "split", "(", ")", ")", "\n", "\n", "num_words", "=", "math", ".", "ceil", "(", "len_sen", "*", "prefix_frac", ")", "\n", "prefix", "=", "get_prefix_no_bpe", "(", "bpe_sentence", ",", "bpe_symbol", ",", "num_words", ")", "\n", "num_bpe_tokens", "=", "len", "(", "prefix", ".", "split", "(", ")", ")", "\n", "return", "num_words", ",", "prefix", ",", "num_bpe_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.get_prefix": [[188, 195], ["sentence.strip().split", "len", "sentence.strip", "sentence.strip"], "function", ["None"], ["", "def", "get_prefix", "(", "sentence", ",", "prefix_len", ")", ":", "\n", "    ", "\"\"\"assuming no bpe, gets the prefix of the sentence with prefix_len words\"\"\"", "\n", "tokens", "=", "sentence", ".", "strip", "(", "\"\\n\"", ")", ".", "split", "(", ")", "\n", "if", "prefix_len", ">=", "len", "(", "tokens", ")", ":", "\n", "        ", "return", "sentence", ".", "strip", "(", "\"\\n\"", ")", "\n", "", "else", ":", "\n", "        ", "return", "\" \"", ".", "join", "(", "tokens", "[", ":", "prefix_len", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.get_prefix_no_bpe": [[197, 202], ["rerank_utils.get_prefix", "rerank_utils.get_prefix_from_len", "sentence.split"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.get_prefix", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.get_prefix_from_len"], ["", "", "def", "get_prefix_no_bpe", "(", "sentence", ",", "bpe_symbol", ",", "prefix_len", ")", ":", "\n", "    ", "if", "bpe_symbol", "is", "None", ":", "\n", "        ", "return", "get_prefix", "(", "sentence", ",", "prefix_len", ")", "\n", "", "else", ":", "\n", "        ", "return", "\" \"", ".", "join", "(", "get_prefix_from_len", "(", "sentence", ".", "split", "(", ")", ",", "bpe_symbol", ",", "prefix_len", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.get_prefix_from_len": [[204, 211], ["sum", "rerank_utils.get_prefix_from_len", "bpe_symbol.strip"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.get_prefix_from_len"], ["", "", "def", "get_prefix_from_len", "(", "sentence", ",", "bpe_symbol", ",", "prefix_len", ")", ":", "\n", "    ", "\"\"\"get the prefix of sentence with bpe, with prefix len in terms of words, not bpe tokens\"\"\"", "\n", "bpe_count", "=", "sum", "(", "[", "bpe_symbol", ".", "strip", "(", "\" \"", ")", "in", "t", "for", "t", "in", "sentence", "[", ":", "prefix_len", "]", "]", ")", "\n", "if", "bpe_count", "==", "0", ":", "\n", "        ", "return", "sentence", "[", ":", "prefix_len", "]", "\n", "", "else", ":", "\n", "        ", "return", "sentence", "[", ":", "prefix_len", "]", "+", "get_prefix_from_len", "(", "sentence", "[", "prefix_len", ":", "]", ",", "bpe_symbol", ",", "bpe_count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.get_num_bpe_tokens_from_len": [[213, 218], ["rerank_utils.get_prefix_no_bpe", "len", "len", "get_prefix_no_bpe.split", "remove_bpe().split", "rerank_utils.remove_bpe"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.get_prefix_no_bpe", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.remove_bpe"], ["", "", "def", "get_num_bpe_tokens_from_len", "(", "sentence", ",", "bpe_symbol", ",", "prefix_len", ")", ":", "\n", "    ", "\"\"\"given a prefix length in terms of words, return the number of bpe tokens\"\"\"", "\n", "prefix", "=", "get_prefix_no_bpe", "(", "sentence", ",", "bpe_symbol", ",", "prefix_len", ")", "\n", "assert", "len", "(", "remove_bpe", "(", "prefix", ",", "bpe_symbol", ")", ".", "split", "(", ")", ")", "<=", "prefix_len", "\n", "return", "len", "(", "prefix", ".", "split", "(", "\" \"", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.make_right_to_left": [[220, 225], ["line.split", "line.split.reverse"], "function", ["None"], ["", "def", "make_right_to_left", "(", "line", ")", ":", "\n", "    ", "tokens", "=", "line", ".", "split", "(", ")", "\n", "tokens", ".", "reverse", "(", ")", "\n", "new_line", "=", "\" \"", ".", "join", "(", "tokens", ")", "\n", "return", "new_line", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.remove_bpe": [[227, 231], ["line.replace.replace"], "function", ["None"], ["", "def", "remove_bpe", "(", "line", ",", "bpe_symbol", ")", ":", "\n", "    ", "line", "=", "line", ".", "replace", "(", "\"\\n\"", ",", "''", ")", "\n", "line", "=", "(", "line", "+", "' '", ")", ".", "replace", "(", "bpe_symbol", ",", "''", ")", ".", "rstrip", "(", ")", "\n", "return", "line", "+", "(", "\"\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.remove_bpe_dict": [[233, 242], ["type", "rerank_utils.remove_bpe", "rerank_utils.remove_bpe"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.remove_bpe", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.remove_bpe"], ["", "def", "remove_bpe_dict", "(", "pred_dict", ",", "bpe_symbol", ")", ":", "\n", "    ", "new_dict", "=", "{", "}", "\n", "for", "i", "in", "pred_dict", ":", "\n", "        ", "if", "type", "(", "pred_dict", "[", "i", "]", ")", "==", "list", ":", "\n", "            ", "new_list", "=", "[", "remove_bpe", "(", "elem", ",", "bpe_symbol", ")", "for", "elem", "in", "pred_dict", "[", "i", "]", "]", "\n", "new_dict", "[", "i", "]", "=", "new_list", "\n", "", "else", ":", "\n", "            ", "new_dict", "[", "i", "]", "=", "remove_bpe", "(", "pred_dict", "[", "i", "]", ",", "bpe_symbol", ")", "\n", "", "", "return", "new_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.parse_bleu_scoring": [[244, 249], ["re.compile", "re.search", "float", "re.search.group"], "function", ["None"], ["", "def", "parse_bleu_scoring", "(", "line", ")", ":", "\n", "    ", "p", "=", "re", ".", "compile", "(", "r'(BLEU4 = )\\d+[.]\\d+'", ")", "\n", "res", "=", "re", ".", "search", "(", "p", ",", "line", ")", "\n", "assert", "res", "is", "not", "None", ",", "line", "\n", "return", "float", "(", "res", ".", "group", "(", ")", "[", "8", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.get_full_from_prefix": [[251, 260], ["Exception", "hypo_prefix.strip.strip", "len"], "function", ["None"], ["", "def", "get_full_from_prefix", "(", "hypo_prefix", ",", "hypos", ")", ":", "\n", "    ", "\"\"\"given a hypo prefix, recover the first hypo from the list of complete hypos beginning with that prefix\"\"\"", "\n", "for", "hypo", "in", "hypos", ":", "\n", "        ", "hypo_prefix", "=", "hypo_prefix", ".", "strip", "(", "\"\\n\"", ")", "\n", "len_prefix", "=", "len", "(", "hypo_prefix", ")", "\n", "if", "hypo", "[", ":", "len_prefix", "]", "==", "hypo_prefix", ":", "\n", "            ", "return", "hypo", "\n", "# no match found", "\n", "", "", "raise", "Exception", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.get_score": [[262, 286], ["float"], "function", ["None"], ["", "def", "get_score", "(", "a", ",", "b", ",", "c", ",", "target_len", ",", "bitext_score1", ",", "bitext_score2", "=", "None", ",", "lm_score", "=", "None", ",", "\n", "lenpen", "=", "None", ",", "src_len", "=", "None", ",", "tgt_len", "=", "None", ",", "bitext1_backwards", "=", "False", ",", "\n", "bitext2_backwards", "=", "False", ",", "normalize", "=", "False", ")", ":", "\n", "    ", "if", "bitext1_backwards", ":", "\n", "        ", "bitext1_norm", "=", "src_len", "\n", "", "else", ":", "\n", "        ", "bitext1_norm", "=", "tgt_len", "\n", "", "if", "bitext_score2", "is", "not", "None", ":", "\n", "        ", "if", "bitext2_backwards", ":", "\n", "            ", "bitext2_norm", "=", "src_len", "\n", "", "else", ":", "\n", "            ", "bitext2_norm", "=", "tgt_len", "\n", "", "", "else", ":", "\n", "        ", "bitext2_norm", "=", "1", "\n", "bitext_score2", "=", "0", "\n", "", "if", "normalize", ":", "\n", "        ", "score", "=", "a", "*", "bitext_score1", "/", "bitext1_norm", "+", "b", "*", "bitext_score2", "/", "bitext2_norm", "+", "c", "*", "lm_score", "/", "src_len", "\n", "", "else", ":", "\n", "        ", "score", "=", "a", "*", "bitext_score1", "+", "b", "*", "bitext_score2", "+", "c", "*", "lm_score", "\n", "\n", "", "if", "lenpen", "is", "not", "None", ":", "\n", "        ", "score", "/=", "(", "target_len", ")", "**", "float", "(", "lenpen", ")", "\n", "\n", "", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.get_score_from_pos": [[417, 437], ["range", "len", "rerank_utils.get_num_bpe_tokens_from_len", "score_dict[].append", "num_bpe_tokens_dict[].append", "sum", "rerank_utils.calc_length_from_frac", "score_dict[].append", "num_bpe_tokens_dict[].append", "score_dict[].append", "num_bpe_tokens_dict[].append", "sum", "sum", "len"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.get_num_bpe_tokens_from_len", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.calc_length_from_frac"], ["", "", "", "", "def", "get_score_from_pos", "(", "pos_score_dict", ",", "prefix_len", ",", "hypo_dict", ",", "bpe_symbol", ",", "hypo_frac", ",", "backwards", ")", ":", "\n", "    ", "score_dict", "=", "{", "}", "\n", "num_bpe_tokens_dict", "=", "{", "}", "\n", "assert", "prefix_len", "is", "None", "or", "hypo_frac", "is", "None", "\n", "for", "key", "in", "pos_score_dict", ":", "\n", "        ", "score_dict", "[", "key", "]", "=", "[", "]", "\n", "num_bpe_tokens_dict", "[", "key", "]", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "pos_score_dict", "[", "key", "]", ")", ")", ":", "\n", "            ", "if", "prefix_len", "is", "not", "None", "and", "not", "backwards", ":", "\n", "                ", "num_bpe_tokens", "=", "get_num_bpe_tokens_from_len", "(", "hypo_dict", "[", "key", "]", "[", "i", "]", ",", "bpe_symbol", ",", "prefix_len", ")", "\n", "score_dict", "[", "key", "]", ".", "append", "(", "sum", "(", "pos_score_dict", "[", "key", "]", "[", "i", "]", "[", ":", "num_bpe_tokens", "]", ")", ")", "\n", "num_bpe_tokens_dict", "[", "key", "]", ".", "append", "(", "num_bpe_tokens", ")", "\n", "", "elif", "hypo_frac", "is", "not", "None", ":", "\n", "                ", "num_words", ",", "shortened", ",", "hypo_prefix_len", "=", "calc_length_from_frac", "(", "hypo_dict", "[", "key", "]", "[", "i", "]", ",", "hypo_frac", ",", "bpe_symbol", ")", "\n", "score_dict", "[", "key", "]", ".", "append", "(", "sum", "(", "pos_score_dict", "[", "key", "]", "[", "i", "]", "[", ":", "hypo_prefix_len", "]", ")", ")", "\n", "num_bpe_tokens_dict", "[", "key", "]", ".", "append", "(", "hypo_prefix_len", ")", "\n", "", "else", ":", "\n", "                ", "score_dict", "[", "key", "]", ".", "append", "(", "sum", "(", "pos_score_dict", "[", "key", "]", "[", "i", "]", ")", ")", "\n", "num_bpe_tokens_dict", "[", "key", "]", ".", "append", "(", "len", "(", "pos_score_dict", "[", "key", "]", "[", "i", "]", ")", ")", "\n", "", "", "", "return", "score_dict", ",", "num_bpe_tokens_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.parse_lm": [[453, 493], ["open", "f.readlines", "enumerate", "line.split", "tokens[].isdigit", "int", "float", "rerank_utils.remove_bpe", "rerank_utils.get_num_bpe_tokens_from_len", "sum", "rerank_utils.calc_length_from_frac", "sum", "sum", "len"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.remove_bpe", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.get_num_bpe_tokens_from_len", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.calc_length_from_frac"], ["", "", "def", "parse_lm", "(", "input_file", ",", "prefix_len", "=", "None", ",", "bpe_symbol", "=", "None", ",", "target_prefix_frac", "=", "None", ")", ":", "\n", "    ", "\"\"\"parse output of eval_lm\"\"\"", "\n", "with", "open", "(", "input_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "text", "=", "f", ".", "readlines", "(", ")", "\n", "text", "=", "text", "[", "7", ":", "]", "\n", "cleaned_text", "=", "text", "[", ":", "-", "2", "]", "\n", "\n", "sentences", "=", "{", "}", "\n", "sen_scores", "=", "{", "}", "\n", "sen_pos_scores", "=", "{", "}", "\n", "no_bpe_sentences", "=", "{", "}", "\n", "num_bpe_tokens_dict", "=", "{", "}", "\n", "for", "_i", ",", "line", "in", "enumerate", "(", "cleaned_text", ")", ":", "\n", "            ", "tokens", "=", "line", ".", "split", "(", ")", "\n", "if", "tokens", "[", "0", "]", ".", "isdigit", "(", ")", ":", "\n", "                ", "line_id", "=", "int", "(", "tokens", "[", "0", "]", ")", "\n", "scores", "=", "[", "float", "(", "x", "[", "1", ":", "-", "1", "]", ")", "for", "x", "in", "tokens", "[", "2", ":", ":", "2", "]", "]", "\n", "sentences", "[", "line_id", "]", "=", "\" \"", ".", "join", "(", "tokens", "[", "1", ":", ":", "2", "]", "[", ":", "-", "1", "]", ")", "+", "\"\\n\"", "\n", "if", "bpe_symbol", "is", "not", "None", ":", "\n", "# exclude <eos> symbol to match output from generate.py", "\n", "                    ", "bpe_sen", "=", "\" \"", ".", "join", "(", "tokens", "[", "1", ":", ":", "2", "]", "[", ":", "-", "1", "]", ")", "+", "\"\\n\"", "\n", "no_bpe_sen", "=", "remove_bpe", "(", "bpe_sen", ",", "bpe_symbol", ")", "\n", "no_bpe_sentences", "[", "line_id", "]", "=", "no_bpe_sen", "\n", "\n", "", "if", "prefix_len", "is", "not", "None", ":", "\n", "                    ", "num_bpe_tokens", "=", "get_num_bpe_tokens_from_len", "(", "bpe_sen", ",", "bpe_symbol", ",", "prefix_len", ")", "\n", "sen_scores", "[", "line_id", "]", "=", "sum", "(", "scores", "[", ":", "num_bpe_tokens", "]", ")", "\n", "num_bpe_tokens_dict", "[", "line_id", "]", "=", "num_bpe_tokens", "\n", "", "elif", "target_prefix_frac", "is", "not", "None", ":", "\n", "                    ", "num_words", ",", "shortened", ",", "target_prefix_len", "=", "calc_length_from_frac", "(", "bpe_sen", ",", "target_prefix_frac", ",", "\n", "bpe_symbol", ")", "\n", "sen_scores", "[", "line_id", "]", "=", "sum", "(", "scores", "[", ":", "target_prefix_len", "]", ")", "\n", "num_bpe_tokens_dict", "[", "line_id", "]", "=", "target_prefix_len", "\n", "", "else", ":", "\n", "                    ", "sen_scores", "[", "line_id", "]", "=", "sum", "(", "scores", ")", "\n", "num_bpe_tokens_dict", "[", "line_id", "]", "=", "len", "(", "scores", ")", "\n", "\n", "", "sen_pos_scores", "[", "line_id", "]", "=", "scores", "\n", "\n", "", "", "", "return", "sentences", ",", "sen_scores", ",", "sen_pos_scores", ",", "no_bpe_sentences", ",", "num_bpe_tokens_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.get_directories": [[495, 528], ["str", "str", "str", "str", "str", "os.path.join", "os.path.dirname", "str"], "function", ["None"], ["", "def", "get_directories", "(", "data_dir_name", ",", "num_rescore", ",", "gen_subset", ",", "\n", "fw_name", ",", "shard_id", ",", "num_shards", ",", "\n", "sampling", "=", "False", ",", "prefix_len", "=", "None", ",", "\n", "target_prefix_frac", "=", "None", ",", "source_prefix_frac", "=", "None", ")", ":", "\n", "    ", "nbest_file_id", "=", "\"nbest_\"", "+", "str", "(", "num_rescore", ")", "+", "\"_subset_\"", "+", "gen_subset", "+", "\"_fw_name_\"", "+", "fw_name", "+", "\"_shard_\"", "+", "str", "(", "shard_id", ")", "+", "\"_of_\"", "+", "str", "(", "num_shards", ")", "\n", "\n", "if", "sampling", ":", "\n", "        ", "nbest_file_id", "+=", "\"_sampling\"", "\n", "\n", "# the directory containing all information for this nbest list", "\n", "", "pre_gen", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ")", "+", "\"/rerank_data/\"", "+", "data_dir_name", "+", "\"/\"", "+", "nbest_file_id", "\n", "# the directory to store the preprocessed nbest list, for left to right rescoring", "\n", "left_to_right_preprocessed_dir", "=", "pre_gen", "+", "\"/left_to_right_preprocessed\"", "\n", "if", "source_prefix_frac", "is", "not", "None", ":", "\n", "        ", "left_to_right_preprocessed_dir", "=", "left_to_right_preprocessed_dir", "+", "\"/prefix_frac\"", "+", "str", "(", "source_prefix_frac", ")", "\n", "# the directory to store the preprocessed nbest list, for right to left rescoring", "\n", "", "right_to_left_preprocessed_dir", "=", "pre_gen", "+", "\"/right_to_left_preprocessed\"", "\n", "# the directory to store the preprocessed nbest list, for backwards rescoring", "\n", "backwards_preprocessed_dir", "=", "pre_gen", "+", "\"/backwards\"", "\n", "if", "target_prefix_frac", "is", "not", "None", ":", "\n", "        ", "backwards_preprocessed_dir", "=", "backwards_preprocessed_dir", "+", "\"/prefix_frac\"", "+", "str", "(", "target_prefix_frac", ")", "\n", "", "elif", "prefix_len", "is", "not", "None", ":", "\n", "        ", "backwards_preprocessed_dir", "=", "backwards_preprocessed_dir", "+", "\"/prefix_\"", "+", "str", "(", "prefix_len", ")", "\n", "\n", "# the directory to store the preprocessed nbest list, for rescoring with P(T)", "\n", "", "lm_preprocessed_dir", "=", "pre_gen", "+", "\"/lm_preprocessed\"", "\n", "\n", "return", "pre_gen", ",", "left_to_right_preprocessed_dir", ",", "right_to_left_preprocessed_dir", ",", "backwards_preprocessed_dir", ",", "lm_preprocessed_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.lm_scoring": [[530, 635], ["rerank_utils.write_reprocessed", "fairseq.options.get_preprocessing_parser", "options.get_preprocessing_parser.parse_args", "fairseq_cli.preprocess.main", "fairseq.options.get_eval_lm_parser", "fairseq.options.parse_args_and_arch", "str", "open", "fairseq.options.get_preprocessing_parser", "options.get_preprocessing_parser.parse_args", "fairseq_cli.preprocess.main", "fairseq.options.get_eval_lm_parser", "fairseq.options.parse_args_and_arch", "contextlib.redirect_stdout", "fairseq_cli.eval_lm.main", "str", "open", "rerank_utils.write_reprocessed", "subprocess.call", "fairseq.options.get_preprocessing_parser", "options.get_preprocessing_parser.parse_args", "fairseq_cli.preprocess.main", "fairseq.options.get_eval_lm_parser", "fairseq.options.parse_args_and_arch", "contextlib.redirect_stdout", "fairseq_cli.eval_lm.main", "str", "open", "contextlib.redirect_stdout", "fairseq_cli.eval_lm.main", "os.path.join", "os.path.dirname"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.write_reprocessed", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.get_preprocessing_parser", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.inter_rep.main", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.get_eval_lm_parser", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.parse_args_and_arch", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.get_preprocessing_parser", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.inter_rep.main", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.get_eval_lm_parser", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.parse_args_and_arch", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.inter_rep.main", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.write_reprocessed", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.get_preprocessing_parser", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.inter_rep.main", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.get_eval_lm_parser", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.parse_args_and_arch", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.inter_rep.main", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.inter_rep.main"], ["", "def", "lm_scoring", "(", "preprocess_directory", ",", "bpe_status", ",", "gen_output", ",", "pre_gen", ",", "\n", "cur_lm_dict", ",", "cur_lm_name", ",", "cur_language_model", ",", "cur_lm_bpe_code", ",", "\n", "batch_size", ",", "lm_score_file", ",", "target_lang", ",", "source_lang", ",", "prefix_len", "=", "None", ")", ":", "\n", "    ", "if", "prefix_len", "is", "not", "None", ":", "\n", "        ", "assert", "bpe_status", "==", "\"different\"", ",", "\"bpe status must be different to use prefix len\"", "\n", "", "if", "bpe_status", "==", "\"no bpe\"", ":", "\n", "# run lm on output without bpe", "\n", "        ", "write_reprocessed", "(", "gen_output", ".", "no_bpe_source", ",", "gen_output", ".", "no_bpe_hypo", ",", "\n", "gen_output", ".", "no_bpe_target", ",", "pre_gen", "+", "\"/rescore_data_no_bpe.de\"", ",", "\n", "pre_gen", "+", "\"/rescore_data_no_bpe.en\"", ",", "pre_gen", "+", "\"/reference_file_no_bpe\"", ")", "\n", "\n", "preprocess_lm_param", "=", "[", "\"--only-source\"", ",", "\n", "\"--trainpref\"", ",", "pre_gen", "+", "\"/rescore_data_no_bpe.\"", "+", "target_lang", ",", "\n", "\"--srcdict\"", ",", "cur_lm_dict", ",", "\n", "\"--destdir\"", ",", "preprocess_directory", "]", "\n", "preprocess_parser", "=", "options", ".", "get_preprocessing_parser", "(", ")", "\n", "input_args", "=", "preprocess_parser", ".", "parse_args", "(", "preprocess_lm_param", ")", "\n", "preprocess", ".", "main", "(", "input_args", ")", "\n", "\n", "eval_lm_param", "=", "[", "preprocess_directory", ",", "\n", "\"--path\"", ",", "cur_language_model", ",", "\n", "\"--output-word-probs\"", ",", "\n", "\"--batch-size\"", ",", "str", "(", "batch_size", ")", ",", "\n", "\"--max-tokens\"", ",", "\"1024\"", ",", "\n", "\"--sample-break-mode\"", ",", "\"eos\"", ",", "\n", "\"--gen-subset\"", ",", "\"train\"", "]", "\n", "\n", "eval_lm_parser", "=", "options", ".", "get_eval_lm_parser", "(", ")", "\n", "input_args", "=", "options", ".", "parse_args_and_arch", "(", "eval_lm_parser", ",", "eval_lm_param", ")", "\n", "\n", "with", "open", "(", "lm_score_file", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "with", "redirect_stdout", "(", "f", ")", ":", "\n", "                ", "eval_lm", ".", "main", "(", "input_args", ")", "\n", "\n", "", "", "", "elif", "bpe_status", "==", "\"shared\"", ":", "\n", "            ", "preprocess_lm_param", "=", "[", "\"--only-source\"", ",", "\n", "\"--trainpref\"", ",", "pre_gen", "+", "\"/rescore_data.\"", "+", "target_lang", ",", "\n", "\"--srcdict\"", ",", "cur_lm_dict", ",", "\n", "\"--destdir\"", ",", "preprocess_directory", "]", "\n", "preprocess_parser", "=", "options", ".", "get_preprocessing_parser", "(", ")", "\n", "input_args", "=", "preprocess_parser", ".", "parse_args", "(", "preprocess_lm_param", ")", "\n", "preprocess", ".", "main", "(", "input_args", ")", "\n", "\n", "eval_lm_param", "=", "[", "preprocess_directory", ",", "\n", "\"--path\"", ",", "cur_language_model", ",", "\n", "\"--output-word-probs\"", ",", "\n", "\"--batch-size\"", ",", "str", "(", "batch_size", ")", ",", "\n", "\"--sample-break-mode\"", ",", "\"eos\"", ",", "\n", "\"--gen-subset\"", ",", "\"train\"", "]", "\n", "\n", "eval_lm_parser", "=", "options", ".", "get_eval_lm_parser", "(", ")", "\n", "input_args", "=", "options", ".", "parse_args_and_arch", "(", "eval_lm_parser", ",", "eval_lm_param", ")", "\n", "\n", "with", "open", "(", "lm_score_file", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "with", "redirect_stdout", "(", "f", ")", ":", "\n", "                    ", "eval_lm", ".", "main", "(", "input_args", ")", "\n", "\n", "", "", "", "elif", "bpe_status", "==", "\"different\"", ":", "\n", "        ", "rescore_file", "=", "pre_gen", "+", "\"/rescore_data_no_bpe\"", "\n", "rescore_bpe", "=", "pre_gen", "+", "\"/rescore_data_new_bpe\"", "\n", "\n", "rescore_file", "+=", "\".\"", "\n", "rescore_bpe", "+=", "\".\"", "\n", "\n", "write_reprocessed", "(", "gen_output", ".", "no_bpe_source", ",", "gen_output", ".", "no_bpe_hypo", ",", "\n", "gen_output", ".", "no_bpe_target", ",", "rescore_file", "+", "source_lang", ",", "\n", "rescore_file", "+", "target_lang", ",", "pre_gen", "+", "\"/reference_file_no_bpe\"", ",", "\n", "bpe_symbol", "=", "None", ")", "\n", "\n", "# apply LM bpe to nbest list", "\n", "bpe_src_param", "=", "[", "\"-c\"", ",", "cur_lm_bpe_code", ",", "\n", "\"--input\"", ",", "rescore_file", "+", "target_lang", ",", "\n", "\"--output\"", ",", "rescore_bpe", "+", "target_lang", "]", "\n", "subprocess", ".", "call", "(", "[", "\"python\"", ",", "\n", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "\n", "\"subword-nmt/subword_nmt/apply_bpe.py\"", ")", "]", "+", "bpe_src_param", ",", "\n", "shell", "=", "False", ")", "\n", "# uncomment to use fastbpe instead of subword-nmt bpe", "\n", "# bpe_src_param = [rescore_bpe+target_lang, rescore_file+target_lang, cur_lm_bpe_code]", "\n", "# subprocess.call([\"/private/home/edunov/fastBPE/fast\", \"applybpe\"] + bpe_src_param, shell=False)", "\n", "\n", "preprocess_dir", "=", "preprocess_directory", "\n", "\n", "preprocess_lm_param", "=", "[", "\"--only-source\"", ",", "\n", "\"--trainpref\"", ",", "rescore_bpe", "+", "target_lang", ",", "\n", "\"--srcdict\"", ",", "cur_lm_dict", ",", "\n", "\"--destdir\"", ",", "preprocess_dir", "]", "\n", "preprocess_parser", "=", "options", ".", "get_preprocessing_parser", "(", ")", "\n", "input_args", "=", "preprocess_parser", ".", "parse_args", "(", "preprocess_lm_param", ")", "\n", "preprocess", ".", "main", "(", "input_args", ")", "\n", "\n", "eval_lm_param", "=", "[", "preprocess_dir", ",", "\n", "\"--path\"", ",", "cur_language_model", ",", "\n", "\"--output-word-probs\"", ",", "\n", "\"--batch-size\"", ",", "str", "(", "batch_size", ")", ",", "\n", "\"--max-tokens\"", ",", "\"1024\"", ",", "\n", "\"--sample-break-mode\"", ",", "\"eos\"", ",", "\n", "\"--gen-subset\"", ",", "\"train\"", "]", "\n", "\n", "eval_lm_parser", "=", "options", ".", "get_eval_lm_parser", "(", ")", "\n", "input_args", "=", "options", ".", "parse_args_and_arch", "(", "eval_lm_parser", ",", "eval_lm_param", ")", "\n", "\n", "with", "open", "(", "lm_score_file", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "with", "redirect_stdout", "(", "f", ")", ":", "\n", "                ", "eval_lm", ".", "main", "(", "input_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.rescore_file_name": [[637, 652], ["str", "str", "str"], "function", ["None"], ["", "", "", "", "def", "rescore_file_name", "(", "nbest_dir", ",", "prefix_len", ",", "scorer_name", ",", "lm_file", "=", "False", ",", "\n", "target_prefix_frac", "=", "None", ",", "source_prefix_frac", "=", "None", ",", "backwards", "=", "None", ")", ":", "\n", "    ", "if", "lm_file", ":", "\n", "        ", "score_file", "=", "nbest_dir", "+", "\"/lm_score_translations_model_\"", "+", "scorer_name", "+", "\".txt\"", "\n", "", "else", ":", "\n", "        ", "score_file", "=", "nbest_dir", "+", "\"/\"", "+", "scorer_name", "+", "\"_score_translations.txt\"", "\n", "", "if", "backwards", ":", "\n", "        ", "if", "prefix_len", "is", "not", "None", ":", "\n", "            ", "score_file", "+=", "\"prefix_len\"", "+", "str", "(", "prefix_len", ")", "\n", "", "elif", "target_prefix_frac", "is", "not", "None", ":", "\n", "            ", "score_file", "+=", "\"target_prefix_frac\"", "+", "str", "(", "target_prefix_frac", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "source_prefix_frac", "is", "not", "None", ":", "\n", "            ", "score_file", "+=", "\"source_prefix_frac\"", "+", "str", "(", "source_prefix_frac", ")", "\n", "", "", "return", "score_file", "\n", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_generate.gen_and_reprocess_nbest": [[21, 236], ["rerank_utils.get_directories", "rerank_utils.rescore_file_name", "rerank_utils.BitextOutputFromGen", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "rerank_utils.rescore_file_name", "print", "rerank_utils.write_reprocessed", "subprocess.call", "subprocess.call", "print", "print", "os.path.join", "os.path.isfile", "print", "print", "fairseq.options.get_generation_parser", "fairseq.options.parse_args_and_arch", "print", "rerank_utils.write_reprocessed", "fairseq.options.get_preprocessing_parser", "options.get_preprocessing_parser.parse_args", "fairseq_cli.preprocess.main", "fairseq.options.get_preprocessing_parser", "options.get_preprocessing_parser.parse_args", "fairseq_cli.preprocess.main", "os.path.dirname", "str", "str", "str", "str", "str", "str", "open", "os.path.isfile", "os.path.isfile", "str", "str", "str", "rerank_utils.write_reprocessed", "fairseq.options.get_preprocessing_parser", "options.get_preprocessing_parser.parse_args", "fairseq_cli.preprocess.main", "contextlib.redirect_stdout", "fairseq_cli.generate.main", "os.path.join", "os.path.join", "rerank_utils.write_reprocessed", "rerank_utils.write_reprocessed", "os.path.dirname", "os.path.dirname", "rerank_utils.write_reprocessed"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.get_directories", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.rescore_file_name", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.rescore_file_name", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.write_reprocessed", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.isfile", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.get_generation_parser", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.parse_args_and_arch", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.write_reprocessed", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.get_preprocessing_parser", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.inter_rep.main", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.get_preprocessing_parser", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.inter_rep.main", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.isfile", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.isfile", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.write_reprocessed", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.get_preprocessing_parser", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.inter_rep.main", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.inter_rep.main", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.write_reprocessed", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.write_reprocessed", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_utils.write_reprocessed"], ["def", "gen_and_reprocess_nbest", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "score_dict_dir", "is", "None", ":", "\n", "        ", "args", ".", "score_dict_dir", "=", "args", ".", "data", "\n", "", "if", "args", ".", "prefix_len", "is", "not", "None", ":", "\n", "        ", "assert", "args", ".", "right_to_left1", "is", "False", ",", "\"prefix length not compatible with right to left models\"", "\n", "assert", "args", ".", "right_to_left2", "is", "False", ",", "\"prefix length not compatible with right to left models\"", "\n", "\n", "", "if", "args", ".", "nbest_list", "is", "not", "None", ":", "\n", "        ", "assert", "args", ".", "score_model2", "is", "None", "\n", "\n", "", "if", "args", ".", "backwards1", ":", "\n", "        ", "scorer1_src", "=", "args", ".", "target_lang", "\n", "scorer1_tgt", "=", "args", ".", "source_lang", "\n", "", "else", ":", "\n", "        ", "scorer1_src", "=", "args", ".", "source_lang", "\n", "scorer1_tgt", "=", "args", ".", "target_lang", "\n", "\n", "", "store_data", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ")", "+", "\"/rerank_data/\"", "+", "args", ".", "data_dir_name", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "store_data", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "store_data", ")", "\n", "\n", "", "pre_gen", ",", "left_to_right_preprocessed_dir", ",", "right_to_left_preprocessed_dir", ",", "backwards_preprocessed_dir", ",", "lm_preprocessed_dir", "=", "rerank_utils", ".", "get_directories", "(", "args", ".", "data_dir_name", ",", "args", ".", "num_rescore", ",", "args", ".", "gen_subset", ",", "\n", "args", ".", "gen_model_name", ",", "args", ".", "shard_id", ",", "args", ".", "num_shards", ",", "\n", "args", ".", "sampling", ",", "args", ".", "prefix_len", ",", "args", ".", "target_prefix_frac", ",", "\n", "args", ".", "source_prefix_frac", ")", "\n", "assert", "not", "(", "args", ".", "right_to_left1", "and", "args", ".", "backwards1", ")", ",", "\"backwards right to left not supported\"", "\n", "assert", "not", "(", "args", ".", "right_to_left2", "and", "args", ".", "backwards2", ")", ",", "\"backwards right to left not supported\"", "\n", "assert", "not", "(", "args", ".", "prefix_len", "is", "not", "None", "and", "args", ".", "target_prefix_frac", "is", "not", "None", ")", ",", "\"target prefix frac and target prefix len incompatible\"", "\n", "\n", "# make directory to store generation results", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "pre_gen", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "pre_gen", ")", "\n", "\n", "", "rerank1_is_gen", "=", "args", ".", "gen_model", "==", "args", ".", "score_model1", "and", "args", ".", "source_prefix_frac", "is", "None", "\n", "rerank2_is_gen", "=", "args", ".", "gen_model", "==", "args", ".", "score_model2", "and", "args", ".", "source_prefix_frac", "is", "None", "\n", "\n", "if", "args", ".", "nbest_list", "is", "not", "None", ":", "\n", "        ", "rerank2_is_gen", "=", "True", "\n", "\n", "# make directories to store preprossed nbest list for reranking", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "left_to_right_preprocessed_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "left_to_right_preprocessed_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "right_to_left_preprocessed_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "right_to_left_preprocessed_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "lm_preprocessed_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "lm_preprocessed_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "backwards_preprocessed_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "backwards_preprocessed_dir", ")", "\n", "\n", "", "score1_file", "=", "rerank_utils", ".", "rescore_file_name", "(", "pre_gen", ",", "args", ".", "prefix_len", ",", "args", ".", "model1_name", ",", "\n", "target_prefix_frac", "=", "args", ".", "target_prefix_frac", ",", "\n", "source_prefix_frac", "=", "args", ".", "source_prefix_frac", ",", "\n", "backwards", "=", "args", ".", "backwards1", ")", "\n", "if", "args", ".", "score_model2", "is", "not", "None", ":", "\n", "        ", "score2_file", "=", "rerank_utils", ".", "rescore_file_name", "(", "pre_gen", ",", "args", ".", "prefix_len", ",", "args", ".", "model2_name", ",", "\n", "target_prefix_frac", "=", "args", ".", "target_prefix_frac", ",", "\n", "source_prefix_frac", "=", "args", ".", "source_prefix_frac", ",", "\n", "backwards", "=", "args", ".", "backwards2", ")", "\n", "\n", "", "predictions_bpe_file", "=", "pre_gen", "+", "\"/generate_output_bpe.txt\"", "\n", "\n", "using_nbest", "=", "args", ".", "nbest_list", "is", "not", "None", "\n", "\n", "if", "using_nbest", ":", "\n", "        ", "print", "(", "\"Using predefined n-best list from interactive.py\"", ")", "\n", "predictions_bpe_file", "=", "args", ".", "nbest_list", "\n", "\n", "", "else", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "isfile", "(", "predictions_bpe_file", ")", ":", "\n", "            ", "print", "(", "\"STEP 1: generate predictions using the p(T|S) model with bpe\"", ")", "\n", "print", "(", "args", ".", "data", ")", "\n", "param1", "=", "[", "args", ".", "data", ",", "\n", "\"--path\"", ",", "args", ".", "gen_model", ",", "\n", "\"--shard-id\"", ",", "str", "(", "args", ".", "shard_id", ")", ",", "\n", "\"--num-shards\"", ",", "str", "(", "args", ".", "num_shards", ")", ",", "\n", "\"--nbest\"", ",", "str", "(", "args", ".", "num_rescore", ")", ",", "\n", "\"--batch-size\"", ",", "str", "(", "args", ".", "batch_size", ")", ",", "\n", "\"--beam\"", ",", "str", "(", "args", ".", "num_rescore", ")", ",", "\n", "\"--max-sentences\"", ",", "str", "(", "args", ".", "num_rescore", ")", ",", "\n", "\"--gen-subset\"", ",", "args", ".", "gen_subset", ",", "\n", "\"--source-lang\"", ",", "args", ".", "source_lang", ",", "\n", "\"--target-lang\"", ",", "args", ".", "target_lang", "]", "\n", "if", "args", ".", "sampling", ":", "\n", "                ", "param1", "+=", "[", "\"--sampling\"", "]", "\n", "\n", "", "gen_parser", "=", "options", ".", "get_generation_parser", "(", ")", "\n", "input_args", "=", "options", ".", "parse_args_and_arch", "(", "gen_parser", ",", "param1", ")", "\n", "\n", "print", "(", "input_args", ")", "\n", "with", "open", "(", "predictions_bpe_file", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "with", "redirect_stdout", "(", "f", ")", ":", "\n", "                    ", "generate", ".", "main", "(", "input_args", ")", "\n", "\n", "", "", "", "", "gen_output", "=", "rerank_utils", ".", "BitextOutputFromGen", "(", "predictions_bpe_file", ",", "bpe_symbol", "=", "args", ".", "remove_bpe", ",", "\n", "nbest", "=", "using_nbest", ",", "prefix_len", "=", "args", ".", "prefix_len", ",", "\n", "target_prefix_frac", "=", "args", ".", "target_prefix_frac", ")", "\n", "\n", "if", "args", ".", "diff_bpe", ":", "\n", "        ", "rerank_utils", ".", "write_reprocessed", "(", "gen_output", ".", "no_bpe_source", ",", "gen_output", ".", "no_bpe_hypo", ",", "\n", "gen_output", ".", "no_bpe_target", ",", "pre_gen", "+", "\"/source_gen_bpe.\"", "+", "args", ".", "source_lang", ",", "\n", "pre_gen", "+", "\"/target_gen_bpe.\"", "+", "args", ".", "target_lang", ",", "\n", "pre_gen", "+", "\"/reference_gen_bpe.\"", "+", "args", ".", "target_lang", ")", "\n", "bitext_bpe", "=", "args", ".", "rescore_bpe_code", "\n", "bpe_src_param", "=", "[", "\"-c\"", ",", "bitext_bpe", ",", "\n", "\"--input\"", ",", "pre_gen", "+", "\"/source_gen_bpe.\"", "+", "args", ".", "source_lang", ",", "\n", "\"--output\"", ",", "pre_gen", "+", "\"/rescore_data.\"", "+", "args", ".", "source_lang", "]", "\n", "bpe_tgt_param", "=", "[", "\"-c\"", ",", "bitext_bpe", ",", "\n", "\"--input\"", ",", "pre_gen", "+", "\"/target_gen_bpe.\"", "+", "args", ".", "target_lang", ",", "\n", "\"--output\"", ",", "pre_gen", "+", "\"/rescore_data.\"", "+", "args", ".", "target_lang", "]", "\n", "\n", "subprocess", ".", "call", "(", "[", "\"python\"", ",", "\n", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "\n", "\"subword-nmt/subword_nmt/apply_bpe.py\"", ")", "]", "+", "bpe_src_param", ",", "\n", "shell", "=", "False", ")", "\n", "\n", "subprocess", ".", "call", "(", "[", "\"python\"", ",", "\n", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "dirname", "(", "__file__", ")", ",", "\n", "\"subword-nmt/subword_nmt/apply_bpe.py\"", ")", "]", "+", "bpe_tgt_param", ",", "\n", "shell", "=", "False", ")", "\n", "\n", "", "if", "(", "not", "os", ".", "path", ".", "isfile", "(", "score1_file", ")", "and", "not", "rerank1_is_gen", ")", "or", "(", "args", ".", "score_model2", "is", "not", "None", "and", "not", "os", ".", "path", ".", "isfile", "(", "score2_file", ")", "and", "not", "rerank2_is_gen", ")", ":", "\n", "        ", "print", "(", "\"STEP 2: process the output of generate.py so we have clean text files with the translations\"", ")", "\n", "\n", "rescore_file", "=", "\"/rescore_data\"", "\n", "if", "args", ".", "prefix_len", "is", "not", "None", ":", "\n", "            ", "prefix_len_rescore_file", "=", "rescore_file", "+", "\"prefix\"", "+", "str", "(", "args", ".", "prefix_len", ")", "\n", "", "if", "args", ".", "target_prefix_frac", "is", "not", "None", ":", "\n", "            ", "target_prefix_frac_rescore_file", "=", "rescore_file", "+", "\"target_prefix_frac\"", "+", "str", "(", "args", ".", "target_prefix_frac", ")", "\n", "", "if", "args", ".", "source_prefix_frac", "is", "not", "None", ":", "\n", "            ", "source_prefix_frac_rescore_file", "=", "rescore_file", "+", "\"source_prefix_frac\"", "+", "str", "(", "args", ".", "source_prefix_frac", ")", "\n", "\n", "", "if", "not", "args", ".", "right_to_left1", "or", "not", "args", ".", "right_to_left2", ":", "\n", "            ", "if", "not", "args", ".", "diff_bpe", ":", "\n", "                ", "rerank_utils", ".", "write_reprocessed", "(", "gen_output", ".", "source", ",", "gen_output", ".", "hypo", ",", "gen_output", ".", "target", ",", "\n", "pre_gen", "+", "rescore_file", "+", "\".\"", "+", "args", ".", "source_lang", ",", "\n", "pre_gen", "+", "rescore_file", "+", "\".\"", "+", "args", ".", "target_lang", ",", "\n", "pre_gen", "+", "\"/reference_file\"", ",", "bpe_symbol", "=", "args", ".", "remove_bpe", ")", "\n", "if", "args", ".", "prefix_len", "is", "not", "None", ":", "\n", "                    ", "bw_rescore_file", "=", "prefix_len_rescore_file", "\n", "rerank_utils", ".", "write_reprocessed", "(", "gen_output", ".", "source", ",", "gen_output", ".", "hypo", ",", "gen_output", ".", "target", ",", "\n", "pre_gen", "+", "prefix_len_rescore_file", "+", "\".\"", "+", "args", ".", "source_lang", ",", "\n", "pre_gen", "+", "prefix_len_rescore_file", "+", "\".\"", "+", "args", ".", "target_lang", ",", "\n", "pre_gen", "+", "\"/reference_file\"", ",", "prefix_len", "=", "args", ".", "prefix_len", ",", "\n", "bpe_symbol", "=", "args", ".", "remove_bpe", ")", "\n", "", "elif", "args", ".", "target_prefix_frac", "is", "not", "None", ":", "\n", "                    ", "bw_rescore_file", "=", "target_prefix_frac_rescore_file", "\n", "rerank_utils", ".", "write_reprocessed", "(", "gen_output", ".", "source", ",", "gen_output", ".", "hypo", ",", "gen_output", ".", "target", ",", "\n", "pre_gen", "+", "target_prefix_frac_rescore_file", "+", "\".\"", "+", "args", ".", "source_lang", ",", "\n", "pre_gen", "+", "target_prefix_frac_rescore_file", "+", "\".\"", "+", "args", ".", "target_lang", ",", "\n", "pre_gen", "+", "\"/reference_file\"", ",", "bpe_symbol", "=", "args", ".", "remove_bpe", ",", "\n", "target_prefix_frac", "=", "args", ".", "target_prefix_frac", ")", "\n", "", "else", ":", "\n", "                    ", "bw_rescore_file", "=", "rescore_file", "\n", "\n", "", "if", "args", ".", "source_prefix_frac", "is", "not", "None", ":", "\n", "                    ", "fw_rescore_file", "=", "source_prefix_frac_rescore_file", "\n", "rerank_utils", ".", "write_reprocessed", "(", "gen_output", ".", "source", ",", "gen_output", ".", "hypo", ",", "gen_output", ".", "target", ",", "\n", "pre_gen", "+", "source_prefix_frac_rescore_file", "+", "\".\"", "+", "args", ".", "source_lang", ",", "\n", "pre_gen", "+", "source_prefix_frac_rescore_file", "+", "\".\"", "+", "args", ".", "target_lang", ",", "\n", "pre_gen", "+", "\"/reference_file\"", ",", "bpe_symbol", "=", "args", ".", "remove_bpe", ",", "\n", "source_prefix_frac", "=", "args", ".", "source_prefix_frac", ")", "\n", "", "else", ":", "\n", "                    ", "fw_rescore_file", "=", "rescore_file", "\n", "\n", "", "", "", "if", "args", ".", "right_to_left1", "or", "args", ".", "right_to_left2", ":", "\n", "            ", "rerank_utils", ".", "write_reprocessed", "(", "gen_output", ".", "source", ",", "gen_output", ".", "hypo", ",", "gen_output", ".", "target", ",", "\n", "pre_gen", "+", "\"/right_to_left_rescore_data.\"", "+", "args", ".", "source_lang", ",", "\n", "pre_gen", "+", "\"/right_to_left_rescore_data.\"", "+", "args", ".", "target_lang", ",", "\n", "pre_gen", "+", "\"/right_to_left_reference_file\"", ",", "\n", "right_to_left", "=", "True", ",", "bpe_symbol", "=", "args", ".", "remove_bpe", ")", "\n", "\n", "", "print", "(", "\"STEP 3: binarize the translations\"", ")", "\n", "if", "not", "args", ".", "right_to_left1", "or", "args", ".", "score_model2", "is", "not", "None", "and", "not", "args", ".", "right_to_left2", "or", "not", "rerank1_is_gen", ":", "\n", "\n", "            ", "if", "args", ".", "backwards1", "or", "args", ".", "backwards2", ":", "\n", "                ", "if", "args", ".", "backwards_score_dict_dir", "is", "not", "None", ":", "\n", "                    ", "bw_dict", "=", "args", ".", "backwards_score_dict_dir", "\n", "", "else", ":", "\n", "                    ", "bw_dict", "=", "args", ".", "score_dict_dir", "\n", "", "bw_preprocess_param", "=", "[", "\"--source-lang\"", ",", "scorer1_src", ",", "\n", "\"--target-lang\"", ",", "scorer1_tgt", ",", "\n", "\"--trainpref\"", ",", "pre_gen", "+", "bw_rescore_file", ",", "\n", "\"--srcdict\"", ",", "bw_dict", "+", "\"/dict.\"", "+", "scorer1_src", "+", "\".txt\"", ",", "\n", "\"--tgtdict\"", ",", "bw_dict", "+", "\"/dict.\"", "+", "scorer1_tgt", "+", "\".txt\"", ",", "\n", "\"--destdir\"", ",", "backwards_preprocessed_dir", "]", "\n", "preprocess_parser", "=", "options", ".", "get_preprocessing_parser", "(", ")", "\n", "input_args", "=", "preprocess_parser", ".", "parse_args", "(", "bw_preprocess_param", ")", "\n", "preprocess", ".", "main", "(", "input_args", ")", "\n", "\n", "", "preprocess_param", "=", "[", "\"--source-lang\"", ",", "scorer1_src", ",", "\n", "\"--target-lang\"", ",", "scorer1_tgt", ",", "\n", "\"--trainpref\"", ",", "pre_gen", "+", "fw_rescore_file", ",", "\n", "\"--srcdict\"", ",", "args", ".", "score_dict_dir", "+", "\"/dict.\"", "+", "scorer1_src", "+", "\".txt\"", ",", "\n", "\"--tgtdict\"", ",", "args", ".", "score_dict_dir", "+", "\"/dict.\"", "+", "scorer1_tgt", "+", "\".txt\"", ",", "\n", "\"--destdir\"", ",", "left_to_right_preprocessed_dir", "]", "\n", "preprocess_parser", "=", "options", ".", "get_preprocessing_parser", "(", ")", "\n", "input_args", "=", "preprocess_parser", ".", "parse_args", "(", "preprocess_param", ")", "\n", "preprocess", ".", "main", "(", "input_args", ")", "\n", "\n", "", "if", "args", ".", "right_to_left1", "or", "args", ".", "right_to_left2", ":", "\n", "            ", "preprocess_param", "=", "[", "\"--source-lang\"", ",", "scorer1_src", ",", "\n", "\"--target-lang\"", ",", "scorer1_tgt", ",", "\n", "\"--trainpref\"", ",", "pre_gen", "+", "\"/right_to_left_rescore_data\"", ",", "\n", "\"--srcdict\"", ",", "args", ".", "score_dict_dir", "+", "\"/dict.\"", "+", "scorer1_src", "+", "\".txt\"", ",", "\n", "\"--tgtdict\"", ",", "args", ".", "score_dict_dir", "+", "\"/dict.\"", "+", "scorer1_tgt", "+", "\".txt\"", ",", "\n", "\"--destdir\"", ",", "right_to_left_preprocessed_dir", "]", "\n", "preprocess_parser", "=", "options", ".", "get_preprocessing_parser", "(", ")", "\n", "input_args", "=", "preprocess_parser", ".", "parse_args", "(", "preprocess_param", ")", "\n", "preprocess", ".", "main", "(", "input_args", ")", "\n", "\n", "", "", "return", "gen_output", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_generate.cli_main": [[238, 242], ["rerank_options.get_reranking_parser", "fairseq.options.parse_args_and_arch", "rerank_generate.gen_and_reprocess_nbest"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_options.get_reranking_parser", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.parse_args_and_arch", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.noisychannel.rerank_generate.gen_and_reprocess_nbest"], ["", "def", "cli_main", "(", ")", ":", "\n", "    ", "parser", "=", "rerank_options", ".", "get_reranking_parser", "(", ")", "\n", "args", "=", "options", ".", "parse_args_and_arch", "(", "parser", ")", "\n", "gen_and_reprocess_nbest", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.multiprocessing_bpe_encoder.MultiprocessingEncoder.__init__": [[91, 93], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.multiprocessing_bpe_encoder.MultiprocessingEncoder.initializer": [[94, 97], ["fairseq.data.encoders.gpt2_bpe.get_encoder"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.gpt2_bpe_utils.get_encoder"], ["", "def", "initializer", "(", "self", ")", ":", "\n", "        ", "global", "bpe", "\n", "bpe", "=", "get_encoder", "(", "self", ".", "args", ".", "encoder_json", ",", "self", ".", "args", ".", "vocab_bpe", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.multiprocessing_bpe_encoder.MultiprocessingEncoder.encode": [[98, 102], ["bpe.encode", "list", "map"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.encode"], ["", "def", "encode", "(", "self", ",", "line", ")", ":", "\n", "        ", "global", "bpe", "\n", "ids", "=", "bpe", ".", "encode", "(", "line", ")", "\n", "return", "list", "(", "map", "(", "str", ",", "ids", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.multiprocessing_bpe_encoder.MultiprocessingEncoder.decode": [[103, 106], ["bpe.decode"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.decode"], ["", "def", "decode", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "global", "bpe", "\n", "return", "bpe", ".", "decode", "(", "tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.multiprocessing_bpe_encoder.MultiprocessingEncoder.encode_lines": [[107, 119], ["line.strip.strip.strip", "multiprocessing_bpe_encoder.MultiprocessingEncoder.encode", "enc_lines.append", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.encode"], ["", "def", "encode_lines", "(", "self", ",", "lines", ")", ":", "\n", "        ", "\"\"\"\n        Encode a set of lines. All lines will be encoded together.\n        \"\"\"", "\n", "enc_lines", "=", "[", "]", "\n", "for", "line", "in", "lines", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "len", "(", "line", ")", "==", "0", "and", "not", "self", ".", "args", ".", "keep_empty", ":", "\n", "                ", "return", "[", "\"EMPTY\"", ",", "None", "]", "\n", "", "tokens", "=", "self", ".", "encode", "(", "line", ")", "\n", "enc_lines", ".", "append", "(", "\" \"", ".", "join", "(", "tokens", ")", ")", "\n", "", "return", "[", "\"PASS\"", ",", "enc_lines", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.multiprocessing_bpe_encoder.MultiprocessingEncoder.decode_lines": [[120, 126], ["map", "dec_lines.append", "line.strip().split", "multiprocessing_bpe_encoder.MultiprocessingEncoder.decode", "line.strip"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.decode"], ["", "def", "decode_lines", "(", "self", ",", "lines", ")", ":", "\n", "        ", "dec_lines", "=", "[", "]", "\n", "for", "line", "in", "lines", ":", "\n", "            ", "tokens", "=", "map", "(", "int", ",", "line", ".", "strip", "(", ")", ".", "split", "(", ")", ")", "\n", "dec_lines", ".", "append", "(", "self", ".", "decode", "(", "tokens", ")", ")", "\n", "", "return", "[", "\"PASS\"", ",", "dec_lines", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.multiprocessing_bpe_encoder.main": [[18, 87], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "len", "len", "contextlib.ExitStack", "multiprocessing_bpe_encoder.MultiprocessingEncoder", "multiprocessing.Pool", "multiprocessing.Pool.imap", "collections.Counter", "enumerate", "collections.Counter.most_common", "zip", "print", "stack.enter_context", "stack.enter_context", "zip", "print", "open", "open", "print"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], ["def", "main", "(", ")", ":", "\n", "    ", "\"\"\"\n    Helper script to encode raw text with the GPT-2 BPE using multiple processes.\n\n    The encoder.json and vocab.bpe files can be obtained here:\n    - https://dl.fbaipublicfiles.com/fairseq/gpt2_bpe/encoder.json\n    - https://dl.fbaipublicfiles.com/fairseq/gpt2_bpe/vocab.bpe\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--encoder-json\"", ",", "\n", "help", "=", "'path to encoder.json'", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--vocab-bpe\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "'path to vocab.bpe'", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--inputs\"", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "default", "=", "[", "'-'", "]", ",", "\n", "help", "=", "\"input files to filter/encode\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--outputs\"", ",", "\n", "nargs", "=", "\"+\"", ",", "\n", "default", "=", "[", "'-'", "]", ",", "\n", "help", "=", "\"path to save encoded outputs\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--keep-empty\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"keep empty lines\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--workers\"", ",", "type", "=", "int", ",", "default", "=", "20", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "assert", "len", "(", "args", ".", "inputs", ")", "==", "len", "(", "args", ".", "outputs", ")", ",", "\"number of input and output paths should match\"", "\n", "\n", "with", "contextlib", ".", "ExitStack", "(", ")", "as", "stack", ":", "\n", "        ", "inputs", "=", "[", "\n", "stack", ".", "enter_context", "(", "open", "(", "input", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", ")", "\n", "if", "input", "!=", "\"-\"", "else", "sys", ".", "stdin", "\n", "for", "input", "in", "args", ".", "inputs", "\n", "]", "\n", "outputs", "=", "[", "\n", "stack", ".", "enter_context", "(", "open", "(", "output", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", ")", "\n", "if", "output", "!=", "\"-\"", "else", "sys", ".", "stdout", "\n", "for", "output", "in", "args", ".", "outputs", "\n", "]", "\n", "\n", "encoder", "=", "MultiprocessingEncoder", "(", "args", ")", "\n", "pool", "=", "Pool", "(", "args", ".", "workers", ",", "initializer", "=", "encoder", ".", "initializer", ")", "\n", "encoded_lines", "=", "pool", ".", "imap", "(", "encoder", ".", "encode_lines", ",", "zip", "(", "*", "inputs", ")", ",", "100", ")", "\n", "\n", "stats", "=", "Counter", "(", ")", "\n", "for", "i", ",", "(", "filt", ",", "enc_lines", ")", "in", "enumerate", "(", "encoded_lines", ",", "start", "=", "1", ")", ":", "\n", "            ", "if", "filt", "==", "\"PASS\"", ":", "\n", "                ", "for", "enc_line", ",", "output_h", "in", "zip", "(", "enc_lines", ",", "outputs", ")", ":", "\n", "                    ", "print", "(", "enc_line", ",", "file", "=", "output_h", ")", "\n", "", "", "else", ":", "\n", "                ", "stats", "[", "\"num_filtered_\"", "+", "filt", "]", "+=", "1", "\n", "", "if", "i", "%", "10000", "==", "0", ":", "\n", "                ", "print", "(", "\"processed {} lines\"", ".", "format", "(", "i", ")", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "\n", "", "", "for", "k", ",", "v", "in", "stats", ".", "most_common", "(", ")", ":", "\n", "            ", "print", "(", "\"[{}] filtered {} lines\"", ".", "format", "(", "k", ",", "v", ")", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.preprocess_RACE.InputExample.__init__": [[15, 19], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "paragraph", ",", "qa_list", ",", "label", ")", ":", "\n", "        ", "self", ".", "paragraph", "=", "paragraph", "\n", "self", ".", "qa_list", "=", "qa_list", "\n", "self", ".", "label", "=", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.preprocess_RACE.get_examples": [[21, 58], ["set_type.split", "len", "os.path.join", "os.listdir", "os.path.join", "open", "json.load", "cur_data[].replace", "re.sub", "range", "len", "range", "examples.append", "ord", "ord", "re.sub", "qa_list.append", "preprocess_RACE.InputExample", "question.replace"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.load"], ["", "", "def", "get_examples", "(", "data_dir", ",", "set_type", ")", ":", "\n", "    ", "\"\"\"\n    Extract paragraph and question-answer list from each json file\n    \"\"\"", "\n", "examples", "=", "[", "]", "\n", "\n", "levels", "=", "[", "\"middle\"", ",", "\"high\"", "]", "\n", "set_type_c", "=", "set_type", ".", "split", "(", "'-'", ")", "\n", "if", "len", "(", "set_type_c", ")", "==", "2", ":", "\n", "        ", "levels", "=", "[", "set_type_c", "[", "1", "]", "]", "\n", "set_type", "=", "set_type_c", "[", "0", "]", "\n", "", "for", "level", "in", "levels", ":", "\n", "        ", "cur_dir", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "set_type", ",", "level", ")", "\n", "for", "filename", "in", "os", ".", "listdir", "(", "cur_dir", ")", ":", "\n", "            ", "cur_path", "=", "os", ".", "path", ".", "join", "(", "cur_dir", ",", "filename", ")", "\n", "with", "open", "(", "cur_path", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "cur_data", "=", "json", ".", "load", "(", "f", ")", "\n", "answers", "=", "cur_data", "[", "\"answers\"", "]", "\n", "options", "=", "cur_data", "[", "\"options\"", "]", "\n", "questions", "=", "cur_data", "[", "\"questions\"", "]", "\n", "context", "=", "cur_data", "[", "\"article\"", "]", ".", "replace", "(", "\"\\n\"", ",", "\" \"", ")", "\n", "context", "=", "re", ".", "sub", "(", "r'\\s+'", ",", "' '", ",", "context", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "answers", ")", ")", ":", "\n", "                    ", "label", "=", "ord", "(", "answers", "[", "i", "]", ")", "-", "ord", "(", "\"A\"", ")", "\n", "qa_list", "=", "[", "]", "\n", "question", "=", "questions", "[", "i", "]", "\n", "for", "j", "in", "range", "(", "4", ")", ":", "\n", "                        ", "option", "=", "options", "[", "i", "]", "[", "j", "]", "\n", "if", "\"_\"", "in", "question", ":", "\n", "                            ", "qa_cat", "=", "question", ".", "replace", "(", "\"_\"", ",", "option", ")", "\n", "", "else", ":", "\n", "                            ", "qa_cat", "=", "\" \"", ".", "join", "(", "[", "question", ",", "option", "]", ")", "\n", "", "qa_cat", "=", "re", ".", "sub", "(", "r'\\s+'", ",", "' '", ",", "qa_cat", ")", "\n", "qa_list", ".", "append", "(", "qa_cat", ")", "\n", "", "examples", ".", "append", "(", "InputExample", "(", "context", ",", "qa_list", ",", "label", ")", ")", "\n", "\n", "", "", "", "", "return", "examples", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.preprocess_RACE.main": [[60, 96], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.path.exists", "os.makedirs", "preprocess_RACE.get_examples", "os.path.join", "os.path.join", "open", "open", "open.close", "open.close", "os.path.join", "open", "open.write", "range", "open.write", "f.close", "range", "qa_files[].write", "str", "str"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.preprocess_RACE.get_examples", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write"], ["", "def", "main", "(", ")", ":", "\n", "    ", "\"\"\"\n    Helper script to extract paragraphs questions and answers from RACE datasets.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--input-dir\"", ",", "\n", "help", "=", "'input directory for downloaded RACE dataset'", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--output-dir\"", ",", "\n", "help", "=", "'output directory for extracted data'", ",", "\n", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "output_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "output_dir", ",", "exist_ok", "=", "True", ")", "\n", "\n", "", "for", "set_type", "in", "[", "\"train\"", ",", "\"dev\"", ",", "\"test-middle\"", ",", "\"test-high\"", "]", ":", "\n", "        ", "examples", "=", "get_examples", "(", "args", ".", "input_dir", ",", "set_type", ")", "\n", "qa_file_paths", "=", "[", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "set_type", "+", "\".input\"", "+", "str", "(", "i", "+", "1", ")", ")", "for", "i", "in", "range", "(", "4", ")", "]", "\n", "qa_files", "=", "[", "open", "(", "qa_file_path", ",", "'w'", ")", "for", "qa_file_path", "in", "qa_file_paths", "]", "\n", "outf_context_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "set_type", "+", "\".input0\"", ")", "\n", "outf_label_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "set_type", "+", "\".label\"", ")", "\n", "outf_context", "=", "open", "(", "outf_context_path", ",", "'w'", ")", "\n", "outf_label", "=", "open", "(", "outf_label_path", ",", "'w'", ")", "\n", "for", "example", "in", "examples", ":", "\n", "            ", "outf_context", ".", "write", "(", "example", ".", "paragraph", "+", "'\\n'", ")", "\n", "for", "i", "in", "range", "(", "4", ")", ":", "\n", "                ", "qa_files", "[", "i", "]", ".", "write", "(", "example", ".", "qa_list", "[", "i", "]", "+", "'\\n'", ")", "\n", "", "outf_label", ".", "write", "(", "str", "(", "example", ".", "label", ")", "+", "'\\n'", ")", "\n", "\n", "", "for", "f", "in", "qa_files", ":", "\n", "            ", "f", ".", "close", "(", ")", "\n", "", "outf_label", ".", "close", "(", ")", "\n", "outf_context", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.hub_interface.RobertaHubInterface.__init__": [[21, 31], ["torch.Module.__init__", "fairseq.data.encoders.build_bpe", "hub_interface.RobertaHubInterface.register_buffer", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "\n", "class", "BARTHubInterface", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"A simple PyTorch Hub interface to BART.\n\n    Usage: https://github.com/pytorch/fairseq/tree/master/examples/BART\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "args", ",", "task", ",", "model", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.hub_interface.RobertaHubInterface.device": [[32, 35], ["None"], "methods", ["None"], ["        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "task", "=", "task", "\n", "self", ".", "model", "=", "model", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.hub_interface.RobertaHubInterface.encode": [[36, 63], ["hub_interface.RobertaHubInterface.task.source_dictionary.encode_line", "hub_interface.RobertaHubInterface.long", "hub_interface.RobertaHubInterface.bpe.encode", "hub_interface.RobertaHubInterface.bpe.encode"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.encode_line", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.encode", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.encode"], ["\n", "self", ".", "bpe", "=", "encoders", ".", "build_bpe", "(", "args", ")", "\n", "\n", "self", ".", "max_positions", "=", "min", "(", "utils", ".", "resolve_max_positions", "(", "\n", "self", ".", "task", ".", "max_positions", "(", ")", ",", "\n", "self", ".", "model", ".", "max_positions", "(", ")", ",", "\n", ")", ")", "\n", "\n", "# this is useful for determining the device", "\n", "self", ".", "register_buffer", "(", "'_float_tensor'", ",", "torch", ".", "tensor", "(", "[", "0", "]", ",", "dtype", "=", "torch", ".", "float", ")", ")", "\n", "\n", "", "@", "property", "\n", "def", "device", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_float_tensor", ".", "device", "\n", "\n", "", "def", "encode", "(", "self", ",", "sentence", ":", "str", ",", "*", "addl_sentences", ",", "no_separator", "=", "True", ")", "->", "torch", ".", "LongTensor", ":", "\n", "        "]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.hub_interface.RobertaHubInterface.decode": [[64, 76], ["tokens.numpy.numpy.numpy", "numpy.split", "tokens.numpy.numpy.dim", "hub_interface.RobertaHubInterface.task.source_dictionary.bos", "hub_interface.RobertaHubInterface.task.source_dictionary.eos", "hub_interface.RobertaHubInterface.bpe.decode", "len", "hub_interface.RobertaHubInterface.task.source_dictionary.string", "doc_mask.nonzero"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.bos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.decode", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.string"], ["\n", "tokens", "=", "self", ".", "bpe", ".", "encode", "(", "sentence", ")", "\n", "if", "len", "(", "tokens", ".", "split", "(", "' '", ")", ")", ">", "self", ".", "max_positions", "-", "2", ":", "\n", "            ", "tokens", "=", "' '", ".", "join", "(", "tokens", ".", "split", "(", "' '", ")", "[", ":", "self", ".", "max_positions", "-", "2", "]", ")", "\n", "", "bpe_sentence", "=", "'<s> '", "+", "tokens", "+", "' </s>'", "\n", "for", "s", "in", "addl_sentences", ":", "\n", "            ", "bpe_sentence", "+=", "(", "' </s>'", "if", "not", "no_separator", "else", "''", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.hub_interface.RobertaHubInterface.extract_features": [[77, 95], ["hub_interface.RobertaHubInterface.model", "tokens.unsqueeze.unsqueeze.dim", "tokens.unsqueeze.unsqueeze.unsqueeze", "tokens.unsqueeze.unsqueeze.size", "hub_interface.RobertaHubInterface.model.max_positions", "ValueError", "tokens.unsqueeze.unsqueeze.to", "inner_state.transpose", "tokens.unsqueeze.unsqueeze.size", "hub_interface.RobertaHubInterface.model.max_positions"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.max_positions", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.max_positions"], ["bpe_sentence", "+=", "' '", "+", "self", ".", "bpe", ".", "encode", "(", "s", ")", "+", "' </s>'", "\n", "", "tokens", "=", "self", ".", "task", ".", "source_dictionary", ".", "encode_line", "(", "bpe_sentence", ",", "append_eos", "=", "False", ")", "\n", "return", "tokens", ".", "long", "(", ")", "\n", "\n", "", "def", "decode", "(", "self", ",", "tokens", ":", "torch", ".", "LongTensor", ")", ":", "\n", "        ", "assert", "tokens", ".", "dim", "(", ")", "==", "1", "\n", "tokens", "=", "tokens", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "tokens", "[", "0", "]", "==", "self", ".", "task", ".", "source_dictionary", ".", "bos", "(", ")", ":", "\n", "            ", "tokens", "=", "tokens", "[", "1", ":", "]", "# remove <s>", "\n", "", "eos_mask", "=", "(", "tokens", "==", "self", ".", "task", ".", "source_dictionary", ".", "eos", "(", ")", ")", "\n", "doc_mask", "=", "eos_mask", "[", "1", ":", "]", "&", "eos_mask", "[", ":", "-", "1", "]", "\n", "sentences", "=", "np", ".", "split", "(", "tokens", ",", "doc_mask", ".", "nonzero", "(", ")", "[", "0", "]", "+", "1", ")", "\n", "sentences", "=", "[", "self", ".", "bpe", ".", "decode", "(", "self", ".", "task", ".", "source_dictionary", ".", "string", "(", "s", ")", ")", "for", "s", "in", "sentences", "]", "\n", "if", "len", "(", "sentences", ")", "==", "1", ":", "\n", "            ", "return", "sentences", "[", "0", "]", "\n", "", "return", "sentences", "\n", "\n", "", "def", "_build_sample", "(", "self", ",", "src_tokens", ":", "List", "[", "torch", ".", "LongTensor", "]", ")", ":", "\n", "# assert torch.is_tensor(src_tokens)", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.hub_interface.RobertaHubInterface.register_classification_head": [[96, 101], ["hub_interface.RobertaHubInterface.model.register_classification_head"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.model.BARTModel.register_classification_head"], ["        ", "dataset", "=", "self", ".", "task", ".", "build_dataset_for_inference", "(", "\n", "src_tokens", ",", "\n", "[", "x", ".", "numel", "(", ")", "for", "x", "in", "src_tokens", "]", ",", "\n", ")", "\n", "sample", "=", "dataset", ".", "collater", "(", "dataset", ")", "\n", "sample", "=", "utils", ".", "apply_to_sample", "(", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.hub_interface.RobertaHubInterface.predict": [[103, 109], ["hub_interface.RobertaHubInterface.extract_features", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "tokens.to"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_transformer.LevenshteinTransformerDecoder.extract_features", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax"], ["sample", "\n", ")", "\n", "return", "sample", "\n", "\n", "", "def", "sample", "(", "self", ",", "sentences", ":", "List", "[", "str", "]", ",", "beam", ":", "int", "=", "1", ",", "verbose", ":", "bool", "=", "False", ",", "\n", "gold_tokens", ":", "List", "[", "str", "]", "=", "None", ",", "**", "kwargs", ")", "->", "str", ":", "\n", "        ", "input", "=", "[", "self", ".", "encode", "(", "sentence", ")", "for", "sentence", "in", "sentences", "]", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.hub_interface.RobertaHubInterface.extract_features_aligned_to_words": [[110, 138], ["alignment_utils.spacy_nlp", "alignment_utils.spacy_tokenizer", "hub_interface.RobertaHubInterface.encode", "alignment_utils.spacy_tokenizer.", "alignment_utils.align_bpe_to_words", "hub_interface.RobertaHubInterface.extract_features", "features.squeeze.squeeze.squeeze", "alignment_utils.align_features_to_words", "Doc", "len", "alignment_utils.align_features_to_words.size", "alignment_utils.spacy_tokenizer.", "x.endswith"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.alignment_utils.spacy_nlp", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.alignment_utils.spacy_tokenizer", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.encode", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.alignment_utils.align_bpe_to_words", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_transformer.LevenshteinTransformerDecoder.extract_features", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.alignment_utils.align_features_to_words", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["if", "gold_tokens", ":", "\n", "            ", "gold_tokens", "=", "[", "self", ".", "encode", "(", "tokens", ")", "for", "tokens", "in", "gold_tokens", "]", "\n", "max_l", "=", "kwargs", ".", "get", "(", "\"max_len_b\"", ",", "512", ")", "# todo also don't make this hardcoded 512", "\n", "#breakpoint()", "\n", "if", "len", "(", "gold_tokens", "[", "0", "]", ")", ">", "max_l", ":", "\n", "                ", "gold_tokens", "=", "[", "torch", ".", "cat", "(", "(", "gold_tokens", "[", "0", "]", "[", ":", "max_l", "]", ",", "gold_tokens", "[", "0", "]", "[", "-", "1", "]", ".", "unsqueeze", "(", "0", ")", ")", ")", "]", "#TODO make this actually append the eos and also support more than 1", "\n", "\n", "", "", "hypos", "=", "self", ".", "generate", "(", "input", ",", "beam", ",", "verbose", ",", "gold_tokens", "=", "gold_tokens", ",", "\n", "**", "kwargs", ")", "\n", "# for x in hypos:", "\n", "#     for i in range(0, len(x[\"tokens\"]), 2):", "\n", "#         this = x[\"tokens\"][i:i+2]", "\n", "#         print(this, self.decode(this))", "\n", "return", "[", "self", ".", "decode", "(", "x", "[", "'tokens'", "]", ")", "for", "x", "in", "hypos", "]", "\n", "\n", "", "def", "score_sequence", "(", "self", ",", "src_sents", ":", "List", "[", "str", "]", ",", "tgt_sents", ":", "List", "[", "str", "]", ",", "**", "kwargs", ")", ":", "\n", "        ", "gen_args", "=", "copy", ".", "copy", "(", "self", ".", "args", ")", "\n", "setattr", "(", "gen_args", ",", "\"score_reference\"", ",", "True", ")", "\n", "reference_scorer", "=", "self", ".", "task", ".", "build_generator", "(", "gen_args", ")", "\n", "\n", "src_sent_ids", "=", "[", "self", ".", "encode", "(", "sentence", ")", "for", "sentence", "in", "src_sents", "]", "# makes longtensors", "\n", "tgt_sent_ids", "=", "[", "self", ".", "encode", "(", "sentence", ")", "for", "sentence", "in", "tgt_sents", "]", "\n", "sample", "=", "self", ".", "_build_sample", "(", "src_sent_ids", ")", "\n", "eos_idx", ",", "pad_idx", "=", "self", ".", "model", ".", "decoder", ".", "dictionary", ".", "eos_index", ",", "self", ".", "model", ".", "decoder", ".", "dictionary", ".", "pad_index", "\n", "# TODO don't hardcode cuda", "\n", "sample", "[", "\"net_input\"", "]", "[", "\"prev_output_tokens\"", "]", "=", "collate_tokens", "(", "tgt_sent_ids", ",", "pad_idx", ",", "eos_idx", ",", "move_eos_to_beginning", "=", "True", ")", ".", "cuda", "(", ")", "\n", "sample", "[", "\"target\"", "]", "=", "collate_tokens", "(", "tgt_sent_ids", ",", "pad_idx", ",", "eos_idx", ")", ".", "cuda", "(", ")", "# if larger beam have to stack the tensor rather than just 0 index :p", "\n", "seq_score", "=", "reference_scorer", ".", "generate", "(", "[", "self", ".", "model", "]", ",", "sample", ")", "\n", "#lm_score = seq_score[0][0][\"score\"]", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.hub_interface.RobertaHubInterface.fill_mask": [[139, 190], ["masked_input.split", "hub_interface.RobertaHubInterface.task.source_dictionary.encode_line", "features[].squeeze", "features[].squeeze.softmax", "features[].squeeze.softmax.topk", "hub_interface.RobertaHubInterface.task.source_dictionary.string", "enumerate", "tokens.unsqueeze.unsqueeze.dim", "tokens.unsqueeze.unsqueeze.unsqueeze", "fairseq.utils.eval", "hub_interface.RobertaHubInterface.model", "hub_interface.RobertaHubInterface.split", "hub_interface.RobertaHubInterface.bpe.decode", "predicted_token_bpe.startswith", "masked_input.count", "tokens.unsqueeze.unsqueeze.long().to", "topk_filled_outputs.append", "topk_filled_outputs.append", "hub_interface.RobertaHubInterface.bpe.encode", "tokens.unsqueeze.unsqueeze.long", "masked_input.replace", "values[].item", "masked_input.replace", "values[].item", "text_span.rstrip"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.encode_line", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.string", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.decode", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.data_helper.count", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.encode", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item"], ["return", "seq_score", "[", "0", "]", "[", "0", "]", "[", "\"score\"", "]", ".", "data", ".", "item", "(", ")", "\n", "\n", "", "def", "generate", "(", "self", ",", "tokens", ":", "List", "[", "torch", ".", "LongTensor", "]", ",", "beam", ":", "int", "=", "5", ",", "verbose", ":", "bool", "=", "False", ",", "**", "kwargs", ")", "->", "torch", ".", "LongTensor", ":", "\n", "        ", "sample", "=", "self", ".", "_build_sample", "(", "tokens", ")", "\n", "# for coefficient training need gold tokens", "\n", "gold_toks", "=", "kwargs", ".", "get", "(", "\"gold_tokens\"", ")", "\n", "gold_sample", "=", "self", ".", "_build_sample", "(", "tokens", ")", "if", "gold_toks", "else", "None", "\n", "if", "gold_sample", ":", "\n", "            ", "eos_idx", ",", "pad_idx", "=", "self", ".", "model", ".", "decoder", ".", "dictionary", ".", "eos_index", ",", "self", ".", "model", ".", "decoder", ".", "dictionary", ".", "pad_index", "\n", "if", "self", ".", "args", ".", "cpu", ":", "\n", "                ", "shifted_gold", "=", "collate_tokens", "(", "gold_toks", ",", "pad_idx", ",", "eos_idx", ",", "move_eos_to_beginning", "=", "True", ")", "\n", "gold", "=", "collate_tokens", "(", "gold_toks", ",", "pad_idx", ",", "eos_idx", ")", "\n", "", "else", ":", "\n", "                ", "shifted_gold", "=", "collate_tokens", "(", "gold_toks", ",", "pad_idx", ",", "eos_idx", ",", "move_eos_to_beginning", "=", "True", ")", ".", "cuda", "(", ")", "\n", "gold", "=", "collate_tokens", "(", "gold_toks", ",", "pad_idx", ",", "eos_idx", ")", ".", "cuda", "(", ")", "\n", "\n", "", "gold_sample", "[", "\"net_input\"", "]", "[", "\"prev_output_tokens\"", "]", "=", "shifted_gold", "\n", "gold_sample", "[", "\"target\"", "]", "=", "gold", "\n", "kwargs", "[", "\"gold_sample\"", "]", "=", "gold_sample", "\n", "kwargs", "[", "\"gold_tokens\"", "]", "=", "gold", "# TODO this is redundant now", "\n", "# build generator using current args as well as any kwargs", "\n", "", "gen_args", "=", "copy", ".", "copy", "(", "self", ".", "args", ")", "\n", "gen_args", ".", "beam", "=", "beam", "\n", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "setattr", "(", "gen_args", ",", "k", ",", "v", ")", "\n", "", "generator", "=", "self", ".", "task", ".", "build_generator", "(", "gen_args", ")", "\n", "if", "kwargs", ".", "get", "(", "\"learn\"", ")", ":", "\n", "            ", "setattr", "(", "gen_args", ",", "\"score_reference\"", ",", "True", ")", "# so can get a sequence scorer", "\n", "ref_scorer", "=", "self", ".", "task", ".", "build_generator", "(", "gen_args", ")", "\n", "kwargs", "[", "\"reference_scorer\"", "]", "=", "ref_scorer", "\n", "", "translations", "=", "self", ".", "task", ".", "inference_step", "(", "\n", "generator", ",", "\n", "[", "self", ".", "model", "]", ",", "\n", "sample", ",", "\n", "prefix_tokens", "=", "sample", "[", "'net_input'", "]", "[", "'src_tokens'", "]", ".", "new_zeros", "(", "(", "len", "(", "tokens", ")", ",", "1", ")", ")", ".", "fill_", "(", "self", ".", "task", ".", "source_dictionary", ".", "bos", "(", ")", ")", ",", "\n", "**", "kwargs", "\n", ")", "\n", "\n", "if", "verbose", ":", "\n", "            ", "src_str_with_unk", "=", "self", ".", "string", "(", "tokens", ")", "\n", "logger", ".", "info", "(", "'S\\t{}'", ".", "format", "(", "src_str_with_unk", ")", ")", "\n", "\n", "", "def", "getarg", "(", "name", ",", "default", ")", ":", "\n", "            ", "return", "getattr", "(", "gen_args", ",", "name", ",", "getattr", "(", "self", ".", "args", ",", "name", ",", "default", ")", ")", "\n", "\n", "# Process top predictions", "\n", "", "hypos", "=", "[", "x", "[", "0", "]", "for", "x", "in", "translations", "]", "\n", "hypos", "=", "[", "v", "for", "_", ",", "v", "in", "sorted", "(", "zip", "(", "sample", "[", "'id'", "]", ".", "tolist", "(", ")", ",", "hypos", ")", ")", "]", "\n", "return", "hypos", "\n", "\n", "", "def", "extract_features", "(", "self", ",", "tokens", ":", "torch", ".", "LongTensor", ",", "return_all_hiddens", ":", "bool", "=", "False", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "if", "tokens", ".", "dim", "(", ")", "==", "1", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.hub_interface.RobertaHubInterface.disambiguate_pronoun": [[191, 205], ["hasattr", "fairseq.utils.eval", "hub_interface.RobertaHubInterface.task.disambiguate_pronoun"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_task.WSCTask.disambiguate_pronoun"], ["            ", "tokens", "=", "tokens", ".", "unsqueeze", "(", "0", ")", "\n", "", "if", "tokens", ".", "size", "(", "-", "1", ")", ">", "min", "(", "self", ".", "model", ".", "max_positions", "(", ")", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'tokens exceeds maximum length: {} > {}'", ".", "format", "(", "\n", "tokens", ".", "size", "(", "-", "1", ")", ",", "self", ".", "model", ".", "max_positions", "(", ")", "\n", ")", ")", "\n", "", "tokens", ".", "to", "(", "device", "=", "self", ".", "device", ")", ",", "\n", "prev_output_tokens", "=", "tokens", ".", "clone", "(", ")", "\n", "\n", "prev_output_tokens", "[", ":", ",", "0", "]", "=", "tokens", ".", "gather", "(", "\n", "1", ",", "\n", "(", "tokens", ".", "ne", "(", "self", ".", "task", ".", "source_dictionary", ".", "pad", "(", ")", ")", ".", "sum", "(", "dim", "=", "1", ")", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ",", "\n", ")", ".", "squeeze", "(", ")", "\n", "\n", "prev_output_tokens", "[", ":", ",", "1", ":", "]", "=", "tokens", "[", ":", ",", ":", "-", "1", "]", "\n", "features", ",", "extra", "=", "self", ".", "model", "(", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.model_camembert.CamembertModel.hub_models": [[18, 22], ["None"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "hub_models", "(", "cls", ")", ":", "\n", "        ", "return", "{", "\n", "'camembert.v0'", ":", "'http://dl.fbaipublicfiles.com/fairseq/models/camembert.v0.tar.gz'", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.model_camembert.CamembertModel.from_pretrained": [[24, 37], ["hub_utils.from_pretrained", "hub_interface.RobertaHubInterface", "cls.hub_models"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.model.BARTModel.from_pretrained", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.model.BARTModel.hub_models"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "model_name_or_path", ",", "checkpoint_file", "=", "'model.pt'", ",", "data_name_or_path", "=", "'.'", ",", "bpe", "=", "'sentencepiece'", ",", "**", "kwargs", ")", ":", "\n", "        ", "from", "fairseq", "import", "hub_utils", "\n", "x", "=", "hub_utils", ".", "from_pretrained", "(", "\n", "model_name_or_path", ",", "\n", "checkpoint_file", ",", "\n", "data_name_or_path", ",", "\n", "archive_map", "=", "cls", ".", "hub_models", "(", ")", ",", "\n", "bpe", "=", "bpe", ",", "\n", "load_checkpoint_heads", "=", "True", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "RobertaHubInterface", "(", "x", "[", "'args'", "]", ",", "x", "[", "'task'", "]", ",", "x", "[", "'models'", "]", "[", "0", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.model.RobertaModel.hub_models": [[32, 39], ["None"], "methods", ["None"], ["def", "hub_models", "(", "cls", ")", ":", "\n", "        ", "return", "{", "\n", "'bart.large'", ":", "'http://dl.fbaipublicfiles.com/fairseq/models/bart.large.tar.gz'", ",", "\n", "'bart.large.mnli'", ":", "'http://dl.fbaipublicfiles.com/fairseq/models/bart.large.mnli.tar.gz'", ",", "\n", "'bart.large.cnn'", ":", "'http://dl.fbaipublicfiles.com/fairseq/models/bart.large.cnn.tar.gz'", ",", "\n", "}", "\n", "\n", "", "def", "__init__", "(", "self", ",", "args", ",", "encoder", ",", "decoder", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.model.RobertaModel.__init__": [[41, 49], ["fairseq.models.FairseqLanguageModel.__init__", "model.RobertaModel.apply", "torch.ModuleDict", "torch.ModuleDict", "torch.ModuleDict"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["\n", "# We follow BERT's random weight initialization", "\n", "self", ".", "apply", "(", "init_bert_params", ")", "\n", "\n", "self", ".", "classification_heads", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "\n", "", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "super", "(", "BARTModel", ",", "BARTModel", ")", ".", "add_args", "(", "parser", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.model.RobertaModel.add_args": [[50, 86], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "fairseq.utils.get_available_activation_fns", "fairseq.utils.get_available_activation_fns"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.get_available_activation_fns", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.get_available_activation_fns"], ["parser", ".", "add_argument", "(", "\n", "'--pooler-dropout'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'dropout probability in the masked_lm pooler layers'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--pooler-activation-fn'", ",", "\n", "choices", "=", "utils", ".", "get_available_activation_fns", "(", ")", ",", "\n", "help", "=", "'activation function to use for pooler layer'", "\n", ")", "\n", "\n", "", "@", "property", "\n", "def", "supported_targets", "(", "self", ")", ":", "\n", "        ", "return", "{", "'self'", "}", "\n", "\n", "", "def", "forward", "(", "\n", "self", ",", "src_tokens", ",", "src_lengths", ",", "prev_output_tokens", ",", "\n", "features_only", "=", "False", ",", "classification_head_name", "=", "None", ",", "**", "kwargs", "\n", ")", ":", "\n", "        ", "if", "classification_head_name", "is", "not", "None", ":", "\n", "            ", "features_only", "=", "True", "\n", "\n", "", "encoder_out", "=", "self", ".", "encoder", "(", "\n", "src_tokens", ",", "\n", "src_lengths", "=", "src_lengths", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "x", ",", "extra", "=", "self", ".", "decoder", "(", "\n", "prev_output_tokens", ",", "\n", "encoder_out", "=", "encoder_out", ",", "\n", "features_only", "=", "features_only", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "\n", "if", "classification_head_name", "is", "not", "None", ":", "\n", "            ", "sentence_representation", "=", "x", "[", "\n", "src_tokens", ".", "eq", "(", "self", ".", "encoder", ".", "dictionary", ".", "eos", "(", ")", ")", ",", ":", "\n", "]", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ",", "x", ".", "size", "(", "-", "1", ")", ")", "[", ":", ",", "-", "1", ",", ":", "]", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.model.RobertaModel.build_model": [[87, 99], ["model.base_architecture", "model.RobertaEncoder", "cls", "hasattr"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.base_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dictionary.BertDictionary.cls"], ["x", "=", "self", ".", "classification_heads", "[", "classification_head_name", "]", "(", "\n", "sentence_representation", "\n", ")", "\n", "", "return", "x", ",", "extra", "\n", "\n", "", "@", "classmethod", "\n", "def", "from_pretrained", "(", "\n", "cls", ",", "\n", "model_name_or_path", ",", "\n", "checkpoint_file", "=", "'model.pt'", ",", "\n", "data_name_or_path", "=", "'.'", ",", "\n", "bpe", "=", "'gpt2'", ",", "\n", "**", "kwargs", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.model.RobertaModel.forward": [[100, 109], ["model.RobertaModel.decoder"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqMultiModel.decoder"], [")", ":", "\n", "        ", "from", "fairseq", "import", "hub_utils", "\n", "x", "=", "hub_utils", ".", "from_pretrained", "(", "\n", "model_name_or_path", ",", "\n", "checkpoint_file", ",", "\n", "data_name_or_path", ",", "\n", "archive_map", "=", "cls", ".", "hub_models", "(", ")", ",", "\n", "bpe", "=", "bpe", ",", "\n", "load_checkpoint_heads", "=", "True", ",", "\n", "**", "kwargs", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.model.RobertaModel.register_classification_head": [[110, 128], ["model.RobertaClassificationHead", "print"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], [")", "\n", "return", "BARTHubInterface", "(", "x", "[", "'args'", "]", ",", "x", "[", "'task'", "]", ",", "x", "[", "'models'", "]", "[", "0", "]", ")", "\n", "\n", "", "def", "register_classification_head", "(", "self", ",", "name", ",", "num_classes", "=", "None", ",", "inner_dim", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Register a classification head.\"\"\"", "\n", "logger", ".", "info", "(", "\"Registering classification head: {0}\"", ".", "format", "(", "name", ")", ")", "\n", "if", "name", "in", "self", ".", "classification_heads", ":", "\n", "            ", "prev_num_classes", "=", "self", ".", "classification_heads", "[", "name", "]", ".", "out_proj", ".", "out_features", "\n", "prev_inner_dim", "=", "self", ".", "classification_heads", "[", "name", "]", ".", "dense", ".", "out_features", "\n", "if", "num_classes", "!=", "prev_num_classes", "or", "inner_dim", "!=", "prev_inner_dim", ":", "\n", "                ", "logger", ".", "warning", "(", "\n", "'re-registering head \"{}\" with num_classes {} (prev: {}) '", "\n", "'and inner_dim {} (prev: {})'", ".", "format", "(", "\n", "name", ",", "num_classes", ",", "prev_num_classes", ",", "inner_dim", ",", "prev_inner_dim", "\n", ")", "\n", ")", "\n", "", "", "self", ".", "classification_heads", "[", "name", "]", "=", "BARTClassificationHead", "(", "\n", "self", ".", "args", ".", "encoder_embed_dim", ",", "\n", "inner_dim", "or", "self", ".", "args", ".", "encoder_embed_dim", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.model.RobertaModel.supported_targets": [[130, 133], ["None"], "methods", ["None"], ["self", ".", "args", ".", "pooler_activation_fn", ",", "\n", "self", ".", "args", ".", "pooler_dropout", ",", "\n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.model.RobertaModel.from_pretrained": [[134, 147], ["hub_utils.from_pretrained", "hub_interface.RobertaHubInterface", "cls.hub_models"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.model.BARTModel.from_pretrained", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.model.BARTModel.hub_models"], ["", "def", "upgrade_state_dict_named", "(", "self", ",", "state_dict", ",", "name", ")", ":", "\n", "        ", "super", "(", ")", ".", "upgrade_state_dict_named", "(", "state_dict", ",", "name", ")", "\n", "\n", "prefix", "=", "name", "+", "'.'", "if", "name", "!=", "''", "else", "''", "\n", "current_head_names", "=", "[", "]", "if", "not", "hasattr", "(", "self", ",", "'classification_heads'", ")", "else", "self", ".", "classification_heads", ".", "keys", "(", ")", "\n", "\n", "# Handle new classification heads present in the state dict.", "\n", "keys_to_delete", "=", "[", "]", "\n", "for", "k", "in", "state_dict", ".", "keys", "(", ")", ":", "\n", "            ", "if", "not", "k", ".", "startswith", "(", "prefix", "+", "'classification_heads.'", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "head_name", "=", "k", "[", "len", "(", "prefix", "+", "'classification_heads.'", ")", ":", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.model.RobertaModel.upgrade_state_dict_named": [[148, 195], ["super().upgrade_state_dict_named", "state_dict.keys", "hasattr", "model.RobertaModel.classification_heads.keys", "state_dict[].size", "state_dict[].size", "getattr", "model.RobertaModel.classification_heads.state_dict", "model.RobertaModel.items", "hasattr", "k.startswith", "k[].split", "model.RobertaModel.register_classification_head", "print", "keys_to_delete.append", "print", "print", "keys_to_delete.append", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.model.BARTModel.upgrade_state_dict_named", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.state_dict", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.model.BARTModel.register_classification_head", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], ["num_classes", "=", "state_dict", "[", "prefix", "+", "'classification_heads.'", "+", "head_name", "+", "'.out_proj.weight'", "]", ".", "size", "(", "0", ")", "\n", "inner_dim", "=", "state_dict", "[", "prefix", "+", "'classification_heads.'", "+", "head_name", "+", "'.dense.weight'", "]", ".", "size", "(", "0", ")", "\n", "\n", "if", "getattr", "(", "self", ".", "args", ",", "'load_checkpoint_heads'", ",", "False", ")", ":", "\n", "                ", "if", "head_name", "not", "in", "current_head_names", ":", "\n", "                    ", "self", ".", "register_classification_head", "(", "head_name", ",", "num_classes", ",", "inner_dim", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "head_name", "not", "in", "current_head_names", ":", "\n", "                    ", "logger", ".", "warning", "(", "\n", "'deleting classification head ({}) from checkpoint '", "\n", "'not present in current model: {}'", ".", "format", "(", "head_name", ",", "k", ")", "\n", ")", "\n", "keys_to_delete", ".", "append", "(", "k", ")", "\n", "", "elif", "(", "\n", "num_classes", "!=", "self", ".", "classification_heads", "[", "head_name", "]", ".", "out_proj", ".", "out_features", "\n", "or", "inner_dim", "!=", "self", ".", "classification_heads", "[", "head_name", "]", ".", "dense", ".", "out_features", "\n", ")", ":", "\n", "                    ", "logger", ".", "warning", "(", "\n", "'deleting classification head ({}) from checkpoint '", "\n", "'with different dimensions than current model: {}'", ".", "format", "(", "head_name", ",", "k", ")", "\n", ")", "\n", "keys_to_delete", ".", "append", "(", "k", ")", "\n", "", "", "", "for", "k", "in", "keys_to_delete", ":", "\n", "            ", "del", "state_dict", "[", "k", "]", "\n", "\n", "# When finetuning on translation task, remove last row of", "\n", "# embedding matrix that corresponds to mask_idx token.", "\n", "", "loaded_dict_size", "=", "state_dict", "[", "'encoder.embed_tokens.weight'", "]", ".", "size", "(", "0", ")", "\n", "if", "loaded_dict_size", "==", "len", "(", "self", ".", "encoder", ".", "dictionary", ")", "+", "1", "and", "'<mask>'", "not", "in", "self", ".", "encoder", ".", "dictionary", ":", "\n", "            ", "state_dict", "[", "'encoder.embed_tokens.weight'", "]", "=", "state_dict", "[", "'encoder.embed_tokens.weight'", "]", "[", ":", "loaded_dict_size", "-", "1", ",", ":", "]", "\n", "state_dict", "[", "'decoder.embed_tokens.weight'", "]", "=", "state_dict", "[", "'decoder.embed_tokens.weight'", "]", "[", ":", "loaded_dict_size", "-", "1", ",", ":", "]", "\n", "\n", "# Copy any newly-added classification heads into the state dict", "\n", "# with their current weights.", "\n", "", "if", "hasattr", "(", "self", ",", "'classification_heads'", ")", ":", "\n", "            ", "cur_state", "=", "self", ".", "classification_heads", ".", "state_dict", "(", ")", "\n", "for", "k", ",", "v", "in", "cur_state", ".", "items", "(", ")", ":", "\n", "                ", "if", "prefix", "+", "'classification_heads.'", "+", "k", "not", "in", "state_dict", ":", "\n", "                    ", "logger", ".", "info", "(", "'Overwriting'", ",", "prefix", "+", "'classification_heads.'", "+", "k", ")", "\n", "state_dict", "[", "prefix", "+", "'classification_heads.'", "+", "k", "]", "=", "v", "\n", "\n", "\n", "", "", "", "", "", "class", "BARTClassificationHead", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"Head for sentence-level classification tasks.\"\"\"", "\n", "\n", "def", "__init__", "(", "\n", "self", ",", "\n", "input_dim", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.model.RobertaLMHead.__init__": [[247, 257], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "fairseq.utils.get_activation_fn", "fairseq.modules.LayerNorm", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.get_activation_fn", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.layer_norm.LayerNorm", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear"], ["args", ".", "layernorm_embedding", "=", "getattr", "(", "args", ",", "'layernorm_embedding'", ",", "True", ")", "\n", "\n", "args", ".", "activation_fn", "=", "getattr", "(", "args", ",", "'activation_fn'", ",", "'gelu'", ")", "\n", "args", ".", "pooler_activation_fn", "=", "getattr", "(", "args", ",", "'pooler_activation_fn'", ",", "'tanh'", ")", "\n", "args", ".", "pooler_dropout", "=", "getattr", "(", "args", ",", "'pooler_dropout'", ",", "0.0", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.model.RobertaLMHead.forward": [[258, 270], ["model.RobertaLMHead.dense", "model.RobertaLMHead.activation_fn", "model.RobertaLMHead.layer_norm", "torch.linear", "torch.linear", "torch.linear"], "methods", ["None"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.model.RobertaClassificationHead.__init__": [[275, 281], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "fairseq.utils.get_activation_fn", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.get_activation_fn", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.model.RobertaClassificationHead.forward": [[282, 290], ["model.RobertaClassificationHead.dropout", "model.RobertaClassificationHead.dense", "model.RobertaClassificationHead.activation_fn", "model.RobertaClassificationHead.dropout", "model.RobertaClassificationHead.out_proj"], "methods", ["None"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.model.RobertaEncoder.__init__": [[299, 333], ["fairseq.models.FairseqDecoder.__init__", "fairseq.modules.TransformerSentenceEncoder", "model.RobertaLMHead", "len", "args.encoder_layers_to_keep.split", "dictionary.pad", "len", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.model.RobertaEncoder.forward": [[335, 356], ["model.RobertaEncoder.extract_features", "model.RobertaEncoder.output_layer"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_transformer.LevenshteinTransformerDecoder.extract_features", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.TransformerDecoder.output_layer"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.model.RobertaEncoder.extract_features": [[357, 364], ["model.RobertaEncoder.sentence_encoder", "inner_states[].transpose"], "methods", ["None"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.model.RobertaEncoder.output_layer": [[365, 367], ["model.RobertaEncoder.lm_head"], "methods", ["None"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.model.RobertaEncoder.max_positions": [[368, 371], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.model.base_architecture": [[373, 389], ["fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.model.roberta_base_architecture": [[391, 394], ["fairseq.models.register_model_architecture", "model.base_architecture"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.base_architecture"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.model.roberta_large_architecture": [[396, 403], ["fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "getattr", "model.base_architecture"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.base_architecture"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.model.xlm_architecture": [[405, 413], ["fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "getattr", "model.base_architecture"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.base_architecture"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.alignment_utils.align_bpe_to_words": [[12, 67], ["filter", "next", "bpe_tokens.dim", "text.strip", "roberta.task.source_dictionary.string", "alignment_utils.align_bpe_to_words.clean"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.string"], ["def", "align_bpe_to_words", "(", "roberta", ",", "bpe_tokens", ":", "torch", ".", "LongTensor", ",", "other_tokens", ":", "List", "[", "str", "]", ")", ":", "\n", "    ", "\"\"\"\n    Helper to align GPT-2 BPE to other tokenization formats (e.g., spaCy).\n\n    Args:\n        roberta (RobertaHubInterface): RoBERTa instance\n        bpe_tokens (torch.LongTensor): GPT-2 BPE tokens of shape `(T_bpe)`\n        other_tokens (List[str]): other tokens of shape `(T_words)`\n\n    Returns:\n        List[str]: mapping from *other_tokens* to corresponding *bpe_tokens*.\n    \"\"\"", "\n", "assert", "bpe_tokens", ".", "dim", "(", ")", "==", "1", "\n", "assert", "bpe_tokens", "[", "0", "]", "==", "0", "\n", "\n", "def", "clean", "(", "text", ")", ":", "\n", "        ", "return", "text", ".", "strip", "(", ")", "\n", "\n", "# remove whitespaces to simplify alignment", "\n", "", "bpe_tokens", "=", "[", "roberta", ".", "task", ".", "source_dictionary", ".", "string", "(", "[", "x", "]", ")", "for", "x", "in", "bpe_tokens", "]", "\n", "bpe_tokens", "=", "[", "clean", "(", "roberta", ".", "bpe", ".", "decode", "(", "x", ")", "if", "x", "not", "in", "{", "'<s>'", ",", "''", "}", "else", "x", ")", "for", "x", "in", "bpe_tokens", "]", "\n", "other_tokens", "=", "[", "clean", "(", "str", "(", "o", ")", ")", "for", "o", "in", "other_tokens", "]", "\n", "\n", "# strip leading <s>", "\n", "bpe_tokens", "=", "bpe_tokens", "[", "1", ":", "]", "\n", "assert", "''", ".", "join", "(", "bpe_tokens", ")", "==", "''", ".", "join", "(", "other_tokens", ")", "\n", "\n", "# create alignment from every word to a list of BPE tokens", "\n", "alignment", "=", "[", "]", "\n", "bpe_toks", "=", "filter", "(", "lambda", "item", ":", "item", "[", "1", "]", "!=", "''", ",", "enumerate", "(", "bpe_tokens", ",", "start", "=", "1", ")", ")", "\n", "j", ",", "bpe_tok", "=", "next", "(", "bpe_toks", ")", "\n", "for", "other_tok", "in", "other_tokens", ":", "\n", "        ", "bpe_indices", "=", "[", "]", "\n", "while", "True", ":", "\n", "            ", "if", "other_tok", ".", "startswith", "(", "bpe_tok", ")", ":", "\n", "                ", "bpe_indices", ".", "append", "(", "j", ")", "\n", "other_tok", "=", "other_tok", "[", "len", "(", "bpe_tok", ")", ":", "]", "\n", "try", ":", "\n", "                    ", "j", ",", "bpe_tok", "=", "next", "(", "bpe_toks", ")", "\n", "", "except", "StopIteration", ":", "\n", "                    ", "j", ",", "bpe_tok", "=", "None", ",", "None", "\n", "", "", "elif", "bpe_tok", ".", "startswith", "(", "other_tok", ")", ":", "\n", "# other_tok spans multiple BPE tokens", "\n", "                ", "bpe_indices", ".", "append", "(", "j", ")", "\n", "bpe_tok", "=", "bpe_tok", "[", "len", "(", "other_tok", ")", ":", "]", "\n", "other_tok", "=", "''", "\n", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "'Cannot align \"{}\" and \"{}\"'", ".", "format", "(", "other_tok", ",", "bpe_tok", ")", ")", "\n", "", "if", "other_tok", "==", "''", ":", "\n", "                ", "break", "\n", "", "", "assert", "len", "(", "bpe_indices", ")", ">", "0", "\n", "alignment", ".", "append", "(", "bpe_indices", ")", "\n", "", "assert", "len", "(", "alignment", ")", "==", "len", "(", "other_tokens", ")", "\n", "\n", "return", "alignment", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.alignment_utils.align_features_to_words": [[69, 96], ["collections.Counter", "features.new", "range", "torch.stack", "torch.all", "features.dim", "features.new.unsqueeze", "torch.stack.append", "max", "len", "torch.stack.append", "collections.Counter.get", "weighted_features[].sum", "torch.abs", "range", "len", "torch.stack.sum", "features.sum"], "function", ["None"], ["", "def", "align_features_to_words", "(", "roberta", ",", "features", ",", "alignment", ")", ":", "\n", "    ", "\"\"\"\n    Align given features to words.\n\n    Args:\n        roberta (RobertaHubInterface): RoBERTa instance\n        features (torch.Tensor): features to align of shape `(T_bpe x C)`\n        alignment: alignment between BPE tokens and words returned by\n            func:`align_bpe_to_words`.\n    \"\"\"", "\n", "assert", "features", ".", "dim", "(", ")", "==", "2", "\n", "\n", "bpe_counts", "=", "Counter", "(", "j", "for", "bpe_indices", "in", "alignment", "for", "j", "in", "bpe_indices", ")", "\n", "assert", "bpe_counts", "[", "0", "]", "==", "0", "# <s> shouldn't be aligned", "\n", "denom", "=", "features", ".", "new", "(", "[", "bpe_counts", ".", "get", "(", "j", ",", "1", ")", "for", "j", "in", "range", "(", "len", "(", "features", ")", ")", "]", ")", "\n", "weighted_features", "=", "features", "/", "denom", ".", "unsqueeze", "(", "-", "1", ")", "\n", "\n", "output", "=", "[", "weighted_features", "[", "0", "]", "]", "\n", "largest_j", "=", "-", "1", "\n", "for", "bpe_indices", "in", "alignment", ":", "\n", "        ", "output", ".", "append", "(", "weighted_features", "[", "bpe_indices", "]", ".", "sum", "(", "dim", "=", "0", ")", ")", "\n", "largest_j", "=", "max", "(", "largest_j", ",", "*", "bpe_indices", ")", "\n", "", "for", "j", "in", "range", "(", "largest_j", "+", "1", ",", "len", "(", "features", ")", ")", ":", "\n", "        ", "output", ".", "append", "(", "weighted_features", "[", "j", "]", ")", "\n", "", "output", "=", "torch", ".", "stack", "(", "output", ")", "\n", "assert", "torch", ".", "all", "(", "torch", ".", "abs", "(", "output", ".", "sum", "(", "dim", "=", "0", ")", "-", "features", ".", "sum", "(", "dim", "=", "0", ")", ")", "<", "1e-4", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.alignment_utils.spacy_nlp": [[98, 106], ["getattr", "English", "ImportError"], "function", ["None"], ["", "def", "spacy_nlp", "(", ")", ":", "\n", "    ", "if", "getattr", "(", "spacy_nlp", ",", "'_nlp'", ",", "None", ")", "is", "None", ":", "\n", "        ", "try", ":", "\n", "            ", "from", "spacy", ".", "lang", ".", "en", "import", "English", "\n", "spacy_nlp", ".", "_nlp", "=", "English", "(", ")", "\n", "", "except", "ImportError", ":", "\n", "            ", "raise", "ImportError", "(", "'Please install spacy with: pip install spacy'", ")", "\n", "", "", "return", "spacy_nlp", ".", "_nlp", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.alignment_utils.spacy_tokenizer": [[108, 116], ["getattr", "alignment_utils.spacy_nlp", "spacy_nlp.Defaults.create_tokenizer", "ImportError"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.alignment_utils.spacy_nlp"], ["", "def", "spacy_tokenizer", "(", ")", ":", "\n", "    ", "if", "getattr", "(", "spacy_tokenizer", ",", "'_tokenizer'", ",", "None", ")", "is", "None", ":", "\n", "        ", "try", ":", "\n", "            ", "nlp", "=", "spacy_nlp", "(", ")", "\n", "spacy_tokenizer", ".", "_tokenizer", "=", "nlp", ".", "Defaults", ".", "create_tokenizer", "(", "nlp", ")", "\n", "", "except", "ImportError", ":", "\n", "            ", "raise", "ImportError", "(", "'Please install spacy with: pip install spacy'", ")", "\n", "", "", "return", "spacy_tokenizer", ".", "_tokenizer", "\n", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.model_xlmr.XLMRModel.hub_models": [[18, 23], ["None"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "hub_models", "(", "cls", ")", ":", "\n", "        ", "return", "{", "\n", "'xlmr.base'", ":", "'http://dl.fbaipublicfiles.com/fairseq/models/xlmr.base.tar.gz'", ",", "\n", "'xlmr.large'", ":", "'http://dl.fbaipublicfiles.com/fairseq/models/xlmr.large.tar.gz'", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.model_xlmr.XLMRModel.from_pretrained": [[25, 38], ["hub_utils.from_pretrained", "hub_interface.RobertaHubInterface", "cls.hub_models"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.model.BARTModel.from_pretrained", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.model.BARTModel.hub_models"], ["", "@", "classmethod", "\n", "def", "from_pretrained", "(", "cls", ",", "model_name_or_path", ",", "checkpoint_file", "=", "'model.pt'", ",", "data_name_or_path", "=", "'.'", ",", "bpe", "=", "'sentencepiece'", ",", "**", "kwargs", ")", ":", "\n", "        ", "from", "fairseq", "import", "hub_utils", "\n", "x", "=", "hub_utils", ".", "from_pretrained", "(", "\n", "model_name_or_path", ",", "\n", "checkpoint_file", ",", "\n", "data_name_or_path", ",", "\n", "archive_map", "=", "cls", ".", "hub_models", "(", ")", ",", "\n", "bpe", "=", "bpe", ",", "\n", "load_checkpoint_heads", "=", "True", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "RobertaHubInterface", "(", "x", "[", "'args'", "]", ",", "x", "[", "'task'", "]", ",", "x", "[", "'models'", "]", "[", "0", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.model.XLMRModel.hub_models": [[199, 204], ["None"], "methods", ["None"], ["pooler_dropout", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dense", "=", "nn", ".", "Linear", "(", "input_dim", ",", "inner_dim", ")", "\n", "self", ".", "activation_fn", "=", "utils", ".", "get_activation_fn", "(", "activation_fn", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "pooler_dropout", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.model.XLMRModel.from_pretrained": [[206, 219], ["hub_utils.from_pretrained", "hub_interface.RobertaHubInterface", "cls.hub_models"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.model.BARTModel.from_pretrained", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.model.BARTModel.hub_models"], ["\n", "", "def", "forward", "(", "self", ",", "features", ",", "**", "kwargs", ")", ":", "\n", "        ", "x", "=", "features", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "=", "self", ".", "dense", "(", "x", ")", "\n", "x", "=", "self", ".", "activation_fn", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "=", "self", ".", "out_proj", "(", "x", ")", "\n", "return", "x", "\n", "\n", "\n", "", "", "@", "register_model_architecture", "(", "'bart'", ",", "'bart_large'", ")", "\n", "def", "bart_large_architecture", "(", "args", ")", ":", "\n", "    ", "args", ".", "encoder_embed_path", "=", "getattr", "(", "args", ",", "'encoder_embed_path'", ",", "None", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.model.CamembertModel.hub_models": [[223, 227], ["None"], "methods", ["None"], ["args", ".", "encoder_attention_heads", "=", "getattr", "(", "args", ",", "'encoder_attention_heads'", ",", "16", ")", "\n", "args", ".", "encoder_normalize_before", "=", "getattr", "(", "args", ",", "'encoder_normalize_before'", ",", "False", ")", "\n", "args", ".", "encoder_learned_pos", "=", "getattr", "(", "args", ",", "'encoder_learned_pos'", ",", "True", ")", "\n", "args", ".", "decoder_embed_path", "=", "getattr", "(", "args", ",", "'decoder_embed_path'", ",", "None", ")", "\n", "args", ".", "decoder_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_embed_dim'", ",", "args", ".", "encoder_embed_dim", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.roberta.model.CamembertModel.from_pretrained": [[229, 242], ["hub_utils.from_pretrained", "hub_interface.RobertaHubInterface", "cls.hub_models"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.model.BARTModel.from_pretrained", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.model.BARTModel.hub_models"], ["args", ".", "decoder_layers", "=", "getattr", "(", "args", ",", "'decoder_layers'", ",", "12", ")", "\n", "args", ".", "decoder_attention_heads", "=", "getattr", "(", "args", ",", "'decoder_attention_heads'", ",", "16", ")", "\n", "args", ".", "decoder_normalize_before", "=", "getattr", "(", "args", ",", "'decoder_normalize_before'", ",", "False", ")", "\n", "args", ".", "decoder_learned_pos", "=", "getattr", "(", "args", ",", "'decoder_learned_pos'", ",", "True", ")", "\n", "args", ".", "attention_dropout", "=", "getattr", "(", "args", ",", "'attention_dropout'", ",", "0.", ")", "\n", "args", ".", "relu_dropout", "=", "getattr", "(", "args", ",", "'relu_dropout'", ",", "0.", ")", "\n", "args", ".", "dropout", "=", "getattr", "(", "args", ",", "'dropout'", ",", "0.1", ")", "\n", "args", ".", "max_target_positions", "=", "getattr", "(", "args", ",", "'max_target_positions'", ",", "1024", ")", "\n", "args", ".", "max_source_positions", "=", "getattr", "(", "args", ",", "'max_source_positions'", ",", "1024", ")", "\n", "args", ".", "adaptive_softmax_cutoff", "=", "getattr", "(", "args", ",", "'adaptive_softmax_cutoff'", ",", "None", ")", "\n", "args", ".", "adaptive_softmax_dropout", "=", "getattr", "(", "args", ",", "'adaptive_softmax_dropout'", ",", "0", ")", "\n", "args", ".", "share_decoder_input_output_embed", "=", "getattr", "(", "args", ",", "'share_decoder_input_output_embed'", ",", "True", ")", "\n", "args", ".", "share_all_embeddings", "=", "getattr", "(", "args", ",", "'share_all_embeddings'", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.commonsense_qa.commonsense_qa_task.CommonsenseQATask.add_args": [[32, 40], ["parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add task-specific arguments to the parser.\"\"\"", "\n", "parser", ".", "add_argument", "(", "'data'", ",", "metavar", "=", "'DIR'", ",", "\n", "help", "=", "'path to data directory; we load <split>.jsonl'", ")", "\n", "parser", ".", "add_argument", "(", "'--init-token'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "'add token at the beginning of each batch item'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-classes'", ",", "type", "=", "int", ",", "default", "=", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.commonsense_qa.commonsense_qa_task.CommonsenseQATask.__init__": [[41, 47], ["fairseq.tasks.FairseqTask.__init__", "vocab.add_symbol", "fairseq.data.encoders.build_bpe"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol"], ["", "def", "__init__", "(", "self", ",", "args", ",", "vocab", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "mask", "=", "vocab", ".", "add_symbol", "(", "'<mask>'", ")", "\n", "\n", "self", ".", "bpe", "=", "encoders", ".", "build_bpe", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.commonsense_qa.commonsense_qa_task.CommonsenseQATask.load_dictionary": [[48, 58], ["fairseq.data.Dictionary.load", "fairseq.data.Dictionary.load.add_symbol"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.load", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol"], ["", "@", "classmethod", "\n", "def", "load_dictionary", "(", "cls", ",", "filename", ")", ":", "\n", "        ", "\"\"\"Load the dictionary from the filename\n\n        Args:\n            filename (str): the filename\n        \"\"\"", "\n", "dictionary", "=", "Dictionary", ".", "load", "(", "filename", ")", "\n", "dictionary", ".", "add_symbol", "(", "'<mask>'", ")", "\n", "return", "dictionary", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.commonsense_qa.commonsense_qa_task.CommonsenseQATask.setup_task": [[59, 68], ["cls.load_dictionary", "print", "cls", "os.path.join", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.sentence_prediction.SentencePredictionTask.load_dictionary", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dictionary.BertDictionary.cls"], ["", "@", "classmethod", "\n", "def", "setup_task", "(", "cls", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "args", ".", "criterion", "==", "'sentence_ranking'", ",", "'Must set --criterion=sentence_ranking'", "\n", "\n", "# load data and label dictionaries", "\n", "vocab", "=", "cls", ".", "load_dictionary", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'dict.txt'", ")", ")", "\n", "print", "(", "'| dictionary: {} types'", ".", "format", "(", "len", "(", "vocab", ")", ")", ")", "\n", "\n", "return", "cls", "(", "args", ",", "vocab", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.commonsense_qa.commonsense_qa_task.CommonsenseQATask.load_dataset": [[69, 156], ["all", "range", "range", "fairseq.data.NestedDictionaryDataset", "print", "commonsense_qa_task.CommonsenseQATask.vocab.encode_line().long", "os.path.join", "os.path.exists", "FileNotFoundError", "open", "len", "len", "numpy.array", "fairseq.data.ListDataset", "fairseq.data.ListDataset", "fairseq.data.IdDataset", "fairseq.data.NumSamplesDataset", "fairseq.data.NumelDataset", "fairseq.data.SortDataset.update", "len", "fairseq.data.SortDataset.update", "fairseq.data.data_utils.numpy_seed", "fairseq.data.SortDataset", "commonsense_qa_task.CommonsenseQATask.bpe.encode", "torch.cat", "range", "range", "json.loads", "commonsense_qa_task.CommonsenseQATask.load_dataset.binarize"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.update", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.update", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.numpy_seed", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.encode", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_task.WSCTask.binarize"], ["", "def", "load_dataset", "(", "self", ",", "split", ",", "epoch", "=", "0", ",", "combine", "=", "False", ",", "data_path", "=", "None", ",", "return_only", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Load a given dataset split.\n\n        Args:\n            split (str): name of the split (e.g., train, valid, test)\n        \"\"\"", "\n", "\n", "def", "binarize", "(", "s", ",", "append_bos", "=", "False", ")", ":", "\n", "            ", "if", "self", ".", "bpe", "is", "not", "None", ":", "\n", "                ", "s", "=", "self", ".", "bpe", ".", "encode", "(", "s", ")", "\n", "", "tokens", "=", "self", ".", "vocab", ".", "encode_line", "(", "\n", "s", ",", "append_eos", "=", "True", ",", "add_if_not_exist", "=", "False", ",", "\n", ")", ".", "long", "(", ")", "\n", "if", "append_bos", "and", "self", ".", "args", ".", "init_token", "is", "not", "None", ":", "\n", "                ", "tokens", "=", "torch", ".", "cat", "(", "[", "tokens", ".", "new", "(", "[", "self", ".", "args", ".", "init_token", "]", ")", ",", "tokens", "]", ")", "\n", "", "return", "tokens", "\n", "\n", "", "if", "data_path", "is", "None", ":", "\n", "            ", "data_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "data", ",", "split", "+", "'.jsonl'", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "data_path", ")", ":", "\n", "            ", "raise", "FileNotFoundError", "(", "'Cannot find data: {}'", ".", "format", "(", "data_path", ")", ")", "\n", "\n", "", "src_tokens", "=", "[", "[", "]", "for", "i", "in", "range", "(", "self", ".", "args", ".", "num_classes", ")", "]", "\n", "src_lengths", "=", "[", "[", "]", "for", "i", "in", "range", "(", "self", ".", "args", ".", "num_classes", ")", "]", "\n", "labels", "=", "[", "]", "\n", "\n", "with", "open", "(", "data_path", ")", "as", "h", ":", "\n", "            ", "for", "line", "in", "h", ":", "\n", "                ", "example", "=", "json", ".", "loads", "(", "line", ".", "strip", "(", ")", ")", "\n", "if", "'answerKey'", "in", "example", ":", "\n", "                    ", "label", "=", "ord", "(", "example", "[", "'answerKey'", "]", ")", "-", "ord", "(", "'A'", ")", "\n", "labels", ".", "append", "(", "label", ")", "\n", "", "question", "=", "example", "[", "'question'", "]", "[", "'stem'", "]", "\n", "assert", "len", "(", "example", "[", "'question'", "]", "[", "'choices'", "]", ")", "==", "self", ".", "args", ".", "num_classes", "\n", "# format: `<s> Q: Where would I not want a fox? </s> A: hen house </s>`", "\n", "question", "=", "'Q: '", "+", "question", "\n", "question_toks", "=", "binarize", "(", "question", ",", "append_bos", "=", "True", ")", "\n", "for", "i", ",", "choice", "in", "enumerate", "(", "example", "[", "'question'", "]", "[", "'choices'", "]", ")", ":", "\n", "                    ", "src", "=", "'A: '", "+", "choice", "[", "'text'", "]", "\n", "src_bin", "=", "torch", ".", "cat", "(", "[", "question_toks", ",", "binarize", "(", "src", ")", "]", ")", "\n", "src_tokens", "[", "i", "]", ".", "append", "(", "src_bin", ")", "\n", "src_lengths", "[", "i", "]", ".", "append", "(", "len", "(", "src_bin", ")", ")", "\n", "", "", "", "assert", "all", "(", "len", "(", "src_tokens", "[", "0", "]", ")", "==", "len", "(", "src_tokens", "[", "i", "]", ")", "for", "i", "in", "range", "(", "self", ".", "args", ".", "num_classes", ")", ")", "\n", "assert", "len", "(", "src_tokens", "[", "0", "]", ")", "==", "len", "(", "src_lengths", "[", "0", "]", ")", "\n", "assert", "len", "(", "labels", ")", "==", "0", "or", "len", "(", "labels", ")", "==", "len", "(", "src_tokens", "[", "0", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "args", ".", "num_classes", ")", ":", "\n", "            ", "src_lengths", "[", "i", "]", "=", "np", ".", "array", "(", "src_lengths", "[", "i", "]", ")", "\n", "src_tokens", "[", "i", "]", "=", "ListDataset", "(", "src_tokens", "[", "i", "]", ",", "src_lengths", "[", "i", "]", ")", "\n", "src_lengths", "[", "i", "]", "=", "ListDataset", "(", "src_lengths", "[", "i", "]", ")", "\n", "\n", "", "dataset", "=", "{", "\n", "'id'", ":", "IdDataset", "(", ")", ",", "\n", "'nsentences'", ":", "NumSamplesDataset", "(", ")", ",", "\n", "'ntokens'", ":", "NumelDataset", "(", "src_tokens", "[", "0", "]", ",", "reduce", "=", "True", ")", ",", "\n", "}", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "args", ".", "num_classes", ")", ":", "\n", "            ", "dataset", ".", "update", "(", "{", "\n", "'net_input{}'", ".", "format", "(", "i", "+", "1", ")", ":", "{", "\n", "'src_tokens'", ":", "RightPadDataset", "(", "\n", "src_tokens", "[", "i", "]", ",", "\n", "pad_idx", "=", "self", ".", "source_dictionary", ".", "pad", "(", ")", ",", "\n", ")", ",", "\n", "'src_lengths'", ":", "src_lengths", "[", "i", "]", ",", "\n", "}", "\n", "}", ")", "\n", "\n", "", "if", "len", "(", "labels", ")", ">", "0", ":", "\n", "            ", "dataset", ".", "update", "(", "{", "'target'", ":", "RawLabelDataset", "(", "labels", ")", "}", ")", "\n", "\n", "", "dataset", "=", "NestedDictionaryDataset", "(", "\n", "dataset", ",", "\n", "sizes", "=", "[", "np", ".", "maximum", ".", "reduce", "(", "[", "src_token", ".", "sizes", "for", "src_token", "in", "src_tokens", "]", ")", "]", ",", "\n", ")", "\n", "\n", "with", "data_utils", ".", "numpy_seed", "(", "self", ".", "args", ".", "seed", ")", ":", "\n", "            ", "dataset", "=", "SortDataset", "(", "\n", "dataset", ",", "\n", "# shuffle", "\n", "sort_order", "=", "[", "np", ".", "random", ".", "permutation", "(", "len", "(", "dataset", ")", ")", "]", ",", "\n", ")", "\n", "\n", "", "print", "(", "'| Loaded {} with {} samples'", ".", "format", "(", "split", ",", "len", "(", "dataset", ")", ")", ")", "\n", "\n", "self", ".", "datasets", "[", "split", "]", "=", "dataset", "\n", "return", "self", ".", "datasets", "[", "split", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.commonsense_qa.commonsense_qa_task.CommonsenseQATask.build_model": [[157, 167], ["models.build_model", "models.build_model.register_classification_head"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.build_model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.model.BARTModel.register_classification_head"], ["", "def", "build_model", "(", "self", ",", "args", ")", ":", "\n", "        ", "from", "fairseq", "import", "models", "\n", "model", "=", "models", ".", "build_model", "(", "args", ",", "self", ")", "\n", "\n", "model", ".", "register_classification_head", "(", "\n", "'sentence_classification_head'", ",", "\n", "num_classes", "=", "1", ",", "\n", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.commonsense_qa.commonsense_qa_task.CommonsenseQATask.source_dictionary": [[168, 171], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "source_dictionary", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.commonsense_qa.commonsense_qa_task.CommonsenseQATask.target_dictionary": [[172, 175], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "target_dictionary", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "vocab", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_task.WSCTask.add_args": [[36, 43], ["parser.add_argument", "parser.add_argument"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add task-specific arguments to the parser.\"\"\"", "\n", "parser", ".", "add_argument", "(", "'data'", ",", "metavar", "=", "'DIR'", ",", "\n", "help", "=", "'path to data directory; we load <split>.jsonl'", ")", "\n", "parser", ".", "add_argument", "(", "'--init-token'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "'add token at the beginning of each batch item'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_task.WSCTask.__init__": [[44, 59], ["fairseq.tasks.FairseqTask.__init__", "vocab.add_symbol", "fairseq.data.encoders.build_bpe", "fairseq.data.encoders.build_tokenizer"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol"], ["", "def", "__init__", "(", "self", ",", "args", ",", "vocab", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "mask", "=", "vocab", ".", "add_symbol", "(", "'<mask>'", ")", "\n", "\n", "self", ".", "bpe", "=", "encoders", ".", "build_bpe", "(", "args", ")", "\n", "self", ".", "tokenizer", "=", "encoders", ".", "build_tokenizer", "(", "args", ")", "\n", "\n", "# hack to handle GPT-2 BPE, which includes leading spaces", "\n", "if", "args", ".", "bpe", "==", "'gpt2'", ":", "\n", "            ", "self", ".", "leading_space", "=", "True", "\n", "self", ".", "trailing_space", "=", "False", "\n", "", "else", ":", "\n", "            ", "self", ".", "leading_space", "=", "False", "\n", "self", ".", "trailing_space", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_task.WSCTask.load_dictionary": [[60, 70], ["fairseq.data.Dictionary.load", "fairseq.data.Dictionary.load.add_symbol"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.load", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol"], ["", "", "@", "classmethod", "\n", "def", "load_dictionary", "(", "cls", ",", "filename", ")", ":", "\n", "        ", "\"\"\"Load the dictionary from the filename\n\n        Args:\n            filename (str): the filename\n        \"\"\"", "\n", "dictionary", "=", "Dictionary", ".", "load", "(", "filename", ")", "\n", "dictionary", ".", "add_symbol", "(", "'<mask>'", ")", "\n", "return", "dictionary", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_task.WSCTask.setup_task": [[71, 80], ["cls.load_dictionary", "print", "cls", "os.path.join", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.sentence_prediction.SentencePredictionTask.load_dictionary", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dictionary.BertDictionary.cls"], ["", "@", "classmethod", "\n", "def", "setup_task", "(", "cls", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "args", ".", "criterion", "==", "'wsc'", ",", "'Must set --criterion=wsc'", "\n", "\n", "# load data and label dictionaries", "\n", "vocab", "=", "cls", ".", "load_dictionary", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'dict.txt'", ")", ")", "\n", "print", "(", "'| dictionary: {} types'", ".", "format", "(", "len", "(", "vocab", ")", ")", ")", "\n", "\n", "return", "cls", "(", "args", ",", "vocab", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_task.WSCTask.binarize": [[81, 92], ["wsc_task.WSCTask.vocab.encode_line().long", "wsc_task.WSCTask.tokenizer.encode", "wsc_task.WSCTask.bpe.encode", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "wsc_task.WSCTask.vocab.encode_line", "torch.cat.new", "torch.cat.new"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.encode", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.encode", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.encode_line"], ["", "def", "binarize", "(", "self", ",", "s", ":", "str", ",", "append_eos", ":", "bool", "=", "False", ")", ":", "\n", "        ", "if", "self", ".", "tokenizer", "is", "not", "None", ":", "\n", "            ", "s", "=", "self", ".", "tokenizer", ".", "encode", "(", "s", ")", "\n", "", "if", "self", ".", "bpe", "is", "not", "None", ":", "\n", "            ", "s", "=", "self", ".", "bpe", ".", "encode", "(", "s", ")", "\n", "", "tokens", "=", "self", ".", "vocab", ".", "encode_line", "(", "\n", "s", ",", "append_eos", "=", "append_eos", ",", "add_if_not_exist", "=", "False", ",", "\n", ")", ".", "long", "(", ")", "\n", "if", "self", ".", "args", ".", "init_token", "is", "not", "None", ":", "\n", "            ", "tokens", "=", "torch", ".", "cat", "(", "[", "tokens", ".", "new", "(", "[", "self", ".", "args", ".", "init_token", "]", ")", ",", "tokens", "]", ")", "\n", "", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_task.WSCTask.binarize_with_mask": [[93, 103], ["wsc_task.WSCTask.binarize", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "len", "len", "wsc_task.WSCTask.binarize", "wsc_task.WSCTask.binarize"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_task.WSCTask.binarize", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_task.WSCTask.binarize", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_task.WSCTask.binarize"], ["", "def", "binarize_with_mask", "(", "self", ",", "txt", ",", "prefix", ",", "suffix", ",", "leading_space", ",", "trailing_space", ")", ":", "\n", "        ", "toks", "=", "self", ".", "binarize", "(", "\n", "prefix", "+", "leading_space", "+", "txt", "+", "trailing_space", "+", "suffix", ",", "\n", "append_eos", "=", "True", ",", "\n", ")", "\n", "mask", "=", "torch", ".", "zeros_like", "(", "toks", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "mask_start", "=", "len", "(", "self", ".", "binarize", "(", "prefix", ")", ")", "\n", "mask_size", "=", "len", "(", "self", ".", "binarize", "(", "leading_space", "+", "txt", ")", ")", "\n", "mask", "[", "mask_start", ":", "mask_start", "+", "mask_size", "]", "=", "1", "\n", "return", "toks", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_task.WSCTask.load_dataset": [[104, 210], ["wsc_utils.jsonl_iterator", "numpy.array", "fairseq.data.ListDataset", "fairseq.data.ListDataset", "numpy.array", "fairseq.data.ListDataset", "fairseq.data.ListDataset", "fairseq.data.ListDataset", "fairseq.data.NestedDictionaryDataset", "fairseq.data.SortDataset", "os.path.join", "os.path.exists", "FileNotFoundError", "wsc_utils.filter_noun_chunks", "fairseq.data.ListDataset.append", "fairseq.data.ListDataset.append", "numpy.array.append", "fairseq.data.data_utils.collate_tokens", "fairseq.data.data_utils.collate_tokens", "fairseq.data.ListDataset.append", "fairseq.data.ListDataset.append", "numpy.array.append", "fairseq.data.ListDataset.append", "fairseq.data.IdDataset", "fairseq.data.NumSamplesDataset", "fairseq.data.NumelDataset", "fairseq.data.data_utils.numpy_seed", "numpy.random.permutation", "sentence[].text_with_ws.endswith", "pronoun_span.text_with_ws.endswith", "wsc_utils.extended_noun_chunks", "wsc_task.WSCTask.binarize_with_mask", "len", "wsc_task.WSCTask.binarize_with_mask", "fairseq.data.data_utils.collate_tokens.append", "fairseq.data.data_utils.collate_tokens.append", "fairseq.data.data_utils.collate_tokens.size", "fairseq.data.data_utils.collate_tokens.size", "fairseq.data.data_utils.collate_tokens.size", "len", "len", "wsc_task.WSCTask.vocab.pad"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_utils.jsonl_iterator", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_utils.filter_noun_chunks", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.collate_tokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.collate_tokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.numpy_seed", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_utils.extended_noun_chunks", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_task.WSCTask.binarize_with_mask", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_task.WSCTask.binarize_with_mask", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad"], ["", "def", "load_dataset", "(", "self", ",", "split", ",", "epoch", "=", "0", ",", "combine", "=", "False", ",", "data_path", "=", "None", ",", "return_only", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Load a given dataset split.\n\n        Args:\n            split (str): name of the split (e.g., train, valid, test)\n        \"\"\"", "\n", "if", "data_path", "is", "None", ":", "\n", "            ", "data_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "data", ",", "split", "+", "'.jsonl'", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "data_path", ")", ":", "\n", "            ", "raise", "FileNotFoundError", "(", "'Cannot find data: {}'", ".", "format", "(", "data_path", ")", ")", "\n", "\n", "", "query_tokens", "=", "[", "]", "\n", "query_masks", "=", "[", "]", "\n", "query_lengths", "=", "[", "]", "\n", "candidate_tokens", "=", "[", "]", "\n", "candidate_masks", "=", "[", "]", "\n", "candidate_lengths", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "\n", "for", "sentence", ",", "pronoun_span", ",", "query", ",", "label", "in", "wsc_utils", ".", "jsonl_iterator", "(", "data_path", ")", ":", "\n", "            ", "prefix", "=", "sentence", "[", ":", "pronoun_span", ".", "start", "]", ".", "text", "\n", "suffix", "=", "sentence", "[", "pronoun_span", ".", "end", ":", "]", ".", "text_with_ws", "\n", "\n", "# spaCy spans include trailing spaces, but we need to know about", "\n", "# leading spaces for the GPT-2 BPE", "\n", "leading_space", "=", "' '", "if", "sentence", "[", ":", "pronoun_span", ".", "start", "]", ".", "text_with_ws", ".", "endswith", "(", "' '", ")", "else", "''", "\n", "trailing_space", "=", "' '", "if", "pronoun_span", ".", "text_with_ws", ".", "endswith", "(", "' '", ")", "else", "''", "\n", "\n", "# get noun phrases, excluding pronouns and anything overlapping with the query", "\n", "cand_spans", "=", "wsc_utils", ".", "filter_noun_chunks", "(", "\n", "wsc_utils", ".", "extended_noun_chunks", "(", "sentence", ")", ",", "\n", "exclude_pronouns", "=", "True", ",", "\n", "exclude_query", "=", "query", ",", "\n", "exact_match", "=", "False", ",", "\n", ")", "\n", "\n", "if", "query", "is", "not", "None", ":", "\n", "                ", "query_toks", ",", "query_mask", "=", "self", ".", "binarize_with_mask", "(", "\n", "query", ",", "prefix", ",", "suffix", ",", "leading_space", ",", "trailing_space", "\n", ")", "\n", "query_len", "=", "len", "(", "query_toks", ")", "\n", "", "else", ":", "\n", "                ", "query_toks", ",", "query_mask", ",", "query_len", "=", "None", ",", "None", ",", "0", "\n", "\n", "", "query_tokens", ".", "append", "(", "query_toks", ")", "\n", "query_masks", ".", "append", "(", "query_mask", ")", "\n", "query_lengths", ".", "append", "(", "query_len", ")", "\n", "\n", "cand_toks", ",", "cand_masks", "=", "[", "]", ",", "[", "]", "\n", "for", "cand_span", "in", "cand_spans", ":", "\n", "                ", "toks", ",", "mask", "=", "self", ".", "binarize_with_mask", "(", "\n", "cand_span", ".", "text", ",", "prefix", ",", "suffix", ",", "leading_space", ",", "trailing_space", ",", "\n", ")", "\n", "cand_toks", ".", "append", "(", "toks", ")", "\n", "cand_masks", ".", "append", "(", "mask", ")", "\n", "\n", "# collate candidates", "\n", "", "cand_toks", "=", "data_utils", ".", "collate_tokens", "(", "cand_toks", ",", "pad_idx", "=", "self", ".", "vocab", ".", "pad", "(", ")", ")", "\n", "cand_masks", "=", "data_utils", ".", "collate_tokens", "(", "cand_masks", ",", "pad_idx", "=", "0", ")", "\n", "assert", "cand_toks", ".", "size", "(", ")", "==", "cand_masks", ".", "size", "(", ")", "\n", "\n", "candidate_tokens", ".", "append", "(", "cand_toks", ")", "\n", "candidate_masks", ".", "append", "(", "cand_masks", ")", "\n", "candidate_lengths", ".", "append", "(", "cand_toks", ".", "size", "(", "1", ")", ")", "\n", "\n", "labels", ".", "append", "(", "label", ")", "\n", "\n", "", "query_lengths", "=", "np", ".", "array", "(", "query_lengths", ")", "\n", "query_tokens", "=", "ListDataset", "(", "query_tokens", ",", "query_lengths", ")", "\n", "query_masks", "=", "ListDataset", "(", "query_masks", ",", "query_lengths", ")", "\n", "\n", "candidate_lengths", "=", "np", ".", "array", "(", "candidate_lengths", ")", "\n", "candidate_tokens", "=", "ListDataset", "(", "candidate_tokens", ",", "candidate_lengths", ")", "\n", "candidate_masks", "=", "ListDataset", "(", "candidate_masks", ",", "candidate_lengths", ")", "\n", "\n", "labels", "=", "ListDataset", "(", "labels", ",", "[", "1", "]", "*", "len", "(", "labels", ")", ")", "\n", "\n", "dataset", "=", "{", "\n", "'id'", ":", "IdDataset", "(", ")", ",", "\n", "'query_tokens'", ":", "query_tokens", ",", "\n", "'query_masks'", ":", "query_masks", ",", "\n", "'candidate_tokens'", ":", "candidate_tokens", ",", "\n", "'candidate_masks'", ":", "candidate_masks", ",", "\n", "'labels'", ":", "labels", ",", "\n", "'nsentences'", ":", "NumSamplesDataset", "(", ")", ",", "\n", "'ntokens'", ":", "NumelDataset", "(", "query_tokens", ",", "reduce", "=", "True", ")", ",", "\n", "}", "\n", "\n", "nested_dataset", "=", "NestedDictionaryDataset", "(", "\n", "dataset", ",", "\n", "sizes", "=", "[", "query_lengths", "]", ",", "\n", ")", "\n", "\n", "with", "data_utils", ".", "numpy_seed", "(", "self", ".", "args", ".", "seed", ")", ":", "\n", "            ", "shuffle", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "query_tokens", ")", ")", "\n", "", "dataset", "=", "SortDataset", "(", "\n", "nested_dataset", ",", "\n", "# shuffle", "\n", "sort_order", "=", "[", "shuffle", "]", ",", "\n", ")", "\n", "\n", "if", "return_only", ":", "\n", "            ", "return", "dataset", "\n", "\n", "", "self", ".", "datasets", "[", "split", "]", "=", "dataset", "\n", "return", "self", ".", "datasets", "[", "split", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_task.WSCTask.build_dataset_for_inference": [[211, 220], ["tempfile.NamedTemporaryFile", "h.write", "wsc_task.WSCTask.load_dataset", "json.dumps"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyLMTask.load_dataset"], ["", "def", "build_dataset_for_inference", "(", "self", ",", "sample_json", ")", ":", "\n", "        ", "with", "tempfile", ".", "NamedTemporaryFile", "(", "buffering", "=", "0", ")", "as", "h", ":", "\n", "            ", "h", ".", "write", "(", "(", "json", ".", "dumps", "(", "sample_json", ")", "+", "'\\n'", ")", ".", "encode", "(", "'utf-8'", ")", ")", "\n", "dataset", "=", "self", ".", "load_dataset", "(", "\n", "'disambiguate_pronoun'", ",", "\n", "data_path", "=", "h", ".", "name", ",", "\n", "return_only", "=", "True", ",", "\n", ")", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_task.WSCTask.disambiguate_pronoun": [[221, 257], ["wsc_utils.convert_sentence_to_json", "wsc_task.WSCTask.build_dataset_for_inference", "wsc_task.WSCTask.collater", "wsc_task.WSCTask.disambiguate_pronoun.get_lprobs"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_utils.convert_sentence_to_json", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.masked_lm.MaskedLMTask.build_dataset_for_inference", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.collater", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_criterion.WSCCriterion.get_lprobs"], ["", "def", "disambiguate_pronoun", "(", "self", ",", "model", ",", "sentence", ",", "use_cuda", "=", "False", ")", ":", "\n", "        ", "sample_json", "=", "wsc_utils", ".", "convert_sentence_to_json", "(", "sentence", ")", "\n", "dataset", "=", "self", ".", "build_dataset_for_inference", "(", "sample_json", ")", "\n", "sample", "=", "dataset", ".", "collater", "(", "[", "dataset", "[", "0", "]", "]", ")", "\n", "if", "use_cuda", ":", "\n", "            ", "sample", "=", "utils", ".", "move_to_cuda", "(", "sample", ")", "\n", "\n", "", "def", "get_masked_input", "(", "tokens", ",", "mask", ")", ":", "\n", "            ", "masked_tokens", "=", "tokens", ".", "clone", "(", ")", "\n", "masked_tokens", "[", "mask", ".", "bool", "(", ")", "]", "=", "self", ".", "mask", "\n", "return", "masked_tokens", "\n", "\n", "", "def", "get_lprobs", "(", "tokens", ",", "mask", ")", ":", "\n", "            ", "logits", ",", "_", "=", "model", "(", "src_tokens", "=", "get_masked_input", "(", "tokens", ",", "mask", ")", ")", "\n", "lprobs", "=", "F", ".", "log_softmax", "(", "logits", ",", "dim", "=", "-", "1", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "scores", "=", "lprobs", ".", "gather", "(", "2", ",", "tokens", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "mask", "=", "mask", ".", "type_as", "(", "scores", ")", "\n", "scores", "=", "(", "scores", "*", "mask", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "/", "mask", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "return", "scores", "\n", "\n", "", "cand_lprobs", "=", "get_lprobs", "(", "\n", "sample", "[", "'candidate_tokens'", "]", "[", "0", "]", ",", "\n", "sample", "[", "'candidate_masks'", "]", "[", "0", "]", ",", "\n", ")", "\n", "if", "sample", "[", "'query_tokens'", "]", "[", "0", "]", "is", "not", "None", ":", "\n", "            ", "query_lprobs", "=", "get_lprobs", "(", "\n", "sample", "[", "'query_tokens'", "]", "[", "0", "]", ".", "unsqueeze", "(", "0", ")", ",", "\n", "sample", "[", "'query_masks'", "]", "[", "0", "]", ".", "unsqueeze", "(", "0", ")", ",", "\n", ")", "\n", "return", "(", "query_lprobs", ">=", "cand_lprobs", ")", ".", "all", "(", ")", ".", "item", "(", ")", "==", "1", "\n", "", "else", ":", "\n", "            ", "best_idx", "=", "cand_lprobs", ".", "argmax", "(", ")", ".", "item", "(", ")", "\n", "full_cand", "=", "sample", "[", "'candidate_tokens'", "]", "[", "0", "]", "[", "best_idx", "]", "\n", "mask", "=", "sample", "[", "'candidate_masks'", "]", "[", "0", "]", "[", "best_idx", "]", "\n", "toks", "=", "full_cand", "[", "mask", ".", "bool", "(", ")", "]", "\n", "return", "self", ".", "bpe", ".", "decode", "(", "self", ".", "source_dictionary", ".", "string", "(", "toks", ")", ")", ".", "strip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_task.WSCTask.source_dictionary": [[258, 261], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "source_dictionary", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_task.WSCTask.target_dictionary": [[262, 265], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "target_dictionary", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_task.WinograndeTask.setup_task": [[274, 283], ["cls.load_dictionary", "print", "cls", "os.path.join", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.sentence_prediction.SentencePredictionTask.load_dictionary", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dictionary.BertDictionary.cls"], ["@", "classmethod", "\n", "def", "setup_task", "(", "cls", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "args", ".", "criterion", "==", "'winogrande'", ",", "'Must set --criterion=winogrande'", "\n", "\n", "# load data and label dictionaries", "\n", "vocab", "=", "cls", ".", "load_dictionary", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'dict.txt'", ")", ")", "\n", "print", "(", "'| dictionary: {} types'", ".", "format", "(", "len", "(", "vocab", ")", ")", ")", "\n", "\n", "return", "cls", "(", "args", ",", "vocab", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_task.WinograndeTask.load_dataset": [[284, 376], ["wsc_utils.winogrande_jsonl_iterator", "numpy.array", "wsc_task.WinograndeTask.load_dataset.get_pad_dataset_fn"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_utils.winogrande_jsonl_iterator"], ["", "def", "load_dataset", "(", "self", ",", "split", ",", "epoch", "=", "0", ",", "combine", "=", "False", ",", "data_path", "=", "None", ",", "return_only", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Load a given dataset split.\n\n        Args:\n            split (str): name of the split (e.g., train, valid, test)\n        \"\"\"", "\n", "if", "data_path", "is", "None", ":", "\n", "            ", "data_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "data", ",", "split", "+", "'.jsonl'", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "data_path", ")", ":", "\n", "            ", "raise", "FileNotFoundError", "(", "'Cannot find data: {}'", ".", "format", "(", "data_path", ")", ")", "\n", "\n", "", "query_tokens", "=", "[", "]", "\n", "query_masks", "=", "[", "]", "\n", "query_lengths", "=", "[", "]", "\n", "candidate_tokens", "=", "[", "]", "\n", "candidate_masks", "=", "[", "]", "\n", "candidate_lengths", "=", "[", "]", "\n", "\n", "itr", "=", "wsc_utils", ".", "winogrande_jsonl_iterator", "(", "data_path", ",", "eval", "=", "(", "split", "==", "'test'", ")", ")", "\n", "\n", "for", "sample", "in", "itr", ":", "\n", "            ", "sentence", ",", "pronoun_span", ",", "query", ",", "cand_text", "=", "sample", "\n", "prefix", "=", "sentence", "[", ":", "pronoun_span", "[", "0", "]", "]", ".", "rstrip", "(", ")", "\n", "suffix", "=", "sentence", "[", "pronoun_span", "[", "1", "]", ":", "]", "\n", "\n", "leading_space", "=", "' '", "if", "sentence", "[", ":", "pronoun_span", "[", "0", "]", "]", ".", "endswith", "(", "' '", ")", "else", "''", "\n", "trailing_space", "=", "''", "\n", "\n", "if", "query", "is", "not", "None", ":", "\n", "                ", "query_toks", ",", "query_mask", "=", "self", ".", "binarize_with_mask", "(", "\n", "query", ",", "prefix", ",", "suffix", ",", "leading_space", ",", "trailing_space", ",", "\n", ")", "\n", "query_len", "=", "len", "(", "query_toks", ")", "\n", "", "else", ":", "\n", "                ", "query_toks", ",", "query_mask", ",", "query_len", "=", "None", ",", "None", ",", "0", "\n", "\n", "", "query_tokens", ".", "append", "(", "query_toks", ")", "\n", "query_masks", ".", "append", "(", "query_mask", ")", "\n", "query_lengths", ".", "append", "(", "query_len", ")", "\n", "\n", "cand_toks", ",", "cand_mask", "=", "self", ".", "binarize_with_mask", "(", "\n", "cand_text", ",", "prefix", ",", "suffix", ",", "leading_space", ",", "trailing_space", ",", "\n", ")", "\n", "\n", "candidate_tokens", ".", "append", "(", "cand_toks", ")", "\n", "candidate_masks", ".", "append", "(", "cand_mask", ")", "\n", "candidate_lengths", ".", "append", "(", "cand_toks", ".", "size", "(", "0", ")", ")", "\n", "\n", "", "query_lengths", "=", "np", ".", "array", "(", "query_lengths", ")", "\n", "\n", "def", "get_pad_dataset_fn", "(", "tokens", ",", "length", ",", "pad_idx", ")", ":", "\n", "            ", "return", "PadDataset", "(", "\n", "ListDataset", "(", "tokens", ",", "length", ")", ",", "\n", "pad_idx", "=", "pad_idx", ",", "\n", "left_pad", "=", "False", ",", "\n", ")", "\n", "\n", "", "query_tokens", "=", "get_pad_dataset_fn", "(", "query_tokens", ",", "query_lengths", ",", "self", ".", "vocab", ".", "pad", "(", ")", ")", "\n", "query_masks", "=", "get_pad_dataset_fn", "(", "query_masks", ",", "query_lengths", ",", "0", ")", "\n", "\n", "candidate_lengths", "=", "np", ".", "array", "(", "candidate_lengths", ")", "\n", "candidate_tokens", "=", "get_pad_dataset_fn", "(", "candidate_tokens", ",", "candidate_lengths", ",", "self", ".", "vocab", ".", "pad", "(", ")", ")", "\n", "candidate_masks", "=", "get_pad_dataset_fn", "(", "candidate_masks", ",", "candidate_lengths", ",", "0", ")", "\n", "\n", "dataset", "=", "{", "\n", "'id'", ":", "IdDataset", "(", ")", ",", "\n", "'query_tokens'", ":", "query_tokens", ",", "\n", "'query_masks'", ":", "query_masks", ",", "\n", "'candidate_tokens'", ":", "candidate_tokens", ",", "\n", "'candidate_masks'", ":", "candidate_masks", ",", "\n", "'nsentences'", ":", "NumSamplesDataset", "(", ")", ",", "\n", "'ntokens'", ":", "NumelDataset", "(", "query_tokens", ",", "reduce", "=", "True", ")", ",", "\n", "}", "\n", "\n", "nested_dataset", "=", "NestedDictionaryDataset", "(", "\n", "dataset", ",", "\n", "sizes", "=", "[", "query_lengths", "]", ",", "\n", ")", "\n", "\n", "with", "data_utils", ".", "numpy_seed", "(", "self", ".", "args", ".", "seed", ")", ":", "\n", "            ", "shuffle", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "query_tokens", ")", ")", "\n", "", "dataset", "=", "SortDataset", "(", "\n", "nested_dataset", ",", "\n", "# shuffle", "\n", "sort_order", "=", "[", "shuffle", "]", ",", "\n", ")", "\n", "\n", "if", "return_only", ":", "\n", "            ", "return", "dataset", "\n", "\n", "", "self", ".", "datasets", "[", "split", "]", "=", "dataset", "\n", "return", "self", ".", "datasets", "[", "split", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_utils.convert_sentence_to_json": [[10, 32], ["sentence.replace().replace().replace.split", "rest.split", "len", "sentence.replace().replace().replace.replace().replace().replace", "sentence.replace().replace().replace.split", "rest.split", "len", "prefix.rstrip().split", "prefix.rstrip().split", "sentence.replace().replace().replace.replace().replace", "prefix.rstrip", "prefix.rstrip", "sentence.replace().replace().replace.replace"], "function", ["None"], ["def", "convert_sentence_to_json", "(", "sentence", ")", ":", "\n", "    ", "if", "'_'", "in", "sentence", ":", "\n", "        ", "prefix", ",", "rest", "=", "sentence", ".", "split", "(", "'_'", ",", "1", ")", "\n", "query", ",", "rest", "=", "rest", ".", "split", "(", "'_'", ",", "1", ")", "\n", "query_index", "=", "len", "(", "prefix", ".", "rstrip", "(", ")", ".", "split", "(", "' '", ")", ")", "\n", "", "else", ":", "\n", "        ", "query", ",", "query_index", "=", "None", ",", "None", "\n", "\n", "", "prefix", ",", "rest", "=", "sentence", ".", "split", "(", "'['", ",", "1", ")", "\n", "pronoun", ",", "rest", "=", "rest", ".", "split", "(", "']'", ",", "1", ")", "\n", "pronoun_index", "=", "len", "(", "prefix", ".", "rstrip", "(", ")", ".", "split", "(", "' '", ")", ")", "\n", "\n", "sentence", "=", "sentence", ".", "replace", "(", "'_'", ",", "''", ")", ".", "replace", "(", "'['", ",", "''", ")", ".", "replace", "(", "']'", ",", "''", ")", "\n", "\n", "return", "{", "\n", "'idx'", ":", "0", ",", "\n", "'text'", ":", "sentence", ",", "\n", "'target'", ":", "{", "\n", "'span1_index'", ":", "query_index", ",", "\n", "'span1_text'", ":", "query", ",", "\n", "'span2_index'", ":", "pronoun_index", ",", "\n", "'span2_text'", ":", "pronoun", ",", "\n", "}", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_utils.extended_noun_chunks": [[36, 50], ["enumerate", "noun_chunks.add", "sorted", "noun_chunks.add", "len"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.eval_lm.WordStat.add", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.eval_lm.WordStat.add"], ["", "def", "extended_noun_chunks", "(", "sentence", ")", ":", "\n", "    ", "noun_chunks", "=", "{", "(", "np", ".", "start", ",", "np", ".", "end", ")", "for", "np", "in", "sentence", ".", "noun_chunks", "}", "\n", "np_start", ",", "cur_np", "=", "0", ",", "'NONE'", "\n", "for", "i", ",", "token", "in", "enumerate", "(", "sentence", ")", ":", "\n", "        ", "np_type", "=", "token", ".", "pos_", "if", "token", ".", "pos_", "in", "{", "'NOUN'", ",", "'PROPN'", "}", "else", "'NONE'", "\n", "if", "np_type", "!=", "cur_np", ":", "\n", "            ", "if", "cur_np", "!=", "'NONE'", ":", "\n", "                ", "noun_chunks", ".", "add", "(", "(", "np_start", ",", "i", ")", ")", "\n", "", "if", "np_type", "!=", "'NONE'", ":", "\n", "                ", "np_start", "=", "i", "\n", "", "cur_np", "=", "np_type", "\n", "", "", "if", "cur_np", "!=", "'NONE'", ":", "\n", "        ", "noun_chunks", ".", "add", "(", "(", "np_start", ",", "len", "(", "sentence", ")", ")", ")", "\n", "", "return", "[", "sentence", "[", "s", ":", "e", "]", "for", "(", "s", ",", "e", ")", "in", "sorted", "(", "noun_chunks", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_utils.find_token": [[52, 59], ["None"], "function", ["None"], ["", "def", "find_token", "(", "sentence", ",", "start_pos", ")", ":", "\n", "    ", "found_tok", "=", "None", "\n", "for", "tok", "in", "sentence", ":", "\n", "        ", "if", "tok", ".", "idx", "==", "start_pos", ":", "\n", "            ", "found_tok", "=", "tok", "\n", "break", "\n", "", "", "return", "found_tok", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_utils.find_span": [[61, 74], ["search_text.lower.lower", "sentence[].text.lower", "sentence[].text.lower.startswith", "len", "len"], "function", ["None"], ["", "def", "find_span", "(", "sentence", ",", "search_text", ",", "start", "=", "0", ")", ":", "\n", "    ", "search_text", "=", "search_text", ".", "lower", "(", ")", "\n", "for", "tok", "in", "sentence", "[", "start", ":", "]", ":", "\n", "        ", "remainder", "=", "sentence", "[", "tok", ".", "i", ":", "]", ".", "text", ".", "lower", "(", ")", "\n", "if", "remainder", ".", "startswith", "(", "search_text", ")", ":", "\n", "            ", "len_to_consume", "=", "len", "(", "search_text", ")", "\n", "start_idx", "=", "tok", ".", "idx", "\n", "for", "next_tok", "in", "sentence", "[", "tok", ".", "i", ":", "]", ":", "\n", "                ", "end_idx", "=", "next_tok", ".", "idx", "+", "len", "(", "next_tok", ".", "text", ")", "\n", "if", "end_idx", "-", "start_idx", "==", "len_to_consume", ":", "\n", "                    ", "span", "=", "sentence", "[", "tok", ".", "i", ":", "next_tok", ".", "i", "+", "1", "]", "\n", "return", "span", "\n", "", "", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_utils.get_detokenizer": [[76, 81], ["functools.lru_cache", "MosesDetokenizer"], "function", ["None"], ["", "@", "lru_cache", "(", "maxsize", "=", "1", ")", "\n", "def", "get_detokenizer", "(", ")", ":", "\n", "    ", "from", "sacremoses", "import", "MosesDetokenizer", "\n", "detok", "=", "MosesDetokenizer", "(", "lang", "=", "'en'", ")", "\n", "return", "detok", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_utils.get_spacy_nlp": [[83, 88], ["functools.lru_cache", "en_core_web_lg.load"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.load"], ["", "@", "lru_cache", "(", "maxsize", "=", "1", ")", "\n", "def", "get_spacy_nlp", "(", ")", ":", "\n", "    ", "import", "en_core_web_lg", "\n", "nlp", "=", "en_core_web_lg", ".", "load", "(", ")", "\n", "return", "nlp", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_utils.jsonl_iterator": [[90, 191], ["wsc_utils.get_detokenizer", "wsc_utils.get_spacy_nlp", "open", "json.loads", "sample[].split", "wsc_utils.jsonl_iterator.strip_pronoun"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_utils.get_detokenizer", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_utils.get_spacy_nlp", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open"], ["", "def", "jsonl_iterator", "(", "input_fname", ",", "positive_only", "=", "False", ",", "ngram_order", "=", "3", ",", "eval", "=", "False", ")", ":", "\n", "    ", "detok", "=", "get_detokenizer", "(", ")", "\n", "nlp", "=", "get_spacy_nlp", "(", ")", "\n", "\n", "with", "open", "(", "input_fname", ")", "as", "fin", ":", "\n", "        ", "for", "line", "in", "fin", ":", "\n", "            ", "sample", "=", "json", ".", "loads", "(", "line", ".", "strip", "(", ")", ")", "\n", "\n", "if", "positive_only", "and", "'label'", "in", "sample", "and", "not", "sample", "[", "'label'", "]", ":", "\n", "# only consider examples where the query is correct", "\n", "                ", "continue", "\n", "\n", "", "target", "=", "sample", "[", "'target'", "]", "\n", "\n", "# clean up the query", "\n", "query", "=", "target", "[", "'span1_text'", "]", "\n", "if", "query", "is", "not", "None", ":", "\n", "                ", "if", "'\\n'", "in", "query", ":", "\n", "                    ", "continue", "\n", "", "if", "query", ".", "endswith", "(", "'.'", ")", "or", "query", ".", "endswith", "(", "','", ")", ":", "\n", "                    ", "query", "=", "query", "[", ":", "-", "1", "]", "\n", "\n", "# split tokens", "\n", "", "", "tokens", "=", "sample", "[", "'text'", "]", ".", "split", "(", "' '", ")", "\n", "\n", "def", "strip_pronoun", "(", "x", ")", ":", "\n", "                ", "return", "x", ".", "rstrip", "(", "'.,\"'", ")", "\n", "\n", "# find the pronoun", "\n", "", "pronoun_idx", "=", "target", "[", "'span2_index'", "]", "\n", "pronoun", "=", "strip_pronoun", "(", "target", "[", "'span2_text'", "]", ")", "\n", "if", "strip_pronoun", "(", "tokens", "[", "pronoun_idx", "]", ")", "!=", "pronoun", ":", "\n", "# hack: sometimes the index is misaligned", "\n", "                ", "if", "strip_pronoun", "(", "tokens", "[", "pronoun_idx", "+", "1", "]", ")", "==", "pronoun", ":", "\n", "                    ", "pronoun_idx", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "raise", "Exception", "(", "'Misaligned pronoun!'", ")", "\n", "", "", "assert", "strip_pronoun", "(", "tokens", "[", "pronoun_idx", "]", ")", "==", "pronoun", "\n", "\n", "# split tokens before and after the pronoun", "\n", "before", "=", "tokens", "[", ":", "pronoun_idx", "]", "\n", "after", "=", "tokens", "[", "pronoun_idx", "+", "1", ":", "]", "\n", "\n", "# the GPT BPE attaches leading spaces to tokens, so we keep track", "\n", "# of whether we need spaces before or after the pronoun", "\n", "leading_space", "=", "' '", "if", "pronoun_idx", ">", "0", "else", "''", "\n", "trailing_space", "=", "' '", "if", "len", "(", "after", ")", ">", "0", "else", "''", "\n", "\n", "# detokenize", "\n", "before", "=", "detok", ".", "detokenize", "(", "before", ",", "return_str", "=", "True", ")", "\n", "pronoun", "=", "detok", ".", "detokenize", "(", "[", "pronoun", "]", ",", "return_str", "=", "True", ")", "\n", "after", "=", "detok", ".", "detokenize", "(", "after", ",", "return_str", "=", "True", ")", "\n", "\n", "# hack: when the pronoun ends in a period (or comma), move the", "\n", "# punctuation to the \"after\" part", "\n", "if", "pronoun", ".", "endswith", "(", "'.'", ")", "or", "pronoun", ".", "endswith", "(", "','", ")", ":", "\n", "                ", "after", "=", "pronoun", "[", "-", "1", "]", "+", "trailing_space", "+", "after", "\n", "pronoun", "=", "pronoun", "[", ":", "-", "1", "]", "\n", "\n", "# hack: when the \"after\" part begins with a comma or period, remove", "\n", "# the trailing space", "\n", "", "if", "after", ".", "startswith", "(", "'.'", ")", "or", "after", ".", "startswith", "(", "','", ")", ":", "\n", "                ", "trailing_space", "=", "''", "\n", "\n", "# parse sentence with spacy", "\n", "", "sentence", "=", "nlp", "(", "before", "+", "leading_space", "+", "pronoun", "+", "trailing_space", "+", "after", ")", "\n", "\n", "# find pronoun span", "\n", "start", "=", "len", "(", "before", "+", "leading_space", ")", "\n", "first_pronoun_tok", "=", "find_token", "(", "sentence", ",", "start_pos", "=", "start", ")", "\n", "pronoun_span", "=", "find_span", "(", "sentence", ",", "pronoun", ",", "start", "=", "first_pronoun_tok", ".", "i", ")", "\n", "assert", "pronoun_span", ".", "text", "==", "pronoun", "\n", "\n", "if", "eval", ":", "\n", "# convert to format where pronoun is surrounded by \"[]\" and", "\n", "# query is surrounded by \"_\"", "\n", "                ", "query_span", "=", "find_span", "(", "sentence", ",", "query", ")", "\n", "query_with_ws", "=", "'_{}_{}'", ".", "format", "(", "\n", "query_span", ".", "text", ",", "\n", "(", "' '", "if", "query_span", ".", "text_with_ws", ".", "endswith", "(", "' '", ")", "else", "''", ")", "\n", ")", "\n", "pronoun_with_ws", "=", "'[{}]{}'", ".", "format", "(", "\n", "pronoun_span", ".", "text", ",", "\n", "(", "' '", "if", "pronoun_span", ".", "text_with_ws", ".", "endswith", "(", "' '", ")", "else", "''", ")", "\n", ")", "\n", "if", "query_span", ".", "start", "<", "pronoun_span", ".", "start", ":", "\n", "                    ", "first", "=", "(", "query_span", ",", "query_with_ws", ")", "\n", "second", "=", "(", "pronoun_span", ",", "pronoun_with_ws", ")", "\n", "", "else", ":", "\n", "                    ", "first", "=", "(", "pronoun_span", ",", "pronoun_with_ws", ")", "\n", "second", "=", "(", "query_span", ",", "query_with_ws", ")", "\n", "", "sentence", "=", "(", "\n", "sentence", "[", ":", "first", "[", "0", "]", ".", "start", "]", ".", "text_with_ws", "\n", "+", "first", "[", "1", "]", "\n", "+", "sentence", "[", "first", "[", "0", "]", ".", "end", ":", "second", "[", "0", "]", ".", "start", "]", ".", "text_with_ws", "\n", "+", "second", "[", "1", "]", "\n", "+", "sentence", "[", "second", "[", "0", "]", ".", "end", ":", "]", ".", "text", "\n", ")", "\n", "yield", "sentence", ",", "sample", ".", "get", "(", "'label'", ",", "None", ")", "\n", "", "else", ":", "\n", "                ", "yield", "sentence", ",", "pronoun_span", ",", "query", ",", "sample", ".", "get", "(", "'label'", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_utils.winogrande_jsonl_iterator": [[193, 208], ["open", "json.loads", "line.strip", "sentence.index", "sentence.index"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.index", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.index"], ["", "", "", "", "def", "winogrande_jsonl_iterator", "(", "input_fname", ",", "eval", "=", "False", ")", ":", "\n", "    ", "with", "open", "(", "input_fname", ")", "as", "fin", ":", "\n", "        ", "for", "line", "in", "fin", ":", "\n", "            ", "sample", "=", "json", ".", "loads", "(", "line", ".", "strip", "(", ")", ")", "\n", "sentence", ",", "option1", ",", "option2", "=", "sample", "[", "'sentence'", "]", ",", "sample", "[", "'option1'", "]", ",", "sample", "[", "'option2'", "]", "\n", "\n", "pronoun_span", "=", "(", "sentence", ".", "index", "(", "'_'", ")", ",", "sentence", ".", "index", "(", "'_'", ")", "+", "1", ")", "\n", "\n", "if", "eval", ":", "\n", "                ", "query", ",", "cand", "=", "option1", ",", "option2", "\n", "", "else", ":", "\n", "                ", "query", "=", "option1", "if", "sample", "[", "'answer'", "]", "==", "'1'", "else", "option2", "\n", "cand", "=", "option2", "if", "sample", "[", "'answer'", "]", "==", "'1'", "else", "option1", "\n", "", "yield", "sentence", ",", "pronoun_span", ",", "query", ",", "cand", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_utils.filter_noun_chunks": [[210, 237], ["exclude_query.lower", "chunk.text.lower", "filtered_chunks.append", "all"], "function", ["None"], ["", "", "", "def", "filter_noun_chunks", "(", "chunks", ",", "exclude_pronouns", "=", "False", ",", "exclude_query", "=", "None", ",", "exact_match", "=", "False", ")", ":", "\n", "    ", "if", "exclude_pronouns", ":", "\n", "        ", "chunks", "=", "[", "\n", "np", "for", "np", "in", "chunks", "if", "(", "\n", "np", ".", "lemma_", "!=", "'-PRON-'", "\n", "and", "not", "all", "(", "tok", ".", "pos_", "==", "'PRON'", "for", "tok", "in", "np", ")", "\n", ")", "\n", "]", "\n", "\n", "", "if", "exclude_query", "is", "not", "None", ":", "\n", "        ", "excl_txt", "=", "[", "exclude_query", ".", "lower", "(", ")", "]", "\n", "filtered_chunks", "=", "[", "]", "\n", "for", "chunk", "in", "chunks", ":", "\n", "            ", "lower_chunk", "=", "chunk", ".", "text", ".", "lower", "(", ")", "\n", "found", "=", "False", "\n", "for", "excl", "in", "excl_txt", ":", "\n", "                ", "if", "(", "\n", "(", "not", "exact_match", "and", "(", "lower_chunk", "in", "excl", "or", "excl", "in", "lower_chunk", ")", ")", "\n", "or", "lower_chunk", "==", "excl", "\n", ")", ":", "\n", "                    ", "found", "=", "True", "\n", "break", "\n", "", "", "if", "not", "found", ":", "\n", "                ", "filtered_chunks", ".", "append", "(", "chunk", ")", "\n", "", "", "chunks", "=", "filtered_chunks", "\n", "\n", "", "return", "chunks", "\n", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_criterion.WSCCriterion.__init__": [[19, 27], ["fairseq.criterions.FairseqCriterion.__init__", "fairseq.data.encoders.build_bpe", "fairseq.data.encoders.build_tokenizer", "open"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "task", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "task", ")", "\n", "if", "self", ".", "args", ".", "save_predictions", "is", "not", "None", ":", "\n", "            ", "self", ".", "prediction_h", "=", "open", "(", "self", ".", "args", ".", "save_predictions", ",", "'w'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "prediction_h", "=", "None", "\n", "", "self", ".", "bpe", "=", "encoders", ".", "build_bpe", "(", "args", ")", "\n", "self", ".", "tokenizer", "=", "encoders", ".", "build_tokenizer", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_criterion.WSCCriterion.__del__": [[28, 31], ["wsc_criterion.WSCCriterion.prediction_h.close"], "methods", ["None"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "prediction_h", "is", "not", "None", ":", "\n", "            ", "self", ".", "prediction_h", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_criterion.WSCCriterion.add_args": [[32, 41], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add criterion-specific arguments to the parser.\"\"\"", "\n", "parser", ".", "add_argument", "(", "'--wsc-margin-alpha'", ",", "type", "=", "float", ",", "metavar", "=", "'A'", ",", "default", "=", "1.0", ")", "\n", "parser", ".", "add_argument", "(", "'--wsc-margin-beta'", ",", "type", "=", "float", ",", "metavar", "=", "'B'", ",", "default", "=", "0.0", ")", "\n", "parser", ".", "add_argument", "(", "'--wsc-cross-entropy'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use cross entropy formulation instead of margin loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--save-predictions'", ",", "metavar", "=", "'FILE'", ",", "\n", "help", "=", "'file to save predictions to'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_criterion.WSCCriterion.get_masked_input": [[42, 46], ["tokens.clone"], "methods", ["None"], ["", "def", "get_masked_input", "(", "self", ",", "tokens", ",", "mask", ")", ":", "\n", "        ", "masked_tokens", "=", "tokens", ".", "clone", "(", ")", "\n", "masked_tokens", "[", "mask", "]", "=", "self", ".", "task", ".", "mask", "\n", "return", "masked_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_criterion.WSCCriterion.get_lprobs": [[47, 54], ["model", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax.gather().squeeze", "mask.type_as.type_as.type_as", "mask.type_as.type_as.sum", "wsc_criterion.WSCCriterion.get_masked_input", "torch.log_softmax.gather", "tokens.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_criterion.WSCCriterion.get_masked_input"], ["", "def", "get_lprobs", "(", "self", ",", "model", ",", "tokens", ",", "mask", ")", ":", "\n", "        ", "logits", ",", "_", "=", "model", "(", "src_tokens", "=", "self", ".", "get_masked_input", "(", "tokens", ",", "mask", ")", ")", "\n", "lprobs", "=", "F", ".", "log_softmax", "(", "logits", ",", "dim", "=", "-", "1", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "scores", "=", "lprobs", ".", "gather", "(", "2", ",", "tokens", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "squeeze", "(", "-", "1", ")", "\n", "mask", "=", "mask", ".", "type_as", "(", "scores", ")", "\n", "scores", "=", "(", "scores", "*", "mask", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", "/", "mask", ".", "sum", "(", "dim", "=", "-", "1", ")", "\n", "return", "scores", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_criterion.WSCCriterion.get_loss": [[55, 67], ["torch.cross_entropy", "torch.cross_entropy", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "torch.cat().unsqueeze", "query_lprobs.new().long", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "query_lprobs.new"], "methods", ["None"], ["", "def", "get_loss", "(", "self", ",", "query_lprobs", ",", "cand_lprobs", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "wsc_cross_entropy", ":", "\n", "            ", "return", "F", ".", "cross_entropy", "(", "\n", "torch", ".", "cat", "(", "[", "query_lprobs", ",", "cand_lprobs", "]", ")", ".", "unsqueeze", "(", "0", ")", ",", "\n", "query_lprobs", ".", "new", "(", "[", "0", "]", ")", ".", "long", "(", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "return", "(", "\n", "-", "query_lprobs", "\n", "+", "self", ".", "args", ".", "wsc_margin_alpha", "*", "(", "\n", "cand_lprobs", "-", "query_lprobs", "+", "self", ".", "args", ".", "wsc_margin_beta", "\n", ")", ".", "clamp", "(", "min", "=", "0", ")", "\n", ")", ".", "sum", "(", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_criterion.WSCCriterion.forward": [[69, 115], ["enumerate", "wsc_criterion.WSCCriterion.get_lprobs", "wsc_criterion.WSCCriterion.get_lprobs", "[].item", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "[].unsqueeze", "[].unsqueeze", "wsc_criterion.WSCCriterion.get_loss", "print", "fairseq.utils.item"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_criterion.WSCCriterion.get_lprobs", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_criterion.WSCCriterion.get_lprobs", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_criterion.WSCCriterion.get_loss", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item"], ["", "", "def", "forward", "(", "self", ",", "model", ",", "sample", ",", "reduce", "=", "True", ")", ":", "\n", "# compute loss and accuracy", "\n", "        ", "loss", ",", "nloss", "=", "0.", ",", "0", "\n", "ncorrect", ",", "nqueries", "=", "0", ",", "0", "\n", "\n", "for", "i", ",", "label", "in", "enumerate", "(", "sample", "[", "'labels'", "]", ")", ":", "\n", "            ", "query_lprobs", "=", "self", ".", "get_lprobs", "(", "\n", "model", ",", "\n", "sample", "[", "'query_tokens'", "]", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ",", "\n", "sample", "[", "'query_masks'", "]", "[", "i", "]", ".", "unsqueeze", "(", "0", ")", ",", "\n", ")", "\n", "cand_lprobs", "=", "self", ".", "get_lprobs", "(", "\n", "model", ",", "\n", "sample", "[", "'candidate_tokens'", "]", "[", "i", "]", ",", "\n", "sample", "[", "'candidate_masks'", "]", "[", "i", "]", ",", "\n", ")", "\n", "\n", "pred", "=", "(", "query_lprobs", ">=", "cand_lprobs", ")", ".", "all", "(", ")", ".", "item", "(", ")", "\n", "\n", "if", "label", "is", "not", "None", ":", "\n", "                ", "label", "=", "1", "if", "label", "else", "0", "\n", "ncorrect", "+=", "1", "if", "pred", "==", "label", "else", "0", "\n", "nqueries", "+=", "1", "\n", "\n", "", "if", "label", ":", "\n", "# only compute a loss for positive instances", "\n", "                ", "nloss", "+=", "1", "\n", "loss", "+=", "self", ".", "get_loss", "(", "query_lprobs", ",", "cand_lprobs", ")", "\n", "\n", "", "id", "=", "sample", "[", "'id'", "]", "[", "i", "]", ".", "item", "(", ")", "\n", "if", "self", ".", "prediction_h", "is", "not", "None", ":", "\n", "                ", "print", "(", "'{}\\t{}\\t{}'", ".", "format", "(", "id", ",", "pred", ",", "label", ")", ",", "file", "=", "self", ".", "prediction_h", ")", "\n", "\n", "", "", "if", "nloss", "==", "0", ":", "\n", "            ", "loss", "=", "torch", ".", "tensor", "(", "0.0", ",", "requires_grad", "=", "True", ")", "\n", "\n", "", "sample_size", "=", "nqueries", "if", "nqueries", ">", "0", "else", "1", "\n", "logging_output", "=", "{", "\n", "'loss'", ":", "utils", ".", "item", "(", "loss", ".", "data", ")", "if", "reduce", "else", "loss", ".", "data", ",", "\n", "'ntokens'", ":", "sample", "[", "'ntokens'", "]", ",", "\n", "'nsentences'", ":", "sample", "[", "'nsentences'", "]", ",", "\n", "'sample_size'", ":", "sample_size", ",", "\n", "'ncorrect'", ":", "ncorrect", ",", "\n", "'nqueries'", ":", "nqueries", ",", "\n", "}", "\n", "return", "loss", ",", "sample_size", ",", "logging_output", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_criterion.WSCCriterion.aggregate_logging_outputs": [[116, 137], ["sum", "sum", "sum", "sum", "sum", "sum", "log.get", "log.get", "log.get", "log.get", "math.log", "log.get", "log.get", "float"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log"], ["", "@", "staticmethod", "\n", "def", "aggregate_logging_outputs", "(", "logging_outputs", ")", ":", "\n", "        ", "\"\"\"Aggregate logging outputs from data parallel training.\"\"\"", "\n", "loss_sum", "=", "sum", "(", "log", ".", "get", "(", "'loss'", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", "\n", "ntokens", "=", "sum", "(", "log", ".", "get", "(", "'ntokens'", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", "\n", "nsentences", "=", "sum", "(", "log", ".", "get", "(", "'nsentences'", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", "\n", "sample_size", "=", "sum", "(", "log", ".", "get", "(", "'sample_size'", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", "\n", "\n", "agg_output", "=", "{", "\n", "'loss'", ":", "loss_sum", "/", "sample_size", "/", "math", ".", "log", "(", "2", ")", ",", "\n", "'ntokens'", ":", "ntokens", ",", "\n", "'nsentences'", ":", "nsentences", ",", "\n", "'sample_size'", ":", "sample_size", ",", "\n", "}", "\n", "\n", "ncorrect", "=", "sum", "(", "log", ".", "get", "(", "'ncorrect'", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", "\n", "nqueries", "=", "sum", "(", "log", ".", "get", "(", "'nqueries'", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", "\n", "if", "nqueries", ">", "0", ":", "\n", "            ", "agg_output", "[", "'accuracy'", "]", "=", "ncorrect", "/", "float", "(", "nqueries", ")", "\n", "\n", "", "return", "agg_output", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_criterion.WinograndeCriterion.forward": [[141, 167], ["wsc_criterion.WinograndeCriterion.get_lprobs", "wsc_criterion.WinograndeCriterion.get_lprobs", "wsc_criterion.WinograndeCriterion.get_loss", "sample[].size", "pred.sum().item", "pred.sum", "fairseq.utils.item"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_criterion.WSCCriterion.get_lprobs", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_criterion.WSCCriterion.get_lprobs", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.wsc.wsc_criterion.WSCCriterion.get_loss", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item"], ["    ", "def", "forward", "(", "self", ",", "model", ",", "sample", ",", "reduce", "=", "True", ")", ":", "\n", "# compute loss and accuracy", "\n", "        ", "query_lprobs", "=", "self", ".", "get_lprobs", "(", "\n", "model", ",", "\n", "sample", "[", "'query_tokens'", "]", ",", "\n", "sample", "[", "'query_masks'", "]", ",", "\n", ")", "\n", "cand_lprobs", "=", "self", ".", "get_lprobs", "(", "\n", "model", ",", "\n", "sample", "[", "'candidate_tokens'", "]", ",", "\n", "sample", "[", "'candidate_masks'", "]", ",", "\n", ")", "\n", "pred", "=", "query_lprobs", ">=", "cand_lprobs", "\n", "loss", "=", "self", ".", "get_loss", "(", "query_lprobs", ",", "cand_lprobs", ")", "\n", "\n", "sample_size", "=", "sample", "[", "'query_tokens'", "]", ".", "size", "(", "0", ")", "\n", "ncorrect", "=", "pred", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "logging_output", "=", "{", "\n", "'loss'", ":", "utils", ".", "item", "(", "loss", ".", "data", ")", "if", "reduce", "else", "loss", ".", "data", ",", "\n", "'ntokens'", ":", "sample", "[", "'ntokens'", "]", ",", "\n", "'nsentences'", ":", "sample", "[", "'nsentences'", "]", ",", "\n", "'sample_size'", ":", "sample_size", ",", "\n", "'ncorrect'", ":", "ncorrect", ",", "\n", "'nqueries'", ":", "sample_size", ",", "\n", "}", "\n", "return", "loss", ",", "sample_size", ",", "logging_output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.w2l_decoder.W2lDecoder.__init__": [[29, 47], ["len", "tgt_dict.index", "RuntimeError", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.index"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "tgt_dict", ")", ":", "\n", "        ", "self", ".", "tgt_dict", "=", "tgt_dict", "\n", "self", ".", "vocab_size", "=", "len", "(", "tgt_dict", ")", "\n", "self", ".", "nbest", "=", "args", ".", "nbest", "\n", "\n", "# criterion-specific init", "\n", "if", "args", ".", "criterion", "==", "\"ctc_loss\"", ":", "\n", "            ", "self", ".", "criterion_type", "=", "CriterionType", ".", "CTC", "\n", "self", ".", "blank", "=", "tgt_dict", ".", "index", "(", "\"<ctc_blank>\"", ")", "\n", "self", ".", "asg_transitions", "=", "None", "\n", "", "elif", "args", ".", "criterion", "==", "\"asg_loss\"", ":", "\n", "            ", "self", ".", "criterion_type", "=", "CriterionType", ".", "ASG", "\n", "self", ".", "blank", "=", "-", "1", "\n", "self", ".", "asg_transitions", "=", "args", ".", "asg_transitions", "\n", "self", ".", "max_replabel", "=", "args", ".", "max_replabel", "\n", "assert", "len", "(", "self", ".", "asg_transitions", ")", "==", "self", ".", "vocab_size", "**", "2", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "f\"unknown criterion: {args.criterion}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.w2l_decoder.W2lDecoder.generate": [[48, 57], ["w2l_decoder.W2lDecoder.get_emissions", "w2l_decoder.W2lDecoder.decode", "sample[].items"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.w2l_decoder.W2lDecoder.get_emissions", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.decode"], ["", "", "def", "generate", "(", "self", ",", "models", ",", "sample", ",", "prefix_tokens", "=", "None", ")", ":", "\n", "        ", "\"\"\"Generate a batch of inferences.\"\"\"", "\n", "# model.forward normally channels prev_output_tokens into the decoder", "\n", "# separately, but SequenceGenerator directly calls model.encoder", "\n", "encoder_input", "=", "{", "\n", "k", ":", "v", "for", "k", ",", "v", "in", "sample", "[", "\"net_input\"", "]", ".", "items", "(", ")", "if", "k", "!=", "\"prev_output_tokens\"", "\n", "}", "\n", "emissions", "=", "self", ".", "get_emissions", "(", "models", ",", "encoder_input", ")", "\n", "return", "self", ".", "decode", "(", "emissions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.w2l_decoder.W2lDecoder.get_emissions": [[58, 66], ["models[].encoder", "models[].get_normalized_probs.transpose().float().cpu().contiguous", "models[].get_normalized_probs", "models[].get_normalized_probs.transpose().float().cpu", "models[].get_normalized_probs.transpose().float", "models[].get_normalized_probs.transpose"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqMultiModel.encoder", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.get_normalized_probs"], ["", "def", "get_emissions", "(", "self", ",", "models", ",", "encoder_input", ")", ":", "\n", "        ", "\"\"\"Run encoder and normalize emissions\"\"\"", "\n", "encoder_out", "=", "models", "[", "0", "]", ".", "encoder", "(", "**", "encoder_input", ")", "\n", "if", "self", ".", "criterion_type", "==", "CriterionType", ".", "CTC", ":", "\n", "            ", "emissions", "=", "models", "[", "0", "]", ".", "get_normalized_probs", "(", "encoder_out", ",", "log_probs", "=", "True", ")", "\n", "", "elif", "self", ".", "criterion_type", "==", "CriterionType", ".", "ASG", ":", "\n", "            ", "emissions", "=", "encoder_out", "[", "\"encoder_out\"", "]", "\n", "", "return", "emissions", ".", "transpose", "(", "0", ",", "1", ")", ".", "float", "(", ")", ".", "cpu", "(", ")", ".", "contiguous", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.w2l_decoder.W2lDecoder.get_tokens": [[67, 76], ["filter", "torch.LongTensor", "filter", "list", "itertools.groupby", "examples.speech_recognition.data.replabels.unpack_replabels", "list"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.replabels.unpack_replabels"], ["", "def", "get_tokens", "(", "self", ",", "idxs", ")", ":", "\n", "        ", "\"\"\"Normalize tokens by handling CTC blank, ASG replabels, etc.\"\"\"", "\n", "idxs", "=", "(", "g", "[", "0", "]", "for", "g", "in", "it", ".", "groupby", "(", "idxs", ")", ")", "\n", "idxs", "=", "filter", "(", "lambda", "x", ":", "x", ">=", "0", ",", "idxs", ")", "\n", "if", "self", ".", "criterion_type", "==", "CriterionType", ".", "CTC", ":", "\n", "            ", "idxs", "=", "filter", "(", "lambda", "x", ":", "x", "!=", "self", ".", "blank", ",", "idxs", ")", "\n", "", "elif", "self", ".", "criterion_type", "==", "CriterionType", ".", "ASG", ":", "\n", "            ", "idxs", "=", "unpack_replabels", "(", "list", "(", "idxs", ")", ",", "self", ".", "tgt_dict", ",", "self", ".", "max_replabel", ")", "\n", "", "return", "torch", ".", "LongTensor", "(", "list", "(", "idxs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.w2l_decoder.W2lViterbiDecoder.__init__": [[79, 81], ["w2l_decoder.W2lDecoder.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "tgt_dict", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "tgt_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.w2l_decoder.W2lViterbiDecoder.decode": [[82, 103], ["emissions.size", "torch.IntTensor", "torch.ByteTensor", "wav2letter.criterion.CpuViterbiPath.compute", "torch.FloatTensor().zero_", "torch.FloatTensor().view", "wav2letter.criterion.CpuViterbiPath.get_workspace_size", "wav2letter.criterion.get_data_ptr_as_bytes", "wav2letter.criterion.get_data_ptr_as_bytes", "wav2letter.criterion.get_data_ptr_as_bytes", "wav2letter.criterion.get_data_ptr_as_bytes", "range", "torch.FloatTensor", "torch.FloatTensor", "w2l_decoder.W2lViterbiDecoder.get_tokens", "viterbi_path[].tolist"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.ordered_word_verb_incorp.get_tokens"], ["", "def", "decode", "(", "self", ",", "emissions", ")", ":", "\n", "        ", "B", ",", "T", ",", "N", "=", "emissions", ".", "size", "(", ")", "\n", "hypos", "=", "[", "]", "\n", "if", "self", ".", "asg_transitions", "is", "None", ":", "\n", "            ", "transitions", "=", "torch", ".", "FloatTensor", "(", "N", ",", "N", ")", ".", "zero_", "(", ")", "\n", "", "else", ":", "\n", "            ", "transitions", "=", "torch", ".", "FloatTensor", "(", "self", ".", "asg_transitions", ")", ".", "view", "(", "N", ",", "N", ")", "\n", "", "viterbi_path", "=", "torch", ".", "IntTensor", "(", "B", ",", "T", ")", "\n", "workspace", "=", "torch", ".", "ByteTensor", "(", "CpuViterbiPath", ".", "get_workspace_size", "(", "B", ",", "T", ",", "N", ")", ")", "\n", "CpuViterbiPath", ".", "compute", "(", "\n", "B", ",", "\n", "T", ",", "\n", "N", ",", "\n", "get_data_ptr_as_bytes", "(", "emissions", ")", ",", "\n", "get_data_ptr_as_bytes", "(", "transitions", ")", ",", "\n", "get_data_ptr_as_bytes", "(", "viterbi_path", ")", ",", "\n", "get_data_ptr_as_bytes", "(", "workspace", ")", ",", "\n", ")", "\n", "return", "[", "\n", "[", "{", "\"tokens\"", ":", "self", ".", "get_tokens", "(", "viterbi_path", "[", "b", "]", ".", "tolist", "(", ")", ")", ",", "\"score\"", ":", "0", "}", "]", "\n", "for", "b", "in", "range", "(", "B", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.w2l_decoder.W2lKenLMDecoder.__init__": [[107, 147], ["w2l_decoder.W2lDecoder.__init__", "tgt_dict.index", "wav2letter.common.load_words", "wav2letter.common.create_word_dict", "w2l_decoder.W2lKenLMDecoder.word_dict.get_index", "wav2letter.decoder.KenLM", "wav2letter.decoder.Trie", "w2l_decoder.W2lKenLMDecoder.lm.start", "w2l_decoder.W2lKenLMDecoder.lexicon.items", "w2l_decoder.W2lKenLMDecoder.trie.smear", "wav2letter.decoder.DecoderOptions", "wav2letter.decoder.WordLMDecoder", "w2l_decoder.W2lKenLMDecoder.word_dict.get_index", "w2l_decoder.W2lKenLMDecoder.lm.score", "w2l_decoder.W2lKenLMDecoder.trie.insert", "tgt_dict.index"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.index", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.StopwatchMeter.start", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.bleu.Scorer.score", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.index"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "tgt_dict", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "tgt_dict", ")", "\n", "\n", "self", ".", "silence", "=", "tgt_dict", ".", "index", "(", "args", ".", "silence_token", ")", "\n", "\n", "self", ".", "lexicon", "=", "load_words", "(", "args", ".", "lexicon", ")", "\n", "self", ".", "word_dict", "=", "create_word_dict", "(", "self", ".", "lexicon", ")", "\n", "self", ".", "unk_word", "=", "self", ".", "word_dict", ".", "get_index", "(", "\"<unk>\"", ")", "\n", "\n", "self", ".", "lm", "=", "KenLM", "(", "args", ".", "kenlm_model", ",", "self", ".", "word_dict", ")", "\n", "self", ".", "trie", "=", "Trie", "(", "self", ".", "vocab_size", ",", "self", ".", "silence", ")", "\n", "\n", "start_state", "=", "self", ".", "lm", ".", "start", "(", "False", ")", "\n", "for", "word", ",", "spellings", "in", "self", ".", "lexicon", ".", "items", "(", ")", ":", "\n", "            ", "word_idx", "=", "self", ".", "word_dict", ".", "get_index", "(", "word", ")", "\n", "_", ",", "score", "=", "self", ".", "lm", ".", "score", "(", "start_state", ",", "word_idx", ")", "\n", "for", "spelling", "in", "spellings", ":", "\n", "                ", "spelling_idxs", "=", "[", "tgt_dict", ".", "index", "(", "token", ")", "for", "token", "in", "spelling", "]", "\n", "self", ".", "trie", ".", "insert", "(", "spelling_idxs", ",", "word_idx", ",", "score", ")", "\n", "", "", "self", ".", "trie", ".", "smear", "(", "SmearingMode", ".", "MAX", ")", "\n", "\n", "self", ".", "decoder_opts", "=", "DecoderOptions", "(", "\n", "args", ".", "beam", ",", "\n", "args", ".", "beam_threshold", ",", "\n", "args", ".", "lm_weight", ",", "\n", "args", ".", "word_score", ",", "\n", "args", ".", "unk_weight", ",", "\n", "False", ",", "\n", "args", ".", "sil_weight", ",", "\n", "self", ".", "criterion_type", ",", "\n", ")", "\n", "\n", "self", ".", "decoder", "=", "WordLMDecoder", "(", "\n", "self", ".", "decoder_opts", ",", "\n", "self", ".", "trie", ",", "\n", "self", ".", "lm", ",", "\n", "self", ".", "silence", ",", "\n", "self", ".", "blank", ",", "\n", "self", ".", "unk_word", ",", "\n", "self", ".", "asg_transitions", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.w2l_decoder.W2lKenLMDecoder.decode": [[149, 162], ["emissions.size", "range", "hypos.append", "emissions.data_ptr", "w2l_decoder.W2lKenLMDecoder.decoder.decode", "emissions.stride", "w2l_decoder.W2lKenLMDecoder.get_tokens"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.decode", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.ordered_word_verb_incorp.get_tokens"], ["", "def", "decode", "(", "self", ",", "emissions", ")", ":", "\n", "        ", "B", ",", "T", ",", "N", "=", "emissions", ".", "size", "(", ")", "\n", "hypos", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "B", ")", ":", "\n", "            ", "emissions_ptr", "=", "emissions", ".", "data_ptr", "(", ")", "+", "4", "*", "b", "*", "emissions", ".", "stride", "(", "0", ")", "\n", "nbest_results", "=", "self", ".", "decoder", ".", "decode", "(", "emissions_ptr", ",", "T", ",", "N", ")", "[", ":", "self", ".", "nbest", "]", "\n", "hypos", ".", "append", "(", "\n", "[", "\n", "{", "\"tokens\"", ":", "self", ".", "get_tokens", "(", "result", ".", "tokens", ")", ",", "\"score\"", ":", "result", ".", "score", "}", "\n", "for", "result", "in", "nbest_results", "\n", "]", "\n", ")", "\n", "", "return", "hypos", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.infer.add_asr_eval_argument": [[26, 57], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "function", ["None"], ["def", "add_asr_eval_argument", "(", "parser", ")", ":", "\n", "    ", "parser", ".", "add_argument", "(", "\"--kspmodel\"", ",", "default", "=", "None", ",", "help", "=", "\"sentence piece model\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--wfstlm\"", ",", "default", "=", "None", ",", "help", "=", "\"wfstlm on dictonary output units\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--rnnt_decoding_type\"", ",", "\n", "default", "=", "\"greedy\"", ",", "\n", "help", "=", "\"wfstlm on dictonary\\\noutput units\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--lm-weight\"", ",", "\n", "\"--lm_weight\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.2", ",", "\n", "help", "=", "\"weight for lm while interpolating with neural score\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--rnnt_len_penalty\"", ",", "default", "=", "-", "0.5", ",", "help", "=", "\"rnnt length penalty on word level\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--w2l-decoder\"", ",", "choices", "=", "[", "\"viterbi\"", ",", "\"kenlm\"", "]", ",", "help", "=", "\"use a w2l decoder\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\"--lexicon\"", ",", "help", "=", "\"lexicon for w2l decoder\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--kenlm-model\"", ",", "help", "=", "\"kenlm model for w2l decoder\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--beam-threshold\"", ",", "type", "=", "float", ",", "default", "=", "25.0", ")", "\n", "parser", ".", "add_argument", "(", "\"--word-score\"", ",", "type", "=", "float", ",", "default", "=", "1.0", ")", "\n", "parser", ".", "add_argument", "(", "\"--unk-weight\"", ",", "type", "=", "float", ",", "default", "=", "-", "math", ".", "inf", ")", "\n", "parser", ".", "add_argument", "(", "\"--sil-weight\"", ",", "type", "=", "float", ",", "default", "=", "0.0", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.infer.check_args": [[59, 68], ["None"], "function", ["None"], ["", "def", "check_args", "(", "args", ")", ":", "\n", "    ", "assert", "args", ".", "path", "is", "not", "None", ",", "\"--path required for generation!\"", "\n", "assert", "args", ".", "results_path", "is", "not", "None", ",", "\"--results_path required for generation!\"", "\n", "assert", "(", "\n", "not", "args", ".", "sampling", "or", "args", ".", "nbest", "==", "args", ".", "beam", "\n", ")", ",", "\"--sampling requires --nbest to be equal to --beam\"", "\n", "assert", "(", "\n", "args", ".", "replace_unk", "is", "None", "or", "args", ".", "dataset_impl", "==", "\"raw\"", "\n", ")", ",", "\"--replace-unk requires a raw text dataset (--dataset-impl=raw)\"", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.infer.get_dataset_itr": [[70, 82], ["task.get_batch_iterator().next_epoch_itr", "task.get_batch_iterator", "task.dataset"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.EpochBatchIterator.next_epoch_itr", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.fairseq_task.FairseqTask.get_batch_iterator", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.fairseq_task.FairseqTask.dataset"], ["", "def", "get_dataset_itr", "(", "args", ",", "task", ")", ":", "\n", "    ", "return", "task", ".", "get_batch_iterator", "(", "\n", "dataset", "=", "task", ".", "dataset", "(", "args", ".", "gen_subset", ")", ",", "\n", "max_tokens", "=", "args", ".", "max_tokens", ",", "\n", "max_sentences", "=", "args", ".", "max_sentences", ",", "\n", "max_positions", "=", "(", "1000000.0", ",", "1000000.0", ")", ",", "\n", "ignore_invalid_inputs", "=", "args", ".", "skip_invalid_size_inputs_valid_test", ",", "\n", "required_batch_size_multiple", "=", "args", ".", "required_batch_size_multiple", ",", "\n", "num_shards", "=", "args", ".", "num_shards", ",", "\n", "shard_id", "=", "args", ".", "shard_id", ",", "\n", "num_workers", "=", "args", ".", "num_workers", ",", "\n", ")", ".", "next_epoch_itr", "(", "shuffle", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.infer.process_predictions": [[84, 104], ["tgt_dict.string", "sp.DecodePieces", "print", "print", "tgt_dict.string", "sp.DecodePieces", "print", "print", "min", "hypo[].int().cpu", "tgt_dict.string.split", "tgt_dict.string.split", "logger.debug", "logger.debug", "logger.debug", "len", "hypo[].int"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.string", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.string", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], ["", "def", "process_predictions", "(", "\n", "args", ",", "hypos", ",", "sp", ",", "tgt_dict", ",", "target_tokens", ",", "res_files", ",", "speaker", ",", "id", "\n", ")", ":", "\n", "    ", "for", "hypo", "in", "hypos", "[", ":", "min", "(", "len", "(", "hypos", ")", ",", "args", ".", "nbest", ")", "]", ":", "\n", "        ", "hyp_pieces", "=", "tgt_dict", ".", "string", "(", "hypo", "[", "\"tokens\"", "]", ".", "int", "(", ")", ".", "cpu", "(", ")", ")", "\n", "hyp_words", "=", "sp", ".", "DecodePieces", "(", "hyp_pieces", ".", "split", "(", ")", ")", "\n", "print", "(", "\n", "\"{} ({}-{})\"", ".", "format", "(", "hyp_pieces", ",", "speaker", ",", "id", ")", ",", "file", "=", "res_files", "[", "\"hypo.units\"", "]", "\n", ")", "\n", "print", "(", "\"{} ({}-{})\"", ".", "format", "(", "hyp_words", ",", "speaker", ",", "id", ")", ",", "file", "=", "res_files", "[", "\"hypo.words\"", "]", ")", "\n", "\n", "tgt_pieces", "=", "tgt_dict", ".", "string", "(", "target_tokens", ")", "\n", "tgt_words", "=", "sp", ".", "DecodePieces", "(", "tgt_pieces", ".", "split", "(", ")", ")", "\n", "print", "(", "\"{} ({}-{})\"", ".", "format", "(", "tgt_pieces", ",", "speaker", ",", "id", ")", ",", "file", "=", "res_files", "[", "\"ref.units\"", "]", ")", "\n", "print", "(", "\"{} ({}-{})\"", ".", "format", "(", "tgt_words", ",", "speaker", ",", "id", ")", ",", "file", "=", "res_files", "[", "\"ref.words\"", "]", ")", "\n", "# only score top hypothesis", "\n", "if", "not", "args", ".", "quiet", ":", "\n", "            ", "logger", ".", "debug", "(", "\"HYPO:\"", "+", "hyp_words", ")", "\n", "logger", ".", "debug", "(", "\"TARGET:\"", "+", "tgt_words", ")", "\n", "logger", ".", "debug", "(", "\"___________________\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.infer.prepare_result_files": [[106, 121], ["os.path.join", "open", "infer.prepare_result_files.get_res_file"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open"], ["", "", "", "def", "prepare_result_files", "(", "args", ")", ":", "\n", "    ", "def", "get_res_file", "(", "file_prefix", ")", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "results_path", ",", "\n", "\"{}-{}-{}.txt\"", ".", "format", "(", "\n", "file_prefix", ",", "os", ".", "path", ".", "basename", "(", "args", ".", "path", ")", ",", "args", ".", "gen_subset", "\n", ")", ",", "\n", ")", "\n", "return", "open", "(", "path", ",", "\"w\"", ",", "buffering", "=", "1", ")", "\n", "\n", "", "return", "{", "\n", "\"hypo.words\"", ":", "get_res_file", "(", "\"hypo.word\"", ")", ",", "\n", "\"hypo.units\"", ":", "get_res_file", "(", "\"hypo.units\"", ")", ",", "\n", "\"ref.words\"", ":", "get_res_file", "(", "\"ref.word\"", ")", ",", "\n", "\"ref.units\"", ":", "get_res_file", "(", "\"ref.units\"", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.infer.load_models_and_criterions": [[124, 146], ["fairseq.checkpoint_utils.load_checkpoint_to_cpu", "tasks.setup_task.build_model", "task.build_model.load_state_dict", "models.append", "tasks.setup_task.build_criterion", "criterions.append", "os.path.exists", "IOError", "fairseq.tasks.setup_task", "task.build_criterion.load_state_dict"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.checkpoint_utils.load_checkpoint_to_cpu", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.build_model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.load_state_dict", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.composite_loss.CompositeLoss.build_criterion", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyLMTask.setup_task", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.load_state_dict"], ["", "def", "load_models_and_criterions", "(", "filenames", ",", "arg_overrides", "=", "None", ",", "task", "=", "None", ")", ":", "\n", "    ", "models", "=", "[", "]", "\n", "criterions", "=", "[", "]", "\n", "for", "filename", "in", "filenames", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "filename", ")", ":", "\n", "            ", "raise", "IOError", "(", "\"Model file not found: {}\"", ".", "format", "(", "filename", ")", ")", "\n", "", "state", "=", "checkpoint_utils", ".", "load_checkpoint_to_cpu", "(", "filename", ",", "arg_overrides", ")", "\n", "\n", "args", "=", "state", "[", "\"args\"", "]", "\n", "if", "task", "is", "None", ":", "\n", "            ", "task", "=", "tasks", ".", "setup_task", "(", "args", ")", "\n", "\n", "# build model for ensemble", "\n", "", "model", "=", "task", ".", "build_model", "(", "args", ")", "\n", "model", ".", "load_state_dict", "(", "state", "[", "\"model\"", "]", ",", "strict", "=", "True", ")", "\n", "models", ".", "append", "(", "model", ")", "\n", "\n", "criterion", "=", "task", ".", "build_criterion", "(", "args", ")", "\n", "if", "\"criterion\"", "in", "state", ":", "\n", "            ", "criterion", ".", "load_state_dict", "(", "state", "[", "\"criterion\"", "]", ",", "strict", "=", "True", ")", "\n", "", "criterions", ".", "append", "(", "criterion", ")", "\n", "", "return", "models", ",", "criterions", ",", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.infer.optimize_models": [[148, 160], ["model.make_generation_fast_", "model.half", "model.cuda"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.TransformerDecoderLayer.make_generation_fast_", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lightconv_layer.lightconv_layer.LightconvLayer.half"], ["", "def", "optimize_models", "(", "args", ",", "use_cuda", ",", "models", ")", ":", "\n", "    ", "\"\"\"Optimize ensemble for generation\n    \"\"\"", "\n", "for", "model", "in", "models", ":", "\n", "        ", "model", ".", "make_generation_fast_", "(", "\n", "beamable_mm_beam_size", "=", "None", "if", "args", ".", "no_beamable_mm", "else", "args", ".", "beam", ",", "\n", "need_attn", "=", "args", ".", "print_alignment", ",", "\n", ")", "\n", "if", "args", ".", "fp16", ":", "\n", "            ", "model", ".", "half", "(", ")", "\n", "", "if", "use_cuda", ":", "\n", "            ", "model", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.infer.main": [[162, 258], ["infer.check_args", "fairseq.utils.import_user_module", "logger.info", "fairseq.tasks.setup_task", "tasks.setup_task.load_dataset", "logger.info", "logger.info", "logger.info", "infer.load_models_and_criterions", "infer.optimize_models", "infer.get_dataset_itr", "fairseq.meters.StopwatchMeter", "tasks.setup_task.build_generator", "sentencepiece.SentencePieceProcessor", "spm.SentencePieceProcessor.Load", "infer.prepare_result_files", "logger.info", "logger.info", "torch.cuda.is_available", "args.path.split", "torch.flatten().tolist", "os.path.exists", "os.makedirs", "os.path.join", "fairseq.progress_bar.build_progress_bar", "fairseq.meters.TimeMeter", "len", "eval", "fairseq.meters.StopwatchMeter.start", "tasks.setup_task.inference_step", "sum", "fairseq.meters.StopwatchMeter.stop", "enumerate", "fairseq.meters.TimeMeter.update", "t.log", "tasks.setup_task.dataset", "torch.flatten", "fairseq.utils.move_to_cuda", "sample[].tolist", "fairseq.utils.strip_pad().int().cpu", "infer.process_predictions", "len", "round", "tasks.setup_task.dataset", "int", "tasks.setup_task.dataset", "int", "fairseq.utils.strip_pad().int", "fairseq.utils.strip_pad", "tgt_dict.pad"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.infer.check_args", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.import_user_module", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyLMTask.setup_task", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyLMTask.load_dataset", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.infer.load_models_and_criterions", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.infer.optimize_models", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.infer.get_dataset_itr", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.fairseq_task.FairseqTask.build_generator", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.infer.prepare_result_files", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.build_progress_bar", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.StopwatchMeter.start", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.translation_moe.TranslationMoETask.inference_step", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.StopwatchMeter.stop", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.update", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.fairseq_task.FairseqTask.dataset", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.move_to_cuda", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.infer.process_predictions", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.fairseq_task.FairseqTask.dataset", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.fairseq_task.FairseqTask.dataset", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.strip_pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad"], ["", "", "", "def", "main", "(", "args", ")", ":", "\n", "    ", "check_args", "(", "args", ")", "\n", "import_user_module", "(", "args", ")", "\n", "\n", "if", "args", ".", "max_tokens", "is", "None", "and", "args", ".", "max_sentences", "is", "None", ":", "\n", "        ", "args", ".", "max_tokens", "=", "30000", "\n", "", "logger", ".", "info", "(", "args", ")", "\n", "\n", "use_cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "and", "not", "args", ".", "cpu", "\n", "\n", "# Load dataset splits", "\n", "task", "=", "tasks", ".", "setup_task", "(", "args", ")", "\n", "task", ".", "load_dataset", "(", "args", ".", "gen_subset", ")", "\n", "logger", ".", "info", "(", "\n", "\"| {} {} {} examples\"", ".", "format", "(", "\n", "args", ".", "data", ",", "args", ".", "gen_subset", ",", "len", "(", "task", ".", "dataset", "(", "args", ".", "gen_subset", ")", ")", "\n", ")", "\n", ")", "\n", "\n", "# Set dictionary", "\n", "tgt_dict", "=", "task", ".", "target_dictionary", "\n", "\n", "logger", ".", "info", "(", "\"| decoding with criterion {}\"", ".", "format", "(", "args", ".", "criterion", ")", ")", "\n", "\n", "# Load ensemble", "\n", "logger", ".", "info", "(", "\"| loading model(s) from {}\"", ".", "format", "(", "args", ".", "path", ")", ")", "\n", "models", ",", "criterions", ",", "_model_args", "=", "load_models_and_criterions", "(", "\n", "args", ".", "path", ".", "split", "(", "os", ".", "pathsep", ")", ",", "\n", "arg_overrides", "=", "eval", "(", "args", ".", "model_overrides", ")", ",", "# noqa", "\n", "task", "=", "task", ",", "\n", ")", "\n", "optimize_models", "(", "args", ",", "use_cuda", ",", "models", ")", "\n", "\n", "# hack to pass transitions to W2lDecoder", "\n", "if", "args", ".", "criterion", "==", "\"asg_loss\"", ":", "\n", "        ", "trans", "=", "criterions", "[", "0", "]", ".", "asg", ".", "trans", ".", "data", "\n", "args", ".", "asg_transitions", "=", "torch", ".", "flatten", "(", "trans", ")", ".", "tolist", "(", ")", "\n", "\n", "# Load dataset (possibly sharded)", "\n", "", "itr", "=", "get_dataset_itr", "(", "args", ",", "task", ")", "\n", "\n", "# Initialize generator", "\n", "gen_timer", "=", "StopwatchMeter", "(", ")", "\n", "generator", "=", "task", ".", "build_generator", "(", "args", ")", "\n", "\n", "num_sentences", "=", "0", "\n", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "results_path", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "args", ".", "results_path", ")", "\n", "\n", "", "sp", "=", "spm", ".", "SentencePieceProcessor", "(", ")", "\n", "sp", ".", "Load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "\"spm.model\"", ")", ")", "\n", "\n", "res_files", "=", "prepare_result_files", "(", "args", ")", "\n", "with", "progress_bar", ".", "build_progress_bar", "(", "args", ",", "itr", ")", "as", "t", ":", "\n", "        ", "wps_meter", "=", "TimeMeter", "(", ")", "\n", "for", "sample", "in", "t", ":", "\n", "            ", "sample", "=", "utils", ".", "move_to_cuda", "(", "sample", ")", "if", "use_cuda", "else", "sample", "\n", "if", "\"net_input\"", "not", "in", "sample", ":", "\n", "                ", "continue", "\n", "\n", "", "prefix_tokens", "=", "None", "\n", "if", "args", ".", "prefix_size", ">", "0", ":", "\n", "                ", "prefix_tokens", "=", "sample", "[", "\"target\"", "]", "[", ":", ",", ":", "args", ".", "prefix_size", "]", "\n", "\n", "", "gen_timer", ".", "start", "(", ")", "\n", "hypos", "=", "task", ".", "inference_step", "(", "generator", ",", "models", ",", "sample", ",", "prefix_tokens", ")", "\n", "num_generated_tokens", "=", "sum", "(", "len", "(", "h", "[", "0", "]", "[", "\"tokens\"", "]", ")", "for", "h", "in", "hypos", ")", "\n", "gen_timer", ".", "stop", "(", "num_generated_tokens", ")", "\n", "\n", "for", "i", ",", "sample_id", "in", "enumerate", "(", "sample", "[", "\"id\"", "]", ".", "tolist", "(", ")", ")", ":", "\n", "                ", "speaker", "=", "task", ".", "dataset", "(", "args", ".", "gen_subset", ")", ".", "speakers", "[", "int", "(", "sample_id", ")", "]", "\n", "id", "=", "task", ".", "dataset", "(", "args", ".", "gen_subset", ")", ".", "ids", "[", "int", "(", "sample_id", ")", "]", "\n", "target_tokens", "=", "(", "\n", "utils", ".", "strip_pad", "(", "sample", "[", "\"target\"", "]", "[", "i", ",", ":", "]", ",", "tgt_dict", ".", "pad", "(", ")", ")", ".", "int", "(", ")", ".", "cpu", "(", ")", "\n", ")", "\n", "# Process top predictions", "\n", "process_predictions", "(", "\n", "args", ",", "hypos", "[", "i", "]", ",", "sp", ",", "tgt_dict", ",", "target_tokens", ",", "res_files", ",", "speaker", ",", "id", "\n", ")", "\n", "\n", "", "wps_meter", ".", "update", "(", "num_generated_tokens", ")", "\n", "t", ".", "log", "(", "{", "\"wps\"", ":", "round", "(", "wps_meter", ".", "avg", ")", "}", ")", "\n", "num_sentences", "+=", "sample", "[", "\"nsentences\"", "]", "\n", "\n", "", "", "logger", ".", "info", "(", "\n", "\"| Processed {} sentences ({} tokens) in {:.1f}s ({:.2f}\"", "\n", "\"sentences/s, {:.2f} tokens/s)\"", ".", "format", "(", "\n", "num_sentences", ",", "\n", "gen_timer", ".", "n", ",", "\n", "gen_timer", ".", "sum", ",", "\n", "num_sentences", "/", "gen_timer", ".", "sum", ",", "\n", "1.0", "/", "gen_timer", ".", "avg", ",", "\n", ")", "\n", ")", "\n", "logger", ".", "info", "(", "\"| Generate {} with beam={}\"", ".", "format", "(", "args", ".", "gen_subset", ",", "args", ".", "beam", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.infer.cli_main": [[260, 265], ["fairseq.options.get_generation_parser", "infer.add_asr_eval_argument", "fairseq.options.parse_args_and_arch", "infer.main"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.get_generation_parser", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.infer.add_asr_eval_argument", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.parse_args_and_arch", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.inter_rep.main"], ["", "def", "cli_main", "(", ")", ":", "\n", "    ", "parser", "=", "options", ".", "get_generation_parser", "(", ")", "\n", "parser", "=", "add_asr_eval_argument", "(", "parser", ")", "\n", "args", "=", "options", ".", "parse_args_and_arch", "(", "parser", ")", "\n", "main", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.test_collaters.TestSeq2SeqCollator.test_collate": [[15, 51], ["examples.speech_recognition.data.collaters.Seq2SeqCollater", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "examples.speech_recognition.data.collaters.Seq2SeqCollater.collate", "test_collaters.TestSeq2SeqCollator.assertTensorEqual", "test_collaters.TestSeq2SeqCollator.assertEqual", "test_collaters.TestSeq2SeqCollator.assertTensorEqual", "test_collaters.TestSeq2SeqCollator.assertTensorEqual", "test_collaters.TestSeq2SeqCollator.assertTensorEqual", "test_collaters.TestSeq2SeqCollator.assertTensorEqual", "test_collaters.TestSeq2SeqCollator.assertEqual", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.denoising_dataset.collate", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertTensorEqual", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertTensorEqual", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertTensorEqual", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertTensorEqual", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertTensorEqual"], ["    ", "def", "test_collate", "(", "self", ")", ":", "\n", "\n", "        ", "eos_idx", "=", "1", "\n", "pad_idx", "=", "0", "\n", "collater", "=", "Seq2SeqCollater", "(", "\n", "feature_index", "=", "0", ",", "label_index", "=", "1", ",", "pad_index", "=", "pad_idx", ",", "eos_index", "=", "eos_idx", "\n", ")", "\n", "\n", "# 2 frames in the first sample and 3 frames in the second one", "\n", "frames1", "=", "np", ".", "array", "(", "[", "[", "7", ",", "8", "]", ",", "[", "9", ",", "10", "]", "]", ")", "\n", "frames2", "=", "np", ".", "array", "(", "[", "[", "1", ",", "2", "]", ",", "[", "3", ",", "4", "]", ",", "[", "5", ",", "6", "]", "]", ")", "\n", "target1", "=", "np", ".", "array", "(", "[", "4", ",", "2", ",", "3", ",", "eos_idx", "]", ")", "\n", "target2", "=", "np", ".", "array", "(", "[", "3", ",", "2", ",", "eos_idx", "]", ")", "\n", "sample1", "=", "{", "\"id\"", ":", "0", ",", "\"data\"", ":", "[", "frames1", ",", "target1", "]", "}", "\n", "sample2", "=", "{", "\"id\"", ":", "1", ",", "\"data\"", ":", "[", "frames2", ",", "target2", "]", "}", "\n", "batch", "=", "collater", ".", "collate", "(", "[", "sample1", ",", "sample2", "]", ")", "\n", "\n", "# collate sort inputs by frame's length before creating the batch", "\n", "self", ".", "assertTensorEqual", "(", "batch", "[", "\"id\"", "]", ",", "torch", ".", "tensor", "(", "[", "1", ",", "0", "]", ")", ")", "\n", "self", ".", "assertEqual", "(", "batch", "[", "\"ntokens\"", "]", ",", "7", ")", "\n", "self", ".", "assertTensorEqual", "(", "\n", "batch", "[", "\"net_input\"", "]", "[", "\"src_tokens\"", "]", ",", "\n", "torch", ".", "tensor", "(", "\n", "[", "[", "[", "1", ",", "2", "]", ",", "[", "3", ",", "4", "]", ",", "[", "5", ",", "6", "]", "]", ",", "[", "[", "7", ",", "8", "]", ",", "[", "9", ",", "10", "]", ",", "[", "pad_idx", ",", "pad_idx", "]", "]", "]", "\n", ")", ",", "\n", ")", "\n", "self", ".", "assertTensorEqual", "(", "\n", "batch", "[", "\"net_input\"", "]", "[", "\"prev_output_tokens\"", "]", ",", "\n", "torch", ".", "tensor", "(", "[", "[", "eos_idx", ",", "3", ",", "2", ",", "pad_idx", "]", ",", "[", "eos_idx", ",", "4", ",", "2", ",", "3", "]", "]", ")", ",", "\n", ")", "\n", "self", ".", "assertTensorEqual", "(", "batch", "[", "\"net_input\"", "]", "[", "\"src_lengths\"", "]", ",", "torch", ".", "tensor", "(", "[", "3", ",", "2", "]", ")", ")", "\n", "self", ".", "assertTensorEqual", "(", "\n", "batch", "[", "\"target\"", "]", ",", "\n", "torch", ".", "tensor", "(", "[", "[", "3", ",", "2", ",", "eos_idx", ",", "pad_idx", "]", ",", "[", "4", ",", "2", ",", "3", ",", "eos_idx", "]", "]", ")", ",", "\n", ")", "\n", "self", ".", "assertEqual", "(", "batch", "[", "\"nsentences\"", "]", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.test_collaters.TestSeq2SeqCollator.assertTensorEqual": [[52, 55], ["test_collaters.TestSeq2SeqCollator.assertEqual", "test_collaters.TestSeq2SeqCollator.assertEqual", "t1.size", "t2.size", "t1.ne().long().sum", "t1.ne().long", "t1.ne"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "assertTensorEqual", "(", "self", ",", "t1", ",", "t2", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "t1", ".", "size", "(", ")", ",", "t2", ".", "size", "(", ")", ",", "\"size mismatch\"", ")", "\n", "self", ".", "assertEqual", "(", "t1", ".", "ne", "(", "t2", ")", ".", "long", "(", ")", ".", "sum", "(", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.test_cross_entropy.CrossEntropyWithAccCriterionTest.setUp": [[12, 15], ["super().setUp"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestTopPSamplingSearch.setUp"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "criterion_cls", "=", "CrossEntropyWithAccCriterion", "\n", "super", "(", ")", ".", "setUp", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.test_cross_entropy.CrossEntropyWithAccCriterionTest.test_cross_entropy_all_correct": [[16, 25], ["test_cross_entropy.CrossEntropyWithAccCriterionTest.get_test_sample", "test_cross_entropy.CrossEntropyWithAccCriterionTest.criterion"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.CrossEntropyCriterionTestBase.get_test_sample", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.criterion"], ["", "def", "test_cross_entropy_all_correct", "(", "self", ")", ":", "\n", "        ", "sample", "=", "self", ".", "get_test_sample", "(", "correct", "=", "True", ",", "soft_target", "=", "False", ",", "aggregate", "=", "False", ")", "\n", "loss", ",", "sample_size", ",", "logging_output", "=", "self", ".", "criterion", "(", "\n", "self", ".", "model", ",", "sample", ",", "\"sum\"", ",", "log_probs", "=", "True", "\n", ")", "\n", "assert", "logging_output", "[", "\"correct\"", "]", "==", "20", "\n", "assert", "logging_output", "[", "\"total\"", "]", "==", "20", "\n", "assert", "logging_output", "[", "\"sample_size\"", "]", "==", "20", "\n", "assert", "logging_output", "[", "\"ntokens\"", "]", "==", "20", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.test_cross_entropy.CrossEntropyWithAccCriterionTest.test_cross_entropy_all_wrong": [[26, 35], ["test_cross_entropy.CrossEntropyWithAccCriterionTest.get_test_sample", "test_cross_entropy.CrossEntropyWithAccCriterionTest.criterion"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.CrossEntropyCriterionTestBase.get_test_sample", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.criterion"], ["", "def", "test_cross_entropy_all_wrong", "(", "self", ")", ":", "\n", "        ", "sample", "=", "self", ".", "get_test_sample", "(", "correct", "=", "False", ",", "soft_target", "=", "False", ",", "aggregate", "=", "False", ")", "\n", "loss", ",", "sample_size", ",", "logging_output", "=", "self", ".", "criterion", "(", "\n", "self", ".", "model", ",", "sample", ",", "\"sum\"", ",", "log_probs", "=", "True", "\n", ")", "\n", "assert", "logging_output", "[", "\"correct\"", "]", "==", "0", "\n", "assert", "logging_output", "[", "\"total\"", "]", "==", "20", "\n", "assert", "logging_output", "[", "\"sample_size\"", "]", "==", "20", "\n", "assert", "logging_output", "[", "\"ntokens\"", "]", "==", "20", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.DummyTask.__init__": [[41, 47], ["fairseq.tasks.fairseq_task.FairseqTask.__init__", "asr_test_base.get_dummy_dictionary", "getattr", "asr_test_base.DummyTask.dictionary.add_symbol"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_export.get_dummy_dictionary", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "self", ".", "dictionary", "=", "get_dummy_dictionary", "(", ")", "\n", "if", "getattr", "(", "self", ".", "args", ",", "\"ctc\"", ",", "False", ")", ":", "\n", "            ", "self", ".", "dictionary", ".", "add_symbol", "(", "\"<ctc_blank>\"", ")", "\n", "", "self", ".", "tgt_dict", "=", "self", ".", "dictionary", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.DummyTask.target_dictionary": [[48, 51], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "target_dictionary", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dictionary", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.TestBaseFairseqModelBase.setUpClass": [[235, 240], ["super().setUpClass", "unittest.SkipTest"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_file_io.TestFileIO.setUpClass"], ["@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "if", "cls", "is", "TestBaseFairseqModelBase", ":", "\n", "            ", "raise", "unittest", ".", "SkipTest", "(", "\"Skipping test case in base\"", ")", "\n", "", "super", "(", ")", ".", "setUpClass", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.TestBaseFairseqModelBase.setUpModel": [[241, 244], ["asr_test_base.TestBaseFairseqModelBase.assertTrue", "isinstance"], "methods", ["None"], ["", "def", "setUpModel", "(", "self", ",", "model", ")", ":", "\n", "        ", "self", ".", "assertTrue", "(", "isinstance", "(", "model", ",", "BaseFairseqModel", ")", ")", "\n", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.TestBaseFairseqModelBase.setupInput": [[245, 247], ["None"], "methods", ["None"], ["", "def", "setupInput", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.TestBaseFairseqModelBase.setUp": [[248, 252], ["None"], "methods", ["None"], ["", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "model", "=", "None", "\n", "self", ".", "forward_input", "=", "None", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.TestFairseqEncoderDecoderModelBase.setUpClass": [[260, 265], ["asr_test_base.TestBaseFairseqModelBase.setUpClass", "unittest.SkipTest"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_file_io.TestFileIO.setUpClass"], ["@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "if", "cls", "is", "TestFairseqEncoderDecoderModelBase", ":", "\n", "            ", "raise", "unittest", ".", "SkipTest", "(", "\"Skipping test case in base\"", ")", "\n", "", "super", "(", ")", ".", "setUpClass", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.TestFairseqEncoderDecoderModelBase.setUpModel": [[266, 281], ["asr_test_base.TestFairseqEncoderDecoderModelBase.assertTrue", "asr_test_base.get_dummy_task_and_parser", "model_cls.add_args", "parser.parse_args", "model_cls.build_model", "issubclass", "args_setter"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_export.get_dummy_task_and_parser", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.add_args", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.build_model"], ["", "def", "setUpModel", "(", "self", ",", "model_cls", ",", "extra_args_setters", "=", "None", ")", ":", "\n", "        ", "self", ".", "assertTrue", "(", "\n", "issubclass", "(", "model_cls", ",", "(", "FairseqEncoderDecoderModel", ",", "FairseqModel", ")", ")", ",", "\n", "msg", "=", "\"This class only tests for FairseqModel subclasses\"", ",", "\n", ")", "\n", "\n", "task", ",", "parser", "=", "get_dummy_task_and_parser", "(", ")", "\n", "model_cls", ".", "add_args", "(", "parser", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", "[", "]", ")", "\n", "if", "extra_args_setters", "is", "not", "None", ":", "\n", "            ", "for", "args_setter", "in", "extra_args_setters", ":", "\n", "                ", "args_setter", "(", "args", ")", "\n", "", "", "model", "=", "model_cls", ".", "build_model", "(", "args", ",", "task", ")", "\n", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.TestFairseqEncoderDecoderModelBase.setUpInput": [[282, 284], ["asr_test_base.get_dummy_input"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.get_dummy_input"], ["", "def", "setUpInput", "(", "self", ",", "input", "=", "None", ")", ":", "\n", "        ", "self", ".", "forward_input", "=", "get_dummy_input", "(", ")", "if", "input", "is", "None", "else", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.TestFairseqEncoderDecoderModelBase.setUp": [[285, 287], ["asr_test_base.TestBaseFairseqModelBase.setUp"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestTopPSamplingSearch.setUp"], ["", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "setUp", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.TestFairseqEncoderDecoderModelBase.test_forward": [[288, 297], ["asr_test_base.TestFairseqEncoderDecoderModelBase.model.forward", "asr_test_base.check_decoder_output", "asr_test_base.TestFairseqEncoderDecoderModelBase.assertTrue"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.forward", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.check_decoder_output"], ["", "def", "test_forward", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "model", "and", "self", ".", "forward_input", ":", "\n", "            ", "forward_output", "=", "self", ".", "model", ".", "forward", "(", "**", "self", ".", "forward_input", ")", "\n", "# for FairseqEncoderDecoderModel, forward returns a tuple of two", "\n", "# elements, the first one is a Torch.Tensor", "\n", "succ", ",", "msg", "=", "check_decoder_output", "(", "forward_output", ")", "\n", "if", "not", "succ", ":", "\n", "                ", "self", ".", "assertTrue", "(", "succ", ",", "msg", "=", "msg", ")", "\n", "", "self", ".", "forward_output", "=", "forward_output", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.TestFairseqEncoderDecoderModelBase.test_get_normalized_probs": [[298, 315], ["asr_test_base.TestFairseqEncoderDecoderModelBase.model.forward", "asr_test_base.TestFairseqEncoderDecoderModelBase.model.get_normalized_probs", "asr_test_base.TestFairseqEncoderDecoderModelBase.model.get_normalized_probs", "asr_test_base.TestFairseqEncoderDecoderModelBase.assertTrue", "asr_test_base.TestFairseqEncoderDecoderModelBase.assertTrue", "asr_test_base.TestFairseqEncoderDecoderModelBase.assertTrue", "asr_test_base.TestFairseqEncoderDecoderModelBase.assertTrue", "hasattr", "hasattr", "torch.is_tensor", "torch.is_tensor"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.forward", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.get_normalized_probs", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.get_normalized_probs"], ["", "", "def", "test_get_normalized_probs", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "model", "and", "self", ".", "forward_input", ":", "\n", "            ", "forward_output", "=", "self", ".", "model", ".", "forward", "(", "**", "self", ".", "forward_input", ")", "\n", "logprob", "=", "self", ".", "model", ".", "get_normalized_probs", "(", "forward_output", ",", "log_probs", "=", "True", ")", "\n", "prob", "=", "self", ".", "model", ".", "get_normalized_probs", "(", "forward_output", ",", "log_probs", "=", "False", ")", "\n", "\n", "# in order for different models/criterion to play with each other", "\n", "# we need to know whether the logprob or prob output is batch_first", "\n", "# or not. We assume an additional attribute will be attached to logprob", "\n", "# or prob. If you find your code failed here, simply override", "\n", "# FairseqModel.get_normalized_probs, see example at", "\n", "# https://fburl.com/batch_first_example", "\n", "self", ".", "assertTrue", "(", "hasattr", "(", "logprob", ",", "\"batch_first\"", ")", ")", "\n", "self", ".", "assertTrue", "(", "hasattr", "(", "prob", ",", "\"batch_first\"", ")", ")", "\n", "\n", "self", ".", "assertTrue", "(", "torch", ".", "is_tensor", "(", "logprob", ")", ")", "\n", "self", ".", "assertTrue", "(", "torch", ".", "is_tensor", "(", "prob", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.TestFairseqEncoderModelBase.setUpClass": [[322, 327], ["asr_test_base.TestBaseFairseqModelBase.setUpClass", "unittest.SkipTest"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_file_io.TestFileIO.setUpClass"], ["@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "if", "cls", "is", "TestFairseqEncoderModelBase", ":", "\n", "            ", "raise", "unittest", ".", "SkipTest", "(", "\"Skipping test case in base\"", ")", "\n", "", "super", "(", ")", ".", "setUpClass", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.TestFairseqEncoderModelBase.setUpModel": [[328, 342], ["asr_test_base.TestFairseqEncoderModelBase.assertTrue", "asr_test_base.get_dummy_task_and_parser", "model_cls.add_args", "parser.parse_args", "model_cls.build_model", "issubclass", "args_setter"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_export.get_dummy_task_and_parser", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.add_args", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.build_model"], ["", "def", "setUpModel", "(", "self", ",", "model_cls", ",", "extra_args_setters", "=", "None", ")", ":", "\n", "        ", "self", ".", "assertTrue", "(", "\n", "issubclass", "(", "model_cls", ",", "FairseqEncoderModel", ")", ",", "\n", "msg", "=", "\"This class is only used for testing FairseqEncoderModel\"", ",", "\n", ")", "\n", "task", ",", "parser", "=", "get_dummy_task_and_parser", "(", ")", "\n", "model_cls", ".", "add_args", "(", "parser", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", "[", "]", ")", "\n", "if", "extra_args_setters", "is", "not", "None", ":", "\n", "            ", "for", "args_setter", "in", "extra_args_setters", ":", "\n", "                ", "args_setter", "(", "args", ")", "\n", "\n", "", "", "model", "=", "model_cls", ".", "build_model", "(", "args", ",", "task", ")", "\n", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.TestFairseqEncoderModelBase.setUpInput": [[343, 348], ["asr_test_base.TestFairseqEncoderModelBase.forward_input.pop", "asr_test_base.get_dummy_input"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.get_dummy_input"], ["", "def", "setUpInput", "(", "self", ",", "input", "=", "None", ")", ":", "\n", "        ", "self", ".", "forward_input", "=", "get_dummy_input", "(", ")", "if", "input", "is", "None", "else", "input", "\n", "# get_dummy_input() is originally for s2s, here we delete extra dict", "\n", "# items, so it can be used for EncoderModel / Encoder as well", "\n", "self", ".", "forward_input", ".", "pop", "(", "\"prev_output_tokens\"", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.TestFairseqEncoderModelBase.setUp": [[349, 351], ["asr_test_base.TestBaseFairseqModelBase.setUp"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestTopPSamplingSearch.setUp"], ["", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "setUp", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.TestFairseqEncoderModelBase.test_forward": [[352, 365], ["asr_test_base.TestFairseqEncoderModelBase.forward_input[].size", "asr_test_base.TestFairseqEncoderModelBase.model.forward", "asr_test_base.check_encoder_output", "asr_test_base.TestFairseqEncoderModelBase.assertTrue"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.forward", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.check_encoder_output"], ["", "def", "test_forward", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "forward_input", "and", "self", ".", "model", ":", "\n", "            ", "bsz", "=", "self", ".", "forward_input", "[", "\"src_tokens\"", "]", ".", "size", "(", "0", ")", "\n", "forward_output", "=", "self", ".", "model", ".", "forward", "(", "**", "self", ".", "forward_input", ")", "\n", "\n", "# we expect forward_output to be a dict with the following", "\n", "# key/value pairs:", "\n", "# - encoder_out: a Torch.Tensor", "\n", "# - encoder_padding_mask: a binary Torch.Tensor", "\n", "succ", ",", "msg", "=", "check_encoder_output", "(", "forward_output", ",", "batch_size", "=", "bsz", ")", "\n", "if", "not", "succ", ":", "\n", "                ", "self", ".", "assertTrue", "(", "succ", ",", "msg", "=", "msg", ")", "\n", "", "self", ".", "forward_output", "=", "forward_output", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.TestFairseqEncoderModelBase.test_get_normalized_probs": [[366, 383], ["asr_test_base.TestFairseqEncoderModelBase.model.forward", "asr_test_base.TestFairseqEncoderModelBase.model.get_normalized_probs", "asr_test_base.TestFairseqEncoderModelBase.model.get_normalized_probs", "asr_test_base.TestFairseqEncoderModelBase.assertTrue", "asr_test_base.TestFairseqEncoderModelBase.assertTrue", "asr_test_base.TestFairseqEncoderModelBase.assertTrue", "asr_test_base.TestFairseqEncoderModelBase.assertTrue", "hasattr", "hasattr", "torch.is_tensor", "torch.is_tensor"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.forward", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.get_normalized_probs", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.get_normalized_probs"], ["", "", "def", "test_get_normalized_probs", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "model", "and", "self", ".", "forward_input", ":", "\n", "            ", "forward_output", "=", "self", ".", "model", ".", "forward", "(", "**", "self", ".", "forward_input", ")", "\n", "logprob", "=", "self", ".", "model", ".", "get_normalized_probs", "(", "forward_output", ",", "log_probs", "=", "True", ")", "\n", "prob", "=", "self", ".", "model", ".", "get_normalized_probs", "(", "forward_output", ",", "log_probs", "=", "False", ")", "\n", "\n", "# in order for different models/criterion to play with each other", "\n", "# we need to know whether the logprob or prob output is batch_first", "\n", "# or not. We assume an additional attribute will be attached to logprob", "\n", "# or prob. If you find your code failed here, simply override", "\n", "# FairseqModel.get_normalized_probs, see example at", "\n", "# https://fburl.com/batch_first_example", "\n", "self", ".", "assertTrue", "(", "hasattr", "(", "logprob", ",", "\"batch_first\"", ")", ")", "\n", "self", ".", "assertTrue", "(", "hasattr", "(", "prob", ",", "\"batch_first\"", ")", ")", "\n", "\n", "self", ".", "assertTrue", "(", "torch", ".", "is_tensor", "(", "logprob", ")", ")", "\n", "self", ".", "assertTrue", "(", "torch", ".", "is_tensor", "(", "prob", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.TestFairseqEncoderBase.setUpClass": [[390, 395], ["super().setUpClass", "unittest.SkipTest"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_file_io.TestFileIO.setUpClass"], ["@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "if", "cls", "is", "TestFairseqEncoderBase", ":", "\n", "            ", "raise", "unittest", ".", "SkipTest", "(", "\"Skipping test case in base\"", ")", "\n", "", "super", "(", ")", ".", "setUpClass", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.TestFairseqEncoderBase.setUpEncoder": [[396, 402], ["asr_test_base.TestFairseqEncoderBase.assertTrue", "isinstance"], "methods", ["None"], ["", "def", "setUpEncoder", "(", "self", ",", "encoder", ")", ":", "\n", "        ", "self", ".", "assertTrue", "(", "\n", "isinstance", "(", "encoder", ",", "FairseqEncoder", ")", ",", "\n", "msg", "=", "\"This class is only used for test FairseqEncoder\"", ",", "\n", ")", "\n", "self", ".", "encoder", "=", "encoder", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.TestFairseqEncoderBase.setUpInput": [[403, 408], ["asr_test_base.TestFairseqEncoderBase.forward_input.pop", "asr_test_base.get_dummy_input"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.get_dummy_input"], ["", "def", "setUpInput", "(", "self", ",", "input", "=", "None", ")", ":", "\n", "        ", "self", ".", "forward_input", "=", "get_dummy_input", "(", ")", "if", "input", "is", "None", "else", "input", "\n", "# get_dummy_input() is originally for s2s, here we delete extra dict", "\n", "# items, so it can be used for EncoderModel / Encoder as well", "\n", "self", ".", "forward_input", ".", "pop", "(", "\"prev_output_tokens\"", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.TestFairseqEncoderBase.setUp": [[409, 412], ["None"], "methods", ["None"], ["", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "encoder", "=", "None", "\n", "self", ".", "forward_input", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.TestFairseqEncoderBase.test_forward": [[413, 422], ["asr_test_base.TestFairseqEncoderBase.forward_input[].size", "asr_test_base.TestFairseqEncoderBase.encoder.forward", "asr_test_base.check_encoder_output", "asr_test_base.TestFairseqEncoderBase.assertTrue"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.forward", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.check_encoder_output"], ["", "def", "test_forward", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "encoder", "and", "self", ".", "forward_input", ":", "\n", "            ", "bsz", "=", "self", ".", "forward_input", "[", "\"src_tokens\"", "]", ".", "size", "(", "0", ")", "\n", "\n", "forward_output", "=", "self", ".", "encoder", ".", "forward", "(", "**", "self", ".", "forward_input", ")", "\n", "succ", ",", "msg", "=", "check_encoder_output", "(", "forward_output", ",", "batch_size", "=", "bsz", ")", "\n", "if", "not", "succ", ":", "\n", "                ", "self", ".", "assertTrue", "(", "succ", ",", "msg", "=", "msg", ")", "\n", "", "self", ".", "forward_output", "=", "forward_output", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.TestFairseqDecoderBase.setUpClass": [[429, 434], ["super().setUpClass", "unittest.SkipTest"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_file_io.TestFileIO.setUpClass"], ["@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "if", "cls", "is", "TestFairseqDecoderBase", ":", "\n", "            ", "raise", "unittest", ".", "SkipTest", "(", "\"Skipping test case in base\"", ")", "\n", "", "super", "(", ")", ".", "setUpClass", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.TestFairseqDecoderBase.setUpDecoder": [[435, 441], ["asr_test_base.TestFairseqDecoderBase.assertTrue", "isinstance"], "methods", ["None"], ["", "def", "setUpDecoder", "(", "self", ",", "decoder", ")", ":", "\n", "        ", "self", ".", "assertTrue", "(", "\n", "isinstance", "(", "decoder", ",", "FairseqDecoder", ")", ",", "\n", "msg", "=", "\"This class is only used for test FairseqDecoder\"", ",", "\n", ")", "\n", "self", ".", "decoder", "=", "decoder", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.TestFairseqDecoderBase.setUpInput": [[442, 444], ["asr_test_base.get_dummy_encoder_output"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.get_dummy_encoder_output"], ["", "def", "setUpInput", "(", "self", ",", "input", "=", "None", ")", ":", "\n", "        ", "self", ".", "forward_input", "=", "get_dummy_encoder_output", "(", ")", "if", "input", "is", "None", "else", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.TestFairseqDecoderBase.setUpPrevOutputTokens": [[445, 451], ["asr_test_base.get_dummy_input"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.get_dummy_input"], ["", "def", "setUpPrevOutputTokens", "(", "self", ",", "tokens", "=", "None", ")", ":", "\n", "        ", "if", "tokens", "is", "None", ":", "\n", "            ", "self", ".", "encoder_input", "=", "get_dummy_input", "(", ")", "\n", "self", ".", "prev_output_tokens", "=", "self", ".", "encoder_input", "[", "\"prev_output_tokens\"", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "prev_output_tokens", "=", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.TestFairseqDecoderBase.setUp": [[452, 456], ["None"], "methods", ["None"], ["", "", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "decoder", "=", "None", "\n", "self", ".", "forward_input", "=", "None", "\n", "self", ".", "prev_output_tokens", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.TestFairseqDecoderBase.test_forward": [[457, 471], ["asr_test_base.TestFairseqDecoderBase.decoder.forward", "asr_test_base.check_decoder_output", "asr_test_base.TestFairseqDecoderBase.assertTrue"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.forward", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.check_decoder_output"], ["", "def", "test_forward", "(", "self", ")", ":", "\n", "        ", "if", "(", "\n", "self", ".", "decoder", "is", "not", "None", "\n", "and", "self", ".", "forward_input", "is", "not", "None", "\n", "and", "self", ".", "prev_output_tokens", "is", "not", "None", "\n", ")", ":", "\n", "            ", "forward_output", "=", "self", ".", "decoder", ".", "forward", "(", "\n", "prev_output_tokens", "=", "self", ".", "prev_output_tokens", ",", "\n", "encoder_out", "=", "self", ".", "forward_input", ",", "\n", ")", "\n", "succ", ",", "msg", "=", "check_decoder_output", "(", "forward_output", ")", "\n", "if", "not", "succ", ":", "\n", "                ", "self", ".", "assertTrue", "(", "succ", ",", "msg", "=", "msg", ")", "\n", "", "self", ".", "forward_input", "=", "forward_output", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.DummyEncoderModel.__init__": [[474, 476], ["fairseq.models.FairseqEncoderModel.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["    ", "def", "__init__", "(", "self", ",", "encoder", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "encoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.DummyEncoderModel.build_model": [[477, 480], ["cls", "asr_test_base.DummyEncoder"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dictionary.BertDictionary.cls"], ["", "@", "classmethod", "\n", "def", "build_model", "(", "cls", ",", "args", ",", "task", ")", ":", "\n", "        ", "return", "cls", "(", "DummyEncoder", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.DummyEncoderModel.get_logits": [[481, 486], ["torch.log", "torch.div"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log"], ["", "def", "get_logits", "(", "self", ",", "net_output", ")", ":", "\n", "# Inverse of sigmoid to use with BinaryCrossEntropyWithLogitsCriterion as", "\n", "# F.binary_cross_entropy_with_logits combines sigmoid and CE", "\n", "        ", "return", "torch", ".", "log", "(", "\n", "torch", ".", "div", "(", "net_output", "[", "\"encoder_out\"", "]", ",", "1", "-", "net_output", "[", "\"encoder_out\"", "]", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.DummyEncoder.__init__": [[490, 492], ["fairseq.models.FairseqEncoder.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.DummyEncoder.forward": [[493, 496], ["examples.speech_recognition.data.data_utils.lengths_to_encoder_padding_mask"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.lengths_to_encoder_padding_mask"], ["", "def", "forward", "(", "self", ",", "src_tokens", ",", "src_lengths", ")", ":", "\n", "        ", "mask", ",", "max_len", "=", "lengths_to_encoder_padding_mask", "(", "src_lengths", ")", "\n", "return", "{", "\"encoder_out\"", ":", "src_tokens", ",", "\"encoder_padding_mask\"", ":", "mask", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.CrossEntropyCriterionTestBase.setUpClass": [[499, 504], ["super().setUpClass", "unittest.SkipTest"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_file_io.TestFileIO.setUpClass"], ["    ", "@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", ":", "\n", "        ", "if", "cls", "is", "CrossEntropyCriterionTestBase", ":", "\n", "            ", "raise", "unittest", ".", "SkipTest", "(", "\"Skipping base class test case\"", ")", "\n", "", "super", "(", ")", ".", "setUpClass", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.CrossEntropyCriterionTestBase.setUpArgs": [[505, 510], ["argparse.Namespace"], "methods", ["None"], ["", "def", "setUpArgs", "(", "self", ")", ":", "\n", "        ", "args", "=", "argparse", ".", "Namespace", "(", ")", "\n", "args", ".", "sentence_avg", "=", "False", "\n", "args", ".", "threshold", "=", "0.1", "# to use with BinaryCrossEntropyWithLogitsCriterion", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.CrossEntropyCriterionTestBase.setUp": [[511, 515], ["asr_test_base.CrossEntropyCriterionTestBase.setUpArgs", "asr_test_base.DummyEncoderModel", "asr_test_base.CrossEntropyCriterionTestBase.criterion_cls", "asr_test_base.DummyEncoder", "asr_test_base.DummyTask"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.CrossEntropyCriterionTestBase.setUpArgs"], ["", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "args", "=", "self", ".", "setUpArgs", "(", ")", "\n", "self", ".", "model", "=", "DummyEncoderModel", "(", "encoder", "=", "DummyEncoder", "(", ")", ")", "\n", "self", ".", "criterion", "=", "self", ".", "criterion_cls", "(", "args", "=", "args", ",", "task", "=", "DummyTask", "(", "args", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.CrossEntropyCriterionTestBase.get_src_tokens": [[516, 534], ["torch.zeros", "range", "torch.zeros", "range", "range"], "methods", ["None"], ["", "def", "get_src_tokens", "(", "self", ",", "correct_prediction", ",", "aggregate", ")", ":", "\n", "        ", "\"\"\"\n            correct_prediction: True if the net_output (src_tokens) should\n            predict the correct target\n            aggregate: True if the criterion expects net_output (src_tokens)\n            aggregated across time axis\n        \"\"\"", "\n", "predicted_idx", "=", "0", "if", "correct_prediction", "else", "1", "\n", "if", "aggregate", ":", "\n", "            ", "src_tokens", "=", "torch", ".", "zeros", "(", "(", "2", ",", "2", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "for", "b", "in", "range", "(", "2", ")", ":", "\n", "                ", "src_tokens", "[", "b", "]", "[", "predicted_idx", "]", "=", "1.0", "\n", "", "", "else", ":", "\n", "            ", "src_tokens", "=", "torch", ".", "zeros", "(", "(", "2", ",", "10", ",", "2", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "for", "b", "in", "range", "(", "2", ")", ":", "\n", "                ", "for", "t", "in", "range", "(", "10", ")", ":", "\n", "                    ", "src_tokens", "[", "b", "]", "[", "t", "]", "[", "predicted_idx", "]", "=", "1.0", "\n", "", "", "", "return", "src_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.CrossEntropyCriterionTestBase.get_target": [[535, 543], ["torch.zeros", "range", "torch.zeros"], "methods", ["None"], ["", "def", "get_target", "(", "self", ",", "soft_target", ")", ":", "\n", "        ", "if", "soft_target", ":", "\n", "            ", "target", "=", "torch", ".", "zeros", "(", "(", "2", ",", "2", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "for", "b", "in", "range", "(", "2", ")", ":", "\n", "                ", "target", "[", "b", "]", "[", "0", "]", "=", "1.0", "\n", "", "", "else", ":", "\n", "            ", "target", "=", "torch", ".", "zeros", "(", "(", "2", ",", "10", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "", "return", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.CrossEntropyCriterionTestBase.get_test_sample": [[544, 552], ["asr_test_base.CrossEntropyCriterionTestBase.get_src_tokens", "asr_test_base.CrossEntropyCriterionTestBase.get_target", "asr_test_base.CrossEntropyCriterionTestBase.size", "torch.tensor", "asr_test_base.CrossEntropyCriterionTestBase.size", "asr_test_base.CrossEntropyCriterionTestBase.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.CrossEntropyCriterionTestBase.get_src_tokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.CrossEntropyCriterionTestBase.get_target", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "get_test_sample", "(", "self", ",", "correct", ",", "soft_target", ",", "aggregate", ")", ":", "\n", "        ", "src_tokens", "=", "self", ".", "get_src_tokens", "(", "correct", ",", "aggregate", ")", "\n", "target", "=", "self", ".", "get_target", "(", "soft_target", ")", "\n", "L", "=", "src_tokens", ".", "size", "(", "1", ")", "\n", "return", "{", "\n", "\"net_input\"", ":", "{", "\"src_tokens\"", ":", "src_tokens", ",", "\"src_lengths\"", ":", "torch", ".", "tensor", "(", "[", "L", "]", ")", "}", ",", "\n", "\"target\"", ":", "target", ",", "\n", "\"ntokens\"", ":", "src_tokens", ".", "size", "(", "0", ")", "*", "src_tokens", ".", "size", "(", "1", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.get_dummy_dictionary": [[32, 38], ["fairseq.data.dictionary.Dictionary", "enumerate", "range", "fairseq.data.dictionary.Dictionary.add_symbol"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol"], ["def", "get_dummy_dictionary", "(", "vocab_size", "=", "DEFAULT_TEST_VOCAB_SIZE", ")", ":", "\n", "    ", "dummy_dict", "=", "Dictionary", "(", ")", "\n", "# add dummy symbol to satisfy vocab size", "\n", "for", "id", ",", "_", "in", "enumerate", "(", "range", "(", "vocab_size", ")", ")", ":", "\n", "        ", "dummy_dict", ".", "add_symbol", "(", "\"{}\"", ".", "format", "(", "id", ")", ",", "1000", ")", "\n", "", "return", "dummy_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.get_dummy_task_and_parser": [[53, 68], ["argparse.ArgumentParser", "DummyTask.add_args", "argparse.ArgumentParser.parse_args", "DummyTask.setup_task"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.add_args", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyLMTask.setup_task"], ["", "", "def", "get_dummy_task_and_parser", "(", ")", ":", "\n", "    ", "\"\"\"\n    to build a fariseq model, we need some dummy parse and task. This function\n    is used to create dummy task and parser to faciliate model/criterion test\n\n    Note: we use FbSpeechRecognitionTask as the dummy task. You may want\n    to use other task by providing another function\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "\"test_dummy_s2s_task\"", ",", "argument_default", "=", "argparse", ".", "SUPPRESS", "\n", ")", "\n", "DummyTask", ".", "add_args", "(", "parser", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", "[", "]", ")", "\n", "task", "=", "DummyTask", ".", "setup_task", "(", "args", ")", "\n", "return", "task", ",", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.get_dummy_input": [[70, 102], ["torch.randn", "torch.from_numpy", "range", "fairseq.data.data_utils.collate_tokens", "torch.from_numpy.sort", "torch.randn.index_select", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "fairseq_data_utils.collate_tokens.append", "torch.from_numpy", "src_lengths[].item"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.collate_tokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item"], ["", "def", "get_dummy_input", "(", "T", "=", "100", ",", "D", "=", "80", ",", "B", "=", "5", ",", "K", "=", "100", ")", ":", "\n", "    ", "forward_input", "=", "{", "}", "\n", "# T max sequence length", "\n", "# D feature vector dimension", "\n", "# B batch size", "\n", "# K target dimension size", "\n", "feature", "=", "torch", ".", "randn", "(", "B", ",", "T", ",", "D", ")", "\n", "# this (B, T, D) layout is just a convention, you can override it by", "\n", "# write your own _prepare_forward_input function", "\n", "src_lengths", "=", "torch", ".", "from_numpy", "(", "\n", "np", ".", "random", ".", "randint", "(", "low", "=", "1", ",", "high", "=", "T", ",", "size", "=", "B", ",", "dtype", "=", "np", ".", "int64", ")", "\n", ")", "\n", "src_lengths", "[", "0", "]", "=", "T", "# make sure the maximum length matches", "\n", "prev_output_tokens", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "B", ")", ":", "\n", "        ", "token_length", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "1", ",", "high", "=", "src_lengths", "[", "b", "]", ".", "item", "(", ")", "+", "1", ")", "\n", "tokens", "=", "np", ".", "random", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "K", ",", "size", "=", "token_length", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "prev_output_tokens", ".", "append", "(", "torch", ".", "from_numpy", "(", "tokens", ")", ")", "\n", "\n", "", "prev_output_tokens", "=", "fairseq_data_utils", ".", "collate_tokens", "(", "\n", "prev_output_tokens", ",", "\n", "pad_idx", "=", "1", ",", "\n", "eos_idx", "=", "2", ",", "\n", "left_pad", "=", "False", ",", "\n", "move_eos_to_beginning", "=", "False", ",", "\n", ")", "\n", "src_lengths", ",", "sorted_order", "=", "src_lengths", ".", "sort", "(", "descending", "=", "True", ")", "\n", "forward_input", "[", "\"src_tokens\"", "]", "=", "feature", ".", "index_select", "(", "0", ",", "sorted_order", ")", "\n", "forward_input", "[", "\"src_lengths\"", "]", "=", "src_lengths", "\n", "forward_input", "[", "\"prev_output_tokens\"", "]", "=", "prev_output_tokens", "\n", "\n", "return", "forward_input", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.get_dummy_encoder_output": [[104, 124], ["torch.from_numpy", "torch.from_numpy", "encoder_out[].t_", "numpy.random.randn().astype", "numpy.random.randint", "torch.arange().view().expand", "torch.from_numpy.view().expand", "numpy.random.randn", "torch.arange().view", "torch.from_numpy.view", "torch.arange"], "function", ["None"], ["", "def", "get_dummy_encoder_output", "(", "encoder_out_shape", "=", "(", "100", ",", "80", ",", "5", ")", ")", ":", "\n", "    ", "\"\"\"\n    This only provides an example to generate dummy encoder output\n    \"\"\"", "\n", "(", "T", ",", "B", ",", "D", ")", "=", "encoder_out_shape", "\n", "encoder_out", "=", "{", "}", "\n", "\n", "encoder_out", "[", "\"encoder_out\"", "]", "=", "torch", ".", "from_numpy", "(", "\n", "np", ".", "random", ".", "randn", "(", "*", "encoder_out_shape", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", ")", "\n", "seq_lengths", "=", "torch", ".", "from_numpy", "(", "np", ".", "random", ".", "randint", "(", "low", "=", "1", ",", "high", "=", "T", ",", "size", "=", "B", ")", ")", "\n", "# some dummy mask", "\n", "encoder_out", "[", "\"encoder_padding_mask\"", "]", "=", "torch", ".", "arange", "(", "T", ")", ".", "view", "(", "1", ",", "T", ")", ".", "expand", "(", "\n", "B", ",", "-", "1", "\n", ")", ">=", "seq_lengths", ".", "view", "(", "B", ",", "1", ")", ".", "expand", "(", "-", "1", ",", "T", ")", "\n", "encoder_out", "[", "\"encoder_padding_mask\"", "]", ".", "t_", "(", ")", "\n", "\n", "# encoer_padding_mask is (T, B) tensor, with (t, b)-th element indicate", "\n", "# whether encoder_out[t, b] is valid (=0) or not (=1)", "\n", "return", "encoder_out", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base._current_postion_info": [[126, 132], ["inspect.currentframe", "os.path.basename", "inspect.getframeinfo"], "function", ["None"], ["", "def", "_current_postion_info", "(", ")", ":", "\n", "    ", "cf", "=", "currentframe", "(", ")", "\n", "frameinfo", "=", "\" (at {}:{})\"", ".", "format", "(", "\n", "os", ".", "path", ".", "basename", "(", "getframeinfo", "(", "cf", ")", ".", "filename", ")", ",", "cf", ".", "f_back", ".", "f_lineno", "\n", ")", "\n", "return", "frameinfo", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.check_encoder_output": [[134, 200], ["isinstance", "isinstance", "asr_test_base._current_postion_info", "asr_test_base._current_postion_info", "asr_test_base._current_postion_info", "asr_test_base._current_postion_info", "asr_test_base._current_postion_info", "isinstance", "mask.dim", "asr_test_base._current_postion_info", "asr_test_base._current_postion_info", "asr_test_base._current_postion_info", "mask.size", "asr_test_base._current_postion_info", "hasattr"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base._current_postion_info", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base._current_postion_info", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base._current_postion_info", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base._current_postion_info", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base._current_postion_info", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base._current_postion_info", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base._current_postion_info", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base._current_postion_info", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base._current_postion_info"], ["", "def", "check_encoder_output", "(", "encoder_output", ",", "batch_size", "=", "None", ")", ":", "\n", "    ", "\"\"\"we expect encoder_output to be a dict with the following\n    key/value pairs:\n    - encoder_out: a Torch.Tensor\n    - encoder_padding_mask: a binary Torch.Tensor\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "encoder_output", ",", "dict", ")", ":", "\n", "        ", "msg", "=", "(", "\n", "\"FairseqEncoderModel.forward(...) must be a dict\"", "+", "_current_postion_info", "(", ")", "\n", ")", "\n", "return", "False", ",", "msg", "\n", "\n", "", "if", "\"encoder_out\"", "not", "in", "encoder_output", ":", "\n", "        ", "msg", "=", "(", "\n", "\"FairseqEncoderModel.forward(...) must contain encoder_out\"", "\n", "+", "_current_postion_info", "(", ")", "\n", ")", "\n", "return", "False", ",", "msg", "\n", "\n", "", "if", "\"encoder_padding_mask\"", "not", "in", "encoder_output", ":", "\n", "        ", "msg", "=", "(", "\n", "\"FairseqEncoderModel.forward(...) must contain encoder_padding_mask\"", "\n", "+", "_current_postion_info", "(", ")", "\n", ")", "\n", "return", "False", ",", "msg", "\n", "\n", "", "if", "not", "isinstance", "(", "encoder_output", "[", "\"encoder_out\"", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "msg", "=", "\"encoder_out must be a torch.Tensor\"", "+", "_current_postion_info", "(", ")", "\n", "return", "False", ",", "msg", "\n", "\n", "", "if", "encoder_output", "[", "\"encoder_out\"", "]", ".", "dtype", "!=", "torch", ".", "float32", ":", "\n", "        ", "msg", "=", "\"encoder_out must have float32 dtype\"", "+", "_current_postion_info", "(", ")", "\n", "return", "False", ",", "msg", "\n", "\n", "", "mask", "=", "encoder_output", "[", "\"encoder_padding_mask\"", "]", "\n", "if", "mask", "is", "not", "None", ":", "\n", "        ", "if", "not", "isinstance", "(", "mask", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "msg", "=", "(", "\n", "\"encoder_padding_mask must be a torch.Tensor\"", "+", "_current_postion_info", "(", ")", "\n", ")", "\n", "return", "False", ",", "msg", "\n", "", "if", "(", "\n", "mask", ".", "dtype", "!=", "torch", ".", "uint8", "\n", "and", "(", "not", "hasattr", "(", "torch", ",", "'bool'", ")", "or", "mask", ".", "dtype", "!=", "torch", ".", "bool", ")", "\n", ")", ":", "\n", "            ", "msg", "=", "(", "\n", "\"encoder_padding_mask must have dtype of uint8\"", "\n", "+", "_current_postion_info", "(", ")", "\n", ")", "\n", "return", "False", ",", "msg", "\n", "\n", "", "if", "mask", ".", "dim", "(", ")", "!=", "2", ":", "\n", "            ", "msg", "=", "(", "\n", "\"we expect encoder_padding_mask to be a 2-d tensor, in shape (T, B)\"", "\n", "+", "_current_postion_info", "(", ")", "\n", ")", "\n", "return", "False", ",", "msg", "\n", "\n", "", "if", "batch_size", "is", "not", "None", "and", "mask", ".", "size", "(", "1", ")", "!=", "batch_size", ":", "\n", "            ", "msg", "=", "(", "\n", "\"we expect encoder_padding_mask to be a 2-d tensor, with size(1)\"", "\n", "+", "\" being the batch size\"", "\n", "+", "_current_postion_info", "(", ")", "\n", ")", "\n", "return", "False", ",", "msg", "\n", "", "", "return", "True", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.check_decoder_output": [[202, 222], ["isinstance", "len", "isinstance", "asr_test_base._current_postion_info", "asr_test_base._current_postion_info", "asr_test_base._current_postion_info"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base._current_postion_info", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base._current_postion_info", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base._current_postion_info"], ["", "def", "check_decoder_output", "(", "decoder_output", ")", ":", "\n", "    ", "\"\"\"we expect output from a decoder is a tuple with the following constraint:\n    - the first element is a torch.Tensor\n    - the second element can be anything (reserved for future use)\n    \"\"\"", "\n", "if", "not", "isinstance", "(", "decoder_output", ",", "tuple", ")", ":", "\n", "        ", "msg", "=", "\"FariseqDecoder output must be a tuple\"", "+", "_current_postion_info", "(", ")", "\n", "return", "False", ",", "msg", "\n", "\n", "", "if", "len", "(", "decoder_output", ")", "!=", "2", ":", "\n", "        ", "msg", "=", "\"FairseqDecoder output must be 2-elem tuple\"", "+", "_current_postion_info", "(", ")", "\n", "return", "False", ",", "msg", "\n", "\n", "", "if", "not", "isinstance", "(", "decoder_output", "[", "0", "]", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "msg", "=", "(", "\n", "\"FariseqDecoder output[0] must be a torch.Tensor\"", "+", "_current_postion_info", "(", ")", "\n", ")", "\n", "return", "False", ",", "msg", "\n", "\n", "", "return", "True", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.test_vggtransformer.VGGTransformerModelTest_mid.setUp": [[26, 42], ["super().setUp", "test_vggtransformer.VGGTransformerModelTest_mid.setUpModel", "test_vggtransformer.VGGTransformerModelTest_mid.setUpInput", "asr_test_base.get_dummy_input"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestTopPSamplingSearch.setUp", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.TestFairseqEncoderModelBase.setUpModel", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.TestFairseqDecoderBase.setUpInput", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.get_dummy_input"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "def", "override_config", "(", "args", ")", ":", "\n", "            ", "\"\"\"\n            vggtrasformer_1 use 14 layers of transformer,\n            for testing purpose, it is too expensive. For fast turn-around\n            test, reduce the number of layers to 3.\n            \"\"\"", "\n", "args", ".", "transformer_enc_config", "=", "(", "\n", "\"((1024, 16, 4096, True, 0.15, 0.15, 0.15),) * 3\"", "\n", ")", "\n", "\n", "", "super", "(", ")", ".", "setUp", "(", ")", "\n", "extra_args_setter", "=", "[", "vggtransformer_1", ",", "override_config", "]", "\n", "\n", "self", ".", "setUpModel", "(", "VGGTransformerModel", ",", "extra_args_setter", ")", "\n", "self", ".", "setUpInput", "(", "get_dummy_input", "(", "T", "=", "50", ",", "D", "=", "80", ",", "B", "=", "5", ",", "K", "=", "DEFAULT_TEST_VOCAB_SIZE", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.test_vggtransformer.VGGTransformerModelTest_big.setUp": [[45, 61], ["super().setUp", "test_vggtransformer.VGGTransformerModelTest_big.setUpModel", "test_vggtransformer.VGGTransformerModelTest_big.setUpInput", "asr_test_base.get_dummy_input"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestTopPSamplingSearch.setUp", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.TestFairseqEncoderModelBase.setUpModel", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.TestFairseqDecoderBase.setUpInput", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.get_dummy_input"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "def", "override_config", "(", "args", ")", ":", "\n", "            ", "\"\"\"\n            vggtrasformer_2 use 16 layers of transformer,\n            for testing purpose, it is too expensive. For fast turn-around\n            test, reduce the number of layers to 3.\n            \"\"\"", "\n", "args", ".", "transformer_enc_config", "=", "(", "\n", "\"((1024, 16, 4096, True, 0.15, 0.15, 0.15),) * 3\"", "\n", ")", "\n", "\n", "", "super", "(", ")", ".", "setUp", "(", ")", "\n", "extra_args_setter", "=", "[", "vggtransformer_2", ",", "override_config", "]", "\n", "\n", "self", ".", "setUpModel", "(", "VGGTransformerModel", ",", "extra_args_setter", ")", "\n", "self", ".", "setUpInput", "(", "get_dummy_input", "(", "T", "=", "50", ",", "D", "=", "80", ",", "B", "=", "5", ",", "K", "=", "DEFAULT_TEST_VOCAB_SIZE", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.test_vggtransformer.VGGTransformerModelTest_base.setUp": [[64, 80], ["super().setUp", "test_vggtransformer.VGGTransformerModelTest_base.setUpModel", "test_vggtransformer.VGGTransformerModelTest_base.setUpInput", "asr_test_base.get_dummy_input"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestTopPSamplingSearch.setUp", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.TestFairseqEncoderModelBase.setUpModel", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.TestFairseqDecoderBase.setUpInput", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.get_dummy_input"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "def", "override_config", "(", "args", ")", ":", "\n", "            ", "\"\"\"\n            vggtrasformer_base use 12 layers of transformer,\n            for testing purpose, it is too expensive. For fast turn-around\n            test, reduce the number of layers to 3.\n            \"\"\"", "\n", "args", ".", "transformer_enc_config", "=", "(", "\n", "\"((512, 8, 2048, True, 0.15, 0.15, 0.15),) * 3\"", "\n", ")", "\n", "\n", "", "super", "(", ")", ".", "setUp", "(", ")", "\n", "extra_args_setter", "=", "[", "vggtransformer_base", ",", "override_config", "]", "\n", "\n", "self", ".", "setUpModel", "(", "VGGTransformerModel", ",", "extra_args_setter", ")", "\n", "self", ".", "setUpInput", "(", "get_dummy_input", "(", "T", "=", "50", ",", "D", "=", "80", ",", "B", "=", "5", ",", "K", "=", "DEFAULT_TEST_VOCAB_SIZE", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.test_vggtransformer.VGGTransformerEncoderTest.setUp": [[83, 87], ["super().setUp", "test_vggtransformer.VGGTransformerEncoderTest.setUpInput", "asr_test_base.get_dummy_input"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestTopPSamplingSearch.setUp", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.TestFairseqDecoderBase.setUpInput", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.get_dummy_input"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "setUp", "(", ")", "\n", "\n", "self", ".", "setUpInput", "(", "get_dummy_input", "(", "T", "=", "50", ",", "D", "=", "80", ",", "B", "=", "5", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.test_vggtransformer.VGGTransformerEncoderTest.test_forward": [[88, 121], ["print", "test_vggtransformer.VGGTransformerEncoderTest.setUpEncoder", "super().test_forward", "print", "test_vggtransformer.VGGTransformerEncoderTest.setUpEncoder", "super().test_forward", "print", "test_vggtransformer.VGGTransformerEncoderTest.setUpEncoder", "super().test_forward", "print", "test_vggtransformer.VGGTransformerEncoderTest.setUpEncoder", "super().test_forward", "print", "test_vggtransformer.VGGTransformerEncoderTest.setUpEncoder", "examples.speech_recognition.models.vggtransformer.VGGTransformerEncoder", "examples.speech_recognition.models.vggtransformer.VGGTransformerEncoder", "examples.speech_recognition.models.vggtransformer.VGGTransformerEncoder", "examples.speech_recognition.models.vggtransformer.VGGTransformerEncoder", "examples.speech_recognition.models.vggtransformer.VGGTransformerEncoder"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.TestFairseqEncoderBase.setUpEncoder", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.test_vggtransformer.VGGTransformerEncoderTest.test_forward", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.TestFairseqEncoderBase.setUpEncoder", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.test_vggtransformer.VGGTransformerEncoderTest.test_forward", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.TestFairseqEncoderBase.setUpEncoder", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.test_vggtransformer.VGGTransformerEncoderTest.test_forward", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.TestFairseqEncoderBase.setUpEncoder", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.test_vggtransformer.VGGTransformerEncoderTest.test_forward", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.TestFairseqEncoderBase.setUpEncoder"], ["", "def", "test_forward", "(", "self", ")", ":", "\n", "        ", "print", "(", "\"1. test standard vggtransformer\"", ")", "\n", "self", ".", "setUpEncoder", "(", "VGGTransformerEncoder", "(", "input_feat_per_channel", "=", "80", ")", ")", "\n", "super", "(", ")", ".", "test_forward", "(", ")", "\n", "print", "(", "\"2. test vggtransformer with limited right context\"", ")", "\n", "self", ".", "setUpEncoder", "(", "\n", "VGGTransformerEncoder", "(", "\n", "input_feat_per_channel", "=", "80", ",", "transformer_context", "=", "(", "-", "1", ",", "5", ")", "\n", ")", "\n", ")", "\n", "super", "(", ")", ".", "test_forward", "(", ")", "\n", "print", "(", "\"3. test vggtransformer with limited left context\"", ")", "\n", "self", ".", "setUpEncoder", "(", "\n", "VGGTransformerEncoder", "(", "\n", "input_feat_per_channel", "=", "80", ",", "transformer_context", "=", "(", "5", ",", "-", "1", ")", "\n", ")", "\n", ")", "\n", "super", "(", ")", ".", "test_forward", "(", ")", "\n", "print", "(", "\"4. test vggtransformer with limited right context and sampling\"", ")", "\n", "self", ".", "setUpEncoder", "(", "\n", "VGGTransformerEncoder", "(", "\n", "input_feat_per_channel", "=", "80", ",", "\n", "transformer_context", "=", "(", "-", "1", ",", "12", ")", ",", "\n", "transformer_sampling", "=", "(", "2", ",", "2", ")", ",", "\n", ")", "\n", ")", "\n", "super", "(", ")", ".", "test_forward", "(", ")", "\n", "print", "(", "\"5. test vggtransformer with windowed context and sampling\"", ")", "\n", "self", ".", "setUpEncoder", "(", "\n", "VGGTransformerEncoder", "(", "\n", "input_feat_per_channel", "=", "80", ",", "\n", "transformer_context", "=", "(", "12", ",", "12", ")", ",", "\n", "transformer_sampling", "=", "(", "2", ",", "2", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.test_vggtransformer.TransformerDecoderTest.setUp": [[126, 136], ["super().setUp", "asr_test_base.get_dummy_dictionary", "examples.speech_recognition.models.vggtransformer.TransformerDecoder", "asr_test_base.get_dummy_encoder_output", "test_vggtransformer.TransformerDecoderTest.setUpDecoder", "test_vggtransformer.TransformerDecoderTest.setUpInput", "test_vggtransformer.TransformerDecoderTest.setUpPrevOutputTokens"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestTopPSamplingSearch.setUp", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_export.get_dummy_dictionary", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.get_dummy_encoder_output", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.TestFairseqDecoderBase.setUpDecoder", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.TestFairseqDecoderBase.setUpInput", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.asr_test_base.TestFairseqDecoderBase.setUpPrevOutputTokens"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "setUp", "(", ")", "\n", "\n", "dict", "=", "get_dummy_dictionary", "(", "vocab_size", "=", "DEFAULT_TEST_VOCAB_SIZE", ")", "\n", "decoder", "=", "TransformerDecoder", "(", "dict", ")", "\n", "dummy_encoder_output", "=", "get_dummy_encoder_output", "(", "encoder_out_shape", "=", "(", "50", ",", "5", ",", "256", ")", ")", "\n", "\n", "self", ".", "setUpDecoder", "(", "decoder", ")", "\n", "self", ".", "setUpInput", "(", "dummy_encoder_output", ")", "\n", "self", ".", "setUpPrevOutputTokens", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.utils.wer_utils.Token.__init__": [[32, 37], ["numpy.isnan"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "lbl", "=", "\"\"", ",", "st", "=", "np", ".", "nan", ",", "en", "=", "np", ".", "nan", ")", ":", "\n", "        ", "if", "np", ".", "isnan", "(", "st", ")", ":", "\n", "            ", "self", ".", "label", ",", "self", ".", "start", ",", "self", ".", "end", "=", "\"\"", ",", "0.0", ",", "0.0", "\n", "", "else", ":", "\n", "            ", "self", ".", "label", ",", "self", ".", "start", ",", "self", ".", "end", "=", "lbl", ",", "st", ",", "en", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.utils.wer_utils.AlignmentResult.__init__": [[40, 45], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "refs", ",", "hyps", ",", "codes", ",", "score", ")", ":", "\n", "        ", "self", ".", "refs", "=", "refs", "# std::deque<int>", "\n", "self", ".", "hyps", "=", "hyps", "# std::deque<int>", "\n", "self", ".", "codes", "=", "codes", "# std::deque<Code>", "\n", "self", ".", "score", "=", "score", "# float", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.utils.wer_utils.EditDistance.__init__": [[72, 79], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "time_mediated", ")", ":", "\n", "        ", "self", ".", "time_mediated_", "=", "time_mediated", "\n", "self", ".", "scores_", "=", "np", ".", "nan", "# Eigen::Matrix<float, Eigen::Dynamic, Eigen::Dynamic>", "\n", "self", ".", "backtraces_", "=", "(", "\n", "np", ".", "nan", "\n", ")", "# Eigen::Matrix<size_t, Eigen::Dynamic, Eigen::Dynamic> backtraces_;", "\n", "self", ".", "confusion_pairs_", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.utils.wer_utils.EditDistance.cost": [[80, 97], ["abs", "abs", "abs", "abs"], "methods", ["None"], ["", "def", "cost", "(", "self", ",", "ref", ",", "hyp", ",", "code", ")", ":", "\n", "        ", "if", "self", ".", "time_mediated_", ":", "\n", "            ", "if", "code", "==", "Code", ".", "match", ":", "\n", "                ", "return", "abs", "(", "ref", ".", "start", "-", "hyp", ".", "start", ")", "+", "abs", "(", "ref", ".", "end", "-", "hyp", ".", "end", ")", "\n", "", "elif", "code", "==", "Code", ".", "insertion", ":", "\n", "                ", "return", "hyp", ".", "end", "-", "hyp", ".", "start", "\n", "", "elif", "code", "==", "Code", ".", "deletion", ":", "\n", "                ", "return", "ref", ".", "end", "-", "ref", ".", "start", "\n", "", "else", ":", "# substitution", "\n", "                ", "return", "abs", "(", "ref", ".", "start", "-", "hyp", ".", "start", ")", "+", "abs", "(", "ref", ".", "end", "-", "hyp", ".", "end", ")", "+", "0.1", "\n", "", "", "else", ":", "\n", "            ", "if", "code", "==", "Code", ".", "match", ":", "\n", "                ", "return", "0", "\n", "", "elif", "code", "==", "Code", ".", "insertion", "or", "code", "==", "Code", ".", "deletion", ":", "\n", "                ", "return", "3", "\n", "", "else", ":", "# substitution", "\n", "                ", "return", "4", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.utils.wer_utils.EditDistance.get_result": [[98, 140], ["wer_utils.AlignmentResult", "wer_utils.coordinate_to_offset", "wer_utils.offset_to_row", "wer_utils.offset_to_col", "wer_utils.offset_to_row", "wer_utils.offset_to_col", "AlignmentResult.refs.appendleft", "AlignmentResult.hyps.appendleft", "collections.deque", "collections.deque", "collections.deque", "AlignmentResult.codes.appendleft", "AlignmentResult.codes.appendleft", "AlignmentResult.codes.appendleft", "AlignmentResult.codes.appendleft"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.utils.wer_utils.coordinate_to_offset", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.utils.wer_utils.offset_to_row", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.utils.wer_utils.offset_to_col", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.utils.wer_utils.offset_to_row", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.utils.wer_utils.offset_to_col"], ["", "", "", "def", "get_result", "(", "self", ",", "refs", ",", "hyps", ")", ":", "\n", "        ", "res", "=", "AlignmentResult", "(", "refs", "=", "deque", "(", ")", ",", "hyps", "=", "deque", "(", ")", ",", "codes", "=", "deque", "(", ")", ",", "score", "=", "np", ".", "nan", ")", "\n", "\n", "num_rows", ",", "num_cols", "=", "self", ".", "scores_", ".", "shape", "\n", "res", ".", "score", "=", "self", ".", "scores_", "[", "num_rows", "-", "1", ",", "num_cols", "-", "1", "]", "\n", "\n", "curr_offset", "=", "coordinate_to_offset", "(", "num_rows", "-", "1", ",", "num_cols", "-", "1", ",", "num_cols", ")", "\n", "\n", "while", "curr_offset", "!=", "0", ":", "\n", "            ", "curr_row", "=", "offset_to_row", "(", "curr_offset", ",", "num_cols", ")", "\n", "curr_col", "=", "offset_to_col", "(", "curr_offset", ",", "num_cols", ")", "\n", "\n", "prev_offset", "=", "self", ".", "backtraces_", "[", "curr_row", ",", "curr_col", "]", "\n", "\n", "prev_row", "=", "offset_to_row", "(", "prev_offset", ",", "num_cols", ")", "\n", "prev_col", "=", "offset_to_col", "(", "prev_offset", ",", "num_cols", ")", "\n", "\n", "res", ".", "refs", ".", "appendleft", "(", "curr_row", "-", "1", ")", "# Note: this was .push_front() in C++", "\n", "res", ".", "hyps", ".", "appendleft", "(", "curr_col", "-", "1", ")", "\n", "if", "curr_row", "-", "1", "==", "prev_row", "and", "curr_col", "==", "prev_col", ":", "\n", "                ", "res", ".", "codes", ".", "appendleft", "(", "Code", ".", "deletion", ")", "\n", "", "elif", "curr_row", "==", "prev_row", "and", "curr_col", "-", "1", "==", "prev_col", ":", "\n", "                ", "res", ".", "codes", ".", "appendleft", "(", "Code", ".", "insertion", ")", "\n", "", "else", ":", "\n", "# assert(curr_row - 1 == prev_row and curr_col - 1 == prev_col)", "\n", "                ", "ref_str", "=", "refs", "[", "res", ".", "refs", "[", "0", "]", "]", ".", "label", "\n", "hyp_str", "=", "hyps", "[", "res", ".", "hyps", "[", "0", "]", "]", ".", "label", "\n", "\n", "if", "ref_str", "==", "hyp_str", ":", "\n", "                    ", "res", ".", "codes", ".", "appendleft", "(", "Code", ".", "match", ")", "\n", "", "else", ":", "\n", "                    ", "res", ".", "codes", ".", "appendleft", "(", "Code", ".", "substitution", ")", "\n", "\n", "confusion_pair", "=", "\"%s -> %s\"", "%", "(", "ref_str", ",", "hyp_str", ")", "\n", "if", "confusion_pair", "not", "in", "self", ".", "confusion_pairs_", ":", "\n", "                        ", "self", ".", "confusion_pairs_", "[", "confusion_pair", "]", "=", "1", "\n", "", "else", ":", "\n", "                        ", "self", ".", "confusion_pairs_", "[", "confusion_pair", "]", "+=", "1", "\n", "\n", "", "", "", "curr_offset", "=", "prev_offset", "\n", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.utils.wer_utils.EditDistance.align": [[141, 203], ["numpy.zeros", "numpy.zeros", "range", "wer_utils.EditDistance.get_result", "range", "len", "len", "wer_utils.coordinate_to_offset", "len", "len", "len", "len", "wer_utils.coordinate_to_offset", "wer_utils.coordinate_to_offset", "wer_utils.EditDistance.cost", "wer_utils.EditDistance.cost", "wer_utils.EditDistance.cost", "wer_utils.EditDistance.cost", "wer_utils.EditDistance.cost", "wer_utils.EditDistance.cost"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.utils.wer_utils.EditDistance.get_result", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.utils.wer_utils.coordinate_to_offset", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.utils.wer_utils.coordinate_to_offset", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.utils.wer_utils.coordinate_to_offset", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.utils.wer_utils.EditDistance.cost", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.utils.wer_utils.EditDistance.cost", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.utils.wer_utils.EditDistance.cost", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.utils.wer_utils.EditDistance.cost", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.utils.wer_utils.EditDistance.cost", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.utils.wer_utils.EditDistance.cost"], ["", "def", "align", "(", "self", ",", "refs", ",", "hyps", ")", ":", "\n", "        ", "if", "len", "(", "refs", ")", "==", "0", "and", "len", "(", "hyps", ")", "==", "0", ":", "\n", "            ", "return", "np", ".", "nan", "\n", "\n", "# NOTE: we're not resetting the values in these matrices because every value", "\n", "# will be overridden in the loop below. If this assumption doesn't hold,", "\n", "# be sure to set all entries in self.scores_ and self.backtraces_ to 0.", "\n", "", "self", ".", "scores_", "=", "np", ".", "zeros", "(", "(", "len", "(", "refs", ")", "+", "1", ",", "len", "(", "hyps", ")", "+", "1", ")", ")", "\n", "self", ".", "backtraces_", "=", "np", ".", "zeros", "(", "(", "len", "(", "refs", ")", "+", "1", ",", "len", "(", "hyps", ")", "+", "1", ")", ")", "\n", "\n", "num_rows", ",", "num_cols", "=", "self", ".", "scores_", ".", "shape", "\n", "\n", "for", "i", "in", "range", "(", "num_rows", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "num_cols", ")", ":", "\n", "                ", "if", "i", "==", "0", "and", "j", "==", "0", ":", "\n", "                    ", "self", ".", "scores_", "[", "i", ",", "j", "]", "=", "0.0", "\n", "self", ".", "backtraces_", "[", "i", ",", "j", "]", "=", "0", "\n", "continue", "\n", "\n", "", "if", "i", "==", "0", ":", "\n", "                    ", "self", ".", "scores_", "[", "i", ",", "j", "]", "=", "self", ".", "scores_", "[", "i", ",", "j", "-", "1", "]", "+", "self", ".", "cost", "(", "\n", "None", ",", "hyps", "[", "j", "-", "1", "]", ",", "Code", ".", "insertion", "\n", ")", "\n", "self", ".", "backtraces_", "[", "i", ",", "j", "]", "=", "coordinate_to_offset", "(", "i", ",", "j", "-", "1", ",", "num_cols", ")", "\n", "continue", "\n", "\n", "", "if", "j", "==", "0", ":", "\n", "                    ", "self", ".", "scores_", "[", "i", ",", "j", "]", "=", "self", ".", "scores_", "[", "i", "-", "1", ",", "j", "]", "+", "self", ".", "cost", "(", "\n", "refs", "[", "i", "-", "1", "]", ",", "None", ",", "Code", ".", "deletion", "\n", ")", "\n", "self", ".", "backtraces_", "[", "i", ",", "j", "]", "=", "coordinate_to_offset", "(", "i", "-", "1", ",", "j", ",", "num_cols", ")", "\n", "continue", "\n", "\n", "# Below here both i and j are greater than 0", "\n", "", "ref", "=", "refs", "[", "i", "-", "1", "]", "\n", "hyp", "=", "hyps", "[", "j", "-", "1", "]", "\n", "best_score", "=", "self", ".", "scores_", "[", "i", "-", "1", ",", "j", "-", "1", "]", "+", "(", "\n", "self", ".", "cost", "(", "ref", ",", "hyp", ",", "Code", ".", "match", ")", "\n", "if", "(", "ref", ".", "label", "==", "hyp", ".", "label", ")", "\n", "else", "self", ".", "cost", "(", "ref", ",", "hyp", ",", "Code", ".", "substitution", ")", "\n", ")", "\n", "\n", "prev_row", "=", "i", "-", "1", "\n", "prev_col", "=", "j", "-", "1", "\n", "ins", "=", "self", ".", "scores_", "[", "i", ",", "j", "-", "1", "]", "+", "self", ".", "cost", "(", "None", ",", "hyp", ",", "Code", ".", "insertion", ")", "\n", "if", "ins", "<", "best_score", ":", "\n", "                    ", "best_score", "=", "ins", "\n", "prev_row", "=", "i", "\n", "prev_col", "=", "j", "-", "1", "\n", "\n", "", "delt", "=", "self", ".", "scores_", "[", "i", "-", "1", ",", "j", "]", "+", "self", ".", "cost", "(", "ref", ",", "None", ",", "Code", ".", "deletion", ")", "\n", "if", "delt", "<", "best_score", ":", "\n", "                    ", "best_score", "=", "delt", "\n", "prev_row", "=", "i", "-", "1", "\n", "prev_col", "=", "j", "\n", "\n", "", "self", ".", "scores_", "[", "i", ",", "j", "]", "=", "best_score", "\n", "self", ".", "backtraces_", "[", "i", ",", "j", "]", "=", "coordinate_to_offset", "(", "\n", "prev_row", ",", "prev_col", ",", "num_cols", "\n", ")", "\n", "\n", "", "", "return", "self", ".", "get_result", "(", "refs", ",", "hyps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.utils.wer_utils.WERTransformer.__init__": [[206, 220], ["wer_utils.EditDistance", "wer_utils.WERTransformer.process", "print", "wer_utils.WERTransformer.report_result"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.utils.wer_utils.WERTransformer.process", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.utils.wer_utils.WERTransformer.report_result"], ["    ", "def", "__init__", "(", "self", ",", "hyp_str", ",", "ref_str", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "self", ".", "ed_", "=", "EditDistance", "(", "False", ")", "\n", "self", ".", "id2oracle_errs_", "=", "{", "}", "\n", "self", ".", "utts_", "=", "0", "\n", "self", ".", "words_", "=", "0", "\n", "self", ".", "insertions_", "=", "0", "\n", "self", ".", "deletions_", "=", "0", "\n", "self", ".", "substitutions_", "=", "0", "\n", "\n", "self", ".", "process", "(", "[", "\"dummy_str\"", ",", "hyp_str", ",", "ref_str", "]", ")", "\n", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"'%s' vs '%s'\"", "%", "(", "hyp_str", ",", "ref_str", ")", ")", "\n", "self", ".", "report_result", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.utils.wer_utils.WERTransformer.process": [[221, 293], ["wer_utils.str2toks", "wer_utils.str2toks", "wer_utils.WERTransformer.ed_.align", "row.append", "row.append", "row.append", "row.append", "input[].split", "len", "print", "print", "str", "str", "str", "str", "len", "print", "len", "numpy.sum", "len", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.utils.wer_utils.str2toks", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.utils.wer_utils.str2toks", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.utils.wer_utils.EditDistance.align", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], ["", "", "def", "process", "(", "self", ",", "input", ")", ":", "# std::vector<std::string>&& input", "\n", "        ", "if", "len", "(", "input", ")", "<", "3", ":", "\n", "            ", "print", "(", "\n", "\"Input must be of the form <id> ... <hypo> <ref> , got \"", ",", "\n", "len", "(", "input", ")", ",", "\n", "\" inputs:\"", ",", "\n", ")", "\n", "return", "None", "\n", "\n", "# Align", "\n", "# std::vector<Token> hyps;", "\n", "# std::vector<Token> refs;", "\n", "\n", "", "hyps", "=", "str2toks", "(", "input", "[", "-", "2", "]", ")", "\n", "refs", "=", "str2toks", "(", "input", "[", "-", "1", "]", ")", "\n", "\n", "alignment", "=", "self", ".", "ed_", ".", "align", "(", "refs", ",", "hyps", ")", "\n", "if", "alignment", "is", "None", ":", "\n", "            ", "print", "(", "\"Alignment is null\"", ")", "\n", "return", "np", ".", "nan", "\n", "\n", "# Tally errors", "\n", "", "ins", "=", "0", "\n", "dels", "=", "0", "\n", "subs", "=", "0", "\n", "for", "code", "in", "alignment", ".", "codes", ":", "\n", "            ", "if", "code", "==", "Code", ".", "substitution", ":", "\n", "                ", "subs", "+=", "1", "\n", "", "elif", "code", "==", "Code", ".", "insertion", ":", "\n", "                ", "ins", "+=", "1", "\n", "", "elif", "code", "==", "Code", ".", "deletion", ":", "\n", "                ", "dels", "+=", "1", "\n", "\n", "# Output", "\n", "", "", "row", "=", "input", "\n", "row", ".", "append", "(", "str", "(", "len", "(", "refs", ")", ")", ")", "\n", "row", ".", "append", "(", "str", "(", "ins", ")", ")", "\n", "row", ".", "append", "(", "str", "(", "dels", ")", ")", "\n", "row", ".", "append", "(", "str", "(", "subs", ")", ")", "\n", "# print(row)", "\n", "\n", "# Accumulate", "\n", "kIdIndex", "=", "0", "\n", "kNBestSep", "=", "\"/\"", "\n", "\n", "pieces", "=", "input", "[", "kIdIndex", "]", ".", "split", "(", "kNBestSep", ")", "\n", "\n", "if", "len", "(", "pieces", ")", "==", "0", ":", "\n", "            ", "print", "(", "\n", "\"Error splitting \"", ",", "\n", "input", "[", "kIdIndex", "]", ",", "\n", "\" on '\"", ",", "\n", "kNBestSep", ",", "\n", "\"', got empty list\"", ",", "\n", ")", "\n", "return", "np", ".", "nan", "\n", "\n", "", "id", "=", "pieces", "[", "0", "]", "\n", "if", "id", "not", "in", "self", ".", "id2oracle_errs_", ":", "\n", "            ", "self", ".", "utts_", "+=", "1", "\n", "self", ".", "words_", "+=", "len", "(", "refs", ")", "\n", "self", ".", "insertions_", "+=", "ins", "\n", "self", ".", "deletions_", "+=", "dels", "\n", "self", ".", "substitutions_", "+=", "subs", "\n", "self", ".", "id2oracle_errs_", "[", "id", "]", "=", "[", "ins", ",", "dels", ",", "subs", "]", "\n", "", "else", ":", "\n", "            ", "curr_err", "=", "ins", "+", "dels", "+", "subs", "\n", "prev_err", "=", "np", ".", "sum", "(", "self", ".", "id2oracle_errs_", "[", "id", "]", ")", "\n", "if", "curr_err", "<", "prev_err", ":", "\n", "                ", "self", ".", "id2oracle_errs_", "[", "id", "]", "=", "[", "ins", ",", "dels", ",", "subs", "]", "\n", "\n", "", "", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.utils.wer_utils.WERTransformer.report_result": [[294, 317], ["print", "print"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], ["", "def", "report_result", "(", "self", ")", ":", "\n", "# print(\"----------  Summary ---------------\")", "\n", "        ", "if", "self", ".", "words_", "==", "0", ":", "\n", "            ", "print", "(", "\"No words counted\"", ")", "\n", "return", "\n", "\n", "# 1-best", "\n", "", "best_wer", "=", "(", "\n", "100.0", "\n", "*", "(", "self", ".", "insertions_", "+", "self", ".", "deletions_", "+", "self", ".", "substitutions_", ")", "\n", "/", "self", ".", "words_", "\n", ")", "\n", "\n", "print", "(", "\n", "\"\\tWER = %0.2f%% (%i utts, %i words, %0.2f%% ins, \"", "\n", "\"%0.2f%% dels, %0.2f%% subs)\"", "\n", "%", "(", "\n", "best_wer", ",", "\n", "self", ".", "utts_", ",", "\n", "self", ".", "words_", ",", "\n", "100.0", "*", "self", ".", "insertions_", "/", "self", ".", "words_", ",", "\n", "100.0", "*", "self", ".", "deletions_", "/", "self", ".", "words_", ",", "\n", "100.0", "*", "self", ".", "substitutions_", "/", "self", ".", "words_", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.utils.wer_utils.WERTransformer.wer": [[320, 330], ["None"], "methods", ["None"], ["", "def", "wer", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "words_", "==", "0", ":", "\n", "            ", "wer", "=", "np", ".", "nan", "\n", "", "else", ":", "\n", "            ", "wer", "=", "(", "\n", "100.0", "\n", "*", "(", "self", ".", "insertions_", "+", "self", ".", "deletions_", "+", "self", ".", "substitutions_", ")", "\n", "/", "self", ".", "words_", "\n", ")", "\n", "", "return", "wer", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.utils.wer_utils.WERTransformer.stats": [[331, 352], ["dict"], "methods", ["None"], ["", "def", "stats", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "words_", "==", "0", ":", "\n", "            ", "stats", "=", "{", "}", "\n", "", "else", ":", "\n", "            ", "wer", "=", "(", "\n", "100.0", "\n", "*", "(", "self", ".", "insertions_", "+", "self", ".", "deletions_", "+", "self", ".", "substitutions_", ")", "\n", "/", "self", ".", "words_", "\n", ")", "\n", "stats", "=", "dict", "(", "\n", "{", "\n", "\"wer\"", ":", "wer", ",", "\n", "\"utts\"", ":", "self", ".", "utts_", ",", "\n", "\"numwords\"", ":", "self", ".", "words_", ",", "\n", "\"ins\"", ":", "self", ".", "insertions_", ",", "\n", "\"dels\"", ":", "self", ".", "deletions_", ",", "\n", "\"subs\"", ":", "self", ".", "substitutions_", ",", "\n", "\"confusion_pairs\"", ":", "self", ".", "ed_", ".", "confusion_pairs_", ",", "\n", "}", "\n", ")", "\n", "", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.utils.wer_utils.coordinate_to_offset": [[47, 49], ["int"], "function", ["None"], ["", "", "def", "coordinate_to_offset", "(", "row", ",", "col", ",", "ncols", ")", ":", "\n", "    ", "return", "int", "(", "row", "*", "ncols", "+", "col", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.utils.wer_utils.offset_to_row": [[51, 53], ["int"], "function", ["None"], ["", "def", "offset_to_row", "(", "offset", ",", "ncols", ")", ":", "\n", "    ", "return", "int", "(", "offset", "/", "ncols", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.utils.wer_utils.offset_to_col": [[55, 57], ["int"], "function", ["None"], ["", "def", "offset_to_col", "(", "offset", ",", "ncols", ")", ":", "\n", "    ", "return", "int", "(", "offset", "%", "ncols", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.utils.wer_utils.trimWhitespace": [[59, 61], ["re.sub", "re.sub", "re.sub"], "function", ["None"], ["", "def", "trimWhitespace", "(", "str", ")", ":", "\n", "    ", "return", "re", ".", "sub", "(", "\" +\"", ",", "\" \"", ",", "re", ".", "sub", "(", "\" *$\"", ",", "\"\"", ",", "re", ".", "sub", "(", "\"^ *\"", ",", "\"\"", ",", "str", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.utils.wer_utils.str2toks": [[63, 69], ["trimWhitespace().split", "toks.append", "wer_utils.trimWhitespace", "wer_utils.Token"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.utils.wer_utils.trimWhitespace"], ["", "def", "str2toks", "(", "str", ")", ":", "\n", "    ", "pieces", "=", "trimWhitespace", "(", "str", ")", ".", "split", "(", "\" \"", ")", "\n", "toks", "=", "[", "]", "\n", "for", "p", "in", "pieces", ":", "\n", "        ", "toks", ".", "append", "(", "Token", "(", "p", ",", "0.0", ",", "0.0", ")", ")", "\n", "", "return", "toks", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.utils.wer_utils.calc_wer": [[354, 357], ["wer_utils.WERTransformer", "wer_utils.WERTransformer.wer"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.utils.wer_utils.WERTransformer.wer"], ["", "", "def", "calc_wer", "(", "hyp_str", ",", "ref_str", ")", ":", "\n", "    ", "t", "=", "WERTransformer", "(", "hyp_str", ",", "ref_str", ",", "verbose", "=", "0", ")", "\n", "return", "t", ".", "wer", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.utils.wer_utils.calc_wer_stats": [[359, 362], ["wer_utils.WERTransformer", "wer_utils.WERTransformer.stats"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.utils.wer_utils.WERTransformer.stats"], ["", "def", "calc_wer_stats", "(", "hyp_str", ",", "ref_str", ")", ":", "\n", "    ", "t", "=", "WERTransformer", "(", "hyp_str", ",", "ref_str", ",", "verbose", "=", "0", ")", "\n", "return", "t", ".", "stats", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.utils.wer_utils.get_wer_alignment_codes": [[364, 371], ["wer_utils.WERTransformer", "WERTransformer.ed_.align", "wer_utils.str2toks", "wer_utils.str2toks"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.utils.wer_utils.EditDistance.align", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.utils.wer_utils.str2toks", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.utils.wer_utils.str2toks"], ["", "def", "get_wer_alignment_codes", "(", "hyp_str", ",", "ref_str", ")", ":", "\n", "    ", "\"\"\"\n    INPUT: hypothesis string, reference string\n    OUTPUT: List of alignment codes (intermediate results from WER computation)\n    \"\"\"", "\n", "t", "=", "WERTransformer", "(", "hyp_str", ",", "ref_str", ",", "verbose", "=", "0", ")", "\n", "return", "t", ".", "ed_", ".", "align", "(", "str2toks", "(", "ref_str", ")", ",", "str2toks", "(", "hyp_str", ")", ")", ".", "codes", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.utils.wer_utils.merge_counts": [[373, 382], ["y.items"], "function", ["None"], ["", "def", "merge_counts", "(", "x", ",", "y", ")", ":", "\n", "# Merge two hashes which have 'counts' as their values", "\n", "# This can be used for example to merge confusion pair counts", "\n", "#   conf_pairs = merge_counts(conf_pairs, stats['confusion_pairs'])", "\n", "    ", "for", "k", ",", "v", "in", "y", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "not", "in", "x", ":", "\n", "            ", "x", "[", "k", "]", "=", "0", "\n", "", "x", "[", "k", "]", "+=", "v", "\n", "", "return", "x", "\n", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.datasets.asr_prep_json.process_sample": [[24, 37], ["torchaudio.info", "int", "tgt_dict.encode_line", "sp.EncodeAsPieces", "map", "t.tolist"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.encode_line"], ["def", "process_sample", "(", "aud_path", ",", "lable", ",", "utt_id", ",", "sp", ",", "tgt_dict", ")", ":", "\n", "    ", "input", "=", "{", "}", "\n", "output", "=", "{", "}", "\n", "si", ",", "ei", "=", "torchaudio", ".", "info", "(", "aud_path", ")", "\n", "input", "[", "\"length_ms\"", "]", "=", "int", "(", "si", ".", "length", "/", "si", ".", "channels", "/", "si", ".", "rate", "/", "MILLISECONDS_TO_SECONDS", ")", "\n", "input", "[", "\"path\"", "]", "=", "aud_path", "\n", "\n", "token", "=", "\" \"", ".", "join", "(", "sp", ".", "EncodeAsPieces", "(", "lable", ")", ")", "\n", "ids", "=", "tgt_dict", ".", "encode_line", "(", "token", ",", "append_eos", "=", "False", ")", "\n", "output", "[", "\"text\"", "]", "=", "lable", "\n", "output", "[", "\"token\"", "]", "=", "token", "\n", "output", "[", "\"tokenid\"", "]", "=", "', '", ".", "join", "(", "map", "(", "str", ",", "[", "t", ".", "tolist", "(", ")", "for", "t", "in", "ids", "]", ")", ")", "\n", "return", "{", "utt_id", ":", "{", "\"input\"", ":", "input", ",", "\"output\"", ":", "output", "}", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.datasets.asr_prep_json.main": [[39, 93], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "sentencepiece.SentencePieceProcessor", "spm.SentencePieceProcessor.Load", "fairseq.data.Dictionary.load", "collections.namedtuple", "itertools.chain.from_iterable", "multiprocessing.cpu_count", "json.dump", "line.split", "len", "Exception", "concurrent.futures.ThreadPoolExecutor", "concurrent.futures.as_completed", "argparse.FileType", "argparse.FileType", "argparse.FileType", "argparse.FileType", "os.walk", "f.endswith", "executor.submit", "samples.append", "future.result", "utts.update", "len", "Exception", "os.path.splitext", "collections.namedtuple.", "print", "os.path.splitext", "os.path.join"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.load", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.update", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--audio-dirs\"", ",", "nargs", "=", "\"+\"", ",", "default", "=", "[", "'-'", "]", ",", "required", "=", "True", ",", "\n", "help", "=", "\"input directories with audio files\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--labels\"", ",", "required", "=", "True", ",", "\n", "help", "=", "\"aggregated input labels with format <ID LABEL> per line\"", ",", "\n", "type", "=", "argparse", ".", "FileType", "(", "'r'", ",", "encoding", "=", "'UTF-8'", ")", ")", "\n", "parser", ".", "add_argument", "(", "\"--spm-model\"", ",", "required", "=", "True", ",", "\n", "help", "=", "\"sentencepiece model to use for encoding\"", ",", "\n", "type", "=", "argparse", ".", "FileType", "(", "'r'", ",", "encoding", "=", "'UTF-8'", ")", ")", "\n", "parser", ".", "add_argument", "(", "\"--dictionary\"", ",", "required", "=", "True", ",", "\n", "help", "=", "\"file to load fairseq dictionary from\"", ",", "\n", "type", "=", "argparse", ".", "FileType", "(", "'r'", ",", "encoding", "=", "'UTF-8'", ")", ")", "\n", "parser", ".", "add_argument", "(", "\"--audio-format\"", ",", "choices", "=", "[", "\"flac\"", ",", "\"wav\"", "]", ",", "default", "=", "\"wav\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--output\"", ",", "required", "=", "True", ",", "type", "=", "argparse", ".", "FileType", "(", "'w'", ")", ",", "\n", "help", "=", "\"path to save json output\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "sp", "=", "spm", ".", "SentencePieceProcessor", "(", ")", "\n", "sp", ".", "Load", "(", "args", ".", "spm_model", ".", "name", ")", "\n", "\n", "tgt_dict", "=", "Dictionary", ".", "load", "(", "args", ".", "dictionary", ")", "\n", "\n", "labels", "=", "{", "}", "\n", "for", "line", "in", "args", ".", "labels", ":", "\n", "        ", "(", "utt_id", ",", "label", ")", "=", "line", ".", "split", "(", "\" \"", ",", "1", ")", "\n", "labels", "[", "utt_id", "]", "=", "label", "\n", "", "if", "len", "(", "labels", ")", "==", "0", ":", "\n", "        ", "raise", "Exception", "(", "'No labels found in '", ",", "args", ".", "labels_path", ")", "\n", "\n", "", "Sample", "=", "namedtuple", "(", "'Sample'", ",", "'aud_path utt_id'", ")", "\n", "samples", "=", "[", "]", "\n", "for", "path", ",", "_", ",", "files", "in", "chain", ".", "from_iterable", "(", "os", ".", "walk", "(", "path", ")", "for", "path", "in", "args", ".", "audio_dirs", ")", ":", "\n", "        ", "for", "f", "in", "files", ":", "\n", "            ", "if", "f", ".", "endswith", "(", "args", ".", "audio_format", ")", ":", "\n", "                ", "if", "len", "(", "os", ".", "path", ".", "splitext", "(", "f", ")", ")", "!=", "2", ":", "\n", "                    ", "raise", "Exception", "(", "'Expect <utt_id.extension> file name. Got: '", ",", "f", ")", "\n", "", "utt_id", "=", "os", ".", "path", ".", "splitext", "(", "f", ")", "[", "0", "]", "\n", "if", "utt_id", "not", "in", "labels", ":", "\n", "                    ", "continue", "\n", "", "samples", ".", "append", "(", "Sample", "(", "os", ".", "path", ".", "join", "(", "path", ",", "f", ")", ",", "utt_id", ")", ")", "\n", "\n", "", "", "", "utts", "=", "{", "}", "\n", "num_cpu", "=", "multiprocessing", ".", "cpu_count", "(", ")", "\n", "with", "concurrent", ".", "futures", ".", "ThreadPoolExecutor", "(", "max_workers", "=", "num_cpu", ")", "as", "executor", ":", "\n", "        ", "future_to_sample", "=", "{", "executor", ".", "submit", "(", "process_sample", ",", "s", ".", "aud_path", ",", "labels", "[", "s", ".", "utt_id", "]", ",", "s", ".", "utt_id", ",", "sp", ",", "tgt_dict", ")", ":", "s", "for", "s", "in", "samples", "}", "\n", "for", "future", "in", "concurrent", ".", "futures", ".", "as_completed", "(", "future_to_sample", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "data", "=", "future", ".", "result", "(", ")", "\n", "", "except", "Exception", "as", "exc", ":", "\n", "                ", "print", "(", "'generated an exception: '", ",", "exc", ")", "\n", "", "else", ":", "\n", "                ", "utts", ".", "update", "(", "data", ")", "\n", "", "", "", "json", ".", "dump", "(", "{", "\"utts\"", ":", "utts", "}", ",", "args", ".", "output", ",", "indent", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.speech_recognition.SpeechRecognitionTask.add_args": [[73, 79], ["parser.add_argument", "parser.add_argument"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add task-specific arguments to the parser.\"\"\"", "\n", "parser", ".", "add_argument", "(", "\"data\"", ",", "help", "=", "\"path to data directory\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--silence-token\"", ",", "default", "=", "\"\\u2581\"", ",", "help", "=", "\"token for silence (used by w2l)\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.speech_recognition.SpeechRecognitionTask.__init__": [[81, 84], ["fairseq.tasks.FairseqTask.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["", "def", "__init__", "(", "self", ",", "args", ",", "tgt_dict", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "self", ".", "tgt_dict", "=", "tgt_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.speech_recognition.SpeechRecognitionTask.setup_task": [[85, 101], ["os.path.join", "fairseq.data.Dictionary.load", "print", "cls", "os.path.isfile", "FileNotFoundError", "fairseq.data.Dictionary.load.add_symbol", "range", "len", "fairseq.data.Dictionary.load.add_symbol", "examples.speech_recognition.data.replabels.replabel_symbol"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.load", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dictionary.BertDictionary.cls", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.isfile", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.replabels.replabel_symbol"], ["", "@", "classmethod", "\n", "def", "setup_task", "(", "cls", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Setup the task (e.g., load dictionaries).\"\"\"", "\n", "dict_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "\"dict.txt\"", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "dict_path", ")", ":", "\n", "            ", "raise", "FileNotFoundError", "(", "\"Dict not found: {}\"", ".", "format", "(", "dict_path", ")", ")", "\n", "", "tgt_dict", "=", "Dictionary", ".", "load", "(", "dict_path", ")", "\n", "\n", "if", "args", ".", "criterion", "==", "\"ctc_loss\"", ":", "\n", "            ", "tgt_dict", ".", "add_symbol", "(", "\"<ctc_blank>\"", ")", "\n", "", "elif", "args", ".", "criterion", "==", "\"asg_loss\"", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "args", ".", "max_replabel", "+", "1", ")", ":", "\n", "                ", "tgt_dict", ".", "add_symbol", "(", "replabel_symbol", "(", "i", ")", ")", "\n", "\n", "", "", "print", "(", "\"| dictionary: {} types\"", ".", "format", "(", "len", "(", "tgt_dict", ")", ")", ")", "\n", "return", "cls", "(", "args", ",", "tgt_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.speech_recognition.SpeechRecognitionTask.load_dataset": [[102, 110], ["os.path.join", "speech_recognition.get_asr_dataset_from_json"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.speech_recognition.get_asr_dataset_from_json"], ["", "def", "load_dataset", "(", "self", ",", "split", ",", "combine", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Load a given dataset split.\n\n        Args:\n            split (str): name of the split (e.g., train, valid, test)\n        \"\"\"", "\n", "data_json_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "data", ",", "\"{}.json\"", ".", "format", "(", "split", ")", ")", "\n", "self", ".", "datasets", "[", "split", "]", "=", "get_asr_dataset_from_json", "(", "data_json_path", ",", "self", ".", "tgt_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.speech_recognition.SpeechRecognitionTask.build_generator": [[111, 123], ["getattr", "W2lViterbiDecoder", "W2lKenLMDecoder", "super().build_generator"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.fairseq_task.FairseqTask.build_generator"], ["", "def", "build_generator", "(", "self", ",", "args", ")", ":", "\n", "        ", "w2l_decoder", "=", "getattr", "(", "args", ",", "\"w2l_decoder\"", ",", "None", ")", "\n", "if", "w2l_decoder", "==", "\"viterbi\"", ":", "\n", "            ", "from", "examples", ".", "speech_recognition", ".", "w2l_decoder", "import", "W2lViterbiDecoder", "\n", "\n", "return", "W2lViterbiDecoder", "(", "args", ",", "self", ".", "target_dictionary", ")", "\n", "", "elif", "w2l_decoder", "==", "\"kenlm\"", ":", "\n", "            ", "from", "examples", ".", "speech_recognition", ".", "w2l_decoder", "import", "W2lKenLMDecoder", "\n", "\n", "return", "W2lKenLMDecoder", "(", "args", ",", "self", ".", "target_dictionary", ")", "\n", "", "else", ":", "\n", "            ", "return", "super", "(", ")", ".", "build_generator", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.speech_recognition.SpeechRecognitionTask.target_dictionary": [[124, 129], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "target_dictionary", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the :class:`~fairseq.data.Dictionary` for the language\n        model.\"\"\"", "\n", "return", "self", ".", "tgt_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.speech_recognition.SpeechRecognitionTask.source_dictionary": [[130, 135], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "source_dictionary", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the source :class:`~fairseq.data.Dictionary` (if applicable\n        for this task).\"\"\"", "\n", "return", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.speech_recognition.get_asr_dataset_from_json": [[17, 65], ["os.path.isfile", "FileNotFoundError", "open", "sorted", "examples.speech_recognition.data.AsrDataset", "json.load", "len", "data_samples.items", "re.search", "speakers.append", "int", "tgt_dict.eos", "int", "re.search.group", "[].split", "re.search.group"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.isfile", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.load", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos"], ["def", "get_asr_dataset_from_json", "(", "data_json_path", ",", "tgt_dict", ")", ":", "\n", "    ", "\"\"\"\n    Parse data json and create dataset.\n    See scripts/asr_prep_json.py which pack json from raw files\n\n    Json example:\n    {\n    \"utts\": {\n        \"4771-29403-0025\": {\n            \"input\": {\n                \"length_ms\": 170,\n                \"path\": \"/tmp/file1.flac\"\n            },\n            \"output\": {\n                \"text\": \"HELLO \\n\",\n                \"token\": \"HE LLO\",\n                \"tokenid\": \"4815, 861\"\n            }\n        },\n        \"1564-142299-0096\": {\n            ...\n        }\n    }\n    \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "data_json_path", ")", ":", "\n", "        ", "raise", "FileNotFoundError", "(", "\"Dataset not found: {}\"", ".", "format", "(", "data_json_path", ")", ")", "\n", "", "with", "open", "(", "data_json_path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "        ", "data_samples", "=", "json", ".", "load", "(", "f", ")", "[", "\"utts\"", "]", "\n", "assert", "len", "(", "data_samples", ")", "!=", "0", "\n", "sorted_samples", "=", "sorted", "(", "\n", "data_samples", ".", "items", "(", ")", ",", "\n", "key", "=", "lambda", "sample", ":", "int", "(", "sample", "[", "1", "]", "[", "\"input\"", "]", "[", "\"length_ms\"", "]", ")", ",", "\n", "reverse", "=", "True", ",", "\n", ")", "\n", "aud_paths", "=", "[", "s", "[", "1", "]", "[", "\"input\"", "]", "[", "\"path\"", "]", "for", "s", "in", "sorted_samples", "]", "\n", "ids", "=", "[", "s", "[", "0", "]", "for", "s", "in", "sorted_samples", "]", "\n", "speakers", "=", "[", "]", "\n", "for", "s", "in", "sorted_samples", ":", "\n", "            ", "m", "=", "re", ".", "search", "(", "\"(.+?)-(.+?)-(.+?)\"", ",", "s", "[", "0", "]", ")", "\n", "speakers", ".", "append", "(", "m", ".", "group", "(", "1", ")", "+", "\"_\"", "+", "m", ".", "group", "(", "2", ")", ")", "\n", "", "frame_sizes", "=", "[", "s", "[", "1", "]", "[", "\"input\"", "]", "[", "\"length_ms\"", "]", "for", "s", "in", "sorted_samples", "]", "\n", "tgt", "=", "[", "\n", "[", "int", "(", "i", ")", "for", "i", "in", "s", "[", "1", "]", "[", "\"output\"", "]", "[", "\"tokenid\"", "]", ".", "split", "(", "\", \"", ")", "]", "\n", "for", "s", "in", "sorted_samples", "\n", "]", "\n", "# append eos", "\n", "tgt", "=", "[", "[", "*", "t", ",", "tgt_dict", ".", "eos", "(", ")", "]", "for", "t", "in", "tgt", "]", "\n", "return", "AsrDataset", "(", "aud_paths", ",", "frame_sizes", ",", "tgt", ",", "tgt_dict", ",", "ids", ",", "speakers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.semisupervised_translation.SemisupervisedTranslationTask.add_args": [[81, 115], ["multilingual_translation.MultilingualTranslationTask.add_args", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.add_args"], ["\n", "\n", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add task-specific arguments to the parser.\"\"\"", "\n", "# fmt: off", "\n", "MultilingualTranslationTask", ".", "add_args", "(", "parser", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda-parallel-config'", ",", "default", "=", "\"1.0\"", ",", "type", "=", "str", ",", "metavar", "=", "'CONFIG'", ",", "\n", "help", "=", "'cross-entropy reconstruction coefficient (parallel data). '", "\n", "'use fixed weight during training if set to floating point number. '", "\n", "'use piecewise linear function over number of updates to schedule the '", "\n", "'weight with the format: w0:step0,w1:step1,...'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda-denoising-config'", ",", "default", "=", "\"0.0\"", ",", "type", "=", "str", ",", "metavar", "=", "'CONFIG'", ",", "\n", "help", "=", "'Cross-entropy reconstruction coefficient (denoising autoencoding)'", "\n", "'use fixed weight during training if set to floating point number. '", "\n", "'use piecewise linear function over number of updates to schedule the '", "\n", "'weight with the format: w0:step0,w1:step1,...'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda-otf-bt-config'", ",", "default", "=", "\"0.0\"", ",", "type", "=", "str", ",", "metavar", "=", "'CONFIG'", ",", "\n", "help", "=", "'cross-entropy reconstruction coefficient (on-the-fly back-translation parallel data)'", "\n", "'use fixed weight during training if set to floating point number. '", "\n", "'use piecewise linear function over number of updates to schedule the '", "\n", "'weight with the format: w0:step0,w1:step1,...'", ")", "\n", "parser", ".", "add_argument", "(", "'--bt-max-len-a'", ",", "default", "=", "1.1", ",", "type", "=", "float", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'generate back-translated sequences of maximum length ax + b, where x is the '", "\n", "'source length'", ")", "\n", "parser", ".", "add_argument", "(", "'--bt-max-len-b'", ",", "default", "=", "10.0", ",", "type", "=", "float", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'generate back-translated sequences of maximum length ax + b, where x is the '", "\n", "'source length'", ")", "\n", "parser", ".", "add_argument", "(", "'--bt-beam-size'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'beam size used in beam search of online back-translation'", ")", "\n", "parser", ".", "add_argument", "(", "'--max-word-shuffle-distance'", ",", "default", "=", "3.0", ",", "type", "=", "float", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'maximum word shuffle distance for denoising autoencoding data generation'", ")", "\n", "parser", ".", "add_argument", "(", "'--word-dropout-prob'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'word dropout probability for denoising autoencoding data generation'", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.semisupervised_translation.SemisupervisedTranslationTask.__init__": [[117, 130], ["multilingual_translation.MultilingualTranslationTask.__init__", "semisupervised_translation.parse_lambda_config", "semisupervised_translation.parse_lambda_config", "semisupervised_translation.parse_lambda_config", "lang_pair.split"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.semisupervised_translation.parse_lambda_config", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.semisupervised_translation.parse_lambda_config", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.semisupervised_translation.parse_lambda_config"], ["help", "=", "'word blanking probability for denoising autoencoding data generation'", ")", "\n", "# fmt: on", "\n", "\n", "", "def", "__init__", "(", "self", ",", "args", ",", "dicts", ",", "training", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "dicts", ",", "training", ")", "\n", "self", ".", "lambda_parallel", ",", "self", ".", "lambda_parallel_steps", "=", "parse_lambda_config", "(", "args", ".", "lambda_parallel_config", ")", "\n", "self", ".", "lambda_otf_bt", ",", "self", ".", "lambda_otf_bt_steps", "=", "parse_lambda_config", "(", "args", ".", "lambda_otf_bt_config", ")", "\n", "self", ".", "lambda_denoising", ",", "self", ".", "lambda_denoising_steps", "=", "parse_lambda_config", "(", "args", ".", "lambda_denoising_config", ")", "\n", "if", "(", "self", ".", "lambda_denoising", ">", "0.0", "or", "self", ".", "lambda_denoising_steps", "is", "not", "None", ")", ":", "\n", "            ", "denoising_lang_pairs", "=", "[", "\n", "\"%s-%s\"", "%", "(", "tgt", ",", "tgt", ")", "\n", "for", "tgt", "in", "{", "lang_pair", ".", "split", "(", "'-'", ")", "[", "1", "]", "for", "lang_pair", "in", "args", ".", "lang_pairs", "}", "\n", "]", "\n", "self", ".", "model_lang_pairs", "=", "self", ".", "model_lang_pairs", "+", "denoising_lang_pairs", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.semisupervised_translation.SemisupervisedTranslationTask.setup_task": [[131, 135], ["multilingual_translation.MultilingualTranslationTask.prepare", "cls"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.multilingual_translation.MultilingualTranslationTask.prepare", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dictionary.BertDictionary.cls"], ["", "self", ".", "backtranslate_datasets", "=", "{", "}", "\n", "self", ".", "backtranslators", "=", "{", "}", "\n", "\n", "", "@", "classmethod", "\n", "def", "setup_task", "(", "cls", ",", "args", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.semisupervised_translation.SemisupervisedTranslationTask.load_dataset": [[136, 286], ["semisupervised_translation.SemisupervisedTranslationTask.args.data.split", "fairseq.data.RoundRobinZipDatasets", "len", "fairseq.data.indexed_dataset.dataset_exists", "fairseq.data.data_utils.load_indexed_dataset", "split.startswith", "split.startswith", "lang_pair.split", "semisupervised_translation.SemisupervisedTranslationTask.alter_dataset_langtok", "collections.OrderedDict", "os.path.join", "os.path.join", "split.startswith", "lang_pair.split", "semisupervised_translation.SemisupervisedTranslationTask.load_dataset.split_exists"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.dataset_exists", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.load_indexed_dataset", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.multilingual_translation.MultilingualTranslationTask.alter_dataset_langtok"], ["        ", "dicts", ",", "training", "=", "MultilingualTranslationTask", ".", "prepare", "(", "args", ",", "**", "kwargs", ")", "\n", "return", "cls", "(", "args", ",", "dicts", ",", "training", ")", "\n", "\n", "", "def", "load_dataset", "(", "self", ",", "split", ",", "epoch", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Load a dataset split.\"\"\"", "\n", "\n", "paths", "=", "self", ".", "args", ".", "data", ".", "split", "(", "os", ".", "pathsep", ")", "\n", "assert", "len", "(", "paths", ")", ">", "0", "\n", "data_path", "=", "paths", "[", "epoch", "%", "len", "(", "paths", ")", "]", "\n", "\n", "def", "split_exists", "(", "split", ",", "src", ",", "tgt", ",", "lang", ")", ":", "\n", "            ", "if", "src", "is", "not", "None", ":", "\n", "                ", "filename", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'{}.{}-{}.{}'", ".", "format", "(", "split", ",", "src", ",", "tgt", ",", "lang", ")", ")", "\n", "", "else", ":", "\n", "                ", "filename", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'{}.{}-None.{}'", ".", "format", "(", "split", ",", "src", ",", "tgt", ")", ")", "\n", "", "return", "indexed_dataset", ".", "dataset_exists", "(", "filename", ",", "impl", "=", "self", ".", "args", ".", "dataset_impl", ")", "\n", "\n", "", "def", "load_indexed_dataset", "(", "path", ",", "dictionary", ")", ":", "\n", "            ", "return", "data_utils", ".", "load_indexed_dataset", "(", "path", ",", "dictionary", ",", "self", ".", "args", ".", "dataset_impl", ")", "\n", "\n", "# load parallel datasets", "\n", "", "src_datasets", ",", "tgt_datasets", "=", "{", "}", ",", "{", "}", "\n", "if", "(", "self", ".", "lambda_parallel", ">", "0.0", "or", "self", ".", "lambda_parallel_steps", "is", "not", "None", "or", "not", "split", ".", "startswith", "(", "\"train\"", ")", ")", ":", "\n", "            ", "for", "lang_pair", "in", "self", ".", "lang_pairs", ":", "\n", "                ", "src", ",", "tgt", "=", "lang_pair", ".", "split", "(", "'-'", ")", "\n", "if", "split_exists", "(", "split", ",", "src", ",", "tgt", ",", "src", ")", ":", "\n", "                    ", "prefix", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'{}.{}-{}.'", ".", "format", "(", "split", ",", "src", ",", "tgt", ")", ")", "\n", "", "elif", "split_exists", "(", "split", ",", "tgt", ",", "src", ",", "src", ")", ":", "\n", "                    ", "prefix", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'{}.{}-{}.'", ".", "format", "(", "split", ",", "tgt", ",", "src", ")", ")", "\n", "", "else", ":", "\n", "                    ", "continue", "\n", "", "src_datasets", "[", "lang_pair", "]", "=", "load_indexed_dataset", "(", "prefix", "+", "src", ",", "self", ".", "dicts", "[", "src", "]", ")", "\n", "tgt_datasets", "[", "lang_pair", "]", "=", "load_indexed_dataset", "(", "prefix", "+", "tgt", ",", "self", ".", "dicts", "[", "tgt", "]", ")", "\n", "logger", ".", "info", "(", "'parallel-{} {} {} examples'", ".", "format", "(", "data_path", ",", "split", ",", "len", "(", "src_datasets", "[", "lang_pair", "]", ")", ")", ")", "\n", "", "if", "len", "(", "src_datasets", ")", "==", "0", ":", "\n", "                ", "raise", "FileNotFoundError", "(", "'Dataset not found: {} ({})'", ".", "format", "(", "split", ",", "data_path", ")", ")", "\n", "\n", "# back translation datasets", "\n", "", "", "backtranslate_datasets", "=", "{", "}", "\n", "if", "(", "self", ".", "lambda_otf_bt", ">", "0.0", "or", "self", ".", "lambda_otf_bt_steps", "is", "not", "None", ")", "and", "split", ".", "startswith", "(", "\"train\"", ")", ":", "\n", "            ", "for", "lang_pair", "in", "self", ".", "lang_pairs", ":", "\n", "                ", "src", ",", "tgt", "=", "lang_pair", ".", "split", "(", "'-'", ")", "\n", "if", "not", "split_exists", "(", "split", ",", "tgt", ",", "None", ",", "tgt", ")", ":", "\n", "                    ", "raise", "FileNotFoundError", "(", "'Dataset not found: backtranslation {} ({})'", ".", "format", "(", "split", ",", "data_path", ")", ")", "\n", "", "filename", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'{}.{}-None.{}'", ".", "format", "(", "split", ",", "tgt", ",", "tgt", ")", ")", "\n", "dataset", "=", "load_indexed_dataset", "(", "filename", ",", "self", ".", "dicts", "[", "tgt", "]", ")", "\n", "lang_pair_dataset_tgt", "=", "LanguagePairDataset", "(", "\n", "dataset", ",", "\n", "dataset", ".", "sizes", ",", "\n", "self", ".", "dicts", "[", "tgt", "]", ",", "\n", "left_pad_source", "=", "self", ".", "args", ".", "left_pad_source", ",", "\n", "left_pad_target", "=", "self", ".", "args", ".", "left_pad_target", ",", "\n", ")", "\n", "lang_pair_dataset", "=", "LanguagePairDataset", "(", "\n", "dataset", ",", "\n", "dataset", ".", "sizes", ",", "\n", "src_dict", "=", "self", ".", "dicts", "[", "src", "]", ",", "\n", "tgt", "=", "dataset", ",", "\n", "tgt_sizes", "=", "dataset", ".", "sizes", ",", "\n", "tgt_dict", "=", "self", ".", "dicts", "[", "tgt", "]", ",", "\n", "left_pad_source", "=", "self", ".", "args", ".", "left_pad_source", ",", "\n", "left_pad_target", "=", "self", ".", "args", ".", "left_pad_target", ",", "\n", ")", "\n", "backtranslate_datasets", "[", "lang_pair", "]", "=", "BacktranslationDataset", "(", "\n", "tgt_dataset", "=", "self", ".", "alter_dataset_langtok", "(", "\n", "lang_pair_dataset_tgt", ",", "\n", "src_eos", "=", "self", ".", "dicts", "[", "tgt", "]", ".", "eos", "(", ")", ",", "\n", "src_lang", "=", "tgt", ",", "\n", "tgt_lang", "=", "src", ",", "\n", ")", ",", "\n", "backtranslation_fn", "=", "self", ".", "backtranslators", "[", "lang_pair", "]", ",", "\n", "src_dict", "=", "self", ".", "dicts", "[", "src", "]", ",", "tgt_dict", "=", "self", ".", "dicts", "[", "tgt", "]", ",", "\n", "output_collater", "=", "self", ".", "alter_dataset_langtok", "(", "\n", "lang_pair_dataset", "=", "lang_pair_dataset", ",", "\n", "src_eos", "=", "self", ".", "dicts", "[", "src", "]", ".", "eos", "(", ")", ",", "\n", "src_lang", "=", "src", ",", "\n", "tgt_eos", "=", "self", ".", "dicts", "[", "tgt", "]", ".", "eos", "(", ")", ",", "\n", "tgt_lang", "=", "tgt", ",", "\n", ")", ".", "collater", ",", "\n", ")", "\n", "logger", ".", "info", "(", "'backtranslate-{}: {} {} {} examples'", ".", "format", "(", "\n", "tgt", ",", "data_path", ",", "split", ",", "len", "(", "backtranslate_datasets", "[", "lang_pair", "]", ")", ",", "\n", ")", ")", "\n", "self", ".", "backtranslate_datasets", "[", "lang_pair", "]", "=", "backtranslate_datasets", "[", "lang_pair", "]", "\n", "\n", "# denoising autoencoder", "\n", "", "", "noising_datasets", "=", "{", "}", "\n", "if", "(", "self", ".", "lambda_denoising", ">", "0.0", "or", "self", ".", "lambda_denoising_steps", "is", "not", "None", ")", "and", "split", ".", "startswith", "(", "\"train\"", ")", ":", "\n", "            ", "for", "lang_pair", "in", "self", ".", "lang_pairs", ":", "\n", "                ", "_", ",", "tgt", "=", "lang_pair", ".", "split", "(", "'-'", ")", "\n", "if", "not", "split_exists", "(", "split", ",", "tgt", ",", "None", ",", "tgt", ")", ":", "\n", "                    ", "continue", "\n", "", "filename", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'{}.{}-None.{}'", ".", "format", "(", "split", ",", "tgt", ",", "tgt", ")", ")", "\n", "tgt_dataset1", "=", "load_indexed_dataset", "(", "filename", ",", "self", ".", "dicts", "[", "tgt", "]", ")", "\n", "tgt_dataset2", "=", "load_indexed_dataset", "(", "filename", ",", "self", ".", "dicts", "[", "tgt", "]", ")", "\n", "noising_dataset", "=", "NoisingDataset", "(", "\n", "tgt_dataset1", ",", "\n", "self", ".", "dicts", "[", "tgt", "]", ",", "\n", "seed", "=", "1", ",", "\n", "max_word_shuffle_distance", "=", "self", ".", "args", ".", "max_word_shuffle_distance", ",", "\n", "word_dropout_prob", "=", "self", ".", "args", ".", "word_dropout_prob", ",", "\n", "word_blanking_prob", "=", "self", ".", "args", ".", "word_blanking_prob", ",", "\n", ")", "\n", "noising_datasets", "[", "lang_pair", "]", "=", "self", ".", "alter_dataset_langtok", "(", "\n", "LanguagePairDataset", "(", "\n", "noising_dataset", ",", "\n", "tgt_dataset1", ".", "sizes", ",", "\n", "self", ".", "dicts", "[", "tgt", "]", ",", "\n", "tgt_dataset2", ",", "\n", "tgt_dataset2", ".", "sizes", ",", "\n", "self", ".", "dicts", "[", "tgt", "]", ",", "\n", "left_pad_source", "=", "self", ".", "args", ".", "left_pad_source", ",", "\n", "left_pad_target", "=", "self", ".", "args", ".", "left_pad_target", ",", "\n", ")", ",", "\n", "src_eos", "=", "self", ".", "dicts", "[", "tgt", "]", ".", "eos", "(", ")", ",", "\n", "src_lang", "=", "tgt", ",", "\n", "tgt_eos", "=", "self", ".", "dicts", "[", "tgt", "]", ".", "eos", "(", ")", ",", "\n", "tgt_lang", "=", "tgt", ",", "\n", ")", "\n", "logger", ".", "info", "(", "'denoising-{}: {} {} {} examples'", ".", "format", "(", "\n", "tgt", ",", "data_path", ",", "split", ",", "len", "(", "noising_datasets", "[", "lang_pair", "]", ")", ",", "\n", ")", ")", "\n", "\n", "", "", "def", "language_pair_dataset", "(", "lang_pair", ")", ":", "\n", "            ", "src", ",", "tgt", "=", "lang_pair", ".", "split", "(", "'-'", ")", "\n", "src_dataset", ",", "tgt_dataset", "=", "src_datasets", "[", "lang_pair", "]", ",", "tgt_datasets", "[", "lang_pair", "]", "\n", "return", "self", ".", "alter_dataset_langtok", "(", "\n", "LanguagePairDataset", "(", "\n", "src_dataset", ",", "src_dataset", ".", "sizes", ",", "self", ".", "dicts", "[", "src", "]", ",", "\n", "tgt_dataset", ",", "tgt_dataset", ".", "sizes", ",", "self", ".", "dicts", "[", "tgt", "]", ",", "\n", "left_pad_source", "=", "self", ".", "args", ".", "left_pad_source", ",", "\n", "left_pad_target", "=", "self", ".", "args", ".", "left_pad_target", ",", "\n", "max_source_positions", "=", "self", ".", "args", ".", "max_source_positions", ",", "\n", "max_target_positions", "=", "self", ".", "args", ".", "max_target_positions", ",", "\n", ")", ",", "\n", "self", ".", "dicts", "[", "src", "]", ".", "eos", "(", ")", ",", "\n", "src", ",", "\n", "self", ".", "dicts", "[", "tgt", "]", ".", "eos", "(", ")", ",", "\n", "tgt", ",", "\n", ")", "\n", "\n", "", "self", ".", "datasets", "[", "split", "]", "=", "RoundRobinZipDatasets", "(", "\n", "OrderedDict", "(", "[", "\n", "(", "lang_pair", ",", "language_pair_dataset", "(", "lang_pair", ")", ")", "\n", "for", "lang_pair", "in", "src_datasets", ".", "keys", "(", ")", "\n", "]", "+", "[", "\n", "(", "_get_bt_dataset_key", "(", "lang_pair", ")", ",", "dataset", ")", "\n", "for", "lang_pair", ",", "dataset", "in", "backtranslate_datasets", ".", "items", "(", ")", "\n", "]", "+", "[", "\n", "(", "_get_denoising_dataset_key", "(", "lang_pair", ")", ",", "dataset", ")", "\n", "for", "lang_pair", ",", "dataset", "in", "noising_datasets", ".", "items", "(", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.semisupervised_translation.SemisupervisedTranslationTask.build_model": [[288, 321], ["models.build_model", "isinstance", "ValueError", "lang_pair.split", "fairseq.sequence_generator.SequenceGenerator", "semisupervised_translation.SemisupervisedTranslationTask.get_decoder_langtok", "sequence_generator.generate"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.build_model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.multilingual_translation.MultilingualTranslationTask.get_decoder_langtok", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.hub_interface.BARTHubInterface.generate"], ["eval_key", "=", "None", "if", "self", ".", "training", "else", "\"%s-%s\"", "%", "(", "self", ".", "args", ".", "source_lang", ",", "self", ".", "args", ".", "target_lang", ")", ",", "\n", ")", "\n", "\n", "", "def", "build_model", "(", "self", ",", "args", ")", ":", "\n", "        ", "from", "fairseq", "import", "models", "\n", "model", "=", "models", ".", "build_model", "(", "args", ",", "self", ")", "\n", "if", "not", "isinstance", "(", "model", ",", "FairseqMultiModel", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'SemisupervisedTranslationTask requires a FairseqMultiModel architecture'", ")", "\n", "\n", "# create SequenceGenerator for each model that has backtranslation dependency on it", "\n", "", "self", ".", "sequence_generators", "=", "{", "}", "\n", "if", "(", "self", ".", "lambda_otf_bt", ">", "0.0", "or", "self", ".", "lambda_otf_bt_steps", "is", "not", "None", ")", "and", "self", ".", "training", ":", "\n", "            ", "for", "lang_pair", "in", "self", ".", "lang_pairs", ":", "\n", "                ", "src", ",", "tgt", "=", "lang_pair", ".", "split", "(", "'-'", ")", "\n", "key", "=", "'{}-{}'", ".", "format", "(", "tgt", ",", "src", ")", "\n", "self", ".", "sequence_generators", "[", "key", "]", "=", "SequenceGenerator", "(", "\n", "tgt_dict", "=", "self", ".", "dicts", "[", "src", "]", ",", "\n", "beam_size", "=", "args", ".", "bt_beam_size", ",", "\n", "max_len_a", "=", "args", ".", "bt_max_len_a", ",", "\n", "max_len_b", "=", "args", ".", "bt_max_len_b", ",", "\n", ")", "\n", "decoder_lang_tok_idx", "=", "self", ".", "get_decoder_langtok", "(", "src", ")", "\n", "\n", "def", "backtranslate_fn", "(", "\n", "sample", ",", "model", "=", "model", ".", "models", "[", "key", "]", ",", "\n", "bos_token", "=", "decoder_lang_tok_idx", ",", "\n", "sequence_generator", "=", "self", ".", "sequence_generators", "[", "key", "]", ",", "\n", ")", ":", "\n", "                    ", "return", "sequence_generator", ".", "generate", "(", "\n", "[", "model", "]", ",", "\n", "sample", ",", "\n", "bos_token", "=", "bos_token", ",", "\n", ")", "\n", "", "self", ".", "backtranslators", "[", "lang_pair", "]", "=", "backtranslate_fn", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.semisupervised_translation.SemisupervisedTranslationTask.train_step": [[322, 357], ["model.train", "criterion", "optimizer.backward", "loss.detach().item", "semisupervised_translation.SemisupervisedTranslationTask.train_step.forward_backward"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.train.train", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.criterion", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.dynamicconvFunction.backward", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item"], ["\n", "", "", "return", "model", "\n", "\n", "", "def", "train_step", "(", "self", ",", "sample", ",", "model", ",", "criterion", ",", "optimizer", ",", "ignore_grad", "=", "False", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "agg_loss", ",", "agg_sample_size", ",", "agg_logging_output", "=", "0.", ",", "0.", ",", "{", "}", "\n", "\n", "def", "forward_backward", "(", "model", ",", "samples", ",", "logging_output_key", ",", "weight", ")", ":", "\n", "            ", "nonlocal", "agg_loss", ",", "agg_sample_size", ",", "agg_logging_output", "\n", "if", "samples", "is", "None", "or", "len", "(", "samples", ")", "==", "0", ":", "\n", "                ", "return", "\n", "", "loss", ",", "sample_size", ",", "logging_output", "=", "criterion", "(", "model", ",", "samples", ")", "\n", "if", "ignore_grad", ":", "\n", "                ", "loss", "*=", "0", "\n", "", "else", ":", "\n", "                ", "loss", "*=", "weight", "\n", "", "optimizer", ".", "backward", "(", "loss", ")", "\n", "agg_loss", "+=", "loss", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "# TODO make summing of the sample sizes configurable", "\n", "agg_sample_size", "+=", "sample_size", "\n", "agg_logging_output", "[", "logging_output_key", "]", "=", "logging_output", "\n", "\n", "", "if", "self", ".", "lambda_parallel", ">", "0.0", ":", "\n", "            ", "for", "lang_pair", "in", "self", ".", "lang_pairs", ":", "\n", "                ", "forward_backward", "(", "model", ".", "models", "[", "lang_pair", "]", ",", "sample", "[", "lang_pair", "]", ",", "lang_pair", ",", "self", ".", "lambda_parallel", ")", "\n", "\n", "", "", "if", "self", ".", "lambda_otf_bt", ">", "0.0", ":", "\n", "            ", "for", "lang_pair", "in", "self", ".", "lang_pairs", ":", "\n", "                ", "sample_key", "=", "_get_bt_dataset_key", "(", "lang_pair", ")", "\n", "forward_backward", "(", "model", ".", "models", "[", "lang_pair", "]", ",", "sample", "[", "sample_key", "]", ",", "sample_key", ",", "self", ".", "lambda_otf_bt", ")", "\n", "\n", "", "", "if", "self", ".", "lambda_denoising", ">", "0.0", ":", "\n", "            ", "for", "lang_pair", "in", "self", ".", "lang_pairs", ":", "\n", "                ", "_", ",", "tgt", "=", "lang_pair", ".", "split", "(", "'-'", ")", "\n", "sample_key", "=", "_get_denoising_dataset_key", "(", "lang_pair", ")", "\n", "forward_backward", "(", "model", ".", "models", "[", "'{0}-{0}'", ".", "format", "(", "tgt", ")", "]", ",", "sample", "[", "sample_key", "]", ",", "sample_key", ",", "self", ".", "lambda_denoising", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.semisupervised_translation.SemisupervisedTranslationTask.update_step": [[358, 379], ["semisupervised_translation.SemisupervisedTranslationTask.update_step.lambda_step_func"], "methods", ["None"], ["\n", "", "", "return", "agg_loss", ",", "agg_sample_size", ",", "agg_logging_output", "\n", "\n", "", "def", "update_step", "(", "self", ",", "num_updates", ")", ":", "\n", "        ", "def", "lambda_step_func", "(", "config", ",", "n_iter", ")", ":", "\n", "            ", "\"\"\"\n            Update a lambda value according to its schedule configuration.\n            \"\"\"", "\n", "ranges", "=", "[", "i", "for", "i", "in", "range", "(", "len", "(", "config", ")", "-", "1", ")", "if", "config", "[", "i", "]", "[", "0", "]", "<=", "n_iter", "<", "config", "[", "i", "+", "1", "]", "[", "0", "]", "]", "\n", "if", "len", "(", "ranges", ")", "==", "0", ":", "\n", "                ", "assert", "n_iter", ">=", "config", "[", "-", "1", "]", "[", "0", "]", "\n", "return", "config", "[", "-", "1", "]", "[", "1", "]", "\n", "", "assert", "len", "(", "ranges", ")", "==", "1", "\n", "i", "=", "ranges", "[", "0", "]", "\n", "x_a", ",", "y_a", "=", "config", "[", "i", "]", "\n", "x_b", ",", "y_b", "=", "config", "[", "i", "+", "1", "]", "\n", "return", "y_a", "+", "(", "n_iter", "-", "x_a", ")", "*", "float", "(", "y_b", "-", "y_a", ")", "/", "float", "(", "x_b", "-", "x_a", ")", "\n", "\n", "", "if", "self", ".", "lambda_parallel_steps", "is", "not", "None", ":", "\n", "            ", "self", ".", "lambda_parallel", "=", "lambda_step_func", "(", "self", ".", "lambda_parallel_steps", ",", "num_updates", ")", "\n", "", "if", "self", ".", "lambda_denoising_steps", "is", "not", "None", ":", "\n", "            ", "self", ".", "lambda_denoising", "=", "lambda_step_func", "(", "self", ".", "lambda_denoising_steps", ",", "num_updates", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.semisupervised_translation.SemisupervisedTranslationTask.aggregate_logging_outputs": [[380, 396], ["set", "logging_output_keys.intersection.intersection.intersection", "super().aggregate_logging_outputs", "semisupervised_translation._get_denoising_dataset_key", "semisupervised_translation._get_bt_dataset_key"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.resume_srl.intersection", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.binary_cross_entropy.BinaryCrossEntropyCriterion.aggregate_logging_outputs", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.semisupervised_translation._get_denoising_dataset_key", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.semisupervised_translation._get_bt_dataset_key"], ["", "if", "self", ".", "lambda_otf_bt_steps", "is", "not", "None", ":", "\n", "            ", "self", ".", "lambda_otf_bt", "=", "lambda_step_func", "(", "self", ".", "lambda_otf_bt_steps", ",", "num_updates", ")", "\n", "\n", "", "", "def", "aggregate_logging_outputs", "(", "self", ",", "logging_outputs", ",", "criterion", ")", ":", "\n", "# aggregate logging outputs for each language pair", "\n", "        ", "logging_output_keys", "=", "{", "\n", "key", "\n", "for", "logging_output", "in", "logging_outputs", "\n", "for", "key", "in", "logging_output", "\n", "}", "\n", "lang_pair_keys", "=", "set", "(", "self", ".", "lang_pairs", "+", "[", "\n", "_get_bt_dataset_key", "(", "lang_pair", ")", "\n", "for", "lang_pair", "in", "self", ".", "lang_pairs", "\n", "]", "+", "[", "\n", "_get_denoising_dataset_key", "(", "lang_pair", ")", "\n", "for", "lang_pair", "in", "self", ".", "lang_pairs", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.semisupervised_translation._get_bt_dataset_key": [[28, 30], ["None"], "function", ["None"], ["logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.semisupervised_translation._get_denoising_dataset_key": [[32, 34], ["None"], "function", ["None"], ["    ", "return", "\"bt:\"", "+", "lang_pair", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.semisupervised_translation.parse_lambda_config": [[37, 55], ["x.split", "len", "all", "all", "all", "float", "s.split", "float", "k.isdigit", "len", "int", "int", "range", "int", "float", "len"], "function", ["None"], ["\n", "\n", "# ported from UnsupervisedMT", "\n", "", "def", "parse_lambda_config", "(", "x", ")", ":", "\n", "    ", "\"\"\"\n    Parse the configuration of lambda coefficient (for scheduling).\n    x = \"3\"                  # lambda will be a constant equal to x\n    x = \"0:1,1000:0\"         # lambda will start from 1 and linearly decrease\n                             # to 0 during the first 1000 iterations\n    x = \"0:0,1000:0,2000:1\"  # lambda will be equal to 0 for the first 1000\n                             # iterations, then will linearly increase to 1 until iteration 2000\n    \"\"\"", "\n", "split", "=", "x", ".", "split", "(", "','", ")", "\n", "if", "len", "(", "split", ")", "==", "1", ":", "\n", "        ", "return", "float", "(", "x", ")", ",", "None", "\n", "", "else", ":", "\n", "        ", "split", "=", "[", "s", ".", "split", "(", "os", ".", "pathsep", ")", "for", "s", "in", "split", "]", "\n", "assert", "all", "(", "len", "(", "s", ")", "==", "2", "for", "s", "in", "split", ")", "\n", "assert", "all", "(", "k", ".", "isdigit", "(", ")", "for", "k", ",", "_", "in", "split", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.multilingual_translation.MultilingualTranslationTask.add_args": [[63, 90], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["\n", "\n", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add task-specific arguments to the parser.\"\"\"", "\n", "# fmt: off", "\n", "parser", ".", "add_argument", "(", "'data'", ",", "metavar", "=", "'DIR'", ",", "help", "=", "'path to data directory'", ")", "\n", "parser", ".", "add_argument", "(", "'--lang-pairs'", ",", "default", "=", "None", ",", "metavar", "=", "'PAIRS'", ",", "\n", "help", "=", "'comma-separated list of language pairs (in training order): en-de,en-fr,de-fr'", ")", "\n", "parser", ".", "add_argument", "(", "'-s'", ",", "'--source-lang'", ",", "default", "=", "None", ",", "metavar", "=", "'SRC'", ",", "\n", "help", "=", "'source language (only needed for inference)'", ")", "\n", "parser", ".", "add_argument", "(", "'-t'", ",", "'--target-lang'", ",", "default", "=", "None", ",", "metavar", "=", "'TARGET'", ",", "\n", "help", "=", "'target language (only needed for inference)'", ")", "\n", "parser", ".", "add_argument", "(", "'--left-pad-source'", ",", "default", "=", "'True'", ",", "type", "=", "str", ",", "metavar", "=", "'BOOL'", ",", "\n", "help", "=", "'pad the source on the left (default: True)'", ")", "\n", "parser", ".", "add_argument", "(", "'--left-pad-target'", ",", "default", "=", "'False'", ",", "type", "=", "str", ",", "metavar", "=", "'BOOL'", ",", "\n", "help", "=", "'pad the target on the left (default: False)'", ")", "\n", "parser", ".", "add_argument", "(", "'--max-source-positions'", ",", "default", "=", "1024", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'max number of tokens in the source sequence'", ")", "\n", "parser", ".", "add_argument", "(", "'--max-target-positions'", ",", "default", "=", "1024", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'max number of tokens in the target sequence'", ")", "\n", "parser", ".", "add_argument", "(", "'--upsample-primary'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "'amount to upsample primary dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-langtok'", ",", "default", "=", "None", ",", "type", "=", "str", ",", "choices", "=", "[", "'src'", ",", "'tgt'", "]", ",", "\n", "metavar", "=", "'SRCTGT'", ",", "\n", "help", "=", "'replace beginning-of-sentence in source sentence with source or target '", "\n", "'language token. (src/tgt)'", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.multilingual_translation.MultilingualTranslationTask.__init__": [[92, 111], ["FairseqTask.__init__", "list", "dicts.keys"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["help", "=", "'replace beginning-of-sentence in target sentence with target language token'", ")", "\n", "# fmt: on", "\n", "\n", "", "def", "__init__", "(", "self", ",", "args", ",", "dicts", ",", "training", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "self", ".", "dicts", "=", "dicts", "\n", "self", ".", "training", "=", "training", "\n", "if", "training", ":", "\n", "            ", "self", ".", "lang_pairs", "=", "args", ".", "lang_pairs", "\n", "", "else", ":", "\n", "            ", "self", ".", "lang_pairs", "=", "[", "'{}-{}'", ".", "format", "(", "args", ".", "source_lang", ",", "args", ".", "target_lang", ")", "]", "\n", "# eval_lang_pairs for multilingual translation is usually all of the", "\n", "# lang_pairs. However for other multitask settings or when we want to", "\n", "# optimize for certain languages we want to use a different subset. Thus", "\n", "# the eval_lang_pairs class variable is provided for classes that extend", "\n", "# this class.", "\n", "", "self", ".", "eval_lang_pairs", "=", "self", ".", "lang_pairs", "\n", "# model_lang_pairs will be used to build encoder-decoder model pairs in", "\n", "# models.build_model(). This allows multitask type of sub-class can", "\n", "# build models other than the input lang_pairs", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.multilingual_translation.MultilingualTranslationTask.setup_task": [[112, 116], ["cls.prepare", "cls"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.multilingual_translation.MultilingualTranslationTask.prepare", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dictionary.BertDictionary.cls"], ["self", ".", "model_lang_pairs", "=", "self", ".", "lang_pairs", "\n", "self", ".", "langs", "=", "list", "(", "dicts", ".", "keys", "(", ")", ")", "\n", "\n", "", "@", "classmethod", "\n", "def", "setup_task", "(", "cls", ",", "args", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.multilingual_translation.MultilingualTranslationTask.prepare": [[117, 147], ["fairseq.options.eval_bool", "fairseq.options.eval_bool", "isinstance", "sorted", "collections.OrderedDict", "ValueError", "args.lang_pairs.split", "list", "args.data.split", "fairseq.data.Dictionary.load", "print", "len", "os.path.join", "len", "dicts[].pad", "dicts[].pad", "dicts[].eos", "dicts[].eos", "dicts[].unk", "dicts[].unk", "dicts[].add_symbol", "len", "lang_pair.split", "multilingual_translation._lang_token"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.eval_bool", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.eval_bool", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.load", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.unk", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.unk", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.multilingual_translation._lang_token"], ["        ", "dicts", ",", "training", "=", "cls", ".", "prepare", "(", "args", ",", "**", "kwargs", ")", "\n", "return", "cls", "(", "args", ",", "dicts", ",", "training", ")", "\n", "\n", "", "@", "classmethod", "\n", "def", "prepare", "(", "cls", ",", "args", ",", "**", "kargs", ")", ":", "\n", "        ", "args", ".", "left_pad_source", "=", "options", ".", "eval_bool", "(", "args", ".", "left_pad_source", ")", "\n", "args", ".", "left_pad_target", "=", "options", ".", "eval_bool", "(", "args", ".", "left_pad_target", ")", "\n", "\n", "if", "args", ".", "lang_pairs", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'--lang-pairs is required. List all the language pairs in the training objective.'", ")", "\n", "", "if", "isinstance", "(", "args", ".", "lang_pairs", ",", "str", ")", ":", "\n", "            ", "args", ".", "lang_pairs", "=", "args", ".", "lang_pairs", ".", "split", "(", "','", ")", "\n", "", "sorted_langs", "=", "sorted", "(", "list", "(", "{", "x", "for", "lang_pair", "in", "args", ".", "lang_pairs", "for", "x", "in", "lang_pair", ".", "split", "(", "'-'", ")", "}", ")", ")", "\n", "if", "args", ".", "source_lang", "is", "not", "None", "or", "args", ".", "target_lang", "is", "not", "None", ":", "\n", "            ", "training", "=", "False", "\n", "", "else", ":", "\n", "            ", "training", "=", "True", "\n", "\n", "# load dictionaries", "\n", "", "dicts", "=", "OrderedDict", "(", ")", "\n", "for", "lang", "in", "sorted_langs", ":", "\n", "            ", "paths", "=", "args", ".", "data", ".", "split", "(", "os", ".", "pathsep", ")", "\n", "assert", "len", "(", "paths", ")", ">", "0", "\n", "dicts", "[", "lang", "]", "=", "Dictionary", ".", "load", "(", "os", ".", "path", ".", "join", "(", "paths", "[", "0", "]", ",", "'dict.{}.txt'", ".", "format", "(", "lang", ")", ")", ")", "\n", "if", "len", "(", "dicts", ")", ">", "0", ":", "\n", "                ", "assert", "dicts", "[", "lang", "]", ".", "pad", "(", ")", "==", "dicts", "[", "sorted_langs", "[", "0", "]", "]", ".", "pad", "(", ")", "\n", "assert", "dicts", "[", "lang", "]", ".", "eos", "(", ")", "==", "dicts", "[", "sorted_langs", "[", "0", "]", "]", ".", "eos", "(", ")", "\n", "assert", "dicts", "[", "lang", "]", ".", "unk", "(", ")", "==", "dicts", "[", "sorted_langs", "[", "0", "]", "]", ".", "unk", "(", ")", "\n", "", "if", "args", ".", "encoder_langtok", "is", "not", "None", "or", "args", ".", "decoder_langtok", ":", "\n", "                ", "for", "lang_to_add", "in", "sorted_langs", ":", "\n", "                    ", "dicts", "[", "lang", "]", ".", "add_symbol", "(", "_lang_token", "(", "lang_to_add", ")", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.multilingual_translation.MultilingualTranslationTask.get_encoder_langtok": [[148, 155], ["multilingual_translation.MultilingualTranslationTask.dicts[].eos", "multilingual_translation._lang_token_index", "multilingual_translation._lang_token_index"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.multilingual_translation._lang_token_index", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.multilingual_translation._lang_token_index"], ["", "", "logger", ".", "info", "(", "'[{}] dictionary: {} types'", ".", "format", "(", "lang", ",", "len", "(", "dicts", "[", "lang", "]", ")", ")", ")", "\n", "", "return", "dicts", ",", "training", "\n", "\n", "", "def", "get_encoder_langtok", "(", "self", ",", "src_lang", ",", "tgt_lang", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "encoder_langtok", "is", "None", ":", "\n", "            ", "return", "self", ".", "dicts", "[", "src_lang", "]", ".", "eos", "(", ")", "\n", "", "if", "self", ".", "args", ".", "encoder_langtok", "==", "'src'", ":", "\n", "            ", "return", "_lang_token_index", "(", "self", ".", "dicts", "[", "src_lang", "]", ",", "src_lang", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.multilingual_translation.MultilingualTranslationTask.get_decoder_langtok": [[156, 160], ["multilingual_translation._lang_token_index", "multilingual_translation.MultilingualTranslationTask.dicts[].eos"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.multilingual_translation._lang_token_index", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos"], ["", "else", ":", "\n", "            ", "return", "_lang_token_index", "(", "self", ".", "dicts", "[", "src_lang", "]", ",", "tgt_lang", ")", "\n", "\n", "", "", "def", "get_decoder_langtok", "(", "self", ",", "tgt_lang", ")", ":", "\n", "        ", "if", "not", "self", ".", "args", ".", "decoder_langtok", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.multilingual_translation.MultilingualTranslationTask.alter_dataset_langtok": [[161, 185], ["fairseq.data.TransformEosLangPairDataset", "multilingual_translation.MultilingualTranslationTask.get_encoder_langtok", "multilingual_translation.MultilingualTranslationTask.get_decoder_langtok"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.multilingual_translation.MultilingualTranslationTask.get_encoder_langtok", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.multilingual_translation.MultilingualTranslationTask.get_decoder_langtok"], ["            ", "return", "self", ".", "dicts", "[", "tgt_lang", "]", ".", "eos", "(", ")", "\n", "", "return", "_lang_token_index", "(", "self", ".", "dicts", "[", "tgt_lang", "]", ",", "tgt_lang", ")", "\n", "\n", "", "def", "alter_dataset_langtok", "(", "self", ",", "lang_pair_dataset", ",", "\n", "src_eos", "=", "None", ",", "src_lang", "=", "None", ",", "tgt_eos", "=", "None", ",", "tgt_lang", "=", "None", ")", ":", "\n", "        ", "if", "self", ".", "args", ".", "encoder_langtok", "is", "None", "and", "not", "self", ".", "args", ".", "decoder_langtok", ":", "\n", "            ", "return", "lang_pair_dataset", "\n", "\n", "", "new_src_eos", "=", "None", "\n", "if", "self", ".", "args", ".", "encoder_langtok", "is", "not", "None", "and", "src_eos", "is", "not", "None", "and", "src_lang", "is", "not", "None", "and", "tgt_lang", "is", "not", "None", ":", "\n", "            ", "new_src_eos", "=", "self", ".", "get_encoder_langtok", "(", "src_lang", ",", "tgt_lang", ")", "\n", "", "else", ":", "\n", "            ", "src_eos", "=", "None", "\n", "\n", "", "new_tgt_bos", "=", "None", "\n", "if", "self", ".", "args", ".", "decoder_langtok", "and", "tgt_eos", "is", "not", "None", "and", "tgt_lang", "is", "not", "None", ":", "\n", "            ", "new_tgt_bos", "=", "self", ".", "get_decoder_langtok", "(", "tgt_lang", ")", "\n", "", "else", ":", "\n", "            ", "tgt_eos", "=", "None", "\n", "\n", "", "return", "TransformEosLangPairDataset", "(", "\n", "lang_pair_dataset", ",", "\n", "src_eos", "=", "src_eos", ",", "\n", "new_src_eos", "=", "new_src_eos", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.multilingual_translation.MultilingualTranslationTask.load_dataset": [[187, 219], ["multilingual_translation.MultilingualTranslationTask.args.data.split", "fairseq.data.RoundRobinZipDatasets", "len", "lang_pair.split", "fairseq.tasks.translation.load_langpair_dataset", "multilingual_translation.MultilingualTranslationTask.alter_dataset_langtok", "collections.OrderedDict", "len", "multilingual_translation.MultilingualTranslationTask.dicts[].eos", "multilingual_translation.MultilingualTranslationTask.dicts[].eos", "multilingual_translation.MultilingualTranslationTask.load_dataset.language_pair_dataset"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.translation.load_langpair_dataset", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.multilingual_translation.MultilingualTranslationTask.alter_dataset_langtok", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos"], ["new_tgt_bos", "=", "new_tgt_bos", ",", "\n", ")", "\n", "\n", "", "def", "load_dataset", "(", "self", ",", "split", ",", "epoch", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Load a dataset split.\"\"\"", "\n", "\n", "paths", "=", "self", ".", "args", ".", "data", ".", "split", "(", "os", ".", "pathsep", ")", "\n", "assert", "len", "(", "paths", ")", ">", "0", "\n", "data_path", "=", "paths", "[", "epoch", "%", "len", "(", "paths", ")", "]", "\n", "\n", "def", "language_pair_dataset", "(", "lang_pair", ")", ":", "\n", "            ", "src", ",", "tgt", "=", "lang_pair", ".", "split", "(", "'-'", ")", "\n", "langpair_dataset", "=", "load_langpair_dataset", "(", "\n", "data_path", ",", "split", ",", "src", ",", "self", ".", "dicts", "[", "src", "]", ",", "tgt", ",", "self", ".", "dicts", "[", "tgt", "]", ",", "\n", "combine", "=", "True", ",", "dataset_impl", "=", "self", ".", "args", ".", "dataset_impl", ",", "\n", "upsample_primary", "=", "self", ".", "args", ".", "upsample_primary", ",", "\n", "left_pad_source", "=", "self", ".", "args", ".", "left_pad_source", ",", "\n", "left_pad_target", "=", "self", ".", "args", ".", "left_pad_target", ",", "\n", "max_source_positions", "=", "self", ".", "args", ".", "max_source_positions", ",", "\n", "max_target_positions", "=", "self", ".", "args", ".", "max_target_positions", ",", "\n", ")", "\n", "return", "self", ".", "alter_dataset_langtok", "(", "\n", "langpair_dataset", ",", "\n", "src_eos", "=", "self", ".", "dicts", "[", "src", "]", ".", "eos", "(", ")", ",", "\n", "src_lang", "=", "src", ",", "\n", "tgt_eos", "=", "self", ".", "dicts", "[", "tgt", "]", ".", "eos", "(", ")", ",", "\n", "tgt_lang", "=", "tgt", ",", "\n", ")", "\n", "\n", "", "self", ".", "datasets", "[", "split", "]", "=", "RoundRobinZipDatasets", "(", "\n", "OrderedDict", "(", "[", "\n", "(", "lang_pair", ",", "language_pair_dataset", "(", "lang_pair", ")", ")", "\n", "for", "lang_pair", "in", "self", ".", "lang_pairs", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.multilingual_translation.MultilingualTranslationTask.build_dataset_for_inference": [[221, 238], ["fairseq.data.RoundRobinZipDatasets", "collections.OrderedDict", "multilingual_translation.MultilingualTranslationTask.alter_dataset_langtok", "fairseq.data.LanguagePairDataset", "multilingual_translation.MultilingualTranslationTask.source_dictionary.eos", "multilingual_translation.MultilingualTranslationTask.target_dictionary.eos"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.multilingual_translation.MultilingualTranslationTask.alter_dataset_langtok", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos"], ["eval_key", "=", "None", "if", "self", ".", "training", "else", "\"%s-%s\"", "%", "(", "self", ".", "args", ".", "source_lang", ",", "self", ".", "args", ".", "target_lang", ")", ",", "\n", ")", "\n", "\n", "", "def", "build_dataset_for_inference", "(", "self", ",", "src_tokens", ",", "src_lengths", ")", ":", "\n", "        ", "lang_pair", "=", "\"%s-%s\"", "%", "(", "self", ".", "args", ".", "source_lang", ",", "self", ".", "args", ".", "target_lang", ")", "\n", "return", "RoundRobinZipDatasets", "(", "\n", "OrderedDict", "(", "[", "(", "\n", "lang_pair", ",", "\n", "self", ".", "alter_dataset_langtok", "(", "\n", "LanguagePairDataset", "(", "\n", "src_tokens", ",", "src_lengths", ",", "\n", "self", ".", "source_dictionary", "\n", ")", ",", "\n", "src_eos", "=", "self", ".", "source_dictionary", ".", "eos", "(", ")", ",", "\n", "src_lang", "=", "self", ".", "args", ".", "source_lang", ",", "\n", "tgt_eos", "=", "self", ".", "target_dictionary", ".", "eos", "(", ")", ",", "\n", "tgt_lang", "=", "self", ".", "args", ".", "target_lang", ",", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.multilingual_translation.MultilingualTranslationTask.build_model": [[240, 261], ["multilingual_translation.MultilingualTranslationTask.build_model.check_args"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.speech_recognition.infer.check_args"], ["eval_key", "=", "lang_pair", ",", "\n", ")", "\n", "\n", "", "def", "build_model", "(", "self", ",", "args", ")", ":", "\n", "        ", "def", "check_args", "(", ")", ":", "\n", "            ", "messages", "=", "[", "]", "\n", "if", "len", "(", "set", "(", "self", ".", "args", ".", "lang_pairs", ")", ".", "symmetric_difference", "(", "args", ".", "lang_pairs", ")", ")", "!=", "0", ":", "\n", "                ", "messages", ".", "append", "(", "'--lang-pairs should include all the language pairs {}.'", ".", "format", "(", "args", ".", "lang_pairs", ")", ")", "\n", "", "if", "self", ".", "args", ".", "encoder_langtok", "!=", "args", ".", "encoder_langtok", ":", "\n", "                ", "messages", ".", "append", "(", "'--encoder-langtok should be {}.'", ".", "format", "(", "args", ".", "encoder_langtok", ")", ")", "\n", "", "if", "self", ".", "args", ".", "decoder_langtok", "!=", "args", ".", "decoder_langtok", ":", "\n", "                ", "messages", ".", "append", "(", "'--decoder-langtok should {} be set.'", ".", "format", "(", "\"\"", "if", "args", ".", "decoder_langtok", "else", "\"not\"", ")", ")", "\n", "\n", "", "if", "len", "(", "messages", ")", ">", "0", ":", "\n", "                ", "raise", "ValueError", "(", "' '", ".", "join", "(", "messages", ")", ")", "\n", "\n", "# Check if task args are consistant with model args", "\n", "", "", "check_args", "(", ")", "\n", "\n", "from", "fairseq", "import", "models", "\n", "model", "=", "models", ".", "build_model", "(", "args", ",", "self", ")", "\n", "if", "not", "isinstance", "(", "model", ",", "FairseqMultiModel", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.multilingual_translation.MultilingualTranslationTask.train_step": [[262, 277], ["model.train", "criterion", "optimizer.backward", "loss.detach().item", "len", "loss.detach"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.train.train", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.criterion", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.dynamicconvFunction.backward", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item"], ["            ", "raise", "ValueError", "(", "'MultilingualTranslationTask requires a FairseqMultiModel architecture'", ")", "\n", "", "return", "model", "\n", "\n", "", "def", "train_step", "(", "self", ",", "sample", ",", "model", ",", "criterion", ",", "optimizer", ",", "ignore_grad", "=", "False", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "from", "collections", "import", "defaultdict", "\n", "agg_loss", ",", "agg_sample_size", ",", "agg_logging_output", "=", "0.", ",", "0.", ",", "defaultdict", "(", "float", ")", "\n", "for", "lang_pair", "in", "self", ".", "model_lang_pairs", ":", "\n", "            ", "if", "sample", "[", "lang_pair", "]", "is", "None", "or", "len", "(", "sample", "[", "lang_pair", "]", ")", "==", "0", ":", "\n", "                ", "continue", "\n", "", "loss", ",", "sample_size", ",", "logging_output", "=", "criterion", "(", "model", ".", "models", "[", "lang_pair", "]", ",", "sample", "[", "lang_pair", "]", ")", "\n", "if", "ignore_grad", ":", "\n", "                ", "loss", "*=", "0", "\n", "", "optimizer", ".", "backward", "(", "loss", ")", "\n", "agg_loss", "+=", "loss", ".", "detach", "(", ")", ".", "item", "(", ")", "\n", "# TODO make summing of the sample sizes configurable", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.multilingual_translation.MultilingualTranslationTask.valid_step": [[278, 291], ["model.eval", "torch.no_grad", "criterion", "loss.data.item", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.criterion", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item"], ["agg_sample_size", "+=", "sample_size", "\n", "for", "k", "in", "logging_output", ":", "\n", "                ", "agg_logging_output", "[", "k", "]", "+=", "logging_output", "[", "k", "]", "\n", "agg_logging_output", "[", "f\"{lang_pair}:{k}\"", "]", "+=", "logging_output", "[", "k", "]", "\n", "", "", "return", "agg_loss", ",", "agg_sample_size", ",", "agg_logging_output", "\n", "\n", "", "def", "valid_step", "(", "self", ",", "sample", ",", "model", ",", "criterion", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "from", "collections", "import", "defaultdict", "\n", "agg_loss", ",", "agg_sample_size", ",", "agg_logging_output", "=", "0.", ",", "0.", ",", "defaultdict", "(", "float", ")", "\n", "for", "lang_pair", "in", "self", ".", "eval_lang_pairs", ":", "\n", "                ", "if", "lang_pair", "not", "in", "sample", "or", "sample", "[", "lang_pair", "]", "is", "None", "or", "len", "(", "sample", "[", "lang_pair", "]", ")", "==", "0", ":", "\n", "                    ", "continue", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.multilingual_translation.MultilingualTranslationTask.inference_step": [[292, 300], ["torch.no_grad", "generator.generate", "multilingual_translation._lang_token_index", "multilingual_translation.MultilingualTranslationTask.target_dictionary.eos"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.hub_interface.BARTHubInterface.generate", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.multilingual_translation._lang_token_index", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos"], ["", "loss", ",", "sample_size", ",", "logging_output", "=", "criterion", "(", "model", ".", "models", "[", "lang_pair", "]", ",", "sample", "[", "lang_pair", "]", ")", "\n", "agg_loss", "+=", "loss", ".", "data", ".", "item", "(", ")", "\n", "# TODO make summing of the sample sizes configurable", "\n", "agg_sample_size", "+=", "sample_size", "\n", "for", "k", "in", "logging_output", ":", "\n", "                    ", "agg_logging_output", "[", "k", "]", "+=", "logging_output", "[", "k", "]", "\n", "agg_logging_output", "[", "f\"{lang_pair}:{k}\"", "]", "+=", "logging_output", "[", "k", "]", "\n", "", "", "", "return", "agg_loss", ",", "agg_sample_size", ",", "agg_logging_output", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.multilingual_translation.MultilingualTranslationTask.reduce_metrics": [[302, 333], ["multilingual_translation.MultilingualTranslationTask.reduce_metrics.sum_over_languages"], "methods", ["None"], ["        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "return", "generator", ".", "generate", "(", "\n", "models", ",", "\n", "sample", ",", "\n", "prefix_tokens", "=", "prefix_tokens", ",", "\n", "bos_token", "=", "_lang_token_index", "(", "self", ".", "target_dictionary", ",", "self", ".", "args", ".", "target_lang", ")", "\n", "if", "self", ".", "args", ".", "decoder_langtok", "else", "self", ".", "target_dictionary", ".", "eos", "(", ")", ",", "\n", ")", "\n", "\n", "", "", "def", "reduce_metrics", "(", "self", ",", "logging_outputs", ",", "criterion", ")", ":", "\n", "        ", "with", "metrics", ".", "aggregate", "(", ")", ":", "\n", "# pass 'sample_size', 'nsentences', 'ntokens' stats to fairseq_task", "\n", "            ", "super", "(", ")", ".", "reduce_metrics", "(", "logging_outputs", ",", "criterion", ")", "\n", "for", "k", "in", "[", "'sample_size'", ",", "'nsentences'", ",", "'ntokens'", "]", ":", "\n", "                ", "metrics", ".", "log_scalar", "(", "k", ",", "sum", "(", "l", "[", "k", "]", "for", "l", "in", "logging_outputs", ")", ")", "\n", "\n", "", "", "", "@", "property", "\n", "def", "source_dictionary", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "return", "next", "(", "iter", "(", "self", ".", "dicts", ".", "values", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "dicts", "[", "self", ".", "args", ".", "source_lang", "]", "\n", "\n", "", "", "@", "property", "\n", "def", "target_dictionary", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "training", ":", "\n", "            ", "return", "next", "(", "iter", "(", "self", ".", "dicts", ".", "values", "(", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "dicts", "[", "self", ".", "args", ".", "target_lang", "]", "\n", "\n", "", "", "def", "max_positions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the max sentence length allowed by the task.\"\"\"", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.multilingual_translation.MultilingualTranslationTask.source_dictionary": [[334, 340], ["next", "iter", "multilingual_translation.MultilingualTranslationTask.dicts.values"], "methods", ["None"], ["if", "len", "(", "self", ".", "datasets", ".", "values", "(", ")", ")", "==", "0", ":", "\n", "            ", "return", "{", "'%s-%s'", "%", "(", "self", ".", "args", ".", "source_lang", ",", "self", ".", "args", ".", "target_lang", ")", ":", "\n", "(", "self", ".", "args", ".", "max_source_positions", ",", "self", ".", "args", ".", "max_target_positions", ")", "}", "\n", "", "return", "OrderedDict", "(", "[", "\n", "(", "key", ",", "(", "self", ".", "args", ".", "max_source_positions", ",", "self", ".", "args", ".", "max_target_positions", ")", ")", "\n", "for", "split", "in", "self", ".", "datasets", ".", "keys", "(", ")", "\n", "for", "key", "in", "self", ".", "datasets", "[", "split", "]", ".", "datasets", ".", "keys", "(", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.multilingual_translation.MultilingualTranslationTask.target_dictionary": [[341, 347], ["next", "iter", "multilingual_translation.MultilingualTranslationTask.dicts.values"], "methods", ["None"], ["]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.multilingual_translation.MultilingualTranslationTask.max_positions": [[348, 357], ["collections.OrderedDict", "len", "multilingual_translation.MultilingualTranslationTask.datasets.values", "multilingual_translation.MultilingualTranslationTask.datasets.keys", "multilingual_translation.MultilingualTranslationTask.datasets[].datasets.keys"], "methods", ["None"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.multilingual_translation._lang_token": [[25, 27], ["None"], "function", ["None"], ["logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.multilingual_translation._lang_token_index": [[29, 35], ["dic.index", "multilingual_translation._lang_token"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.index", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.multilingual_translation._lang_token"], ["    ", "return", "'__{}__'", ".", "format", "(", "lang", ")", "\n", "\n", "\n", "", "def", "_lang_token_index", "(", "dic", ":", "Dictionary", ",", "lang", ":", "str", ")", ":", "\n", "    ", "\"\"\"Return language token index.\"\"\"", "\n", "idx", "=", "dic", ".", "index", "(", "_lang_token", "(", "lang", ")", ")", "\n", "assert", "idx", "!=", "dic", ".", "unk_index", ","]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.legacy_masked_lm.LegacyMaskedLMTask.add_args": [[33, 43], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["\n", "\n", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add task-specific arguments to the parser.\"\"\"", "\n", "parser", ".", "add_argument", "(", "'data'", ",", "help", "=", "'colon separated path to data directories list, \\\n                            will be iterated upon during epochs in round-robin manner'", ")", "\n", "parser", ".", "add_argument", "(", "'--tokens-per-sample'", ",", "default", "=", "512", ",", "type", "=", "int", ",", "\n", "help", "=", "'max number of total tokens over all segments'", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.legacy_masked_lm.LegacyMaskedLMTask.__init__": [[44, 48], ["FairseqTask.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["' per sample for BERT dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--break-mode'", ",", "default", "=", "\"doc\"", ",", "type", "=", "str", ",", "help", "=", "'mode for breaking sentence'", ")", "\n", "parser", ".", "add_argument", "(", "'--shuffle-dataset'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "\n", "", "def", "__init__", "(", "self", ",", "args", ",", "dictionary", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.legacy_masked_lm.LegacyMaskedLMTask.load_dictionary": [[49, 52], ["fairseq.data.legacy.masked_lm_dictionary.BertDictionary.load"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.load"], ["        ", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "self", ".", "dictionary", "=", "dictionary", "\n", "self", ".", "seed", "=", "args", ".", "seed", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.legacy_masked_lm.LegacyMaskedLMTask.build_dictionary": [[53, 60], ["fairseq.data.legacy.masked_lm_dictionary.BertDictionary", "fairseq.data.legacy.masked_lm_dictionary.BertDictionary.finalize", "fairseq.data.Dictionary.add_file_to_dictionary"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDatasetBuilder.finalize", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_file_to_dictionary"], ["", "@", "classmethod", "\n", "def", "load_dictionary", "(", "cls", ",", "filename", ")", ":", "\n", "        ", "return", "BertDictionary", ".", "load", "(", "filename", ")", "\n", "\n", "", "@", "classmethod", "\n", "def", "build_dictionary", "(", "cls", ",", "filenames", ",", "workers", "=", "1", ",", "threshold", "=", "-", "1", ",", "nwords", "=", "-", "1", ",", "padding_factor", "=", "8", ")", ":", "\n", "        ", "d", "=", "BertDictionary", "(", ")", "\n", "for", "filename", "in", "filenames", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.legacy_masked_lm.LegacyMaskedLMTask.target_dictionary": [[61, 64], ["None"], "methods", ["None"], ["            ", "Dictionary", ".", "add_file_to_dictionary", "(", "filename", ",", "d", ",", "tokenizer", ".", "tokenize_line", ",", "workers", ")", "\n", "", "d", ".", "finalize", "(", "threshold", "=", "threshold", ",", "nwords", "=", "nwords", ",", "padding_factor", "=", "padding_factor", ")", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.legacy_masked_lm.LegacyMaskedLMTask.setup_task": [[65, 75], ["args.data.split", "fairseq.data.legacy.masked_lm_dictionary.BertDictionary.load", "print", "cls", "len", "os.path.join", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.load", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dictionary.BertDictionary.cls"], ["", "@", "property", "\n", "def", "target_dictionary", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dictionary", "\n", "\n", "", "@", "classmethod", "\n", "def", "setup_task", "(", "cls", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Setup the task.\n        \"\"\"", "\n", "paths", "=", "args", ".", "data", ".", "split", "(", "os", ".", "pathsep", ")", "\n", "assert", "len", "(", "paths", ")", ">", "0", "\n", "dictionary", "=", "BertDictionary", ".", "load", "(", "os", ".", "path", ".", "join", "(", "paths", "[", "0", "]", ",", "'dict.txt'", ")", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.legacy_masked_lm.LegacyMaskedLMTask.load_dataset": [[76, 138], ["legacy_masked_lm.LegacyMaskedLMTask.args.data.split", "print", "itertools.count", "fairseq.data.legacy.masked_lm_dataset.MaskedLMDataset", "len", "os.path.join", "fairseq.data.indexed_dataset.make_dataset", "print", "len", "fairseq.data.ConcatDataset", "numpy.concatenate", "fairseq.data.data_utils.numpy_seed", "loaded_datasets.append", "legacy_masked_lm.LegacyMaskedLMTask.dictionary.pad", "legacy_masked_lm.LegacyMaskedLMTask.dictionary.mask", "legacy_masked_lm.LegacyMaskedLMTask.dictionary.cls", "legacy_masked_lm.LegacyMaskedLMTask.dictionary.sep", "len", "str", "FileNotFoundError", "fairseq.data.legacy.block_pair_dataset.BlockPairDataset", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.data_helper.count", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.make_dataset", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.numpy_seed", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dictionary.MaskedLMDictionary.mask", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dictionary.BertDictionary.cls", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dictionary.BertDictionary.sep"], ["logger", ".", "info", "(", "'dictionary: {} types'", ".", "format", "(", "len", "(", "dictionary", ")", ")", ")", "\n", "\n", "return", "cls", "(", "args", ",", "dictionary", ")", "\n", "\n", "", "def", "load_dataset", "(", "self", ",", "split", ",", "epoch", "=", "0", ",", "combine", "=", "False", ")", ":", "\n", "        ", "\"\"\"Load a given dataset split.\n        Args:\n            split (str): name of the split (e.g., train, valid, test)\n        \"\"\"", "\n", "loaded_datasets", "=", "[", "]", "\n", "\n", "paths", "=", "self", ".", "args", ".", "data", ".", "split", "(", "os", ".", "pathsep", ")", "\n", "assert", "len", "(", "paths", ")", ">", "0", "\n", "data_path", "=", "paths", "[", "epoch", "%", "len", "(", "paths", ")", "]", "\n", "logger", ".", "info", "(", "\"data_path\"", ",", "data_path", ")", "\n", "\n", "for", "k", "in", "itertools", ".", "count", "(", ")", ":", "\n", "            ", "split_k", "=", "split", "+", "(", "str", "(", "k", ")", "if", "k", ">", "0", "else", "''", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "split_k", ")", "\n", "ds", "=", "indexed_dataset", ".", "make_dataset", "(", "\n", "path", ",", "\n", "impl", "=", "self", ".", "args", ".", "dataset_impl", ",", "\n", "fix_lua_indexing", "=", "True", ",", "\n", "dictionary", "=", "self", ".", "dictionary", ",", "\n", ")", "\n", "\n", "if", "ds", "is", "None", ":", "\n", "                ", "if", "k", ">", "0", ":", "\n", "                    ", "break", "\n", "", "else", ":", "\n", "                    ", "raise", "FileNotFoundError", "(", "'Dataset not found: {} ({})'", ".", "format", "(", "split", ",", "data_path", ")", ")", "\n", "\n", "", "", "with", "data_utils", ".", "numpy_seed", "(", "self", ".", "seed", "+", "k", ")", ":", "\n", "                ", "loaded_datasets", ".", "append", "(", "\n", "BlockPairDataset", "(", "\n", "ds", ",", "\n", "self", ".", "dictionary", ",", "\n", "ds", ".", "sizes", ",", "\n", "self", ".", "args", ".", "tokens_per_sample", ",", "\n", "break_mode", "=", "self", ".", "args", ".", "break_mode", ",", "\n", "doc_break_size", "=", "1", ",", "\n", ")", "\n", ")", "\n", "\n", "", "logger", ".", "info", "(", "'{} {} {} examples'", ".", "format", "(", "data_path", ",", "split_k", ",", "len", "(", "loaded_datasets", "[", "-", "1", "]", ")", ")", ")", "\n", "\n", "if", "not", "combine", ":", "\n", "                ", "break", "\n", "\n", "", "", "if", "len", "(", "loaded_datasets", ")", "==", "1", ":", "\n", "            ", "dataset", "=", "loaded_datasets", "[", "0", "]", "\n", "sizes", "=", "dataset", ".", "sizes", "\n", "", "else", ":", "\n", "            ", "dataset", "=", "ConcatDataset", "(", "loaded_datasets", ")", "\n", "sizes", "=", "np", ".", "concatenate", "(", "[", "ds", ".", "sizes", "for", "ds", "in", "loaded_datasets", "]", ")", "\n", "\n", "", "self", ".", "datasets", "[", "split", "]", "=", "MaskedLMDataset", "(", "\n", "dataset", "=", "dataset", ",", "\n", "sizes", "=", "sizes", ",", "\n", "vocab", "=", "self", ".", "dictionary", ",", "\n", "pad_idx", "=", "self", ".", "dictionary", ".", "pad", "(", ")", ",", "\n", "mask_idx", "=", "self", ".", "dictionary", ".", "mask", "(", ")", ",", "\n", "classif_token_idx", "=", "self", ".", "dictionary", ".", "cls", "(", ")", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.translation_lev.TranslationLevenshteinTask.add_args": [[22, 31], ["fairseq.tasks.translation.TranslationTask.add_args", "parser.add_argument"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.add_args"], ["@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add task-specific arguments to the parser.\"\"\"", "\n", "# fmt: off", "\n", "TranslationTask", ".", "add_args", "(", "parser", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--noise'", ",", "\n", "default", "=", "'random_delete'", ",", "\n", "choices", "=", "[", "'random_delete'", ",", "'random_mask'", ",", "'no_noise'", ",", "'full_mask'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.translation_lev.TranslationLevenshteinTask.load_dataset": [[32, 54], ["translation_lev.TranslationLevenshteinTask.args.data.split", "fairseq.tasks.translation.load_langpair_dataset", "len", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.translation.load_langpair_dataset"], ["", "def", "load_dataset", "(", "self", ",", "split", ",", "epoch", "=", "0", ",", "combine", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Load a given dataset split.\n\n        Args:\n            split (str): name of the split (e.g., train, valid, test)\n        \"\"\"", "\n", "paths", "=", "self", ".", "args", ".", "data", ".", "split", "(", "os", ".", "pathsep", ")", "\n", "assert", "len", "(", "paths", ")", ">", "0", "\n", "data_path", "=", "paths", "[", "epoch", "%", "len", "(", "paths", ")", "]", "\n", "\n", "# infer langcode", "\n", "src", ",", "tgt", "=", "self", ".", "args", ".", "source_lang", ",", "self", ".", "args", ".", "target_lang", "\n", "\n", "self", ".", "datasets", "[", "split", "]", "=", "load_langpair_dataset", "(", "\n", "data_path", ",", "split", ",", "src", ",", "self", ".", "src_dict", ",", "tgt", ",", "self", ".", "tgt_dict", ",", "\n", "combine", "=", "combine", ",", "dataset_impl", "=", "self", ".", "args", ".", "dataset_impl", ",", "\n", "upsample_primary", "=", "self", ".", "args", ".", "upsample_primary", ",", "\n", "left_pad_source", "=", "self", ".", "args", ".", "left_pad_source", ",", "\n", "left_pad_target", "=", "self", ".", "args", ".", "left_pad_target", ",", "\n", "max_source_positions", "=", "self", ".", "args", ".", "max_source_positions", ",", "\n", "max_target_positions", "=", "self", ".", "args", ".", "max_target_positions", ",", "\n", "prepend_bos", "=", "True", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.translation_lev.TranslationLevenshteinTask.inject_noise": [[56, 128], ["translation_lev.TranslationLevenshteinTask.tgt_dict.pad", "translation_lev.TranslationLevenshteinTask.tgt_dict.bos", "translation_lev.TranslationLevenshteinTask.tgt_dict.eos", "target_tokens.size", "target_tokens.eq", "target_tokens.clone().float().uniform_", "target_tokens.clone().float().uniform_.masked_fill_", "target_tokens.clone().float().uniform_.masked_fill_", "target_tokens.clone().float().uniform_.sort", "target_tokens.gather().masked_fill_().gather", "translation_lev.TranslationLevenshteinTask.tgt_dict.pad", "translation_lev.TranslationLevenshteinTask.tgt_dict.bos", "translation_lev.TranslationLevenshteinTask.tgt_dict.eos", "translation_lev.TranslationLevenshteinTask.tgt_dict.unk", "target_tokens.clone().float().uniform_", "target_tokens.clone().float().uniform_.masked_fill_", "target_masks.sum().float", "target_tokens.clone().float().uniform_.sort", "target_tokens.masked_fill", "translation_lev.TranslationLevenshteinTask.tgt_dict.pad", "translation_lev.TranslationLevenshteinTask.tgt_dict.bos", "translation_lev.TranslationLevenshteinTask.tgt_dict.eos", "translation_lev.TranslationLevenshteinTask.tgt_dict.unk", "target_tokens.masked_fill", "translation_lev.TranslationLevenshteinTask.inject_noise._random_delete"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.bos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.bos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.unk", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.bos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.unk"], ["", "def", "inject_noise", "(", "self", ",", "target_tokens", ")", ":", "\n", "        ", "def", "_random_delete", "(", "target_tokens", ")", ":", "\n", "            ", "pad", "=", "self", ".", "tgt_dict", ".", "pad", "(", ")", "\n", "bos", "=", "self", ".", "tgt_dict", ".", "bos", "(", ")", "\n", "eos", "=", "self", ".", "tgt_dict", ".", "eos", "(", ")", "\n", "\n", "max_len", "=", "target_tokens", ".", "size", "(", "1", ")", "\n", "target_mask", "=", "target_tokens", ".", "eq", "(", "pad", ")", "\n", "target_score", "=", "target_tokens", ".", "clone", "(", ")", ".", "float", "(", ")", ".", "uniform_", "(", ")", "\n", "target_score", ".", "masked_fill_", "(", "\n", "target_tokens", ".", "eq", "(", "bos", ")", "|", "target_tokens", ".", "eq", "(", "eos", ")", ",", "0.0", ")", "\n", "target_score", ".", "masked_fill_", "(", "target_mask", ",", "1", ")", "\n", "target_score", ",", "target_rank", "=", "target_score", ".", "sort", "(", "1", ")", "\n", "target_length", "=", "target_mask", ".", "size", "(", "1", ")", "-", "target_mask", ".", "float", "(", ")", ".", "sum", "(", "\n", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "# do not delete <bos> and <eos> (we assign 0 score for them)", "\n", "target_cutoff", "=", "2", "+", "(", "(", "target_length", "-", "2", ")", "*", "target_score", ".", "new_zeros", "(", "\n", "target_score", ".", "size", "(", "0", ")", ",", "1", ")", ".", "uniform_", "(", ")", ")", ".", "long", "(", ")", "\n", "target_cutoff", "=", "target_score", ".", "sort", "(", "1", ")", "[", "1", "]", ">=", "target_cutoff", "\n", "\n", "prev_target_tokens", "=", "target_tokens", ".", "gather", "(", "\n", "1", ",", "target_rank", ")", ".", "masked_fill_", "(", "target_cutoff", ",", "pad", ")", ".", "gather", "(", "\n", "1", ",", "\n", "target_rank", ".", "masked_fill_", "(", "target_cutoff", ",", "\n", "max_len", ")", ".", "sort", "(", "1", ")", "[", "1", "]", ")", "\n", "prev_target_tokens", "=", "prev_target_tokens", "[", ":", ",", ":", "prev_target_tokens", ".", "\n", "ne", "(", "pad", ")", ".", "sum", "(", "1", ")", ".", "max", "(", ")", "]", "\n", "\n", "return", "prev_target_tokens", "\n", "\n", "", "def", "_random_mask", "(", "target_tokens", ")", ":", "\n", "            ", "pad", "=", "self", ".", "tgt_dict", ".", "pad", "(", ")", "\n", "bos", "=", "self", ".", "tgt_dict", ".", "bos", "(", ")", "\n", "eos", "=", "self", ".", "tgt_dict", ".", "eos", "(", ")", "\n", "unk", "=", "self", ".", "tgt_dict", ".", "unk", "(", ")", "\n", "\n", "target_masks", "=", "target_tokens", ".", "ne", "(", "pad", ")", "&", "target_tokens", ".", "ne", "(", "bos", ")", "&", "target_tokens", ".", "ne", "(", "eos", ")", "\n", "target_score", "=", "target_tokens", ".", "clone", "(", ")", ".", "float", "(", ")", ".", "uniform_", "(", ")", "\n", "target_score", ".", "masked_fill_", "(", "~", "target_masks", ",", "2.0", ")", "\n", "target_length", "=", "target_masks", ".", "sum", "(", "1", ")", ".", "float", "(", ")", "\n", "target_length", "=", "target_length", "*", "target_length", ".", "clone", "(", ")", ".", "uniform_", "(", ")", "\n", "target_length", "=", "target_length", "+", "1", "# make sure to mask at least one token.", "\n", "\n", "_", ",", "target_rank", "=", "target_score", ".", "sort", "(", "1", ")", "\n", "target_cutoff", "=", "new_arange", "(", "target_rank", ")", "<", "target_length", "[", ":", ",", "None", "]", ".", "long", "(", ")", "\n", "prev_target_tokens", "=", "target_tokens", ".", "masked_fill", "(", "\n", "target_cutoff", ".", "scatter", "(", "1", ",", "target_rank", ",", "target_cutoff", ")", ",", "unk", ")", "\n", "return", "prev_target_tokens", "\n", "\n", "", "def", "_full_mask", "(", "target_tokens", ")", ":", "\n", "            ", "pad", "=", "self", ".", "tgt_dict", ".", "pad", "(", ")", "\n", "bos", "=", "self", ".", "tgt_dict", ".", "bos", "(", ")", "\n", "eos", "=", "self", ".", "tgt_dict", ".", "eos", "(", ")", "\n", "unk", "=", "self", ".", "tgt_dict", ".", "unk", "(", ")", "\n", "\n", "target_mask", "=", "target_tokens", ".", "eq", "(", "bos", ")", "|", "target_tokens", ".", "eq", "(", "\n", "eos", ")", "|", "target_tokens", ".", "eq", "(", "pad", ")", "\n", "return", "target_tokens", ".", "masked_fill", "(", "~", "target_mask", ",", "unk", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "noise", "==", "'random_delete'", ":", "\n", "            ", "return", "_random_delete", "(", "target_tokens", ")", "\n", "", "elif", "self", ".", "args", ".", "noise", "==", "'random_mask'", ":", "\n", "            ", "return", "_random_mask", "(", "target_tokens", ")", "\n", "", "elif", "self", ".", "args", ".", "noise", "==", "'full_mask'", ":", "\n", "            ", "return", "_full_mask", "(", "target_tokens", ")", "\n", "", "elif", "self", ".", "args", ".", "noise", "==", "'no_noise'", ":", "\n", "            ", "return", "target_tokens", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.translation_lev.TranslationLevenshteinTask.build_generator": [[129, 140], ["IterativeRefinementGenerator", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr"], "methods", ["None"], ["", "", "def", "build_generator", "(", "self", ",", "args", ")", ":", "\n", "        ", "from", "fairseq", ".", "iterative_refinement_generator", "import", "IterativeRefinementGenerator", "\n", "return", "IterativeRefinementGenerator", "(", "\n", "self", ".", "target_dictionary", ",", "\n", "eos_penalty", "=", "getattr", "(", "args", ",", "'iter_decode_eos_penalty'", ",", "0.0", ")", ",", "\n", "max_iter", "=", "getattr", "(", "args", ",", "'iter_decode_max_iter'", ",", "10", ")", ",", "\n", "beam_size", "=", "getattr", "(", "args", ",", "'iter_decode_with_beam'", ",", "1", ")", ",", "\n", "reranking", "=", "getattr", "(", "args", ",", "'iter_decode_with_external_reranker'", ",", "False", ")", ",", "\n", "decoding_format", "=", "getattr", "(", "args", ",", "'decoding_format'", ",", "None", ")", ",", "\n", "adaptive", "=", "not", "getattr", "(", "args", ",", "'iter_decode_force_max_iter'", ",", "False", ")", ",", "\n", "retain_history", "=", "getattr", "(", "args", ",", "'retain_iter_history'", ",", "False", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.translation_lev.TranslationLevenshteinTask.train_step": [[141, 154], ["model.train", "translation_lev.TranslationLevenshteinTask.inject_noise", "criterion", "optimizer.backward"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.train.train", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.translation_lev.TranslationLevenshteinTask.inject_noise", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.criterion", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.dynamicconvFunction.backward"], ["", "def", "train_step", "(", "self", ",", "\n", "sample", ",", "\n", "model", ",", "\n", "criterion", ",", "\n", "optimizer", ",", "\n", "ignore_grad", "=", "False", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "sample", "[", "'prev_target'", "]", "=", "self", ".", "inject_noise", "(", "sample", "[", "'target'", "]", ")", "\n", "loss", ",", "sample_size", ",", "logging_output", "=", "criterion", "(", "model", ",", "sample", ")", "\n", "if", "ignore_grad", ":", "\n", "            ", "loss", "*=", "0", "\n", "", "optimizer", ".", "backward", "(", "loss", ")", "\n", "return", "loss", ",", "sample_size", ",", "logging_output", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.translation_lev.TranslationLevenshteinTask.valid_step": [[155, 161], ["model.eval", "torch.no_grad", "translation_lev.TranslationLevenshteinTask.inject_noise", "criterion"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.translation_lev.TranslationLevenshteinTask.inject_noise", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.criterion"], ["", "def", "valid_step", "(", "self", ",", "sample", ",", "model", ",", "criterion", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "sample", "[", "'prev_target'", "]", "=", "self", ".", "inject_noise", "(", "sample", "[", "'target'", "]", ")", "\n", "loss", ",", "sample_size", ",", "logging_output", "=", "criterion", "(", "model", ",", "sample", ")", "\n", "", "return", "loss", ",", "sample_size", ",", "logging_output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.cross_lingual_lm.CrossLingualLMTask.add_args": [[38, 51], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["\n", "\n", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add task-specific arguments to the parser.\"\"\"", "\n", "parser", ".", "add_argument", "(", "'data'", ",", "help", "=", "'colon separated path to data directories list, \\\n                            will be iterated upon during epochs in round-robin manner'", ")", "\n", "parser", ".", "add_argument", "(", "'--tokens-per-sample'", ",", "default", "=", "512", ",", "type", "=", "int", ",", "\n", "help", "=", "'max number of total tokens over all segments'", "\n", "' per sample'", ")", "\n", "parser", ".", "add_argument", "(", "'--monolingual-langs'", ",", "default", "=", "'en'", ",", "type", "=", "str", ",", "\n", "help", "=", "'comma separated list of languages for which we'", "\n", "' want to train XLM on'", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.cross_lingual_lm.CrossLingualLMTask.__init__": [[53, 59], ["FairseqTask.__init__", "cross_lingual_lm.CrossLingualLMTask._lang_to_id"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.cross_lingual_lm.CrossLingualLMTask._lang_to_id"], ["help", "=", "'shuffle each monolingual dataset while'", "\n", "' training'", ")", "\n", "\n", "", "def", "__init__", "(", "self", ",", "args", ",", "dictionary", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "self", ".", "dictionary", "=", "dictionary", "\n", "self", ".", "seed", "=", "args", ".", "seed", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.cross_lingual_lm.CrossLingualLMTask._lang_to_id": [[60, 73], ["enumerate", "l.strip", "languages.split"], "methods", ["None"], ["self", ".", "distributed_world_size", "=", "args", ".", "distributed_world_size", "\n", "self", ".", "langs2id", "=", "self", ".", "_lang_to_id", "(", "args", ".", "monolingual_langs", ")", "\n", "\n", "", "def", "_lang_to_id", "(", "\n", "self", ",", "\n", "languages", ":", "str", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Build a map from languages to ids. These ids are used as segment labels\n        for cross-lingual LM training.\n        \"\"\"", "\n", "lang2id", "=", "{", "}", "\n", "langs", "=", "[", "l", ".", "strip", "(", ")", "for", "l", "in", "languages", ".", "split", "(", "','", ")", "]", "\n", "for", "id", ",", "lang", "in", "enumerate", "(", "langs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.cross_lingual_lm.CrossLingualLMTask.load_dictionary": [[74, 77], ["fairseq.data.legacy.masked_lm_dictionary.MaskedLMDictionary.load"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.load"], ["            ", "lang2id", "[", "lang", "]", "=", "id", "\n", "", "return", "lang2id", "\n", "\n", "", "@", "classmethod", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.cross_lingual_lm.CrossLingualLMTask.build_dictionary": [[78, 85], ["fairseq.data.legacy.masked_lm_dictionary.MaskedLMDictionary", "fairseq.data.legacy.masked_lm_dictionary.MaskedLMDictionary.finalize", "fairseq.data.Dictionary.add_file_to_dictionary"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDatasetBuilder.finalize", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_file_to_dictionary"], ["def", "load_dictionary", "(", "cls", ",", "filename", ")", ":", "\n", "        ", "return", "MaskedLMDictionary", ".", "load", "(", "filename", ")", "\n", "\n", "", "@", "classmethod", "\n", "def", "build_dictionary", "(", "cls", ",", "filenames", ",", "workers", "=", "1", ",", "threshold", "=", "-", "1", ",", "nwords", "=", "-", "1", ",", "padding_factor", "=", "8", ")", ":", "\n", "        ", "d", "=", "MaskedLMDictionary", "(", ")", "\n", "for", "filename", "in", "filenames", ":", "\n", "            ", "Dictionary", ".", "add_file_to_dictionary", "(", "filename", ",", "d", ",", "tokenizer", ".", "tokenize_line", ",", "workers", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.cross_lingual_lm.CrossLingualLMTask.target_dictionary": [[86, 89], ["None"], "methods", ["None"], ["", "d", ".", "finalize", "(", "threshold", "=", "threshold", ",", "nwords", "=", "nwords", ",", "padding_factor", "=", "padding_factor", ")", "\n", "return", "d", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.cross_lingual_lm.CrossLingualLMTask.setup_task": [[90, 99], ["fairseq.data.legacy.masked_lm_dictionary.MaskedLMDictionary.load", "print", "cls", "os.path.join", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.load", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dictionary.BertDictionary.cls"], ["def", "target_dictionary", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dictionary", "\n", "\n", "", "@", "classmethod", "\n", "def", "setup_task", "(", "cls", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Setup the task.\"\"\"", "\n", "dictionary", "=", "MaskedLMDictionary", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'dict.txt'", ")", ")", "\n", "logger", ".", "info", "(", "'dictionary: {} types'", ".", "format", "(", "len", "(", "dictionary", ")", ")", ")", "\n", "return", "cls", "(", "args", ",", "dictionary", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.cross_lingual_lm.CrossLingualLMTask._load_single_lang_dataset": [[100, 138], ["cross_lingual_lm.CrossLingualLMTask.args.data.split", "itertools.count", "len", "os.path.join", "fairseq.data.data_utils.load_indexed_dataset", "loaded_datasets.append", "print", "len", "fairseq.data.ConcatDataset", "numpy.concatenate", "fairseq.data.TokenBlockDataset", "len", "str", "FileNotFoundError", "len", "cross_lingual_lm.CrossLingualLMTask.dictionary.pad", "cross_lingual_lm.CrossLingualLMTask.dictionary.eos"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.data_helper.count", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.load_indexed_dataset", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos"], ["", "def", "_load_single_lang_dataset", "(", "self", ",", "split", ",", "epoch", ")", ":", "\n", "        ", "loaded_datasets", "=", "[", "]", "\n", "\n", "paths", "=", "self", ".", "args", ".", "data", ".", "split", "(", "os", ".", "pathsep", ")", "\n", "assert", "len", "(", "paths", ")", ">", "0", "\n", "data_path", "=", "paths", "[", "epoch", "%", "len", "(", "paths", ")", "]", "\n", "\n", "for", "k", "in", "itertools", ".", "count", "(", ")", ":", "\n", "            ", "split_k", "=", "split", "+", "(", "str", "(", "k", ")", "if", "k", ">", "0", "else", "''", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "split_k", ")", "\n", "\n", "ds", "=", "data_utils", ".", "load_indexed_dataset", "(", "path", ",", "self", ".", "dictionary", ",", "self", ".", "args", ".", "dataset_impl", ")", "\n", "if", "ds", "is", "None", ":", "\n", "                ", "if", "k", ">", "0", ":", "\n", "                    ", "break", "\n", "", "else", ":", "\n", "                    ", "raise", "FileNotFoundError", "(", "'Dataset not found: {} ({})'", ".", "format", "(", "split", ",", "data_path", ")", ")", "\n", "\n", "# Since we append each block with the classification_token,", "\n", "# we need to effectively create blocks of length", "\n", "# tokens_per_sample-1", "\n", "", "", "loaded_datasets", ".", "append", "(", "\n", "TokenBlockDataset", "(", "\n", "ds", ",", "ds", ".", "sizes", ",", "self", ".", "args", ".", "tokens_per_sample", "-", "1", ",", "\n", "pad", "=", "self", ".", "dictionary", ".", "pad", "(", ")", ",", "eos", "=", "self", ".", "dictionary", ".", "eos", "(", ")", ",", "\n", ")", "\n", ")", "\n", "\n", "logger", ".", "info", "(", "'{} {} {} examples'", ".", "format", "(", "data_path", ",", "split_k", ",", "len", "(", "loaded_datasets", "[", "-", "1", "]", ")", ")", ")", "\n", "\n", "", "if", "len", "(", "loaded_datasets", ")", "==", "1", ":", "\n", "            ", "dataset", "=", "loaded_datasets", "[", "0", "]", "\n", "sizes", "=", "dataset", ".", "sizes", "\n", "", "else", ":", "\n", "            ", "dataset", "=", "ConcatDataset", "(", "loaded_datasets", ")", "\n", "sizes", "=", "np", ".", "concatenate", "(", "[", "ds", ".", "sizes", "for", "ds", "in", "loaded_datasets", "]", ")", "\n", "\n", "", "return", "dataset", ",", "sizes", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.cross_lingual_lm.CrossLingualLMTask.load_dataset": [[139, 170], ["collections.OrderedDict", "cross_lingual_lm.CrossLingualLMTask.langs2id.keys", "fairseq.data.multi_corpus_sampled_dataset.MultiCorpusSampledDataset", "print", "cross_lingual_lm.CrossLingualLMTask._load_single_lang_dataset", "fairseq.data.legacy.masked_lm_dataset.MaskedLMDataset", "len", "cross_lingual_lm.CrossLingualLMTask.dictionary.pad", "cross_lingual_lm.CrossLingualLMTask.dictionary.mask", "cross_lingual_lm.CrossLingualLMTask.dictionary.eos", "cross_lingual_lm.CrossLingualLMTask.dictionary.eos", "getattr", "cross_lingual_lm.CrossLingualLMTask.args.data.split"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.cross_lingual_lm.CrossLingualLMTask._load_single_lang_dataset", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dictionary.MaskedLMDictionary.mask", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos"], ["", "def", "load_dataset", "(", "self", ",", "split", ",", "epoch", "=", "0", ",", "combine", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Load a given dataset split.\n        Args:\n            split (str): name of the split (e.g., train, valid, test)\n        \"\"\"", "\n", "dataset_map", "=", "OrderedDict", "(", ")", "\n", "\n", "for", "lang", "in", "self", ".", "langs2id", ".", "keys", "(", ")", ":", "\n", "# Datasets are expected to be in \"split.lang\" format (Eg: train.en)", "\n", "            ", "language_split", "=", "'{}.{}'", ".", "format", "(", "split", ",", "lang", ")", "\n", "\n", "block_dataset", ",", "sizes", "=", "self", ".", "_load_single_lang_dataset", "(", "split", "=", "language_split", ",", "epoch", "=", "epoch", ")", "\n", "\n", "dataset_map", "[", "lang", "]", "=", "MaskedLMDataset", "(", "\n", "dataset", "=", "block_dataset", ",", "\n", "sizes", "=", "sizes", ",", "\n", "vocab", "=", "self", ".", "dictionary", ",", "\n", "pad_idx", "=", "self", ".", "dictionary", ".", "pad", "(", ")", ",", "\n", "mask_idx", "=", "self", ".", "dictionary", ".", "mask", "(", ")", ",", "\n", "classif_token_idx", "=", "self", ".", "dictionary", ".", "eos", "(", ")", ",", "\n", "sep_token_idx", "=", "self", ".", "dictionary", ".", "eos", "(", ")", ",", "\n", "shuffle", "=", "getattr", "(", "self", ".", "args", ",", "'shuffle'", ",", "False", ")", ",", "\n", "has_pairs", "=", "False", ",", "\n", "segment_id", "=", "self", ".", "langs2id", "[", "lang", "]", ",", "\n", "seed", "=", "self", ".", "seed", ",", "\n", ")", "\n", "\n", "", "self", ".", "datasets", "[", "split", "]", "=", "MultiCorpusSampledDataset", "(", "dataset_map", ")", "\n", "logger", ".", "info", "(", "'{} {} {} examples'", ".", "format", "(", "\n", "self", ".", "args", ".", "data", ".", "split", "(", "os", ".", "pathsep", ")", "[", "epoch", "]", ",", "split", ",", "len", "(", "self", ".", "datasets", "[", "split", "]", ")", ")", "\n", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.translation.TranslationTask.add_args": [[127, 151], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["\n", "\n", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add task-specific arguments to the parser.\"\"\"", "\n", "# fmt: off", "\n", "parser", ".", "add_argument", "(", "'data'", ",", "help", "=", "'colon separated path to data directories list, \\\n                            will be iterated upon during epochs in round-robin manner'", ")", "\n", "parser", ".", "add_argument", "(", "'-s'", ",", "'--source-lang'", ",", "default", "=", "None", ",", "metavar", "=", "'SRC'", ",", "\n", "help", "=", "'source language'", ")", "\n", "parser", ".", "add_argument", "(", "'-t'", ",", "'--target-lang'", ",", "default", "=", "None", ",", "metavar", "=", "'TARGET'", ",", "\n", "help", "=", "'target language'", ")", "\n", "parser", ".", "add_argument", "(", "'--load-alignments'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'load the binarized alignments'", ")", "\n", "parser", ".", "add_argument", "(", "'--left-pad-source'", ",", "default", "=", "'True'", ",", "type", "=", "str", ",", "metavar", "=", "'BOOL'", ",", "\n", "help", "=", "'pad the source on the left'", ")", "\n", "parser", ".", "add_argument", "(", "'--left-pad-target'", ",", "default", "=", "'False'", ",", "type", "=", "str", ",", "metavar", "=", "'BOOL'", ",", "\n", "help", "=", "'pad the target on the left'", ")", "\n", "parser", ".", "add_argument", "(", "'--max-source-positions'", ",", "default", "=", "1024", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'max number of tokens in the source sequence'", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.translation.TranslationTask.__init__": [[153, 157], ["FairseqTask.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["help", "=", "'max number of tokens in the target sequence'", ")", "\n", "parser", ".", "add_argument", "(", "'--upsample-primary'", ",", "default", "=", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "'amount to upsample primary dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--truncate-source'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'truncate source to max-source-positions'", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.translation.TranslationTask.setup_task": [[158, 186], ["fairseq.options.eval_bool", "fairseq.options.eval_bool", "args.data.split", "cls.load_dictionary", "cls.load_dictionary", "print", "print", "cls", "len", "fairseq.data.data_utils.infer_language_pair", "Exception", "os.path.join", "os.path.join", "cls.load_dictionary.pad", "cls.load_dictionary.pad", "cls.load_dictionary.eos", "cls.load_dictionary.eos", "cls.load_dictionary.unk", "cls.load_dictionary.unk", "len", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.eval_bool", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.eval_bool", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.sentence_prediction.SentencePredictionTask.load_dictionary", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.sentence_prediction.SentencePredictionTask.load_dictionary", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dictionary.BertDictionary.cls", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.infer_language_pair", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.unk", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.unk"], ["parser", ".", "add_argument", "(", "'--truncate-target'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'truncate target to max-source-positions'", ")", "\n", "# fmt: on", "\n", "\n", "", "def", "__init__", "(", "self", ",", "args", ",", "src_dict", ",", "tgt_dict", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "self", ".", "src_dict", "=", "src_dict", "\n", "self", ".", "tgt_dict", "=", "tgt_dict", "\n", "\n", "", "@", "classmethod", "\n", "def", "setup_task", "(", "cls", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Setup the task (e.g., load dictionaries).\n\n        Args:\n            args (argparse.Namespace): parsed command-line arguments\n        \"\"\"", "\n", "args", ".", "left_pad_source", "=", "options", ".", "eval_bool", "(", "args", ".", "left_pad_source", ")", "\n", "args", ".", "left_pad_target", "=", "options", ".", "eval_bool", "(", "args", ".", "left_pad_target", ")", "\n", "\n", "paths", "=", "args", ".", "data", ".", "split", "(", "os", ".", "pathsep", ")", "\n", "assert", "len", "(", "paths", ")", ">", "0", "\n", "# find language pair automatically", "\n", "if", "args", ".", "source_lang", "is", "None", "or", "args", ".", "target_lang", "is", "None", ":", "\n", "            ", "args", ".", "source_lang", ",", "args", ".", "target_lang", "=", "data_utils", ".", "infer_language_pair", "(", "paths", "[", "0", "]", ")", "\n", "", "if", "args", ".", "source_lang", "is", "None", "or", "args", ".", "target_lang", "is", "None", ":", "\n", "            ", "raise", "Exception", "(", "'Could not infer language pair, please provide it explicitly'", ")", "\n", "\n", "# load dictionaries", "\n", "", "src_dict", "=", "cls", ".", "load_dictionary", "(", "os", ".", "path", ".", "join", "(", "paths", "[", "0", "]", ",", "'dict.{}.txt'", ".", "format", "(", "args", ".", "source_lang", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.translation.TranslationTask.load_dataset": [[187, 210], ["translation.TranslationTask.args.data.split", "translation.load_langpair_dataset", "len", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.translation.load_langpair_dataset"], ["tgt_dict", "=", "cls", ".", "load_dictionary", "(", "os", ".", "path", ".", "join", "(", "paths", "[", "0", "]", ",", "'dict.{}.txt'", ".", "format", "(", "args", ".", "target_lang", ")", ")", ")", "\n", "assert", "src_dict", ".", "pad", "(", ")", "==", "tgt_dict", ".", "pad", "(", ")", "\n", "assert", "src_dict", ".", "eos", "(", ")", "==", "tgt_dict", ".", "eos", "(", ")", "\n", "assert", "src_dict", ".", "unk", "(", ")", "==", "tgt_dict", ".", "unk", "(", ")", "\n", "print", "(", "'| [{}] dictionary: {} types'", ".", "format", "(", "args", ".", "source_lang", ",", "len", "(", "src_dict", ")", ")", ")", "\n", "print", "(", "'| [{}] dictionary: {} types'", ".", "format", "(", "args", ".", "target_lang", ",", "len", "(", "tgt_dict", ")", ")", ")", "\n", "\n", "return", "cls", "(", "args", ",", "src_dict", ",", "tgt_dict", ")", "\n", "\n", "", "def", "load_dataset", "(", "self", ",", "split", ",", "epoch", "=", "0", ",", "combine", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Load a given dataset split.\n\n        Args:\n            split (str): name of the split (e.g., train, valid, test)\n        \"\"\"", "\n", "paths", "=", "self", ".", "args", ".", "data", ".", "split", "(", "os", ".", "pathsep", ")", "\n", "assert", "len", "(", "paths", ")", ">", "0", "\n", "data_path", "=", "paths", "[", "epoch", "%", "len", "(", "paths", ")", "]", "\n", "\n", "# infer langcode", "\n", "src", ",", "tgt", "=", "self", ".", "args", ".", "source_lang", ",", "self", ".", "args", ".", "target_lang", "\n", "\n", "self", ".", "datasets", "[", "split", "]", "=", "load_langpair_dataset", "(", "\n", "data_path", ",", "split", ",", "src", ",", "self", ".", "src_dict", ",", "tgt", ",", "self", ".", "tgt_dict", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.translation.TranslationTask.build_dataset_for_inference": [[212, 214], ["fairseq.data.LanguagePairDataset"], "methods", ["None"], ["upsample_primary", "=", "self", ".", "args", ".", "upsample_primary", ",", "\n", "left_pad_source", "=", "self", ".", "args", ".", "left_pad_source", ",", "\n", "left_pad_target", "=", "self", ".", "args", ".", "left_pad_target", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.translation.TranslationTask.max_positions": [[215, 218], ["None"], "methods", ["None"], ["max_source_positions", "=", "self", ".", "args", ".", "max_source_positions", ",", "\n", "max_target_positions", "=", "self", ".", "args", ".", "max_target_positions", ",", "\n", "load_alignments", "=", "self", ".", "args", ".", "load_alignments", ",", "\n", "truncate_source", "=", "self", ".", "args", ".", "truncate_source", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.translation.TranslationTask.source_dictionary": [[219, 223], ["None"], "methods", ["None"], ["truncate_target", "=", "self", ".", "args", ".", "truncate_target", ",", "\n", ")", "\n", "\n", "", "def", "build_dataset_for_inference", "(", "self", ",", "src_tokens", ",", "src_lengths", ")", ":", "\n", "        ", "return", "LanguagePairDataset", "(", "src_tokens", ",", "src_lengths", ",", "self", ".", "source_dictionary", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.translation.TranslationTask.target_dictionary": [[224, 228], ["None"], "methods", ["None"], ["\n", "", "def", "max_positions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the max sentence length allowed by the task.\"\"\"", "\n", "return", "(", "self", ".", "args", ".", "max_source_positions", ",", "self", ".", "args", ".", "max_target_positions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.translation.load_langpair_dataset": [[24, 102], ["itertools.count", "fairseq.data.LanguagePairDataset", "os.path.join", "fairseq.data.indexed_dataset.dataset_exists", "translation.load_langpair_dataset.split_exists"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.data_helper.count", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.dataset_exists"], ["def", "load_langpair_dataset", "(", "\n", "data_path", ",", "split", ",", "\n", "src", ",", "src_dict", ",", "\n", "tgt", ",", "tgt_dict", ",", "\n", "combine", ",", "dataset_impl", ",", "upsample_primary", ",", "\n", "left_pad_source", ",", "left_pad_target", ",", "max_source_positions", ",", "\n", "max_target_positions", ",", "prepend_bos", "=", "False", ",", "load_alignments", "=", "False", ",", "\n", "truncate_source", "=", "False", ",", "truncate_target", "=", "False", "\n", ")", ":", "\n", "    ", "def", "split_exists", "(", "split", ",", "src", ",", "tgt", ",", "lang", ",", "data_path", ")", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'{}.{}-{}.{}'", ".", "format", "(", "split", ",", "src", ",", "tgt", ",", "lang", ")", ")", "\n", "return", "indexed_dataset", ".", "dataset_exists", "(", "filename", ",", "impl", "=", "dataset_impl", ")", "\n", "\n", "", "src_datasets", "=", "[", "]", "\n", "tgt_datasets", "=", "[", "]", "\n", "\n", "for", "k", "in", "itertools", ".", "count", "(", ")", ":", "\n", "        ", "split_k", "=", "split", "+", "(", "str", "(", "k", ")", "if", "k", ">", "0", "else", "''", ")", "\n", "\n", "# infer langcode", "\n", "if", "split_exists", "(", "split_k", ",", "src", ",", "tgt", ",", "src", ",", "data_path", ")", ":", "\n", "            ", "prefix", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'{}.{}-{}.'", ".", "format", "(", "split_k", ",", "src", ",", "tgt", ")", ")", "\n", "", "elif", "split_exists", "(", "split_k", ",", "tgt", ",", "src", ",", "src", ",", "data_path", ")", ":", "\n", "            ", "prefix", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'{}.{}-{}.'", ".", "format", "(", "split_k", ",", "tgt", ",", "src", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "k", ">", "0", ":", "\n", "                ", "break", "\n", "", "else", ":", "\n", "                ", "raise", "FileNotFoundError", "(", "'Dataset not found: {} ({})'", ".", "format", "(", "split", ",", "data_path", ")", ")", "\n", "\n", "", "", "src_dataset", "=", "data_utils", ".", "load_indexed_dataset", "(", "prefix", "+", "src", ",", "src_dict", ",", "dataset_impl", ")", "\n", "if", "truncate_source", ":", "\n", "            ", "src_dataset", "=", "AppendTokenDataset", "(", "\n", "TruncateDataset", "(", "\n", "StripTokenDataset", "(", "src_dataset", ",", "src_dict", ".", "eos", "(", ")", ")", ",", "\n", "900", ",", "\n", ")", ",", "\n", "src_dict", ".", "eos", "(", ")", ",", "\n", ")", "\n", "", "src_datasets", ".", "append", "(", "src_dataset", ")", "\n", "tgt_dataset", "=", "data_utils", ".", "load_indexed_dataset", "(", "prefix", "+", "tgt", ",", "tgt_dict", ",", "dataset_impl", ")", "\n", "if", "truncate_target", ":", "\n", "            ", "tgt_dataset", "=", "AppendTokenDataset", "(", "\n", "TruncateDataset", "(", "\n", "StripTokenDataset", "(", "tgt_dataset", ",", "tgt_dict", ".", "eos", "(", ")", ")", ",", "\n", "900", ",", "\n", ")", ",", "\n", "tgt_dict", ".", "eos", "(", ")", ",", "\n", ")", "\n", "", "tgt_datasets", ".", "append", "(", "tgt_dataset", ")", "\n", "\n", "print", "(", "'| {} {} {}-{} {} examples'", ".", "format", "(", "data_path", ",", "split_k", ",", "src", ",", "tgt", ",", "len", "(", "src_datasets", "[", "-", "1", "]", ")", ")", ")", "\n", "\n", "if", "not", "combine", ":", "\n", "            ", "break", "\n", "\n", "", "", "assert", "len", "(", "src_datasets", ")", "==", "len", "(", "tgt_datasets", ")", "\n", "\n", "if", "len", "(", "src_datasets", ")", "==", "1", ":", "\n", "        ", "src_dataset", ",", "tgt_dataset", "=", "src_datasets", "[", "0", "]", ",", "tgt_datasets", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "sample_ratios", "=", "[", "1", "]", "*", "len", "(", "src_datasets", ")", "\n", "sample_ratios", "[", "0", "]", "=", "upsample_primary", "\n", "src_dataset", "=", "ConcatDataset", "(", "src_datasets", ",", "sample_ratios", ")", "\n", "tgt_dataset", "=", "ConcatDataset", "(", "tgt_datasets", ",", "sample_ratios", ")", "\n", "\n", "", "if", "prepend_bos", ":", "\n", "        ", "assert", "hasattr", "(", "src_dict", ",", "\"bos_index\"", ")", "and", "hasattr", "(", "tgt_dict", ",", "\"bos_index\"", ")", "\n", "src_dataset", "=", "PrependTokenDataset", "(", "src_dataset", ",", "src_dict", ".", "bos", "(", ")", ")", "\n", "tgt_dataset", "=", "PrependTokenDataset", "(", "tgt_dataset", ",", "tgt_dict", ".", "bos", "(", ")", ")", "\n", "\n", "", "align_dataset", "=", "None", "\n", "if", "load_alignments", ":", "\n", "        ", "align_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "'{}.align.{}-{}'", ".", "format", "(", "split", ",", "src", ",", "tgt", ")", ")", "\n", "if", "indexed_dataset", ".", "dataset_exists", "(", "align_path", ",", "impl", "=", "dataset_impl", ")", ":", "\n", "            ", "align_dataset", "=", "data_utils", ".", "load_indexed_dataset", "(", "align_path", ",", "None", ",", "dataset_impl", ")", "\n", "\n", "", "", "return", "LanguagePairDataset", "(", "\n", "src_dataset", ",", "src_dataset", ".", "sizes", ",", "src_dict", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.multilingual_masked_lm.MultiLingualMaskedLMTask.add_args": [[34, 61], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["\n", "@", "register_task", "(", "'multilingual_masked_lm'", ")", "\n", "class", "MultiLingualMaskedLMTask", "(", "FairseqTask", ")", ":", "\n", "    ", "\"\"\"Task for training masked language models (e.g., BERT, RoBERTa).\"\"\"", "\n", "\n", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add task-specific arguments to the parser.\"\"\"", "\n", "parser", ".", "add_argument", "(", "'data'", ",", "help", "=", "'colon separated path to data directories list, \\\n                            will be iterated upon during epochs in round-robin manner'", ")", "\n", "parser", ".", "add_argument", "(", "'--sample-break-mode'", ",", "default", "=", "'complete'", ",", "\n", "choices", "=", "[", "'none'", ",", "'complete'", ",", "'complete_doc'", ",", "'eos'", "]", ",", "\n", "help", "=", "'If omitted or \"none\", fills each sample with tokens-per-sample '", "\n", "'tokens. If set to \"complete\", splits samples only at the end '", "\n", "'of sentence, but may include multiple sentences per sample. '", "\n", "'\"complete_doc\" is similar but respects doc boundaries. '", "\n", "'If set to \"eos\", includes only one sentence per sample.'", ")", "\n", "parser", ".", "add_argument", "(", "'--tokens-per-sample'", ",", "default", "=", "512", ",", "type", "=", "int", ",", "\n", "help", "=", "'max number of total tokens over all segments '", "\n", "'per sample for BERT dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--mask-prob'", ",", "default", "=", "0.15", ",", "type", "=", "float", ",", "\n", "help", "=", "'probability of replacing a token with mask'", ")", "\n", "parser", ".", "add_argument", "(", "'--leave-unmasked-prob'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "\n", "help", "=", "'probability that a masked token is unmasked'", ")", "\n", "parser", ".", "add_argument", "(", "'--random-token-prob'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "\n", "help", "=", "'probability of replacing a token with a random token'", ")", "\n", "parser", ".", "add_argument", "(", "'--freq-weighted-replacement'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'sample random replacement words based on word frequencies'", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.multilingual_masked_lm.MultiLingualMaskedLMTask.__init__": [[62, 69], ["fairseq.tasks.FairseqTask.__init__", "dictionary.add_symbol"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol"], ["parser", ".", "add_argument", "(", "'--mask-whole-words'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'mask whole words; you may also want to set --bpe'", ")", "\n", "parser", ".", "add_argument", "(", "'--multilang-sampling-alpha'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "\n", "help", "=", "'smoothing alpha for sample rations across multiple datasets'", ")", "\n", "\n", "", "def", "__init__", "(", "self", ",", "args", ",", "dictionary", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "self", ".", "dictionary", "=", "dictionary", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.multilingual_masked_lm.MultiLingualMaskedLMTask.setup_task": [[70, 77], ["args.data.split", "fairseq.data.Dictionary.load", "print", "cls", "len", "os.path.join", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.load", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dictionary.BertDictionary.cls"], ["self", ".", "seed", "=", "args", ".", "seed", "\n", "\n", "# add mask token", "\n", "self", ".", "mask_idx", "=", "dictionary", ".", "add_symbol", "(", "'<mask>'", ")", "\n", "\n", "", "@", "classmethod", "\n", "def", "setup_task", "(", "cls", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "paths", "=", "args", ".", "data", ".", "split", "(", "os", ".", "pathsep", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.multilingual_masked_lm.MultiLingualMaskedLMTask._get_whole_word_mask": [[78, 102], ["fairseq.data.encoders.build_bpe", "torch.ByteTensor", "tok.startswith", "list", "fairseq.data.encoders.build_bpe.is_beginning_of_word", "map", "range", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.is_beginning_of_word"], ["assert", "len", "(", "paths", ")", ">", "0", "\n", "dictionary", "=", "Dictionary", ".", "load", "(", "os", ".", "path", ".", "join", "(", "paths", "[", "0", "]", ",", "'dict.txt'", ")", ")", "\n", "logger", ".", "info", "(", "'dictionary: {} types'", ".", "format", "(", "len", "(", "dictionary", ")", ")", ")", "\n", "return", "cls", "(", "args", ",", "dictionary", ")", "\n", "\n", "", "def", "_get_whole_word_mask", "(", "self", ")", ":", "\n", "# create masked input and targets", "\n", "        ", "if", "self", ".", "args", ".", "mask_whole_words", ":", "\n", "            ", "bpe", "=", "encoders", ".", "build_bpe", "(", "self", ".", "args", ")", "\n", "if", "bpe", "is", "not", "None", ":", "\n", "\n", "                ", "def", "is_beginning_of_word", "(", "i", ")", ":", "\n", "                    ", "if", "i", "<", "self", ".", "source_dictionary", ".", "nspecial", ":", "\n", "# special elements are always considered beginnings", "\n", "                        ", "return", "True", "\n", "", "tok", "=", "self", ".", "source_dictionary", "[", "i", "]", "\n", "if", "tok", ".", "startswith", "(", "'madeupword'", ")", ":", "\n", "                        ", "return", "True", "\n", "", "try", ":", "\n", "                        ", "return", "bpe", ".", "is_beginning_of_word", "(", "tok", ")", "\n", "", "except", "ValueError", ":", "\n", "                        ", "return", "True", "\n", "\n", "", "", "mask_whole_words", "=", "torch", ".", "ByteTensor", "(", "list", "(", "\n", "map", "(", "is_beginning_of_word", ",", "range", "(", "len", "(", "self", ".", "source_dictionary", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.multilingual_masked_lm.MultiLingualMaskedLMTask._get_sample_prob": [[103, 112], ["dataset_lens.sum", "smoothed_prob.sum"], "methods", ["None"], [")", ")", "\n", "", "", "else", ":", "\n", "            ", "mask_whole_words", "=", "None", "\n", "", "return", "mask_whole_words", "\n", "\n", "", "def", "_get_sample_prob", "(", "self", ",", "dataset_lens", ")", ":", "\n", "        ", "\"\"\"\n        Get smoothed sampling porbability by languages. This helps low resource\n        languages by upsampling them.\n        \"\"\"", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.multilingual_masked_lm.MultiLingualMaskedLMTask.load_dataset": [[113, 258], ["multilingual_masked_lm.MultiLingualMaskedLMTask.args.data.split", "sorted", "print", "print", "multilingual_masked_lm.MultiLingualMaskedLMTask._get_whole_word_mask", "enumerate", "numpy.array", "print", "fairseq.data.SortDataset", "len", "os.path.join", "fairseq.data.data_utils.load_indexed_dataset", "fairseq.data.TokenBlockDataset", "print", "fairseq.data.PrependTokenDataset", "fairseq.data.MaskTokensDataset.apply_mask", "fairseq.data.NestedDictionaryDataset", "lang_datasets.append", "multilingual_masked_lm.MultiLingualMaskedLMTask._get_sample_prob", "print", "print", "fairseq.data.ConcatDataset", "fairseq.data.ConcatDataset", "enumerate", "fairseq.data.data_utils.numpy_seed", "numpy.random.permutation", "len", "FileNotFoundError", "multilingual_masked_lm.MultiLingualMaskedLMTask.source_dictionary.bos", "len", "numpy.array.sum", "fairseq.data.ResamplingDataset", "lang_splits.append", "multilingual_masked_lm.MultiLingualMaskedLMTask.args.valid_subset.replace", "len", "len", "os.listdir", "os.path.isdir", "enumerate", "multilingual_masked_lm.MultiLingualMaskedLMTask.source_dictionary.pad", "multilingual_masked_lm.MultiLingualMaskedLMTask.source_dictionary.eos", "len", "multilingual_masked_lm.MultiLingualMaskedLMTask.source_dictionary.pad", "fairseq.data.PadDataset", "fairseq.data.NumSamplesDataset", "fairseq.data.NumelDataset", "fairseq.data.RawLabelDataset", "numpy.array.sum", "enumerate", "os.path.join", "fairseq.data.PadDataset", "fairseq.data.NumelDataset", "enumerate", "enumerate", "multilingual_masked_lm.MultiLingualMaskedLMTask.source_dictionary.pad", "multilingual_masked_lm.MultiLingualMaskedLMTask.source_dictionary.pad"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.multilingual_masked_lm.MultiLingualMaskedLMTask._get_whole_word_mask", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.load_indexed_dataset", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.mask_tokens_dataset.MaskTokensDataset.apply_mask", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.multilingual_masked_lm.MultiLingualMaskedLMTask._get_sample_prob", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.numpy_seed", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.bos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad"], ["prob", "=", "dataset_lens", "/", "dataset_lens", ".", "sum", "(", ")", "\n", "smoothed_prob", "=", "prob", "**", "self", ".", "args", ".", "multilang_sampling_alpha", "\n", "smoothed_prob", "=", "smoothed_prob", "/", "smoothed_prob", ".", "sum", "(", ")", "\n", "return", "smoothed_prob", "\n", "\n", "", "def", "load_dataset", "(", "self", ",", "split", ",", "epoch", "=", "0", ",", "combine", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Load a given dataset split.\n\n        Args:\n            split (str): name of the split (e.g., train, valid, test)\n        \"\"\"", "\n", "paths", "=", "self", ".", "args", ".", "data", ".", "split", "(", "os", ".", "pathsep", ")", "\n", "assert", "len", "(", "paths", ")", ">", "0", "\n", "data_path", "=", "paths", "[", "epoch", "%", "len", "(", "paths", ")", "]", "\n", "\n", "languages", "=", "sorted", "(", "\n", "name", "for", "name", "in", "os", ".", "listdir", "(", "data_path", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "name", ")", ")", "\n", ")", "\n", "\n", "logger", ".", "info", "(", "\"Training on {0} languages: {1}\"", ".", "format", "(", "len", "(", "languages", ")", ",", "languages", ")", ")", "\n", "logger", ".", "info", "(", "\"Language to id mapping: \"", ",", "{", "\n", "lang", ":", "id", "for", "id", ",", "lang", "in", "enumerate", "(", "languages", ")", "\n", "}", "\n", ")", "\n", "\n", "mask_whole_words", "=", "self", ".", "_get_whole_word_mask", "(", ")", "\n", "lang_datasets", "=", "[", "]", "\n", "for", "lang_id", ",", "language", "in", "enumerate", "(", "languages", ")", ":", "\n", "            ", "split_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "language", ",", "split", ")", "\n", "\n", "dataset", "=", "data_utils", ".", "load_indexed_dataset", "(", "\n", "split_path", ",", "\n", "self", ".", "source_dictionary", ",", "\n", "self", ".", "args", ".", "dataset_impl", ",", "\n", "combine", "=", "combine", ",", "\n", ")", "\n", "if", "dataset", "is", "None", ":", "\n", "                ", "raise", "FileNotFoundError", "(", "'Dataset not found: {} ({})'", ".", "format", "(", "split", ",", "split_path", ")", ")", "\n", "\n", "# create continuous blocks of tokens", "\n", "", "dataset", "=", "TokenBlockDataset", "(", "\n", "dataset", ",", "\n", "dataset", ".", "sizes", ",", "\n", "self", ".", "args", ".", "tokens_per_sample", "-", "1", ",", "# one less for <s>", "\n", "pad", "=", "self", ".", "source_dictionary", ".", "pad", "(", ")", ",", "\n", "eos", "=", "self", ".", "source_dictionary", ".", "eos", "(", ")", ",", "\n", "break_mode", "=", "self", ".", "args", ".", "sample_break_mode", ",", "\n", ")", "\n", "logger", ".", "info", "(", "'loaded {} blocks from: {}'", ".", "format", "(", "len", "(", "dataset", ")", ",", "split_path", ")", ")", "\n", "\n", "# prepend beginning-of-sentence token (<s>, equiv. to [CLS] in BERT)", "\n", "dataset", "=", "PrependTokenDataset", "(", "dataset", ",", "self", ".", "source_dictionary", ".", "bos", "(", ")", ")", "\n", "\n", "src_dataset", ",", "tgt_dataset", "=", "MaskTokensDataset", ".", "apply_mask", "(", "\n", "dataset", ",", "\n", "self", ".", "source_dictionary", ",", "\n", "pad_idx", "=", "self", ".", "source_dictionary", ".", "pad", "(", ")", ",", "\n", "mask_idx", "=", "self", ".", "mask_idx", ",", "\n", "seed", "=", "self", ".", "args", ".", "seed", ",", "\n", "mask_prob", "=", "self", ".", "args", ".", "mask_prob", ",", "\n", "leave_unmasked_prob", "=", "self", ".", "args", ".", "leave_unmasked_prob", ",", "\n", "random_token_prob", "=", "self", ".", "args", ".", "random_token_prob", ",", "\n", "freq_weighted_replacement", "=", "self", ".", "args", ".", "freq_weighted_replacement", ",", "\n", "mask_whole_words", "=", "mask_whole_words", ",", "\n", ")", "\n", "\n", "lang_dataset", "=", "NestedDictionaryDataset", "(", "\n", "{", "\n", "'net_input'", ":", "{", "\n", "'src_tokens'", ":", "PadDataset", "(", "\n", "src_dataset", ",", "\n", "pad_idx", "=", "self", ".", "source_dictionary", ".", "pad", "(", ")", ",", "\n", "left_pad", "=", "False", ",", "\n", ")", ",", "\n", "'src_lengths'", ":", "NumelDataset", "(", "src_dataset", ",", "reduce", "=", "False", ")", ",", "\n", "}", ",", "\n", "'target'", ":", "PadDataset", "(", "\n", "tgt_dataset", ",", "\n", "pad_idx", "=", "self", ".", "source_dictionary", ".", "pad", "(", ")", ",", "\n", "left_pad", "=", "False", ",", "\n", ")", ",", "\n", "'nsentences'", ":", "NumSamplesDataset", "(", ")", ",", "\n", "'ntokens'", ":", "NumelDataset", "(", "src_dataset", ",", "reduce", "=", "True", ")", ",", "\n", "'lang_id'", ":", "RawLabelDataset", "(", "[", "lang_id", "]", "*", "src_dataset", ".", "sizes", ".", "shape", "[", "0", "]", ")", ",", "\n", "}", ",", "\n", "sizes", "=", "[", "src_dataset", ".", "sizes", "]", ",", "\n", ")", "\n", "lang_datasets", ".", "append", "(", "lang_dataset", ")", "\n", "\n", "\n", "", "dataset_lengths", "=", "np", ".", "array", "(", "\n", "[", "len", "(", "d", ")", "for", "d", "in", "lang_datasets", "]", ",", "\n", "dtype", "=", "float", ",", "\n", ")", "\n", "logger", ".", "info", "(", "\n", "'loaded total {} blocks for all languages'", ".", "format", "(", "\n", "dataset_lengths", ".", "sum", "(", ")", ",", "\n", ")", "\n", ")", "\n", "if", "split", "==", "self", ".", "args", ".", "train_subset", ":", "\n", "# For train subset, additionally up or down sample languages.", "\n", "            ", "sample_probs", "=", "self", ".", "_get_sample_prob", "(", "dataset_lengths", ")", "\n", "logger", ".", "info", "(", "\"Sample probability by language: \"", ",", "{", "\n", "lang", ":", "\"{0:.4f}\"", ".", "format", "(", "sample_probs", "[", "id", "]", ")", "\n", "for", "id", ",", "lang", "in", "enumerate", "(", "languages", ")", "\n", "}", "\n", ")", "\n", "size_ratio", "=", "(", "sample_probs", "*", "dataset_lengths", ".", "sum", "(", ")", ")", "/", "dataset_lengths", "\n", "logger", ".", "info", "(", "\"Up/Down Sampling ratio by language: \"", ",", "{", "\n", "lang", ":", "\"{0:.2f}\"", ".", "format", "(", "size_ratio", "[", "id", "]", ")", "\n", "for", "id", ",", "lang", "in", "enumerate", "(", "languages", ")", "\n", "}", "\n", ")", "\n", "\n", "resampled_lang_datasets", "=", "[", "\n", "ResamplingDataset", "(", "\n", "lang_datasets", "[", "i", "]", ",", "\n", "size_ratio", "=", "size_ratio", "[", "i", "]", ",", "\n", "seed", "=", "self", ".", "args", ".", "seed", ",", "\n", "epoch", "=", "epoch", ",", "\n", "replace", "=", "size_ratio", "[", "i", "]", ">=", "1.0", ",", "\n", ")", "\n", "for", "i", ",", "d", "in", "enumerate", "(", "lang_datasets", ")", "\n", "]", "\n", "dataset", "=", "ConcatDataset", "(", "resampled_lang_datasets", ")", "\n", "", "else", ":", "\n", "            ", "dataset", "=", "ConcatDataset", "(", "lang_datasets", ")", "\n", "lang_splits", "=", "[", "split", "]", "\n", "for", "lang_id", ",", "lang_dataset", "in", "enumerate", "(", "lang_datasets", ")", ":", "\n", "                ", "split_name", "=", "split", "+", "'_'", "+", "languages", "[", "lang_id", "]", "\n", "lang_splits", ".", "append", "(", "split_name", ")", "\n", "self", ".", "datasets", "[", "split_name", "]", "=", "lang_dataset", "\n", "\n", "# [TODO]: This is hacky for now to print validation ppl for each", "\n", "# language individually. Maybe need task API changes to allow it", "\n", "# in more generic ways.", "\n", "", "if", "split", "in", "self", ".", "args", ".", "valid_subset", ":", "\n", "                ", "self", ".", "args", ".", "valid_subset", "=", "self", ".", "args", ".", "valid_subset", ".", "replace", "(", "\n", "split", ",", "','", ".", "join", "(", "lang_splits", ")", "\n", ")", "\n", "\n", "", "", "with", "data_utils", ".", "numpy_seed", "(", "self", ".", "args", ".", "seed", "+", "epoch", ")", ":", "\n", "            ", "shuffle", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "dataset", ")", ")", "\n", "\n", "", "self", ".", "datasets", "[", "split", "]", "=", "SortDataset", "(", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.multilingual_masked_lm.MultiLingualMaskedLMTask.build_dataset_for_inference": [[261, 288], ["fairseq.data.PadDataset", "fairseq.data.PrependTokenDataset", "fairseq.data.NestedDictionaryDataset", "fairseq.data.TokenBlockDataset", "multilingual_masked_lm.MultiLingualMaskedLMTask.source_dictionary.bos", "fairseq.data.SortDataset", "multilingual_masked_lm.MultiLingualMaskedLMTask.source_dictionary.pad", "fairseq.data.IdDataset", "multilingual_masked_lm.MultiLingualMaskedLMTask.source_dictionary.pad", "multilingual_masked_lm.MultiLingualMaskedLMTask.source_dictionary.eos", "fairseq.data.NumelDataset"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.bos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos"], ["shuffle", ",", "\n", "dataset", ".", "sizes", ",", "\n", "]", ",", "\n", ")", "\n", "\n", "", "def", "build_dataset_for_inference", "(", "self", ",", "src_tokens", ",", "src_lengths", ",", "sort", "=", "True", ")", ":", "\n", "        ", "src_dataset", "=", "PadDataset", "(", "\n", "TokenBlockDataset", "(", "\n", "src_tokens", ",", "\n", "src_lengths", ",", "\n", "self", ".", "args", ".", "tokens_per_sample", "-", "1", ",", "# one less for <s>", "\n", "pad", "=", "self", ".", "source_dictionary", ".", "pad", "(", ")", ",", "\n", "eos", "=", "self", ".", "source_dictionary", ".", "eos", "(", ")", ",", "\n", "break_mode", "=", "'eos'", ",", "\n", ")", ",", "\n", "pad_idx", "=", "self", ".", "source_dictionary", ".", "pad", "(", ")", ",", "\n", "left_pad", "=", "False", ",", "\n", ")", "\n", "src_dataset", "=", "PrependTokenDataset", "(", "src_dataset", ",", "self", ".", "source_dictionary", ".", "bos", "(", ")", ")", "\n", "src_dataset", "=", "NestedDictionaryDataset", "(", "\n", "{", "\n", "'id'", ":", "IdDataset", "(", ")", ",", "\n", "'net_input'", ":", "{", "\n", "'src_tokens'", ":", "src_dataset", ",", "\n", "'src_lengths'", ":", "NumelDataset", "(", "src_dataset", ",", "reduce", "=", "False", ")", ",", "\n", "}", ",", "\n", "}", ",", "\n", "sizes", "=", "src_lengths", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.multilingual_masked_lm.MultiLingualMaskedLMTask.get_batch_iterator": [[289, 304], ["super().get_batch_iterator"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.fairseq_task.FairseqTask.get_batch_iterator"], [")", "\n", "if", "sort", ":", "\n", "            ", "src_dataset", "=", "SortDataset", "(", "src_dataset", ",", "sort_order", "=", "[", "src_lengths", "]", ")", "\n", "", "return", "src_dataset", "\n", "\n", "", "def", "get_batch_iterator", "(", "\n", "self", ",", "dataset", ",", "max_tokens", "=", "None", ",", "max_sentences", "=", "None", ",", "max_positions", "=", "None", ",", "\n", "ignore_invalid_inputs", "=", "False", ",", "required_batch_size_multiple", "=", "1", ",", "\n", "seed", "=", "1", ",", "num_shards", "=", "1", ",", "shard_id", "=", "0", ",", "num_workers", "=", "0", ",", "epoch", "=", "0", ",", "\n", ")", ":", "\n", "# Recreate epoch iterator every epoch cause the underlying", "\n", "# datasets are dynamic due to sampling.", "\n", "        ", "self", ".", "dataset_to_epoch_iter", "=", "{", "}", "\n", "epoch_iter", "=", "super", "(", ")", ".", "get_batch_iterator", "(", "\n", "dataset", ",", "max_tokens", ",", "max_sentences", ",", "max_positions", ",", "\n", "ignore_invalid_inputs", ",", "required_batch_size_multiple", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.multilingual_masked_lm.MultiLingualMaskedLMTask.source_dictionary": [[305, 308], ["None"], "methods", ["None"], ["seed", ",", "num_shards", ",", "shard_id", ",", "num_workers", ",", "epoch", ",", "\n", ")", "\n", "self", ".", "dataset_to_epoch_iter", "=", "{", "}", "\n", "return", "epoch_iter", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.multilingual_masked_lm.MultiLingualMaskedLMTask.target_dictionary": [[309, 312], ["None"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "source_dictionary", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dictionary", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.fairseq_task.FairseqTask.add_args": [[26, 30], ["None"], "methods", ["None"], ["def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add task-specific arguments to the parser.\"\"\"", "\n", "pass", "\n", "\n", "", "@", "staticmethod", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.fairseq_task.FairseqTask.logging_outputs_can_be_summed": [[30, 38], ["criterion.logging_outputs_can_be_summed"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.sentence_prediction.SentencePredictionCriterion.logging_outputs_can_be_summed"], ["", "@", "staticmethod", "\n", "def", "logging_outputs_can_be_summed", "(", "criterion", ")", "->", "bool", ":", "\n", "        ", "\"\"\"\n        Whether the logging outputs returned by `train_step` and `valid_step` can\n        be summed across workers prior to calling `aggregate_logging_outputs`.\n        Setting this to True will improves distributed training speed.\n        \"\"\"", "\n", "return", "criterion", ".", "logging_outputs_can_be_summed", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.fairseq_task.FairseqTask.__init__": [[31, 35], ["None"], "methods", ["None"], ["def", "logging_outputs_can_be_summed", "(", "criterion", ")", "->", "bool", ":", "\n", "        "]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.fairseq_task.FairseqTask.load_dictionary": [[36, 44], ["fairseq.data.Dictionary.load"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.load"], ["\n", "return", "criterion", ".", "logging_outputs_can_be_summed", "(", ")", "\n", "\n", "", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "self", ".", "datasets", "=", "{", "}", "\n", "self", ".", "dataset_to_epoch_iter", "=", "{", "}", "\n", "\n", "", "@", "classmethod", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.fairseq_task.FairseqTask.build_dictionary": [[45, 64], ["fairseq.data.Dictionary", "fairseq.data.Dictionary.finalize", "fairseq.data.Dictionary.add_file_to_dictionary"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDatasetBuilder.finalize", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_file_to_dictionary"], ["def", "load_dictionary", "(", "cls", ",", "filename", ")", ":", "\n", "        ", "\"\"\"Load the dictionary from the filename\n\n        Args:\n            filename (str): the filename\n        \"\"\"", "\n", "return", "Dictionary", ".", "load", "(", "filename", ")", "\n", "\n", "", "@", "classmethod", "\n", "def", "build_dictionary", "(", "cls", ",", "filenames", ",", "workers", "=", "1", ",", "threshold", "=", "-", "1", ",", "nwords", "=", "-", "1", ",", "padding_factor", "=", "8", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.fairseq_task.FairseqTask.setup_task": [[65, 73], ["cls"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dictionary.BertDictionary.cls"], ["\n", "d", "=", "Dictionary", "(", ")", "\n", "for", "filename", "in", "filenames", ":", "\n", "            ", "Dictionary", ".", "add_file_to_dictionary", "(", "filename", ",", "d", ",", "tokenizer", ".", "tokenize_line", ",", "workers", ")", "\n", "", "d", ".", "finalize", "(", "threshold", "=", "threshold", ",", "nwords", "=", "nwords", ",", "padding_factor", "=", "padding_factor", ")", "\n", "return", "d", "\n", "\n", "", "@", "classmethod", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.fairseq_task.FairseqTask.load_dataset": [[74, 81], ["None"], "methods", ["None"], ["def", "setup_task", "(", "cls", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Setup the task (e.g., load dictionaries).\n\n        Args:\n            args (argparse.Namespace): parsed command-line arguments\n        \"\"\"", "\n", "return", "cls", "(", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.fairseq_task.FairseqTask.dataset": [[82, 98], ["KeyError", "isinstance", "TypeError"], "methods", ["None"], ["", "def", "load_dataset", "(", "self", ",", "split", ",", "combine", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Load a given dataset split.\n\n        Args:\n            split (str): name of the split (e.g., train, valid, test)\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n", "", "def", "dataset", "(", "self", ",", "split", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.fairseq_task.FairseqTask.get_batch_iterator": [[99, 174], ["isinstance", "dataset.set_epoch", "fairseq.data.data_utils.batch_by_size", "fairseq.data.iterators.EpochBatchIterator", "fairseq.data.data_utils.numpy_seed", "dataset.ordered_indices", "fairseq.data.data_utils.filter_by_size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.denoising_dataset.DenoisingDataset.set_epoch", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.batch_by_size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.numpy_seed", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.ordered_indices", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.filter_by_size"], ["\n", "from", "fairseq", ".", "data", "import", "FairseqDataset", "\n", "if", "split", "not", "in", "self", ".", "datasets", ":", "\n", "            ", "raise", "KeyError", "(", "'Dataset not loaded: '", "+", "split", ")", "\n", "", "if", "not", "isinstance", "(", "self", ".", "datasets", "[", "split", "]", ",", "FairseqDataset", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'Datasets are expected to be of type FairseqDataset'", ")", "\n", "", "return", "self", ".", "datasets", "[", "split", "]", "\n", "\n", "", "def", "get_batch_iterator", "(", "\n", "self", ",", "dataset", ",", "max_tokens", "=", "None", ",", "max_sentences", "=", "None", ",", "max_positions", "=", "None", ",", "\n", "ignore_invalid_inputs", "=", "False", ",", "required_batch_size_multiple", "=", "1", ",", "\n", "seed", "=", "1", ",", "num_shards", "=", "1", ",", "shard_id", "=", "0", ",", "num_workers", "=", "0", ",", "epoch", "=", "0", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Get an iterator that yields batches of data from the given dataset.\n\n        Args:\n            dataset (~fairseq.data.FairseqDataset): dataset to batch\n            max_tokens (int, optional): max number of tokens in each batch\n                (default: None).\n            max_sentences (int, optional): max number of sentences in each\n                batch (default: None).\n            max_positions (optional): max sentence length supported by the\n                model (default: None).\n            ignore_invalid_inputs (bool, optional): don't raise Exception for\n                sentences that are too long (default: False).\n            required_batch_size_multiple (int, optional): require batch size to\n                be a multiple of N (default: 1).\n            seed (int, optional): seed for random number generator for\n                reproducibility (default: 1).\n            num_shards (int, optional): shard the data iterator into N\n                shards (default: 1).\n            shard_id (int, optional): which shard of the data iterator to\n                return (default: 0).\n            num_workers (int, optional): how many subprocesses to use for data\n                loading. 0 means the data will be loaded in the main process\n                (default: 0).\n            epoch (int, optional): the epoch to start the iterator from\n                (default: 0).\n        Returns:\n            ~fairseq.iterators.EpochBatchIterator: a batched iterator over the\n                given dataset split\n        \"\"\"", "\n", "# For default fairseq task, return same iterator across epochs", "\n", "# as datasets are not dynamic, can be overridden in task specific", "\n", "# setting.", "\n", "if", "dataset", "in", "self", ".", "dataset_to_epoch_iter", ":", "\n", "            ", "return", "self", ".", "dataset_to_epoch_iter", "[", "dataset", "]", "\n", "\n", "", "assert", "isinstance", "(", "dataset", ",", "FairseqDataset", ")", "\n", "\n", "# initialize the dataset with the correct starting epoch", "\n", "dataset", ".", "set_epoch", "(", "epoch", ")", "\n", "\n", "# get indices ordered by example size", "\n", "with", "data_utils", ".", "numpy_seed", "(", "seed", ")", ":", "\n", "            ", "indices", "=", "dataset", ".", "ordered_indices", "(", ")", "\n", "\n", "# filter examples that are too large", "\n", "", "if", "max_positions", "is", "not", "None", ":", "\n", "            ", "indices", "=", "data_utils", ".", "filter_by_size", "(", "\n", "indices", ",", "dataset", ",", "max_positions", ",", "raise_exception", "=", "(", "not", "ignore_invalid_inputs", ")", ",", "\n", ")", "\n", "\n", "# create mini-batches with given size constraints", "\n", "", "batch_sampler", "=", "data_utils", ".", "batch_by_size", "(", "\n", "indices", ",", "dataset", ".", "num_tokens", ",", "max_tokens", "=", "max_tokens", ",", "max_sentences", "=", "max_sentences", ",", "\n", "required_batch_size_multiple", "=", "required_batch_size_multiple", ",", "\n", ")", "\n", "\n", "# return a reusable, sharded iterator", "\n", "epoch_iter", "=", "iterators", ".", "EpochBatchIterator", "(", "\n", "dataset", "=", "dataset", ",", "\n", "collate_fn", "=", "dataset", ".", "collater", ",", "\n", "batch_sampler", "=", "batch_sampler", ",", "\n", "seed", "=", "seed", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.fairseq_task.FairseqTask.build_model": [[175, 188], ["models.build_model"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.build_model"], ["num_shards", "=", "num_shards", ",", "\n", "shard_id", "=", "shard_id", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "epoch", "=", "epoch", ",", "\n", ")", "\n", "self", ".", "dataset_to_epoch_iter", "[", "dataset", "]", "=", "epoch_iter", "\n", "return", "epoch_iter", "\n", "\n", "", "def", "build_model", "(", "self", ",", "args", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.fairseq_task.FairseqTask.build_criterion": [[189, 202], ["criterions.build_criterion"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.composite_loss.CompositeLoss.build_criterion"], ["\n", "from", "fairseq", "import", "models", "\n", "return", "models", ".", "build_model", "(", "args", ",", "self", ")", "\n", "\n", "", "def", "build_criterion", "(", "self", ",", "args", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.fairseq_task.FairseqTask.build_generator": [[203, 272], ["getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "seq_gen_cls", "SequenceScorer", "getattr", "sum", "ValueError", "fairseq.search.Sampling", "fairseq.search.DiverseBeamSearch", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "int", "fairseq.search.LengthConstrainedBeamSearch", "getattr", "fairseq.search.DiverseSiblingsSearch", "fairseq.search.BeamSearch"], "methods", ["None"], ["\n", "from", "fairseq", "import", "criterions", "\n", "return", "criterions", ".", "build_criterion", "(", "args", ",", "self", ")", "\n", "\n", "", "def", "build_generator", "(", "self", ",", "args", ")", ":", "\n", "        ", "if", "getattr", "(", "args", ",", "'score_reference'", ",", "False", ")", ":", "\n", "            ", "from", "fairseq", ".", "sequence_scorer", "import", "SequenceScorer", "\n", "return", "SequenceScorer", "(", "\n", "self", ".", "target_dictionary", ",", "\n", "compute_alignment", "=", "getattr", "(", "args", ",", "'print_alignment'", ",", "False", ")", ",", "\n", ")", "\n", "\n", "", "from", "fairseq", ".", "sequence_generator", "import", "SequenceGenerator", ",", "SequenceGeneratorWithAlignment", "\n", "\n", "# Choose search strategy. Defaults to Beam Search.", "\n", "sampling", "=", "getattr", "(", "args", ",", "'sampling'", ",", "False", ")", "\n", "sampling_topk", "=", "getattr", "(", "args", ",", "'sampling_topk'", ",", "-", "1", ")", "\n", "sampling_topp", "=", "getattr", "(", "args", ",", "'sampling_topp'", ",", "-", "1.0", ")", "\n", "diverse_beam_groups", "=", "getattr", "(", "args", ",", "'diverse_beam_groups'", ",", "-", "1", ")", "\n", "diverse_beam_strength", "=", "getattr", "(", "args", ",", "'diverse_beam_strength'", ",", "0.5", ")", ",", "\n", "match_source_len", "=", "getattr", "(", "args", ",", "'match_source_len'", ",", "False", ")", "\n", "diversity_rate", "=", "getattr", "(", "args", ",", "'diversity_rate'", ",", "-", "1", ")", "\n", "dedup", "=", "getattr", "(", "args", ",", "'dedup'", ",", "False", ")", "\n", "verb_idxs", "=", "getattr", "(", "args", ",", "'verb_idxs'", ",", "[", "]", ")", "\n", "banned_toks", "=", "getattr", "(", "args", ",", "'banned_toks'", ",", "[", "]", ")", "\n", "coef_trainer", "=", "getattr", "(", "args", ",", "'coef_trainer'", ",", "None", ")", "\n", "coefs", "=", "getattr", "(", "args", ",", "'coefs'", ",", "[", "]", ")", "\n", "learn", "=", "getattr", "(", "args", ",", "'learn'", ",", "False", ")", "\n", "learn_every_token", "=", "getattr", "(", "args", ",", "'learn_every_token'", ",", "False", ")", "\n", "if", "(", "\n", "sum", "(", "\n", "int", "(", "cond", ")", "\n", "for", "cond", "in", "[", "\n", "sampling", ",", "\n", "diverse_beam_groups", ">", "0", ",", "\n", "match_source_len", ",", "\n", "diversity_rate", ">", "0", ",", "\n", "]", "\n", ")", "\n", ">", "1", "\n", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Provided Search parameters are mutually exclusive.'", ")", "\n", "", "assert", "sampling_topk", "<", "0", "or", "sampling", ",", "'--sampling-topk requires --sampling'", "\n", "assert", "sampling_topp", "<", "0", "or", "sampling", ",", "'--sampling-topp requires --sampling'", "\n", "\n", "if", "sampling", ":", "\n", "            ", "search_strategy", "=", "search", ".", "Sampling", "(", "self", ".", "target_dictionary", ",", "sampling_topk", ",", "sampling_topp", ")", "\n", "", "elif", "diverse_beam_groups", ">", "0", ":", "\n", "            ", "search_strategy", "=", "search", ".", "DiverseBeamSearch", "(", "\n", "self", ".", "target_dictionary", ",", "diverse_beam_groups", ",", "diverse_beam_strength", ")", "\n", "", "elif", "match_source_len", ":", "\n", "# this is useful for tagging applications where the output", "\n", "# length should match the input length, so we hardcode the", "\n", "# length constraints for simplicity", "\n", "            ", "search_strategy", "=", "search", ".", "LengthConstrainedBeamSearch", "(", "\n", "self", ".", "target_dictionary", ",", "min_len_a", "=", "1", ",", "min_len_b", "=", "0", ",", "max_len_a", "=", "1", ",", "max_len_b", "=", "0", ",", "\n", ")", "\n", "", "elif", "diversity_rate", ">", "-", "1", ":", "\n", "            ", "search_strategy", "=", "search", ".", "DiverseSiblingsSearch", "(", "self", ".", "target_dictionary", ",", "diversity_rate", ")", "\n", "", "else", ":", "\n", "            ", "search_strategy", "=", "search", ".", "BeamSearch", "(", "self", ".", "target_dictionary", ")", "\n", "\n", "", "if", "getattr", "(", "args", ",", "'print_alignment'", ",", "False", ")", ":", "\n", "            ", "seq_gen_cls", "=", "SequenceGeneratorWithAlignment", "\n", "", "else", ":", "\n", "            ", "seq_gen_cls", "=", "SequenceGenerator", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.fairseq_task.FairseqTask.train_step": [[274, 300], ["model.train", "criterion", "optimizer.backward"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.train.train", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.criterion", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.dynamicconvFunction.backward"], ["", "return", "seq_gen_cls", "(", "\n", "self", ".", "target_dictionary", ",", "\n", "beam_size", "=", "getattr", "(", "args", ",", "'beam'", ",", "5", ")", ",", "\n", "max_len_a", "=", "getattr", "(", "args", ",", "'max_len_a'", ",", "0", ")", ",", "\n", "max_len_b", "=", "getattr", "(", "args", ",", "'max_len_b'", ",", "200", ")", ",", "\n", "min_len", "=", "getattr", "(", "args", ",", "'min_len'", ",", "1", ")", ",", "\n", "normalize_scores", "=", "(", "not", "getattr", "(", "args", ",", "'unnormalized'", ",", "False", ")", ")", ",", "\n", "len_penalty", "=", "getattr", "(", "args", ",", "'lenpen'", ",", "1", ")", ",", "\n", "unk_penalty", "=", "getattr", "(", "args", ",", "'unkpen'", ",", "0", ")", ",", "\n", "temperature", "=", "getattr", "(", "args", ",", "'temperature'", ",", "1.", ")", ",", "\n", "match_source_len", "=", "getattr", "(", "args", ",", "'match_source_len'", ",", "False", ")", ",", "\n", "no_repeat_ngram_size", "=", "getattr", "(", "args", ",", "'no_repeat_ngram_size'", ",", "0", ")", ",", "\n", "search_strategy", "=", "search_strategy", ",", "\n", "dedup", "=", "dedup", ",", "\n", "verb", "=", "verb_idxs", ",", "\n", "banned_toks", "=", "banned_toks", ",", "\n", "coef_trainer", "=", "coef_trainer", ",", "\n", "coefs", "=", "coefs", ",", "\n", "learn", "=", "learn", ",", "\n", "learn_every_token", "=", "learn_every_token", "\n", ")", "\n", "\n", "", "def", "train_step", "(", "self", ",", "sample", ",", "model", ",", "criterion", ",", "optimizer", ",", "ignore_grad", "=", "False", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.fairseq_task.FairseqTask.valid_step": [[301, 306], ["model.eval", "torch.no_grad", "criterion"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.criterion"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.fairseq_task.FairseqTask.inference_step": [[307, 310], ["torch.no_grad", "generator.generate"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.hub_interface.BARTHubInterface.generate"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.fairseq_task.FairseqTask.begin_epoch": [[333, 336], ["None"], "methods", ["None"], ["", "", "def", "begin_epoch", "(", "self", ",", "epoch", ",", "model", ")", ":", "\n", "        ", "\"\"\"Hook function called before the start of each epoch.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.fairseq_task.FairseqTask.update_step": [[311, 318], ["None"], "methods", ["None"], ["\n", "model", ".", "train", "(", ")", "\n", "loss", ",", "sample_size", ",", "logging_output", "=", "criterion", "(", "model", ",", "sample", ")", "\n", "if", "ignore_grad", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.fairseq_task.FairseqTask.aggregate_logging_outputs": [[319, 328], ["fairseq.utils.deprecation_warning", "fairseq.metrics.aggregate", "fairseq_task.FairseqTask.reduce_metrics", "agg.get_smoothed_values"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.deprecation_warning", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.aggregate", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.sentence_prediction.SentencePredictionCriterion.reduce_metrics", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.MetersDict.get_smoothed_values"], ["            ", "loss", "*=", "0", "\n", "", "optimizer", ".", "backward", "(", "loss", ")", "\n", "return", "loss", ",", "sample_size", ",", "logging_output", "\n", "\n", "", "def", "valid_step", "(", "self", ",", "sample", ",", "model", ",", "criterion", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "loss", ",", "sample_size", ",", "logging_output", "=", "criterion", "(", "model", ",", "sample", ")", "\n", "", "return", "loss", ",", "sample_size", ",", "logging_output", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.fairseq_task.FairseqTask.reduce_metrics": [[329, 358], ["criterion.__class__.reduce_metrics", "getattr", "fairseq.utils.deprecation_warning", "fairseq_task.FairseqTask.aggregate_logging_outputs", "fairseq_task.FairseqTask.items", "any", "warnings.warn", "sum", "fairseq.metrics.log_scalar", "fairseq.metrics.log_speed", "any", "warnings.warn", "sum", "fairseq.metrics.log_scalar", "fairseq.metrics.log_scalar", "log.get", "log.get"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.sentence_prediction.SentencePredictionCriterion.reduce_metrics", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.deprecation_warning", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.binary_cross_entropy.BinaryCrossEntropyCriterion.aggregate_logging_outputs", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_scalar", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_speed", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_scalar", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_scalar"], ["", "def", "inference_step", "(", "self", ",", "generator", ",", "models", ",", "sample", ",", "prefix_tokens", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "return", "generator", ".", "generate", "(", "models", ",", "sample", ",", "prefix_tokens", "=", "prefix_tokens", ",", "**", "kwargs", ")", "\n", "\n", "", "", "def", "begin_epoch", "(", "self", ",", "epoch", ",", "model", ")", ":", "\n", "        ", "\"\"\"Hook function called before the start of each epoch.\"\"\"", "\n", "pass", "\n", "\n", "", "def", "update_step", "(", "self", ",", "num_updates", ")", ":", "\n", "        ", "\"\"\"Task level update when number of updates increases.\n\n        This is called after the optimization step and learning rate\n        update at each iteration.\n        \"\"\"", "\n", "pass", "\n", "\n", "", "def", "aggregate_logging_outputs", "(", "self", ",", "logging_outputs", ",", "criterion", ")", ":", "\n", "        ", "\"\"\"[deprecated] Aggregate logging outputs from data parallel training.\"\"\"", "\n", "utils", ".", "deprecation_warning", "(", "\n", "'The aggregate_logging_outputs API is deprecated. '", "\n", "'Please use the reduce_metrics API instead.'", "\n", ")", "\n", "with", "metrics", ".", "aggregate", "(", ")", "as", "agg", ":", "\n", "            ", "self", ".", "reduce_metrics", "(", "logging_outputs", ",", "criterion", ")", "\n", "return", "agg", ".", "get_smoothed_values", "(", ")", "\n", "\n", "", "", "def", "reduce_metrics", "(", "self", ",", "logging_outputs", ",", "criterion", ")", ":", "\n", "        ", "\"\"\"Aggregate logging outputs from data parallel training.\"\"\"", "\n", "# backward compatibility for tasks that override aggregate_logging_outputs", "\n", "base_func", "=", "FairseqTask", ".", "aggregate_logging_outputs", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.fairseq_task.FairseqTask.max_positions": [[359, 362], ["None"], "methods", ["None"], ["self_func", "=", "getattr", "(", "self", ",", "'aggregate_logging_outputs'", ")", ".", "__func__", "\n", "if", "self_func", "is", "not", "base_func", ":", "\n", "            ", "utils", ".", "deprecation_warning", "(", "\n", "'Tasks should implement the reduce_metrics API. '", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.fairseq_task.FairseqTask.source_dictionary": [[363, 368], ["None"], "methods", ["None"], ["'Falling back to deprecated aggregate_logging_outputs API.'", "\n", ")", "\n", "agg_logging_outputs", "=", "self", ".", "aggregate_logging_outputs", "(", "logging_outputs", ",", "criterion", ")", "\n", "for", "k", ",", "v", "in", "agg_logging_outputs", ".", "items", "(", ")", ":", "\n", "                ", "metrics", ".", "log_scalar", "(", "k", ",", "v", ")", "\n", "", "return", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.fairseq_task.FairseqTask.target_dictionary": [[369, 374], ["None"], "methods", ["None"], ["\n", "", "if", "not", "any", "(", "'ntokens'", "in", "log", "for", "log", "in", "logging_outputs", ")", ":", "\n", "            ", "warnings", ".", "warn", "(", "'ntokens not found in Criterion logging outputs, cannot log wpb or wps'", ")", "\n", "", "else", ":", "\n", "            ", "ntokens", "=", "utils", ".", "item", "(", "sum", "(", "log", ".", "get", "(", "'ntokens'", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", ")", "\n", "metrics", ".", "log_scalar", "(", "'wpb'", ",", "ntokens", ",", "priority", "=", "180", ",", "round", "=", "1", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.language_modeling.LanguageModelingTask.add_args": [[60, 88], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["\n", "\n", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add task-specific arguments to the parser.\"\"\"", "\n", "# fmt: off", "\n", "parser", ".", "add_argument", "(", "'data'", ",", "help", "=", "'path to data directory'", ")", "\n", "parser", ".", "add_argument", "(", "'--sample-break-mode'", ",", "default", "=", "'none'", ",", "\n", "choices", "=", "[", "'none'", ",", "'complete'", ",", "'complete_doc'", ",", "'eos'", "]", ",", "\n", "help", "=", "'If omitted or \"none\", fills each sample with tokens-per-sample '", "\n", "'tokens. If set to \"complete\", splits samples only at the end '", "\n", "'of sentence, but may include multiple sentences per sample. '", "\n", "'\"complete_doc\" is similar but respects doc boundaries. '", "\n", "'If set to \"eos\", includes only one sentence per sample.'", ")", "\n", "parser", ".", "add_argument", "(", "'--tokens-per-sample'", ",", "default", "=", "1024", ",", "type", "=", "int", ",", "\n", "help", "=", "'max number of tokens per sample for LM dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--output-dictionary-size'", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "'limit the size of output dictionary'", ")", "\n", "parser", ".", "add_argument", "(", "'--self-target'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'include self target'", ")", "\n", "parser", ".", "add_argument", "(", "'--future-target'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'include future target'", ")", "\n", "parser", ".", "add_argument", "(", "'--past-target'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'include past target'", ")", "\n", "parser", ".", "add_argument", "(", "'--add-bos-token'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'prepend beginning of sentence token (<s>)'", ")", "\n", "parser", ".", "add_argument", "(", "'--max-target-positions'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.language_modeling.LanguageModelingTask.__init__": [[90, 98], ["fairseq.tasks.FairseqTask.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["parser", ".", "add_argument", "(", "'--truncate-sequence'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'truncate sequences to --tokens-per-sample'", ")", "\n", "# fmt: on", "\n", "\n", "", "def", "__init__", "(", "self", ",", "args", ",", "dictionary", ",", "output_dictionary", "=", "None", ",", "targets", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "self", ".", "dictionary", "=", "dictionary", "\n", "self", ".", "output_dictionary", "=", "output_dictionary", "or", "dictionary", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.language_modeling.LanguageModelingTask.setup_task": [[99, 135], ["hasattr", "getattr", "getattr", "getattr", "cls", "args.data.split", "fairseq.data.Dictionary.load", "print", "targets.append", "targets.append", "targets.append", "len", "len", "os.path.join", "fairseq.data.TruncatedDictionary", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dictionary.BertDictionary.cls", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.load", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], ["if", "targets", "is", "None", ":", "\n", "            ", "targets", "=", "[", "\"future\"", "]", "\n", "", "self", ".", "targets", "=", "targets", "\n", "\n", "", "@", "classmethod", "\n", "def", "setup_task", "(", "cls", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Setup the task (e.g., load dictionaries).\n\n        Args:\n            args (argparse.Namespace): parsed command-line arguments\n        \"\"\"", "\n", "dictionary", "=", "None", "\n", "output_dictionary", "=", "None", "\n", "if", "args", ".", "data", ":", "\n", "            ", "paths", "=", "args", ".", "data", ".", "split", "(", "os", ".", "pathsep", ")", "\n", "assert", "len", "(", "paths", ")", ">", "0", "\n", "dictionary", "=", "Dictionary", ".", "load", "(", "os", ".", "path", ".", "join", "(", "paths", "[", "0", "]", ",", "\"dict.txt\"", ")", ")", "\n", "logger", ".", "info", "(", "\"dictionary: {} types\"", ".", "format", "(", "len", "(", "dictionary", ")", ")", ")", "\n", "output_dictionary", "=", "dictionary", "\n", "if", "args", ".", "output_dictionary_size", ">=", "0", ":", "\n", "                ", "output_dictionary", "=", "TruncatedDictionary", "(", "\n", "dictionary", ",", "args", ".", "output_dictionary_size", "\n", ")", "\n", "\n", "# upgrade old checkpoints", "\n", "", "", "if", "hasattr", "(", "args", ",", "\"exclude_self_target\"", ")", ":", "\n", "            ", "args", ".", "self_target", "=", "not", "args", ".", "exclude_self_target", "\n", "\n", "", "targets", "=", "[", "]", "\n", "if", "getattr", "(", "args", ",", "\"self_target\"", ",", "False", ")", ":", "\n", "            ", "targets", ".", "append", "(", "\"self\"", ")", "\n", "", "if", "getattr", "(", "args", ",", "\"future_target\"", ",", "False", ")", ":", "\n", "            ", "targets", ".", "append", "(", "\"future\"", ")", "\n", "", "if", "getattr", "(", "args", ",", "\"past_target\"", ",", "False", ")", ":", "\n", "            ", "targets", ".", "append", "(", "\"past\"", ")", "\n", "", "if", "len", "(", "targets", ")", "==", "0", ":", "\n", "# standard language modeling", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.language_modeling.LanguageModelingTask.build_model": [[136, 146], ["super().build_model", "ValueError"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.build_model"], ["            ", "targets", "=", "[", "\"future\"", "]", "\n", "\n", "", "return", "cls", "(", "args", ",", "dictionary", ",", "output_dictionary", ",", "targets", "=", "targets", ")", "\n", "\n", "", "def", "build_model", "(", "self", ",", "args", ")", ":", "\n", "        ", "model", "=", "super", "(", ")", ".", "build_model", "(", "args", ")", "\n", "\n", "for", "target", "in", "self", ".", "targets", ":", "\n", "            ", "if", "target", "not", "in", "model", ".", "supported_targets", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"Unsupported language modeling target: {}\"", ".", "format", "(", "target", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.language_modeling.LanguageModelingTask.load_dataset": [[147, 194], ["language_modeling.LanguageModelingTask.args.data.split", "os.path.join", "fairseq.data.data_utils.load_indexed_dataset", "fairseq.data.TokenBlockDataset", "fairseq.data.MonolingualDataset", "len", "FileNotFoundError", "fairseq.data.TruncateDataset", "language_modeling.LanguageModelingTask.dictionary.pad", "language_modeling.LanguageModelingTask.dictionary.eos", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.load_indexed_dataset", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos"], [")", "\n", "\n", "", "", "return", "model", "\n", "\n", "", "def", "load_dataset", "(", "self", ",", "split", ",", "epoch", "=", "0", ",", "combine", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Load a given dataset split.\n\n        Args:\n            split (str): name of the split (e.g., train, valid, test)\n        \"\"\"", "\n", "paths", "=", "self", ".", "args", ".", "data", ".", "split", "(", "os", ".", "pathsep", ")", "\n", "assert", "len", "(", "paths", ")", ">", "0", "\n", "\n", "data_path", "=", "paths", "[", "epoch", "%", "len", "(", "paths", ")", "]", "\n", "split_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "split", ")", "\n", "\n", "dataset", "=", "data_utils", ".", "load_indexed_dataset", "(", "\n", "split_path", ",", "self", ".", "dictionary", ",", "self", ".", "args", ".", "dataset_impl", ",", "combine", "=", "combine", "\n", ")", "\n", "if", "dataset", "is", "None", ":", "\n", "            ", "raise", "FileNotFoundError", "(", "\n", "\"Dataset not found: {} ({})\"", ".", "format", "(", "split", ",", "split_path", ")", "\n", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "truncate_sequence", ":", "\n", "            ", "dataset", "=", "TruncateDataset", "(", "dataset", ",", "self", ".", "args", ".", "tokens_per_sample", ")", "\n", "\n", "", "dataset", "=", "TokenBlockDataset", "(", "\n", "dataset", ",", "\n", "dataset", ".", "sizes", ",", "\n", "self", ".", "args", ".", "tokens_per_sample", ",", "\n", "pad", "=", "self", ".", "dictionary", ".", "pad", "(", ")", ",", "\n", "eos", "=", "self", ".", "dictionary", ".", "eos", "(", ")", ",", "\n", "break_mode", "=", "self", ".", "args", ".", "sample_break_mode", ",", "\n", "include_targets", "=", "True", ",", "\n", ")", "\n", "\n", "add_eos_for_other_targets", "=", "(", "\n", "self", ".", "args", ".", "sample_break_mode", "is", "not", "None", "\n", "and", "self", ".", "args", ".", "sample_break_mode", "!=", "\"none\"", "\n", ")", "\n", "\n", "self", ".", "datasets", "[", "split", "]", "=", "MonolingualDataset", "(", "\n", "dataset", ",", "\n", "dataset", ".", "sizes", ",", "\n", "self", ".", "dictionary", ",", "\n", "self", ".", "output_dictionary", ",", "\n", "add_eos_for_other_targets", "=", "add_eos_for_other_targets", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.language_modeling.LanguageModelingTask.build_dataset_for_inference": [[196, 232], ["fairseq.data.TokenBlockDataset", "fairseq.data.PrependTokenDataset", "fairseq.data.NestedDictionaryDataset", "fairseq.data.StripTokenDataset", "language_modeling.LanguageModelingTask.source_dictionary.pad", "language_modeling.LanguageModelingTask.source_dictionary.eos", "language_modeling.LanguageModelingTask.source_dictionary.eos", "fairseq.data.IdDataset", "fairseq.data.PadDataset", "getattr", "language_modeling.LanguageModelingTask.source_dictionary.bos", "language_modeling.LanguageModelingTask.source_dictionary.eos", "fairseq.data.PadDataset", "fairseq.data.NumelDataset", "numpy.array", "language_modeling.LanguageModelingTask.source_dictionary.pad", "language_modeling.LanguageModelingTask.source_dictionary.pad"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.bos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad"], ["targets", "=", "self", ".", "targets", ",", "\n", "add_bos_token", "=", "self", ".", "args", ".", "add_bos_token", ",", "\n", ")", "\n", "\n", "", "def", "build_dataset_for_inference", "(", "self", ",", "src_tokens", ",", "src_lengths", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Generate batches for inference. We prepend an eos token to src_tokens\n        (or bos if `--add-bos-token` is set) and we append an eos to target.\n        This is convenient both for generation with a prefix and LM scoring.\n        \"\"\"", "\n", "tgt_dataset", "=", "TokenBlockDataset", "(", "\n", "src_tokens", ",", "\n", "src_lengths", ",", "\n", "block_size", "=", "None", ",", "# ignored for \"eos\" break mode", "\n", "pad", "=", "self", ".", "source_dictionary", ".", "pad", "(", ")", ",", "\n", "eos", "=", "self", ".", "source_dictionary", ".", "eos", "(", ")", ",", "\n", "break_mode", "=", "\"eos\"", ",", "\n", ")", "\n", "src_dataset", "=", "PrependTokenDataset", "(", "\n", "StripTokenDataset", "(", "\n", "tgt_dataset", ",", "\n", "# remove eos from (end of) target sequence", "\n", "self", ".", "source_dictionary", ".", "eos", "(", ")", ",", "\n", ")", ",", "\n", "token", "=", "(", "\n", "self", ".", "source_dictionary", ".", "bos", "(", ")", "\n", "if", "getattr", "(", "self", ".", "args", ",", "\"add_bos_token\"", ",", "False", ")", "\n", "else", "self", ".", "source_dictionary", ".", "eos", "(", ")", "\n", ")", ",", "\n", ")", "\n", "return", "NestedDictionaryDataset", "(", "\n", "{", "\n", "\"id\"", ":", "IdDataset", "(", ")", ",", "\n", "\"net_input\"", ":", "{", "\n", "\"src_tokens\"", ":", "PadDataset", "(", "src_dataset", ",", "pad_idx", "=", "self", ".", "source_dictionary", ".", "pad", "(", ")", ",", "left_pad", "=", "False", ")", ",", "\n", "\"src_lengths\"", ":", "NumelDataset", "(", "src_dataset", ",", "reduce", "=", "False", ")", ",", "\n", "}", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.language_modeling.LanguageModelingTask.inference_step": [[234, 251], ["torch.no_grad", "getattr", "generator.generate", "language_modeling.LanguageModelingTask.source_dictionary.bos", "language_modeling.LanguageModelingTask.source_dictionary.eos", "[].nelement", "prefix_tokens[].eq().all", "prefix_tokens[].eq"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.hub_interface.BARTHubInterface.generate", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.bos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos"], ["}", ",", "\n", "sizes", "=", "[", "np", ".", "array", "(", "src_lengths", ")", "]", ",", "\n", ")", "\n", "\n", "", "def", "inference_step", "(", "self", ",", "generator", ",", "models", ",", "sample", ",", "prefix_tokens", "=", "None", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Generation will always be conditioned on bos_token", "\n", "            ", "if", "getattr", "(", "self", ".", "args", ",", "\"add_bos_token\"", ",", "False", ")", ":", "\n", "                ", "bos_token", "=", "self", ".", "source_dictionary", ".", "bos", "(", ")", "\n", "", "else", ":", "\n", "                ", "bos_token", "=", "self", ".", "source_dictionary", ".", "eos", "(", ")", "\n", "\n", "# SequenceGenerator doesn't use src_tokens directly, we need to", "\n", "# pass the `prefix_tokens` argument instead", "\n", "", "if", "prefix_tokens", "is", "None", "and", "sample", "[", "\"net_input\"", "]", "[", "\"src_tokens\"", "]", ".", "nelement", "(", ")", ":", "\n", "                ", "prefix_tokens", "=", "sample", "[", "\"net_input\"", "]", "[", "\"src_tokens\"", "]", "\n", "if", "prefix_tokens", "[", ":", ",", "0", "]", ".", "eq", "(", "bos_token", ")", ".", "all", "(", ")", ":", "\n", "                    ", "prefix_tokens", "=", "prefix_tokens", "[", ":", ",", "1", ":", "]", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.language_modeling.LanguageModelingTask.source_dictionary": [[253, 258], ["None"], "methods", ["None"], ["", "", "return", "generator", ".", "generate", "(", "\n", "models", ",", "sample", ",", "prefix_tokens", "=", "prefix_tokens", ",", "bos_token", "=", "bos_token", ",", "\n", ")", "\n", "\n", "", "", "@", "property", "\n", "def", "source_dictionary", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.language_modeling.LanguageModelingTask.target_dictionary": [[259, 264], ["None"], "methods", ["None"], ["        ", "\"\"\"Return the :class:`~fairseq.data.Dictionary` for the language\n        model.\"\"\"", "\n", "return", "self", ".", "dictionary", "\n", "\n", "", "@", "property", "\n", "def", "target_dictionary", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.translation_from_pretrained_xlm.TranslationFromPretrainedXLMTask.load_dictionary": [[24, 32], ["fairseq.data.legacy.masked_lm_dictionary.MaskedLMDictionary.load"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.load"], ["@", "classmethod", "\n", "def", "load_dictionary", "(", "cls", ",", "filename", ")", ":", "\n", "        ", "\"\"\"Load the masked LM dictionary from the filename\n\n        Args:\n            filename (str): the filename\n        \"\"\"", "\n", "return", "MaskedLMDictionary", ".", "load", "(", "filename", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.denoising.DenoisingTask.add_args": [[28, 83], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["\n", "\n", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add task-specific arguments to the parser.\"\"\"", "\n", "parser", ".", "add_argument", "(", "'data'", ",", "help", "=", "'path to data directory'", ")", "\n", "parser", ".", "add_argument", "(", "'--tokens-per-sample'", ",", "default", "=", "512", ",", "type", "=", "int", ",", "\n", "help", "=", "'max number of total tokens over all segments'", "\n", "' per sample for dataset'", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--sample-break-mode'", ",", "default", "=", "\"complete_doc\"", ",", "type", "=", "str", ",", "\n", "help", "=", "'mode for breaking sentence'", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--mask'", ",", "default", "=", "0.0", ",", "type", "=", "float", ",", "\n", "help", "=", "'fraction of words/subwords that will be masked'", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--mask-random'", ",", "default", "=", "0.0", ",", "type", "=", "float", ",", "\n", "help", "=", "'instead of using [MASK], use random token this often'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--insert'", ",", "default", "=", "0.0", ",", "type", "=", "float", ",", "\n", "help", "=", "'insert this percentage of additional random tokens'", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--permute'", ",", "default", "=", "0.0", ",", "type", "=", "float", ",", "\n", "help", "=", "'take this proportion of subwords and permute them'", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--rotate'", ",", "default", "=", "0.5", ",", "type", "=", "float", ",", "\n", "help", "=", "'rotate this proportion of inputs'", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--poisson-lambda'", ",", "default", "=", "3.0", ",", "type", "=", "float", ",", "\n", "help", "=", "'randomly shuffle sentences for this proportion of inputs'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--permute-sentences'", ",", "default", "=", "0.0", ",", "type", "=", "float", ",", "\n", "help", "=", "'shuffle this proportion of sentences in all inputs'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--mask-length'", ",", "default", "=", "\"subword\"", ",", "type", "=", "str", ",", "\n", "choices", "=", "[", "'subword'", ",", "'word'", ",", "'span-poisson'", "]", ",", "\n", "help", "=", "'mask length to choose'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--replace-length'", ",", "default", "=", "-", "1", ",", "type", "=", "int", ",", "\n", "help", "=", "'when masking N tokens, replace with 0, 1, or N tokens (use -1 for N)'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--max-source-positions'", ",", "default", "=", "1024", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'max number of tokens in the source sequence'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.denoising.DenoisingTask.__init__": [[85, 92], ["FairseqTask.__init__", "denoising.DenoisingTask.dictionary.add_symbol"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol"], ["help", "=", "'max number of tokens in the target sequence'", "\n", ")", "\n", "\n", "", "def", "__init__", "(", "self", ",", "args", ",", "dictionary", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "self", ".", "dictionary", "=", "dictionary", "\n", "self", ".", "seed", "=", "args", ".", "seed", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.denoising.DenoisingTask.setup_task": [[93, 102], ["fairseq.data.Dictionary.load", "print", "cls", "os.path.join", "hasattr", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.load", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dictionary.BertDictionary.cls"], ["# add mask token", "\n", "self", ".", "mask_idx", "=", "self", ".", "dictionary", ".", "add_symbol", "(", "'<mask>'", ")", "\n", "\n", "", "@", "classmethod", "\n", "def", "setup_task", "(", "cls", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Setup the task.\n        \"\"\"", "\n", "dictionary", "=", "Dictionary", ".", "load", "(", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'dict.txt'", ")", ")", "\n", "logger", ".", "info", "(", "'dictionary: {} types'", ".", "format", "(", "len", "(", "dictionary", ")", ")", ")", "\n", "if", "not", "hasattr", "(", "args", ",", "'shuffle_instance'", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.denoising.DenoisingTask.load_dataset": [[103, 153], ["denoising.DenoisingTask.args.data.split", "os.path.join", "fairseq.data.data_utils.load_indexed_dataset", "fairseq.data.StripTokenDataset", "fairseq.data.TokenBlockDataset", "fairseq.data.PrependTokenDataset", "fairseq.data.AppendTokenDataset", "fairseq.data.DenoisingDataset", "print", "len", "FileNotFoundError", "denoising.DenoisingTask.dictionary.eos", "denoising.DenoisingTask.source_dictionary.bos", "denoising.DenoisingTask.source_dictionary.eos", "fairseq.data.encoders.utils.get_whole_word_mask", "denoising.DenoisingTask.dictionary.pad", "denoising.DenoisingTask.dictionary.eos", "len", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.load_indexed_dataset", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.bos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.utils.get_whole_word_mask", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos"], ["            ", "args", ".", "shuffle_instance", "=", "False", "\n", "", "return", "cls", "(", "args", ",", "dictionary", ")", "\n", "\n", "", "def", "load_dataset", "(", "self", ",", "split", ",", "epoch", "=", "0", ",", "combine", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Load a given dataset split.\n\n        Args:\n            split (str): name of the split (e.g., train, valid, test)\n        \"\"\"", "\n", "\n", "paths", "=", "self", ".", "args", ".", "data", ".", "split", "(", "os", ".", "pathsep", ")", "\n", "assert", "len", "(", "paths", ")", ">", "0", "\n", "data_path", "=", "paths", "[", "epoch", "%", "len", "(", "paths", ")", "]", "\n", "split_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "split", ")", "\n", "\n", "dataset", "=", "data_utils", ".", "load_indexed_dataset", "(", "\n", "split_path", ",", "\n", "self", ".", "dictionary", ",", "\n", "self", ".", "args", ".", "dataset_impl", ",", "\n", "combine", "=", "combine", ",", "\n", ")", "\n", "if", "dataset", "is", "None", ":", "\n", "            ", "raise", "FileNotFoundError", "(", "'Dataset not found: {} ({})'", ".", "format", "(", "split", ",", "split_path", ")", ")", "\n", "\n", "", "dataset", "=", "StripTokenDataset", "(", "dataset", ",", "self", ".", "dictionary", ".", "eos", "(", ")", ")", "\n", "\n", "# create continuous blocks of tokens", "\n", "dataset", "=", "TokenBlockDataset", "(", "\n", "dataset", ",", "\n", "dataset", ".", "sizes", ",", "\n", "self", ".", "args", ".", "tokens_per_sample", "-", "2", ",", "# one less for <s> and one for </s>", "\n", "pad", "=", "self", ".", "dictionary", ".", "pad", "(", ")", ",", "\n", "eos", "=", "self", ".", "dictionary", ".", "eos", "(", ")", ",", "\n", "break_mode", "=", "self", ".", "args", ".", "sample_break_mode", ",", "\n", "document_sep_len", "=", "0", "\n", ")", "\n", "\n", "# prepend beginning-of-sentence token (<s>, equiv. to [CLS] in BERT)", "\n", "dataset", "=", "PrependTokenDataset", "(", "dataset", ",", "self", ".", "source_dictionary", ".", "bos", "(", ")", ")", "\n", "dataset", "=", "AppendTokenDataset", "(", "dataset", ",", "self", ".", "source_dictionary", ".", "eos", "(", ")", ")", "\n", "\n", "mask_whole_words", "=", "get_whole_word_mask", "(", "self", ".", "args", ",", "self", ".", "source_dictionary", ")", "if", "self", ".", "args", ".", "mask_length", "!=", "'subword'", "else", "None", "\n", "\n", "self", ".", "datasets", "[", "split", "]", "=", "DenoisingDataset", "(", "\n", "dataset", ",", "dataset", ".", "sizes", ",", "self", ".", "dictionary", ",", "self", ".", "mask_idx", ",", "\n", "mask_whole_words", ",", "shuffle", "=", "self", ".", "args", ".", "shuffle_instance", ",", "\n", "seed", "=", "self", ".", "seed", ",", "args", "=", "self", ".", "args", "\n", ")", "\n", "logger", ".", "info", "(", "\n", "\"Split: {0}, Loaded {1} samples of denoising_dataset\"", ".", "format", "(", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.denoising.DenoisingTask.max_positions": [[156, 159], ["None"], "methods", ["None"], [")", "\n", ")", "\n", "\n", "", "def", "max_positions", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.denoising.DenoisingTask.source_dictionary": [[160, 164], ["None"], "methods", ["None"], ["        ", "\"\"\"Return the max sentence length allowed by the task.\"\"\"", "\n", "return", "(", "self", ".", "args", ".", "max_source_positions", ",", "self", ".", "args", ".", "max_target_positions", ")", "\n", "\n", "", "@", "property", "\n", "def", "source_dictionary", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.denoising.DenoisingTask.target_dictionary": [[165, 169], ["None"], "methods", ["None"], ["        ", "\"\"\"Return the source :class:`~fairseq.data.Dictionary`.\"\"\"", "\n", "return", "self", ".", "dictionary", "\n", "\n", "", "@", "property", "\n", "def", "target_dictionary", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.masked_lm.MaskedLMTask.add_args": [[31, 56], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["@", "register_task", "(", "'masked_lm'", ")", "\n", "class", "MaskedLMTask", "(", "FairseqTask", ")", ":", "\n", "    ", "\"\"\"Task for training masked language models (e.g., BERT, RoBERTa).\"\"\"", "\n", "\n", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add task-specific arguments to the parser.\"\"\"", "\n", "parser", ".", "add_argument", "(", "'data'", ",", "help", "=", "'colon separated path to data directories list, \\\n                            will be iterated upon during epochs in round-robin manner'", ")", "\n", "parser", ".", "add_argument", "(", "'--sample-break-mode'", ",", "default", "=", "'complete'", ",", "\n", "choices", "=", "[", "'none'", ",", "'complete'", ",", "'complete_doc'", ",", "'eos'", "]", ",", "\n", "help", "=", "'If omitted or \"none\", fills each sample with tokens-per-sample '", "\n", "'tokens. If set to \"complete\", splits samples only at the end '", "\n", "'of sentence, but may include multiple sentences per sample. '", "\n", "'\"complete_doc\" is similar but respects doc boundaries. '", "\n", "'If set to \"eos\", includes only one sentence per sample.'", ")", "\n", "parser", ".", "add_argument", "(", "'--tokens-per-sample'", ",", "default", "=", "512", ",", "type", "=", "int", ",", "\n", "help", "=", "'max number of total tokens over all segments '", "\n", "'per sample for BERT dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--mask-prob'", ",", "default", "=", "0.15", ",", "type", "=", "float", ",", "\n", "help", "=", "'probability of replacing a token with mask'", ")", "\n", "parser", ".", "add_argument", "(", "'--leave-unmasked-prob'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "\n", "help", "=", "'probability that a masked token is unmasked'", ")", "\n", "parser", ".", "add_argument", "(", "'--random-token-prob'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "\n", "help", "=", "'probability of replacing a token with a random token'", ")", "\n", "parser", ".", "add_argument", "(", "'--freq-weighted-replacement'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.masked_lm.MaskedLMTask.__init__": [[57, 64], ["fairseq.tasks.FairseqTask.__init__", "dictionary.add_symbol"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol"], ["help", "=", "'sample random replacement words based on word frequencies'", ")", "\n", "parser", ".", "add_argument", "(", "'--mask-whole-words'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'mask whole words; you may also want to set --bpe'", ")", "\n", "\n", "", "def", "__init__", "(", "self", ",", "args", ",", "dictionary", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "self", ".", "dictionary", "=", "dictionary", "\n", "self", ".", "seed", "=", "args", ".", "seed", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.masked_lm.MaskedLMTask.setup_task": [[65, 72], ["args.data.split", "fairseq.data.Dictionary.load", "print", "cls", "len", "os.path.join", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.load", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dictionary.BertDictionary.cls"], ["\n", "# add mask token", "\n", "self", ".", "mask_idx", "=", "dictionary", ".", "add_symbol", "(", "'<mask>'", ")", "\n", "\n", "", "@", "classmethod", "\n", "def", "setup_task", "(", "cls", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "paths", "=", "args", ".", "data", ".", "split", "(", "os", ".", "pathsep", ")", "\n", "assert", "len", "(", "paths", ")", ">", "0", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.masked_lm.MaskedLMTask.load_dataset": [[73, 152], ["masked_lm.MaskedLMTask.args.data.split", "os.path.join", "fairseq.data.data_utils.load_indexed_dataset", "fairseq.data.TokenBlockDataset", "print", "fairseq.data.PrependTokenDataset", "fairseq.data.MaskTokensDataset.apply_mask", "fairseq.data.SortDataset", "len", "FileNotFoundError", "masked_lm.MaskedLMTask.source_dictionary.bos", "fairseq.data.encoders.utils.get_whole_word_mask", "fairseq.data.data_utils.numpy_seed", "numpy.random.permutation", "fairseq.data.NestedDictionaryDataset", "masked_lm.MaskedLMTask.source_dictionary.pad", "masked_lm.MaskedLMTask.source_dictionary.eos", "len", "masked_lm.MaskedLMTask.source_dictionary.pad", "len", "len", "fairseq.data.IdDataset", "fairseq.data.PadDataset", "fairseq.data.NumSamplesDataset", "fairseq.data.NumelDataset", "fairseq.data.PadDataset", "fairseq.data.NumelDataset", "masked_lm.MaskedLMTask.source_dictionary.pad", "masked_lm.MaskedLMTask.source_dictionary.pad"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.load_indexed_dataset", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.mask_tokens_dataset.MaskTokensDataset.apply_mask", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.bos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.utils.get_whole_word_mask", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.numpy_seed", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad"], ["dictionary", "=", "Dictionary", ".", "load", "(", "os", ".", "path", ".", "join", "(", "paths", "[", "0", "]", ",", "'dict.txt'", ")", ")", "\n", "logger", ".", "info", "(", "'dictionary: {} types'", ".", "format", "(", "len", "(", "dictionary", ")", ")", ")", "\n", "return", "cls", "(", "args", ",", "dictionary", ")", "\n", "\n", "", "def", "load_dataset", "(", "self", ",", "split", ",", "epoch", "=", "0", ",", "combine", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Load a given dataset split.\n\n        Args:\n            split (str): name of the split (e.g., train, valid, test)\n        \"\"\"", "\n", "paths", "=", "self", ".", "args", ".", "data", ".", "split", "(", "os", ".", "pathsep", ")", "\n", "assert", "len", "(", "paths", ")", ">", "0", "\n", "data_path", "=", "paths", "[", "epoch", "%", "len", "(", "paths", ")", "]", "\n", "split_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "split", ")", "\n", "\n", "dataset", "=", "data_utils", ".", "load_indexed_dataset", "(", "\n", "split_path", ",", "\n", "self", ".", "source_dictionary", ",", "\n", "self", ".", "args", ".", "dataset_impl", ",", "\n", "combine", "=", "combine", ",", "\n", ")", "\n", "if", "dataset", "is", "None", ":", "\n", "            ", "raise", "FileNotFoundError", "(", "'Dataset not found: {} ({})'", ".", "format", "(", "split", ",", "split_path", ")", ")", "\n", "\n", "# create continuous blocks of tokens", "\n", "", "dataset", "=", "TokenBlockDataset", "(", "\n", "dataset", ",", "\n", "dataset", ".", "sizes", ",", "\n", "self", ".", "args", ".", "tokens_per_sample", "-", "1", ",", "# one less for <s>", "\n", "pad", "=", "self", ".", "source_dictionary", ".", "pad", "(", ")", ",", "\n", "eos", "=", "self", ".", "source_dictionary", ".", "eos", "(", ")", ",", "\n", "break_mode", "=", "self", ".", "args", ".", "sample_break_mode", ",", "\n", ")", "\n", "logger", ".", "info", "(", "'loaded {} blocks from: {}'", ".", "format", "(", "len", "(", "dataset", ")", ",", "split_path", ")", ")", "\n", "\n", "# prepend beginning-of-sentence token (<s>, equiv. to [CLS] in BERT)", "\n", "dataset", "=", "PrependTokenDataset", "(", "dataset", ",", "self", ".", "source_dictionary", ".", "bos", "(", ")", ")", "\n", "\n", "# create masked input and targets", "\n", "mask_whole_words", "=", "get_whole_word_mask", "(", "self", ".", "args", ",", "self", ".", "source_dictionary", ")", "if", "self", ".", "args", ".", "mask_whole_words", "else", "None", "\n", "\n", "src_dataset", ",", "tgt_dataset", "=", "MaskTokensDataset", ".", "apply_mask", "(", "\n", "dataset", ",", "\n", "self", ".", "source_dictionary", ",", "\n", "pad_idx", "=", "self", ".", "source_dictionary", ".", "pad", "(", ")", ",", "\n", "mask_idx", "=", "self", ".", "mask_idx", ",", "\n", "seed", "=", "self", ".", "args", ".", "seed", ",", "\n", "mask_prob", "=", "self", ".", "args", ".", "mask_prob", ",", "\n", "leave_unmasked_prob", "=", "self", ".", "args", ".", "leave_unmasked_prob", ",", "\n", "random_token_prob", "=", "self", ".", "args", ".", "random_token_prob", ",", "\n", "freq_weighted_replacement", "=", "self", ".", "args", ".", "freq_weighted_replacement", ",", "\n", "mask_whole_words", "=", "mask_whole_words", ",", "\n", ")", "\n", "\n", "with", "data_utils", ".", "numpy_seed", "(", "self", ".", "args", ".", "seed", "+", "epoch", ")", ":", "\n", "            ", "shuffle", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "src_dataset", ")", ")", "\n", "\n", "", "self", ".", "datasets", "[", "split", "]", "=", "SortDataset", "(", "\n", "NestedDictionaryDataset", "(", "\n", "{", "\n", "'id'", ":", "IdDataset", "(", ")", ",", "\n", "'net_input'", ":", "{", "\n", "'src_tokens'", ":", "PadDataset", "(", "\n", "src_dataset", ",", "\n", "pad_idx", "=", "self", ".", "source_dictionary", ".", "pad", "(", ")", ",", "\n", "left_pad", "=", "False", ",", "\n", ")", ",", "\n", "'src_lengths'", ":", "NumelDataset", "(", "src_dataset", ",", "reduce", "=", "False", ")", ",", "\n", "}", ",", "\n", "'target'", ":", "PadDataset", "(", "\n", "tgt_dataset", ",", "\n", "pad_idx", "=", "self", ".", "source_dictionary", ".", "pad", "(", ")", ",", "\n", "left_pad", "=", "False", ",", "\n", ")", ",", "\n", "'nsentences'", ":", "NumSamplesDataset", "(", ")", ",", "\n", "'ntokens'", ":", "NumelDataset", "(", "src_dataset", ",", "reduce", "=", "True", ")", ",", "\n", "}", ",", "\n", "sizes", "=", "[", "src_dataset", ".", "sizes", "]", ",", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.masked_lm.MaskedLMTask.build_dataset_for_inference": [[155, 182], ["fairseq.data.PadDataset", "fairseq.data.PrependTokenDataset", "fairseq.data.NestedDictionaryDataset", "fairseq.data.TokenBlockDataset", "masked_lm.MaskedLMTask.source_dictionary.bos", "fairseq.data.SortDataset", "masked_lm.MaskedLMTask.source_dictionary.pad", "fairseq.data.IdDataset", "masked_lm.MaskedLMTask.source_dictionary.pad", "masked_lm.MaskedLMTask.source_dictionary.eos", "fairseq.data.NumelDataset"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.bos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos"], ["src_dataset", ".", "sizes", ",", "\n", "]", ",", "\n", ")", "\n", "\n", "", "def", "build_dataset_for_inference", "(", "self", ",", "src_tokens", ",", "src_lengths", ",", "sort", "=", "True", ")", ":", "\n", "        ", "src_dataset", "=", "PadDataset", "(", "\n", "TokenBlockDataset", "(", "\n", "src_tokens", ",", "\n", "src_lengths", ",", "\n", "self", ".", "args", ".", "tokens_per_sample", "-", "1", ",", "# one less for <s>", "\n", "pad", "=", "self", ".", "source_dictionary", ".", "pad", "(", ")", ",", "\n", "eos", "=", "self", ".", "source_dictionary", ".", "eos", "(", ")", ",", "\n", "break_mode", "=", "'eos'", ",", "\n", ")", ",", "\n", "pad_idx", "=", "self", ".", "source_dictionary", ".", "pad", "(", ")", ",", "\n", "left_pad", "=", "False", ",", "\n", ")", "\n", "src_dataset", "=", "PrependTokenDataset", "(", "src_dataset", ",", "self", ".", "source_dictionary", ".", "bos", "(", ")", ")", "\n", "src_dataset", "=", "NestedDictionaryDataset", "(", "\n", "{", "\n", "'id'", ":", "IdDataset", "(", ")", ",", "\n", "'net_input'", ":", "{", "\n", "'src_tokens'", ":", "src_dataset", ",", "\n", "'src_lengths'", ":", "NumelDataset", "(", "src_dataset", ",", "reduce", "=", "False", ")", ",", "\n", "}", ",", "\n", "}", ",", "\n", "sizes", "=", "src_lengths", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.masked_lm.MaskedLMTask.source_dictionary": [[183, 186], ["None"], "methods", ["None"], ["if", "sort", ":", "\n", "            ", "src_dataset", "=", "SortDataset", "(", "src_dataset", ",", "sort_order", "=", "[", "src_lengths", "]", ")", "\n", "", "return", "src_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.masked_lm.MaskedLMTask.target_dictionary": [[187, 190], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "source_dictionary", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dictionary", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.audio_pretraining.AudioPretrainingTask.add_args": [[18, 28], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add task-specific arguments to the parser.\"\"\"", "\n", "parser", ".", "add_argument", "(", "'data'", ",", "help", "=", "'path to data directory'", ")", "\n", "parser", ".", "add_argument", "(", "'--sample-rate'", ",", "default", "=", "16000", ",", "type", "=", "int", ",", "\n", "help", "=", "'target sample rate. audio files will be up/down sampled to this rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--max-sample-size'", ",", "default", "=", "None", ",", "type", "=", "int", ",", "\n", "help", "=", "'max sample size to crop to for batching. default = min sample length'", ")", "\n", "parser", ".", "add_argument", "(", "'--min-sample-size'", ",", "default", "=", "None", ",", "type", "=", "int", ",", "\n", "help", "=", "'min sample size to crop to for batching. default = same as --max-sample-size'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.audio_pretraining.AudioPretrainingTask.__init__": [[29, 31], ["FairseqTask.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.audio_pretraining.AudioPretrainingTask.setup_task": [[32, 40], ["cls"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dictionary.BertDictionary.cls"], ["", "@", "classmethod", "\n", "def", "setup_task", "(", "cls", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Setup the task (e.g., load dictionaries).\n\n        Args:\n            args (argparse.Namespace): parsed command-line arguments\n        \"\"\"", "\n", "return", "cls", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.audio_pretraining.AudioPretrainingTask.load_dataset": [[41, 53], ["os.path.join", "fairseq.data.FileAudioDataset"], "methods", ["None"], ["", "def", "load_dataset", "(", "self", ",", "split", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Load a given dataset split.\n\n        Args:\n            split (str): name of the split (e.g., train, valid, test)\n        \"\"\"", "\n", "\n", "manifest", "=", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "data", ",", "'{}.tsv'", ".", "format", "(", "split", ")", ")", "\n", "self", ".", "datasets", "[", "split", "]", "=", "FileAudioDataset", "(", "manifest", ",", "\n", "sample_rate", "=", "self", ".", "args", ".", "sample_rate", ",", "\n", "max_sample_size", "=", "self", ".", "args", ".", "max_sample_size", ",", "\n", "min_sample_size", "=", "self", ".", "args", ".", "min_sample_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.audio_pretraining.AudioPretrainingTask.target_dictionary": [[54, 59], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "target_dictionary", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the :class:`~fairseq.data.Dictionary` for the language\n        model.\"\"\"", "\n", "return", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.sentence_ranking.SentenceRankingTask.add_args": [[37, 53], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["\n", "\n", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add task-specific arguments to the parser.\"\"\"", "\n", "parser", ".", "add_argument", "(", "'data'", ",", "metavar", "=", "'FILE'", ",", "\n", "help", "=", "'file prefix for data'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-classes'", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of sentences to be ranked'", ")", "\n", "parser", ".", "add_argument", "(", "'--init-token'", ",", "type", "=", "int", ",", "\n", "help", "=", "'add token at the beginning of each batch item'", ")", "\n", "parser", ".", "add_argument", "(", "'--separator-token'", ",", "type", "=", "int", ",", "\n", "help", "=", "'add separator token between inputs'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-shuffle'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--truncate-sequence'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Truncate sequence to max_positions'", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.sentence_ranking.SentenceRankingTask.__init__": [[54, 57], ["FairseqTask.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["parser", ".", "add_argument", "(", "'--max-option-length'", ",", "type", "=", "int", ",", "\n", "help", "=", "'max length for each option'", ")", "\n", "\n", "", "def", "__init__", "(", "self", ",", "args", ",", "dictionary", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.sentence_ranking.SentenceRankingTask.load_dictionary": [[58, 68], ["fairseq.data.Dictionary.load", "fairseq.data.Dictionary.load.add_symbol"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.load", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol"], ["        ", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "self", ".", "dictionary", "=", "dictionary", "\n", "\n", "", "@", "classmethod", "\n", "def", "load_dictionary", "(", "cls", ",", "args", ",", "filename", ",", "source", "=", "True", ")", ":", "\n", "        ", "\"\"\"Load the dictionary from the filename\n\n        Args:\n            filename (str): the filename\n        \"\"\"", "\n", "dictionary", "=", "Dictionary", ".", "load", "(", "filename", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.sentence_ranking.SentenceRankingTask.setup_task": [[69, 82], ["cls.load_dictionary", "print", "sentence_ranking.SentenceRankingTask", "os.path.join", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.sentence_prediction.SentencePredictionTask.load_dictionary", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], ["dictionary", ".", "add_symbol", "(", "'<mask>'", ")", "\n", "return", "dictionary", "\n", "\n", "", "@", "classmethod", "\n", "def", "setup_task", "(", "cls", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "args", ".", "criterion", "==", "'sentence_ranking'", ",", "'Must set --criterion=sentence_ranking'", "\n", "\n", "# load data dictionary", "\n", "data_dict", "=", "cls", ".", "load_dictionary", "(", "\n", "args", ",", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'input0'", ",", "'dict.txt'", ")", ",", "\n", "source", "=", "True", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.sentence_ranking.SentenceRankingTask.load_dataset": [[83, 172], ["sentence_ranking.SentenceRankingTask.load_dataset.make_dataset"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.make_dataset"], ["logger", ".", "info", "(", "'[input] dictionary: {} types'", ".", "format", "(", "len", "(", "data_dict", ")", ")", ")", "\n", "return", "SentenceRankingTask", "(", "args", ",", "data_dict", ")", "\n", "\n", "", "def", "load_dataset", "(", "self", ",", "split", ",", "combine", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Load a given dataset split (e.g., train, valid, test).\"\"\"", "\n", "\n", "def", "get_path", "(", "type", ",", "split", ")", ":", "\n", "            ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "data", ",", "type", ",", "split", ")", "\n", "\n", "", "def", "make_dataset", "(", "type", ",", "dictionary", ")", ":", "\n", "            ", "split_path", "=", "get_path", "(", "type", ",", "split", ")", "\n", "\n", "dataset", "=", "data_utils", ".", "load_indexed_dataset", "(", "\n", "split_path", ",", "\n", "self", ".", "source_dictionary", ",", "\n", "self", ".", "args", ".", "dataset_impl", ",", "\n", "combine", "=", "combine", ",", "\n", ")", "\n", "return", "dataset", "\n", "\n", "", "input0", "=", "make_dataset", "(", "'input0'", ",", "self", ".", "source_dictionary", ")", "\n", "input_options", "=", "[", "\n", "make_dataset", "(", "\n", "'input{idx}'", ".", "format", "(", "idx", "=", "idx", "+", "1", ")", ",", "\n", "self", ".", "source_dictionary", "\n", ")", "\n", "for", "idx", "in", "range", "(", "self", ".", "args", ".", "num_classes", ")", "\n", "]", "\n", "\n", "if", "self", ".", "args", ".", "separator_token", "is", "not", "None", ":", "\n", "            ", "input0", "=", "PrependTokenDataset", "(", "input0", ",", "self", ".", "args", ".", "separator_token", ")", "\n", "\n", "", "src_tokens", "=", "[", "]", "\n", "for", "input_option", "in", "input_options", ":", "\n", "            ", "if", "self", ".", "args", ".", "init_token", "is", "not", "None", ":", "\n", "                ", "input_option", "=", "PrependTokenDataset", "(", "input_option", ",", "self", ".", "args", ".", "init_token", ")", "\n", "", "if", "self", ".", "args", ".", "max_option_length", "is", "not", "None", ":", "\n", "                ", "input_option", "=", "TruncateDataset", "(", "input_option", ",", "self", ".", "args", ".", "max_option_length", ")", "\n", "", "src_token", "=", "ConcatSentencesDataset", "(", "input_option", ",", "input0", ")", "\n", "if", "self", ".", "args", ".", "truncate_sequence", ":", "\n", "                ", "src_token", "=", "TruncateDataset", "(", "src_token", ",", "self", ".", "args", ".", "max_positions", ")", "\n", "", "src_tokens", ".", "append", "(", "src_token", ")", "\n", "\n", "", "with", "data_utils", ".", "numpy_seed", "(", "self", ".", "args", ".", "seed", ")", ":", "\n", "            ", "shuffle", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "src_tokens", "[", "0", "]", ")", ")", "\n", "\n", "", "dataset", "=", "{", "\n", "'id'", ":", "IdDataset", "(", ")", ",", "\n", "'nsentences'", ":", "NumSamplesDataset", "(", ")", ",", "\n", "'ntokens'", ":", "NumelDataset", "(", "src_tokens", "[", "0", "]", ",", "reduce", "=", "True", ")", ",", "\n", "}", "\n", "\n", "for", "src_token_idx", "in", "range", "(", "len", "(", "src_tokens", ")", ")", ":", "\n", "            ", "dataset", ".", "update", "(", "\n", "{", "\n", "'net_input{idx}'", ".", "format", "(", "idx", "=", "src_token_idx", "+", "1", ")", ":", "{", "\n", "'src_tokens'", ":", "RightPadDataset", "(", "\n", "src_tokens", "[", "src_token_idx", "]", ",", "\n", "pad_idx", "=", "self", ".", "source_dictionary", ".", "pad", "(", ")", ",", "\n", ")", ",", "\n", "'src_lengths'", ":", "NumelDataset", "(", "src_tokens", "[", "src_token_idx", "]", ",", "reduce", "=", "False", ")", ",", "\n", "}", "\n", "}", "\n", ")", "\n", "\n", "", "label_path", "=", "'{}.label'", ".", "format", "(", "get_path", "(", "'label'", ",", "split", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "label_path", ")", ":", "\n", "            ", "with", "open", "(", "label_path", ")", "as", "h", ":", "\n", "                ", "dataset", ".", "update", "(", "\n", "target", "=", "RawLabelDataset", "(", "[", "\n", "int", "(", "x", ".", "strip", "(", ")", ")", "for", "x", "in", "h", ".", "readlines", "(", ")", "\n", "]", ")", "\n", ")", "\n", "\n", "", "", "nested_dataset", "=", "NestedDictionaryDataset", "(", "\n", "dataset", ",", "\n", "sizes", "=", "[", "np", ".", "maximum", ".", "reduce", "(", "[", "src_token", ".", "sizes", "for", "src_token", "in", "src_tokens", "]", ")", "]", ",", "\n", ")", "\n", "\n", "if", "self", ".", "args", ".", "no_shuffle", ":", "\n", "            ", "dataset", "=", "nested_dataset", "\n", "", "else", ":", "\n", "            ", "dataset", "=", "SortDataset", "(", "\n", "nested_dataset", ",", "\n", "# shuffle", "\n", "sort_order", "=", "[", "shuffle", "]", ",", "\n", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Loaded {0} with #samples: {1}\"", ".", "format", "(", "split", ",", "len", "(", "dataset", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.sentence_ranking.SentenceRankingTask.build_model": [[173, 183], ["models.build_model", "models.build_model.register_classification_head", "getattr"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.build_model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.model.BARTModel.register_classification_head"], ["self", ".", "datasets", "[", "split", "]", "=", "dataset", "\n", "return", "self", ".", "datasets", "[", "split", "]", "\n", "\n", "", "def", "build_model", "(", "self", ",", "args", ")", ":", "\n", "        ", "from", "fairseq", "import", "models", "\n", "model", "=", "models", ".", "build_model", "(", "args", ",", "self", ")", "\n", "\n", "model", ".", "register_classification_head", "(", "\n", "getattr", "(", "args", ",", "'ranking_head_name'", ",", "'sentence_classification_head'", ")", ",", "\n", "num_classes", "=", "1", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.sentence_ranking.SentenceRankingTask.max_positions": [[184, 186], ["None"], "methods", ["None"], ["\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.sentence_ranking.SentenceRankingTask.source_dictionary": [[187, 190], ["None"], "methods", ["None"], ["", "def", "max_positions", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "args", ".", "max_positions", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.sentence_ranking.SentenceRankingTask.target_dictionary": [[191, 194], ["None"], "methods", ["None"], ["def", "source_dictionary", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dictionary", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.__init__.setup_task": [[16, 18], ["TASK_REGISTRY[].setup_task"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyLMTask.setup_task"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.__init__.register_task": [[20, 54], ["TASK_CLASS_NAMES.add", "ValueError", "issubclass", "ValueError", "ValueError"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.eval_lm.WordStat.add"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.__init__.get_task": [[75, 77], ["None"], "function", ["None"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.sentence_prediction.SentencePredictionTask.add_args": [[40, 57], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["\n", "\n", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add task-specific arguments to the parser.\"\"\"", "\n", "parser", ".", "add_argument", "(", "'data'", ",", "metavar", "=", "'FILE'", ",", "\n", "help", "=", "'file prefix for data'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-classes'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "\n", "help", "=", "'number of classes'", ")", "\n", "parser", ".", "add_argument", "(", "'--init-token'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "'add token at the beginning of each batch item'", ")", "\n", "parser", ".", "add_argument", "(", "'--separator-token'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "'add separator token between inputs'", ")", "\n", "parser", ".", "add_argument", "(", "'--regression-target'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--no-shuffle'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--truncate-sequence'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'truncate sequence to max-positions'", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.sentence_prediction.SentencePredictionTask.__init__": [[58, 70], ["FairseqTask.__init__", "hasattr"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["parser", ".", "add_argument", "(", "'--add-prev-output-tokens'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'add prev_output_tokens to sample, used for encoder-decoder arch'", ")", "\n", "\n", "", "def", "__init__", "(", "self", ",", "args", ",", "data_dictionary", ",", "label_dictionary", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "self", ".", "dictionary", "=", "data_dictionary", "\n", "self", ".", "_label_dictionary", "=", "label_dictionary", "\n", "if", "not", "hasattr", "(", "args", ",", "'max_positions'", ")", ":", "\n", "            ", "self", ".", "_max_positions", "=", "(", "\n", "args", ".", "max_source_positions", ",", "\n", "args", ".", "max_target_positions", ",", "\n", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.sentence_prediction.SentencePredictionTask.load_dictionary": [[71, 81], ["fairseq.data.Dictionary.load", "fairseq.data.Dictionary.load.add_symbol"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.load", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol"], ["            ", "self", ".", "_max_positions", "=", "args", ".", "max_positions", "\n", "", "args", ".", "tokens_per_sample", "=", "self", ".", "_max_positions", "\n", "\n", "", "@", "classmethod", "\n", "def", "load_dictionary", "(", "cls", ",", "args", ",", "filename", ",", "source", "=", "True", ")", ":", "\n", "        ", "\"\"\"Load the dictionary from the filename\n\n        Args:\n            filename (str): the filename\n        \"\"\"", "\n", "dictionary", "=", "Dictionary", ".", "load", "(", "filename", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.sentence_prediction.SentencePredictionTask.setup_task": [[82, 106], ["cls.load_dictionary", "print", "sentence_prediction.SentencePredictionTask", "os.path.join", "cls.load_dictionary", "print", "len", "os.path.join", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.sentence_prediction.SentencePredictionTask.load_dictionary", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.sentence_prediction.SentencePredictionTask.load_dictionary", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], ["dictionary", ".", "add_symbol", "(", "'<mask>'", ")", "\n", "return", "dictionary", "\n", "\n", "", "@", "classmethod", "\n", "def", "setup_task", "(", "cls", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "args", ".", "num_classes", ">", "0", ",", "'Must set --num-classes'", "\n", "\n", "# load data dictionary", "\n", "data_dict", "=", "cls", ".", "load_dictionary", "(", "\n", "args", ",", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'input0'", ",", "'dict.txt'", ")", ",", "\n", "source", "=", "True", ",", "\n", ")", "\n", "logger", ".", "info", "(", "'[input] dictionary: {} types'", ".", "format", "(", "len", "(", "data_dict", ")", ")", ")", "\n", "\n", "label_dict", "=", "None", "\n", "if", "not", "args", ".", "regression_target", ":", "\n", "# load label dictionary", "\n", "            ", "label_dict", "=", "cls", ".", "load_dictionary", "(", "\n", "args", ",", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'label'", ",", "'dict.txt'", ")", ",", "\n", "source", "=", "False", ",", "\n", ")", "\n", "logger", ".", "info", "(", "'[label] dictionary: {} types'", ".", "format", "(", "len", "(", "label_dict", ")", ")", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.sentence_prediction.SentencePredictionTask.load_dataset": [[107, 205], ["sentence_prediction.SentencePredictionTask.load_dataset.make_dataset"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.make_dataset"], ["            ", "label_dict", "=", "data_dict", "\n", "", "return", "SentencePredictionTask", "(", "args", ",", "data_dict", ",", "label_dict", ")", "\n", "\n", "", "def", "load_dataset", "(", "self", ",", "split", ",", "combine", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Load a given dataset split (e.g., train, valid, test).\"\"\"", "\n", "def", "get_path", "(", "type", ",", "split", ")", ":", "\n", "            ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "data", ",", "type", ",", "split", ")", "\n", "\n", "", "def", "make_dataset", "(", "type", ",", "dictionary", ")", ":", "\n", "            ", "split_path", "=", "get_path", "(", "type", ",", "split", ")", "\n", "\n", "dataset", "=", "data_utils", ".", "load_indexed_dataset", "(", "\n", "split_path", ",", "\n", "dictionary", ",", "\n", "self", ".", "args", ".", "dataset_impl", ",", "\n", "combine", "=", "combine", ",", "\n", ")", "\n", "return", "dataset", "\n", "\n", "", "input0", "=", "make_dataset", "(", "'input0'", ",", "self", ".", "source_dictionary", ")", "\n", "assert", "input0", "is", "not", "None", ",", "'could not find dataset: {}'", ".", "format", "(", "get_path", "(", "type", ",", "split", ")", ")", "\n", "input1", "=", "make_dataset", "(", "'input1'", ",", "self", ".", "source_dictionary", ")", "\n", "\n", "if", "self", ".", "args", ".", "init_token", "is", "not", "None", ":", "\n", "            ", "input0", "=", "PrependTokenDataset", "(", "input0", ",", "self", ".", "args", ".", "init_token", ")", "\n", "\n", "", "if", "input1", "is", "None", ":", "\n", "            ", "src_tokens", "=", "input0", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "args", ".", "separator_token", "is", "not", "None", ":", "\n", "                ", "input1", "=", "PrependTokenDataset", "(", "input1", ",", "self", ".", "args", ".", "separator_token", ")", "\n", "\n", "", "src_tokens", "=", "ConcatSentencesDataset", "(", "input0", ",", "input1", ")", "\n", "\n", "", "with", "data_utils", ".", "numpy_seed", "(", "self", ".", "args", ".", "seed", ")", ":", "\n", "            ", "shuffle", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "src_tokens", ")", ")", "\n", "\n", "", "if", "self", ".", "args", ".", "truncate_sequence", ":", "\n", "            ", "src_tokens", "=", "TruncateDataset", "(", "src_tokens", ",", "self", ".", "args", ".", "max_positions", ")", "\n", "\n", "", "dataset", "=", "{", "\n", "'id'", ":", "IdDataset", "(", ")", ",", "\n", "'net_input'", ":", "{", "\n", "'src_tokens'", ":", "RightPadDataset", "(", "\n", "src_tokens", ",", "\n", "pad_idx", "=", "self", ".", "source_dictionary", ".", "pad", "(", ")", ",", "\n", ")", ",", "\n", "'src_lengths'", ":", "NumelDataset", "(", "src_tokens", ",", "reduce", "=", "False", ")", ",", "\n", "}", ",", "\n", "'nsentences'", ":", "NumSamplesDataset", "(", ")", ",", "\n", "'ntokens'", ":", "NumelDataset", "(", "src_tokens", ",", "reduce", "=", "True", ")", ",", "\n", "}", "\n", "\n", "if", "self", ".", "args", ".", "add_prev_output_tokens", ":", "\n", "            ", "prev_tokens_dataset", "=", "RightPadDataset", "(", "\n", "RollDataset", "(", "src_tokens", ",", "1", ")", ",", "\n", "pad_idx", "=", "self", ".", "dictionary", ".", "pad", "(", ")", ",", "\n", ")", "\n", "dataset", "[", "'net_input'", "]", ".", "update", "(", "\n", "prev_output_tokens", "=", "prev_tokens_dataset", ",", "\n", ")", "\n", "\n", "", "if", "not", "self", ".", "args", ".", "regression_target", ":", "\n", "            ", "label_dataset", "=", "make_dataset", "(", "'label'", ",", "self", ".", "label_dictionary", ")", "\n", "if", "label_dataset", "is", "not", "None", ":", "\n", "                ", "dataset", ".", "update", "(", "\n", "target", "=", "OffsetTokensDataset", "(", "\n", "StripTokenDataset", "(", "\n", "label_dataset", ",", "\n", "id_to_strip", "=", "self", ".", "label_dictionary", ".", "eos", "(", ")", ",", "\n", ")", ",", "\n", "offset", "=", "-", "self", ".", "label_dictionary", ".", "nspecial", ",", "\n", ")", "\n", ")", "\n", "", "", "else", ":", "\n", "            ", "label_path", "=", "\"{0}.label\"", ".", "format", "(", "get_path", "(", "'label'", ",", "split", ")", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "label_path", ")", ":", "\n", "                ", "dataset", ".", "update", "(", "\n", "target", "=", "RawLabelDataset", "(", "[", "\n", "float", "(", "x", ".", "strip", "(", ")", ")", "for", "x", "in", "open", "(", "label_path", ")", ".", "readlines", "(", ")", "\n", "]", ")", "\n", ")", "\n", "\n", "", "", "nested_dataset", "=", "NestedDictionaryDataset", "(", "\n", "dataset", ",", "\n", "sizes", "=", "[", "src_tokens", ".", "sizes", "]", ",", "\n", ")", "\n", "\n", "if", "self", ".", "args", ".", "no_shuffle", ":", "\n", "            ", "dataset", "=", "nested_dataset", "\n", "", "else", ":", "\n", "            ", "dataset", "=", "SortDataset", "(", "\n", "nested_dataset", ",", "\n", "# shuffle", "\n", "sort_order", "=", "[", "shuffle", "]", ",", "\n", ")", "\n", "\n", "", "logger", ".", "info", "(", "\"Loaded {0} with #samples: {1}\"", ".", "format", "(", "split", ",", "len", "(", "dataset", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.sentence_prediction.SentencePredictionTask.build_model": [[206, 216], ["models.build_model", "models.build_model.register_classification_head", "getattr"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.build_model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.model.BARTModel.register_classification_head"], ["self", ".", "datasets", "[", "split", "]", "=", "dataset", "\n", "return", "self", ".", "datasets", "[", "split", "]", "\n", "\n", "", "def", "build_model", "(", "self", ",", "args", ")", ":", "\n", "        ", "from", "fairseq", "import", "models", "\n", "model", "=", "models", ".", "build_model", "(", "args", ",", "self", ")", "\n", "\n", "model", ".", "register_classification_head", "(", "\n", "getattr", "(", "args", ",", "'classification_head_name'", ",", "'sentence_classification_head'", ")", ",", "\n", "num_classes", "=", "self", ".", "args", ".", "num_classes", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.sentence_prediction.SentencePredictionTask.max_positions": [[217, 219], ["None"], "methods", ["None"], ["\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.sentence_prediction.SentencePredictionTask.source_dictionary": [[220, 223], ["None"], "methods", ["None"], ["", "def", "max_positions", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_max_positions", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.sentence_prediction.SentencePredictionTask.target_dictionary": [[224, 227], ["None"], "methods", ["None"], ["def", "source_dictionary", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dictionary", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.sentence_prediction.SentencePredictionTask.label_dictionary": [[228, 231], ["None"], "methods", ["None"], ["def", "target_dictionary", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dictionary", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.translation_moe.TranslationMoETask.add_args": [[38, 55], ["fairseq.tasks.translation.TranslationTask.add_args", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.add_args"], ["@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add task-specific arguments to the parser.\"\"\"", "\n", "# fmt: off", "\n", "TranslationTask", ".", "add_args", "(", "parser", ")", "\n", "parser", ".", "add_argument", "(", "'--method'", ",", "default", "=", "'hMoEup'", ",", "\n", "choices", "=", "[", "'sMoElp'", ",", "'sMoEup'", ",", "'hMoElp'", ",", "'hMoEup'", "]", ")", "\n", "parser", ".", "add_argument", "(", "'--num-experts'", ",", "default", "=", "3", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of experts'", ")", "\n", "parser", ".", "add_argument", "(", "'--mean-pool-gating-network'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use a simple mean-pooling gating network'", ")", "\n", "parser", ".", "add_argument", "(", "'--mean-pool-gating-network-dropout'", ",", "type", "=", "float", ",", "\n", "help", "=", "'dropout for mean-pooling gating network'", ")", "\n", "parser", ".", "add_argument", "(", "'--mean-pool-gating-network-encoder-dim'", ",", "type", "=", "float", ",", "\n", "help", "=", "'encoder output dim for mean-pooling gating network'", ")", "\n", "parser", ".", "add_argument", "(", "'--gen-expert'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "\n", "help", "=", "'which expert to use for generation'", ")", "\n", "# fmt: on", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.translation_moe.TranslationMoETask.__init__": [[57, 82], ["range", "fairseq.tasks.translation.TranslationTask.__init__", "src_dict.add_symbol", "tgt_dict.add_symbol"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol"], ["", "def", "__init__", "(", "self", ",", "args", ",", "src_dict", ",", "tgt_dict", ")", ":", "\n", "        ", "if", "args", ".", "method", "==", "'sMoElp'", ":", "\n", "# soft MoE with learned prior", "\n", "            ", "self", ".", "uniform_prior", "=", "False", "\n", "self", ".", "hard_selection", "=", "False", "\n", "", "elif", "args", ".", "method", "==", "'sMoEup'", ":", "\n", "# soft MoE with uniform prior", "\n", "            ", "self", ".", "uniform_prior", "=", "True", "\n", "self", ".", "hard_selection", "=", "False", "\n", "", "elif", "args", ".", "method", "==", "'hMoElp'", ":", "\n", "# hard MoE with learned prior", "\n", "            ", "self", ".", "uniform_prior", "=", "False", "\n", "self", ".", "hard_selection", "=", "True", "\n", "", "elif", "args", ".", "method", "==", "'hMoEup'", ":", "\n", "# hard MoE with uniform prior", "\n", "            ", "self", ".", "uniform_prior", "=", "True", "\n", "self", ".", "hard_selection", "=", "True", "\n", "\n", "# add indicator tokens for each expert", "\n", "", "for", "i", "in", "range", "(", "args", ".", "num_experts", ")", ":", "\n", "# add to both dictionaries in case we're sharing embeddings", "\n", "            ", "src_dict", ".", "add_symbol", "(", "'<expert_{}>'", ".", "format", "(", "i", ")", ")", "\n", "tgt_dict", ".", "add_symbol", "(", "'<expert_{}>'", ".", "format", "(", "i", ")", ")", "\n", "\n", "", "super", "(", ")", ".", "__init__", "(", "args", ",", "src_dict", ",", "tgt_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.translation_moe.TranslationMoETask.build_model": [[83, 112], ["models.build_model", "hasattr", "getattr", "getattr", "fairseq.modules.MeanPoolGatingNetwork", "ValueError", "getattr", "getattr", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.build_model"], ["", "def", "build_model", "(", "self", ",", "args", ")", ":", "\n", "        ", "from", "fairseq", "import", "models", "\n", "model", "=", "models", ".", "build_model", "(", "args", ",", "self", ")", "\n", "if", "not", "self", ".", "uniform_prior", "and", "not", "hasattr", "(", "model", ",", "'gating_network'", ")", ":", "\n", "            ", "if", "self", ".", "args", ".", "mean_pool_gating_network", ":", "\n", "                ", "if", "getattr", "(", "args", ",", "'mean_pool_gating_network_encoder_dim'", ",", "None", ")", ":", "\n", "                    ", "encoder_dim", "=", "args", ".", "mean_pool_gating_network_encoder_dim", "\n", "", "elif", "getattr", "(", "args", ",", "'encoder_embed_dim'", ",", "None", ")", ":", "\n", "# assume that encoder_embed_dim is the encoder's output dimension", "\n", "                    ", "encoder_dim", "=", "args", ".", "encoder_embed_dim", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "'Must specify --mean-pool-gating-network-encoder-dim'", ")", "\n", "\n", "", "if", "getattr", "(", "args", ",", "'mean_pool_gating_network_dropout'", ",", "None", ")", ":", "\n", "                    ", "dropout", "=", "args", ".", "mean_pool_gating_network_dropout", "\n", "", "elif", "getattr", "(", "args", ",", "'dropout'", ",", "None", ")", ":", "\n", "                    ", "dropout", "=", "args", ".", "dropout", "\n", "", "else", ":", "\n", "                    ", "raise", "ValueError", "(", "'Must specify --mean-pool-gating-network-dropout'", ")", "\n", "\n", "", "model", ".", "gating_network", "=", "modules", ".", "MeanPoolGatingNetwork", "(", "\n", "encoder_dim", ",", "args", ".", "num_experts", ",", "dropout", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "'translation_moe task with learned prior requires the model to '", "\n", "'have a gating network; try using --mean-pool-gating-network'", "\n", ")", "\n", "", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.translation_moe.TranslationMoETask.expert_index": [[113, 115], ["translation_moe.TranslationMoETask.tgt_dict.index"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.index"], ["", "def", "expert_index", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "i", "+", "self", ".", "tgt_dict", ".", "index", "(", "'<expert_0>'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.translation_moe.TranslationMoETask._get_loss": [[116, 186], ["hasattr", "sample[].size", "loss.view.view.sum", "model.decoder", "criterion.compute_loss", "loss.view.view.view", "model.encoder", "fairseq.utils.eval", "translation_moe.TranslationMoETask._get_loss.get_lprob_yz"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqMultiModel.decoder", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.label_smoothed_cross_entropy.LabelSmoothedCrossEntropyCriterion.compute_loss", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqMultiModel.encoder", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval"], ["", "def", "_get_loss", "(", "self", ",", "sample", ",", "model", ",", "criterion", ")", ":", "\n", "        ", "assert", "hasattr", "(", "criterion", ",", "'compute_loss'", ")", ",", "'translation_moe task requires the criterion to implement the compute_loss() method'", "\n", "\n", "k", "=", "self", ".", "args", ".", "num_experts", "\n", "bsz", "=", "sample", "[", "'target'", "]", ".", "size", "(", "0", ")", "\n", "\n", "def", "get_lprob_y", "(", "encoder_out", ",", "prev_output_tokens_k", ")", ":", "\n", "            ", "net_output", "=", "model", ".", "decoder", "(", "\n", "prev_output_tokens", "=", "prev_output_tokens_k", ",", "\n", "encoder_out", "=", "encoder_out", ",", "\n", ")", "\n", "loss", ",", "_", "=", "criterion", ".", "compute_loss", "(", "model", ",", "net_output", ",", "sample", ",", "reduce", "=", "False", ")", "\n", "loss", "=", "loss", ".", "view", "(", "bsz", ",", "-", "1", ")", "\n", "return", "-", "loss", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "# -> B x 1", "\n", "\n", "", "def", "get_lprob_yz", "(", "winners", "=", "None", ")", ":", "\n", "            ", "encoder_out", "=", "model", ".", "encoder", "(", "\n", "src_tokens", "=", "sample", "[", "'net_input'", "]", "[", "'src_tokens'", "]", ",", "\n", "src_lengths", "=", "sample", "[", "'net_input'", "]", "[", "'src_lengths'", "]", ",", "\n", ")", "\n", "\n", "if", "winners", "is", "None", ":", "\n", "                ", "lprob_y", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "k", ")", ":", "\n", "                    ", "prev_output_tokens_k", "=", "sample", "[", "'net_input'", "]", "[", "'prev_output_tokens'", "]", ".", "clone", "(", ")", "\n", "assert", "not", "prev_output_tokens_k", ".", "requires_grad", "\n", "prev_output_tokens_k", "[", ":", ",", "0", "]", "=", "self", ".", "expert_index", "(", "i", ")", "\n", "lprob_y", ".", "append", "(", "get_lprob_y", "(", "encoder_out", ",", "prev_output_tokens_k", ")", ")", "\n", "", "lprob_y", "=", "torch", ".", "cat", "(", "lprob_y", ",", "dim", "=", "1", ")", "# -> B x K", "\n", "", "else", ":", "\n", "                ", "prev_output_tokens_k", "=", "sample", "[", "'net_input'", "]", "[", "'prev_output_tokens'", "]", ".", "clone", "(", ")", "\n", "prev_output_tokens_k", "[", ":", ",", "0", "]", "=", "self", ".", "expert_index", "(", "winners", ")", "\n", "lprob_y", "=", "get_lprob_y", "(", "encoder_out", ",", "prev_output_tokens_k", ")", "# -> B", "\n", "\n", "", "if", "self", ".", "uniform_prior", ":", "\n", "                ", "lprob_yz", "=", "lprob_y", "\n", "", "else", ":", "\n", "                ", "lprob_z", "=", "model", ".", "gating_network", "(", "encoder_out", ")", "# B x K", "\n", "if", "winners", "is", "not", "None", ":", "\n", "                    ", "lprob_z", "=", "lprob_z", ".", "gather", "(", "dim", "=", "1", ",", "index", "=", "winners", ".", "unsqueeze", "(", "-", "1", ")", ")", "\n", "", "lprob_yz", "=", "lprob_y", "+", "lprob_z", ".", "type_as", "(", "lprob_y", ")", "# B x K", "\n", "\n", "", "return", "lprob_yz", "\n", "\n", "# compute responsibilities without dropout", "\n", "", "with", "utils", ".", "eval", "(", "model", ")", ":", "# disable dropout", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "# disable autograd", "\n", "                ", "lprob_yz", "=", "get_lprob_yz", "(", ")", "# B x K", "\n", "prob_z_xy", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "lprob_yz", ",", "dim", "=", "1", ")", "\n", "", "", "assert", "not", "prob_z_xy", ".", "requires_grad", "\n", "\n", "# compute loss with dropout", "\n", "if", "self", ".", "hard_selection", ":", "\n", "            ", "winners", "=", "prob_z_xy", ".", "max", "(", "dim", "=", "1", ")", "[", "1", "]", "\n", "loss", "=", "-", "get_lprob_yz", "(", "winners", ")", "\n", "", "else", ":", "\n", "            ", "lprob_yz", "=", "get_lprob_yz", "(", ")", "# B x K", "\n", "loss", "=", "-", "modules", ".", "LogSumExpMoE", ".", "apply", "(", "lprob_yz", ",", "prob_z_xy", ",", "1", ")", "\n", "\n", "", "loss", "=", "loss", ".", "sum", "(", ")", "\n", "sample_size", "=", "sample", "[", "'target'", "]", ".", "size", "(", "0", ")", "if", "self", ".", "args", ".", "sentence_avg", "else", "sample", "[", "'ntokens'", "]", "\n", "logging_output", "=", "{", "\n", "'loss'", ":", "utils", ".", "item", "(", "loss", ".", "data", ")", ",", "\n", "'ntokens'", ":", "sample", "[", "'ntokens'", "]", ",", "\n", "'nsentences'", ":", "bsz", ",", "\n", "'sample_size'", ":", "sample_size", ",", "\n", "'posterior'", ":", "prob_z_xy", ".", "float", "(", ")", ".", "sum", "(", "dim", "=", "0", ")", ".", "cpu", "(", ")", ",", "\n", "}", "\n", "return", "loss", ",", "sample_size", ",", "logging_output", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.translation_moe.TranslationMoETask.train_step": [[187, 194], ["model.train", "translation_moe.TranslationMoETask._get_loss", "optimizer.backward"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.train.train", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.translation_moe.TranslationMoETask._get_loss", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.dynamicconvFunction.backward"], ["", "def", "train_step", "(", "self", ",", "sample", ",", "model", ",", "criterion", ",", "optimizer", ",", "ignore_grad", "=", "False", ")", ":", "\n", "        ", "model", ".", "train", "(", ")", "\n", "loss", ",", "sample_size", ",", "logging_output", "=", "self", ".", "_get_loss", "(", "sample", ",", "model", ",", "criterion", ")", "\n", "if", "ignore_grad", ":", "\n", "            ", "loss", "*=", "0", "\n", "", "optimizer", ".", "backward", "(", "loss", ")", "\n", "return", "loss", ",", "sample_size", ",", "logging_output", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.translation_moe.TranslationMoETask.valid_step": [[195, 200], ["model.eval", "torch.no_grad", "translation_moe.TranslationMoETask._get_loss"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.translation_moe.TranslationMoETask._get_loss"], ["", "def", "valid_step", "(", "self", ",", "sample", ",", "model", ",", "criterion", ")", ":", "\n", "        ", "model", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "loss", ",", "sample_size", ",", "logging_output", "=", "self", ".", "_get_loss", "(", "sample", ",", "model", ",", "criterion", ")", "\n", "", "return", "loss", ",", "sample_size", ",", "logging_output", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.translation_moe.TranslationMoETask.inference_step": [[201, 209], ["torch.no_grad", "generator.generate", "translation_moe.TranslationMoETask.expert_index"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.hub_interface.BARTHubInterface.generate", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.translation_moe.TranslationMoETask.expert_index"], ["", "def", "inference_step", "(", "self", ",", "generator", ",", "models", ",", "sample", ",", "prefix_tokens", "=", "None", ",", "expert", "=", "None", ")", ":", "\n", "        ", "expert", "=", "expert", "or", "self", ".", "args", ".", "gen_expert", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "return", "generator", ".", "generate", "(", "\n", "models", ",", "\n", "sample", ",", "\n", "prefix_tokens", "=", "prefix_tokens", ",", "\n", "bos_token", "=", "self", ".", "expert_index", "(", "expert", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.translation_moe.TranslationMoETask.reduce_metrics": [[211, 216], ["super().reduce_metrics", "fairseq.metrics.log_scalar", "sum"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.sentence_prediction.SentencePredictionCriterion.reduce_metrics", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_scalar"], ["", "", "def", "reduce_metrics", "(", "self", ",", "logging_outputs", ",", "criterion", ")", ":", "\n", "        ", "super", "(", ")", ".", "reduce_metrics", "(", "logging_outputs", ",", "criterion", ")", "\n", "metrics", ".", "log_scalar", "(", "\n", "'posterior'", ",", "\n", "sum", "(", "log", "[", "'posterior'", "]", "for", "log", "in", "logging_outputs", "if", "'posterior'", "in", "log", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.vggtransformer.VGGTransformerModel.__init__": [[32, 34], ["fairseq.models.FairseqEncoderDecoderModel.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["def", "__init__", "(", "self", ",", "encoder", ",", "decoder", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "encoder", ",", "decoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.vggtransformer.VGGTransformerModel.add_args": [[35, 116], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add model-specific arguments to the parser.\"\"\"", "\n", "parser", ".", "add_argument", "(", "\n", "\"--input-feat-per-channel\"", ",", "\n", "type", "=", "int", ",", "\n", "metavar", "=", "\"N\"", ",", "\n", "help", "=", "\"encoder input dimension per input channel\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--vggblock-enc-config\"", ",", "\n", "type", "=", "str", ",", "\n", "metavar", "=", "\"EXPR\"", ",", "\n", "help", "=", "\"\"\"\n    an array of tuples each containing the configuration of one vggblock:\n    [(out_channels,\n      conv_kernel_size,\n      pooling_kernel_size,\n      num_conv_layers,\n      use_layer_norm), ...])\n            \"\"\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--transformer-enc-config\"", ",", "\n", "type", "=", "str", ",", "\n", "metavar", "=", "\"EXPR\"", ",", "\n", "help", "=", "\"\"\"\"\n    a tuple containing the configuration of the encoder transformer layers\n    configurations:\n    [(input_dim,\n      num_heads,\n      ffn_dim,\n      normalize_before,\n      dropout,\n      attention_dropout,\n      relu_dropout), ...]')\n            \"\"\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--enc-output-dim\"", ",", "\n", "type", "=", "int", ",", "\n", "metavar", "=", "\"N\"", ",", "\n", "help", "=", "\"\"\"\n    encoder output dimension, can be None. If specified, projecting the\n    transformer output to the specified dimension\"\"\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--in-channels\"", ",", "\n", "type", "=", "int", ",", "\n", "metavar", "=", "\"N\"", ",", "\n", "help", "=", "\"number of encoder input channels\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--tgt-embed-dim\"", ",", "\n", "type", "=", "int", ",", "\n", "metavar", "=", "\"N\"", ",", "\n", "help", "=", "\"embedding dimension of the decoder target tokens\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--transformer-dec-config\"", ",", "\n", "type", "=", "str", ",", "\n", "metavar", "=", "\"EXPR\"", ",", "\n", "help", "=", "\"\"\"\n    a tuple containing the configuration of the decoder transformer layers\n    configurations:\n    [(input_dim,\n      num_heads,\n      ffn_dim,\n      normalize_before,\n      dropout,\n      attention_dropout,\n      relu_dropout), ...]\n            \"\"\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--conv-dec-config\"", ",", "\n", "type", "=", "str", ",", "\n", "metavar", "=", "\"EXPR\"", ",", "\n", "help", "=", "\"\"\"\n    an array of tuples for the decoder 1-D convolution config\n        [(out_channels, conv_kernel_size, use_layer_norm), ...]\"\"\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.vggtransformer.VGGTransformerModel.build_encoder": [[118, 126], ["vggtransformer.VGGTransformerEncoder", "eval", "eval"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval"], ["", "@", "classmethod", "\n", "def", "build_encoder", "(", "cls", ",", "args", ",", "task", ")", ":", "\n", "        ", "return", "VGGTransformerEncoder", "(", "\n", "input_feat_per_channel", "=", "args", ".", "input_feat_per_channel", ",", "\n", "vggblock_config", "=", "eval", "(", "args", ".", "vggblock_enc_config", ")", ",", "\n", "transformer_config", "=", "eval", "(", "args", ".", "transformer_enc_config", ")", ",", "\n", "encoder_output_dim", "=", "args", ".", "enc_output_dim", ",", "\n", "in_channels", "=", "args", ".", "in_channels", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.vggtransformer.VGGTransformerModel.build_decoder": [[128, 136], ["vggtransformer.TransformerDecoder", "eval", "eval"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval"], ["", "@", "classmethod", "\n", "def", "build_decoder", "(", "cls", ",", "args", ",", "task", ")", ":", "\n", "        ", "return", "TransformerDecoder", "(", "\n", "dictionary", "=", "task", ".", "target_dictionary", ",", "\n", "embed_dim", "=", "args", ".", "tgt_embed_dim", ",", "\n", "transformer_config", "=", "eval", "(", "args", ".", "transformer_dec_config", ")", ",", "\n", "conv_config", "=", "eval", "(", "args", ".", "conv_dec_config", ")", ",", "\n", "encoder_output_dim", "=", "args", ".", "enc_output_dim", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.vggtransformer.VGGTransformerModel.build_model": [[138, 148], ["vggtransformer.base_architecture", "cls.build_encoder", "cls.build_decoder", "cls"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.base_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.fairseq_nat_model.FairseqNATModel.build_encoder", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.fairseq_nat_model.FairseqNATModel.build_decoder", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dictionary.BertDictionary.cls"], ["", "@", "classmethod", "\n", "def", "build_model", "(", "cls", ",", "args", ",", "task", ")", ":", "\n", "        ", "\"\"\"Build a new model instance.\"\"\"", "\n", "# make sure that all args are properly defaulted", "\n", "# (in case there are any new ones)", "\n", "base_architecture", "(", "args", ")", "\n", "\n", "encoder", "=", "cls", ".", "build_encoder", "(", "args", ",", "task", ")", "\n", "decoder", "=", "cls", ".", "build_decoder", "(", "args", ",", "task", ")", "\n", "return", "cls", "(", "encoder", ",", "decoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.vggtransformer.VGGTransformerModel.get_normalized_probs": [[149, 154], ["super().get_normalized_probs"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.get_normalized_probs"], ["", "def", "get_normalized_probs", "(", "self", ",", "net_output", ",", "log_probs", ",", "sample", "=", "None", ")", ":", "\n", "# net_output['encoder_out'] is a (B, T, D) tensor", "\n", "        ", "lprobs", "=", "super", "(", ")", ".", "get_normalized_probs", "(", "net_output", ",", "log_probs", ",", "sample", ")", "\n", "lprobs", ".", "batch_first", "=", "True", "\n", "return", "lprobs", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.vggtransformer.VGGTransformerEncoder.__init__": [[214, 317], ["fairseq.models.FairseqEncoder.__init__", "torch.ModuleList", "torch.ModuleList", "vggtransformer.VGGTransformerEncoder.infer_conv_output_dim", "vggtransformer.VGGTransformerEncoder.validate_transformer_config", "vggtransformer.VGGTransformerEncoder.parse_transformer_context", "vggtransformer.VGGTransformerEncoder.parse_transformer_sampling", "torch.ModuleList", "torch.ModuleList", "vggtransformer.VGGTransformerEncoder.transformer_layers.append", "range", "vggtransformer.VGGTransformerEncoder.transformer_layers.extend", "len", "enumerate", "len", "vggtransformer.VGGTransformerEncoder.transformer_layers.append", "fairseq.modules.TransformerEncoderLayer", "len", "vggtransformer.VGGTransformerEncoder.transformer_layers.append", "isinstance", "ValueError", "vggtransformer.VGGTransformerEncoder.conv_layers.append", "vggtransformer.Linear", "vggtransformer.prepare_transformer_encoder_params", "vggtransformer.VGGTransformerEncoder.transformer_layers.append", "fairseq.modules.TransformerEncoderLayer", "vggtransformer.Linear", "vggtransformer.LayerNorm", "fairseq.modules.VGGBlock", "vggtransformer.Linear", "vggtransformer.prepare_transformer_encoder_params"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.vggblock.infer_conv_output_dim", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.vggtransformer.VGGTransformerEncoder.validate_transformer_config", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.vggtransformer.VGGTransformerEncoder.parse_transformer_context", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.vggtransformer.VGGTransformerEncoder.parse_transformer_sampling", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.vggtransformer.prepare_transformer_encoder_params", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.layer_norm.LayerNorm", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.vggtransformer.prepare_transformer_encoder_params"], ["def", "__init__", "(", "\n", "self", ",", "\n", "input_feat_per_channel", ",", "\n", "vggblock_config", "=", "DEFAULT_ENC_VGGBLOCK_CONFIG", ",", "\n", "transformer_config", "=", "DEFAULT_ENC_TRANSFORMER_CONFIG", ",", "\n", "encoder_output_dim", "=", "512", ",", "\n", "in_channels", "=", "1", ",", "\n", "transformer_context", "=", "None", ",", "\n", "transformer_sampling", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"constructor for VGGTransformerEncoder\n\n        Args:\n            - input_feat_per_channel: feature dim (not including stacked,\n              just base feature)\n            - in_channel: # input channels (e.g., if stack 8 feature vector\n                together, this is 8)\n            - vggblock_config: configuration of vggblock, see comments on\n                DEFAULT_ENC_VGGBLOCK_CONFIG\n            - transformer_config: configuration of transformer layer, see comments\n                on DEFAULT_ENC_TRANSFORMER_CONFIG\n            - encoder_output_dim: final transformer output embedding dimension\n            - transformer_context: (left, right) if set, self-attention will be focused\n              on (t-left, t+right)\n            - transformer_sampling: an iterable of int, must match with\n              len(transformer_config), transformer_sampling[i] indicates sampling\n              factor for i-th transformer layer, after multihead att and feedfoward\n              part\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "None", ")", "\n", "\n", "self", ".", "num_vggblocks", "=", "0", "\n", "if", "vggblock_config", "is", "not", "None", ":", "\n", "            ", "if", "not", "isinstance", "(", "vggblock_config", ",", "Iterable", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"vggblock_config is not iterable\"", ")", "\n", "", "self", ".", "num_vggblocks", "=", "len", "(", "vggblock_config", ")", "\n", "\n", "", "self", ".", "conv_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "input_dim", "=", "input_feat_per_channel", "\n", "\n", "if", "vggblock_config", "is", "not", "None", ":", "\n", "            ", "for", "_", ",", "config", "in", "enumerate", "(", "vggblock_config", ")", ":", "\n", "                ", "(", "\n", "out_channels", ",", "\n", "conv_kernel_size", ",", "\n", "pooling_kernel_size", ",", "\n", "num_conv_layers", ",", "\n", "layer_norm", ",", "\n", ")", "=", "config", "\n", "self", ".", "conv_layers", ".", "append", "(", "\n", "VGGBlock", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "conv_kernel_size", ",", "\n", "pooling_kernel_size", ",", "\n", "num_conv_layers", ",", "\n", "input_dim", "=", "input_feat_per_channel", ",", "\n", "layer_norm", "=", "layer_norm", ",", "\n", ")", "\n", ")", "\n", "in_channels", "=", "out_channels", "\n", "input_feat_per_channel", "=", "self", ".", "conv_layers", "[", "-", "1", "]", ".", "output_dim", "\n", "\n", "", "", "transformer_input_dim", "=", "self", ".", "infer_conv_output_dim", "(", "\n", "self", ".", "in_channels", ",", "self", ".", "input_dim", "\n", ")", "\n", "# transformer_input_dim is the output dimension of VGG part", "\n", "\n", "self", ".", "validate_transformer_config", "(", "transformer_config", ")", "\n", "self", ".", "transformer_context", "=", "self", ".", "parse_transformer_context", "(", "transformer_context", ")", "\n", "self", ".", "transformer_sampling", "=", "self", ".", "parse_transformer_sampling", "(", "\n", "transformer_sampling", ",", "len", "(", "transformer_config", ")", "\n", ")", "\n", "\n", "self", ".", "transformer_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "\n", "if", "transformer_input_dim", "!=", "transformer_config", "[", "0", "]", "[", "0", "]", ":", "\n", "            ", "self", ".", "transformer_layers", ".", "append", "(", "\n", "Linear", "(", "transformer_input_dim", ",", "transformer_config", "[", "0", "]", "[", "0", "]", ")", "\n", ")", "\n", "", "self", ".", "transformer_layers", ".", "append", "(", "\n", "TransformerEncoderLayer", "(", "\n", "prepare_transformer_encoder_params", "(", "*", "transformer_config", "[", "0", "]", ")", "\n", ")", "\n", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "transformer_config", ")", ")", ":", "\n", "            ", "if", "transformer_config", "[", "i", "-", "1", "]", "[", "0", "]", "!=", "transformer_config", "[", "i", "]", "[", "0", "]", ":", "\n", "                ", "self", ".", "transformer_layers", ".", "append", "(", "\n", "Linear", "(", "transformer_config", "[", "i", "-", "1", "]", "[", "0", "]", ",", "transformer_config", "[", "i", "]", "[", "0", "]", ")", "\n", ")", "\n", "", "self", ".", "transformer_layers", ".", "append", "(", "\n", "TransformerEncoderLayer", "(", "\n", "prepare_transformer_encoder_params", "(", "*", "transformer_config", "[", "i", "]", ")", "\n", ")", "\n", ")", "\n", "\n", "", "self", ".", "encoder_output_dim", "=", "encoder_output_dim", "\n", "self", ".", "transformer_layers", ".", "extend", "(", "\n", "[", "\n", "Linear", "(", "transformer_config", "[", "-", "1", "]", "[", "0", "]", ",", "encoder_output_dim", ")", ",", "\n", "LayerNorm", "(", "encoder_output_dim", ")", ",", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.vggtransformer.VGGTransformerEncoder.forward": [[320, 379], ["src_tokens.size", "src_tokens.view", "x.contiguous().view.contiguous().view.transpose().contiguous", "range", "x.contiguous().view.contiguous().view.size", "x.contiguous().view.contiguous().view.transpose().transpose", "x.contiguous().view.contiguous().view.contiguous().view", "int", "examples.speech_recognition.data.data_utils.lengths_to_encoder_padding_mask", "vggtransformer.VGGTransformerEncoder.lengths_to_attn_mask", "range", "len", "encoder_padding_mask.any", "len", "isinstance", "x.contiguous().view.contiguous().view.transpose", "x.contiguous().view.contiguous().view.transpose", "x.contiguous().view.contiguous().view.contiguous", "encoder_padding_mask.t", "vggtransformer.VGGTransformerEncoder.slice", "src_lengths.float"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.lengths_to_encoder_padding_mask", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.vggtransformer.VGGTransformerEncoder.lengths_to_attn_mask", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.vggtransformer.VGGTransformerEncoder.slice"], ["", "def", "forward", "(", "self", ",", "src_tokens", ",", "src_lengths", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        src_tokens: padded tensor (B, T, C * feat)\n        src_lengths: tensor of original lengths of input utterances (B,)\n        \"\"\"", "\n", "bsz", ",", "max_seq_len", ",", "_", "=", "src_tokens", ".", "size", "(", ")", "\n", "x", "=", "src_tokens", ".", "view", "(", "bsz", ",", "max_seq_len", ",", "self", ".", "in_channels", ",", "self", ".", "input_dim", ")", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "# (B, C, T, feat)", "\n", "\n", "for", "layer_idx", "in", "range", "(", "len", "(", "self", ".", "conv_layers", ")", ")", ":", "\n", "            ", "x", "=", "self", ".", "conv_layers", "[", "layer_idx", "]", "(", "x", ")", "\n", "\n", "", "bsz", ",", "_", ",", "output_seq_len", ",", "_", "=", "x", ".", "size", "(", ")", "\n", "\n", "# (B, C, T, feat) -> (B, T, C, feat) -> (T, B, C, feat) -> (T, B, C * feat)", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "x", "=", "x", ".", "contiguous", "(", ")", ".", "view", "(", "output_seq_len", ",", "bsz", ",", "-", "1", ")", "\n", "\n", "subsampling_factor", "=", "int", "(", "max_seq_len", "*", "1.0", "/", "output_seq_len", "+", "0.5", ")", "\n", "# TODO: shouldn't subsampling_factor determined in advance ?", "\n", "input_lengths", "=", "(", "src_lengths", ".", "float", "(", ")", "/", "subsampling_factor", ")", ".", "ceil", "(", ")", ".", "long", "(", ")", "\n", "\n", "encoder_padding_mask", ",", "_", "=", "lengths_to_encoder_padding_mask", "(", "\n", "input_lengths", ",", "batch_first", "=", "True", "\n", ")", "\n", "if", "not", "encoder_padding_mask", ".", "any", "(", ")", ":", "\n", "            ", "encoder_padding_mask", "=", "None", "\n", "\n", "", "attn_mask", "=", "self", ".", "lengths_to_attn_mask", "(", "input_lengths", ",", "subsampling_factor", ")", "\n", "\n", "transformer_layer_idx", "=", "0", "\n", "\n", "for", "layer_idx", "in", "range", "(", "len", "(", "self", ".", "transformer_layers", ")", ")", ":", "\n", "\n", "            ", "if", "isinstance", "(", "self", ".", "transformer_layers", "[", "layer_idx", "]", ",", "TransformerEncoderLayer", ")", ":", "\n", "                ", "x", "=", "self", ".", "transformer_layers", "[", "layer_idx", "]", "(", "\n", "x", ",", "encoder_padding_mask", ",", "attn_mask", "\n", ")", "\n", "\n", "if", "self", ".", "transformer_sampling", "[", "transformer_layer_idx", "]", "!=", "1", ":", "\n", "                    ", "sampling_factor", "=", "self", ".", "transformer_sampling", "[", "transformer_layer_idx", "]", "\n", "x", ",", "encoder_padding_mask", ",", "attn_mask", "=", "self", ".", "slice", "(", "\n", "x", ",", "encoder_padding_mask", ",", "attn_mask", ",", "sampling_factor", "\n", ")", "\n", "\n", "", "transformer_layer_idx", "+=", "1", "\n", "\n", "", "else", ":", "\n", "                ", "x", "=", "self", ".", "transformer_layers", "[", "layer_idx", "]", "(", "x", ")", "\n", "\n", "# encoder_padding_maks is a (T x B) tensor, its [t, b] elements indicate", "\n", "# whether encoder_output[t, b] is valid or not (valid=0, invalid=1)", "\n", "\n", "", "", "return", "{", "\n", "\"encoder_out\"", ":", "x", ",", "# (T, B, C)", "\n", "\"encoder_padding_mask\"", ":", "encoder_padding_mask", ".", "t", "(", ")", "\n", "if", "encoder_padding_mask", "is", "not", "None", "\n", "else", "None", ",", "\n", "# (B, T) --> (T, B)", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.vggtransformer.VGGTransformerEncoder.infer_conv_output_dim": [[382, 391], ["torch.randn", "torch.randn", "torch.randn", "torch.randn", "enumerate", "x.transpose.transpose.transpose", "x.transpose.transpose.contiguous().view().size", "x.transpose.transpose.size", "x.transpose.transpose.contiguous().view", "x.transpose.transpose.contiguous"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "infer_conv_output_dim", "(", "self", ",", "in_channels", ",", "input_dim", ")", ":", "\n", "        ", "sample_seq_len", "=", "200", "\n", "sample_bsz", "=", "10", "\n", "x", "=", "torch", ".", "randn", "(", "sample_bsz", ",", "in_channels", ",", "sample_seq_len", ",", "input_dim", ")", "\n", "for", "i", ",", "_", "in", "enumerate", "(", "self", ".", "conv_layers", ")", ":", "\n", "            ", "x", "=", "self", ".", "conv_layers", "[", "i", "]", "(", "x", ")", "\n", "", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", "\n", "mb", ",", "seq", "=", "x", ".", "size", "(", ")", "[", ":", "2", "]", "\n", "return", "x", ".", "contiguous", "(", ")", ".", "view", "(", "mb", ",", "seq", ",", "-", "1", ")", ".", "size", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.vggtransformer.VGGTransformerEncoder.validate_transformer_config": [[392, 402], ["ValueError"], "methods", ["None"], ["", "def", "validate_transformer_config", "(", "self", ",", "transformer_config", ")", ":", "\n", "        ", "for", "config", "in", "transformer_config", ":", "\n", "            ", "input_dim", ",", "num_heads", "=", "config", "[", ":", "2", "]", "\n", "if", "input_dim", "%", "num_heads", "!=", "0", ":", "\n", "                ", "msg", "=", "(", "\n", "\"ERROR in transformer config {}:\"", ".", "format", "(", "config", ")", "\n", "+", "\"input dimension {} \"", ".", "format", "(", "input_dim", ")", "\n", "+", "\"not dividable by number of heads\"", ".", "format", "(", "num_heads", ")", "\n", ")", "\n", "raise", "ValueError", "(", "msg", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.vggtransformer.VGGTransformerEncoder.parse_transformer_context": [[403, 436], ["isinstance", "ValueError", "len", "ValueError"], "methods", ["None"], ["", "", "", "def", "parse_transformer_context", "(", "self", ",", "transformer_context", ")", ":", "\n", "        ", "\"\"\"\n        transformer_context can be the following:\n        -   None; indicates no context is used, i.e.,\n            transformer can access full context\n        -   a tuple/list of two int; indicates left and right context,\n            any number <0 indicates infinite context\n                * e.g., (5, 6) indicates that for query at x_t, transformer can\n                access [t-5, t+6] (inclusive)\n                * e.g., (-1, 6) indicates that for query at x_t, transformer can\n                access [0, t+6] (inclusive)\n        \"\"\"", "\n", "if", "transformer_context", "is", "None", ":", "\n", "            ", "return", "None", "\n", "\n", "", "if", "not", "isinstance", "(", "transformer_context", ",", "Iterable", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"transformer context must be Iterable if it is not None\"", ")", "\n", "\n", "", "if", "len", "(", "transformer_context", ")", "!=", "2", ":", "\n", "            ", "raise", "ValueError", "(", "\"transformer context must have length 2\"", ")", "\n", "\n", "", "left_context", "=", "transformer_context", "[", "0", "]", "\n", "if", "left_context", "<", "0", ":", "\n", "            ", "left_context", "=", "None", "\n", "\n", "", "right_context", "=", "transformer_context", "[", "1", "]", "\n", "if", "right_context", "<", "0", ":", "\n", "            ", "right_context", "=", "None", "\n", "\n", "", "if", "left_context", "is", "None", "and", "right_context", "is", "None", ":", "\n", "            ", "return", "None", "\n", "\n", "", "return", "(", "left_context", ",", "right_context", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.vggtransformer.VGGTransformerEncoder.parse_transformer_sampling": [[437, 474], ["enumerate", "isinstance", "ValueError", "len", "ValueError", "isinstance", "ValueError", "ValueError"], "methods", ["None"], ["", "def", "parse_transformer_sampling", "(", "self", ",", "transformer_sampling", ",", "num_layers", ")", ":", "\n", "        ", "\"\"\"\n        parsing transformer sampling configuration\n\n        Args:\n            - transformer_sampling, accepted input:\n                * None, indicating no sampling\n                * an Iterable with int (>0) as element\n            - num_layers, expected number of transformer layers, must match with\n              the length of transformer_sampling if it is not None\n\n        Returns:\n            - A tuple with length num_layers\n        \"\"\"", "\n", "if", "transformer_sampling", "is", "None", ":", "\n", "            ", "return", "(", "1", ",", ")", "*", "num_layers", "\n", "\n", "", "if", "not", "isinstance", "(", "transformer_sampling", ",", "Iterable", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"transformer_sampling must be an iterable if it is not None\"", "\n", ")", "\n", "\n", "", "if", "len", "(", "transformer_sampling", ")", "!=", "num_layers", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"transformer_sampling {} does not match with the number \"", "\n", "+", "\"of layers {}\"", ".", "format", "(", "transformer_sampling", ",", "num_layers", ")", "\n", ")", "\n", "\n", "", "for", "layer", ",", "value", "in", "enumerate", "(", "transformer_sampling", ")", ":", "\n", "            ", "if", "not", "isinstance", "(", "value", ",", "int", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\"Invalid value in transformer_sampling: \"", ")", "\n", "", "if", "value", "<", "1", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"{} layer's subsampling is {}.\"", ".", "format", "(", "layer", ",", "value", ")", "\n", "+", "\" This is not allowed! \"", "\n", ")", "\n", "", "", "return", "transformer_sampling", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.vggtransformer.VGGTransformerEncoder.slice": [[475, 488], ["None"], "methods", ["None"], ["", "def", "slice", "(", "self", ",", "embedding", ",", "padding_mask", ",", "attn_mask", ",", "sampling_factor", ")", ":", "\n", "        ", "\"\"\"\n        embedding is a (T, B, D) tensor\n        padding_mask is a (B, T) tensor or None\n        attn_mask is a (T, T) tensor or None\n        \"\"\"", "\n", "embedding", "=", "embedding", "[", ":", ":", "sampling_factor", ",", ":", ",", ":", "]", "\n", "if", "padding_mask", "is", "not", "None", ":", "\n", "            ", "padding_mask", "=", "padding_mask", "[", ":", ",", ":", ":", "sampling_factor", "]", "\n", "", "if", "attn_mask", "is", "not", "None", ":", "\n", "            ", "attn_mask", "=", "attn_mask", "[", ":", ":", "sampling_factor", ",", ":", ":", "sampling_factor", "]", "\n", "\n", "", "return", "embedding", ",", "padding_mask", ",", "attn_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.vggtransformer.VGGTransformerEncoder.lengths_to_attn_mask": [[489, 540], ["torch.max().item", "torch.max().item", "torch.max().item", "torch.max().item", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range", "torch.zeros.to", "torch.zeros.to", "math.ceil", "math.ceil", "torch.max", "torch.max", "torch.max", "torch.max", "max", "min"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item"], ["", "def", "lengths_to_attn_mask", "(", "self", ",", "input_lengths", ",", "subsampling_factor", "=", "1", ")", ":", "\n", "        ", "\"\"\"\n        create attention mask according to sequence lengths and transformer\n        context\n\n        Args:\n            - input_lengths: (B, )-shape Int/Long tensor; input_lengths[b] is\n              the length of b-th sequence\n            - subsampling_factor: int\n                * Note that the left_context and right_context is specified in\n                  the input frame-level while input to transformer may already\n                  go through subsampling (e.g., the use of striding in vggblock)\n                  we use subsampling_factor to scale the left/right context\n\n        Return:\n            - a (T, T) binary tensor or None, where T is max(input_lengths)\n                * if self.transformer_context is None, None\n                * if left_context is None,\n                    * attn_mask[t, t + right_context + 1:] = 1\n                    * others = 0\n                * if right_context is None,\n                    * attn_mask[t, 0:t - left_context] = 1\n                    * others = 0\n                * elsif\n                    * attn_mask[t, t - left_context: t + right_context + 1] = 0\n                    * others = 1\n        \"\"\"", "\n", "if", "self", ".", "transformer_context", "is", "None", ":", "\n", "            ", "return", "None", "\n", "\n", "", "maxT", "=", "torch", ".", "max", "(", "input_lengths", ")", ".", "item", "(", ")", "\n", "attn_mask", "=", "torch", ".", "zeros", "(", "maxT", ",", "maxT", ")", "\n", "\n", "left_context", "=", "self", ".", "transformer_context", "[", "0", "]", "\n", "right_context", "=", "self", ".", "transformer_context", "[", "1", "]", "\n", "if", "left_context", "is", "not", "None", ":", "\n", "            ", "left_context", "=", "math", ".", "ceil", "(", "self", ".", "transformer_context", "[", "0", "]", "/", "subsampling_factor", ")", "\n", "", "if", "right_context", "is", "not", "None", ":", "\n", "            ", "right_context", "=", "math", ".", "ceil", "(", "self", ".", "transformer_context", "[", "1", "]", "/", "subsampling_factor", ")", "\n", "\n", "", "for", "t", "in", "range", "(", "maxT", ")", ":", "\n", "            ", "if", "left_context", "is", "not", "None", ":", "\n", "                ", "st", "=", "0", "\n", "en", "=", "max", "(", "st", ",", "t", "-", "left_context", ")", "\n", "attn_mask", "[", "t", ",", "st", ":", "en", "]", "=", "1", "\n", "", "if", "right_context", "is", "not", "None", ":", "\n", "                ", "st", "=", "t", "+", "right_context", "+", "1", "\n", "st", "=", "min", "(", "st", ",", "maxT", "-", "1", ")", "\n", "attn_mask", "[", "t", ",", "st", ":", "]", "=", "1", "\n", "\n", "", "", "return", "attn_mask", ".", "to", "(", "input_lengths", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.vggtransformer.VGGTransformerEncoder.reorder_encoder_out": [[541, 550], ["encoder_out[].index_select", "encoder_out[].index_select"], "methods", ["None"], ["", "def", "reorder_encoder_out", "(", "self", ",", "encoder_out", ",", "new_order", ")", ":", "\n", "        ", "encoder_out", "[", "\"encoder_out\"", "]", "=", "encoder_out", "[", "\"encoder_out\"", "]", ".", "index_select", "(", "\n", "1", ",", "new_order", "\n", ")", "\n", "if", "encoder_out", "[", "\"encoder_padding_mask\"", "]", "is", "not", "None", ":", "\n", "            ", "encoder_out", "[", "\"encoder_padding_mask\"", "]", "=", "encoder_out", "[", "\n", "\"encoder_padding_mask\"", "\n", "]", ".", "index_select", "(", "1", ",", "new_order", ")", "\n", "", "return", "encoder_out", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.vggtransformer.TransformerDecoder.__init__": [[566, 615], ["fairseq.models.FairseqIncrementalDecoder.__init__", "len", "dictionary.pad", "vggtransformer.Embedding", "torch.ModuleList", "torch.ModuleList", "range", "torch.ModuleList", "torch.ModuleList", "vggtransformer.TransformerDecoder.layers.append", "range", "vggtransformer.Linear", "len", "vggtransformer.TransformerDecoder.conv_layers.append", "vggtransformer.TransformerDecoder.conv_layers.append", "vggtransformer.TransformerDecoder.layers.append", "fairseq.modules.TransformerDecoderLayer", "len", "vggtransformer.TransformerDecoder.layers.append", "vggtransformer.LinearizedConv1d", "vggtransformer.LinearizedConv1d", "vggtransformer.TransformerDecoder.conv_layers.append", "torch.ReLU", "torch.ReLU", "vggtransformer.Linear", "vggtransformer.prepare_transformer_decoder_params", "vggtransformer.TransformerDecoder.layers.append", "fairseq.modules.TransformerDecoderLayer", "torch.LayerNorm", "torch.LayerNorm", "vggtransformer.Linear", "vggtransformer.prepare_transformer_decoder_params"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.Embedding", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv.LinearizedConv1d", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv.LinearizedConv1d", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.vggtransformer.prepare_transformer_decoder_params", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.layer_norm.LayerNorm", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.layer_norm.LayerNorm", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.vggtransformer.prepare_transformer_decoder_params"], ["def", "__init__", "(", "\n", "self", ",", "\n", "dictionary", ",", "\n", "embed_dim", "=", "512", ",", "\n", "transformer_config", "=", "DEFAULT_ENC_TRANSFORMER_CONFIG", ",", "\n", "conv_config", "=", "DEFAULT_DEC_CONV_CONFIG", ",", "\n", "encoder_output_dim", "=", "512", ",", "\n", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dictionary", ")", "\n", "vocab_size", "=", "len", "(", "dictionary", ")", "\n", "self", ".", "padding_idx", "=", "dictionary", ".", "pad", "(", ")", "\n", "self", ".", "embed_tokens", "=", "Embedding", "(", "vocab_size", ",", "embed_dim", ",", "self", ".", "padding_idx", ")", "\n", "\n", "self", ".", "conv_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "conv_config", ")", ")", ":", "\n", "            ", "out_channels", ",", "kernel_size", ",", "layer_norm", "=", "conv_config", "[", "i", "]", "\n", "if", "i", "==", "0", ":", "\n", "                ", "conv_layer", "=", "LinearizedConv1d", "(", "\n", "embed_dim", ",", "out_channels", ",", "kernel_size", ",", "padding", "=", "kernel_size", "-", "1", "\n", ")", "\n", "", "else", ":", "\n", "                ", "conv_layer", "=", "LinearizedConv1d", "(", "\n", "conv_config", "[", "i", "-", "1", "]", "[", "0", "]", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "padding", "=", "kernel_size", "-", "1", ",", "\n", ")", "\n", "", "self", ".", "conv_layers", ".", "append", "(", "conv_layer", ")", "\n", "if", "layer_norm", ":", "\n", "                ", "self", ".", "conv_layers", ".", "append", "(", "nn", ".", "LayerNorm", "(", "out_channels", ")", ")", "\n", "", "self", ".", "conv_layers", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "if", "conv_config", "[", "-", "1", "]", "[", "0", "]", "!=", "transformer_config", "[", "0", "]", "[", "0", "]", ":", "\n", "            ", "self", ".", "layers", ".", "append", "(", "Linear", "(", "conv_config", "[", "-", "1", "]", "[", "0", "]", ",", "transformer_config", "[", "0", "]", "[", "0", "]", ")", ")", "\n", "", "self", ".", "layers", ".", "append", "(", "TransformerDecoderLayer", "(", "\n", "prepare_transformer_decoder_params", "(", "*", "transformer_config", "[", "0", "]", ")", "\n", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "transformer_config", ")", ")", ":", "\n", "            ", "if", "transformer_config", "[", "i", "-", "1", "]", "[", "0", "]", "!=", "transformer_config", "[", "i", "]", "[", "0", "]", ":", "\n", "                ", "self", ".", "layers", ".", "append", "(", "\n", "Linear", "(", "transformer_config", "[", "i", "-", "1", "]", "[", "0", "]", ",", "transformer_config", "[", "i", "]", "[", "0", "]", ")", "\n", ")", "\n", "", "self", ".", "layers", ".", "append", "(", "TransformerDecoderLayer", "(", "\n", "prepare_transformer_decoder_params", "(", "*", "transformer_config", "[", "i", "]", ")", "\n", ")", ")", "\n", "", "self", ".", "fc_out", "=", "Linear", "(", "transformer_config", "[", "-", "1", "]", "[", "0", "]", ",", "vocab_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.vggtransformer.TransformerDecoder.forward": [[616, 686], ["vggtransformer.TransformerDecoder.embed_tokens", "vggtransformer.TransformerDecoder._transpose_if_training", "vggtransformer.TransformerDecoder._transpose_if_inference", "layer.transpose", "vggtransformer.TransformerDecoder.fc_out", "isinstance", "isinstance", "layer", "layer", "layer", "layer", "encoder_out[].t", "vggtransformer.TransformerDecoder.buffered_future_mask"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv.FConvDecoder._transpose_if_training", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.vggtransformer.TransformerDecoder._transpose_if_inference", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.TransformerDecoder.buffered_future_mask"], ["", "def", "forward", "(", "self", ",", "prev_output_tokens", ",", "encoder_out", "=", "None", ",", "incremental_state", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            prev_output_tokens (LongTensor): previous decoder outputs of shape\n                `(batch, tgt_len)`, for input feeding/teacher forcing\n            encoder_out (Tensor, optional): output from the encoder, used for\n                encoder-side attention\n            incremental_state (dict): dictionary used for storing state during\n                :ref:`Incremental decoding`\n        Returns:\n            tuple:\n                - the last decoder layer's output of shape `(batch, tgt_len,\n                  vocab)`\n                - the last decoder layer's attention weights of shape `(batch,\n                  tgt_len, src_len)`\n        \"\"\"", "\n", "target_padding_mask", "=", "(", "\n", "(", "prev_output_tokens", "==", "self", ".", "padding_idx", ")", ".", "to", "(", "prev_output_tokens", ".", "device", ")", "\n", "if", "incremental_state", "is", "None", "\n", "else", "None", "\n", ")", "\n", "\n", "if", "incremental_state", "is", "not", "None", ":", "\n", "            ", "prev_output_tokens", "=", "prev_output_tokens", "[", ":", ",", "-", "1", ":", "]", "\n", "\n", "# embed tokens", "\n", "", "x", "=", "self", ".", "embed_tokens", "(", "prev_output_tokens", ")", "\n", "\n", "# B x T x C -> T x B x C", "\n", "x", "=", "self", ".", "_transpose_if_training", "(", "x", ",", "incremental_state", ")", "\n", "\n", "for", "layer", "in", "self", ".", "conv_layers", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "LinearizedConvolution", ")", ":", "\n", "                ", "x", "=", "layer", "(", "x", ",", "incremental_state", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "layer", "(", "x", ")", "\n", "\n", "# B x T x C -> T x B x C", "\n", "", "", "x", "=", "self", ".", "_transpose_if_inference", "(", "x", ",", "incremental_state", ")", "\n", "\n", "# decoder layers", "\n", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "if", "isinstance", "(", "layer", ",", "TransformerDecoderLayer", ")", ":", "\n", "                ", "x", ",", "_", ",", "_", "=", "layer", "(", "\n", "x", ",", "\n", "(", "encoder_out", "[", "\"encoder_out\"", "]", "if", "encoder_out", "is", "not", "None", "else", "None", ")", ",", "\n", "(", "\n", "encoder_out", "[", "\"encoder_padding_mask\"", "]", ".", "t", "(", ")", "\n", "if", "encoder_out", "[", "\"encoder_padding_mask\"", "]", "is", "not", "None", "\n", "else", "None", "\n", ")", ",", "\n", "incremental_state", ",", "\n", "self_attn_mask", "=", "(", "\n", "self", ".", "buffered_future_mask", "(", "x", ")", "\n", "if", "incremental_state", "is", "None", "\n", "else", "None", "\n", ")", ",", "\n", "self_attn_padding_mask", "=", "(", "\n", "target_padding_mask", "if", "incremental_state", "is", "None", "else", "None", "\n", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "layer", "(", "x", ")", "\n", "\n", "# T x B x C -> B x T x C", "\n", "", "", "x", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "x", "=", "self", ".", "fc_out", "(", "x", ")", "\n", "\n", "return", "x", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.vggtransformer.TransformerDecoder.buffered_future_mask": [[687, 702], ["tensor.size", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "vggtransformer.TransformerDecoder._future_mask.size", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "hasattr", "fairseq.utils.fill_with_neg_inf", "fairseq.utils.fill_with_neg_inf", "tensor.new", "vggtransformer.TransformerDecoder._future_mask.resize_"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.fill_with_neg_inf", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.fill_with_neg_inf"], ["", "def", "buffered_future_mask", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "dim", "=", "tensor", ".", "size", "(", "0", ")", "\n", "if", "(", "\n", "not", "hasattr", "(", "self", ",", "\"_future_mask\"", ")", "\n", "or", "self", ".", "_future_mask", "is", "None", "\n", "or", "self", ".", "_future_mask", ".", "device", "!=", "tensor", ".", "device", "\n", ")", ":", "\n", "            ", "self", ".", "_future_mask", "=", "torch", ".", "triu", "(", "\n", "utils", ".", "fill_with_neg_inf", "(", "tensor", ".", "new", "(", "dim", ",", "dim", ")", ")", ",", "1", "\n", ")", "\n", "", "if", "self", ".", "_future_mask", ".", "size", "(", "0", ")", "<", "dim", ":", "\n", "            ", "self", ".", "_future_mask", "=", "torch", ".", "triu", "(", "\n", "utils", ".", "fill_with_neg_inf", "(", "self", ".", "_future_mask", ".", "resize_", "(", "dim", ",", "dim", ")", ")", ",", "1", "\n", ")", "\n", "", "return", "self", ".", "_future_mask", "[", ":", "dim", ",", ":", "dim", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.vggtransformer.TransformerDecoder._transpose_if_training": [[703, 707], ["x.transpose.transpose.transpose"], "methods", ["None"], ["", "def", "_transpose_if_training", "(", "self", ",", "x", ",", "incremental_state", ")", ":", "\n", "        ", "if", "incremental_state", "is", "None", ":", "\n", "            ", "x", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.vggtransformer.TransformerDecoder._transpose_if_inference": [[708, 712], ["x.transpose.transpose.transpose"], "methods", ["None"], ["", "def", "_transpose_if_inference", "(", "self", ",", "x", ",", "incremental_state", ")", ":", "\n", "        ", "if", "incremental_state", ":", "\n", "            ", "x", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.vggtransformer.VGGTransformerEncoderModel.__init__": [[715, 717], ["fairseq.models.FairseqEncoderModel.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["    ", "def", "__init__", "(", "self", ",", "encoder", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "encoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.vggtransformer.VGGTransformerEncoderModel.add_args": [[718, 777], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add model-specific arguments to the parser.\"\"\"", "\n", "parser", ".", "add_argument", "(", "\n", "\"--input-feat-per-channel\"", ",", "\n", "type", "=", "int", ",", "\n", "metavar", "=", "\"N\"", ",", "\n", "help", "=", "\"encoder input dimension per input channel\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--vggblock-enc-config\"", ",", "\n", "type", "=", "str", ",", "\n", "metavar", "=", "\"EXPR\"", ",", "\n", "help", "=", "\"\"\"\n    an array of tuples each containing the configuration of one vggblock\n    [(out_channels, conv_kernel_size, pooling_kernel_size,num_conv_layers), ...]\n    \"\"\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--transformer-enc-config\"", ",", "\n", "type", "=", "str", ",", "\n", "metavar", "=", "\"EXPR\"", ",", "\n", "help", "=", "\"\"\"\n    a tuple containing the configuration of the Transformer layers\n    configurations:\n    [(input_dim,\n      num_heads,\n      ffn_dim,\n      normalize_before,\n      dropout,\n      attention_dropout,\n      relu_dropout), ]\"\"\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--enc-output-dim\"", ",", "\n", "type", "=", "int", ",", "\n", "metavar", "=", "\"N\"", ",", "\n", "help", "=", "\"encoder output dimension, projecting the LSTM output\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--in-channels\"", ",", "\n", "type", "=", "int", ",", "\n", "metavar", "=", "\"N\"", ",", "\n", "help", "=", "\"number of encoder input channels\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--transformer-context\"", ",", "\n", "type", "=", "str", ",", "\n", "metavar", "=", "\"EXPR\"", ",", "\n", "help", "=", "\"\"\"\n    either None or a tuple of two ints, indicating left/right context a\n    transformer can have access to\"\"\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--transformer-sampling\"", ",", "\n", "type", "=", "str", ",", "\n", "metavar", "=", "\"EXPR\"", ",", "\n", "help", "=", "\"\"\"\n    either None or a tuple of ints, indicating sampling factor in each layer\"\"\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.vggtransformer.VGGTransformerEncoderModel.build_model": [[779, 794], ["vggtransformer.base_architecture_enconly", "vggtransformer.VGGTransformerEncoderOnly", "cls", "len", "eval", "eval", "eval", "eval"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.vggtransformer.base_architecture_enconly", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dictionary.BertDictionary.cls", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval"], ["", "@", "classmethod", "\n", "def", "build_model", "(", "cls", ",", "args", ",", "task", ")", ":", "\n", "        ", "\"\"\"Build a new model instance.\"\"\"", "\n", "base_architecture_enconly", "(", "args", ")", "\n", "encoder", "=", "VGGTransformerEncoderOnly", "(", "\n", "vocab_size", "=", "len", "(", "task", ".", "target_dictionary", ")", ",", "\n", "input_feat_per_channel", "=", "args", ".", "input_feat_per_channel", ",", "\n", "vggblock_config", "=", "eval", "(", "args", ".", "vggblock_enc_config", ")", ",", "\n", "transformer_config", "=", "eval", "(", "args", ".", "transformer_enc_config", ")", ",", "\n", "encoder_output_dim", "=", "args", ".", "enc_output_dim", ",", "\n", "in_channels", "=", "args", ".", "in_channels", ",", "\n", "transformer_context", "=", "eval", "(", "args", ".", "transformer_context", ")", ",", "\n", "transformer_sampling", "=", "eval", "(", "args", ".", "transformer_sampling", ")", ",", "\n", ")", "\n", "return", "cls", "(", "encoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.vggtransformer.VGGTransformerEncoderModel.get_normalized_probs": [[795, 803], ["super().get_normalized_probs", "lprobs.transpose().contiguous.transpose().contiguous.transpose().contiguous", "lprobs.transpose().contiguous.transpose().contiguous.transpose"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.get_normalized_probs"], ["", "def", "get_normalized_probs", "(", "self", ",", "net_output", ",", "log_probs", ",", "sample", "=", "None", ")", ":", "\n", "# net_output['encoder_out'] is a (T, B, D) tensor", "\n", "        ", "lprobs", "=", "super", "(", ")", ".", "get_normalized_probs", "(", "net_output", ",", "log_probs", ",", "sample", ")", "\n", "# lprobs is a (T, B, D) tensor", "\n", "# we need to transoose to get (B, T, D) tensor", "\n", "lprobs", "=", "lprobs", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "lprobs", ".", "batch_first", "=", "True", "\n", "return", "lprobs", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.vggtransformer.VGGTransformerEncoderOnly.__init__": [[806, 827], ["vggtransformer.VGGTransformerEncoder.__init__", "vggtransformer.Linear"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "vocab_size", ",", "\n", "input_feat_per_channel", ",", "\n", "vggblock_config", "=", "DEFAULT_ENC_VGGBLOCK_CONFIG", ",", "\n", "transformer_config", "=", "DEFAULT_ENC_TRANSFORMER_CONFIG", ",", "\n", "encoder_output_dim", "=", "512", ",", "\n", "in_channels", "=", "1", ",", "\n", "transformer_context", "=", "None", ",", "\n", "transformer_sampling", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "input_feat_per_channel", "=", "input_feat_per_channel", ",", "\n", "vggblock_config", "=", "vggblock_config", ",", "\n", "transformer_config", "=", "transformer_config", ",", "\n", "encoder_output_dim", "=", "encoder_output_dim", ",", "\n", "in_channels", "=", "in_channels", ",", "\n", "transformer_context", "=", "transformer_context", ",", "\n", "transformer_sampling", "=", "transformer_sampling", ",", "\n", ")", "\n", "self", ".", "fc_out", "=", "Linear", "(", "self", ".", "encoder_output_dim", ",", "vocab_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.vggtransformer.VGGTransformerEncoderOnly.forward": [[828, 842], ["vggtransformer.VGGTransformerEncoder.forward", "vggtransformer.VGGTransformerEncoderOnly.fc_out"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.forward"], ["", "def", "forward", "(", "self", ",", "src_tokens", ",", "src_lengths", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        src_tokens: padded tensor (B, T, C * feat)\n        src_lengths: tensor of original lengths of input utterances (B,)\n        \"\"\"", "\n", "\n", "enc_out", "=", "super", "(", ")", ".", "forward", "(", "src_tokens", ",", "src_lengths", ")", "\n", "x", "=", "self", ".", "fc_out", "(", "enc_out", "[", "\"encoder_out\"", "]", ")", "\n", "# x = F.log_softmax(x, dim=-1)", "\n", "# Note: no need this line, because model.get_normalized_prob will call", "\n", "# log_softmax", "\n", "return", "{", "\n", "\"encoder_out\"", ":", "x", ",", "# (T, B, C)", "\n", "\"encoder_padding_mask\"", ":", "enc_out", "[", "\"encoder_padding_mask\"", "]", ",", "# (T, B)", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.vggtransformer.VGGTransformerEncoderOnly.max_positions": [[844, 847], ["None"], "methods", ["None"], ["", "def", "max_positions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Maximum input length supported by the encoder.\"\"\"", "\n", "return", "(", "1e6", ",", "1e6", ")", "# an arbitrary large number", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.vggtransformer.prepare_transformer_encoder_params": [[171, 189], ["argparse.Namespace"], "function", ["None"], ["def", "prepare_transformer_encoder_params", "(", "\n", "input_dim", ",", "\n", "num_heads", ",", "\n", "ffn_dim", ",", "\n", "normalize_before", ",", "\n", "dropout", ",", "\n", "attention_dropout", ",", "\n", "relu_dropout", ",", "\n", ")", ":", "\n", "    ", "args", "=", "argparse", ".", "Namespace", "(", ")", "\n", "args", ".", "encoder_embed_dim", "=", "input_dim", "\n", "args", ".", "encoder_attention_heads", "=", "num_heads", "\n", "args", ".", "attention_dropout", "=", "attention_dropout", "\n", "args", ".", "dropout", "=", "dropout", "\n", "args", ".", "activation_dropout", "=", "relu_dropout", "\n", "args", ".", "encoder_normalize_before", "=", "normalize_before", "\n", "args", ".", "encoder_ffn_embed_dim", "=", "ffn_dim", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.vggtransformer.prepare_transformer_decoder_params": [[191, 209], ["argparse.Namespace"], "function", ["None"], ["", "def", "prepare_transformer_decoder_params", "(", "\n", "input_dim", ",", "\n", "num_heads", ",", "\n", "ffn_dim", ",", "\n", "normalize_before", ",", "\n", "dropout", ",", "\n", "attention_dropout", ",", "\n", "relu_dropout", ",", "\n", ")", ":", "\n", "    ", "args", "=", "argparse", ".", "Namespace", "(", ")", "\n", "args", ".", "decoder_embed_dim", "=", "input_dim", "\n", "args", ".", "decoder_attention_heads", "=", "num_heads", "\n", "args", ".", "attention_dropout", "=", "attention_dropout", "\n", "args", ".", "dropout", "=", "dropout", "\n", "args", ".", "activation_dropout", "=", "relu_dropout", "\n", "args", ".", "decoder_normalize_before", "=", "normalize_before", "\n", "args", ".", "decoder_ffn_embed_dim", "=", "ffn_dim", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.vggtransformer.Embedding": [[849, 854], ["torch.Embedding"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.Embedding"], ["", "", "def", "Embedding", "(", "num_embeddings", ",", "embedding_dim", ",", "padding_idx", ")", ":", "\n", "    ", "m", "=", "nn", ".", "Embedding", "(", "num_embeddings", ",", "embedding_dim", ",", "padding_idx", "=", "padding_idx", ")", "\n", "# nn.init.uniform_(m.weight, -0.1, 0.1)", "\n", "# nn.init.constant_(m.weight[padding_idx], 0)", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.vggtransformer.Linear": [[856, 863], ["torch.Linear"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear"], ["", "def", "Linear", "(", "in_features", ",", "out_features", ",", "bias", "=", "True", ",", "dropout", "=", "0", ")", ":", "\n", "    ", "\"\"\"Linear layer (input: N x T x C)\"\"\"", "\n", "m", "=", "nn", ".", "Linear", "(", "in_features", ",", "out_features", ",", "bias", "=", "bias", ")", "\n", "# m.weight.data.uniform_(-0.1, 0.1)", "\n", "# if bias:", "\n", "#     m.bias.data.uniform_(-0.1, 0.1)", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.vggtransformer.LinearizedConv1d": [[865, 872], ["fairseq.modules.LinearizedConvolution", "math.sqrt", "torch.init.normal_", "torch.init.constant_", "torch.utils.weight_norm"], "function", ["None"], ["", "def", "LinearizedConv1d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "dropout", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Weight-normalized Conv1d layer optimized for decoding\"\"\"", "\n", "m", "=", "LinearizedConvolution", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "**", "kwargs", ")", "\n", "std", "=", "math", ".", "sqrt", "(", "(", "4", "*", "(", "1.0", "-", "dropout", ")", ")", "/", "(", "m", ".", "kernel_size", "[", "0", "]", "*", "in_channels", ")", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "std", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "return", "nn", ".", "utils", ".", "weight_norm", "(", "m", ",", "dim", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.vggtransformer.LayerNorm": [[874, 877], ["torch.LayerNorm"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.layer_norm.LayerNorm"], ["", "def", "LayerNorm", "(", "embedding_dim", ")", ":", "\n", "    ", "m", "=", "nn", ".", "LayerNorm", "(", "embedding_dim", ")", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.vggtransformer.base_architecture": [[880, 896], ["getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr"], "function", ["None"], ["", "def", "base_architecture", "(", "args", ")", ":", "\n", "    ", "args", ".", "input_feat_per_channel", "=", "getattr", "(", "args", ",", "\"input_feat_per_channel\"", ",", "40", ")", "\n", "args", ".", "vggblock_enc_config", "=", "getattr", "(", "\n", "args", ",", "\"vggblock_enc_config\"", ",", "DEFAULT_ENC_VGGBLOCK_CONFIG", "\n", ")", "\n", "args", ".", "transformer_enc_config", "=", "getattr", "(", "\n", "args", ",", "\"transformer_enc_config\"", ",", "DEFAULT_ENC_TRANSFORMER_CONFIG", "\n", ")", "\n", "args", ".", "enc_output_dim", "=", "getattr", "(", "args", ",", "\"enc_output_dim\"", ",", "512", ")", "\n", "args", ".", "in_channels", "=", "getattr", "(", "args", ",", "\"in_channels\"", ",", "1", ")", "\n", "args", ".", "tgt_embed_dim", "=", "getattr", "(", "args", ",", "\"tgt_embed_dim\"", ",", "128", ")", "\n", "args", ".", "transformer_dec_config", "=", "getattr", "(", "\n", "args", ",", "\"transformer_dec_config\"", ",", "DEFAULT_ENC_TRANSFORMER_CONFIG", "\n", ")", "\n", "args", ".", "conv_dec_config", "=", "getattr", "(", "args", ",", "\"conv_dec_config\"", ",", "DEFAULT_DEC_CONV_CONFIG", ")", "\n", "args", ".", "transformer_context", "=", "getattr", "(", "args", ",", "\"transformer_context\"", ",", "\"None\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.vggtransformer.vggtransformer_1": [[898, 916], ["fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture"], ["", "@", "register_model_architecture", "(", "\"asr_vggtransformer\"", ",", "\"vggtransformer_1\"", ")", "\n", "def", "vggtransformer_1", "(", "args", ")", ":", "\n", "    ", "args", ".", "input_feat_per_channel", "=", "getattr", "(", "args", ",", "\"input_feat_per_channel\"", ",", "80", ")", "\n", "args", ".", "vggblock_enc_config", "=", "getattr", "(", "\n", "args", ",", "\"vggblock_enc_config\"", ",", "\"[(64, 3, 2, 2, True), (128, 3, 2, 2, True)]\"", "\n", ")", "\n", "args", ".", "transformer_enc_config", "=", "getattr", "(", "\n", "args", ",", "\n", "\"transformer_enc_config\"", ",", "\n", "\"((1024, 16, 4096, True, 0.15, 0.15, 0.15),) * 14\"", ",", "\n", ")", "\n", "args", ".", "enc_output_dim", "=", "getattr", "(", "args", ",", "\"enc_output_dim\"", ",", "1024", ")", "\n", "args", ".", "tgt_embed_dim", "=", "getattr", "(", "args", ",", "\"tgt_embed_dim\"", ",", "128", ")", "\n", "args", ".", "conv_dec_config", "=", "getattr", "(", "args", ",", "\"conv_dec_config\"", ",", "\"((256, 3, True),) * 4\"", ")", "\n", "args", ".", "transformer_dec_config", "=", "getattr", "(", "\n", "args", ",", "\n", "\"transformer_dec_config\"", ",", "\n", "\"((1024, 16, 4096, True, 0.15, 0.15, 0.15),) * 4\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.vggtransformer.vggtransformer_2": [[919, 937], ["fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture"], ["", "@", "register_model_architecture", "(", "\"asr_vggtransformer\"", ",", "\"vggtransformer_2\"", ")", "\n", "def", "vggtransformer_2", "(", "args", ")", ":", "\n", "    ", "args", ".", "input_feat_per_channel", "=", "getattr", "(", "args", ",", "\"input_feat_per_channel\"", ",", "80", ")", "\n", "args", ".", "vggblock_enc_config", "=", "getattr", "(", "\n", "args", ",", "\"vggblock_enc_config\"", ",", "\"[(64, 3, 2, 2, True), (128, 3, 2, 2, True)]\"", "\n", ")", "\n", "args", ".", "transformer_enc_config", "=", "getattr", "(", "\n", "args", ",", "\n", "\"transformer_enc_config\"", ",", "\n", "\"((1024, 16, 4096, True, 0.15, 0.15, 0.15),) * 16\"", ",", "\n", ")", "\n", "args", ".", "enc_output_dim", "=", "getattr", "(", "args", ",", "\"enc_output_dim\"", ",", "1024", ")", "\n", "args", ".", "tgt_embed_dim", "=", "getattr", "(", "args", ",", "\"tgt_embed_dim\"", ",", "512", ")", "\n", "args", ".", "conv_dec_config", "=", "getattr", "(", "args", ",", "\"conv_dec_config\"", ",", "\"((256, 3, True),) * 4\"", ")", "\n", "args", ".", "transformer_dec_config", "=", "getattr", "(", "\n", "args", ",", "\n", "\"transformer_dec_config\"", ",", "\n", "\"((1024, 16, 4096, True, 0.15, 0.15, 0.15),) * 6\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.vggtransformer.vggtransformer_base": [[940, 955], ["fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture"], ["", "@", "register_model_architecture", "(", "\"asr_vggtransformer\"", ",", "\"vggtransformer_base\"", ")", "\n", "def", "vggtransformer_base", "(", "args", ")", ":", "\n", "    ", "args", ".", "input_feat_per_channel", "=", "getattr", "(", "args", ",", "\"input_feat_per_channel\"", ",", "80", ")", "\n", "args", ".", "vggblock_enc_config", "=", "getattr", "(", "\n", "args", ",", "\"vggblock_enc_config\"", ",", "\"[(64, 3, 2, 2, True), (128, 3, 2, 2, True)]\"", "\n", ")", "\n", "args", ".", "transformer_enc_config", "=", "getattr", "(", "\n", "args", ",", "\"transformer_enc_config\"", ",", "\"((512, 8, 2048, True, 0.15, 0.15, 0.15),) * 12\"", "\n", ")", "\n", "\n", "args", ".", "enc_output_dim", "=", "getattr", "(", "args", ",", "\"enc_output_dim\"", ",", "512", ")", "\n", "args", ".", "tgt_embed_dim", "=", "getattr", "(", "args", ",", "\"tgt_embed_dim\"", ",", "512", ")", "\n", "args", ".", "conv_dec_config", "=", "getattr", "(", "args", ",", "\"conv_dec_config\"", ",", "\"((256, 3, True),) * 4\"", ")", "\n", "args", ".", "transformer_dec_config", "=", "getattr", "(", "\n", "args", ",", "\"transformer_dec_config\"", ",", "\"((512, 8, 2048, True, 0.15, 0.15, 0.15),) * 6\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.vggtransformer.base_architecture_enconly": [[978, 990], ["getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr"], "function", ["None"], ["", "def", "base_architecture_enconly", "(", "args", ")", ":", "\n", "    ", "args", ".", "input_feat_per_channel", "=", "getattr", "(", "args", ",", "\"input_feat_per_channel\"", ",", "40", ")", "\n", "args", ".", "vggblock_enc_config", "=", "getattr", "(", "\n", "args", ",", "\"vggblock_enc_config\"", ",", "\"[(32, 3, 2, 2, True)] * 2\"", "\n", ")", "\n", "args", ".", "transformer_enc_config", "=", "getattr", "(", "\n", "args", ",", "\"transformer_enc_config\"", ",", "\"((256, 4, 1024, True, 0.2, 0.2, 0.2),) * 2\"", "\n", ")", "\n", "args", ".", "enc_output_dim", "=", "getattr", "(", "args", ",", "\"enc_output_dim\"", ",", "512", ")", "\n", "args", ".", "in_channels", "=", "getattr", "(", "args", ",", "\"in_channels\"", ",", "1", ")", "\n", "args", ".", "transformer_context", "=", "getattr", "(", "args", ",", "\"transformer_context\"", ",", "\"None\"", ")", "\n", "args", ".", "transformer_sampling", "=", "getattr", "(", "args", ",", "\"transformer_sampling\"", ",", "\"None\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.vggtransformer.vggtransformer_enc_1": [[992, 1007], ["fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "getattr"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture"], ["", "@", "register_model_architecture", "(", "\"asr_vggtransformer_encoder\"", ",", "\"vggtransformer_enc_1\"", ")", "\n", "def", "vggtransformer_enc_1", "(", "args", ")", ":", "\n", "# vggtransformer_1 is the same as vggtransformer_enc_big, except the number", "\n", "# of layers is increased to 16", "\n", "# keep it here for backward compatiablity purpose", "\n", "    ", "args", ".", "input_feat_per_channel", "=", "getattr", "(", "args", ",", "\"input_feat_per_channel\"", ",", "80", ")", "\n", "args", ".", "vggblock_enc_config", "=", "getattr", "(", "\n", "args", ",", "\"vggblock_enc_config\"", ",", "\"[(64, 3, 2, 2, True), (128, 3, 2, 2, True)]\"", "\n", ")", "\n", "args", ".", "transformer_enc_config", "=", "getattr", "(", "\n", "args", ",", "\n", "\"transformer_enc_config\"", ",", "\n", "\"((1024, 16, 4096, True, 0.15, 0.15, 0.15),) * 16\"", ",", "\n", ")", "\n", "args", ".", "enc_output_dim", "=", "getattr", "(", "args", ",", "\"enc_output_dim\"", ",", "1024", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.w2l_conv_glu_enc.W2lConvGluEncoderModel.__init__": [[44, 46], ["fairseq.models.FairseqEncoderModel.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["    ", "def", "__init__", "(", "self", ",", "encoder", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "encoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.w2l_conv_glu_enc.W2lConvGluEncoderModel.add_args": [[47, 70], ["parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add model-specific arguments to the parser.\"\"\"", "\n", "parser", ".", "add_argument", "(", "\n", "\"--input-feat-per-channel\"", ",", "\n", "type", "=", "int", ",", "\n", "metavar", "=", "\"N\"", ",", "\n", "help", "=", "\"encoder input dimension per input channel\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--in-channels\"", ",", "\n", "type", "=", "int", ",", "\n", "metavar", "=", "\"N\"", ",", "\n", "help", "=", "\"number of encoder input channels\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--conv-enc-config\"", ",", "\n", "type", "=", "str", ",", "\n", "metavar", "=", "\"EXPR\"", ",", "\n", "help", "=", "\"\"\"\n    an array of tuples each containing the configuration of one conv layer\n    [(out_channels, kernel_size, padding, dropout), ...]\n            \"\"\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.w2l_conv_glu_enc.W2lConvGluEncoderModel.build_model": [[72, 83], ["getattr", "w2l_conv_glu_enc.W2lConvGluEncoder", "cls", "len", "eval"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dictionary.BertDictionary.cls", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval"], ["", "@", "classmethod", "\n", "def", "build_model", "(", "cls", ",", "args", ",", "task", ")", ":", "\n", "        ", "\"\"\"Build a new model instance.\"\"\"", "\n", "conv_enc_config", "=", "getattr", "(", "args", ",", "\"conv_enc_config\"", ",", "default_conv_enc_config", ")", "\n", "encoder", "=", "W2lConvGluEncoder", "(", "\n", "vocab_size", "=", "len", "(", "task", ".", "target_dictionary", ")", ",", "\n", "input_feat_per_channel", "=", "args", ".", "input_feat_per_channel", ",", "\n", "in_channels", "=", "args", ".", "in_channels", ",", "\n", "conv_enc_config", "=", "eval", "(", "conv_enc_config", ")", ",", "\n", ")", "\n", "return", "cls", "(", "encoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.w2l_conv_glu_enc.W2lConvGluEncoderModel.get_normalized_probs": [[84, 88], ["super().get_normalized_probs"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.get_normalized_probs"], ["", "def", "get_normalized_probs", "(", "self", ",", "net_output", ",", "log_probs", ",", "sample", "=", "None", ")", ":", "\n", "        ", "lprobs", "=", "super", "(", ")", ".", "get_normalized_probs", "(", "net_output", ",", "log_probs", ",", "sample", ")", "\n", "lprobs", ".", "batch_first", "=", "False", "\n", "return", "lprobs", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.w2l_conv_glu_enc.W2lConvGluEncoder.__init__": [[91, 119], ["fairseq.models.FairseqEncoder.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "ValueError", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Linear.weight.data.mul_", "w2l_conv_glu_enc.W2lConvGluEncoder.conv_layers.append", "w2l_conv_glu_enc.W2lConvGluEncoder.dropouts.append", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear.weight.data.mul_", "w2l_conv_glu_enc.W2lConvGluEncoder.linear_layers.append", "math.sqrt", "torch.utils.weight_norm", "torch.utils.weight_norm", "torch.utils.weight_norm", "ValueError", "math.sqrt", "torch.utils.weight_norm", "torch.utils.weight_norm", "torch.utils.weight_norm"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear"], ["    ", "def", "__init__", "(", "\n", "self", ",", "vocab_size", ",", "input_feat_per_channel", ",", "in_channels", ",", "conv_enc_config", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "None", ")", "\n", "\n", "self", ".", "input_dim", "=", "input_feat_per_channel", "\n", "if", "in_channels", "!=", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\"only 1 input channel is currently supported\"", ")", "\n", "\n", "", "self", ".", "conv_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "linear_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "dropouts", "=", "[", "]", "\n", "cur_channels", "=", "input_feat_per_channel", "\n", "\n", "for", "out_channels", ",", "kernel_size", ",", "padding", ",", "dropout", "in", "conv_enc_config", ":", "\n", "            ", "layer", "=", "nn", ".", "Conv1d", "(", "cur_channels", ",", "out_channels", ",", "kernel_size", ",", "padding", "=", "padding", ")", "\n", "layer", ".", "weight", ".", "data", ".", "mul_", "(", "math", ".", "sqrt", "(", "3", ")", ")", "# match wav2letter init", "\n", "self", ".", "conv_layers", ".", "append", "(", "nn", ".", "utils", ".", "weight_norm", "(", "layer", ")", ")", "\n", "self", ".", "dropouts", ".", "append", "(", "dropout", ")", "\n", "if", "out_channels", "%", "2", "!=", "0", ":", "\n", "                ", "raise", "ValueError", "(", "\"odd # of out_channels is incompatible with GLU\"", ")", "\n", "", "cur_channels", "=", "out_channels", "//", "2", "# halved by GLU", "\n", "\n", "", "for", "out_channels", "in", "[", "2", "*", "cur_channels", ",", "vocab_size", "]", ":", "\n", "            ", "layer", "=", "nn", ".", "Linear", "(", "cur_channels", ",", "out_channels", ")", "\n", "layer", ".", "weight", ".", "data", ".", "mul_", "(", "math", ".", "sqrt", "(", "3", ")", ")", "\n", "self", ".", "linear_layers", ".", "append", "(", "nn", ".", "utils", ".", "weight_norm", "(", "layer", ")", ")", "\n", "cur_channels", "=", "out_channels", "//", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.w2l_conv_glu_enc.W2lConvGluEncoder.forward": [[120, 154], ["src_tokens.size", "src_tokens.transpose().contiguous", "range", "torch.dropout.transpose().contiguous", "torch.glu", "torch.glu", "torch.glu", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout.transpose", "len", "torch.glu", "torch.glu", "torch.glu", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout.size", "torch.dropout.size", "src_tokens.transpose", "torch.dropout.transpose", "torch.arange().view().expand().to", "torch.arange().view().expand().to", "torch.arange().view().expand().to", "torch.arange().view().expand().to", "torch.arange().view().expand().to", "torch.arange().view().expand().to", "torch.arange().view().expand().to", "torch.arange().view().expand().to", "torch.arange().view().expand().to", "src_lengths.view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "src_lengths.view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "", "def", "forward", "(", "self", ",", "src_tokens", ",", "src_lengths", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "\"\"\"\n        src_tokens: padded tensor (B, T, C * feat)\n        src_lengths: tensor of original lengths of input utterances (B,)\n        \"\"\"", "\n", "B", ",", "T", ",", "_", "=", "src_tokens", ".", "size", "(", ")", "\n", "x", "=", "src_tokens", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "# (B, feat, T) assuming C == 1", "\n", "\n", "for", "layer_idx", "in", "range", "(", "len", "(", "self", ".", "conv_layers", ")", ")", ":", "\n", "            ", "x", "=", "self", ".", "conv_layers", "[", "layer_idx", "]", "(", "x", ")", "\n", "x", "=", "F", ".", "glu", "(", "x", ",", "dim", "=", "1", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropouts", "[", "layer_idx", "]", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "# (B, T, 908)", "\n", "x", "=", "self", ".", "linear_layers", "[", "0", "]", "(", "x", ")", "\n", "x", "=", "F", ".", "glu", "(", "x", ",", "dim", "=", "2", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropouts", "[", "-", "1", "]", ")", "\n", "x", "=", "self", ".", "linear_layers", "[", "1", "]", "(", "x", ")", "\n", "\n", "assert", "x", ".", "size", "(", "0", ")", "==", "B", "\n", "assert", "x", ".", "size", "(", "1", ")", "==", "T", "\n", "\n", "encoder_out", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", "# (T, B, vocab_size)", "\n", "\n", "# need to debug this -- find a simpler/elegant way in pytorch APIs", "\n", "encoder_padding_mask", "=", "(", "\n", "torch", ".", "arange", "(", "T", ")", ".", "view", "(", "1", ",", "T", ")", ".", "expand", "(", "B", ",", "-", "1", ")", ".", "to", "(", "x", ".", "device", ")", "\n", ">=", "src_lengths", ".", "view", "(", "B", ",", "1", ")", ".", "expand", "(", "-", "1", ",", "T", ")", "\n", ")", ".", "t", "(", ")", "# (B x T) -> (T x B)", "\n", "\n", "return", "{", "\n", "\"encoder_out\"", ":", "encoder_out", ",", "# (T, B, vocab_size)", "\n", "\"encoder_padding_mask\"", ":", "encoder_padding_mask", ",", "# (T, B)", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.w2l_conv_glu_enc.W2lConvGluEncoder.reorder_encoder_out": [[156, 164], ["encoder_out[].index_select", "encoder_out[].index_select"], "methods", ["None"], ["", "def", "reorder_encoder_out", "(", "self", ",", "encoder_out", ",", "new_order", ")", ":", "\n", "        ", "encoder_out", "[", "\"encoder_out\"", "]", "=", "encoder_out", "[", "\"encoder_out\"", "]", ".", "index_select", "(", "\n", "1", ",", "new_order", "\n", ")", "\n", "encoder_out", "[", "\"encoder_padding_mask\"", "]", "=", "encoder_out", "[", "\n", "\"encoder_padding_mask\"", "\n", "]", ".", "index_select", "(", "1", ",", "new_order", ")", "\n", "return", "encoder_out", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.w2l_conv_glu_enc.W2lConvGluEncoder.max_positions": [[165, 168], ["None"], "methods", ["None"], ["", "def", "max_positions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Maximum input length supported by the encoder.\"\"\"", "\n", "return", "(", "1e6", ",", "1e6", ")", "# an arbitrary large number", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.w2l_conv_glu_enc.w2l_conv_glu_enc": [[170, 175], ["fairseq.models.register_model_architecture", "getattr", "getattr", "getattr"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture"], ["", "", "@", "register_model_architecture", "(", "\"asr_w2l_conv_glu_encoder\"", ",", "\"w2l_conv_glu_enc\"", ")", "\n", "def", "w2l_conv_glu_enc", "(", "args", ")", ":", "\n", "    ", "args", ".", "input_feat_per_channel", "=", "getattr", "(", "args", ",", "\"input_feat_per_channel\"", ",", "80", ")", "\n", "args", ".", "in_channels", "=", "getattr", "(", "args", ",", "\"in_channels\"", ",", "1", ")", "\n", "args", ".", "conv_enc_config", "=", "getattr", "(", "args", ",", "\"conv_enc_config\"", ",", "default_conv_enc_config", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv_lm.FConvLanguageModel.__init__": [[17, 19], ["fairseq.models.FairseqLanguageModel.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["    ", "def", "__init__", "(", "self", ",", "decoder", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "decoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv_lm.FConvLanguageModel.add_args": [[20, 38], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add model-specific arguments to the parser.\"\"\"", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'dropout probability'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-embed-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'decoder embedding dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-layers'", ",", "type", "=", "str", ",", "metavar", "=", "'EXPR'", ",", "\n", "help", "=", "'decoder layers [(dim, kernel_size), ...]'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-out-embed-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'decoder output embedding dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--adaptive-softmax-cutoff'", ",", "metavar", "=", "'EXPR'", ",", "\n", "help", "=", "'comma separated list of adaptive softmax cutoff points. '", "\n", "'Must be used with adaptive_loss criterion'", ")", "\n", "parser", ".", "add_argument", "(", "'--adaptive-softmax-dropout'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'sets adaptive softmax dropout for the tail projections'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-attention'", ",", "type", "=", "str", ",", "metavar", "=", "'EXPR'", ",", "\n", "help", "=", "'decoder attention [True, ...]'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv_lm.FConvLanguageModel.build_model": [[39, 65], ["fconv_lm.base_lm_architecture", "fairseq.models.fconv.FConvDecoder", "fconv_lm.FConvLanguageModel", "hasattr", "hasattr", "eval", "eval", "fairseq.options.eval_str_list"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lightconv_lm.base_lm_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.eval_str_list"], ["", "@", "classmethod", "\n", "def", "build_model", "(", "cls", ",", "args", ",", "task", ")", ":", "\n", "        ", "\"\"\"Build a new model instance.\"\"\"", "\n", "# make sure all arguments are present in older models", "\n", "base_lm_architecture", "(", "args", ")", "\n", "\n", "if", "hasattr", "(", "args", ",", "'max_target_positions'", ")", "and", "not", "hasattr", "(", "args", ",", "'tokens_per_sample'", ")", ":", "\n", "            ", "args", ".", "tokens_per_sample", "=", "args", ".", "max_target_positions", "\n", "\n", "", "decoder", "=", "FConvDecoder", "(", "\n", "dictionary", "=", "task", ".", "target_dictionary", ",", "\n", "embed_dim", "=", "args", ".", "decoder_embed_dim", ",", "\n", "convolutions", "=", "eval", "(", "args", ".", "decoder_layers", ")", ",", "\n", "out_embed_dim", "=", "args", ".", "decoder_embed_dim", ",", "\n", "attention", "=", "eval", "(", "args", ".", "decoder_attention", ")", ",", "\n", "dropout", "=", "args", ".", "dropout", ",", "\n", "max_positions", "=", "args", ".", "tokens_per_sample", ",", "\n", "share_embed", "=", "False", ",", "\n", "positional_embeddings", "=", "False", ",", "\n", "adaptive_softmax_cutoff", "=", "(", "\n", "options", ".", "eval_str_list", "(", "args", ".", "adaptive_softmax_cutoff", ",", "type", "=", "int", ")", "\n", "if", "args", ".", "criterion", "==", "'adaptive_loss'", "else", "None", "\n", ")", ",", "\n", "adaptive_softmax_dropout", "=", "args", ".", "adaptive_softmax_dropout", ",", "\n", ")", "\n", "return", "FConvLanguageModel", "(", "decoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv_lm.base_lm_architecture": [[67, 75], ["fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture"], ["", "", "@", "register_model_architecture", "(", "'fconv_lm'", ",", "'fconv_lm'", ")", "\n", "def", "base_lm_architecture", "(", "args", ")", ":", "\n", "    ", "args", ".", "dropout", "=", "getattr", "(", "args", ",", "'dropout'", ",", "0.1", ")", "\n", "args", ".", "decoder_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_embed_dim'", ",", "128", ")", "\n", "args", ".", "decoder_layers", "=", "getattr", "(", "args", ",", "'decoder_layers'", ",", "'[(1268, 4)] * 13'", ")", "\n", "args", ".", "decoder_attention", "=", "getattr", "(", "args", ",", "'decoder_attention'", ",", "'False'", ")", "\n", "args", ".", "adaptive_softmax_cutoff", "=", "getattr", "(", "args", ",", "'adaptive_softmax_cutoff'", ",", "None", ")", "\n", "args", ".", "adaptive_softmax_dropout", "=", "getattr", "(", "args", ",", "'adaptive_softmax_dropout'", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv_lm.fconv_lm_dauphin_wikitext103": [[77, 91], ["fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "getattr", "fconv_lm.base_lm_architecture"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lightconv_lm.base_lm_architecture"], ["", "@", "register_model_architecture", "(", "'fconv_lm'", ",", "'fconv_lm_dauphin_wikitext103'", ")", "\n", "def", "fconv_lm_dauphin_wikitext103", "(", "args", ")", ":", "\n", "    ", "layers", "=", "'[(850, 6)] * 3'", "\n", "layers", "+=", "' + [(850, 1)] * 1'", "\n", "layers", "+=", "' + [(850, 5)] * 4'", "\n", "layers", "+=", "' + [(850, 1)] * 1'", "\n", "layers", "+=", "' + [(850, 4)] * 3'", "\n", "layers", "+=", "' + [(1024, 4)] * 1'", "\n", "layers", "+=", "' + [(2048, 4)] * 1'", "\n", "args", ".", "decoder_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_embed_dim'", ",", "280", ")", "\n", "args", ".", "decoder_layers", "=", "getattr", "(", "args", ",", "'decoder_layers'", ",", "layers", ")", "\n", "args", ".", "decoder_attention", "=", "getattr", "(", "args", ",", "'decoder_attention'", ",", "'False'", ")", "\n", "args", ".", "adaptive_softmax_cutoff", "=", "getattr", "(", "args", ",", "'adaptive_softmax_cutoff'", ",", "'10000,20000,200000'", ")", "\n", "base_lm_architecture", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv_lm.fconv_lm_dauphin_gbw": [[93, 105], ["fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "getattr", "fconv_lm.base_lm_architecture"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lightconv_lm.base_lm_architecture"], ["", "@", "register_model_architecture", "(", "'fconv_lm'", ",", "'fconv_lm_dauphin_gbw'", ")", "\n", "def", "fconv_lm_dauphin_gbw", "(", "args", ")", ":", "\n", "    ", "layers", "=", "'[(512, 5)]'", "\n", "layers", "+=", "' + [(128, 1, 0), (128, 5, 0), (512, 1, 3)] * 3'", "\n", "layers", "+=", "' + [(512, 1, 0), (512, 5, 0), (1024, 1, 3)] * 3'", "\n", "layers", "+=", "' + [(1024, 1, 0), (1024, 5, 0), (2048, 1, 3)] * 6'", "\n", "layers", "+=", "' + [(1024, 1, 0), (1024, 5, 0), (4096, 1, 3)]'", "\n", "args", ".", "decoder_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_embed_dim'", ",", "128", ")", "\n", "args", ".", "decoder_layers", "=", "getattr", "(", "args", ",", "'decoder_layers'", ",", "layers", ")", "\n", "args", ".", "decoder_attention", "=", "getattr", "(", "args", ",", "'decoder_attention'", ",", "'False'", ")", "\n", "args", ".", "adaptive_softmax_cutoff", "=", "getattr", "(", "args", ",", "'adaptive_softmax_cutoff'", ",", "'10000,50000,200000'", ")", "\n", "base_lm_architecture", "(", "args", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer_from_pretrained_xlm.TransformerFromPretrainedXLMModel.add_args": [[23, 42], ["fairseq.models.transformer.TransformerModel.add_args", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.add_args"], ["    ", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add model-specific arguments to the parser.\"\"\"", "\n", "TransformerModel", ".", "add_args", "(", "parser", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--pretrained-xlm-checkpoint\"", ",", "\n", "type", "=", "str", ",", "\n", "metavar", "=", "\"STR\"", ",", "\n", "help", "=", "\"XLM model to use for initializing transformer encoder and/or decoder\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--init-encoder-only\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"if set, don't load the XLM weights and embeddings into decoder\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--init-decoder-only\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"if set, don't load the XLM weights and embeddings into encoder\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer_from_pretrained_xlm.TransformerFromPretrainedXLMModel.build_model": [[44, 64], ["hasattr", "super().build_model", "isinstance", "isinstance", "getattr", "getattr"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.build_model"], ["", "@", "classmethod", "\n", "def", "build_model", "(", "self", ",", "args", ",", "task", ",", "cls_dictionary", "=", "MaskedLMDictionary", ")", ":", "\n", "        ", "assert", "hasattr", "(", "args", ",", "\"pretrained_xlm_checkpoint\"", ")", ",", "(", "\n", "\"You must specify a path for --pretrained-xlm-checkpoint to use \"", "\n", "\"--arch transformer_from_pretrained_xlm\"", "\n", ")", "\n", "assert", "isinstance", "(", "task", ".", "source_dictionary", ",", "cls_dictionary", ")", "and", "isinstance", "(", "\n", "task", ".", "target_dictionary", ",", "cls_dictionary", "\n", ")", ",", "(", "\n", "\"You should use a MaskedLMDictionary when using --arch \"", "\n", "\"transformer_from_pretrained_xlm because the pretrained XLM model \"", "\n", "\"was trained using data binarized with MaskedLMDictionary. \"", "\n", "\"For translation, you may want to use --task \"", "\n", "\"translation_from_pretrained_xlm\"", "\n", ")", "\n", "assert", "not", "(", "\n", "getattr", "(", "args", ",", "\"init_encoder_only\"", ",", "False", ")", "\n", "and", "getattr", "(", "args", ",", "\"init_decoder_only\"", ",", "False", ")", "\n", ")", ",", "\"Only one of --init-encoder-only and --init-decoder-only can be set.\"", "\n", "return", "super", "(", ")", ".", "build_model", "(", "args", ",", "task", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer_from_pretrained_xlm.TransformerFromPretrainedXLMModel.build_encoder": [[65, 68], ["transformer_from_pretrained_xlm.TransformerEncoderFromPretrainedXLM"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "build_encoder", "(", "cls", ",", "args", ",", "src_dict", ",", "embed_tokens", ")", ":", "\n", "        ", "return", "TransformerEncoderFromPretrainedXLM", "(", "args", ",", "src_dict", ",", "embed_tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer_from_pretrained_xlm.TransformerFromPretrainedXLMModel.build_decoder": [[69, 72], ["transformer_from_pretrained_xlm.TransformerDecoderFromPretrainedXLM"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "build_decoder", "(", "cls", ",", "args", ",", "tgt_dict", ",", "embed_tokens", ")", ":", "\n", "        ", "return", "TransformerDecoderFromPretrainedXLM", "(", "args", ",", "tgt_dict", ",", "embed_tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer_from_pretrained_xlm.TransformerEncoderFromPretrainedXLM.__init__": [[115, 130], ["fairseq.models.transformer.TransformerEncoder.__init__", "getattr", "hasattr", "transformer_from_pretrained_xlm.upgrade_state_dict_with_xlm_weights", "transformer_from_pretrained_xlm.TransformerEncoderFromPretrainedXLM.load_state_dict", "transformer_from_pretrained_xlm.TransformerEncoderFromPretrainedXLM.state_dict"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer_from_pretrained_xlm.upgrade_state_dict_with_xlm_weights", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.load_state_dict", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.state_dict"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "dictionary", ",", "embed_tokens", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "dictionary", ",", "embed_tokens", ")", "\n", "if", "getattr", "(", "args", ",", "'init_decoder_only'", ",", "False", ")", ":", "\n", "# Don't load XLM weights for encoder if --init-decoder-only", "\n", "            ", "return", "\n", "\n", "", "assert", "hasattr", "(", "args", ",", "\"pretrained_xlm_checkpoint\"", ")", ",", "(", "\n", "\"--pretrained-xlm-checkpoint must be specified to load Transformer \"", "\n", "\"encoder from pretrained XLM\"", "\n", ")", "\n", "xlm_loaded_state_dict", "=", "upgrade_state_dict_with_xlm_weights", "(", "\n", "state_dict", "=", "self", ".", "state_dict", "(", ")", ",", "\n", "pretrained_xlm_checkpoint", "=", "args", ".", "pretrained_xlm_checkpoint", ",", "\n", ")", "\n", "self", ".", "load_state_dict", "(", "xlm_loaded_state_dict", ",", "strict", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer_from_pretrained_xlm.TransformerDecoderFromPretrainedXLM.__init__": [[134, 149], ["fairseq.models.transformer.TransformerDecoder.__init__", "getattr", "hasattr", "transformer_from_pretrained_xlm.upgrade_state_dict_with_xlm_weights", "transformer_from_pretrained_xlm.TransformerDecoderFromPretrainedXLM.load_state_dict", "transformer_from_pretrained_xlm.TransformerDecoderFromPretrainedXLM.state_dict"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer_from_pretrained_xlm.upgrade_state_dict_with_xlm_weights", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.load_state_dict", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.state_dict"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "dictionary", ",", "embed_tokens", ",", "no_encoder_attn", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "dictionary", ",", "embed_tokens", ",", "no_encoder_attn", ")", "\n", "if", "getattr", "(", "args", ",", "'init_encoder_only'", ",", "False", ")", ":", "\n", "# Don't load XLM weights for decoder if --init-encoder-only", "\n", "            ", "return", "\n", "", "assert", "hasattr", "(", "args", ",", "\"pretrained_xlm_checkpoint\"", ")", ",", "(", "\n", "\"--pretrained-xlm-checkpoint must be specified to load Transformer \"", "\n", "\"decoder from pretrained XLM\"", "\n", ")", "\n", "\n", "xlm_loaded_state_dict", "=", "upgrade_state_dict_with_xlm_weights", "(", "\n", "state_dict", "=", "self", ".", "state_dict", "(", ")", ",", "\n", "pretrained_xlm_checkpoint", "=", "args", ".", "pretrained_xlm_checkpoint", ",", "\n", ")", "\n", "self", ".", "load_state_dict", "(", "xlm_loaded_state_dict", ",", "strict", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer_from_pretrained_xlm.upgrade_state_dict_with_xlm_weights": [[74, 111], ["fairseq.checkpoint_utils.load_checkpoint_to_cpu", "xlm_state_dict.keys", "os.path.exists", "IOError", "str", "key.find", "state_dict.keys"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.checkpoint_utils.load_checkpoint_to_cpu", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists"], ["", "", "def", "upgrade_state_dict_with_xlm_weights", "(", "\n", "state_dict", ":", "Dict", "[", "str", ",", "Any", "]", ",", "pretrained_xlm_checkpoint", ":", "str", "\n", ")", "->", "Dict", "[", "str", ",", "Any", "]", ":", "\n", "    ", "\"\"\"\n    Load XLM weights into a Transformer encoder or decoder model.\n\n    Args:\n        state_dict: state dict for either TransformerEncoder or\n            TransformerDecoder\n        pretrained_xlm_checkpoint: checkpoint to load XLM weights from\n\n    Raises:\n        AssertionError: If architecture (num layers, attention heads, etc.)\n            does not match between the current Transformer encoder or\n            decoder and the pretrained_xlm_checkpoint\n    \"\"\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "pretrained_xlm_checkpoint", ")", ":", "\n", "        ", "raise", "IOError", "(", "\"Model file not found: {}\"", ".", "format", "(", "pretrained_xlm_checkpoint", ")", ")", "\n", "\n", "", "state", "=", "checkpoint_utils", ".", "load_checkpoint_to_cpu", "(", "pretrained_xlm_checkpoint", ")", "\n", "xlm_state_dict", "=", "state", "[", "\"model\"", "]", "\n", "for", "key", "in", "xlm_state_dict", ".", "keys", "(", ")", ":", "\n", "\n", "        ", "for", "search_key", "in", "[", "\"embed_tokens\"", ",", "\"embed_positions\"", ",", "\"layers\"", "]", ":", "\n", "            ", "if", "search_key", "in", "key", ":", "\n", "                ", "subkey", "=", "key", "[", "key", ".", "find", "(", "search_key", ")", ":", "]", "\n", "assert", "subkey", "in", "state_dict", ",", "(", "\n", "\"{} Transformer encoder / decoder \"", "\n", "\"state_dict does not contain {}. Cannot \"", "\n", "\"load {} from pretrained XLM checkpoint \"", "\n", "\"{} into Transformer.\"", ".", "format", "(", "\n", "str", "(", "state_dict", ".", "keys", "(", ")", ")", ",", "\n", "subkey", ",", "key", ",", "pretrained_xlm_checkpoint", ")", "\n", ")", "\n", "\n", "state_dict", "[", "subkey", "]", "=", "xlm_state_dict", "[", "key", "]", "\n", "", "", "", "return", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer_from_pretrained_xlm.base_architecture": [[151, 156], ["fairseq.models.register_model_architecture", "fairseq.models.transformer.base_architecture"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.base_architecture"], ["", "", "@", "register_model_architecture", "(", "\n", "\"transformer_from_pretrained_xlm\"", ",", "\"transformer_from_pretrained_xlm\"", "\n", ")", "\n", "def", "base_architecture", "(", "args", ")", ":", "\n", "    ", "transformer_base_architecture", "(", "args", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv_self_att.FConvModelSelfAtt.hub_models": [[34, 51], ["None"], "methods", ["None"], ["\n", "@", "register_model", "(", "'fconv_self_att'", ")", "\n", "class", "FConvModelSelfAtt", "(", "FairseqEncoderDecoderModel", ")", ":", "\n", "\n", "    ", "@", "classmethod", "\n", "def", "hub_models", "(", "cls", ")", ":", "\n", "        ", "return", "{", "\n", "'conv.stories.pretrained'", ":", "{", "\n", "'path'", ":", "'https://dl.fbaipublicfiles.com/fairseq/models/stories_checkpoint.tar.gz'", ",", "\n", "'checkpoint_file'", ":", "'pretrained_checkpoint.pt'", ",", "\n", "'tokenizer'", ":", "'nltk'", ",", "\n", "}", ",", "\n", "'conv.stories'", ":", "{", "\n", "'path'", ":", "'https://dl.fbaipublicfiles.com/fairseq/models/stories_checkpoint.tar.gz'", ",", "\n", "'checkpoint_file'", ":", "'fusion_checkpoint.pt'", ",", "\n", "'tokenizer'", ":", "'nltk'", ",", "\n", "'pretrained'", ":", "'True'", ",", "\n", "'pretrained_checkpoint'", ":", "'./pretrained_checkpoint.pt'", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv_self_att.FConvModelSelfAtt.__init__": [[53, 64], ["fairseq.models.FairseqEncoderDecoderModel.__init__", "sum", "fairseq.models.CompositeEncoder"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["# Test set containing dictionaries", "\n", "'data.stories'", ":", "'https://dl.fbaipublicfiles.com/fairseq/data/stories_test.tar.bz2'", ",", "\n", "}", "\n", "\n", "", "def", "__init__", "(", "self", ",", "encoder", ",", "decoder", ",", "pretrained_encoder", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "encoder", ",", "decoder", ")", "\n", "self", ".", "encoder", ".", "num_attention_layers", "=", "sum", "(", "layer", "is", "not", "None", "for", "layer", "in", "decoder", ".", "attention", ")", "\n", "self", ".", "pretrained_encoder", "=", "pretrained_encoder", "\n", "if", "self", ".", "pretrained_encoder", "is", "None", ":", "\n", "            ", "encoders", "=", "{", "'encoder'", ":", "encoder", "}", "\n", "", "else", ":", "\n", "            ", "encoders", "=", "{", "'encoder'", ":", "encoder", ",", "'pretrained'", ":", "self", ".", "pretrained_encoder", "}", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv_self_att.FConvModelSelfAtt.add_args": [[65, 103], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["# for fusion model, CompositeEncoder contains both pretrained and training encoders", "\n", "# these are forwarded and then combined in the decoder", "\n", "", "self", ".", "encoder", "=", "CompositeEncoder", "(", "encoders", ")", "\n", "\n", "", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add model-specific arguments to the parser.\"\"\"", "\n", "# fmt: off", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'dropout probability'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-embed-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'encoder embedding dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-layers'", ",", "type", "=", "str", ",", "metavar", "=", "'EXPR'", ",", "\n", "help", "=", "'encoder layers [(dim, kernel_size), ...]'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-embed-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'decoder embedding dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-layers'", ",", "type", "=", "str", ",", "metavar", "=", "'EXPR'", ",", "\n", "help", "=", "'decoder layers [(dim, kernel_size), ...]'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-out-embed-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'decoder output embedding dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-attention'", ",", "type", "=", "str", ",", "metavar", "=", "'EXPR'", ",", "\n", "help", "=", "'decoder attention [True, ...]'", ")", "\n", "parser", ".", "add_argument", "(", "'--self-attention'", ",", "type", "=", "str", ",", "metavar", "=", "'EXPR'", ",", "\n", "help", "=", "'decoder self-attention layers, ex: [True] + [False]*5'", ")", "\n", "parser", ".", "add_argument", "(", "'--multihead-attention-nheads'", ",", "type", "=", "int", ",", "\n", "help", "=", "'Number of heads to use in attention'", ")", "\n", "parser", ".", "add_argument", "(", "'--multihead-self-attention-nheads'", ",", "type", "=", "int", ",", "\n", "help", "=", "'Number of heads to use in self-attention'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-attention'", ",", "type", "=", "str", ",", "metavar", "=", "'EXPR'", ",", "\n", "help", "=", "'encoder attention [True, ...]'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-attention-nheads'", ",", "type", "=", "int", ",", "\n", "help", "=", "'Number of heads to use in encoder attention'", ")", "\n", "parser", ".", "add_argument", "(", "'--project-input'", ",", "type", "=", "str", ",", "metavar", "=", "'EXPR'", ",", "\n", "help", "=", "'Use projections in self-attention [True, ...]'", ")", "\n", "parser", ".", "add_argument", "(", "'--gated-attention'", ",", "type", "=", "str", ",", "metavar", "=", "'EXPR'", ",", "\n", "help", "=", "'Use GLU layers in self-attention projections [True, ...]'", ")", "\n", "parser", ".", "add_argument", "(", "'--downsample'", ",", "type", "=", "str", ",", "metavar", "=", "'EXPR'", ",", "\n", "help", "=", "'Use downsampling in self-attention [True, ...]'", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrained-checkpoint'", ",", "metavar", "=", "'DIR'", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv_self_att.FConvModelSelfAtt.build_model": [[105, 159], ["eval", "fconv_self_att.FConvModelSelfAtt.FConvEncoder", "fconv_self_att.FConvModelSelfAtt.FConvDecoder", "fconv_self_att.FConvModelSelfAtt.FConvModelSelfAtt", "print", "trained_decoder.parameters", "trained_encoder.parameters", "os.path.exists", "os.path.join", "os.path.exists", "list", "list", "eval", "eval", "eval", "eval", "eval", "eval", "eval", "eval", "fairseq.checkpoint_utils.load_model_ensemble", "trained_model.children", "trained_model.children"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.checkpoint_utils.load_model_ensemble"], ["parser", ".", "add_argument", "(", "'--pretrained'", ",", "type", "=", "str", ",", "metavar", "=", "'EXPR'", ",", "\n", "help", "=", "'use pretrained model when training [True, ...]'", ")", "\n", "# fmt: on", "\n", "\n", "", "@", "classmethod", "\n", "def", "build_model", "(", "cls", ",", "args", ",", "task", ")", ":", "\n", "        ", "\"\"\"Build a new model instance.\"\"\"", "\n", "trained_encoder", ",", "trained_decoder", "=", "None", ",", "None", "\n", "pretrained", "=", "eval", "(", "args", ".", "pretrained", ")", "\n", "if", "pretrained", ":", "\n", "            ", "logger", ".", "info", "(", "'loading pretrained model'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "pretrained_checkpoint", ")", ":", "\n", "                ", "new_pretrained_checkpoint", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "args", ".", "pretrained_checkpoint", ")", "\n", "if", "os", ".", "path", ".", "exists", "(", "new_pretrained_checkpoint", ")", ":", "\n", "                    ", "args", ".", "pretrained_checkpoint", "=", "new_pretrained_checkpoint", "\n", "", "", "trained_model", "=", "checkpoint_utils", ".", "load_model_ensemble", "(", "\n", "filenames", "=", "[", "args", ".", "pretrained_checkpoint", "]", ",", "\n", "task", "=", "task", ",", "\n", ")", "[", "0", "]", "[", "0", "]", "\n", "trained_decoder", "=", "list", "(", "trained_model", ".", "children", "(", ")", ")", "[", "1", "]", "\n", "trained_encoder", "=", "list", "(", "trained_model", ".", "children", "(", ")", ")", "[", "0", "]", "\n", "\n", "# freeze pretrained model", "\n", "for", "param", "in", "trained_decoder", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "", "for", "param", "in", "trained_encoder", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "encoder", "=", "FConvEncoder", "(", "\n", "task", ".", "source_dictionary", ",", "\n", "embed_dim", "=", "args", ".", "encoder_embed_dim", ",", "\n", "convolutions", "=", "eval", "(", "args", ".", "encoder_layers", ")", ",", "\n", "dropout", "=", "args", ".", "dropout", ",", "\n", "max_positions", "=", "args", ".", "max_source_positions", ",", "\n", "attention", "=", "eval", "(", "args", ".", "encoder_attention", ")", ",", "\n", "attention_nheads", "=", "args", ".", "encoder_attention_nheads", "\n", ")", "\n", "\n", "decoder", "=", "FConvDecoder", "(", "\n", "task", ".", "target_dictionary", ",", "\n", "embed_dim", "=", "args", ".", "decoder_embed_dim", ",", "\n", "convolutions", "=", "eval", "(", "args", ".", "decoder_layers", ")", ",", "\n", "out_embed_dim", "=", "args", ".", "decoder_out_embed_dim", ",", "\n", "attention", "=", "eval", "(", "args", ".", "decoder_attention", ")", ",", "\n", "dropout", "=", "args", ".", "dropout", ",", "\n", "max_positions", "=", "args", ".", "max_target_positions", ",", "\n", "selfattention", "=", "eval", "(", "args", ".", "self_attention", ")", ",", "\n", "attention_nheads", "=", "args", ".", "multihead_attention_nheads", ",", "\n", "selfattention_nheads", "=", "args", ".", "multihead_self_attention_nheads", ",", "\n", "project_input", "=", "eval", "(", "args", ".", "project_input", ")", ",", "\n", "gated_attention", "=", "eval", "(", "args", ".", "gated_attention", ")", ",", "\n", "downsample", "=", "eval", "(", "args", ".", "downsample", ")", ",", "\n", "pretrained", "=", "pretrained", ",", "\n", "trained_decoder", "=", "trained_decoder", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv_self_att.FConvModelSelfAtt.pretrained": [[160, 163], ["None"], "methods", ["None"], ["model", "=", "FConvModelSelfAtt", "(", "encoder", ",", "decoder", ",", "trained_encoder", ")", "\n", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv_self_att.FConvEncoder.__init__": [[167, 213], ["fairseq.models.FairseqEncoder.__init__", "len", "dictionary.pad", "fconv_self_att.Embedding", "fconv_self_att.PositionalEmbedding", "fconv_self_att.FConvEncoder.FConvEncoder.__init__.expand_bool_array"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.Embedding", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.positional_embedding.PositionalEmbedding"], ["\n", "\n", "", "", "class", "FConvEncoder", "(", "FairseqEncoder", ")", ":", "\n", "    ", "\"\"\"Convolutional encoder\"\"\"", "\n", "def", "__init__", "(", "\n", "self", ",", "dictionary", ",", "embed_dim", "=", "512", ",", "max_positions", "=", "1024", ",", "\n", "convolutions", "=", "(", "(", "512", ",", "3", ")", ",", ")", "*", "20", ",", "dropout", "=", "0.1", ",", "attention", "=", "False", ",", "\n", "attention_nheads", "=", "1", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dictionary", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "num_attention_layers", "=", "None", "\n", "\n", "num_embeddings", "=", "len", "(", "dictionary", ")", "\n", "self", ".", "padding_idx", "=", "dictionary", ".", "pad", "(", ")", "\n", "self", ".", "embed_tokens", "=", "Embedding", "(", "num_embeddings", ",", "embed_dim", ",", "self", ".", "padding_idx", ")", "\n", "self", ".", "embed_positions", "=", "PositionalEmbedding", "(", "\n", "max_positions", ",", "\n", "embed_dim", ",", "\n", "self", ".", "padding_idx", ",", "\n", ")", "\n", "\n", "def", "expand_bool_array", "(", "val", ")", ":", "\n", "            ", "if", "isinstance", "(", "val", ",", "bool", ")", ":", "\n", "# expand True into [True, True, ...] and do the same with False", "\n", "                ", "return", "[", "val", "]", "*", "len", "(", "convolutions", ")", "\n", "", "return", "val", "\n", "\n", "", "attention", "=", "expand_bool_array", "(", "attention", ")", "\n", "\n", "in_channels", "=", "convolutions", "[", "0", "]", "[", "0", "]", "\n", "self", ".", "fc1", "=", "Linear", "(", "embed_dim", ",", "in_channels", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "projections", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "convolutions", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "attention", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "attproj", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", ",", "(", "out_channels", ",", "kernel_size", ")", "in", "enumerate", "(", "convolutions", ")", ":", "\n", "            ", "self", ".", "projections", ".", "append", "(", "\n", "Linear", "(", "in_channels", ",", "out_channels", ")", "if", "in_channels", "!=", "out_channels", "else", "None", "\n", ")", "\n", "self", ".", "convolutions", ".", "append", "(", "\n", "ConvTBC", "(", "in_channels", ",", "out_channels", "*", "2", ",", "kernel_size", ",", "dropout", "=", "dropout", ")", "\n", ")", "\n", "\n", "self", ".", "attention", ".", "append", "(", "\n", "SelfAttention", "(", "out_channels", ",", "embed_dim", ",", "attention_nheads", ")", "if", "attention", "[", "i", "]", "else", "None", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv_self_att.FConvEncoder.forward": [[214, 266], ["torch.dropout", "torch.dropout", "torch.dropout", "attention.transpose", "fconv_self_att.FConvEncoder.FConvEncoder.fc1", "src_tokens.eq().t", "attention.transpose", "zip", "attention.transpose", "fconv_self_att.FConvEncoder.FConvEncoder.fc2", "fairseq.modules.GradMultiply.apply", "fconv_self_att.FConvEncoder.FConvEncoder.embed_tokens", "fconv_self_att.FConvEncoder.FConvEncoder.embed_positions", "encoder_padding_mask.t.t.any", "torch.dropout", "torch.dropout", "torch.dropout", "torch.pad", "torch.pad", "torch.pad", "conv", "torch.glu", "torch.glu", "torch.glu", "encoder_padding_mask.t.t.t", "attention.masked_fill", "math.sqrt", "src_tokens.eq", "proj", "attention.masked_fill", "attention", "math.sqrt", "encoder_padding_mask.t.t.unsqueeze", "attention.transpose.transpose", "encoder_padding_mask.t.t.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad"], ["in_channels", "=", "out_channels", "\n", "\n", "", "self", ".", "fc2", "=", "Linear", "(", "in_channels", ",", "embed_dim", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "src_tokens", ",", "src_lengths", ")", ":", "\n", "# embed tokens and positions", "\n", "        ", "x", "=", "self", ".", "embed_tokens", "(", "src_tokens", ")", "+", "self", ".", "embed_positions", "(", "src_tokens", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "input_embedding", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "# project to size of convolution", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "\n", "encoder_padding_mask", "=", "src_tokens", ".", "eq", "(", "self", ".", "padding_idx", ")", ".", "t", "(", ")", "# -> T x B", "\n", "if", "not", "encoder_padding_mask", ".", "any", "(", ")", ":", "\n", "            ", "encoder_padding_mask", "=", "None", "\n", "\n", "# B x T x C -> T x B x C", "\n", "", "x", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "# temporal convolutions", "\n", "for", "proj", ",", "conv", ",", "attention", "in", "zip", "(", "self", ".", "projections", ",", "self", ".", "convolutions", ",", "self", ".", "attention", ")", ":", "\n", "            ", "residual", "=", "x", "if", "proj", "is", "None", "else", "proj", "(", "x", ")", "\n", "\n", "if", "encoder_padding_mask", "is", "not", "None", ":", "\n", "                ", "x", "=", "x", ".", "masked_fill", "(", "encoder_padding_mask", ".", "unsqueeze", "(", "-", "1", ")", ",", "0", ")", "\n", "\n", "", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "padding_l", "=", "(", "conv", ".", "kernel_size", "[", "0", "]", "-", "1", ")", "//", "2", "\n", "padding_r", "=", "conv", ".", "kernel_size", "[", "0", "]", "//", "2", "\n", "x", "=", "F", ".", "pad", "(", "x", ",", "(", "0", ",", "0", ",", "0", ",", "0", ",", "padding_l", ",", "padding_r", ")", ")", "\n", "x", "=", "conv", "(", "x", ")", "\n", "x", "=", "F", ".", "glu", "(", "x", ",", "dim", "=", "2", ")", "\n", "if", "attention", "is", "not", "None", ":", "\n", "                ", "x", "=", "attention", "(", "x", ")", "\n", "", "x", "=", "(", "x", "+", "residual", ")", "*", "math", ".", "sqrt", "(", "0.5", ")", "\n", "\n", "# T x B x C -> B x T x C", "\n", "", "x", "=", "x", ".", "transpose", "(", "1", ",", "0", ")", "\n", "\n", "# project back to size of embedding", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "\n", "if", "encoder_padding_mask", "is", "not", "None", ":", "\n", "            ", "encoder_padding_mask", "=", "encoder_padding_mask", ".", "t", "(", ")", "# -> B x T", "\n", "x", "=", "x", ".", "masked_fill", "(", "encoder_padding_mask", ".", "unsqueeze", "(", "-", "1", ")", ",", "0", ")", "\n", "\n", "# scale gradients (this only affects backward, not forward)", "\n", "", "x", "=", "GradMultiply", ".", "apply", "(", "x", ",", "1.0", "/", "(", "2.0", "*", "self", ".", "num_attention_layers", ")", ")", "\n", "\n", "# add output to input embedding for attention", "\n", "y", "=", "(", "x", "+", "input_embedding", ".", "transpose", "(", "0", ",", "1", ")", ")", "*", "math", ".", "sqrt", "(", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv_self_att.FConvEncoder.reorder_encoder_out": [[268, 284], ["tuple", "encoder_out[].index_select", "tuple", "eo.index_select", "eo.index_select"], "methods", ["None"], ["'encoder_out'", ":", "(", "x", ",", "y", ")", ",", "\n", "'encoder_padding_mask'", ":", "encoder_padding_mask", ",", "# B x T", "\n", "}", "\n", "\n", "", "def", "reorder_encoder_out", "(", "self", ",", "encoder_out", ",", "new_order", ")", ":", "\n", "        ", "encoder_out", "[", "'encoder_out'", "]", "=", "tuple", "(", "\n", "eo", ".", "index_select", "(", "0", ",", "new_order", ")", "for", "eo", "in", "encoder_out", "[", "'encoder_out'", "]", "\n", ")", "\n", "\n", "if", "encoder_out", "[", "'encoder_padding_mask'", "]", "is", "not", "None", ":", "\n", "            ", "encoder_out", "[", "'encoder_padding_mask'", "]", "=", "encoder_out", "[", "'encoder_padding_mask'", "]", ".", "index_select", "(", "0", ",", "new_order", ")", "\n", "\n", "", "if", "'pretrained'", "in", "encoder_out", ":", "\n", "            ", "encoder_out", "[", "'pretrained'", "]", "[", "'encoder_out'", "]", "=", "tuple", "(", "\n", "eo", ".", "index_select", "(", "0", ",", "new_order", ")", "\n", "for", "eo", "in", "encoder_out", "[", "'pretrained'", "]", "[", "'encoder_out'", "]", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv_self_att.FConvEncoder.max_positions": [[285, 288], ["fconv_self_att.FConvEncoder.FConvEncoder.embed_positions.max_positions"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.max_positions"], [")", "\n", "\n", "", "return", "encoder_out", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv_self_att.FConvDecoder.__init__": [[292, 396], ["fairseq.models.FairseqDecoder.__init__", "fconv_self_att.FConvDecoder.FConvDecoder.register_buffer", "fconv_self_att.FConvDecoder.FConvDecoder.__init__.expand_bool_array"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["\n", "\n", "", "", "@", "with_incremental_state", "\n", "class", "FConvDecoder", "(", "FairseqDecoder", ")", ":", "\n", "    ", "\"\"\"Convolutional decoder\"\"\"", "\n", "def", "__init__", "(", "\n", "self", ",", "dictionary", ",", "embed_dim", "=", "512", ",", "out_embed_dim", "=", "256", ",", "max_positions", "=", "1024", ",", "\n", "convolutions", "=", "(", "(", "512", ",", "3", ")", ",", ")", "*", "8", ",", "attention", "=", "True", ",", "dropout", "=", "0.1", ",", "\n", "selfattention", "=", "False", ",", "attention_nheads", "=", "1", ",", "selfattention_nheads", "=", "1", ",", "\n", "project_input", "=", "False", ",", "gated_attention", "=", "False", ",", "downsample", "=", "False", ",", "\n", "pretrained", "=", "False", ",", "trained_decoder", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dictionary", ")", "\n", "self", ".", "register_buffer", "(", "'version'", ",", "torch", ".", "Tensor", "(", "[", "2", "]", ")", ")", "\n", "self", ".", "pretrained", "=", "pretrained", "\n", "self", ".", "pretrained_decoder", "=", "trained_decoder", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "need_attn", "=", "True", "\n", "in_channels", "=", "convolutions", "[", "0", "]", "[", "0", "]", "\n", "\n", "def", "expand_bool_array", "(", "val", ")", ":", "\n", "            ", "if", "isinstance", "(", "val", ",", "bool", ")", ":", "\n", "# expand True into [True, True, ...] and do the same with False", "\n", "                ", "return", "[", "val", "]", "*", "len", "(", "convolutions", ")", "\n", "", "return", "val", "\n", "\n", "", "attention", "=", "expand_bool_array", "(", "attention", ")", "\n", "selfattention", "=", "expand_bool_array", "(", "selfattention", ")", "\n", "\n", "if", "not", "isinstance", "(", "attention", ",", "list", ")", "or", "len", "(", "attention", ")", "!=", "len", "(", "convolutions", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Attention is expected to be a list of booleans of '", "\n", "'length equal to the number of layers.'", ")", "\n", "\n", "", "num_embeddings", "=", "len", "(", "dictionary", ")", "\n", "padding_idx", "=", "dictionary", ".", "pad", "(", ")", "\n", "self", ".", "embed_tokens", "=", "Embedding", "(", "num_embeddings", ",", "embed_dim", ",", "padding_idx", ")", "\n", "\n", "self", ".", "embed_positions", "=", "PositionalEmbedding", "(", "\n", "max_positions", ",", "\n", "embed_dim", ",", "\n", "padding_idx", ",", "\n", ")", "\n", "\n", "self", ".", "fc1", "=", "Linear", "(", "embed_dim", ",", "in_channels", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "projections", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "convolutions", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "attention", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "selfattention", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "attproj", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", ",", "(", "out_channels", ",", "kernel_size", ")", "in", "enumerate", "(", "convolutions", ")", ":", "\n", "            ", "self", ".", "projections", ".", "append", "(", "\n", "Linear", "(", "in_channels", ",", "out_channels", ")", "if", "in_channels", "!=", "out_channels", "else", "None", "\n", ")", "\n", "self", ".", "convolutions", ".", "append", "(", "\n", "LinearizedConv1d", "(", "\n", "in_channels", ",", "out_channels", "*", "2", ",", "kernel_size", ",", "\n", "padding", "=", "(", "kernel_size", "-", "1", ")", ",", "dropout", "=", "dropout", ",", "\n", ")", "\n", ")", "\n", "\n", "self", ".", "attention", ".", "append", "(", "\n", "DownsampledMultiHeadAttention", "(", "\n", "out_channels", ",", "embed_dim", ",", "attention_nheads", ",", "\n", "project_input", "=", "project_input", ",", "gated", "=", "False", ",", "downsample", "=", "False", ",", "\n", ")", "if", "attention", "[", "i", "]", "else", "None", "\n", ")", "\n", "\n", "self", ".", "attproj", ".", "append", "(", "\n", "Linear", "(", "out_channels", ",", "embed_dim", ",", "dropout", "=", "dropout", ")", "if", "attention", "[", "i", "]", "else", "None", "\n", ")", "\n", "self", ".", "selfattention", ".", "append", "(", "\n", "SelfAttention", "(", "\n", "out_channels", ",", "embed_dim", ",", "selfattention_nheads", ",", "\n", "project_input", "=", "project_input", ",", "gated", "=", "gated_attention", ",", "\n", "downsample", "=", "downsample", ",", "\n", ")", "if", "selfattention", "[", "i", "]", "else", "None", "\n", ")", "\n", "in_channels", "=", "out_channels", "\n", "\n", "", "self", ".", "fc2", "=", "Linear", "(", "in_channels", ",", "out_embed_dim", ")", "\n", "self", ".", "fc3", "=", "Linear", "(", "out_embed_dim", ",", "num_embeddings", ",", "dropout", "=", "dropout", ")", "\n", "\n", "# model fusion", "\n", "if", "self", ".", "pretrained", ":", "\n", "# independent gates are learned from the concatenated input", "\n", "            ", "self", ".", "gate1", "=", "nn", ".", "Sequential", "(", "Linear", "(", "out_embed_dim", "*", "2", ",", "out_embed_dim", ")", ",", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "self", ".", "gate2", "=", "nn", ".", "Sequential", "(", "Linear", "(", "out_embed_dim", "*", "2", ",", "out_embed_dim", ")", ",", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "# pretrained and trained models are joined", "\n", "self", ".", "joining", "=", "nn", ".", "Sequential", "(", "\n", "Linear", "(", "out_embed_dim", "*", "2", ",", "out_embed_dim", "*", "2", ")", ",", "\n", "LayerNorm", "(", "out_embed_dim", "*", "2", ")", ",", "\n", "nn", ".", "GLU", "(", ")", ",", "\n", "Linear", "(", "out_embed_dim", ",", "out_embed_dim", "*", "2", ")", ",", "\n", "LayerNorm", "(", "out_embed_dim", "*", "2", ")", ",", "\n", "nn", ".", "GLU", "(", ")", ",", "\n", "Linear", "(", "out_embed_dim", ",", "out_embed_dim", ")", ",", "\n", "LayerNorm", "(", "out_embed_dim", ")", "\n", ")", "\n", "# pretrained model contains an output layer that is nhid -> vocab size", "\n", "# but the models are combined in their hidden state", "\n", "# the hook stores the output of the pretrained model forward", "\n", "self", ".", "pretrained_outputs", "=", "{", "}", "\n", "\n", "def", "save_output", "(", ")", ":", "\n", "                ", "def", "hook", "(", "a", ",", "b", ",", "output", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv_self_att.FConvDecoder.forward": [[397, 467], ["fconv_self_att.FConvDecoder.FConvDecoder._split_encoder_out", "fconv_self_att.FConvDecoder.FConvDecoder.embed_positions", "torch.dropout", "torch.dropout", "torch.dropout", "fconv_self_att.FConvDecoder.FConvDecoder.transpose", "fconv_self_att.FConvDecoder.FConvDecoder.fc1", "fconv_self_att.FConvDecoder.FConvDecoder.transpose", "zip", "fconv_self_att.FConvDecoder.FConvDecoder.transpose", "fconv_self_att.FConvDecoder.FConvDecoder.fc2", "torch.dropout", "torch.dropout", "torch.dropout", "fconv_self_att.FConvDecoder.FConvDecoder.embed_tokens", "torch.dropout", "torch.dropout", "torch.dropout", "conv", "torch.glu", "torch.glu", "torch.glu", "fconv_self_att.FConvDecoder.FConvDecoder.fc3", "fconv_self_att.FConvDecoder.FConvDecoder.pretrained_decoder.forward", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "fconv_self_att.FConvDecoder.FConvDecoder.gate1", "fconv_self_att.FConvDecoder.FConvDecoder.gate2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "fconv_self_att.FConvDecoder.FConvDecoder.joining", "fconv_self_att.FConvDecoder.FConvDecoder.fc3", "proj", "attention", "fconv_self_att.FConvDecoder.FConvDecoder.", "math.sqrt", "attproj", "avg_attn_scores.add_"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv.FConvDecoder._split_encoder_out", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.forward"], ["                    ", "self", ".", "pretrained_outputs", "[", "\"out\"", "]", "=", "output", "\n", "", "return", "hook", "\n", "\n", "", "self", ".", "pretrained_decoder", ".", "fc2", ".", "register_forward_hook", "(", "save_output", "(", ")", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "prev_output_tokens", ",", "encoder_out", ")", ":", "\n", "        ", "trained_encoder_out", "=", "encoder_out", "[", "'pretrained'", "]", "if", "self", ".", "pretrained", "else", "None", "\n", "encoder_out", "=", "encoder_out", "[", "'encoder'", "]", "[", "'encoder_out'", "]", "\n", "\n", "encoder_a", ",", "encoder_b", "=", "self", ".", "_split_encoder_out", "(", "encoder_out", ")", "\n", "\n", "# embed positions", "\n", "positions", "=", "self", ".", "embed_positions", "(", "prev_output_tokens", ")", "\n", "\n", "# embed tokens and positions", "\n", "x", "=", "self", ".", "embed_tokens", "(", "prev_output_tokens", ")", "+", "positions", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "target_embedding", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "# project to size of convolution", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "\n", "# B x T x C -> T x B x C", "\n", "x", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "# temporal convolutions", "\n", "avg_attn_scores", "=", "None", "\n", "for", "proj", ",", "conv", ",", "attention", ",", "selfattention", ",", "attproj", "in", "zip", "(", "\n", "self", ".", "projections", ",", "self", ".", "convolutions", ",", "self", ".", "attention", ",", "self", ".", "selfattention", ",", "self", ".", "attproj", "\n", ")", ":", "\n", "            ", "residual", "=", "x", "if", "proj", "is", "None", "else", "proj", "(", "x", ")", "\n", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "conv", "(", "x", ")", "\n", "x", "=", "F", ".", "glu", "(", "x", ",", "dim", "=", "2", ")", "\n", "\n", "# attention", "\n", "if", "attention", "is", "not", "None", ":", "\n", "                ", "r", "=", "x", "\n", "x", ",", "attn_scores", "=", "attention", "(", "attproj", "(", "x", ")", "+", "target_embedding", ",", "encoder_a", ",", "encoder_b", ")", "\n", "x", "=", "x", "+", "r", "\n", "if", "not", "self", ".", "training", "and", "self", ".", "need_attn", ":", "\n", "                    ", "if", "avg_attn_scores", "is", "None", ":", "\n", "                        ", "avg_attn_scores", "=", "attn_scores", "\n", "", "else", ":", "\n", "                        ", "avg_attn_scores", ".", "add_", "(", "attn_scores", ")", "\n", "\n", "", "", "", "if", "selfattention", "is", "not", "None", ":", "\n", "                ", "x", "=", "selfattention", "(", "x", ")", "\n", "\n", "", "x", "=", "(", "x", "+", "residual", ")", "*", "math", ".", "sqrt", "(", "0.5", ")", "\n", "\n", "# T x B x C -> B x T x C", "\n", "", "x", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "# project back to size of vocabulary", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "if", "not", "self", ".", "pretrained", ":", "\n", "            ", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "\n", "# fusion gating", "\n", "", "if", "self", ".", "pretrained", ":", "\n", "            ", "trained_x", ",", "_", "=", "self", ".", "pretrained_decoder", ".", "forward", "(", "prev_output_tokens", ",", "trained_encoder_out", ")", "\n", "y", "=", "torch", ".", "cat", "(", "[", "x", ",", "self", ".", "pretrained_outputs", "[", "\"out\"", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "gate1", "=", "self", ".", "gate1", "(", "y", ")", "\n", "gate2", "=", "self", ".", "gate2", "(", "y", ")", "\n", "gated_x1", "=", "gate1", "*", "x", "\n", "gated_x2", "=", "gate2", "*", "self", ".", "pretrained_outputs", "[", "\"out\"", "]", "\n", "fusion", "=", "torch", ".", "cat", "(", "[", "gated_x1", ",", "gated_x2", "]", ",", "dim", "=", "-", "1", ")", "\n", "fusion", "=", "self", ".", "joining", "(", "fusion", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv_self_att.FConvDecoder.max_positions": [[468, 471], ["fconv_self_att.FConvDecoder.FConvDecoder.embed_positions.max_positions"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.max_positions"], ["fusion_output", "=", "self", ".", "fc3", "(", "fusion", ")", "\n", "return", "fusion_output", ",", "avg_attn_scores", "\n", "", "else", ":", "\n", "            ", "return", "x", ",", "avg_attn_scores", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv_self_att.FConvDecoder.make_generation_fast_": [[472, 474], ["None"], "methods", ["None"], ["\n", "", "", "def", "max_positions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Maximum output length supported by the decoder.\"\"\"", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv_self_att.FConvDecoder._split_encoder_out": [[475, 483], ["encoder_a.transpose().contiguous.transpose().contiguous.transpose().contiguous", "encoder_b.transpose().contiguous.transpose().contiguous.transpose().contiguous", "encoder_a.transpose().contiguous.transpose().contiguous.transpose", "encoder_b.transpose().contiguous.transpose().contiguous.transpose"], "methods", ["None"], ["return", "self", ".", "embed_positions", ".", "max_positions", "\n", "\n", "", "def", "make_generation_fast_", "(", "self", ",", "need_attn", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "need_attn", "=", "need_attn", "\n", "\n", "", "def", "_split_encoder_out", "(", "self", ",", "encoder_out", ")", ":", "\n", "        ", "\"\"\"Split and transpose encoder outputs.\"\"\"", "\n", "# transpose only once to speed up attention layers", "\n", "encoder_a", ",", "encoder_b", "=", "encoder_out", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv_self_att.SelfAttention.__init__": [[487, 497], ["torch.Module.__init__", "fairseq.modules.DownsampledMultiHeadAttention", "fconv_self_att.Linear", "fconv_self_att.Linear", "fconv_self_att.Linear", "fairseq.modules.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.layer_norm.LayerNorm"], ["return", "result", "\n", "\n", "\n", "", "", "class", "SelfAttention", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "out_channels", ",", "embed_dim", ",", "num_heads", ",", "project_input", "=", "False", ",", "gated", "=", "False", ",", "downsample", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "attention", "=", "DownsampledMultiHeadAttention", "(", "\n", "out_channels", ",", "embed_dim", ",", "num_heads", ",", "dropout", "=", "0", ",", "bias", "=", "True", ",", "\n", "project_input", "=", "project_input", ",", "gated", "=", "gated", ",", "downsample", "=", "downsample", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv_self_att.SelfAttention.forward": [[498, 505], ["fconv_self_att.SelfAttention.SelfAttention.in_proj_q", "fconv_self_att.SelfAttention.SelfAttention.in_proj_k", "fconv_self_att.SelfAttention.SelfAttention.in_proj_v", "fconv_self_att.SelfAttention.SelfAttention.attention", "fconv_self_att.SelfAttention.SelfAttention.ln"], "methods", ["None"], ["self", ".", "in_proj_q", "=", "Linear", "(", "out_channels", ",", "embed_dim", ")", "\n", "self", ".", "in_proj_k", "=", "Linear", "(", "out_channels", ",", "embed_dim", ")", "\n", "self", ".", "in_proj_v", "=", "Linear", "(", "out_channels", ",", "embed_dim", ")", "\n", "self", ".", "ln", "=", "LayerNorm", "(", "out_channels", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "query", "=", "self", ".", "in_proj_q", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv_self_att.Embedding": [[507, 511], ["torch.Embedding", "nn.Embedding.weight.data.normal_"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.Embedding"], ["value", "=", "self", ".", "in_proj_v", "(", "x", ")", "\n", "x", ",", "_", "=", "self", ".", "attention", "(", "query", ",", "key", ",", "value", ",", "mask_future_timesteps", "=", "True", ",", "use_scalar_bias", "=", "True", ")", "\n", "return", "self", ".", "ln", "(", "x", "+", "residual", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv_self_att.PositionalEmbedding": [[513, 517], ["fairseq.modules.LearnedPositionalEmbedding", "fairseq.modules.LearnedPositionalEmbedding.weight.data.normal_"], "function", ["None"], ["    ", "m", "=", "nn", ".", "Embedding", "(", "num_embeddings", ",", "embedding_dim", ",", "padding_idx", "=", "padding_idx", ")", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.1", ")", "\n", "return", "m", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv_self_att.Linear": [[519, 525], ["torch.Linear", "nn.Linear.weight.data.normal_", "nn.Linear.bias.data.zero_", "math.sqrt"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear"], ["    ", "m", "=", "LearnedPositionalEmbedding", "(", "num_embeddings", ",", "embedding_dim", ",", "padding_idx", ")", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.1", ")", "\n", "return", "m", "\n", "\n", "\n", "", "def", "Linear", "(", "in_features", ",", "out_features", ",", "dropout", "=", "0.", ")", ":", "\n", "    ", "\"\"\"Weight-normalized Linear layer (input: N x T x C)\"\"\"", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv_self_att.LinearizedConv1d": [[527, 534], ["fairseq.modules.LinearizedConvolution", "math.sqrt", "fairseq.modules.LinearizedConvolution.weight.data.normal_", "fairseq.modules.LinearizedConvolution.bias.data.zero_"], "function", ["None"], ["m", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0", ",", "std", "=", "math", ".", "sqrt", "(", "(", "1", "-", "dropout", ")", "/", "in_features", ")", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "return", "m", "\n", "\n", "\n", "", "def", "LinearizedConv1d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "dropout", "=", "0.", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Weight-normalized Conv1d layer optimized for decoding\"\"\"", "\n", "m", "=", "LinearizedConvolution", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "**", "kwargs", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv_self_att.ConvTBC": [[536, 544], ["fconv_self_att.ConvTBC", "math.sqrt", "ConvTBC.weight.data.normal_", "ConvTBC.bias.data.zero_"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv.ConvTBC"], ["m", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0", ",", "std", "=", "std", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "return", "m", "\n", "\n", "\n", "", "def", "ConvTBC", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "dropout", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Weight-normalized Conv1d layer\"\"\"", "\n", "from", "fairseq", ".", "modules", "import", "ConvTBC", "\n", "m", "=", "ConvTBC", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "**", "kwargs", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv_self_att.base_architecture": [[546, 565], ["fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture"], ["m", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0", ",", "std", "=", "std", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "return", "m", "\n", "\n", "\n", "", "@", "register_model_architecture", "(", "'fconv_self_att'", ",", "'fconv_self_att'", ")", "\n", "def", "base_architecture", "(", "args", ")", ":", "\n", "    ", "args", ".", "dropout", "=", "getattr", "(", "args", ",", "'dropout'", ",", "0.1", ")", "\n", "args", ".", "encoder_embed_dim", "=", "getattr", "(", "args", ",", "'encoder_embed_dim'", ",", "512", ")", "\n", "args", ".", "encoder_layers", "=", "getattr", "(", "args", ",", "'encoder_layers'", ",", "'[(512, 3)] * 3'", ")", "\n", "args", ".", "decoder_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_embed_dim'", ",", "512", ")", "\n", "args", ".", "decoder_layers", "=", "getattr", "(", "args", ",", "'decoder_layers'", ",", "'[(512, 3)] * 8'", ")", "\n", "args", ".", "decoder_out_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_out_embed_dim'", ",", "256", ")", "\n", "args", ".", "decoder_attention", "=", "getattr", "(", "args", ",", "'decoder_attention'", ",", "'True'", ")", "\n", "args", ".", "self_attention", "=", "getattr", "(", "args", ",", "'self_attention'", ",", "'False'", ")", "\n", "args", ".", "encoder_attention", "=", "getattr", "(", "args", ",", "'encoder_attention'", ",", "'False'", ")", "\n", "args", ".", "multihead_attention_nheads", "=", "getattr", "(", "args", ",", "'multihead_attention_nheads'", ",", "1", ")", "\n", "args", ".", "multihead_self_attention_nheads", "=", "getattr", "(", "args", ",", "'multihead_self_attention_nheads'", ",", "1", ")", "\n", "args", ".", "encoder_attention_nheads", "=", "getattr", "(", "args", ",", "'encoder_attention_nheads'", ",", "1", ")", "\n", "args", ".", "project_input", "=", "getattr", "(", "args", ",", "'project_input'", ",", "'False'", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv_self_att.fconv_self_att_wp": [[567, 580], ["fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "fconv_self_att.base_architecture"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.base_architecture"], ["args", ".", "downsample", "=", "getattr", "(", "args", ",", "'downsample'", ",", "'False'", ")", "\n", "args", ".", "pretrained_checkpoint", "=", "getattr", "(", "args", ",", "'pretrained_checkpoint'", ",", "''", ")", "\n", "args", ".", "pretrained", "=", "getattr", "(", "args", ",", "'pretrained'", ",", "'False'", ")", "\n", "\n", "\n", "", "@", "register_model_architecture", "(", "'fconv_self_att'", ",", "'fconv_self_att_wp'", ")", "\n", "def", "fconv_self_att_wp", "(", "args", ")", ":", "\n", "    ", "args", ".", "encoder_embed_dim", "=", "getattr", "(", "args", ",", "'encoder_embed_dim'", ",", "256", ")", "\n", "args", ".", "encoder_layers", "=", "getattr", "(", "args", ",", "'encoder_layers'", ",", "'[(128, 3)] * 2 + [(512,3)] * 1'", ")", "\n", "args", ".", "decoder_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_embed_dim'", ",", "256", ")", "\n", "args", ".", "decoder_layers", "=", "getattr", "(", "args", ",", "'decoder_layers'", ",", "'[(512, 4)] * 4 + [(768, 4)] * 2 + [(1024, 4)] * 1'", ")", "\n", "args", ".", "decoder_out_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_out_embed_dim'", ",", "256", ")", "\n", "args", ".", "self_attention", "=", "getattr", "(", "args", ",", "'self_attention'", ",", "'True'", ")", "\n", "args", ".", "multihead_self_attention_nheads", "=", "getattr", "(", "args", ",", "'multihead_self_attention_nheads'", ",", "4", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_encoder.FairseqEncoder.__init__": [[12, 15], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["[", "\n", "(", "\"encoder_out\"", ",", "Tensor", ")", ",", "# T x B x C", "\n", "(", "\"encoder_padding_mask\"", ",", "Tensor", ")", ",", "# B x T", "\n", "(", "\"encoder_embedding\"", ",", "Tensor", ")", ",", "# B x T x C", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_encoder.FairseqEncoder.forward": [[16, 25], ["None"], "methods", ["None"], ["(", "\"encoder_states\"", ",", "Optional", "[", "List", "[", "Tensor", "]", "]", ")", ",", "# List[T x B x C]", "\n", "]", ",", "\n", ")", "\n", "\n", "\n", "class", "FairseqEncoder", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"Base class for encoders.\"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "dictionary", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_encoder.FairseqEncoder.reorder_encoder_out": [[26, 38], ["None"], "methods", ["None"], ["self", ".", "dictionary", "=", "dictionary", "\n", "\n", "", "def", "forward", "(", "self", ",", "src_tokens", ",", "src_lengths", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            src_tokens (LongTensor): tokens in the source language of shape\n                `(batch, src_len)`\n            src_lengths (LongTensor): lengths of each source sentence of shape\n                `(batch)`\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n", "", "def", "reorder_encoder_out", "(", "self", ",", "encoder_out", ",", "new_order", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_encoder.FairseqEncoder.max_positions": [[39, 42], ["None"], "methods", ["None"], ["        "]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_encoder.FairseqEncoder.upgrade_state_dict": [[43, 46], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.model_utils.script_skip_tensor_list": [[12, 22], ["enumerate", "t.numel", "outputs.append", "outputs.append", "xi.size", "mask.size"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["@", "torch", ".", "jit", ".", "script", "\n", "def", "script_skip_tensor_list", "(", "x", ":", "List", "[", "Tensor", "]", ",", "mask", ")", ":", "\n", "    ", "res", "=", "[", "xi", "[", "mask", "]", "if", "xi", ".", "size", "(", "0", ")", "==", "mask", ".", "size", "(", "0", ")", "else", "xi", "[", ":", ",", "mask", "]", "for", "xi", "in", "x", "]", "\n", "outputs", "=", "[", "]", "\n", "for", "i", ",", "t", "in", "enumerate", "(", "res", ")", ":", "\n", "        ", "if", "t", ".", "numel", "(", ")", "!=", "0", ":", "\n", "            ", "outputs", ".", "append", "(", "t", ")", "\n", "", "else", ":", "\n", "            ", "outputs", ".", "append", "(", "x", "[", "i", "]", ")", "\n", "", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.model_utils.script_skip_tensor": [[24, 34], ["x.size", "res.numel", "x.size", "mask.size"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "@", "torch", ".", "jit", ".", "script", "\n", "def", "script_skip_tensor", "(", "x", ":", "Tensor", ",", "mask", ")", ":", "\n", "# None case", "\n", "    ", "if", "x", ".", "size", "(", "0", ")", "==", "0", ":", "\n", "        ", "return", "x", "\n", "", "res", "=", "x", "[", "mask", "]", "if", "x", ".", "size", "(", "0", ")", "==", "mask", ".", "size", "(", "0", ")", "else", "x", "[", ":", ",", "mask", "]", "\n", "if", "res", ".", "numel", "(", ")", "==", "0", ":", "\n", "        ", "return", "x", "\n", "", "else", ":", "\n", "        ", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.model_utils.expand_2d_or_3d_tensor": [[36, 55], ["torch.cat", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.dim", "dims.append", "torch.cat.dim", "torch.cat.dim", "torch.cat.size", "torch.cat.size", "torch.zeros().to().fill_", "torch.zeros().to", "torch.zeros"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "", "@", "torch", ".", "jit", ".", "script", "\n", "def", "expand_2d_or_3d_tensor", "(", "x", ",", "trg_dim", ":", "int", ",", "padding_idx", ":", "int", ")", ":", "\n", "    ", "\"\"\"\n    Expand 2D/3D tensor on dim=1\n    \"\"\"", "\n", "if", "x", "is", "None", ":", "\n", "        ", "return", "None", "\n", "\n", "", "assert", "x", ".", "dim", "(", ")", "==", "2", "or", "x", ".", "dim", "(", ")", "==", "3", "\n", "assert", "trg_dim", ">=", "x", ".", "size", "(", "1", ")", ",", "(", "trg_dim", ",", "x", ".", "size", "(", ")", ")", "\n", "if", "trg_dim", "==", "x", ".", "size", "(", "1", ")", ":", "\n", "        ", "return", "x", "\n", "\n", "", "dims", "=", "[", "x", ".", "size", "(", "0", ")", ",", "trg_dim", "-", "x", ".", "size", "(", "1", ")", "]", "\n", "if", "x", ".", "dim", "(", ")", "==", "3", ":", "\n", "        ", "dims", ".", "append", "(", "x", ".", "size", "(", "2", ")", ")", "\n", "", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "torch", ".", "zeros", "(", "dims", ")", ".", "to", "(", "x", ")", ".", "fill_", "(", "padding_idx", ")", "]", ",", "1", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.model_utils.coalesce": [[57, 60], ["None"], "function", ["None"], ["", "@", "torch", ".", "jit", ".", "script", "\n", "def", "coalesce", "(", "x", ":", "Optional", "[", "Tensor", "]", ",", "y", ":", "Tensor", ")", "->", "Tensor", ":", "\n", "    ", "return", "x", "if", "x", "is", "not", "None", "else", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.model_utils.fill_tensors": [[62, 91], ["mask.sum", "y.size", "expand_2d_or_3d_tensor.size", "expand_2d_or_3d_tensor.size", "y.size", "model_utils.expand_2d_or_3d_tensor", "expand_2d_or_3d_tensor.dim", "y.dim", "mask.size", "expand_2d_or_3d_tensor.size", "expand_2d_or_3d_tensor.dim", "y.size", "expand_2d_or_3d_tensor.size", "y.size", "torch.tensor().type_as", "expand_2d_or_3d_tensor.size", "expand_2d_or_3d_tensor.dim", "expand_2d_or_3d_tensor.size", "y.size", "expand_2d_or_3d_tensor.dim", "torch.tensor", "y.size", "y.size"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.model_utils.expand_2d_or_3d_tensor", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "@", "torch", ".", "jit", ".", "script", "\n", "def", "fill_tensors", "(", "x", ":", "Optional", "[", "Tensor", "]", ",", "mask", ",", "y", ":", "Optional", "[", "Tensor", "]", ",", "padding_idx", ":", "int", ")", "->", "Optional", "[", "Tensor", "]", ":", "\n", "    ", "\"\"\"\n    Filling tensor x with y at masked positions (dim=0).\n    \"\"\"", "\n", "if", "x", "is", "None", "or", "x", ".", "size", "(", ")", "[", "0", "]", "==", "0", "or", "y", "is", "None", ":", "\n", "        ", "return", "x", "\n", "", "assert", "x", ".", "dim", "(", ")", "==", "y", ".", "dim", "(", ")", "and", "mask", ".", "size", "(", "0", ")", "==", "x", ".", "size", "(", "0", ")", "\n", "assert", "x", ".", "dim", "(", ")", "==", "2", "or", "(", "x", ".", "dim", "(", ")", "==", "3", "and", "x", ".", "size", "(", "2", ")", "==", "y", ".", "size", "(", "2", ")", ")", "\n", "\n", "n_selected", "=", "mask", ".", "sum", "(", ")", "\n", "if", "n_selected", "==", "0", ":", "\n", "        ", "return", "x", "\n", "", "assert", "n_selected", "==", "y", ".", "size", "(", "0", ")", "\n", "if", "n_selected", "==", "x", ".", "size", "(", "0", ")", ":", "\n", "        ", "return", "y", "\n", "\n", "", "if", "x", ".", "size", "(", "1", ")", "<", "y", ".", "size", "(", "1", ")", ":", "\n", "        ", "x", "=", "expand_2d_or_3d_tensor", "(", "x", ",", "y", ".", "size", "(", "1", ")", ",", "padding_idx", ")", "\n", "x", "[", "mask", "]", "=", "y", "\n", "", "elif", "x", ".", "size", "(", "1", ")", ">", "y", ".", "size", "(", "1", ")", ":", "\n", "        ", "x", "[", "mask", "]", "=", "torch", ".", "tensor", "(", "padding_idx", ")", ".", "type_as", "(", "x", ")", "\n", "if", "x", ".", "dim", "(", ")", "==", "2", ":", "\n", "            ", "x", "[", "mask", ",", ":", "y", ".", "size", "(", "1", ")", "]", "=", "y", "\n", "", "else", ":", "\n", "            ", "x", "[", "mask", ",", ":", "y", ".", "size", "(", "1", ")", ",", ":", "]", "=", "y", "\n", "", "", "else", ":", "\n", "        ", "x", "[", "mask", "]", "=", "y", "\n", "", "return", "x", "\n", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_incremental_decoder.FairseqIncrementalDecoder.__init__": [[31, 33], ["fairseq.models.FairseqDecoder.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["\n", "\n", "def", "__init__", "(", "self", ",", "dictionary", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_incremental_decoder.FairseqIncrementalDecoder.forward": [[34, 50], ["None"], "methods", ["None"], ["        ", "super", "(", ")", ".", "__init__", "(", "dictionary", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "prev_output_tokens", ",", "encoder_out", "=", "None", ",", "incremental_state", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            prev_output_tokens (LongTensor): shifted output tokens of shape\n                `(batch, tgt_len)`, for teacher forcing\n            encoder_out (dict, optional): output from the encoder, used for\n                encoder-side attention\n            incremental_state (dict, optional): dictionary used for storing\n                state during :ref:`Incremental decoding`\n\n        Returns:\n            tuple:\n                - the decoder's output of shape `(batch, tgt_len, vocab)`\n                - a dictionary with any model-specific outputs\n        \"\"\"", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_incremental_decoder.FairseqIncrementalDecoder.extract_features": [[51, 59], ["None"], "methods", ["None"], ["raise", "NotImplementedError", "\n", "\n", "", "def", "extract_features", "(", "self", ",", "prev_output_tokens", ",", "encoder_out", "=", "None", ",", "incremental_state", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Returns:\n            tuple:\n                - the decoder's features of shape `(batch, tgt_len, embed_dim)`\n                - a dictionary with any model-specific outputs\n        \"\"\"", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_incremental_decoder.FairseqIncrementalDecoder.reorder_incremental_state": [[60, 76], ["set", "fairseq_incremental_decoder.FairseqIncrementalDecoder.apply", "hasattr", "set.add", "module.reorder_incremental_state"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.eval_lm.WordStat.add", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer.reorder_incremental_state"], ["raise", "NotImplementedError", "\n", "\n", "", "def", "reorder_incremental_state", "(", "self", ",", "incremental_state", ",", "new_order", ")", ":", "\n", "        ", "\"\"\"Reorder incremental state.\n\n        This should be called when the order of the input has changed from the\n        previous time step. A typical use case is beam search, where the input\n        order changes between time steps based on the selection of beams.\n        \"\"\"", "\n", "seen", "=", "set", "(", ")", "\n", "for", "module", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "(", "\n", "module", "!=", "self", "\n", "and", "hasattr", "(", "module", ",", "'reorder_incremental_state'", ")", "\n", "and", "module", "not", "in", "seen", "\n", ")", ":", "\n", "                ", "seen", ".", "add", "(", "module", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_incremental_decoder.FairseqIncrementalDecoder.set_beam_size": [[77, 90], ["getattr", "set", "fairseq_incremental_decoder.FairseqIncrementalDecoder.apply", "hasattr", "set.add", "module.set_beam_size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.eval_lm.WordStat.add", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.beamable_mm.BeamableMM.set_beam_size"], ["result", "=", "module", ".", "reorder_incremental_state", "(", "incremental_state", ",", "new_order", ")", "\n", "if", "result", "is", "not", "None", ":", "\n", "                    ", "incremental_state", "=", "result", "\n", "\n", "", "", "", "", "def", "set_beam_size", "(", "self", ",", "beam_size", ")", ":", "\n", "        ", "\"\"\"Sets the beam size in the decoder and all children.\"\"\"", "\n", "if", "getattr", "(", "self", ",", "'_beam_size'", ",", "-", "1", ")", "!=", "beam_size", ":", "\n", "            ", "seen", "=", "set", "(", ")", "\n", "\n", "def", "apply_set_beam_size", "(", "module", ")", ":", "\n", "                ", "if", "module", "!=", "self", "and", "hasattr", "(", "module", ",", "'set_beam_size'", ")", "and", "module", "not", "in", "seen", ":", "\n", "                    ", "seen", ".", "add", "(", "module", ")", "\n", "module", ".", "set_beam_size", "(", "beam_size", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lstm_lm.LSTMLanguageModel.__init__": [[18, 20], ["fairseq.models.FairseqLanguageModel.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["    ", "def", "__init__", "(", "self", ",", "decoder", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "decoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lstm_lm.LSTMLanguageModel.add_args": [[21, 51], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add model-specific arguments to the parser.\"\"\"", "\n", "# fmt: off", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'dropout probability'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-embed-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'decoder embedding dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-embed-path'", ",", "type", "=", "str", ",", "metavar", "=", "'STR'", ",", "\n", "help", "=", "'path to pre-trained decoder embedding'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-hidden-size'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'decoder hidden size'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-layers'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of decoder layers'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-out-embed-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'decoder output embedding dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-attention'", ",", "type", "=", "str", ",", "metavar", "=", "'BOOL'", ",", "\n", "help", "=", "'decoder attention'", ")", "\n", "parser", ".", "add_argument", "(", "'--adaptive-softmax-cutoff'", ",", "metavar", "=", "'EXPR'", ",", "\n", "help", "=", "'comma separated list of adaptive softmax cutoff points. '", "\n", "'Must be used with adaptive_loss criterion'", ")", "\n", "\n", "# Granular dropout settings (if not specified these default to --dropout)", "\n", "parser", ".", "add_argument", "(", "'--decoder-dropout-in'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'dropout probability for decoder input embedding'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-dropout-out'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'dropout probability for decoder output'", ")", "\n", "parser", ".", "add_argument", "(", "'--share-decoder-input-output-embed'", ",", "default", "=", "False", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'share decoder input and output embeddings'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lstm_lm.LSTMLanguageModel.build_model": [[52, 111], ["lstm_lm.base_architecture", "fairseq.models.lstm.LSTMDecoder", "cls", "getattr", "getattr", "len", "dictionary.pad", "fairseq.models.lstm.Embedding", "fairseq.utils.parse_embedding", "fairseq.utils.print_embed_overlap", "fairseq.utils.load_embedding", "lstm_lm.LSTMLanguageModel.build_model.load_pretrained_embedding_from_file"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.base_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dictionary.BertDictionary.cls", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.Embedding", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.parse_embedding", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.print_embed_overlap", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.load_embedding"], ["", "@", "classmethod", "\n", "def", "build_model", "(", "cls", ",", "args", ",", "task", ")", ":", "\n", "        ", "\"\"\"Build a new model instance.\"\"\"", "\n", "\n", "# make sure all arguments are present in older models", "\n", "base_architecture", "(", "args", ")", "\n", "\n", "if", "getattr", "(", "args", ",", "'max_target_positions'", ",", "None", ")", "is", "not", "None", ":", "\n", "            ", "max_target_positions", "=", "args", ".", "max_target_positions", "\n", "", "else", ":", "\n", "            ", "max_target_positions", "=", "getattr", "(", "args", ",", "'tokens_per_sample'", ",", "DEFAULT_MAX_TARGET_POSITIONS", ")", "\n", "\n", "", "def", "load_pretrained_embedding_from_file", "(", "embed_path", ",", "dictionary", ",", "embed_dim", ")", ":", "\n", "            ", "num_embeddings", "=", "len", "(", "dictionary", ")", "\n", "padding_idx", "=", "dictionary", ".", "pad", "(", ")", "\n", "embed_tokens", "=", "Embedding", "(", "num_embeddings", ",", "embed_dim", ",", "padding_idx", ")", "\n", "embed_dict", "=", "utils", ".", "parse_embedding", "(", "embed_path", ")", "\n", "utils", ".", "print_embed_overlap", "(", "embed_dict", ",", "dictionary", ")", "\n", "return", "utils", ".", "load_embedding", "(", "embed_dict", ",", "dictionary", ",", "embed_tokens", ")", "\n", "\n", "", "pretrained_decoder_embed", "=", "None", "\n", "if", "args", ".", "decoder_embed_path", ":", "\n", "            ", "pretrained_decoder_embed", "=", "load_pretrained_embedding_from_file", "(", "\n", "args", ".", "decoder_embed_path", ",", "\n", "task", ".", "target_dictionary", ",", "\n", "args", ".", "decoder_embed_dim", "\n", ")", "\n", "\n", "", "if", "args", ".", "share_decoder_input_output_embed", ":", "\n", "# double check all parameters combinations are valid", "\n", "            ", "if", "task", ".", "source_dictionary", "!=", "task", ".", "target_dictionary", ":", "\n", "                ", "raise", "ValueError", "(", "'--share-decoder-input-output-embeddings requires a joint dictionary'", ")", "\n", "\n", "", "if", "args", ".", "decoder_embed_dim", "!=", "args", ".", "decoder_out_embed_dim", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "'--share-decoder-input-output-embeddings requires '", "\n", "'--decoder-embed-dim to match --decoder-out-embed-dim'", "\n", ")", "\n", "\n", "", "", "decoder", "=", "LSTMDecoder", "(", "\n", "dictionary", "=", "task", ".", "dictionary", ",", "\n", "embed_dim", "=", "args", ".", "decoder_embed_dim", ",", "\n", "hidden_size", "=", "args", ".", "decoder_hidden_size", ",", "\n", "out_embed_dim", "=", "args", ".", "decoder_out_embed_dim", ",", "\n", "num_layers", "=", "args", ".", "decoder_layers", ",", "\n", "dropout_in", "=", "args", ".", "decoder_dropout_in", ",", "\n", "dropout_out", "=", "args", ".", "decoder_dropout_out", ",", "\n", "attention", "=", "options", ".", "eval_bool", "(", "args", ".", "decoder_attention", ")", ",", "\n", "encoder_output_units", "=", "0", ",", "\n", "pretrained_embed", "=", "pretrained_decoder_embed", ",", "\n", "share_input_output_embed", "=", "args", ".", "share_decoder_input_output_embed", ",", "\n", "adaptive_softmax_cutoff", "=", "(", "\n", "options", ".", "eval_str_list", "(", "args", ".", "adaptive_softmax_cutoff", ",", "type", "=", "int", ")", "\n", "if", "args", ".", "criterion", "==", "'adaptive_loss'", "else", "None", "\n", ")", ",", "\n", "max_target_positions", "=", "max_target_positions", "\n", ")", "\n", "\n", "return", "cls", "(", "decoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lstm_lm.base_architecture": [[113, 126], ["fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture"], ["", "", "@", "register_model_architecture", "(", "'lstm_lm'", ",", "'lstm_lm'", ")", "\n", "def", "base_architecture", "(", "args", ")", ":", "\n", "    ", "args", ".", "dropout", "=", "getattr", "(", "args", ",", "'dropout'", ",", "0.1", ")", "\n", "args", ".", "decoder_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_embed_dim'", ",", "512", ")", "\n", "args", ".", "decoder_embed_path", "=", "getattr", "(", "args", ",", "'decoder_embed_path'", ",", "None", ")", "\n", "args", ".", "decoder_hidden_size", "=", "getattr", "(", "args", ",", "'decoder_hidden_size'", ",", "args", ".", "decoder_embed_dim", ")", "\n", "args", ".", "decoder_layers", "=", "getattr", "(", "args", ",", "'decoder_layers'", ",", "1", ")", "\n", "args", ".", "decoder_out_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_out_embed_dim'", ",", "512", ")", "\n", "args", ".", "decoder_attention", "=", "getattr", "(", "args", ",", "'decoder_attention'", ",", "'0'", ")", "\n", "args", ".", "decoder_dropout_in", "=", "getattr", "(", "args", ",", "'decoder_dropout_in'", ",", "args", ".", "dropout", ")", "\n", "args", ".", "decoder_dropout_out", "=", "getattr", "(", "args", ",", "'decoder_dropout_out'", ",", "args", ".", "dropout", ")", "\n", "args", ".", "share_decoder_input_output_embed", "=", "getattr", "(", "args", ",", "'share_decoder_input_output_embed'", ",", "False", ")", "\n", "args", ".", "adaptive_softmax_cutoff", "=", "getattr", "(", "args", ",", "'adaptive_softmax_cutoff'", ",", "'10000,50000,200000'", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lstm.LSTMModel.__init__": [[23, 25], ["fairseq.models.FairseqEncoderDecoderModel.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["@", "register_model", "(", "'lstm'", ")", "\n", "class", "LSTMModel", "(", "FairseqEncoderDecoderModel", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "encoder", ",", "decoder", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lstm.LSTMModel.add_args": [[26, 77], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["        ", "super", "(", ")", ".", "__init__", "(", "encoder", ",", "decoder", ")", "\n", "\n", "", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add model-specific arguments to the parser.\"\"\"", "\n", "# fmt: off", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'dropout probability'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-embed-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'encoder embedding dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-embed-path'", ",", "type", "=", "str", ",", "metavar", "=", "'STR'", ",", "\n", "help", "=", "'path to pre-trained encoder embedding'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-freeze-embed'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'freeze encoder embeddings'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-hidden-size'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'encoder hidden size'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-layers'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of encoder layers'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-bidirectional'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'make all layers of encoder bidirectional'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-embed-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'decoder embedding dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-embed-path'", ",", "type", "=", "str", ",", "metavar", "=", "'STR'", ",", "\n", "help", "=", "'path to pre-trained decoder embedding'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-freeze-embed'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'freeze decoder embeddings'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-hidden-size'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'decoder hidden size'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-layers'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of decoder layers'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-out-embed-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'decoder output embedding dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-attention'", ",", "type", "=", "str", ",", "metavar", "=", "'BOOL'", ",", "\n", "help", "=", "'decoder attention'", ")", "\n", "parser", ".", "add_argument", "(", "'--adaptive-softmax-cutoff'", ",", "metavar", "=", "'EXPR'", ",", "\n", "help", "=", "'comma separated list of adaptive softmax cutoff points. '", "\n", "'Must be used with adaptive_loss criterion'", ")", "\n", "parser", ".", "add_argument", "(", "'--share-decoder-input-output-embed'", ",", "default", "=", "False", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'share decoder input and output embeddings'", ")", "\n", "parser", ".", "add_argument", "(", "'--share-all-embeddings'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'share encoder, decoder and output embeddings'", "\n", "' (requires shared dictionary and embed dim)'", ")", "\n", "\n", "# Granular dropout settings (if not specified these default to --dropout)", "\n", "parser", ".", "add_argument", "(", "'--encoder-dropout-in'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'dropout probability for encoder input embedding'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-dropout-out'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'dropout probability for encoder output'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-dropout-in'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'dropout probability for decoder input embedding'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-dropout-out'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lstm.LSTMModel.build_model": [[79, 171], ["lstm.base_architecture", "lstm.LSTMEncoder", "lstm.LSTMDecoder", "cls", "ValueError", "len", "dictionary.pad", "lstm.Embedding", "fairseq.utils.parse_embedding", "fairseq.utils.print_embed_overlap", "fairseq.utils.load_embedding", "lstm.LSTMModel.build_model.load_pretrained_embedding_from_file"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.base_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dictionary.BertDictionary.cls", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.Embedding", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.parse_embedding", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.print_embed_overlap", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.load_embedding"], ["# fmt: on", "\n", "\n", "", "@", "classmethod", "\n", "def", "build_model", "(", "cls", ",", "args", ",", "task", ")", ":", "\n", "        ", "\"\"\"Build a new model instance.\"\"\"", "\n", "# make sure that all args are properly defaulted (in case there are any new ones)", "\n", "base_architecture", "(", "args", ")", "\n", "\n", "if", "args", ".", "encoder_layers", "!=", "args", ".", "decoder_layers", ":", "\n", "            ", "raise", "ValueError", "(", "'--encoder-layers must match --decoder-layers'", ")", "\n", "\n", "", "max_source_positions", "=", "getattr", "(", "args", ",", "'max_source_positions'", ",", "DEFAULT_MAX_SOURCE_POSITIONS", ")", "\n", "max_target_positions", "=", "getattr", "(", "args", ",", "'max_target_positions'", ",", "DEFAULT_MAX_TARGET_POSITIONS", ")", "\n", "\n", "def", "load_pretrained_embedding_from_file", "(", "embed_path", ",", "dictionary", ",", "embed_dim", ")", ":", "\n", "            ", "num_embeddings", "=", "len", "(", "dictionary", ")", "\n", "padding_idx", "=", "dictionary", ".", "pad", "(", ")", "\n", "embed_tokens", "=", "Embedding", "(", "num_embeddings", ",", "embed_dim", ",", "padding_idx", ")", "\n", "embed_dict", "=", "utils", ".", "parse_embedding", "(", "embed_path", ")", "\n", "utils", ".", "print_embed_overlap", "(", "embed_dict", ",", "dictionary", ")", "\n", "return", "utils", ".", "load_embedding", "(", "embed_dict", ",", "dictionary", ",", "embed_tokens", ")", "\n", "\n", "", "if", "args", ".", "encoder_embed_path", ":", "\n", "            ", "pretrained_encoder_embed", "=", "load_pretrained_embedding_from_file", "(", "\n", "args", ".", "encoder_embed_path", ",", "task", ".", "source_dictionary", ",", "args", ".", "encoder_embed_dim", ")", "\n", "", "else", ":", "\n", "            ", "num_embeddings", "=", "len", "(", "task", ".", "source_dictionary", ")", "\n", "pretrained_encoder_embed", "=", "Embedding", "(", "\n", "num_embeddings", ",", "args", ".", "encoder_embed_dim", ",", "task", ".", "source_dictionary", ".", "pad", "(", ")", "\n", ")", "\n", "\n", "", "if", "args", ".", "share_all_embeddings", ":", "\n", "# double check all parameters combinations are valid", "\n", "            ", "if", "task", ".", "source_dictionary", "!=", "task", ".", "target_dictionary", ":", "\n", "                ", "raise", "ValueError", "(", "'--share-all-embeddings requires a joint dictionary'", ")", "\n", "", "if", "args", ".", "decoder_embed_path", "and", "(", "\n", "args", ".", "decoder_embed_path", "!=", "args", ".", "encoder_embed_path", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "'--share-all-embed not compatible with --decoder-embed-path'", "\n", ")", "\n", "", "if", "args", ".", "encoder_embed_dim", "!=", "args", ".", "decoder_embed_dim", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "'--share-all-embeddings requires --encoder-embed-dim to '", "\n", "'match --decoder-embed-dim'", "\n", ")", "\n", "", "pretrained_decoder_embed", "=", "pretrained_encoder_embed", "\n", "args", ".", "share_decoder_input_output_embed", "=", "True", "\n", "", "else", ":", "\n", "# separate decoder input embeddings", "\n", "            ", "pretrained_decoder_embed", "=", "None", "\n", "if", "args", ".", "decoder_embed_path", ":", "\n", "                ", "pretrained_decoder_embed", "=", "load_pretrained_embedding_from_file", "(", "\n", "args", ".", "decoder_embed_path", ",", "\n", "task", ".", "target_dictionary", ",", "\n", "args", ".", "decoder_embed_dim", "\n", ")", "\n", "# one last double check of parameter combinations", "\n", "", "", "if", "args", ".", "share_decoder_input_output_embed", "and", "(", "\n", "args", ".", "decoder_embed_dim", "!=", "args", ".", "decoder_out_embed_dim", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'--share-decoder-input-output-embeddings requires '", "\n", "'--decoder-embed-dim to match --decoder-out-embed-dim'", "\n", ")", "\n", "\n", "", "if", "args", ".", "encoder_freeze_embed", ":", "\n", "            ", "pretrained_encoder_embed", ".", "weight", ".", "requires_grad", "=", "False", "\n", "", "if", "args", ".", "decoder_freeze_embed", ":", "\n", "            ", "pretrained_decoder_embed", ".", "weight", ".", "requires_grad", "=", "False", "\n", "\n", "", "encoder", "=", "LSTMEncoder", "(", "\n", "dictionary", "=", "task", ".", "source_dictionary", ",", "\n", "embed_dim", "=", "args", ".", "encoder_embed_dim", ",", "\n", "hidden_size", "=", "args", ".", "encoder_hidden_size", ",", "\n", "num_layers", "=", "args", ".", "encoder_layers", ",", "\n", "dropout_in", "=", "args", ".", "encoder_dropout_in", ",", "\n", "dropout_out", "=", "args", ".", "encoder_dropout_out", ",", "\n", "bidirectional", "=", "args", ".", "encoder_bidirectional", ",", "\n", "pretrained_embed", "=", "pretrained_encoder_embed", ",", "\n", "max_source_positions", "=", "max_source_positions", "\n", ")", "\n", "decoder", "=", "LSTMDecoder", "(", "\n", "dictionary", "=", "task", ".", "target_dictionary", ",", "\n", "embed_dim", "=", "args", ".", "decoder_embed_dim", ",", "\n", "hidden_size", "=", "args", ".", "decoder_hidden_size", ",", "\n", "out_embed_dim", "=", "args", ".", "decoder_out_embed_dim", ",", "\n", "num_layers", "=", "args", ".", "decoder_layers", ",", "\n", "dropout_in", "=", "args", ".", "decoder_dropout_in", ",", "\n", "dropout_out", "=", "args", ".", "decoder_dropout_out", ",", "\n", "attention", "=", "options", ".", "eval_bool", "(", "args", ".", "decoder_attention", ")", ",", "\n", "encoder_output_units", "=", "encoder", ".", "output_units", ",", "\n", "pretrained_embed", "=", "pretrained_decoder_embed", ",", "\n", "share_input_output_embed", "=", "args", ".", "share_decoder_input_output_embed", ",", "\n", "adaptive_softmax_cutoff", "=", "(", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lstm.LSTMEncoder.__init__": [[175, 207], ["fairseq.models.FairseqEncoder.__init__", "len", "dictionary.pad", "lstm.LSTM", "lstm.Embedding"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lstm.LSTM", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.Embedding"], ["max_target_positions", "=", "max_target_positions", "\n", ")", "\n", "return", "cls", "(", "encoder", ",", "decoder", ")", "\n", "\n", "\n", "", "", "class", "LSTMEncoder", "(", "FairseqEncoder", ")", ":", "\n", "    ", "\"\"\"LSTM encoder.\"\"\"", "\n", "def", "__init__", "(", "\n", "self", ",", "dictionary", ",", "embed_dim", "=", "512", ",", "hidden_size", "=", "512", ",", "num_layers", "=", "1", ",", "\n", "dropout_in", "=", "0.1", ",", "dropout_out", "=", "0.1", ",", "bidirectional", "=", "False", ",", "\n", "left_pad", "=", "True", ",", "pretrained_embed", "=", "None", ",", "padding_value", "=", "0.", ",", "\n", "max_source_positions", "=", "DEFAULT_MAX_SOURCE_POSITIONS", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dictionary", ")", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "dropout_in", "=", "dropout_in", "\n", "self", ".", "dropout_out", "=", "dropout_out", "\n", "self", ".", "bidirectional", "=", "bidirectional", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "max_source_positions", "=", "max_source_positions", "\n", "\n", "num_embeddings", "=", "len", "(", "dictionary", ")", "\n", "self", ".", "padding_idx", "=", "dictionary", ".", "pad", "(", ")", "\n", "if", "pretrained_embed", "is", "None", ":", "\n", "            ", "self", ".", "embed_tokens", "=", "Embedding", "(", "num_embeddings", ",", "embed_dim", ",", "self", ".", "padding_idx", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "embed_tokens", "=", "pretrained_embed", "\n", "\n", "", "self", ".", "lstm", "=", "LSTM", "(", "\n", "input_size", "=", "embed_dim", ",", "\n", "hidden_size", "=", "hidden_size", ",", "\n", "num_layers", "=", "num_layers", ",", "\n", "dropout", "=", "self", ".", "dropout_out", "if", "num_layers", ">", "1", "else", "0.", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lstm.LSTMEncoder.forward": [[208, 258], ["fairseq.utils.convert_padding_direction.size", "lstm.LSTMEncoder.embed_tokens", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout.transpose", "torch.utils.rnn.pack_padded_sequence", "torch.utils.rnn.pack_padded_sequence", "torch.utils.rnn.pack_padded_sequence", "torch.dropout.new_zeros", "torch.dropout.new_zeros", "lstm.LSTMEncoder.lstm", "torch.utils.rnn.pad_packed_sequence", "torch.utils.rnn.pad_packed_sequence", "torch.utils.rnn.pad_packed_sequence", "torch.dropout", "torch.dropout", "torch.dropout", "fairseq.utils.convert_padding_direction.eq().t", "fairseq.utils.convert_padding_direction", "src_lengths.data.tolist", "list", "lstm.LSTMEncoder.forward.combine_bidir"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.convert_padding_direction"], ["bidirectional", "=", "bidirectional", ",", "\n", ")", "\n", "self", ".", "left_pad", "=", "left_pad", "\n", "self", ".", "padding_value", "=", "padding_value", "\n", "\n", "self", ".", "output_units", "=", "hidden_size", "\n", "if", "bidirectional", ":", "\n", "            ", "self", ".", "output_units", "*=", "2", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "src_tokens", ",", "src_lengths", ")", ":", "\n", "        ", "if", "self", ".", "left_pad", ":", "\n", "# nn.utils.rnn.pack_padded_sequence requires right-padding;", "\n", "# convert left-padding to right-padding", "\n", "            ", "src_tokens", "=", "utils", ".", "convert_padding_direction", "(", "\n", "src_tokens", ",", "\n", "self", ".", "padding_idx", ",", "\n", "left_to_right", "=", "True", ",", "\n", ")", "\n", "\n", "", "bsz", ",", "seqlen", "=", "src_tokens", ".", "size", "(", ")", "\n", "\n", "# embed tokens", "\n", "x", "=", "self", ".", "embed_tokens", "(", "src_tokens", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout_in", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "# B x T x C -> T x B x C", "\n", "x", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "# pack embedded source tokens into a PackedSequence", "\n", "packed_x", "=", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "x", ",", "src_lengths", ".", "data", ".", "tolist", "(", ")", ")", "\n", "\n", "# apply LSTM", "\n", "if", "self", ".", "bidirectional", ":", "\n", "            ", "state_size", "=", "2", "*", "self", ".", "num_layers", ",", "bsz", ",", "self", ".", "hidden_size", "\n", "", "else", ":", "\n", "            ", "state_size", "=", "self", ".", "num_layers", ",", "bsz", ",", "self", ".", "hidden_size", "\n", "", "h0", "=", "x", ".", "new_zeros", "(", "*", "state_size", ")", "\n", "c0", "=", "x", ".", "new_zeros", "(", "*", "state_size", ")", "\n", "packed_outs", ",", "(", "final_hiddens", ",", "final_cells", ")", "=", "self", ".", "lstm", "(", "packed_x", ",", "(", "h0", ",", "c0", ")", ")", "\n", "\n", "# unpack outputs and apply dropout", "\n", "x", ",", "_", "=", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "packed_outs", ",", "padding_value", "=", "self", ".", "padding_value", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout_out", ",", "training", "=", "self", ".", "training", ")", "\n", "assert", "list", "(", "x", ".", "size", "(", ")", ")", "==", "[", "seqlen", ",", "bsz", ",", "self", ".", "output_units", "]", "\n", "\n", "if", "self", ".", "bidirectional", ":", "\n", "\n", "            ", "def", "combine_bidir", "(", "outs", ")", ":", "\n", "                ", "out", "=", "outs", ".", "view", "(", "self", ".", "num_layers", ",", "2", ",", "bsz", ",", "-", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "return", "out", ".", "view", "(", "self", ".", "num_layers", ",", "bsz", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lstm.LSTMEncoder.reorder_encoder_out": [[260, 269], ["tuple", "encoder_out[].index_select", "eo.index_select"], "methods", ["None"], ["final_cells", "=", "combine_bidir", "(", "final_cells", ")", "\n", "\n", "", "encoder_padding_mask", "=", "src_tokens", ".", "eq", "(", "self", ".", "padding_idx", ")", ".", "t", "(", ")", "\n", "\n", "return", "{", "\n", "'encoder_out'", ":", "(", "x", ",", "final_hiddens", ",", "final_cells", ")", ",", "\n", "'encoder_padding_mask'", ":", "encoder_padding_mask", "if", "encoder_padding_mask", ".", "any", "(", ")", "else", "None", "\n", "}", "\n", "\n", "", "def", "reorder_encoder_out", "(", "self", ",", "encoder_out", ",", "new_order", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lstm.LSTMEncoder.max_positions": [[270, 273], ["int"], "methods", ["None"], ["        ", "encoder_out", "[", "'encoder_out'", "]", "=", "tuple", "(", "\n", "eo", ".", "index_select", "(", "1", ",", "new_order", ")", "\n", "for", "eo", "in", "encoder_out", "[", "'encoder_out'", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lstm.AttentionLayer.__init__": [[276, 281], ["torch.Module.__init__", "lstm.Linear", "lstm.Linear"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear"], ["encoder_out", "[", "'encoder_padding_mask'", "]", ".", "index_select", "(", "1", ",", "new_order", ")", "\n", "", "return", "encoder_out", "\n", "\n", "", "def", "max_positions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Maximum input length supported by the encoder.\"\"\"", "\n", "return", "self", ".", "max_source_positions", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lstm.AttentionLayer.forward": [[282, 306], ["lstm.AttentionLayer.input_proj", "torch.softmax", "torch.softmax", "torch.softmax", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "attn_scores.float().masked_fill_().type_as.float().masked_fill_().type_as.float().masked_fill_().type_as", "lstm.AttentionLayer.output_proj", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tanh.unsqueeze", "torch.tanh.unsqueeze", "torch.tanh.unsqueeze", "attn_scores.float().masked_fill_().type_as.float().masked_fill_().type_as.float().masked_fill_", "attn_scores.float().masked_fill_().type_as.float().masked_fill_().type_as.unsqueeze", "float", "attn_scores.float().masked_fill_().type_as.float().masked_fill_().type_as.float"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax"], ["\n", "\n", "", "", "class", "AttentionLayer", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "input_embed_dim", ",", "source_embed_dim", ",", "output_embed_dim", ",", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "input_proj", "=", "Linear", "(", "input_embed_dim", ",", "source_embed_dim", ",", "bias", "=", "bias", ")", "\n", "self", ".", "output_proj", "=", "Linear", "(", "input_embed_dim", "+", "source_embed_dim", ",", "output_embed_dim", ",", "bias", "=", "bias", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "input", ",", "source_hids", ",", "encoder_padding_mask", ")", ":", "\n", "# input: bsz x input_embed_dim", "\n", "# source_hids: srclen x bsz x source_embed_dim", "\n", "\n", "# x: bsz x source_embed_dim", "\n", "        ", "x", "=", "self", ".", "input_proj", "(", "input", ")", "\n", "\n", "# compute attention", "\n", "attn_scores", "=", "(", "source_hids", "*", "x", ".", "unsqueeze", "(", "0", ")", ")", ".", "sum", "(", "dim", "=", "2", ")", "\n", "\n", "# don't attend over padding", "\n", "if", "encoder_padding_mask", "is", "not", "None", ":", "\n", "            ", "attn_scores", "=", "attn_scores", ".", "float", "(", ")", ".", "masked_fill_", "(", "\n", "encoder_padding_mask", ",", "\n", "float", "(", "'-inf'", ")", "\n", ")", ".", "type_as", "(", "attn_scores", ")", "# FP16 support: cast to float and back", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lstm.LSTMDecoder.__init__": [[310, 357], ["fairseq.models.FairseqIncrementalDecoder.__init__", "len", "dictionary.pad", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "lstm.Embedding", "lstm.Linear", "lstm.Linear", "lstm.AttentionLayer", "lstm.Linear", "fairseq.modules.AdaptiveSoftmax", "lstm.LSTMCell", "lstm.Linear", "range"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.Embedding", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lstm.LSTMCell", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear"], ["# sum weighted sources", "\n", "x", "=", "(", "attn_scores", ".", "unsqueeze", "(", "2", ")", "*", "source_hids", ")", ".", "sum", "(", "dim", "=", "0", ")", "\n", "\n", "x", "=", "torch", ".", "tanh", "(", "self", ".", "output_proj", "(", "torch", ".", "cat", "(", "(", "x", ",", "input", ")", ",", "dim", "=", "1", ")", ")", ")", "\n", "return", "x", ",", "attn_scores", "\n", "\n", "\n", "", "", "class", "LSTMDecoder", "(", "FairseqIncrementalDecoder", ")", ":", "\n", "    ", "\"\"\"LSTM decoder.\"\"\"", "\n", "def", "__init__", "(", "\n", "self", ",", "dictionary", ",", "embed_dim", "=", "512", ",", "hidden_size", "=", "512", ",", "out_embed_dim", "=", "512", ",", "\n", "num_layers", "=", "1", ",", "dropout_in", "=", "0.1", ",", "dropout_out", "=", "0.1", ",", "attention", "=", "True", ",", "\n", "encoder_output_units", "=", "512", ",", "pretrained_embed", "=", "None", ",", "\n", "share_input_output_embed", "=", "False", ",", "adaptive_softmax_cutoff", "=", "None", ",", "\n", "max_target_positions", "=", "DEFAULT_MAX_TARGET_POSITIONS", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dictionary", ")", "\n", "self", ".", "dropout_in", "=", "dropout_in", "\n", "self", ".", "dropout_out", "=", "dropout_out", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "share_input_output_embed", "=", "share_input_output_embed", "\n", "self", ".", "need_attn", "=", "True", "\n", "self", ".", "max_target_positions", "=", "max_target_positions", "\n", "\n", "self", ".", "adaptive_softmax", "=", "None", "\n", "num_embeddings", "=", "len", "(", "dictionary", ")", "\n", "padding_idx", "=", "dictionary", ".", "pad", "(", ")", "\n", "if", "pretrained_embed", "is", "None", ":", "\n", "            ", "self", ".", "embed_tokens", "=", "Embedding", "(", "num_embeddings", ",", "embed_dim", ",", "padding_idx", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "embed_tokens", "=", "pretrained_embed", "\n", "\n", "", "self", ".", "encoder_output_units", "=", "encoder_output_units", "\n", "if", "encoder_output_units", "!=", "hidden_size", "and", "encoder_output_units", "!=", "0", ":", "\n", "            ", "self", ".", "encoder_hidden_proj", "=", "Linear", "(", "encoder_output_units", ",", "hidden_size", ")", "\n", "self", ".", "encoder_cell_proj", "=", "Linear", "(", "encoder_output_units", ",", "hidden_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "encoder_hidden_proj", "=", "self", ".", "encoder_cell_proj", "=", "None", "\n", "\n", "# disable input feeding if there is no encoder", "\n", "# input feeding is described in arxiv.org/abs/1508.04025", "\n", "", "input_feed_size", "=", "0", "if", "encoder_output_units", "==", "0", "else", "hidden_size", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "\n", "LSTMCell", "(", "\n", "input_size", "=", "input_feed_size", "+", "embed_dim", "if", "layer", "==", "0", "else", "hidden_size", ",", "\n", "hidden_size", "=", "hidden_size", ",", "\n", ")", "\n", "for", "layer", "in", "range", "(", "num_layers", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lstm.LSTMDecoder.forward": [[358, 363], ["lstm.LSTMDecoder.extract_features", "lstm.LSTMDecoder.output_layer"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_transformer.LevenshteinTransformerDecoder.extract_features", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.TransformerDecoder.output_layer"], ["]", ")", "\n", "if", "attention", ":", "\n", "# TODO make bias configurable", "\n", "            ", "self", ".", "attention", "=", "AttentionLayer", "(", "hidden_size", ",", "encoder_output_units", ",", "hidden_size", ",", "bias", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "attention", "=", "None", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lstm.LSTMDecoder.extract_features": [[364, 453], ["prev_output_tokens.size", "encoder_outs.size", "lstm.LSTMDecoder.embed_tokens", "torch.dropout", "torch.dropout", "torch.dropout", "torch.dropout.transpose", "fairseq.utils.get_incremental_state", "torch.dropout.new_zeros", "range", "fairseq.utils.set_incremental_state", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.dropout.transpose", "len", "torch.dropout.new_zeros", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "enumerate", "torch.dropout", "torch.dropout", "torch.dropout", "outs.append", "hasattr", "lstm.LSTMDecoder.additional_fc", "torch.dropout", "torch.dropout", "torch.dropout", "attn_scores.transpose.transpose.transpose", "rnn", "torch.dropout", "torch.dropout", "torch.dropout", "lstm.LSTMDecoder.attention", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "range", "lstm.LSTMDecoder.encoder_hidden_proj", "lstm.LSTMDecoder.encoder_cell_proj"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.get_incremental_state", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.set_incremental_state"], ["", "if", "hidden_size", "!=", "out_embed_dim", ":", "\n", "            ", "self", ".", "additional_fc", "=", "Linear", "(", "hidden_size", ",", "out_embed_dim", ")", "\n", "", "if", "adaptive_softmax_cutoff", "is", "not", "None", ":", "\n", "# setting adaptive_softmax dropout to dropout_out for now but can be redefined", "\n", "            ", "self", ".", "adaptive_softmax", "=", "AdaptiveSoftmax", "(", "num_embeddings", ",", "hidden_size", ",", "adaptive_softmax_cutoff", ",", "\n", "dropout", "=", "dropout_out", ")", "\n", "", "elif", "not", "self", ".", "share_input_output_embed", ":", "\n", "            ", "self", ".", "fc_out", "=", "Linear", "(", "out_embed_dim", ",", "num_embeddings", ",", "dropout", "=", "dropout_out", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "prev_output_tokens", ",", "encoder_out", "=", "None", ",", "incremental_state", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "x", ",", "attn_scores", "=", "self", ".", "extract_features", "(", "\n", "prev_output_tokens", ",", "encoder_out", ",", "incremental_state", "\n", ")", "\n", "return", "self", ".", "output_layer", "(", "x", ")", ",", "attn_scores", "\n", "\n", "", "def", "extract_features", "(", "\n", "self", ",", "prev_output_tokens", ",", "encoder_out", ",", "incremental_state", "=", "None", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Similar to *forward* but only return features.\n        \"\"\"", "\n", "if", "encoder_out", "is", "not", "None", ":", "\n", "            ", "encoder_padding_mask", "=", "encoder_out", "[", "'encoder_padding_mask'", "]", "\n", "encoder_out", "=", "encoder_out", "[", "'encoder_out'", "]", "\n", "", "else", ":", "\n", "            ", "encoder_padding_mask", "=", "None", "\n", "encoder_out", "=", "None", "\n", "\n", "", "if", "incremental_state", "is", "not", "None", ":", "\n", "            ", "prev_output_tokens", "=", "prev_output_tokens", "[", ":", ",", "-", "1", ":", "]", "\n", "", "bsz", ",", "seqlen", "=", "prev_output_tokens", ".", "size", "(", ")", "\n", "\n", "# get outputs from encoder", "\n", "if", "encoder_out", "is", "not", "None", ":", "\n", "            ", "encoder_outs", ",", "encoder_hiddens", ",", "encoder_cells", "=", "encoder_out", "[", ":", "3", "]", "\n", "srclen", "=", "encoder_outs", ".", "size", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "srclen", "=", "None", "\n", "\n", "# embed tokens", "\n", "", "x", "=", "self", ".", "embed_tokens", "(", "prev_output_tokens", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout_in", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "# B x T x C -> T x B x C", "\n", "x", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "# initialize previous states (or get from cache during incremental generation)", "\n", "cached_state", "=", "utils", ".", "get_incremental_state", "(", "self", ",", "incremental_state", ",", "'cached_state'", ")", "\n", "if", "cached_state", "is", "not", "None", ":", "\n", "            ", "prev_hiddens", ",", "prev_cells", ",", "input_feed", "=", "cached_state", "\n", "", "elif", "encoder_out", "is", "not", "None", ":", "\n", "# setup recurrent cells", "\n", "            ", "num_layers", "=", "len", "(", "self", ".", "layers", ")", "\n", "prev_hiddens", "=", "[", "encoder_hiddens", "[", "i", "]", "for", "i", "in", "range", "(", "num_layers", ")", "]", "\n", "prev_cells", "=", "[", "encoder_cells", "[", "i", "]", "for", "i", "in", "range", "(", "num_layers", ")", "]", "\n", "if", "self", ".", "encoder_hidden_proj", "is", "not", "None", ":", "\n", "                ", "prev_hiddens", "=", "[", "self", ".", "encoder_hidden_proj", "(", "x", ")", "for", "x", "in", "prev_hiddens", "]", "\n", "prev_cells", "=", "[", "self", ".", "encoder_cell_proj", "(", "x", ")", "for", "x", "in", "prev_cells", "]", "\n", "", "input_feed", "=", "x", ".", "new_zeros", "(", "bsz", ",", "self", ".", "hidden_size", ")", "\n", "", "else", ":", "\n", "# setup zero cells, since there is no encoder", "\n", "            ", "num_layers", "=", "len", "(", "self", ".", "layers", ")", "\n", "zero_state", "=", "x", ".", "new_zeros", "(", "bsz", ",", "self", ".", "hidden_size", ")", "\n", "prev_hiddens", "=", "[", "zero_state", "for", "i", "in", "range", "(", "num_layers", ")", "]", "\n", "prev_cells", "=", "[", "zero_state", "for", "i", "in", "range", "(", "num_layers", ")", "]", "\n", "input_feed", "=", "None", "\n", "\n", "", "assert", "srclen", "is", "not", "None", "or", "self", ".", "attention", "is", "None", ",", "\"attention is not supported if there are no encoder outputs\"", "\n", "attn_scores", "=", "x", ".", "new_zeros", "(", "srclen", ",", "seqlen", ",", "bsz", ")", "if", "self", ".", "attention", "is", "not", "None", "else", "None", "\n", "outs", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "seqlen", ")", ":", "\n", "# input feeding: concatenate context vector from previous time step", "\n", "            ", "if", "input_feed", "is", "not", "None", ":", "\n", "                ", "input", "=", "torch", ".", "cat", "(", "(", "x", "[", "j", ",", ":", ",", ":", "]", ",", "input_feed", ")", ",", "dim", "=", "1", ")", "\n", "", "else", ":", "\n", "                ", "input", "=", "x", "[", "j", "]", "\n", "\n", "", "for", "i", ",", "rnn", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "# recurrent cell", "\n", "                ", "hidden", ",", "cell", "=", "rnn", "(", "input", ",", "(", "prev_hiddens", "[", "i", "]", ",", "prev_cells", "[", "i", "]", ")", ")", "\n", "\n", "# hidden state becomes the input to the next layer", "\n", "input", "=", "F", ".", "dropout", "(", "hidden", ",", "p", "=", "self", ".", "dropout_out", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "# save state for next time step", "\n", "prev_hiddens", "[", "i", "]", "=", "hidden", "\n", "prev_cells", "[", "i", "]", "=", "cell", "\n", "\n", "# apply attention using the last layer's hidden state", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lstm.LSTMDecoder.output_layer": [[454, 462], ["torch.linear", "torch.linear", "torch.linear", "lstm.LSTMDecoder.fc_out"], "methods", ["None"], ["", "if", "self", ".", "attention", "is", "not", "None", ":", "\n", "                ", "out", ",", "attn_scores", "[", ":", ",", "j", ",", ":", "]", "=", "self", ".", "attention", "(", "hidden", ",", "encoder_outs", ",", "encoder_padding_mask", ")", "\n", "", "else", ":", "\n", "                ", "out", "=", "hidden", "\n", "", "out", "=", "F", ".", "dropout", "(", "out", ",", "p", "=", "self", ".", "dropout_out", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "# input feeding", "\n", "if", "input_feed", "is", "not", "None", ":", "\n", "                ", "input_feed", "=", "out", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lstm.LSTMDecoder.reorder_incremental_state": [[463, 476], ["super().reorder_incremental_state", "fairseq.utils.get_incremental_state", "tuple", "fairseq.utils.set_incremental_state", "isinstance", "state.index_select", "map", "lstm.LSTMDecoder.reorder_incremental_state.reorder_state"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer.reorder_incremental_state", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.get_incremental_state", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.set_incremental_state"], ["\n", "# save final output", "\n", "", "outs", ".", "append", "(", "out", ")", "\n", "\n", "# cache previous states (no-op except during incremental generation)", "\n", "", "utils", ".", "set_incremental_state", "(", "\n", "self", ",", "incremental_state", ",", "'cached_state'", ",", "\n", "(", "prev_hiddens", ",", "prev_cells", ",", "input_feed", ")", ",", "\n", ")", "\n", "\n", "# collect outputs across time steps", "\n", "x", "=", "torch", ".", "cat", "(", "outs", ",", "dim", "=", "0", ")", ".", "view", "(", "seqlen", ",", "bsz", ",", "self", ".", "hidden_size", ")", "\n", "\n", "# T x B x C -> B x T x C", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lstm.LSTMDecoder.max_positions": [[477, 480], ["int"], "methods", ["None"], ["x", "=", "x", ".", "transpose", "(", "1", ",", "0", ")", "\n", "\n", "if", "hasattr", "(", "self", ",", "'additional_fc'", ")", "and", "self", ".", "adaptive_softmax", "is", "None", ":", "\n", "            ", "x", "=", "self", ".", "additional_fc", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lstm.LSTMDecoder.make_generation_fast_": [[481, 483], ["None"], "methods", ["None"], ["x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout_out", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "# srclen x tgtlen x bsz -> bsz x tgtlen x srclen", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lstm.Embedding": [[485, 490], ["torch.Embedding", "torch.init.uniform_", "torch.init.constant_"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.Embedding"], ["            ", "attn_scores", "=", "attn_scores", ".", "transpose", "(", "0", ",", "2", ")", "\n", "", "else", ":", "\n", "            ", "attn_scores", "=", "None", "\n", "", "return", "x", ",", "attn_scores", "\n", "\n", "", "def", "output_layer", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lstm.LSTM": [[492, 498], ["torch.LSTM", "nn.LSTM.named_parameters", "param.data.uniform_"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lstm.LSTM"], ["if", "self", ".", "adaptive_softmax", "is", "None", ":", "\n", "            ", "if", "self", ".", "share_input_output_embed", ":", "\n", "                ", "x", "=", "F", ".", "linear", "(", "x", ",", "self", ".", "embed_tokens", ".", "weight", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "self", ".", "fc_out", "(", "x", ")", "\n", "", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lstm.LSTMCell": [[500, 506], ["torch.LSTMCell", "nn.LSTMCell.named_parameters", "param.data.uniform_"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lstm.LSTMCell"], ["        ", "super", "(", ")", ".", "reorder_incremental_state", "(", "incremental_state", ",", "new_order", ")", "\n", "cached_state", "=", "utils", ".", "get_incremental_state", "(", "self", ",", "incremental_state", ",", "'cached_state'", ")", "\n", "if", "cached_state", "is", "None", ":", "\n", "            ", "return", "\n", "\n", "", "def", "reorder_state", "(", "state", ")", ":", "\n", "            ", "if", "isinstance", "(", "state", ",", "list", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lstm.Linear": [[508, 515], ["torch.Linear", "nn.Linear.weight.data.uniform_", "nn.Linear.bias.data.uniform_"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear"], ["", "elif", "state", "is", "not", "None", ":", "\n", "                ", "return", "state", ".", "index_select", "(", "0", ",", "new_order", ")", "\n", "", "else", ":", "\n", "                ", "return", "None", "\n", "\n", "", "", "new_state", "=", "tuple", "(", "map", "(", "reorder_state", ",", "cached_state", ")", ")", "\n", "utils", ".", "set_incremental_state", "(", "self", ",", "incremental_state", ",", "'cached_state'", ",", "new_state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lstm.base_architecture": [[517, 540], ["fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture"], ["        ", "\"\"\"Maximum output length supported by the decoder.\"\"\"", "\n", "return", "self", ".", "max_target_positions", "\n", "\n", "", "def", "make_generation_fast_", "(", "self", ",", "need_attn", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "need_attn", "=", "need_attn", "\n", "\n", "\n", "", "", "def", "Embedding", "(", "num_embeddings", ",", "embedding_dim", ",", "padding_idx", ")", ":", "\n", "    ", "m", "=", "nn", ".", "Embedding", "(", "num_embeddings", ",", "embedding_dim", ",", "padding_idx", "=", "padding_idx", ")", "\n", "nn", ".", "init", ".", "uniform_", "(", "m", ".", "weight", ",", "-", "0.1", ",", "0.1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", "[", "padding_idx", "]", ",", "0", ")", "\n", "return", "m", "\n", "\n", "\n", "", "def", "LSTM", "(", "input_size", ",", "hidden_size", ",", "**", "kwargs", ")", ":", "\n", "    ", "m", "=", "nn", ".", "LSTM", "(", "input_size", ",", "hidden_size", ",", "**", "kwargs", ")", "\n", "for", "name", ",", "param", "in", "m", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "'weight'", "in", "name", "or", "'bias'", "in", "name", ":", "\n", "            ", "param", ".", "data", ".", "uniform_", "(", "-", "0.1", ",", "0.1", ")", "\n", "", "", "return", "m", "\n", "\n", "\n", "", "def", "LSTMCell", "(", "input_size", ",", "hidden_size", ",", "**", "kwargs", ")", ":", "\n", "    ", "m", "=", "nn", ".", "LSTMCell", "(", "input_size", ",", "hidden_size", ",", "**", "kwargs", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lstm.lstm_wiseman_iwslt_de_en": [[542, 553], ["fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "lstm.base_architecture"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.base_architecture"], ["        ", "if", "'weight'", "in", "name", "or", "'bias'", "in", "name", ":", "\n", "            ", "param", ".", "data", ".", "uniform_", "(", "-", "0.1", ",", "0.1", ")", "\n", "", "", "return", "m", "\n", "\n", "\n", "", "def", "Linear", "(", "in_features", ",", "out_features", ",", "bias", "=", "True", ",", "dropout", "=", "0", ")", ":", "\n", "    ", "\"\"\"Linear layer (input: N x T x C)\"\"\"", "\n", "m", "=", "nn", ".", "Linear", "(", "in_features", ",", "out_features", ",", "bias", "=", "bias", ")", "\n", "m", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "0.1", ",", "0.1", ")", "\n", "if", "bias", ":", "\n", "        ", "m", ".", "bias", ".", "data", ".", "uniform_", "(", "-", "0.1", ",", "0.1", ")", "\n", "", "return", "m", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lstm.lstm_luong_wmt_en_de": [[555, 565], ["fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "lstm.base_architecture"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.base_architecture"], ["\n", "", "@", "register_model_architecture", "(", "'lstm'", ",", "'lstm'", ")", "\n", "def", "base_architecture", "(", "args", ")", ":", "\n", "    ", "args", ".", "dropout", "=", "getattr", "(", "args", ",", "'dropout'", ",", "0.1", ")", "\n", "args", ".", "encoder_embed_dim", "=", "getattr", "(", "args", ",", "'encoder_embed_dim'", ",", "512", ")", "\n", "args", ".", "encoder_embed_path", "=", "getattr", "(", "args", ",", "'encoder_embed_path'", ",", "None", ")", "\n", "args", ".", "encoder_freeze_embed", "=", "getattr", "(", "args", ",", "'encoder_freeze_embed'", ",", "False", ")", "\n", "args", ".", "encoder_hidden_size", "=", "getattr", "(", "args", ",", "'encoder_hidden_size'", ",", "args", ".", "encoder_embed_dim", ")", "\n", "args", ".", "encoder_layers", "=", "getattr", "(", "args", ",", "'encoder_layers'", ",", "1", ")", "\n", "args", ".", "encoder_bidirectional", "=", "getattr", "(", "args", ",", "'encoder_bidirectional'", ",", "False", ")", "\n", "args", ".", "encoder_dropout_in", "=", "getattr", "(", "args", ",", "'encoder_dropout_in'", ",", "args", ".", "dropout", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lightconv.LightConvModel.hub_models": [[50, 74], ["lightconv.LightConvModel.hub_models.moses_subword"], "methods", ["None"], ["@", "classmethod", "\n", "def", "hub_models", "(", "cls", ")", ":", "\n", "# fmt: off", "\n", "\n", "        ", "def", "moses_subword", "(", "path", ")", ":", "\n", "            ", "return", "{", "\n", "'path'", ":", "path", ",", "\n", "'tokenizer'", ":", "'moses'", ",", "\n", "'bpe'", ":", "'subword_nmt'", ",", "\n", "}", "\n", "\n", "", "return", "{", "\n", "'lightconv.no_glu.iwslt14.de-en'", ":", "moses_subword", "(", "'https://dl.fbaipublicfiles.com/fairseq/models/dynamicconv/iwslt14.de-en.lightconv.tar.gz'", ")", ",", "\n", "'dynamicconv.no_glu.iwslt14.de-en'", ":", "moses_subword", "(", "'https://dl.fbaipublicfiles.com/fairseq/models/dynamicconv/iwslt14.de-en.dynamicconv.tar.gz'", ")", ",", "\n", "'lightconv.no_glu.wmt16.en-de'", ":", "moses_subword", "(", "'https://dl.fbaipublicfiles.com/fairseq/models/dynamicconv/wmt16.en-de.joined-dict.lightconv.tar.gz'", ")", ",", "\n", "'dynamicconv.no_glu.wmt16.en-de'", ":", "moses_subword", "(", "'https://dl.fbaipublicfiles.com/fairseq/models/dynamicconv/wmt16.en-de.joined-dict.dynamicconv.tar.gz'", ")", ",", "\n", "'lightconv.glu.wmt16.en-de'", ":", "moses_subword", "(", "'https://dl.fbaipublicfiles.com/fairseq/models/dynamicconv/wmt16.en-de.joined-dict.lightconv-glu.tar.gz'", ")", ",", "\n", "'dynamicconv.glu.wmt16.en-de'", ":", "moses_subword", "(", "'https://dl.fbaipublicfiles.com/fairseq/models/dynamicconv/wmt16.en-de.joined-dict.dynamicconv-glu.tar.gz'", ")", ",", "\n", "'lightconv.glu.wmt17.en-de'", ":", "moses_subword", "(", "'https://dl.fbaipublicfiles.com/fairseq/models/dynamicconv/wmt16.en-de.joined-dict.lightconv-glu.tar.gz'", ")", ",", "\n", "'dynamicconv.glu.wmt17.en-de'", ":", "moses_subword", "(", "'https://dl.fbaipublicfiles.com/fairseq/models/dynamicconv/wmt16.en-de.joined-dict.dynamicconv-glu.tar.gz'", ")", ",", "\n", "'lightconv.glu.wmt14.en-fr'", ":", "moses_subword", "(", "'https://dl.fbaipublicfiles.com/fairseq/models/dynamicconv/wmt14.en-fr.joined-dict.lightconv-glu.tar.gz'", ")", ",", "\n", "'dynamicconv.glu.wmt14.en-fr'", ":", "moses_subword", "(", "'https://dl.fbaipublicfiles.com/fairseq/models/dynamicconv/wmt14.en-fr.joined-dict.dynamicconv-glu.tar.gz'", ")", ",", "\n", "'lightconv.glu.wmt17.zh-en'", ":", "moses_subword", "(", "'https://dl.fbaipublicfiles.com/fairseq/models/dynamicconv/wmt17.zh-en.lightconv-glu.tar.gz'", ")", ",", "\n", "'dynamicconv.glu.wmt17.zh-en'", ":", "moses_subword", "(", "'https://dl.fbaipublicfiles.com/fairseq/models/dynamicconv/wmt17.zh-en.dynamicconv-glu.tar.gz'", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lightconv.LightConvModel.__init__": [[77, 79], ["fairseq.models.FairseqEncoderDecoderModel.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["", "def", "__init__", "(", "self", ",", "encoder", ",", "decoder", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "encoder", ",", "decoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lightconv.LightConvModel.add_args": [[80, 152], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "fairseq.options.eval_str_list", "fairseq.options.eval_str_list"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.eval_str_list", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.eval_str_list"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add model-specific arguments to the parser.\"\"\"", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'dropout probability'", ")", "\n", "parser", ".", "add_argument", "(", "'--attention-dropout'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'dropout probability for attention weights'", ")", "\n", "parser", ".", "add_argument", "(", "'--relu-dropout'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'dropout probability after ReLU in FFN'", ")", "\n", "parser", ".", "add_argument", "(", "'--input-dropout'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'dropout probability of the inputs'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-embed-path'", ",", "type", "=", "str", ",", "metavar", "=", "'STR'", ",", "\n", "help", "=", "'path to pre-trained encoder embedding'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-embed-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'encoder embedding dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-conv-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'encoder embedding dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-ffn-embed-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'encoder embedding dimension for FFN'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-layers'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'num encoder layers'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-attention-heads'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'num encoder attention heads or LightConv/DynamicConv heads'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-normalize-before'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'apply layernorm before each encoder block'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-learned-pos'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use learned positional embeddings in the encoder'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-embed-path'", ",", "type", "=", "str", ",", "metavar", "=", "'STR'", ",", "\n", "help", "=", "'path to pre-trained decoder embedding'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-embed-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'decoder embedding dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-conv-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'decoder embedding dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-ffn-embed-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'decoder embedding dimension for FFN'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-layers'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'num decoder layers'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-attention-heads'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'num decoder attention heads or LightConv/DynamicConv heads'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-learned-pos'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use learned positional embeddings in the decoder'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-normalize-before'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'apply layernorm before each decoder block'", ")", "\n", "parser", ".", "add_argument", "(", "'--share-decoder-input-output-embed'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'share decoder input and output embeddings'", ")", "\n", "parser", ".", "add_argument", "(", "'--share-all-embeddings'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'share encoder, decoder and output embeddings'", "\n", "' (requires shared dictionary and embed dim)'", ")", "\n", "parser", ".", "add_argument", "(", "'--adaptive-softmax-cutoff'", ",", "metavar", "=", "'EXPR'", ",", "\n", "help", "=", "'comma separated list of adaptive softmax cutoff points. '", "\n", "'Must be used with adaptive_loss criterion'", ")", ",", "\n", "parser", ".", "add_argument", "(", "'--adaptive-softmax-dropout'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'sets adaptive softmax dropout for the tail projections'", ")", "\n", "\n", "\"\"\"LightConv and DynamicConv arguments\"\"\"", "\n", "parser", ".", "add_argument", "(", "'--encoder-kernel-size-list'", ",", "type", "=", "lambda", "x", ":", "options", ".", "eval_str_list", "(", "x", ",", "int", ")", ",", "\n", "help", "=", "'list of kernel size (default: \"[3,7,15,31,31,31,31]\")'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-kernel-size-list'", ",", "type", "=", "lambda", "x", ":", "options", ".", "eval_str_list", "(", "x", ",", "int", ")", ",", "\n", "help", "=", "'list of kernel size (default: \"[3,7,15,31,31,31]\")'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-glu'", ",", "type", "=", "options", ".", "eval_bool", ",", "\n", "help", "=", "'glu after in proj'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-glu'", ",", "type", "=", "options", ".", "eval_bool", ",", "\n", "help", "=", "'glu after in proj'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-conv-type'", ",", "default", "=", "'dynamic'", ",", "type", "=", "str", ",", "\n", "choices", "=", "[", "'dynamic'", ",", "'lightweight'", "]", ",", "\n", "help", "=", "'type of convolution'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-conv-type'", ",", "default", "=", "'dynamic'", ",", "type", "=", "str", ",", "\n", "choices", "=", "[", "'dynamic'", ",", "'lightweight'", "]", ",", "\n", "help", "=", "'type of convolution'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight-softmax'", ",", "default", "=", "True", ",", "type", "=", "options", ".", "eval_bool", ")", "\n", "parser", ".", "add_argument", "(", "'--weight-dropout'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'dropout probability for conv weights'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lightconv.LightConvModel.build_model": [[153, 202], ["lightconv.base_architecture", "lightconv.LightConvEncoder", "lightconv.LightConvDecoder", "lightconv.LightConvModel", "hasattr", "hasattr", "len", "dictionary.pad", "lightconv.Embedding", "lightconv.LightConvModel.build_model.build_embedding"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.base_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.Embedding"], ["", "@", "classmethod", "\n", "def", "build_model", "(", "cls", ",", "args", ",", "task", ")", ":", "\n", "        ", "\"\"\"Build a new model instance.\"\"\"", "\n", "\n", "# make sure all arguments are present in older models", "\n", "base_architecture", "(", "args", ")", "\n", "\n", "if", "not", "hasattr", "(", "args", ",", "'max_source_positions'", ")", ":", "\n", "            ", "args", ".", "max_source_positions", "=", "1024", "\n", "", "if", "not", "hasattr", "(", "args", ",", "'max_target_positions'", ")", ":", "\n", "            ", "args", ".", "max_target_positions", "=", "1024", "\n", "\n", "", "src_dict", ",", "tgt_dict", "=", "task", ".", "source_dictionary", ",", "task", ".", "target_dictionary", "\n", "\n", "def", "build_embedding", "(", "dictionary", ",", "embed_dim", ",", "path", "=", "None", ")", ":", "\n", "            ", "num_embeddings", "=", "len", "(", "dictionary", ")", "\n", "padding_idx", "=", "dictionary", ".", "pad", "(", ")", "\n", "emb", "=", "Embedding", "(", "num_embeddings", ",", "embed_dim", ",", "padding_idx", ")", "\n", "# if provided, load from preloaded dictionaries", "\n", "if", "path", ":", "\n", "                ", "embed_dict", "=", "utils", ".", "parse_embedding", "(", "path", ")", "\n", "utils", ".", "load_embedding", "(", "embed_dict", ",", "dictionary", ",", "emb", ")", "\n", "", "return", "emb", "\n", "\n", "", "if", "args", ".", "share_all_embeddings", ":", "\n", "            ", "if", "src_dict", "!=", "tgt_dict", ":", "\n", "                ", "raise", "RuntimeError", "(", "'--share-all-embeddings requires a joined dictionary'", ")", "\n", "", "if", "args", ".", "encoder_embed_dim", "!=", "args", ".", "decoder_embed_dim", ":", "\n", "                ", "raise", "RuntimeError", "(", "\n", "'--share-all-embeddings requires --encoder-embed-dim to match --decoder-embed-dim'", ")", "\n", "", "if", "args", ".", "decoder_embed_path", "and", "(", "\n", "args", ".", "decoder_embed_path", "!=", "args", ".", "encoder_embed_path", ")", ":", "\n", "                ", "raise", "RuntimeError", "(", "'--share-all-embeddings not compatible with --decoder-embed-path'", ")", "\n", "", "encoder_embed_tokens", "=", "build_embedding", "(", "\n", "src_dict", ",", "args", ".", "encoder_embed_dim", ",", "args", ".", "encoder_embed_path", "\n", ")", "\n", "decoder_embed_tokens", "=", "encoder_embed_tokens", "\n", "args", ".", "share_decoder_input_output_embed", "=", "True", "\n", "", "else", ":", "\n", "            ", "encoder_embed_tokens", "=", "build_embedding", "(", "\n", "src_dict", ",", "args", ".", "encoder_embed_dim", ",", "args", ".", "encoder_embed_path", "\n", ")", "\n", "decoder_embed_tokens", "=", "build_embedding", "(", "\n", "tgt_dict", ",", "args", ".", "decoder_embed_dim", ",", "args", ".", "decoder_embed_path", "\n", ")", "\n", "\n", "", "encoder", "=", "LightConvEncoder", "(", "args", ",", "src_dict", ",", "encoder_embed_tokens", ")", "\n", "decoder", "=", "LightConvDecoder", "(", "args", ",", "tgt_dict", ",", "decoder_embed_tokens", ")", "\n", "return", "LightConvModel", "(", "encoder", ",", "decoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lightconv.LightConvEncoder.__init__": [[215, 239], ["fairseq.models.FairseqEncoder.__init__", "math.sqrt", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "lightconv.LightConvEncoder.layers.extend", "lightconv.LightConvEncoder.register_buffer", "fairseq.modules.PositionalEmbedding", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "fairseq.modules.LayerNorm", "lightconv.LightConvEncoderLayer", "range"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.positional_embedding.PositionalEmbedding", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.layer_norm.LayerNorm"], ["def", "__init__", "(", "self", ",", "args", ",", "dictionary", ",", "embed_tokens", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dictionary", ")", "\n", "self", ".", "dropout", "=", "args", ".", "dropout", "\n", "\n", "embed_dim", "=", "embed_tokens", ".", "embedding_dim", "\n", "self", ".", "padding_idx", "=", "embed_tokens", ".", "padding_idx", "\n", "self", ".", "max_source_positions", "=", "args", ".", "max_source_positions", "\n", "\n", "self", ".", "embed_tokens", "=", "embed_tokens", "\n", "self", ".", "embed_scale", "=", "math", ".", "sqrt", "(", "embed_dim", ")", "\n", "self", ".", "embed_positions", "=", "PositionalEmbedding", "(", "\n", "args", ".", "max_source_positions", ",", "embed_dim", ",", "self", ".", "padding_idx", ",", "\n", "learned", "=", "args", ".", "encoder_learned_pos", ",", "\n", ")", "if", "not", "args", ".", "no_token_positional_embeddings", "else", "None", "\n", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "self", ".", "layers", ".", "extend", "(", "[", "\n", "LightConvEncoderLayer", "(", "args", ",", "kernel_size", "=", "args", ".", "encoder_kernel_size_list", "[", "i", "]", ")", "\n", "for", "i", "in", "range", "(", "args", ".", "encoder_layers", ")", "\n", "]", ")", "\n", "self", ".", "register_buffer", "(", "'version'", ",", "torch", ".", "Tensor", "(", "[", "2", "]", ")", ")", "\n", "self", ".", "normalize", "=", "args", ".", "encoder_normalize_before", "\n", "if", "self", ".", "normalize", ":", "\n", "            ", "self", ".", "layer_norm", "=", "LayerNorm", "(", "embed_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lightconv.LightConvEncoder.forward": [[240, 277], ["torch.dropout", "torch.dropout", "torch.dropout", "lightconv.LightConvEncoder.transpose", "src_tokens.eq", "lightconv.LightConvEncoder.embed_tokens", "lightconv.LightConvEncoder.embed_positions", "src_tokens.eq.any", "layer", "lightconv.LightConvEncoder.layer_norm"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "src_tokens", ",", "**", "unused", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            src_tokens (LongTensor): tokens in the source language of shape\n                `(batch, src_len)`\n\n        Returns:\n            dict:\n                - **encoder_out** (Tensor): the last encoder layer's output of\n                  shape `(src_len, batch, embed_dim)`\n                - **encoder_padding_mask** (ByteTensor): the positions of\n                  padding elements of shape `(batch, src_len)`\n        \"\"\"", "\n", "# embed tokens and positions", "\n", "x", "=", "self", ".", "embed_scale", "*", "self", ".", "embed_tokens", "(", "src_tokens", ")", "\n", "if", "self", ".", "embed_positions", "is", "not", "None", ":", "\n", "            ", "x", "+=", "self", ".", "embed_positions", "(", "src_tokens", ")", "\n", "", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "# B x T x C -> T x B x C", "\n", "x", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "# compute padding mask", "\n", "encoder_padding_mask", "=", "src_tokens", ".", "eq", "(", "self", ".", "padding_idx", ")", "\n", "if", "not", "encoder_padding_mask", ".", "any", "(", ")", ":", "\n", "            ", "encoder_padding_mask", "=", "None", "\n", "\n", "# encoder layers", "\n", "", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "x", "=", "layer", "(", "x", ",", "encoder_padding_mask", ")", "\n", "\n", "", "if", "self", ".", "normalize", ":", "\n", "            ", "x", "=", "self", ".", "layer_norm", "(", "x", ")", "\n", "\n", "", "return", "{", "\n", "'encoder_out'", ":", "x", ",", "# T x B x C", "\n", "'encoder_padding_mask'", ":", "encoder_padding_mask", ",", "# B x T", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lightconv.LightConvEncoder.reorder_encoder_out": [[279, 297], ["encoder_out[].index_select", "encoder_out[].index_select"], "methods", ["None"], ["", "def", "reorder_encoder_out", "(", "self", ",", "encoder_out", ",", "new_order", ")", ":", "\n", "        ", "\"\"\"\n        Reorder encoder output according to *new_order*.\n\n        Args:\n            encoder_out: output from the ``forward()`` method\n            new_order (LongTensor): desired order\n\n        Returns:\n            *encoder_out* rearranged according to *new_order*\n        \"\"\"", "\n", "if", "encoder_out", "[", "'encoder_out'", "]", "is", "not", "None", ":", "\n", "            ", "encoder_out", "[", "'encoder_out'", "]", "=", "encoder_out", "[", "'encoder_out'", "]", ".", "index_select", "(", "1", ",", "new_order", ")", "\n", "", "if", "encoder_out", "[", "'encoder_padding_mask'", "]", "is", "not", "None", ":", "\n", "            ", "encoder_out", "[", "'encoder_padding_mask'", "]", "=", "encoder_out", "[", "'encoder_padding_mask'", "]", ".", "index_select", "(", "0", ",", "new_order", ")", "\n", "", "return", "encoder_out", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lightconv.LightConvEncoder.max_positions": [[298, 303], ["min", "lightconv.LightConvEncoder.embed_positions.max_positions"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.max_positions"], ["", "def", "max_positions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Maximum input length supported by the encoder.\"\"\"", "\n", "if", "self", ".", "embed_positions", "is", "None", ":", "\n", "            ", "return", "self", ".", "max_source_positions", "\n", "", "return", "min", "(", "self", ".", "max_source_positions", ",", "self", ".", "embed_positions", ".", "max_positions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lightconv.LightConvDecoder.__init__": [[318, 368], ["fairseq.models.FairseqIncrementalDecoder.__init__", "math.sqrt", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "lightconv.LightConvDecoder.layers.extend", "lightconv.LightConvDecoder.register_buffer", "lightconv.Linear", "fairseq.modules.PositionalEmbedding", "lightconv.Linear", "fairseq.modules.AdaptiveSoftmax", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "fairseq.modules.LayerNorm", "lightconv.LightConvDecoderLayer", "len", "fairseq.options.eval_str_list", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "range", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.positional_embedding.PositionalEmbedding", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.layer_norm.LayerNorm", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.eval_str_list"], ["def", "__init__", "(", "self", ",", "args", ",", "dictionary", ",", "embed_tokens", ",", "no_encoder_attn", "=", "False", ",", "final_norm", "=", "True", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dictionary", ")", "\n", "self", ".", "dropout", "=", "args", ".", "dropout", "\n", "self", ".", "share_input_output_embed", "=", "args", ".", "share_decoder_input_output_embed", "\n", "\n", "input_embed_dim", "=", "embed_tokens", ".", "embedding_dim", "\n", "embed_dim", "=", "args", ".", "decoder_embed_dim", "\n", "output_embed_dim", "=", "args", ".", "decoder_output_dim", "\n", "\n", "padding_idx", "=", "embed_tokens", ".", "padding_idx", "\n", "self", ".", "max_target_positions", "=", "args", ".", "max_target_positions", "\n", "\n", "self", ".", "embed_tokens", "=", "embed_tokens", "\n", "self", ".", "embed_scale", "=", "math", ".", "sqrt", "(", "embed_dim", ")", "# todo: try with input_embed_dim", "\n", "\n", "self", ".", "project_in_dim", "=", "Linear", "(", "input_embed_dim", ",", "embed_dim", ",", "bias", "=", "False", ")", "if", "embed_dim", "!=", "input_embed_dim", "else", "None", "\n", "\n", "self", ".", "embed_positions", "=", "PositionalEmbedding", "(", "\n", "args", ".", "max_target_positions", ",", "embed_dim", ",", "padding_idx", ",", "\n", "learned", "=", "args", ".", "decoder_learned_pos", ",", "\n", ")", "if", "not", "args", ".", "no_token_positional_embeddings", "else", "None", "\n", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "self", ".", "layers", ".", "extend", "(", "[", "\n", "LightConvDecoderLayer", "(", "args", ",", "no_encoder_attn", ",", "kernel_size", "=", "args", ".", "decoder_kernel_size_list", "[", "i", "]", ")", "\n", "for", "i", "in", "range", "(", "args", ".", "decoder_layers", ")", "\n", "]", ")", "\n", "\n", "self", ".", "adaptive_softmax", "=", "None", "\n", "\n", "self", ".", "project_out_dim", "=", "Linear", "(", "embed_dim", ",", "output_embed_dim", ",", "bias", "=", "False", ")", "if", "embed_dim", "!=", "output_embed_dim", "and", "not", "args", ".", "tie_adaptive_weights", "else", "None", "\n", "\n", "if", "args", ".", "adaptive_softmax_cutoff", "is", "not", "None", ":", "\n", "            ", "self", ".", "adaptive_softmax", "=", "AdaptiveSoftmax", "(", "\n", "len", "(", "dictionary", ")", ",", "\n", "output_embed_dim", ",", "\n", "options", ".", "eval_str_list", "(", "args", ".", "adaptive_softmax_cutoff", ",", "type", "=", "int", ")", ",", "\n", "dropout", "=", "args", ".", "adaptive_softmax_dropout", ",", "\n", "adaptive_inputs", "=", "embed_tokens", "if", "args", ".", "tie_adaptive_weights", "else", "None", ",", "\n", "factor", "=", "args", ".", "adaptive_softmax_factor", ",", "\n", "tie_proj", "=", "args", ".", "tie_adaptive_proj", ",", "\n", ")", "\n", "", "elif", "not", "self", ".", "share_input_output_embed", ":", "\n", "            ", "self", ".", "embed_out", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "len", "(", "dictionary", ")", ",", "output_embed_dim", ")", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "embed_out", ",", "mean", "=", "0", ",", "std", "=", "output_embed_dim", "**", "-", "0.5", ")", "\n", "", "self", ".", "register_buffer", "(", "'version'", ",", "torch", ".", "Tensor", "(", "[", "2", "]", ")", ")", "\n", "self", ".", "normalize", "=", "args", ".", "decoder_normalize_before", "and", "final_norm", "\n", "if", "self", ".", "normalize", ":", "\n", "            ", "self", ".", "layer_norm", "=", "LayerNorm", "(", "embed_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lightconv.LightConvDecoder.forward": [[369, 440], ["torch.dropout", "torch.dropout", "torch.dropout", "torch.linear.transpose", "torch.linear.transpose", "lightconv.LightConvDecoder.embed_positions", "lightconv.LightConvDecoder.embed_tokens", "lightconv.LightConvDecoder.project_in_dim", "layer", "inner_states.append", "lightconv.LightConvDecoder.layer_norm", "lightconv.LightConvDecoder.project_out_dim", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "prev_output_tokens", ",", "encoder_out", "=", "None", ",", "incremental_state", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            prev_output_tokens (LongTensor): previous decoder outputs of shape\n                `(batch, tgt_len)`, for teacher forcing\n            encoder_out (Tensor, optional): output from the encoder, used for\n                encoder-side attention\n            incremental_state (dict): dictionary used for storing state during\n                :ref:`Incremental decoding`\n\n        Returns:\n            tuple:\n                - the last decoder layer's output of shape `(batch, tgt_len,\n                  vocab)`\n                - the last decoder layer's attention weights of shape `(batch,\n                  tgt_len, src_len)`\n        \"\"\"", "\n", "# embed positions", "\n", "positions", "=", "self", ".", "embed_positions", "(", "\n", "prev_output_tokens", ",", "\n", "incremental_state", "=", "incremental_state", ",", "\n", ")", "if", "self", ".", "embed_positions", "is", "not", "None", "else", "None", "\n", "\n", "if", "incremental_state", "is", "not", "None", ":", "\n", "            ", "prev_output_tokens", "=", "prev_output_tokens", "[", ":", ",", "-", "1", ":", "]", "\n", "if", "positions", "is", "not", "None", ":", "\n", "                ", "positions", "=", "positions", "[", ":", ",", "-", "1", ":", "]", "\n", "\n", "# embed tokens and positions", "\n", "", "", "x", "=", "self", ".", "embed_scale", "*", "self", ".", "embed_tokens", "(", "prev_output_tokens", ")", "\n", "\n", "if", "self", ".", "project_in_dim", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "project_in_dim", "(", "x", ")", "\n", "\n", "", "if", "positions", "is", "not", "None", ":", "\n", "            ", "x", "+=", "positions", "\n", "", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "# B x T x C -> T x B x C", "\n", "x", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", "\n", "attn", "=", "None", "\n", "\n", "inner_states", "=", "[", "x", "]", "\n", "\n", "# decoder layers", "\n", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "x", ",", "attn", "=", "layer", "(", "\n", "x", ",", "\n", "encoder_out", "[", "'encoder_out'", "]", "if", "encoder_out", "is", "not", "None", "else", "None", ",", "\n", "encoder_out", "[", "'encoder_padding_mask'", "]", "if", "encoder_out", "is", "not", "None", "else", "None", ",", "\n", "incremental_state", ",", "\n", ")", "\n", "inner_states", ".", "append", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "normalize", ":", "\n", "            ", "x", "=", "self", ".", "layer_norm", "(", "x", ")", "\n", "\n", "# T x B x C -> B x T x C", "\n", "", "x", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "if", "self", ".", "project_out_dim", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "project_out_dim", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "adaptive_softmax", "is", "None", ":", "\n", "# project back to size of vocabulary", "\n", "            ", "if", "self", ".", "share_input_output_embed", ":", "\n", "                ", "x", "=", "F", ".", "linear", "(", "x", ",", "self", ".", "embed_tokens", ".", "weight", ")", "\n", "", "else", ":", "\n", "                ", "x", "=", "F", ".", "linear", "(", "x", ",", "self", ".", "embed_out", ")", "\n", "\n", "", "", "return", "x", ",", "{", "'attn'", ":", "attn", ",", "'inner_states'", ":", "inner_states", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lightconv.LightConvDecoder.max_positions": [[441, 446], ["min", "lightconv.LightConvDecoder.embed_positions.max_positions"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.max_positions"], ["", "def", "max_positions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Maximum output length supported by the decoder.\"\"\"", "\n", "if", "self", ".", "embed_positions", "is", "None", ":", "\n", "            ", "return", "self", ".", "max_target_positions", "\n", "", "return", "min", "(", "self", ".", "max_target_positions", ",", "self", ".", "embed_positions", ".", "max_positions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lightconv.LightConvDecoder.buffered_future_mask": [[447, 454], ["tensor.size", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "lightconv.LightConvDecoder._future_mask.size", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "hasattr", "fairseq.utils.fill_with_neg_inf", "fairseq.utils.fill_with_neg_inf", "tensor.new", "lightconv.LightConvDecoder._future_mask.resize_"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.fill_with_neg_inf", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.fill_with_neg_inf"], ["", "def", "buffered_future_mask", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "dim", "=", "tensor", ".", "size", "(", "0", ")", "\n", "if", "not", "hasattr", "(", "self", ",", "'_future_mask'", ")", "or", "self", ".", "_future_mask", "is", "None", "or", "self", ".", "_future_mask", ".", "device", "!=", "tensor", ".", "device", ":", "\n", "            ", "self", ".", "_future_mask", "=", "torch", ".", "triu", "(", "utils", ".", "fill_with_neg_inf", "(", "tensor", ".", "new", "(", "dim", ",", "dim", ")", ")", ",", "1", ")", "\n", "", "if", "self", ".", "_future_mask", ".", "size", "(", "0", ")", "<", "dim", ":", "\n", "            ", "self", ".", "_future_mask", "=", "torch", ".", "triu", "(", "utils", ".", "fill_with_neg_inf", "(", "self", ".", "_future_mask", ".", "resize_", "(", "dim", ",", "dim", ")", ")", ",", "1", ")", "\n", "", "return", "self", ".", "_future_mask", "[", ":", "dim", ",", ":", "dim", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lightconv.LightConvEncoderLayer.__init__": [[464, 497], ["torch.Module.__init__", "lightconv.Linear", "lightconv.Linear", "lightconv.Linear", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "lightconv.Linear", "torch.GLU", "torch.GLU", "torch.GLU", "lightconv.Linear", "fairseq.modules.LightweightConv", "fairseq.modules.DynamicConv", "fairseq.modules.LayerNorm", "range"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.lightweight_convolution.LightweightConv", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.dynamic_convolution.DynamicConv", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.layer_norm.LayerNorm"], ["def", "__init__", "(", "self", ",", "args", ",", "kernel_size", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embed_dim", "=", "args", ".", "encoder_embed_dim", "\n", "self", ".", "conv_dim", "=", "args", ".", "encoder_conv_dim", "\n", "padding_l", "=", "kernel_size", "//", "2", "if", "kernel_size", "%", "2", "==", "1", "else", "(", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "kernel_size", "//", "2", ")", "\n", "\n", "if", "args", ".", "encoder_glu", ":", "\n", "            ", "self", ".", "linear1", "=", "Linear", "(", "self", ".", "embed_dim", ",", "2", "*", "self", ".", "conv_dim", ")", "\n", "self", ".", "act", "=", "nn", ".", "GLU", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "linear1", "=", "Linear", "(", "self", ".", "embed_dim", ",", "self", ".", "conv_dim", ")", "\n", "self", ".", "act", "=", "None", "\n", "", "if", "args", ".", "encoder_conv_type", "==", "'lightweight'", ":", "\n", "            ", "self", ".", "conv", "=", "LightweightConv", "(", "self", ".", "conv_dim", ",", "kernel_size", ",", "padding_l", "=", "padding_l", ",", "\n", "weight_softmax", "=", "args", ".", "weight_softmax", ",", "\n", "num_heads", "=", "args", ".", "encoder_attention_heads", ",", "\n", "weight_dropout", "=", "args", ".", "weight_dropout", ")", "\n", "", "elif", "args", ".", "encoder_conv_type", "==", "'dynamic'", ":", "\n", "            ", "self", ".", "conv", "=", "DynamicConv", "(", "self", ".", "conv_dim", ",", "kernel_size", ",", "padding_l", "=", "padding_l", ",", "\n", "weight_softmax", "=", "args", ".", "weight_softmax", ",", "\n", "num_heads", "=", "args", ".", "encoder_attention_heads", ",", "\n", "weight_dropout", "=", "args", ".", "weight_dropout", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "self", ".", "linear2", "=", "Linear", "(", "self", ".", "conv_dim", ",", "self", ".", "embed_dim", ")", "\n", "\n", "self", ".", "dropout", "=", "args", ".", "dropout", "\n", "self", ".", "relu_dropout", "=", "args", ".", "relu_dropout", "\n", "self", ".", "input_dropout", "=", "args", ".", "input_dropout", "\n", "self", ".", "normalize_before", "=", "args", ".", "encoder_normalize_before", "\n", "self", ".", "fc1", "=", "Linear", "(", "self", ".", "embed_dim", ",", "args", ".", "encoder_ffn_embed_dim", ")", "\n", "self", ".", "fc2", "=", "Linear", "(", "args", ".", "encoder_ffn_embed_dim", ",", "self", ".", "embed_dim", ")", "\n", "self", ".", "layer_norms", "=", "nn", ".", "ModuleList", "(", "[", "LayerNorm", "(", "self", ".", "embed_dim", ")", "for", "_", "in", "range", "(", "2", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lightconv.LightConvEncoderLayer.forward": [[498, 531], ["lightconv.LightConvEncoderLayer.maybe_layer_norm", "torch.dropout", "torch.dropout", "torch.dropout", "lightconv.LightConvEncoderLayer.linear1", "lightconv.LightConvEncoderLayer.conv", "lightconv.LightConvEncoderLayer.linear2", "torch.dropout", "torch.dropout", "torch.dropout", "lightconv.LightConvEncoderLayer.maybe_layer_norm", "lightconv.LightConvEncoderLayer.maybe_layer_norm", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "lightconv.LightConvEncoderLayer.fc2", "torch.dropout", "torch.dropout", "torch.dropout", "lightconv.LightConvEncoderLayer.maybe_layer_norm", "lightconv.LightConvEncoderLayer.act", "x.masked_fill.masked_fill.masked_fill", "lightconv.LightConvEncoderLayer.fc1", "encoder_padding_mask.transpose().unsqueeze", "encoder_padding_mask.transpose"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.TransformerDecoderLayer.maybe_layer_norm", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.TransformerDecoderLayer.maybe_layer_norm", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.TransformerDecoderLayer.maybe_layer_norm", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.TransformerDecoderLayer.maybe_layer_norm"], ["", "def", "forward", "(", "self", ",", "x", ",", "encoder_padding_mask", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            x (Tensor): input to the layer of shape `(seq_len, batch, embed_dim)`\n            encoder_padding_mask (ByteTensor): binary ByteTensor of shape\n                `(batch, src_len)` where padding elements are indicated by ``1``.\n\n        Returns:\n            encoded output of shape `(batch, src_len, embed_dim)`\n        \"\"\"", "\n", "residual", "=", "x", "\n", "x", "=", "self", ".", "maybe_layer_norm", "(", "0", ",", "x", ",", "before", "=", "True", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "input_dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "linear1", "(", "x", ")", "\n", "if", "self", ".", "act", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "", "if", "encoder_padding_mask", "is", "not", "None", ":", "\n", "            ", "x", "=", "x", ".", "masked_fill", "(", "encoder_padding_mask", ".", "transpose", "(", "0", ",", "1", ")", ".", "unsqueeze", "(", "2", ")", ",", "0", ")", "\n", "", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "linear2", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "residual", "+", "x", "\n", "x", "=", "self", ".", "maybe_layer_norm", "(", "0", ",", "x", ",", "after", "=", "True", ")", "\n", "\n", "residual", "=", "x", "\n", "x", "=", "self", ".", "maybe_layer_norm", "(", "1", ",", "x", ",", "before", "=", "True", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "relu_dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "residual", "+", "x", "\n", "x", "=", "self", ".", "maybe_layer_norm", "(", "1", ",", "x", ",", "after", "=", "True", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lightconv.LightConvEncoderLayer.maybe_layer_norm": [[532, 538], ["None"], "methods", ["None"], ["", "def", "maybe_layer_norm", "(", "self", ",", "i", ",", "x", ",", "before", "=", "False", ",", "after", "=", "False", ")", ":", "\n", "        ", "assert", "before", "^", "after", "\n", "if", "after", "^", "self", ".", "normalize_before", ":", "\n", "            ", "return", "self", ".", "layer_norms", "[", "i", "]", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lightconv.LightConvEncoderLayer.extra_repr": [[539, 542], ["None"], "methods", ["None"], ["", "", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "'dropout={}, relu_dropout={}, input_dropout={}, normalize_before={}'", ".", "format", "(", "\n", "self", ".", "dropout", ",", "self", ".", "relu_dropout", ",", "self", ".", "input_dropout", ",", "self", ".", "normalize_before", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lightconv.LightConvDecoderLayer.__init__": [[554, 600], ["torch.Module.__init__", "lightconv.Linear", "fairseq.modules.LayerNorm", "lightconv.Linear", "lightconv.Linear", "fairseq.modules.LayerNorm", "lightconv.Linear", "torch.GLU", "torch.GLU", "torch.GLU", "lightconv.Linear", "fairseq.modules.LightweightConv", "fairseq.modules.MultiheadAttention", "fairseq.modules.LayerNorm", "fairseq.modules.DynamicConv"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.layer_norm.LayerNorm", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.layer_norm.LayerNorm", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.lightweight_convolution.LightweightConv", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.layer_norm.LayerNorm", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.dynamic_convolution.DynamicConv"], ["def", "__init__", "(", "self", ",", "args", ",", "no_encoder_attn", "=", "False", ",", "kernel_size", "=", "0", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embed_dim", "=", "args", ".", "decoder_embed_dim", "\n", "self", ".", "conv_dim", "=", "args", ".", "decoder_conv_dim", "\n", "if", "args", ".", "decoder_glu", ":", "\n", "            ", "self", ".", "linear1", "=", "Linear", "(", "self", ".", "embed_dim", ",", "2", "*", "self", ".", "conv_dim", ")", "\n", "self", ".", "act", "=", "nn", ".", "GLU", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "linear1", "=", "Linear", "(", "self", ".", "embed_dim", ",", "self", ".", "conv_dim", ")", "\n", "self", ".", "act", "=", "None", "\n", "", "if", "args", ".", "decoder_conv_type", "==", "'lightweight'", ":", "\n", "            ", "self", ".", "conv", "=", "LightweightConv", "(", "self", ".", "conv_dim", ",", "kernel_size", ",", "padding_l", "=", "kernel_size", "-", "1", ",", "\n", "weight_softmax", "=", "args", ".", "weight_softmax", ",", "\n", "num_heads", "=", "args", ".", "decoder_attention_heads", ",", "\n", "weight_dropout", "=", "args", ".", "weight_dropout", ")", "\n", "", "elif", "args", ".", "decoder_conv_type", "==", "'dynamic'", ":", "\n", "            ", "self", ".", "conv", "=", "DynamicConv", "(", "self", ".", "conv_dim", ",", "kernel_size", ",", "padding_l", "=", "kernel_size", "-", "1", ",", "\n", "weight_softmax", "=", "args", ".", "weight_softmax", ",", "\n", "num_heads", "=", "args", ".", "decoder_attention_heads", ",", "\n", "weight_dropout", "=", "args", ".", "weight_dropout", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "self", ".", "linear2", "=", "Linear", "(", "self", ".", "conv_dim", ",", "self", ".", "embed_dim", ")", "\n", "\n", "self", ".", "dropout", "=", "args", ".", "dropout", "\n", "self", ".", "relu_dropout", "=", "args", ".", "relu_dropout", "\n", "self", ".", "input_dropout", "=", "args", ".", "input_dropout", "\n", "self", ".", "normalize_before", "=", "args", ".", "decoder_normalize_before", "\n", "\n", "self", ".", "conv_layer_norm", "=", "LayerNorm", "(", "self", ".", "embed_dim", ")", "\n", "\n", "if", "no_encoder_attn", ":", "\n", "            ", "self", ".", "encoder_attn", "=", "None", "\n", "self", ".", "encoder_attn_layer_norm", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "encoder_attn", "=", "MultiheadAttention", "(", "\n", "self", ".", "embed_dim", ",", "args", ".", "decoder_attention_heads", ",", "\n", "dropout", "=", "args", ".", "attention_dropout", ",", "encoder_decoder_attention", "=", "True", "\n", ")", "\n", "self", ".", "encoder_attn_layer_norm", "=", "LayerNorm", "(", "self", ".", "embed_dim", ")", "\n", "\n", "", "self", ".", "fc1", "=", "Linear", "(", "self", ".", "embed_dim", ",", "args", ".", "decoder_ffn_embed_dim", ")", "\n", "self", ".", "fc2", "=", "Linear", "(", "args", ".", "decoder_ffn_embed_dim", ",", "self", ".", "embed_dim", ")", "\n", "\n", "self", ".", "final_layer_norm", "=", "LayerNorm", "(", "self", ".", "embed_dim", ")", "\n", "self", ".", "need_attn", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lightconv.LightConvDecoderLayer.forward": [[601, 661], ["lightconv.LightConvDecoderLayer.maybe_layer_norm", "torch.dropout", "torch.dropout", "torch.dropout", "lightconv.LightConvDecoderLayer.linear1", "lightconv.LightConvDecoderLayer.conv", "lightconv.LightConvDecoderLayer.linear2", "torch.dropout", "torch.dropout", "torch.dropout", "lightconv.LightConvDecoderLayer.maybe_layer_norm", "lightconv.LightConvDecoderLayer.maybe_layer_norm", "torch.relu", "torch.relu", "torch.relu", "torch.dropout", "torch.dropout", "torch.dropout", "lightconv.LightConvDecoderLayer.fc2", "torch.dropout", "torch.dropout", "torch.dropout", "lightconv.LightConvDecoderLayer.maybe_layer_norm", "lightconv.LightConvDecoderLayer.conv._set_input_buffer", "lightconv.LightConvDecoderLayer.act", "lightconv.LightConvDecoderLayer.maybe_layer_norm", "lightconv.LightConvDecoderLayer.encoder_attn", "torch.dropout", "torch.dropout", "torch.dropout", "lightconv.LightConvDecoderLayer.maybe_layer_norm", "lightconv.LightConvDecoderLayer.fc1", "lightconv.LightConvDecoderLayer.encoder_attn._set_input_buffer"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.TransformerDecoderLayer.maybe_layer_norm", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.TransformerDecoderLayer.maybe_layer_norm", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.TransformerDecoderLayer.maybe_layer_norm", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.TransformerDecoderLayer.maybe_layer_norm", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer._set_input_buffer", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.TransformerDecoderLayer.maybe_layer_norm", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.TransformerDecoderLayer.maybe_layer_norm", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer._set_input_buffer"], ["", "def", "forward", "(", "self", ",", "x", ",", "encoder_out", ",", "encoder_padding_mask", ",", "incremental_state", ",", "\n", "prev_conv_state", "=", "None", ",", "prev_attn_state", "=", "None", ",", "conv_mask", "=", "None", ",", "\n", "conv_padding_mask", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            x (Tensor): input to the layer of shape `(seq_len, batch, embed_dim)`\n            encoder_padding_mask (ByteTensor): binary ByteTensor of shape\n                `(batch, src_len)` where padding elements are indicated by ``1``.\n\n        Returns:\n            encoded output of shape `(batch, src_len, embed_dim)`\n        \"\"\"", "\n", "residual", "=", "x", "\n", "x", "=", "self", ".", "maybe_layer_norm", "(", "self", ".", "conv_layer_norm", ",", "x", ",", "before", "=", "True", ")", "\n", "if", "prev_conv_state", "is", "not", "None", ":", "\n", "            ", "if", "incremental_state", "is", "None", ":", "\n", "                ", "incremental_state", "=", "{", "}", "\n", "", "self", ".", "conv", ".", "_set_input_buffer", "(", "incremental_state", ",", "prev_conv_state", ")", "\n", "", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "input_dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "linear1", "(", "x", ")", "\n", "if", "self", ".", "act", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "act", "(", "x", ")", "\n", "", "x", "=", "self", ".", "conv", "(", "x", ",", "incremental_state", "=", "incremental_state", ")", "\n", "x", "=", "self", ".", "linear2", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "residual", "+", "x", "\n", "x", "=", "self", ".", "maybe_layer_norm", "(", "self", ".", "conv_layer_norm", ",", "x", ",", "after", "=", "True", ")", "\n", "\n", "attn", "=", "None", "\n", "if", "self", ".", "encoder_attn", "is", "not", "None", ":", "\n", "            ", "residual", "=", "x", "\n", "x", "=", "self", ".", "maybe_layer_norm", "(", "self", ".", "encoder_attn_layer_norm", ",", "x", ",", "before", "=", "True", ")", "\n", "if", "prev_attn_state", "is", "not", "None", ":", "\n", "                ", "if", "incremental_state", "is", "None", ":", "\n", "                    ", "incremental_state", "=", "{", "}", "\n", "", "prev_key", ",", "prev_value", "=", "prev_attn_state", "\n", "saved_state", "=", "{", "\"prev_key\"", ":", "prev_key", ",", "\"prev_value\"", ":", "prev_value", "}", "\n", "self", ".", "encoder_attn", ".", "_set_input_buffer", "(", "incremental_state", ",", "saved_state", ")", "\n", "", "x", ",", "attn", "=", "self", ".", "encoder_attn", "(", "\n", "query", "=", "x", ",", "\n", "key", "=", "encoder_out", ",", "\n", "value", "=", "encoder_out", ",", "\n", "key_padding_mask", "=", "encoder_padding_mask", ",", "\n", "incremental_state", "=", "incremental_state", ",", "\n", "static_kv", "=", "True", ",", "\n", "need_weights", "=", "(", "not", "self", ".", "training", "and", "self", ".", "need_attn", ")", ",", "\n", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "residual", "+", "x", "\n", "x", "=", "self", ".", "maybe_layer_norm", "(", "self", ".", "encoder_attn_layer_norm", ",", "x", ",", "after", "=", "True", ")", "\n", "\n", "", "residual", "=", "x", "\n", "x", "=", "self", ".", "maybe_layer_norm", "(", "self", ".", "final_layer_norm", ",", "x", ",", "before", "=", "True", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "relu_dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "residual", "+", "x", "\n", "x", "=", "self", ".", "maybe_layer_norm", "(", "self", ".", "final_layer_norm", ",", "x", ",", "after", "=", "True", ")", "\n", "return", "x", ",", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lightconv.LightConvDecoderLayer.maybe_layer_norm": [[662, 668], ["layer_norm"], "methods", ["None"], ["", "def", "maybe_layer_norm", "(", "self", ",", "layer_norm", ",", "x", ",", "before", "=", "False", ",", "after", "=", "False", ")", ":", "\n", "        ", "assert", "before", "^", "after", "\n", "if", "after", "^", "self", ".", "normalize_before", ":", "\n", "            ", "return", "layer_norm", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lightconv.LightConvDecoderLayer.make_generation_fast_": [[669, 671], ["None"], "methods", ["None"], ["", "", "def", "make_generation_fast_", "(", "self", ",", "need_attn", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "need_attn", "=", "need_attn", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lightconv.LightConvDecoderLayer.extra_repr": [[672, 675], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "'dropout={}, relu_dropout={}, input_dropout={}, normalize_before={}'", ".", "format", "(", "\n", "self", ".", "dropout", ",", "self", ".", "relu_dropout", ",", "self", ".", "input_dropout", ",", "self", ".", "normalize_before", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lightconv.Embedding": [[677, 682], ["torch.Embedding", "torch.init.normal_", "torch.init.constant_"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.Embedding"], ["", "", "def", "Embedding", "(", "num_embeddings", ",", "embedding_dim", ",", "padding_idx", ")", ":", "\n", "    ", "m", "=", "nn", ".", "Embedding", "(", "num_embeddings", ",", "embedding_dim", ",", "padding_idx", "=", "padding_idx", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "embedding_dim", "**", "-", "0.5", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", "[", "padding_idx", "]", ",", "0", ")", "\n", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lightconv.Linear": [[684, 690], ["torch.Linear", "torch.init.xavier_uniform_", "torch.init.constant_"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear"], ["", "def", "Linear", "(", "in_features", ",", "out_features", ",", "bias", "=", "True", ")", ":", "\n", "    ", "m", "=", "nn", ".", "Linear", "(", "in_features", ",", "out_features", ",", "bias", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "if", "bias", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.", ")", "\n", "", "return", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lightconv.base_architecture": [[692, 735], ["fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "len", "len", "len", "len"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture"], ["", "@", "register_model_architecture", "(", "'lightconv'", ",", "'lightconv'", ")", "\n", "def", "base_architecture", "(", "args", ")", ":", "\n", "    ", "args", ".", "encoder_embed_path", "=", "getattr", "(", "args", ",", "'encoder_embed_path'", ",", "None", ")", "\n", "args", ".", "encoder_embed_dim", "=", "getattr", "(", "args", ",", "'encoder_embed_dim'", ",", "512", ")", "\n", "args", ".", "encoder_ffn_embed_dim", "=", "getattr", "(", "args", ",", "'encoder_ffn_embed_dim'", ",", "2048", ")", "\n", "args", ".", "encoder_layers", "=", "getattr", "(", "args", ",", "'encoder_layers'", ",", "7", ")", "\n", "args", ".", "encoder_attention_heads", "=", "getattr", "(", "args", ",", "'encoder_attention_heads'", ",", "8", ")", "\n", "args", ".", "encoder_normalize_before", "=", "getattr", "(", "args", ",", "'encoder_normalize_before'", ",", "False", ")", "\n", "args", ".", "encoder_learned_pos", "=", "getattr", "(", "args", ",", "'encoder_learned_pos'", ",", "False", ")", "\n", "args", ".", "decoder_embed_path", "=", "getattr", "(", "args", ",", "'decoder_embed_path'", ",", "None", ")", "\n", "args", ".", "decoder_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_embed_dim'", ",", "args", ".", "encoder_embed_dim", ")", "\n", "args", ".", "decoder_ffn_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_ffn_embed_dim'", ",", "args", ".", "encoder_ffn_embed_dim", ")", "\n", "args", ".", "decoder_layers", "=", "getattr", "(", "args", ",", "'decoder_layers'", ",", "6", ")", "\n", "args", ".", "decoder_attention_heads", "=", "getattr", "(", "args", ",", "'decoder_attention_heads'", ",", "8", ")", "\n", "args", ".", "decoder_normalize_before", "=", "getattr", "(", "args", ",", "'decoder_normalize_before'", ",", "False", ")", "\n", "args", ".", "decoder_learned_pos", "=", "getattr", "(", "args", ",", "'decoder_learned_pos'", ",", "False", ")", "\n", "args", ".", "attention_dropout", "=", "getattr", "(", "args", ",", "'attention_dropout'", ",", "0.", ")", "\n", "args", ".", "relu_dropout", "=", "getattr", "(", "args", ",", "'relu_dropout'", ",", "0.", ")", "\n", "args", ".", "dropout", "=", "getattr", "(", "args", ",", "'dropout'", ",", "0.1", ")", "\n", "args", ".", "adaptive_softmax_cutoff", "=", "getattr", "(", "args", ",", "'adaptive_softmax_cutoff'", ",", "None", ")", "\n", "args", ".", "adaptive_softmax_dropout", "=", "getattr", "(", "args", ",", "'adaptive_softmax_dropout'", ",", "0", ")", "\n", "args", ".", "share_decoder_input_output_embed", "=", "getattr", "(", "args", ",", "'share_decoder_input_output_embed'", ",", "False", ")", "\n", "args", ".", "share_all_embeddings", "=", "getattr", "(", "args", ",", "'share_all_embeddings'", ",", "False", ")", "\n", "args", ".", "no_token_positional_embeddings", "=", "getattr", "(", "args", ",", "'no_token_positional_embeddings'", ",", "False", ")", "\n", "\n", "args", ".", "decoder_output_dim", "=", "getattr", "(", "args", ",", "'decoder_output_dim'", ",", "args", ".", "decoder_embed_dim", ")", "\n", "args", ".", "decoder_input_dim", "=", "getattr", "(", "args", ",", "'decoder_input_dim'", ",", "args", ".", "decoder_embed_dim", ")", "\n", "\n", "args", ".", "encoder_conv_dim", "=", "getattr", "(", "args", ",", "'encoder_conv_dim'", ",", "args", ".", "encoder_embed_dim", ")", "\n", "args", ".", "decoder_conv_dim", "=", "getattr", "(", "args", ",", "'decoder_conv_dim'", ",", "args", ".", "decoder_embed_dim", ")", "\n", "\n", "args", ".", "encoder_kernel_size_list", "=", "getattr", "(", "args", ",", "'encoder_kernel_size_list'", ",", "[", "3", ",", "7", ",", "15", ",", "31", ",", "31", ",", "31", ",", "31", "]", ")", "\n", "args", ".", "decoder_kernel_size_list", "=", "getattr", "(", "args", ",", "'decoder_kernel_size_list'", ",", "[", "3", ",", "7", ",", "15", ",", "31", ",", "31", ",", "31", "]", ")", "\n", "if", "len", "(", "args", ".", "encoder_kernel_size_list", ")", "==", "1", ":", "\n", "        ", "args", ".", "encoder_kernel_size_list", "=", "args", ".", "encoder_kernel_size_list", "*", "args", ".", "encoder_layers", "\n", "", "if", "len", "(", "args", ".", "decoder_kernel_size_list", ")", "==", "1", ":", "\n", "        ", "args", ".", "decoder_kernel_size_list", "=", "args", ".", "decoder_kernel_size_list", "*", "args", ".", "decoder_layers", "\n", "", "assert", "len", "(", "args", ".", "encoder_kernel_size_list", ")", "==", "args", ".", "encoder_layers", ",", "\"encoder_kernel_size_list doesn't match encoder_layers\"", "\n", "assert", "len", "(", "args", ".", "decoder_kernel_size_list", ")", "==", "args", ".", "decoder_layers", ",", "\"decoder_kernel_size_list doesn't match decoder_layers\"", "\n", "args", ".", "encoder_glu", "=", "getattr", "(", "args", ",", "'encoder_glu'", ",", "True", ")", "\n", "args", ".", "decoder_glu", "=", "getattr", "(", "args", ",", "'decoder_glu'", ",", "True", ")", "\n", "args", ".", "input_dropout", "=", "getattr", "(", "args", ",", "'input_dropout'", ",", "0.1", ")", "\n", "args", ".", "weight_dropout", "=", "getattr", "(", "args", ",", "'weight_dropout'", ",", "args", ".", "attention_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lightconv.lightconv_iwslt_de_en": [[737, 753], ["fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "lightconv.base_architecture"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.base_architecture"], ["", "@", "register_model_architecture", "(", "'lightconv'", ",", "'lightconv_iwslt_de_en'", ")", "\n", "def", "lightconv_iwslt_de_en", "(", "args", ")", ":", "\n", "    ", "args", ".", "encoder_embed_dim", "=", "getattr", "(", "args", ",", "'encoder_embed_dim'", ",", "512", ")", "\n", "args", ".", "encoder_ffn_embed_dim", "=", "getattr", "(", "args", ",", "'encoder_ffn_embed_dim'", ",", "1024", ")", "\n", "args", ".", "encoder_attention_heads", "=", "getattr", "(", "args", ",", "'encoder_attention_heads'", ",", "4", ")", "\n", "args", ".", "encoder_layers", "=", "getattr", "(", "args", ",", "'encoder_layers'", ",", "7", ")", "\n", "args", ".", "decoder_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_embed_dim'", ",", "512", ")", "\n", "args", ".", "decoder_ffn_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_ffn_embed_dim'", ",", "1024", ")", "\n", "args", ".", "decoder_attention_heads", "=", "getattr", "(", "args", ",", "'decoder_attention_heads'", ",", "4", ")", "\n", "args", ".", "decoder_layers", "=", "getattr", "(", "args", ",", "'decoder_layers'", ",", "6", ")", "\n", "args", ".", "attention_dropout", "=", "getattr", "(", "args", ",", "'attention_dropout'", ",", "0.1", ")", "\n", "args", ".", "weight_dropout", "=", "getattr", "(", "args", ",", "'weight_dropout'", ",", "0.1", ")", "\n", "args", ".", "encoder_glu", "=", "getattr", "(", "args", ",", "'encoder_glu'", ",", "False", ")", "\n", "args", ".", "decoder_glu", "=", "getattr", "(", "args", ",", "'decoder_glu'", ",", "False", ")", "\n", "args", ".", "input_dropout", "=", "getattr", "(", "args", ",", "'input_dropout'", ",", "0.0", ")", "\n", "base_architecture", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lightconv.lightconv_wmt_en_de": [[755, 758], ["fairseq.models.register_model_architecture", "lightconv.base_architecture"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.base_architecture"], ["", "@", "register_model_architecture", "(", "'lightconv'", ",", "'lightconv_wmt_en_de'", ")", "\n", "def", "lightconv_wmt_en_de", "(", "args", ")", ":", "\n", "    ", "base_architecture", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lightconv.lightconv_wmt_en_de_big": [[760, 772], ["fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "lightconv.base_architecture"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.base_architecture"], ["", "@", "register_model_architecture", "(", "'lightconv'", ",", "'lightconv_wmt_en_de_big'", ")", "\n", "def", "lightconv_wmt_en_de_big", "(", "args", ")", ":", "\n", "    ", "args", ".", "attention_dropout", "=", "getattr", "(", "args", ",", "'attention_dropout'", ",", "0.1", ")", "\n", "args", ".", "encoder_embed_dim", "=", "getattr", "(", "args", ",", "'encoder_embed_dim'", ",", "1024", ")", "\n", "args", ".", "encoder_ffn_embed_dim", "=", "getattr", "(", "args", ",", "'encoder_ffn_embed_dim'", ",", "4096", ")", "\n", "args", ".", "encoder_attention_heads", "=", "getattr", "(", "args", ",", "'encoder_attention_heads'", ",", "16", ")", "\n", "args", ".", "encoder_normalize_before", "=", "getattr", "(", "args", ",", "'encoder_normalize_before'", ",", "False", ")", "\n", "args", ".", "decoder_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_embed_dim'", ",", "1024", ")", "\n", "args", ".", "decoder_ffn_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_ffn_embed_dim'", ",", "4096", ")", "\n", "args", ".", "decoder_attention_heads", "=", "getattr", "(", "args", ",", "'decoder_attention_heads'", ",", "16", ")", "\n", "args", ".", "dropout", "=", "getattr", "(", "args", ",", "'dropout'", ",", "0.3", ")", "\n", "base_architecture", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lightconv.lightconv_wmt_en_fr_big": [[774, 778], ["fairseq.models.register_model_architecture", "getattr", "lightconv.lightconv_wmt_en_de_big"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lightconv.lightconv_wmt_en_de_big"], ["", "@", "register_model_architecture", "(", "'lightconv'", ",", "'lightconv_wmt_en_fr_big'", ")", "\n", "def", "lightconv_wmt_en_fr_big", "(", "args", ")", ":", "\n", "    ", "args", ".", "dropout", "=", "getattr", "(", "args", ",", "'dropout'", ",", "0.1", ")", "\n", "lightconv_wmt_en_de_big", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lightconv.lightconv_wmt_zh_en_big": [[780, 786], ["fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "lightconv.lightconv_wmt_en_de_big"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lightconv.lightconv_wmt_en_de_big"], ["", "@", "register_model_architecture", "(", "'lightconv'", ",", "'lightconv_wmt_zh_en_big'", ")", "\n", "def", "lightconv_wmt_zh_en_big", "(", "args", ")", ":", "\n", "    ", "args", ".", "dropout", "=", "getattr", "(", "args", ",", "'dropout'", ",", "0.2", ")", "\n", "args", ".", "attention_dropout", "=", "getattr", "(", "args", ",", "'attention_dropout'", ",", "0.2", ")", "\n", "args", ".", "weight_dropout", "=", "getattr", "(", "args", ",", "'weight_dropout'", ",", "0.2", ")", "\n", "lightconv_wmt_en_de_big", "(", "args", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv.FConvModel.hub_models": [[44, 58], ["fconv.FConvModel.hub_models.moses_subword"], "methods", ["None"], ["\n", "@", "classmethod", "\n", "def", "hub_models", "(", "cls", ")", ":", "\n", "\n", "        ", "def", "moses_subword", "(", "path", ")", ":", "\n", "            ", "return", "{", "\n", "'path'", ":", "path", ",", "\n", "'tokenizer'", ":", "'moses'", ",", "\n", "'bpe'", ":", "'subword_nmt'", ",", "\n", "}", "\n", "\n", "", "return", "{", "\n", "'conv.wmt14.en-fr'", ":", "moses_subword", "(", "'https://dl.fbaipublicfiles.com/fairseq/models/wmt14.v2.en-fr.fconv-py.tar.bz2'", ")", ",", "\n", "'conv.wmt14.en-de'", ":", "moses_subword", "(", "'https://dl.fbaipublicfiles.com/fairseq/models/wmt14.en-de.fconv-py.tar.bz2'", ")", ",", "\n", "'conv.wmt17.en-de'", ":", "moses_subword", "(", "'https://dl.fbaipublicfiles.com/fairseq/models/wmt17.v2.en-de.fconv-py.tar.bz2'", ")", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv.FConvModel.__init__": [[60, 63], ["fairseq.models.FairseqEncoderDecoderModel.__init__", "sum"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["\n", "", "def", "__init__", "(", "self", ",", "encoder", ",", "decoder", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "encoder", ",", "decoder", ")", "\n", "self", ".", "encoder", ".", "num_attention_layers", "=", "sum", "(", "layer", "is", "not", "None", "for", "layer", "in", "decoder", ".", "attention", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv.FConvModel.add_args": [[64, 88], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["\n", "", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add model-specific arguments to the parser.\"\"\"", "\n", "# fmt: off", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'dropout probability'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-embed-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'encoder embedding dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-embed-path'", ",", "type", "=", "str", ",", "metavar", "=", "'STR'", ",", "\n", "help", "=", "'path to pre-trained encoder embedding'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-layers'", ",", "type", "=", "str", ",", "metavar", "=", "'EXPR'", ",", "\n", "help", "=", "'encoder layers [(dim, kernel_size), ...]'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-embed-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'decoder embedding dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-embed-path'", ",", "type", "=", "str", ",", "metavar", "=", "'STR'", ",", "\n", "help", "=", "'path to pre-trained decoder embedding'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-layers'", ",", "type", "=", "str", ",", "metavar", "=", "'EXPR'", ",", "\n", "help", "=", "'decoder layers [(dim, kernel_size), ...]'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-out-embed-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'decoder output embedding dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-attention'", ",", "type", "=", "str", ",", "metavar", "=", "'EXPR'", ",", "\n", "help", "=", "'decoder attention [True, ...]'", ")", "\n", "parser", ".", "add_argument", "(", "'--share-input-output-embed'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'share input and output embeddings (requires'", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv.FConvModel.build_model": [[92, 128], ["fconv.base_architecture", "fconv.FConvEncoder", "fconv.FConvDecoder", "fconv.FConvModel", "fairseq.utils.parse_embedding", "fairseq.utils.print_embed_overlap", "fairseq.utils.parse_embedding", "fairseq.utils.print_embed_overlap", "eval", "eval", "eval"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.base_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.parse_embedding", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.print_embed_overlap", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.parse_embedding", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.print_embed_overlap", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval"], ["\n", "", "@", "classmethod", "\n", "def", "build_model", "(", "cls", ",", "args", ",", "task", ")", ":", "\n", "        ", "\"\"\"Build a new model instance.\"\"\"", "\n", "# make sure that all args are properly defaulted (in case there are any new ones)", "\n", "base_architecture", "(", "args", ")", "\n", "\n", "encoder_embed_dict", "=", "None", "\n", "if", "args", ".", "encoder_embed_path", ":", "\n", "            ", "encoder_embed_dict", "=", "utils", ".", "parse_embedding", "(", "args", ".", "encoder_embed_path", ")", "\n", "utils", ".", "print_embed_overlap", "(", "encoder_embed_dict", ",", "task", ".", "source_dictionary", ")", "\n", "\n", "", "decoder_embed_dict", "=", "None", "\n", "if", "args", ".", "decoder_embed_path", ":", "\n", "            ", "decoder_embed_dict", "=", "utils", ".", "parse_embedding", "(", "args", ".", "decoder_embed_path", ")", "\n", "utils", ".", "print_embed_overlap", "(", "decoder_embed_dict", ",", "task", ".", "target_dictionary", ")", "\n", "\n", "", "encoder", "=", "FConvEncoder", "(", "\n", "dictionary", "=", "task", ".", "source_dictionary", ",", "\n", "embed_dim", "=", "args", ".", "encoder_embed_dim", ",", "\n", "embed_dict", "=", "encoder_embed_dict", ",", "\n", "convolutions", "=", "eval", "(", "args", ".", "encoder_layers", ")", ",", "\n", "dropout", "=", "args", ".", "dropout", ",", "\n", "max_positions", "=", "args", ".", "max_source_positions", ",", "\n", ")", "\n", "decoder", "=", "FConvDecoder", "(", "\n", "dictionary", "=", "task", ".", "target_dictionary", ",", "\n", "embed_dim", "=", "args", ".", "decoder_embed_dim", ",", "\n", "embed_dict", "=", "decoder_embed_dict", ",", "\n", "convolutions", "=", "eval", "(", "args", ".", "decoder_layers", ")", ",", "\n", "out_embed_dim", "=", "args", ".", "decoder_out_embed_dim", ",", "\n", "attention", "=", "eval", "(", "args", ".", "decoder_attention", ")", ",", "\n", "dropout", "=", "args", ".", "dropout", ",", "\n", "max_positions", "=", "args", ".", "max_target_positions", ",", "\n", "share_embed", "=", "args", ".", "share_input_output_embed", ",", "\n", ")", "\n", "return", "FConvModel", "(", "encoder", ",", "decoder", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv.FConvEncoder.__init__": [[148, 195], ["fairseq.models.FairseqEncoder.__init__", "len", "dictionary.pad", "fconv.Embedding", "fconv.PositionalEmbedding", "fconv.extend_conv_spec", "fconv.Linear", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "enumerate", "fconv.Linear", "fairseq.utils.load_embedding", "fconv.FConvEncoder.projections.append", "fconv.FConvEncoder.convolutions.append", "fconv.FConvEncoder.residuals.append", "layer_in_channels.append", "fconv.ConvTBC", "fconv.Linear"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.Embedding", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.positional_embedding.PositionalEmbedding", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv.extend_conv_spec", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.load_embedding", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv.ConvTBC", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear"], ["\n", "def", "__init__", "(", "\n", "self", ",", "dictionary", ",", "embed_dim", "=", "512", ",", "embed_dict", "=", "None", ",", "max_positions", "=", "1024", ",", "\n", "convolutions", "=", "(", "(", "512", ",", "3", ")", ",", ")", "*", "20", ",", "dropout", "=", "0.1", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dictionary", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "num_attention_layers", "=", "None", "\n", "\n", "num_embeddings", "=", "len", "(", "dictionary", ")", "\n", "self", ".", "padding_idx", "=", "dictionary", ".", "pad", "(", ")", "\n", "self", ".", "embed_tokens", "=", "Embedding", "(", "num_embeddings", ",", "embed_dim", ",", "self", ".", "padding_idx", ")", "\n", "if", "embed_dict", ":", "\n", "            ", "self", ".", "embed_tokens", "=", "utils", ".", "load_embedding", "(", "embed_dict", ",", "self", ".", "dictionary", ",", "self", ".", "embed_tokens", ")", "\n", "\n", "", "self", ".", "embed_positions", "=", "PositionalEmbedding", "(", "\n", "max_positions", ",", "\n", "embed_dim", ",", "\n", "self", ".", "padding_idx", ",", "\n", ")", "\n", "\n", "convolutions", "=", "extend_conv_spec", "(", "convolutions", ")", "\n", "in_channels", "=", "convolutions", "[", "0", "]", "[", "0", "]", "\n", "self", ".", "fc1", "=", "Linear", "(", "embed_dim", ",", "in_channels", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "projections", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "convolutions", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "residuals", "=", "[", "]", "\n", "\n", "layer_in_channels", "=", "[", "in_channels", "]", "\n", "for", "_", ",", "(", "out_channels", ",", "kernel_size", ",", "residual", ")", "in", "enumerate", "(", "convolutions", ")", ":", "\n", "            ", "if", "residual", "==", "0", ":", "\n", "                ", "residual_dim", "=", "out_channels", "\n", "", "else", ":", "\n", "                ", "residual_dim", "=", "layer_in_channels", "[", "-", "residual", "]", "\n", "", "self", ".", "projections", ".", "append", "(", "Linear", "(", "residual_dim", ",", "out_channels", ")", "\n", "if", "residual_dim", "!=", "out_channels", "else", "None", ")", "\n", "if", "kernel_size", "%", "2", "==", "1", ":", "\n", "                ", "padding", "=", "kernel_size", "//", "2", "\n", "", "else", ":", "\n", "                ", "padding", "=", "0", "\n", "", "self", ".", "convolutions", ".", "append", "(", "\n", "ConvTBC", "(", "in_channels", ",", "out_channels", "*", "2", ",", "kernel_size", ",", "\n", "dropout", "=", "dropout", ",", "padding", "=", "padding", ")", "\n", ")", "\n", "self", ".", "residuals", ".", "append", "(", "residual", ")", "\n", "in_channels", "=", "out_channels", "\n", "layer_in_channels", ".", "append", "(", "out_channels", ")", "\n", "", "self", ".", "fc2", "=", "Linear", "(", "in_channels", ",", "embed_dim", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv.FConvEncoder.forward": [[196, 276], ["torch.dropout", "torch.dropout", "torch.dropout", "fconv.FConvEncoder.fc1", "src_tokens.eq().t", "conv.transpose", "zip", "conv.transpose", "fconv.FConvEncoder.fc2", "fairseq.modules.GradMultiply.apply", "fconv.FConvEncoder.embed_tokens", "fconv.FConvEncoder.embed_positions", "encoder_padding_mask.t.t.any", "torch.dropout", "torch.dropout", "torch.dropout", "torch.glu", "torch.glu", "torch.glu", "residuals.append", "encoder_padding_mask.t.t.t", "conv.masked_fill", "math.sqrt", "src_tokens.eq", "conv.masked_fill", "conv", "torch.pad", "torch.pad", "torch.pad", "conv", "encoder_padding_mask.t.t.unsqueeze", "proj", "encoder_padding_mask.t.t.unsqueeze", "math.sqrt"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad"], ["\n", "", "def", "forward", "(", "self", ",", "src_tokens", ",", "src_lengths", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            src_tokens (LongTensor): tokens in the source language of shape\n                `(batch, src_len)`\n            src_lengths (LongTensor): lengths of each source sentence of shape\n                `(batch)`\n\n        Returns:\n            dict:\n                - **encoder_out** (tuple): a tuple with two elements, where the\n                  first element is the last encoder layer's output and the\n                  second element is the same quantity summed with the input\n                  embedding (used for attention). The shape of both tensors is\n                  `(batch, src_len, embed_dim)`.\n                - **encoder_padding_mask** (ByteTensor): the positions of\n                  padding elements of shape `(batch, src_len)`\n        \"\"\"", "\n", "# embed tokens and positions", "\n", "x", "=", "self", ".", "embed_tokens", "(", "src_tokens", ")", "+", "self", ".", "embed_positions", "(", "src_tokens", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "input_embedding", "=", "x", "\n", "\n", "# project to size of convolution", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "\n", "# used to mask padding in input", "\n", "encoder_padding_mask", "=", "src_tokens", ".", "eq", "(", "self", ".", "padding_idx", ")", ".", "t", "(", ")", "# -> T x B", "\n", "if", "not", "encoder_padding_mask", ".", "any", "(", ")", ":", "\n", "            ", "encoder_padding_mask", "=", "None", "\n", "\n", "# B x T x C -> T x B x C", "\n", "", "x", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "residuals", "=", "[", "x", "]", "\n", "# temporal convolutions", "\n", "for", "proj", ",", "conv", ",", "res_layer", "in", "zip", "(", "self", ".", "projections", ",", "self", ".", "convolutions", ",", "self", ".", "residuals", ")", ":", "\n", "            ", "if", "res_layer", ">", "0", ":", "\n", "                ", "residual", "=", "residuals", "[", "-", "res_layer", "]", "\n", "residual", "=", "residual", "if", "proj", "is", "None", "else", "proj", "(", "residual", ")", "\n", "", "else", ":", "\n", "                ", "residual", "=", "None", "\n", "\n", "", "if", "encoder_padding_mask", "is", "not", "None", ":", "\n", "                ", "x", "=", "x", ".", "masked_fill", "(", "encoder_padding_mask", ".", "unsqueeze", "(", "-", "1", ")", ",", "0", ")", "\n", "\n", "", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "if", "conv", ".", "kernel_size", "[", "0", "]", "%", "2", "==", "1", ":", "\n", "# padding is implicit in the conv", "\n", "                ", "x", "=", "conv", "(", "x", ")", "\n", "", "else", ":", "\n", "                ", "padding_l", "=", "(", "conv", ".", "kernel_size", "[", "0", "]", "-", "1", ")", "//", "2", "\n", "padding_r", "=", "conv", ".", "kernel_size", "[", "0", "]", "//", "2", "\n", "x", "=", "F", ".", "pad", "(", "x", ",", "(", "0", ",", "0", ",", "0", ",", "0", ",", "padding_l", ",", "padding_r", ")", ")", "\n", "x", "=", "conv", "(", "x", ")", "\n", "", "x", "=", "F", ".", "glu", "(", "x", ",", "dim", "=", "2", ")", "\n", "\n", "if", "residual", "is", "not", "None", ":", "\n", "                ", "x", "=", "(", "x", "+", "residual", ")", "*", "math", ".", "sqrt", "(", "0.5", ")", "\n", "", "residuals", ".", "append", "(", "x", ")", "\n", "\n", "# T x B x C -> B x T x C", "\n", "", "x", "=", "x", ".", "transpose", "(", "1", ",", "0", ")", "\n", "\n", "# project back to size of embedding", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "\n", "if", "encoder_padding_mask", "is", "not", "None", ":", "\n", "            ", "encoder_padding_mask", "=", "encoder_padding_mask", ".", "t", "(", ")", "# -> B x T", "\n", "x", "=", "x", ".", "masked_fill", "(", "encoder_padding_mask", ".", "unsqueeze", "(", "-", "1", ")", ",", "0", ")", "\n", "\n", "# scale gradients (this only affects backward, not forward)", "\n", "", "x", "=", "GradMultiply", ".", "apply", "(", "x", ",", "1.0", "/", "(", "2.0", "*", "self", ".", "num_attention_layers", ")", ")", "\n", "\n", "# add output to input embedding for attention", "\n", "y", "=", "(", "x", "+", "input_embedding", ")", "*", "math", ".", "sqrt", "(", "0.5", ")", "\n", "\n", "return", "{", "\n", "'encoder_out'", ":", "(", "x", ",", "y", ")", ",", "\n", "'encoder_padding_mask'", ":", "encoder_padding_mask", ",", "# B x T", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv.FConvEncoder.reorder_encoder_out": [[278, 288], ["encoder_out[].index_select", "[].index_select", "[].index_select"], "methods", ["None"], ["\n", "", "def", "reorder_encoder_out", "(", "self", ",", "encoder_out", ",", "new_order", ")", ":", "\n", "        ", "if", "encoder_out", "[", "'encoder_out'", "]", "is", "not", "None", ":", "\n", "            ", "encoder_out", "[", "'encoder_out'", "]", "=", "(", "\n", "encoder_out", "[", "'encoder_out'", "]", "[", "0", "]", ".", "index_select", "(", "0", ",", "new_order", ")", ",", "\n", "encoder_out", "[", "'encoder_out'", "]", "[", "1", "]", ".", "index_select", "(", "0", ",", "new_order", ")", ",", "\n", ")", "\n", "", "if", "encoder_out", "[", "'encoder_padding_mask'", "]", "is", "not", "None", ":", "\n", "            ", "encoder_out", "[", "'encoder_padding_mask'", "]", "=", "encoder_out", "[", "'encoder_padding_mask'", "]", ".", "index_select", "(", "0", ",", "new_order", ")", "\n", "", "return", "encoder_out", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv.FConvEncoder.max_positions": [[289, 292], ["fconv.FConvEncoder.embed_positions.max_positions"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.max_positions"], ["\n", "", "def", "max_positions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Maximum input length supported by the encoder.\"\"\"", "\n", "return", "self", ".", "embed_positions", ".", "max_positions", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv.AttentionLayer.__init__": [[295, 303], ["torch.Module.__init__", "fconv.Linear", "fconv.Linear"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear"], ["", "", "class", "AttentionLayer", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "conv_channels", ",", "embed_dim", ",", "bmm", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# projects from output of convolution to embedding dimension", "\n", "self", ".", "in_projection", "=", "Linear", "(", "conv_channels", ",", "embed_dim", ")", "\n", "# projects from embedding dimension to convolution size", "\n", "self", ".", "out_projection", "=", "Linear", "(", "embed_dim", ",", "conv_channels", ")", "\n", "\n", "self", ".", "bmm", "=", "bmm", "if", "bmm", "is", "not", "None", "else", "torch", ".", "bmm", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv.AttentionLayer.forward": [[304, 338], ["fconv.AttentionLayer.bmm", "x.float().masked_fill().type_as.float().masked_fill().type_as.size", "torch.softmax", "torch.softmax", "torch.softmax", "x.float().masked_fill().type_as.float().masked_fill().type_as.view", "fconv.AttentionLayer.bmm", "encoder_out[].size", "math.sqrt", "x.float().masked_fill().type_as.float().masked_fill().type_as.float().masked_fill().type_as", "x.float().masked_fill().type_as.float().masked_fill().type_as.view", "s.unsqueeze.unsqueeze.unsqueeze", "math.sqrt", "fconv.AttentionLayer.in_projection", "encoder_padding_mask.type_as().sum", "fconv.AttentionLayer.out_projection", "x.float().masked_fill().type_as.float().masked_fill().type_as.float().masked_fill", "math.sqrt", "s.unsqueeze.unsqueeze.rsqrt", "encoder_padding_mask.unsqueeze", "float", "encoder_padding_mask.type_as", "x.float().masked_fill().type_as.float().masked_fill().type_as.float"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["\n", "", "def", "forward", "(", "self", ",", "x", ",", "target_embedding", ",", "encoder_out", ",", "encoder_padding_mask", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "# attention", "\n", "x", "=", "(", "self", ".", "in_projection", "(", "x", ")", "+", "target_embedding", ")", "*", "math", ".", "sqrt", "(", "0.5", ")", "\n", "x", "=", "self", ".", "bmm", "(", "x", ",", "encoder_out", "[", "0", "]", ")", "\n", "\n", "# don't attend over padding", "\n", "if", "encoder_padding_mask", "is", "not", "None", ":", "\n", "            ", "x", "=", "x", ".", "float", "(", ")", ".", "masked_fill", "(", "\n", "encoder_padding_mask", ".", "unsqueeze", "(", "1", ")", ",", "\n", "float", "(", "'-inf'", ")", "\n", ")", ".", "type_as", "(", "x", ")", "# FP16 support: cast to float and back", "\n", "\n", "# softmax over last dim", "\n", "", "sz", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "F", ".", "softmax", "(", "x", ".", "view", "(", "sz", "[", "0", "]", "*", "sz", "[", "1", "]", ",", "sz", "[", "2", "]", ")", ",", "dim", "=", "1", ")", "\n", "x", "=", "x", ".", "view", "(", "sz", ")", "\n", "attn_scores", "=", "x", "\n", "\n", "x", "=", "self", ".", "bmm", "(", "x", ",", "encoder_out", "[", "1", "]", ")", "\n", "\n", "# scale attention output (respecting potentially different lengths)", "\n", "s", "=", "encoder_out", "[", "1", "]", ".", "size", "(", "1", ")", "\n", "if", "encoder_padding_mask", "is", "None", ":", "\n", "            ", "x", "=", "x", "*", "(", "s", "*", "math", ".", "sqrt", "(", "1.0", "/", "s", ")", ")", "\n", "", "else", ":", "\n", "            ", "s", "=", "s", "-", "encoder_padding_mask", ".", "type_as", "(", "x", ")", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "# exclude padding", "\n", "s", "=", "s", ".", "unsqueeze", "(", "-", "1", ")", "\n", "x", "=", "x", "*", "(", "s", "*", "s", ".", "rsqrt", "(", ")", ")", "\n", "\n", "# project back", "\n", "", "x", "=", "(", "self", ".", "out_projection", "(", "x", ")", "+", "residual", ")", "*", "math", ".", "sqrt", "(", "0.5", ")", "\n", "return", "x", ",", "attn_scores", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv.AttentionLayer.make_generation_fast_": [[339, 344], ["fconv.AttentionLayer.add_module", "fairseq.modules.BeamableMM"], "methods", ["None"], ["\n", "", "def", "make_generation_fast_", "(", "self", ",", "beamable_mm_beam_size", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Replace torch.bmm with BeamableMM.\"\"\"", "\n", "if", "beamable_mm_beam_size", "is", "not", "None", ":", "\n", "            ", "del", "self", ".", "bmm", "\n", "self", ".", "add_module", "(", "'bmm'", ",", "BeamableMM", "(", "beamable_mm_beam_size", ")", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv.FConvDecoder.__init__": [[349, 422], ["fairseq.models.FairseqIncrementalDecoder.__init__", "fconv.FConvDecoder.register_buffer", "fconv.extend_conv_spec", "isinstance", "len", "dictionary.pad", "fconv.Embedding", "fconv.Linear", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "enumerate", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "ValueError", "fairseq.utils.load_embedding", "fconv.PositionalEmbedding", "fconv.FConvDecoder.projections.append", "fconv.FConvDecoder.convolutions.append", "fconv.FConvDecoder.attention.append", "fconv.FConvDecoder.residuals.append", "layer_in_channels.append", "fairseq.modules.AdaptiveSoftmax", "fconv.Linear", "len", "isinstance", "len", "len", "fconv.LinearizedConv1d", "torch.Linear", "torch.Linear", "torch.Linear", "fconv.Linear", "fconv.Linear", "fconv.AttentionLayer"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv.extend_conv_spec", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.Embedding", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.load_embedding", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.positional_embedding.PositionalEmbedding", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv.LinearizedConv1d", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear"], ["\n", "def", "__init__", "(", "\n", "self", ",", "dictionary", ",", "embed_dim", "=", "512", ",", "embed_dict", "=", "None", ",", "out_embed_dim", "=", "256", ",", "\n", "max_positions", "=", "1024", ",", "convolutions", "=", "(", "(", "512", ",", "3", ")", ",", ")", "*", "20", ",", "attention", "=", "True", ",", "\n", "dropout", "=", "0.1", ",", "share_embed", "=", "False", ",", "positional_embeddings", "=", "True", ",", "\n", "adaptive_softmax_cutoff", "=", "None", ",", "adaptive_softmax_dropout", "=", "0", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dictionary", ")", "\n", "self", ".", "register_buffer", "(", "'version'", ",", "torch", ".", "Tensor", "(", "[", "2", "]", ")", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "need_attn", "=", "True", "\n", "\n", "convolutions", "=", "extend_conv_spec", "(", "convolutions", ")", "\n", "in_channels", "=", "convolutions", "[", "0", "]", "[", "0", "]", "\n", "if", "isinstance", "(", "attention", ",", "bool", ")", ":", "\n", "# expand True into [True, True, ...] and do the same with False", "\n", "            ", "attention", "=", "[", "attention", "]", "*", "len", "(", "convolutions", ")", "\n", "", "if", "not", "isinstance", "(", "attention", ",", "list", ")", "or", "len", "(", "attention", ")", "!=", "len", "(", "convolutions", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Attention is expected to be a list of booleans of '", "\n", "'length equal to the number of layers.'", ")", "\n", "\n", "", "num_embeddings", "=", "len", "(", "dictionary", ")", "\n", "padding_idx", "=", "dictionary", ".", "pad", "(", ")", "\n", "self", ".", "embed_tokens", "=", "Embedding", "(", "num_embeddings", ",", "embed_dim", ",", "padding_idx", ")", "\n", "if", "embed_dict", ":", "\n", "            ", "self", ".", "embed_tokens", "=", "utils", ".", "load_embedding", "(", "embed_dict", ",", "self", ".", "dictionary", ",", "self", ".", "embed_tokens", ")", "\n", "\n", "", "self", ".", "embed_positions", "=", "PositionalEmbedding", "(", "\n", "max_positions", ",", "\n", "embed_dim", ",", "\n", "padding_idx", ",", "\n", ")", "if", "positional_embeddings", "else", "None", "\n", "\n", "self", ".", "fc1", "=", "Linear", "(", "embed_dim", ",", "in_channels", ",", "dropout", "=", "dropout", ")", "\n", "self", ".", "projections", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "convolutions", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "attention", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "residuals", "=", "[", "]", "\n", "\n", "layer_in_channels", "=", "[", "in_channels", "]", "\n", "for", "i", ",", "(", "out_channels", ",", "kernel_size", ",", "residual", ")", "in", "enumerate", "(", "convolutions", ")", ":", "\n", "            ", "if", "residual", "==", "0", ":", "\n", "                ", "residual_dim", "=", "out_channels", "\n", "", "else", ":", "\n", "                ", "residual_dim", "=", "layer_in_channels", "[", "-", "residual", "]", "\n", "", "self", ".", "projections", ".", "append", "(", "Linear", "(", "residual_dim", ",", "out_channels", ")", "\n", "if", "residual_dim", "!=", "out_channels", "else", "None", ")", "\n", "self", ".", "convolutions", ".", "append", "(", "\n", "LinearizedConv1d", "(", "in_channels", ",", "out_channels", "*", "2", ",", "kernel_size", ",", "\n", "padding", "=", "(", "kernel_size", "-", "1", ")", ",", "dropout", "=", "dropout", ")", "\n", ")", "\n", "self", ".", "attention", ".", "append", "(", "AttentionLayer", "(", "out_channels", ",", "embed_dim", ")", "\n", "if", "attention", "[", "i", "]", "else", "None", ")", "\n", "self", ".", "residuals", ".", "append", "(", "residual", ")", "\n", "in_channels", "=", "out_channels", "\n", "layer_in_channels", ".", "append", "(", "out_channels", ")", "\n", "\n", "", "self", ".", "adaptive_softmax", "=", "None", "\n", "self", ".", "fc2", "=", "self", ".", "fc3", "=", "None", "\n", "\n", "if", "adaptive_softmax_cutoff", "is", "not", "None", ":", "\n", "            ", "assert", "not", "share_embed", "\n", "self", ".", "adaptive_softmax", "=", "AdaptiveSoftmax", "(", "num_embeddings", ",", "in_channels", ",", "adaptive_softmax_cutoff", ",", "\n", "dropout", "=", "adaptive_softmax_dropout", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "fc2", "=", "Linear", "(", "in_channels", ",", "out_embed_dim", ")", "\n", "if", "share_embed", ":", "\n", "                ", "assert", "out_embed_dim", "==", "embed_dim", ",", "\"Shared embed weights implies same dimensions \"", "\" out_embed_dim={} vs embed_dim={}\"", ".", "format", "(", "out_embed_dim", ",", "embed_dim", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "out_embed_dim", ",", "num_embeddings", ")", "\n", "self", ".", "fc3", ".", "weight", "=", "self", ".", "embed_tokens", ".", "weight", "\n", "", "else", ":", "\n", "                ", "self", ".", "fc3", "=", "Linear", "(", "out_embed_dim", ",", "num_embeddings", ",", "dropout", "=", "dropout", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv.FConvDecoder.forward": [[423, 497], ["fconv.FConvDecoder._embed_tokens", "torch.dropout", "torch.dropout", "torch.dropout", "fconv.FConvDecoder.fc1", "fconv.FConvDecoder._transpose_if_training", "len", "zip", "fconv.FConvDecoder._transpose_if_training", "fconv.FConvDecoder._split_encoder_out", "fconv.FConvDecoder.embed_positions", "torch.dropout", "torch.dropout", "torch.dropout", "conv", "torch.glu", "torch.glu", "torch.glu", "residuals.append", "fconv.FConvDecoder.fc2", "torch.dropout", "torch.dropout", "torch.dropout", "fconv.FConvDecoder.fc3", "fconv.FConvDecoder._transpose_if_training", "attention", "fconv.FConvDecoder._transpose_if_training", "proj", "math.sqrt", "avg_attn_scores.add_"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv.FConvDecoder._embed_tokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv.FConvDecoder._transpose_if_training", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv.FConvDecoder._transpose_if_training", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv.FConvDecoder._split_encoder_out", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv.FConvDecoder._transpose_if_training", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv.FConvDecoder._transpose_if_training"], ["\n", "", "", "", "def", "forward", "(", "self", ",", "prev_output_tokens", ",", "encoder_out", "=", "None", ",", "incremental_state", "=", "None", ",", "**", "unused", ")", ":", "\n", "        ", "if", "encoder_out", "is", "not", "None", ":", "\n", "            ", "encoder_padding_mask", "=", "encoder_out", "[", "'encoder_padding_mask'", "]", "\n", "encoder_out", "=", "encoder_out", "[", "'encoder_out'", "]", "\n", "\n", "# split and transpose encoder outputs", "\n", "encoder_a", ",", "encoder_b", "=", "self", ".", "_split_encoder_out", "(", "encoder_out", ",", "incremental_state", ")", "\n", "\n", "", "if", "self", ".", "embed_positions", "is", "not", "None", ":", "\n", "            ", "pos_embed", "=", "self", ".", "embed_positions", "(", "prev_output_tokens", ",", "incremental_state", ")", "\n", "", "else", ":", "\n", "            ", "pos_embed", "=", "0", "\n", "\n", "", "if", "incremental_state", "is", "not", "None", ":", "\n", "            ", "prev_output_tokens", "=", "prev_output_tokens", "[", ":", ",", "-", "1", ":", "]", "\n", "", "x", "=", "self", ".", "_embed_tokens", "(", "prev_output_tokens", ",", "incremental_state", ")", "\n", "\n", "# embed tokens and combine with positional embeddings", "\n", "x", "+=", "pos_embed", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "target_embedding", "=", "x", "\n", "\n", "# project to size of convolution", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "\n", "# B x T x C -> T x B x C", "\n", "x", "=", "self", ".", "_transpose_if_training", "(", "x", ",", "incremental_state", ")", "\n", "\n", "# temporal convolutions", "\n", "avg_attn_scores", "=", "None", "\n", "num_attn_layers", "=", "len", "(", "self", ".", "attention", ")", "\n", "residuals", "=", "[", "x", "]", "\n", "for", "proj", ",", "conv", ",", "attention", ",", "res_layer", "in", "zip", "(", "self", ".", "projections", ",", "self", ".", "convolutions", ",", "self", ".", "attention", ",", "\n", "self", ".", "residuals", ")", ":", "\n", "            ", "if", "res_layer", ">", "0", ":", "\n", "                ", "residual", "=", "residuals", "[", "-", "res_layer", "]", "\n", "residual", "=", "residual", "if", "proj", "is", "None", "else", "proj", "(", "residual", ")", "\n", "", "else", ":", "\n", "                ", "residual", "=", "None", "\n", "\n", "", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "conv", "(", "x", ",", "incremental_state", ")", "\n", "x", "=", "F", ".", "glu", "(", "x", ",", "dim", "=", "2", ")", "\n", "\n", "# attention", "\n", "if", "attention", "is", "not", "None", ":", "\n", "                ", "x", "=", "self", ".", "_transpose_if_training", "(", "x", ",", "incremental_state", ")", "\n", "\n", "x", ",", "attn_scores", "=", "attention", "(", "x", ",", "target_embedding", ",", "(", "encoder_a", ",", "encoder_b", ")", ",", "encoder_padding_mask", ")", "\n", "\n", "if", "not", "self", ".", "training", "and", "self", ".", "need_attn", ":", "\n", "                    ", "attn_scores", "=", "attn_scores", "/", "num_attn_layers", "\n", "if", "avg_attn_scores", "is", "None", ":", "\n", "                        ", "avg_attn_scores", "=", "attn_scores", "\n", "", "else", ":", "\n", "                        ", "avg_attn_scores", ".", "add_", "(", "attn_scores", ")", "\n", "\n", "", "", "x", "=", "self", ".", "_transpose_if_training", "(", "x", ",", "incremental_state", ")", "\n", "\n", "# residual", "\n", "", "if", "residual", "is", "not", "None", ":", "\n", "                ", "x", "=", "(", "x", "+", "residual", ")", "*", "math", ".", "sqrt", "(", "0.5", ")", "\n", "", "residuals", ".", "append", "(", "x", ")", "\n", "\n", "# T x B x C -> B x T x C", "\n", "", "x", "=", "self", ".", "_transpose_if_training", "(", "x", ",", "incremental_state", ")", "\n", "\n", "# project back to size of vocabulary if not using adaptive softmax", "\n", "if", "self", ".", "fc2", "is", "not", "None", "and", "self", ".", "fc3", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "fc3", "(", "x", ")", "\n", "\n", "", "return", "x", ",", "avg_attn_scores", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv.FConvDecoder.reorder_incremental_state": [[498, 504], ["super().reorder_incremental_state", "fairseq.utils.get_incremental_state", "tuple", "fairseq.utils.set_incremental_state", "eo.index_select"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer.reorder_incremental_state", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.get_incremental_state", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.set_incremental_state"], ["\n", "", "def", "reorder_incremental_state", "(", "self", ",", "incremental_state", ",", "new_order", ")", ":", "\n", "        ", "super", "(", ")", ".", "reorder_incremental_state", "(", "incremental_state", ",", "new_order", ")", "\n", "encoder_out", "=", "utils", ".", "get_incremental_state", "(", "self", ",", "incremental_state", ",", "'encoder_out'", ")", "\n", "if", "encoder_out", "is", "not", "None", ":", "\n", "            ", "encoder_out", "=", "tuple", "(", "eo", ".", "index_select", "(", "0", ",", "new_order", ")", "for", "eo", "in", "encoder_out", ")", "\n", "utils", ".", "set_incremental_state", "(", "self", ",", "incremental_state", ",", "'encoder_out'", ",", "encoder_out", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv.FConvDecoder.max_positions": [[505, 508], ["fconv.FConvDecoder.embed_positions.max_positions", "float"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.max_positions"], ["\n", "", "", "def", "max_positions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Maximum output length supported by the decoder.\"\"\"", "\n", "return", "self", ".", "embed_positions", ".", "max_positions", "if", "self", ".", "embed_positions", "is", "not", "None", "else", "float", "(", "'inf'", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv.FConvDecoder.upgrade_state_dict": [[509, 518], ["fairseq.utils.item", "enumerate", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.utils.remove_weight_norm", "torch.utils.remove_weight_norm", "torch.utils.remove_weight_norm", "torch.utils.weight_norm", "torch.utils.weight_norm", "torch.utils.weight_norm", "state_dict.get", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item"], ["\n", "", "def", "upgrade_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "if", "utils", ".", "item", "(", "state_dict", ".", "get", "(", "'decoder.version'", ",", "torch", ".", "Tensor", "(", "[", "1", "]", ")", ")", "[", "0", "]", ")", "<", "2", ":", "\n", "# old models use incorrect weight norm dimension", "\n", "            ", "for", "i", ",", "conv", "in", "enumerate", "(", "self", ".", "convolutions", ")", ":", "\n", "# reconfigure weight norm", "\n", "                ", "nn", ".", "utils", ".", "remove_weight_norm", "(", "conv", ")", "\n", "self", ".", "convolutions", "[", "i", "]", "=", "nn", ".", "utils", ".", "weight_norm", "(", "conv", ",", "dim", "=", "0", ")", "\n", "", "state_dict", "[", "'decoder.version'", "]", "=", "torch", ".", "Tensor", "(", "[", "1", "]", ")", "\n", "", "return", "state_dict", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv.FConvDecoder.make_generation_fast_": [[519, 521], ["None"], "methods", ["None"], ["\n", "", "def", "make_generation_fast_", "(", "self", ",", "need_attn", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "need_attn", "=", "need_attn", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv.FConvDecoder._embed_tokens": [[522, 527], ["fconv.FConvDecoder.embed_tokens"], "methods", ["None"], ["\n", "", "def", "_embed_tokens", "(", "self", ",", "tokens", ",", "incremental_state", ")", ":", "\n", "        ", "if", "incremental_state", "is", "not", "None", ":", "\n", "# keep only the last token for incremental forward pass", "\n", "            ", "tokens", "=", "tokens", "[", ":", ",", "-", "1", ":", "]", "\n", "", "return", "self", ".", "embed_tokens", "(", "tokens", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv.FConvDecoder._split_encoder_out": [[528, 545], ["fairseq.utils.get_incremental_state", "encoder_a.transpose().contiguous.transpose().contiguous.transpose().contiguous", "fairseq.utils.set_incremental_state", "encoder_a.transpose().contiguous.transpose().contiguous.transpose"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.get_incremental_state", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.set_incremental_state"], ["\n", "", "def", "_split_encoder_out", "(", "self", ",", "encoder_out", ",", "incremental_state", ")", ":", "\n", "        ", "\"\"\"Split and transpose encoder outputs.\n\n        This is cached when doing incremental inference.\n        \"\"\"", "\n", "cached_result", "=", "utils", ".", "get_incremental_state", "(", "self", ",", "incremental_state", ",", "'encoder_out'", ")", "\n", "if", "cached_result", "is", "not", "None", ":", "\n", "            ", "return", "cached_result", "\n", "\n", "# transpose only once to speed up attention layers", "\n", "", "encoder_a", ",", "encoder_b", "=", "encoder_out", "\n", "encoder_a", "=", "encoder_a", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "result", "=", "(", "encoder_a", ",", "encoder_b", ")", "\n", "\n", "if", "incremental_state", "is", "not", "None", ":", "\n", "            ", "utils", ".", "set_incremental_state", "(", "self", ",", "incremental_state", ",", "'encoder_out'", ",", "result", ")", "\n", "", "return", "result", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv.FConvDecoder._transpose_if_training": [[546, 550], ["x.transpose.transpose.transpose"], "methods", ["None"], ["\n", "", "def", "_transpose_if_training", "(", "self", ",", "x", ",", "incremental_state", ")", ":", "\n", "        ", "if", "incremental_state", "is", "None", ":", "\n", "            ", "x", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", "\n", "", "return", "x", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv.extend_conv_spec": [[552, 567], ["tuple", "len", "extended.append", "len", "extended.append", "Exception", "str"], "function", ["None"], ["\n", "", "", "def", "extend_conv_spec", "(", "convolutions", ")", ":", "\n", "    ", "\"\"\"\n    Extends convolutional spec that is a list of tuples of 2 or 3 parameters\n    (kernel size, dim size and optionally how many layers behind to look for residual)\n    to default the residual propagation param if it is not specified\n    \"\"\"", "\n", "extended", "=", "[", "]", "\n", "for", "spec", "in", "convolutions", ":", "\n", "        ", "if", "len", "(", "spec", ")", "==", "3", ":", "\n", "            ", "extended", ".", "append", "(", "spec", ")", "\n", "", "elif", "len", "(", "spec", ")", "==", "2", ":", "\n", "            ", "extended", ".", "append", "(", "spec", "+", "(", "1", ",", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'invalid number of parameters in convolution spec '", "+", "str", "(", "spec", ")", "+", "'. expected 2 or 3'", ")", "\n", "", "", "return", "tuple", "(", "extended", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv.Embedding": [[569, 574], ["torch.Embedding", "torch.init.normal_", "torch.init.constant_"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.Embedding"], ["\n", "", "def", "Embedding", "(", "num_embeddings", ",", "embedding_dim", ",", "padding_idx", ")", ":", "\n", "    ", "m", "=", "nn", ".", "Embedding", "(", "num_embeddings", ",", "embedding_dim", ",", "padding_idx", "=", "padding_idx", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "0.1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", "[", "padding_idx", "]", ",", "0", ")", "\n", "return", "m", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv.PositionalEmbedding": [[576, 581], ["fairseq.modules.LearnedPositionalEmbedding", "torch.init.normal_", "torch.init.constant_"], "function", ["None"], ["\n", "", "def", "PositionalEmbedding", "(", "num_embeddings", ",", "embedding_dim", ",", "padding_idx", ")", ":", "\n", "    ", "m", "=", "LearnedPositionalEmbedding", "(", "num_embeddings", ",", "embedding_dim", ",", "padding_idx", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "0.1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", "[", "padding_idx", "]", ",", "0", ")", "\n", "return", "m", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv.Linear": [[583, 589], ["torch.Linear", "torch.init.normal_", "torch.init.constant_", "torch.utils.weight_norm", "math.sqrt"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear"], ["\n", "", "def", "Linear", "(", "in_features", ",", "out_features", ",", "dropout", "=", "0", ")", ":", "\n", "    ", "\"\"\"Weight-normalized Linear layer (input: N x T x C)\"\"\"", "\n", "m", "=", "nn", ".", "Linear", "(", "in_features", ",", "out_features", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "math", ".", "sqrt", "(", "(", "1", "-", "dropout", ")", "/", "in_features", ")", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "return", "nn", ".", "utils", ".", "weight_norm", "(", "m", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv.LinearizedConv1d": [[591, 598], ["fairseq.modules.LinearizedConvolution", "math.sqrt", "torch.init.normal_", "torch.init.constant_", "torch.utils.weight_norm"], "function", ["None"], ["\n", "", "def", "LinearizedConv1d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "dropout", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Weight-normalized Conv1d layer optimized for decoding\"\"\"", "\n", "m", "=", "LinearizedConvolution", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "**", "kwargs", ")", "\n", "std", "=", "math", ".", "sqrt", "(", "(", "4", "*", "(", "1.0", "-", "dropout", ")", ")", "/", "(", "m", ".", "kernel_size", "[", "0", "]", "*", "in_channels", ")", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "std", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "return", "nn", ".", "utils", ".", "weight_norm", "(", "m", ",", "dim", "=", "2", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv.ConvTBC": [[600, 608], ["fconv.ConvTBC", "math.sqrt", "torch.init.normal_", "torch.init.constant_", "torch.utils.weight_norm"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv.ConvTBC"], ["\n", "", "def", "ConvTBC", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "dropout", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Weight-normalized Conv1d layer\"\"\"", "\n", "from", "fairseq", ".", "modules", "import", "ConvTBC", "\n", "m", "=", "ConvTBC", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "**", "kwargs", ")", "\n", "std", "=", "math", ".", "sqrt", "(", "(", "4", "*", "(", "1.0", "-", "dropout", ")", ")", "/", "(", "m", ".", "kernel_size", "[", "0", "]", "*", "in_channels", ")", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "std", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "return", "nn", ".", "utils", ".", "weight_norm", "(", "m", ",", "dim", "=", "2", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv.base_architecture": [[610, 622], ["fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture"], ["\n", "", "@", "register_model_architecture", "(", "'fconv'", ",", "'fconv'", ")", "\n", "def", "base_architecture", "(", "args", ")", ":", "\n", "    ", "args", ".", "dropout", "=", "getattr", "(", "args", ",", "'dropout'", ",", "0.1", ")", "\n", "args", ".", "encoder_embed_dim", "=", "getattr", "(", "args", ",", "'encoder_embed_dim'", ",", "512", ")", "\n", "args", ".", "encoder_embed_path", "=", "getattr", "(", "args", ",", "'encoder_embed_path'", ",", "None", ")", "\n", "args", ".", "encoder_layers", "=", "getattr", "(", "args", ",", "'encoder_layers'", ",", "'[(512, 3)] * 20'", ")", "\n", "args", ".", "decoder_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_embed_dim'", ",", "512", ")", "\n", "args", ".", "decoder_embed_path", "=", "getattr", "(", "args", ",", "'decoder_embed_path'", ",", "None", ")", "\n", "args", ".", "decoder_layers", "=", "getattr", "(", "args", ",", "'decoder_layers'", ",", "'[(512, 3)] * 20'", ")", "\n", "args", ".", "decoder_out_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_out_embed_dim'", ",", "256", ")", "\n", "args", ".", "decoder_attention", "=", "getattr", "(", "args", ",", "'decoder_attention'", ",", "'True'", ")", "\n", "args", ".", "share_input_output_embed", "=", "getattr", "(", "args", ",", "'share_input_output_embed'", ",", "False", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv.fconv_iwslt_de_en": [[624, 632], ["fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "fconv.base_architecture"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.base_architecture"], ["\n", "", "@", "register_model_architecture", "(", "'fconv'", ",", "'fconv_iwslt_de_en'", ")", "\n", "def", "fconv_iwslt_de_en", "(", "args", ")", ":", "\n", "    ", "args", ".", "encoder_embed_dim", "=", "getattr", "(", "args", ",", "'encoder_embed_dim'", ",", "256", ")", "\n", "args", ".", "encoder_layers", "=", "getattr", "(", "args", ",", "'encoder_layers'", ",", "'[(256, 3)] * 4'", ")", "\n", "args", ".", "decoder_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_embed_dim'", ",", "256", ")", "\n", "args", ".", "decoder_layers", "=", "getattr", "(", "args", ",", "'decoder_layers'", ",", "'[(256, 3)] * 3'", ")", "\n", "args", ".", "decoder_out_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_out_embed_dim'", ",", "256", ")", "\n", "base_architecture", "(", "args", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv.fconv_wmt_en_ro": [[634, 638], ["fairseq.models.register_model_architecture", "getattr", "fconv.base_architecture"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.base_architecture"], ["\n", "", "@", "register_model_architecture", "(", "'fconv'", ",", "'fconv_wmt_en_ro'", ")", "\n", "def", "fconv_wmt_en_ro", "(", "args", ")", ":", "\n", "    ", "args", ".", "decoder_out_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_out_embed_dim'", ",", "512", ")", "\n", "base_architecture", "(", "args", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv.fconv_wmt_en_de": [[640, 652], ["fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "fconv.base_architecture"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.base_architecture"], ["\n", "", "@", "register_model_architecture", "(", "'fconv'", ",", "'fconv_wmt_en_de'", ")", "\n", "def", "fconv_wmt_en_de", "(", "args", ")", ":", "\n", "    ", "convs", "=", "'[(512, 3)] * 9'", "# first 9 layers have 512 units", "\n", "convs", "+=", "' + [(1024, 3)] * 4'", "# next 4 layers have 1024 units", "\n", "convs", "+=", "' + [(2048, 1)] * 2'", "# final 2 layers use 1x1 convolutions", "\n", "\n", "args", ".", "encoder_embed_dim", "=", "getattr", "(", "args", ",", "'encoder_embed_dim'", ",", "768", ")", "\n", "args", ".", "encoder_layers", "=", "getattr", "(", "args", ",", "'encoder_layers'", ",", "convs", ")", "\n", "args", ".", "decoder_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_embed_dim'", ",", "768", ")", "\n", "args", ".", "decoder_layers", "=", "getattr", "(", "args", ",", "'decoder_layers'", ",", "convs", ")", "\n", "args", ".", "decoder_out_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_out_embed_dim'", ",", "512", ")", "\n", "base_architecture", "(", "args", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv.fconv_wmt_en_fr": [[654, 668], ["fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "fconv.base_architecture"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.base_architecture"], ["\n", "", "@", "register_model_architecture", "(", "'fconv'", ",", "'fconv_wmt_en_fr'", ")", "\n", "def", "fconv_wmt_en_fr", "(", "args", ")", ":", "\n", "    ", "convs", "=", "'[(512, 3)] * 6'", "# first 6 layers have 512 units", "\n", "convs", "+=", "' + [(768, 3)] * 4'", "# next 4 layers have 768 units", "\n", "convs", "+=", "' + [(1024, 3)] * 3'", "# next 3 layers have 1024 units", "\n", "convs", "+=", "' + [(2048, 1)] * 1'", "# next 1 layer uses 1x1 convolutions", "\n", "convs", "+=", "' + [(4096, 1)] * 1'", "# final 1 layer uses 1x1 convolutions", "\n", "\n", "args", ".", "encoder_embed_dim", "=", "getattr", "(", "args", ",", "'encoder_embed_dim'", ",", "768", ")", "\n", "args", ".", "encoder_layers", "=", "getattr", "(", "args", ",", "'encoder_layers'", ",", "convs", ")", "\n", "args", ".", "decoder_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_embed_dim'", ",", "768", ")", "\n", "args", ".", "decoder_layers", "=", "getattr", "(", "args", ",", "'decoder_layers'", ",", "convs", ")", "\n", "args", ".", "decoder_out_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_out_embed_dim'", ",", "512", ")", "\n", "base_architecture", "(", "args", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.masked_lm.MaskedLMModel.__init__": [[31, 41], ["fairseq.models.BaseFairseqModel.__init__", "getattr", "masked_lm.MaskedLMModel.apply"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["@", "register_task", "(", "'masked_lm'", ")", "\n", "class", "MaskedLMTask", "(", "FairseqTask", ")", ":", "\n", "    ", "\"\"\"Task for training masked language models (e.g., BERT, RoBERTa).\"\"\"", "\n", "\n", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add task-specific arguments to the parser.\"\"\"", "\n", "parser", ".", "add_argument", "(", "'data'", ",", "help", "=", "'colon separated path to data directories list, \\\n                            will be iterated upon during epochs in round-robin manner'", ")", "\n", "parser", ".", "add_argument", "(", "'--sample-break-mode'", ",", "default", "=", "'complete'", ",", "\n", "choices", "=", "[", "'none'", ",", "'complete'", ",", "'complete_doc'", ",", "'eos'", "]", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.masked_lm.MaskedLMModel.add_args": [[42, 101], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "fairseq.utils.get_available_activation_fns", "fairseq.utils.get_available_activation_fns"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.get_available_activation_fns", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.get_available_activation_fns"], ["help", "=", "'If omitted or \"none\", fills each sample with tokens-per-sample '", "\n", "'tokens. If set to \"complete\", splits samples only at the end '", "\n", "'of sentence, but may include multiple sentences per sample. '", "\n", "'\"complete_doc\" is similar but respects doc boundaries. '", "\n", "'If set to \"eos\", includes only one sentence per sample.'", ")", "\n", "parser", ".", "add_argument", "(", "'--tokens-per-sample'", ",", "default", "=", "512", ",", "type", "=", "int", ",", "\n", "help", "=", "'max number of total tokens over all segments '", "\n", "'per sample for BERT dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--mask-prob'", ",", "default", "=", "0.15", ",", "type", "=", "float", ",", "\n", "help", "=", "'probability of replacing a token with mask'", ")", "\n", "parser", ".", "add_argument", "(", "'--leave-unmasked-prob'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "\n", "help", "=", "'probability that a masked token is unmasked'", ")", "\n", "parser", ".", "add_argument", "(", "'--random-token-prob'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "\n", "help", "=", "'probability of replacing a token with a random token'", ")", "\n", "parser", ".", "add_argument", "(", "'--freq-weighted-replacement'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'sample random replacement words based on word frequencies'", ")", "\n", "parser", ".", "add_argument", "(", "'--mask-whole-words'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'mask whole words; you may also want to set --bpe'", ")", "\n", "\n", "", "def", "__init__", "(", "self", ",", "args", ",", "dictionary", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "self", ".", "dictionary", "=", "dictionary", "\n", "self", ".", "seed", "=", "args", ".", "seed", "\n", "\n", "# add mask token", "\n", "self", ".", "mask_idx", "=", "dictionary", ".", "add_symbol", "(", "'<mask>'", ")", "\n", "\n", "", "@", "classmethod", "\n", "def", "setup_task", "(", "cls", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "paths", "=", "args", ".", "data", ".", "split", "(", "os", ".", "pathsep", ")", "\n", "assert", "len", "(", "paths", ")", ">", "0", "\n", "dictionary", "=", "Dictionary", ".", "load", "(", "os", ".", "path", ".", "join", "(", "paths", "[", "0", "]", ",", "'dict.txt'", ")", ")", "\n", "logger", ".", "info", "(", "'dictionary: {} types'", ".", "format", "(", "len", "(", "dictionary", ")", ")", ")", "\n", "return", "cls", "(", "args", ",", "dictionary", ")", "\n", "\n", "", "def", "load_dataset", "(", "self", ",", "split", ",", "epoch", "=", "0", ",", "combine", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Load a given dataset split.\n\n        Args:\n            split (str): name of the split (e.g., train, valid, test)\n        \"\"\"", "\n", "paths", "=", "self", ".", "args", ".", "data", ".", "split", "(", "os", ".", "pathsep", ")", "\n", "assert", "len", "(", "paths", ")", ">", "0", "\n", "data_path", "=", "paths", "[", "epoch", "%", "len", "(", "paths", ")", "]", "\n", "split_path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "split", ")", "\n", "\n", "dataset", "=", "data_utils", ".", "load_indexed_dataset", "(", "\n", "split_path", ",", "\n", "self", ".", "source_dictionary", ",", "\n", "self", ".", "args", ".", "dataset_impl", ",", "\n", "combine", "=", "combine", ",", "\n", ")", "\n", "if", "dataset", "is", "None", ":", "\n", "            ", "raise", "FileNotFoundError", "(", "'Dataset not found: {} ({})'", ".", "format", "(", "split", ",", "split_path", ")", ")", "\n", "\n", "# create continuous blocks of tokens", "\n", "", "dataset", "=", "TokenBlockDataset", "(", "\n", "dataset", ",", "\n", "dataset", ".", "sizes", ",", "\n", "self", ".", "args", ".", "tokens_per_sample", "-", "1", ",", "# one less for <s>", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.masked_lm.MaskedLMModel.forward": [[102, 104], ["masked_lm.MaskedLMModel.encoder"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqMultiModel.encoder"], ["pad", "=", "self", ".", "source_dictionary", ".", "pad", "(", ")", ",", "\n", "eos", "=", "self", ".", "source_dictionary", ".", "eos", "(", ")", ",", "\n", "break_mode", "=", "self", ".", "args", ".", "sample_break_mode", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.masked_lm.MaskedLMModel.max_positions": [[105, 107], ["None"], "methods", ["None"], [")", "\n", "logger", ".", "info", "(", "'loaded {} blocks from: {}'", ".", "format", "(", "len", "(", "dataset", ")", ",", "split_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.masked_lm.MaskedLMModel.build_model": [[108, 122], ["masked_lm.base_architecture", "print", "masked_lm.MaskedLMEncoder", "cls", "hasattr"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.base_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dictionary.BertDictionary.cls"], ["# prepend beginning-of-sentence token (<s>, equiv. to [CLS] in BERT)", "\n", "dataset", "=", "PrependTokenDataset", "(", "dataset", ",", "self", ".", "source_dictionary", ".", "bos", "(", ")", ")", "\n", "\n", "# create masked input and targets", "\n", "mask_whole_words", "=", "get_whole_word_mask", "(", "self", ".", "args", ",", "self", ".", "source_dictionary", ")", "if", "self", ".", "args", ".", "mask_whole_words", "else", "None", "\n", "\n", "src_dataset", ",", "tgt_dataset", "=", "MaskTokensDataset", ".", "apply_mask", "(", "\n", "dataset", ",", "\n", "self", ".", "source_dictionary", ",", "\n", "pad_idx", "=", "self", ".", "source_dictionary", ".", "pad", "(", ")", ",", "\n", "mask_idx", "=", "self", ".", "mask_idx", ",", "\n", "seed", "=", "self", ".", "args", ".", "seed", ",", "\n", "mask_prob", "=", "self", ".", "args", ".", "mask_prob", ",", "\n", "leave_unmasked_prob", "=", "self", ".", "args", ".", "leave_unmasked_prob", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.masked_lm.MaskedLMEncoder.__init__": [[129, 191], ["fairseq.models.FairseqEncoder.__init__", "dictionary.pad", "dictionary.__len__", "fairseq.modules.TransformerSentenceEncoder", "torch.Linear", "torch.Linear", "torch.Linear", "fairseq.utils.get_activation_fn", "torch.Linear", "torch.Linear", "torch.Linear", "fairseq.utils.get_activation_fn", "fairseq.modules.LayerNorm", "getattr", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.__len__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.get_activation_fn", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.get_activation_fn", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.layer_norm.LayerNorm", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear"], ["            ", "shuffle", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "src_dataset", ")", ")", "\n", "\n", "", "self", ".", "datasets", "[", "split", "]", "=", "SortDataset", "(", "\n", "NestedDictionaryDataset", "(", "\n", "{", "\n", "'id'", ":", "IdDataset", "(", ")", ",", "\n", "'net_input'", ":", "{", "\n", "'src_tokens'", ":", "PadDataset", "(", "\n", "src_dataset", ",", "\n", "pad_idx", "=", "self", ".", "source_dictionary", ".", "pad", "(", ")", ",", "\n", "left_pad", "=", "False", ",", "\n", ")", ",", "\n", "'src_lengths'", ":", "NumelDataset", "(", "src_dataset", ",", "reduce", "=", "False", ")", ",", "\n", "}", ",", "\n", "'target'", ":", "PadDataset", "(", "\n", "tgt_dataset", ",", "\n", "pad_idx", "=", "self", ".", "source_dictionary", ".", "pad", "(", ")", ",", "\n", "left_pad", "=", "False", ",", "\n", ")", ",", "\n", "'nsentences'", ":", "NumSamplesDataset", "(", ")", ",", "\n", "'ntokens'", ":", "NumelDataset", "(", "src_dataset", ",", "reduce", "=", "True", ")", ",", "\n", "}", ",", "\n", "sizes", "=", "[", "src_dataset", ".", "sizes", "]", ",", "\n", ")", ",", "\n", "sort_order", "=", "[", "\n", "shuffle", ",", "\n", "src_dataset", ".", "sizes", ",", "\n", "]", ",", "\n", ")", "\n", "\n", "", "def", "build_dataset_for_inference", "(", "self", ",", "src_tokens", ",", "src_lengths", ",", "sort", "=", "True", ")", ":", "\n", "        ", "src_dataset", "=", "PadDataset", "(", "\n", "TokenBlockDataset", "(", "\n", "src_tokens", ",", "\n", "src_lengths", ",", "\n", "self", ".", "args", ".", "tokens_per_sample", "-", "1", ",", "# one less for <s>", "\n", "pad", "=", "self", ".", "source_dictionary", ".", "pad", "(", ")", ",", "\n", "eos", "=", "self", ".", "source_dictionary", ".", "eos", "(", ")", ",", "\n", "break_mode", "=", "'eos'", ",", "\n", ")", ",", "\n", "pad_idx", "=", "self", ".", "source_dictionary", ".", "pad", "(", ")", ",", "\n", "left_pad", "=", "False", ",", "\n", ")", "\n", "src_dataset", "=", "PrependTokenDataset", "(", "src_dataset", ",", "self", ".", "source_dictionary", ".", "bos", "(", ")", ")", "\n", "src_dataset", "=", "NestedDictionaryDataset", "(", "\n", "{", "\n", "'id'", ":", "IdDataset", "(", ")", ",", "\n", "'net_input'", ":", "{", "\n", "'src_tokens'", ":", "src_dataset", ",", "\n", "'src_lengths'", ":", "NumelDataset", "(", "src_dataset", ",", "reduce", "=", "False", ")", ",", "\n", "}", ",", "\n", "}", ",", "\n", "sizes", "=", "src_lengths", ",", "\n", ")", "\n", "if", "sort", ":", "\n", "            ", "src_dataset", "=", "SortDataset", "(", "src_dataset", ",", "sort_order", "=", "[", "src_lengths", "]", ")", "\n", "", "return", "src_dataset", "\n", "\n", "", "@", "property", "\n", "def", "source_dictionary", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dictionary", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.masked_lm.MaskedLMEncoder.forward": [[193, 244], ["masked_lm.MaskedLMEncoder.sentence_encoder", "inner_states[].transpose", "masked_lm.MaskedLMEncoder.layer_norm", "masked_lm.MaskedLMEncoder.pooler_activation", "masked_lm.MaskedLMEncoder.activation_fn", "masked_lm.MaskedLMEncoder.masked_lm_pooler", "hasattr", "torch.linear", "torch.linear", "torch.linear", "masked_lm.MaskedLMEncoder.sentence_projection_layer", "masked_lm.MaskedLMEncoder.lm_head_transform_weight", "masked_lm.MaskedLMEncoder.embed_out"], "methods", ["None"], ["        ", "return", "self", ".", "dictionary", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.masked_lm.MaskedLMEncoder.max_positions": [[246, 249], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.masked_lm.MaskedLMEncoder.upgrade_state_dict_named": [[250, 267], ["isinstance", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "list", "state_dict.keys"], "methods", ["None"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.masked_lm.base_architecture": [[269, 295], ["fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.masked_lm.bert_base_architecture": [[297, 323], ["fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "masked_lm.base_architecture"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.base_architecture"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.masked_lm.bert_large_architecture": [[325, 332], ["fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "getattr", "masked_lm.bert_base_architecture"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.masked_lm.bert_base_architecture"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.masked_lm.xlm_architecture": [[334, 358], ["fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "masked_lm.base_architecture"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.base_architecture"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.BaseFairseqModel.__init__": [[24, 27], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["\n", "class", "BaseFairseqModel", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"Base class for fairseq models.\"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.BaseFairseqModel.add_args": [[28, 32], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "_is_generation_fast", "=", "False", "\n", "\n", "", "@", "staticmethod", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.BaseFairseqModel.build_model": [[33, 37], ["NotImplementedError"], "methods", ["None"], ["def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add model-specific arguments to the parser.\"\"\"", "\n", "pass", "\n", "\n", "", "@", "classmethod", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.BaseFairseqModel.get_targets": [[38, 41], ["None"], "methods", ["None"], ["def", "build_model", "(", "cls", ",", "args", ",", "task", ")", ":", "\n", "        ", "\"\"\"Build a new model instance.\"\"\"", "\n", "raise", "NotImplementedError", "(", "\"Model must implement the build_model method\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.BaseFairseqModel.get_normalized_probs": [[42, 53], ["hasattr", "fairseq_model.BaseFairseqModel.decoder.get_normalized_probs", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "net_output.float", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.get_normalized_probs", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax"], ["", "def", "get_targets", "(", "self", ",", "sample", ",", "net_output", ")", ":", "\n", "        ", "\"\"\"Get targets from either the sample or the net's output.\"\"\"", "\n", "return", "sample", "[", "\"target\"", "]", "\n", "\n", "", "def", "get_normalized_probs", "(", "\n", "self", ",", "\n", "net_output", ":", "Tuple", "[", "Tensor", ",", "Dict", "[", "str", ",", "List", "[", "Optional", "[", "Tensor", "]", "]", "]", "]", ",", "\n", "log_probs", ":", "bool", ",", "\n", "sample", ":", "Optional", "[", "Dict", "[", "str", ",", "Tensor", "]", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Get normalized probabilities (or log probs) from a net's output.\"\"\"", "\n", "if", "hasattr", "(", "self", ",", "\"decoder\"", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.BaseFairseqModel.extract_features": [[54, 57], ["fairseq_model.BaseFairseqModel."], "methods", ["None"], ["            ", "return", "self", ".", "decoder", ".", "get_normalized_probs", "(", "net_output", ",", "log_probs", ",", "sample", ")", "\n", "", "elif", "torch", ".", "is_tensor", "(", "net_output", ")", ":", "\n", "            ", "logits", "=", "net_output", ".", "float", "(", ")", "\n", "if", "log_probs", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.BaseFairseqModel.max_positions": [[58, 61], ["None"], "methods", ["None"], ["                ", "return", "F", ".", "log_softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "                ", "return", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "", "", "raise", "NotImplementedError", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.BaseFairseqModel.load_state_dict": [[62, 72], ["fairseq_model.BaseFairseqModel.upgrade_state_dict", "fairseq.checkpoint_utils.prune_state_dict", "super().load_state_dict"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_decoder.FairseqDecoder.upgrade_state_dict", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.checkpoint_utils.prune_state_dict", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.load_state_dict"], ["\n", "", "def", "extract_features", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Similar to *forward* but only return features.\"\"\"", "\n", "return", "self", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "def", "max_positions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Maximum length supported by the model.\"\"\"", "\n", "return", "None", "\n", "\n", "", "def", "load_state_dict", "(", "self", ",", "state_dict", ",", "strict", "=", "True", ",", "args", "=", "None", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.BaseFairseqModel.upgrade_state_dict": [[73, 76], ["fairseq_model.BaseFairseqModel.upgrade_state_dict_named"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.model.BARTModel.upgrade_state_dict_named"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.BaseFairseqModel.upgrade_state_dict_named": [[77, 99], ["fairseq_model.BaseFairseqModel.upgrade_state_dict_named.do_upgrade"], "methods", ["None"], ["\n", "self", ".", "upgrade_state_dict", "(", "state_dict", ")", "\n", "new_state_dict", "=", "prune_state_dict", "(", "state_dict", ",", "args", ")", "\n", "return", "super", "(", ")", ".", "load_state_dict", "(", "new_state_dict", ",", "strict", ")", "\n", "\n", "", "def", "upgrade_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "\"\"\"Upgrade old state dicts to work with newer code.\"\"\"", "\n", "self", ".", "upgrade_state_dict_named", "(", "state_dict", ",", "\"\"", ")", "\n", "\n", "", "def", "upgrade_state_dict_named", "(", "self", ",", "state_dict", ",", "name", ")", ":", "\n", "        ", "\"\"\"Upgrade old state dicts to work with newer code.\n\n        Args:\n            state_dict (dict): state dictionary to upgrade, in place\n            name (str): the state dict key corresponding to the current module\n        \"\"\"", "\n", "assert", "state_dict", "is", "not", "None", "\n", "\n", "def", "do_upgrade", "(", "m", ",", "prefix", ")", ":", "\n", "            ", "if", "len", "(", "prefix", ")", ">", "0", ":", "\n", "                ", "prefix", "+=", "\".\"", "\n", "\n", "", "for", "n", ",", "c", "in", "m", ".", "named_children", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.BaseFairseqModel.make_generation_fast_": [[100, 132], ["fairseq_model.BaseFairseqModel.apply", "set", "fairseq_model.BaseFairseqModel.apply", "fairseq_model.BaseFairseqModel.eval", "torch.utils.remove_weight_norm", "torch.utils.remove_weight_norm", "torch.utils.remove_weight_norm", "hasattr", "set.add", "module.make_generation_fast_", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.eval_lm.WordStat.add", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.TransformerDecoderLayer.make_generation_fast_"], ["                ", "name", "=", "prefix", "+", "n", "\n", "if", "hasattr", "(", "c", ",", "\"upgrade_state_dict_named\"", ")", ":", "\n", "                    ", "c", ".", "upgrade_state_dict_named", "(", "state_dict", ",", "name", ")", "\n", "", "elif", "hasattr", "(", "c", ",", "\"upgrade_state_dict\"", ")", ":", "\n", "                    ", "c", ".", "upgrade_state_dict", "(", "state_dict", ")", "\n", "", "do_upgrade", "(", "c", ",", "name", ")", "\n", "\n", "", "", "do_upgrade", "(", "self", ",", "name", ")", "\n", "\n", "", "def", "make_generation_fast_", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Optimize model for faster generation.\"\"\"", "\n", "if", "self", ".", "_is_generation_fast", ":", "\n", "            ", "return", "# only apply once", "\n", "", "self", ".", "_is_generation_fast", "=", "True", "\n", "\n", "# remove weight norm from all modules in the network", "\n", "def", "apply_remove_weight_norm", "(", "module", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "nn", ".", "utils", ".", "remove_weight_norm", "(", "module", ")", "\n", "", "except", "ValueError", ":", "# this module didn't have weight norm", "\n", "                ", "return", "\n", "\n", "", "", "self", ".", "apply", "(", "apply_remove_weight_norm", ")", "\n", "\n", "seen", "=", "set", "(", ")", "\n", "\n", "def", "apply_make_generation_fast_", "(", "module", ")", ":", "\n", "            ", "if", "(", "\n", "module", "!=", "self", "\n", "and", "hasattr", "(", "module", ",", "\"make_generation_fast_\"", ")", "\n", "and", "module", "not", "in", "seen", "\n", ")", ":", "\n", "                ", "seen", ".", "add", "(", "module", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.BaseFairseqModel.prepare_for_onnx_export_": [[133, 144], ["set", "fairseq_model.BaseFairseqModel.apply", "hasattr", "set.add", "module.prepare_for_onnx_export_"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.eval_lm.WordStat.add", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.TransformerDecoderLayer.prepare_for_onnx_export_"], ["module", ".", "make_generation_fast_", "(", "**", "kwargs", ")", "\n", "\n", "", "", "self", ".", "apply", "(", "apply_make_generation_fast_", ")", "\n", "\n", "def", "train", "(", "mode", "=", "True", ")", ":", "\n", "            ", "if", "mode", ":", "\n", "                ", "raise", "RuntimeError", "(", "\"cannot train after make_generation_fast\"", ")", "\n", "\n", "# this model should no longer be used for training", "\n", "", "", "self", ".", "eval", "(", ")", "\n", "self", ".", "train", "=", "train", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.BaseFairseqModel.from_pretrained": [[145, 178], ["hub_utils.from_pretrained", "print", "hub_utils.GeneratorHubInterface", "cls.hub_models"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.model.BARTModel.from_pretrained", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.model.BARTModel.hub_models"], ["", "def", "prepare_for_onnx_export_", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Make model exportable via ONNX trace.\"\"\"", "\n", "seen", "=", "set", "(", ")", "\n", "\n", "def", "apply_prepare_for_onnx_export_", "(", "module", ")", ":", "\n", "            ", "if", "(", "\n", "module", "!=", "self", "\n", "and", "hasattr", "(", "module", ",", "\"prepare_for_onnx_export_\"", ")", "\n", "and", "module", "not", "in", "seen", "\n", ")", ":", "\n", "                ", "seen", ".", "add", "(", "module", ")", "\n", "module", ".", "prepare_for_onnx_export_", "(", "**", "kwargs", ")", "\n", "\n", "", "", "self", ".", "apply", "(", "apply_prepare_for_onnx_export_", ")", "\n", "\n", "", "@", "classmethod", "\n", "def", "from_pretrained", "(", "\n", "cls", ",", "\n", "model_name_or_path", ",", "\n", "checkpoint_file", "=", "\"model.pt\"", ",", "\n", "data_name_or_path", "=", "\".\"", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.BaseFairseqModel.hub_models": [[179, 182], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqEncoderDecoderModel.__init__": [[192, 199], ["fairseq_model.BaseFairseqModel.__init__", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["model_name_or_path", ",", "\n", "checkpoint_file", ",", "\n", "data_name_or_path", ",", "\n", "archive_map", "=", "cls", ".", "hub_models", "(", ")", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "logger", ".", "info", "(", "x", "[", "\"args\"", "]", ")", "\n", "return", "hub_utils", ".", "GeneratorHubInterface", "(", "x", "[", "\"args\"", "]", ",", "x", "[", "\"task\"", "]", ",", "x", "[", "\"models\"", "]", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqEncoderDecoderModel.forward": [[200, 226], ["fairseq_model.FairseqEncoderDecoderModel.encoder", "fairseq_model.FairseqEncoderDecoderModel.decoder"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqMultiModel.encoder", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqMultiModel.decoder"], ["\n", "", "@", "classmethod", "\n", "def", "hub_models", "(", "cls", ")", ":", "\n", "        ", "return", "{", "}", "\n", "\n", "\n", "", "", "class", "FairseqEncoderDecoderModel", "(", "BaseFairseqModel", ")", ":", "\n", "    ", "\"\"\"Base class for encoder-decoder models.\n\n    Args:\n        encoder (FairseqEncoder): the encoder\n        decoder (FairseqDecoder): the decoder\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "encoder", ",", "decoder", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "encoder", "=", "encoder", "\n", "self", ".", "decoder", "=", "decoder", "\n", "assert", "isinstance", "(", "self", ".", "encoder", ",", "FairseqEncoder", ")", "\n", "assert", "isinstance", "(", "self", ".", "decoder", ",", "FairseqDecoder", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "src_tokens", ",", "src_lengths", ",", "prev_output_tokens", ",", "**", "kwargs", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqEncoderDecoderModel.forward_decoder": [[227, 229], ["fairseq_model.FairseqEncoderDecoderModel.decoder"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqMultiModel.decoder"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqEncoderDecoderModel.extract_features": [[230, 242], ["fairseq_model.FairseqEncoderDecoderModel.encoder", "fairseq_model.FairseqEncoderDecoderModel.decoder.extract_features"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqMultiModel.encoder", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_transformer.LevenshteinTransformerDecoder.extract_features"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqEncoderDecoderModel.output_layer": [[243, 246], ["fairseq_model.FairseqEncoderDecoderModel.decoder.output_layer"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.TransformerDecoder.output_layer"], ["\n", "encoder_out", "=", "self", ".", "encoder", "(", "src_tokens", ",", "src_lengths", "=", "src_lengths", ",", "**", "kwargs", ")", "\n", "decoder_out", "=", "self", ".", "decoder", "(", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqEncoderDecoderModel.max_positions": [[247, 250], ["fairseq_model.FairseqEncoderDecoderModel.encoder.max_positions", "fairseq_model.FairseqEncoderDecoderModel.decoder.max_positions"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.max_positions", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.max_positions"], ["prev_output_tokens", ",", "encoder_out", "=", "encoder_out", ",", "**", "kwargs", "\n", ")", "\n", "return", "decoder_out", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqEncoderDecoderModel.max_decoder_positions": [[251, 254], ["fairseq_model.FairseqEncoderDecoderModel.decoder.max_positions"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.max_positions"], ["", "def", "forward_decoder", "(", "self", ",", "prev_output_tokens", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "decoder", "(", "prev_output_tokens", ",", "**", "kwargs", ")", "\n", "\n", "", "def", "extract_features", "(", "self", ",", "src_tokens", ",", "src_lengths", ",", "prev_output_tokens", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqModel.__init__": [[258, 264], ["fairseq_model.FairseqEncoderDecoderModel.__init__", "fairseq.utils.deprecation_warning"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.deprecation_warning"], ["\n", "encoder_out", "=", "self", ".", "encoder", "(", "src_tokens", ",", "src_lengths", "=", "src_lengths", ",", "**", "kwargs", ")", "\n", "features", "=", "self", ".", "decoder", ".", "extract_features", "(", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqMultiModel.__init__": [[270, 281], ["fairseq_model.BaseFairseqModel.__init__", "list", "torch.ModuleDict", "torch.ModuleDict", "torch.ModuleDict", "encoders.keys", "decoders.keys", "encoders.keys", "isinstance", "isinstance", "fairseq_model.FairseqEncoderDecoderModel"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["        ", "\"\"\"Project features to the default output size (typically vocabulary size).\"\"\"", "\n", "return", "self", ".", "decoder", ".", "output_layer", "(", "features", ",", "**", "kwargs", ")", "\n", "\n", "", "def", "max_positions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Maximum length supported by the model.\"\"\"", "\n", "return", "(", "self", ".", "encoder", ".", "max_positions", "(", ")", ",", "self", ".", "decoder", ".", "max_positions", "(", ")", ")", "\n", "\n", "", "def", "max_decoder_positions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Maximum length supported by the decoder.\"\"\"", "\n", "return", "self", ".", "decoder", ".", "max_positions", "(", ")", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqMultiModel.build_shared_embeddings": [[283, 313], ["any", "build_embedding", "ValueError"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "utils", ".", "deprecation_warning", "(", "\n", "\"FairseqModel is deprecated, please use FairseqEncoderDecoderModel \"", "\n", "\"or BaseFairseqModel instead\"", ",", "\n", "stacklevel", "=", "4", ",", "\n", ")", "\n", "\n", "\n", "", "", "class", "FairseqMultiModel", "(", "BaseFairseqModel", ")", ":", "\n", "    ", "\"\"\"Base class for combining multiple encoder-decoder models.\"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "encoders", ",", "decoders", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "encoders", ".", "keys", "(", ")", "==", "decoders", ".", "keys", "(", ")", "\n", "self", ".", "keys", "=", "list", "(", "encoders", ".", "keys", "(", ")", ")", "\n", "for", "key", "in", "self", ".", "keys", ":", "\n", "            ", "assert", "isinstance", "(", "encoders", "[", "key", "]", ",", "FairseqEncoder", ")", "\n", "assert", "isinstance", "(", "decoders", "[", "key", "]", ",", "FairseqDecoder", ")", "\n", "\n", "", "self", ".", "models", "=", "nn", ".", "ModuleDict", "(", "\n", "{", "\n", "key", ":", "FairseqEncoderDecoderModel", "(", "encoders", "[", "key", "]", ",", "decoders", "[", "key", "]", ")", "\n", "for", "key", "in", "self", ".", "keys", "\n", "}", "\n", ")", "\n", "\n", "", "@", "staticmethod", "\n", "def", "build_shared_embeddings", "(", "\n", "dicts", ":", "Dict", "[", "str", ",", "Dictionary", "]", ",", "\n", "langs", ":", "List", "[", "str", "]", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqMultiModel.forward": [[315, 323], ["fairseq_model.FairseqMultiModel.models[].encoder", "fairseq_model.FairseqMultiModel.models[].decoder"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqMultiModel.encoder", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqMultiModel.decoder"], ["build_embedding", ":", "callable", ",", "\n", "pretrained_embed_path", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqMultiModel.max_positions": [[324, 329], ["fairseq_model.FairseqMultiModel.models[].encoder.max_positions", "fairseq_model.FairseqMultiModel.models[].decoder.max_positions"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.max_positions", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.max_positions"], ["\n", "shared_dict", "=", "dicts", "[", "langs", "[", "0", "]", "]", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqMultiModel.max_decoder_positions": [[331, 334], ["min", "model.decoder.max_positions", "fairseq_model.FairseqMultiModel.models.values"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.max_positions"], ["            ", "raise", "ValueError", "(", "\n", "\"--share-*-embeddings requires a joined dictionary: \"", "\n", "\"--share-encoder-embeddings requires a joined source \"", "\n", "\"dictionary, --share-decoder-embeddings requires a joined \"", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqMultiModel.encoder": [[335, 338], ["None"], "methods", ["None"], ["\"target dictionary, and --share-all-embeddings requires a \"", "\n", "\"joint source + target dictionary.\"", "\n", ")", "\n", "", "return", "build_embedding", "(", "shared_dict", ",", "embed_dim", ",", "pretrained_embed_path", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqMultiModel.decoder": [[339, 342], ["None"], "methods", ["None"], ["\n", "", "def", "forward", "(", "self", ",", "src_tokens", ",", "src_lengths", ",", "prev_output_tokens", ",", "**", "kwargs", ")", ":", "\n", "        ", "decoder_outs", "=", "{", "}", "\n", "for", "key", "in", "self", ".", "keys", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqMultiModel.forward_decoder": [[343, 345], ["fairseq_model.FairseqMultiModel.decoder"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqMultiModel.decoder"], ["            ", "encoder_out", "=", "self", ".", "models", "[", "key", "]", ".", "encoder", "(", "src_tokens", ",", "src_lengths", ",", "**", "kwargs", ")", "\n", "decoder_outs", "[", "key", "]", "=", "self", ".", "models", "[", "key", "]", ".", "decoder", "(", "\n", "prev_output_tokens", ",", "encoder_out", ",", "**", "kwargs", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqMultiModel.load_state_dict": [[346, 356], ["fairseq_model.FairseqMultiModel.upgrade_state_dict", "fairseq.checkpoint_utils.prune_state_dict", "fairseq_model.BaseFairseqModel.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_decoder.FairseqDecoder.upgrade_state_dict", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.checkpoint_utils.prune_state_dict", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.load_state_dict"], [")", "\n", "", "return", "decoder_outs", "\n", "\n", "", "def", "max_positions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Maximum length supported by the model.\"\"\"", "\n", "return", "{", "\n", "key", ":", "(", "\n", "self", ".", "models", "[", "key", "]", ".", "encoder", ".", "max_positions", "(", ")", ",", "\n", "self", ".", "models", "[", "key", "]", ".", "decoder", ".", "max_positions", "(", ")", ",", "\n", ")", "\n", "for", "key", "in", "self", ".", "keys", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqLanguageModel.__init__": [[364, 368], ["fairseq_model.BaseFairseqModel.__init__", "isinstance"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["def", "encoder", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "models", "[", "self", ".", "keys", "[", "0", "]", "]", ".", "encoder", "\n", "\n", "", "@", "property", "\n", "def", "decoder", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqLanguageModel.forward": [[369, 386], ["fairseq_model.FairseqLanguageModel.decoder"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqMultiModel.decoder"], ["        ", "return", "self", ".", "models", "[", "self", ".", "keys", "[", "0", "]", "]", ".", "decoder", "\n", "\n", "", "def", "forward_decoder", "(", "self", ",", "prev_output_tokens", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "decoder", "(", "prev_output_tokens", ",", "**", "kwargs", ")", "\n", "\n", "", "def", "load_state_dict", "(", "self", ",", "state_dict", ",", "strict", "=", "True", ",", "args", "=", "None", ")", ":", "\n", "        ", "\"\"\"Copies parameters and buffers from *state_dict* into this module and\n        its descendants.\n\n        Overrides the method in :class:`nn.Module`. Compared with that method\n        this additionally \"upgrades\" *state_dicts* from old checkpoints.\n        \"\"\"", "\n", "self", ".", "upgrade_state_dict", "(", "state_dict", ")", "\n", "new_state_dict", "=", "prune_state_dict", "(", "state_dict", ",", "args", ")", "\n", "return", "super", "(", ")", ".", "load_state_dict", "(", "new_state_dict", ",", "strict", ")", "\n", "\n", "\n", "", "", "class", "FairseqLanguageModel", "(", "BaseFairseqModel", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqLanguageModel.forward_decoder": [[387, 389], ["fairseq_model.FairseqLanguageModel.decoder"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqMultiModel.decoder"], ["    "]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqLanguageModel.extract_features": [[390, 400], ["fairseq_model.FairseqLanguageModel.decoder.extract_features"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_transformer.LevenshteinTransformerDecoder.extract_features"], ["\n", "\n", "def", "__init__", "(", "self", ",", "decoder", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "decoder", "=", "decoder", "\n", "assert", "isinstance", "(", "self", ".", "decoder", ",", "FairseqDecoder", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "src_tokens", ",", "**", "kwargs", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqLanguageModel.output_layer": [[401, 404], ["fairseq_model.FairseqLanguageModel.decoder.output_layer"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.TransformerDecoder.output_layer"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqLanguageModel.max_positions": [[405, 408], ["fairseq_model.FairseqLanguageModel.decoder.max_positions"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.max_positions"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqLanguageModel.max_decoder_positions": [[409, 412], ["fairseq_model.FairseqLanguageModel.decoder.max_positions"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.max_positions"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqLanguageModel.supported_targets": [[413, 416], ["None"], "methods", ["None"], ["\n", "return", "self", ".", "decoder", "(", "src_tokens", ",", "**", "kwargs", ")", "\n", "\n", "", "def", "forward_decoder", "(", "self", ",", "prev_output_tokens", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqEncoderModel.__init__": [[425, 429], ["fairseq_model.BaseFairseqModel.__init__", "isinstance"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["\n", "return", "self", ".", "decoder", ".", "extract_features", "(", "src_tokens", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqEncoderModel.forward": [[430, 444], ["fairseq_model.FairseqEncoderModel.encoder"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqMultiModel.encoder"], ["", "def", "output_layer", "(", "self", ",", "features", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Project features to the default output size (typically vocabulary size).\"\"\"", "\n", "return", "self", ".", "decoder", ".", "output_layer", "(", "features", ",", "**", "kwargs", ")", "\n", "\n", "", "def", "max_positions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Maximum length supported by the model.\"\"\"", "\n", "return", "self", ".", "decoder", ".", "max_positions", "(", ")", "\n", "\n", "", "def", "max_decoder_positions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Maximum length supported by the decoder.\"\"\"", "\n", "return", "self", ".", "decoder", ".", "max_positions", "(", ")", "\n", "\n", "", "@", "property", "\n", "def", "supported_targets", "(", "self", ")", ":", "\n", "        ", "return", "{", "\"future\"", "}", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqEncoderModel.get_normalized_probs": [[445, 455], ["torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "encoder_out.float", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax"], ["\n", "\n", "", "", "class", "FairseqEncoderModel", "(", "BaseFairseqModel", ")", ":", "\n", "    ", "\"\"\"Base class for encoder-only models.\n\n    Args:\n        encoder (FairseqEncoder): the encoder\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "encoder", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqEncoderModel.max_positions": [[456, 459], ["fairseq_model.FairseqEncoderModel.encoder.max_positions"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.max_positions"], ["self", ".", "encoder", "=", "encoder", "\n", "assert", "isinstance", "(", "self", ".", "encoder", ",", "FairseqEncoder", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "src_tokens", ",", "src_lengths", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.wav2vec.Wav2VecModel.add_args": [[22, 67], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["@", "register_model", "(", "'wav2vec'", ")", "\n", "class", "Wav2VecModel", "(", "BaseFairseqModel", ")", ":", "\n", "\n", "    ", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add model-specific arguments to the parser.\"\"\"", "\n", "parser", ".", "add_argument", "(", "'--prediction-steps'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "help", "=", "'number of steps ahead to predict'", ")", "\n", "parser", ".", "add_argument", "(", "'--sample-distance'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'sample distance from target. does not work properly with cross-sampling'", ")", "\n", "parser", ".", "add_argument", "(", "'--cross-sample-negatives'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'whether to sample negatives across examples in the same batch'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-negatives'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "help", "=", "'number of negative examples'", ")", "\n", "parser", ".", "add_argument", "(", "'--conv-feature-layers'", ",", "type", "=", "str", ",", "metavar", "=", "'EXPR'", ",", "\n", "help", "=", "'convolutional feature extraction layers [(dim, kernel_size, stride), ...]'", ")", "\n", "parser", ".", "add_argument", "(", "'--conv-aggregator-layers'", ",", "type", "=", "str", ",", "metavar", "=", "'EXPR'", ",", "\n", "help", "=", "'convolutional feature extraction layers [(dim, kernel_size, stride), ...]'", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "help", "=", "'dropout to apply within the model'", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout-features'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "help", "=", "'dropout to apply to the features'", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout-agg'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "help", "=", "'dropout to apply after aggregation step'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder'", ",", "type", "=", "str", ",", "choices", "=", "[", "'cnn'", "]", ",", "help", "=", "'type of encoder to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--aggregator'", ",", "type", "=", "str", ",", "choices", "=", "[", "'cnn'", ",", "'gru'", "]", ",", "\n", "help", "=", "'type of aggregator to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--gru-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "help", "=", "'GRU dimensionality'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--no-conv-bias'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'if set, does not learn bias for conv layers'", ")", "\n", "parser", ".", "add_argument", "(", "'--agg-zero-pad'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'if set, zero pads in aggregator instead of repl pad'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--skip-connections-feat'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'if set, adds skip connections to the feature extractor'", ")", "\n", "parser", ".", "add_argument", "(", "'--skip-connections-agg'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'if set, adds skip connections to the aggregator'", ")", "\n", "parser", ".", "add_argument", "(", "'--residual-scale'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'scales residual by sqrt(value)'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--log-compression'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'if set, adds a log compression to feature extractor'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--balanced-classes'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'if set, loss is scaled to balance for number of negatives'", ")", "\n", "parser", ".", "add_argument", "(", "'--project-features'", ",", "choices", "=", "[", "'none'", ",", "'same'", ",", "'new'", "]", ",", "\n", "help", "=", "'if not none, features are projected using the (same or new) aggregator'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--non-affine-group-norm'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'if set, group norm is not affine'", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.wav2vec.Wav2VecModel.build_model": [[69, 79], ["wav2vec.base_wav2vec_architecture", "wav2vec.Wav2VecModel", "print"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.wav2vec.base_wav2vec_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], ["parser", ".", "add_argument", "(", "'--offset'", ",", "help", "=", "'if set, introduces an offset from target to predictions. '", "\n", "'if set to \"auto\", it is computed automatically from the receptive field'", ")", "\n", "\n", "", "@", "classmethod", "\n", "def", "build_model", "(", "cls", ",", "args", ",", "task", ")", ":", "\n", "        ", "\"\"\"Build a new model instance.\"\"\"", "\n", "\n", "# make sure all arguments are present in older models", "\n", "base_wav2vec_architecture", "(", "args", ")", "\n", "\n", "model", "=", "Wav2VecModel", "(", "args", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.wav2vec.Wav2VecModel.__init__": [[80, 171], ["BaseFairseqModel.__init__", "int", "wav2vec.Wav2VecModel.__init__.make_aggregator"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["logger", ".", "info", "(", "model", ")", "\n", "return", "model", "\n", "\n", "", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "prediction_steps", "=", "args", ".", "prediction_steps", "\n", "\n", "offset", "=", "args", ".", "offset", "\n", "\n", "if", "args", ".", "encoder", "==", "'cnn'", ":", "\n", "            ", "feature_enc_layers", "=", "eval", "(", "args", ".", "conv_feature_layers", ")", "\n", "self", ".", "feature_extractor", "=", "ConvFeatureExtractionModel", "(", "\n", "conv_layers", "=", "feature_enc_layers", ",", "\n", "dropout", "=", "0.", ",", "\n", "log_compression", "=", "args", ".", "log_compression", ",", "\n", "skip_connections", "=", "args", ".", "skip_connections_feat", ",", "\n", "residual_scale", "=", "args", ".", "residual_scale", ",", "\n", "non_affine_group_norm", "=", "args", ".", "non_affine_group_norm", ",", "\n", ")", "\n", "embed", "=", "feature_enc_layers", "[", "-", "1", "]", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "'unknown encoder type '", "+", "args", ".", "encoder", ")", "\n", "\n", "", "if", "args", ".", "offset", "==", "'auto'", ":", "\n", "            ", "assert", "args", ".", "encoder", "==", "'cnn'", "\n", "jin", "=", "0", "\n", "rin", "=", "0", "\n", "for", "_", ",", "k", ",", "stride", "in", "feature_enc_layers", ":", "\n", "                ", "if", "rin", "==", "0", ":", "\n", "                    ", "rin", "=", "k", "\n", "", "rin", "=", "rin", "+", "(", "k", "-", "1", ")", "*", "jin", "\n", "if", "jin", "==", "0", ":", "\n", "                    ", "jin", "=", "stride", "\n", "", "else", ":", "\n", "                    ", "jin", "*=", "stride", "\n", "", "", "offset", "=", "math", ".", "ceil", "(", "rin", "/", "jin", ")", "\n", "\n", "", "offset", "=", "int", "(", "offset", ")", "\n", "\n", "def", "make_aggregator", "(", ")", ":", "\n", "            ", "if", "args", ".", "aggregator", "==", "'cnn'", ":", "\n", "                ", "agg_layers", "=", "eval", "(", "args", ".", "conv_aggregator_layers", ")", "\n", "agg_dim", "=", "agg_layers", "[", "-", "1", "]", "[", "0", "]", "\n", "feature_aggregator", "=", "ConvAggegator", "(", "\n", "conv_layers", "=", "agg_layers", ",", "\n", "embed", "=", "embed", ",", "\n", "dropout", "=", "args", ".", "dropout", ",", "\n", "skip_connections", "=", "args", ".", "skip_connections_agg", ",", "\n", "residual_scale", "=", "args", ".", "residual_scale", ",", "\n", "non_affine_group_norm", "=", "args", ".", "non_affine_group_norm", ",", "\n", "conv_bias", "=", "not", "args", ".", "no_conv_bias", ",", "\n", "zero_pad", "=", "args", ".", "agg_zero_pad", ",", "\n", ")", "\n", "", "elif", "args", ".", "aggregator", "==", "'gru'", ":", "\n", "                ", "agg_dim", "=", "args", ".", "gru_dim", "\n", "feature_aggregator", "=", "nn", ".", "Sequential", "(", "\n", "TransposeLast", "(", ")", ",", "\n", "nn", ".", "GRU", "(", "\n", "input_size", "=", "embed", ",", "\n", "hidden_size", "=", "agg_dim", ",", "\n", "num_layers", "=", "1", ",", "\n", "dropout", "=", "args", ".", "dropout", ",", "\n", ")", ",", "\n", "TransposeLast", "(", "deconstruct_idx", "=", "0", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "raise", "Exception", "(", "'unknown aggregator type '", "+", "args", ".", "aggregator", ")", "\n", "\n", "", "return", "feature_aggregator", ",", "agg_dim", "\n", "\n", "", "self", ".", "feature_aggregator", ",", "agg_dim", "=", "make_aggregator", "(", ")", "\n", "\n", "self", ".", "wav2vec_predictions", "=", "Wav2VecPredictionsModel", "(", "\n", "in_dim", "=", "agg_dim", ",", "\n", "out_dim", "=", "embed", ",", "\n", "prediction_steps", "=", "args", ".", "prediction_steps", ",", "\n", "n_negatives", "=", "args", ".", "num_negatives", ",", "\n", "cross_sample_negatives", "=", "args", ".", "cross_sample_negatives", ",", "\n", "sample_distance", "=", "args", ".", "sample_distance", ",", "\n", "dropout", "=", "args", ".", "dropout", ",", "\n", "offset", "=", "offset", ",", "\n", "balanced_classes", "=", "args", ".", "balanced_classes", ",", "\n", ")", "\n", "\n", "self", ".", "dropout_feats", "=", "nn", ".", "Dropout", "(", "p", "=", "args", ".", "dropout_features", ")", "\n", "self", ".", "dropout_agg", "=", "nn", ".", "Dropout", "(", "p", "=", "args", ".", "dropout_agg", ")", "\n", "\n", "if", "args", ".", "project_features", "==", "'none'", ":", "\n", "            ", "self", ".", "project_features", "=", "None", "\n", "", "elif", "args", ".", "project_features", "==", "'same'", ":", "\n", "            ", "self", ".", "project_features", "=", "self", ".", "feature_aggregator", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.wav2vec.Wav2VecModel.forward": [[172, 188], ["wav2vec.Wav2VecModel.feature_extractor", "wav2vec.Wav2VecModel.dropout_feats", "wav2vec.Wav2VecModel.feature_aggregator", "wav2vec.Wav2VecModel.dropout_agg", "wav2vec.Wav2VecModel.wav2vec_predictions", "wav2vec.Wav2VecModel.project_features"], "methods", ["None"], ["", "elif", "args", ".", "project_features", "==", "'new'", ":", "\n", "            ", "self", ".", "project_features", ",", "_", "=", "make_aggregator", "(", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "source", ")", ":", "\n", "        ", "result", "=", "{", "}", "\n", "\n", "features", "=", "self", ".", "feature_extractor", "(", "source", ")", "\n", "\n", "x", "=", "self", ".", "dropout_feats", "(", "features", ")", "\n", "x", "=", "self", ".", "feature_aggregator", "(", "x", ")", "\n", "x", "=", "self", ".", "dropout_agg", "(", "x", ")", "\n", "\n", "if", "self", ".", "project_features", "is", "not", "None", ":", "\n", "            ", "features", "=", "self", ".", "project_features", "(", "features", ")", "\n", "", "x", ",", "targets", "=", "self", ".", "wav2vec_predictions", "(", "x", ",", "features", ")", "\n", "result", "[", "'cpc_logits'", "]", "=", "x", "\n", "result", "[", "'cpc_targets'", "]", "=", "targets", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.wav2vec.Wav2VecModel.upgrade_state_dict_named": [[189, 191], ["super().upgrade_state_dict_named"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.model.BARTModel.upgrade_state_dict_named"], ["\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.wav2vec.Wav2VecModel.max_positions": [[192, 195], ["None"], "methods", ["None"], ["", "def", "upgrade_state_dict_named", "(", "self", ",", "state_dict", ",", "name", ")", ":", "\n", "        ", "super", "(", ")", ".", "upgrade_state_dict_named", "(", "state_dict", ",", "name", ")", "\n", "\n", "", "def", "max_positions", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.wav2vec.Wav2VecModel.get_logits": [[196, 199], ["None"], "methods", ["None"], ["        ", "\"\"\"Maximum length supported by the model.\"\"\"", "\n", "return", "sys", ".", "maxsize", "\n", "\n", "", "def", "get_logits", "(", "self", ",", "net_output", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.wav2vec.Wav2VecModel.get_targets": [[200, 203], ["t.contiguous"], "methods", ["None"], ["        ", "logits", "=", "net_output", "[", "'cpc_logits'", "]", "\n", "return", "logits", "\n", "\n", "", "def", "get_targets", "(", "self", ",", "sample", ",", "net_output", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.wav2vec.Wav2VecModel.get_target_weights": [[204, 209], ["isinstance"], "methods", ["None"], ["        ", "t", "=", "net_output", "[", "'cpc_targets'", "]", "\n", "return", "t", ".", "contiguous", "(", ")", "\n", "\n", "", "def", "get_target_weights", "(", "self", ",", "targets", ",", "net_output", ")", ":", "\n", "        ", "targets", "=", "net_output", "[", "'cpc_targets'", "]", "\n", "if", "isinstance", "(", "targets", ",", "tuple", ")", "and", "targets", "[", "-", "1", "]", "is", "not", "None", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.wav2vec.TransposeLast.__init__": [[212, 215], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["\n", "\n", "", "", "class", "TransposeLast", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "deconstruct_idx", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.wav2vec.TransposeLast.forward": [[216, 220], ["x.transpose"], "methods", ["None"], ["        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "deconstruct_idx", "=", "deconstruct_idx", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "deconstruct_idx", "is", "not", "None", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.wav2vec.Fp32GroupNorm.__init__": [[223, 225], ["torch.GroupNorm.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["\n", "\n", "", "", "class", "Fp32GroupNorm", "(", "nn", ".", "GroupNorm", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.wav2vec.Fp32GroupNorm.forward": [[226, 231], ["torch.group_norm", "torch.group_norm", "torch.group_norm", "torch.group_norm.type_as", "input.float", "wav2vec.Fp32GroupNorm.weight.float", "wav2vec.Fp32GroupNorm.bias.float"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "output", "=", "F", ".", "group_norm", "(", "\n", "input", ".", "float", "(", ")", ",", "self", ".", "num_groups", ",", "self", ".", "weight", ".", "float", "(", ")", "if", "self", ".", "weight", "is", "not", "None", "else", "None", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.wav2vec.Fp32LayerNorm.__init__": [[234, 236], ["torch.LayerNorm.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["\n", "\n", "", "", "class", "Fp32LayerNorm", "(", "nn", ".", "LayerNorm", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.wav2vec.Fp32LayerNorm.forward": [[237, 242], ["torch.layer_norm", "torch.layer_norm", "torch.layer_norm", "torch.layer_norm.type_as", "input.float", "wav2vec.Fp32LayerNorm.weight.float", "wav2vec.Fp32LayerNorm.bias.float"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "output", "=", "F", ".", "layer_norm", "(", "\n", "input", ".", "float", "(", ")", ",", "self", ".", "normalized_shape", ",", "self", ".", "weight", ".", "float", "(", ")", "if", "self", ".", "weight", "is", "not", "None", "else", "None", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.wav2vec.ConvFeatureExtractionModel.__init__": [[258, 279], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "enumerate", "math.sqrt", "torch.Sequential", "torch.Sequential", "torch.Sequential", "wav2vec.ConvFeatureExtractionModel.conv_layers.append", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "wav2vec.norm_block", "torch.ReLU", "torch.ReLU", "torch.ReLU", "wav2vec.ConvFeatureExtractionModel.__init__.block"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.wav2vec.norm_block"], ["\n", "\n", "", "class", "ConvFeatureExtractionModel", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "conv_layers", ",", "dropout", ",", "log_compression", ",", "skip_connections", ",", "residual_scale", ",", "non_affine_group_norm", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "def", "block", "(", "n_in", ",", "n_out", ",", "k", ",", "stride", ")", ":", "\n", "            ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv1d", "(", "n_in", ",", "n_out", ",", "k", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", ",", "\n", "norm_block", "(", "is_layer_norm", "=", "False", ",", "dim", "=", "n_out", ",", "affine", "=", "not", "non_affine_group_norm", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "\n", "", "in_d", "=", "1", "\n", "self", ".", "conv_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "dim", ",", "k", ",", "stride", "in", "conv_layers", ":", "\n", "            ", "self", ".", "conv_layers", ".", "append", "(", "\n", "block", "(", "in_d", ",", "dim", ",", "k", ",", "stride", ")", "\n", ")", "\n", "in_d", "=", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.wav2vec.ConvFeatureExtractionModel.forward": [[280, 299], ["x.log.log.unsqueeze", "conv", "x.log.log.abs", "x.log.log.log", "x.log.log.size", "residual.size", "x.log.log.size", "residual.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "self", ".", "log_compression", "=", "log_compression", "\n", "self", ".", "skip_connections", "=", "skip_connections", "\n", "self", ".", "residual_scale", "=", "math", ".", "sqrt", "(", "residual_scale", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "# BxT -> BxCxT", "\n", "        ", "x", "=", "x", ".", "unsqueeze", "(", "1", ")", "\n", "\n", "for", "conv", "in", "self", ".", "conv_layers", ":", "\n", "            ", "residual", "=", "x", "\n", "x", "=", "conv", "(", "x", ")", "\n", "if", "self", ".", "skip_connections", "and", "x", ".", "size", "(", "1", ")", "==", "residual", ".", "size", "(", "1", ")", ":", "\n", "                ", "tsz", "=", "x", ".", "size", "(", "2", ")", "\n", "r_tsz", "=", "residual", ".", "size", "(", "2", ")", "\n", "residual", "=", "residual", "[", "...", ",", ":", ":", "r_tsz", "//", "tsz", "]", "[", "...", ",", ":", "tsz", "]", "\n", "x", "=", "(", "x", "+", "residual", ")", "*", "self", ".", "residual_scale", "\n", "\n", "", "", "if", "self", ".", "log_compression", ":", "\n", "            ", "x", "=", "x", ".", "abs", "(", ")", "\n", "x", "=", "x", "+", "1", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.wav2vec.ZeroPad1d.__init__": [[302, 306], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["", "return", "x", "\n", "\n", "\n", "", "", "class", "ZeroPad1d", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "pad_left", ",", "pad_right", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.wav2vec.ZeroPad1d.forward": [[307, 309], ["torch.pad", "torch.pad", "torch.pad"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad"], ["        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "pad_left", "=", "pad_left", "\n", "self", ".", "pad_right", "=", "pad_right", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.wav2vec.ConvAggegator.__init__": [[312, 348], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "enumerate", "torch.Sequential", "torch.Sequential", "torch.Sequential", "math.sqrt", "torch.Sequential", "torch.Sequential", "torch.Sequential", "wav2vec.ConvAggegator.conv_layers.append", "wav2vec.ZeroPad1d", "torch.ReplicationPad1d", "torch.ReplicationPad1d", "torch.ReplicationPad1d", "torch.Conv1d", "torch.Conv1d", "torch.Conv1d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "wav2vec.norm_block", "torch.ReLU", "torch.ReLU", "torch.ReLU", "wav2vec.ConvAggegator.residual_proj.append", "wav2vec.ConvAggegator.residual_proj.append", "wav2vec.ConvAggegator.__init__.block"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.wav2vec.norm_block"], ["        ", "return", "F", ".", "pad", "(", "x", ",", "(", "self", ".", "pad_left", ",", "self", ".", "pad_right", ")", ")", "\n", "\n", "\n", "", "", "class", "ConvAggegator", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "conv_layers", ",", "embed", ",", "dropout", ",", "skip_connections", ",", "residual_scale", ",", "non_affine_group_norm", ",", "conv_bias", ",", "\n", "zero_pad", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "def", "block", "(", "n_in", ",", "n_out", ",", "k", ",", "stride", ")", ":", "\n", "# padding dims only really make sense for stride = 1", "\n", "            ", "ka", "=", "k", "//", "2", "\n", "kb", "=", "ka", "-", "1", "if", "k", "%", "2", "==", "0", "else", "ka", "\n", "\n", "pad", "=", "ZeroPad1d", "(", "ka", "+", "kb", ",", "0", ")", "if", "zero_pad", "else", "nn", ".", "ReplicationPad1d", "(", "(", "ka", "+", "kb", ",", "0", ")", ")", "\n", "\n", "return", "nn", ".", "Sequential", "(", "\n", "pad", ",", "\n", "nn", ".", "Conv1d", "(", "n_in", ",", "n_out", ",", "k", ",", "stride", "=", "stride", ",", "bias", "=", "conv_bias", ")", ",", "\n", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", ",", "\n", "norm_block", "(", "False", ",", "n_out", ",", "affine", "=", "not", "non_affine_group_norm", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", ")", "\n", "\n", "", "in_d", "=", "embed", "\n", "self", ".", "conv_layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "residual_proj", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "dim", ",", "k", ",", "stride", "in", "conv_layers", ":", "\n", "            ", "if", "in_d", "!=", "dim", "and", "skip_connections", ":", "\n", "                ", "self", ".", "residual_proj", ".", "append", "(", "\n", "nn", ".", "Conv1d", "(", "in_d", ",", "dim", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "residual_proj", ".", "append", "(", "None", ")", "\n", "\n", "", "self", ".", "conv_layers", ".", "append", "(", "\n", "block", "(", "in_d", ",", "dim", ",", "k", ",", "stride", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.wav2vec.ConvAggegator.forward": [[349, 358], ["zip", "conv", "rproj"], "methods", ["None"], ["in_d", "=", "dim", "\n", "", "self", ".", "conv_layers", "=", "nn", ".", "Sequential", "(", "*", "self", ".", "conv_layers", ")", "\n", "self", ".", "skip_connections", "=", "skip_connections", "\n", "self", ".", "residual_scale", "=", "math", ".", "sqrt", "(", "residual_scale", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "rproj", ",", "conv", "in", "zip", "(", "self", ".", "residual_proj", ",", "self", ".", "conv_layers", ")", ":", "\n", "            ", "residual", "=", "x", "\n", "x", "=", "conv", "(", "x", ")", "\n", "if", "self", ".", "skip_connections", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.wav2vec.Wav2VecPredictionsModel.__init__": [[361, 373], ["torch.Module.__init__", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Dropout", "torch.Dropout", "torch.Dropout"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["", "x", "=", "(", "x", "+", "residual", ")", "*", "self", ".", "residual_scale", "\n", "", "", "return", "x", "\n", "\n", "\n", "", "", "class", "Wav2VecPredictionsModel", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "in_dim", ",", "out_dim", ",", "prediction_steps", ",", "n_negatives", ",", "cross_sample_negatives", ",", "sample_distance", ",", "\n", "dropout", ",", "offset", ",", "balanced_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "n_negatives", "=", "n_negatives", "\n", "self", ".", "cross_sample_negatives", "=", "cross_sample_negatives", "\n", "self", ".", "sample_distance", "=", "sample_distance", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.wav2vec.Wav2VecPredictionsModel.sample_negatives": [[374, 402], ["y.contiguous().view.contiguous().view.transpose", "y.contiguous().view.contiguous().view.contiguous().view", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "torch.randint", "negs.view().permute.view().permute.view().permute", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "y.contiguous().view.contiguous().view.contiguous", "min", "negs.view().permute.view().permute.view", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.randint.view", "torch.randint.view", "torch.randint.view"], "methods", ["None"], ["self", ".", "project_to_steps", "=", "nn", ".", "ConvTranspose2d", "(", "in_dim", ",", "out_dim", ",", "(", "1", ",", "prediction_steps", ")", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "self", ".", "offset", "=", "offset", "\n", "self", ".", "balanced_classes", "=", "balanced_classes", "\n", "\n", "", "def", "sample_negatives", "(", "self", ",", "y", ")", ":", "\n", "        ", "bsz", ",", "fsz", ",", "tsz", "=", "y", ".", "shape", "\n", "\n", "y", "=", "y", ".", "transpose", "(", "0", ",", "1", ")", "# BCT -> CBT", "\n", "y", "=", "y", ".", "contiguous", "(", ")", ".", "view", "(", "fsz", ",", "-", "1", ")", "# CBT => C(BxT)", "\n", "\n", "if", "self", ".", "cross_sample_negatives", ":", "\n", "            ", "high", "=", "tsz", "*", "bsz", "\n", "assert", "self", ".", "sample_distance", "is", "None", ",", "'sample distance is not supported with cross sampling'", "\n", "", "else", ":", "\n", "            ", "high", "=", "tsz", "if", "self", ".", "sample_distance", "is", "None", "else", "min", "(", "tsz", ",", "self", ".", "sample_distance", ")", "\n", "\n", "", "neg_idxs", "=", "torch", ".", "randint", "(", "low", "=", "0", ",", "high", "=", "high", ",", "size", "=", "(", "bsz", ",", "self", ".", "n_negatives", "*", "tsz", ")", ")", "\n", "\n", "if", "self", ".", "sample_distance", "is", "not", "None", "and", "self", ".", "sample_distance", "<", "tsz", ":", "\n", "            ", "neg_idxs", "+=", "torch", ".", "cat", "(", "\n", "[", "torch", ".", "arange", "(", "start", "=", "1", ",", "end", "=", "tsz", "-", "self", ".", "sample_distance", ",", "device", "=", "neg_idxs", ".", "device", ",", "dtype", "=", "neg_idxs", ".", "dtype", ")", ",", "\n", "torch", ".", "arange", "(", "start", "=", "tsz", "-", "self", ".", "sample_distance", ",", "end", "=", "tsz", "-", "self", ".", "sample_distance", "*", "2", "-", "1", ",", "step", "=", "-", "1", ",", "\n", "device", "=", "neg_idxs", ".", "device", ",", "dtype", "=", "neg_idxs", ".", "dtype", ")", "]", ")", "\n", "\n", "", "if", "not", "self", ".", "cross_sample_negatives", ":", "\n", "            ", "for", "i", "in", "range", "(", "1", ",", "bsz", ")", ":", "\n", "                ", "neg_idxs", "[", "i", "]", "+=", "i", "*", "high", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.wav2vec.Wav2VecPredictionsModel.forward": [[403, 435], ["wav2vec.Wav2VecPredictionsModel.sample_negatives", "y.unsqueeze.unsqueeze.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x.unsqueeze().expand.unsqueeze().expand.unsqueeze", "wav2vec.Wav2VecPredictionsModel.project_to_steps", "wav2vec.Wav2VecPredictionsModel.dropout", "x.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "min", "x.unsqueeze().expand.unsqueeze().expand.new", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "torch.full_like", "x.unsqueeze().expand.new.numel", "x.unsqueeze().expand.new.numel", "x.unsqueeze().expand.unsqueeze().expand.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.wav2vec.Wav2VecPredictionsModel.sample_negatives", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "", "negs", "=", "y", "[", "...", ",", "neg_idxs", ".", "view", "(", "-", "1", ")", "]", "\n", "negs", "=", "negs", ".", "view", "(", "fsz", ",", "bsz", ",", "self", ".", "n_negatives", ",", "tsz", ")", ".", "permute", "(", "2", ",", "1", ",", "0", ",", "3", ")", "# to NxBxCxT", "\n", "\n", "return", "negs", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "negatives", "=", "self", ".", "sample_negatives", "(", "y", ")", "\n", "y", "=", "y", ".", "unsqueeze", "(", "0", ")", "\n", "targets", "=", "torch", ".", "cat", "(", "[", "y", ",", "negatives", "]", ",", "dim", "=", "0", ")", "\n", "\n", "x", "=", "x", ".", "unsqueeze", "(", "-", "1", ")", "\n", "x", "=", "self", ".", "project_to_steps", "(", "x", ")", "# BxCxTxS", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "=", "x", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "targets", ".", "size", "(", "0", ")", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "\n", "copies", ",", "bsz", ",", "dim", ",", "tsz", ",", "steps", "=", "x", ".", "shape", "\n", "steps", "=", "min", "(", "steps", ",", "tsz", "-", "self", ".", "offset", ")", "\n", "predictions", "=", "x", ".", "new", "(", "bsz", "*", "copies", "*", "(", "tsz", "-", "self", ".", "offset", "+", "1", ")", "*", "steps", "-", "(", "(", "steps", "+", "1", ")", "*", "steps", "//", "2", ")", "*", "copies", "*", "bsz", ")", "\n", "labels", "=", "torch", ".", "zeros_like", "(", "predictions", ")", "\n", "weights", "=", "torch", ".", "full_like", "(", "labels", ",", "1", "/", "self", ".", "n_negatives", ")", "if", "self", ".", "balanced_classes", "else", "None", "\n", "\n", "start", "=", "end", "=", "0", "\n", "for", "i", "in", "range", "(", "steps", ")", ":", "\n", "            ", "offset", "=", "i", "+", "self", ".", "offset", "\n", "end", "=", "start", "+", "(", "tsz", "-", "offset", ")", "*", "bsz", "*", "copies", "\n", "pos_num", "=", "(", "end", "-", "start", ")", "//", "copies", "\n", "predictions", "[", "start", ":", "end", "]", "=", "(", "x", "[", "...", ",", ":", "-", "offset", ",", "i", "]", "*", "targets", "[", "...", ",", "offset", ":", "]", ")", ".", "sum", "(", "dim", "=", "2", ")", ".", "flatten", "(", ")", "\n", "labels", "[", "start", ":", "start", "+", "pos_num", "]", "=", "1.", "\n", "if", "weights", "is", "not", "None", ":", "\n", "                ", "weights", "[", "start", ":", "start", "+", "pos_num", "]", "=", "1.", "\n", "", "start", "=", "end", "\n", "", "assert", "end", "==", "predictions", ".", "numel", "(", ")", ",", "'{} != {}'", ".", "format", "(", "end", ",", "predictions", ".", "numel", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.wav2vec.norm_block": [[244, 255], ["torch.Sequential", "wav2vec.Fp32GroupNorm", "wav2vec.TransposeLast", "wav2vec.Fp32LayerNorm", "wav2vec.TransposeLast"], "function", ["None"], ["return", "output", ".", "type_as", "(", "input", ")", "\n", "\n", "\n", "", "", "def", "norm_block", "(", "is_layer_norm", ",", "dim", ",", "affine", "=", "True", ")", ":", "\n", "    ", "if", "is_layer_norm", ":", "\n", "        ", "mod", "=", "nn", ".", "Sequential", "(", "\n", "TransposeLast", "(", ")", ",", "\n", "Fp32LayerNorm", "(", "dim", ",", "elementwise_affine", "=", "affine", ")", ",", "\n", "TransposeLast", "(", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "mod", "=", "Fp32GroupNorm", "(", "1", ",", "dim", ",", "affine", "=", "affine", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.wav2vec.base_wav2vec_architecture": [[437, 474], ["register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture"], ["            ", "labels", "=", "(", "labels", ",", "weights", ")", "\n", "\n", "", "return", "predictions", ",", "labels", "\n", "\n", "\n", "", "", "@", "register_model_architecture", "(", "'wav2vec'", ",", "'wav2vec'", ")", "\n", "def", "base_wav2vec_architecture", "(", "args", ")", ":", "\n", "    ", "conv_feature_layers", "=", "'[(512, 10, 5)]'", "\n", "conv_feature_layers", "+=", "' + [(512, 8, 4)]'", "\n", "conv_feature_layers", "+=", "' + [(512, 4, 2)] * 3'", "\n", "args", ".", "conv_feature_layers", "=", "getattr", "(", "args", ",", "'conv_feature_layers'", ",", "conv_feature_layers", ")", "\n", "\n", "args", ".", "conv_aggregator_layers", "=", "getattr", "(", "args", ",", "'conv_aggregator_layers'", ",", "'[(512, 3, 1)] * 9'", ")", "\n", "\n", "args", ".", "prediction_steps", "=", "getattr", "(", "args", ",", "'prediction_steps'", ",", "12", ")", "\n", "args", ".", "num_negatives", "=", "getattr", "(", "args", ",", "'num_negatives'", ",", "1", ")", "\n", "args", ".", "sample_distance", "=", "getattr", "(", "args", ",", "'sample_distance'", ",", "None", ")", "\n", "args", ".", "cross_sample_negatives", "=", "getattr", "(", "args", ",", "'cross_sample_negatives'", ",", "False", ")", "\n", "\n", "args", ".", "dropout", "=", "getattr", "(", "args", ",", "'dropout'", ",", "0.", ")", "\n", "args", ".", "dropout_features", "=", "getattr", "(", "args", ",", "'dropout_features'", ",", "0.", ")", "\n", "args", ".", "dropout_agg", "=", "getattr", "(", "args", ",", "'dropout_agg'", ",", "0.", ")", "\n", "args", ".", "encoder", "=", "getattr", "(", "args", ",", "'encoder'", ",", "'cnn'", ")", "\n", "args", ".", "aggregator", "=", "getattr", "(", "args", ",", "'aggregator'", ",", "'cnn'", ")", "\n", "\n", "args", ".", "skip_connections_feat", "=", "getattr", "(", "args", ",", "'skip_connections_feat'", ",", "False", ")", "\n", "args", ".", "skip_connections_agg", "=", "getattr", "(", "args", ",", "'skip_connections_agg'", ",", "False", ")", "\n", "args", ".", "residual_scale", "=", "getattr", "(", "args", ",", "'residual_scale'", ",", "0.5", ")", "\n", "\n", "args", ".", "gru_dim", "=", "getattr", "(", "args", ",", "'gru_dim'", ",", "512", ")", "\n", "\n", "args", ".", "no_conv_bias", "=", "getattr", "(", "args", ",", "'no_conv_bias'", ",", "False", ")", "\n", "args", ".", "agg_zero_pad", "=", "getattr", "(", "args", ",", "'agg_zero_pad'", ",", "False", ")", "\n", "\n", "args", ".", "log_compression", "=", "getattr", "(", "args", ",", "'log_compression'", ",", "False", ")", "\n", "\n", "args", ".", "balanced_classes", "=", "getattr", "(", "args", ",", "'balanced_classes'", ",", "False", ")", "\n", "args", ".", "project_features", "=", "getattr", "(", "args", ",", "'project_features'", ",", "'none'", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer_lm.TransformerLanguageModel.hub_models": [[27, 43], ["transformer_lm.TransformerLanguageModel.hub_models.moses_fastbpe"], "methods", ["None"], ["    ", "@", "classmethod", "\n", "def", "hub_models", "(", "cls", ")", ":", "\n", "\n", "        ", "def", "moses_fastbpe", "(", "path", ")", ":", "\n", "            ", "return", "{", "\n", "'path'", ":", "path", ",", "\n", "'tokenizer'", ":", "'moses'", ",", "\n", "'bpe'", ":", "'fastbpe'", ",", "\n", "}", "\n", "\n", "", "return", "{", "\n", "'transformer_lm.gbw.adaptive_huge'", ":", "'https://dl.fbaipublicfiles.com/fairseq/models/lm/adaptive_lm_gbw_huge.tar.bz2'", ",", "\n", "'transformer_lm.wiki103.adaptive'", ":", "'https://dl.fbaipublicfiles.com/fairseq/models/lm/adaptive_lm_wiki103.tar.bz2'", ",", "\n", "'transformer_lm.wmt19.en'", ":", "moses_fastbpe", "(", "'https://dl.fbaipublicfiles.com/fairseq/models/lm/wmt19.en.tar.bz2'", ")", ",", "\n", "'transformer_lm.wmt19.de'", ":", "moses_fastbpe", "(", "'https://dl.fbaipublicfiles.com/fairseq/models/lm/wmt19.de.tar.bz2'", ")", ",", "\n", "'transformer_lm.wmt19.ru'", ":", "moses_fastbpe", "(", "'https://dl.fbaipublicfiles.com/fairseq/models/lm/wmt19.ru.tar.bz2'", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer_lm.TransformerLanguageModel.__init__": [[45, 47], ["fairseq.models.FairseqLanguageModel.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["", "def", "__init__", "(", "self", ",", "decoder", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "decoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer_lm.TransformerLanguageModel.add_args": [[48, 118], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "fairseq.utils.get_available_activation_fns"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.get_available_activation_fns"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add model-specific arguments to the parser.\"\"\"", "\n", "# fmt: off", "\n", "parser", ".", "add_argument", "(", "'--activation-fn'", ",", "\n", "choices", "=", "utils", ".", "get_available_activation_fns", "(", ")", ",", "\n", "help", "=", "'activation function to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'dropout probability'", ")", "\n", "parser", ".", "add_argument", "(", "'--attention-dropout'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'dropout probability for attention weights'", ")", "\n", "parser", ".", "add_argument", "(", "'--activation-dropout'", ",", "'--relu-dropout'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'dropout probability after activation in FFN.'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-embed-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'decoder embedding dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-output-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'decoder output dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-input-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'decoder input dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-ffn-embed-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'decoder embedding dimension for FFN'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-layers'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'num decoder layers'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-attention-heads'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'num decoder attention heads'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-normalize-before'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'apply layernorm before each decoder block'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-decoder-final-norm'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'don\\'t add an extra layernorm after the last decoder block'", ")", "\n", "parser", ".", "add_argument", "(", "'--adaptive-softmax-cutoff'", ",", "metavar", "=", "'EXPR'", ",", "\n", "help", "=", "'comma separated list of adaptive softmax cutoff points. '", "\n", "'Must be used with adaptive_loss criterion'", ")", "\n", "parser", ".", "add_argument", "(", "'--adaptive-softmax-dropout'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'sets adaptive softmax dropout for the tail projections'", ")", "\n", "parser", ".", "add_argument", "(", "'--adaptive-softmax-factor'", ",", "type", "=", "float", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'adaptive input factor'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-token-positional-embeddings'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'if set, disables positional embeddings (outside self attention)'", ")", "\n", "parser", ".", "add_argument", "(", "'--share-decoder-input-output-embed'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'share decoder input and output embeddings'", ")", "\n", "parser", ".", "add_argument", "(", "'--character-embeddings'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'if set, uses character embedding convolutions to produce token embeddings'", ")", "\n", "parser", ".", "add_argument", "(", "'--character-filters'", ",", "type", "=", "str", ",", "metavar", "=", "'LIST'", ",", "\n", "default", "=", "'[(1, 64), (2, 128), (3, 192), (4, 256), (5, 256), (6, 256), (7, 256)]'", ",", "\n", "help", "=", "'size of character embeddings'", ")", "\n", "parser", ".", "add_argument", "(", "'--character-embedding-dim'", ",", "default", "=", "4", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'size of character embeddings'", ")", "\n", "parser", ".", "add_argument", "(", "'--char-embedder-highway-layers'", ",", "default", "=", "2", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'number of highway layers for character token embeddder'", ")", "\n", "parser", ".", "add_argument", "(", "'--adaptive-input'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'if set, uses adaptive input'", ")", "\n", "parser", ".", "add_argument", "(", "'--adaptive-input-factor'", ",", "type", "=", "float", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'adaptive input factor'", ")", "\n", "parser", ".", "add_argument", "(", "'--adaptive-input-cutoff'", ",", "metavar", "=", "'EXPR'", ",", "\n", "help", "=", "'comma separated list of adaptive input cutoff points.'", ")", "\n", "parser", ".", "add_argument", "(", "'--tie-adaptive-weights'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'if set, ties the weights of adaptive softmax and adaptive input'", ")", "\n", "parser", ".", "add_argument", "(", "'--tie-adaptive-proj'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'if set, ties the projection weights of adaptive softmax and adaptive input'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-learned-pos'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use learned positional embeddings in the decoder'", ")", "\n", "# args for \"Reducing Transformer Depth on Demand with Structured Dropout\" (Fan et al., 2019)", "\n", "parser", ".", "add_argument", "(", "'--decoder-layerdrop'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "default", "=", "0", ",", "\n", "help", "=", "'LayerDrop probability for decoder'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-layers-to-keep'", ",", "default", "=", "None", ",", "\n", "help", "=", "'which layers to *keep* when pruning as a comma-separated list'", ")", "\n", "parser", ".", "add_argument", "(", "'--layernorm-embedding'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'add layernorm to embedding'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-scale-embedding'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'if True, dont scale embeddings'", ")", "\n", "# fmt: on", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer_lm.TransformerLanguageModel.build_model": [[120, 159], ["transformer_lm.base_lm_architecture", "fairseq.models.transformer.TransformerDecoder", "transformer_lm.TransformerLanguageModel", "len", "getattr", "getattr", "fairseq.modules.CharacterTokenEmbedder", "args.decoder_layers_to_keep.split", "eval", "fairseq.modules.AdaptiveInput", "fairseq.models.transformer.Embedding", "len", "task.source_dictionary.pad", "fairseq.options.eval_str_list", "len", "task.source_dictionary.pad"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lightconv_lm.base_lm_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.Embedding", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.eval_str_list", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad"], ["", "@", "classmethod", "\n", "def", "build_model", "(", "cls", ",", "args", ",", "task", ")", ":", "\n", "        ", "\"\"\"Build a new model instance.\"\"\"", "\n", "\n", "# make sure all arguments are present in older models", "\n", "base_lm_architecture", "(", "args", ")", "\n", "\n", "if", "args", ".", "decoder_layers_to_keep", ":", "\n", "            ", "args", ".", "decoder_layers", "=", "len", "(", "args", ".", "decoder_layers_to_keep", ".", "split", "(", "\",\"", ")", ")", "\n", "\n", "", "if", "getattr", "(", "args", ",", "'max_target_positions'", ",", "None", ")", "is", "None", ":", "\n", "            ", "args", ".", "max_target_positions", "=", "getattr", "(", "args", ",", "'tokens_per_sample'", ",", "DEFAULT_MAX_TARGET_POSITIONS", ")", "\n", "\n", "", "if", "args", ".", "character_embeddings", ":", "\n", "            ", "embed_tokens", "=", "CharacterTokenEmbedder", "(", "\n", "task", ".", "source_dictionary", ",", "eval", "(", "args", ".", "character_filters", ")", ",", "\n", "args", ".", "character_embedding_dim", ",", "args", ".", "decoder_embed_dim", ",", "\n", "args", ".", "char_embedder_highway_layers", ",", "\n", ")", "\n", "", "elif", "args", ".", "adaptive_input", ":", "\n", "            ", "embed_tokens", "=", "AdaptiveInput", "(", "\n", "len", "(", "task", ".", "source_dictionary", ")", ",", "task", ".", "source_dictionary", ".", "pad", "(", ")", ",", "args", ".", "decoder_input_dim", ",", "\n", "args", ".", "adaptive_input_factor", ",", "args", ".", "decoder_embed_dim", ",", "\n", "options", ".", "eval_str_list", "(", "args", ".", "adaptive_input_cutoff", ",", "type", "=", "int", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "embed_tokens", "=", "Embedding", "(", "len", "(", "task", ".", "source_dictionary", ")", ",", "args", ".", "decoder_input_dim", ",", "task", ".", "source_dictionary", ".", "pad", "(", ")", ")", "\n", "\n", "", "if", "args", ".", "tie_adaptive_weights", ":", "\n", "            ", "assert", "args", ".", "adaptive_input", "\n", "assert", "args", ".", "adaptive_input_factor", "==", "args", ".", "adaptive_softmax_factor", "\n", "assert", "args", ".", "adaptive_softmax_cutoff", "==", "args", ".", "adaptive_input_cutoff", ",", "'{} != {}'", ".", "format", "(", "\n", "args", ".", "adaptive_softmax_cutoff", ",", "args", ".", "adaptive_input_cutoff", ")", "\n", "assert", "args", ".", "decoder_input_dim", "==", "args", ".", "decoder_output_dim", "\n", "\n", "", "decoder", "=", "TransformerDecoder", "(", "\n", "args", ",", "task", ".", "target_dictionary", ",", "embed_tokens", ",", "no_encoder_attn", "=", "True", ",", "\n", ")", "\n", "return", "TransformerLanguageModel", "(", "decoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer_lm.base_lm_architecture": [[161, 207], ["fairseq.models.register_model_architecture", "hasattr", "hasattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture"], ["", "", "@", "register_model_architecture", "(", "'transformer_lm'", ",", "'transformer_lm'", ")", "\n", "def", "base_lm_architecture", "(", "args", ")", ":", "\n", "# backward compatibility for older model checkpoints", "\n", "    ", "if", "hasattr", "(", "args", ",", "'no_tie_adaptive_proj'", ")", ":", "\n", "# previous models defined --no-tie-adaptive-proj, so use the existence of", "\n", "# that option to determine if this is an \"old\" model checkpoint", "\n", "        ", "args", ".", "no_decoder_final_norm", "=", "True", "# old models always set this to True", "\n", "if", "args", ".", "no_tie_adaptive_proj", "is", "False", ":", "\n", "            ", "args", ".", "tie_adaptive_proj", "=", "True", "\n", "", "", "if", "hasattr", "(", "args", ",", "'decoder_final_norm'", ")", ":", "\n", "        ", "args", ".", "no_decoder_final_norm", "=", "not", "args", ".", "decoder_final_norm", "\n", "\n", "", "args", ".", "dropout", "=", "getattr", "(", "args", ",", "'dropout'", ",", "0.1", ")", "\n", "args", ".", "attention_dropout", "=", "getattr", "(", "args", ",", "'attention_dropout'", ",", "0.0", ")", "\n", "\n", "args", ".", "decoder_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_embed_dim'", ",", "512", ")", "\n", "args", ".", "decoder_ffn_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_ffn_embed_dim'", ",", "2048", ")", "\n", "args", ".", "decoder_layers", "=", "getattr", "(", "args", ",", "'decoder_layers'", ",", "6", ")", "\n", "args", ".", "decoder_attention_heads", "=", "getattr", "(", "args", ",", "'decoder_attention_heads'", ",", "8", ")", "\n", "args", ".", "adaptive_softmax_cutoff", "=", "getattr", "(", "args", ",", "'adaptive_softmax_cutoff'", ",", "None", ")", "\n", "args", ".", "adaptive_softmax_dropout", "=", "getattr", "(", "args", ",", "'adaptive_softmax_dropout'", ",", "0", ")", "\n", "args", ".", "adaptive_softmax_factor", "=", "getattr", "(", "args", ",", "'adaptive_softmax_factor'", ",", "4", ")", "\n", "args", ".", "decoder_learned_pos", "=", "getattr", "(", "args", ",", "'decoder_learned_pos'", ",", "False", ")", "\n", "args", ".", "activation_fn", "=", "getattr", "(", "args", ",", "'activation_fn'", ",", "'relu'", ")", "\n", "\n", "args", ".", "add_bos_token", "=", "getattr", "(", "args", ",", "'add_bos_token'", ",", "False", ")", "\n", "args", ".", "no_token_positional_embeddings", "=", "getattr", "(", "args", ",", "'no_token_positional_embeddings'", ",", "False", ")", "\n", "args", ".", "share_decoder_input_output_embed", "=", "getattr", "(", "args", ",", "'share_decoder_input_output_embed'", ",", "False", ")", "\n", "args", ".", "character_embeddings", "=", "getattr", "(", "args", ",", "'character_embeddings'", ",", "False", ")", "\n", "\n", "args", ".", "decoder_output_dim", "=", "getattr", "(", "args", ",", "'decoder_output_dim'", ",", "args", ".", "decoder_embed_dim", ")", "\n", "args", ".", "decoder_input_dim", "=", "getattr", "(", "args", ",", "'decoder_input_dim'", ",", "args", ".", "decoder_embed_dim", ")", "\n", "\n", "# Model training is not stable without this", "\n", "args", ".", "decoder_normalize_before", "=", "True", "\n", "args", ".", "no_decoder_final_norm", "=", "getattr", "(", "args", ",", "'no_decoder_final_norm'", ",", "False", ")", "\n", "\n", "args", ".", "adaptive_input", "=", "getattr", "(", "args", ",", "'adaptive_input'", ",", "False", ")", "\n", "args", ".", "adaptive_input_factor", "=", "getattr", "(", "args", ",", "'adaptive_input_factor'", ",", "4", ")", "\n", "args", ".", "adaptive_input_cutoff", "=", "getattr", "(", "args", ",", "'adaptive_input_cutoff'", ",", "None", ")", "\n", "\n", "args", ".", "tie_adaptive_weights", "=", "getattr", "(", "args", ",", "'tie_adaptive_weights'", ",", "False", ")", "\n", "args", ".", "tie_adaptive_proj", "=", "getattr", "(", "args", ",", "'tie_adaptive_proj'", ",", "False", ")", "\n", "\n", "args", ".", "no_scale_embedding", "=", "getattr", "(", "args", ",", "'no_scale_embedding'", ",", "False", ")", "\n", "args", ".", "layernorm_embedding", "=", "getattr", "(", "args", ",", "'layernorm_embedding'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer_lm.transformer_lm_big": [[209, 216], ["fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "getattr", "transformer_lm.base_lm_architecture"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lightconv_lm.base_lm_architecture"], ["", "@", "register_model_architecture", "(", "'transformer_lm'", ",", "'transformer_lm_big'", ")", "\n", "def", "transformer_lm_big", "(", "args", ")", ":", "\n", "    ", "args", ".", "decoder_layers", "=", "getattr", "(", "args", ",", "'decoder_layers'", ",", "12", ")", "\n", "args", ".", "decoder_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_embed_dim'", ",", "1024", ")", "\n", "args", ".", "decoder_ffn_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_ffn_embed_dim'", ",", "4096", ")", "\n", "args", ".", "decoder_attention_heads", "=", "getattr", "(", "args", ",", "'decoder_attention_heads'", ",", "16", ")", "\n", "base_lm_architecture", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer_lm.transformer_lm_baevski_wiki103": [[218, 234], ["fairseq.models.register_model_architecture", "fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "transformer_lm.transformer_lm_big"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer_lm.transformer_lm_big"], ["", "@", "register_model_architecture", "(", "'transformer_lm'", ",", "'transformer_lm_wiki103'", ")", "\n", "@", "register_model_architecture", "(", "'transformer_lm'", ",", "'transformer_lm_baevski_wiki103'", ")", "\n", "def", "transformer_lm_baevski_wiki103", "(", "args", ")", ":", "\n", "    ", "args", ".", "decoder_layers", "=", "getattr", "(", "args", ",", "'decoder_layers'", ",", "16", ")", "\n", "args", ".", "decoder_attention_heads", "=", "getattr", "(", "args", ",", "'decoder_attention_heads'", ",", "8", ")", "\n", "args", ".", "dropout", "=", "getattr", "(", "args", ",", "'dropout'", ",", "0.3", ")", "\n", "args", ".", "adaptive_input", "=", "getattr", "(", "args", ",", "'adaptive_input'", ",", "True", ")", "\n", "args", ".", "tie_adaptive_weights", "=", "getattr", "(", "args", ",", "'tie_adaptive_weights'", ",", "True", ")", "\n", "args", ".", "adaptive_input_cutoff", "=", "getattr", "(", "args", ",", "'adaptive_input_cutoff'", ",", "'20000,60000'", ")", "\n", "args", ".", "adaptive_softmax_cutoff", "=", "getattr", "(", "args", ",", "'adaptive_softmax_cutoff'", ",", "'20000,60000'", ")", "\n", "args", ".", "adaptive_softmax_dropout", "=", "getattr", "(", "args", ",", "'adaptive_softmax_dropout'", ",", "0.2", ")", "\n", "args", ".", "attention_dropout", "=", "getattr", "(", "args", ",", "'attention_dropout'", ",", "0.1", ")", "\n", "args", ".", "activation_dropout", "=", "getattr", "(", "args", ",", "'activation_dropout'", ",", "0.1", ")", "\n", "args", ".", "no_decoder_final_norm", "=", "getattr", "(", "args", ",", "'no_decoder_final_norm'", ",", "True", ")", "\n", "args", ".", "tie_adaptive_proj", "=", "getattr", "(", "args", ",", "'tie_adaptive_proj'", ",", "True", ")", "\n", "transformer_lm_big", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer_lm.transformer_lm_baevski_gbw": [[236, 244], ["fairseq.models.register_model_architecture", "fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "getattr", "transformer_lm.transformer_lm_big"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer_lm.transformer_lm_big"], ["", "@", "register_model_architecture", "(", "'transformer_lm'", ",", "'transformer_lm_gbw'", ")", "\n", "@", "register_model_architecture", "(", "'transformer_lm'", ",", "'transformer_lm_baevski_gbw'", ")", "\n", "def", "transformer_lm_baevski_gbw", "(", "args", ")", ":", "\n", "    ", "args", ".", "decoder_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_embed_dim'", ",", "512", ")", "\n", "args", ".", "dropout", "=", "getattr", "(", "args", ",", "'dropout'", ",", "0.1", ")", "\n", "args", ".", "attention_dropout", "=", "getattr", "(", "args", ",", "'attention_dropout'", ",", "0.1", ")", "\n", "args", ".", "no_decoder_final_norm", "=", "getattr", "(", "args", ",", "'no_decoder_final_norm'", ",", "True", ")", "\n", "transformer_lm_big", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer_lm.transformer_lm_gpt": [[246, 256], ["fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "transformer_lm.base_lm_architecture"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lightconv_lm.base_lm_architecture"], ["", "@", "register_model_architecture", "(", "'transformer_lm'", ",", "'transformer_lm_gpt'", ")", "\n", "def", "transformer_lm_gpt", "(", "args", ")", ":", "\n", "    ", "args", ".", "decoder_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_embed_dim'", ",", "768", ")", "\n", "args", ".", "decoder_ffn_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_ffn_embed_dim'", ",", "3072", ")", "\n", "args", ".", "decoder_layers", "=", "getattr", "(", "args", ",", "'decoder_layers'", ",", "12", ")", "\n", "args", ".", "decoder_attention_heads", "=", "getattr", "(", "args", ",", "'decoder_attention_heads'", ",", "12", ")", "\n", "args", ".", "dropout", "=", "getattr", "(", "args", ",", "'dropout'", ",", "0.1", ")", "\n", "args", ".", "attention_dropout", "=", "getattr", "(", "args", ",", "'attention_dropout'", ",", "0.1", ")", "\n", "args", ".", "activation_fn", "=", "getattr", "(", "args", ",", "'activation_fn'", ",", "'gelu'", ")", "\n", "base_lm_architecture", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer_lm.transformer_lm_gpt2_small": [[258, 268], ["fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "transformer_lm.base_lm_architecture"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lightconv_lm.base_lm_architecture"], ["", "@", "register_model_architecture", "(", "'transformer_lm'", ",", "'transformer_lm_gpt2_small'", ")", "\n", "def", "transformer_lm_gpt2_small", "(", "args", ")", ":", "\n", "    ", "args", ".", "decoder_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_embed_dim'", ",", "1024", ")", "\n", "args", ".", "decoder_ffn_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_ffn_embed_dim'", ",", "4096", ")", "\n", "args", ".", "decoder_layers", "=", "getattr", "(", "args", ",", "'decoder_layers'", ",", "24", ")", "\n", "args", ".", "decoder_attention_heads", "=", "getattr", "(", "args", ",", "'decoder_attention_heads'", ",", "16", ")", "\n", "args", ".", "dropout", "=", "getattr", "(", "args", ",", "'dropout'", ",", "0.1", ")", "\n", "args", ".", "attention_dropout", "=", "getattr", "(", "args", ",", "'attention_dropout'", ",", "0.1", ")", "\n", "args", ".", "activation_fn", "=", "getattr", "(", "args", ",", "'activation_fn'", ",", "'gelu'", ")", "\n", "base_lm_architecture", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer_lm.transformer_lm_gpt2_medium": [[270, 280], ["fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "transformer_lm.base_lm_architecture"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lightconv_lm.base_lm_architecture"], ["", "@", "register_model_architecture", "(", "'transformer_lm'", ",", "'transformer_lm_gpt2_medium'", ")", "\n", "def", "transformer_lm_gpt2_medium", "(", "args", ")", ":", "\n", "    ", "args", ".", "decoder_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_embed_dim'", ",", "1280", ")", "\n", "args", ".", "decoder_ffn_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_ffn_embed_dim'", ",", "5120", ")", "\n", "args", ".", "decoder_layers", "=", "getattr", "(", "args", ",", "'decoder_layers'", ",", "36", ")", "\n", "args", ".", "decoder_attention_heads", "=", "getattr", "(", "args", ",", "'decoder_attention_heads'", ",", "20", ")", "\n", "args", ".", "dropout", "=", "getattr", "(", "args", ",", "'dropout'", ",", "0.1", ")", "\n", "args", ".", "attention_dropout", "=", "getattr", "(", "args", ",", "'attention_dropout'", ",", "0.1", ")", "\n", "args", ".", "activation_fn", "=", "getattr", "(", "args", ",", "'activation_fn'", ",", "'gelu'", ")", "\n", "base_lm_architecture", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer_lm.transformer_lm_gpt2_big": [[282, 292], ["fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "transformer_lm.base_lm_architecture"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lightconv_lm.base_lm_architecture"], ["", "@", "register_model_architecture", "(", "'transformer_lm'", ",", "'transformer_lm_gpt2_big'", ")", "\n", "def", "transformer_lm_gpt2_big", "(", "args", ")", ":", "\n", "    ", "args", ".", "decoder_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_embed_dim'", ",", "1600", ")", "\n", "args", ".", "decoder_ffn_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_ffn_embed_dim'", ",", "6400", ")", "\n", "args", ".", "decoder_layers", "=", "getattr", "(", "args", ",", "'decoder_layers'", ",", "48", ")", "\n", "args", ".", "decoder_attention_heads", "=", "getattr", "(", "args", ",", "'decoder_attention_heads'", ",", "25", ")", "\n", "args", ".", "dropout", "=", "getattr", "(", "args", ",", "'dropout'", ",", "0.1", ")", "\n", "args", ".", "attention_dropout", "=", "getattr", "(", "args", ",", "'attention_dropout'", ",", "0.1", ")", "\n", "args", ".", "activation_fn", "=", "getattr", "(", "args", ",", "'activation_fn'", ",", "'gelu'", ")", "\n", "base_lm_architecture", "(", "args", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.build_model": [[47, 49], ["ARCH_MODEL_REGISTRY[].build_model"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.build_model"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model": [[51, 80], ["ValueError", "issubclass", "ValueError"], "function", ["None"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture": [[82, 120], ["ARCH_MODEL_INV_REGISTRY.setdefault().append", "ValueError", "ValueError", "callable", "ValueError", "ARCH_MODEL_INV_REGISTRY.setdefault"], "function", ["None"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.composite_encoder.CompositeEncoder.__init__": [[20, 25], ["fairseq.models.FairseqEncoder.__init__", "composite_encoder.CompositeEncoder.add_module", "next", "iter", "encoders.values"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["def", "__init__", "(", "self", ",", "encoders", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "next", "(", "iter", "(", "encoders", ".", "values", "(", ")", ")", ")", ".", "dictionary", ")", "\n", "self", ".", "encoders", "=", "encoders", "\n", "for", "key", "in", "self", ".", "encoders", ":", "\n", "            ", "self", ".", "add_module", "(", "key", ",", "self", ".", "encoders", "[", "key", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.composite_encoder.CompositeEncoder.forward": [[26, 42], ["None"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "src_tokens", ",", "src_lengths", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            src_tokens (LongTensor): tokens in the source language of shape\n                `(batch, src_len)`\n            src_lengths (LongTensor): lengths of each source sentence of shape\n                `(batch)`\n\n        Returns:\n            dict:\n                the outputs from each Encoder\n        \"\"\"", "\n", "encoder_out", "=", "{", "}", "\n", "for", "key", "in", "self", ".", "encoders", ":", "\n", "            ", "encoder_out", "[", "key", "]", "=", "self", ".", "encoders", "[", "key", "]", "(", "src_tokens", ",", "src_lengths", ")", "\n", "", "return", "encoder_out", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.composite_encoder.CompositeEncoder.reorder_encoder_out": [[43, 48], ["composite_encoder.CompositeEncoder.encoders[].reorder_encoder_out"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles._EnsembleModelEncoder.reorder_encoder_out"], ["", "def", "reorder_encoder_out", "(", "self", ",", "encoder_out", ",", "new_order", ")", ":", "\n", "        ", "\"\"\"Reorder encoder output according to new_order.\"\"\"", "\n", "for", "key", "in", "self", ".", "encoders", ":", "\n", "            ", "encoder_out", "[", "key", "]", "=", "self", ".", "encoders", "[", "key", "]", ".", "reorder_encoder_out", "(", "encoder_out", "[", "key", "]", ",", "new_order", ")", "\n", "", "return", "encoder_out", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.composite_encoder.CompositeEncoder.max_positions": [[49, 51], ["min", "composite_encoder.CompositeEncoder.encoders[].max_positions"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.max_positions"], ["", "def", "max_positions", "(", "self", ")", ":", "\n", "        ", "return", "min", "(", "self", ".", "encoders", "[", "key", "]", ".", "max_positions", "(", ")", "for", "key", "in", "self", ".", "encoders", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.composite_encoder.CompositeEncoder.upgrade_state_dict": [[52, 56], ["composite_encoder.CompositeEncoder.encoders[].upgrade_state_dict"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_decoder.FairseqDecoder.upgrade_state_dict"], ["", "def", "upgrade_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "for", "key", "in", "self", ".", "encoders", ":", "\n", "            ", "self", ".", "encoders", "[", "key", "]", ".", "upgrade_state_dict", "(", "state_dict", ")", "\n", "", "return", "state_dict", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_decoder.FairseqDecoder.__init__": [[14, 18], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["    ", "\"\"\"Base class for decoders.\"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "dictionary", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dictionary", "=", "dictionary", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_decoder.FairseqDecoder.forward": [[19, 35], ["fairseq_decoder.FairseqDecoder.extract_features", "fairseq_decoder.FairseqDecoder.output_layer"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_transformer.LevenshteinTransformerDecoder.extract_features", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.TransformerDecoder.output_layer"], ["self", ".", "onnx_trace", "=", "False", "\n", "\n", "", "def", "forward", "(", "self", ",", "prev_output_tokens", ",", "encoder_out", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            prev_output_tokens (LongTensor): shifted output tokens of shape\n                `(batch, tgt_len)`, for teacher forcing\n            encoder_out (dict, optional): output from the encoder, used for\n                encoder-side attention\n\n        Returns:\n            tuple:\n                - the decoder's output of shape `(batch, tgt_len, vocab)`\n                - a dictionary with any model-specific outputs\n        \"\"\"", "\n", "x", ",", "extra", "=", "self", ".", "extract_features", "(", "\n", "prev_output_tokens", ",", "encoder_out", "=", "encoder_out", ",", "**", "kwargs", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_decoder.FairseqDecoder.extract_features": [[36, 44], ["None"], "methods", ["None"], [")", "\n", "x", "=", "self", ".", "output_layer", "(", "x", ")", "\n", "return", "x", ",", "extra", "\n", "\n", "", "def", "extract_features", "(", "self", ",", "prev_output_tokens", ",", "encoder_out", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_decoder.FairseqDecoder.output_layer": [[45, 53], ["None"], "methods", ["None"], ["\n", "raise", "NotImplementedError", "\n", "\n", "", "def", "output_layer", "(", "self", ",", "features", ",", "**", "kwargs", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_decoder.FairseqDecoder.get_normalized_probs": [[54, 71], ["hasattr", "fairseq_decoder.FairseqDecoder.adaptive_softmax.get_log_prob", "fairseq.utils.log_softmax", "fairseq.utils.softmax", "fairseq_decoder.FairseqDecoder.exp_"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.adaptive_softmax.AdaptiveSoftmax.get_log_prob", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax"], ["\n", "raise", "NotImplementedError", "\n", "\n", "", "def", "get_normalized_probs", "(", "\n", "self", ",", "\n", "net_output", ":", "Tuple", "[", "Tensor", ",", "Dict", "[", "str", ",", "List", "[", "Optional", "[", "Tensor", "]", "]", "]", "]", ",", "\n", "log_probs", ":", "bool", ",", "\n", "sample", ":", "Optional", "[", "Dict", "[", "str", ",", "Tensor", "]", "]", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Get normalized probabilities (or log probs) from a net's output.\"\"\"", "\n", "\n", "if", "hasattr", "(", "self", ",", "\"adaptive_softmax\"", ")", "and", "self", ".", "adaptive_softmax", "is", "not", "None", ":", "\n", "            ", "if", "sample", "is", "not", "None", ":", "\n", "                ", "assert", "\"target\"", "in", "sample", "\n", "target", "=", "sample", "[", "\"target\"", "]", "\n", "", "else", ":", "\n", "                ", "target", "=", "None", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_decoder.FairseqDecoder.max_positions": [[72, 75], ["None"], "methods", ["None"], ["", "out", "=", "self", ".", "adaptive_softmax", ".", "get_log_prob", "(", "net_output", "[", "0", "]", ",", "target", "=", "target", ")", "\n", "return", "out", ".", "exp_", "(", ")", "if", "not", "log_probs", "else", "out", "\n", "\n", "", "logits", "=", "net_output", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_decoder.FairseqDecoder.upgrade_state_dict": [[76, 79], ["None"], "methods", ["None"], ["if", "log_probs", ":", "\n", "            ", "return", "utils", ".", "log_softmax", "(", "logits", ",", "dim", "=", "-", "1", ",", "onnx_trace", "=", "self", ".", "onnx_trace", ")", "\n", "", "else", ":", "\n", "            ", "return", "utils", ".", "softmax", "(", "logits", ",", "dim", "=", "-", "1", ",", "onnx_trace", "=", "self", ".", "onnx_trace", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_decoder.FairseqDecoder.prepare_for_onnx_export_": [[80, 82], ["None"], "methods", ["None"], ["\n", "", "", "def", "max_positions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Maximum input length supported by the decoder.\"\"\"", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.TransformerModel.hub_models": [[53, 83], ["transformer.TransformerModel.hub_models.moses_subword"], "methods", ["None"], ["\n", "@", "classmethod", "\n", "def", "hub_models", "(", "cls", ")", ":", "\n", "# fmt: off", "\n", "\n", "        ", "def", "moses_subword", "(", "path", ")", ":", "\n", "            ", "return", "{", "\n", "'path'", ":", "path", ",", "\n", "'tokenizer'", ":", "'moses'", ",", "\n", "'bpe'", ":", "'subword_nmt'", ",", "\n", "}", "\n", "\n", "", "def", "moses_fastbpe", "(", "path", ")", ":", "\n", "            ", "return", "{", "\n", "'path'", ":", "path", ",", "\n", "'tokenizer'", ":", "'moses'", ",", "\n", "'bpe'", ":", "'fastbpe'", ",", "\n", "}", "\n", "\n", "", "return", "{", "\n", "'transformer.wmt14.en-fr'", ":", "moses_subword", "(", "'https://dl.fbaipublicfiles.com/fairseq/models/wmt14.en-fr.joined-dict.transformer.tar.bz2'", ")", ",", "\n", "'transformer.wmt16.en-de'", ":", "'https://dl.fbaipublicfiles.com/fairseq/models/wmt16.en-de.joined-dict.transformer.tar.bz2'", ",", "\n", "'transformer.wmt18.en-de'", ":", "moses_subword", "(", "'https://dl.fbaipublicfiles.com/fairseq/models/wmt18.en-de.ensemble.tar.gz'", ")", ",", "\n", "'transformer.wmt19.en-de'", ":", "moses_fastbpe", "(", "'https://dl.fbaipublicfiles.com/fairseq/models/wmt19.en-de.joined-dict.ensemble.tar.gz'", ")", ",", "\n", "'transformer.wmt19.en-ru'", ":", "moses_fastbpe", "(", "'https://dl.fbaipublicfiles.com/fairseq/models/wmt19.en-ru.ensemble.tar.gz'", ")", ",", "\n", "'transformer.wmt19.de-en'", ":", "moses_fastbpe", "(", "'https://dl.fbaipublicfiles.com/fairseq/models/wmt19.de-en.joined-dict.ensemble.tar.gz'", ")", ",", "\n", "'transformer.wmt19.ru-en'", ":", "moses_fastbpe", "(", "'https://dl.fbaipublicfiles.com/fairseq/models/wmt19.ru-en.ensemble.tar.gz'", ")", ",", "\n", "'transformer.wmt19.en-de.single_model'", ":", "moses_fastbpe", "(", "'https://dl.fbaipublicfiles.com/fairseq/models/wmt19.en-de.joined-dict.single_model.tar.gz'", ")", ",", "\n", "'transformer.wmt19.en-ru.single_model'", ":", "moses_fastbpe", "(", "'https://dl.fbaipublicfiles.com/fairseq/models/wmt19.en-ru.single_model.tar.gz'", ")", ",", "\n", "'transformer.wmt19.de-en.single_model'", ":", "moses_fastbpe", "(", "'https://dl.fbaipublicfiles.com/fairseq/models/wmt19.de-en.joined-dict.single_model.tar.gz'", ")", ",", "\n", "'transformer.wmt19.ru-en.single_model'", ":", "moses_fastbpe", "(", "'https://dl.fbaipublicfiles.com/fairseq/models/wmt19.ru-en.single_model.tar.gz'", ")", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.TransformerModel.__init__": [[86, 90], ["fairseq.models.FairseqEncoderDecoderModel.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["\n", "", "def", "__init__", "(", "self", ",", "args", ",", "encoder", ",", "decoder", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "encoder", ",", "decoder", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "supports_align_args", "=", "True", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.TransformerModel.add_args": [[91, 164], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "fairseq.utils.get_available_activation_fns"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.get_available_activation_fns"], ["\n", "", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add model-specific arguments to the parser.\"\"\"", "\n", "# fmt: off", "\n", "parser", ".", "add_argument", "(", "'--activation-fn'", ",", "\n", "choices", "=", "utils", ".", "get_available_activation_fns", "(", ")", ",", "\n", "help", "=", "'activation function to use'", ")", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'dropout probability'", ")", "\n", "parser", ".", "add_argument", "(", "'--attention-dropout'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'dropout probability for attention weights'", ")", "\n", "parser", ".", "add_argument", "(", "'--activation-dropout'", ",", "'--relu-dropout'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'dropout probability after activation in FFN.'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-embed-path'", ",", "type", "=", "str", ",", "metavar", "=", "'STR'", ",", "\n", "help", "=", "'path to pre-trained encoder embedding'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-embed-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'encoder embedding dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-ffn-embed-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'encoder embedding dimension for FFN'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-layers'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'num encoder layers'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-attention-heads'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'num encoder attention heads'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-normalize-before'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'apply layernorm before each encoder block'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-learned-pos'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use learned positional embeddings in the encoder'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-embed-path'", ",", "type", "=", "str", ",", "metavar", "=", "'STR'", ",", "\n", "help", "=", "'path to pre-trained decoder embedding'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-embed-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'decoder embedding dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-ffn-embed-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'decoder embedding dimension for FFN'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-layers'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'num decoder layers'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-attention-heads'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'num decoder attention heads'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-learned-pos'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use learned positional embeddings in the decoder'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-normalize-before'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'apply layernorm before each decoder block'", ")", "\n", "parser", ".", "add_argument", "(", "'--share-decoder-input-output-embed'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'share decoder input and output embeddings'", ")", "\n", "parser", ".", "add_argument", "(", "'--share-all-embeddings'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'share encoder, decoder and output embeddings'", "\n", "' (requires shared dictionary and embed dim)'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-token-positional-embeddings'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'if set, disables positional embeddings (outside self attention)'", ")", "\n", "parser", ".", "add_argument", "(", "'--adaptive-softmax-cutoff'", ",", "metavar", "=", "'EXPR'", ",", "\n", "help", "=", "'comma separated list of adaptive softmax cutoff points. '", "\n", "'Must be used with adaptive_loss criterion'", ")", ",", "\n", "parser", ".", "add_argument", "(", "'--adaptive-softmax-dropout'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'sets adaptive softmax dropout for the tail projections'", ")", "\n", "# args for \"Cross+Self-Attention for Transformer Models\" (Peitz et al., 2019)", "\n", "parser", ".", "add_argument", "(", "'--no-cross-attention'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'do not perform cross-attention'", ")", "\n", "parser", ".", "add_argument", "(", "'--cross-self-attention'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'perform cross+self-attention'", ")", "\n", "parser", ".", "add_argument", "(", "'--layer-wise-attention'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'perform layer-wise attention (cross-attention or cross+self-attention)'", ")", "\n", "# args for \"Reducing Transformer Depth on Demand with Structured Dropout\" (Fan et al., 2019)", "\n", "parser", ".", "add_argument", "(", "'--encoder-layerdrop'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "default", "=", "0", ",", "\n", "help", "=", "'LayerDrop probability for encoder'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-layerdrop'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "default", "=", "0", ",", "\n", "help", "=", "'LayerDrop probability for decoder'", ")", "\n", "parser", ".", "add_argument", "(", "'--encoder-layers-to-keep'", ",", "default", "=", "None", ",", "\n", "help", "=", "'which layers to *keep* when pruning as a comma-separated list'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-layers-to-keep'", ",", "default", "=", "None", ",", "\n", "help", "=", "'which layers to *keep* when pruning as a comma-separated list'", ")", "\n", "parser", ".", "add_argument", "(", "'--layernorm-embedding'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'add layernorm to embedding'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-scale-embedding'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'if True, dont scale embeddings'", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.TransformerModel.build_model": [[166, 220], ["transformer.base_architecture", "cls.build_encoder", "cls.build_decoder", "cls", "len", "len", "getattr", "getattr", "len", "dictionary.pad", "transformer.Embedding", "transformer.TransformerModel.build_model.build_embedding"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.base_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.fairseq_nat_model.FairseqNATModel.build_encoder", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.fairseq_nat_model.FairseqNATModel.build_decoder", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dictionary.BertDictionary.cls", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.Embedding"], ["\n", "", "@", "classmethod", "\n", "def", "build_model", "(", "cls", ",", "args", ",", "task", ")", ":", "\n", "        ", "\"\"\"Build a new model instance.\"\"\"", "\n", "\n", "# make sure all arguments are present in older models", "\n", "base_architecture", "(", "args", ")", "\n", "\n", "if", "args", ".", "encoder_layers_to_keep", ":", "\n", "            ", "args", ".", "encoder_layers", "=", "len", "(", "args", ".", "encoder_layers_to_keep", ".", "split", "(", "\",\"", ")", ")", "\n", "", "if", "args", ".", "decoder_layers_to_keep", ":", "\n", "            ", "args", ".", "decoder_layers", "=", "len", "(", "args", ".", "decoder_layers_to_keep", ".", "split", "(", "\",\"", ")", ")", "\n", "\n", "", "if", "getattr", "(", "args", ",", "\"max_source_positions\"", ",", "None", ")", "is", "None", ":", "\n", "            ", "args", ".", "max_source_positions", "=", "DEFAULT_MAX_SOURCE_POSITIONS", "\n", "", "if", "getattr", "(", "args", ",", "\"max_target_positions\"", ",", "None", ")", "is", "None", ":", "\n", "            ", "args", ".", "max_target_positions", "=", "DEFAULT_MAX_TARGET_POSITIONS", "\n", "\n", "", "src_dict", ",", "tgt_dict", "=", "task", ".", "source_dictionary", ",", "task", ".", "target_dictionary", "\n", "\n", "def", "build_embedding", "(", "dictionary", ",", "embed_dim", ",", "path", "=", "None", ")", ":", "\n", "            ", "num_embeddings", "=", "len", "(", "dictionary", ")", "\n", "padding_idx", "=", "dictionary", ".", "pad", "(", ")", "\n", "emb", "=", "Embedding", "(", "num_embeddings", ",", "embed_dim", ",", "padding_idx", ")", "\n", "# if provided, load from preloaded dictionaries", "\n", "if", "path", ":", "\n", "                ", "embed_dict", "=", "utils", ".", "parse_embedding", "(", "path", ")", "\n", "utils", ".", "load_embedding", "(", "embed_dict", ",", "dictionary", ",", "emb", ")", "\n", "", "return", "emb", "\n", "\n", "", "if", "args", ".", "share_all_embeddings", ":", "\n", "            ", "if", "src_dict", "!=", "tgt_dict", ":", "\n", "                ", "raise", "ValueError", "(", "\"--share-all-embeddings requires a joined dictionary\"", ")", "\n", "", "if", "args", ".", "encoder_embed_dim", "!=", "args", ".", "decoder_embed_dim", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"--share-all-embeddings requires --encoder-embed-dim to match --decoder-embed-dim\"", "\n", ")", "\n", "", "if", "args", ".", "decoder_embed_path", "and", "(", "\n", "args", ".", "decoder_embed_path", "!=", "args", ".", "encoder_embed_path", "\n", ")", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"--share-all-embeddings not compatible with --decoder-embed-path\"", "\n", ")", "\n", "", "encoder_embed_tokens", "=", "build_embedding", "(", "\n", "src_dict", ",", "args", ".", "encoder_embed_dim", ",", "args", ".", "encoder_embed_path", "\n", ")", "\n", "decoder_embed_tokens", "=", "encoder_embed_tokens", "\n", "args", ".", "share_decoder_input_output_embed", "=", "True", "\n", "", "else", ":", "\n", "            ", "encoder_embed_tokens", "=", "build_embedding", "(", "\n", "src_dict", ",", "args", ".", "encoder_embed_dim", ",", "args", ".", "encoder_embed_path", "\n", ")", "\n", "decoder_embed_tokens", "=", "build_embedding", "(", "\n", "tgt_dict", ",", "args", ".", "decoder_embed_dim", ",", "args", ".", "decoder_embed_path", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.TransformerModel.build_encoder": [[221, 224], ["transformer.TransformerEncoder"], "methods", ["None"], ["\n", "", "encoder", "=", "cls", ".", "build_encoder", "(", "args", ",", "src_dict", ",", "encoder_embed_tokens", ")", "\n", "decoder", "=", "cls", ".", "build_decoder", "(", "args", ",", "tgt_dict", ",", "decoder_embed_tokens", ")", "\n", "return", "cls", "(", "args", ",", "encoder", ",", "decoder", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.TransformerModel.build_decoder": [[225, 232], ["transformer.TransformerDecoder", "getattr"], "methods", ["None"], ["\n", "", "@", "classmethod", "\n", "def", "build_encoder", "(", "cls", ",", "args", ",", "src_dict", ",", "embed_tokens", ")", ":", "\n", "        ", "return", "TransformerEncoder", "(", "args", ",", "src_dict", ",", "embed_tokens", ")", "\n", "\n", "", "@", "classmethod", "\n", "def", "build_decoder", "(", "cls", ",", "args", ",", "tgt_dict", ",", "embed_tokens", ")", ":", "\n", "        ", "return", "TransformerDecoder", "(", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.TransformerModel.forward": [[241, 274], ["transformer.TransformerModel.encoder", "transformer.TransformerModel.decoder"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqMultiModel.encoder", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqMultiModel.decoder"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "src_tokens", ",", "\n", "src_lengths", ",", "\n", "prev_output_tokens", ",", "\n", "cls_input", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "return_all_hiddens", ":", "bool", "=", "True", ",", "\n", "features_only", ":", "bool", "=", "False", ",", "\n", "alignment_layer", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "alignment_heads", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Run the forward pass for an encoder-decoder model.\n\n        Copied from the base class, but without ``**kwargs``,\n        which are not supported by TorchScript.\n        \"\"\"", "\n", "encoder_out", "=", "self", ".", "encoder", "(", "\n", "src_tokens", ",", "\n", "src_lengths", "=", "src_lengths", ",", "\n", "cls_input", "=", "cls_input", ",", "\n", "return_all_hiddens", "=", "return_all_hiddens", ",", "\n", ")", "\n", "decoder_out", "=", "self", ".", "decoder", "(", "\n", "prev_output_tokens", ",", "\n", "encoder_out", "=", "encoder_out", ",", "\n", "features_only", "=", "features_only", ",", "\n", "alignment_layer", "=", "alignment_layer", ",", "\n", "alignment_heads", "=", "alignment_heads", ",", "\n", "src_lengths", "=", "src_lengths", ",", "\n", "return_all_hiddens", "=", "return_all_hiddens", ",", "\n", ")", "\n", "return", "decoder_out", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.TransformerAlignModel.__init__": [[242, 247], ["transformer.TransformerModel.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["self", ",", "\n", "src_tokens", ",", "\n", "src_lengths", ",", "\n", "prev_output_tokens", ",", "\n", "cls_input", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "return_all_hiddens", ":", "bool", "=", "True", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.TransformerAlignModel.add_args": [[248, 258], ["transformer.TransformerModel.add_args", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.add_args"], ["features_only", ":", "bool", "=", "False", ",", "\n", "alignment_layer", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "alignment_heads", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Run the forward pass for an encoder-decoder model.\n\n        Copied from the base class, but without ``**kwargs``,\n        which are not supported by TorchScript.\n        \"\"\"", "\n", "encoder_out", "=", "self", ".", "encoder", "(", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.TransformerAlignModel.build_model": [[260, 267], ["transformer.transformer_align", "transformer.TransformerModel.build_model", "transformer.TransformerAlignModel"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.transformer_align", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.build_model"], ["src_lengths", "=", "src_lengths", ",", "\n", "cls_input", "=", "cls_input", ",", "\n", "return_all_hiddens", "=", "return_all_hiddens", ",", "\n", ")", "\n", "decoder_out", "=", "self", ".", "decoder", "(", "\n", "prev_output_tokens", ",", "\n", "encoder_out", "=", "encoder_out", ",", "\n", "features_only", "=", "features_only", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.TransformerAlignModel.forward": [[268, 271], ["transformer.TransformerAlignModel.encoder", "transformer.TransformerAlignModel.forward_decoder"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqMultiModel.encoder", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles.EnsembleLevT.forward_decoder"], ["alignment_layer", "=", "alignment_layer", ",", "\n", "alignment_heads", "=", "alignment_heads", ",", "\n", "src_lengths", "=", "src_lengths", ",", "\n", "return_all_hiddens", "=", "return_all_hiddens", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.TransformerAlignModel.forward_decoder": [[272, 296], ["transformer.TransformerAlignModel.decoder", "transformer.TransformerAlignModel.decoder"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqMultiModel.decoder", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqMultiModel.decoder"], [")", "\n", "return", "decoder_out", "\n", "\n", "\n", "", "", "@", "register_model", "(", "\"transformer_align\"", ")", "\n", "class", "TransformerAlignModel", "(", "TransformerModel", ")", ":", "\n", "    ", "\"\"\"\n    See \"Jointly Learning to Align and Translate with Transformer\n    Models\" (Garg et al., EMNLP 2019).\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "encoder", ",", "decoder", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "encoder", ",", "decoder", ")", "\n", "self", ".", "alignment_heads", "=", "args", ".", "alignment_heads", "\n", "self", ".", "alignment_layer", "=", "args", ".", "alignment_layer", "\n", "self", ".", "full_context_alignment", "=", "args", ".", "full_context_alignment", "\n", "\n", "", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "# fmt: off", "\n", "        ", "super", "(", "TransformerAlignModel", ",", "TransformerAlignModel", ")", ".", "add_args", "(", "parser", ")", "\n", "parser", ".", "add_argument", "(", "'--alignment-heads'", ",", "type", "=", "int", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'Number of cross attention heads per layer to supervised with alignments'", ")", "\n", "parser", ".", "add_argument", "(", "'--alignment-layer'", ",", "type", "=", "int", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'Layer number which has to be supervised. 0 corresponding to the bottommost layer.'", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.TransformerEncoder.__init__": [[317, 353], ["fairseq.models.FairseqEncoder.__init__", "transformer.TransformerEncoder.register_buffer", "getattr", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "transformer.TransformerEncoder.layers.extend", "getattr", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "math.sqrt", "fairseq.modules.PositionalEmbedding", "fairseq.modules.LayerNorm", "fairseq.modules.LayerNorm", "fairseq.modules.TransformerEncoderLayer", "range"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.positional_embedding.PositionalEmbedding", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.layer_norm.LayerNorm", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.layer_norm.LayerNorm"], ["prev_output_tokens", ",", "\n", "encoder_out", "=", "None", ",", "\n", "incremental_state", "=", "None", ",", "\n", "features_only", "=", "False", ",", "\n", "**", "extra_args", ",", "\n", ")", ":", "\n", "        ", "attn_args", "=", "{", "\n", "\"alignment_layer\"", ":", "self", ".", "alignment_layer", ",", "\n", "\"alignment_heads\"", ":", "self", ".", "alignment_heads", ",", "\n", "}", "\n", "decoder_out", "=", "self", ".", "decoder", "(", "prev_output_tokens", ",", "encoder_out", ",", "**", "attn_args", ")", "\n", "\n", "if", "self", ".", "full_context_alignment", ":", "\n", "            ", "attn_args", "[", "\"full_context_alignment\"", "]", "=", "self", ".", "full_context_alignment", "\n", "_", ",", "alignment_out", "=", "self", ".", "decoder", "(", "\n", "prev_output_tokens", ",", "\n", "encoder_out", ",", "\n", "features_only", "=", "True", ",", "\n", "**", "attn_args", ",", "\n", "**", "extra_args", ",", "\n", ")", "\n", "decoder_out", "[", "1", "]", "[", "\"attn\"", "]", "=", "alignment_out", "[", "\"attn\"", "]", "\n", "\n", "", "return", "decoder_out", "\n", "\n", "\n", "", "", "class", "TransformerEncoder", "(", "FairseqEncoder", ")", ":", "\n", "    ", "\"\"\"\n    Transformer encoder consisting of *args.encoder_layers* layers. Each layer\n    is a :class:`TransformerEncoderLayer`.\n\n    Args:\n        args (argparse.Namespace): parsed command-line arguments\n        dictionary (~fairseq.data.Dictionary): encoding dictionary\n        embed_tokens (torch.nn.Embedding): input embedding\n    \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.TransformerEncoder.forward_embedding": [[354, 363], ["torch.dropout", "torch.dropout", "torch.dropout", "transformer.TransformerEncoder.embed_tokens", "transformer.TransformerEncoder.layernorm_embedding", "transformer.TransformerEncoder.embed_positions"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "args", ",", "dictionary", ",", "embed_tokens", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dictionary", ")", "\n", "self", ".", "register_buffer", "(", "\"version\"", ",", "torch", ".", "Tensor", "(", "[", "3", "]", ")", ")", "\n", "\n", "self", ".", "dropout", "=", "args", ".", "dropout", "\n", "self", ".", "encoder_layerdrop", "=", "args", ".", "encoder_layerdrop", "\n", "\n", "embed_dim", "=", "embed_tokens", ".", "embedding_dim", "\n", "self", ".", "padding_idx", "=", "embed_tokens", ".", "padding_idx", "\n", "self", ".", "max_source_positions", "=", "args", ".", "max_source_positions", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.TransformerEncoder.forward": [[364, 420], ["transformer.TransformerEncoder.forward_embedding", "layer.transpose", "src_tokens.eq", "EncoderOut", "src_tokens.eq.any", "random.uniform", "transformer.TransformerEncoder.layer_norm", "layer", "encoder_states.append"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_transformer.NATransformerDecoder.forward_embedding"], ["\n", "self", ".", "embed_tokens", "=", "embed_tokens", "\n", "\n", "self", ".", "embed_scale", "=", "1.0", "if", "args", ".", "no_scale_embedding", "else", "math", ".", "sqrt", "(", "embed_dim", ")", "\n", "\n", "self", ".", "embed_positions", "=", "(", "\n", "PositionalEmbedding", "(", "\n", "args", ".", "max_source_positions", ",", "\n", "embed_dim", ",", "\n", "self", ".", "padding_idx", ",", "\n", "learned", "=", "args", ".", "encoder_learned_pos", ",", "\n", ")", "\n", "if", "not", "args", ".", "no_token_positional_embeddings", "\n", "else", "None", "\n", ")", "\n", "\n", "self", ".", "layer_wise_attention", "=", "getattr", "(", "args", ",", "\"layer_wise_attention\"", ",", "False", ")", "\n", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "self", ".", "layers", ".", "extend", "(", "\n", "[", "TransformerEncoderLayer", "(", "args", ")", "for", "i", "in", "range", "(", "args", ".", "encoder_layers", ")", "]", "\n", ")", "\n", "self", ".", "num_layers", "=", "len", "(", "self", ".", "layers", ")", "\n", "\n", "if", "args", ".", "encoder_normalize_before", ":", "\n", "            ", "self", ".", "layer_norm", "=", "LayerNorm", "(", "embed_dim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "layer_norm", "=", "None", "\n", "", "if", "getattr", "(", "args", ",", "\"layernorm_embedding\"", ",", "False", ")", ":", "\n", "            ", "self", ".", "layernorm_embedding", "=", "LayerNorm", "(", "embed_dim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "layernorm_embedding", "=", "None", "\n", "\n", "", "", "def", "forward_embedding", "(", "self", ",", "src_tokens", ")", ":", "\n", "# embed tokens and positions", "\n", "        ", "x", "=", "embed", "=", "self", ".", "embed_scale", "*", "self", ".", "embed_tokens", "(", "src_tokens", ")", "\n", "if", "self", ".", "embed_positions", "is", "not", "None", ":", "\n", "            ", "x", "=", "embed", "+", "self", ".", "embed_positions", "(", "src_tokens", ")", "\n", "", "if", "self", ".", "layernorm_embedding", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "layernorm_embedding", "(", "x", ")", "\n", "", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "return", "x", ",", "embed", "\n", "\n", "", "def", "forward", "(", "\n", "self", ",", "\n", "src_tokens", ",", "\n", "src_lengths", ",", "\n", "cls_input", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "return_all_hiddens", ":", "bool", "=", "False", ",", "\n", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.TransformerEncoder.reorder_encoder_out": [[422, 449], ["encoder_out._replace._replace._replace", "encoder_out._replace._replace._replace", "encoder_out._replace._replace._replace", "enumerate", "state.index_select", "encoder_out._replace._replace.encoder_out.index_select", "encoder_out._replace._replace.encoder_padding_mask.index_select", "encoder_out._replace._replace.encoder_embedding.index_select"], "methods", ["None"], ["\n", "if", "self", ".", "layer_wise_attention", ":", "\n", "            ", "return_all_hiddens", "=", "True", "\n", "\n", "", "x", ",", "encoder_embedding", "=", "self", ".", "forward_embedding", "(", "src_tokens", ")", "\n", "\n", "# B x T x C -> T x B x C", "\n", "x", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "# compute padding mask", "\n", "encoder_padding_mask", "=", "src_tokens", ".", "eq", "(", "self", ".", "padding_idx", ")", "\n", "\n", "encoder_states", "=", "[", "]", "if", "return_all_hiddens", "else", "None", "\n", "\n", "# encoder layers", "\n", "for", "layer", "in", "self", ".", "layers", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.TransformerEncoder.max_positions": [[450, 455], ["min", "transformer.TransformerEncoder.embed_positions.max_positions"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.max_positions"], ["# add LayerDrop (see https://arxiv.org/abs/1909.11556 for description)", "\n", "            ", "dropout_probability", "=", "torch", ".", "empty", "(", "1", ")", ".", "uniform_", "(", ")", "\n", "if", "not", "self", ".", "training", "or", "(", "dropout_probability", ">", "self", ".", "encoder_layerdrop", ")", ":", "\n", "                ", "x", "=", "layer", "(", "x", ",", "encoder_padding_mask", ")", "\n", "if", "return_all_hiddens", ":", "\n", "                    ", "assert", "encoder_states", "is", "not", "None", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.TransformerEncoder.buffered_future_mask": [[456, 463], ["tensor.size", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "hasattr", "fairseq.utils.fill_with_neg_inf", "transformer.TransformerEncoder._future_mask.size", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "tensor.new", "fairseq.utils.fill_with_neg_inf", "transformer.TransformerEncoder._future_mask.resize_"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.fill_with_neg_inf", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.fill_with_neg_inf"], ["encoder_states", ".", "append", "(", "x", ")", "\n", "\n", "", "", "", "if", "self", ".", "layer_norm", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "layer_norm", "(", "x", ")", "\n", "if", "return_all_hiddens", ":", "\n", "                ", "encoder_states", "[", "-", "1", "]", "=", "x", "\n", "\n", "", "", "return", "EncoderOut", "(", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.TransformerEncoder.upgrade_state_dict_named": [[464, 483], ["isinstance", "range", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "len", "transformer.TransformerEncoder.layers[].upgrade_state_dict_named", "fairseq.utils.item", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "print", "state_dict.get", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.model.BARTModel.upgrade_state_dict_named", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], ["encoder_out", "=", "x", ",", "# T x B x C", "\n", "encoder_padding_mask", "=", "encoder_padding_mask", ",", "# B x T", "\n", "encoder_embedding", "=", "encoder_embedding", ",", "# B x T x C", "\n", "encoder_states", "=", "encoder_states", ",", "# List[T x B x C]", "\n", ")", "\n", "\n", "", "@", "torch", ".", "jit", ".", "export", "\n", "def", "reorder_encoder_out", "(", "self", ",", "encoder_out", ":", "EncoderOut", ",", "new_order", ")", ":", "\n", "        ", "\"\"\"\n        Reorder encoder output according to *new_order*.\n\n        Args:\n            encoder_out: output from the ``forward()`` method\n            new_order (LongTensor): desired order\n\n        Returns:\n            *encoder_out* rearranged according to *new_order*\n        \"\"\"", "\n", "new_encoder_out", ":", "Dict", "[", "str", ",", "Tensor", "]", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.TransformerDecoder.__init__": [[498, 560], ["fairseq.models.FairseqIncrementalDecoder.__init__", "transformer.TransformerDecoder.register_buffer", "getattr", "getattr", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "transformer.TransformerDecoder.layers.extend", "getattr", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "math.sqrt", "transformer.Linear", "fairseq.modules.PositionalEmbedding", "transformer.Linear", "fairseq.modules.AdaptiveSoftmax", "fairseq.modules.LayerNorm", "fairseq.modules.LayerNorm", "fairseq.modules.TransformerDecoderLayer", "len", "fairseq.options.eval_str_list", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.init.normal_", "torch.init.normal_", "torch.init.normal_", "getattr", "range", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.positional_embedding.PositionalEmbedding", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.layer_norm.LayerNorm", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.layer_norm.LayerNorm", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.eval_str_list"], [")", "\n", "\n", "encoder_states", "=", "encoder_out", ".", "encoder_states", "\n", "if", "encoder_states", "is", "not", "None", ":", "\n", "            ", "for", "idx", ",", "state", "in", "enumerate", "(", "encoder_states", ")", ":", "\n", "                ", "encoder_states", "[", "idx", "]", "=", "state", ".", "index_select", "(", "1", ",", "new_order", ")", "\n", "\n", "", "", "return", "EncoderOut", "(", "\n", "encoder_out", "=", "new_encoder_out", "[", "\"encoder_out\"", "]", ",", "# T x B x C", "\n", "encoder_padding_mask", "=", "new_encoder_out", "[", "\"encoder_padding_mask\"", "]", ",", "# B x T", "\n", "encoder_embedding", "=", "new_encoder_out", "[", "\"encoder_embedding\"", "]", ",", "# B x T x C", "\n", "encoder_states", "=", "encoder_states", ",", "# List[T x B x C]", "\n", ")", "\n", "\n", "", "def", "max_positions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Maximum input length supported by the encoder.\"\"\"", "\n", "if", "self", ".", "embed_positions", "is", "None", ":", "\n", "            ", "return", "self", ".", "max_source_positions", "\n", "", "return", "min", "(", "self", ".", "max_source_positions", ",", "self", ".", "embed_positions", ".", "max_positions", ")", "\n", "\n", "", "def", "buffered_future_mask", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "dim", "=", "tensor", ".", "size", "(", "0", ")", "\n", "if", "(", "\n", "not", "hasattr", "(", "self", ",", "\"_future_mask\"", ")", "\n", "or", "self", ".", "_future_mask", "is", "None", "\n", "or", "self", ".", "_future_mask", ".", "device", "!=", "tensor", ".", "device", "\n", ")", ":", "\n", "            ", "self", ".", "_future_mask", "=", "torch", ".", "triu", "(", "\n", "utils", ".", "fill_with_neg_inf", "(", "tensor", ".", "new", "(", "dim", ",", "dim", ")", ")", ",", "1", "\n", ")", "\n", "if", "self", ".", "_future_mask", ".", "size", "(", "0", ")", "<", "dim", ":", "\n", "                ", "self", ".", "_future_mask", "=", "torch", ".", "triu", "(", "\n", "utils", ".", "fill_with_neg_inf", "(", "self", ".", "_future_mask", ".", "resize_", "(", "dim", ",", "dim", ")", ")", ",", "1", "\n", ")", "\n", "", "", "return", "self", ".", "_future_mask", "[", ":", "dim", ",", ":", "dim", "]", "\n", "\n", "", "def", "upgrade_state_dict_named", "(", "self", ",", "state_dict", ",", "name", ")", ":", "\n", "        ", "\"\"\"Upgrade a (possibly old) state dict for new versions of fairseq.\"\"\"", "\n", "if", "isinstance", "(", "self", ".", "embed_positions", ",", "SinusoidalPositionalEmbedding", ")", ":", "\n", "            ", "weights_key", "=", "\"{}.embed_positions.weights\"", ".", "format", "(", "name", ")", "\n", "if", "weights_key", "in", "state_dict", ":", "\n", "                ", "print", "(", "\"deleting {0}\"", ".", "format", "(", "weights_key", ")", ")", "\n", "del", "state_dict", "[", "weights_key", "]", "\n", "", "state_dict", "[", "\n", "\"{}.embed_positions._float_tensor\"", ".", "format", "(", "name", ")", "\n", "]", "=", "torch", ".", "FloatTensor", "(", "1", ")", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "# update layer norms", "\n", "            ", "self", ".", "layers", "[", "i", "]", ".", "upgrade_state_dict_named", "(", "\n", "state_dict", ",", "\"{}.layers.{}\"", ".", "format", "(", "name", ",", "i", ")", "\n", ")", "\n", "\n", "", "version_key", "=", "\"{}.version\"", ".", "format", "(", "name", ")", "\n", "if", "utils", ".", "item", "(", "state_dict", ".", "get", "(", "version_key", ",", "torch", ".", "Tensor", "(", "[", "1", "]", ")", ")", "[", "0", "]", ")", "<", "2", ":", "\n", "# earlier checkpoints did not normalize after the stack of layers", "\n", "            ", "self", ".", "layer_norm", "=", "None", "\n", "self", ".", "normalize", "=", "False", "\n", "state_dict", "[", "version_key", "]", "=", "torch", ".", "Tensor", "(", "[", "1", "]", ")", "\n", "", "return", "state_dict", "\n", "\n", "\n", "", "", "class", "TransformerDecoder", "(", "FairseqIncrementalDecoder", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.TransformerDecoder.forward": [[561, 594], ["transformer.TransformerDecoder.extract_features", "transformer.TransformerDecoder.output_layer"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_transformer.LevenshteinTransformerDecoder.extract_features", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.TransformerDecoder.output_layer"], ["\n", "\n", "def", "__init__", "(", "self", ",", "args", ",", "dictionary", ",", "embed_tokens", ",", "no_encoder_attn", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dictionary", ")", "\n", "self", ".", "register_buffer", "(", "\"version\"", ",", "torch", ".", "Tensor", "(", "[", "3", "]", ")", ")", "\n", "self", ".", "_future_mask", "=", "torch", ".", "empty", "(", "0", ")", "\n", "\n", "self", ".", "dropout", "=", "args", ".", "dropout", "\n", "self", ".", "decoder_layerdrop", "=", "args", ".", "decoder_layerdrop", "\n", "self", ".", "share_input_output_embed", "=", "args", ".", "share_decoder_input_output_embed", "\n", "\n", "input_embed_dim", "=", "embed_tokens", ".", "embedding_dim", "\n", "embed_dim", "=", "args", ".", "decoder_embed_dim", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "self", ".", "output_embed_dim", "=", "args", ".", "decoder_output_dim", "\n", "\n", "self", ".", "padding_idx", "=", "embed_tokens", ".", "padding_idx", "\n", "self", ".", "max_target_positions", "=", "args", ".", "max_target_positions", "\n", "\n", "self", ".", "embed_tokens", "=", "embed_tokens", "\n", "\n", "self", ".", "embed_scale", "=", "1.0", "if", "args", ".", "no_scale_embedding", "else", "math", ".", "sqrt", "(", "embed_dim", ")", "\n", "\n", "self", ".", "project_in_dim", "=", "(", "\n", "Linear", "(", "input_embed_dim", ",", "embed_dim", ",", "bias", "=", "False", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.TransformerDecoder.extract_features": [[595, 709], ["torch.dropout", "torch.dropout", "torch.dropout", "transformer.TransformerDecoder.transpose", "enumerate", "transformer.TransformerDecoder.transpose", "transformer.TransformerDecoder.embed_positions", "transformer.TransformerDecoder.embed_tokens", "transformer.TransformerDecoder.project_in_dim", "transformer.TransformerDecoder.layernorm_embedding", "prev_output_tokens.eq().any", "prev_output_tokens.eq", "random.uniform", "layer_attn.float.mean", "transformer.TransformerDecoder.layer_norm", "transformer.TransformerDecoder.project_out_dim", "len", "transformer.TransformerDecoder.buffered_future_mask", "layer", "inner_states.append", "prev_output_tokens.eq", "layer_attn.float"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.TransformerDecoder.buffered_future_mask"], ["if", "embed_dim", "!=", "input_embed_dim", "\n", "else", "None", "\n", ")", "\n", "\n", "self", ".", "embed_positions", "=", "(", "\n", "PositionalEmbedding", "(", "\n", "args", ".", "max_target_positions", ",", "\n", "embed_dim", ",", "\n", "self", ".", "padding_idx", ",", "\n", "learned", "=", "args", ".", "decoder_learned_pos", ",", "\n", ")", "\n", "if", "not", "args", ".", "no_token_positional_embeddings", "\n", "else", "None", "\n", ")", "\n", "\n", "self", ".", "cross_self_attention", "=", "getattr", "(", "args", ",", "\"cross_self_attention\"", ",", "False", ")", "\n", "self", ".", "layer_wise_attention", "=", "getattr", "(", "args", ",", "\"layer_wise_attention\"", ",", "False", ")", "\n", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "]", ")", "\n", "self", ".", "layers", ".", "extend", "(", "\n", "[", "\n", "TransformerDecoderLayer", "(", "args", ",", "no_encoder_attn", ")", "\n", "for", "_", "in", "range", "(", "args", ".", "decoder_layers", ")", "\n", "]", "\n", ")", "\n", "self", ".", "num_layers", "=", "len", "(", "self", ".", "layers", ")", "\n", "\n", "self", ".", "adaptive_softmax", "=", "None", "\n", "\n", "self", ".", "project_out_dim", "=", "(", "\n", "Linear", "(", "embed_dim", ",", "self", ".", "output_embed_dim", ",", "bias", "=", "False", ")", "\n", "if", "embed_dim", "!=", "self", ".", "output_embed_dim", "and", "not", "args", ".", "tie_adaptive_weights", "\n", "else", "None", "\n", ")", "\n", "\n", "if", "args", ".", "adaptive_softmax_cutoff", "is", "not", "None", ":", "\n", "            ", "self", ".", "adaptive_softmax", "=", "AdaptiveSoftmax", "(", "\n", "len", "(", "dictionary", ")", ",", "\n", "self", ".", "output_embed_dim", ",", "\n", "options", ".", "eval_str_list", "(", "args", ".", "adaptive_softmax_cutoff", ",", "type", "=", "int", ")", ",", "\n", "dropout", "=", "args", ".", "adaptive_softmax_dropout", ",", "\n", "adaptive_inputs", "=", "embed_tokens", "if", "args", ".", "tie_adaptive_weights", "else", "None", ",", "\n", "factor", "=", "args", ".", "adaptive_softmax_factor", ",", "\n", "tie_proj", "=", "args", ".", "tie_adaptive_proj", ",", "\n", ")", "\n", "", "elif", "not", "self", ".", "share_input_output_embed", ":", "\n", "            ", "self", ".", "embed_out", "=", "nn", ".", "Parameter", "(", "\n", "torch", ".", "Tensor", "(", "len", "(", "dictionary", ")", ",", "self", ".", "output_embed_dim", ")", "\n", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "self", ".", "embed_out", ",", "mean", "=", "0", ",", "std", "=", "self", ".", "output_embed_dim", "**", "-", "0.5", ")", "\n", "\n", "", "if", "args", ".", "decoder_normalize_before", "and", "not", "getattr", "(", "\n", "args", ",", "\"no_decoder_final_norm\"", ",", "False", "\n", ")", ":", "\n", "            ", "self", ".", "layer_norm", "=", "LayerNorm", "(", "embed_dim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "layer_norm", "=", "None", "\n", "", "if", "getattr", "(", "args", ",", "\"layernorm_embedding\"", ",", "False", ")", ":", "\n", "            ", "self", ".", "layernorm_embedding", "=", "LayerNorm", "(", "embed_dim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "layernorm_embedding", "=", "None", "\n", "\n", "", "", "def", "forward", "(", "\n", "self", ",", "\n", "prev_output_tokens", ",", "\n", "encoder_out", ":", "Optional", "[", "EncoderOut", "]", "=", "None", ",", "\n", "incremental_state", ":", "Optional", "[", "Dict", "[", "str", ",", "Dict", "[", "str", ",", "Optional", "[", "Tensor", "]", "]", "]", "]", "=", "None", ",", "\n", "features_only", ":", "bool", "=", "False", ",", "\n", "alignment_layer", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "alignment_heads", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "src_lengths", ":", "Optional", "[", "Any", "]", "=", "None", ",", "\n", "return_all_hiddens", ":", "bool", "=", "False", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            prev_output_tokens (LongTensor): previous decoder outputs of shape\n                `(batch, tgt_len)`, for teacher forcing\n            encoder_out (optional): output from the encoder, used for\n                encoder-side attention\n            incremental_state (dict): dictionary used for storing state during\n                :ref:`Incremental decoding`\n            features_only (bool, optional): only return features without\n                applying output layer (default: False).\n\n        Returns:\n            tuple:\n                - the decoder's output of shape `(batch, tgt_len, vocab)`\n                - a dictionary with any model-specific outputs\n        \"\"\"", "\n", "x", ",", "extra", "=", "self", ".", "extract_features", "(", "\n", "prev_output_tokens", ",", "\n", "encoder_out", "=", "encoder_out", ",", "\n", "incremental_state", "=", "incremental_state", ",", "\n", "alignment_layer", "=", "alignment_layer", ",", "\n", "alignment_heads", "=", "alignment_heads", ",", "\n", ")", "\n", "if", "not", "features_only", ":", "\n", "            ", "x", "=", "self", ".", "output_layer", "(", "x", ")", "\n", "", "return", "x", ",", "extra", "\n", "\n", "", "def", "extract_features", "(", "\n", "self", ",", "\n", "prev_output_tokens", ",", "\n", "encoder_out", ":", "Optional", "[", "EncoderOut", "]", "=", "None", ",", "\n", "incremental_state", ":", "Optional", "[", "Dict", "[", "str", ",", "Dict", "[", "str", ",", "Optional", "[", "Tensor", "]", "]", "]", "]", "=", "None", ",", "\n", "full_context_alignment", ":", "bool", "=", "False", ",", "\n", "alignment_layer", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "alignment_heads", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.TransformerDecoder.output_layer": [[710, 720], ["torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear", "torch.linear"], "methods", ["None"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.TransformerDecoder.max_positions": [[721, 726], ["min", "transformer.TransformerDecoder.embed_positions.max_positions"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.max_positions"], ["\n", "if", "alignment_layer", "is", "None", ":", "\n", "            ", "alignment_layer", "=", "self", ".", "num_layers", "-", "1", "\n", "\n", "# embed positions", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.TransformerDecoder.buffered_future_mask": [[727, 737], ["tensor.size", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "hasattr", "transformer.TransformerDecoder._future_mask.size", "fairseq.utils.fill_with_neg_inf", "tensor.new"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.fill_with_neg_inf"], ["", "positions", "=", "(", "\n", "self", ".", "embed_positions", "(", "\n", "prev_output_tokens", ",", "incremental_state", "=", "incremental_state", "\n", ")", "\n", "if", "self", ".", "embed_positions", "is", "not", "None", "\n", "else", "None", "\n", ")", "\n", "\n", "if", "incremental_state", "is", "not", "None", ":", "\n", "            ", "prev_output_tokens", "=", "prev_output_tokens", "[", ":", ",", "-", "1", ":", "]", "\n", "if", "positions", "is", "not", "None", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.TransformerDecoder.upgrade_state_dict_named": [[738, 768], ["isinstance", "range", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "len", "layer_norm_map.items", "fairseq.utils.item", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "state_dict.get", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item"], ["                ", "positions", "=", "positions", "[", ":", ",", "-", "1", ":", "]", "\n", "\n", "# embed tokens and positions", "\n", "", "", "x", "=", "self", ".", "embed_scale", "*", "self", ".", "embed_tokens", "(", "prev_output_tokens", ")", "\n", "\n", "if", "self", ".", "project_in_dim", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "project_in_dim", "(", "x", ")", "\n", "\n", "", "if", "positions", "is", "not", "None", ":", "\n", "            ", "x", "+=", "positions", "\n", "\n", "", "if", "self", ".", "layernorm_embedding", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "layernorm_embedding", "(", "x", ")", "\n", "\n", "", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "# B x T x C -> T x B x C", "\n", "x", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "self_attn_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", "\n", "if", "self", ".", "cross_self_attention", "or", "prev_output_tokens", ".", "eq", "(", "self", ".", "padding_idx", ")", ".", "any", "(", ")", ":", "\n", "            ", "self_attn_padding_mask", "=", "prev_output_tokens", ".", "eq", "(", "self", ".", "padding_idx", ")", "\n", "\n", "# decoder layers", "\n", "", "attn", ":", "Optional", "[", "Tensor", "]", "=", "None", "\n", "inner_states", ":", "List", "[", "Optional", "[", "Tensor", "]", "]", "=", "[", "x", "]", "\n", "for", "idx", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "encoder_state", ":", "Optional", "[", "Tensor", "]", "=", "None", "\n", "if", "encoder_out", "is", "not", "None", ":", "\n", "                ", "if", "self", ".", "layer_wise_attention", ":", "\n", "                    ", "encoder_states", "=", "encoder_out", ".", "encoder_states", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.Embedding": [[770, 775], ["torch.Embedding", "torch.init.normal_", "torch.init.constant_"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.Embedding"], ["encoder_state", "=", "encoder_states", "[", "idx", "]", "\n", "", "else", ":", "\n", "                    ", "encoder_state", "=", "encoder_out", ".", "encoder_out", "\n", "\n", "", "", "if", "incremental_state", "is", "None", "and", "not", "full_context_alignment", ":", "\n", "                ", "self_attn_mask", "=", "self", ".", "buffered_future_mask", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.Linear": [[777, 783], ["torch.Linear", "torch.init.xavier_uniform_", "torch.init.constant_"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear"], ["                ", "self_attn_mask", "=", "None", "\n", "\n", "# add LayerDrop (see https://arxiv.org/abs/1909.11556 for description)", "\n", "", "dropout_probability", "=", "torch", ".", "empty", "(", "1", ")", ".", "uniform_", "(", ")", "\n", "if", "not", "self", ".", "training", "or", "(", "dropout_probability", ">", "self", ".", "decoder_layerdrop", ")", ":", "\n", "                ", "x", ",", "layer_attn", ",", "_", "=", "layer", "(", "\n", "x", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.base_architecture": [[785, 820], ["fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture"], ["encoder_out", ".", "encoder_padding_mask", "\n", "if", "encoder_out", "is", "not", "None", "\n", "else", "None", ",", "\n", "incremental_state", ",", "\n", "self_attn_mask", "=", "self_attn_mask", ",", "\n", "self_attn_padding_mask", "=", "self_attn_padding_mask", ",", "\n", "need_attn", "=", "bool", "(", "(", "idx", "==", "alignment_layer", ")", ")", ",", "\n", "need_head_weights", "=", "bool", "(", "(", "idx", "==", "alignment_layer", ")", ")", ",", "\n", ")", "\n", "inner_states", ".", "append", "(", "x", ")", "\n", "if", "layer_attn", "is", "not", "None", "and", "idx", "==", "alignment_layer", ":", "\n", "                    ", "attn", "=", "layer_attn", ".", "float", "(", ")", ".", "to", "(", "x", ")", "\n", "\n", "", "", "", "if", "attn", "is", "not", "None", ":", "\n", "            ", "if", "alignment_heads", "is", "not", "None", ":", "\n", "                ", "attn", "=", "attn", "[", ":", "alignment_heads", "]", "\n", "\n", "# average probabilities over heads", "\n", "", "attn", "=", "attn", ".", "mean", "(", "dim", "=", "0", ")", "\n", "\n", "", "if", "self", ".", "layer_norm", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "layer_norm", "(", "x", ")", "\n", "\n", "# T x B x C -> B x T x C", "\n", "", "x", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "if", "self", ".", "project_out_dim", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "project_out_dim", "(", "x", ")", "\n", "\n", "", "return", "x", ",", "{", "\"attn\"", ":", "[", "attn", "]", ",", "\"inner_states\"", ":", "inner_states", "}", "\n", "\n", "", "def", "output_layer", "(", "self", ",", "features", ")", ":", "\n", "        ", "\"\"\"Project features to the vocabulary size.\"\"\"", "\n", "if", "self", ".", "adaptive_softmax", "is", "None", ":", "\n", "# project back to size of vocabulary", "\n", "            ", "if", "self", ".", "share_input_output_embed", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.transformer_iwslt_de_en": [[822, 833], ["fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "transformer.base_architecture"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.base_architecture"], ["", "else", ":", "\n", "                ", "return", "F", ".", "linear", "(", "features", ",", "self", ".", "embed_out", ")", "\n", "", "", "else", ":", "\n", "            ", "return", "features", "\n", "\n", "", "", "def", "max_positions", "(", "self", ")", ":", "\n", "        ", "\"\"\"Maximum output length supported by the decoder.\"\"\"", "\n", "if", "self", ".", "embed_positions", "is", "None", ":", "\n", "            ", "return", "self", ".", "max_target_positions", "\n", "", "return", "min", "(", "self", ".", "max_target_positions", ",", "self", ".", "embed_positions", ".", "max_positions", ")", "\n", "\n", "", "def", "buffered_future_mask", "(", "self", ",", "tensor", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.transformer_wmt_en_de": [[835, 838], ["fairseq.models.register_model_architecture", "transformer.base_architecture"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.base_architecture"], ["# self._future_mask.device != tensor.device is not working in TorchScript. This is a workaround.", "\n", "if", "(", "\n", "self", ".", "_future_mask", ".", "size", "(", "0", ")", "==", "0", "\n", "or", "(", "not", "self", ".", "_future_mask", ".", "device", "==", "tensor", ".", "device", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.transformer_vaswani_wmt_en_de_big": [[841, 852], ["fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "transformer.base_architecture"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.base_architecture"], ["            ", "self", ".", "_future_mask", "=", "torch", ".", "triu", "(", "\n", "utils", ".", "fill_with_neg_inf", "(", "torch", ".", "zeros", "(", "[", "dim", ",", "dim", "]", ")", ")", ",", "1", "\n", ")", "\n", "", "self", ".", "_future_mask", "=", "self", ".", "_future_mask", ".", "to", "(", "tensor", ")", "\n", "return", "self", ".", "_future_mask", "[", ":", "dim", ",", ":", "dim", "]", "\n", "\n", "", "def", "upgrade_state_dict_named", "(", "self", ",", "state_dict", ",", "name", ")", ":", "\n", "        ", "\"\"\"Upgrade a (possibly old) state dict for new versions of fairseq.\"\"\"", "\n", "if", "isinstance", "(", "self", ".", "embed_positions", ",", "SinusoidalPositionalEmbedding", ")", ":", "\n", "            ", "weights_key", "=", "\"{}.embed_positions.weights\"", ".", "format", "(", "name", ")", "\n", "if", "weights_key", "in", "state_dict", ":", "\n", "                ", "del", "state_dict", "[", "weights_key", "]", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.transformer_vaswani_wmt_en_fr_big": [[854, 858], ["fairseq.models.register_model_architecture", "getattr", "transformer.transformer_vaswani_wmt_en_de_big"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.transformer_vaswani_wmt_en_de_big"], ["\"{}.embed_positions._float_tensor\"", ".", "format", "(", "name", ")", "\n", "]", "=", "torch", ".", "FloatTensor", "(", "1", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "num_layers", ")", ":", "\n", "# update layer norms", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.transformer_wmt_en_de_big": [[860, 864], ["fairseq.models.register_model_architecture", "getattr", "transformer.transformer_vaswani_wmt_en_de_big"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.transformer_vaswani_wmt_en_de_big"], ["\"0\"", ":", "\"self_attn_layer_norm\"", ",", "\n", "\"1\"", ":", "\"encoder_attn_layer_norm\"", ",", "\n", "\"2\"", ":", "\"final_layer_norm\"", ",", "\n", "}", "\n", "for", "old", ",", "new", "in", "layer_norm_map", ".", "items", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.transformer_wmt_en_de_big_t2t": [[867, 874], ["fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "getattr", "transformer.transformer_vaswani_wmt_en_de_big"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.transformer_vaswani_wmt_en_de_big"], ["if", "k", "in", "state_dict", ":", "\n", "                        ", "state_dict", "[", "\n", "\"{}.layers.{}.{}.{}\"", ".", "format", "(", "name", ",", "i", ",", "new", ",", "m", ")", "\n", "]", "=", "state_dict", "[", "k", "]", "\n", "del", "state_dict", "[", "k", "]", "\n", "\n", "", "", "", "", "version_key", "=", "\"{}.version\"", ".", "format", "(", "name", ")", "\n", "if", "utils", ".", "item", "(", "state_dict", ".", "get", "(", "version_key", ",", "torch", ".", "Tensor", "(", "[", "1", "]", ")", ")", "[", "0", "]", ")", "<=", "2", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.transformer_align": [[876, 882], ["fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "transformer.base_architecture"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.base_architecture"], ["            ", "self", ".", "layer_norm", "=", "None", "\n", "self", ".", "normalize", "=", "False", "\n", "state_dict", "[", "version_key", "]", "=", "torch", ".", "Tensor", "(", "[", "1", "]", ")", "\n", "\n", "", "return", "state_dict", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.transformer_wmt_en_de_big_align": [[884, 889], ["fairseq.models.register_model_architecture", "getattr", "getattr", "transformer.transformer_wmt_en_de_big"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.transformer_wmt_en_de_big"], ["    ", "m", "=", "nn", ".", "Embedding", "(", "num_embeddings", ",", "embedding_dim", ",", "padding_idx", "=", "padding_idx", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "embedding_dim", "**", "-", "0.5", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", "[", "padding_idx", "]", ",", "0", ")", "\n", "return", "m", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.multilingual_transformer.MultilingualTransformerModel.__init__": [[40, 42], ["fairseq.models.FairseqMultiModel.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["def", "__init__", "(", "self", ",", "encoders", ",", "decoders", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "encoders", ",", "decoders", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.multilingual_transformer.MultilingualTransformerModel.add_args": [[43, 55], ["fairseq.models.transformer.TransformerModel.add_args", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.add_args"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add model-specific arguments to the parser.\"\"\"", "\n", "TransformerModel", ".", "add_args", "(", "parser", ")", "\n", "parser", ".", "add_argument", "(", "'--share-encoder-embeddings'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'share encoder embeddings across languages'", ")", "\n", "parser", ".", "add_argument", "(", "'--share-decoder-embeddings'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'share decoder embeddings across languages'", ")", "\n", "parser", ".", "add_argument", "(", "'--share-encoders'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'share encoders across languages'", ")", "\n", "parser", ".", "add_argument", "(", "'--share-decoders'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'share decoders across languages'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.multilingual_transformer.MultilingualTransformerModel.build_model": [[56, 166], ["isinstance", "multilingual_transformer.base_multilingual_architecture", "zip", "multilingual_transformer.MultilingualTransformerModel", "hasattr", "hasattr", "len", "dictionary.pad", "fairseq.models.transformer.Embedding", "fairseq.models.FairseqMultiModel.build_shared_embeddings", "multilingual_transformer.MultilingualTransformerModel.build_model.get_encoder"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.multilingual_transformer.base_multilingual_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.Embedding", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqMultiModel.build_shared_embeddings", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.gpt2_bpe_utils.get_encoder"], ["", "@", "classmethod", "\n", "def", "build_model", "(", "cls", ",", "args", ",", "task", ")", ":", "\n", "        ", "\"\"\"Build a new model instance.\"\"\"", "\n", "from", "fairseq", ".", "tasks", ".", "multilingual_translation", "import", "MultilingualTranslationTask", "\n", "assert", "isinstance", "(", "task", ",", "MultilingualTranslationTask", ")", "\n", "\n", "# make sure all arguments are present in older models", "\n", "base_multilingual_architecture", "(", "args", ")", "\n", "\n", "if", "not", "hasattr", "(", "args", ",", "'max_source_positions'", ")", ":", "\n", "            ", "args", ".", "max_source_positions", "=", "1024", "\n", "", "if", "not", "hasattr", "(", "args", ",", "'max_target_positions'", ")", ":", "\n", "            ", "args", ".", "max_target_positions", "=", "1024", "\n", "\n", "", "src_langs", "=", "[", "lang_pair", ".", "split", "(", "'-'", ")", "[", "0", "]", "for", "lang_pair", "in", "task", ".", "model_lang_pairs", "]", "\n", "tgt_langs", "=", "[", "lang_pair", ".", "split", "(", "'-'", ")", "[", "1", "]", "for", "lang_pair", "in", "task", ".", "model_lang_pairs", "]", "\n", "\n", "if", "args", ".", "share_encoders", ":", "\n", "            ", "args", ".", "share_encoder_embeddings", "=", "True", "\n", "", "if", "args", ".", "share_decoders", ":", "\n", "            ", "args", ".", "share_decoder_embeddings", "=", "True", "\n", "\n", "", "def", "build_embedding", "(", "dictionary", ",", "embed_dim", ",", "path", "=", "None", ")", ":", "\n", "            ", "num_embeddings", "=", "len", "(", "dictionary", ")", "\n", "padding_idx", "=", "dictionary", ".", "pad", "(", ")", "\n", "emb", "=", "Embedding", "(", "num_embeddings", ",", "embed_dim", ",", "padding_idx", ")", "\n", "# if provided, load from preloaded dictionaries", "\n", "if", "path", ":", "\n", "                ", "embed_dict", "=", "utils", ".", "parse_embedding", "(", "path", ")", "\n", "utils", ".", "load_embedding", "(", "embed_dict", ",", "dictionary", ",", "emb", ")", "\n", "", "return", "emb", "\n", "\n", "# build shared embeddings (if applicable)", "\n", "", "shared_encoder_embed_tokens", ",", "shared_decoder_embed_tokens", "=", "None", ",", "None", "\n", "if", "args", ".", "share_all_embeddings", ":", "\n", "            ", "if", "args", ".", "encoder_embed_dim", "!=", "args", ".", "decoder_embed_dim", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "'--share-all-embeddings requires --encoder-embed-dim to match --decoder-embed-dim'", ")", "\n", "", "if", "args", ".", "decoder_embed_path", "and", "(", "\n", "args", ".", "decoder_embed_path", "!=", "args", ".", "encoder_embed_path", ")", ":", "\n", "                ", "raise", "ValueError", "(", "'--share-all-embeddings not compatible with --decoder-embed-path'", ")", "\n", "", "shared_encoder_embed_tokens", "=", "FairseqMultiModel", ".", "build_shared_embeddings", "(", "\n", "dicts", "=", "task", ".", "dicts", ",", "\n", "langs", "=", "task", ".", "langs", ",", "\n", "embed_dim", "=", "args", ".", "encoder_embed_dim", ",", "\n", "build_embedding", "=", "build_embedding", ",", "\n", "pretrained_embed_path", "=", "args", ".", "encoder_embed_path", ",", "\n", ")", "\n", "shared_decoder_embed_tokens", "=", "shared_encoder_embed_tokens", "\n", "args", ".", "share_decoder_input_output_embed", "=", "True", "\n", "", "else", ":", "\n", "            ", "if", "args", ".", "share_encoder_embeddings", ":", "\n", "                ", "shared_encoder_embed_tokens", "=", "(", "\n", "FairseqMultiModel", ".", "build_shared_embeddings", "(", "\n", "dicts", "=", "task", ".", "dicts", ",", "\n", "langs", "=", "src_langs", ",", "\n", "embed_dim", "=", "args", ".", "encoder_embed_dim", ",", "\n", "build_embedding", "=", "build_embedding", ",", "\n", "pretrained_embed_path", "=", "args", ".", "encoder_embed_path", ",", "\n", ")", "\n", ")", "\n", "", "if", "args", ".", "share_decoder_embeddings", ":", "\n", "                ", "shared_decoder_embed_tokens", "=", "(", "\n", "FairseqMultiModel", ".", "build_shared_embeddings", "(", "\n", "dicts", "=", "task", ".", "dicts", ",", "\n", "langs", "=", "tgt_langs", ",", "\n", "embed_dim", "=", "args", ".", "decoder_embed_dim", ",", "\n", "build_embedding", "=", "build_embedding", ",", "\n", "pretrained_embed_path", "=", "args", ".", "decoder_embed_path", ",", "\n", ")", "\n", ")", "\n", "\n", "# encoders/decoders for each language", "\n", "", "", "lang_encoders", ",", "lang_decoders", "=", "{", "}", ",", "{", "}", "\n", "\n", "def", "get_encoder", "(", "lang", ")", ":", "\n", "            ", "if", "lang", "not", "in", "lang_encoders", ":", "\n", "                ", "if", "shared_encoder_embed_tokens", "is", "not", "None", ":", "\n", "                    ", "encoder_embed_tokens", "=", "shared_encoder_embed_tokens", "\n", "", "else", ":", "\n", "                    ", "encoder_embed_tokens", "=", "build_embedding", "(", "\n", "task", ".", "dicts", "[", "lang", "]", ",", "args", ".", "encoder_embed_dim", ",", "args", ".", "encoder_embed_path", "\n", ")", "\n", "", "lang_encoders", "[", "lang", "]", "=", "TransformerEncoder", "(", "args", ",", "task", ".", "dicts", "[", "lang", "]", ",", "encoder_embed_tokens", ")", "\n", "", "return", "lang_encoders", "[", "lang", "]", "\n", "\n", "", "def", "get_decoder", "(", "lang", ")", ":", "\n", "            ", "if", "lang", "not", "in", "lang_decoders", ":", "\n", "                ", "if", "shared_decoder_embed_tokens", "is", "not", "None", ":", "\n", "                    ", "decoder_embed_tokens", "=", "shared_decoder_embed_tokens", "\n", "", "else", ":", "\n", "                    ", "decoder_embed_tokens", "=", "build_embedding", "(", "\n", "task", ".", "dicts", "[", "lang", "]", ",", "args", ".", "decoder_embed_dim", ",", "args", ".", "decoder_embed_path", "\n", ")", "\n", "", "lang_decoders", "[", "lang", "]", "=", "TransformerDecoder", "(", "args", ",", "task", ".", "dicts", "[", "lang", "]", ",", "decoder_embed_tokens", ")", "\n", "", "return", "lang_decoders", "[", "lang", "]", "\n", "\n", "# shared encoders/decoders (if applicable)", "\n", "", "shared_encoder", ",", "shared_decoder", "=", "None", ",", "None", "\n", "if", "args", ".", "share_encoders", ":", "\n", "            ", "shared_encoder", "=", "get_encoder", "(", "src_langs", "[", "0", "]", ")", "\n", "", "if", "args", ".", "share_decoders", ":", "\n", "            ", "shared_decoder", "=", "get_decoder", "(", "tgt_langs", "[", "0", "]", ")", "\n", "\n", "", "encoders", ",", "decoders", "=", "OrderedDict", "(", ")", ",", "OrderedDict", "(", ")", "\n", "for", "lang_pair", ",", "src", ",", "tgt", "in", "zip", "(", "task", ".", "model_lang_pairs", ",", "src_langs", ",", "tgt_langs", ")", ":", "\n", "            ", "encoders", "[", "lang_pair", "]", "=", "shared_encoder", "if", "shared_encoder", "is", "not", "None", "else", "get_encoder", "(", "src", ")", "\n", "decoders", "[", "lang_pair", "]", "=", "shared_decoder", "if", "shared_decoder", "is", "not", "None", "else", "get_decoder", "(", "tgt", ")", "\n", "\n", "", "return", "MultilingualTransformerModel", "(", "encoders", ",", "decoders", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.multilingual_transformer.MultilingualTransformerModel.load_state_dict": [[167, 175], ["state_dict.copy", "state_dict.items", "super().load_state_dict", "k.startswith", "k.split"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.copy", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ",", "strict", "=", "True", ",", "args", "=", "None", ")", ":", "\n", "        ", "state_dict_subset", "=", "state_dict", ".", "copy", "(", ")", "\n", "for", "k", ",", "_", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "assert", "k", ".", "startswith", "(", "'models.'", ")", "\n", "lang_pair", "=", "k", ".", "split", "(", "'.'", ")", "[", "1", "]", "\n", "if", "lang_pair", "not", "in", "self", ".", "models", ":", "\n", "                ", "del", "state_dict_subset", "[", "k", "]", "\n", "", "", "super", "(", ")", ".", "load_state_dict", "(", "state_dict_subset", ",", "strict", "=", "strict", ",", "args", "=", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.multilingual_transformer.base_multilingual_architecture": [[177, 184], ["fairseq.models.register_model_architecture", "fairseq.models.transformer.base_architecture", "getattr", "getattr", "getattr", "getattr"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.base_architecture"], ["", "", "@", "register_model_architecture", "(", "'multilingual_transformer'", ",", "'multilingual_transformer'", ")", "\n", "def", "base_multilingual_architecture", "(", "args", ")", ":", "\n", "    ", "base_architecture", "(", "args", ")", "\n", "args", ".", "share_encoder_embeddings", "=", "getattr", "(", "args", ",", "'share_encoder_embeddings'", ",", "False", ")", "\n", "args", ".", "share_decoder_embeddings", "=", "getattr", "(", "args", ",", "'share_decoder_embeddings'", ",", "False", ")", "\n", "args", ".", "share_encoders", "=", "getattr", "(", "args", ",", "'share_encoders'", ",", "False", ")", "\n", "args", ".", "share_decoders", "=", "getattr", "(", "args", ",", "'share_decoders'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.multilingual_transformer.multilingual_transformer_iwslt_de_en": [[186, 197], ["fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "multilingual_transformer.base_multilingual_architecture"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.multilingual_transformer.base_multilingual_architecture"], ["", "@", "register_model_architecture", "(", "'multilingual_transformer'", ",", "'multilingual_transformer_iwslt_de_en'", ")", "\n", "def", "multilingual_transformer_iwslt_de_en", "(", "args", ")", ":", "\n", "    ", "args", ".", "encoder_embed_dim", "=", "getattr", "(", "args", ",", "'encoder_embed_dim'", ",", "512", ")", "\n", "args", ".", "encoder_ffn_embed_dim", "=", "getattr", "(", "args", ",", "'encoder_ffn_embed_dim'", ",", "1024", ")", "\n", "args", ".", "encoder_attention_heads", "=", "getattr", "(", "args", ",", "'encoder_attention_heads'", ",", "4", ")", "\n", "args", ".", "encoder_layers", "=", "getattr", "(", "args", ",", "'encoder_layers'", ",", "6", ")", "\n", "args", ".", "decoder_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_embed_dim'", ",", "512", ")", "\n", "args", ".", "decoder_ffn_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_ffn_embed_dim'", ",", "1024", ")", "\n", "args", ".", "decoder_attention_heads", "=", "getattr", "(", "args", ",", "'decoder_attention_heads'", ",", "4", ")", "\n", "args", ".", "decoder_layers", "=", "getattr", "(", "args", ",", "'decoder_layers'", ",", "6", ")", "\n", "base_multilingual_architecture", "(", "args", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lightconv_lm.LightConvLanguageModel.__init__": [[24, 26], ["fairseq.models.FairseqLanguageModel.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["    ", "def", "__init__", "(", "self", ",", "decoder", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "decoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lightconv_lm.LightConvLanguageModel.add_args": [[27, 96], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "fairseq.options.eval_str_list"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.eval_str_list"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add model-specific arguments to the parser.\"\"\"", "\n", "parser", ".", "add_argument", "(", "'--dropout'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'dropout probability'", ")", "\n", "parser", ".", "add_argument", "(", "'--attention-dropout'", ",", "default", "=", "0.", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'dropout probability for attention weights'", ")", "\n", "parser", ".", "add_argument", "(", "'--relu-dropout'", ",", "default", "=", "0.", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'dropout probability after ReLU in FFN'", ")", "\n", "parser", ".", "add_argument", "(", "'--input-dropout'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'dropout probability of the inputs'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-embed-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'decoder embedding dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-output-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'decoder output dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-input-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'decoder input dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-ffn-embed-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'decoder embedding dimension for FFN'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-layers'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'num decoder layers'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-attention-heads'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'num decoder attention heads or LightConv/DynamicConv heads'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-normalize-before'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'apply layernorm before each decoder block'", ")", "\n", "parser", ".", "add_argument", "(", "'--adaptive-softmax-cutoff'", ",", "metavar", "=", "'EXPR'", ",", "\n", "help", "=", "'comma separated list of adaptive softmax cutoff points. '", "\n", "'Must be used with adaptive_loss criterion'", ")", "\n", "parser", ".", "add_argument", "(", "'--adaptive-softmax-dropout'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'sets adaptive softmax dropout for the tail projections'", ")", "\n", "parser", ".", "add_argument", "(", "'--adaptive-softmax-factor'", ",", "type", "=", "float", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'adaptive input factor'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-token-positional-embeddings'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'if set, disables positional embeddings (outside self attention)'", ")", "\n", "parser", ".", "add_argument", "(", "'--share-decoder-input-output-embed'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'share decoder input and output embeddings'", ")", "\n", "parser", ".", "add_argument", "(", "'--character-embeddings'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'if set, uses character embedding convolutions to produce token embeddings'", ")", "\n", "parser", ".", "add_argument", "(", "'--character-filters'", ",", "type", "=", "str", ",", "metavar", "=", "'LIST'", ",", "\n", "default", "=", "'[(1, 64), (2, 128), (3, 192), (4, 256), (5, 256), (6, 256), (7, 256)]'", ",", "\n", "help", "=", "'size of character embeddings'", ")", "\n", "parser", ".", "add_argument", "(", "'--character-embedding-dim'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "default", "=", "4", ",", "\n", "help", "=", "'size of character embeddings'", ")", "\n", "parser", ".", "add_argument", "(", "'--char-embedder-highway-layers'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "default", "=", "2", ",", "\n", "help", "=", "'number of highway layers for character token embeddder'", ")", "\n", "parser", ".", "add_argument", "(", "'--adaptive-input'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'if set, uses adaptive input'", ")", "\n", "parser", ".", "add_argument", "(", "'--adaptive-input-factor'", ",", "type", "=", "float", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'adaptive input factor'", ")", "\n", "parser", ".", "add_argument", "(", "'--adaptive-input-cutoff'", ",", "metavar", "=", "'EXPR'", ",", "\n", "help", "=", "'comma separated list of adaptive input cutoff points.'", ")", "\n", "parser", ".", "add_argument", "(", "'--tie-adaptive-weights'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'if set, ties the weights of adaptive softmax and adaptive input'", ")", "\n", "parser", ".", "add_argument", "(", "'--tie-adaptive-proj'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'if set, ties the projection weights of adaptive softmax and adaptive input'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-learned-pos'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use learned positional embeddings in the decoder'", ")", "\n", "\n", "\"\"\"LightConv and DynamicConv arguments\"\"\"", "\n", "parser", ".", "add_argument", "(", "'--decoder-kernel-size-list'", ",", "type", "=", "lambda", "x", ":", "options", ".", "eval_str_list", "(", "x", ",", "int", ")", ",", "\n", "help", "=", "'list of kernel size (default: \"[3,7,15,31,31,31]\")'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-glu'", ",", "type", "=", "options", ".", "eval_bool", ",", "\n", "help", "=", "'glu after in proj'", ")", "\n", "parser", ".", "add_argument", "(", "'--decoder-conv-type'", ",", "default", "=", "'dynamic'", ",", "type", "=", "str", ",", "\n", "choices", "=", "[", "'dynamic'", ",", "'lightweight'", "]", ",", "\n", "help", "=", "'type of convolution'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight-softmax'", ",", "default", "=", "True", ",", "type", "=", "options", ".", "eval_bool", ")", "\n", "parser", ".", "add_argument", "(", "'--weight-dropout'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'dropout probability for conv weights'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lightconv_lm.LightConvLanguageModel.build_model": [[97, 131], ["lightconv_lm.base_lm_architecture", "fairseq.models.lightconv.LightConvDecoder", "lightconv_lm.LightConvLanguageModel", "getattr", "getattr", "fairseq.modules.CharacterTokenEmbedder", "eval", "fairseq.modules.AdaptiveInput", "fairseq.models.lightconv.Embedding", "len", "task.dictionary.pad", "fairseq.options.eval_str_list", "len", "task.dictionary.pad"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lightconv_lm.base_lm_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.Embedding", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.eval_str_list", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad"], ["", "@", "classmethod", "\n", "def", "build_model", "(", "cls", ",", "args", ",", "task", ")", ":", "\n", "        ", "\"\"\"Build a new model instance.\"\"\"", "\n", "\n", "# make sure all arguments are present in older models", "\n", "base_lm_architecture", "(", "args", ")", "\n", "\n", "if", "getattr", "(", "args", ",", "'max_source_positions'", ",", "None", ")", "is", "None", ":", "\n", "            ", "args", ".", "max_source_positions", "=", "args", ".", "tokens_per_sample", "\n", "", "if", "getattr", "(", "args", ",", "'max_target_positions'", ",", "None", ")", "is", "None", ":", "\n", "            ", "args", ".", "max_target_positions", "=", "args", ".", "tokens_per_sample", "\n", "\n", "", "if", "args", ".", "character_embeddings", ":", "\n", "            ", "embed_tokens", "=", "CharacterTokenEmbedder", "(", "task", ".", "dictionary", ",", "eval", "(", "args", ".", "character_filters", ")", ",", "\n", "args", ".", "character_embedding_dim", ",", "\n", "args", ".", "decoder_embed_dim", ",", "\n", "args", ".", "char_embedder_highway_layers", ",", "\n", ")", "\n", "", "elif", "args", ".", "adaptive_input", ":", "\n", "            ", "embed_tokens", "=", "AdaptiveInput", "(", "len", "(", "task", ".", "dictionary", ")", ",", "task", ".", "dictionary", ".", "pad", "(", ")", ",", "args", ".", "decoder_input_dim", ",", "\n", "args", ".", "adaptive_input_factor", ",", "args", ".", "decoder_embed_dim", ",", "\n", "options", ".", "eval_str_list", "(", "args", ".", "adaptive_input_cutoff", ",", "type", "=", "int", ")", ")", "\n", "", "else", ":", "\n", "            ", "embed_tokens", "=", "Embedding", "(", "len", "(", "task", ".", "dictionary", ")", ",", "args", ".", "decoder_input_dim", ",", "task", ".", "dictionary", ".", "pad", "(", ")", ")", "\n", "\n", "", "if", "args", ".", "tie_adaptive_weights", ":", "\n", "            ", "assert", "args", ".", "adaptive_input", "\n", "assert", "args", ".", "adaptive_input_factor", "==", "args", ".", "adaptive_softmax_factor", "\n", "assert", "args", ".", "adaptive_softmax_cutoff", "==", "args", ".", "adaptive_input_cutoff", ",", "'{} != {}'", ".", "format", "(", "\n", "args", ".", "adaptive_softmax_cutoff", ",", "args", ".", "adaptive_input_cutoff", ")", "\n", "assert", "args", ".", "decoder_input_dim", "==", "args", ".", "decoder_output_dim", "\n", "\n", "", "decoder", "=", "LightConvDecoder", "(", "args", ",", "task", ".", "output_dictionary", ",", "embed_tokens", ",", "no_encoder_attn", "=", "True", ",", "final_norm", "=", "False", ")", "\n", "return", "LightConvLanguageModel", "(", "decoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lightconv_lm.base_lm_architecture": [[133, 167], ["fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "len", "len"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture"], ["", "", "@", "register_model_architecture", "(", "'lightconv_lm'", ",", "'lightconv_lm'", ")", "\n", "def", "base_lm_architecture", "(", "args", ")", ":", "\n", "    ", "args", ".", "decoder_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_embed_dim'", ",", "512", ")", "\n", "args", ".", "decoder_ffn_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_ffn_embed_dim'", ",", "2048", ")", "\n", "args", ".", "decoder_layers", "=", "getattr", "(", "args", ",", "'decoder_layers'", ",", "6", ")", "\n", "args", ".", "decoder_attention_heads", "=", "getattr", "(", "args", ",", "'decoder_attention_heads'", ",", "8", ")", "\n", "args", ".", "adaptive_softmax_cutoff", "=", "getattr", "(", "args", ",", "'adaptive_softmax_cutoff'", ",", "None", ")", "\n", "args", ".", "adaptive_softmax_dropout", "=", "getattr", "(", "args", ",", "'adaptive_softmax_dropout'", ",", "0", ")", "\n", "args", ".", "adaptive_softmax_factor", "=", "getattr", "(", "args", ",", "'adaptive_softmax_factor'", ",", "4", ")", "\n", "args", ".", "decoder_learned_pos", "=", "getattr", "(", "args", ",", "'decoder_learned_pos'", ",", "False", ")", "\n", "\n", "args", ".", "character_embeddings", "=", "getattr", "(", "args", ",", "'character_embeddings'", ",", "False", ")", "\n", "\n", "args", ".", "decoder_output_dim", "=", "getattr", "(", "args", ",", "'decoder_output_dim'", ",", "args", ".", "decoder_embed_dim", ")", "\n", "args", ".", "decoder_input_dim", "=", "getattr", "(", "args", ",", "'decoder_input_dim'", ",", "args", ".", "decoder_embed_dim", ")", "\n", "args", ".", "decoder_conv_dim", "=", "getattr", "(", "args", ",", "'decoder_conv_dim'", ",", "args", ".", "decoder_embed_dim", ")", "\n", "\n", "# The model training is not stable without this", "\n", "args", ".", "decoder_normalize_before", "=", "True", "\n", "\n", "args", ".", "adaptive_input", "=", "getattr", "(", "args", ",", "'adaptive_input'", ",", "False", ")", "\n", "args", ".", "adaptive_input_factor", "=", "getattr", "(", "args", ",", "'adaptive_input_factor'", ",", "4", ")", "\n", "args", ".", "adaptive_input_cutoff", "=", "getattr", "(", "args", ",", "'adaptive_input_cutoff'", ",", "None", ")", "\n", "\n", "args", ".", "tie_adaptive_weights", "=", "getattr", "(", "args", ",", "'tie_adaptive_weights'", ",", "False", ")", "\n", "args", ".", "tie_adaptive_proj", "=", "getattr", "(", "args", ",", "'tie_adaptive_proj'", ",", "False", ")", "\n", "\n", "args", ".", "decoder_kernel_size_list", "=", "getattr", "(", "args", ",", "'decoder_kernel_size_list'", ",", "[", "3", ",", "7", ",", "15", ",", "31", ",", "31", ",", "31", "]", ")", "\n", "if", "len", "(", "args", ".", "decoder_kernel_size_list", ")", "==", "1", ":", "\n", "        ", "args", ".", "decoder_kernel_size_list", "=", "args", ".", "decoder_kernel_size_list", "*", "args", ".", "decoder_layers", "\n", "", "assert", "len", "(", "args", ".", "decoder_kernel_size_list", ")", "==", "args", ".", "decoder_layers", ",", "\"decoder_kernel_size_list doesn't match decoder_layers\"", "\n", "args", ".", "decoder_glu", "=", "getattr", "(", "args", ",", "'decoder_glu'", ",", "True", ")", "\n", "args", ".", "input_dropout", "=", "getattr", "(", "args", ",", "'input_dropout'", ",", "0.1", ")", "\n", "args", ".", "weight_dropout", "=", "getattr", "(", "args", ",", "'weight_dropout'", ",", "args", ".", "attention_dropout", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lightconv_lm.lightconv_lm_gbw": [[169, 177], ["fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "lightconv_lm.base_lm_architecture"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.lightconv_lm.base_lm_architecture"], ["", "@", "register_model_architecture", "(", "'lightconv_lm'", ",", "'lightconv_lm_gbw'", ")", "\n", "def", "lightconv_lm_gbw", "(", "args", ")", ":", "\n", "    ", "args", ".", "decoder_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_embed_dim'", ",", "512", ")", "\n", "args", ".", "dropout", "=", "getattr", "(", "args", ",", "'dropout'", ",", "0.1", ")", "\n", "args", ".", "attention_dropout", "=", "getattr", "(", "args", ",", "'attention_dropout'", ",", "0.1", ")", "\n", "args", ".", "decoder_ffn_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_ffn_embed_dim'", ",", "4096", ")", "\n", "args", ".", "decoder_attention_heads", "=", "getattr", "(", "args", ",", "'decoder_attention_heads'", ",", "16", ")", "\n", "base_lm_architecture", "(", "args", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.distributed_fairseq_model.DistributedFairseqModel": [[14, 67], ["isinstance", "_DistributedFairseqModel", "dict", "dict", "ValueError", "super().__init__", "super().__getattr__", "hasattr", "super().__getattr__", "inspect.getargspec", "inspect.getargspec", "getattr"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["def", "DistributedFairseqModel", "(", "args", ",", "model", ")", ":", "\n", "    ", "\"\"\"\n    Wrap a *model* to support distributed data parallel training.\n\n    This is similar to the built-in DistributedDataParallel, but allows\n    additional configuration of the DistributedDataParallel class to\n    use, and also provides easier access to the wrapped model by\n    forwarding requests for missing attributes to the wrapped model.\n\n    Args:\n        args (argparse.Namespace): fairseq args\n        model (BaseFairseqModel): model to wrap\n    \"\"\"", "\n", "# determine which DDP class to extend", "\n", "assert", "isinstance", "(", "model", ",", "nn", ".", "Module", ")", "\n", "if", "args", ".", "ddp_backend", "==", "'c10d'", ":", "\n", "        ", "ddp_class", "=", "nn", ".", "parallel", ".", "DistributedDataParallel", "\n", "init_kwargs", "=", "dict", "(", "\n", "module", "=", "model", ",", "\n", "device_ids", "=", "[", "args", ".", "device_id", "]", ",", "\n", "output_device", "=", "args", ".", "device_id", ",", "\n", "broadcast_buffers", "=", "args", ".", "broadcast_buffers", ",", "\n", "bucket_cap_mb", "=", "args", ".", "bucket_cap_mb", ",", "\n", ")", "\n", "# Maintain backward compatibility", "\n", "if", "'check_reduction'", "in", "inspect", ".", "getargspec", "(", "ddp_class", ")", "[", "0", "]", ":", "\n", "            ", "init_kwargs", "[", "'check_reduction'", "]", "=", "True", "\n", "", "if", "'find_unused_parameters'", "in", "inspect", ".", "getargspec", "(", "ddp_class", ")", "[", "0", "]", ":", "\n", "            ", "init_kwargs", "[", "'find_unused_parameters'", "]", "=", "args", ".", "find_unused_parameters", "\n", "", "", "elif", "args", ".", "ddp_backend", "==", "'no_c10d'", ":", "\n", "        ", "ddp_class", "=", "LegacyDistributedDataParallel", "\n", "init_kwargs", "=", "dict", "(", "\n", "module", "=", "model", ",", "\n", "world_size", "=", "args", ".", "distributed_world_size", ",", "\n", "buffer_size", "=", "2", "**", "28", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Unknown --ddp-backend: '", "+", "args", ".", "ddp_backend", ")", "\n", "\n", "", "class", "_DistributedFairseqModel", "(", "ddp_class", ")", ":", "\n", "        ", "\"\"\"Extend DistributedDataParallel to check for missing\n        attributes in the wrapped module.\"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "            ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "            ", "wrapped_module", "=", "super", "(", ")", ".", "__getattr__", "(", "'module'", ")", "\n", "if", "hasattr", "(", "wrapped_module", ",", "name", ")", ":", "\n", "                ", "return", "getattr", "(", "wrapped_module", ",", "name", ")", "\n", "", "return", "super", "(", ")", ".", "__getattr__", "(", "name", ")", "\n", "\n", "", "", "return", "_DistributedFairseqModel", "(", "**", "init_kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.CTC_loss.CTCCriterion.__init__": [[79, 84], ["fairseq.criterions.FairseqCriterion.__init__", "task.target_dictionary.index", "task.target_dictionary.pad"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.index", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "task", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "task", ")", "\n", "self", ".", "blank_idx", "=", "task", ".", "target_dictionary", ".", "index", "(", "\"<ctc_blank>\"", ")", "\n", "self", ".", "pad_idx", "=", "task", ".", "target_dictionary", ".", "pad", "(", ")", "\n", "self", ".", "task", "=", "task", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.CTC_loss.CTCCriterion.add_args": [[85, 95], ["parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "parser", ".", "add_argument", "(", "\n", "\"--use-source-side-sample-size\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "(", "\n", "\"when compute average loss, using number of source tokens \"", "\n", "+", "\"as denominator. \"", "\n", "+", "\"This argument will be no-op if sentence-avg is used.\"", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.CTC_loss.CTCCriterion.forward": [[98, 173], ["model", "model.get_normalized_probs", "getattr", "examples.speech_recognition.data.data_utils.encoder_padding_mask_to_lengths", "targets.masked_select", "torch.ctc_loss", "torch.ctc_loss", "lprobs.transpose.transpose.transpose", "CTC_loss.compute_ctc_uer", "hasattr", "logging.warning", "lprobs.transpose.transpose.size", "lprobs.transpose.transpose.size", "lprobs.transpose.transpose.size", "lprobs.transpose.transpose.size", "lprobs.transpose.transpose.transpose", "sample[].size", "sample[].size", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "fairseq.utils.item", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.get_normalized_probs", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.encoder_padding_mask_to_lengths", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.CTC_loss.compute_ctc_uer", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item"], ["", "def", "forward", "(", "self", ",", "model", ",", "sample", ",", "reduce", "=", "True", ",", "log_probs", "=", "True", ")", ":", "\n", "        ", "\"\"\"Compute the loss for the given sample.\n\n        Returns a tuple with three elements:\n        1) the loss\n        2) the sample size, which is used as the denominator for the gradient\n        3) logging outputs to display while training\n        \"\"\"", "\n", "net_output", "=", "model", "(", "**", "sample", "[", "\"net_input\"", "]", ")", "\n", "lprobs", "=", "model", ".", "get_normalized_probs", "(", "net_output", ",", "log_probs", "=", "log_probs", ")", "\n", "if", "not", "hasattr", "(", "lprobs", ",", "\"batch_first\"", ")", ":", "\n", "            ", "logging", ".", "warning", "(", "\n", "\"ERROR: we need to know whether \"", "\n", "\"batch first for the encoder output; \"", "\n", "\"you need to set batch_first attribute for the return value of \"", "\n", "\"model.get_normalized_probs. Now, we assume this is true, but \"", "\n", "\"in the future, we will raise exception instead. \"", "\n", ")", "\n", "\n", "", "batch_first", "=", "getattr", "(", "lprobs", ",", "\"batch_first\"", ",", "True", ")", "\n", "\n", "if", "not", "batch_first", ":", "\n", "            ", "max_seq_len", "=", "lprobs", ".", "size", "(", "0", ")", "\n", "bsz", "=", "lprobs", ".", "size", "(", "1", ")", "\n", "", "else", ":", "\n", "            ", "max_seq_len", "=", "lprobs", ".", "size", "(", "1", ")", "\n", "bsz", "=", "lprobs", ".", "size", "(", "0", ")", "\n", "", "device", "=", "net_output", "[", "\"encoder_out\"", "]", ".", "device", "\n", "\n", "input_lengths", "=", "encoder_padding_mask_to_lengths", "(", "\n", "net_output", "[", "\"encoder_padding_mask\"", "]", ",", "max_seq_len", ",", "bsz", ",", "device", "\n", ")", "\n", "target_lengths", "=", "sample", "[", "\"target_lengths\"", "]", "\n", "targets", "=", "sample", "[", "\"target\"", "]", "\n", "\n", "if", "batch_first", ":", "\n", "# N T D -> T N D (F.ctc_loss expects this)", "\n", "            ", "lprobs", "=", "lprobs", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "", "pad_mask", "=", "sample", "[", "\"target\"", "]", "!=", "self", ".", "pad_idx", "\n", "targets_flat", "=", "targets", ".", "masked_select", "(", "pad_mask", ")", "\n", "\n", "loss", "=", "F", ".", "ctc_loss", "(", "\n", "lprobs", ",", "\n", "targets_flat", ",", "\n", "input_lengths", ",", "\n", "target_lengths", ",", "\n", "blank", "=", "self", ".", "blank_idx", ",", "\n", "reduction", "=", "\"sum\"", ",", "\n", "zero_infinity", "=", "True", ",", "\n", ")", "\n", "\n", "lprobs", "=", "lprobs", ".", "transpose", "(", "0", ",", "1", ")", "# T N D -> N T D", "\n", "errors", ",", "total", "=", "compute_ctc_uer", "(", "\n", "lprobs", ",", "targets", ",", "input_lengths", ",", "target_lengths", ",", "self", ".", "blank_idx", "\n", ")", "\n", "\n", "if", "self", ".", "args", ".", "sentence_avg", ":", "\n", "            ", "sample_size", "=", "sample", "[", "\"target\"", "]", ".", "size", "(", "0", ")", "\n", "", "else", ":", "\n", "            ", "if", "self", ".", "args", ".", "use_source_side_sample_size", ":", "\n", "                ", "sample_size", "=", "torch", ".", "sum", "(", "input_lengths", ")", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "                ", "sample_size", "=", "sample", "[", "\"ntokens\"", "]", "\n", "\n", "", "", "logging_output", "=", "{", "\n", "\"loss\"", ":", "utils", ".", "item", "(", "loss", ".", "data", ")", "if", "reduce", "else", "loss", ".", "data", ",", "\n", "\"ntokens\"", ":", "sample", "[", "\"ntokens\"", "]", ",", "\n", "\"nsentences\"", ":", "sample", "[", "\"target\"", "]", ".", "size", "(", "0", ")", ",", "\n", "\"sample_size\"", ":", "sample_size", ",", "\n", "\"errors\"", ":", "errors", ",", "\n", "\"total\"", ":", "total", ",", "\n", "\"nframes\"", ":", "torch", ".", "sum", "(", "sample", "[", "\"net_input\"", "]", "[", "\"src_lengths\"", "]", ")", ".", "item", "(", ")", ",", "\n", "}", "\n", "return", "loss", ",", "sample_size", ",", "logging_output", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.CTC_loss.CTCCriterion.aggregate_logging_outputs": [[174, 195], ["sum", "sum", "sum", "sum", "sum", "sum", "sum", "log.get", "log.get", "log.get", "log.get", "log.get", "log.get", "log.get", "math.log", "min", "math.log"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log"], ["", "@", "staticmethod", "\n", "def", "aggregate_logging_outputs", "(", "logging_outputs", ")", ":", "\n", "        ", "\"\"\"Aggregate logging outputs from data parallel training.\"\"\"", "\n", "loss_sum", "=", "sum", "(", "log", ".", "get", "(", "\"loss\"", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", "\n", "ntokens", "=", "sum", "(", "log", ".", "get", "(", "\"ntokens\"", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", "\n", "nsentences", "=", "sum", "(", "log", ".", "get", "(", "\"nsentences\"", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", "\n", "sample_size", "=", "sum", "(", "log", ".", "get", "(", "\"sample_size\"", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", "\n", "errors", "=", "sum", "(", "log", ".", "get", "(", "\"errors\"", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", "\n", "total", "=", "sum", "(", "log", ".", "get", "(", "\"total\"", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", "\n", "nframes", "=", "sum", "(", "log", ".", "get", "(", "\"nframes\"", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", "\n", "agg_output", "=", "{", "\n", "\"loss\"", ":", "loss_sum", "/", "sample_size", "/", "math", ".", "log", "(", "2", ")", ",", "\n", "\"ntokens\"", ":", "ntokens", ",", "\n", "\"nsentences\"", ":", "nsentences", ",", "\n", "\"nframes\"", ":", "nframes", ",", "\n", "\"sample_size\"", ":", "sample_size", ",", "\n", "\"acc\"", ":", "100.0", "-", "min", "(", "errors", "*", "100.0", "/", "total", ",", "100.0", ")", ",", "\n", "}", "\n", "if", "sample_size", "!=", "ntokens", ":", "\n", "            ", "agg_output", "[", "\"nll_loss\"", "]", "=", "loss_sum", "/", "ntokens", "/", "math", ".", "log", "(", "2", ")", "\n", "", "return", "agg_output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.CTC_loss.arr_to_toks": [[24, 29], ["toks.append", "examples.speech_recognition.utils.wer_utils.Token", "str"], "function", ["None"], ["def", "arr_to_toks", "(", "arr", ")", ":", "\n", "    ", "toks", "=", "[", "]", "\n", "for", "a", "in", "arr", ":", "\n", "        ", "toks", ".", "append", "(", "Token", "(", "str", "(", "a", ")", ",", "0.0", ",", "0.0", ")", ")", "\n", "", "return", "toks", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.CTC_loss.compute_ctc_uer": [[31, 75], ["range", "[].argmax().tolist", "[].tolist", "examples.speech_recognition.utils.wer_utils.EditDistance().align", "len", "CTC_loss.arr_to_toks", "CTC_loss.arr_to_toks", "[].argmax", "itertools.groupby", "nonblanks.append", "examples.speech_recognition.utils.wer_utils.EditDistance"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.utils.wer_utils.EditDistance.align", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.CTC_loss.arr_to_toks", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.CTC_loss.arr_to_toks"], ["", "def", "compute_ctc_uer", "(", "logprobs", ",", "targets", ",", "input_lengths", ",", "target_lengths", ",", "blank_idx", ")", ":", "\n", "    ", "\"\"\"\n        Computes utterance error rate for CTC outputs\n\n        Args:\n            logprobs: (Torch.tensor)  N, T1, D tensor of log probabilities out\n                of the encoder\n            targets: (Torch.tensor) N, T2 tensor of targets\n            input_lengths: (Torch.tensor) lengths of inputs for each sample\n            target_lengths: (Torch.tensor) lengths of targets for each sample\n            blank_idx: (integer) id of blank symbol in target dictionary\n\n        Returns:\n            batch_errors: (float) errors in the batch\n            batch_total: (float)  total number of valid samples in batch\n    \"\"\"", "\n", "batch_errors", "=", "0.0", "\n", "batch_total", "=", "0.0", "\n", "for", "b", "in", "range", "(", "logprobs", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "predicted", "=", "logprobs", "[", "b", "]", "[", ":", "input_lengths", "[", "b", "]", "]", ".", "argmax", "(", "1", ")", ".", "tolist", "(", ")", "\n", "target", "=", "targets", "[", "b", "]", "[", ":", "target_lengths", "[", "b", "]", "]", ".", "tolist", "(", ")", "\n", "# dedup predictions", "\n", "predicted", "=", "[", "p", "[", "0", "]", "for", "p", "in", "groupby", "(", "predicted", ")", "]", "\n", "# remove blanks", "\n", "nonblanks", "=", "[", "]", "\n", "for", "p", "in", "predicted", ":", "\n", "            ", "if", "p", "!=", "blank_idx", ":", "\n", "                ", "nonblanks", ".", "append", "(", "p", ")", "\n", "", "", "predicted", "=", "nonblanks", "\n", "\n", "# compute the alignment based on EditDistance", "\n", "alignment", "=", "EditDistance", "(", "False", ")", ".", "align", "(", "\n", "arr_to_toks", "(", "predicted", ")", ",", "arr_to_toks", "(", "target", ")", "\n", ")", "\n", "\n", "# compute the number of errors", "\n", "# note that alignment.codes can also be used for computing", "\n", "# deletion, insersion and substitution error breakdowns in future", "\n", "for", "a", "in", "alignment", ".", "codes", ":", "\n", "            ", "if", "a", "!=", "Code", ".", "match", ":", "\n", "                ", "batch_errors", "+=", "1", "\n", "", "", "batch_total", "+=", "len", "(", "target", ")", "\n", "\n", "", "return", "batch_errors", ",", "batch_total", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.cross_entropy_acc.CrossEntropyWithAccCriterion.__init__": [[19, 21], ["fairseq.criterions.FairseqCriterion.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "task", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "task", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.cross_entropy_acc.CrossEntropyWithAccCriterion.compute_loss": [[22, 44], ["target.view.view.view", "model.get_normalized_probs", "getattr", "lprobs.transpose.transpose.view", "torch.nll_loss", "torch.nll_loss", "hasattr", "logging.warning", "lprobs.transpose.transpose.transpose", "lprobs.transpose.transpose.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.get_normalized_probs", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "compute_loss", "(", "self", ",", "model", ",", "net_output", ",", "target", ",", "reduction", ",", "log_probs", ")", ":", "\n", "# N, T -> N * T", "\n", "        ", "target", "=", "target", ".", "view", "(", "-", "1", ")", "\n", "lprobs", "=", "model", ".", "get_normalized_probs", "(", "net_output", ",", "log_probs", "=", "log_probs", ")", "\n", "if", "not", "hasattr", "(", "lprobs", ",", "\"batch_first\"", ")", ":", "\n", "            ", "logging", ".", "warning", "(", "\n", "\"ERROR: we need to know whether \"", "\n", "\"batch first for the net output; \"", "\n", "\"you need to set batch_first attribute for the return value of \"", "\n", "\"model.get_normalized_probs. Now, we assume this is true, but \"", "\n", "\"in the future, we will raise exception instead. \"", "\n", ")", "\n", "", "batch_first", "=", "getattr", "(", "lprobs", ",", "\"batch_first\"", ",", "True", ")", "\n", "if", "not", "batch_first", ":", "\n", "            ", "lprobs", "=", "lprobs", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "# N, T, D -> N * T, D", "\n", "", "lprobs", "=", "lprobs", ".", "view", "(", "-", "1", ",", "lprobs", ".", "size", "(", "-", "1", ")", ")", "\n", "loss", "=", "F", ".", "nll_loss", "(", "\n", "lprobs", ",", "target", ",", "ignore_index", "=", "self", ".", "padding_idx", ",", "reduction", "=", "reduction", "\n", ")", "\n", "return", "lprobs", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.cross_entropy_acc.CrossEntropyWithAccCriterion.get_logging_output": [[45, 67], ["target.view.view.view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "sample[].size", "fairseq.utils.item", "sample[].size", "fairseq.utils.item", "fairseq.utils.item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.sum().item", "lprobs.argmax().masked_select", "target.view.view.masked_select", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "lprobs.argmax"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item"], ["", "def", "get_logging_output", "(", "self", ",", "sample", ",", "target", ",", "lprobs", ",", "loss", ")", ":", "\n", "        ", "target", "=", "target", ".", "view", "(", "-", "1", ")", "\n", "mask", "=", "target", "!=", "self", ".", "padding_idx", "\n", "correct", "=", "torch", ".", "sum", "(", "\n", "lprobs", ".", "argmax", "(", "1", ")", ".", "masked_select", "(", "mask", ")", "==", "target", ".", "masked_select", "(", "mask", ")", "\n", ")", "\n", "total", "=", "torch", ".", "sum", "(", "mask", ")", "\n", "sample_size", "=", "(", "\n", "sample", "[", "\"target\"", "]", ".", "size", "(", "0", ")", "if", "self", ".", "args", ".", "sentence_avg", "else", "sample", "[", "\"ntokens\"", "]", "\n", ")", "\n", "\n", "logging_output", "=", "{", "\n", "\"loss\"", ":", "utils", ".", "item", "(", "loss", ".", "data", ")", ",", "# * sample['ntokens'],", "\n", "\"ntokens\"", ":", "sample", "[", "\"ntokens\"", "]", ",", "\n", "\"nsentences\"", ":", "sample", "[", "\"target\"", "]", ".", "size", "(", "0", ")", ",", "\n", "\"sample_size\"", ":", "sample_size", ",", "\n", "\"correct\"", ":", "utils", ".", "item", "(", "correct", ".", "data", ")", ",", "\n", "\"total\"", ":", "utils", ".", "item", "(", "total", ".", "data", ")", ",", "\n", "\"nframes\"", ":", "torch", ".", "sum", "(", "sample", "[", "\"net_input\"", "]", "[", "\"src_lengths\"", "]", ")", ".", "item", "(", ")", ",", "\n", "}", "\n", "\n", "return", "sample_size", ",", "logging_output", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.cross_entropy_acc.CrossEntropyWithAccCriterion.forward": [[68, 100], ["model", "model.get_targets", "cross_entropy_acc.CrossEntropyWithAccCriterion.compute_loss", "cross_entropy_acc.CrossEntropyWithAccCriterion.get_logging_output"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.wav2vec.Wav2VecModel.get_targets", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.label_smoothed_cross_entropy.LabelSmoothedCrossEntropyCriterion.compute_loss", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.cross_entropy_acc.CrossEntropyWithAccCriterion.get_logging_output"], ["", "def", "forward", "(", "self", ",", "model", ",", "sample", ",", "reduction", "=", "\"sum\"", ",", "log_probs", "=", "True", ")", ":", "\n", "        ", "\"\"\"Computes the cross entropy with accuracy metric for the given sample.\n\n        This is similar to CrossEntropyCriterion in fairseq, but also\n        computes accuracy metrics as part of logging\n\n        Args:\n            logprobs (Torch.tensor) of shape N, T, D i.e.\n                batchsize, timesteps, dimensions\n            targets (Torch.tensor) of shape N, T  i.e batchsize, timesteps\n\n        Returns:\n        tuple: With three elements:\n            1) the loss\n            2) the sample size, which is used as the denominator for the gradient\n            3) logging outputs to display while training\n\n        TODO:\n            * Currently this Criterion will only work with LSTMEncoderModels or\n            FairseqModels which have decoder, or Models which return TorchTensor\n            as net_output.\n            We need to make a change to support all FairseqEncoder models.\n        \"\"\"", "\n", "net_output", "=", "model", "(", "**", "sample", "[", "\"net_input\"", "]", ")", "\n", "target", "=", "model", ".", "get_targets", "(", "sample", ",", "net_output", ")", "\n", "lprobs", ",", "loss", "=", "self", ".", "compute_loss", "(", "\n", "model", ",", "net_output", ",", "target", ",", "reduction", ",", "log_probs", "\n", ")", "\n", "sample_size", ",", "logging_output", "=", "self", ".", "get_logging_output", "(", "\n", "sample", ",", "target", ",", "lprobs", ",", "loss", "\n", ")", "\n", "return", "loss", ",", "sample_size", ",", "logging_output", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.cross_entropy_acc.CrossEntropyWithAccCriterion.aggregate_logging_outputs": [[101, 130], ["sum", "sum", "sum", "sum", "sum", "sum", "sum", "log.get", "log.get", "log.get", "log.get", "log.get", "log.get", "log.get", "math.log", "math.log"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log"], ["", "@", "staticmethod", "\n", "def", "aggregate_logging_outputs", "(", "logging_outputs", ")", ":", "\n", "        ", "\"\"\"Aggregate logging outputs from data parallel training.\"\"\"", "\n", "correct_sum", "=", "sum", "(", "log", ".", "get", "(", "\"correct\"", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", "\n", "total_sum", "=", "sum", "(", "log", ".", "get", "(", "\"total\"", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", "\n", "loss_sum", "=", "sum", "(", "log", ".", "get", "(", "\"loss\"", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", "\n", "ntokens", "=", "sum", "(", "log", ".", "get", "(", "\"ntokens\"", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", "\n", "nsentences", "=", "sum", "(", "log", ".", "get", "(", "\"nsentences\"", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", "\n", "sample_size", "=", "sum", "(", "log", ".", "get", "(", "\"sample_size\"", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", "\n", "nframes", "=", "sum", "(", "log", ".", "get", "(", "\"nframes\"", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", "\n", "agg_output", "=", "{", "\n", "\"loss\"", ":", "loss_sum", "/", "sample_size", "/", "math", ".", "log", "(", "2", ")", "if", "sample_size", ">", "0", "else", "0.0", ",", "\n", "# if args.sentence_avg, then sample_size is nsentences, then loss", "\n", "# is per-sentence loss; else sample_size is ntokens, the loss", "\n", "# becomes per-output token loss", "\n", "\"ntokens\"", ":", "ntokens", ",", "\n", "\"nsentences\"", ":", "nsentences", ",", "\n", "\"nframes\"", ":", "nframes", ",", "\n", "\"sample_size\"", ":", "sample_size", ",", "\n", "\"acc\"", ":", "correct_sum", "*", "100.0", "/", "total_sum", "if", "total_sum", ">", "0", "else", "0.0", ",", "\n", "\"correct\"", ":", "correct_sum", ",", "\n", "\"total\"", ":", "total_sum", ",", "\n", "# total is the number of validate tokens", "\n", "}", "\n", "if", "sample_size", "!=", "ntokens", ":", "\n", "            ", "agg_output", "[", "\"nll_loss\"", "]", "=", "loss_sum", "/", "ntokens", "/", "math", ".", "log", "(", "2", ")", "\n", "# loss: per output token loss", "\n", "# nll_loss: per sentence loss", "\n", "", "return", "agg_output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.ASG_loss.ASGCriterion.add_args": [[21, 43], ["parser.add_argument_group", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument", "parser.add_argument_group.add_argument"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "group", "=", "parser", ".", "add_argument_group", "(", "\"ASG Loss\"", ")", "\n", "group", ".", "add_argument", "(", "\n", "\"--asg-transitions-init\"", ",", "\n", "help", "=", "\"initial diagonal value of transition matrix\"", ",", "\n", "type", "=", "float", ",", "\n", "default", "=", "0.0", ",", "\n", ")", "\n", "group", ".", "add_argument", "(", "\n", "\"--max-replabel\"", ",", "help", "=", "\"maximum # of replabels\"", ",", "type", "=", "int", ",", "default", "=", "2", "\n", ")", "\n", "group", ".", "add_argument", "(", "\n", "\"--linseg-updates\"", ",", "\n", "help", "=", "\"# of training updates to use LinSeg initialization\"", ",", "\n", "type", "=", "int", ",", "\n", "default", "=", "0", ",", "\n", ")", "\n", "group", ".", "add_argument", "(", "\n", "\"--hide-linseg-messages\"", ",", "\n", "help", "=", "\"hide messages about LinSeg initialization\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.ASG_loss.ASGCriterion.__init__": [[45, 67], ["fairseq.criterions.FairseqCriterion.__init__", "ASG_loss.ASGCriterion.tgt_dict.eos", "len", "wav2letter.criterion.ASGLoss", "torch.nn.Parameter", "torch.nn.Parameter", "ASG_loss.ASGCriterion.tgt_dict.index", "torch.tensor", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.index"], ["", "def", "__init__", "(", "self", ",", "args", ",", "task", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "task", ")", "\n", "self", ".", "tgt_dict", "=", "task", ".", "target_dictionary", "\n", "self", ".", "eos", "=", "self", ".", "tgt_dict", ".", "eos", "(", ")", "\n", "self", ".", "silence", "=", "(", "\n", "self", ".", "tgt_dict", ".", "index", "(", "args", ".", "silence_token", ")", "\n", "if", "args", ".", "silence_token", "in", "self", ".", "tgt_dict", "\n", "else", "None", "\n", ")", "\n", "self", ".", "max_replabel", "=", "args", ".", "max_replabel", "\n", "\n", "num_labels", "=", "len", "(", "self", ".", "tgt_dict", ")", "\n", "self", ".", "asg", "=", "ASGLoss", "(", "num_labels", ",", "scale_mode", "=", "CriterionScaleMode", ".", "TARGET_SZ_SQRT", ")", "\n", "self", ".", "asg", ".", "trans", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "args", ".", "asg_transitions_init", "*", "torch", ".", "eye", "(", "num_labels", ")", ",", "requires_grad", "=", "True", "\n", ")", "\n", "\n", "self", ".", "linseg_progress", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "torch", ".", "tensor", "(", "[", "0", "]", ",", "dtype", "=", "torch", ".", "int", ")", ",", "requires_grad", "=", "False", "\n", ")", "\n", "self", ".", "linseg_maximum", "=", "args", ".", "linseg_updates", "\n", "self", ".", "linseg_message_state", "=", "\"none\"", "if", "args", ".", "hide_linseg_messages", "else", "\"start\"", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.ASG_loss.ASGCriterion.linseg_step": [[68, 81], ["ASG_loss.ASGCriterion.linseg_progress.item", "ASG_loss.ASGCriterion.linseg_progress.add_", "print", "print"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], ["", "def", "linseg_step", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "training", ":", "\n", "            ", "return", "False", "\n", "", "if", "self", ".", "linseg_progress", ".", "item", "(", ")", "<", "self", ".", "linseg_maximum", ":", "\n", "            ", "if", "self", ".", "linseg_message_state", "==", "\"start\"", ":", "\n", "                ", "print", "(", "\"| using LinSeg to initialize ASG\"", ")", "\n", "self", ".", "linseg_message_state", "=", "\"finish\"", "\n", "", "self", ".", "linseg_progress", ".", "add_", "(", "1", ")", "\n", "return", "True", "\n", "", "elif", "self", ".", "linseg_message_state", "==", "\"finish\"", ":", "\n", "            ", "print", "(", "\"| finished LinSeg initialization\"", ")", "\n", "self", ".", "linseg_message_state", "=", "\"none\"", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.ASG_loss.ASGCriterion.replace_eos_with_silence": [[82, 89], ["len"], "methods", ["None"], ["", "def", "replace_eos_with_silence", "(", "self", ",", "tgt", ")", ":", "\n", "        ", "if", "tgt", "[", "-", "1", "]", "!=", "self", ".", "eos", ":", "\n", "            ", "return", "tgt", "\n", "", "elif", "self", ".", "silence", "is", "None", "or", "(", "len", "(", "tgt", ")", ">", "1", "and", "tgt", "[", "-", "2", "]", "==", "self", ".", "silence", ")", ":", "\n", "            ", "return", "tgt", "[", ":", "-", "1", "]", "\n", "", "else", ":", "\n", "            ", "return", "tgt", "[", ":", "-", "1", "]", "+", "[", "self", ".", "silence", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.ASG_loss.ASGCriterion.forward": [[90, 140], ["model", "net_output[].transpose().contiguous", "net_output[].transpose().contiguous.size", "net_output[].transpose().contiguous.size", "torch.IntTensor", "torch.IntTensor", "ASG_loss.ASGCriterion.linseg_step", "range", "ASG_loss.ASGCriterion.asg.forward", "[].item", "[].tolist", "ASG_loss.ASGCriterion.replace_eos_with_silence", "examples.speech_recognition.data.replabels.pack_replabels", "torch.IntTensor", "len", "torch.IntTensor.to", "torch.IntTensor.to", "torch.sum", "sample[].size", "sample[].size", "net_output[].transpose", "ValueError", "fairseq.utils.item", "len", "range", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.ASG_loss.ASGCriterion.linseg_step", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.forward", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.ASG_loss.ASGCriterion.replace_eos_with_silence", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.replabels.pack_replabels", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item"], ["", "", "def", "forward", "(", "self", ",", "model", ",", "sample", ",", "reduce", "=", "True", ")", ":", "\n", "        ", "\"\"\"Compute the loss for the given sample.\n\n        Returns a tuple with three elements:\n        1) the loss\n        2) the sample size, which is used as the denominator for the gradient\n        3) logging outputs to display while training\n        \"\"\"", "\n", "\n", "net_output", "=", "model", "(", "**", "sample", "[", "\"net_input\"", "]", ")", "\n", "emissions", "=", "net_output", "[", "\"encoder_out\"", "]", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "B", "=", "emissions", ".", "size", "(", "0", ")", "\n", "T", "=", "emissions", ".", "size", "(", "1", ")", "\n", "device", "=", "emissions", ".", "device", "\n", "\n", "target", "=", "torch", ".", "IntTensor", "(", "B", ",", "T", ")", "\n", "target_size", "=", "torch", ".", "IntTensor", "(", "B", ")", "\n", "using_linseg", "=", "self", ".", "linseg_step", "(", ")", "\n", "\n", "for", "b", "in", "range", "(", "B", ")", ":", "\n", "            ", "initial_target_size", "=", "sample", "[", "\"target_lengths\"", "]", "[", "b", "]", ".", "item", "(", ")", "\n", "if", "initial_target_size", "==", "0", ":", "\n", "                ", "raise", "ValueError", "(", "\"target size cannot be zero\"", ")", "\n", "\n", "", "tgt", "=", "sample", "[", "\"target\"", "]", "[", "b", ",", ":", "initial_target_size", "]", ".", "tolist", "(", ")", "\n", "tgt", "=", "self", ".", "replace_eos_with_silence", "(", "tgt", ")", "\n", "tgt", "=", "pack_replabels", "(", "tgt", ",", "self", ".", "tgt_dict", ",", "self", ".", "max_replabel", ")", "\n", "tgt", "=", "tgt", "[", ":", "T", "]", "\n", "\n", "if", "using_linseg", ":", "\n", "                ", "tgt", "=", "[", "tgt", "[", "t", "*", "len", "(", "tgt", ")", "//", "T", "]", "for", "t", "in", "range", "(", "T", ")", "]", "\n", "\n", "", "target", "[", "b", "]", "[", ":", "len", "(", "tgt", ")", "]", "=", "torch", ".", "IntTensor", "(", "tgt", ")", "\n", "target_size", "[", "b", "]", "=", "len", "(", "tgt", ")", "\n", "\n", "", "loss", "=", "self", ".", "asg", ".", "forward", "(", "emissions", ",", "target", ".", "to", "(", "device", ")", ",", "target_size", ".", "to", "(", "device", ")", ")", "\n", "\n", "if", "reduce", ":", "\n", "            ", "loss", "=", "torch", ".", "sum", "(", "loss", ")", "\n", "\n", "", "sample_size", "=", "(", "\n", "sample", "[", "\"target\"", "]", ".", "size", "(", "0", ")", "if", "self", ".", "args", ".", "sentence_avg", "else", "sample", "[", "\"ntokens\"", "]", "\n", ")", "\n", "logging_output", "=", "{", "\n", "\"loss\"", ":", "utils", ".", "item", "(", "loss", ".", "data", ")", "if", "reduce", "else", "loss", ".", "data", ",", "\n", "\"ntokens\"", ":", "sample", "[", "\"ntokens\"", "]", ",", "\n", "\"nsentences\"", ":", "sample", "[", "\"target\"", "]", ".", "size", "(", "0", ")", ",", "\n", "\"sample_size\"", ":", "sample_size", ",", "\n", "}", "\n", "return", "loss", ",", "sample_size", ",", "logging_output", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.ASG_loss.ASGCriterion.aggregate_logging_outputs": [[141, 155], ["sum", "sum", "sum", "sum", "log.get", "log.get", "log.get", "log.get"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "aggregate_logging_outputs", "(", "logging_outputs", ")", ":", "\n", "        ", "\"\"\"Aggregate logging outputs from data parallel training.\"\"\"", "\n", "loss_sum", "=", "sum", "(", "log", ".", "get", "(", "\"loss\"", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", "\n", "ntokens", "=", "sum", "(", "log", ".", "get", "(", "\"ntokens\"", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", "\n", "nsentences", "=", "sum", "(", "log", ".", "get", "(", "\"nsentences\"", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", "\n", "sample_size", "=", "sum", "(", "log", ".", "get", "(", "\"sample_size\"", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", "\n", "agg_output", "=", "{", "\n", "\"loss\"", ":", "loss_sum", "/", "nsentences", ",", "\n", "\"ntokens\"", ":", "ntokens", ",", "\n", "\"nsentences\"", ":", "nsentences", ",", "\n", "\"sample_size\"", ":", "sample_size", ",", "\n", "}", "\n", "return", "agg_output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.legacy_masked_lm.LegacyMaskedLmLoss.__init__": [[51, 53], ["fairseq.criterions.FairseqCriterion.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["self", ".", "seed", "=", "args", ".", "seed", "\n", "\n", "", "@", "classmethod", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.legacy_masked_lm.LegacyMaskedLmLoss.add_args": [[54, 62], ["parser.add_argument", "parser.add_argument"], "methods", ["None"], ["def", "load_dictionary", "(", "cls", ",", "filename", ")", ":", "\n", "        ", "return", "BertDictionary", ".", "load", "(", "filename", ")", "\n", "\n", "", "@", "classmethod", "\n", "def", "build_dictionary", "(", "cls", ",", "filenames", ",", "workers", "=", "1", ",", "threshold", "=", "-", "1", ",", "nwords", "=", "-", "1", ",", "padding_factor", "=", "8", ")", ":", "\n", "        ", "d", "=", "BertDictionary", "(", ")", "\n", "for", "filename", "in", "filenames", ":", "\n", "            ", "Dictionary", ".", "add_file_to_dictionary", "(", "filename", ",", "d", ",", "tokenizer", ".", "tokenize_line", ",", "workers", ")", "\n", "", "d", ".", "finalize", "(", "threshold", "=", "threshold", ",", "nwords", "=", "nwords", ",", "padding_factor", "=", "padding_factor", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.legacy_masked_lm.LegacyMaskedLmLoss.forward": [[64, 126], ["model", "lm_logits.view.view.view", "sample[].view", "legacy_masked_lm.compute_cross_entropy_loss", "fairseq.utils.strip_pad().numel", "lm_logits.view.view.size", "sample[].view", "sample[].view.size", "fairseq.utils.strip_pad", "legacy_masked_lm.compute_cross_entropy_loss", "fairseq.utils.item", "fairseq.utils.item", "fairseq.utils.item"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.legacy_masked_lm.compute_cross_entropy_loss", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.strip_pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.legacy_masked_lm.compute_cross_entropy_loss", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item"], ["\n", "", "@", "property", "\n", "def", "target_dictionary", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dictionary", "\n", "\n", "", "@", "classmethod", "\n", "def", "setup_task", "(", "cls", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Setup the task.\n        \"\"\"", "\n", "paths", "=", "args", ".", "data", ".", "split", "(", "os", ".", "pathsep", ")", "\n", "assert", "len", "(", "paths", ")", ">", "0", "\n", "dictionary", "=", "BertDictionary", ".", "load", "(", "os", ".", "path", ".", "join", "(", "paths", "[", "0", "]", ",", "'dict.txt'", ")", ")", "\n", "logger", ".", "info", "(", "'dictionary: {} types'", ".", "format", "(", "len", "(", "dictionary", ")", ")", ")", "\n", "\n", "return", "cls", "(", "args", ",", "dictionary", ")", "\n", "\n", "", "def", "load_dataset", "(", "self", ",", "split", ",", "epoch", "=", "0", ",", "combine", "=", "False", ")", ":", "\n", "        ", "\"\"\"Load a given dataset split.\n        Args:\n            split (str): name of the split (e.g., train, valid, test)\n        \"\"\"", "\n", "loaded_datasets", "=", "[", "]", "\n", "\n", "paths", "=", "self", ".", "args", ".", "data", ".", "split", "(", "os", ".", "pathsep", ")", "\n", "assert", "len", "(", "paths", ")", ">", "0", "\n", "data_path", "=", "paths", "[", "epoch", "%", "len", "(", "paths", ")", "]", "\n", "logger", ".", "info", "(", "\"data_path\"", ",", "data_path", ")", "\n", "\n", "for", "k", "in", "itertools", ".", "count", "(", ")", ":", "\n", "            ", "split_k", "=", "split", "+", "(", "str", "(", "k", ")", "if", "k", ">", "0", "else", "''", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "data_path", ",", "split_k", ")", "\n", "ds", "=", "indexed_dataset", ".", "make_dataset", "(", "\n", "path", ",", "\n", "impl", "=", "self", ".", "args", ".", "dataset_impl", ",", "\n", "fix_lua_indexing", "=", "True", ",", "\n", "dictionary", "=", "self", ".", "dictionary", ",", "\n", ")", "\n", "\n", "if", "ds", "is", "None", ":", "\n", "                ", "if", "k", ">", "0", ":", "\n", "                    ", "break", "\n", "", "else", ":", "\n", "                    ", "raise", "FileNotFoundError", "(", "'Dataset not found: {} ({})'", ".", "format", "(", "split", ",", "data_path", ")", ")", "\n", "\n", "", "", "with", "data_utils", ".", "numpy_seed", "(", "self", ".", "seed", "+", "k", ")", ":", "\n", "                ", "loaded_datasets", ".", "append", "(", "\n", "BlockPairDataset", "(", "\n", "ds", ",", "\n", "self", ".", "dictionary", ",", "\n", "ds", ".", "sizes", ",", "\n", "self", ".", "args", ".", "tokens_per_sample", ",", "\n", "break_mode", "=", "self", ".", "args", ".", "break_mode", ",", "\n", "doc_break_size", "=", "1", ",", "\n", ")", "\n", ")", "\n", "\n", "", "logger", ".", "info", "(", "'{} {} {} examples'", ".", "format", "(", "data_path", ",", "split_k", ",", "len", "(", "loaded_datasets", "[", "-", "1", "]", ")", ")", ")", "\n", "\n", "if", "not", "combine", ":", "\n", "                ", "break", "\n", "\n", "", "", "if", "len", "(", "loaded_datasets", ")", "==", "1", ":", "\n", "            ", "dataset", "=", "loaded_datasets", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.legacy_masked_lm.LegacyMaskedLmLoss.aggregate_logging_outputs": [[127, 148], ["sum", "sum", "sum", "sum", "sum", "sum", "log.get", "log.get", "log.get", "log.get", "log.get", "log.get", "math.log", "math.log", "math.log", "math.log"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log"], ["sizes", "=", "dataset", ".", "sizes", "\n", "", "else", ":", "\n", "            ", "dataset", "=", "ConcatDataset", "(", "loaded_datasets", ")", "\n", "sizes", "=", "np", ".", "concatenate", "(", "[", "ds", ".", "sizes", "for", "ds", "in", "loaded_datasets", "]", ")", "\n", "\n", "", "self", ".", "datasets", "[", "split", "]", "=", "MaskedLMDataset", "(", "\n", "dataset", "=", "dataset", ",", "\n", "sizes", "=", "sizes", ",", "\n", "vocab", "=", "self", ".", "dictionary", ",", "\n", "pad_idx", "=", "self", ".", "dictionary", ".", "pad", "(", ")", ",", "\n", "mask_idx", "=", "self", ".", "dictionary", ".", "mask", "(", ")", ",", "\n", "classif_token_idx", "=", "self", ".", "dictionary", ".", "cls", "(", ")", ",", "\n", "sep_token_idx", "=", "self", ".", "dictionary", ".", "sep", "(", ")", ",", "\n", "shuffle", "=", "self", ".", "args", ".", "shuffle_dataset", ",", "\n", "seed", "=", "self", ".", "seed", ",", "\n", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.legacy_masked_lm.LegacyMaskedLmLoss.logging_outputs_can_be_summed": [[149, 157], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.legacy_masked_lm.compute_cross_entropy_loss": [[15, 31], ["torch.nll_loss", "logits.size", "targets.size", "torch.log_softmax"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax"], ["indexed_dataset", ",", "\n", "data_utils", ",", "\n", ")", "\n", "\n", "from", "fairseq", ".", "data", "import", "Dictionary", "\n", "from", "fairseq", ".", "data", ".", "legacy", ".", "block_pair_dataset", "import", "BlockPairDataset", "\n", "from", "fairseq", ".", "data", ".", "legacy", ".", "masked_lm_dataset", "import", "MaskedLMDataset", "\n", "from", "fairseq", ".", "data", ".", "legacy", ".", "masked_lm_dictionary", "import", "BertDictionary", "\n", "from", "fairseq", ".", "tasks", "import", "FairseqTask", ",", "register_task", "\n", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "\n", "@", "register_task", "(", "'legacy_masked_lm'", ")", "\n", "class", "LegacyMaskedLMTask", "(", "FairseqTask", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.fairseq_criterion.FairseqCriterion.__init__": [[15, 20], ["torch.nn.modules.loss._Loss.__init__", "task.target_dictionary.pad"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "task", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "task", "=", "task", "\n", "self", ".", "padding_idx", "=", "task", ".", "target_dictionary", ".", "pad", "(", ")", "if", "task", ".", "target_dictionary", "is", "not", "None", "else", "-", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.fairseq_criterion.FairseqCriterion.add_args": [[21, 25], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add criterion-specific arguments to the parser.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.fairseq_criterion.FairseqCriterion.build_criterion": [[26, 29], ["cls"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dictionary.BertDictionary.cls"], ["", "@", "classmethod", "\n", "def", "build_criterion", "(", "cls", ",", "args", ",", "task", ")", ":", "\n", "        ", "return", "cls", "(", "args", ",", "task", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.fairseq_criterion.FairseqCriterion.forward": [[30, 39], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "model", ",", "sample", ",", "reduce", "=", "True", ")", ":", "\n", "        ", "\"\"\"Compute the loss for the given sample.\n\n        Returns a tuple with three elements:\n        1) the loss\n        2) the sample size, which is used as the denominator for the gradient\n        3) logging outputs to display while training\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.fairseq_criterion.FairseqCriterion.aggregate_logging_outputs": [[40, 50], ["fairseq.utils.deprecation_warning"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.deprecation_warning"], ["", "@", "staticmethod", "\n", "def", "aggregate_logging_outputs", "(", "\n", "logging_outputs", ":", "List", "[", "Dict", "[", "str", ",", "Any", "]", "]", ",", "\n", ")", "->", "Dict", "[", "str", ",", "Any", "]", ":", "\n", "        ", "\"\"\"Aggregate logging outputs from data parallel training.\"\"\"", "\n", "utils", ".", "deprecation_warning", "(", "\n", "'The aggregate_logging_outputs API is deprecated. '", "\n", "'Please use the reduce_metrics API instead.'", "\n", ")", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.fairseq_criterion.FairseqCriterion.reduce_metrics": [[51, 63], ["fairseq.utils.deprecation_warning", "cls.aggregate_logging_outputs", "cls.aggregate_logging_outputs.items", "fairseq.metrics.log_scalar"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.deprecation_warning", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.binary_cross_entropy.BinaryCrossEntropyCriterion.aggregate_logging_outputs", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_scalar"], ["", "@", "classmethod", "\n", "def", "reduce_metrics", "(", "cls", ",", "logging_outputs", ":", "List", "[", "Dict", "[", "str", ",", "Any", "]", "]", ")", "->", "None", ":", "\n", "        ", "\"\"\"Aggregate logging outputs from data parallel training.\"\"\"", "\n", "utils", ".", "deprecation_warning", "(", "\n", "'Criterions should implement the reduce_metrics API. '", "\n", "'Falling back to deprecated aggregate_logging_outputs API.'", "\n", ")", "\n", "agg_logging_outputs", "=", "cls", ".", "aggregate_logging_outputs", "(", "logging_outputs", ")", "\n", "for", "k", ",", "v", "in", "agg_logging_outputs", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "in", "{", "'nsentences'", ",", "'ntokens'", ",", "'sample_size'", "}", ":", "\n", "                ", "continue", "\n", "", "metrics", ".", "log_scalar", "(", "k", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.fairseq_criterion.FairseqCriterion.logging_outputs_can_be_summed": [[64, 72], ["None"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "logging_outputs_can_be_summed", "(", ")", "->", "bool", ":", "\n", "        ", "\"\"\"\n        Whether the logging outputs returned by `forward` can be summed\n        across workers prior to calling `reduce_metrics`. Setting this\n        to True will improves distributed training speed.\n        \"\"\"", "\n", "return", "False", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.cross_entropy.CrossEntropyCriterion.__init__": [[17, 19], ["fairseq.criterions.FairseqCriterion.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "task", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "task", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.cross_entropy.CrossEntropyCriterion.forward": [[20, 38], ["model", "cross_entropy.CrossEntropyCriterion.compute_loss", "sample[].size", "sample[].size", "fairseq.utils.item"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.label_smoothed_cross_entropy.LabelSmoothedCrossEntropyCriterion.compute_loss", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item"], ["", "def", "forward", "(", "self", ",", "model", ",", "sample", ",", "reduce", "=", "True", ")", ":", "\n", "        ", "\"\"\"Compute the loss for the given sample.\n\n        Returns a tuple with three elements:\n        1) the loss\n        2) the sample size, which is used as the denominator for the gradient\n        3) logging outputs to display while training\n        \"\"\"", "\n", "net_output", "=", "model", "(", "**", "sample", "[", "'net_input'", "]", ")", "\n", "loss", ",", "_", "=", "self", ".", "compute_loss", "(", "model", ",", "net_output", ",", "sample", ",", "reduce", "=", "reduce", ")", "\n", "sample_size", "=", "sample", "[", "'target'", "]", ".", "size", "(", "0", ")", "if", "self", ".", "args", ".", "sentence_avg", "else", "sample", "[", "'ntokens'", "]", "\n", "logging_output", "=", "{", "\n", "'loss'", ":", "loss", ".", "data", ",", "\n", "'ntokens'", ":", "sample", "[", "'ntokens'", "]", ",", "\n", "'nsentences'", ":", "sample", "[", "'target'", "]", ".", "size", "(", "0", ")", ",", "\n", "'sample_size'", ":", "sample_size", ",", "\n", "}", "\n", "return", "loss", ",", "sample_size", ",", "logging_output", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.cross_entropy.CrossEntropyCriterion.compute_loss": [[39, 50], ["model.get_normalized_probs", "lprobs.view.view.view", "model.get_targets().view", "torch.nll_loss", "lprobs.view.view.size", "model.get_targets"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.get_normalized_probs", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.wav2vec.Wav2VecModel.get_targets"], ["", "def", "compute_loss", "(", "self", ",", "model", ",", "net_output", ",", "sample", ",", "reduce", "=", "True", ")", ":", "\n", "        ", "lprobs", "=", "model", ".", "get_normalized_probs", "(", "net_output", ",", "log_probs", "=", "True", ")", "\n", "lprobs", "=", "lprobs", ".", "view", "(", "-", "1", ",", "lprobs", ".", "size", "(", "-", "1", ")", ")", "\n", "target", "=", "model", ".", "get_targets", "(", "sample", ",", "net_output", ")", ".", "view", "(", "-", "1", ")", "\n", "loss", "=", "F", ".", "nll_loss", "(", "\n", "lprobs", ",", "\n", "target", ",", "\n", "ignore_index", "=", "self", ".", "padding_idx", ",", "\n", "reduction", "=", "'sum'", "if", "reduce", "else", "'none'", ",", "\n", ")", "\n", "return", "loss", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.cross_entropy.CrossEntropyCriterion.reduce_metrics": [[51, 64], ["sum", "sum", "sum", "fairseq.metrics.log_scalar", "fairseq.metrics.log_scalar", "fairseq.metrics.log_derived", "fairseq.metrics.log_derived", "log.get", "log.get", "log.get", "math.log", "math.log", "round", "round"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_scalar", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_scalar", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_derived", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_derived", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log"], ["", "@", "staticmethod", "\n", "def", "reduce_metrics", "(", "logging_outputs", ")", "->", "None", ":", "\n", "        ", "\"\"\"Aggregate logging outputs from data parallel training.\"\"\"", "\n", "loss_sum", "=", "utils", ".", "item", "(", "sum", "(", "log", ".", "get", "(", "'loss'", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", ")", "\n", "ntokens", "=", "utils", ".", "item", "(", "sum", "(", "log", ".", "get", "(", "'ntokens'", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", ")", "\n", "sample_size", "=", "utils", ".", "item", "(", "sum", "(", "log", ".", "get", "(", "'sample_size'", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", ")", "\n", "\n", "metrics", ".", "log_scalar", "(", "'loss'", ",", "loss_sum", "/", "sample_size", "/", "math", ".", "log", "(", "2", ")", ",", "sample_size", ",", "round", "=", "3", ")", "\n", "if", "sample_size", "!=", "ntokens", ":", "\n", "            ", "metrics", ".", "log_scalar", "(", "'nll_loss'", ",", "loss_sum", "/", "ntokens", "/", "math", ".", "log", "(", "2", ")", ",", "ntokens", ",", "round", "=", "3", ")", "\n", "metrics", ".", "log_derived", "(", "'ppl'", ",", "lambda", "meters", ":", "utils", ".", "get_perplexity", "(", "meters", "[", "'nll_loss'", "]", ".", "avg", ")", ")", "\n", "", "else", ":", "\n", "            ", "metrics", ".", "log_derived", "(", "'ppl'", ",", "lambda", "meters", ":", "utils", ".", "get_perplexity", "(", "meters", "[", "'loss'", "]", ".", "avg", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.cross_entropy.CrossEntropyCriterion.logging_outputs_can_be_summed": [[65, 73], ["None"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "logging_outputs_can_be_summed", "(", ")", "->", "bool", ":", "\n", "        ", "\"\"\"\n        Whether the logging outputs returned by `forward` can be summed\n        across workers prior to calling `reduce_metrics`. Setting this\n        to True will improves distributed training speed.\n        \"\"\"", "\n", "return", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.adaptive_loss.AdaptiveLoss.__init__": [[20, 26], ["fairseq.criterions.FairseqCriterion.__init__", "Exception"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["def", "__init__", "(", "self", ",", "args", ",", "task", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "task", ")", "\n", "\n", "if", "args", ".", "ddp_backend", "==", "'c10d'", ":", "\n", "            ", "raise", "Exception", "(", "\n", "'AdaptiveLoss is not compatible with the c10d '", "\n", "'version of DistributedDataParallel. Please use '", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.adaptive_loss.AdaptiveLoss.forward": [[30, 75], ["model", "model.get_targets", "orig_target.view.view.size", "orig_target.view.view.view", "orig_target.view.view.size", "adaptive_softmax", "net_output[].new().zero_", "range", "fairseq.utils.strip_pad", "fairseq.utils.strip_pad.numel", "hasattr", "len", "len", "len", "sample[].size", "net_output[].new", "torch.cross_entropy", "fairseq.utils.item", "target[].min", "target[].max", "logits[].size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.wav2vec.Wav2VecModel.get_targets", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.strip_pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "", "def", "forward", "(", "self", ",", "model", ",", "sample", ",", "reduce", "=", "True", ")", ":", "\n", "        ", "\"\"\"Compute the loss for the given sample.\n\n        Returns a tuple with three elements:\n        1) the loss\n        2) the sample size, which is used as the denominator for the gradient\n        3) logging outputs to display while training\n        \"\"\"", "\n", "\n", "assert", "hasattr", "(", "model", ".", "decoder", ",", "'adaptive_softmax'", ")", "and", "model", ".", "decoder", ".", "adaptive_softmax", "is", "not", "None", "\n", "adaptive_softmax", "=", "model", ".", "decoder", ".", "adaptive_softmax", "\n", "\n", "net_output", "=", "model", "(", "**", "sample", "[", "'net_input'", "]", ")", "\n", "orig_target", "=", "model", ".", "get_targets", "(", "sample", ",", "net_output", ")", "\n", "\n", "nsentences", "=", "orig_target", ".", "size", "(", "0", ")", "\n", "orig_target", "=", "orig_target", ".", "view", "(", "-", "1", ")", "\n", "\n", "bsz", "=", "orig_target", ".", "size", "(", "0", ")", "\n", "\n", "logits", ",", "target", "=", "adaptive_softmax", "(", "net_output", "[", "0", "]", ",", "orig_target", ")", "\n", "assert", "len", "(", "target", ")", "==", "len", "(", "logits", ")", "\n", "\n", "loss", "=", "net_output", "[", "0", "]", ".", "new", "(", "1", "if", "reduce", "else", "bsz", ")", ".", "zero_", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "target", ")", ")", ":", "\n", "            ", "if", "target", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "assert", "(", "target", "[", "i", "]", ".", "min", "(", ")", ">=", "0", "and", "target", "[", "i", "]", ".", "max", "(", ")", "<=", "logits", "[", "i", "]", ".", "size", "(", "1", ")", ")", "\n", "loss", "+=", "F", ".", "cross_entropy", "(", "\n", "logits", "[", "i", "]", ",", "\n", "target", "[", "i", "]", ",", "\n", "ignore_index", "=", "self", ".", "padding_idx", ",", "\n", "reduction", "=", "'sum'", "if", "reduce", "else", "'none'", ",", "\n", ")", "\n", "\n", "", "", "orig", "=", "utils", ".", "strip_pad", "(", "orig_target", ",", "self", ".", "padding_idx", ")", "\n", "ntokens", "=", "orig", ".", "numel", "(", ")", "\n", "sample_size", "=", "sample", "[", "'target'", "]", ".", "size", "(", "0", ")", "if", "self", ".", "args", ".", "sentence_avg", "else", "ntokens", "\n", "logging_output", "=", "{", "\n", "'loss'", ":", "loss", ".", "data", ",", "\n", "'ntokens'", ":", "ntokens", ",", "\n", "'nsentences'", ":", "nsentences", ",", "\n", "'sample_size'", ":", "sample_size", ",", "\n", "}", "\n", "return", "loss", ",", "sample_size", ",", "logging_output", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.adaptive_loss.AdaptiveLoss.reduce_metrics": [[76, 89], ["sum", "sum", "sum", "fairseq.metrics.log_scalar", "fairseq.metrics.log_scalar", "fairseq.metrics.log_derived", "fairseq.metrics.log_derived", "log.get", "log.get", "log.get", "math.log", "math.log", "round", "round"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_scalar", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_scalar", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_derived", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_derived", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log"], ["", "@", "staticmethod", "\n", "def", "reduce_metrics", "(", "logging_outputs", ")", "->", "None", ":", "\n", "        ", "\"\"\"Aggregate logging outputs from data parallel training.\"\"\"", "\n", "loss_sum", "=", "utils", ".", "item", "(", "sum", "(", "log", ".", "get", "(", "'loss'", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", ")", "\n", "ntokens", "=", "utils", ".", "item", "(", "sum", "(", "log", ".", "get", "(", "'ntokens'", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", ")", "\n", "sample_size", "=", "utils", ".", "item", "(", "sum", "(", "log", ".", "get", "(", "'sample_size'", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", ")", "\n", "\n", "metrics", ".", "log_scalar", "(", "'loss'", ",", "loss_sum", "/", "sample_size", "/", "math", ".", "log", "(", "2", ")", ",", "sample_size", ",", "round", "=", "3", ")", "\n", "if", "sample_size", "!=", "ntokens", ":", "\n", "            ", "metrics", ".", "log_scalar", "(", "'nll_loss'", ",", "loss_sum", "/", "ntokens", "/", "math", ".", "log", "(", "2", ")", ",", "ntokens", ",", "round", "=", "3", ")", "\n", "metrics", ".", "log_derived", "(", "'ppl'", ",", "lambda", "meters", ":", "utils", ".", "get_perplexity", "(", "meters", "[", "'nll_loss'", "]", ".", "avg", ")", ")", "\n", "", "else", ":", "\n", "            ", "metrics", ".", "log_derived", "(", "'ppl'", ",", "lambda", "meters", ":", "utils", ".", "get_perplexity", "(", "meters", "[", "'loss'", "]", ".", "avg", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.adaptive_loss.AdaptiveLoss.logging_outputs_can_be_summed": [[90, 98], ["None"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "logging_outputs_can_be_summed", "(", ")", "->", "bool", ":", "\n", "        ", "\"\"\"\n        Whether the logging outputs returned by `forward` can be summed\n        across workers prior to calling `reduce_metrics`. Setting this\n        to True will improves distributed training speed.\n        \"\"\"", "\n", "return", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.label_smoothed_cross_entropy.LabelSmoothedCrossEntropyCriterion.__init__": [[36, 39], ["fairseq.criterions.FairseqCriterion.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "task", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "task", ")", "\n", "self", ".", "eps", "=", "args", ".", "label_smoothing", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.label_smoothed_cross_entropy.LabelSmoothedCrossEntropyCriterion.add_args": [[40, 46], ["parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add criterion-specific arguments to the parser.\"\"\"", "\n", "# fmt: off", "\n", "parser", ".", "add_argument", "(", "'--label-smoothing'", ",", "default", "=", "0.", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'epsilon for label smoothing, 0 means no label smoothing'", ")", "\n", "# fmt: on", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.label_smoothed_cross_entropy.LabelSmoothedCrossEntropyCriterion.forward": [[48, 67], ["model", "label_smoothed_cross_entropy.LabelSmoothedCrossEntropyCriterion.compute_loss", "sample[].size", "sample[].size", "fairseq.utils.item", "fairseq.utils.item"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.label_smoothed_cross_entropy.LabelSmoothedCrossEntropyCriterion.compute_loss", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item"], ["", "def", "forward", "(", "self", ",", "model", ",", "sample", ",", "reduce", "=", "True", ")", ":", "\n", "        ", "\"\"\"Compute the loss for the given sample.\n\n        Returns a tuple with three elements:\n        1) the loss\n        2) the sample size, which is used as the denominator for the gradient\n        3) logging outputs to display while training\n        \"\"\"", "\n", "net_output", "=", "model", "(", "**", "sample", "[", "'net_input'", "]", ")", "\n", "loss", ",", "nll_loss", "=", "self", ".", "compute_loss", "(", "model", ",", "net_output", ",", "sample", ",", "reduce", "=", "reduce", ")", "\n", "sample_size", "=", "sample", "[", "'target'", "]", ".", "size", "(", "0", ")", "if", "self", ".", "args", ".", "sentence_avg", "else", "sample", "[", "'ntokens'", "]", "\n", "logging_output", "=", "{", "\n", "'loss'", ":", "loss", ".", "data", ",", "\n", "'nll_loss'", ":", "nll_loss", ".", "data", ",", "\n", "'ntokens'", ":", "sample", "[", "'ntokens'", "]", ",", "\n", "'nsentences'", ":", "sample", "[", "'target'", "]", ".", "size", "(", "0", ")", ",", "\n", "'sample_size'", ":", "sample_size", ",", "\n", "}", "\n", "return", "loss", ",", "sample_size", ",", "logging_output", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.label_smoothed_cross_entropy.LabelSmoothedCrossEntropyCriterion.compute_loss": [[68, 76], ["model.get_normalized_probs", "lprobs.view.view.view", "model.get_targets().view", "label_smoothed_cross_entropy.label_smoothed_nll_loss", "lprobs.view.view.size", "model.get_targets"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.get_normalized_probs", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.label_smoothed_cross_entropy.label_smoothed_nll_loss", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.wav2vec.Wav2VecModel.get_targets"], ["", "def", "compute_loss", "(", "self", ",", "model", ",", "net_output", ",", "sample", ",", "reduce", "=", "True", ")", ":", "\n", "        ", "lprobs", "=", "model", ".", "get_normalized_probs", "(", "net_output", ",", "log_probs", "=", "True", ")", "\n", "lprobs", "=", "lprobs", ".", "view", "(", "-", "1", ",", "lprobs", ".", "size", "(", "-", "1", ")", ")", "\n", "target", "=", "model", ".", "get_targets", "(", "sample", ",", "net_output", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "loss", ",", "nll_loss", "=", "label_smoothed_nll_loss", "(", "\n", "lprobs", ",", "target", ",", "self", ".", "eps", ",", "ignore_index", "=", "self", ".", "padding_idx", ",", "reduce", "=", "reduce", ",", "\n", ")", "\n", "return", "loss", ",", "nll_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.label_smoothed_cross_entropy.LabelSmoothedCrossEntropyCriterion.reduce_metrics": [[77, 88], ["sum", "sum", "sum", "sum", "fairseq.metrics.log_scalar", "fairseq.metrics.log_scalar", "fairseq.metrics.log_derived", "log.get", "log.get", "log.get", "log.get", "math.log", "math.log", "round"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_scalar", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_scalar", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_derived", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log"], ["", "@", "staticmethod", "\n", "def", "reduce_metrics", "(", "logging_outputs", ")", "->", "None", ":", "\n", "        ", "\"\"\"Aggregate logging outputs from data parallel training.\"\"\"", "\n", "loss_sum", "=", "utils", ".", "item", "(", "sum", "(", "log", ".", "get", "(", "'loss'", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", ")", "\n", "nll_loss_sum", "=", "utils", ".", "item", "(", "sum", "(", "log", ".", "get", "(", "'nll_loss'", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", ")", "\n", "ntokens", "=", "utils", ".", "item", "(", "sum", "(", "log", ".", "get", "(", "'ntokens'", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", ")", "\n", "sample_size", "=", "utils", ".", "item", "(", "sum", "(", "log", ".", "get", "(", "'sample_size'", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", ")", "\n", "\n", "metrics", ".", "log_scalar", "(", "'loss'", ",", "loss_sum", "/", "sample_size", "/", "math", ".", "log", "(", "2", ")", ",", "sample_size", ",", "round", "=", "3", ")", "\n", "metrics", ".", "log_scalar", "(", "'nll_loss'", ",", "nll_loss_sum", "/", "ntokens", "/", "math", ".", "log", "(", "2", ")", ",", "ntokens", ",", "round", "=", "3", ")", "\n", "metrics", ".", "log_derived", "(", "'ppl'", ",", "lambda", "meters", ":", "utils", ".", "get_perplexity", "(", "meters", "[", "'nll_loss'", "]", ".", "avg", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.label_smoothed_cross_entropy.LabelSmoothedCrossEntropyCriterion.logging_outputs_can_be_summed": [[89, 97], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "logging_outputs_can_be_summed", "(", ")", "->", "bool", ":", "\n", "        ", "\"\"\"\n        Whether the logging outputs returned by `forward` can be summed\n        across workers prior to calling `reduce_metrics`. Setting this\n        to True will improves distributed training speed.\n        \"\"\"", "\n", "return", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.label_smoothed_cross_entropy.label_smoothed_nll_loss": [[12, 31], ["target.unsqueeze.dim", "target.unsqueeze.unsqueeze", "lprobs.gather", "lprobs.sum", "target.unsqueeze.eq", "target.eq.any", "nll_loss.sum.squeeze", "smooth_loss.sum.squeeze", "nll_loss.sum.sum", "smooth_loss.sum.sum", "lprobs.size", "lprobs.dim", "nll_loss.sum.masked_fill_", "smooth_loss.sum.masked_fill_"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["def", "label_smoothed_nll_loss", "(", "lprobs", ",", "target", ",", "epsilon", ",", "ignore_index", "=", "None", ",", "reduce", "=", "True", ")", ":", "\n", "    ", "if", "target", ".", "dim", "(", ")", "==", "lprobs", ".", "dim", "(", ")", "-", "1", ":", "\n", "        ", "target", "=", "target", ".", "unsqueeze", "(", "-", "1", ")", "\n", "", "nll_loss", "=", "-", "lprobs", ".", "gather", "(", "dim", "=", "-", "1", ",", "index", "=", "target", ")", "\n", "smooth_loss", "=", "-", "lprobs", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "if", "ignore_index", "is", "not", "None", ":", "\n", "        ", "pad_mask", "=", "target", ".", "eq", "(", "ignore_index", ")", "\n", "if", "pad_mask", ".", "any", "(", ")", ":", "\n", "            ", "nll_loss", ".", "masked_fill_", "(", "pad_mask", ",", "0.", ")", "\n", "smooth_loss", ".", "masked_fill_", "(", "pad_mask", ",", "0.", ")", "\n", "", "", "else", ":", "\n", "        ", "nll_loss", "=", "nll_loss", ".", "squeeze", "(", "-", "1", ")", "\n", "smooth_loss", "=", "smooth_loss", ".", "squeeze", "(", "-", "1", ")", "\n", "", "if", "reduce", ":", "\n", "        ", "nll_loss", "=", "nll_loss", ".", "sum", "(", ")", "\n", "smooth_loss", "=", "smooth_loss", ".", "sum", "(", ")", "\n", "", "eps_i", "=", "epsilon", "/", "lprobs", ".", "size", "(", "-", "1", ")", "\n", "loss", "=", "(", "1.", "-", "epsilon", ")", "*", "nll_loss", "+", "eps_i", "*", "smooth_loss", "\n", "return", "loss", ",", "nll_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.masked_lm.MaskedLmLoss.forward": [[21, 61], ["sample[].ne", "sample[].ne.int().sum().item", "model.get_targets", "torch.nll_loss", "torch.nll_loss", "model", "torch.log_softmax", "torch.log_softmax", "model.get_targets.view", "sample[].ne.int().sum", "logits.view", "fairseq.utils.item", "logits.size", "sample[].ne.int"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.wav2vec.Wav2VecModel.get_targets", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["SortDataset", ",", "\n", "TokenBlockDataset", ",", "\n", ")", "\n", "from", "fairseq", ".", "tasks", "import", "FairseqTask", ",", "register_task", "\n", "from", "fairseq", ".", "data", ".", "encoders", ".", "utils", "import", "get_whole_word_mask", "\n", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "\n", "@", "register_task", "(", "'masked_lm'", ")", "\n", "class", "MaskedLMTask", "(", "FairseqTask", ")", ":", "\n", "    ", "\"\"\"Task for training masked language models (e.g., BERT, RoBERTa).\"\"\"", "\n", "\n", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add task-specific arguments to the parser.\"\"\"", "\n", "parser", ".", "add_argument", "(", "'data'", ",", "help", "=", "'colon separated path to data directories list, \\\n                            will be iterated upon during epochs in round-robin manner'", ")", "\n", "parser", ".", "add_argument", "(", "'--sample-break-mode'", ",", "default", "=", "'complete'", ",", "\n", "choices", "=", "[", "'none'", ",", "'complete'", ",", "'complete_doc'", ",", "'eos'", "]", ",", "\n", "help", "=", "'If omitted or \"none\", fills each sample with tokens-per-sample '", "\n", "'tokens. If set to \"complete\", splits samples only at the end '", "\n", "'of sentence, but may include multiple sentences per sample. '", "\n", "'\"complete_doc\" is similar but respects doc boundaries. '", "\n", "'If set to \"eos\", includes only one sentence per sample.'", ")", "\n", "parser", ".", "add_argument", "(", "'--tokens-per-sample'", ",", "default", "=", "512", ",", "type", "=", "int", ",", "\n", "help", "=", "'max number of total tokens over all segments '", "\n", "'per sample for BERT dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--mask-prob'", ",", "default", "=", "0.15", ",", "type", "=", "float", ",", "\n", "help", "=", "'probability of replacing a token with mask'", ")", "\n", "parser", ".", "add_argument", "(", "'--leave-unmasked-prob'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "\n", "help", "=", "'probability that a masked token is unmasked'", ")", "\n", "parser", ".", "add_argument", "(", "'--random-token-prob'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "\n", "help", "=", "'probability of replacing a token with a random token'", ")", "\n", "parser", ".", "add_argument", "(", "'--freq-weighted-replacement'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'sample random replacement words based on word frequencies'", ")", "\n", "parser", ".", "add_argument", "(", "'--mask-whole-words'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'mask whole words; you may also want to set --bpe'", ")", "\n", "\n", "", "def", "__init__", "(", "self", ",", "args", ",", "dictionary", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.masked_lm.MaskedLmLoss.reduce_metrics": [[62, 70], ["sum", "sum", "fairseq.metrics.log_scalar", "fairseq.metrics.log_derived", "log.get", "log.get", "math.log", "round"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_scalar", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_derived", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log"], ["        ", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "self", ".", "dictionary", "=", "dictionary", "\n", "self", ".", "seed", "=", "args", ".", "seed", "\n", "\n", "# add mask token", "\n", "self", ".", "mask_idx", "=", "dictionary", ".", "add_symbol", "(", "'<mask>'", ")", "\n", "\n", "", "@", "classmethod", "\n", "def", "setup_task", "(", "cls", ",", "args", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.masked_lm.MaskedLmLoss.logging_outputs_can_be_summed": [[71, 79], ["None"], "methods", ["None"], ["        ", "paths", "=", "args", ".", "data", ".", "split", "(", "os", ".", "pathsep", ")", "\n", "assert", "len", "(", "paths", ")", ">", "0", "\n", "dictionary", "=", "Dictionary", ".", "load", "(", "os", ".", "path", ".", "join", "(", "paths", "[", "0", "]", ",", "'dict.txt'", ")", ")", "\n", "logger", ".", "info", "(", "'dictionary: {} types'", ".", "format", "(", "len", "(", "dictionary", ")", ")", ")", "\n", "return", "cls", "(", "args", ",", "dictionary", ")", "\n", "\n", "", "def", "load_dataset", "(", "self", ",", "split", ",", "epoch", "=", "0", ",", "combine", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.nat_loss.LabelSmoothedDualImitationCriterion.add_args": [[18, 28], ["parser.add_argument"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add criterion-specific arguments to the parser.\"\"\"", "\n", "# fmt: off", "\n", "parser", ".", "add_argument", "(", "\n", "'--label-smoothing'", ",", "\n", "default", "=", "0.", ",", "\n", "type", "=", "float", ",", "\n", "metavar", "=", "'D'", ",", "\n", "help", "=", "'epsilon for label smoothing, 0 means no label smoothing'", ")", "\n", "# fmt: on", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.nat_loss.LabelSmoothedDualImitationCriterion._compute_loss": [[30, 72], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.log_softmax", "torch.log_softmax", "nat_loss.LabelSmoothedDualImitationCriterion._compute_loss.mean_ds"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax"], ["", "def", "_compute_loss", "(", "\n", "self", ",", "outputs", ",", "targets", ",", "masks", "=", "None", ",", "label_smoothing", "=", "0.0", ",", "name", "=", "\"loss\"", ",", "factor", "=", "1.0", "\n", ")", ":", "\n", "        ", "\"\"\"\n            outputs: batch x len x d_model\n            targets: batch x len\n            masks:   batch x len\n\n            policy_logprob: if there is some policy\n                depends on the likelihood score as rewards.\n        \"\"\"", "\n", "\n", "def", "mean_ds", "(", "x", ":", "Tensor", ",", "dim", "=", "None", ")", "->", "Tensor", ":", "\n", "            ", "return", "(", "\n", "x", ".", "float", "(", ")", ".", "mean", "(", ")", ".", "type_as", "(", "x", ")", "\n", "if", "dim", "is", "None", "\n", "else", "x", ".", "float", "(", ")", ".", "mean", "(", "dim", ")", ".", "type_as", "(", "x", ")", "\n", ")", "\n", "", "if", "masks", "is", "not", "None", ":", "\n", "            ", "outputs", ",", "targets", "=", "outputs", "[", "masks", "]", ",", "targets", "[", "masks", "]", "\n", "\n", "", "if", "masks", "is", "not", "None", "and", "not", "masks", ".", "any", "(", ")", ":", "\n", "            ", "nll_loss", "=", "torch", ".", "tensor", "(", "0", ")", "\n", "loss", "=", "nll_loss", "\n", "", "else", ":", "\n", "            ", "logits", "=", "F", ".", "log_softmax", "(", "outputs", ",", "dim", "=", "-", "1", ")", "\n", "if", "targets", ".", "dim", "(", ")", "==", "1", ":", "\n", "                ", "losses", "=", "F", ".", "nll_loss", "(", "logits", ",", "targets", ".", "to", "(", "logits", ".", "device", ")", ",", "reduction", "=", "'none'", ")", "\n", "\n", "", "else", ":", "# soft-labels", "\n", "                ", "losses", "=", "F", ".", "kl_div", "(", "logits", ",", "targets", ".", "to", "(", "logits", ".", "device", ")", ",", "reduction", "=", "'none'", ")", "\n", "losses", "=", "losses", ".", "sum", "(", "-", "1", ")", "\n", "\n", "", "nll_loss", "=", "mean_ds", "(", "losses", ")", "\n", "if", "label_smoothing", ">", "0", ":", "\n", "                ", "loss", "=", "nll_loss", "*", "(", "\n", "1", "-", "label_smoothing", ")", "-", "mean_ds", "(", "logits", ")", "*", "label_smoothing", "\n", "", "else", ":", "\n", "                ", "loss", "=", "nll_loss", "\n", "\n", "", "", "loss", "=", "loss", "*", "factor", "\n", "return", "{", "\"name\"", ":", "name", ",", "\"loss\"", ":", "loss", ",", "\"nll_loss\"", ":", "nll_loss", ",", "\"factor\"", ":", "factor", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.nat_loss.LabelSmoothedDualImitationCriterion._custom_loss": [[73, 75], ["None"], "methods", ["None"], ["", "def", "_custom_loss", "(", "self", ",", "loss", ",", "name", "=", "\"loss\"", ",", "factor", "=", "1.0", ")", ":", "\n", "        ", "return", "{", "\"name\"", ":", "name", ",", "\"loss\"", ":", "loss", ",", "\"factor\"", ":", "factor", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.nat_loss.LabelSmoothedDualImitationCriterion.forward": [[76, 140], ["model", "sum", "outputs[].get", "sum", "sum.new_tensor", "outputs[].get", "nat_loss.LabelSmoothedDualImitationCriterion._compute_loss", "nat_loss.LabelSmoothedDualImitationCriterion._custom_loss", "len", "fairseq.utils.item", "fairseq.utils.item", "fairseq.utils.item", "outputs[].get", "outputs[].get", "outputs[].get", "outputs[].get", "outputs[].get", "nat_loss.LabelSmoothedDualImitationCriterion.get", "outputs[].get", "outputs[].get"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.nat_loss.LabelSmoothedDualImitationCriterion._compute_loss", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.nat_loss.LabelSmoothedDualImitationCriterion._custom_loss", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item"], ["", "def", "forward", "(", "self", ",", "model", ",", "sample", ",", "reduce", "=", "True", ")", ":", "\n", "        ", "\"\"\"Compute the loss for the given sample.\n        Returns a tuple with three elements:\n        1) the loss\n        2) the sample size, which is used as the denominator for the gradient\n        3) logging outputs to display while training\n        \"\"\"", "\n", "nsentences", ",", "ntokens", "=", "sample", "[", "\"nsentences\"", "]", ",", "sample", "[", "\"ntokens\"", "]", "\n", "\n", "# B x T", "\n", "src_tokens", ",", "src_lengths", "=", "(", "\n", "sample", "[", "\"net_input\"", "]", "[", "\"src_tokens\"", "]", ",", "\n", "sample", "[", "\"net_input\"", "]", "[", "\"src_lengths\"", "]", ",", "\n", ")", "\n", "tgt_tokens", ",", "prev_output_tokens", "=", "sample", "[", "\"target\"", "]", ",", "sample", "[", "\"prev_target\"", "]", "\n", "\n", "outputs", "=", "model", "(", "src_tokens", ",", "src_lengths", ",", "prev_output_tokens", ",", "tgt_tokens", ")", "\n", "losses", ",", "nll_loss", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "obj", "in", "outputs", ":", "\n", "            ", "if", "outputs", "[", "obj", "]", ".", "get", "(", "\"loss\"", ",", "None", ")", "is", "None", ":", "\n", "                ", "_losses", "=", "self", ".", "_compute_loss", "(", "\n", "outputs", "[", "obj", "]", ".", "get", "(", "\"out\"", ")", ",", "\n", "outputs", "[", "obj", "]", ".", "get", "(", "\"tgt\"", ")", ",", "\n", "outputs", "[", "obj", "]", ".", "get", "(", "\"mask\"", ",", "None", ")", ",", "\n", "outputs", "[", "obj", "]", ".", "get", "(", "\"ls\"", ",", "0.0", ")", ",", "\n", "name", "=", "obj", "+", "'-loss'", ",", "\n", "factor", "=", "outputs", "[", "obj", "]", ".", "get", "(", "\"factor\"", ",", "1.0", ")", "\n", ")", "\n", "", "else", ":", "\n", "                ", "_losses", "=", "self", ".", "_custom_loss", "(", "\n", "outputs", "[", "obj", "]", ".", "get", "(", "\"loss\"", ")", ",", "\n", "name", "=", "obj", "+", "'-loss'", ",", "\n", "factor", "=", "outputs", "[", "obj", "]", ".", "get", "(", "\"factor\"", ",", "1.0", ")", "\n", ")", "\n", "\n", "", "losses", "+=", "[", "_losses", "]", "\n", "if", "outputs", "[", "obj", "]", ".", "get", "(", "\"nll_loss\"", ",", "False", ")", ":", "\n", "                ", "nll_loss", "+=", "[", "_losses", ".", "get", "(", "\"nll_loss\"", ",", "0.0", ")", "]", "\n", "\n", "", "", "loss", "=", "sum", "(", "l", "[", "\"loss\"", "]", "for", "l", "in", "losses", ")", "\n", "nll_loss", "=", "sum", "(", "l", "for", "l", "in", "nll_loss", ")", "if", "len", "(", "nll_loss", ")", ">", "0", "else", "loss", ".", "new_tensor", "(", "0", ")", "\n", "\n", "# NOTE:", "\n", "# we don't need to use sample_size as denominator for the gradient", "\n", "# here sample_size is just used for logging", "\n", "sample_size", "=", "1", "\n", "logging_output", "=", "{", "\n", "\"loss\"", ":", "loss", ".", "data", ",", "\n", "\"nll_loss\"", ":", "nll_loss", ".", "data", ",", "\n", "\"ntokens\"", ":", "ntokens", ",", "\n", "\"nsentences\"", ":", "nsentences", ",", "\n", "\"sample_size\"", ":", "sample_size", ",", "\n", "}", "\n", "\n", "for", "l", "in", "losses", ":", "\n", "            ", "logging_output", "[", "l", "[", "\"name\"", "]", "]", "=", "(", "\n", "utils", ".", "item", "(", "l", "[", "\"loss\"", "]", ".", "data", "/", "l", "[", "\"factor\"", "]", ")", "\n", "if", "reduce", "\n", "else", "l", "[", "[", "\"loss\"", "]", "]", ".", "data", "/", "l", "[", "\"factor\"", "]", "\n", ")", "\n", "\n", "", "return", "loss", ",", "sample_size", ",", "logging_output", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.nat_loss.LabelSmoothedDualImitationCriterion.reduce_metrics": [[141, 160], ["sum", "sum", "sum", "fairseq.metrics.log_scalar", "fairseq.metrics.log_scalar", "fairseq.metrics.log_derived", "log.get", "log.get", "log.get", "math.log", "math.log", "round", "sum", "fairseq.metrics.log_scalar", "log.get", "math.log"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_scalar", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_scalar", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_derived", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_scalar", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log"], ["", "@", "staticmethod", "\n", "def", "reduce_metrics", "(", "logging_outputs", ")", "->", "None", ":", "\n", "        ", "\"\"\"Aggregate logging outputs from data parallel training.\"\"\"", "\n", "sample_size", "=", "utils", ".", "item", "(", "sum", "(", "log", ".", "get", "(", "\"sample_size\"", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", ")", "\n", "loss", "=", "utils", ".", "item", "(", "sum", "(", "log", ".", "get", "(", "\"loss\"", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", ")", "\n", "nll_loss", "=", "utils", ".", "item", "(", "sum", "(", "log", ".", "get", "(", "\"nll_loss\"", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", ")", "\n", "\n", "metrics", ".", "log_scalar", "(", "'loss'", ",", "loss", "/", "sample_size", "/", "math", ".", "log", "(", "2", ")", ",", "sample_size", ",", "round", "=", "3", ")", "\n", "metrics", ".", "log_scalar", "(", "'nll_loss'", ",", "nll_loss", "/", "sample_size", "/", "math", ".", "log", "(", "2", ")", ",", "sample_size", ",", "round", "=", "3", ")", "\n", "metrics", ".", "log_derived", "(", "'ppl'", ",", "lambda", "meters", ":", "utils", ".", "get_perplexity", "(", "meters", "[", "'loss'", "]", ".", "avg", ")", ")", "\n", "\n", "for", "key", "in", "logging_outputs", "[", "0", "]", ":", "\n", "            ", "if", "key", "[", "-", "5", ":", "]", "==", "\"-loss\"", ":", "\n", "                ", "val", "=", "sum", "(", "log", ".", "get", "(", "key", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", "\n", "metrics", ".", "log_scalar", "(", "\n", "key", "[", ":", "-", "5", "]", ",", "\n", "val", "/", "sample_size", "/", "math", ".", "log", "(", "2", ")", "if", "sample_size", ">", "0", "else", "0.0", ",", "\n", "sample_size", ",", "\n", "round", "=", "3", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.nat_loss.LabelSmoothedDualImitationCriterion.logging_outputs_can_be_summed": [[162, 170], ["None"], "methods", ["None"], ["", "", "", "@", "staticmethod", "\n", "def", "logging_outputs_can_be_summed", "(", ")", "->", "bool", ":", "\n", "        ", "\"\"\"\n        Whether the logging outputs returned by `forward` can be summed\n        across workers prior to calling `reduce_metrics`. Setting this\n        to True will improves distributed training speed.\n        \"\"\"", "\n", "return", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.sentence_ranking.SentenceRankingCriterion.__init__": [[18, 24], ["fairseq.criterions.FairseqCriterion.__init__", "open"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open"], ["NumelDataset", ",", "\n", "PrependTokenDataset", ",", "\n", "RawLabelDataset", ",", "\n", "RightPadDataset", ",", "\n", "SortDataset", ",", "\n", "TruncateDataset", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.sentence_ranking.SentenceRankingCriterion.__del__": [[25, 28], ["sentence_ranking.SentenceRankingCriterion.prediction_h.close"], "methods", ["None"], ["from", "fairseq", ".", "tasks", "import", "FairseqTask", ",", "register_task", "\n", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.sentence_ranking.SentenceRankingCriterion.add_args": [[29, 37], ["parser.add_argument", "parser.add_argument"], "methods", ["None"], ["\n", "\n", "@", "register_task", "(", "'sentence_ranking'", ")", "\n", "class", "SentenceRankingTask", "(", "FairseqTask", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.sentence_ranking.SentenceRankingCriterion.forward": [[39, 93], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "hasattr", "model", "scores.append", "model.get_targets().view", "torch.nll_loss", "torch.nll_loss", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.cat.argmax", "torch.cat.argmax", "enumerate", "torch.log_softmax", "torch.log_softmax", "zip", "fairseq.utils.item", "model.get_targets", "sample[].tolist", "torch.cat.argmax.tolist", "targets[].item", "print", "print", "torch.cat.argmax", "torch.cat.argmax"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.wav2vec.Wav2VecModel.get_targets", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], ["\n", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add task-specific arguments to the parser.\"\"\"", "\n", "parser", ".", "add_argument", "(", "'data'", ",", "metavar", "=", "'FILE'", ",", "\n", "help", "=", "'file prefix for data'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-classes'", ",", "type", "=", "int", ",", "\n", "help", "=", "'number of sentences to be ranked'", ")", "\n", "parser", ".", "add_argument", "(", "'--init-token'", ",", "type", "=", "int", ",", "\n", "help", "=", "'add token at the beginning of each batch item'", ")", "\n", "parser", ".", "add_argument", "(", "'--separator-token'", ",", "type", "=", "int", ",", "\n", "help", "=", "'add separator token between inputs'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-shuffle'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--truncate-sequence'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'Truncate sequence to max_positions'", ")", "\n", "parser", ".", "add_argument", "(", "'--max-option-length'", ",", "type", "=", "int", ",", "\n", "help", "=", "'max length for each option'", ")", "\n", "\n", "", "def", "__init__", "(", "self", ",", "args", ",", "dictionary", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "self", ".", "dictionary", "=", "dictionary", "\n", "\n", "", "@", "classmethod", "\n", "def", "load_dictionary", "(", "cls", ",", "args", ",", "filename", ",", "source", "=", "True", ")", ":", "\n", "        ", "\"\"\"Load the dictionary from the filename\n\n        Args:\n            filename (str): the filename\n        \"\"\"", "\n", "dictionary", "=", "Dictionary", ".", "load", "(", "filename", ")", "\n", "dictionary", ".", "add_symbol", "(", "'<mask>'", ")", "\n", "return", "dictionary", "\n", "\n", "", "@", "classmethod", "\n", "def", "setup_task", "(", "cls", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "args", ".", "criterion", "==", "'sentence_ranking'", ",", "'Must set --criterion=sentence_ranking'", "\n", "\n", "# load data dictionary", "\n", "data_dict", "=", "cls", ".", "load_dictionary", "(", "\n", "args", ",", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'input0'", ",", "'dict.txt'", ")", ",", "\n", "source", "=", "True", ",", "\n", ")", "\n", "logger", ".", "info", "(", "'[input] dictionary: {} types'", ".", "format", "(", "len", "(", "data_dict", ")", ")", ")", "\n", "return", "SentenceRankingTask", "(", "args", ",", "data_dict", ")", "\n", "\n", "", "def", "load_dataset", "(", "self", ",", "split", ",", "combine", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Load a given dataset split (e.g., train, valid, test).\"\"\"", "\n", "\n", "def", "get_path", "(", "type", ",", "split", ")", ":", "\n", "            ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "args", ".", "data", ",", "type", ",", "split", ")", "\n", "\n", "", "def", "make_dataset", "(", "type", ",", "dictionary", ")", ":", "\n", "            ", "split_path", "=", "get_path", "(", "type", ",", "split", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.sentence_ranking.SentenceRankingCriterion.reduce_metrics": [[94, 109], ["sum", "sum", "sum", "sum", "fairseq.metrics.log_scalar", "fairseq.metrics.log_scalar", "sum", "fairseq.metrics.log_scalar", "log.get", "log.get", "log.get", "log.get", "math.log", "len", "math.log", "log.get"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_scalar", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_scalar", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_scalar", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log"], ["\n", "dataset", "=", "data_utils", ".", "load_indexed_dataset", "(", "\n", "split_path", ",", "\n", "self", ".", "source_dictionary", ",", "\n", "self", ".", "args", ".", "dataset_impl", ",", "\n", "combine", "=", "combine", ",", "\n", ")", "\n", "return", "dataset", "\n", "\n", "", "input0", "=", "make_dataset", "(", "'input0'", ",", "self", ".", "source_dictionary", ")", "\n", "input_options", "=", "[", "\n", "make_dataset", "(", "\n", "'input{idx}'", ".", "format", "(", "idx", "=", "idx", "+", "1", ")", ",", "\n", "self", ".", "source_dictionary", "\n", ")", "\n", "for", "idx", "in", "range", "(", "self", ".", "args", ".", "num_classes", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.sentence_ranking.SentenceRankingCriterion.logging_outputs_can_be_summed": [[110, 118], ["None"], "methods", ["None"], ["]", "\n", "\n", "if", "self", ".", "args", ".", "separator_token", "is", "not", "None", ":", "\n", "            ", "input0", "=", "PrependTokenDataset", "(", "input0", ",", "self", ".", "args", ".", "separator_token", ")", "\n", "\n", "", "src_tokens", "=", "[", "]", "\n", "for", "input_option", "in", "input_options", ":", "\n", "            ", "if", "self", ".", "args", ".", "init_token", "is", "not", "None", ":", "\n", "                ", "input_option", "=", "PrependTokenDataset", "(", "input_option", ",", "self", ".", "args", ".", "init_token", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.label_smoothed_cross_entropy_with_alignment.LabelSmoothedCrossEntropyCriterionWithAlignment.__init__": [[17, 20], ["label_smoothed_cross_entropy.LabelSmoothedCrossEntropyCriterion.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "task", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "task", ")", "\n", "self", ".", "alignment_lambda", "=", "args", ".", "alignment_lambda", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.label_smoothed_cross_entropy_with_alignment.LabelSmoothedCrossEntropyCriterionWithAlignment.add_args": [[21, 28], ["super().add_args", "parser.add_argument"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.add_args"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add criterion-specific arguments to the parser.\"\"\"", "\n", "super", "(", "LabelSmoothedCrossEntropyCriterionWithAlignment", ",", "\n", "LabelSmoothedCrossEntropyCriterionWithAlignment", ")", ".", "add_args", "(", "parser", ")", "\n", "parser", ".", "add_argument", "(", "'--alignment-lambda'", ",", "default", "=", "0.05", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'weight for the alignment loss'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.label_smoothed_cross_entropy_with_alignment.LabelSmoothedCrossEntropyCriterionWithAlignment.forward": [[29, 59], ["model", "label_smoothed_cross_entropy_with_alignment.LabelSmoothedCrossEntropyCriterionWithAlignment.compute_loss", "sample[].size", "sample[].size", "label_smoothed_cross_entropy_with_alignment.LabelSmoothedCrossEntropyCriterionWithAlignment.compute_alignment_loss", "fairseq.utils.item", "fairseq.utils.item", "fairseq.utils.item"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.label_smoothed_cross_entropy.LabelSmoothedCrossEntropyCriterion.compute_loss", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.label_smoothed_cross_entropy_with_alignment.LabelSmoothedCrossEntropyCriterionWithAlignment.compute_alignment_loss", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item"], ["", "def", "forward", "(", "self", ",", "model", ",", "sample", ",", "reduce", "=", "True", ")", ":", "\n", "        ", "\"\"\"Compute the loss for the given sample.\n\n        Returns a tuple with three elements:\n        1) the loss\n        2) the sample size, which is used as the denominator for the gradient\n        3) logging outputs to display while training\n        \"\"\"", "\n", "net_output", "=", "model", "(", "**", "sample", "[", "'net_input'", "]", ")", "\n", "loss", ",", "nll_loss", "=", "self", ".", "compute_loss", "(", "model", ",", "net_output", ",", "sample", ",", "reduce", "=", "reduce", ")", "\n", "sample_size", "=", "sample", "[", "'target'", "]", ".", "size", "(", "0", ")", "if", "self", ".", "args", ".", "sentence_avg", "else", "sample", "[", "'ntokens'", "]", "\n", "logging_output", "=", "{", "\n", "'loss'", ":", "utils", ".", "item", "(", "loss", ".", "data", ")", "if", "reduce", "else", "loss", ".", "data", ",", "\n", "'nll_loss'", ":", "utils", ".", "item", "(", "nll_loss", ".", "data", ")", "if", "reduce", "else", "nll_loss", ".", "data", ",", "\n", "'ntokens'", ":", "sample", "[", "'ntokens'", "]", ",", "\n", "'nsentences'", ":", "sample", "[", "'target'", "]", ".", "size", "(", "0", ")", ",", "\n", "'sample_size'", ":", "sample_size", ",", "\n", "}", "\n", "\n", "alignment_loss", "=", "None", "\n", "\n", "# Compute alignment loss only for training set and non dummy batches.", "\n", "if", "'alignments'", "in", "sample", "and", "sample", "[", "'alignments'", "]", "is", "not", "None", ":", "\n", "            ", "alignment_loss", "=", "self", ".", "compute_alignment_loss", "(", "sample", ",", "net_output", ")", "\n", "\n", "", "if", "alignment_loss", "is", "not", "None", ":", "\n", "            ", "logging_output", "[", "'alignment_loss'", "]", "=", "utils", ".", "item", "(", "alignment_loss", ".", "data", ")", "\n", "loss", "+=", "self", ".", "alignment_lambda", "*", "alignment_loss", "\n", "\n", "", "return", "loss", ",", "sample_size", ",", "logging_output", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.label_smoothed_cross_entropy_with_alignment.LabelSmoothedCrossEntropyCriterionWithAlignment.compute_alignment_loss": [[60, 76], ["attn_prob.view", "sample[].float", "len", "attn[].log"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log"], ["", "def", "compute_alignment_loss", "(", "self", ",", "sample", ",", "net_output", ")", ":", "\n", "        ", "attn_prob", "=", "net_output", "[", "1", "]", "[", "'attn'", "]", "[", "0", "]", "\n", "bsz", ",", "tgt_sz", ",", "src_sz", "=", "attn_prob", ".", "shape", "\n", "attn", "=", "attn_prob", ".", "view", "(", "bsz", "*", "tgt_sz", ",", "src_sz", ")", "\n", "\n", "align", "=", "sample", "[", "'alignments'", "]", "\n", "align_weights", "=", "sample", "[", "'align_weights'", "]", ".", "float", "(", ")", "\n", "\n", "if", "len", "(", "align", ")", ">", "0", ":", "\n", "# Alignment loss computation. align (shape [:, 2]) contains the src-tgt index pairs corresponding to", "\n", "# the alignments. align_weights (shape [:]) contains the 1 / frequency of a tgt index for normalizing.", "\n", "            ", "loss", "=", "-", "(", "(", "attn", "[", "align", "[", ":", ",", "1", "]", "[", ":", ",", "None", "]", ",", "align", "[", ":", ",", "0", "]", "[", ":", ",", "None", "]", "]", ")", ".", "log", "(", ")", "*", "align_weights", "[", ":", ",", "None", "]", ")", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.label_smoothed_cross_entropy_with_alignment.LabelSmoothedCrossEntropyCriterionWithAlignment.reduce_metrics": [[77, 90], ["sum", "sum", "sum", "sum", "sum", "fairseq.metrics.log_scalar", "fairseq.metrics.log_scalar", "fairseq.metrics.log_scalar", "fairseq.metrics.log_derived", "log.get", "log.get", "log.get", "log.get", "log.get", "math.log", "math.log", "math.log", "round"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_scalar", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_scalar", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_scalar", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_derived", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log"], ["", "@", "staticmethod", "\n", "def", "reduce_metrics", "(", "logging_outputs", ")", "->", "None", ":", "\n", "        ", "\"\"\"Aggregate logging outputs from data parallel training.\"\"\"", "\n", "loss_sum", "=", "utils", ".", "item", "(", "sum", "(", "log", ".", "get", "(", "'loss'", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", ")", "\n", "nll_loss_sum", "=", "utils", ".", "item", "(", "sum", "(", "log", ".", "get", "(", "'nll_loss'", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", ")", "\n", "alignment_loss_sum", "=", "utils", ".", "item", "(", "sum", "(", "log", ".", "get", "(", "'alignment_loss'", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", ")", "\n", "ntokens", "=", "utils", ".", "item", "(", "sum", "(", "log", ".", "get", "(", "'ntokens'", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", ")", "\n", "sample_size", "=", "utils", ".", "item", "(", "sum", "(", "log", ".", "get", "(", "'sample_size'", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", ")", "\n", "\n", "metrics", ".", "log_scalar", "(", "'loss'", ",", "loss_sum", "/", "sample_size", "/", "math", ".", "log", "(", "2", ")", ",", "sample_size", ",", "round", "=", "3", ")", "\n", "metrics", ".", "log_scalar", "(", "'nll_loss'", ",", "nll_loss_sum", "/", "ntokens", "/", "math", ".", "log", "(", "2", ")", ",", "ntokens", ",", "round", "=", "3", ")", "\n", "metrics", ".", "log_scalar", "(", "'alignment_loss'", ",", "alignment_loss_sum", "/", "sample_size", "/", "math", ".", "log", "(", "2", ")", ",", "sample_size", ",", "round", "=", "3", ")", "\n", "metrics", ".", "log_derived", "(", "'ppl'", ",", "lambda", "meters", ":", "utils", ".", "get_perplexity", "(", "meters", "[", "'nll_loss'", "]", ".", "avg", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.label_smoothed_cross_entropy_with_alignment.LabelSmoothedCrossEntropyCriterionWithAlignment.logging_outputs_can_be_summed": [[91, 99], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "logging_outputs_can_be_summed", "(", ")", "->", "bool", ":", "\n", "        ", "\"\"\"\n        Whether the logging outputs returned by `forward` can be summed\n        across workers prior to calling `reduce_metrics`. Setting this\n        to True will improves distributed training speed.\n        \"\"\"", "\n", "return", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.sentence_prediction.SentencePredictionCriterion.add_args": [[18, 24], ["parser.add_argument"], "methods", ["None"], ["NumelDataset", ",", "\n", "OffsetTokensDataset", ",", "\n", "PrependTokenDataset", ",", "\n", "RawLabelDataset", ",", "\n", "RightPadDataset", ",", "\n", "RollDataset", ",", "\n", "SortDataset", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.sentence_prediction.SentencePredictionCriterion.forward": [[26, 73], ["model", "model.get_targets().view", "targets.float.float.numel", "hasattr", "torch.nll_loss", "torch.nll_loss", "logits.squeeze().float.squeeze().float.squeeze().float", "targets.float.float.float", "torch.mse_loss", "torch.mse_loss", "logits.squeeze().float.squeeze().float.argmax", "model.get_targets", "torch.log_softmax", "torch.log_softmax", "fairseq.utils.item", "logits.squeeze().float.squeeze().float.squeeze"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.wav2vec.Wav2VecModel.get_targets", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item"], ["TruncateDataset", ",", "\n", ")", "\n", "from", "fairseq", ".", "tasks", "import", "FairseqTask", ",", "register_task", "\n", "\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "\n", "@", "register_task", "(", "'sentence_prediction'", ")", "\n", "class", "SentencePredictionTask", "(", "FairseqTask", ")", ":", "\n", "    ", "\"\"\"\n    Sentence (or sentence pair) prediction (classification or regression) task.\n\n    Args:\n        dictionary (Dictionary): the dictionary for the input of the task\n    \"\"\"", "\n", "\n", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add task-specific arguments to the parser.\"\"\"", "\n", "parser", ".", "add_argument", "(", "'data'", ",", "metavar", "=", "'FILE'", ",", "\n", "help", "=", "'file prefix for data'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-classes'", ",", "type", "=", "int", ",", "default", "=", "-", "1", ",", "\n", "help", "=", "'number of classes'", ")", "\n", "parser", ".", "add_argument", "(", "'--init-token'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "'add token at the beginning of each batch item'", ")", "\n", "parser", ".", "add_argument", "(", "'--separator-token'", ",", "type", "=", "int", ",", "default", "=", "None", ",", "\n", "help", "=", "'add separator token between inputs'", ")", "\n", "parser", ".", "add_argument", "(", "'--regression-target'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--no-shuffle'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--truncate-sequence'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'truncate sequence to max-positions'", ")", "\n", "parser", ".", "add_argument", "(", "'--add-prev-output-tokens'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'add prev_output_tokens to sample, used for encoder-decoder arch'", ")", "\n", "\n", "", "def", "__init__", "(", "self", ",", "args", ",", "data_dictionary", ",", "label_dictionary", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "self", ".", "dictionary", "=", "data_dictionary", "\n", "self", ".", "_label_dictionary", "=", "label_dictionary", "\n", "if", "not", "hasattr", "(", "args", ",", "'max_positions'", ")", ":", "\n", "            ", "self", ".", "_max_positions", "=", "(", "\n", "args", ".", "max_source_positions", ",", "\n", "args", ".", "max_target_positions", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_max_positions", "=", "args", ".", "max_positions", "\n", "", "args", ".", "tokens_per_sample", "=", "self", ".", "_max_positions", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.sentence_prediction.SentencePredictionCriterion.reduce_metrics": [[74, 89], ["sum", "sum", "sum", "sum", "fairseq.metrics.log_scalar", "fairseq.metrics.log_scalar", "sum", "fairseq.metrics.log_scalar", "log.get", "log.get", "log.get", "log.get", "math.log", "len", "math.log", "log.get"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_scalar", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_scalar", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_scalar", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log"], ["", "@", "classmethod", "\n", "def", "load_dictionary", "(", "cls", ",", "args", ",", "filename", ",", "source", "=", "True", ")", ":", "\n", "        ", "\"\"\"Load the dictionary from the filename\n\n        Args:\n            filename (str): the filename\n        \"\"\"", "\n", "dictionary", "=", "Dictionary", ".", "load", "(", "filename", ")", "\n", "dictionary", ".", "add_symbol", "(", "'<mask>'", ")", "\n", "return", "dictionary", "\n", "\n", "", "@", "classmethod", "\n", "def", "setup_task", "(", "cls", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "assert", "args", ".", "num_classes", ">", "0", ",", "'Must set --num-classes'", "\n", "\n", "# load data dictionary", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.sentence_prediction.SentencePredictionCriterion.logging_outputs_can_be_summed": [[90, 98], ["None"], "methods", ["None"], ["data_dict", "=", "cls", ".", "load_dictionary", "(", "\n", "args", ",", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'input0'", ",", "'dict.txt'", ")", ",", "\n", "source", "=", "True", ",", "\n", ")", "\n", "logger", ".", "info", "(", "'[input] dictionary: {} types'", ".", "format", "(", "len", "(", "data_dict", ")", ")", ")", "\n", "\n", "label_dict", "=", "None", "\n", "if", "not", "args", ".", "regression_target", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.composite_loss.CompositeLoss.add_args": [[17, 23], ["parser.add_argument"], "methods", ["None"], ["@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add criterion-specific arguments to the parser.\"\"\"", "\n", "# fmt: off", "\n", "parser", ".", "add_argument", "(", "'--underlying-criterion'", ",", "type", "=", "str", ",", "metavar", "=", "'VAL'", ",", "required", "=", "True", ",", "\n", "help", "=", "'underlying criterion to use for the composite loss'", ")", "\n", "# fmt: on", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.composite_loss.CompositeLoss.build_underlying_criterion": [[25, 33], ["task.build_criterion"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.composite_loss.CompositeLoss.build_criterion"], ["", "@", "staticmethod", "\n", "def", "build_underlying_criterion", "(", "args", ",", "task", ")", ":", "\n", "        ", "saved_criterion", "=", "args", ".", "criterion", "\n", "args", ".", "criterion", "=", "args", ".", "underlying_criterion", "\n", "assert", "saved_criterion", "!=", "args", ".", "underlying_criterion", "\n", "underlying_criterion", "=", "task", ".", "build_criterion", "(", "args", ")", "\n", "args", ".", "criterion", "=", "saved_criterion", "\n", "return", "underlying_criterion", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.composite_loss.CompositeLoss.build_criterion": [[34, 96], ["composite_loss.CompositeLoss.build_underlying_criterion", "_CompositeLoss", "fairseq.criterions.FairseqCriterion.__init__", "composite_loss.CompositeLoss.model.get_normalized_probs", "fairseq.criterions.FairseqCriterion.__init__", "model", "targets[].size", "[].new().float().zero_", "zip", "[].new().float().zero_.div_", "len", "composite_loss.CompositeLoss.build_underlying_criterion", "composite_loss.CompositeLoss.build_underlying_criterion", "FakeModel", "composite_loss.CompositeLoss.underlying_criterion", "len", "fairseq.utils.item", "[].new().float", "[].new"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.composite_loss.CompositeLoss.build_underlying_criterion", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.get_normalized_probs", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.composite_loss.CompositeLoss.build_underlying_criterion", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.composite_loss.CompositeLoss.build_underlying_criterion", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item"], ["", "@", "classmethod", "\n", "def", "build_criterion", "(", "cls", ",", "args", ",", "task", ")", ":", "\n", "        ", "underlying_criterion", "=", "CompositeLoss", ".", "build_underlying_criterion", "(", "args", ",", "task", ")", "\n", "\n", "class", "FakeModel", "(", "nn", ".", "Module", ")", ":", "\n", "\n", "            ", "def", "__init__", "(", "self", ",", "model", ",", "net_out", ",", "target", ")", ":", "\n", "                ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "net_out", "=", "net_out", "\n", "self", ".", "target", "=", "target", "\n", "\n", "", "def", "forward", "(", "self", ",", "**", "unused", ")", ":", "\n", "                ", "return", "self", ".", "net_out", "\n", "\n", "", "def", "get_normalized_probs", "(", "self", ",", "net_output", ",", "log_probs", ",", "sample", "=", "None", ")", ":", "\n", "                ", "return", "self", ".", "model", ".", "get_normalized_probs", "(", "net_output", ",", "log_probs", ",", "sample", "=", "sample", ")", "\n", "\n", "", "def", "get_targets", "(", "self", ",", "*", "unused", ")", ":", "\n", "                ", "return", "self", ".", "target", "\n", "\n", "", "@", "property", "\n", "def", "decoder", "(", "self", ")", ":", "\n", "                ", "return", "self", ".", "model", ".", "decoder", "\n", "\n", "", "", "class", "_CompositeLoss", "(", "FairseqCriterion", ")", ":", "\n", "\n", "            ", "def", "__init__", "(", "self", ",", "args", ",", "task", ",", "underlying_criterion", ")", ":", "\n", "                ", "super", "(", ")", ".", "__init__", "(", "args", ",", "task", ")", "\n", "self", ".", "underlying_criterion", "=", "underlying_criterion", "\n", "\n", "", "def", "forward", "(", "self", ",", "model", ",", "sample", ",", "reduce", "=", "True", ")", ":", "\n", "                ", "net_outputs", "=", "model", "(", "**", "sample", "[", "'net_input'", "]", ")", "\n", "targets", "=", "sample", "[", "'target'", "]", "\n", "\n", "bsz", "=", "targets", "[", "0", "]", ".", "size", "(", "0", ")", "\n", "loss", "=", "net_outputs", "[", "0", "]", "[", "0", "]", ".", "new", "(", "1", "if", "reduce", "else", "bsz", ")", ".", "float", "(", ")", ".", "zero_", "(", ")", "\n", "\n", "sample_size", "=", "0", "\n", "logging_output", "=", "{", "}", "\n", "for", "o", ",", "t", "in", "zip", "(", "net_outputs", "[", "0", "]", ",", "targets", ")", ":", "\n", "                    ", "m", "=", "FakeModel", "(", "model", ",", "(", "o", ",", "net_outputs", "[", "1", "]", ")", ",", "t", ")", "\n", "sample", "[", "'target'", "]", "=", "t", "\n", "l", ",", "ss", ",", "logging_output", "=", "self", ".", "underlying_criterion", "(", "m", ",", "sample", ",", "reduce", ")", "\n", "loss", "+=", "l", "\n", "sample_size", "+=", "ss", "\n", "\n", "", "loss", ".", "div_", "(", "len", "(", "targets", ")", ")", "\n", "sample_size", "/=", "len", "(", "targets", ")", "\n", "\n", "logging_output", "[", "'loss'", "]", "=", "utils", ".", "item", "(", "loss", ".", "data", ")", "if", "reduce", "else", "loss", ".", "data", "\n", "return", "loss", ",", "sample_size", ",", "logging_output", "\n", "\n", "", "@", "staticmethod", "\n", "def", "aggregate_logging_outputs", "(", "logging_outputs", ")", ":", "\n", "                ", "return", "underlying_criterion", ".", "__class__", ".", "aggregate_logging_outputs", "(", "logging_outputs", ")", "\n", "\n", "", "@", "staticmethod", "\n", "def", "reduce_metrics", "(", "logging_outputs", ")", "->", "None", ":", "\n", "                ", "underlying_criterion", ".", "__class__", ".", "reduce_metrics", "(", "logging_outputs", ")", "\n", "\n", "", "", "return", "_CompositeLoss", "(", "args", ",", "task", ",", "underlying_criterion", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.binary_cross_entropy.BinaryCrossEntropyCriterion.__init__": [[19, 21], ["fairseq.criterions.FairseqCriterion.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "task", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "task", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.binary_cross_entropy.BinaryCrossEntropyCriterion.forward": [[22, 59], ["model", "model.get_logits().float", "model.get_targets().float", "hasattr", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "model.get_targets().float.numel", "model.get_target_weights", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "loss.sum.sum.sum", "model.get_logits().float.size", "model.get_logits().float.cpu().numpy", "model.get_targets().float.cpu().numpy", "model.get_logits", "model.get_targets", "weights.float.float.float", "fairseq.utils.item", "model.get_logits().float.cpu", "model.get_targets().float.cpu"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.wav2vec.Wav2VecModel.get_target_weights", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.wav2vec.Wav2VecModel.get_logits", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.wav2vec.Wav2VecModel.get_targets", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item"], ["", "def", "forward", "(", "self", ",", "model", ",", "sample", ",", "reduce", "=", "True", ",", "log_pred", "=", "False", ")", ":", "\n", "        ", "\"\"\"Compute the loss for the given sample.\n\n        Returns a tuple with three elements:\n        1) the loss\n        2) the sample size, which is used as the denominator for the gradient\n        3) logging outputs to display while training\n        \"\"\"", "\n", "net_output", "=", "model", "(", "**", "sample", "[", "'net_input'", "]", ")", "\n", "logits", "=", "model", ".", "get_logits", "(", "net_output", ")", ".", "float", "(", ")", "\n", "target", "=", "model", ".", "get_targets", "(", "sample", ",", "net_output", ")", ".", "float", "(", ")", "\n", "\n", "if", "hasattr", "(", "model", ",", "'get_target_weights'", ")", ":", "\n", "            ", "weights", "=", "model", ".", "get_target_weights", "(", "target", ",", "net_output", ")", "\n", "if", "torch", ".", "is_tensor", "(", "weights", ")", ":", "\n", "                ", "weights", "=", "weights", ".", "float", "(", ")", "\n", "", "", "else", ":", "\n", "            ", "weights", "=", "1.", "\n", "\n", "", "loss", "=", "F", ".", "binary_cross_entropy_with_logits", "(", "logits", ",", "target", ",", "reduce", "=", "False", ")", "\n", "\n", "loss", "=", "loss", "*", "weights", "\n", "\n", "if", "reduce", ":", "\n", "            ", "loss", "=", "loss", ".", "sum", "(", ")", "\n", "\n", "", "sample_size", "=", "target", ".", "numel", "(", ")", "\n", "logging_output", "=", "{", "\n", "'loss'", ":", "loss", ".", "data", ",", "\n", "'ntokens'", ":", "sample_size", ",", "\n", "'nsentences'", ":", "logits", ".", "size", "(", "0", ")", ",", "\n", "'sample_size'", ":", "sample_size", ",", "\n", "}", "\n", "if", "log_pred", ":", "\n", "            ", "logging_output", "[", "'logits'", "]", "=", "logits", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "logging_output", "[", "'target'", "]", "=", "target", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "return", "loss", ",", "sample_size", ",", "logging_output", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.criterions.binary_cross_entropy.BinaryCrossEntropyCriterion.aggregate_logging_outputs": [[60, 84], ["sum", "sum", "sum", "sum", "log.get", "log.get", "log.get", "log.get", "math.log", "math.log", "len", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log"], ["", "@", "staticmethod", "\n", "def", "aggregate_logging_outputs", "(", "logging_outputs", ")", ":", "\n", "        ", "\"\"\"Aggregate logging outputs from data parallel training.\"\"\"", "\n", "loss_sum", "=", "utils", ".", "item", "(", "sum", "(", "log", ".", "get", "(", "'loss'", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", ")", "\n", "ntokens", "=", "utils", ".", "item", "(", "sum", "(", "log", ".", "get", "(", "'ntokens'", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", ")", "\n", "nsentences", "=", "utils", ".", "item", "(", "sum", "(", "log", ".", "get", "(", "'nsentences'", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", ")", "\n", "sample_size", "=", "utils", ".", "item", "(", "sum", "(", "log", ".", "get", "(", "'sample_size'", ",", "0", ")", "for", "log", "in", "logging_outputs", ")", ")", "\n", "agg_output", "=", "{", "\n", "'loss'", ":", "loss_sum", "/", "sample_size", "/", "math", ".", "log", "(", "2", ")", ",", "\n", "'ntokens'", ":", "ntokens", ",", "\n", "'nsentences'", ":", "nsentences", ",", "\n", "'sample_size'", ":", "sample_size", ",", "\n", "}", "\n", "if", "sample_size", "!=", "ntokens", ":", "\n", "            ", "agg_output", "[", "'nll_loss'", "]", "=", "loss_sum", "/", "ntokens", "/", "math", ".", "log", "(", "2", ")", "\n", "", "return", "agg_output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.asr_dataset.AsrDataset.__init__": [[32, 62], ["all", "collaters.Seq2SeqCollater", "int", "len", "len", "len", "len", "len", "len", "len", "len", "len", "asr_dataset.AsrDataset.tgt_dict.pad", "asr_dataset.AsrDataset.tgt_dict.eos"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos"], ["def", "__init__", "(", "\n", "self", ",", "aud_paths", ",", "aud_durations_ms", ",", "tgt", ",", "\n", "tgt_dict", ",", "ids", ",", "speakers", ",", "\n", "num_mel_bins", "=", "80", ",", "frame_length", "=", "25.0", ",", "frame_shift", "=", "10.0", "\n", ")", ":", "\n", "        ", "assert", "frame_length", ">", "0", "\n", "assert", "frame_shift", ">", "0", "\n", "assert", "all", "(", "x", ">", "frame_length", "for", "x", "in", "aud_durations_ms", ")", "\n", "self", ".", "frame_sizes", "=", "[", "\n", "int", "(", "1", "+", "(", "d", "-", "frame_length", ")", "/", "frame_shift", ")", "\n", "for", "d", "in", "aud_durations_ms", "\n", "]", "\n", "\n", "assert", "len", "(", "aud_paths", ")", ">", "0", "\n", "assert", "len", "(", "aud_paths", ")", "==", "len", "(", "aud_durations_ms", ")", "\n", "assert", "len", "(", "aud_paths", ")", "==", "len", "(", "tgt", ")", "\n", "assert", "len", "(", "aud_paths", ")", "==", "len", "(", "ids", ")", "\n", "assert", "len", "(", "aud_paths", ")", "==", "len", "(", "speakers", ")", "\n", "self", ".", "aud_paths", "=", "aud_paths", "\n", "self", ".", "tgt_dict", "=", "tgt_dict", "\n", "self", ".", "tgt", "=", "tgt", "\n", "self", ".", "ids", "=", "ids", "\n", "self", ".", "speakers", "=", "speakers", "\n", "self", ".", "num_mel_bins", "=", "num_mel_bins", "\n", "self", ".", "frame_length", "=", "frame_length", "\n", "self", ".", "frame_shift", "=", "frame_shift", "\n", "\n", "self", ".", "s2s_collater", "=", "Seq2SeqCollater", "(", "\n", "0", ",", "1", ",", "pad_index", "=", "self", ".", "tgt_dict", ".", "pad", "(", ")", ",", "\n", "eos_index", "=", "self", ".", "tgt_dict", ".", "eos", "(", ")", ",", "move_eos_to_beginning", "=", "True", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.asr_dataset.AsrDataset.__getitem__": [[64, 82], ["torchaudio.load_wav", "kaldi.fbank", "data_utils.apply_mv_norm", "os.path.exists", "FileNotFoundError", "data_utils.apply_mv_norm.detach"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.apply_mv_norm", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "import", "torchaudio", "\n", "import", "torchaudio", ".", "compliance", ".", "kaldi", "as", "kaldi", "\n", "tgt_item", "=", "self", ".", "tgt", "[", "index", "]", "if", "self", ".", "tgt", "is", "not", "None", "else", "None", "\n", "\n", "path", "=", "self", ".", "aud_paths", "[", "index", "]", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "path", ")", ":", "\n", "            ", "raise", "FileNotFoundError", "(", "\"Audio file not found: {}\"", ".", "format", "(", "path", ")", ")", "\n", "", "sound", ",", "sample_rate", "=", "torchaudio", ".", "load_wav", "(", "path", ")", "\n", "output", "=", "kaldi", ".", "fbank", "(", "\n", "sound", ",", "\n", "num_mel_bins", "=", "self", ".", "num_mel_bins", ",", "\n", "frame_length", "=", "self", ".", "frame_length", ",", "\n", "frame_shift", "=", "self", ".", "frame_shift", "\n", ")", "\n", "output_cmvn", "=", "data_utils", ".", "apply_mv_norm", "(", "output", ")", "\n", "\n", "return", "{", "\"id\"", ":", "index", ",", "\"data\"", ":", "[", "output_cmvn", ".", "detach", "(", ")", ",", "tgt_item", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.asr_dataset.AsrDataset.__len__": [[83, 85], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "aud_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.asr_dataset.AsrDataset.collater": [[86, 96], ["asr_dataset.AsrDataset.s2s_collater.collate"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.denoising_dataset.collate"], ["", "def", "collater", "(", "self", ",", "samples", ")", ":", "\n", "        ", "\"\"\"Merge a list of samples to form a mini-batch.\n\n        Args:\n            samples (List[int]): sample indices to collate\n\n        Returns:\n            dict: a mini-batch suitable for forwarding with a Model\n        \"\"\"", "\n", "return", "self", ".", "s2s_collater", ".", "collate", "(", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.asr_dataset.AsrDataset.num_tokens": [[97, 99], ["None"], "methods", ["None"], ["", "def", "num_tokens", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "frame_sizes", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.asr_dataset.AsrDataset.size": [[100, 106], ["len"], "methods", ["None"], ["", "def", "size", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Return an example's size as a float or tuple. This value is used when\n        filtering a dataset with ``--max-positions``.\"\"\"", "\n", "return", "(", "\n", "self", ".", "frame_sizes", "[", "index", "]", ",", "\n", "len", "(", "self", ".", "tgt", "[", "index", "]", ")", "if", "self", ".", "tgt", "is", "not", "None", "else", "0", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.asr_dataset.AsrDataset.ordered_indices": [[108, 112], ["numpy.arange", "len"], "methods", ["None"], ["", "def", "ordered_indices", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return an ordered list of indices. Batches will be constructed based\n        on this order.\"\"\"", "\n", "return", "np", ".", "arange", "(", "len", "(", "self", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.collaters.Seq2SeqCollater.__init__": [[29, 42], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "feature_index", "=", "0", ",", "\n", "label_index", "=", "1", ",", "\n", "pad_index", "=", "1", ",", "\n", "eos_index", "=", "2", ",", "\n", "move_eos_to_beginning", "=", "True", ",", "\n", ")", ":", "\n", "        ", "self", ".", "feature_index", "=", "feature_index", "\n", "self", ".", "label_index", "=", "label_index", "\n", "self", ".", "pad_index", "=", "pad_index", "\n", "self", ".", "eos_index", "=", "eos_index", "\n", "self", ".", "move_eos_to_beginning", "=", "move_eos_to_beginning", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.collaters.Seq2SeqCollater._collate_frames": [[43, 59], ["max", "frames[].size", "frames[].new().fill_", "enumerate", "frame.size", "frames[].new", "len", "v.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "_collate_frames", "(", "self", ",", "frames", ")", ":", "\n", "        ", "\"\"\"Convert a list of 2d frames into a padded 3d tensor\n        Args:\n            frames (list): list of 2d frames of size L[i]*f_dim. Where L[i] is\n                length of i-th frame and f_dim is static dimension of features\n        Returns:\n            3d tensor of size len(frames)*len_max*f_dim where len_max is max of L[i]\n        \"\"\"", "\n", "len_max", "=", "max", "(", "frame", ".", "size", "(", "0", ")", "for", "frame", "in", "frames", ")", "\n", "f_dim", "=", "frames", "[", "0", "]", ".", "size", "(", "1", ")", "\n", "res", "=", "frames", "[", "0", "]", ".", "new", "(", "len", "(", "frames", ")", ",", "len_max", ",", "f_dim", ")", ".", "fill_", "(", "0.0", ")", "\n", "\n", "for", "i", ",", "v", "in", "enumerate", "(", "frames", ")", ":", "\n", "            ", "res", "[", "i", ",", ":", "v", ".", "size", "(", "0", ")", "]", "=", "v", "\n", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.collaters.Seq2SeqCollater.collate": [[60, 132], ["torch.LongTensor", "collaters.Seq2SeqCollater._collate_frames", "torch.LongTensor", "torch.LongTensor.sort", "id.index_select.index_select.index_select", "frames.index_select.index_select.index_select", "len", "isinstance", "isinstance", "parsed_samples.append", "samples[].get", "sum", "fairseq.data.data_utils.collate_tokens", "torch.LongTensor.index_select", "torch.LongTensor().index_select", "fairseq.data.data_utils.collate_tokens", "prev_output_tokens.index_select.index_select.index_select", "sum", "len", "torch.from_numpy", "torch.from_numpy().long", "isinstance", "s[].size", "torch.LongTensor", "len", "torch.LongTensor", "len", "torch.from_numpy", "s[].size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.collaters.Seq2SeqCollater._collate_frames", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.collate_tokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.collate_tokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "collate", "(", "self", ",", "samples", ")", ":", "\n", "        ", "\"\"\"\n        utility function to collate samples into batch for speech recognition.\n        \"\"\"", "\n", "if", "len", "(", "samples", ")", "==", "0", ":", "\n", "            ", "return", "{", "}", "\n", "\n", "# parse samples into torch tensors", "\n", "", "parsed_samples", "=", "[", "]", "\n", "for", "s", "in", "samples", ":", "\n", "# skip invalid samples", "\n", "            ", "if", "s", "[", "\"data\"", "]", "[", "self", ".", "feature_index", "]", "is", "None", ":", "\n", "                ", "continue", "\n", "", "source", "=", "s", "[", "\"data\"", "]", "[", "self", ".", "feature_index", "]", "\n", "if", "isinstance", "(", "source", ",", "(", "np", ".", "ndarray", ",", "np", ".", "generic", ")", ")", ":", "\n", "                ", "source", "=", "torch", ".", "from_numpy", "(", "source", ")", "\n", "", "target", "=", "s", "[", "\"data\"", "]", "[", "self", ".", "label_index", "]", "\n", "if", "isinstance", "(", "target", ",", "(", "np", ".", "ndarray", ",", "np", ".", "generic", ")", ")", ":", "\n", "                ", "target", "=", "torch", ".", "from_numpy", "(", "target", ")", ".", "long", "(", ")", "\n", "", "elif", "isinstance", "(", "target", ",", "list", ")", ":", "\n", "                ", "target", "=", "torch", ".", "LongTensor", "(", "target", ")", "\n", "\n", "", "parsed_sample", "=", "{", "\"id\"", ":", "s", "[", "\"id\"", "]", ",", "\"source\"", ":", "source", ",", "\"target\"", ":", "target", "}", "\n", "parsed_samples", ".", "append", "(", "parsed_sample", ")", "\n", "", "samples", "=", "parsed_samples", "\n", "\n", "id", "=", "torch", ".", "LongTensor", "(", "[", "s", "[", "\"id\"", "]", "for", "s", "in", "samples", "]", ")", "\n", "frames", "=", "self", ".", "_collate_frames", "(", "[", "s", "[", "\"source\"", "]", "for", "s", "in", "samples", "]", ")", "\n", "# sort samples by descending number of frames", "\n", "frames_lengths", "=", "torch", ".", "LongTensor", "(", "[", "s", "[", "\"source\"", "]", ".", "size", "(", "0", ")", "for", "s", "in", "samples", "]", ")", "\n", "frames_lengths", ",", "sort_order", "=", "frames_lengths", ".", "sort", "(", "descending", "=", "True", ")", "\n", "id", "=", "id", ".", "index_select", "(", "0", ",", "sort_order", ")", "\n", "frames", "=", "frames", ".", "index_select", "(", "0", ",", "sort_order", ")", "\n", "\n", "target", "=", "None", "\n", "target_lengths", "=", "None", "\n", "prev_output_tokens", "=", "None", "\n", "if", "samples", "[", "0", "]", ".", "get", "(", "\"target\"", ",", "None", ")", "is", "not", "None", ":", "\n", "            ", "ntokens", "=", "sum", "(", "len", "(", "s", "[", "\"target\"", "]", ")", "for", "s", "in", "samples", ")", "\n", "target", "=", "fairseq_data_utils", ".", "collate_tokens", "(", "\n", "[", "s", "[", "\"target\"", "]", "for", "s", "in", "samples", "]", ",", "\n", "self", ".", "pad_index", ",", "\n", "self", ".", "eos_index", ",", "\n", "left_pad", "=", "False", ",", "\n", "move_eos_to_beginning", "=", "False", ",", "\n", ")", "\n", "target", "=", "target", ".", "index_select", "(", "0", ",", "sort_order", ")", "\n", "target_lengths", "=", "torch", ".", "LongTensor", "(", "\n", "[", "s", "[", "\"target\"", "]", ".", "size", "(", "0", ")", "for", "s", "in", "samples", "]", "\n", ")", ".", "index_select", "(", "0", ",", "sort_order", ")", "\n", "prev_output_tokens", "=", "fairseq_data_utils", ".", "collate_tokens", "(", "\n", "[", "s", "[", "\"target\"", "]", "for", "s", "in", "samples", "]", ",", "\n", "self", ".", "pad_index", ",", "\n", "self", ".", "eos_index", ",", "\n", "left_pad", "=", "False", ",", "\n", "move_eos_to_beginning", "=", "self", ".", "move_eos_to_beginning", ",", "\n", ")", "\n", "prev_output_tokens", "=", "prev_output_tokens", ".", "index_select", "(", "0", ",", "sort_order", ")", "\n", "", "else", ":", "\n", "            ", "ntokens", "=", "sum", "(", "len", "(", "s", "[", "\"source\"", "]", ")", "for", "s", "in", "samples", ")", "\n", "\n", "", "batch", "=", "{", "\n", "\"id\"", ":", "id", ",", "\n", "\"ntokens\"", ":", "ntokens", ",", "\n", "\"net_input\"", ":", "{", "\"src_tokens\"", ":", "frames", ",", "\"src_lengths\"", ":", "frames_lengths", "}", ",", "\n", "\"target\"", ":", "target", ",", "\n", "\"target_lengths\"", ":", "target_lengths", ",", "\n", "\"nsentences\"", ":", "len", "(", "samples", ")", ",", "\n", "}", "\n", "if", "prev_output_tokens", "is", "not", "None", ":", "\n", "            ", "batch", "[", "\"net_input\"", "]", "[", "\"prev_output_tokens\"", "]", "=", "prev_output_tokens", "\n", "", "return", "batch", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.calc_mean_invstddev": [[9, 19], ["feature.mean", "feature.var", "len", "ValueError", "feature.size", "torch.sqrt", "torch.sqrt"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["def", "calc_mean_invstddev", "(", "feature", ")", ":", "\n", "    ", "if", "len", "(", "feature", ".", "size", "(", ")", ")", "!=", "2", ":", "\n", "        ", "raise", "ValueError", "(", "\"We expect the input feature to be 2-D tensor\"", ")", "\n", "", "mean", "=", "feature", ".", "mean", "(", "0", ")", "\n", "var", "=", "feature", ".", "var", "(", "0", ")", "\n", "# avoid division by ~zero", "\n", "eps", "=", "1e-8", "\n", "if", "(", "var", "<", "eps", ")", ".", "any", "(", ")", ":", "\n", "        ", "return", "mean", ",", "1.0", "/", "(", "torch", ".", "sqrt", "(", "var", ")", "+", "eps", ")", "\n", "", "return", "mean", ",", "1.0", "/", "torch", ".", "sqrt", "(", "var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.apply_mv_norm": [[21, 25], ["data_utils.calc_mean_invstddev"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.calc_mean_invstddev"], ["", "def", "apply_mv_norm", "(", "features", ")", ":", "\n", "    ", "mean", ",", "invstddev", "=", "calc_mean_invstddev", "(", "features", ")", "\n", "res", "=", "(", "features", "-", "mean", ")", "*", "invstddev", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.lengths_to_encoder_padding_mask": [[27, 61], ["torch.max().item", "lengths.size", "torch.arange().to().view().expand", "lengths.view().expand", "torch.max", "encoder_padding_mask.t", "torch.arange().to().view", "lengths.view", "torch.arange().to", "torch.arange"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "lengths_to_encoder_padding_mask", "(", "lengths", ",", "batch_first", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    convert lengths (a 1-D Long/Int tensor) to 2-D binary tensor\n\n    Args:\n        lengths: a (B, )-shaped tensor\n\n    Return:\n        max_length: maximum length of B sequences\n        encoder_padding_mask: a (max_length, B) binary mask, where\n        [t, b] = 0 for t < lengths[b] and 1 otherwise\n\n    TODO:\n        kernelize this function if benchmarking shows this function is slow\n    \"\"\"", "\n", "max_lengths", "=", "torch", ".", "max", "(", "lengths", ")", ".", "item", "(", ")", "\n", "bsz", "=", "lengths", ".", "size", "(", "0", ")", "\n", "encoder_padding_mask", "=", "torch", ".", "arange", "(", "\n", "max_lengths", "\n", ")", ".", "to", "(", "# a (T, ) tensor with [0, ..., T-1]", "\n", "lengths", ".", "device", "\n", ")", ".", "view", "(", "# move to the right device", "\n", "1", ",", "max_lengths", "\n", ")", ".", "expand", "(", "# reshape to (1, T)-shaped tensor", "\n", "bsz", ",", "-", "1", "\n", ")", ">=", "lengths", ".", "view", "(", "# expand to (B, T)-shaped tensor", "\n", "bsz", ",", "1", "\n", ")", ".", "expand", "(", "\n", "-", "1", ",", "max_lengths", "\n", ")", "\n", "if", "not", "batch_first", ":", "\n", "        ", "return", "encoder_padding_mask", ".", "t", "(", ")", ",", "max_lengths", "\n", "", "else", ":", "\n", "        ", "return", "encoder_padding_mask", ",", "max_lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.encoder_padding_mask_to_lengths": [[63, 97], ["torch.Tensor().to().to", "encoder_padding_mask.size", "encoder_padding_mask.size", "torch.sum", "torch.Tensor().to", "torch.Tensor"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "", "def", "encoder_padding_mask_to_lengths", "(", "\n", "encoder_padding_mask", ",", "max_lengths", ",", "batch_size", ",", "device", "\n", ")", ":", "\n", "    ", "\"\"\"\n    convert encoder_padding_mask (2-D binary tensor) to a 1-D tensor\n\n    Conventionally, encoder output contains a encoder_padding_mask, which is\n    a 2-D mask in a shape (T, B), whose (t, b) element indicate whether\n    encoder_out[t, b] is a valid output (=0) or not (=1). Occasionally, we\n    need to convert this mask tensor to a 1-D tensor in shape (B, ), where\n    [b] denotes the valid length of b-th sequence\n\n    Args:\n        encoder_padding_mask: a (T, B)-shaped binary tensor or None; if None,\n        indicating all are valid\n    Return:\n        seq_lengths: a (B,)-shaped tensor, where its (b, )-th element is the\n        number of valid elements of b-th sequence\n\n        max_lengths: maximum length of all sequence, if encoder_padding_mask is\n        not None, max_lengths must equal to encoder_padding_mask.size(0)\n\n        batch_size: batch size; if encoder_padding_mask is\n        not None, max_lengths must equal to encoder_padding_mask.size(1)\n\n        device: which device to put the result on\n    \"\"\"", "\n", "if", "encoder_padding_mask", "is", "None", ":", "\n", "        ", "return", "torch", ".", "Tensor", "(", "[", "max_lengths", "]", "*", "batch_size", ")", ".", "to", "(", "torch", ".", "int32", ")", ".", "to", "(", "device", ")", "\n", "\n", "", "assert", "encoder_padding_mask", ".", "size", "(", "0", ")", "==", "max_lengths", ",", "\"max_lengths does not match\"", "\n", "assert", "encoder_padding_mask", ".", "size", "(", "1", ")", "==", "batch_size", ",", "\"batch_size does not match\"", "\n", "\n", "return", "max_lengths", "-", "torch", ".", "sum", "(", "encoder_padding_mask", ",", "dim", "=", "0", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.replabels.replabel_symbol": [[13, 19], ["str"], "function", ["None"], ["def", "replabel_symbol", "(", "i", ")", ":", "\n", "    ", "\"\"\"\n    Replabel symbols used in wav2letter, currently just \"1\", \"2\", ...\n    This prevents training with numeral tokens, so this might change in the future\n    \"\"\"", "\n", "return", "str", "(", "i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.replabels.pack_replabels": [[21, 47], ["range", "dictionary.index", "result.append", "len", "replabels.replabel_symbol", "result.append", "result.append"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.index", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.replabels.replabel_symbol"], ["", "def", "pack_replabels", "(", "tokens", ",", "dictionary", ",", "max_reps", ")", ":", "\n", "    ", "\"\"\"\n    Pack a token sequence so that repeated symbols are replaced by replabels\n    \"\"\"", "\n", "if", "len", "(", "tokens", ")", "==", "0", "or", "max_reps", "<=", "0", ":", "\n", "        ", "return", "tokens", "\n", "\n", "", "replabel_value_to_idx", "=", "[", "0", "]", "*", "(", "max_reps", "+", "1", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "max_reps", "+", "1", ")", ":", "\n", "        ", "replabel_value_to_idx", "[", "i", "]", "=", "dictionary", ".", "index", "(", "replabel_symbol", "(", "i", ")", ")", "\n", "\n", "", "result", "=", "[", "]", "\n", "prev_token", "=", "-", "1", "\n", "num_reps", "=", "0", "\n", "for", "token", "in", "tokens", ":", "\n", "        ", "if", "token", "==", "prev_token", "and", "num_reps", "<", "max_reps", ":", "\n", "            ", "num_reps", "+=", "1", "\n", "", "else", ":", "\n", "            ", "if", "num_reps", ">", "0", ":", "\n", "                ", "result", ".", "append", "(", "replabel_value_to_idx", "[", "num_reps", "]", ")", "\n", "num_reps", "=", "0", "\n", "", "result", ".", "append", "(", "token", ")", "\n", "prev_token", "=", "token", "\n", "", "", "if", "num_reps", ">", "0", ":", "\n", "        ", "result", ".", "append", "(", "replabel_value_to_idx", "[", "num_reps", "]", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.replabels.unpack_replabels": [[49, 71], ["range", "len", "range", "dictionary.index", "result.append", "result.append", "replabels.replabel_symbol"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.index", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.replabels.replabel_symbol"], ["", "def", "unpack_replabels", "(", "tokens", ",", "dictionary", ",", "max_reps", ")", ":", "\n", "    ", "\"\"\"\n    Unpack a token sequence so that replabels are replaced by repeated symbols\n    \"\"\"", "\n", "if", "len", "(", "tokens", ")", "==", "0", "or", "max_reps", "<=", "0", ":", "\n", "        ", "return", "tokens", "\n", "\n", "", "replabel_idx_to_value", "=", "{", "}", "\n", "for", "i", "in", "range", "(", "1", ",", "max_reps", "+", "1", ")", ":", "\n", "        ", "replabel_idx_to_value", "[", "dictionary", ".", "index", "(", "replabel_symbol", "(", "i", ")", ")", "]", "=", "i", "\n", "\n", "", "result", "=", "[", "]", "\n", "prev_token", "=", "-", "1", "\n", "for", "token", "in", "tokens", ":", "\n", "        ", "try", ":", "\n", "            ", "for", "_", "in", "range", "(", "replabel_idx_to_value", "[", "token", "]", ")", ":", "\n", "                ", "result", ".", "append", "(", "prev_token", ")", "\n", "", "prev_token", "=", "-", "1", "\n", "", "except", "KeyError", ":", "\n", "            ", "result", ".", "append", "(", "token", ")", "\n", "prev_token", "=", "token", "\n", "", "", "return", "result", "\n", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.concat_sentences_dataset.ConcatSentencesDataset.__init__": [[13, 18], ["FairseqDataset.__init__", "all", "len", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "datasets", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "datasets", "=", "datasets", "\n", "assert", "all", "(", "len", "(", "ds", ")", "==", "len", "(", "datasets", "[", "0", "]", ")", "for", "ds", "in", "datasets", ")", ",", "'datasets must have the same length'", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.concat_sentences_dataset.ConcatSentencesDataset.__getitem__": [[19, 21], ["torch.cat"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "[", "ds", "[", "index", "]", "for", "ds", "in", "self", ".", "datasets", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.concat_sentences_dataset.ConcatSentencesDataset.__len__": [[22, 24], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "datasets", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.concat_sentences_dataset.ConcatSentencesDataset.collater": [[25, 27], ["concat_sentences_dataset.ConcatSentencesDataset.datasets[].collater"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.collater"], ["", "def", "collater", "(", "self", ",", "samples", ")", ":", "\n", "        ", "return", "self", ".", "datasets", "[", "0", "]", ".", "collater", "(", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.concat_sentences_dataset.ConcatSentencesDataset.sizes": [[28, 31], ["sum"], "methods", ["None"], ["", "@", "property", "\n", "def", "sizes", "(", "self", ")", ":", "\n", "        ", "return", "sum", "(", "ds", ".", "sizes", "for", "ds", "in", "self", ".", "datasets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.concat_sentences_dataset.ConcatSentencesDataset.num_tokens": [[32, 34], ["sum", "ds.num_tokens"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.num_tokens"], ["", "def", "num_tokens", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "sum", "(", "ds", ".", "num_tokens", "(", "index", ")", "for", "ds", "in", "self", ".", "datasets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.concat_sentences_dataset.ConcatSentencesDataset.size": [[35, 37], ["sum", "ds.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "size", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "sum", "(", "ds", ".", "size", "(", "index", ")", "for", "ds", "in", "self", ".", "datasets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.concat_sentences_dataset.ConcatSentencesDataset.ordered_indices": [[38, 40], ["concat_sentences_dataset.ConcatSentencesDataset.datasets[].ordered_indices"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.ordered_indices"], ["", "def", "ordered_indices", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "datasets", "[", "0", "]", ".", "ordered_indices", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.concat_sentences_dataset.ConcatSentencesDataset.supports_prefetch": [[41, 45], ["any", "getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "supports_prefetch", "(", "self", ")", ":", "\n", "        ", "return", "any", "(", "\n", "getattr", "(", "ds", ",", "'supports_prefetch'", ",", "False", ")", "for", "ds", "in", "self", ".", "datasets", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.concat_sentences_dataset.ConcatSentencesDataset.prefetch": [[47, 51], ["getattr", "ds.prefetch"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.block_pair_dataset.BlockPairDataset.prefetch"], ["", "def", "prefetch", "(", "self", ",", "indices", ")", ":", "\n", "        ", "for", "ds", "in", "self", ".", "datasets", ":", "\n", "            ", "if", "getattr", "(", "ds", ",", "'supports_prefetch'", ",", "False", ")", ":", "\n", "                ", "ds", ".", "prefetch", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.concat_sentences_dataset.ConcatSentencesDataset.set_epoch": [[52, 57], ["super().set_epoch", "hasattr", "ds.set_epoch"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.denoising_dataset.DenoisingDataset.set_epoch", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.denoising_dataset.DenoisingDataset.set_epoch"], ["", "", "", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "super", "(", ")", ".", "set_epoch", "(", "epoch", ")", "\n", "for", "ds", "in", "self", ".", "datasets", ":", "\n", "            ", "if", "hasattr", "(", "ds", ",", "'set_epoch'", ")", ":", "\n", "                ", "ds", ".", "set_epoch", "(", "epoch", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.offset_tokens_dataset.OffsetTokensDataset.__init__": [[11, 14], ["BaseWrapperDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "offset", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset", ")", "\n", "self", ".", "offset", "=", "offset", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.offset_tokens_dataset.OffsetTokensDataset.__getitem__": [[15, 17], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "dataset", "[", "idx", "]", "+", "self", ".", "offset", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.fairseq_dataset.EpochListening.set_epoch": [[12, 16], ["None"], "methods", ["None"], ["def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"Will receive the updated epoch number at the beginning of the epoch.\n        \"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.fairseq_dataset.FairseqDataset.__getitem__": [[21, 23], ["None"], "methods", ["None"], ["def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.fairseq_dataset.FairseqDataset.__len__": [[24, 26], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.fairseq_dataset.FairseqDataset.collater": [[27, 37], ["None"], "methods", ["None"], ["", "def", "collater", "(", "self", ",", "samples", ")", ":", "\n", "        ", "\"\"\"Merge a list of samples to form a mini-batch.\n\n        Args:\n            samples (List[dict]): samples to collate\n\n        Returns:\n            dict: a mini-batch suitable for forwarding with a Model\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.fairseq_dataset.FairseqDataset.num_tokens": [[38, 42], ["None"], "methods", ["None"], ["", "def", "num_tokens", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Return the number of tokens in a sample. This value is used to\n        enforce ``--max-tokens`` during batching.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.fairseq_dataset.FairseqDataset.size": [[43, 47], ["None"], "methods", ["None"], ["", "def", "size", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Return an example's size as a float or tuple. This value is used when\n        filtering a dataset with ``--max-positions``.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.fairseq_dataset.FairseqDataset.ordered_indices": [[48, 52], ["numpy.arange", "len"], "methods", ["None"], ["", "def", "ordered_indices", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return an ordered list of indices. Batches will be constructed based\n        on this order.\"\"\"", "\n", "return", "np", ".", "arange", "(", "len", "(", "self", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.fairseq_dataset.FairseqDataset.supports_prefetch": [[53, 57], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "supports_prefetch", "(", "self", ")", ":", "\n", "        ", "\"\"\"Whether this dataset supports prefetching.\"\"\"", "\n", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.fairseq_dataset.FairseqDataset.attr": [[58, 60], ["getattr"], "methods", ["None"], ["", "def", "attr", "(", "self", ",", "attr", ":", "str", ",", "index", ":", "int", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ",", "attr", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.fairseq_dataset.FairseqDataset.prefetch": [[61, 64], ["None"], "methods", ["None"], ["", "def", "prefetch", "(", "self", ",", "indices", ")", ":", "\n", "        ", "\"\"\"Prefetch the data required for this epoch.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.fairseq_dataset.FairseqIterableDataset.__iter__": [[71, 73], ["None"], "methods", ["None"], ["def", "__iter__", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.id_dataset.IdDataset.__getitem__": [[13, 15], ["None"], "methods", ["None"], ["    ", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.id_dataset.IdDataset.__len__": [[16, 18], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.id_dataset.IdDataset.collater": [[19, 21], ["torch.tensor"], "methods", ["None"], ["", "def", "collater", "(", "self", ",", "samples", ")", ":", "\n", "        ", "return", "torch", ".", "tensor", "(", "samples", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.backtranslation_dataset.BacktranslationDataset.__init__": [[78, 95], ["torch.cuda.is_available"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "tgt_dataset", ",", "\n", "src_dict", ",", "\n", "tgt_dict", "=", "None", ",", "\n", "backtranslation_fn", "=", "None", ",", "\n", "output_collater", "=", "None", ",", "\n", "cuda", "=", "True", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "self", ".", "tgt_dataset", "=", "tgt_dataset", "\n", "self", ".", "backtranslation_fn", "=", "backtranslation_fn", "\n", "self", ".", "output_collater", "=", "output_collater", "if", "output_collater", "is", "not", "None", "else", "tgt_dataset", ".", "collater", "\n", "self", ".", "cuda", "=", "cuda", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "False", "\n", "self", ".", "src_dict", "=", "src_dict", "\n", "self", ".", "tgt_dict", "=", "tgt_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.backtranslation_dataset.BacktranslationDataset.__getitem__": [[96, 103], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Returns a single sample from *tgt_dataset*. Note that backtranslation is\n        not applied in this step; use :func:`collater` instead to backtranslate\n        a batch of samples.\n        \"\"\"", "\n", "return", "self", ".", "tgt_dataset", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.backtranslation_dataset.BacktranslationDataset.__len__": [[104, 106], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "tgt_dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.backtranslation_dataset.BacktranslationDataset.set_backtranslation_fn": [[107, 109], ["None"], "methods", ["None"], ["", "def", "set_backtranslation_fn", "(", "self", ",", "backtranslation_fn", ")", ":", "\n", "        ", "self", ".", "backtranslation_fn", "=", "backtranslation_fn", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.backtranslation_dataset.BacktranslationDataset.collater": [[110, 140], ["samples[].get", "backtranslation_dataset.backtranslate_samples", "backtranslation_dataset.BacktranslationDataset.output_collater", "backtranslation_dataset.BacktranslationDataset.backtranslation_fn"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.backtranslation_dataset.backtranslate_samples"], ["", "def", "collater", "(", "self", ",", "samples", ")", ":", "\n", "        ", "\"\"\"Merge and backtranslate a list of samples to form a mini-batch.\n\n        Using the samples from *tgt_dataset*, load a collated target sample to\n        feed to the backtranslation model. Then take the backtranslation with\n        the best score as the source and the original input as the target.\n\n        Note: we expect *tgt_dataset* to provide a function `collater()` that\n        will collate samples into the format expected by *backtranslation_fn*.\n        After backtranslation, we will feed the new list of samples (i.e., the\n        `(backtranslated source, original source)` pairs) to *output_collater*\n        and return the result.\n\n        Args:\n            samples (List[dict]): samples to backtranslate and collate\n\n        Returns:\n            dict: a mini-batch with keys coming from *output_collater*\n        \"\"\"", "\n", "if", "samples", "[", "0", "]", ".", "get", "(", "'is_dummy'", ",", "False", ")", ":", "\n", "            ", "return", "samples", "\n", "", "samples", "=", "backtranslate_samples", "(", "\n", "samples", "=", "samples", ",", "\n", "collate_fn", "=", "self", ".", "tgt_dataset", ".", "collater", ",", "\n", "generate_fn", "=", "(", "\n", "lambda", "net_input", ":", "self", ".", "backtranslation_fn", "(", "net_input", ")", "\n", ")", ",", "\n", "cuda", "=", "self", ".", "cuda", ",", "\n", ")", "\n", "return", "self", ".", "output_collater", "(", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.backtranslation_dataset.BacktranslationDataset.num_tokens": [[141, 144], ["backtranslation_dataset.BacktranslationDataset.tgt_dataset.num_tokens"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.num_tokens"], ["", "def", "num_tokens", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Just use the tgt dataset num_tokens\"\"\"", "\n", "return", "self", ".", "tgt_dataset", ".", "num_tokens", "(", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.backtranslation_dataset.BacktranslationDataset.ordered_indices": [[145, 148], ["backtranslation_dataset.BacktranslationDataset.tgt_dataset.ordered_indices"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.ordered_indices"], ["", "def", "ordered_indices", "(", "self", ")", ":", "\n", "        ", "\"\"\"Just use the tgt dataset ordered_indices\"\"\"", "\n", "return", "self", ".", "tgt_dataset", ".", "ordered_indices", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.backtranslation_dataset.BacktranslationDataset.size": [[149, 159], ["backtranslation_dataset.BacktranslationDataset.tgt_dataset.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "size", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Return an example's size as a float or tuple. This value is used\n        when filtering a dataset with ``--max-positions``.\n\n        Note: we use *tgt_dataset* to approximate the length of the source\n        sentence, since we do not know the actual length until after\n        backtranslation.\n        \"\"\"", "\n", "tgt_size", "=", "self", ".", "tgt_dataset", ".", "size", "(", "index", ")", "[", "0", "]", "\n", "return", "(", "tgt_size", ",", "tgt_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.backtranslation_dataset.BacktranslationDataset.supports_prefetch": [[160, 163], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "supports_prefetch", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ".", "tgt_dataset", ",", "'supports_prefetch'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.backtranslation_dataset.BacktranslationDataset.prefetch": [[164, 166], ["backtranslation_dataset.BacktranslationDataset.tgt_dataset.prefetch"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.block_pair_dataset.BlockPairDataset.prefetch"], ["", "def", "prefetch", "(", "self", ",", "indices", ")", ":", "\n", "        ", "return", "self", ".", "tgt_dataset", ".", "prefetch", "(", "indices", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.backtranslation_dataset.backtranslate_samples": [[13, 49], ["collate_fn", "generate_fn", "fairseq.utils.move_to_cuda", "id.item", "[].cpu", "zip", "id.item"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.move_to_cuda", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item"], ["def", "backtranslate_samples", "(", "samples", ",", "collate_fn", ",", "generate_fn", ",", "cuda", "=", "True", ")", ":", "\n", "    ", "\"\"\"Backtranslate a list of samples.\n\n    Given an input (*samples*) of the form:\n\n        [{'id': 1, 'source': 'hallo welt'}]\n\n    this will return:\n\n        [{'id': 1, 'source': 'hello world', 'target': 'hallo welt'}]\n\n    Args:\n        samples (List[dict]): samples to backtranslate. Individual samples are\n            expected to have a 'source' key, which will become the 'target'\n            after backtranslation.\n        collate_fn (callable): function to collate samples into a mini-batch\n        generate_fn (callable): function to generate backtranslations\n        cuda (bool): use GPU for generation (default: ``True``)\n\n    Returns:\n        List[dict]: an updated list of samples with a backtranslated source\n    \"\"\"", "\n", "collated_samples", "=", "collate_fn", "(", "samples", ")", "\n", "s", "=", "utils", ".", "move_to_cuda", "(", "collated_samples", ")", "if", "cuda", "else", "collated_samples", "\n", "generated_sources", "=", "generate_fn", "(", "s", ")", "\n", "\n", "id_to_src", "=", "{", "\n", "sample", "[", "'id'", "]", ":", "sample", "[", "'source'", "]", "for", "sample", "in", "samples", "\n", "}", "\n", "\n", "# Go through each tgt sentence in batch and its corresponding best", "\n", "# generated hypothesis and create a backtranslation data pair", "\n", "# {id: id, source: generated backtranslation, target: original tgt}", "\n", "return", "[", "\n", "{", "'id'", ":", "id", ".", "item", "(", ")", ",", "'target'", ":", "id_to_src", "[", "id", ".", "item", "(", ")", "]", ",", "'source'", ":", "hypos", "[", "0", "]", "[", "'tokens'", "]", ".", "cpu", "(", ")", "}", "\n", "for", "id", ",", "hypos", "in", "zip", "(", "collated_samples", "[", "'id'", "]", ",", "generated_sources", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.lru_cache_dataset.LRUCacheDataset.__init__": [[13, 15], ["BaseWrapperDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "token", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.lru_cache_dataset.LRUCacheDataset.__getitem__": [[16, 19], ["functools.lru_cache"], "methods", ["None"], ["", "@", "lru_cache", "(", "maxsize", "=", "8", ")", "\n", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "dataset", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.lru_cache_dataset.LRUCacheDataset.collater": [[20, 23], ["functools.lru_cache", "lru_cache_dataset.LRUCacheDataset.dataset.collater"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.collater"], ["", "@", "lru_cache", "(", "maxsize", "=", "8", ")", "\n", "def", "collater", "(", "self", ",", "samples", ")", ":", "\n", "        ", "return", "self", ".", "dataset", ".", "collater", "(", "samples", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.token_block_dataset.TokenBlockDataset.__init__": [[34, 102], ["fairseq.data.FairseqDataset.__init__", "isinstance", "_get_slice_indices_fast", "fairseq.data.plasma_utils.PlasmaArray", "fairseq.data.plasma_utils.PlasmaArray", "fairseq.data.plasma_utils.PlasmaArray", "len", "len", "len", "numpy.array", "torch.is_tensor", "sizes.numpy.numpy.astype", "numpy.stack", "_get_block_to_dataset_index_fast", "ImportError", "sizes.numpy.numpy.numpy", "numpy.arange", "numpy.zeros", "numpy.arange", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "dataset", ",", "\n", "sizes", ",", "\n", "block_size", ",", "\n", "pad", ",", "\n", "eos", ",", "\n", "break_mode", "=", "None", ",", "\n", "include_targets", "=", "False", ",", "\n", "document_sep_len", "=", "1", ",", "\n", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "from", "fairseq", ".", "data", ".", "token_block_utils_fast", "import", "(", "\n", "_get_slice_indices_fast", ",", "\n", "_get_block_to_dataset_index_fast", ",", "\n", ")", "\n", "", "except", "ImportError", ":", "\n", "            ", "raise", "ImportError", "(", "\n", "'Please build Cython components with: `pip install --editable .` '", "\n", "'or `python setup.py build_ext --inplace`'", "\n", ")", "\n", "\n", "", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "pad", "=", "pad", "\n", "self", ".", "eos", "=", "eos", "\n", "self", ".", "include_targets", "=", "include_targets", "\n", "\n", "assert", "len", "(", "dataset", ")", "==", "len", "(", "sizes", ")", "\n", "assert", "len", "(", "dataset", ")", ">", "0", "\n", "\n", "if", "isinstance", "(", "sizes", ",", "list", ")", ":", "\n", "            ", "sizes", "=", "np", ".", "array", "(", "sizes", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "", "else", ":", "\n", "            ", "if", "torch", ".", "is_tensor", "(", "sizes", ")", ":", "\n", "                ", "sizes", "=", "sizes", ".", "numpy", "(", ")", "\n", "", "sizes", "=", "sizes", ".", "astype", "(", "np", ".", "int64", ")", "\n", "\n", "", "break_mode", "=", "break_mode", "if", "break_mode", "is", "not", "None", "else", "'none'", "\n", "\n", "# For \"eos\" break-mode, block_size is not required parameters.", "\n", "if", "break_mode", "==", "\"eos\"", "and", "block_size", "is", "None", ":", "\n", "            ", "block_size", "=", "0", "\n", "\n", "", "slice_indices", "=", "_get_slice_indices_fast", "(", "sizes", ",", "break_mode", ",", "block_size", ",", "document_sep_len", ")", "\n", "self", ".", "_sizes", "=", "slice_indices", "[", ":", ",", "1", "]", "-", "slice_indices", "[", ":", ",", "0", "]", "\n", "\n", "# build index mapping block indices to the underlying dataset indices", "\n", "if", "break_mode", "==", "\"eos\"", ":", "\n", "# much faster version for eos break mode", "\n", "            ", "block_to_dataset_index", "=", "np", ".", "stack", "(", "\n", "[", "\n", "np", ".", "arange", "(", "len", "(", "sizes", ")", ")", ",", "# starting index in dataset", "\n", "np", ".", "zeros", "(", "\n", "len", "(", "sizes", ")", ",", "dtype", "=", "np", ".", "long", "\n", ")", ",", "# starting offset within starting index", "\n", "np", ".", "arange", "(", "len", "(", "sizes", ")", ")", ",", "# ending index in dataset", "\n", "]", ",", "\n", "1", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "block_to_dataset_index", "=", "_get_block_to_dataset_index_fast", "(", "\n", "sizes", ",", "\n", "slice_indices", ",", "\n", ")", "\n", "", "self", ".", "_slice_indices", "=", "plasma_utils", ".", "PlasmaArray", "(", "slice_indices", ")", "\n", "self", ".", "_sizes", "=", "plasma_utils", ".", "PlasmaArray", "(", "self", ".", "_sizes", ")", "\n", "self", ".", "_block_to_dataset_index", "=", "plasma_utils", ".", "PlasmaArray", "(", "block_to_dataset_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.token_block_dataset.TokenBlockDataset.slice_indices": [[103, 106], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "slice_indices", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_slice_indices", ".", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.token_block_dataset.TokenBlockDataset.sizes": [[107, 110], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "sizes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_sizes", ".", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.token_block_dataset.TokenBlockDataset.block_to_dataset_index": [[111, 114], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "block_to_dataset_index", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_block_to_dataset_index", ".", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.token_block_dataset.TokenBlockDataset.attr": [[115, 118], ["token_block_dataset.TokenBlockDataset.dataset.attr"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.concat_dataset.ConcatDataset.attr"], ["", "def", "attr", "(", "self", ",", "attr", ":", "str", ",", "index", ":", "int", ")", ":", "\n", "        ", "start_ds_idx", ",", "_", ",", "_", "=", "self", ".", "block_to_dataset_index", "[", "index", "]", "\n", "return", "self", ".", "dataset", ".", "attr", "(", "attr", ",", "start_ds_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.token_block_dataset.TokenBlockDataset.__getitem__": [[119, 150], ["torch.cat", "torch.cat", "torch.cat", "range", "torch.cat", "item.new", "item.new", "item.new"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "start_ds_idx", ",", "start_offset", ",", "end_ds_idx", "=", "self", ".", "block_to_dataset_index", "[", "index", "]", "\n", "\n", "buffer", "=", "torch", ".", "cat", "(", "\n", "[", "self", ".", "dataset", "[", "idx", "]", "for", "idx", "in", "range", "(", "start_ds_idx", ",", "end_ds_idx", "+", "1", ")", "]", "\n", ")", "\n", "\n", "slice_s", ",", "slice_e", "=", "self", ".", "slice_indices", "[", "index", "]", "\n", "length", "=", "slice_e", "-", "slice_s", "\n", "s", ",", "e", "=", "start_offset", ",", "start_offset", "+", "length", "\n", "item", "=", "buffer", "[", "s", ":", "e", "]", "\n", "\n", "if", "self", ".", "include_targets", ":", "\n", "# *target* is the original sentence (=item)", "\n", "# *source* is shifted right by 1 (maybe left-padded with eos)", "\n", "# *past_target* is shifted right by 2 (left-padded as needed)", "\n", "            ", "if", "s", "==", "0", ":", "\n", "                ", "source", "=", "torch", ".", "cat", "(", "[", "item", ".", "new", "(", "[", "self", ".", "eos", "]", ")", ",", "buffer", "[", "0", ":", "e", "-", "1", "]", "]", ")", "\n", "past_target", "=", "torch", ".", "cat", "(", "\n", "[", "item", ".", "new", "(", "[", "self", ".", "pad", ",", "self", ".", "eos", "]", ")", ",", "buffer", "[", "0", ":", "e", "-", "2", "]", "]", "\n", ")", "\n", "", "else", ":", "\n", "                ", "source", "=", "buffer", "[", "s", "-", "1", ":", "e", "-", "1", "]", "\n", "if", "s", "==", "1", ":", "\n", "                    ", "past_target", "=", "torch", ".", "cat", "(", "[", "item", ".", "new", "(", "[", "self", ".", "eos", "]", ")", ",", "buffer", "[", "0", ":", "e", "-", "2", "]", "]", ")", "\n", "", "else", ":", "\n", "                    ", "past_target", "=", "buffer", "[", "s", "-", "2", ":", "e", "-", "2", "]", "\n", "\n", "", "", "return", "source", ",", "item", ",", "past_target", "\n", "\n", "", "return", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.token_block_dataset.TokenBlockDataset.__len__": [[151, 153], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "slice_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.token_block_dataset.TokenBlockDataset.supports_prefetch": [[154, 157], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "supports_prefetch", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ".", "dataset", ",", "\"supports_prefetch\"", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.token_block_dataset.TokenBlockDataset.prefetch": [[158, 165], ["token_block_dataset.TokenBlockDataset.dataset.prefetch", "range"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.block_pair_dataset.BlockPairDataset.prefetch"], ["", "def", "prefetch", "(", "self", ",", "indices", ")", ":", "\n", "        ", "self", ".", "dataset", ".", "prefetch", "(", "\n", "{", "\n", "ds_idx", "\n", "for", "index", "in", "indices", "\n", "for", "start_ds_idx", ",", "_", ",", "end_ds_idx", "in", "[", "self", ".", "block_to_dataset_index", "[", "index", "]", "]", "\n", "for", "ds_idx", "in", "range", "(", "start_ds_idx", ",", "end_ds_idx", "+", "1", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.lm_context_window_dataset.LMContextWindowDataset.__init__": [[17, 25], ["isinstance", "numpy.empty"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset", ",", "tokens_per_sample", ",", "context_window", ",", "pad_idx", ")", ":", "\n", "        ", "assert", "isinstance", "(", "dataset", ",", "MonolingualDataset", ")", "\n", "assert", "context_window", ">", "0", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "tokens_per_sample", "=", "tokens_per_sample", "\n", "self", ".", "context_window", "=", "context_window", "\n", "self", ".", "pad_idx", "=", "pad_idx", "\n", "self", ".", "prev_tokens", "=", "np", ".", "empty", "(", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.lm_context_window_dataset.LMContextWindowDataset.__getitem__": [[26, 28], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "dataset", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.lm_context_window_dataset.LMContextWindowDataset.__len__": [[29, 31], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.lm_context_window_dataset.LMContextWindowDataset.collater": [[32, 62], ["lm_context_window_dataset.LMContextWindowDataset.dataset.collater", "numpy.empty", "numpy.full", "toks.ne().long().sum().cpu", "range", "torch.from_numpy", "torch.from_numpy", "numpy.full", "numpy.concatenate", "len", "len", "toks.ne().long().sum", "len", "len", "toks[].numpy", "toks.ne().long", "len", "len", "len", "toks.ne"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.collater"], ["", "def", "collater", "(", "self", ",", "samples", ")", ":", "\n", "        ", "sample", "=", "self", ".", "dataset", ".", "collater", "(", "samples", ")", "\n", "\n", "pad", "=", "self", ".", "pad_idx", "\n", "max_sample_len", "=", "self", ".", "tokens_per_sample", "+", "self", ".", "context_window", "\n", "\n", "bsz", ",", "tsz", "=", "sample", "[", "'net_input'", "]", "[", "'src_tokens'", "]", ".", "shape", "\n", "start_idxs", "=", "[", "0", "]", "*", "bsz", "\n", "toks", "=", "sample", "[", "'net_input'", "]", "[", "'src_tokens'", "]", "\n", "lengths", "=", "sample", "[", "'net_input'", "]", "[", "'src_lengths'", "]", "\n", "tgt", "=", "sample", "[", "'target'", "]", "\n", "new_toks", "=", "np", ".", "empty", "(", "[", "bsz", ",", "tsz", "+", "self", ".", "context_window", "]", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "new_tgt", "=", "np", ".", "full", "(", "[", "bsz", ",", "tsz", "+", "self", ".", "context_window", "]", ",", "pad", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "sample_lens", "=", "toks", ".", "ne", "(", "pad", ")", ".", "long", "(", ")", ".", "sum", "(", "dim", "=", "1", ")", ".", "cpu", "(", ")", "\n", "for", "i", "in", "range", "(", "bsz", ")", ":", "\n", "            ", "sample_len", "=", "sample_lens", "[", "i", "]", "\n", "extra", "=", "len", "(", "self", ".", "prev_tokens", ")", "+", "sample_len", "-", "max_sample_len", "\n", "if", "extra", ">", "0", ":", "\n", "                ", "self", ".", "prev_tokens", "=", "self", ".", "prev_tokens", "[", "extra", ":", "]", "\n", "", "pads", "=", "np", ".", "full", "(", "self", ".", "context_window", "-", "len", "(", "self", ".", "prev_tokens", ")", ",", "pad", ")", "\n", "new_toks", "[", "i", "]", "=", "np", ".", "concatenate", "(", "[", "self", ".", "prev_tokens", ",", "toks", "[", "i", "]", ".", "numpy", "(", ")", ",", "pads", "]", ")", "\n", "new_tgt", "[", "i", ",", "len", "(", "self", ".", "prev_tokens", ")", ":", "len", "(", "self", ".", "prev_tokens", ")", "+", "len", "(", "tgt", "[", "i", "]", ")", "]", "=", "tgt", "[", "i", "]", "\n", "start_idxs", "[", "i", "]", "=", "len", "(", "self", ".", "prev_tokens", ")", "\n", "lengths", "[", "i", "]", "+=", "len", "(", "self", ".", "prev_tokens", ")", "\n", "self", ".", "prev_tokens", "=", "new_toks", "[", "i", "]", "[", "new_toks", "[", "i", "]", "!=", "pad", "]", "[", "-", "self", ".", "context_window", ":", "]", "\n", "", "sample", "[", "'net_input'", "]", "[", "'src_tokens'", "]", "=", "torch", ".", "from_numpy", "(", "new_toks", ")", "\n", "sample", "[", "'target'", "]", "=", "torch", ".", "from_numpy", "(", "new_tgt", ")", "\n", "sample", "[", "'start_indices'", "]", "=", "start_idxs", "\n", "\n", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.lm_context_window_dataset.LMContextWindowDataset.num_tokens": [[63, 65], ["lm_context_window_dataset.LMContextWindowDataset.dataset.num_tokens"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.num_tokens"], ["", "def", "num_tokens", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "dataset", ".", "num_tokens", "(", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.lm_context_window_dataset.LMContextWindowDataset.size": [[66, 68], ["lm_context_window_dataset.LMContextWindowDataset.dataset.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "size", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "dataset", ".", "size", "(", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.lm_context_window_dataset.LMContextWindowDataset.ordered_indices": [[69, 72], ["numpy.arange", "len"], "methods", ["None"], ["", "def", "ordered_indices", "(", "self", ")", ":", "\n", "# NOTE we don't shuffle the data to retain access to the previous dataset elements", "\n", "        ", "return", "np", ".", "arange", "(", "len", "(", "self", ".", "dataset", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.lm_context_window_dataset.LMContextWindowDataset.supports_prefetch": [[73, 76], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "supports_prefetch", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ".", "dataset", ",", "'supports_prefetch'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.lm_context_window_dataset.LMContextWindowDataset.prefetch": [[77, 79], ["lm_context_window_dataset.LMContextWindowDataset.dataset.prefetch"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.block_pair_dataset.BlockPairDataset.prefetch"], ["", "def", "prefetch", "(", "self", ",", "indices", ")", ":", "\n", "        ", "return", "self", ".", "dataset", ".", "prefetch", "(", "indices", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.CountingIterator.__init__": [[26, 31], ["iter", "len"], "methods", ["None"], ["\n", "\n", "def", "__init__", "(", "self", ",", "iterable", ",", "start", "=", "0", ",", "override_len", "=", "None", ")", ":", "\n", "        ", "self", ".", "iterable", "=", "iterable", "\n", "self", ".", "count", "=", "start", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.CountingIterator.__len__": [[32, 34], ["None"], "methods", ["None"], ["self", ".", "itr", "=", "iter", "(", "self", ")", "\n", "if", "override_len", "is", "None", ":", "\n", "            ", "self", ".", "len", "=", "start", "+", "len", "(", "iterable", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.CountingIterator.__iter__": [[35, 41], ["None"], "methods", ["None"], ["", "else", ":", "\n", "            ", "self", ".", "len", "=", "override_len", "\n", "\n", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "len", "\n", "\n", "", "def", "__iter__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.CountingIterator.__next__": [[42, 44], ["next"], "methods", ["None"], ["        ", "for", "x", "in", "self", ".", "iterable", ":", "\n", "            ", "if", "self", ".", "count", ">=", "self", ".", "len", ":", "\n", "                ", "return", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.CountingIterator.has_next": [[45, 48], ["len"], "methods", ["None"], ["", "self", ".", "count", "+=", "1", "\n", "yield", "x", "\n", "\n", "", "", "def", "__next__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.CountingIterator.skip": [[49, 53], ["next", "itertools.islice"], "methods", ["None"], ["        ", "return", "next", "(", "self", ".", "itr", ")", "\n", "\n", "", "def", "has_next", "(", "self", ")", ":", "\n", "        ", "\"\"\"Whether the iterator has been exhausted.\"\"\"", "\n", "return", "self", ".", "count", "<", "len", "(", "self", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.CountingIterator.take": [[54, 59], ["min"], "methods", ["None"], ["\n", "", "def", "skip", "(", "self", ",", "num_to_skip", ")", ":", "\n", "        ", "\"\"\"Fast-forward the iterator by skipping *num_to_skip* elements.\"\"\"", "\n", "next", "(", "itertools", ".", "islice", "(", "self", ".", "itr", ",", "num_to_skip", ",", "num_to_skip", ")", ",", "None", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.EpochBatchIterating.__len__": [[62, 64], ["None"], "methods", ["None"], ["\n", "self", ".", "len", "=", "min", "(", "self", ".", "len", ",", "n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.EpochBatchIterating.next_epoch_itr": [[65, 76], ["None"], "methods", ["None"], ["\n", "\n", "", "", "class", "EpochBatchIterating", "(", "object", ")", ":", "\n", "    ", "def", "__len__", "(", "self", ")", "->", "int", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "def", "next_epoch_itr", "(", "self", ",", "shuffle", "=", "True", ",", "fix_batches_to_gpus", "=", "False", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.EpochBatchIterating.end_of_epoch": [[77, 80], ["None"], "methods", ["None"], ["\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.EpochBatchIterating.iterations_in_epoch": [[81, 85], ["None"], "methods", ["None"], ["raise", "NotImplementedError", "\n", "\n", "", "def", "end_of_epoch", "(", "self", ")", "->", "bool", ":", "\n", "        ", "\"\"\"Returns whether the most recent epoch iterator has been exhausted\"\"\"", "\n", "raise", "NotImplementedError", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.EpochBatchIterating.state_dict": [[86, 89], ["None"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "iterations_in_epoch", "(", "self", ")", "->", "int", ":", "\n", "        ", "\"\"\"The number of consumed batches in the current epoch.\"\"\"", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.EpochBatchIterating.load_state_dict": [[90, 93], ["None"], "methods", ["None"], ["raise", "NotImplementedError", "\n", "\n", "", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns a dictionary containing a whole state of the iterator.\"\"\"", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.StreamingEpochBatchIterator.__init__": [[96, 105], ["isinstance"], "methods", ["None"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "\"\"\"Copies the state of the iterator from the given *state_dict*.\"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n", "\n", "", "", "class", "StreamingEpochBatchIterator", "(", "EpochBatchIterating", ")", ":", "\n", "    ", "def", "__init__", "(", "\n", "self", ",", "dataset", ",", "epoch", "=", "0", ",", "num_shards", "=", "1", ",", "shard_id", "=", "0", ",", "\n", ")", ":", "\n", "        ", "assert", "isinstance", "(", "dataset", ",", "torch", ".", "utils", ".", "data", ".", "IterableDataset", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.StreamingEpochBatchIterator.next_epoch_itr": [[106, 117], ["iterators.StreamingEpochBatchIterator.dataset.set_epoch", "iterators.CountingIterator", "iterators.ShardedIterator"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.denoising_dataset.DenoisingDataset.set_epoch"], ["self", ".", "dataset", "=", "dataset", "\n", "self", ".", "epoch", "=", "epoch", "\n", "self", ".", "_current_epoch_iterator", "=", "None", "\n", "self", ".", "num_shards", "=", "num_shards", "\n", "self", ".", "shard_id", "=", "shard_id", "\n", "\n", "", "def", "next_epoch_itr", "(", "self", ",", "shuffle", "=", "True", ",", "fix_batches_to_gpus", "=", "False", ")", ":", "\n", "        ", "self", ".", "epoch", "+=", "1", "\n", "self", ".", "dataset", ".", "set_epoch", "(", "self", ".", "epoch", ")", "\n", "self", ".", "_current_epoch_iterator", "=", "CountingIterator", "(", "\n", "iterable", "=", "ShardedIterator", "(", "\n", "iterable", "=", "self", ".", "dataset", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.StreamingEpochBatchIterator.end_of_epoch": [[118, 120], ["iterators.StreamingEpochBatchIterator._current_epoch_iterator.has_next"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.CountingIterator.has_next"], ["num_shards", "=", "self", ".", "num_shards", ",", "\n", "shard_id", "=", "self", ".", "shard_id", ",", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.StreamingEpochBatchIterator.iterations_in_epoch": [[121, 126], ["None"], "methods", ["None"], [")", "\n", "return", "self", ".", "_current_epoch_iterator", "\n", "\n", "", "def", "end_of_epoch", "(", "self", ")", "->", "bool", ":", "\n", "        ", "return", "not", "self", ".", "_current_epoch_iterator", ".", "has_next", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.StreamingEpochBatchIterator.state_dict": [[127, 130], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "iterations_in_epoch", "(", "self", ")", "->", "int", ":", "\n", "        ", "if", "self", ".", "_current_epoch_iterator", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "_current_epoch_iterator", ".", "count", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.StreamingEpochBatchIterator.load_state_dict": [[132, 134], ["None"], "methods", ["None"], ["\n", "", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "return", "{", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.EpochBatchIterator.__init__": [[165, 183], ["isinstance", "tuple", "getattr"], "methods", ["None"], ["\n", "\n", "def", "__init__", "(", "\n", "self", ",", "dataset", ",", "collate_fn", ",", "batch_sampler", ",", "seed", "=", "1", ",", "num_shards", "=", "1", ",", "shard_id", "=", "0", ",", "\n", "num_workers", "=", "0", ",", "epoch", "=", "0", ",", "\n", ")", ":", "\n", "        ", "assert", "isinstance", "(", "dataset", ",", "torch", ".", "utils", ".", "data", ".", "Dataset", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "collate_fn", "=", "collate_fn", "\n", "self", ".", "frozen_batches", "=", "tuple", "(", "batch_sampler", ")", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "num_shards", "=", "num_shards", "\n", "self", ".", "shard_id", "=", "shard_id", "\n", "self", ".", "num_workers", "=", "num_workers", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.EpochBatchIterator.__len__": [[184, 186], ["len"], "methods", ["None"], ["self", ".", "epoch", "=", "epoch", "\n", "self", ".", "shuffle", "=", "True", "\n", "self", ".", "_cur_epoch_itr", "=", "None", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.EpochBatchIterator.next_epoch_itr": [[187, 208], ["iterators.EpochBatchIterator.dataset.set_epoch", "iterators.EpochBatchIterator._get_iterator_for_epoch"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.denoising_dataset.DenoisingDataset.set_epoch", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.EpochBatchIterator._get_iterator_for_epoch"], ["self", ".", "_next_epoch_itr", "=", "None", "\n", "self", ".", "_supports_prefetch", "=", "getattr", "(", "dataset", ",", "'supports_prefetch'", ",", "False", ")", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "frozen_batches", ")", "\n", "\n", "", "def", "next_epoch_itr", "(", "self", ",", "shuffle", "=", "True", ",", "fix_batches_to_gpus", "=", "False", ")", ":", "\n", "        ", "\"\"\"Return a new iterator over the dataset.\n\n        Args:\n            shuffle (bool, optional): shuffle batches before returning the\n                iterator (default: True).\n            fix_batches_to_gpus: ensure that batches are always\n                allocated to the same shards across epochs. Requires\n                that :attr:`dataset` supports prefetching (default: False).\n        \"\"\"", "\n", "if", "self", ".", "_next_epoch_itr", "is", "not", "None", ":", "\n", "            ", "self", ".", "_cur_epoch_itr", "=", "self", ".", "_next_epoch_itr", "\n", "self", ".", "_next_epoch_itr", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "epoch", "+=", "1", "\n", "self", ".", "_cur_epoch_itr", "=", "self", ".", "_get_iterator_for_epoch", "(", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.EpochBatchIterator.end_of_epoch": [[209, 212], ["iterators.EpochBatchIterator._cur_epoch_itr.has_next"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.CountingIterator.has_next"], ["self", ".", "epoch", ",", "shuffle", ",", "fix_batches_to_gpus", "=", "fix_batches_to_gpus", ",", "\n", ")", "\n", "", "self", ".", "dataset", ".", "set_epoch", "(", "self", ".", "epoch", ")", "\n", "self", ".", "shuffle", "=", "shuffle", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.EpochBatchIterator.iterations_in_epoch": [[213, 221], ["None"], "methods", ["None"], ["return", "self", ".", "_cur_epoch_itr", "\n", "\n", "", "def", "end_of_epoch", "(", "self", ")", "->", "bool", ":", "\n", "        ", "\"\"\"Returns whether the most recent epoch iterator has been exhausted\"\"\"", "\n", "return", "not", "self", ".", "_cur_epoch_itr", ".", "has_next", "(", ")", "\n", "\n", "", "@", "property", "\n", "def", "iterations_in_epoch", "(", "self", ")", ":", "\n", "        ", "\"\"\"The number of consumed batches in the current epoch.\"\"\"", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.EpochBatchIterator.state_dict": [[222, 228], ["None"], "methods", ["None"], ["if", "self", ".", "_cur_epoch_itr", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "_cur_epoch_itr", ".", "count", "\n", "", "elif", "self", ".", "_next_epoch_itr", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "_next_epoch_itr", ".", "count", "\n", "", "return", "0", "\n", "\n", "", "def", "state_dict", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.EpochBatchIterator.load_state_dict": [[230, 240], ["state_dict.get", "iterators.EpochBatchIterator._get_iterator_for_epoch", "state_dict.get"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.EpochBatchIterator._get_iterator_for_epoch"], ["return", "{", "\n", "'epoch'", ":", "self", ".", "epoch", ",", "\n", "'iterations_in_epoch'", ":", "self", ".", "iterations_in_epoch", ",", "\n", "'shuffle'", ":", "self", ".", "shuffle", ",", "\n", "}", "\n", "\n", "", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "\"\"\"Copies the state of the iterator from the given *state_dict*.\"\"\"", "\n", "self", ".", "epoch", "=", "state_dict", "[", "'epoch'", "]", "\n", "itr_pos", "=", "state_dict", ".", "get", "(", "'iterations_in_epoch'", ",", "0", ")", "\n", "if", "itr_pos", ">", "0", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.EpochBatchIterator._get_iterator_for_epoch": [[242, 285], ["iterators.CountingIterator", "list", "iterators.EpochBatchIterator.dataset.prefetch", "list", "torch.utils.data.DataLoader", "data_utils.numpy_seed", "numpy.random.shuffle", "iterators.EpochBatchIterator._get_iterator_for_epoch.shuffle_batches"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.block_pair_dataset.BlockPairDataset.prefetch", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.numpy_seed"], ["            ", "self", ".", "_next_epoch_itr", "=", "self", ".", "_get_iterator_for_epoch", "(", "\n", "self", ".", "epoch", ",", "\n", "shuffle", "=", "state_dict", ".", "get", "(", "'shuffle'", ",", "True", ")", ",", "\n", "offset", "=", "itr_pos", ",", "\n", ")", "\n", "\n", "", "", "def", "_get_iterator_for_epoch", "(", "self", ",", "epoch", ",", "shuffle", ",", "fix_batches_to_gpus", "=", "False", ",", "offset", "=", "0", ")", ":", "\n", "\n", "        ", "def", "shuffle_batches", "(", "batches", ",", "seed", ")", ":", "\n", "            ", "with", "data_utils", ".", "numpy_seed", "(", "seed", ")", ":", "\n", "                ", "np", ".", "random", ".", "shuffle", "(", "batches", ")", "\n", "", "return", "batches", "\n", "\n", "", "if", "self", ".", "_supports_prefetch", ":", "\n", "            ", "batches", "=", "self", ".", "frozen_batches", "\n", "\n", "if", "shuffle", "and", "not", "fix_batches_to_gpus", ":", "\n", "                ", "batches", "=", "shuffle_batches", "(", "list", "(", "batches", ")", ",", "self", ".", "seed", "+", "epoch", ")", "\n", "\n", "", "batches", "=", "list", "(", "ShardedIterator", "(", "\n", "batches", ",", "self", ".", "num_shards", ",", "self", ".", "shard_id", ",", "fill_value", "=", "[", "]", "\n", ")", ")", "\n", "self", ".", "dataset", ".", "prefetch", "(", "[", "i", "for", "s", "in", "batches", "for", "i", "in", "s", "]", ")", "\n", "\n", "if", "shuffle", "and", "fix_batches_to_gpus", ":", "\n", "                ", "batches", "=", "shuffle_batches", "(", "batches", ",", "self", ".", "seed", "+", "epoch", "+", "self", ".", "shard_id", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "shuffle", ":", "\n", "                ", "batches", "=", "shuffle_batches", "(", "list", "(", "self", ".", "frozen_batches", ")", ",", "self", ".", "seed", "+", "epoch", ")", "\n", "", "else", ":", "\n", "                ", "batches", "=", "self", ".", "frozen_batches", "\n", "", "batches", "=", "list", "(", "ShardedIterator", "(", "\n", "batches", ",", "self", ".", "num_shards", ",", "self", ".", "shard_id", ",", "fill_value", "=", "[", "]", "\n", ")", ")", "\n", "\n", "", "if", "offset", ">", "0", "and", "offset", ">=", "len", "(", "batches", ")", ":", "\n", "            ", "return", "None", "\n", "\n", "", "if", "self", ".", "num_workers", ">", "0", ":", "\n", "            ", "os", ".", "environ", "[", "'PYTHONWARNINGS'", "]", "=", "'ignore:semaphore_tracker:UserWarning'", "\n", "\n", "", "return", "CountingIterator", "(", "\n", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "self", ".", "dataset", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.GroupedIterator.__init__": [[296, 301], ["int", "int", "math.ceil", "math.ceil", "len", "float", "getattr", "float"], "methods", ["None"], ["\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.GroupedIterator.__len__": [[302, 304], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "iterable", ",", "chunk_size", ")", ":", "\n", "        ", "self", ".", "_len", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "iterable", ")", "/", "float", "(", "chunk_size", ")", ")", ")", "\n", "self", ".", "offset", "=", "int", "(", "math", ".", "ceil", "(", "getattr", "(", "iterable", ",", "'count'", ",", "0", ")", "/", "float", "(", "chunk_size", ")", ")", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.GroupedIterator.__iter__": [[305, 307], ["None"], "methods", ["None"], ["self", ".", "itr", "=", "iterable", "\n", "self", ".", "chunk_size", "=", "chunk_size", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.GroupedIterator.__next__": [[308, 317], ["range", "chunk.append", "next", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_len", "\n", "\n", "", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n", "", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "chunk", "=", "[", "]", "\n", "try", ":", "\n", "            ", "for", "_", "in", "range", "(", "self", ".", "chunk_size", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.ShardedIterator.__init__": [[330, 342], ["itertools.zip_longest", "ValueError", "len", "range", "itertools.islice", "len", "len"], "methods", ["None"], ["\n", "\n", "def", "__init__", "(", "self", ",", "iterable", ",", "num_shards", ",", "shard_id", ",", "fill_value", "=", "None", ")", ":", "\n", "        ", "if", "shard_id", "<", "0", "or", "shard_id", ">=", "num_shards", ":", "\n", "            ", "raise", "ValueError", "(", "'shard_id must be between 0 and num_shards'", ")", "\n", "\n", "", "self", ".", "_sharded_len", "=", "len", "(", "iterable", ")", "//", "num_shards", "\n", "if", "len", "(", "iterable", ")", "%", "num_shards", ">", "0", ":", "\n", "            ", "self", ".", "_sharded_len", "+=", "1", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.ShardedIterator.__len__": [[344, 346], ["None"], "methods", ["None"], ["", "self", ".", "itr", "=", "itertools", ".", "zip_longest", "(", "\n", "range", "(", "self", ".", "_sharded_len", ")", ",", "\n", "itertools", ".", "islice", "(", "iterable", ",", "shard_id", ",", "len", "(", "iterable", ")", ",", "num_shards", ")", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.ShardedIterator.__iter__": [[347, 349], ["None"], "methods", ["None"], ["fillvalue", "=", "fill_value", ",", "\n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.ShardedIterator.__next__": [[350, 352], ["next"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_sharded_len", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.Corpus.__init__": [[24, 31], ["None"], "methods", ["None"], ["return", "res", "\n", "\n", "\n", "", "def", "lengths_to_encoder_padding_mask", "(", "lengths", ",", "batch_first", "=", "False", ")", ":", "\n", "    "]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.infer_language_pair": [[19, 27], ["os.listdir", "filename.split", "parts[].split", "len", "len", "parts[].split"], "function", ["None"], ["\n", "\n", "", "def", "apply_mv_norm", "(", "features", ")", ":", "\n", "    ", "mean", ",", "invstddev", "=", "calc_mean_invstddev", "(", "features", ")", "\n", "res", "=", "(", "features", "-", "mean", ")", "*", "invstddev", "\n", "return", "res", "\n", "\n", "\n", "", "def", "lengths_to_encoder_padding_mask", "(", "lengths", ",", "batch_first", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.collate_tokens": [[29, 46], ["max", "values[].new().fill_", "enumerate", "data_utils.collate_tokens.copy_tensor"], "function", ["None"], ["\n", "max_lengths", "=", "torch", ".", "max", "(", "lengths", ")", ".", "item", "(", ")", "\n", "bsz", "=", "lengths", ".", "size", "(", "0", ")", "\n", "encoder_padding_mask", "=", "torch", ".", "arange", "(", "\n", "max_lengths", "\n", ")", ".", "to", "(", "# a (T, ) tensor with [0, ..., T-1]", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.load_indexed_dataset": [[48, 91], ["itertools.count", "indexed_dataset.make_dataset", "print", "datasets.append", "len", "indexed_dataset.infer_dataset_impl", "len", "ConcatDataset", "str", "len"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.data_helper.count", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.make_dataset", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.infer_dataset_impl"], [")", ".", "view", "(", "# move to the right device", "\n", "1", ",", "max_lengths", "\n", ")", ".", "expand", "(", "# reshape to (1, T)-shaped tensor", "\n", "bsz", ",", "-", "1", "\n", ")", ">=", "lengths", ".", "view", "(", "# expand to (B, T)-shaped tensor", "\n", "bsz", ",", "1", "\n", ")", ".", "expand", "(", "\n", "-", "1", ",", "max_lengths", "\n", ")", "\n", "if", "not", "batch_first", ":", "\n", "        ", "return", "encoder_padding_mask", ".", "t", "(", ")", ",", "max_lengths", "\n", "", "else", ":", "\n", "        ", "return", "encoder_padding_mask", ",", "max_lengths", "\n", "\n", "\n", "", "", "def", "encoder_padding_mask_to_lengths", "(", "\n", "encoder_padding_mask", ",", "max_lengths", ",", "batch_size", ",", "device", "\n", ")", ":", "\n", "    ", "\"\"\"\n    convert encoder_padding_mask (2-D binary tensor) to a 1-D tensor\n\n    Conventionally, encoder output contains a encoder_padding_mask, which is\n    a 2-D mask in a shape (T, B), whose (t, b) element indicate whether\n    encoder_out[t, b] is a valid output (=0) or not (=1). Occasionally, we\n    need to convert this mask tensor to a 1-D tensor in shape (B, ), where\n    [b] denotes the valid length of b-th sequence\n\n    Args:\n        encoder_padding_mask: a (T, B)-shaped binary tensor or None; if None,\n        indicating all are valid\n    Return:\n        seq_lengths: a (B,)-shaped tensor, where its (b, )-th element is the\n        number of valid elements of b-th sequence\n\n        max_lengths: maximum length of all sequence, if encoder_padding_mask is\n        not None, max_lengths must equal to encoder_padding_mask.size(0)\n\n        batch_size: batch size; if encoder_padding_mask is\n        not None, max_lengths must equal to encoder_padding_mask.size(1)\n\n        device: which device to put the result on\n    \"\"\"", "\n", "if", "encoder_padding_mask", "is", "None", ":", "\n", "        ", "return", "torch", ".", "Tensor", "(", "[", "max_lengths", "]", "*", "batch_size", ")", ".", "to", "(", "torch", ".", "int32", ")", ".", "to", "(", "device", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.numpy_seed": [[93, 108], ["numpy.random.get_state", "numpy.random.seed", "len", "int", "numpy.random.set_state", "hash"], "function", ["None"], ["", "assert", "encoder_padding_mask", ".", "size", "(", "0", ")", "==", "max_lengths", ",", "\"max_lengths does not match\"", "\n", "assert", "encoder_padding_mask", ".", "size", "(", "1", ")", "==", "batch_size", ",", "\"batch_size does not match\"", "\n", "\n", "return", "max_lengths", "-", "torch", ".", "sum", "(", "encoder_padding_mask", ",", "dim", "=", "0", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.collect_filtered": [[110, 125], ["function", "filtered.append"], "function", ["None"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils._filter_by_size_dynamic": [[127, 158], ["data_utils.collect_filtered", "numpy.fromiter", "isinstance", "isinstance", "isinstance", "size_fn", "size_fn", "isinstance", "all", "all", "set", "set", "isinstance", "isinstance", "all", "isinstance", "all", "max_positions.keys", "size_fn.keys", "all", "size_fn", "size_fn", "zip", "zip", "size_fn", "size_fn", "zip", "size_fn().values", "size_fn"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.collect_filtered"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.filter_by_size": [[160, 195], ["isinstance", "isinstance", "data_utils._filter_by_size_dynamic", "Exception", "len", "print", "hasattr", "isinstance", "indices[].tolist", "len", "hasattr", "isinstance", "indices[].tolist", "data_utils._filter_by_size_dynamic", "dataset.size", "len", "len"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils._filter_by_size_dynamic", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils._filter_by_size_dynamic", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.batch_by_size": [[197, 232], ["isinstance", "batch_by_size_fast", "numpy.fromiter", "ImportError"], "function", ["None"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.process_bpe_symbol": [[234, 242], ["sentence.replace().replace().strip.replace().replace().strip", "sentence.replace().replace().strip.replace().replace().strip", "sentence.replace().replace().strip.replace().replace", "sentence.replace().replace().strip.replace().replace", "sentence.replace().replace().strip.replace", "sentence.replace().replace().strip.replace"], "function", ["None"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.append_token_dataset.AppendTokenDataset.__init__": [[14, 21], ["BaseWrapperDataset.__init__", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "token", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset", ")", "\n", "self", ".", "token", "=", "token", "\n", "if", "token", "is", "not", "None", ":", "\n", "            ", "self", ".", "_sizes", "=", "np", ".", "array", "(", "dataset", ".", "sizes", ")", "+", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "_sizes", "=", "dataset", ".", "sizes", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.append_token_dataset.AppendTokenDataset.__getitem__": [[22, 27], ["torch.cat", "torch.cat.new"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "item", "=", "self", ".", "dataset", "[", "idx", "]", "\n", "if", "self", ".", "token", "is", "not", "None", ":", "\n", "            ", "item", "=", "torch", ".", "cat", "(", "[", "item", ",", "item", ".", "new", "(", "[", "self", ".", "token", "]", ")", "]", ")", "\n", "", "return", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.append_token_dataset.AppendTokenDataset.sizes": [[28, 31], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "sizes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_sizes", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.append_token_dataset.AppendTokenDataset.num_tokens": [[32, 37], ["append_token_dataset.AppendTokenDataset.dataset.num_tokens"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.num_tokens"], ["", "def", "num_tokens", "(", "self", ",", "index", ")", ":", "\n", "        ", "n", "=", "self", ".", "dataset", ".", "num_tokens", "(", "index", ")", "\n", "if", "self", ".", "token", "is", "not", "None", ":", "\n", "            ", "n", "+=", "1", "\n", "", "return", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.append_token_dataset.AppendTokenDataset.size": [[38, 43], ["append_token_dataset.AppendTokenDataset.dataset.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "size", "(", "self", ",", "index", ")", ":", "\n", "        ", "n", "=", "self", ".", "dataset", ".", "size", "(", "index", ")", "\n", "if", "self", ".", "token", "is", "not", "None", ":", "\n", "            ", "n", "+=", "1", "\n", "", "return", "n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.__init__": [[20, 40], ["dictionary.Dictionary.add_symbol", "dictionary.Dictionary.add_symbol", "dictionary.Dictionary.add_symbol", "dictionary.Dictionary.add_symbol", "len", "dictionary.Dictionary.add_symbol"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol"], ["def", "__init__", "(", "\n", "self", ",", "\n", "pad", "=", "\"<pad>\"", ",", "\n", "eos", "=", "\"</s>\"", ",", "\n", "unk", "=", "\"<unk>\"", ",", "\n", "bos", "=", "\"<s>\"", ",", "\n", "extra_special_symbols", "=", "None", ",", "\n", ")", ":", "\n", "        ", "self", ".", "unk_word", ",", "self", ".", "pad_word", ",", "self", ".", "eos_word", "=", "unk", ",", "pad", ",", "eos", "\n", "self", ".", "symbols", "=", "[", "]", "\n", "self", ".", "count", "=", "[", "]", "\n", "self", ".", "indices", "=", "{", "}", "\n", "self", ".", "bos_index", "=", "self", ".", "add_symbol", "(", "bos", ")", "\n", "self", ".", "pad_index", "=", "self", ".", "add_symbol", "(", "pad", ")", "\n", "self", ".", "eos_index", "=", "self", ".", "add_symbol", "(", "eos", ")", "\n", "self", ".", "unk_index", "=", "self", ".", "add_symbol", "(", "unk", ")", "\n", "if", "extra_special_symbols", ":", "\n", "            ", "for", "s", "in", "extra_special_symbols", ":", "\n", "                ", "self", ".", "add_symbol", "(", "s", ")", "\n", "", "", "self", ".", "nspecial", "=", "len", "(", "self", ".", "symbols", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.__eq__": [[41, 43], ["None"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "indices", "==", "other", ".", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.__getitem__": [[44, 48], ["len"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "if", "idx", "<", "len", "(", "self", ".", "symbols", ")", ":", "\n", "            ", "return", "self", ".", "symbols", "[", "idx", "]", "\n", "", "return", "self", ".", "unk_word", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.__len__": [[49, 52], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"Returns the number of symbols in the dictionary\"\"\"", "\n", "return", "len", "(", "self", ".", "symbols", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.__contains__": [[53, 55], ["None"], "methods", ["None"], ["", "def", "__contains__", "(", "self", ",", "sym", ")", ":", "\n", "        ", "return", "sym", "in", "self", ".", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.index": [[56, 62], ["isinstance"], "methods", ["None"], ["", "def", "index", "(", "self", ",", "sym", ")", ":", "\n", "        ", "\"\"\"Returns the index of the specified symbol\"\"\"", "\n", "assert", "isinstance", "(", "sym", ",", "str", ")", "\n", "if", "sym", "in", "self", ".", "indices", ":", "\n", "            ", "return", "self", ".", "indices", "[", "sym", "]", "\n", "", "return", "self", ".", "unk_index", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.string": [[63, 86], ["hasattr", "fairseq.data.data_utils.process_bpe_symbol", "torch.is_tensor", "tensor.dim", "dictionary.Dictionary.unk", "dictionary.Dictionary.unk_string", "dictionary.Dictionary.string", "dictionary.Dictionary.string.token_string"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.process_bpe_symbol", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.unk", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.unk_string", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.string"], ["", "def", "string", "(", "self", ",", "tensor", ",", "bpe_symbol", "=", "None", ",", "escape_unk", "=", "False", ")", ":", "\n", "        ", "\"\"\"Helper for converting a tensor of token indices to a string.\n\n        Can optionally remove BPE symbols or escape <unk> words.\n        \"\"\"", "\n", "if", "torch", ".", "is_tensor", "(", "tensor", ")", "and", "tensor", ".", "dim", "(", ")", "==", "2", ":", "\n", "            ", "return", "\"\\n\"", ".", "join", "(", "self", ".", "string", "(", "t", ",", "bpe_symbol", ",", "escape_unk", ")", "for", "t", "in", "tensor", ")", "\n", "\n", "", "def", "token_string", "(", "i", ")", ":", "\n", "            ", "if", "i", "==", "self", ".", "unk", "(", ")", ":", "\n", "                ", "return", "self", ".", "unk_string", "(", "escape_unk", ")", "\n", "", "else", ":", "\n", "                ", "return", "self", "[", "i", "]", "\n", "\n", "", "", "if", "hasattr", "(", "self", ",", "\"bos_index\"", ")", ":", "\n", "            ", "sent", "=", "\" \"", ".", "join", "(", "\n", "token_string", "(", "i", ")", "\n", "for", "i", "in", "tensor", "\n", "if", "(", "i", "!=", "self", ".", "eos", "(", ")", ")", "and", "(", "i", "!=", "self", ".", "bos", "(", ")", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "sent", "=", "\" \"", ".", "join", "(", "token_string", "(", "i", ")", "for", "i", "in", "tensor", "if", "i", "!=", "self", ".", "eos", "(", ")", ")", "\n", "", "return", "data_utils", ".", "process_bpe_symbol", "(", "sent", ",", "bpe_symbol", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.unk_string": [[87, 93], ["None"], "methods", ["None"], ["", "def", "unk_string", "(", "self", ",", "escape", "=", "False", ")", ":", "\n", "        ", "\"\"\"Return unknown string, optionally escaped as: <<unk>>\"\"\"", "\n", "if", "escape", ":", "\n", "            ", "return", "\"<{}>\"", ".", "format", "(", "self", ".", "unk_word", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "unk_word", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol": [[94, 106], ["len", "dictionary.Dictionary.symbols.append", "dictionary.Dictionary.count.append"], "methods", ["None"], ["", "", "def", "add_symbol", "(", "self", ",", "word", ",", "n", "=", "1", ")", ":", "\n", "        ", "\"\"\"Adds a word to the dictionary\"\"\"", "\n", "if", "word", "in", "self", ".", "indices", ":", "\n", "            ", "idx", "=", "self", ".", "indices", "[", "word", "]", "\n", "self", ".", "count", "[", "idx", "]", "=", "self", ".", "count", "[", "idx", "]", "+", "n", "\n", "return", "idx", "\n", "", "else", ":", "\n", "            ", "idx", "=", "len", "(", "self", ".", "symbols", ")", "\n", "self", ".", "indices", "[", "word", "]", "=", "idx", "\n", "self", ".", "symbols", ".", "append", "(", "word", ")", "\n", "self", ".", "count", ".", "append", "(", "n", ")", "\n", "return", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.update": [[107, 119], ["len", "dictionary.Dictionary.symbols.append", "dictionary.Dictionary.count.append"], "methods", ["None"], ["", "", "def", "update", "(", "self", ",", "new_dict", ")", ":", "\n", "        ", "\"\"\"Updates counts from new dictionary.\"\"\"", "\n", "for", "word", "in", "new_dict", ".", "symbols", ":", "\n", "            ", "idx2", "=", "new_dict", ".", "indices", "[", "word", "]", "\n", "if", "word", "in", "self", ".", "indices", ":", "\n", "                ", "idx", "=", "self", ".", "indices", "[", "word", "]", "\n", "self", ".", "count", "[", "idx", "]", "=", "self", ".", "count", "[", "idx", "]", "+", "new_dict", ".", "count", "[", "idx2", "]", "\n", "", "else", ":", "\n", "                ", "idx", "=", "len", "(", "self", ".", "symbols", ")", "\n", "self", ".", "indices", "[", "word", "]", "=", "idx", "\n", "self", ".", "symbols", ".", "append", "(", "word", ")", "\n", "self", ".", "count", ".", "append", "(", "new_dict", ".", "count", "[", "idx2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.finalize": [[120, 158], ["dict", "collections.Counter", "collections.Counter.most_common", "list", "list", "dictionary.Dictionary.pad_to_multiple_", "len", "zip", "dict", "len", "len", "range", "sorted", "len", "new_symbols.append", "new_count.append", "zip"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad_to_multiple_"], ["", "", "", "def", "finalize", "(", "self", ",", "threshold", "=", "-", "1", ",", "nwords", "=", "-", "1", ",", "padding_factor", "=", "8", ")", ":", "\n", "        ", "\"\"\"Sort symbols by frequency in descending order, ignoring special ones.\n\n        Args:\n            - threshold defines the minimum word count\n            - nwords defines the total number of words in the final dictionary,\n                including special symbols\n            - padding_factor can be used to pad the dictionary size to be a\n                multiple of 8, which is important on some hardware (e.g., Nvidia\n                Tensor Cores).\n        \"\"\"", "\n", "if", "nwords", "<=", "0", ":", "\n", "            ", "nwords", "=", "len", "(", "self", ")", "\n", "\n", "", "new_indices", "=", "dict", "(", "zip", "(", "self", ".", "symbols", "[", ":", "self", ".", "nspecial", "]", ",", "range", "(", "self", ".", "nspecial", ")", ")", ")", "\n", "new_symbols", "=", "self", ".", "symbols", "[", ":", "self", ".", "nspecial", "]", "\n", "new_count", "=", "self", ".", "count", "[", ":", "self", ".", "nspecial", "]", "\n", "\n", "c", "=", "Counter", "(", "\n", "dict", "(", "\n", "sorted", "(", "zip", "(", "self", ".", "symbols", "[", "self", ".", "nspecial", ":", "]", ",", "self", ".", "count", "[", "self", ".", "nspecial", ":", "]", ")", ")", "\n", ")", "\n", ")", "\n", "for", "symbol", ",", "count", "in", "c", ".", "most_common", "(", "nwords", "-", "self", ".", "nspecial", ")", ":", "\n", "            ", "if", "count", ">=", "threshold", ":", "\n", "                ", "new_indices", "[", "symbol", "]", "=", "len", "(", "new_symbols", ")", "\n", "new_symbols", ".", "append", "(", "symbol", ")", "\n", "new_count", ".", "append", "(", "count", ")", "\n", "", "else", ":", "\n", "                ", "break", "\n", "\n", "", "", "assert", "len", "(", "new_symbols", ")", "==", "len", "(", "new_indices", ")", "\n", "\n", "self", ".", "count", "=", "list", "(", "new_count", ")", "\n", "self", ".", "symbols", "=", "list", "(", "new_symbols", ")", "\n", "self", ".", "indices", "=", "new_indices", "\n", "\n", "self", ".", "pad_to_multiple_", "(", "padding_factor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad_to_multiple_": [[159, 167], ["dictionary.Dictionary.add_symbol", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol"], ["", "def", "pad_to_multiple_", "(", "self", ",", "padding_factor", ")", ":", "\n", "        ", "\"\"\"Pad Dictionary size to be a multiple of *padding_factor*.\"\"\"", "\n", "if", "padding_factor", ">", "1", ":", "\n", "            ", "i", "=", "0", "\n", "while", "len", "(", "self", ")", "%", "padding_factor", "!=", "0", ":", "\n", "                ", "symbol", "=", "\"madeupword{:04d}\"", ".", "format", "(", "i", ")", "\n", "self", ".", "add_symbol", "(", "symbol", ",", "n", "=", "0", ")", "\n", "i", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.bos": [[168, 171], ["None"], "methods", ["None"], ["", "", "", "def", "bos", "(", "self", ")", ":", "\n", "        ", "\"\"\"Helper to get index of beginning-of-sentence symbol\"\"\"", "\n", "return", "self", ".", "bos_index", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad": [[172, 175], ["None"], "methods", ["None"], ["", "def", "pad", "(", "self", ")", ":", "\n", "        ", "\"\"\"Helper to get index of pad symbol\"\"\"", "\n", "return", "self", ".", "pad_index", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos": [[176, 179], ["None"], "methods", ["None"], ["", "def", "eos", "(", "self", ")", ":", "\n", "        ", "\"\"\"Helper to get index of end-of-sentence symbol\"\"\"", "\n", "return", "self", ".", "eos_index", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.unk": [[180, 183], ["None"], "methods", ["None"], ["", "def", "unk", "(", "self", ")", ":", "\n", "        ", "\"\"\"Helper to get index of unk symbol\"\"\"", "\n", "return", "self", ".", "unk_index", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.load": [[184, 197], ["cls", "cls.add_from_file"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dictionary.BertDictionary.cls", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_from_file"], ["", "@", "classmethod", "\n", "def", "load", "(", "cls", ",", "f", ")", ":", "\n", "        ", "\"\"\"Loads the dictionary from a text file with the format:\n\n        ```\n        <symbol0> <count0>\n        <symbol1> <count1>\n        ...\n        ```\n        \"\"\"", "\n", "d", "=", "cls", "(", ")", "\n", "d", ".", "add_from_file", "(", "f", ")", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_from_file": [[198, 229], ["isinstance", "f.readlines", "dictionary.Dictionary._load_meta", "line.rfind", "int", "len", "dictionary.Dictionary.symbols.append", "dictionary.Dictionary.count.append", "ValueError", "fairseq.file_io.PathManager.open", "dictionary.Dictionary.add_from_file", "Exception"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary._load_meta", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_from_file"], ["", "def", "add_from_file", "(", "self", ",", "f", ")", ":", "\n", "        ", "\"\"\"\n        Loads a pre-existing dictionary from a text file and adds its symbols\n        to this instance.\n        \"\"\"", "\n", "if", "isinstance", "(", "f", ",", "str", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "with", "PathManager", ".", "open", "(", "f", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "fd", ":", "\n", "                    ", "self", ".", "add_from_file", "(", "fd", ")", "\n", "", "", "except", "FileNotFoundError", "as", "fnfe", ":", "\n", "                ", "raise", "fnfe", "\n", "", "except", "UnicodeError", ":", "\n", "                ", "raise", "Exception", "(", "\n", "\"Incorrect encoding detected in {}, please \"", "\n", "\"rebuild the dataset\"", ".", "format", "(", "f", ")", "\n", ")", "\n", "", "return", "\n", "\n", "", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "indices_start_line", "=", "self", ".", "_load_meta", "(", "lines", ")", "\n", "for", "line", "in", "lines", "[", "indices_start_line", ":", "]", ":", "\n", "            ", "idx", "=", "line", ".", "rfind", "(", "\" \"", ")", "\n", "if", "idx", "==", "-", "1", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "\"Incorrect dictionary format, expected '<token> <cnt>'\"", "\n", ")", "\n", "", "word", "=", "line", "[", ":", "idx", "]", "\n", "count", "=", "int", "(", "line", "[", "idx", "+", "1", ":", "]", ")", "\n", "self", ".", "indices", "[", "word", "]", "=", "len", "(", "self", ".", "symbols", ")", "\n", "self", ".", "symbols", ".", "append", "(", "word", ")", "\n", "self", ".", "count", ".", "append", "(", "count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary._save": [[230, 237], ["isinstance", "fairseq.file_io.PathManager.mkdirs", "print", "os.path.dirname", "fairseq.file_io.PathManager.open", "dictionary.Dictionary.save"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.mkdirs", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.save"], ["", "", "def", "_save", "(", "self", ",", "f", ",", "kv_iterator", ")", ":", "\n", "        ", "if", "isinstance", "(", "f", ",", "str", ")", ":", "\n", "            ", "PathManager", ".", "mkdirs", "(", "os", ".", "path", ".", "dirname", "(", "f", ")", ")", "\n", "with", "PathManager", ".", "open", "(", "f", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "fd", ":", "\n", "                ", "return", "self", ".", "save", "(", "fd", ")", "\n", "", "", "for", "k", ",", "v", "in", "kv_iterator", ":", "\n", "            ", "print", "(", "\"{} {}\"", ".", "format", "(", "k", ",", "v", ")", ",", "file", "=", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary._get_meta": [[238, 240], ["None"], "methods", ["None"], ["", "", "def", "_get_meta", "(", "self", ")", ":", "\n", "        ", "return", "[", "]", ",", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary._load_meta": [[241, 243], ["None"], "methods", ["None"], ["", "def", "_load_meta", "(", "self", ",", "lines", ")", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.save": [[244, 252], ["dictionary.Dictionary._get_meta", "dictionary.Dictionary._save", "zip"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary._get_meta", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary._save"], ["", "def", "save", "(", "self", ",", "f", ")", ":", "\n", "        ", "\"\"\"Stores dictionary into a text file\"\"\"", "\n", "ex_keys", ",", "ex_vals", "=", "self", ".", "_get_meta", "(", ")", "\n", "self", ".", "_save", "(", "\n", "f", ",", "\n", "zip", "(", "\n", "ex_keys", "+", "self", ".", "symbols", "[", "self", ".", "nspecial", ":", "]", ",", "\n", "ex_vals", "+", "self", ".", "count", "[", "self", ".", "nspecial", ":", "]", ",", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.dummy_sentence": [[255, 259], ["torch.Tensor().uniform_().long", "dictionary.Dictionary.eos", "torch.Tensor().uniform_", "len", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos"], ["", "def", "dummy_sentence", "(", "self", ",", "length", ")", ":", "\n", "        ", "t", "=", "torch", ".", "Tensor", "(", "length", ")", ".", "uniform_", "(", "self", ".", "nspecial", "+", "1", ",", "len", "(", "self", ")", ")", ".", "long", "(", ")", "\n", "t", "[", "-", "1", "]", "=", "self", ".", "eos", "(", ")", "\n", "return", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.encode_line": [[260, 286], ["line_tokenizer", "len", "torch.IntTensor", "enumerate", "list", "reversed", "dictionary.Dictionary.add_symbol", "dictionary.Dictionary.index", "consumer"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.index"], ["", "def", "encode_line", "(", "\n", "self", ",", "\n", "line", ",", "\n", "line_tokenizer", "=", "tokenize_line", ",", "\n", "add_if_not_exist", "=", "True", ",", "\n", "consumer", "=", "None", ",", "\n", "append_eos", "=", "True", ",", "\n", "reverse_order", "=", "False", ",", "\n", ")", ":", "\n", "        ", "words", "=", "line_tokenizer", "(", "line", ")", "\n", "if", "reverse_order", ":", "\n", "            ", "words", "=", "list", "(", "reversed", "(", "words", ")", ")", "\n", "", "nwords", "=", "len", "(", "words", ")", "\n", "ids", "=", "torch", ".", "IntTensor", "(", "nwords", "+", "1", "if", "append_eos", "else", "nwords", ")", "\n", "\n", "for", "i", ",", "word", "in", "enumerate", "(", "words", ")", ":", "\n", "            ", "if", "add_if_not_exist", ":", "\n", "                ", "idx", "=", "self", ".", "add_symbol", "(", "word", ")", "\n", "", "else", ":", "\n", "                ", "idx", "=", "self", ".", "index", "(", "word", ")", "\n", "", "if", "consumer", "is", "not", "None", ":", "\n", "                ", "consumer", "(", "word", ",", "idx", ")", "\n", "", "ids", "[", "i", "]", "=", "idx", "\n", "", "if", "append_eos", ":", "\n", "            ", "ids", "[", "nwords", "]", "=", "self", ".", "eos_index", "\n", "", "return", "ids", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary._add_file_to_dictionary_single_worker": [[287, 309], ["collections.Counter", "open", "f.seek", "f.readline", "fairseq.file_io.PathManager.get_local_path", "os.fstat", "fairseq.binarizer.safe_readline", "tokenize", "collections.Counter.update", "f.readline", "f.fileno", "collections.Counter.update", "f.tell"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.get_local_path", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.binarizer.safe_readline", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.hub_utils.GeneratorHubInterface.tokenize", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.update", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.update"], ["", "@", "staticmethod", "\n", "def", "_add_file_to_dictionary_single_worker", "(", "\n", "filename", ",", "tokenize", ",", "eos_word", ",", "worker_id", "=", "0", ",", "num_workers", "=", "1", "\n", ")", ":", "\n", "        ", "counter", "=", "Counter", "(", ")", "\n", "with", "open", "(", "PathManager", ".", "get_local_path", "(", "filename", ")", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "            ", "size", "=", "os", ".", "fstat", "(", "f", ".", "fileno", "(", ")", ")", ".", "st_size", "\n", "chunk_size", "=", "size", "//", "num_workers", "\n", "offset", "=", "worker_id", "*", "chunk_size", "\n", "end", "=", "offset", "+", "chunk_size", "\n", "f", ".", "seek", "(", "offset", ")", "\n", "if", "offset", ">", "0", ":", "\n", "                ", "safe_readline", "(", "f", ")", "# drop first incomplete line", "\n", "", "line", "=", "f", ".", "readline", "(", ")", "\n", "while", "line", ":", "\n", "                ", "for", "word", "in", "tokenize", "(", "line", ")", ":", "\n", "                    ", "counter", ".", "update", "(", "[", "word", "]", ")", "\n", "", "counter", ".", "update", "(", "[", "eos_word", "]", ")", "\n", "if", "f", ".", "tell", "(", ")", ">", "end", ":", "\n", "                    ", "break", "\n", "", "line", "=", "f", ".", "readline", "(", ")", "\n", "", "", "return", "counter", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_file_to_dictionary": [[310, 334], ["sorted", "multiprocessing.Pool", "range", "multiprocessing.Pool.close", "multiprocessing.Pool.join", "dictionary.Dictionary.add_file_to_dictionary.merge_result"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_file_to_dictionary", "(", "filename", ",", "dict", ",", "tokenize", ",", "num_workers", ")", ":", "\n", "        ", "def", "merge_result", "(", "counter", ")", ":", "\n", "            ", "for", "w", ",", "c", "in", "sorted", "(", "counter", ".", "items", "(", ")", ")", ":", "\n", "                ", "dict", ".", "add_symbol", "(", "w", ",", "c", ")", "\n", "\n", "", "", "if", "num_workers", ">", "1", ":", "\n", "            ", "pool", "=", "Pool", "(", "processes", "=", "num_workers", ")", "\n", "results", "=", "[", "]", "\n", "for", "worker_id", "in", "range", "(", "num_workers", ")", ":", "\n", "                ", "results", ".", "append", "(", "\n", "pool", ".", "apply_async", "(", "\n", "Dictionary", ".", "_add_file_to_dictionary_single_worker", ",", "\n", "(", "filename", ",", "tokenize", ",", "dict", ".", "eos_word", ",", "worker_id", ",", "num_workers", ")", ",", "\n", ")", "\n", ")", "\n", "", "pool", ".", "close", "(", ")", "\n", "pool", ".", "join", "(", ")", "\n", "for", "r", "in", "results", ":", "\n", "                ", "merge_result", "(", "r", ".", "get", "(", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "merge_result", "(", "\n", "Dictionary", ".", "_add_file_to_dictionary_single_worker", "(", "\n", "filename", ",", "tokenize", ",", "dict", ".", "eos_word", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.TruncatedDictionary.__init__": [[339, 348], ["type", "min", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "wrapped_dict", ",", "length", ")", ":", "\n", "        ", "self", ".", "__class__", "=", "type", "(", "\n", "wrapped_dict", ".", "__class__", ".", "__name__", ",", "\n", "(", "self", ".", "__class__", ",", "wrapped_dict", ".", "__class__", ")", ",", "\n", "{", "}", ",", "\n", ")", "\n", "self", ".", "__dict__", "=", "wrapped_dict", ".", "__dict__", "\n", "self", ".", "wrapped_dict", "=", "wrapped_dict", "\n", "self", ".", "length", "=", "min", "(", "len", "(", "self", ".", "wrapped_dict", ")", ",", "length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.TruncatedDictionary.__len__": [[349, 351], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.TruncatedDictionary.__getitem__": [[352, 356], ["dictionary.TruncatedDictionary.wrapped_dict.unk"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.unk"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "if", "i", "<", "self", ".", "length", ":", "\n", "            ", "return", "self", ".", "wrapped_dict", "[", "i", "]", "\n", "", "return", "self", ".", "wrapped_dict", ".", "unk", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.subsample_dataset.SubsampleDataset.__init__": [[19, 29], ["BaseWrapperDataset.__init__", "numpy.ceil().astype", "numpy.random.choice", "print", "list", "numpy.ceil", "range", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], ["\n", "\n", "def", "__init__", "(", "self", ",", "dataset", ",", "size_ratio", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset", ")", "\n", "assert", "size_ratio", "<", "1", "\n", "self", ".", "actual_size", "=", "np", ".", "ceil", "(", "len", "(", "dataset", ")", "*", "size_ratio", ")", ".", "astype", "(", "int", ")", "\n", "self", ".", "indices", "=", "np", ".", "random", ".", "choice", "(", "\n", "list", "(", "range", "(", "len", "(", "self", ".", "dataset", ")", ")", ")", ",", "self", ".", "actual_size", ",", "replace", "=", "False", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.subsample_dataset.SubsampleDataset.__getitem__": [[32, 34], ["None"], "methods", ["None"], ["\"subsampled dataset from {} to {} (ratio={})\"", ".", "format", "(", "\n", "len", "(", "self", ".", "dataset", ")", ",", "self", ".", "actual_size", ",", "size_ratio", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.subsample_dataset.SubsampleDataset.__len__": [[35, 37], ["None"], "methods", ["None"], [")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.subsample_dataset.SubsampleDataset.collater": [[38, 40], ["subsample_dataset.SubsampleDataset.dataset.collater"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.collater"], ["        ", "return", "self", ".", "dataset", "[", "self", ".", "indices", "[", "index", "]", "]", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.subsample_dataset.SubsampleDataset.sizes": [[41, 44], ["None"], "methods", ["None"], ["        ", "return", "self", ".", "actual_size", "\n", "\n", "", "def", "collater", "(", "self", ",", "samples", ")", ":", "\n", "        ", "return", "self", ".", "dataset", ".", "collater", "(", "samples", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.subsample_dataset.SubsampleDataset.name": [[45, 48], ["None"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "sizes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dataset", ".", "sizes", "[", "self", ".", "indices", "]", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.subsample_dataset.SubsampleDataset.num_tokens": [[49, 51], ["subsample_dataset.SubsampleDataset.dataset.num_tokens"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.num_tokens"], ["\n", "", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.subsample_dataset.SubsampleDataset.size": [[52, 54], ["subsample_dataset.SubsampleDataset.dataset.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["        ", "return", "self", ".", "dataset", ".", "name", "\n", "\n", "", "def", "num_tokens", "(", "self", ",", "index", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.subsample_dataset.SubsampleDataset.ordered_indices": [[55, 64], ["order.append", "numpy.lexsort", "numpy.random.permutation", "numpy.arange", "len", "len"], "methods", ["None"], ["        ", "return", "self", ".", "dataset", ".", "num_tokens", "(", "self", ".", "indices", "[", "index", "]", ")", "\n", "\n", "", "def", "size", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "dataset", ".", "size", "(", "self", ".", "indices", "[", "index", "]", ")", "\n", "\n", "", "def", "ordered_indices", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return an ordered list of indices. Batches will be constructed based\n        on this order.\"\"\"", "\n", "if", "self", ".", "shuffle", ":", "\n", "            ", "order", "=", "[", "np", ".", "random", ".", "permutation", "(", "len", "(", "self", ")", ")", "]", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.subsample_dataset.SubsampleDataset.prefetch": [[65, 67], ["subsample_dataset.SubsampleDataset.dataset.prefetch"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.block_pair_dataset.BlockPairDataset.prefetch"], ["", "else", ":", "\n", "            ", "order", "=", "[", "np", ".", "arange", "(", "len", "(", "self", ")", ")", "]", "\n", "", "order", ".", "append", "(", "self", ".", "sizes", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.prepend_token_dataset.PrependTokenDataset.__init__": [[14, 21], ["BaseWrapperDataset.__init__", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "token", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset", ")", "\n", "self", ".", "token", "=", "token", "\n", "if", "token", "is", "not", "None", ":", "\n", "            ", "self", ".", "_sizes", "=", "np", ".", "array", "(", "dataset", ".", "sizes", ")", "+", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "_sizes", "=", "dataset", ".", "sizes", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.prepend_token_dataset.PrependTokenDataset.__getitem__": [[22, 27], ["torch.cat", "torch.cat.new"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "item", "=", "self", ".", "dataset", "[", "idx", "]", "\n", "if", "self", ".", "token", "is", "not", "None", ":", "\n", "            ", "item", "=", "torch", ".", "cat", "(", "[", "item", ".", "new", "(", "[", "self", ".", "token", "]", ")", ",", "item", "]", ")", "\n", "", "return", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.prepend_token_dataset.PrependTokenDataset.sizes": [[28, 31], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "sizes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_sizes", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.prepend_token_dataset.PrependTokenDataset.num_tokens": [[32, 37], ["prepend_token_dataset.PrependTokenDataset.dataset.num_tokens"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.num_tokens"], ["", "def", "num_tokens", "(", "self", ",", "index", ")", ":", "\n", "        ", "n", "=", "self", ".", "dataset", ".", "num_tokens", "(", "index", ")", "\n", "if", "self", ".", "token", "is", "not", "None", ":", "\n", "            ", "n", "+=", "1", "\n", "", "return", "n", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.prepend_token_dataset.PrependTokenDataset.size": [[38, 43], ["prepend_token_dataset.PrependTokenDataset.dataset.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "size", "(", "self", ",", "index", ")", ":", "\n", "        ", "n", "=", "self", ".", "dataset", ".", "size", "(", "index", ")", "\n", "if", "self", ".", "token", "is", "not", "None", ":", "\n", "            ", "n", "+=", "1", "\n", "", "return", "n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.transform_eos_dataset.TransformEosDataset.__init__": [[25, 60], ["torch.LongTensor", "isinstance", "ValueError", "ValueError", "ValueError"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "dataset", ",", "\n", "eos", ",", "\n", "append_eos_to_src", "=", "False", ",", "\n", "remove_eos_from_src", "=", "False", ",", "\n", "append_eos_to_tgt", "=", "False", ",", "\n", "remove_eos_from_tgt", "=", "False", ",", "\n", "has_target", "=", "True", ",", "\n", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "dataset", ",", "FairseqDataset", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'dataset must be an instance of FairseqDataset'", ")", "\n", "", "if", "append_eos_to_src", "and", "remove_eos_from_src", ":", "\n", "            ", "raise", "ValueError", "(", "'cannot combine append_eos_to_src and remove_eos_from_src'", ")", "\n", "", "if", "append_eos_to_tgt", "and", "remove_eos_from_tgt", ":", "\n", "            ", "raise", "ValueError", "(", "'cannot combine append_eos_to_tgt and remove_eos_from_tgt'", ")", "\n", "\n", "", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "eos", "=", "torch", ".", "LongTensor", "(", "[", "eos", "]", ")", "\n", "self", ".", "append_eos_to_src", "=", "append_eos_to_src", "\n", "self", ".", "remove_eos_from_src", "=", "remove_eos_from_src", "\n", "self", ".", "append_eos_to_tgt", "=", "append_eos_to_tgt", "\n", "self", ".", "remove_eos_from_tgt", "=", "remove_eos_from_tgt", "\n", "self", ".", "has_target", "=", "has_target", "\n", "\n", "# precompute how we should adjust the reported sizes", "\n", "self", ".", "_src_delta", "=", "0", "\n", "self", ".", "_src_delta", "+=", "1", "if", "append_eos_to_src", "else", "0", "\n", "self", ".", "_src_delta", "-=", "1", "if", "remove_eos_from_src", "else", "0", "\n", "self", ".", "_tgt_delta", "=", "0", "\n", "self", ".", "_tgt_delta", "+=", "1", "if", "append_eos_to_tgt", "else", "0", "\n", "self", ".", "_tgt_delta", "-=", "1", "if", "remove_eos_from_tgt", "else", "0", "\n", "\n", "self", ".", "_checked_src", "=", "False", "\n", "self", ".", "_checked_tgt", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.transform_eos_dataset.TransformEosDataset._check_src": [[61, 65], ["None"], "methods", ["None"], ["", "def", "_check_src", "(", "self", ",", "src", ",", "expect_eos", ")", ":", "\n", "        ", "if", "not", "self", ".", "_checked_src", ":", "\n", "            ", "assert", "(", "src", "[", "-", "1", "]", "==", "self", ".", "eos", "[", "0", "]", ")", "==", "expect_eos", "\n", "self", ".", "_checked_src", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.transform_eos_dataset.TransformEosDataset._check_tgt": [[66, 70], ["None"], "methods", ["None"], ["", "", "def", "_check_tgt", "(", "self", ",", "tgt", ",", "expect_eos", ")", ":", "\n", "        ", "if", "self", ".", "has_target", "and", "not", "self", ".", "_checked_tgt", ":", "\n", "            ", "assert", "(", "tgt", "[", "-", "1", "]", "==", "self", ".", "eos", "[", "0", "]", ")", "==", "expect_eos", "\n", "self", ".", "_checked_tgt", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.transform_eos_dataset.TransformEosDataset.__getitem__": [[71, 73], ["None"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "dataset", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.transform_eos_dataset.TransformEosDataset.__len__": [[74, 76], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.transform_eos_dataset.TransformEosDataset.collater": [[77, 100], ["list", "transform_eos_dataset.TransformEosDataset.dataset.collater", "map", "transform_eos_dataset.TransformEosDataset.eos.to", "transform_eos_dataset.TransformEosDataset._check_src", "torch.cat", "transform_eos_dataset.TransformEosDataset.eos.to", "transform_eos_dataset.TransformEosDataset._check_src", "transform_eos_dataset.TransformEosDataset.eos.to", "transform_eos_dataset.TransformEosDataset._check_tgt", "torch.cat", "transform_eos_dataset.TransformEosDataset.eos.to", "transform_eos_dataset.TransformEosDataset._check_tgt"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.collater", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.transform_eos_dataset.TransformEosDataset._check_src", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.transform_eos_dataset.TransformEosDataset._check_src", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.transform_eos_dataset.TransformEosDataset._check_tgt", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.transform_eos_dataset.TransformEosDataset._check_tgt"], ["", "def", "collater", "(", "self", ",", "samples", ")", ":", "\n", "\n", "        ", "def", "transform", "(", "item", ")", ":", "\n", "            ", "if", "self", ".", "append_eos_to_src", ":", "\n", "                ", "self", ".", "eos", "=", "self", ".", "eos", ".", "to", "(", "device", "=", "item", "[", "'source'", "]", ".", "device", ")", "\n", "self", ".", "_check_src", "(", "item", "[", "'source'", "]", ",", "expect_eos", "=", "False", ")", "\n", "item", "[", "'source'", "]", "=", "torch", ".", "cat", "(", "[", "item", "[", "'source'", "]", ",", "self", ".", "eos", "]", ")", "\n", "", "if", "self", ".", "remove_eos_from_src", ":", "\n", "                ", "self", ".", "eos", "=", "self", ".", "eos", ".", "to", "(", "device", "=", "item", "[", "'source'", "]", ".", "device", ")", "\n", "self", ".", "_check_src", "(", "item", "[", "'source'", "]", ",", "expect_eos", "=", "True", ")", "\n", "item", "[", "'source'", "]", "=", "item", "[", "'source'", "]", "[", ":", "-", "1", "]", "\n", "", "if", "self", ".", "append_eos_to_tgt", ":", "\n", "                ", "self", ".", "eos", "=", "self", ".", "eos", ".", "to", "(", "device", "=", "item", "[", "'target'", "]", ".", "device", ")", "\n", "self", ".", "_check_tgt", "(", "item", "[", "'target'", "]", ",", "expect_eos", "=", "False", ")", "\n", "item", "[", "'target'", "]", "=", "torch", ".", "cat", "(", "[", "item", "[", "'target'", "]", ",", "self", ".", "eos", "]", ")", "\n", "", "if", "self", ".", "remove_eos_from_tgt", ":", "\n", "                ", "self", ".", "eos", "=", "self", ".", "eos", ".", "to", "(", "device", "=", "item", "[", "'target'", "]", ".", "device", ")", "\n", "self", ".", "_check_tgt", "(", "item", "[", "'target'", "]", ",", "expect_eos", "=", "True", ")", "\n", "item", "[", "'target'", "]", "=", "item", "[", "'target'", "]", "[", ":", "-", "1", "]", "\n", "", "return", "item", "\n", "\n", "", "samples", "=", "list", "(", "map", "(", "transform", ",", "samples", ")", ")", "\n", "return", "self", ".", "dataset", ".", "collater", "(", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.transform_eos_dataset.TransformEosDataset.num_tokens": [[101, 103], ["transform_eos_dataset.TransformEosDataset.dataset.num_tokens"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.num_tokens"], ["", "def", "num_tokens", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "dataset", ".", "num_tokens", "(", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.transform_eos_dataset.TransformEosDataset.size": [[104, 110], ["transform_eos_dataset.TransformEosDataset.dataset.size", "transform_eos_dataset.TransformEosDataset.dataset.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "size", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "has_target", ":", "\n", "            ", "src_len", ",", "tgt_len", "=", "self", ".", "dataset", ".", "size", "(", "index", ")", "\n", "return", "(", "src_len", "+", "self", ".", "_src_delta", ",", "tgt_len", "+", "self", ".", "_tgt_delta", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "dataset", ".", "size", "(", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.transform_eos_dataset.TransformEosDataset.ordered_indices": [[111, 115], ["transform_eos_dataset.TransformEosDataset.dataset.ordered_indices"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.ordered_indices"], ["", "", "def", "ordered_indices", "(", "self", ")", ":", "\n", "# NOTE: we assume that the ordering does not change based on the", "\n", "# addition or removal of eos", "\n", "        ", "return", "self", ".", "dataset", ".", "ordered_indices", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.transform_eos_dataset.TransformEosDataset.supports_prefetch": [[116, 119], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "supports_prefetch", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ".", "dataset", ",", "'supports_prefetch'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.transform_eos_dataset.TransformEosDataset.prefetch": [[120, 122], ["transform_eos_dataset.TransformEosDataset.dataset.prefetch"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.block_pair_dataset.BlockPairDataset.prefetch"], ["", "def", "prefetch", "(", "self", ",", "indices", ")", ":", "\n", "        ", "return", "self", ".", "dataset", ".", "prefetch", "(", "indices", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.noising.WordNoising.__init__": [[14, 32], ["numpy.array", "numpy.array", "noising.WordNoising.dictionary[].endswith", "range", "noising.WordNoising.dictionary[].endswith", "len", "range", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dictionary", ",", "bpe_cont_marker", "=", "\"@@\"", ",", "bpe_end_marker", "=", "None", ")", ":", "\n", "        ", "self", ".", "dictionary", "=", "dictionary", "\n", "self", ".", "bpe_end", "=", "None", "\n", "if", "bpe_cont_marker", ":", "\n", "            ", "self", ".", "bpe_end", "=", "np", ".", "array", "(", "[", "\n", "not", "self", ".", "dictionary", "[", "i", "]", ".", "endswith", "(", "bpe_cont_marker", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "dictionary", ")", ")", "\n", "]", ")", "\n", "", "elif", "bpe_end_marker", ":", "\n", "            ", "self", ".", "bpe_end", "=", "np", ".", "array", "(", "[", "\n", "self", ".", "dictionary", "[", "i", "]", ".", "endswith", "(", "bpe_end_marker", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "dictionary", ")", ")", "\n", "]", ")", "\n", "\n", "", "self", ".", "get_word_idx", "=", "(", "\n", "self", ".", "_get_bpe_word_idx", "\n", "if", "self", ".", "bpe_end", "is", "not", "None", "\n", "else", "self", ".", "_get_token_idx", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.noising.WordNoising.noising": [[34, 36], ["NotImplementedError"], "methods", ["None"], ["", "def", "noising", "(", "self", ",", "x", ",", "lengths", ",", "noising_prob", "=", "0.0", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.noising.WordNoising._get_bpe_word_idx": [[37, 57], ["numpy.array", "bpe_end[].cumsum", "x.size", "x.size", "word_idx.max"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.concat_dataset.ConcatDataset.cumsum", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "_get_bpe_word_idx", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        Given a list of BPE tokens, for every index in the tokens list,\n        return the index of the word grouping that it belongs to.\n        For example, for input x corresponding to [\"how\", \"are\", \"y@@\", \"ou\"],\n        return [[0], [1], [2], [2]].\n        \"\"\"", "\n", "# x: (T x B)", "\n", "bpe_end", "=", "self", ".", "bpe_end", "[", "x", "]", "\n", "\n", "if", "(", "x", ".", "size", "(", "0", ")", "==", "1", "and", "x", ".", "size", "(", "1", ")", "==", "1", ")", ":", "\n", "# Special case when we only have one word in x. If x = [[N]],", "\n", "# bpe_end is a scalar (bool) instead of a 2-dim array of bools,", "\n", "# which makes the sum operation below fail.", "\n", "            ", "return", "np", ".", "array", "(", "[", "[", "0", "]", "]", ")", "\n", "\n", "# do a reduce front sum to generate word ids", "\n", "", "word_idx", "=", "bpe_end", "[", ":", ":", "-", "1", "]", ".", "cumsum", "(", "0", ")", "[", ":", ":", "-", "1", "]", "\n", "word_idx", "=", "word_idx", ".", "max", "(", "0", ")", "[", "None", ",", ":", "]", "-", "word_idx", "\n", "return", "word_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.noising.WordNoising._get_token_idx": [[58, 66], ["torch.t", "numpy.array", "numpy.transpose", "range", "len"], "methods", ["None"], ["", "def", "_get_token_idx", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\"\n        This is to extend noising functions to be able to apply to non-bpe\n        tokens, e.g. word or characters.\n        \"\"\"", "\n", "x", "=", "torch", ".", "t", "(", "x", ")", "\n", "word_idx", "=", "np", ".", "array", "(", "[", "range", "(", "len", "(", "x_i", ")", ")", "for", "x_i", "in", "x", "]", ")", "\n", "return", "np", ".", "transpose", "(", "word_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.noising.WordDropout.__init__": [[73, 76], ["noising.WordNoising.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["def", "__init__", "(", "self", ",", "dictionary", ",", "default_dropout_prob", "=", "0.1", ",", "bpe_cont_marker", "=", "\"@@\"", ",", "bpe_end_marker", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dictionary", ",", "bpe_cont_marker", ",", "bpe_end_marker", ")", "\n", "self", ".", "default_dropout_prob", "=", "default_dropout_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.noising.WordDropout.noising": [[77, 142], ["noising.WordDropout.get_word_idx", "range", "torch.LongTensor", "torch.LongTensor().fill_", "range", "lengths.size", "x[].tolist", "sentences.append", "torch.LongTensor.append", "noising.WordDropout.dictionary.pad", "torch.LongTensor.size", "modified_x[].copy_", "max", "noising.WordDropout.dictionary.eos", "numpy.append", "len", "new_s.insert", "len", "torch.LongTensor", "torch.LongTensor", "numpy.random.rand", "numpy.random.rand", "enumerate", "len", "torch.LongTensor.max", "torch.LongTensor.size", "numpy.random.randint", "len", "noising.WordDropout.dictionary.eos", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos"], ["", "def", "noising", "(", "self", ",", "x", ",", "lengths", ",", "dropout_prob", "=", "None", ",", "blank_idx", "=", "None", ")", ":", "\n", "        ", "if", "dropout_prob", "is", "None", ":", "\n", "            ", "dropout_prob", "=", "self", ".", "default_dropout_prob", "\n", "# x: (T x B), lengths: B", "\n", "", "if", "dropout_prob", "==", "0", ":", "\n", "            ", "return", "x", ",", "lengths", "\n", "\n", "", "assert", "0", "<", "dropout_prob", "<", "1", "\n", "\n", "# be sure to drop entire words", "\n", "word_idx", "=", "self", ".", "get_word_idx", "(", "x", ")", "\n", "sentences", "=", "[", "]", "\n", "modified_lengths", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "lengths", ".", "size", "(", "0", ")", ")", ":", "\n", "# Since dropout probabilities need to apply over non-pad tokens,", "\n", "# it is not trivial to generate the keep mask without consider", "\n", "# input lengths; otherwise, this could be done outside the loop", "\n", "\n", "# We want to drop whole words based on word_idx grouping", "\n", "            ", "num_words", "=", "max", "(", "word_idx", "[", ":", ",", "i", "]", ")", "+", "1", "\n", "\n", "# ith example: [x0, x1, ..., eos, pad, ..., pad]", "\n", "# We should only generate keep probs for non-EOS tokens. Thus if the", "\n", "# input sentence ends in EOS, the last word idx is not included in", "\n", "# the dropout mask generation and we append True to always keep EOS.", "\n", "# Otherwise, just generate the dropout mask for all word idx", "\n", "# positions.", "\n", "has_eos", "=", "x", "[", "lengths", "[", "i", "]", "-", "1", ",", "i", "]", "==", "self", ".", "dictionary", ".", "eos", "(", ")", "\n", "if", "has_eos", ":", "# has eos?", "\n", "                ", "keep", "=", "np", ".", "random", ".", "rand", "(", "num_words", "-", "1", ")", ">=", "dropout_prob", "\n", "keep", "=", "np", ".", "append", "(", "keep", ",", "[", "True", "]", ")", "# keep EOS symbol", "\n", "", "else", ":", "\n", "                ", "keep", "=", "np", ".", "random", ".", "rand", "(", "num_words", ")", ">=", "dropout_prob", "\n", "\n", "", "words", "=", "x", "[", ":", "lengths", "[", "i", "]", ",", "i", "]", ".", "tolist", "(", ")", "\n", "\n", "# TODO: speed up the following loop", "\n", "# drop words from the input according to keep", "\n", "new_s", "=", "[", "\n", "w", "if", "keep", "[", "word_idx", "[", "j", ",", "i", "]", "]", "else", "blank_idx", "\n", "for", "j", ",", "w", "in", "enumerate", "(", "words", ")", "\n", "]", "\n", "new_s", "=", "[", "w", "for", "w", "in", "new_s", "if", "w", "is", "not", "None", "]", "\n", "# we need to have at least one word in the sentence (more than the", "\n", "# start / end sentence symbols)", "\n", "if", "len", "(", "new_s", ")", "<=", "1", ":", "\n", "# insert at beginning in case the only token left is EOS", "\n", "# EOS should be at end of list.", "\n", "                ", "new_s", ".", "insert", "(", "0", ",", "words", "[", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "words", ")", ")", "]", ")", "\n", "", "assert", "len", "(", "new_s", ")", ">=", "1", "and", "(", "\n", "not", "has_eos", "# Either don't have EOS at end or last token is EOS", "\n", "or", "(", "len", "(", "new_s", ")", ">=", "2", "and", "new_s", "[", "-", "1", "]", "==", "self", ".", "dictionary", ".", "eos", "(", ")", ")", "\n", ")", ",", "\"New sentence is invalid.\"", "\n", "sentences", ".", "append", "(", "new_s", ")", "\n", "modified_lengths", ".", "append", "(", "len", "(", "new_s", ")", ")", "\n", "# re-construct input", "\n", "", "modified_lengths", "=", "torch", ".", "LongTensor", "(", "modified_lengths", ")", "\n", "modified_x", "=", "torch", ".", "LongTensor", "(", "\n", "modified_lengths", ".", "max", "(", ")", ",", "\n", "modified_lengths", ".", "size", "(", "0", ")", "\n", ")", ".", "fill_", "(", "self", ".", "dictionary", ".", "pad", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "modified_lengths", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "modified_x", "[", ":", "modified_lengths", "[", "i", "]", ",", "i", "]", ".", "copy_", "(", "torch", ".", "LongTensor", "(", "sentences", "[", "i", "]", ")", ")", "\n", "\n", "", "return", "modified_x", ",", "modified_lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.noising.WordShuffle.__init__": [[147, 150], ["noising.WordNoising.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["def", "__init__", "(", "self", ",", "dictionary", ",", "default_max_shuffle_distance", "=", "3", ",", "bpe_cont_marker", "=", "\"@@\"", ",", "bpe_end_marker", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dictionary", ",", "bpe_cont_marker", ",", "bpe_end_marker", ")", "\n", "self", ".", "default_max_shuffle_distance", "=", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.noising.WordShuffle.noising": [[151, 185], ["numpy.random.uniform", "noising.WordShuffle.get_word_idx", "x.clone", "range", "lengths.size", "scores.argsort", "x2[].copy_", "noising.WordShuffle.dictionary.eos", "numpy.arange", "x.size", "x.size", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "noising", "(", "self", ",", "x", ",", "lengths", ",", "max_shuffle_distance", "=", "None", ")", ":", "\n", "        ", "if", "max_shuffle_distance", "is", "None", ":", "\n", "            ", "max_shuffle_distance", "=", "self", ".", "default_max_shuffle_distance", "\n", "# x: (T x B), lengths: B", "\n", "", "if", "max_shuffle_distance", "==", "0", ":", "\n", "            ", "return", "x", ",", "lengths", "\n", "\n", "# max_shuffle_distance < 1 will return the same sequence", "\n", "", "assert", "max_shuffle_distance", ">", "1", "\n", "\n", "# define noise word scores", "\n", "noise", "=", "np", ".", "random", ".", "uniform", "(", "\n", "0", ",", "\n", "max_shuffle_distance", ",", "\n", "size", "=", "(", "x", ".", "size", "(", "0", ")", ",", "x", ".", "size", "(", "1", ")", ")", ",", "\n", ")", "\n", "noise", "[", "0", "]", "=", "-", "1", "# do not move start sentence symbol", "\n", "# be sure to shuffle entire words", "\n", "word_idx", "=", "self", ".", "get_word_idx", "(", "x", ")", "\n", "x2", "=", "x", ".", "clone", "(", ")", "\n", "for", "i", "in", "range", "(", "lengths", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "length_no_eos", "=", "lengths", "[", "i", "]", "\n", "if", "x", "[", "lengths", "[", "i", "]", "-", "1", ",", "i", "]", "==", "self", ".", "dictionary", ".", "eos", "(", ")", ":", "\n", "                ", "length_no_eos", "=", "lengths", "[", "i", "]", "-", "1", "\n", "# generate a random permutation", "\n", "", "scores", "=", "word_idx", "[", ":", "length_no_eos", ",", "i", "]", "+", "noise", "[", "word_idx", "[", ":", "length_no_eos", ",", "i", "]", ",", "i", "]", "\n", "# ensure no reordering inside a word", "\n", "scores", "+=", "1e-6", "*", "np", ".", "arange", "(", "length_no_eos", ")", "\n", "permutation", "=", "scores", ".", "argsort", "(", ")", "\n", "# shuffle words", "\n", "x2", "[", ":", "length_no_eos", ",", "i", "]", ".", "copy_", "(", "\n", "x2", "[", ":", "length_no_eos", ",", "i", "]", "[", "torch", ".", "from_numpy", "(", "permutation", ")", "]", "\n", ")", "\n", "", "return", "x2", ",", "lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.noising.UnsupervisedMTNoising.__init__": [[192, 215], ["noising.WordNoising.__init__", "noising.WordDropout", "noising.WordShuffle"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "dictionary", ",", "\n", "max_word_shuffle_distance", ",", "\n", "word_dropout_prob", ",", "\n", "word_blanking_prob", ",", "\n", "bpe_cont_marker", "=", "\"@@\"", ",", "\n", "bpe_end_marker", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dictionary", ")", "\n", "self", ".", "max_word_shuffle_distance", "=", "max_word_shuffle_distance", "\n", "self", ".", "word_dropout_prob", "=", "word_dropout_prob", "\n", "self", ".", "word_blanking_prob", "=", "word_blanking_prob", "\n", "\n", "self", ".", "word_dropout", "=", "WordDropout", "(", "\n", "dictionary", "=", "dictionary", ",", "\n", "bpe_cont_marker", "=", "bpe_cont_marker", ",", "\n", "bpe_end_marker", "=", "bpe_end_marker", ",", "\n", ")", "\n", "self", ".", "word_shuffle", "=", "WordShuffle", "(", "\n", "dictionary", "=", "dictionary", ",", "\n", "bpe_cont_marker", "=", "bpe_cont_marker", ",", "\n", "bpe_end_marker", "=", "bpe_end_marker", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.noising.UnsupervisedMTNoising.noising": [[217, 239], ["noising.UnsupervisedMTNoising.word_shuffle.noising", "noising.UnsupervisedMTNoising.word_dropout.noising", "noising.UnsupervisedMTNoising.word_dropout.noising", "noising.UnsupervisedMTNoising.dictionary.unk"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.noising.UnsupervisedMTNoising.noising", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.noising.UnsupervisedMTNoising.noising", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.noising.UnsupervisedMTNoising.noising", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.unk"], ["", "def", "noising", "(", "self", ",", "x", ",", "lengths", ")", ":", "\n", "# 1. Word Shuffle", "\n", "        ", "noisy_src_tokens", ",", "noisy_src_lengths", "=", "self", ".", "word_shuffle", ".", "noising", "(", "\n", "x", "=", "x", ",", "\n", "lengths", "=", "lengths", ",", "\n", "max_shuffle_distance", "=", "self", ".", "max_word_shuffle_distance", ",", "\n", ")", "\n", "# 2. Word Dropout", "\n", "noisy_src_tokens", ",", "noisy_src_lengths", "=", "self", ".", "word_dropout", ".", "noising", "(", "\n", "x", "=", "noisy_src_tokens", ",", "\n", "lengths", "=", "noisy_src_lengths", ",", "\n", "dropout_prob", "=", "self", ".", "word_dropout_prob", ",", "\n", ")", "\n", "# 3. Word Blanking", "\n", "noisy_src_tokens", ",", "noisy_src_lengths", "=", "self", ".", "word_dropout", ".", "noising", "(", "\n", "x", "=", "noisy_src_tokens", ",", "\n", "lengths", "=", "noisy_src_lengths", ",", "\n", "dropout_prob", "=", "self", ".", "word_blanking_prob", ",", "\n", "blank_idx", "=", "self", ".", "dictionary", ".", "unk", "(", ")", ",", "\n", ")", "\n", "\n", "return", "noisy_src_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.noising.NoisingDataset.__init__": [[242, 280], ["noising_class"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "src_dataset", ",", "\n", "src_dict", ",", "\n", "seed", ",", "\n", "noiser", "=", "None", ",", "\n", "noising_class", "=", "UnsupervisedMTNoising", ",", "\n", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Wrap a :class:`~torch.utils.data.Dataset` and apply noise to the\n        samples based on the supplied noising configuration.\n\n        Args:\n            src_dataset (~torch.utils.data.Dataset): dataset to wrap.\n                to build self.src_dataset --\n                a LanguagePairDataset with src dataset as the source dataset and\n                None as the target dataset. Should NOT have padding so that\n                src_lengths are accurately calculated by language_pair_dataset\n                collate function.\n                We use language_pair_dataset here to encapsulate the tgt_dataset\n                so we can re-use the LanguagePairDataset collater to format the\n                batches in the structure that SequenceGenerator expects.\n            src_dict (~fairseq.data.Dictionary): source dictionary\n            seed (int): seed to use when generating random noise\n            noiser (WordNoising): a pre-initialized :class:`WordNoising`\n                instance. If this is None, a new instance will be created using\n                *noising_class* and *kwargs*.\n            noising_class (class, optional): class to use to initialize a\n                default :class:`WordNoising` instance.\n            kwargs (dict, optional): arguments to initialize the default\n                :class:`WordNoising` instance given by *noiser*.\n        \"\"\"", "\n", "self", ".", "src_dataset", "=", "src_dataset", "\n", "self", ".", "src_dict", "=", "src_dict", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "noiser", "=", "noiser", "if", "noiser", "is", "not", "None", "else", "noising_class", "(", "\n", "dictionary", "=", "src_dict", ",", "**", "kwargs", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.noising.NoisingDataset.__getitem__": [[282, 302], ["torch.LongTensor", "src_tokens.unsqueeze.unsqueeze.unsqueeze", "torch.t", "torch.t", "fairseq.data.data_utils.numpy_seed", "noising.NoisingDataset.noiser.noising", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.numpy_seed", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.noising.UnsupervisedMTNoising.noising"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Returns a single noisy sample. Multiple samples are fed to the collater\n        create a noising dataset batch.\n        \"\"\"", "\n", "src_tokens", "=", "self", ".", "src_dataset", "[", "index", "]", "\n", "src_lengths", "=", "torch", ".", "LongTensor", "(", "[", "len", "(", "src_tokens", ")", "]", ")", "\n", "src_tokens", "=", "src_tokens", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "# Transpose src tokens to fit expected shape of x in noising function", "\n", "# (batch size, sequence length) -> (sequence length, batch size)", "\n", "src_tokens_t", "=", "torch", ".", "t", "(", "src_tokens", ")", "\n", "\n", "with", "data_utils", ".", "numpy_seed", "(", "self", ".", "seed", "+", "index", ")", ":", "\n", "            ", "noisy_src_tokens", "=", "self", ".", "noiser", ".", "noising", "(", "src_tokens_t", ",", "src_lengths", ")", "\n", "\n", "# Transpose back to expected src_tokens format", "\n", "# (sequence length, 1) -> (1, sequence length)", "\n", "", "noisy_src_tokens", "=", "torch", ".", "t", "(", "noisy_src_tokens", ")", "\n", "return", "noisy_src_tokens", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.noising.NoisingDataset.__len__": [[303, 308], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        The length of the noising dataset is the length of src.\n        \"\"\"", "\n", "return", "len", "(", "self", ".", "src_dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.noising.NoisingDataset.supports_prefetch": [[309, 312], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "supports_prefetch", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "src_dataset", ".", "supports_prefetch", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.noising.NoisingDataset.prefetch": [[313, 316], ["noising.NoisingDataset.src_dataset.prefetch"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.block_pair_dataset.BlockPairDataset.prefetch"], ["", "def", "prefetch", "(", "self", ",", "indices", ")", ":", "\n", "        ", "if", "self", ".", "src_dataset", ".", "supports_prefetch", ":", "\n", "            ", "self", ".", "src_dataset", ".", "prefetch", "(", "indices", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.IndexedDataset.__init__": [[114, 120], ["FairseqDataset.__init__", "indexed_dataset.IndexedDataset.read_index"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.IndexedDataset.read_index"], ["def", "__init__", "(", "self", ",", "path", ",", "fix_lua_indexing", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "path", "=", "path", "\n", "self", ".", "fix_lua_indexing", "=", "fix_lua_indexing", "\n", "self", ".", "data_file", "=", "None", "\n", "self", ".", "read_index", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.IndexedDataset.read_index": [[121, 136], ["open", "f.read", "f.read", "struct.unpack", "struct.unpack", "indexed_dataset.read_longs", "indexed_dataset.read_longs", "indexed_dataset.read_longs", "indexed_dataset.index_file_path", "struct.unpack", "f.read", "f.read"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.dataset_reader.DatasetReader.read", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.dataset_reader.DatasetReader.read", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.read_longs", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.read_longs", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.read_longs", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.index_file_path", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.dataset_reader.DatasetReader.read", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.dataset_reader.DatasetReader.read"], ["", "def", "read_index", "(", "self", ",", "path", ")", ":", "\n", "        ", "with", "open", "(", "index_file_path", "(", "path", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "magic", "=", "f", ".", "read", "(", "8", ")", "\n", "assert", "magic", "==", "self", ".", "_HDR_MAGIC", ",", "(", "\n", "'Index file doesn\\'t match expected format. '", "\n", "'Make sure that --dataset-impl is configured properly.'", "\n", ")", "\n", "version", "=", "f", ".", "read", "(", "8", ")", "\n", "assert", "struct", ".", "unpack", "(", "'<Q'", ",", "version", ")", "==", "(", "1", ",", ")", "\n", "code", ",", "self", ".", "element_size", "=", "struct", ".", "unpack", "(", "'<QQ'", ",", "f", ".", "read", "(", "16", ")", ")", "\n", "self", ".", "dtype", "=", "dtypes", "[", "code", "]", "\n", "self", ".", "_len", ",", "self", ".", "s", "=", "struct", ".", "unpack", "(", "'<QQ'", ",", "f", ".", "read", "(", "16", ")", ")", "\n", "self", ".", "dim_offsets", "=", "read_longs", "(", "f", ",", "self", ".", "_len", "+", "1", ")", "\n", "self", ".", "data_offsets", "=", "read_longs", "(", "f", ",", "self", ".", "_len", "+", "1", ")", "\n", "self", ".", "sizes", "=", "read_longs", "(", "f", ",", "self", ".", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.IndexedDataset.read_data": [[137, 139], ["open", "indexed_dataset.data_file_path"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.data_file_path"], ["", "", "def", "read_data", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "data_file", "=", "open", "(", "data_file_path", "(", "path", ")", ",", "'rb'", ",", "buffering", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.IndexedDataset.check_index": [[140, 143], ["IndexError"], "methods", ["None"], ["", "def", "check_index", "(", "self", ",", "i", ")", ":", "\n", "        ", "if", "i", "<", "0", "or", "i", ">=", "self", ".", "_len", ":", "\n", "            ", "raise", "IndexError", "(", "'index out of range'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.IndexedDataset.__del__": [[144, 147], ["indexed_dataset.IndexedDataset.data_file.close"], "methods", ["None"], ["", "", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "data_file", ":", "\n", "            ", "self", ".", "data_file", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.IndexedDataset.__getitem__": [[148, 161], ["functools.lru_cache", "indexed_dataset.IndexedDataset.check_index", "numpy.empty", "indexed_dataset.IndexedDataset.data_file.seek", "indexed_dataset.IndexedDataset.data_file.readinto", "torch.from_numpy().long", "indexed_dataset.IndexedDataset.read_data", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.IndexedRawTextDataset.check_index", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.IndexedRawTextDataset.read_data"], ["", "", "@", "lru_cache", "(", "maxsize", "=", "8", ")", "\n", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "if", "not", "self", ".", "data_file", ":", "\n", "            ", "self", ".", "read_data", "(", "self", ".", "path", ")", "\n", "", "self", ".", "check_index", "(", "i", ")", "\n", "tensor_size", "=", "self", ".", "sizes", "[", "self", ".", "dim_offsets", "[", "i", "]", ":", "self", ".", "dim_offsets", "[", "i", "+", "1", "]", "]", "\n", "a", "=", "np", ".", "empty", "(", "tensor_size", ",", "dtype", "=", "self", ".", "dtype", ")", "\n", "self", ".", "data_file", ".", "seek", "(", "self", ".", "data_offsets", "[", "i", "]", "*", "self", ".", "element_size", ")", "\n", "self", ".", "data_file", ".", "readinto", "(", "a", ")", "\n", "item", "=", "torch", ".", "from_numpy", "(", "a", ")", ".", "long", "(", ")", "\n", "if", "self", ".", "fix_lua_indexing", ":", "\n", "            ", "item", "-=", "1", "# subtract 1 for 0-based indexing", "\n", "", "return", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.IndexedDataset.__len__": [[162, 164], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_len", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.IndexedDataset.num_tokens": [[165, 167], ["None"], "methods", ["None"], ["", "def", "num_tokens", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "sizes", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.IndexedDataset.size": [[168, 170], ["None"], "methods", ["None"], ["", "def", "size", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "sizes", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.IndexedDataset.exists": [[171, 175], ["os.path.exists", "os.path.exists", "indexed_dataset.index_file_path", "indexed_dataset.data_file_path"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.index_file_path", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.data_file_path"], ["", "@", "staticmethod", "\n", "def", "exists", "(", "path", ")", ":", "\n", "        ", "return", "(", "\n", "os", ".", "path", ".", "exists", "(", "index_file_path", "(", "path", ")", ")", "and", "os", ".", "path", ".", "exists", "(", "data_file_path", "(", "path", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.IndexedDataset.supports_prefetch": [[177, 180], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "supports_prefetch", "(", "self", ")", ":", "\n", "        ", "return", "False", "# avoid prefetching to save memory", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.IndexedCachedDataset.__init__": [[184, 188], ["indexed_dataset.IndexedDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["    ", "def", "__init__", "(", "self", ",", "path", ",", "fix_lua_indexing", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "path", ",", "fix_lua_indexing", "=", "fix_lua_indexing", ")", "\n", "self", ".", "cache", "=", "None", "\n", "self", ".", "cache_index", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.IndexedCachedDataset.supports_prefetch": [[189, 192], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "supports_prefetch", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.IndexedCachedDataset.prefetch": [[193, 216], ["all", "sorted", "numpy.empty", "indexed_dataset.IndexedCachedDataset.cache_index.clear", "indexed_dataset.IndexedCachedDataset.read_data", "set", "indexed_dataset.IndexedCachedDataset.data_file.seek", "indexed_dataset.IndexedCachedDataset.data_file.readinto", "indexed_dataset.IndexedCachedDataset.data_file.close"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.IndexedRawTextDataset.read_data"], ["", "def", "prefetch", "(", "self", ",", "indices", ")", ":", "\n", "        ", "if", "all", "(", "i", "in", "self", ".", "cache_index", "for", "i", "in", "indices", ")", ":", "\n", "            ", "return", "\n", "", "if", "not", "self", ".", "data_file", ":", "\n", "            ", "self", ".", "read_data", "(", "self", ".", "path", ")", "\n", "", "indices", "=", "sorted", "(", "set", "(", "indices", ")", ")", "\n", "total_size", "=", "0", "\n", "for", "i", "in", "indices", ":", "\n", "            ", "total_size", "+=", "self", ".", "data_offsets", "[", "i", "+", "1", "]", "-", "self", ".", "data_offsets", "[", "i", "]", "\n", "", "self", ".", "cache", "=", "np", ".", "empty", "(", "total_size", ",", "dtype", "=", "self", ".", "dtype", ")", "\n", "ptx", "=", "0", "\n", "self", ".", "cache_index", ".", "clear", "(", ")", "\n", "for", "i", "in", "indices", ":", "\n", "            ", "self", ".", "cache_index", "[", "i", "]", "=", "ptx", "\n", "size", "=", "self", ".", "data_offsets", "[", "i", "+", "1", "]", "-", "self", ".", "data_offsets", "[", "i", "]", "\n", "a", "=", "self", ".", "cache", "[", "ptx", ":", "ptx", "+", "size", "]", "\n", "self", ".", "data_file", ".", "seek", "(", "self", ".", "data_offsets", "[", "i", "]", "*", "self", ".", "element_size", ")", "\n", "self", ".", "data_file", ".", "readinto", "(", "a", ")", "\n", "ptx", "+=", "size", "\n", "", "if", "self", ".", "data_file", ":", "\n", "# close and delete data file after prefetch so we can pickle", "\n", "            ", "self", ".", "data_file", ".", "close", "(", ")", "\n", "self", ".", "data_file", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.IndexedCachedDataset.__getitem__": [[217, 228], ["functools.lru_cache", "indexed_dataset.IndexedCachedDataset.check_index", "numpy.empty", "numpy.copyto", "torch.from_numpy().long", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.IndexedRawTextDataset.check_index"], ["", "", "@", "lru_cache", "(", "maxsize", "=", "8", ")", "\n", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "self", ".", "check_index", "(", "i", ")", "\n", "tensor_size", "=", "self", ".", "sizes", "[", "self", ".", "dim_offsets", "[", "i", "]", ":", "self", ".", "dim_offsets", "[", "i", "+", "1", "]", "]", "\n", "a", "=", "np", ".", "empty", "(", "tensor_size", ",", "dtype", "=", "self", ".", "dtype", ")", "\n", "ptx", "=", "self", ".", "cache_index", "[", "i", "]", "\n", "np", ".", "copyto", "(", "a", ",", "self", ".", "cache", "[", "ptx", ":", "ptx", "+", "a", ".", "size", "]", ")", "\n", "item", "=", "torch", ".", "from_numpy", "(", "a", ")", ".", "long", "(", ")", "\n", "if", "self", ".", "fix_lua_indexing", ":", "\n", "            ", "item", "-=", "1", "# subtract 1 for 0-based indexing", "\n", "", "return", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.IndexedRawTextDataset.__init__": [[234, 242], ["indexed_dataset.IndexedRawTextDataset.read_data", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.IndexedRawTextDataset.read_data"], ["def", "__init__", "(", "self", ",", "path", ",", "dictionary", ",", "append_eos", "=", "True", ",", "reverse_order", "=", "False", ")", ":", "\n", "        ", "self", ".", "tokens_list", "=", "[", "]", "\n", "self", ".", "lines", "=", "[", "]", "\n", "self", ".", "sizes", "=", "[", "]", "\n", "self", ".", "append_eos", "=", "append_eos", "\n", "self", ".", "reverse_order", "=", "reverse_order", "\n", "self", ".", "read_data", "(", "path", ",", "dictionary", ")", "\n", "self", ".", "size", "=", "len", "(", "self", ".", "tokens_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.IndexedRawTextDataset.read_data": [[243, 254], ["numpy.array", "open", "indexed_dataset.IndexedRawTextDataset.lines.append", "dictionary.encode_line().long", "indexed_dataset.IndexedRawTextDataset.tokens_list.append", "indexed_dataset.IndexedRawTextDataset.sizes.append", "line.strip", "len", "dictionary.encode_line"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.encode_line"], ["", "def", "read_data", "(", "self", ",", "path", ",", "dictionary", ")", ":", "\n", "        ", "with", "open", "(", "path", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "self", ".", "lines", ".", "append", "(", "line", ".", "strip", "(", "'\\n'", ")", ")", "\n", "tokens", "=", "dictionary", ".", "encode_line", "(", "\n", "line", ",", "add_if_not_exist", "=", "False", ",", "\n", "append_eos", "=", "self", ".", "append_eos", ",", "reverse_order", "=", "self", ".", "reverse_order", ",", "\n", ")", ".", "long", "(", ")", "\n", "self", ".", "tokens_list", ".", "append", "(", "tokens", ")", "\n", "self", ".", "sizes", ".", "append", "(", "len", "(", "tokens", ")", ")", "\n", "", "", "self", ".", "sizes", "=", "np", ".", "array", "(", "self", ".", "sizes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.IndexedRawTextDataset.check_index": [[255, 258], ["IndexError"], "methods", ["None"], ["", "def", "check_index", "(", "self", ",", "i", ")", ":", "\n", "        ", "if", "i", "<", "0", "or", "i", ">=", "self", ".", "size", ":", "\n", "            ", "raise", "IndexError", "(", "'index out of range'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.IndexedRawTextDataset.__getitem__": [[259, 263], ["functools.lru_cache", "indexed_dataset.IndexedRawTextDataset.check_index"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.IndexedRawTextDataset.check_index"], ["", "", "@", "lru_cache", "(", "maxsize", "=", "8", ")", "\n", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "self", ".", "check_index", "(", "i", ")", "\n", "return", "self", ".", "tokens_list", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.IndexedRawTextDataset.get_original_text": [[264, 267], ["indexed_dataset.IndexedRawTextDataset.check_index"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.IndexedRawTextDataset.check_index"], ["", "def", "get_original_text", "(", "self", ",", "i", ")", ":", "\n", "        ", "self", ".", "check_index", "(", "i", ")", "\n", "return", "self", ".", "lines", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.IndexedRawTextDataset.__del__": [[268, 270], ["None"], "methods", ["None"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.IndexedRawTextDataset.__len__": [[271, 273], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "size", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.IndexedRawTextDataset.num_tokens": [[274, 276], ["None"], "methods", ["None"], ["", "def", "num_tokens", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "sizes", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.IndexedRawTextDataset.size": [[277, 279], ["None"], "methods", ["None"], ["", "def", "size", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "sizes", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.IndexedRawTextDataset.exists": [[280, 283], ["os.path.exists"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists"], ["", "@", "staticmethod", "\n", "def", "exists", "(", "path", ")", ":", "\n", "        ", "return", "os", ".", "path", ".", "exists", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.IndexedDatasetBuilder.__init__": [[296, 303], ["open"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open"], ["def", "__init__", "(", "self", ",", "out_file", ",", "dtype", "=", "np", ".", "int32", ")", ":", "\n", "        ", "self", ".", "out_file", "=", "open", "(", "out_file", ",", "'wb'", ")", "\n", "self", ".", "dtype", "=", "dtype", "\n", "self", ".", "data_offsets", "=", "[", "0", "]", "\n", "self", ".", "dim_offsets", "=", "[", "0", "]", "\n", "self", ".", "sizes", "=", "[", "]", "\n", "self", ".", "element_size", "=", "self", ".", "element_sizes", "[", "self", ".", "dtype", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.IndexedDatasetBuilder.add_item": [[304, 311], ["indexed_dataset.IndexedDatasetBuilder.out_file.write", "indexed_dataset.IndexedDatasetBuilder.data_offsets.append", "tensor.size", "indexed_dataset.IndexedDatasetBuilder.dim_offsets.append", "numpy.array", "indexed_dataset.IndexedDatasetBuilder.sizes.append", "len", "tensor.numpy", "tensor.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "add_item", "(", "self", ",", "tensor", ")", ":", "\n", "# +1 for Lua compatibility", "\n", "        ", "bytes", "=", "self", ".", "out_file", ".", "write", "(", "np", ".", "array", "(", "tensor", ".", "numpy", "(", ")", "+", "1", ",", "dtype", "=", "self", ".", "dtype", ")", ")", "\n", "self", ".", "data_offsets", ".", "append", "(", "self", ".", "data_offsets", "[", "-", "1", "]", "+", "bytes", "/", "self", ".", "element_size", ")", "\n", "for", "s", "in", "tensor", ".", "size", "(", ")", ":", "\n", "            ", "self", ".", "sizes", ".", "append", "(", "s", ")", "\n", "", "self", ".", "dim_offsets", ".", "append", "(", "self", ".", "dim_offsets", "[", "-", "1", "]", "+", "len", "(", "tensor", ".", "size", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.IndexedDatasetBuilder.merge_file_": [[312, 331], ["indexed_dataset.IndexedDataset", "indexed_dataset.IndexedDatasetBuilder.sizes.extend", "indexed_dataset.IndexedDatasetBuilder.data_offsets.append", "indexed_dataset.IndexedDatasetBuilder.dim_offsets.append", "open", "indexed_dataset.data_file_path", "f.read", "indexed_dataset.IndexedDatasetBuilder.out_file.write"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.data_file_path", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.dataset_reader.DatasetReader.read", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write"], ["", "def", "merge_file_", "(", "self", ",", "another_file", ")", ":", "\n", "        ", "index", "=", "IndexedDataset", "(", "another_file", ")", "\n", "assert", "index", ".", "dtype", "==", "self", ".", "dtype", "\n", "\n", "begin", "=", "self", ".", "data_offsets", "[", "-", "1", "]", "\n", "for", "offset", "in", "index", ".", "data_offsets", "[", "1", ":", "]", ":", "\n", "            ", "self", ".", "data_offsets", ".", "append", "(", "begin", "+", "offset", ")", "\n", "", "self", ".", "sizes", ".", "extend", "(", "index", ".", "sizes", ")", "\n", "begin", "=", "self", ".", "dim_offsets", "[", "-", "1", "]", "\n", "for", "dim_offset", "in", "index", ".", "dim_offsets", "[", "1", ":", "]", ":", "\n", "            ", "self", ".", "dim_offsets", ".", "append", "(", "begin", "+", "dim_offset", ")", "\n", "\n", "", "with", "open", "(", "data_file_path", "(", "another_file", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "while", "True", ":", "\n", "                ", "data", "=", "f", ".", "read", "(", "1024", ")", "\n", "if", "data", ":", "\n", "                    ", "self", ".", "out_file", ".", "write", "(", "data", ")", "\n", "", "else", ":", "\n", "                    ", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.IndexedDatasetBuilder.finalize": [[332, 343], ["indexed_dataset.IndexedDatasetBuilder.out_file.close", "open", "open.write", "open.write", "open.write", "open.write", "indexed_dataset.write_longs", "indexed_dataset.write_longs", "indexed_dataset.write_longs", "open.close", "struct.pack", "struct.pack", "struct.pack", "indexed_dataset.code", "len", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.write_longs", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.write_longs", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.write_longs", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.code"], ["", "", "", "", "def", "finalize", "(", "self", ",", "index_file", ")", ":", "\n", "        ", "self", ".", "out_file", ".", "close", "(", ")", "\n", "index", "=", "open", "(", "index_file", ",", "'wb'", ")", "\n", "index", ".", "write", "(", "b'TNTIDX\\x00\\x00'", ")", "\n", "index", ".", "write", "(", "struct", ".", "pack", "(", "'<Q'", ",", "1", ")", ")", "\n", "index", ".", "write", "(", "struct", ".", "pack", "(", "'<QQ'", ",", "code", "(", "self", ".", "dtype", ")", ",", "self", ".", "element_size", ")", ")", "\n", "index", ".", "write", "(", "struct", ".", "pack", "(", "'<QQ'", ",", "len", "(", "self", ".", "data_offsets", ")", "-", "1", ",", "len", "(", "self", ".", "sizes", ")", ")", ")", "\n", "write_longs", "(", "index", ",", "self", ".", "dim_offsets", ")", "\n", "write_longs", "(", "index", ",", "self", ".", "data_offsets", ")", "\n", "write_longs", "(", "index", ",", "self", ".", "sizes", ")", "\n", "index", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.__init__": [[441, 449], ["super().__init__", "indexed_dataset.MMapIndexedDataset._do_init"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset._do_init"], ["", "", "def", "__init__", "(", "self", ",", "path", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_path", "=", "None", "\n", "self", ".", "_index", "=", "None", "\n", "self", ".", "_bin_buffer", "=", "None", "\n", "\n", "self", ".", "_do_init", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.__getstate__": [[450, 452], ["None"], "methods", ["None"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_path", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.__setstate__": [[453, 455], ["indexed_dataset.MMapIndexedDataset._do_init"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset._do_init"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "self", ".", "_do_init", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset._do_init": [[456, 463], ["indexed_dataset.MMapIndexedDataset.Index", "indexed_dataset._warmup_mmap_file", "numpy.memmap", "memoryview", "indexed_dataset.index_file_path", "indexed_dataset.data_file_path", "indexed_dataset.data_file_path"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset._warmup_mmap_file", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.index_file_path", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.data_file_path", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.data_file_path"], ["", "def", "_do_init", "(", "self", ",", "path", ")", ":", "\n", "        ", "self", ".", "_path", "=", "path", "\n", "self", ".", "_index", "=", "self", ".", "Index", "(", "index_file_path", "(", "self", ".", "_path", ")", ")", "\n", "\n", "_warmup_mmap_file", "(", "data_file_path", "(", "self", ".", "_path", ")", ")", "\n", "self", ".", "_bin_buffer_mmap", "=", "np", ".", "memmap", "(", "data_file_path", "(", "self", ".", "_path", ")", ",", "mode", "=", "'r'", ",", "order", "=", "'C'", ")", "\n", "self", ".", "_bin_buffer", "=", "memoryview", "(", "self", ".", "_bin_buffer_mmap", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.__del__": [[464, 468], ["indexed_dataset.MMapIndexedDataset._bin_buffer_mmap._mmap.close"], "methods", ["None"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "self", ".", "_bin_buffer_mmap", ".", "_mmap", ".", "close", "(", ")", "\n", "del", "self", ".", "_bin_buffer_mmap", "\n", "del", "self", ".", "_index", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.__len__": [[469, 471], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.__getitem__": [[472, 480], ["functools.lru_cache", "numpy.frombuffer", "torch.from_numpy", "np_array.astype.astype.astype"], "methods", ["None"], ["", "@", "lru_cache", "(", "maxsize", "=", "8", ")", "\n", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "ptr", ",", "size", "=", "self", ".", "_index", "[", "i", "]", "\n", "np_array", "=", "np", ".", "frombuffer", "(", "self", ".", "_bin_buffer", ",", "dtype", "=", "self", ".", "_index", ".", "dtype", ",", "count", "=", "size", ",", "offset", "=", "ptr", ")", "\n", "if", "self", ".", "_index", ".", "dtype", "!=", "np", ".", "int64", ":", "\n", "            ", "np_array", "=", "np_array", ".", "astype", "(", "np", ".", "int64", ")", "\n", "\n", "", "return", "torch", ".", "from_numpy", "(", "np_array", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.sizes": [[481, 484], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "sizes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_index", ".", "sizes", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.supports_prefetch": [[485, 488], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "supports_prefetch", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists": [[489, 493], ["os.path.exists", "os.path.exists", "indexed_dataset.index_file_path", "indexed_dataset.data_file_path"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.index_file_path", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.data_file_path"], ["", "@", "staticmethod", "\n", "def", "exists", "(", "path", ")", ":", "\n", "        ", "return", "(", "\n", "os", ".", "path", ".", "exists", "(", "index_file_path", "(", "path", ")", ")", "and", "os", ".", "path", ".", "exists", "(", "data_file_path", "(", "path", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDatasetBuilder.__init__": [[497, 501], ["open"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open"], ["    ", "def", "__init__", "(", "self", ",", "out_file", ",", "dtype", "=", "np", ".", "int64", ")", ":", "\n", "        ", "self", ".", "_data_file", "=", "open", "(", "out_file", ",", "'wb'", ")", "\n", "self", ".", "_dtype", "=", "dtype", "\n", "self", ".", "_sizes", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDatasetBuilder.add_item": [[502, 506], ["numpy.array", "indexed_dataset.MMapIndexedDatasetBuilder._data_file.write", "indexed_dataset.MMapIndexedDatasetBuilder._sizes.append", "tensor.numpy", "numpy.array.tobytes"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write"], ["", "def", "add_item", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "np_array", "=", "np", ".", "array", "(", "tensor", ".", "numpy", "(", ")", ",", "dtype", "=", "self", ".", "_dtype", ")", "\n", "self", ".", "_data_file", ".", "write", "(", "np_array", ".", "tobytes", "(", "order", "=", "'C'", ")", ")", "\n", "self", ".", "_sizes", ".", "append", "(", "np_array", ".", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDatasetBuilder.merge_file_": [[507, 518], ["MMapIndexedDataset.Index", "indexed_dataset.index_file_path", "indexed_dataset.MMapIndexedDatasetBuilder._sizes.append", "open", "shutil.copyfileobj", "indexed_dataset.data_file_path"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.index_file_path", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.data_file_path"], ["", "def", "merge_file_", "(", "self", ",", "another_file", ")", ":", "\n", "# Concatenate index", "\n", "        ", "index", "=", "MMapIndexedDataset", ".", "Index", "(", "index_file_path", "(", "another_file", ")", ")", "\n", "assert", "index", ".", "dtype", "==", "self", ".", "_dtype", "\n", "\n", "for", "size", "in", "index", ".", "sizes", ":", "\n", "            ", "self", ".", "_sizes", ".", "append", "(", "size", ")", "\n", "\n", "# Concatenate data", "\n", "", "with", "open", "(", "data_file_path", "(", "another_file", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "shutil", ".", "copyfileobj", "(", "f", ",", "self", ".", "_data_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDatasetBuilder.finalize": [[519, 524], ["indexed_dataset.MMapIndexedDatasetBuilder._data_file.close", "MMapIndexedDataset.Index.writer", "index.write"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write"], ["", "", "def", "finalize", "(", "self", ",", "index_file", ")", ":", "\n", "        ", "self", ".", "_data_file", ".", "close", "(", ")", "\n", "\n", "with", "MMapIndexedDataset", ".", "Index", ".", "writer", "(", "index_file", ",", "self", ".", "_dtype", ")", "as", "index", ":", "\n", "            ", "index", ".", "write", "(", "self", ".", "_sizes", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.__best_fitting_dtype": [[17, 22], ["None"], "function", ["None"], ["def", "__best_fitting_dtype", "(", "vocab_size", "=", "None", ")", ":", "\n", "    ", "if", "vocab_size", "is", "not", "None", "and", "vocab_size", "<", "65500", ":", "\n", "        ", "return", "np", ".", "uint16", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "int32", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.get_available_dataset_impl": [[24, 26], ["None"], "function", ["None"], ["", "", "def", "get_available_dataset_impl", "(", ")", ":", "\n", "    ", "return", "[", "'raw'", ",", "'lazy'", ",", "'cached'", ",", "'mmap'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.infer_dataset_impl": [[28, 42], ["indexed_dataset.IndexedRawTextDataset.exists", "indexed_dataset.IndexedDataset.exists", "open", "f.read", "indexed_dataset.index_file_path"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.dataset_reader.DatasetReader.read", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.index_file_path"], ["", "def", "infer_dataset_impl", "(", "path", ")", ":", "\n", "    ", "if", "IndexedRawTextDataset", ".", "exists", "(", "path", ")", ":", "\n", "        ", "return", "'raw'", "\n", "", "elif", "IndexedDataset", ".", "exists", "(", "path", ")", ":", "\n", "        ", "with", "open", "(", "index_file_path", "(", "path", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "magic", "=", "f", ".", "read", "(", "8", ")", "\n", "if", "magic", "==", "IndexedDataset", ".", "_HDR_MAGIC", ":", "\n", "                ", "return", "'cached'", "\n", "", "elif", "magic", "==", "MMapIndexedDataset", ".", "Index", ".", "_HDR_MAGIC", "[", ":", "8", "]", ":", "\n", "                ", "return", "'mmap'", "\n", "", "else", ":", "\n", "                ", "return", "None", "\n", "", "", "", "else", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.make_builder": [[44, 49], ["indexed_dataset.MMapIndexedDatasetBuilder", "indexed_dataset.IndexedDatasetBuilder", "indexed_dataset.__best_fitting_dtype"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.__best_fitting_dtype"], ["", "", "def", "make_builder", "(", "out_file", ",", "impl", ",", "vocab_size", "=", "None", ")", ":", "\n", "    ", "if", "impl", "==", "'mmap'", ":", "\n", "        ", "return", "MMapIndexedDatasetBuilder", "(", "out_file", ",", "dtype", "=", "__best_fitting_dtype", "(", "vocab_size", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "IndexedDatasetBuilder", "(", "out_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.make_dataset": [[51, 62], ["indexed_dataset.IndexedRawTextDataset.exists", "indexed_dataset.IndexedRawTextDataset", "indexed_dataset.IndexedDataset.exists", "indexed_dataset.IndexedDataset", "indexed_dataset.IndexedDataset.exists", "indexed_dataset.IndexedCachedDataset", "indexed_dataset.MMapIndexedDataset.exists", "indexed_dataset.MMapIndexedDataset"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists"], ["", "", "def", "make_dataset", "(", "path", ",", "impl", ",", "fix_lua_indexing", "=", "False", ",", "dictionary", "=", "None", ")", ":", "\n", "    ", "if", "impl", "==", "'raw'", "and", "IndexedRawTextDataset", ".", "exists", "(", "path", ")", ":", "\n", "        ", "assert", "dictionary", "is", "not", "None", "\n", "return", "IndexedRawTextDataset", "(", "path", ",", "dictionary", ")", "\n", "", "elif", "impl", "==", "'lazy'", "and", "IndexedDataset", ".", "exists", "(", "path", ")", ":", "\n", "        ", "return", "IndexedDataset", "(", "path", ",", "fix_lua_indexing", "=", "fix_lua_indexing", ")", "\n", "", "elif", "impl", "==", "'cached'", "and", "IndexedDataset", ".", "exists", "(", "path", ")", ":", "\n", "        ", "return", "IndexedCachedDataset", "(", "path", ",", "fix_lua_indexing", "=", "fix_lua_indexing", ")", "\n", "", "elif", "impl", "==", "'mmap'", "and", "MMapIndexedDataset", ".", "exists", "(", "path", ")", ":", "\n", "        ", "return", "MMapIndexedDataset", "(", "path", ")", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.dataset_exists": [[64, 71], ["indexed_dataset.IndexedRawTextDataset.exists", "indexed_dataset.MMapIndexedDataset.exists", "indexed_dataset.IndexedDataset.exists"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists"], ["", "def", "dataset_exists", "(", "path", ",", "impl", ")", ":", "\n", "    ", "if", "impl", "==", "'raw'", ":", "\n", "        ", "return", "IndexedRawTextDataset", ".", "exists", "(", "path", ")", "\n", "", "elif", "impl", "==", "'mmap'", ":", "\n", "        ", "return", "MMapIndexedDataset", ".", "exists", "(", "path", ")", "\n", "", "else", ":", "\n", "        ", "return", "IndexedDataset", ".", "exists", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.read_longs": [[73, 77], ["numpy.empty", "f.readinto"], "function", ["None"], ["", "", "def", "read_longs", "(", "f", ",", "n", ")", ":", "\n", "    ", "a", "=", "np", ".", "empty", "(", "n", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "f", ".", "readinto", "(", "a", ")", "\n", "return", "a", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.write_longs": [[79, 81], ["f.write", "numpy.array"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write"], ["", "def", "write_longs", "(", "f", ",", "a", ")", ":", "\n", "    ", "f", ".", "write", "(", "np", ".", "array", "(", "a", ",", "dtype", "=", "np", ".", "int64", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.code": [[95, 100], ["dtypes.keys", "ValueError"], "function", ["None"], ["def", "code", "(", "dtype", ")", ":", "\n", "    ", "for", "k", "in", "dtypes", ".", "keys", "(", ")", ":", "\n", "        ", "if", "dtypes", "[", "k", "]", "==", "dtype", ":", "\n", "            ", "return", "k", "\n", "", "", "raise", "ValueError", "(", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.index_file_path": [[102, 104], ["None"], "function", ["None"], ["", "def", "index_file_path", "(", "prefix_path", ")", ":", "\n", "    ", "return", "prefix_path", "+", "'.idx'", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.data_file_path": [[106, 108], ["None"], "function", ["None"], ["", "def", "data_file_path", "(", "prefix_path", ")", ":", "\n", "    ", "return", "prefix_path", "+", "'.bin'", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset._warmup_mmap_file": [[345, 349], ["open", "stream.read"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.dataset_reader.DatasetReader.read"], ["", "", "def", "_warmup_mmap_file", "(", "path", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'rb'", ")", "as", "stream", ":", "\n", "        ", "while", "stream", ".", "read", "(", "100", "*", "1024", "*", "1024", ")", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.replace_dataset.ReplaceDataset.__init__": [[19, 24], ["BaseWrapperDataset.__init__", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["def", "__init__", "(", "self", ",", "dataset", ",", "replace_map", ",", "offsets", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset", ")", "\n", "assert", "len", "(", "replace_map", ")", ">", "0", "\n", "self", ".", "replace_map", "=", "replace_map", "\n", "self", ".", "offsets", "=", "offsets", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.replace_dataset.ReplaceDataset.__getitem__": [[25, 37], ["isinstance", "zip", "replace_dataset.ReplaceDataset.replace_map.items", "src_off.masked_fill_"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "item", "=", "self", ".", "dataset", "[", "index", "]", "\n", "is_tuple", "=", "isinstance", "(", "item", ",", "tuple", ")", "\n", "srcs", "=", "item", "if", "is_tuple", "else", "[", "item", "]", "\n", "\n", "for", "offset", ",", "src", "in", "zip", "(", "self", ".", "offsets", ",", "srcs", ")", ":", "\n", "            ", "for", "k", ",", "v", "in", "self", ".", "replace_map", ".", "items", "(", ")", ":", "\n", "                ", "src_off", "=", "src", "[", "offset", ":", "]", "if", "offset", ">=", "0", "else", "src", "[", ":", "offset", "]", "\n", "src_off", ".", "masked_fill_", "(", "src_off", "==", "k", ",", "v", ")", "\n", "\n", "", "", "item", "=", "srcs", "if", "is_tuple", "else", "srcs", "[", "0", "]", "\n", "return", "item", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.truncate_dataset.TruncateDataset.__init__": [[13, 18], ["BaseWrapperDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "truncation_length", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset", ")", "\n", "assert", "truncation_length", "is", "not", "None", "\n", "self", ".", "truncation_length", "=", "truncation_length", "\n", "self", ".", "dataset", "=", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.truncate_dataset.TruncateDataset.__getitem__": [[19, 25], ["item.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "item", "=", "self", ".", "dataset", "[", "index", "]", "\n", "item_len", "=", "item", ".", "size", "(", "0", ")", "\n", "if", "item_len", ">", "self", ".", "truncation_length", ":", "\n", "            ", "item", "=", "item", "[", ":", "self", ".", "truncation_length", "]", "\n", "", "return", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.truncate_dataset.TruncateDataset.sizes": [[26, 29], ["numpy.minimum"], "methods", ["None"], ["", "@", "property", "\n", "def", "sizes", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "minimum", "(", "self", ".", "dataset", ".", "sizes", ",", "self", ".", "truncation_length", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.truncate_dataset.TruncateDataset.__len__": [[30, 32], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.base_wrapper_dataset.BaseWrapperDataset.__init__": [[13, 16], ["FairseqDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.base_wrapper_dataset.BaseWrapperDataset.__getitem__": [[17, 19], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "dataset", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.base_wrapper_dataset.BaseWrapperDataset.__len__": [[20, 22], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.base_wrapper_dataset.BaseWrapperDataset.collater": [[23, 28], ["hasattr", "base_wrapper_dataset.BaseWrapperDataset.dataset.collater", "torch.utils.data.dataloader.default_collate"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.collater"], ["", "def", "collater", "(", "self", ",", "samples", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ".", "dataset", ",", "'collater'", ")", ":", "\n", "            ", "return", "self", ".", "dataset", ".", "collater", "(", "samples", ")", "\n", "", "else", ":", "\n", "            ", "return", "default_collate", "(", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.base_wrapper_dataset.BaseWrapperDataset.sizes": [[29, 32], ["None"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "sizes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dataset", ".", "sizes", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.base_wrapper_dataset.BaseWrapperDataset.num_tokens": [[33, 35], ["base_wrapper_dataset.BaseWrapperDataset.dataset.num_tokens"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.num_tokens"], ["", "def", "num_tokens", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "dataset", ".", "num_tokens", "(", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.base_wrapper_dataset.BaseWrapperDataset.size": [[36, 38], ["base_wrapper_dataset.BaseWrapperDataset.dataset.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "size", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "dataset", ".", "size", "(", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.base_wrapper_dataset.BaseWrapperDataset.ordered_indices": [[39, 41], ["base_wrapper_dataset.BaseWrapperDataset.dataset.ordered_indices"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.ordered_indices"], ["", "def", "ordered_indices", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dataset", ".", "ordered_indices", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.base_wrapper_dataset.BaseWrapperDataset.supports_prefetch": [[42, 45], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "supports_prefetch", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ".", "dataset", ",", "'supports_prefetch'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.base_wrapper_dataset.BaseWrapperDataset.prefetch": [[46, 48], ["base_wrapper_dataset.BaseWrapperDataset.dataset.prefetch"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.block_pair_dataset.BlockPairDataset.prefetch"], ["", "def", "prefetch", "(", "self", ",", "indices", ")", ":", "\n", "        ", "self", ".", "dataset", ".", "prefetch", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.base_wrapper_dataset.BaseWrapperDataset.set_epoch": [[49, 53], ["super().set_epoch", "hasattr", "base_wrapper_dataset.BaseWrapperDataset.dataset.set_epoch"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.denoising_dataset.DenoisingDataset.set_epoch", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.denoising_dataset.DenoisingDataset.set_epoch"], ["", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "super", "(", ")", ".", "set_epoch", "(", "epoch", ")", "\n", "if", "hasattr", "(", "self", ".", "dataset", ",", "'set_epoch'", ")", ":", "\n", "            ", "self", ".", "dataset", ".", "set_epoch", "(", "epoch", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.strip_token_dataset.StripTokenDataset.__init__": [[11, 14], ["BaseWrapperDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "id_to_strip", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset", ")", "\n", "self", ".", "id_to_strip", "=", "id_to_strip", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.strip_token_dataset.StripTokenDataset.__getitem__": [[15, 18], ["item.ne"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "item", "=", "self", ".", "dataset", "[", "index", "]", "\n", "return", "item", "[", "item", ".", "ne", "(", "self", ".", "id_to_strip", ")", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.transform_eos_lang_pair_dataset.TransformEosLangPairDataset.__init__": [[28, 41], ["None"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "dataset", ":", "FairseqDataset", ",", "\n", "src_eos", ":", "int", ",", "\n", "new_src_eos", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "tgt_bos", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "new_tgt_bos", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "src_eos", "=", "src_eos", "\n", "self", ".", "new_src_eos", "=", "new_src_eos", "\n", "self", ".", "tgt_bos", "=", "tgt_bos", "\n", "self", ".", "new_tgt_bos", "=", "new_tgt_bos", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.transform_eos_lang_pair_dataset.TransformEosLangPairDataset.__getitem__": [[42, 44], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "dataset", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.transform_eos_lang_pair_dataset.TransformEosLangPairDataset.__len__": [[45, 47], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.transform_eos_lang_pair_dataset.TransformEosLangPairDataset.collater": [[48, 74], ["transform_eos_lang_pair_dataset.TransformEosLangPairDataset.dataset.collater", "eos_idx.resize_.resize_.resize_", "[].scatter_", "NotImplementedError", "len", "torch.arange", "eos_idx.resize_.resize_.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.collater", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "collater", "(", "self", ",", "samples", ")", ":", "\n", "        ", "samples", "=", "self", ".", "dataset", ".", "collater", "(", "samples", ")", "\n", "\n", "if", "self", ".", "new_src_eos", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "dataset", ".", "left_pad_source", ":", "\n", "                ", "assert", "(", "samples", "[", "'net_input'", "]", "[", "'src_tokens'", "]", "[", ":", ",", "-", "1", "]", "!=", "self", ".", "src_eos", ")", ".", "sum", "(", ")", "==", "0", "\n", "samples", "[", "'net_input'", "]", "[", "'src_tokens'", "]", "[", ":", ",", "-", "1", "]", "=", "self", ".", "new_src_eos", "\n", "", "else", ":", "\n", "                ", "eos_idx", "=", "samples", "[", "'net_input'", "]", "[", "'src_lengths'", "]", "-", "1", "\n", "assert", "(", "\n", "samples", "[", "'net_input'", "]", "[", "'src_tokens'", "]", "[", "torch", ".", "arange", "(", "eos_idx", ".", "size", "(", "0", ")", ")", ",", "eos_idx", "]", "!=", "self", ".", "src_eos", "\n", ")", ".", "sum", "(", ")", "==", "0", "\n", "eos_idx", "=", "eos_idx", ".", "resize_", "(", "len", "(", "samples", "[", "'net_input'", "]", "[", "'src_lengths'", "]", ")", ",", "1", ")", "\n", "samples", "[", "'net_input'", "]", "[", "'src_tokens'", "]", ".", "scatter_", "(", "1", ",", "eos_idx", ",", "self", ".", "new_src_eos", ")", "\n", "\n", "", "", "if", "self", ".", "new_tgt_bos", "is", "not", "None", "and", "'prev_output_tokens'", "in", "samples", "[", "'net_input'", "]", ":", "\n", "            ", "if", "self", ".", "dataset", ".", "left_pad_target", ":", "\n", "# TODO: support different padding direction on target side", "\n", "                ", "raise", "NotImplementedError", "(", "\n", "'TransformEosLangPairDataset does not implement --left-pad-target True option'", "\n", ")", "\n", "", "else", ":", "\n", "                ", "assert", "(", "samples", "[", "'net_input'", "]", "[", "'prev_output_tokens'", "]", "[", ":", ",", "0", "]", "!=", "self", ".", "tgt_bos", ")", ".", "sum", "(", ")", "==", "0", "\n", "samples", "[", "'net_input'", "]", "[", "'prev_output_tokens'", "]", "[", ":", ",", "0", "]", "=", "self", ".", "new_tgt_bos", "\n", "\n", "", "", "return", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.transform_eos_lang_pair_dataset.TransformEosLangPairDataset.num_tokens": [[75, 77], ["transform_eos_lang_pair_dataset.TransformEosLangPairDataset.dataset.num_tokens"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.num_tokens"], ["", "def", "num_tokens", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "dataset", ".", "num_tokens", "(", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.transform_eos_lang_pair_dataset.TransformEosLangPairDataset.size": [[78, 80], ["transform_eos_lang_pair_dataset.TransformEosLangPairDataset.dataset.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "size", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "dataset", ".", "size", "(", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.transform_eos_lang_pair_dataset.TransformEosLangPairDataset.ordered_indices": [[81, 83], ["transform_eos_lang_pair_dataset.TransformEosLangPairDataset.dataset.ordered_indices"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.ordered_indices"], ["", "def", "ordered_indices", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dataset", ".", "ordered_indices", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.transform_eos_lang_pair_dataset.TransformEosLangPairDataset.supports_prefetch": [[84, 87], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "supports_prefetch", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ".", "dataset", ",", "'supports_prefetch'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.transform_eos_lang_pair_dataset.TransformEosLangPairDataset.prefetch": [[88, 90], ["transform_eos_lang_pair_dataset.TransformEosLangPairDataset.dataset.prefetch"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.block_pair_dataset.BlockPairDataset.prefetch"], ["", "def", "prefetch", "(", "self", ",", "indices", ")", ":", "\n", "        ", "return", "self", ".", "dataset", ".", "prefetch", "(", "indices", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.num_samples_dataset.NumSamplesDataset.__getitem__": [[11, 13], ["None"], "methods", ["None"], ["    ", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.num_samples_dataset.NumSamplesDataset.__len__": [[14, 16], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.num_samples_dataset.NumSamplesDataset.collater": [[17, 19], ["sum"], "methods", ["None"], ["", "def", "collater", "(", "self", ",", "samples", ")", ":", "\n", "        ", "return", "sum", "(", "samples", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.sort_dataset.SortDataset.__init__": [[13, 20], ["BaseWrapperDataset.__init__", "all", "isinstance", "len", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "sort_order", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset", ")", "\n", "if", "not", "isinstance", "(", "sort_order", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "            ", "sort_order", "=", "[", "sort_order", "]", "\n", "", "self", ".", "sort_order", "=", "sort_order", "\n", "\n", "assert", "all", "(", "len", "(", "so", ")", "==", "len", "(", "dataset", ")", "for", "so", "in", "sort_order", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.sort_dataset.SortDataset.ordered_indices": [[21, 23], ["numpy.lexsort"], "methods", ["None"], ["", "def", "ordered_indices", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "lexsort", "(", "self", ".", "sort_order", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.sharded_dataset.ShardedDataset.__init__": [[21, 57], ["itertools.count", "fairseq.data.data_utils.load_indexed_dataset", "BaseWrapperDataset.__init__", "os.path.basename", "random.seed", "random.randint", "os.path.join", "os.path.join", "os.path.isdir", "FileNotFoundError", "os.path.exists", "os.path.join", "os.path.join", "str", "str"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.data_helper.count", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.load_indexed_dataset", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists"], ["def", "__init__", "(", "\n", "self", ",", "\n", "dictionary", ",", "\n", "dataset_impl", ":", "str", ",", "\n", "path", ":", "str", ",", "\n", "split", ":", "str", ",", "\n", "epoch", ":", "int", ",", "\n", "name", ":", "str", "=", "None", ",", "\n", "combine", ":", "bool", "=", "False", ",", "\n", "seed", ":", "int", "=", "0", ",", "\n", ")", ":", "\n", "        ", "self", ".", "_name", "=", "name", "if", "name", "is", "not", "None", "else", "os", ".", "path", ".", "basename", "(", "path", ")", "\n", "num_shards", "=", "0", "\n", "for", "i", "in", "itertools", ".", "count", "(", ")", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "path", ",", "\"shard\"", "+", "str", "(", "i", ")", ")", ")", ":", "\n", "                ", "break", "\n", "", "num_shards", "+=", "1", "\n", "\n", "", "if", "num_shards", ">", "0", "and", "split", "==", "\"train\"", ":", "\n", "            ", "random", ".", "seed", "(", "seed", "^", "epoch", ")", "\n", "shard", "=", "random", ".", "randint", "(", "0", ",", "num_shards", "-", "1", ")", "\n", "split_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "\"shard\"", "+", "str", "(", "shard", ")", ",", "split", ")", "\n", "", "else", ":", "\n", "            ", "split_path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "split", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "split_path", ")", ":", "\n", "                ", "split_path", "=", "os", ".", "path", ".", "join", "(", "split_path", ",", "split", ")", "\n", "\n", "", "", "dataset", "=", "data_utils", ".", "load_indexed_dataset", "(", "\n", "split_path", ",", "dictionary", ",", "dataset_impl", ",", "combine", "=", "combine", "\n", ")", "\n", "if", "dataset", "is", "None", ":", "\n", "            ", "raise", "FileNotFoundError", "(", "\n", "\"Dataset not found: {} ({})\"", ".", "format", "(", "split", ",", "split_path", ")", "\n", ")", "\n", "\n", "", "super", "(", ")", ".", "__init__", "(", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.sharded_dataset.ShardedDataset.name": [[58, 61], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_name", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.multi_corpus_sampled_dataset.MultiCorpusSampledDataset.__init__": [[31, 49], ["FairseqDataset.__init__", "isinstance", "datasets.items", "isinstance", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "datasets", ":", "Dict", "[", "str", ",", "FairseqDataset", "]", ",", "\n", "sampling_func", ":", "Callable", "[", "[", "List", "]", ",", "int", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "isinstance", "(", "datasets", ",", "OrderedDict", ")", "\n", "self", ".", "datasets", "=", "datasets", "\n", "if", "sampling_func", "is", "None", ":", "\n", "            ", "sampling_func", "=", "uniform_sampler", "\n", "", "self", ".", "sampling_func", "=", "sampling_func", "\n", "\n", "self", ".", "total_num_instances", "=", "0", "\n", "for", "_", ",", "dataset", "in", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "assert", "isinstance", "(", "dataset", ",", "FairseqDataset", ")", "\n", "self", ".", "total_num_instances", "+=", "len", "(", "dataset", ")", "\n", "\n", "", "self", ".", "_ordered_indices", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.multi_corpus_sampled_dataset.MultiCorpusSampledDataset.__len__": [[50, 55], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Length of this dataset is the sum of individual datasets\n        \"\"\"", "\n", "return", "self", ".", "total_num_instances", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.multi_corpus_sampled_dataset.MultiCorpusSampledDataset.ordered_indices": [[56, 70], ["numpy.arange", "collections.OrderedDict", "len", "dataset.ordered_indices", "multi_corpus_sampled_dataset.MultiCorpusSampledDataset.datasets.items"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.ordered_indices"], ["", "def", "ordered_indices", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Ordered indices for batching. Here we call the underlying\n        dataset's ordered_indices() so that we get the same random ordering\n        as we would have from using the underlying dataset directly.\n        \"\"\"", "\n", "if", "self", ".", "_ordered_indices", "is", "None", ":", "\n", "            ", "self", ".", "_ordered_indices", "=", "OrderedDict", "(", "\n", "[", "\n", "(", "key", ",", "dataset", ".", "ordered_indices", "(", ")", ")", "\n", "for", "key", ",", "dataset", "in", "self", ".", "datasets", ".", "items", "(", ")", "\n", "]", "\n", ")", "\n", "", "return", "np", ".", "arange", "(", "len", "(", "self", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.multi_corpus_sampled_dataset.MultiCorpusSampledDataset._map_index_to_dataset": [[71, 83], ["len"], "methods", ["None"], ["", "def", "_map_index_to_dataset", "(", "self", ",", "key", ":", "int", ",", "index", ":", "int", ")", ":", "\n", "        ", "\"\"\"\n        Different underlying datasets have different lengths. In order to ensure\n        we are not accessing an index outside the range of the current dataset\n        size, we wrap around. This function should be called after we have\n        created an ordering for this and all underlying datasets.\n        \"\"\"", "\n", "assert", "(", "\n", "self", ".", "_ordered_indices", "is", "not", "None", "\n", ")", ",", "\"Must call MultiCorpusSampledDataset.ordered_indices() first\"", "\n", "mapped_index", "=", "index", "%", "len", "(", "self", ".", "datasets", "[", "key", "]", ")", "\n", "return", "self", ".", "_ordered_indices", "[", "key", "]", "[", "mapped_index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.multi_corpus_sampled_dataset.MultiCorpusSampledDataset.__getitem__": [[84, 94], ["collections.OrderedDict", "multi_corpus_sampled_dataset.MultiCorpusSampledDataset.datasets.items", "multi_corpus_sampled_dataset.MultiCorpusSampledDataset._map_index_to_dataset"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.multi_corpus_sampled_dataset.MultiCorpusSampledDataset._map_index_to_dataset"], ["", "def", "__getitem__", "(", "self", ",", "index", ":", "int", ")", ":", "\n", "        ", "\"\"\"\n        Get the item associated with index from each underlying dataset.\n        Since index is in the range of [0, TotalNumInstances], we need to\n        map the index to the dataset before retrieving the item.\n        \"\"\"", "\n", "return", "OrderedDict", "(", "\n", "[", "\n", "(", "key", ",", "dataset", "[", "self", ".", "_map_index_to_dataset", "(", "key", ",", "index", ")", "]", ")", "\n", "for", "key", ",", "dataset", "in", "self", ".", "datasets", ".", "items", "(", ")", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.multi_corpus_sampled_dataset.MultiCorpusSampledDataset.collater": [[97, 111], ["multi_corpus_sampled_dataset.MultiCorpusSampledDataset.sampling_func", "multi_corpus_sampled_dataset.MultiCorpusSampledDataset.datasets[].collater", "len", "list", "multi_corpus_sampled_dataset.MultiCorpusSampledDataset.datasets.keys"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.collater"], ["", "def", "collater", "(", "self", ",", "samples", ":", "List", "[", "Dict", "]", ")", ":", "\n", "        ", "\"\"\"\n        Generate a mini-batch for this dataset.\n        To convert this into a regular mini-batch we use the following\n        logic:\n            1. Select a dataset using the specified probability distribution.\n            2. Call the collater function of the selected dataset.\n        \"\"\"", "\n", "if", "len", "(", "samples", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "\n", "", "selected_key", "=", "self", ".", "sampling_func", "(", "list", "(", "self", ".", "datasets", ".", "keys", "(", ")", ")", ")", "\n", "selected_samples", "=", "[", "sample", "[", "selected_key", "]", "for", "sample", "in", "samples", "]", "\n", "return", "self", ".", "datasets", "[", "selected_key", "]", ".", "collater", "(", "selected_samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.multi_corpus_sampled_dataset.MultiCorpusSampledDataset.num_tokens": [[112, 121], ["max", "dataset.num_tokens", "multi_corpus_sampled_dataset.MultiCorpusSampledDataset._map_index_to_dataset", "multi_corpus_sampled_dataset.MultiCorpusSampledDataset.datasets.items"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.num_tokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.multi_corpus_sampled_dataset.MultiCorpusSampledDataset._map_index_to_dataset"], ["", "def", "num_tokens", "(", "self", ",", "index", ":", "int", ")", ":", "\n", "        ", "\"\"\"\n        Return an example's length (number of tokens), used for batching. Here\n        we return the max across all examples at index across all underlying\n        datasets.\n        \"\"\"", "\n", "return", "max", "(", "\n", "dataset", ".", "num_tokens", "(", "self", ".", "_map_index_to_dataset", "(", "key", ",", "index", ")", ")", "\n", "for", "key", ",", "dataset", "in", "self", ".", "datasets", ".", "items", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.multi_corpus_sampled_dataset.MultiCorpusSampledDataset.size": [[123, 132], ["max", "dataset.size", "multi_corpus_sampled_dataset.MultiCorpusSampledDataset._map_index_to_dataset", "multi_corpus_sampled_dataset.MultiCorpusSampledDataset.datasets.items"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.multi_corpus_sampled_dataset.MultiCorpusSampledDataset._map_index_to_dataset"], ["", "def", "size", "(", "self", ",", "index", ":", "int", ")", ":", "\n", "        ", "\"\"\"\n        Return an example's size as a float or tuple. Here we return the max\n        across all underlying datasets. This value is used when filtering a\n        dataset with max-positions.\n        \"\"\"", "\n", "return", "max", "(", "\n", "dataset", ".", "size", "(", "self", ".", "_map_index_to_dataset", "(", "key", ",", "index", ")", ")", "\n", "for", "key", ",", "dataset", "in", "self", ".", "datasets", ".", "items", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.multi_corpus_sampled_dataset.MultiCorpusSampledDataset.supports_prefetch": [[134, 139], ["all", "getattr", "multi_corpus_sampled_dataset.MultiCorpusSampledDataset.datasets.values"], "methods", ["None"], ["", "@", "property", "\n", "def", "supports_prefetch", "(", "self", ")", ":", "\n", "        ", "return", "all", "(", "\n", "getattr", "(", "dataset", ",", "\"supports_prefetch\"", ",", "False", ")", "\n", "for", "dataset", "in", "self", ".", "datasets", ".", "values", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.multi_corpus_sampled_dataset.MultiCorpusSampledDataset.prefetch": [[141, 145], ["multi_corpus_sampled_dataset.MultiCorpusSampledDataset.datasets.items", "dataset.prefetch", "multi_corpus_sampled_dataset.MultiCorpusSampledDataset._map_index_to_dataset"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.block_pair_dataset.BlockPairDataset.prefetch", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.multi_corpus_sampled_dataset.MultiCorpusSampledDataset._map_index_to_dataset"], ["", "def", "prefetch", "(", "self", ",", "indices", ")", ":", "\n", "        ", "for", "key", ",", "dataset", "in", "self", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "dataset", ".", "prefetch", "(", "\n", "[", "self", ".", "_map_index_to_dataset", "(", "key", ",", "index", ")", "for", "index", "in", "indices", "]", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.multi_corpus_sampled_dataset.uniform_sampler": [[14, 17], ["numpy.random.choice().item", "numpy.random.choice"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item"], ["def", "uniform_sampler", "(", "x", ")", ":", "\n", "# Sample from uniform distribution", "\n", "    ", "return", "np", ".", "random", ".", "choice", "(", "x", ",", "1", ")", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.mask_tokens_dataset.MaskTokensDataset.apply_mask": [[45, 52], ["LRUCacheDataset", "LRUCacheDataset", "LRUCacheDataset", "cls", "cls"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dictionary.BertDictionary.cls", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dictionary.BertDictionary.cls"], ["@", "classmethod", "\n", "def", "apply_mask", "(", "cls", ",", "dataset", ":", "torch", ".", "utils", ".", "data", ".", "Dataset", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Return the source and target datasets for masked LM training.\"\"\"", "\n", "dataset", "=", "LRUCacheDataset", "(", "dataset", ")", "\n", "return", "(", "\n", "LRUCacheDataset", "(", "cls", "(", "dataset", ",", "*", "args", ",", "**", "kwargs", ",", "return_masked_tokens", "=", "False", ")", ")", ",", "\n", "LRUCacheDataset", "(", "cls", "(", "dataset", ",", "*", "args", ",", "**", "kwargs", ",", "return_masked_tokens", "=", "True", ")", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.mask_tokens_dataset.MaskTokensDataset.__init__": [[54, 93], ["numpy.array", "numpy.ones", "numpy.ones.sum", "len"], "methods", ["None"], ["", "def", "__init__", "(", "\n", "self", ",", "\n", "dataset", ":", "torch", ".", "utils", ".", "data", ".", "Dataset", ",", "\n", "vocab", ":", "Dictionary", ",", "\n", "pad_idx", ":", "int", ",", "\n", "mask_idx", ":", "int", ",", "\n", "return_masked_tokens", ":", "bool", "=", "False", ",", "\n", "seed", ":", "int", "=", "1", ",", "\n", "mask_prob", ":", "float", "=", "0.15", ",", "\n", "leave_unmasked_prob", ":", "float", "=", "0.1", ",", "\n", "random_token_prob", ":", "float", "=", "0.1", ",", "\n", "freq_weighted_replacement", ":", "bool", "=", "False", ",", "\n", "mask_whole_words", ":", "torch", ".", "Tensor", "=", "None", ",", "\n", ")", ":", "\n", "        ", "assert", "0.0", "<", "mask_prob", "<", "1.0", "\n", "assert", "0.0", "<=", "random_token_prob", "<=", "1.0", "\n", "assert", "0.0", "<=", "leave_unmasked_prob", "<=", "1.0", "\n", "assert", "random_token_prob", "+", "leave_unmasked_prob", "<=", "1.0", "\n", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "pad_idx", "=", "pad_idx", "\n", "self", ".", "mask_idx", "=", "mask_idx", "\n", "self", ".", "return_masked_tokens", "=", "return_masked_tokens", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "mask_prob", "=", "mask_prob", "\n", "self", ".", "leave_unmasked_prob", "=", "leave_unmasked_prob", "\n", "self", ".", "random_token_prob", "=", "random_token_prob", "\n", "self", ".", "mask_whole_words", "=", "mask_whole_words", "\n", "\n", "if", "random_token_prob", ">", "0.0", ":", "\n", "            ", "if", "freq_weighted_replacement", ":", "\n", "                ", "weights", "=", "np", ".", "array", "(", "self", ".", "vocab", ".", "count", ")", "\n", "", "else", ":", "\n", "                ", "weights", "=", "np", ".", "ones", "(", "len", "(", "self", ".", "vocab", ")", ")", "\n", "", "weights", "[", ":", "self", ".", "vocab", ".", "nspecial", "]", "=", "0", "\n", "self", ".", "weights", "=", "weights", "/", "weights", ".", "sum", "(", ")", "\n", "\n", "", "self", ".", "epoch", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.mask_tokens_dataset.MaskTokensDataset.set_epoch": [[94, 96], ["None"], "methods", ["None"], ["", "def", "set_epoch", "(", "self", ",", "epoch", ",", "**", "unused", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.mask_tokens_dataset.MaskTokensDataset.__getitem__": [[97, 173], ["functools.lru_cache", "fairseq.data.data_utils.numpy_seed", "len", "numpy.full", "int", "numpy.copy", "torch.from_numpy", "mask_tokens_dataset.MaskTokensDataset.mask_whole_words.gather", "mask_tokens_dataset.MaskTokensDataset.nonzero().view", "len", "list", "numpy.full", "torch.from_numpy", "numpy.repeat", "numpy.repeat.sum", "numpy.split", "len", "map", "numpy.random.rand", "numpy.random.choice", "numpy.repeat", "len", "numpy.random.choice", "mask_tokens_dataset.MaskTokensDataset.nonzero", "numpy.random.rand", "numpy.repeat", "numpy.repeat.sum", "len", "torch.from_numpy", "numpy.random.rand", "numpy.repeat.astype"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.numpy_seed", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.copy"], ["", "@", "lru_cache", "(", "maxsize", "=", "8", ")", "\n", "def", "__getitem__", "(", "self", ",", "index", ":", "int", ")", ":", "\n", "        ", "with", "data_utils", ".", "numpy_seed", "(", "self", ".", "seed", ",", "self", ".", "epoch", ",", "index", ")", ":", "\n", "            ", "item", "=", "self", ".", "dataset", "[", "index", "]", "\n", "sz", "=", "len", "(", "item", ")", "\n", "\n", "assert", "self", ".", "mask_idx", "not", "in", "item", ",", "'Dataset contains mask_idx (={}), this is not expected!'", ".", "format", "(", "\n", "self", ".", "mask_idx", ",", "\n", ")", "\n", "\n", "if", "self", ".", "mask_whole_words", "is", "not", "None", ":", "\n", "                ", "word_begins_mask", "=", "self", ".", "mask_whole_words", ".", "gather", "(", "0", ",", "item", ")", "\n", "word_begins_idx", "=", "word_begins_mask", ".", "nonzero", "(", ")", ".", "view", "(", "-", "1", ")", "\n", "sz", "=", "len", "(", "word_begins_idx", ")", "\n", "words", "=", "np", ".", "split", "(", "word_begins_mask", ",", "word_begins_idx", ")", "[", "1", ":", "]", "\n", "assert", "len", "(", "words", ")", "==", "sz", "\n", "word_lens", "=", "list", "(", "map", "(", "len", ",", "words", ")", ")", "\n", "\n", "# decide elements to mask", "\n", "", "mask", "=", "np", ".", "full", "(", "sz", ",", "False", ")", "\n", "num_mask", "=", "int", "(", "\n", "# add a random number for probabilistic rounding", "\n", "self", ".", "mask_prob", "*", "sz", "+", "np", ".", "random", ".", "rand", "(", ")", "\n", ")", "\n", "mask", "[", "np", ".", "random", ".", "choice", "(", "sz", ",", "num_mask", ",", "replace", "=", "False", ")", "]", "=", "True", "\n", "\n", "if", "self", ".", "return_masked_tokens", ":", "\n", "# exit early if we're just returning the masked tokens", "\n", "# (i.e., the targets for masked LM training)", "\n", "                ", "if", "self", ".", "mask_whole_words", "is", "not", "None", ":", "\n", "                    ", "mask", "=", "np", ".", "repeat", "(", "mask", ",", "word_lens", ")", "\n", "", "new_item", "=", "np", ".", "full", "(", "len", "(", "mask", ")", ",", "self", ".", "pad_idx", ")", "\n", "new_item", "[", "mask", "]", "=", "item", "[", "torch", ".", "from_numpy", "(", "mask", ".", "astype", "(", "np", ".", "uint8", ")", ")", "==", "1", "]", "\n", "return", "torch", ".", "from_numpy", "(", "new_item", ")", "\n", "\n", "# decide unmasking and random replacement", "\n", "", "rand_or_unmask_prob", "=", "self", ".", "random_token_prob", "+", "self", ".", "leave_unmasked_prob", "\n", "if", "rand_or_unmask_prob", ">", "0.0", ":", "\n", "                ", "rand_or_unmask", "=", "mask", "&", "(", "np", ".", "random", ".", "rand", "(", "sz", ")", "<", "rand_or_unmask_prob", ")", "\n", "if", "self", ".", "random_token_prob", "==", "0.0", ":", "\n", "                    ", "unmask", "=", "rand_or_unmask", "\n", "rand_mask", "=", "None", "\n", "", "elif", "self", ".", "leave_unmasked_prob", "==", "0.0", ":", "\n", "                    ", "unmask", "=", "None", "\n", "rand_mask", "=", "rand_or_unmask", "\n", "", "else", ":", "\n", "                    ", "unmask_prob", "=", "self", ".", "leave_unmasked_prob", "/", "rand_or_unmask_prob", "\n", "decision", "=", "np", ".", "random", ".", "rand", "(", "sz", ")", "<", "unmask_prob", "\n", "unmask", "=", "rand_or_unmask", "&", "decision", "\n", "rand_mask", "=", "rand_or_unmask", "&", "(", "~", "decision", ")", "\n", "", "", "else", ":", "\n", "                ", "unmask", "=", "rand_mask", "=", "None", "\n", "\n", "", "if", "unmask", "is", "not", "None", ":", "\n", "                ", "mask", "=", "mask", "^", "unmask", "\n", "\n", "", "if", "self", ".", "mask_whole_words", "is", "not", "None", ":", "\n", "                ", "mask", "=", "np", ".", "repeat", "(", "mask", ",", "word_lens", ")", "\n", "\n", "", "new_item", "=", "np", ".", "copy", "(", "item", ")", "\n", "new_item", "[", "mask", "]", "=", "self", ".", "mask_idx", "\n", "if", "rand_mask", "is", "not", "None", ":", "\n", "                ", "num_rand", "=", "rand_mask", ".", "sum", "(", ")", "\n", "if", "num_rand", ">", "0", ":", "\n", "                    ", "if", "self", ".", "mask_whole_words", "is", "not", "None", ":", "\n", "                        ", "rand_mask", "=", "np", ".", "repeat", "(", "rand_mask", ",", "word_lens", ")", "\n", "num_rand", "=", "rand_mask", ".", "sum", "(", ")", "\n", "\n", "", "new_item", "[", "rand_mask", "]", "=", "np", ".", "random", ".", "choice", "(", "\n", "len", "(", "self", ".", "vocab", ")", ",", "\n", "num_rand", ",", "\n", "p", "=", "self", ".", "weights", ",", "\n", ")", "\n", "\n", "", "", "return", "torch", ".", "from_numpy", "(", "new_item", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.raw_label_dataset.RawLabelDataset.__init__": [[13, 16], ["FairseqDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["    ", "def", "__init__", "(", "self", ",", "labels", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "labels", "=", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.raw_label_dataset.RawLabelDataset.__getitem__": [[17, 19], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "labels", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.raw_label_dataset.RawLabelDataset.__len__": [[20, 22], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.raw_label_dataset.RawLabelDataset.collater": [[23, 25], ["torch.tensor"], "methods", ["None"], ["", "def", "collater", "(", "self", ",", "samples", ")", ":", "\n", "        ", "return", "torch", ".", "tensor", "(", "samples", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.monolingual_dataset.MonolingualDataset.__init__": [[62, 77], ["numpy.array", "all", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset", ",", "sizes", ",", "src_vocab", ",", "tgt_vocab", ",", "add_eos_for_other_targets", ",", "shuffle", ",", "\n", "targets", "=", "None", ",", "add_bos_token", "=", "False", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "sizes", "=", "np", ".", "array", "(", "sizes", ")", "\n", "self", ".", "vocab", "=", "src_vocab", "\n", "self", ".", "tgt_vocab", "=", "tgt_vocab", "\n", "self", ".", "add_eos_for_other_targets", "=", "add_eos_for_other_targets", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "add_bos_token", "=", "add_bos_token", "\n", "\n", "assert", "targets", "is", "None", "or", "all", "(", "t", "in", "{", "'self'", ",", "'future'", ",", "'past'", "}", "for", "t", "in", "targets", ")", ",", "\"targets must be none or one of 'self', 'future', 'past'\"", "\n", "if", "targets", "is", "not", "None", "and", "len", "(", "targets", ")", "==", "0", ":", "\n", "            ", "targets", "=", "None", "\n", "", "self", ".", "targets", "=", "targets", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.monolingual_dataset.MonolingualDataset.__getitem__": [[78, 95], ["monolingual_dataset.MonolingualDataset._maybe_add_bos", "monolingual_dataset.MonolingualDataset._make_source_target"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.monolingual_dataset.MonolingualDataset._maybe_add_bos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.monolingual_dataset.MonolingualDataset._make_source_target"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "targets", "is", "not", "None", ":", "\n", "# *future_target* is the original sentence", "\n", "# *source* is shifted right by 1 (maybe left-padded with eos)", "\n", "# *past_target* is shifted right by 2 (left-padded as needed)", "\n", "#", "\n", "# Left-to-right language models should condition on *source* and", "\n", "# predict *future_target*.", "\n", "# Right-to-left language models should condition on *source* and", "\n", "# predict *past_target*.", "\n", "            ", "source", ",", "future_target", ",", "past_target", "=", "self", ".", "dataset", "[", "index", "]", "\n", "source", ",", "target", "=", "self", ".", "_make_source_target", "(", "source", ",", "future_target", ",", "past_target", ")", "\n", "", "else", ":", "\n", "            ", "source", "=", "self", ".", "dataset", "[", "index", "]", "\n", "target", "=", "None", "\n", "", "source", ",", "target", "=", "self", ".", "_maybe_add_bos", "(", "source", ",", "target", ")", "\n", "return", "{", "'id'", ":", "index", ",", "'source'", ":", "source", ",", "'target'", ":", "target", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.monolingual_dataset.MonolingualDataset.__len__": [[96, 98], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.monolingual_dataset.MonolingualDataset._make_source_target": [[99, 131], ["monolingual_dataset.MonolingualDataset._filter_vocab", "torch.cat", "len", "monolingual_dataset.MonolingualDataset.vocab.eos", "torch.cat", "torch.cat", "target.append", "torch.cat.new", "target.append", "torch.cat.new", "torch.cat.new", "target.append", "Exception", "monolingual_dataset.MonolingualDataset.vocab.eos", "monolingual_dataset.MonolingualDataset.vocab.pad", "monolingual_dataset.MonolingualDataset.vocab.pad"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.monolingual_dataset.MonolingualDataset._filter_vocab", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad"], ["", "def", "_make_source_target", "(", "self", ",", "source", ",", "future_target", ",", "past_target", ")", ":", "\n", "        ", "if", "self", ".", "targets", "is", "not", "None", ":", "\n", "            ", "target", "=", "[", "]", "\n", "\n", "if", "self", ".", "add_eos_for_other_targets", "and", "(", "(", "'self'", "in", "self", ".", "targets", ")", "or", "(", "'past'", "in", "self", ".", "targets", ")", ")", "and", "source", "[", "-", "1", "]", "!=", "self", ".", "vocab", ".", "eos", "(", ")", ":", "\n", "# append eos at the end of source", "\n", "                ", "source", "=", "torch", ".", "cat", "(", "[", "source", ",", "source", ".", "new", "(", "[", "self", ".", "vocab", ".", "eos", "(", ")", "]", ")", "]", ")", "\n", "\n", "if", "'future'", "in", "self", ".", "targets", ":", "\n", "                    ", "future_target", "=", "torch", ".", "cat", "(", "[", "future_target", ",", "future_target", ".", "new", "(", "[", "self", ".", "vocab", ".", "pad", "(", ")", "]", ")", "]", ")", "\n", "", "if", "'past'", "in", "self", ".", "targets", ":", "\n", "# first token is before the start of sentence which is only used in \"none\" break mode when", "\n", "# add_eos_for_other_targets is False", "\n", "                    ", "past_target", "=", "torch", ".", "cat", "(", "[", "past_target", ".", "new", "(", "[", "self", ".", "vocab", ".", "pad", "(", ")", "]", ")", ",", "past_target", "[", "1", ":", "]", ",", "source", "[", "-", "2", ",", "None", "]", "]", ")", "\n", "\n", "", "", "for", "t", "in", "self", ".", "targets", ":", "\n", "                ", "if", "t", "==", "'self'", ":", "\n", "                    ", "target", ".", "append", "(", "source", ")", "\n", "", "elif", "t", "==", "'future'", ":", "\n", "                    ", "target", ".", "append", "(", "future_target", ")", "\n", "", "elif", "t", "==", "'past'", ":", "\n", "                    ", "target", ".", "append", "(", "past_target", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "Exception", "(", "'invalid target '", "+", "t", ")", "\n", "\n", "", "", "if", "len", "(", "target", ")", "==", "1", ":", "\n", "                ", "target", "=", "target", "[", "0", "]", "\n", "", "", "else", ":", "\n", "            ", "target", "=", "future_target", "\n", "\n", "", "return", "source", ",", "self", ".", "_filter_vocab", "(", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.monolingual_dataset.MonolingualDataset._maybe_add_bos": [[132, 138], ["torch.cat", "torch.cat", "torch.cat.new", "torch.cat.new", "monolingual_dataset.MonolingualDataset.vocab.bos", "monolingual_dataset.MonolingualDataset.tgt_vocab.bos"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.bos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.bos"], ["", "def", "_maybe_add_bos", "(", "self", ",", "source", ",", "target", ")", ":", "\n", "        ", "if", "self", ".", "add_bos_token", ":", "\n", "            ", "source", "=", "torch", ".", "cat", "(", "[", "source", ".", "new", "(", "[", "self", ".", "vocab", ".", "bos", "(", ")", "]", ")", ",", "source", "]", ")", "\n", "if", "target", "is", "not", "None", ":", "\n", "                ", "target", "=", "torch", ".", "cat", "(", "[", "target", ".", "new", "(", "[", "self", ".", "tgt_vocab", ".", "bos", "(", ")", "]", ")", ",", "target", "]", ")", "\n", "", "", "return", "source", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.monolingual_dataset.MonolingualDataset._filter_vocab": [[139, 151], ["len", "len", "isinstance", "monolingual_dataset.MonolingualDataset._filter_vocab._filter"], "methods", ["None"], ["", "def", "_filter_vocab", "(", "self", ",", "target", ")", ":", "\n", "        ", "if", "len", "(", "self", ".", "tgt_vocab", ")", "!=", "len", "(", "self", ".", "vocab", ")", ":", "\n", "            ", "def", "_filter", "(", "target", ")", ":", "\n", "                ", "mask", "=", "target", ".", "ge", "(", "len", "(", "self", ".", "tgt_vocab", ")", ")", "\n", "if", "mask", ".", "any", "(", ")", ":", "\n", "                    ", "target", "[", "mask", "]", "=", "self", ".", "tgt_vocab", ".", "unk", "(", ")", "\n", "", "return", "target", "\n", "\n", "", "if", "isinstance", "(", "target", ",", "list", ")", ":", "\n", "                ", "return", "[", "_filter", "(", "t", ")", "for", "t", "in", "target", "]", "\n", "", "return", "_filter", "(", "target", ")", "\n", "", "return", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.monolingual_dataset.MonolingualDataset.collater": [[152, 174], ["monolingual_dataset.collate", "monolingual_dataset.MonolingualDataset.vocab.pad", "monolingual_dataset.MonolingualDataset.vocab.eos"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.denoising_dataset.collate", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos"], ["", "def", "collater", "(", "self", ",", "samples", ")", ":", "\n", "        ", "\"\"\"Merge a list of samples to form a mini-batch.\n\n        Args:\n            samples (List[dict]): samples to collate\n\n        Returns:\n            dict: a mini-batch with the following keys:\n\n                - `id` (LongTensor): example IDs in the original input order\n                - `ntokens` (int): total number of tokens in the batch\n                - `net_input` (dict): the input to the Model, containing keys:\n\n                  - `src_tokens` (LongTensor): a padded 2D Tensor of tokens in\n                    the source sentence of shape `(bsz, src_len)`. Padding will\n                    appear on the right.\n\n                - `target` (LongTensor): a padded 2D Tensor of tokens in the\n                  target sentence of shape `(bsz, tgt_len)`. Padding will appear\n                  on the right.\n        \"\"\"", "\n", "return", "collate", "(", "samples", ",", "self", ".", "vocab", ".", "pad", "(", ")", ",", "self", ".", "vocab", ".", "eos", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.monolingual_dataset.MonolingualDataset.num_tokens": [[175, 179], ["None"], "methods", ["None"], ["", "def", "num_tokens", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Return the number of tokens in a sample. This value is used to\n        enforce ``--max-tokens`` during batching.\"\"\"", "\n", "return", "self", ".", "sizes", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.monolingual_dataset.MonolingualDataset.size": [[180, 184], ["None"], "methods", ["None"], ["", "def", "size", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Return an example's size as a float or tuple. This value is used when\n        filtering a dataset with ``--max-positions``.\"\"\"", "\n", "return", "self", ".", "sizes", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.monolingual_dataset.MonolingualDataset.ordered_indices": [[185, 194], ["order.append", "numpy.lexsort", "numpy.random.permutation", "numpy.arange", "len", "len"], "methods", ["None"], ["", "def", "ordered_indices", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return an ordered list of indices. Batches will be constructed based\n        on this order.\"\"\"", "\n", "if", "self", ".", "shuffle", ":", "\n", "            ", "order", "=", "[", "np", ".", "random", ".", "permutation", "(", "len", "(", "self", ")", ")", "]", "\n", "", "else", ":", "\n", "            ", "order", "=", "[", "np", ".", "arange", "(", "len", "(", "self", ")", ")", "]", "\n", "", "order", ".", "append", "(", "self", ".", "sizes", ")", "\n", "return", "np", ".", "lexsort", "(", "order", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.monolingual_dataset.MonolingualDataset.supports_prefetch": [[195, 198], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "supports_prefetch", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ".", "dataset", ",", "'supports_prefetch'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.monolingual_dataset.MonolingualDataset.prefetch": [[199, 201], ["monolingual_dataset.MonolingualDataset.dataset.prefetch"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.block_pair_dataset.BlockPairDataset.prefetch"], ["", "def", "prefetch", "(", "self", ",", "indices", ")", ":", "\n", "        ", "self", ".", "dataset", ".", "prefetch", "(", "indices", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.monolingual_dataset.collate": [[12, 47], ["monolingual_dataset.collate.merge"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.translation_moe.score.merge"], ["def", "collate", "(", "samples", ",", "pad_idx", ",", "eos_idx", ")", ":", "\n", "    ", "if", "len", "(", "samples", ")", "==", "0", ":", "\n", "        ", "return", "{", "}", "\n", "\n", "", "def", "merge", "(", "key", ",", "is_list", "=", "False", ")", ":", "\n", "        ", "if", "is_list", ":", "\n", "            ", "res", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "samples", "[", "0", "]", "[", "key", "]", ")", ")", ":", "\n", "                ", "res", ".", "append", "(", "data_utils", ".", "collate_tokens", "(", "\n", "[", "s", "[", "key", "]", "[", "i", "]", "for", "s", "in", "samples", "]", ",", "pad_idx", ",", "eos_idx", ",", "left_pad", "=", "False", ",", "\n", ")", ")", "\n", "", "return", "res", "\n", "", "else", ":", "\n", "            ", "return", "data_utils", ".", "collate_tokens", "(", "\n", "[", "s", "[", "key", "]", "for", "s", "in", "samples", "]", ",", "pad_idx", ",", "eos_idx", ",", "left_pad", "=", "False", ",", "\n", ")", "\n", "\n", "", "", "src_tokens", "=", "merge", "(", "'source'", ")", "\n", "if", "samples", "[", "0", "]", "[", "'target'", "]", "is", "not", "None", ":", "\n", "        ", "is_target_list", "=", "isinstance", "(", "samples", "[", "0", "]", "[", "'target'", "]", ",", "list", ")", "\n", "target", "=", "merge", "(", "'target'", ",", "is_target_list", ")", "\n", "", "else", ":", "\n", "        ", "target", "=", "src_tokens", "\n", "\n", "", "return", "{", "\n", "'id'", ":", "torch", ".", "LongTensor", "(", "[", "s", "[", "'id'", "]", "for", "s", "in", "samples", "]", ")", ",", "\n", "'nsentences'", ":", "len", "(", "samples", ")", ",", "\n", "'ntokens'", ":", "sum", "(", "len", "(", "s", "[", "'source'", "]", ")", "for", "s", "in", "samples", ")", ",", "\n", "'net_input'", ":", "{", "\n", "'src_tokens'", ":", "src_tokens", ",", "\n", "'src_lengths'", ":", "torch", ".", "LongTensor", "(", "[", "\n", "s", "[", "'source'", "]", ".", "numel", "(", ")", "for", "s", "in", "samples", "\n", "]", ")", ",", "\n", "}", ",", "\n", "'target'", ":", "target", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.roll_dataset.RollDataset.__init__": [[13, 16], ["BaseWrapperDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "shifts", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset", ")", "\n", "self", ".", "shifts", "=", "shifts", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.roll_dataset.RollDataset.__getitem__": [[17, 20], ["torch.roll"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "item", "=", "self", ".", "dataset", "[", "index", "]", "\n", "return", "torch", ".", "roll", "(", "item", ",", "self", ".", "shifts", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.list_dataset.ListDataset.__init__": [[11, 14], ["BaseWrapperDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "sizes", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset", ")", "\n", "self", ".", "_sizes", "=", "sizes", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.list_dataset.ListDataset.__iter__": [[15, 18], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "x", "in", "self", ".", "dataset", ":", "\n", "            ", "yield", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.list_dataset.ListDataset.collater": [[19, 21], ["None"], "methods", ["None"], ["", "", "def", "collater", "(", "self", ",", "samples", ")", ":", "\n", "        ", "return", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.list_dataset.ListDataset.sizes": [[22, 25], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "sizes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_sizes", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.list_dataset.ListDataset.num_tokens": [[26, 28], ["None"], "methods", ["None"], ["", "def", "num_tokens", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "sizes", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.list_dataset.ListDataset.size": [[29, 31], ["None"], "methods", ["None"], ["", "def", "size", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "sizes", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.list_dataset.ListDataset.set_epoch": [[32, 34], ["None"], "methods", ["None"], ["", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "pass", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.nested_dictionary_dataset.NestedDictionaryDataset.__init__": [[49, 63], ["FairseqDataset.__init__", "nested_dictionary_dataset._flatten", "nested_dictionary_dataset.NestedDictionaryDataset.defn.values", "len", "isinstance", "isinstance", "ValueError", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.nested_dictionary_dataset._flatten"], ["    ", "def", "__init__", "(", "self", ",", "defn", ",", "sizes", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "defn", "=", "_flatten", "(", "defn", ")", "\n", "self", ".", "sizes", "=", "[", "sizes", "]", "if", "not", "isinstance", "(", "sizes", ",", "(", "list", ",", "tuple", ")", ")", "else", "sizes", "\n", "\n", "first", "=", "None", "\n", "for", "v", "in", "self", ".", "defn", ".", "values", "(", ")", ":", "\n", "            ", "if", "not", "isinstance", "(", "v", ",", "(", "FairseqDataset", ",", "torch", ".", "utils", ".", "data", ".", "Dataset", ",", ")", ")", ":", "\n", "                ", "raise", "ValueError", "(", "'Expected Dataset but found: {}'", ".", "format", "(", "v", ".", "__class__", ")", ")", "\n", "", "first", "=", "first", "or", "v", "\n", "if", "len", "(", "v", ")", ">", "0", ":", "\n", "                ", "assert", "len", "(", "v", ")", "==", "len", "(", "first", ")", ",", "'dataset lengths must match'", "\n", "\n", "", "", "self", ".", "_len", "=", "len", "(", "first", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.nested_dictionary_dataset.NestedDictionaryDataset.__getitem__": [[64, 66], ["collections.OrderedDict", "nested_dictionary_dataset.NestedDictionaryDataset.defn.items"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "OrderedDict", "(", "(", "k", ",", "ds", "[", "index", "]", ")", "for", "k", ",", "ds", "in", "self", ".", "defn", ".", "items", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.nested_dictionary_dataset.NestedDictionaryDataset.__len__": [[67, 69], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_len", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.nested_dictionary_dataset.NestedDictionaryDataset.collater": [[70, 88], ["collections.OrderedDict", "nested_dictionary_dataset.NestedDictionaryDataset.defn.items", "nested_dictionary_dataset._unflatten", "len", "ds.collater", "torch.utils.data.dataloader.default_collate"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.nested_dictionary_dataset._unflatten", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.collater"], ["", "def", "collater", "(", "self", ",", "samples", ")", ":", "\n", "        ", "\"\"\"Merge a list of samples to form a mini-batch.\n\n        Args:\n            samples (List[dict]): samples to collate\n\n        Returns:\n            dict: a mini-batch suitable for forwarding with a Model\n        \"\"\"", "\n", "if", "len", "(", "samples", ")", "==", "0", ":", "\n", "            ", "return", "{", "}", "\n", "", "sample", "=", "OrderedDict", "(", ")", "\n", "for", "k", ",", "ds", "in", "self", ".", "defn", ".", "items", "(", ")", ":", "\n", "            ", "try", ":", "\n", "                ", "sample", "[", "k", "]", "=", "ds", ".", "collater", "(", "[", "s", "[", "k", "]", "for", "s", "in", "samples", "]", ")", "\n", "", "except", "NotImplementedError", ":", "\n", "                ", "sample", "[", "k", "]", "=", "default_collate", "(", "[", "s", "[", "k", "]", "for", "s", "in", "samples", "]", ")", "\n", "", "", "return", "_unflatten", "(", "sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.nested_dictionary_dataset.NestedDictionaryDataset.num_tokens": [[89, 93], ["max"], "methods", ["None"], ["", "def", "num_tokens", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Return the number of tokens in a sample. This value is used to\n        enforce ``--max-tokens`` during batching.\"\"\"", "\n", "return", "max", "(", "s", "[", "index", "]", "for", "s", "in", "self", ".", "sizes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.nested_dictionary_dataset.NestedDictionaryDataset.size": [[94, 101], ["len"], "methods", ["None"], ["", "def", "size", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Return an example's size as a float or tuple. This value is used when\n        filtering a dataset with ``--max-positions``.\"\"\"", "\n", "if", "len", "(", "self", ".", "sizes", ")", "==", "1", ":", "\n", "            ", "return", "self", ".", "sizes", "[", "0", "]", "[", "index", "]", "\n", "", "else", ":", "\n", "            ", "return", "(", "s", "[", "index", "]", "for", "s", "in", "self", ".", "sizes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.nested_dictionary_dataset.NestedDictionaryDataset.supports_prefetch": [[102, 106], ["any", "nested_dictionary_dataset.NestedDictionaryDataset.defn.values"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "supports_prefetch", "(", "self", ")", ":", "\n", "        ", "\"\"\"Whether this dataset supports prefetching.\"\"\"", "\n", "return", "any", "(", "ds", ".", "supports_prefetch", "for", "ds", "in", "self", ".", "defn", ".", "values", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.nested_dictionary_dataset.NestedDictionaryDataset.prefetch": [[107, 112], ["nested_dictionary_dataset.NestedDictionaryDataset.defn.values", "getattr", "ds.prefetch"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.block_pair_dataset.BlockPairDataset.prefetch"], ["", "def", "prefetch", "(", "self", ",", "indices", ")", ":", "\n", "        ", "\"\"\"Prefetch the data required for this epoch.\"\"\"", "\n", "for", "ds", "in", "self", ".", "defn", ".", "values", "(", ")", ":", "\n", "            ", "if", "getattr", "(", "ds", ",", "'supports_prefetch'", ",", "False", ")", ":", "\n", "                ", "ds", ".", "prefetch", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.nested_dictionary_dataset.NestedDictionaryDataset.set_epoch": [[113, 117], ["super().set_epoch", "nested_dictionary_dataset.NestedDictionaryDataset.defn.values", "ds.set_epoch"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.denoising_dataset.DenoisingDataset.set_epoch", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.denoising_dataset.DenoisingDataset.set_epoch"], ["", "", "", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "super", "(", ")", ".", "set_epoch", "(", "epoch", ")", "\n", "for", "ds", "in", "self", ".", "defn", ".", "values", "(", ")", ":", "\n", "            ", "ds", ".", "set_epoch", "(", "epoch", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.nested_dictionary_dataset._flatten": [[14, 29], ["collections.OrderedDict", "isinstance", "dico.items", "isinstance", "collections.OrderedDict.update", "enumerate", "collections.OrderedDict", "nested_dictionary_dataset._flatten", "collections.OrderedDict.update", "nested_dictionary_dataset._flatten", "str"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.update", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.nested_dictionary_dataset._flatten", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.update", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.nested_dictionary_dataset._flatten"], ["def", "_flatten", "(", "dico", ",", "prefix", "=", "None", ")", ":", "\n", "    ", "\"\"\"Flatten a nested dictionary.\"\"\"", "\n", "new_dico", "=", "OrderedDict", "(", ")", "\n", "if", "isinstance", "(", "dico", ",", "dict", ")", ":", "\n", "        ", "prefix", "=", "prefix", "+", "'.'", "if", "prefix", "is", "not", "None", "else", "''", "\n", "for", "k", ",", "v", "in", "dico", ".", "items", "(", ")", ":", "\n", "            ", "if", "v", "is", "None", ":", "\n", "                ", "continue", "\n", "", "new_dico", ".", "update", "(", "_flatten", "(", "v", ",", "prefix", "+", "k", ")", ")", "\n", "", "", "elif", "isinstance", "(", "dico", ",", "list", ")", ":", "\n", "        ", "for", "i", ",", "v", "in", "enumerate", "(", "dico", ")", ":", "\n", "            ", "new_dico", ".", "update", "(", "_flatten", "(", "v", ",", "prefix", "+", "'.['", "+", "str", "(", "i", ")", "+", "']'", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "new_dico", "=", "OrderedDict", "(", "{", "prefix", ":", "dico", "}", ")", "\n", "", "return", "new_dico", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.nested_dictionary_dataset._unflatten": [[31, 45], ["collections.OrderedDict", "dico.items", "full_k.split.split", "int.startswith", "int.endswith", "int", "collections.OrderedDict"], "function", ["None"], ["", "def", "_unflatten", "(", "dico", ")", ":", "\n", "    ", "\"\"\"Unflatten a flattened dictionary into a nested dictionary.\"\"\"", "\n", "new_dico", "=", "OrderedDict", "(", ")", "\n", "for", "full_k", ",", "v", "in", "dico", ".", "items", "(", ")", ":", "\n", "        ", "full_k", "=", "full_k", ".", "split", "(", "'.'", ")", "\n", "node", "=", "new_dico", "\n", "for", "k", "in", "full_k", "[", ":", "-", "1", "]", ":", "\n", "            ", "if", "k", ".", "startswith", "(", "'['", ")", "and", "k", ".", "endswith", "(", "']'", ")", ":", "\n", "                ", "k", "=", "int", "(", "k", "[", "1", ":", "-", "1", "]", ")", "\n", "", "if", "k", "not", "in", "node", ":", "\n", "                ", "node", "[", "k", "]", "=", "OrderedDict", "(", ")", "\n", "", "node", "=", "node", "[", "k", "]", "\n", "", "node", "[", "full_k", "[", "-", "1", "]", "]", "=", "v", "\n", "", "return", "new_dico", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.plasma_utils.PlasmaArray.__init__": [[18, 30], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["def", "__init__", "(", "self", ",", "array", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "array", "=", "array", "\n", "self", ".", "disable", "=", "array", ".", "nbytes", "<", "134217728", "# disable for arrays <128MB", "\n", "self", ".", "object_id", "=", "None", "\n", "self", ".", "path", "=", "None", "\n", "\n", "# variables with underscores shouldn't be pickled", "\n", "self", ".", "_client", "=", "None", "\n", "self", ".", "_server", "=", "None", "\n", "self", ".", "_server_tmp", "=", "None", "\n", "self", ".", "_plasma", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.plasma_utils.PlasmaArray.plasma": [[31, 40], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "plasma", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_plasma", "is", "None", "and", "not", "self", ".", "disable", ":", "\n", "            ", "try", ":", "\n", "                ", "import", "pyarrow", ".", "plasma", "as", "plasma", "\n", "self", ".", "_plasma", "=", "plasma", "\n", "", "except", "ImportError", ":", "\n", "                ", "self", ".", "_plasma", "=", "None", "\n", "", "", "return", "self", ".", "_plasma", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.plasma_utils.PlasmaArray.start_server": [[41, 52], ["tempfile.NamedTemporaryFile", "subprocess.Popen", "str", "int"], "methods", ["None"], ["", "def", "start_server", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "plasma", "is", "None", "or", "self", ".", "_server", "is", "not", "None", ":", "\n", "            ", "return", "\n", "", "assert", "self", ".", "object_id", "is", "None", "\n", "assert", "self", ".", "path", "is", "None", "\n", "self", ".", "_server_tmp", "=", "tempfile", ".", "NamedTemporaryFile", "(", ")", "\n", "self", ".", "path", "=", "self", ".", "_server_tmp", ".", "name", "\n", "self", ".", "_server", "=", "subprocess", ".", "Popen", "(", "[", "\n", "'plasma_store'", ",", "\n", "'-m'", ",", "str", "(", "int", "(", "1.05", "*", "self", ".", "array", ".", "nbytes", ")", ")", ",", "\n", "'-s'", ",", "self", ".", "path", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.plasma_utils.PlasmaArray.client": [[54, 60], ["plasma_utils.PlasmaArray.plasma.connect"], "methods", ["None"], ["", "@", "property", "\n", "def", "client", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_client", "is", "None", ":", "\n", "            ", "assert", "self", ".", "path", "is", "not", "None", "\n", "self", ".", "_client", "=", "self", ".", "plasma", ".", "connect", "(", "self", ".", "path", ")", "\n", "", "return", "self", ".", "_client", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.plasma_utils.PlasmaArray.__getstate__": [[61, 74], ["plasma_utils.PlasmaArray.__dict__.copy", "plasma_utils.PlasmaArray.start_server", "plasma_utils.PlasmaArray.client.put"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.copy", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.plasma_utils.PlasmaArray.start_server"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "plasma", "is", "None", ":", "\n", "            ", "return", "self", ".", "__dict__", "\n", "", "if", "self", ".", "object_id", "is", "None", ":", "\n", "            ", "self", ".", "start_server", "(", ")", "\n", "self", ".", "object_id", "=", "self", ".", "client", ".", "put", "(", "self", ".", "array", ")", "\n", "", "state", "=", "self", ".", "__dict__", ".", "copy", "(", ")", "\n", "del", "state", "[", "'array'", "]", "\n", "state", "[", "'_client'", "]", "=", "None", "\n", "state", "[", "'_server'", "]", "=", "None", "\n", "state", "[", "'_server_tmp'", "]", "=", "None", "\n", "state", "[", "'_plasma'", "]", "=", "None", "\n", "return", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.plasma_utils.PlasmaArray.__setstate__": [[75, 80], ["plasma_utils.PlasmaArray.__dict__.update", "plasma_utils.PlasmaArray.client.get"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.update"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "self", ".", "__dict__", ".", "update", "(", "state", ")", "\n", "if", "self", ".", "plasma", "is", "None", ":", "\n", "            ", "return", "\n", "", "self", ".", "array", "=", "self", ".", "client", ".", "get", "(", "self", ".", "object_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.plasma_utils.PlasmaArray.__del__": [[81, 87], ["plasma_utils.PlasmaArray._server.kill", "plasma_utils.PlasmaArray._server_tmp.close"], "methods", ["None"], ["", "def", "__del__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_server", "is", "not", "None", ":", "\n", "            ", "self", ".", "_server", ".", "kill", "(", ")", "\n", "self", ".", "_server", "=", "None", "\n", "self", ".", "_server_tmp", ".", "close", "(", ")", "\n", "self", ".", "_server_tmp", "=", "None", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.concat_dataset.ConcatDataset.cumsum": [[15, 23], ["zip", "int", "r.append", "len"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "cumsum", "(", "sequence", ",", "sample_ratios", ")", ":", "\n", "        ", "r", ",", "s", "=", "[", "]", ",", "0", "\n", "for", "e", ",", "ratio", "in", "zip", "(", "sequence", ",", "sample_ratios", ")", ":", "\n", "            ", "curr_len", "=", "int", "(", "ratio", "*", "len", "(", "e", ")", ")", "\n", "r", ".", "append", "(", "curr_len", "+", "s", ")", "\n", "s", "+=", "curr_len", "\n", "", "return", "r", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.concat_dataset.ConcatDataset.__init__": [[24, 33], ["FairseqDataset.__init__", "list", "isinstance", "concat_dataset.ConcatDataset.cumsum", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.concat_dataset.ConcatDataset.cumsum"], ["", "def", "__init__", "(", "self", ",", "datasets", ",", "sample_ratios", "=", "1", ")", ":", "\n", "        ", "super", "(", "ConcatDataset", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "len", "(", "datasets", ")", ">", "0", ",", "\"datasets should not be an empty iterable\"", "\n", "self", ".", "datasets", "=", "list", "(", "datasets", ")", "\n", "if", "isinstance", "(", "sample_ratios", ",", "int", ")", ":", "\n", "            ", "sample_ratios", "=", "[", "sample_ratios", "]", "*", "len", "(", "self", ".", "datasets", ")", "\n", "", "self", ".", "sample_ratios", "=", "sample_ratios", "\n", "self", ".", "cumulative_sizes", "=", "self", ".", "cumsum", "(", "self", ".", "datasets", ",", "sample_ratios", ")", "\n", "self", ".", "real_sizes", "=", "[", "len", "(", "d", ")", "for", "d", "in", "self", ".", "datasets", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.concat_dataset.ConcatDataset.__len__": [[34, 36], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "cumulative_sizes", "[", "-", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.concat_dataset.ConcatDataset.__getitem__": [[37, 40], ["concat_dataset.ConcatDataset._get_dataset_and_sample_index"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.concat_dataset.ConcatDataset._get_dataset_and_sample_index"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "dataset_idx", ",", "sample_idx", "=", "self", ".", "_get_dataset_and_sample_index", "(", "idx", ")", "\n", "return", "self", ".", "datasets", "[", "dataset_idx", "]", "[", "sample_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.concat_dataset.ConcatDataset._get_dataset_and_sample_index": [[41, 49], ["bisect.bisect_right"], "methods", ["None"], ["", "def", "_get_dataset_and_sample_index", "(", "self", ",", "idx", ":", "int", ")", ":", "\n", "        ", "dataset_idx", "=", "bisect", ".", "bisect_right", "(", "self", ".", "cumulative_sizes", ",", "idx", ")", "\n", "if", "dataset_idx", "==", "0", ":", "\n", "            ", "sample_idx", "=", "idx", "\n", "", "else", ":", "\n", "            ", "sample_idx", "=", "idx", "-", "self", ".", "cumulative_sizes", "[", "dataset_idx", "-", "1", "]", "\n", "", "sample_idx", "=", "sample_idx", "%", "self", ".", "real_sizes", "[", "dataset_idx", "]", "\n", "return", "dataset_idx", ",", "sample_idx", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.concat_dataset.ConcatDataset.collater": [[50, 56], ["hasattr", "concat_dataset.ConcatDataset.datasets[].collater", "torch.utils.data.dataloader.default_collate"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.collater"], ["", "def", "collater", "(", "self", ",", "samples", ")", ":", "\n", "# For now only supports datasets with same underlying collater implementations", "\n", "        ", "if", "hasattr", "(", "self", ".", "datasets", "[", "0", "]", ",", "'collater'", ")", ":", "\n", "            ", "return", "self", ".", "datasets", "[", "0", "]", ".", "collater", "(", "samples", ")", "\n", "", "else", ":", "\n", "            ", "return", "default_collate", "(", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.concat_dataset.ConcatDataset.size": [[57, 63], ["concat_dataset.ConcatDataset._get_dataset_and_sample_index", "concat_dataset.ConcatDataset.datasets[].size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.concat_dataset.ConcatDataset._get_dataset_and_sample_index", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "", "def", "size", "(", "self", ",", "idx", ":", "int", ")", ":", "\n", "        ", "\"\"\"\n        Return an example's size as a float or tuple.\n        \"\"\"", "\n", "dataset_idx", ",", "sample_idx", "=", "self", ".", "_get_dataset_and_sample_index", "(", "idx", ")", "\n", "return", "self", ".", "datasets", "[", "dataset_idx", "]", ".", "size", "(", "sample_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.concat_dataset.ConcatDataset.num_tokens": [[64, 66], ["numpy.max", "concat_dataset.ConcatDataset.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "num_tokens", "(", "self", ",", "index", ":", "int", ")", ":", "\n", "        ", "return", "np", ".", "max", "(", "self", ".", "size", "(", "index", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.concat_dataset.ConcatDataset.attr": [[67, 70], ["bisect.bisect_right", "getattr"], "methods", ["None"], ["", "def", "attr", "(", "self", ",", "attr", ":", "str", ",", "index", ":", "int", ")", ":", "\n", "        ", "dataset_idx", "=", "bisect", ".", "bisect_right", "(", "self", ".", "cumulative_sizes", ",", "index", ")", "\n", "return", "getattr", "(", "self", ".", "datasets", "[", "dataset_idx", "]", ",", "attr", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.concat_dataset.ConcatDataset.sizes": [[71, 82], ["zip", "numpy.concatenate", "isinstance", "_dataset_sizes.append", "isinstance", "_dataset_sizes.append", "numpy.tile", "numpy.tile"], "methods", ["None"], ["", "@", "property", "\n", "def", "sizes", "(", "self", ")", ":", "\n", "        ", "_dataset_sizes", "=", "[", "]", "\n", "for", "ds", ",", "sr", "in", "zip", "(", "self", ".", "datasets", ",", "self", ".", "sample_ratios", ")", ":", "\n", "            ", "if", "isinstance", "(", "ds", ".", "sizes", ",", "np", ".", "ndarray", ")", ":", "\n", "                ", "_dataset_sizes", ".", "append", "(", "np", ".", "tile", "(", "ds", ".", "sizes", ",", "sr", ")", ")", "\n", "", "else", ":", "\n", "# Only support underlying dataset with single size array.", "\n", "                ", "assert", "isinstance", "(", "ds", ".", "sizes", ",", "list", ")", "\n", "_dataset_sizes", ".", "append", "(", "np", ".", "tile", "(", "ds", ".", "sizes", "[", "0", "]", ",", "sr", ")", ")", "\n", "", "", "return", "np", ".", "concatenate", "(", "_dataset_sizes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.concat_dataset.ConcatDataset.supports_prefetch": [[83, 86], ["all"], "methods", ["None"], ["", "@", "property", "\n", "def", "supports_prefetch", "(", "self", ")", ":", "\n", "        ", "return", "all", "(", "d", ".", "supports_prefetch", "for", "d", "in", "self", ".", "datasets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.concat_dataset.ConcatDataset.ordered_indices": [[87, 92], ["numpy.argsort"], "methods", ["None"], ["", "def", "ordered_indices", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns indices sorted by length. So less padding is needed.\n        \"\"\"", "\n", "return", "np", ".", "argsort", "(", "self", ".", "sizes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.concat_dataset.ConcatDataset.prefetch": [[93, 100], ["zip", "len", "getattr", "ds.prefetch"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.block_pair_dataset.BlockPairDataset.prefetch"], ["", "def", "prefetch", "(", "self", ",", "indices", ")", ":", "\n", "        ", "frm", "=", "0", "\n", "for", "to", ",", "ds", "in", "zip", "(", "self", ".", "cumulative_sizes", ",", "self", ".", "datasets", ")", ":", "\n", "            ", "real_size", "=", "len", "(", "ds", ")", "\n", "if", "getattr", "(", "ds", ",", "'supports_prefetch'", ",", "False", ")", ":", "\n", "                ", "ds", ".", "prefetch", "(", "[", "(", "i", "-", "frm", ")", "%", "real_size", "for", "i", "in", "indices", "if", "frm", "<=", "i", "<", "to", "]", ")", "\n", "", "frm", "=", "to", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.concat_dataset.ConcatDataset.set_epoch": [[101, 106], ["super().set_epoch", "hasattr", "ds.set_epoch"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.denoising_dataset.DenoisingDataset.set_epoch", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.denoising_dataset.DenoisingDataset.set_epoch"], ["", "", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "super", "(", ")", ".", "set_epoch", "(", "epoch", ")", "\n", "for", "ds", "in", "self", ".", "datasets", ":", "\n", "            ", "if", "hasattr", "(", "ds", ",", "'set_epoch'", ")", ":", "\n", "                ", "ds", ".", "set_epoch", "(", "epoch", ")", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.language_pair_dataset.LanguagePairDataset.__init__": [[149, 181], ["numpy.array", "numpy.array", "src_dict.pad", "tgt_dict.pad", "src_dict.eos", "tgt_dict.eos", "src_dict.unk", "tgt_dict.unk"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.unk", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.unk"], ["\n", "\n", "def", "__init__", "(", "\n", "self", ",", "src", ",", "src_sizes", ",", "src_dict", ",", "\n", "tgt", "=", "None", ",", "tgt_sizes", "=", "None", ",", "tgt_dict", "=", "None", ",", "\n", "left_pad_source", "=", "True", ",", "left_pad_target", "=", "False", ",", "\n", "max_source_positions", "=", "1024", ",", "max_target_positions", "=", "1024", ",", "\n", "shuffle", "=", "True", ",", "input_feeding", "=", "True", ",", "\n", "remove_eos_from_source", "=", "False", ",", "append_eos_to_target", "=", "False", ",", "\n", "align_dataset", "=", "None", ",", "\n", "append_bos", "=", "False", "\n", ")", ":", "\n", "        ", "if", "tgt_dict", "is", "not", "None", ":", "\n", "            ", "assert", "src_dict", ".", "pad", "(", ")", "==", "tgt_dict", ".", "pad", "(", ")", "\n", "assert", "src_dict", ".", "eos", "(", ")", "==", "tgt_dict", ".", "eos", "(", ")", "\n", "assert", "src_dict", ".", "unk", "(", ")", "==", "tgt_dict", ".", "unk", "(", ")", "\n", "", "self", ".", "src", "=", "src", "\n", "self", ".", "tgt", "=", "tgt", "\n", "self", ".", "src_sizes", "=", "np", ".", "array", "(", "src_sizes", ")", "\n", "self", ".", "tgt_sizes", "=", "np", ".", "array", "(", "tgt_sizes", ")", "if", "tgt_sizes", "is", "not", "None", "else", "None", "\n", "self", ".", "src_dict", "=", "src_dict", "\n", "self", ".", "tgt_dict", "=", "tgt_dict", "\n", "self", ".", "left_pad_source", "=", "left_pad_source", "\n", "self", ".", "left_pad_target", "=", "left_pad_target", "\n", "self", ".", "max_source_positions", "=", "max_source_positions", "\n", "self", ".", "max_target_positions", "=", "max_target_positions", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "input_feeding", "=", "input_feeding", "\n", "self", ".", "remove_eos_from_source", "=", "remove_eos_from_source", "\n", "self", ".", "append_eos_to_target", "=", "append_eos_to_target", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.language_pair_dataset.LanguagePairDataset.__getitem__": [[182, 216], ["language_pair_dataset.LanguagePairDataset.src_dict.bos", "language_pair_dataset.LanguagePairDataset.src_dict.eos", "language_pair_dataset.LanguagePairDataset.tgt_dict.eos", "language_pair_dataset.LanguagePairDataset.src_dict.eos", "torch.cat", "language_pair_dataset.LanguagePairDataset.tgt_dict.bos", "language_pair_dataset.LanguagePairDataset.src_dict.bos", "torch.cat", "torch.cat", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.bos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.bos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.bos"], ["self", ".", "align_dataset", "=", "align_dataset", "\n", "if", "self", ".", "align_dataset", "is", "not", "None", ":", "\n", "            ", "assert", "self", ".", "tgt_sizes", "is", "not", "None", ",", "\"Both source and target needed when alignments are provided\"", "\n", "", "self", ".", "append_bos", "=", "append_bos", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "tgt_item", "=", "self", ".", "tgt", "[", "index", "]", "if", "self", ".", "tgt", "is", "not", "None", "else", "None", "\n", "src_item", "=", "self", ".", "src", "[", "index", "]", "\n", "# Append EOS to end of tgt sentence if it does not have an EOS and remove", "\n", "# EOS from end of src sentence if it exists. This is useful when we use", "\n", "# use existing datasets for opposite directions i.e., when we want to", "\n", "# use tgt_dataset as src_dataset and vice versa", "\n", "if", "self", ".", "append_eos_to_target", ":", "\n", "            ", "eos", "=", "self", ".", "tgt_dict", ".", "eos", "(", ")", "if", "self", ".", "tgt_dict", "else", "self", ".", "src_dict", ".", "eos", "(", ")", "\n", "if", "self", ".", "tgt", "and", "self", ".", "tgt", "[", "index", "]", "[", "-", "1", "]", "!=", "eos", ":", "\n", "                ", "tgt_item", "=", "torch", ".", "cat", "(", "[", "self", ".", "tgt", "[", "index", "]", ",", "torch", ".", "LongTensor", "(", "[", "eos", "]", ")", "]", ")", "\n", "\n", "", "", "if", "self", ".", "append_bos", ":", "\n", "            ", "bos", "=", "self", ".", "tgt_dict", ".", "bos", "(", ")", "if", "self", ".", "tgt_dict", "else", "self", ".", "src_dict", ".", "bos", "(", ")", "\n", "if", "self", ".", "tgt", "and", "self", ".", "tgt", "[", "index", "]", "[", "0", "]", "!=", "bos", ":", "\n", "                ", "tgt_item", "=", "torch", ".", "cat", "(", "[", "torch", ".", "LongTensor", "(", "[", "bos", "]", ")", ",", "self", ".", "tgt", "[", "index", "]", "]", ")", "\n", "\n", "", "bos", "=", "self", ".", "src_dict", ".", "bos", "(", ")", "\n", "if", "self", ".", "src", "[", "index", "]", "[", "-", "1", "]", "!=", "bos", ":", "\n", "                ", "src_item", "=", "torch", ".", "cat", "(", "[", "torch", ".", "LongTensor", "(", "[", "bos", "]", ")", ",", "self", ".", "src", "[", "index", "]", "]", ")", "\n", "\n", "", "", "if", "self", ".", "remove_eos_from_source", ":", "\n", "            ", "eos", "=", "self", ".", "src_dict", ".", "eos", "(", ")", "\n", "if", "self", ".", "src", "[", "index", "]", "[", "-", "1", "]", "==", "eos", ":", "\n", "                ", "src_item", "=", "self", ".", "src", "[", "index", "]", "[", ":", "-", "1", "]", "\n", "\n", "", "", "example", "=", "{", "\n", "'id'", ":", "index", ",", "\n", "'source'", ":", "src_item", ",", "\n", "'target'", ":", "tgt_item", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.language_pair_dataset.LanguagePairDataset.__len__": [[217, 219], ["len"], "methods", ["None"], ["}", "\n", "if", "self", ".", "align_dataset", "is", "not", "None", ":", "\n", "            ", "example", "[", "'alignment'", "]", "=", "self", ".", "align_dataset", "[", "index", "]", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.language_pair_dataset.LanguagePairDataset.collater": [[220, 253], ["language_pair_dataset.collate", "language_pair_dataset.LanguagePairDataset.src_dict.pad", "language_pair_dataset.LanguagePairDataset.src_dict.eos"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.denoising_dataset.collate", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos"], ["", "return", "example", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "src", ")", "\n", "\n", "", "def", "collater", "(", "self", ",", "samples", ")", ":", "\n", "        ", "\"\"\"Merge a list of samples to form a mini-batch.\n\n        Args:\n            samples (List[dict]): samples to collate\n\n        Returns:\n            dict: a mini-batch with the following keys:\n\n                - `id` (LongTensor): example IDs in the original input order\n                - `ntokens` (int): total number of tokens in the batch\n                - `net_input` (dict): the input to the Model, containing keys:\n\n                  - `src_tokens` (LongTensor): a padded 2D Tensor of tokens in\n                    the source sentence of shape `(bsz, src_len)`. Padding will\n                    appear on the left if *left_pad_source* is ``True``.\n                  - `src_lengths` (LongTensor): 1D Tensor of the unpadded\n                    lengths of each source sentence of shape `(bsz)`\n                  - `prev_output_tokens` (LongTensor): a padded 2D Tensor of\n                    tokens in the target sentence, shifted right by one\n                    position for teacher forcing, of shape `(bsz, tgt_len)`.\n                    This key will not be present if *input_feeding* is\n                    ``False``.  Padding will appear on the left if\n                    *left_pad_target* is ``True``.\n\n                - `target` (LongTensor): a padded 2D Tensor of tokens in the\n                  target sentence of shape `(bsz, tgt_len)`. Padding will appear\n                  on the left if *left_pad_target* is ``True``.\n        \"\"\"", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.language_pair_dataset.LanguagePairDataset.num_tokens": [[255, 259], ["max"], "methods", ["None"], ["samples", ",", "pad_idx", "=", "self", ".", "src_dict", ".", "pad", "(", ")", ",", "eos_idx", "=", "self", ".", "src_dict", ".", "eos", "(", ")", ",", "\n", "left_pad_source", "=", "self", ".", "left_pad_source", ",", "left_pad_target", "=", "self", ".", "left_pad_target", ",", "\n", "input_feeding", "=", "self", ".", "input_feeding", ",", "\n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.language_pair_dataset.LanguagePairDataset.size": [[260, 264], ["None"], "methods", ["None"], ["", "def", "num_tokens", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Return the number of tokens in a sample. This value is used to\n        enforce ``--max-tokens`` during batching.\"\"\"", "\n", "return", "max", "(", "self", ".", "src_sizes", "[", "index", "]", ",", "self", ".", "tgt_sizes", "[", "index", "]", "if", "self", ".", "tgt_sizes", "is", "not", "None", "else", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.language_pair_dataset.LanguagePairDataset.ordered_indices": [[265, 275], ["numpy.random.permutation", "numpy.arange", "len", "len", "numpy.argsort", "numpy.argsort"], "methods", ["None"], ["", "def", "size", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Return an example's size as a float or tuple. This value is used when\n        filtering a dataset with ``--max-positions``.\"\"\"", "\n", "return", "(", "self", ".", "src_sizes", "[", "index", "]", ",", "self", ".", "tgt_sizes", "[", "index", "]", "if", "self", ".", "tgt_sizes", "is", "not", "None", "else", "0", ")", "\n", "\n", "", "def", "ordered_indices", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return an ordered list of indices. Batches will be constructed based\n        on this order.\"\"\"", "\n", "if", "self", ".", "shuffle", ":", "\n", "            ", "indices", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "self", ")", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.language_pair_dataset.LanguagePairDataset.supports_prefetch": [[276, 281], ["getattr", "getattr"], "methods", ["None"], ["            ", "indices", "=", "np", ".", "arange", "(", "len", "(", "self", ")", ")", "\n", "", "if", "self", ".", "tgt_sizes", "is", "not", "None", ":", "\n", "            ", "indices", "=", "indices", "[", "np", ".", "argsort", "(", "self", ".", "tgt_sizes", "[", "indices", "]", ",", "kind", "=", "'mergesort'", ")", "]", "\n", "", "return", "indices", "[", "np", ".", "argsort", "(", "self", ".", "src_sizes", "[", "indices", "]", ",", "kind", "=", "'mergesort'", ")", "]", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.language_pair_dataset.LanguagePairDataset.prefetch": [[283, 289], ["language_pair_dataset.LanguagePairDataset.src.prefetch", "language_pair_dataset.LanguagePairDataset.tgt.prefetch", "language_pair_dataset.LanguagePairDataset.align_dataset.prefetch"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.block_pair_dataset.BlockPairDataset.prefetch", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.block_pair_dataset.BlockPairDataset.prefetch", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.block_pair_dataset.BlockPairDataset.prefetch"], ["        ", "return", "(", "\n", "getattr", "(", "self", ".", "src", ",", "'supports_prefetch'", ",", "False", ")", "\n", "and", "(", "getattr", "(", "self", ".", "tgt", ",", "'supports_prefetch'", ",", "False", ")", "or", "self", ".", "tgt", "is", "None", ")", "\n", ")", "\n", "\n", "", "def", "prefetch", "(", "self", ",", "indices", ")", ":", "\n", "        ", "self", ".", "src", ".", "prefetch", "(", "indices", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.language_pair_dataset.collate": [[12, 114], ["torch.LongTensor", "language_pair_dataset.collate.merge"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.translation_moe.score.merge"], ["\n", "\n", "logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "\n", "def", "collate", "(", "\n", "samples", ",", "pad_idx", ",", "eos_idx", ",", "left_pad_source", "=", "True", ",", "left_pad_target", "=", "False", ",", "\n", "input_feeding", "=", "True", ",", "\n", ")", ":", "\n", "    ", "if", "len", "(", "samples", ")", "==", "0", ":", "\n", "        ", "return", "{", "}", "\n", "\n", "", "def", "merge", "(", "key", ",", "left_pad", ",", "move_eos_to_beginning", "=", "False", ")", ":", "\n", "        ", "return", "data_utils", ".", "collate_tokens", "(", "\n", "[", "s", "[", "key", "]", "for", "s", "in", "samples", "]", ",", "\n", "pad_idx", ",", "eos_idx", ",", "left_pad", ",", "move_eos_to_beginning", ",", "\n", ")", "\n", "\n", "", "def", "check_alignment", "(", "alignment", ",", "src_len", ",", "tgt_len", ")", ":", "\n", "        ", "if", "alignment", "is", "None", "or", "len", "(", "alignment", ")", "==", "0", ":", "\n", "            ", "return", "False", "\n", "", "if", "alignment", "[", ":", ",", "0", "]", ".", "max", "(", ")", ".", "item", "(", ")", ">=", "src_len", "-", "1", "or", "alignment", "[", ":", ",", "1", "]", ".", "max", "(", ")", ".", "item", "(", ")", ">=", "tgt_len", "-", "1", ":", "\n", "            ", "logger", ".", "warning", "(", "\"alignment size mismatch found, skipping alignment!\"", ")", "\n", "return", "False", "\n", "", "return", "True", "\n", "\n", "", "def", "compute_alignment_weights", "(", "alignments", ")", ":", "\n", "        ", "\"\"\"\n        Given a tensor of shape [:, 2] containing the source-target indices\n        corresponding to the alignments, a weight vector containing the\n        inverse frequency of each target index is computed.\n        For e.g. if alignments = [[5, 7], [2, 3], [1, 3], [4, 2]], then\n        a tensor containing [1., 0.5, 0.5, 1] should be returned (since target\n        index 3 is repeated twice)\n        \"\"\"", "\n", "align_tgt", "=", "alignments", "[", ":", ",", "1", "]", "\n", "_", ",", "align_tgt_i", ",", "align_tgt_c", "=", "torch", ".", "unique", "(", "align_tgt", ",", "return_inverse", "=", "True", ",", "return_counts", "=", "True", ")", "\n", "align_weights", "=", "align_tgt_c", "[", "align_tgt_i", "[", "np", ".", "arange", "(", "len", "(", "align_tgt", ")", ")", "]", "]", "\n", "return", "1.", "/", "align_weights", ".", "float", "(", ")", "\n", "\n", "", "id", "=", "torch", ".", "LongTensor", "(", "[", "s", "[", "'id'", "]", "for", "s", "in", "samples", "]", ")", "\n", "src_tokens", "=", "merge", "(", "'source'", ",", "left_pad", "=", "left_pad_source", ")", "\n", "# sort by descending source length", "\n", "src_lengths", "=", "torch", ".", "LongTensor", "(", "[", "s", "[", "'source'", "]", ".", "numel", "(", ")", "for", "s", "in", "samples", "]", ")", "\n", "src_lengths", ",", "sort_order", "=", "src_lengths", ".", "sort", "(", "descending", "=", "True", ")", "\n", "id", "=", "id", ".", "index_select", "(", "0", ",", "sort_order", ")", "\n", "src_tokens", "=", "src_tokens", ".", "index_select", "(", "0", ",", "sort_order", ")", "\n", "\n", "prev_output_tokens", "=", "None", "\n", "target", "=", "None", "\n", "if", "samples", "[", "0", "]", ".", "get", "(", "'target'", ",", "None", ")", "is", "not", "None", ":", "\n", "        ", "target", "=", "merge", "(", "'target'", ",", "left_pad", "=", "left_pad_target", ")", "\n", "target", "=", "target", ".", "index_select", "(", "0", ",", "sort_order", ")", "\n", "tgt_lengths", "=", "torch", ".", "LongTensor", "(", "[", "s", "[", "'target'", "]", ".", "numel", "(", ")", "for", "s", "in", "samples", "]", ")", ".", "index_select", "(", "0", ",", "sort_order", ")", "\n", "ntokens", "=", "sum", "(", "len", "(", "s", "[", "'target'", "]", ")", "for", "s", "in", "samples", ")", "\n", "\n", "if", "input_feeding", ":", "\n", "# we create a shifted version of targets for feeding the", "\n", "# previous output token(s) into the next decoder step", "\n", "            ", "prev_output_tokens", "=", "merge", "(", "\n", "'target'", ",", "\n", "left_pad", "=", "left_pad_target", ",", "\n", "move_eos_to_beginning", "=", "True", ",", "\n", ")", "\n", "prev_output_tokens", "=", "prev_output_tokens", ".", "index_select", "(", "0", ",", "sort_order", ")", "\n", "", "", "else", ":", "\n", "        ", "ntokens", "=", "sum", "(", "len", "(", "s", "[", "'source'", "]", ")", "for", "s", "in", "samples", ")", "\n", "\n", "", "batch", "=", "{", "\n", "'id'", ":", "id", ",", "\n", "'nsentences'", ":", "len", "(", "samples", ")", ",", "\n", "'ntokens'", ":", "ntokens", ",", "\n", "'net_input'", ":", "{", "\n", "'src_tokens'", ":", "src_tokens", ",", "\n", "'src_lengths'", ":", "src_lengths", ",", "\n", "}", ",", "\n", "'target'", ":", "target", ",", "\n", "}", "\n", "if", "prev_output_tokens", "is", "not", "None", ":", "\n", "        ", "batch", "[", "'net_input'", "]", "[", "'prev_output_tokens'", "]", "=", "prev_output_tokens", "\n", "\n", "", "if", "samples", "[", "0", "]", ".", "get", "(", "'alignment'", ",", "None", ")", "is", "not", "None", ":", "\n", "        ", "bsz", ",", "tgt_sz", "=", "batch", "[", "'target'", "]", ".", "shape", "\n", "src_sz", "=", "batch", "[", "'net_input'", "]", "[", "'src_tokens'", "]", ".", "shape", "[", "1", "]", "\n", "\n", "offsets", "=", "torch", ".", "zeros", "(", "(", "len", "(", "sort_order", ")", ",", "2", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "offsets", "[", ":", ",", "1", "]", "+=", "(", "torch", ".", "arange", "(", "len", "(", "sort_order", ")", ",", "dtype", "=", "torch", ".", "long", ")", "*", "tgt_sz", ")", "\n", "if", "left_pad_source", ":", "\n", "            ", "offsets", "[", ":", ",", "0", "]", "+=", "(", "src_sz", "-", "src_lengths", ")", "\n", "", "if", "left_pad_target", ":", "\n", "            ", "offsets", "[", ":", ",", "1", "]", "+=", "(", "tgt_sz", "-", "tgt_lengths", ")", "\n", "\n", "", "alignments", "=", "[", "\n", "alignment", "+", "offset", "\n", "for", "align_idx", ",", "offset", ",", "src_len", ",", "tgt_len", "in", "zip", "(", "sort_order", ",", "offsets", ",", "src_lengths", ",", "tgt_lengths", ")", "\n", "for", "alignment", "in", "[", "samples", "[", "align_idx", "]", "[", "'alignment'", "]", ".", "view", "(", "-", "1", ",", "2", ")", "]", "\n", "if", "check_alignment", "(", "alignment", ",", "src_len", ",", "tgt_len", ")", "\n", "]", "\n", "\n", "if", "len", "(", "alignments", ")", ">", "0", ":", "\n", "            ", "alignments", "=", "torch", ".", "cat", "(", "alignments", ",", "dim", "=", "0", ")", "\n", "align_weights", "=", "compute_alignment_weights", "(", "alignments", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.colorize_dataset.ColorizeDataset.__init__": [[13, 16], ["BaseWrapperDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["def", "__init__", "(", "self", ",", "dataset", ",", "color_getter", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset", ")", "\n", "self", ".", "color_getter", "=", "color_getter", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.colorize_dataset.ColorizeDataset.collater": [[17, 25], ["super().collater", "len", "torch.tensor", "list", "colorize_dataset.ColorizeDataset.color_getter"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.collater"], ["", "def", "collater", "(", "self", ",", "samples", ")", ":", "\n", "        ", "base_collate", "=", "super", "(", ")", ".", "collater", "(", "samples", ")", "\n", "if", "len", "(", "base_collate", ")", ">", "0", ":", "\n", "            ", "base_collate", "[", "\"net_input\"", "]", "[", "\"colors\"", "]", "=", "torch", ".", "tensor", "(", "\n", "list", "(", "self", ".", "color_getter", "(", "self", ".", "dataset", ",", "s", "[", "\"id\"", "]", ")", "for", "s", "in", "samples", ")", ",", "\n", "dtype", "=", "torch", ".", "long", ",", "\n", ")", "\n", "", "return", "base_collate", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.numel_dataset.NumelDataset.__init__": [[14, 17], ["BaseWrapperDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "reduce", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset", ")", "\n", "self", ".", "reduce", "=", "reduce", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.numel_dataset.NumelDataset.__getitem__": [[18, 24], ["torch.is_tensor", "torch.numel", "numpy.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "item", "=", "self", ".", "dataset", "[", "index", "]", "\n", "if", "torch", ".", "is_tensor", "(", "item", ")", ":", "\n", "            ", "return", "torch", ".", "numel", "(", "item", ")", "\n", "", "else", ":", "\n", "            ", "return", "np", ".", "size", "(", "item", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.numel_dataset.NumelDataset.__len__": [[25, 27], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.numel_dataset.NumelDataset.collater": [[28, 33], ["sum", "torch.tensor"], "methods", ["None"], ["", "def", "collater", "(", "self", ",", "samples", ")", ":", "\n", "        ", "if", "self", ".", "reduce", ":", "\n", "            ", "return", "sum", "(", "samples", ")", "\n", "", "else", ":", "\n", "            ", "return", "torch", ".", "tensor", "(", "samples", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.resampling_dataset.ResamplingDataset.__init__": [[37, 73], ["BaseWrapperDataset.__init__", "float", "numpy.ceil().astype", "resampling_dataset.ResamplingDataset.set_epoch", "numpy.array", "numpy.array.sum", "plasma_utils.PlasmaArray", "len", "len", "numpy.ceil", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.denoising_dataset.DenoisingDataset.set_epoch"], ["def", "__init__", "(", "\n", "self", ",", "\n", "dataset", ",", "\n", "weights", "=", "None", ",", "\n", "replace", "=", "True", ",", "\n", "size_ratio", "=", "1.0", ",", "\n", "batch_by_size", "=", "True", ",", "\n", "seed", "=", "0", ",", "\n", "epoch", "=", "0", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset", ")", "\n", "\n", "if", "weights", "is", "None", ":", "\n", "            ", "self", ".", "weights", "=", "None", "\n", "\n", "", "else", ":", "\n", "            ", "assert", "len", "(", "weights", ")", "==", "len", "(", "dataset", ")", "\n", "weights_arr", "=", "np", ".", "array", "(", "weights", ",", "dtype", "=", "np", ".", "float64", ")", "\n", "weights_arr", "/=", "weights_arr", ".", "sum", "(", ")", "\n", "self", ".", "weights", "=", "plasma_utils", ".", "PlasmaArray", "(", "weights_arr", ")", "\n", "\n", "", "self", ".", "replace", "=", "replace", "\n", "\n", "assert", "size_ratio", ">", "0.0", "\n", "if", "not", "self", ".", "replace", ":", "\n", "            ", "assert", "size_ratio", "<", "1.0", "\n", "", "self", ".", "size_ratio", "=", "float", "(", "size_ratio", ")", "\n", "self", ".", "actual_size", "=", "np", ".", "ceil", "(", "len", "(", "dataset", ")", "*", "self", ".", "size_ratio", ")", ".", "astype", "(", "int", ")", "\n", "\n", "self", ".", "batch_by_size", "=", "batch_by_size", "\n", "self", ".", "seed", "=", "seed", "\n", "\n", "self", ".", "_cur_epoch", "=", "None", "\n", "self", ".", "_cur_indices", "=", "None", "\n", "\n", "self", ".", "set_epoch", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.resampling_dataset.ResamplingDataset.__getitem__": [[74, 76], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "dataset", "[", "self", ".", "_cur_indices", ".", "array", "[", "index", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.resampling_dataset.ResamplingDataset.__len__": [[77, 79], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "actual_size", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.resampling_dataset.ResamplingDataset.sizes": [[80, 85], ["isinstance"], "methods", ["None"], ["", "@", "property", "\n", "def", "sizes", "(", "self", ")", ":", "\n", "        ", "if", "isinstance", "(", "self", ".", "dataset", ".", "sizes", ",", "list", ")", ":", "\n", "            ", "return", "[", "s", "[", "self", ".", "_cur_indices", ".", "array", "]", "for", "s", "in", "self", ".", "dataset", ".", "sizes", "]", "\n", "", "return", "self", ".", "dataset", ".", "sizes", "[", "self", ".", "_cur_indices", ".", "array", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.resampling_dataset.ResamplingDataset.num_tokens": [[86, 88], ["resampling_dataset.ResamplingDataset.dataset.num_tokens"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.num_tokens"], ["", "def", "num_tokens", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "dataset", ".", "num_tokens", "(", "self", ".", "_cur_indices", ".", "array", "[", "index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.resampling_dataset.ResamplingDataset.size": [[89, 91], ["resampling_dataset.ResamplingDataset.dataset.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "size", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "dataset", ".", "size", "(", "self", ".", "_cur_indices", ".", "array", "[", "index", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.resampling_dataset.ResamplingDataset.ordered_indices": [[92, 101], ["numpy.lexsort", "numpy.arange", "numpy.arange", "len", "len"], "methods", ["None"], ["", "def", "ordered_indices", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "batch_by_size", ":", "\n", "            ", "order", "=", "[", "\n", "np", ".", "arange", "(", "len", "(", "self", ")", ")", ",", "\n", "self", ".", "sizes", ",", "\n", "]", "# No need to handle `self.shuffle == True`", "\n", "return", "np", ".", "lexsort", "(", "order", ")", "\n", "", "else", ":", "\n", "            ", "return", "np", ".", "arange", "(", "len", "(", "self", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.resampling_dataset.ResamplingDataset.prefetch": [[102, 104], ["resampling_dataset.ResamplingDataset.dataset.prefetch"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.block_pair_dataset.BlockPairDataset.prefetch"], ["", "", "def", "prefetch", "(", "self", ",", "indices", ")", ":", "\n", "        ", "self", ".", "dataset", ".", "prefetch", "(", "self", ".", "_cur_indices", ".", "array", "[", "indices", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.resampling_dataset.ResamplingDataset.set_epoch": [[105, 129], ["super().set_epoch", "numpy.random.RandomState", "plasma_utils.PlasmaArray", "numpy.random.RandomState.choice", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.denoising_dataset.DenoisingDataset.set_epoch"], ["", "def", "set_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "super", "(", ")", ".", "set_epoch", "(", "epoch", ")", "\n", "\n", "if", "epoch", "==", "self", ".", "_cur_epoch", ":", "\n", "            ", "return", "\n", "\n", "", "self", ".", "_cur_epoch", "=", "epoch", "\n", "\n", "# Generate a weighted sample of indices as a function of the", "\n", "# random seed and the current epoch.", "\n", "\n", "rng", "=", "np", ".", "random", ".", "RandomState", "(", "\n", "[", "\n", "42", ",", "# magic number", "\n", "self", ".", "seed", "%", "(", "2", "**", "32", ")", ",", "# global seed", "\n", "self", ".", "_cur_epoch", ",", "# epoch index", "\n", "]", "\n", ")", "\n", "self", ".", "_cur_indices", "=", "plasma_utils", ".", "PlasmaArray", "(", "\n", "rng", ".", "choice", "(", "\n", "len", "(", "self", ".", "dataset", ")", ",", "\n", "self", ".", "actual_size", ",", "\n", "replace", "=", "self", ".", "replace", ",", "\n", "p", "=", "(", "None", "if", "self", ".", "weights", "is", "None", "else", "self", ".", "weights", ".", "array", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.prepend_dataset.PrependDataset.__init__": [[13, 17], ["BaseWrapperDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "prepend_getter", ",", "ensure_first_token_is", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset", ")", "\n", "self", ".", "prepend_getter", "=", "prepend_getter", "\n", "self", ".", "ensure_first_token", "=", "ensure_first_token_is", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.prepend_dataset.PrependDataset.__getitem__": [[18, 29], ["isinstance", "prepend_dataset.PrependDataset.prepend_getter", "isinstance", "tuple"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "item", "=", "self", ".", "dataset", "[", "idx", "]", "\n", "is_tuple", "=", "isinstance", "(", "item", ",", "tuple", ")", "\n", "src", "=", "item", "[", "0", "]", "if", "is_tuple", "else", "item", "\n", "\n", "assert", "self", ".", "ensure_first_token", "is", "None", "or", "src", "[", "0", "]", "==", "self", ".", "ensure_first_token", "\n", "prepend_idx", "=", "self", ".", "prepend_getter", "(", "self", ".", "dataset", ",", "idx", ")", "\n", "assert", "isinstance", "(", "prepend_idx", ",", "int", ")", "\n", "src", "[", "0", "]", "=", "prepend_idx", "\n", "item", "=", "tuple", "(", "(", "src", ",", ")", "+", "item", "[", "1", ":", "]", ")", "if", "is_tuple", "else", "src", "\n", "return", "item", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.round_robin_zip_datasets.RoundRobinZipDatasets.__init__": [[26, 41], ["FairseqDataset.__init__", "isinstance", "datasets.items", "isinstance", "len", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["def", "__init__", "(", "self", ",", "datasets", ",", "eval_key", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "assert", "isinstance", "(", "datasets", ",", "OrderedDict", ")", "\n", "self", ".", "datasets", "=", "datasets", "\n", "self", ".", "eval_key", "=", "eval_key", "\n", "\n", "self", ".", "longest_dataset", "=", "None", "\n", "self", ".", "longest_dataset_key", "=", "None", "\n", "for", "key", ",", "dataset", "in", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "assert", "isinstance", "(", "dataset", ",", "FairseqDataset", ")", "\n", "if", "self", ".", "longest_dataset", "is", "None", "or", "len", "(", "dataset", ")", ">", "len", "(", "self", ".", "longest_dataset", ")", ":", "\n", "                ", "self", ".", "longest_dataset", "=", "dataset", "\n", "self", ".", "longest_dataset_key", "=", "key", "\n", "\n", "", "", "self", ".", "_ordered_indices", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.round_robin_zip_datasets.RoundRobinZipDatasets._map_index": [[42, 46], ["len"], "methods", ["None"], ["", "def", "_map_index", "(", "self", ",", "key", ",", "index", ")", ":", "\n", "        ", "assert", "self", ".", "_ordered_indices", "is", "not", "None", ",", "'Must call RoundRobinZipDatasets.ordered_indices() first'", "\n", "return", "self", ".", "_ordered_indices", "[", "key", "]", "[", "index", "%", "len", "(", "self", ".", "datasets", "[", "key", "]", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.round_robin_zip_datasets.RoundRobinZipDatasets.__getitem__": [[47, 56], ["collections.OrderedDict", "round_robin_zip_datasets.RoundRobinZipDatasets._map_index", "round_robin_zip_datasets.RoundRobinZipDatasets.datasets.items", "round_robin_zip_datasets.RoundRobinZipDatasets._map_index"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.round_robin_zip_datasets.RoundRobinZipDatasets._map_index", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.round_robin_zip_datasets.RoundRobinZipDatasets._map_index"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "if", "self", ".", "eval_key", "is", "None", ":", "\n", "            ", "return", "OrderedDict", "(", "[", "\n", "(", "key", ",", "dataset", "[", "self", ".", "_map_index", "(", "key", ",", "index", ")", "]", ")", "\n", "for", "key", ",", "dataset", "in", "self", ".", "datasets", ".", "items", "(", ")", "\n", "]", ")", "\n", "", "else", ":", "\n", "# at evaluation time it's useful to pass-through batches from a single key", "\n", "            ", "return", "self", ".", "datasets", "[", "self", ".", "eval_key", "]", "[", "self", ".", "_map_index", "(", "self", ".", "eval_key", ",", "index", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.round_robin_zip_datasets.RoundRobinZipDatasets.__len__": [[57, 59], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "longest_dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.round_robin_zip_datasets.RoundRobinZipDatasets.collater": [[60, 72], ["len", "collections.OrderedDict", "round_robin_zip_datasets.RoundRobinZipDatasets.datasets[].collater", "dataset.collater", "round_robin_zip_datasets.RoundRobinZipDatasets.datasets.items"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.collater", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.collater"], ["", "def", "collater", "(", "self", ",", "samples", ")", ":", "\n", "        ", "\"\"\"Merge a list of samples to form a mini-batch.\"\"\"", "\n", "if", "len", "(", "samples", ")", "==", "0", ":", "\n", "            ", "return", "None", "\n", "", "if", "self", ".", "eval_key", "is", "None", ":", "\n", "            ", "return", "OrderedDict", "(", "[", "\n", "(", "key", ",", "dataset", ".", "collater", "(", "[", "sample", "[", "key", "]", "for", "sample", "in", "samples", "]", ")", ")", "\n", "for", "key", ",", "dataset", "in", "self", ".", "datasets", ".", "items", "(", ")", "\n", "]", ")", "\n", "", "else", ":", "\n", "# at evaluation time it's useful to pass-through batches from a single key", "\n", "            ", "return", "self", ".", "datasets", "[", "self", ".", "eval_key", "]", ".", "collater", "(", "samples", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.round_robin_zip_datasets.RoundRobinZipDatasets.num_tokens": [[73, 79], ["max", "dataset.num_tokens", "round_robin_zip_datasets.RoundRobinZipDatasets._map_index", "round_robin_zip_datasets.RoundRobinZipDatasets.datasets.items"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.num_tokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.round_robin_zip_datasets.RoundRobinZipDatasets._map_index"], ["", "", "def", "num_tokens", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Return an example's length (number of tokens), used for batching.\"\"\"", "\n", "# TODO make it configurable whether to use max() or sum() here", "\n", "return", "max", "(", "\n", "dataset", ".", "num_tokens", "(", "self", ".", "_map_index", "(", "key", ",", "index", ")", ")", "\n", "for", "key", ",", "dataset", "in", "self", ".", "datasets", ".", "items", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.round_robin_zip_datasets.RoundRobinZipDatasets.size": [[81, 87], ["dataset.size", "round_robin_zip_datasets.RoundRobinZipDatasets._map_index", "round_robin_zip_datasets.RoundRobinZipDatasets.datasets.items"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.round_robin_zip_datasets.RoundRobinZipDatasets._map_index"], ["", "def", "size", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Return an example's size as a float or tuple. This value is used when\n        filtering a dataset with ``--max-positions``.\"\"\"", "\n", "return", "{", "\n", "key", ":", "dataset", ".", "size", "(", "self", ".", "_map_index", "(", "key", ",", "index", ")", ")", "\n", "for", "key", ",", "dataset", "in", "self", ".", "datasets", ".", "items", "(", ")", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.round_robin_zip_datasets.RoundRobinZipDatasets.ordered_indices": [[89, 100], ["numpy.arange", "collections.OrderedDict", "len", "dataset.ordered_indices", "round_robin_zip_datasets.RoundRobinZipDatasets.datasets.items"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.ordered_indices"], ["", "def", "ordered_indices", "(", "self", ")", ":", "\n", "        ", "\"\"\"Ordered indices for batching.\"\"\"", "\n", "if", "self", ".", "_ordered_indices", "is", "None", ":", "\n", "# Call the underlying dataset's ordered_indices() here, so that we", "\n", "# get the same random ordering as we would have from using the", "\n", "# underlying dataset directly.", "\n", "            ", "self", ".", "_ordered_indices", "=", "OrderedDict", "(", "[", "\n", "(", "key", ",", "dataset", ".", "ordered_indices", "(", ")", ")", "\n", "for", "key", ",", "dataset", "in", "self", ".", "datasets", ".", "items", "(", ")", "\n", "]", ")", "\n", "", "return", "np", ".", "arange", "(", "len", "(", "self", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.round_robin_zip_datasets.RoundRobinZipDatasets.supports_prefetch": [[101, 106], ["all", "getattr", "round_robin_zip_datasets.RoundRobinZipDatasets.datasets.values"], "methods", ["None"], ["", "@", "property", "\n", "def", "supports_prefetch", "(", "self", ")", ":", "\n", "        ", "return", "all", "(", "\n", "getattr", "(", "dataset", ",", "'supports_prefetch'", ",", "False", ")", "\n", "for", "dataset", "in", "self", ".", "datasets", ".", "values", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.round_robin_zip_datasets.RoundRobinZipDatasets.prefetch": [[108, 111], ["round_robin_zip_datasets.RoundRobinZipDatasets.datasets.items", "dataset.prefetch", "round_robin_zip_datasets.RoundRobinZipDatasets._map_index"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.block_pair_dataset.BlockPairDataset.prefetch", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.round_robin_zip_datasets.RoundRobinZipDatasets._map_index"], ["", "def", "prefetch", "(", "self", ",", "indices", ")", ":", "\n", "        ", "for", "key", ",", "dataset", "in", "self", ".", "datasets", ".", "items", "(", ")", ":", "\n", "            ", "dataset", ".", "prefetch", "(", "[", "self", ".", "_map_index", "(", "key", ",", "index", ")", "for", "index", "in", "indices", "]", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.denoising_dataset.DenoisingDataset.__init__": [[93, 151], ["denoising_dataset.DenoisingDataset.vocab.index", "denoising_dataset.DenoisingDataset.vocab.index", "math.exp", "range", "torch.FloatTensor", "torch.distributions.Categorical", "torch.FloatTensor.append"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.index", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.index"], ["def", "__init__", "(", "\n", "self", ",", "\n", "dataset", ",", "\n", "sizes", ",", "\n", "vocab", ",", "\n", "mask_idx", ",", "\n", "mask_whole_words", ",", "\n", "shuffle", ",", "\n", "seed", ",", "\n", "args", "\n", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "\n", "self", ".", "sizes", "=", "sizes", "\n", "\n", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "mask_idx", "=", "mask_idx", "\n", "self", ".", "mask_whole_word", "=", "mask_whole_words", "\n", "self", ".", "mask_ratio", "=", "args", ".", "mask", "\n", "self", ".", "random_ratio", "=", "args", ".", "mask_random", "\n", "self", ".", "insert_ratio", "=", "args", ".", "insert", "\n", "self", ".", "rotate_ratio", "=", "args", ".", "rotate", "\n", "self", ".", "permute_sentence_ratio", "=", "args", ".", "permute_sentences", "\n", "\n", "if", "args", ".", "bpe", "!=", "'gpt2'", ":", "\n", "            ", "self", ".", "full_stop_index", "=", "self", ".", "vocab", ".", "index", "(", "\".\"", ")", "\n", "", "else", ":", "\n", "            ", "assert", "args", ".", "bpe", "==", "'gpt2'", "\n", "self", ".", "full_stop_index", "=", "self", ".", "vocab", ".", "index", "(", "'13'", ")", "\n", "\n", "", "self", ".", "replace_length", "=", "args", ".", "replace_length", "\n", "if", "not", "self", ".", "replace_length", "in", "[", "-", "1", ",", "0", ",", "1", "]", ":", "\n", "            ", "raise", "(", "f'invalid arg: replace_length={self.replace_length}'", ")", "\n", "", "if", "not", "args", ".", "mask_length", "in", "[", "'subword'", ",", "'word'", ",", "'span-poisson'", "]", ":", "\n", "            ", "raise", "(", "f'invalid arg: mask-length={args.mask_length}'", ")", "\n", "", "if", "args", ".", "mask_length", "==", "'subword'", "and", "not", "args", ".", "replace_length", "in", "[", "0", ",", "1", "]", ":", "\n", "            ", "raise", "(", "f'if using subwords, use replace-length=1 or 0'", ")", "\n", "\n", "", "self", ".", "mask_span_distribution", "=", "None", "\n", "if", "args", ".", "mask_length", "==", "'span-poisson'", ":", "\n", "            ", "_lambda", "=", "args", ".", "poisson_lambda", "\n", "\n", "lambda_to_the_k", "=", "1", "\n", "e_to_the_minus_lambda", "=", "math", ".", "exp", "(", "-", "_lambda", ")", "\n", "k_factorial", "=", "1", "\n", "ps", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "0", ",", "128", ")", ":", "\n", "                ", "ps", ".", "append", "(", "e_to_the_minus_lambda", "*", "lambda_to_the_k", "/", "k_factorial", ")", "\n", "lambda_to_the_k", "*=", "_lambda", "\n", "k_factorial", "*=", "(", "k", "+", "1", ")", "\n", "if", "ps", "[", "-", "1", "]", "<", "0.0000001", ":", "\n", "                    ", "break", "\n", "", "", "ps", "=", "torch", ".", "FloatTensor", "(", "ps", ")", "\n", "self", ".", "mask_span_distribution", "=", "torch", ".", "distributions", ".", "Categorical", "(", "ps", ")", "\n", "\n", "", "self", ".", "epoch", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.denoising_dataset.DenoisingDataset.set_epoch": [[152, 154], ["None"], "methods", ["None"], ["", "def", "set_epoch", "(", "self", ",", "epoch", ",", "**", "unused", ")", ":", "\n", "        ", "self", ".", "epoch", "=", "epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.denoising_dataset.DenoisingDataset.__getitem__": [[155, 182], ["data_utils.numpy_seed", "denoising_dataset.DenoisingDataset.vocab.bos", "denoising_dataset.DenoisingDataset.vocab.eos", "denoising_dataset.DenoisingDataset.vocab.eos", "tokens.clone", "denoising_dataset.DenoisingDataset.permute_sentences", "denoising_dataset.DenoisingDataset.add_whole_word_mask", "denoising_dataset.DenoisingDataset.add_insertion_noise", "denoising_dataset.DenoisingDataset.add_rolling_noise", "numpy.random.random", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.numpy_seed", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.bos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.denoising_dataset.DenoisingDataset.permute_sentences", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.denoising_dataset.DenoisingDataset.add_whole_word_mask", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.denoising_dataset.DenoisingDataset.add_insertion_noise", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.denoising_dataset.DenoisingDataset.add_rolling_noise"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "with", "data_utils", ".", "numpy_seed", "(", "self", ".", "seed", ",", "self", ".", "epoch", ",", "index", ")", ":", "\n", "            ", "tokens", "=", "self", ".", "dataset", "[", "index", "]", "\n", "assert", "tokens", "[", "-", "1", "]", "==", "self", ".", "vocab", ".", "eos", "(", ")", "\n", "source", ",", "target", "=", "tokens", ",", "tokens", ".", "clone", "(", ")", "\n", "\n", "if", "self", ".", "permute_sentence_ratio", ">", "0.0", ":", "\n", "                ", "source", "=", "self", ".", "permute_sentences", "(", "source", ",", "self", ".", "permute_sentence_ratio", ")", "\n", "\n", "", "if", "self", ".", "mask_ratio", ">", "0", ":", "\n", "                ", "source", "=", "self", ".", "add_whole_word_mask", "(", "source", ",", "self", ".", "mask_ratio", ")", "\n", "\n", "", "if", "self", ".", "insert_ratio", ">", "0", ":", "\n", "                ", "source", "=", "self", ".", "add_insertion_noise", "(", "source", ",", "self", ".", "insert_ratio", ")", "\n", "\n", "", "if", "self", ".", "rotate_ratio", ">", "0.0", "and", "np", ".", "random", ".", "random", "(", ")", "<", "self", ".", "rotate_ratio", ":", "\n", "                ", "source", "=", "self", ".", "add_rolling_noise", "(", "source", ")", "\n", "\n", "", "", "assert", "(", "source", ">=", "0", ")", ".", "all", "(", ")", "\n", "assert", "(", "source", "[", "1", ":", "-", "1", "]", ">=", "1", ")", ".", "all", "(", ")", "\n", "assert", "(", "source", "<=", "len", "(", "self", ".", "vocab", ")", ")", ".", "all", "(", ")", "\n", "assert", "source", "[", "0", "]", "==", "self", ".", "vocab", ".", "bos", "(", ")", "\n", "assert", "source", "[", "-", "1", "]", "==", "self", ".", "vocab", ".", "eos", "(", ")", "\n", "return", "{", "\n", "'id'", ":", "index", ",", "\n", "'source'", ":", "source", ",", "\n", "'target'", ":", "target", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.denoising_dataset.DenoisingDataset.__len__": [[184, 186], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.denoising_dataset.DenoisingDataset.permute_sentences": [[187, 209], ["source.clone", "sentence_ends.size", "math.ceil", "torch.arange", "torch.randperm", "sentence.size", "torch.randperm", "sentence.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "permute_sentences", "(", "self", ",", "source", ",", "p", "=", "1.0", ")", ":", "\n", "        ", "full_stops", "=", "(", "source", "==", "self", ".", "full_stop_index", ")", "\n", "# Pretend it ends with a full stop so last span is a sentence", "\n", "full_stops", "[", "-", "2", "]", "=", "1", "\n", "\n", "# Tokens that are full stops, where the previous token is not", "\n", "sentence_ends", "=", "(", "full_stops", "[", "1", ":", "]", "*", "~", "full_stops", "[", ":", "-", "1", "]", ")", ".", "nonzero", "(", ")", "+", "2", "\n", "result", "=", "source", ".", "clone", "(", ")", "\n", "\n", "num_sentences", "=", "sentence_ends", ".", "size", "(", "0", ")", "\n", "num_to_permute", "=", "math", ".", "ceil", "(", "(", "num_sentences", "*", "2", "*", "p", ")", "/", "2.0", ")", "\n", "substitutions", "=", "torch", ".", "randperm", "(", "num_sentences", ")", "[", ":", "num_to_permute", "]", "\n", "ordering", "=", "torch", ".", "arange", "(", "0", ",", "num_sentences", ")", "\n", "ordering", "[", "substitutions", "]", "=", "substitutions", "[", "torch", ".", "randperm", "(", "num_to_permute", ")", "]", "\n", "\n", "# Ignore <bos> at start", "\n", "index", "=", "1", "\n", "for", "i", "in", "ordering", ":", "\n", "            ", "sentence", "=", "source", "[", "(", "sentence_ends", "[", "i", "-", "1", "]", "if", "i", ">", "0", "else", "1", ")", ":", "sentence_ends", "[", "i", "]", "]", "\n", "result", "[", "index", ":", "index", "+", "sentence", ".", "size", "(", "0", ")", "]", "=", "sentence", "\n", "index", "+=", "sentence", ".", "size", "(", "0", ")", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.denoising_dataset.DenoisingDataset.word_starts": [[210, 218], ["denoising_dataset.DenoisingDataset.mask_whole_word.gather", "torch.ones", "source.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "word_starts", "(", "self", ",", "source", ")", ":", "\n", "        ", "if", "self", ".", "mask_whole_word", "is", "not", "None", ":", "\n", "            ", "is_word_start", "=", "self", ".", "mask_whole_word", ".", "gather", "(", "0", ",", "source", ")", "\n", "", "else", ":", "\n", "            ", "is_word_start", "=", "torch", ".", "ones", "(", "source", ".", "size", "(", ")", ")", "\n", "", "is_word_start", "[", "0", "]", "=", "0", "\n", "is_word_start", "[", "-", "1", "]", "=", "0", "\n", "return", "is_word_start", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.denoising_dataset.DenoisingDataset.add_whole_word_mask": [[219, 309], ["denoising_dataset.DenoisingDataset.word_starts", "int", "denoising_dataset.DenoisingDataset.nonzero", "word_starts[].squeeze", "denoising_dataset.DenoisingDataset.size", "torch.ones", "math.ceil", "denoising_dataset.DenoisingDataset.mask_span_distribution.sample", "torch.cumsum", "torch.ones().long", "torch.FloatTensor().uniform_", "torch.randint", "denoising_dataset.DenoisingDataset.add_insertion_noise", "torch.cat", "torch.cumsum", "torch.cat.size", "denoising_dataset.DenoisingDataset.add_insertion_noise", "len", "len", "torch.cat.size", "word_starts[].squeeze.size", "word_starts[].squeeze.size", "is_word_start[].long", "word_starts[].squeeze.size", "denoising_dataset.DenoisingDataset.float().sum", "torch.ones", "torch.FloatTensor", "torch.cat.size", "torch.cat.size", "word_starts[].squeeze.size", "torch.randint", "torch.randint", "denoising_dataset.DenoisingDataset.size", "denoising_dataset.DenoisingDataset.mask_span_distribution.sample", "denoising_dataset.DenoisingDataset.size", "mask_random.sum", "len", "len", "denoising_dataset.DenoisingDataset.float", "torch.randperm", "denoising_dataset.DenoisingDataset.nonzero.size", "mask_random.sum", "mask_random.sum"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.denoising_dataset.DenoisingDataset.word_starts", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.hub_interface.BARTHubInterface.sample", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.concat_dataset.ConcatDataset.cumsum", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.denoising_dataset.DenoisingDataset.add_insertion_noise", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.concat_dataset.ConcatDataset.cumsum", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.denoising_dataset.DenoisingDataset.add_insertion_noise", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.hub_interface.BARTHubInterface.sample", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "add_whole_word_mask", "(", "self", ",", "source", ",", "p", ")", ":", "\n", "        ", "is_word_start", "=", "self", ".", "word_starts", "(", "source", ")", "\n", "num_to_mask", "=", "int", "(", "math", ".", "ceil", "(", "is_word_start", ".", "float", "(", ")", ".", "sum", "(", ")", "*", "p", ")", ")", "\n", "num_inserts", "=", "0", "\n", "if", "num_to_mask", "==", "0", ":", "\n", "            ", "return", "source", "\n", "\n", "", "if", "self", ".", "mask_span_distribution", "is", "not", "None", ":", "\n", "            ", "lengths", "=", "self", ".", "mask_span_distribution", ".", "sample", "(", "sample_shape", "=", "(", "num_to_mask", ",", ")", ")", "\n", "\n", "# Make sure we have enough to mask", "\n", "cum_length", "=", "torch", ".", "cumsum", "(", "lengths", ",", "0", ")", "\n", "while", "cum_length", "[", "-", "1", "]", "<", "num_to_mask", ":", "\n", "                ", "lengths", "=", "torch", ".", "cat", "(", "[", "lengths", ",", "self", ".", "mask_span_distribution", ".", "sample", "(", "sample_shape", "=", "(", "num_to_mask", ",", ")", ")", "]", ",", "dim", "=", "0", ")", "\n", "cum_length", "=", "torch", ".", "cumsum", "(", "lengths", ",", "0", ")", "\n", "\n", "# Trim to masking budget", "\n", "", "i", "=", "0", "\n", "while", "cum_length", "[", "i", "]", "<", "num_to_mask", ":", "\n", "                ", "i", "+=", "1", "\n", "", "lengths", "[", "i", "]", "=", "num_to_mask", "-", "(", "0", "if", "i", "==", "0", "else", "cum_length", "[", "i", "-", "1", "]", ")", "\n", "num_to_mask", "=", "i", "+", "1", "\n", "lengths", "=", "lengths", "[", ":", "num_to_mask", "]", "\n", "\n", "# Handle 0-length mask (inserts) separately", "\n", "lengths", "=", "lengths", "[", "lengths", ">", "0", "]", "\n", "num_inserts", "=", "num_to_mask", "-", "lengths", ".", "size", "(", "0", ")", "\n", "num_to_mask", "-=", "num_inserts", "\n", "if", "num_to_mask", "==", "0", ":", "\n", "                ", "return", "self", ".", "add_insertion_noise", "(", "source", ",", "num_inserts", "/", "source", ".", "size", "(", "0", ")", ")", "\n", "\n", "", "assert", "(", "lengths", ">", "0", ")", ".", "all", "(", ")", "\n", "", "else", ":", "\n", "            ", "lengths", "=", "torch", ".", "ones", "(", "(", "num_to_mask", ",", ")", ")", ".", "long", "(", ")", "\n", "", "assert", "is_word_start", "[", "-", "1", "]", "==", "0", "\n", "word_starts", "=", "is_word_start", ".", "nonzero", "(", ")", "\n", "indices", "=", "word_starts", "[", "torch", ".", "randperm", "(", "word_starts", ".", "size", "(", "0", ")", ")", "[", ":", "num_to_mask", "]", "]", ".", "squeeze", "(", "1", ")", "\n", "mask_random", "=", "torch", ".", "FloatTensor", "(", "num_to_mask", ")", ".", "uniform_", "(", ")", "<", "self", ".", "random_ratio", "\n", "\n", "source_length", "=", "source", ".", "size", "(", "0", ")", "\n", "assert", "source_length", "-", "1", "not", "in", "indices", "\n", "to_keep", "=", "torch", ".", "ones", "(", "source_length", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "is_word_start", "[", "-", "1", "]", "=", "255", "# acts as a long length, so spans don't go over the end of doc", "\n", "if", "self", ".", "replace_length", "==", "0", ":", "\n", "            ", "to_keep", "[", "indices", "]", "=", "0", "\n", "", "else", ":", "\n", "# keep index, but replace it with [MASK]", "\n", "            ", "source", "[", "indices", "]", "=", "self", ".", "mask_idx", "\n", "source", "[", "indices", "[", "mask_random", "]", "]", "=", "torch", ".", "randint", "(", "1", ",", "len", "(", "self", ".", "vocab", ")", ",", "size", "=", "(", "mask_random", ".", "sum", "(", ")", ",", ")", ")", "\n", "\n", "", "if", "self", ".", "mask_span_distribution", "is", "not", "None", ":", "\n", "            ", "assert", "len", "(", "lengths", ".", "size", "(", ")", ")", "==", "1", "\n", "assert", "lengths", ".", "size", "(", ")", "==", "indices", ".", "size", "(", ")", "\n", "lengths", "-=", "1", "\n", "while", "indices", ".", "size", "(", "0", ")", ">", "0", ":", "\n", "                ", "assert", "lengths", ".", "size", "(", ")", "==", "indices", ".", "size", "(", ")", "\n", "lengths", "-=", "is_word_start", "[", "indices", "+", "1", "]", ".", "long", "(", ")", "\n", "uncompleted", "=", "lengths", ">=", "0", "\n", "indices", "=", "indices", "[", "uncompleted", "]", "+", "1", "\n", "mask_random", "=", "mask_random", "[", "uncompleted", "]", "\n", "lengths", "=", "lengths", "[", "uncompleted", "]", "\n", "if", "self", ".", "replace_length", "!=", "-", "1", ":", "\n", "# delete token", "\n", "                    ", "to_keep", "[", "indices", "]", "=", "0", "\n", "", "else", ":", "\n", "# keep index, but replace it with [MASK]", "\n", "                    ", "source", "[", "indices", "]", "=", "self", ".", "mask_idx", "\n", "source", "[", "indices", "[", "mask_random", "]", "]", "=", "torch", ".", "randint", "(", "1", ",", "len", "(", "self", ".", "vocab", ")", ",", "size", "=", "(", "mask_random", ".", "sum", "(", ")", ",", ")", ")", "\n", "", "", "", "else", ":", "\n", "# A bit faster when all lengths are 1", "\n", "            ", "while", "indices", ".", "size", "(", "0", ")", ">", "0", ":", "\n", "                ", "uncompleted", "=", "is_word_start", "[", "indices", "+", "1", "]", "==", "0", "\n", "indices", "=", "indices", "[", "uncompleted", "]", "+", "1", "\n", "mask_random", "=", "mask_random", "[", "uncompleted", "]", "\n", "if", "self", ".", "replace_length", "!=", "-", "1", ":", "\n", "# delete token", "\n", "                    ", "to_keep", "[", "indices", "]", "=", "0", "\n", "", "else", ":", "\n", "# keep index, but replace it with [MASK]", "\n", "                    ", "source", "[", "indices", "]", "=", "self", ".", "mask_idx", "\n", "source", "[", "indices", "[", "mask_random", "]", "]", "=", "torch", ".", "randint", "(", "1", ",", "len", "(", "self", ".", "vocab", ")", ",", "size", "=", "(", "mask_random", ".", "sum", "(", ")", ",", ")", ")", "\n", "\n", "", "assert", "source_length", "-", "1", "not", "in", "indices", "\n", "\n", "", "", "source", "=", "source", "[", "to_keep", "]", "\n", "\n", "if", "num_inserts", ">", "0", ":", "\n", "            ", "source", "=", "self", ".", "add_insertion_noise", "(", "source", ",", "num_inserts", "/", "source", ".", "size", "(", "0", ")", ")", "\n", "\n", "", "return", "source", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.denoising_dataset.DenoisingDataset.add_permuted_noise": [[310, 316], ["len", "math.ceil", "torch.randperm", "torch.randperm"], "methods", ["None"], ["", "def", "add_permuted_noise", "(", "self", ",", "tokens", ",", "p", ")", ":", "\n", "        ", "num_words", "=", "len", "(", "tokens", ")", "\n", "num_to_permute", "=", "math", ".", "ceil", "(", "(", "(", "num_words", "*", "2", ")", "*", "p", ")", "/", "2.0", ")", "\n", "substitutions", "=", "torch", ".", "randperm", "(", "num_words", "-", "2", ")", "[", ":", "num_to_permute", "]", "+", "1", "\n", "tokens", "[", "substitutions", "]", "=", "tokens", "[", "substitutions", "[", "torch", ".", "randperm", "(", "num_to_permute", ")", "]", "]", "\n", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.denoising_dataset.DenoisingDataset.add_rolling_noise": [[317, 324], ["numpy.random.randint", "torch.cat", "max", "torch.cat.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "add_rolling_noise", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "offset", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "max", "(", "1", ",", "tokens", ".", "size", "(", "-", "1", ")", "-", "1", ")", "+", "1", ")", "\n", "tokens", "=", "torch", ".", "cat", "(", "\n", "(", "tokens", "[", "0", ":", "1", "]", ",", "tokens", "[", "offset", ":", "-", "1", "]", ",", "tokens", "[", "1", ":", "offset", "]", ",", "tokens", "[", "-", "1", ":", "]", ")", ",", "\n", "dim", "=", "0", ",", "\n", ")", "\n", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.denoising_dataset.DenoisingDataset.add_insertion_noise": [[325, 345], ["len", "int", "torch.zeros", "torch.LongTensor().fill_", "int", "torch.randint", "math.ceil", "math.ceil", "torch.randperm", "torch.LongTensor", "len", "len"], "methods", ["None"], ["", "def", "add_insertion_noise", "(", "self", ",", "tokens", ",", "p", ")", ":", "\n", "        ", "if", "p", "==", "0.0", ":", "\n", "            ", "return", "tokens", "\n", "\n", "", "num_tokens", "=", "len", "(", "tokens", ")", "\n", "n", "=", "int", "(", "math", ".", "ceil", "(", "num_tokens", "*", "p", ")", ")", "\n", "\n", "noise_indices", "=", "torch", ".", "randperm", "(", "num_tokens", "+", "n", "-", "2", ")", "[", ":", "n", "]", "+", "1", "\n", "noise_mask", "=", "torch", ".", "zeros", "(", "size", "=", "(", "num_tokens", "+", "n", ",", ")", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "noise_mask", "[", "noise_indices", "]", "=", "1", "\n", "result", "=", "torch", ".", "LongTensor", "(", "n", "+", "len", "(", "tokens", ")", ")", ".", "fill_", "(", "-", "1", ")", "\n", "\n", "num_random", "=", "int", "(", "math", ".", "ceil", "(", "n", "*", "self", ".", "random_ratio", ")", ")", "\n", "result", "[", "noise_indices", "[", "num_random", ":", "]", "]", "=", "self", ".", "mask_idx", "\n", "result", "[", "noise_indices", "[", ":", "num_random", "]", "]", "=", "torch", ".", "randint", "(", "low", "=", "1", ",", "high", "=", "len", "(", "self", ".", "vocab", ")", ",", "size", "=", "(", "num_random", ",", ")", ")", "\n", "\n", "result", "[", "~", "noise_mask", "]", "=", "tokens", "\n", "\n", "assert", "(", "result", ">=", "0", ")", ".", "all", "(", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.denoising_dataset.DenoisingDataset.collater": [[346, 354], ["denoising_dataset.collate", "denoising_dataset.DenoisingDataset.vocab.pad", "denoising_dataset.DenoisingDataset.vocab.eos"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.denoising_dataset.collate", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos"], ["", "def", "collater", "(", "self", ",", "samples", ")", ":", "\n", "        ", "\"\"\"Merge a list of samples to form a mini-batch.\n        Args:\n            samples (List[dict]): samples to collate\n        Returns:\n            dict: a mini-batch of data\n        \"\"\"", "\n", "return", "collate", "(", "samples", ",", "self", ".", "vocab", ".", "pad", "(", ")", ",", "self", ".", "vocab", ".", "eos", "(", ")", ",", "self", ".", "vocab", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.denoising_dataset.DenoisingDataset.num_tokens": [[355, 359], ["None"], "methods", ["None"], ["", "def", "num_tokens", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Return the number of tokens in a sample. This value is used to\n        enforce ``--max-tokens`` during batching.\"\"\"", "\n", "return", "self", ".", "sizes", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.denoising_dataset.DenoisingDataset.size": [[360, 364], ["None"], "methods", ["None"], ["", "def", "size", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Return an example's size as a float or tuple. This value is used when\n        filtering a dataset with ``--max-positions``.\"\"\"", "\n", "return", "self", ".", "sizes", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.denoising_dataset.DenoisingDataset.ordered_indices": [[365, 373], ["numpy.random.permutation", "numpy.arange", "len", "len", "numpy.argsort"], "methods", ["None"], ["", "def", "ordered_indices", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return an ordered list of indices. Batches will be constructed based\n        on this order.\"\"\"", "\n", "if", "self", ".", "shuffle", ":", "\n", "            ", "indices", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "self", ")", ")", "\n", "", "else", ":", "\n", "            ", "indices", "=", "np", ".", "arange", "(", "len", "(", "self", ")", ")", "\n", "", "return", "indices", "[", "np", ".", "argsort", "(", "self", ".", "sizes", "[", "indices", "]", ",", "kind", "=", "'mergesort'", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.denoising_dataset.DenoisingDataset.prefetch": [[374, 377], ["denoising_dataset.DenoisingDataset.src.prefetch", "denoising_dataset.DenoisingDataset.tgt.prefetch"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.block_pair_dataset.BlockPairDataset.prefetch", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.block_pair_dataset.BlockPairDataset.prefetch"], ["", "def", "prefetch", "(", "self", ",", "indices", ")", ":", "\n", "        ", "self", ".", "src", ".", "prefetch", "(", "indices", ")", "\n", "self", ".", "tgt", ".", "prefetch", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.denoising_dataset.DenoisingDataset.supports_prefetch": [[378, 385], ["hasattr", "hasattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "supports_prefetch", "(", "self", ")", ":", "\n", "        ", "return", "(", "\n", "hasattr", "(", "self", ".", "src", ",", "'supports_prefetch'", ")", "\n", "and", "self", ".", "src", ".", "supports_prefetch", "\n", "and", "hasattr", "(", "self", ".", "tgt", ",", "'supports_prefetch'", ")", "\n", "and", "self", ".", "tgt", ".", "supports_prefetch", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.denoising_dataset.collate": [[13, 73], ["torch.LongTensor", "denoising_dataset.collate.merge"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.translation_moe.score.merge"], ["def", "collate", "(", "\n", "samples", ",", "\n", "pad_idx", ",", "\n", "eos_idx", ",", "\n", "vocab", ",", "\n", "left_pad_source", "=", "False", ",", "\n", "left_pad_target", "=", "False", ",", "\n", "input_feeding", "=", "True", ",", "\n", ")", ":", "\n", "    ", "assert", "input_feeding", "\n", "if", "len", "(", "samples", ")", "==", "0", ":", "\n", "        ", "return", "{", "}", "\n", "\n", "", "def", "merge", "(", "key", ",", "left_pad", ",", "move_eos_to_beginning", "=", "False", ")", ":", "\n", "        ", "return", "data_utils", ".", "collate_tokens", "(", "\n", "[", "s", "[", "key", "]", "for", "s", "in", "samples", "]", ",", "\n", "pad_idx", ",", "eos_idx", ",", "left_pad", ",", "move_eos_to_beginning", ",", "\n", ")", "\n", "\n", "", "id", "=", "torch", ".", "LongTensor", "(", "[", "s", "[", "'id'", "]", "for", "s", "in", "samples", "]", ")", "\n", "src_tokens", "=", "merge", "(", "'source'", ",", "left_pad", "=", "left_pad_source", ")", "\n", "# sort by descending source length", "\n", "src_lengths", "=", "torch", ".", "LongTensor", "(", "[", "s", "[", "'source'", "]", ".", "numel", "(", ")", "for", "s", "in", "samples", "]", ")", "\n", "src_lengths", ",", "sort_order", "=", "src_lengths", ".", "sort", "(", "descending", "=", "True", ")", "\n", "id", "=", "id", ".", "index_select", "(", "0", ",", "sort_order", ")", "\n", "src_tokens", "=", "src_tokens", ".", "index_select", "(", "0", ",", "sort_order", ")", "\n", "\n", "prev_output_tokens", "=", "None", "\n", "target", "=", "None", "\n", "if", "samples", "[", "0", "]", ".", "get", "(", "'target'", ",", "None", ")", "is", "not", "None", ":", "\n", "        ", "target", "=", "merge", "(", "'target'", ",", "left_pad", "=", "left_pad_target", ")", "\n", "target", "=", "target", ".", "index_select", "(", "0", ",", "sort_order", ")", "\n", "ntokens", "=", "sum", "(", "len", "(", "s", "[", "'target'", "]", ")", "for", "s", "in", "samples", ")", "\n", "\n", "if", "input_feeding", ":", "\n", "# we create a shifted version of targets for feeding the", "\n", "# previous output token(s) into the next decoder step", "\n", "            ", "prev_output_tokens", "=", "merge", "(", "\n", "'target'", ",", "\n", "left_pad", "=", "left_pad_target", ",", "\n", "move_eos_to_beginning", "=", "True", ",", "\n", ")", "\n", "prev_output_tokens", "=", "prev_output_tokens", ".", "index_select", "(", "0", ",", "sort_order", ")", "\n", "", "", "else", ":", "\n", "        ", "ntokens", "=", "sum", "(", "len", "(", "s", "[", "'source'", "]", ")", "for", "s", "in", "samples", ")", "\n", "\n", "", "batch", "=", "{", "\n", "'id'", ":", "id", ",", "\n", "'ntokens'", ":", "ntokens", ",", "\n", "'net_input'", ":", "{", "\n", "'src_tokens'", ":", "src_tokens", ",", "\n", "'src_lengths'", ":", "src_lengths", ",", "\n", "}", ",", "\n", "'target'", ":", "target", ",", "\n", "'nsentences'", ":", "samples", "[", "0", "]", "[", "'source'", "]", ".", "size", "(", "0", ")", ",", "\n", "}", "\n", "if", "prev_output_tokens", "is", "not", "None", ":", "\n", "        ", "batch", "[", "'net_input'", "]", "[", "'prev_output_tokens'", "]", "=", "prev_output_tokens", "\n", "\n", "", "return", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.pad_dataset.PadDataset.__init__": [[13, 17], ["BaseWrapperDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "pad_idx", ",", "left_pad", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset", ")", "\n", "self", ".", "pad_idx", "=", "pad_idx", "\n", "self", ".", "left_pad", "=", "left_pad", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.pad_dataset.PadDataset.collater": [[18, 20], ["fairseq.data.data_utils.collate_tokens"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.collate_tokens"], ["", "def", "collater", "(", "self", ",", "samples", ")", ":", "\n", "        ", "return", "data_utils", ".", "collate_tokens", "(", "samples", ",", "self", ".", "pad_idx", ",", "left_pad", "=", "self", ".", "left_pad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.pad_dataset.LeftPadDataset.__init__": [[24, 26], ["pad_dataset.PadDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "pad_idx", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset", ",", "pad_idx", ",", "left_pad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.pad_dataset.RightPadDataset.__init__": [[30, 32], ["pad_dataset.PadDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "pad_idx", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "dataset", ",", "pad_idx", ",", "left_pad", "=", "False", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.PretrainedWav2VecModel.__init__": [[37, 47], ["torch.nn.Module.__init__", "torch.load", "fairseq.models.wav2vec.Wav2VecModel.build_model", "fairseq.models.wav2vec.Wav2VecModel.build_model.load_state_dict", "fairseq.models.wav2vec.Wav2VecModel.build_model.eval"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.load", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.build_model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.load_state_dict", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval"], ["    ", "def", "__init__", "(", "self", ",", "fname", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "checkpoint", "=", "torch", ".", "load", "(", "fname", ")", "\n", "self", ".", "args", "=", "checkpoint", "[", "\"args\"", "]", "\n", "model", "=", "Wav2VecModel", ".", "build_model", "(", "self", ".", "args", ",", "None", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "\"model\"", "]", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "self", ".", "model", "=", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.PretrainedWav2VecModel.forward": [[48, 55], ["torch.no_grad", "wav2vec_featurize.PretrainedWav2VecModel.model.feature_extractor", "isinstance", "wav2vec_featurize.PretrainedWav2VecModel.model.feature_aggregator"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "z", "=", "self", ".", "model", ".", "feature_extractor", "(", "x", ")", "\n", "if", "isinstance", "(", "z", ",", "tuple", ")", ":", "\n", "                ", "z", "=", "z", "[", "0", "]", "\n", "", "c", "=", "self", ".", "model", ".", "feature_aggregator", "(", "z", ")", "\n", "", "return", "z", ",", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.EmbeddingWriterConfig.__init__": [[59, 81], ["argparse.ArgumentParser.__init__", "wav2vec_featurize.EmbeddingWriterConfig.add_argument", "wav2vec_featurize.EmbeddingWriterConfig.add_argument", "wav2vec_featurize.EmbeddingWriterConfig.add_argument", "wav2vec_featurize.EmbeddingWriterConfig.add_argument", "wav2vec_featurize.EmbeddingWriterConfig.add_argument", "wav2vec_featurize.EmbeddingWriterConfig.add_argument", "wav2vec_featurize.EmbeddingWriterConfig.add_argument", "wav2vec_featurize.EmbeddingWriterConfig.add_argument"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\"Pre-compute embeddings for wav2letter++ datasets\"", ")", "\n", "\n", "kwargs", "=", "{", "\"action\"", ":", "\"store\"", ",", "\"type\"", ":", "str", ",", "\"required\"", ":", "True", "}", "\n", "\n", "self", ".", "add_argument", "(", "\"--input\"", ",", "\"-i\"", ",", "\n", "help", "=", "\"Input Directory\"", ",", "**", "kwargs", ")", "\n", "self", ".", "add_argument", "(", "\"--output\"", ",", "\"-o\"", ",", "\n", "help", "=", "\"Output Directory\"", ",", "**", "kwargs", ")", "\n", "self", ".", "add_argument", "(", "\"--model\"", ",", "\n", "help", "=", "\"Path to model checkpoint\"", ",", "**", "kwargs", ")", "\n", "self", ".", "add_argument", "(", "\"--split\"", ",", "\n", "help", "=", "\"Dataset Splits\"", ",", "nargs", "=", "'+'", ",", "**", "kwargs", ")", "\n", "self", ".", "add_argument", "(", "\"--ext\"", ",", "default", "=", "\"wav\"", ",", "required", "=", "False", ",", "\n", "help", "=", "\"Audio file extension\"", ")", "\n", "\n", "self", ".", "add_argument", "(", "\"--no-copy-labels\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Do not copy label files. Useful for large datasets, use --targetdir in wav2letter then.\"", ")", "\n", "self", ".", "add_argument", "(", "\"--use-feat\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Use the feature vector ('z') instead of context vector ('c') for features\"", ")", "\n", "self", ".", "add_argument", "(", "\"--gpu\"", ",", "\n", "help", "=", "\"GPU to use\"", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.Prediction.__init__": [[86, 89], ["PretrainedWav2VecModel().cuda", "wav2vec_featurize.PretrainedWav2VecModel"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "fname", ",", "gpu", "=", "0", ")", ":", "\n", "        ", "self", ".", "gpu", "=", "gpu", "\n", "self", ".", "model", "=", "PretrainedWav2VecModel", "(", "fname", ")", ".", "cuda", "(", "gpu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.Prediction.__call__": [[90, 96], ["torch.from_numpy().float().cuda", "torch.no_grad", "wav2vec_featurize.Prediction.model", "z.squeeze().cpu().numpy", "c.squeeze().cpu().numpy", "torch.from_numpy().float", "torch.from_numpy().float().cuda.unsqueeze", "z.squeeze().cpu", "c.squeeze().cpu", "torch.from_numpy", "z.squeeze", "c.squeeze"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.model"], ["", "def", "__call__", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "torch", ".", "from_numpy", "(", "x", ")", ".", "float", "(", ")", ".", "cuda", "(", "self", ".", "gpu", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "z", ",", "c", "=", "self", ".", "model", "(", "x", ".", "unsqueeze", "(", "0", ")", ")", "\n", "\n", "", "return", "z", ".", "squeeze", "(", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "c", ".", "squeeze", "(", "0", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.__init__": [[101, 104], ["os.makedirs", "os.path.dirname"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "fname", ")", ":", "\n", "        ", "self", ".", "fname", "=", "fname", "\n", "os", ".", "makedirs", "(", "os", ".", "path", ".", "dirname", "(", "self", ".", "fname", ")", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write": [[105, 112], ["h5py.File", "data.T.flatten.T.flatten.T.flatten", "numpy.array"], "methods", ["None"], ["", "def", "write", "(", "self", ",", "data", ")", ":", "\n", "        ", "channel", ",", "T", "=", "data", ".", "shape", "\n", "\n", "with", "h5py", ".", "File", "(", "self", ".", "fname", ",", "\"w\"", ")", "as", "out_ds", ":", "\n", "            ", "data", "=", "data", ".", "T", ".", "flatten", "(", ")", "\n", "out_ds", "[", "\"features\"", "]", "=", "data", "\n", "out_ds", "[", "\"info\"", "]", "=", "np", ".", "array", "(", "[", "16e3", "//", "160", ",", "T", ",", "channel", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.EmbeddingDatasetWriter.__init__": [[126, 148], ["os.path.exists", "wav2vec_featurize.Prediction", "os.path.exists"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists"], ["def", "__init__", "(", "self", ",", "input_root", ",", "output_root", ",", "split", ",", "\n", "model_fname", ",", "\n", "extension", "=", "\"wav\"", ",", "\n", "gpu", "=", "0", ",", "\n", "verbose", "=", "False", ",", "\n", "use_feat", "=", "False", ",", "\n", ")", ":", "\n", "\n", "        ", "assert", "os", ".", "path", ".", "exists", "(", "model_fname", ")", "\n", "\n", "self", ".", "model_fname", "=", "model_fname", "\n", "self", ".", "model", "=", "Prediction", "(", "self", ".", "model_fname", ",", "gpu", ")", "\n", "\n", "self", ".", "input_root", "=", "input_root", "\n", "self", ".", "output_root", "=", "output_root", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "verbose", "=", "verbose", "\n", "self", ".", "extension", "=", "extension", "\n", "self", ".", "use_feat", "=", "use_feat", "\n", "\n", "assert", "os", ".", "path", ".", "exists", "(", "self", ".", "input_path", ")", ",", "\"Input path '{}' does not exist\"", ".", "format", "(", "self", ".", "input_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.EmbeddingDatasetWriter._progress": [[149, 153], ["tqdm.tqdm"], "methods", ["None"], ["", "def", "_progress", "(", "self", ",", "iterable", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "verbose", ":", "\n", "            ", "return", "tqdm", ".", "tqdm", "(", "iterable", ",", "**", "kwargs", ")", "\n", "", "return", "iterable", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.EmbeddingDatasetWriter.require_output_path": [[154, 157], ["wav2vec_featurize.EmbeddingDatasetWriter.get_output_path", "os.makedirs"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.EmbeddingDatasetWriter.get_output_path"], ["", "def", "require_output_path", "(", "self", ",", "fname", "=", "None", ")", ":", "\n", "        ", "path", "=", "self", ".", "get_output_path", "(", "fname", ")", "\n", "os", ".", "makedirs", "(", "path", ",", "exist_ok", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.EmbeddingDatasetWriter.input_path": [[158, 161], ["wav2vec_featurize.EmbeddingDatasetWriter.get_input_path"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.EmbeddingDatasetWriter.get_input_path"], ["", "@", "property", "\n", "def", "input_path", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "get_input_path", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.EmbeddingDatasetWriter.output_path": [[162, 165], ["wav2vec_featurize.EmbeddingDatasetWriter.get_output_path"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.EmbeddingDatasetWriter.get_output_path"], ["", "@", "property", "\n", "def", "output_path", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "get_output_path", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.EmbeddingDatasetWriter.get_input_path": [[166, 170], ["os.path.join", "os.path.join", "wav2vec_featurize.EmbeddingDatasetWriter.get_input_path"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.EmbeddingDatasetWriter.get_input_path"], ["", "def", "get_input_path", "(", "self", ",", "fname", "=", "None", ")", ":", "\n", "        ", "if", "fname", "is", "None", ":", "\n", "            ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "input_root", ",", "self", ".", "split", ")", "\n", "", "return", "os", ".", "path", ".", "join", "(", "self", ".", "get_input_path", "(", ")", ",", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.EmbeddingDatasetWriter.get_output_path": [[171, 175], ["os.path.join", "os.path.join", "wav2vec_featurize.EmbeddingDatasetWriter.get_output_path"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.EmbeddingDatasetWriter.get_output_path"], ["", "def", "get_output_path", "(", "self", ",", "fname", "=", "None", ")", ":", "\n", "        ", "if", "fname", "is", "None", ":", "\n", "            ", "return", "os", ".", "path", ".", "join", "(", "self", ".", "output_root", ",", "self", ".", "split", ")", "\n", "", "return", "os", ".", "path", ".", "join", "(", "self", ".", "get_output_path", "(", ")", ",", "fname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.EmbeddingDatasetWriter.copy_labels": [[176, 182], ["wav2vec_featurize.EmbeddingDatasetWriter.require_output_path", "list", "tqdm.tqdm", "filter", "shutil.copy", "glob.glob", "wav2vec_featurize.EmbeddingDatasetWriter.get_input_path"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.EmbeddingDatasetWriter.require_output_path", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.copy", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.EmbeddingDatasetWriter.get_input_path"], ["", "def", "copy_labels", "(", "self", ")", ":", "\n", "        ", "self", ".", "require_output_path", "(", ")", "\n", "\n", "labels", "=", "list", "(", "filter", "(", "lambda", "x", ":", "self", ".", "extension", "not", "in", "x", ",", "glob", ".", "glob", "(", "self", ".", "get_input_path", "(", "\"*\"", ")", ")", ")", ")", "\n", "for", "fname", "in", "tqdm", ".", "tqdm", "(", "labels", ")", ":", "\n", "            ", "copy", "(", "fname", ",", "self", ".", "output_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.EmbeddingDatasetWriter.input_fnames": [[183, 186], ["sorted", "glob.glob", "wav2vec_featurize.EmbeddingDatasetWriter.get_input_path"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.EmbeddingDatasetWriter.get_input_path"], ["", "", "@", "property", "\n", "def", "input_fnames", "(", "self", ")", ":", "\n", "        ", "return", "sorted", "(", "glob", ".", "glob", "(", "self", ".", "get_input_path", "(", "\"*.{}\"", ".", "format", "(", "self", ".", "extension", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.EmbeddingDatasetWriter.__len__": [[187, 189], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "input_fnames", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.EmbeddingDatasetWriter.write_features": [[190, 203], ["map", "wav2vec_featurize.EmbeddingDatasetWriter._progress", "map", "zip", "wav2vec_featurize.read_audio", "wav2vec_featurize.EmbeddingDatasetWriter.model", "wav2vec_featurize.H5Writer", "wav2vec_featurize.H5Writer.write", "os.path.join", "len", "x.replace"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.EmbeddingDatasetWriter._progress", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.read_audio", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write"], ["", "def", "write_features", "(", "self", ")", ":", "\n", "\n", "        ", "paths", "=", "self", ".", "input_fnames", "\n", "\n", "fnames_context", "=", "map", "(", "lambda", "x", ":", "os", ".", "path", ".", "join", "(", "self", ".", "output_path", ",", "x", ".", "replace", "(", "\".\"", "+", "self", ".", "extension", ",", "\".h5context\"", ")", ")", ",", "map", "(", "os", ".", "path", ".", "basename", ",", "paths", ")", ")", "\n", "\n", "for", "name", ",", "target_fname", "in", "self", ".", "_progress", "(", "zip", "(", "paths", ",", "fnames_context", ")", ",", "total", "=", "len", "(", "self", ")", ")", ":", "\n", "            ", "wav", ",", "sr", "=", "read_audio", "(", "name", ")", "\n", "z", ",", "c", "=", "self", ".", "model", "(", "wav", ")", "\n", "feat", "=", "z", "if", "self", ".", "use_feat", "else", "c", "\n", "writer", "=", "H5Writer", "(", "target_fname", ")", "\n", "writer", ".", "write", "(", "feat", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.EmbeddingDatasetWriter.__repr__": [[204, 208], ["len"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "\n", "        ", "return", "\"EmbeddingDatasetWriter ({n_files} files)\\n\\tinput:\\t{input_root}\\n\\toutput:\\t{output_root}\\n\\tsplit:\\t{split})\"", ".", "format", "(", "\n", "n_files", "=", "len", "(", "self", ")", ",", "**", "self", ".", "__dict__", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.read_audio": [[26, 33], ["soundfile.read"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.dataset_reader.DatasetReader.read"], ["def", "read_audio", "(", "fname", ")", ":", "\n", "    ", "\"\"\" Load an audio file and return PCM along with the sample rate \"\"\"", "\n", "\n", "wav", ",", "sr", "=", "sf", ".", "read", "(", "fname", ")", "\n", "assert", "sr", "==", "16e3", "\n", "\n", "return", "wav", ",", "16e3", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.shard_docs.main": [[15, 49], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "open", "contextlib.ExitStack", "shard_docs.main.output_doc"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'input'", ")", "\n", "parser", ".", "add_argument", "(", "'--num-shards'", ",", "type", "=", "int", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "assert", "args", ".", "num_shards", "is", "not", "None", "and", "args", ".", "num_shards", ">", "1", "\n", "\n", "with", "open", "(", "args", ".", "input", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "h", ":", "\n", "        ", "with", "contextlib", ".", "ExitStack", "(", ")", "as", "stack", ":", "\n", "            ", "outputs", "=", "[", "\n", "stack", ".", "enter_context", "(", "open", "(", "args", ".", "input", "+", "\".shard\"", "+", "str", "(", "i", ")", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", ")", "\n", "for", "i", "in", "range", "(", "args", ".", "num_shards", ")", "\n", "]", "\n", "\n", "doc", "=", "[", "]", "\n", "first_doc", "=", "[", "True", "]", "*", "args", ".", "num_shards", "\n", "\n", "def", "output_doc", "(", "i", ")", ":", "\n", "                ", "if", "not", "first_doc", "[", "i", "]", ":", "\n", "                    ", "outputs", "[", "i", "]", ".", "write", "(", "\"\\n\"", ")", "\n", "", "first_doc", "[", "i", "]", "=", "False", "\n", "for", "line", "in", "doc", ":", "\n", "                    ", "outputs", "[", "i", "]", ".", "write", "(", "line", ")", "\n", "", "doc", ".", "clear", "(", ")", "\n", "\n", "", "num_docs", "=", "0", "\n", "for", "line", "in", "h", ":", "\n", "                ", "if", "line", ".", "strip", "(", ")", "==", "\"\"", ":", "# empty line indicates new document", "\n", "                    ", "output_doc", "(", "num_docs", "%", "args", ".", "num_shards", ")", "\n", "num_docs", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "doc", ".", "append", "(", "line", ")", "\n", "", "", "output_doc", "(", "num_docs", "%", "args", ".", "num_shards", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.spm_encode.main": [[17, 96], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "sentencepiece.SentencePieceProcessor", "spm.SentencePieceProcessor.Load", "len", "len", "contextlib.ExitStack", "enumerate", "print", "print", "spm.SentencePieceProcessor.EncodeAsPieces", "encode.strip", "zip", "list", "list", "stack.enter_context", "stack.enter_context", "len", "spm_encode.main.encode"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.encode"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "required", "=", "True", ",", "\n", "help", "=", "\"sentencepiece model to use for encoding\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--inputs\"", ",", "nargs", "=", "\"+\"", ",", "default", "=", "[", "'-'", "]", ",", "\n", "help", "=", "\"input files to filter/encode\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--outputs\"", ",", "nargs", "=", "\"+\"", ",", "default", "=", "[", "'-'", "]", ",", "\n", "help", "=", "\"path to save encoded outputs\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--output_format\"", ",", "choices", "=", "[", "\"piece\"", ",", "\"id\"", "]", ",", "default", "=", "\"piece\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--min-len\"", ",", "type", "=", "int", ",", "metavar", "=", "\"N\"", ",", "\n", "help", "=", "\"filter sentence pairs with fewer than N tokens\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--max-len\"", ",", "type", "=", "int", ",", "metavar", "=", "\"N\"", ",", "\n", "help", "=", "\"filter sentence pairs with more than N tokens\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "assert", "len", "(", "args", ".", "inputs", ")", "==", "len", "(", "args", ".", "outputs", ")", ",", "\"number of input and output paths should match\"", "\n", "\n", "sp", "=", "spm", ".", "SentencePieceProcessor", "(", ")", "\n", "sp", ".", "Load", "(", "args", ".", "model", ")", "\n", "\n", "if", "args", ".", "output_format", "==", "\"piece\"", ":", "\n", "        ", "def", "encode", "(", "l", ")", ":", "\n", "            ", "return", "sp", ".", "EncodeAsPieces", "(", "l", ")", "\n", "", "", "elif", "args", ".", "output_format", "==", "\"id\"", ":", "\n", "        ", "def", "encode", "(", "l", ")", ":", "\n", "            ", "return", "list", "(", "map", "(", "str", ",", "sp", ".", "EncodeAsIds", "(", "l", ")", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "if", "args", ".", "min_len", "is", "not", "None", "or", "args", ".", "max_len", "is", "not", "None", ":", "\n", "        ", "def", "valid", "(", "line", ")", ":", "\n", "            ", "return", "(", "\n", "(", "args", ".", "min_len", "is", "None", "or", "len", "(", "line", ")", ">=", "args", ".", "min_len", ")", "\n", "and", "(", "args", ".", "max_len", "is", "None", "or", "len", "(", "line", ")", "<=", "args", ".", "max_len", ")", "\n", ")", "\n", "", "", "else", ":", "\n", "        ", "def", "valid", "(", "lines", ")", ":", "\n", "            ", "return", "True", "\n", "\n", "", "", "with", "contextlib", ".", "ExitStack", "(", ")", "as", "stack", ":", "\n", "        ", "inputs", "=", "[", "\n", "stack", ".", "enter_context", "(", "open", "(", "input", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", ")", "if", "input", "!=", "\"-\"", "else", "sys", ".", "stdin", "\n", "for", "input", "in", "args", ".", "inputs", "\n", "]", "\n", "outputs", "=", "[", "\n", "stack", ".", "enter_context", "(", "open", "(", "output", ",", "\"w\"", ",", "encoding", "=", "\"utf-8\"", ")", ")", "if", "output", "!=", "\"-\"", "else", "sys", ".", "stdout", "\n", "for", "output", "in", "args", ".", "outputs", "\n", "]", "\n", "\n", "stats", "=", "{", "\n", "\"num_empty\"", ":", "0", ",", "\n", "\"num_filtered\"", ":", "0", ",", "\n", "}", "\n", "\n", "def", "encode_line", "(", "line", ")", ":", "\n", "            ", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "len", "(", "line", ")", ">", "0", ":", "\n", "                ", "line", "=", "encode", "(", "line", ")", "\n", "if", "valid", "(", "line", ")", ":", "\n", "                    ", "return", "line", "\n", "", "else", ":", "\n", "                    ", "stats", "[", "\"num_filtered\"", "]", "+=", "1", "\n", "", "", "else", ":", "\n", "                ", "stats", "[", "\"num_empty\"", "]", "+=", "1", "\n", "", "return", "None", "\n", "\n", "", "for", "i", ",", "lines", "in", "enumerate", "(", "zip", "(", "*", "inputs", ")", ",", "start", "=", "1", ")", ":", "\n", "            ", "enc_lines", "=", "list", "(", "map", "(", "encode_line", ",", "lines", ")", ")", "\n", "if", "not", "any", "(", "enc_line", "is", "None", "for", "enc_line", "in", "enc_lines", ")", ":", "\n", "                ", "for", "enc_line", ",", "output_h", "in", "zip", "(", "enc_lines", ",", "outputs", ")", ":", "\n", "                    ", "print", "(", "\" \"", ".", "join", "(", "enc_line", ")", ",", "file", "=", "output_h", ")", "\n", "", "", "if", "i", "%", "10000", "==", "0", ":", "\n", "                ", "print", "(", "\"processed {} lines\"", ".", "format", "(", "i", ")", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "\n", "", "", "print", "(", "\"skipped {} empty lines\"", ".", "format", "(", "stats", "[", "\"num_empty\"", "]", ")", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "print", "(", "\"filtered {} lines\"", ".", "format", "(", "stats", "[", "\"num_filtered\"", "]", ")", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.read_binarized.get_parser": [[12, 23], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "fairseq.data.indexed_dataset.get_available_dataset_impl"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.get_available_dataset_impl"], ["def", "get_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'writes text from binarized file to stdout'", ")", "\n", "# fmt: off", "\n", "parser", ".", "add_argument", "(", "'--dataset-impl'", ",", "help", "=", "'dataset implementation'", ",", "\n", "choices", "=", "indexed_dataset", ".", "get_available_dataset_impl", "(", ")", ")", "\n", "parser", ".", "add_argument", "(", "'--dict'", ",", "metavar", "=", "'FP'", ",", "help", "=", "'dictionary containing known words'", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--input'", ",", "metavar", "=", "'FP'", ",", "required", "=", "True", ",", "help", "=", "'binarized file to read'", ")", "\n", "# fmt: on", "\n", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.read_binarized.main": [[25, 44], ["read_binarized.get_parser", "get_parser.parse_args", "fairseq.data.data_utils.load_indexed_dataset", "fairseq.data.Dictionary.load", "print", "dictionary.string", "str", "int"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_manifest.get_parser", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.load_indexed_dataset", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.load", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.string"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "get_parser", "(", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "dictionary", "=", "Dictionary", ".", "load", "(", "args", ".", "dict", ")", "if", "args", ".", "dict", "is", "not", "None", "else", "None", "\n", "dataset", "=", "data_utils", ".", "load_indexed_dataset", "(", "\n", "args", ".", "input", ",", "\n", "dictionary", ",", "\n", "dataset_impl", "=", "args", ".", "dataset_impl", ",", "\n", "default", "=", "'lazy'", ",", "\n", ")", "\n", "\n", "for", "tensor_line", "in", "dataset", ":", "\n", "        ", "if", "dictionary", "is", "None", ":", "\n", "            ", "line", "=", "' '", ".", "join", "(", "[", "str", "(", "int", "(", "x", ")", ")", "for", "x", "in", "tensor_line", "]", ")", "\n", "", "else", ":", "\n", "            ", "line", "=", "dictionary", ".", "string", "(", "tensor_line", ")", "\n", "\n", "", "print", "(", "line", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.compare_namespaces.main": [[7, 41], ["eval", "eval", "compare_namespaces.main.keys"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval"], ["def", "main", "(", ")", ":", "\n", "\n", "    ", "ns1", "=", "eval", "(", "input", "(", "'Namespace 1: '", ")", ")", "\n", "ns2", "=", "eval", "(", "input", "(", "'Namespace 2: '", ")", ")", "\n", "\n", "def", "keys", "(", "ns", ")", ":", "\n", "        ", "ks", "=", "set", "(", ")", "\n", "for", "k", "in", "dir", "(", "ns", ")", ":", "\n", "            ", "if", "not", "k", ".", "startswith", "(", "'_'", ")", ":", "\n", "                ", "ks", ".", "add", "(", "k", ")", "\n", "", "", "return", "ks", "\n", "\n", "", "k1", "=", "keys", "(", "ns1", ")", "\n", "k2", "=", "keys", "(", "ns2", ")", "\n", "\n", "def", "print_keys", "(", "ks", ",", "ns1", ",", "ns2", "=", "None", ")", ":", "\n", "        ", "for", "k", "in", "ks", ":", "\n", "            ", "if", "ns2", "is", "None", ":", "\n", "                ", "print", "(", "'{}\\t{}'", ".", "format", "(", "k", ",", "getattr", "(", "ns1", ",", "k", ",", "None", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'{}\\t{}\\t{}'", ".", "format", "(", "k", ",", "getattr", "(", "ns1", ",", "k", ",", "None", ")", ",", "getattr", "(", "ns2", ",", "k", ",", "None", ")", ")", ")", "\n", "\n", "", "", "", "print", "(", "'Keys unique to namespace 1:'", ")", "\n", "print_keys", "(", "k1", "-", "k2", ",", "ns1", ")", "\n", "print", "(", ")", "\n", "\n", "print", "(", "'Keys unique to namespace 2:'", ")", "\n", "print_keys", "(", "k2", "-", "k1", ",", "ns2", ")", "\n", "print", "(", ")", "\n", "\n", "print", "(", "'Overlapping keys with different values:'", ")", "\n", "ks", "=", "[", "k", "for", "k", "in", "k1", "&", "k2", "if", "getattr", "(", "ns1", ",", "k", ",", "'None'", ")", "!=", "getattr", "(", "ns2", ",", "k", ",", "'None'", ")", "]", "\n", "print_keys", "(", "ks", ",", "ns1", ",", "ns2", ")", "\n", "print", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_manifest.get_parser": [[17, 28], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "get_parser", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'root'", ",", "metavar", "=", "'DIR'", ",", "help", "=", "'root directory containing flac files to index'", ")", "\n", "parser", ".", "add_argument", "(", "'--valid-percent'", ",", "default", "=", "0.01", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'percentage of data to use as validation set (between 0 and 1)'", ")", "\n", "parser", ".", "add_argument", "(", "'--dest'", ",", "default", "=", "'.'", ",", "type", "=", "str", ",", "metavar", "=", "'DIR'", ",", "help", "=", "'output directory'", ")", "\n", "parser", ".", "add_argument", "(", "'--ext'", ",", "default", "=", "'flac'", ",", "type", "=", "str", ",", "metavar", "=", "'EXT'", ",", "help", "=", "'extension to look for'", ")", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "42", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "help", "=", "'random seed'", ")", "\n", "parser", ".", "add_argument", "(", "'--path-must-contain'", ",", "default", "=", "None", ",", "type", "=", "str", ",", "metavar", "=", "'FRAG'", ",", "\n", "help", "=", "'if set, path must contain this substring for a file to be included in the manifest'", ")", "\n", "return", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_manifest.main": [[30, 51], ["os.path.realpath", "os.path.join", "random.Random", "open", "open", "print", "print", "glob.iglob", "os.path.join", "os.path.join", "os.path.realpath", "print", "soundfile.info", "random.Random.random", "os.path.relpath"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "assert", "args", ".", "valid_percent", ">=", "0", "and", "args", ".", "valid_percent", "<=", "1.", "\n", "\n", "dir_path", "=", "os", ".", "path", ".", "realpath", "(", "args", ".", "root", ")", "\n", "search_path", "=", "os", ".", "path", ".", "join", "(", "dir_path", ",", "'**/*.'", "+", "args", ".", "ext", ")", "\n", "rand", "=", "random", ".", "Random", "(", "args", ".", "seed", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "dest", ",", "'train.tsv'", ")", ",", "'w'", ")", "as", "train_f", ",", "open", "(", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "dest", ",", "'valid.tsv'", ")", ",", "'w'", ")", "as", "valid_f", ":", "\n", "        ", "print", "(", "dir_path", ",", "file", "=", "train_f", ")", "\n", "print", "(", "dir_path", ",", "file", "=", "valid_f", ")", "\n", "\n", "for", "fname", "in", "glob", ".", "iglob", "(", "search_path", ",", "recursive", "=", "True", ")", ":", "\n", "            ", "file_path", "=", "os", ".", "path", ".", "realpath", "(", "fname", ")", "\n", "\n", "if", "args", ".", "path_must_contain", "and", "args", ".", "path_must_contain", "not", "in", "file_path", ":", "\n", "                ", "continue", "\n", "\n", "", "frames", "=", "soundfile", ".", "info", "(", "fname", ")", ".", "frames", "\n", "dest", "=", "train_f", "if", "rand", ".", "random", "(", ")", ">", "args", ".", "valid_percent", "else", "valid_f", "\n", "print", "(", "'{}\\t{}'", ".", "format", "(", "os", ".", "path", ".", "relpath", "(", "file_path", ",", "dir_path", ")", ",", "frames", ")", ",", "file", "=", "dest", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.count_docs.main": [[18, 55], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "print", "print", "count_docs.main.gopen"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'input'", ")", "\n", "parser", ".", "add_argument", "(", "'--gzip'", ",", "action", "=", "'store_true'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "def", "gopen", "(", ")", ":", "\n", "        ", "if", "args", ".", "gzip", ":", "\n", "            ", "return", "gzip", ".", "open", "(", "args", ".", "input", ",", "'r'", ")", "\n", "", "else", ":", "\n", "            ", "return", "open", "(", "args", ".", "input", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "\n", "\n", "", "", "num_lines", "=", "[", "]", "\n", "num_toks", "=", "[", "]", "\n", "with", "gopen", "(", ")", "as", "h", ":", "\n", "        ", "num_docs", "=", "1", "\n", "num_lines_in_doc", "=", "0", "\n", "num_toks_in_doc", "=", "0", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "h", ")", ":", "\n", "            ", "if", "len", "(", "line", ".", "strip", "(", ")", ")", "==", "0", ":", "# empty line indicates new document", "\n", "                ", "num_docs", "+=", "1", "\n", "num_lines", ".", "append", "(", "num_lines_in_doc", ")", "\n", "num_toks", ".", "append", "(", "num_toks_in_doc", ")", "\n", "num_lines_in_doc", "=", "0", "\n", "num_toks_in_doc", "=", "0", "\n", "", "else", ":", "\n", "                ", "num_lines_in_doc", "+=", "1", "\n", "num_toks_in_doc", "+=", "len", "(", "line", ".", "rstrip", "(", ")", ".", "split", "(", ")", ")", "\n", "", "if", "i", "%", "1000000", "==", "0", ":", "\n", "                ", "print", "(", "i", ",", "file", "=", "sys", ".", "stderr", ",", "end", "=", "\"\"", ",", "flush", "=", "True", ")", "\n", "", "elif", "i", "%", "100000", "==", "0", ":", "\n", "                ", "print", "(", "\".\"", ",", "file", "=", "sys", ".", "stderr", ",", "end", "=", "\"\"", ",", "flush", "=", "True", ")", "\n", "", "", "print", "(", "file", "=", "sys", ".", "stderr", ",", "flush", "=", "True", ")", "\n", "\n", "", "print", "(", "\"found {} docs\"", ".", "format", "(", "num_docs", ")", ")", "\n", "print", "(", "\"average num lines per doc: {}\"", ".", "format", "(", "np", ".", "mean", "(", "num_lines", ")", ")", ")", "\n", "print", "(", "\"average num toks per doc: {}\"", ".", "format", "(", "np", ".", "mean", "(", "num_toks", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.rm_pt.parse_checkpoints": [[19, 30], ["pt_regexp_epoch_based.fullmatch", "entries.append", "pt_regexp_update_based.fullmatch", "entries.append", "int", "pt_regexp_update_based.fullmatch.group", "pt_regexp_update_based.fullmatch.group", "int", "pt_regexp_update_based.fullmatch.group", "pt_regexp_update_based.fullmatch.group"], "function", ["None"], ["def", "parse_checkpoints", "(", "files", ")", ":", "\n", "    ", "entries", "=", "[", "]", "\n", "for", "f", "in", "files", ":", "\n", "        ", "m", "=", "pt_regexp_epoch_based", ".", "fullmatch", "(", "f", ")", "\n", "if", "m", "is", "not", "None", ":", "\n", "            ", "entries", ".", "append", "(", "(", "int", "(", "m", ".", "group", "(", "1", ")", ")", ",", "m", ".", "group", "(", "0", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "m", "=", "pt_regexp_update_based", ".", "fullmatch", "(", "f", ")", "\n", "if", "m", "is", "not", "None", ":", "\n", "                ", "entries", ".", "append", "(", "(", "int", "(", "m", ".", "group", "(", "1", ")", ")", ",", "m", ".", "group", "(", "0", ")", ")", ")", "\n", "", "", "", "return", "entries", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.rm_pt.last_n_checkpoints": [[32, 35], ["rm_pt.parse_checkpoints", "sorted"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.rm_pt.parse_checkpoints"], ["", "def", "last_n_checkpoints", "(", "files", ",", "n", ")", ":", "\n", "    ", "entries", "=", "parse_checkpoints", "(", "files", ")", "\n", "return", "[", "x", "[", "1", "]", "for", "x", "in", "sorted", "(", "entries", ",", "reverse", "=", "True", ")", "[", ":", "n", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.rm_pt.every_n_checkpoints": [[37, 40], ["rm_pt.parse_checkpoints", "sorted", "sorted"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.rm_pt.parse_checkpoints"], ["", "def", "every_n_checkpoints", "(", "files", ",", "n", ")", ":", "\n", "    ", "entries", "=", "parse_checkpoints", "(", "files", ")", "\n", "return", "[", "x", "[", "1", "]", "for", "x", "in", "sorted", "(", "sorted", "(", "entries", ")", "[", ":", ":", "-", "n", "]", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.rm_pt.main": [[42, 129], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "sorted", "sorted", "sorted", "print", "print", "os.walk", "print", "sys.exit", "len", "len", "len", "input", "len", "len", "len", "len", "print", "print", "print", "input.strip().lower", "os.path.realpath", "print", "os.remove", "print", "shutil.copyfile", "print", "os.remove", "rm_pt.last_n_checkpoints", "rm_pt.every_n_checkpoints", "os.path.join", "input.strip().lower", "sys.exit", "pt_regexp.fullmatch", "sorted.append", "input.strip", "os.path.islink", "sorted.append", "sorted.append", "input.strip", "os.path.basename().startswith", "os.path.basename"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.average_checkpoints.last_n_checkpoints", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.rm_pt.every_n_checkpoints"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "(", "\n", "'Recursively delete checkpoint files from `root_dir`, '", "\n", "'but preserve checkpoint_best.pt and checkpoint_last.pt'", "\n", ")", "\n", ")", "\n", "parser", ".", "add_argument", "(", "'root_dirs'", ",", "nargs", "=", "'*'", ")", "\n", "parser", ".", "add_argument", "(", "'--save-last'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'number of last checkpoints to save'", ")", "\n", "parser", ".", "add_argument", "(", "'--save-every'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "'interval of checkpoints to save'", ")", "\n", "parser", ".", "add_argument", "(", "'--preserve-test'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'preserve checkpoints in dirs that start with test_ prefix (default: delete them)'", ")", "\n", "parser", ".", "add_argument", "(", "'--delete-best'", ",", "action", "=", "'store_true'", ",", "help", "=", "'delete checkpoint_best.pt'", ")", "\n", "parser", ".", "add_argument", "(", "'--delete-last'", ",", "action", "=", "'store_true'", ",", "help", "=", "'delete checkpoint_last.pt'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-dereference'", ",", "action", "=", "'store_true'", ",", "help", "=", "'don\\'t dereference symlinks'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "files_to_desymlink", "=", "[", "]", "\n", "files_to_preserve", "=", "[", "]", "\n", "files_to_delete", "=", "[", "]", "\n", "for", "root_dir", "in", "args", ".", "root_dirs", ":", "\n", "        ", "for", "root", ",", "_subdirs", ",", "files", "in", "os", ".", "walk", "(", "root_dir", ")", ":", "\n", "            ", "if", "args", ".", "save_last", ">", "0", ":", "\n", "                ", "to_save", "=", "last_n_checkpoints", "(", "files", ",", "args", ".", "save_last", ")", "\n", "", "else", ":", "\n", "                ", "to_save", "=", "[", "]", "\n", "", "if", "args", ".", "save_every", ">", "0", ":", "\n", "                ", "to_save", "+=", "every_n_checkpoints", "(", "files", ",", "args", ".", "save_every", ")", "\n", "", "for", "file", "in", "files", ":", "\n", "                ", "if", "not", "pt_regexp", ".", "fullmatch", "(", "file", ")", ":", "\n", "                    ", "continue", "\n", "", "full_path", "=", "os", ".", "path", ".", "join", "(", "root", ",", "file", ")", "\n", "if", "(", "\n", "(", "\n", "not", "os", ".", "path", ".", "basename", "(", "root", ")", ".", "startswith", "(", "'test_'", ")", "\n", "or", "args", ".", "preserve_test", "\n", ")", "\n", "and", "(", "\n", "(", "file", "==", "'checkpoint_last.pt'", "and", "not", "args", ".", "delete_last", ")", "\n", "or", "(", "file", "==", "'checkpoint_best.pt'", "and", "not", "args", ".", "delete_best", ")", "\n", "or", "file", "in", "to_save", "\n", ")", "\n", ")", ":", "\n", "                    ", "if", "os", ".", "path", ".", "islink", "(", "full_path", ")", "and", "not", "args", ".", "no_dereference", ":", "\n", "                        ", "files_to_desymlink", ".", "append", "(", "full_path", ")", "\n", "", "else", ":", "\n", "                        ", "files_to_preserve", ".", "append", "(", "full_path", ")", "\n", "", "", "else", ":", "\n", "                    ", "files_to_delete", ".", "append", "(", "full_path", ")", "\n", "\n", "", "", "", "", "if", "len", "(", "files_to_desymlink", ")", "==", "0", "and", "len", "(", "files_to_delete", ")", "==", "0", ":", "\n", "        ", "print", "(", "'Nothing to do.'", ")", "\n", "sys", ".", "exit", "(", "0", ")", "\n", "\n", "", "files_to_desymlink", "=", "sorted", "(", "files_to_desymlink", ")", "\n", "files_to_preserve", "=", "sorted", "(", "files_to_preserve", ")", "\n", "files_to_delete", "=", "sorted", "(", "files_to_delete", ")", "\n", "\n", "print", "(", "'Operations to perform (in order):'", ")", "\n", "if", "len", "(", "files_to_desymlink", ")", ">", "0", ":", "\n", "        ", "for", "file", "in", "files_to_desymlink", ":", "\n", "            ", "print", "(", "' - preserve (and dereference symlink): '", "+", "file", ")", "\n", "", "", "if", "len", "(", "files_to_preserve", ")", ">", "0", ":", "\n", "        ", "for", "file", "in", "files_to_preserve", ":", "\n", "            ", "print", "(", "' - preserve: '", "+", "file", ")", "\n", "", "", "if", "len", "(", "files_to_delete", ")", ">", "0", ":", "\n", "        ", "for", "file", "in", "files_to_delete", ":", "\n", "            ", "print", "(", "' - delete: '", "+", "file", ")", "\n", "", "", "while", "True", ":", "\n", "        ", "resp", "=", "input", "(", "'Continue? (Y/N): '", ")", "\n", "if", "resp", ".", "strip", "(", ")", ".", "lower", "(", ")", "==", "'y'", ":", "\n", "            ", "break", "\n", "", "elif", "resp", ".", "strip", "(", ")", ".", "lower", "(", ")", "==", "'n'", ":", "\n", "            ", "sys", ".", "exit", "(", "0", ")", "\n", "\n", "", "", "print", "(", "'Executing...'", ")", "\n", "if", "len", "(", "files_to_desymlink", ")", ">", "0", ":", "\n", "        ", "for", "file", "in", "files_to_desymlink", ":", "\n", "            ", "realpath", "=", "os", ".", "path", ".", "realpath", "(", "file", ")", "\n", "print", "(", "'rm '", "+", "file", ")", "\n", "os", ".", "remove", "(", "file", ")", "\n", "print", "(", "'cp {} {}'", ".", "format", "(", "realpath", ",", "file", ")", ")", "\n", "shutil", ".", "copyfile", "(", "realpath", ",", "file", ")", "\n", "", "", "if", "len", "(", "files_to_delete", ")", ">", "0", ":", "\n", "        ", "for", "file", "in", "files_to_delete", ":", "\n", "            ", "print", "(", "'rm '", "+", "file", ")", "\n", "os", ".", "remove", "(", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.split_train_valid_docs.main": [[16, 82], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "doc.clear", "open", "enumerate", "len", "open", "open", "len", "sample.append", "random.randrange", "len", "split_train_valid_docs.main.update_sample"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "'input'", ")", "\n", "parser", ".", "add_argument", "(", "'sample_output'", ",", "help", "=", "'train output file'", ")", "\n", "parser", ".", "add_argument", "(", "'remainder_output'", ",", "help", "=", "'valid output file'", ")", "\n", "parser", ".", "add_argument", "(", "'-k'", ",", "type", "=", "int", ",", "help", "=", "\"remainder size\"", ")", "\n", "parser", ".", "add_argument", "(", "'--lines'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'split lines instead of docs'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "assert", "args", ".", "k", "is", "not", "None", "\n", "\n", "sample", "=", "[", "]", "\n", "remainder", "=", "[", "]", "\n", "num_docs", "=", "[", "0", "]", "\n", "\n", "def", "update_sample", "(", "doc", ")", ":", "\n", "        ", "if", "len", "(", "sample", ")", "<", "args", ".", "k", ":", "\n", "            ", "sample", ".", "append", "(", "doc", ".", "copy", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "i", "=", "num_docs", "[", "0", "]", "\n", "j", "=", "random", ".", "randrange", "(", "i", "+", "1", ")", "\n", "if", "j", "<", "args", ".", "k", ":", "\n", "                ", "remainder", ".", "append", "(", "sample", "[", "j", "]", ")", "\n", "sample", "[", "j", "]", "=", "doc", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "                ", "remainder", ".", "append", "(", "doc", ".", "copy", "(", ")", ")", "\n", "", "", "num_docs", "[", "0", "]", "+=", "1", "\n", "doc", ".", "clear", "(", ")", "\n", "\n", "", "with", "open", "(", "args", ".", "input", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "h", ":", "\n", "        ", "doc", "=", "[", "]", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "h", ")", ":", "\n", "            ", "if", "line", ".", "strip", "(", ")", "==", "\"\"", ":", "# empty line indicates new document", "\n", "                ", "update_sample", "(", "doc", ")", "\n", "", "else", ":", "\n", "                ", "doc", ".", "append", "(", "line", ")", "\n", "", "if", "args", ".", "lines", ":", "\n", "                ", "update_sample", "(", "doc", ")", "\n", "", "if", "i", "%", "1000000", "==", "0", ":", "\n", "                ", "print", "(", "i", ",", "file", "=", "sys", ".", "stderr", ",", "end", "=", "\"\"", ",", "flush", "=", "True", ")", "\n", "", "elif", "i", "%", "100000", "==", "0", ":", "\n", "                ", "print", "(", "\".\"", ",", "file", "=", "sys", ".", "stderr", ",", "end", "=", "\"\"", ",", "flush", "=", "True", ")", "\n", "", "", "if", "len", "(", "doc", ")", ">", "0", ":", "\n", "            ", "update_sample", "(", "doc", ")", "\n", "", "", "print", "(", "file", "=", "sys", ".", "stderr", ",", "flush", "=", "True", ")", "\n", "\n", "assert", "len", "(", "sample", ")", "==", "args", ".", "k", "\n", "\n", "with", "open", "(", "args", ".", "sample_output", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "out", ":", "\n", "        ", "first", "=", "True", "\n", "for", "doc", "in", "sample", ":", "\n", "            ", "if", "not", "first", "and", "not", "args", ".", "lines", ":", "\n", "                ", "out", ".", "write", "(", "\"\\n\"", ")", "\n", "", "first", "=", "False", "\n", "for", "line", "in", "doc", ":", "\n", "                ", "out", ".", "write", "(", "line", ")", "\n", "\n", "", "", "", "with", "open", "(", "args", ".", "remainder_output", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "out", ":", "\n", "        ", "first", "=", "True", "\n", "for", "doc", "in", "remainder", ":", "\n", "            ", "if", "not", "first", "and", "not", "args", ".", "lines", ":", "\n", "                ", "out", ".", "write", "(", "\"\\n\"", ")", "\n", "", "first", "=", "False", "\n", "for", "line", "in", "doc", ":", "\n", "                ", "out", ".", "write", "(", "line", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.build_sym_alignment.main": [[29, 94], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "open", "open", "os.system", "os.system", "os.system", "open", "itertools.zip_longest", "print", "s.strip", "t.strip"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'symmetric alignment builer'", ")", "\n", "# fmt: off", "\n", "parser", ".", "add_argument", "(", "'--fast_align_dir'", ",", "\n", "help", "=", "'path to fast_align build directory'", ")", "\n", "parser", ".", "add_argument", "(", "'--mosesdecoder_dir'", ",", "\n", "help", "=", "'path to mosesdecoder root directory'", ")", "\n", "parser", ".", "add_argument", "(", "'--sym_heuristic'", ",", "\n", "help", "=", "'heuristic to use for symmetrization'", ",", "\n", "default", "=", "'grow-diag-final-and'", ")", "\n", "parser", ".", "add_argument", "(", "'--source_file'", ",", "\n", "help", "=", "'path to a file with sentences '", "\n", "'in the source language'", ")", "\n", "parser", ".", "add_argument", "(", "'--target_file'", ",", "\n", "help", "=", "'path to a file with sentences '", "\n", "'in the target language'", ")", "\n", "parser", ".", "add_argument", "(", "'--output_dir'", ",", "\n", "help", "=", "'output directory'", ")", "\n", "# fmt: on", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "fast_align_bin", "=", "os", ".", "path", ".", "join", "(", "args", ".", "fast_align_dir", ",", "'fast_align'", ")", "\n", "symal_bin", "=", "os", ".", "path", ".", "join", "(", "args", ".", "mosesdecoder_dir", ",", "'bin'", ",", "'symal'", ")", "\n", "sym_fast_align_bin", "=", "os", ".", "path", ".", "join", "(", "\n", "args", ".", "mosesdecoder_dir", ",", "'scripts'", ",", "'ems'", ",", "\n", "'support'", ",", "'symmetrize-fast-align.perl'", ")", "\n", "\n", "# create joined file", "\n", "joined_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'text.joined'", ")", "\n", "with", "open", "(", "args", ".", "source_file", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "src", ",", "open", "(", "args", ".", "target_file", ",", "'r'", ",", "encoding", "=", "'utf-8'", ")", "as", "tgt", ":", "\n", "        ", "with", "open", "(", "joined_file", ",", "'w'", ",", "encoding", "=", "'utf-8'", ")", "as", "joined", ":", "\n", "            ", "for", "s", ",", "t", "in", "zip_longest", "(", "src", ",", "tgt", ")", ":", "\n", "                ", "print", "(", "'{} ||| {}'", ".", "format", "(", "s", ".", "strip", "(", ")", ",", "t", ".", "strip", "(", ")", ")", ",", "file", "=", "joined", ")", "\n", "\n", "", "", "", "bwd_align_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'align.backward'", ")", "\n", "\n", "# run forward alignment", "\n", "fwd_align_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'align.forward'", ")", "\n", "fwd_fast_align_cmd", "=", "'{FASTALIGN} -i {JOINED} -d -o -v > {FWD}'", ".", "format", "(", "\n", "FASTALIGN", "=", "fast_align_bin", ",", "\n", "JOINED", "=", "joined_file", ",", "\n", "FWD", "=", "fwd_align_file", ")", "\n", "assert", "os", ".", "system", "(", "fwd_fast_align_cmd", ")", "==", "0", "\n", "\n", "# run backward alignment", "\n", "bwd_align_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'align.backward'", ")", "\n", "bwd_fast_align_cmd", "=", "'{FASTALIGN} -i {JOINED} -d -o -v -r > {BWD}'", ".", "format", "(", "\n", "FASTALIGN", "=", "fast_align_bin", ",", "\n", "JOINED", "=", "joined_file", ",", "\n", "BWD", "=", "bwd_align_file", ")", "\n", "assert", "os", ".", "system", "(", "bwd_fast_align_cmd", ")", "==", "0", "\n", "\n", "# run symmetrization", "\n", "sym_out_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "output_dir", ",", "'aligned'", ")", "\n", "sym_cmd", "=", "'{SYMFASTALIGN} {FWD} {BWD} {SRC} {TGT} {OUT} {HEURISTIC} {SYMAL}'", ".", "format", "(", "\n", "SYMFASTALIGN", "=", "sym_fast_align_bin", ",", "\n", "FWD", "=", "fwd_align_file", ",", "\n", "BWD", "=", "bwd_align_file", ",", "\n", "SRC", "=", "args", ".", "source_file", ",", "\n", "TGT", "=", "args", ".", "target_file", ",", "\n", "OUT", "=", "sym_out_file", ",", "\n", "HEURISTIC", "=", "args", ".", "sym_heuristic", ",", "\n", "SYMAL", "=", "symal_bin", "\n", ")", "\n", "assert", "os", ".", "system", "(", "sym_cmd", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.average_checkpoints.average_checkpoints": [[14, 68], ["collections.OrderedDict", "len", "collections.OrderedDict", "collections.OrderedDict.items", "torch.load", "list", "averaged_params[].div_", "model_params.keys", "isinstance", "KeyError", "p.float.float", "p.float.clone", "torch.serialization.default_restore_location"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.load"], ["def", "average_checkpoints", "(", "inputs", ")", ":", "\n", "    ", "\"\"\"Loads checkpoints from inputs and returns a model with averaged weights.\n\n    Args:\n      inputs: An iterable of string paths of checkpoints to load from.\n\n    Returns:\n      A dict of string keys mapping to various values. The 'model' key\n      from the returned dict should correspond to an OrderedDict mapping\n      string parameter names to torch Tensors.\n    \"\"\"", "\n", "params_dict", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "params_keys", "=", "None", "\n", "new_state", "=", "None", "\n", "num_models", "=", "len", "(", "inputs", ")", "\n", "\n", "for", "f", "in", "inputs", ":", "\n", "        ", "state", "=", "torch", ".", "load", "(", "\n", "f", ",", "\n", "map_location", "=", "(", "\n", "lambda", "s", ",", "_", ":", "torch", ".", "serialization", ".", "default_restore_location", "(", "s", ",", "'cpu'", ")", "\n", ")", ",", "\n", ")", "\n", "# Copies over the settings from the first checkpoint", "\n", "if", "new_state", "is", "None", ":", "\n", "            ", "new_state", "=", "state", "\n", "\n", "", "model_params", "=", "state", "[", "'model'", "]", "\n", "\n", "model_params_keys", "=", "list", "(", "model_params", ".", "keys", "(", ")", ")", "\n", "if", "params_keys", "is", "None", ":", "\n", "            ", "params_keys", "=", "model_params_keys", "\n", "", "elif", "params_keys", "!=", "model_params_keys", ":", "\n", "            ", "raise", "KeyError", "(", "\n", "'For checkpoint {}, expected list of params: {}, '", "\n", "'but found: {}'", ".", "format", "(", "f", ",", "params_keys", ",", "model_params_keys", ")", "\n", ")", "\n", "\n", "", "for", "k", "in", "params_keys", ":", "\n", "            ", "p", "=", "model_params", "[", "k", "]", "\n", "if", "isinstance", "(", "p", ",", "torch", ".", "HalfTensor", ")", ":", "\n", "                ", "p", "=", "p", ".", "float", "(", ")", "\n", "", "if", "k", "not", "in", "params_dict", ":", "\n", "                ", "params_dict", "[", "k", "]", "=", "p", ".", "clone", "(", ")", "\n", "# NOTE: clone() is needed in case of p is a shared parameter", "\n", "", "else", ":", "\n", "                ", "params_dict", "[", "k", "]", "+=", "p", "\n", "\n", "", "", "", "averaged_params", "=", "collections", ".", "OrderedDict", "(", ")", "\n", "for", "k", ",", "v", "in", "params_dict", ".", "items", "(", ")", ":", "\n", "        ", "averaged_params", "[", "k", "]", "=", "v", "\n", "averaged_params", "[", "k", "]", ".", "div_", "(", "num_models", ")", "\n", "", "new_state", "[", "'model'", "]", "=", "averaged_params", "\n", "return", "new_state", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.average_checkpoints.last_n_checkpoints": [[70, 89], ["os.listdir", "len", "re.compile", "re.compile", "re.compile.fullmatch", "len", "Exception", "os.path.join", "int", "len", "pt_regexp.fullmatch.group", "entries.append", "sorted", "pt_regexp.fullmatch.group"], "function", ["None"], ["", "def", "last_n_checkpoints", "(", "paths", ",", "n", ",", "update_based", ",", "upper_bound", "=", "None", ")", ":", "\n", "    ", "assert", "len", "(", "paths", ")", "==", "1", "\n", "path", "=", "paths", "[", "0", "]", "\n", "if", "update_based", ":", "\n", "        ", "pt_regexp", "=", "re", ".", "compile", "(", "r'checkpoint_\\d+_(\\d+)\\.pt'", ")", "\n", "", "else", ":", "\n", "        ", "pt_regexp", "=", "re", ".", "compile", "(", "r'checkpoint(\\d+)\\.pt'", ")", "\n", "", "files", "=", "os", ".", "listdir", "(", "path", ")", "\n", "\n", "entries", "=", "[", "]", "\n", "for", "f", "in", "files", ":", "\n", "        ", "m", "=", "pt_regexp", ".", "fullmatch", "(", "f", ")", "\n", "if", "m", "is", "not", "None", ":", "\n", "            ", "sort_key", "=", "int", "(", "m", ".", "group", "(", "1", ")", ")", "\n", "if", "upper_bound", "is", "None", "or", "sort_key", "<=", "upper_bound", ":", "\n", "                ", "entries", ".", "append", "(", "(", "sort_key", ",", "m", ".", "group", "(", "0", ")", ")", ")", "\n", "", "", "", "if", "len", "(", "entries", ")", "<", "n", ":", "\n", "        ", "raise", "Exception", "(", "'Found {} checkpoint files but need at least {}'", ",", "len", "(", "entries", ")", ",", "n", ")", "\n", "", "return", "[", "os", ".", "path", ".", "join", "(", "path", ",", "x", "[", "1", "]", ")", "for", "x", "in", "sorted", "(", "entries", ",", "reverse", "=", "True", ")", "[", ":", "n", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.average_checkpoints.main": [[91, 137], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_mutually_exclusive_group", "parser.add_mutually_exclusive_group.add_argument", "parser.add_mutually_exclusive_group.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "print", "average_checkpoints.average_checkpoints", "torch.save", "print", "average_checkpoints.last_n_checkpoints", "print"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.average_checkpoints.average_checkpoints", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.save", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.average_checkpoints.last_n_checkpoints", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], ["", "def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "'Tool to average the params of input checkpoints to '", "\n", "'produce a new checkpoint'", ",", "\n", ")", "\n", "# fmt: off", "\n", "parser", ".", "add_argument", "(", "'--inputs'", ",", "required", "=", "True", ",", "nargs", "=", "'+'", ",", "\n", "help", "=", "'Input checkpoint file paths.'", ")", "\n", "parser", ".", "add_argument", "(", "'--output'", ",", "required", "=", "True", ",", "metavar", "=", "'FILE'", ",", "\n", "help", "=", "'Write the new checkpoint containing the averaged weights to this path.'", ")", "\n", "num_group", "=", "parser", ".", "add_mutually_exclusive_group", "(", ")", "\n", "num_group", ".", "add_argument", "(", "'--num-epoch-checkpoints'", ",", "type", "=", "int", ",", "\n", "help", "=", "'if set, will try to find checkpoints with names checkpoint_xx.pt in the path specified by input, '", "\n", "'and average last this many of them.'", ")", "\n", "num_group", ".", "add_argument", "(", "'--num-update-checkpoints'", ",", "type", "=", "int", ",", "\n", "help", "=", "'if set, will try to find checkpoints with names checkpoint_ee_xx.pt in the path specified by input, '", "\n", "'and average last this many of them.'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint-upper-bound'", ",", "type", "=", "int", ",", "\n", "help", "=", "'when using --num-epoch-checkpoints, this will set an upper bound on which checkpoint to use, '", "\n", "'e.g., with --num-epoch-checkpoints=10 --checkpoint-upper-bound=50, checkpoints 41-50 would be averaged.'", ")", "\n", "# fmt: on", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "print", "(", "args", ")", "\n", "\n", "num", "=", "None", "\n", "is_update_based", "=", "False", "\n", "if", "args", ".", "num_update_checkpoints", "is", "not", "None", ":", "\n", "        ", "num", "=", "args", ".", "num_update_checkpoints", "\n", "is_update_based", "=", "True", "\n", "", "elif", "args", ".", "num_epoch_checkpoints", "is", "not", "None", ":", "\n", "        ", "num", "=", "args", ".", "num_epoch_checkpoints", "\n", "\n", "", "assert", "args", ".", "checkpoint_upper_bound", "is", "None", "or", "args", ".", "num_epoch_checkpoints", "is", "not", "None", ",", "'--checkpoint-upper-bound requires --num-epoch-checkpoints'", "\n", "assert", "args", ".", "num_epoch_checkpoints", "is", "None", "or", "args", ".", "num_update_checkpoints", "is", "None", ",", "'Cannot combine --num-epoch-checkpoints and --num-update-checkpoints'", "\n", "\n", "if", "num", "is", "not", "None", ":", "\n", "        ", "args", ".", "inputs", "=", "last_n_checkpoints", "(", "\n", "args", ".", "inputs", ",", "num", ",", "is_update_based", ",", "upper_bound", "=", "args", ".", "checkpoint_upper_bound", ",", "\n", ")", "\n", "print", "(", "'averaging checkpoints: '", ",", "args", ".", "inputs", ")", "\n", "\n", "", "new_state", "=", "average_checkpoints", "(", "args", ".", "inputs", ")", "\n", "torch", ".", "save", "(", "new_state", ",", "args", ".", "output", ")", "\n", "print", "(", "'Finished writing averaged checkpoint to {}.'", ".", "format", "(", "args", ".", "output", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.spm_decode.main": [[15, 45], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args", "sentencepiece.SentencePieceProcessor", "spm.SentencePieceProcessor.Load", "open", "int", "spm.SentencePieceProcessor.DecodePieces", "print", "spm.SentencePieceProcessor.DecodeIds", "spm_decode.main.decode"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.decode"], ["def", "main", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "parser", ".", "add_argument", "(", "\"--model\"", ",", "required", "=", "True", ",", "\n", "help", "=", "\"sentencepiece model to use for decoding\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--input\"", ",", "required", "=", "True", ",", "help", "=", "\"input file to decode\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--input_format\"", ",", "choices", "=", "[", "\"piece\"", ",", "\"id\"", "]", ",", "default", "=", "\"piece\"", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "\n", "sp", "=", "spm", ".", "SentencePieceProcessor", "(", ")", "\n", "sp", ".", "Load", "(", "args", ".", "model", ")", "\n", "\n", "if", "args", ".", "input_format", "==", "\"piece\"", ":", "\n", "        ", "def", "decode", "(", "l", ")", ":", "\n", "            ", "return", "\"\"", ".", "join", "(", "sp", ".", "DecodePieces", "(", "l", ")", ")", "\n", "", "", "elif", "args", ".", "input_format", "==", "\"id\"", ":", "\n", "        ", "def", "decode", "(", "l", ")", ":", "\n", "            ", "return", "\"\"", ".", "join", "(", "sp", ".", "DecodeIds", "(", "l", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n", "", "def", "tok2int", "(", "tok", ")", ":", "\n", "# remap reference-side <unk> (represented as <<unk>>) to 0", "\n", "        ", "return", "int", "(", "tok", ")", "if", "tok", "!=", "\"<<unk>>\"", "else", "0", "\n", "\n", "", "with", "open", "(", "args", ".", "input", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ")", "as", "h", ":", "\n", "        ", "for", "line", "in", "h", ":", "\n", "            ", "if", "args", ".", "input_format", "==", "\"id\"", ":", "\n", "                ", "print", "(", "decode", "(", "list", "(", "map", "(", "tok2int", ",", "line", ".", "rstrip", "(", ")", ".", "split", "(", ")", ")", ")", ")", ")", "\n", "", "elif", "args", ".", "input_format", "==", "\"piece\"", ":", "\n", "                ", "print", "(", "decode", "(", "line", ".", "rstrip", "(", ")", ".", "split", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_resampling_dataset.TestResamplingDataset.setUp": [[15, 21], ["fairseq.data.ListDataset", "numpy.array", "len"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "strings", "=", "[", "\"ab\"", ",", "\"c\"", ",", "\"def\"", ",", "\"ghij\"", "]", "\n", "self", ".", "weights", "=", "[", "4.0", ",", "2.0", ",", "7.0", ",", "1.5", "]", "\n", "self", ".", "size_ratio", "=", "2", "\n", "self", ".", "dataset", "=", "ListDataset", "(", "\n", "self", ".", "strings", ",", "np", ".", "array", "(", "[", "len", "(", "s", ")", "for", "s", "in", "self", ".", "strings", "]", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_resampling_dataset.TestResamplingDataset._test_common": [[23, 65], ["collections.defaultdict", "range", "zip", "len", "len", "len", "len", "resampling_dataset.set_epoch", "resampling_dataset.ordered_indices", "set", "set", "max", "len", "len", "len", "resampling_dataset.size", "collections.defaultdict.keys", "sum", "abs", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.denoising_dataset.DenoisingDataset.set_epoch", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.ordered_indices", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "_test_common", "(", "self", ",", "resampling_dataset", ",", "iters", ")", ":", "\n", "        ", "assert", "len", "(", "self", ".", "dataset", ")", "==", "len", "(", "self", ".", "strings", ")", "==", "len", "(", "self", ".", "weights", ")", "\n", "assert", "len", "(", "resampling_dataset", ")", "==", "self", ".", "size_ratio", "*", "len", "(", "self", ".", "strings", ")", "\n", "\n", "results", "=", "{", "\"ordered_by_size\"", ":", "True", ",", "\"max_distribution_diff\"", ":", "0.0", "}", "\n", "\n", "totalfreqs", "=", "0", "\n", "freqs", "=", "collections", ".", "defaultdict", "(", "int", ")", "\n", "\n", "for", "epoch_num", "in", "range", "(", "iters", ")", ":", "\n", "            ", "resampling_dataset", ".", "set_epoch", "(", "epoch_num", ")", "\n", "\n", "indices", "=", "resampling_dataset", ".", "ordered_indices", "(", ")", "\n", "assert", "len", "(", "indices", ")", "==", "len", "(", "resampling_dataset", ")", "\n", "\n", "prev_size", "=", "-", "1", "\n", "\n", "for", "i", "in", "indices", ":", "\n", "                ", "cur_size", "=", "resampling_dataset", ".", "size", "(", "i", ")", "\n", "# Make sure indices map to same sequences within an epoch", "\n", "assert", "resampling_dataset", "[", "i", "]", "==", "resampling_dataset", "[", "i", "]", "\n", "\n", "# Make sure length of sequence is correct", "\n", "assert", "cur_size", "==", "len", "(", "resampling_dataset", "[", "i", "]", ")", "\n", "\n", "freqs", "[", "resampling_dataset", "[", "i", "]", "]", "+=", "1", "\n", "totalfreqs", "+=", "1", "\n", "\n", "if", "prev_size", ">", "cur_size", ":", "\n", "                    ", "results", "[", "\"ordered_by_size\"", "]", "=", "False", "\n", "\n", "", "prev_size", "=", "cur_size", "\n", "\n", "", "", "assert", "set", "(", "freqs", ".", "keys", "(", ")", ")", "==", "set", "(", "self", ".", "strings", ")", "\n", "for", "s", ",", "weight", "in", "zip", "(", "self", ".", "strings", ",", "self", ".", "weights", ")", ":", "\n", "            ", "freq", "=", "freqs", "[", "s", "]", "/", "totalfreqs", "\n", "expected_freq", "=", "weight", "/", "sum", "(", "self", ".", "weights", ")", "\n", "results", "[", "\"max_distribution_diff\"", "]", "=", "max", "(", "\n", "results", "[", "\"max_distribution_diff\"", "]", ",", "abs", "(", "expected_freq", "-", "freq", ")", "\n", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_resampling_dataset.TestResamplingDataset.test_resampling_dataset_batch_by_size_false": [[66, 83], ["fairseq.data.ResamplingDataset", "test_resampling_dataset.TestResamplingDataset._test_common"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_resampling_dataset.TestResamplingDataset._test_common"], ["", "def", "test_resampling_dataset_batch_by_size_false", "(", "self", ")", ":", "\n", "        ", "resampling_dataset", "=", "ResamplingDataset", "(", "\n", "self", ".", "dataset", ",", "\n", "self", ".", "weights", ",", "\n", "size_ratio", "=", "self", ".", "size_ratio", ",", "\n", "batch_by_size", "=", "False", ",", "\n", "seed", "=", "0", ",", "\n", ")", "\n", "\n", "results", "=", "self", ".", "_test_common", "(", "resampling_dataset", ",", "iters", "=", "1000", ")", "\n", "\n", "# For batch_by_size = False, the batches should be returned in", "\n", "# arbitrary order of size.", "\n", "assert", "not", "results", "[", "\"ordered_by_size\"", "]", "\n", "\n", "# Allow tolerance in distribution error of 2%.", "\n", "assert", "results", "[", "\"max_distribution_diff\"", "]", "<", "0.02", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_resampling_dataset.TestResamplingDataset.test_resampling_dataset_batch_by_size_true": [[84, 101], ["fairseq.data.ResamplingDataset", "test_resampling_dataset.TestResamplingDataset._test_common"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_resampling_dataset.TestResamplingDataset._test_common"], ["", "def", "test_resampling_dataset_batch_by_size_true", "(", "self", ")", ":", "\n", "        ", "resampling_dataset", "=", "ResamplingDataset", "(", "\n", "self", ".", "dataset", ",", "\n", "self", ".", "weights", ",", "\n", "size_ratio", "=", "self", ".", "size_ratio", ",", "\n", "batch_by_size", "=", "True", ",", "\n", "seed", "=", "0", ",", "\n", ")", "\n", "\n", "results", "=", "self", ".", "_test_common", "(", "resampling_dataset", ",", "iters", "=", "1000", ")", "\n", "\n", "# For batch_by_size = True, the batches should be returned in", "\n", "# increasing order of size.", "\n", "assert", "results", "[", "\"ordered_by_size\"", "]", "\n", "\n", "# Allow tolerance in distribution error of 2%.", "\n", "assert", "results", "[", "\"max_distribution_diff\"", "]", "<", "0.02", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_concat_dataset.TestConcatDataset.setUp": [[15, 40], ["tests.test_train.mock_dict", "torch.LongTensor().view", "fairseq.data.TokenBlockDataset", "fairseq.data.LanguagePairDataset", "torch.LongTensor().view", "fairseq.data.TokenBlockDataset", "fairseq.data.LanguagePairDataset", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor().view.size", "torch.LongTensor().view.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_train.mock_dict", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "d", "=", "mock_dict", "(", ")", "\n", "tokens_1", "=", "torch", ".", "LongTensor", "(", "[", "1", "]", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "tokens_ds1", "=", "TokenBlockDataset", "(", "\n", "tokens_1", ",", "\n", "sizes", "=", "[", "tokens_1", ".", "size", "(", "-", "1", ")", "]", ",", "\n", "block_size", "=", "1", ",", "\n", "pad", "=", "0", ",", "\n", "eos", "=", "1", ",", "\n", "include_targets", "=", "False", ",", "\n", ")", "\n", "self", ".", "dataset_1", "=", "LanguagePairDataset", "(", "\n", "tokens_ds1", ",", "tokens_ds1", ".", "sizes", ",", "d", ",", "shuffle", "=", "False", "\n", ")", "\n", "tokens_2", "=", "torch", ".", "LongTensor", "(", "[", "2", "]", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "tokens_ds2", "=", "TokenBlockDataset", "(", "\n", "tokens_2", ",", "\n", "sizes", "=", "[", "tokens_2", ".", "size", "(", "-", "1", ")", "]", ",", "\n", "block_size", "=", "1", ",", "\n", "pad", "=", "0", ",", "\n", "eos", "=", "1", ",", "\n", "include_targets", "=", "False", ",", "\n", ")", "\n", "self", ".", "dataset_2", "=", "LanguagePairDataset", "(", "\n", "tokens_ds2", ",", "tokens_ds2", ".", "sizes", ",", "d", ",", "shuffle", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_concat_dataset.TestConcatDataset.test_concat_dataset_basics": [[42, 65], ["fairseq.data.concat_dataset.ConcatDataset", "fairseq.data.concat_dataset.ConcatDataset", "fairseq.data.concat_dataset.ConcatDataset", "len", "len", "len"], "methods", ["None"], ["", "def", "test_concat_dataset_basics", "(", "self", ")", ":", "\n", "        ", "d", "=", "ConcatDataset", "(", "\n", "[", "self", ".", "dataset_1", ",", "self", ".", "dataset_2", "]", "\n", ")", "\n", "assert", "(", "len", "(", "d", ")", "==", "2", ")", "\n", "assert", "(", "d", "[", "0", "]", "[", "'source'", "]", "[", "0", "]", "==", "1", ")", "\n", "assert", "(", "d", "[", "1", "]", "[", "'source'", "]", "[", "0", "]", "==", "2", ")", "\n", "\n", "d", "=", "ConcatDataset", "(", "\n", "[", "self", ".", "dataset_1", ",", "self", ".", "dataset_2", "]", ",", "sample_ratios", "=", "[", "1", ",", "2", "]", "\n", ")", "\n", "assert", "(", "len", "(", "d", ")", "==", "3", ")", "\n", "assert", "(", "d", "[", "0", "]", "[", "'source'", "]", "[", "0", "]", "==", "1", ")", "\n", "assert", "(", "d", "[", "1", "]", "[", "'source'", "]", "[", "0", "]", "==", "2", ")", "\n", "assert", "(", "d", "[", "2", "]", "[", "'source'", "]", "[", "0", "]", "==", "2", ")", "\n", "\n", "d", "=", "ConcatDataset", "(", "\n", "[", "self", ".", "dataset_1", ",", "self", ".", "dataset_2", "]", ",", "sample_ratios", "=", "[", "2", ",", "1", "]", "\n", ")", "\n", "assert", "(", "len", "(", "d", ")", "==", "3", ")", "\n", "assert", "(", "d", "[", "0", "]", "[", "'source'", "]", "[", "0", "]", "==", "1", ")", "\n", "assert", "(", "d", "[", "1", "]", "[", "'source'", "]", "[", "0", "]", "==", "1", ")", "\n", "assert", "(", "d", "[", "2", "]", "[", "'source'", "]", "[", "0", "]", "==", "2", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_multihead_attention.TestMultiheadAttention.test_append_prev_key_padding_mask": [[12, 57], ["fairseq.modules.multihead_attention.MultiheadAttention._append_prev_key_padding_mask", "torch.tensor().bool", "torch.tensor().bool", "torch.tensor().bool", "torch.tensor().bool", "torch.tensor().bool", "torch.tensor().bool", "torch.tensor().bool", "test_multihead_attention.TestMultiheadAttention.assertTrue", "test_multihead_attention.TestMultiheadAttention.assertEqual", "test_multihead_attention.TestMultiheadAttention.assertEqual", "test_multihead_attention.TestMultiheadAttention.assertIsNone", "torch.all", "fairseq.modules.multihead_attention.MultiheadAttention._append_prev_key_padding_mask.size", "fairseq.modules.multihead_attention.MultiheadAttention._append_prev_key_padding_mask.size", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.eq"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.multihead_attention.MultiheadAttention._append_prev_key_padding_mask", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["    ", "def", "test_append_prev_key_padding_mask", "(", "self", ")", ":", "\n", "        ", "bsz", "=", "1", "\n", "src_len", "=", "4", "\n", "\n", "cases", "=", "[", "\n", "# no padding mask", "\n", "(", "None", ",", "None", ",", "None", ")", ",", "\n", "# current padding mask only", "\n", "(", "\n", "torch", ".", "tensor", "(", "[", "[", "1", "]", "]", ")", ".", "bool", "(", ")", ",", "\n", "None", ",", "\n", "torch", ".", "tensor", "(", "[", "[", "0", ",", "0", ",", "0", ",", "1", "]", "]", ")", ".", "bool", "(", ")", ",", "\n", ")", ",", "\n", "# previous padding mask only", "\n", "(", "\n", "None", ",", "\n", "torch", ".", "tensor", "(", "[", "[", "0", ",", "1", ",", "0", "]", "]", ")", ".", "bool", "(", ")", ",", "\n", "torch", ".", "tensor", "(", "[", "[", "0", ",", "1", ",", "0", ",", "0", "]", "]", ")", ".", "bool", "(", ")", ",", "\n", ")", ",", "\n", "# both padding masks", "\n", "(", "\n", "torch", ".", "tensor", "(", "[", "[", "1", "]", "]", ")", ".", "bool", "(", ")", ",", "\n", "torch", ".", "tensor", "(", "[", "[", "0", ",", "1", ",", "0", "]", "]", ")", ".", "bool", "(", ")", ",", "\n", "torch", ".", "tensor", "(", "[", "[", "0", ",", "1", ",", "0", ",", "1", "]", "]", ")", ".", "bool", "(", ")", ",", "\n", ")", ",", "\n", "]", "\n", "for", "c", "in", "cases", ":", "\n", "            ", "key_padding_mask", "=", "MultiheadAttention", ".", "_append_prev_key_padding_mask", "(", "\n", "c", "[", "0", "]", ",", "\n", "c", "[", "1", "]", ",", "\n", "batch_size", "=", "bsz", ",", "\n", "src_len", "=", "src_len", ",", "\n", "static_kv", "=", "False", ",", "\n", ")", "\n", "\n", "if", "key_padding_mask", "is", "not", "None", ":", "\n", "                ", "self", ".", "assertTrue", "(", "\n", "torch", ".", "all", "(", "torch", ".", "eq", "(", "key_padding_mask", ",", "c", "[", "2", "]", ")", ")", ",", "\n", "f'Unexpected resultant key padding mask: {key_padding_mask}'", "\n", "f' given current: {c[0]} and previous: {c[1]}'", ",", "\n", ")", "\n", "self", ".", "assertEqual", "(", "key_padding_mask", ".", "size", "(", "0", ")", ",", "bsz", ")", "\n", "self", ".", "assertEqual", "(", "key_padding_mask", ".", "size", "(", "1", ")", ",", "src_len", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "assertIsNone", "(", "c", "[", "2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_reproducibility.TestReproducibility._test_reproducibility": [[20, 68], ["tempfile.TemporaryDirectory", "map", "os.rename", "map", "test_reproducibility.TestReproducibility.assertLogs", "test_binaries.create_dummy_data", "test_binaries.preprocess_translation_data", "test_reproducibility.TestReproducibility.assertLogs", "test_binaries.train_translation_model", "os.path.join", "os.path.join", "test_reproducibility.TestReproducibility.assertLogs", "test_binaries.train_translation_model", "test_reproducibility.TestReproducibility.assertAlmostEqual", "test_reproducibility.TestReproducibility.assertAlmostEqual", "json.loads", "json.loads", "float", "float", "float", "float", "str", "str"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.create_dummy_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.preprocess_translation_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.train_translation_model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.train_translation_model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertAlmostEqual", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertAlmostEqual"], ["    ", "def", "_test_reproducibility", "(", "\n", "self", ",", "\n", "name", ",", "\n", "extra_flags", "=", "None", ",", "\n", "delta", "=", "0.0001", ",", "\n", "resume_checkpoint", "=", "'checkpoint1.pt'", ",", "\n", "max_epoch", "=", "3", ",", "\n", ")", ":", "\n", "        ", "if", "extra_flags", "is", "None", ":", "\n", "            ", "extra_flags", "=", "[", "]", "\n", "\n", "", "with", "tempfile", ".", "TemporaryDirectory", "(", "name", ")", "as", "data_dir", ":", "\n", "            ", "with", "self", ".", "assertLogs", "(", ")", "as", "logs", ":", "\n", "                ", "test_binaries", ".", "create_dummy_data", "(", "data_dir", ")", "\n", "test_binaries", ".", "preprocess_translation_data", "(", "data_dir", ")", "\n", "\n", "# train epochs 1 and 2 together", "\n", "", "with", "self", ".", "assertLogs", "(", ")", "as", "logs", ":", "\n", "                ", "test_binaries", ".", "train_translation_model", "(", "\n", "data_dir", ",", "'fconv_iwslt_de_en'", ",", "[", "\n", "'--dropout'", ",", "'0.0'", ",", "\n", "'--log-format'", ",", "'json'", ",", "\n", "'--log-interval'", ",", "'1'", ",", "\n", "'--max-epoch'", ",", "str", "(", "max_epoch", ")", ",", "\n", "]", "+", "extra_flags", ",", "\n", ")", "\n", "", "train_log", ",", "valid_log", "=", "map", "(", "lambda", "rec", ":", "json", ".", "loads", "(", "rec", ".", "msg", ")", ",", "logs", ".", "records", "[", "-", "4", ":", "-", "2", "]", ")", "\n", "\n", "# train epoch 2, resuming from previous checkpoint 1", "\n", "os", ".", "rename", "(", "\n", "os", ".", "path", ".", "join", "(", "data_dir", ",", "resume_checkpoint", ")", ",", "\n", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'checkpoint_last.pt'", ")", ",", "\n", ")", "\n", "with", "self", ".", "assertLogs", "(", ")", "as", "logs", ":", "\n", "                ", "test_binaries", ".", "train_translation_model", "(", "\n", "data_dir", ",", "'fconv_iwslt_de_en'", ",", "[", "\n", "'--dropout'", ",", "'0.0'", ",", "\n", "'--log-format'", ",", "'json'", ",", "\n", "'--log-interval'", ",", "'1'", ",", "\n", "'--max-epoch'", ",", "str", "(", "max_epoch", ")", ",", "\n", "]", "+", "extra_flags", ",", "\n", ")", "\n", "", "train_res_log", ",", "valid_res_log", "=", "map", "(", "lambda", "rec", ":", "json", ".", "loads", "(", "rec", ".", "msg", ")", ",", "logs", ".", "records", "[", "-", "4", ":", "-", "2", "]", ")", "\n", "\n", "for", "k", "in", "[", "'train_loss'", ",", "'train_ppl'", ",", "'train_num_updates'", ",", "'train_gnorm'", "]", ":", "\n", "                ", "self", ".", "assertAlmostEqual", "(", "float", "(", "train_log", "[", "k", "]", ")", ",", "float", "(", "train_res_log", "[", "k", "]", ")", ",", "delta", "=", "delta", ")", "\n", "", "for", "k", "in", "[", "'valid_loss'", ",", "'valid_ppl'", ",", "'valid_num_updates'", ",", "'valid_best_loss'", "]", ":", "\n", "                ", "self", ".", "assertAlmostEqual", "(", "float", "(", "valid_log", "[", "k", "]", ")", ",", "float", "(", "valid_res_log", "[", "k", "]", ")", ",", "delta", "=", "delta", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_reproducibility.TestReproducibility.test_reproducibility": [[69, 71], ["test_reproducibility.TestReproducibility._test_reproducibility"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_reproducibility.TestReproducibility._test_reproducibility"], ["", "", "", "def", "test_reproducibility", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_reproducibility", "(", "'test_reproducibility'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_reproducibility.TestReproducibility.test_reproducibility_fp16": [[72, 78], ["unittest.skipIf", "test_reproducibility.TestReproducibility._test_reproducibility", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_reproducibility.TestReproducibility._test_reproducibility"], ["", "@", "unittest", ".", "skipIf", "(", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "'test requires a GPU'", ")", "\n", "def", "test_reproducibility_fp16", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_reproducibility", "(", "'test_reproducibility_fp16'", ",", "[", "\n", "'--fp16'", ",", "\n", "'--fp16-init-scale'", ",", "'4096'", ",", "\n", "]", ",", "delta", "=", "0.011", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_reproducibility.TestReproducibility.test_reproducibility_memory_efficient_fp16": [[79, 84], ["unittest.skipIf", "test_reproducibility.TestReproducibility._test_reproducibility", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_reproducibility.TestReproducibility._test_reproducibility"], ["", "@", "unittest", ".", "skipIf", "(", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "'test requires a GPU'", ")", "\n", "def", "test_reproducibility_memory_efficient_fp16", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_reproducibility", "(", "'test_reproducibility_memory_efficient_fp16'", ",", "[", "\n", "'--memory-efficient-fp16'", ",", "\n", "'--fp16-init-scale'", ",", "'4096'", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_reproducibility.TestReproducibility.test_mid_epoch_reproducibility": [[86, 92], ["test_reproducibility.TestReproducibility._test_reproducibility"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_reproducibility.TestReproducibility._test_reproducibility"], ["", "def", "test_mid_epoch_reproducibility", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_reproducibility", "(", "\n", "'test_mid_epoch_reproducibility'", ",", "\n", "[", "'--save-interval-updates'", ",", "'3'", "]", ",", "\n", "resume_checkpoint", "=", "'checkpoint_1_3.pt'", ",", "\n", "max_epoch", "=", "1", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_memory_efficient_fp16.TestMemoryEfficientFP16.setUp": [[19, 21], ["logging.disable"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "logging", ".", "disable", "(", "logging", ".", "CRITICAL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_memory_efficient_fp16.TestMemoryEfficientFP16.tearDown": [[22, 24], ["logging.disable"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "logging", ".", "disable", "(", "logging", ".", "NOTSET", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_memory_efficient_fp16.TestMemoryEfficientFP16.test_load_state_dict": [[25, 65], ["torch.nn.Linear().cuda().half", "list", "fairseq.optim.adam.FairseqAdam", "fairseq.optim.fp16_optimizer.MemoryEfficientFP16Optimizer", "torch.nn.Linear().cuda().half.sum", "fairseq.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.backward", "fairseq.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.step", "fairseq.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.state_dict", "fairseq.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.load_state_dict", "fairseq.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.optimizer.state.items", "torch.nn.Linear().cuda().half.parameters", "argparse.Namespace", "argparse.Namespace", "test_memory_efficient_fp16.TestMemoryEfficientFP16.assertTrue", "v.values", "torch.nn.Linear().cuda", "torch.nn.Linear().cuda().half.", "torch.is_tensor", "torch.rand().cuda().half", "test_memory_efficient_fp16.TestMemoryEfficientFP16.assertTrue", "torch.nn.Linear", "torch.rand().cuda", "torch.rand"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lightconv_layer.lightconv_layer.LightconvLayer.half", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.dynamicconvFunction.backward", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.polynomial_decay_schedule.PolynomialDecaySchedule.step", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.state_dict", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.load_state_dict", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lightconv_layer.lightconv_layer.LightconvLayer.half", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear"], ["", "def", "test_load_state_dict", "(", "self", ")", ":", "\n", "# define simple FP16 model", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "Linear", "(", "5", ",", "5", ")", ".", "cuda", "(", ")", ".", "half", "(", ")", "\n", "params", "=", "list", "(", "model", ".", "parameters", "(", ")", ")", "\n", "\n", "# initialize memory efficient FP16 optimizer", "\n", "optimizer", "=", "FairseqAdam", "(", "\n", "argparse", ".", "Namespace", "(", "\n", "lr", "=", "[", "0.00001", "]", ",", "\n", "adam_betas", "=", "'(0.9, 0.999)'", ",", "\n", "adam_eps", "=", "1e-8", ",", "\n", "weight_decay", "=", "0.0", ",", "\n", ")", ",", "\n", "params", ",", "\n", ")", "\n", "me_optimizer", "=", "MemoryEfficientFP16Optimizer", "(", "\n", "argparse", ".", "Namespace", "(", "\n", "fp16_init_scale", "=", "1", ",", "\n", "fp16_scale_window", "=", "1", ",", "\n", "fp16_scale_tolerance", "=", "1", ",", "\n", "threshold_loss_scale", "=", "1", ",", "\n", "min_loss_scale", "=", "1e-4", ",", "\n", ")", ",", "\n", "params", ",", "\n", "optimizer", ",", "\n", ")", "\n", "\n", "# optimizer state is created in the first step", "\n", "loss", "=", "model", "(", "torch", ".", "rand", "(", "5", ")", ".", "cuda", "(", ")", ".", "half", "(", ")", ")", ".", "sum", "(", ")", "\n", "me_optimizer", ".", "backward", "(", "loss", ")", "\n", "me_optimizer", ".", "step", "(", ")", "\n", "\n", "# reload state", "\n", "state", "=", "me_optimizer", ".", "state_dict", "(", ")", "\n", "me_optimizer", ".", "load_state_dict", "(", "state", ")", "\n", "for", "k", ",", "v", "in", "me_optimizer", ".", "optimizer", ".", "state", ".", "items", "(", ")", ":", "\n", "            ", "self", ".", "assertTrue", "(", "k", ".", "dtype", "==", "torch", ".", "float16", ")", "\n", "for", "v_i", "in", "v", ".", "values", "(", ")", ":", "\n", "                ", "if", "torch", ".", "is_tensor", "(", "v_i", ")", ":", "\n", "                    ", "self", ".", "assertTrue", "(", "v_i", ".", "dtype", "==", "torch", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_character_token_embedder.TestCharacterTokenEmbedder.test_character_token_embedder": [[14, 39], ["fairseq.data.Dictionary", "fairseq.data.Dictionary.add_symbol", "fairseq.data.Dictionary.add_symbol", "fairseq.modules.CharacterTokenEmbedder", "max", "torch.LongTensor().fill_", "range", "fairseq.modules.CharacterTokenEmbedder.", "test_character_token_embedder.TestCharacterTokenEmbedder.assertAlmostEqual", "test_character_token_embedder.TestCharacterTokenEmbedder.assertAlmostEqual", "test_character_token_embedder.TestCharacterTokenEmbedder.assertAlmostEqual", "test_character_token_embedder.TestCharacterTokenEmbedder.assertAlmostEqual", "fairseq.modules.CharacterTokenEmbedder.sum().backward", "fairseq.data.Dictionary.pad", "len", "fairseq.data.Dictionary.eos", "range", "fairseq.data.Dictionary.eos", "fairseq.modules.CharacterTokenEmbedder.size", "len", "torch.LongTensor", "len", "fairseq.data.Dictionary.index", "len", "fairseq.modules.CharacterTokenEmbedder.sum", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertAlmostEqual", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertAlmostEqual", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertAlmostEqual", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertAlmostEqual", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.dynamicconvFunction.backward", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.index"], ["    ", "def", "test_character_token_embedder", "(", "self", ")", ":", "\n", "        ", "vocab", "=", "Dictionary", "(", ")", "\n", "vocab", ".", "add_symbol", "(", "'hello'", ")", "\n", "vocab", ".", "add_symbol", "(", "'there'", ")", "\n", "\n", "embedder", "=", "CharacterTokenEmbedder", "(", "vocab", ",", "[", "(", "2", ",", "16", ")", ",", "(", "4", ",", "32", ")", ",", "(", "8", ",", "64", ")", ",", "(", "16", ",", "2", ")", "]", ",", "64", ",", "5", ",", "2", ")", "\n", "\n", "test_sents", "=", "[", "[", "'hello'", ",", "'unk'", ",", "'there'", "]", ",", "[", "'there'", "]", ",", "[", "'hello'", ",", "'there'", "]", "]", "\n", "max_len", "=", "max", "(", "len", "(", "s", ")", "for", "s", "in", "test_sents", ")", "\n", "input", "=", "torch", ".", "LongTensor", "(", "len", "(", "test_sents", ")", ",", "max_len", "+", "2", ")", ".", "fill_", "(", "vocab", ".", "pad", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "test_sents", ")", ")", ":", "\n", "            ", "input", "[", "i", "]", "[", "0", "]", "=", "vocab", ".", "eos", "(", ")", "\n", "for", "j", "in", "range", "(", "len", "(", "test_sents", "[", "i", "]", ")", ")", ":", "\n", "                ", "input", "[", "i", "]", "[", "j", "+", "1", "]", "=", "vocab", ".", "index", "(", "test_sents", "[", "i", "]", "[", "j", "]", ")", "\n", "", "input", "[", "i", "]", "[", "j", "+", "2", "]", "=", "vocab", ".", "eos", "(", ")", "\n", "", "embs", "=", "embedder", "(", "input", ")", "\n", "\n", "assert", "embs", ".", "size", "(", ")", "==", "(", "len", "(", "test_sents", ")", ",", "max_len", "+", "2", ",", "5", ")", "\n", "self", ".", "assertAlmostEqual", "(", "embs", "[", "0", "]", "[", "0", "]", ",", "embs", "[", "1", "]", "[", "0", "]", ")", "\n", "self", ".", "assertAlmostEqual", "(", "embs", "[", "0", "]", "[", "0", "]", ",", "embs", "[", "0", "]", "[", "-", "1", "]", ")", "\n", "self", ".", "assertAlmostEqual", "(", "embs", "[", "0", "]", "[", "1", "]", ",", "embs", "[", "2", "]", "[", "1", "]", ")", "\n", "self", ".", "assertAlmostEqual", "(", "embs", "[", "0", "]", "[", "3", "]", ",", "embs", "[", "1", "]", "[", "1", "]", ")", "\n", "\n", "embs", ".", "sum", "(", ")", ".", "backward", "(", ")", "\n", "assert", "embedder", ".", "char_embeddings", ".", "weight", ".", "grad", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_character_token_embedder.TestCharacterTokenEmbedder.assertAlmostEqual": [[40, 43], ["test_character_token_embedder.TestCharacterTokenEmbedder.assertEqual", "test_character_token_embedder.TestCharacterTokenEmbedder.assertLess", "t1.size", "t2.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "assertAlmostEqual", "(", "self", ",", "t1", ",", "t2", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "t1", ".", "size", "(", ")", ",", "t2", ".", "size", "(", ")", ",", "\"size mismatch\"", ")", "\n", "self", ".", "assertLess", "(", "(", "t1", "-", "t2", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ",", "1e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sparse_multihead_attention.TestSparseMultiheadAttention.test_sparse_multihead_attention": [[12, 45], ["torch.randn", "torch.tensor", "fairseq.modules.sparse_multihead_attention.SparseMultiheadAttention", "fairseq.modules.sparse_multihead_attention.SparseMultiheadAttention.buffered_sparse_mask", "torch.all", "torch.tensor", "fairseq.modules.sparse_multihead_attention.SparseMultiheadAttention", "fairseq.modules.sparse_multihead_attention.SparseMultiheadAttention.buffered_sparse_mask", "torch.all", "torch.eq", "torch.eq", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float", "float"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.sparse_multihead_attention.SparseMultiheadAttention.buffered_sparse_mask", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.sparse_multihead_attention.SparseMultiheadAttention.buffered_sparse_mask"], ["    ", "def", "test_sparse_multihead_attention", "(", "self", ")", ":", "\n", "        ", "attn_weights", "=", "torch", ".", "randn", "(", "1", ",", "8", ",", "8", ")", "\n", "bidirectional_sparse_mask", "=", "torch", ".", "tensor", "(", "[", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "float", "(", "'-inf'", ")", ",", "float", "(", "'-inf'", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "float", "(", "'-inf'", ")", ",", "float", "(", "'-inf'", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "float", "(", "'-inf'", ")", ",", "float", "(", "'-inf'", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "float", "(", "'-inf'", ")", ",", "float", "(", "'-inf'", ")", ",", "0", "]", ",", "\n", "[", "float", "(", "'-inf'", ")", ",", "float", "(", "'-inf'", ")", ",", "float", "(", "'-inf'", ")", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "float", "(", "'-inf'", ")", ",", "float", "(", "'-inf'", ")", ",", "float", "(", "'-inf'", ")", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "float", "(", "'-inf'", ")", ",", "float", "(", "'-inf'", ")", ",", "float", "(", "'-inf'", ")", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "[", "float", "(", "'-inf'", ")", ",", "float", "(", "'-inf'", ")", ",", "float", "(", "'-inf'", ")", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", "\n", "]", ")", "\n", "\n", "bidirectional_attention", "=", "SparseMultiheadAttention", "(", "16", ",", "1", ",", "stride", "=", "4", ",", "expressivity", "=", "1", ",", "is_bidirectional", "=", "True", ")", "\n", "bidirectional_attention_sparse_mask", "=", "bidirectional_attention", ".", "buffered_sparse_mask", "(", "attn_weights", ",", "8", ",", "8", ")", "\n", "torch", ".", "all", "(", "torch", ".", "eq", "(", "bidirectional_attention_sparse_mask", ",", "bidirectional_sparse_mask", ")", ")", "\n", "\n", "sparse_mask", "=", "torch", ".", "tensor", "(", "[", "\n", "[", "0", ",", "float", "(", "'-inf'", ")", ",", "float", "(", "'-inf'", ")", ",", "float", "(", "'-inf'", ")", ",", "float", "(", "'-inf'", ")", ",", "float", "(", "'-inf'", ")", ",", "\n", "float", "(", "'-inf'", ")", ",", "float", "(", "'-inf'", ")", "]", ",", "\n", "[", "0", ",", "0", ",", "float", "(", "'-inf'", ")", ",", "float", "(", "'-inf'", ")", ",", "float", "(", "'-inf'", ")", ",", "float", "(", "'-inf'", ")", ",", "float", "(", "'-inf'", ")", ",", "float", "(", "'-inf'", ")", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "float", "(", "'-inf'", ")", ",", "float", "(", "'-inf'", ")", ",", "float", "(", "'-inf'", ")", ",", "float", "(", "'-inf'", ")", ",", "float", "(", "'-inf'", ")", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "float", "(", "'-inf'", ")", ",", "float", "(", "'-inf'", ")", ",", "float", "(", "'-inf'", ")", ",", "float", "(", "'-inf'", ")", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "float", "(", "'-inf'", ")", ",", "float", "(", "'-inf'", ")", ",", "float", "(", "'-inf'", ")", "]", ",", "\n", "[", "float", "(", "'-inf'", ")", ",", "float", "(", "'-inf'", ")", ",", "float", "(", "'-inf'", ")", ",", "0", ",", "0", ",", "0", ",", "float", "(", "'-inf'", ")", ",", "float", "(", "'-inf'", ")", "]", ",", "\n", "[", "float", "(", "'-inf'", ")", ",", "float", "(", "'-inf'", ")", ",", "float", "(", "'-inf'", ")", ",", "0", ",", "0", ",", "0", ",", "0", ",", "float", "(", "'-inf'", ")", "]", ",", "\n", "[", "float", "(", "'-inf'", ")", ",", "float", "(", "'-inf'", ")", ",", "float", "(", "'-inf'", ")", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "]", ",", "\n", "]", ")", "\n", "\n", "attention", "=", "SparseMultiheadAttention", "(", "16", ",", "1", ",", "stride", "=", "4", ",", "expressivity", "=", "1", ",", "is_bidirectional", "=", "False", ")", "\n", "attention_sparse_mask", "=", "attention", ".", "buffered_sparse_mask", "(", "attn_weights", ",", "8", ",", "8", ")", "\n", "\n", "torch", ".", "all", "(", "torch", ".", "eq", "(", "attention_sparse_mask", ",", "sparse_mask", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_label_smoothing.TestLabelSmoothing.setUp": [[20, 49], ["tests.dummy_dictionary", "len", "test_label_smoothing.TestLabelSmoothing.assertEqual", "test_label_smoothing.TestLabelSmoothing.assertEqual", "test_label_smoothing.TestLabelSmoothing.assertEqual", "test_label_smoothing.TestLabelSmoothing.assertEqual", "next", "argparse.Namespace", "torch.FloatTensor().unsqueeze().expand", "tests.TestTranslationTask.setup_task", "test_label_smoothing.TestLabelSmoothing.task.build_model", "test_label_smoothing.TestLabelSmoothing.d.pad", "test_label_smoothing.TestLabelSmoothing.d.eos", "test_label_smoothing.TestLabelSmoothing.d.unk", "tests.dummy_dataloader", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.FloatTensor().unsqueeze", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.utils.dummy_dictionary", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyLMTask.setup_task", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.build_model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.unk", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.utils.dummy_dataloader"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "# build dictionary", "\n", "        ", "self", ".", "d", "=", "test_utils", ".", "dummy_dictionary", "(", "3", ")", "\n", "vocab", "=", "len", "(", "self", ".", "d", ")", "\n", "self", ".", "assertEqual", "(", "vocab", ",", "4", "+", "3", ")", "# 4 special + 3 tokens", "\n", "self", ".", "assertEqual", "(", "self", ".", "d", ".", "pad", "(", ")", ",", "1", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "d", ".", "eos", "(", ")", ",", "2", ")", "\n", "self", ".", "assertEqual", "(", "self", ".", "d", ".", "unk", "(", ")", ",", "3", ")", "\n", "pad", ",", "eos", ",", "unk", ",", "w1", ",", "w2", ",", "w3", "=", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", "# noqa: F841", "\n", "\n", "# build dataset", "\n", "self", ".", "data", "=", "[", "\n", "# the first batch item has padding", "\n", "{", "'source'", ":", "torch", ".", "LongTensor", "(", "[", "w1", ",", "eos", "]", ")", ",", "'target'", ":", "torch", ".", "LongTensor", "(", "[", "w1", ",", "eos", "]", ")", "}", ",", "\n", "{", "'source'", ":", "torch", ".", "LongTensor", "(", "[", "w1", ",", "eos", "]", ")", ",", "'target'", ":", "torch", ".", "LongTensor", "(", "[", "w1", ",", "w1", ",", "eos", "]", ")", "}", ",", "\n", "]", "\n", "self", ".", "sample", "=", "next", "(", "test_utils", ".", "dummy_dataloader", "(", "self", ".", "data", ")", ")", "\n", "\n", "# build model", "\n", "self", ".", "args", "=", "argparse", ".", "Namespace", "(", ")", "\n", "self", ".", "args", ".", "sentence_avg", "=", "False", "\n", "self", ".", "args", ".", "probs", "=", "torch", ".", "FloatTensor", "(", "[", "\n", "#      pad   eos  unk   w1   w2   w3", "\n", "[", "0.05", ",", "0.05", ",", "0.1", ",", "0.05", ",", "0.3", ",", "0.4", ",", "0.05", "]", ",", "\n", "[", "0.05", ",", "0.10", ",", "0.2", ",", "0.05", ",", "0.2", ",", "0.3", ",", "0.10", "]", ",", "\n", "[", "0.05", ",", "0.15", ",", "0.3", ",", "0.05", ",", "0.1", ",", "0.2", ",", "0.15", "]", ",", "\n", "]", ")", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "2", ",", "3", ",", "7", ")", "# add batch dimension", "\n", "self", ".", "task", "=", "test_utils", ".", "TestTranslationTask", ".", "setup_task", "(", "self", ".", "args", ",", "self", ".", "d", ",", "self", ".", "d", ")", "\n", "self", ".", "model", "=", "self", ".", "task", ".", "build_model", "(", "self", ".", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_label_smoothing.TestLabelSmoothing.test_nll_loss": [[50, 58], ["fairseq.criterions.cross_entropy.CrossEntropyCriterion", "fairseq.criterions.label_smoothed_cross_entropy.LabelSmoothedCrossEntropyCriterion", "fairseq.criterions.cross_entropy.CrossEntropyCriterion.", "fairseq.criterions.label_smoothed_cross_entropy.LabelSmoothedCrossEntropyCriterion.", "test_label_smoothing.TestLabelSmoothing.assertLess", "test_label_smoothing.TestLabelSmoothing.assertLess", "abs", "abs"], "methods", ["None"], ["", "def", "test_nll_loss", "(", "self", ")", ":", "\n", "        ", "self", ".", "args", ".", "label_smoothing", "=", "0.1", "\n", "nll_crit", "=", "CrossEntropyCriterion", "(", "self", ".", "args", ",", "self", ".", "task", ")", "\n", "smooth_crit", "=", "LabelSmoothedCrossEntropyCriterion", "(", "self", ".", "args", ",", "self", ".", "task", ")", "\n", "nll_loss", ",", "nll_sample_size", ",", "nll_logging_output", "=", "nll_crit", "(", "self", ".", "model", ",", "self", ".", "sample", ")", "\n", "smooth_loss", ",", "smooth_sample_size", ",", "smooth_logging_output", "=", "smooth_crit", "(", "self", ".", "model", ",", "self", ".", "sample", ")", "\n", "self", ".", "assertLess", "(", "abs", "(", "nll_loss", "-", "nll_logging_output", "[", "'loss'", "]", ")", ",", "1e-6", ")", "\n", "self", ".", "assertLess", "(", "abs", "(", "nll_loss", "-", "smooth_logging_output", "[", "'nll_loss'", "]", ")", ",", "1e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_label_smoothing.TestLabelSmoothing.test_padding": [[59, 77], ["fairseq.criterions.label_smoothed_cross_entropy.LabelSmoothedCrossEntropyCriterion", "fairseq.criterions.label_smoothed_cross_entropy.LabelSmoothedCrossEntropyCriterion.", "test_label_smoothing.TestLabelSmoothing.test_padding.get_one_no_padding"], "methods", ["None"], ["", "def", "test_padding", "(", "self", ")", ":", "\n", "        ", "self", ".", "args", ".", "label_smoothing", "=", "0.1", "\n", "crit", "=", "LabelSmoothedCrossEntropyCriterion", "(", "self", ".", "args", ",", "self", ".", "task", ")", "\n", "loss", ",", "_", ",", "logging_output", "=", "crit", "(", "self", ".", "model", ",", "self", ".", "sample", ")", "\n", "\n", "def", "get_one_no_padding", "(", "idx", ")", ":", "\n", "# create a new sample with just a single batch item so that there's", "\n", "# no padding", "\n", "            ", "sample1", "=", "next", "(", "test_utils", ".", "dummy_dataloader", "(", "[", "self", ".", "data", "[", "idx", "]", "]", ")", ")", "\n", "args1", "=", "copy", ".", "copy", "(", "self", ".", "args", ")", "\n", "args1", ".", "probs", "=", "args1", ".", "probs", "[", "idx", ",", ":", ",", ":", "]", ".", "unsqueeze", "(", "0", ")", "\n", "model1", "=", "self", ".", "task", ".", "build_model", "(", "args1", ")", "\n", "loss1", ",", "_", ",", "_", "=", "crit", "(", "model1", ",", "sample1", ")", "\n", "return", "loss1", "\n", "\n", "", "loss1", "=", "get_one_no_padding", "(", "0", ")", "\n", "loss2", "=", "get_one_no_padding", "(", "1", ")", "\n", "self", ".", "assertAlmostEqual", "(", "loss", ",", "loss1", "+", "loss2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_label_smoothing.TestLabelSmoothing.test_reduction": [[78, 84], ["fairseq.criterions.label_smoothed_cross_entropy.LabelSmoothedCrossEntropyCriterion", "fairseq.criterions.label_smoothed_cross_entropy.LabelSmoothedCrossEntropyCriterion.", "fairseq.criterions.label_smoothed_cross_entropy.LabelSmoothedCrossEntropyCriterion.", "test_label_smoothing.TestLabelSmoothing.assertAlmostEqual", "unreduced_loss.sum"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertAlmostEqual"], ["", "def", "test_reduction", "(", "self", ")", ":", "\n", "        ", "self", ".", "args", ".", "label_smoothing", "=", "0.1", "\n", "crit", "=", "LabelSmoothedCrossEntropyCriterion", "(", "self", ".", "args", ",", "self", ".", "task", ")", "\n", "loss", ",", "_", ",", "logging_output", "=", "crit", "(", "self", ".", "model", ",", "self", ".", "sample", ",", "reduce", "=", "True", ")", "\n", "unreduced_loss", ",", "_", ",", "_", "=", "crit", "(", "self", ".", "model", ",", "self", ".", "sample", ",", "reduce", "=", "False", ")", "\n", "self", ".", "assertAlmostEqual", "(", "loss", ",", "unreduced_loss", ".", "sum", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_label_smoothing.TestLabelSmoothing.test_zero_eps": [[85, 92], ["fairseq.criterions.cross_entropy.CrossEntropyCriterion", "fairseq.criterions.label_smoothed_cross_entropy.LabelSmoothedCrossEntropyCriterion", "fairseq.criterions.cross_entropy.CrossEntropyCriterion.", "fairseq.criterions.label_smoothed_cross_entropy.LabelSmoothedCrossEntropyCriterion.", "test_label_smoothing.TestLabelSmoothing.assertAlmostEqual"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertAlmostEqual"], ["", "def", "test_zero_eps", "(", "self", ")", ":", "\n", "        ", "self", ".", "args", ".", "label_smoothing", "=", "0.0", "\n", "nll_crit", "=", "CrossEntropyCriterion", "(", "self", ".", "args", ",", "self", ".", "task", ")", "\n", "smooth_crit", "=", "LabelSmoothedCrossEntropyCriterion", "(", "self", ".", "args", ",", "self", ".", "task", ")", "\n", "nll_loss", ",", "nll_sample_size", ",", "nll_logging_output", "=", "nll_crit", "(", "self", ".", "model", ",", "self", ".", "sample", ")", "\n", "smooth_loss", ",", "smooth_sample_size", ",", "smooth_logging_output", "=", "smooth_crit", "(", "self", ".", "model", ",", "self", ".", "sample", ")", "\n", "self", ".", "assertAlmostEqual", "(", "nll_loss", ",", "smooth_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_label_smoothing.TestLabelSmoothing.assertAlmostEqual": [[93, 96], ["test_label_smoothing.TestLabelSmoothing.assertEqual", "test_label_smoothing.TestLabelSmoothing.assertLess", "t1.size", "t2.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "assertAlmostEqual", "(", "self", ",", "t1", ",", "t2", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "t1", ".", "size", "(", ")", ",", "t2", ".", "size", "(", ")", ",", "\"size mismatch\"", ")", "\n", "self", ".", "assertLess", "(", "(", "t1", "-", "t2", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ",", "1e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_multi_corpus_sampled_dataset.TestMultiCorpusSampledDataset.setUp": [[17, 42], ["tests.test_train.mock_dict", "torch.LongTensor().view", "fairseq.data.TokenBlockDataset", "fairseq.data.LanguagePairDataset", "torch.LongTensor().view", "fairseq.data.TokenBlockDataset", "fairseq.data.LanguagePairDataset", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor().view.size", "torch.LongTensor().view.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_train.mock_dict", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "d", "=", "mock_dict", "(", ")", "\n", "tokens_1", "=", "torch", ".", "LongTensor", "(", "[", "1", "]", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "tokens_ds1", "=", "TokenBlockDataset", "(", "\n", "tokens_1", ",", "\n", "sizes", "=", "[", "tokens_1", ".", "size", "(", "-", "1", ")", "]", ",", "\n", "block_size", "=", "1", ",", "\n", "pad", "=", "0", ",", "\n", "eos", "=", "1", ",", "\n", "include_targets", "=", "False", ",", "\n", ")", "\n", "self", ".", "dataset_1", "=", "LanguagePairDataset", "(", "\n", "tokens_ds1", ",", "tokens_ds1", ".", "sizes", ",", "d", ",", "shuffle", "=", "False", "\n", ")", "\n", "tokens_2", "=", "torch", ".", "LongTensor", "(", "[", "2", "]", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "tokens_ds2", "=", "TokenBlockDataset", "(", "\n", "tokens_2", ",", "\n", "sizes", "=", "[", "tokens_2", ".", "size", "(", "-", "1", ")", "]", ",", "\n", "block_size", "=", "1", ",", "\n", "pad", "=", "0", ",", "\n", "eos", "=", "1", ",", "\n", "include_targets", "=", "False", ",", "\n", ")", "\n", "self", ".", "dataset_2", "=", "LanguagePairDataset", "(", "\n", "tokens_ds2", ",", "tokens_ds2", ".", "sizes", ",", "d", ",", "shuffle", "=", "False", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_multi_corpus_sampled_dataset.TestMultiCorpusSampledDataset._test_sample_helper": [[44, 75], ["numpy.random.seed", "fairseq.data.multi_corpus_sampled_dataset.MultiCorpusSampledDataset.ordered_indices", "range", "test_multi_corpus_sampled_dataset.TestMultiCorpusSampledDataset.assertLess", "fairseq.data.multi_corpus_sampled_dataset.MultiCorpusSampledDataset", "fairseq.data.multi_corpus_sampled_dataset.MultiCorpusSampledDataset", "abs", "collections.OrderedDict", "collections.OrderedDict", "fairseq.data.multi_corpus_sampled_dataset.MultiCorpusSampledDataset.collater"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.ordered_indices", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.collater"], ["", "def", "_test_sample_helper", "(", "\n", "self", ",", "\n", "expected_sample_from_first_ds_percentage", ",", "\n", "num_samples", "=", "1000", ",", "\n", "sampling_func", "=", "None", ",", "\n", ")", ":", "\n", "# To make sure test is not flaky", "\n", "        ", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "if", "sampling_func", "is", "None", ":", "\n", "            ", "m", "=", "MultiCorpusSampledDataset", "(", "\n", "OrderedDict", "(", "{", "0", ":", "self", ".", "dataset_1", ",", "1", ":", "self", ".", "dataset_2", "}", ")", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "m", "=", "MultiCorpusSampledDataset", "(", "\n", "OrderedDict", "(", "{", "0", ":", "self", ".", "dataset_1", ",", "1", ":", "self", ".", "dataset_2", "}", ")", ",", "\n", "sampling_func", "=", "sampling_func", ",", "\n", ")", "\n", "", "m", ".", "ordered_indices", "(", ")", "\n", "count_sample_from_first_dataset", "=", "0", "\n", "for", "_", "in", "range", "(", "num_samples", ")", ":", "\n", "            ", "if", "m", ".", "collater", "(", "[", "m", "[", "0", "]", ",", "m", "[", "1", "]", "]", ")", "[", "\"net_input\"", "]", "[", "\"src_tokens\"", "]", "[", "0", "]", "==", "1", ":", "\n", "                ", "count_sample_from_first_dataset", "+=", "1", "\n", "", "", "sample_from_first_ds_percentage", "=", "(", "\n", "1.0", "*", "count_sample_from_first_dataset", "/", "num_samples", "\n", ")", "\n", "self", ".", "assertLess", "(", "\n", "abs", "(", "\n", "sample_from_first_ds_percentage", "\n", "-", "expected_sample_from_first_ds_percentage", "\n", ")", ",", "\n", "0.01", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_multi_corpus_sampled_dataset.TestMultiCorpusSampledDataset.test_multi_corpus_sampled_dataset_uniform_sample": [[77, 79], ["test_multi_corpus_sampled_dataset.TestMultiCorpusSampledDataset._test_sample_helper"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_multi_corpus_sampled_dataset.TestMultiCorpusSampledDataset._test_sample_helper"], ["", "def", "test_multi_corpus_sampled_dataset_uniform_sample", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_sample_helper", "(", "expected_sample_from_first_ds_percentage", "=", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_multi_corpus_sampled_dataset.TestMultiCorpusSampledDataset.test_multi_corpus_sampled_dataset_weighted_sample": [[80, 95], ["test_multi_corpus_sampled_dataset.TestMultiCorpusSampledDataset._test_sample_helper", "numpy.random.random", "enumerate", "test_multi_corpus_sampled_dataset.TestMultiCorpusSampledDataset.test_multi_corpus_sampled_dataset_weighted_sample.naive_weighted_sample"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_multi_corpus_sampled_dataset.TestMultiCorpusSampledDataset._test_sample_helper"], ["", "def", "test_multi_corpus_sampled_dataset_weighted_sample", "(", "self", ")", ":", "\n", "        ", "def", "naive_weighted_sample", "(", "weights", ")", ":", "\n", "            ", "def", "f", "(", "l", ")", ":", "\n", "                ", "v", "=", "np", ".", "random", ".", "random", "(", ")", "\n", "agg", "=", "0", "\n", "for", "i", ",", "weight", "in", "enumerate", "(", "weights", ")", ":", "\n", "                    ", "agg", "+=", "weight", "\n", "if", "agg", ">", "v", ":", "\n", "                        ", "return", "i", "\n", "\n", "", "", "", "return", "f", "\n", "\n", "", "self", ".", "_test_sample_helper", "(", "\n", "expected_sample_from_first_ds_percentage", "=", "0.9", ",", "\n", "sampling_func", "=", "naive_weighted_sample", "(", "weights", "=", "[", "0.9", ",", "0.1", "]", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_iterators.TestIterators.test_counting_iterator": [[13, 24], ["list", "fairseq.data.iterators.CountingIterator", "test_iterators.TestIterators.assertTrue", "test_iterators.TestIterators.assertEqual", "test_iterators.TestIterators.assertEqual", "fairseq.data.iterators.CountingIterator.skip", "test_iterators.TestIterators.assertEqual", "fairseq.data.iterators.CountingIterator.skip", "test_iterators.TestIterators.assertEqual", "test_iterators.TestIterators.assertFalse", "range", "fairseq.data.iterators.CountingIterator.has_next", "next", "next", "next", "next", "fairseq.data.iterators.CountingIterator.has_next"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.CountingIterator.skip", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.CountingIterator.skip", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.CountingIterator.has_next", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.CountingIterator.has_next"], ["    ", "def", "test_counting_iterator", "(", "self", ")", ":", "\n", "        ", "x", "=", "list", "(", "range", "(", "10", ")", ")", "\n", "itr", "=", "iterators", ".", "CountingIterator", "(", "x", ")", "\n", "self", ".", "assertTrue", "(", "itr", ".", "has_next", "(", ")", ")", "\n", "self", ".", "assertEqual", "(", "next", "(", "itr", ")", ",", "0", ")", "\n", "self", ".", "assertEqual", "(", "next", "(", "itr", ")", ",", "1", ")", "\n", "itr", ".", "skip", "(", "3", ")", "\n", "self", ".", "assertEqual", "(", "next", "(", "itr", ")", ",", "5", ")", "\n", "itr", ".", "skip", "(", "3", ")", "\n", "self", ".", "assertEqual", "(", "next", "(", "itr", ")", ",", "9", ")", "\n", "self", ".", "assertFalse", "(", "itr", ".", "has_next", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_dictionary.TestDictionary.test_finalize": [[16, 67], ["list", "list", "fairseq.data.Dictionary", "test_dictionary.TestDictionary.test_finalize.get_ids"], "methods", ["None"], ["    ", "def", "test_finalize", "(", "self", ")", ":", "\n", "        ", "txt", "=", "[", "\n", "'A B C D'", ",", "\n", "'B C D'", ",", "\n", "'C D'", ",", "\n", "'D'", ",", "\n", "]", "\n", "ref_ids1", "=", "list", "(", "map", "(", "torch", ".", "IntTensor", ",", "[", "\n", "[", "4", ",", "5", ",", "6", ",", "7", ",", "2", "]", ",", "\n", "[", "5", ",", "6", ",", "7", ",", "2", "]", ",", "\n", "[", "6", ",", "7", ",", "2", "]", ",", "\n", "[", "7", ",", "2", "]", ",", "\n", "]", ")", ")", "\n", "ref_ids2", "=", "list", "(", "map", "(", "torch", ".", "IntTensor", ",", "[", "\n", "[", "7", ",", "6", ",", "5", ",", "4", ",", "2", "]", ",", "\n", "[", "6", ",", "5", ",", "4", ",", "2", "]", ",", "\n", "[", "5", ",", "4", ",", "2", "]", ",", "\n", "[", "4", ",", "2", "]", ",", "\n", "]", ")", ")", "\n", "\n", "# build dictionary", "\n", "d", "=", "Dictionary", "(", ")", "\n", "for", "line", "in", "txt", ":", "\n", "            ", "d", ".", "encode_line", "(", "line", ",", "add_if_not_exist", "=", "True", ")", "\n", "\n", "", "def", "get_ids", "(", "dictionary", ")", ":", "\n", "            ", "ids", "=", "[", "]", "\n", "for", "line", "in", "txt", ":", "\n", "                ", "ids", ".", "append", "(", "dictionary", ".", "encode_line", "(", "line", ",", "add_if_not_exist", "=", "False", ")", ")", "\n", "", "return", "ids", "\n", "\n", "", "def", "assertMatch", "(", "ids", ",", "ref_ids", ")", ":", "\n", "            ", "for", "toks", ",", "ref_toks", "in", "zip", "(", "ids", ",", "ref_ids", ")", ":", "\n", "                ", "self", ".", "assertEqual", "(", "toks", ".", "size", "(", ")", ",", "ref_toks", ".", "size", "(", ")", ")", "\n", "self", ".", "assertEqual", "(", "0", ",", "(", "toks", "!=", "ref_toks", ")", ".", "sum", "(", ")", ".", "item", "(", ")", ")", "\n", "\n", "", "", "ids", "=", "get_ids", "(", "d", ")", "\n", "assertMatch", "(", "ids", ",", "ref_ids1", ")", "\n", "\n", "# check finalized dictionary", "\n", "d", ".", "finalize", "(", ")", "\n", "finalized_ids", "=", "get_ids", "(", "d", ")", "\n", "assertMatch", "(", "finalized_ids", ",", "ref_ids2", ")", "\n", "\n", "# write to disk and reload", "\n", "with", "tempfile", ".", "NamedTemporaryFile", "(", "mode", "=", "'w'", ")", "as", "tmp_dict", ":", "\n", "            ", "d", ".", "save", "(", "tmp_dict", ".", "name", ")", "\n", "d", "=", "Dictionary", ".", "load", "(", "tmp_dict", ".", "name", ")", "\n", "reload_ids", "=", "get_ids", "(", "d", ")", "\n", "assertMatch", "(", "reload_ids", ",", "ref_ids2", ")", "\n", "assertMatch", "(", "finalized_ids", ",", "reload_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising._get_test_data_with_bpe_cont_marker": [[22, 56], ["fairseq.data.Dictionary", "fairseq.data.Dictionary.add_symbol", "fairseq.data.Dictionary.add_symbol", "fairseq.data.Dictionary.add_symbol", "fairseq.data.Dictionary.add_symbol", "fairseq.data.Dictionary.add_symbol", "fairseq.data.Dictionary.add_symbol", "fairseq.data.Dictionary.add_symbol", "fairseq.data.Dictionary.add_symbol", "fairseq.data.Dictionary.add_symbol", "fairseq.data.Dictionary.add_symbol", "test_noising.TestDataNoising._convert_src_tokens_to_tensor"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising._convert_src_tokens_to_tensor"], ["    ", "def", "_get_test_data_with_bpe_cont_marker", "(", "self", ",", "append_eos", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            append_eos: if True, each input sentence in the source tokens tensor\n                will have an EOS appended to the end.\n\n        Returns:\n            vocabs: BPE vocab with continuation markers as suffixes to denote\n                non-end of word tokens. This is the standard BPE format used in\n                fairseq's preprocessing.\n            x: input tensor containing numberized source tokens, with EOS at the\n                end if append_eos is true\n            src_lengths: and source lengths.\n        \"\"\"", "\n", "vocab", "=", "Dictionary", "(", ")", "\n", "vocab", ".", "add_symbol", "(", "\"he@@\"", ")", "\n", "vocab", ".", "add_symbol", "(", "\"llo\"", ")", "\n", "vocab", ".", "add_symbol", "(", "\"how\"", ")", "\n", "vocab", ".", "add_symbol", "(", "\"are\"", ")", "\n", "vocab", ".", "add_symbol", "(", "\"y@@\"", ")", "\n", "vocab", ".", "add_symbol", "(", "\"ou\"", ")", "\n", "vocab", ".", "add_symbol", "(", "\"n@@\"", ")", "\n", "vocab", ".", "add_symbol", "(", "\"ew\"", ")", "\n", "vocab", ".", "add_symbol", "(", "\"or@@\"", ")", "\n", "vocab", ".", "add_symbol", "(", "\"k\"", ")", "\n", "\n", "src_tokens", "=", "[", "\n", "[", "\"he@@\"", ",", "\"llo\"", ",", "\"n@@\"", ",", "\"ew\"", ",", "\"y@@\"", ",", "\"or@@\"", ",", "\"k\"", "]", ",", "\n", "[", "\"how\"", ",", "\"are\"", ",", "\"y@@\"", ",", "\"ou\"", "]", ",", "\n", "]", "\n", "x", ",", "src_lengths", "=", "x", ",", "src_lengths", "=", "self", ".", "_convert_src_tokens_to_tensor", "(", "\n", "vocab", "=", "vocab", ",", "src_tokens", "=", "src_tokens", ",", "append_eos", "=", "append_eos", "\n", ")", "\n", "return", "vocab", ",", "x", ",", "src_lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising._get_test_data_with_bpe_end_marker": [[57, 92], ["fairseq.data.Dictionary", "fairseq.data.Dictionary.add_symbol", "fairseq.data.Dictionary.add_symbol", "fairseq.data.Dictionary.add_symbol", "fairseq.data.Dictionary.add_symbol", "fairseq.data.Dictionary.add_symbol", "fairseq.data.Dictionary.add_symbol", "fairseq.data.Dictionary.add_symbol", "fairseq.data.Dictionary.add_symbol", "fairseq.data.Dictionary.add_symbol", "fairseq.data.Dictionary.add_symbol", "test_noising.TestDataNoising._convert_src_tokens_to_tensor"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising._convert_src_tokens_to_tensor"], ["", "def", "_get_test_data_with_bpe_end_marker", "(", "self", ",", "append_eos", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            append_eos: if True, each input sentence in the source tokens tensor\n                will have an EOS appended to the end.\n\n        Returns:\n            vocabs: BPE vocab with end-of-word markers as suffixes to denote\n                tokens at the end of a word. This is an alternative to fairseq's\n                standard preprocessing framework and is not generally supported\n                within fairseq.\n            x: input tensor containing numberized source tokens, with EOS at the\n                end if append_eos is true\n            src_lengths: and source lengths.\n        \"\"\"", "\n", "vocab", "=", "Dictionary", "(", ")", "\n", "vocab", ".", "add_symbol", "(", "\"he\"", ")", "\n", "vocab", ".", "add_symbol", "(", "\"llo_EOW\"", ")", "\n", "vocab", ".", "add_symbol", "(", "\"how_EOW\"", ")", "\n", "vocab", ".", "add_symbol", "(", "\"are_EOW\"", ")", "\n", "vocab", ".", "add_symbol", "(", "\"y\"", ")", "\n", "vocab", ".", "add_symbol", "(", "\"ou_EOW\"", ")", "\n", "vocab", ".", "add_symbol", "(", "\"n\"", ")", "\n", "vocab", ".", "add_symbol", "(", "\"ew_EOW\"", ")", "\n", "vocab", ".", "add_symbol", "(", "\"or\"", ")", "\n", "vocab", ".", "add_symbol", "(", "\"k_EOW\"", ")", "\n", "\n", "src_tokens", "=", "[", "\n", "[", "\"he\"", ",", "\"llo_EOW\"", ",", "\"n\"", ",", "\"ew_EOW\"", ",", "\"y\"", ",", "\"or\"", ",", "\"k_EOW\"", "]", ",", "\n", "[", "\"how_EOW\"", ",", "\"are_EOW\"", ",", "\"y\"", ",", "\"ou_EOW\"", "]", ",", "\n", "]", "\n", "x", ",", "src_lengths", "=", "x", ",", "src_lengths", "=", "self", ".", "_convert_src_tokens_to_tensor", "(", "\n", "vocab", "=", "vocab", ",", "src_tokens", "=", "src_tokens", ",", "append_eos", "=", "append_eos", "\n", ")", "\n", "return", "vocab", ",", "x", ",", "src_lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising._get_test_data_with_word_vocab": [[93, 121], ["fairseq.data.Dictionary", "fairseq.data.Dictionary.add_symbol", "fairseq.data.Dictionary.add_symbol", "fairseq.data.Dictionary.add_symbol", "fairseq.data.Dictionary.add_symbol", "fairseq.data.Dictionary.add_symbol", "fairseq.data.Dictionary.add_symbol", "test_noising.TestDataNoising._convert_src_tokens_to_tensor"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising._convert_src_tokens_to_tensor"], ["", "def", "_get_test_data_with_word_vocab", "(", "self", ",", "append_eos", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            append_eos: if True, each input sentence in the source tokens tensor\n                will have an EOS appended to the end.\n\n        Returns:\n            vocabs: word vocab\n            x: input tensor containing numberized source tokens, with EOS at the\n                end if append_eos is true\n            src_lengths: and source lengths.\n        \"\"\"", "\n", "vocab", "=", "Dictionary", "(", ")", "\n", "\n", "vocab", ".", "add_symbol", "(", "\"hello\"", ")", "\n", "vocab", ".", "add_symbol", "(", "\"how\"", ")", "\n", "vocab", ".", "add_symbol", "(", "\"are\"", ")", "\n", "vocab", ".", "add_symbol", "(", "\"you\"", ")", "\n", "vocab", ".", "add_symbol", "(", "\"new\"", ")", "\n", "vocab", ".", "add_symbol", "(", "\"york\"", ")", "\n", "src_tokens", "=", "[", "\n", "[", "\"hello\"", ",", "\"new\"", ",", "\"york\"", ",", "\"you\"", "]", ",", "\n", "[", "\"how\"", ",", "\"are\"", ",", "\"you\"", ",", "\"new\"", ",", "\"york\"", "]", ",", "\n", "]", "\n", "x", ",", "src_lengths", "=", "self", ".", "_convert_src_tokens_to_tensor", "(", "\n", "vocab", "=", "vocab", ",", "src_tokens", "=", "src_tokens", ",", "append_eos", "=", "append_eos", "\n", ")", "\n", "return", "vocab", ",", "x", ",", "src_lengths", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising._convert_src_tokens_to_tensor": [[122, 139], ["torch.LongTensor().fill_", "range", "x.transpose.transpose.transpose", "len", "vocab.pad", "len", "range", "torch.LongTensor", "torch.LongTensor", "len", "vocab.index", "vocab.eos", "len", "max"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.index", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos"], ["", "def", "_convert_src_tokens_to_tensor", "(", "\n", "self", ",", "vocab", ":", "Dictionary", ",", "src_tokens", ":", "List", "[", "List", "[", "str", "]", "]", ",", "append_eos", ":", "bool", "\n", ")", ":", "\n", "        ", "src_len", "=", "[", "len", "(", "x", ")", "for", "x", "in", "src_tokens", "]", "\n", "# If we have to append EOS, we include EOS in counting src length", "\n", "if", "append_eos", ":", "\n", "            ", "src_len", "=", "[", "length", "+", "1", "for", "length", "in", "src_len", "]", "\n", "\n", "", "x", "=", "torch", ".", "LongTensor", "(", "len", "(", "src_tokens", ")", ",", "max", "(", "src_len", ")", ")", ".", "fill_", "(", "vocab", ".", "pad", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "src_tokens", ")", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "len", "(", "src_tokens", "[", "i", "]", ")", ")", ":", "\n", "                ", "x", "[", "i", "]", "[", "j", "]", "=", "vocab", ".", "index", "(", "src_tokens", "[", "i", "]", "[", "j", "]", ")", "\n", "", "if", "append_eos", ":", "\n", "                ", "x", "[", "i", "]", "[", "j", "+", "1", "]", "=", "vocab", ".", "eos", "(", ")", "\n", "\n", "", "", "x", "=", "x", ".", "transpose", "(", "1", ",", "0", ")", "\n", "return", "x", ",", "torch", ".", "LongTensor", "(", "src_len", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising.assert_eos_at_end": [[140, 150], ["range", "len", "test_noising.TestDataNoising.assertEqual"], "methods", ["None"], ["", "def", "assert_eos_at_end", "(", "self", ",", "x", ",", "x_len", ",", "eos", ")", ":", "\n", "        ", "\"\"\"Asserts last token of every sentence in x is EOS \"\"\"", "\n", "for", "i", "in", "range", "(", "len", "(", "x_len", ")", ")", ":", "\n", "            ", "self", ".", "assertEqual", "(", "\n", "x", "[", "x_len", "[", "i", "]", "-", "1", "]", "[", "i", "]", ",", "\n", "eos", ",", "\n", "(", "\n", "\"Expected eos (token id {eos}) at the end of sentence {i} \"", "\n", "\"but got {other} instead\"", "\n", ")", ".", "format", "(", "i", "=", "i", ",", "eos", "=", "eos", ",", "other", "=", "x", "[", "i", "]", "[", "-", "1", "]", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising.assert_word_dropout_correct": [[152, 158], ["test_noising.TestDataNoising.assertEqual", "range", "test_noising.TestDataNoising.assertEqual"], "methods", ["None"], ["", "", "def", "assert_word_dropout_correct", "(", "self", ",", "x", ",", "x_noised", ",", "x_len", ",", "l_noised", ")", ":", "\n", "# Expect only the first word (2 bpe tokens) of the first example", "\n", "# was dropped out", "\n", "        ", "self", ".", "assertEqual", "(", "x_len", "[", "0", "]", "-", "2", ",", "l_noised", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "l_noised", "[", "0", "]", ")", ":", "\n", "            ", "self", ".", "assertEqual", "(", "x_noised", "[", "i", "]", "[", "0", "]", ",", "x", "[", "i", "+", "2", "]", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising.test_word_dropout_with_eos": [[159, 169], ["test_noising.TestDataNoising._get_test_data_with_bpe_cont_marker", "fairseq.data.data_utils.numpy_seed", "fairseq.data.noising.WordDropout", "fairseq.data.noising.WordDropout.noising", "test_noising.TestDataNoising.assert_word_dropout_correct", "test_noising.TestDataNoising.assert_eos_at_end", "vocab.eos"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising._get_test_data_with_bpe_cont_marker", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.numpy_seed", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.noising.UnsupervisedMTNoising.noising", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising.assert_word_dropout_correct", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising.assert_eos_at_end", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos"], ["", "", "def", "test_word_dropout_with_eos", "(", "self", ")", ":", "\n", "        ", "vocab", ",", "x", ",", "x_len", "=", "self", ".", "_get_test_data_with_bpe_cont_marker", "(", "append_eos", "=", "True", ")", "\n", "\n", "with", "data_utils", ".", "numpy_seed", "(", "1234", ")", ":", "\n", "            ", "noising_gen", "=", "noising", ".", "WordDropout", "(", "vocab", ")", "\n", "x_noised", ",", "l_noised", "=", "noising_gen", ".", "noising", "(", "x", ",", "x_len", ",", "0.2", ")", "\n", "self", ".", "assert_word_dropout_correct", "(", "\n", "x", "=", "x", ",", "x_noised", "=", "x_noised", ",", "x_len", "=", "x_len", ",", "l_noised", "=", "l_noised", "\n", ")", "\n", "self", ".", "assert_eos_at_end", "(", "x", "=", "x_noised", ",", "x_len", "=", "l_noised", ",", "eos", "=", "vocab", ".", "eos", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising.assert_word_blanking_correct": [[170, 179], ["test_noising.TestDataNoising.assertEqual", "range", "test_noising.TestDataNoising.assertEqual", "test_noising.TestDataNoising.assertEqual"], "methods", ["None"], ["", "", "def", "assert_word_blanking_correct", "(", "self", ",", "x", ",", "x_noised", ",", "x_len", ",", "l_noised", ",", "unk", ")", ":", "\n", "# Expect only the first word (2 bpe tokens) of the first example", "\n", "# was blanked out", "\n", "        ", "self", ".", "assertEqual", "(", "x_len", "[", "0", "]", ",", "l_noised", "[", "0", "]", ")", "\n", "for", "i", "in", "range", "(", "l_noised", "[", "0", "]", ")", ":", "\n", "            ", "if", "i", "<", "2", ":", "\n", "                ", "self", ".", "assertEqual", "(", "x_noised", "[", "i", "]", "[", "0", "]", ",", "unk", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "assertEqual", "(", "x_noised", "[", "i", "]", "[", "0", "]", ",", "x", "[", "i", "]", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising.test_word_blank_with_eos": [[180, 190], ["test_noising.TestDataNoising._get_test_data_with_bpe_cont_marker", "fairseq.data.data_utils.numpy_seed", "fairseq.data.noising.WordDropout", "fairseq.data.noising.WordDropout.noising", "test_noising.TestDataNoising.assert_word_blanking_correct", "test_noising.TestDataNoising.assert_eos_at_end", "vocab.unk", "vocab.unk", "vocab.eos"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising._get_test_data_with_bpe_cont_marker", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.numpy_seed", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.noising.UnsupervisedMTNoising.noising", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising.assert_word_blanking_correct", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising.assert_eos_at_end", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.unk", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.unk", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos"], ["", "", "", "def", "test_word_blank_with_eos", "(", "self", ")", ":", "\n", "        ", "vocab", ",", "x", ",", "x_len", "=", "self", ".", "_get_test_data_with_bpe_cont_marker", "(", "append_eos", "=", "True", ")", "\n", "\n", "with", "data_utils", ".", "numpy_seed", "(", "1234", ")", ":", "\n", "            ", "noising_gen", "=", "noising", ".", "WordDropout", "(", "vocab", ")", "\n", "x_noised", ",", "l_noised", "=", "noising_gen", ".", "noising", "(", "x", ",", "x_len", ",", "0.2", ",", "vocab", ".", "unk", "(", ")", ")", "\n", "self", ".", "assert_word_blanking_correct", "(", "\n", "x", "=", "x", ",", "x_noised", "=", "x_noised", ",", "x_len", "=", "x_len", ",", "l_noised", "=", "l_noised", ",", "unk", "=", "vocab", ".", "unk", "(", ")", "\n", ")", "\n", "self", ".", "assert_eos_at_end", "(", "x", "=", "x_noised", ",", "x_len", "=", "l_noised", ",", "eos", "=", "vocab", ".", "eos", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising.generate_unchanged_shuffle_map": [[191, 193], ["range"], "methods", ["None"], ["", "", "def", "generate_unchanged_shuffle_map", "(", "self", ",", "length", ")", ":", "\n", "        ", "return", "{", "i", ":", "i", "for", "i", "in", "range", "(", "length", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising.assert_word_shuffle_matches_expected": [[194, 245], ["range", "zip", "fairseq.data.data_utils.numpy_seed", "fairseq.data.noising.WordShuffle", "fairseq.data.noising.WordShuffle.noising", "len", "shuffle_map.items", "test_noising.TestDataNoising.assertEqual", "test_noising.TestDataNoising.assert_eos_at_end", "test_noising.TestDataNoising.assertEqual", "vocab.eos"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.numpy_seed", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.noising.UnsupervisedMTNoising.noising", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising.assert_eos_at_end", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos"], ["", "def", "assert_word_shuffle_matches_expected", "(", "\n", "self", ",", "\n", "x", ",", "\n", "x_len", ",", "\n", "max_shuffle_distance", ":", "int", ",", "\n", "vocab", ":", "Dictionary", ",", "\n", "expected_shufle_maps", ":", "List", "[", "Dict", "[", "int", ",", "int", "]", "]", ",", "\n", "expect_eos_at_end", ":", "bool", ",", "\n", "bpe_end_marker", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        This verifies that with a given x, x_len, max_shuffle_distance, and\n        vocab, we get the expected shuffle result.\n\n        Args:\n            x: Tensor of shape (T x B) = (sequence_length, batch_size)\n            x_len: Tensor of length B = batch_size\n            max_shuffle_distance: arg to pass to noising\n            expected_shuffle_maps: List[mapping] where mapping is a\n                Dict[old_index, new_index], mapping x's elements from their\n                old positions in x to their new positions in x.\n            expect_eos_at_end: if True, check the output to make sure there is\n                an EOS at the end.\n            bpe_end_marker: str denoting the BPE end token. If this is not None, we\n                set the BPE cont token to None in the noising classes.\n        \"\"\"", "\n", "bpe_cont_marker", "=", "None", "\n", "if", "bpe_end_marker", "is", "None", ":", "\n", "            ", "bpe_cont_marker", "=", "\"@@\"", "\n", "\n", "", "with", "data_utils", ".", "numpy_seed", "(", "1234", ")", ":", "\n", "            ", "word_shuffle", "=", "noising", ".", "WordShuffle", "(", "\n", "vocab", ",", "bpe_cont_marker", "=", "bpe_cont_marker", ",", "bpe_end_marker", "=", "bpe_end_marker", "\n", ")", "\n", "x_noised", ",", "l_noised", "=", "word_shuffle", ".", "noising", "(", "\n", "x", ",", "x_len", ",", "max_shuffle_distance", "=", "max_shuffle_distance", "\n", ")", "\n", "\n", "# For every example, we have a different expected shuffle map. We check", "\n", "# that each example is shuffled as expected according to each", "\n", "# corresponding shuffle map.", "\n", "", "for", "i", "in", "range", "(", "len", "(", "expected_shufle_maps", ")", ")", ":", "\n", "            ", "shuffle_map", "=", "expected_shufle_maps", "[", "i", "]", "\n", "for", "k", ",", "v", "in", "shuffle_map", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "assertEqual", "(", "x", "[", "k", "]", "[", "i", "]", ",", "x_noised", "[", "v", "]", "[", "i", "]", ")", "\n", "\n", "# Shuffling should not affect the length of each example", "\n", "", "", "for", "pre_shuffle_length", ",", "post_shuffle_length", "in", "zip", "(", "x_len", ",", "l_noised", ")", ":", "\n", "            ", "self", ".", "assertEqual", "(", "pre_shuffle_length", ",", "post_shuffle_length", ")", "\n", "", "if", "expect_eos_at_end", ":", "\n", "            ", "self", ".", "assert_eos_at_end", "(", "x", "=", "x_noised", ",", "x_len", "=", "l_noised", ",", "eos", "=", "vocab", ".", "eos", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising.test_word_shuffle_with_eos": [[246, 275], ["test_noising.TestDataNoising._get_test_data_with_bpe_cont_marker", "test_noising.TestDataNoising.assert_word_shuffle_matches_expected", "test_noising.TestDataNoising.assert_word_shuffle_matches_expected", "test_noising.TestDataNoising.generate_unchanged_shuffle_map", "test_noising.TestDataNoising.generate_unchanged_shuffle_map"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising._get_test_data_with_bpe_cont_marker", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising.assert_word_shuffle_matches_expected", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising.assert_word_shuffle_matches_expected", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising.generate_unchanged_shuffle_map", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising.generate_unchanged_shuffle_map"], ["", "", "def", "test_word_shuffle_with_eos", "(", "self", ")", ":", "\n", "        ", "vocab", ",", "x", ",", "x_len", "=", "self", ".", "_get_test_data_with_bpe_cont_marker", "(", "append_eos", "=", "True", ")", "\n", "\n", "# Assert word shuffle with max shuffle distance 0 causes input to be", "\n", "# unchanged", "\n", "self", ".", "assert_word_shuffle_matches_expected", "(", "\n", "x", "=", "x", ",", "\n", "x_len", "=", "x_len", ",", "\n", "max_shuffle_distance", "=", "0", ",", "\n", "vocab", "=", "vocab", ",", "\n", "expected_shufle_maps", "=", "[", "\n", "self", ".", "generate_unchanged_shuffle_map", "(", "example_len", ")", "\n", "for", "example_len", "in", "x_len", "\n", "]", ",", "\n", "expect_eos_at_end", "=", "True", ",", "\n", ")", "\n", "\n", "# Assert word shuffle with max shuffle distance 3 matches our expected", "\n", "# shuffle order", "\n", "self", ".", "assert_word_shuffle_matches_expected", "(", "\n", "x", "=", "x", ",", "\n", "x_len", "=", "x_len", ",", "\n", "vocab", "=", "vocab", ",", "\n", "max_shuffle_distance", "=", "3", ",", "\n", "expected_shufle_maps", "=", "[", "\n", "self", ".", "generate_unchanged_shuffle_map", "(", "x_len", "[", "0", "]", ")", ",", "\n", "{", "0", ":", "0", ",", "1", ":", "3", ",", "2", ":", "1", ",", "3", ":", "2", "}", ",", "\n", "]", ",", "\n", "expect_eos_at_end", "=", "True", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising.test_word_shuffle_with_eos_nonbpe": [[277, 307], ["test_noising.TestDataNoising._get_test_data_with_word_vocab", "test_noising.TestDataNoising.assert_word_shuffle_matches_expected", "test_noising.TestDataNoising.assert_word_shuffle_matches_expected", "test_noising.TestDataNoising.generate_unchanged_shuffle_map"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising._get_test_data_with_word_vocab", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising.assert_word_shuffle_matches_expected", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising.assert_word_shuffle_matches_expected", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising.generate_unchanged_shuffle_map"], ["", "def", "test_word_shuffle_with_eos_nonbpe", "(", "self", ")", ":", "\n", "        ", "\"\"\"The purpose of this is to test shuffling logic with word vocabs\"\"\"", "\n", "vocab", ",", "x", ",", "x_len", "=", "self", ".", "_get_test_data_with_word_vocab", "(", "append_eos", "=", "True", ")", "\n", "\n", "# Assert word shuffle with max shuffle distance 0 causes input to be", "\n", "# unchanged", "\n", "self", ".", "assert_word_shuffle_matches_expected", "(", "\n", "x", "=", "x", ",", "\n", "x_len", "=", "x_len", ",", "\n", "max_shuffle_distance", "=", "0", ",", "\n", "vocab", "=", "vocab", ",", "\n", "expected_shufle_maps", "=", "[", "\n", "self", ".", "generate_unchanged_shuffle_map", "(", "example_len", ")", "\n", "for", "example_len", "in", "x_len", "\n", "]", ",", "\n", "expect_eos_at_end", "=", "True", ",", "\n", ")", "\n", "\n", "# Assert word shuffle with max shuffle distance 3 matches our expected", "\n", "# shuffle order", "\n", "self", ".", "assert_word_shuffle_matches_expected", "(", "\n", "x", "=", "x", ",", "\n", "x_len", "=", "x_len", ",", "\n", "vocab", "=", "vocab", ",", "\n", "max_shuffle_distance", "=", "3", ",", "\n", "expected_shufle_maps", "=", "[", "\n", "{", "0", ":", "0", ",", "1", ":", "1", ",", "2", ":", "3", ",", "3", ":", "2", "}", ",", "\n", "{", "0", ":", "0", ",", "1", ":", "2", ",", "2", ":", "1", ",", "3", ":", "3", ",", "4", ":", "4", "}", ",", "\n", "]", ",", "\n", "expect_eos_at_end", "=", "True", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising.test_word_shuffle_without_eos": [[309, 339], ["test_noising.TestDataNoising._get_test_data_with_bpe_cont_marker", "test_noising.TestDataNoising.assert_word_shuffle_matches_expected", "test_noising.TestDataNoising.assert_word_shuffle_matches_expected", "test_noising.TestDataNoising.generate_unchanged_shuffle_map", "test_noising.TestDataNoising.generate_unchanged_shuffle_map"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising._get_test_data_with_bpe_cont_marker", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising.assert_word_shuffle_matches_expected", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising.assert_word_shuffle_matches_expected", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising.generate_unchanged_shuffle_map", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising.generate_unchanged_shuffle_map"], ["", "def", "test_word_shuffle_without_eos", "(", "self", ")", ":", "\n", "        ", "\"\"\"Same result as word shuffle with eos except no EOS at end\"\"\"", "\n", "vocab", ",", "x", ",", "x_len", "=", "self", ".", "_get_test_data_with_bpe_cont_marker", "(", "append_eos", "=", "False", ")", "\n", "\n", "# Assert word shuffle with max shuffle distance 0 causes input to be", "\n", "# unchanged", "\n", "self", ".", "assert_word_shuffle_matches_expected", "(", "\n", "x", "=", "x", ",", "\n", "x_len", "=", "x_len", ",", "\n", "max_shuffle_distance", "=", "0", ",", "\n", "vocab", "=", "vocab", ",", "\n", "expected_shufle_maps", "=", "[", "\n", "self", ".", "generate_unchanged_shuffle_map", "(", "example_len", ")", "\n", "for", "example_len", "in", "x_len", "\n", "]", ",", "\n", "expect_eos_at_end", "=", "False", ",", "\n", ")", "\n", "\n", "# Assert word shuffle with max shuffle distance 3 matches our expected", "\n", "# shuffle order", "\n", "self", ".", "assert_word_shuffle_matches_expected", "(", "\n", "x", "=", "x", ",", "\n", "x_len", "=", "x_len", ",", "\n", "vocab", "=", "vocab", ",", "\n", "max_shuffle_distance", "=", "3", ",", "\n", "expected_shufle_maps", "=", "[", "\n", "self", ".", "generate_unchanged_shuffle_map", "(", "x_len", "[", "0", "]", ")", ",", "\n", "{", "0", ":", "0", ",", "1", ":", "3", ",", "2", ":", "1", ",", "3", ":", "2", "}", ",", "\n", "]", ",", "\n", "expect_eos_at_end", "=", "False", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising.test_word_shuffle_without_eos_with_bpe_end_marker": [[341, 373], ["test_noising.TestDataNoising._get_test_data_with_bpe_end_marker", "test_noising.TestDataNoising.assert_word_shuffle_matches_expected", "test_noising.TestDataNoising.assert_word_shuffle_matches_expected", "test_noising.TestDataNoising.generate_unchanged_shuffle_map", "test_noising.TestDataNoising.generate_unchanged_shuffle_map"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising._get_test_data_with_bpe_end_marker", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising.assert_word_shuffle_matches_expected", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising.assert_word_shuffle_matches_expected", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising.generate_unchanged_shuffle_map", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising.generate_unchanged_shuffle_map"], ["", "def", "test_word_shuffle_without_eos_with_bpe_end_marker", "(", "self", ")", ":", "\n", "        ", "\"\"\"Same result as word shuffle without eos except using BPE end token\"\"\"", "\n", "vocab", ",", "x", ",", "x_len", "=", "self", ".", "_get_test_data_with_bpe_end_marker", "(", "append_eos", "=", "False", ")", "\n", "\n", "# Assert word shuffle with max shuffle distance 0 causes input to be", "\n", "# unchanged", "\n", "self", ".", "assert_word_shuffle_matches_expected", "(", "\n", "x", "=", "x", ",", "\n", "x_len", "=", "x_len", ",", "\n", "max_shuffle_distance", "=", "0", ",", "\n", "vocab", "=", "vocab", ",", "\n", "expected_shufle_maps", "=", "[", "\n", "self", ".", "generate_unchanged_shuffle_map", "(", "example_len", ")", "\n", "for", "example_len", "in", "x_len", "\n", "]", ",", "\n", "expect_eos_at_end", "=", "False", ",", "\n", "bpe_end_marker", "=", "\"_EOW\"", ",", "\n", ")", "\n", "\n", "# Assert word shuffle with max shuffle distance 3 matches our expected", "\n", "# shuffle order", "\n", "self", ".", "assert_word_shuffle_matches_expected", "(", "\n", "x", "=", "x", ",", "\n", "x_len", "=", "x_len", ",", "\n", "vocab", "=", "vocab", ",", "\n", "max_shuffle_distance", "=", "3", ",", "\n", "expected_shufle_maps", "=", "[", "\n", "self", ".", "generate_unchanged_shuffle_map", "(", "x_len", "[", "0", "]", ")", ",", "\n", "{", "0", ":", "0", ",", "1", ":", "3", ",", "2", ":", "1", ",", "3", ":", "2", "}", ",", "\n", "]", ",", "\n", "expect_eos_at_end", "=", "False", ",", "\n", "bpe_end_marker", "=", "\"_EOW\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising.assert_no_eos_at_end": [[375, 383], ["range", "len", "test_noising.TestDataNoising.assertNotEqual"], "methods", ["None"], ["", "def", "assert_no_eos_at_end", "(", "self", ",", "x", ",", "x_len", ",", "eos", ")", ":", "\n", "        ", "\"\"\"Asserts that the last token of each sentence in x is not EOS \"\"\"", "\n", "for", "i", "in", "range", "(", "len", "(", "x_len", ")", ")", ":", "\n", "            ", "self", ".", "assertNotEqual", "(", "\n", "x", "[", "x_len", "[", "i", "]", "-", "1", "]", "[", "i", "]", ",", "\n", "eos", ",", "\n", "\"Expected no eos (token id {eos}) at the end of sentence {i}.\"", ".", "format", "(", "\n", "eos", "=", "eos", ",", "i", "=", "i", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising.test_word_dropout_without_eos": [[386, 397], ["test_noising.TestDataNoising._get_test_data_with_bpe_cont_marker", "fairseq.data.data_utils.numpy_seed", "fairseq.data.noising.WordDropout", "fairseq.data.noising.WordDropout.noising", "test_noising.TestDataNoising.assert_word_dropout_correct", "test_noising.TestDataNoising.assert_no_eos_at_end", "vocab.eos"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising._get_test_data_with_bpe_cont_marker", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.numpy_seed", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.noising.UnsupervisedMTNoising.noising", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising.assert_word_dropout_correct", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising.assert_no_eos_at_end", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos"], ["", "", "def", "test_word_dropout_without_eos", "(", "self", ")", ":", "\n", "        ", "\"\"\"Same result as word dropout with eos except no EOS at end\"\"\"", "\n", "vocab", ",", "x", ",", "x_len", "=", "self", ".", "_get_test_data_with_bpe_cont_marker", "(", "append_eos", "=", "False", ")", "\n", "\n", "with", "data_utils", ".", "numpy_seed", "(", "1234", ")", ":", "\n", "            ", "noising_gen", "=", "noising", ".", "WordDropout", "(", "vocab", ")", "\n", "x_noised", ",", "l_noised", "=", "noising_gen", ".", "noising", "(", "x", ",", "x_len", ",", "0.2", ")", "\n", "self", ".", "assert_word_dropout_correct", "(", "\n", "x", "=", "x", ",", "x_noised", "=", "x_noised", ",", "x_len", "=", "x_len", ",", "l_noised", "=", "l_noised", "\n", ")", "\n", "self", ".", "assert_no_eos_at_end", "(", "x", "=", "x_noised", ",", "x_len", "=", "l_noised", ",", "eos", "=", "vocab", ".", "eos", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising.test_word_blank_without_eos": [[398, 409], ["test_noising.TestDataNoising._get_test_data_with_bpe_cont_marker", "fairseq.data.data_utils.numpy_seed", "fairseq.data.noising.WordDropout", "fairseq.data.noising.WordDropout.noising", "test_noising.TestDataNoising.assert_word_blanking_correct", "test_noising.TestDataNoising.assert_no_eos_at_end", "vocab.unk", "vocab.unk", "vocab.eos"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising._get_test_data_with_bpe_cont_marker", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.numpy_seed", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.noising.UnsupervisedMTNoising.noising", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising.assert_word_blanking_correct", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising.assert_no_eos_at_end", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.unk", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.unk", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos"], ["", "", "def", "test_word_blank_without_eos", "(", "self", ")", ":", "\n", "        ", "\"\"\"Same result as word blank with eos except no EOS at end\"\"\"", "\n", "vocab", ",", "x", ",", "x_len", "=", "self", ".", "_get_test_data_with_bpe_cont_marker", "(", "append_eos", "=", "False", ")", "\n", "\n", "with", "data_utils", ".", "numpy_seed", "(", "1234", ")", ":", "\n", "            ", "noising_gen", "=", "noising", ".", "WordDropout", "(", "vocab", ")", "\n", "x_noised", ",", "l_noised", "=", "noising_gen", ".", "noising", "(", "x", ",", "x_len", ",", "0.2", ",", "vocab", ".", "unk", "(", ")", ")", "\n", "self", ".", "assert_word_blanking_correct", "(", "\n", "x", "=", "x", ",", "x_noised", "=", "x_noised", ",", "x_len", "=", "x_len", ",", "l_noised", "=", "l_noised", ",", "unk", "=", "vocab", ".", "unk", "(", ")", "\n", ")", "\n", "self", ".", "assert_no_eos_at_end", "(", "x", "=", "x_noised", ",", "x_len", "=", "l_noised", ",", "eos", "=", "vocab", ".", "eos", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising._get_noising_dataset_batch": [[410, 447], ["tests.TestDataset", "fairseq.data.noising.NoisingDataset", "fairseq.data.LanguagePairDataset", "fairseq.data.TransformEosDataset", "torch.utils.data.DataLoader", "next", "src_dict.eos", "iter"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos"], ["", "", "def", "_get_noising_dataset_batch", "(", "\n", "self", ",", "src_tokens_no_pad", ",", "src_dict", ",", "append_eos_to_tgt", "=", "False", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Constructs a NoisingDataset and the corresponding\n        ``LanguagePairDataset(NoisingDataset(src), src)``. If\n        *append_eos_to_tgt* is True, wrap the source dataset in\n        :class:`TransformEosDataset` to append EOS to the clean source when\n        using it as the target.\n        \"\"\"", "\n", "src_dataset", "=", "test_utils", ".", "TestDataset", "(", "data", "=", "src_tokens_no_pad", ")", "\n", "\n", "noising_dataset", "=", "noising", ".", "NoisingDataset", "(", "\n", "src_dataset", "=", "src_dataset", ",", "\n", "src_dict", "=", "src_dict", ",", "\n", "seed", "=", "1234", ",", "\n", "max_word_shuffle_distance", "=", "3", ",", "\n", "word_dropout_prob", "=", "0.2", ",", "\n", "word_blanking_prob", "=", "0.2", ",", "\n", "noising_class", "=", "noising", ".", "UnsupervisedMTNoising", ",", "\n", ")", "\n", "tgt", "=", "src_dataset", "\n", "language_pair_dataset", "=", "LanguagePairDataset", "(", "\n", "src", "=", "noising_dataset", ",", "tgt", "=", "tgt", ",", "src_sizes", "=", "None", ",", "src_dict", "=", "src_dict", "\n", ")", "\n", "language_pair_dataset", "=", "TransformEosDataset", "(", "\n", "language_pair_dataset", ",", "src_dict", ".", "eos", "(", ")", ",", "\n", "append_eos_to_tgt", "=", "append_eos_to_tgt", ",", "\n", ")", "\n", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", "=", "language_pair_dataset", ",", "\n", "batch_size", "=", "2", ",", "\n", "collate_fn", "=", "language_pair_dataset", ".", "collater", ",", "\n", ")", "\n", "denoising_batch_result", "=", "next", "(", "iter", "(", "dataloader", ")", ")", "\n", "return", "denoising_batch_result", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising.test_noising_dataset_with_eos": [[448, 479], ["test_noising.TestDataNoising._get_test_data_with_bpe_cont_marker", "torch.t", "test_noising.TestDataNoising._get_noising_dataset_batch", "torch.LongTensor", "torch.LongTensor", "test_noising.TestDataNoising.assertTensorEqual", "test_noising.TestDataNoising.assertTensorEqual", "src_tokens_no_pad.append", "src_dict.eos", "src_dict.pad", "fairseq.utils.strip_pad", "src_dict.pad"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising._get_test_data_with_bpe_cont_marker", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising._get_noising_dataset_batch", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertTensorEqual", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertTensorEqual", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.strip_pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad"], ["", "def", "test_noising_dataset_with_eos", "(", "self", ")", ":", "\n", "        ", "src_dict", ",", "src_tokens", ",", "_", "=", "self", ".", "_get_test_data_with_bpe_cont_marker", "(", "\n", "append_eos", "=", "True", "\n", ")", "\n", "\n", "# Format data for src_dataset", "\n", "src_tokens", "=", "torch", ".", "t", "(", "src_tokens", ")", "\n", "src_tokens_no_pad", "=", "[", "]", "\n", "for", "src_sentence", "in", "src_tokens", ":", "\n", "            ", "src_tokens_no_pad", ".", "append", "(", "\n", "utils", ".", "strip_pad", "(", "tensor", "=", "src_sentence", ",", "pad", "=", "src_dict", ".", "pad", "(", ")", ")", "\n", ")", "\n", "", "denoising_batch_result", "=", "self", ".", "_get_noising_dataset_batch", "(", "\n", "src_tokens_no_pad", "=", "src_tokens_no_pad", ",", "src_dict", "=", "src_dict", "\n", ")", "\n", "\n", "eos", ",", "pad", "=", "src_dict", ".", "eos", "(", ")", ",", "src_dict", ".", "pad", "(", ")", "\n", "\n", "# Generated noisy source as source", "\n", "expected_src", "=", "torch", ".", "LongTensor", "(", "\n", "[", "[", "4", ",", "5", ",", "10", ",", "11", ",", "8", ",", "12", ",", "13", ",", "eos", "]", ",", "[", "pad", ",", "pad", ",", "pad", ",", "6", ",", "8", ",", "9", ",", "7", ",", "eos", "]", "]", "\n", ")", "\n", "# Original clean source as target (right-padded)", "\n", "expected_tgt", "=", "torch", ".", "LongTensor", "(", "\n", "[", "[", "4", ",", "5", ",", "10", ",", "11", ",", "8", ",", "12", ",", "13", ",", "eos", "]", ",", "[", "6", ",", "7", ",", "8", ",", "9", ",", "eos", ",", "pad", ",", "pad", ",", "pad", "]", "]", "\n", ")", "\n", "generated_src", "=", "denoising_batch_result", "[", "\"net_input\"", "]", "[", "\"src_tokens\"", "]", "\n", "tgt_tokens", "=", "denoising_batch_result", "[", "\"target\"", "]", "\n", "\n", "self", ".", "assertTensorEqual", "(", "expected_src", ",", "generated_src", ")", "\n", "self", ".", "assertTensorEqual", "(", "expected_tgt", ",", "tgt_tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising.test_noising_dataset_without_eos": [[480, 519], ["test_noising.TestDataNoising._get_test_data_with_bpe_cont_marker", "torch.t", "test_noising.TestDataNoising._get_noising_dataset_batch", "torch.LongTensor", "torch.LongTensor", "test_noising.TestDataNoising.assertTensorEqual", "test_noising.TestDataNoising.assertTensorEqual", "src_tokens_no_pad.append", "src_dict.eos", "src_dict.pad", "fairseq.utils.strip_pad", "src_dict.pad"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising._get_test_data_with_bpe_cont_marker", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising._get_noising_dataset_batch", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertTensorEqual", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertTensorEqual", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.strip_pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad"], ["", "def", "test_noising_dataset_without_eos", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Similar to test noising dataset with eos except that we have to set\n        *append_eos_to_tgt* to ``True``.\n        \"\"\"", "\n", "\n", "src_dict", ",", "src_tokens", ",", "_", "=", "self", ".", "_get_test_data_with_bpe_cont_marker", "(", "\n", "append_eos", "=", "False", "\n", ")", "\n", "\n", "# Format data for src_dataset", "\n", "src_tokens", "=", "torch", ".", "t", "(", "src_tokens", ")", "\n", "src_tokens_no_pad", "=", "[", "]", "\n", "for", "src_sentence", "in", "src_tokens", ":", "\n", "            ", "src_tokens_no_pad", ".", "append", "(", "\n", "utils", ".", "strip_pad", "(", "tensor", "=", "src_sentence", ",", "pad", "=", "src_dict", ".", "pad", "(", ")", ")", "\n", ")", "\n", "", "denoising_batch_result", "=", "self", ".", "_get_noising_dataset_batch", "(", "\n", "src_tokens_no_pad", "=", "src_tokens_no_pad", ",", "\n", "src_dict", "=", "src_dict", ",", "\n", "append_eos_to_tgt", "=", "True", ",", "\n", ")", "\n", "\n", "eos", ",", "pad", "=", "src_dict", ".", "eos", "(", ")", ",", "src_dict", ".", "pad", "(", ")", "\n", "\n", "# Generated noisy source as source", "\n", "expected_src", "=", "torch", ".", "LongTensor", "(", "\n", "[", "[", "4", ",", "5", ",", "10", ",", "11", ",", "8", ",", "12", ",", "13", "]", ",", "[", "pad", ",", "pad", ",", "pad", ",", "6", ",", "8", ",", "9", ",", "7", "]", "]", "\n", ")", "\n", "# Original clean source as target (right-padded)", "\n", "expected_tgt", "=", "torch", ".", "LongTensor", "(", "\n", "[", "[", "4", ",", "5", ",", "10", ",", "11", ",", "8", ",", "12", ",", "13", ",", "eos", "]", ",", "[", "6", ",", "7", ",", "8", ",", "9", ",", "eos", ",", "pad", ",", "pad", ",", "pad", "]", "]", "\n", ")", "\n", "\n", "generated_src", "=", "denoising_batch_result", "[", "\"net_input\"", "]", "[", "\"src_tokens\"", "]", "\n", "tgt_tokens", "=", "denoising_batch_result", "[", "\"target\"", "]", "\n", "\n", "self", ".", "assertTensorEqual", "(", "expected_src", ",", "generated_src", ")", "\n", "self", ".", "assertTensorEqual", "(", "expected_tgt", ",", "tgt_tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_noising.TestDataNoising.assertTensorEqual": [[520, 523], ["test_noising.TestDataNoising.assertEqual", "test_noising.TestDataNoising.assertEqual", "t1.size", "t2.size", "t1.ne().long().sum", "t1.ne().long", "t1.ne"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "assertTensorEqual", "(", "self", ",", "t1", ",", "t2", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "t1", ".", "size", "(", ")", ",", "t2", ".", "size", "(", ")", ",", "\"size mismatch\"", ")", "\n", "self", ".", "assertEqual", "(", "t1", ".", "ne", "(", "t2", ")", ".", "long", "(", ")", ".", "sum", "(", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_convtbc.TestConvTBC.test_convtbc": [[14, 41], ["fairseq.modules.ConvTBC", "torch.Conv1d", "torch.Conv1d", "fairseq.modules.ConvTBC.weight.data.copy_", "fairseq.modules.ConvTBC.bias.data.copy_", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn.data.transpose().transpose", "torch.randn.data.transpose().transpose", "fairseq.modules.ConvTBC.", "torch.Conv1d.", "test_convtbc.TestConvTBC.assertAlmostEqual", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn.transpose().transpose().contiguous", "torch.randn.transpose().transpose().contiguous", "fairseq.modules.ConvTBC.backward", "nn.Conv1d.backward", "test_convtbc.TestConvTBC.assertAlmostEqual", "test_convtbc.TestConvTBC.assertAlmostEqual", "test_convtbc.TestConvTBC.assertAlmostEqual", "torch.Conv1d.weight.data.transpose", "fairseq.modules.ConvTBC.data.transpose().transpose", "fairseq.modules.ConvTBC.size", "fairseq.modules.ConvTBC.weight.grad.data.transpose", "torch.randn.grad.data.transpose().transpose", "torch.randn.grad.data.transpose().transpose", "torch.randn.data.transpose", "torch.randn.data.transpose", "torch.randn.transpose().transpose", "torch.randn.transpose().transpose", "fairseq.modules.ConvTBC.data.transpose", "torch.randn.grad.data.transpose", "torch.randn.grad.data.transpose", "torch.randn.transpose", "torch.randn.transpose"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fconv.ConvTBC", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertAlmostEqual", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.dynamicconvFunction.backward", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.dynamicconvFunction.backward", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertAlmostEqual", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertAlmostEqual", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertAlmostEqual", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["    ", "def", "test_convtbc", "(", "self", ")", ":", "\n", "# ksz, in_channels, out_channels", "\n", "        ", "conv_tbc", "=", "ConvTBC", "(", "4", ",", "5", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "# out_channels, in_channels, ksz", "\n", "conv1d", "=", "nn", ".", "Conv1d", "(", "4", ",", "5", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "\n", "conv_tbc", ".", "weight", ".", "data", ".", "copy_", "(", "conv1d", ".", "weight", ".", "data", ".", "transpose", "(", "0", ",", "2", ")", ")", "\n", "conv_tbc", ".", "bias", ".", "data", ".", "copy_", "(", "conv1d", ".", "bias", ".", "data", ")", "\n", "\n", "input_tbc", "=", "torch", ".", "randn", "(", "7", ",", "2", ",", "4", ",", "requires_grad", "=", "True", ")", "\n", "input1d", "=", "input_tbc", ".", "data", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", "\n", "input1d", ".", "requires_grad", "=", "True", "\n", "\n", "output_tbc", "=", "conv_tbc", "(", "input_tbc", ")", "\n", "output1d", "=", "conv1d", "(", "input1d", ")", "\n", "\n", "self", ".", "assertAlmostEqual", "(", "output_tbc", ".", "data", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", ",", "output1d", ".", "data", ")", "\n", "\n", "grad_tbc", "=", "torch", ".", "randn", "(", "output_tbc", ".", "size", "(", ")", ")", "\n", "grad1d", "=", "grad_tbc", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "\n", "output_tbc", ".", "backward", "(", "grad_tbc", ")", "\n", "output1d", ".", "backward", "(", "grad1d", ")", "\n", "\n", "self", ".", "assertAlmostEqual", "(", "conv_tbc", ".", "weight", ".", "grad", ".", "data", ".", "transpose", "(", "0", ",", "2", ")", ",", "conv1d", ".", "weight", ".", "grad", ".", "data", ")", "\n", "self", ".", "assertAlmostEqual", "(", "conv_tbc", ".", "bias", ".", "grad", ".", "data", ",", "conv1d", ".", "bias", ".", "grad", ".", "data", ")", "\n", "self", ".", "assertAlmostEqual", "(", "input_tbc", ".", "grad", ".", "data", ".", "transpose", "(", "0", ",", "1", ")", ".", "transpose", "(", "1", ",", "2", ")", ",", "input1d", ".", "grad", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_convtbc.TestConvTBC.assertAlmostEqual": [[42, 45], ["test_convtbc.TestConvTBC.assertEqual", "test_convtbc.TestConvTBC.assertLess", "t1.size", "t2.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "assertAlmostEqual", "(", "self", ",", "t1", ",", "t2", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "t1", ".", "size", "(", ")", ",", "t2", ".", "size", "(", ")", ",", "\"size mismatch\"", ")", "\n", "self", ".", "assertLess", "(", "(", "t1", "-", "t2", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ",", "1e-4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_export.DummyTask.__init__": [[22, 29], ["fairseq.tasks.fairseq_task.FairseqTask.__init__", "test_export.get_dummy_dictionary", "getattr", "test_export.DummyTask.dictionary.add_symbol"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_export.get_dummy_dictionary", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "self", ".", "dictionary", "=", "get_dummy_dictionary", "(", ")", "\n", "if", "getattr", "(", "self", ".", "args", ",", "\"ctc\"", ",", "False", ")", ":", "\n", "            ", "self", ".", "dictionary", ".", "add_symbol", "(", "\"<ctc_blank>\"", ")", "\n", "", "self", ".", "src_dict", "=", "self", ".", "dictionary", "\n", "self", ".", "tgt_dict", "=", "self", ".", "dictionary", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_export.DummyTask.source_dictionary": [[30, 33], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "source_dictionary", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "src_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_export.DummyTask.target_dictionary": [[34, 37], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "target_dictionary", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dictionary", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_export.TestExportModels._test_save_and_load": [[62, 66], ["tempfile.NamedTemporaryFile", "scripted_module.save", "torch.jit.load"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.save", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.load"], ["    ", "def", "_test_save_and_load", "(", "self", ",", "scripted_module", ")", ":", "\n", "        ", "with", "tempfile", ".", "NamedTemporaryFile", "(", ")", "as", "f", ":", "\n", "            ", "scripted_module", ".", "save", "(", "f", ".", "name", ")", "\n", "torch", ".", "jit", ".", "load", "(", "f", ".", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_export.TestExportModels.test_export_multihead_attention": [[67, 71], ["fairseq.modules.multihead_attention.MultiheadAttention", "torch.jit.script", "test_export.TestExportModels._test_save_and_load"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_export.TestExportModels._test_save_and_load"], ["", "", "def", "test_export_multihead_attention", "(", "self", ")", ":", "\n", "        ", "module", "=", "multihead_attention", ".", "MultiheadAttention", "(", "embed_dim", "=", "8", ",", "num_heads", "=", "2", ")", "\n", "scripted", "=", "torch", ".", "jit", ".", "script", "(", "module", ")", "\n", "self", ".", "_test_save_and_load", "(", "scripted", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_export.TestExportModels.test_incremental_state_multihead_attention": [[72, 86], ["fairseq.modules.multihead_attention.MultiheadAttention", "torch.jit.script", "fairseq.modules.multihead_attention.MultiheadAttention", "torch.jit.script", "torch.jit.script.set_incremental_state", "torch.jit.script.set_incremental_state", "test_export.TestExportModels.assertEqual", "test_export.TestExportModels.assertEqual", "torch.jit.script.get_incremental_state", "torch.jit.script.get_incremental_state", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.set_incremental_state", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.set_incremental_state", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.get_incremental_state", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.get_incremental_state"], ["", "def", "test_incremental_state_multihead_attention", "(", "self", ")", ":", "\n", "        ", "module1", "=", "multihead_attention", ".", "MultiheadAttention", "(", "embed_dim", "=", "8", ",", "num_heads", "=", "2", ")", "\n", "module1", "=", "torch", ".", "jit", ".", "script", "(", "module1", ")", "\n", "module2", "=", "multihead_attention", ".", "MultiheadAttention", "(", "embed_dim", "=", "8", ",", "num_heads", "=", "2", ")", "\n", "module2", "=", "torch", ".", "jit", ".", "script", "(", "module2", ")", "\n", "\n", "state", "=", "{", "}", "\n", "state", "=", "module1", ".", "set_incremental_state", "(", "state", ",", "\"key\"", ",", "{", "\"a\"", ":", "torch", ".", "tensor", "(", "[", "1", "]", ")", "}", ")", "\n", "state", "=", "module2", ".", "set_incremental_state", "(", "state", ",", "\"key\"", ",", "{", "\"a\"", ":", "torch", ".", "tensor", "(", "[", "2", "]", ")", "}", ")", "\n", "v1", "=", "module1", ".", "get_incremental_state", "(", "state", ",", "\"key\"", ")", "[", "\"a\"", "]", "\n", "v2", "=", "module2", ".", "get_incremental_state", "(", "state", ",", "\"key\"", ")", "[", "\"a\"", "]", "\n", "\n", "self", ".", "assertEqual", "(", "v1", ",", "1", ")", "\n", "self", ".", "assertEqual", "(", "v2", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_export.TestExportModels.test_positional_embedding": [[87, 93], ["fairseq.modules.sinusoidal_positional_embedding.SinusoidalPositionalEmbedding", "torch.jit.script", "test_export.TestExportModels._test_save_and_load"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_export.TestExportModels._test_save_and_load"], ["", "def", "test_positional_embedding", "(", "self", ")", ":", "\n", "        ", "module", "=", "sinusoidal_positional_embedding", ".", "SinusoidalPositionalEmbedding", "(", "\n", "embedding_dim", "=", "8", ",", "padding_idx", "=", "1", "\n", ")", "\n", "scripted", "=", "torch", ".", "jit", ".", "script", "(", "module", ")", "\n", "self", ".", "_test_save_and_load", "(", "scripted", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_export.TestExportModels.test_export_transformer": [[94, 104], ["unittest.skipIf", "test_export.get_dummy_task_and_parser", "fairseq.models.transformer.TransformerModel.add_args", "parser.parse_args", "fairseq.models.transformer.TransformerModel.build_model", "torch.jit.script", "test_export.TestExportModels._test_save_and_load"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_export.get_dummy_task_and_parser", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.add_args", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.build_model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_export.TestExportModels._test_save_and_load"], ["", "@", "unittest", ".", "skipIf", "(", "\n", "torch", ".", "__version__", "<", "\"1.5.0\"", ",", "\"Targeting OSS scriptability for the 1.5 release\"", "\n", ")", "\n", "def", "test_export_transformer", "(", "self", ")", ":", "\n", "        ", "task", ",", "parser", "=", "get_dummy_task_and_parser", "(", ")", "\n", "TransformerModel", ".", "add_args", "(", "parser", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", "[", "]", ")", "\n", "model", "=", "TransformerModel", ".", "build_model", "(", "args", ",", "task", ")", "\n", "scripted", "=", "torch", ".", "jit", ".", "script", "(", "model", ")", "\n", "self", ".", "_test_save_and_load", "(", "scripted", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_export.get_dummy_dictionary": [[39, 45], ["fairseq.data.dictionary.Dictionary", "enumerate", "range", "fairseq.data.dictionary.Dictionary.add_symbol"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol"], ["", "", "def", "get_dummy_dictionary", "(", "vocab_size", "=", "DEFAULT_TEST_VOCAB_SIZE", ")", ":", "\n", "    ", "dummy_dict", "=", "Dictionary", "(", ")", "\n", "# add dummy symbol to satisfy vocab size", "\n", "for", "id", ",", "_", "in", "enumerate", "(", "range", "(", "vocab_size", ")", ")", ":", "\n", "        ", "dummy_dict", ".", "add_symbol", "(", "\"{}\"", ".", "format", "(", "id", ")", ",", "1000", ")", "\n", "", "return", "dummy_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_export.get_dummy_task_and_parser": [[47, 59], ["argparse.ArgumentParser", "DummyTask.add_args", "argparse.ArgumentParser.parse_args", "DummyTask.setup_task"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.add_args", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyLMTask.setup_task"], ["", "def", "get_dummy_task_and_parser", "(", ")", ":", "\n", "    ", "\"\"\"\n    Return a dummy task and argument parser, which can be used to\n    create a model/criterion.\n    \"\"\"", "\n", "parser", "=", "argparse", ".", "ArgumentParser", "(", "\n", "description", "=", "\"test_dummy_s2s_task\"", ",", "argument_default", "=", "argparse", ".", "SUPPRESS", "\n", ")", "\n", "DummyTask", ".", "add_args", "(", "parser", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", "[", "]", ")", "\n", "task", "=", "DummyTask", ".", "setup_task", "(", "args", ")", "\n", "return", "task", ",", "parser", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_scorer.TestSequenceScorer.test_sequence_scorer": [[18, 92], ["tests.dummy_dictionary", "test_sequence_scorer.TestSequenceScorer.assertEqual", "test_sequence_scorer.TestSequenceScorer.assertEqual", "test_sequence_scorer.TestSequenceScorer.assertEqual", "tests.dummy_dictionary.eos", "tests.dummy_dataloader", "argparse.Namespace", "tests.TestTranslationTask.setup_task", "tests.TestTranslationTask.setup_task.build_model", "fairseq.sequence_scorer.SequenceScorer", "tests.dummy_dictionary.pad", "tests.dummy_dictionary.eos", "tests.dummy_dictionary.unk", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "tests.TestTranslationTask.setup_task.inference_step", "zip", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "sample[].tolist", "test_sequence_scorer.TestSequenceScorer.assertHypoTokens", "test_sequence_scorer.TestSequenceScorer.assertHypoScore"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.utils.dummy_dictionary", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.utils.dummy_dataloader", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyLMTask.setup_task", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.build_model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.unk", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.translation_moe.TranslationMoETask.inference_step", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertHypoTokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestDiverseSiblingsSearch.assertHypoScore"], ["    ", "def", "test_sequence_scorer", "(", "self", ")", ":", "\n", "# construct dummy dictionary", "\n", "        ", "d", "=", "test_utils", ".", "dummy_dictionary", "(", "vocab_size", "=", "2", ")", "\n", "self", ".", "assertEqual", "(", "d", ".", "pad", "(", ")", ",", "1", ")", "\n", "self", ".", "assertEqual", "(", "d", ".", "eos", "(", ")", ",", "2", ")", "\n", "self", ".", "assertEqual", "(", "d", ".", "unk", "(", ")", ",", "3", ")", "\n", "eos", "=", "d", ".", "eos", "(", ")", "\n", "w1", "=", "4", "\n", "w2", "=", "5", "\n", "\n", "# construct dataloader", "\n", "data", "=", "[", "\n", "{", "\n", "'source'", ":", "torch", ".", "LongTensor", "(", "[", "w1", ",", "w2", ",", "eos", "]", ")", ",", "\n", "'target'", ":", "torch", ".", "LongTensor", "(", "[", "w1", ",", "w2", ",", "w1", ",", "eos", "]", ")", ",", "\n", "}", ",", "\n", "{", "\n", "'source'", ":", "torch", ".", "LongTensor", "(", "[", "w2", ",", "eos", "]", ")", ",", "\n", "'target'", ":", "torch", ".", "LongTensor", "(", "[", "w2", ",", "w1", ",", "eos", "]", ")", ",", "\n", "}", ",", "\n", "{", "\n", "'source'", ":", "torch", ".", "LongTensor", "(", "[", "w2", ",", "eos", "]", ")", ",", "\n", "'target'", ":", "torch", ".", "LongTensor", "(", "[", "w2", ",", "eos", "]", ")", ",", "\n", "}", ",", "\n", "]", "\n", "data_itr", "=", "test_utils", ".", "dummy_dataloader", "(", "data", ")", "\n", "\n", "# specify expected output probabilities", "\n", "args", "=", "argparse", ".", "Namespace", "(", ")", "\n", "unk", "=", "0.", "\n", "args", ".", "beam_probs", "=", "[", "\n", "# step 0:", "\n", "torch", ".", "FloatTensor", "(", "[", "\n", "# eos      w1   w2", "\n", "[", "0.0", ",", "unk", ",", "0.6", ",", "0.4", "]", ",", "# sentence 1", "\n", "[", "0.0", ",", "unk", ",", "0.4", ",", "0.6", "]", ",", "# sentence 2", "\n", "[", "0.0", ",", "unk", ",", "0.7", ",", "0.3", "]", ",", "# sentence 3", "\n", "]", ")", ",", "\n", "# step 1:", "\n", "torch", ".", "FloatTensor", "(", "[", "\n", "# eos      w1   w2", "\n", "[", "0.0", ",", "unk", ",", "0.2", ",", "0.7", "]", ",", "# sentence 1", "\n", "[", "0.0", ",", "unk", ",", "0.8", ",", "0.2", "]", ",", "# sentence 2", "\n", "[", "0.7", ",", "unk", ",", "0.1", ",", "0.2", "]", ",", "# sentence 3", "\n", "]", ")", ",", "\n", "# step 2:", "\n", "torch", ".", "FloatTensor", "(", "[", "\n", "# eos       w1    w2", "\n", "[", "0.10", ",", "unk", ",", "0.50", ",", "0.4", "]", ",", "# sentence 1", "\n", "[", "0.15", ",", "unk", ",", "0.15", ",", "0.7", "]", ",", "# sentence 2", "\n", "[", "0.00", ",", "unk", ",", "0.00", ",", "0.0", "]", ",", "# sentence 3", "\n", "]", ")", ",", "\n", "# step 3:", "\n", "torch", ".", "FloatTensor", "(", "[", "\n", "# eos      w1    w2", "\n", "[", "0.9", ",", "unk", ",", "0.05", ",", "0.05", "]", ",", "# sentence 1", "\n", "[", "0.0", ",", "unk", ",", "0.00", ",", "0.0", "]", ",", "# sentence 2", "\n", "[", "0.0", ",", "unk", ",", "0.00", ",", "0.0", "]", ",", "# sentence 3", "\n", "]", ")", ",", "\n", "]", "\n", "expected_scores", "=", "[", "\n", "[", "0.6", ",", "0.7", ",", "0.5", ",", "0.9", "]", ",", "# sentence 1", "\n", "[", "0.6", ",", "0.8", ",", "0.15", "]", ",", "# sentence 2", "\n", "[", "0.3", ",", "0.7", "]", ",", "# sentence 3", "\n", "]", "\n", "\n", "task", "=", "test_utils", ".", "TestTranslationTask", ".", "setup_task", "(", "args", ",", "d", ",", "d", ")", "\n", "model", "=", "task", ".", "build_model", "(", "args", ")", "\n", "scorer", "=", "SequenceScorer", "(", "task", ".", "target_dictionary", ")", "\n", "for", "sample", "in", "data_itr", ":", "\n", "            ", "hypos", "=", "task", ".", "inference_step", "(", "scorer", ",", "[", "model", "]", ",", "sample", ")", "\n", "for", "id", ",", "hypos_id", "in", "zip", "(", "sample", "[", "'id'", "]", ".", "tolist", "(", ")", ",", "hypos", ")", ":", "\n", "                ", "self", ".", "assertHypoTokens", "(", "hypos_id", "[", "0", "]", ",", "data", "[", "id", "]", "[", "'target'", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos_id", "[", "0", "]", ",", "expected_scores", "[", "id", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_scorer.TestSequenceScorer.assertHypoTokens": [[93, 95], ["test_sequence_scorer.TestSequenceScorer.assertTensorEqual", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertTensorEqual"], ["", "", "", "def", "assertHypoTokens", "(", "self", ",", "hypo", ",", "tokens", ")", ":", "\n", "        ", "self", ".", "assertTensorEqual", "(", "hypo", "[", "'tokens'", "]", ",", "torch", ".", "LongTensor", "(", "tokens", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_scorer.TestSequenceScorer.assertHypoScore": [[96, 104], ["torch.FloatTensor().log", "test_sequence_scorer.TestSequenceScorer.assertAlmostEqual", "test_sequence_scorer.TestSequenceScorer.assertEqual", "torch.FloatTensor().log.sum", "test_sequence_scorer.TestSequenceScorer.assertLess", "torch.FloatTensor().log.numel", "hypo[].numel", "abs", "torch.FloatTensor", "torch.FloatTensor().log.numel"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertAlmostEqual"], ["", "def", "assertHypoScore", "(", "self", ",", "hypo", ",", "pos_probs", ",", "normalized", "=", "True", ",", "lenpen", "=", "1.", ")", ":", "\n", "        ", "pos_scores", "=", "torch", ".", "FloatTensor", "(", "pos_probs", ")", ".", "log", "(", ")", "\n", "self", ".", "assertAlmostEqual", "(", "hypo", "[", "'positional_scores'", "]", ",", "pos_scores", ")", "\n", "self", ".", "assertEqual", "(", "pos_scores", ".", "numel", "(", ")", ",", "hypo", "[", "'tokens'", "]", ".", "numel", "(", ")", ")", "\n", "score", "=", "pos_scores", ".", "sum", "(", ")", "\n", "if", "normalized", ":", "\n", "            ", "score", "/=", "pos_scores", ".", "numel", "(", ")", "**", "lenpen", "\n", "", "self", ".", "assertLess", "(", "abs", "(", "score", "-", "hypo", "[", "'score'", "]", ")", ",", "1e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_scorer.TestSequenceScorer.assertAlmostEqual": [[105, 108], ["test_sequence_scorer.TestSequenceScorer.assertEqual", "test_sequence_scorer.TestSequenceScorer.assertLess", "t1.size", "t2.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "assertAlmostEqual", "(", "self", ",", "t1", ",", "t2", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "t1", ".", "size", "(", ")", ",", "t2", ".", "size", "(", ")", ",", "\"size mismatch\"", ")", "\n", "self", ".", "assertLess", "(", "(", "t1", "-", "t2", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ",", "1e-4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_scorer.TestSequenceScorer.assertTensorEqual": [[109, 112], ["test_sequence_scorer.TestSequenceScorer.assertEqual", "test_sequence_scorer.TestSequenceScorer.assertEqual", "t1.size", "t2.size", "t1.ne().long().sum", "t1.ne().long", "t1.ne"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "assertTensorEqual", "(", "self", ",", "t1", ",", "t2", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "t1", ".", "size", "(", ")", ",", "t2", ".", "size", "(", ")", ",", "\"size mismatch\"", ")", "\n", "self", ".", "assertEqual", "(", "t1", ".", "ne", "(", "t2", ")", ".", "long", "(", ")", ".", "sum", "(", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_bmuf.Model.__init__": [[18, 21], ["torch.Module.__init__", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear"], ["    ", "def", "__init__", "(", "self", ",", "input_size", ",", "output_size", ")", ":", "\n", "        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "input_size", ",", "output_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_bmuf.Model.forward": [[22, 25], ["test_bmuf.Model.fc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "output", "=", "self", ".", "fc", "(", "input", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_bmuf.TestBMUF.bmuf_process": [[110, 127], ["multiprocessing.Manager().dict", "torch.multiprocessing.get_context", "torch.multiprocessing.get_context", "torch.multiprocessing.get_context", "torch.multiprocessing.get_context", "range", "test_bmuf.TestBMUF.assertAlmostEqual", "torch.multiprocessing.get_context.Process", "torch.multiprocessing.get_context.Process", "torch.multiprocessing.get_context.Process.start", "processes.append", "torch.multiprocessing.get_context.Process.join", "len", "multiprocessing.Manager"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertAlmostEqual", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.StopwatchMeter.start"], ["    ", "def", "bmuf_process", "(", "self", ",", "args", ",", "iterations", ")", ":", "\n", "        ", "processes", "=", "[", "]", "\n", "results", "=", "Manager", "(", ")", ".", "dict", "(", ")", "\n", "ctx", "=", "torch", ".", "multiprocessing", ".", "get_context", "(", "\"spawn\"", ")", "\n", "for", "rank", "in", "range", "(", "args", ".", "distributed_world_size", ")", ":", "\n", "            ", "p", "=", "ctx", ".", "Process", "(", "\n", "target", "=", "single_gpu_training", ",", "args", "=", "(", "args", ",", "rank", ",", "iterations", ",", "results", ")", "\n", ")", "\n", "p", ".", "start", "(", ")", "\n", "processes", ".", "append", "(", "p", ")", "\n", "\n", "", "for", "p", "in", "processes", ":", "\n", "            ", "p", ".", "join", "(", ")", "\n", "\n", "# Make sure params in both machines are same", "\n", "", "assert", "len", "(", "results", ")", "==", "2", "\n", "self", ".", "assertAlmostEqual", "(", "results", "[", "0", "]", ",", "results", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_bmuf.TestBMUF.test_bmuf_sync": [[128, 133], ["test_bmuf.setup_args", "test_bmuf.TestBMUF.bmuf_process"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_bmuf.setup_args", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_bmuf.TestBMUF.bmuf_process"], ["", "def", "test_bmuf_sync", "(", "self", ")", ":", "\n", "# Train model for 1 iteration and do bmuf sync without doing warmup", "\n", "        ", "args", "=", "setup_args", "(", ")", "\n", "iterations", "=", "1", "\n", "self", ".", "bmuf_process", "(", "args", ",", "iterations", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_bmuf.TestBMUF.test_warmup_sync": [[134, 140], ["test_bmuf.setup_args", "test_bmuf.TestBMUF.bmuf_process"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_bmuf.setup_args", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_bmuf.TestBMUF.bmuf_process"], ["", "def", "test_warmup_sync", "(", "self", ")", ":", "\n", "# Train model for 20 iteration and do warmup sync without doing bmuf sync", "\n", "        ", "args", "=", "setup_args", "(", ")", "\n", "args", ".", "warmup_iterations", "=", "20", "\n", "iterations", "=", "20", "\n", "self", ".", "bmuf_process", "(", "args", ",", "iterations", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_bmuf.TestBMUF.test_warmup_sync_bmuf_sync": [[141, 149], ["test_bmuf.setup_args", "test_bmuf.TestBMUF.bmuf_process"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_bmuf.setup_args", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_bmuf.TestBMUF.bmuf_process"], ["", "def", "test_warmup_sync_bmuf_sync", "(", "self", ")", ":", "\n", "# Train model for 25 iteration and do warmup sync after 20 iteration", "\n", "# and bmuf sync after 25 iteration", "\n", "        ", "args", "=", "setup_args", "(", ")", "\n", "args", ".", "warmup_iterations", "=", "20", "\n", "args", ".", "global_sync_iter", "=", "5", "\n", "iterations", "=", "25", "\n", "self", ".", "bmuf_process", "(", "args", ",", "iterations", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_bmuf.TestBMUF.assertAlmostEqual": [[150, 153], ["test_bmuf.TestBMUF.assertEqual", "test_bmuf.TestBMUF.assertLess", "t1.size", "t2.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "assertAlmostEqual", "(", "self", ",", "t1", ",", "t2", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "t1", ".", "size", "(", ")", ",", "t2", ".", "size", "(", ")", ",", "\"size mismatch\"", ")", "\n", "self", ".", "assertLess", "(", "(", "t1", "-", "t2", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ",", "1e-4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_bmuf.setup_model_loss_criterion": [[27, 44], ["fairseq.distributed_utils.distributed_init", "torch.manual_seed", "torch.manual_seed", "test_bmuf.Model", "torch.CrossEntropyLoss", "fairseq.optim.sgd.SGD", "fairseq.optim.FairseqBMUF", "model.cuda.cuda", "loss_fn.cuda.cuda", "model.cuda.parameters"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.distributed_utils.distributed_init"], ["", "", "def", "setup_model_loss_criterion", "(", "args", ",", "rank", ",", "is_cuda", ")", ":", "\n", "    ", "\"\"\"\n    setup model, criterion and optimizer based on input args\n    \"\"\"", "\n", "args", ".", "distributed_rank", "=", "rank", "\n", "distributed_utils", ".", "distributed_init", "(", "args", ")", "\n", "torch", ".", "manual_seed", "(", "1", ")", "\n", "model", "=", "Model", "(", "args", ".", "input_size", ",", "args", ".", "nb_classes", ")", "\n", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "if", "is_cuda", ":", "\n", "        ", "model", "=", "model", ".", "cuda", "(", ")", "\n", "loss_fn", "=", "loss_fn", ".", "cuda", "(", ")", "\n", "\n", "", "optimizer", "=", "optim", ".", "sgd", ".", "SGD", "(", "args", ",", "model", ".", "parameters", "(", ")", ")", "\n", "optimizer", "=", "optim", ".", "FairseqBMUF", "(", "args", ",", "optimizer", ")", "\n", "\n", "return", "model", ",", "loss_fn", ",", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_bmuf.train_step": [[46, 53], ["model.train", "model", "loss_fn", "optimizer.backward", "optimizer.step"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.train.train", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.dynamicconvFunction.backward", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.polynomial_decay_schedule.PolynomialDecaySchedule.step"], ["", "def", "train_step", "(", "input", ",", "target", ",", "model", ",", "loss_fn", ",", "optimizer", ")", ":", "\n", "    ", "\"\"\"Do forward, backward and parameter update.\"\"\"", "\n", "model", ".", "train", "(", ")", "\n", "output", "=", "model", "(", "input", ")", "\n", "loss", "=", "loss_fn", "(", "output", ",", "target", ")", "\n", "optimizer", ".", "backward", "(", "loss", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_bmuf.single_gpu_training": [[55, 80], ["torch.cuda.is_available", "torch.cuda.is_available", "test_bmuf.setup_model_loss_criterion", "range", "model.parameters", "torch.cuda.set_device", "torch.cuda.set_device", "torch.randn", "torch.randn", "torch.empty().random_", "torch.empty().random_", "test_bmuf.train_step", "input.cuda.cuda", "target.cuda.cuda", "len", "torch.cat", "torch.cat", "torch.empty", "torch.empty", "param.flatten().cpu", "param.flatten", "param.flatten().cpu", "param.flatten"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_bmuf.setup_model_loss_criterion", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_bmuf.train_step"], ["", "def", "single_gpu_training", "(", "args", ",", "rank", ",", "iterations", ",", "shared_results", ")", ":", "\n", "\n", "    ", "is_cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "if", "is_cuda", ":", "\n", "        ", "torch", ".", "cuda", ".", "set_device", "(", "rank", ")", "\n", "\n", "", "model", ",", "loss_fn", ",", "optimizer", "=", "setup_model_loss_criterion", "(", "args", ",", "rank", ",", "is_cuda", ")", "\n", "\n", "for", "_", "in", "range", "(", "iterations", ")", ":", "\n", "        ", "input", "=", "torch", ".", "randn", "(", "1", ",", "args", ".", "input_size", ")", "\n", "target", "=", "torch", ".", "empty", "(", "args", ".", "batch_size", ",", "dtype", "=", "torch", ".", "long", ")", ".", "random_", "(", "args", ".", "nb_classes", ")", "\n", "\n", "if", "is_cuda", ":", "\n", "            ", "input", "=", "input", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "", "train_step", "(", "input", ",", "target", ",", "model", ",", "loss_fn", ",", "optimizer", ")", "\n", "\n", "", "results", "=", "[", "]", "\n", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "if", "len", "(", "results", ")", "==", "0", ":", "\n", "            ", "results", "=", "param", ".", "flatten", "(", ")", ".", "cpu", "(", ")", ".", "data", "\n", "", "else", ":", "\n", "            ", "results", "=", "torch", ".", "cat", "(", "(", "results", ",", "param", ".", "flatten", "(", ")", ".", "cpu", "(", ")", ".", "data", ")", ",", "0", ")", "\n", "\n", "", "", "shared_results", "[", "rank", "]", "=", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_bmuf.setup_args": [[82, 106], ["argparse.Namespace", "random.randint"], "function", ["None"], ["", "def", "setup_args", "(", ")", ":", "\n", "    ", "args", "=", "argparse", ".", "Namespace", "(", ")", "\n", "args", ".", "global_sync_iter", "=", "20", "\n", "args", ".", "block_momentum", "=", "0.875", "\n", "args", ".", "block_lr", "=", "0.5", "\n", "args", ".", "input_size", "=", "5", "\n", "args", ".", "nb_classes", "=", "2", "\n", "args", ".", "batch_size", "=", "1", "\n", "args", ".", "lr", "=", "[", "1e-3", "]", "\n", "args", ".", "momentum", "=", "0", "\n", "args", ".", "weight_decay", "=", "0", "\n", "args", ".", "warmup_iterations", "=", "0", "\n", "args", ".", "use_nbm", "=", "True", "\n", "args", ".", "average_sync", "=", "True", "\n", "args", ".", "global_sync_iter", "=", "1", "\n", "args", ".", "distributed_backend", "=", "\"gloo\"", "\n", "\n", "args", ".", "distributed_world_size", "=", "2", "\n", "port", "=", "random", ".", "randint", "(", "10000", ",", "20000", ")", "\n", "args", ".", "distributed_init_method", "=", "\"tcp://localhost:{port}\"", ".", "format", "(", "port", "=", "port", ")", "\n", "args", ".", "distributed_init_host", "=", "\"localhost\"", "\n", "args", ".", "distributed_port", "=", "port", "+", "1", "\n", "args", ".", "local_world_size", "=", "args", ".", "distributed_world_size", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_backtranslation_dataset.TestBacktranslationDataset.setUp": [[22, 31], ["tests.sequence_generator_setup", "tests.TestDataset", "torch.cuda.is_available"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.utils.sequence_generator_setup"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "tgt_dict", ",", "self", ".", "w1", ",", "self", ".", "w2", ",", "self", ".", "src_tokens", ",", "self", ".", "src_lengths", ",", "self", ".", "model", "=", "(", "\n", "test_utils", ".", "sequence_generator_setup", "(", ")", "\n", ")", "\n", "\n", "dummy_src_samples", "=", "self", ".", "src_tokens", "\n", "\n", "self", ".", "tgt_dataset", "=", "test_utils", ".", "TestDataset", "(", "data", "=", "dummy_src_samples", ")", "\n", "self", ".", "cuda", "=", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_backtranslation_dataset.TestBacktranslationDataset._backtranslation_dataset_helper": [[32, 93], ["fairseq.data.LanguagePairDataset", "fairseq.sequence_generator.SequenceGenerator", "fairseq.data.BacktranslationDataset", "torch.utils.data.DataLoader", "next", "torch.LongTensor", "torch.LongTensor", "test_backtranslation_dataset.TestBacktranslationDataset.assertTensorEqual", "test_backtranslation_dataset.TestBacktranslationDataset.assertTensorEqual", "iter", "test_backtranslation_dataset.TestBacktranslationDataset.tgt_dict.eos", "test_backtranslation_dataset.TestBacktranslationDataset.tgt_dict.pad", "fairseq.data.TransformEosDataset", "fairseq.sequence_generator.SequenceGenerator.generate", "fairseq.data.TransformEosDataset", "test_backtranslation_dataset.TestBacktranslationDataset.tgt_dict.eos", "test_backtranslation_dataset.TestBacktranslationDataset.tgt_dict.eos"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertTensorEqual", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertTensorEqual", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.hub_interface.BARTHubInterface.generate", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos"], ["", "def", "_backtranslation_dataset_helper", "(", "\n", "self", ",", "remove_eos_from_input_src", ",", "remove_eos_from_output_src", ",", "\n", ")", ":", "\n", "        ", "tgt_dataset", "=", "LanguagePairDataset", "(", "\n", "src", "=", "self", ".", "tgt_dataset", ",", "\n", "src_sizes", "=", "self", ".", "tgt_dataset", ".", "sizes", ",", "\n", "src_dict", "=", "self", ".", "tgt_dict", ",", "\n", "tgt", "=", "None", ",", "\n", "tgt_sizes", "=", "None", ",", "\n", "tgt_dict", "=", "None", ",", "\n", ")", "\n", "\n", "generator", "=", "SequenceGenerator", "(", "\n", "tgt_dict", "=", "self", ".", "tgt_dict", ",", "\n", "max_len_a", "=", "0", ",", "\n", "max_len_b", "=", "200", ",", "\n", "beam_size", "=", "2", ",", "\n", "unk_penalty", "=", "0", ",", "\n", ")", "\n", "\n", "backtranslation_dataset", "=", "BacktranslationDataset", "(", "\n", "tgt_dataset", "=", "TransformEosDataset", "(", "\n", "dataset", "=", "tgt_dataset", ",", "\n", "eos", "=", "self", ".", "tgt_dict", ".", "eos", "(", ")", ",", "\n", "# remove eos from the input src", "\n", "remove_eos_from_src", "=", "remove_eos_from_input_src", ",", "\n", ")", ",", "\n", "src_dict", "=", "self", ".", "tgt_dict", ",", "\n", "backtranslation_fn", "=", "(", "\n", "lambda", "sample", ":", "generator", ".", "generate", "(", "[", "self", ".", "model", "]", ",", "sample", ")", "\n", ")", ",", "\n", "output_collater", "=", "TransformEosDataset", "(", "\n", "dataset", "=", "tgt_dataset", ",", "\n", "eos", "=", "self", ".", "tgt_dict", ".", "eos", "(", ")", ",", "\n", "# if we remove eos from the input src, then we need to add it", "\n", "# back to the output tgt", "\n", "append_eos_to_tgt", "=", "remove_eos_from_input_src", ",", "\n", "remove_eos_from_src", "=", "remove_eos_from_output_src", ",", "\n", ")", ".", "collater", ",", "\n", "cuda", "=", "self", ".", "cuda", ",", "\n", ")", "\n", "dataloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "backtranslation_dataset", ",", "\n", "batch_size", "=", "2", ",", "\n", "collate_fn", "=", "backtranslation_dataset", ".", "collater", ",", "\n", ")", "\n", "backtranslation_batch_result", "=", "next", "(", "iter", "(", "dataloader", ")", ")", "\n", "\n", "eos", ",", "pad", ",", "w1", ",", "w2", "=", "self", ".", "tgt_dict", ".", "eos", "(", ")", ",", "self", ".", "tgt_dict", ".", "pad", "(", ")", ",", "self", ".", "w1", ",", "self", ".", "w2", "\n", "\n", "# Note that we sort by src_lengths and add left padding, so actually", "\n", "# ids will look like: [1, 0]", "\n", "expected_src", "=", "torch", ".", "LongTensor", "(", "[", "[", "w1", ",", "w2", ",", "w1", ",", "eos", "]", ",", "[", "pad", ",", "pad", ",", "w1", ",", "eos", "]", "]", ")", "\n", "if", "remove_eos_from_output_src", ":", "\n", "            ", "expected_src", "=", "expected_src", "[", ":", ",", ":", "-", "1", "]", "\n", "", "expected_tgt", "=", "torch", ".", "LongTensor", "(", "[", "[", "w1", ",", "w2", ",", "eos", "]", ",", "[", "w1", ",", "w2", ",", "eos", "]", "]", ")", "\n", "generated_src", "=", "backtranslation_batch_result", "[", "\"net_input\"", "]", "[", "\"src_tokens\"", "]", "\n", "tgt_tokens", "=", "backtranslation_batch_result", "[", "\"target\"", "]", "\n", "\n", "self", ".", "assertTensorEqual", "(", "expected_src", ",", "generated_src", ")", "\n", "self", ".", "assertTensorEqual", "(", "expected_tgt", ",", "tgt_tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_backtranslation_dataset.TestBacktranslationDataset.test_backtranslation_dataset_no_eos_in_output_src": [[94, 97], ["test_backtranslation_dataset.TestBacktranslationDataset._backtranslation_dataset_helper"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_backtranslation_dataset.TestBacktranslationDataset._backtranslation_dataset_helper"], ["", "def", "test_backtranslation_dataset_no_eos_in_output_src", "(", "self", ")", ":", "\n", "        ", "self", ".", "_backtranslation_dataset_helper", "(", "\n", "remove_eos_from_input_src", "=", "False", ",", "remove_eos_from_output_src", "=", "True", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_backtranslation_dataset.TestBacktranslationDataset.test_backtranslation_dataset_with_eos_in_output_src": [[99, 102], ["test_backtranslation_dataset.TestBacktranslationDataset._backtranslation_dataset_helper"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_backtranslation_dataset.TestBacktranslationDataset._backtranslation_dataset_helper"], ["", "def", "test_backtranslation_dataset_with_eos_in_output_src", "(", "self", ")", ":", "\n", "        ", "self", ".", "_backtranslation_dataset_helper", "(", "\n", "remove_eos_from_input_src", "=", "False", ",", "remove_eos_from_output_src", "=", "False", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_backtranslation_dataset.TestBacktranslationDataset.test_backtranslation_dataset_no_eos_in_input_src": [[104, 107], ["test_backtranslation_dataset.TestBacktranslationDataset._backtranslation_dataset_helper"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_backtranslation_dataset.TestBacktranslationDataset._backtranslation_dataset_helper"], ["", "def", "test_backtranslation_dataset_no_eos_in_input_src", "(", "self", ")", ":", "\n", "        ", "self", ".", "_backtranslation_dataset_helper", "(", "\n", "remove_eos_from_input_src", "=", "True", ",", "remove_eos_from_output_src", "=", "False", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_backtranslation_dataset.TestBacktranslationDataset.assertTensorEqual": [[109, 112], ["test_backtranslation_dataset.TestBacktranslationDataset.assertEqual", "test_backtranslation_dataset.TestBacktranslationDataset.assertEqual", "t1.size", "t2.size", "t1.ne().long().sum", "t1.ne().long", "t1.ne"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "assertTensorEqual", "(", "self", ",", "t1", ",", "t2", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "t1", ".", "size", "(", ")", ",", "t2", ".", "size", "(", ")", ",", "\"size mismatch\"", ")", "\n", "self", ".", "assertEqual", "(", "t1", ".", "ne", "(", "t2", ")", ".", "long", "(", ")", ".", "sum", "(", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_file_io.TestFileIO.setUpClass": [[21, 28], ["tempfile.mkdtemp", "open", "f.write", "f.flush", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write"], ["@", "classmethod", "\n", "def", "setUpClass", "(", "cls", ")", "->", "None", ":", "\n", "        ", "cls", ".", "_tmpdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "cls", ".", "_tmpdir", ",", "\"test.txt\"", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "cls", ".", "_tmpfile", "=", "f", ".", "name", "\n", "f", ".", "write", "(", "cls", ".", "_tmpfile_contents", ")", "\n", "f", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_file_io.TestFileIO.tearDownClass": [[29, 34], ["shutil.rmtree"], "methods", ["None"], ["", "", "@", "classmethod", "\n", "def", "tearDownClass", "(", "cls", ")", "->", "None", ":", "\n", "# Cleanup temp working dir.", "\n", "        ", "if", "cls", ".", "_tmpdir", "is", "not", "None", ":", "\n", "            ", "shutil", ".", "rmtree", "(", "cls", ".", "_tmpdir", ")", "# type: ignore", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_file_io.TestFileIO.test_file_io": [[35, 40], ["test_file_io.TestFileIO.assertEqual", "PathManager.open", "f.read", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.dataset_reader.DatasetReader.read"], ["", "", "def", "test_file_io", "(", "self", ")", ":", "\n", "        ", "from", "fairseq", ".", "file_io", "import", "PathManager", "\n", "with", "PathManager", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "_tmpdir", ",", "\"test.txt\"", ")", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "s", "=", "f", ".", "read", "(", ")", "\n", "", "self", ".", "assertEqual", "(", "s", ",", "self", ".", "_tmpfile_contents", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_file_io.TestFileIO.test_file_io_oss": [[41, 48], ["unittest.mock.MagicMock", "test_file_io.TestFileIO.assertEqual", "PathManager.open", "f.read", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.dataset_reader.DatasetReader.read"], ["", "def", "test_file_io_oss", "(", "self", ")", ":", "\n", "# Mock fvcore to simulate oss environment.", "\n", "        ", "sys", ".", "modules", "[", "'fvcore'", "]", "=", "MagicMock", "(", ")", "\n", "from", "fairseq", ".", "file_io", "import", "PathManager", "\n", "with", "PathManager", ".", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "_tmpdir", ",", "\"test.txt\"", ")", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "s", "=", "f", ".", "read", "(", ")", "\n", "", "self", ".", "assertEqual", "(", "s", ",", "self", ".", "_tmpfile_contents", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_utils.TestUtils.test_convert_padding_direction": [[15, 42], ["torch.LongTensor", "torch.LongTensor", "test_utils.TestUtils.assertAlmostEqual", "test_utils.TestUtils.assertAlmostEqual", "fairseq.utils.convert_padding_direction", "fairseq.utils.convert_padding_direction"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertAlmostEqual", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertAlmostEqual", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.convert_padding_direction", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.convert_padding_direction"], ["    ", "def", "test_convert_padding_direction", "(", "self", ")", ":", "\n", "        ", "pad", "=", "1", "\n", "left_pad", "=", "torch", ".", "LongTensor", "(", "[", "\n", "[", "2", ",", "3", ",", "4", ",", "5", ",", "6", "]", ",", "\n", "[", "1", ",", "7", ",", "8", ",", "9", ",", "10", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "11", ",", "12", "]", ",", "\n", "]", ")", "\n", "right_pad", "=", "torch", ".", "LongTensor", "(", "[", "\n", "[", "2", ",", "3", ",", "4", ",", "5", ",", "6", "]", ",", "\n", "[", "7", ",", "8", ",", "9", ",", "10", ",", "1", "]", ",", "\n", "[", "11", ",", "12", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "]", ")", "\n", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "right_pad", ",", "\n", "utils", ".", "convert_padding_direction", "(", "\n", "left_pad", ",", "\n", "pad", ",", "\n", "left_to_right", "=", "True", ",", "\n", ")", ",", "\n", ")", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "left_pad", ",", "\n", "utils", ".", "convert_padding_direction", "(", "\n", "right_pad", ",", "\n", "pad", ",", "\n", "right_to_left", "=", "True", ",", "\n", ")", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_utils.TestUtils.test_make_positions": [[45, 75], ["torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "test_utils.TestUtils.assertAlmostEqual", "test_utils.TestUtils.assertAlmostEqual", "fairseq.utils.make_positions", "fairseq.utils.make_positions"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertAlmostEqual", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertAlmostEqual", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.make_positions", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.make_positions"], ["", "def", "test_make_positions", "(", "self", ")", ":", "\n", "        ", "pad", "=", "1", "\n", "left_pad_input", "=", "torch", ".", "LongTensor", "(", "[", "\n", "[", "9", ",", "9", ",", "9", ",", "9", ",", "9", "]", ",", "\n", "[", "1", ",", "9", ",", "9", ",", "9", ",", "9", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "9", ",", "9", "]", ",", "\n", "]", ")", "\n", "left_pad_output", "=", "torch", ".", "LongTensor", "(", "[", "\n", "[", "2", ",", "3", ",", "4", ",", "5", ",", "6", "]", ",", "\n", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", "]", ",", "\n", "[", "1", ",", "1", ",", "1", ",", "2", ",", "3", "]", ",", "\n", "]", ")", "\n", "right_pad_input", "=", "torch", ".", "LongTensor", "(", "[", "\n", "[", "9", ",", "9", ",", "9", ",", "9", ",", "9", "]", ",", "\n", "[", "9", ",", "9", ",", "9", ",", "9", ",", "1", "]", ",", "\n", "[", "9", ",", "9", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "]", ")", "\n", "right_pad_output", "=", "torch", ".", "LongTensor", "(", "[", "\n", "[", "2", ",", "3", ",", "4", ",", "5", ",", "6", "]", ",", "\n", "[", "2", ",", "3", ",", "4", ",", "5", ",", "1", "]", ",", "\n", "[", "2", ",", "3", ",", "1", ",", "1", ",", "1", "]", ",", "\n", "]", ")", "\n", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "left_pad_output", ",", "\n", "utils", ".", "make_positions", "(", "left_pad_input", ",", "pad", ")", ",", "\n", ")", "\n", "self", ".", "assertAlmostEqual", "(", "\n", "right_pad_output", ",", "\n", "utils", ".", "make_positions", "(", "right_pad_input", ",", "pad", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_utils.TestUtils.assertAlmostEqual": [[77, 80], ["test_utils.TestUtils.assertEqual", "test_utils.TestUtils.assertLess", "t1.size", "t2.size", "fairseq.utils.item"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item"], ["", "def", "assertAlmostEqual", "(", "self", ",", "t1", ",", "t2", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "t1", ".", "size", "(", ")", ",", "t2", ".", "size", "(", ")", ",", "\"size mismatch\"", ")", "\n", "self", ".", "assertLess", "(", "utils", ".", "item", "(", "(", "t1", "-", "t2", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ")", ",", "1e-4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_train.TestLoadCheckpoint.setUp": [[54, 68], ["unittest.mock.MagicMock", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "unittest.mock.MagicMock", "unittest.mock.patch", "p.start", "test_train.TestLoadCheckpoint.patches.items"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.StopwatchMeter.start"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "args_mock", "=", "MagicMock", "(", ")", "\n", "self", ".", "args_mock", ".", "optimizer_overrides", "=", "'{}'", "\n", "self", ".", "args_mock", ".", "reset_dataloader", "=", "False", "\n", "self", ".", "args_mock", ".", "reset_meters", "=", "False", "\n", "self", ".", "args_mock", ".", "reset_optimizer", "=", "False", "\n", "self", ".", "patches", "=", "{", "\n", "'os.makedirs'", ":", "MagicMock", "(", ")", ",", "\n", "'os.path.join'", ":", "MagicMock", "(", ")", ",", "\n", "'os.path.isfile'", ":", "MagicMock", "(", "return_value", "=", "True", ")", ",", "\n", "'os.path.isabs'", ":", "MagicMock", "(", "return_value", "=", "False", ")", ",", "\n", "}", "\n", "self", ".", "applied_patches", "=", "[", "patch", "(", "p", ",", "d", ")", "for", "p", ",", "d", "in", "self", ".", "patches", ".", "items", "(", ")", "]", "\n", "[", "p", ".", "start", "(", ")", "for", "p", "in", "self", ".", "applied_patches", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_train.TestLoadCheckpoint.test_load_partial_checkpoint": [[69, 98], ["contextlib.redirect_stdout", "test_train.get_trainer_and_epoch_itr", "unittest.mock.MagicMock", "fairseq.checkpoint_utils.load_checkpoint", "test_train.TestLoadCheckpoint.assertEqual", "test_train.TestLoadCheckpoint.assertEqual", "epoch_itr.next_epoch_itr", "test_train.TestLoadCheckpoint.assertEqual", "test_train.TestLoadCheckpoint.assertEqual", "test_train.TestLoadCheckpoint.assertEqual", "test_train.TestLoadCheckpoint.assertEqual", "range", "test_train.TestLoadCheckpoint.assertEqual", "test_train.TestLoadCheckpoint.assertTrue", "next", "test_train.TestLoadCheckpoint.assertFalse", "epoch_itr.next_epoch_itr", "test_train.TestLoadCheckpoint.assertTrue", "test_train.TestLoadCheckpoint.assertEqual", "test_train.TestLoadCheckpoint.assertEqual", "io.StringIO", "[].item", "next", "epoch_itr.next_epoch_itr.has_next", "epoch_itr.next_epoch_itr.has_next", "epoch_itr.next_epoch_itr.has_next", "next"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_train.get_trainer_and_epoch_itr", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.checkpoint_utils.load_checkpoint", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.EpochBatchIterator.next_epoch_itr", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.EpochBatchIterator.next_epoch_itr", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.CountingIterator.has_next", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.CountingIterator.has_next", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.CountingIterator.has_next"], ["", "def", "test_load_partial_checkpoint", "(", "self", ")", ":", "\n", "\n", "        ", "with", "contextlib", ".", "redirect_stdout", "(", "StringIO", "(", ")", ")", ":", "\n", "            ", "trainer", ",", "epoch_itr", "=", "get_trainer_and_epoch_itr", "(", "2", ",", "150", ",", "200", ",", "50", ")", "\n", "trainer", ".", "get_train_iterator", "=", "MagicMock", "(", "return_value", "=", "epoch_itr", ")", "\n", "\n", "_", ",", "epoch_itr", "=", "checkpoint_utils", ".", "load_checkpoint", "(", "self", ".", "args_mock", ",", "trainer", ")", "\n", "\n", "self", ".", "assertEqual", "(", "epoch_itr", ".", "epoch", ",", "2", ")", "\n", "self", ".", "assertEqual", "(", "epoch_itr", ".", "iterations_in_epoch", ",", "50", ")", "\n", "\n", "itr", "=", "epoch_itr", ".", "next_epoch_itr", "(", "shuffle", "=", "False", ")", "\n", "self", ".", "assertEqual", "(", "epoch_itr", ".", "epoch", ",", "2", ")", "\n", "self", ".", "assertEqual", "(", "epoch_itr", ".", "iterations_in_epoch", ",", "50", ")", "\n", "\n", "self", ".", "assertEqual", "(", "next", "(", "itr", ")", "[", "'net_input'", "]", "[", "'src_tokens'", "]", "[", "0", "]", ".", "item", "(", ")", ",", "50", ")", "\n", "self", ".", "assertEqual", "(", "epoch_itr", ".", "iterations_in_epoch", ",", "51", ")", "\n", "\n", "for", "_", "in", "range", "(", "150", "-", "52", ")", ":", "\n", "                ", "next", "(", "itr", ")", "\n", "", "self", ".", "assertEqual", "(", "epoch_itr", ".", "iterations_in_epoch", ",", "149", ")", "\n", "self", ".", "assertTrue", "(", "itr", ".", "has_next", "(", ")", ")", "\n", "next", "(", "itr", ")", "\n", "self", ".", "assertFalse", "(", "itr", ".", "has_next", "(", ")", ")", "\n", "\n", "itr", "=", "epoch_itr", ".", "next_epoch_itr", "(", "shuffle", "=", "False", ")", "\n", "self", ".", "assertTrue", "(", "itr", ".", "has_next", "(", ")", ")", "\n", "self", ".", "assertEqual", "(", "epoch_itr", ".", "epoch", ",", "3", ")", "\n", "self", ".", "assertEqual", "(", "epoch_itr", ".", "iterations_in_epoch", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_train.TestLoadCheckpoint.test_load_full_checkpoint": [[99, 110], ["contextlib.redirect_stdout", "test_train.get_trainer_and_epoch_itr", "unittest.mock.MagicMock", "fairseq.checkpoint_utils.load_checkpoint", "epoch_itr.next_epoch_itr", "test_train.TestLoadCheckpoint.assertEqual", "test_train.TestLoadCheckpoint.assertEqual", "test_train.TestLoadCheckpoint.assertEqual", "io.StringIO", "[].item", "next"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_train.get_trainer_and_epoch_itr", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.checkpoint_utils.load_checkpoint", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.EpochBatchIterator.next_epoch_itr", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item"], ["", "", "def", "test_load_full_checkpoint", "(", "self", ")", ":", "\n", "        ", "with", "contextlib", ".", "redirect_stdout", "(", "StringIO", "(", ")", ")", ":", "\n", "            ", "trainer", ",", "epoch_itr", "=", "get_trainer_and_epoch_itr", "(", "2", ",", "150", ",", "300", ",", "150", ")", "\n", "trainer", ".", "get_train_iterator", "=", "MagicMock", "(", "return_value", "=", "epoch_itr", ")", "\n", "\n", "_", ",", "epoch_itr", "=", "checkpoint_utils", ".", "load_checkpoint", "(", "self", ".", "args_mock", ",", "trainer", ")", "\n", "itr", "=", "epoch_itr", ".", "next_epoch_itr", "(", "shuffle", "=", "False", ")", "\n", "\n", "self", ".", "assertEqual", "(", "epoch_itr", ".", "epoch", ",", "3", ")", "\n", "self", ".", "assertEqual", "(", "epoch_itr", ".", "iterations_in_epoch", ",", "0", ")", "\n", "self", ".", "assertEqual", "(", "next", "(", "itr", ")", "[", "'net_input'", "]", "[", "'src_tokens'", "]", "[", "0", "]", ".", "item", "(", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_train.TestLoadCheckpoint.test_load_no_checkpoint": [[111, 123], ["contextlib.redirect_stdout", "test_train.get_trainer_and_epoch_itr", "unittest.mock.MagicMock", "fairseq.checkpoint_utils.load_checkpoint", "epoch_itr.next_epoch_itr", "test_train.TestLoadCheckpoint.assertEqual", "test_train.TestLoadCheckpoint.assertEqual", "test_train.TestLoadCheckpoint.assertEqual", "io.StringIO", "[].item", "next"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_train.get_trainer_and_epoch_itr", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.checkpoint_utils.load_checkpoint", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.iterators.EpochBatchIterator.next_epoch_itr", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item"], ["", "", "def", "test_load_no_checkpoint", "(", "self", ")", ":", "\n", "        ", "with", "contextlib", ".", "redirect_stdout", "(", "StringIO", "(", ")", ")", ":", "\n", "            ", "trainer", ",", "epoch_itr", "=", "get_trainer_and_epoch_itr", "(", "0", ",", "150", ",", "0", ",", "0", ")", "\n", "trainer", ".", "get_train_iterator", "=", "MagicMock", "(", "return_value", "=", "epoch_itr", ")", "\n", "self", ".", "patches", "[", "'os.path.isfile'", "]", ".", "return_value", "=", "False", "\n", "\n", "_", ",", "epoch_itr", "=", "checkpoint_utils", ".", "load_checkpoint", "(", "self", ".", "args_mock", ",", "trainer", ")", "\n", "itr", "=", "epoch_itr", ".", "next_epoch_itr", "(", "shuffle", "=", "False", ")", "\n", "\n", "self", ".", "assertEqual", "(", "epoch_itr", ".", "epoch", ",", "1", ")", "\n", "self", ".", "assertEqual", "(", "epoch_itr", ".", "iterations_in_epoch", ",", "0", ")", "\n", "self", ".", "assertEqual", "(", "next", "(", "itr", ")", "[", "'net_input'", "]", "[", "'src_tokens'", "]", "[", "0", "]", ".", "item", "(", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_train.TestLoadCheckpoint.tearDown": [[124, 126], ["unittest.mock.patch.stopall"], "methods", ["None"], ["", "", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "patch", ".", "stopall", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_train.mock_trainer": [[16, 27], ["unittest.mock.MagicMock"], "function", ["None"], ["def", "mock_trainer", "(", "epoch", ",", "num_updates", ",", "iterations_in_epoch", ")", ":", "\n", "    ", "trainer", "=", "MagicMock", "(", ")", "\n", "trainer", ".", "load_checkpoint", ".", "return_value", "=", "{", "\n", "'train_iterator'", ":", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'iterations_in_epoch'", ":", "iterations_in_epoch", ",", "\n", "'shuffle'", ":", "False", ",", "\n", "}", ",", "\n", "}", "\n", "trainer", ".", "get_num_updates", ".", "return_value", "=", "num_updates", "\n", "return", "trainer", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_train.mock_dict": [[29, 35], ["unittest.mock.MagicMock"], "function", ["None"], ["", "def", "mock_dict", "(", ")", ":", "\n", "    ", "d", "=", "MagicMock", "(", ")", "\n", "d", ".", "pad", ".", "return_value", "=", "1", "\n", "d", ".", "eos", ".", "return_value", "=", "2", "\n", "d", ".", "unk", ".", "return_value", "=", "3", "\n", "return", "d", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_train.get_trainer_and_epoch_itr": [[37, 50], ["torch.LongTensor().view", "fairseq.data.TokenBlockDataset", "test_train.mock_trainer", "fairseq.data.LanguagePairDataset", "fairseq.data.EpochBatchIterator", "test_train.mock_dict", "torch.LongTensor", "list", "torch.LongTensor().view.size", "range", "range"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_train.mock_trainer", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_train.mock_dict", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "get_trainer_and_epoch_itr", "(", "epoch", ",", "epoch_size", ",", "num_updates", ",", "iterations_in_epoch", ")", ":", "\n", "    ", "tokens", "=", "torch", ".", "LongTensor", "(", "list", "(", "range", "(", "epoch_size", ")", ")", ")", ".", "view", "(", "1", ",", "-", "1", ")", "\n", "tokens_ds", "=", "data", ".", "TokenBlockDataset", "(", "\n", "tokens", ",", "sizes", "=", "[", "tokens", ".", "size", "(", "-", "1", ")", "]", ",", "block_size", "=", "1", ",", "pad", "=", "0", ",", "eos", "=", "1", ",", "include_targets", "=", "False", ",", "\n", ")", "\n", "trainer", "=", "mock_trainer", "(", "epoch", ",", "num_updates", ",", "iterations_in_epoch", ")", "\n", "dataset", "=", "data", ".", "LanguagePairDataset", "(", "tokens_ds", ",", "tokens_ds", ".", "sizes", ",", "mock_dict", "(", ")", ",", "shuffle", "=", "False", ")", "\n", "epoch_itr", "=", "data", ".", "EpochBatchIterator", "(", "\n", "dataset", "=", "dataset", ",", "\n", "collate_fn", "=", "dataset", ".", "collater", ",", "\n", "batch_sampler", "=", "[", "[", "i", "]", "for", "i", "in", "range", "(", "epoch_size", ")", "]", ",", "\n", ")", "\n", "return", "trainer", ",", "epoch_itr", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_metrics.TestMetrics.test_nesting": [[14, 22], ["test_metrics.TestMetrics.assertEqual", "test_metrics.TestMetrics.assertEqual", "fairseq.metrics.aggregate", "fairseq.metrics.log_scalar", "fairseq.metrics.aggregate", "fairseq.metrics.log_scalar", "a.get_smoothed_values", "b.get_smoothed_values"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.aggregate", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_scalar", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.aggregate", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_scalar", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.MetersDict.get_smoothed_values", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.MetersDict.get_smoothed_values"], ["    ", "def", "test_nesting", "(", "self", ")", ":", "\n", "        ", "with", "metrics", ".", "aggregate", "(", ")", "as", "a", ":", "\n", "            ", "metrics", ".", "log_scalar", "(", "'loss'", ",", "1", ")", "\n", "with", "metrics", ".", "aggregate", "(", ")", "as", "b", ":", "\n", "                ", "metrics", ".", "log_scalar", "(", "'loss'", ",", "2", ")", "\n", "\n", "", "", "self", ".", "assertEqual", "(", "a", ".", "get_smoothed_values", "(", ")", "[", "'loss'", "]", ",", "1.5", ")", "\n", "self", ".", "assertEqual", "(", "b", ".", "get_smoothed_values", "(", ")", "[", "'loss'", "]", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_metrics.TestMetrics.test_new_root": [[23, 31], ["test_metrics.TestMetrics.assertEqual", "test_metrics.TestMetrics.assertEqual", "fairseq.metrics.aggregate", "fairseq.metrics.log_scalar", "fairseq.metrics.aggregate", "fairseq.metrics.log_scalar", "a.get_smoothed_values", "b.get_smoothed_values"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.aggregate", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_scalar", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.aggregate", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_scalar", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.MetersDict.get_smoothed_values", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.MetersDict.get_smoothed_values"], ["", "def", "test_new_root", "(", "self", ")", ":", "\n", "        ", "with", "metrics", ".", "aggregate", "(", ")", "as", "a", ":", "\n", "            ", "metrics", ".", "log_scalar", "(", "'loss'", ",", "1", ")", "\n", "with", "metrics", ".", "aggregate", "(", "new_root", "=", "True", ")", "as", "b", ":", "\n", "                ", "metrics", ".", "log_scalar", "(", "'loss'", ",", "2", ")", "\n", "\n", "", "", "self", ".", "assertEqual", "(", "a", ".", "get_smoothed_values", "(", ")", "[", "'loss'", "]", ",", "1", ")", "\n", "self", ".", "assertEqual", "(", "b", ".", "get_smoothed_values", "(", ")", "[", "'loss'", "]", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_metrics.TestMetrics.test_nested_new_root": [[32, 47], ["test_metrics.TestMetrics.assertEqual", "test_metrics.TestMetrics.assertEqual", "test_metrics.TestMetrics.assertEqual", "test_metrics.TestMetrics.assertEqual", "fairseq.metrics.aggregate", "fairseq.metrics.log_scalar", "fairseq.metrics.log_scalar", "fairseq.metrics.aggregate", "fairseq.metrics.log_scalar", "layer4.get_smoothed_values", "layer3.get_smoothed_values", "layer2.get_smoothed_values", "layer1.get_smoothed_values", "fairseq.metrics.aggregate", "fairseq.metrics.log_scalar", "fairseq.metrics.aggregate", "fairseq.metrics.log_scalar"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.aggregate", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_scalar", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_scalar", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.aggregate", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_scalar", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.MetersDict.get_smoothed_values", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.MetersDict.get_smoothed_values", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.MetersDict.get_smoothed_values", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.MetersDict.get_smoothed_values", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.aggregate", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_scalar", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.aggregate", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_scalar"], ["", "def", "test_nested_new_root", "(", "self", ")", ":", "\n", "        ", "with", "metrics", ".", "aggregate", "(", ")", "as", "layer1", ":", "\n", "            ", "metrics", ".", "log_scalar", "(", "'loss'", ",", "1", ")", "\n", "with", "metrics", ".", "aggregate", "(", "new_root", "=", "True", ")", "as", "layer2", ":", "\n", "                ", "metrics", ".", "log_scalar", "(", "'loss'", ",", "2", ")", "\n", "with", "metrics", ".", "aggregate", "(", ")", "as", "layer3", ":", "\n", "                    ", "metrics", ".", "log_scalar", "(", "'loss'", ",", "3", ")", "\n", "with", "metrics", ".", "aggregate", "(", "new_root", "=", "True", ")", "as", "layer4", ":", "\n", "                        ", "metrics", ".", "log_scalar", "(", "'loss'", ",", "4", ")", "\n", "", "", "", "metrics", ".", "log_scalar", "(", "'loss'", ",", "1.5", ")", "\n", "\n", "", "self", ".", "assertEqual", "(", "layer4", ".", "get_smoothed_values", "(", ")", "[", "'loss'", "]", ",", "4", ")", "\n", "self", ".", "assertEqual", "(", "layer3", ".", "get_smoothed_values", "(", ")", "[", "'loss'", "]", ",", "3", ")", "\n", "self", ".", "assertEqual", "(", "layer2", ".", "get_smoothed_values", "(", ")", "[", "'loss'", "]", ",", "2.5", ")", "\n", "self", ".", "assertEqual", "(", "layer1", ".", "get_smoothed_values", "(", ")", "[", "'loss'", "]", ",", "1.25", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_metrics.TestMetrics.test_named": [[48, 61], ["str", "fairseq.metrics.reset_meters", "fairseq.metrics.log_scalar", "test_metrics.TestMetrics.assertEqual", "uuid.uuid4", "fairseq.metrics.aggregate", "fairseq.metrics.log_scalar", "fairseq.metrics.aggregate", "fairseq.metrics.log_scalar", "fairseq.metrics.get_smoothed_values"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.reset_meters", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_scalar", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.aggregate", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_scalar", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.aggregate", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_scalar", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.MetersDict.get_smoothed_values"], ["", "def", "test_named", "(", "self", ")", ":", "\n", "        ", "name", "=", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", "\n", "metrics", ".", "reset_meters", "(", "name", ")", "\n", "\n", "with", "metrics", ".", "aggregate", "(", "name", ")", ":", "\n", "            ", "metrics", ".", "log_scalar", "(", "'loss'", ",", "1", ")", "\n", "\n", "", "metrics", ".", "log_scalar", "(", "'loss'", ",", "3", ")", "\n", "\n", "with", "metrics", ".", "aggregate", "(", "name", ")", ":", "\n", "            ", "metrics", ".", "log_scalar", "(", "'loss'", ",", "2", ")", "\n", "\n", "", "self", ".", "assertEqual", "(", "metrics", ".", "get_smoothed_values", "(", "name", ")", "[", "'loss'", "]", ",", "1.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_metrics.TestMetrics.test_nested_duplicate_names": [[62, 75], ["str", "fairseq.metrics.reset_meters", "test_metrics.TestMetrics.assertEqual", "test_metrics.TestMetrics.assertEqual", "uuid.uuid4", "fairseq.metrics.aggregate", "fairseq.metrics.log_scalar", "fairseq.metrics.log_scalar", "fairseq.metrics.aggregate", "fairseq.metrics.get_smoothed_values", "other.get_smoothed_values", "fairseq.metrics.aggregate", "fairseq.metrics.log_scalar"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.reset_meters", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.aggregate", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_scalar", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_scalar", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.aggregate", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.MetersDict.get_smoothed_values", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.meters.MetersDict.get_smoothed_values", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.aggregate", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.metrics.log_scalar"], ["", "def", "test_nested_duplicate_names", "(", "self", ")", ":", "\n", "        ", "name", "=", "str", "(", "uuid", ".", "uuid4", "(", ")", ")", "\n", "metrics", ".", "reset_meters", "(", "name", ")", "\n", "\n", "with", "metrics", ".", "aggregate", "(", "name", ")", ":", "\n", "            ", "metrics", ".", "log_scalar", "(", "'loss'", ",", "1", ")", "\n", "with", "metrics", ".", "aggregate", "(", ")", "as", "other", ":", "\n", "                ", "with", "metrics", ".", "aggregate", "(", "name", ")", ":", "\n", "                    ", "metrics", ".", "log_scalar", "(", "'loss'", ",", "2", ")", "\n", "", "", "metrics", ".", "log_scalar", "(", "'loss'", ",", "6", ")", "\n", "\n", "", "self", ".", "assertEqual", "(", "metrics", ".", "get_smoothed_values", "(", "name", ")", "[", "'loss'", "]", ",", "3", ")", "\n", "self", ".", "assertEqual", "(", "other", ".", "get_smoothed_values", "(", ")", "[", "'loss'", "]", ",", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.TestTranslation.setUp": [[28, 30], ["logging.disable"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "logging", ".", "disable", "(", "logging", ".", "CRITICAL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.TestTranslation.tearDown": [[31, 33], ["logging.disable"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "logging", ".", "disable", "(", "logging", ".", "NOTSET", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.TestTranslation.test_fconv": [[34, 41], ["contextlib.redirect_stdout", "io.StringIO", "tempfile.TemporaryDirectory", "test_binaries.create_dummy_data", "test_binaries.preprocess_translation_data", "test_binaries.train_translation_model", "test_binaries.generate_main"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.create_dummy_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.preprocess_translation_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.train_translation_model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.generate_main"], ["", "def", "test_fconv", "(", "self", ")", ":", "\n", "        ", "with", "contextlib", ".", "redirect_stdout", "(", "StringIO", "(", ")", ")", ":", "\n", "            ", "with", "tempfile", ".", "TemporaryDirectory", "(", "'test_fconv'", ")", "as", "data_dir", ":", "\n", "                ", "create_dummy_data", "(", "data_dir", ")", "\n", "preprocess_translation_data", "(", "data_dir", ")", "\n", "train_translation_model", "(", "data_dir", ",", "'fconv_iwslt_de_en'", ")", "\n", "generate_main", "(", "data_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.TestTranslation.test_raw": [[42, 49], ["contextlib.redirect_stdout", "io.StringIO", "tempfile.TemporaryDirectory", "test_binaries.create_dummy_data", "test_binaries.preprocess_translation_data", "test_binaries.train_translation_model", "test_binaries.generate_main"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.create_dummy_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.preprocess_translation_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.train_translation_model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.generate_main"], ["", "", "", "def", "test_raw", "(", "self", ")", ":", "\n", "        ", "with", "contextlib", ".", "redirect_stdout", "(", "StringIO", "(", ")", ")", ":", "\n", "            ", "with", "tempfile", ".", "TemporaryDirectory", "(", "'test_fconv_raw'", ")", "as", "data_dir", ":", "\n", "                ", "create_dummy_data", "(", "data_dir", ")", "\n", "preprocess_translation_data", "(", "data_dir", ",", "[", "'--dataset-impl'", ",", "'raw'", "]", ")", "\n", "train_translation_model", "(", "data_dir", ",", "'fconv_iwslt_de_en'", ",", "[", "'--dataset-impl'", ",", "'raw'", "]", ")", "\n", "generate_main", "(", "data_dir", ",", "[", "'--dataset-impl'", ",", "'raw'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.TestTranslation.test_fp16": [[50, 58], ["unittest.skipIf", "contextlib.redirect_stdout", "torch.cuda.is_available", "io.StringIO", "tempfile.TemporaryDirectory", "test_binaries.create_dummy_data", "test_binaries.preprocess_translation_data", "test_binaries.train_translation_model", "test_binaries.generate_main"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.create_dummy_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.preprocess_translation_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.train_translation_model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.generate_main"], ["", "", "", "@", "unittest", ".", "skipIf", "(", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "'test requires a GPU'", ")", "\n", "def", "test_fp16", "(", "self", ")", ":", "\n", "        ", "with", "contextlib", ".", "redirect_stdout", "(", "StringIO", "(", ")", ")", ":", "\n", "            ", "with", "tempfile", ".", "TemporaryDirectory", "(", "'test_fp16'", ")", "as", "data_dir", ":", "\n", "                ", "create_dummy_data", "(", "data_dir", ")", "\n", "preprocess_translation_data", "(", "data_dir", ")", "\n", "train_translation_model", "(", "data_dir", ",", "'fconv_iwslt_de_en'", ",", "[", "'--fp16'", "]", ")", "\n", "generate_main", "(", "data_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.TestTranslation.test_memory_efficient_fp16": [[59, 67], ["unittest.skipIf", "contextlib.redirect_stdout", "torch.cuda.is_available", "io.StringIO", "tempfile.TemporaryDirectory", "test_binaries.create_dummy_data", "test_binaries.preprocess_translation_data", "test_binaries.train_translation_model", "test_binaries.generate_main"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.create_dummy_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.preprocess_translation_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.train_translation_model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.generate_main"], ["", "", "", "@", "unittest", ".", "skipIf", "(", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "'test requires a GPU'", ")", "\n", "def", "test_memory_efficient_fp16", "(", "self", ")", ":", "\n", "        ", "with", "contextlib", ".", "redirect_stdout", "(", "StringIO", "(", ")", ")", ":", "\n", "            ", "with", "tempfile", ".", "TemporaryDirectory", "(", "'test_memory_efficient_fp16'", ")", "as", "data_dir", ":", "\n", "                ", "create_dummy_data", "(", "data_dir", ")", "\n", "preprocess_translation_data", "(", "data_dir", ")", "\n", "train_translation_model", "(", "data_dir", ",", "'fconv_iwslt_de_en'", ",", "[", "'--memory-efficient-fp16'", "]", ")", "\n", "generate_main", "(", "data_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.TestTranslation.test_update_freq": [[68, 75], ["contextlib.redirect_stdout", "io.StringIO", "tempfile.TemporaryDirectory", "test_binaries.create_dummy_data", "test_binaries.preprocess_translation_data", "test_binaries.train_translation_model", "test_binaries.generate_main"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.create_dummy_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.preprocess_translation_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.train_translation_model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.generate_main"], ["", "", "", "def", "test_update_freq", "(", "self", ")", ":", "\n", "        ", "with", "contextlib", ".", "redirect_stdout", "(", "StringIO", "(", ")", ")", ":", "\n", "            ", "with", "tempfile", ".", "TemporaryDirectory", "(", "'test_update_freq'", ")", "as", "data_dir", ":", "\n", "                ", "create_dummy_data", "(", "data_dir", ")", "\n", "preprocess_translation_data", "(", "data_dir", ")", "\n", "train_translation_model", "(", "data_dir", ",", "'fconv_iwslt_de_en'", ",", "[", "'--update-freq'", ",", "'3'", "]", ")", "\n", "generate_main", "(", "data_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.TestTranslation.test_max_positions": [[76, 95], ["contextlib.redirect_stdout", "io.StringIO", "tempfile.TemporaryDirectory", "test_binaries.create_dummy_data", "test_binaries.preprocess_translation_data", "test_binaries.TestTranslation.assertTrue", "test_binaries.train_translation_model", "test_binaries.generate_main", "test_binaries.TestTranslation.assertRaises", "test_binaries.train_translation_model", "test_binaries.TestTranslation.assertRaises", "test_binaries.generate_main", "str"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.create_dummy_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.preprocess_translation_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.train_translation_model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.generate_main", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.train_translation_model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.generate_main"], ["", "", "", "def", "test_max_positions", "(", "self", ")", ":", "\n", "        ", "with", "contextlib", ".", "redirect_stdout", "(", "StringIO", "(", ")", ")", ":", "\n", "            ", "with", "tempfile", ".", "TemporaryDirectory", "(", "'test_max_positions'", ")", "as", "data_dir", ":", "\n", "                ", "create_dummy_data", "(", "data_dir", ")", "\n", "preprocess_translation_data", "(", "data_dir", ")", "\n", "with", "self", ".", "assertRaises", "(", "Exception", ")", "as", "context", ":", "\n", "                    ", "train_translation_model", "(", "\n", "data_dir", ",", "'fconv_iwslt_de_en'", ",", "[", "'--max-target-positions'", ",", "'5'", "]", ",", "\n", ")", "\n", "", "self", ".", "assertTrue", "(", "\n", "'skip this example with --skip-invalid-size-inputs-valid-test'", "in", "str", "(", "context", ".", "exception", ")", "\n", ")", "\n", "train_translation_model", "(", "\n", "data_dir", ",", "'fconv_iwslt_de_en'", ",", "\n", "[", "'--max-target-positions'", ",", "'5'", ",", "'--skip-invalid-size-inputs-valid-test'", "]", ",", "\n", ")", "\n", "with", "self", ".", "assertRaises", "(", "Exception", ")", "as", "context", ":", "\n", "                    ", "generate_main", "(", "data_dir", ")", "\n", "", "generate_main", "(", "data_dir", ",", "[", "'--skip-invalid-size-inputs-valid-test'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.TestTranslation.test_generation": [[96, 130], ["contextlib.redirect_stdout", "io.StringIO", "tempfile.TemporaryDirectory", "test_binaries.create_dummy_data", "test_binaries.preprocess_translation_data", "test_binaries.train_translation_model", "test_binaries.generate_main", "test_binaries.generate_main", "test_binaries.generate_main", "test_binaries.generate_main", "test_binaries.generate_main", "test_binaries.TestTranslation.assertRaises", "test_binaries.generate_main"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.create_dummy_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.preprocess_translation_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.train_translation_model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.generate_main", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.generate_main", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.generate_main", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.generate_main", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.generate_main", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.generate_main"], ["", "", "", "def", "test_generation", "(", "self", ")", ":", "\n", "        ", "with", "contextlib", ".", "redirect_stdout", "(", "StringIO", "(", ")", ")", ":", "\n", "            ", "with", "tempfile", ".", "TemporaryDirectory", "(", "'test_sampling'", ")", "as", "data_dir", ":", "\n", "                ", "create_dummy_data", "(", "data_dir", ")", "\n", "preprocess_translation_data", "(", "data_dir", ")", "\n", "train_translation_model", "(", "data_dir", ",", "'fconv_iwslt_de_en'", ")", "\n", "generate_main", "(", "data_dir", ",", "[", "\n", "'--sampling'", ",", "\n", "'--temperature'", ",", "'2'", ",", "\n", "'--beam'", ",", "'2'", ",", "\n", "'--nbest'", ",", "'2'", ",", "\n", "]", ")", "\n", "generate_main", "(", "data_dir", ",", "[", "\n", "'--sampling'", ",", "\n", "'--sampling-topk'", ",", "'3'", ",", "\n", "'--beam'", ",", "'2'", ",", "\n", "'--nbest'", ",", "'2'", ",", "\n", "]", ")", "\n", "generate_main", "(", "data_dir", ",", "[", "\n", "'--sampling'", ",", "\n", "'--sampling-topp'", ",", "'0.2'", ",", "\n", "'--beam'", ",", "'2'", ",", "\n", "'--nbest'", ",", "'2'", ",", "\n", "]", ")", "\n", "generate_main", "(", "data_dir", ",", "[", "\n", "'--diversity-rate'", ",", "'0.5'", ",", "\n", "'--beam'", ",", "'6'", ",", "\n", "]", ")", "\n", "with", "self", ".", "assertRaises", "(", "ValueError", ")", ":", "\n", "                    ", "generate_main", "(", "data_dir", ",", "[", "\n", "'--diverse-beam-groups'", ",", "'4'", ",", "\n", "'--match-source-len'", ",", "\n", "]", ")", "\n", "", "generate_main", "(", "data_dir", ",", "[", "'--prefix-size'", ",", "'2'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.TestTranslation.test_eval_bleu": [[131, 142], ["contextlib.redirect_stdout", "io.StringIO", "tempfile.TemporaryDirectory", "test_binaries.create_dummy_data", "test_binaries.preprocess_translation_data", "test_binaries.train_translation_model"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.create_dummy_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.preprocess_translation_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.train_translation_model"], ["", "", "", "def", "test_eval_bleu", "(", "self", ")", ":", "\n", "        ", "with", "contextlib", ".", "redirect_stdout", "(", "StringIO", "(", ")", ")", ":", "\n", "            ", "with", "tempfile", ".", "TemporaryDirectory", "(", "'test_eval_bleu'", ")", "as", "data_dir", ":", "\n", "                ", "create_dummy_data", "(", "data_dir", ")", "\n", "preprocess_translation_data", "(", "data_dir", ")", "\n", "train_translation_model", "(", "data_dir", ",", "'fconv_iwslt_de_en'", ",", "[", "\n", "'--eval-bleu'", ",", "\n", "'--eval-bleu-print-samples'", ",", "\n", "'--eval-bleu-remove-bpe'", ",", "\n", "'--eval-bleu-detok'", ",", "'space'", ",", "\n", "'--eval-bleu-args'", ",", "'{\"beam\": 4, \"min_len\": 10}'", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.TestTranslation.test_lstm": [[144, 157], ["contextlib.redirect_stdout", "io.StringIO", "tempfile.TemporaryDirectory", "test_binaries.create_dummy_data", "test_binaries.preprocess_translation_data", "test_binaries.train_translation_model", "test_binaries.generate_main"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.create_dummy_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.preprocess_translation_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.train_translation_model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.generate_main"], ["", "", "", "def", "test_lstm", "(", "self", ")", ":", "\n", "        ", "with", "contextlib", ".", "redirect_stdout", "(", "StringIO", "(", ")", ")", ":", "\n", "            ", "with", "tempfile", ".", "TemporaryDirectory", "(", "'test_lstm'", ")", "as", "data_dir", ":", "\n", "                ", "create_dummy_data", "(", "data_dir", ")", "\n", "preprocess_translation_data", "(", "data_dir", ")", "\n", "train_translation_model", "(", "data_dir", ",", "'lstm_wiseman_iwslt_de_en'", ",", "[", "\n", "'--encoder-layers'", ",", "'2'", ",", "\n", "'--decoder-layers'", ",", "'2'", ",", "\n", "'--encoder-embed-dim'", ",", "'8'", ",", "\n", "'--decoder-embed-dim'", ",", "'8'", ",", "\n", "'--decoder-out-embed-dim'", ",", "'8'", ",", "\n", "]", ")", "\n", "generate_main", "(", "data_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.TestTranslation.test_lstm_bidirectional": [[158, 173], ["contextlib.redirect_stdout", "io.StringIO", "tempfile.TemporaryDirectory", "test_binaries.create_dummy_data", "test_binaries.preprocess_translation_data", "test_binaries.train_translation_model", "test_binaries.generate_main"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.create_dummy_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.preprocess_translation_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.train_translation_model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.generate_main"], ["", "", "", "def", "test_lstm_bidirectional", "(", "self", ")", ":", "\n", "        ", "with", "contextlib", ".", "redirect_stdout", "(", "StringIO", "(", ")", ")", ":", "\n", "            ", "with", "tempfile", ".", "TemporaryDirectory", "(", "'test_lstm_bidirectional'", ")", "as", "data_dir", ":", "\n", "                ", "create_dummy_data", "(", "data_dir", ")", "\n", "preprocess_translation_data", "(", "data_dir", ")", "\n", "train_translation_model", "(", "data_dir", ",", "'lstm'", ",", "[", "\n", "'--encoder-layers'", ",", "'2'", ",", "\n", "'--encoder-bidirectional'", ",", "\n", "'--encoder-hidden-size'", ",", "'16'", ",", "\n", "'--encoder-embed-dim'", ",", "'8'", ",", "\n", "'--decoder-embed-dim'", ",", "'8'", ",", "\n", "'--decoder-out-embed-dim'", ",", "'8'", ",", "\n", "'--decoder-layers'", ",", "'2'", ",", "\n", "]", ")", "\n", "generate_main", "(", "data_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.TestTranslation.test_transformer": [[174, 186], ["contextlib.redirect_stdout", "io.StringIO", "tempfile.TemporaryDirectory", "test_binaries.create_dummy_data", "test_binaries.preprocess_translation_data", "test_binaries.train_translation_model", "test_binaries.generate_main"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.create_dummy_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.preprocess_translation_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.train_translation_model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.generate_main"], ["", "", "", "def", "test_transformer", "(", "self", ")", ":", "\n", "        ", "with", "contextlib", ".", "redirect_stdout", "(", "StringIO", "(", ")", ")", ":", "\n", "            ", "with", "tempfile", ".", "TemporaryDirectory", "(", "'test_transformer'", ")", "as", "data_dir", ":", "\n", "                ", "create_dummy_data", "(", "data_dir", ")", "\n", "preprocess_translation_data", "(", "data_dir", ")", "\n", "train_translation_model", "(", "data_dir", ",", "'transformer_iwslt_de_en'", ",", "[", "\n", "'--encoder-layers'", ",", "'2'", ",", "\n", "'--decoder-layers'", ",", "'2'", ",", "\n", "'--encoder-embed-dim'", ",", "'8'", ",", "\n", "'--decoder-embed-dim'", ",", "'8'", ",", "\n", "]", ",", "run_validation", "=", "True", ")", "\n", "generate_main", "(", "data_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.TestTranslation.test_multilingual_transformer": [[187, 221], ["contextlib.redirect_stdout", "range", "io.StringIO", "len", "range", "len", "tempfile.TemporaryDirectory", "test_binaries.create_dummy_data", "test_binaries.preprocess_translation_data", "test_binaries.train_translation_model", "test_binaries.generate_main"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.create_dummy_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.preprocess_translation_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.train_translation_model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.generate_main"], ["", "", "", "def", "test_multilingual_transformer", "(", "self", ")", ":", "\n", "# test with all combinations of encoder/decoder lang tokens", "\n", "        ", "encoder_langtok_flags", "=", "[", "[", "]", ",", "[", "'--encoder-langtok'", ",", "'src'", "]", ",", "[", "'--encoder-langtok'", ",", "'tgt'", "]", "]", "\n", "decoder_langtok_flags", "=", "[", "[", "]", ",", "[", "'--decoder-langtok'", "]", "]", "\n", "with", "contextlib", ".", "redirect_stdout", "(", "StringIO", "(", ")", ")", ":", "\n", "            ", "for", "i", "in", "range", "(", "len", "(", "encoder_langtok_flags", ")", ")", ":", "\n", "                ", "for", "j", "in", "range", "(", "len", "(", "decoder_langtok_flags", ")", ")", ":", "\n", "                    ", "enc_ltok_flag", "=", "encoder_langtok_flags", "[", "i", "]", "\n", "dec_ltok_flag", "=", "decoder_langtok_flags", "[", "j", "]", "\n", "with", "tempfile", ".", "TemporaryDirectory", "(", "f'test_multilingual_transformer_{i}_{j}'", ")", "as", "data_dir", ":", "\n", "                        ", "create_dummy_data", "(", "data_dir", ")", "\n", "preprocess_translation_data", "(", "data_dir", ")", "\n", "train_translation_model", "(", "\n", "data_dir", ",", "\n", "arch", "=", "'multilingual_transformer'", ",", "\n", "task", "=", "'multilingual_translation'", ",", "\n", "extra_flags", "=", "[", "\n", "'--encoder-layers'", ",", "'2'", ",", "\n", "'--decoder-layers'", ",", "'2'", ",", "\n", "'--encoder-embed-dim'", ",", "'8'", ",", "\n", "'--decoder-embed-dim'", ",", "'8'", ",", "\n", "]", "+", "enc_ltok_flag", "+", "dec_ltok_flag", ",", "\n", "lang_flags", "=", "[", "'--lang-pairs'", ",", "'in-out,out-in'", "]", ",", "\n", "run_validation", "=", "True", ",", "\n", "extra_valid_flags", "=", "enc_ltok_flag", "+", "dec_ltok_flag", ",", "\n", ")", "\n", "generate_main", "(", "\n", "data_dir", ",", "\n", "extra_flags", "=", "[", "\n", "'--task'", ",", "'multilingual_translation'", ",", "\n", "'--lang-pairs'", ",", "'in-out,out-in'", ",", "\n", "'--source-lang'", ",", "'in'", ",", "\n", "'--target-lang'", ",", "'out'", ",", "\n", "]", "+", "enc_ltok_flag", "+", "dec_ltok_flag", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.TestTranslation.test_transformer_cross_self_attention": [[223, 239], ["contextlib.redirect_stdout", "io.StringIO", "tempfile.TemporaryDirectory", "test_binaries.create_dummy_data", "test_binaries.preprocess_translation_data", "test_binaries.train_translation_model", "test_binaries.generate_main"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.create_dummy_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.preprocess_translation_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.train_translation_model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.generate_main"], ["", "", "", "", "", "def", "test_transformer_cross_self_attention", "(", "self", ")", ":", "\n", "        ", "with", "contextlib", ".", "redirect_stdout", "(", "StringIO", "(", ")", ")", ":", "\n", "            ", "with", "tempfile", ".", "TemporaryDirectory", "(", "'test_transformer_cross_self_attention'", ")", "as", "data_dir", ":", "\n", "                ", "create_dummy_data", "(", "data_dir", ")", "\n", "preprocess_translation_data", "(", "data_dir", ")", "\n", "train_translation_model", "(", "data_dir", ",", "'transformer_iwslt_de_en'", ",", "[", "\n", "'--encoder-layers'", ",", "'2'", ",", "\n", "'--decoder-layers'", ",", "'2'", ",", "\n", "'--encoder-embed-dim'", ",", "'8'", ",", "\n", "'--decoder-embed-dim'", ",", "'8'", ",", "\n", "'--decoder-embed-dim'", ",", "'8'", ",", "\n", "'--no-cross-attention'", ",", "\n", "'--cross-self-attention'", ",", "\n", "'--layer-wise-attention'", ",", "\n", "]", ",", "run_validation", "=", "True", ")", "\n", "generate_main", "(", "data_dir", ",", "extra_flags", "=", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.TestTranslation.test_lightconv": [[240, 252], ["contextlib.redirect_stdout", "io.StringIO", "tempfile.TemporaryDirectory", "test_binaries.create_dummy_data", "test_binaries.preprocess_translation_data", "test_binaries.train_translation_model", "test_binaries.generate_main"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.create_dummy_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.preprocess_translation_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.train_translation_model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.generate_main"], ["", "", "", "def", "test_lightconv", "(", "self", ")", ":", "\n", "        ", "with", "contextlib", ".", "redirect_stdout", "(", "StringIO", "(", ")", ")", ":", "\n", "            ", "with", "tempfile", ".", "TemporaryDirectory", "(", "'test_lightconv'", ")", "as", "data_dir", ":", "\n", "                ", "create_dummy_data", "(", "data_dir", ")", "\n", "preprocess_translation_data", "(", "data_dir", ")", "\n", "train_translation_model", "(", "data_dir", ",", "'lightconv_iwslt_de_en'", ",", "[", "\n", "'--encoder-conv-type'", ",", "'lightweight'", ",", "\n", "'--decoder-conv-type'", ",", "'lightweight'", ",", "\n", "'--encoder-embed-dim'", ",", "'8'", ",", "\n", "'--decoder-embed-dim'", ",", "'8'", ",", "\n", "]", ")", "\n", "generate_main", "(", "data_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.TestTranslation.test_dynamicconv": [[253, 265], ["contextlib.redirect_stdout", "io.StringIO", "tempfile.TemporaryDirectory", "test_binaries.create_dummy_data", "test_binaries.preprocess_translation_data", "test_binaries.train_translation_model", "test_binaries.generate_main"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.create_dummy_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.preprocess_translation_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.train_translation_model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.generate_main"], ["", "", "", "def", "test_dynamicconv", "(", "self", ")", ":", "\n", "        ", "with", "contextlib", ".", "redirect_stdout", "(", "StringIO", "(", ")", ")", ":", "\n", "            ", "with", "tempfile", ".", "TemporaryDirectory", "(", "'test_dynamicconv'", ")", "as", "data_dir", ":", "\n", "                ", "create_dummy_data", "(", "data_dir", ")", "\n", "preprocess_translation_data", "(", "data_dir", ")", "\n", "train_translation_model", "(", "data_dir", ",", "'lightconv_iwslt_de_en'", ",", "[", "\n", "'--encoder-conv-type'", ",", "'dynamic'", ",", "\n", "'--decoder-conv-type'", ",", "'dynamic'", ",", "\n", "'--encoder-embed-dim'", ",", "'8'", ",", "\n", "'--decoder-embed-dim'", ",", "'8'", ",", "\n", "]", ")", "\n", "generate_main", "(", "data_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.TestTranslation.test_cmlm_transformer": [[266, 283], ["contextlib.redirect_stdout", "io.StringIO", "tempfile.TemporaryDirectory", "test_binaries.create_dummy_data", "test_binaries.preprocess_translation_data", "test_binaries.train_translation_model", "test_binaries.generate_main"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.create_dummy_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.preprocess_translation_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.train_translation_model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.generate_main"], ["", "", "", "def", "test_cmlm_transformer", "(", "self", ")", ":", "\n", "        ", "with", "contextlib", ".", "redirect_stdout", "(", "StringIO", "(", ")", ")", ":", "\n", "            ", "with", "tempfile", ".", "TemporaryDirectory", "(", "'test_cmlm_transformer'", ")", "as", "data_dir", ":", "\n", "                ", "create_dummy_data", "(", "data_dir", ")", "\n", "preprocess_translation_data", "(", "data_dir", ",", "[", "'--joined-dictionary'", "]", ")", "\n", "train_translation_model", "(", "data_dir", ",", "'cmlm_transformer'", ",", "[", "\n", "'--apply-bert-init'", ",", "\n", "'--criterion'", ",", "'nat_loss'", ",", "\n", "'--noise'", ",", "'full_mask'", ",", "\n", "'--pred-length-offset'", ",", "\n", "'--length-loss-factor'", ",", "'0.1'", "\n", "]", ",", "task", "=", "'translation_lev'", ")", "\n", "generate_main", "(", "data_dir", ",", "[", "\n", "'--task'", ",", "'translation_lev'", ",", "\n", "'--iter-decode-max-iter'", ",", "'9'", ",", "\n", "'--iter-decode-eos-penalty'", ",", "'0'", ",", "\n", "'--print-step'", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.TestTranslation.test_levenshtein_transformer": [[285, 299], ["contextlib.redirect_stdout", "io.StringIO", "tempfile.TemporaryDirectory", "test_binaries.create_dummy_data", "test_binaries.preprocess_translation_data", "test_binaries.train_translation_model", "test_binaries.generate_main"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.create_dummy_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.preprocess_translation_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.train_translation_model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.generate_main"], ["", "", "", "def", "test_levenshtein_transformer", "(", "self", ")", ":", "\n", "        ", "with", "contextlib", ".", "redirect_stdout", "(", "StringIO", "(", ")", ")", ":", "\n", "            ", "with", "tempfile", ".", "TemporaryDirectory", "(", "'test_levenshtein_transformer'", ")", "as", "data_dir", ":", "\n", "                ", "create_dummy_data", "(", "data_dir", ")", "\n", "preprocess_translation_data", "(", "data_dir", ",", "[", "'--joined-dictionary'", "]", ")", "\n", "train_translation_model", "(", "data_dir", ",", "'levenshtein_transformer'", ",", "[", "\n", "'--apply-bert-init'", ",", "'--early-exit'", ",", "'6,6,6'", ",", "\n", "'--criterion'", ",", "'nat_loss'", "\n", "]", ",", "task", "=", "'translation_lev'", ")", "\n", "generate_main", "(", "data_dir", ",", "[", "\n", "'--task'", ",", "'translation_lev'", ",", "\n", "'--iter-decode-max-iter'", ",", "'9'", ",", "\n", "'--iter-decode-eos-penalty'", ",", "'0'", ",", "\n", "'--print-step'", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.TestTranslation.test_nonautoregressive_transformer": [[301, 316], ["contextlib.redirect_stdout", "io.StringIO", "tempfile.TemporaryDirectory", "test_binaries.create_dummy_data", "test_binaries.preprocess_translation_data", "test_binaries.train_translation_model", "test_binaries.generate_main"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.create_dummy_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.preprocess_translation_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.train_translation_model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.generate_main"], ["", "", "", "def", "test_nonautoregressive_transformer", "(", "self", ")", ":", "\n", "        ", "with", "contextlib", ".", "redirect_stdout", "(", "StringIO", "(", ")", ")", ":", "\n", "            ", "with", "tempfile", ".", "TemporaryDirectory", "(", "'test_nonautoregressive_transformer'", ")", "as", "data_dir", ":", "\n", "                ", "create_dummy_data", "(", "data_dir", ")", "\n", "preprocess_translation_data", "(", "data_dir", ",", "[", "'--joined-dictionary'", "]", ")", "\n", "train_translation_model", "(", "data_dir", ",", "'nonautoregressive_transformer'", ",", "[", "\n", "'--apply-bert-init'", ",", "'--src-embedding-copy'", ",", "'--criterion'", ",", "\n", "'nat_loss'", ",", "'--noise'", ",", "'full_mask'", ",", "'--pred-length-offset'", ",", "\n", "'--length-loss-factor'", ",", "'0.1'", "\n", "]", ",", "task", "=", "'translation_lev'", ")", "\n", "generate_main", "(", "data_dir", ",", "[", "\n", "'--task'", ",", "'translation_lev'", ",", "\n", "'--iter-decode-max-iter'", ",", "'0'", ",", "\n", "'--iter-decode-eos-penalty'", ",", "'0'", ",", "\n", "'--print-step'", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.TestTranslation.test_iterative_nonautoregressive_transformer": [[338, 353], ["contextlib.redirect_stdout", "io.StringIO", "tempfile.TemporaryDirectory", "test_binaries.create_dummy_data", "test_binaries.preprocess_translation_data", "test_binaries.train_translation_model", "test_binaries.generate_main"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.create_dummy_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.preprocess_translation_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.train_translation_model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.generate_main"], ["", "", "", "def", "test_iterative_nonautoregressive_transformer", "(", "self", ")", ":", "\n", "        ", "with", "contextlib", ".", "redirect_stdout", "(", "StringIO", "(", ")", ")", ":", "\n", "            ", "with", "tempfile", ".", "TemporaryDirectory", "(", "'test_iterative_nonautoregressive_transformer'", ")", "as", "data_dir", ":", "\n", "                ", "create_dummy_data", "(", "data_dir", ")", "\n", "preprocess_translation_data", "(", "data_dir", ",", "[", "'--joined-dictionary'", "]", ")", "\n", "train_translation_model", "(", "data_dir", ",", "'iterative_nonautoregressive_transformer'", ",", "[", "\n", "'--apply-bert-init'", ",", "'--src-embedding-copy'", ",", "'--criterion'", ",", "\n", "'nat_loss'", ",", "'--noise'", ",", "'full_mask'", ",", "'--stochastic-approx'", ",", "\n", "'--dae-ratio'", ",", "'0.5'", ",", "'--train-step'", ",", "'3'", "\n", "]", ",", "task", "=", "'translation_lev'", ")", "\n", "generate_main", "(", "data_dir", ",", "[", "\n", "'--task'", ",", "'translation_lev'", ",", "\n", "'--iter-decode-max-iter'", ",", "'9'", ",", "\n", "'--iter-decode-eos-penalty'", ",", "'0'", ",", "\n", "'--print-step'", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.TestTranslation.test_insertion_transformer": [[355, 369], ["contextlib.redirect_stdout", "io.StringIO", "tempfile.TemporaryDirectory", "test_binaries.create_dummy_data", "test_binaries.preprocess_translation_data", "test_binaries.train_translation_model", "test_binaries.generate_main"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.create_dummy_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.preprocess_translation_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.train_translation_model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.generate_main"], ["", "", "", "def", "test_insertion_transformer", "(", "self", ")", ":", "\n", "        ", "with", "contextlib", ".", "redirect_stdout", "(", "StringIO", "(", ")", ")", ":", "\n", "            ", "with", "tempfile", ".", "TemporaryDirectory", "(", "'test_insertion_transformer'", ")", "as", "data_dir", ":", "\n", "                ", "create_dummy_data", "(", "data_dir", ")", "\n", "preprocess_translation_data", "(", "data_dir", ",", "[", "'--joined-dictionary'", "]", ")", "\n", "train_translation_model", "(", "data_dir", ",", "'insertion_transformer'", ",", "[", "\n", "'--apply-bert-init'", ",", "'--criterion'", ",", "'nat_loss'", ",", "'--noise'", ",", "\n", "'random_mask'", "\n", "]", ",", "task", "=", "'translation_lev'", ")", "\n", "generate_main", "(", "data_dir", ",", "[", "\n", "'--task'", ",", "'translation_lev'", ",", "\n", "'--iter-decode-max-iter'", ",", "'9'", ",", "\n", "'--iter-decode-eos-penalty'", ",", "'0'", ",", "\n", "'--print-step'", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.TestTranslation.test_mixture_of_experts": [[371, 392], ["contextlib.redirect_stdout", "io.StringIO", "tempfile.TemporaryDirectory", "test_binaries.create_dummy_data", "test_binaries.preprocess_translation_data", "test_binaries.train_translation_model", "test_binaries.generate_main"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.create_dummy_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.preprocess_translation_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.train_translation_model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.generate_main"], ["", "", "", "def", "test_mixture_of_experts", "(", "self", ")", ":", "\n", "        ", "with", "contextlib", ".", "redirect_stdout", "(", "StringIO", "(", ")", ")", ":", "\n", "            ", "with", "tempfile", ".", "TemporaryDirectory", "(", "'test_moe'", ")", "as", "data_dir", ":", "\n", "                ", "create_dummy_data", "(", "data_dir", ")", "\n", "preprocess_translation_data", "(", "data_dir", ")", "\n", "train_translation_model", "(", "data_dir", ",", "'transformer_iwslt_de_en'", ",", "[", "\n", "'--task'", ",", "'translation_moe'", ",", "\n", "'--method'", ",", "'hMoElp'", ",", "\n", "'--mean-pool-gating-network'", ",", "\n", "'--num-experts'", ",", "'3'", ",", "\n", "'--encoder-layers'", ",", "'2'", ",", "\n", "'--decoder-layers'", ",", "'2'", ",", "\n", "'--encoder-embed-dim'", ",", "'8'", ",", "\n", "'--decoder-embed-dim'", ",", "'8'", ",", "\n", "]", ")", "\n", "generate_main", "(", "data_dir", ",", "[", "\n", "'--task'", ",", "'translation_moe'", ",", "\n", "'--method'", ",", "'hMoElp'", ",", "\n", "'--mean-pool-gating-network'", ",", "\n", "'--num-experts'", ",", "'3'", ",", "\n", "'--gen-expert'", ",", "'0'", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.TestTranslation.test_alignment": [[394, 414], ["contextlib.redirect_stdout", "io.StringIO", "tempfile.TemporaryDirectory", "test_binaries.create_dummy_data", "test_binaries.preprocess_translation_data", "test_binaries.train_translation_model", "test_binaries.generate_main"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.create_dummy_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.preprocess_translation_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.train_translation_model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.generate_main"], ["", "", "", "def", "test_alignment", "(", "self", ")", ":", "\n", "        ", "with", "contextlib", ".", "redirect_stdout", "(", "StringIO", "(", ")", ")", ":", "\n", "            ", "with", "tempfile", ".", "TemporaryDirectory", "(", "'test_alignment'", ")", "as", "data_dir", ":", "\n", "                ", "create_dummy_data", "(", "data_dir", ",", "alignment", "=", "True", ")", "\n", "preprocess_translation_data", "(", "data_dir", ",", "[", "'--align-suffix'", ",", "'align'", "]", ")", "\n", "train_translation_model", "(", "\n", "data_dir", ",", "\n", "'transformer_align'", ",", "\n", "[", "\n", "'--encoder-layers'", ",", "'2'", ",", "\n", "'--decoder-layers'", ",", "'2'", ",", "\n", "'--encoder-embed-dim'", ",", "'8'", ",", "\n", "'--decoder-embed-dim'", ",", "'8'", ",", "\n", "'--load-alignments'", ",", "\n", "'--alignment-layer'", ",", "'1'", ",", "\n", "'--criterion'", ",", "'label_smoothed_cross_entropy_with_alignment'", "\n", "]", ",", "\n", "run_validation", "=", "True", ",", "\n", ")", "\n", "generate_main", "(", "data_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.TestStories.setUp": [[418, 420], ["logging.disable"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "logging", ".", "disable", "(", "logging", ".", "CRITICAL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.TestStories.tearDown": [[421, 423], ["logging.disable"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "logging", ".", "disable", "(", "logging", ".", "NOTSET", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.TestStories.test_fconv_self_att_wp": [[424, 453], ["contextlib.redirect_stdout", "io.StringIO", "tempfile.TemporaryDirectory", "test_binaries.create_dummy_data", "test_binaries.preprocess_translation_data", "test_binaries.train_translation_model", "test_binaries.generate_main", "os.rename", "config.extend", "test_binaries.train_translation_model", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.create_dummy_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.preprocess_translation_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.train_translation_model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.generate_main", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.train_translation_model"], ["", "def", "test_fconv_self_att_wp", "(", "self", ")", ":", "\n", "        ", "with", "contextlib", ".", "redirect_stdout", "(", "StringIO", "(", ")", ")", ":", "\n", "            ", "with", "tempfile", ".", "TemporaryDirectory", "(", "'test_fconv_self_att_wp'", ")", "as", "data_dir", ":", "\n", "                ", "create_dummy_data", "(", "data_dir", ")", "\n", "preprocess_translation_data", "(", "data_dir", ")", "\n", "config", "=", "[", "\n", "'--encoder-layers'", ",", "'[(128, 3)] * 2'", ",", "\n", "'--decoder-layers'", ",", "'[(128, 3)] * 2'", ",", "\n", "'--decoder-attention'", ",", "'True'", ",", "\n", "'--encoder-attention'", ",", "'False'", ",", "\n", "'--gated-attention'", ",", "'True'", ",", "\n", "'--self-attention'", ",", "'True'", ",", "\n", "'--project-input'", ",", "'True'", ",", "\n", "'--encoder-embed-dim'", ",", "'8'", ",", "\n", "'--decoder-embed-dim'", ",", "'8'", ",", "\n", "'--decoder-out-embed-dim'", ",", "'8'", ",", "\n", "'--multihead-self-attention-nheads'", ",", "'2'", "\n", "]", "\n", "train_translation_model", "(", "data_dir", ",", "'fconv_self_att_wp'", ",", "config", ")", "\n", "generate_main", "(", "data_dir", ")", "\n", "\n", "# fusion model", "\n", "os", ".", "rename", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'checkpoint_last.pt'", ")", ",", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'pretrained.pt'", ")", ")", "\n", "config", ".", "extend", "(", "[", "\n", "'--pretrained'", ",", "'True'", ",", "\n", "'--pretrained-checkpoint'", ",", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'pretrained.pt'", ")", ",", "\n", "'--save-dir'", ",", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'fusion_model'", ")", ",", "\n", "]", ")", "\n", "train_translation_model", "(", "data_dir", ",", "'fconv_self_att_wp'", ",", "config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.TestLanguageModeling.setUp": [[457, 459], ["logging.disable"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "logging", ".", "disable", "(", "logging", ".", "CRITICAL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.TestLanguageModeling.tearDown": [[460, 462], ["logging.disable"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "logging", ".", "disable", "(", "logging", ".", "NOTSET", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.TestLanguageModeling.test_fconv_lm": [[463, 475], ["contextlib.redirect_stdout", "io.StringIO", "tempfile.TemporaryDirectory", "test_binaries.create_dummy_data", "test_binaries.preprocess_lm_data", "test_binaries.train_language_model", "test_binaries.eval_lm_main"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.create_dummy_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.preprocess_lm_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.train_language_model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.eval_lm_main"], ["", "def", "test_fconv_lm", "(", "self", ")", ":", "\n", "        ", "with", "contextlib", ".", "redirect_stdout", "(", "StringIO", "(", ")", ")", ":", "\n", "            ", "with", "tempfile", ".", "TemporaryDirectory", "(", "'test_fconv_lm'", ")", "as", "data_dir", ":", "\n", "                ", "create_dummy_data", "(", "data_dir", ")", "\n", "preprocess_lm_data", "(", "data_dir", ")", "\n", "train_language_model", "(", "data_dir", ",", "'fconv_lm'", ",", "[", "\n", "'--decoder-layers'", ",", "'[(850, 3)] * 2 + [(1024,4)]'", ",", "\n", "'--decoder-embed-dim'", ",", "'280'", ",", "\n", "'--optimizer'", ",", "'nag'", ",", "\n", "'--lr'", ",", "'0.1'", ",", "\n", "]", ")", "\n", "eval_lm_main", "(", "data_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.TestLanguageModeling.test_transformer_lm": [[476, 489], ["contextlib.redirect_stdout", "io.StringIO", "tempfile.TemporaryDirectory", "test_binaries.create_dummy_data", "test_binaries.preprocess_lm_data", "test_binaries.train_language_model", "test_binaries.eval_lm_main", "test_binaries.generate_main"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.create_dummy_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.preprocess_lm_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.train_language_model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.eval_lm_main", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.generate_main"], ["", "", "", "def", "test_transformer_lm", "(", "self", ")", ":", "\n", "        ", "with", "contextlib", ".", "redirect_stdout", "(", "StringIO", "(", ")", ")", ":", "\n", "            ", "with", "tempfile", ".", "TemporaryDirectory", "(", "'test_transformer_lm'", ")", "as", "data_dir", ":", "\n", "                ", "create_dummy_data", "(", "data_dir", ")", "\n", "preprocess_lm_data", "(", "data_dir", ")", "\n", "train_language_model", "(", "\n", "data_dir", ",", "'transformer_lm'", ",", "[", "'--add-bos-token'", "]", ",", "run_validation", "=", "True", ",", "\n", ")", "\n", "eval_lm_main", "(", "data_dir", ")", "\n", "generate_main", "(", "data_dir", ",", "[", "\n", "'--task'", ",", "'language_modeling'", ",", "\n", "'--sample-break-mode'", ",", "'eos'", ",", "\n", "'--tokens-per-sample'", ",", "'500'", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.TestLanguageModeling.test_lightconv_lm": [[491, 504], ["contextlib.redirect_stdout", "io.StringIO", "tempfile.TemporaryDirectory", "test_binaries.create_dummy_data", "test_binaries.preprocess_lm_data", "test_binaries.train_language_model", "test_binaries.eval_lm_main", "test_binaries.generate_main"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.create_dummy_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.preprocess_lm_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.train_language_model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.eval_lm_main", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.generate_main"], ["", "", "", "def", "test_lightconv_lm", "(", "self", ")", ":", "\n", "        ", "with", "contextlib", ".", "redirect_stdout", "(", "StringIO", "(", ")", ")", ":", "\n", "            ", "with", "tempfile", ".", "TemporaryDirectory", "(", "'test_lightconv_lm'", ")", "as", "data_dir", ":", "\n", "                ", "create_dummy_data", "(", "data_dir", ")", "\n", "preprocess_lm_data", "(", "data_dir", ")", "\n", "train_language_model", "(", "\n", "data_dir", ",", "'lightconv_lm'", ",", "[", "'--add-bos-token'", "]", ",", "run_validation", "=", "True", ",", "\n", ")", "\n", "eval_lm_main", "(", "data_dir", ")", "\n", "generate_main", "(", "data_dir", ",", "[", "\n", "'--task'", ",", "'language_modeling'", ",", "\n", "'--sample-break-mode'", ",", "'eos'", ",", "\n", "'--tokens-per-sample'", ",", "'500'", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.TestLanguageModeling.test_lstm_lm": [[506, 519], ["contextlib.redirect_stdout", "io.StringIO", "tempfile.TemporaryDirectory", "test_binaries.create_dummy_data", "test_binaries.preprocess_lm_data", "test_binaries.train_language_model", "test_binaries.eval_lm_main", "test_binaries.generate_main"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.create_dummy_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.preprocess_lm_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.train_language_model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.eval_lm_main", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.generate_main"], ["", "", "", "def", "test_lstm_lm", "(", "self", ")", ":", "\n", "        ", "with", "contextlib", ".", "redirect_stdout", "(", "StringIO", "(", ")", ")", ":", "\n", "            ", "with", "tempfile", ".", "TemporaryDirectory", "(", "'test_lstm_lm'", ")", "as", "data_dir", ":", "\n", "                ", "create_dummy_data", "(", "data_dir", ")", "\n", "preprocess_lm_data", "(", "data_dir", ")", "\n", "train_language_model", "(", "\n", "data_dir", ",", "'lstm_lm'", ",", "[", "'--add-bos-token'", "]", ",", "run_validation", "=", "True", ",", "\n", ")", "\n", "eval_lm_main", "(", "data_dir", ")", "\n", "generate_main", "(", "data_dir", ",", "[", "\n", "'--task'", ",", "'language_modeling'", ",", "\n", "'--sample-break-mode'", ",", "'eos'", ",", "\n", "'--tokens-per-sample'", ",", "'500'", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.TestMaskedLanguageModel.setUp": [[524, 526], ["logging.disable"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "logging", ".", "disable", "(", "logging", ".", "CRITICAL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.TestMaskedLanguageModel.tearDown": [[527, 529], ["logging.disable"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "logging", ".", "disable", "(", "logging", ".", "NOTSET", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.TestMaskedLanguageModel.test_legacy_masked_lm": [[530, 536], ["contextlib.redirect_stdout", "io.StringIO", "tempfile.TemporaryDirectory", "test_binaries.create_dummy_data", "test_binaries.preprocess_lm_data", "test_binaries.train_legacy_masked_language_model"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.create_dummy_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.preprocess_lm_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.train_legacy_masked_language_model"], ["", "def", "test_legacy_masked_lm", "(", "self", ")", ":", "\n", "        ", "with", "contextlib", ".", "redirect_stdout", "(", "StringIO", "(", ")", ")", ":", "\n", "            ", "with", "tempfile", ".", "TemporaryDirectory", "(", "\"test_legacy_mlm\"", ")", "as", "data_dir", ":", "\n", "                ", "create_dummy_data", "(", "data_dir", ")", "\n", "preprocess_lm_data", "(", "data_dir", ")", "\n", "train_legacy_masked_language_model", "(", "data_dir", ",", "\"masked_lm\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.TestMaskedLanguageModel._test_pretrained_masked_lm_for_translation": [[537, 588], ["contextlib.redirect_stdout", "io.StringIO", "tempfile.TemporaryDirectory", "test_binaries.create_dummy_data", "test_binaries.preprocess_lm_data", "test_binaries.train_legacy_masked_language_model", "tempfile.TemporaryDirectory", "test_binaries.create_dummy_data", "test_binaries.preprocess_translation_data", "test_binaries.train_translation_model"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.create_dummy_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.preprocess_lm_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.train_legacy_masked_language_model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.create_dummy_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.preprocess_translation_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.train_translation_model"], ["", "", "", "def", "_test_pretrained_masked_lm_for_translation", "(", "self", ",", "learned_pos_emb", ",", "encoder_only", ")", ":", "\n", "        ", "with", "contextlib", ".", "redirect_stdout", "(", "StringIO", "(", ")", ")", ":", "\n", "            ", "with", "tempfile", ".", "TemporaryDirectory", "(", "\"test_mlm\"", ")", "as", "data_dir", ":", "\n", "                ", "create_dummy_data", "(", "data_dir", ")", "\n", "preprocess_lm_data", "(", "data_dir", ")", "\n", "train_legacy_masked_language_model", "(", "\n", "data_dir", ",", "\n", "arch", "=", "\"masked_lm\"", ",", "\n", "extra_args", "=", "(", "'--encoder-learned-pos'", ",", ")", "if", "learned_pos_emb", "else", "(", ")", "\n", ")", "\n", "with", "tempfile", ".", "TemporaryDirectory", "(", "\n", "\"test_mlm_translation\"", "\n", ")", "as", "translation_dir", ":", "\n", "                    ", "create_dummy_data", "(", "translation_dir", ")", "\n", "preprocess_translation_data", "(", "\n", "translation_dir", ",", "extra_flags", "=", "[", "\"--joined-dictionary\"", "]", "\n", ")", "\n", "# Train transformer with data_dir/checkpoint_last.pt", "\n", "train_translation_model", "(", "\n", "translation_dir", ",", "\n", "arch", "=", "\"transformer_from_pretrained_xlm\"", ",", "\n", "extra_flags", "=", "[", "\n", "\"--decoder-layers\"", ",", "\n", "\"1\"", ",", "\n", "\"--decoder-embed-dim\"", ",", "\n", "\"32\"", ",", "\n", "\"--decoder-attention-heads\"", ",", "\n", "\"1\"", ",", "\n", "\"--decoder-ffn-embed-dim\"", ",", "\n", "\"32\"", ",", "\n", "\"--encoder-layers\"", ",", "\n", "\"1\"", ",", "\n", "\"--encoder-embed-dim\"", ",", "\n", "\"32\"", ",", "\n", "\"--encoder-attention-heads\"", ",", "\n", "\"1\"", ",", "\n", "\"--encoder-ffn-embed-dim\"", ",", "\n", "\"32\"", ",", "\n", "\"--pretrained-xlm-checkpoint\"", ",", "\n", "\"{}/checkpoint_last.pt\"", ".", "format", "(", "data_dir", ")", ",", "\n", "\"--activation-fn\"", ",", "\n", "\"gelu\"", ",", "\n", "\"--max-source-positions\"", ",", "\n", "\"500\"", ",", "\n", "\"--max-target-positions\"", ",", "\n", "\"500\"", ",", "\n", "]", "+", "(", "\n", "[", "\"--encoder-learned-pos\"", ",", "\"--decoder-learned-pos\"", "]", "\n", "if", "learned_pos_emb", "else", "[", "]", "\n", ")", "+", "(", "[", "'--init-encoder-only'", "]", "if", "encoder_only", "else", "[", "]", ")", ",", "\n", "task", "=", "\"translation_from_pretrained_xlm\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.TestMaskedLanguageModel.test_pretrained_masked_lm_for_translation_learned_pos_emb": [[590, 592], ["test_binaries.TestMaskedLanguageModel._test_pretrained_masked_lm_for_translation"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.TestMaskedLanguageModel._test_pretrained_masked_lm_for_translation"], ["", "", "", "", "def", "test_pretrained_masked_lm_for_translation_learned_pos_emb", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_pretrained_masked_lm_for_translation", "(", "True", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.TestMaskedLanguageModel.test_pretrained_masked_lm_for_translation_sinusoidal_pos_emb": [[593, 595], ["test_binaries.TestMaskedLanguageModel._test_pretrained_masked_lm_for_translation"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.TestMaskedLanguageModel._test_pretrained_masked_lm_for_translation"], ["", "def", "test_pretrained_masked_lm_for_translation_sinusoidal_pos_emb", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_pretrained_masked_lm_for_translation", "(", "False", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.TestMaskedLanguageModel.test_pretrained_masked_lm_for_translation_encoder_only": [[596, 598], ["test_binaries.TestMaskedLanguageModel._test_pretrained_masked_lm_for_translation"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.TestMaskedLanguageModel._test_pretrained_masked_lm_for_translation"], ["", "def", "test_pretrained_masked_lm_for_translation_encoder_only", "(", "self", ")", ":", "\n", "        ", "self", ".", "_test_pretrained_masked_lm_for_translation", "(", "True", ",", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.TestOptimizers.setUp": [[665, 667], ["logging.disable"], "methods", ["None"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "logging", ".", "disable", "(", "logging", ".", "CRITICAL", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.TestOptimizers.tearDown": [[668, 670], ["logging.disable"], "methods", ["None"], ["", "def", "tearDown", "(", "self", ")", ":", "\n", "        ", "logging", ".", "disable", "(", "logging", ".", "NOTSET", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.TestOptimizers.test_optimizers": [[671, 690], ["contextlib.redirect_stdout", "io.StringIO", "tempfile.TemporaryDirectory", "test_binaries.create_dummy_data", "test_binaries.preprocess_translation_data", "os.path.join", "os.path.exists", "test_binaries.train_translation_model", "test_binaries.generate_main", "os.remove"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.create_dummy_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.preprocess_translation_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDataset.exists", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.train_translation_model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.generate_main"], ["", "def", "test_optimizers", "(", "self", ")", ":", "\n", "        ", "with", "contextlib", ".", "redirect_stdout", "(", "StringIO", "(", ")", ")", ":", "\n", "            ", "with", "tempfile", ".", "TemporaryDirectory", "(", "'test_optimizers'", ")", "as", "data_dir", ":", "\n", "# Use just a bit of data and tiny model to keep this test runtime reasonable", "\n", "                ", "create_dummy_data", "(", "data_dir", ",", "num_examples", "=", "10", ",", "maxlen", "=", "5", ")", "\n", "preprocess_translation_data", "(", "data_dir", ")", "\n", "optimizers", "=", "[", "'adafactor'", ",", "'adam'", ",", "'nag'", ",", "'adagrad'", ",", "'sgd'", ",", "'adadelta'", "]", "\n", "last_checkpoint", "=", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'checkpoint_last.pt'", ")", "\n", "for", "optimizer", "in", "optimizers", ":", "\n", "                    ", "if", "os", ".", "path", ".", "exists", "(", "last_checkpoint", ")", ":", "\n", "                        ", "os", ".", "remove", "(", "last_checkpoint", ")", "\n", "", "train_translation_model", "(", "data_dir", ",", "'lstm'", ",", "[", "\n", "'--required-batch-size-multiple'", ",", "'1'", ",", "\n", "'--encoder-layers'", ",", "'1'", ",", "\n", "'--encoder-hidden-size'", ",", "'32'", ",", "\n", "'--decoder-layers'", ",", "'1'", ",", "\n", "'--optimizer'", ",", "optimizer", ",", "\n", "]", ")", "\n", "generate_main", "(", "data_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.TestOptimizers.test_flat_grads": [[691, 718], ["unittest.skipIf", "contextlib.redirect_stdout", "torch.cuda.is_available", "io.StringIO", "tempfile.TemporaryDirectory", "test_binaries.create_dummy_data", "test_binaries.preprocess_translation_data", "test_binaries.train_translation_model", "test_binaries.TestOptimizers.assertRaises", "test_binaries.train_translation_model"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.create_dummy_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.preprocess_translation_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.train_translation_model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.train_translation_model"], ["", "", "", "", "@", "unittest", ".", "skipIf", "(", "not", "torch", ".", "cuda", ".", "is_available", "(", ")", ",", "'test requires a GPU'", ")", "\n", "def", "test_flat_grads", "(", "self", ")", ":", "\n", "        ", "with", "contextlib", ".", "redirect_stdout", "(", "StringIO", "(", ")", ")", ":", "\n", "            ", "with", "tempfile", ".", "TemporaryDirectory", "(", "'test_flat_grads'", ")", "as", "data_dir", ":", "\n", "# Use just a bit of data and tiny model to keep this test runtime reasonable", "\n", "                ", "create_dummy_data", "(", "data_dir", ",", "num_examples", "=", "10", ",", "maxlen", "=", "5", ")", "\n", "preprocess_translation_data", "(", "data_dir", ")", "\n", "with", "self", ".", "assertRaises", "(", "RuntimeError", ")", ":", "\n", "# adafactor isn't compatible with flat grads, which", "\n", "# are used by default with --fp16", "\n", "                    ", "train_translation_model", "(", "data_dir", ",", "'lstm'", ",", "[", "\n", "'--required-batch-size-multiple'", ",", "'1'", ",", "\n", "'--encoder-layers'", ",", "'1'", ",", "\n", "'--encoder-hidden-size'", ",", "'32'", ",", "\n", "'--decoder-layers'", ",", "'1'", ",", "\n", "'--optimizer'", ",", "'adafactor'", ",", "\n", "'--fp16'", ",", "\n", "]", ")", "\n", "# but it should pass once we set --fp16-no-flatten-grads", "\n", "", "train_translation_model", "(", "data_dir", ",", "'lstm'", ",", "[", "\n", "'--required-batch-size-multiple'", ",", "'1'", ",", "\n", "'--encoder-layers'", ",", "'1'", ",", "\n", "'--encoder-hidden-size'", ",", "'32'", ",", "\n", "'--decoder-layers'", ",", "'1'", ",", "\n", "'--optimizer'", ",", "'adafactor'", ",", "\n", "'--fp16'", ",", "\n", "'--fp16-no-flatten-grads'", ",", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.train_legacy_masked_language_model": [[600, 661], ["fairseq.options.get_training_parser", "fairseq.options.parse_args_and_arch", "fairseq_cli.train.main", "list"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.get_training_parser", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.parse_args_and_arch", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.inter_rep.main"], ["", "", "def", "train_legacy_masked_language_model", "(", "data_dir", ",", "arch", ",", "extra_args", "=", "(", ")", ")", ":", "\n", "    ", "train_parser", "=", "options", ".", "get_training_parser", "(", ")", "\n", "# TODO: langs should be in and out right?", "\n", "train_args", "=", "options", ".", "parse_args_and_arch", "(", "\n", "train_parser", ",", "\n", "[", "\n", "\"--task\"", ",", "\n", "\"cross_lingual_lm\"", ",", "\n", "data_dir", ",", "\n", "\"--arch\"", ",", "\n", "arch", ",", "\n", "# Optimizer args", "\n", "\"--optimizer\"", ",", "\n", "\"adam\"", ",", "\n", "\"--lr-scheduler\"", ",", "\n", "\"reduce_lr_on_plateau\"", ",", "\n", "\"--lr-shrink\"", ",", "\n", "\"0.5\"", ",", "\n", "\"--lr\"", ",", "\n", "\"0.0001\"", ",", "\n", "\"--min-lr\"", ",", "\n", "\"1e-09\"", ",", "\n", "# dropout, attention args", "\n", "\"--dropout\"", ",", "\n", "\"0.1\"", ",", "\n", "\"--attention-dropout\"", ",", "\n", "\"0.1\"", ",", "\n", "# MLM args", "\n", "\"--criterion\"", ",", "\n", "\"legacy_masked_lm_loss\"", ",", "\n", "\"--masked-lm-only\"", ",", "\n", "\"--monolingual-langs\"", ",", "\n", "\"in,out\"", ",", "\n", "\"--num-segment\"", ",", "\n", "\"5\"", ",", "\n", "# Transformer args: use a small transformer model for fast training", "\n", "\"--encoder-layers\"", ",", "\n", "\"1\"", ",", "\n", "\"--encoder-embed-dim\"", ",", "\n", "\"32\"", ",", "\n", "\"--encoder-attention-heads\"", ",", "\n", "\"1\"", ",", "\n", "\"--encoder-ffn-embed-dim\"", ",", "\n", "\"32\"", ",", "\n", "# Other training args", "\n", "\"--max-tokens\"", ",", "\n", "\"500\"", ",", "\n", "\"--tokens-per-sample\"", ",", "\n", "\"500\"", ",", "\n", "\"--save-dir\"", ",", "\n", "data_dir", ",", "\n", "\"--max-epoch\"", ",", "\n", "\"1\"", ",", "\n", "\"--no-progress-bar\"", ",", "\n", "\"--distributed-world-size\"", ",", "\n", "\"1\"", ",", "\n", "\"--dataset-impl\"", ",", "\n", "\"raw\"", ",", "\n", "]", "+", "list", "(", "extra_args", ")", ",", "\n", ")", "\n", "train", ".", "main", "(", "train_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.create_dummy_data": [[721, 758], ["test_binaries.create_dummy_data._create_dummy_data"], "function", ["None"], ["", "", "", "", "def", "create_dummy_data", "(", "data_dir", ",", "num_examples", "=", "100", ",", "maxlen", "=", "20", ",", "alignment", "=", "False", ")", ":", "\n", "    ", "def", "_create_dummy_data", "(", "filename", ")", ":", "\n", "        ", "data", "=", "torch", ".", "rand", "(", "num_examples", "*", "maxlen", ")", "\n", "data", "=", "97", "+", "torch", ".", "floor", "(", "26", "*", "data", ")", ".", "int", "(", ")", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "filename", ")", ",", "'w'", ")", "as", "h", ":", "\n", "            ", "offset", "=", "0", "\n", "for", "_", "in", "range", "(", "num_examples", ")", ":", "\n", "                ", "ex_len", "=", "random", ".", "randint", "(", "1", ",", "maxlen", ")", "\n", "ex_str", "=", "' '", ".", "join", "(", "map", "(", "chr", ",", "data", "[", "offset", ":", "offset", "+", "ex_len", "]", ")", ")", "\n", "print", "(", "ex_str", ",", "file", "=", "h", ")", "\n", "offset", "+=", "ex_len", "\n", "\n", "", "", "", "def", "_create_dummy_alignment_data", "(", "filename_src", ",", "filename_tgt", ",", "filename", ")", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "filename_src", ")", ",", "'r'", ")", "as", "src_f", ",", "open", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "filename_tgt", ")", ",", "'r'", ")", "as", "tgt_f", ",", "open", "(", "os", ".", "path", ".", "join", "(", "data_dir", ",", "filename", ")", ",", "'w'", ")", "as", "h", ":", "\n", "                    ", "for", "src", ",", "tgt", "in", "zip", "(", "src_f", ",", "tgt_f", ")", ":", "\n", "                        ", "src_len", "=", "len", "(", "src", ".", "split", "(", ")", ")", "\n", "tgt_len", "=", "len", "(", "tgt", ".", "split", "(", ")", ")", "\n", "avg_len", "=", "(", "src_len", "+", "tgt_len", ")", "//", "2", "\n", "num_alignments", "=", "random", ".", "randint", "(", "avg_len", "//", "2", ",", "2", "*", "avg_len", ")", "\n", "src_indices", "=", "torch", ".", "floor", "(", "torch", ".", "rand", "(", "num_alignments", ")", "*", "src_len", ")", ".", "int", "(", ")", "\n", "tgt_indices", "=", "torch", ".", "floor", "(", "torch", ".", "rand", "(", "num_alignments", ")", "*", "tgt_len", ")", ".", "int", "(", ")", "\n", "ex_str", "=", "' '", ".", "join", "(", "[", "\"{}-{}\"", ".", "format", "(", "src", ",", "tgt", ")", "for", "src", ",", "tgt", "in", "zip", "(", "src_indices", ",", "tgt_indices", ")", "]", ")", "\n", "print", "(", "ex_str", ",", "file", "=", "h", ")", "\n", "\n", "", "", "", "_create_dummy_data", "(", "'train.in'", ")", "\n", "_create_dummy_data", "(", "'train.out'", ")", "\n", "_create_dummy_data", "(", "'valid.in'", ")", "\n", "_create_dummy_data", "(", "'valid.out'", ")", "\n", "_create_dummy_data", "(", "'test.in'", ")", "\n", "_create_dummy_data", "(", "'test.out'", ")", "\n", "\n", "if", "alignment", ":", "\n", "        ", "_create_dummy_alignment_data", "(", "'train.in'", ",", "'train.out'", ",", "'train.align'", ")", "\n", "_create_dummy_alignment_data", "(", "'valid.in'", ",", "'valid.out'", ",", "'valid.align'", ")", "\n", "_create_dummy_alignment_data", "(", "'test.in'", ",", "'test.out'", ",", "'test.align'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.preprocess_translation_data": [[759, 774], ["fairseq.options.get_preprocessing_parser", "options.get_preprocessing_parser.parse_args", "fairseq_cli.preprocess.main", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.get_preprocessing_parser", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.inter_rep.main"], ["", "", "def", "preprocess_translation_data", "(", "data_dir", ",", "extra_flags", "=", "None", ")", ":", "\n", "    ", "preprocess_parser", "=", "options", ".", "get_preprocessing_parser", "(", ")", "\n", "preprocess_args", "=", "preprocess_parser", ".", "parse_args", "(", "\n", "[", "\n", "'--source-lang'", ",", "'in'", ",", "\n", "'--target-lang'", ",", "'out'", ",", "\n", "'--trainpref'", ",", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'train'", ")", ",", "\n", "'--validpref'", ",", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'valid'", ")", ",", "\n", "'--testpref'", ",", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'test'", ")", ",", "\n", "'--thresholdtgt'", ",", "'0'", ",", "\n", "'--thresholdsrc'", ",", "'0'", ",", "\n", "'--destdir'", ",", "data_dir", ",", "\n", "]", "+", "(", "extra_flags", "or", "[", "]", ")", ",", "\n", ")", "\n", "preprocess", ".", "main", "(", "preprocess_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.train_translation_model": [[776, 816], ["fairseq.options.get_training_parser", "fairseq.options.parse_args_and_arch", "fairseq_cli.train.main", "fairseq.options.get_validation_parser", "fairseq.options.parse_args_and_arch", "fairseq_cli.validate.main", "os.path.join"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.get_training_parser", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.parse_args_and_arch", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.inter_rep.main", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.get_validation_parser", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.parse_args_and_arch", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.inter_rep.main"], ["", "def", "train_translation_model", "(", "data_dir", ",", "arch", ",", "extra_flags", "=", "None", ",", "task", "=", "'translation'", ",", "run_validation", "=", "False", ",", "\n", "lang_flags", "=", "None", ",", "extra_valid_flags", "=", "None", ")", ":", "\n", "    ", "if", "lang_flags", "is", "None", ":", "\n", "        ", "lang_flags", "=", "[", "\n", "'--source-lang'", ",", "'in'", ",", "\n", "'--target-lang'", ",", "'out'", ",", "\n", "]", "\n", "", "train_parser", "=", "options", ".", "get_training_parser", "(", ")", "\n", "train_args", "=", "options", ".", "parse_args_and_arch", "(", "\n", "train_parser", ",", "\n", "[", "\n", "'--task'", ",", "task", ",", "\n", "data_dir", ",", "\n", "'--save-dir'", ",", "data_dir", ",", "\n", "'--arch'", ",", "arch", ",", "\n", "'--lr'", ",", "'0.05'", ",", "\n", "'--max-tokens'", ",", "'500'", ",", "\n", "'--max-epoch'", ",", "'1'", ",", "\n", "'--no-progress-bar'", ",", "\n", "'--distributed-world-size'", ",", "'1'", ",", "\n", "'--num-workers'", ",", "0", ",", "\n", "]", "+", "lang_flags", "+", "(", "extra_flags", "or", "[", "]", ")", ",", "\n", ")", "\n", "train", ".", "main", "(", "train_args", ")", "\n", "\n", "if", "run_validation", ":", "\n", "# test validation", "\n", "        ", "validate_parser", "=", "options", ".", "get_validation_parser", "(", ")", "\n", "validate_args", "=", "options", ".", "parse_args_and_arch", "(", "\n", "validate_parser", ",", "\n", "[", "\n", "'--task'", ",", "task", ",", "\n", "data_dir", ",", "\n", "'--path'", ",", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'checkpoint_last.pt'", ")", ",", "\n", "'--valid-subset'", ",", "'valid'", ",", "\n", "'--max-tokens'", ",", "'500'", ",", "\n", "'--no-progress-bar'", ",", "\n", "]", "+", "lang_flags", "+", "(", "extra_valid_flags", "or", "[", "]", ")", "\n", ")", "\n", "validate", ".", "main", "(", "validate_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.generate_main": [[818, 848], ["fairseq.options.get_generation_parser", "fairseq.options.parse_args_and_arch", "fairseq_cli.generate.main", "io.StringIO", "fairseq_cli.interactive.main", "os.path.join"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.get_generation_parser", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.parse_args_and_arch", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.inter_rep.main", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.inter_rep.main"], ["", "", "def", "generate_main", "(", "data_dir", ",", "extra_flags", "=", "None", ")", ":", "\n", "    ", "if", "extra_flags", "is", "None", ":", "\n", "        ", "extra_flags", "=", "[", "\n", "'--print-alignment'", ",", "\n", "]", "\n", "", "generate_parser", "=", "options", ".", "get_generation_parser", "(", ")", "\n", "generate_args", "=", "options", ".", "parse_args_and_arch", "(", "\n", "generate_parser", ",", "\n", "[", "\n", "data_dir", ",", "\n", "'--path'", ",", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'checkpoint_last.pt'", ")", ",", "\n", "'--beam'", ",", "'3'", ",", "\n", "'--batch-size'", ",", "'64'", ",", "\n", "'--max-len-b'", ",", "'5'", ",", "\n", "'--gen-subset'", ",", "'valid'", ",", "\n", "'--no-progress-bar'", ",", "\n", "]", "+", "(", "extra_flags", "or", "[", "]", ")", ",", "\n", ")", "\n", "\n", "# evaluate model in batch mode", "\n", "generate", ".", "main", "(", "generate_args", ")", "\n", "\n", "# evaluate model interactively", "\n", "generate_args", ".", "buffer_size", "=", "0", "\n", "generate_args", ".", "input", "=", "'-'", "\n", "generate_args", ".", "max_sentences", "=", "None", "\n", "orig_stdin", "=", "sys", ".", "stdin", "\n", "sys", ".", "stdin", "=", "StringIO", "(", "'h e l l o\\n'", ")", "\n", "interactive", ".", "main", "(", "generate_args", ")", "\n", "sys", ".", "stdin", "=", "orig_stdin", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.preprocess_lm_data": [[850, 860], ["fairseq.options.get_preprocessing_parser", "options.get_preprocessing_parser.parse_args", "fairseq_cli.preprocess.main", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.get_preprocessing_parser", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.inter_rep.main"], ["", "def", "preprocess_lm_data", "(", "data_dir", ")", ":", "\n", "    ", "preprocess_parser", "=", "options", ".", "get_preprocessing_parser", "(", ")", "\n", "preprocess_args", "=", "preprocess_parser", ".", "parse_args", "(", "[", "\n", "'--only-source'", ",", "\n", "'--trainpref'", ",", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'train.out'", ")", ",", "\n", "'--validpref'", ",", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'valid.out'", ")", ",", "\n", "'--testpref'", ",", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'test.out'", ")", ",", "\n", "'--destdir'", ",", "data_dir", ",", "\n", "]", ")", "\n", "preprocess", ".", "main", "(", "preprocess_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.train_language_model": [[862, 900], ["fairseq.options.get_training_parser", "fairseq.options.parse_args_and_arch", "fairseq_cli.train.main", "fairseq.options.get_validation_parser", "fairseq.options.parse_args_and_arch", "fairseq_cli.validate.main", "os.path.join"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.get_training_parser", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.parse_args_and_arch", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.inter_rep.main", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.get_validation_parser", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.parse_args_and_arch", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.inter_rep.main"], ["", "def", "train_language_model", "(", "data_dir", ",", "arch", ",", "extra_flags", "=", "None", ",", "run_validation", "=", "False", ")", ":", "\n", "    ", "train_parser", "=", "options", ".", "get_training_parser", "(", ")", "\n", "train_args", "=", "options", ".", "parse_args_and_arch", "(", "\n", "train_parser", ",", "\n", "[", "\n", "'--task'", ",", "'language_modeling'", ",", "\n", "data_dir", ",", "\n", "'--arch'", ",", "arch", ",", "\n", "'--optimizer'", ",", "'adam'", ",", "\n", "'--lr'", ",", "'0.0001'", ",", "\n", "'--criterion'", ",", "'adaptive_loss'", ",", "\n", "'--adaptive-softmax-cutoff'", ",", "'5,10,15'", ",", "\n", "'--max-tokens'", ",", "'500'", ",", "\n", "'--tokens-per-sample'", ",", "'500'", ",", "\n", "'--save-dir'", ",", "data_dir", ",", "\n", "'--max-epoch'", ",", "'1'", ",", "\n", "'--no-progress-bar'", ",", "\n", "'--distributed-world-size'", ",", "'1'", ",", "\n", "'--ddp-backend'", ",", "'no_c10d'", ",", "\n", "]", "+", "(", "extra_flags", "or", "[", "]", ")", ",", "\n", ")", "\n", "train", ".", "main", "(", "train_args", ")", "\n", "\n", "if", "run_validation", ":", "\n", "# test validation", "\n", "        ", "validate_parser", "=", "options", ".", "get_validation_parser", "(", ")", "\n", "validate_args", "=", "options", ".", "parse_args_and_arch", "(", "\n", "validate_parser", ",", "\n", "[", "\n", "'--task'", ",", "'language_modeling'", ",", "\n", "data_dir", ",", "\n", "'--path'", ",", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'checkpoint_last.pt'", ")", ",", "\n", "'--valid-subset'", ",", "'valid'", ",", "\n", "'--max-tokens'", ",", "'500'", ",", "\n", "'--no-progress-bar'", ",", "\n", "]", "\n", ")", "\n", "validate", ".", "main", "(", "validate_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.eval_lm_main": [[902, 913], ["fairseq.options.get_eval_lm_parser", "fairseq.options.parse_args_and_arch", "fairseq_cli.eval_lm.main", "os.path.join"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.get_eval_lm_parser", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.parse_args_and_arch", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.inter_rep.main"], ["", "", "def", "eval_lm_main", "(", "data_dir", ")", ":", "\n", "    ", "eval_lm_parser", "=", "options", ".", "get_eval_lm_parser", "(", ")", "\n", "eval_lm_args", "=", "options", ".", "parse_args_and_arch", "(", "\n", "eval_lm_parser", ",", "\n", "[", "\n", "data_dir", ",", "\n", "'--path'", ",", "os", ".", "path", ".", "join", "(", "data_dir", ",", "'checkpoint_last.pt'", ")", ",", "\n", "'--no-progress-bar'", ",", "\n", "]", ",", "\n", ")", "\n", "eval_lm", ".", "main", "(", "eval_lm_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_binaries.train_masked_language_model": [[915, 976], ["fairseq.options.get_training_parser", "fairseq.options.parse_args_and_arch", "fairseq_cli.train.main", "list"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.get_training_parser", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.options.parse_args_and_arch", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.inter_rep.main"], ["", "def", "train_masked_language_model", "(", "data_dir", ",", "arch", ",", "extra_args", "=", "(", ")", ")", ":", "\n", "    ", "train_parser", "=", "options", ".", "get_training_parser", "(", ")", "\n", "# TODO: langs should be in and out right?", "\n", "train_args", "=", "options", ".", "parse_args_and_arch", "(", "\n", "train_parser", ",", "\n", "[", "\n", "\"--task\"", ",", "\n", "\"cross_lingual_lm\"", ",", "\n", "data_dir", ",", "\n", "\"--arch\"", ",", "\n", "arch", ",", "\n", "# Optimizer args", "\n", "\"--optimizer\"", ",", "\n", "\"adam\"", ",", "\n", "\"--lr-scheduler\"", ",", "\n", "\"reduce_lr_on_plateau\"", ",", "\n", "\"--lr-shrink\"", ",", "\n", "\"0.5\"", ",", "\n", "\"--lr\"", ",", "\n", "\"0.0001\"", ",", "\n", "\"--min-lr\"", ",", "\n", "\"1e-09\"", ",", "\n", "# dropout, attention args", "\n", "\"--dropout\"", ",", "\n", "\"0.1\"", ",", "\n", "\"--attention-dropout\"", ",", "\n", "\"0.1\"", ",", "\n", "# MLM args", "\n", "\"--criterion\"", ",", "\n", "\"masked_lm_loss\"", ",", "\n", "\"--masked-lm-only\"", ",", "\n", "\"--monolingual-langs\"", ",", "\n", "\"in,out\"", ",", "\n", "\"--num-segment\"", ",", "\n", "\"5\"", ",", "\n", "# Transformer args: use a small transformer model for fast training", "\n", "\"--encoder-layers\"", ",", "\n", "\"1\"", ",", "\n", "\"--encoder-embed-dim\"", ",", "\n", "\"32\"", ",", "\n", "\"--encoder-attention-heads\"", ",", "\n", "\"1\"", ",", "\n", "\"--encoder-ffn-embed-dim\"", ",", "\n", "\"32\"", ",", "\n", "# Other training args", "\n", "\"--max-tokens\"", ",", "\n", "\"500\"", ",", "\n", "\"--tokens-per-sample\"", ",", "\n", "\"500\"", ",", "\n", "\"--save-dir\"", ",", "\n", "data_dir", ",", "\n", "\"--max-epoch\"", ",", "\n", "\"1\"", ",", "\n", "\"--no-progress-bar\"", ",", "\n", "\"--distributed-world-size\"", ",", "\n", "\"1\"", ",", "\n", "\"--dataset-impl\"", ",", "\n", "\"raw\"", ",", "\n", "]", "+", "list", "(", "extra_args", ")", ",", "\n", ")", "\n", "train", ".", "main", "(", "train_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertHypoTokens": [[19, 21], ["test_sequence_generator.TestSequenceGeneratorBase.assertTensorEqual", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertTensorEqual"], ["    ", "def", "assertHypoTokens", "(", "self", ",", "hypo", ",", "tokens", ")", ":", "\n", "        ", "self", ".", "assertTensorEqual", "(", "hypo", "[", "'tokens'", "]", ",", "torch", ".", "LongTensor", "(", "tokens", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertHypoScore": [[22, 30], ["torch.FloatTensor().log", "test_sequence_generator.TestSequenceGeneratorBase.assertAlmostEqual", "test_sequence_generator.TestSequenceGeneratorBase.assertEqual", "torch.FloatTensor().log.sum", "test_sequence_generator.TestSequenceGeneratorBase.assertLess", "torch.FloatTensor().log.numel", "hypo[].numel", "abs", "torch.FloatTensor", "torch.FloatTensor().log.numel"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertAlmostEqual"], ["", "def", "assertHypoScore", "(", "self", ",", "hypo", ",", "pos_probs", ",", "normalized", "=", "True", ",", "lenpen", "=", "1.", ")", ":", "\n", "        ", "pos_scores", "=", "torch", ".", "FloatTensor", "(", "pos_probs", ")", ".", "log", "(", ")", "\n", "self", ".", "assertAlmostEqual", "(", "hypo", "[", "'positional_scores'", "]", ",", "pos_scores", ")", "\n", "self", ".", "assertEqual", "(", "pos_scores", ".", "numel", "(", ")", ",", "hypo", "[", "'tokens'", "]", ".", "numel", "(", ")", ")", "\n", "score", "=", "pos_scores", ".", "sum", "(", ")", "\n", "if", "normalized", ":", "\n", "            ", "score", "/=", "pos_scores", ".", "numel", "(", ")", "**", "lenpen", "\n", "", "self", ".", "assertLess", "(", "abs", "(", "score", "-", "hypo", "[", "'score'", "]", ")", ",", "1e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertAlmostEqual": [[31, 34], ["test_sequence_generator.TestSequenceGeneratorBase.assertEqual", "test_sequence_generator.TestSequenceGeneratorBase.assertLess", "t1.size", "t2.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "assertAlmostEqual", "(", "self", ",", "t1", ",", "t2", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "t1", ".", "size", "(", ")", ",", "t2", ".", "size", "(", ")", ",", "\"size mismatch\"", ")", "\n", "self", ".", "assertLess", "(", "(", "t1", "-", "t2", ")", ".", "abs", "(", ")", ".", "max", "(", ")", ",", "1e-4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertTensorEqual": [[35, 38], ["test_sequence_generator.TestSequenceGeneratorBase.assertEqual", "test_sequence_generator.TestSequenceGeneratorBase.assertEqual", "t1.size", "t2.size", "t1.ne().long().sum", "t1.ne().long", "t1.ne"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "assertTensorEqual", "(", "self", ",", "t1", ",", "t2", ")", ":", "\n", "        ", "self", ".", "assertEqual", "(", "t1", ".", "size", "(", ")", ",", "t2", ".", "size", "(", ")", ",", "\"size mismatch\"", ")", "\n", "self", ".", "assertEqual", "(", "t1", ".", "ne", "(", "t2", ")", ".", "long", "(", ")", ".", "sum", "(", ")", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGenerator.setUp": [[42, 49], ["tests.sequence_generator_setup"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.utils.sequence_generator_setup"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "        ", "self", ".", "tgt_dict", ",", "self", ".", "w1", ",", "self", ".", "w2", ",", "src_tokens", ",", "src_lengths", ",", "self", ".", "model", "=", "(", "\n", "test_utils", ".", "sequence_generator_setup", "(", ")", "\n", ")", "\n", "self", ".", "sample", "=", "{", "\n", "'net_input'", ":", "{", "\n", "'src_tokens'", ":", "src_tokens", ",", "'src_lengths'", ":", "src_lengths", ",", "\n", "}", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGenerator.test_with_normalization": [[52, 68], ["fairseq.sequence_generator.SequenceGenerator", "fairseq.sequence_generator.SequenceGenerator.generate", "test_sequence_generator.TestSequenceGenerator.assertHypoTokens", "test_sequence_generator.TestSequenceGenerator.assertHypoScore", "test_sequence_generator.TestSequenceGenerator.assertHypoTokens", "test_sequence_generator.TestSequenceGenerator.assertHypoScore", "test_sequence_generator.TestSequenceGenerator.assertHypoTokens", "test_sequence_generator.TestSequenceGenerator.assertHypoScore", "test_sequence_generator.TestSequenceGenerator.assertHypoTokens", "test_sequence_generator.TestSequenceGenerator.assertHypoScore", "test_sequence_generator.TestSequenceGenerator.tgt_dict.eos"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.hub_interface.BARTHubInterface.generate", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertHypoTokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestDiverseSiblingsSearch.assertHypoScore", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertHypoTokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestDiverseSiblingsSearch.assertHypoScore", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertHypoTokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestDiverseSiblingsSearch.assertHypoScore", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertHypoTokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestDiverseSiblingsSearch.assertHypoScore", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos"], ["", "def", "test_with_normalization", "(", "self", ")", ":", "\n", "        ", "generator", "=", "SequenceGenerator", "(", "self", ".", "tgt_dict", ",", "beam_size", "=", "2", ")", "\n", "hypos", "=", "generator", ".", "generate", "(", "[", "self", ".", "model", "]", ",", "self", ".", "sample", ")", "\n", "eos", ",", "w1", ",", "w2", "=", "self", ".", "tgt_dict", ".", "eos", "(", ")", ",", "self", ".", "w1", ",", "self", ".", "w2", "\n", "# sentence 1, beam 1", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "0", "]", "[", "0", "]", ",", "[", "w1", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "0", "]", "[", "0", "]", ",", "[", "0.9", ",", "1.0", "]", ")", "\n", "# sentence 1, beam 2", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "0", "]", "[", "1", "]", ",", "[", "w2", ",", "w1", ",", "w2", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "0", "]", "[", "1", "]", ",", "[", "0.1", ",", "0.9", ",", "0.9", ",", "1.0", "]", ")", "\n", "# sentence 2, beam 1", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "1", "]", "[", "0", "]", ",", "[", "w1", ",", "w2", ",", "w1", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "1", "]", "[", "0", "]", ",", "[", "0.7", ",", "0.4", ",", "0.4", ",", "1.0", "]", ")", "\n", "# sentence 2, beam 2", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "1", "]", "[", "1", "]", ",", "[", "w1", ",", "w2", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "1", "]", "[", "1", "]", ",", "[", "0.7", ",", "0.4", ",", "0.6", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGenerator.test_without_normalization": [[69, 87], ["fairseq.sequence_generator.SequenceGenerator", "fairseq.sequence_generator.SequenceGenerator.generate", "test_sequence_generator.TestSequenceGenerator.assertHypoTokens", "test_sequence_generator.TestSequenceGenerator.assertHypoScore", "test_sequence_generator.TestSequenceGenerator.assertHypoTokens", "test_sequence_generator.TestSequenceGenerator.assertHypoScore", "test_sequence_generator.TestSequenceGenerator.assertHypoTokens", "test_sequence_generator.TestSequenceGenerator.assertHypoScore", "test_sequence_generator.TestSequenceGenerator.assertHypoTokens", "test_sequence_generator.TestSequenceGenerator.assertHypoScore", "test_sequence_generator.TestSequenceGenerator.tgt_dict.eos"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.hub_interface.BARTHubInterface.generate", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertHypoTokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestDiverseSiblingsSearch.assertHypoScore", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertHypoTokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestDiverseSiblingsSearch.assertHypoScore", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertHypoTokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestDiverseSiblingsSearch.assertHypoScore", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertHypoTokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestDiverseSiblingsSearch.assertHypoScore", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos"], ["", "def", "test_without_normalization", "(", "self", ")", ":", "\n", "# Sentence 1: unchanged from the normalized case", "\n", "# Sentence 2: beams swap order", "\n", "        ", "generator", "=", "SequenceGenerator", "(", "self", ".", "tgt_dict", ",", "beam_size", "=", "2", ",", "normalize_scores", "=", "False", ")", "\n", "hypos", "=", "generator", ".", "generate", "(", "[", "self", ".", "model", "]", ",", "self", ".", "sample", ")", "\n", "eos", ",", "w1", ",", "w2", "=", "self", ".", "tgt_dict", ".", "eos", "(", ")", ",", "self", ".", "w1", ",", "self", ".", "w2", "\n", "# sentence 1, beam 1", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "0", "]", "[", "0", "]", ",", "[", "w1", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "0", "]", "[", "0", "]", ",", "[", "0.9", ",", "1.0", "]", ",", "normalized", "=", "False", ")", "\n", "# sentence 1, beam 2", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "0", "]", "[", "1", "]", ",", "[", "w2", ",", "w1", ",", "w2", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "0", "]", "[", "1", "]", ",", "[", "0.1", ",", "0.9", ",", "0.9", ",", "1.0", "]", ",", "normalized", "=", "False", ")", "\n", "# sentence 2, beam 1", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "1", "]", "[", "0", "]", ",", "[", "w1", ",", "w2", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "1", "]", "[", "0", "]", ",", "[", "0.7", ",", "0.4", ",", "0.6", "]", ",", "normalized", "=", "False", ")", "\n", "# sentence 2, beam 2", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "1", "]", "[", "1", "]", ",", "[", "w1", ",", "w2", ",", "w1", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "1", "]", "[", "1", "]", ",", "[", "0.7", ",", "0.4", ",", "0.4", ",", "1.0", "]", ",", "normalized", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGenerator.test_with_lenpen_favoring_short_hypos": [[88, 105], ["fairseq.sequence_generator.SequenceGenerator", "fairseq.sequence_generator.SequenceGenerator.generate", "test_sequence_generator.TestSequenceGenerator.assertHypoTokens", "test_sequence_generator.TestSequenceGenerator.assertHypoScore", "test_sequence_generator.TestSequenceGenerator.assertHypoTokens", "test_sequence_generator.TestSequenceGenerator.assertHypoScore", "test_sequence_generator.TestSequenceGenerator.assertHypoTokens", "test_sequence_generator.TestSequenceGenerator.assertHypoScore", "test_sequence_generator.TestSequenceGenerator.assertHypoTokens", "test_sequence_generator.TestSequenceGenerator.assertHypoScore", "test_sequence_generator.TestSequenceGenerator.tgt_dict.eos"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.hub_interface.BARTHubInterface.generate", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertHypoTokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestDiverseSiblingsSearch.assertHypoScore", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertHypoTokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestDiverseSiblingsSearch.assertHypoScore", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertHypoTokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestDiverseSiblingsSearch.assertHypoScore", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertHypoTokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestDiverseSiblingsSearch.assertHypoScore", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos"], ["", "def", "test_with_lenpen_favoring_short_hypos", "(", "self", ")", ":", "\n", "        ", "lenpen", "=", "0.6", "\n", "generator", "=", "SequenceGenerator", "(", "self", ".", "tgt_dict", ",", "beam_size", "=", "2", ",", "len_penalty", "=", "lenpen", ")", "\n", "hypos", "=", "generator", ".", "generate", "(", "[", "self", ".", "model", "]", ",", "self", ".", "sample", ")", "\n", "eos", ",", "w1", ",", "w2", "=", "self", ".", "tgt_dict", ".", "eos", "(", ")", ",", "self", ".", "w1", ",", "self", ".", "w2", "\n", "# sentence 1, beam 1", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "0", "]", "[", "0", "]", ",", "[", "w1", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "0", "]", "[", "0", "]", ",", "[", "0.9", ",", "1.0", "]", ",", "lenpen", "=", "lenpen", ")", "\n", "# sentence 1, beam 2", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "0", "]", "[", "1", "]", ",", "[", "w2", ",", "w1", ",", "w2", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "0", "]", "[", "1", "]", ",", "[", "0.1", ",", "0.9", ",", "0.9", ",", "1.0", "]", ",", "lenpen", "=", "lenpen", ")", "\n", "# sentence 2, beam 1", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "1", "]", "[", "0", "]", ",", "[", "w1", ",", "w2", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "1", "]", "[", "0", "]", ",", "[", "0.7", ",", "0.4", ",", "0.6", "]", ",", "lenpen", "=", "lenpen", ")", "\n", "# sentence 2, beam 2", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "1", "]", "[", "1", "]", ",", "[", "w1", ",", "w2", ",", "w1", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "1", "]", "[", "1", "]", ",", "[", "0.7", ",", "0.4", ",", "0.4", ",", "1.0", "]", ",", "lenpen", "=", "lenpen", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGenerator.test_with_lenpen_favoring_long_hypos": [[106, 123], ["fairseq.sequence_generator.SequenceGenerator", "fairseq.sequence_generator.SequenceGenerator.generate", "test_sequence_generator.TestSequenceGenerator.assertHypoTokens", "test_sequence_generator.TestSequenceGenerator.assertHypoScore", "test_sequence_generator.TestSequenceGenerator.assertHypoTokens", "test_sequence_generator.TestSequenceGenerator.assertHypoScore", "test_sequence_generator.TestSequenceGenerator.assertHypoTokens", "test_sequence_generator.TestSequenceGenerator.assertHypoScore", "test_sequence_generator.TestSequenceGenerator.assertHypoTokens", "test_sequence_generator.TestSequenceGenerator.assertHypoScore", "test_sequence_generator.TestSequenceGenerator.tgt_dict.eos"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.hub_interface.BARTHubInterface.generate", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertHypoTokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestDiverseSiblingsSearch.assertHypoScore", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertHypoTokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestDiverseSiblingsSearch.assertHypoScore", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertHypoTokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestDiverseSiblingsSearch.assertHypoScore", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertHypoTokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestDiverseSiblingsSearch.assertHypoScore", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos"], ["", "def", "test_with_lenpen_favoring_long_hypos", "(", "self", ")", ":", "\n", "        ", "lenpen", "=", "5.0", "\n", "generator", "=", "SequenceGenerator", "(", "self", ".", "tgt_dict", ",", "beam_size", "=", "2", ",", "len_penalty", "=", "lenpen", ")", "\n", "hypos", "=", "generator", ".", "generate", "(", "[", "self", ".", "model", "]", ",", "self", ".", "sample", ")", "\n", "eos", ",", "w1", ",", "w2", "=", "self", ".", "tgt_dict", ".", "eos", "(", ")", ",", "self", ".", "w1", ",", "self", ".", "w2", "\n", "# sentence 1, beam 1", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "0", "]", "[", "0", "]", ",", "[", "w2", ",", "w1", ",", "w2", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "0", "]", "[", "0", "]", ",", "[", "0.1", ",", "0.9", ",", "0.9", ",", "1.0", "]", ",", "lenpen", "=", "lenpen", ")", "\n", "# sentence 1, beam 2", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "0", "]", "[", "1", "]", ",", "[", "w1", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "0", "]", "[", "1", "]", ",", "[", "0.9", ",", "1.0", "]", ",", "lenpen", "=", "lenpen", ")", "\n", "# sentence 2, beam 1", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "1", "]", "[", "0", "]", ",", "[", "w1", ",", "w2", ",", "w1", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "1", "]", "[", "0", "]", ",", "[", "0.7", ",", "0.4", ",", "0.4", ",", "1.0", "]", ",", "lenpen", "=", "lenpen", ")", "\n", "# sentence 2, beam 2", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "1", "]", "[", "1", "]", ",", "[", "w1", ",", "w2", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "1", "]", "[", "1", "]", ",", "[", "0.7", ",", "0.4", ",", "0.6", "]", ",", "lenpen", "=", "lenpen", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGenerator.test_maxlen": [[124, 140], ["fairseq.sequence_generator.SequenceGenerator", "fairseq.sequence_generator.SequenceGenerator.generate", "test_sequence_generator.TestSequenceGenerator.assertHypoTokens", "test_sequence_generator.TestSequenceGenerator.assertHypoScore", "test_sequence_generator.TestSequenceGenerator.assertHypoTokens", "test_sequence_generator.TestSequenceGenerator.assertHypoScore", "test_sequence_generator.TestSequenceGenerator.assertHypoTokens", "test_sequence_generator.TestSequenceGenerator.assertHypoScore", "test_sequence_generator.TestSequenceGenerator.assertHypoTokens", "test_sequence_generator.TestSequenceGenerator.assertHypoScore", "test_sequence_generator.TestSequenceGenerator.tgt_dict.eos"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.hub_interface.BARTHubInterface.generate", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertHypoTokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestDiverseSiblingsSearch.assertHypoScore", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertHypoTokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestDiverseSiblingsSearch.assertHypoScore", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertHypoTokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestDiverseSiblingsSearch.assertHypoScore", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertHypoTokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestDiverseSiblingsSearch.assertHypoScore", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos"], ["", "def", "test_maxlen", "(", "self", ")", ":", "\n", "        ", "generator", "=", "SequenceGenerator", "(", "self", ".", "tgt_dict", ",", "beam_size", "=", "2", ",", "max_len_b", "=", "2", ")", "\n", "hypos", "=", "generator", ".", "generate", "(", "[", "self", ".", "model", "]", ",", "self", ".", "sample", ")", "\n", "eos", ",", "w1", ",", "w2", "=", "self", ".", "tgt_dict", ".", "eos", "(", ")", ",", "self", ".", "w1", ",", "self", ".", "w2", "\n", "# sentence 1, beam 1", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "0", "]", "[", "0", "]", ",", "[", "w1", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "0", "]", "[", "0", "]", ",", "[", "0.9", ",", "1.0", "]", ")", "\n", "# sentence 1, beam 2", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "0", "]", "[", "1", "]", ",", "[", "w2", ",", "w2", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "0", "]", "[", "1", "]", ",", "[", "0.1", ",", "0.1", ",", "0.6", "]", ")", "\n", "# sentence 2, beam 1", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "1", "]", "[", "0", "]", ",", "[", "w1", ",", "w2", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "1", "]", "[", "0", "]", ",", "[", "0.7", ",", "0.4", ",", "0.6", "]", ")", "\n", "# sentence 2, beam 2", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "1", "]", "[", "1", "]", ",", "[", "w2", ",", "w2", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "1", "]", "[", "1", "]", ",", "[", "0.3", ",", "0.9", ",", "0.01", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestDiverseBeamSearch.setUp": [[144, 199], ["tests.dummy_dictionary", "test_sequence_generator.TestDiverseBeamSearch.assertEqual", "test_sequence_generator.TestDiverseBeamSearch.assertEqual", "test_sequence_generator.TestDiverseBeamSearch.assertEqual", "tests.dummy_dictionary.eos", "torch.LongTensor", "torch.LongTensor", "argparse.Namespace", "tests.TestTranslationTask.setup_task", "tests.TestTranslationTask.setup_task.build_model", "tests.dummy_dictionary.pad", "tests.dummy_dictionary.eos", "tests.dummy_dictionary.unk", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.utils.dummy_dictionary", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyLMTask.setup_task", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.build_model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.unk"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "# construct dummy dictionary", "\n", "        ", "d", "=", "test_utils", ".", "dummy_dictionary", "(", "vocab_size", "=", "2", ")", "\n", "self", ".", "assertEqual", "(", "d", ".", "pad", "(", ")", ",", "1", ")", "\n", "self", ".", "assertEqual", "(", "d", ".", "eos", "(", ")", ",", "2", ")", "\n", "self", ".", "assertEqual", "(", "d", ".", "unk", "(", ")", ",", "3", ")", "\n", "self", ".", "eos", "=", "d", ".", "eos", "(", ")", "\n", "self", ".", "w1", "=", "4", "\n", "self", ".", "w2", "=", "5", "\n", "\n", "# construct source data", "\n", "self", ".", "src_tokens", "=", "torch", ".", "LongTensor", "(", "[", "\n", "[", "self", ".", "w1", ",", "self", ".", "w2", ",", "self", ".", "eos", "]", ",", "\n", "[", "self", ".", "w1", ",", "self", ".", "w2", ",", "self", ".", "eos", "]", ",", "\n", "]", ")", "\n", "self", ".", "src_lengths", "=", "torch", ".", "LongTensor", "(", "[", "2", ",", "2", "]", ")", "\n", "\n", "args", "=", "argparse", ".", "Namespace", "(", ")", "\n", "unk", "=", "0.", "\n", "args", ".", "beam_probs", "=", "[", "\n", "# step 0:", "\n", "torch", ".", "FloatTensor", "(", "[", "\n", "# eos      w1   w2", "\n", "# sentence 1:", "\n", "[", "0.0", ",", "unk", ",", "0.9", ",", "0.1", "]", ",", "# beam 1", "\n", "[", "0.0", ",", "unk", ",", "0.9", ",", "0.1", "]", ",", "# beam 2", "\n", "# sentence 2:", "\n", "[", "0.0", ",", "unk", ",", "0.7", ",", "0.3", "]", ",", "\n", "[", "0.0", ",", "unk", ",", "0.7", ",", "0.3", "]", ",", "\n", "]", ")", ",", "\n", "# step 1:", "\n", "torch", ".", "FloatTensor", "(", "[", "\n", "# eos      w1   w2", "\n", "# sentence 1:", "\n", "[", "0.0", ",", "unk", ",", "0.6", ",", "0.4", "]", ",", "\n", "[", "0.0", ",", "unk", ",", "0.6", ",", "0.4", "]", ",", "\n", "# sentence 2:", "\n", "[", "0.25", ",", "unk", ",", "0.35", ",", "0.4", "]", ",", "\n", "[", "0.25", ",", "unk", ",", "0.35", ",", "0.4", "]", ",", "\n", "]", ")", ",", "\n", "# step 2:", "\n", "torch", ".", "FloatTensor", "(", "[", "\n", "# eos      w1   w2", "\n", "# sentence 1:", "\n", "[", "1.0", ",", "unk", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "1.0", ",", "unk", ",", "0.0", ",", "0.0", "]", ",", "\n", "# sentence 2:", "\n", "[", "0.9", ",", "unk", ",", "0.1", ",", "0.0", "]", ",", "\n", "[", "0.9", ",", "unk", ",", "0.1", ",", "0.0", "]", ",", "\n", "]", ")", ",", "\n", "]", "\n", "\n", "task", "=", "test_utils", ".", "TestTranslationTask", ".", "setup_task", "(", "args", ",", "d", ",", "d", ")", "\n", "self", ".", "model", "=", "task", ".", "build_model", "(", "args", ")", "\n", "self", ".", "tgt_dict", "=", "task", ".", "target_dictionary", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestDiverseBeamSearch.test_diverse_beam_search": [[200, 220], ["fairseq.search.DiverseBeamSearch", "fairseq.sequence_generator.SequenceGenerator", "fairseq.sequence_generator.SequenceGenerator.generate", "test_sequence_generator.TestDiverseBeamSearch.assertHypoTokens", "test_sequence_generator.TestDiverseBeamSearch.assertHypoScore", "test_sequence_generator.TestDiverseBeamSearch.assertHypoTokens", "test_sequence_generator.TestDiverseBeamSearch.assertHypoScore", "test_sequence_generator.TestDiverseBeamSearch.assertHypoTokens", "test_sequence_generator.TestDiverseBeamSearch.assertHypoScore", "test_sequence_generator.TestDiverseBeamSearch.assertHypoTokens", "test_sequence_generator.TestDiverseBeamSearch.assertHypoScore"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.hub_interface.BARTHubInterface.generate", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertHypoTokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestDiverseSiblingsSearch.assertHypoScore", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertHypoTokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestDiverseSiblingsSearch.assertHypoScore", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertHypoTokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestDiverseSiblingsSearch.assertHypoScore", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertHypoTokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestDiverseSiblingsSearch.assertHypoScore"], ["", "def", "test_diverse_beam_search", "(", "self", ")", ":", "\n", "        ", "search_strategy", "=", "search", ".", "DiverseBeamSearch", "(", "self", ".", "tgt_dict", ",", "num_groups", "=", "2", ",", "diversity_strength", "=", "0.", ")", "\n", "generator", "=", "SequenceGenerator", "(", "\n", "self", ".", "tgt_dict", ",", "beam_size", "=", "2", ",", "search_strategy", "=", "search_strategy", ",", "\n", ")", "\n", "sample", "=", "{", "'net_input'", ":", "{", "'src_tokens'", ":", "self", ".", "src_tokens", ",", "'src_lengths'", ":", "self", ".", "src_lengths", "}", "}", "\n", "hypos", "=", "generator", ".", "generate", "(", "[", "self", ".", "model", "]", ",", "sample", ")", "\n", "eos", ",", "w1", ",", "w2", "=", "self", ".", "eos", ",", "self", ".", "w1", ",", "self", ".", "w2", "\n", "# sentence 1, beam 1", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "0", "]", "[", "0", "]", ",", "[", "w1", ",", "w1", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "0", "]", "[", "0", "]", ",", "[", "0.9", ",", "0.6", ",", "1.0", "]", ")", "\n", "# sentence 1, beam 2", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "0", "]", "[", "1", "]", ",", "[", "w1", ",", "w1", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "0", "]", "[", "1", "]", ",", "[", "0.9", ",", "0.6", ",", "1.0", "]", ")", "\n", "# sentence 2, beam 1", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "1", "]", "[", "0", "]", ",", "[", "w1", ",", "w2", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "1", "]", "[", "0", "]", ",", "[", "0.7", ",", "0.4", ",", "0.9", "]", ")", "\n", "# sentence 2, beam 2", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "1", "]", "[", "1", "]", ",", "[", "w1", ",", "w2", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "1", "]", "[", "1", "]", ",", "[", "0.7", ",", "0.4", ",", "0.9", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestDiverseSiblingsSearch.assertHypoScore": [[223, 234], ["torch.FloatTensor().log", "torch.FloatTensor().log.sub_", "test_sequence_generator.TestDiverseSiblingsSearch.assertAlmostEqual", "test_sequence_generator.TestDiverseSiblingsSearch.assertEqual", "torch.FloatTensor().log.sum", "test_sequence_generator.TestDiverseSiblingsSearch.assertLess", "torch.FloatTensor().log.numel", "hypo[].numel", "abs", "torch.FloatTensor", "torch.Tensor", "torch.FloatTensor().log.numel"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertAlmostEqual"], ["    ", "def", "assertHypoScore", "(", "\n", "self", ",", "hypo", ",", "pos_probs", ",", "sibling_rank", ",", "diversity_rate", ",", "normalized", "=", "True", ",", "lenpen", "=", "1.0", "\n", ")", ":", "\n", "        ", "pos_scores", "=", "torch", ".", "FloatTensor", "(", "pos_probs", ")", ".", "log", "(", ")", "\n", "pos_scores", ".", "sub_", "(", "torch", ".", "Tensor", "(", "sibling_rank", ")", "*", "diversity_rate", ")", "\n", "self", ".", "assertAlmostEqual", "(", "hypo", "[", "\"positional_scores\"", "]", ",", "pos_scores", ")", "\n", "self", ".", "assertEqual", "(", "pos_scores", ".", "numel", "(", ")", ",", "hypo", "[", "\"tokens\"", "]", ".", "numel", "(", ")", ")", "\n", "score", "=", "pos_scores", ".", "sum", "(", ")", "\n", "if", "normalized", ":", "\n", "            ", "score", "/=", "pos_scores", ".", "numel", "(", ")", "**", "lenpen", "\n", "", "self", ".", "assertLess", "(", "abs", "(", "score", "-", "hypo", "[", "\"score\"", "]", ")", ",", "1e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestDiverseSiblingsSearch.test_diverse_beam_search": [[235, 262], ["fairseq.search.DiverseSiblingsSearch", "fairseq.sequence_generator.SequenceGenerator", "fairseq.sequence_generator.SequenceGenerator.generate", "test_sequence_generator.TestDiverseSiblingsSearch.assertHypoTokens", "test_sequence_generator.TestDiverseSiblingsSearch.assertHypoScore", "test_sequence_generator.TestDiverseSiblingsSearch.assertHypoTokens", "test_sequence_generator.TestDiverseSiblingsSearch.assertHypoScore", "test_sequence_generator.TestDiverseSiblingsSearch.assertHypoTokens", "test_sequence_generator.TestDiverseSiblingsSearch.assertHypoScore", "test_sequence_generator.TestDiverseSiblingsSearch.assertHypoTokens", "test_sequence_generator.TestDiverseSiblingsSearch.assertHypoScore"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.hub_interface.BARTHubInterface.generate", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertHypoTokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestDiverseSiblingsSearch.assertHypoScore", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertHypoTokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestDiverseSiblingsSearch.assertHypoScore", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertHypoTokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestDiverseSiblingsSearch.assertHypoScore", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertHypoTokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestDiverseSiblingsSearch.assertHypoScore"], ["", "def", "test_diverse_beam_search", "(", "self", ")", ":", "\n", "        ", "search_strategy", "=", "search", ".", "DiverseSiblingsSearch", "(", "\n", "self", ".", "tgt_dict", ",", "diversity_rate", "=", "0.5", "\n", ")", "\n", "generator", "=", "SequenceGenerator", "(", "\n", "self", ".", "tgt_dict", ",", "beam_size", "=", "2", ",", "search_strategy", "=", "search_strategy", "\n", ")", "\n", "sample", "=", "{", "\n", "\"net_input\"", ":", "{", "\n", "\"src_tokens\"", ":", "self", ".", "src_tokens", ",", "\n", "\"src_lengths\"", ":", "self", ".", "src_lengths", ",", "\n", "}", "\n", "}", "\n", "hypos", "=", "generator", ".", "generate", "(", "[", "self", ".", "model", "]", ",", "sample", ")", "\n", "eos", ",", "w1", ",", "w2", "=", "self", ".", "eos", ",", "self", ".", "w1", ",", "self", ".", "w2", "\n", "# sentence 1, beam 1", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "0", "]", "[", "0", "]", ",", "[", "w1", ",", "w1", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "0", "]", "[", "0", "]", ",", "[", "0.9", ",", "0.6", ",", "1.0", "]", ",", "[", "0", ",", "1", ",", "1", "]", ",", "0.5", ")", "\n", "# sentence 1, beam 2", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "0", "]", "[", "1", "]", ",", "[", "w1", ",", "w2", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "0", "]", "[", "1", "]", ",", "[", "0.9", ",", "0.4", ",", "1.0", "]", ",", "[", "0", ",", "2", ",", "1", "]", ",", "0.5", ")", "\n", "# sentence 2, beam 1", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "1", "]", "[", "0", "]", ",", "[", "w1", ",", "w2", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "1", "]", "[", "0", "]", ",", "[", "0.7", ",", "0.4", ",", "0.9", "]", ",", "[", "0", ",", "1", ",", "1", "]", ",", "0.5", ")", "\n", "# sentence 2, beam 2", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "1", "]", "[", "1", "]", ",", "[", "w1", ",", "w1", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "1", "]", "[", "1", "]", ",", "[", "0.7", ",", "0.35", ",", "0.9", "]", ",", "[", "0", ",", "2", ",", "1", "]", ",", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestTopPSamplingSearch.setUp": [[266, 324], ["tests.dummy_dictionary", "test_sequence_generator.TestTopPSamplingSearch.assertEqual", "test_sequence_generator.TestTopPSamplingSearch.assertEqual", "test_sequence_generator.TestTopPSamplingSearch.assertEqual", "tests.dummy_dictionary.eos", "torch.LongTensor", "torch.LongTensor", "argparse.Namespace", "tests.TestTranslationTask.setup_task", "tests.TestTranslationTask.setup_task.build_model", "tests.dummy_dictionary.pad", "tests.dummy_dictionary.eos", "tests.dummy_dictionary.unk", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.utils.dummy_dictionary", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyLMTask.setup_task", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.build_model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.unk"], ["    ", "def", "setUp", "(", "self", ")", ":", "\n", "# construct dummy dictionary", "\n", "        ", "d", "=", "test_utils", ".", "dummy_dictionary", "(", "vocab_size", "=", "2", ")", "\n", "self", ".", "assertEqual", "(", "d", ".", "pad", "(", ")", ",", "1", ")", "\n", "self", ".", "assertEqual", "(", "d", ".", "eos", "(", ")", ",", "2", ")", "\n", "self", ".", "assertEqual", "(", "d", ".", "unk", "(", ")", ",", "3", ")", "\n", "self", ".", "eos", "=", "d", ".", "eos", "(", ")", "\n", "self", ".", "w1", "=", "4", "\n", "self", ".", "w2", "=", "5", "\n", "\n", "# construct source data", "\n", "self", ".", "src_tokens", "=", "torch", ".", "LongTensor", "(", "[", "\n", "[", "self", ".", "w1", ",", "self", ".", "w2", ",", "self", ".", "eos", "]", ",", "\n", "[", "self", ".", "w1", ",", "self", ".", "w2", ",", "self", ".", "eos", "]", ",", "\n", "]", ")", "\n", "self", ".", "src_lengths", "=", "torch", ".", "LongTensor", "(", "[", "2", ",", "2", "]", ")", "\n", "\n", "args", "=", "argparse", ".", "Namespace", "(", ")", "\n", "unk", "=", "0.", "\n", "# The minimal probability of top 2 tokens.", "\n", "self", ".", "min_top2_prob", "=", "0.75", "\n", "# The minimal probability of the top 1 token.", "\n", "self", ".", "min_top1_prob", "=", "0.4", "\n", "\n", "w1_prob", "=", "self", ".", "min_top1_prob", "\n", "w2_prob", "=", "self", ".", "min_top2_prob", "-", "self", ".", "min_top1_prob", "\n", "eos_prob", "=", "1", "-", "self", ".", "min_top2_prob", "\n", "\n", "args", ".", "beam_probs", "=", "[", "\n", "# step 0:", "\n", "torch", ".", "FloatTensor", "(", "[", "\n", "# eos      w1   w2", "\n", "[", "0.0", ",", "unk", ",", "1.0", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "unk", ",", "1.0", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "unk", ",", "1.0", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "unk", ",", "1.0", ",", "0.0", "]", ",", "\n", "]", ")", ",", "\n", "# step 1:", "\n", "torch", ".", "FloatTensor", "(", "[", "\n", "# eos           w1       w2", "\n", "[", "eos_prob", ",", "unk", ",", "w1_prob", ",", "w2_prob", "]", ",", "\n", "[", "eos_prob", ",", "unk", ",", "w1_prob", ",", "w2_prob", "]", ",", "\n", "[", "eos_prob", ",", "unk", ",", "w1_prob", ",", "w2_prob", "]", ",", "\n", "[", "eos_prob", ",", "unk", ",", "w1_prob", ",", "w2_prob", "]", ",", "\n", "]", ")", ",", "\n", "# step 2:", "\n", "torch", ".", "FloatTensor", "(", "[", "\n", "# eos      w1   w2", "\n", "[", "1.0", ",", "unk", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "1.0", ",", "unk", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "1.0", ",", "unk", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "1.0", ",", "unk", ",", "0.0", ",", "0.0", "]", ",", "\n", "]", ")", ",", "\n", "]", "\n", "\n", "task", "=", "test_utils", ".", "TestTranslationTask", ".", "setup_task", "(", "args", ",", "d", ",", "d", ")", "\n", "self", ".", "model", "=", "task", ".", "build_model", "(", "args", ")", "\n", "self", ".", "tgt_dict", "=", "task", ".", "target_dictionary", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestTopPSamplingSearch.test_topp_sampling_search_low_prob": [[325, 352], ["fairseq.search.Sampling", "fairseq.sequence_generator.SequenceGenerator", "fairseq.sequence_generator.SequenceGenerator.generate", "test_sequence_generator.TestTopPSamplingSearch.assertHypoTokens", "test_sequence_generator.TestTopPSamplingSearch.assertHypoScore", "test_sequence_generator.TestTopPSamplingSearch.assertHypoTokens", "test_sequence_generator.TestTopPSamplingSearch.assertHypoScore", "test_sequence_generator.TestTopPSamplingSearch.assertHypoTokens", "test_sequence_generator.TestTopPSamplingSearch.assertHypoScore", "test_sequence_generator.TestTopPSamplingSearch.assertHypoTokens", "test_sequence_generator.TestTopPSamplingSearch.assertHypoScore"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.hub_interface.BARTHubInterface.generate", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertHypoTokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestDiverseSiblingsSearch.assertHypoScore", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertHypoTokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestDiverseSiblingsSearch.assertHypoScore", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertHypoTokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestDiverseSiblingsSearch.assertHypoScore", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestSequenceGeneratorBase.assertHypoTokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestDiverseSiblingsSearch.assertHypoScore"], ["", "def", "test_topp_sampling_search_low_prob", "(", "self", ")", ":", "\n", "# Given a prob low enough to top-P sampling, we expect only the top", "\n", "# 1 token to be sampled, which always results in the same output.", "\n", "        ", "low_sampling_topp", "=", "self", ".", "min_top1_prob", "/", "2.0", "\n", "search_strategy", "=", "search", ".", "Sampling", "(", "self", ".", "tgt_dict", ",", "sampling_topp", "=", "low_sampling_topp", ")", "\n", "generator", "=", "SequenceGenerator", "(", "\n", "self", ".", "tgt_dict", ",", "beam_size", "=", "2", ",", "search_strategy", "=", "search_strategy", ")", "\n", "sample", "=", "{", "\n", "'net_input'", ":", "{", "\n", "'src_tokens'", ":", "self", ".", "src_tokens", ",", "\n", "'src_lengths'", ":", "self", ".", "src_lengths", "\n", "}", "\n", "}", "\n", "hypos", "=", "generator", ".", "generate", "(", "[", "self", ".", "model", "]", ",", "sample", ")", "\n", "eos", ",", "w1", "=", "self", ".", "eos", ",", "self", ".", "w1", "\n", "# sentence 1, beam 1", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "0", "]", "[", "0", "]", ",", "[", "w1", ",", "w1", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "0", "]", "[", "0", "]", ",", "[", "1.0", ",", "0.4", ",", "1.0", "]", ")", "\n", "# sentence 1, beam 2", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "0", "]", "[", "1", "]", ",", "[", "w1", ",", "w1", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "0", "]", "[", "1", "]", ",", "[", "1.0", ",", "0.4", ",", "1.0", "]", ")", "\n", "# sentence 2, beam 1", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "1", "]", "[", "0", "]", ",", "[", "w1", ",", "w1", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "1", "]", "[", "0", "]", ",", "[", "1.0", ",", "0.4", ",", "1.0", "]", ")", "\n", "# sentence 2, beam 2", "\n", "self", ".", "assertHypoTokens", "(", "hypos", "[", "1", "]", "[", "1", "]", ",", "[", "w1", ",", "w1", ",", "eos", "]", ")", "\n", "self", ".", "assertHypoScore", "(", "hypos", "[", "1", "]", "[", "1", "]", ",", "[", "1.0", ",", "0.4", ",", "1.0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestTopPSamplingSearch.test_topp_sampling_search_high_prob": [[353, 391], ["fairseq.search.Sampling", "fairseq.sequence_generator.SequenceGenerator", "fairseq.sequence_generator.SequenceGenerator.generate", "test_sequence_generator.TestTopPSamplingSearch.assertTrue", "test_sequence_generator.TestTopPSamplingSearch.assertTrue", "test_sequence_generator.TestTopPSamplingSearch.assertTrue", "test_sequence_generator.TestTopPSamplingSearch.assertTrue", "test_sequence_generator.TestTopPSamplingSearch.assertTrue", "test_sequence_generator.TestTopPSamplingSearch.assertTrue", "test_sequence_generator.TestTopPSamplingSearch.assertTrue", "test_sequence_generator.TestTopPSamplingSearch.assertTrue", "test_sequence_generator.TestTopPSamplingSearch.hypoTokens", "test_sequence_generator.TestTopPSamplingSearch.hypoTokens", "test_sequence_generator.TestTopPSamplingSearch.hypoScore", "test_sequence_generator.TestTopPSamplingSearch.hypoScore", "test_sequence_generator.TestTopPSamplingSearch.hypoTokens", "test_sequence_generator.TestTopPSamplingSearch.hypoTokens", "test_sequence_generator.TestTopPSamplingSearch.hypoScore", "test_sequence_generator.TestTopPSamplingSearch.hypoScore", "test_sequence_generator.TestTopPSamplingSearch.hypoTokens", "test_sequence_generator.TestTopPSamplingSearch.hypoTokens", "test_sequence_generator.TestTopPSamplingSearch.hypoScore", "test_sequence_generator.TestTopPSamplingSearch.hypoScore", "test_sequence_generator.TestTopPSamplingSearch.hypoTokens", "test_sequence_generator.TestTopPSamplingSearch.hypoTokens", "test_sequence_generator.TestTopPSamplingSearch.hypoScore", "test_sequence_generator.TestTopPSamplingSearch.hypoScore"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.hub_interface.BARTHubInterface.generate", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestTopPSamplingSearch.hypoTokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestTopPSamplingSearch.hypoTokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestTopPSamplingSearch.hypoScore", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestTopPSamplingSearch.hypoScore", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestTopPSamplingSearch.hypoTokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestTopPSamplingSearch.hypoTokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestTopPSamplingSearch.hypoScore", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestTopPSamplingSearch.hypoScore", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestTopPSamplingSearch.hypoTokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestTopPSamplingSearch.hypoTokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestTopPSamplingSearch.hypoScore", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestTopPSamplingSearch.hypoScore", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestTopPSamplingSearch.hypoTokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestTopPSamplingSearch.hypoTokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestTopPSamplingSearch.hypoScore", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestTopPSamplingSearch.hypoScore"], ["", "def", "test_topp_sampling_search_high_prob", "(", "self", ")", ":", "\n", "# Given a prob high enough to top-P sampling, any of the top 2", "\n", "# tokens could be sampled. This can cause different outputs.", "\n", "        ", "high_sampling_topp", "=", "(", "self", ".", "min_top1_prob", "+", "self", ".", "min_top2_prob", ")", "/", "2.0", "\n", "search_strategy", "=", "search", ".", "Sampling", "(", "self", ".", "tgt_dict", ",", "sampling_topp", "=", "high_sampling_topp", ")", "\n", "generator", "=", "SequenceGenerator", "(", "\n", "self", ".", "tgt_dict", ",", "beam_size", "=", "2", ",", "search_strategy", "=", "search_strategy", ")", "\n", "sample", "=", "{", "\n", "'net_input'", ":", "{", "\n", "'src_tokens'", ":", "self", ".", "src_tokens", ",", "\n", "'src_lengths'", ":", "self", ".", "src_lengths", "\n", "}", "\n", "}", "\n", "hypos", "=", "generator", ".", "generate", "(", "[", "self", ".", "model", "]", ",", "sample", ")", "\n", "eos", ",", "w1", ",", "w2", "=", "self", ".", "eos", ",", "self", ".", "w1", ",", "self", ".", "w2", "\n", "# sentence 1, beam 1", "\n", "self", ".", "assertTrue", "(", "self", ".", "hypoTokens", "(", "hypos", "[", "0", "]", "[", "0", "]", ",", "[", "w1", ",", "w1", ",", "eos", "]", ")", "or", "\n", "self", ".", "hypoTokens", "(", "hypos", "[", "0", "]", "[", "0", "]", ",", "[", "w1", ",", "w2", ",", "eos", "]", ")", ")", "\n", "self", ".", "assertTrue", "(", "self", ".", "hypoScore", "(", "hypos", "[", "0", "]", "[", "0", "]", ",", "[", "1.0", ",", "0.4", ",", "1.0", "]", ")", "or", "\n", "self", ".", "hypoScore", "(", "hypos", "[", "0", "]", "[", "0", "]", ",", "[", "1.0", ",", "0.35", ",", "1.0", "]", ")", ")", "\n", "\n", "# sentence 1, beam 2", "\n", "self", ".", "assertTrue", "(", "self", ".", "hypoTokens", "(", "hypos", "[", "0", "]", "[", "1", "]", ",", "[", "w1", ",", "w1", ",", "eos", "]", ")", "or", "\n", "self", ".", "hypoTokens", "(", "hypos", "[", "0", "]", "[", "1", "]", ",", "[", "w1", ",", "w2", ",", "eos", "]", ")", ")", "\n", "self", ".", "assertTrue", "(", "self", ".", "hypoScore", "(", "hypos", "[", "0", "]", "[", "1", "]", ",", "[", "1.0", ",", "0.4", ",", "1.0", "]", ")", "or", "\n", "self", ".", "hypoScore", "(", "hypos", "[", "0", "]", "[", "1", "]", ",", "[", "1.0", ",", "0.35", ",", "1.0", "]", ")", ")", "\n", "\n", "# sentence 2, beam 1", "\n", "self", ".", "assertTrue", "(", "self", ".", "hypoTokens", "(", "hypos", "[", "1", "]", "[", "0", "]", ",", "[", "w1", ",", "w1", ",", "eos", "]", ")", "or", "\n", "self", ".", "hypoTokens", "(", "hypos", "[", "1", "]", "[", "0", "]", ",", "[", "w1", ",", "w2", ",", "eos", "]", ")", ")", "\n", "self", ".", "assertTrue", "(", "self", ".", "hypoScore", "(", "hypos", "[", "1", "]", "[", "0", "]", ",", "[", "1.0", ",", "0.4", ",", "1.0", "]", ")", "or", "\n", "self", ".", "hypoScore", "(", "hypos", "[", "1", "]", "[", "0", "]", ",", "[", "1.0", ",", "0.35", ",", "1.0", "]", ")", ")", "\n", "\n", "# sentence 2, beam 2", "\n", "self", ".", "assertTrue", "(", "self", ".", "hypoTokens", "(", "hypos", "[", "1", "]", "[", "1", "]", ",", "[", "w1", ",", "w1", ",", "eos", "]", ")", "or", "\n", "self", ".", "hypoTokens", "(", "hypos", "[", "1", "]", "[", "1", "]", ",", "[", "w1", ",", "w2", ",", "eos", "]", ")", ")", "\n", "self", ".", "assertTrue", "(", "self", ".", "hypoScore", "(", "hypos", "[", "1", "]", "[", "1", "]", ",", "[", "1.0", ",", "0.4", ",", "1.0", "]", ")", "or", "\n", "self", ".", "hypoScore", "(", "hypos", "[", "1", "]", "[", "1", "]", ",", "[", "1.0", ",", "0.35", ",", "1.0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestTopPSamplingSearch.hypoTokens": [[392, 394], ["test_sequence_generator.TestTopPSamplingSearch.tensorEqual", "torch.LongTensor"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestTopPSamplingSearch.tensorEqual"], ["", "def", "hypoTokens", "(", "self", ",", "hypo", ",", "tokens", ")", ":", "\n", "        ", "return", "self", ".", "tensorEqual", "(", "hypo", "[", "'tokens'", "]", ",", "torch", ".", "LongTensor", "(", "tokens", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestTopPSamplingSearch.hypoScore": [[395, 405], ["torch.FloatTensor().log", "torch.FloatTensor().log.sum", "test_sequence_generator.TestTopPSamplingSearch.almostEqual", "torch.FloatTensor().log.numel", "hypo[].numel", "abs", "torch.FloatTensor", "torch.FloatTensor().log.numel"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestTopPSamplingSearch.almostEqual"], ["", "def", "hypoScore", "(", "self", ",", "hypo", ",", "pos_probs", ",", "normalized", "=", "True", ",", "lenpen", "=", "1.", ")", ":", "\n", "        ", "pos_scores", "=", "torch", ".", "FloatTensor", "(", "pos_probs", ")", ".", "log", "(", ")", "\n", "if", "not", "self", ".", "almostEqual", "(", "hypo", "[", "'positional_scores'", "]", ",", "pos_scores", ")", ":", "\n", "            ", "return", "False", "\n", "", "if", "pos_scores", ".", "numel", "(", ")", "!=", "hypo", "[", "'tokens'", "]", ".", "numel", "(", ")", ":", "\n", "            ", "return", "False", "\n", "", "score", "=", "pos_scores", ".", "sum", "(", ")", "\n", "if", "normalized", ":", "\n", "            ", "score", "/=", "pos_scores", ".", "numel", "(", ")", "**", "lenpen", "\n", "", "return", "abs", "(", "score", "-", "hypo", "[", "'score'", "]", ")", "<", "1e-6", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestTopPSamplingSearch.almostEqual": [[406, 408], ["t1.size", "t2.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "almostEqual", "(", "self", ",", "t1", ",", "t2", ")", ":", "\n", "        ", "return", "t1", ".", "size", "(", ")", "==", "t2", ".", "size", "(", ")", "and", "(", "t1", "-", "t2", ")", ".", "abs", "(", ")", ".", "max", "(", ")", "<", "1e-4", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_sequence_generator.TestTopPSamplingSearch.tensorEqual": [[409, 411], ["t1.size", "t2.size", "t1.ne().long().sum", "t1.ne().long", "t1.ne"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "tensorEqual", "(", "self", ",", "t1", ",", "t2", ")", ":", "\n", "        ", "return", "t1", ".", "size", "(", ")", "==", "t2", ".", "size", "(", ")", "and", "t1", ".", "ne", "(", "t2", ")", ".", "long", "(", ")", ".", "sum", "(", ")", "==", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_average_checkpoints.ModelWithSharedParameter.__init__": [[21, 31], ["torch.nn.Module.__init__", "torch.nn.Embedding", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.Embedding", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ModelWithSharedParameter", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "1000", ",", "200", ")", "\n", "self", ".", "FC1", "=", "nn", ".", "Linear", "(", "200", ",", "200", ")", "\n", "self", ".", "FC2", "=", "nn", ".", "Linear", "(", "200", ",", "200", ")", "\n", "# tie weight in FC2 to FC1", "\n", "self", ".", "FC2", ".", "weight", "=", "nn", ".", "Parameter", "(", "self", ".", "FC1", ".", "weight", ")", "\n", "self", ".", "FC2", ".", "bias", "=", "nn", ".", "Parameter", "(", "self", ".", "FC1", ".", "bias", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_average_checkpoints.ModelWithSharedParameter.forward": [[32, 34], ["test_average_checkpoints.ModelWithSharedParameter.FC2", "test_average_checkpoints.ModelWithSharedParameter.FC1", "test_average_checkpoints.ModelWithSharedParameter.ReLU", "test_average_checkpoints.ModelWithSharedParameter.FC1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "FC2", "(", "self", ".", "ReLU", "(", "self", ".", "FC1", "(", "input", ")", ")", ")", "+", "self", ".", "FC1", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_average_checkpoints.TestAverageCheckpoints.test_average_checkpoints": [[37, 85], ["collections.OrderedDict", "collections.OrderedDict", "collections.OrderedDict", "tempfile.mkstemp", "tempfile.mkstemp", "torch.save", "torch.save", "os.close", "os.remove", "os.close", "os.remove", "zip", "collections.OrderedDict", "collections.OrderedDict", "scripts.average_checkpoints.average_checkpoints", "collections.OrderedDict.items", "output.items", "test_average_checkpoints.TestAverageCheckpoints.assertEqual", "numpy.testing.assert_allclose", "v_expected.numpy", "v_out.numpy", "torch.DoubleTensor", "torch.FloatTensor", "torch.IntTensor", "torch.DoubleTensor", "torch.FloatTensor", "torch.IntTensor", "torch.DoubleTensor", "torch.FloatTensor", "torch.IntTensor", "collections.OrderedDict.keys", "output.keys"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.save", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.save", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.average_checkpoints.average_checkpoints"], ["    ", "def", "test_average_checkpoints", "(", "self", ")", ":", "\n", "        ", "params_0", "=", "collections", ".", "OrderedDict", "(", "\n", "[", "\n", "(", "'a'", ",", "torch", ".", "DoubleTensor", "(", "[", "100.0", "]", ")", ")", ",", "\n", "(", "'b'", ",", "torch", ".", "FloatTensor", "(", "[", "[", "1.0", ",", "2.0", ",", "3.0", "]", ",", "[", "4.0", ",", "5.0", ",", "6.0", "]", "]", ")", ")", ",", "\n", "(", "'c'", ",", "torch", ".", "IntTensor", "(", "[", "7", ",", "8", ",", "9", "]", ")", ")", ",", "\n", "]", "\n", ")", "\n", "params_1", "=", "collections", ".", "OrderedDict", "(", "\n", "[", "\n", "(", "'a'", ",", "torch", ".", "DoubleTensor", "(", "[", "1.0", "]", ")", ")", ",", "\n", "(", "'b'", ",", "torch", ".", "FloatTensor", "(", "[", "[", "1.0", ",", "1.0", ",", "1.0", "]", ",", "[", "1.0", ",", "1.0", ",", "1.0", "]", "]", ")", ")", ",", "\n", "(", "'c'", ",", "torch", ".", "IntTensor", "(", "[", "2", ",", "2", ",", "2", "]", ")", ")", ",", "\n", "]", "\n", ")", "\n", "params_avg", "=", "collections", ".", "OrderedDict", "(", "\n", "[", "\n", "(", "'a'", ",", "torch", ".", "DoubleTensor", "(", "[", "50.5", "]", ")", ")", ",", "\n", "(", "'b'", ",", "torch", ".", "FloatTensor", "(", "[", "[", "1.0", ",", "1.5", ",", "2.0", "]", ",", "[", "2.5", ",", "3.0", ",", "3.5", "]", "]", ")", ")", ",", "\n", "# We expect truncation for integer division", "\n", "(", "'c'", ",", "torch", ".", "IntTensor", "(", "[", "4", ",", "5", ",", "5", "]", ")", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "fd_0", ",", "path_0", "=", "tempfile", ".", "mkstemp", "(", ")", "\n", "fd_1", ",", "path_1", "=", "tempfile", ".", "mkstemp", "(", ")", "\n", "torch", ".", "save", "(", "collections", ".", "OrderedDict", "(", "[", "(", "'model'", ",", "params_0", ")", "]", ")", ",", "path_0", ")", "\n", "torch", ".", "save", "(", "collections", ".", "OrderedDict", "(", "[", "(", "'model'", ",", "params_1", ")", "]", ")", ",", "path_1", ")", "\n", "\n", "output", "=", "average_checkpoints", "(", "[", "path_0", ",", "path_1", "]", ")", "[", "'model'", "]", "\n", "\n", "os", ".", "close", "(", "fd_0", ")", "\n", "os", ".", "remove", "(", "path_0", ")", "\n", "os", ".", "close", "(", "fd_1", ")", "\n", "os", ".", "remove", "(", "path_1", ")", "\n", "\n", "for", "(", "k_expected", ",", "v_expected", ")", ",", "(", "k_out", ",", "v_out", ")", "in", "zip", "(", "\n", "params_avg", ".", "items", "(", ")", ",", "output", ".", "items", "(", ")", ")", ":", "\n", "            ", "self", ".", "assertEqual", "(", "\n", "k_expected", ",", "k_out", ",", "'Key mismatch - expected {} but found {}. '", "\n", "'(Expected list of keys: {} vs actual list of keys: {})'", ".", "format", "(", "\n", "k_expected", ",", "k_out", ",", "params_avg", ".", "keys", "(", ")", ",", "output", ".", "keys", "(", ")", "\n", ")", "\n", ")", "\n", "np", ".", "testing", ".", "assert_allclose", "(", "\n", "v_expected", ".", "numpy", "(", ")", ",", "\n", "v_out", ".", "numpy", "(", ")", ",", "\n", "err_msg", "=", "'Tensor value mismatch for key {}'", ".", "format", "(", "k_expected", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_average_checkpoints.TestAverageCheckpoints.test_average_checkpoints_with_shared_parameters": [[87, 140], ["tempfile.mkdtemp", "os.path.join", "test_average_checkpoints.TestAverageCheckpoints.test_average_checkpoints_with_shared_parameters._construct_model_with_shared_parameters"], "methods", ["None"], ["", "", "def", "test_average_checkpoints_with_shared_parameters", "(", "self", ")", ":", "\n", "\n", "        ", "def", "_construct_model_with_shared_parameters", "(", "path", ",", "value", ")", ":", "\n", "            ", "m", "=", "ModelWithSharedParameter", "(", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "FC1", ".", "weight", ",", "value", ")", "\n", "torch", ".", "save", "(", "\n", "{", "'model'", ":", "m", ".", "state_dict", "(", ")", "}", ",", "\n", "path", "\n", ")", "\n", "return", "m", "\n", "\n", "", "tmpdir", "=", "tempfile", ".", "mkdtemp", "(", ")", "\n", "paths", "=", "[", "]", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "tmpdir", ",", "\"m1.pt\"", ")", "\n", "m1", "=", "_construct_model_with_shared_parameters", "(", "path", ",", "1.0", ")", "\n", "paths", ".", "append", "(", "path", ")", "\n", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "tmpdir", ",", "\"m2.pt\"", ")", "\n", "m2", "=", "_construct_model_with_shared_parameters", "(", "path", ",", "2.0", ")", "\n", "paths", ".", "append", "(", "path", ")", "\n", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "tmpdir", ",", "\"m3.pt\"", ")", "\n", "m3", "=", "_construct_model_with_shared_parameters", "(", "path", ",", "3.0", ")", "\n", "paths", ".", "append", "(", "path", ")", "\n", "\n", "new_model", "=", "average_checkpoints", "(", "paths", ")", "\n", "self", ".", "assertTrue", "(", "\n", "torch", ".", "equal", "(", "\n", "new_model", "[", "'model'", "]", "[", "'embedding.weight'", "]", ",", "\n", "(", "m1", ".", "embedding", ".", "weight", "+", "\n", "m2", ".", "embedding", ".", "weight", "+", "\n", "m3", ".", "embedding", ".", "weight", ")", "/", "3.0", "\n", ")", "\n", ")", "\n", "\n", "self", ".", "assertTrue", "(", "\n", "torch", ".", "equal", "(", "\n", "new_model", "[", "'model'", "]", "[", "'FC1.weight'", "]", ",", "\n", "(", "m1", ".", "FC1", ".", "weight", "+", "\n", "m2", ".", "FC1", ".", "weight", "+", "\n", "m3", ".", "FC1", ".", "weight", ")", "/", "3.0", "\n", ")", "\n", ")", "\n", "\n", "self", ".", "assertTrue", "(", "\n", "torch", ".", "equal", "(", "\n", "new_model", "[", "'model'", "]", "[", "'FC2.weight'", "]", ",", "\n", "(", "m1", ".", "FC2", ".", "weight", "+", "\n", "m2", ".", "FC2", ".", "weight", "+", "\n", "m3", ".", "FC2", ".", "weight", ")", "/", "3.0", "\n", ")", "\n", ")", "\n", "shutil", ".", "rmtree", "(", "tmpdir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_token_block_dataset.TestTokenBlockDataset._build_dataset": [[17, 21], ["tests.TestDataset", "fairseq.data.TokenBlockDataset", "len"], "methods", ["None"], ["    ", "def", "_build_dataset", "(", "self", ",", "data", ",", "**", "kwargs", ")", ":", "\n", "        ", "sizes", "=", "[", "len", "(", "x", ")", "for", "x", "in", "data", "]", "\n", "underlying_ds", "=", "test_utils", ".", "TestDataset", "(", "data", ")", "\n", "return", "TokenBlockDataset", "(", "underlying_ds", ",", "sizes", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_token_block_dataset.TestTokenBlockDataset.test_eos_break_mode": [[22, 42], ["test_token_block_dataset.TestTokenBlockDataset._build_dataset", "test_token_block_dataset.TestTokenBlockDataset.assertEqual", "test_token_block_dataset.TestTokenBlockDataset.assertEqual", "test_token_block_dataset.TestTokenBlockDataset.assertEqual", "test_token_block_dataset.TestTokenBlockDataset._build_dataset", "test_token_block_dataset.TestTokenBlockDataset.assertEqual", "test_token_block_dataset.TestTokenBlockDataset.assertEqual", "test_token_block_dataset.TestTokenBlockDataset.assertEqual", "torch.tensor", "torch.tensor", "torch.tensor", "ds[].tolist", "ds[].tolist", "ds[].tolist", "torch.tensor", "torch.tensor", "torch.tensor", "ds[].tolist", "ds[].tolist", "ds[].tolist"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_token_block_dataset.TestTokenBlockDataset._build_dataset", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_token_block_dataset.TestTokenBlockDataset._build_dataset"], ["", "def", "test_eos_break_mode", "(", "self", ")", ":", "\n", "        ", "data", "=", "[", "\n", "torch", ".", "tensor", "(", "[", "5", ",", "4", ",", "3", ",", "2", ",", "1", "]", ",", "dtype", "=", "torch", ".", "long", ")", ",", "\n", "torch", ".", "tensor", "(", "[", "1", "]", ",", "dtype", "=", "torch", ".", "long", ")", ",", "\n", "torch", ".", "tensor", "(", "[", "8", ",", "7", ",", "6", ",", "1", "]", ",", "dtype", "=", "torch", ".", "long", ")", ",", "\n", "]", "\n", "ds", "=", "self", ".", "_build_dataset", "(", "data", ",", "block_size", "=", "None", ",", "pad", "=", "0", ",", "eos", "=", "1", ",", "break_mode", "=", "'eos'", ")", "\n", "self", ".", "assertEqual", "(", "ds", "[", "0", "]", ".", "tolist", "(", ")", ",", "[", "5", ",", "4", ",", "3", ",", "2", ",", "1", "]", ")", "\n", "self", ".", "assertEqual", "(", "ds", "[", "1", "]", ".", "tolist", "(", ")", ",", "[", "1", "]", ")", "\n", "self", ".", "assertEqual", "(", "ds", "[", "2", "]", ".", "tolist", "(", ")", ",", "[", "8", ",", "7", ",", "6", ",", "1", "]", ")", "\n", "\n", "data", "=", "[", "\n", "torch", ".", "tensor", "(", "[", "5", ",", "4", ",", "3", ",", "2", ",", "1", "]", ",", "dtype", "=", "torch", ".", "long", ")", ",", "\n", "torch", ".", "tensor", "(", "[", "8", ",", "7", ",", "6", ",", "1", "]", ",", "dtype", "=", "torch", ".", "long", ")", ",", "\n", "torch", ".", "tensor", "(", "[", "1", "]", ",", "dtype", "=", "torch", ".", "long", ")", ",", "\n", "]", "\n", "ds", "=", "self", ".", "_build_dataset", "(", "data", ",", "block_size", "=", "None", ",", "pad", "=", "0", ",", "eos", "=", "1", ",", "break_mode", "=", "'eos'", ")", "\n", "self", ".", "assertEqual", "(", "ds", "[", "0", "]", ".", "tolist", "(", ")", ",", "[", "5", ",", "4", ",", "3", ",", "2", ",", "1", "]", ")", "\n", "self", ".", "assertEqual", "(", "ds", "[", "1", "]", ".", "tolist", "(", ")", ",", "[", "8", ",", "7", ",", "6", ",", "1", "]", ")", "\n", "self", ".", "assertEqual", "(", "ds", "[", "2", "]", ".", "tolist", "(", ")", ",", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_token_block_dataset.TestTokenBlockDataset.test_block_break_mode": [[43, 54], ["test_token_block_dataset.TestTokenBlockDataset._build_dataset", "test_token_block_dataset.TestTokenBlockDataset.assertEqual", "test_token_block_dataset.TestTokenBlockDataset.assertEqual", "test_token_block_dataset.TestTokenBlockDataset.assertEqual", "test_token_block_dataset.TestTokenBlockDataset.assertEqual", "torch.tensor", "torch.tensor", "torch.tensor", "ds[].tolist", "ds[].tolist", "ds[].tolist", "ds[].tolist"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_token_block_dataset.TestTokenBlockDataset._build_dataset"], ["", "def", "test_block_break_mode", "(", "self", ")", ":", "\n", "        ", "data", "=", "[", "\n", "torch", ".", "tensor", "(", "[", "5", ",", "4", ",", "3", ",", "2", ",", "1", "]", ",", "dtype", "=", "torch", ".", "long", ")", ",", "\n", "torch", ".", "tensor", "(", "[", "8", ",", "7", ",", "6", ",", "1", "]", ",", "dtype", "=", "torch", ".", "long", ")", ",", "\n", "torch", ".", "tensor", "(", "[", "9", ",", "1", "]", ",", "dtype", "=", "torch", ".", "long", ")", ",", "\n", "]", "\n", "ds", "=", "self", ".", "_build_dataset", "(", "data", ",", "block_size", "=", "3", ",", "pad", "=", "0", ",", "eos", "=", "1", ",", "break_mode", "=", "'none'", ")", "\n", "self", ".", "assertEqual", "(", "ds", "[", "0", "]", ".", "tolist", "(", ")", ",", "[", "5", ",", "4", ",", "3", "]", ")", "\n", "self", ".", "assertEqual", "(", "ds", "[", "1", "]", ".", "tolist", "(", ")", ",", "[", "2", ",", "1", ",", "8", "]", ")", "\n", "self", ".", "assertEqual", "(", "ds", "[", "2", "]", ".", "tolist", "(", ")", ",", "[", "7", ",", "6", ",", "1", "]", ")", "\n", "self", ".", "assertEqual", "(", "ds", "[", "3", "]", ".", "tolist", "(", ")", ",", "[", "9", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_token_block_dataset.TestTokenBlockDataset.test_complete_break_mode": [[55, 75], ["test_token_block_dataset.TestTokenBlockDataset._build_dataset", "test_token_block_dataset.TestTokenBlockDataset.assertEqual", "test_token_block_dataset.TestTokenBlockDataset.assertEqual", "test_token_block_dataset.TestTokenBlockDataset._build_dataset", "test_token_block_dataset.TestTokenBlockDataset.assertEqual", "test_token_block_dataset.TestTokenBlockDataset.assertEqual", "test_token_block_dataset.TestTokenBlockDataset.assertEqual", "torch.tensor", "torch.tensor", "torch.tensor", "ds[].tolist", "ds[].tolist", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "ds[].tolist", "ds[].tolist", "ds[].tolist"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_token_block_dataset.TestTokenBlockDataset._build_dataset", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.test_token_block_dataset.TestTokenBlockDataset._build_dataset"], ["", "def", "test_complete_break_mode", "(", "self", ")", ":", "\n", "        ", "data", "=", "[", "\n", "torch", ".", "tensor", "(", "[", "5", ",", "4", ",", "3", ",", "2", ",", "1", "]", ",", "dtype", "=", "torch", ".", "long", ")", ",", "\n", "torch", ".", "tensor", "(", "[", "8", ",", "7", ",", "6", ",", "1", "]", ",", "dtype", "=", "torch", ".", "long", ")", ",", "\n", "torch", ".", "tensor", "(", "[", "9", ",", "1", "]", ",", "dtype", "=", "torch", ".", "long", ")", ",", "\n", "]", "\n", "ds", "=", "self", ".", "_build_dataset", "(", "data", ",", "block_size", "=", "6", ",", "pad", "=", "0", ",", "eos", "=", "1", ",", "break_mode", "=", "'complete'", ")", "\n", "self", ".", "assertEqual", "(", "ds", "[", "0", "]", ".", "tolist", "(", ")", ",", "[", "5", ",", "4", ",", "3", ",", "2", ",", "1", "]", ")", "\n", "self", ".", "assertEqual", "(", "ds", "[", "1", "]", ".", "tolist", "(", ")", ",", "[", "8", ",", "7", ",", "6", ",", "1", ",", "9", ",", "1", "]", ")", "\n", "\n", "data", "=", "[", "\n", "torch", ".", "tensor", "(", "[", "4", ",", "3", ",", "2", ",", "1", "]", ",", "dtype", "=", "torch", ".", "long", ")", ",", "\n", "torch", ".", "tensor", "(", "[", "5", ",", "1", "]", ",", "dtype", "=", "torch", ".", "long", ")", ",", "\n", "torch", ".", "tensor", "(", "[", "1", "]", ",", "dtype", "=", "torch", ".", "long", ")", ",", "\n", "torch", ".", "tensor", "(", "[", "6", ",", "1", "]", ",", "dtype", "=", "torch", ".", "long", ")", ",", "\n", "]", "\n", "ds", "=", "self", ".", "_build_dataset", "(", "data", ",", "block_size", "=", "3", ",", "pad", "=", "0", ",", "eos", "=", "1", ",", "break_mode", "=", "'complete'", ")", "\n", "self", ".", "assertEqual", "(", "ds", "[", "0", "]", ".", "tolist", "(", ")", ",", "[", "4", ",", "3", ",", "2", ",", "1", "]", ")", "\n", "self", ".", "assertEqual", "(", "ds", "[", "1", "]", ".", "tolist", "(", ")", ",", "[", "5", ",", "1", ",", "1", "]", ")", "\n", "self", ".", "assertEqual", "(", "ds", "[", "2", "]", ".", "tolist", "(", ")", ",", "[", "6", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.utils.TestDataset.__init__": [[119, 123], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.utils.TestDataset.__getitem__": [[124, 126], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.utils.TestDataset.__len__": [[127, 129], ["len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.utils.TestTranslationTask.__init__": [[133, 138], ["fairseq.tasks.FairseqTask.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.utils.TestTranslationTask.setup_task": [[139, 142], ["cls"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dictionary.BertDictionary.cls"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.utils.TestTranslationTask.build_model": [[143, 145], ["fairseq.utils.TestModel.build_model"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.build_model"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.utils.TestTranslationTask.source_dictionary": [[146, 149], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.utils.TestTranslationTask.target_dictionary": [[150, 153], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.utils.TestModel.__init__": [[156, 158], ["fairseq.models.FairseqEncoderDecoderModel.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.utils.TestModel.build_model": [[159, 164], ["fairseq.utils.TestEncoder", "fairseq.utils.TestIncrementalDecoder", "cls"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dictionary.BertDictionary.cls"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.utils.TestEncoder.__init__": [[167, 170], ["fairseq.models.FairseqEncoder.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.utils.TestEncoder.forward": [[171, 173], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.utils.TestEncoder.reorder_encoder_out": [[174, 176], ["encoder_out.index_select"], "methods", ["None"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.utils.TestIncrementalDecoder.__init__": [[179, 184], ["fairseq.models.FairseqIncrementalDecoder.__init__", "getattr", "hasattr", "hasattr"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.utils.TestIncrementalDecoder.forward": [[185, 224], ["prev_output_tokens.size", "len", "encoder_out.size", "prev_output_tokens.size", "hasattr", "torch.rand", "fairseq.utils.get_incremental_state", "fairseq.utils.set_incremental_state", "list", "fairseq.utils.TestIncrementalDecoder.args.probs.index_select", "torch.FloatTensor().zero_", "enumerate", "torch.FloatTensor().zero_.to", "torch.rand.to", "range", "fairseq.utils.TestIncrementalDecoder.args.probs.dim", "torch.LongTensor", "torch.FloatTensor", "len", "len", "fairseq.utils.TestIncrementalDecoder.dictionary.eos", "fairseq.utils.TestIncrementalDecoder.dictionary.eos"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.get_incremental_state", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.set_incremental_state", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.utils.TestIncrementalDecoder.get_normalized_probs": [[225, 232], ["probs.log"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.utils.TestIncrementalDecoder.max_positions": [[233, 235], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.utils.dummy_dictionary": [[20, 27], ["fairseq.data.Dictionary", "range", "fairseq.data.Dictionary.finalize", "fairseq.data.Dictionary.add_symbol", "str"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.indexed_dataset.MMapIndexedDatasetBuilder.finalize", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol"], ["\n", "# OLD VERSION", "\n", "# def load_scorers(filepath, bart, cuda=False):", "\n", "#     scorer_config, scorers, coefs = [], [], []", "\n", "#     print(\"Creating scorers\", file=sys.stderr)", "\n", "#     with open(filepath) as scorer_file:", "\n", "#         for line in scorer_file:", "\n", "#             fields = line.strip().split('\\t')", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.utils.dummy_dataloader": [[29, 51], ["enumerate", "utils.TestDataset", "torch.utils.data.DataLoader", "iter", "len", "fairseq.data.language_pair_dataset.collate"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.denoising_dataset.collate"], ["#             weight, module_path, classname = fields[:3]", "\n", "#             weight = float(weight)", "\n", "#             model_location = fields[3]", "\n", "#             module = import_module(module_path)", "\n", "#             constructor = getattr(module, classname)", "\n", "#             model = CNNContextClassifier(300, 3, 0.5, bart)", "\n", "#             x = torch.load(model_location)", "\n", "#             model.load_state_dict(x)", "\n", "#             scorer = constructor(model, cuda)", "\n", "#             scorers.append(scorer)", "\n", "#             coefs.append(weight)", "\n", "#     print(\"Coefs:\", coefs, file=sys.stderr)", "\n", "#     return scorer_config, scorers, coefs", "\n", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.utils.sequence_generator_setup": [[53, 115], ["utils.dummy_dictionary", "dummy_dictionary.eos", "torch.LongTensor", "torch.LongTensor", "argparse.Namespace", "utils.TestTranslationTask.setup_task", "TestTranslationTask.setup_task.build_model", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tests.utils.dummy_dictionary", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyLMTask.setup_task", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.build_model"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.intra_rep.get_ngrams": [[12, 20], ["collections.Counter", "sent.split", "range", "text.strip().split", "text.strip", "len"], "function", ["None"], ["def", "get_ngrams", "(", "text", ",", "n", "=", "3", ",", "sent_delimiter", "=", "\"</s>\"", ")", ":", "\n", "    ", "\"\"\"takes file with text and an optional sentence delimiter, returns counter of ngrams\"\"\"", "\n", "ngrams", "=", "Counter", "(", ")", "\n", "sentences", "=", "[", "sent", ".", "split", "(", ")", "for", "sent", "in", "text", ".", "strip", "(", ")", ".", "split", "(", "sent_delimiter", ")", "]", "# nested list words in sents", "\n", "for", "sent", "in", "sentences", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "sent", ")", "-", "n", "+", "1", ")", ":", "\n", "            ", "ngrams", "[", "' '", ".", "join", "(", "sent", "[", "i", ":", "i", "+", "n", "]", ")", "]", "+=", "1", "\n", "", "", "return", "ngrams", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.intra_rep.main": [[21, 37], ["numpy.mean", "open", "infile.readlines", "intra_rep.get_ngrams", "len", "sum", "repetition_array.append", "get_ngrams.values"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.intra_rep.get_ngrams"], ["", "def", "main", "(", "story_file", ")", ":", "\n", "    ", "with", "open", "(", "story_file", ",", "\"r\"", ")", "as", "infile", ":", "\n", "        ", "stories", "=", "infile", ".", "readlines", "(", ")", "\n", "\n", "# for each story, get repetition metric", "\n", "", "repetition_array", "=", "[", "]", "\n", "for", "story", "in", "stories", ":", "\n", "        ", "trigrams", "=", "get_ngrams", "(", "story", ")", "\n", "unique_trigrams", "=", "len", "(", "trigrams", ")", "\n", "total_trigrams", "=", "sum", "(", "trigrams", ".", "values", "(", ")", ")", "\n", "try", ":", "\n", "            ", "trigram_repetition", "=", "(", "(", "total_trigrams", "-", "unique_trigrams", ")", "/", "total_trigrams", ")", "*", "100", "\n", "", "except", "ZeroDivisionError", ":", "\n", "            ", "trigram_repetition", "=", "0", "\n", "", "repetition_array", ".", "append", "(", "trigram_repetition", ")", "\n", "", "return", "mean", "(", "repetition_array", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.bleu.getCAndR": [[8, 24], ["list", "list", "len", "range", "len", "list", "list", "referenceCount.append", "referenceLength.append", "abs", "len", "referenceCount.index", "list", "min", "len", "len", "list"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.index"], ["def", "getCAndR", "(", "candidateSentence", ",", "referenceSentences", ")", ":", "\n", "    ", "global", "c", "\n", "global", "r", "\n", "referenceCount", "=", "[", "]", "\n", "referenceLength", "=", "[", "]", "\n", "candidateSentence", "=", "list", "(", "candidateSentence", ")", "\n", "referenceSentences", "=", "list", "(", "referenceSentences", ")", "\n", "c", "+=", "len", "(", "candidateSentence", ")", "\n", "for", "index3", "in", "range", "(", "0", ",", "len", "(", "referenceSentences", ")", ")", ":", "\n", "        ", "candidateSentence", "=", "list", "(", "candidateSentence", ")", "\n", "referenceSentences", "=", "list", "(", "referenceSentences", ")", "\n", "# print(type(referenceSentences[index3]))", "\n", "# print(type(candidateSentence))", "\n", "referenceCount", ".", "append", "(", "abs", "(", "len", "(", "list", "(", "referenceSentences", "[", "index3", "]", ")", ")", "-", "len", "(", "candidateSentence", ")", ")", ")", "\n", "referenceLength", ".", "append", "(", "len", "(", "list", "(", "referenceSentences", "[", "index3", "]", ")", ")", ")", "\n", "", "r", "+=", "referenceLength", "[", "referenceCount", ".", "index", "(", "min", "(", "referenceCount", ")", ")", "]", "\n", "#print c,r", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.bleu.getBP": [[26, 31], ["math.exp", "float"], "function", ["None"], ["", "def", "getBP", "(", ")", ":", "\n", "    ", "if", "c", ">=", "r", ":", "\n", "        ", "return", "1", "\n", "", "else", ":", "\n", "        ", "return", "math", ".", "exp", "(", "1", "-", "r", "/", "float", "(", "c", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.bleu.getFiles": [[34, 44], ["os.path.isfile", "os.listdir.append", "os.listdir", "range", "len"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.isfile"], ["", "", "def", "getFiles", "(", "candidatePath", ",", "referencePath", ")", ":", "\n", "    ", "candidatefile", "=", "candidatePath", "\n", "referencefiles", "=", "[", "]", "\n", "if", "os", ".", "path", ".", "isfile", "(", "referencePath", ")", ":", "\n", "        ", "referencefiles", ".", "append", "(", "referencePath", ")", "\n", "", "else", ":", "\n", "        ", "referencefiles", "=", "os", ".", "listdir", "(", "referencePath", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "referencefiles", ")", ")", ":", "\n", "            ", "referencefiles", "[", "i", "]", "=", "referencePath", "+", "\"/\"", "+", "referencefiles", "[", "i", "]", "\n", "", "", "return", "candidatefile", ",", "referencefiles", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.bleu.readFiles": [[45, 58], ["range", "open", "len", "referencesData.append", "candidateData.append", "open", "line.strip().split", "temp.append", "line.strip().split", "line.strip", "line.strip"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open"], ["", "def", "readFiles", "(", "candidatefile", ",", "referencefiles", ")", ":", "\n", "    ", "candidateData", "=", "[", "]", "\n", "referencesData", "=", "[", "]", "\n", "with", "open", "(", "candidatefile", ")", "as", "fp", ":", "\n", "        ", "for", "line", "in", "fp", ":", "\n", "            ", "candidateData", ".", "append", "(", "line", ".", "strip", "(", ")", ".", "split", "(", "\" \"", ")", ")", "\n", "", "", "for", "i", "in", "range", "(", "0", ",", "len", "(", "referencefiles", ")", ")", ":", "\n", "        ", "temp", "=", "[", "]", "\n", "with", "open", "(", "referencefiles", "[", "i", "]", ")", "as", "fp", ":", "\n", "            ", "for", "line", "in", "fp", ":", "\n", "                ", "temp", ".", "append", "(", "line", ".", "strip", "(", ")", ".", "split", "(", "\" \"", ")", ")", "\n", "", "", "referencesData", ".", "append", "(", "temp", ")", "\n", "", "return", "candidateData", ",", "referencesData", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.bleu.uniGramDictionary": [[59, 74], ["list", "len"], "function", ["None"], ["", "def", "uniGramDictionary", "(", "sentence", ")", ":", "\n", "    ", "dictionary", "=", "{", "}", "\n", "#sentence = sentence[0]", "\n", "i", "=", "0", "\n", "sentence", "=", "list", "(", "sentence", ")", "\n", "# print(type(sentence))", "\n", "while", "i", "<", "len", "(", "sentence", ")", ":", "\n", "        ", "unigram", "=", "sentence", "[", "i", "]", "\n", "#print \"unigram:\", unigram", "\n", "if", "unigram", "in", "dictionary", ":", "\n", "            ", "dictionary", "[", "unigram", "]", "+=", "1", "\n", "", "else", ":", "\n", "            ", "dictionary", "[", "unigram", "]", "=", "1", "\n", "", "i", "+=", "1", "\n", "", "return", "dictionary", "\n", "", "def", "biGramDictionary", "(", "sentence", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.bleu.biGramDictionary": [[74, 89], ["list", "len", "len"], "function", ["None"], ["", "def", "biGramDictionary", "(", "sentence", ")", ":", "\n", "    ", "dictionary", "=", "{", "}", "\n", "sentence", "=", "list", "(", "sentence", ")", "\n", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "sentence", ")", ":", "\n", "        ", "if", "i", "+", "1", ">=", "len", "(", "sentence", ")", ":", "\n", "            ", "break", "\n", "", "bigram", "=", "\"\"", ".", "join", "(", "sentence", "[", "i", "]", ")", "+", "\" \"", "+", "\"\"", ".", "join", "(", "sentence", "[", "i", "+", "1", "]", ")", "\n", "#print \"bigram:\", bigram", "\n", "if", "bigram", "in", "dictionary", ":", "\n", "            ", "dictionary", "[", "bigram", "]", "+=", "1", "\n", "", "else", ":", "\n", "            ", "dictionary", "[", "bigram", "]", "=", "1", "\n", "", "i", "+=", "1", "\n", "", "return", "dictionary", "\n", "", "def", "triGramDictionary", "(", "sentence", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.bleu.triGramDictionary": [[89, 105], ["list", "len", "len"], "function", ["None"], ["", "def", "triGramDictionary", "(", "sentence", ")", ":", "\n", "    ", "sentence", "=", "list", "(", "sentence", ")", "\n", "dictionary", "=", "{", "}", "\n", "#sentence = sentence[0]", "\n", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "sentence", ")", ":", "\n", "        ", "if", "i", "+", "2", ">=", "len", "(", "sentence", ")", ":", "\n", "            ", "break", "\n", "", "trigram", "=", "\"\"", ".", "join", "(", "sentence", "[", "i", "]", ")", "+", "\" \"", "+", "\"\"", ".", "join", "(", "sentence", "[", "i", "+", "1", "]", ")", "+", "\" \"", "+", "\"\"", ".", "join", "(", "sentence", "[", "i", "+", "2", "]", ")", "\n", "#print \"trigram:\", trigram", "\n", "if", "trigram", "in", "dictionary", ":", "\n", "            ", "dictionary", "[", "trigram", "]", "+=", "1", "\n", "", "else", ":", "\n", "            ", "dictionary", "[", "trigram", "]", "=", "1", "\n", "", "i", "+=", "1", "\n", "", "return", "dictionary", "\n", "", "def", "quadrupleGramDictionary", "(", "sentence", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.bleu.quadrupleGramDictionary": [[105, 122], ["list", "len", "len"], "function", ["None"], ["", "def", "quadrupleGramDictionary", "(", "sentence", ")", ":", "\n", "    ", "sentence", "=", "list", "(", "sentence", ")", "\n", "dictionary", "=", "{", "}", "\n", "#sentence = sentence[0]", "\n", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "sentence", ")", ":", "\n", "        ", "if", "i", "+", "3", ">=", "len", "(", "sentence", ")", ":", "\n", "            ", "break", "\n", "", "quadruplegram", "=", "\"\"", ".", "join", "(", "sentence", "[", "i", "]", ")", "+", "\" \"", "+", "\"\"", ".", "join", "(", "sentence", "[", "i", "+", "1", "]", ")", "+", "\" \"", "+", "\"\"", ".", "join", "(", "sentence", "[", "i", "+", "2", "]", ")", "+", "\" \"", "+", "\"\"", ".", "join", "(", "sentence", "[", "i", "+", "3", "]", ")", "\n", "#print \"quadruplegram:\", quadruplegram", "\n", "if", "quadruplegram", "in", "dictionary", ":", "\n", "            ", "dictionary", "[", "quadruplegram", "]", "+=", "1", "\n", "", "else", ":", "\n", "            ", "dictionary", "[", "quadruplegram", "]", "=", "1", "\n", "", "i", "+=", "1", "\n", "\n", "", "return", "dictionary", "\n", "", "def", "uniGram", "(", "candidateSentence", ",", "referenceSentences", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.bleu.uniGram": [[122, 148], ["filter", "bleu.uniGramDictionary", "bleu.getCAndR", "uniGramDictionary.values", "filter", "reference.append", "referenceDict.append", "range", "min", "bleu.uniGramDictionary", "len", "max"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.bleu.uniGramDictionary", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.bleu.getCAndR", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.bleu.uniGramDictionary"], ["", "def", "uniGram", "(", "candidateSentence", ",", "referenceSentences", ")", ":", "\n", "    ", "referenceDict", "=", "[", "]", "\n", "reference", "=", "[", "]", "\n", "#candidateSentence=candidateSentence.lower().split()", "\n", "candidateSentence", "=", "filter", "(", "None", ",", "candidateSentence", ")", "\n", "candidateDict", "=", "uniGramDictionary", "(", "candidateSentence", ")", "\n", "count", "=", "0", "\n", "for", "line", "in", "referenceSentences", ":", "\n", "#line=line.lower().split()", "\n", "        ", "line", "=", "filter", "(", "None", ",", "line", ")", "\n", "reference", ".", "append", "(", "line", ")", "\n", "referenceDict", ".", "append", "(", "uniGramDictionary", "(", "line", ")", ")", "\n", "", "getCAndR", "(", "candidateSentence", ",", "reference", ")", "\n", "for", "word", "in", "candidateDict", ":", "\n", "#print \"word in candidateDict:\", word", "\n", "        ", "maxRefIndex", "=", "0", "\n", "for", "index2", "in", "range", "(", "0", ",", "len", "(", "referenceDict", ")", ")", ":", "\n", "            ", "if", "word", "in", "referenceDict", "[", "index2", "]", ":", "\n", "                ", "maxRefIndex", "=", "max", "(", "maxRefIndex", ",", "referenceDict", "[", "index2", "]", "[", "word", "]", ")", "\n", "\n", "", "", "count", "+=", "min", "(", "candidateDict", "[", "word", "]", ",", "maxRefIndex", ")", "\n", "#print count", "\n", "", "sumngram", "=", "0", "\n", "for", "values", "in", "candidateDict", ".", "values", "(", ")", ":", "\n", "        ", "sumngram", "+=", "values", "\n", "", "return", "count", ",", "sumngram", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.bleu.biGram": [[149, 169], ["filter", "bleu.biGramDictionary", "biGramDictionary.values", "filter", "referenceDict.append", "range", "min", "bleu.biGramDictionary", "len", "max"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.bleu.biGramDictionary", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.bleu.biGramDictionary"], ["", "def", "biGram", "(", "candidateSentence", ",", "referenceSentences", ")", ":", "\n", "    ", "referenceDict", "=", "[", "]", "\n", "#candidateSentence=candidateSentence.lower().split()", "\n", "candidateSentence", "=", "filter", "(", "None", ",", "candidateSentence", ")", "\n", "candidateDict", "=", "biGramDictionary", "(", "candidateSentence", ")", "\n", "count", "=", "0", "\n", "for", "line", "in", "referenceSentences", ":", "\n", "#line=line.lower().split()", "\n", "        ", "line", "=", "filter", "(", "None", ",", "line", ")", "\n", "referenceDict", ".", "append", "(", "biGramDictionary", "(", "line", ")", ")", "\n", "", "for", "word", "in", "candidateDict", ":", "\n", "        ", "maxRefIndex", "=", "0", "\n", "for", "index2", "in", "range", "(", "0", ",", "len", "(", "referenceDict", ")", ")", ":", "\n", "            ", "if", "word", "in", "referenceDict", "[", "index2", "]", ":", "\n", "                ", "maxRefIndex", "=", "max", "(", "maxRefIndex", ",", "referenceDict", "[", "index2", "]", "[", "word", "]", ")", "\n", "", "", "count", "+=", "min", "(", "candidateDict", "[", "word", "]", ",", "maxRefIndex", ")", "\n", "", "sumngram", "=", "0", "\n", "for", "values", "in", "candidateDict", ".", "values", "(", ")", ":", "\n", "        ", "sumngram", "+=", "values", "\n", "", "return", "count", ",", "sumngram", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.bleu.triGram": [[170, 191], ["filter", "bleu.triGramDictionary", "triGramDictionary.values", "filter", "referenceDict.append", "range", "min", "bleu.triGramDictionary", "len", "max"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.bleu.triGramDictionary", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.bleu.triGramDictionary"], ["", "def", "triGram", "(", "candidateSentence", ",", "referenceSentences", ")", ":", "\n", "    ", "referenceDict", "=", "[", "]", "\n", "#candidateSentence=candidateSentence.lower().split()", "\n", "candidateSentence", "=", "filter", "(", "None", ",", "candidateSentence", ")", "\n", "candidateDict", "=", "triGramDictionary", "(", "candidateSentence", ")", "\n", "count", "=", "0", "\n", "for", "line", "in", "referenceSentences", ":", "\n", "#line=line.lower().split()", "\n", "        ", "line", "=", "filter", "(", "None", ",", "line", ")", "\n", "referenceDict", ".", "append", "(", "triGramDictionary", "(", "line", ")", ")", "\n", "", "for", "word", "in", "candidateDict", ":", "\n", "        ", "maxRefIndex", "=", "0", "\n", "for", "index2", "in", "range", "(", "0", ",", "len", "(", "referenceDict", ")", ")", ":", "\n", "            ", "if", "word", "in", "referenceDict", "[", "index2", "]", ":", "\n", "                ", "maxRefIndex", "=", "max", "(", "maxRefIndex", ",", "referenceDict", "[", "index2", "]", "[", "word", "]", ")", "\n", "\n", "", "", "count", "+=", "min", "(", "candidateDict", "[", "word", "]", ",", "maxRefIndex", ")", "\n", "", "sumngram", "=", "0", "\n", "for", "values", "in", "candidateDict", ".", "values", "(", ")", ":", "\n", "        ", "sumngram", "+=", "values", "\n", "", "return", "count", ",", "sumngram", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.bleu.quadrupleGram": [[192, 212], ["filter", "bleu.quadrupleGramDictionary", "quadrupleGramDictionary.values", "filter", "referenceDict.append", "range", "min", "bleu.quadrupleGramDictionary", "len", "max"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.bleu.quadrupleGramDictionary", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.bleu.quadrupleGramDictionary"], ["", "def", "quadrupleGram", "(", "candidateSentence", ",", "referenceSentences", ")", ":", "\n", "    ", "referenceDict", "=", "[", "]", "\n", "#candidateSentence=candidateSentence.lower().split()", "\n", "candidateSentence", "=", "filter", "(", "None", ",", "candidateSentence", ")", "\n", "candidateDict", "=", "quadrupleGramDictionary", "(", "candidateSentence", ")", "\n", "count", "=", "0", "\n", "for", "line", "in", "referenceSentences", ":", "\n", "#line=line.lower().split()", "\n", "        ", "line", "=", "filter", "(", "None", ",", "line", ")", "\n", "referenceDict", ".", "append", "(", "quadrupleGramDictionary", "(", "line", ")", ")", "\n", "", "for", "word", "in", "candidateDict", ":", "\n", "        ", "maxRefIndex", "=", "0", "\n", "for", "index2", "in", "range", "(", "0", ",", "len", "(", "referenceDict", ")", ")", ":", "\n", "            ", "if", "word", "in", "referenceDict", "[", "index2", "]", ":", "\n", "                ", "maxRefIndex", "=", "max", "(", "maxRefIndex", ",", "referenceDict", "[", "index2", "]", "[", "word", "]", ")", "\n", "", "", "count", "+=", "min", "(", "candidateDict", "[", "word", "]", ",", "maxRefIndex", ")", "\n", "", "sumngram", "=", "0", "\n", "for", "values", "in", "candidateDict", ".", "values", "(", ")", ":", "\n", "        ", "sumngram", "+=", "values", "\n", "", "return", "count", ",", "sumngram", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.bleu.getModifiedPrecision": [[213, 288], ["range", "print", "len", "range", "bleu.uniGram", "bleu.biGram", "bleu.triGram", "bleu.quadrupleGram", "len", "referenceSentences.append", "float", "float", "float", "float", "bleu.getBP", "math.exp", "bleu.getBP", "math.exp", "bleu.getBP", "math.exp", "bleu.getBP", "math.exp", "math.log", "math.log", "math.log", "math.log", "math.log", "math.log", "math.log", "math.log", "math.log", "math.log"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.bleu.uniGram", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.bleu.biGram", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.bleu.triGram", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.bleu.quadrupleGram", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.bleu.getBP", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.bleu.getBP", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.bleu.getBP", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.bleu.getBP", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log"], ["", "def", "getModifiedPrecision", "(", "candidateData", ",", "referencesData", ")", ":", "\n", "    ", "uniNum", "=", "0", "\n", "uniDen", "=", "0", "\n", "biNum", "=", "0", "\n", "biDen", "=", "0", "\n", "triNum", "=", "0", "\n", "triDen", "=", "0", "\n", "quadrupleNum", "=", "0", "\n", "quadrupleDen", "=", "0", "\n", "for", "index", "in", "range", "(", "0", ",", "len", "(", "candidateData", ")", ")", ":", "\n", "        ", "referenceSentences", "=", "[", "]", "\n", "candidateSentence", "=", "candidateData", "[", "index", "]", "\n", "for", "index1", "in", "range", "(", "0", ",", "len", "(", "referencesData", ")", ")", ":", "\n", "            ", "referenceSentences", ".", "append", "(", "referencesData", "[", "index1", "]", "[", "index", "]", ")", "\n", "#print candidateSentence", "\n", "#print referenceSentences[0]", "\n", "", "uniClipCount", ",", "uniCount", "=", "uniGram", "(", "candidateSentence", ",", "referenceSentences", ")", "\n", "uniNum", "+=", "uniClipCount", "\n", "uniDen", "+=", "uniCount", "\n", "biClipCount", ",", "biCount", "=", "biGram", "(", "candidateSentence", ",", "referenceSentences", ")", "\n", "biNum", "+=", "biClipCount", "\n", "biDen", "+=", "biCount", "\n", "triClipCount", ",", "triCount", "=", "triGram", "(", "candidateSentence", ",", "referenceSentences", ")", "\n", "triNum", "+=", "triClipCount", "\n", "triDen", "+=", "triCount", "\n", "quadrupleClipCount", ",", "quadrupleCount", "=", "quadrupleGram", "(", "candidateSentence", ",", "referenceSentences", ")", "\n", "quadrupleNum", "+=", "quadrupleClipCount", "\n", "quadrupleDen", "+=", "quadrupleCount", "\n", "# print(uniNum,uniDen)", "\n", "# print(biNum,biDen)", "\n", "# print(triNum,triDen)", "\n", "# print(quadrupleNum,quadrupleDen)", "\n", "", "if", "uniDen", ">", "0", ":", "\n", "        ", "unigram1", "=", "uniNum", "/", "float", "(", "uniDen", ")", "\n", "", "else", ":", "\n", "        ", "unigram1", "=", "0", "\n", "", "if", "biDen", ">", "0", ":", "\n", "        ", "bigram1", "=", "biNum", "/", "float", "(", "biDen", ")", "\n", "", "else", ":", "\n", "        ", "bigram1", "=", "0", "\n", "", "if", "triDen", ">", "0", ":", "\n", "        ", "trigram1", "=", "triNum", "/", "float", "(", "triDen", ")", "\n", "", "else", ":", "\n", "        ", "trigram1", "=", "0", "\n", "", "if", "quadrupleDen", ">", "0", ":", "\n", "        ", "quadruplegram1", "=", "quadrupleNum", "/", "float", "(", "quadrupleDen", ")", "\n", "", "else", ":", "\n", "        ", "quadruplegram1", "=", "0", "\n", "\n", "# print(unigram1,bigram1,trigram1,quadruplegram1)", "\n", "", "bleu1", "=", "0", "\n", "bleu2", "=", "0", "\n", "bleu3", "=", "0", "\n", "bleu4", "=", "0", "\n", "if", "unigram1", "+", "bigram1", "+", "trigram1", "+", "quadruplegram1", "==", "0", ":", "\n", "        ", "bleu1", "=", "0", "\n", "bleu2", "=", "0", "\n", "bleu3", "=", "0", "\n", "bleu4", "=", "0", "\n", "", "else", ":", "\n", "        ", "if", "unigram1", ">", "0", ":", "\n", "# print(\"in 1\",getBP())", "\n", "            ", "bleu1", "=", "getBP", "(", ")", "*", "math", ".", "exp", "(", "math", ".", "log", "(", "unigram1", ")", ")", "\n", "", "if", "unigram1", ">", "0", "and", "bigram1", ">", "0", ":", "\n", "# print(\"in 2\",getBP())", "\n", "            ", "bleu2", "=", "getBP", "(", ")", "*", "math", ".", "exp", "(", "0.5", "*", "math", ".", "log", "(", "unigram1", ")", "+", "0.5", "*", "math", ".", "log", "(", "bigram1", ")", ")", "\n", "", "if", "unigram1", ">", "0", "and", "bigram1", ">", "0", "and", "trigram1", ">", "0", ":", "\n", "# print(\"in 3\",getBP())", "\n", "            ", "bleu3", "=", "getBP", "(", ")", "*", "math", ".", "exp", "(", "(", "1", "/", "3.0", ")", "*", "math", ".", "log", "(", "unigram1", ")", "+", "(", "1", "/", "3.0", ")", "*", "math", ".", "log", "(", "bigram1", ")", "+", "(", "1", "/", "3.0", ")", "*", "math", ".", "log", "(", "trigram1", ")", ")", "\n", "", "if", "unigram1", ">", "0", "and", "bigram1", ">", "0", "and", "trigram1", ">", "0", "and", "quadruplegram1", ">", "0", ":", "\n", "# print(\"in 4\",getBP())", "\n", "            ", "bleu4", "=", "getBP", "(", ")", "*", "math", ".", "exp", "(", "0.25", "*", "math", ".", "log", "(", "unigram1", ")", "+", "0.25", "*", "math", ".", "log", "(", "bigram1", ")", "+", "0.25", "*", "math", ".", "log", "(", "trigram1", ")", "+", "0.25", "*", "math", ".", "log", "(", "quadruplegram1", ")", ")", "\n", "\n", "", "", "print", "(", "\"blue_1: {:.2f}\\nblue_2: {:.2f}\\nblue_3: {:.2f}\\nblue_4: {:.2f}\"", ".", "format", "(", "bleu1", "*", "100", ",", "bleu2", "*", "100", ",", "bleu3", "*", "100", ",", "bleu4", "*", "100", ")", ")", "\n", "return", "bleu1", ",", "bleu2", ",", "bleu3", ",", "bleu4", "\n", "# print(\"-\" * 89)", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.bleu.main": [[293, 298], ["bleu.getFiles", "bleu.readFiles", "bleu.getModifiedPrecision"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.bleu.getFiles", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.bleu.readFiles", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.bleu.getModifiedPrecision"], ["", "def", "main", "(", "candidatefile", ",", "referencefiles", ")", ":", "\n", "    ", "candidatefile", ",", "referencefiles", "=", "getFiles", "(", "candidatefile", ",", "referencefiles", ")", "\n", "candidateData", ",", "referencesData", "=", "readFiles", "(", "candidatefile", ",", "referencefiles", ")", "\n", "bleu1", ",", "bleu2", ",", "bleu3", ",", "bleu4", "=", "getModifiedPrecision", "(", "candidateData", ",", "referencesData", ")", "\n", "return", "bleu1", "*", "100", ",", "bleu2", "*", "100", ",", "bleu3", "*", "100", ",", "bleu4", "*", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.ordered_word_verb_incorp.split_file": [[12, 36], ["print", "print", "open", "fin.readlines", "len", "storylines.append", "stories.append", "errors.append", "len", "line.count", "line.count", "len", "line.split", "plot_story.split", "plot_story.split", "errors.append"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.data_helper.count", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.data_helper.count"], ["def", "split_file", "(", "fin", ")", ":", "\n", "    ", "print", "(", "\"Spliting file...\"", ")", "\n", "# Split story_out.txt to storyline file and story_file", "\n", "with", "open", "(", "fin", ",", "\"r\"", ")", "as", "fin", ":", "\n", "        ", "lines", "=", "fin", ".", "readlines", "(", ")", "\n", "storylines", ",", "stories", ",", "errors", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "line", "in", "lines", ":", "\n", "            ", "if", "not", "line", ":", "\n", "                ", "continue", "\n", "", "if", "line", ".", "count", "(", "'<EOT>'", ")", "==", "1", "and", "line", ".", "count", "(", "'<EOL>'", ")", "==", "1", ":", "# filter some line which has 0 or one more <EOT>/<EOL>", "\n", "                ", "try", ":", "\n", "                    ", "plot_story", "=", "line", ".", "split", "(", "\" <EOT> \"", ")", "[", "1", "]", "\n", "plot", "=", "plot_story", ".", "split", "(", "\" <EOL> \"", ")", "[", "0", "]", "\n", "story", "=", "plot_story", ".", "split", "(", "\" <EOL> \"", ")", "[", "1", "]", "\n", "", "except", "IndexError", ":", "\n", "                    ", "errors", ".", "append", "(", "line", ")", "\n", "continue", "\n", "", "storylines", ".", "append", "(", "plot", ")", "\n", "stories", ".", "append", "(", "story", ")", "\n", "", "else", ":", "\n", "                ", "errors", ".", "append", "(", "line", ")", "\n", "", "", "", "print", "(", "'{} line from text ({:.2f}%) have not correct <EOT>/<EOL>'", ".", "format", "(", "\n", "len", "(", "errors", ")", ",", "len", "(", "errors", ")", "*", "100", "/", "len", "(", "lines", ")", ")", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "return", "storylines", ",", "stories", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.ordered_word_verb_incorp.read_w2v": [[37, 81], ["print", "set", "numpy.zeros", "print", "print", "print", "print", "open", "set", "len", "line.strip.strip", "len", "line.strip.split", "len", "set.add", "len", "numpy.asarray", "float", "print", "len", "RuntimeError"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.eval_lm.WordStat.add", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], ["", "def", "read_w2v", "(", "w2v_path", ",", "word2index", ",", "n_dims", "=", "300", ",", "unk_token", "=", "\"unk\"", ")", ":", "\n", "    ", "\"\"\"takes tokens from files and returns word vectors\n    :param w2v_path: path to pretrained embedding file\n    :param word2index: Counter of tokens from processed files\n    :param n_dims: embedding dimensions\n    :param unk_token: this is the unk token for glove 840B 300d. Ideally we make this less hardcode-y\n    :return numpy array of word vectors\n    \"\"\"", "\n", "print", "(", "'Getting Word Vectors...'", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "vocab", "=", "set", "(", ")", "\n", "# hacky thing to deal with making sure to incorporate unk tokens in the form they are in for a given embedding type", "\n", "if", "unk_token", "not", "in", "word2index", ":", "\n", "        ", "word2index", "[", "unk_token", "]", "=", "0", "# hardcoded, this would be better if it was a method of a class", "\n", "\n", "", "word_vectors", "=", "np", ".", "zeros", "(", "(", "len", "(", "word2index", ")", ",", "n_dims", ")", ")", "# length of vocab x embedding dimensions", "\n", "with", "open", "(", "w2v_path", ")", "as", "file", ":", "\n", "        ", "lc", "=", "0", "\n", "for", "line", "in", "file", ":", "\n", "            ", "lc", "+=", "1", "\n", "line", "=", "line", ".", "strip", "(", ")", "\n", "if", "line", ":", "\n", "                ", "row", "=", "line", ".", "split", "(", ")", "\n", "token", "=", "row", "[", "0", "]", "\n", "if", "token", "in", "word2index", "or", "token", "==", "unk_token", ":", "\n", "                    ", "vocab", ".", "add", "(", "token", ")", "\n", "try", ":", "\n", "                        ", "vec_data", "=", "[", "float", "(", "x", ")", "for", "x", "in", "row", "[", "1", ":", "]", "]", "\n", "word_vectors", "[", "word2index", "[", "token", "]", "]", "=", "np", ".", "asarray", "(", "vec_data", ")", "\n", "if", "lc", "==", "1", ":", "\n", "                            ", "if", "len", "(", "vec_data", ")", "!=", "n_dims", ":", "\n", "                                ", "raise", "RuntimeError", "(", "\"wrong number of dimensions\"", ")", "\n", "", "", "", "except", ":", "\n", "                        ", "print", "(", "'Error on line {}'", ".", "format", "(", "lc", ")", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "# puts data for a given embedding at an index based on the word2index dict", "\n", "# end up with a matrix of the entire vocab", "\n", "", "", "", "", "", "tokens_without_embeddings", "=", "set", "(", "word2index", ")", "-", "vocab", "\n", "print", "(", "'Word Vectors ready!'", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "print", "(", "'{} tokens from text ({:.2f}%) have no embeddings'", ".", "format", "(", "\n", "len", "(", "tokens_without_embeddings", ")", ",", "len", "(", "tokens_without_embeddings", ")", "*", "100", "/", "len", "(", "word2index", ")", ")", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "print", "(", "'Tokens without embeddings: {}'", ".", "format", "(", "tokens_without_embeddings", ")", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "print", "(", "'Setting those tokens to unk embedding'", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "for", "token", "in", "tokens_without_embeddings", ":", "\n", "        ", "word_vectors", "[", "word2index", "[", "token", "]", "]", "=", "word_vectors", "[", "word2index", "[", "unk_token", "]", "]", "\n", "", "return", "word_vectors", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.ordered_word_verb_incorp.get_tokens": [[83, 91], ["print", "set", "dict", "set.update", "map", "set", "enumerate"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.update"], ["", "def", "get_tokens", "(", "lists", ")", ":", "\n", "    ", "\"\"\"take a list of filepaths, returns word2idx dict\"\"\"", "\n", "print", "(", "'Getting tokens ... ...'", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "all_tokens", "=", "set", "(", ")", "\n", "for", "list", "in", "lists", ":", "\n", "        ", "all_tokens", ".", "update", "(", "set", "(", "''", ".", "join", "(", "list", ")", ".", "strip", "(", ")", ".", "split", "(", ")", ")", ")", "\n", "", "word2index", "=", "dict", "(", "map", "(", "reversed", ",", "enumerate", "(", "all_tokens", ")", ")", ")", "\n", "return", "word2index", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.ordered_word_verb_incorp.cos_sim": [[93, 95], ["v1.dot", "numpy.sqrt", "numpy.sqrt", "v1.dot", "v2.dot"], "function", ["None"], ["", "def", "cos_sim", "(", "v1", ",", "v2", ")", ":", "\n", "    ", "return", "v1", ".", "dot", "(", "v2", ")", "/", "(", "np", ".", "sqrt", "(", "v1", ".", "dot", "(", "v1", ")", ")", "*", "np", ".", "sqrt", "(", "v2", ".", "dot", "(", "v2", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.ordered_word_verb_incorp.cos_sim_array": [[97, 110], ["numpy.dot", "numpy.divide"], "function", ["None"], ["", "def", "cos_sim_array", "(", "vec", ",", "vec_array", ")", ":", "\n", "    ", "\"\"\"\n    take dot product of 2 vectors. which reduces dimensionality and gives me an array of results.\n    IMPORTANT that vec_array is first arg as a result\n    :param vec: a vector\n    :param vec_array: an array of vectors\n    :return: cosine_sim_array of the cosine similarity between the vector and each vector in the array\n    \"\"\"", "\n", "dot_prod_array", "=", "np", ".", "dot", "(", "vec_array", ",", "vec", ")", "\n", "# print(dot_prod_array)", "\n", "len_vec_array", ",", "len_x_d", "=", "(", "vec_array", "**", "2", ")", ".", "sum", "(", "axis", "=", "1", ")", "**", ".5", ",", "(", "vec", "**", "2", ")", ".", "sum", "(", ")", "**", ".5", "\n", "cosine_sim_array", "=", "np", ".", "divide", "(", "dot_prod_array", ",", "len_vec_array", "*", "len_x_d", ")", "\n", "return", "cosine_sim_array", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.ordered_word_verb_incorp.remove_chars": [[112, 115], ["re.sub"], "function", ["None"], ["", "def", "remove_chars", "(", "text", ":", "str", ",", "remove", "=", "'#'", ")", "->", "str", ":", "\n", "    ", "\"\"\"take a string and optional chars to remove and returns string without them\"\"\"", "\n", "return", "re", ".", "sub", "(", "r'[{}]'", ".", "format", "(", "remove", ")", ",", "''", ",", "text", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.ordered_word_verb_incorp.make_vec_array": [[117, 122], ["numpy.array", "numpy.array", "word2index.get"], "function", ["None"], ["", "def", "make_vec_array", "(", "word_list", ":", "list", ",", "word_vectors", ",", "word2index", ":", "dict", ",", "drop_set", "=", "{", "'<EOL>'", ",", "'<EOT>'", ",", "'<V>'", ",", "'<A2>'", ",", "'<P>'", ",", "'#'", ",", "'[PAD]'", ",", "'<A0>'", ",", "'</s>'", ",", "'<bos>'", ",", "'<A1>'", ",", "'<eos>'", ",", "'ent'", ",", "'<ent>'", ",", "'</ent>'", "}", ")", ":", "\n", "    ", "\"\"\"take a list of strings, an array of word vectors, return a numpy array of word vectors\"\"\"", "\n", "vecs", "=", "[", "np", ".", "array", "(", "word_vectors", "[", "word2index", ".", "get", "(", "word", ",", "0", ")", "]", ")", "\n", "for", "word", "in", "word_list", "if", "word", "not", "in", "drop_set", "]", "\n", "return", "np", ".", "array", "(", "vecs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.ordered_word_verb_incorp.word_verb_calc_similarity": [[123, 210], ["print", "enumerate", "enumerate", "len", "range", "print", "print", "print", "re.sub", "remove_chars().strip().split", "re.sub", "remove_chars().strip().split", "len", "min", "range", "ordered_word_verb_incorp.make_vec_array", "all_storyline_word_array.append", "enumerate", "ordered_word_verb_incorp.make_vec_array", "all_storyline_verb_array.append", "ordered_word_verb_incorp.make_vec_array", "all_story_word_array.append", "len", "len", "len", "len", "remove_chars().strip", "remove_chars().strip", "storyline.split", "storyline.split", "story.split", "numpy.nanmax", "numpy.nanmax", "ordered_word_verb_incorp.remove_chars", "ordered_word_verb_incorp.remove_chars", "verbs.append", "ordered_word_verb_incorp.cos_sim_array", "ordered_word_verb_incorp.cos_sim_array", "storyline.split"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.ordered_word_verb_incorp.make_vec_array", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.ordered_word_verb_incorp.make_vec_array", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.ordered_word_verb_incorp.make_vec_array", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.ordered_word_verb_incorp.remove_chars", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.ordered_word_verb_incorp.remove_chars", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.ordered_word_verb_incorp.cos_sim_array", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.ordered_word_verb_incorp.cos_sim_array"], ["", "def", "word_verb_calc_similarity", "(", "storylines", ",", "stories", ",", "word2index", ",", "word_vectors", ")", ":", "\n", "    ", "print", "(", "'Calculating word and verb ordered incorporation...'", ")", "\n", "\"\"\"calculates cosine similarity between keywords in storyline and between keywords in storyline\n    and corresponding sentence in story. Averaged over all \"\"\"", "\n", "# clean storyline and story", "\n", "for", "i", ",", "line", "in", "enumerate", "(", "storylines", ")", ":", "\n", "        ", "line", "=", "re", ".", "sub", "(", "r'ent [0-9]*'", ",", "''", ",", "line", ")", "# remove `ent XX ` in storyline", "\n", "processed_line", "=", "remove_chars", "(", "line", ")", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "storylines", "[", "i", "]", "=", "processed_line", "\n", "", "for", "i", ",", "line", "in", "enumerate", "(", "stories", ")", ":", "\n", "        ", "line", "=", "re", ".", "sub", "(", "r'(<ent> [0-9]*) | (</ent> [0-9]*)'", ",", "''", ",", "line", ")", "# remove `<ent> XX` or `</ent> XX` in story", "\n", "processed_line", "=", "remove_chars", "(", "line", ")", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "stories", "[", "i", "]", "=", "processed_line", "\n", "\n", "#check alignment", "\n", "", "num_storylines", "=", "len", "(", "storylines", ")", "\n", "assert", "(", "num_storylines", "==", "len", "(", "stories", ")", ")", ",", "\"Mismatch between number of storylines and number of stories\"", "\n", "\n", "# loop through stories and storylines and calc similarities", "\n", "word_incorporation_rate", "=", "0", "\n", "verb_incorporation_rate", "=", "0", "\n", "for", "i", "in", "range", "(", "num_storylines", ")", ":", "# one_line refer to one storyling or story", "\n", "        ", "splited_storyline", "=", "' '", ".", "join", "(", "storylines", "[", "i", "]", ")", ".", "split", "(", "'</s>'", ")", "# sentenize storyline", "\n", "splited_story", "=", "' '", ".", "join", "(", "stories", "[", "i", "]", ")", ".", "split", "(", "'</s>'", ")", "# sentenize story", "\n", "all_storyline_word_array", ",", "all_storyline_verb_array", ",", "all_story_word_array", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "# Processing storyline sentence by sentence", "\n", "for", "storyline", "in", "splited_storyline", ":", "# get verc for each sentence", "\n", "# make word vector array for storyline sentence by sentence", "\n", "            ", "storyline_word_array", "=", "make_vec_array", "(", "storyline", ".", "split", "(", ")", ",", "word_vectors", ",", "word2index", ")", "# one seentence storyline vectors", "\n", "all_storyline_word_array", ".", "append", "(", "storyline_word_array", ")", "# nested list: all storyline vectors", "\n", "# finds all verbs in each sentence", "\n", "verbs", "=", "[", "]", "\n", "for", "j", ",", "word", "in", "enumerate", "(", "storyline", ".", "split", "(", ")", ")", ":", "\n", "                ", "if", "word", "==", "'<V>'", ":", "\n", "                    ", "try", ":", "\n", "                        ", "verbs", ".", "append", "(", "storyline", ".", "split", "(", ")", "[", "j", "+", "1", "]", ")", "\n", "", "except", "IndexError", ":", "\n", "                        ", "continue", "\n", "# make verb vector array for storyline sentence by sentence", "\n", "", "", "", "storyline_verb_array", "=", "make_vec_array", "(", "verbs", ",", "word_vectors", ",", "word2index", ")", "# one seentence storyline vectors", "\n", "all_storyline_verb_array", ".", "append", "(", "storyline_verb_array", ")", "# nested list: all storyline vectors", "\n", "\n", "# Processing story sentence by sentence", "\n", "", "for", "story", "in", "splited_story", ":", "\n", "# make word vector array for story sentence by sentence", "\n", "            ", "story_word_array", "=", "make_vec_array", "(", "story", ".", "split", "(", ")", ",", "word_vectors", ",", "word2index", ")", "# one sentence word vectors in story", "\n", "all_story_word_array", ".", "append", "(", "story_word_array", ")", "\n", "\n", "# calculate the similarities between the word/verb and the sentence", "\n", "", "valid_num_words_in_storyline", "=", "0", "\n", "valid_num_verbs_in_storyline", "=", "0", "\n", "this_word_incorporation_rate", "=", "0", "\n", "this_verb_incorporation_rate", "=", "0", "\n", "min_lenght", "=", "min", "(", "len", "(", "splited_story", ")", ",", "len", "(", "splited_storyline", ")", ")", "# truncate storyline or story since they have different length", "\n", "for", "k", "in", "range", "(", "min_lenght", ")", ":", "\n", "# compute word incoporation", "\n", "            ", "valid_num_words_in_storyline", "+=", "len", "(", "all_storyline_word_array", "[", "k", "]", ")", "\n", "for", "kw_vec", "in", "all_storyline_word_array", "[", "k", "]", ":", "\n", "                ", "try", ":", "\n", "                    ", "cosine_max", "=", "np", ".", "nanmax", "(", "cos_sim_array", "(", "kw_vec", ",", "all_story_word_array", "[", "k", "]", ")", ")", "# compute cosine max with word and specific sentence", "\n", "this_word_incorporation_rate", "+=", "cosine_max", "\n", "", "except", ":", "\n", "                    ", "continue", "\n", "# compute verb incoporation", "\n", "", "", "valid_num_verbs_in_storyline", "+=", "len", "(", "all_storyline_verb_array", "[", "k", "]", ")", "\n", "for", "kw_vec", "in", "all_storyline_verb_array", "[", "k", "]", ":", "\n", "                ", "try", ":", "\n", "                    ", "cosine_max", "=", "np", ".", "nanmax", "(", "cos_sim_array", "(", "kw_vec", ",", "all_story_word_array", "[", "k", "]", ")", ")", "# compute cosine max with word and specific sentence", "\n", "this_verb_incorporation_rate", "+=", "cosine_max", "\n", "", "except", ":", "\n", "                    ", "continue", "\n", "", "", "", "try", ":", "\n", "            ", "word_incorporation_rate", "+=", "this_word_incorporation_rate", "/", "valid_num_words_in_storyline", "\n", "", "except", ":", "\n", "            ", "word_incorporation_rate", "+=", "0", "# when valid_num_words_in_storyline == 0", "\n", "", "try", ":", "\n", "            ", "verb_incorporation_rate", "+=", "this_verb_incorporation_rate", "/", "valid_num_verbs_in_storyline", "\n", "", "except", "ZeroDivisionError", ":", "# aviod some storylines have no verb, so the num_words_in_storyline will be 0", "\n", "            ", "verb_incorporation_rate", "+=", "0", "\n", "\n", "# report average over all in set", "\n", "", "", "word_incorporation_rate", "/=", "num_storylines", "\n", "verb_incorporation_rate", "/=", "num_storylines", "\n", "print", "(", "'Metrics for {} samples'", ".", "format", "(", "num_storylines", ")", ")", "\n", "print", "(", "'ordered word_incorporation_rate : {:.2f} %'", ".", "format", "(", "word_incorporation_rate", "*", "100", ")", ")", "\n", "print", "(", "'ordered verb_incorporation_rate : {:.2f} %'", ".", "format", "(", "verb_incorporation_rate", "*", "100", ")", ")", "\n", "return", "verb_incorporation_rate", "*", "100", ",", "word_incorporation_rate", "*", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.ordered_word_verb_incorp.main": [[212, 217], ["ordered_word_verb_incorp.get_tokens", "ordered_word_verb_incorp.read_w2v", "ordered_word_verb_incorp.word_verb_calc_similarity"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.ordered_word_verb_incorp.get_tokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.ordered_word_verb_incorp.read_w2v", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.ordered_word_verb_incorp.word_verb_calc_similarity"], ["", "def", "main", "(", "wordvec_file", ",", "storyline_file", ",", "story_file", ")", ":", "\n", "    ", "word2idx", "=", "get_tokens", "(", "[", "storyline_file", ",", "story_file", "]", ")", "\n", "word_vectors", "=", "read_w2v", "(", "wordvec_file", ",", "word2idx", ")", "\n", "word_incorporation_rate", ",", "verb_incorporation_rate", "=", "word_verb_calc_similarity", "(", "storyline_file", ",", "story_file", ",", "word2idx", ",", "word_vectors", ")", "\n", "return", "word_incorporation_rate", ",", "verb_incorporation_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.ordered_word_verb_incorp.read_file": [[219, 222], ["open", "fin.readlines"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open"], ["", "def", "read_file", "(", "filepath", ")", ":", "\n", "    ", "with", "open", "(", "filepath", ",", "\"r\"", ")", "as", "fin", ":", "\n", "        ", "return", "fin", ".", "readlines", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.ent_incorp.ent_incorp": [[18, 38], ["re.compile", "zip", "list", "list", "similarity.levenshtein.Levenshtein", "similarity.levenshtein.Levenshtein.distance", "ent_rate.append", "numpy.mean", "min", "max", "numpy.std", "re.compile.findall", "re.compile.findall", "max", "len", "len"], "function", ["None"], ["def", "ent_incorp", "(", "plots", ",", "stories", ")", ":", "\n", "# calculate entity incorporation in storyline and story", "\n", "# return average score of all lines", "\n", "    ", "entity_numbers", "=", "re", ".", "compile", "(", "\"(?<=\\sent\\s)\\d+\"", ")", "\n", "ent_rate", "=", "[", "]", "\n", "for", "plot", ",", "story", "in", "zip", "(", "plots", ",", "stories", ")", ":", "\n", "        ", "plot_entities", "=", "list", "(", "entity_numbers", ".", "findall", "(", "plot", ")", ")", "\n", "story_entities", "=", "list", "(", "entity_numbers", ".", "findall", "(", "story", ")", ")", "\n", "levenshtein", "=", "Levenshtein", "(", ")", "\n", "incorp_ent", "=", "levenshtein", ".", "distance", "(", "plot_entities", ",", "story_entities", ")", "# compute edit distance between the ent storyline and story", "\n", "try", ":", "\n", "            ", "ent_rate_each", "=", "incorp_ent", "/", "max", "(", "len", "(", "plot_entities", ")", ",", "len", "(", "story_entities", ")", ")", "# normalise the distance", "\n", "", "except", "ZeroDivisionError", ":", "\n", "            ", "ent_rate_each", "=", "0", "\n", "", "ent_rate", ".", "append", "(", "ent_rate_each", ")", "\n", "\n", "#print(\"Entity incorporation rate %:\")", "\n", "#print(\"Mean: {:.2f} Min: {:.2f} Max: {:.2f} StDev {:.2f}\".format(min(ent_rate), max(ent_rate),", "\n", "#                                                                 mean(ent_rate), std(ent_rate)))", "\n", "", "return", "mean", "(", "ent_rate", ")", ",", "min", "(", "ent_rate", ")", ",", "max", "(", "ent_rate", ")", ",", "std", "(", "ent_rate", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.inter_rep.NGram.__init__": [[10, 16], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n", ")", ":", "\n", "# n is the order of n-gram language model", "\n", "        ", "self", ".", "n", "=", "n", "\n", "self", ".", "unigram", "=", "{", "}", "\n", "self", ".", "bigram", "=", "{", "}", "\n", "self", ".", "trigram", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.inter_rep.NGram.scan": [[20, 64], ["inter_rep.NGram.ngram", "len", "print", "len", "print", "len", "print", "line.split", "open", "open.write", "open", "open.write", "open", "open.write", "print", "print", "print", "float", "float", "float", "float", "float", "float"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.inter_rep.NGram.ngram", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], ["", "def", "scan", "(", "self", ",", "sentence", ")", ":", "\n", "        ", "for", "line", "in", "sentence", ":", "\n", "            ", "self", ".", "ngram", "(", "line", ".", "split", "(", ")", ")", "\n", "\n", "", "if", "self", ".", "n", "==", "1", ":", "\n", "            ", "try", ":", "\n", "                ", "fip", "=", "open", "(", "\"data.uni\"", ",", "\"w\"", ")", "\n", "", "except", ":", "\n", "                ", "print", "(", "\"failed to open data.uni\"", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "\n", "", "num", "=", "len", "(", "self", ".", "unigram", ")", "\n", "sum", "=", "0", "\n", "for", "i", "in", "self", ".", "unigram", ":", "\n", "                ", "sum", "=", "sum", "+", "self", ".", "unigram", "[", "i", "]", "\n", "fip", ".", "write", "(", "\"%s %d\\n\"", "%", "(", "i", ",", "self", ".", "unigram", "[", "i", "]", ")", ")", "\n", "\n", "", "proportion", "=", "(", "1.0", "-", "float", "(", "num", ")", "/", "float", "(", "sum", ")", ")", "*", "100", "\n", "print", "(", "\"unigram proportion: {:.2f} %\"", ".", "format", "(", "proportion", ")", ")", "\n", "", "if", "self", ".", "n", "==", "2", ":", "\n", "            ", "try", ":", "\n", "                ", "fip", "=", "open", "(", "\"data.bi\"", ",", "\"w\"", ")", "\n", "", "except", ":", "\n", "                ", "print", "(", "\"failed to open data.bi\"", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "", "num", "=", "len", "(", "self", ".", "bigram", ")", "\n", "sum", "=", "0", "\n", "for", "i", "in", "self", ".", "bigram", ":", "\n", "                ", "sum", "=", "sum", "+", "self", ".", "bigram", "[", "i", "]", "\n", "fip", ".", "write", "(", "\"%s %d\\n\"", "%", "(", "i", ",", "self", ".", "bigram", "[", "i", "]", ")", ")", "\n", "", "proportion", "=", "(", "1.0", "-", "float", "(", "num", ")", "/", "float", "(", "sum", ")", ")", "*", "100", "\n", "print", "(", "\"bigram proportion: {:.2f} %\"", ".", "format", "(", "proportion", ")", ")", "\n", "\n", "", "if", "self", ".", "n", "==", "3", ":", "\n", "            ", "try", ":", "\n", "                ", "fip", "=", "open", "(", "\"data.tri\"", ",", "\"w\"", ")", "\n", "", "except", ":", "\n", "                ", "print", "(", "\"failed to open data.bi\"", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "", "num", "=", "len", "(", "self", ".", "trigram", ")", "\n", "sum", "=", "0", "\n", "for", "i", "in", "self", ".", "trigram", ":", "\n", "                ", "sum", "=", "sum", "+", "self", ".", "trigram", "[", "i", "]", "\n", "fip", ".", "write", "(", "\"%s %d\\n\"", "%", "(", "i", ",", "self", ".", "trigram", "[", "i", "]", ")", ")", "\n", "", "proportion", "=", "(", "(", "1.0", "-", "float", "(", "num", ")", "/", "float", "(", "sum", ")", ")", ")", "*", "100", "\n", "print", "(", "\"trigram proportion: {:.2f} %\"", ".", "format", "(", "proportion", ")", ")", "\n", "", "return", "proportion", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.inter_rep.NGram.ngram": [[68, 90], ["range", "range", "len", "len"], "methods", ["None"], ["", "def", "ngram", "(", "self", ",", "words", ")", ":", "\n", "# uni-gram", "\n", "        ", "if", "self", ".", "n", "==", "1", ":", "\n", "            ", "for", "word", "in", "words", ":", "\n", "                ", "if", "word", "not", "in", "self", ".", "unigram", ":", "\n", "                    ", "self", ".", "unigram", "[", "word", "]", "=", "0", "\n", "", "self", ".", "unigram", "[", "word", "]", "=", "self", ".", "unigram", "[", "word", "]", "+", "1", "\n", "\n", "# bi-gram", "\n", "", "", "if", "self", ".", "n", "==", "2", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "words", ")", "-", "1", ")", ":", "\n", "                ", "stri", "=", "words", "[", "i", "]", "+", "words", "[", "i", "+", "1", "]", "\n", "if", "stri", "not", "in", "self", ".", "bigram", ":", "\n", "                    ", "self", ".", "bigram", "[", "stri", "]", "=", "0", "\n", "", "self", ".", "bigram", "[", "stri", "]", "=", "self", ".", "bigram", "[", "stri", "]", "+", "1", "\n", "# tri-gram", "\n", "", "", "if", "self", ".", "n", "==", "3", ":", "\n", "            ", "for", "i", "in", "range", "(", "0", ",", "len", "(", "words", ")", "-", "2", ")", ":", "\n", "                ", "stri", "=", "words", "[", "i", "]", "+", "words", "[", "i", "+", "1", "]", "+", "words", "[", "i", "+", "2", "]", "\n", "if", "stri", "not", "in", "self", ".", "trigram", ":", "\n", "                    ", "self", ".", "trigram", "[", "stri", "]", "=", "0", "\n", "", "self", ".", "trigram", "[", "stri", "]", "=", "self", ".", "trigram", "[", "stri", "]", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.inter_rep.main": [[91, 101], ["inter_rep.NGram", "inter_rep.NGram.scan", "open", "fin.readlines", "len", "sentence.append", "line.strip", "line.strip"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.evaluation.inter_rep.NGram.scan", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open"], ["", "", "", "", "def", "main", "(", "human_readeable_story_file", ")", ":", "\n", "    ", "with", "open", "(", "human_readeable_story_file", ",", "'r'", ")", "as", "fin", ":", "\n", "        ", "lines", "=", "fin", ".", "readlines", "(", ")", "\n", "", "sentence", "=", "[", "]", "\n", "for", "line", "in", "lines", ":", "\n", "        ", "if", "len", "(", "line", ".", "strip", "(", ")", ")", "!=", "0", ":", "\n", "            ", "sentence", ".", "append", "(", "line", ".", "strip", "(", ")", ")", "\n", "", "", "tri", "=", "NGram", "(", "3", ")", "\n", "inter_tri", "=", "tri", ".", "scan", "(", "sentence", ")", "\n", "return", "inter_tri", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.adamax.FairseqAdamax.__init__": [[14, 17], ["FairseqOptimizer.__init__", "adamax.Adamax"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "params", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "self", ".", "_optimizer", "=", "Adamax", "(", "params", ",", "**", "self", ".", "optimizer_config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.adamax.FairseqAdamax.add_args": [[18, 30], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add optimizer-specific arguments to the parser.\"\"\"", "\n", "# fmt: off", "\n", "parser", ".", "add_argument", "(", "'--adamax-betas'", ",", "default", "=", "'(0.9, 0.999)'", ",", "metavar", "=", "'B'", ",", "\n", "help", "=", "'betas for Adam optimizer'", ")", "\n", "parser", ".", "add_argument", "(", "'--adamax-eps'", ",", "type", "=", "float", ",", "default", "=", "1e-8", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'epsilon for Adam optimizer'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight-decay'", ",", "'--wd'", ",", "default", "=", "0.0", ",", "type", "=", "float", ",", "metavar", "=", "'WD'", ",", "\n", "help", "=", "'weight decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--no-bias-correction'", ",", "default", "=", "False", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'disable bias correction'", ")", "\n", "# fmt: on", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.adamax.FairseqAdamax.optimizer_config": [[32, 46], ["eval"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval"], ["", "@", "property", "\n", "def", "optimizer_config", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return a kwarg dictionary that will be used to override optimizer\n        args stored in checkpoints. This allows us to load a checkpoint and\n        resume training using a different set of optimizer args, e.g., with a\n        different learning rate.\n        \"\"\"", "\n", "return", "{", "\n", "'lr'", ":", "self", ".", "args", ".", "lr", "[", "0", "]", ",", "\n", "'betas'", ":", "eval", "(", "self", ".", "args", ".", "adamax_betas", ")", ",", "\n", "'eps'", ":", "self", ".", "args", ".", "adamax_eps", ",", "\n", "'weight_decay'", ":", "self", ".", "args", ".", "weight_decay", ",", "\n", "'bias_correction'", ":", "not", "self", ".", "args", ".", "no_bias_correction", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.adamax.Adamax.__init__": [[70, 86], ["dict", "super().__init__", "ValueError", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "2e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ",", "\n", "weight_decay", "=", "0", ",", "bias_correction", "=", "True", ")", ":", "\n", "        ", "if", "not", "0.0", "<=", "lr", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid learning rate: {}\"", ".", "format", "(", "lr", ")", ")", "\n", "", "if", "not", "0.0", "<=", "eps", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid epsilon value: {}\"", ".", "format", "(", "eps", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "0", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 0: {}\"", ".", "format", "(", "betas", "[", "0", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "betas", "[", "1", "]", "<", "1.0", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid beta parameter at index 1: {}\"", ".", "format", "(", "betas", "[", "1", "]", ")", ")", "\n", "", "if", "not", "0.0", "<=", "weight_decay", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid weight_decay value: {}\"", ".", "format", "(", "weight_decay", ")", ")", "\n", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "weight_decay", "=", "weight_decay", ",", "\n", "bias_correction", "=", "bias_correction", ")", "\n", "super", "(", "Adamax", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.adamax.Adamax.supports_memory_efficient_fp16": [[87, 90], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "supports_memory_efficient_fp16", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.adamax.Adamax.supports_flat_params": [[91, 94], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "supports_flat_params", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.adamax.Adamax.step": [[91, 152], ["closure", "p.grad.data.float", "p.data.float", "exp_avg.mul_().add_", "torch.max", "torch.max", "torch.max", "torch.max", "p.data.float.addcdiv_", "p.data.copy_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "state[].type_as", "state[].type_as", "exp_inf.mul_", "p.grad.data.float.abs_", "p.data.float.add_", "exp_inf.add", "exp_avg.mul_"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.eval_lm.WordStat.add"], ["", "@", "property", "\n", "def", "supports_flat_params", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n", "", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", ".", "float", "(", ")", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'Adamax does not support sparse gradients'", ")", "\n", "\n", "", "p_data_fp32", "=", "p", ".", "data", ".", "float", "(", ")", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "# State initialization", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_inf'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "", "else", ":", "\n", "                    ", "state", "[", "'exp_avg'", "]", "=", "state", "[", "'exp_avg'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_inf'", "]", "=", "state", "[", "'exp_inf'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "\n", "", "exp_avg", ",", "exp_inf", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_inf'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "eps", "=", "group", "[", "'eps'", "]", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "# Update biased first moment estimate.", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "\n", "# Update the exponentially weighted infinity norm.", "\n", "torch", ".", "max", "(", "\n", "exp_inf", ".", "mul_", "(", "beta2", ")", ",", "\n", "grad", ".", "abs_", "(", ")", ",", "\n", "out", "=", "exp_inf", ",", "\n", ")", "\n", "\n", "step_size", "=", "group", "[", "'lr'", "]", "\n", "if", "group", "[", "'bias_correction'", "]", ":", "\n", "                    ", "bias_correction", "=", "1", "-", "beta1", "**", "state", "[", "'step'", "]", "\n", "step_size", "/=", "bias_correction", "\n", "\n", "", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "p_data_fp32", ".", "add_", "(", "-", "group", "[", "'weight_decay'", "]", "*", "group", "[", "'lr'", "]", ",", "p_data_fp32", ")", "\n", "\n", "", "p_data_fp32", ".", "addcdiv_", "(", "-", "step_size", ",", "exp_avg", ",", "exp_inf", ".", "add", "(", "eps", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.adagrad.Adagrad.__init__": [[13, 16], ["FairseqOptimizer.__init__", "torch.optim.Adagrad"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "params", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "self", ".", "_optimizer", "=", "torch", ".", "optim", ".", "Adagrad", "(", "params", ",", "**", "self", ".", "optimizer_config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.adagrad.Adagrad.add_args": [[17, 23], ["parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add optimizer-specific arguments to the parser.\"\"\"", "\n", "# fmt: off", "\n", "parser", ".", "add_argument", "(", "'--weight-decay'", ",", "'--wd'", ",", "default", "=", "0.0", ",", "type", "=", "float", ",", "metavar", "=", "'WD'", ",", "\n", "help", "=", "'weight decay'", ")", "\n", "# fmt: on", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.adagrad.Adagrad.optimizer_config": [[25, 36], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "optimizer_config", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return a kwarg dictionary that will be used to override optimizer\n        args stored in checkpoints. This allows us to load a checkpoint and\n        resume training using a different set of optimizer args, e.g., with a\n        different learning rate.\n        \"\"\"", "\n", "return", "{", "\n", "'lr'", ":", "self", ".", "args", ".", "lr", "[", "0", "]", ",", "\n", "'weight_decay'", ":", "self", ".", "args", ".", "weight_decay", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.adagrad.Adagrad.supports_flat_params": [[38, 41], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "supports_flat_params", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fairseq_optimizer.FairseqOptimizer.__init__": [[11, 14], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["class", "FairseqOptimizer", "(", "object", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fairseq_optimizer.FairseqOptimizer.add_args": [[15, 19], ["None"], "methods", ["None"], ["self", ".", "args", "=", "args", "\n", "\n", "", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add optimizer-specific arguments to the parser.\"\"\"", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fairseq_optimizer.FairseqOptimizer.optimizer": [[20, 28], ["hasattr", "isinstance", "ValueError"], "methods", ["None"], ["pass", "\n", "\n", "", "@", "property", "\n", "def", "optimizer", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return a torch.optim.optimizer.Optimizer instance.\"\"\"", "\n", "if", "not", "hasattr", "(", "self", ",", "'_optimizer'", ")", ":", "\n", "            ", "raise", "NotImplementedError", "\n", "", "if", "not", "isinstance", "(", "self", ".", "_optimizer", ",", "torch", ".", "optim", ".", "Optimizer", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'_optimizer must be an instance of torch.optim.Optimizer'", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fairseq_optimizer.FairseqOptimizer.optimizer_config": [[29, 38], ["None"], "methods", ["None"], ["", "return", "self", ".", "_optimizer", "\n", "\n", "", "@", "property", "\n", "def", "optimizer_config", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return a kwarg dictionary that will be used to override optimizer\n        args stored in checkpoints. This allows us to load a checkpoint and\n        resume training using a different set of optimizer args, e.g., with a\n        different learning rate.\n        \"\"\"", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fairseq_optimizer.FairseqOptimizer.params": [[39, 45], ["None"], "methods", ["None"], ["raise", "NotImplementedError", "\n", "\n", "", "@", "property", "\n", "def", "params", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return an iterable of the parameters held by the optimizer.\"\"\"", "\n", "for", "param_group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "param_group", "[", "'params'", "]", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fairseq_optimizer.FairseqOptimizer.__getstate__": [[46, 48], ["fairseq_optimizer.FairseqOptimizer._optimizer.__getstate__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fairseq_optimizer.FairseqOptimizer.__getstate__"], ["                ", "yield", "p", "\n", "\n", "", "", "", "def", "__getstate__", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fairseq_optimizer.FairseqOptimizer.get_lr": [[49, 52], ["None"], "methods", ["None"], ["        ", "return", "self", ".", "_optimizer", ".", "__getstate__", "(", ")", "\n", "\n", "", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the current learning rate.\"\"\"", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fairseq_optimizer.FairseqOptimizer.set_lr": [[53, 57], ["None"], "methods", ["None"], ["return", "self", ".", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "\n", "\n", "", "def", "set_lr", "(", "self", ",", "lr", ")", ":", "\n", "        ", "\"\"\"Set the learning rate.\"\"\"", "\n", "for", "param_group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fairseq_optimizer.FairseqOptimizer.state_dict": [[58, 61], ["fairseq_optimizer.FairseqOptimizer.optimizer.state_dict"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.state_dict"], ["            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n", "", "", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the optimizer's state dict.\"\"\"", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fairseq_optimizer.FairseqOptimizer.load_state_dict": [[62, 76], ["fairseq_optimizer.FairseqOptimizer.optimizer.load_state_dict", "len", "group.update"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.load_state_dict", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.update"], ["return", "self", ".", "optimizer", ".", "state_dict", "(", ")", "\n", "\n", "", "def", "load_state_dict", "(", "self", ",", "state_dict", ",", "optimizer_overrides", "=", "None", ")", ":", "\n", "        ", "\"\"\"Load an optimizer state dict.\n\n        In general we should prefer the configuration of the existing optimizer\n        instance (e.g., learning rate) over that found in the state_dict. This\n        allows us to resume training from a checkpoint using a new set of\n        optimizer args.\n        \"\"\"", "\n", "self", ".", "optimizer", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "if", "optimizer_overrides", "is", "not", "None", "and", "len", "(", "optimizer_overrides", ")", ">", "0", ":", "\n", "# override learning rate, momentum, etc. with latest values", "\n", "            ", "for", "group", "in", "self", ".", "optimizer", ".", "param_groups", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fairseq_optimizer.FairseqOptimizer.backward": [[77, 80], ["loss.backward"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.dynamicconvFunction.backward"], ["                ", "group", ".", "update", "(", "optimizer_overrides", ")", "\n", "\n", "", "", "", "def", "backward", "(", "self", ",", "loss", ")", ":", "\n", "        ", "\"\"\"Computes the sum of gradients of the given tensor w.r.t. graph leaves.\"\"\"", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fairseq_optimizer.FairseqOptimizer.multiply_grads": [[81, 86], ["p.grad.data.mul_"], "methods", ["None"], ["loss", ".", "backward", "(", ")", "\n", "\n", "", "def", "multiply_grads", "(", "self", ",", "c", ")", ":", "\n", "        ", "\"\"\"Multiplies grads by a constant *c*.\"\"\"", "\n", "for", "p", "in", "self", ".", "params", ":", "\n", "            ", "if", "p", ".", "grad", "is", "not", "None", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fairseq_optimizer.FairseqOptimizer.clip_grad_norm": [[87, 93], ["torch.nn.utils.clip_grad_norm_", "torch.sqrt", "sum", "p.grad.data.norm"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.clip_grad_norm_"], ["                ", "p", ".", "grad", ".", "data", ".", "mul_", "(", "c", ")", "\n", "\n", "", "", "", "def", "clip_grad_norm", "(", "self", ",", "max_norm", ")", ":", "\n", "        ", "\"\"\"Clips gradient norm.\"\"\"", "\n", "return", "utils", ".", "clip_grad_norm_", "(", "self", ".", "params", ",", "max_norm", ")", "\n", "\n", "", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fairseq_optimizer.FairseqOptimizer.step": [[94, 97], ["fairseq_optimizer.FairseqOptimizer.optimizer.step"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.polynomial_decay_schedule.PolynomialDecaySchedule.step"], ["        ", "\"\"\"Performs a single optimization step.\"\"\"", "\n", "self", ".", "optimizer", ".", "step", "(", "closure", ")", "\n", "\n", "", "def", "zero_grad", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fairseq_optimizer.FairseqOptimizer.zero_grad": [[98, 103], ["fairseq_optimizer.FairseqOptimizer.optimizer.zero_grad"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer._MemoryEfficientFP16OptimizerMixin.zero_grad"], ["        ", "\"\"\"Clears the gradients of all optimized parameters.\"\"\"", "\n", "for", "p", "in", "self", ".", "params", ":", "\n", "            ", "p", ".", "grad", "=", "None", "\n", "", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fairseq_optimizer.FairseqOptimizer.supports_memory_efficient_fp16": [[104, 109], ["hasattr"], "methods", ["None"], ["def", "supports_memory_efficient_fp16", "(", "self", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ".", "optimizer", ",", "'supports_memory_efficient_fp16'", ")", ":", "\n", "            ", "return", "self", ".", "optimizer", ".", "supports_memory_efficient_fp16", "\n", "", "return", "False", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fairseq_optimizer.FairseqOptimizer.supports_flat_params": [[109, 118], ["hasattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "supports_flat_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Whether the optimizer supports collapsing of the model\n        parameters/gradients into a single contiguous Tensor.\n        \"\"\"", "\n", "if", "hasattr", "(", "self", ".", "optimizer", ",", "'supports_flat_params'", ")", ":", "\n", "            ", "return", "self", ".", "optimizer", ".", "supports_flat_params", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fairseq_optimizer.FairseqOptimizer.average_params": [[110, 112], ["None"], "methods", ["None"], ["def", "supports_flat_params", "(", "self", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.adadelta.Adadelta.__init__": [[13, 16], ["FairseqOptimizer.__init__", "torch.optim.Adadelta"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "params", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "self", ".", "_optimizer", "=", "torch", ".", "optim", ".", "Adadelta", "(", "params", ",", "**", "self", ".", "optimizer_config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.adadelta.Adadelta.add_args": [[17, 28], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add optimizer-specific arguments to the parser.\"\"\"", "\n", "# fmt: off", "\n", "parser", ".", "add_argument", "(", "'--adadelta-rho'", ",", "type", "=", "float", ",", "default", "=", "0.9", ",", "metavar", "=", "'RHO'", ",", "\n", "help", "=", "'coefficient used for computing a running average of squared gradients'", ")", "\n", "parser", ".", "add_argument", "(", "'--adadelta-eps'", ",", "type", "=", "float", ",", "default", "=", "1e-6", ",", "metavar", "=", "'EPS'", ",", "\n", "help", "=", "'term added to the denominator to improve numerical stability'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight-decay'", ",", "'--wd'", ",", "default", "=", "0.0", ",", "type", "=", "float", ",", "metavar", "=", "'WD'", ",", "\n", "help", "=", "'weight decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--anneal-eps'", ",", "action", "=", "'store_true'", ",", "help", "=", "'flag to anneal eps'", ")", "\n", "# fmt: on", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.adadelta.Adadelta.optimizer_config": [[30, 43], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "optimizer_config", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return a kwarg dictionary that will be used to override optimizer\n        args stored in checkpoints. This allows us to load a checkpoint and\n        resume training using a different set of optimizer args, e.g., with a\n        different learning rate.\n        \"\"\"", "\n", "return", "{", "\n", "'lr'", ":", "self", ".", "args", ".", "lr", "[", "0", "]", ",", "\n", "'rho'", ":", "self", ".", "args", ".", "adadelta_rho", ",", "\n", "'eps'", ":", "self", ".", "args", ".", "adadelta_eps", ",", "\n", "'weight_decay'", ":", "self", ".", "args", ".", "weight_decay", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.adadelta.Adadelta.supports_flat_params": [[45, 48], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "supports_flat_params", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.bmuf.FairseqBMUF.__init__": [[22, 35], ["FairseqOptimizer.__init__", "bmuf.FairseqBMUF._reset_local_data", "bmuf.FairseqBMUF._optimizer.state_dict"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.bmuf.FairseqBMUF._reset_local_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.state_dict"], ["def", "__init__", "(", "self", ",", "args", ",", "optimizer", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "self", ".", "_optimizer", "=", "optimizer", "\n", "self", ".", "_num_updates", "=", "0", "\n", "self", ".", "sync_iter", "=", "self", ".", "args", ".", "global_sync_iter", "\n", "self", ".", "block_momentum", "=", "self", ".", "args", ".", "block_momentum", "\n", "self", ".", "block_lr", "=", "self", ".", "args", ".", "block_lr", "\n", "self", ".", "_reset_local_data", "(", ")", "\n", "self", ".", "warmup_iteration", "=", "self", ".", "args", ".", "warmup_iterations", "\n", "self", ".", "use_nbm", "=", "self", ".", "args", ".", "use_nbm", "\n", "self", ".", "initial_state", "=", "self", ".", "_optimizer", ".", "state_dict", "(", ")", "\n", "self", ".", "average_sync", "=", "self", ".", "args", ".", "average_sync", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.bmuf.FairseqBMUF.add_args": [[36, 71], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add optimizer-specific arguments to the parser.\"\"\"", "\n", "parser", ".", "add_argument", "(", "\n", "\"--block-lr\"", ",", "default", "=", "1", ",", "type", "=", "float", ",", "help", "=", "\"block learning rate for bmuf\"", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--block-momentum\"", ",", "\n", "default", "=", "0.875", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"block momentum for bmuf\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--global-sync-iter\"", ",", "\n", "default", "=", "50", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"Iteration for syncing global model\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--warmup-iterations\"", ",", "\n", "default", "=", "500", ",", "\n", "type", "=", "int", ",", "\n", "help", "=", "\"warmup iterations for model to broadcast\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--use-nbm\"", ",", "\n", "default", "=", "False", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Specify whether you want to use classical BM / Nesterov BM\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--average-sync\"", ",", "\n", "default", "=", "False", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"Specify whether you want to average the local momentum after each sync\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.bmuf.FairseqBMUF.optimizer": [[73, 76], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "optimizer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_optimizer", ".", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.bmuf.FairseqBMUF.optimizer_config": [[77, 80], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "optimizer_config", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_optimizer", ".", "optimizer_config", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.bmuf.FairseqBMUF.get_lr": [[81, 83], ["bmuf.FairseqBMUF._optimizer.get_lr"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.get_lr"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_optimizer", ".", "get_lr", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.bmuf.FairseqBMUF.set_lr": [[84, 86], ["bmuf.FairseqBMUF._optimizer.set_lr"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.set_lr"], ["", "def", "set_lr", "(", "self", ",", "lr", ")", ":", "\n", "        ", "self", ".", "_optimizer", ".", "set_lr", "(", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.bmuf.FairseqBMUF.state_dict": [[87, 89], ["bmuf.FairseqBMUF._optimizer.state_dict"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.state_dict"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_optimizer", ".", "state_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.bmuf.FairseqBMUF.load_state_dict": [[90, 93], ["bmuf.FairseqBMUF._optimizer.load_state_dict", "bmuf.FairseqBMUF._optimizer.state_dict"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.load_state_dict", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ",", "optimizer_overrides", "=", "None", ")", ":", "\n", "        ", "self", ".", "_optimizer", ".", "load_state_dict", "(", "state_dict", ",", "optimizer_overrides", ")", "\n", "self", ".", "initial_state", "=", "self", ".", "_optimizer", ".", "state_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.bmuf.FairseqBMUF.multiply_grads": [[94, 97], ["bmuf.FairseqBMUF._optimizer.multiply_grads"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer._MemoryEfficientFP16OptimizerMixin.multiply_grads"], ["", "def", "multiply_grads", "(", "self", ",", "c", ")", ":", "\n", "        ", "\"\"\"Multiplies grads by a constant *c*.\"\"\"", "\n", "self", ".", "_optimizer", ".", "multiply_grads", "(", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.bmuf.FairseqBMUF.clip_grad_norm": [[98, 101], ["bmuf.FairseqBMUF._optimizer.clip_grad_norm"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer._MemoryEfficientFP16OptimizerMixin.clip_grad_norm"], ["", "def", "clip_grad_norm", "(", "self", ",", "max_norm", ")", ":", "\n", "        ", "\"\"\"Clips gradient norm.\"\"\"", "\n", "return", "self", ".", "_optimizer", ".", "clip_grad_norm", "(", "max_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.bmuf.FairseqBMUF.average_params": [[102, 104], ["bmuf.FairseqBMUF._optimizer.average_params"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.adam.FairseqAdam.average_params"], ["", "def", "average_params", "(", "self", ")", ":", "\n", "        ", "self", ".", "_optimizer", ".", "average_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.bmuf.FairseqBMUF._block_sync": [[105, 122], ["bmuf.FairseqBMUF._avg_grad_from_all_gpus", "bmuf.FairseqBMUF._calc_grad", "bmuf.FairseqBMUF._update_global_model", "bmuf.FairseqBMUF.average_params"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.bmuf.FairseqBMUF._avg_grad_from_all_gpus", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.bmuf.FairseqBMUF._calc_grad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.bmuf.FairseqBMUF._update_global_model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.adam.FairseqAdam.average_params"], ["", "def", "_block_sync", "(", "self", ")", ":", "\n", "# Update the global model using local models from all GPUs", "\n", "# (Step-1) Calculate grad between previously synced model and", "\n", "# currrent local model", "\n", "        ", "if", "self", ".", "block_momentum", "!=", "0", ":", "\n", "            ", "self", ".", "_calc_grad", "(", ")", "\n", "\n", "# (Step-2) Average gradient from all GPUs", "\n", "", "self", ".", "_avg_grad_from_all_gpus", "(", ")", "\n", "\n", "# (Step-3) Calculate global momentum and update the global model", "\n", "if", "self", ".", "block_momentum", "!=", "0", ":", "\n", "            ", "self", ".", "_update_global_model", "(", ")", "\n", "\n", "# (Step-4) Average local optimizer params", "\n", "", "if", "self", ".", "average_sync", ":", "\n", "            ", "self", ".", "average_params", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.bmuf.FairseqBMUF._is_warmup_end": [[123, 128], ["bmuf.FairseqBMUF.get_num_updates"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.bmuf.FairseqBMUF.get_num_updates"], ["", "", "def", "_is_warmup_end", "(", "self", ")", ":", "\n", "# Check whether train iterations is equal to warmup iter", "\n", "        ", "if", "self", ".", "get_num_updates", "(", ")", "==", "self", ".", "warmup_iteration", ":", "\n", "            ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.bmuf.FairseqBMUF._is_bmuf_iter": [[129, 136], ["bmuf.FairseqBMUF.get_num_updates", "bmuf.FairseqBMUF.get_num_updates"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.bmuf.FairseqBMUF.get_num_updates", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.bmuf.FairseqBMUF.get_num_updates"], ["", "def", "_is_bmuf_iter", "(", "self", ")", ":", "\n", "# Check whether train iterations is equal to bmuf sync iter", "\n", "        ", "if", "(", "self", ".", "get_num_updates", "(", ")", ">", "self", ".", "warmup_iteration", ")", "and", "(", "\n", "self", ".", "get_num_updates", "(", ")", "%", "self", ".", "sync_iter", "==", "0", "\n", ")", ":", "\n", "            ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.bmuf.FairseqBMUF._warmup_sync": [[137, 149], ["bmuf.FairseqBMUF._reset_local_data", "torch.broadcast", "torch.broadcast", "bmuf.FairseqBMUF._optimizer.average_params", "bmuf.FairseqBMUF._optimizer.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.bmuf.FairseqBMUF._reset_local_data", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.adam.FairseqAdam.average_params", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.load_state_dict"], ["", "def", "_warmup_sync", "(", "self", ",", "root_rank", "=", "0", ")", ":", "\n", "# Broadcast the local model to all gpus", "\n", "        ", "for", "param", "in", "self", ".", "params", ":", "\n", "            ", "dist", ".", "broadcast", "(", "param", ".", "data", ",", "src", "=", "root_rank", ")", "\n", "\n", "# Update local optimizer state", "\n", "", "if", "self", ".", "average_sync", ":", "\n", "            ", "self", ".", "_optimizer", ".", "average_params", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_optimizer", ".", "load_state_dict", "(", "self", ".", "initial_state", ")", "\n", "\n", "", "self", ".", "_reset_local_data", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.bmuf.FairseqBMUF.step": [[150, 158], ["bmuf.FairseqBMUF._optimizer.step", "bmuf.FairseqBMUF.set_num_updates", "bmuf.FairseqBMUF._is_warmup_end", "bmuf.FairseqBMUF._warmup_sync", "bmuf.FairseqBMUF._is_bmuf_iter", "bmuf.FairseqBMUF.get_num_updates", "bmuf.FairseqBMUF._block_sync"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.polynomial_decay_schedule.PolynomialDecaySchedule.step", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.bmuf.FairseqBMUF.set_num_updates", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.bmuf.FairseqBMUF._is_warmup_end", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.bmuf.FairseqBMUF._warmup_sync", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.bmuf.FairseqBMUF._is_bmuf_iter", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.bmuf.FairseqBMUF.get_num_updates", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.bmuf.FairseqBMUF._block_sync"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\"\"\"", "\n", "self", ".", "_optimizer", ".", "step", "(", "closure", ")", "\n", "self", ".", "set_num_updates", "(", "self", ".", "get_num_updates", "(", ")", "+", "1", ")", "\n", "if", "self", ".", "_is_warmup_end", "(", ")", ":", "\n", "            ", "self", ".", "_warmup_sync", "(", ")", "\n", "", "elif", "self", ".", "_is_bmuf_iter", "(", ")", ":", "\n", "            ", "self", ".", "_block_sync", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.bmuf.FairseqBMUF.zero_grad": [[159, 162], ["bmuf.FairseqBMUF._optimizer.zero_grad"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer._MemoryEfficientFP16OptimizerMixin.zero_grad"], ["", "", "def", "zero_grad", "(", "self", ")", ":", "\n", "        ", "\"\"\"Clears the gradients of all optimized parameters.\"\"\"", "\n", "self", ".", "_optimizer", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.bmuf.FairseqBMUF.get_num_updates": [[163, 166], ["None"], "methods", ["None"], ["", "def", "get_num_updates", "(", "self", ")", ":", "\n", "        ", "\"\"\"Get the number of parameters updates.\"\"\"", "\n", "return", "self", ".", "_num_updates", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.bmuf.FairseqBMUF.set_num_updates": [[167, 170], ["None"], "methods", ["None"], ["", "def", "set_num_updates", "(", "self", ",", "num_updates", ")", ":", "\n", "        ", "\"\"\"Set the number of parameters updates.\"\"\"", "\n", "self", ".", "_num_updates", "=", "num_updates", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.bmuf.FairseqBMUF._reset_local_data": [[171, 181], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "zip", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "p.data.new_zeros", "p.data.new_zeros", "global_param.copy_", "p.data.size", "p.data.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_reset_local_data", "(", "self", ")", ":", "\n", "# (Step-0) Initialize global momentum parameters and store global copy on each gpu", "\n", "        ", "self", ".", "global_params", "=", "[", "torch", ".", "zeros_like", "(", "p", ".", "data", ")", "for", "p", "in", "self", ".", "params", "]", "\n", "self", ".", "smoothed_grads", "=", "[", "p", ".", "data", ".", "new_zeros", "(", "p", ".", "data", ".", "size", "(", ")", ")", "for", "p", "in", "self", ".", "params", "]", "\n", "self", ".", "grads", "=", "[", "p", ".", "data", ".", "new_zeros", "(", "p", ".", "data", ".", "size", "(", ")", ")", "for", "p", "in", "self", ".", "params", "]", "\n", "\n", "# saving the global model locally for calculating gradient during bmuf sync", "\n", "for", "param", ",", "global_param", "in", "zip", "(", "self", ".", "params", ",", "self", ".", "global_params", ")", ":", "\n", "            ", "global_param", ".", "copy_", "(", "param", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.bmuf.FairseqBMUF._calc_grad": [[182, 192], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "zip"], "methods", ["None"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_calc_grad", "(", "self", ")", ":", "\n", "# global_params is basically the global copy from the previously finished", "\n", "# synchronisation. param.data is local parameter after block_sync_freq", "\n", "# for the local gpu. so grad is difference between previously synced", "\n", "# model and currrent local model.", "\n", "        ", "for", "index", ",", "(", "param", ",", "global_param", ")", "in", "enumerate", "(", "\n", "zip", "(", "self", ".", "params", ",", "self", ".", "global_params", ")", "\n", ")", ":", "\n", "            ", "self", ".", "grads", "[", "index", "]", "=", "global_param", "-", "param", ".", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.bmuf.FairseqBMUF._avg_grad_from_all_gpus": [[193, 198], ["enumerate", "float", "torch.all_reduce", "torch.all_reduce", "torch.get_world_size", "torch.get_world_size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.distributed_utils.all_reduce", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.distributed_utils.all_reduce", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.distributed_utils.get_world_size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.distributed_utils.get_world_size"], ["", "", "def", "_avg_grad_from_all_gpus", "(", "self", ")", ":", "\n", "        ", "for", "index", ",", "param", "in", "enumerate", "(", "self", ".", "params", ")", ":", "\n", "            ", "sync_para", "=", "param", ".", "data", "if", "self", ".", "block_momentum", "==", "0", "else", "self", ".", "grads", "[", "index", "]", "\n", "sync_para", "/=", "float", "(", "dist", ".", "get_world_size", "(", ")", ")", "\n", "dist", ".", "all_reduce", "(", "sync_para", ",", "op", "=", "dist", ".", "ReduceOp", ".", "SUM", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.bmuf.FairseqBMUF._update_global_model": [[199, 226], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "zip", "param.data.copy_", "global_param.copy_", "param.data.copy_"], "methods", ["None"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "_update_global_model", "(", "self", ")", ":", "\n", "        ", "for", "index", ",", "(", "param", ",", "global_param", ",", "smoothed_grad", ",", "grad", ")", "in", "enumerate", "(", "\n", "zip", "(", "\n", "self", ".", "params", ",", "\n", "self", ".", "global_params", ",", "\n", "self", ".", "smoothed_grads", ",", "\n", "# all gpus would share the same value of smoothed_grad, since it is", "\n", "# always computed on synchronized gradients.", "\n", "self", ".", "grads", ",", "\n", ")", "\n", ")", ":", "\n", "# global_param is basically last syncrhornized parameter. though", "\n", "# smoothed_grad is local, all processes will have same value of", "\n", "# smoothed_grad and hence param is globally synchronized copy.", "\n", "# smoothed_grad(t) = BM * smoothed_grad(t-1) + BM_lr * grad(t)", "\n", "            ", "smoothed_grad", "=", "self", ".", "block_momentum", "*", "smoothed_grad", "+", "self", ".", "block_lr", "*", "grad", "\n", "param", ".", "data", ".", "copy_", "(", "global_param", "-", "smoothed_grad", ")", "\n", "\n", "# A Nesterov momentum here is to do a partial weight update before", "\n", "# calculating the gradient", "\n", "if", "self", ".", "use_nbm", ":", "\n", "                ", "param", ".", "data", ".", "copy_", "(", "param", ".", "data", "-", "self", ".", "block_momentum", "*", "smoothed_grad", ")", "\n", "\n", "# backup for the next synchronization.", "\n", "", "self", ".", "smoothed_grads", "[", "index", "]", "=", "smoothed_grad", "\n", "global_param", ".", "copy_", "(", "param", ".", "data", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.DynamicLossScaler.__init__": [[15, 28], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "\n", "self", ",", "init_scale", "=", "2.", "**", "15", ",", "scale_factor", "=", "2.", ",", "scale_window", "=", "2000", ",", "\n", "tolerance", "=", "0.05", ",", "threshold", "=", "None", ",", "\n", ")", ":", "\n", "        ", "self", ".", "loss_scale", "=", "init_scale", "\n", "self", ".", "scale_factor", "=", "scale_factor", "\n", "self", ".", "scale_window", "=", "scale_window", "\n", "self", ".", "tolerance", "=", "tolerance", "\n", "self", ".", "threshold", "=", "threshold", "\n", "self", ".", "_iter", "=", "0", "\n", "self", ".", "_last_overflow_iter", "=", "-", "1", "\n", "self", ".", "_last_rescale_iter", "=", "-", "1", "\n", "self", ".", "_overflows_since_rescale", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.DynamicLossScaler.update_scale": [[29, 43], ["float", "fp16_optimizer.DynamicLossScaler._decrease_loss_scale"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.DynamicLossScaler._decrease_loss_scale"], ["", "def", "update_scale", "(", "self", ",", "overflow", ")", ":", "\n", "        ", "iter_since_rescale", "=", "self", ".", "_iter", "-", "self", ".", "_last_rescale_iter", "\n", "if", "overflow", ":", "\n", "            ", "self", ".", "_last_overflow_iter", "=", "self", ".", "_iter", "\n", "self", ".", "_overflows_since_rescale", "+=", "1", "\n", "pct_overflow", "=", "self", ".", "_overflows_since_rescale", "/", "float", "(", "iter_since_rescale", ")", "\n", "if", "pct_overflow", ">=", "self", ".", "tolerance", ":", "\n", "                ", "self", ".", "_decrease_loss_scale", "(", ")", "\n", "self", ".", "_last_rescale_iter", "=", "self", ".", "_iter", "\n", "self", ".", "_overflows_since_rescale", "=", "0", "\n", "", "", "elif", "(", "self", ".", "_iter", "-", "self", ".", "_last_overflow_iter", ")", "%", "self", ".", "scale_window", "==", "0", ":", "\n", "            ", "self", ".", "loss_scale", "*=", "self", ".", "scale_factor", "\n", "self", ".", "_last_rescale_iter", "=", "self", ".", "_iter", "\n", "", "self", ".", "_iter", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.DynamicLossScaler._decrease_loss_scale": [[44, 48], ["max"], "methods", ["None"], ["", "def", "_decrease_loss_scale", "(", "self", ")", ":", "\n", "        ", "self", ".", "loss_scale", "/=", "self", ".", "scale_factor", "\n", "if", "self", ".", "threshold", "is", "not", "None", ":", "\n", "            ", "self", ".", "loss_scale", "=", "max", "(", "self", ".", "loss_scale", ",", "self", ".", "threshold", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.DynamicLossScaler.has_overflow": [[49, 55], ["float"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "has_overflow", "(", "grad_norm", ")", ":", "\n", "# detect inf and nan", "\n", "        ", "if", "grad_norm", "==", "float", "(", "'inf'", ")", "or", "grad_norm", "!=", "grad_norm", ":", "\n", "            ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer._FP16OptimizerMixin.__init__": [[59, 62], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "# forward __init__ call to the next class in mro(method resolution order)", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer._FP16OptimizerMixin.has_flat_params": [[63, 66], ["torch.is_tensor"], "methods", ["None"], ["", "@", "property", "\n", "def", "has_flat_params", "(", "self", ")", ":", "\n", "        ", "return", "torch", ".", "is_tensor", "(", "self", ".", "fp32_params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer._FP16OptimizerMixin.build_fp32_params": [[67, 88], ["sum", "torch.zeros", "torch.nn.Parameter", "torch.nn.Parameter.data.new", "p.data.numel", "fp32_params[].copy_", "torch.nn.Parameter", "torch.zeros_like", "torch.nn.Parameter.append", "p.data.numel", "p.data.view", "p.data.float"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "build_fp32_params", "(", "cls", ",", "params", ",", "flatten", "=", "True", ")", ":", "\n", "# create FP32 copy of parameters and grads", "\n", "        ", "if", "flatten", ":", "\n", "            ", "total_param_size", "=", "sum", "(", "p", ".", "data", ".", "numel", "(", ")", "for", "p", "in", "params", ")", "\n", "fp32_params", "=", "torch", ".", "zeros", "(", "total_param_size", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "params", "[", "0", "]", ".", "device", ")", "\n", "offset", "=", "0", "\n", "for", "p", "in", "params", ":", "\n", "                ", "numel", "=", "p", ".", "data", ".", "numel", "(", ")", "\n", "fp32_params", "[", "offset", ":", "offset", "+", "numel", "]", ".", "copy_", "(", "p", ".", "data", ".", "view", "(", "-", "1", ")", ")", "\n", "offset", "+=", "numel", "\n", "", "fp32_params", "=", "torch", ".", "nn", ".", "Parameter", "(", "fp32_params", ")", "\n", "fp32_params", ".", "grad", "=", "fp32_params", ".", "data", ".", "new", "(", "total_param_size", ")", "\n", "return", "fp32_params", "\n", "", "else", ":", "\n", "            ", "fp32_params", "=", "[", "]", "\n", "for", "p", "in", "params", ":", "\n", "                ", "p32", "=", "torch", ".", "nn", ".", "Parameter", "(", "p", ".", "data", ".", "float", "(", ")", ")", "\n", "p32", ".", "grad", "=", "torch", ".", "zeros_like", "(", "p32", ".", "data", ")", "\n", "fp32_params", ".", "append", "(", "p32", ")", "\n", "", "return", "fp32_params", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer._FP16OptimizerMixin.state_dict": [[89, 94], ["fp16_optimizer._FP16OptimizerMixin.fp32_optimizer.state_dict"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.state_dict"], ["", "", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the optimizer's state dict.\"\"\"", "\n", "state_dict", "=", "self", ".", "fp32_optimizer", ".", "state_dict", "(", ")", "\n", "state_dict", "[", "'loss_scale'", "]", "=", "self", ".", "scaler", ".", "loss_scale", "\n", "return", "state_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer._FP16OptimizerMixin.load_state_dict": [[95, 106], ["fp16_optimizer._FP16OptimizerMixin.fp32_optimizer.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ",", "optimizer_overrides", "=", "None", ")", ":", "\n", "        ", "\"\"\"Load an optimizer state dict.\n\n        In general we should prefer the configuration of the existing optimizer\n        instance (e.g., learning rate) over that found in the state_dict. This\n        allows us to resume training from a checkpoint using a new set of\n        optimizer args.\n        \"\"\"", "\n", "if", "'loss_scale'", "in", "state_dict", ":", "\n", "            ", "self", ".", "scaler", ".", "loss_scale", "=", "state_dict", "[", "'loss_scale'", "]", "\n", "", "self", ".", "fp32_optimizer", ".", "load_state_dict", "(", "state_dict", ",", "optimizer_overrides", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer._FP16OptimizerMixin.backward": [[107, 117], ["loss.backward"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.dynamicconvFunction.backward"], ["", "def", "backward", "(", "self", ",", "loss", ")", ":", "\n", "        ", "\"\"\"Computes the sum of gradients of the given tensor w.r.t. graph leaves.\n\n        Compared to :func:`fairseq.optim.FairseqOptimizer.backward`, this\n        function additionally dynamically scales the loss to avoid gradient\n        underflow.\n        \"\"\"", "\n", "loss", "=", "loss", "*", "self", ".", "scaler", ".", "loss_scale", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "_needs_sync", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer._FP16OptimizerMixin._sync_fp16_grads_to_fp32": [[118, 145], ["fp16_optimizer._FP16OptimizerMixin.fp32_params.grad.data.mul_", "zip", "grad_data.numel", "fp16_optimizer._FP16OptimizerMixin.fp32_params.grad.data[].copy_", "p.data.new_zeros", "grad_data.view", "p32.grad.data.copy_", "p32.grad.data.mul_", "torch.zeros_like"], "methods", ["None"], ["", "def", "_sync_fp16_grads_to_fp32", "(", "self", ",", "multiply_grads", "=", "1.", ")", ":", "\n", "        ", "if", "self", ".", "_needs_sync", ":", "\n", "# correct for dynamic loss scaler", "\n", "            ", "multiply_grads", "/=", "self", ".", "scaler", ".", "loss_scale", "\n", "\n", "# copy FP16 grads to FP32", "\n", "if", "self", ".", "has_flat_params", ":", "\n", "                ", "offset", "=", "0", "\n", "for", "p", "in", "self", ".", "fp16_params", ":", "\n", "                    ", "if", "not", "p", ".", "requires_grad", ":", "\n", "                        ", "continue", "\n", "", "grad_data", "=", "p", ".", "grad", ".", "data", "if", "p", ".", "grad", "is", "not", "None", "else", "p", ".", "data", ".", "new_zeros", "(", "p", ".", "data", ".", "shape", ")", "\n", "numel", "=", "grad_data", ".", "numel", "(", ")", "\n", "self", ".", "fp32_params", ".", "grad", ".", "data", "[", "offset", ":", "offset", "+", "numel", "]", ".", "copy_", "(", "grad_data", ".", "view", "(", "-", "1", ")", ")", "\n", "offset", "+=", "numel", "\n", "", "self", ".", "fp32_params", ".", "grad", ".", "data", ".", "mul_", "(", "multiply_grads", ")", "\n", "", "else", ":", "\n", "                ", "for", "p", ",", "p32", "in", "zip", "(", "self", ".", "fp16_params", ",", "self", ".", "fp32_params", ")", ":", "\n", "                    ", "if", "not", "p", ".", "requires_grad", ":", "\n", "                        ", "continue", "\n", "", "if", "p", ".", "grad", "is", "not", "None", ":", "\n", "                        ", "p32", ".", "grad", ".", "data", ".", "copy_", "(", "p", ".", "grad", ".", "data", ")", "\n", "p32", ".", "grad", ".", "data", ".", "mul_", "(", "multiply_grads", ")", "\n", "", "else", ":", "\n", "                        ", "p32", ".", "grad", "=", "torch", ".", "zeros_like", "(", "p", ".", "data", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "\n", "", "", "", "self", ".", "_needs_sync", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer._FP16OptimizerMixin.multiply_grads": [[146, 155], ["fp16_optimizer._FP16OptimizerMixin._sync_fp16_grads_to_fp32", "fp16_optimizer._FP16OptimizerMixin.fp32_params.grad.data.mul_", "p32.grad.data.mul_"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer._FP16OptimizerMixin._sync_fp16_grads_to_fp32"], ["", "", "def", "multiply_grads", "(", "self", ",", "c", ")", ":", "\n", "        ", "\"\"\"Multiplies grads by a constant ``c``.\"\"\"", "\n", "if", "self", ".", "_needs_sync", ":", "\n", "            ", "self", ".", "_sync_fp16_grads_to_fp32", "(", "c", ")", "\n", "", "elif", "self", ".", "has_flat_params", ":", "\n", "            ", "self", ".", "fp32_params", ".", "grad", ".", "data", ".", "mul_", "(", "c", ")", "\n", "", "else", ":", "\n", "            ", "for", "p32", "in", "self", ".", "fp32_params", ":", "\n", "                ", "p32", ".", "grad", ".", "data", ".", "mul_", "(", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer._FP16OptimizerMixin.clip_grad_norm": [[156, 178], ["fp16_optimizer._FP16OptimizerMixin._sync_fp16_grads_to_fp32", "fp16_optimizer.DynamicLossScaler.has_overflow", "fp16_optimizer._FP16OptimizerMixin.scaler.update_scale", "fairseq.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "OverflowError", "FloatingPointError", "str"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer._FP16OptimizerMixin._sync_fp16_grads_to_fp32", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.DynamicLossScaler.has_overflow", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.DynamicLossScaler.update_scale", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.clip_grad_norm_", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.clip_grad_norm_"], ["", "", "", "def", "clip_grad_norm", "(", "self", ",", "max_norm", ")", ":", "\n", "        ", "\"\"\"Clips gradient norm and updates dynamic loss scaler.\"\"\"", "\n", "self", ".", "_sync_fp16_grads_to_fp32", "(", ")", "\n", "if", "self", ".", "has_flat_params", ":", "\n", "            ", "grad_norm", "=", "utils", ".", "clip_grad_norm_", "(", "[", "self", ".", "fp32_params", ".", "grad", ".", "data", "]", ",", "max_norm", ")", "\n", "", "else", ":", "\n", "            ", "grad_norm", "=", "utils", ".", "clip_grad_norm_", "(", "self", ".", "fp32_params", ",", "max_norm", ")", "\n", "\n", "# detect overflow and adjust loss scale", "\n", "", "overflow", "=", "DynamicLossScaler", ".", "has_overflow", "(", "grad_norm", ")", "\n", "self", ".", "scaler", ".", "update_scale", "(", "overflow", ")", "\n", "if", "overflow", ":", "\n", "            ", "if", "self", ".", "scaler", ".", "loss_scale", "<=", "self", ".", "min_loss_scale", ":", "\n", "# Use FloatingPointError as an uncommon error that parent", "\n", "# functions can safely catch to stop training.", "\n", "                ", "raise", "FloatingPointError", "(", "(", "\n", "'Minimum loss scale reached ({}). Your loss is probably exploding. '", "\n", "'Try lowering the learning rate, using gradient clipping or '", "\n", "'increasing the batch size.'", "\n", ")", ".", "format", "(", "self", ".", "min_loss_scale", ")", ")", "\n", "", "raise", "OverflowError", "(", "'setting loss scale to: '", "+", "str", "(", "self", ".", "scaler", ".", "loss_scale", ")", ")", "\n", "", "return", "grad_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer._FP16OptimizerMixin.step": [[179, 198], ["fp16_optimizer._FP16OptimizerMixin._sync_fp16_grads_to_fp32", "fp16_optimizer._FP16OptimizerMixin.fp32_optimizer.step", "zip", "p.data.numel", "p.data.copy_", "p.data.copy_", "fp16_optimizer._FP16OptimizerMixin.fp32_params.data[].view_as"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer._FP16OptimizerMixin._sync_fp16_grads_to_fp32", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.polynomial_decay_schedule.PolynomialDecaySchedule.step"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\"\"\"", "\n", "self", ".", "_sync_fp16_grads_to_fp32", "(", ")", "\n", "self", ".", "fp32_optimizer", ".", "step", "(", "closure", ")", "\n", "\n", "# copy FP32 params back into FP16 model", "\n", "if", "self", ".", "has_flat_params", ":", "\n", "            ", "offset", "=", "0", "\n", "for", "p", "in", "self", ".", "fp16_params", ":", "\n", "                ", "if", "not", "p", ".", "requires_grad", ":", "\n", "                    ", "continue", "\n", "", "numel", "=", "p", ".", "data", ".", "numel", "(", ")", "\n", "p", ".", "data", ".", "copy_", "(", "self", ".", "fp32_params", ".", "data", "[", "offset", ":", "offset", "+", "numel", "]", ".", "view_as", "(", "p", ".", "data", ")", ")", "\n", "offset", "+=", "numel", "\n", "", "", "else", ":", "\n", "            ", "for", "p", ",", "p32", "in", "zip", "(", "self", ".", "fp16_params", ",", "self", ".", "fp32_params", ")", ":", "\n", "                ", "if", "not", "p", ".", "requires_grad", ":", "\n", "                    ", "continue", "\n", "", "p", ".", "data", ".", "copy_", "(", "p32", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer._FP16OptimizerMixin.zero_grad": [[199, 209], ["fp16_optimizer._FP16OptimizerMixin.fp32_params.grad.zero_", "p32.grad.zero_"], "methods", ["None"], ["", "", "", "def", "zero_grad", "(", "self", ")", ":", "\n", "        ", "\"\"\"Clears the gradients of all optimized parameters.\"\"\"", "\n", "for", "p", "in", "self", ".", "fp16_params", ":", "\n", "            ", "p", ".", "grad", "=", "None", "\n", "", "if", "self", ".", "has_flat_params", ":", "\n", "            ", "self", ".", "fp32_params", ".", "grad", ".", "zero_", "(", ")", "\n", "", "else", ":", "\n", "            ", "for", "p32", "in", "self", ".", "fp32_params", ":", "\n", "                ", "p32", ".", "grad", ".", "zero_", "(", ")", "\n", "", "", "self", ".", "_needs_sync", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.FP16Optimizer.__init__": [[216, 239], ["super().__init__", "fp16_optimizer.DynamicLossScaler", "getattr", "int", "len", "ValueError"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["def", "__init__", "(", "self", ",", "args", ",", "params", ",", "fp32_optimizer", ",", "fp32_params", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "self", ".", "fp16_params", "=", "params", "\n", "self", ".", "fp32_optimizer", "=", "fp32_optimizer", "\n", "self", ".", "fp32_params", "=", "fp32_params", "\n", "\n", "if", "getattr", "(", "args", ",", "'fp16_scale_window'", ",", "None", ")", "is", "None", ":", "\n", "            ", "if", "len", "(", "args", ".", "update_freq", ")", ">", "1", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "'--fp16-scale-window must be given explicitly when using a '", "\n", "'custom --update-freq schedule'", "\n", ")", "\n", "", "scale_window", "=", "int", "(", "2", "**", "14", "/", "args", ".", "distributed_world_size", "/", "args", ".", "update_freq", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "scale_window", "=", "args", ".", "fp16_scale_window", "\n", "\n", "", "self", ".", "scaler", "=", "DynamicLossScaler", "(", "\n", "init_scale", "=", "args", ".", "fp16_init_scale", ",", "\n", "scale_window", "=", "scale_window", ",", "\n", "tolerance", "=", "args", ".", "fp16_scale_tolerance", ",", "\n", "threshold", "=", "args", ".", "threshold_loss_scale", ",", "\n", ")", "\n", "self", ".", "min_loss_scale", "=", "self", ".", "args", ".", "min_loss_scale", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.FP16Optimizer.build_optimizer": [[240, 254], ["cls.build_fp32_params", "cls", "getattr", "fairseq.optim.build_optimizer", "fairseq.optim.build_optimizer"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer._FP16OptimizerMixin.build_fp32_params", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dictionary.BertDictionary.cls", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.build_optimizer", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.build_optimizer"], ["", "@", "classmethod", "\n", "def", "build_optimizer", "(", "cls", ",", "args", ",", "params", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            args (argparse.Namespace): fairseq args\n            params (iterable): iterable of parameters to optimize\n        \"\"\"", "\n", "flatten", "=", "not", "getattr", "(", "args", ",", "'fp16_no_flatten_grads'", ",", "False", ")", "\n", "fp32_params", "=", "cls", ".", "build_fp32_params", "(", "params", ",", "flatten", "=", "flatten", ")", "\n", "if", "flatten", ":", "\n", "            ", "fp32_optimizer", "=", "optim", ".", "build_optimizer", "(", "args", ",", "[", "fp32_params", "]", ")", "\n", "", "else", ":", "\n", "            ", "fp32_optimizer", "=", "optim", ".", "build_optimizer", "(", "args", ",", "fp32_params", ")", "\n", "", "if", "flatten", "and", "not", "fp32_optimizer", ".", "supports_flat_params", ":", "\n", "            ", "raise", "RuntimeError", "(", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.FP16Optimizer.optimizer": [[255, 258], ["None"], "methods", ["None"], ["'chosen optimizer does not support flat params, '", "\n", "'please set --fp16-no-flatten-grads'", "\n", ")", "\n", "", "return", "cls", "(", "args", ",", "params", ",", "fp32_optimizer", ",", "fp32_params", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.FP16Optimizer.optimizer_config": [[259, 262], ["None"], "methods", ["None"], ["\n", "", "@", "property", "\n", "def", "optimizer", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fp32_optimizer", ".", "optimizer", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.FP16Optimizer.get_lr": [[263, 265], ["fp16_optimizer.FP16Optimizer.fp32_optimizer.get_lr"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.get_lr"], ["\n", "", "@", "property", "\n", "def", "optimizer_config", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.FP16Optimizer.set_lr": [[266, 268], ["fp16_optimizer.FP16Optimizer.fp32_optimizer.set_lr"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.set_lr"], ["        ", "return", "self", ".", "fp32_optimizer", ".", "optimizer_config", "\n", "\n", "", "def", "get_lr", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer._MemoryEfficientFP16OptimizerMixin.__init__": [[272, 275], ["object.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["        ", "self", ".", "fp32_optimizer", ".", "set_lr", "(", "lr", ")", "\n", "\n", "\n", "", "", "class", "_MemoryEfficientFP16OptimizerMixin", "(", "object", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer._MemoryEfficientFP16OptimizerMixin.has_flat_params": [[281, 284], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "has_flat_params", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer._MemoryEfficientFP16OptimizerMixin.state_dict": [[276, 281], ["fp16_optimizer._MemoryEfficientFP16OptimizerMixin.wrapped_optimizer.state_dict"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.state_dict"], ["\n", "    ", "def", "__init__", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "# forward __init__ call to the next class in mro(method resolution order)", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer._MemoryEfficientFP16OptimizerMixin.load_state_dict": [[282, 313], ["fp16_optimizer._MemoryEfficientFP16OptimizerMixin.wrapped_optimizer.load_state_dict", "state_dict[].items", "zip", "itertools.chain", "itertools.chain"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.load_state_dict"], ["def", "has_flat_params", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "\n", "", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the optimizer's state dict.\"\"\"", "\n", "state_dict", "=", "self", ".", "wrapped_optimizer", ".", "state_dict", "(", ")", "\n", "state_dict", "[", "'loss_scale'", "]", "=", "self", ".", "scaler", ".", "loss_scale", "\n", "return", "state_dict", "\n", "\n", "", "def", "load_state_dict", "(", "self", ",", "state_dict", ",", "optimizer_overrides", "=", "None", ")", ":", "\n", "        ", "\"\"\"Load an optimizer state dict.\n\n        In general we should prefer the configuration of the existing optimizer\n        instance (e.g., learning rate) over that found in the state_dict. This\n        allows us to resume training from a checkpoint using a new set of\n        optimizer args.\n        \"\"\"", "\n", "if", "'loss_scale'", "in", "state_dict", ":", "\n", "            ", "self", ".", "scaler", ".", "loss_scale", "=", "state_dict", "[", "'loss_scale'", "]", "\n", "\n", "", "self", ".", "wrapped_optimizer", ".", "load_state_dict", "(", "state_dict", ",", "optimizer_overrides", ")", "\n", "\n", "# Hack: PyTorch automatically casts the optimizer state to match the", "\n", "# type of the current parameters. But with --memory-efficient-fp16 the", "\n", "# params are FP16 while the optimizer state is FP32 and we don't want", "\n", "# to cast. A workaround is to manually copy back the original state", "\n", "# after the optimizer has been loaded.", "\n", "groups", "=", "self", ".", "optimizer", ".", "param_groups", "\n", "saved_groups", "=", "state_dict", "[", "'param_groups'", "]", "\n", "id_map", "=", "{", "\n", "old_id", ":", "p", "\n", "for", "old_id", ",", "p", "in", "zip", "(", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer._MemoryEfficientFP16OptimizerMixin.backward": [[314, 324], ["loss.backward"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.dynamicconvFunction.backward"], ["chain", "(", "*", "(", "g", "[", "'params'", "]", "for", "g", "in", "saved_groups", ")", ")", ",", "\n", "chain", "(", "*", "(", "g", "[", "'params'", "]", "for", "g", "in", "groups", ")", ")", "\n", ")", "\n", "}", "\n", "for", "k", ",", "v", "in", "state_dict", "[", "'state'", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", "in", "id_map", ":", "\n", "                ", "param", "=", "id_map", "[", "k", "]", "\n", "self", ".", "optimizer", ".", "state", "[", "param", "]", "=", "v", "\n", "\n", "", "", "", "def", "backward", "(", "self", ",", "loss", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer._MemoryEfficientFP16OptimizerMixin._unscale_grads": [[325, 333], ["fp16_optimizer._MemoryEfficientFP16OptimizerMixin.wrapped_optimizer.multiply_grads"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer._MemoryEfficientFP16OptimizerMixin.multiply_grads"], ["\n", "loss", "=", "loss", "*", "self", ".", "scaler", ".", "loss_scale", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "_grads_are_scaled", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer._MemoryEfficientFP16OptimizerMixin.multiply_grads": [[334, 340], ["fp16_optimizer._MemoryEfficientFP16OptimizerMixin._unscale_grads", "fp16_optimizer._MemoryEfficientFP16OptimizerMixin.wrapped_optimizer.multiply_grads"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer._MemoryEfficientFP16OptimizerMixin._unscale_grads", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer._MemoryEfficientFP16OptimizerMixin.multiply_grads"], ["", "def", "_unscale_grads", "(", "self", ",", "multiply_grads", "=", "1.", ")", ":", "\n", "        ", "if", "self", ".", "_grads_are_scaled", ":", "\n", "            ", "self", ".", "_grads_are_scaled", "=", "False", "\n", "\n", "# correct for dynamic loss scaler", "\n", "self", ".", "wrapped_optimizer", ".", "multiply_grads", "(", "multiply_grads", "/", "self", ".", "scaler", ".", "loss_scale", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer._MemoryEfficientFP16OptimizerMixin.clip_grad_norm": [[341, 361], ["fp16_optimizer._MemoryEfficientFP16OptimizerMixin._unscale_grads", "fp16_optimizer._MemoryEfficientFP16OptimizerMixin.wrapped_optimizer.clip_grad_norm", "fp16_optimizer.DynamicLossScaler.has_overflow", "fp16_optimizer._MemoryEfficientFP16OptimizerMixin.scaler.update_scale", "OverflowError", "FloatingPointError", "str"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer._MemoryEfficientFP16OptimizerMixin._unscale_grads", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer._MemoryEfficientFP16OptimizerMixin.clip_grad_norm", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.DynamicLossScaler.has_overflow", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.DynamicLossScaler.update_scale"], ["            ", "assert", "multiply_grads", "==", "1.", "\n", "\n", "", "", "def", "multiply_grads", "(", "self", ",", "c", ")", ":", "\n", "        ", "\"\"\"Multiplies grads by a constant *c*.\"\"\"", "\n", "if", "self", ".", "_grads_are_scaled", ":", "\n", "            ", "self", ".", "_unscale_grads", "(", "c", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "wrapped_optimizer", ".", "multiply_grads", "(", "c", ")", "\n", "\n", "", "", "def", "clip_grad_norm", "(", "self", ",", "max_norm", ")", ":", "\n", "        ", "\"\"\"Clips gradient norm and updates dynamic loss scaler.\"\"\"", "\n", "self", ".", "_unscale_grads", "(", ")", "\n", "grad_norm", "=", "self", ".", "wrapped_optimizer", ".", "clip_grad_norm", "(", "max_norm", ")", "\n", "\n", "# detect overflow and adjust loss scale", "\n", "overflow", "=", "DynamicLossScaler", ".", "has_overflow", "(", "grad_norm", ")", "\n", "self", ".", "scaler", ".", "update_scale", "(", "overflow", ")", "\n", "if", "overflow", ":", "\n", "            ", "if", "self", ".", "scaler", ".", "loss_scale", "<=", "self", ".", "min_loss_scale", ":", "\n", "# Use FloatingPointError as an uncommon error that parent", "\n", "# functions can safely catch to stop training.", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer._MemoryEfficientFP16OptimizerMixin.step": [[362, 366], ["fp16_optimizer._MemoryEfficientFP16OptimizerMixin._unscale_grads", "fp16_optimizer._MemoryEfficientFP16OptimizerMixin.wrapped_optimizer.step"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer._MemoryEfficientFP16OptimizerMixin._unscale_grads", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.polynomial_decay_schedule.PolynomialDecaySchedule.step"], ["                ", "raise", "FloatingPointError", "(", "(", "\n", "'Minimum loss scale reached ({}). Your loss is probably exploding. '", "\n", "'Try lowering the learning rate, using gradient clipping or '", "\n", "'increasing the batch size.'", "\n", ")", ".", "format", "(", "self", ".", "min_loss_scale", ")", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer._MemoryEfficientFP16OptimizerMixin.zero_grad": [[367, 371], ["fp16_optimizer._MemoryEfficientFP16OptimizerMixin.wrapped_optimizer.zero_grad"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer._MemoryEfficientFP16OptimizerMixin.zero_grad"], ["", "raise", "OverflowError", "(", "'setting loss scale to: '", "+", "str", "(", "self", ".", "scaler", ".", "loss_scale", ")", ")", "\n", "\n", "", "return", "grad_norm", "\n", "\n", "", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.__init__": [[389, 415], ["super().__init__", "fp16_optimizer.DynamicLossScaler", "ValueError", "getattr", "len", "ValueError"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["\n", "\n", "def", "__init__", "(", "self", ",", "args", ",", "params", ",", "optimizer", ")", ":", "\n", "        ", "if", "not", "optimizer", ".", "supports_memory_efficient_fp16", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Unsupported optimizer: {}'", ".", "format", "(", "optimizer", ".", "__class__", ".", "__name__", ")", "\n", ")", "\n", "\n", "", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "self", ".", "wrapped_optimizer", "=", "optimizer", "\n", "\n", "if", "getattr", "(", "args", ",", "'fp16_scale_window'", ",", "None", ")", "is", "None", ":", "\n", "            ", "if", "len", "(", "args", ".", "update_freq", ")", ">", "1", ":", "\n", "                ", "raise", "ValueError", "(", "\n", "'--fp16-scale-window must be given explicitly when using a '", "\n", "'custom --update-freq schedule'", "\n", ")", "\n", "", "scale_window", "=", "2", "**", "14", "/", "args", ".", "distributed_world_size", "/", "args", ".", "update_freq", "[", "0", "]", "\n", "", "else", ":", "\n", "            ", "scale_window", "=", "args", ".", "fp16_scale_window", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.build_optimizer": [[416, 425], ["fairseq.optim.build_optimizer", "cls"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.build_optimizer", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dictionary.BertDictionary.cls"], ["\n", "", "self", ".", "scaler", "=", "DynamicLossScaler", "(", "\n", "init_scale", "=", "args", ".", "fp16_init_scale", ",", "\n", "scale_window", "=", "scale_window", ",", "\n", "tolerance", "=", "args", ".", "fp16_scale_tolerance", ",", "\n", "threshold", "=", "args", ".", "threshold_loss_scale", ",", "\n", ")", "\n", "self", ".", "min_loss_scale", "=", "self", ".", "args", ".", "min_loss_scale", "\n", "\n", "", "@", "classmethod", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.optimizer": [[426, 429], ["None"], "methods", ["None"], ["def", "build_optimizer", "(", "cls", ",", "args", ",", "params", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.optimizer_config": [[430, 433], ["None"], "methods", ["None"], ["\n", "fp16_optimizer", "=", "optim", ".", "build_optimizer", "(", "args", ",", "params", ")", "\n", "return", "cls", "(", "args", ",", "params", ",", "fp16_optimizer", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.get_lr": [[434, 436], ["fp16_optimizer.MemoryEfficientFP16Optimizer.wrapped_optimizer.get_lr"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.get_lr"], ["\n", "", "@", "property", "\n", "def", "optimizer", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.set_lr": [[437, 439], ["fp16_optimizer.MemoryEfficientFP16Optimizer.wrapped_optimizer.set_lr"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.set_lr"], ["        ", "return", "self", ".", "wrapped_optimizer", ".", "optimizer", "\n", "\n", "", "@", "property", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fused_lamb.FairseqLAMB.__init__": [[13, 20], ["fairseq.optim.FairseqOptimizer.__init__", "FusedLAMB", "ImportError"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["def", "__init__", "(", "self", ",", "args", ",", "params", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "try", ":", "\n", "            ", "from", "apex", ".", "optimizers", "import", "FusedLAMB", "\n", "self", ".", "_optimizer", "=", "FusedLAMB", "(", "params", ",", "**", "self", ".", "optimizer_config", ")", "\n", "", "except", "ImportError", ":", "\n", "            ", "raise", "ImportError", "(", "'Please install apex to use LAMB optimizer'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fused_lamb.FairseqLAMB.add_args": [[21, 31], ["parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add optimizer-specific arguments to the parser.\"\"\"", "\n", "# fmt: off", "\n", "parser", ".", "add_argument", "(", "'--lamb-betas'", ",", "default", "=", "'(0.9, 0.999)'", ",", "metavar", "=", "'B'", ",", "\n", "help", "=", "'betas for LAMB optimizer'", ")", "\n", "parser", ".", "add_argument", "(", "'--lamb-eps'", ",", "type", "=", "float", ",", "default", "=", "1e-8", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'epsilon for LAMB optimizer'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight-decay'", ",", "'--wd'", ",", "default", "=", "0.0", ",", "type", "=", "float", ",", "metavar", "=", "'WD'", ",", "\n", "help", "=", "'weight decay'", ")", "\n", "# fmt: on", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fused_lamb.FairseqLAMB.optimizer_config": [[33, 46], ["eval"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval"], ["", "@", "property", "\n", "def", "optimizer_config", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return a kwarg dictionary that will be used to override optimizer\n        args stored in checkpoints. This allows us to load a checkpoint and\n        resume training using a different set of optimizer args, e.g., with a\n        different learning rate.\n        \"\"\"", "\n", "return", "{", "\n", "'lr'", ":", "self", ".", "args", ".", "lr", "[", "0", "]", ",", "\n", "'betas'", ":", "eval", "(", "self", ".", "args", ".", "lamb_betas", ")", ",", "\n", "'eps'", ":", "self", ".", "args", ".", "lamb_eps", ",", "\n", "'weight_decay'", ":", "self", ".", "args", ".", "weight_decay", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fused_lamb.FairseqLAMB.supports_flat_params": [[48, 51], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "supports_flat_params", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.adam.FairseqAdam.__init__": [[26, 34], ["fairseq.optim.FairseqOptimizer.__init__", "fairseq.optim.fused_adam.get_fused_adam_class", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "print", "fairseq.optim.fused_adam.get_fused_adam_class.", "adam.Adam"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fused_adam.get_fused_adam_class", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], ["\n", "\n", "def", "__init__", "(", "self", ",", "args", ",", "params", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "fused_adam_cls", "=", "get_fused_adam_class", "(", ")", "\n", "use_fused_adam", "=", "(", "\n", "not", "getattr", "(", "args", ",", "'use_old_adam'", ",", "False", ")", "\n", "and", "fused_adam_cls", "is", "not", "None", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.adam.FairseqAdam.add_args": [[35, 52], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["and", "torch", ".", "cuda", ".", "is_available", "(", ")", "\n", ")", "\n", "if", "use_fused_adam", ":", "\n", "            ", "logger", ".", "info", "(", "'using FusedAdam'", ")", "\n", "self", ".", "_optimizer", "=", "fused_adam_cls", "(", "params", ",", "**", "self", ".", "optimizer_config", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_optimizer", "=", "Adam", "(", "params", ",", "**", "self", ".", "optimizer_config", ")", "\n", "\n", "", "", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add optimizer-specific arguments to the parser.\"\"\"", "\n", "# fmt: off", "\n", "parser", ".", "add_argument", "(", "'--adam-betas'", ",", "default", "=", "'(0.9, 0.999)'", ",", "metavar", "=", "'B'", ",", "\n", "help", "=", "'betas for Adam optimizer'", ")", "\n", "parser", ".", "add_argument", "(", "'--adam-eps'", ",", "type", "=", "float", ",", "default", "=", "1e-8", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'epsilon for Adam optimizer'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight-decay'", ",", "'--wd'", ",", "default", "=", "0.0", ",", "type", "=", "float", ",", "metavar", "=", "'WD'", ",", "\n", "help", "=", "'weight decay'", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.adam.FairseqAdam.optimizer_config": [[55, 68], ["eval"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval"], ["parser", ".", "add_argument", "(", "\n", "\"--use-old-adam\"", ",", "\n", "action", "=", "'store_true'", ",", "\n", "default", "=", "False", ",", "\n", "help", "=", "\"Use fairseq.optim.adam.Adam\"", ",", "\n", ")", "\n", "# fmt: on", "\n", "\n", "", "@", "property", "\n", "def", "optimizer_config", "(", "self", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.adam.FairseqAdam.average_params": [[70, 80], ["adam.FairseqAdam.optimizer.state_dict", "float", "state_dict[].items", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce", "torch.all_reduce"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.state_dict", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.distributed_utils.get_world_size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.distributed_utils.get_world_size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.distributed_utils.get_world_size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.distributed_utils.all_reduce", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.distributed_utils.all_reduce", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.distributed_utils.all_reduce", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.distributed_utils.all_reduce", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.distributed_utils.all_reduce", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.distributed_utils.all_reduce"], ["\n", "return", "{", "\n", "'lr'", ":", "self", ".", "args", ".", "lr", "[", "0", "]", ",", "\n", "'betas'", ":", "eval", "(", "self", ".", "args", ".", "adam_betas", ")", ",", "\n", "'eps'", ":", "self", ".", "args", ".", "adam_eps", ",", "\n", "'weight_decay'", ":", "self", ".", "args", ".", "weight_decay", ",", "\n", "}", "\n", "\n", "", "def", "average_params", "(", "self", ")", ":", "\n", "        ", "\"\"\"Reduce Params is only used during BMUF distributed training.\"\"\"", "\n", "state_dict", "=", "self", ".", "optimizer", ".", "state_dict", "(", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.adam.Adam.__init__": [[109, 114], ["dict", "super().__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], []], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.adam.Adam.supports_memory_efficient_fp16": [[115, 118], ["None"], "methods", ["None"], ["\n", "\n", "def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "1e-3", ",", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ",", "\n", "weight_decay", "=", "0", ",", "amsgrad", "=", "False", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.adam.Adam.supports_flat_params": [[127, 130], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "supports_flat_params", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.adam.Adam.step": [[119, 190], ["closure", "p.grad.data.float", "p.data.float", "exp_avg.mul_().add_", "exp_avg_sq.mul_().addcmul_", "p.data.float.addcdiv_", "p.data.copy_", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "state[].type_as", "state[].type_as", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "max_exp_avg_sq.sqrt().add_", "exp_avg_sq.sqrt().add_", "p.data.float.add_", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "state[].type_as", "exp_avg.mul_", "exp_avg_sq.mul_", "math.sqrt", "max_exp_avg_sq.sqrt", "exp_avg_sq.sqrt"], "methods", ["None"], ["        ", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "betas", "=", "betas", ",", "eps", "=", "eps", ",", "\n", "weight_decay", "=", "weight_decay", ",", "amsgrad", "=", "amsgrad", ")", "\n", "super", "(", "Adam", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n", "", "@", "property", "\n", "def", "supports_memory_efficient_fp16", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n", "", "@", "property", "\n", "def", "supports_flat_params", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n", "", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", ".", "float", "(", ")", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'Adam does not support sparse gradients, please consider SparseAdam instead'", ")", "\n", "", "amsgrad", "=", "group", "[", "'amsgrad'", "]", "\n", "\n", "p_data_fp32", "=", "p", ".", "data", ".", "float", "(", ")", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "# State initialization", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "# Exponential moving average of gradient values", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "# Exponential moving average of squared gradient values", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "if", "amsgrad", ":", "\n", "# Maintains max of all exp. moving avg. of sq. grad. values", "\n", "                        ", "state", "[", "'max_exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "", "", "else", ":", "\n", "                    ", "state", "[", "'exp_avg'", "]", "=", "state", "[", "'exp_avg'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "state", "[", "'exp_avg_sq'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "if", "amsgrad", ":", "\n", "                        ", "state", "[", "'max_exp_avg_sq'", "]", "=", "state", "[", "'max_exp_avg_sq'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "\n", "", "", "exp_avg", ",", "exp_avg_sq", "=", "state", "[", "'exp_avg'", "]", ",", "state", "[", "'exp_avg_sq'", "]", "\n", "if", "amsgrad", ":", "\n", "                    ", "max_exp_avg_sq", "=", "state", "[", "'max_exp_avg_sq'", "]", "\n", "", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "# Decay the first and second moment running average coefficient", "\n", "exp_avg", ".", "mul_", "(", "beta1", ")", ".", "add_", "(", "1", "-", "beta1", ",", "grad", ")", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2", ")", ".", "addcmul_", "(", "1", "-", "beta2", ",", "grad", ",", "grad", ")", "\n", "if", "amsgrad", ":", "\n", "# Maintains the maximum of all 2nd moment running avg. till now", "\n", "                    ", "torch", ".", "max", "(", "max_exp_avg_sq", ",", "exp_avg_sq", ",", "out", "=", "max_exp_avg_sq", ")", "\n", "# Use the max. for normalizing running avg. of gradient", "\n", "denom", "=", "max_exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "", "else", ":", "\n", "                    ", "denom", "=", "exp_avg_sq", ".", "sqrt", "(", ")", ".", "add_", "(", "group", "[", "'eps'", "]", ")", "\n", "\n", "", "bias_correction1", "=", "1", "-", "beta1", "**", "state", "[", "'step'", "]", "\n", "bias_correction2", "=", "1", "-", "beta2", "**", "state", "[", "'step'", "]", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.nag.FairseqNAG.__init__": [[14, 17], ["FairseqOptimizer.__init__", "nag.NAG"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "params", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "self", ".", "_optimizer", "=", "NAG", "(", "params", ",", "**", "self", ".", "optimizer_config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.nag.FairseqNAG.add_args": [[18, 26], ["parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add optimizer-specific arguments to the parser.\"\"\"", "\n", "# fmt: off", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "default", "=", "0.99", ",", "type", "=", "float", ",", "metavar", "=", "'M'", ",", "\n", "help", "=", "'momentum factor'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight-decay'", ",", "'--wd'", ",", "default", "=", "0.0", ",", "type", "=", "float", ",", "metavar", "=", "'WD'", ",", "\n", "help", "=", "'weight decay'", ")", "\n", "# fmt: on", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.nag.FairseqNAG.optimizer_config": [[28, 40], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "optimizer_config", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return a kwarg dictionary that will be used to override optimizer\n        args stored in checkpoints. This allows us to load a checkpoint and\n        resume training using a different set of optimizer args, e.g., with a\n        different learning rate.\n        \"\"\"", "\n", "return", "{", "\n", "'lr'", ":", "self", ".", "args", ".", "lr", "[", "0", "]", ",", "\n", "'momentum'", ":", "self", ".", "args", ".", "momentum", ",", "\n", "'weight_decay'", ":", "self", ".", "args", ".", "weight_decay", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.nag.NAG.__init__": [[44, 47], ["dict", "torch.optim.optimizer.Optimizer.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "required", ",", "momentum", "=", "0", ",", "weight_decay", "=", "0", ")", ":", "\n", "        ", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "lr_old", "=", "lr", ",", "momentum", "=", "momentum", ",", "weight_decay", "=", "weight_decay", ")", "\n", "super", "(", "NAG", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.nag.NAG.supports_memory_efficient_fp16": [[48, 51], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "supports_memory_efficient_fp16", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.nag.NAG.supports_flat_params": [[52, 55], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "supports_flat_params", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.nag.NAG.step": [[52, 97], ["closure", "group.get", "p.data.float", "p.grad.data.float", "p.data.float.add_", "p.data.float.add_", "buf.mul_().add_", "p.data.copy_", "torch.zeros_like", "param_state[].type_as", "p.data.float.mul_", "buf.mul_"], "methods", ["None"], ["", "@", "property", "\n", "def", "supports_flat_params", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n", "", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "weight_decay", "=", "group", "[", "'weight_decay'", "]", "\n", "momentum", "=", "group", "[", "'momentum'", "]", "\n", "lr", "=", "group", "[", "'lr'", "]", "\n", "lr_old", "=", "group", ".", "get", "(", "'lr_old'", ",", "lr", ")", "\n", "lr_correct", "=", "lr", "/", "lr_old", "\n", "\n", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "\n", "", "p_data_fp32", "=", "p", ".", "data", ".", "float", "(", ")", "\n", "\n", "d_p", "=", "p", ".", "grad", ".", "data", ".", "float", "(", ")", "\n", "param_state", "=", "self", ".", "state", "[", "p", "]", "\n", "if", "'momentum_buffer'", "not", "in", "param_state", ":", "\n", "                    ", "param_state", "[", "'momentum_buffer'", "]", "=", "torch", ".", "zeros_like", "(", "d_p", ")", "\n", "", "else", ":", "\n", "                    ", "param_state", "[", "'momentum_buffer'", "]", "=", "param_state", "[", "'momentum_buffer'", "]", ".", "type_as", "(", "d_p", ")", "\n", "\n", "", "buf", "=", "param_state", "[", "'momentum_buffer'", "]", "\n", "\n", "if", "weight_decay", "!=", "0", ":", "\n", "                    ", "p_data_fp32", ".", "mul_", "(", "1", "-", "lr", "*", "weight_decay", ")", "\n", "", "p_data_fp32", ".", "add_", "(", "momentum", "*", "momentum", "*", "lr_correct", ",", "buf", ")", "\n", "p_data_fp32", ".", "add_", "(", "-", "(", "1", "+", "momentum", ")", "*", "lr", ",", "d_p", ")", "\n", "\n", "buf", ".", "mul_", "(", "momentum", "*", "lr_correct", ")", ".", "add_", "(", "-", "lr", ",", "d_p", ")", "\n", "\n", "p", ".", "data", ".", "copy_", "(", "p_data_fp32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fused_adam.FusedAdamV1.__init__": [[68, 88], ["importlib.import_module", "super().__init__", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "\n", "lr", "=", "1e-3", ",", "bias_correction", "=", "True", ",", "\n", "betas", "=", "(", "0.9", ",", "0.999", ")", ",", "eps", "=", "1e-8", ",", "eps_inside_sqrt", "=", "False", ",", "\n", "weight_decay", "=", "0.", ",", "max_grad_norm", "=", "0.", ",", "amsgrad", "=", "False", ")", ":", "\n", "        ", "global", "fused_adam_cuda", "\n", "import", "importlib", "\n", "fused_adam_cuda", "=", "importlib", ".", "import_module", "(", "\"fused_adam_cuda\"", ")", "\n", "\n", "if", "amsgrad", ":", "\n", "            ", "raise", "RuntimeError", "(", "'FusedAdam does not support the AMSGrad variant.'", ")", "\n", "", "defaults", "=", "{", "\n", "'lr'", ":", "lr", ",", "\n", "'bias_correction'", ":", "bias_correction", ",", "\n", "'betas'", ":", "betas", ",", "\n", "'eps'", ":", "eps", ",", "\n", "'weight_decay'", ":", "weight_decay", ",", "\n", "'max_grad_norm'", ":", "max_grad_norm", ",", "\n", "}", "\n", "super", "(", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "self", ".", "eps_mode", "=", "0", "if", "eps_inside_sqrt", "else", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fused_adam.FusedAdamV1.supports_memory_efficient_fp16": [[89, 92], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "supports_memory_efficient_fp16", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fused_adam.FusedAdamV1.supports_flat_params": [[93, 96], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "supports_flat_params", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fused_adam.FusedAdamV1.step": [[93, 191], ["zip", "closure", "isinstance", "zip", "len", "len", "p.data.float", "fused_adam_cuda.adam", "type", "len", "RuntimeError", "len", "torch.zeros_like", "torch.zeros_like", "state[].type_as", "state[].type_as"], "methods", ["None"], ["", "@", "property", "\n", "def", "supports_flat_params", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n", "", "def", "step", "(", "self", ",", "closure", "=", "None", ",", "grads", "=", "None", ",", "scale", "=", "1.", ",", "grad_norms", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n            grads (list of tensors, optional): weight gradient to use for the\n                optimizer update. If gradients have type torch.half, parameters\n                are expected to be in type torch.float. (default: None)\n            output params (list of tensors, optional): A reduced precision copy\n                of the updated weights written out in addition to the regular\n                updated weights. Have to be of same type as gradients. (default: None)\n            scale (float, optional): factor to divide gradient tensor values\n                by before applying to weights. (default: 1)\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "if", "grads", "is", "None", ":", "\n", "            ", "grads_group", "=", "[", "None", "]", "*", "len", "(", "self", ".", "param_groups", ")", "\n", "# backward compatibility", "\n", "# assuming a list/generator of parameter means single group", "\n", "", "elif", "isinstance", "(", "grads", ",", "types", ".", "GeneratorType", ")", ":", "\n", "            ", "grads_group", "=", "[", "grads", "]", "\n", "", "elif", "type", "(", "grads", "[", "0", "]", ")", "!=", "list", ":", "\n", "            ", "grads_group", "=", "[", "grads", "]", "\n", "", "else", ":", "\n", "            ", "grads_group", "=", "grads", "\n", "\n", "", "if", "grad_norms", "is", "None", ":", "\n", "            ", "grad_norms", "=", "[", "None", "]", "*", "len", "(", "self", ".", "param_groups", ")", "\n", "\n", "", "for", "group", ",", "grads_this_group", ",", "grad_norm", "in", "zip", "(", "self", ".", "param_groups", ",", "grads_group", ",", "grad_norms", ")", ":", "\n", "            ", "if", "grads_this_group", "is", "None", ":", "\n", "                ", "grads_this_group", "=", "[", "None", "]", "*", "len", "(", "group", "[", "'params'", "]", ")", "\n", "\n", "# compute combined scale factor for this group", "\n", "", "combined_scale", "=", "scale", "\n", "if", "group", "[", "'max_grad_norm'", "]", ">", "0", ":", "\n", "# norm is in fact norm*scale", "\n", "                ", "clip", "=", "(", "(", "grad_norm", "/", "scale", ")", "+", "1e-6", ")", "/", "group", "[", "'max_grad_norm'", "]", "\n", "if", "clip", ">", "1", ":", "\n", "                    ", "combined_scale", "=", "clip", "*", "scale", "\n", "\n", "", "", "bias_correction", "=", "1", "if", "group", "[", "'bias_correction'", "]", "else", "0", "\n", "\n", "for", "p", ",", "grad", "in", "zip", "(", "group", "[", "'params'", "]", ",", "grads_this_group", ")", ":", "\n", "# note: p.grad should not ever be set for correct", "\n", "# operation of mixed precision optimizer that sometimes", "\n", "# sends None gradients", "\n", "                ", "if", "p", ".", "grad", "is", "None", "and", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "if", "grad", "is", "None", ":", "\n", "                    ", "grad", "=", "p", ".", "grad", ".", "data", "\n", "", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\n", "'FusedAdam does not support sparse gradients, '", "\n", "'please consider SparseAdam instead'", "\n", ")", "\n", "\n", "", "p_data_fp32", "=", "p", ".", "data", ".", "float", "(", ")", "\n", "\n", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "\n", "# State initialization", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "# Exponential moving average of gradient values", "\n", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "# Exponential moving average of squared gradient values", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "p_data_fp32", ")", "\n", "", "else", ":", "\n", "                    ", "state", "[", "'exp_avg'", "]", "=", "state", "[", "'exp_avg'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "state", "[", "'exp_avg_sq'", "]", "=", "state", "[", "'exp_avg_sq'", "]", ".", "type_as", "(", "p_data_fp32", ")", "\n", "\n", "", "exp_avg", "=", "state", "[", "'exp_avg'", "]", "\n", "exp_avg_sq", "=", "state", "[", "'exp_avg_sq'", "]", "\n", "beta1", ",", "beta2", "=", "group", "[", "'betas'", "]", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "\n", "out_p", "=", "p", ".", "data", "\n", "fused_adam_cuda", ".", "adam", "(", "p_data_fp32", ",", "\n", "out_p", ",", "\n", "exp_avg", ",", "\n", "exp_avg_sq", ",", "\n", "grad", ",", "\n", "group", "[", "'lr'", "]", ",", "\n", "beta1", ",", "\n", "beta2", ",", "\n", "group", "[", "'eps'", "]", ",", "\n", "combined_scale", ",", "\n", "state", "[", "'step'", "]", ",", "\n", "self", ".", "eps_mode", ",", "\n", "bias_correction", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fused_adam.get_fused_adam_class": [[11, 34], ["importlib.import_module"], "function", ["None"], ["def", "get_fused_adam_class", "(", ")", ":", "\n", "    ", "\"\"\"\n    Look for the FusedAdam optimizer from apex. We first try to load the\n    \"contrib\" interface, which is a bit faster than the main interface,\n    but is technically deprecated.\n    \"\"\"", "\n", "try", ":", "\n", "# The \"deprecated\" interface in recent versions of apex is a bit", "\n", "# faster than the main interface, since we don't use the apex", "\n", "# optimizer. This can be installed by passing the", "\n", "# `--deprecated_fused_adam` option when building apex.", "\n", "        ", "global", "fused_adam_cuda", "\n", "import", "importlib", "\n", "fused_adam_cuda", "=", "importlib", ".", "import_module", "(", "\"fused_adam_cuda\"", ")", "\n", "return", "FusedAdamV1", "\n", "", "except", "ImportError", ":", "\n", "        ", "try", ":", "\n", "# fallback to the newer interface", "\n", "            ", "from", "apex", ".", "optimizers", "import", "FusedAdam", "as", "_FusedAdam", "# noqa", "\n", "return", "FusedAdamV2", "\n", "", "except", "ImportError", ":", "\n", "            ", "pass", "\n", "", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.sgd.SGD.__init__": [[13, 16], ["FairseqOptimizer.__init__", "torch.optim.SGD"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "params", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "self", ".", "_optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "params", ",", "**", "self", ".", "optimizer_config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.sgd.SGD.add_args": [[17, 25], ["parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add optimizer-specific arguments to the parser.\"\"\"", "\n", "# fmt: off", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "default", "=", "0.0", ",", "type", "=", "float", ",", "metavar", "=", "'M'", ",", "\n", "help", "=", "'momentum factor'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight-decay'", ",", "'--wd'", ",", "default", "=", "0.0", ",", "type", "=", "float", ",", "metavar", "=", "'WD'", ",", "\n", "help", "=", "'weight decay'", ")", "\n", "# fmt: on", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.sgd.SGD.optimizer_config": [[27, 39], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "optimizer_config", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return a kwarg dictionary that will be used to override optimizer\n        args stored in checkpoints. This allows us to load a checkpoint and\n        resume training using a different set of optimizer args, e.g., with a\n        different learning rate.\n        \"\"\"", "\n", "return", "{", "\n", "'lr'", ":", "self", ".", "args", ".", "lr", "[", "0", "]", ",", "\n", "'momentum'", ":", "self", ".", "args", ".", "momentum", ",", "\n", "'weight_decay'", ":", "self", ".", "args", ".", "weight_decay", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.sgd.SGD.supports_flat_params": [[41, 44], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "supports_flat_params", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.adafactor.FairseqAdafactor.__init__": [[15, 18], ["FairseqOptimizer.__init__", "adafactor.Adafactor"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "params", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "self", ".", "_optimizer", "=", "Adafactor", "(", "params", ",", "**", "self", ".", "optimizer_config", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.adafactor.FairseqAdafactor.add_args": [[19, 39], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add optimizer-specific arguments to the parser.\"\"\"", "\n", "# fmt: off", "\n", "parser", ".", "add_argument", "(", "'--adafactor-eps'", ",", "default", "=", "'(1e-30, 1e-3)'", ",", "metavar", "=", "\"E\"", ",", "\n", "help", "=", "'epsilons for Adafactor optimizer'", ")", "\n", "parser", ".", "add_argument", "(", "'--clip-threshold'", ",", "type", "=", "float", ",", "default", "=", "1.0", ",", "metavar", "=", "\"C\"", ",", "\n", "help", "=", "'threshold for clipping update root mean square'", ")", "\n", "parser", ".", "add_argument", "(", "'--decay-rate'", ",", "type", "=", "float", ",", "default", "=", "-", "0.8", ",", "metavar", "=", "\"D\"", ",", "\n", "help", "=", "'decay rate of the second moment estimator'", ")", "\n", "parser", ".", "add_argument", "(", "'--beta1'", ",", "type", "=", "float", ",", "default", "=", "None", ",", "metavar", "=", "\"B\"", ",", "\n", "help", "=", "'beta for first moment estimator. Optional'", ")", "\n", "parser", ".", "add_argument", "(", "'--scale-parameter'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'scale learning rate by root mean square of parameter.'", ")", "\n", "parser", ".", "add_argument", "(", "'--weight-decay'", ",", "'--wd'", ",", "default", "=", "0.0", ",", "type", "=", "float", ",", "metavar", "=", "'WD'", ",", "\n", "help", "=", "'weight decay'", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup-init'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'use relative step for warm-up learning rate schedule'", ")", "\n", "parser", ".", "add_argument", "(", "'--relative-step'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'set learning rate to inverse square root of timestep.'", "\n", "'If false, external learning rate applied'", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.adafactor.FairseqAdafactor.optimizer_config": [[42, 62], ["eval"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.eval"], ["", "@", "property", "\n", "def", "optimizer_config", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return a kwarg dictionary that will be used to override optimizer\n        args stored in checkpoints. This allows us to load a checkpoint and\n        resume training using a different set of optimizer args, e.g., with a\n        different learning rate.\n        Note : Convergence issues empirically observed with fp16 on.\n               Might require search for appropriate configuration.\n        \"\"\"", "\n", "return", "{", "\n", "'lr'", ":", "self", ".", "args", ".", "lr", "[", "0", "]", ",", "\n", "'eps'", ":", "eval", "(", "self", ".", "args", ".", "adafactor_eps", ")", ",", "\n", "'clip_threshold'", ":", "self", ".", "args", ".", "clip_threshold", ",", "\n", "'beta1'", ":", "self", ".", "args", ".", "beta1", ",", "\n", "'decay_rate'", ":", "self", ".", "args", ".", "decay_rate", ",", "\n", "'scale_parameter'", ":", "self", ".", "args", ".", "scale_parameter", ",", "\n", "'weight_decay'", ":", "self", ".", "args", ".", "weight_decay", ",", "\n", "'relative_step'", ":", "self", ".", "args", ".", "relative_step", ",", "\n", "'warmup_init'", ":", "self", ".", "args", ".", "warmup_init", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.adafactor.Adafactor.__init__": [[93, 100], ["dict", "super().__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "lr", "=", "None", ",", "eps", "=", "(", "1e-30", ",", "1e-3", ")", ",", "clip_threshold", "=", "1.0", ",", "\n", "decay_rate", "=", "-", "0.8", ",", "beta1", "=", "None", ",", "weight_decay", "=", "0.0", ",", "scale_parameter", "=", "True", ",", "\n", "relative_step", "=", "True", ",", "warmup_init", "=", "False", ")", ":", "\n", "        ", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "eps", "=", "eps", ",", "clip_threshold", "=", "clip_threshold", ",", "decay_rate", "=", "decay_rate", ",", "\n", "beta1", "=", "beta1", ",", "weight_decay", "=", "weight_decay", ",", "scale_parameter", "=", "scale_parameter", ",", "\n", "relative_step", "=", "relative_step", ",", "warmup_init", "=", "warmup_init", ")", "\n", "super", "(", "Adafactor", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.adafactor.Adafactor.supports_memory_efficient_fp16": [[101, 104], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "supports_memory_efficient_fp16", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.adafactor.Adafactor.supports_flat_params": [[105, 108], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "supports_flat_params", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.adafactor.Adafactor._get_lr": [[105, 114], ["min", "max", "math.sqrt"], "methods", ["None"], ["", "@", "property", "\n", "def", "supports_flat_params", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "\n", "", "def", "_get_lr", "(", "self", ",", "param_group", ",", "param_state", ")", ":", "\n", "        ", "rel_step_sz", "=", "param_group", "[", "'lr'", "]", "\n", "if", "param_group", "[", "'relative_step'", "]", ":", "\n", "            ", "min_step", "=", "1e-6", "*", "param_state", "[", "'step'", "]", "if", "param_group", "[", "'warmup_init'", "]", "else", "1e-2", "\n", "rel_step_sz", "=", "min", "(", "min_step", ",", "1.0", "/", "math", ".", "sqrt", "(", "param_state", "[", "'step'", "]", ")", ")", "\n", "", "param_scale", "=", "1.0", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.adafactor.Adafactor._get_options": [[115, 119], ["len"], "methods", ["None"], ["if", "param_group", "[", "'scale_parameter'", "]", ":", "\n", "            ", "param_scale", "=", "max", "(", "param_group", "[", "'eps'", "]", "[", "1", "]", ",", "param_state", "[", "'RMS'", "]", ")", "\n", "", "return", "param_scale", "*", "rel_step_sz", "\n", "\n", "", "def", "_get_options", "(", "self", ",", "param_group", ",", "param_shape", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.adafactor.Adafactor._rms": [[120, 122], ["tensor.norm", "tensor.numel"], "methods", ["None"], ["        ", "factored", "=", "len", "(", "param_shape", ")", ">=", "2", "\n", "use_first_moment", "=", "param_group", "[", "'beta1'", "]", "is", "not", "None", "\n", "return", "factored", ",", "use_first_moment", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.adafactor.Adafactor._approx_sq_grad": [[123, 127], ["exp_avg_sq_col.unsqueeze().rsqrt", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "exp_avg_sq_col.unsqueeze", "exp_avg_sq_row.mean().unsqueeze", "exp_avg_sq_row.mean"], "methods", ["None"], ["\n", "", "def", "_rms", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "return", "tensor", ".", "norm", "(", "2", ")", "/", "(", "tensor", ".", "numel", "(", ")", "**", "0.5", ")", "\n", "\n", "", "def", "_approx_sq_grad", "(", "self", ",", "exp_avg_sq_row", ",", "exp_avg_sq_col", ",", "output", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.adafactor.Adafactor.step": [[128, 214], ["closure", "p.grad.data.float", "adafactor.Adafactor._get_options", "p.data.float", "adafactor.Adafactor._rms", "adafactor.Adafactor._get_lr", "update.div_", "update.mul_", "p.data.float.add_", "p.data.copy_", "RuntimeError", "len", "math.pow", "exp_avg_sq_row.mul_().add_", "exp_avg_sq_col.mul_().add_", "adafactor.Adafactor._approx_sq_grad", "update.mul_", "exp_avg_sq.mul_().add_", "torch.rsqrt().mul_", "torch.rsqrt().mul_", "torch.rsqrt().mul_", "torch.rsqrt().mul_", "max", "exp_avg.mul_().add_", "p.data.float.add_", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "state[].type_as", "state[].type_as", "state[].type_as", "state[].type_as", "update.mean", "update.mean", "exp_avg_sq_row.mul_", "exp_avg_sq_col.mul_", "exp_avg_sq.mul_", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "torch.rsqrt", "adafactor.Adafactor._rms", "exp_avg.mul_", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.adafactor.Adafactor._get_options", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.adafactor.Adafactor._rms", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.adafactor.Adafactor._get_lr", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.adafactor.Adafactor._approx_sq_grad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.adafactor.Adafactor._rms"], ["        ", "r_factor", "=", "(", "exp_avg_sq_row", "/", "exp_avg_sq_row", ".", "mean", "(", "dim", "=", "-", "1", ")", ".", "unsqueeze", "(", "-", "1", ")", ")", ".", "rsqrt_", "(", ")", ".", "unsqueeze", "(", "-", "1", ")", "\n", "c_factor", "=", "exp_avg_sq_col", ".", "unsqueeze", "(", "-", "2", ")", ".", "rsqrt", "(", ")", "\n", "torch", ".", "mul", "(", "r_factor", ",", "c_factor", ",", "out", "=", "output", ")", "\n", "\n", "", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "None", "\n", "if", "closure", "is", "not", "None", ":", "\n", "            ", "loss", "=", "closure", "(", ")", "\n", "\n", "", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", "=", "p", ".", "grad", ".", "data", ".", "float", "(", ")", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "raise", "RuntimeError", "(", "'Adafactor does not support sparse gradients.'", ")", "\n", "\n", "", "state", "=", "self", ".", "state", "[", "p", "]", "\n", "grad_shape", "=", "grad", ".", "shape", "\n", "\n", "factored", ",", "use_first_moment", "=", "self", ".", "_get_options", "(", "group", ",", "grad_shape", ")", "\n", "# State Initialization", "\n", "if", "len", "(", "state", ")", "==", "0", ":", "\n", "                    ", "state", "[", "'step'", "]", "=", "0", "\n", "\n", "if", "use_first_moment", ":", "\n", "# Exponential moving average of gradient values", "\n", "                        ", "state", "[", "'exp_avg'", "]", "=", "torch", ".", "zeros_like", "(", "grad", ")", "\n", "", "if", "factored", ":", "\n", "                        ", "state", "[", "'exp_avg_sq_row'", "]", "=", "torch", ".", "zeros", "(", "grad_shape", "[", ":", "-", "1", "]", ")", ".", "type_as", "(", "grad", ")", "\n", "state", "[", "'exp_avg_sq_col'", "]", "=", "torch", ".", "zeros", "(", "grad_shape", "[", ":", "-", "2", "]", "+", "grad_shape", "[", "-", "1", ":", "]", ")", ".", "type_as", "(", "grad", ")", "\n", "", "else", ":", "\n", "                        ", "state", "[", "'exp_avg_sq'", "]", "=", "torch", ".", "zeros_like", "(", "grad", ")", "\n", "\n", "", "state", "[", "'RMS'", "]", "=", "0", "\n", "", "else", ":", "\n", "                    ", "if", "use_first_moment", ":", "\n", "                        ", "state", "[", "'exp_avg'", "]", "=", "state", "[", "'exp_avg'", "]", ".", "type_as", "(", "grad", ")", "\n", "", "if", "factored", ":", "\n", "                        ", "state", "[", "'exp_avg_sq_row'", "]", "=", "state", "[", "'exp_avg_sq_row'", "]", ".", "type_as", "(", "grad", ")", "\n", "state", "[", "'exp_avg_sq_col'", "]", "=", "state", "[", "'exp_avg_sq_col'", "]", ".", "type_as", "(", "grad", ")", "\n", "", "else", ":", "\n", "                        ", "state", "[", "'exp_avg_sq'", "]", "=", "state", "[", "'exp_avg_sq'", "]", ".", "type_as", "(", "grad", ")", "\n", "\n", "", "", "p_data_fp32", "=", "p", ".", "data", ".", "float", "(", ")", "\n", "\n", "state", "[", "'step'", "]", "+=", "1", "\n", "state", "[", "'RMS'", "]", "=", "self", ".", "_rms", "(", "p_data_fp32", ")", "\n", "group", "[", "'lr'", "]", "=", "self", ".", "_get_lr", "(", "group", ",", "state", ")", "\n", "\n", "beta2t", "=", "1.0", "-", "math", ".", "pow", "(", "state", "[", "'step'", "]", ",", "group", "[", "'decay_rate'", "]", ")", "\n", "update", "=", "(", "grad", "**", "2", ")", "+", "group", "[", "'eps'", "]", "[", "0", "]", "\n", "if", "factored", ":", "\n", "                    ", "exp_avg_sq_row", "=", "state", "[", "'exp_avg_sq_row'", "]", "\n", "exp_avg_sq_col", "=", "state", "[", "'exp_avg_sq_col'", "]", "\n", "\n", "exp_avg_sq_row", ".", "mul_", "(", "beta2t", ")", ".", "add_", "(", "1.0", "-", "beta2t", ",", "update", ".", "mean", "(", "dim", "=", "-", "1", ")", ")", "\n", "exp_avg_sq_col", ".", "mul_", "(", "beta2t", ")", ".", "add_", "(", "1.0", "-", "beta2t", ",", "update", ".", "mean", "(", "dim", "=", "-", "2", ")", ")", "\n", "\n", "# Approximation of exponential moving average of square of gradient", "\n", "self", ".", "_approx_sq_grad", "(", "exp_avg_sq_row", ",", "exp_avg_sq_col", ",", "update", ")", "\n", "update", ".", "mul_", "(", "grad", ")", "\n", "", "else", ":", "\n", "                    ", "exp_avg_sq", "=", "state", "[", "'exp_avg_sq'", "]", "\n", "\n", "exp_avg_sq", ".", "mul_", "(", "beta2t", ")", ".", "add_", "(", "1.0", "-", "beta2t", ",", "update", ")", "\n", "torch", ".", "rsqrt", "(", "exp_avg_sq", ",", "out", "=", "update", ")", ".", "mul_", "(", "grad", ")", "\n", "\n", "", "update", ".", "div_", "(", "max", "(", "1.0", ",", "self", ".", "_rms", "(", "update", ")", "/", "group", "[", "'clip_threshold'", "]", ")", ")", "\n", "update", ".", "mul_", "(", "group", "[", "'lr'", "]", ")", "\n", "\n", "if", "use_first_moment", ":", "\n", "                    ", "exp_avg", "=", "state", "[", "'exp_avg'", "]", "\n", "exp_avg", ".", "mul_", "(", "group", "[", "'beta1'", "]", ")", ".", "add_", "(", "1", "-", "group", "[", "'beta1'", "]", ",", "update", ")", "\n", "update", "=", "exp_avg", "\n", "\n", "", "if", "group", "[", "'weight_decay'", "]", "!=", "0", ":", "\n", "                    ", "p_data_fp32", ".", "add_", "(", "-", "group", "[", "'weight_decay'", "]", "*", "group", "[", "'lr'", "]", ",", "p_data_fp32", ")", "\n", "\n", "", "p_data_fp32", ".", "add_", "(", "-", "update", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.reduce_lr_on_plateau.ReduceLROnPlateau.__init__": [[25, 49], ["FairseqLRScheduler.__init__", "torch.optim.lr_scheduler.ReduceLROnPlateau", "reduce_lr_on_plateau.ReduceLROnPlateau.optimizer.set_lr", "len", "ValueError"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.set_lr"], ["def", "__init__", "(", "self", ",", "args", ",", "optimizer", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "optimizer", ")", "\n", "if", "len", "(", "args", ".", "lr", ")", ">", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Cannot use a fixed learning rate schedule with reduce_lr_on_plateau.'", "\n", "' Consider --lr-scheduler=fixed instead.'", "\n", ")", "\n", "", "self", ".", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "ReduceLROnPlateau", "(", "\n", "self", ".", "optimizer", ".", "optimizer", ",", "patience", "=", "0", ",", "factor", "=", "args", ".", "lr_shrink", ",", "\n", "threshold", "=", "args", ".", "lr_threshold", ")", "\n", "warmup_end_lr", "=", "args", ".", "lr", "[", "0", "]", "\n", "\"\"\"if no warm up, sets initial lr to be args.lr[0]\"\"\"", "\n", "if", "args", ".", "warmup_init_lr", "<", "0", ":", "\n", "            ", "args", ".", "warmup_init_lr", "=", "0", "if", "args", ".", "warmup_updates", ">", "0", "else", "warmup_end_lr", "\n", "\n", "", "\"\"\" linearly warmup for the first args.warmup_updates\"\"\"", "\n", "if", "args", ".", "warmup_updates", ">", "0", ":", "\n", "            ", "self", ".", "lr_step", "=", "(", "warmup_end_lr", "-", "args", ".", "warmup_init_lr", ")", "/", "args", ".", "warmup_updates", "\n", "", "\"\"\" this flag is either set from arg when no warm up, or set by step_update() when warmup finishes\"\"\"", "\n", "self", ".", "warmup_end", "=", "True", "if", "args", ".", "warmup_updates", "<=", "0", "else", "False", "\n", "\"\"\" initial learning rate\"\"\"", "\n", "\"\"\"this self.lr is used only during init and/or warm up period\"\"\"", "\n", "self", ".", "lr", "=", "args", ".", "warmup_init_lr", "\n", "self", ".", "optimizer", ".", "set_lr", "(", "self", ".", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.reduce_lr_on_plateau.ReduceLROnPlateau.add_args": [[50, 63], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add arguments to the parser for this LR scheduler.\"\"\"", "\n", "# fmt: off", "\n", "parser", ".", "add_argument", "(", "'--lr-shrink'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "metavar", "=", "'LS'", ",", "\n", "help", "=", "'shrink factor for annealing, lr_new = (lr * lr_shrink)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr-threshold'", ",", "default", "=", "1e-4", ",", "type", "=", "float", ",", "metavar", "=", "'LT'", ",", "\n", "help", "=", "'Threshold for measuring the new optimum, \\\n                            to only focus on significant changes'", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup-updates'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'warmup the learning rate linearly for the first N updates'", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup-init-lr'", ",", "default", "=", "-", "1", ",", "type", "=", "float", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'initial learning rate during warmup phase; default is args.lr'", ")", "\n", "# fmt: on", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.reduce_lr_on_plateau.ReduceLROnPlateau.state_dict": [[65, 70], ["None"], "methods", ["None"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the LR scheduler state dict.\"\"\"", "\n", "return", "{", "\n", "'best'", ":", "self", ".", "lr_scheduler", ".", "best", ",", "\n", "'last_epoch'", ":", "self", ".", "lr_scheduler", ".", "last_epoch", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.reduce_lr_on_plateau.ReduceLROnPlateau.load_state_dict": [[72, 77], ["None"], "methods", ["None"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "\"\"\"Load an LR scheduler state dict.\"\"\"", "\n", "self", ".", "lr_scheduler", ".", "best", "=", "state_dict", "[", "'best'", "]", "\n", "if", "'last_epoch'", "in", "state_dict", ":", "\n", "            ", "self", ".", "lr_scheduler", ".", "last_epoch", "=", "state_dict", "[", "'last_epoch'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.reduce_lr_on_plateau.ReduceLROnPlateau.step": [[78, 86], ["reduce_lr_on_plateau.ReduceLROnPlateau.optimizer.get_lr", "reduce_lr_on_plateau.ReduceLROnPlateau.lr_scheduler.step"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.get_lr", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.polynomial_decay_schedule.PolynomialDecaySchedule.step"], ["", "", "def", "step", "(", "self", ",", "epoch", ",", "val_loss", "=", "None", ")", ":", "\n", "        ", "\"\"\"Update the learning rate at the end of the given epoch if warmup finishes\"\"\"", "\n", "\"\"\" otherwise no update of lr on epoch boundaries\"\"\"", "\n", "if", "val_loss", "is", "not", "None", "and", "self", ".", "warmup_end", "is", "True", ":", "\n", "            ", "self", ".", "lr_scheduler", ".", "step", "(", "val_loss", ",", "epoch", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "lr_scheduler", ".", "last_epoch", "=", "epoch", "\n", "", "return", "self", ".", "optimizer", ".", "get_lr", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.reduce_lr_on_plateau.ReduceLROnPlateau.step_update": [[87, 99], ["reduce_lr_on_plateau.ReduceLROnPlateau.optimizer.get_lr", "reduce_lr_on_plateau.ReduceLROnPlateau.optimizer.set_lr"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.get_lr", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.set_lr"], ["", "def", "step_update", "(", "self", ",", "num_updates", ")", ":", "\n", "        ", "\"\"\"Update the learning rate after each update.\"\"\"", "\n", "\"\"\" if there is warmup\"\"\"", "\n", "if", "self", ".", "args", ".", "warmup_updates", ">", "0", ":", "\n", "            ", "if", "num_updates", "<=", "self", ".", "args", ".", "warmup_updates", ":", "\n", "                ", "self", ".", "lr", "=", "self", ".", "args", ".", "warmup_init_lr", "+", "num_updates", "*", "self", ".", "lr_step", "\n", "self", ".", "optimizer", ".", "set_lr", "(", "self", ".", "lr", ")", "\n", "", "else", ":", "\n", "                ", "if", "self", ".", "warmup_end", "is", "False", ":", "\n", "                    ", "self", ".", "warmup_end", "=", "True", "\n", "", "", "", "\"\"\"else do nothing \"\"\"", "\n", "return", "self", ".", "optimizer", ".", "get_lr", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.inverse_square_root_schedule.InverseSquareRootSchedule.__init__": [[29, 49], ["FairseqLRScheduler.__init__", "inverse_square_root_schedule.InverseSquareRootSchedule.optimizer.set_lr", "len", "ValueError"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.set_lr"], ["def", "__init__", "(", "self", ",", "args", ",", "optimizer", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "optimizer", ")", "\n", "if", "len", "(", "args", ".", "lr", ")", ">", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Cannot use a fixed learning rate schedule with inverse_sqrt.'", "\n", "' Consider --lr-scheduler=fixed instead.'", "\n", ")", "\n", "", "warmup_end_lr", "=", "args", ".", "lr", "[", "0", "]", "\n", "if", "args", ".", "warmup_init_lr", "<", "0", ":", "\n", "            ", "args", ".", "warmup_init_lr", "=", "0", "if", "args", ".", "warmup_updates", ">", "0", "else", "warmup_end_lr", "\n", "\n", "# linearly warmup for the first args.warmup_updates", "\n", "", "self", ".", "lr_step", "=", "(", "warmup_end_lr", "-", "args", ".", "warmup_init_lr", ")", "/", "args", ".", "warmup_updates", "\n", "\n", "# then, decay prop. to the inverse square root of the update number", "\n", "self", ".", "decay_factor", "=", "warmup_end_lr", "*", "args", ".", "warmup_updates", "**", "0.5", "\n", "\n", "# initial learning rate", "\n", "self", ".", "lr", "=", "args", ".", "warmup_init_lr", "\n", "self", ".", "optimizer", ".", "set_lr", "(", "self", ".", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.inverse_square_root_schedule.InverseSquareRootSchedule.add_args": [[50, 58], ["parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add arguments to the parser for this LR scheduler.\"\"\"", "\n", "# fmt: off", "\n", "parser", ".", "add_argument", "(", "'--warmup-updates'", ",", "default", "=", "4000", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'warmup the learning rate linearly for the first N updates'", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup-init-lr'", ",", "default", "=", "-", "1", ",", "type", "=", "float", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'initial learning rate during warmup phase; default is args.lr'", ")", "\n", "# fmt: on", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.inverse_square_root_schedule.InverseSquareRootSchedule.step": [[60, 65], ["super().step", "inverse_square_root_schedule.InverseSquareRootSchedule.optimizer.get_lr"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.polynomial_decay_schedule.PolynomialDecaySchedule.step", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.get_lr"], ["", "def", "step", "(", "self", ",", "epoch", ",", "val_loss", "=", "None", ")", ":", "\n", "        ", "\"\"\"Update the learning rate at the end of the given epoch.\"\"\"", "\n", "super", "(", ")", ".", "step", "(", "epoch", ",", "val_loss", ")", "\n", "# we don't change the learning rate at epoch boundaries", "\n", "return", "self", ".", "optimizer", ".", "get_lr", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.inverse_square_root_schedule.InverseSquareRootSchedule.step_update": [[66, 74], ["inverse_square_root_schedule.InverseSquareRootSchedule.optimizer.set_lr"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.set_lr"], ["", "def", "step_update", "(", "self", ",", "num_updates", ")", ":", "\n", "        ", "\"\"\"Update the learning rate after each update.\"\"\"", "\n", "if", "num_updates", "<", "self", ".", "args", ".", "warmup_updates", ":", "\n", "            ", "self", ".", "lr", "=", "self", ".", "args", ".", "warmup_init_lr", "+", "num_updates", "*", "self", ".", "lr_step", "\n", "", "else", ":", "\n", "            ", "self", ".", "lr", "=", "self", ".", "decay_factor", "*", "num_updates", "**", "-", "0.5", "\n", "", "self", ".", "optimizer", ".", "set_lr", "(", "self", ".", "lr", ")", "\n", "return", "self", ".", "lr", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.__init__": [[11, 18], ["object.__init__", "isinstance", "ValueError"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "optimizer", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "not", "isinstance", "(", "optimizer", ",", "FairseqOptimizer", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'optimizer must be an instance of FairseqOptimizer'", ")", "\n", "", "self", ".", "args", "=", "args", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "best", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.add_args": [[19, 23], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add arguments to the parser for this LR scheduler.\"\"\"", "\n", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.state_dict": [[24, 27], ["None"], "methods", ["None"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return the LR scheduler state dict.\"\"\"", "\n", "return", "{", "'best'", ":", "self", ".", "best", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.load_state_dict": [[28, 31], ["None"], "methods", ["None"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "\"\"\"Load an LR scheduler state dict.\"\"\"", "\n", "self", ".", "best", "=", "state_dict", "[", "'best'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.step": [[32, 39], ["min"], "methods", ["None"], ["", "def", "step", "(", "self", ",", "epoch", ",", "val_loss", "=", "None", ")", ":", "\n", "        ", "\"\"\"Update the learning rate at the end of the given epoch.\"\"\"", "\n", "if", "val_loss", "is", "not", "None", ":", "\n", "            ", "if", "self", ".", "best", "is", "None", ":", "\n", "                ", "self", ".", "best", "=", "val_loss", "\n", "", "else", ":", "\n", "                ", "self", ".", "best", "=", "min", "(", "self", ".", "best", ",", "val_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.step_update": [[40, 43], ["fairseq_lr_scheduler.FairseqLRScheduler.optimizer.get_lr"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.get_lr"], ["", "", "", "def", "step_update", "(", "self", ",", "num_updates", ")", ":", "\n", "        ", "\"\"\"Update the learning rate after each update.\"\"\"", "\n", "return", "self", ".", "optimizer", ".", "get_lr", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fixed_schedule.FixedSchedule.__init__": [[13, 24], ["FairseqLRScheduler.__init__", "getattr"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["def", "__init__", "(", "self", ",", "args", ",", "optimizer", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "optimizer", ")", "\n", "\n", "# set defaults", "\n", "args", ".", "warmup_updates", "=", "getattr", "(", "args", ",", "'warmup_updates'", ",", "0", ")", "or", "0", "\n", "\n", "self", ".", "lr", "=", "args", ".", "lr", "[", "0", "]", "\n", "if", "args", ".", "warmup_updates", ">", "0", ":", "\n", "            ", "self", ".", "warmup_factor", "=", "1.", "/", "args", ".", "warmup_updates", "\n", "", "else", ":", "\n", "            ", "self", ".", "warmup_factor", "=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fixed_schedule.FixedSchedule.add_args": [[25, 35], ["parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add arguments to the parser for this LR scheduler.\"\"\"", "\n", "# fmt: off", "\n", "parser", ".", "add_argument", "(", "'--force-anneal'", ",", "'--fa'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'force annealing at specified epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr-shrink'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "metavar", "=", "'LS'", ",", "\n", "help", "=", "'shrink factor for annealing, lr_new = (lr * lr_shrink)'", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup-updates'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'warmup the learning rate linearly for the first N updates'", ")", "\n", "# fmt: on", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fixed_schedule.FixedSchedule.get_next_lr": [[37, 46], ["min", "len"], "methods", ["None"], ["", "def", "get_next_lr", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "lrs", "=", "self", ".", "args", ".", "lr", "\n", "if", "self", ".", "args", ".", "force_anneal", "is", "None", "or", "epoch", "<", "self", ".", "args", ".", "force_anneal", ":", "\n", "# use fixed LR schedule", "\n", "            ", "next_lr", "=", "lrs", "[", "min", "(", "epoch", ",", "len", "(", "lrs", ")", "-", "1", ")", "]", "\n", "", "else", ":", "\n", "# annneal based on lr_shrink", "\n", "            ", "next_lr", "=", "lrs", "[", "-", "1", "]", "*", "self", ".", "args", ".", "lr_shrink", "**", "(", "epoch", "+", "1", "-", "self", ".", "args", ".", "force_anneal", ")", "\n", "", "return", "next_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fixed_schedule.FixedSchedule.step": [[47, 53], ["super().step", "fixed_schedule.FixedSchedule.get_next_lr", "fixed_schedule.FixedSchedule.optimizer.set_lr", "fixed_schedule.FixedSchedule.optimizer.get_lr"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.polynomial_decay_schedule.PolynomialDecaySchedule.step", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.polynomial_decay_schedule.PolynomialDecaySchedule.get_next_lr", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.set_lr", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.get_lr"], ["", "def", "step", "(", "self", ",", "epoch", ",", "val_loss", "=", "None", ")", ":", "\n", "        ", "\"\"\"Update the learning rate at the end of the given epoch.\"\"\"", "\n", "super", "(", ")", ".", "step", "(", "epoch", ",", "val_loss", ")", "\n", "self", ".", "lr", "=", "self", ".", "get_next_lr", "(", "epoch", ")", "\n", "self", ".", "optimizer", ".", "set_lr", "(", "self", ".", "warmup_factor", "*", "self", ".", "lr", ")", "\n", "return", "self", ".", "optimizer", ".", "get_lr", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fixed_schedule.FixedSchedule.step_update": [[54, 60], ["fixed_schedule.FixedSchedule.optimizer.get_lr", "fixed_schedule.FixedSchedule.optimizer.set_lr", "float"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.get_lr", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.set_lr"], ["", "def", "step_update", "(", "self", ",", "num_updates", ")", ":", "\n", "        ", "\"\"\"Update the learning rate after each update.\"\"\"", "\n", "if", "self", ".", "args", ".", "warmup_updates", ">", "0", "and", "num_updates", "<", "self", ".", "args", ".", "warmup_updates", ":", "\n", "            ", "self", ".", "warmup_factor", "=", "(", "num_updates", "+", "1", ")", "/", "float", "(", "self", ".", "args", ".", "warmup_updates", ")", "\n", "self", ".", "optimizer", ".", "set_lr", "(", "self", ".", "warmup_factor", "*", "self", ".", "lr", ")", "\n", "", "return", "self", ".", "optimizer", ".", "get_lr", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.triangular_lr_scheduler.TriangularSchedule.__init__": [[18, 38], ["FairseqLRScheduler.__init__", "triangular_lr_scheduler.TriangularSchedule.optimizer.set_lr", "len", "ValueError"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.set_lr"], ["def", "__init__", "(", "self", ",", "args", ",", "optimizer", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "optimizer", ")", "\n", "if", "len", "(", "args", ".", "lr", ")", ">", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Cannot use a fixed learning rate schedule with triangular.'", "\n", "' Consider --lr-scheduler=fixed instead.'", "\n", ")", "\n", "\n", "", "lr", "=", "args", ".", "lr", "[", "0", "]", "\n", "\n", "assert", "args", ".", "max_lr", ">", "lr", ",", "'max_lr must be more than lr'", "\n", "self", ".", "min_lr", "=", "lr", "\n", "self", ".", "max_lr", "=", "args", ".", "max_lr", "\n", "self", ".", "stepsize", "=", "args", ".", "lr_period_updates", "//", "2", "\n", "self", ".", "lr_shrink", "=", "args", ".", "lr_shrink", "\n", "self", ".", "shrink_min", "=", "args", ".", "shrink_min", "\n", "\n", "# initial learning rate", "\n", "self", ".", "lr", "=", "self", ".", "min_lr", "\n", "self", ".", "optimizer", ".", "set_lr", "(", "self", ".", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.triangular_lr_scheduler.TriangularSchedule.add_args": [[39, 51], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add arguments to the parser for this LR scheduler.\"\"\"", "\n", "# fmt: off", "\n", "parser", ".", "add_argument", "(", "'--max-lr'", ",", "required", "=", "True", ",", "type", "=", "float", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'max learning rate, must be more than args.lr'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr-period-updates'", ",", "default", "=", "5000", ",", "type", "=", "float", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'initial number of updates per period (cycle length)'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr-shrink'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "metavar", "=", "'LS'", ",", "\n", "help", "=", "'shrink factor for annealing'", ")", "\n", "parser", ".", "add_argument", "(", "'--shrink-min'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'if set, also shrinks min lr'", ")", "\n", "# fmt: on", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.triangular_lr_scheduler.TriangularSchedule.step": [[53, 58], ["super().step", "triangular_lr_scheduler.TriangularSchedule.optimizer.get_lr"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.polynomial_decay_schedule.PolynomialDecaySchedule.step", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.get_lr"], ["", "def", "step", "(", "self", ",", "epoch", ",", "val_loss", "=", "None", ")", ":", "\n", "        ", "\"\"\"Update the learning rate at the end of the given epoch.\"\"\"", "\n", "super", "(", ")", ".", "step", "(", "epoch", ",", "val_loss", ")", "\n", "# we don't change the learning rate at epoch boundaries", "\n", "return", "self", ".", "optimizer", ".", "get_lr", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.triangular_lr_scheduler.TriangularSchedule.step_update": [[59, 75], ["math.floor", "abs", "triangular_lr_scheduler.TriangularSchedule.optimizer.set_lr", "max"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.set_lr"], ["", "def", "step_update", "(", "self", ",", "num_updates", ")", ":", "\n", "        ", "\"\"\"Update the learning rate after each update.\"\"\"", "\n", "cycle", "=", "math", ".", "floor", "(", "num_updates", "/", "(", "2", "*", "self", ".", "stepsize", ")", ")", "\n", "\n", "lr_shrink", "=", "self", ".", "lr_shrink", "**", "cycle", "\n", "max_lr", "=", "self", ".", "max_lr", "*", "lr_shrink", "\n", "if", "self", ".", "shrink_min", ":", "\n", "            ", "min_lr", "=", "self", ".", "min_lr", "*", "lr_shrink", "\n", "", "else", ":", "\n", "            ", "min_lr", "=", "self", ".", "min_lr", "\n", "\n", "", "x", "=", "abs", "(", "num_updates", "/", "self", ".", "stepsize", "-", "2", "*", "(", "cycle", "+", "1", ")", "+", "1", ")", "\n", "self", ".", "lr", "=", "min_lr", "+", "(", "max_lr", "-", "min_lr", ")", "*", "max", "(", "0", ",", "(", "1", "-", "x", ")", ")", "\n", "\n", "self", ".", "optimizer", ".", "set_lr", "(", "self", ".", "lr", ")", "\n", "return", "self", ".", "lr", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.tri_stage_lr_scheduler.TriStageLRSchedule.__init__": [[49, 73], ["FairseqLRScheduler.__init__", "tri_stage_lr_scheduler.TriStageLRSchedule.optimizer.set_lr", "len", "ValueError", "math.log"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.set_lr", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log"], ["def", "__init__", "(", "self", ",", "args", ",", "optimizer", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "optimizer", ")", "\n", "if", "len", "(", "args", ".", "lr", ")", ">", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Cannot use a fixed learning rate schedule with tri-stage lr.'", "\n", "' Consider --lr-scheduler=fixed instead.'", "\n", ")", "\n", "\n", "# calculate LR at each point", "\n", "", "self", ".", "peak_lr", "=", "args", ".", "lr", "[", "0", "]", "\n", "self", ".", "init_lr", "=", "args", ".", "init_lr_scale", "*", "args", ".", "lr", "[", "0", "]", "\n", "self", ".", "final_lr", "=", "args", ".", "final_lr_scale", "*", "args", ".", "lr", "[", "0", "]", "\n", "\n", "# remember the steps at each stage", "\n", "self", ".", "warmup_steps", "=", "args", ".", "warmup_steps", "\n", "self", ".", "hold_steps", "=", "args", ".", "hold_steps", "\n", "self", ".", "decay_steps", "=", "args", ".", "decay_steps", "\n", "\n", "self", ".", "warmup_rate", "=", "(", "self", ".", "peak_lr", "-", "self", ".", "init_lr", ")", "/", "self", ".", "warmup_steps", "\n", "self", ".", "decay_factor", "=", "-", "math", ".", "log", "(", "args", ".", "final_lr_scale", ")", "/", "args", ".", "decay_steps", "\n", "\n", "# initial learning rate", "\n", "self", ".", "lr", "=", "self", ".", "init_lr", "\n", "self", ".", "optimizer", ".", "set_lr", "(", "self", ".", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.tri_stage_lr_scheduler.TriStageLRSchedule.add_args": [[74, 110], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add arguments to the parser for this LR scheduler.\"\"\"", "\n", "# fmt: off", "\n", "parser", ".", "add_argument", "(", "\n", "'--warmup-steps'", ",", "\n", "default", "=", "4000", ",", "\n", "type", "=", "int", ",", "\n", "metavar", "=", "'N'", ",", "\n", "help", "=", "'warmup the learning rate linearly for the first N updates'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--hold-steps'", ",", "\n", "default", "=", "20000", ",", "\n", "type", "=", "int", ",", "\n", "metavar", "=", "'N'", ",", "\n", "help", "=", "'steps in hold stage.'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--decay-steps'", ",", "\n", "default", "=", "60000", ",", "\n", "type", "=", "int", ",", "\n", "metavar", "=", "'N'", ",", "\n", "help", "=", "'steps in decay stages'", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--init-lr-scale'", ",", "\n", "default", "=", "0.01", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"\"\"\n    initial learning rate scale during warmup phase; default is 0.01\"\"\"", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--final-lr-scale'", ",", "\n", "default", "=", "0.01", ",", "\n", "type", "=", "float", ",", "\n", "help", "=", "\"final learning rate scale; default to 0.01\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.tri_stage_lr_scheduler.TriStageLRSchedule._decide_stage": [[113, 137], ["None"], "methods", ["None"], ["", "def", "_decide_stage", "(", "self", ",", "update_step", ")", ":", "\n", "        ", "\"\"\"\n        return stage, and the corresponding steps within the current stage\n        \"\"\"", "\n", "if", "update_step", "<", "self", ".", "warmup_steps", ":", "\n", "# warmup state", "\n", "            ", "return", "0", ",", "update_step", "\n", "\n", "", "offset", "=", "self", ".", "warmup_steps", "\n", "\n", "if", "update_step", "<", "offset", "+", "self", ".", "hold_steps", ":", "\n", "# hold stage", "\n", "            ", "return", "1", ",", "update_step", "-", "offset", "\n", "\n", "", "offset", "+=", "self", ".", "hold_steps", "\n", "\n", "if", "update_step", "<=", "offset", "+", "self", ".", "decay_steps", ":", "\n", "# decay stage", "\n", "            ", "return", "2", ",", "update_step", "-", "offset", "\n", "\n", "", "offset", "+=", "self", ".", "decay_steps", "\n", "\n", "# still here ? constant lr stage", "\n", "return", "3", ",", "update_step", "-", "offset", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.tri_stage_lr_scheduler.TriStageLRSchedule.step": [[138, 143], ["super().step", "tri_stage_lr_scheduler.TriStageLRSchedule.optimizer.get_lr"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.polynomial_decay_schedule.PolynomialDecaySchedule.step", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.get_lr"], ["", "def", "step", "(", "self", ",", "epoch", ",", "val_loss", "=", "None", ")", ":", "\n", "        ", "\"\"\"Update the learning rate at the end of the given epoch.\"\"\"", "\n", "super", "(", ")", ".", "step", "(", "epoch", ",", "val_loss", ")", "\n", "# we don't change the learning rate at epoch boundaries", "\n", "return", "self", ".", "optimizer", ".", "get_lr", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.tri_stage_lr_scheduler.TriStageLRSchedule.step_update": [[144, 161], ["tri_stage_lr_scheduler.TriStageLRSchedule._decide_stage", "tri_stage_lr_scheduler.TriStageLRSchedule.optimizer.set_lr", "math.exp", "ValueError"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.tri_stage_lr_scheduler.TriStageLRSchedule._decide_stage", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.set_lr"], ["", "def", "step_update", "(", "self", ",", "num_updates", ")", ":", "\n", "        ", "\"\"\"Update the learning rate after each update.\"\"\"", "\n", "stage", ",", "steps_in_stage", "=", "self", ".", "_decide_stage", "(", "num_updates", ")", "\n", "if", "stage", "==", "0", ":", "\n", "            ", "self", ".", "lr", "=", "self", ".", "init_lr", "+", "self", ".", "warmup_rate", "*", "steps_in_stage", "\n", "", "elif", "stage", "==", "1", ":", "\n", "            ", "self", ".", "lr", "=", "self", ".", "peak_lr", "\n", "", "elif", "stage", "==", "2", ":", "\n", "            ", "self", ".", "lr", "=", "self", ".", "peak_lr", "*", "math", ".", "exp", "(", "-", "self", ".", "decay_factor", "*", "steps_in_stage", ")", "\n", "", "elif", "stage", "==", "3", ":", "\n", "            ", "self", ".", "lr", "=", "self", ".", "final_lr", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Undefined stage\"", ")", "\n", "\n", "", "self", ".", "optimizer", ".", "set_lr", "(", "self", ".", "lr", ")", "\n", "\n", "return", "self", ".", "lr", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.cosine_lr_scheduler.CosineSchedule.__init__": [[35, 71], ["FairseqLRScheduler.__init__", "cosine_lr_scheduler.CosineSchedule.optimizer.set_lr", "len", "ValueError"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.set_lr"], ["def", "__init__", "(", "self", ",", "args", ",", "optimizer", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "optimizer", ")", "\n", "if", "len", "(", "args", ".", "lr", ")", ">", "1", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'Cannot use a fixed learning rate schedule with cosine.'", "\n", "' Consider --lr-scheduler=fixed instead.'", "\n", ")", "\n", "\n", "", "warmup_end_lr", "=", "args", ".", "max_lr", "\n", "if", "args", ".", "warmup_init_lr", "<", "0", ":", "\n", "            ", "args", ".", "warmup_init_lr", "=", "args", ".", "lr", "[", "0", "]", "\n", "\n", "", "self", ".", "min_lr", "=", "args", ".", "lr", "[", "0", "]", "\n", "self", ".", "max_lr", "=", "args", ".", "max_lr", "\n", "\n", "assert", "self", ".", "max_lr", ">", "self", ".", "min_lr", ",", "'max_lr must be more than lr'", "\n", "\n", "self", ".", "t_mult", "=", "args", ".", "t_mult", "\n", "self", ".", "period", "=", "args", ".", "lr_period_updates", "\n", "\n", "if", "self", ".", "period", "<=", "0", ":", "\n", "            ", "assert", "args", ".", "max_update", ">=", "0", ",", "'Either --max_update or --lr-period-updates must be set'", "\n", "self", ".", "period", "=", "args", ".", "max_update", "-", "args", ".", "warmup_updates", "\n", "\n", "", "if", "args", ".", "warmup_updates", ">", "0", ":", "\n", "# linearly warmup for the first args.warmup_updates", "\n", "            ", "self", ".", "lr_step", "=", "(", "warmup_end_lr", "-", "args", ".", "warmup_init_lr", ")", "/", "args", ".", "warmup_updates", "\n", "", "else", ":", "\n", "            ", "self", ".", "lr_step", "=", "1", "\n", "\n", "", "self", ".", "warmup_updates", "=", "args", ".", "warmup_updates", "\n", "self", ".", "lr_shrink", "=", "args", ".", "lr_shrink", "\n", "\n", "# initial learning rate", "\n", "self", ".", "lr", "=", "args", ".", "warmup_init_lr", "\n", "self", ".", "optimizer", ".", "set_lr", "(", "self", ".", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.cosine_lr_scheduler.CosineSchedule.add_args": [[72, 88], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add arguments to the parser for this LR scheduler.\"\"\"", "\n", "# fmt: off", "\n", "parser", ".", "add_argument", "(", "'--warmup-updates'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'warmup the learning rate linearly for the first N updates'", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup-init-lr'", ",", "default", "=", "-", "1", ",", "type", "=", "float", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'initial learning rate during warmup phase; default is args.lr'", ")", "\n", "parser", ".", "add_argument", "(", "'--max-lr'", ",", "type", "=", "float", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'max learning rate, must be more than args.lr'", ")", "\n", "parser", ".", "add_argument", "(", "'--t-mult'", ",", "default", "=", "1", ",", "type", "=", "float", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'factor to grow the length of each period'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr-period-updates'", ",", "default", "=", "-", "1", ",", "type", "=", "float", ",", "metavar", "=", "'LR'", ",", "\n", "help", "=", "'initial number of updates per period'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr-shrink'", ",", "default", "=", "0.1", ",", "type", "=", "float", ",", "metavar", "=", "'LS'", ",", "\n", "help", "=", "'shrink factor for annealing'", ")", "\n", "# fmt: on", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.cosine_lr_scheduler.CosineSchedule.step": [[90, 95], ["super().step", "cosine_lr_scheduler.CosineSchedule.optimizer.get_lr"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.polynomial_decay_schedule.PolynomialDecaySchedule.step", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.get_lr"], ["", "def", "step", "(", "self", ",", "epoch", ",", "val_loss", "=", "None", ")", ":", "\n", "        ", "\"\"\"Update the learning rate at the end of the given epoch.\"\"\"", "\n", "super", "(", ")", ".", "step", "(", "epoch", ",", "val_loss", ")", "\n", "# we don't change the learning rate at epoch boundaries", "\n", "return", "self", ".", "optimizer", ".", "get_lr", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.cosine_lr_scheduler.CosineSchedule.step_update": [[96, 119], ["cosine_lr_scheduler.CosineSchedule.optimizer.set_lr", "math.floor", "math.floor", "math.log", "math.cos"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.set_lr", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log"], ["", "def", "step_update", "(", "self", ",", "num_updates", ")", ":", "\n", "        ", "\"\"\"Update the learning rate after each update.\"\"\"", "\n", "if", "num_updates", "<", "self", ".", "args", ".", "warmup_updates", ":", "\n", "            ", "self", ".", "lr", "=", "self", ".", "args", ".", "warmup_init_lr", "+", "num_updates", "*", "self", ".", "lr_step", "\n", "", "else", ":", "\n", "            ", "curr_updates", "=", "num_updates", "-", "self", ".", "args", ".", "warmup_updates", "\n", "if", "self", ".", "t_mult", "!=", "1", ":", "\n", "                ", "i", "=", "math", ".", "floor", "(", "math", ".", "log", "(", "1", "-", "curr_updates", "/", "self", ".", "period", "*", "(", "1", "-", "self", ".", "t_mult", ")", ",", "self", ".", "t_mult", ")", ")", "\n", "t_i", "=", "self", ".", "t_mult", "**", "i", "*", "self", ".", "period", "\n", "t_curr", "=", "curr_updates", "-", "(", "1", "-", "self", ".", "t_mult", "**", "i", ")", "/", "(", "1", "-", "self", ".", "t_mult", ")", "*", "self", ".", "period", "\n", "", "else", ":", "\n", "                ", "i", "=", "math", ".", "floor", "(", "curr_updates", "/", "self", ".", "period", ")", "\n", "t_i", "=", "self", ".", "period", "\n", "t_curr", "=", "curr_updates", "-", "(", "self", ".", "period", "*", "i", ")", "\n", "\n", "", "lr_shrink", "=", "self", ".", "lr_shrink", "**", "i", "\n", "min_lr", "=", "self", ".", "min_lr", "*", "lr_shrink", "\n", "max_lr", "=", "self", ".", "max_lr", "*", "lr_shrink", "\n", "\n", "self", ".", "lr", "=", "min_lr", "+", "0.5", "*", "(", "max_lr", "-", "min_lr", ")", "*", "(", "1", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "t_curr", "/", "t_i", ")", ")", "\n", "\n", "", "self", ".", "optimizer", ".", "set_lr", "(", "self", ".", "lr", ")", "\n", "return", "self", ".", "lr", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.polynomial_decay_schedule.PolynomialDecaySchedule.__init__": [[13, 28], ["FairseqLRScheduler.__init__", "polynomial_decay_schedule.PolynomialDecaySchedule.optimizer.set_lr", "getattr"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.set_lr"], ["def", "__init__", "(", "self", ",", "args", ",", "optimizer", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "optimizer", ")", "\n", "\n", "# set defaults", "\n", "args", ".", "warmup_updates", "=", "getattr", "(", "args", ",", "'warmup_updates'", ",", "0", ")", "or", "0", "\n", "\n", "self", ".", "lr", "=", "args", ".", "lr", "[", "0", "]", "\n", "if", "args", ".", "warmup_updates", ">", "0", ":", "\n", "            ", "self", ".", "warmup_factor", "=", "1.", "/", "args", ".", "warmup_updates", "\n", "", "else", ":", "\n", "            ", "self", ".", "warmup_factor", "=", "1", "\n", "", "self", ".", "end_learning_rate", "=", "args", ".", "end_learning_rate", "\n", "self", ".", "total_num_update", "=", "args", ".", "total_num_update", "\n", "self", ".", "power", "=", "args", ".", "power", "\n", "self", ".", "optimizer", ".", "set_lr", "(", "self", ".", "warmup_factor", "*", "self", ".", "lr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.polynomial_decay_schedule.PolynomialDecaySchedule.add_args": [[29, 39], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add arguments to the parser for this LR scheduler.\"\"\"", "\n", "parser", ".", "add_argument", "(", "'--force-anneal'", ",", "'--fa'", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'force annealing at specified epoch'", ")", "\n", "parser", ".", "add_argument", "(", "'--warmup-updates'", ",", "default", "=", "0", ",", "type", "=", "int", ",", "metavar", "=", "'N'", ",", "\n", "help", "=", "'warmup the learning rate linearly for the first N updates'", ")", "\n", "parser", ".", "add_argument", "(", "'--end-learning-rate'", ",", "default", "=", "0.0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--power'", ",", "default", "=", "1.0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--total-num-update'", ",", "default", "=", "1000000", ",", "type", "=", "int", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.polynomial_decay_schedule.PolynomialDecaySchedule.get_next_lr": [[40, 49], ["polynomial_decay_schedule.PolynomialDecaySchedule.optimizer.get_lr", "min", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.get_lr"], ["", "def", "get_next_lr", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "lrs", "=", "self", ".", "args", ".", "lr", "\n", "if", "self", ".", "args", ".", "force_anneal", "is", "None", "or", "epoch", "<", "self", ".", "args", ".", "force_anneal", ":", "\n", "# use fixed LR schedule", "\n", "            ", "next_lr", "=", "lrs", "[", "min", "(", "epoch", ",", "len", "(", "lrs", ")", "-", "1", ")", "]", "\n", "", "else", ":", "\n", "# annneal based on lr_shrink", "\n", "            ", "next_lr", "=", "self", ".", "optimizer", ".", "get_lr", "(", ")", "\n", "", "return", "next_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.polynomial_decay_schedule.PolynomialDecaySchedule.step": [[50, 56], ["super().step", "polynomial_decay_schedule.PolynomialDecaySchedule.get_next_lr", "polynomial_decay_schedule.PolynomialDecaySchedule.optimizer.set_lr", "polynomial_decay_schedule.PolynomialDecaySchedule.optimizer.get_lr"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.polynomial_decay_schedule.PolynomialDecaySchedule.step", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.polynomial_decay_schedule.PolynomialDecaySchedule.get_next_lr", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.set_lr", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.get_lr"], ["", "def", "step", "(", "self", ",", "epoch", ",", "val_loss", "=", "None", ")", ":", "\n", "        ", "\"\"\"Update the learning rate at the end of the given epoch.\"\"\"", "\n", "super", "(", ")", ".", "step", "(", "epoch", ",", "val_loss", ")", "\n", "self", ".", "lr", "=", "self", ".", "get_next_lr", "(", "epoch", ")", "\n", "self", ".", "optimizer", ".", "set_lr", "(", "self", ".", "warmup_factor", "*", "self", ".", "lr", ")", "\n", "return", "self", ".", "optimizer", ".", "get_lr", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.polynomial_decay_schedule.PolynomialDecaySchedule.step_update": [[57, 71], ["polynomial_decay_schedule.PolynomialDecaySchedule.optimizer.set_lr", "polynomial_decay_schedule.PolynomialDecaySchedule.optimizer.get_lr", "float"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.set_lr", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.optim.fp16_optimizer.MemoryEfficientFP16Optimizer.get_lr"], ["", "def", "step_update", "(", "self", ",", "num_updates", ")", ":", "\n", "        ", "\"\"\"Update the learning rate after each update.\"\"\"", "\n", "if", "self", ".", "args", ".", "warmup_updates", ">", "0", "and", "num_updates", "<=", "self", ".", "args", ".", "warmup_updates", ":", "\n", "            ", "self", ".", "warmup_factor", "=", "num_updates", "/", "float", "(", "self", ".", "args", ".", "warmup_updates", ")", "\n", "lr", "=", "self", ".", "warmup_factor", "*", "self", ".", "lr", "\n", "", "elif", "num_updates", ">=", "self", ".", "total_num_update", ":", "\n", "            ", "lr", "=", "self", ".", "end_learning_rate", "\n", "", "else", ":", "\n", "            ", "warmup", "=", "self", ".", "args", ".", "warmup_updates", "\n", "lr_range", "=", "self", ".", "lr", "-", "self", ".", "end_learning_rate", "\n", "pct_remaining", "=", "1", "-", "(", "num_updates", "-", "warmup", ")", "/", "(", "self", ".", "total_num_update", "-", "warmup", ")", "\n", "lr", "=", "lr_range", "*", "pct_remaining", "**", "(", "self", ".", "power", ")", "+", "self", ".", "end_learning_rate", "\n", "", "self", ".", "optimizer", ".", "set_lr", "(", "lr", ")", "\n", "return", "self", ".", "optimizer", ".", "get_lr", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.positional_embedding.PositionalEmbedding": [[12, 34], ["learned_positional_embedding.LearnedPositionalEmbedding", "torch.init.normal_", "sinusoidal_positional_embedding.SinusoidalPositionalEmbedding", "torch.init.constant_"], "function", ["None"], ["num_embeddings", ":", "int", ",", "\n", "embedding_dim", ":", "int", ",", "\n", "padding_idx", ":", "int", ",", "\n", "learned", ":", "bool", "=", "False", ",", "\n", ")", ":", "\n", "    ", "if", "learned", ":", "\n", "# if padding_idx is specified then offset the embedding ids by", "\n", "# this index and adjust num_embeddings appropriately", "\n", "# TODO: The right place for this offset would be inside", "\n", "# LearnedPositionalEmbedding. Move this there for a cleaner implementation.", "\n", "        ", "if", "padding_idx", "is", "not", "None", ":", "\n", "            ", "num_embeddings", "=", "num_embeddings", "+", "padding_idx", "+", "1", "\n", "", "m", "=", "LearnedPositionalEmbedding", "(", "num_embeddings", ",", "embedding_dim", ",", "padding_idx", ")", "\n", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "embedding_dim", "**", "-", "0.5", ")", "\n", "if", "padding_idx", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", "[", "padding_idx", "]", ",", "0", ")", "\n", "", "", "else", ":", "\n", "        ", "m", "=", "SinusoidalPositionalEmbedding", "(", "\n", "embedding_dim", ",", "padding_idx", ",", "init_size", "=", "num_embeddings", "+", "padding_idx", "+", "1", ",", "\n", ")", "\n", "", "return", "m", "\n", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_sentence_encoder_layer.TransformerSentenceEncoderLayer.__init__": [[23, 61], ["torch.Module.__init__", "fairseq.utils.get_activation_fn", "fairseq.modules.MultiheadAttention", "fairseq.modules.LayerNorm", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "fairseq.modules.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.get_activation_fn", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.layer_norm.LayerNorm", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.layer_norm.LayerNorm"], ["def", "__init__", "(", "\n", "self", ",", "\n", "embedding_dim", ":", "int", "=", "768", ",", "\n", "ffn_embedding_dim", ":", "int", "=", "3072", ",", "\n", "num_attention_heads", ":", "int", "=", "8", ",", "\n", "dropout", ":", "float", "=", "0.1", ",", "\n", "attention_dropout", ":", "float", "=", "0.1", ",", "\n", "activation_dropout", ":", "float", "=", "0.1", ",", "\n", "activation_fn", ":", "str", "=", "'relu'", ",", "\n", "add_bias_kv", ":", "bool", "=", "False", ",", "\n", "add_zero_attn", ":", "bool", "=", "False", ",", "\n", "export", ":", "bool", "=", "False", ",", "\n", ")", "->", "None", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# Initialize parameters", "\n", "self", ".", "embedding_dim", "=", "embedding_dim", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "activation_dropout", "=", "activation_dropout", "\n", "\n", "# Initialize blocks", "\n", "self", ".", "activation_fn", "=", "utils", ".", "get_activation_fn", "(", "activation_fn", ")", "\n", "self", ".", "self_attn", "=", "MultiheadAttention", "(", "\n", "self", ".", "embedding_dim", ",", "\n", "num_attention_heads", ",", "\n", "dropout", "=", "attention_dropout", ",", "\n", "add_bias_kv", "=", "add_bias_kv", ",", "\n", "add_zero_attn", "=", "add_zero_attn", ",", "\n", "self_attention", "=", "True", "\n", ")", "\n", "\n", "# layer norm associated with the self attention layer", "\n", "self", ".", "self_attn_layer_norm", "=", "LayerNorm", "(", "self", ".", "embedding_dim", ",", "export", "=", "export", ")", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "self", ".", "embedding_dim", ",", "ffn_embedding_dim", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "ffn_embedding_dim", ",", "self", ".", "embedding_dim", ")", "\n", "\n", "# layer norm associated with the position wise feed-forward NN", "\n", "self", ".", "final_layer_norm", "=", "LayerNorm", "(", "self", ".", "embedding_dim", ",", "export", "=", "export", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_sentence_encoder_layer.TransformerSentenceEncoderLayer.forward": [[62, 93], ["transformer_sentence_encoder_layer.TransformerSentenceEncoderLayer.self_attn", "torch.dropout", "torch.dropout", "torch.dropout", "transformer_sentence_encoder_layer.TransformerSentenceEncoderLayer.self_attn_layer_norm", "transformer_sentence_encoder_layer.TransformerSentenceEncoderLayer.activation_fn", "torch.dropout", "torch.dropout", "torch.dropout", "transformer_sentence_encoder_layer.TransformerSentenceEncoderLayer.fc2", "torch.dropout", "torch.dropout", "torch.dropout", "transformer_sentence_encoder_layer.TransformerSentenceEncoderLayer.final_layer_norm", "transformer_sentence_encoder_layer.TransformerSentenceEncoderLayer.fc1"], "methods", ["None"], ["", "def", "forward", "(", "\n", "self", ",", "\n", "x", ":", "torch", ".", "Tensor", ",", "\n", "self_attn_mask", ":", "torch", ".", "Tensor", "=", "None", ",", "\n", "self_attn_padding_mask", ":", "torch", ".", "Tensor", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        LayerNorm is applied either before or after the self-attention/ffn\n        modules similar to the original Transformer imlementation.\n        \"\"\"", "\n", "residual", "=", "x", "\n", "x", ",", "attn", "=", "self", ".", "self_attn", "(", "\n", "query", "=", "x", ",", "\n", "key", "=", "x", ",", "\n", "value", "=", "x", ",", "\n", "key_padding_mask", "=", "self_attn_padding_mask", ",", "\n", "need_weights", "=", "False", ",", "\n", "attn_mask", "=", "self_attn_mask", ",", "\n", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "residual", "+", "x", "\n", "x", "=", "self", ".", "self_attn_layer_norm", "(", "x", ")", "\n", "\n", "residual", "=", "x", "\n", "x", "=", "self", ".", "activation_fn", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "activation_dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "residual", "+", "x", "\n", "x", "=", "self", ".", "final_layer_norm", "(", "x", ")", "\n", "return", "x", ",", "attn", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.adaptive_input.AdaptiveInput.__init__": [[15, 57], ["torch.nn.Module.__init__", "torch.nn.ModuleList", "range", "adaptive_input.AdaptiveInput.apply", "adaptive_input.AdaptiveInput.register_buffer", "len", "int", "torch.nn.Sequential", "adaptive_input.AdaptiveInput.embeddings.append", "isinstance", "torch.FloatTensor", "torch.nn.Embedding", "torch.nn.Linear", "torch.nn.init.normal_", "torch.nn.init.constant_", "hasattr", "torch.nn.init.xavier_uniform_"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.Embedding", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "vocab_size", ":", "int", ",", "\n", "padding_idx", ":", "int", ",", "\n", "initial_dim", ":", "int", ",", "\n", "factor", ":", "float", ",", "\n", "output_dim", ":", "int", ",", "\n", "cutoff", ":", "List", "[", "int", "]", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "vocab_size", ">", "cutoff", "[", "-", "1", "]", ":", "\n", "            ", "cutoff", "=", "cutoff", "+", "[", "vocab_size", "]", "\n", "", "else", ":", "\n", "            ", "assert", "vocab_size", "==", "cutoff", "[", "\n", "-", "1", "]", ",", "'cannot specify cutoff larger than vocab size'", "\n", "\n", "", "self", ".", "cutoff", "=", "cutoff", "\n", "self", ".", "embedding_dim", "=", "output_dim", "\n", "self", ".", "padding_idx", "=", "padding_idx", "\n", "\n", "self", ".", "embeddings", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cutoff", ")", ")", ":", "\n", "            ", "prev", "=", "self", ".", "cutoff", "[", "i", "-", "1", "]", "if", "i", ">", "0", "else", "0", "\n", "size", "=", "self", ".", "cutoff", "[", "i", "]", "-", "prev", "\n", "dim", "=", "int", "(", "initial_dim", "//", "(", "factor", "**", "i", ")", ")", "\n", "seq", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Embedding", "(", "size", ",", "dim", ",", "self", ".", "padding_idx", ")", ",", "\n", "nn", ".", "Linear", "(", "dim", ",", "output_dim", ",", "bias", "=", "False", ")", "\n", ")", "\n", "self", ".", "embeddings", ".", "append", "(", "seq", ")", "\n", "self", ".", "padding_idx", "=", "None", "\n", "", "self", ".", "padding_idx", "=", "padding_idx", "\n", "\n", "def", "init_weights", "(", "m", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Embedding", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "mean", "=", "0", ",", "std", "=", "m", ".", "weight", ".", "shape", "[", "1", "]", "**", "-", "0.5", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", "[", "padding_idx", "]", ",", "0", ")", "\n", "", "elif", "hasattr", "(", "m", ",", "'weight'", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "\n", "", "", "self", ".", "apply", "(", "init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.adaptive_input.AdaptiveInput.weights_for_band": [[58, 60], ["None"], "methods", ["None"], ["self", ".", "register_buffer", "(", "'_float_tensor'", ",", "torch", ".", "FloatTensor", "(", "1", ")", ")", "\n", "\n", "", "def", "weights_for_band", "(", "self", ",", "band", ":", "int", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.adaptive_input.AdaptiveInput.forward": [[61, 73], ["adaptive_input.AdaptiveInput._float_tensor.new", "range", "len", "input.lt", "input.lt.any", "input.lt.mul_", "input.ge"], "methods", ["None"], ["        ", "return", "self", ".", "embeddings", "[", "band", "]", "[", "0", "]", ".", "weight", ",", "self", ".", "embeddings", "[", "band", "]", "[", "1", "]", ".", "weight", "\n", "\n", "", "def", "forward", "(", "self", ",", "input", ":", "torch", ".", "Tensor", ")", ":", "\n", "        ", "result", "=", "self", ".", "_float_tensor", ".", "new", "(", "input", ".", "shape", "+", "(", "self", ".", "embedding_dim", ",", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cutoff", ")", ")", ":", "\n", "            ", "mask", "=", "input", ".", "lt", "(", "self", ".", "cutoff", "[", "i", "]", ")", "\n", "if", "i", ">", "0", ":", "\n", "                ", "mask", ".", "mul_", "(", "input", ".", "ge", "(", "self", ".", "cutoff", "[", "i", "-", "1", "]", ")", ")", "\n", "chunk_input", "=", "input", "[", "mask", "]", "-", "self", ".", "cutoff", "[", "i", "-", "1", "]", "\n", "", "else", ":", "\n", "                ", "chunk_input", "=", "input", "[", "mask", "]", "\n", "", "if", "mask", ".", "any", "(", ")", ":", "\n", "                ", "result", "[", "mask", "]", "=", "self", ".", "embeddings", "[", "i", "]", "(", "chunk_input", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.grad_multiply.GradMultiply.forward": [[10, 15], ["x.new"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "scale", ")", ":", "\n", "        ", "ctx", ".", "scale", "=", "scale", "\n", "res", "=", "x", ".", "new", "(", "x", ")", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.grad_multiply.GradMultiply.backward": [[16, 19], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad", ")", ":", "\n", "        ", "return", "grad", "*", "ctx", ".", "scale", ",", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.learned_positional_embedding.LearnedPositionalEmbedding.__init__": [[19, 27], ["torch.Embedding.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "num_embeddings", ":", "int", ",", "\n", "embedding_dim", ":", "int", ",", "\n", "padding_idx", ":", "int", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_embeddings", ",", "embedding_dim", ",", "padding_idx", ")", "\n", "self", ".", "onnx_trace", "=", "False", "\n", "if", "self", ".", "padding_idx", "is", "not", "None", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.learned_positional_embedding.LearnedPositionalEmbedding.forward": [[28, 44], ["super().forward", "input.data.new().fill_", "fairseq.utils.make_positions", "int", "input.data.new", "input.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.forward", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.make_positions", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["            ", "self", ".", "max_positions", "=", "self", ".", "num_embeddings", "-", "self", ".", "padding_idx", "-", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "max_positions", "=", "self", ".", "num_embeddings", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "input", ",", "incremental_state", "=", "None", ",", "positions", "=", "None", ")", ":", "\n", "        ", "\"\"\"Input is expected to be of size [bsz x seqlen].\"\"\"", "\n", "assert", "(", "\n", "(", "positions", "is", "None", ")", "or", "(", "self", ".", "padding_idx", "is", "None", ")", "\n", ")", ",", "\"If positions is pre-computed then padding_idx should not be set.\"", "\n", "\n", "if", "positions", "is", "None", ":", "\n", "            ", "if", "incremental_state", "is", "not", "None", ":", "\n", "# positions is the same for every token when decoding a single step", "\n", "# Without the int() cast, it doesn't work in some cases when exporting to ONNX", "\n", "                ", "positions", "=", "input", ".", "data", ".", "new", "(", "1", ",", "1", ")", ".", "fill_", "(", "int", "(", "self", ".", "padding_idx", "+", "input", ".", "size", "(", "1", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "positions", "=", "utils", ".", "make_positions", "(", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.multihead_attention.MultiheadAttention.__init__": [[21, 65], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "multihead_attention.MultiheadAttention.reset_parameters", "hasattr", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer.reset_parameters"], ["\n", "\n", "def", "__init__", "(", "\n", "self", ",", "\n", "embed_dim", ",", "\n", "num_heads", ",", "\n", "kdim", "=", "None", ",", "\n", "vdim", "=", "None", ",", "\n", "dropout", "=", "0.0", ",", "\n", "bias", "=", "True", ",", "\n", "add_bias_kv", "=", "False", ",", "\n", "add_zero_attn", "=", "False", ",", "\n", "self_attention", "=", "False", ",", "\n", "encoder_decoder_attention", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "self", ".", "kdim", "=", "kdim", "if", "kdim", "is", "not", "None", "else", "embed_dim", "\n", "self", ".", "vdim", "=", "vdim", "if", "vdim", "is", "not", "None", "else", "embed_dim", "\n", "self", ".", "qkv_same_dim", "=", "self", ".", "kdim", "==", "embed_dim", "and", "self", ".", "vdim", "==", "embed_dim", "\n", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "head_dim", "=", "embed_dim", "//", "num_heads", "\n", "assert", "(", "\n", "self", ".", "head_dim", "*", "num_heads", "==", "self", ".", "embed_dim", "\n", ")", ",", "\"embed_dim must be divisible by num_heads\"", "\n", "self", ".", "scaling", "=", "self", ".", "head_dim", "**", "-", "0.5", "\n", "\n", "self", ".", "self_attention", "=", "self_attention", "\n", "self", ".", "encoder_decoder_attention", "=", "encoder_decoder_attention", "\n", "\n", "assert", "not", "self", ".", "self_attention", "or", "self", ".", "qkv_same_dim", ",", "(", "\n", "\"Self-attention requires query, key and \"", "\"value to be of the same size\"", "\n", ")", "\n", "\n", "self", ".", "k_proj", "=", "nn", ".", "Linear", "(", "self", ".", "kdim", ",", "embed_dim", ",", "bias", "=", "bias", ")", "\n", "self", ".", "v_proj", "=", "nn", ".", "Linear", "(", "self", ".", "vdim", ",", "embed_dim", ",", "bias", "=", "bias", ")", "\n", "self", ".", "q_proj", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "embed_dim", ",", "bias", "=", "bias", ")", "\n", "\n", "self", ".", "out_proj", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "embed_dim", ",", "bias", "=", "bias", ")", "\n", "\n", "if", "add_bias_kv", ":", "\n", "            ", "self", ".", "bias_k", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.multihead_attention.MultiheadAttention.prepare_for_onnx_export_": [[66, 68], ["None"], "methods", ["None"], ["self", ".", "bias_v", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "1", ",", "1", ",", "embed_dim", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bias_k", "=", "self", ".", "bias_v", "=", "None", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.multihead_attention.MultiheadAttention.reset_parameters": [[69, 88], ["torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "math.sqrt", "math.sqrt", "math.sqrt"], "methods", ["None"], ["\n", "", "self", ".", "add_zero_attn", "=", "add_zero_attn", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n", "self", ".", "onnx_trace", "=", "False", "\n", "\n", "self", ".", "enable_torch_version", "=", "False", "\n", "if", "hasattr", "(", "F", ",", "\"multi_head_attention_forward\"", ")", ":", "\n", "            ", "self", ".", "enable_torch_version", "=", "True", "\n", "", "else", ":", "\n", "            ", "self", ".", "enable_torch_version", "=", "False", "\n", "\n", "", "", "def", "prepare_for_onnx_export_", "(", "self", ")", ":", "\n", "        ", "self", ".", "onnx_trace", "=", "True", "\n", "\n", "", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "qkv_same_dim", ":", "\n", "# Empirically observed the convergence to be much better with", "\n", "# the scaled initialization", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.multihead_attention.MultiheadAttention.forward": [[89, 280], ["query.size", "multihead_attention.MultiheadAttention.contiguous().view().transpose", "torch.cat.size", "torch.cat.size", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "multihead_attention.MultiheadAttention.apply_sparse_mask", "fairseq.utils.softmax", "fairseq.utils.softmax.type_as", "torch.dropout", "torch.dropout", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "multihead_attention.MultiheadAttention.out_proj", "list", "torch.multi_head_attention_forward", "torch.multi_head_attention_forward", "multihead_attention.MultiheadAttention._get_input_buffer", "multihead_attention.MultiheadAttention.q_proj", "multihead_attention.MultiheadAttention.k_proj", "multihead_attention.MultiheadAttention.v_proj", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.contiguous().view().transpose", "torch.cat.contiguous().view().transpose", "torch.cat.contiguous().view().transpose", "torch.cat.contiguous().view().transpose", "multihead_attention.MultiheadAttention._append_prev_key_padding_mask", "torch.cat.view", "torch.cat.view", "torch.cat.view", "torch.cat.view", "multihead_attention.MultiheadAttention._set_input_buffer", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.transpose", "torch.cat.transpose", "list", "attn_mask.repeat.repeat.unsqueeze", "attn_weights.mean.mean.view", "attn_weights.mean.mean.masked_fill", "attn_weights.mean.mean.view", "fairseq.utils.softmax.type_as", "list", "attn.transpose().contiguous().view.transpose().contiguous().view.contiguous().view", "attn.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "fairseq.utils.softmax.view().transpose", "query.size", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "multihead_attention.MultiheadAttention.q_proj", "multihead_attention.MultiheadAttention.q_proj", "multihead_attention.MultiheadAttention.k_proj", "multihead_attention.MultiheadAttention.v_proj", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "multihead_attention.MultiheadAttention.contiguous().view", "saved_state[].view", "saved_state[].view", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "attn_weights.mean.mean.size", "attn_mask.repeat.repeat.repeat", "torch.cat.unsqueeze().unsqueeze", "torch.cat.unsqueeze().unsqueeze", "float", "attn.transpose().contiguous().view.transpose().contiguous().view.size", "attn.transpose().contiguous().view.transpose().contiguous().view.size", "attn_weights.mean.mean.mean", "multihead_attention.MultiheadAttention.k_proj", "multihead_attention.MultiheadAttention.v_proj", "multihead_attention.MultiheadAttention.bias_k.repeat", "multihead_attention.MultiheadAttention.bias_v.repeat", "torch.cat.contiguous().view", "torch.cat.contiguous().view", "torch.cat.contiguous().view", "torch.cat.contiguous().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "multihead_attention.MultiheadAttention.get", "torch.cat.size", "torch.cat.size", "torch.cat.new_zeros", "torch.cat.new_zeros", "torch.cat.new_zeros", "torch.cat.new_zeros", "attn_weights.mean.mean.size", "attn.transpose().contiguous().view.transpose().contiguous().view.contiguous", "attn.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "fairseq.utils.softmax.view", "attn_mask.repeat.repeat.new_zeros", "torch.cat.new_zeros", "torch.cat.new_zeros", "multihead_attention.MultiheadAttention.contiguous", "attn_mask.repeat.repeat.new_zeros", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.zeros().type_as", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "attn_mask.repeat.repeat.size", "torch.cat.size", "torch.cat.size", "torch.cat.contiguous", "torch.cat.contiguous", "torch.cat.contiguous", "torch.cat.contiguous", "attn_mask.repeat.repeat.size", "attn.transpose().contiguous().view.transpose().contiguous().view.transpose", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat.size", "torch.cat.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.sparse_multihead_attention.SparseMultiheadAttention.apply_sparse_mask", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer._get_input_buffer", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.multihead_attention.MultiheadAttention._append_prev_key_padding_mask", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer._set_input_buffer", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["            ", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "k_proj", ".", "weight", ",", "gain", "=", "1", "/", "math", ".", "sqrt", "(", "2", ")", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "v_proj", ".", "weight", ",", "gain", "=", "1", "/", "math", ".", "sqrt", "(", "2", ")", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "q_proj", ".", "weight", ",", "gain", "=", "1", "/", "math", ".", "sqrt", "(", "2", ")", ")", "\n", "", "else", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "k_proj", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "v_proj", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "q_proj", ".", "weight", ")", "\n", "\n", "", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "out_proj", ".", "weight", ")", "\n", "if", "self", ".", "out_proj", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "self", ".", "out_proj", ".", "bias", ",", "0.", ")", "\n", "", "if", "self", ".", "bias_k", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "bias_k", ")", "\n", "", "if", "self", ".", "bias_v", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "bias_v", ")", "\n", "\n", "", "", "def", "forward", "(", "\n", "self", ",", "\n", "query", ",", "\n", "key", ":", "Optional", "[", "Tensor", "]", ",", "\n", "value", ":", "Optional", "[", "Tensor", "]", ",", "\n", "key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "incremental_state", ":", "Optional", "[", "Dict", "[", "str", ",", "Dict", "[", "str", ",", "Optional", "[", "Tensor", "]", "]", "]", "]", "=", "None", ",", "\n", "need_weights", ":", "bool", "=", "True", ",", "\n", "static_kv", ":", "bool", "=", "False", ",", "\n", "attn_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "before_softmax", ":", "bool", "=", "False", ",", "\n", "need_head_weights", ":", "bool", "=", "False", ",", "\n", ")", "->", "Tuple", "[", "Tensor", ",", "Optional", "[", "Tensor", "]", "]", ":", "\n", "        ", "\"\"\"Input shape: Time x Batch x Channel\n\n        Args:\n            key_padding_mask (ByteTensor, optional): mask to exclude\n                keys that are pads, of shape `(batch, src_len)`, where\n                padding elements are indicated by 1s.\n            need_weights (bool, optional): return the attention weights,\n                averaged over heads (default: False).\n            attn_mask (ByteTensor, optional): typically used to\n                implement causal attention, where the mask prevents the\n                attention from looking forward in time (default: None).\n            before_softmax (bool, optional): return the raw attention\n                weights and values before the attention softmax.\n            need_head_weights (bool, optional): return the attention\n                weights for each head. Implies *need_weights*. Default:\n                return the average attention weights over all heads.\n        \"\"\"", "\n", "if", "need_head_weights", ":", "\n", "            ", "need_weights", "=", "True", "\n", "\n", "", "tgt_len", ",", "bsz", ",", "embed_dim", "=", "query", ".", "size", "(", ")", "\n", "assert", "embed_dim", "==", "self", ".", "embed_dim", "\n", "assert", "list", "(", "query", ".", "size", "(", ")", ")", "==", "[", "tgt_len", ",", "bsz", ",", "embed_dim", "]", "\n", "\n", "if", "(", "\n", "self", ".", "enable_torch_version", "\n", "and", "not", "self", ".", "onnx_trace", "\n", "and", "incremental_state", "is", "None", "\n", "and", "not", "static_kv", "\n", ")", ":", "\n", "            ", "assert", "key", "is", "not", "None", "and", "value", "is", "not", "None", "\n", "return", "F", ".", "multi_head_attention_forward", "(", "\n", "query", ",", "\n", "key", ",", "\n", "value", ",", "\n", "self", ".", "embed_dim", ",", "\n", "self", ".", "num_heads", ",", "\n", "torch", ".", "empty", "(", "[", "0", "]", ")", ",", "\n", "torch", ".", "cat", "(", "(", "self", ".", "q_proj", ".", "bias", ",", "self", ".", "k_proj", ".", "bias", ",", "self", ".", "v_proj", ".", "bias", ")", ")", ",", "\n", "self", ".", "bias_k", ",", "\n", "self", ".", "bias_v", ",", "\n", "self", ".", "add_zero_attn", ",", "\n", "self", ".", "dropout", ",", "\n", "self", ".", "out_proj", ".", "weight", ",", "\n", "self", ".", "out_proj", ".", "bias", ",", "\n", "self", ".", "training", ",", "\n", "key_padding_mask", ",", "\n", "need_weights", ",", "\n", "attn_mask", ",", "\n", "use_separate_proj_weight", "=", "True", ",", "\n", "q_proj_weight", "=", "self", ".", "q_proj", ".", "weight", ",", "\n", "k_proj_weight", "=", "self", ".", "k_proj", ".", "weight", ",", "\n", "v_proj_weight", "=", "self", ".", "v_proj", ".", "weight", ",", "\n", ")", "\n", "\n", "", "if", "incremental_state", "is", "not", "None", ":", "\n", "            ", "saved_state", "=", "self", ".", "_get_input_buffer", "(", "incremental_state", ")", "\n", "if", "saved_state", "is", "not", "None", "and", "\"prev_key\"", "in", "saved_state", ":", "\n", "# previous time steps are cached - no need to recompute", "\n", "# key and value if they are static", "\n", "                ", "if", "static_kv", ":", "\n", "                    ", "assert", "self", ".", "encoder_decoder_attention", "and", "not", "self", ".", "self_attention", "\n", "key", "=", "value", "=", "None", "\n", "", "", "", "else", ":", "\n", "            ", "saved_state", "=", "None", "\n", "\n", "", "if", "self", ".", "self_attention", ":", "\n", "            ", "q", "=", "self", ".", "q_proj", "(", "query", ")", "\n", "k", "=", "self", ".", "k_proj", "(", "query", ")", "\n", "v", "=", "self", ".", "v_proj", "(", "query", ")", "\n", "", "elif", "self", ".", "encoder_decoder_attention", ":", "\n", "# encoder-decoder attention", "\n", "            ", "q", "=", "self", ".", "q_proj", "(", "query", ")", "\n", "if", "key", "is", "None", ":", "\n", "                ", "assert", "value", "is", "None", "\n", "k", "=", "v", "=", "None", "\n", "", "else", ":", "\n", "                ", "k", "=", "self", ".", "k_proj", "(", "key", ")", "\n", "v", "=", "self", ".", "v_proj", "(", "key", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "assert", "key", "is", "not", "None", "and", "value", "is", "not", "None", "\n", "q", "=", "self", ".", "q_proj", "(", "query", ")", "\n", "k", "=", "self", ".", "k_proj", "(", "key", ")", "\n", "v", "=", "self", ".", "v_proj", "(", "value", ")", "\n", "", "q", "*=", "self", ".", "scaling", "\n", "\n", "if", "self", ".", "bias_k", "is", "not", "None", ":", "\n", "            ", "assert", "self", ".", "bias_v", "is", "not", "None", "\n", "k", "=", "torch", ".", "cat", "(", "[", "k", ",", "self", ".", "bias_k", ".", "repeat", "(", "1", ",", "bsz", ",", "1", ")", "]", ")", "\n", "v", "=", "torch", ".", "cat", "(", "[", "v", ",", "self", ".", "bias_v", ".", "repeat", "(", "1", ",", "bsz", ",", "1", ")", "]", ")", "\n", "if", "attn_mask", "is", "not", "None", ":", "\n", "                ", "attn_mask", "=", "torch", ".", "cat", "(", "\n", "[", "attn_mask", ",", "attn_mask", ".", "new_zeros", "(", "attn_mask", ".", "size", "(", "0", ")", ",", "1", ")", "]", ",", "dim", "=", "1", "\n", ")", "\n", "", "if", "key_padding_mask", "is", "not", "None", ":", "\n", "                ", "key_padding_mask", "=", "torch", ".", "cat", "(", "\n", "[", "\n", "key_padding_mask", ",", "\n", "key_padding_mask", ".", "new_zeros", "(", "key_padding_mask", ".", "size", "(", "0", ")", ",", "1", ")", ",", "\n", "]", ",", "\n", "dim", "=", "1", ",", "\n", ")", "\n", "\n", "", "", "q", "=", "(", "\n", "q", ".", "contiguous", "(", ")", "\n", ".", "view", "(", "tgt_len", ",", "bsz", "*", "self", ".", "num_heads", ",", "self", ".", "head_dim", ")", "\n", ".", "transpose", "(", "0", ",", "1", ")", "\n", ")", "\n", "if", "k", "is", "not", "None", ":", "\n", "            ", "k", "=", "(", "\n", "k", ".", "contiguous", "(", ")", "\n", ".", "view", "(", "-", "1", ",", "bsz", "*", "self", ".", "num_heads", ",", "self", ".", "head_dim", ")", "\n", ".", "transpose", "(", "0", ",", "1", ")", "\n", ")", "\n", "", "if", "v", "is", "not", "None", ":", "\n", "            ", "v", "=", "(", "\n", "v", ".", "contiguous", "(", ")", "\n", ".", "view", "(", "-", "1", ",", "bsz", "*", "self", ".", "num_heads", ",", "self", ".", "head_dim", ")", "\n", ".", "transpose", "(", "0", ",", "1", ")", "\n", ")", "\n", "\n", "", "if", "saved_state", "is", "not", "None", ":", "\n", "# saved states are stored with shape (bsz, num_heads, seq_len, head_dim)", "\n", "            ", "if", "\"prev_key\"", "in", "saved_state", ":", "\n", "                ", "_prev_key", "=", "saved_state", "[", "\"prev_key\"", "]", "\n", "assert", "_prev_key", "is", "not", "None", "\n", "prev_key", "=", "_prev_key", ".", "view", "(", "bsz", "*", "self", ".", "num_heads", ",", "-", "1", ",", "self", ".", "head_dim", ")", "\n", "if", "static_kv", ":", "\n", "                    ", "k", "=", "prev_key", "\n", "", "else", ":", "\n", "                    ", "assert", "k", "is", "not", "None", "\n", "k", "=", "torch", ".", "cat", "(", "[", "prev_key", ",", "k", "]", ",", "dim", "=", "1", ")", "\n", "", "", "if", "\"prev_value\"", "in", "saved_state", ":", "\n", "                ", "_prev_value", "=", "saved_state", "[", "\"prev_value\"", "]", "\n", "assert", "_prev_value", "is", "not", "None", "\n", "prev_value", "=", "_prev_value", ".", "view", "(", "bsz", "*", "self", ".", "num_heads", ",", "-", "1", ",", "self", ".", "head_dim", ")", "\n", "if", "static_kv", ":", "\n", "                    ", "v", "=", "prev_value", "\n", "", "else", ":", "\n", "                    ", "assert", "v", "is", "not", "None", "\n", "v", "=", "torch", ".", "cat", "(", "[", "prev_value", ",", "v", "]", ",", "dim", "=", "1", ")", "\n", "", "", "prev_key_padding_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", "\n", "if", "\"prev_key_padding_mask\"", "in", "saved_state", ":", "\n", "                ", "prev_key_padding_mask", "=", "saved_state", "[", "\"prev_key_padding_mask\"", "]", "\n", "", "assert", "k", "is", "not", "None", "and", "v", "is", "not", "None", "\n", "key_padding_mask", "=", "MultiheadAttention", ".", "_append_prev_key_padding_mask", "(", "\n", "key_padding_mask", "=", "key_padding_mask", ",", "\n", "prev_key_padding_mask", "=", "prev_key_padding_mask", ",", "\n", "batch_size", "=", "bsz", ",", "\n", "src_len", "=", "k", ".", "size", "(", "1", ")", ",", "\n", "static_kv", "=", "static_kv", ",", "\n", ")", "\n", "\n", "saved_state", "[", "\"prev_key\"", "]", "=", "k", ".", "view", "(", "bsz", ",", "self", ".", "num_heads", ",", "-", "1", ",", "self", ".", "head_dim", ")", "\n", "saved_state", "[", "\"prev_value\"", "]", "=", "v", ".", "view", "(", "bsz", ",", "self", ".", "num_heads", ",", "-", "1", ",", "self", ".", "head_dim", ")", "\n", "saved_state", "[", "\"prev_key_padding_mask\"", "]", "=", "key_padding_mask", "\n", "# In this branch incremental_state is never None", "\n", "assert", "incremental_state", "is", "not", "None", "\n", "incremental_state", "=", "self", ".", "_set_input_buffer", "(", "incremental_state", ",", "saved_state", ")", "\n", "", "assert", "k", "is", "not", "None", "\n", "src_len", "=", "k", ".", "size", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.multihead_attention.MultiheadAttention._append_prev_key_padding_mask": [[281, 308], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros().bool", "torch.zeros().bool", "torch.zeros().bool", "torch.zeros().bool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "filler.cuda.cuda.cuda", "torch.zeros().bool", "torch.zeros().bool", "torch.zeros().bool", "torch.zeros().bool", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "filler.cuda.cuda.cuda", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "prev_key_padding_mask.size", "torch.cat.size", "torch.cat.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["# This is part of a workaround to get around fork/join parallelism", "\n", "# not supporting Optional types.", "\n", "if", "key_padding_mask", "is", "not", "None", "and", "key_padding_mask", ".", "dim", "(", ")", "==", "0", ":", "\n", "            ", "key_padding_mask", "=", "None", "\n", "\n", "", "if", "key_padding_mask", "is", "not", "None", ":", "\n", "            ", "assert", "key_padding_mask", ".", "size", "(", "0", ")", "==", "bsz", "\n", "assert", "key_padding_mask", ".", "size", "(", "1", ")", "==", "src_len", "\n", "\n", "", "if", "self", ".", "add_zero_attn", ":", "\n", "            ", "assert", "v", "is", "not", "None", "\n", "src_len", "+=", "1", "\n", "k", "=", "torch", ".", "cat", "(", "[", "k", ",", "k", ".", "new_zeros", "(", "(", "k", ".", "size", "(", "0", ")", ",", "1", ")", "+", "k", ".", "size", "(", ")", "[", "2", ":", "]", ")", "]", ",", "dim", "=", "1", ")", "\n", "v", "=", "torch", ".", "cat", "(", "[", "v", ",", "v", ".", "new_zeros", "(", "(", "v", ".", "size", "(", "0", ")", ",", "1", ")", "+", "v", ".", "size", "(", ")", "[", "2", ":", "]", ")", "]", ",", "dim", "=", "1", ")", "\n", "if", "attn_mask", "is", "not", "None", ":", "\n", "                ", "attn_mask", "=", "torch", ".", "cat", "(", "\n", "[", "attn_mask", ",", "attn_mask", ".", "new_zeros", "(", "attn_mask", ".", "size", "(", "0", ")", ",", "1", ")", "]", ",", "dim", "=", "1", "\n", ")", "\n", "", "if", "key_padding_mask", "is", "not", "None", ":", "\n", "                ", "key_padding_mask", "=", "torch", ".", "cat", "(", "\n", "[", "\n", "key_padding_mask", ",", "\n", "torch", ".", "zeros", "(", "key_padding_mask", ".", "size", "(", "0", ")", ",", "1", ")", ".", "type_as", "(", "\n", "key_padding_mask", "\n", ")", ",", "\n", "]", ",", "\n", "dim", "=", "1", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.multihead_attention.MultiheadAttention.reorder_incremental_state": [[309, 317], ["multihead_attention.MultiheadAttention._get_input_buffer", "multihead_attention.MultiheadAttention.keys", "multihead_attention.MultiheadAttention._set_input_buffer", "input_buffer[].index_select"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer._get_input_buffer", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer._set_input_buffer"], ["\n", "", "", "attn_weights", "=", "torch", ".", "bmm", "(", "q", ",", "k", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "attn_weights", "=", "MultiheadAttention", ".", "apply_sparse_mask", "(", "attn_weights", ",", "tgt_len", ",", "src_len", ",", "bsz", ")", "\n", "\n", "assert", "list", "(", "attn_weights", ".", "size", "(", ")", ")", "==", "[", "bsz", "*", "self", ".", "num_heads", ",", "tgt_len", ",", "src_len", "]", "\n", "\n", "if", "attn_mask", "is", "not", "None", ":", "\n", "            ", "attn_mask", "=", "attn_mask", ".", "unsqueeze", "(", "0", ")", "\n", "if", "self", ".", "onnx_trace", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.multihead_attention.MultiheadAttention._get_input_buffer": [[318, 324], ["fairseq.utils.get_incremental_state"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.get_incremental_state"], ["                ", "attn_mask", "=", "attn_mask", ".", "repeat", "(", "attn_weights", ".", "size", "(", "0", ")", ",", "1", ",", "1", ")", "\n", "", "attn_weights", "+=", "attn_mask", "\n", "\n", "", "if", "key_padding_mask", "is", "not", "None", ":", "\n", "# don't attend to padding symbols", "\n", "            ", "attn_weights", "=", "attn_weights", ".", "view", "(", "bsz", ",", "self", ".", "num_heads", ",", "tgt_len", ",", "src_len", ")", "\n", "attn_weights", "=", "attn_weights", ".", "masked_fill", "(", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.multihead_attention.MultiheadAttention._set_input_buffer": [[325, 331], ["fairseq.utils.set_incremental_state"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.set_incremental_state"], ["key_padding_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", ".", "to", "(", "torch", ".", "bool", ")", ",", "float", "(", "\"-inf\"", ")", "\n", ")", "\n", "attn_weights", "=", "attn_weights", ".", "view", "(", "bsz", "*", "self", ".", "num_heads", ",", "tgt_len", ",", "src_len", ")", "\n", "\n", "", "if", "before_softmax", ":", "\n", "            ", "return", "attn_weights", ",", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.multihead_attention.MultiheadAttention.apply_sparse_mask": [[333, 335], ["None"], "methods", ["None"], ["attn_weights", ",", "dim", "=", "-", "1", ",", "onnx_trace", "=", "self", ".", "onnx_trace", "\n", ")", "\n", "attn_weights", "=", "attn_weights_float", ".", "type_as", "(", "attn_weights", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.multihead_attention.MultiheadAttention.upgrade_state_dict_named": [[336, 364], ["state_dict.keys", "items_to_add.items", "k.endswith", "int", "keys_to_remove.append", "state_dict.keys", "int", "keys_to_remove.append"], "methods", ["None"], ["attn_probs", "=", "F", ".", "dropout", "(", "\n", "attn_weights_float", ".", "type_as", "(", "attn_weights", ")", ",", "\n", "p", "=", "self", ".", "dropout", ",", "\n", "training", "=", "self", ".", "training", ",", "\n", ")", "\n", "assert", "v", "is", "not", "None", "\n", "attn", "=", "torch", ".", "bmm", "(", "attn_probs", ",", "v", ")", "\n", "assert", "list", "(", "attn", ".", "size", "(", ")", ")", "==", "[", "bsz", "*", "self", ".", "num_heads", ",", "tgt_len", ",", "self", ".", "head_dim", "]", "\n", "if", "self", ".", "onnx_trace", "and", "attn", ".", "size", "(", "1", ")", "==", "1", ":", "\n", "# when ONNX tracing a single decoder step (sequence length == 1)", "\n", "# the transpose is a no-op copy before view, thus unnecessary", "\n", "            ", "attn", "=", "attn", ".", "contiguous", "(", ")", ".", "view", "(", "tgt_len", ",", "bsz", ",", "embed_dim", ")", "\n", "", "else", ":", "\n", "            ", "attn", "=", "attn", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "tgt_len", ",", "bsz", ",", "embed_dim", ")", "\n", "", "attn", "=", "self", ".", "out_proj", "(", "attn", ")", "\n", "attn_weights", ":", "Optional", "[", "Tensor", "]", "=", "None", "\n", "if", "need_weights", ":", "\n", "            ", "attn_weights", "=", "attn_weights_float", ".", "view", "(", "\n", "bsz", ",", "self", ".", "num_heads", ",", "tgt_len", ",", "src_len", "\n", ")", ".", "transpose", "(", "1", ",", "0", ")", "\n", "if", "not", "need_head_weights", ":", "\n", "# average attention weights over heads", "\n", "                ", "attn_weights", "=", "attn_weights", ".", "mean", "(", "dim", "=", "0", ")", "\n", "\n", "", "", "return", "attn", ",", "attn_weights", "\n", "\n", "", "@", "staticmethod", "\n", "def", "_append_prev_key_padding_mask", "(", "\n", "key_padding_mask", ":", "Optional", "[", "Tensor", "]", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.dynamic_crf_layer.DynamicCRF.__init__": [[42, 51], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.Embedding", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.Embedding", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.Embedding", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.Embedding"], ["def", "__init__", "(", "self", ",", "num_embedding", ",", "low_rank", "=", "32", ",", "beam_size", "=", "64", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "E1", "=", "nn", ".", "Embedding", "(", "num_embedding", ",", "low_rank", ")", "\n", "self", ".", "E2", "=", "nn", ".", "Embedding", "(", "num_embedding", ",", "low_rank", ")", "\n", "\n", "self", ".", "vocb", "=", "num_embedding", "\n", "self", ".", "rank", "=", "low_rank", "\n", "self", ".", "beam", "=", "beam_size", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.dynamic_crf_layer.DynamicCRF.extra_repr": [[52, 55], ["None"], "methods", ["None"], ["", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "return", "\"vocab_size={}, low_rank={}, beam_size={}\"", ".", "format", "(", "\n", "self", ".", "vocb", ",", "self", ".", "rank", ",", "self", ".", "beam", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.dynamic_crf_layer.DynamicCRF.forward": [[56, 73], ["dynamic_crf_layer.DynamicCRF._compute_score", "dynamic_crf_layer.DynamicCRF._compute_normalizer"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.dynamic_crf_layer.DynamicCRF._compute_score", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.dynamic_crf_layer.DynamicCRF._compute_normalizer"], ["", "def", "forward", "(", "self", ",", "emissions", ",", "targets", ",", "masks", ",", "beam", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Compute the conditional log-likelihood of a sequence of target tokens given emission scores\n\n        Args:\n            emissions (`~torch.Tensor`): Emission score are usually the unnormalized decoder output\n                ``(batch_size, seq_len, vocab_size)``. We assume batch-first\n            targets (`~torch.LongTensor`): Sequence of target token indices\n                ``(batch_size, seq_len)\n            masks (`~torch.ByteTensor`): Mask tensor with the same size as targets\n\n        Returns:\n            `~torch.Tensor`: approximated log-likelihood\n        \"\"\"", "\n", "numerator", "=", "self", ".", "_compute_score", "(", "emissions", ",", "targets", ",", "masks", ")", "\n", "denominator", "=", "self", ".", "_compute_normalizer", "(", "emissions", ",", "targets", ",", "masks", ",", "beam", ")", "\n", "return", "numerator", "-", "denominator", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.dynamic_crf_layer.DynamicCRF.forward_decoder": [[74, 87], ["dynamic_crf_layer.DynamicCRF._viterbi_decode"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.dynamic_crf_layer.DynamicCRF._viterbi_decode"], ["", "def", "forward_decoder", "(", "self", ",", "emissions", ",", "masks", "=", "None", ",", "beam", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Find the most likely output sequence using Viterbi algorithm.\n\n        Args:\n            emissions (`~torch.Tensor`): Emission score are usually the unnormalized decoder output\n                ``(batch_size, seq_len, vocab_size)``. We assume batch-first\n            masks (`~torch.ByteTensor`): Mask tensor with the same size as targets\n\n        Returns:\n            `~torch.LongTensor`: decoded sequence from the CRF model\n        \"\"\"", "\n", "return", "self", ".", "_viterbi_decode", "(", "emissions", ",", "masks", ",", "beam", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.dynamic_crf_layer.DynamicCRF._compute_score": [[88, 99], ["targets.size", "scores.sum", "emissions.gather", "masks.type_as", "dynamic_crf_layer.DynamicCRF.E1", "dynamic_crf_layer.DynamicCRF.E2"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "_compute_score", "(", "self", ",", "emissions", ",", "targets", ",", "masks", "=", "None", ")", ":", "\n", "        ", "batch_size", ",", "seq_len", "=", "targets", ".", "size", "(", ")", "\n", "emission_scores", "=", "emissions", ".", "gather", "(", "2", ",", "targets", "[", ":", ",", ":", ",", "None", "]", ")", "[", ":", ",", ":", ",", "0", "]", "# B x T", "\n", "transition_scores", "=", "(", "self", ".", "E1", "(", "targets", "[", ":", ",", ":", "-", "1", "]", ")", "*", "self", ".", "E2", "(", "targets", "[", ":", ",", "1", ":", "]", ")", ")", ".", "sum", "(", "2", ")", "\n", "\n", "scores", "=", "emission_scores", "\n", "scores", "[", ":", ",", "1", ":", "]", "+=", "transition_scores", "\n", "\n", "if", "masks", "is", "not", "None", ":", "\n", "            ", "scores", "=", "scores", "*", "masks", ".", "type_as", "(", "scores", ")", "\n", "", "return", "scores", ".", "sum", "(", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.dynamic_crf_layer.DynamicCRF._compute_normalizer": [[100, 132], ["dynamic_crf_layer.DynamicCRF.E1", "dynamic_crf_layer.DynamicCRF.E2", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "beam_transition_matrix.view.view.view", "range", "dynamic_crf_layer.logsumexp", "emissions.size", "emissions.scatter", "emissions.gather", "emissions.topk", "dynamic_crf_layer.DynamicCRF.view", "dynamic_crf_layer.DynamicCRF.view().transpose", "numpy.float", "emissions.scatter.topk", "dynamic_crf_layer.logsumexp", "torch.where", "torch.where", "torch.where", "torch.where", "dynamic_crf_layer.DynamicCRF.view"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.dynamic_crf_layer.logsumexp", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.dynamic_crf_layer.logsumexp"], ["", "def", "_compute_normalizer", "(", "self", ",", "emissions", ",", "targets", "=", "None", ",", "masks", "=", "None", ",", "beam", "=", "None", ")", ":", "\n", "# HACK: we include \"target\" which is a hueristic for training", "\n", "# HACK: we use a beam of tokens to approximate the normalizing factor (which is bad?)", "\n", "\n", "        ", "beam", "=", "beam", "if", "beam", "is", "not", "None", "else", "self", ".", "beam", "\n", "batch_size", ",", "seq_len", "=", "emissions", ".", "size", "(", ")", "[", ":", "2", "]", "\n", "if", "targets", "is", "not", "None", ":", "\n", "            ", "_emissions", "=", "emissions", ".", "scatter", "(", "2", ",", "targets", "[", ":", ",", ":", ",", "None", "]", ",", "np", ".", "float", "(", "'inf'", ")", ")", "\n", "beam_targets", "=", "_emissions", ".", "topk", "(", "beam", ",", "2", ")", "[", "1", "]", "\n", "beam_emission_scores", "=", "emissions", ".", "gather", "(", "2", ",", "beam_targets", ")", "\n", "", "else", ":", "\n", "            ", "beam_emission_scores", ",", "beam_targets", "=", "emissions", ".", "topk", "(", "beam", ",", "2", ")", "\n", "", "beam_transition_score1", "=", "self", ".", "E1", "(", "beam_targets", "[", ":", ",", ":", "-", "1", "]", ")", "# B x (T-1) x K x D", "\n", "beam_transition_score2", "=", "self", ".", "E2", "(", "beam_targets", "[", ":", ",", "1", ":", "]", ")", "# B x (T-1) x K x D", "\n", "beam_transition_matrix", "=", "torch", ".", "bmm", "(", "\n", "beam_transition_score1", ".", "view", "(", "-", "1", ",", "beam", ",", "self", ".", "rank", ")", ",", "\n", "beam_transition_score2", ".", "view", "(", "-", "1", ",", "beam", ",", "self", ".", "rank", ")", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "beam_transition_matrix", "=", "beam_transition_matrix", ".", "view", "(", "batch_size", ",", "-", "1", ",", "beam", ",", "beam", ")", "\n", "\n", "# compute the normalizer in the log-space", "\n", "score", "=", "beam_emission_scores", "[", ":", ",", "0", "]", "# B x K", "\n", "for", "i", "in", "range", "(", "1", ",", "seq_len", ")", ":", "\n", "            ", "next_score", "=", "score", "[", ":", ",", ":", ",", "None", "]", "+", "beam_transition_matrix", "[", ":", ",", "i", "-", "1", "]", "\n", "next_score", "=", "logsumexp", "(", "next_score", ",", "dim", "=", "1", ")", "+", "beam_emission_scores", "[", ":", ",", "i", "]", "\n", "\n", "if", "masks", "is", "not", "None", ":", "\n", "                ", "score", "=", "torch", ".", "where", "(", "masks", "[", ":", ",", "i", ":", "i", "+", "1", "]", ",", "next_score", ",", "score", ")", "\n", "", "else", ":", "\n", "                ", "score", "=", "next_score", "\n", "\n", "# Sum (log-sum-exp) over all possible tags", "\n", "", "", "return", "logsumexp", "(", "score", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.dynamic_crf_layer.DynamicCRF._viterbi_decode": [[133, 185], ["emissions.topk", "dynamic_crf_layer.DynamicCRF.E1", "dynamic_crf_layer.DynamicCRF.E2", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "beam_transition_matrix.view.view.view", "torch.arange().expand().contiguous", "torch.arange().expand().contiguous", "torch.arange().expand().contiguous", "torch.arange().expand().contiguous", "range", "torch.where.max", "torch.where.max", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "zip", "torch.cat.reverse", "torch.cat.reverse", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.reverse", "torch.cat.reverse", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "emissions.size", "dynamic_crf_layer.DynamicCRF.view", "dynamic_crf_layer.DynamicCRF.view().transpose", "traj_scores.append", "_score.max", "traj_tokens.append", "reversed", "reversed", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "beam_targets.gather", "torch.arange().expand", "torch.arange().expand", "torch.arange().expand", "torch.arange().expand", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "idx.gather", "scs.gather", "dynamic_crf_layer.DynamicCRF.view", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.where.size", "torch.where.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "_viterbi_decode", "(", "self", ",", "emissions", ",", "masks", "=", "None", ",", "beam", "=", "None", ")", ":", "\n", "# HACK: we use a beam of tokens to approximate the normalizing factor (which is bad?)", "\n", "\n", "        ", "beam", "=", "beam", "if", "beam", "is", "not", "None", "else", "self", ".", "beam", "\n", "batch_size", ",", "seq_len", "=", "emissions", ".", "size", "(", ")", "[", ":", "2", "]", "\n", "beam_emission_scores", ",", "beam_targets", "=", "emissions", ".", "topk", "(", "beam", ",", "2", ")", "\n", "beam_transition_score1", "=", "self", ".", "E1", "(", "beam_targets", "[", ":", ",", ":", "-", "1", "]", ")", "# B x (T-1) x K x D", "\n", "beam_transition_score2", "=", "self", ".", "E2", "(", "beam_targets", "[", ":", ",", "1", ":", "]", ")", "# B x (T-1) x K x D", "\n", "beam_transition_matrix", "=", "torch", ".", "bmm", "(", "\n", "beam_transition_score1", ".", "view", "(", "-", "1", ",", "beam", ",", "self", ".", "rank", ")", ",", "\n", "beam_transition_score2", ".", "view", "(", "-", "1", ",", "beam", ",", "self", ".", "rank", ")", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "beam_transition_matrix", "=", "beam_transition_matrix", ".", "view", "(", "batch_size", ",", "-", "1", ",", "beam", ",", "beam", ")", "\n", "\n", "traj_tokens", ",", "traj_scores", "=", "[", "]", ",", "[", "]", "\n", "finalized_tokens", ",", "finalized_scores", "=", "[", "]", ",", "[", "]", "\n", "\n", "# compute the normalizer in the log-space", "\n", "score", "=", "beam_emission_scores", "[", ":", ",", "0", "]", "# B x K", "\n", "dummy", "=", "torch", ".", "arange", "(", "beam", ",", "device", "=", "score", ".", "device", ")", ".", "expand", "(", "*", "score", ".", "size", "(", ")", ")", ".", "contiguous", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "1", ",", "seq_len", ")", ":", "\n", "            ", "traj_scores", ".", "append", "(", "score", ")", "\n", "_score", "=", "score", "[", ":", ",", ":", ",", "None", "]", "+", "beam_transition_matrix", "[", ":", ",", "i", "-", "1", "]", "\n", "_score", ",", "_index", "=", "_score", ".", "max", "(", "dim", "=", "1", ")", "\n", "_score", "=", "_score", "+", "beam_emission_scores", "[", ":", ",", "i", "]", "\n", "\n", "if", "masks", "is", "not", "None", ":", "\n", "                ", "score", "=", "torch", ".", "where", "(", "masks", "[", ":", ",", "i", ":", "i", "+", "1", "]", ",", "_score", ",", "score", ")", "\n", "index", "=", "torch", ".", "where", "(", "masks", "[", ":", ",", "i", ":", "i", "+", "1", "]", ",", "_index", ",", "dummy", ")", "\n", "", "else", ":", "\n", "                ", "score", ",", "index", "=", "_score", ",", "_index", "\n", "", "traj_tokens", ".", "append", "(", "index", ")", "\n", "\n", "# now running the back-tracing and find the best", "\n", "", "best_score", ",", "best_index", "=", "score", ".", "max", "(", "dim", "=", "1", ")", "\n", "finalized_tokens", ".", "append", "(", "best_index", "[", ":", ",", "None", "]", ")", "\n", "finalized_scores", ".", "append", "(", "best_score", "[", ":", ",", "None", "]", ")", "\n", "\n", "for", "idx", ",", "scs", "in", "zip", "(", "reversed", "(", "traj_tokens", ")", ",", "reversed", "(", "traj_scores", ")", ")", ":", "\n", "            ", "previous_index", "=", "finalized_tokens", "[", "-", "1", "]", "\n", "finalized_tokens", ".", "append", "(", "idx", ".", "gather", "(", "1", ",", "previous_index", ")", ")", "\n", "finalized_scores", ".", "append", "(", "scs", ".", "gather", "(", "1", ",", "previous_index", ")", ")", "\n", "\n", "", "finalized_tokens", ".", "reverse", "(", ")", "\n", "finalized_tokens", "=", "torch", ".", "cat", "(", "finalized_tokens", ",", "1", ")", "\n", "finalized_tokens", "=", "beam_targets", ".", "gather", "(", "2", ",", "finalized_tokens", "[", ":", ",", ":", ",", "None", "]", ")", "[", ":", ",", ":", ",", "0", "]", "\n", "\n", "finalized_scores", ".", "reverse", "(", ")", "\n", "finalized_scores", "=", "torch", ".", "cat", "(", "finalized_scores", ",", "1", ")", "\n", "finalized_scores", "[", ":", ",", "1", ":", "]", "=", "finalized_scores", "[", ":", ",", "1", ":", "]", "-", "finalized_scores", "[", ":", ",", ":", "-", "1", "]", "\n", "\n", "return", "finalized_scores", ",", "finalized_tokens", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.dynamic_crf_layer.logsumexp": [[24, 26], ["torch.logsumexp().type_as", "torch.logsumexp().type_as", "torch.logsumexp", "torch.logsumexp", "x.float"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.dynamic_crf_layer.logsumexp", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.dynamic_crf_layer.logsumexp"], ["def", "logsumexp", "(", "x", ",", "dim", "=", "1", ")", ":", "\n", "    ", "return", "torch", ".", "logsumexp", "(", "x", ".", "float", "(", ")", ",", "dim", "=", "dim", ")", ".", "type_as", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.dynamic_convolution.DynamicConv1dTBC.__init__": [[65, 88], ["torch.Module.__init__", "dynamic_convolution.DynamicConv1dTBC.reset_parameters", "dynamic_convolution.Linear", "dynamic_convolution.Linear", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer.reset_parameters", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear"], ["\n", "def", "__init__", "(", "self", ",", "input_size", ",", "kernel_size", "=", "1", ",", "padding_l", "=", "None", ",", "num_heads", "=", "1", ",", "\n", "weight_dropout", "=", "0.", ",", "weight_softmax", "=", "False", ",", "\n", "renorm_padding", "=", "False", ",", "bias", "=", "False", ",", "conv_bias", "=", "False", ",", "\n", "query_size", "=", "None", ",", "in_proj", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "query_size", "=", "input_size", "if", "query_size", "is", "None", "else", "query_size", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "padding_l", "=", "padding_l", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "weight_dropout", "=", "weight_dropout", "\n", "self", ".", "weight_softmax", "=", "weight_softmax", "\n", "self", ".", "renorm_padding", "=", "renorm_padding", "\n", "\n", "if", "in_proj", ":", "\n", "            ", "self", ".", "weight_linear", "=", "Linear", "(", "self", ".", "input_size", ",", "self", ".", "input_size", "+", "num_heads", "*", "kernel_size", "*", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "weight_linear", "=", "Linear", "(", "self", ".", "query_size", ",", "num_heads", "*", "kernel_size", "*", "1", ",", "bias", "=", "bias", ")", "\n", "", "if", "conv_bias", ":", "\n", "            ", "self", ".", "conv_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "input_size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv_bias", "=", "None", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.dynamic_convolution.DynamicConv1dTBC.in_proj": [[89, 92], ["None"], "methods", ["None"], ["", "self", ".", "reset_parameters", "(", ")", "\n", "\n", "", "@", "property", "\n", "def", "in_proj", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.dynamic_convolution.DynamicConv1dTBC.reset_parameters": [[93, 97], ["dynamic_convolution.DynamicConv1dTBC.weight_linear.reset_parameters", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer.reset_parameters"], ["        ", "return", "self", ".", "weight_linear", ".", "out_features", "==", "self", ".", "input_size", "+", "self", ".", "num_heads", "*", "self", ".", "kernel_size", "\n", "\n", "", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "self", ".", "weight_linear", ".", "reset_parameters", "(", ")", "\n", "if", "self", ".", "conv_bias", "is", "not", "None", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.dynamic_convolution.DynamicConv1dTBC.forward": [[98, 120], ["dynamic_convolution.DynamicConv1dTBC._forward_unfolded", "dynamic_convolution.DynamicConv1dTBC._forward_expanded", "x.size", "dynamic_convolution.DynamicConv1dTBC.conv_bias.view"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer._forward_unfolded", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer._forward_expanded", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["            ", "nn", ".", "init", ".", "constant_", "(", "self", ".", "conv_bias", ",", "0.", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ",", "incremental_state", "=", "None", ",", "query", "=", "None", ",", "unfold", "=", "None", ")", ":", "\n", "        ", "'''Assuming the input, x, of the shape T x B x C and producing an output in the shape T x B x C\n        args:\n            x: Input of shape T x B x C, i.e. (timesteps, batch_size, input_size)\n            incremental_state: A dict to keep the state\n            unfold: unfold the input or not. If not, we use the matrix trick instead\n            query: use the specified query to predict the conv filters\n        '''", "\n", "unfold", "=", "x", ".", "size", "(", "0", ")", ">", "512", "if", "unfold", "is", "None", "else", "unfold", "# use unfold mode as default for long sequence to save memory", "\n", "unfold", "=", "unfold", "or", "(", "incremental_state", "is", "not", "None", ")", "\n", "assert", "query", "is", "None", "or", "not", "self", ".", "in_proj", "\n", "\n", "if", "query", "is", "None", ":", "\n", "            ", "query", "=", "x", "\n", "", "if", "unfold", ":", "\n", "            ", "output", "=", "self", ".", "_forward_unfolded", "(", "x", ",", "incremental_state", ",", "query", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "self", ".", "_forward_expanded", "(", "x", ",", "incremental_state", ",", "query", ")", "\n", "\n", "", "if", "self", ".", "conv_bias", "is", "not", "None", ":", "\n", "            ", "output", "=", "output", "+", "self", ".", "conv_bias", ".", "view", "(", "1", ",", "1", ",", "-", "1", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.dynamic_convolution.DynamicConv1dTBC._forward_unfolded": [[121, 172], ["dynamic_convolution.DynamicConv1dTBC.narrow().contiguous.size", "weight.narrow.narrow.narrow", "torch.dropout", "torch.dropout", "torch.dropout", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "output.view.view.view", "dynamic_convolution.DynamicConv1dTBC.weight_linear", "dynamic_convolution.DynamicConv1dTBC.narrow().contiguous", "dynamic_convolution.DynamicConv1dTBC.narrow().contiguous().view", "dynamic_convolution.DynamicConv1dTBC.weight_linear().view", "dynamic_convolution.DynamicConv1dTBC._get_input_buffer", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x_unfold.view.view.view", "unfold.unfold1d", "x_unfold.view.view.view", "torch.softmax", "torch.softmax", "torch.softmax", "weight.narrow.narrow.size", "torch.softmax", "torch.softmax", "torch.softmax", "weight.narrow.narrow.unsqueeze", "dynamic_convolution.DynamicConv1dTBC.narrow().contiguous.new", "dynamic_convolution.DynamicConv1dTBC._set_input_buffer", "weight.narrow.narrow.narrow", "dynamic_convolution.DynamicConv1dTBC.narrow", "dynamic_convolution.DynamicConv1dTBC.narrow().contiguous", "dynamic_convolution.DynamicConv1dTBC.weight_linear", "dynamic_convolution.DynamicConv1dTBC.narrow().contiguous.unsqueeze", "dynamic_convolution.DynamicConv1dTBC.narrow", "x_unfold.view.view.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer._get_input_buffer", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.unfold.unfold1d", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer._set_input_buffer", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "return", "output", "\n", "\n", "", "def", "_forward_unfolded", "(", "self", ",", "x", ",", "incremental_state", ",", "query", ")", ":", "\n", "        ", "'''The conventional implementation of convolutions.\n        Unfolding the input by having a window shifting to the right.'''", "\n", "T", ",", "B", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "K", ",", "H", "=", "self", ".", "kernel_size", ",", "self", ".", "num_heads", "\n", "R", "=", "C", "//", "H", "\n", "assert", "R", "*", "H", "==", "C", "==", "self", ".", "input_size", "\n", "\n", "if", "self", ".", "in_proj", ":", "\n", "            ", "proj", "=", "self", ".", "weight_linear", "(", "x", ")", "\n", "x", "=", "proj", ".", "narrow", "(", "2", ",", "0", ",", "self", ".", "input_size", ")", ".", "contiguous", "(", ")", "\n", "weight", "=", "proj", ".", "narrow", "(", "2", ",", "self", ".", "input_size", ",", "H", "*", "K", ")", ".", "contiguous", "(", ")", ".", "view", "(", "T", "*", "B", "*", "H", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "weight", "=", "self", ".", "weight_linear", "(", "query", ")", ".", "view", "(", "T", "*", "B", "*", "H", ",", "-", "1", ")", "\n", "\n", "# renorm_padding is only implemented in _forward_expanded", "\n", "", "assert", "not", "self", ".", "renorm_padding", "or", "incremental_state", "is", "not", "None", "\n", "\n", "if", "incremental_state", "is", "not", "None", ":", "\n", "            ", "input_buffer", "=", "self", ".", "_get_input_buffer", "(", "incremental_state", ")", "\n", "if", "input_buffer", "is", "None", ":", "\n", "                ", "input_buffer", "=", "x", ".", "new", "(", ")", "\n", "", "x_unfold", "=", "torch", ".", "cat", "(", "[", "input_buffer", ",", "x", ".", "unsqueeze", "(", "3", ")", "]", ",", "dim", "=", "3", ")", "\n", "if", "self", ".", "kernel_size", ">", "1", ":", "\n", "                ", "self", ".", "_set_input_buffer", "(", "incremental_state", ",", "x_unfold", "[", ":", ",", ":", ",", ":", ",", "-", "self", ".", "kernel_size", "+", "1", ":", "]", ")", "\n", "", "x_unfold", "=", "x_unfold", ".", "view", "(", "T", "*", "B", "*", "H", ",", "R", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "padding_l", "=", "self", ".", "padding_l", "\n", "if", "K", ">", "T", "and", "padding_l", "==", "K", "-", "1", ":", "\n", "                ", "weight", "=", "weight", ".", "narrow", "(", "1", ",", "K", "-", "T", ",", "T", ")", "\n", "K", ",", "padding_l", "=", "T", ",", "T", "-", "1", "\n", "# unfold the input: T x B x C --> T' x B x C x K", "\n", "", "x_unfold", "=", "unfold1d", "(", "x", ",", "K", ",", "padding_l", ",", "0", ")", "\n", "x_unfold", "=", "x_unfold", ".", "view", "(", "T", "*", "B", "*", "H", ",", "R", ",", "K", ")", "\n", "\n", "", "if", "self", ".", "weight_softmax", "and", "not", "self", ".", "renorm_padding", ":", "\n", "            ", "weight", "=", "F", ".", "softmax", "(", "weight", ",", "dim", "=", "1", ")", "\n", "", "weight", "=", "weight", ".", "narrow", "(", "1", ",", "0", ",", "K", ")", "\n", "\n", "if", "incremental_state", "is", "not", "None", ":", "\n", "            ", "weight", "=", "weight", "[", ":", ",", "-", "x_unfold", ".", "size", "(", "2", ")", ":", "]", "\n", "K", "=", "weight", ".", "size", "(", "1", ")", "\n", "\n", "", "if", "self", ".", "weight_softmax", "and", "self", ".", "renorm_padding", ":", "\n", "            ", "weight", "=", "F", ".", "softmax", "(", "weight", ",", "dim", "=", "1", ")", "\n", "\n", "", "weight", "=", "F", ".", "dropout", "(", "weight", ",", "self", ".", "weight_dropout", ",", "training", "=", "self", ".", "training", ",", "inplace", "=", "False", ")", "\n", "\n", "output", "=", "torch", ".", "bmm", "(", "x_unfold", ",", "weight", ".", "unsqueeze", "(", "2", ")", ")", "# T*B*H x R x 1", "\n", "output", "=", "output", ".", "view", "(", "T", ",", "B", ",", "C", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.dynamic_convolution.DynamicConv1dTBC._forward_expanded": [[173, 218], ["dynamic_convolution.DynamicConv1dTBC.narrow().contiguous.size", "weight.narrow.narrow.narrow().contiguous", "weight.narrow.narrow.view().transpose", "dynamic_convolution.DynamicConv1dTBC.narrow().contiguous.view().transpose", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "output.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "dynamic_convolution.DynamicConv1dTBC.weight_linear", "dynamic_convolution.DynamicConv1dTBC.narrow().contiguous", "dynamic_convolution.DynamicConv1dTBC.narrow().contiguous().view", "dynamic_convolution.DynamicConv1dTBC.weight_linear().view", "torch.dropout", "torch.dropout", "torch.dropout", "weight.narrow.narrow.new().fill_", "weight_expanded.narrow.narrow.as_strided().copy_", "weight_expanded.narrow.narrow.narrow", "torch.softmax", "torch.softmax", "torch.softmax", "torch.dropout", "torch.dropout", "torch.dropout", "weight.narrow.narrow.new_zeros", "weight_expanded.narrow.narrow.as_strided().copy_", "weight_expanded.narrow.narrow.narrow", "torch.softmax", "torch.softmax", "torch.softmax", "weight.narrow.narrow.narrow", "weight.narrow.narrow.view", "dynamic_convolution.DynamicConv1dTBC.narrow().contiguous.view", "float", "weight.narrow.narrow.narrow", "output.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "dynamic_convolution.DynamicConv1dTBC.narrow", "dynamic_convolution.DynamicConv1dTBC.narrow().contiguous", "dynamic_convolution.DynamicConv1dTBC.weight_linear", "weight.narrow.narrow.new", "weight_expanded.narrow.narrow.as_strided", "weight_expanded.narrow.narrow.as_strided", "output.transpose().contiguous().view.transpose().contiguous().view.transpose", "dynamic_convolution.DynamicConv1dTBC.narrow"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax"], ["return", "output", "\n", "\n", "", "def", "_forward_expanded", "(", "self", ",", "x", ",", "incremental_stat", ",", "query", ")", ":", "\n", "        ", "'''Turn the convolution filters into band matrices and do matrix multiplication.\n        This is faster when the sequence is short, but less memory efficient.\n        This is not used in the decoder during inference.\n        '''", "\n", "T", ",", "B", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "K", ",", "H", "=", "self", ".", "kernel_size", ",", "self", ".", "num_heads", "\n", "R", "=", "C", "//", "H", "\n", "assert", "R", "*", "H", "==", "C", "==", "self", ".", "input_size", "\n", "if", "self", ".", "in_proj", ":", "\n", "            ", "proj", "=", "self", ".", "weight_linear", "(", "x", ")", "\n", "x", "=", "proj", ".", "narrow", "(", "2", ",", "0", ",", "self", ".", "input_size", ")", ".", "contiguous", "(", ")", "\n", "weight", "=", "proj", ".", "narrow", "(", "2", ",", "self", ".", "input_size", ",", "H", "*", "K", ")", ".", "contiguous", "(", ")", ".", "view", "(", "T", "*", "B", "*", "H", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "weight", "=", "self", ".", "weight_linear", "(", "query", ")", ".", "view", "(", "T", "*", "B", "*", "H", ",", "-", "1", ")", "\n", "\n", "", "if", "not", "self", ".", "renorm_padding", ":", "\n", "            ", "if", "self", ".", "weight_softmax", ":", "\n", "                ", "weight", "=", "F", ".", "softmax", "(", "weight", ",", "dim", "=", "1", ")", "\n", "", "weight", "=", "F", ".", "dropout", "(", "weight", ",", "self", ".", "weight_dropout", ",", "training", "=", "self", ".", "training", ",", "inplace", "=", "False", ")", "\n", "", "weight", "=", "weight", ".", "narrow", "(", "1", ",", "0", ",", "K", ")", ".", "contiguous", "(", ")", "\n", "weight", "=", "weight", ".", "view", "(", "T", ",", "B", "*", "H", ",", "K", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "T", ",", "B", "*", "H", ",", "R", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "if", "self", ".", "weight_softmax", "and", "self", ".", "renorm_padding", ":", "\n", "# turn the convolution filters into band matrices", "\n", "            ", "weight_expanded", "=", "weight", ".", "new", "(", "B", "*", "H", ",", "T", ",", "T", "+", "K", "-", "1", ")", ".", "fill_", "(", "float", "(", "'-inf'", ")", ")", "\n", "weight_expanded", ".", "as_strided", "(", "(", "B", "*", "H", ",", "T", ",", "K", ")", ",", "(", "T", "*", "(", "T", "+", "K", "-", "1", ")", ",", "T", "+", "K", ",", "1", ")", ")", ".", "copy_", "(", "weight", ")", "\n", "weight_expanded", "=", "weight_expanded", ".", "narrow", "(", "2", ",", "self", ".", "padding_l", ",", "T", ")", "\n", "# normalize the weight over valid positions like self-attention", "\n", "weight_expanded", "=", "F", ".", "softmax", "(", "weight_expanded", ",", "dim", "=", "2", ")", "\n", "weight_expanded", "=", "F", ".", "dropout", "(", "weight_expanded", ",", "self", ".", "weight_dropout", ",", "training", "=", "self", ".", "training", ",", "inplace", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "P", "=", "self", ".", "padding_l", "\n", "# For efficieny, we cut the kernel size and reduce the padding when the kernel is larger than the length", "\n", "if", "K", ">", "T", "and", "P", "==", "K", "-", "1", ":", "\n", "                ", "weight", "=", "weight", ".", "narrow", "(", "2", ",", "K", "-", "T", ",", "T", ")", "\n", "K", ",", "P", "=", "T", ",", "T", "-", "1", "\n", "# turn the convolution filters into band matrices", "\n", "", "weight_expanded", "=", "weight", ".", "new_zeros", "(", "B", "*", "H", ",", "T", ",", "T", "+", "K", "-", "1", ",", "requires_grad", "=", "False", ")", "\n", "weight_expanded", ".", "as_strided", "(", "(", "B", "*", "H", ",", "T", ",", "K", ")", ",", "(", "T", "*", "(", "T", "+", "K", "-", "1", ")", ",", "T", "+", "K", ",", "1", ")", ")", ".", "copy_", "(", "weight", ")", "\n", "weight_expanded", "=", "weight_expanded", ".", "narrow", "(", "2", ",", "P", ",", "T", ")", "# B*H x T x T", "\n", "", "output", "=", "torch", ".", "bmm", "(", "weight_expanded", ",", "x", ")", "\n", "output", "=", "output", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "T", ",", "B", ",", "C", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.dynamic_convolution.DynamicConv1dTBC.reorder_incremental_state": [[219, 224], ["dynamic_convolution.DynamicConv1dTBC._get_input_buffer", "input_buffer.index_select.index_select.index_select", "dynamic_convolution.DynamicConv1dTBC._set_input_buffer"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer._get_input_buffer", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer._set_input_buffer"], ["return", "output", "\n", "\n", "", "def", "reorder_incremental_state", "(", "self", ",", "incremental_state", ",", "new_order", ")", ":", "\n", "        ", "input_buffer", "=", "self", ".", "_get_input_buffer", "(", "incremental_state", ")", "\n", "if", "input_buffer", "is", "not", "None", ":", "\n", "            ", "input_buffer", "=", "input_buffer", ".", "index_select", "(", "1", ",", "new_order", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.dynamic_convolution.DynamicConv1dTBC._get_input_buffer": [[225, 227], ["fairseq.utils.get_incremental_state"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.get_incremental_state"], ["self", ".", "_set_input_buffer", "(", "incremental_state", ",", "input_buffer", ")", "\n", "\n", "", "", "def", "_get_input_buffer", "(", "self", ",", "incremental_state", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.dynamic_convolution.DynamicConv1dTBC._set_input_buffer": [[228, 230], ["fairseq.utils.set_incremental_state"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.set_incremental_state"], ["        ", "return", "utils", ".", "get_incremental_state", "(", "self", ",", "incremental_state", ",", "'input_buffer'", ")", "\n", "\n", "", "def", "_set_input_buffer", "(", "self", ",", "incremental_state", ",", "new_buffer", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.dynamic_convolution.DynamicConv1dTBC.extra_repr": [[231, 243], ["None"], "methods", ["None"], ["        ", "return", "utils", ".", "set_incremental_state", "(", "self", ",", "incremental_state", ",", "'input_buffer'", ",", "new_buffer", ")", "\n", "\n", "", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "s", "=", "'{}, kernel_size={}, padding_l={}, num_heads={}, weight_softmax={}, conv_bias={}, renorm_padding={}, in_proj={}'", ".", "format", "(", "\n", "self", ".", "input_size", ",", "self", ".", "kernel_size", ",", "self", ".", "padding_l", ",", "\n", "self", ".", "num_heads", ",", "self", ".", "weight_softmax", ",", "self", ".", "conv_bias", "is", "not", "None", ",", "self", ".", "renorm_padding", ",", "\n", "self", ".", "in_proj", ",", "\n", ")", "\n", "\n", "if", "self", ".", "query_size", "!=", "self", ".", "input_size", ":", "\n", "            ", "s", "+=", "', query_size={}'", ".", "format", "(", "self", ".", "query_size", ")", "\n", "", "if", "self", ".", "weight_dropout", ">", "0.", ":", "\n", "            ", "s", "+=", "', weight_dropout={}'", ".", "format", "(", "self", ".", "weight_dropout", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.dynamic_convolution.DynamicConv": [[14, 31], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "dynamic_convolution.DynamicConv1dTBC", "DynamicconvLayer", "print"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], ["\n", "def", "DynamicConv", "(", "input_size", ",", "kernel_size", "=", "1", ",", "padding_l", "=", "None", ",", "num_heads", "=", "1", ",", "\n", "weight_dropout", "=", "0.", ",", "weight_softmax", "=", "False", ",", "\n", "renorm_padding", "=", "False", ",", "bias", "=", "False", ",", "conv_bias", "=", "False", ",", "\n", "query_size", "=", "None", ",", "in_proj", "=", "False", ")", ":", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "from", "fairseq", ".", "modules", ".", "dynamicconv_layer", "import", "DynamicconvLayer", "\n", "return", "DynamicconvLayer", "(", "input_size", ",", "kernel_size", "=", "kernel_size", ",", "\n", "padding_l", "=", "padding_l", ",", "num_heads", "=", "num_heads", ",", "\n", "weight_dropout", "=", "weight_dropout", ",", "\n", "weight_softmax", "=", "weight_softmax", ",", "bias", "=", "bias", ")", "\n", "", "except", "ImportError", "as", "e", ":", "\n", "            ", "print", "(", "e", ")", "\n", "", "", "return", "DynamicConv1dTBC", "(", "input_size", ",", "kernel_size", "=", "kernel_size", ",", "\n", "padding_l", "=", "padding_l", ",", "num_heads", "=", "num_heads", ",", "\n", "weight_dropout", "=", "weight_dropout", ",", "\n", "weight_softmax", "=", "weight_softmax", ",", "bias", "=", "bias", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.dynamic_convolution.Linear": [[33, 39], ["torch.Linear", "torch.init.xavier_uniform_", "torch.init.constant_"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear"], ["\n", "", "def", "Linear", "(", "in_features", ",", "out_features", ",", "bias", "=", "True", ")", ":", "\n", "    ", "m", "=", "nn", ".", "Linear", "(", "in_features", ",", "out_features", ",", "bias", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "if", "bias", ":", "\n", "        ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.", ")", "\n", "", "return", "m", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.adaptive_softmax.TiedLinear.__init__": [[15, 19], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["    ", "def", "__init__", "(", "self", ",", "weight", ",", "transpose", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "weight", "\n", "self", ".", "transpose", "=", "transpose", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.adaptive_softmax.TiedLinear.forward": [[20, 22], ["torch.linear", "torch.linear", "adaptive_softmax.TiedLinear.weight.t"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "F", ".", "linear", "(", "input", ",", "self", ".", "weight", ".", "t", "(", ")", "if", "self", ".", "transpose", "else", "self", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.adaptive_softmax.TiedHeadModule.__init__": [[25, 41], ["torch.nn.Module.__init__", "tied_emb.size", "adaptive_softmax.TiedLinear", "torch.nn.Linear", "torch.nn.Linear", "adaptive_softmax.TiedHeadModule.register_buffer", "torch.nn.Sequential", "torch.nn.Sequential", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.nn.Linear", "torch.nn.Linear"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear"], ["    ", "def", "__init__", "(", "self", ",", "weights", ",", "input_dim", ",", "num_classes", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "tied_emb", ",", "_", "=", "weights", "\n", "self", ".", "num_words", ",", "emb_dim", "=", "tied_emb", ".", "size", "(", ")", "\n", "\n", "self", ".", "word_proj", "=", "TiedLinear", "(", "tied_emb", ",", "transpose", "=", "False", ")", "\n", "if", "input_dim", "!=", "emb_dim", ":", "\n", "            ", "self", ".", "word_proj", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "input_dim", ",", "emb_dim", ",", "bias", "=", "False", ")", ",", "\n", "self", ".", "word_proj", ",", "\n", ")", "\n", "\n", "", "self", ".", "class_proj", "=", "nn", ".", "Linear", "(", "input_dim", ",", "num_classes", ",", "bias", "=", "False", ")", "\n", "self", ".", "out_dim", "=", "self", ".", "num_words", "+", "num_classes", "\n", "\n", "self", ".", "register_buffer", "(", "'_float_tensor'", ",", "torch", ".", "FloatTensor", "(", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.adaptive_softmax.TiedHeadModule.forward": [[42, 48], ["functools.reduce", "adaptive_softmax.TiedHeadModule._float_tensor.new", "adaptive_softmax.TiedHeadModule.word_proj", "adaptive_softmax.TiedHeadModule.class_proj", "input.view", "input.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "inp_sz", "=", "functools", ".", "reduce", "(", "operator", ".", "mul", ",", "input", ".", "shape", "[", ":", "-", "1", "]", ",", "1", ")", "\n", "out", "=", "self", ".", "_float_tensor", ".", "new", "(", "inp_sz", ",", "self", ".", "out_dim", ")", "\n", "out", "[", ":", ",", ":", "self", ".", "num_words", "]", "=", "self", ".", "word_proj", "(", "input", ".", "view", "(", "inp_sz", ",", "-", "1", ")", ")", "\n", "out", "[", ":", ",", "self", ".", "num_words", ":", "]", "=", "self", ".", "class_proj", "(", "input", ".", "view", "(", "inp_sz", ",", "-", "1", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.adaptive_softmax.AdaptiveSoftmax.__init__": [[57, 90], ["torch.nn.Module.__init__", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "adaptive_softmax.AdaptiveSoftmax._make_tail", "adaptive_softmax.AdaptiveSoftmax.apply", "adaptive_softmax.AdaptiveSoftmax.register_buffer", "adaptive_softmax.TiedHeadModule", "torch.nn.Linear", "torch.nn.Linear", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "len", "adaptive_inputs.weights_for_band", "hasattr", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "len", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.adaptive_softmax.AdaptiveSoftmax._make_tail", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.adaptive_input.AdaptiveInput.weights_for_band"], ["def", "__init__", "(", "self", ",", "vocab_size", ",", "input_dim", ",", "cutoff", ",", "dropout", ",", "factor", "=", "4.", ",", "adaptive_inputs", "=", "None", ",", "tie_proj", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "vocab_size", ">", "cutoff", "[", "-", "1", "]", ":", "\n", "            ", "cutoff", "=", "cutoff", "+", "[", "vocab_size", "]", "\n", "", "else", ":", "\n", "            ", "assert", "vocab_size", "==", "cutoff", "[", "\n", "-", "1", "]", ",", "'cannot specify cutoff larger than vocab size'", "\n", "\n", "", "output_dim", "=", "cutoff", "[", "0", "]", "+", "len", "(", "cutoff", ")", "-", "1", "\n", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "cutoff", "=", "cutoff", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "factor", "=", "factor", "\n", "\n", "self", ".", "lsm", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "\n", "if", "adaptive_inputs", "is", "not", "None", ":", "\n", "            ", "self", ".", "head", "=", "TiedHeadModule", "(", "adaptive_inputs", ".", "weights_for_band", "(", "0", ")", ",", "input_dim", ",", "len", "(", "cutoff", ")", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "head", "=", "nn", ".", "Linear", "(", "input_dim", ",", "output_dim", ",", "bias", "=", "False", ")", "\n", "\n", "", "self", ".", "_make_tail", "(", "adaptive_inputs", ",", "tie_proj", ")", "\n", "\n", "def", "init_weights", "(", "m", ")", ":", "\n", "            ", "if", "hasattr", "(", "m", ",", "'weight'", ")", "and", "not", "isinstance", "(", "m", ",", "TiedLinear", ")", "and", "not", "isinstance", "(", "m", ",", "TiedHeadModule", ")", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "m", ".", "weight", ")", "\n", "\n", "", "", "self", ".", "apply", "(", "init_weights", ")", "\n", "\n", "self", ".", "register_buffer", "(", "'version'", ",", "torch", ".", "LongTensor", "(", "[", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.adaptive_softmax.AdaptiveSoftmax._make_tail": [[91, 116], ["torch.nn.ModuleList", "torch.nn.ModuleList", "range", "int", "torch.nn.Sequential", "torch.nn.Sequential", "adaptive_softmax.AdaptiveSoftmax.tail.append", "len", "adaptive_inputs.weights_for_band", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "adaptive_softmax.TiedLinear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "adaptive_softmax.TiedLinear", "tied_proj.size", "tied_proj.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.adaptive_input.AdaptiveInput.weights_for_band", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "_make_tail", "(", "self", ",", "adaptive_inputs", "=", "None", ",", "tie_proj", "=", "False", ")", ":", "\n", "        ", "self", ".", "tail", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cutoff", ")", "-", "1", ")", ":", "\n", "            ", "dim", "=", "int", "(", "self", ".", "input_dim", "//", "self", ".", "factor", "**", "(", "i", "+", "1", ")", ")", "\n", "\n", "tied_emb", ",", "tied_proj", "=", "adaptive_inputs", ".", "weights_for_band", "(", "i", "+", "1", ")", "if", "adaptive_inputs", "is", "not", "None", "else", "(", "None", ",", "None", ")", "\n", "\n", "if", "tied_proj", "is", "not", "None", ":", "\n", "                ", "if", "tie_proj", ":", "\n", "                    ", "proj", "=", "TiedLinear", "(", "tied_proj", ",", "transpose", "=", "True", ")", "\n", "", "else", ":", "\n", "                    ", "proj", "=", "nn", ".", "Linear", "(", "tied_proj", ".", "size", "(", "0", ")", ",", "tied_proj", ".", "size", "(", "1", ")", ",", "bias", "=", "False", ")", "\n", "", "", "else", ":", "\n", "                ", "proj", "=", "nn", ".", "Linear", "(", "self", ".", "input_dim", ",", "dim", ",", "bias", "=", "False", ")", "\n", "\n", "", "m", "=", "nn", ".", "Sequential", "(", "\n", "proj", ",", "\n", "nn", ".", "Dropout", "(", "self", ".", "dropout", ")", ",", "\n", "nn", ".", "Linear", "(", "\n", "dim", ",", "self", ".", "cutoff", "[", "i", "+", "1", "]", "-", "self", ".", "cutoff", "[", "i", "]", ",", "bias", "=", "False", ",", "\n", ")", "if", "tied_emb", "is", "None", "else", "TiedLinear", "(", "tied_emb", ",", "transpose", "=", "False", ")", ",", "\n", ")", "\n", "\n", "self", ".", "tail", ".", "append", "(", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.adaptive_softmax.AdaptiveSoftmax.upgrade_state_dict_named": [[117, 121], ["Exception"], "methods", ["None"], ["", "", "def", "upgrade_state_dict_named", "(", "self", ",", "state_dict", ",", "name", ")", ":", "\n", "        ", "version_name", "=", "name", "+", "'.version'", "\n", "if", "version_name", "not", "in", "state_dict", ":", "\n", "            ", "raise", "Exception", "(", "'This version of the model is no longer supported'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.adaptive_softmax.AdaptiveSoftmax.adapt_target": [[122, 146], ["target.view.view.view", "range", "target.view.view.clone", "target.view.view.ge().mul", "target.view.ge().mul.any", "len", "target.view.view.lt", "target_idxs.append", "new_target.append", "target_idxs.append", "new_target.append", "target.view.view.ge", "target.view.ge().mul.nonzero().squeeze", "target[].add", "target.view.ge().mul.nonzero"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.eval_lm.WordStat.add"], ["", "", "def", "adapt_target", "(", "self", ",", "target", ")", ":", "\n", "        ", "\"\"\"\n        In order to be efficient, the AdaptiveSoftMax does not compute the\n        scores for all the word of the vocabulary for all the examples. It is\n        thus necessary to call the method adapt_target of the AdaptiveSoftMax\n        layer inside each forward pass.\n        \"\"\"", "\n", "\n", "target", "=", "target", ".", "view", "(", "-", "1", ")", "\n", "new_target", "=", "[", "target", ".", "clone", "(", ")", "]", "\n", "target_idxs", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "cutoff", ")", "-", "1", ")", ":", "\n", "            ", "mask", "=", "target", ".", "ge", "(", "self", ".", "cutoff", "[", "i", "]", ")", ".", "mul", "(", "target", ".", "lt", "(", "self", ".", "cutoff", "[", "i", "+", "1", "]", ")", ")", "\n", "new_target", "[", "0", "]", "[", "mask", "]", "=", "self", ".", "cutoff", "[", "0", "]", "+", "i", "\n", "\n", "if", "mask", ".", "any", "(", ")", ":", "\n", "                ", "target_idxs", ".", "append", "(", "mask", ".", "nonzero", "(", ")", ".", "squeeze", "(", "1", ")", ")", "\n", "new_target", ".", "append", "(", "target", "[", "mask", "]", ".", "add", "(", "-", "self", ".", "cutoff", "[", "i", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "target_idxs", ".", "append", "(", "None", ")", "\n", "new_target", ".", "append", "(", "None", ")", "\n", "\n", "", "", "return", "new_target", ",", "target_idxs", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.adaptive_softmax.AdaptiveSoftmax.forward": [[147, 169], ["torch.dropout.contiguous().view", "torch.dropout", "torch.dropout", "adaptive_softmax.AdaptiveSoftmax.adapt_target", "range", "torch.dropout.size", "adaptive_softmax.AdaptiveSoftmax.head", "len", "torch.dropout.contiguous", "output.append", "output.append", "torch.dropout.index_select"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.adaptive_softmax.AdaptiveSoftmax.adapt_target", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            input: (b x t x d)\n            target: (b x t)\n        Returns:\n            2 lists: output for each cutoff section and new targets by cut off\n        \"\"\"", "\n", "\n", "input", "=", "input", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "input", ".", "size", "(", "-", "1", ")", ")", "\n", "input", "=", "F", ".", "dropout", "(", "input", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "new_target", ",", "target_idxs", "=", "self", ".", "adapt_target", "(", "target", ")", "\n", "output", "=", "[", "self", ".", "head", "(", "input", ")", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "target_idxs", ")", ")", ":", "\n", "            ", "if", "target_idxs", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "output", ".", "append", "(", "self", ".", "tail", "[", "i", "]", "(", "input", ".", "index_select", "(", "0", ",", "target_idxs", "[", "i", "]", ")", ")", ")", "\n", "", "else", ":", "\n", "                ", "output", ".", "append", "(", "None", ")", "\n", "\n", "", "", "return", "output", ",", "new_target", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.adaptive_softmax.AdaptiveSoftmax.get_log_prob": [[170, 207], ["input.contiguous().view.contiguous().view.size", "input.contiguous().view.contiguous().view.contiguous().view", "adaptive_softmax.AdaptiveSoftmax.head", "adaptive_softmax.AdaptiveSoftmax.new_zeros", "adaptive_softmax.AdaptiveSoftmax.lsm", "log_probs[].clone", "range", "log_probs.view.view.view", "adaptive_softmax.AdaptiveSoftmax.adapt_target", "input.contiguous().view.contiguous().view.size", "len", "len", "input.contiguous().view.contiguous().view.contiguous", "tail_out.copy_", "adaptive_softmax.AdaptiveSoftmax.lsm().add_", "tail_out.copy_", "adaptive_softmax.AdaptiveSoftmax.lsm().add_", "adaptive_softmax.AdaptiveSoftmax.lsm", "adaptive_softmax.AdaptiveSoftmax.lsm"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.adaptive_softmax.AdaptiveSoftmax.adapt_target", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "get_log_prob", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "\"\"\"\n        Computes the log probabilities for all the words of the vocabulary,\n        given a 2D tensor of hidden vectors.\n        \"\"\"", "\n", "\n", "bsz", ",", "length", ",", "dim", "=", "input", ".", "size", "(", ")", "\n", "input", "=", "input", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "dim", ")", "\n", "\n", "if", "target", "is", "not", "None", ":", "\n", "            ", "_", ",", "target_idxs", "=", "self", ".", "adapt_target", "(", "target", ")", "\n", "", "else", ":", "\n", "            ", "target_idxs", "=", "None", "\n", "\n", "", "head_y", "=", "self", ".", "head", "(", "input", ")", "\n", "log_probs", "=", "head_y", ".", "new_zeros", "(", "input", ".", "size", "(", "0", ")", ",", "self", ".", "vocab_size", ")", "\n", "\n", "head_sz", "=", "self", ".", "cutoff", "[", "0", "]", "+", "len", "(", "self", ".", "tail", ")", "\n", "log_probs", "[", ":", ",", ":", "head_sz", "]", "=", "self", ".", "lsm", "(", "head_y", ")", "\n", "tail_priors", "=", "log_probs", "[", ":", ",", "self", ".", "cutoff", "[", "0", "]", ":", "head_sz", "]", ".", "clone", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "tail", ")", ")", ":", "\n", "            ", "start", "=", "self", ".", "cutoff", "[", "i", "]", "\n", "end", "=", "self", ".", "cutoff", "[", "i", "+", "1", "]", "\n", "\n", "if", "target_idxs", "is", "None", ":", "\n", "                ", "tail_out", "=", "log_probs", "[", ":", ",", "start", ":", "end", "]", "\n", "tail_out", ".", "copy_", "(", "self", ".", "tail", "[", "i", "]", "(", "input", ")", ")", "\n", "log_probs", "[", ":", ",", "start", ":", "end", "]", "=", "self", ".", "lsm", "(", "tail_out", ")", ".", "add_", "(", "tail_priors", "[", ":", ",", "i", ",", "None", "]", ")", "\n", "", "elif", "target_idxs", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "idxs", "=", "target_idxs", "[", "i", "]", "\n", "tail_out", "=", "log_probs", "[", "idxs", ",", "start", ":", "end", "]", "\n", "tail_out", ".", "copy_", "(", "self", ".", "tail", "[", "i", "]", "(", "input", "[", "idxs", "]", ")", ")", "\n", "log_probs", "[", "idxs", ",", "start", ":", "end", "]", "=", "self", ".", "lsm", "(", "tail_out", ")", ".", "add_", "(", "tail_priors", "[", "idxs", ",", "i", ",", "None", "]", ")", "\n", "\n", "", "", "log_probs", "=", "log_probs", ".", "view", "(", "bsz", ",", "length", ",", "-", "1", ")", "\n", "return", "log_probs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.beamable_mm.BeamableMM.__init__": [[18, 21], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["def", "__init__", "(", "self", ",", "beam_size", "=", "None", ")", ":", "\n", "        ", "super", "(", "BeamableMM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "beam_size", "=", "beam_size", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.beamable_mm.BeamableMM.forward": [[22, 45], ["input1[].unfold().transpose", "input1[].unfold().transpose.bmm.view", "input1[].unfold().transpose.bmm", "input1[].unfold().transpose.dim", "input1[].unfold().transpose.size", "input1[].unfold().transpose.size", "input2.unfold", "input1[].unfold().transpose.size", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "input1[].unfold().transpose.bmm", "input1[].unfold"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "forward", "(", "self", ",", "input1", ",", "input2", ")", ":", "\n", "        ", "if", "(", "\n", "not", "self", ".", "training", "and", "# test mode", "\n", "self", ".", "beam_size", "is", "not", "None", "and", "# beam size is set", "\n", "input1", ".", "dim", "(", ")", "==", "3", "and", "# only support batched input", "\n", "input1", ".", "size", "(", "1", ")", "==", "1", "# single time step update", "\n", ")", ":", "\n", "            ", "bsz", ",", "beam", "=", "input1", ".", "size", "(", "0", ")", ",", "self", ".", "beam_size", "\n", "\n", "# bsz x 1 x nhu --> bsz/beam x beam x nhu", "\n", "input1", "=", "input1", "[", ":", ",", "0", ",", ":", "]", ".", "unfold", "(", "0", ",", "beam", ",", "beam", ")", ".", "transpose", "(", "2", ",", "1", ")", "\n", "\n", "# bsz x sz2 x nhu --> bsz/beam x sz2 x nhu", "\n", "input2", "=", "input2", ".", "unfold", "(", "0", ",", "beam", ",", "beam", ")", "[", ":", ",", ":", ",", ":", ",", "0", "]", "\n", "\n", "# use non batched operation if bsz = beam", "\n", "if", "input1", ".", "size", "(", "0", ")", "==", "1", ":", "\n", "                ", "output", "=", "torch", ".", "mm", "(", "input1", "[", "0", ",", ":", ",", ":", "]", ",", "input2", "[", "0", ",", ":", ",", ":", "]", ")", "\n", "", "else", ":", "\n", "                ", "output", "=", "input1", ".", "bmm", "(", "input2", ")", "\n", "", "return", "output", ".", "view", "(", "bsz", ",", "1", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "return", "input1", ".", "bmm", "(", "input2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.beamable_mm.BeamableMM.set_beam_size": [[46, 48], ["None"], "methods", ["None"], ["", "", "def", "set_beam_size", "(", "self", ",", "beam_size", ")", ":", "\n", "        ", "self", ".", "beam_size", "=", "beam_size", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.conv_tbc.ConvTBC.__init__": [[16, 26], ["super().__init__", "torch.nn.modules.utils._single", "torch.nn.modules.utils._single", "torch.nn.Parameter", "torch.nn.Parameter", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "padding", "=", "0", ")", ":", "\n", "        ", "super", "(", "ConvTBC", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "kernel_size", "=", "_single", "(", "kernel_size", ")", "\n", "self", ".", "padding", "=", "_single", "(", "padding", ")", "\n", "\n", "self", ".", "weight", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "\n", "self", ".", "kernel_size", "[", "0", "]", ",", "in_channels", ",", "out_channels", ")", ")", "\n", "self", ".", "bias", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.conv_tbc.ConvTBC.forward": [[27, 29], ["torch.conv_tbc", "input.contiguous"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "torch", ".", "conv_tbc", "(", "input", ".", "contiguous", "(", ")", ",", "self", ".", "weight", ",", "self", ".", "bias", ",", "self", ".", "padding", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.conv_tbc.ConvTBC.__repr__": [[30, 37], ["s.format"], "methods", ["None"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "s", "=", "(", "'{name}({in_channels}, {out_channels}, kernel_size={kernel_size}'", "\n", "', padding={padding}'", ")", "\n", "if", "self", ".", "bias", "is", "None", ":", "\n", "            ", "s", "+=", "', bias=False'", "\n", "", "s", "+=", "')'", "\n", "return", "s", ".", "format", "(", "name", "=", "self", ".", "__class__", ".", "__name__", ",", "**", "self", ".", "__dict__", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.character_token_embedder.CharacterTokenEmbedder.__init__": [[21, 59], ["super().__init__", "torch.nn.Embedding", "torch.nn.Embedding", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.ModuleList", "torch.nn.ModuleList", "sum", "torch.nn.Linear", "torch.nn.Linear", "character_token_embedder.CharacterTokenEmbedder.reset_parameters", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "character_token_embedder.CharacterTokenEmbedder.convolutions.append", "highway.Highway", "character_token_embedder.CharacterTokenEmbedder.set_vocab", "torch.nn.Conv1d", "torch.nn.Conv1d"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.Embedding", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.Embedding", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer.reset_parameters", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.character_token_embedder.CharacterTokenEmbedder.set_vocab"], ["logger", "=", "logging", ".", "getLogger", "(", "__name__", ")", "\n", "\n", "\n", "class", "CharacterTokenEmbedder", "(", "torch", ".", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "\n", "self", ",", "\n", "vocab", ":", "Dictionary", ",", "\n", "filters", ":", "List", "[", "Tuple", "[", "int", ",", "int", "]", "]", ",", "\n", "char_embed_dim", ":", "int", ",", "\n", "word_embed_dim", ":", "int", ",", "\n", "highway_layers", ":", "int", ",", "\n", "max_char_len", ":", "int", "=", "50", ",", "\n", "char_inputs", ":", "bool", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", "CharacterTokenEmbedder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "onnx_trace", "=", "False", "\n", "self", ".", "embedding_dim", "=", "word_embed_dim", "\n", "self", ".", "max_char_len", "=", "max_char_len", "\n", "self", ".", "char_embeddings", "=", "nn", ".", "Embedding", "(", "257", ",", "char_embed_dim", ",", "padding_idx", "=", "0", ")", "\n", "self", ".", "symbol_embeddings", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "2", ",", "word_embed_dim", ")", ")", "\n", "self", ".", "eos_idx", ",", "self", ".", "unk_idx", "=", "0", ",", "1", "\n", "self", ".", "char_inputs", "=", "char_inputs", "\n", "\n", "self", ".", "convolutions", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "width", ",", "out_c", "in", "filters", ":", "\n", "            ", "self", ".", "convolutions", ".", "append", "(", "\n", "nn", ".", "Conv1d", "(", "char_embed_dim", ",", "out_c", ",", "kernel_size", "=", "width", ")", "\n", ")", "\n", "\n", "", "last_dim", "=", "sum", "(", "f", "[", "1", "]", "for", "f", "in", "filters", ")", "\n", "\n", "self", ".", "highway", "=", "Highway", "(", "last_dim", ",", "highway_layers", ")", "if", "highway_layers", ">", "0", "else", "None", "\n", "\n", "self", ".", "projection", "=", "nn", ".", "Linear", "(", "last_dim", ",", "word_embed_dim", ")", "\n", "\n", "assert", "vocab", "is", "not", "None", "or", "char_inputs", ",", "\"vocab must be set if not using char inputs\"", "\n", "self", ".", "vocab", "=", "None", "\n", "if", "vocab", "is", "not", "None", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.character_token_embedder.CharacterTokenEmbedder.prepare_for_onnx_export_": [[60, 62], ["None"], "methods", ["None"], ["            ", "self", ".", "set_vocab", "(", "vocab", ",", "max_char_len", ")", "\n", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.character_token_embedder.CharacterTokenEmbedder.set_vocab": [[63, 84], ["torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "range", "len", "len", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "print", "vocab[].encode", "len", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.encode"], ["\n", "", "def", "prepare_for_onnx_export_", "(", "self", ")", ":", "\n", "        ", "self", ".", "onnx_trace", "=", "True", "\n", "\n", "", "def", "set_vocab", "(", "self", ",", "vocab", ",", "max_char_len", ")", ":", "\n", "        ", "word_to_char", "=", "torch", ".", "LongTensor", "(", "len", "(", "vocab", ")", ",", "max_char_len", ")", "\n", "\n", "truncated", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "vocab", ")", ")", ":", "\n", "            ", "if", "i", "<", "vocab", ".", "nspecial", ":", "\n", "                ", "char_idxs", "=", "[", "0", "]", "*", "max_char_len", "\n", "", "else", ":", "\n", "                ", "chars", "=", "vocab", "[", "i", "]", ".", "encode", "(", ")", "\n", "# +1 for padding", "\n", "char_idxs", "=", "[", "c", "+", "1", "for", "c", "in", "chars", "]", "+", "[", "0", "]", "*", "(", "max_char_len", "-", "len", "(", "chars", ")", ")", "\n", "", "if", "len", "(", "char_idxs", ")", ">", "max_char_len", ":", "\n", "                ", "truncated", "+=", "1", "\n", "char_idxs", "=", "char_idxs", "[", ":", "max_char_len", "]", "\n", "", "word_to_char", "[", "i", "]", "=", "torch", ".", "LongTensor", "(", "char_idxs", ")", "\n", "\n", "", "if", "truncated", ">", "0", ":", "\n", "            ", "logger", ".", "info", "(", "'truncated {} words longer than {} characters'", ".", "format", "(", "truncated", ",", "max_char_len", ")", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.character_token_embedder.CharacterTokenEmbedder.padding_idx": [[85, 88], ["fairseq.data.Dictionary().pad", "character_token_embedder.CharacterTokenEmbedder.vocab.pad", "fairseq.data.Dictionary"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad"], ["\n", "", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "word_to_char", "=", "word_to_char", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.character_token_embedder.CharacterTokenEmbedder.reset_parameters": [[89, 96], ["torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_normal_", "torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["None"], ["", "@", "property", "\n", "def", "padding_idx", "(", "self", ")", ":", "\n", "        ", "return", "Dictionary", "(", ")", ".", "pad", "(", ")", "if", "self", ".", "vocab", "is", "None", "else", "self", ".", "vocab", ".", "pad", "(", ")", "\n", "\n", "", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "char_embeddings", ".", "weight", ")", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "self", ".", "symbol_embeddings", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "projection", ".", "weight", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.character_token_embedder.CharacterTokenEmbedder.forward": [[97, 136], ["character_token_embedder.CharacterTokenEmbedder._convolve", "torch.where.view", "torch.where.view", "input.view", "chars[].eq", "chars[].eq", "input.view.eq.any", "input.view", "character_token_embedder.CharacterTokenEmbedder.word_to_char[].type_as", "input.view.eq", "input.view.eq", "input.view.eq", "input.view.eq.any", "input.view.eq.any", "input.view.eq.any", "input.view.eq.any", "character_token_embedder.CharacterTokenEmbedder.vocab.pad", "character_token_embedder.CharacterTokenEmbedder.vocab.eos", "character_token_embedder.CharacterTokenEmbedder.vocab.unk", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "input.view.eq.any", "torch.where", "torch.where", "torch.where", "torch.where", "input.view.eq.any", "torch.where", "torch.where", "torch.where", "torch.where", "input.view.eq.unsqueeze", "torch.where.new_zeros", "torch.where.new_zeros", "input.view.eq.unsqueeze", "input.view.eq.unsqueeze", "input.size", "input.view.eq.unsqueeze", "torch.where.new_zeros", "torch.where.new_zeros", "input.view.type_as"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.character_token_embedder.CharacterTokenEmbedder._convolve", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.unk", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "char_embeddings", ".", "weight", "[", "self", ".", "char_embeddings", ".", "padding_idx", "]", ",", "0.", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "self", ".", "projection", ".", "bias", ",", "0.", ")", "\n", "\n", "", "def", "forward", "(", "\n", "self", ",", "\n", "input", ":", "torch", ".", "Tensor", ",", "\n", ")", ":", "\n", "        ", "if", "self", ".", "char_inputs", ":", "\n", "            ", "chars", "=", "input", ".", "view", "(", "-", "1", ",", "self", ".", "max_char_len", ")", "\n", "pads", "=", "chars", "[", ":", ",", "0", "]", ".", "eq", "(", "CHAR_PAD_IDX", ")", "\n", "eos", "=", "chars", "[", ":", ",", "0", "]", ".", "eq", "(", "CHAR_EOS_IDX", ")", "\n", "if", "eos", ".", "any", "(", ")", ":", "\n", "                ", "if", "self", ".", "onnx_trace", ":", "\n", "                    ", "chars", "=", "torch", ".", "where", "(", "eos", ".", "unsqueeze", "(", "1", ")", ",", "chars", ".", "new_zeros", "(", "1", ")", ",", "chars", ")", "\n", "", "else", ":", "\n", "                    ", "chars", "[", "eos", "]", "=", "0", "\n", "\n", "", "", "unk", "=", "None", "\n", "", "else", ":", "\n", "            ", "flat_words", "=", "input", ".", "view", "(", "-", "1", ")", "\n", "chars", "=", "self", ".", "word_to_char", "[", "flat_words", ".", "type_as", "(", "self", ".", "word_to_char", ")", "]", ".", "type_as", "(", "input", ")", "\n", "pads", "=", "flat_words", ".", "eq", "(", "self", ".", "vocab", ".", "pad", "(", ")", ")", "\n", "eos", "=", "flat_words", ".", "eq", "(", "self", ".", "vocab", ".", "eos", "(", ")", ")", "\n", "unk", "=", "flat_words", ".", "eq", "(", "self", ".", "vocab", ".", "unk", "(", ")", ")", "\n", "\n", "", "word_embs", "=", "self", ".", "_convolve", "(", "chars", ")", "\n", "if", "self", ".", "onnx_trace", ":", "\n", "            ", "if", "pads", ".", "any", "(", ")", ":", "\n", "                ", "word_embs", "=", "torch", ".", "where", "(", "pads", ".", "unsqueeze", "(", "1", ")", ",", "word_embs", ".", "new_zeros", "(", "1", ")", ",", "word_embs", ")", "\n", "", "if", "eos", ".", "any", "(", ")", ":", "\n", "                ", "word_embs", "=", "torch", ".", "where", "(", "eos", ".", "unsqueeze", "(", "1", ")", ",", "self", ".", "symbol_embeddings", "[", "self", ".", "eos_idx", "]", ",", "word_embs", ")", "\n", "", "if", "unk", "is", "not", "None", "and", "unk", ".", "any", "(", ")", ":", "\n", "                ", "word_embs", "=", "torch", ".", "where", "(", "unk", ".", "unsqueeze", "(", "1", ")", ",", "self", ".", "symbol_embeddings", "[", "self", ".", "unk_idx", "]", ",", "word_embs", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "pads", ".", "any", "(", ")", ":", "\n", "                ", "word_embs", "[", "pads", "]", "=", "0", "\n", "", "if", "eos", ".", "any", "(", ")", ":", "\n", "                ", "word_embs", "[", "eos", "]", "=", "self", ".", "symbol_embeddings", "[", "self", ".", "eos_idx", "]", "\n", "", "if", "unk", "is", "not", "None", "and", "unk", ".", "any", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.character_token_embedder.CharacterTokenEmbedder._convolve": [[137, 159], ["character_token_embedder.CharacterTokenEmbedder.char_embeddings", "char_embs.transpose.transpose.transpose", "enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "character_token_embedder.CharacterTokenEmbedder.projection", "conv", "torch.max", "torch.max", "torch.max", "torch.max", "torch.relu", "torch.relu", "conv_result.append", "character_token_embedder.CharacterTokenEmbedder.highway"], "methods", ["None"], ["                ", "word_embs", "[", "unk", "]", "=", "self", ".", "symbol_embeddings", "[", "self", ".", "unk_idx", "]", "\n", "\n", "", "", "return", "word_embs", ".", "view", "(", "input", ".", "size", "(", ")", "[", ":", "2", "]", "+", "(", "-", "1", ",", ")", ")", "\n", "\n", "", "def", "_convolve", "(", "\n", "self", ",", "\n", "char_idxs", ":", "torch", ".", "Tensor", ",", "\n", ")", ":", "\n", "        ", "char_embs", "=", "self", ".", "char_embeddings", "(", "char_idxs", ")", "\n", "char_embs", "=", "char_embs", ".", "transpose", "(", "1", ",", "2", ")", "# BTC -> BCT", "\n", "\n", "conv_result", "=", "[", "]", "\n", "\n", "for", "conv", "in", "self", ".", "convolutions", ":", "\n", "            ", "x", "=", "conv", "(", "char_embs", ")", "\n", "x", ",", "_", "=", "torch", ".", "max", "(", "x", ",", "-", "1", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "conv_result", ".", "append", "(", "x", ")", "\n", "\n", "", "x", "=", "torch", ".", "cat", "(", "conv_result", ",", "dim", "=", "-", "1", ")", "\n", "\n", "if", "self", ".", "highway", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "highway", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.sparse_multihead_attention.SparseMultiheadAttention.__init__": [[22, 35], ["multihead_attention.MultiheadAttention.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["def", "__init__", "(", "self", ",", "embed_dim", ",", "num_heads", ",", "kdim", "=", "None", ",", "vdim", "=", "None", ",", "dropout", "=", "0.", ",", "bias", "=", "True", ",", "\n", "add_bias_kv", "=", "False", ",", "add_zero_attn", "=", "False", ",", "self_attention", "=", "False", ",", "\n", "encoder_decoder_attention", "=", "False", ",", "stride", "=", "32", ",", "expressivity", "=", "8", ",", "is_bidirectional", "=", "True", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "embed_dim", ",", "num_heads", ",", "kdim", ",", "vdim", ",", "dropout", ",", "bias", ",", "add_bias_kv", ",", "\n", "add_zero_attn", ",", "self_attention", ",", "encoder_decoder_attention", "\n", ")", "\n", "\n", "self", ".", "is_bidirectional", "=", "is_bidirectional", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "expressivity", "=", "expressivity", "\n", "assert", "(", "self", ".", "stride", ">", "0", "and", "self", ".", "stride", ">=", "self", ".", "expressivity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.sparse_multihead_attention.SparseMultiheadAttention.compute_checkpoint": [[37, 46], ["math.floor"], "methods", ["None"], ["", "def", "compute_checkpoint", "(", "self", ",", "word_index", ")", ":", "\n", "        ", "if", "word_index", "%", "self", ".", "stride", "==", "0", "and", "word_index", "!=", "0", ":", "\n", "            ", "checkpoint_index", "=", "word_index", "-", "self", ".", "expressivity", "\n", "", "else", ":", "\n", "            ", "checkpoint_index", "=", "(", "\n", "math", ".", "floor", "(", "word_index", "/", "self", ".", "stride", ")", "*", "self", ".", "stride", "\n", "+", "self", ".", "stride", "-", "self", ".", "expressivity", "\n", ")", "\n", "", "return", "checkpoint_index", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.sparse_multihead_attention.SparseMultiheadAttention.compute_subset_summaries": [[48, 58], ["sparse_multihead_attention.SparseMultiheadAttention.compute_checkpoint", "set", "set", "subset_two.union.union.union", "sparse_multihead_attention.SparseMultiheadAttention.compute_checkpoint", "range", "min"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.sparse_multihead_attention.SparseMultiheadAttention.compute_checkpoint", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.sparse_multihead_attention.SparseMultiheadAttention.compute_checkpoint"], ["", "def", "compute_subset_summaries", "(", "self", ",", "absolute_max", ")", ":", "\n", "        ", "checkpoint_index", "=", "self", ".", "compute_checkpoint", "(", "0", ")", "\n", "subset_two", "=", "set", "(", ")", "\n", "while", "checkpoint_index", "<=", "absolute_max", "-", "1", ":", "\n", "            ", "summary", "=", "set", "(", "range", "(", "checkpoint_index", ",", "min", "(", "\n", "checkpoint_index", "+", "self", ".", "expressivity", "+", "1", ",", "absolute_max", ")", "\n", ")", ")", "\n", "subset_two", "=", "subset_two", ".", "union", "(", "summary", ")", "\n", "checkpoint_index", "=", "self", ".", "compute_checkpoint", "(", "checkpoint_index", "+", "self", ".", "stride", ")", "\n", "", "return", "subset_two", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.sparse_multihead_attention.SparseMultiheadAttention.compute_fixed_attention_subset": [[60, 83], ["set", "set.union", "math.floor", "set", "set", "sparse_multihead_attention.SparseMultiheadAttention.compute_subset_summaries", "range", "range", "min", "max", "min"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.sparse_multihead_attention.SparseMultiheadAttention.compute_subset_summaries"], ["", "def", "compute_fixed_attention_subset", "(", "self", ",", "word_index", ",", "tgt_len", ")", ":", "\n", "# +1s account for range function; [min, max) -> [min, max]", "\n", "        ", "if", "not", "self", ".", "is_bidirectional", ":", "\n", "            ", "absolute_max", "=", "word_index", "+", "1", "\n", "", "else", ":", "\n", "            ", "absolute_max", "=", "tgt_len", "\n", "\n", "# Subset 1 - whole window", "\n", "", "rounded_index", "=", "math", ".", "floor", "(", "(", "word_index", "+", "self", ".", "stride", ")", "/", "self", ".", "stride", ")", "*", "self", ".", "stride", "\n", "if", "word_index", "%", "self", ".", "stride", "==", "0", "and", "word_index", "!=", "0", ":", "\n", "            ", "subset_one", "=", "set", "(", "range", "(", "word_index", "-", "self", ".", "stride", ",", "min", "(", "absolute_max", ",", "word_index", "+", "1", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "subset_one", "=", "set", "(", "range", "(", "max", "(", "0", ",", "rounded_index", "-", "self", ".", "stride", ")", ",", "min", "(", "\n", "absolute_max", ",", "rounded_index", "+", "1", ")", ")", "\n", ")", "\n", "\n", "# Subset 2 - summary per window", "\n", "# If bidirectional, subset 2 is the same for every index", "\n", "", "subset_two", "=", "set", "(", ")", "\n", "if", "not", "self", ".", "is_bidirectional", ":", "\n", "            ", "subset_two", "=", "self", ".", "compute_subset_summaries", "(", "absolute_max", ")", "\n", "\n", "", "return", "subset_one", ".", "union", "(", "subset_two", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.sparse_multihead_attention.SparseMultiheadAttention.buffered_sparse_mask": [[85, 100], ["torch.empty().float().fill_", "set", "range", "torch.empty().float().fill_.type_as", "float", "sparse_multihead_attention.SparseMultiheadAttention.compute_subset_summaries", "sparse_multihead_attention.SparseMultiheadAttention.compute_fixed_attention_subset", "fixed_attention_subset.union.union.union", "torch.LongTensor", "sparse_mask[].index_fill_", "torch.empty().float", "list", "torch.empty"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.sparse_multihead_attention.SparseMultiheadAttention.compute_subset_summaries", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.sparse_multihead_attention.SparseMultiheadAttention.compute_fixed_attention_subset"], ["", "def", "buffered_sparse_mask", "(", "self", ",", "tensor", ",", "tgt_len", ",", "src_len", ")", ":", "\n", "        ", "assert", "(", "tgt_len", ">", "self", ".", "stride", ")", "\n", "sparse_mask", "=", "torch", ".", "empty", "(", "(", "tgt_len", ",", "src_len", ")", ")", ".", "float", "(", ")", ".", "fill_", "(", "float", "(", "'-inf'", ")", ")", "\n", "\n", "# If bidirectional, subset 2 is the same for every index", "\n", "subset_summaries", "=", "set", "(", ")", "\n", "if", "self", ".", "is_bidirectional", ":", "\n", "            ", "subset_summaries", "=", "self", ".", "compute_subset_summaries", "(", "tgt_len", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "tgt_len", ")", ":", "\n", "            ", "fixed_attention_subset", "=", "self", ".", "compute_fixed_attention_subset", "(", "i", ",", "tgt_len", ")", "\n", "fixed_attention_subset", "=", "fixed_attention_subset", ".", "union", "(", "subset_summaries", ")", "\n", "included_word_indices", "=", "torch", ".", "LongTensor", "(", "list", "(", "fixed_attention_subset", ")", ")", "\n", "sparse_mask", "[", "i", "]", ".", "index_fill_", "(", "0", ",", "included_word_indices", ",", "0", ")", "\n", "", "return", "sparse_mask", ".", "type_as", "(", "tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.sparse_multihead_attention.SparseMultiheadAttention.apply_sparse_mask": [[101, 105], ["sparse_multihead_attention.SparseMultiheadAttention.buffered_sparse_mask", "sparse_mask.unsqueeze().expand.unsqueeze().expand.unsqueeze().expand", "sparse_mask.unsqueeze().expand.unsqueeze().expand.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.sparse_multihead_attention.SparseMultiheadAttention.buffered_sparse_mask"], ["", "def", "apply_sparse_mask", "(", "self", ",", "attn_weights", ",", "tgt_len", ",", "src_len", ",", "bsz", ")", ":", "\n", "        ", "sparse_mask", "=", "self", ".", "buffered_sparse_mask", "(", "attn_weights", ",", "tgt_len", ",", "src_len", ")", "\n", "sparse_mask", "=", "sparse_mask", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "bsz", "*", "self", ".", "num_heads", ",", "tgt_len", ",", "src_len", ")", "\n", "attn_weights", "+=", "sparse_mask", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.sparse_transformer_sentence_encoder_layer.SparseTransformerSentenceEncoderLayer.__init__": [[15, 48], ["fairseq.modules.TransformerSentenceEncoderLayer.__init__", "fairseq.modules.sparse_multihead_attention.SparseMultiheadAttention"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "embedding_dim", ":", "int", "=", "768", ",", "\n", "ffn_embedding_dim", ":", "int", "=", "3072", ",", "\n", "num_attention_heads", ":", "int", "=", "8", ",", "\n", "dropout", ":", "float", "=", "0.1", ",", "\n", "attention_dropout", ":", "float", "=", "0.1", ",", "\n", "activation_dropout", ":", "float", "=", "0.1", ",", "\n", "activation_fn", ":", "str", "=", "'relu'", ",", "\n", "add_bias_kv", ":", "bool", "=", "False", ",", "\n", "add_zero_attn", ":", "bool", "=", "False", ",", "\n", "export", ":", "bool", "=", "False", ",", "\n", "is_bidirectional", ":", "bool", "=", "True", ",", "\n", "stride", ":", "int", "=", "32", ",", "\n", "expressivity", ":", "int", "=", "8", ",", "\n", ")", "->", "None", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "embedding_dim", ",", "ffn_embedding_dim", ",", "num_attention_heads", ",", "dropout", ",", "\n", "attention_dropout", ",", "activation_dropout", ",", "activation_fn", ",", "add_bias_kv", ",", "\n", "add_zero_attn", ",", "export", "\n", ")", "\n", "\n", "self", ".", "self_attn", "=", "SparseMultiheadAttention", "(", "\n", "self", ".", "embedding_dim", ",", "\n", "num_attention_heads", ",", "\n", "dropout", "=", "attention_dropout", ",", "\n", "add_bias_kv", "=", "add_bias_kv", ",", "\n", "add_zero_attn", "=", "add_zero_attn", ",", "\n", "self_attention", "=", "True", ",", "\n", "is_bidirectional", "=", "is_bidirectional", ",", "\n", "stride", "=", "stride", ",", "\n", "expressivity", "=", "expressivity", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.sinusoidal_positional_embedding.SinusoidalPositionalEmbedding.__init__": [[21, 32], ["torch.Module.__init__", "sinusoidal_positional_embedding.SinusoidalPositionalEmbedding.get_embedding", "sinusoidal_positional_embedding.SinusoidalPositionalEmbedding.register_buffer", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.sinusoidal_positional_embedding.SinusoidalPositionalEmbedding.get_embedding"], ["def", "__init__", "(", "self", ",", "embedding_dim", ",", "padding_idx", ",", "init_size", "=", "1024", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embedding_dim", "=", "embedding_dim", "\n", "self", ".", "padding_idx", "=", "padding_idx", "\n", "self", ".", "weights", "=", "SinusoidalPositionalEmbedding", ".", "get_embedding", "(", "\n", "init_size", ",", "embedding_dim", ",", "padding_idx", "\n", ")", "\n", "self", ".", "onnx_trace", "=", "False", "\n", "self", ".", "register_buffer", "(", "\"_float_tensor\"", ",", "torch", ".", "FloatTensor", "(", "1", ")", ")", "\n", "self", ".", "max_positions", "=", "int", "(", "1e5", ")", "\n", "\n", "", "def", "prepare_for_onnx_export_", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.sinusoidal_positional_embedding.SinusoidalPositionalEmbedding.prepare_for_onnx_export_": [[33, 35], ["None"], "methods", ["None"], ["        ", "self", ".", "onnx_trace", "=", "True", "\n", "\n", "", "@", "staticmethod", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.sinusoidal_positional_embedding.SinusoidalPositionalEmbedding.get_embedding": [[36, 54], ["torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "torch.cat().view", "math.log", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.arange().unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos", "torch.cos"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log"], ["def", "get_embedding", "(", "\n", "num_embeddings", ":", "int", ",", "embedding_dim", ":", "int", ",", "padding_idx", ":", "Optional", "[", "int", "]", "=", "None", "\n", ")", ":", "\n", "        ", "\"\"\"Build sinusoidal embeddings.\n\n        This matches the implementation in tensor2tensor, but differs slightly\n        from the description in Section 3.5 of \"Attention Is All You Need\".\n        \"\"\"", "\n", "half_dim", "=", "embedding_dim", "//", "2", "\n", "emb", "=", "math", ".", "log", "(", "10000", ")", "/", "(", "half_dim", "-", "1", ")", "\n", "emb", "=", "torch", ".", "exp", "(", "torch", ".", "arange", "(", "half_dim", ",", "dtype", "=", "torch", ".", "float", ")", "*", "-", "emb", ")", "\n", "emb", "=", "torch", ".", "arange", "(", "num_embeddings", ",", "dtype", "=", "torch", ".", "float", ")", ".", "unsqueeze", "(", "\n", "1", "\n", ")", "*", "emb", ".", "unsqueeze", "(", "0", ")", "\n", "emb", "=", "torch", ".", "cat", "(", "[", "torch", ".", "sin", "(", "emb", ")", ",", "torch", ".", "cos", "(", "emb", ")", "]", ",", "dim", "=", "1", ")", ".", "view", "(", "\n", "num_embeddings", ",", "-", "1", "\n", ")", "\n", "if", "embedding_dim", "%", "2", "==", "1", ":", "\n", "# zero pad", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.sinusoidal_positional_embedding.SinusoidalPositionalEmbedding.forward": [[55, 82], ["torch.onnx.operators.shape_as_tensor", "torch.onnx.operators.shape_as_tensor", "torch.onnx.operators.shape_as_tensor", "torch.onnx.operators.shape_as_tensor", "torch.onnx.operators.shape_as_tensor", "torch.onnx.operators.shape_as_tensor", "torch.onnx.operators.shape_as_tensor", "torch.onnx.operators.shape_as_tensor", "torch.onnx.operators.shape_as_tensor", "sinusoidal_positional_embedding.SinusoidalPositionalEmbedding.weights.to", "fairseq.utils.make_positions", "sinusoidal_positional_embedding.SinusoidalPositionalEmbedding.weights.index_select().view().detach", "sinusoidal_positional_embedding.SinusoidalPositionalEmbedding.get_embedding", "sinusoidal_positional_embedding.SinusoidalPositionalEmbedding.weights[].expand", "sinusoidal_positional_embedding.SinusoidalPositionalEmbedding.weights.detach().index_select", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.onnx.operators.reshape_from_tensor_shape", "torch.onnx.operators.reshape_from_tensor_shape", "torch.onnx.operators.reshape_from_tensor_shape", "torch.onnx.operators.reshape_from_tensor_shape", "torch.onnx.operators.reshape_from_tensor_shape", "torch.onnx.operators.reshape_from_tensor_shape", "torch.onnx.operators.reshape_from_tensor_shape", "torch.onnx.operators.reshape_from_tensor_shape", "torch.onnx.operators.reshape_from_tensor_shape", "sinusoidal_positional_embedding.SinusoidalPositionalEmbedding.weights.size", "sinusoidal_positional_embedding.SinusoidalPositionalEmbedding.weights.index_select().unsqueeze().repeat", "fairseq.utils.make_positions.view", "sinusoidal_positional_embedding.SinusoidalPositionalEmbedding.weights.index_select().view", "sinusoidal_positional_embedding.SinusoidalPositionalEmbedding.weights.detach", "bsz.view", "seq_len.view", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "timestep.view", "sinusoidal_positional_embedding.SinusoidalPositionalEmbedding.weights.index_select().unsqueeze", "sinusoidal_positional_embedding.SinusoidalPositionalEmbedding.weights.index_select", "fairseq.utils.make_positions.view", "sinusoidal_positional_embedding.SinusoidalPositionalEmbedding.weights.index_select"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.make_positions", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.sinusoidal_positional_embedding.SinusoidalPositionalEmbedding.get_embedding", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["            ", "emb", "=", "torch", ".", "cat", "(", "[", "emb", ",", "torch", ".", "zeros", "(", "num_embeddings", ",", "1", ")", "]", ",", "dim", "=", "1", ")", "\n", "", "if", "padding_idx", "is", "not", "None", ":", "\n", "            ", "emb", "[", "padding_idx", ",", ":", "]", "=", "0", "\n", "", "return", "emb", "\n", "\n", "", "def", "forward", "(", "\n", "self", ",", "\n", "input", ",", "\n", "incremental_state", ":", "Optional", "[", "Any", "]", "=", "None", ",", "\n", "timestep", ":", "Optional", "[", "Tensor", "]", "=", "None", ",", "\n", "positions", ":", "Optional", "[", "Any", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Input is expected to be of size [bsz x seqlen].\"\"\"", "\n", "bspair", "=", "torch", ".", "onnx", ".", "operators", ".", "shape_as_tensor", "(", "input", ")", "\n", "bsz", ",", "seq_len", "=", "bspair", "[", "0", "]", ",", "bspair", "[", "1", "]", "\n", "max_pos", "=", "self", ".", "padding_idx", "+", "1", "+", "seq_len", "\n", "if", "self", ".", "weights", "is", "None", "or", "max_pos", ">", "self", ".", "weights", ".", "size", "(", "0", ")", ":", "\n", "# recompute/expand embeddings if needed", "\n", "            ", "self", ".", "weights", "=", "SinusoidalPositionalEmbedding", ".", "get_embedding", "(", "\n", "max_pos", ",", "self", ".", "embedding_dim", ",", "self", ".", "padding_idx", "\n", ")", "\n", "", "self", ".", "weights", "=", "self", ".", "weights", ".", "to", "(", "self", ".", "_float_tensor", ")", "\n", "\n", "if", "incremental_state", "is", "not", "None", ":", "\n", "# positions is the same for every token when decoding a single step", "\n", "            ", "pos", "=", "timestep", ".", "view", "(", "-", "1", ")", "[", "0", "]", "+", "1", "if", "timestep", "is", "not", "None", "else", "seq_len", "\n", "if", "self", ".", "onnx_trace", ":", "\n", "                ", "return", "(", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.layer_norm.LayerNorm": [[9, 17], ["torch.nn.LayerNorm", "torch.cuda.is_available", "FusedLayerNorm"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.layer_norm.LayerNorm"], ["def", "LayerNorm", "(", "normalized_shape", ",", "eps", "=", "1e-5", ",", "elementwise_affine", "=", "True", ",", "export", "=", "False", ")", ":", "\n", "    ", "if", "not", "export", "and", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "from", "apex", ".", "normalization", "import", "FusedLayerNorm", "\n", "return", "FusedLayerNorm", "(", "normalized_shape", ",", "eps", ",", "elementwise_affine", ")", "\n", "", "except", "ImportError", ":", "\n", "            ", "pass", "\n", "", "", "return", "torch", ".", "nn", ".", "LayerNorm", "(", "normalized_shape", ",", "eps", ",", "elementwise_affine", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.lightweight_convolution.LightweightConv1d.__init__": [[54, 70], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "lightweight_convolution.LightweightConv1d.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer.reset_parameters"], ["\n", "def", "__init__", "(", "self", ",", "input_size", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "num_heads", "=", "1", ",", "\n", "weight_softmax", "=", "False", ",", "bias", "=", "False", ",", "weight_dropout", "=", "0.", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "weight_softmax", "=", "weight_softmax", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_heads", ",", "1", ",", "kernel_size", ")", ")", "\n", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "input_size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bias", "=", "None", "\n", "", "self", ".", "weight_dropout", "=", "weight_dropout", "\n", "self", ".", "reset_parameters", "(", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.lightweight_convolution.LightweightConv1d.reset_parameters": [[71, 75], ["torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["\n", "", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "weight", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "self", ".", "bias", ",", "0.", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.lightweight_convolution.LightweightConv1d.forward": [[76, 100], ["input.view.view.size", "torch.dropout", "torch.dropout", "torch.dropout", "input.view.view.view", "torch.conv1d", "torch.conv1d", "torch.conv1d", "output.view.view.view", "torch.softmax", "torch.softmax", "torch.softmax", "lightweight_convolution.LightweightConv1d.bias.view"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax"], ["\n", "", "", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "'''\n        input size: B x C x T\n        output size: B x C x T\n        '''", "\n", "B", ",", "C", ",", "T", "=", "input", ".", "size", "(", ")", "\n", "H", "=", "self", ".", "num_heads", "\n", "\n", "weight", "=", "self", ".", "weight", "\n", "if", "self", ".", "weight_softmax", ":", "\n", "            ", "weight", "=", "F", ".", "softmax", "(", "weight", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "weight", "=", "F", ".", "dropout", "(", "weight", ",", "self", ".", "weight_dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "# Merge every C/H entries into the batch dimension (C = self.input_size)", "\n", "# B x C x T -> (B * C/H) x H x T", "\n", "# One can also expand the weight to C x 1 x K by a factor of C/H", "\n", "# and do not reshape the input instead, which is slow though", "\n", "input", "=", "input", ".", "view", "(", "-", "1", ",", "H", ",", "T", ")", "\n", "output", "=", "F", ".", "conv1d", "(", "input", ",", "weight", ",", "padding", "=", "self", ".", "padding", ",", "groups", "=", "self", ".", "num_heads", ")", "\n", "output", "=", "output", ".", "view", "(", "B", ",", "C", ",", "T", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "output", "=", "output", "+", "self", ".", "bias", ".", "view", "(", "1", ",", "-", "1", ",", "1", ")", "\n", "\n", "", "return", "output", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.lightweight_convolution.LightweightConv1dTBC.__init__": [[122, 141], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "lightweight_convolution.LightweightConv1dTBC.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer.reset_parameters"], ["\n", "def", "__init__", "(", "self", ",", "input_size", ",", "kernel_size", "=", "1", ",", "padding_l", "=", "None", ",", "num_heads", "=", "1", ",", "\n", "weight_dropout", "=", "0.", ",", "weight_softmax", "=", "False", ",", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "padding_l", "=", "padding_l", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "weight_dropout", "=", "weight_dropout", "\n", "self", ".", "weight_softmax", "=", "weight_softmax", "\n", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_heads", ",", "1", ",", "kernel_size", ")", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "input_size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bias", "=", "None", "\n", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "self", ".", "onnx_trace", "=", "False", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.lightweight_convolution.LightweightConv1dTBC.reset_parameters": [[142, 146], ["torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["\n", "", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "weight", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "self", ".", "bias", ",", "0.", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.lightweight_convolution.LightweightConv1dTBC.forward": [[147, 164], ["lightweight_convolution.LightweightConv1dTBC._forward_unfolded", "lightweight_convolution.LightweightConv1dTBC._forward_expanded", "lightweight_convolution.LightweightConv1dTBC.bias.view"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer._forward_unfolded", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer._forward_expanded"], ["\n", "", "", "def", "forward", "(", "self", ",", "x", ",", "incremental_state", "=", "None", ",", "unfold", "=", "False", ")", ":", "\n", "        ", "'''Assuming the input, x, of the shape T x B x C and producing an output in the shape T x B x C\n        args:\n            x: Input of shape T x B x C, i.e. (timesteps, batch_size, input_size)\n            incremental_state: A dict to keep the state\n            unfold: unfold the input or not. If not, we use the matrix trick instead\n        '''", "\n", "unfold", "=", "unfold", "or", "(", "incremental_state", "is", "not", "None", ")", "\n", "\n", "if", "unfold", ":", "\n", "            ", "output", "=", "self", ".", "_forward_unfolded", "(", "x", ",", "incremental_state", ")", "\n", "", "else", ":", "\n", "            ", "output", "=", "self", ".", "_forward_expanded", "(", "x", ",", "incremental_state", ")", "\n", "\n", "", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "output", "=", "output", "+", "self", ".", "bias", ".", "view", "(", "1", ",", "1", ",", "-", "1", ")", "\n", "", "return", "output", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.lightweight_convolution.LightweightConv1dTBC.prepare_for_onnx_export_": [[165, 167], ["None"], "methods", ["None"], ["\n", "", "def", "prepare_for_onnx_export_", "(", "self", ")", ":", "\n", "        ", "self", ".", "onnx_trace", "=", "True", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.lightweight_convolution.LightweightConv1dTBC._forward_unfolded": [[168, 203], ["x.size", "lightweight_convolution.LightweightConv1dTBC.weight.view", "fairseq.utils.softmax().type_as.view().expand().contiguous().view", "torch.dropout", "torch.dropout", "torch.dropout", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "output.view.view.view", "lightweight_convolution.LightweightConv1dTBC._get_input_buffer", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x_unfold.view.view.view", "fairseq.modules.unfold.unfold1d", "x_unfold.view.view.view", "fairseq.utils.softmax().type_as", "fairseq.utils.softmax().type_as.size", "x.new", "lightweight_convolution.LightweightConv1dTBC._set_input_buffer", "fairseq.utils.softmax().type_as.view().expand().contiguous", "x.unsqueeze", "fairseq.utils.softmax", "fairseq.utils.softmax().type_as.view().expand", "x_unfold.view.view.size", "fairseq.utils.softmax().type_as.view"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer._get_input_buffer", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.unfold.unfold1d", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer._set_input_buffer", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["\n", "", "def", "_forward_unfolded", "(", "self", ",", "x", ",", "incremental_state", ")", ":", "\n", "        ", "'''The conventional implementation of convolutions.\n        Unfolding the input by having a window shifting to the right.'''", "\n", "T", ",", "B", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "K", ",", "H", "=", "self", ".", "kernel_size", ",", "self", ".", "num_heads", "\n", "R", "=", "C", "//", "H", "\n", "assert", "R", "*", "H", "==", "C", "==", "self", ".", "input_size", "\n", "\n", "weight", "=", "self", ".", "weight", ".", "view", "(", "H", ",", "K", ")", "\n", "if", "incremental_state", "is", "not", "None", ":", "\n", "            ", "input_buffer", "=", "self", ".", "_get_input_buffer", "(", "incremental_state", ")", "\n", "if", "input_buffer", "is", "None", ":", "\n", "                ", "input_buffer", "=", "x", ".", "new", "(", ")", "\n", "", "x_unfold", "=", "torch", ".", "cat", "(", "[", "input_buffer", ",", "x", ".", "unsqueeze", "(", "3", ")", "]", ",", "dim", "=", "3", ")", "\n", "if", "self", ".", "kernel_size", ">", "1", ":", "\n", "                ", "self", ".", "_set_input_buffer", "(", "incremental_state", ",", "x_unfold", "[", ":", ",", ":", ",", ":", ",", "-", "self", ".", "kernel_size", "+", "1", ":", "]", ")", "\n", "", "x_unfold", "=", "x_unfold", ".", "view", "(", "T", "*", "B", "*", "H", ",", "R", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "# unfold the input: T x B x C --> T' x B x C x K", "\n", "            ", "x_unfold", "=", "unfold1d", "(", "x", ",", "self", ".", "kernel_size", ",", "self", ".", "padding_l", ",", "0", ")", "\n", "x_unfold", "=", "x_unfold", ".", "view", "(", "T", "*", "B", "*", "H", ",", "R", ",", "K", ")", "\n", "\n", "", "if", "self", ".", "weight_softmax", ":", "\n", "            ", "weight", "=", "utils", ".", "softmax", "(", "weight", ",", "dim", "=", "1", ",", "onnx_trace", "=", "self", ".", "onnx_trace", ")", ".", "type_as", "(", "weight", ")", "\n", "\n", "", "if", "incremental_state", "is", "not", "None", ":", "\n", "            ", "weight", "=", "weight", "[", ":", ",", "-", "x_unfold", ".", "size", "(", "2", ")", ":", "]", "\n", "K", "=", "weight", ".", "size", "(", "1", ")", "\n", "\n", "", "weight", "=", "weight", ".", "view", "(", "1", ",", "H", ",", "K", ")", ".", "expand", "(", "T", "*", "B", ",", "H", ",", "K", ")", ".", "contiguous", "(", ")", ".", "view", "(", "T", "*", "B", "*", "H", ",", "K", ",", "1", ")", "\n", "\n", "weight", "=", "F", ".", "dropout", "(", "weight", ",", "self", ".", "weight_dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "output", "=", "torch", ".", "bmm", "(", "x_unfold", ",", "weight", ")", "# T*B*H x R x 1", "\n", "output", "=", "output", ".", "view", "(", "T", ",", "B", ",", "C", ")", "\n", "return", "output", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.lightweight_convolution.LightweightConv1dTBC._forward_expanded": [[204, 234], ["x.view().transpose.view().transpose.size", "lightweight_convolution.LightweightConv1dTBC.weight.view", "weight.narrow.narrow.view().expand().contiguous", "weight.narrow.narrow.view().transpose", "x.view().transpose.view().transpose.view().transpose", "weight.narrow.narrow.new_zeros", "torch.dropout.as_strided().copy_", "torch.dropout.narrow", "torch.dropout", "torch.dropout", "torch.dropout", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "output.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "fairseq.utils.softmax().type_as", "weight.narrow.narrow.narrow", "weight.narrow.narrow.view().expand", "weight.narrow.narrow.view", "x.view().transpose.view().transpose.view", "torch.dropout.as_strided", "output.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "fairseq.utils.softmax", "weight.narrow.narrow.view", "output.transpose().contiguous().view.transpose().contiguous().view.transpose"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax"], ["\n", "", "def", "_forward_expanded", "(", "self", ",", "x", ",", "incremental_state", ")", ":", "\n", "        ", "'''Turn the convolution filters into band matrices and do matrix multiplication.\n        This is faster when the sequence is short, but less memory efficient.\n        This is not used in the decoder during inference.\n        '''", "\n", "T", ",", "B", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "K", ",", "H", "=", "self", ".", "kernel_size", ",", "self", ".", "num_heads", "\n", "R", "=", "C", "//", "H", "\n", "assert", "R", "*", "H", "==", "C", "==", "self", ".", "input_size", "\n", "\n", "weight", "=", "self", ".", "weight", ".", "view", "(", "H", ",", "K", ")", "\n", "if", "self", ".", "weight_softmax", ":", "\n", "            ", "weight", "=", "utils", ".", "softmax", "(", "weight", ",", "dim", "=", "1", ",", "onnx_trace", "=", "self", ".", "onnx_trace", ")", ".", "type_as", "(", "weight", ")", "\n", "", "weight", "=", "weight", ".", "view", "(", "1", ",", "H", ",", "K", ")", ".", "expand", "(", "T", "*", "B", ",", "H", ",", "K", ")", ".", "contiguous", "(", ")", "\n", "weight", "=", "weight", ".", "view", "(", "T", ",", "B", "*", "H", ",", "K", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "T", ",", "B", "*", "H", ",", "R", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "P", "=", "self", ".", "padding_l", "\n", "if", "K", ">", "T", "and", "P", "==", "K", "-", "1", ":", "\n", "            ", "weight", "=", "weight", ".", "narrow", "(", "2", ",", "K", "-", "T", ",", "T", ")", "\n", "K", ",", "P", "=", "T", ",", "T", "-", "1", "\n", "# turn the convolution filters into band matrices", "\n", "", "weight_expanded", "=", "weight", ".", "new_zeros", "(", "B", "*", "H", ",", "T", ",", "T", "+", "K", "-", "1", ",", "requires_grad", "=", "False", ")", "\n", "weight_expanded", ".", "as_strided", "(", "(", "B", "*", "H", ",", "T", ",", "K", ")", ",", "(", "T", "*", "(", "T", "+", "K", "-", "1", ")", ",", "T", "+", "K", ",", "1", ")", ")", ".", "copy_", "(", "weight", ")", "\n", "weight_expanded", "=", "weight_expanded", ".", "narrow", "(", "2", ",", "P", ",", "T", ")", "\n", "weight_expanded", "=", "F", ".", "dropout", "(", "weight_expanded", ",", "self", ".", "weight_dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "output", "=", "torch", ".", "bmm", "(", "weight_expanded", ",", "x", ")", "\n", "output", "=", "output", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "T", ",", "B", ",", "C", ")", "\n", "return", "output", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.lightweight_convolution.LightweightConv1dTBC.reorder_incremental_state": [[235, 240], ["lightweight_convolution.LightweightConv1dTBC._get_input_buffer", "input_buffer.index_select.index_select.index_select", "lightweight_convolution.LightweightConv1dTBC._set_input_buffer"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer._get_input_buffer", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer._set_input_buffer"], ["\n", "", "def", "reorder_incremental_state", "(", "self", ",", "incremental_state", ",", "new_order", ")", ":", "\n", "        ", "input_buffer", "=", "self", ".", "_get_input_buffer", "(", "incremental_state", ")", "\n", "if", "input_buffer", "is", "not", "None", ":", "\n", "            ", "input_buffer", "=", "input_buffer", ".", "index_select", "(", "1", ",", "new_order", ")", "\n", "self", ".", "_set_input_buffer", "(", "incremental_state", ",", "input_buffer", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.lightweight_convolution.LightweightConv1dTBC._get_input_buffer": [[241, 243], ["fairseq.utils.get_incremental_state"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.get_incremental_state"], ["\n", "", "", "def", "_get_input_buffer", "(", "self", ",", "incremental_state", ")", ":", "\n", "        ", "return", "utils", ".", "get_incremental_state", "(", "self", ",", "incremental_state", ",", "'input_buffer'", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.lightweight_convolution.LightweightConv1dTBC._set_input_buffer": [[244, 246], ["fairseq.utils.set_incremental_state"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.set_incremental_state"], ["\n", "", "def", "_set_input_buffer", "(", "self", ",", "incremental_state", ",", "new_buffer", ")", ":", "\n", "        ", "return", "utils", ".", "set_incremental_state", "(", "self", ",", "incremental_state", ",", "'input_buffer'", ",", "new_buffer", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.lightweight_convolution.LightweightConv1dTBC.extra_repr": [[247, 255], ["None"], "methods", ["None"], ["\n", "", "def", "extra_repr", "(", "self", ")", ":", "\n", "        ", "s", "=", "'{}, kernel_size={}, padding_l={}, num_heads={}, weight_softmax={}, bias={}'", ".", "format", "(", "\n", "self", ".", "input_size", ",", "self", ".", "kernel_size", ",", "self", ".", "padding_l", ",", "\n", "self", ".", "num_heads", ",", "self", ".", "weight_softmax", ",", "self", ".", "bias", "is", "not", "None", "\n", ")", "\n", "if", "self", ".", "weight_dropout", ">", "0.", ":", "\n", "            ", "s", "+=", "', weight_dropout={}'", ".", "format", "(", "self", ".", "weight_dropout", ")", "\n", "", "return", "s", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.lightweight_convolution.LightweightConv": [[14, 29], ["torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "lightweight_convolution.LightweightConv1dTBC", "LightconvLayer", "print"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], ["\n", "def", "LightweightConv", "(", "input_size", ",", "kernel_size", "=", "1", ",", "padding_l", "=", "None", ",", "num_heads", "=", "1", ",", "\n", "weight_dropout", "=", "0.", ",", "weight_softmax", "=", "False", ",", "bias", "=", "False", ")", ":", "\n", "    ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "from", "fairseq", ".", "modules", ".", "lightconv_layer", "import", "LightconvLayer", "\n", "return", "LightconvLayer", "(", "input_size", ",", "kernel_size", "=", "kernel_size", ",", "\n", "padding_l", "=", "padding_l", ",", "num_heads", "=", "num_heads", ",", "\n", "weight_dropout", "=", "weight_dropout", ",", "\n", "weight_softmax", "=", "weight_softmax", ",", "bias", "=", "bias", ")", "\n", "", "except", "ImportError", "as", "e", ":", "\n", "            ", "print", "(", "e", ")", "\n", "", "", "return", "LightweightConv1dTBC", "(", "input_size", ",", "kernel_size", "=", "kernel_size", ",", "\n", "padding_l", "=", "padding_l", ",", "num_heads", "=", "num_heads", ",", "\n", "weight_dropout", "=", "weight_dropout", ",", "\n", "weight_softmax", "=", "weight_softmax", ",", "bias", "=", "bias", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.logsumexp_moe.LogSumExpMoE.forward": [[16, 21], ["ctx.save_for_backward", "torch.logsumexp"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.dynamic_crf_layer.logsumexp"], ["@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "logp", ",", "posterior", ",", "dim", "=", "-", "1", ")", ":", "\n", "        ", "ctx", ".", "save_for_backward", "(", "posterior", ")", "\n", "ctx", ".", "dim", "=", "dim", "\n", "return", "torch", ".", "logsumexp", "(", "logp", ",", "dim", "=", "dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.logsumexp_moe.LogSumExpMoE.backward": [[22, 27], ["grad_output.unsqueeze"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "posterior", ",", "=", "ctx", ".", "saved_tensors", "\n", "grad_logp", "=", "grad_output", ".", "unsqueeze", "(", "ctx", ".", "dim", ")", "*", "posterior", "\n", "return", "grad_logp", ",", "None", ",", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.highway.Highway.__init__": [[17, 29], ["super().__init__", "torch.nn.ModuleList", "torch.nn.ReLU", "highway.Highway.reset_parameters", "torch.nn.Linear", "range"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer.reset_parameters", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear"], ["def", "__init__", "(", "\n", "self", ",", "\n", "input_dim", ":", "int", ",", "\n", "num_layers", ":", "int", "=", "1", "\n", ")", ":", "\n", "        ", "super", "(", "Highway", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "input_dim", ",", "input_dim", "*", "2", ")", "\n", "for", "_", "in", "range", "(", "num_layers", ")", "]", ")", "\n", "self", ".", "activation", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.highway.Highway.reset_parameters": [[30, 41], ["torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.xavier_normal_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "layers", ":", "\n", "# As per comment in AllenNLP:", "\n", "# We should bias the highway layer to just carry its input forward.  We do that by", "\n", "# setting the bias on `B(x)` to be positive, because that means `g` will be biased to", "\n", "# be high, so we will carry the input forward.  The bias on `B(x)` is the second half", "\n", "# of the bias vector in each Linear layer.", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "layer", ".", "bias", "[", "self", ".", "input_dim", ":", "]", ",", "1", ")", "\n", "\n", "nn", ".", "init", ".", "constant_", "(", "layer", ".", "bias", "[", ":", "self", ".", "input_dim", "]", ",", "0", ")", "\n", "nn", ".", "init", ".", "xavier_normal_", "(", "layer", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.highway.Highway.forward": [[42, 53], ["layer", "layer.chunk", "highway.Highway.activation", "torch.sigmoid", "torch.sigmoid.new_tensor"], "methods", ["None"], ["", "", "def", "forward", "(", "\n", "self", ",", "\n", "x", ":", "torch", ".", "Tensor", "\n", ")", ":", "\n", "        ", "for", "layer", "in", "self", ".", "layers", ":", "\n", "            ", "projection", "=", "layer", "(", "x", ")", "\n", "proj_x", ",", "gate", "=", "projection", ".", "chunk", "(", "2", ",", "dim", "=", "-", "1", ")", "\n", "proj_x", "=", "self", ".", "activation", "(", "proj_x", ")", "\n", "gate", "=", "torch", ".", "sigmoid", "(", "gate", ")", "\n", "x", "=", "gate", "*", "x", "+", "(", "gate", ".", "new_tensor", "(", "[", "1", "]", ")", "-", "gate", ")", "*", "proj_x", "\n", "", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.mean_pool_gating_network.MeanPoolGatingNetwork.__init__": [[18, 26], ["super().__init__", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear"], ["def", "__init__", "(", "self", ",", "embed_dim", ",", "num_experts", ",", "dropout", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "self", ".", "num_experts", "=", "num_experts", "\n", "\n", "self", ".", "fc1", "=", "torch", ".", "nn", ".", "Linear", "(", "embed_dim", ",", "embed_dim", ")", "\n", "self", ".", "dropout", "=", "torch", ".", "nn", ".", "Dropout", "(", "dropout", ")", "if", "dropout", "is", "not", "None", "else", "None", "\n", "self", ".", "fc2", "=", "torch", ".", "nn", ".", "Linear", "(", "embed_dim", ",", "num_experts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.mean_pool_gating_network.MeanPoolGatingNetwork.forward": [[27, 51], ["encoder_out.clone.clone.encoder_out.transpose", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "mean_pool_gating_network.MeanPoolGatingNetwork.fc2", "torch.log_softmax().type_as", "torch.log_softmax().type_as", "ValueError", "encoder_out.clone.clone.clone", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "mean_pool_gating_network.MeanPoolGatingNetwork.fc1", "mean_pool_gating_network.MeanPoolGatingNetwork.dropout", "hasattr", "hasattr", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum.type_as", "torch.sum.type_as", "torch.log_softmax", "torch.log_softmax", "encoder_out.clone.clone.encoder_out.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "forward", "(", "self", ",", "encoder_out", ")", ":", "\n", "        ", "if", "not", "(", "\n", "hasattr", "(", "encoder_out", ",", "'encoder_out'", ")", "\n", "and", "hasattr", "(", "encoder_out", ",", "'encoder_padding_mask'", ")", "\n", "and", "encoder_out", ".", "encoder_out", ".", "size", "(", "2", ")", "==", "self", ".", "embed_dim", "\n", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Unexpected format for encoder_out'", ")", "\n", "\n", "# mean pooling over time", "\n", "", "encoder_padding_mask", "=", "encoder_out", ".", "encoder_padding_mask", "# B x T", "\n", "encoder_out", "=", "encoder_out", ".", "encoder_out", ".", "transpose", "(", "0", ",", "1", ")", "# B x T x C", "\n", "if", "encoder_padding_mask", "is", "not", "None", ":", "\n", "            ", "encoder_out", "=", "encoder_out", ".", "clone", "(", ")", "# required because of transpose above", "\n", "encoder_out", "[", "encoder_padding_mask", "]", "=", "0", "\n", "ntokens", "=", "torch", ".", "sum", "(", "~", "encoder_padding_mask", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "x", "=", "torch", ".", "sum", "(", "encoder_out", ",", "dim", "=", "1", ")", "/", "ntokens", ".", "type_as", "(", "encoder_out", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "torch", ".", "mean", "(", "encoder_out", ",", "dim", "=", "1", ")", "\n", "\n", "", "x", "=", "torch", ".", "tanh", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "if", "self", ".", "dropout", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "-", "1", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "type_as", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.scalar_bias.ScalarBias.forward": [[16, 24], ["list", "input.new().fill_", "input.new().fill_.narrow().copy_", "input.size", "input.new", "input.new().fill_.narrow"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "input", ",", "dim", ",", "bias_init", ")", ":", "\n", "        ", "size", "=", "list", "(", "input", ".", "size", "(", ")", ")", "\n", "size", "[", "dim", "]", "+=", "1", "\n", "output", "=", "input", ".", "new", "(", "*", "size", ")", ".", "fill_", "(", "bias_init", ")", "\n", "output", ".", "narrow", "(", "dim", ",", "1", ",", "size", "[", "dim", "]", "-", "1", ")", ".", "copy_", "(", "input", ")", "\n", "ctx", ".", "dim", "=", "dim", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.scalar_bias.ScalarBias.backward": [[25, 28], ["grad.narrow", "grad.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad", ")", ":", "\n", "        ", "return", "grad", ".", "narrow", "(", "ctx", ".", "dim", ",", "1", ",", "grad", ".", "size", "(", "ctx", ".", "dim", ")", "-", "1", ")", ",", "None", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.scalar_bias.scalar_bias": [[30, 32], ["ScalarBias.apply"], "function", ["None"], ["", "", "def", "scalar_bias", "(", "input", ",", "dim", ",", "bias_init", "=", "0", ")", ":", "\n", "    ", "return", "ScalarBias", ".", "apply", "(", "input", ",", "dim", ",", "bias_init", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.linearized_convolution.LinearizedConvolution.__init__": [[23, 27], ["conv_tbc.ConvTBC.__init__", "linearized_convolution.LinearizedConvolution.register_backward_hook"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["\n", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "in_channels", ",", "out_channels", ",", "kernel_size", ",", "**", "kwargs", ")", "\n", "self", ".", "_linearized_weight", "=", "None", "\n", "self", ".", "register_backward_hook", "(", "self", ".", "_clear_linearized_weight", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.linearized_convolution.LinearizedConvolution.forward": [[28, 65], ["linearized_convolution.LinearizedConvolution._get_linearized_weight", "input.size", "torch.linear.view", "super().forward", "linearized_convolution.LinearizedConvolution._get_input_buffer", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.linear", "torch.linear", "input.new().zero_", "linearized_convolution.LinearizedConvolution._set_input_buffer", "input_buffer[].clone", "input.view", "input.new", "input.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.linearized_convolution.LinearizedConvolution._get_linearized_weight", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.forward", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer._get_input_buffer", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer._set_input_buffer", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["\n", "", "def", "forward", "(", "self", ",", "input", ",", "incremental_state", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            incremental_state: Used to buffer signal; if not None, then input is\n                expected to contain a single frame. If the input order changes\n                between time steps, call reorder_incremental_state.\n        Input:\n            Time x Batch x Channel during training\n            Batch x Time x Channel during inference\n        \"\"\"", "\n", "if", "incremental_state", "is", "None", ":", "\n", "            ", "output", "=", "super", "(", ")", ".", "forward", "(", "input", ")", "\n", "if", "self", ".", "kernel_size", "[", "0", "]", ">", "1", "and", "self", ".", "padding", "[", "0", "]", ">", "0", ":", "\n", "# remove future timesteps added by padding", "\n", "                ", "output", "=", "output", "[", ":", "-", "self", ".", "padding", "[", "0", "]", ",", ":", ",", ":", "]", "\n", "", "return", "output", "\n", "\n", "# reshape weight", "\n", "", "weight", "=", "self", ".", "_get_linearized_weight", "(", ")", "\n", "kw", "=", "self", ".", "kernel_size", "[", "0", "]", "\n", "\n", "bsz", "=", "input", ".", "size", "(", "0", ")", "# input: bsz x len x dim", "\n", "if", "kw", ">", "1", ":", "\n", "            ", "input", "=", "input", ".", "data", "\n", "input_buffer", "=", "self", ".", "_get_input_buffer", "(", "incremental_state", ")", "\n", "if", "input_buffer", "is", "None", ":", "\n", "                ", "input_buffer", "=", "input", ".", "new", "(", "bsz", ",", "kw", ",", "input", ".", "size", "(", "2", ")", ")", ".", "zero_", "(", ")", "\n", "self", ".", "_set_input_buffer", "(", "incremental_state", ",", "input_buffer", ")", "\n", "", "else", ":", "\n", "# shift buffer", "\n", "                ", "input_buffer", "[", ":", ",", ":", "-", "1", ",", ":", "]", "=", "input_buffer", "[", ":", ",", "1", ":", ",", ":", "]", ".", "clone", "(", ")", "\n", "# append next input", "\n", "", "input_buffer", "[", ":", ",", "-", "1", ",", ":", "]", "=", "input", "[", ":", ",", "-", "1", ",", ":", "]", "\n", "input", "=", "input_buffer", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", "=", "F", ".", "linear", "(", "input", ".", "view", "(", "bsz", ",", "-", "1", ")", ",", "weight", ",", "self", ".", "bias", ")", "\n", "", "return", "output", ".", "view", "(", "bsz", ",", "1", ",", "-", "1", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.linearized_convolution.LinearizedConvolution.reorder_incremental_state": [[66, 71], ["linearized_convolution.LinearizedConvolution._get_input_buffer", "input_buffer.index_select.index_select.index_select", "linearized_convolution.LinearizedConvolution._set_input_buffer"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer._get_input_buffer", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer._set_input_buffer"], ["\n", "", "def", "reorder_incremental_state", "(", "self", ",", "incremental_state", ",", "new_order", ")", ":", "\n", "        ", "input_buffer", "=", "self", ".", "_get_input_buffer", "(", "incremental_state", ")", "\n", "if", "input_buffer", "is", "not", "None", ":", "\n", "            ", "input_buffer", "=", "input_buffer", ".", "index_select", "(", "0", ",", "new_order", ")", "\n", "self", ".", "_set_input_buffer", "(", "incremental_state", ",", "input_buffer", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.linearized_convolution.LinearizedConvolution._get_input_buffer": [[72, 74], ["fairseq.utils.get_incremental_state"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.get_incremental_state"], ["\n", "", "", "def", "_get_input_buffer", "(", "self", ",", "incremental_state", ")", ":", "\n", "        ", "return", "utils", ".", "get_incremental_state", "(", "self", ",", "incremental_state", ",", "'input_buffer'", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.linearized_convolution.LinearizedConvolution._set_input_buffer": [[75, 77], ["fairseq.utils.set_incremental_state"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.set_incremental_state"], ["\n", "", "def", "_set_input_buffer", "(", "self", ",", "incremental_state", ",", "new_buffer", ")", ":", "\n", "        ", "return", "utils", ".", "set_incremental_state", "(", "self", ",", "incremental_state", ",", "'input_buffer'", ",", "new_buffer", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.linearized_convolution.LinearizedConvolution._get_linearized_weight": [[78, 85], ["linearized_convolution.LinearizedConvolution.weight.transpose().transpose().contiguous", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "linearized_convolution.LinearizedConvolution.size", "linearized_convolution.LinearizedConvolution.view", "linearized_convolution.LinearizedConvolution.weight.transpose().transpose", "linearized_convolution.LinearizedConvolution.weight.transpose"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["\n", "", "def", "_get_linearized_weight", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "_linearized_weight", "is", "None", ":", "\n", "            ", "kw", "=", "self", ".", "kernel_size", "[", "0", "]", "\n", "weight", "=", "self", ".", "weight", ".", "transpose", "(", "2", ",", "1", ")", ".", "transpose", "(", "1", ",", "0", ")", ".", "contiguous", "(", ")", "\n", "assert", "weight", ".", "size", "(", ")", "==", "(", "self", ".", "out_channels", ",", "kw", ",", "self", ".", "in_channels", ")", "\n", "self", ".", "_linearized_weight", "=", "torch", ".", "nn", ".", "Parameter", "(", "weight", ".", "view", "(", "self", ".", "out_channels", ",", "-", "1", ")", ")", "\n", "", "return", "self", ".", "_linearized_weight", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.linearized_convolution.LinearizedConvolution._clear_linearized_weight": [[86, 88], ["None"], "methods", ["None"], ["\n", "", "def", "_clear_linearized_weight", "(", "self", ",", "*", "args", ")", ":", "\n", "        ", "self", ".", "_linearized_weight", "=", "None", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.vggblock.VGGBlock.__init__": [[60, 111], ["super().__init__", "vggblock._pair", "vggblock._pair", "vggblock._pair", "torch.ModuleList", "torch.ModuleList", "range", "tuple", "vggblock._pair", "torch.Conv2d", "torch.Conv2d", "vggblock.VGGBlock.layers.append", "vggblock.VGGBlock.layers.append", "torch.MaxPool2d", "torch.MaxPool2d", "vggblock.VGGBlock.layers.append", "vggblock.infer_conv_output_dim", "vggblock.infer_conv_output_dim", "vggblock.VGGBlock.layers.append", "torch.ReLU", "torch.ReLU", "torch.LayerNorm", "torch.LayerNorm"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.vggblock._pair", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.vggblock._pair", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.vggblock._pair", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.vggblock._pair", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.vggblock.infer_conv_output_dim", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.vggblock.infer_conv_output_dim", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.layer_norm.LayerNorm", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.layer_norm.LayerNorm"], ["def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "conv_kernel_size", ",", "\n", "pooling_kernel_size", ",", "\n", "num_conv_layers", ",", "\n", "input_dim", ",", "\n", "conv_stride", "=", "1", ",", "\n", "padding", "=", "None", ",", "\n", "layer_norm", "=", "False", ",", "\n", ")", ":", "\n", "        ", "assert", "(", "\n", "input_dim", "is", "not", "None", "\n", ")", ",", "\"Need input_dim for LayerNorm and infer_conv_output_dim\"", "\n", "super", "(", "VGGBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "conv_kernel_size", "=", "_pair", "(", "conv_kernel_size", ")", "\n", "self", ".", "pooling_kernel_size", "=", "_pair", "(", "pooling_kernel_size", ")", "\n", "self", ".", "num_conv_layers", "=", "num_conv_layers", "\n", "self", ".", "padding", "=", "(", "\n", "tuple", "(", "e", "//", "2", "for", "e", "in", "self", ".", "conv_kernel_size", ")", "\n", "if", "padding", "is", "None", "\n", "else", "_pair", "(", "padding", ")", "\n", ")", "\n", "self", ".", "conv_stride", "=", "_pair", "(", "conv_stride", ")", "\n", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", ")", "\n", "for", "layer", "in", "range", "(", "num_conv_layers", ")", ":", "\n", "            ", "conv_op", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", "if", "layer", "==", "0", "else", "out_channels", ",", "\n", "out_channels", ",", "\n", "self", ".", "conv_kernel_size", ",", "\n", "stride", "=", "self", ".", "conv_stride", ",", "\n", "padding", "=", "self", ".", "padding", ",", "\n", ")", "\n", "self", ".", "layers", ".", "append", "(", "conv_op", ")", "\n", "if", "layer_norm", ":", "\n", "                ", "conv_output_dim", ",", "per_channel_dim", "=", "infer_conv_output_dim", "(", "\n", "conv_op", ",", "input_dim", ",", "in_channels", "if", "layer", "==", "0", "else", "out_channels", "\n", ")", "\n", "self", ".", "layers", ".", "append", "(", "nn", ".", "LayerNorm", "(", "per_channel_dim", ")", ")", "\n", "input_dim", "=", "per_channel_dim", "\n", "", "self", ".", "layers", ".", "append", "(", "nn", ".", "ReLU", "(", ")", ")", "\n", "\n", "", "if", "self", ".", "pooling_kernel_size", "is", "not", "None", ":", "\n", "            ", "pool_op", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "self", ".", "pooling_kernel_size", ",", "ceil_mode", "=", "True", ")", "\n", "self", ".", "layers", ".", "append", "(", "pool_op", ")", "\n", "self", ".", "total_output_dim", ",", "self", ".", "output_dim", "=", "infer_conv_output_dim", "(", "\n", "pool_op", ",", "input_dim", ",", "out_channels", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.vggblock.VGGBlock.forward": [[113, 117], ["enumerate"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "i", ",", "_", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "            ", "x", "=", "self", ".", "layers", "[", "i", "]", "(", "x", ")", "\n", "", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.vggblock._pair": [[15, 20], ["isinstance", "tuple", "itertools.repeat", "len"], "function", ["None"], ["def", "_pair", "(", "v", ")", ":", "\n", "    ", "if", "isinstance", "(", "v", ",", "Iterable", ")", ":", "\n", "        ", "assert", "len", "(", "v", ")", "==", "2", ",", "\"len(v) != 2\"", "\n", "return", "v", "\n", "", "return", "tuple", "(", "repeat", "(", "v", ",", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.vggblock.infer_conv_output_dim": [[22, 36], ["torch.randn", "torch.randn", "conv_op", "x.transpose.transpose", "x.transpose.size", "x.transpose.size", "x.transpose.contiguous().view().size", "x.transpose.contiguous().view", "x.transpose.contiguous"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "infer_conv_output_dim", "(", "conv_op", ",", "input_dim", ",", "sample_inchannel", ")", ":", "\n", "    ", "sample_seq_len", "=", "200", "\n", "sample_bsz", "=", "10", "\n", "x", "=", "torch", ".", "randn", "(", "sample_bsz", ",", "sample_inchannel", ",", "sample_seq_len", ",", "input_dim", ")", "\n", "# N x C x H x W", "\n", "# N: sample_bsz, C: sample_inchannel, H: sample_seq_len, W: input_dim", "\n", "x", "=", "conv_op", "(", "x", ")", "\n", "# N x C x H x W", "\n", "x", "=", "x", ".", "transpose", "(", "1", ",", "2", ")", "\n", "# N x H x C x W", "\n", "bsz", ",", "seq", "=", "x", ".", "size", "(", ")", "[", ":", "2", "]", "\n", "per_channel_dim", "=", "x", ".", "size", "(", ")", "[", "3", "]", "\n", "# bsz: N, seq: H, CxW the rest", "\n", "return", "x", ".", "contiguous", "(", ")", ".", "view", "(", "bsz", ",", "seq", ",", "-", "1", ")", ".", "size", "(", "-", "1", ")", ",", "per_channel_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_sentence_encoder.TransformerSentenceEncoder.__init__": [[72, 176], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "range", "torch.Embedding", "torch.Embedding", "torch.Embedding", "fairseq.modules.PositionalEmbedding", "fairseq.modules.LayerNorm", "transformer_sentence_encoder.TransformerSentenceEncoder.apply", "transformer_sentence_encoder.TransformerSentenceEncoder.__init__.freeze_module_params"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.Embedding", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.Embedding", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.Embedding", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.Embedding", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.Embedding", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.Embedding", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.positional_embedding.PositionalEmbedding", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.layer_norm.LayerNorm"], ["def", "__init__", "(", "\n", "self", ",", "\n", "padding_idx", ":", "int", ",", "\n", "vocab_size", ":", "int", ",", "\n", "num_encoder_layers", ":", "int", "=", "6", ",", "\n", "embedding_dim", ":", "int", "=", "768", ",", "\n", "ffn_embedding_dim", ":", "int", "=", "3072", ",", "\n", "num_attention_heads", ":", "int", "=", "8", ",", "\n", "dropout", ":", "float", "=", "0.1", ",", "\n", "attention_dropout", ":", "float", "=", "0.1", ",", "\n", "activation_dropout", ":", "float", "=", "0.1", ",", "\n", "layerdrop", ":", "float", "=", "0.0", ",", "\n", "max_seq_len", ":", "int", "=", "256", ",", "\n", "num_segments", ":", "int", "=", "2", ",", "\n", "use_position_embeddings", ":", "bool", "=", "True", ",", "\n", "offset_positions_by_padding", ":", "bool", "=", "True", ",", "\n", "encoder_normalize_before", ":", "bool", "=", "False", ",", "\n", "apply_bert_init", ":", "bool", "=", "False", ",", "\n", "activation_fn", ":", "str", "=", "\"relu\"", ",", "\n", "learned_pos_embedding", ":", "bool", "=", "True", ",", "\n", "add_bias_kv", ":", "bool", "=", "False", ",", "\n", "add_zero_attn", ":", "bool", "=", "False", ",", "\n", "embed_scale", ":", "float", "=", "None", ",", "\n", "freeze_embeddings", ":", "bool", "=", "False", ",", "\n", "n_trans_layers_to_freeze", ":", "int", "=", "0", ",", "\n", "export", ":", "bool", "=", "False", ",", "\n", "traceable", ":", "bool", "=", "False", ",", "\n", ")", "->", "None", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "padding_idx", "=", "padding_idx", "\n", "self", ".", "vocab_size", "=", "vocab_size", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "layerdrop", "=", "layerdrop", "\n", "self", ".", "max_seq_len", "=", "max_seq_len", "\n", "self", ".", "embedding_dim", "=", "embedding_dim", "\n", "self", ".", "num_segments", "=", "num_segments", "\n", "self", ".", "use_position_embeddings", "=", "use_position_embeddings", "\n", "self", ".", "apply_bert_init", "=", "apply_bert_init", "\n", "self", ".", "learned_pos_embedding", "=", "learned_pos_embedding", "\n", "self", ".", "traceable", "=", "traceable", "\n", "\n", "self", ".", "embed_tokens", "=", "nn", ".", "Embedding", "(", "\n", "self", ".", "vocab_size", ",", "self", ".", "embedding_dim", ",", "self", ".", "padding_idx", "\n", ")", "\n", "self", ".", "embed_scale", "=", "embed_scale", "\n", "\n", "self", ".", "segment_embeddings", "=", "(", "\n", "nn", ".", "Embedding", "(", "self", ".", "num_segments", ",", "self", ".", "embedding_dim", ",", "padding_idx", "=", "None", ")", "\n", "if", "self", ".", "num_segments", ">", "0", "\n", "else", "None", "\n", ")", "\n", "\n", "self", ".", "embed_positions", "=", "(", "\n", "PositionalEmbedding", "(", "\n", "self", ".", "max_seq_len", ",", "\n", "self", ".", "embedding_dim", ",", "\n", "padding_idx", "=", "(", "self", ".", "padding_idx", "if", "offset_positions_by_padding", "else", "None", ")", ",", "\n", "learned", "=", "self", ".", "learned_pos_embedding", ",", "\n", ")", "\n", "if", "self", ".", "use_position_embeddings", "\n", "else", "None", "\n", ")", "\n", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "TransformerSentenceEncoderLayer", "(", "\n", "embedding_dim", "=", "self", ".", "embedding_dim", ",", "\n", "ffn_embedding_dim", "=", "ffn_embedding_dim", ",", "\n", "num_attention_heads", "=", "num_attention_heads", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "attention_dropout", "=", "attention_dropout", ",", "\n", "activation_dropout", "=", "activation_dropout", ",", "\n", "activation_fn", "=", "activation_fn", ",", "\n", "add_bias_kv", "=", "add_bias_kv", ",", "\n", "add_zero_attn", "=", "add_zero_attn", ",", "\n", "export", "=", "export", ",", "\n", ")", "\n", "for", "_", "in", "range", "(", "num_encoder_layers", ")", "\n", "]", "\n", ")", "\n", "\n", "if", "encoder_normalize_before", ":", "\n", "            ", "self", ".", "emb_layer_norm", "=", "LayerNorm", "(", "self", ".", "embedding_dim", ",", "export", "=", "export", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "emb_layer_norm", "=", "None", "\n", "\n", "# Apply initialization of model params after building the model", "\n", "", "if", "self", ".", "apply_bert_init", ":", "\n", "            ", "self", ".", "apply", "(", "init_bert_params", ")", "\n", "\n", "", "def", "freeze_module_params", "(", "m", ")", ":", "\n", "            ", "if", "m", "is", "not", "None", ":", "\n", "                ", "for", "p", "in", "m", ".", "parameters", "(", ")", ":", "\n", "                    ", "p", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "", "if", "freeze_embeddings", ":", "\n", "            ", "freeze_module_params", "(", "self", ".", "embed_tokens", ")", "\n", "freeze_module_params", "(", "self", ".", "segment_embeddings", ")", "\n", "freeze_module_params", "(", "self", ".", "embed_positions", ")", "\n", "freeze_module_params", "(", "self", ".", "emb_layer_norm", ")", "\n", "\n", "", "for", "layer", "in", "range", "(", "n_trans_layers_to_freeze", ")", ":", "\n", "            ", "freeze_module_params", "(", "self", ".", "layers", "[", "layer", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_sentence_encoder.TransformerSentenceEncoder.forward": [[177, 234], ["tokens.eq", "transformer_sentence_encoder.TransformerSentenceEncoder.embed_tokens", "torch.dropout", "torch.dropout", "torch.dropout", "transformer_sentence_encoder.TransformerSentenceEncoder.transpose", "transformer_sentence_encoder.TransformerSentenceEncoder.embed_positions", "transformer_sentence_encoder.TransformerSentenceEncoder.segment_embeddings", "transformer_sentence_encoder.TransformerSentenceEncoder.emb_layer_norm", "inner_states.append", "random.uniform", "tokens.eq.any", "tokens.eq.unsqueeze().type_as", "layer", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "inner_states.append", "tokens.eq.unsqueeze"], "methods", ["None"], ["", "", "def", "forward", "(", "\n", "self", ",", "\n", "tokens", ":", "torch", ".", "Tensor", ",", "\n", "segment_labels", ":", "torch", ".", "Tensor", "=", "None", ",", "\n", "last_state_only", ":", "bool", "=", "False", ",", "\n", "positions", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", ",", "\n", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "\n", "# compute padding mask. This is needed for multi-head attention", "\n", "        ", "padding_mask", "=", "tokens", ".", "eq", "(", "self", ".", "padding_idx", ")", "\n", "if", "not", "self", ".", "traceable", "and", "not", "padding_mask", ".", "any", "(", ")", ":", "\n", "            ", "padding_mask", "=", "None", "\n", "\n", "", "x", "=", "self", ".", "embed_tokens", "(", "tokens", ")", "\n", "\n", "if", "self", ".", "embed_scale", "is", "not", "None", ":", "\n", "            ", "x", "*=", "self", ".", "embed_scale", "\n", "\n", "", "if", "self", ".", "embed_positions", "is", "not", "None", ":", "\n", "            ", "x", "+=", "self", ".", "embed_positions", "(", "tokens", ",", "positions", "=", "positions", ")", "\n", "\n", "", "if", "self", ".", "segment_embeddings", "is", "not", "None", "and", "segment_labels", "is", "not", "None", ":", "\n", "            ", "x", "+=", "self", ".", "segment_embeddings", "(", "segment_labels", ")", "\n", "\n", "", "if", "self", ".", "emb_layer_norm", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "emb_layer_norm", "(", "x", ")", "\n", "\n", "", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "# account for padding while computing the representation", "\n", "if", "padding_mask", "is", "not", "None", ":", "\n", "            ", "x", "*=", "1", "-", "padding_mask", ".", "unsqueeze", "(", "-", "1", ")", ".", "type_as", "(", "x", ")", "\n", "\n", "# B x T x C -> T x B x C", "\n", "", "x", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "inner_states", "=", "[", "]", "\n", "if", "not", "last_state_only", ":", "\n", "            ", "inner_states", ".", "append", "(", "x", ")", "\n", "\n", "", "for", "layer", "in", "self", ".", "layers", ":", "\n", "# add LayerDrop (see https://arxiv.org/abs/1909.11556 for description)", "\n", "            ", "dropout_probability", "=", "random", ".", "uniform", "(", "0", ",", "1", ")", "\n", "if", "not", "self", ".", "training", "or", "(", "dropout_probability", ">", "self", ".", "layerdrop", ")", ":", "\n", "                ", "x", ",", "_", "=", "layer", "(", "x", ",", "self_attn_padding_mask", "=", "padding_mask", ")", "\n", "if", "not", "last_state_only", ":", "\n", "                    ", "inner_states", ".", "append", "(", "x", ")", "\n", "\n", "", "", "", "sentence_rep", "=", "x", "[", "0", ",", ":", ",", ":", "]", "\n", "\n", "if", "last_state_only", ":", "\n", "            ", "inner_states", "=", "[", "x", "]", "\n", "\n", "", "if", "self", ".", "traceable", ":", "\n", "            ", "return", "torch", ".", "stack", "(", "inner_states", ")", ",", "sentence_rep", "\n", "", "else", ":", "\n", "            ", "return", "inner_states", ",", "sentence_rep", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_sentence_encoder.init_bert_params": [[20, 46], ["isinstance", "isinstance", "isinstance", "module.weight.data.normal_", "module.weight.data.normal_", "module.q_proj.weight.data.normal_", "module.k_proj.weight.data.normal_", "module.v_proj.weight.data.normal_", "module.bias.data.zero_", "module.weight.data[].zero_"], "function", ["None"], ["def", "init_bert_params", "(", "module", ")", ":", "\n", "    ", "\"\"\"\n    Initialize the weights specific to the BERT Model.\n    This overrides the default initializations depending on the specified arguments.\n        1. If normal_init_linear_weights is set then weights of linear\n           layer will be initialized using the normal distribution and\n           bais will be set to the specified value.\n        2. If normal_init_embed_weights is set then weights of embedding\n           layer will be initialized using the normal distribution.\n        3. If normal_init_proj_weights is set then weights of\n           in_project_weight for MultiHeadAttention initialized using\n           the normal distribution (to be validated).\n    \"\"\"", "\n", "\n", "if", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "module", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "0.02", ")", "\n", "if", "module", ".", "bias", "is", "not", "None", ":", "\n", "            ", "module", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "if", "isinstance", "(", "module", ",", "nn", ".", "Embedding", ")", ":", "\n", "        ", "module", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "0.02", ")", "\n", "if", "module", ".", "padding_idx", "is", "not", "None", ":", "\n", "            ", "module", ".", "weight", ".", "data", "[", "module", ".", "padding_idx", "]", ".", "zero_", "(", ")", "\n", "", "", "if", "isinstance", "(", "module", ",", "MultiheadAttention", ")", ":", "\n", "        ", "module", ".", "q_proj", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "0.02", ")", "\n", "module", ".", "k_proj", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "0.02", ")", "\n", "module", ".", "v_proj", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0.0", ",", "std", "=", "0.02", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.downsampled_multihead_attention.SingleHeadAttention.__init__": [[19, 61], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "k_layers.append", "v_layers.append", "k_layers.append", "downsampled_multihead_attention.GatedLinear", "v_layers.append", "k_layers.append", "downsampled_multihead_attention.Linear", "v_layers.append", "downsampled_multihead_attention.Linear", "downsampled_multihead_attention.Linear", "downsampled_multihead_attention.Downsample", "downsampled_multihead_attention.Downsample", "downsampled_multihead_attention.GatedLinear", "downsampled_multihead_attention.GatedLinear", "downsampled_multihead_attention.Linear", "downsampled_multihead_attention.Linear"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.downsampled_multihead_attention.GatedLinear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.downsampled_multihead_attention.GatedLinear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.downsampled_multihead_attention.GatedLinear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear"], ["def", "__init__", "(", "\n", "self", ",", "out_channels", ",", "embed_dim", ",", "head_dim", ",", "head_index", ",", "dropout", "=", "0.", ",", "\n", "bias", "=", "True", ",", "project_input", "=", "True", ",", "gated", "=", "False", ",", "downsample", "=", "False", ",", "\n", "num_heads", "=", "1", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "head_index", "=", "head_index", "\n", "self", ".", "head_dim", "=", "head_dim", "\n", "self", ".", "project_input", "=", "project_input", "\n", "self", ".", "gated", "=", "gated", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "projection", "=", "None", "\n", "\n", "k_layers", "=", "[", "]", "\n", "v_layers", "=", "[", "]", "\n", "if", "self", ".", "downsample", ":", "\n", "            ", "k_layers", ".", "append", "(", "Downsample", "(", "self", ".", "head_index", ")", ")", "\n", "v_layers", ".", "append", "(", "Downsample", "(", "self", ".", "head_index", ")", ")", "\n", "out_proj_size", "=", "self", ".", "head_dim", "\n", "", "else", ":", "\n", "            ", "out_proj_size", "=", "self", ".", "head_dim", "*", "self", ".", "num_heads", "\n", "", "if", "self", ".", "gated", ":", "\n", "            ", "k_layers", ".", "append", "(", "GatedLinear", "(", "self", ".", "embed_dim", ",", "out_proj_size", ",", "bias", "=", "bias", ")", ")", "\n", "self", ".", "in_proj_q", "=", "GatedLinear", "(", "self", ".", "embed_dim", ",", "out_proj_size", ",", "bias", "=", "bias", ")", "\n", "v_layers", ".", "append", "(", "GatedLinear", "(", "self", ".", "embed_dim", ",", "out_proj_size", ",", "bias", "=", "bias", ")", ")", "\n", "", "else", ":", "\n", "            ", "k_layers", ".", "append", "(", "Linear", "(", "self", ".", "embed_dim", ",", "out_proj_size", ",", "bias", "=", "bias", ")", ")", "\n", "self", ".", "in_proj_q", "=", "Linear", "(", "self", ".", "embed_dim", ",", "out_proj_size", ",", "bias", "=", "bias", ")", "\n", "v_layers", ".", "append", "(", "Linear", "(", "self", ".", "embed_dim", ",", "out_proj_size", ",", "bias", "=", "bias", ")", ")", "\n", "\n", "", "self", ".", "in_proj_k", "=", "nn", ".", "Sequential", "(", "*", "k_layers", ")", "\n", "self", ".", "in_proj_v", "=", "nn", ".", "Sequential", "(", "*", "v_layers", ")", "\n", "\n", "if", "self", ".", "downsample", ":", "\n", "            ", "self", ".", "out_proj", "=", "Linear", "(", "out_proj_size", ",", "self", ".", "head_dim", ",", "bias", "=", "bias", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "out_proj", "=", "Linear", "(", "out_proj_size", ",", "out_channels", ",", "bias", "=", "bias", ")", "\n", "\n", "", "self", ".", "scaling", "=", "self", ".", "head_dim", "**", "-", "0.5", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.downsampled_multihead_attention.SingleHeadAttention.forward": [[62, 148], ["key.size", "query.size", "q.view.view.transpose", "k.view.view.transpose", "fairseq.modules.scalar_bias.scalar_bias.transpose", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.softmax", "torch.softmax", "torch.softmax", "torch.dropout", "torch.dropout", "torch.dropout", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "downsampled_multihead_attention.SingleHeadAttention.out_proj", "list", "key.size", "value.size", "downsampled_multihead_attention.SingleHeadAttention.in_proj_q", "downsampled_multihead_attention.SingleHeadAttention.in_proj_k", "downsampled_multihead_attention.SingleHeadAttention.in_proj_v", "q.view.view.view", "k.view.view.view", "fairseq.modules.scalar_bias.scalar_bias.view", "k.view.view.transpose", "[].unsqueeze", "[].unsqueeze", "fairseq.modules.scalar_bias.scalar_bias", "fairseq.modules.scalar_bias.scalar_bias", "attn.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "attn.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "query.size", "key_padding_mask.size", "key_padding_mask.size", "k.view.view.size", "query.size", "key.size", "key_padding_mask.max", "attn_weights.view.view.masked_fill", "attn_weights.view.view.view", "attn_weights.view.view.view", "attn_weights.view.view.view", "key_padding_mask.unsqueeze().unsqueeze", "attn.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "attn.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.tril", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "torch.triu", "attn_weights.view.view.data.new().expand().clone", "attn_weights.view.view.data.new().expand().clone", "key_padding_mask.unsqueeze", "attn.transpose().contiguous().view.transpose().contiguous().view.transpose", "attn.transpose().contiguous().view.transpose().contiguous().view.transpose", "attn_weights.view.view.data.new().expand", "attn_weights.view.view.data.new().expand", "attn_weights.view.view.data.new", "attn_weights.view.view.data.new"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.scalar_bias.scalar_bias", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.scalar_bias.scalar_bias", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "forward", "(", "\n", "self", ",", "query", ",", "key", ",", "value", ",", "mask_future_timesteps", "=", "False", ",", "\n", "key_padding_mask", "=", "None", ",", "use_scalar_bias", "=", "False", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Input shape: Time x Batch x Channel\n        Self-attention can be implemented by passing in the same arguments for\n        query, key and value. Future timesteps can be masked with the\n        `mask_future_timesteps` argument. Padding elements can be excluded from\n        the key by passing a binary ByteTensor (`key_padding_mask`) with shape:\n        batch x src_len, where padding elements are indicated by 1s.\n        \"\"\"", "\n", "src_len", ",", "bsz", ",", "out_channels", "=", "key", ".", "size", "(", ")", "\n", "tgt_len", "=", "query", ".", "size", "(", "0", ")", "\n", "assert", "list", "(", "query", ".", "size", "(", ")", ")", "==", "[", "tgt_len", ",", "bsz", ",", "out_channels", "]", "\n", "assert", "key", ".", "size", "(", ")", "==", "value", ".", "size", "(", ")", "\n", "\n", "if", "key_padding_mask", "is", "not", "None", ":", "\n", "            ", "assert", "key_padding_mask", ".", "size", "(", "0", ")", "==", "bsz", "\n", "assert", "key_padding_mask", ".", "size", "(", "1", ")", "==", "src_len", "\n", "\n", "", "if", "self", ".", "downsample", ":", "\n", "            ", "size", "=", "bsz", "\n", "", "else", ":", "\n", "            ", "size", "=", "bsz", "*", "self", ".", "num_heads", "\n", "\n", "", "k", "=", "key", "\n", "v", "=", "value", "\n", "q", "=", "query", "\n", "if", "self", ".", "project_input", ":", "\n", "            ", "q", "=", "self", ".", "in_proj_q", "(", "q", ")", "\n", "k", "=", "self", ".", "in_proj_k", "(", "k", ")", "\n", "v", "=", "self", ".", "in_proj_v", "(", "v", ")", "\n", "src_len", "=", "k", ".", "size", "(", ")", "[", "0", "]", "\n", "", "q", "*=", "self", ".", "scaling", "\n", "\n", "if", "not", "self", ".", "downsample", ":", "\n", "            ", "q", "=", "q", ".", "view", "(", "tgt_len", ",", "size", ",", "self", ".", "head_dim", ")", "\n", "k", "=", "k", ".", "view", "(", "src_len", ",", "size", ",", "self", ".", "head_dim", ")", "\n", "v", "=", "v", ".", "view", "(", "src_len", ",", "size", ",", "self", ".", "head_dim", ")", "\n", "\n", "", "q", "=", "q", ".", "transpose", "(", "0", ",", "1", ")", "\n", "k", "=", "k", ".", "transpose", "(", "0", ",", "1", ")", "\n", "v", "=", "v", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "attn_weights", "=", "torch", ".", "bmm", "(", "q", ",", "k", ".", "transpose", "(", "1", ",", "2", ")", ")", "\n", "if", "mask_future_timesteps", ":", "\n", "            ", "assert", "query", ".", "size", "(", ")", "==", "key", ".", "size", "(", ")", ",", "'mask_future_timesteps only applies to self-attention'", "\n", "attn_weights", "*=", "torch", ".", "tril", "(", "\n", "attn_weights", ".", "data", ".", "new", "(", "[", "1", "]", ")", ".", "expand", "(", "tgt_len", ",", "tgt_len", ")", ".", "clone", "(", ")", ",", "\n", "diagonal", "=", "-", "1", ",", "\n", ")", "[", ":", ",", ":", ":", "self", ".", "head_index", "+", "1", "if", "self", ".", "downsample", "else", "1", "]", ".", "unsqueeze", "(", "0", ")", "\n", "attn_weights", "+=", "torch", ".", "triu", "(", "\n", "attn_weights", ".", "data", ".", "new", "(", "[", "-", "math", ".", "inf", "]", ")", ".", "expand", "(", "tgt_len", ",", "tgt_len", ")", ".", "clone", "(", ")", ",", "\n", "diagonal", "=", "0", "\n", ")", "[", ":", ",", ":", ":", "self", ".", "head_index", "+", "1", "if", "self", ".", "downsample", "else", "1", "]", ".", "unsqueeze", "(", "0", ")", "\n", "", "tgt_size", "=", "tgt_len", "\n", "if", "use_scalar_bias", ":", "\n", "            ", "attn_weights", "=", "scalar_bias", "(", "attn_weights", ",", "2", ")", "\n", "v", "=", "scalar_bias", "(", "v", ",", "1", ")", "\n", "tgt_size", "+=", "1", "\n", "\n", "", "if", "key_padding_mask", "is", "not", "None", ":", "\n", "# don't attend to padding symbols", "\n", "            ", "if", "key_padding_mask", ".", "max", "(", ")", ">", "0", ":", "\n", "                ", "if", "self", ".", "downsample", ":", "\n", "                    ", "attn_weights", "=", "attn_weights", ".", "view", "(", "bsz", ",", "1", ",", "tgt_len", ",", "src_len", ")", "\n", "", "else", ":", "\n", "                    ", "attn_weights", "=", "attn_weights", ".", "view", "(", "size", ",", "self", ".", "num_heads", ",", "tgt_len", ",", "src_len", ")", "\n", "", "attn_weights", "=", "attn_weights", ".", "masked_fill", "(", "\n", "key_padding_mask", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", ",", "\n", "-", "math", ".", "inf", ",", "\n", ")", "\n", "attn_weights", "=", "attn_weights", ".", "view", "(", "size", ",", "tgt_len", ",", "src_len", ")", "\n", "", "", "attn_weights", "=", "F", ".", "softmax", "(", "attn_weights", ",", "dim", "=", "-", "1", ")", "\n", "attn_weights", "=", "F", ".", "dropout", "(", "attn_weights", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "attn", "=", "torch", ".", "bmm", "(", "attn_weights", ",", "v", ")", "\n", "if", "self", ".", "downsample", ":", "\n", "            ", "attn", "=", "attn", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "tgt_len", ",", "bsz", ",", "self", ".", "head_dim", ")", "\n", "", "else", ":", "\n", "            ", "attn", "=", "attn", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "tgt_len", ",", "bsz", ",", "self", ".", "embed_dim", ")", "\n", "\n", "", "attn", "=", "self", ".", "out_proj", "(", "attn", ")", "\n", "\n", "return", "attn", ",", "attn_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.downsampled_multihead_attention.DownsampledMultiHeadAttention.__init__": [[154, 186], ["range", "torch.ModuleList.__init__", "downsampled_multihead_attention.Linear", "torch.ModuleList.__init__", "downsampled_multihead_attention.SingleHeadAttention", "attention_heads.append", "downsampled_multihead_attention.SingleHeadAttention"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["def", "__init__", "(", "\n", "self", ",", "out_channels", ",", "embed_dim", ",", "num_heads", ",", "dropout", "=", "0.", ",", "bias", "=", "True", ",", "\n", "project_input", "=", "True", ",", "gated", "=", "False", ",", "downsample", "=", "False", ",", "\n", ")", ":", "\n", "        ", "self", ".", "embed_dim", "=", "embed_dim", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "head_dim", "=", "embed_dim", "//", "num_heads", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "gated", "=", "gated", "\n", "self", ".", "project_input", "=", "project_input", "\n", "assert", "self", ".", "head_dim", "*", "num_heads", "==", "embed_dim", "\n", "\n", "if", "self", ".", "downsample", ":", "\n", "            ", "attention_heads", "=", "[", "]", "\n", "for", "index", "in", "range", "(", "self", ".", "num_heads", ")", ":", "\n", "                ", "attention_heads", ".", "append", "(", "\n", "SingleHeadAttention", "(", "\n", "out_channels", ",", "self", ".", "embed_dim", ",", "self", ".", "head_dim", ",", "index", ",", "\n", "self", ".", "dropout", ",", "bias", ",", "self", ".", "project_input", ",", "self", ".", "gated", ",", "\n", "self", ".", "downsample", ",", "self", ".", "num_heads", ",", "\n", ")", "\n", ")", "\n", "", "super", "(", ")", ".", "__init__", "(", "modules", "=", "attention_heads", ")", "\n", "self", ".", "out_proj", "=", "Linear", "(", "embed_dim", ",", "out_channels", ",", "bias", "=", "bias", ")", "\n", "", "else", ":", "\n", "# either we have a list of attention heads, or just one attention head", "\n", "# if not being downsampled, we can do the heads with one linear layer instead of separate ones", "\n", "            ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "attention_module", "=", "SingleHeadAttention", "(", "\n", "out_channels", ",", "self", ".", "embed_dim", ",", "self", ".", "head_dim", ",", "1", ",", "self", ".", "dropout", ",", "\n", "bias", ",", "self", ".", "project_input", ",", "self", ".", "gated", ",", "self", ".", "downsample", ",", "self", ".", "num_heads", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.downsampled_multihead_attention.DownsampledMultiHeadAttention.forward": [[188, 226], ["key.size", "query.size", "list", "key.size", "value.size", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "downsampled_multihead_attention.DownsampledMultiHeadAttention.out_proj", "downsampled_multihead_attention.DownsampledMultiHeadAttention.attention_module", "attn.append", "attn_weights.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "full_attn_weights.view.view.view", "query.size", "attn.append", "attn_weights.append", "attn_weights[].clone", "full_attn_weights.view.view.sum"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "", "def", "forward", "(", "\n", "self", ",", "query", ",", "key", ",", "value", ",", "mask_future_timesteps", "=", "False", ",", "\n", "key_padding_mask", "=", "None", ",", "use_scalar_bias", "=", "False", ",", "\n", ")", ":", "\n", "        ", "src_len", ",", "bsz", ",", "embed_dim", "=", "key", ".", "size", "(", ")", "\n", "tgt_len", "=", "query", ".", "size", "(", "0", ")", "\n", "assert", "embed_dim", "==", "self", ".", "embed_dim", "\n", "assert", "list", "(", "query", ".", "size", "(", ")", ")", "==", "[", "tgt_len", ",", "bsz", ",", "embed_dim", "]", "\n", "assert", "key", ".", "size", "(", ")", "==", "value", ".", "size", "(", ")", "\n", "\n", "tgt_size", "=", "tgt_len", "\n", "if", "use_scalar_bias", ":", "\n", "            ", "tgt_size", "+=", "1", "\n", "\n", "", "attn", "=", "[", "]", "\n", "attn_weights", "=", "[", "]", "\n", "if", "self", ".", "downsample", ":", "\n", "            ", "for", "attention_head_number", "in", "range", "(", "self", ".", "num_heads", ")", ":", "\n", "# call the forward of each attention head", "\n", "                ", "_attn", ",", "_attn_weight", "=", "self", "[", "attention_head_number", "]", "(", "\n", "query", ",", "key", ",", "value", ",", "mask_future_timesteps", ",", "key_padding_mask", ",", "use_scalar_bias", ",", "\n", ")", "\n", "attn", ".", "append", "(", "_attn", ")", "\n", "attn_weights", ".", "append", "(", "_attn_weight", ")", "\n", "", "full_attn", "=", "torch", ".", "cat", "(", "attn", ",", "dim", "=", "2", ")", "\n", "full_attn", "=", "self", ".", "out_proj", "(", "full_attn", ")", "\n", "return", "full_attn", ",", "attn_weights", "[", "0", "]", ".", "clone", "(", ")", "\n", "", "else", ":", "\n", "            ", "_attn", ",", "_attn_weight", "=", "self", ".", "attention_module", "(", "\n", "query", ",", "key", ",", "value", ",", "mask_future_timesteps", ",", "key_padding_mask", ",", "use_scalar_bias", ",", "\n", ")", "\n", "attn", ".", "append", "(", "_attn", ")", "\n", "attn_weights", ".", "append", "(", "_attn_weight", ")", "\n", "full_attn", "=", "torch", ".", "cat", "(", "attn", ",", "dim", "=", "2", ")", "\n", "full_attn_weights", "=", "torch", ".", "cat", "(", "attn_weights", ")", "\n", "full_attn_weights", "=", "full_attn_weights", ".", "view", "(", "bsz", ",", "self", ".", "num_heads", ",", "tgt_size", ",", "src_len", ")", "\n", "full_attn_weights", "=", "full_attn_weights", ".", "sum", "(", "dim", "=", "1", ")", "/", "self", ".", "num_heads", "\n", "return", "full_attn", ",", "full_attn_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.downsampled_multihead_attention.Downsample.__init__": [[232, 235], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["def", "__init__", "(", "self", ",", "index", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "index", "=", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.downsampled_multihead_attention.Downsample.forward": [[236, 238], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", "[", ":", ":", "self", ".", "index", "+", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.downsampled_multihead_attention.Linear": [[240, 246], ["torch.Linear", "nn.Linear.weight.data.normal_", "nn.Linear.bias.data.zero_", "torch.utils.weight_norm", "math.sqrt"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear"], ["", "", "def", "Linear", "(", "in_features", ",", "out_features", ",", "dropout", "=", "0.", ",", "bias", "=", "True", ")", ":", "\n", "    ", "\"\"\"Weight-normalized Linear layer (input: B x T x C)\"\"\"", "\n", "m", "=", "nn", ".", "Linear", "(", "in_features", ",", "out_features", ",", "bias", "=", "bias", ")", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "mean", "=", "0", ",", "std", "=", "math", ".", "sqrt", "(", "(", "1", "-", "dropout", ")", "/", "in_features", ")", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "return", "nn", ".", "utils", ".", "weight_norm", "(", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.downsampled_multihead_attention.GatedLinear": [[248, 256], ["torch.Sequential", "downsampled_multihead_attention.Linear", "torch.GLU", "downsampled_multihead_attention.Linear", "torch.GLU", "downsampled_multihead_attention.Linear"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear"], ["", "def", "GatedLinear", "(", "in_features", ",", "out_features", ",", "dropout", "=", "0.", ",", "bias", "=", "True", ")", ":", "\n", "    ", "\"\"\"Weight-normalized Linear layer (input: B x T x C) with interspersed GLU units\"\"\"", "\n", "return", "nn", ".", "Sequential", "(", "\n", "Linear", "(", "in_features", ",", "out_features", "*", "4", ",", "dropout", ",", "bias", ")", ",", "\n", "nn", ".", "GLU", "(", ")", ",", "\n", "Linear", "(", "out_features", "*", "2", ",", "out_features", "*", "2", ",", "dropout", ",", "bias", ")", ",", "\n", "nn", ".", "GLU", "(", ")", ",", "\n", "Linear", "(", "out_features", ",", "out_features", ",", "dropout", ",", "bias", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.TransformerEncoderLayer.__init__": [[28, 48], ["torch.Module.__init__", "fairseq.modules.MultiheadAttention", "fairseq.modules.LayerNorm", "fairseq.utils.get_activation_fn", "getattr", "transformer_layer.Linear", "transformer_layer.Linear", "fairseq.modules.LayerNorm", "getattr", "getattr"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.layer_norm.LayerNorm", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.get_activation_fn", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.layer_norm.LayerNorm"], ["\n", "\n", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embed_dim", "=", "args", ".", "encoder_embed_dim", "\n", "self", ".", "self_attn", "=", "MultiheadAttention", "(", "\n", "self", ".", "embed_dim", ",", "\n", "args", ".", "encoder_attention_heads", ",", "\n", "dropout", "=", "args", ".", "attention_dropout", ",", "\n", "self_attention", "=", "True", ",", "\n", ")", "\n", "self", ".", "self_attn_layer_norm", "=", "LayerNorm", "(", "self", ".", "embed_dim", ")", "\n", "self", ".", "dropout", "=", "args", ".", "dropout", "\n", "self", ".", "activation_fn", "=", "utils", ".", "get_activation_fn", "(", "\n", "activation", "=", "getattr", "(", "args", ",", "\"activation_fn\"", ",", "\"relu\"", ")", "\n", ")", "\n", "self", ".", "activation_dropout", "=", "getattr", "(", "args", ",", "\"activation_dropout\"", ",", "0", ")", "\n", "if", "self", ".", "activation_dropout", "==", "0", ":", "\n", "# for backwards compatibility with models that use args.relu_dropout", "\n", "            ", "self", ".", "activation_dropout", "=", "getattr", "(", "args", ",", "\"relu_dropout\"", ",", "0", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.TransformerEncoderLayer.upgrade_state_dict_named": [[49, 67], ["layer_norm_map.items"], "methods", ["None"], ["", "self", ".", "normalize_before", "=", "args", ".", "encoder_normalize_before", "\n", "self", ".", "fc1", "=", "Linear", "(", "self", ".", "embed_dim", ",", "args", ".", "encoder_ffn_embed_dim", ")", "\n", "self", ".", "fc2", "=", "Linear", "(", "args", ".", "encoder_ffn_embed_dim", ",", "self", ".", "embed_dim", ")", "\n", "self", ".", "final_layer_norm", "=", "LayerNorm", "(", "self", ".", "embed_dim", ")", "\n", "\n", "", "def", "upgrade_state_dict_named", "(", "self", ",", "state_dict", ",", "name", ")", ":", "\n", "        ", "\"\"\"\n        Rename layer norm states from `...layer_norms.0.weight` to\n        `...self_attn_layer_norm.weight` and `...layer_norms.1.weight` to\n        `...final_layer_norm.weight`\n        \"\"\"", "\n", "layer_norm_map", "=", "{", "\"0\"", ":", "\"self_attn_layer_norm\"", ",", "\"1\"", ":", "\"final_layer_norm\"", "}", "\n", "for", "old", ",", "new", "in", "layer_norm_map", ".", "items", "(", ")", ":", "\n", "            ", "for", "m", "in", "(", "\"weight\"", ",", "\"bias\"", ")", ":", "\n", "                ", "k", "=", "\"{}.layer_norms.{}.{}\"", ".", "format", "(", "name", ",", "old", ",", "m", ")", "\n", "if", "k", "in", "state_dict", ":", "\n", "                    ", "state_dict", "[", "\"{}.{}.{}\"", ".", "format", "(", "name", ",", "new", ",", "m", ")", "]", "=", "state_dict", "[", "k", "]", "\n", "del", "state_dict", "[", "k", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.TransformerEncoderLayer.forward": [[68, 109], ["transformer_layer.TransformerEncoderLayer.maybe_layer_norm", "transformer_layer.TransformerEncoderLayer.self_attn", "torch.dropout", "torch.dropout", "torch.dropout", "transformer_layer.TransformerEncoderLayer.maybe_layer_norm", "transformer_layer.TransformerEncoderLayer.maybe_layer_norm", "transformer_layer.TransformerEncoderLayer.activation_fn", "torch.dropout", "torch.dropout", "torch.dropout", "transformer_layer.TransformerEncoderLayer.fc2", "torch.dropout", "torch.dropout", "torch.dropout", "transformer_layer.TransformerEncoderLayer.maybe_layer_norm", "attn_mask.masked_fill.masked_fill.masked_fill", "transformer_layer.TransformerEncoderLayer.fc1", "attn_mask.masked_fill.masked_fill.bool"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.TransformerDecoderLayer.maybe_layer_norm", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.TransformerDecoderLayer.maybe_layer_norm", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.TransformerDecoderLayer.maybe_layer_norm", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.TransformerDecoderLayer.maybe_layer_norm"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ",", "encoder_padding_mask", ",", "attn_mask", ":", "Optional", "[", "Tensor", "]", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            x (Tensor): input to the layer of shape `(seq_len, batch, embed_dim)`\n            encoder_padding_mask (ByteTensor): binary ByteTensor of shape\n                `(batch, src_len)` where padding elements are indicated by ``1``.\n            attn_mask (ByteTensor): binary tensor of shape (T_tgt, T_src), where\n            T_tgt is the length of query, while T_src is the length of key,\n            though here both query and key is x here,\n            attn_mask[t_tgt, t_src] = 1 means when calculating embedding\n            for t_tgt, t_src is excluded (or masked out), =0 means it is\n            included in attention\n\n        Returns:\n            encoded output of shape `(seq_len, batch, embed_dim)`\n        \"\"\"", "\n", "residual", "=", "x", "\n", "if", "self", ".", "normalize_before", ":", "\n", "            ", "x", "=", "self", ".", "self_attn_layer_norm", "(", "x", ")", "\n", "", "if", "attn_mask", "is", "not", "None", ":", "\n", "            ", "attn_mask", "=", "attn_mask", ".", "masked_fill", "(", "attn_mask", ".", "to", "(", "torch", ".", "bool", ")", ",", "-", "1e8", ")", "\n", "# anything in original attn_mask = 1, becomes -1e8", "\n", "# anything in original attn_mask = 0, becomes 0", "\n", "# Note that we cannot use -inf here, because at some edge cases,", "\n", "# the attention weight (before softmax) for some padded element in query", "\n", "# will become -inf, which results in NaN in model parameters", "\n", "# TODO: to formally solve this problem, we need to change fairseq's", "\n", "# MultiheadAttention. We will do this later on.", "\n", "", "x", ",", "_", "=", "self", ".", "self_attn", "(", "\n", "query", "=", "x", ",", "\n", "key", "=", "x", ",", "\n", "value", "=", "x", ",", "\n", "key_padding_mask", "=", "encoder_padding_mask", ",", "\n", "attn_mask", "=", "attn_mask", ",", "\n", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "residual", "+", "x", "\n", "if", "not", "self", ".", "normalize_before", ":", "\n", "            ", "x", "=", "self", ".", "self_attn_layer_norm", "(", "x", ")", "\n", "\n", "", "residual", "=", "x", "\n", "if", "self", ".", "normalize_before", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.TransformerDecoderLayer.__init__": [[135, 184], ["torch.Module.__init__", "getattr", "fairseq.modules.MultiheadAttention", "fairseq.utils.get_activation_fn", "getattr", "getattr", "fairseq.modules.LayerNorm", "transformer_layer.Linear", "transformer_layer.Linear", "fairseq.modules.LayerNorm", "getattr", "fairseq.modules.MultiheadAttention", "fairseq.modules.LayerNorm", "getattr", "getattr", "getattr"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.get_activation_fn", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.layer_norm.LayerNorm", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.layer_norm.LayerNorm", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.layer_norm.LayerNorm"], ["\n", "\n", "def", "__init__", "(", "\n", "self", ",", "args", ",", "no_encoder_attn", "=", "False", ",", "add_bias_kv", "=", "False", ",", "add_zero_attn", "=", "False", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embed_dim", "=", "args", ".", "decoder_embed_dim", "\n", "self", ".", "cross_self_attention", "=", "getattr", "(", "args", ",", "\"cross_self_attention\"", ",", "False", ")", "\n", "self", ".", "self_attn", "=", "MultiheadAttention", "(", "\n", "embed_dim", "=", "self", ".", "embed_dim", ",", "\n", "num_heads", "=", "args", ".", "decoder_attention_heads", ",", "\n", "dropout", "=", "args", ".", "attention_dropout", ",", "\n", "add_bias_kv", "=", "add_bias_kv", ",", "\n", "add_zero_attn", "=", "add_zero_attn", ",", "\n", "self_attention", "=", "not", "self", ".", "cross_self_attention", ",", "\n", ")", "\n", "self", ".", "dropout", "=", "args", ".", "dropout", "\n", "self", ".", "activation_fn", "=", "utils", ".", "get_activation_fn", "(", "\n", "activation", "=", "getattr", "(", "args", ",", "\"activation_fn\"", ",", "\"relu\"", ")", "\n", ")", "\n", "self", ".", "activation_dropout", "=", "getattr", "(", "args", ",", "\"activation_dropout\"", ",", "0", ")", "\n", "if", "self", ".", "activation_dropout", "==", "0", ":", "\n", "# for backwards compatibility with models that use args.relu_dropout", "\n", "            ", "self", ".", "activation_dropout", "=", "getattr", "(", "args", ",", "\"relu_dropout\"", ",", "0", ")", "\n", "", "self", ".", "normalize_before", "=", "args", ".", "decoder_normalize_before", "\n", "\n", "# use layerNorm rather than FusedLayerNorm for exporting.", "\n", "# char_inputs can be used to determint this.", "\n", "# TODO  remove this once we update apex with the fix", "\n", "export", "=", "getattr", "(", "args", ",", "\"char_inputs\"", ",", "False", ")", "\n", "self", ".", "self_attn_layer_norm", "=", "LayerNorm", "(", "self", ".", "embed_dim", ",", "export", "=", "export", ")", "\n", "\n", "if", "no_encoder_attn", ":", "\n", "            ", "self", ".", "encoder_attn", "=", "None", "\n", "self", ".", "encoder_attn_layer_norm", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "encoder_attn", "=", "MultiheadAttention", "(", "\n", "self", ".", "embed_dim", ",", "\n", "args", ".", "decoder_attention_heads", ",", "\n", "kdim", "=", "getattr", "(", "args", ",", "\"encoder_embed_dim\"", ",", "None", ")", ",", "\n", "vdim", "=", "getattr", "(", "args", ",", "\"encoder_embed_dim\"", ",", "None", ")", ",", "\n", "dropout", "=", "args", ".", "attention_dropout", ",", "\n", "encoder_decoder_attention", "=", "True", ",", "\n", ")", "\n", "self", ".", "encoder_attn_layer_norm", "=", "LayerNorm", "(", "self", ".", "embed_dim", ",", "export", "=", "export", ")", "\n", "\n", "", "self", ".", "fc1", "=", "Linear", "(", "self", ".", "embed_dim", ",", "args", ".", "decoder_ffn_embed_dim", ")", "\n", "self", ".", "fc2", "=", "Linear", "(", "args", ".", "decoder_ffn_embed_dim", ",", "self", ".", "embed_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.TransformerDecoderLayer.prepare_for_onnx_export_": [[185, 187], ["None"], "methods", ["None"], ["self", ".", "final_layer_norm", "=", "LayerNorm", "(", "self", ".", "embed_dim", ",", "export", "=", "export", ")", "\n", "self", ".", "need_attn", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.TransformerDecoderLayer.forward": [[188, 294], ["transformer_layer.TransformerDecoderLayer.maybe_layer_norm", "transformer_layer.TransformerDecoderLayer.self_attn", "torch.dropout", "torch.dropout", "torch.dropout", "transformer_layer.TransformerDecoderLayer.maybe_layer_norm", "transformer_layer.TransformerDecoderLayer.maybe_layer_norm", "transformer_layer.TransformerDecoderLayer.activation_fn", "torch.dropout", "torch.dropout", "torch.dropout", "transformer_layer.TransformerDecoderLayer.fc2", "torch.dropout", "torch.dropout", "torch.dropout", "transformer_layer.TransformerDecoderLayer.maybe_layer_norm", "transformer_layer.TransformerDecoderLayer.self_attn._set_input_buffer", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "transformer_layer.TransformerDecoderLayer.maybe_layer_norm", "transformer_layer.TransformerDecoderLayer.encoder_attn", "torch.dropout", "torch.dropout", "torch.dropout", "transformer_layer.TransformerDecoderLayer.maybe_layer_norm", "transformer_layer.TransformerDecoderLayer.fc1", "transformer_layer.TransformerDecoderLayer.self_attn._get_input_buffer", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "transformer_layer.TransformerDecoderLayer.encoder_attn._set_input_buffer", "torch.cat.new().zero_", "torch.cat.new().zero_", "torch.cat.new().zero_", "len", "transformer_layer.TransformerDecoderLayer.self_attn._get_input_buffer", "transformer_layer.TransformerDecoderLayer.new().zero_", "torch.cat.new", "torch.cat.new", "torch.cat.new", "transformer_layer.TransformerDecoderLayer.new", "encoder_out.size", "encoder_out.size", "transformer_layer.TransformerDecoderLayer.size", "encoder_out.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.TransformerDecoderLayer.maybe_layer_norm", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.TransformerDecoderLayer.maybe_layer_norm", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.TransformerDecoderLayer.maybe_layer_norm", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.TransformerDecoderLayer.maybe_layer_norm", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer._set_input_buffer", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.TransformerDecoderLayer.maybe_layer_norm", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.TransformerDecoderLayer.maybe_layer_norm", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer._get_input_buffer", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer._set_input_buffer", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer._get_input_buffer", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["self", ".", "onnx_trace", "=", "False", "\n", "\n", "", "def", "prepare_for_onnx_export_", "(", "self", ")", ":", "\n", "        ", "self", ".", "onnx_trace", "=", "True", "\n", "\n", "", "def", "forward", "(", "\n", "self", ",", "\n", "x", ",", "\n", "encoder_out", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", ",", "\n", "encoder_padding_mask", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", ",", "\n", "incremental_state", ":", "Optional", "[", "Dict", "[", "str", ",", "Dict", "[", "str", ",", "Optional", "[", "Tensor", "]", "]", "]", "]", "=", "None", ",", "\n", "prev_self_attn_state", ":", "Optional", "[", "List", "[", "torch", ".", "Tensor", "]", "]", "=", "None", ",", "\n", "prev_attn_state", ":", "Optional", "[", "List", "[", "torch", ".", "Tensor", "]", "]", "=", "None", ",", "\n", "self_attn_mask", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", ",", "\n", "self_attn_padding_mask", ":", "Optional", "[", "torch", ".", "Tensor", "]", "=", "None", ",", "\n", "need_attn", ":", "bool", "=", "False", ",", "\n", "need_head_weights", ":", "bool", "=", "False", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            x (Tensor): input to the layer of shape `(seq_len, batch, embed_dim)`\n            encoder_padding_mask (ByteTensor, optional): binary\n                ByteTensor of shape `(batch, src_len)` where padding\n                elements are indicated by ``1``.\n            need_attn (bool, optional): return attention weights\n            need_head_weights (bool, optional): return attention weights\n                for each head (default: return average over heads).\n\n        Returns:\n            encoded output of shape `(seq_len, batch, embed_dim)`\n        \"\"\"", "\n", "if", "need_head_weights", ":", "\n", "            ", "need_attn", "=", "True", "\n", "\n", "", "residual", "=", "x", "\n", "if", "self", ".", "normalize_before", ":", "\n", "            ", "x", "=", "self", ".", "self_attn_layer_norm", "(", "x", ")", "\n", "", "if", "prev_self_attn_state", "is", "not", "None", ":", "\n", "            ", "prev_key", ",", "prev_value", "=", "prev_self_attn_state", "[", ":", "2", "]", "\n", "saved_state", ":", "Dict", "[", "str", ",", "Optional", "[", "Tensor", "]", "]", "=", "{", "\n", "\"prev_key\"", ":", "prev_key", ",", "\n", "\"prev_value\"", ":", "prev_value", ",", "\n", "}", "\n", "if", "len", "(", "prev_self_attn_state", ")", ">=", "3", ":", "\n", "                ", "saved_state", "[", "\"prev_key_padding_mask\"", "]", "=", "prev_self_attn_state", "[", "2", "]", "\n", "", "assert", "incremental_state", "is", "not", "None", "\n", "self", ".", "self_attn", ".", "_set_input_buffer", "(", "incremental_state", ",", "saved_state", ")", "\n", "", "_self_attn_input_buffer", "=", "self", ".", "self_attn", ".", "_get_input_buffer", "(", "incremental_state", ")", "\n", "if", "self", ".", "cross_self_attention", "and", "not", "(", "\n", "incremental_state", "is", "not", "None", "\n", "and", "_self_attn_input_buffer", "is", "not", "None", "\n", "and", "\"prev_key\"", "in", "_self_attn_input_buffer", "\n", ")", ":", "\n", "            ", "if", "self_attn_mask", "is", "not", "None", ":", "\n", "                ", "assert", "encoder_out", "is", "not", "None", "\n", "self_attn_mask", "=", "torch", ".", "cat", "(", "\n", "(", "x", ".", "new_zeros", "(", "x", ".", "size", "(", "0", ")", ",", "encoder_out", ".", "size", "(", "0", ")", ")", ",", "self_attn_mask", ")", ",", "dim", "=", "1", "\n", ")", "\n", "", "if", "self_attn_padding_mask", "is", "not", "None", ":", "\n", "                ", "if", "encoder_padding_mask", "is", "None", ":", "\n", "                    ", "assert", "encoder_out", "is", "not", "None", "\n", "encoder_padding_mask", "=", "self_attn_padding_mask", ".", "new_zeros", "(", "\n", "encoder_out", ".", "size", "(", "1", ")", ",", "encoder_out", ".", "size", "(", "0", ")", "\n", ")", "\n", "", "self_attn_padding_mask", "=", "torch", ".", "cat", "(", "\n", "(", "encoder_padding_mask", ",", "self_attn_padding_mask", ")", ",", "dim", "=", "1", "\n", ")", "\n", "", "assert", "encoder_out", "is", "not", "None", "\n", "y", "=", "torch", ".", "cat", "(", "(", "encoder_out", ",", "x", ")", ",", "dim", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "y", "=", "x", "\n", "\n", "", "x", ",", "attn", "=", "self", ".", "self_attn", "(", "\n", "query", "=", "x", ",", "\n", "key", "=", "y", ",", "\n", "value", "=", "y", ",", "\n", "key_padding_mask", "=", "self_attn_padding_mask", ",", "\n", "incremental_state", "=", "incremental_state", ",", "\n", "need_weights", "=", "False", ",", "\n", "attn_mask", "=", "self_attn_mask", ",", "\n", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "residual", "+", "x", "\n", "if", "not", "self", ".", "normalize_before", ":", "\n", "            ", "x", "=", "self", ".", "self_attn_layer_norm", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "encoder_attn", "is", "not", "None", ":", "\n", "            ", "residual", "=", "x", "\n", "if", "self", ".", "normalize_before", ":", "\n", "                ", "x", "=", "self", ".", "encoder_attn_layer_norm", "(", "x", ")", "\n", "", "if", "prev_attn_state", "is", "not", "None", ":", "\n", "                ", "prev_key", ",", "prev_value", "=", "prev_attn_state", "[", ":", "2", "]", "\n", "saved_state", ":", "Dict", "[", "str", ",", "Optional", "[", "Tensor", "]", "]", "=", "{", "\n", "\"prev_key\"", ":", "prev_key", ",", "\n", "\"prev_value\"", ":", "prev_value", ",", "\n", "}", "\n", "if", "len", "(", "prev_attn_state", ")", ">=", "3", ":", "\n", "                    ", "saved_state", "[", "\"prev_key_padding_mask\"", "]", "=", "prev_attn_state", "[", "2", "]", "\n", "", "assert", "incremental_state", "is", "not", "None", "\n", "self", ".", "encoder_attn", ".", "_set_input_buffer", "(", "incremental_state", ",", "saved_state", ")", "\n", "\n", "", "x", ",", "attn", "=", "self", ".", "encoder_attn", "(", "\n", "query", "=", "x", ",", "\n", "key", "=", "encoder_out", ",", "\n", "value", "=", "encoder_out", ",", "\n", "key_padding_mask", "=", "encoder_padding_mask", ",", "\n", "incremental_state", "=", "incremental_state", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.TransformerDecoderLayer.make_generation_fast_": [[302, 304], ["None"], "methods", ["None"], ["                ", "x", "=", "self", ".", "encoder_attn_layer_norm", "(", "x", ")", "\n", "\n", "", "", "residual", "=", "x", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear": [[306, 312], ["torch.Linear", "torch.init.xavier_uniform_", "torch.init.constant_"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear"], ["            ", "x", "=", "self", ".", "final_layer_norm", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation_fn", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "float", "(", "self", ".", "activation_dropout", ")", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "residual", "+", "x", "\n", "if", "not", "self", ".", "normalize_before", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.gelu.gelu_accurate": [[15, 19], ["hasattr", "math.sqrt", "torch.tanh", "torch.pow"], "function", ["None"], ["def", "gelu_accurate", "(", "x", ")", ":", "\n", "    ", "if", "not", "hasattr", "(", "gelu_accurate", ",", "\"_a\"", ")", ":", "\n", "        ", "gelu_accurate", ".", "_a", "=", "math", ".", "sqrt", "(", "2", "/", "math", ".", "pi", ")", "\n", "", "return", "0.5", "*", "x", "*", "(", "1", "+", "torch", ".", "tanh", "(", "gelu_accurate", ".", "_a", "*", "(", "x", "+", "0.044715", "*", "torch", ".", "pow", "(", "x", ",", "3", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.gelu.gelu": [[21, 26], ["hasattr", "torch.nn.functional.gelu().type_as", "torch.nn.functional.gelu", "torch.erf", "x.float", "math.sqrt"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.gelu.gelu"], ["", "def", "gelu", "(", "x", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "if", "hasattr", "(", "torch", ".", "nn", ".", "functional", ",", "'gelu'", ")", ":", "\n", "        ", "return", "torch", ".", "nn", ".", "functional", ".", "gelu", "(", "x", ".", "float", "(", ")", ")", ".", "type_as", "(", "x", ")", "\n", "", "else", ":", "\n", "        ", "return", "x", "*", "0.5", "*", "(", "1.0", "+", "torch", ".", "erf", "(", "x", "/", "math", ".", "sqrt", "(", "2.0", ")", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.unfold.unfold1d": [[9, 18], ["x.unsqueeze.size", "torch.pad", "x.unsqueeze.as_strided", "x.unsqueeze.unsqueeze"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad"], ["def", "unfold1d", "(", "x", ",", "kernel_size", ",", "padding_l", ",", "pad_value", "=", "0", ")", ":", "\n", "    ", "'''unfold T x B x C to T x B x C x K'''", "\n", "if", "kernel_size", ">", "1", ":", "\n", "        ", "T", ",", "B", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "x", "=", "F", ".", "pad", "(", "x", ",", "(", "0", ",", "0", ",", "0", ",", "0", ",", "padding_l", ",", "kernel_size", "-", "1", "-", "padding_l", ")", ",", "value", "=", "pad_value", ")", "\n", "x", "=", "x", ".", "as_strided", "(", "(", "T", ",", "B", ",", "C", ",", "kernel_size", ")", ",", "(", "B", "*", "C", ",", "C", ",", "1", ",", "B", "*", "C", ")", ")", "\n", "", "else", ":", "\n", "        ", "x", "=", "x", ".", "unsqueeze", "(", "3", ")", "\n", "", "return", "x", "\n", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.sparse_transformer_sentence_encoder.SparseTransformerSentenceEncoder.__init__": [[17, 84], ["fairseq.modules.TransformerSentenceEncoder.__init__", "torch.ModuleList", "range", "sparse_transformer_sentence_encoder.SparseTransformerSentenceEncoder.__init__.freeze_module_params"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "padding_idx", ":", "int", ",", "\n", "vocab_size", ":", "int", ",", "\n", "num_encoder_layers", ":", "int", "=", "6", ",", "\n", "embedding_dim", ":", "int", "=", "768", ",", "\n", "ffn_embedding_dim", ":", "int", "=", "3072", ",", "\n", "num_attention_heads", ":", "int", "=", "8", ",", "\n", "dropout", ":", "float", "=", "0.1", ",", "\n", "attention_dropout", ":", "float", "=", "0.1", ",", "\n", "activation_dropout", ":", "float", "=", "0.1", ",", "\n", "max_seq_len", ":", "int", "=", "256", ",", "\n", "num_segments", ":", "int", "=", "2", ",", "\n", "use_position_embeddings", ":", "bool", "=", "True", ",", "\n", "offset_positions_by_padding", ":", "bool", "=", "True", ",", "\n", "encoder_normalize_before", ":", "bool", "=", "False", ",", "\n", "apply_bert_init", ":", "bool", "=", "False", ",", "\n", "activation_fn", ":", "str", "=", "\"relu\"", ",", "\n", "learned_pos_embedding", ":", "bool", "=", "True", ",", "\n", "add_bias_kv", ":", "bool", "=", "False", ",", "\n", "add_zero_attn", ":", "bool", "=", "False", ",", "\n", "embed_scale", ":", "float", "=", "None", ",", "\n", "freeze_embeddings", ":", "bool", "=", "False", ",", "\n", "n_trans_layers_to_freeze", ":", "int", "=", "0", ",", "\n", "export", ":", "bool", "=", "False", ",", "\n", "is_bidirectional", ":", "bool", "=", "True", ",", "\n", "stride", ":", "int", "=", "32", ",", "\n", "expressivity", ":", "int", "=", "8", ",", "\n", ")", "->", "None", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "padding_idx", ",", "vocab_size", ",", "num_encoder_layers", ",", "embedding_dim", ",", "\n", "ffn_embedding_dim", ",", "num_attention_heads", ",", "dropout", ",", "attention_dropout", ",", "\n", "activation_dropout", ",", "max_seq_len", ",", "num_segments", ",", "use_position_embeddings", ",", "\n", "offset_positions_by_padding", ",", "encoder_normalize_before", ",", "apply_bert_init", ",", "\n", "activation_fn", ",", "learned_pos_embedding", ",", "add_bias_kv", ",", "add_zero_attn", ",", "\n", "embed_scale", ",", "freeze_embeddings", ",", "n_trans_layers_to_freeze", ",", "export", "\n", ")", "\n", "\n", "self", ".", "layers", "=", "nn", ".", "ModuleList", "(", "\n", "[", "\n", "SparseTransformerSentenceEncoderLayer", "(", "\n", "embedding_dim", "=", "self", ".", "embedding_dim", ",", "\n", "ffn_embedding_dim", "=", "ffn_embedding_dim", ",", "\n", "num_attention_heads", "=", "num_attention_heads", ",", "\n", "dropout", "=", "self", ".", "dropout", ",", "\n", "attention_dropout", "=", "attention_dropout", ",", "\n", "activation_dropout", "=", "activation_dropout", ",", "\n", "activation_fn", "=", "activation_fn", ",", "\n", "add_bias_kv", "=", "add_bias_kv", ",", "\n", "add_zero_attn", "=", "add_zero_attn", ",", "\n", "export", "=", "export", ",", "\n", "is_bidirectional", "=", "is_bidirectional", ",", "\n", "stride", "=", "stride", ",", "\n", "expressivity", "=", "expressivity", ",", "\n", ")", "\n", "for", "_", "in", "range", "(", "num_encoder_layers", ")", "\n", "]", "\n", ")", "\n", "\n", "def", "freeze_module_params", "(", "m", ")", ":", "\n", "            ", "if", "m", "is", "not", "None", ":", "\n", "                ", "for", "p", "in", "m", ".", "parameters", "(", ")", ":", "\n", "                    ", "p", ".", "requires_grad", "=", "False", "\n", "\n", "", "", "", "for", "layer", "in", "range", "(", "n_trans_layers_to_freeze", ")", ":", "\n", "            ", "freeze_module_params", "(", "self", ".", "layers", "[", "layer", "]", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.learned_positional_embedding.LearnedPositionalEmbedding.max_positions": [[45, 51], ["None"], "methods", ["None"], ["input", ",", "self", ".", "padding_idx", ",", "onnx_trace", "=", "self", ".", "onnx_trace", ",", "\n", ")", "\n", "", "", "return", "super", "(", ")", ".", "forward", "(", "positions", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.sinusoidal_positional_embedding.SinusoidalPositionalEmbedding.max_positions": [[83, 86], ["int"], "methods", ["None"], ["self", ".", "weights", ".", "index_select", "(", "index", "=", "self", ".", "padding_idx", "+", "pos", ",", "dim", "=", "0", ")", "\n", ".", "unsqueeze", "(", "1", ")", "\n", ".", "repeat", "(", "bsz", ",", "1", ",", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.TransformerEncoderLayer.maybe_layer_norm": [[110, 116], ["layer_norm"], "methods", ["None"], ["            ", "x", "=", "self", ".", "final_layer_norm", "(", "x", ")", "\n", "", "x", "=", "self", ".", "activation_fn", "(", "self", ".", "fc1", "(", "x", ")", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "float", "(", "self", ".", "activation_dropout", ")", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "residual", "+", "x", "\n", "if", "not", "self", ".", "normalize_before", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.TransformerDecoderLayer.maybe_layer_norm": [[295, 301], ["layer_norm"], "methods", ["None"], ["static_kv", "=", "True", ",", "\n", "need_weights", "=", "need_attn", "or", "(", "not", "self", ".", "training", "and", "self", ".", "need_attn", ")", ",", "\n", "need_head_weights", "=", "need_head_weights", ",", "\n", ")", "\n", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "x", "=", "residual", "+", "x", "\n", "if", "not", "self", ".", "normalize_before", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lightconv_layer.lightconv_layer.lightconvFunction.forward": [[17, 24], ["lightconv_cuda.forward", "ctx.save_for_backward"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.forward"], ["\n", "    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "weights", ",", "padding_l", ")", ":", "\n", "        ", "ctx", ".", "padding_l", "=", "padding_l", "\n", "outputs", "=", "lightconv_cuda", ".", "forward", "(", "x", ",", "weights", ",", "padding_l", ")", "\n", "variables", "=", "[", "x", ",", "weights", "]", "\n", "ctx", ".", "save_for_backward", "(", "*", "variables", ")", "\n", "return", "outputs", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lightconv_layer.lightconv_layer.lightconvFunction.backward": [[25, 33], ["lightconv_cuda.backward", "grad_output.contiguous"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.dynamicconvFunction.backward"], ["\n", "", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "outputs", "=", "lightconv_cuda", ".", "backward", "(", "\n", "grad_output", ".", "contiguous", "(", ")", ",", "\n", "ctx", ".", "padding_l", ",", "\n", "*", "ctx", ".", "saved_variables", ")", "\n", "grad_input", ",", "grad_weights", "=", "outputs", "\n", "return", "grad_input", ",", "grad_weights", ",", "None", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lightconv_layer.lightconv_layer.LightconvLayer.__init__": [[36, 59], ["torch.nn.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "lightconv_layer.LightconvLayer.reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.nn.Parameter", "torch.nn.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer.reset_parameters"], ["", "", "@", "with_incremental_state", "\n", "class", "LightconvLayer", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "\n", "self", ",", "\n", "input_size", ",", "\n", "kernel_size", "=", "1", ",", "\n", "padding_l", "=", "None", ",", "\n", "weight_softmax", "=", "False", ",", "\n", "num_heads", "=", "1", ",", "\n", "weight_dropout", "=", "0.", ",", "\n", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "LightconvLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "padding_l", "=", "padding_l", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "weight_softmax", "=", "weight_softmax", "\n", "self", ".", "weight_dropout", "=", "weight_dropout", "\n", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_heads", ",", "kernel_size", ")", ")", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "input_size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bias", "=", "None", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lightconv_layer.lightconv_layer.LightconvLayer.upgrade_state_dict_named": [[60, 66], ["state_dict.items", "k.endswith", "v.squeeze", "v.dim", "v.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "self", ".", "reset_parameters", "(", ")", "\n", "\n", "", "def", "upgrade_state_dict_named", "(", "self", ",", "state_dict", ",", "name", ")", ":", "\n", "        ", "prefix", "=", "name", "+", "'.'", "if", "name", "!=", "''", "else", "''", "\n", "for", "k", ",", "v", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", ".", "endswith", "(", "prefix", "+", "'weight'", ")", ":", "\n", "                ", "if", "v", ".", "dim", "(", ")", "==", "3", "and", "v", ".", "size", "(", "1", ")", "==", "1", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lightconv_layer.lightconv_layer.LightconvLayer.reset_parameters": [[67, 71], ["torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["None"], ["                    ", "state_dict", "[", "k", "]", "=", "v", ".", "squeeze", "(", "1", ")", "\n", "\n", "", "", "", "", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "weight", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lightconv_layer.lightconv_layer.LightconvLayer.forward": [[72, 111], ["x.permute().contiguous.permute().contiguous.size", "lightconv_layer.LightconvLayer._get_input_buffer", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x_unfold.view.view.view", "torch.dropout.size", "torch.dropout.view().expand().contiguous().view", "torch.dropout", "torch.dropout", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "output.view.view.view", "x.permute().contiguous.permute().contiguous.permute().contiguous", "lightconvFunction.apply().permute", "x.permute().contiguous.permute().contiguous.new", "lightconv_layer.LightconvLayer._set_input_buffer", "torch.softmax().type_as", "torch.softmax().type_as", "torch.softmax", "torch.softmax", "torch.dropout", "torch.dropout", "x.permute().contiguous.permute().contiguous.unsqueeze", "torch.dropout.view().expand().contiguous", "x.permute().contiguous.permute().contiguous.permute", "lightconvFunction.apply", "torch.softmax", "torch.softmax", "torch.dropout.float", "x_unfold.view.view.size", "torch.dropout.view().expand", "torch.dropout.view"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer._get_input_buffer", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer._set_input_buffer", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["            ", "nn", ".", "init", ".", "constant_", "(", "self", ".", "bias", ",", "0.", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ",", "incremental_state", "=", "None", ")", ":", "\n", "\n", "# during inference time, incremental BMM is faster", "\n", "        ", "if", "incremental_state", "is", "not", "None", ":", "\n", "            ", "T", ",", "B", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "K", ",", "H", "=", "self", ".", "kernel_size", ",", "self", ".", "num_heads", "\n", "R", "=", "C", "//", "H", "\n", "input_buffer", "=", "self", ".", "_get_input_buffer", "(", "incremental_state", ")", "\n", "if", "input_buffer", "is", "None", ":", "\n", "                ", "input_buffer", "=", "x", ".", "new", "(", ")", "\n", "", "x_unfold", "=", "torch", ".", "cat", "(", "[", "input_buffer", ",", "x", ".", "unsqueeze", "(", "3", ")", "]", ",", "dim", "=", "3", ")", "\n", "if", "self", ".", "kernel_size", ">", "1", ":", "\n", "                ", "self", ".", "_set_input_buffer", "(", "incremental_state", ",", "x_unfold", "[", ":", ",", ":", ",", ":", ",", "-", "self", ".", "kernel_size", "+", "1", ":", "]", ")", "\n", "", "x_unfold", "=", "x_unfold", ".", "view", "(", "T", "*", "B", "*", "H", ",", "R", ",", "-", "1", ")", "\n", "\n", "weight", "=", "self", ".", "weight", "\n", "if", "self", ".", "weight_softmax", ":", "\n", "                ", "weight", "=", "F", ".", "softmax", "(", "weight", ".", "float", "(", ")", ",", "dim", "=", "1", ")", ".", "type_as", "(", "weight", ")", "\n", "\n", "", "weight", "=", "weight", "[", ":", ",", "-", "x_unfold", ".", "size", "(", "2", ")", ":", "]", "\n", "\n", "K", "=", "weight", ".", "size", "(", "1", ")", "\n", "\n", "weight", "=", "weight", ".", "view", "(", "1", ",", "H", ",", "K", ")", ".", "expand", "(", "T", "*", "B", ",", "H", ",", "K", ")", ".", "contiguous", "(", ")", ".", "view", "(", "T", "*", "B", "*", "H", ",", "K", ",", "1", ")", "\n", "\n", "weight", "=", "F", ".", "dropout", "(", "weight", ",", "self", ".", "weight_dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "output", "=", "torch", ".", "bmm", "(", "x_unfold", ",", "weight", ")", "# T*B*H x R x 1", "\n", "output", "=", "output", ".", "view", "(", "T", ",", "B", ",", "C", ")", "\n", "return", "output", "\n", "\n", "# during training time, use CUDA kernel", "\n", "", "else", ":", "\n", "            ", "x", "=", "x", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", "\n", "weight", "=", "self", ".", "weight", "\n", "if", "self", ".", "weight_softmax", ":", "\n", "                ", "weight", "=", "F", ".", "softmax", "(", "self", ".", "weight", ",", "-", "1", ")", "\n", "", "if", "self", ".", "weight_dropout", ":", "\n", "                ", "weight", "=", "F", ".", "dropout", "(", "weight", ",", "self", ".", "weight_dropout", ",", "training", "=", "self", ".", "training", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lightconv_layer.lightconv_layer.LightconvLayer.reorder_incremental_state": [[112, 117], ["lightconv_layer.LightconvLayer._get_input_buffer", "input_buffer.index_select.index_select.index_select", "lightconv_layer.LightconvLayer._set_input_buffer"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer._get_input_buffer", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer._set_input_buffer"], ["", "return", "lightconvFunction", ".", "apply", "(", "x", ",", "weight", ",", "self", ".", "padding_l", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "\n", "", "", "def", "reorder_incremental_state", "(", "self", ",", "incremental_state", ",", "new_order", ")", ":", "\n", "        ", "input_buffer", "=", "self", ".", "_get_input_buffer", "(", "incremental_state", ")", "\n", "if", "input_buffer", "is", "not", "None", ":", "\n", "            ", "input_buffer", "=", "input_buffer", ".", "index_select", "(", "1", ",", "new_order", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lightconv_layer.lightconv_layer.LightconvLayer._get_input_buffer": [[118, 120], ["fairseq.utils.get_incremental_state"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.get_incremental_state"], ["self", ".", "_set_input_buffer", "(", "incremental_state", ",", "input_buffer", ")", "\n", "\n", "", "", "def", "_get_input_buffer", "(", "self", ",", "incremental_state", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lightconv_layer.lightconv_layer.LightconvLayer._set_input_buffer": [[121, 123], ["fairseq.utils.set_incremental_state"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.set_incremental_state"], ["        ", "return", "utils", ".", "get_incremental_state", "(", "self", ",", "incremental_state", ",", "'input_buffer'", ")", "\n", "\n", "", "def", "_set_input_buffer", "(", "self", ",", "incremental_state", ",", "new_buffer", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lightconv_layer.lightconv_layer.LightconvLayer.half": [[124, 127], ["print", "lightconv_layer.LightconvLayer._apply", "t.is_floating_point", "t.half"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lightconv_layer.lightconv_layer.LightconvLayer.half"], ["        ", "return", "utils", ".", "set_incremental_state", "(", "self", ",", "incremental_state", ",", "'input_buffer'", ",", "new_buffer", ")", "\n", "\n", "", "def", "half", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_apply", "(", "lambda", "t", ":", "t", ".", "half", "(", ")", "if", "t", ".", "is_floating_point", "(", ")", "else", "t", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lightconv_layer.cuda_function_gen.gen_forward": [[7, 114], ["open", "forward.write", "forward.write", "forward.write", "forward.write", "forward.write", "forward.write", "forward.write", "forward.write", "forward.write", "sequence_if.format", "forward.write", "forward.write", "case_k.format", "forward.write", "case_k.format", "forward.write", "main_block.format", "main_block.format"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write"], ["def", "gen_forward", "(", ")", ":", "\n", "\n", "    ", "kernels", "=", "[", "3", ",", "5", ",", "7", ",", "15", ",", "31", ",", "63", ",", "127", ",", "255", "]", "\n", "seqs", "=", "[", "32", "*", "x", "for", "x", "in", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", "16", "]", "]", "\n", "\n", "head", "=", "\"\"\"\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n#include \"lightconv_cuda.cuh\"\n\nstd::vector<at::Tensor> lightconv_cuda_forward(at::Tensor input, at::Tensor filters, int padding_l) {\n\n    at::DeviceGuard g(input.device());\n    const auto minibatch = input.size(0);\n    const auto numFeatures = input.size(1);\n    const auto sequenceLength = input.size(2);\n\n    const auto numHeads = filters.size(0);\n    const auto filterSize = filters.size(1);\n\n    const auto numFiltersInBlock = numFeatures / numHeads;\n\n    const dim3 blocks(minibatch, numFeatures);\n\n    auto output = at::zeros_like(input);\n    auto stream = at::cuda::getCurrentCUDAStream();\n\"\"\"", "\n", "\n", "sequence_if", "=", "\"\"\"\n    if (sequenceLength <= {seq}) {{\n        switch(filterSize) {{\n\"\"\"", "\n", "\n", "case_k", "=", "\"\"\"\n            case {k}:\n\"\"\"", "\n", "\n", "main_block", "=", "\"\"\"\n                if (padding_l == {pad}) {{\n                    AT_DISPATCH_FLOATING_TYPES_AND_HALF(input.scalar_type(), \"lightconv_forward\", ([&] {{\n                        lightconv_forward_kernel<{k}, {b_size}, {pad}, scalar_t>\n                        <<<blocks, {b_size}, 0, stream>>>(\n                                input.data<scalar_t>(),\n                                filters.data<scalar_t>(),\n                                minibatch,\n                                sequenceLength,\n                                numFeatures,\n                                numFiltersInBlock,\n                                output.data<scalar_t>());\n                    }}));\n                }} else\n\"\"\"", "\n", "\n", "bad_padding", "=", "\"\"\"\n                {\n                    std::cout << \"WARNING: Unsupported padding size - skipping forward pass\" << std::endl;\n                }\n                break;\n\"\"\"", "\n", "\n", "bad_filter", "=", "\"\"\"\n            default:\n                std::cout << \"WARNING: Unsupported filter length passed - skipping forward pass\" << std::endl;\n        }\n\"\"\"", "\n", "\n", "con_else", "=", "\"\"\"\n    } else\n\"\"\"", "\n", "\n", "final_else", "=", "\"\"\"\n    {\n        switch(filterSize) {\n\"\"\"", "\n", "\n", "final_return", "=", "\"\"\"\n    }\n\n    return {output};\n}\n\"\"\"", "\n", "\n", "with", "open", "(", "\"lightconv_cuda_forward.cu\"", ",", "'w'", ")", "as", "forward", ":", "\n", "        ", "forward", ".", "write", "(", "head", ")", "\n", "for", "seq", "in", "seqs", ":", "\n", "            ", "forward", ".", "write", "(", "sequence_if", ".", "format", "(", "seq", "=", "seq", ")", ")", "\n", "for", "k", "in", "kernels", ":", "\n", "                ", "forward", ".", "write", "(", "case_k", ".", "format", "(", "k", "=", "k", ")", ")", "\n", "for", "pad", "in", "[", "k", "//", "2", ",", "k", "-", "1", "]", ":", "\n", "                    ", "forward", ".", "write", "(", "main_block", ".", "format", "(", "k", "=", "k", ",", "b_size", "=", "seq", ",", "pad", "=", "pad", ")", ")", "\n", "", "forward", ".", "write", "(", "bad_padding", ")", "\n", "", "forward", ".", "write", "(", "bad_filter", ")", "\n", "forward", ".", "write", "(", "con_else", ")", "\n", "\n", "", "forward", ".", "write", "(", "final_else", ")", "\n", "for", "k", "in", "kernels", ":", "\n", "            ", "forward", ".", "write", "(", "case_k", ".", "format", "(", "k", "=", "k", ")", ")", "\n", "for", "pad", "in", "[", "k", "//", "2", ",", "k", "-", "1", "]", ":", "\n", "                ", "forward", ".", "write", "(", "main_block", ".", "format", "(", "k", "=", "k", ",", "b_size", "=", "seq", ",", "pad", "=", "pad", ")", ")", "\n", "", "forward", ".", "write", "(", "bad_padding", ")", "\n", "", "forward", ".", "write", "(", "bad_filter", ")", "\n", "forward", ".", "write", "(", "final_return", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lightconv_layer.cuda_function_gen.gen_backward": [[116, 285], ["open", "backward.write", "zip", "backward.write", "backward.write", "backward.write", "case_k.format", "backward.write", "backward.write", "backward.write", "backward.write", "backward.write", "sequence_if.format", "backward.write", "backward.write", "backward.write", "backward.write", "main_block.format", "weight_grad_short.format", "main_block.format", "weight_grad.format"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write"], ["", "", "def", "gen_backward", "(", ")", ":", "\n", "\n", "    ", "head", "=", "\"\"\"\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n#include \"lightconv_cuda.cuh\"\n\nstd::vector<at::Tensor> lightconv_cuda_backward(\n        at::Tensor gradOutput,\n        int padding_l,\n        at::Tensor input,\n        at::Tensor filters) {\n\n    // gradWrtInput\n    const int minibatch = input.size(0);\n    const int numFeatures = input.size(1);\n    const int sequenceLength = input.size(2);\n\n    const int numHeads = filters.size(0);\n    const int filterSize = filters.size(1);\n\n    const dim3 gradBlocks(minibatch, numFeatures);\n    const dim3 weightGradFirstpassShortBlocks(minibatch, numHeads);\n    const dim3 weightGradSecondpassBlocks(numHeads, filterSize);\n\n    const int numFiltersInBlock = numFeatures / numHeads;\n\n    auto gradInput = at::zeros_like(input);\n    auto gradFilters = at::zeros_like(filters);\n\n    at::DeviceGuard g(input.device());\n    auto stream = at::cuda::getCurrentCUDAStream();\n\n    switch(filterSize) {\n\"\"\"", "\n", "\n", "sequence_if", "=", "\"\"\"\n            if (sequenceLength <= {seq}) {{\n\"\"\"", "\n", "\n", "case_k", "=", "\"\"\"\n        case {k}:\n\"\"\"", "\n", "\n", "main_block", "=", "\"\"\"\n                if (padding_l == {p}) {{\n                    AT_DISPATCH_FLOATING_TYPES_AND_HALF(input.scalar_type(), \"lightconv_backward\", ([&] {{\n                        lightconv_grad_wrt_input_kernel<{k}, {b_size}, {p}, scalar_t>\n                        <<<gradBlocks, {b_size}, 0, stream>>>(\n                                gradOutput.data<scalar_t>(),\n                                filters.data<scalar_t>(),\n                                minibatch,\n                                sequenceLength,\n                                numFeatures,\n                                numFiltersInBlock,\n                                gradInput.data<scalar_t>());\n\n\"\"\"", "\n", "\n", "weight_grad_short", "=", "\"\"\"\n                        at::Tensor tempSumGradFilters = at::zeros({{minibatch, numHeads, filterSize}}, input.options().dtype(at::kFloat));\n                        lightconv_grad_wrt_weights_firstpass_short_kernel<{k}, {b_size}, {p}, scalar_t>\n                        <<<weightGradFirstpassShortBlocks, {b_size}, 0, stream>>>(\n                                input.data<scalar_t>(),\n                                gradOutput.data<scalar_t>(),\n                                minibatch,\n                                sequenceLength,\n                                numFeatures,\n                                numFiltersInBlock,\n                                numHeads,\n                                tempSumGradFilters.data<float>()\n                        );\n\n                        lightconv_grad_wrt_weights_secondpass_short_kernel<{k}, {b_size}, scalar_t>\n                        <<<weightGradSecondpassBlocks, {b_size}, 0, stream>>>(\n                                tempSumGradFilters.data<float>(),\n                                minibatch,\n                                numFiltersInBlock,\n                                gradFilters.data<scalar_t>()\n                        );\n                    }}));\n                }} else\n\"\"\"", "\n", "\n", "weight_grad", "=", "\"\"\"\n                        at::Tensor tempSumGradFilters = at::zeros({{minibatch, numFeatures, filterSize}}, input.options().dtype(at::kFloat));\n                        lightconv_grad_wrt_weights_firstpass_kernel<{k}, {b_size}, {p}, scalar_t>\n                        <<<gradBlocks, {b_size}, 0, stream>>>(\n                                input.data<scalar_t>(),\n                                gradOutput.data<scalar_t>(),\n                                minibatch,\n                                sequenceLength,\n                                numFeatures,\n                                numFiltersInBlock,\n                                tempSumGradFilters.data<float>()\n                        );\n\n                        lightconv_grad_wrt_weights_secondpass_kernel<{k}, {b_size}, scalar_t>\n                        <<<weightGradSecondpassBlocks, {b_size}, 0, stream>>>(\n                                tempSumGradFilters.data<float>(),\n                                minibatch,\n                                numFiltersInBlock,\n                                gradFilters.data<scalar_t>()\n                        );\n                    }}));\n                }} else\n\"\"\"", "\n", "\n", "bad_padding", "=", "\"\"\"\n                {\n                    std::cout << \"WARNING: Unsupported padding size - skipping backward pass\" << std::endl;\n                }\n\"\"\"", "\n", "\n", "breakout", "=", "\"\"\"\n                break;\n\"\"\"", "\n", "\n", "bad_filter", "=", "\"\"\"\n        default:\n            std::cout << \"WARNING: Unsupported filter length passed - skipping backward pass\" << std::endl;\n\"\"\"", "\n", "\n", "con_else", "=", "\"\"\"\n            } else\n\"\"\"", "\n", "\n", "final_else", "=", "\"\"\"\n    {\n        switch(filterSize) {\n\"\"\"", "\n", "\n", "last_return", "=", "\"\"\"\n    }\n    return {gradInput, gradFilters};\n}\n\"\"\"", "\n", "\n", "kernels", "=", "[", "3", ",", "5", ",", "7", ",", "15", ",", "31", ",", "63", ",", "127", ",", "255", "]", "\n", "seqs", "=", "[", "32", "*", "x", "for", "x", "in", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", "16", "]", "]", "\n", "thresh", "=", "[", "32", ",", "32", ",", "64", ",", "128", ",", "256", ",", "-", "1", ",", "-", "1", ",", "-", "1", "]", "\n", "max_mem", "=", "[", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "-", "1", ",", "192", ",", "96", ",", "64", "]", "\n", "\n", "with", "open", "(", "\"lightconv_cuda_backward.cu\"", ",", "'w'", ")", "as", "backward", ":", "\n", "        ", "backward", ".", "write", "(", "head", ")", "\n", "for", "(", "k", ",", "t", ",", "mem", ")", "in", "zip", "(", "kernels", ",", "thresh", ",", "max_mem", ")", ":", "\n", "            ", "backward", ".", "write", "(", "case_k", ".", "format", "(", "k", "=", "k", ")", ")", "\n", "for", "seq", "in", "seqs", ":", "\n", "                ", "if", "(", "t", "==", "-", "1", "or", "seq", "<=", "t", ")", "and", "(", "mem", "==", "-", "1", "or", "seq", "<", "mem", ")", ":", "\n", "                    ", "backward", ".", "write", "(", "sequence_if", ".", "format", "(", "seq", "=", "seq", ")", ")", "\n", "for", "p", "in", "[", "k", "//", "2", ",", "k", "-", "1", "]", ":", "\n", "                        ", "backward", ".", "write", "(", "main_block", ".", "format", "(", "k", "=", "k", ",", "b_size", "=", "seq", ",", "p", "=", "p", ")", ")", "\n", "backward", ".", "write", "(", "weight_grad_short", ".", "format", "(", "k", "=", "k", ",", "b_size", "=", "seq", ",", "p", "=", "p", ")", ")", "\n", "", "backward", ".", "write", "(", "bad_padding", ")", "\n", "", "else", ":", "\n", "                    ", "for", "p", "in", "[", "k", "//", "2", ",", "k", "-", "1", "]", ":", "\n", "                        ", "backward", ".", "write", "(", "main_block", ".", "format", "(", "k", "=", "k", ",", "b_size", "=", "32", ",", "p", "=", "p", ")", ")", "\n", "backward", ".", "write", "(", "weight_grad", ".", "format", "(", "k", "=", "k", ",", "b_size", "=", "32", ",", "p", "=", "p", ")", ")", "\n", "", "backward", ".", "write", "(", "bad_padding", ")", "\n", "backward", ".", "write", "(", "breakout", ")", "\n", "break", "\n", "", "backward", ".", "write", "(", "con_else", ")", "\n", "", "", "backward", ".", "write", "(", "bad_filter", ")", "\n", "backward", ".", "write", "(", "last_return", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.dynamicconvFunction.forward": [[18, 25], ["dynamicconv_cuda.forward", "ctx.save_for_backward"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.forward"], ["\n", "    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ",", "weights", ",", "padding_l", ")", ":", "\n", "        ", "ctx", ".", "padding_l", "=", "padding_l", "\n", "outputs", "=", "dynamicconv_cuda", ".", "forward", "(", "x", ",", "weights", ",", "padding_l", ")", "\n", "variables", "=", "[", "x", ",", "weights", "]", "\n", "ctx", ".", "save_for_backward", "(", "*", "variables", ")", "\n", "return", "outputs", "[", "0", "]", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.dynamicconvFunction.backward": [[26, 34], ["dynamicconv_cuda.backward", "grad_output.contiguous"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.dynamicconvFunction.backward"], ["\n", "", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grad_output", ")", ":", "\n", "        ", "outputs", "=", "dynamicconv_cuda", ".", "backward", "(", "\n", "grad_output", ".", "contiguous", "(", ")", ",", "\n", "ctx", ".", "padding_l", ",", "\n", "*", "ctx", ".", "saved_variables", ")", "\n", "grad_input", ",", "grad_weights", "=", "outputs", "\n", "return", "grad_input", ",", "grad_weights", ",", "None", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer.__init__": [[37, 67], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.Linear", "dynamicconv_layer.DynamicconvLayer.reset_parameters", "torch.nn.Parameter", "torch.nn.Parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer.reset_parameters"], ["", "", "@", "with_incremental_state", "\n", "class", "DynamicconvLayer", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "def", "__init__", "(", "\n", "self", ",", "\n", "input_size", ",", "\n", "kernel_size", "=", "1", ",", "\n", "padding_l", "=", "None", ",", "\n", "weight_softmax", "=", "False", ",", "\n", "num_heads", "=", "1", ",", "\n", "weight_dropout", "=", "0.", ",", "\n", "bias", "=", "False", ",", "\n", "renorm_padding", "=", "False", ",", "\n", "conv_bias", "=", "False", ",", "\n", "query_size", "=", "None", ")", ":", "\n", "\n", "        ", "super", "(", "DynamicconvLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_size", "=", "input_size", "\n", "self", ".", "query_size", "=", "input_size", "if", "query_size", "is", "None", "else", "query_size", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "padding_l", "=", "padding_l", "\n", "self", ".", "num_heads", "=", "num_heads", "\n", "self", ".", "weight_softmax", "=", "weight_softmax", "\n", "self", ".", "weight_dropout", "=", "weight_dropout", "\n", "self", ".", "renorm_padding", "=", "renorm_padding", "\n", "self", ".", "bias", "=", "bias", "\n", "\n", "self", ".", "weight_linear", "=", "nn", ".", "Linear", "(", "input_size", ",", "num_heads", "*", "kernel_size", ",", "bias", ")", "\n", "if", "conv_bias", ":", "\n", "            ", "self", ".", "conv_bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "input_size", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv_bias", "=", "None", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer.reset_parameters": [[68, 73], ["torch.nn.init.xavier_uniform_", "torch.nn.init.xavier_uniform_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_", "torch.nn.init.constant_"], "methods", ["None"], ["", "self", ".", "reset_parameters", "(", ")", "\n", "\n", "", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "weight_linear", ".", "weight", ")", "\n", "if", "self", ".", "conv_bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "self", ".", "conv_bias", ",", "0.", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer.forward": [[74, 113], ["x.permute().contiguous.permute().contiguous.size", "dynamicconv_layer.DynamicconvLayer.weight_linear().view", "torch.dropout.permute().contiguous", "x.permute().contiguous.permute().contiguous.permute().contiguous", "dynamicconvFunction.apply().permute", "dynamicconv_layer.DynamicconvLayer._forward_unfolded", "dynamicconv_layer.DynamicconvLayer._forward_expanded", "torch.softmax", "torch.softmax", "torch.dropout", "torch.dropout", "x.permute().contiguous.permute().contiguous.size", "dynamicconv_layer.DynamicconvLayer.conv_bias.view", "dynamicconv_layer.DynamicconvLayer.weight_linear", "torch.dropout.permute", "x.permute().contiguous.permute().contiguous.permute", "dynamicconvFunction.apply", "dynamicconv_layer.DynamicconvLayer.conv_bias.view"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer._forward_unfolded", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer._forward_expanded", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["nn", ".", "init", ".", "constant_", "(", "self", ".", "weight_linaer", ".", "bias", ",", "0.", ")", "\n", "\n", "", "", "def", "forward", "(", "self", ",", "x", ",", "incremental_state", "=", "None", ",", "query", "=", "None", ",", "unfold", "=", "None", ")", ":", "\n", "\n", "        ", "T", ",", "B", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "K", ",", "H", "=", "self", ".", "kernel_size", ",", "self", ".", "num_heads", "\n", "# R = C // H", "\n", "\n", "# during inference time, incremental BMM is faster", "\n", "if", "incremental_state", "is", "not", "None", ":", "\n", "            ", "unfold", "=", "x", ".", "size", "(", "0", ")", ">", "512", "if", "unfold", "is", "None", "else", "unfold", "# use unfold mode as default for long sequence to save memory", "\n", "unfold", "=", "unfold", "or", "(", "incremental_state", "is", "not", "None", ")", "\n", "assert", "query", "is", "None", "\n", "\n", "if", "query", "is", "None", ":", "\n", "                ", "query", "=", "x", "\n", "", "if", "unfold", ":", "\n", "                ", "output", "=", "self", ".", "_forward_unfolded", "(", "x", ",", "incremental_state", ",", "query", ")", "\n", "", "else", ":", "\n", "                ", "output", "=", "self", ".", "_forward_expanded", "(", "x", ",", "incremental_state", ",", "query", ")", "\n", "\n", "", "if", "self", ".", "conv_bias", "is", "not", "None", ":", "\n", "                ", "output", "=", "output", "+", "self", ".", "conv_bias", ".", "view", "(", "1", ",", "1", ",", "-", "1", ")", "\n", "\n", "", "return", "output", "\n", "\n", "# during training time, use CUDA kernel", "\n", "", "else", ":", "\n", "            ", "weight", "=", "self", ".", "weight_linear", "(", "x", ")", ".", "view", "(", "T", ",", "B", ",", "H", ",", "K", ")", "\n", "if", "self", ".", "weight_softmax", ":", "\n", "                ", "weight", "=", "F", ".", "softmax", "(", "weight", ",", "dim", "=", "-", "1", ")", "\n", "", "if", "self", ".", "weight_dropout", ":", "\n", "                ", "weight", "=", "F", ".", "dropout", "(", "weight", ",", "self", ".", "weight_dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "", "weight", "=", "weight", ".", "permute", "(", "1", ",", "2", ",", "3", ",", "0", ")", ".", "contiguous", "(", ")", "\n", "self", ".", "filters", "=", "weight", "\n", "x", "=", "x", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ".", "contiguous", "(", ")", "\n", "output", "=", "dynamicconvFunction", ".", "apply", "(", "x", ",", "weight", ",", "self", ".", "padding_l", ")", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "if", "self", ".", "conv_bias", "is", "not", "None", ":", "\n", "                ", "output", "=", "output", "+", "self", ".", "conv_bias", ".", "view", "(", "1", ",", "1", ",", "-", "1", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer.reorder_incremental_state": [[114, 119], ["dynamicconv_layer.DynamicconvLayer._get_input_buffer", "input_buffer.index_select.index_select.index_select", "dynamicconv_layer.DynamicconvLayer._set_input_buffer"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer._get_input_buffer", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer._set_input_buffer"], ["", "return", "output", "\n", "\n", "", "", "def", "reorder_incremental_state", "(", "self", ",", "incremental_state", ",", "new_order", ")", ":", "\n", "        ", "input_buffer", "=", "self", ".", "_get_input_buffer", "(", "incremental_state", ")", "\n", "if", "input_buffer", "is", "not", "None", ":", "\n", "            ", "input_buffer", "=", "input_buffer", ".", "index_select", "(", "1", ",", "new_order", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer._get_input_buffer": [[120, 122], ["fairseq.utils.get_incremental_state"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.get_incremental_state"], ["self", ".", "_set_input_buffer", "(", "incremental_state", ",", "input_buffer", ")", "\n", "\n", "", "", "def", "_get_input_buffer", "(", "self", ",", "incremental_state", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer._set_input_buffer": [[123, 125], ["fairseq.utils.set_incremental_state"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.set_incremental_state"], ["        ", "return", "utils", ".", "get_incremental_state", "(", "self", ",", "incremental_state", ",", "'input_buffer'", ")", "\n", "\n", "", "def", "_set_input_buffer", "(", "self", ",", "incremental_state", ",", "new_buffer", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer._forward_unfolded": [[126, 172], ["x.size", "dynamicconv_layer.DynamicconvLayer.weight_linear().view", "weight.narrow.narrow.narrow", "torch.dropout", "torch.dropout", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "output.view.view.view", "dynamicconv_layer.DynamicconvLayer._get_input_buffer", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "x_unfold.view.view.view", "fairseq.modules.unfold.unfold1d", "x_unfold.view.view.view", "torch.softmax", "torch.softmax", "weight.narrow.narrow.size", "torch.softmax", "torch.softmax", "weight.narrow.narrow.unsqueeze", "dynamicconv_layer.DynamicconvLayer.weight_linear", "x.new", "dynamicconv_layer.DynamicconvLayer._set_input_buffer", "weight.narrow.narrow.narrow", "x.unsqueeze", "x_unfold.view.view.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer._get_input_buffer", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.unfold.unfold1d", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer._set_input_buffer", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["        ", "return", "utils", ".", "set_incremental_state", "(", "self", ",", "incremental_state", ",", "'input_buffer'", ",", "new_buffer", ")", "\n", "\n", "", "def", "_forward_unfolded", "(", "self", ",", "x", ",", "incremental_state", ",", "query", ")", ":", "\n", "        ", "'''The conventional implementation of convolutions.\n        Unfolding the input by having a window shifting to the right.'''", "\n", "T", ",", "B", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "K", ",", "H", "=", "self", ".", "kernel_size", ",", "self", ".", "num_heads", "\n", "R", "=", "C", "//", "H", "\n", "assert", "R", "*", "H", "==", "C", "==", "self", ".", "input_size", "\n", "\n", "weight", "=", "self", ".", "weight_linear", "(", "query", ")", ".", "view", "(", "T", "*", "B", "*", "H", ",", "-", "1", ")", "\n", "\n", "# renorm_padding is only implemented in _forward_expanded", "\n", "assert", "not", "self", ".", "renorm_padding", "or", "incremental_state", "is", "not", "None", "\n", "\n", "if", "incremental_state", "is", "not", "None", ":", "\n", "            ", "input_buffer", "=", "self", ".", "_get_input_buffer", "(", "incremental_state", ")", "\n", "if", "input_buffer", "is", "None", ":", "\n", "                ", "input_buffer", "=", "x", ".", "new", "(", ")", "\n", "", "x_unfold", "=", "torch", ".", "cat", "(", "[", "input_buffer", ",", "x", ".", "unsqueeze", "(", "3", ")", "]", ",", "dim", "=", "3", ")", "\n", "if", "self", ".", "kernel_size", ">", "1", ":", "\n", "                ", "self", ".", "_set_input_buffer", "(", "incremental_state", ",", "x_unfold", "[", ":", ",", ":", ",", ":", ",", "-", "self", ".", "kernel_size", "+", "1", ":", "]", ")", "\n", "", "x_unfold", "=", "x_unfold", ".", "view", "(", "T", "*", "B", "*", "H", ",", "R", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "padding_l", "=", "self", ".", "padding_l", "\n", "if", "K", ">", "T", "and", "padding_l", "==", "K", "-", "1", ":", "\n", "                ", "weight", "=", "weight", ".", "narrow", "(", "1", ",", "K", "-", "T", ",", "T", ")", "\n", "K", ",", "padding_l", "=", "T", ",", "T", "-", "1", "\n", "# unfold the input: T x B x C --> T' x B x C x K", "\n", "", "x_unfold", "=", "unfold1d", "(", "x", ",", "K", ",", "padding_l", ",", "0", ")", "\n", "x_unfold", "=", "x_unfold", ".", "view", "(", "T", "*", "B", "*", "H", ",", "R", ",", "K", ")", "\n", "\n", "", "if", "self", ".", "weight_softmax", "and", "not", "self", ".", "renorm_padding", ":", "\n", "            ", "weight", "=", "F", ".", "softmax", "(", "weight", ",", "dim", "=", "1", ")", "\n", "", "weight", "=", "weight", ".", "narrow", "(", "1", ",", "0", ",", "K", ")", "\n", "\n", "if", "incremental_state", "is", "not", "None", ":", "\n", "            ", "weight", "=", "weight", "[", ":", ",", "-", "x_unfold", ".", "size", "(", "2", ")", ":", "]", "\n", "K", "=", "weight", ".", "size", "(", "1", ")", "\n", "\n", "", "if", "self", ".", "weight_softmax", "and", "self", ".", "renorm_padding", ":", "\n", "            ", "weight", "=", "F", ".", "softmax", "(", "weight", ",", "dim", "=", "1", ")", "\n", "\n", "", "weight", "=", "F", ".", "dropout", "(", "weight", ",", "self", ".", "weight_dropout", ",", "training", "=", "self", ".", "training", ",", "inplace", "=", "False", ")", "\n", "\n", "output", "=", "torch", ".", "bmm", "(", "x_unfold", ",", "weight", ".", "unsqueeze", "(", "2", ")", ")", "# T*B*H x R x 1", "\n", "output", "=", "output", ".", "view", "(", "T", ",", "B", ",", "C", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.dynamicconv_layer.DynamicconvLayer._forward_expanded": [[173, 213], ["x.view().transpose.view().transpose.size", "dynamicconv_layer.DynamicconvLayer.weight_linear().view", "weight.narrow.narrow.narrow().contiguous", "weight.narrow.narrow.view().transpose", "x.view().transpose.view().transpose.view().transpose", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "output.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous().view", "torch.dropout", "torch.dropout", "weight.narrow.narrow.new().fill_", "weight_expanded.narrow.narrow.as_strided().copy_", "weight_expanded.narrow.narrow.narrow", "torch.softmax", "torch.softmax", "torch.dropout", "torch.dropout", "weight.narrow.narrow.new_zeros", "weight_expanded.narrow.narrow.as_strided().copy_", "weight_expanded.narrow.narrow.narrow", "dynamicconv_layer.DynamicconvLayer.weight_linear", "torch.softmax", "torch.softmax", "weight.narrow.narrow.narrow", "weight.narrow.narrow.view", "x.view().transpose.view().transpose.view", "float", "weight.narrow.narrow.narrow", "output.transpose().contiguous().view.transpose().contiguous().view.transpose().contiguous", "weight.narrow.narrow.new", "weight_expanded.narrow.narrow.as_strided", "weight_expanded.narrow.narrow.as_strided", "output.transpose().contiguous().view.transpose().contiguous().view.transpose"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax"], ["return", "output", "\n", "\n", "", "def", "_forward_expanded", "(", "self", ",", "x", ",", "incremental_stat", ",", "query", ")", ":", "\n", "        ", "'''Turn the convolution filters into band matrices and do matrix multiplication.\n        This is faster when the sequence is short, but less memory efficient.\n        This is not used in the decoder during inference.\n        '''", "\n", "T", ",", "B", ",", "C", "=", "x", ".", "size", "(", ")", "\n", "K", ",", "H", "=", "self", ".", "kernel_size", ",", "self", ".", "num_heads", "\n", "R", "=", "C", "//", "H", "\n", "assert", "R", "*", "H", "==", "C", "==", "self", ".", "input_size", "\n", "weight", "=", "self", ".", "weight_linear", "(", "query", ")", ".", "view", "(", "T", "*", "B", "*", "H", ",", "-", "1", ")", "\n", "\n", "if", "not", "self", ".", "renorm_padding", ":", "\n", "            ", "if", "self", ".", "weight_softmax", ":", "\n", "                ", "weight", "=", "F", ".", "softmax", "(", "weight", ",", "dim", "=", "1", ")", "\n", "", "weight", "=", "F", ".", "dropout", "(", "weight", ",", "self", ".", "weight_dropout", ",", "training", "=", "self", ".", "training", ",", "inplace", "=", "False", ")", "\n", "", "weight", "=", "weight", ".", "narrow", "(", "1", ",", "0", ",", "K", ")", ".", "contiguous", "(", ")", "\n", "weight", "=", "weight", ".", "view", "(", "T", ",", "B", "*", "H", ",", "K", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "T", ",", "B", "*", "H", ",", "R", ")", ".", "transpose", "(", "0", ",", "1", ")", "\n", "if", "self", ".", "weight_softmax", "and", "self", ".", "renorm_padding", ":", "\n", "# turn the convolution filters into band matrices", "\n", "            ", "weight_expanded", "=", "weight", ".", "new", "(", "B", "*", "H", ",", "T", ",", "T", "+", "K", "-", "1", ")", ".", "fill_", "(", "float", "(", "'-inf'", ")", ")", "\n", "weight_expanded", ".", "as_strided", "(", "(", "B", "*", "H", ",", "T", ",", "K", ")", ",", "(", "T", "*", "(", "T", "+", "K", "-", "1", ")", ",", "T", "+", "K", ",", "1", ")", ")", ".", "copy_", "(", "weight", ")", "\n", "weight_expanded", "=", "weight_expanded", ".", "narrow", "(", "2", ",", "self", ".", "padding_l", ",", "T", ")", "\n", "# normalize the weight over valid positions like self-attention", "\n", "weight_expanded", "=", "F", ".", "softmax", "(", "weight_expanded", ",", "dim", "=", "2", ")", "\n", "weight_expanded", "=", "F", ".", "dropout", "(", "weight_expanded", ",", "self", ".", "weight_dropout", ",", "training", "=", "self", ".", "training", ",", "inplace", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "P", "=", "self", ".", "padding_l", "\n", "# For efficieny, we cut the kernel size and reduce the padding when the kernel is larger than the length", "\n", "if", "K", ">", "T", "and", "P", "==", "K", "-", "1", ":", "\n", "                ", "weight", "=", "weight", ".", "narrow", "(", "2", ",", "K", "-", "T", ",", "T", ")", "\n", "K", ",", "P", "=", "T", ",", "T", "-", "1", "\n", "# turn the convolution filters into band matrices", "\n", "", "weight_expanded", "=", "weight", ".", "new_zeros", "(", "B", "*", "H", ",", "T", ",", "T", "+", "K", "-", "1", ",", "requires_grad", "=", "False", ")", "\n", "weight_expanded", ".", "as_strided", "(", "(", "B", "*", "H", ",", "T", ",", "K", ")", ",", "(", "T", "*", "(", "T", "+", "K", "-", "1", ")", ",", "T", "+", "K", ",", "1", ")", ")", ".", "copy_", "(", "weight", ")", "\n", "weight_expanded", "=", "weight_expanded", ".", "narrow", "(", "2", ",", "P", ",", "T", ")", "# B*H x T x T", "\n", "", "output", "=", "torch", ".", "bmm", "(", "weight_expanded", ",", "x", ")", "\n", "output", "=", "output", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", ".", "view", "(", "T", ",", "B", ",", "C", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.cuda_function_gen.gen_forward": [[7, 94], ["open", "forward.write", "forward.write", "forward.write", "forward.write", "forward.write", "case_k.format", "forward.write", "main_block.format"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write"], ["def", "gen_forward", "(", ")", ":", "\n", "\n", "    ", "kernels", "=", "[", "3", ",", "5", ",", "7", ",", "15", ",", "31", ",", "63", ",", "127", ",", "255", "]", "\n", "seqs", "=", "[", "32", "*", "x", "for", "x", "in", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", ",", "12", ",", "13", ",", "14", ",", "15", ",", "16", "]", "]", "\n", "\n", "head", "=", "\"\"\"\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n#include \"lightconv_cuda.cuh\"\n\nstd::vector<at::Tensor> lightconv_cuda_forward(at::Tensor input, at::Tensor filters, int padding_l) {\n\n    at::DeviceGuard g(input.device());\n    const auto minibatch = input.size(0);\n    const auto numFeatures = input.size(1);\n    const auto sequenceLength = input.size(2);\n\n    const auto numHeads = filters.size(0);\n    const auto filterSize = filters.size(1);\n\n    const auto numFiltersInBlock = numFeatures / numHeads;\n\n    const dim3 blocks(minibatch, numFeatures);\n\n    auto output = at::zeros_like(input);\n    auto stream = at::cuda::getCurrentCUDAStream();\n\"\"\"", "\n", "\n", "sequence_if", "=", "\"\"\"\n    if (sequenceLength <= {seq}) {{\n        switch(filterSize) {{\n\"\"\"", "\n", "\n", "case_k", "=", "\"\"\"\n            case {k}:\n\"\"\"", "\n", "\n", "main_block", "=", "\"\"\"\n                if (padding_l == {pad}) {{\n                    AT_DISPATCH_FLOATING_TYPES_AND_HALF(input.scalar_type(), \"lightconv_forward\", ([&] {{\n                        lightconv_forward_kernel<{k}, {b_size}, {pad}, scalar_t>\n                        <<<blocks, {b_size}, 0, stream>>>(\n                                input.data<scalar_t>(),\n                                filters.data<scalar_t>(),\n                                minibatch,\n                                sequenceLength,\n                                numFeatures,\n                                numFiltersInBlock,\n                                output.data<scalar_t>());\n                    }}));\n                }} else\n\"\"\"", "\n", "\n", "bad_padding", "=", "\"\"\"\n                {\n                    std::cout << \"WARNING: Unsupported padding size - skipping forward pass\" << std::endl;\n                }\n                break;\n\"\"\"", "\n", "\n", "bad_filter", "=", "\"\"\"\n            default:\n                std::cout << \"WARNING: Unsupported filter length passed - skipping forward pass\" << std::endl;\n        }\n\"\"\"", "\n", "\n", "con_else", "=", "\"\"\"\n    } else\n\"\"\"", "\n", "\n", "final_else", "=", "\"\"\"\n    {\n        switch(filterSize) {\n\"\"\"", "\n", "\n", "final_return", "=", "\"\"\"\n    }\n\n    return {output};\n}\n\"\"\"", "\n", "\n", "with", "open", "(", "\"lightconv_cuda_forward.cu\"", ",", "'w'", ")", "as", "forward", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.dynamicconv_layer.cuda_function_gen.gen_backward": [[96, 219], ["open", "backward.write", "backward.write", "zip", "backward.write", "backward.write", "backward.write", "zip", "backward.write", "backward.write", "backward.write", "backward.write", "backward.write", "sequence_if.format", "backward.write", "backward.write", "case_k.format", "chunks_reset.format", "backward.write", "case_k.format", "backward.write", "backward.write", "main_block.format", "chunks_reset.format", "main_block.format"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write"], ["for", "seq", "in", "seqs", ":", "\n", "            ", "forward", ".", "write", "(", "sequence_if", ".", "format", "(", "seq", "=", "seq", ")", ")", "\n", "for", "k", "in", "kernels", ":", "\n", "                ", "forward", ".", "write", "(", "case_k", ".", "format", "(", "k", "=", "k", ")", ")", "\n", "for", "pad", "in", "[", "k", "//", "2", ",", "k", "-", "1", "]", ":", "\n", "                    ", "forward", ".", "write", "(", "main_block", ".", "format", "(", "k", "=", "k", ",", "b_size", "=", "seq", ",", "pad", "=", "pad", ")", ")", "\n", "", "forward", ".", "write", "(", "bad_padding", ")", "\n", "", "forward", ".", "write", "(", "bad_filter", ")", "\n", "forward", ".", "write", "(", "con_else", ")", "\n", "\n", "", "forward", ".", "write", "(", "final_else", ")", "\n", "for", "k", "in", "kernels", ":", "\n", "            ", "forward", ".", "write", "(", "case_k", ".", "format", "(", "k", "=", "k", ")", ")", "\n", "for", "pad", "in", "[", "k", "//", "2", ",", "k", "-", "1", "]", ":", "\n", "                ", "forward", ".", "write", "(", "main_block", ".", "format", "(", "k", "=", "k", ",", "b_size", "=", "seq", ",", "pad", "=", "pad", ")", ")", "\n", "", "forward", ".", "write", "(", "bad_padding", ")", "\n", "", "forward", ".", "write", "(", "bad_filter", ")", "\n", "forward", ".", "write", "(", "final_return", ")", "\n", "\n", "\n", "", "", "def", "gen_backward", "(", ")", ":", "\n", "\n", "    ", "head", "=", "\"\"\"\n/**\n * Copyright (c) Facebook, Inc. and its affiliates.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n#include \"lightconv_cuda.cuh\"\n\nstd::vector<at::Tensor> lightconv_cuda_backward(\n        at::Tensor gradOutput,\n        int padding_l,\n        at::Tensor input,\n        at::Tensor filters) {\n\n    // gradWrtInput\n    const int minibatch = input.size(0);\n    const int numFeatures = input.size(1);\n    const int sequenceLength = input.size(2);\n\n    const int numHeads = filters.size(0);\n    const int filterSize = filters.size(1);\n\n    const dim3 gradBlocks(minibatch, numFeatures);\n    const dim3 weightGradFirstpassShortBlocks(minibatch, numHeads);\n    const dim3 weightGradSecondpassBlocks(numHeads, filterSize);\n\n    const int numFiltersInBlock = numFeatures / numHeads;\n\n    auto gradInput = at::zeros_like(input);\n    auto gradFilters = at::zeros_like(filters);\n\n    at::DeviceGuard g(input.device());\n    auto stream = at::cuda::getCurrentCUDAStream();\n\n    switch(filterSize) {\n\"\"\"", "\n", "\n", "sequence_if", "=", "\"\"\"\n            if (sequenceLength <= {seq}) {{\n\"\"\"", "\n", "\n", "case_k", "=", "\"\"\"\n        case {k}:\n\"\"\"", "\n", "\n", "main_block", "=", "\"\"\"\n                if (padding_l == {p}) {{\n                    AT_DISPATCH_FLOATING_TYPES_AND_HALF(input.scalar_type(), \"lightconv_backward\", ([&] {{\n                        lightconv_grad_wrt_input_kernel<{k}, {b_size}, {p}, scalar_t>\n                        <<<gradBlocks, {b_size}, 0, stream>>>(\n                                gradOutput.data<scalar_t>(),\n                                filters.data<scalar_t>(),\n                                minibatch,\n                                sequenceLength,\n                                numFeatures,\n                                numFiltersInBlock,\n                                gradInput.data<scalar_t>());\n\n\"\"\"", "\n", "\n", "weight_grad_short", "=", "\"\"\"\n                        at::Tensor tempSumGradFilters = at::zeros({{minibatch, numHeads, filterSize}}, input.options().dtype(at::kFloat));\n                        lightconv_grad_wrt_weights_firstpass_short_kernel<{k}, {b_size}, {p}, scalar_t>\n                        <<<weightGradFirstpassShortBlocks, {b_size}, 0, stream>>>(\n                                input.data<scalar_t>(),\n                                gradOutput.data<scalar_t>(),\n                                minibatch,\n                                sequenceLength,\n                                numFeatures,\n                                numFiltersInBlock,\n                                numHeads,\n                                tempSumGradFilters.data<float>()\n                        );\n\n                        lightconv_grad_wrt_weights_secondpass_short_kernel<{k}, {b_size}, scalar_t>\n                        <<<weightGradSecondpassBlocks, {b_size}, 0, stream>>>(\n                                tempSumGradFilters.data<float>(),\n                                minibatch,\n                                numFiltersInBlock,\n                                gradFilters.data<scalar_t>()\n                        );\n                    }}));\n                }} else\n\"\"\"", "\n", "\n", "weight_grad", "="]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.hub_interface.BARTHubInterface.__init__": [[24, 39], ["torch.Module.__init__", "fairseq.data.encoders.build_bpe", "min", "hub_interface.BARTHubInterface.register_buffer", "fairseq.utils.resolve_max_positions", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "hub_interface.BARTHubInterface.task.max_positions", "hub_interface.BARTHubInterface.model.max_positions"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.resolve_max_positions", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.max_positions", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.max_positions"], ["\n", "class", "BARTHubInterface", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"A simple PyTorch Hub interface to BART.\n\n    Usage: https://github.com/pytorch/fairseq/tree/master/examples/BART\n    \"\"\"", "\n", "\n", "def", "__init__", "(", "self", ",", "args", ",", "task", ",", "model", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "task", "=", "task", "\n", "self", ".", "model", "=", "model", "\n", "\n", "self", ".", "bpe", "=", "encoders", ".", "build_bpe", "(", "args", ")", "\n", "\n", "self", ".", "max_positions", "=", "min", "(", "utils", ".", "resolve_max_positions", "(", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.hub_interface.BARTHubInterface.device": [[40, 43], ["None"], "methods", ["None"], ["self", ".", "task", ".", "max_positions", "(", ")", ",", "\n", "self", ".", "model", ".", "max_positions", "(", ")", ",", "\n", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.hub_interface.BARTHubInterface.encode": [[44, 73], ["hub_interface.BARTHubInterface.bpe.encode", "hub_interface.BARTHubInterface.task.source_dictionary.encode_line", "hub_interface.BARTHubInterface.long", "len", "hub_interface.BARTHubInterface.split", "hub_interface.BARTHubInterface.split", "hub_interface.BARTHubInterface.bpe.encode"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.encode", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.encode_line", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.encode"], ["# this is useful for determining the device", "\n", "self", ".", "register_buffer", "(", "'_float_tensor'", ",", "torch", ".", "tensor", "(", "[", "0", "]", ",", "dtype", "=", "torch", ".", "float", ")", ")", "\n", "\n", "", "@", "property", "\n", "def", "device", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_float_tensor", ".", "device", "\n", "\n", "", "def", "encode", "(", "self", ",", "sentence", ":", "str", ",", "*", "addl_sentences", ",", "no_separator", "=", "True", ")", "->", "torch", ".", "LongTensor", ":", "\n", "        ", "\"\"\"\n        BPE-encode a sentence (or multiple sentences).\n\n        Every sequence begins with a beginning-of-sentence (`<s>`) symbol.\n        Every sentence ends with an end-of-sentence (`</s>`).\n\n        Example (single sentence): `<s> a b c </s>`\n        Example (sentence pair): `<s> d e f </s> 1 2 3 </s>`\n\n        The BPE encoding follows GPT-2. One subtle detail is that the GPT-2 BPE\n        requires leading spaces. For example::\n\n            >>> bart.encode('Hello world').tolist()\n            [0, 31414, 232, 2]\n            >>> bart.encode(' world').tolist()\n            [0, 232, 2]\n            >>> bart.encode('world').tolist()\n            [0, 8331, 2]\n        \"\"\"", "\n", "tokens", "=", "self", ".", "bpe", ".", "encode", "(", "sentence", ")", "\n", "if", "len", "(", "tokens", ".", "split", "(", "' '", ")", ")", ">", "self", ".", "max_positions", "-", "2", ":", "\n", "            ", "tokens", "=", "' '", ".", "join", "(", "tokens", ".", "split", "(", "' '", ")", "[", ":", "self", ".", "max_positions", "-", "2", "]", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.hub_interface.BARTHubInterface.decode": [[74, 86], ["tokens.cpu().numpy.cpu().numpy.cpu().numpy", "numpy.split", "tokens.cpu().numpy.cpu().numpy.dim", "hub_interface.BARTHubInterface.task.source_dictionary.bos", "hub_interface.BARTHubInterface.task.source_dictionary.eos", "hub_interface.BARTHubInterface.bpe.decode", "len", "tokens.cpu().numpy.cpu().numpy.cpu", "hub_interface.BARTHubInterface.task.source_dictionary.string", "doc_mask.nonzero"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.bos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.decode", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.string"], ["", "bpe_sentence", "=", "'<s> '", "+", "tokens", "+", "' </s>'", "\n", "for", "s", "in", "addl_sentences", ":", "\n", "            ", "bpe_sentence", "+=", "(", "' </s>'", "if", "not", "no_separator", "else", "''", ")", "\n", "bpe_sentence", "+=", "' '", "+", "self", ".", "bpe", ".", "encode", "(", "s", ")", "+", "' </s>'", "\n", "", "tokens", "=", "self", ".", "task", ".", "source_dictionary", ".", "encode_line", "(", "bpe_sentence", ",", "append_eos", "=", "False", ")", "\n", "return", "tokens", ".", "long", "(", ")", "\n", "\n", "", "def", "decode", "(", "self", ",", "tokens", ":", "torch", ".", "LongTensor", ")", ":", "\n", "        ", "assert", "tokens", ".", "dim", "(", ")", "==", "1", "\n", "tokens", "=", "tokens", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "if", "tokens", "[", "0", "]", "==", "self", ".", "task", ".", "source_dictionary", ".", "bos", "(", ")", ":", "\n", "            ", "tokens", "=", "tokens", "[", "1", ":", "]", "# remove <s>", "\n", "", "eos_mask", "=", "(", "tokens", "==", "self", ".", "task", ".", "source_dictionary", ".", "eos", "(", ")", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.hub_interface.BARTHubInterface._build_sample": [[87, 99], ["hub_interface.BARTHubInterface.task.build_dataset_for_inference", "hub_interface.BARTHubInterface.collater", "fairseq.utils.apply_to_sample", "x.numel", "tensor.to"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.masked_lm.MaskedLMTask.build_dataset_for_inference", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.collater", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.apply_to_sample"], ["doc_mask", "=", "eos_mask", "[", "1", ":", "]", "&", "eos_mask", "[", ":", "-", "1", "]", "\n", "sentences", "=", "np", ".", "split", "(", "tokens", ",", "doc_mask", ".", "nonzero", "(", ")", "[", "0", "]", "+", "1", ")", "\n", "sentences", "=", "[", "self", ".", "bpe", ".", "decode", "(", "self", ".", "task", ".", "source_dictionary", ".", "string", "(", "s", ")", ")", "for", "s", "in", "sentences", "]", "\n", "if", "len", "(", "sentences", ")", "==", "1", ":", "\n", "            ", "return", "sentences", "[", "0", "]", "\n", "", "return", "sentences", "\n", "\n", "", "def", "_build_sample", "(", "self", ",", "src_tokens", ":", "List", "[", "torch", ".", "LongTensor", "]", ")", ":", "\n", "# assert torch.is_tensor(src_tokens)", "\n", "        ", "dataset", "=", "self", ".", "task", ".", "build_dataset_for_inference", "(", "\n", "src_tokens", ",", "\n", "[", "x", ".", "numel", "(", ")", "for", "x", "in", "src_tokens", "]", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.hub_interface.BARTHubInterface.sample": [[100, 104], ["hub_interface.BARTHubInterface.generate", "hub_interface.BARTHubInterface.encode", "hub_interface.BARTHubInterface.decode"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.hub_interface.BARTHubInterface.generate", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.encode", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.decode"], ["sample", "=", "dataset", ".", "collater", "(", "dataset", ")", "\n", "sample", "=", "utils", ".", "apply_to_sample", "(", "\n", "lambda", "tensor", ":", "tensor", ".", "to", "(", "self", ".", "device", ")", ",", "\n", "sample", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.hub_interface.BARTHubInterface.score_sequence": [[125, 140], ["copy.copy", "setattr", "hub_interface.BARTHubInterface.task.build_generator", "hub_interface.BARTHubInterface._build_sample", "fairseq.data.data_utils.collate_tokens().cuda", "fairseq.data.data_utils.collate_tokens().cuda", "hub_interface.BARTHubInterface.generate", "[].data.item", "hub_interface.BARTHubInterface.encode", "hub_interface.BARTHubInterface.encode", "fairseq.data.data_utils.collate_tokens", "fairseq.data.data_utils.collate_tokens"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.copy", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.fairseq_task.FairseqTask.build_generator", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.hub_interface.BARTHubInterface._build_sample", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.hub_interface.BARTHubInterface.generate", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.item", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.encode", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.encode", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.collate_tokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.collate_tokens"], ["", "def", "score_sequence", "(", "self", ",", "src_sents", ":", "List", "[", "str", "]", ",", "tgt_sents", ":", "List", "[", "str", "]", ",", "**", "kwargs", ")", ":", "\n", "        ", "gen_args", "=", "copy", ".", "copy", "(", "self", ".", "args", ")", "\n", "setattr", "(", "gen_args", ",", "\"score_reference\"", ",", "True", ")", "\n", "reference_scorer", "=", "self", ".", "task", ".", "build_generator", "(", "gen_args", ")", "\n", "\n", "src_sent_ids", "=", "[", "self", ".", "encode", "(", "sentence", ")", "for", "sentence", "in", "src_sents", "]", "# makes longtensors", "\n", "tgt_sent_ids", "=", "[", "self", ".", "encode", "(", "sentence", ")", "for", "sentence", "in", "tgt_sents", "]", "\n", "sample", "=", "self", ".", "_build_sample", "(", "src_sent_ids", ")", "\n", "eos_idx", ",", "pad_idx", "=", "self", ".", "model", ".", "decoder", ".", "dictionary", ".", "eos_index", ",", "self", ".", "model", ".", "decoder", ".", "dictionary", ".", "pad_index", "\n", "# TODO don't hardcode cuda", "\n", "sample", "[", "\"net_input\"", "]", "[", "\"prev_output_tokens\"", "]", "=", "collate_tokens", "(", "tgt_sent_ids", ",", "pad_idx", ",", "eos_idx", ",", "move_eos_to_beginning", "=", "True", ")", ".", "cuda", "(", ")", "\n", "sample", "[", "\"target\"", "]", "=", "collate_tokens", "(", "tgt_sent_ids", ",", "pad_idx", ",", "eos_idx", ")", ".", "cuda", "(", ")", "# if larger beam have to stack the tensor rather than just 0 index :p", "\n", "seq_score", "=", "reference_scorer", ".", "generate", "(", "[", "self", ".", "model", "]", ",", "sample", ")", "\n", "#lm_score = seq_score[0][0][\"score\"]", "\n", "return", "seq_score", "[", "0", "]", "[", "0", "]", "[", "\"score\"", "]", ".", "data", ".", "item", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.hub_interface.BARTHubInterface.generate": [[105, 132], ["hub_interface.BARTHubInterface._build_sample", "copy.copy", "kwargs.items", "hub_interface.BARTHubInterface.task.build_generator", "hub_interface.BARTHubInterface.task.inference_step", "setattr", "hub_interface.BARTHubInterface.string", "print", "getattr", "[].new_zeros().fill_", "getattr", "sorted", "hub_interface.BARTHubInterface.task.source_dictionary.bos", "zip", "[].new_zeros", "sample[].tolist", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.hub_interface.BARTHubInterface._build_sample", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.copy", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.fairseq_task.FairseqTask.build_generator", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.tasks.translation_moe.TranslationMoETask.inference_step", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.string", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.bos"], ["return", "sample", "\n", "\n", "", "def", "sample", "(", "self", ",", "sentences", ":", "List", "[", "str", "]", ",", "beam", ":", "int", "=", "1", ",", "verbose", ":", "bool", "=", "False", ",", "\n", "gold_tokens", ":", "List", "[", "str", "]", "=", "None", ",", "**", "kwargs", ")", "->", "str", ":", "\n", "        ", "input", "=", "[", "self", ".", "encode", "(", "sentence", ")", "for", "sentence", "in", "sentences", "]", "\n", "if", "gold_tokens", ":", "\n", "            ", "gold_tokens", "=", "[", "self", ".", "encode", "(", "tokens", ")", "for", "tokens", "in", "gold_tokens", "]", "\n", "max_l", "=", "kwargs", ".", "get", "(", "\"max_len_b\"", ",", "512", ")", "# todo also don't make this hardcoded 512", "\n", "#breakpoint()", "\n", "if", "len", "(", "gold_tokens", "[", "0", "]", ")", ">", "max_l", ":", "\n", "                ", "gold_tokens", "=", "[", "torch", ".", "cat", "(", "(", "gold_tokens", "[", "0", "]", "[", ":", "max_l", "]", ",", "gold_tokens", "[", "0", "]", "[", "-", "1", "]", ".", "unsqueeze", "(", "0", ")", ")", ")", "]", "#TODO make this actually append the eos and also support more than 1", "\n", "\n", "", "", "hypos", "=", "self", ".", "generate", "(", "input", ",", "beam", ",", "verbose", ",", "gold_tokens", "=", "gold_tokens", ",", "\n", "**", "kwargs", ")", "\n", "# for x in hypos:", "\n", "#     for i in range(0, len(x[\"tokens\"]), 2):", "\n", "#         this = x[\"tokens\"][i:i+2]", "\n", "#         print(this, self.decode(this))", "\n", "return", "[", "self", ".", "decode", "(", "x", "[", "'tokens'", "]", ")", "for", "x", "in", "hypos", "]", "\n", "\n", "", "def", "score_sequence", "(", "self", ",", "src_sents", ":", "List", "[", "str", "]", ",", "tgt_sents", ":", "List", "[", "str", "]", ",", "**", "kwargs", ")", ":", "\n", "        ", "gen_args", "=", "copy", ".", "copy", "(", "self", ".", "args", ")", "\n", "setattr", "(", "gen_args", ",", "\"score_reference\"", ",", "True", ")", "\n", "reference_scorer", "=", "self", ".", "task", ".", "build_generator", "(", "gen_args", ")", "\n", "\n", "src_sent_ids", "=", "[", "self", ".", "encode", "(", "sentence", ")", "for", "sentence", "in", "src_sents", "]", "# makes longtensors", "\n", "tgt_sent_ids", "=", "[", "self", ".", "encode", "(", "sentence", ")", "for", "sentence", "in", "tgt_sents", "]", "\n", "sample", "=", "self", ".", "_build_sample", "(", "src_sent_ids", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.hub_interface.BARTHubInterface.extract_features": [[133, 162], ["tokens.unsqueeze.unsqueeze.clone", "tokens.unsqueeze.unsqueeze.gather().squeeze", "hub_interface.BARTHubInterface.model", "tokens.unsqueeze.unsqueeze.dim", "tokens.unsqueeze.unsqueeze.unsqueeze", "tokens.unsqueeze.unsqueeze.size", "min", "ValueError", "tokens.unsqueeze.unsqueeze.to", "hub_interface.BARTHubInterface.model.max_positions", "tokens.unsqueeze.unsqueeze.gather", "inner_state.transpose", "tokens.unsqueeze.unsqueeze.size", "hub_interface.BARTHubInterface.model.max_positions", "tokens.unsqueeze.unsqueeze.ne().sum", "tokens.unsqueeze.unsqueeze.ne", "hub_interface.BARTHubInterface.task.source_dictionary.pad"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.trainer.Trainer.model", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.max_positions", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.max_positions", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad"], ["eos_idx", ",", "pad_idx", "=", "self", ".", "model", ".", "decoder", ".", "dictionary", ".", "eos_index", ",", "self", ".", "model", ".", "decoder", ".", "dictionary", ".", "pad_index", "\n", "# TODO don't hardcode cuda", "\n", "sample", "[", "\"net_input\"", "]", "[", "\"prev_output_tokens\"", "]", "=", "collate_tokens", "(", "tgt_sent_ids", ",", "pad_idx", ",", "eos_idx", ",", "move_eos_to_beginning", "=", "True", ")", ".", "cuda", "(", ")", "\n", "sample", "[", "\"target\"", "]", "=", "collate_tokens", "(", "tgt_sent_ids", ",", "pad_idx", ",", "eos_idx", ")", ".", "cuda", "(", ")", "# if larger beam have to stack the tensor rather than just 0 index :p", "\n", "seq_score", "=", "reference_scorer", ".", "generate", "(", "[", "self", ".", "model", "]", ",", "sample", ")", "\n", "#lm_score = seq_score[0][0][\"score\"]", "\n", "return", "seq_score", "[", "0", "]", "[", "0", "]", "[", "\"score\"", "]", ".", "data", ".", "item", "(", ")", "\n", "\n", "", "def", "generate", "(", "self", ",", "tokens", ":", "List", "[", "torch", ".", "LongTensor", "]", ",", "beam", ":", "int", "=", "5", ",", "verbose", ":", "bool", "=", "False", ",", "**", "kwargs", ")", "->", "torch", ".", "LongTensor", ":", "\n", "        ", "sample", "=", "self", ".", "_build_sample", "(", "tokens", ")", "\n", "# for coefficient training need gold tokens", "\n", "gold_toks", "=", "kwargs", ".", "get", "(", "\"gold_tokens\"", ")", "\n", "gold_sample", "=", "self", ".", "_build_sample", "(", "tokens", ")", "if", "gold_toks", "else", "None", "\n", "if", "gold_sample", ":", "\n", "            ", "eos_idx", ",", "pad_idx", "=", "self", ".", "model", ".", "decoder", ".", "dictionary", ".", "eos_index", ",", "self", ".", "model", ".", "decoder", ".", "dictionary", ".", "pad_index", "\n", "if", "self", ".", "args", ".", "cpu", ":", "\n", "                ", "shifted_gold", "=", "collate_tokens", "(", "gold_toks", ",", "pad_idx", ",", "eos_idx", ",", "move_eos_to_beginning", "=", "True", ")", "\n", "gold", "=", "collate_tokens", "(", "gold_toks", ",", "pad_idx", ",", "eos_idx", ")", "\n", "", "else", ":", "\n", "                ", "shifted_gold", "=", "collate_tokens", "(", "gold_toks", ",", "pad_idx", ",", "eos_idx", ",", "move_eos_to_beginning", "=", "True", ")", ".", "cuda", "(", ")", "\n", "gold", "=", "collate_tokens", "(", "gold_toks", ",", "pad_idx", ",", "eos_idx", ")", ".", "cuda", "(", ")", "\n", "\n", "", "gold_sample", "[", "\"net_input\"", "]", "[", "\"prev_output_tokens\"", "]", "=", "shifted_gold", "\n", "gold_sample", "[", "\"target\"", "]", "=", "gold", "\n", "kwargs", "[", "\"gold_sample\"", "]", "=", "gold_sample", "\n", "kwargs", "[", "\"gold_tokens\"", "]", "=", "gold", "# TODO this is redundant now", "\n", "# build generator using current args as well as any kwargs", "\n", "", "gen_args", "=", "copy", ".", "copy", "(", "self", ".", "args", ")", "\n", "gen_args", ".", "beam", "=", "beam", "\n", "for", "k", ",", "v", "in", "kwargs", ".", "items", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.hub_interface.BARTHubInterface.register_classification_head": [[163, 168], ["hub_interface.BARTHubInterface.model.register_classification_head"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.model.BARTModel.register_classification_head"], ["            ", "setattr", "(", "gen_args", ",", "k", ",", "v", ")", "\n", "", "generator", "=", "self", ".", "task", ".", "build_generator", "(", "gen_args", ")", "\n", "if", "kwargs", ".", "get", "(", "\"learn\"", ")", ":", "\n", "            ", "setattr", "(", "gen_args", ",", "\"score_reference\"", ",", "True", ")", "# so can get a sequence scorer", "\n", "ref_scorer", "=", "self", ".", "task", ".", "build_generator", "(", "gen_args", ")", "\n", "kwargs", "[", "\"reference_scorer\"", "]", "=", "ref_scorer", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.hub_interface.BARTHubInterface.predict": [[170, 182], ["hub_interface.BARTHubInterface.extract_features", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "tokens.unsqueeze.unsqueeze.dim", "tokens.unsqueeze.unsqueeze.unsqueeze", "tokens.unsqueeze.unsqueeze.to", "features[].view", "hub_interface.BARTHubInterface.size", "hub_interface.BARTHubInterface.size", "tokens.unsqueeze.unsqueeze.eq", "hub_interface.BARTHubInterface.task.source_dictionary.eos"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_transformer.LevenshteinTransformerDecoder.extract_features", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos"], ["generator", ",", "\n", "[", "self", ".", "model", "]", ",", "\n", "sample", ",", "\n", "prefix_tokens", "=", "sample", "[", "'net_input'", "]", "[", "'src_tokens'", "]", ".", "new_zeros", "(", "(", "len", "(", "tokens", ")", ",", "1", ")", ")", ".", "fill_", "(", "self", ".", "task", ".", "source_dictionary", ".", "bos", "(", ")", ")", ",", "\n", "**", "kwargs", "\n", ")", "\n", "\n", "if", "verbose", ":", "\n", "            ", "src_str_with_unk", "=", "self", ".", "string", "(", "tokens", ")", "\n", "logger", ".", "info", "(", "'S\\t{}'", ".", "format", "(", "src_str_with_unk", ")", ")", "\n", "\n", "", "def", "getarg", "(", "name", ",", "default", ")", ":", "\n", "            ", "return", "getattr", "(", "gen_args", ",", "name", ",", "getattr", "(", "self", ".", "args", ",", "name", ",", "default", ")", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.model.BARTModel.hub_models": [[26, 32], ["None"], "methods", ["None"], ["\n", "\n", "@", "register_model", "(", "'bart'", ")", "\n", "class", "BARTModel", "(", "TransformerModel", ")", ":", "\n", "\n", "    ", "@", "classmethod", "\n", "def", "hub_models", "(", "cls", ")", ":", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.model.BARTModel.__init__": [[34, 41], ["fairseq.models.transformer.TransformerModel.__init__", "model.BARTModel.apply", "torch.ModuleDict"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["'bart.large'", ":", "'http://dl.fbaipublicfiles.com/fairseq/models/bart.large.tar.gz'", ",", "\n", "'bart.large.mnli'", ":", "'http://dl.fbaipublicfiles.com/fairseq/models/bart.large.mnli.tar.gz'", ",", "\n", "'bart.large.cnn'", ":", "'http://dl.fbaipublicfiles.com/fairseq/models/bart.large.cnn.tar.gz'", ",", "\n", "}", "\n", "\n", "", "def", "__init__", "(", "self", ",", "args", ",", "encoder", ",", "decoder", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "encoder", ",", "decoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.model.BARTModel.add_args": [[42, 53], ["super().add_args", "parser.add_argument", "parser.add_argument", "fairseq.utils.get_available_activation_fns"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.add_args", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.get_available_activation_fns"], ["# We follow BERT's random weight initialization", "\n", "self", ".", "apply", "(", "init_bert_params", ")", "\n", "\n", "self", ".", "classification_heads", "=", "nn", ".", "ModuleDict", "(", ")", "\n", "\n", "", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "super", "(", "BARTModel", ",", "BARTModel", ")", ".", "add_args", "(", "parser", ")", "\n", "parser", ".", "add_argument", "(", "\n", "'--pooler-dropout'", ",", "type", "=", "float", ",", "metavar", "=", "'D'", ",", "\n", "help", "=", "'dropout probability in the masked_lm pooler layers'", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.model.BARTModel.supported_targets": [[55, 58], ["None"], "methods", ["None"], ["'--pooler-activation-fn'", ",", "\n", "choices", "=", "utils", ".", "get_available_activation_fns", "(", ")", ",", "\n", "help", "=", "'activation function to use for pooler layer'", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.model.BARTModel.forward": [[59, 86], ["model.BARTModel.encoder", "model.BARTModel.decoder", "x[].view", "x.size", "x.size", "src_tokens.eq", "model.BARTModel.encoder.dictionary.eos"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqMultiModel.encoder", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqMultiModel.decoder", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos"], ["\n", "", "@", "property", "\n", "def", "supported_targets", "(", "self", ")", ":", "\n", "        ", "return", "{", "'self'", "}", "\n", "\n", "", "def", "forward", "(", "\n", "self", ",", "src_tokens", ",", "src_lengths", ",", "prev_output_tokens", ",", "\n", "features_only", "=", "False", ",", "classification_head_name", "=", "None", ",", "**", "kwargs", "\n", ")", ":", "\n", "        ", "if", "classification_head_name", "is", "not", "None", ":", "\n", "            ", "features_only", "=", "True", "\n", "\n", "", "encoder_out", "=", "self", ".", "encoder", "(", "\n", "src_tokens", ",", "\n", "src_lengths", "=", "src_lengths", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "x", ",", "extra", "=", "self", ".", "decoder", "(", "\n", "prev_output_tokens", ",", "\n", "encoder_out", "=", "encoder_out", ",", "\n", "features_only", "=", "features_only", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "\n", "if", "classification_head_name", "is", "not", "None", ":", "\n", "            ", "sentence_representation", "=", "x", "[", "\n", "src_tokens", ".", "eq", "(", "self", ".", "encoder", ".", "dictionary", ".", "eos", "(", ")", ")", ",", ":", "\n", "]", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ",", "x", ".", "size", "(", "-", "1", ")", ")", "[", ":", ",", "-", "1", ",", ":", "]", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.model.BARTModel.from_pretrained": [[87, 107], ["hub_utils.from_pretrained", "hub_interface.BARTHubInterface", "cls.hub_models"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.model.BARTModel.from_pretrained", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.model.BARTModel.hub_models"], ["x", "=", "self", ".", "classification_heads", "[", "classification_head_name", "]", "(", "\n", "sentence_representation", "\n", ")", "\n", "", "return", "x", ",", "extra", "\n", "\n", "", "@", "classmethod", "\n", "def", "from_pretrained", "(", "\n", "cls", ",", "\n", "model_name_or_path", ",", "\n", "checkpoint_file", "=", "'model.pt'", ",", "\n", "data_name_or_path", "=", "'.'", ",", "\n", "bpe", "=", "'gpt2'", ",", "\n", "**", "kwargs", ",", "\n", ")", ":", "\n", "        ", "from", "fairseq", "import", "hub_utils", "\n", "x", "=", "hub_utils", ".", "from_pretrained", "(", "\n", "model_name_or_path", ",", "\n", "checkpoint_file", ",", "\n", "data_name_or_path", ",", "\n", "archive_map", "=", "cls", ".", "hub_models", "(", ")", ",", "\n", "bpe", "=", "bpe", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.model.BARTModel.register_classification_head": [[108, 127], ["print", "model.BARTClassificationHead", "print"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], ["load_checkpoint_heads", "=", "True", ",", "\n", "**", "kwargs", ",", "\n", ")", "\n", "return", "BARTHubInterface", "(", "x", "[", "'args'", "]", ",", "x", "[", "'task'", "]", ",", "x", "[", "'models'", "]", "[", "0", "]", ")", "\n", "\n", "", "def", "register_classification_head", "(", "self", ",", "name", ",", "num_classes", "=", "None", ",", "inner_dim", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Register a classification head.\"\"\"", "\n", "logger", ".", "info", "(", "\"Registering classification head: {0}\"", ".", "format", "(", "name", ")", ")", "\n", "if", "name", "in", "self", ".", "classification_heads", ":", "\n", "            ", "prev_num_classes", "=", "self", ".", "classification_heads", "[", "name", "]", ".", "out_proj", ".", "out_features", "\n", "prev_inner_dim", "=", "self", ".", "classification_heads", "[", "name", "]", ".", "dense", ".", "out_features", "\n", "if", "num_classes", "!=", "prev_num_classes", "or", "inner_dim", "!=", "prev_inner_dim", ":", "\n", "                ", "logger", ".", "warning", "(", "\n", "'re-registering head \"{}\" with num_classes {} (prev: {}) '", "\n", "'and inner_dim {} (prev: {})'", ".", "format", "(", "\n", "name", ",", "num_classes", ",", "prev_num_classes", ",", "inner_dim", ",", "prev_inner_dim", "\n", ")", "\n", ")", "\n", "", "", "self", ".", "classification_heads", "[", "name", "]", "=", "BARTClassificationHead", "(", "\n", "self", ".", "args", ".", "encoder_embed_dim", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.model.BARTModel.upgrade_state_dict_named": [[129, 183], ["super().upgrade_state_dict_named", "state_dict.keys", "state_dict[].size", "hasattr", "model.BARTModel.classification_heads.keys", "state_dict[].size", "state_dict[].size", "getattr", "model.BARTModel.classification_heads.state_dict", "model.BARTModel.items", "hasattr", "k.startswith", "k[].split", "model.BARTModel.register_classification_head", "print", "keys_to_delete.append", "len", "print", "print", "keys_to_delete.append", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.model.BARTModel.upgrade_state_dict_named", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.lr_scheduler.fairseq_lr_scheduler.FairseqLRScheduler.state_dict", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.model.BARTModel.register_classification_head", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], ["num_classes", ",", "\n", "self", ".", "args", ".", "pooler_activation_fn", ",", "\n", "self", ".", "args", ".", "pooler_dropout", ",", "\n", ")", "\n", "\n", "", "def", "upgrade_state_dict_named", "(", "self", ",", "state_dict", ",", "name", ")", ":", "\n", "        ", "super", "(", ")", ".", "upgrade_state_dict_named", "(", "state_dict", ",", "name", ")", "\n", "\n", "prefix", "=", "name", "+", "'.'", "if", "name", "!=", "''", "else", "''", "\n", "current_head_names", "=", "[", "]", "if", "not", "hasattr", "(", "self", ",", "'classification_heads'", ")", "else", "self", ".", "classification_heads", ".", "keys", "(", ")", "\n", "\n", "# Handle new classification heads present in the state dict.", "\n", "keys_to_delete", "=", "[", "]", "\n", "for", "k", "in", "state_dict", ".", "keys", "(", ")", ":", "\n", "            ", "if", "not", "k", ".", "startswith", "(", "prefix", "+", "'classification_heads.'", ")", ":", "\n", "                ", "continue", "\n", "\n", "", "head_name", "=", "k", "[", "len", "(", "prefix", "+", "'classification_heads.'", ")", ":", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "num_classes", "=", "state_dict", "[", "prefix", "+", "'classification_heads.'", "+", "head_name", "+", "'.out_proj.weight'", "]", ".", "size", "(", "0", ")", "\n", "inner_dim", "=", "state_dict", "[", "prefix", "+", "'classification_heads.'", "+", "head_name", "+", "'.dense.weight'", "]", ".", "size", "(", "0", ")", "\n", "\n", "if", "getattr", "(", "self", ".", "args", ",", "'load_checkpoint_heads'", ",", "False", ")", ":", "\n", "                ", "if", "head_name", "not", "in", "current_head_names", ":", "\n", "                    ", "self", ".", "register_classification_head", "(", "head_name", ",", "num_classes", ",", "inner_dim", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "head_name", "not", "in", "current_head_names", ":", "\n", "                    ", "logger", ".", "warning", "(", "\n", "'deleting classification head ({}) from checkpoint '", "\n", "'not present in current model: {}'", ".", "format", "(", "head_name", ",", "k", ")", "\n", ")", "\n", "keys_to_delete", ".", "append", "(", "k", ")", "\n", "", "elif", "(", "\n", "num_classes", "!=", "self", ".", "classification_heads", "[", "head_name", "]", ".", "out_proj", ".", "out_features", "\n", "or", "inner_dim", "!=", "self", ".", "classification_heads", "[", "head_name", "]", ".", "dense", ".", "out_features", "\n", ")", ":", "\n", "                    ", "logger", ".", "warning", "(", "\n", "'deleting classification head ({}) from checkpoint '", "\n", "'with different dimensions than current model: {}'", ".", "format", "(", "head_name", ",", "k", ")", "\n", ")", "\n", "keys_to_delete", ".", "append", "(", "k", ")", "\n", "", "", "", "for", "k", "in", "keys_to_delete", ":", "\n", "            ", "del", "state_dict", "[", "k", "]", "\n", "\n", "# When finetuning on translation task, remove last row of", "\n", "# embedding matrix that corresponds to mask_idx token.", "\n", "", "loaded_dict_size", "=", "state_dict", "[", "'encoder.embed_tokens.weight'", "]", ".", "size", "(", "0", ")", "\n", "if", "loaded_dict_size", "==", "len", "(", "self", ".", "encoder", ".", "dictionary", ")", "+", "1", "and", "'<mask>'", "not", "in", "self", ".", "encoder", ".", "dictionary", ":", "\n", "            ", "state_dict", "[", "'encoder.embed_tokens.weight'", "]", "=", "state_dict", "[", "'encoder.embed_tokens.weight'", "]", "[", ":", "loaded_dict_size", "-", "1", ",", ":", "]", "\n", "state_dict", "[", "'decoder.embed_tokens.weight'", "]", "=", "state_dict", "[", "'decoder.embed_tokens.weight'", "]", "[", ":", "loaded_dict_size", "-", "1", ",", ":", "]", "\n", "\n", "# Copy any newly-added classification heads into the state dict", "\n", "# with their current weights.", "\n", "", "if", "hasattr", "(", "self", ",", "'classification_heads'", ")", ":", "\n", "            ", "cur_state", "=", "self", ".", "classification_heads", ".", "state_dict", "(", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.model.BARTClassificationHead.__init__": [[188, 201], ["torch.Module.__init__", "torch.Linear", "fairseq.utils.get_activation_fn", "torch.Dropout", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.get_activation_fn", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear"], ["\n", "\n", "", "", "", "", "", "class", "BARTClassificationHead", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"Head for sentence-level classification tasks.\"\"\"", "\n", "\n", "def", "__init__", "(", "\n", "self", ",", "\n", "input_dim", ",", "\n", "inner_dim", ",", "\n", "num_classes", ",", "\n", "activation_fn", ",", "\n", "pooler_dropout", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.model.BARTClassificationHead.forward": [[202, 210], ["model.BARTClassificationHead.dropout", "model.BARTClassificationHead.dense", "model.BARTClassificationHead.activation_fn", "model.BARTClassificationHead.dropout", "model.BARTClassificationHead.out_proj"], "methods", ["None"], ["self", ".", "dense", "=", "nn", ".", "Linear", "(", "input_dim", ",", "inner_dim", ")", "\n", "self", ".", "activation_fn", "=", "utils", ".", "get_activation_fn", "(", "activation_fn", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "pooler_dropout", ")", "\n", "self", ".", "out_proj", "=", "nn", ".", "Linear", "(", "inner_dim", ",", "num_classes", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "features", ",", "**", "kwargs", ")", ":", "\n", "        ", "x", "=", "features", "\n", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "=", "self", ".", "dense", "(", "x", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.model.bart_large_architecture": [[212, 247], ["fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture"], ["x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "x", "=", "self", ".", "out_proj", "(", "x", ")", "\n", "return", "x", "\n", "\n", "\n", "", "", "@", "register_model_architecture", "(", "'bart'", ",", "'bart_large'", ")", "\n", "def", "bart_large_architecture", "(", "args", ")", ":", "\n", "    ", "args", ".", "encoder_embed_path", "=", "getattr", "(", "args", ",", "'encoder_embed_path'", ",", "None", ")", "\n", "args", ".", "encoder_embed_dim", "=", "getattr", "(", "args", ",", "'encoder_embed_dim'", ",", "1024", ")", "\n", "args", ".", "encoder_ffn_embed_dim", "=", "getattr", "(", "args", ",", "'encoder_ffn_embed_dim'", ",", "4", "*", "1024", ")", "\n", "args", ".", "encoder_layers", "=", "getattr", "(", "args", ",", "'encoder_layers'", ",", "12", ")", "\n", "args", ".", "encoder_attention_heads", "=", "getattr", "(", "args", ",", "'encoder_attention_heads'", ",", "16", ")", "\n", "args", ".", "encoder_normalize_before", "=", "getattr", "(", "args", ",", "'encoder_normalize_before'", ",", "False", ")", "\n", "args", ".", "encoder_learned_pos", "=", "getattr", "(", "args", ",", "'encoder_learned_pos'", ",", "True", ")", "\n", "args", ".", "decoder_embed_path", "=", "getattr", "(", "args", ",", "'decoder_embed_path'", ",", "None", ")", "\n", "args", ".", "decoder_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_embed_dim'", ",", "args", ".", "encoder_embed_dim", ")", "\n", "args", ".", "decoder_ffn_embed_dim", "=", "getattr", "(", "args", ",", "'decoder_ffn_embed_dim'", ",", "args", ".", "encoder_ffn_embed_dim", ")", "\n", "args", ".", "decoder_layers", "=", "getattr", "(", "args", ",", "'decoder_layers'", ",", "12", ")", "\n", "args", ".", "decoder_attention_heads", "=", "getattr", "(", "args", ",", "'decoder_attention_heads'", ",", "16", ")", "\n", "args", ".", "decoder_normalize_before", "=", "getattr", "(", "args", ",", "'decoder_normalize_before'", ",", "False", ")", "\n", "args", ".", "decoder_learned_pos", "=", "getattr", "(", "args", ",", "'decoder_learned_pos'", ",", "True", ")", "\n", "args", ".", "attention_dropout", "=", "getattr", "(", "args", ",", "'attention_dropout'", ",", "0.", ")", "\n", "args", ".", "relu_dropout", "=", "getattr", "(", "args", ",", "'relu_dropout'", ",", "0.", ")", "\n", "args", ".", "dropout", "=", "getattr", "(", "args", ",", "'dropout'", ",", "0.1", ")", "\n", "args", ".", "max_target_positions", "=", "getattr", "(", "args", ",", "'max_target_positions'", ",", "1024", ")", "\n", "args", ".", "max_source_positions", "=", "getattr", "(", "args", ",", "'max_source_positions'", ",", "1024", ")", "\n", "args", ".", "adaptive_softmax_cutoff", "=", "getattr", "(", "args", ",", "'adaptive_softmax_cutoff'", ",", "None", ")", "\n", "args", ".", "adaptive_softmax_dropout", "=", "getattr", "(", "args", ",", "'adaptive_softmax_dropout'", ",", "0", ")", "\n", "args", ".", "share_decoder_input_output_embed", "=", "getattr", "(", "args", ",", "'share_decoder_input_output_embed'", ",", "True", ")", "\n", "args", ".", "share_all_embeddings", "=", "getattr", "(", "args", ",", "'share_all_embeddings'", ",", "True", ")", "\n", "\n", "args", ".", "decoder_output_dim", "=", "getattr", "(", "args", ",", "'decoder_output_dim'", ",", "args", ".", "decoder_embed_dim", ")", "\n", "args", ".", "decoder_input_dim", "=", "getattr", "(", "args", ",", "'decoder_input_dim'", ",", "args", ".", "decoder_embed_dim", ")", "\n", "\n", "args", ".", "no_scale_embedding", "=", "getattr", "(", "args", ",", "'no_scale_embedding'", ",", "True", ")", "\n", "args", ".", "layernorm_embedding", "=", "getattr", "(", "args", ",", "'layernorm_embedding'", ",", "True", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_transformer.NATransformerModel.allow_length_beam": [[52, 55], ["None"], "methods", ["None"], ["    ", "@", "property", "\n", "def", "allow_length_beam", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_transformer.NATransformerModel.add_args": [[56, 69], ["fairseq.models.nat.FairseqNATModel.add_args", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.add_args"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "FairseqNATModel", ".", "add_args", "(", "parser", ")", "\n", "\n", "# length prediction", "\n", "parser", ".", "add_argument", "(", "\"--src-embedding-copy\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"copy encoder word embeddings as the initial input of the decoder\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--pred-length-offset\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"predicting the length difference between the target and source sentences\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--sg-length-pred\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"stop the gradients back-propagated from the length predictor\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--length-loss-factor\"", ",", "type", "=", "float", ",", "\n", "help", "=", "\"weights on the length prediction loss\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_transformer.NATransformerModel.build_decoder": [[70, 76], ["nonautoregressive_transformer.NATransformerDecoder", "getattr", "NATransformerDecoder.apply"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "build_decoder", "(", "cls", ",", "args", ",", "tgt_dict", ",", "embed_tokens", ")", ":", "\n", "        ", "decoder", "=", "NATransformerDecoder", "(", "args", ",", "tgt_dict", ",", "embed_tokens", ")", "\n", "if", "getattr", "(", "args", ",", "\"apply_bert_init\"", ",", "False", ")", ":", "\n", "            ", "decoder", ".", "apply", "(", "init_bert_params", ")", "\n", "", "return", "decoder", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_transformer.NATransformerModel.forward": [[77, 102], ["nonautoregressive_transformer.NATransformerModel.encoder", "nonautoregressive_transformer.NATransformerModel.decoder.forward_length", "nonautoregressive_transformer.NATransformerModel.decoder.forward_length_prediction", "nonautoregressive_transformer.NATransformerModel.decoder", "tgt_tokens.ne"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqMultiModel.encoder", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_transformer.NATransformerDecoder.forward_length", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_transformer.NATransformerDecoder.forward_length_prediction", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqMultiModel.decoder"], ["", "def", "forward", "(", "\n", "self", ",", "src_tokens", ",", "src_lengths", ",", "prev_output_tokens", ",", "tgt_tokens", ",", "**", "kwargs", "\n", ")", ":", "\n", "# encoding", "\n", "        ", "encoder_out", "=", "self", ".", "encoder", "(", "src_tokens", ",", "src_lengths", "=", "src_lengths", ",", "**", "kwargs", ")", "\n", "\n", "# length prediction", "\n", "length_out", "=", "self", ".", "decoder", ".", "forward_length", "(", "normalize", "=", "False", ",", "encoder_out", "=", "encoder_out", ")", "\n", "length_tgt", "=", "self", ".", "decoder", ".", "forward_length_prediction", "(", "length_out", ",", "encoder_out", ",", "tgt_tokens", ")", "\n", "\n", "# decoding", "\n", "word_ins_out", "=", "self", ".", "decoder", "(", "\n", "normalize", "=", "False", ",", "\n", "prev_output_tokens", "=", "prev_output_tokens", ",", "\n", "encoder_out", "=", "encoder_out", ")", "\n", "\n", "return", "{", "\n", "\"word_ins\"", ":", "{", "\n", "\"out\"", ":", "word_ins_out", ",", "\"tgt\"", ":", "tgt_tokens", ",", "\n", "\"mask\"", ":", "tgt_tokens", ".", "ne", "(", "self", ".", "pad", ")", ",", "\"ls\"", ":", "self", ".", "args", ".", "label_smoothing", ",", "\n", "\"nll_loss\"", ":", "True", "\n", "}", ",", "\n", "\"length\"", ":", "{", "\n", "\"out\"", ":", "length_out", ",", "\"tgt\"", ":", "length_tgt", ",", "\n", "\"factor\"", ":", "self", ".", "decoder", ".", "length_loss_factor", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_transformer.NATransformerModel.forward_decoder": [[105, 130], ["output_tokens.ne", "nonautoregressive_transformer.NATransformerModel.decoder().max", "output_tokens.masked_scatter_", "output_scores.masked_scatter_", "decoder_out._replace", "history.append", "nonautoregressive_transformer.NATransformerModel.decoder", "output_tokens.clone"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqMultiModel.decoder"], ["", "def", "forward_decoder", "(", "self", ",", "decoder_out", ",", "encoder_out", ",", "decoding_format", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "step", "=", "decoder_out", ".", "step", "\n", "output_tokens", "=", "decoder_out", ".", "output_tokens", "\n", "output_scores", "=", "decoder_out", ".", "output_scores", "\n", "history", "=", "decoder_out", ".", "history", "\n", "\n", "# execute the decoder", "\n", "output_masks", "=", "output_tokens", ".", "ne", "(", "self", ".", "pad", ")", "\n", "_scores", ",", "_tokens", "=", "self", ".", "decoder", "(", "\n", "normalize", "=", "True", ",", "\n", "prev_output_tokens", "=", "output_tokens", ",", "\n", "encoder_out", "=", "encoder_out", ",", "\n", "step", "=", "step", ",", "\n", ")", ".", "max", "(", "-", "1", ")", "\n", "\n", "output_tokens", ".", "masked_scatter_", "(", "output_masks", ",", "_tokens", "[", "output_masks", "]", ")", "\n", "output_scores", ".", "masked_scatter_", "(", "output_masks", ",", "_scores", "[", "output_masks", "]", ")", "\n", "if", "history", "is", "not", "None", ":", "\n", "            ", "history", ".", "append", "(", "output_tokens", ".", "clone", "(", ")", ")", "\n", "\n", "", "return", "decoder_out", ".", "_replace", "(", "\n", "output_tokens", "=", "output_tokens", ",", "\n", "output_scores", "=", "output_scores", ",", "\n", "attn", "=", "None", ",", "\n", "history", "=", "history", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_transformer.NATransformerModel.initialize_output_tokens": [[132, 162], ["nonautoregressive_transformer.NATransformerModel.decoder.forward_length_prediction", "nonautoregressive_transformer.NATransformerModel.clamp_().max", "fairseq.utils.new_arange", "src_tokens.new_zeros().fill_", "src_tokens.new_zeros().fill_.masked_fill_", "src_tokens.new_zeros().fill_.scatter_", "src_tokens.new_zeros().fill_.new_zeros().type_as", "fairseq.iterative_refinement_generator.DecoderOut", "nonautoregressive_transformer.NATransformerModel.decoder.forward_length", "nonautoregressive_transformer.NATransformerModel.clamp_", "src_tokens.new_zeros", "src_tokens.new_zeros().fill_.new_zeros", "src_tokens.size", "src_tokens.new_zeros().fill_.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_transformer.NATransformerDecoder.forward_length_prediction", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.new_arange", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_transformer.NATransformerDecoder.forward_length", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "initialize_output_tokens", "(", "self", ",", "encoder_out", ",", "src_tokens", ")", ":", "\n", "# length prediction", "\n", "        ", "length_tgt", "=", "self", ".", "decoder", ".", "forward_length_prediction", "(", "\n", "self", ".", "decoder", ".", "forward_length", "(", "normalize", "=", "True", ",", "encoder_out", "=", "encoder_out", ")", ",", "\n", "encoder_out", "=", "encoder_out", "\n", ")", "\n", "\n", "max_length", "=", "length_tgt", ".", "clamp_", "(", "min", "=", "2", ")", ".", "max", "(", ")", "\n", "idx_length", "=", "utils", ".", "new_arange", "(", "src_tokens", ",", "max_length", ")", "\n", "\n", "initial_output_tokens", "=", "src_tokens", ".", "new_zeros", "(", "\n", "src_tokens", ".", "size", "(", "0", ")", ",", "max_length", "\n", ")", ".", "fill_", "(", "self", ".", "pad", ")", "\n", "initial_output_tokens", ".", "masked_fill_", "(", "\n", "idx_length", "[", "None", ",", ":", "]", "<", "length_tgt", "[", ":", ",", "None", "]", ",", "self", ".", "unk", "\n", ")", "\n", "initial_output_tokens", "[", ":", ",", "0", "]", "=", "self", ".", "bos", "\n", "initial_output_tokens", ".", "scatter_", "(", "1", ",", "length_tgt", "[", ":", ",", "None", "]", "-", "1", ",", "self", ".", "eos", ")", "\n", "\n", "initial_output_scores", "=", "initial_output_tokens", ".", "new_zeros", "(", "\n", "*", "initial_output_tokens", ".", "size", "(", ")", "\n", ")", ".", "type_as", "(", "encoder_out", ".", "encoder_out", ")", "\n", "\n", "return", "DecoderOut", "(", "\n", "output_tokens", "=", "initial_output_tokens", ",", "\n", "output_scores", "=", "initial_output_scores", ",", "\n", "attn", "=", "None", ",", "\n", "step", "=", "0", ",", "\n", "max_step", "=", "0", ",", "\n", "history", "=", "None", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_transformer.NATransformerModel.regenerate_length_beam": [[164, 188], ["output_tokens.ne().sum", "length_tgt.view().clamp_.view().clamp_.view().clamp_", "length_tgt.view().clamp_.view().clamp_.max", "fairseq.utils.new_arange", "output_tokens.new_zeros().fill_", "output_tokens.new_zeros().fill_.masked_fill_", "output_tokens.new_zeros().fill_.scatter_", "output_tokens.new_zeros().fill_.new_zeros().type_as", "decoder_out._replace", "output_tokens.ne", "fairseq.utils.new_arange", "length_tgt.view().clamp_.view().clamp_.view", "output_tokens.new_zeros", "output_tokens.new_zeros().fill_.new_zeros", "length_tgt.view().clamp_.view().clamp_.size", "output_tokens.new_zeros().fill_.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.new_arange", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.new_arange", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "regenerate_length_beam", "(", "self", ",", "decoder_out", ",", "beam_size", ")", ":", "\n", "        ", "output_tokens", "=", "decoder_out", ".", "output_tokens", "\n", "length_tgt", "=", "output_tokens", ".", "ne", "(", "self", ".", "pad", ")", ".", "sum", "(", "1", ")", "\n", "length_tgt", "=", "length_tgt", "[", ":", ",", "None", "]", "+", "utils", ".", "new_arange", "(", "length_tgt", ",", "1", ",", "beam_size", ")", "-", "beam_size", "//", "2", "\n", "length_tgt", "=", "length_tgt", ".", "view", "(", "-", "1", ")", ".", "clamp_", "(", "min", "=", "2", ")", "\n", "max_length", "=", "length_tgt", ".", "max", "(", ")", "\n", "idx_length", "=", "utils", ".", "new_arange", "(", "length_tgt", ",", "max_length", ")", "\n", "\n", "initial_output_tokens", "=", "output_tokens", ".", "new_zeros", "(", "\n", "length_tgt", ".", "size", "(", "0", ")", ",", "max_length", "\n", ")", ".", "fill_", "(", "self", ".", "pad", ")", "\n", "initial_output_tokens", ".", "masked_fill_", "(", "\n", "idx_length", "[", "None", ",", ":", "]", "<", "length_tgt", "[", ":", ",", "None", "]", ",", "self", ".", "unk", "\n", ")", "\n", "initial_output_tokens", "[", ":", ",", "0", "]", "=", "self", ".", "bos", "\n", "initial_output_tokens", ".", "scatter_", "(", "1", ",", "length_tgt", "[", ":", ",", "None", "]", "-", "1", ",", "self", ".", "eos", ")", "\n", "\n", "initial_output_scores", "=", "initial_output_tokens", ".", "new_zeros", "(", "\n", "*", "initial_output_tokens", ".", "size", "(", ")", "\n", ")", ".", "type_as", "(", "decoder_out", ".", "output_scores", ")", "\n", "\n", "return", "decoder_out", ".", "_replace", "(", "\n", "output_tokens", "=", "initial_output_tokens", ",", "\n", "output_scores", "=", "initial_output_scores", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_transformer.NATransformerDecoder.__init__": [[192, 207], ["fairseq.models.nat.FairseqNATDecoder.__init__", "dictionary.bos", "dictionary.unk", "dictionary.eos", "getattr", "getattr", "getattr", "getattr", "fairseq.models.transformer.Embedding"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.bos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.unk", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.Embedding"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "dictionary", ",", "embed_tokens", ",", "no_encoder_attn", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "args", ",", "dictionary", ",", "embed_tokens", ",", "no_encoder_attn", "=", "no_encoder_attn", "\n", ")", "\n", "self", ".", "dictionary", "=", "dictionary", "\n", "self", ".", "bos", "=", "dictionary", ".", "bos", "(", ")", "\n", "self", ".", "unk", "=", "dictionary", ".", "unk", "(", ")", "\n", "self", ".", "eos", "=", "dictionary", ".", "eos", "(", ")", "\n", "\n", "self", ".", "encoder_embed_dim", "=", "args", ".", "encoder_embed_dim", "\n", "self", ".", "sg_length_pred", "=", "getattr", "(", "args", ",", "\"sg_length_pred\"", ",", "False", ")", "\n", "self", ".", "pred_length_offset", "=", "getattr", "(", "args", ",", "\"pred_length_offset\"", ",", "False", ")", "\n", "self", ".", "length_loss_factor", "=", "getattr", "(", "args", ",", "\"length_loss_factor\"", ",", "0.1", ")", "\n", "self", ".", "src_embedding_copy", "=", "getattr", "(", "args", ",", "\"src_embedding_copy\"", ",", "False", ")", "\n", "self", ".", "embed_length", "=", "Embedding", "(", "256", ",", "self", ".", "encoder_embed_dim", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_transformer.NATransformerDecoder.forward": [[208, 217], ["nonautoregressive_transformer.NATransformerDecoder.extract_features", "nonautoregressive_transformer.NATransformerDecoder.output_layer", "torch.log_softmax", "torch.log_softmax"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_transformer.LevenshteinTransformerDecoder.extract_features", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.TransformerDecoder.output_layer", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax"], ["", "@", "ensemble_decoder", "\n", "def", "forward", "(", "self", ",", "normalize", ",", "encoder_out", ",", "prev_output_tokens", ",", "step", "=", "0", ",", "**", "unused", ")", ":", "\n", "        ", "features", ",", "_", "=", "self", ".", "extract_features", "(", "\n", "prev_output_tokens", ",", "\n", "encoder_out", "=", "encoder_out", ",", "\n", "embedding_copy", "=", "(", "step", "==", "0", ")", "&", "self", ".", "src_embedding_copy", ",", "\n", ")", "\n", "decoder_out", "=", "self", ".", "output_layer", "(", "features", ")", "\n", "return", "F", ".", "log_softmax", "(", "decoder_out", ",", "-", "1", ")", "if", "normalize", "else", "decoder_out", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_transformer.NATransformerDecoder.forward_length": [[218, 227], ["nonautoregressive_transformer._mean_pooling", "torch.linear", "torch.linear", "enc_feats.detach.detach.detach", "torch.log_softmax", "torch.log_softmax"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_transformer._mean_pooling", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax"], ["", "@", "ensemble_decoder", "\n", "def", "forward_length", "(", "self", ",", "normalize", ",", "encoder_out", ")", ":", "\n", "        ", "enc_feats", "=", "encoder_out", ".", "encoder_out", "# T x B x C", "\n", "src_masks", "=", "encoder_out", ".", "encoder_padding_mask", "# B x T or None", "\n", "enc_feats", "=", "_mean_pooling", "(", "enc_feats", ",", "src_masks", ")", "\n", "if", "self", ".", "sg_length_pred", ":", "\n", "            ", "enc_feats", "=", "enc_feats", ".", "detach", "(", ")", "\n", "", "length_out", "=", "F", ".", "linear", "(", "enc_feats", ",", "self", ".", "embed_length", ".", "weight", ")", "\n", "return", "F", ".", "log_softmax", "(", "length_out", ",", "-", "1", ")", "if", "normalize", "else", "length_out", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_transformer.NATransformerDecoder.extract_features": [[228, 301], ["nonautoregressive_transformer.NATransformerDecoder.transpose", "enumerate", "nonautoregressive_transformer.NATransformerDecoder.transpose", "nonautoregressive_transformer.NATransformerDecoder.forward_embedding", "nonautoregressive_transformer.NATransformerDecoder.forward_embedding", "layer", "inner_states.append", "nonautoregressive_transformer.NATransformerDecoder.layer_norm", "nonautoregressive_transformer.NATransformerDecoder.project_out_dim", "prev_output_tokens.new_ones().bool", "nonautoregressive_transformer.NATransformerDecoder.forward_copying_source", "prev_output_tokens.ne", "prev_output_tokens.new_ones", "src_embd.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_transformer.NATransformerDecoder.forward_embedding", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_transformer.NATransformerDecoder.forward_embedding", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_transformer.NATransformerDecoder.forward_copying_source", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "extract_features", "(", "\n", "self", ",", "\n", "prev_output_tokens", ",", "\n", "encoder_out", "=", "None", ",", "\n", "early_exit", "=", "None", ",", "\n", "embedding_copy", "=", "False", ",", "\n", "**", "unused", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Similar to *forward* but only return features.\n\n        Inputs:\n            prev_output_tokens: Tensor(B, T)\n            encoder_out: a dictionary of hidden states and masks\n\n        Returns:\n            tuple:\n                - the decoder's features of shape `(batch, tgt_len, embed_dim)`\n                - a dictionary with any model-specific outputs\n            the LevenshteinTransformer decoder has full-attention to all generated tokens\n        \"\"\"", "\n", "# embedding", "\n", "if", "embedding_copy", ":", "\n", "            ", "src_embd", "=", "encoder_out", ".", "encoder_embedding", "\n", "src_mask", "=", "encoder_out", ".", "encoder_padding_mask", "\n", "src_mask", "=", "(", "\n", "~", "src_mask", "\n", "if", "src_mask", "is", "not", "None", "\n", "else", "prev_output_tokens", ".", "new_ones", "(", "*", "src_embd", ".", "size", "(", ")", "[", ":", "2", "]", ")", ".", "bool", "(", ")", "\n", ")", "\n", "\n", "x", ",", "decoder_padding_mask", "=", "self", ".", "forward_embedding", "(", "\n", "prev_output_tokens", ",", "\n", "self", ".", "forward_copying_source", "(", "\n", "src_embd", ",", "src_mask", ",", "prev_output_tokens", ".", "ne", "(", "self", ".", "padding_idx", ")", "\n", ")", ",", "\n", ")", "\n", "\n", "", "else", ":", "\n", "\n", "            ", "x", ",", "decoder_padding_mask", "=", "self", ".", "forward_embedding", "(", "prev_output_tokens", ")", "\n", "\n", "# B x T x C -> T x B x C", "\n", "", "x", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", "\n", "attn", "=", "None", "\n", "inner_states", "=", "[", "x", "]", "\n", "\n", "# decoder layers", "\n", "for", "i", ",", "layer", "in", "enumerate", "(", "self", ".", "layers", ")", ":", "\n", "\n", "# early exit from the decoder.", "\n", "            ", "if", "(", "early_exit", "is", "not", "None", ")", "and", "(", "i", ">=", "early_exit", ")", ":", "\n", "                ", "break", "\n", "\n", "", "x", ",", "attn", ",", "_", "=", "layer", "(", "\n", "x", ",", "\n", "encoder_out", ".", "encoder_out", "if", "encoder_out", "is", "not", "None", "else", "None", ",", "\n", "encoder_out", ".", "encoder_padding_mask", "if", "encoder_out", "is", "not", "None", "else", "None", ",", "\n", "self_attn_mask", "=", "None", ",", "\n", "self_attn_padding_mask", "=", "decoder_padding_mask", ",", "\n", ")", "\n", "inner_states", ".", "append", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "layer_norm", ":", "\n", "            ", "x", "=", "self", ".", "layer_norm", "(", "x", ")", "\n", "\n", "# T x B x C -> B x T x C", "\n", "", "x", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "if", "self", ".", "project_out_dim", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "project_out_dim", "(", "x", ")", "\n", "\n", "", "return", "x", ",", "{", "\"attn\"", ":", "attn", ",", "\"inner_states\"", ":", "inner_states", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_transformer.NATransformerDecoder.forward_embedding": [[302, 323], ["torch.dropout", "torch.dropout", "prev_output_tokens.eq", "nonautoregressive_transformer.NATransformerDecoder.embed_positions", "nonautoregressive_transformer.NATransformerDecoder.embed_tokens", "nonautoregressive_transformer.NATransformerDecoder.project_in_dim"], "methods", ["None"], ["", "def", "forward_embedding", "(", "self", ",", "prev_output_tokens", ",", "states", "=", "None", ")", ":", "\n", "# embed positions", "\n", "        ", "positions", "=", "(", "\n", "self", ".", "embed_positions", "(", "prev_output_tokens", ")", "\n", "if", "self", ".", "embed_positions", "is", "not", "None", "\n", "else", "None", "\n", ")", "\n", "\n", "# embed tokens and positions", "\n", "if", "states", "is", "None", ":", "\n", "            ", "x", "=", "self", ".", "embed_scale", "*", "self", ".", "embed_tokens", "(", "prev_output_tokens", ")", "\n", "if", "self", ".", "project_in_dim", "is", "not", "None", ":", "\n", "                ", "x", "=", "self", ".", "project_in_dim", "(", "x", ")", "\n", "", "", "else", ":", "\n", "            ", "x", "=", "states", "\n", "\n", "", "if", "positions", "is", "not", "None", ":", "\n", "            ", "x", "+=", "positions", "\n", "", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "decoder_padding_mask", "=", "prev_output_tokens", ".", "eq", "(", "self", ".", "padding_idx", ")", "\n", "return", "x", ",", "decoder_padding_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_transformer.NATransformerDecoder.forward_copying_source": [[324, 338], ["src_masks.sum", "tgt_masks.sum", "_uniform_assignment().masked_fill", "torch.gather", "torch.gather", "torch.gather", "torch.gather", "_uniform_assignment().masked_fill.unsqueeze().expand", "nonautoregressive_transformer._uniform_assignment", "src_embeds.size", "_uniform_assignment().masked_fill.unsqueeze", "_uniform_assignment().masked_fill.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_transformer._uniform_assignment", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "forward_copying_source", "(", "self", ",", "src_embeds", ",", "src_masks", ",", "tgt_masks", ")", ":", "\n", "        ", "length_sources", "=", "src_masks", ".", "sum", "(", "1", ")", "\n", "length_targets", "=", "tgt_masks", ".", "sum", "(", "1", ")", "\n", "mapped_inputs", "=", "_uniform_assignment", "(", "length_sources", ",", "length_targets", ")", ".", "masked_fill", "(", "\n", "~", "tgt_masks", ",", "0", "\n", ")", "\n", "copied_embedding", "=", "torch", ".", "gather", "(", "\n", "src_embeds", ",", "\n", "1", ",", "\n", "mapped_inputs", ".", "unsqueeze", "(", "-", "1", ")", ".", "expand", "(", "\n", "*", "mapped_inputs", ".", "size", "(", ")", ",", "src_embeds", ".", "size", "(", "-", "1", ")", "\n", ")", ",", "\n", ")", "\n", "return", "copied_embedding", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_transformer.NATransformerDecoder.forward_length_prediction": [[339, 370], ["enc_feats.new_ones().fill_.long", "tgt_tokens.ne().sum().long", "length_tgt.clamp.clamp.clamp", "enc_feats.new_ones().fill_", "length_out.max", "enc_feats.size", "tgt_tokens.ne().sum", "enc_feats.new_ones", "enc_feats.size", "tgt_tokens.ne"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "forward_length_prediction", "(", "self", ",", "length_out", ",", "encoder_out", ",", "tgt_tokens", "=", "None", ")", ":", "\n", "        ", "enc_feats", "=", "encoder_out", ".", "encoder_out", "# T x B x C", "\n", "src_masks", "=", "encoder_out", ".", "encoder_padding_mask", "# B x T or None", "\n", "if", "self", ".", "pred_length_offset", ":", "\n", "            ", "if", "src_masks", "is", "None", ":", "\n", "                ", "src_lengs", "=", "enc_feats", ".", "new_ones", "(", "enc_feats", ".", "size", "(", "1", ")", ")", ".", "fill_", "(", "\n", "enc_feats", ".", "size", "(", "0", ")", "\n", ")", "\n", "", "else", ":", "\n", "                ", "src_lengs", "=", "(", "~", "src_masks", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "type_as", "(", "enc_feats", ")", ".", "sum", "(", "0", ")", "\n", "", "src_lengs", "=", "src_lengs", ".", "long", "(", ")", "\n", "\n", "", "if", "tgt_tokens", "is", "not", "None", ":", "\n", "# obtain the length target", "\n", "            ", "tgt_lengs", "=", "tgt_tokens", ".", "ne", "(", "self", ".", "padding_idx", ")", ".", "sum", "(", "1", ")", ".", "long", "(", ")", "\n", "if", "self", ".", "pred_length_offset", ":", "\n", "                ", "length_tgt", "=", "tgt_lengs", "-", "src_lengs", "+", "128", "\n", "", "else", ":", "\n", "                ", "length_tgt", "=", "tgt_lengs", "\n", "", "length_tgt", "=", "length_tgt", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "255", ")", "\n", "\n", "", "else", ":", "\n", "# predict the length target (greedy for now)", "\n", "# TODO: implementing length-beam", "\n", "            ", "pred_lengs", "=", "length_out", ".", "max", "(", "-", "1", ")", "[", "1", "]", "\n", "if", "self", ".", "pred_length_offset", ":", "\n", "                ", "length_tgt", "=", "pred_lengs", "-", "128", "+", "src_lengs", "\n", "", "else", ":", "\n", "                ", "length_tgt", "=", "pred_lengs", "\n", "\n", "", "", "return", "length_tgt", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_transformer._mean_pooling": [[22, 33], ["enc_feats.mean.mean", "src_masks.sum"], "function", ["None"], ["def", "_mean_pooling", "(", "enc_feats", ",", "src_masks", ")", ":", "\n", "# enc_feats: T x B x C", "\n", "# src_masks: B x T or None", "\n", "    ", "if", "src_masks", "is", "None", ":", "\n", "        ", "enc_feats", "=", "enc_feats", ".", "mean", "(", "0", ")", "\n", "", "else", ":", "\n", "        ", "src_masks", "=", "(", "~", "src_masks", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "type_as", "(", "enc_feats", ")", "\n", "enc_feats", "=", "(", "\n", "(", "enc_feats", "/", "src_masks", ".", "sum", "(", "0", ")", "[", "None", ",", ":", ",", "None", "]", ")", "*", "src_masks", "[", ":", ",", ":", ",", "None", "]", "\n", ")", ".", "sum", "(", "0", ")", "\n", "", "return", "enc_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_transformer._argmax": [[35, 37], ["x.max"], "function", ["None"], ["", "def", "_argmax", "(", "x", ",", "dim", ")", ":", "\n", "    ", "return", "(", "x", "==", "x", ".", "max", "(", "dim", ",", "keepdim", "=", "True", ")", "[", "0", "]", ")", ".", "type_as", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_transformer._uniform_assignment": [[39, 47], ["trg_lens.max", "fairseq.utils.new_arange().float", "torch.round().long().detach", "torch.round().long().detach", "src_lens.float", "trg_lens.float", "fairseq.utils.new_arange", "torch.round().long", "torch.round().long", "torch.round", "torch.round"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.new_arange"], ["", "def", "_uniform_assignment", "(", "src_lens", ",", "trg_lens", ")", ":", "\n", "    ", "max_trg_len", "=", "trg_lens", ".", "max", "(", ")", "\n", "steps", "=", "(", "src_lens", ".", "float", "(", ")", "-", "1", ")", "/", "(", "trg_lens", ".", "float", "(", ")", "-", "1", ")", "# step-size", "\n", "# max_trg_len", "\n", "index_t", "=", "utils", ".", "new_arange", "(", "trg_lens", ",", "max_trg_len", ")", ".", "float", "(", ")", "\n", "index_t", "=", "steps", "[", ":", ",", "None", "]", "*", "index_t", "[", "None", ",", ":", "]", "# batch_size X max_trg_len", "\n", "index_t", "=", "torch", ".", "round", "(", "index_t", ")", ".", "long", "(", ")", ".", "detach", "(", ")", "\n", "return", "index_t", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_transformer.base_architecture": [[372, 418], ["fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture"], ["", "", "@", "register_model_architecture", "(", "\n", "\"nonautoregressive_transformer\"", ",", "\"nonautoregressive_transformer\"", "\n", ")", "\n", "def", "base_architecture", "(", "args", ")", ":", "\n", "    ", "args", ".", "encoder_embed_path", "=", "getattr", "(", "args", ",", "\"encoder_embed_path\"", ",", "None", ")", "\n", "args", ".", "encoder_embed_dim", "=", "getattr", "(", "args", ",", "\"encoder_embed_dim\"", ",", "512", ")", "\n", "args", ".", "encoder_ffn_embed_dim", "=", "getattr", "(", "args", ",", "\"encoder_ffn_embed_dim\"", ",", "2048", ")", "\n", "args", ".", "encoder_layers", "=", "getattr", "(", "args", ",", "\"encoder_layers\"", ",", "6", ")", "\n", "args", ".", "encoder_attention_heads", "=", "getattr", "(", "args", ",", "\"encoder_attention_heads\"", ",", "8", ")", "\n", "args", ".", "encoder_normalize_before", "=", "getattr", "(", "args", ",", "\"encoder_normalize_before\"", ",", "False", ")", "\n", "args", ".", "encoder_learned_pos", "=", "getattr", "(", "args", ",", "\"encoder_learned_pos\"", ",", "False", ")", "\n", "args", ".", "decoder_embed_path", "=", "getattr", "(", "args", ",", "\"decoder_embed_path\"", ",", "None", ")", "\n", "args", ".", "decoder_embed_dim", "=", "getattr", "(", "args", ",", "\"decoder_embed_dim\"", ",", "args", ".", "encoder_embed_dim", ")", "\n", "args", ".", "decoder_ffn_embed_dim", "=", "getattr", "(", "\n", "args", ",", "\"decoder_ffn_embed_dim\"", ",", "args", ".", "encoder_ffn_embed_dim", "\n", ")", "\n", "args", ".", "decoder_layers", "=", "getattr", "(", "args", ",", "\"decoder_layers\"", ",", "6", ")", "\n", "args", ".", "decoder_attention_heads", "=", "getattr", "(", "args", ",", "\"decoder_attention_heads\"", ",", "8", ")", "\n", "args", ".", "decoder_normalize_before", "=", "getattr", "(", "args", ",", "\"decoder_normalize_before\"", ",", "False", ")", "\n", "args", ".", "decoder_learned_pos", "=", "getattr", "(", "args", ",", "\"decoder_learned_pos\"", ",", "False", ")", "\n", "args", ".", "attention_dropout", "=", "getattr", "(", "args", ",", "\"attention_dropout\"", ",", "0.0", ")", "\n", "args", ".", "activation_dropout", "=", "getattr", "(", "args", ",", "\"activation_dropout\"", ",", "0.0", ")", "\n", "args", ".", "activation_fn", "=", "getattr", "(", "args", ",", "\"activation_fn\"", ",", "\"relu\"", ")", "\n", "args", ".", "dropout", "=", "getattr", "(", "args", ",", "\"dropout\"", ",", "0.1", ")", "\n", "args", ".", "adaptive_softmax_cutoff", "=", "getattr", "(", "args", ",", "\"adaptive_softmax_cutoff\"", ",", "None", ")", "\n", "args", ".", "adaptive_softmax_dropout", "=", "getattr", "(", "args", ",", "\"adaptive_softmax_dropout\"", ",", "0", ")", "\n", "args", ".", "share_decoder_input_output_embed", "=", "getattr", "(", "\n", "args", ",", "\"share_decoder_input_output_embed\"", ",", "False", "\n", ")", "\n", "args", ".", "share_all_embeddings", "=", "getattr", "(", "args", ",", "\"share_all_embeddings\"", ",", "False", ")", "\n", "args", ".", "no_token_positional_embeddings", "=", "getattr", "(", "\n", "args", ",", "\"no_token_positional_embeddings\"", ",", "False", "\n", ")", "\n", "args", ".", "adaptive_input", "=", "getattr", "(", "args", ",", "\"adaptive_input\"", ",", "False", ")", "\n", "args", ".", "apply_bert_init", "=", "getattr", "(", "args", ",", "\"apply_bert_init\"", ",", "False", ")", "\n", "\n", "args", ".", "decoder_output_dim", "=", "getattr", "(", "\n", "args", ",", "\"decoder_output_dim\"", ",", "args", ".", "decoder_embed_dim", "\n", ")", "\n", "args", ".", "decoder_input_dim", "=", "getattr", "(", "args", ",", "\"decoder_input_dim\"", ",", "args", ".", "decoder_embed_dim", ")", "\n", "\n", "# --- special arguments ---", "\n", "args", ".", "sg_length_pred", "=", "getattr", "(", "args", ",", "\"sg_length_pred\"", ",", "False", ")", "\n", "args", ".", "pred_length_offset", "=", "getattr", "(", "args", ",", "\"pred_length_offset\"", ",", "False", ")", "\n", "args", ".", "length_loss_factor", "=", "getattr", "(", "args", ",", "\"length_loss_factor\"", ",", "0.1", ")", "\n", "args", ".", "src_embedding_copy", "=", "getattr", "(", "args", ",", "\"src_embedding_copy\"", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_transformer.nonautoregressive_transformer_wmt_en_de": [[420, 425], ["fairseq.models.register_model_architecture", "nonautoregressive_transformer.base_architecture"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.base_architecture"], ["", "@", "register_model_architecture", "(", "\n", "\"nonautoregressive_transformer\"", ",", "\"nonautoregressive_transformer_wmt_en_de\"", "\n", ")", "\n", "def", "nonautoregressive_transformer_wmt_en_de", "(", "args", ")", ":", "\n", "    ", "base_architecture", "(", "args", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nat_crf_transformer.NACRFTransformerModel.__init__": [[14, 20], ["fairseq.models.nat.NATransformerModel.__init__", "fairseq.modules.DynamicCRF", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "encoder", ",", "decoder", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "encoder", ",", "decoder", ")", "\n", "self", ".", "crf_layer", "=", "DynamicCRF", "(", "\n", "num_embedding", "=", "len", "(", "self", ".", "tgt_dict", ")", ",", "\n", "low_rank", "=", "args", ".", "crf_lowrank_approx", ",", "\n", "beam_size", "=", "args", ".", "crf_beam_approx", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nat_crf_transformer.NACRFTransformerModel.allow_ensemble": [[22, 25], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "allow_ensemble", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nat_crf_transformer.NACRFTransformerModel.add_args": [[26, 35], ["fairseq.models.nat.NATransformerModel.add_args", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.add_args"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "NATransformerModel", ".", "add_args", "(", "parser", ")", "\n", "parser", ".", "add_argument", "(", "\"--crf-lowrank-approx\"", ",", "type", "=", "int", ",", "\n", "help", "=", "\"the dimension of low-rank approximation of transition\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--crf-beam-approx\"", ",", "type", "=", "int", ",", "\n", "help", "=", "\"the beam size for apporixmating the normalizing factor\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--word-ins-loss-factor\"", ",", "type", "=", "float", ",", "\n", "help", "=", "\"weights on NAT loss used to co-training with CRF loss.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nat_crf_transformer.NACRFTransformerModel.forward": [[36, 69], ["nat_crf_transformer.NACRFTransformerModel.encoder", "nat_crf_transformer.NACRFTransformerModel.decoder.forward_length", "nat_crf_transformer.NACRFTransformerModel.decoder.forward_length_prediction", "nat_crf_transformer.NACRFTransformerModel.decoder", "tgt_tokens.ne", "nat_crf_transformer.NACRFTransformerModel.crf_layer", "word_ins_mask.type_as().sum", "word_ins_mask.type_as"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqMultiModel.encoder", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_transformer.NATransformerDecoder.forward_length", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_transformer.NATransformerDecoder.forward_length_prediction", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqMultiModel.decoder"], ["", "def", "forward", "(", "\n", "self", ",", "src_tokens", ",", "src_lengths", ",", "prev_output_tokens", ",", "tgt_tokens", ",", "**", "kwargs", "\n", ")", ":", "\n", "# encoding", "\n", "        ", "encoder_out", "=", "self", ".", "encoder", "(", "src_tokens", ",", "src_lengths", "=", "src_lengths", ",", "**", "kwargs", ")", "\n", "\n", "# length prediction", "\n", "length_out", "=", "self", ".", "decoder", ".", "forward_length", "(", "normalize", "=", "False", ",", "encoder_out", "=", "encoder_out", ")", "\n", "length_tgt", "=", "self", ".", "decoder", ".", "forward_length_prediction", "(", "length_out", ",", "encoder_out", ",", "tgt_tokens", ")", "\n", "\n", "# decoding", "\n", "word_ins_out", "=", "self", ".", "decoder", "(", "\n", "normalize", "=", "False", ",", "\n", "prev_output_tokens", "=", "prev_output_tokens", ",", "\n", "encoder_out", "=", "encoder_out", ")", "\n", "word_ins_tgt", ",", "word_ins_mask", "=", "tgt_tokens", ",", "tgt_tokens", ".", "ne", "(", "self", ".", "pad", ")", "\n", "\n", "# compute the log-likelihood of CRF", "\n", "crf_nll", "=", "-", "self", ".", "crf_layer", "(", "word_ins_out", ",", "word_ins_tgt", ",", "word_ins_mask", ")", "\n", "crf_nll", "=", "(", "crf_nll", "/", "word_ins_mask", ".", "type_as", "(", "crf_nll", ")", ".", "sum", "(", "-", "1", ")", ")", ".", "mean", "(", ")", "\n", "\n", "return", "{", "\n", "\"word_ins\"", ":", "{", "\n", "\"out\"", ":", "word_ins_out", ",", "\"tgt\"", ":", "word_ins_tgt", ",", "\n", "\"mask\"", ":", "word_ins_mask", ",", "\"ls\"", ":", "self", ".", "args", ".", "label_smoothing", ",", "\n", "\"nll_loss\"", ":", "True", ",", "\"factor\"", ":", "self", ".", "args", ".", "word_ins_loss_factor", "\n", "}", ",", "\n", "\"word_crf\"", ":", "{", "\n", "\"loss\"", ":", "crf_nll", "\n", "}", ",", "\n", "\"length\"", ":", "{", "\n", "\"out\"", ":", "length_out", ",", "\"tgt\"", ":", "length_tgt", ",", "\n", "\"factor\"", ":", "self", ".", "decoder", ".", "length_loss_factor", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nat_crf_transformer.NACRFTransformerModel.forward_decoder": [[72, 97], ["output_tokens.ne", "nat_crf_transformer.NACRFTransformerModel.decoder", "nat_crf_transformer.NACRFTransformerModel.crf_layer.forward_decoder", "output_tokens.masked_scatter_", "output_scores.masked_scatter_", "decoder_out._replace", "history.append", "output_tokens.clone"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqMultiModel.decoder", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles.EnsembleLevT.forward_decoder"], ["", "def", "forward_decoder", "(", "self", ",", "decoder_out", ",", "encoder_out", ",", "decoding_format", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "        ", "output_tokens", "=", "decoder_out", ".", "output_tokens", "\n", "output_scores", "=", "decoder_out", ".", "output_scores", "\n", "history", "=", "decoder_out", ".", "history", "\n", "\n", "# execute the decoder and get emission scores", "\n", "output_masks", "=", "output_tokens", ".", "ne", "(", "self", ".", "pad", ")", "\n", "word_ins_out", "=", "self", ".", "decoder", "(", "\n", "normalize", "=", "False", ",", "\n", "prev_output_tokens", "=", "output_tokens", ",", "\n", "encoder_out", "=", "encoder_out", "\n", ")", "\n", "\n", "# run viterbi decoding through CRF", "\n", "_scores", ",", "_tokens", "=", "self", ".", "crf_layer", ".", "forward_decoder", "(", "word_ins_out", ",", "output_masks", ")", "\n", "output_tokens", ".", "masked_scatter_", "(", "output_masks", ",", "_tokens", "[", "output_masks", "]", ")", "\n", "output_scores", ".", "masked_scatter_", "(", "output_masks", ",", "_scores", "[", "output_masks", "]", ")", "\n", "if", "history", "is", "not", "None", ":", "\n", "            ", "history", ".", "append", "(", "output_tokens", ".", "clone", "(", ")", ")", "\n", "\n", "", "return", "decoder_out", ".", "_replace", "(", "\n", "output_tokens", "=", "output_tokens", ",", "\n", "output_scores", "=", "output_scores", ",", "\n", "attn", "=", "None", ",", "\n", "history", "=", "history", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nat_crf_transformer.nacrf_base_architecture": [[100, 108], ["fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "fairseq.models.nat.base_architecture"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.base_architecture"], ["", "", "@", "register_model_architecture", "(", "\"nacrf_transformer\"", ",", "\"nacrf_transformer\"", ")", "\n", "def", "nacrf_base_architecture", "(", "args", ")", ":", "\n", "    ", "args", ".", "crf_lowrank_approx", "=", "getattr", "(", "args", ",", "\"crf_lowrank_approx\"", ",", "32", ")", "\n", "args", ".", "crf_beam_approx", "=", "getattr", "(", "args", ",", "\"crf_beam_approx\"", ",", "64", ")", "\n", "args", ".", "word_ins_loss_factor", "=", "getattr", "(", "args", ",", "\"word_ins_loss_factor\"", ",", "0.5", ")", "\n", "args", ".", "encoder_normalize_before", "=", "getattr", "(", "args", ",", "\"encoder_normalize_before\"", ",", "True", ")", "\n", "args", ".", "decoder_normalize_before", "=", "getattr", "(", "args", ",", "\"decoder_normalize_before\"", ",", "True", ")", "\n", "base_architecture", "(", "args", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_transformer.LevenshteinTransformerModel.allow_length_beam": [[36, 39], ["None"], "methods", ["None"], ["    ", "@", "property", "\n", "def", "allow_length_beam", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_transformer.LevenshteinTransformerModel.add_args": [[40, 68], ["fairseq.models.nat.FairseqNATModel.add_args", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.add_args"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "FairseqNATModel", ".", "add_args", "(", "parser", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--early-exit\"", ",", "\n", "default", "=", "\"6,6,6\"", ",", "\n", "type", "=", "str", ",", "\n", "help", "=", "\"number of decoder layers before word_del, mask_ins, word_ins\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--no-share-discriminator\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"separate parameters for discriminator\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--no-share-maskpredictor\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"separate parameters for mask-predictor\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--share-discriminator-maskpredictor\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"share the parameters for both mask-predictor and discriminator\"", ",", "\n", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--sampling-for-deletion\"", ",", "\n", "action", "=", "'store_true'", ",", "\n", "help", "=", "'instead of argmax, use sampling to predict the tokens'", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_transformer.LevenshteinTransformerModel.build_decoder": [[70, 76], ["levenshtein_transformer.LevenshteinTransformerDecoder", "getattr", "LevenshteinTransformerDecoder.apply"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "build_decoder", "(", "cls", ",", "args", ",", "tgt_dict", ",", "embed_tokens", ")", ":", "\n", "        ", "decoder", "=", "LevenshteinTransformerDecoder", "(", "args", ",", "tgt_dict", ",", "embed_tokens", ")", "\n", "if", "getattr", "(", "args", ",", "\"apply_bert_init\"", ",", "False", ")", ":", "\n", "            ", "decoder", ".", "apply", "(", "init_bert_params", ")", "\n", "", "return", "decoder", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_transformer.LevenshteinTransformerModel.forward": [[77, 137], ["levenshtein_transformer.LevenshteinTransformerModel.encoder", "levenshtein_utils._get_ins_targets", "mask_ins_targets.clamp.clamp.clamp", "prev_output_tokens[].ne", "levenshtein_transformer.LevenshteinTransformerModel.decoder.forward_mask_ins", "levenshtein_transformer.LevenshteinTransformerModel.decoder.forward_word_ins", "torch.multinomial().view.masked_scatter_", "torch.multinomial().view.masked_scatter_", "torch.multinomial().view.masked_scatter_", "levenshtein_utils._get_del_targets", "levenshtein_transformer.LevenshteinTransformerModel.decoder.forward_word_del", "torch.multinomial().view.ne", "torch.multinomial().view.ne", "torch.multinomial().view.ne", "torch.multinomial().view", "torch.multinomial().view", "torch.multinomial().view", "torch.multinomial().view", "torch.multinomial().view", "torch.multinomial().view", "torch.multinomial().view", "torch.multinomial().view", "torch.multinomial().view", "word_ins_out.size", "torch.log_softmax().max", "torch.log_softmax().max", "torch.log_softmax().max", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.multinomial", "torch.softmax().view", "torch.softmax().view", "torch.softmax().view", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "word_ins_out.size", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqMultiModel.encoder", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_utils._get_ins_targets", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles.EnsembleLevT.forward_mask_ins", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles.EnsembleLevT.forward_word_ins", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_utils._get_del_targets", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles.EnsembleLevT.forward_word_del", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax"], ["", "def", "forward", "(", "\n", "self", ",", "src_tokens", ",", "src_lengths", ",", "prev_output_tokens", ",", "tgt_tokens", ",", "**", "kwargs", "\n", ")", ":", "\n", "\n", "        ", "assert", "tgt_tokens", "is", "not", "None", ",", "\"forward function only supports training.\"", "\n", "\n", "# encoding", "\n", "encoder_out", "=", "self", ".", "encoder", "(", "src_tokens", ",", "src_lengths", "=", "src_lengths", ",", "**", "kwargs", ")", "\n", "\n", "# generate training labels for insertion", "\n", "masked_tgt_masks", ",", "masked_tgt_tokens", ",", "mask_ins_targets", "=", "_get_ins_targets", "(", "\n", "prev_output_tokens", ",", "tgt_tokens", ",", "self", ".", "pad", ",", "self", ".", "unk", "\n", ")", "\n", "mask_ins_targets", "=", "mask_ins_targets", ".", "clamp", "(", "min", "=", "0", ",", "max", "=", "255", ")", "# for safe prediction", "\n", "mask_ins_masks", "=", "prev_output_tokens", "[", ":", ",", "1", ":", "]", ".", "ne", "(", "self", ".", "pad", ")", "\n", "\n", "mask_ins_out", ",", "_", "=", "self", ".", "decoder", ".", "forward_mask_ins", "(", "\n", "normalize", "=", "False", ",", "\n", "prev_output_tokens", "=", "prev_output_tokens", ",", "\n", "encoder_out", "=", "encoder_out", "\n", ")", "\n", "word_ins_out", ",", "_", "=", "self", ".", "decoder", ".", "forward_word_ins", "(", "\n", "normalize", "=", "False", ",", "\n", "prev_output_tokens", "=", "masked_tgt_tokens", ",", "\n", "encoder_out", "=", "encoder_out", "\n", ")", "\n", "\n", "# make online prediction", "\n", "if", "self", ".", "decoder", ".", "sampling_for_deletion", ":", "\n", "            ", "word_predictions", "=", "torch", ".", "multinomial", "(", "\n", "F", ".", "softmax", "(", "word_ins_out", ",", "-", "1", ")", ".", "view", "(", "-", "1", ",", "word_ins_out", ".", "size", "(", "-", "1", ")", ")", ",", "1", ")", ".", "view", "(", "\n", "word_ins_out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "word_predictions", "=", "F", ".", "log_softmax", "(", "word_ins_out", ",", "dim", "=", "-", "1", ")", ".", "max", "(", "2", ")", "[", "1", "]", "\n", "\n", "", "word_predictions", ".", "masked_scatter_", "(", "\n", "~", "masked_tgt_masks", ",", "tgt_tokens", "[", "~", "masked_tgt_masks", "]", "\n", ")", "\n", "\n", "# generate training labels for deletion", "\n", "word_del_targets", "=", "_get_del_targets", "(", "word_predictions", ",", "tgt_tokens", ",", "self", ".", "pad", ")", "\n", "word_del_out", ",", "_", "=", "self", ".", "decoder", ".", "forward_word_del", "(", "\n", "normalize", "=", "False", ",", "\n", "prev_output_tokens", "=", "word_predictions", ",", "\n", "encoder_out", "=", "encoder_out", ")", "\n", "word_del_masks", "=", "word_predictions", ".", "ne", "(", "self", ".", "pad", ")", "\n", "\n", "return", "{", "\n", "\"mask_ins\"", ":", "{", "\n", "\"out\"", ":", "mask_ins_out", ",", "\"tgt\"", ":", "mask_ins_targets", ",", "\n", "\"mask\"", ":", "mask_ins_masks", ",", "\"ls\"", ":", "0.01", ",", "\n", "}", ",", "\n", "\"word_ins\"", ":", "{", "\n", "\"out\"", ":", "word_ins_out", ",", "\"tgt\"", ":", "tgt_tokens", ",", "\n", "\"mask\"", ":", "masked_tgt_masks", ",", "\"ls\"", ":", "self", ".", "args", ".", "label_smoothing", ",", "\n", "\"nll_loss\"", ":", "True", "\n", "}", ",", "\n", "\"word_del\"", ":", "{", "\n", "\"out\"", ":", "word_del_out", ",", "\"tgt\"", ":", "word_del_targets", ",", "\n", "\"mask\"", ":", "word_del_masks", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_transformer.LevenshteinTransformerModel.forward_decoder": [[140, 251], ["levenshtein_utils._fill.size", "levenshtein_utils._fill.ne().sum().max", "decoder_out._replace", "torch.zeros_like().fill_", "torch.zeros_like().fill_", "torch.zeros_like().fill_", "torch.zeros_like().fill_", "torch.zeros_like().fill_", "torch.zeros_like().fill_", "torch.zeros_like().fill_", "torch.zeros_like().fill_", "torch.zeros_like().fill_", "levenshtein_utils._fill.ne().sum", "can_del_word.sum", "levenshtein_transformer.LevenshteinTransformerModel.decoder.forward_word_del", "[].bool", "levenshtein_utils._apply_del_words", "levenshtein_utils._fill", "levenshtein_utils._fill", "levenshtein_utils._fill", "levenshtein_utils._fill.ne().sum", "can_ins_mask.sum", "levenshtein_transformer.LevenshteinTransformerModel.decoder.forward_mask_ins", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "torch.min", "levenshtein_utils._apply_ins_masks", "levenshtein_utils._fill", "levenshtein_utils._fill", "levenshtein_utils._fill.eq().sum", "can_ins_word.sum", "levenshtein_transformer.LevenshteinTransformerModel.decoder.forward_word_ins", "word_ins_score.max", "levenshtein_utils._apply_ins_words", "levenshtein_utils._fill", "levenshtein_utils._fill", "levenshtein_utils._fill", "encoder_out.encoder_out.size", "encoder_out.encoder_out.new().fill_", "history.append", "mask_ins_score.max", "max_lens[].expand_as", "history.append", "history.append", "levenshtein_utils._fill.ne().sum", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "levenshtein_utils._fill.ne", "levenshtein_utils._skip", "levenshtein_utils._skip_encoder_out", "levenshtein_utils._fill.clone", "levenshtein_utils._fill.ne", "levenshtein_utils._skip", "levenshtein_utils._skip_encoder_out", "levenshtein_utils._fill.clone", "levenshtein_utils._fill.eq", "levenshtein_utils._skip", "levenshtein_utils._skip_encoder_out", "levenshtein_utils._fill.clone", "encoder_out.encoder_out.new", "word_del_score.max", "levenshtein_utils._fill.ne"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles.EnsembleLevT.forward_word_del", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_utils._apply_del_words", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_utils._fill", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_utils._fill", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_utils._fill", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles.EnsembleLevT.forward_mask_ins", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_utils._apply_ins_masks", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_utils._fill", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_utils._fill", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles.EnsembleLevT.forward_word_ins", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_utils._apply_ins_words", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_utils._fill", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_utils._fill", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_utils._fill", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_utils._skip", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_utils._skip_encoder_out", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_utils._skip", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_utils._skip_encoder_out", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_utils._skip", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_utils._skip_encoder_out"], ["", "def", "forward_decoder", "(", "\n", "self", ",", "decoder_out", ",", "encoder_out", ",", "eos_penalty", "=", "0.0", ",", "max_ratio", "=", "None", ",", "**", "kwargs", "\n", ")", ":", "\n", "\n", "        ", "output_tokens", "=", "decoder_out", ".", "output_tokens", "\n", "output_scores", "=", "decoder_out", ".", "output_scores", "\n", "attn", "=", "decoder_out", ".", "attn", "\n", "history", "=", "decoder_out", ".", "history", "\n", "\n", "bsz", "=", "output_tokens", ".", "size", "(", "0", ")", "\n", "if", "max_ratio", "is", "None", ":", "\n", "            ", "max_lens", "=", "torch", ".", "zeros_like", "(", "output_tokens", ")", ".", "fill_", "(", "255", ")", "\n", "", "else", ":", "\n", "            ", "if", "encoder_out", ".", "encoder_padding_mask", "is", "None", ":", "\n", "                ", "max_src_len", "=", "encoder_out", ".", "encoder_out", ".", "size", "(", "0", ")", "\n", "src_lens", "=", "encoder_out", ".", "encoder_out", ".", "new", "(", "bsz", ")", ".", "fill_", "(", "max_src_len", ")", "\n", "", "else", ":", "\n", "                ", "src_lens", "=", "(", "~", "encoder_out", ".", "encoder_padding_mask", ")", ".", "sum", "(", "1", ")", "\n", "", "max_lens", "=", "(", "src_lens", "*", "max_ratio", ")", ".", "clamp", "(", "min", "=", "10", ")", ".", "long", "(", ")", "\n", "\n", "# delete words", "\n", "# do not delete tokens if it is <s> </s>", "\n", "", "can_del_word", "=", "output_tokens", ".", "ne", "(", "self", ".", "pad", ")", ".", "sum", "(", "1", ")", ">", "2", "\n", "if", "can_del_word", ".", "sum", "(", ")", "!=", "0", ":", "# we cannot delete, skip", "\n", "            ", "word_del_score", ",", "word_del_attn", "=", "self", ".", "decoder", ".", "forward_word_del", "(", "\n", "normalize", "=", "True", ",", "\n", "prev_output_tokens", "=", "_skip", "(", "output_tokens", ",", "can_del_word", ")", ",", "\n", "encoder_out", "=", "_skip_encoder_out", "(", "self", ".", "encoder", ",", "encoder_out", ",", "can_del_word", ")", "\n", ")", "\n", "word_del_pred", "=", "word_del_score", ".", "max", "(", "-", "1", ")", "[", "1", "]", ".", "bool", "(", ")", "\n", "\n", "_tokens", ",", "_scores", ",", "_attn", "=", "_apply_del_words", "(", "\n", "output_tokens", "[", "can_del_word", "]", ",", "\n", "output_scores", "[", "can_del_word", "]", ",", "\n", "word_del_attn", ",", "\n", "word_del_pred", ",", "\n", "self", ".", "pad", ",", "\n", "self", ".", "bos", ",", "\n", "self", ".", "eos", ",", "\n", ")", "\n", "output_tokens", "=", "_fill", "(", "output_tokens", ",", "can_del_word", ",", "_tokens", ",", "self", ".", "pad", ")", "\n", "output_scores", "=", "_fill", "(", "output_scores", ",", "can_del_word", ",", "_scores", ",", "0", ")", "\n", "attn", "=", "_fill", "(", "attn", ",", "can_del_word", ",", "_attn", ",", "0.", ")", "\n", "\n", "if", "history", "is", "not", "None", ":", "\n", "                ", "history", ".", "append", "(", "output_tokens", ".", "clone", "(", ")", ")", "\n", "\n", "# insert placeholders", "\n", "", "", "can_ins_mask", "=", "output_tokens", ".", "ne", "(", "self", ".", "pad", ")", ".", "sum", "(", "1", ")", "<", "max_lens", "\n", "if", "can_ins_mask", ".", "sum", "(", ")", "!=", "0", ":", "\n", "            ", "mask_ins_score", ",", "_", "=", "self", ".", "decoder", ".", "forward_mask_ins", "(", "\n", "normalize", "=", "True", ",", "\n", "prev_output_tokens", "=", "_skip", "(", "output_tokens", ",", "can_ins_mask", ")", ",", "\n", "encoder_out", "=", "_skip_encoder_out", "(", "self", ".", "encoder", ",", "encoder_out", ",", "can_ins_mask", ")", "\n", ")", "\n", "if", "eos_penalty", ">", "0.0", ":", "\n", "                ", "mask_ins_score", "[", ":", ",", ":", ",", "0", "]", "=", "mask_ins_score", "[", ":", ",", ":", ",", "0", "]", "-", "eos_penalty", "\n", "", "mask_ins_pred", "=", "mask_ins_score", ".", "max", "(", "-", "1", ")", "[", "1", "]", "\n", "mask_ins_pred", "=", "torch", ".", "min", "(", "\n", "mask_ins_pred", ",", "max_lens", "[", "can_ins_mask", ",", "None", "]", ".", "expand_as", "(", "mask_ins_pred", ")", "\n", ")", "\n", "\n", "_tokens", ",", "_scores", "=", "_apply_ins_masks", "(", "\n", "output_tokens", "[", "can_ins_mask", "]", ",", "\n", "output_scores", "[", "can_ins_mask", "]", ",", "\n", "mask_ins_pred", ",", "\n", "self", ".", "pad", ",", "\n", "self", ".", "unk", ",", "\n", "self", ".", "eos", ",", "\n", ")", "\n", "output_tokens", "=", "_fill", "(", "output_tokens", ",", "can_ins_mask", ",", "_tokens", ",", "self", ".", "pad", ")", "\n", "output_scores", "=", "_fill", "(", "output_scores", ",", "can_ins_mask", ",", "_scores", ",", "0", ")", "\n", "\n", "if", "history", "is", "not", "None", ":", "\n", "                ", "history", ".", "append", "(", "output_tokens", ".", "clone", "(", ")", ")", "\n", "\n", "# insert words", "\n", "", "", "can_ins_word", "=", "output_tokens", ".", "eq", "(", "self", ".", "unk", ")", ".", "sum", "(", "1", ")", ">", "0", "\n", "if", "can_ins_word", ".", "sum", "(", ")", "!=", "0", ":", "\n", "            ", "word_ins_score", ",", "word_ins_attn", "=", "self", ".", "decoder", ".", "forward_word_ins", "(", "\n", "normalize", "=", "True", ",", "\n", "prev_output_tokens", "=", "_skip", "(", "output_tokens", ",", "can_ins_word", ")", ",", "\n", "encoder_out", "=", "_skip_encoder_out", "(", "self", ".", "encoder", ",", "encoder_out", ",", "can_ins_word", ")", "\n", ")", "\n", "word_ins_score", ",", "word_ins_pred", "=", "word_ins_score", ".", "max", "(", "-", "1", ")", "\n", "_tokens", ",", "_scores", "=", "_apply_ins_words", "(", "\n", "output_tokens", "[", "can_ins_word", "]", ",", "\n", "output_scores", "[", "can_ins_word", "]", ",", "\n", "word_ins_pred", ",", "\n", "word_ins_score", ",", "\n", "self", ".", "unk", ",", "\n", ")", "\n", "\n", "output_tokens", "=", "_fill", "(", "output_tokens", ",", "can_ins_word", ",", "_tokens", ",", "self", ".", "pad", ")", "\n", "output_scores", "=", "_fill", "(", "output_scores", ",", "can_ins_word", ",", "_scores", ",", "0", ")", "\n", "attn", "=", "_fill", "(", "attn", ",", "can_ins_word", ",", "word_ins_attn", ",", "0.", ")", "\n", "\n", "if", "history", "is", "not", "None", ":", "\n", "                ", "history", ".", "append", "(", "output_tokens", ".", "clone", "(", ")", ")", "\n", "\n", "# delete some unnecessary paddings", "\n", "", "", "cut_off", "=", "output_tokens", ".", "ne", "(", "self", ".", "pad", ")", ".", "sum", "(", "1", ")", ".", "max", "(", ")", "\n", "output_tokens", "=", "output_tokens", "[", ":", ",", ":", "cut_off", "]", "\n", "output_scores", "=", "output_scores", "[", ":", ",", ":", "cut_off", "]", "\n", "attn", "=", "None", "if", "attn", "is", "None", "else", "attn", "[", ":", ",", ":", "cut_off", ",", ":", "]", "\n", "\n", "return", "decoder_out", ".", "_replace", "(", "\n", "output_tokens", "=", "output_tokens", ",", "\n", "output_scores", "=", "output_scores", ",", "\n", "attn", "=", "attn", ",", "\n", "history", "=", "history", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_transformer.LevenshteinTransformerModel.initialize_output_tokens": [[253, 269], ["src_tokens.new_zeros", "src_tokens.new_zeros.new_zeros().type_as", "fairseq.iterative_refinement_generator.DecoderOut", "src_tokens.size", "src_tokens.new_zeros.new_zeros", "src_tokens.new_zeros.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "initialize_output_tokens", "(", "self", ",", "encoder_out", ",", "src_tokens", ")", ":", "\n", "        ", "initial_output_tokens", "=", "src_tokens", ".", "new_zeros", "(", "src_tokens", ".", "size", "(", "0", ")", ",", "2", ")", "\n", "initial_output_tokens", "[", ":", ",", "0", "]", "=", "self", ".", "bos", "\n", "initial_output_tokens", "[", ":", ",", "1", "]", "=", "self", ".", "eos", "\n", "\n", "initial_output_scores", "=", "initial_output_tokens", ".", "new_zeros", "(", "\n", "*", "initial_output_tokens", ".", "size", "(", ")", "\n", ")", ".", "type_as", "(", "encoder_out", ".", "encoder_out", ")", "\n", "\n", "return", "DecoderOut", "(", "\n", "output_tokens", "=", "initial_output_tokens", ",", "\n", "output_scores", "=", "initial_output_scores", ",", "\n", "attn", "=", "None", ",", "\n", "step", "=", "0", ",", "\n", "max_step", "=", "0", ",", "\n", "history", "=", "None", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_transformer.LevenshteinTransformerDecoder.__init__": [[273, 306], ["fairseq.models.nat.FairseqNATDecoder.__init__", "dictionary.bos", "dictionary.unk", "dictionary.eos", "getattr", "fairseq.models.transformer.Embedding", "fairseq.models.transformer.Embedding", "getattr", "getattr", "getattr", "int", "len", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "getattr", "args.early_exit.split", "fairseq.models.transformer.TransformerDecoderLayer", "fairseq.models.transformer.TransformerDecoderLayer", "range", "range"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.bos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.unk", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.Embedding", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.Embedding"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "dictionary", ",", "embed_tokens", ",", "no_encoder_attn", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "args", ",", "dictionary", ",", "embed_tokens", ",", "no_encoder_attn", "=", "no_encoder_attn", "\n", ")", "\n", "self", ".", "dictionary", "=", "dictionary", "\n", "self", ".", "bos", "=", "dictionary", ".", "bos", "(", ")", "\n", "self", ".", "unk", "=", "dictionary", ".", "unk", "(", ")", "\n", "self", ".", "eos", "=", "dictionary", ".", "eos", "(", ")", "\n", "self", ".", "sampling_for_deletion", "=", "getattr", "(", "args", ",", "\"sampling_for_deletion\"", ",", "False", ")", "\n", "self", ".", "embed_mask_ins", "=", "Embedding", "(", "256", ",", "self", ".", "output_embed_dim", "*", "2", ",", "None", ")", "\n", "self", ".", "embed_word_del", "=", "Embedding", "(", "2", ",", "self", ".", "output_embed_dim", ",", "None", ")", "\n", "\n", "# del_word, ins_mask, ins_word", "\n", "self", ".", "early_exit", "=", "[", "int", "(", "i", ")", "for", "i", "in", "args", ".", "early_exit", ".", "split", "(", "','", ")", "]", "\n", "assert", "len", "(", "self", ".", "early_exit", ")", "==", "3", "\n", "\n", "# copy layers for mask-predict/deletion", "\n", "self", ".", "layers_msk", "=", "None", "\n", "if", "getattr", "(", "args", ",", "\"no_share_maskpredictor\"", ",", "False", ")", ":", "\n", "            ", "self", ".", "layers_msk", "=", "nn", ".", "ModuleList", "(", "[", "\n", "TransformerDecoderLayer", "(", "args", ",", "no_encoder_attn", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "early_exit", "[", "1", "]", ")", "\n", "]", ")", "\n", "", "self", ".", "layers_del", "=", "None", "\n", "if", "getattr", "(", "args", ",", "\"no_share_discriminator\"", ",", "False", ")", ":", "\n", "            ", "self", ".", "layers_del", "=", "nn", ".", "ModuleList", "(", "[", "\n", "TransformerDecoderLayer", "(", "args", ",", "no_encoder_attn", ")", "\n", "for", "_", "in", "range", "(", "self", ".", "early_exit", "[", "0", "]", ")", "\n", "]", ")", "\n", "\n", "", "if", "getattr", "(", "args", ",", "\"share_discriminator_maskpredictor\"", ",", "False", ")", ":", "\n", "            ", "assert", "getattr", "(", "args", ",", "\"no_share_discriminator\"", ",", "False", ")", ",", "\"must set saperate discriminator\"", "\n", "self", ".", "layers_msk", "=", "self", ".", "layers_del", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_transformer.LevenshteinTransformerDecoder.extract_features": [[307, 367], ["torch.dropout", "torch.dropout", "torch.dropout", "levenshtein_transformer.LevenshteinTransformerDecoder.transpose", "prev_output_tokens.eq", "enumerate", "levenshtein_transformer.LevenshteinTransformerDecoder.transpose", "levenshtein_transformer.LevenshteinTransformerDecoder.embed_positions", "levenshtein_transformer.LevenshteinTransformerDecoder.embed_tokens", "levenshtein_transformer.LevenshteinTransformerDecoder.project_in_dim", "len", "layer", "inner_states.append", "levenshtein_transformer.LevenshteinTransformerDecoder.layer_norm", "levenshtein_transformer.LevenshteinTransformerDecoder.project_out_dim"], "methods", ["None"], ["", "", "def", "extract_features", "(", "\n", "self", ",", "prev_output_tokens", ",", "encoder_out", "=", "None", ",", "early_exit", "=", "None", ",", "layers", "=", "None", ",", "**", "unused", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Similar to *forward* but only return features.\n        Inputs:\n            prev_output_tokens: Tensor(B, T)\n            encoder_out: a dictionary of hidden states and masks\n\n        Returns:\n            tuple:\n                - the decoder's features of shape `(batch, tgt_len, embed_dim)`\n                - a dictionary with any model-specific outputs\n            the LevenshteinTransformer decoder has full-attention to all generated tokens\n        \"\"\"", "\n", "# embed positions", "\n", "positions", "=", "(", "\n", "self", ".", "embed_positions", "(", "prev_output_tokens", ")", "\n", "if", "self", ".", "embed_positions", "is", "not", "None", "\n", "else", "None", "\n", ")", "\n", "\n", "# embed tokens and positions", "\n", "x", "=", "self", ".", "embed_scale", "*", "self", ".", "embed_tokens", "(", "prev_output_tokens", ")", "\n", "if", "self", ".", "project_in_dim", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "project_in_dim", "(", "x", ")", "\n", "\n", "", "if", "positions", "is", "not", "None", ":", "\n", "            ", "x", "+=", "positions", "\n", "", "x", "=", "F", ".", "dropout", "(", "x", ",", "p", "=", "self", ".", "dropout", ",", "training", "=", "self", ".", "training", ")", "\n", "\n", "# B x T x C -> T x B x C", "\n", "x", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", "\n", "attn", "=", "None", "\n", "inner_states", "=", "[", "x", "]", "\n", "\n", "# decoder layers", "\n", "decoder_padding_mask", "=", "prev_output_tokens", ".", "eq", "(", "self", ".", "padding_idx", ")", "\n", "layers", "=", "self", ".", "layers", "if", "layers", "is", "None", "else", "layers", "\n", "early_exit", "=", "len", "(", "layers", ")", "if", "early_exit", "is", "None", "else", "early_exit", "\n", "for", "_", ",", "layer", "in", "enumerate", "(", "layers", "[", ":", "early_exit", "]", ")", ":", "\n", "            ", "x", ",", "attn", ",", "_", "=", "layer", "(", "\n", "x", ",", "\n", "encoder_out", ".", "encoder_out", "if", "encoder_out", "is", "not", "None", "else", "None", ",", "\n", "encoder_out", ".", "encoder_padding_mask", "if", "encoder_out", "is", "not", "None", "else", "None", ",", "\n", "self_attn_mask", "=", "None", ",", "\n", "self_attn_padding_mask", "=", "decoder_padding_mask", ",", "\n", ")", "\n", "inner_states", ".", "append", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "layer_norm", ":", "\n", "            ", "x", "=", "self", ".", "layer_norm", "(", "x", ")", "\n", "\n", "# T x B x C -> B x T x C", "\n", "", "x", "=", "x", ".", "transpose", "(", "0", ",", "1", ")", "\n", "\n", "if", "self", ".", "project_out_dim", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "project_out_dim", "(", "x", ")", "\n", "\n", "", "return", "x", ",", "{", "\"attn\"", ":", "attn", ",", "\"inner_states\"", ":", "inner_states", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_transformer.LevenshteinTransformerDecoder.forward_mask_ins": [[368, 378], ["levenshtein_transformer.LevenshteinTransformerDecoder.extract_features", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.linear", "torch.linear", "torch.linear", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_transformer.LevenshteinTransformerDecoder.extract_features", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax"], ["", "@", "ensemble_decoder", "\n", "def", "forward_mask_ins", "(", "self", ",", "normalize", ",", "encoder_out", ",", "prev_output_tokens", ",", "**", "unused", ")", ":", "\n", "        ", "features", ",", "extra", "=", "self", ".", "extract_features", "(", "\n", "prev_output_tokens", ",", "encoder_out", "=", "encoder_out", ",", "early_exit", "=", "self", ".", "early_exit", "[", "1", "]", ",", "layers", "=", "self", ".", "layers_msk", ",", "**", "unused", "\n", ")", "\n", "features_cat", "=", "torch", ".", "cat", "(", "[", "features", "[", ":", ",", ":", "-", "1", ",", ":", "]", ",", "features", "[", ":", ",", "1", ":", ",", ":", "]", "]", ",", "2", ")", "\n", "decoder_out", "=", "F", ".", "linear", "(", "features_cat", ",", "self", ".", "embed_mask_ins", ".", "weight", ")", "\n", "if", "normalize", ":", "\n", "            ", "return", "F", ".", "log_softmax", "(", "decoder_out", ",", "-", "1", ")", ",", "extra", "[", "'attn'", "]", "\n", "", "return", "decoder_out", ",", "extra", "[", "'attn'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_transformer.LevenshteinTransformerDecoder.forward_word_ins": [[379, 388], ["levenshtein_transformer.LevenshteinTransformerDecoder.extract_features", "levenshtein_transformer.LevenshteinTransformerDecoder.output_layer", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_transformer.LevenshteinTransformerDecoder.extract_features", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.TransformerDecoder.output_layer", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax"], ["", "@", "ensemble_decoder", "\n", "def", "forward_word_ins", "(", "self", ",", "normalize", ",", "encoder_out", ",", "prev_output_tokens", ",", "**", "unused", ")", ":", "\n", "        ", "features", ",", "extra", "=", "self", ".", "extract_features", "(", "\n", "prev_output_tokens", ",", "encoder_out", "=", "encoder_out", ",", "early_exit", "=", "self", ".", "early_exit", "[", "2", "]", ",", "layers", "=", "self", ".", "layers", ",", "**", "unused", "\n", ")", "\n", "decoder_out", "=", "self", ".", "output_layer", "(", "features", ")", "\n", "if", "normalize", ":", "\n", "            ", "return", "F", ".", "log_softmax", "(", "decoder_out", ",", "-", "1", ")", ",", "extra", "[", "'attn'", "]", "\n", "", "return", "decoder_out", ",", "extra", "[", "'attn'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_transformer.LevenshteinTransformerDecoder.forward_word_del": [[389, 398], ["levenshtein_transformer.LevenshteinTransformerDecoder.extract_features", "torch.linear", "torch.linear", "torch.linear", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_transformer.LevenshteinTransformerDecoder.extract_features", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax"], ["", "@", "ensemble_decoder", "\n", "def", "forward_word_del", "(", "self", ",", "normalize", ",", "encoder_out", ",", "prev_output_tokens", ",", "**", "unused", ")", ":", "\n", "        ", "features", ",", "extra", "=", "self", ".", "extract_features", "(", "\n", "prev_output_tokens", ",", "encoder_out", "=", "encoder_out", ",", "early_exit", "=", "self", ".", "early_exit", "[", "0", "]", ",", "layers", "=", "self", ".", "layers_del", ",", "**", "unused", "\n", ")", "\n", "decoder_out", "=", "F", ".", "linear", "(", "features", ",", "self", ".", "embed_word_del", ".", "weight", ")", "\n", "if", "normalize", ":", "\n", "            ", "return", "F", ".", "log_softmax", "(", "decoder_out", ",", "-", "1", ")", ",", "extra", "[", "'attn'", "]", "\n", "", "return", "decoder_out", ",", "extra", "[", "'attn'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_transformer.levenshtein_base_architecture": [[400, 444], ["fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture"], ["", "", "@", "register_model_architecture", "(", "\"levenshtein_transformer\"", ",", "\"levenshtein_transformer\"", ")", "\n", "def", "levenshtein_base_architecture", "(", "args", ")", ":", "\n", "    ", "args", ".", "encoder_embed_path", "=", "getattr", "(", "args", ",", "\"encoder_embed_path\"", ",", "None", ")", "\n", "args", ".", "encoder_embed_dim", "=", "getattr", "(", "args", ",", "\"encoder_embed_dim\"", ",", "512", ")", "\n", "args", ".", "encoder_ffn_embed_dim", "=", "getattr", "(", "args", ",", "\"encoder_ffn_embed_dim\"", ",", "2048", ")", "\n", "args", ".", "encoder_layers", "=", "getattr", "(", "args", ",", "\"encoder_layers\"", ",", "6", ")", "\n", "args", ".", "encoder_attention_heads", "=", "getattr", "(", "args", ",", "\"encoder_attention_heads\"", ",", "8", ")", "\n", "args", ".", "encoder_normalize_before", "=", "getattr", "(", "args", ",", "\"encoder_normalize_before\"", ",", "False", ")", "\n", "args", ".", "encoder_learned_pos", "=", "getattr", "(", "args", ",", "\"encoder_learned_pos\"", ",", "False", ")", "\n", "args", ".", "decoder_embed_path", "=", "getattr", "(", "args", ",", "\"decoder_embed_path\"", ",", "None", ")", "\n", "args", ".", "decoder_embed_dim", "=", "getattr", "(", "args", ",", "\"decoder_embed_dim\"", ",", "args", ".", "encoder_embed_dim", ")", "\n", "args", ".", "decoder_ffn_embed_dim", "=", "getattr", "(", "\n", "args", ",", "\"decoder_ffn_embed_dim\"", ",", "args", ".", "encoder_ffn_embed_dim", "\n", ")", "\n", "args", ".", "decoder_layers", "=", "getattr", "(", "args", ",", "\"decoder_layers\"", ",", "6", ")", "\n", "args", ".", "decoder_attention_heads", "=", "getattr", "(", "args", ",", "\"decoder_attention_heads\"", ",", "8", ")", "\n", "args", ".", "decoder_normalize_before", "=", "getattr", "(", "args", ",", "\"decoder_normalize_before\"", ",", "False", ")", "\n", "args", ".", "decoder_learned_pos", "=", "getattr", "(", "args", ",", "\"decoder_learned_pos\"", ",", "False", ")", "\n", "args", ".", "attention_dropout", "=", "getattr", "(", "args", ",", "\"attention_dropout\"", ",", "0.0", ")", "\n", "args", ".", "activation_dropout", "=", "getattr", "(", "args", ",", "\"activation_dropout\"", ",", "0.0", ")", "\n", "args", ".", "activation_fn", "=", "getattr", "(", "args", ",", "\"activation_fn\"", ",", "\"relu\"", ")", "\n", "args", ".", "dropout", "=", "getattr", "(", "args", ",", "\"dropout\"", ",", "0.1", ")", "\n", "args", ".", "adaptive_softmax_cutoff", "=", "getattr", "(", "args", ",", "\"adaptive_softmax_cutoff\"", ",", "None", ")", "\n", "args", ".", "adaptive_softmax_dropout", "=", "getattr", "(", "args", ",", "\"adaptive_softmax_dropout\"", ",", "0", ")", "\n", "args", ".", "share_decoder_input_output_embed", "=", "getattr", "(", "\n", "args", ",", "\"share_decoder_input_output_embed\"", ",", "False", "\n", ")", "\n", "args", ".", "share_all_embeddings", "=", "getattr", "(", "args", ",", "\"share_all_embeddings\"", ",", "False", ")", "\n", "args", ".", "no_token_positional_embeddings", "=", "getattr", "(", "\n", "args", ",", "\"no_token_positional_embeddings\"", ",", "False", "\n", ")", "\n", "args", ".", "adaptive_input", "=", "getattr", "(", "args", ",", "\"adaptive_input\"", ",", "False", ")", "\n", "args", ".", "apply_bert_init", "=", "getattr", "(", "args", ",", "\"apply_bert_init\"", ",", "False", ")", "\n", "\n", "args", ".", "decoder_output_dim", "=", "getattr", "(", "\n", "args", ",", "\"decoder_output_dim\"", ",", "args", ".", "decoder_embed_dim", "\n", ")", "\n", "args", ".", "sampling_for_deletion", "=", "getattr", "(", "args", ",", "\"sampling_for_deletion\"", ",", "False", ")", "\n", "args", ".", "decoder_input_dim", "=", "getattr", "(", "args", ",", "\"decoder_input_dim\"", ",", "args", ".", "decoder_embed_dim", ")", "\n", "args", ".", "early_exit", "=", "getattr", "(", "args", ",", "\"early_exit\"", ",", "\"6,6,6\"", ")", "\n", "args", ".", "no_share_discriminator", "=", "getattr", "(", "args", ",", "\"no_share_discriminator\"", ",", "False", ")", "\n", "args", ".", "no_share_maskpredictor", "=", "getattr", "(", "args", ",", "\"no_share_maskpredictor\"", ",", "False", ")", "\n", "args", ".", "share_discriminator_maskpredictor", "=", "getattr", "(", "args", ",", "\"share_discriminator_maskpredictor\"", ",", "False", ")", "\n", "args", ".", "no_share_last_layer", "=", "getattr", "(", "args", ",", "\"no_share_last_layer\"", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_transformer.levenshtein_transformer_wmt_en_de": [[446, 451], ["fairseq.models.register_model_architecture", "levenshtein_transformer.levenshtein_base_architecture"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_transformer.levenshtein_base_architecture"], ["", "@", "register_model_architecture", "(", "\n", "\"levenshtein_transformer\"", ",", "\"levenshtein_transformer_wmt_en_de\"", "\n", ")", "\n", "def", "levenshtein_transformer_wmt_en_de", "(", "args", ")", ":", "\n", "    ", "levenshtein_base_architecture", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_transformer.levenshtein_transformer_vaswani_wmt_en_de_big": [[454, 467], ["fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "levenshtein_transformer.levenshtein_base_architecture"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_transformer.levenshtein_base_architecture"], ["", "@", "register_model_architecture", "(", "\n", "\"levenshtein_transformer\"", ",", "\"levenshtein_transformer_vaswani_wmt_en_de_big\"", "\n", ")", "\n", "def", "levenshtein_transformer_vaswani_wmt_en_de_big", "(", "args", ")", ":", "\n", "    ", "args", ".", "encoder_embed_dim", "=", "getattr", "(", "args", ",", "\"encoder_embed_dim\"", ",", "1024", ")", "\n", "args", ".", "encoder_ffn_embed_dim", "=", "getattr", "(", "args", ",", "\"encoder_ffn_embed_dim\"", ",", "4096", ")", "\n", "args", ".", "encoder_attention_heads", "=", "getattr", "(", "args", ",", "\"encoder_attention_heads\"", ",", "16", ")", "\n", "args", ".", "encoder_normalize_before", "=", "getattr", "(", "args", ",", "\"encoder_normalize_before\"", ",", "False", ")", "\n", "args", ".", "decoder_embed_dim", "=", "getattr", "(", "args", ",", "\"decoder_embed_dim\"", ",", "1024", ")", "\n", "args", ".", "decoder_ffn_embed_dim", "=", "getattr", "(", "args", ",", "\"decoder_ffn_embed_dim\"", ",", "4096", ")", "\n", "args", ".", "decoder_attention_heads", "=", "getattr", "(", "args", ",", "\"decoder_attention_heads\"", ",", "16", ")", "\n", "args", ".", "dropout", "=", "getattr", "(", "args", ",", "\"dropout\"", ",", "0.3", ")", "\n", "levenshtein_base_architecture", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_transformer.levenshtein_transformer_wmt_en_de_big_t2t": [[470, 479], ["fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "getattr", "levenshtein_transformer.levenshtein_transformer_vaswani_wmt_en_de_big"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_transformer.levenshtein_transformer_vaswani_wmt_en_de_big"], ["", "@", "register_model_architecture", "(", "\n", "\"levenshtein_transformer\"", ",", "\"levenshtein_transformer_wmt_en_de_big\"", "\n", ")", "\n", "def", "levenshtein_transformer_wmt_en_de_big_t2t", "(", "args", ")", ":", "\n", "    ", "args", ".", "encoder_normalize_before", "=", "getattr", "(", "args", ",", "\"encoder_normalize_before\"", ",", "True", ")", "\n", "args", ".", "decoder_normalize_before", "=", "getattr", "(", "args", ",", "\"decoder_normalize_before\"", ",", "True", ")", "\n", "args", ".", "attention_dropout", "=", "getattr", "(", "args", ",", "\"attention_dropout\"", ",", "0.1", ")", "\n", "args", ".", "activation_dropout", "=", "getattr", "(", "args", ",", "\"activation_dropout\"", ",", "0.1", ")", "\n", "levenshtein_transformer_vaswani_wmt_en_de_big", "(", "args", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.insertion_transformer.NegativeDistanceScore.__init__": [[23, 31], ["insertion_transformer.NegativeDistanceScore.compute_score_full", "insertion_transformer.NegativeDistanceScore.compute_score_full", "insertion_transformer.NegativeDistanceScore.compute_score_full"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.insertion_transformer.NegativeDistanceScore.compute_score_full", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.insertion_transformer.NegativeDistanceScore.compute_score_full", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.insertion_transformer.NegativeDistanceScore.compute_score_full"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "\n", "# pre-compute some values", "\n", "        ", "self", ".", "scores", "=", "{", "}", "\n", "\n", "self", ".", "scores", "[", "0.5", "]", "=", "self", ".", "compute_score_full", "(", "50", ",", "0.5", ")", "\n", "self", ".", "scores", "[", "1.0", "]", "=", "self", ".", "compute_score_full", "(", "50", ",", "1.0", ")", "\n", "self", ".", "scores", "[", "2.0", "]", "=", "self", ".", "compute_score_full", "(", "50", ",", "2.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.insertion_transformer.NegativeDistanceScore.__call__": [[32, 40], ["insertion_transformer.NegativeDistanceScore.compute_score"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.insertion_transformer.NegativeDistanceScore.compute_score"], ["", "def", "__call__", "(", "self", ",", "i", ",", "L", ",", "tau", ")", ":", "\n", "        ", "if", "(", "tau", "is", "None", ")", "or", "(", "tau", ">", "1000", ")", ":", "\n", "            ", "return", "1", "/", "L", "\n", "\n", "", "if", "tau", "in", "self", ".", "scores", ":", "\n", "            ", "if", "L", "<", "self", ".", "scores", "[", "tau", "]", ".", "shape", "[", "0", "]", ":", "\n", "                ", "return", "self", ".", "scores", "[", "tau", "]", "[", "L", "-", "1", ",", "i", "]", "\n", "", "", "return", "self", ".", "compute_score", "(", "L", ",", "tau", ")", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.insertion_transformer.NegativeDistanceScore.compute_score": [[41, 45], ["numpy.array", "numpy.exp", "numpy.exp.sum", "numpy.exp.max", "range", "abs"], "methods", ["None"], ["", "def", "compute_score", "(", "self", ",", "L", ",", "tau", ")", ":", "\n", "        ", "s", "=", "np", ".", "array", "(", "[", "-", "abs", "(", "L", "/", "2", "-", "i", ")", "/", "tau", "for", "i", "in", "range", "(", "L", ")", "]", ")", "\n", "s", "=", "np", ".", "exp", "(", "s", "-", "s", ".", "max", "(", ")", ")", "\n", "return", "s", "/", "s", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.insertion_transformer.NegativeDistanceScore.compute_score_full": [[46, 51], ["numpy.exp", "numpy.tril", "numpy.triu", "numpy.exp.sum", "abs", "numpy.exp.max", "float", "numpy.arange", "numpy.arange"], "methods", ["None"], ["", "def", "compute_score_full", "(", "self", ",", "L", ",", "tau", ")", ":", "\n", "        ", "s", "=", "-", "abs", "(", "np", ".", "arange", "(", "0", ",", "L", "-", "1", ")", "[", ":", ",", "None", "]", "/", "2", "-", "np", ".", "arange", "(", "L", ")", "[", "None", ",", ":", "]", ")", "/", "tau", "\n", "s", "=", "np", ".", "tril", "(", "s", ",", "0", ")", "+", "np", ".", "triu", "(", "s", "-", "float", "(", "\"inf\"", ")", ",", "1", ")", "\n", "s", "=", "np", ".", "exp", "(", "s", "-", "s", ".", "max", "(", "1", ",", "keepdims", "=", "True", ")", ")", "\n", "return", "s", "/", "s", ".", "sum", "(", "1", ",", "keepdims", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.insertion_transformer.InsertionTransformerModel.__init__": [[122, 124], ["fairseq.models.nat.LevenshteinTransformerModel.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "encoder", ",", "decoder", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "encoder", ",", "decoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.insertion_transformer.InsertionTransformerModel.add_args": [[125, 129], ["fairseq.models.nat.FairseqNATModel.add_args", "parser.add_argument"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.add_args"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "FairseqNATModel", ".", "add_args", "(", "parser", ")", "\n", "parser", ".", "add_argument", "(", "\"--label-tau\"", ",", "default", "=", "None", ",", "type", "=", "float", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.insertion_transformer.InsertionTransformerModel.build_decoder": [[130, 136], ["insertion_transformer.InsertionTransformerDecoder", "getattr", "InsertionTransformerDecoder.apply"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "build_decoder", "(", "cls", ",", "args", ",", "tgt_dict", ",", "embed_tokens", ")", ":", "\n", "        ", "decoder", "=", "InsertionTransformerDecoder", "(", "args", ",", "tgt_dict", ",", "embed_tokens", ")", "\n", "if", "getattr", "(", "args", ",", "\"apply_bert_init\"", ",", "False", ")", ":", "\n", "            ", "decoder", ".", "apply", "(", "init_bert_params", ")", "\n", "", "return", "decoder", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.insertion_transformer.InsertionTransformerModel.forward": [[137, 168], ["insertion_transformer.InsertionTransformerModel.encoder", "insertion_transformer.InsertionTransformerModel.decoder.forward_word_ins", "_get_ins_targets().type_as", "prev_output_tokens[].ne", "insertion_transformer._get_ins_targets", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqMultiModel.encoder", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles.EnsembleLevT.forward_word_ins", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_utils._get_ins_targets"], ["", "def", "forward", "(", "\n", "self", ",", "src_tokens", ",", "src_lengths", ",", "prev_output_tokens", ",", "tgt_tokens", ",", "**", "kwargs", "\n", ")", ":", "\n", "\n", "        ", "assert", "tgt_tokens", "is", "not", "None", ",", "\"forward function only supports training.\"", "\n", "\n", "# encoding", "\n", "encoder_out", "=", "self", ".", "encoder", "(", "src_tokens", ",", "src_lengths", "=", "src_lengths", ",", "**", "kwargs", ")", "\n", "\n", "# generate training labels for insertion", "\n", "word_ins_out", "=", "self", ".", "decoder", ".", "forward_word_ins", "(", "\n", "normalize", "=", "False", ",", "\n", "prev_output_tokens", "=", "prev_output_tokens", ",", "\n", "encoder_out", "=", "encoder_out", "\n", ")", "\n", "\n", "word_ins_tgt", "=", "_get_ins_targets", "(", "\n", "prev_output_tokens", ",", "\n", "tgt_tokens", ",", "\n", "self", ".", "pad", ",", "\n", "self", ".", "unk", ",", "\n", "len", "(", "self", ".", "tgt_dict", ")", ",", "\n", "tau", "=", "self", ".", "decoder", ".", "label_tau", ",", "\n", ")", ".", "type_as", "(", "word_ins_out", ")", "\n", "word_ins_masks", "=", "prev_output_tokens", "[", ":", ",", "1", ":", "]", ".", "ne", "(", "self", ".", "pad", ")", "\n", "\n", "return", "{", "\n", "\"word_ins\"", ":", "{", "\n", "\"out\"", ":", "word_ins_out", ",", "\"tgt\"", ":", "word_ins_tgt", ",", "\n", "\"mask\"", ":", "word_ins_masks", ",", "\"ls\"", ":", "self", ".", "args", ".", "label_smoothing", ",", "\n", "\"nll_loss\"", ":", "True", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.insertion_transformer.InsertionTransformerModel.forward_decoder": [[171, 206], ["insertion_transformer.InsertionTransformerModel.decoder.forward_word_ins", "insertion_transformer.InsertionTransformerModel.max", "insertion_transformer._apply_ins_words", "output_tokens.ne().sum().max", "decoder_out._replace", "history.append", "output_tokens.ne().sum", "output_tokens.clone", "output_tokens.ne"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles.EnsembleLevT.forward_word_ins", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_utils._apply_ins_words"], ["", "def", "forward_decoder", "(", "\n", "self", ",", "decoder_out", ",", "encoder_out", ",", "eos_penalty", "=", "0.0", ",", "max_ratio", "=", "None", ",", "**", "kwargs", "\n", ")", ":", "\n", "\n", "        ", "output_tokens", "=", "decoder_out", ".", "output_tokens", "\n", "output_scores", "=", "decoder_out", ".", "output_scores", "\n", "history", "=", "decoder_out", ".", "history", "\n", "\n", "# TODO: decoding for InsertionTransformer", "\n", "word_ins_score", "=", "self", ".", "decoder", ".", "forward_word_ins", "(", "\n", "normalize", "=", "True", ",", "\n", "prev_output_tokens", "=", "output_tokens", ",", "\n", "encoder_out", "=", "encoder_out", "\n", ")", "\n", "\n", "if", "eos_penalty", ">", "0.0", ":", "\n", "            ", "word_ins_score", "[", ":", ",", ":", ",", "self", ".", "pad", "]", "-=", "eos_penalty", "\n", "", "word_ins_score", ",", "word_ins_pred", "=", "word_ins_score", ".", "max", "(", "-", "1", ")", "\n", "output_tokens", ",", "output_scores", "=", "_apply_ins_words", "(", "\n", "output_tokens", ",", "output_scores", ",", "word_ins_pred", ",", "word_ins_score", ",", "self", ".", "pad", "\n", ")", "\n", "\n", "# delete some unnecessary paddings", "\n", "cut_off", "=", "output_tokens", ".", "ne", "(", "self", ".", "pad", ")", ".", "sum", "(", "1", ")", ".", "max", "(", ")", "\n", "output_tokens", "=", "output_tokens", "[", ":", ",", ":", "cut_off", "]", "\n", "output_scores", "=", "output_scores", "[", ":", ",", ":", "cut_off", "]", "\n", "\n", "if", "history", "is", "not", "None", ":", "\n", "            ", "history", ".", "append", "(", "output_tokens", ".", "clone", "(", ")", ")", "\n", "\n", "", "return", "decoder_out", ".", "_replace", "(", "\n", "output_tokens", "=", "output_tokens", ",", "\n", "output_scores", "=", "output_scores", ",", "\n", "attn", "=", "None", ",", "\n", "history", "=", "history", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.insertion_transformer.InsertionTransformerDecoder.__init__": [[210, 223], ["fairseq.models.nat.LevenshteinTransformerDecoder.__init__", "dictionary.bos", "dictionary.unk", "dictionary.eos", "fairseq.models.transformer.Linear", "getattr"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.bos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.unk", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "dictionary", ",", "embed_tokens", ",", "no_encoder_attn", "=", "False", ")", ":", "\n", "# use the TransformerDecoder's __init__", "\n", "        ", "super", "(", "LevenshteinTransformerDecoder", ",", "self", ")", ".", "__init__", "(", "\n", "args", ",", "dictionary", ",", "embed_tokens", ",", "no_encoder_attn", "=", "no_encoder_attn", "\n", ")", "\n", "\n", "self", ".", "dictionary", "=", "dictionary", "\n", "self", ".", "bos", "=", "dictionary", ".", "bos", "(", ")", "\n", "self", ".", "unk", "=", "dictionary", ".", "unk", "(", ")", "\n", "self", ".", "eos", "=", "dictionary", ".", "eos", "(", ")", "\n", "self", ".", "pool_out", "=", "Linear", "(", "self", ".", "output_embed_dim", "*", "2", ",", "self", ".", "output_embed_dim", ")", "\n", "\n", "self", ".", "label_tau", "=", "getattr", "(", "args", ",", "\"label_tau\"", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.insertion_transformer.InsertionTransformerDecoder.forward_word_ins": [[224, 232], ["insertion_transformer.InsertionTransformerDecoder.pool_out", "insertion_transformer.InsertionTransformerDecoder.output_layer", "insertion_transformer.InsertionTransformerDecoder.extract_features", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.log_softmax", "torch.log_softmax"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.TransformerDecoder.output_layer", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_transformer.LevenshteinTransformerDecoder.extract_features", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax"], ["", "@", "ensemble_decoder", "\n", "def", "forward_word_ins", "(", "self", ",", "normalize", ",", "encoder_out", ",", "prev_output_tokens", ")", ":", "\n", "        ", "features", "=", "self", ".", "extract_features", "(", "prev_output_tokens", ",", "encoder_out", "=", "encoder_out", ")", "[", "0", "]", "\n", "features", "=", "self", ".", "pool_out", "(", "\n", "torch", ".", "cat", "(", "[", "features", "[", ":", ",", ":", "-", "1", ",", ":", "]", ",", "features", "[", ":", ",", "1", ":", ",", ":", "]", "]", ",", "2", ")", "\n", ")", "\n", "decoder_out", "=", "self", ".", "output_layer", "(", "features", ")", "\n", "return", "F", ".", "log_softmax", "(", "decoder_out", ",", "-", "1", ")", "if", "normalize", "else", "decoder_out", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.insertion_transformer.InsertionTransformerDecoder.forward_mask_ins": [[233, 235], ["None"], "methods", ["None"], ["", "def", "forward_mask_ins", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.insertion_transformer.InsertionTransformerDecoder.forward_word_del": [[236, 238], ["None"], "methods", ["None"], ["", "def", "forward_word_del", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.insertion_transformer._get_ins_targets": [[56, 100], ["in_tokens.size", "in_tokens.size", "libnat.suggested_ed2_path", "in_tokens.new_zeros().float", "zip", "insert_label_tensors.view.scatter_", "insert_label_tensors.view.view", "torch.cuda.device_of", "torch.cuda.device_of", "torch.tensor", "torch.tensor", "insert_index.long", "sys.stderr.write", "in_tokens.new_zeros", "list", "enumerate", "enumerate", "in_tokens.tolist", "out_tokens.tolist", "neg_scorer", "enumerate", "enumerate", "enumerate", "len"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write"], ["def", "_get_ins_targets", "(", "in_tokens", ",", "out_tokens", ",", "padding_idx", ",", "unk_idx", ",", "vocab_size", ",", "tau", "=", "None", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "from", "fairseq", "import", "libnat", "\n", "", "except", "ImportError", "as", "e", ":", "\n", "        ", "import", "sys", "\n", "sys", ".", "stderr", ".", "write", "(", "'ERROR: missing libnat. run `pip install --editable .`\\n'", ")", "\n", "raise", "e", "\n", "\n", "", "B", "=", "in_tokens", ".", "size", "(", "0", ")", "\n", "T", "=", "in_tokens", ".", "size", "(", "1", ")", "\n", "V", "=", "vocab_size", "\n", "\n", "with", "torch", ".", "cuda", ".", "device_of", "(", "in_tokens", ")", ":", "\n", "        ", "in_tokens_list", "=", "[", "\n", "[", "t", "for", "t", "in", "s", "if", "t", "!=", "padding_idx", "]", "for", "i", ",", "s", "in", "enumerate", "(", "in_tokens", ".", "tolist", "(", ")", ")", "\n", "]", "\n", "out_tokens_list", "=", "[", "\n", "[", "t", "for", "t", "in", "s", "if", "t", "!=", "padding_idx", "]", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "out_tokens", ".", "tolist", "(", ")", ")", "\n", "]", "\n", "\n", "", "full_labels", "=", "libnat", ".", "suggested_ed2_path", "(", "\n", "in_tokens_list", ",", "out_tokens_list", ",", "padding_idx", "\n", ")", "\n", "insert_labels", "=", "[", "a", "[", ":", "-", "1", "]", "for", "a", "in", "full_labels", "]", "\n", "\n", "# numericalize1", "\n", "insert_label_tensors", "=", "in_tokens", ".", "new_zeros", "(", "B", "*", "(", "T", "-", "1", ")", "*", "V", ")", ".", "float", "(", ")", "\n", "insert_index", ",", "insert_labels", "=", "zip", "(", "\n", "*", "[", "\n", "(", "w", "+", "(", "j", "+", "i", "*", "(", "T", "-", "1", ")", ")", "*", "V", ",", "neg_scorer", "(", "k", ",", "len", "(", "label", ")", ",", "tau", ")", ")", "\n", "for", "i", ",", "labels", "in", "enumerate", "(", "insert_labels", ")", "\n", "for", "j", ",", "label", "in", "enumerate", "(", "labels", "[", "1", ":", "-", "1", "]", ")", "\n", "for", "k", ",", "w", "in", "enumerate", "(", "label", ")", "\n", "]", "\n", ")", "# HACK 1:-1", "\n", "insert_index", ",", "insert_labels", "=", "[", "\n", "torch", ".", "tensor", "(", "list", "(", "a", ")", ",", "device", "=", "in_tokens", ".", "device", ")", "\n", "for", "a", "in", "[", "insert_index", ",", "insert_labels", "]", "\n", "]", "\n", "insert_label_tensors", ".", "scatter_", "(", "0", ",", "insert_index", ".", "long", "(", ")", ",", "insert_labels", ")", "\n", "insert_label_tensors", "=", "insert_label_tensors", ".", "view", "(", "B", ",", "T", "-", "1", ",", "V", ")", "\n", "\n", "return", "insert_label_tensors", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.insertion_transformer._apply_ins_words": [[102, 118], ["in_tokens[].eq", "word_ins_scores.masked_fill_", "word_ins_pred.masked_fill_", "fairseq.utils.new_arange().type_as", "torch.cat().gather", "torch.cat().gather", "torch.cat().gather", "torch.cat().gather", "word_ins_pred.eq", "float", "torch.cat().sort", "torch.cat().sort", "fairseq.utils.new_arange", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.new_arange"], ["", "def", "_apply_ins_words", "(", "in_tokens", ",", "in_scores", ",", "word_ins_pred", ",", "word_ins_scores", ",", "padding_idx", ")", ":", "\n", "\n", "    ", "padding_masks", "=", "in_tokens", "[", ":", ",", "1", ":", "]", ".", "eq", "(", "padding_idx", ")", "\n", "word_ins_scores", ".", "masked_fill_", "(", "padding_masks", ",", "0.0", ")", "\n", "word_ins_pred", ".", "masked_fill_", "(", "padding_masks", ",", "padding_idx", ")", "\n", "\n", "in_coords", "=", "new_arange", "(", "in_tokens", ")", ".", "type_as", "(", "in_scores", ")", "\n", "\n", "# shift all padding predictions to infinite", "\n", "out_coords", "=", "(", "in_coords", "[", ":", ",", "1", ":", "]", "-", "0.5", ")", ".", "masked_fill", "(", "\n", "word_ins_pred", ".", "eq", "(", "padding_idx", ")", ",", "float", "(", "\"inf\"", ")", "\n", ")", "\n", "out_coords", "=", "torch", ".", "cat", "(", "[", "in_coords", ",", "out_coords", "]", ",", "1", ")", ".", "sort", "(", "-", "1", ")", "[", "1", "]", "\n", "out_tokens", "=", "torch", ".", "cat", "(", "[", "in_tokens", ",", "word_ins_pred", "]", ",", "1", ")", ".", "gather", "(", "1", ",", "out_coords", ")", "\n", "out_scores", "=", "torch", ".", "cat", "(", "[", "in_scores", ",", "word_ins_scores", "]", ",", "1", ")", ".", "gather", "(", "1", ",", "out_coords", ")", "\n", "return", "out_tokens", ",", "out_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.insertion_transformer.insertion_base_architecture": [[240, 281], ["fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture"], ["", "", "@", "register_model_architecture", "(", "\"insertion_transformer\"", ",", "\"insertion_transformer\"", ")", "\n", "def", "insertion_base_architecture", "(", "args", ")", ":", "\n", "    ", "args", ".", "encoder_embed_path", "=", "getattr", "(", "args", ",", "\"encoder_embed_path\"", ",", "None", ")", "\n", "args", ".", "encoder_embed_dim", "=", "getattr", "(", "args", ",", "\"encoder_embed_dim\"", ",", "512", ")", "\n", "args", ".", "encoder_ffn_embed_dim", "=", "getattr", "(", "args", ",", "\"encoder_ffn_embed_dim\"", ",", "2048", ")", "\n", "args", ".", "encoder_layers", "=", "getattr", "(", "args", ",", "\"encoder_layers\"", ",", "6", ")", "\n", "args", ".", "encoder_attention_heads", "=", "getattr", "(", "args", ",", "\"encoder_attention_heads\"", ",", "8", ")", "\n", "args", ".", "encoder_normalize_before", "=", "getattr", "(", "args", ",", "\"encoder_normalize_before\"", ",", "False", ")", "\n", "args", ".", "encoder_learned_pos", "=", "getattr", "(", "args", ",", "\"encoder_learned_pos\"", ",", "False", ")", "\n", "args", ".", "decoder_embed_path", "=", "getattr", "(", "args", ",", "\"decoder_embed_path\"", ",", "None", ")", "\n", "args", ".", "decoder_embed_dim", "=", "getattr", "(", "args", ",", "\"decoder_embed_dim\"", ",", "args", ".", "encoder_embed_dim", ")", "\n", "args", ".", "decoder_ffn_embed_dim", "=", "getattr", "(", "\n", "args", ",", "\"decoder_ffn_embed_dim\"", ",", "args", ".", "encoder_ffn_embed_dim", "\n", ")", "\n", "args", ".", "decoder_layers", "=", "getattr", "(", "args", ",", "\"decoder_layers\"", ",", "6", ")", "\n", "args", ".", "decoder_attention_heads", "=", "getattr", "(", "args", ",", "\"decoder_attention_heads\"", ",", "8", ")", "\n", "args", ".", "decoder_normalize_before", "=", "getattr", "(", "args", ",", "\"decoder_normalize_before\"", ",", "False", ")", "\n", "args", ".", "decoder_learned_pos", "=", "getattr", "(", "args", ",", "\"decoder_learned_pos\"", ",", "False", ")", "\n", "args", ".", "attention_dropout", "=", "getattr", "(", "args", ",", "\"attention_dropout\"", ",", "0.0", ")", "\n", "args", ".", "activation_dropout", "=", "getattr", "(", "args", ",", "\"activation_dropout\"", ",", "0.0", ")", "\n", "args", ".", "activation_fn", "=", "getattr", "(", "args", ",", "\"activation_fn\"", ",", "\"relu\"", ")", "\n", "args", ".", "dropout", "=", "getattr", "(", "args", ",", "\"dropout\"", ",", "0.1", ")", "\n", "args", ".", "adaptive_softmax_cutoff", "=", "getattr", "(", "args", ",", "\"adaptive_softmax_cutoff\"", ",", "None", ")", "\n", "args", ".", "adaptive_softmax_dropout", "=", "getattr", "(", "args", ",", "\"adaptive_softmax_dropout\"", ",", "0", ")", "\n", "args", ".", "share_decoder_input_output_embed", "=", "getattr", "(", "\n", "args", ",", "\"share_decoder_input_output_embed\"", ",", "False", "\n", ")", "\n", "args", ".", "share_all_embeddings", "=", "getattr", "(", "args", ",", "\"share_all_embeddings\"", ",", "False", ")", "\n", "args", ".", "no_token_positional_embeddings", "=", "getattr", "(", "\n", "args", ",", "\"no_token_positional_embeddings\"", ",", "False", "\n", ")", "\n", "args", ".", "adaptive_input", "=", "getattr", "(", "args", ",", "\"adaptive_input\"", ",", "False", ")", "\n", "args", ".", "apply_bert_init", "=", "getattr", "(", "args", ",", "\"apply_bert_init\"", ",", "False", ")", "\n", "\n", "args", ".", "decoder_output_dim", "=", "getattr", "(", "\n", "args", ",", "\"decoder_output_dim\"", ",", "args", ".", "decoder_embed_dim", "\n", ")", "\n", "args", ".", "decoder_input_dim", "=", "getattr", "(", "args", ",", "\"decoder_input_dim\"", ",", "args", ".", "decoder_embed_dim", ")", "\n", "\n", "# special for insertion transformer", "\n", "args", ".", "label_tau", "=", "getattr", "(", "args", ",", "\"label_tau\"", ",", "None", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.cmlm_transformer.CMLMNATransformerModel.add_args": [[29, 32], ["fairseq.models.nat.NATransformerModel.add_args"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.add_args"], ["    ", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "NATransformerModel", ".", "add_args", "(", "parser", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.cmlm_transformer.CMLMNATransformerModel.forward": [[33, 60], ["cmlm_transformer.CMLMNATransformerModel.encoder", "cmlm_transformer.CMLMNATransformerModel.decoder.forward_length", "cmlm_transformer.CMLMNATransformerModel.decoder.forward_length_prediction", "cmlm_transformer.CMLMNATransformerModel.decoder", "prev_output_tokens.eq"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqMultiModel.encoder", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_transformer.NATransformerDecoder.forward_length", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_transformer.NATransformerDecoder.forward_length_prediction", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqMultiModel.decoder"], ["", "def", "forward", "(", "\n", "self", ",", "src_tokens", ",", "src_lengths", ",", "prev_output_tokens", ",", "tgt_tokens", ",", "**", "kwargs", "\n", ")", ":", "\n", "        ", "assert", "not", "self", ".", "decoder", ".", "src_embedding_copy", ",", "\"do not support embedding copy.\"", "\n", "\n", "# encoding", "\n", "encoder_out", "=", "self", ".", "encoder", "(", "src_tokens", ",", "src_lengths", "=", "src_lengths", ",", "**", "kwargs", ")", "\n", "# length prediction", "\n", "length_out", "=", "self", ".", "decoder", ".", "forward_length", "(", "normalize", "=", "False", ",", "encoder_out", "=", "encoder_out", ")", "\n", "length_tgt", "=", "self", ".", "decoder", ".", "forward_length_prediction", "(", "length_out", ",", "encoder_out", ",", "tgt_tokens", ")", "\n", "\n", "# decoding", "\n", "word_ins_out", "=", "self", ".", "decoder", "(", "\n", "normalize", "=", "False", ",", "\n", "prev_output_tokens", "=", "prev_output_tokens", ",", "\n", "encoder_out", "=", "encoder_out", ")", "\n", "word_ins_mask", "=", "prev_output_tokens", ".", "eq", "(", "self", ".", "unk", ")", "\n", "\n", "return", "{", "\n", "\"word_ins\"", ":", "{", "\n", "\"out\"", ":", "word_ins_out", ",", "\"tgt\"", ":", "tgt_tokens", ",", "\n", "\"mask\"", ":", "word_ins_mask", ",", "\"ls\"", ":", "self", ".", "args", ".", "label_smoothing", ",", "\n", "\"nll_loss\"", ":", "True", "\n", "}", ",", "\n", "\"length\"", ":", "{", "\n", "\"out\"", ":", "length_out", ",", "\"tgt\"", ":", "length_tgt", ",", "\n", "\"factor\"", ":", "self", ".", "decoder", ".", "length_loss_factor", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.cmlm_transformer.CMLMNATransformerModel.forward_decoder": [[63, 102], ["output_tokens.eq", "cmlm_transformer.CMLMNATransformerModel.decoder().max", "output_tokens.masked_scatter_", "output_scores.masked_scatter_", "decoder_out._replace", "history.append", "cmlm_transformer._skeptical_unmasking", "output_tokens.masked_fill_", "output_scores.masked_fill_", "cmlm_transformer.CMLMNATransformerModel.decoder", "output_tokens.clone", "output_tokens.ne", "history.append", "output_tokens.clone"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.cmlm_transformer._skeptical_unmasking", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqMultiModel.decoder"], ["", "def", "forward_decoder", "(", "self", ",", "decoder_out", ",", "encoder_out", ",", "decoding_format", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "\n", "        ", "step", "=", "decoder_out", ".", "step", "\n", "max_step", "=", "decoder_out", ".", "max_step", "\n", "\n", "output_tokens", "=", "decoder_out", ".", "output_tokens", "\n", "output_scores", "=", "decoder_out", ".", "output_scores", "\n", "history", "=", "decoder_out", ".", "history", "\n", "\n", "# execute the decoder", "\n", "output_masks", "=", "output_tokens", ".", "eq", "(", "self", ".", "unk", ")", "\n", "_scores", ",", "_tokens", "=", "self", ".", "decoder", "(", "\n", "normalize", "=", "True", ",", "\n", "prev_output_tokens", "=", "output_tokens", ",", "\n", "encoder_out", "=", "encoder_out", ",", "\n", ")", ".", "max", "(", "-", "1", ")", "\n", "output_tokens", ".", "masked_scatter_", "(", "output_masks", ",", "_tokens", "[", "output_masks", "]", ")", "\n", "output_scores", ".", "masked_scatter_", "(", "output_masks", ",", "_scores", "[", "output_masks", "]", ")", "\n", "\n", "if", "history", "is", "not", "None", ":", "\n", "            ", "history", ".", "append", "(", "output_tokens", ".", "clone", "(", ")", ")", "\n", "\n", "# skeptical decoding (depend on the maximum decoding steps.)", "\n", "", "if", "(", "step", "+", "1", ")", "<", "max_step", ":", "\n", "            ", "skeptical_mask", "=", "_skeptical_unmasking", "(", "\n", "output_scores", ",", "output_tokens", ".", "ne", "(", "self", ".", "pad", ")", ",", "1", "-", "(", "step", "+", "1", ")", "/", "max_step", "\n", ")", "\n", "\n", "output_tokens", ".", "masked_fill_", "(", "skeptical_mask", ",", "self", ".", "unk", ")", "\n", "output_scores", ".", "masked_fill_", "(", "skeptical_mask", ",", "0.0", ")", "\n", "\n", "if", "history", "is", "not", "None", ":", "\n", "                ", "history", ".", "append", "(", "output_tokens", ".", "clone", "(", ")", ")", "\n", "\n", "", "", "return", "decoder_out", ".", "_replace", "(", "\n", "output_tokens", "=", "output_tokens", ",", "\n", "output_scores", "=", "output_scores", ",", "\n", "attn", "=", "None", ",", "\n", "history", "=", "history", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.cmlm_transformer._skeptical_unmasking": [[18, 25], ["skeptical_mask.scatter", "output_scores.sort", "fairseq.utils.new_arange", "output_masks.sum().type_as", "output_masks.sum"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.new_arange"], ["def", "_skeptical_unmasking", "(", "output_scores", ",", "output_masks", ",", "p", ")", ":", "\n", "    ", "sorted_index", "=", "output_scores", ".", "sort", "(", "-", "1", ")", "[", "1", "]", "\n", "boundary_len", "=", "(", "\n", "(", "output_masks", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "type_as", "(", "output_scores", ")", "-", "2", ")", "*", "p", "\n", ")", ".", "long", "(", ")", "\n", "skeptical_mask", "=", "new_arange", "(", "output_masks", ")", "<", "boundary_len", "\n", "return", "skeptical_mask", ".", "scatter", "(", "1", ",", "sorted_index", ",", "skeptical_mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.cmlm_transformer.cmlm_base_architecture": [[105, 150], ["fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture"], ["", "", "@", "register_model_architecture", "(", "\"cmlm_transformer\"", ",", "\"cmlm_transformer\"", ")", "\n", "def", "cmlm_base_architecture", "(", "args", ")", ":", "\n", "    ", "args", ".", "encoder_embed_path", "=", "getattr", "(", "args", ",", "\"encoder_embed_path\"", ",", "None", ")", "\n", "args", ".", "encoder_embed_dim", "=", "getattr", "(", "args", ",", "\"encoder_embed_dim\"", ",", "512", ")", "\n", "args", ".", "encoder_ffn_embed_dim", "=", "getattr", "(", "args", ",", "\"encoder_ffn_embed_dim\"", ",", "2048", ")", "\n", "args", ".", "encoder_layers", "=", "getattr", "(", "args", ",", "\"encoder_layers\"", ",", "6", ")", "\n", "args", ".", "encoder_attention_heads", "=", "getattr", "(", "args", ",", "\"encoder_attention_heads\"", ",", "8", ")", "\n", "args", ".", "encoder_normalize_before", "=", "getattr", "(", "args", ",", "\"encoder_normalize_before\"", ",", "False", ")", "\n", "args", ".", "encoder_learned_pos", "=", "getattr", "(", "args", ",", "\"encoder_learned_pos\"", ",", "False", ")", "\n", "args", ".", "decoder_embed_path", "=", "getattr", "(", "args", ",", "\"decoder_embed_path\"", ",", "None", ")", "\n", "args", ".", "decoder_embed_dim", "=", "getattr", "(", "args", ",", "\"decoder_embed_dim\"", ",", "args", ".", "encoder_embed_dim", ")", "\n", "args", ".", "decoder_ffn_embed_dim", "=", "getattr", "(", "\n", "args", ",", "\"decoder_ffn_embed_dim\"", ",", "args", ".", "encoder_ffn_embed_dim", "\n", ")", "\n", "args", ".", "decoder_layers", "=", "getattr", "(", "args", ",", "\"decoder_layers\"", ",", "6", ")", "\n", "args", ".", "decoder_attention_heads", "=", "getattr", "(", "args", ",", "\"decoder_attention_heads\"", ",", "8", ")", "\n", "args", ".", "decoder_normalize_before", "=", "getattr", "(", "args", ",", "\"decoder_normalize_before\"", ",", "False", ")", "\n", "args", ".", "decoder_learned_pos", "=", "getattr", "(", "args", ",", "\"decoder_learned_pos\"", ",", "False", ")", "\n", "args", ".", "attention_dropout", "=", "getattr", "(", "args", ",", "\"attention_dropout\"", ",", "0.0", ")", "\n", "args", ".", "activation_dropout", "=", "getattr", "(", "args", ",", "\"activation_dropout\"", ",", "0.0", ")", "\n", "args", ".", "activation_fn", "=", "getattr", "(", "args", ",", "\"activation_fn\"", ",", "\"relu\"", ")", "\n", "args", ".", "dropout", "=", "getattr", "(", "args", ",", "\"dropout\"", ",", "0.1", ")", "\n", "args", ".", "adaptive_softmax_cutoff", "=", "getattr", "(", "args", ",", "\"adaptive_softmax_cutoff\"", ",", "None", ")", "\n", "args", ".", "adaptive_softmax_dropout", "=", "getattr", "(", "args", ",", "\"adaptive_softmax_dropout\"", ",", "0", ")", "\n", "args", ".", "share_decoder_input_output_embed", "=", "getattr", "(", "\n", "args", ",", "\"share_decoder_input_output_embed\"", ",", "False", "\n", ")", "\n", "args", ".", "share_all_embeddings", "=", "getattr", "(", "args", ",", "\"share_all_embeddings\"", ",", "True", ")", "\n", "args", ".", "no_token_positional_embeddings", "=", "getattr", "(", "\n", "args", ",", "\"no_token_positional_embeddings\"", ",", "False", "\n", ")", "\n", "args", ".", "adaptive_input", "=", "getattr", "(", "args", ",", "\"adaptive_input\"", ",", "False", ")", "\n", "args", ".", "apply_bert_init", "=", "getattr", "(", "args", ",", "\"apply_bert_init\"", ",", "False", ")", "\n", "\n", "args", ".", "decoder_output_dim", "=", "getattr", "(", "\n", "args", ",", "\"decoder_output_dim\"", ",", "args", ".", "decoder_embed_dim", "\n", ")", "\n", "args", ".", "decoder_input_dim", "=", "getattr", "(", "args", ",", "\"decoder_input_dim\"", ",", "args", ".", "decoder_embed_dim", ")", "\n", "\n", "# --- special arguments ---", "\n", "args", ".", "sg_length_pred", "=", "getattr", "(", "args", ",", "\"sg_length_pred\"", ",", "False", ")", "\n", "args", ".", "pred_length_offset", "=", "getattr", "(", "args", ",", "\"pred_length_offset\"", ",", "False", ")", "\n", "args", ".", "length_loss_factor", "=", "getattr", "(", "args", ",", "\"length_loss_factor\"", ",", "0.1", ")", "\n", "args", ".", "ngram_predictor", "=", "getattr", "(", "args", ",", "\"ngram_predictor\"", ",", "1", ")", "\n", "args", ".", "src_embedding_copy", "=", "getattr", "(", "args", ",", "\"src_embedding_copy\"", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.cmlm_transformer.cmlm_wmt_en_de": [[152, 155], ["fairseq.models.register_model_architecture", "cmlm_transformer.cmlm_base_architecture"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.cmlm_transformer.cmlm_base_architecture"], ["", "@", "register_model_architecture", "(", "\"cmlm_transformer\"", ",", "\"cmlm_transformer_wmt_en_de\"", ")", "\n", "def", "cmlm_wmt_en_de", "(", "args", ")", ":", "\n", "    ", "cmlm_base_architecture", "(", "args", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.fairseq_nat_model.FairseqNATModel.__init__": [[74, 83], ["fairseq.models.transformer.TransformerModel.__init__", "decoder.dictionary.bos", "decoder.dictionary.eos", "decoder.dictionary.pad", "decoder.dictionary.unk"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.bos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.unk"], ["def", "__init__", "(", "self", ",", "args", ",", "encoder", ",", "decoder", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "encoder", ",", "decoder", ")", "\n", "self", ".", "tgt_dict", "=", "decoder", ".", "dictionary", "\n", "self", ".", "bos", "=", "decoder", ".", "dictionary", ".", "bos", "(", ")", "\n", "self", ".", "eos", "=", "decoder", ".", "dictionary", ".", "eos", "(", ")", "\n", "self", ".", "pad", "=", "decoder", ".", "dictionary", ".", "pad", "(", ")", "\n", "self", ".", "unk", "=", "decoder", ".", "dictionary", ".", "unk", "(", ")", "\n", "\n", "self", ".", "ensemble_models", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.fairseq_nat_model.FairseqNATModel.allow_length_beam": [[84, 87], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "allow_length_beam", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.fairseq_nat_model.FairseqNATModel.allow_ensemble": [[88, 91], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "allow_ensemble", "(", "self", ")", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.fairseq_nat_model.FairseqNATModel.enable_ensemble": [[92, 95], ["None"], "methods", ["None"], ["", "def", "enable_ensemble", "(", "self", ",", "models", ")", ":", "\n", "        ", "self", ".", "encoder", ".", "ensemble_models", "=", "[", "m", ".", "encoder", "for", "m", "in", "models", "]", "\n", "self", ".", "decoder", ".", "ensemble_models", "=", "[", "m", ".", "decoder", "for", "m", "in", "models", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.fairseq_nat_model.FairseqNATModel.add_args": [[96, 103], ["fairseq.models.transformer.TransformerModel.add_args", "parser.add_argument"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.add_args"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "TransformerModel", ".", "add_args", "(", "parser", ")", "\n", "parser", ".", "add_argument", "(", "\n", "\"--apply-bert-init\"", ",", "\n", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"use custom param initialization for BERT\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.fairseq_nat_model.FairseqNATModel.build_decoder": [[105, 111], ["fairseq_nat_model.FairseqNATDecoder", "getattr", "FairseqNATDecoder.apply"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "build_decoder", "(", "cls", ",", "args", ",", "tgt_dict", ",", "embed_tokens", ")", ":", "\n", "        ", "decoder", "=", "FairseqNATDecoder", "(", "args", ",", "tgt_dict", ",", "embed_tokens", ")", "\n", "if", "getattr", "(", "args", ",", "\"apply_bert_init\"", ",", "False", ")", ":", "\n", "            ", "decoder", ".", "apply", "(", "init_bert_params", ")", "\n", "", "return", "decoder", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.fairseq_nat_model.FairseqNATModel.build_encoder": [[112, 118], ["fairseq_nat_model.FairseqNATEncoder", "getattr", "FairseqNATEncoder.apply"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "build_encoder", "(", "cls", ",", "args", ",", "src_dict", ",", "embed_tokens", ")", ":", "\n", "        ", "encoder", "=", "FairseqNATEncoder", "(", "args", ",", "src_dict", ",", "embed_tokens", ")", "\n", "if", "getattr", "(", "args", ",", "\"apply_bert_init\"", ",", "False", ")", ":", "\n", "            ", "encoder", ".", "apply", "(", "init_bert_params", ")", "\n", "", "return", "encoder", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.fairseq_nat_model.FairseqNATModel.forward_encoder": [[119, 121], ["fairseq_nat_model.FairseqNATModel.encoder"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqMultiModel.encoder"], ["", "def", "forward_encoder", "(", "self", ",", "encoder_inputs", ")", ":", "\n", "        ", "return", "self", ".", "encoder", "(", "*", "encoder_inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.fairseq_nat_model.FairseqNATModel.forward_decoder": [[122, 124], ["None"], "methods", ["None"], ["", "def", "forward_decoder", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.fairseq_nat_model.FairseqNATModel.initialize_output_tokens": [[125, 127], ["None"], "methods", ["None"], ["", "def", "initialize_output_tokens", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.fairseq_nat_model.FairseqNATModel.forward": [[128, 130], ["None"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.fairseq_nat_model.FairseqNATEncoder.__init__": [[133, 136], ["fairseq.models.transformer.TransformerEncoder.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "dictionary", ",", "embed_tokens", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "dictionary", ",", "embed_tokens", ")", "\n", "self", ".", "ensemble_models", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.fairseq_nat_model.FairseqNATEncoder.forward": [[137, 140], ["super().forward"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.forward"], ["", "@", "ensemble_encoder", "\n", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "super", "(", ")", ".", "forward", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.fairseq_nat_model.FairseqNATDecoder.__init__": [[143, 146], ["fairseq.models.transformer.TransformerDecoder.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "dictionary", ",", "embed_tokens", ",", "no_encoder_attn", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ",", "dictionary", ",", "embed_tokens", ",", "no_encoder_attn", ")", "\n", "self", ".", "ensemble_models", "=", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.fairseq_nat_model.ensemble_encoder": [[13, 30], ["_encoder_out._replace", "func", "func", "len", "getattr", "torch.stack", "stack"], "function", ["None"], ["def", "ensemble_encoder", "(", "func", ")", ":", "\n", "    ", "def", "wrapper", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "ensemble_models", "is", "None", "or", "len", "(", "self", ".", "ensemble_models", ")", "==", "1", ":", "\n", "            ", "return", "func", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "encoder_outs", "=", "[", "func", "(", "model", ",", "*", "args", ",", "**", "kwargs", ")", "for", "model", "in", "self", ".", "ensemble_models", "]", "\n", "_encoder_out", "=", "encoder_outs", "[", "0", "]", "\n", "\n", "def", "stack", "(", "key", ")", ":", "\n", "            ", "outs", "=", "[", "getattr", "(", "e", ",", "key", ")", "for", "e", "in", "encoder_outs", "]", "\n", "return", "torch", ".", "stack", "(", "outs", ",", "-", "1", ")", "if", "outs", "[", "0", "]", "is", "not", "None", "else", "None", "\n", "\n", "", "return", "_encoder_out", ".", "_replace", "(", "\n", "encoder_out", "=", "stack", "(", "'encoder_out'", ")", ",", "\n", "encoder_embedding", "=", "stack", "(", "'encoder_embedding'", ")", ",", "\n", "encoder_states", "=", "stack", "(", "'encoder_states'", ")", "\n", ")", "\n", "", "return", "wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.fairseq_nat_model.ensemble_decoder": [[32, 68], ["range", "tuple", "func", "func", "isinstance", "len", "len", "len", "enumerate", "list", "encoder_out._replace", "torch.logsumexp", "math.log", "torch.stack", "torch.stack", "len"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.dynamic_crf_layer.logsumexp", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log"], ["", "def", "ensemble_decoder", "(", "func", ")", ":", "\n", "    ", "def", "wrapper", "(", "self", ",", "normalize", "=", "False", ",", "encoder_out", "=", "None", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "self", ".", "ensemble_models", "is", "None", "or", "len", "(", "self", ".", "ensemble_models", ")", "==", "1", ":", "\n", "            ", "return", "func", "(", "self", ",", "normalize", "=", "normalize", ",", "encoder_out", "=", "encoder_out", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n", "", "action_outs", "=", "[", "\n", "func", "(", "model", ",", "normalize", "=", "normalize", ",", "encoder_out", "=", "encoder_out", ".", "_replace", "(", "\n", "encoder_out", "=", "encoder_out", ".", "encoder_out", "[", ":", ",", ":", ",", ":", ",", "i", "]", "\n", ")", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "for", "i", ",", "model", "in", "enumerate", "(", "self", ".", "ensemble_models", ")", "\n", "]", "\n", "\n", "if", "not", "isinstance", "(", "action_outs", "[", "0", "]", ",", "tuple", ")", ":", "# return multiple values", "\n", "            ", "action_outs", "=", "[", "[", "a", "]", "for", "a", "in", "action_outs", "]", "\n", "", "else", ":", "\n", "            ", "action_outs", "=", "[", "list", "(", "a", ")", "for", "a", "in", "action_outs", "]", "\n", "\n", "", "ensembled_outs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "action_outs", "[", "0", "]", ")", ")", ":", "\n", "            ", "if", "i", "==", "0", "and", "normalize", ":", "\n", "                ", "ensembled_outs", "+=", "[", "\n", "torch", ".", "logsumexp", "(", "\n", "torch", ".", "stack", "(", "[", "a", "[", "i", "]", "for", "a", "in", "action_outs", "]", ",", "-", "1", ")", ",", "\n", "dim", "=", "-", "1", ")", "-", "math", ".", "log", "(", "len", "(", "self", ".", "ensemble_models", ")", ")", "\n", "]", "\n", "", "elif", "action_outs", "[", "0", "]", "[", "i", "]", "is", "not", "None", ":", "\n", "                ", "ensembled_outs", "+=", "[", "\n", "torch", ".", "stack", "(", "[", "a", "[", "i", "]", "for", "a", "in", "action_outs", "]", ",", "-", "1", ")", "\n", "]", "\n", "", "else", ":", "\n", "                ", "ensembled_outs", "+=", "[", "None", "]", "\n", "\n", "", "", "if", "len", "(", "ensembled_outs", ")", "==", "1", ":", "\n", "            ", "return", "ensembled_outs", "[", "0", "]", "\n", "", "return", "tuple", "(", "ensembled_outs", ")", "\n", "", "return", "wrapper", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles._EnsembleModelEncoder.__init__": [[22, 24], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "models", ")", ":", "\n", "        ", "self", ".", "models", "=", "models", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles._EnsembleModelEncoder.reorder_encoder_out": [[25, 31], ["model.encoder.reorder_encoder_out", "zip"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles._EnsembleModelEncoder.reorder_encoder_out"], ["", "def", "reorder_encoder_out", "(", "self", ",", "encoder_outs", ",", "new_order", ")", ":", "\n", "        ", "encoder_outs", "=", "[", "\n", "model", ".", "encoder", ".", "reorder_encoder_out", "(", "encoder_out", ",", "new_order", ")", "\n", "for", "model", ",", "encoder_out", "in", "zip", "(", "self", ".", "models", ",", "encoder_outs", ")", "\n", "]", "\n", "return", "encoder_outs", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles.BasicEnsembleModel.__init__": [[36, 44], ["super().__init__", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "torch.nn.ModuleList", "nonautoregressive_ensembles.BasicEnsembleModel.models[].decoder.dictionary.bos", "nonautoregressive_ensembles.BasicEnsembleModel.models[].decoder.dictionary.eos", "nonautoregressive_ensembles.BasicEnsembleModel.models[].decoder.dictionary.pad", "nonautoregressive_ensembles.BasicEnsembleModel.models[].decoder.dictionary.unk", "nonautoregressive_ensembles._EnsembleModelEncoder"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.bos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.unk"], ["def", "__init__", "(", "self", ",", "models", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "models", "=", "torch", ".", "nn", ".", "ModuleList", "(", "models", ")", "\n", "self", ".", "bos", "=", "self", ".", "models", "[", "0", "]", ".", "decoder", ".", "dictionary", ".", "bos", "(", ")", "\n", "self", ".", "eos", "=", "self", ".", "models", "[", "0", "]", ".", "decoder", ".", "dictionary", ".", "eos", "(", ")", "\n", "self", ".", "pad", "=", "self", ".", "models", "[", "0", "]", ".", "decoder", ".", "dictionary", ".", "pad", "(", ")", "\n", "self", ".", "unk", "=", "self", ".", "models", "[", "0", "]", ".", "decoder", ".", "dictionary", ".", "unk", "(", ")", "\n", "self", ".", "encoder", "=", "_EnsembleModelEncoder", "(", "self", ".", "models", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles.BasicEnsembleModel.has_encoder": [[45, 47], ["hasattr"], "methods", ["None"], ["", "def", "has_encoder", "(", "self", ")", ":", "\n", "        ", "return", "hasattr", "(", "self", ".", "models", "[", "0", "]", ",", "'encoder'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles.BasicEnsembleModel.max_decoder_positions": [[48, 50], ["min", "m.max_decoder_positions"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles.BasicEnsembleModel.max_decoder_positions"], ["", "def", "max_decoder_positions", "(", "self", ")", ":", "\n", "        ", "return", "min", "(", "m", ".", "max_decoder_positions", "(", ")", "for", "m", "in", "self", ".", "models", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles.BasicEnsembleModel.forward_encoder": [[51, 56], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "nonautoregressive_ensembles.BasicEnsembleModel.has_encoder", "model.forward_encoder"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles.BasicEnsembleModel.has_encoder", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles.BasicEnsembleModel.forward_encoder"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "forward_encoder", "(", "self", ",", "encoder_input", ")", ":", "\n", "        ", "if", "not", "self", ".", "has_encoder", "(", ")", ":", "\n", "            ", "return", "None", "\n", "", "return", "[", "model", ".", "forward_encoder", "(", "encoder_input", ")", "for", "model", "in", "self", ".", "models", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles.BasicEnsembleModel.forward_decoder": [[57, 60], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "forward_decoder", "(", "self", ",", "*", "inputs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles.BasicEnsembleModel.initialize_output_tokens": [[61, 63], ["None"], "methods", ["None"], ["", "def", "initialize_output_tokens", "(", "self", ",", "*", "inputs", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles.EnsembleLevT.__init__": [[68, 70], ["nonautoregressive_ensembles.BasicEnsembleModel.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["def", "__init__", "(", "self", ",", "models", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "models", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles.EnsembleLevT.forward_decoder": [[71, 136], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "output_tokens.size", "output_tokens.ne().sum().max", "decoder_out._replace", "output_tokens.new().fill_", "output_tokens.ne().sum", "can_del_word.sum", "nonautoregressive_ensembles.EnsembleLevT.forward_word_del", "output_tokens.ne().sum", "can_ins_mask.sum", "nonautoregressive_ensembles.EnsembleLevT.forward_mask_ins", "output_tokens.eq().sum", "can_ins_word.sum", "nonautoregressive_ensembles.EnsembleLevT.forward_word_ins", "encoder_outs[].encoder_out.new().fill_", "output_tokens.ne().sum", "output_tokens.new", "encoder_outs[].encoder_out.size", "output_tokens.ne", "output_tokens.ne", "output_tokens.eq", "encoder_outs[].encoder_out.new", "output_tokens.ne"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles.EnsembleLevT.forward_word_del", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles.EnsembleLevT.forward_mask_ins", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles.EnsembleLevT.forward_word_ins", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "forward_decoder", "(", "self", ",", "decoder_out", ",", "encoder_outs", ",", "eos_penalty", "=", "0.0", ",", "max_ratio", "=", "None", ",", "**", "kwargs", ")", ":", "\n", "# LevT ensembling", "\n", "# A pipeline of three steps: deletion, placeholder, and word insertion.", "\n", "# We need to average scores in each step in a pipeline way because of dependence.", "\n", "# deletion", "\n", "        ", "output_tokens", "=", "decoder_out", ".", "output_tokens", "\n", "output_scores", "=", "decoder_out", ".", "output_scores", "\n", "attn", "=", "decoder_out", ".", "attn", "\n", "\n", "bsz", "=", "output_tokens", ".", "size", "(", "0", ")", "\n", "if", "max_ratio", "is", "None", ":", "\n", "            ", "max_lens", "=", "output_tokens", ".", "new", "(", ")", ".", "fill_", "(", "255", ")", "\n", "", "else", ":", "\n", "            ", "if", "encoder_outs", "[", "0", "]", ".", "encoder_padding_mask", "is", "None", ":", "\n", "                ", "src_lens", "=", "encoder_outs", "[", "0", "]", ".", "encoder_out", ".", "new", "(", "bsz", ")", ".", "fill_", "(", "encoder_outs", "[", "0", "]", ".", "encoder_out", ".", "size", "(", "1", ")", ")", "\n", "", "else", ":", "\n", "                ", "src_lens", "=", "(", "~", "encoder_outs", "[", "0", "]", ".", "encoder_padding_mask", ")", ".", "sum", "(", "1", ")", "\n", "", "max_lens", "=", "(", "src_lens", "*", "max_ratio", ")", ".", "clamp", "(", "min", "=", "10", ")", ".", "long", "(", ")", "\n", "\n", "# delete words", "\n", "# do not delete tokens if it is <s> </s>", "\n", "", "can_del_word", "=", "output_tokens", ".", "ne", "(", "self", ".", "pad", ")", ".", "sum", "(", "1", ")", ">", "2", "\n", "if", "can_del_word", ".", "sum", "(", ")", "!=", "0", ":", "# we cannot delete, skip", "\n", "            ", "output_tokens", ",", "output_scores", ",", "attn", "=", "self", ".", "forward_word_del", "(", "\n", "encoder_outs", ",", "\n", "output_tokens", ",", "\n", "output_scores", ",", "\n", "attn", ",", "\n", "can_del_word", ",", "\n", ")", "\n", "\n", "# insert placeholders", "\n", "", "can_ins_mask", "=", "output_tokens", ".", "ne", "(", "self", ".", "pad", ")", ".", "sum", "(", "1", ")", "<", "max_lens", "\n", "if", "can_ins_mask", ".", "sum", "(", ")", "!=", "0", ":", "\n", "            ", "output_tokens", ",", "output_scores", "=", "self", ".", "forward_mask_ins", "(", "\n", "encoder_outs", ",", "\n", "output_tokens", ",", "\n", "output_scores", ",", "\n", "can_ins_mask", ",", "\n", "eos_penalty", ",", "\n", "max_lens", ",", "\n", ")", "\n", "\n", "# insert words", "\n", "", "can_ins_word", "=", "output_tokens", ".", "eq", "(", "self", ".", "unk", ")", ".", "sum", "(", "1", ")", ">", "0", "\n", "if", "can_ins_word", ".", "sum", "(", ")", "!=", "0", ":", "\n", "            ", "output_tokens", ",", "output_scores", ",", "attn", "=", "self", ".", "forward_word_ins", "(", "\n", "encoder_outs", ",", "\n", "output_tokens", ",", "\n", "output_scores", ",", "\n", "attn", ",", "\n", "can_ins_word", ",", "\n", ")", "\n", "\n", "# delete some unnecessary paddings", "\n", "", "cut_off", "=", "output_tokens", ".", "ne", "(", "self", ".", "pad", ")", ".", "sum", "(", "1", ")", ".", "max", "(", ")", "\n", "output_tokens", "=", "output_tokens", "[", ":", ",", ":", "cut_off", "]", "\n", "output_scores", "=", "output_scores", "[", ":", ",", ":", "cut_off", "]", "\n", "attn", "=", "None", "if", "attn", "is", "None", "else", "attn", "[", ":", ",", ":", "cut_off", ",", ":", "]", "\n", "return", "decoder_out", ".", "_replace", "(", "\n", "output_tokens", "=", "output_tokens", ",", "\n", "output_scores", "=", "output_scores", ",", "\n", "attn", "=", "attn", ",", "\n", "history", "=", "None", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles.EnsembleLevT.forward_word_del": [[138, 169], ["zip", "[].bool", "fairseq.models.nat._apply_del_words", "fairseq.models.nat._fill", "fairseq.models.nat._fill", "fairseq.models.nat._fill", "model.decoder.forward_word_del", "torch.log_softmax", "torch.log_softmax", "word_del_score_avg.append", "word_del_attn_avg.append", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "math.log", "fairseq.models.nat._skip", "fairseq.models.nat._skip_encoder_out", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "len", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "len", "word_del_score_avg.max"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_utils._apply_del_words", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_utils._fill", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_utils._fill", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_utils._fill", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles.EnsembleLevT.forward_word_del", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.dynamic_crf_layer.logsumexp", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.dynamic_crf_layer.logsumexp", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.dynamic_crf_layer.logsumexp", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.dynamic_crf_layer.logsumexp", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_utils._skip", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_utils._skip_encoder_out"], ["", "def", "forward_word_del", "(", "self", ",", "encoder_outs", ",", "output_tokens", ",", "output_scores", ",", "attn", ",", "can_del_word", ")", ":", "\n", "        ", "word_del_score_avg", "=", "[", "]", "\n", "word_del_attn_avg", "=", "[", "]", "\n", "for", "model", ",", "encoder_out", "in", "zip", "(", "self", ".", "models", ",", "encoder_outs", ")", ":", "\n", "            ", "word_del_out", ",", "word_del_attn", "=", "model", ".", "decoder", ".", "forward_word_del", "(", "\n", "_skip", "(", "output_tokens", ",", "can_del_word", ")", ",", "\n", "_skip_encoder_out", "(", "model", ".", "encoder", ",", "encoder_out", ",", "can_del_word", ")", ",", "\n", ")", "\n", "word_del_score", "=", "F", ".", "log_softmax", "(", "word_del_out", ",", "2", ")", "\n", "word_del_score_avg", ".", "append", "(", "word_del_score", ")", "\n", "word_del_attn_avg", ".", "append", "(", "word_del_attn", ")", "\n", "", "word_del_score_avg", "=", "torch", ".", "logsumexp", "(", "torch", ".", "stack", "(", "word_del_score_avg", ",", "dim", "=", "0", ")", ",", "dim", "=", "0", ")", "-", "math", ".", "log", "(", "len", "(", "self", ".", "models", ")", ")", "\n", "word_del_pred", "=", "word_del_score_avg", ".", "max", "(", "-", "1", ")", "[", "1", "]", ".", "bool", "(", ")", "\n", "if", "word_del_attn_avg", "[", "0", "]", "is", "not", "None", ":", "\n", "            ", "word_del_attn_avg", "=", "torch", ".", "stack", "(", "word_del_attn_avg", ",", "dim", "=", "0", ")", "/", "len", "(", "self", ".", "models", ")", "\n", "", "else", ":", "\n", "            ", "word_del_attn_avg", "=", "None", "\n", "\n", "", "_tokens", ",", "_scores", ",", "_attn", "=", "_apply_del_words", "(", "\n", "output_tokens", "[", "can_del_word", "]", ",", "\n", "output_scores", "[", "can_del_word", "]", ",", "\n", "word_del_attn_avg", ",", "\n", "word_del_pred", ",", "\n", "self", ".", "pad", ",", "\n", "self", ".", "bos", ",", "\n", "self", ".", "eos", ",", "\n", ")", "\n", "output_tokens", "=", "_fill", "(", "output_tokens", ",", "can_del_word", ",", "_tokens", ",", "self", ".", "pad", ")", "\n", "output_scores", "=", "_fill", "(", "output_scores", ",", "can_del_word", ",", "_scores", ",", "0", ")", "\n", "attn", "=", "_fill", "(", "attn", ",", "can_del_word", ",", "_attn", ",", "0.", ")", "\n", "return", "output_tokens", ",", "output_scores", ",", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles.EnsembleLevT.forward_mask_ins": [[170, 197], ["zip", "torch.min", "torch.min", "torch.min", "torch.min", "fairseq.models.nat._apply_ins_masks", "fairseq.models.nat._fill", "fairseq.models.nat._fill", "model.decoder.forward_mask_ins", "torch.log_softmax", "torch.log_softmax", "mask_ins_score_avg.append", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "math.log", "mask_ins_score_avg.max", "max_lens[].expand_as", "fairseq.models.nat._skip", "fairseq.models.nat._skip_encoder_out", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_utils._apply_ins_masks", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_utils._fill", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_utils._fill", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles.EnsembleLevT.forward_mask_ins", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.dynamic_crf_layer.logsumexp", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.dynamic_crf_layer.logsumexp", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.dynamic_crf_layer.logsumexp", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.dynamic_crf_layer.logsumexp", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_utils._skip", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_utils._skip_encoder_out"], ["", "def", "forward_mask_ins", "(", "self", ",", "encoder_outs", ",", "output_tokens", ",", "output_scores", ",", "can_ins_mask", ",", "eos_penalty", ",", "max_lens", ")", ":", "\n", "        ", "mask_ins_score_avg", "=", "[", "]", "\n", "for", "model", ",", "encoder_out", "in", "zip", "(", "self", ".", "models", ",", "encoder_outs", ")", ":", "\n", "            ", "mask_ins_out", ",", "_", "=", "model", ".", "decoder", ".", "forward_mask_ins", "(", "\n", "_skip", "(", "output_tokens", ",", "can_ins_mask", ")", ",", "\n", "_skip_encoder_out", "(", "model", ".", "encoder", ",", "encoder_out", ",", "can_ins_mask", ")", ",", "\n", ")", "\n", "mask_ins_score", "=", "F", ".", "log_softmax", "(", "mask_ins_out", ",", "2", ")", "\n", "if", "eos_penalty", ">", "0.0", ":", "\n", "                ", "mask_ins_score", "[", ":", ",", ":", ",", "0", "]", "-=", "eos_penalty", "\n", "", "mask_ins_score_avg", ".", "append", "(", "mask_ins_score", ")", "\n", "", "mask_ins_score_avg", "=", "torch", ".", "logsumexp", "(", "torch", ".", "stack", "(", "mask_ins_score_avg", ",", "dim", "=", "0", ")", ",", "dim", "=", "0", ")", "-", "math", ".", "log", "(", "len", "(", "self", ".", "models", ")", ")", "\n", "mask_ins_pred", "=", "mask_ins_score_avg", ".", "max", "(", "-", "1", ")", "[", "1", "]", "\n", "mask_ins_pred", "=", "torch", ".", "min", "(", "\n", "mask_ins_pred", ",", "max_lens", "[", "can_ins_mask", ",", "None", "]", ".", "expand_as", "(", "mask_ins_pred", ")", "\n", ")", "\n", "_tokens", ",", "_scores", "=", "_apply_ins_masks", "(", "\n", "output_tokens", "[", "can_ins_mask", "]", ",", "\n", "output_scores", "[", "can_ins_mask", "]", ",", "\n", "mask_ins_pred", ",", "\n", "self", ".", "pad", ",", "\n", "self", ".", "unk", ",", "\n", "self", ".", "eos", ",", "\n", ")", "\n", "output_tokens", "=", "_fill", "(", "output_tokens", ",", "can_ins_mask", ",", "_tokens", ",", "self", ".", "pad", ")", "\n", "output_scores", "=", "_fill", "(", "output_scores", ",", "can_ins_mask", ",", "_scores", ",", "0", ")", "\n", "return", "output_tokens", ",", "output_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles.EnsembleLevT.forward_word_ins": [[198, 228], ["zip", "word_ins_score_avg.max", "fairseq.models.nat._apply_ins_words", "fairseq.models.nat._fill", "fairseq.models.nat._fill", "fairseq.models.nat._fill", "model.decoder.forward_word_ins", "torch.log_softmax", "torch.log_softmax", "word_ins_score_avg.append", "word_ins_attn_avg.append", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "math.log", "fairseq.models.nat._skip", "fairseq.models.nat._skip_encoder_out", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "len", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_utils._apply_ins_words", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_utils._fill", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_utils._fill", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_utils._fill", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles.EnsembleLevT.forward_word_ins", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.dynamic_crf_layer.logsumexp", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.dynamic_crf_layer.logsumexp", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.dynamic_crf_layer.logsumexp", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.dynamic_crf_layer.logsumexp", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.log", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_utils._skip", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_utils._skip_encoder_out"], ["", "def", "forward_word_ins", "(", "self", ",", "encoder_outs", ",", "output_tokens", ",", "output_scores", ",", "attn", ",", "can_ins_word", ")", ":", "\n", "        ", "word_ins_score_avg", "=", "[", "]", "\n", "word_ins_attn_avg", "=", "[", "]", "\n", "for", "model", ",", "encoder_out", "in", "zip", "(", "self", ".", "models", ",", "encoder_outs", ")", ":", "\n", "            ", "word_ins_out", ",", "word_ins_attn", "=", "model", ".", "decoder", ".", "forward_word_ins", "(", "\n", "_skip", "(", "output_tokens", ",", "can_ins_word", ")", ",", "\n", "_skip_encoder_out", "(", "model", ".", "encoder", ",", "encoder_out", ",", "can_ins_word", ")", ",", "\n", ")", "\n", "word_ins_score", "=", "F", ".", "log_softmax", "(", "word_ins_out", ",", "2", ")", "\n", "word_ins_score_avg", ".", "append", "(", "word_ins_score", ")", "\n", "word_ins_attn_avg", ".", "append", "(", "word_ins_attn", ")", "\n", "", "word_ins_score_avg", "=", "torch", ".", "logsumexp", "(", "torch", ".", "stack", "(", "word_ins_score_avg", ",", "dim", "=", "0", ")", ",", "dim", "=", "0", ")", "-", "math", ".", "log", "(", "len", "(", "self", ".", "models", ")", ")", "\n", "if", "word_ins_attn_avg", "[", "0", "]", "is", "not", "None", ":", "\n", "            ", "word_ins_attn_avg", "=", "torch", ".", "stack", "(", "word_ins_attn_avg", ",", "dim", "=", "0", ")", "/", "len", "(", "self", ".", "models", ")", "\n", "", "else", ":", "\n", "            ", "word_ins_attn_avg", "=", "None", "\n", "", "word_ins_score_max", ",", "word_ins_pred", "=", "word_ins_score_avg", ".", "max", "(", "-", "1", ")", "\n", "\n", "_tokens", ",", "_scores", "=", "_apply_ins_words", "(", "\n", "output_tokens", "[", "can_ins_word", "]", ",", "\n", "output_scores", "[", "can_ins_word", "]", ",", "\n", "word_ins_pred", ",", "\n", "word_ins_score_max", ",", "\n", "self", ".", "unk", ",", "\n", ")", "\n", "\n", "output_tokens", "=", "_fill", "(", "output_tokens", ",", "can_ins_word", ",", "_tokens", ",", "self", ".", "pad", ")", "\n", "output_scores", "=", "_fill", "(", "output_scores", ",", "can_ins_word", ",", "_scores", ",", "0", ")", "\n", "attn", "=", "_fill", "(", "attn", ",", "can_ins_word", ",", "word_ins_attn", ",", "0.", ")", "\n", "return", "output_tokens", ",", "output_scores", ",", "attn", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles.EnsembleLevT.initialize_output_tokens": [[229, 232], ["nonautoregressive_ensembles.EnsembleLevT.models[].initialize_output_tokens"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles.EnsembleLevT.initialize_output_tokens"], ["", "def", "initialize_output_tokens", "(", "self", ",", "encoder_outs", ",", "src_tokens", ")", ":", "\n", "# LevT doesn't do length prediction.", "\n", "        ", "return", "self", ".", "models", "[", "0", "]", ".", "initialize_output_tokens", "(", "encoder_outs", "[", "0", "]", ",", "src_tokens", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_utils.load_libnat": [[12, 28], ["print", "str", "sys.stderr.write"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.scripts.wav2vec_featurize.H5Writer.write"], ["def", "load_libnat", "(", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "from", "fairseq", "import", "libnat_cuda", "\n", "return", "libnat_cuda", ",", "True", "\n", "\n", "", "except", "ImportError", "as", "e", ":", "\n", "        ", "print", "(", "str", "(", "e", ")", "+", "'... fall back to CPU version'", ")", "\n", "\n", "try", ":", "\n", "            ", "from", "fairseq", "import", "libnat", "\n", "return", "libnat", ",", "False", "\n", "\n", "", "except", "ImportError", "as", "e", ":", "\n", "            ", "import", "sys", "\n", "sys", ".", "stderr", ".", "write", "(", "\"ERROR: missing libnat_cuda. run `python setup.py build_ext --inplace`\\n\"", ")", "\n", "raise", "e", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_utils._get_ins_targets": [[30, 91], ["levenshtein_utils.load_libnat", "levenshtein_utils._get_ins_targets._get_ins_targets_cpu"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_utils.load_libnat"], ["", "", "", "def", "_get_ins_targets", "(", "in_tokens", ",", "out_tokens", ",", "padding_idx", ",", "unk_idx", ")", ":", "\n", "    ", "libnat", ",", "use_cuda", "=", "load_libnat", "(", ")", "\n", "\n", "def", "_get_ins_targets_cuda", "(", "in_tokens", ",", "out_tokens", ",", "padding_idx", ",", "unk_idx", ")", ":", "\n", "        ", "in_masks", "=", "in_tokens", ".", "ne", "(", "padding_idx", ")", "\n", "out_masks", "=", "out_tokens", ".", "ne", "(", "padding_idx", ")", "\n", "mask_ins_targets", ",", "masked_tgt_masks", "=", "libnat", ".", "generate_insertion_labels", "(", "\n", "out_tokens", ".", "int", "(", ")", ",", "libnat", ".", "levenshtein_distance", "(", "\n", "in_tokens", ".", "int", "(", ")", ",", "out_tokens", ".", "int", "(", ")", ",", "\n", "in_masks", ".", "sum", "(", "1", ")", ".", "int", "(", ")", ",", "out_masks", ".", "sum", "(", "1", ")", ".", "int", "(", ")", "\n", ")", "\n", ")", "\n", "masked_tgt_masks", "=", "masked_tgt_masks", ".", "bool", "(", ")", "&", "out_masks", "\n", "mask_ins_targets", "=", "mask_ins_targets", ".", "type_as", "(", "\n", "in_tokens", ")", "[", ":", ",", "1", ":", "in_masks", ".", "size", "(", "1", ")", "]", ".", "masked_fill_", "(", "~", "in_masks", "[", ":", ",", "1", ":", "]", ",", "0", ")", "\n", "masked_tgt_tokens", "=", "out_tokens", ".", "masked_fill", "(", "masked_tgt_masks", ",", "unk_idx", ")", "\n", "return", "masked_tgt_masks", ",", "masked_tgt_tokens", ",", "mask_ins_targets", "\n", "\n", "", "def", "_get_ins_targets_cpu", "(", "in_tokens", ",", "out_tokens", ",", "padding_idx", ",", "unk_idx", ")", ":", "\n", "        ", "in_seq_len", ",", "out_seq_len", "=", "in_tokens", ".", "size", "(", "1", ")", ",", "out_tokens", ".", "size", "(", "1", ")", "\n", "\n", "in_tokens_list", "=", "[", "\n", "[", "t", "for", "t", "in", "s", "if", "t", "!=", "padding_idx", "]", "for", "i", ",", "s", "in", "enumerate", "(", "in_tokens", ".", "tolist", "(", ")", ")", "\n", "]", "\n", "out_tokens_list", "=", "[", "\n", "[", "t", "for", "t", "in", "s", "if", "t", "!=", "padding_idx", "]", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "out_tokens", ".", "tolist", "(", ")", ")", "\n", "]", "\n", "\n", "full_labels", "=", "libnat", ".", "suggested_ed2_path", "(", "\n", "in_tokens_list", ",", "out_tokens_list", ",", "padding_idx", "\n", ")", "\n", "mask_inputs", "=", "[", "\n", "[", "len", "(", "c", ")", "if", "c", "[", "0", "]", "!=", "padding_idx", "else", "0", "for", "c", "in", "a", "[", ":", "-", "1", "]", "]", "for", "a", "in", "full_labels", "\n", "]", "\n", "\n", "# generate labels", "\n", "masked_tgt_masks", "=", "[", "]", "\n", "for", "mask_input", "in", "mask_inputs", ":", "\n", "            ", "mask_label", "=", "[", "]", "\n", "for", "beam_size", "in", "mask_input", "[", "1", ":", "-", "1", "]", ":", "# HACK 1:-1", "\n", "                ", "mask_label", "+=", "[", "0", "]", "+", "[", "1", "for", "_", "in", "range", "(", "beam_size", ")", "]", "\n", "", "masked_tgt_masks", ".", "append", "(", "\n", "mask_label", "+", "[", "0", "for", "_", "in", "range", "(", "out_seq_len", "-", "len", "(", "mask_label", ")", ")", "]", "\n", ")", "\n", "", "mask_ins_targets", "=", "[", "\n", "mask_input", "[", "1", ":", "-", "1", "]", "+", "[", "0", "for", "_", "in", "range", "(", "in_seq_len", "-", "1", "-", "len", "(", "mask_input", "[", "1", ":", "-", "1", "]", ")", ")", "]", "\n", "for", "mask_input", "in", "mask_inputs", "\n", "]", "\n", "\n", "# transform to tensor", "\n", "masked_tgt_masks", "=", "torch", ".", "tensor", "(", "\n", "masked_tgt_masks", ",", "device", "=", "out_tokens", ".", "device", "\n", ")", ".", "bool", "(", ")", "\n", "mask_ins_targets", "=", "torch", ".", "tensor", "(", "mask_ins_targets", ",", "device", "=", "in_tokens", ".", "device", ")", "\n", "masked_tgt_tokens", "=", "out_tokens", ".", "masked_fill", "(", "masked_tgt_masks", ",", "unk_idx", ")", "\n", "return", "masked_tgt_masks", ",", "masked_tgt_tokens", ",", "mask_ins_targets", "\n", "\n", "", "if", "use_cuda", ":", "\n", "        ", "return", "_get_ins_targets_cuda", "(", "in_tokens", ",", "out_tokens", ",", "padding_idx", ",", "unk_idx", ")", "\n", "", "return", "_get_ins_targets_cpu", "(", "in_tokens", ",", "out_tokens", ",", "padding_idx", ",", "unk_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_utils._get_del_targets": [[93, 137], ["levenshtein_utils.load_libnat", "levenshtein_utils._get_del_targets._get_del_targets_cpu"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_utils.load_libnat"], ["", "def", "_get_del_targets", "(", "in_tokens", ",", "out_tokens", ",", "padding_idx", ")", ":", "\n", "    ", "libnat", ",", "use_cuda", "=", "load_libnat", "(", ")", "\n", "\n", "def", "_get_del_targets_cuda", "(", "in_tokens", ",", "out_tokens", ",", "padding_idx", ")", ":", "\n", "        ", "in_masks", "=", "in_tokens", ".", "ne", "(", "padding_idx", ")", "\n", "out_masks", "=", "out_tokens", ".", "ne", "(", "padding_idx", ")", "\n", "\n", "word_del_targets", "=", "libnat", ".", "generate_deletion_labels", "(", "\n", "in_tokens", ".", "int", "(", ")", ",", "\n", "libnat", ".", "levenshtein_distance", "(", "\n", "in_tokens", ".", "int", "(", ")", ",", "out_tokens", ".", "int", "(", ")", ",", "\n", "in_masks", ".", "sum", "(", "1", ")", ".", "int", "(", ")", ",", "out_masks", ".", "sum", "(", "1", ")", ".", "int", "(", ")", "\n", ")", "\n", ")", "\n", "word_del_targets", "=", "word_del_targets", ".", "type_as", "(", "in_tokens", ")", ".", "masked_fill_", "(", "~", "in_masks", ",", "0", ")", "\n", "return", "word_del_targets", "\n", "\n", "", "def", "_get_del_targets_cpu", "(", "in_tokens", ",", "out_tokens", ",", "padding_idx", ")", ":", "\n", "        ", "out_seq_len", "=", "out_tokens", ".", "size", "(", "1", ")", "\n", "with", "torch", ".", "cuda", ".", "device_of", "(", "in_tokens", ")", ":", "\n", "            ", "in_tokens_list", "=", "[", "\n", "[", "t", "for", "t", "in", "s", "if", "t", "!=", "padding_idx", "]", "for", "i", ",", "s", "in", "enumerate", "(", "in_tokens", ".", "tolist", "(", ")", ")", "\n", "]", "\n", "out_tokens_list", "=", "[", "\n", "[", "t", "for", "t", "in", "s", "if", "t", "!=", "padding_idx", "]", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "out_tokens", ".", "tolist", "(", ")", ")", "\n", "]", "\n", "\n", "", "full_labels", "=", "libnat", ".", "suggested_ed2_path", "(", "\n", "in_tokens_list", ",", "out_tokens_list", ",", "padding_idx", "\n", ")", "\n", "word_del_targets", "=", "[", "b", "[", "-", "1", "]", "for", "b", "in", "full_labels", "]", "\n", "word_del_targets", "=", "[", "\n", "labels", "+", "[", "0", "for", "_", "in", "range", "(", "out_seq_len", "-", "len", "(", "labels", ")", ")", "]", "\n", "for", "labels", "in", "word_del_targets", "\n", "]", "\n", "\n", "# transform to tensor", "\n", "word_del_targets", "=", "torch", ".", "tensor", "(", "word_del_targets", ",", "device", "=", "out_tokens", ".", "device", ")", "\n", "return", "word_del_targets", "\n", "\n", "", "if", "use_cuda", ":", "\n", "        ", "return", "_get_del_targets_cuda", "(", "in_tokens", ",", "out_tokens", ",", "padding_idx", ")", "\n", "", "return", "_get_del_targets_cpu", "(", "in_tokens", ",", "out_tokens", ",", "padding_idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_utils._apply_ins_masks": [[139, 174], ["in_tokens.ne", "in_tokens.ne.sum", "in_tokens.masked_fill_", "mask_ins_pred.masked_fill_", "out_lengths.max", "in_tokens.new_zeros().fill_().masked_fill_", "in_tokens.new_zeros().fill_().masked_fill_.scatter_", "mask_ins_pred.sum", "in_scores.masked_fill_", "in_scores.new_zeros", "in_scores.new_zeros.scatter_", "fairseq.utils.new_arange", "in_tokens.new_zeros().fill_", "in_masks[].long", "in_tokens.new_zeros().fill_().masked_fill_.size", "in_tokens.new_zeros", "in_tokens.size"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.new_arange", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "_apply_ins_masks", "(", "\n", "in_tokens", ",", "in_scores", ",", "mask_ins_pred", ",", "padding_idx", ",", "unk_idx", ",", "eos_idx", "\n", ")", ":", "\n", "\n", "    ", "in_masks", "=", "in_tokens", ".", "ne", "(", "padding_idx", ")", "\n", "in_lengths", "=", "in_masks", ".", "sum", "(", "1", ")", "\n", "\n", "# HACK: hacky way to shift all the paddings to eos first.", "\n", "in_tokens", ".", "masked_fill_", "(", "~", "in_masks", ",", "eos_idx", ")", "\n", "mask_ins_pred", ".", "masked_fill_", "(", "~", "in_masks", "[", ":", ",", "1", ":", "]", ",", "0", ")", "\n", "\n", "out_lengths", "=", "in_lengths", "+", "mask_ins_pred", ".", "sum", "(", "1", ")", "\n", "out_max_len", "=", "out_lengths", ".", "max", "(", ")", "\n", "out_masks", "=", "(", "\n", "new_arange", "(", "out_lengths", ",", "out_max_len", ")", "[", "None", ",", ":", "]", "\n", "<", "out_lengths", "[", ":", ",", "None", "]", "\n", ")", "\n", "\n", "reordering", "=", "(", "mask_ins_pred", "+", "in_masks", "[", ":", ",", "1", ":", "]", ".", "long", "(", ")", ")", ".", "cumsum", "(", "1", ")", "\n", "out_tokens", "=", "(", "\n", "in_tokens", ".", "new_zeros", "(", "in_tokens", ".", "size", "(", "0", ")", ",", "out_max_len", ")", "\n", ".", "fill_", "(", "padding_idx", ")", "\n", ".", "masked_fill_", "(", "out_masks", ",", "unk_idx", ")", "\n", ")", "\n", "out_tokens", "[", ":", ",", "0", "]", "=", "in_tokens", "[", ":", ",", "0", "]", "\n", "out_tokens", ".", "scatter_", "(", "1", ",", "reordering", ",", "in_tokens", "[", ":", ",", "1", ":", "]", ")", "\n", "\n", "out_scores", "=", "None", "\n", "if", "in_scores", "is", "not", "None", ":", "\n", "        ", "in_scores", ".", "masked_fill_", "(", "~", "in_masks", ",", "0", ")", "\n", "out_scores", "=", "in_scores", ".", "new_zeros", "(", "*", "out_tokens", ".", "size", "(", ")", ")", "\n", "out_scores", "[", ":", ",", "0", "]", "=", "in_scores", "[", ":", ",", "0", "]", "\n", "out_scores", ".", "scatter_", "(", "1", ",", "reordering", ",", "in_scores", "[", ":", ",", "1", ":", "]", ")", "\n", "\n", "", "return", "out_tokens", ",", "out_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_utils._apply_ins_words": [[176, 190], ["in_tokens.eq", "in_tokens.masked_scatter", "in_scores.masked_scatter"], "function", ["None"], ["", "def", "_apply_ins_words", "(", "\n", "in_tokens", ",", "in_scores", ",", "word_ins_pred", ",", "word_ins_scores", ",", "unk_idx", "\n", ")", ":", "\n", "    ", "word_ins_masks", "=", "in_tokens", ".", "eq", "(", "unk_idx", ")", "\n", "out_tokens", "=", "in_tokens", ".", "masked_scatter", "(", "word_ins_masks", ",", "word_ins_pred", "[", "word_ins_masks", "]", ")", "\n", "\n", "if", "in_scores", "is", "not", "None", ":", "\n", "        ", "out_scores", "=", "in_scores", ".", "masked_scatter", "(", "\n", "word_ins_masks", ",", "word_ins_scores", "[", "word_ins_masks", "]", "\n", ")", "\n", "", "else", ":", "\n", "        ", "out_scores", "=", "None", "\n", "\n", "", "return", "out_tokens", ",", "out_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_utils._apply_del_words": [[192, 222], ["in_tokens.ne", "in_tokens.size", "word_del_pred.masked_fill_", "word_del_pred.masked_fill_", "in_tokens.masked_fill().gather", "in_tokens.eq", "in_tokens.eq", "fairseq.utils.new_arange().masked_fill_().sort", "in_scores.masked_fill().gather", "word_del_pred[].expand_as", "reordering[].expand_as", "in_attn.masked_fill().gather", "in_tokens.masked_fill", "fairseq.utils.new_arange().masked_fill_", "in_scores.masked_fill", "in_attn.masked_fill", "fairseq.utils.new_arange"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.new_arange"], ["", "def", "_apply_del_words", "(", "\n", "in_tokens", ",", "in_scores", ",", "in_attn", ",", "word_del_pred", ",", "padding_idx", ",", "bos_idx", ",", "eos_idx", "\n", ")", ":", "\n", "# apply deletion to a tensor", "\n", "    ", "in_masks", "=", "in_tokens", ".", "ne", "(", "padding_idx", ")", "\n", "bos_eos_masks", "=", "in_tokens", ".", "eq", "(", "bos_idx", ")", "|", "in_tokens", ".", "eq", "(", "eos_idx", ")", "\n", "\n", "max_len", "=", "in_tokens", ".", "size", "(", "1", ")", "\n", "word_del_pred", ".", "masked_fill_", "(", "~", "in_masks", ",", "1", ")", "\n", "word_del_pred", ".", "masked_fill_", "(", "bos_eos_masks", ",", "0", ")", "\n", "\n", "reordering", "=", "(", "\n", "new_arange", "(", "in_tokens", ")", "\n", ".", "masked_fill_", "(", "word_del_pred", ",", "max_len", ")", "\n", ".", "sort", "(", "1", ")", "[", "1", "]", "\n", ")", "\n", "\n", "out_tokens", "=", "in_tokens", ".", "masked_fill", "(", "word_del_pred", ",", "padding_idx", ")", ".", "gather", "(", "1", ",", "reordering", ")", "\n", "\n", "out_scores", "=", "None", "\n", "if", "in_scores", "is", "not", "None", ":", "\n", "        ", "out_scores", "=", "in_scores", ".", "masked_fill", "(", "word_del_pred", ",", "0", ")", ".", "gather", "(", "1", ",", "reordering", ")", "\n", "\n", "", "out_attn", "=", "None", "\n", "if", "in_attn", "is", "not", "None", ":", "\n", "        ", "_mask", "=", "word_del_pred", "[", ":", ",", ":", ",", "None", "]", ".", "expand_as", "(", "in_attn", ")", "\n", "_reordering", "=", "reordering", "[", ":", ",", ":", ",", "None", "]", ".", "expand_as", "(", "in_attn", ")", "\n", "out_attn", "=", "in_attn", ".", "masked_fill", "(", "_mask", ",", "0.", ")", ".", "gather", "(", "1", ",", "_reordering", ")", "\n", "\n", "", "return", "out_tokens", ",", "out_scores", ",", "out_attn", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_utils._skip": [[224, 247], ["isinstance", "isinstance", "isinstance", "isinstance", "x.size", "mask.size", "levenshtein_utils._skip", "levenshtein_utils._skip", "x.size", "mask.size", "x.items"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_utils._skip", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_utils._skip", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "_skip", "(", "x", ",", "mask", ")", ":", "\n", "    ", "\"\"\"\n    Getting sliced (dim=0) tensor by mask. Supporting tensor and list/dict of tensors.\n    \"\"\"", "\n", "if", "isinstance", "(", "x", ",", "int", ")", ":", "\n", "        ", "return", "x", "\n", "\n", "", "if", "x", "is", "None", ":", "\n", "        ", "return", "None", "\n", "\n", "", "if", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "if", "x", ".", "size", "(", "0", ")", "==", "mask", ".", "size", "(", "0", ")", ":", "\n", "            ", "return", "x", "[", "mask", "]", "\n", "", "elif", "x", ".", "size", "(", "1", ")", "==", "mask", ".", "size", "(", "0", ")", ":", "\n", "            ", "return", "x", "[", ":", ",", "mask", "]", "\n", "\n", "", "", "if", "isinstance", "(", "x", ",", "list", ")", ":", "\n", "        ", "return", "[", "_skip", "(", "x_i", ",", "mask", ")", "for", "x_i", "in", "x", "]", "\n", "\n", "", "if", "isinstance", "(", "x", ",", "dict", ")", ":", "\n", "        ", "return", "{", "k", ":", "_skip", "(", "v", ",", "mask", ")", "for", "k", ",", "v", "in", "x", ".", "items", "(", ")", "}", "\n", "\n", "", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_utils._skip_encoder_out": [[249, 254], ["mask.any", "encoder.reorder_encoder_out", "mask.nonzero().squeeze", "mask.nonzero"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_ensembles._EnsembleModelEncoder.reorder_encoder_out"], ["", "def", "_skip_encoder_out", "(", "encoder", ",", "encoder_out", ",", "mask", ")", ":", "\n", "    ", "if", "not", "mask", ".", "any", "(", ")", ":", "\n", "        ", "return", "encoder_out", "\n", "", "else", ":", "\n", "        ", "return", "encoder", ".", "reorder_encoder_out", "(", "encoder_out", ",", "mask", ".", "nonzero", "(", ")", ".", "squeeze", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.levenshtein_utils._fill": [[256, 285], ["mask.sum", "y.size", "torch.cat.size", "torch.cat.size", "y.size", "torch.cat", "torch.cat.dim", "y.dim", "mask.size", "torch.cat.size", "torch.cat.dim", "torch.cat.size", "torch.cat.dim", "dims.append", "torch.cat.size", "y.size", "torch.cat.dim", "torch.cat.size", "y.size", "y.size", "torch.cat.size", "torch.cat.size", "torch.cat.new_zeros().fill_", "torch.cat.dim", "torch.cat.new_zeros", "y.size", "y.size"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "", "def", "_fill", "(", "x", ",", "mask", ",", "y", ",", "padding_idx", ")", ":", "\n", "    ", "\"\"\"\n    Filling tensor x with y at masked positions (dim=0).\n    \"\"\"", "\n", "if", "x", "is", "None", ":", "\n", "        ", "return", "y", "\n", "", "assert", "x", ".", "dim", "(", ")", "==", "y", ".", "dim", "(", ")", "and", "mask", ".", "size", "(", "0", ")", "==", "x", ".", "size", "(", "0", ")", "\n", "assert", "x", ".", "dim", "(", ")", "==", "2", "or", "(", "x", ".", "dim", "(", ")", "==", "3", "and", "x", ".", "size", "(", "2", ")", "==", "y", ".", "size", "(", "2", ")", ")", "\n", "n_selected", "=", "mask", ".", "sum", "(", ")", "\n", "assert", "n_selected", "==", "y", ".", "size", "(", "0", ")", "\n", "\n", "if", "n_selected", "==", "x", ".", "size", "(", "0", ")", ":", "\n", "        ", "return", "y", "\n", "\n", "", "if", "x", ".", "size", "(", "1", ")", "<", "y", ".", "size", "(", "1", ")", ":", "\n", "        ", "dims", "=", "[", "x", ".", "size", "(", "0", ")", ",", "y", ".", "size", "(", "1", ")", "-", "x", ".", "size", "(", "1", ")", "]", "\n", "if", "x", ".", "dim", "(", ")", "==", "3", ":", "\n", "            ", "dims", ".", "append", "(", "x", ".", "size", "(", "2", ")", ")", "\n", "", "x", "=", "torch", ".", "cat", "(", "[", "x", ",", "x", ".", "new_zeros", "(", "*", "dims", ")", ".", "fill_", "(", "padding_idx", ")", "]", ",", "1", ")", "\n", "x", "[", "mask", "]", "=", "y", "\n", "", "elif", "x", ".", "size", "(", "1", ")", ">", "y", ".", "size", "(", "1", ")", ":", "\n", "        ", "x", "[", "mask", "]", "=", "padding_idx", "\n", "if", "x", ".", "dim", "(", ")", "==", "2", ":", "\n", "            ", "x", "[", "mask", ",", ":", "y", ".", "size", "(", "1", ")", "]", "=", "y", "\n", "", "else", ":", "\n", "            ", "x", "[", "mask", ",", ":", "y", ".", "size", "(", "1", ")", ",", ":", "]", "=", "y", "\n", "", "", "else", ":", "\n", "        ", "x", "[", "mask", "]", "=", "y", "\n", "", "return", "x", "\n", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.iterative_nonautoregressive_transformer.IterNATransformerModel.add_args": [[53, 62], ["fairseq.models.nat.NATransformerModel.add_args", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.add_args"], ["    ", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "NATransformerModel", ".", "add_args", "(", "parser", ")", "\n", "parser", ".", "add_argument", "(", "\"--train-step\"", ",", "type", "=", "int", ",", "\n", "help", "=", "\"number of refinement iterations during training\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--dae-ratio\"", ",", "type", "=", "float", ",", "\n", "help", "=", "\"the probability of switching to the denoising auto-encoder loss\"", ")", "\n", "parser", ".", "add_argument", "(", "\"--stochastic-approx\"", ",", "action", "=", "\"store_true\"", ",", "\n", "help", "=", "\"sampling from the decoder as the inputs for next iteration\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.iterative_nonautoregressive_transformer.IterNATransformerModel.build_model": [[63, 70], ["super().build_model", "getattr", "getattr", "getattr"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.build_model"], ["", "@", "classmethod", "\n", "def", "build_model", "(", "cls", ",", "args", ",", "task", ")", ":", "\n", "        ", "model", "=", "super", "(", ")", ".", "build_model", "(", "args", ",", "task", ")", "\n", "model", ".", "train_step", "=", "getattr", "(", "args", ",", "\"train_step\"", ",", "4", ")", "\n", "model", ".", "dae_ratio", "=", "getattr", "(", "args", ",", "\"dae_ratio\"", ",", "0.5", ")", "\n", "model", ".", "stochastic_approx", "=", "getattr", "(", "args", ",", "\"stochastic_approx\"", ",", "False", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.iterative_nonautoregressive_transformer.IterNATransformerModel.forward": [[71, 143], ["prev_output_tokens.masked_scatter.masked_scatter.size", "iterative_nonautoregressive_transformer.IterNATransformerModel.encoder", "iterative_nonautoregressive_transformer.IterNATransformerModel.decoder.forward_length", "iterative_nonautoregressive_transformer.IterNATransformerModel.decoder.forward_length_prediction", "range", "torch.cat", "torch.cat", "torch.cat", "iterative_nonautoregressive_transformer.IterNATransformerModel.decoder", "torch.cat.ne", "word_ins_outs.append", "word_ins_tgts.append", "word_ins_masks.append", "prev_output_tokens.masked_scatter.masked_scatter.masked_scatter", "iterative_nonautoregressive_transformer._sequential_poisoning", "iterative_nonautoregressive_transformer.IterNATransformerModel.max", "torch.rand", "len", "iterative_nonautoregressive_transformer.gumbel_noise"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqMultiModel.encoder", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_transformer.NATransformerDecoder.forward_length", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.nonautoregressive_transformer.NATransformerDecoder.forward_length_prediction", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqMultiModel.decoder", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.iterative_nonautoregressive_transformer._sequential_poisoning", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.iterative_nonautoregressive_transformer.gumbel_noise"], ["", "def", "forward", "(", "\n", "self", ",", "src_tokens", ",", "src_lengths", ",", "prev_output_tokens", ",", "tgt_tokens", ",", "**", "kwargs", "\n", ")", ":", "\n", "\n", "        ", "B", ",", "T", "=", "prev_output_tokens", ".", "size", "(", ")", "\n", "\n", "# encoding", "\n", "encoder_out", "=", "self", ".", "encoder", "(", "src_tokens", ",", "src_lengths", "=", "src_lengths", ",", "**", "kwargs", ")", "\n", "\n", "# length prediction", "\n", "length_out", "=", "self", ".", "decoder", ".", "forward_length", "(", "normalize", "=", "False", ",", "encoder_out", "=", "encoder_out", ")", "\n", "length_tgt", "=", "self", ".", "decoder", ".", "forward_length_prediction", "(", "length_out", ",", "encoder_out", ",", "tgt_tokens", ")", "\n", "\n", "# decoding", "\n", "word_ins_outs", ",", "word_ins_tgts", ",", "word_ins_masks", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "t", "in", "range", "(", "self", ".", "train_step", ")", ":", "\n", "            ", "word_ins_out", "=", "self", ".", "decoder", "(", "\n", "normalize", "=", "False", ",", "\n", "prev_output_tokens", "=", "prev_output_tokens", ",", "\n", "encoder_out", "=", "encoder_out", ",", "\n", "step", "=", "t", ",", "\n", ")", "\n", "word_ins_tgt", "=", "tgt_tokens", "\n", "word_ins_mask", "=", "word_ins_tgt", ".", "ne", "(", "self", ".", "pad", ")", "\n", "\n", "word_ins_outs", ".", "append", "(", "word_ins_out", ")", "\n", "word_ins_tgts", ".", "append", "(", "word_ins_tgt", ")", "\n", "word_ins_masks", ".", "append", "(", "word_ins_mask", ")", "\n", "\n", "if", "t", "<", "(", "self", ".", "train_step", "-", "1", ")", ":", "\n", "# prediction for next iteration", "\n", "                ", "if", "self", ".", "stochastic_approx", ":", "\n", "                    ", "word_ins_prediction", "=", "(", "\n", "word_ins_out", "+", "gumbel_noise", "(", "word_ins_out", ")", "\n", ")", ".", "max", "(", "-", "1", ")", "[", "1", "]", "\n", "", "else", ":", "\n", "                    ", "word_ins_prediction", "=", "word_ins_out", ".", "max", "(", "-", "1", ")", "[", "1", "]", "\n", "\n", "", "prev_output_tokens", "=", "prev_output_tokens", ".", "masked_scatter", "(", "\n", "word_ins_mask", ",", "word_ins_prediction", "[", "word_ins_mask", "]", "\n", ")", "\n", "\n", "if", "self", ".", "dae_ratio", ">", "0", ":", "\n", "# we do not perform denoising for the first iteration", "\n", "                    ", "corrputed", "=", "(", "\n", "torch", ".", "rand", "(", "size", "=", "(", "B", ",", ")", ",", "device", "=", "prev_output_tokens", ".", "device", ")", "\n", "<", "self", ".", "dae_ratio", "\n", ")", "\n", "corrputed_tokens", "=", "_sequential_poisoning", "(", "\n", "tgt_tokens", "[", "corrputed", "]", ",", "\n", "len", "(", "self", ".", "tgt_dict", ")", ",", "\n", "0.33", ",", "\n", "self", ".", "bos", ",", "\n", "self", ".", "eos", ",", "\n", "self", ".", "pad", ",", "\n", ")", "\n", "prev_output_tokens", "[", "corrputed", "]", "=", "corrputed_tokens", "\n", "\n", "# concat everything", "\n", "", "", "", "word_ins_out", "=", "torch", ".", "cat", "(", "word_ins_outs", ",", "0", ")", "\n", "word_ins_tgt", "=", "torch", ".", "cat", "(", "word_ins_tgts", ",", "0", ")", "\n", "word_ins_mask", "=", "torch", ".", "cat", "(", "word_ins_masks", ",", "0", ")", "\n", "\n", "return", "{", "\n", "\"word_ins\"", ":", "{", "\n", "\"out\"", ":", "word_ins_out", ",", "\"tgt\"", ":", "word_ins_tgt", ",", "\n", "\"mask\"", ":", "word_ins_mask", ",", "\"ls\"", ":", "self", ".", "args", ".", "label_smoothing", ",", "\n", "\"nll_loss\"", ":", "True", "\n", "}", ",", "\n", "\"length\"", ":", "{", "\n", "\"out\"", ":", "length_out", ",", "\"tgt\"", ":", "length_tgt", ",", "\n", "\"factor\"", ":", "self", ".", "decoder", ".", "length_loss_factor", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.iterative_nonautoregressive_transformer._sequential_poisoning": [[12, 44], ["torch.randint", "torch.rand", "torch.rand.masked_fill_", "range", "s.size", "s.size", "s.size", "replace_i.long", "swap_i.long"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["def", "_sequential_poisoning", "(", "s", ",", "V", ",", "beta", "=", "0.33", ",", "bos", "=", "2", ",", "eos", "=", "3", ",", "pad", "=", "1", ")", ":", "\n", "# s: input batch", "\n", "# V: vocabulary size", "\n", "    ", "rand_words", "=", "torch", ".", "randint", "(", "low", "=", "4", ",", "high", "=", "V", ",", "size", "=", "s", ".", "size", "(", ")", ",", "device", "=", "s", ".", "device", ")", "\n", "choices", "=", "torch", ".", "rand", "(", "size", "=", "s", ".", "size", "(", ")", ",", "device", "=", "s", ".", "device", ")", "\n", "choices", ".", "masked_fill_", "(", "(", "s", "==", "pad", ")", "|", "(", "s", "==", "bos", ")", "|", "(", "s", "==", "eos", ")", ",", "1", ")", "\n", "\n", "replace", "=", "choices", "<", "beta", "/", "3", "\n", "repeat", "=", "(", "choices", ">=", "beta", "/", "3", ")", "&", "(", "choices", "<", "beta", "*", "2", "/", "3", ")", "\n", "swap", "=", "(", "choices", ">=", "beta", "*", "2", "/", "3", ")", "&", "(", "choices", "<", "beta", ")", "\n", "safe", "=", "choices", ">=", "beta", "\n", "\n", "for", "i", "in", "range", "(", "s", ".", "size", "(", "1", ")", "-", "1", ")", ":", "\n", "        ", "rand_word", "=", "rand_words", "[", ":", ",", "i", "]", "\n", "next_word", "=", "s", "[", ":", ",", "i", "+", "1", "]", "\n", "self_word", "=", "s", "[", ":", ",", "i", "]", "\n", "\n", "replace_i", "=", "replace", "[", ":", ",", "i", "]", "\n", "swap_i", "=", "swap", "[", ":", ",", "i", "]", "&", "(", "next_word", "!=", "3", ")", "\n", "repeat_i", "=", "repeat", "[", ":", ",", "i", "]", "&", "(", "next_word", "!=", "3", ")", "\n", "safe_i", "=", "safe", "[", ":", ",", "i", "]", "|", "(", "(", "next_word", "==", "3", ")", "&", "(", "~", "replace_i", ")", ")", "\n", "\n", "s", "[", ":", ",", "i", "]", "=", "(", "\n", "self_word", "*", "(", "safe_i", "|", "repeat_i", ")", ".", "long", "(", ")", "\n", "+", "next_word", "*", "swap_i", ".", "long", "(", ")", "\n", "+", "rand_word", "*", "replace_i", ".", "long", "(", ")", "\n", ")", "\n", "s", "[", ":", ",", "i", "+", "1", "]", "=", "(", "\n", "next_word", "*", "(", "safe_i", "|", "replace_i", ")", ".", "long", "(", ")", "\n", "+", "self_word", "*", "(", "swap_i", "|", "repeat_i", ")", ".", "long", "(", ")", "\n", ")", "\n", "", "return", "s", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.iterative_nonautoregressive_transformer.gumbel_noise": [[46, 49], ["input.new_zeros().uniform_().add_().log_().neg_().add_().log_().neg_", "input.new_zeros().uniform_().add_().log_().neg_().add_().log_", "input.new_zeros().uniform_().add_().log_().neg_().add_", "input.new_zeros().uniform_().add_().log_().neg_", "input.new_zeros().uniform_().add_().log_", "input.new_zeros().uniform_().add_", "input.new_zeros().uniform_", "input.new_zeros", "input.size"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "gumbel_noise", "(", "input", ",", "TINY", "=", "1e-8", ")", ":", "\n", "    ", "return", "input", ".", "new_zeros", "(", "*", "input", ".", "size", "(", ")", ")", ".", "uniform_", "(", ")", ".", "add_", "(", "\n", "TINY", ")", ".", "log_", "(", ")", ".", "neg_", "(", ")", ".", "add_", "(", "TINY", ")", ".", "log_", "(", ")", ".", "neg_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.iterative_nonautoregressive_transformer.inat_base_architecture": [[147, 198], ["fairseq.models.register_model_architecture", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr", "getattr"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture"], ["", "", "@", "register_model_architecture", "(", "\n", "\"iterative_nonautoregressive_transformer\"", ",", "\"iterative_nonautoregressive_transformer\"", "\n", ")", "\n", "def", "inat_base_architecture", "(", "args", ")", ":", "\n", "    ", "args", ".", "encoder_embed_path", "=", "getattr", "(", "args", ",", "\"encoder_embed_path\"", ",", "None", ")", "\n", "args", ".", "encoder_embed_dim", "=", "getattr", "(", "args", ",", "\"encoder_embed_dim\"", ",", "512", ")", "\n", "args", ".", "encoder_ffn_embed_dim", "=", "getattr", "(", "args", ",", "\"encoder_ffn_embed_dim\"", ",", "2048", ")", "\n", "args", ".", "encoder_layers", "=", "getattr", "(", "args", ",", "\"encoder_layers\"", ",", "6", ")", "\n", "args", ".", "encoder_attention_heads", "=", "getattr", "(", "args", ",", "\"encoder_attention_heads\"", ",", "8", ")", "\n", "args", ".", "encoder_normalize_before", "=", "getattr", "(", "args", ",", "\"encoder_normalize_before\"", ",", "False", ")", "\n", "args", ".", "encoder_learned_pos", "=", "getattr", "(", "args", ",", "\"encoder_learned_pos\"", ",", "False", ")", "\n", "args", ".", "decoder_embed_path", "=", "getattr", "(", "args", ",", "\"decoder_embed_path\"", ",", "None", ")", "\n", "args", ".", "decoder_embed_dim", "=", "getattr", "(", "args", ",", "\"decoder_embed_dim\"", ",", "args", ".", "encoder_embed_dim", ")", "\n", "args", ".", "decoder_ffn_embed_dim", "=", "getattr", "(", "\n", "args", ",", "\"decoder_ffn_embed_dim\"", ",", "args", ".", "encoder_ffn_embed_dim", "\n", ")", "\n", "args", ".", "decoder_layers", "=", "getattr", "(", "args", ",", "\"decoder_layers\"", ",", "6", ")", "\n", "args", ".", "decoder_attention_heads", "=", "getattr", "(", "args", ",", "\"decoder_attention_heads\"", ",", "8", ")", "\n", "args", ".", "decoder_normalize_before", "=", "getattr", "(", "args", ",", "\"decoder_normalize_before\"", ",", "False", ")", "\n", "args", ".", "decoder_learned_pos", "=", "getattr", "(", "args", ",", "\"decoder_learned_pos\"", ",", "False", ")", "\n", "args", ".", "attention_dropout", "=", "getattr", "(", "args", ",", "\"attention_dropout\"", ",", "0.0", ")", "\n", "args", ".", "activation_dropout", "=", "getattr", "(", "args", ",", "\"activation_dropout\"", ",", "0.0", ")", "\n", "args", ".", "activation_fn", "=", "getattr", "(", "args", ",", "\"activation_fn\"", ",", "\"relu\"", ")", "\n", "args", ".", "dropout", "=", "getattr", "(", "args", ",", "\"dropout\"", ",", "0.1", ")", "\n", "args", ".", "adaptive_softmax_cutoff", "=", "getattr", "(", "args", ",", "\"adaptive_softmax_cutoff\"", ",", "None", ")", "\n", "args", ".", "adaptive_softmax_dropout", "=", "getattr", "(", "args", ",", "\"adaptive_softmax_dropout\"", ",", "0", ")", "\n", "args", ".", "share_decoder_input_output_embed", "=", "getattr", "(", "\n", "args", ",", "\"share_decoder_input_output_embed\"", ",", "False", "\n", ")", "\n", "args", ".", "share_all_embeddings", "=", "getattr", "(", "args", ",", "\"share_all_embeddings\"", ",", "False", ")", "\n", "args", ".", "no_token_positional_embeddings", "=", "getattr", "(", "\n", "args", ",", "\"no_token_positional_embeddings\"", ",", "False", "\n", ")", "\n", "args", ".", "adaptive_input", "=", "getattr", "(", "args", ",", "\"adaptive_input\"", ",", "False", ")", "\n", "args", ".", "apply_bert_init", "=", "getattr", "(", "args", ",", "\"apply_bert_init\"", ",", "False", ")", "\n", "\n", "args", ".", "decoder_output_dim", "=", "getattr", "(", "\n", "args", ",", "\"decoder_output_dim\"", ",", "args", ".", "decoder_embed_dim", "\n", ")", "\n", "args", ".", "decoder_input_dim", "=", "getattr", "(", "args", ",", "\"decoder_input_dim\"", ",", "args", ".", "decoder_embed_dim", ")", "\n", "\n", "# --- special arguments ---", "\n", "args", ".", "sg_length_pred", "=", "getattr", "(", "args", ",", "\"sg_length_pred\"", ",", "False", ")", "\n", "args", ".", "pred_length_offset", "=", "getattr", "(", "args", ",", "\"pred_length_offset\"", ",", "False", ")", "\n", "args", ".", "length_loss_factor", "=", "getattr", "(", "args", ",", "\"length_loss_factor\"", ",", "0.1", ")", "\n", "args", ".", "ngram_predictor", "=", "getattr", "(", "args", ",", "\"ngram_predictor\"", ",", "1", ")", "\n", "args", ".", "src_embedding_copy", "=", "getattr", "(", "args", ",", "\"src_embedding_copy\"", ",", "False", ")", "\n", "\n", "args", ".", "train_step", "=", "getattr", "(", "args", ",", "\"train_step\"", ",", "4", ")", "\n", "args", ".", "dae_ratio", "=", "getattr", "(", "args", ",", "\"dae_ratio\"", ",", "0.5", ")", "\n", "args", ".", "stochastic_approx", "=", "getattr", "(", "args", ",", "\"stochastic_approx\"", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.iterative_nonautoregressive_transformer.iter_nat_wmt_en_de": [[200, 206], ["fairseq.models.register_model_architecture", "iterative_nonautoregressive_transformer.inat_base_architecture"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.nat.iterative_nonautoregressive_transformer.inat_base_architecture"], ["", "@", "register_model_architecture", "(", "\n", "\"iterative_nonautoregressive_transformer\"", ",", "\n", "\"iterative_nonautoregressive_transformer_wmt_en_de\"", ",", "\n", ")", "\n", "def", "iter_nat_wmt_en_de", "(", "args", ")", ":", "\n", "    ", "inat_base_architecture", "(", "args", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dictionary.MaskedLMDictionary.__init__": [[14, 25], ["fairseq.data.Dictionary.__init__", "masked_lm_dictionary.MaskedLMDictionary.add_symbol", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol"], ["def", "__init__", "(", "\n", "self", ",", "\n", "pad", "=", "'<pad>'", ",", "\n", "eos", "=", "'</s>'", ",", "\n", "unk", "=", "'<unk>'", ",", "\n", "mask", "=", "'<mask>'", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "pad", ",", "eos", ",", "unk", ")", "\n", "self", ".", "mask_word", "=", "mask", "\n", "self", ".", "mask_index", "=", "self", ".", "add_symbol", "(", "mask", ")", "\n", "self", ".", "nspecial", "=", "len", "(", "self", ".", "symbols", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dictionary.MaskedLMDictionary.mask": [[26, 29], ["None"], "methods", ["None"], ["", "def", "mask", "(", "self", ")", ":", "\n", "        ", "\"\"\"Helper to get index of mask symbol\"\"\"", "\n", "return", "self", ".", "mask_index", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dictionary.BertDictionary.__init__": [[36, 51], ["masked_lm_dictionary.MaskedLMDictionary.__init__", "masked_lm_dictionary.BertDictionary.add_symbol", "masked_lm_dictionary.BertDictionary.add_symbol", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol"], ["def", "__init__", "(", "\n", "self", ",", "\n", "pad", "=", "'<pad>'", ",", "\n", "eos", "=", "'</s>'", ",", "\n", "unk", "=", "'<unk>'", ",", "\n", "mask", "=", "'<mask>'", ",", "\n", "cls", "=", "'<cls>'", ",", "\n", "sep", "=", "'<sep>'", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "pad", ",", "eos", ",", "unk", ",", "mask", ")", "\n", "self", ".", "cls_word", "=", "cls", "\n", "self", ".", "sep_word", "=", "sep", "\n", "self", ".", "cls_index", "=", "self", ".", "add_symbol", "(", "cls", ")", "\n", "self", ".", "sep_index", "=", "self", ".", "add_symbol", "(", "sep", ")", "\n", "self", ".", "nspecial", "=", "len", "(", "self", ".", "symbols", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dictionary.BertDictionary.cls": [[52, 55], ["None"], "methods", ["None"], ["", "def", "cls", "(", "self", ")", ":", "\n", "        ", "\"\"\"Helper to get index of cls symbol\"\"\"", "\n", "return", "self", ".", "cls_index", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dictionary.BertDictionary.sep": [[56, 59], ["None"], "methods", ["None"], ["", "def", "sep", "(", "self", ")", ":", "\n", "        ", "\"\"\"Helper to get index of sep symbol\"\"\"", "\n", "return", "self", ".", "sep_index", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dataset.MaskedLMDataset.__init__": [[57, 101], ["numpy.array", "isinstance", "isinstance", "isinstance"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "dataset", ":", "FairseqDataset", ",", "\n", "sizes", ":", "np", ".", "ndarray", ",", "\n", "vocab", ":", "Dictionary", ",", "\n", "pad_idx", ":", "int", ",", "\n", "mask_idx", ":", "int", ",", "\n", "classif_token_idx", ":", "int", ",", "\n", "sep_token_idx", ":", "int", ",", "\n", "seed", ":", "int", "=", "1", ",", "\n", "shuffle", ":", "bool", "=", "True", ",", "\n", "has_pairs", ":", "bool", "=", "True", ",", "\n", "segment_id", ":", "int", "=", "0", ",", "\n", "masking_ratio", ":", "float", "=", "0.15", ",", "\n", "masking_prob", ":", "float", "=", "0.8", ",", "\n", "random_token_prob", ":", "float", "=", "0.1", "\n", ")", ":", "\n", "# Make sure the input datasets are the ones supported", "\n", "        ", "assert", "(", "\n", "isinstance", "(", "dataset", ",", "TokenBlockDataset", ")", "or", "\n", "isinstance", "(", "dataset", ",", "BlockPairDataset", ")", "or", "\n", "isinstance", "(", "dataset", ",", "ConcatDataset", ")", "\n", ")", ",", "\"MaskedLMDataset only wraps TokenBlockDataset or BlockPairDataset or \"", "\"ConcatDataset\"", "\n", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "sizes", "=", "np", ".", "array", "(", "sizes", ")", "\n", "self", ".", "vocab", "=", "vocab", "\n", "self", ".", "pad_idx", "=", "pad_idx", "\n", "self", ".", "mask_idx", "=", "mask_idx", "\n", "self", ".", "classif_token_idx", "=", "classif_token_idx", "\n", "self", ".", "sep_token_idx", "=", "sep_token_idx", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "seed", "=", "seed", "\n", "self", ".", "has_pairs", "=", "has_pairs", "\n", "self", ".", "segment_id", "=", "segment_id", "\n", "self", ".", "masking_ratio", "=", "masking_ratio", "\n", "self", ".", "masking_prob", "=", "masking_prob", "\n", "self", ".", "random_token_prob", "=", "random_token_prob", "\n", "\n", "# If we have only one block then sizes needs to be updated to include", "\n", "# the classification token", "\n", "if", "not", "has_pairs", ":", "\n", "            ", "self", ".", "sizes", "=", "self", ".", "sizes", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dataset.MaskedLMDataset.__getitem__": [[102, 117], ["None"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "\n", "self", ",", "\n", "index", ":", "int", "\n", ")", ":", "\n", "# if has_pairs, then expect 2 blocks and a sentence target", "\n", "        ", "if", "self", ".", "has_pairs", ":", "\n", "            ", "(", "block_one", ",", "block_two", ",", "sentence_target", ")", "=", "self", ".", "dataset", "[", "index", "]", "\n", "", "else", ":", "\n", "            ", "block_one", "=", "self", ".", "dataset", "[", "index", "]", "\n", "\n", "", "return", "{", "\n", "\"id\"", ":", "index", ",", "\n", "\"block_one\"", ":", "block_one", ",", "\n", "\"block_two\"", ":", "block_two", "if", "self", ".", "has_pairs", "else", "None", ",", "\n", "\"sentence_target\"", ":", "sentence_target", "if", "self", ".", "has_pairs", "else", "None", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dataset.MaskedLMDataset.__len__": [[119, 121], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dataset.MaskedLMDataset._mask_block": [[122, 178], ["numpy.copy", "len", "math.ceil", "numpy.random.choice", "numpy.copy", "range", "numpy.random.random", "numpy.random.randint"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.copy", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.copy"], ["", "def", "_mask_block", "(", "\n", "self", ",", "\n", "sentence", ":", "np", ".", "ndarray", ",", "\n", "mask_idx", ":", "int", ",", "\n", "pad_idx", ":", "int", ",", "\n", "dictionary_token_range", ":", "Tuple", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Mask tokens for Masked Language Model training\n        Samples mask_ratio tokens that will be predicted by LM.\n\n        Note:This function may not be efficient enough since we had multiple\n        conversions between np and torch, we can replace them with torch\n        operators later.\n\n        Args:\n            sentence: 1d tensor to be masked\n            mask_idx: index to use for masking the sentence\n            pad_idx: index to use for masking the target for tokens we aren't\n                predicting\n            dictionary_token_range: range of indices in dictionary which can\n                be used for random word replacement\n                (e.g. without special characters)\n        Return:\n            masked_sent: masked sentence\n            target: target with words which we are not predicting replaced\n                by pad_idx\n        \"\"\"", "\n", "masked_sent", "=", "np", ".", "copy", "(", "sentence", ")", "\n", "sent_length", "=", "len", "(", "sentence", ")", "\n", "mask_num", "=", "math", ".", "ceil", "(", "sent_length", "*", "self", ".", "masking_ratio", ")", "\n", "mask", "=", "np", ".", "random", ".", "choice", "(", "sent_length", ",", "mask_num", ",", "replace", "=", "False", ")", "\n", "target", "=", "np", ".", "copy", "(", "sentence", ")", "\n", "\n", "for", "i", "in", "range", "(", "sent_length", ")", ":", "\n", "            ", "if", "i", "in", "mask", ":", "\n", "                ", "rand", "=", "np", ".", "random", ".", "random", "(", ")", "\n", "\n", "# replace with mask if probability is less than masking_prob", "\n", "# (Eg: 0.8)", "\n", "if", "rand", "<", "self", ".", "masking_prob", ":", "\n", "                    ", "masked_sent", "[", "i", "]", "=", "mask_idx", "\n", "\n", "# replace with random token if probability is less than", "\n", "# masking_prob + random_token_prob (Eg: 0.9)", "\n", "", "elif", "rand", "<", "(", "self", ".", "masking_prob", "+", "self", ".", "random_token_prob", ")", ":", "\n", "# sample random token from dictionary", "\n", "                    ", "masked_sent", "[", "i", "]", "=", "(", "\n", "np", ".", "random", ".", "randint", "(", "\n", "dictionary_token_range", "[", "0", "]", ",", "dictionary_token_range", "[", "1", "]", "\n", ")", "\n", ")", "\n", "", "", "else", ":", "\n", "                ", "target", "[", "i", "]", "=", "pad_idx", "\n", "\n", "", "", "return", "masked_sent", ",", "target", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dataset.MaskedLMDataset._collate": [[179, 269], ["len", "fairseq.data.data_utils.numpy_seed", "fairseq.data.data_utils.collate_tokens", "torch.LongTensor", "sum", "masked_lm_dataset.MaskedLMDataset._collate.merge"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.numpy_seed", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.data_utils.collate_tokens", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.translation_moe.score.merge"], ["", "def", "_collate", "(", "\n", "self", ",", "\n", "samples", ":", "List", "[", "Dict", "]", ",", "\n", "pad_idx", ":", "int", ",", "\n", "eos_idx", ":", "int", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Does the heavy lifting for creating a batch from the input list of\n        examples. The logic is as follows:\n            1. Mask the input blocks. In case has_pair is True then we have 2\n               blocks to mask.\n            2. Prepend the first masked block tensor with the special token\n               used as sentence embedding. Eg: CLS in BERT. This happens\n               irrespective of the value of has_pair.\n            3. If has_pair is True, then append the first masked block with the\n               special separator token (eg: SEP for BERT) and compute segment\n               label accordingly. In this case, also append the second masked\n               block with this special separator token and compute its segment\n               label.\n            4. For the targets tensor, prepend and append with padding index\n               accordingly.\n            5. Concatenate all tensors.\n        \"\"\"", "\n", "if", "len", "(", "samples", ")", "==", "0", ":", "\n", "            ", "return", "{", "}", "\n", "# To ensure determinism, we reset the state of the PRNG after every", "\n", "# batch based on the seed and the first id of the batch. This ensures", "\n", "# that across epochs we get the same mask for the same example. This", "\n", "# is needed for reproducibility and is how BERT does masking", "\n", "# TODO: Can we add deteminism without this constraint?", "\n", "", "with", "data_utils", ".", "numpy_seed", "(", "self", ".", "seed", "+", "samples", "[", "0", "]", "[", "\"id\"", "]", ")", ":", "\n", "            ", "for", "s", "in", "samples", ":", "\n", "\n", "# token range is needed for replacing with random token during", "\n", "# masking", "\n", "                ", "token_range", "=", "(", "self", ".", "vocab", ".", "nspecial", ",", "len", "(", "self", ".", "vocab", ")", ")", "\n", "\n", "# mask according to specified probabilities.", "\n", "masked_blk_one", ",", "masked_tgt_one", "=", "self", ".", "_mask_block", "(", "\n", "s", "[", "\"block_one\"", "]", ",", "self", ".", "mask_idx", ",", "self", ".", "pad_idx", ",", "token_range", ",", "\n", ")", "\n", "\n", "tokens", "=", "np", ".", "concatenate", "(", "[", "\n", "[", "self", ".", "classif_token_idx", "]", ",", "masked_blk_one", "\n", "]", ")", "\n", "targets", "=", "np", ".", "concatenate", "(", "[", "[", "self", ".", "pad_idx", "]", ",", "masked_tgt_one", "]", ")", "\n", "segments", "=", "np", ".", "ones", "(", "len", "(", "tokens", ")", ")", "*", "self", ".", "segment_id", "\n", "\n", "# if has_pairs is True then we need to add the SEP token to both", "\n", "# the blocks after masking and re-compute segments based on the new", "\n", "# lengths.", "\n", "if", "self", ".", "has_pairs", ":", "\n", "                    ", "tokens_one", "=", "np", ".", "concatenate", "(", "[", "tokens", ",", "[", "self", ".", "sep_token_idx", "]", "]", ")", "\n", "targets_one", "=", "np", ".", "concatenate", "(", "[", "targets", ",", "[", "self", ".", "pad_idx", "]", "]", ")", "\n", "\n", "masked_blk_two", ",", "masked_tgt_two", "=", "self", ".", "_mask_block", "(", "\n", "s", "[", "\"block_two\"", "]", ",", "self", ".", "mask_idx", ",", "self", ".", "pad_idx", ",", "token_range", ")", "\n", "tokens_two", "=", "np", ".", "concatenate", "(", "\n", "[", "masked_blk_two", ",", "[", "self", ".", "sep_token_idx", "]", "]", ")", "\n", "targets_two", "=", "np", ".", "concatenate", "(", "[", "masked_tgt_two", ",", "[", "self", ".", "pad_idx", "]", "]", ")", "\n", "\n", "# block + 1 sep + 1 special (CLS)", "\n", "segments_one", "=", "np", ".", "zeros", "(", "len", "(", "tokens_one", ")", ")", "\n", "# block + 1 sep", "\n", "segments_two", "=", "np", ".", "ones", "(", "len", "(", "tokens_two", ")", ")", "\n", "\n", "tokens", "=", "np", ".", "concatenate", "(", "[", "tokens_one", ",", "tokens_two", "]", ")", "\n", "targets", "=", "np", ".", "concatenate", "(", "[", "targets_one", ",", "targets_two", "]", ")", "\n", "segments", "=", "np", ".", "concatenate", "(", "[", "segments_one", ",", "segments_two", "]", ")", "\n", "\n", "", "s", "[", "\"source\"", "]", "=", "torch", ".", "LongTensor", "(", "tokens", ")", "\n", "s", "[", "\"segment_labels\"", "]", "=", "torch", ".", "LongTensor", "(", "segments", ")", "\n", "s", "[", "\"lm_target\"", "]", "=", "torch", ".", "LongTensor", "(", "targets", ")", "\n", "\n", "", "", "def", "merge", "(", "key", ")", ":", "\n", "            ", "return", "data_utils", ".", "collate_tokens", "(", "\n", "[", "s", "[", "key", "]", "for", "s", "in", "samples", "]", ",", "pad_idx", ",", "eos_idx", ",", "left_pad", "=", "False", "\n", ")", "\n", "", "return", "{", "\n", "\"id\"", ":", "torch", ".", "LongTensor", "(", "[", "s", "[", "\"id\"", "]", "for", "s", "in", "samples", "]", ")", ",", "\n", "\"ntokens\"", ":", "sum", "(", "len", "(", "s", "[", "\"source\"", "]", ")", "for", "s", "in", "samples", ")", ",", "\n", "\"net_input\"", ":", "{", "\n", "\"src_tokens\"", ":", "merge", "(", "\"source\"", ")", ",", "\n", "\"segment_labels\"", ":", "merge", "(", "\"segment_labels\"", ")", ",", "\n", "}", ",", "\n", "\"lm_target\"", ":", "merge", "(", "\"lm_target\"", ")", ",", "\n", "\"sentence_target\"", ":", "torch", ".", "LongTensor", "(", "\n", "[", "s", "[", "\"sentence_target\"", "]", "for", "s", "in", "samples", "]", "\n", ")", "if", "self", ".", "has_pairs", "else", "None", ",", "\n", "\"nsentences\"", ":", "len", "(", "samples", ")", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dataset.MaskedLMDataset.collater": [[271, 284], ["masked_lm_dataset.MaskedLMDataset._collate", "masked_lm_dataset.MaskedLMDataset.vocab.pad", "masked_lm_dataset.MaskedLMDataset.vocab.eos"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dataset.MaskedLMDataset._collate", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos"], ["", "def", "collater", "(", "\n", "self", ",", "\n", "samples", ":", "List", "[", "Dict", "]", "\n", ")", ":", "\n", "        ", "\"\"\"Merge a list of samples to form a mini-batch.\n\n        Args:\n            samples (List[dict]): samples to collate\n\n        Returns:\n            dict: a mini-batch of data\n        \"\"\"", "\n", "return", "self", ".", "_collate", "(", "samples", ",", "self", ".", "vocab", ".", "pad", "(", ")", ",", "self", ".", "vocab", ".", "eos", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dataset.MaskedLMDataset.num_tokens": [[285, 294], ["None"], "methods", ["None"], ["", "def", "num_tokens", "(", "\n", "self", ",", "\n", "index", ":", "int", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Return the number of tokens in a sample. This value is used to\n        enforce max-tokens during batching.\n        \"\"\"", "\n", "return", "self", ".", "sizes", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dataset.MaskedLMDataset.size": [[295, 304], ["None"], "methods", ["None"], ["", "def", "size", "(", "\n", "self", ",", "\n", "index", ":", "int", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Return an example's size as a float or tuple. This value is used when\n        filtering a dataset with max-positions.\n        \"\"\"", "\n", "return", "self", ".", "sizes", "[", "index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dataset.MaskedLMDataset.ordered_indices": [[305, 316], ["numpy.random.permutation", "order.append", "numpy.lexsort", "len", "numpy.arange", "len"], "methods", ["None"], ["", "def", "ordered_indices", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Return an ordered list of indices. Batches will be constructed based\n        on this order.\n        \"\"\"", "\n", "if", "self", ".", "shuffle", ":", "\n", "            ", "return", "np", ".", "random", ".", "permutation", "(", "len", "(", "self", ")", ")", "\n", "", "else", ":", "\n", "            ", "order", "=", "[", "np", ".", "arange", "(", "len", "(", "self", ")", ")", "]", "\n", "order", ".", "append", "(", "self", ".", "sizes", ")", "\n", "return", "np", ".", "lexsort", "(", "order", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dataset.MaskedLMDataset.supports_prefetch": [[317, 320], ["getattr"], "methods", ["None"], ["", "", "@", "property", "\n", "def", "supports_prefetch", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ".", "dataset", ",", "\"supports_prefetch\"", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dataset.MaskedLMDataset.prefetch": [[321, 323], ["masked_lm_dataset.MaskedLMDataset.dataset.prefetch"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.block_pair_dataset.BlockPairDataset.prefetch"], ["", "def", "prefetch", "(", "self", ",", "indices", ")", ":", "\n", "        ", "self", ".", "dataset", ".", "prefetch", "(", "indices", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.block_pair_dataset.BlockPairDataset.__init__": [[37, 100], ["fairseq.data.FairseqDataset.__init__", "dictionary.pad", "dictionary.eos", "dictionary.cls", "dictionary.mask", "dictionary.sep", "len", "len", "enumerate", "enumerate", "block_pair_dataset.BlockPairDataset._generate_sentence_pair", "sum", "math.ceil", "numpy.array", "numpy.array", "block_pair_dataset.BlockPairDataset._sent_to_dataset_index", "block_pair_dataset.BlockPairDataset._pair_sentences", "ValueError", "block_pair_dataset.BlockPairDataset.block_indices.append", "cur_doc.append", "min", "len", "block_pair_dataset.BlockPairDataset.__init__.block_at"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.eos", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dictionary.BertDictionary.cls", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dictionary.MaskedLMDictionary.mask", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dictionary.BertDictionary.sep", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.block_pair_dataset.BlockPairDataset._generate_sentence_pair", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.block_pair_dataset.BlockPairDataset._sent_to_dataset_index", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.block_pair_dataset.BlockPairDataset._pair_sentences"], ["def", "__init__", "(", "\n", "self", ",", "\n", "dataset", ",", "\n", "dictionary", ",", "\n", "sizes", ",", "\n", "block_size", ",", "\n", "break_mode", "=", "\"doc\"", ",", "\n", "short_seq_prob", "=", "0.1", ",", "\n", "doc_break_size", "=", "1", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "pad", "=", "dictionary", ".", "pad", "(", ")", "\n", "self", ".", "eos", "=", "dictionary", ".", "eos", "(", ")", "\n", "self", ".", "cls", "=", "dictionary", ".", "cls", "(", ")", "\n", "self", ".", "mask", "=", "dictionary", ".", "mask", "(", ")", "\n", "self", ".", "sep", "=", "dictionary", ".", "sep", "(", ")", "\n", "self", ".", "break_mode", "=", "break_mode", "\n", "self", ".", "dictionary", "=", "dictionary", "\n", "self", ".", "short_seq_prob", "=", "short_seq_prob", "\n", "self", ".", "block_indices", "=", "[", "]", "\n", "\n", "assert", "len", "(", "dataset", ")", "==", "len", "(", "sizes", ")", "\n", "\n", "if", "break_mode", "==", "\"doc\"", ":", "\n", "            ", "cur_doc", "=", "[", "]", "\n", "for", "sent_id", ",", "sz", "in", "enumerate", "(", "sizes", ")", ":", "\n", "                ", "assert", "doc_break_size", "==", "0", "or", "sz", "!=", "0", ",", "(", "\n", "\"when doc_break_size is non-zero, we expect documents to be\"", "\n", "\"separated by a blank line with a single eos.\"", "\n", ")", "\n", "# empty line as document separator", "\n", "if", "sz", "==", "doc_break_size", ":", "\n", "                    ", "if", "len", "(", "cur_doc", ")", "==", "0", ":", "\n", "                        ", "continue", "\n", "", "self", ".", "block_indices", ".", "append", "(", "cur_doc", ")", "\n", "cur_doc", "=", "[", "]", "\n", "", "else", ":", "\n", "                    ", "cur_doc", ".", "append", "(", "sent_id", ")", "\n", "", "", "max_num_tokens", "=", "block_size", "-", "3", "# Account for [CLS], [SEP], [SEP]", "\n", "self", ".", "sent_pairs", "=", "[", "]", "\n", "self", ".", "sizes", "=", "[", "]", "\n", "for", "doc_id", ",", "doc", "in", "enumerate", "(", "self", ".", "block_indices", ")", ":", "\n", "                ", "self", ".", "_generate_sentence_pair", "(", "doc", ",", "doc_id", ",", "max_num_tokens", ",", "sizes", ")", "\n", "", "", "elif", "break_mode", "is", "None", "or", "break_mode", "==", "\"none\"", ":", "\n", "# each block should have half of the block size since we are constructing block pair", "\n", "            ", "sent_length", "=", "(", "block_size", "-", "3", ")", "//", "2", "\n", "total_len", "=", "sum", "(", "dataset", ".", "sizes", ")", "\n", "length", "=", "math", ".", "ceil", "(", "total_len", "/", "sent_length", ")", "\n", "\n", "def", "block_at", "(", "i", ")", ":", "\n", "                ", "start", "=", "i", "*", "sent_length", "\n", "end", "=", "min", "(", "start", "+", "sent_length", ",", "total_len", ")", "\n", "return", "(", "start", ",", "end", ")", "\n", "\n", "", "sent_indices", "=", "np", ".", "array", "(", "[", "block_at", "(", "i", ")", "for", "i", "in", "range", "(", "length", ")", "]", ")", "\n", "sent_sizes", "=", "np", ".", "array", "(", "[", "e", "-", "s", "for", "s", ",", "e", "in", "sent_indices", "]", ")", "\n", "dataset_index", "=", "self", ".", "_sent_to_dataset_index", "(", "sent_sizes", ")", "\n", "\n", "# pair sentences", "\n", "self", ".", "_pair_sentences", "(", "dataset_index", ")", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "\"Invalid break_mode: \"", "+", "break_mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.block_pair_dataset.BlockPairDataset._pair_sentences": [[101, 123], ["enumerate", "block_pair_dataset.BlockPairDataset.sent_pairs.append", "block_pair_dataset.BlockPairDataset.sizes.append", "numpy.random.rand", "block_pair_dataset.BlockPairDataset._skip_sampling", "len", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.block_pair_dataset.BlockPairDataset._skip_sampling"], ["", "", "def", "_pair_sentences", "(", "self", ",", "dataset_index", ")", ":", "\n", "        ", "\"\"\"\n        Give a list of evenly cut blocks/sentences, pair these sentences with 50%\n        consecutive sentences and 50% random sentences.\n        This is used for none break mode\n        \"\"\"", "\n", "# pair sentences", "\n", "for", "sent_id", ",", "sent", "in", "enumerate", "(", "dataset_index", ")", ":", "\n", "            ", "next_sent_label", "=", "(", "\n", "1", "if", "np", ".", "random", ".", "rand", "(", ")", ">", "0.5", "and", "sent_id", "!=", "len", "(", "dataset_index", ")", "-", "1", "else", "0", "\n", ")", "\n", "if", "next_sent_label", ":", "\n", "                ", "next_sent", "=", "dataset_index", "[", "sent_id", "+", "1", "]", "\n", "", "else", ":", "\n", "                ", "next_sent", "=", "dataset_index", "[", "\n", "self", ".", "_skip_sampling", "(", "len", "(", "dataset_index", ")", ",", "[", "sent_id", ",", "sent_id", "+", "1", "]", ")", "\n", "]", "\n", "", "self", ".", "sent_pairs", ".", "append", "(", "(", "sent", ",", "next_sent", ",", "next_sent_label", ")", ")", "\n", "\n", "# The current blocks don't include the special tokens but the", "\n", "# sizes already account for this", "\n", "self", ".", "sizes", ".", "append", "(", "3", "+", "sent", "[", "3", "]", "+", "next_sent", "[", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.block_pair_dataset.BlockPairDataset._sent_to_dataset_index": [[124, 153], ["dataset_index.append", "len"], "methods", ["None"], ["", "", "def", "_sent_to_dataset_index", "(", "self", ",", "sent_sizes", ")", ":", "\n", "        ", "\"\"\"\n        Build index mapping block indices to the underlying dataset indices\n        \"\"\"", "\n", "dataset_index", "=", "[", "]", "\n", "ds_idx", ",", "ds_remaining", "=", "-", "1", ",", "0", "\n", "for", "to_consume", "in", "sent_sizes", ":", "\n", "            ", "sent_size", "=", "to_consume", "\n", "if", "ds_remaining", "==", "0", ":", "\n", "                ", "ds_idx", "+=", "1", "\n", "ds_remaining", "=", "sent_sizes", "[", "ds_idx", "]", "\n", "", "start_ds_idx", "=", "ds_idx", "\n", "start_offset", "=", "sent_sizes", "[", "ds_idx", "]", "-", "ds_remaining", "\n", "while", "to_consume", ">", "ds_remaining", ":", "\n", "                ", "to_consume", "-=", "ds_remaining", "\n", "ds_idx", "+=", "1", "\n", "ds_remaining", "=", "sent_sizes", "[", "ds_idx", "]", "\n", "", "ds_remaining", "-=", "to_consume", "\n", "dataset_index", ".", "append", "(", "\n", "(", "\n", "start_ds_idx", ",", "# starting index in dataset", "\n", "start_offset", ",", "# starting offset within starting index", "\n", "ds_idx", ",", "# ending index in dataset", "\n", "sent_size", ",", "# sentence length", "\n", ")", "\n", ")", "\n", "", "assert", "ds_remaining", "==", "0", "\n", "assert", "ds_idx", "==", "len", "(", "self", ".", "dataset", ")", "-", "1", "\n", "return", "dataset_index", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.block_pair_dataset.BlockPairDataset._generate_sentence_pair": [[154, 215], ["numpy.random.random", "numpy.random.randint", "len", "current_chunk.append", "sum", "sum", "block_pair_dataset.BlockPairDataset._truncate_sentences", "block_pair_dataset.BlockPairDataset.sent_pairs.append", "block_pair_dataset.BlockPairDataset.sizes.append", "len", "numpy.random.randint", "block_pair_dataset.BlockPairDataset._skip_sampling", "numpy.random.randint", "range", "sum", "len", "len", "len", "len", "sent_b.append", "sum", "len", "len", "numpy.random.rand", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.block_pair_dataset.BlockPairDataset._truncate_sentences", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.block_pair_dataset.BlockPairDataset._skip_sampling"], ["", "def", "_generate_sentence_pair", "(", "self", ",", "doc", ",", "doc_id", ",", "max_num_tokens", ",", "sizes", ")", ":", "\n", "        ", "\"\"\"\n        Go through a single document and genrate sentence paris from it\n        \"\"\"", "\n", "current_chunk", "=", "[", "]", "\n", "current_length", "=", "0", "\n", "curr", "=", "0", "\n", "# To provide more randomness, we decrease target seq length for parts of", "\n", "# samples (10% by default). Note that max_num_tokens is the hard threshold", "\n", "# for batching and will never be changed.", "\n", "target_seq_length", "=", "max_num_tokens", "\n", "if", "np", ".", "random", ".", "random", "(", ")", "<", "self", ".", "short_seq_prob", ":", "\n", "            ", "target_seq_length", "=", "np", ".", "random", ".", "randint", "(", "2", ",", "max_num_tokens", ")", "\n", "# loop through all sentences in document", "\n", "", "while", "curr", "<", "len", "(", "doc", ")", ":", "\n", "            ", "sent_id", "=", "doc", "[", "curr", "]", "\n", "current_chunk", ".", "append", "(", "sent_id", ")", "\n", "current_length", "=", "sum", "(", "sizes", "[", "current_chunk", "]", ")", "\n", "# split chunk and generate pair when exceed target_seq_length or", "\n", "# finish the loop", "\n", "if", "curr", "==", "len", "(", "doc", ")", "-", "1", "or", "current_length", ">=", "target_seq_length", ":", "\n", "# split the chunk into 2 parts", "\n", "                ", "a_end", "=", "1", "\n", "if", "len", "(", "current_chunk", ")", ">", "2", ":", "\n", "                    ", "a_end", "=", "np", ".", "random", ".", "randint", "(", "1", ",", "len", "(", "current_chunk", ")", "-", "1", ")", "\n", "", "sent_a", "=", "current_chunk", "[", ":", "a_end", "]", "\n", "len_a", "=", "sum", "(", "sizes", "[", "sent_a", "]", ")", "\n", "# generate next sentence label, note that if there is only 1 sentence", "\n", "# in current chunk, label is always 0", "\n", "next_sent_label", "=", "(", "\n", "1", "if", "np", ".", "random", ".", "rand", "(", ")", ">", "0.5", "and", "len", "(", "current_chunk", ")", "!=", "1", "else", "0", "\n", ")", "\n", "if", "not", "next_sent_label", ":", "\n", "# if next sentence label is 0, sample sent_b from a random doc", "\n", "                    ", "target_b_length", "=", "target_seq_length", "-", "len_a", "\n", "rand_doc_id", "=", "self", ".", "_skip_sampling", "(", "len", "(", "self", ".", "block_indices", ")", ",", "[", "doc_id", "]", ")", "\n", "random_doc", "=", "self", ".", "block_indices", "[", "rand_doc_id", "]", "\n", "random_start", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "random_doc", ")", ")", "\n", "sent_b", "=", "[", "]", "\n", "len_b", "=", "0", "\n", "for", "j", "in", "range", "(", "random_start", ",", "len", "(", "random_doc", ")", ")", ":", "\n", "                        ", "sent_b", ".", "append", "(", "random_doc", "[", "j", "]", ")", "\n", "len_b", "=", "sum", "(", "sizes", "[", "sent_b", "]", ")", "\n", "if", "len_b", ">=", "target_b_length", ":", "\n", "                            ", "break", "\n", "# return the second part of the chunk since it's not used", "\n", "", "", "num_unused_segments", "=", "len", "(", "current_chunk", ")", "-", "a_end", "\n", "curr", "-=", "num_unused_segments", "\n", "", "else", ":", "\n", "# if next sentence label is 1, use the second part of chunk as sent_B", "\n", "                    ", "sent_b", "=", "current_chunk", "[", "a_end", ":", "]", "\n", "len_b", "=", "sum", "(", "sizes", "[", "sent_b", "]", ")", "\n", "# currently sent_a and sent_B may be longer than max_num_tokens,", "\n", "# truncate them and return block idx and offsets for them", "\n", "", "sent_a", ",", "sent_b", "=", "self", ".", "_truncate_sentences", "(", "\n", "sent_a", ",", "sent_b", ",", "max_num_tokens", "\n", ")", "\n", "self", ".", "sent_pairs", ".", "append", "(", "(", "sent_a", ",", "sent_b", ",", "next_sent_label", ")", ")", "\n", "self", ".", "sizes", ".", "append", "(", "3", "+", "sent_a", "[", "3", "]", "+", "sent_b", "[", "3", "]", ")", "\n", "current_chunk", "=", "[", "]", "\n", "", "curr", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.block_pair_dataset.BlockPairDataset._skip_sampling": [[216, 223], ["numpy.random.randint", "len", "min", "len"], "methods", ["None"], ["", "", "def", "_skip_sampling", "(", "self", ",", "total", ",", "skip_ids", ")", ":", "\n", "        ", "\"\"\"\n        Generate a random integer which is not in skip_ids. Sample range is [0, total)\n        TODO: ids in skip_ids should be consecutive, we can extend it to more generic version later\n        \"\"\"", "\n", "rand_id", "=", "np", ".", "random", ".", "randint", "(", "total", "-", "len", "(", "skip_ids", ")", ")", "\n", "return", "rand_id", "if", "rand_id", "<", "min", "(", "skip_ids", ")", "else", "rand_id", "+", "len", "(", "skip_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.block_pair_dataset.BlockPairDataset._truncate_sentences": [[224, 258], ["block_pair_dataset.BlockPairDataset._cut_sentence", "block_pair_dataset.BlockPairDataset._cut_sentence", "sum", "sum", "numpy.random.rand", "numpy.random.rand"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.block_pair_dataset.BlockPairDataset._cut_sentence", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.block_pair_dataset.BlockPairDataset._cut_sentence"], ["", "def", "_truncate_sentences", "(", "self", ",", "sent_a", ",", "sent_b", ",", "max_num_tokens", ")", ":", "\n", "        ", "\"\"\"\n        Trancate a pair of sentence to limit total length under max_num_tokens\n        Logics:\n            1. Truncate longer sentence\n            2. Tokens to be truncated could be at the beginning or the end of the sentnce\n        Returns:\n            Truncated sentences represented by dataset idx\n        \"\"\"", "\n", "len_a", ",", "len_b", "=", "sum", "(", "self", ".", "dataset", ".", "sizes", "[", "sent_a", "]", ")", ",", "sum", "(", "self", ".", "dataset", ".", "sizes", "[", "sent_b", "]", ")", "\n", "front_cut_a", "=", "front_cut_b", "=", "end_cut_a", "=", "end_cut_b", "=", "0", "\n", "\n", "while", "True", ":", "\n", "            ", "total_length", "=", "(", "\n", "len_a", "+", "len_b", "-", "front_cut_a", "-", "front_cut_b", "-", "end_cut_a", "-", "end_cut_b", "\n", ")", "\n", "if", "total_length", "<=", "max_num_tokens", ":", "\n", "                ", "break", "\n", "\n", "", "if", "len_a", "-", "front_cut_a", "-", "end_cut_a", ">", "len_b", "-", "front_cut_b", "-", "end_cut_b", ":", "\n", "                ", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.5", ":", "\n", "                    ", "front_cut_a", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "end_cut_a", "+=", "1", "\n", "", "", "else", ":", "\n", "                ", "if", "np", ".", "random", ".", "rand", "(", ")", "<", "0.5", ":", "\n", "                    ", "front_cut_b", "+=", "1", "\n", "", "else", ":", "\n", "                    ", "end_cut_b", "+=", "1", "\n", "\n", "# calculate ds indices as well as offsets and return", "\n", "", "", "", "truncated_sent_a", "=", "self", ".", "_cut_sentence", "(", "sent_a", ",", "front_cut_a", ",", "end_cut_a", ")", "\n", "truncated_sent_b", "=", "self", ".", "_cut_sentence", "(", "sent_b", ",", "front_cut_b", ",", "end_cut_b", ")", "\n", "return", "truncated_sent_a", ",", "truncated_sent_b", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.block_pair_dataset.BlockPairDataset._cut_sentence": [[259, 280], ["sum"], "methods", ["None"], ["", "def", "_cut_sentence", "(", "self", ",", "sent", ",", "front_cut", ",", "end_cut", ")", ":", "\n", "        ", "\"\"\"\n        Cut a sentence based on the numbers of tokens to be cut from beginning and end\n        Represent the sentence as dataset idx and return\n        \"\"\"", "\n", "start_ds_idx", ",", "end_ds_idx", ",", "offset", "=", "sent", "[", "0", "]", ",", "sent", "[", "-", "1", "]", ",", "0", "\n", "target_len", "=", "sum", "(", "self", ".", "dataset", ".", "sizes", "[", "sent", "]", ")", "-", "front_cut", "-", "end_cut", "\n", "while", "front_cut", ">", "0", ":", "\n", "            ", "if", "self", ".", "dataset", ".", "sizes", "[", "start_ds_idx", "]", ">", "front_cut", ":", "\n", "                ", "offset", "+=", "front_cut", "\n", "break", "\n", "", "else", ":", "\n", "                ", "front_cut", "-=", "self", ".", "dataset", ".", "sizes", "[", "start_ds_idx", "]", "\n", "start_ds_idx", "+=", "1", "\n", "", "", "while", "end_cut", ">", "0", ":", "\n", "            ", "if", "self", ".", "dataset", ".", "sizes", "[", "end_ds_idx", "]", ">", "end_cut", ":", "\n", "                ", "break", "\n", "", "else", ":", "\n", "                ", "end_cut", "-=", "self", ".", "dataset", ".", "sizes", "[", "end_ds_idx", "]", "\n", "end_ds_idx", "-=", "1", "\n", "", "", "return", "start_ds_idx", ",", "offset", ",", "end_ds_idx", ",", "target_len", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.block_pair_dataset.BlockPairDataset._fetch_block": [[281, 290], ["torch.cat", "range"], "methods", ["None"], ["", "def", "_fetch_block", "(", "self", ",", "start_ds_idx", ",", "offset", ",", "end_ds_idx", ",", "length", ")", ":", "\n", "        ", "\"\"\"\n        Fetch a block of tokens based on its dataset idx\n        \"\"\"", "\n", "buffer", "=", "torch", ".", "cat", "(", "\n", "[", "self", ".", "dataset", "[", "idx", "]", "for", "idx", "in", "range", "(", "start_ds_idx", ",", "end_ds_idx", "+", "1", ")", "]", "\n", ")", "\n", "s", ",", "e", "=", "offset", ",", "offset", "+", "length", "\n", "return", "buffer", "[", "s", ":", "e", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.block_pair_dataset.BlockPairDataset.__getitem__": [[291, 296], ["block_pair_dataset.BlockPairDataset._fetch_block", "block_pair_dataset.BlockPairDataset._fetch_block"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.block_pair_dataset.BlockPairDataset._fetch_block", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.block_pair_dataset.BlockPairDataset._fetch_block"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "block1", ",", "block2", ",", "next_sent_label", "=", "self", ".", "sent_pairs", "[", "index", "]", "\n", "block1", "=", "self", ".", "_fetch_block", "(", "*", "block1", ")", "\n", "block2", "=", "self", ".", "_fetch_block", "(", "*", "block2", ")", "\n", "return", "block1", ",", "block2", ",", "next_sent_label", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.block_pair_dataset.BlockPairDataset.__len__": [[297, 299], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sizes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.block_pair_dataset.BlockPairDataset.supports_prefetch": [[300, 303], ["getattr"], "methods", ["None"], ["", "@", "property", "\n", "def", "supports_prefetch", "(", "self", ")", ":", "\n", "        ", "return", "getattr", "(", "self", ".", "dataset", ",", "\"supports_prefetch\"", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.block_pair_dataset.BlockPairDataset.prefetch": [[304, 313], ["set", "block_pair_dataset.BlockPairDataset.dataset.prefetch", "range", "range", "set.add", "set.add"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.block_pair_dataset.BlockPairDataset.prefetch", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.eval_lm.WordStat.add", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.eval_lm.WordStat.add"], ["", "def", "prefetch", "(", "self", ",", "indices", ")", ":", "\n", "        ", "prefetch_idx", "=", "set", "(", ")", "\n", "for", "index", "in", "indices", ":", "\n", "            ", "for", "block1", ",", "block2", ",", "_", "in", "[", "self", ".", "sent_pairs", "[", "index", "]", "]", ":", "\n", "                ", "for", "ds_idx", "in", "range", "(", "block1", "[", "0", "]", ",", "block1", "[", "2", "]", "+", "1", ")", ":", "\n", "                    ", "prefetch_idx", ".", "add", "(", "ds_idx", ")", "\n", "", "for", "ds_idx", "in", "range", "(", "block2", "[", "0", "]", ",", "block2", "[", "2", "]", "+", "1", ")", ":", "\n", "                    ", "prefetch_idx", ".", "add", "(", "ds_idx", ")", "\n", "", "", "", "self", ".", "dataset", ".", "prefetch", "(", "prefetch_idx", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.audio.raw_audio_dataset.RawAudioDataset.__init__": [[18, 38], ["FairseqDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "sample_rate", ",", "\n", "max_sample_size", "=", "None", ",", "\n", "min_sample_size", "=", "None", ",", "\n", "shuffle", "=", "True", ",", "\n", "min_length", "=", "0", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "sample_rate", "=", "sample_rate", "\n", "self", ".", "sizes", "=", "[", "]", "\n", "self", ".", "max_sample_size", "=", "(", "\n", "max_sample_size", "if", "max_sample_size", "is", "not", "None", "else", "sys", ".", "maxsize", "\n", ")", "\n", "self", ".", "min_sample_size", "=", "(", "\n", "min_sample_size", "if", "min_sample_size", "is", "not", "None", "else", "self", ".", "max_sample_size", "\n", ")", "\n", "self", ".", "min_length", "=", "min_length", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.audio.raw_audio_dataset.RawAudioDataset.__getitem__": [[39, 41], ["NotImplementedError"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.audio.raw_audio_dataset.RawAudioDataset.__len__": [[42, 44], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "sizes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.audio.raw_audio_dataset.RawAudioDataset.postprocess": [[45, 58], ["resample.dim", "torch.interpolate().squeeze", "torch.interpolate().squeeze", "resample.dim", "resample.mean", "raw_audio_dataset.RawAudioDataset.postprocess.resample"], "methods", ["None"], ["", "def", "postprocess", "(", "self", ",", "feats", ",", "curr_sample_rate", ")", ":", "\n", "        ", "def", "resample", "(", "x", ",", "factor", ")", ":", "\n", "            ", "return", "F", ".", "interpolate", "(", "x", ".", "view", "(", "1", ",", "1", ",", "-", "1", ")", ",", "scale_factor", "=", "factor", ")", ".", "squeeze", "(", ")", "\n", "\n", "", "if", "feats", ".", "dim", "(", ")", "==", "2", ":", "\n", "            ", "feats", "=", "feats", ".", "mean", "(", "-", "1", ")", "\n", "\n", "", "if", "curr_sample_rate", "!=", "self", ".", "sample_rate", ":", "\n", "            ", "factor", "=", "self", ".", "sample_rate", "/", "curr_sample_rate", "\n", "feats", "=", "resample", "(", "feats", ",", "factor", ")", "\n", "\n", "", "assert", "feats", ".", "dim", "(", ")", "==", "1", ",", "feats", ".", "dim", "(", ")", "\n", "return", "feats", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.audio.raw_audio_dataset.RawAudioDataset.crop_to_max_size": [[59, 68], ["len", "numpy.random.randint"], "methods", ["None"], ["", "def", "crop_to_max_size", "(", "self", ",", "wav", ",", "target_size", ")", ":", "\n", "        ", "size", "=", "len", "(", "wav", ")", "\n", "diff", "=", "size", "-", "target_size", "\n", "if", "diff", "<=", "0", ":", "\n", "            ", "return", "wav", "\n", "\n", "", "start", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "diff", "+", "1", ")", "\n", "end", "=", "size", "-", "diff", "+", "start", "\n", "return", "wav", "[", "start", ":", "end", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.audio.raw_audio_dataset.RawAudioDataset.collater": [[69, 98], ["min", "sources[].new", "enumerate", "len", "len", "min", "numpy.random.randint", "len", "zip", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "raw_audio_dataset.RawAudioDataset.crop_to_max_size", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.audio.raw_audio_dataset.RawAudioDataset.crop_to_max_size"], ["", "def", "collater", "(", "self", ",", "samples", ")", ":", "\n", "        ", "samples", "=", "[", "\n", "s", "for", "s", "in", "samples", "if", "s", "[", "\"source\"", "]", "is", "not", "None", "and", "len", "(", "s", "[", "\"source\"", "]", ")", ">", "0", "\n", "]", "\n", "if", "len", "(", "samples", ")", "==", "0", ":", "\n", "            ", "return", "{", "}", "\n", "\n", "", "sources", "=", "[", "s", "[", "\"source\"", "]", "for", "s", "in", "samples", "]", "\n", "sizes", "=", "[", "len", "(", "s", ")", "for", "s", "in", "sources", "]", "\n", "target_size", "=", "min", "(", "min", "(", "sizes", ")", ",", "self", ".", "max_sample_size", ")", "\n", "\n", "if", "target_size", "<", "self", ".", "min_length", ":", "\n", "            ", "return", "{", "}", "\n", "\n", "", "if", "self", ".", "min_sample_size", "<", "target_size", ":", "\n", "            ", "target_size", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "min_sample_size", ",", "target_size", "+", "1", ")", "\n", "\n", "", "collated_sources", "=", "sources", "[", "0", "]", ".", "new", "(", "len", "(", "sources", ")", ",", "target_size", ")", "\n", "for", "i", ",", "(", "source", ",", "size", ")", "in", "enumerate", "(", "zip", "(", "sources", ",", "sizes", ")", ")", ":", "\n", "            ", "diff", "=", "size", "-", "target_size", "\n", "assert", "diff", ">=", "0", "\n", "if", "diff", "==", "0", ":", "\n", "                ", "collated_sources", "[", "i", "]", "=", "source", "\n", "", "else", ":", "\n", "                ", "collated_sources", "[", "i", "]", "=", "self", ".", "crop_to_max_size", "(", "source", ",", "target_size", ")", "\n", "\n", "", "", "return", "{", "\n", "\"id\"", ":", "torch", ".", "LongTensor", "(", "[", "s", "[", "\"id\"", "]", "for", "s", "in", "samples", "]", ")", ",", "\n", "\"net_input\"", ":", "{", "\"source\"", ":", "collated_sources", "}", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.audio.raw_audio_dataset.RawAudioDataset.num_tokens": [[100, 102], ["raw_audio_dataset.RawAudioDataset.size"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size"], ["", "def", "num_tokens", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "size", "(", "index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.audio.raw_audio_dataset.RawAudioDataset.size": [[103, 107], ["min"], "methods", ["None"], ["", "def", "size", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"Return an example's size as a float or tuple. This value is used when\n        filtering a dataset with ``--max-positions``.\"\"\"", "\n", "return", "min", "(", "self", ".", "sizes", "[", "index", "]", ",", "self", ".", "max_sample_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.audio.raw_audio_dataset.RawAudioDataset.ordered_indices": [[108, 119], ["order.append", "numpy.lexsort", "numpy.random.permutation", "numpy.arange", "len", "len"], "methods", ["None"], ["", "def", "ordered_indices", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return an ordered list of indices. Batches will be constructed based\n        on this order.\"\"\"", "\n", "\n", "if", "self", ".", "shuffle", ":", "\n", "            ", "order", "=", "[", "np", ".", "random", ".", "permutation", "(", "len", "(", "self", ")", ")", "]", "\n", "", "else", ":", "\n", "            ", "order", "=", "[", "np", ".", "arange", "(", "len", "(", "self", ")", ")", "]", "\n", "\n", "", "order", ".", "append", "(", "self", ".", "sizes", ")", "\n", "return", "np", ".", "lexsort", "(", "order", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.audio.raw_audio_dataset.FileAudioDataset.__init__": [[122, 148], ["raw_audio_dataset.RawAudioDataset.__init__", "open", "f.readline().strip", "line.strip().split", "raw_audio_dataset.FileAudioDataset.fnames.append", "raw_audio_dataset.FileAudioDataset.sizes.append", "f.readline", "len", "int", "line.strip"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "manifest_path", ",", "\n", "sample_rate", ",", "\n", "max_sample_size", "=", "None", ",", "\n", "min_sample_size", "=", "None", ",", "\n", "shuffle", "=", "True", ",", "\n", "min_length", "=", "0", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "\n", "sample_rate", "=", "sample_rate", ",", "\n", "max_sample_size", "=", "max_sample_size", ",", "\n", "min_sample_size", "=", "min_sample_size", ",", "\n", "shuffle", "=", "shuffle", ",", "\n", "min_length", "=", "min_length", ",", "\n", ")", "\n", "\n", "self", ".", "fnames", "=", "[", "]", "\n", "\n", "with", "open", "(", "manifest_path", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "self", ".", "root_dir", "=", "f", ".", "readline", "(", ")", ".", "strip", "(", ")", "\n", "for", "line", "in", "f", ":", "\n", "                ", "items", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "\"\\t\"", ")", "\n", "assert", "len", "(", "items", ")", "==", "2", ",", "line", "\n", "self", ".", "fnames", ".", "append", "(", "items", "[", "0", "]", ")", "\n", "self", ".", "sizes", ".", "append", "(", "int", "(", "items", "[", "1", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.audio.raw_audio_dataset.FileAudioDataset.__getitem__": [[149, 157], ["os.path.join", "sf.read", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "raw_audio_dataset.FileAudioDataset.postprocess", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.dataset_reader.DatasetReader.read", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.audio.raw_audio_dataset.RawAudioDataset.postprocess"], ["", "", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "import", "soundfile", "as", "sf", "\n", "\n", "fname", "=", "os", ".", "path", ".", "join", "(", "self", ".", "root_dir", ",", "self", ".", "fnames", "[", "index", "]", ")", "\n", "wav", ",", "curr_sample_rate", "=", "sf", ".", "read", "(", "fname", ")", "\n", "feats", "=", "torch", ".", "from_numpy", "(", "wav", ")", ".", "float", "(", ")", "\n", "feats", "=", "self", ".", "postprocess", "(", "feats", ",", "curr_sample_rate", ")", "\n", "return", "{", "\"id\"", ":", "index", ",", "\"source\"", ":", "feats", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.nltk_tokenizer.NLTKTokenizer.__init__": [[12, 18], ["ImportError"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "source_lang", "=", "None", ",", "target_lang", "=", "None", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "from", "nltk", ".", "tokenize", "import", "word_tokenize", "\n", "self", ".", "word_tokenize", "=", "word_tokenize", "\n", "", "except", "ImportError", ":", "\n", "            ", "raise", "ImportError", "(", "'Please install nltk with: pip install nltk'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.nltk_tokenizer.NLTKTokenizer.encode": [[19, 21], ["nltk_tokenizer.NLTKTokenizer.word_tokenize"], "methods", ["None"], ["", "", "def", "encode", "(", "self", ",", "x", ":", "str", ")", "->", "str", ":", "\n", "        ", "return", "' '", ".", "join", "(", "self", ".", "word_tokenize", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.nltk_tokenizer.NLTKTokenizer.decode": [[22, 24], ["None"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "x", ":", "str", ")", "->", "str", ":", "\n", "        ", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.gpt2_bpe.GPT2BPE.add_args": [[19, 28], ["parser.add_argument", "parser.add_argument"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "# fmt: off", "\n", "        ", "parser", ".", "add_argument", "(", "'--gpt2-encoder-json'", ",", "type", "=", "str", ",", "\n", "default", "=", "DEFAULT_ENCODER_JSON", ",", "\n", "help", "=", "'path to encoder.json'", ")", "\n", "parser", ".", "add_argument", "(", "'--gpt2-vocab-bpe'", ",", "type", "=", "str", ",", "\n", "default", "=", "DEFAULT_VOCAB_BPE", ",", "\n", "help", "=", "'path to vocab.bpe'", ")", "\n", "# fmt: on", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.gpt2_bpe.GPT2BPE.__init__": [[30, 38], ["fairseq.file_utils.cached_path", "fairseq.file_utils.cached_path", "gpt2_bpe_utils.get_encoder", "getattr", "getattr"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_utils.cached_path", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_utils.cached_path", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.gpt2_bpe_utils.get_encoder"], ["", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "encoder_json", "=", "file_utils", ".", "cached_path", "(", "\n", "getattr", "(", "args", ",", "'gpt2_encoder_json'", ",", "DEFAULT_ENCODER_JSON", ")", "\n", ")", "\n", "vocab_bpe", "=", "file_utils", ".", "cached_path", "(", "\n", "getattr", "(", "args", ",", "'gpt2_vocab_bpe'", ",", "DEFAULT_VOCAB_BPE", ")", "\n", ")", "\n", "self", ".", "bpe", "=", "get_encoder", "(", "encoder_json", ",", "vocab_bpe", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.gpt2_bpe.GPT2BPE.encode": [[39, 41], ["map", "gpt2_bpe.GPT2BPE.bpe.encode"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.encode"], ["", "def", "encode", "(", "self", ",", "x", ":", "str", ")", "->", "str", ":", "\n", "        ", "return", "' '", ".", "join", "(", "map", "(", "str", ",", "self", ".", "bpe", ".", "encode", "(", "x", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.gpt2_bpe.GPT2BPE.decode": [[42, 46], ["gpt2_bpe.GPT2BPE.bpe.decode", "int", "x.split"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.decode"], ["", "def", "decode", "(", "self", ",", "x", ":", "str", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "bpe", ".", "decode", "(", "[", "\n", "int", "(", "tok", ")", "if", "tok", "not", "in", "{", "'<unk>'", ",", "'<mask>'", "}", "else", "tok", "\n", "for", "tok", "in", "x", ".", "split", "(", ")", "\n", "]", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.gpt2_bpe.GPT2BPE.is_beginning_of_word": [[48, 50], ["gpt2_bpe.GPT2BPE.decode().startswith", "gpt2_bpe.GPT2BPE.decode"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.decode"], ["", "def", "is_beginning_of_word", "(", "self", ",", "x", ":", "str", ")", "->", "bool", ":", "\n", "        ", "return", "self", ".", "decode", "(", "x", ")", ".", "startswith", "(", "' '", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.subword_nmt_bpe.SubwordNMTBPE.add_args": [[13, 20], ["parser.add_argument", "parser.add_argument"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "# fmt: off", "\n", "        ", "parser", ".", "add_argument", "(", "'--bpe-codes'", ",", "type", "=", "str", ",", "\n", "help", "=", "'path to subword NMT BPE'", ")", "\n", "parser", ".", "add_argument", "(", "'--bpe-separator'", ",", "default", "=", "'@@'", ",", "\n", "help", "=", "'BPE separator'", ")", "\n", "# fmt: on", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.subword_nmt_bpe.SubwordNMTBPE.__init__": [[22, 43], ["fairseq.file_utils.cached_path", "ValueError", "apply_bpe.create_parser", "apply_bpe.create_parser.parse_args", "apply_bpe.BPE", "ImportError"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_utils.cached_path"], ["", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "if", "args", ".", "bpe_codes", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'--bpe-codes is required for --bpe=subword_nmt'", ")", "\n", "", "codes", "=", "file_utils", ".", "cached_path", "(", "args", ".", "bpe_codes", ")", "\n", "try", ":", "\n", "            ", "from", "subword_nmt", "import", "apply_bpe", "\n", "bpe_parser", "=", "apply_bpe", ".", "create_parser", "(", ")", "\n", "bpe_args", "=", "bpe_parser", ".", "parse_args", "(", "[", "\n", "'--codes'", ",", "codes", ",", "\n", "'--separator'", ",", "args", ".", "bpe_separator", ",", "\n", "]", ")", "\n", "self", ".", "bpe", "=", "apply_bpe", ".", "BPE", "(", "\n", "bpe_args", ".", "codes", ",", "\n", "bpe_args", ".", "merges", ",", "\n", "bpe_args", ".", "separator", ",", "\n", "None", ",", "\n", "bpe_args", ".", "glossaries", ",", "\n", ")", "\n", "self", ".", "bpe_symbol", "=", "bpe_args", ".", "separator", "+", "' '", "\n", "", "except", "ImportError", ":", "\n", "            ", "raise", "ImportError", "(", "'Please install subword_nmt with: pip install subword-nmt'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.subword_nmt_bpe.SubwordNMTBPE.encode": [[44, 46], ["subword_nmt_bpe.SubwordNMTBPE.bpe.process_line"], "methods", ["None"], ["", "", "def", "encode", "(", "self", ",", "x", ":", "str", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "bpe", ".", "process_line", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.subword_nmt_bpe.SubwordNMTBPE.decode": [[47, 49], ["None"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "x", ":", "str", ")", "->", "str", ":", "\n", "        ", "return", "(", "x", "+", "' '", ")", ".", "replace", "(", "self", ".", "bpe_symbol", ",", "''", ")", ".", "rstrip", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.hf_bert_bpe.BertBPE.add_args": [[12, 20], ["parser.add_argument", "parser.add_argument"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "# fmt: off", "\n", "        ", "parser", ".", "add_argument", "(", "'--bpe-cased'", ",", "action", "=", "'store_true'", ",", "\n", "help", "=", "'set for cased BPE'", ",", "\n", "default", "=", "False", ")", "\n", "parser", ".", "add_argument", "(", "'--bpe-vocab-file'", ",", "type", "=", "str", ",", "\n", "help", "=", "'bpe vocab file.'", ")", "\n", "# fmt: on", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.hf_bert_bpe.BertBPE.__init__": [[22, 41], ["BertTokenizer", "BertTokenizer.from_pretrained", "ImportError"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.bart.model.BARTModel.from_pretrained"], ["", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "from", "pytorch_transformers", "import", "BertTokenizer", "\n", "from", "pytorch_transformers", ".", "tokenization_utils", "import", "clean_up_tokenization", "\n", "", "except", "ImportError", ":", "\n", "            ", "raise", "ImportError", "(", "\n", "'Please install 1.0.0 version of pytorch_transformers'", "\n", "'with: pip install pytorch-transformers'", "\n", ")", "\n", "\n", "", "if", "'bpe_vocab_file'", "in", "args", ":", "\n", "            ", "self", ".", "bert_tokenizer", "=", "BertTokenizer", "(", "\n", "args", ".", "bpe_vocab_file", ",", "\n", "do_lower_case", "=", "not", "args", ".", "bpe_cased", "\n", ")", "\n", "", "else", ":", "\n", "            ", "vocab_file_name", "=", "'bert-base-cased'", "if", "args", ".", "bpe_cased", "else", "'bert-base-uncased'", "\n", "self", ".", "bert_tokenizer", "=", "BertTokenizer", ".", "from_pretrained", "(", "vocab_file_name", ")", "\n", "self", ".", "clean_up_tokenization", "=", "clean_up_tokenization", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.hf_bert_bpe.BertBPE.encode": [[42, 44], ["hf_bert_bpe.BertBPE.bert_tokenizer.tokenize"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.hub_utils.GeneratorHubInterface.tokenize"], ["", "", "def", "encode", "(", "self", ",", "x", ":", "str", ")", "->", "str", ":", "\n", "        ", "return", "' '", ".", "join", "(", "self", ".", "bert_tokenizer", ".", "tokenize", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.hf_bert_bpe.BertBPE.decode": [[45, 48], ["hf_bert_bpe.BertBPE.clean_up_tokenization", "hf_bert_bpe.BertBPE.bert_tokenizer.convert_tokens_to_string", "x.split"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "x", ":", "str", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "clean_up_tokenization", "(", "\n", "self", ".", "bert_tokenizer", ".", "convert_tokens_to_string", "(", "x", ".", "split", "(", "' '", ")", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.hf_bert_bpe.BertBPE.is_beginning_of_word": [[50, 52], ["x.startswith"], "methods", ["None"], ["", "def", "is_beginning_of_word", "(", "self", ",", "x", ":", "str", ")", "->", "bool", ":", "\n", "        ", "return", "not", "x", ".", "startswith", "(", "'##'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.gpt2_bpe_utils.Encoder.__init__": [[47, 64], ["gpt2_bpe_utils.bytes_to_unicode", "dict", "gpt2_bpe_utils.Encoder.re.compile", "zip", "gpt2_bpe_utils.Encoder.encoder.items", "gpt2_bpe_utils.Encoder.byte_encoder.items", "range", "ImportError", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.gpt2_bpe_utils.bytes_to_unicode"], ["    ", "def", "__init__", "(", "self", ",", "encoder", ",", "bpe_merges", ",", "errors", "=", "'replace'", ")", ":", "\n", "        ", "self", ".", "encoder", "=", "encoder", "\n", "self", ".", "decoder", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "encoder", ".", "items", "(", ")", "}", "\n", "self", ".", "errors", "=", "errors", "# how to handle errors in decoding", "\n", "self", ".", "byte_encoder", "=", "bytes_to_unicode", "(", ")", "\n", "self", ".", "byte_decoder", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "self", ".", "byte_encoder", ".", "items", "(", ")", "}", "\n", "self", ".", "bpe_ranks", "=", "dict", "(", "zip", "(", "bpe_merges", ",", "range", "(", "len", "(", "bpe_merges", ")", ")", ")", ")", "\n", "self", ".", "cache", "=", "{", "}", "\n", "\n", "try", ":", "\n", "            ", "import", "regex", "as", "re", "\n", "self", ".", "re", "=", "re", "\n", "", "except", "ImportError", ":", "\n", "            ", "raise", "ImportError", "(", "'Please install regex with: pip install regex'", ")", "\n", "\n", "# Should haved added re.IGNORECASE so BPE merges can happen for capitalized versions of contractions", "\n", "", "self", ".", "pat", "=", "self", ".", "re", ".", "compile", "(", "r\"\"\"'s|'t|'re|'ve|'m|<A0>|<EOT>| <EOT>|<V>|<A1>|<A2>| <A0>|<P>| <P>|<A1>| <A1>| <A2>| <V>| </s>|</s>|'ll|'d| ?\\p{L}+| ?\\p{N}+| ?[^\\s\\p{L}\\p{N}]+|\\s+(?!\\S)|\\s+\"\"\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.gpt2_bpe_utils.Encoder.bpe": [[65, 108], ["tuple", "gpt2_bpe_utils.get_pairs", "min", "tuple", "len", "len", "gpt2_bpe_utils.get_pairs", "tuple.index", "tuple.extend", "tuple.append", "tuple.append", "gpt2_bpe_utils.Encoder.bpe_ranks.get", "tuple.extend", "float", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.gpt2_bpe_utils.get_pairs", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.gpt2_bpe_utils.get_pairs", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.index"], ["", "def", "bpe", "(", "self", ",", "token", ")", ":", "\n", "        ", "if", "token", "in", "[", "'<A0>'", ",", "'<A1>'", ",", "'<A2>'", ",", "'<V>'", ",", "'</s>'", ",", "'<P>'", ",", "'<EOT>'", ",", "'\\u0120<A0>'", ",", "'\\u0120<A1>'", ",", "'\\u0120<A2>'", ",", "'\\u0120<V>'", ",", "'\\u0120</s>'", ",", "'\\u0120<P>'", ",", "'\\u0120<EOT>'", "]", ":", "\n", "#print(\"inside bpe\",token)", "\n", "            ", "return", "token", "\n", "", "if", "token", "in", "self", ".", "cache", ":", "\n", "            ", "return", "self", ".", "cache", "[", "token", "]", "\n", "", "word", "=", "tuple", "(", "token", ")", "\n", "pairs", "=", "get_pairs", "(", "word", ")", "\n", "\n", "if", "not", "pairs", ":", "\n", "            ", "return", "token", "\n", "\n", "", "while", "True", ":", "\n", "            ", "bigram", "=", "min", "(", "pairs", ",", "key", "=", "lambda", "pair", ":", "self", ".", "bpe_ranks", ".", "get", "(", "pair", ",", "float", "(", "'inf'", ")", ")", ")", "\n", "if", "bigram", "not", "in", "self", ".", "bpe_ranks", ":", "\n", "                ", "break", "\n", "", "first", ",", "second", "=", "bigram", "\n", "new_word", "=", "[", "]", "\n", "i", "=", "0", "\n", "while", "i", "<", "len", "(", "word", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "j", "=", "word", ".", "index", "(", "first", ",", "i", ")", "\n", "new_word", ".", "extend", "(", "word", "[", "i", ":", "j", "]", ")", "\n", "i", "=", "j", "\n", "", "except", ":", "\n", "                    ", "new_word", ".", "extend", "(", "word", "[", "i", ":", "]", ")", "\n", "break", "\n", "\n", "", "if", "word", "[", "i", "]", "==", "first", "and", "i", "<", "len", "(", "word", ")", "-", "1", "and", "word", "[", "i", "+", "1", "]", "==", "second", ":", "\n", "                    ", "new_word", ".", "append", "(", "first", "+", "second", ")", "\n", "i", "+=", "2", "\n", "", "else", ":", "\n", "                    ", "new_word", ".", "append", "(", "word", "[", "i", "]", ")", "\n", "i", "+=", "1", "\n", "", "", "new_word", "=", "tuple", "(", "new_word", ")", "\n", "word", "=", "new_word", "\n", "if", "len", "(", "word", ")", "==", "1", ":", "\n", "                ", "break", "\n", "", "else", ":", "\n", "                ", "pairs", "=", "get_pairs", "(", "word", ")", "\n", "", "", "word", "=", "' '", ".", "join", "(", "word", ")", "\n", "self", ".", "cache", "[", "token", "]", "=", "word", "\n", "return", "word", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.gpt2_bpe_utils.Encoder.encode": [[109, 127], ["gpt2_bpe_utils.Encoder.re.findall", "bpe_tokens.extend", "token.encode", "gpt2_bpe_utils.Encoder.bpe().split", "gpt2_bpe_utils.Encoder.bpe"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.encode", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.gpt2_bpe_utils.Encoder.bpe"], ["", "def", "encode", "(", "self", ",", "text", ")", ":", "\n", "        ", "bpe_tokens", "=", "[", "]", "\n", "# print(\"Text is\",text)", "\n", "# print(\"All is\" ,self.re.findall(self.pat, text))", "\n", "for", "token", "in", "self", ".", "re", ".", "findall", "(", "self", ".", "pat", ",", "text", ")", ":", "\n", "            ", "token", "=", "''", ".", "join", "(", "self", ".", "byte_encoder", "[", "b", "]", "for", "b", "in", "token", ".", "encode", "(", "'utf-8'", ")", ")", "\n", "# if token in ['<A0>','<A1>','<A2>','<V>','</s>','\\u0120<A0>','\\u0120<A1>','\\u0120<A2>','\\u0120<V>','\\u0120</s>']:", "\n", "# print(\"Token is |\",token,\"|\")", "\n", "# token= token.lstrip()", "\n", "#     bpe_tokens.extend(self.encoder[token])", "\n", "# else:", "\n", "#     print(\"Token here is \",token)", "\n", "#     print(self.bpe(token),self.bpe(token))", "\n", "#     for bpe_token in self.bpe(token).split(' '):", "\n", "#         print(bpe_token,self.encoder[bpe_token])", "\n", "bpe_tokens", ".", "extend", "(", "self", ".", "encoder", "[", "bpe_token", "]", "for", "bpe_token", "in", "self", ".", "bpe", "(", "token", ")", ".", "split", "(", "' '", ")", ")", "\n", "#print(\"bpe tokens is \",self.re.findall(self.pat, text),'\\n',bpe_tokens)", "\n", "", "return", "bpe_tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.gpt2_bpe_utils.Encoder.decode": [[128, 137], ["bytearray().decode", "arr.append", "gpt2_bpe_utils.Encoder.decoder.get", "gpt2_bpe_utils.Encoder.decoder.get", "bytearray"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.decode"], ["", "def", "decode", "(", "self", ",", "tokens", ")", ":", "\n", "#print(tokens)", "\n", "        ", "arr", "=", "[", "]", "\n", "for", "token", "in", "tokens", ":", "\n", "            ", "arr", ".", "append", "(", "self", ".", "decoder", ".", "get", "(", "token", ",", "token", ")", ")", "\n", "#print(type(self.decoder.get(token, token)),print(self.decoder.get(token, token)))", "\n", "", "text", "=", "''", ".", "join", "(", "[", "self", ".", "decoder", ".", "get", "(", "token", ",", "token", ")", "for", "token", "in", "tokens", "]", ")", "\n", "text", "=", "bytearray", "(", "[", "self", ".", "byte_decoder", "[", "c", "]", "for", "c", "in", "text", "]", ")", ".", "decode", "(", "'utf-8'", ",", "errors", "=", "self", ".", "errors", ")", "\n", "return", "text", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.gpt2_bpe_utils.bytes_to_unicode": [[12, 33], ["functools.lru_cache", "range", "dict", "list", "chr", "zip", "list", "list", "range", "bs.append", "cs.append", "range", "range", "ord", "ord", "ord", "ord", "ord", "ord"], "function", ["None"], ["@", "lru_cache", "(", ")", "\n", "def", "bytes_to_unicode", "(", ")", ":", "\n", "    ", "\"\"\"\n    Returns list of utf-8 byte and a corresponding list of unicode strings.\n    The reversible bpe codes work on unicode strings.\n    This means you need a large # of unicode characters in your vocab if you want to avoid UNKs.\n    When you're at something like a 10B token dataset you end up needing around 5K for decent coverage.\n    This is a signficant percentage of your normal, say, 32K bpe vocab.\n    To avoid that, we want lookup tables between utf-8 bytes and unicode strings.\n    And avoids mapping to whitespace/control characters the bpe code barfs on.\n    \"\"\"", "\n", "bs", "=", "list", "(", "range", "(", "ord", "(", "\"!\"", ")", ",", "ord", "(", "\"~\"", ")", "+", "1", ")", ")", "+", "list", "(", "range", "(", "ord", "(", "\"\u00a1\"", ")", ",", "ord", "(", "\"\u00ac\"", ")", "+", "1", ")", ")", "+", "list", "(", "range", "(", "ord", "(", "\"\u00ae\"", ")", ",", "ord", "(", "\"\u00ff\"", ")", "+", "1", ")", ")", "\n", "cs", "=", "bs", "[", ":", "]", "\n", "n", "=", "0", "\n", "for", "b", "in", "range", "(", "2", "**", "8", ")", ":", "\n", "        ", "if", "b", "not", "in", "bs", ":", "\n", "            ", "bs", ".", "append", "(", "b", ")", "\n", "cs", ".", "append", "(", "2", "**", "8", "+", "n", ")", "\n", "n", "+=", "1", "\n", "", "", "cs", "=", "[", "chr", "(", "n", ")", "for", "n", "in", "cs", "]", "\n", "return", "dict", "(", "zip", "(", "bs", ",", "cs", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.gpt2_bpe_utils.get_pairs": [[34, 44], ["set", "set.add"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.eval_lm.WordStat.add"], ["", "def", "get_pairs", "(", "word", ")", ":", "\n", "    ", "\"\"\"Return set of symbol pairs in a word.\n    Word is represented as tuple of symbols (symbols being variable-length strings).\n    \"\"\"", "\n", "pairs", "=", "set", "(", ")", "\n", "prev_char", "=", "word", "[", "0", "]", "\n", "for", "char", "in", "word", "[", "1", ":", "]", ":", "\n", "        ", "pairs", ".", "add", "(", "(", "prev_char", ",", "char", ")", ")", "\n", "prev_char", "=", "char", "\n", "", "return", "pairs", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.gpt2_bpe_utils.get_encoder": [[138, 148], ["gpt2_bpe_utils.Encoder", "open", "json.load", "open", "f.read", "tuple", "merge_str.split", "f.read.split"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.load", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.dataset_reader.DatasetReader.read"], ["", "", "def", "get_encoder", "(", "encoder_json_path", ",", "vocab_bpe_path", ")", ":", "\n", "#edit to your encoder_json_path since contains special symbols", "\n", "    ", "encoder_json_path", "=", "\"./encoder.json\"", "\n", "with", "open", "(", "encoder_json_path", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "encoder", "=", "json", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "vocab_bpe_path", ",", "'r'", ",", "encoding", "=", "\"utf-8\"", ")", "as", "f", ":", "\n", "        ", "bpe_data", "=", "f", ".", "read", "(", ")", "\n", "", "bpe_merges", "=", "[", "tuple", "(", "merge_str", ".", "split", "(", ")", ")", "for", "merge_str", "in", "bpe_data", ".", "split", "(", "'\\n'", ")", "[", "1", ":", "-", "1", "]", "]", "\n", "return", "Encoder", "(", "\n", "encoder", "=", "encoder", ",", "\n", "bpe_merges", "=", "bpe_merges", ",", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.moses_tokenizer.MosesTokenizer.add_args": [[12, 23], ["parser.add_argument", "parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "# fmt: off", "\n", "        ", "parser", ".", "add_argument", "(", "'--moses-source-lang'", ",", "metavar", "=", "'SRC'", ",", "\n", "help", "=", "'source language'", ")", "\n", "parser", ".", "add_argument", "(", "'--moses-target-lang'", ",", "metavar", "=", "'TARGET'", ",", "\n", "help", "=", "'target language'", ")", "\n", "parser", ".", "add_argument", "(", "'--moses-no-dash-splits'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'don\\'t apply dash split rules'", ")", "\n", "parser", ".", "add_argument", "(", "'--moses-no-escape'", ",", "action", "=", "'store_true'", ",", "default", "=", "False", ",", "\n", "help", "=", "'don\\'t perform HTML escaping on apostrophy, quotes, etc.'", ")", "\n", "# fmt: on", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.moses_tokenizer.MosesTokenizer.__init__": [[25, 39], ["getattr", "getattr", "getattr", "getattr", "moses_tokenizer.MosesTokenizer", "MosesDetokenizer", "ImportError"], "methods", ["None"], ["", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "args", "=", "args", "\n", "\n", "if", "getattr", "(", "args", ",", "'moses_source_lang'", ",", "None", ")", "is", "None", ":", "\n", "            ", "args", ".", "moses_source_lang", "=", "getattr", "(", "args", ",", "'source_lang'", ",", "'en'", ")", "\n", "", "if", "getattr", "(", "args", ",", "'moses_target_lang'", ",", "None", ")", "is", "None", ":", "\n", "            ", "args", ".", "moses_target_lang", "=", "getattr", "(", "args", ",", "'target_lang'", ",", "'en'", ")", "\n", "\n", "", "try", ":", "\n", "            ", "from", "sacremoses", "import", "MosesTokenizer", ",", "MosesDetokenizer", "\n", "self", ".", "tok", "=", "MosesTokenizer", "(", "args", ".", "moses_source_lang", ")", "\n", "self", ".", "detok", "=", "MosesDetokenizer", "(", "args", ".", "moses_target_lang", ")", "\n", "", "except", "ImportError", ":", "\n", "            ", "raise", "ImportError", "(", "'Please install Moses tokenizer with: pip install sacremoses'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.moses_tokenizer.MosesTokenizer.encode": [[40, 46], ["moses_tokenizer.MosesTokenizer.tok.tokenize"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.hub_utils.GeneratorHubInterface.tokenize"], ["", "", "def", "encode", "(", "self", ",", "x", ":", "str", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "tok", ".", "tokenize", "(", "\n", "x", ",", "\n", "aggressive_dash_splits", "=", "(", "not", "self", ".", "args", ".", "moses_no_dash_splits", ")", ",", "\n", "return_str", "=", "True", ",", "\n", "escape", "=", "(", "not", "self", ".", "args", ".", "moses_no_escape", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.moses_tokenizer.MosesTokenizer.decode": [[48, 50], ["moses_tokenizer.MosesTokenizer.detok.detokenize", "x.split"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.hub_utils.GeneratorHubInterface.detokenize"], ["", "def", "decode", "(", "self", ",", "x", ":", "str", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "detok", ".", "detokenize", "(", "x", ".", "split", "(", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.space_tokenizer.SpaceTokenizer.__init__": [[14, 16], ["re.compile"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "source_lang", "=", "None", ",", "target_lang", "=", "None", ")", ":", "\n", "        ", "self", ".", "space_tok", "=", "re", ".", "compile", "(", "r\"\\s+\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.space_tokenizer.SpaceTokenizer.encode": [[17, 19], ["space_tokenizer.SpaceTokenizer.space_tok.sub"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "x", ":", "str", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "space_tok", ".", "sub", "(", "' '", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.space_tokenizer.SpaceTokenizer.decode": [[20, 22], ["None"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "x", ":", "str", ")", "->", "str", ":", "\n", "        ", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.fastbpe.fastBPE.add_args": [[13, 18], ["parser.add_argument"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "# fmt: off", "\n", "        ", "parser", ".", "add_argument", "(", "'--bpe-codes'", ",", "type", "=", "str", ",", "\n", "help", "=", "'path to fastBPE BPE'", ")", "\n", "# fmt: on", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.fastbpe.fastBPE.__init__": [[20, 30], ["fairseq.file_utils.cached_path", "ValueError", "fastBPE.fastBPE", "ImportError"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_utils.cached_path"], ["", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "if", "args", ".", "bpe_codes", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'--bpe-codes is required for --bpe=subword_nmt'", ")", "\n", "", "codes", "=", "file_utils", ".", "cached_path", "(", "args", ".", "bpe_codes", ")", "\n", "try", ":", "\n", "            ", "import", "fastBPE", "\n", "self", ".", "bpe", "=", "fastBPE", ".", "fastBPE", "(", "codes", ")", "\n", "self", ".", "bpe_symbol", "=", "\"@@ \"", "\n", "", "except", "ImportError", ":", "\n", "            ", "raise", "ImportError", "(", "'Please install fastBPE with: pip install fastBPE'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.fastbpe.fastBPE.encode": [[31, 33], ["fastbpe.fastBPE.bpe.apply"], "methods", ["None"], ["", "", "def", "encode", "(", "self", ",", "x", ":", "str", ")", "->", "str", ":", "\n", "        ", "return", "self", ".", "bpe", ".", "apply", "(", "[", "x", "]", ")", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.fastbpe.fastBPE.decode": [[34, 36], ["None"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "x", ":", "str", ")", "->", "str", ":", "\n", "        ", "return", "(", "x", "+", "' '", ")", ".", "replace", "(", "self", ".", "bpe_symbol", ",", "''", ")", ".", "rstrip", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.add_args": [[13, 18], ["parser.add_argument"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "# fmt: off", "\n", "        ", "parser", ".", "add_argument", "(", "'--sentencepiece-vocab'", ",", "type", "=", "str", ",", "\n", "help", "=", "'path to sentencepiece vocab'", ")", "\n", "# fmt: on", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.__init__": [[20, 28], ["fairseq.file_utils.cached_path", "spm.SentencePieceProcessor", "sentencepiece_bpe.SentencepieceBPE.sp.Load", "ImportError"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_utils.cached_path"], ["", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "vocab", "=", "file_utils", ".", "cached_path", "(", "args", ".", "sentencepiece_vocab", ")", "\n", "try", ":", "\n", "            ", "import", "sentencepiece", "as", "spm", "\n", "self", ".", "sp", "=", "spm", ".", "SentencePieceProcessor", "(", ")", "\n", "self", ".", "sp", ".", "Load", "(", "vocab", ")", "\n", "", "except", "ImportError", ":", "\n", "            ", "raise", "ImportError", "(", "'Please install sentencepiece with: pip install sentencepiece'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.encode": [[29, 31], ["sentencepiece_bpe.SentencepieceBPE.sp.EncodeAsPieces"], "methods", ["None"], ["", "", "def", "encode", "(", "self", ",", "x", ":", "str", ")", "->", "str", ":", "\n", "        ", "return", "' '", ".", "join", "(", "self", ".", "sp", ".", "EncodeAsPieces", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.decode": [[32, 34], ["x.replace().replace().strip", "x.replace().replace", "x.replace"], "methods", ["None"], ["", "def", "decode", "(", "self", ",", "x", ":", "str", ")", "->", "str", ":", "\n", "        ", "return", "x", ".", "replace", "(", "' '", ",", "''", ")", ".", "replace", "(", "'\\u2581'", ",", "' '", ")", ".", "strip", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.is_beginning_of_word": [[35, 44], ["x.startswith"], "methods", ["None"], ["", "def", "is_beginning_of_word", "(", "self", ",", "x", ":", "str", ")", "->", "bool", ":", "\n", "        ", "if", "x", "in", "[", "'<unk>'", ",", "'<s>'", ",", "'</s>'", ",", "'<pad>'", "]", ":", "\n", "# special elements are always considered beginnings", "\n", "# HACK: this logic is already present in fairseq/tasks/masked_lm.py", "\n", "# but these special tokens are also contained in the sentencepiece", "\n", "# vocabulary which causes duplicate special tokens. This hack makes", "\n", "# sure that they are all taken into account.", "\n", "            ", "return", "True", "\n", "", "return", "x", ".", "startswith", "(", "'\\u2581'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.utils.get_whole_word_mask": [[10, 29], ["fairseq.data.encoders.build_bpe", "torch.ByteTensor", "tok.startswith", "list", "encoders.build_bpe.is_beginning_of_word", "map", "range", "len"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.encoders.sentencepiece_bpe.SentencepieceBPE.is_beginning_of_word"], ["        ", "for", "line", "in", "scorer_file", ":", "\n", "            ", "if", "line", ".", "startswith", "(", "\"#\"", ")", ":", "\n", "                ", "continue", "\n", "", "fields", "=", "line", ".", "strip", "(", ")", ".", "split", "(", "'\\t'", ")", "# expect coef and then name", "\n", "coefs", ".", "append", "(", "float", "(", "fields", "[", "0", "]", ")", ")", "\n", "model_info", ".", "append", "(", "fields", "[", "1", ":", "]", ")", "\n", "scorer_config", ".", "append", "(", "fields", ")", "\n", "", "", "print", "(", "\"Coefs:\"", ",", "coefs", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "return", "coefs", ",", "model_info", ",", "scorer_config", "\n", "\n", "\n", "# OLD VERSION", "\n", "# def load_scorers(filepath, bart, cuda=False):", "\n", "#     scorer_config, scorers, coefs = [], [], []", "\n", "#     print(\"Creating scorers\", file=sys.stderr)", "\n", "#     with open(filepath) as scorer_file:", "\n", "#         for line in scorer_file:", "\n", "#             fields = line.strip().split('\\t')", "\n", "#             scorer_config.append(fields)", "\n", "#             weight, module_path, classname = fields[:3]", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_masked_lm.DummyMaskedLMTask.add_args": [[16, 23], ["parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add task-specific arguments to the parser.\"\"\"", "\n", "parser", ".", "add_argument", "(", "'--dict-size'", ",", "default", "=", "50000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset-size'", ",", "default", "=", "100000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--tokens-per-sample'", ",", "default", "=", "512", ",", "type", "=", "int", ",", "\n", "help", "=", "'max number of total tokens over all segments '", "\n", "'per sample for BERT dataset'", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_masked_lm.DummyMaskedLMTask.__init__": [[25, 45], ["fairseq.tasks.FairseqTask.__init__", "dictionary.add_symbol", "torch.arange", "seq.clone", "torch.full_like", "len", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol"], ["", "def", "__init__", "(", "self", ",", "args", ",", "dictionary", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "self", ".", "dictionary", "=", "dictionary", "\n", "self", ".", "seed", "=", "args", ".", "seed", "\n", "\n", "# add mask token", "\n", "self", ".", "mask_idx", "=", "dictionary", ".", "add_symbol", "(", "'<mask>'", ")", "\n", "assert", "len", "(", "dictionary", ")", "%", "8", "==", "0", "\n", "\n", "mask_idx", "=", "0", "\n", "pad_idx", "=", "1", "\n", "seq", "=", "torch", ".", "arange", "(", "args", ".", "tokens_per_sample", ")", "+", "pad_idx", "+", "1", "\n", "mask", "=", "torch", ".", "arange", "(", "2", ",", "args", ".", "tokens_per_sample", ",", "7", ")", "# ~15%", "\n", "src", "=", "seq", ".", "clone", "(", ")", "\n", "src", "[", "mask", "]", "=", "mask_idx", "\n", "tgt", "=", "torch", ".", "full_like", "(", "seq", ",", "pad_idx", ")", "\n", "tgt", "[", "mask", "]", "=", "seq", "[", "mask", "]", "\n", "\n", "self", ".", "dummy_src", "=", "src", "\n", "self", ".", "dummy_tgt", "=", "tgt", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_masked_lm.DummyMaskedLMTask.setup_task": [[46, 55], ["fairseq.data.Dictionary", "range", "print", "cls", "fairseq.data.Dictionary.add_symbol", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dictionary.BertDictionary.cls", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol"], ["", "@", "classmethod", "\n", "def", "setup_task", "(", "cls", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Setup the task. \"\"\"", "\n", "dictionary", "=", "Dictionary", "(", ")", "\n", "for", "i", "in", "range", "(", "args", ".", "dict_size", ")", ":", "\n", "            ", "dictionary", ".", "add_symbol", "(", "'word{}'", ".", "format", "(", "i", ")", ")", "\n", "", "print", "(", "'| dictionary: {} types'", ".", "format", "(", "len", "(", "dictionary", ")", ")", ")", "\n", "\n", "return", "cls", "(", "args", ",", "dictionary", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_masked_lm.DummyMaskedLMTask.load_dataset": [[56, 75], ["dummy_masked_lm.DummyDataset", "torch.stack", "torch.stack", "torch.full", "range", "range"], "methods", ["None"], ["", "def", "load_dataset", "(", "self", ",", "split", ",", "epoch", "=", "0", ",", "combine", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Load a given dataset split.\n        Args:\n            split (str): name of the split (e.g., train, valid, test)\n        \"\"\"", "\n", "bsz", "=", "self", ".", "args", ".", "max_sentences", "\n", "self", ".", "datasets", "[", "split", "]", "=", "DummyDataset", "(", "\n", "{", "\n", "'id'", ":", "1", ",", "\n", "'net_input'", ":", "{", "\n", "'src_tokens'", ":", "torch", ".", "stack", "(", "[", "self", ".", "dummy_src", "for", "_", "in", "range", "(", "bsz", ")", "]", ")", ",", "\n", "'src_lengths'", ":", "torch", ".", "full", "(", "(", "bsz", ",", ")", ",", "self", ".", "args", ".", "tokens_per_sample", ")", ",", "\n", "}", ",", "\n", "'target'", ":", "torch", ".", "stack", "(", "[", "self", ".", "dummy_tgt", "for", "_", "in", "range", "(", "bsz", ")", "]", ")", ",", "\n", "'nsentences'", ":", "bsz", ",", "\n", "'ntokens'", ":", "bsz", "*", "self", ".", "args", ".", "tokens_per_sample", ",", "\n", "}", ",", "\n", "num_items", "=", "self", ".", "args", ".", "dataset_size", ",", "\n", "item_size", "=", "self", ".", "args", ".", "tokens_per_sample", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_masked_lm.DummyMaskedLMTask.source_dictionary": [[77, 80], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "source_dictionary", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dictionary", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_masked_lm.DummyMaskedLMTask.target_dictionary": [[81, 84], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "target_dictionary", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dictionary", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_masked_lm.DummyDataset.__init__": [[88, 93], ["fairseq.data.FairseqDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["    ", "def", "__init__", "(", "self", ",", "batch", ",", "num_items", ",", "item_size", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "batch", "=", "batch", "\n", "self", ".", "num_items", "=", "num_items", "\n", "self", ".", "item_size", "=", "item_size", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_masked_lm.DummyDataset.__getitem__": [[94, 96], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_masked_lm.DummyDataset.__len__": [[97, 99], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_items", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_masked_lm.DummyDataset.collater": [[100, 102], ["None"], "methods", ["None"], ["", "def", "collater", "(", "self", ",", "samples", ")", ":", "\n", "        ", "return", "self", ".", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_masked_lm.DummyDataset.sizes": [[103, 106], ["numpy.array"], "methods", ["None"], ["", "@", "property", "\n", "def", "sizes", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "self", ".", "item_size", "]", "*", "self", ".", "num_items", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_masked_lm.DummyDataset.num_tokens": [[107, 109], ["None"], "methods", ["None"], ["", "def", "num_tokens", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "item_size", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_masked_lm.DummyDataset.size": [[110, 112], ["None"], "methods", ["None"], ["", "def", "size", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "item_size", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_masked_lm.DummyDataset.ordered_indices": [[113, 115], ["numpy.arange"], "methods", ["None"], ["", "def", "ordered_indices", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "arange", "(", "self", ".", "num_items", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_masked_lm.DummyDataset.supports_prefetch": [[116, 119], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "supports_prefetch", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyLMTask.add_args": [[16, 23], ["parser.add_argument", "parser.add_argument", "parser.add_argument"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "\"\"\"Add task-specific arguments to the parser.\"\"\"", "\n", "parser", ".", "add_argument", "(", "'--dict-size'", ",", "default", "=", "50000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset-size'", ",", "default", "=", "100000", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--tokens-per-sample'", ",", "default", "=", "512", ",", "type", "=", "int", ",", "\n", "help", "=", "'max number of total tokens over all segments '", "\n", "'per sample for BERT dataset'", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyLMTask.__init__": [[25, 34], ["fairseq.tasks.FairseqTask.__init__", "torch.arange", "dictionary.pad"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.pad"], ["", "def", "__init__", "(", "self", ",", "args", ",", "dictionary", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "args", ")", "\n", "self", ".", "dictionary", "=", "dictionary", "\n", "self", ".", "seed", "=", "args", ".", "seed", "\n", "\n", "seq", "=", "torch", ".", "arange", "(", "args", ".", "tokens_per_sample", "+", "1", ")", "+", "dictionary", ".", "pad", "(", ")", "+", "1", "\n", "\n", "self", ".", "dummy_src", "=", "seq", "[", ":", "-", "1", "]", "\n", "self", ".", "dummy_tgt", "=", "seq", "[", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyLMTask.setup_task": [[35, 44], ["fairseq.data.Dictionary", "range", "print", "cls", "fairseq.data.Dictionary.add_symbol", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dictionary.BertDictionary.cls", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.add_symbol"], ["", "@", "classmethod", "\n", "def", "setup_task", "(", "cls", ",", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Setup the task. \"\"\"", "\n", "dictionary", "=", "Dictionary", "(", ")", "\n", "for", "i", "in", "range", "(", "args", ".", "dict_size", ")", ":", "\n", "            ", "dictionary", ".", "add_symbol", "(", "'word{}'", ".", "format", "(", "i", ")", ")", "\n", "", "print", "(", "'| dictionary: {} types'", ".", "format", "(", "len", "(", "dictionary", ")", ")", ")", "\n", "\n", "return", "cls", "(", "args", ",", "dictionary", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyLMTask.load_dataset": [[45, 64], ["dummy_lm.DummyDataset", "torch.stack", "torch.stack", "torch.full", "range", "range"], "methods", ["None"], ["", "def", "load_dataset", "(", "self", ",", "split", ",", "epoch", "=", "0", ",", "combine", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Load a given dataset split.\n        Args:\n            split (str): name of the split (e.g., train, valid, test)\n        \"\"\"", "\n", "bsz", "=", "self", ".", "args", ".", "max_sentences", "\n", "self", ".", "datasets", "[", "split", "]", "=", "DummyDataset", "(", "\n", "{", "\n", "'id'", ":", "1", ",", "\n", "'net_input'", ":", "{", "\n", "'src_tokens'", ":", "torch", ".", "stack", "(", "[", "self", ".", "dummy_src", "for", "_", "in", "range", "(", "bsz", ")", "]", ")", ",", "\n", "'src_lengths'", ":", "torch", ".", "full", "(", "(", "bsz", ",", ")", ",", "self", ".", "args", ".", "tokens_per_sample", ")", ",", "\n", "}", ",", "\n", "'target'", ":", "torch", ".", "stack", "(", "[", "self", ".", "dummy_tgt", "for", "_", "in", "range", "(", "bsz", ")", "]", ")", ",", "\n", "'nsentences'", ":", "bsz", ",", "\n", "'ntokens'", ":", "bsz", "*", "self", ".", "args", ".", "tokens_per_sample", ",", "\n", "}", ",", "\n", "num_items", "=", "self", ".", "args", ".", "dataset_size", ",", "\n", "item_size", "=", "self", ".", "args", ".", "tokens_per_sample", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyLMTask.source_dictionary": [[66, 69], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "source_dictionary", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dictionary", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyLMTask.target_dictionary": [[70, 73], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "target_dictionary", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "dictionary", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.__init__": [[77, 82], ["fairseq.data.FairseqDataset.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["    ", "def", "__init__", "(", "self", ",", "batch", ",", "num_items", ",", "item_size", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "batch", "=", "batch", "\n", "self", ".", "num_items", "=", "num_items", "\n", "self", ".", "item_size", "=", "item_size", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.__getitem__": [[83, 85], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.__len__": [[86, 88], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_items", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.collater": [[89, 91], ["None"], "methods", ["None"], ["", "def", "collater", "(", "self", ",", "samples", ")", ":", "\n", "        ", "return", "self", ".", "batch", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.sizes": [[92, 95], ["numpy.array"], "methods", ["None"], ["", "@", "property", "\n", "def", "sizes", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "array", "(", "[", "self", ".", "item_size", "]", "*", "self", ".", "num_items", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.num_tokens": [[96, 98], ["None"], "methods", ["None"], ["", "def", "num_tokens", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "item_size", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.size": [[99, 101], ["None"], "methods", ["None"], ["", "def", "size", "(", "self", ",", "index", ")", ":", "\n", "        ", "return", "self", ".", "item_size", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.ordered_indices": [[102, 104], ["numpy.arange"], "methods", ["None"], ["", "def", "ordered_indices", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "arange", "(", "self", ".", "num_items", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_lm.DummyDataset.supports_prefetch": [[105, 108], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "supports_prefetch", "(", "self", ")", ":", "\n", "        ", "return", "False", "\n", "", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.__init__": [[21, 24], ["fairseq.models.FairseqLanguageModel.__init__"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ",", "encoder", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "encoder", ")", "\n", "self", ".", "args", "=", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.add_args": [[25, 29], ["parser.add_argument", "parser.add_argument"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "add_args", "(", "parser", ")", ":", "\n", "        ", "parser", ".", "add_argument", "(", "'--num-layers'", ",", "type", "=", "int", ",", "default", "=", "24", ")", "\n", "parser", ".", "add_argument", "(", "'--embed-dim'", ",", "type", "=", "int", ",", "default", "=", "1024", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.build_model": [[30, 38], ["dummy_model.DummyEncoder", "cls", "len"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.legacy.masked_lm_dictionary.BertDictionary.cls"], ["", "@", "classmethod", "\n", "def", "build_model", "(", "cls", ",", "args", ",", "task", ")", ":", "\n", "        ", "encoder", "=", "DummyEncoder", "(", "\n", "num_embed", "=", "len", "(", "task", ".", "target_dictionary", ")", ",", "\n", "embed_dim", "=", "args", ".", "embed_dim", ",", "\n", "num_layers", "=", "args", ".", "num_layers", ",", "\n", ")", "\n", "return", "cls", "(", "args", ",", "encoder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyModel.forward": [[39, 41], ["dummy_model.DummyModel.decoder"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.fairseq_model.FairseqMultiModel.decoder"], ["", "def", "forward", "(", "self", ",", "src_tokens", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "decoder", "(", "src_tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.__init__": [[45, 71], ["fairseq.models.FairseqDecoder.__init__", "torch.Embedding", "torch.Embedding", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "fairseq.data.Dictionary", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.LayerNorm", "torch.LayerNorm", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "range", "torch.LayerNorm", "torch.LayerNorm", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Dropout", "torch.Dropout", "range"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.Embedding", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.transformer.Embedding", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.layer_norm.LayerNorm", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.layer_norm.LayerNorm", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.layer_norm.LayerNorm", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.layer_norm.LayerNorm", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.modules.transformer_layer.Linear"], ["    ", "def", "__init__", "(", "self", ",", "num_embed", "=", "50000", ",", "embed_dim", "=", "1024", ",", "num_layers", "=", "24", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "Dictionary", "(", ")", ")", "\n", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "\n", "num_embeddings", "=", "num_embed", ",", "embedding_dim", "=", "embed_dim", ",", "padding_idx", "=", "0", "\n", ")", "\n", "self", ".", "layers_a", "=", "nn", ".", "ModuleList", "(", "[", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "LayerNorm", "(", "embed_dim", ")", ",", "\n", "nn", ".", "Linear", "(", "embed_dim", ",", "3", "*", "embed_dim", ")", ",", "# q, k, v input projection", "\n", "nn", ".", "Linear", "(", "3", "*", "embed_dim", ",", "embed_dim", ")", ",", "# skip self-attention", "\n", "nn", ".", "Linear", "(", "embed_dim", ",", "embed_dim", ")", ",", "# output projection", "\n", "nn", ".", "Dropout", "(", ")", ",", "\n", ")", "\n", "for", "i", "in", "range", "(", "num_layers", ")", "\n", "]", ")", "\n", "self", ".", "layers_b", "=", "nn", ".", "ModuleList", "(", "[", "\n", "nn", ".", "Sequential", "(", "\n", "nn", ".", "LayerNorm", "(", "embed_dim", ")", ",", "\n", "nn", ".", "Linear", "(", "embed_dim", ",", "4", "*", "embed_dim", ")", ",", "# FFN", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "4", "*", "embed_dim", ",", "embed_dim", ")", ",", "# FFN", "\n", "nn", ".", "Dropout", "(", "0.1", ")", ",", "\n", ")", "\n", "for", "i", "in", "range", "(", "num_layers", ")", "\n", "]", ")", "\n", "self", ".", "out_proj", "=", "nn", ".", "Linear", "(", "embed_dim", ",", "num_embed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.forward": [[72, 79], ["dummy_model.DummyEncoder.embed", "zip", "dummy_model.DummyEncoder.out_proj", "layer_a", "layer_b"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "tokens", ")", ":", "\n", "        ", "x", "=", "self", ".", "embed", "(", "tokens", ")", "\n", "for", "layer_a", ",", "layer_b", "in", "zip", "(", "self", ".", "layers_a", ",", "self", ".", "layers_b", ")", ":", "\n", "            ", "x", "=", "x", "+", "layer_a", "(", "x", ")", "\n", "x", "=", "x", "+", "layer_b", "(", "x", ")", "\n", "", "x", "=", "self", ".", "out_proj", "(", "x", ")", "\n", "return", "(", "x", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.max_positions": [[80, 82], ["None"], "methods", ["None"], ["", "def", "max_positions", "(", "self", ")", ":", "\n", "        ", "return", "1024", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.DummyEncoder.get_normalized_probs": [[83, 89], ["net_output[].float", "torch.log_softmax", "torch.log_softmax", "torch.softmax", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.log_softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.utils.softmax"], ["", "def", "get_normalized_probs", "(", "self", ",", "net_output", ",", "log_probs", ",", "sample", "=", "None", ")", ":", "\n", "        ", "logits", "=", "net_output", "[", "0", "]", ".", "float", "(", ")", "\n", "if", "log_probs", ":", "\n", "            ", "return", "F", ".", "log_softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "return", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.benchmark.dummy_model.base_architecture": [[91, 94], ["fairseq.models.register_model_architecture"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.models.__init__.register_model_architecture"], ["", "", "", "@", "register_model_architecture", "(", "'dummy_model'", ",", "'dummy_model'", ")", "\n", "def", "base_architecture", "(", "args", ")", ":", "\n", "    ", "pass", "\n", "", ""]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Score.__init__": [[20, 26], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "source", ",", "total", "=", "0", ",", "correct", "=", "0", ",", "none", "=", "0", ")", ":", "\n", "        ", "\"\"\"has a source string and scores it tracks\"\"\"", "\n", "self", ".", "source", "=", "source", "\n", "self", ".", "correct", "=", "correct", "\n", "self", ".", "total", "=", "total", "\n", "self", ".", "none", "=", "none", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Score.__str__": [[27, 30], ["read_batch.Score.get_accuracy", "read_batch.Score.get_nones"], "methods", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Score.get_accuracy", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Score.get_nones"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"Type: {}, Accuracy: {:.2f}, Nones: {:.2f}, Total: {}\"", ".", "format", "(", "self", ".", "source", ",", "self", ".", "get_accuracy", "(", ")", ",", "\n", "self", ".", "get_nones", "(", ")", ",", "self", ".", "total", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Score.get_accuracy": [[31, 35], ["None"], "methods", ["None"], ["", "def", "get_accuracy", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "total", ":", "\n", "            ", "return", "0", "\n", "", "return", "self", ".", "correct", "/", "self", ".", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Score.get_nones": [[36, 40], ["None"], "methods", ["None"], ["", "def", "get_nones", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "total", ":", "\n", "            ", "return", "0", "\n", "", "return", "self", ".", "none", "/", "self", ".", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.__init__": [[43, 49], ["collections.defaultdict"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "source", ")", ":", "\n", "        ", "\"\"\"has a source string and scores it tracks\"\"\"", "\n", "self", ".", "source", "=", "source", "\n", "self", ".", "ratings", "=", "defaultdict", "(", "list", ")", "\n", "self", ".", "better_story", "=", "0", "\n", "self", ".", "total", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.percent_better_story": [[50, 54], ["None"], "methods", ["None"], ["", "def", "percent_better_story", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "total", "==", "0", ":", "\n", "            ", "return", "0", "\n", "", "return", "(", "self", ".", "better_story", "/", "self", ".", "total", ")", "*", "100", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.get_avg_rating": [[55, 57], ["numpy.mean", "read_batch.Rating.ratings.items"], "methods", ["None"], ["", "def", "get_avg_rating", "(", "self", ")", ":", "\n", "        ", "return", "{", "key", ":", "np", ".", "mean", "(", "values", ")", "for", "key", ",", "values", "in", "self", ".", "ratings", ".", "items", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.get_avg_rating_str": [[58, 60], ["numpy.mean", "read_batch.Rating.ratings.items"], "methods", ["None"], ["", "def", "get_avg_rating_str", "(", "self", ")", ":", "\n", "        ", "return", "\"\\n\"", ".", "join", "(", "[", "\"Mean {}: {:.2f}\"", ".", "format", "(", "key", ",", "np", ".", "mean", "(", "values", ")", ")", "for", "key", ",", "values", "in", "self", ".", "ratings", ".", "items", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.get_avg_var_rating_str": [[61, 64], ["numpy.mean", "numpy.var", "read_batch.Rating.ratings.items"], "methods", ["None"], ["", "def", "get_avg_var_rating_str", "(", "self", ")", ":", "\n", "        ", "return", "\"\\n\"", ".", "join", "(", "[", "\"Mean {}: {:.2f} Var {:.2f}\"", ".", "format", "(", "key", ",", "np", ".", "mean", "(", "values", ")", ",", "np", ".", "var", "(", "values", ")", ")", "\n", "for", "key", ",", "values", "in", "self", ".", "ratings", ".", "items", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.get_variance_str": [[65, 67], ["numpy.var", "read_batch.Rating.ratings.items"], "methods", ["None"], ["", "def", "get_variance_str", "(", "self", ")", ":", "\n", "        ", "return", "\"\\n\"", ".", "join", "(", "[", "\"Variance {}: {:.2f}\"", ".", "format", "(", "key", ",", "np", ".", "var", "(", "values", ")", ")", "for", "key", ",", "values", "in", "self", ".", "ratings", ".", "items", "(", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.get_overall": [[68, 70], ["numpy.mean"], "methods", ["None"], ["", "def", "get_overall", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "mean", "(", "self", ".", "ratings", "[", "\"overall_quality\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.get_relevance": [[71, 73], ["numpy.mean"], "methods", ["None"], ["", "def", "get_relevance", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "mean", "(", "self", ".", "ratings", "[", "\"relevance\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.get_interestingness": [[74, 76], ["numpy.mean"], "methods", ["None"], ["", "def", "get_interestingness", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "mean", "(", "self", ".", "ratings", "[", "\"interestingness\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.get_coherence": [[77, 79], ["numpy.mean"], "methods", ["None"], ["", "def", "get_coherence", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "mean", "(", "self", ".", "ratings", "[", "\"coherence\"", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.validate_same_num_scores": [[81, 88], ["set", "map", "print", "len"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], ["", "", "def", "validate_same_num_scores", "(", "list_of_lists", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "lengths", "=", "set", "(", "map", "(", "len", ",", "list_of_lists", ")", ")", "\n", "if", "len", "(", "lengths", ")", ">", "1", "and", "verbose", ":", "\n", "        ", "print", "(", "\"Differing numbers of score length ({})\"", ".", "format", "(", "lengths", ")", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "return", "False", "\n", "", "else", ":", "\n", "        ", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.check_any_correct": [[90, 93], ["any", "itertools.chain"], "function", ["None"], ["", "", "def", "check_any_correct", "(", "list_of_lists", ")", ":", "\n", "    ", "\"\"\"checks for \"hard\" experiment examples by seeing if all of them are False or Zero (e.g. no correct options)\"\"\"", "\n", "return", "True", "if", "any", "(", "itertools", ".", "chain", "(", "*", "list_of_lists", ")", ")", "else", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.get_ordered_experiment_scores": [[95, 132], ["set", "collections.defaultdict", "print", "read_batch.validate_same_num_scores", "read_batch.check_any_correct", "title_exp_scores[].items", "title_exp_scores[].values", "title_exp_scores[].values", "print", "exp2scores[].extend", "print", "numpy.around", "numpy.mean", "scores.count", "scores.count", "len", "numpy.mean", "set"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.validate_same_num_scores", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.check_any_correct", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.data_helper.count", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.data_helper.count"], ["", "def", "get_ordered_experiment_scores", "(", "title_exp_scores", ",", "skip_hard", "=", "False", ",", "majority", "=", "False", ",", "take_mean", "=", "False", ",", "\n", "missing", "=", "set", "(", ")", ")", ":", "\n", "    ", "\"\"\"takes a nested dict of the thing that was the same in an experiment (like a title or person)\n    and constructs a dict of experiment to scores_list that is aligned by the thing that was the same.\n    For stat significance tests with non-independent results\n\n    skip_hard throws out things that all participants got wrong, and majority compresses all scores into one majority vote\"\"\"", "\n", "exp2scores", "=", "defaultdict", "(", "list", ")", "\n", "hard_experiments", "=", "0", "\n", "for", "title", "in", "title_exp_scores", ":", "\n", "        ", "if", "title", "in", "missing", ":", "\n", "            ", "continue", "\n", "", "complete_sample_set", "=", "validate_same_num_scores", "(", "title_exp_scores", "[", "title", "]", ".", "values", "(", ")", ")", "\n", "\n", "any_correct", "=", "check_any_correct", "(", "title_exp_scores", "[", "title", "]", ".", "values", "(", ")", ")", "\n", "#if len(title_exp_scores[title].values()) <4:", "\n", "#    print(\"missing info\")", "\n", "#    continue", "\n", "if", "not", "any_correct", ":", "\n", "            ", "hard_experiments", "+=", "1", "\n", "if", "skip_hard", ":", "\n", "                ", "continue", "\n", "", "", "if", "not", "complete_sample_set", "and", "not", "majority", ":", "\n", "            ", "print", "(", "\"Problem title {} \"", ".", "format", "(", "title", ")", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "continue", "\n", "", "for", "exp", ",", "scores", "in", "title_exp_scores", "[", "title", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "majority", ":", "\n", "                ", "if", "not", "take_mean", ":", "\n", "                    ", "if", "scores", ".", "count", "(", "0", ")", "==", "scores", ".", "count", "(", "1", ")", "and", "len", "(", "set", "(", "scores", ")", ")", ">", "1", ":", "\n", "                        ", "print", "(", "\"ties on title {}\"", ".", "format", "(", "title", ")", ")", "\n", "", "scores", "=", "[", "np", ".", "around", "(", "np", ".", "mean", "(", "scores", ")", ")", "]", "\n", "", "else", ":", "\n", "                    ", "scores", "=", "[", "np", ".", "mean", "(", "scores", ")", "]", "\n", "", "", "exp2scores", "[", "exp", "]", ".", "extend", "(", "scores", ")", "\n", "\n", "", "", "print", "(", "\"{} number of experiments were hard (no participants got correct)\"", ".", "format", "(", "hard_experiments", ")", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "return", "exp2scores", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.get_and_print_stats": [[140, 175], ["print", "print", "sorted", "all_results.sort", "print", "exp2scores.items", "all_results.append", "scipy.stats.normaltest", "print", "list", "numpy.mean", "numpy.mean", "filter"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], ["", "def", "get_and_print_stats", "(", "exp2scores", ",", "exclude_zeros", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n\n    :param exp2scores: dict of experiment name (as a tuple) to array of scores\n    :return: a list of tuples of experiment name (as a typle) and mean of scores\n    \"\"\"", "\n", "print", "(", "\"-\"", "*", "89", ")", "\n", "print", "(", "\"All Experiment Means:\\n\"", ")", "\n", "sorted_exp", "=", "sorted", "(", "exp2scores", ".", "items", "(", ")", ")", "\n", "all_results", "=", "[", "]", "\n", "normal", ",", "not_normal", ",", "alpha", "=", "0", ",", "0", ",", "0.05", "\n", "for", "exp", ",", "scores", "in", "sorted_exp", ":", "\n", "# This is only needed if there are invalid scores", "\n", "#filtered_scores = list(filter(is_valid_score, scores)) # gets rid of empty string when people didn't reply", "\n", "        ", "if", "exclude_zeros", ":", "\n", "            ", "filtered_scores", "=", "list", "(", "filter", "(", "bool", ",", "scores", ")", ")", "\n", "#print(sorted(filtered_scores))", "\n", "exp_mean", "=", "np", ".", "mean", "(", "filtered_scores", ")", "\n", "", "else", ":", "\n", "            ", "exp_mean", "=", "np", ".", "mean", "(", "scores", ")", "\n", "", "all_results", ".", "append", "(", "(", "exp", ",", "exp_mean", ")", ")", "\n", "\n", "# check shape of distribution", "\n", "k2", ",", "p", "=", "stats", ".", "normaltest", "(", "scores", ")", "\n", "if", "p", "<", "alpha", ":", "\n", "            ", "not_normal", "+=", "1", "\n", "", "else", ":", "\n", "            ", "normal", "+=", "1", "\n", "\n", "", "", "all_results", ".", "sort", "(", ")", "\n", "for", "exp", ",", "exp_mean", "in", "all_results", ":", "\n", "        ", "print", "(", "\"Mean of {} : {:.2f}\"", ".", "format", "(", "exp", ",", "exp_mean", ")", ")", "\n", "", "print", "(", "\"{} of distributions were normal and {} were not normal\"", ".", "format", "(", "normal", ",", "not_normal", ")", ")", "\n", "\n", "return", "all_results", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.get_best_scores_per_metric": [[176, 192], ["set", "print", "filter", "max", "best_experiments.append"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], ["", "def", "get_best_scores_per_metric", "(", "result_means", ")", ":", "\n", "    ", "\"\"\"\n\n    :param result_means: a list of (exp_type, metric) : mean, where mean is a float\n    :return: a list of the best scores per metric/category\n    \"\"\"", "\n", "metric_list", "=", "set", "(", "[", "result_pair", "[", "0", "]", "[", "1", "]", "for", "result_pair", "in", "result_means", "]", ")", "# since it is a tuple with a tuple at idx 0 of (exp, metric)", "\n", "print", "(", "metric_list", ")", "\n", "best_experiments", "=", "[", "]", "\n", "for", "metric", "in", "metric_list", ":", "\n", "        ", "means_per_metric", "=", "filter", "(", "lambda", "x", ":", "x", "[", "0", "]", "[", "1", "]", "==", "metric", ",", "result_means", ")", "\n", "best", "=", "max", "(", "means_per_metric", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "#print(best)", "\n", "best_experiments", ".", "append", "(", "best", "[", "0", "]", ")", "\n", "\n", "", "return", "best_experiments", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.stat_sig": [[193, 235], ["print", "print", "exp2scores.items", "print", "print", "print", "print", "print", "range", "print", "test_type", "test_type", "not_equal_exp.append", "equal_exp.append", "len", "len", "len", "len", "len", "score_diffs.append"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], ["", "def", "stat_sig", "(", "winner", ",", "exp2scores", ",", "test_type", ",", "alpha", "=", "0.05", ",", "paired", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n\n    :param winner: tuple of win name and array of win scores\n    :param exp2scores: exp2scores format (dictionary with key to array of values)\n    :param test_type: a scipy.stats test\n    :param alpha: threshold for significance\n    :param paired: whether the test is a paired test and have to make sure everything matches\n    :return: None\n    \"\"\"", "\n", "print", "(", "'_'", "*", "89", ")", "\n", "print", "(", "\"Win type: {}\"", ".", "format", "(", "winner", ")", ")", "\n", "win_scores", "=", "exp2scores", "[", "winner", "]", "\n", "not_equal_exp", ",", "equal_exp", "=", "[", "]", ",", "[", "]", "\n", "for", "exp", ",", "scores", "in", "exp2scores", ".", "items", "(", ")", ":", "\n", "        ", "if", "exp", "[", "1", "]", "!=", "winner", "[", "1", "]", ":", "# make sure metric type matches...this should so be object oriented", "\n", "            ", "continue", "\n", "", "if", "paired", ":", "#filter both lists down so that they have valid values in both", "\n", "            ", "assert", "len", "(", "win_scores", ")", "==", "len", "(", "scores", ")", ",", "\"the lists of scores need to be of equal length for a paired test\"", "\n", "score_diffs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "win_scores", ")", ")", ":", "\n", "                ", "if", "not", "win_scores", "[", "i", "]", "or", "not", "scores", "[", "i", "]", ":", "# this assumes the unset value of the pair is bool False. Won't work if zero is a valid value", "\n", "                    ", "continue", "\n", "", "else", ":", "\n", "                    ", "score_diffs", ".", "append", "(", "win_scores", "[", "i", "]", "-", "scores", "[", "i", "]", ")", "\n", "", "", "print", "(", "score_diffs", ")", "\n", "stat", ",", "p", "=", "test_type", "(", "score_diffs", ")", "\n", "", "else", ":", "\n", "            ", "stat", ",", "p", "=", "test_type", "(", "win_scores", ",", "scores", ")", "\n", "", "if", "p", "<", "alpha", ":", "\n", "            ", "not_equal_exp", ".", "append", "(", "(", "exp", ",", "p", ")", ")", "\n", "#print(\"Distribution of winner vs. {} is not equal, p = {:.2f}\".format(exp, p))", "\n", "", "else", ":", "\n", "            ", "equal_exp", ".", "append", "(", "(", "exp", ",", "p", ")", ")", "\n", "#print(\"Distribution of winner vs. {} is equal, p = {:.2f}\".format(exp, p))", "\n", "", "", "print", "(", "\"{} are equivalent and {} are not\"", ".", "format", "(", "len", "(", "equal_exp", ")", ",", "len", "(", "not_equal_exp", ")", ")", ")", "\n", "print", "(", "\"Equal:\"", ")", "\n", "for", "x", "in", "equal_exp", ":", "\n", "        ", "print", "(", "x", ")", "\n", "", "print", "(", "\"Not Equal:\"", ")", "\n", "for", "x", "in", "not_equal_exp", ":", "\n", "        ", "print", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.get_choices": [[236, 243], ["re.findall", "int", "int", "re.findall"], "function", ["None"], ["", "", "def", "get_choices", "(", "user_choice", ":", "str", ",", "correct_choice", ":", "str", ")", "->", "Tuple", "[", "int", ",", "int", "]", ":", "\n", "# Note: correct choice *should* be 1 indexed but is zero indexed so this fixed", "\n", "    ", "user_int", "=", "re", ".", "findall", "(", "r\"\\d\"", ",", "user_choice", ")", "\n", "if", "user_int", ":", "\n", "        ", "user_int", "=", "int", "(", "user_int", "[", "0", "]", ")", "\n", "", "correct_int", "=", "int", "(", "re", ".", "findall", "(", "r\"\\d\"", ",", "correct_choice", ")", "[", "0", "]", ")", "+", "1", "\n", "return", "user_int", ",", "correct_int", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.process_accuracy_results": [[246, 384], ["collections.defaultdict", "sorted", "sorted", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "open", "csv.DictReader", "all_scores.values", "print", "print", "all_scores.values", "print", "all_scores.values", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "collections.defaultdict", "score.get_avg_var_rating_str", "score.percent_better_story", "score.get_accuracy", "score.get_nones", "row.get", "row.get", "int", "all_scores[].ratings[].append", "all_scores[].ratings[].append", "all_scores[].ratings[].append", "all_scores[].ratings[].append", "[].append", "[].append", "[].append", "[].append", "[].append", "range", "mapping.get", "read_batch.Rating", "int", "int", "int", "int", "mapping.get", "read_batch.Score", "read_batch.get_choices", "read_batch.get_choices", "mapping.get", "[].append", "mapping.get", "read_batch.Score"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.get_avg_var_rating_str", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Rating.percent_better_story", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Score.get_accuracy", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Score.get_nones", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.get_choices", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.get_choices"], ["", "def", "process_accuracy_results", "(", "files", ":", "list", ",", "experiment", ":", "str", ",", "confidence_threshold", ":", "int", "=", "0", ",", "\n", "filter_attention", "=", "False", ",", "mapping", ":", "dict", "=", "None", ",", "pairwise_type", "=", "None", ")", ":", "\n", "    ", "all_scores", "=", "{", "}", "\n", "# need to pair by title for statistical significance", "\n", "title_exp_scores", "=", "defaultdict", "(", "lambda", ":", "defaultdict", "(", "list", ")", ")", "\n", "if", "experiment", "==", "\"rating\"", ":", "\n", "        ", "title_exp_scores_i", ",", "title_exp_scores_o", "=", "defaultdict", "(", "lambda", ":", "defaultdict", "(", "list", ")", ")", ",", "defaultdict", "(", "lambda", ":", "defaultdict", "(", "list", ")", ")", "\n", "title_exp_scores_r", ",", "title_exp_scores_c", "=", "defaultdict", "(", "lambda", ":", "defaultdict", "(", "list", ")", ")", ",", "defaultdict", "(", "lambda", ":", "defaultdict", "(", "list", ")", ")", "\n", "#title_exp_story = defaultdict(lambda: defaultdict(list))", "\n", "", "for", "file", "in", "files", ":", "\n", "        ", "with", "open", "(", "file", ",", "newline", "=", "''", ")", "as", "csvfile", ":", "\n", "            ", "csv_dict", "=", "csv", ".", "DictReader", "(", "csvfile", ")", "\n", "for", "row", "in", "csv_dict", ":", "\n", "# Check if row Rejected:", "\n", "                ", "if", "row", "[", "'AssignmentStatus'", "]", "==", "'Rejected'", "or", "row", "[", "\"WorkerId\"", "]", "in", "BANNED_WORKERS", "or", "row", "[", "\"Reject\"", "]", ":", "\n", "                    ", "continue", "\n", "", "if", "filter_attention", "and", "row", ".", "get", "(", "\"Answer.attn_check\"", ",", "\"\"", ")", "!=", "row", ".", "get", "(", "\"Input.true_answer\"", ",", "\"\"", ")", ":", "\n", "                    ", "continue", "\n", "", "if", "confidence_threshold", "and", "experiment", "not", "in", "[", "\"relevance\"", ",", "\"rating\"", "]", ":", "\n", "                    ", "if", "int", "(", "row", "[", "\"Answer.user_confidence\"", "]", ")", "<", "confidence_threshold", ":", "\n", "                        ", "continue", "\n", "", "", "if", "experiment", "==", "\"rating\"", ":", "\n", "                    ", "all_stories", "=", "[", "\"story_{}\"", ".", "format", "(", "num", ")", "for", "num", "in", "range", "(", "1", ",", "5", ")", "]", "# currently not using 5th story", "\n", "title", "=", "row", "[", "\"Input.title\"", "]", "\n", "better_story", "=", "row", "[", "\"Answer.better_story\"", "]", "\n", "revised_ratings", "=", "True", "if", "row", "[", "\"Answer.revised_ratings\"", "]", "==", "\"yes\"", "else", "False", "\n", "for", "story_num", "in", "all_stories", ":", "\n", "                        ", "exp_source", "=", "row", "[", "\"Input.{}_source\"", ".", "format", "(", "story_num", ")", "]", "\n", "if", "mapping", ":", "\n", "                            ", "exp_source", "=", "mapping", ".", "get", "(", "exp_source", ",", "exp_source", ")", "\n", "", "if", "exp_source", "not", "in", "all_scores", ":", "\n", "                            ", "all_scores", "[", "exp_source", "]", "=", "Rating", "(", "exp_source", ")", "# ratings don't have accuracies", "\n", "", "i_score", ",", "o_score", "=", "int", "(", "row", "[", "\"Answer.{}_interestingness\"", ".", "format", "(", "story_num", ")", "]", ")", ",", "int", "(", "row", "[", "\"Answer.{}_quality\"", ".", "format", "(", "story_num", ")", "]", ")", "\n", "r_score", ",", "c_score", "=", "int", "(", "row", "[", "\"Answer.{}_relevance\"", ".", "format", "(", "story_num", ")", "]", ")", ",", "int", "(", "row", "[", "\"Answer.{}_coherence\"", ".", "format", "(", "story_num", ")", "]", ")", "\n", "all_scores", "[", "exp_source", "]", ".", "ratings", "[", "\"interestingness\"", "]", ".", "append", "(", "i_score", ")", "\n", "all_scores", "[", "exp_source", "]", ".", "ratings", "[", "\"overall_quality\"", "]", ".", "append", "(", "o_score", ")", "\n", "all_scores", "[", "exp_source", "]", ".", "ratings", "[", "\"relevance\"", "]", ".", "append", "(", "r_score", ")", "\n", "all_scores", "[", "exp_source", "]", ".", "ratings", "[", "\"coherence\"", "]", ".", "append", "(", "c_score", ")", "\n", "all_scores", "[", "exp_source", "]", ".", "total", "+=", "1", "\n", "if", "better_story", "==", "story_num", ":", "\n", "                            ", "all_scores", "[", "exp_source", "]", ".", "better_story", "+=", "1", "\n", "\n", "", "title_exp_scores_i", "[", "title", "]", "[", "exp_source", "]", ".", "append", "(", "i_score", ")", "\n", "title_exp_scores_o", "[", "title", "]", "[", "exp_source", "]", ".", "append", "(", "o_score", ")", "\n", "title_exp_scores_r", "[", "title", "]", "[", "exp_source", "]", ".", "append", "(", "r_score", ")", "\n", "title_exp_scores_c", "[", "title", "]", "[", "exp_source", "]", ".", "append", "(", "c_score", ")", "\n", "#title_exp_scores[title][exp_source][\"revised_ratings\"].append(revised_ratings) # todo this is a property of the title not the source but meh just recording it for now", "\n", "\n", "", "", "elif", "experiment", "==", "\"relevance\"", "or", "experiment", "==", "\"coherence\"", ":", "\n", "                    ", "exp_source", "=", "row", "[", "\"Input.source\"", "]", "\n", "if", "mapping", ":", "\n", "                        ", "exp_source", "=", "mapping", ".", "get", "(", "exp_source", ",", "exp_source", ")", "\n", "# add exp source to score dict", "\n", "", "if", "exp_source", "not", "in", "all_scores", ":", "\n", "                        ", "all_scores", "[", "exp_source", "]", "=", "Score", "(", "exp_source", ")", "\n", "# story=row[\"Input.story\"] # Used for if I need to see the story for reference", "\n", "", "if", "experiment", "==", "\"relevance\"", ":", "\n", "                        ", "user_choice", ",", "correct_choice", "=", "get_choices", "(", "row", "[", "\"Answer.selected_title\"", "]", ",", "row", "[", "\"Input.true_title\"", "]", ")", "\n", "title", "=", "row", "[", "\"Input.title_{}\"", ".", "format", "(", "correct_choice", ")", "]", "\n", "", "else", ":", "\n", "                        ", "user_choice", ",", "correct_choice", "=", "get_choices", "(", "row", "[", "\"Answer.user_choice\"", "]", ",", "row", "[", "\"Input.true_story\"", "]", ")", "\n", "title", "=", "row", "[", "\"Input.title\"", "]", "\n", "\n", "", "if", "user_choice", "==", "correct_choice", ":", "\n", "                        ", "correct", "=", "1", "\n", "all_scores", "[", "exp_source", "]", ".", "correct", "+=", "1", "\n", "", "elif", "not", "user_choice", ":", "# if it was None", "\n", "                        ", "all_scores", "[", "exp_source", "]", ".", "none", "+=", "1", "\n", "correct", "=", "0", "\n", "", "else", ":", "\n", "                        ", "correct", "=", "0", "\n", "\n", "", "all_scores", "[", "exp_source", "]", ".", "total", "+=", "1", "\n", "# make the title_exp_scores dict for stat significance", "\n", "title_exp_scores", "[", "title", "]", "[", "exp_source", "]", ".", "append", "(", "correct", ")", "\n", "# title_exp_story[title][experiment] = row[\"Input.story\"]", "\n", "\n", "", "elif", "experiment", "==", "\"overall\"", ":", "\n", "                    ", "title", "=", "row", "[", "\"Input.title\"", "]", "\n", "both_sources", "=", "{", "row", "[", "\"Input.story_1_source\"", "]", ",", "row", "[", "\"Input.story_2_source\"", "]", "}", "\n", "user_choice", "=", "row", "[", "\"Answer.user_choice\"", "]", "\n", "user_choice_source", "=", "row", "[", "\"Input.{}_source\"", ".", "format", "(", "user_choice", ")", "]", "if", "user_choice", "!=", "\"none\"", "else", "None", "# this will be bogus if answer is none but it doesn't matter", "\n", "if", "mapping", ":", "\n", "                        ", "user_choice_source", "=", "mapping", ".", "get", "(", "user_choice_source", ",", "user_choice_source", ")", "\n", "both_sources", "=", "{", "mapping", ".", "get", "(", "exp_source", ",", "exp_source", ")", "for", "exp_source", "in", "both_sources", "}", "\n", "if", "pairwise_type", "not", "in", "both_sources", ":", "\n", "                            ", "continue", "\n", "", "", "for", "exp_source", "in", "both_sources", ":", "\n", "                        ", "if", "exp_source", "not", "in", "all_scores", ":", "\n", "                            ", "all_scores", "[", "exp_source", "]", "=", "Score", "(", "exp_source", ")", "\n", "", "if", "user_choice", "==", "\"none\"", ":", "\n", "                            ", "all_scores", "[", "exp_source", "]", ".", "none", "+=", "1", "\n", "correct", "=", "0", "\n", "", "elif", "exp_source", "==", "user_choice_source", ":", "\n", "                            ", "all_scores", "[", "exp_source", "]", ".", "correct", "+=", "1", "\n", "correct", "=", "1", "\n", "", "else", ":", "\n", "                            ", "correct", "=", "0", "\n", "\n", "", "all_scores", "[", "exp_source", "]", ".", "total", "+=", "1", "\n", "# make the title_exp_scores dict for stat significance", "\n", "title_exp_scores", "[", "title", "]", "[", "exp_source", "]", ".", "append", "(", "correct", ")", "\n", "# title_exp_story[title][experiment] = row[\"Input.story\"]", "\n", "", "", "", "", "", "if", "experiment", "==", "\"rating\"", ":", "\n", "        ", "for", "score", "in", "sorted", "(", "all_scores", ".", "values", "(", ")", ",", "key", "=", "lambda", "s", ":", "s", ".", "source", ")", ":", "\n", "            ", "print", "(", "\"-\"", "*", "89", ")", "\n", "print", "(", "\"Type: {}\\n\"", "\n", "\"Average Rating: \\n{} \\nBetter Story: {:.2f}\"", ".", "format", "(", "score", ".", "source", ",", "\n", "score", ".", "get_avg_var_rating_str", "(", ")", ",", "\n", "score", ".", "percent_better_story", "(", ")", ")", ")", "\n", "\n", "", "return", "(", "title_exp_scores_o", ",", "title_exp_scores_i", ",", "title_exp_scores_r", ",", "title_exp_scores_c", ")", ",", "all_scores", "\n", "\n", "", "else", ":", "\n", "        ", "for", "score", "in", "sorted", "(", "all_scores", ".", "values", "(", ")", ",", "key", "=", "lambda", "s", ":", "s", ".", "source", ")", ":", "\n", "            ", "print", "(", "\"Type: {}\\n\"", "\n", "\"Accuracy: {:.2f} Nones: {:.2f} Total: {}\"", ".", "format", "(", "score", ".", "source", ",", "\n", "score", ".", "get_accuracy", "(", ")", ",", "\n", "score", ".", "get_nones", "(", ")", ",", "\n", "score", ".", "total", ")", ")", "\n", "\n", "# _titles, _bstories, _dstories = [], [], []", "\n", "# for key in title_exp_story:", "\n", "#     exp2story = title_exp_story[key]", "\n", "#     if len(exp2story.values()) < 2:", "\n", "#         continue", "\n", "#     _titles.append(key)", "\n", "#     _bstories.append(exp2story[\"baseline\"])", "\n", "#     _dstories.append(exp2story[\"discriminators\"])", "\n", "#", "\n", "# with open(\"story_titles\", \"w\") as st, open(\"baseline_stories\", \"w\") as bs, open(\"disc_stories\", \"w\") as ds:", "\n", "#     st.write(\"\\n\".join(_titles))", "\n", "#     bs.write(\"\\n\".join(_bstories))", "\n", "#     ds.write(\"\\n\".join(_dstories))", "\n", "\n", "", "return", "title_exp_scores", ",", "all_scores", ".", "values", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.majority_vote": [[386, 416], ["print", "print", "sorted", "exp2score.items", "all_scores.values", "print", "read_batch.Score", "len", "score.get_accuracy", "len", "len", "scipy.stats.mode", "print", "print", "scores.count", "scores.count", "len", "set"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.Score.get_accuracy", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.data_helper.count", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.srl_storyline_processing.data_helper.count"], ["", "", "def", "majority_vote", "(", "title_exp_scores", ")", ":", "\n", "#all_sources = set([key for key in title_exp_scores.values()])", "\n", "    ", "all_scores", "=", "{", "}", "# Score(source) for source in all_sources} #TODO this might be dicts...", "\n", "incomplete", ",", "too_many", "=", "0", ",", "0", "\n", "for", "title", "in", "title_exp_scores", ":", "\n", "        ", "exp2score", "=", "title_exp_scores", "[", "title", "]", "\n", "for", "exp", ",", "scores", "in", "exp2score", ".", "items", "(", ")", ":", "\n", "            ", "if", "exp", "not", "in", "all_scores", ":", "\n", "                ", "all_scores", "[", "exp", "]", "=", "Score", "(", "exp", ")", "\n", "", "if", "len", "(", "scores", ")", "!=", "3", ":", "\n", "                ", "if", "len", "(", "scores", ")", "<", "3", ":", "\n", "                    ", "incomplete", "+=", "1", "\n", "continue", "\n", "", "if", "len", "(", "scores", ")", ">", "3", ":", "\n", "                    ", "if", "scores", ".", "count", "(", "0", ")", "==", "scores", ".", "count", "(", "1", ")", "and", "len", "(", "set", "(", "scores", ")", ")", ">", "1", ":", "\n", "                        ", "print", "(", "scores", ")", "\n", "print", "(", "\"title in too many: {}\"", ".", "format", "(", "title", ")", ")", "\n", "too_many", "+=", "1", "\n", "continue", "\n", "", "", "", "majority_score", "=", "stats", ".", "mode", "(", "scores", ")", ".", "mode", "[", "0", "]", "\n", "all_scores", "[", "exp", "]", ".", "correct", "+=", "majority_score", "\n", "all_scores", "[", "exp", "]", ".", "total", "+=", "1", "\n", "\n", "", "", "print", "(", "\"{} had less than 3 and {} more than 4\"", ".", "format", "(", "incomplete", ",", "too_many", ")", ")", "\n", "print", "(", "\"\\nFiltered by majority vote...\"", ")", "\n", "for", "score", "in", "sorted", "(", "all_scores", ".", "values", "(", ")", ",", "key", "=", "lambda", "s", ":", "s", ".", "source", ")", ":", "\n", "        ", "print", "(", "\"Type: {}\\n\"", "\n", "\"Win Rate: {:.2f} Total: {}\"", ".", "format", "(", "score", ".", "source", ",", "\n", "score", ".", "get_accuracy", "(", ")", ",", "\n", "score", ".", "total", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.process_rating_results": [[417, 419], ["None"], "function", ["None"], ["", "", "def", "process_rating_results", "(", "files", ")", ":", "\n", "    ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.validate_same_titles": [[421, 435], ["print", "collections.defaultdict", "set", "set", "print", "print", "itertools.chain", "len", "title_exp_scores[].keys", "exp2missing[].append", "collections.defaultdict.values"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print"], ["", "def", "validate_same_titles", "(", "title_exp_scores", ")", ":", "\n", "    ", "print", "(", "\"Total Titles: {}\"", ".", "format", "(", "len", "(", "title_exp_scores", ")", ")", ")", "\n", "all_experiments", "=", "{", "k", "for", "key", "in", "title_exp_scores", "for", "k", "in", "title_exp_scores", "[", "key", "]", "}", "\n", "exp2missing", "=", "defaultdict", "(", "list", ")", "\n", "for", "t", "in", "title_exp_scores", ":", "\n", "        ", "these_exp", "=", "set", "(", "title_exp_scores", "[", "t", "]", ".", "keys", "(", ")", ")", "\n", "for", "exp", "in", "all_experiments", ":", "\n", "            ", "if", "exp", "not", "in", "these_exp", ":", "\n", "                ", "exp2missing", "[", "exp", "]", ".", "append", "(", "t", ")", "\n", "", "", "", "for", "exp", "in", "exp2missing", ":", "\n", "        ", "print", "(", "\"{} missing titles:\"", ".", "format", "(", "exp", ")", ")", "\n", "print", "(", "exp2missing", "[", "exp", "]", ")", "\n", "\n", "", "return", "set", "(", "itertools", ".", "chain", "(", "*", "exp2missing", ".", "values", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.failed_attention_checks": [[437, 455], ["print", "print", "open", "csv.DictReader", "row.get", "row.get", "row.get", "row.get", "row.get"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open"], ["", "def", "failed_attention_checks", "(", "files", ":", "list", ",", "include_rejected", "=", "False", ")", ":", "\n", "#total, failed = 0,0", "\n", "    ", "failed2answer", "=", "{", "}", "\n", "for", "file", "in", "files", ":", "\n", "        ", "total", ",", "failed", "=", "0", ",", "0", "\n", "with", "open", "(", "file", ",", "newline", "=", "''", ")", "as", "csvfile", ":", "\n", "            ", "csv_dict", "=", "csv", ".", "DictReader", "(", "csvfile", ")", "\n", "for", "row", "in", "csv_dict", ":", "\n", "                ", "title", "=", "row", ".", "get", "(", "\"Input.title\"", ",", "\"ratings\"", ")", "\n", "if", "not", "include_rejected", ":", "\n", "                    ", "if", "row", "[", "'AssignmentStatus'", "]", "==", "'Rejected'", "or", "row", "[", "\"WorkerId\"", "]", "in", "BANNED_WORKERS", "or", "row", "[", "\"Reject\"", "]", ":", "\n", "                        ", "continue", "\n", "", "", "if", "row", ".", "get", "(", "\"Answer.attn_check\"", ",", "\"\"", ")", "!=", "row", ".", "get", "(", "\"Input.true_answer\"", ",", "\"\"", ")", ":", "\n", "                    ", "failed", "+=", "1", "\n", "failed2answer", "[", "title", "]", "=", "[", "row", ".", "get", "(", "\"Input.attn_question\"", ")", ",", "row", ".", "get", "(", "\"Input.true_answer\"", ")", "]", "\n", "", "total", "+=", "1", "\n", "", "", "print", "(", "file", ")", "\n", "print", "(", "\"Failed attention checks: {} of {} total ({:.2f})%\"", ".", "format", "(", "failed", ",", "total", ",", "failed", "/", "total", "*", "100", ")", ")", "\n", "#for f, q in failed2answer.items():", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.get_confidences": [[459, 475], ["collections.defaultdict", "print", "low_conf_titles.items", "numpy.mean", "print", "open", "csv.DictReader", "collections.defaultdict.items", "len", "len", "int", "title2conf[].append", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.file_io.PathManager.open"], ["", "", "def", "get_confidences", "(", "files", ",", "include_rejected", "=", "False", ",", "low_thresh", "=", "3", ")", ":", "\n", "    ", "title2conf", "=", "defaultdict", "(", "list", ")", "\n", "for", "file", "in", "files", ":", "\n", "        ", "with", "open", "(", "file", ",", "newline", "=", "''", ")", "as", "csvfile", ":", "\n", "            ", "csv_dict", "=", "csv", ".", "DictReader", "(", "csvfile", ")", "\n", "for", "row", "in", "csv_dict", ":", "\n", "                ", "title", "=", "row", "[", "\"Input.title\"", "]", "\n", "if", "not", "include_rejected", ":", "\n", "                    ", "if", "row", "[", "'AssignmentStatus'", "]", "==", "'Rejected'", "or", "row", "[", "\"WorkerId\"", "]", "in", "BANNED_WORKERS", "or", "row", "[", "\"Reject\"", "]", ":", "\n", "                        ", "continue", "\n", "", "", "conf", "=", "int", "(", "row", "[", "\"Answer.user_confidence\"", "]", ")", "\n", "title2conf", "[", "title", "]", ".", "append", "(", "conf", ")", "\n", "", "", "", "low_conf_titles", "=", "{", "t", ":", "np", ".", "mean", "(", "c", ")", "for", "t", ",", "c", "in", "title2conf", ".", "items", "(", ")", "if", "np", ".", "mean", "(", "c", ")", "<", "low_thresh", "}", "\n", "print", "(", "\"Num titles with low conf (<{}): {} of {}\"", ".", "format", "(", "low_thresh", ",", "len", "(", "low_conf_titles", ")", ",", "len", "(", "title2conf", ")", ")", ")", "\n", "for", "t", ",", "c", "in", "low_conf_titles", ".", "items", "(", ")", ":", "\n", "        ", "print", "(", "\"{}: {:.2f}\"", ".", "format", "(", "t", ",", "c", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.read_batch.setup_argparse": [[477, 486], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "", "def", "setup_argparse", "(", ")", ":", "\n", "    ", "p", "=", "argparse", ".", "ArgumentParser", "(", ")", "\n", "p", ".", "add_argument", "(", "'-f'", ",", "dest", "=", "'files'", ",", "nargs", "=", "'+'", ",", "help", "=", "'files to read in'", ")", "\n", "p", ".", "add_argument", "(", "'-d'", ",", "dest", "=", "'input_dir'", ")", "\n", "p", ".", "add_argument", "(", "'-t'", ",", "dest", "=", "'type'", ",", "choices", "=", "[", "'relevance'", ",", "'coherence'", ",", "'overall'", ",", "\"rating\"", ",", "\"confidence\"", ",", "\"attn_check\"", "]", ")", "\n", "p", ".", "add_argument", "(", "'--confidence_threshold'", ",", "type", "=", "int", ",", "default", "=", "0", ",", "help", "=", "\"throw out scores with confidence lower than this number\"", ")", "\n", "p", ".", "add_argument", "(", "'--attention'", ",", "action", "=", "\"store_true\"", ",", "help", "=", "\"if there were attention checks, filter fails\"", ")", "\n", "p", ".", "add_argument", "(", "'--pairwise_type'", ",", "choices", "=", "[", "\"prompt2story\"", ",", "\"no_disc\"", "]", ")", "\n", "return", "p", ".", "parse_args", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.make_batch.clean_stories": [[20, 26], ["re.sub", "new_stories.append"], "function", ["None"], ["def", "clean_stories", "(", "stories", ":", "list", ")", "->", "list", ":", "\n", "    ", "new_stories", "=", "[", "]", "\n", "for", "story", "in", "stories", ":", "\n", "        ", "new_story", "=", "re", ".", "sub", "(", "\"\\s\"", ",", "\" \"", ",", "story", ")", "\n", "new_stories", ".", "append", "(", "new_story", ")", "\n", "", "return", "new_stories", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.make_batch.process_mturk_results": [[28, 45], ["set", "print", "row[].strip", "set.add", "make_batch.clean_stories", "[].extend", "row[].split"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq.progress_bar.tensorboard_log_wrapper.print", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.fairseq_cli.eval_lm.WordStat.add", "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.make_batch.clean_stories"], ["", "def", "process_mturk_results", "(", "csv_dict", ",", "output_dict", ")", ":", "\n", "    ", "rejections", "=", "0", "\n", "used_titles", "=", "set", "(", ")", "\n", "for", "row", "in", "csv_dict", ":", "\n", "        ", "if", "row", "[", "'Reject'", "]", ":", "\n", "            ", "rejections", "+=", "1", "\n", "continue", "\n", "", "title", "=", "row", "[", "'Input.title'", "]", ".", "strip", "(", ")", "\n", "# split up the human entries when they are duplicates", "\n", "set_num", "=", "1", "if", "title", "in", "used_titles", "else", "0", "\n", "used_titles", ".", "add", "(", "title", ")", "\n", "\n", "stories", "=", "row", "[", "'Answer.MultiLineTextInput'", "]", ".", "split", "(", "'|'", ")", "[", ":", "2", "]", "# only first two text entries are stories.", "\n", "stories", "=", "clean_stories", "(", "stories", ")", "\n", "\n", "output_dict", "[", "set_num", "]", "[", "title", "]", ".", "extend", "(", "stories", ")", "\n", "", "print", "(", "\"Num Rejections: {}\"", ".", "format", "(", "rejections", ")", ",", "file", "=", "sys", ".", "stderr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.mturk_eval.make_batch.get_random_samples": [[47, 56], ["random.choices", "range", "set", "len", "random.choices", "random.choices.update", "len", "set", "range", "set", "len"], "function", ["home.repos.pwc.inspect_result.PlusLabNLP_story-gen-BART.data.dictionary.Dictionary.update"], ["", "def", "get_random_samples", "(", "samples", ":", "list", ",", "forbidden", ":", "set", ",", "num", ":", "int", "=", "2", ")", "->", "list", ":", "\n", "    ", "chosen", "=", "random", ".", "choices", "(", "range", "(", "len", "(", "samples", ")", ")", ",", "k", "=", "num", ")", "\n", "while", "set", "(", "chosen", ")", "&", "forbidden", ":", "\n", "        ", "num_wrong", "=", "len", "(", "set", "(", "chosen", ")", "&", "forbidden", ")", "\n", "chosen", "=", "set", "(", "chosen", ")", "-", "forbidden", "\n", "new_choices", "=", "random", ".", "choices", "(", "range", "(", "len", "(", "samples", ")", ")", ",", "k", "=", "num_wrong", ")", "\n", "chosen", ".", "update", "(", "new_choices", ")", "\n", "\n", "", "return", "[", "samples", "[", "x", "]", "for", "x", "in", "chosen", "]", "\n", "\n"]]}