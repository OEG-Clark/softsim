{"home.repos.pwc.inspect_result.facebookresearch_suncet.None.main.process_main": [[41, 84], ["str", "logging.basicConfig", "logging.getLogger", "logging.getLogger.info", "src.utils.init_distributed", "logging.getLogger.info", "open", "yaml.load", "logging.getLogger.info", "os.path.join", "logging.getLogger.setLevel", "logging.getLogger.setLevel", "src.paws_train.main", "devices[].split", "pprint.PrettyPrinter", "pprint.PrettyPrinter.pprint", "open", "yaml.dump", "src.suncet_train.main", "src.fine_tune.main", "src.snn_fine_tune.main"], "function", ["home.repos.pwc.inspect_result.facebookresearch_suncet.src.utils.init_distributed", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.paws_train.main", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.paws_train.main", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.paws_train.main", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.paws_train.main"], ["def", "process_main", "(", "rank", ",", "sel", ",", "fname", ",", "world_size", ",", "devices", ")", ":", "\n", "    ", "import", "os", "\n", "os", ".", "environ", "[", "'CUDA_VISIBLE_DEVICES'", "]", "=", "str", "(", "devices", "[", "rank", "]", ".", "split", "(", "':'", ")", "[", "-", "1", "]", ")", "\n", "\n", "import", "logging", "\n", "logging", ".", "basicConfig", "(", ")", "\n", "logger", "=", "logging", ".", "getLogger", "(", ")", "\n", "\n", "logger", ".", "info", "(", "f'called-params {sel} {fname}'", ")", "\n", "\n", "# -- load script params", "\n", "params", "=", "None", "\n", "with", "open", "(", "fname", ",", "'r'", ")", "as", "y_file", ":", "\n", "        ", "params", "=", "yaml", ".", "load", "(", "y_file", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "logger", ".", "info", "(", "'loaded params...'", ")", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "pp", "=", "pprint", ".", "PrettyPrinter", "(", "indent", "=", "4", ")", "\n", "pp", ".", "pprint", "(", "params", ")", "\n", "\n", "", "", "if", "rank", "==", "0", ":", "\n", "        ", "dump", "=", "os", ".", "path", ".", "join", "(", "params", "[", "'logging'", "]", "[", "'folder'", "]", ",", "f'params-{sel}.yaml'", ")", "\n", "with", "open", "(", "dump", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "yaml", ".", "dump", "(", "params", ",", "f", ")", "\n", "\n", "", "", "world_size", ",", "rank", "=", "init_distributed", "(", "rank_and_world_size", "=", "(", "rank", ",", "world_size", ")", ")", "\n", "\n", "# -- make sure all processes correctly initialized torch-distributed", "\n", "logger", ".", "info", "(", "f'Running {sel} (rank: {rank}/{world_size})'", ")", "\n", "\n", "# -- turn off info-logging for ranks > 0, otherwise too much std output", "\n", "if", "rank", "==", "0", ":", "\n", "        ", "logger", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "setLevel", "(", "logging", ".", "ERROR", ")", "\n", "\n", "", "if", "sel", "==", "'paws_train'", ":", "\n", "        ", "return", "paws", "(", "params", ")", "\n", "", "elif", "sel", "==", "'suncet_train'", ":", "\n", "        ", "return", "suncet", "(", "params", ")", "\n", "", "elif", "sel", "==", "'fine_tune'", ":", "\n", "        ", "return", "fine_tune", "(", "params", ")", "\n", "", "elif", "sel", "==", "'snn_fine_tune'", ":", "\n", "        ", "return", "snn_fine_tune", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.None.main_distributed.Trainer.__init__": [[65, 69], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "sel", ",", "fname", "=", "'configs.yaml'", ",", "load_model", "=", "None", ")", ":", "\n", "        ", "self", ".", "sel", "=", "sel", "\n", "self", ".", "fname", "=", "fname", "\n", "self", ".", "load_model", "=", "load_model", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.None.main_distributed.Trainer.__call__": [[70, 95], ["logger.info", "logger.info", "open", "yaml.load", "logger.info", "pprint.PrettyPrinter", "pprint.PrettyPrinter.pprint", "src.paws_train.main", "src.suncet_train.main", "src.fine_tune.main", "src.snn_fine_tune.main"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_suncet.src.paws_train.main", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.paws_train.main", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.paws_train.main", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.paws_train.main"], ["", "def", "__call__", "(", "self", ")", ":", "\n", "        ", "sel", "=", "self", ".", "sel", "\n", "fname", "=", "self", ".", "fname", "\n", "load_model", "=", "self", ".", "load_model", "\n", "logger", ".", "info", "(", "f'called-params {sel} {fname} {load_model}'", ")", "\n", "\n", "# -- load script params", "\n", "params", "=", "None", "\n", "with", "open", "(", "fname", ",", "'r'", ")", "as", "y_file", ":", "\n", "            ", "params", "=", "yaml", ".", "load", "(", "y_file", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "if", "load_model", "is", "not", "None", ":", "\n", "                ", "params", "[", "'meta'", "]", "[", "'load_checkpoint'", "]", "=", "load_model", "\n", "", "logger", ".", "info", "(", "'loaded params...'", ")", "\n", "pp", "=", "pprint", ".", "PrettyPrinter", "(", "indent", "=", "4", ")", "\n", "pp", ".", "pprint", "(", "params", ")", "\n", "\n", "", "logger", ".", "info", "(", "'Running %s'", "%", "sel", ")", "\n", "if", "sel", "==", "'paws_train'", ":", "\n", "            ", "return", "paws", "(", "params", ")", "\n", "", "elif", "sel", "==", "'suncet_train'", ":", "\n", "            ", "return", "suncet", "(", "params", ")", "\n", "", "elif", "sel", "==", "'fine_tune'", ":", "\n", "            ", "return", "fine_tune", "(", "params", ")", "\n", "", "elif", "sel", "==", "'snn_fine_tune'", ":", "\n", "            ", "return", "snn_fine_tune", "(", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.None.main_distributed.Trainer.checkpoint": [[96, 99], ["main_distributed.Trainer", "submitit.helpers.DelayedSubmission"], "methods", ["None"], ["", "", "def", "checkpoint", "(", "self", ")", ":", "\n", "        ", "fb_trainer", "=", "Trainer", "(", "self", ".", "sel", ",", "self", ".", "fname", ",", "True", ")", "\n", "return", "submitit", ".", "helpers", ".", "DelayedSubmission", "(", "fb_trainer", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.None.main_distributed.launch": [[101, 129], ["submitit.AutoExecutor", "submitit.AutoExecutor.update_parameters", "submitit.AutoExecutor.batch", "print", "open", "yaml.load", "main_distributed.Trainer", "submitit.AutoExecutor.submit", "trainers.append", "jobs.append"], "function", ["None"], ["", "", "def", "launch", "(", ")", ":", "\n", "    ", "executor", "=", "submitit", ".", "AutoExecutor", "(", "folder", "=", "args", ".", "folder", ")", "\n", "executor", ".", "update_parameters", "(", "\n", "slurm_partition", "=", "args", ".", "partition", ",", "\n", "slurm_constraint", "=", "args", ".", "device", ",", "\n", "slurm_comment", "=", "'running PAWS code'", ",", "\n", "slurm_mem", "=", "'450G'", ",", "\n", "timeout_min", "=", "args", ".", "time", ",", "\n", "nodes", "=", "args", ".", "nodes", ",", "\n", "tasks_per_node", "=", "args", ".", "tasks_per_node", ",", "\n", "cpus_per_task", "=", "10", ",", "\n", "gpus_per_node", "=", "args", ".", "tasks_per_node", ")", "\n", "\n", "config_fnames", "=", "[", "args", ".", "fname", "]", "\n", "if", "args", ".", "batch_launch", ":", "\n", "        ", "with", "open", "(", "args", ".", "fname", ",", "'r'", ")", "as", "y_file", ":", "\n", "            ", "config_fnames", "=", "yaml", ".", "load", "(", "y_file", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "\n", "", "", "jobs", ",", "trainers", "=", "[", "]", ",", "[", "]", "\n", "with", "executor", ".", "batch", "(", ")", ":", "\n", "        ", "for", "cf", "in", "config_fnames", ":", "\n", "            ", "fb_trainer", "=", "Trainer", "(", "args", ".", "sel", ",", "cf", ")", "\n", "job", "=", "executor", ".", "submit", "(", "fb_trainer", ",", ")", "\n", "trainers", ".", "append", "(", "fb_trainer", ")", "\n", "jobs", ".", "append", "(", "job", ")", "\n", "\n", "", "", "for", "job", "in", "jobs", ":", "\n", "        ", "print", "(", "job", ".", "job_id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.None.snn_eval.main": [[99, 174], ["torch.device", "torch.cuda.set_device", "init_model.eval", "snn_eval.main.init_pipe"], "function", ["None"], ["def", "main", "(", "\n", "pretrained", ",", "\n", "subset_path", ",", "\n", "unlabeled_frac", ",", "\n", "dataset_name", ",", "\n", "root_path", ",", "\n", "image_folder", ",", "\n", "model_name", "=", "None", ",", "\n", "use_pred", "=", "True", ",", "\n", "normalize", "=", "True", ",", "\n", "device_str", "=", "'cuda:0'", ",", "\n", "split_seed", "=", "152", "\n", ")", ":", "\n", "    ", "device", "=", "torch", ".", "device", "(", "device_str", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "device", ")", "\n", "num_classes", "=", "1000", "if", "'imagenet'", "in", "dataset_name", "else", "10", "\n", "\n", "def", "init_pipe", "(", "training", ")", ":", "\n", "# -- make data transforms", "\n", "        ", "transform", ",", "init_transform", "=", "make_transforms", "(", "\n", "dataset_name", "=", "dataset_name", ",", "\n", "subset_path", "=", "subset_path", ",", "\n", "unlabeled_frac", "=", "unlabeled_frac", "if", "training", "else", "0.", ",", "\n", "training", "=", "training", ",", "\n", "split_seed", "=", "split_seed", ",", "\n", "basic_augmentations", "=", "True", ",", "\n", "force_center_crop", "=", "True", ",", "\n", "normalize", "=", "normalize", ")", "\n", "\n", "# -- init data-loaders/samplers", "\n", "(", "data_loader", ",", "\n", "data_sampler", ")", "=", "init_data", "(", "\n", "dataset_name", "=", "dataset_name", ",", "\n", "transform", "=", "transform", ",", "\n", "init_transform", "=", "init_transform", ",", "\n", "u_batch_size", "=", "None", ",", "\n", "s_batch_size", "=", "16", ",", "\n", "stratify", "=", "False", ",", "\n", "classes_per_batch", "=", "None", ",", "\n", "world_size", "=", "1", ",", "\n", "rank", "=", "0", ",", "\n", "root_path", "=", "root_path", ",", "\n", "image_folder", "=", "image_folder", ",", "\n", "training", "=", "training", ",", "\n", "copy_data", "=", "False", ",", "\n", "drop_last", "=", "False", ")", "\n", "\n", "return", "transform", ",", "init_transform", ",", "data_loader", ",", "data_sampler", "\n", "\n", "", "if", "type", "(", "pretrained", ")", "==", "str", ":", "\n", "        ", "encoder", "=", "init_model", "(", "\n", "device", "=", "device", ",", "\n", "model_name", "=", "model_name", ",", "\n", "use_pred", "=", "use_pred", ",", "\n", "pretrained", "=", "pretrained", ")", "\n", "", "else", ":", "\n", "        ", "encoder", "=", "pretrained", "\n", "", "encoder", ".", "eval", "(", ")", "\n", "\n", "transform", ",", "init_transform", ",", "data_loader", ",", "data_sampler", "=", "init_pipe", "(", "True", ")", "\n", "embs", ",", "labs", "=", "make_embeddings", "(", "\n", "device", ",", "\n", "data_loader", ",", "\n", "data_sampler", ",", "\n", "encoder", "=", "encoder", ")", "\n", "\n", "transform", ",", "init_transform", ",", "data_loader", ",", "data_sampler", "=", "init_pipe", "(", "False", ")", "\n", "return", "evaluate_embeddings", "(", "\n", "device", ",", "\n", "data_loader", ",", "\n", "encoder", "=", "encoder", ",", "\n", "labs", "=", "labs", ",", "\n", "embs", "=", "embs", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "temp", "=", "0.1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.None.snn_eval.evaluate_embeddings": [[176, 219], ["len", "embs.to.to", "torch.full().scatter_.to", "torch.full().scatter_.long().view", "torch.full().scatter_", "snn_eval.make_snn", "logger.info", "logger.info", "logger.info", "enumerate", "logger.info", "len", "encoder", "make_snn.", "float", "float", "torch.full().scatter_.long", "torch.full", "data[].to", "data[].to", "snn.topk().indices.eq().sum", "snn.max().indices.eq().sum", "logger.info", "snn.topk().indices.eq", "snn.max().indices.eq", "torch.full().scatter_.size", "labels.unsqueeze", "snn.topk", "snn.max"], "function", ["home.repos.pwc.inspect_result.facebookresearch_suncet.None.snn_eval.make_snn"], ["", "def", "evaluate_embeddings", "(", "\n", "device", ",", "\n", "data_loader", ",", "\n", "encoder", ",", "\n", "labs", ",", "\n", "embs", ",", "\n", "num_classes", ",", "\n", "temp", "=", "0.1", ",", "\n", ")", ":", "\n", "    ", "ipe", "=", "len", "(", "data_loader", ")", "\n", "\n", "embs", "=", "embs", ".", "to", "(", "device", ")", "\n", "labs", "=", "labs", ".", "to", "(", "device", ")", "\n", "\n", "# -- make labels one-hot", "\n", "num_classes", "=", "num_classes", "\n", "labs", "=", "labs", ".", "long", "(", ")", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "labs", "=", "torch", ".", "full", "(", "(", "labs", ".", "size", "(", ")", "[", "0", "]", ",", "num_classes", ")", ",", "0.", ",", "device", "=", "device", ")", ".", "scatter_", "(", "1", ",", "labs", ",", "1.", ")", "\n", "\n", "snn", "=", "make_snn", "(", "embs", ",", "labs", ",", "temp", ")", "\n", "\n", "logger", ".", "info", "(", "embs", ".", "shape", ")", "\n", "logger", ".", "info", "(", "labs", ".", "shape", ")", "\n", "logger", ".", "info", "(", "len", "(", "data_loader", ")", ")", "\n", "\n", "top1_correct", ",", "top5_correct", ",", "total", "=", "0", ",", "0", ",", "0", "\n", "for", "itr", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "imgs", ",", "labels", "=", "data", "[", "0", "]", ".", "to", "(", "device", ")", ",", "data", "[", "1", "]", ".", "to", "(", "device", ")", "\n", "\n", "z", "=", "encoder", "(", "imgs", ")", "\n", "probs", "=", "snn", "(", "z", ")", "\n", "total", "+=", "imgs", ".", "shape", "[", "0", "]", "\n", "top5_correct", "+=", "float", "(", "probs", ".", "topk", "(", "5", ",", "dim", "=", "1", ")", ".", "indices", ".", "eq", "(", "labels", ".", "unsqueeze", "(", "1", ")", ")", ".", "sum", "(", ")", ")", "\n", "top1_correct", "+=", "float", "(", "probs", ".", "max", "(", "dim", "=", "1", ")", ".", "indices", ".", "eq", "(", "labels", ")", ".", "sum", "(", ")", ")", "\n", "top1_acc", "=", "100.", "*", "top1_correct", "/", "total", "\n", "top5_acc", "=", "100.", "*", "top5_correct", "/", "total", "\n", "\n", "if", "itr", "%", "50", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "'[%5d/%d] %.3f%% %.3f%%'", "%", "(", "itr", ",", "ipe", ",", "top1_acc", ",", "top5_acc", ")", ")", "\n", "\n", "", "", "logger", ".", "info", "(", "f'top1/top5: {top1_acc}/{top5_acc}'", ")", "\n", "\n", "return", "top1_acc", ",", "top5_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.None.snn_eval.make_embeddings": [[221, 246], ["len", "enumerate", "torch.cat", "torch.cat", "logger.info", "logger.info", "imgs.to.to", "torch.cat.append", "torch.cat.append", "torch.no_grad", "encoder", "encoder.to", "labels.to", "logger.info"], "function", ["None"], ["", "def", "make_embeddings", "(", "\n", "device", ",", "\n", "data_loader", ",", "\n", "data_sampler", ",", "\n", "encoder", "\n", ")", ":", "\n", "    ", "ipe", "=", "len", "(", "data_loader", ")", "\n", "\n", "z_mem", ",", "l_mem", "=", "[", "]", ",", "[", "]", "\n", "\n", "for", "itr", ",", "(", "imgs", ",", "labels", ")", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "        ", "imgs", "=", "imgs", ".", "to", "(", "device", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "z", "=", "encoder", "(", "imgs", ")", "\n", "", "z_mem", ".", "append", "(", "z", ".", "to", "(", "'cpu'", ")", ")", "\n", "l_mem", ".", "append", "(", "labels", ".", "to", "(", "'cpu'", ")", ")", "\n", "if", "itr", "%", "50", "==", "0", ":", "\n", "            ", "logger", ".", "info", "(", "f'[{itr}/{ipe}]'", ")", "\n", "\n", "", "", "z_mem", "=", "torch", ".", "cat", "(", "z_mem", ",", "0", ")", "\n", "l_mem", "=", "torch", ".", "cat", "(", "l_mem", ",", "0", ")", "\n", "logger", ".", "info", "(", "z_mem", ".", "shape", ")", "\n", "logger", ".", "info", "(", "l_mem", ".", "shape", ")", "\n", "\n", "return", "z_mem", ",", "l_mem", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.None.snn_eval.make_snn": [[248, 261], ["embs.div().detach_.div().detach_", "torch.nn.Softmax", "h.div.div", "embs.div().detach_.div", "h.div.norm().unsqueeze", "torch.nn.Softmax.", "embs.div().detach_.norm().unsqueeze", "h.div.norm", "embs.div().detach_.norm"], "function", ["None"], ["", "def", "make_snn", "(", "embs", ",", "labs", ",", "temp", "=", "0.1", ")", ":", "\n", "\n", "# --Normalize embeddings", "\n", "    ", "embs", "=", "embs", ".", "div", "(", "embs", ".", "norm", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ")", ".", "detach_", "(", ")", "\n", "\n", "softmax", "=", "torch", ".", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "\n", "def", "snn", "(", "h", ",", "h_train", "=", "embs", ",", "h_labs", "=", "labs", ")", ":", "\n", "# -- normalize embeddings", "\n", "        ", "h", "=", "h", ".", "div", "(", "h", ".", "norm", "(", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", ")", "\n", "return", "softmax", "(", "h", "@", "h_train", ".", "T", "/", "temp", ")", "@", "h_labs", "\n", "\n", "", "return", "snn", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.None.snn_eval.load_pretrained": [[263, 281], ["torch.load", "encoder.state_dict().items", "encoder.load_state_dict", "logger.info", "logger.info", "k.replace", "checkpoint[].items", "encoder.state_dict", "logger.info", "logger.info"], "function", ["home.repos.pwc.inspect_result.facebookresearch_suncet.src.lars.LARS.load_state_dict", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.lars.LARS.state_dict"], ["", "def", "load_pretrained", "(", "\n", "encoder", ",", "\n", "pretrained", "\n", ")", ":", "\n", "    ", "checkpoint", "=", "torch", ".", "load", "(", "pretrained", ",", "map_location", "=", "'cpu'", ")", "\n", "pretrained_dict", "=", "{", "k", ".", "replace", "(", "'module.'", ",", "''", ")", ":", "v", "for", "k", ",", "v", "in", "checkpoint", "[", "'encoder'", "]", ".", "items", "(", ")", "}", "\n", "for", "k", ",", "v", "in", "encoder", ".", "state_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "not", "in", "pretrained_dict", ":", "\n", "            ", "logger", ".", "info", "(", "f'key \"{k}\" could not be found in loaded state dict'", ")", "\n", "", "elif", "pretrained_dict", "[", "k", "]", ".", "shape", "!=", "v", ".", "shape", ":", "\n", "            ", "logger", ".", "info", "(", "f'key \"{k}\" is of different shape in model and loaded state dict'", ")", "\n", "pretrained_dict", "[", "k", "]", "=", "v", "\n", "", "", "msg", "=", "encoder", ".", "load_state_dict", "(", "pretrained_dict", ",", "strict", "=", "False", ")", "\n", "logger", ".", "info", "(", "f'loaded pretrained model with msg: {msg}'", ")", "\n", "logger", ".", "info", "(", "f'loaded pretrained encoder from epoch: {checkpoint[\"epoch\"]} '", "\n", "f'path: {pretrained}'", ")", "\n", "del", "checkpoint", "\n", "return", "encoder", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.None.snn_eval.init_model": [[283, 329], ["torch.nn.Sequential", "load_pretrained.to", "snn_eval.load_pretrained", "collections.OrderedDict", "collections.OrderedDict", "torch.nn.BatchNorm1d", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.Linear"], "function", ["home.repos.pwc.inspect_result.facebookresearch_suncet.src.fine_tune.load_pretrained"], ["", "def", "init_model", "(", "\n", "device", ",", "\n", "pretrained", ",", "\n", "model_name", "=", "'resnet50'", ",", "\n", "output_dim", "=", "None", ",", "\n", "use_pred", "=", "True", "\n", ")", ":", "\n", "    ", "if", "'wide_resnet'", "in", "model_name", ":", "\n", "        ", "encoder", "=", "wide_resnet", ".", "__dict__", "[", "model_name", "]", "(", "dropout_rate", "=", "0.0", ")", "\n", "hidden_dim", "=", "128", "\n", "", "else", ":", "\n", "        ", "encoder", "=", "resnet", ".", "__dict__", "[", "model_name", "]", "(", ")", "\n", "hidden_dim", "=", "2048", "\n", "if", "'w2'", "in", "model_name", ":", "\n", "            ", "hidden_dim", "*=", "2", "\n", "", "elif", "'w4'", "in", "model_name", ":", "\n", "            ", "hidden_dim", "*=", "4", "\n", "", "", "output_dim", "=", "hidden_dim", "if", "output_dim", "is", "None", "else", "output_dim", "\n", "\n", "# -- projection head", "\n", "encoder", ".", "fc", "=", "torch", ".", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'fc1'", ",", "torch", ".", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", ")", ",", "\n", "(", "'bn1'", ",", "torch", ".", "nn", ".", "BatchNorm1d", "(", "hidden_dim", ")", ")", ",", "\n", "(", "'relu1'", ",", "torch", ".", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'fc2'", ",", "torch", ".", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", ")", ",", "\n", "(", "'bn2'", ",", "torch", ".", "nn", ".", "BatchNorm1d", "(", "hidden_dim", ")", ")", ",", "\n", "(", "'relu2'", ",", "torch", ".", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'fc3'", ",", "torch", ".", "nn", ".", "Linear", "(", "hidden_dim", ",", "output_dim", ")", ")", "\n", "]", ")", ")", "\n", "\n", "# -- prediction head", "\n", "encoder", ".", "pred", "=", "None", "\n", "if", "use_pred", ":", "\n", "        ", "mx", "=", "4", "# 4x bottleneck prediction head", "\n", "pred_head", "=", "OrderedDict", "(", "[", "]", ")", "\n", "pred_head", "[", "'bn1'", "]", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "output_dim", ")", "\n", "pred_head", "[", "'fc1'", "]", "=", "torch", ".", "nn", ".", "Linear", "(", "output_dim", ",", "output_dim", "//", "mx", ")", "\n", "pred_head", "[", "'bn2'", "]", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "output_dim", "//", "mx", ")", "\n", "pred_head", "[", "'relu'", "]", "=", "torch", ".", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "pred_head", "[", "'fc2'", "]", "=", "torch", ".", "nn", ".", "Linear", "(", "output_dim", "//", "mx", ",", "output_dim", ")", "\n", "encoder", ".", "pred", "=", "torch", ".", "nn", ".", "Sequential", "(", "pred_head", ")", "\n", "\n", "", "encoder", ".", "to", "(", "device", ")", "\n", "encoder", "=", "load_pretrained", "(", "encoder", "=", "encoder", ",", "pretrained", "=", "pretrained", ")", "\n", "\n", "return", "encoder", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.lars.LARS.__init__": [[15, 19], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "trust_coefficient", "=", "0.02", ",", "eps", "=", "1e-8", ")", ":", "\n", "        ", "self", ".", "optim", "=", "optimizer", "\n", "self", ".", "trust_coefficient", "=", "trust_coefficient", "\n", "self", ".", "eps", "=", "eps", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.lars.LARS.__getstate__": [[20, 22], ["lars.LARS.optim.__getstate__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_suncet.src.lars.LARS.__getstate__"], ["", "def", "__getstate__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "optim", ".", "__getstate__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.lars.LARS.__setstate__": [[23, 25], ["lars.LARS.optim.__setstate__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_suncet.src.lars.LARS.__setstate__"], ["", "def", "__setstate__", "(", "self", ",", "state", ")", ":", "\n", "        ", "self", ".", "optim", ".", "__setstate__", "(", "state", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.lars.LARS.state": [[26, 29], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "state", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "optim", ".", "state", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.lars.LARS.__repr__": [[30, 32], ["lars.LARS.optim.__repr__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_suncet.src.lars.LARS.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "optim", ".", "__repr__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.lars.LARS.param_groups": [[37, 40], ["None"], "methods", ["None"], ["", "@", "param_groups", ".", "setter", "\n", "def", "param_groups", "(", "self", ",", "value", ")", ":", "\n", "        ", "self", ".", "optim", ".", "param_groups", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.lars.LARS.state_dict": [[41, 43], ["lars.LARS.optim.state_dict"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_suncet.src.lars.LARS.state_dict"], ["", "def", "state_dict", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "optim", ".", "state_dict", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.lars.LARS.load_state_dict": [[44, 46], ["lars.LARS.optim.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_suncet.src.lars.LARS.load_state_dict"], ["", "def", "load_state_dict", "(", "self", ",", "state_dict", ")", ":", "\n", "        ", "self", ".", "optim", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.lars.LARS.zero_grad": [[47, 49], ["lars.LARS.optim.zero_grad"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_suncet.src.lars.LARS.zero_grad"], ["", "def", "zero_grad", "(", "self", ")", ":", "\n", "        ", "self", ".", "optim", ".", "zero_grad", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.lars.LARS.add_param_group": [[50, 52], ["lars.LARS.optim.add_param_group"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_suncet.src.lars.LARS.add_param_group"], ["", "def", "add_param_group", "(", "self", ",", "param_group", ")", ":", "\n", "        ", "self", ".", "optim", ".", "add_param_group", "(", "param_group", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.lars.LARS.step": [[53, 88], ["lars.LARS.optim.step", "enumerate", "torch.no_grad", "src.utils.AverageMeter", "weight_decays.append", "torch.norm", "torch.norm", "src.utils.AverageMeter.update"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_suncet.src.sgd.SGD.step", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.utils.AverageMeter.update"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "stats", "=", "AverageMeter", "(", ")", "\n", "weight_decays", "=", "[", "]", "\n", "for", "group", "in", "self", ".", "optim", ".", "param_groups", ":", "\n", "\n", "# -- takes weight decay control from wrapped optimizer", "\n", "                ", "weight_decay", "=", "group", "[", "'weight_decay'", "]", "if", "'weight_decay'", "in", "group", "else", "0", "\n", "weight_decays", ".", "append", "(", "weight_decay", ")", "\n", "\n", "# -- user wants to exclude this parameter group from LARS", "\n", "#    adaptation", "\n", "if", "(", "'LARS_exclude'", "in", "group", ")", "and", "group", "[", "'LARS_exclude'", "]", ":", "\n", "                    ", "continue", "\n", "", "group", "[", "'weight_decay'", "]", "=", "0", "\n", "\n", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                    ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                        ", "continue", "\n", "", "param_norm", "=", "torch", ".", "norm", "(", "p", ".", "data", ")", "\n", "grad_norm", "=", "torch", ".", "norm", "(", "p", ".", "grad", ".", "data", ")", "\n", "\n", "if", "param_norm", "!=", "0", "and", "grad_norm", "!=", "0", ":", "\n", "                        ", "adaptive_lr", "=", "self", ".", "trust_coefficient", "*", "(", "param_norm", ")", "/", "(", "grad_norm", "+", "param_norm", "*", "weight_decay", "+", "self", ".", "eps", ")", "\n", "\n", "stats", ".", "update", "(", "adaptive_lr", ")", "\n", "p", ".", "grad", ".", "data", "+=", "weight_decay", "*", "p", ".", "data", "\n", "p", ".", "grad", ".", "data", "*=", "adaptive_lr", "\n", "\n", "", "", "", "", "self", ".", "optim", ".", "step", "(", ")", "\n", "# -- return weight decay control to wrapped optimizer", "\n", "for", "i", ",", "group", "in", "enumerate", "(", "self", ".", "optim", ".", "param_groups", ")", ":", "\n", "            ", "group", "[", "'weight_decay'", "]", "=", "weight_decays", "[", "i", "]", "\n", "\n", "", "return", "stats", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.suncet_train.main": [[67, 353], ["torch.device", "torch.cuda.set_device", "float", "src.utils.init_distributed", "logger.info", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "src.utils.CSVLogger", "suncet_train.init_model", "src.losses.init_simclr_loss", "src.losses.init_suncet_loss", "src.losses.make_labels_matrix", "src.data_manager.make_transforms", "src.data_manager.init_data", "len", "logger.info", "torch.cuda.amp.GradScaler", "suncet_train.init_opt", "range", "apex.parallel.create_syncbn_process_group", "apex.parallel.convert_syncbn_model", "torch.nn.parallel.DistributedDataParallel", "suncet_train.load_checkpoint", "range", "logger.info", "unsupervised_sampler.set_epoch", "src.utils.AverageMeter", "src.utils.AverageMeter", "src.utils.AverageMeter", "src.utils.AverageMeter", "src.utils.AverageMeter", "enumerate", "logger.info", "os.path.join", "range", "supervised_sampler.set_epoch", "src.utils.gpu_timer", "src.utils.AverageMeter.update", "src.utils.gpu_timer", "src.utils.AverageMeter.update", "src.utils.AverageMeter.update", "src.utils.AverageMeter.update", "src.utils.AverageMeter.update", "torch.save", "scheduler.step", "torch.cat", "torch.cuda.amp.GradScaler.scale().backward", "torch.cuda.amp.GradScaler.step", "torch.cuda.amp.GradScaler.update", "scheduler.step", "numpy.isnan", "numpy.isinf", "src.utils.CSVLogger.log", "logger.info", "numpy.isnan", "torch.nn.parallel.DistributedDataParallel.state_dict", "optimizer.state_dict", "torch.cuda.amp.GradScaler.state_dict", "logger.info", "torch.save", "torch.save", "u.half", "u.to", "next", "torch.cuda.amp.autocast", "optimizer.zero_grad", "torch.nn.parallel.DistributedDataParallel.", "src.losses.init_simclr_loss.", "src.losses.init_suncet_loss.", "float", "float", "float", "logger.info", "os.path.join.format", "iter", "logger.info", "next", "s.to", "torch.cuda.amp.GradScaler.scale", "s.half", "len"], "function", ["home.repos.pwc.inspect_result.facebookresearch_suncet.src.utils.init_distributed", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.paws_train.init_model", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.losses.init_simclr_loss", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.losses.init_suncet_loss", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.losses.make_labels_matrix", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.paws_train.init_opt", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.paws_train.load_checkpoint", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.utils.gpu_timer", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.utils.AverageMeter.update", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.utils.gpu_timer", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.utils.AverageMeter.update", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.utils.AverageMeter.update", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.utils.AverageMeter.update", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.utils.AverageMeter.update", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.sgd.SGD.step", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.utils.AllReduce.backward", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.sgd.SGD.step", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.utils.AverageMeter.update", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.sgd.SGD.step", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.utils.CSVLogger.log", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.lars.LARS.state_dict", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.lars.LARS.state_dict", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.lars.LARS.state_dict", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.lars.LARS.zero_grad"], ["def", "main", "(", "args", ")", ":", "\n", "\n", "# ----------------------------------------------------------------------- #", "\n", "#  PASSED IN PARAMS FROM CONFIG FILE", "\n", "# ----------------------------------------------------------------------- #", "\n", "# -- META", "\n", "    ", "model_name", "=", "args", "[", "'meta'", "]", "[", "'model_name'", "]", "\n", "output_dim", "=", "args", "[", "'meta'", "]", "[", "'output_dim'", "]", "\n", "load_model", "=", "args", "[", "'meta'", "]", "[", "'load_checkpoint'", "]", "\n", "r_file", "=", "args", "[", "'meta'", "]", "[", "'read_checkpoint'", "]", "\n", "copy_data", "=", "args", "[", "'meta'", "]", "[", "'copy_data'", "]", "\n", "use_fp16", "=", "args", "[", "'meta'", "]", "[", "'use_fp16'", "]", "\n", "use_pred_head", "=", "args", "[", "'meta'", "]", "[", "'use_pred_head'", "]", "\n", "device", "=", "torch", ".", "device", "(", "args", "[", "'meta'", "]", "[", "'device'", "]", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "device", ")", "\n", "\n", "# -- CRITERTION", "\n", "supervised_epochs", "=", "args", "[", "'criterion'", "]", "[", "'supervised_epochs'", "]", "\n", "supervised_views", "=", "args", "[", "'criterion'", "]", "[", "'supervised_views'", "]", "\n", "classes_per_batch", "=", "args", "[", "'criterion'", "]", "[", "'classes_per_batch'", "]", "\n", "s_batch_size", "=", "args", "[", "'criterion'", "]", "[", "'supervised_imgs_per_class'", "]", "\n", "u_batch_size", "=", "args", "[", "'criterion'", "]", "[", "'unsupervised_batch_size'", "]", "\n", "temperature", "=", "args", "[", "'criterion'", "]", "[", "'temperature'", "]", "\n", "\n", "# -- DATA", "\n", "unlabeled_frac", "=", "args", "[", "'data'", "]", "[", "'unlabeled_frac'", "]", "\n", "color_jitter", "=", "args", "[", "'data'", "]", "[", "'color_jitter_strength'", "]", "\n", "normalize", "=", "args", "[", "'data'", "]", "[", "'normalize'", "]", "\n", "root_path", "=", "args", "[", "'data'", "]", "[", "'root_path'", "]", "\n", "image_folder", "=", "args", "[", "'data'", "]", "[", "'image_folder'", "]", "\n", "dataset_name", "=", "args", "[", "'data'", "]", "[", "'dataset'", "]", "\n", "subset_path", "=", "args", "[", "'data'", "]", "[", "'subset_path'", "]", "\n", "unique_classes", "=", "args", "[", "'data'", "]", "[", "'unique_classes_per_rank'", "]", "\n", "label_smoothing", "=", "args", "[", "'data'", "]", "[", "'label_smoothing'", "]", "\n", "crop_scale", "=", "(", "0.5", ",", "1.0", ")", "if", "'cifar10'", "in", "dataset_name", "else", "(", "0.08", ",", "1.0", ")", "\n", "data_seed", "=", "None", "\n", "if", "'cifar10'", "in", "dataset_name", ":", "\n", "        ", "data_seed", "=", "args", "[", "'data'", "]", "[", "'data_seed'", "]", "\n", "\n", "# -- OPTIMIZATION", "\n", "", "wd", "=", "float", "(", "args", "[", "'optimization'", "]", "[", "'weight_decay'", "]", ")", "\n", "num_epochs", "=", "args", "[", "'optimization'", "]", "[", "'epochs'", "]", "\n", "warmup", "=", "args", "[", "'optimization'", "]", "[", "'warmup'", "]", "\n", "start_lr", "=", "args", "[", "'optimization'", "]", "[", "'start_lr'", "]", "\n", "lr", "=", "args", "[", "'optimization'", "]", "[", "'lr'", "]", "\n", "final_lr", "=", "args", "[", "'optimization'", "]", "[", "'final_lr'", "]", "\n", "mom", "=", "args", "[", "'optimization'", "]", "[", "'momentum'", "]", "\n", "nesterov", "=", "args", "[", "'optimization'", "]", "[", "'nesterov'", "]", "\n", "\n", "# -- LOGGING", "\n", "folder", "=", "args", "[", "'logging'", "]", "[", "'folder'", "]", "\n", "tag", "=", "args", "[", "'logging'", "]", "[", "'write_tag'", "]", "\n", "# ----------------------------------------------------------------------- #", "\n", "\n", "# -- init torch distributed backend", "\n", "world_size", ",", "rank", "=", "init_distributed", "(", ")", "\n", "logger", ".", "info", "(", "f'Initialized (rank/world-size) {rank}/{world_size}'", ")", "\n", "\n", "# -- log/checkpointing paths", "\n", "log_file", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "f'{tag}_r{rank}.csv'", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "f'{tag}'", "+", "'-ep{epoch}.pth.tar'", ")", "\n", "latest_path", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "f'{tag}-latest.pth.tar'", ")", "\n", "best_path", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "f'{tag}'", "+", "'-best.pth.tar'", ")", "\n", "load_path", "=", "None", "\n", "if", "load_model", ":", "\n", "        ", "load_path", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "r_file", ")", "if", "r_file", "is", "not", "None", "else", "latest_path", "\n", "\n", "# -- make csv_logger", "\n", "", "csv_logger", "=", "CSVLogger", "(", "log_file", ",", "\n", "(", "'%d'", ",", "'epoch'", ")", ",", "\n", "(", "'%d'", ",", "'itr'", ")", ",", "\n", "(", "'%.5f'", ",", "'suncet-loss'", ")", ",", "\n", "(", "'%.5f'", ",", "'simclr-loss'", ")", ",", "\n", "(", "'%d'", ",", "'time (ms)'", ")", ")", "\n", "\n", "# -- init model", "\n", "encoder", "=", "init_model", "(", "\n", "device", "=", "device", ",", "\n", "model_name", "=", "model_name", ",", "\n", "use_pred", "=", "use_pred_head", ",", "\n", "output_dim", "=", "output_dim", ")", "\n", "if", "world_size", ">", "1", ":", "\n", "        ", "process_group", "=", "apex", ".", "parallel", ".", "create_syncbn_process_group", "(", "0", ")", "\n", "encoder", "=", "apex", ".", "parallel", ".", "convert_syncbn_model", "(", "encoder", ",", "process_group", "=", "process_group", ")", "\n", "\n", "# -- init losses", "\n", "", "ntxent", "=", "init_simclr_loss", "(", "\n", "batch_size", "=", "u_batch_size", ",", "\n", "world_size", "=", "world_size", ",", "\n", "rank", "=", "rank", ",", "\n", "temperature", "=", "temperature", ",", "\n", "device", "=", "device", ")", "\n", "suncet", "=", "init_suncet_loss", "(", "\n", "num_classes", "=", "classes_per_batch", ",", "\n", "batch_size", "=", "s_batch_size", "*", "supervised_views", ",", "\n", "world_size", "=", "world_size", ",", "\n", "rank", "=", "rank", ",", "\n", "temperature", "=", "temperature", ",", "\n", "device", "=", "device", ",", "\n", "unique_classes", "=", "unique_classes", ")", "\n", "# -- assume support images are sampled with ClassStratifiedSampler", "\n", "labels", "=", "make_labels_matrix", "(", "\n", "num_classes", "=", "classes_per_batch", ",", "\n", "s_batch_size", "=", "s_batch_size", ",", "\n", "world_size", "=", "world_size", ",", "\n", "device", "=", "device", ",", "\n", "unique_classes", "=", "unique_classes", ",", "\n", "smoothing", "=", "label_smoothing", ")", "\n", "\n", "# -- make data transforms", "\n", "transform", ",", "init_transform", "=", "make_transforms", "(", "\n", "dataset_name", "=", "dataset_name", ",", "\n", "subset_path", "=", "subset_path", ",", "\n", "unlabeled_frac", "=", "unlabeled_frac", ",", "\n", "training", "=", "True", ",", "\n", "split_seed", "=", "data_seed", ",", "\n", "crop_scale", "=", "crop_scale", ",", "\n", "basic_augmentations", "=", "False", ",", "\n", "color_jitter", "=", "color_jitter", ",", "\n", "normalize", "=", "normalize", ")", "\n", "\n", "# -- init data-loaders/samplers", "\n", "(", "unsupervised_loader", ",", "\n", "unsupervised_sampler", ",", "\n", "supervised_loader", ",", "\n", "supervised_sampler", ")", "=", "init_data", "(", "\n", "dataset_name", "=", "dataset_name", ",", "\n", "transform", "=", "transform", ",", "\n", "init_transform", "=", "init_transform", ",", "\n", "supervised_views", "=", "supervised_views", ",", "\n", "u_batch_size", "=", "u_batch_size", ",", "\n", "s_batch_size", "=", "s_batch_size", ",", "\n", "unique_classes", "=", "unique_classes", ",", "\n", "classes_per_batch", "=", "classes_per_batch", ",", "\n", "world_size", "=", "world_size", ",", "\n", "rank", "=", "rank", ",", "\n", "root_path", "=", "root_path", ",", "\n", "image_folder", "=", "image_folder", ",", "\n", "training", "=", "True", ",", "\n", "copy_data", "=", "copy_data", ")", "\n", "iter_supervised", "=", "None", "\n", "ipe", "=", "len", "(", "unsupervised_loader", ")", "\n", "logger", ".", "info", "(", "f'iterations per epoch: {ipe}'", ")", "\n", "\n", "# -- init optimizer and scheduler", "\n", "scaler", "=", "torch", ".", "cuda", ".", "amp", ".", "GradScaler", "(", "enabled", "=", "use_fp16", ")", "\n", "encoder", ",", "optimizer", ",", "scheduler", "=", "init_opt", "(", "\n", "encoder", "=", "encoder", ",", "\n", "weight_decay", "=", "wd", ",", "\n", "start_lr", "=", "start_lr", ",", "\n", "ref_lr", "=", "lr", ",", "\n", "final_lr", "=", "final_lr", ",", "\n", "ref_mom", "=", "mom", ",", "\n", "nesterov", "=", "nesterov", ",", "\n", "iterations_per_epoch", "=", "ipe", ",", "\n", "warmup", "=", "warmup", ",", "\n", "num_epochs", "=", "num_epochs", ")", "\n", "if", "world_size", ">", "1", ":", "\n", "        ", "encoder", "=", "DistributedDataParallel", "(", "encoder", ",", "broadcast_buffers", "=", "False", ")", "\n", "\n", "", "start_epoch", "=", "0", "\n", "# -- load training checkpoint", "\n", "if", "load_model", ":", "\n", "        ", "encoder", ",", "optimizer", ",", "start_epoch", "=", "load_checkpoint", "(", "\n", "r_path", "=", "load_path", ",", "\n", "encoder", "=", "encoder", ",", "\n", "opt", "=", "optimizer", ",", "\n", "scaler", "=", "scaler", ",", "\n", "use_fp16", "=", "use_fp16", ")", "\n", "for", "_", "in", "range", "(", "start_epoch", ")", ":", "\n", "            ", "for", "_", "in", "range", "(", "ipe", ")", ":", "\n", "                ", "scheduler", ".", "step", "(", ")", "\n", "\n", "# -- TRAINING LOOP", "\n", "", "", "", "best_loss", "=", "None", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "num_epochs", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'Epoch %d'", "%", "(", "epoch", "+", "1", ")", ")", "\n", "\n", "# -- update distributed-data-loader epoch", "\n", "unsupervised_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "if", "supervised_sampler", "is", "not", "None", ":", "\n", "            ", "supervised_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "\n", "", "loss_meter", "=", "AverageMeter", "(", ")", "\n", "ploss_meter", "=", "AverageMeter", "(", ")", "\n", "rloss_meter", "=", "AverageMeter", "(", ")", "\n", "time_meter", "=", "AverageMeter", "(", ")", "\n", "data_meter", "=", "AverageMeter", "(", ")", "\n", "\n", "for", "itr", ",", "udata", "in", "enumerate", "(", "unsupervised_loader", ")", ":", "\n", "            ", "if", "use_fp16", ":", "\n", "                ", "udata", "=", "[", "u", ".", "half", "(", ")", "for", "u", "in", "udata", "]", "\n", "\n", "", "def", "load_imgs", "(", ")", ":", "\n", "# -- unsupervised imgs (2 views)", "\n", "                ", "imgs", "=", "[", "u", ".", "to", "(", "device", ")", "for", "u", "in", "udata", "[", ":", "2", "]", "]", "\n", "\n", "# -- labeled imgs", "\n", "global", "iter_supervised", "\n", "try", ":", "\n", "                    ", "sdata", "=", "next", "(", "iter_supervised", ")", "\n", "", "except", "Exception", ":", "\n", "                    ", "iter_supervised", "=", "iter", "(", "supervised_loader", ")", "\n", "logger", ".", "info", "(", "f'len.supervised_loader: {len(iter_supervised)}'", ")", "\n", "sdata", "=", "next", "(", "iter_supervised", ")", "\n", "if", "use_fp16", ":", "\n", "                        ", "sdata", "=", "[", "s", ".", "half", "(", ")", "for", "s", "in", "sdata", "]", "\n", "", "", "finally", ":", "\n", "# -- shuffle images in sampled support mini-batch", "\n", "                    ", "simgs", "=", "[", "s", ".", "to", "(", "device", ")", "for", "s", "in", "sdata", "[", ":", "-", "1", "]", "]", "\n", "\n", "# -- concatenate unlabeled images and labeled images", "\n", "", "return", "torch", ".", "cat", "(", "imgs", "+", "simgs", ",", "dim", "=", "0", ")", "\n", "", "(", "imgs", ")", ",", "dtime", "=", "gpu_timer", "(", "load_imgs", ")", "\n", "data_meter", ".", "update", "(", "dtime", ")", "\n", "\n", "def", "train_step", "(", ")", ":", "\n", "                ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", "enabled", "=", "use_fp16", ")", ":", "\n", "                    ", "optimizer", ".", "zero_grad", "(", ")", "\n", "z", "=", "encoder", "(", "imgs", ")", "\n", "# -- simclr loss", "\n", "uloss", "=", "ntxent", "(", "z", "[", ":", "2", "*", "u_batch_size", "]", ")", "\n", "# -- suncet loss", "\n", "sloss", "=", "suncet", "(", "z", "[", "2", "*", "u_batch_size", ":", "]", ",", "labels", ")", "\n", "loss", "=", "uloss", "\n", "if", "epoch", "<", "supervised_epochs", ":", "\n", "                        ", "loss", "+=", "sloss", "\n", "\n", "", "", "scaler", ".", "scale", "(", "loss", ")", ".", "backward", "(", ")", "\n", "lr_stats", "=", "scaler", ".", "step", "(", "optimizer", ")", "\n", "scaler", ".", "update", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "return", "(", "float", "(", "loss", ")", ",", "float", "(", "sloss", ")", ",", "float", "(", "uloss", ")", ",", "lr_stats", ")", "\n", "", "(", "loss", ",", "ploss", ",", "rloss", ",", "lr_stats", ")", ",", "etime", "=", "gpu_timer", "(", "train_step", ")", "\n", "loss_meter", ".", "update", "(", "loss", ")", "\n", "ploss_meter", ".", "update", "(", "ploss", ")", "\n", "rloss_meter", ".", "update", "(", "rloss", ")", "\n", "time_meter", ".", "update", "(", "etime", ")", "\n", "\n", "if", "(", "itr", "%", "log_freq", "==", "0", ")", "or", "np", ".", "isnan", "(", "loss", ")", "or", "np", ".", "isinf", "(", "loss", ")", ":", "\n", "                ", "csv_logger", ".", "log", "(", "epoch", "+", "1", ",", "itr", ",", "\n", "ploss_meter", ".", "avg", ",", "\n", "rloss_meter", ".", "avg", ",", "\n", "time_meter", ".", "avg", ")", "\n", "logger", ".", "info", "(", "'[%d, %5d] loss: %.3f (%.3f %.3f) '", "\n", "'(%d ms; %d ms)'", "\n", "%", "(", "epoch", "+", "1", ",", "itr", ",", "\n", "loss_meter", ".", "avg", ",", "\n", "ploss_meter", ".", "avg", ",", "\n", "rloss_meter", ".", "avg", ",", "\n", "time_meter", ".", "avg", ",", "\n", "data_meter", ".", "avg", ")", ")", "\n", "if", "lr_stats", "is", "not", "None", ":", "\n", "                    ", "logger", ".", "info", "(", "'[%d, %5d] lr_stats: %.3f (%.2e, %.2e)'", "\n", "%", "(", "epoch", "+", "1", ",", "itr", ",", "\n", "lr_stats", ".", "avg", ",", "\n", "lr_stats", ".", "min", ",", "\n", "lr_stats", ".", "max", ")", ")", "\n", "\n", "", "", "assert", "not", "np", ".", "isnan", "(", "loss", ")", ",", "'loss is nan'", "\n", "\n", "# -- logging/checkpointing", "\n", "", "logger", ".", "info", "(", "'avg. loss %.3f'", "%", "loss_meter", ".", "avg", ")", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "save_dict", "=", "{", "\n", "'encoder'", ":", "encoder", ".", "state_dict", "(", ")", ",", "\n", "'opt'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'unlabel_prob'", ":", "unlabeled_frac", ",", "\n", "'loss'", ":", "loss_meter", ".", "avg", ",", "\n", "'s_batch_size'", ":", "s_batch_size", ",", "\n", "'u_batch_size'", ":", "u_batch_size", ",", "\n", "'world_size'", ":", "world_size", ",", "\n", "'lr'", ":", "lr", ",", "\n", "'temperature'", ":", "temperature", ",", "\n", "'amp'", ":", "scaler", ".", "state_dict", "(", ")", "\n", "}", "\n", "torch", ".", "save", "(", "save_dict", ",", "latest_path", ")", "\n", "if", "best_loss", "is", "None", "or", "best_loss", ">", "loss_meter", ".", "avg", ":", "\n", "                ", "best_loss", "=", "loss_meter", ".", "avg", "\n", "logger", ".", "info", "(", "'updating \"best\" checkpoint'", ")", "\n", "torch", ".", "save", "(", "save_dict", ",", "best_path", ")", "\n", "", "if", "(", "epoch", "+", "1", ")", "%", "checkpoint_freq", "==", "0", "or", "(", "epoch", "+", "1", ")", "%", "10", "==", "0", "and", "epoch", "<", "checkpoint_freq", ":", "\n", "                ", "torch", ".", "save", "(", "save_dict", ",", "save_path", ".", "format", "(", "epoch", "=", "f'{epoch + 1}'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.suncet_train.load_checkpoint": [[355, 377], ["torch.load", "encoder.load_state_dict", "logger.info", "opt.load_state_dict", "logger.info", "logger.info", "scaler.load_state_dict"], "function", ["home.repos.pwc.inspect_result.facebookresearch_suncet.src.lars.LARS.load_state_dict", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.lars.LARS.load_state_dict", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.lars.LARS.load_state_dict"], ["", "", "", "", "def", "load_checkpoint", "(", "\n", "r_path", ",", "\n", "encoder", ",", "\n", "opt", ",", "\n", "scaler", ",", "\n", "use_fp16", "=", "False", "\n", ")", ":", "\n", "    ", "checkpoint", "=", "torch", ".", "load", "(", "r_path", ",", "map_location", "=", "'cpu'", ")", "\n", "epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "\n", "# -- loading encoder", "\n", "encoder", ".", "load_state_dict", "(", "checkpoint", "[", "'encoder'", "]", ")", "\n", "logger", ".", "info", "(", "f'loaded encoder from epoch {epoch}'", ")", "\n", "\n", "# -- loading optimizer", "\n", "opt", ".", "load_state_dict", "(", "checkpoint", "[", "'opt'", "]", ")", "\n", "if", "use_fp16", ":", "\n", "        ", "scaler", ".", "load_state_dict", "(", "checkpoint", "[", "'amp'", "]", ")", "\n", "", "logger", ".", "info", "(", "f'loaded optimizers from epoch {epoch}'", ")", "\n", "logger", ".", "info", "(", "f'read-path: {r_path}'", ")", "\n", "del", "checkpoint", "\n", "return", "encoder", ",", "opt", ",", "epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.suncet_train.init_model": [[379, 422], ["torch.nn.Sequential", "encoder.to", "logger.info", "collections.OrderedDict", "collections.OrderedDict", "torch.nn.BatchNorm1d", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.Linear"], "function", ["None"], ["", "def", "init_model", "(", "\n", "device", ",", "\n", "model_name", "=", "'resnet50'", ",", "\n", "use_pred", "=", "False", ",", "\n", "output_dim", "=", "128", "\n", ")", ":", "\n", "    ", "if", "'wide_resnet'", "in", "model_name", ":", "\n", "        ", "encoder", "=", "wide_resnet", ".", "__dict__", "[", "model_name", "]", "(", "dropout_rate", "=", "0.0", ")", "\n", "hidden_dim", "=", "128", "\n", "", "else", ":", "\n", "        ", "encoder", "=", "resnet", ".", "__dict__", "[", "model_name", "]", "(", ")", "\n", "hidden_dim", "=", "2048", "\n", "if", "'w2'", "in", "model_name", ":", "\n", "            ", "hidden_dim", "*=", "2", "\n", "", "elif", "'w4'", "in", "model_name", ":", "\n", "            ", "hidden_dim", "*=", "4", "\n", "\n", "# -- projection head", "\n", "", "", "encoder", ".", "fc", "=", "torch", ".", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'fc1'", ",", "torch", ".", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", ")", ",", "\n", "(", "'bn1'", ",", "torch", ".", "nn", ".", "BatchNorm1d", "(", "hidden_dim", ")", ")", ",", "\n", "(", "'relu1'", ",", "torch", ".", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'fc2'", ",", "torch", ".", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", ")", ",", "\n", "(", "'bn2'", ",", "torch", ".", "nn", ".", "BatchNorm1d", "(", "hidden_dim", ")", ")", ",", "\n", "(", "'relu2'", ",", "torch", ".", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'fc3'", ",", "torch", ".", "nn", ".", "Linear", "(", "hidden_dim", ",", "output_dim", ")", ")", "\n", "]", ")", ")", "\n", "\n", "# -- prediction head", "\n", "encoder", ".", "pred", "=", "None", "\n", "if", "use_pred", ":", "\n", "        ", "mx", "=", "4", "# 4x bottleneck prediction head", "\n", "pred_head", "=", "OrderedDict", "(", "[", "]", ")", "\n", "pred_head", "[", "'bn1'", "]", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "output_dim", ")", "\n", "pred_head", "[", "'fc1'", "]", "=", "torch", ".", "nn", ".", "Linear", "(", "output_dim", ",", "output_dim", "//", "mx", ")", "\n", "pred_head", "[", "'bn2'", "]", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "output_dim", "//", "mx", ")", "\n", "pred_head", "[", "'relu'", "]", "=", "torch", ".", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "pred_head", "[", "'fc2'", "]", "=", "torch", ".", "nn", ".", "Linear", "(", "output_dim", "//", "mx", ",", "output_dim", ")", "\n", "encoder", ".", "pred", "=", "torch", ".", "nn", ".", "Sequential", "(", "pred_head", ")", "\n", "\n", "", "encoder", ".", "to", "(", "device", ")", "\n", "logger", ".", "info", "(", "encoder", ")", "\n", "return", "encoder", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.suncet_train.init_opt": [[424, 459], ["src.sgd.SGD", "src.utils.WarmupCosineSchedule", "src.lars.LARS", "encoder.named_parameters", "encoder.named_parameters"], "function", ["None"], ["", "def", "init_opt", "(", "\n", "encoder", ",", "\n", "iterations_per_epoch", ",", "\n", "start_lr", ",", "\n", "ref_lr", ",", "\n", "ref_mom", ",", "\n", "nesterov", ",", "\n", "warmup", ",", "\n", "num_epochs", ",", "\n", "weight_decay", "=", "1e-6", ",", "\n", "final_lr", "=", "0.0", "\n", ")", ":", "\n", "    ", "param_groups", "=", "[", "\n", "{", "'params'", ":", "(", "p", "for", "n", ",", "p", "in", "encoder", ".", "named_parameters", "(", ")", "\n", "if", "(", "'bias'", "not", "in", "n", ")", "and", "(", "'bn'", "not", "in", "n", ")", ")", "}", ",", "\n", "{", "'params'", ":", "(", "p", "for", "n", ",", "p", "in", "encoder", ".", "named_parameters", "(", ")", "\n", "if", "(", "'bias'", "in", "n", ")", "or", "(", "'bn'", "in", "n", ")", ")", ",", "\n", "'LARS_exclude'", ":", "True", ",", "\n", "'weight_decay'", ":", "0", "}", "\n", "]", "\n", "optimizer", "=", "SGD", "(", "\n", "param_groups", ",", "\n", "weight_decay", "=", "weight_decay", ",", "\n", "momentum", "=", "0.9", ",", "\n", "nesterov", "=", "nesterov", ",", "\n", "lr", "=", "ref_lr", ")", "\n", "scheduler", "=", "WarmupCosineSchedule", "(", "\n", "optimizer", ",", "\n", "warmup_steps", "=", "warmup", "*", "iterations_per_epoch", ",", "\n", "start_lr", "=", "start_lr", ",", "\n", "ref_lr", "=", "ref_lr", ",", "\n", "final_lr", "=", "final_lr", ",", "\n", "T_max", "=", "num_epochs", "*", "iterations_per_epoch", ")", "\n", "optimizer", "=", "LARS", "(", "optimizer", ",", "trust_coefficient", "=", "0.001", ")", "\n", "return", "encoder", ",", "optimizer", ",", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.snn_fine_tune.main": [[68, 261], ["torch.device", "torch.cuda.set_device", "float", "os.path.join", "os.path.join", "src.utils.init_distributed", "logger.info", "src.losses.init_suncet_loss", "src.losses.make_labels_matrix", "src.data_manager.make_transforms", "src.data_manager.init_data", "dist_sampler.set_inner_epochs", "len", "logger.info", "torch.cuda.amp.GradScaler", "snn_fine_tune.init_model", "range", "logger.info", "int", "int", "snn_fine_tune.load_from_path", "logger.info", "snn_fine_tune.main.train_step"], "function", ["home.repos.pwc.inspect_result.facebookresearch_suncet.src.utils.init_distributed", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.losses.init_suncet_loss", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.losses.make_labels_matrix", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.paws_train.init_model", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.fine_tune.load_from_path"], ["def", "main", "(", "args", ")", ":", "\n", "\n", "# -- META", "\n", "    ", "model_name", "=", "args", "[", "'meta'", "]", "[", "'model_name'", "]", "\n", "load_checkpoint", "=", "args", "[", "'meta'", "]", "[", "'load_checkpoint'", "]", "\n", "copy_data", "=", "args", "[", "'meta'", "]", "[", "'copy_data'", "]", "\n", "output_dim", "=", "args", "[", "'meta'", "]", "[", "'output_dim'", "]", "\n", "use_pred_head", "=", "args", "[", "'meta'", "]", "[", "'use_pred_head'", "]", "\n", "use_fp16", "=", "args", "[", "'meta'", "]", "[", "'use_fp16'", "]", "\n", "device", "=", "torch", ".", "device", "(", "args", "[", "'meta'", "]", "[", "'device'", "]", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "device", ")", "\n", "\n", "# -- DATA", "\n", "unlabeled_frac", "=", "args", "[", "'data'", "]", "[", "'unlabeled_frac'", "]", "\n", "label_smoothing", "=", "args", "[", "'data'", "]", "[", "'label_smoothing'", "]", "\n", "normalize", "=", "args", "[", "'data'", "]", "[", "'normalize'", "]", "\n", "root_path", "=", "args", "[", "'data'", "]", "[", "'root_path'", "]", "\n", "image_folder", "=", "args", "[", "'data'", "]", "[", "'image_folder'", "]", "\n", "dataset_name", "=", "args", "[", "'data'", "]", "[", "'dataset'", "]", "\n", "subset_path", "=", "args", "[", "'data'", "]", "[", "'subset_path'", "]", "\n", "unique_classes", "=", "args", "[", "'data'", "]", "[", "'unique_classes_per_rank'", "]", "\n", "data_seed", "=", "args", "[", "'data'", "]", "[", "'data_seed'", "]", "\n", "\n", "# -- CRITERTION", "\n", "classes_per_batch", "=", "args", "[", "'criterion'", "]", "[", "'classes_per_batch'", "]", "\n", "supervised_views", "=", "args", "[", "'criterion'", "]", "[", "'supervised_views'", "]", "\n", "batch_size", "=", "args", "[", "'criterion'", "]", "[", "'supervised_batch_size'", "]", "\n", "temperature", "=", "args", "[", "'criterion'", "]", "[", "'temperature'", "]", "\n", "\n", "# -- OPTIMIZATION", "\n", "wd", "=", "float", "(", "args", "[", "'optimization'", "]", "[", "'weight_decay'", "]", ")", "\n", "num_epochs", "=", "args", "[", "'optimization'", "]", "[", "'epochs'", "]", "\n", "use_lars", "=", "args", "[", "'optimization'", "]", "[", "'use_lars'", "]", "\n", "warmup", "=", "args", "[", "'optimization'", "]", "[", "'warmup'", "]", "\n", "start_lr", "=", "args", "[", "'optimization'", "]", "[", "'start_lr'", "]", "\n", "ref_lr", "=", "args", "[", "'optimization'", "]", "[", "'lr'", "]", "\n", "final_lr", "=", "args", "[", "'optimization'", "]", "[", "'final_lr'", "]", "\n", "momentum", "=", "args", "[", "'optimization'", "]", "[", "'momentum'", "]", "\n", "nesterov", "=", "args", "[", "'optimization'", "]", "[", "'nesterov'", "]", "\n", "\n", "# -- LOGGING", "\n", "folder", "=", "args", "[", "'logging'", "]", "[", "'folder'", "]", "\n", "tag", "=", "args", "[", "'logging'", "]", "[", "'write_tag'", "]", "\n", "r_file_enc", "=", "args", "[", "'logging'", "]", "[", "'pretrain_path'", "]", "\n", "\n", "# -- log/checkpointing paths", "\n", "r_enc_path", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "r_file_enc", ")", "\n", "w_enc_path", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "f'{tag}-fine-tune-SNN.pth.tar'", ")", "\n", "\n", "# -- init distributed", "\n", "world_size", ",", "rank", "=", "init_distributed", "(", ")", "\n", "logger", ".", "info", "(", "f'initialized rank/world-size: {rank}/{world_size}'", ")", "\n", "\n", "# -- init loss", "\n", "suncet", "=", "init_suncet_loss", "(", "\n", "num_classes", "=", "classes_per_batch", ",", "\n", "batch_size", "=", "batch_size", "*", "supervised_views", ",", "\n", "world_size", "=", "world_size", ",", "\n", "rank", "=", "rank", ",", "\n", "temperature", "=", "temperature", ",", "\n", "device", "=", "device", ")", "\n", "labels_matrix", "=", "make_labels_matrix", "(", "\n", "num_classes", "=", "classes_per_batch", ",", "\n", "s_batch_size", "=", "batch_size", ",", "\n", "world_size", "=", "world_size", ",", "\n", "device", "=", "device", ",", "\n", "unique_classes", "=", "unique_classes", ",", "\n", "smoothing", "=", "label_smoothing", ")", "\n", "\n", "# -- make data transforms", "\n", "transform", ",", "init_transform", "=", "make_transforms", "(", "\n", "dataset_name", "=", "dataset_name", ",", "\n", "subset_path", "=", "subset_path", ",", "\n", "unlabeled_frac", "=", "unlabeled_frac", ",", "\n", "training", "=", "True", ",", "\n", "split_seed", "=", "data_seed", ",", "\n", "basic_augmentations", "=", "True", ",", "\n", "normalize", "=", "normalize", ")", "\n", "(", "data_loader", ",", "\n", "dist_sampler", ")", "=", "init_data", "(", "\n", "dataset_name", "=", "dataset_name", ",", "\n", "transform", "=", "transform", ",", "\n", "init_transform", "=", "init_transform", ",", "\n", "supervised_views", "=", "supervised_views", ",", "\n", "u_batch_size", "=", "None", ",", "\n", "stratify", "=", "True", ",", "\n", "s_batch_size", "=", "batch_size", ",", "\n", "classes_per_batch", "=", "classes_per_batch", ",", "\n", "unique_classes", "=", "unique_classes", ",", "\n", "world_size", "=", "world_size", ",", "\n", "rank", "=", "rank", ",", "\n", "root_path", "=", "root_path", ",", "\n", "image_folder", "=", "image_folder", ",", "\n", "training", "=", "True", ",", "\n", "copy_data", "=", "copy_data", ")", "\n", "\n", "# -- rough estimate of labeled imgs per class used to set the number of", "\n", "#    fine-tuning iterations", "\n", "imgs_per_class", "=", "int", "(", "1300", "*", "(", "1.", "-", "unlabeled_frac", ")", ")", "if", "'imagenet'", "in", "dataset_name", "else", "int", "(", "5000", "*", "(", "1.", "-", "unlabeled_frac", ")", ")", "\n", "dist_sampler", ".", "set_inner_epochs", "(", "imgs_per_class", "//", "batch_size", ")", "\n", "\n", "ipe", "=", "len", "(", "data_loader", ")", "\n", "logger", ".", "info", "(", "f'initialized data-loader (ipe {ipe})'", ")", "\n", "\n", "# -- init model and optimizer", "\n", "scaler", "=", "torch", ".", "cuda", ".", "amp", ".", "GradScaler", "(", "enabled", "=", "use_fp16", ")", "\n", "encoder", ",", "optimizer", ",", "scheduler", "=", "init_model", "(", "\n", "device", "=", "device", ",", "\n", "training", "=", "True", ",", "\n", "r_enc_path", "=", "r_enc_path", ",", "\n", "iterations_per_epoch", "=", "ipe", ",", "\n", "world_size", "=", "world_size", ",", "\n", "start_lr", "=", "start_lr", ",", "\n", "ref_lr", "=", "ref_lr", ",", "\n", "num_epochs", "=", "num_epochs", ",", "\n", "output_dim", "=", "output_dim", ",", "\n", "model_name", "=", "model_name", ",", "\n", "warmup_epochs", "=", "warmup", ",", "\n", "use_pred_head", "=", "use_pred_head", ",", "\n", "use_fp16", "=", "use_fp16", ",", "\n", "wd", "=", "wd", ",", "\n", "final_lr", "=", "final_lr", ",", "\n", "momentum", "=", "momentum", ",", "\n", "nesterov", "=", "nesterov", ",", "\n", "use_lars", "=", "use_lars", ")", "\n", "\n", "best_acc", ",", "val_top1", "=", "None", ",", "None", "\n", "start_epoch", "=", "0", "\n", "# -- load checkpoint", "\n", "if", "load_checkpoint", ":", "\n", "        ", "encoder", ",", "optimizer", ",", "scaler", ",", "scheduler", ",", "start_epoch", ",", "best_acc", "=", "load_from_path", "(", "\n", "r_path", "=", "w_enc_path", ",", "\n", "encoder", "=", "encoder", ",", "\n", "opt", "=", "optimizer", ",", "\n", "scaler", "=", "scaler", ",", "\n", "sched", "=", "scheduler", ",", "\n", "device", "=", "device", ",", "\n", "use_fp16", "=", "use_fp16", ",", "\n", "ckp", "=", "True", ")", "\n", "\n", "", "for", "epoch", "in", "range", "(", "start_epoch", ",", "num_epochs", ")", ":", "\n", "\n", "        ", "def", "train_step", "(", ")", ":", "\n", "# -- update distributed-data-loader epoch", "\n", "            ", "dist_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "                ", "imgs", "=", "torch", ".", "cat", "(", "[", "s", ".", "to", "(", "device", ")", "for", "s", "in", "data", "[", ":", "-", "1", "]", "]", ",", "0", ")", "\n", "labels", "=", "torch", ".", "cat", "(", "[", "labels_matrix", "for", "_", "in", "range", "(", "supervised_views", ")", "]", ")", "\n", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", "enabled", "=", "use_fp16", ")", ":", "\n", "                    ", "optimizer", ".", "zero_grad", "(", ")", "\n", "z", "=", "encoder", "(", "imgs", ")", "\n", "loss", "=", "suncet", "(", "z", ",", "labels", ")", "\n", "", "scaler", ".", "scale", "(", "loss", ")", ".", "backward", "(", ")", "\n", "scaler", ".", "step", "(", "optimizer", ")", "\n", "scaler", ".", "update", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "if", "i", "%", "log_freq", "==", "0", ":", "\n", "                    ", "logger", ".", "info", "(", "'[%d, %5d] (loss: %.3f)'", "%", "(", "epoch", "+", "1", ",", "i", ",", "loss", ")", ")", "\n", "\n", "", "", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "with", "nostdout", "(", ")", ":", "\n", "                ", "val_top1", ",", "_", "=", "val_run", "(", "\n", "pretrained", "=", "copy", ".", "deepcopy", "(", "encoder", ")", ",", "\n", "subset_path", "=", "subset_path", ",", "\n", "unlabeled_frac", "=", "unlabeled_frac", ",", "\n", "dataset_name", "=", "dataset_name", ",", "\n", "root_path", "=", "root_path", ",", "\n", "image_folder", "=", "image_folder", ",", "\n", "use_pred", "=", "use_pred_head", ",", "\n", "normalize", "=", "normalize", ",", "\n", "split_seed", "=", "data_seed", ")", "\n", "", "", "logger", ".", "info", "(", "'[%d] (val: %.3f%%)'", "%", "(", "epoch", "+", "1", ",", "val_top1", ")", ")", "\n", "train_step", "(", ")", "\n", "\n", "# -- logging/checkpointing", "\n", "if", "(", "rank", "==", "0", ")", "and", "(", "(", "best_acc", "is", "None", ")", "or", "(", "best_acc", "<", "val_top1", ")", ")", ":", "\n", "            ", "best_acc", "=", "val_top1", "\n", "save_dict", "=", "{", "\n", "'encoder'", ":", "encoder", ".", "state_dict", "(", ")", ",", "\n", "'opt'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'sched'", ":", "scheduler", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'unlabel_prob'", ":", "unlabeled_frac", ",", "\n", "'world_size'", ":", "world_size", ",", "\n", "'batch_size'", ":", "batch_size", ",", "\n", "'best_top1_acc'", ":", "best_acc", ",", "\n", "'lr'", ":", "ref_lr", ",", "\n", "'amp'", ":", "scaler", ".", "state_dict", "(", ")", "\n", "}", "\n", "torch", ".", "save", "(", "save_dict", ",", "w_enc_path", ")", "\n", "\n", "", "", "logger", ".", "info", "(", "'[%d] (best-val: %.3f%%)'", "%", "(", "epoch", "+", "1", ",", "best_acc", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.snn_fine_tune.load_pretrained": [[263, 286], ["torch.load", "encoder.state_dict().items", "encoder.load_state_dict", "logger.info", "logger.info", "k.replace", "encoder.state_dict", "logger.info", "checkpoint[].items", "checkpoint[].items", "logger.info"], "function", ["home.repos.pwc.inspect_result.facebookresearch_suncet.src.lars.LARS.load_state_dict", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.lars.LARS.state_dict"], ["", "def", "load_pretrained", "(", "\n", "r_path", ",", "\n", "encoder", ",", "\n", "device", ",", "\n", "ckp", "=", "False", "\n", ")", ":", "\n", "    ", "checkpoint", "=", "torch", ".", "load", "(", "r_path", ",", "map_location", "=", "device", ")", "\n", "if", "ckp", ":", "\n", "        ", "pretrained_dict", "=", "{", "k", ":", "v", "for", "k", ",", "v", "in", "checkpoint", "[", "'encoder'", "]", ".", "items", "(", ")", "}", "\n", "", "else", ":", "\n", "        ", "pretrained_dict", "=", "{", "k", ".", "replace", "(", "'module.'", ",", "''", ")", ":", "v", "for", "k", ",", "v", "in", "checkpoint", "[", "'encoder'", "]", ".", "items", "(", ")", "}", "\n", "", "for", "k", ",", "v", "in", "encoder", ".", "state_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "not", "in", "pretrained_dict", ":", "\n", "            ", "logger", ".", "info", "(", "f'key \"{k}\" could not be found in loaded state dict'", ")", "\n", "", "elif", "pretrained_dict", "[", "k", "]", ".", "shape", "!=", "v", ".", "shape", ":", "\n", "            ", "logger", ".", "info", "(", "f'key \"{k}\" is of different shape in model and loaded state dict'", ")", "\n", "pretrained_dict", "[", "k", "]", "=", "v", "\n", "", "", "msg", "=", "encoder", ".", "load_state_dict", "(", "pretrained_dict", ",", "strict", "=", "False", ")", "\n", "logger", ".", "info", "(", "f'loaded pretrained model with msg: {msg}'", ")", "\n", "logger", ".", "info", "(", "f'loaded pretrained encoder from epoch: {checkpoint[\"epoch\"]} '", "\n", "f'path: {r_path}'", ")", "\n", "del", "checkpoint", "\n", "return", "encoder", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.snn_fine_tune.load_from_path": [[288, 313], ["snn_fine_tune.load_pretrained", "torch.load", "logger.info", "opt.load_state_dict", "sched.load_state_dict", "logger.info", "scaler.load_state_dict"], "function", ["home.repos.pwc.inspect_result.facebookresearch_suncet.src.fine_tune.load_pretrained", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.lars.LARS.load_state_dict", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.lars.LARS.load_state_dict", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.lars.LARS.load_state_dict"], ["", "def", "load_from_path", "(", "\n", "r_path", ",", "\n", "encoder", ",", "\n", "opt", ",", "\n", "sched", ",", "\n", "scaler", ",", "\n", "device", ",", "\n", "use_fp16", "=", "False", ",", "\n", "ckp", "=", "False", "\n", ")", ":", "\n", "    ", "encoder", "=", "load_pretrained", "(", "r_path", ",", "encoder", ",", "device", ",", "ckp", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "r_path", ",", "map_location", "=", "device", ")", "\n", "epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "best_acc", "=", "None", "\n", "if", "'best_top1_acc'", "in", "checkpoint", ":", "\n", "        ", "best_acc", "=", "checkpoint", "[", "'best_top1_acc'", "]", "\n", "", "if", "opt", "is", "not", "None", ":", "\n", "        ", "if", "use_fp16", ":", "\n", "            ", "scaler", ".", "load_state_dict", "(", "checkpoint", "[", "'amp'", "]", ")", "\n", "", "opt", ".", "load_state_dict", "(", "checkpoint", "[", "'opt'", "]", ")", "\n", "sched", ".", "load_state_dict", "(", "checkpoint", "[", "'sched'", "]", ")", "\n", "logger", ".", "info", "(", "f'loaded optimizers from epoch {epoch}'", ")", "\n", "", "logger", ".", "info", "(", "f'read-path: {r_path}'", ")", "\n", "del", "checkpoint", "\n", "return", "encoder", ",", "opt", ",", "scaler", ",", "sched", ",", "epoch", ",", "best_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.snn_fine_tune.init_model": [[315, 409], ["torch.nn.Sequential", "torch.nn.parallel.DistributedDataParallel.modules", "torch.nn.parallel.DistributedDataParallel.to", "snn_fine_tune.load_pretrained", "collections.OrderedDict", "collections.OrderedDict", "torch.nn.BatchNorm1d", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Sequential", "src.sgd.SGD", "src.utils.WarmupCosineSchedule", "torch.nn.parallel.DistributedDataParallel", "isinstance", "isinstance", "m.eval", "src.lars.LARS", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.parallel.DistributedDataParallel.named_parameters", "torch.nn.parallel.DistributedDataParallel.named_parameters"], "function", ["home.repos.pwc.inspect_result.facebookresearch_suncet.src.fine_tune.load_pretrained"], ["", "def", "init_model", "(", "\n", "device", ",", "\n", "training", ",", "\n", "use_fp16", ",", "\n", "r_enc_path", ",", "\n", "iterations_per_epoch", ",", "\n", "world_size", ",", "\n", "start_lr", ",", "\n", "ref_lr", ",", "\n", "num_epochs", ",", "\n", "output_dim", "=", "128", ",", "\n", "model_name", "=", "'resnet50'", ",", "\n", "warmup_epochs", "=", "0", ",", "\n", "use_pred_head", "=", "False", ",", "\n", "use_lars", "=", "False", ",", "\n", "wd", "=", "1e-6", ",", "\n", "final_lr", "=", "0.", ",", "\n", "momentum", "=", "0.9", ",", "\n", "nesterov", "=", "False", "\n", ")", ":", "\n", "    ", "if", "'wide_resnet'", "in", "model_name", ":", "\n", "        ", "encoder", "=", "wide_resnet", ".", "__dict__", "[", "model_name", "]", "(", "dropout_rate", "=", "0.0", ")", "\n", "hidden_dim", "=", "128", "\n", "", "else", ":", "\n", "        ", "encoder", "=", "resnet", ".", "__dict__", "[", "model_name", "]", "(", ")", "\n", "hidden_dim", "=", "2048", "\n", "if", "'w2'", "in", "model_name", ":", "\n", "            ", "hidden_dim", "*=", "2", "\n", "", "elif", "'w4'", "in", "model_name", ":", "\n", "            ", "hidden_dim", "*=", "4", "\n", "\n", "# -- projection head", "\n", "", "", "encoder", ".", "fc", "=", "torch", ".", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'fc1'", ",", "torch", ".", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", ")", ",", "\n", "(", "'bn1'", ",", "torch", ".", "nn", ".", "BatchNorm1d", "(", "hidden_dim", ")", ")", ",", "\n", "(", "'relu1'", ",", "torch", ".", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'fc2'", ",", "torch", ".", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", ")", ",", "\n", "(", "'bn2'", ",", "torch", ".", "nn", ".", "BatchNorm1d", "(", "hidden_dim", ")", ")", ",", "\n", "(", "'relu2'", ",", "torch", ".", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'fc3'", ",", "torch", ".", "nn", ".", "Linear", "(", "hidden_dim", ",", "output_dim", ")", ")", "\n", "]", ")", ")", "\n", "\n", "# -- prediction head", "\n", "encoder", ".", "pred", "=", "None", "\n", "if", "use_pred_head", ":", "\n", "        ", "mx", "=", "4", "# 4x bottleneck prediction head", "\n", "pred_head", "=", "OrderedDict", "(", "[", "]", ")", "\n", "pred_head", "[", "'bn1'", "]", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "output_dim", ")", "\n", "pred_head", "[", "'fc1'", "]", "=", "torch", ".", "nn", ".", "Linear", "(", "output_dim", ",", "output_dim", "//", "mx", ")", "\n", "pred_head", "[", "'bn2'", "]", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "output_dim", "//", "mx", ")", "\n", "pred_head", "[", "'relu'", "]", "=", "torch", ".", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "pred_head", "[", "'fc2'", "]", "=", "torch", ".", "nn", ".", "Linear", "(", "output_dim", "//", "mx", ",", "output_dim", ")", "\n", "encoder", ".", "pred", "=", "torch", ".", "nn", ".", "Sequential", "(", "pred_head", ")", "\n", "\n", "", "for", "m", "in", "encoder", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "BatchNorm1d", ")", "or", "isinstance", "(", "m", ",", "torch", ".", "nn", ".", "BatchNorm2d", ")", ":", "\n", "            ", "m", ".", "eval", "(", ")", "\n", "\n", "", "", "encoder", ".", "to", "(", "device", ")", "\n", "encoder", "=", "load_pretrained", "(", "\n", "r_path", "=", "r_enc_path", ",", "\n", "encoder", "=", "encoder", ",", "\n", "device", "=", "device", ")", "\n", "\n", "# -- init optimizer", "\n", "optimizer", ",", "scheduler", "=", "None", ",", "None", "\n", "if", "training", ":", "\n", "        ", "param_groups", "=", "[", "\n", "{", "'params'", ":", "(", "p", "for", "n", ",", "p", "in", "encoder", ".", "named_parameters", "(", ")", "\n", "if", "(", "'bias'", "not", "in", "n", ")", "and", "(", "'bn'", "not", "in", "n", ")", ")", "}", ",", "\n", "{", "'params'", ":", "(", "p", "for", "n", ",", "p", "in", "encoder", ".", "named_parameters", "(", ")", "\n", "if", "(", "'bias'", "in", "n", ")", "or", "(", "'bn'", "in", "n", ")", ")", ",", "\n", "'LARS_exclude'", ":", "True", ",", "\n", "'weight_decay'", ":", "0", "}", "\n", "]", "\n", "optimizer", "=", "SGD", "(", "\n", "param_groups", ",", "\n", "momentum", "=", "momentum", ",", "\n", "nesterov", "=", "nesterov", ",", "\n", "weight_decay", "=", "wd", ",", "\n", "lr", "=", "ref_lr", ")", "\n", "scheduler", "=", "WarmupCosineSchedule", "(", "\n", "optimizer", ",", "\n", "warmup_steps", "=", "warmup_epochs", "*", "iterations_per_epoch", ",", "\n", "start_lr", "=", "start_lr", ",", "\n", "ref_lr", "=", "ref_lr", ",", "\n", "final_lr", "=", "final_lr", ",", "\n", "T_max", "=", "num_epochs", "*", "iterations_per_epoch", ")", "\n", "if", "use_lars", ":", "\n", "            ", "optimizer", "=", "LARS", "(", "optimizer", ",", "trust_coefficient", "=", "0.001", ")", "\n", "", "", "if", "world_size", ">", "1", ":", "\n", "        ", "encoder", "=", "DistributedDataParallel", "(", "encoder", ")", "\n", "\n", "", "return", "encoder", ",", "optimizer", ",", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.snn_fine_tune.nostdout": [[411, 419], ["io.BytesIO"], "function", ["None"], ["", "@", "contextlib", ".", "contextmanager", "\n", "def", "nostdout", "(", ")", ":", "\n", "    ", "logger", ".", "disabled", "=", "True", "\n", "save_stdout", "=", "sys", ".", "stdout", "\n", "sys", ".", "stdout", "=", "io", ".", "BytesIO", "(", ")", "\n", "yield", "\n", "sys", ".", "stdout", "=", "save_stdout", "\n", "logger", ".", "disabled", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.wide_resnet.WideBasicBlock.__init__": [[22, 40], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Dropout", "torch.Dropout", "torch.Dropout", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_suncet.src.sgd.SGD.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_planes", ",", "\n", "planes", ",", "\n", "dropout_rate", ",", "\n", "stride", "=", "1", "\n", ")", ":", "\n", "        ", "super", "(", "WideBasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "in_planes", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout_rate", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "True", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.wide_resnet.WideBasicBlock.forward": [[42, 48], ["wide_resnet.WideBasicBlock.dropout", "wide_resnet.WideBasicBlock.conv2", "wide_resnet.WideBasicBlock.shortcut", "wide_resnet.WideBasicBlock.conv1", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "wide_resnet.WideBasicBlock.bn2", "wide_resnet.WideBasicBlock.bn1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "dropout", "(", "self", ".", "conv1", "(", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", ")", ")", "\n", "out", "=", "self", ".", "conv2", "(", "F", ".", "relu", "(", "self", ".", "bn2", "(", "out", ")", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.wide_resnet.WideResNet.__init__": [[52, 75], ["torch.Module.__init__", "wide_resnet.conv3x3", "wide_resnet.WideResNet._wide_layer", "wide_resnet.WideResNet._wide_layer", "wide_resnet.WideResNet._wide_layer", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_suncet.src.sgd.SGD.__init__", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.resnet.conv3x3", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.wide_resnet.WideResNet._wide_layer", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.wide_resnet.WideResNet._wide_layer", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.wide_resnet.WideResNet._wide_layer"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "depth", ",", "\n", "widen_factor", ",", "\n", "dropout_rate", "=", "0.3", "\n", ")", ":", "\n", "        ", "super", "(", "WideResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_planes", "=", "16", "\n", "assert", "(", "(", "depth", "-", "4", ")", "%", "6", "==", "0", ")", ",", "'Wide-resnet depth should be 6n+4'", "\n", "n", "=", "(", "depth", "-", "4", ")", "/", "6", "\n", "k", "=", "widen_factor", "\n", "\n", "nStages", "=", "[", "16", ",", "16", "*", "k", ",", "32", "*", "k", ",", "64", "*", "k", "]", "\n", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "3", ",", "nStages", "[", "0", "]", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_wide_layer", "(", "WideBasicBlock", ",", "nStages", "[", "1", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_wide_layer", "(", "WideBasicBlock", ",", "nStages", "[", "2", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_wide_layer", "(", "WideBasicBlock", ",", "nStages", "[", "3", "]", ",", "n", ",", "dropout_rate", ",", "stride", "=", "2", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "nStages", "[", "3", "]", ",", "momentum", "=", "0.99", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "None", "\n", "self", ".", "pred", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.wide_resnet.WideResNet._wide_layer": [[76, 85], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block", "int"], "methods", ["None"], ["", "def", "_wide_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "dropout_rate", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "int", "(", "num_blocks", ")", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "dropout_rate", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.wide_resnet.WideResNet._forward_backbone": [[86, 97], ["wide_resnet.WideResNet.conv1", "wide_resnet.WideResNet.layer1", "wide_resnet.WideResNet.layer2", "wide_resnet.WideResNet.layer3", "torch.relu", "torch.relu", "torch.relu", "wide_resnet.WideResNet.avgpool", "wide_resnet.WideResNet.view", "wide_resnet.WideResNet.bn1", "wide_resnet.WideResNet.size", "wide_resnet.WideResNet.fc"], "methods", ["None"], ["", "def", "_forward_backbone", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "if", "self", ".", "fc", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.wide_resnet.WideResNet._forward_head": [[98, 102], ["wide_resnet.WideResNet.pred"], "methods", ["None"], ["", "def", "_forward_head", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "pred", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "pred", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.wide_resnet.WideResNet.forward": [[103, 124], ["torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "isinstance", "wide_resnet.WideResNet._forward_backbone", "wide_resnet.WideResNet._forward_head", "torch.unique_consecutive", "torch.unique_consecutive", "torch.unique_consecutive", "torch.unique_consecutive", "torch.unique_consecutive", "torch.unique_consecutive", "torch.unique_consecutive", "torch.unique_consecutive", "torch.unique_consecutive", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_suncet.src.resnet.ResNet._forward_backbone", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.resnet.ResNet._forward_head"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "return_before_head", "=", "False", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "inputs", ",", "list", ")", ":", "\n", "            ", "inputs", "=", "[", "inputs", "]", "\n", "", "idx_crops", "=", "torch", ".", "cumsum", "(", "torch", ".", "unique_consecutive", "(", "\n", "torch", ".", "tensor", "(", "[", "inp", ".", "shape", "[", "-", "1", "]", "for", "inp", "in", "inputs", "]", ")", ",", "\n", "return_counts", "=", "True", ",", "\n", ")", "[", "1", "]", ",", "0", ")", "\n", "start_idx", "=", "0", "\n", "for", "end_idx", "in", "idx_crops", ":", "\n", "            ", "_h", "=", "self", ".", "_forward_backbone", "(", "torch", ".", "cat", "(", "inputs", "[", "start_idx", ":", "end_idx", "]", ")", ")", "\n", "_z", "=", "self", ".", "_forward_head", "(", "_h", ")", "\n", "if", "start_idx", "==", "0", ":", "\n", "                ", "h", ",", "z", "=", "_h", ",", "_z", "\n", "", "else", ":", "\n", "                ", "h", ",", "z", "=", "torch", ".", "cat", "(", "(", "h", ",", "_h", ")", ")", ",", "torch", ".", "cat", "(", "(", "z", ",", "_z", ")", ")", "\n", "", "start_idx", "=", "end_idx", "\n", "\n", "", "if", "return_before_head", ":", "\n", "            ", "return", "h", ",", "z", "\n", "\n", "", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.wide_resnet.conv3x3": [[17, 19], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.wide_resnet.wide_resnet28w2": [[126, 129], ["wide_resnet.WideResNet"], "function", ["None"], ["", "", "def", "wide_resnet28w2", "(", "**", "kwargs", ")", ":", "\n", "    ", "encoder", "=", "WideResNet", "(", "28", ",", "2", ",", "**", "kwargs", ")", "\n", "return", "encoder", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.resnet.BasicBlock.__init__": [[47, 73], ["torch.Module.__init__", "resnet.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_suncet.src.sgd.SGD.__init__", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.resnet.conv3x3", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.resnet.conv3x3"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", "=", "1", ",", "\n", "downsample", "=", "None", ",", "\n", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "\n", "dilation", "=", "1", ",", "\n", "norm_layer", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "\"BasicBlock only supports groups=1 and base_width=64\"", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.resnet.BasicBlock.forward": [[74, 91], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.resnet.Bottleneck.__init__": [[96, 121], ["torch.Module.__init__", "resnet.conv1x1", "norm_layer", "resnet.conv3x3", "norm_layer", "resnet.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_suncet.src.sgd.SGD.__init__", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.resnet.conv1x1", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.resnet.conv3x3", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.resnet.conv1x1"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", "=", "1", ",", "\n", "downsample", "=", "None", ",", "\n", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "\n", "dilation", "=", "1", ",", "\n", "norm_layer", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.0", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.resnet.Bottleneck.forward": [[122, 143], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.resnet.ResNet.__init__": [[146, 219], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "resnet.ResNet.modules", "len", "ValueError", "isinstance", "resnet.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_suncet.src.sgd.SGD.__init__", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "block", ",", "\n", "layers", ",", "\n", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "\n", "widen", "=", "1", ",", "\n", "width_per_group", "=", "64", ",", "\n", "replace_stride_with_dilation", "=", "None", ",", "\n", "norm_layer", "=", "None", ",", "\n", "use_maxpool", "=", "True", "\n", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "self", ".", "use_maxpool", "=", "use_maxpool", "\n", "\n", "self", ".", "inplanes", "=", "width_per_group", "*", "widen", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", "\n", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "\n", "num_out_filters", "=", "width_per_group", "*", "widen", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "3", ",", "num_out_filters", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "num_out_filters", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "num_out_filters", ",", "layers", "[", "0", "]", ")", "\n", "num_out_filters", "*=", "2", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "num_out_filters", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", "\n", ")", "\n", "num_out_filters", "*=", "2", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "num_out_filters", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", "\n", ")", "\n", "num_out_filters", "*=", "2", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "num_out_filters", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", "\n", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "\n", "self", ".", "fc", "=", "None", "\n", "self", ".", "pred", "=", "None", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.resnet.ResNet._make_layer": [[220, 260], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "resnet.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_suncet.src.resnet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", ",", "\n", "stride", ",", "\n", "downsample", ",", "\n", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "\n", "previous_dilation", ",", "\n", "norm_layer", ",", "\n", ")", "\n", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "block", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", ",", "\n", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "\n", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", ")", "\n", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.resnet.ResNet._forward_backbone": [[261, 276], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "resnet.ResNet.maxpool", "resnet.ResNet.fc"], "methods", ["None"], ["", "def", "_forward_backbone", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "if", "self", ".", "use_maxpool", ":", "\n", "            ", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "if", "self", ".", "fc", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.resnet.ResNet._forward_head": [[277, 281], ["resnet.ResNet.pred"], "methods", ["None"], ["", "def", "_forward_head", "(", "self", ",", "x", ")", ":", "\n", "        ", "if", "self", ".", "pred", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "pred", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.resnet.ResNet.forward": [[282, 301], ["torch.cumsum", "torch.cumsum", "torch.cumsum", "torch.cumsum", "isinstance", "resnet.ResNet._forward_backbone", "resnet.ResNet._forward_head", "torch.unique_consecutive", "torch.unique_consecutive", "torch.unique_consecutive", "torch.unique_consecutive", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_suncet.src.resnet.ResNet._forward_backbone", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.resnet.ResNet._forward_head"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "return_before_head", "=", "False", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "inputs", ",", "list", ")", ":", "\n", "            ", "inputs", "=", "[", "inputs", "]", "\n", "", "idx_crops", "=", "torch", ".", "cumsum", "(", "torch", ".", "unique_consecutive", "(", "\n", "torch", ".", "tensor", "(", "[", "inp", ".", "shape", "[", "-", "1", "]", "for", "inp", "in", "inputs", "]", ")", ",", "\n", "return_counts", "=", "True", ",", "\n", ")", "[", "1", "]", ",", "0", ")", "\n", "start_idx", "=", "0", "\n", "for", "end_idx", "in", "idx_crops", ":", "\n", "            ", "_h", "=", "self", ".", "_forward_backbone", "(", "torch", ".", "cat", "(", "inputs", "[", "start_idx", ":", "end_idx", "]", ")", ")", "\n", "_z", "=", "self", ".", "_forward_head", "(", "_h", ")", "\n", "if", "start_idx", "==", "0", ":", "\n", "                ", "h", ",", "z", "=", "_h", ",", "_z", "\n", "", "else", ":", "\n", "                ", "h", ",", "z", "=", "torch", ".", "cat", "(", "(", "h", ",", "_h", ")", ")", ",", "torch", ".", "cat", "(", "(", "z", ",", "_z", ")", ")", "\n", "", "start_idx", "=", "end_idx", "\n", "", "if", "return_before_head", ":", "\n", "            ", "return", "h", ",", "z", "\n", "", "return", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.resnet.conv3x3": [[24, 35], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "False", ",", "\n", "dilation", "=", "dilation", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.resnet.conv1x1": [[38, 41], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.resnet.resnet50": [[303, 305], ["resnet.ResNet"], "function", ["None"], ["", "", "def", "resnet50", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.resnet.resnet50w2": [[307, 309], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet50w2", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "widen", "=", "2", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.resnet.resnet50w4": [[311, 313], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet50w4", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "widen", "=", "4", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.resnet.resnet101": [[315, 317], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet101", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.resnet.resnet101w2": [[319, 321], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet101w2", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "widen", "=", "2", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.resnet.resnet151": [[323, 325], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet151", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.resnet.resnet151w2": [[327, 329], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet151w2", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "widen", "=", "2", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.resnet.resnet200": [[331, 333], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet200", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "24", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.resnet.resnet200w2": [[335, 337], ["resnet.ResNet"], "function", ["None"], ["", "def", "resnet200w2", "(", "**", "kwargs", ")", ":", "\n", "    ", "return", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "24", ",", "36", ",", "3", "]", ",", "widen", "=", "2", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.fine_tune.main": [[59, 274], ["torch.device", "torch.cuda.set_device", "float", "os.path.join", "os.path.join", "src.utils.init_distributed", "logger.info", "torch.nn.CrossEntropyLoss", "src.data_manager.make_transforms", "src.data_manager.init_data", "len", "logger.info", "src.data_manager.make_transforms", "src.data_manager.init_data", "logger.info", "torch.cuda.amp.GradScaler", "fine_tune.init_model", "range", "fine_tune.load_from_path", "logger.info", "encoder.eval", "logger.info", "fine_tune.main.train_step"], "function", ["home.repos.pwc.inspect_result.facebookresearch_suncet.src.utils.init_distributed", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.paws_train.init_model", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.fine_tune.load_from_path"], ["def", "main", "(", "args", ")", ":", "\n", "\n", "# -- META", "\n", "    ", "model_name", "=", "args", "[", "'meta'", "]", "[", "'model_name'", "]", "\n", "port", "=", "args", "[", "'meta'", "]", "[", "'master_port'", "]", "\n", "load_checkpoint", "=", "args", "[", "'meta'", "]", "[", "'load_checkpoint'", "]", "\n", "training", "=", "args", "[", "'meta'", "]", "[", "'training'", "]", "\n", "copy_data", "=", "args", "[", "'meta'", "]", "[", "'copy_data'", "]", "\n", "use_fp16", "=", "args", "[", "'meta'", "]", "[", "'use_fp16'", "]", "\n", "device", "=", "torch", ".", "device", "(", "args", "[", "'meta'", "]", "[", "'device'", "]", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "device", ")", "\n", "\n", "# -- DATA", "\n", "unlabeled_frac", "=", "args", "[", "'data'", "]", "[", "'unlabeled_frac'", "]", "\n", "normalize", "=", "args", "[", "'data'", "]", "[", "'normalize'", "]", "\n", "root_path", "=", "args", "[", "'data'", "]", "[", "'root_path'", "]", "\n", "image_folder", "=", "args", "[", "'data'", "]", "[", "'image_folder'", "]", "\n", "dataset_name", "=", "args", "[", "'data'", "]", "[", "'dataset'", "]", "\n", "subset_path", "=", "args", "[", "'data'", "]", "[", "'subset_path'", "]", "\n", "num_classes", "=", "args", "[", "'data'", "]", "[", "'num_classes'", "]", "\n", "data_seed", "=", "None", "\n", "if", "'cifar10'", "in", "dataset_name", ":", "\n", "        ", "data_seed", "=", "args", "[", "'data'", "]", "[", "'data_seed'", "]", "\n", "", "crop_scale", "=", "(", "0.5", ",", "1.0", ")", "if", "'cifar10'", "in", "dataset_name", "else", "(", "0.08", ",", "1.0", ")", "\n", "\n", "# -- OPTIMIZATION", "\n", "wd", "=", "float", "(", "args", "[", "'optimization'", "]", "[", "'weight_decay'", "]", ")", "\n", "ref_lr", "=", "args", "[", "'optimization'", "]", "[", "'lr'", "]", "\n", "use_lars", "=", "args", "[", "'optimization'", "]", "[", "'use_lars'", "]", "\n", "zero_init", "=", "args", "[", "'optimization'", "]", "[", "'zero_init'", "]", "\n", "num_epochs", "=", "args", "[", "'optimization'", "]", "[", "'epochs'", "]", "\n", "\n", "# -- LOGGING", "\n", "folder", "=", "args", "[", "'logging'", "]", "[", "'folder'", "]", "\n", "tag", "=", "args", "[", "'logging'", "]", "[", "'write_tag'", "]", "\n", "r_file_enc", "=", "args", "[", "'logging'", "]", "[", "'pretrain_path'", "]", "\n", "\n", "# -- log/checkpointing paths", "\n", "r_enc_path", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "r_file_enc", ")", "\n", "w_enc_path", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "f'{tag}-fine-tune.pth.tar'", ")", "\n", "\n", "# -- init distributed", "\n", "world_size", ",", "rank", "=", "init_distributed", "(", "port", ")", "\n", "logger", ".", "info", "(", "f'initialized rank/world-size: {rank}/{world_size}'", ")", "\n", "\n", "# -- optimization/evaluation params", "\n", "if", "training", ":", "\n", "        ", "batch_size", "=", "256", "\n", "", "else", ":", "\n", "        ", "batch_size", "=", "16", "\n", "unlabeled_frac", "=", "0.0", "\n", "load_checkpoint", "=", "True", "\n", "num_epochs", "=", "1", "\n", "\n", "# -- init loss", "\n", "", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "# -- make train data transforms and data loaders/samples", "\n", "transform", ",", "init_transform", "=", "make_transforms", "(", "\n", "dataset_name", "=", "dataset_name", ",", "\n", "subset_path", "=", "subset_path", ",", "\n", "unlabeled_frac", "=", "unlabeled_frac", ",", "\n", "training", "=", "training", ",", "\n", "crop_scale", "=", "crop_scale", ",", "\n", "split_seed", "=", "data_seed", ",", "\n", "basic_augmentations", "=", "True", ",", "\n", "normalize", "=", "normalize", ")", "\n", "(", "data_loader", ",", "\n", "dist_sampler", ")", "=", "init_data", "(", "\n", "dataset_name", "=", "dataset_name", ",", "\n", "transform", "=", "transform", ",", "\n", "init_transform", "=", "init_transform", ",", "\n", "u_batch_size", "=", "None", ",", "\n", "s_batch_size", "=", "batch_size", ",", "\n", "classes_per_batch", "=", "None", ",", "\n", "world_size", "=", "world_size", ",", "\n", "rank", "=", "rank", ",", "\n", "root_path", "=", "root_path", ",", "\n", "image_folder", "=", "image_folder", ",", "\n", "training", "=", "training", ",", "\n", "copy_data", "=", "copy_data", ")", "\n", "\n", "ipe", "=", "len", "(", "data_loader", ")", "\n", "logger", ".", "info", "(", "f'initialized data-loader (ipe {ipe})'", ")", "\n", "\n", "# -- make val data transforms and data loaders/samples", "\n", "val_transform", ",", "val_init_transform", "=", "make_transforms", "(", "\n", "dataset_name", "=", "dataset_name", ",", "\n", "subset_path", "=", "subset_path", ",", "\n", "unlabeled_frac", "=", "-", "1", ",", "\n", "training", "=", "True", ",", "\n", "basic_augmentations", "=", "True", ",", "\n", "force_center_crop", "=", "True", ",", "\n", "normalize", "=", "normalize", ")", "\n", "(", "val_data_loader", ",", "\n", "val_dist_sampler", ")", "=", "init_data", "(", "\n", "dataset_name", "=", "dataset_name", ",", "\n", "transform", "=", "val_transform", ",", "\n", "init_transform", "=", "val_init_transform", ",", "\n", "u_batch_size", "=", "None", ",", "\n", "s_batch_size", "=", "batch_size", ",", "\n", "classes_per_batch", "=", "None", ",", "\n", "world_size", "=", "1", ",", "\n", "rank", "=", "0", ",", "\n", "root_path", "=", "root_path", ",", "\n", "image_folder", "=", "image_folder", ",", "\n", "training", "=", "True", ",", "\n", "copy_data", "=", "copy_data", ")", "\n", "logger", ".", "info", "(", "f'initialized val data-loader (ipe {len(val_data_loader)})'", ")", "\n", "\n", "# -- init model and optimizer", "\n", "scaler", "=", "torch", ".", "cuda", ".", "amp", ".", "GradScaler", "(", "enabled", "=", "use_fp16", ")", "\n", "encoder", ",", "optimizer", ",", "scheduler", "=", "init_model", "(", "\n", "device", "=", "device", ",", "\n", "device_str", "=", "args", "[", "'meta'", "]", "[", "'device'", "]", ",", "\n", "num_classes", "=", "num_classes", ",", "\n", "training", "=", "training", ",", "\n", "use_fp16", "=", "use_fp16", ",", "\n", "r_enc_path", "=", "r_enc_path", ",", "\n", "iterations_per_epoch", "=", "ipe", ",", "\n", "world_size", "=", "world_size", ",", "\n", "ref_lr", "=", "ref_lr", ",", "\n", "weight_decay", "=", "wd", ",", "\n", "use_lars", "=", "use_lars", ",", "\n", "zero_init", "=", "zero_init", ",", "\n", "num_epochs", "=", "num_epochs", ",", "\n", "model_name", "=", "model_name", ")", "\n", "\n", "best_acc", "=", "None", "\n", "start_epoch", "=", "0", "\n", "# -- load checkpoint", "\n", "if", "not", "training", "or", "load_checkpoint", ":", "\n", "        ", "encoder", ",", "optimizer", ",", "scheduler", ",", "start_epoch", ",", "best_acc", "=", "load_from_path", "(", "\n", "r_path", "=", "w_enc_path", ",", "\n", "encoder", "=", "encoder", ",", "\n", "opt", "=", "optimizer", ",", "\n", "sched", "=", "scheduler", ",", "\n", "scaler", "=", "scaler", ",", "\n", "device_str", "=", "args", "[", "'meta'", "]", "[", "'device'", "]", ",", "\n", "use_fp16", "=", "use_fp16", ")", "\n", "", "if", "not", "training", ":", "\n", "        ", "logger", ".", "info", "(", "'putting model in eval mode'", ")", "\n", "encoder", ".", "eval", "(", ")", "\n", "logger", ".", "info", "(", "sum", "(", "p", ".", "numel", "(", ")", "for", "n", ",", "p", "in", "encoder", ".", "named_parameters", "(", ")", "\n", "if", "p", ".", "requires_grad", "and", "(", "'fc'", "not", "in", "n", ")", ")", ")", "\n", "start_epoch", "=", "0", "\n", "\n", "", "for", "epoch", "in", "range", "(", "start_epoch", ",", "num_epochs", ")", ":", "\n", "\n", "        ", "def", "train_step", "(", ")", ":", "\n", "# -- update distributed-data-loader epoch", "\n", "            ", "dist_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "top1_correct", ",", "top5_correct", ",", "total", "=", "0", ",", "0", ",", "0", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "data_loader", ")", ":", "\n", "                ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", "enabled", "=", "use_fp16", ")", ":", "\n", "                    ", "inputs", ",", "labels", "=", "data", "[", "0", "]", ".", "to", "(", "device", ")", ",", "data", "[", "1", "]", ".", "to", "(", "device", ")", "\n", "outputs", "=", "encoder", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "labels", ")", "\n", "", "total", "+=", "inputs", ".", "shape", "[", "0", "]", "\n", "top5_correct", "+=", "float", "(", "outputs", ".", "topk", "(", "5", ",", "dim", "=", "1", ")", ".", "indices", ".", "eq", "(", "labels", ".", "unsqueeze", "(", "1", ")", ")", ".", "sum", "(", ")", ")", "\n", "top1_correct", "+=", "float", "(", "outputs", ".", "max", "(", "dim", "=", "1", ")", ".", "indices", ".", "eq", "(", "labels", ")", ".", "sum", "(", ")", ")", "\n", "top1_acc", "=", "100.", "*", "top1_correct", "/", "total", "\n", "top5_acc", "=", "100.", "*", "top5_correct", "/", "total", "\n", "if", "training", ":", "\n", "                    ", "scaler", ".", "scale", "(", "loss", ")", ".", "backward", "(", ")", "\n", "scaler", ".", "step", "(", "optimizer", ")", "\n", "scaler", ".", "update", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "", "if", "i", "%", "log_freq", "==", "0", ":", "\n", "                    ", "logger", ".", "info", "(", "'[%d, %5d] %.3f%% %.3f%% (loss: %.3f)'", "\n", "%", "(", "epoch", "+", "1", ",", "i", ",", "top1_acc", ",", "top5_acc", ",", "loss", ")", ")", "\n", "", "", "return", "100.", "*", "top1_correct", "/", "total", "\n", "\n", "", "def", "val_step", "(", ")", ":", "\n", "            ", "val_encoder", "=", "copy", ".", "deepcopy", "(", "encoder", ")", ".", "eval", "(", ")", "\n", "top1_correct", ",", "total", "=", "0", ",", "0", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "val_data_loader", ")", ":", "\n", "                ", "inputs", ",", "labels", "=", "data", "[", "0", "]", ".", "to", "(", "device", ")", ",", "data", "[", "1", "]", ".", "to", "(", "device", ")", "\n", "outputs", "=", "val_encoder", "(", "inputs", ")", "\n", "total", "+=", "inputs", ".", "shape", "[", "0", "]", "\n", "top1_correct", "+=", "float", "(", "outputs", ".", "max", "(", "dim", "=", "1", ")", ".", "indices", ".", "eq", "(", "labels", ")", ".", "sum", "(", ")", ")", "\n", "top1_acc", "=", "100.", "*", "top1_correct", "/", "total", "\n", "\n", "", "logger", ".", "info", "(", "'[%d, %5d] %.3f%%'", "%", "(", "epoch", "+", "1", ",", "i", ",", "top1_acc", ")", ")", "\n", "return", "100.", "*", "top1_correct", "/", "total", "\n", "\n", "", "train_top1", "=", "0.", "\n", "train_top1", "=", "train_step", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "val_top1", "=", "val_step", "(", ")", "\n", "\n", "", "log_str", "=", "'train:'", "if", "training", "else", "'test:'", "\n", "logger", ".", "info", "(", "'[%d] (%s: %.3f%%) (val: %.3f%%)'", "\n", "%", "(", "epoch", "+", "1", ",", "log_str", ",", "train_top1", ",", "val_top1", ")", ")", "\n", "\n", "# -- logging/checkpointing", "\n", "if", "training", "and", "(", "rank", "==", "0", ")", "and", "(", "(", "best_acc", "is", "None", ")", "\n", "or", "(", "best_acc", "<", "val_top1", ")", ")", ":", "\n", "            ", "best_acc", "=", "val_top1", "\n", "save_dict", "=", "{", "\n", "'encoder'", ":", "encoder", ".", "state_dict", "(", ")", ",", "\n", "'opt'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'sched'", ":", "scheduler", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'unlabel_prob'", ":", "unlabeled_frac", ",", "\n", "'world_size'", ":", "world_size", ",", "\n", "'best_top1_acc'", ":", "best_acc", ",", "\n", "'batch_size'", ":", "batch_size", ",", "\n", "'lr'", ":", "ref_lr", ",", "\n", "'amp'", ":", "scaler", ".", "state_dict", "(", ")", "\n", "}", "\n", "torch", ".", "save", "(", "save_dict", ",", "w_enc_path", ")", "\n", "\n", "", "", "return", "train_top1", ",", "val_top1", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.fine_tune.load_pretrained": [[276, 295], ["torch.load", "encoder.state_dict().items", "encoder.load_state_dict", "logger.info", "logger.info", "k.replace", "checkpoint[].items", "encoder.state_dict", "logger.info", "logger.info"], "function", ["home.repos.pwc.inspect_result.facebookresearch_suncet.src.lars.LARS.load_state_dict", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.lars.LARS.state_dict"], ["", "def", "load_pretrained", "(", "\n", "r_path", ",", "\n", "encoder", ",", "\n", "device_str", "\n", ")", ":", "\n", "    ", "checkpoint", "=", "torch", ".", "load", "(", "r_path", ",", "map_location", "=", "'cpu'", ")", "\n", "pretrained_dict", "=", "{", "k", ".", "replace", "(", "'module.'", ",", "''", ")", ":", "v", "for", "k", ",", "v", "in", "checkpoint", "[", "'encoder'", "]", ".", "items", "(", ")", "}", "\n", "for", "k", ",", "v", "in", "encoder", ".", "state_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "not", "in", "pretrained_dict", ":", "\n", "            ", "logger", ".", "info", "(", "f'key \"{k}\" could not be found in loaded state dict'", ")", "\n", "", "elif", "pretrained_dict", "[", "k", "]", ".", "shape", "!=", "v", ".", "shape", ":", "\n", "            ", "logger", ".", "info", "(", "f'key \"{k}\" is of different shape in model and loaded state dict'", ")", "\n", "pretrained_dict", "[", "k", "]", "=", "v", "\n", "", "", "msg", "=", "encoder", ".", "load_state_dict", "(", "pretrained_dict", ",", "strict", "=", "False", ")", "\n", "logger", ".", "info", "(", "f'loaded pretrained model with msg: {msg}'", ")", "\n", "logger", ".", "info", "(", "f'loaded pretrained encoder from epoch: {checkpoint[\"epoch\"]} '", "\n", "f'path: {r_path}'", ")", "\n", "del", "checkpoint", "\n", "return", "encoder", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.fine_tune.load_from_path": [[297, 323], ["fine_tune.load_pretrained", "torch.load", "logger.info", "opt.load_state_dict", "sched.load_state_dict", "logger.info", "scaler.load_state_dict"], "function", ["home.repos.pwc.inspect_result.facebookresearch_suncet.src.fine_tune.load_pretrained", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.lars.LARS.load_state_dict", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.lars.LARS.load_state_dict", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.lars.LARS.load_state_dict"], ["", "def", "load_from_path", "(", "\n", "r_path", ",", "\n", "encoder", ",", "\n", "opt", ",", "\n", "sched", ",", "\n", "scaler", ",", "\n", "device_str", ",", "\n", "use_fp16", "=", "False", "\n", ")", ":", "\n", "    ", "encoder", "=", "load_pretrained", "(", "r_path", ",", "encoder", ",", "device_str", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "r_path", ",", "map_location", "=", "device_str", ")", "\n", "\n", "best_acc", "=", "None", "\n", "if", "'best_top1_acc'", "in", "checkpoint", ":", "\n", "        ", "best_acc", "=", "checkpoint", "[", "'best_top1_acc'", "]", "\n", "\n", "", "epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "if", "opt", "is", "not", "None", ":", "\n", "        ", "if", "use_fp16", ":", "\n", "            ", "scaler", ".", "load_state_dict", "(", "checkpoint", "[", "'amp'", "]", ")", "\n", "", "opt", ".", "load_state_dict", "(", "checkpoint", "[", "'opt'", "]", ")", "\n", "sched", ".", "load_state_dict", "(", "checkpoint", "[", "'sched'", "]", ")", "\n", "logger", ".", "info", "(", "f'loaded optimizers from epoch {epoch}'", ")", "\n", "", "logger", ".", "info", "(", "f'read-path: {r_path}'", ")", "\n", "del", "checkpoint", "\n", "return", "encoder", ",", "opt", ",", "sched", ",", "epoch", ",", "best_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.fine_tune.init_model": [[325, 401], ["torch.nn.Sequential", "torch.nn.parallel.DistributedDataParallel.to", "fine_tune.load_pretrained", "collections.OrderedDict", "torch.nn.parallel.DistributedDataParallel.fc.fc2.parameters", "src.sgd.SGD", "src.utils.WarmupCosineSchedule", "torch.nn.parallel.DistributedDataParallel", "torch.nn.init.zeros_", "src.lars.LARS", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.parallel.DistributedDataParallel.named_parameters", "torch.nn.parallel.DistributedDataParallel.named_parameters"], "function", ["home.repos.pwc.inspect_result.facebookresearch_suncet.src.fine_tune.load_pretrained"], ["", "def", "init_model", "(", "\n", "device", ",", "\n", "device_str", ",", "\n", "num_classes", ",", "\n", "training", ",", "\n", "use_fp16", ",", "\n", "r_enc_path", ",", "\n", "iterations_per_epoch", ",", "\n", "world_size", ",", "\n", "ref_lr", ",", "\n", "num_epochs", ",", "\n", "use_lars", "=", "False", ",", "\n", "zero_init", "=", "True", ",", "\n", "model_name", "=", "'resnet50'", ",", "\n", "warmup_epochs", "=", "0", ",", "\n", "weight_decay", "=", "0", "\n", ")", ":", "\n", "# -- init model", "\n", "    ", "if", "'wide_resnet'", "in", "model_name", ":", "\n", "        ", "encoder", "=", "wide_resnet", ".", "__dict__", "[", "model_name", "]", "(", "dropout_rate", "=", "0.0", ")", "\n", "hidden_dim", "=", "128", "\n", "", "else", ":", "\n", "        ", "encoder", "=", "resnet", ".", "__dict__", "[", "model_name", "]", "(", ")", "\n", "hidden_dim", "=", "2048", "\n", "if", "'w2'", "in", "model_name", ":", "\n", "            ", "hidden_dim", "*=", "2", "\n", "", "elif", "'w4'", "in", "model_name", ":", "\n", "            ", "hidden_dim", "*=", "4", "\n", "\n", "# -- projection head", "\n", "", "", "encoder", ".", "fc", "=", "torch", ".", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'fc1'", ",", "torch", ".", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", ")", ",", "\n", "(", "'bn1'", ",", "torch", ".", "nn", ".", "BatchNorm1d", "(", "hidden_dim", ")", ")", ",", "\n", "(", "'relu1'", ",", "torch", ".", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'fc2'", ",", "torch", ".", "nn", ".", "Linear", "(", "hidden_dim", ",", "num_classes", ")", ")", "\n", "]", ")", ")", "\n", "\n", "encoder", ".", "to", "(", "device", ")", "\n", "encoder", "=", "load_pretrained", "(", "\n", "r_path", "=", "r_enc_path", ",", "\n", "encoder", "=", "encoder", ",", "\n", "device_str", "=", "device_str", ")", "\n", "\n", "if", "zero_init", ":", "\n", "        ", "for", "p", "in", "encoder", ".", "fc", ".", "fc2", ".", "parameters", "(", ")", ":", "\n", "            ", "torch", ".", "nn", ".", "init", ".", "zeros_", "(", "p", ")", "\n", "\n", "# -- init optimizer", "\n", "", "", "optimizer", ",", "scheduler", "=", "None", ",", "None", "\n", "if", "training", ":", "\n", "        ", "param_groups", "=", "[", "\n", "{", "'params'", ":", "(", "p", "for", "n", ",", "p", "in", "encoder", ".", "named_parameters", "(", ")", "\n", "if", "(", "'bias'", "not", "in", "n", ")", "and", "(", "'bn'", "not", "in", "n", ")", ")", "}", ",", "\n", "{", "'params'", ":", "(", "p", "for", "n", ",", "p", "in", "encoder", ".", "named_parameters", "(", ")", "\n", "if", "(", "'bias'", "in", "n", ")", "or", "(", "'bn'", "in", "n", ")", ")", ",", "\n", "'LARS_exclude'", ":", "True", ",", "\n", "'weight_decay'", ":", "0", "}", "\n", "]", "\n", "optimizer", "=", "SGD", "(", "\n", "param_groups", ",", "\n", "nesterov", "=", "True", ",", "\n", "weight_decay", "=", "weight_decay", ",", "\n", "momentum", "=", "0.9", ",", "\n", "lr", "=", "ref_lr", ")", "\n", "scheduler", "=", "WarmupCosineSchedule", "(", "\n", "optimizer", ",", "\n", "warmup_steps", "=", "warmup_epochs", "*", "iterations_per_epoch", ",", "\n", "start_lr", "=", "ref_lr", ",", "\n", "ref_lr", "=", "ref_lr", ",", "\n", "T_max", "=", "num_epochs", "*", "iterations_per_epoch", ")", "\n", "if", "use_lars", ":", "\n", "            ", "optimizer", "=", "LARS", "(", "optimizer", ",", "trust_coefficient", "=", "0.001", ")", "\n", "", "", "if", "world_size", ">", "1", ":", "\n", "        ", "encoder", "=", "DistributedDataParallel", "(", "encoder", ",", "broadcast_buffers", "=", "False", ")", "\n", "\n", "", "return", "encoder", ",", "optimizer", ",", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.paws_train.main": [[67, 387], ["torch.device", "torch.cuda.set_device", "float", "src.utils.init_distributed", "logger.info", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "src.utils.CSVLogger", "paws_train.init_model", "src.losses.init_paws_loss", "src.losses.make_labels_matrix", "src.data_manager.make_transforms", "src.data_manager.init_data", "len", "logger.info", "torch.cuda.amp.GradScaler", "paws_train.init_opt", "range", "apex.parallel.create_syncbn_process_group", "apex.parallel.convert_syncbn_model", "src.data_manager.make_multicrop_transform", "torch.nn.parallel.DistributedDataParallel", "paws_train.load_checkpoint", "range", "logger.info", "unsupervised_sampler.set_epoch", "src.utils.AverageMeter", "src.utils.AverageMeter", "src.utils.AverageMeter", "src.utils.AverageMeter", "src.utils.AverageMeter", "enumerate", "logger.info", "os.path.join", "range", "supervised_sampler.set_epoch", "src.utils.gpu_timer", "src.utils.AverageMeter.update", "src.utils.gpu_timer", "src.utils.AverageMeter.update", "src.utils.AverageMeter.update", "src.utils.AverageMeter.update", "src.utils.AverageMeter.update", "torch.save", "scheduler.step", "torch.cuda.amp.GradScaler.scale().backward", "torch.cuda.amp.GradScaler.step", "torch.cuda.amp.GradScaler.update", "scheduler.step", "numpy.isnan", "numpy.isinf", "src.utils.CSVLogger.log", "logger.info", "numpy.isnan", "torch.nn.parallel.DistributedDataParallel.state_dict", "optimizer.state_dict", "torch.cuda.amp.GradScaler.state_dict", "logger.info", "torch.save", "torch.save", "u.to", "next", "torch.cat", "torch.cuda.amp.autocast", "optimizer.zero_grad", "torch.nn.parallel.DistributedDataParallel.", "float", "float", "float", "logger.info", "os.path.join.format", "iter", "logger.info", "next", "s.to", "torch.cuda.amp.autocast", "h[].detach", "h[].detach", "torch.cat", "src.losses.init_paws_loss.", "torch.cuda.amp.GradScaler.scale", "h.float", "z.float", "range", "len"], "function", ["home.repos.pwc.inspect_result.facebookresearch_suncet.src.utils.init_distributed", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.paws_train.init_model", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.losses.init_paws_loss", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.losses.make_labels_matrix", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.paws_train.init_opt", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.paws_train.load_checkpoint", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.utils.gpu_timer", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.utils.AverageMeter.update", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.utils.gpu_timer", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.utils.AverageMeter.update", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.utils.AverageMeter.update", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.utils.AverageMeter.update", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.utils.AverageMeter.update", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.sgd.SGD.step", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.utils.AllReduce.backward", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.sgd.SGD.step", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.utils.AverageMeter.update", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.sgd.SGD.step", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.utils.CSVLogger.log", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.lars.LARS.state_dict", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.lars.LARS.state_dict", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.lars.LARS.state_dict", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.lars.LARS.zero_grad"], ["def", "main", "(", "args", ")", ":", "\n", "\n", "# ----------------------------------------------------------------------- #", "\n", "#  PASSED IN PARAMS FROM CONFIG FILE", "\n", "# ----------------------------------------------------------------------- #", "\n", "# -- META", "\n", "    ", "model_name", "=", "args", "[", "'meta'", "]", "[", "'model_name'", "]", "\n", "output_dim", "=", "args", "[", "'meta'", "]", "[", "'output_dim'", "]", "\n", "load_model", "=", "args", "[", "'meta'", "]", "[", "'load_checkpoint'", "]", "\n", "r_file", "=", "args", "[", "'meta'", "]", "[", "'read_checkpoint'", "]", "\n", "copy_data", "=", "args", "[", "'meta'", "]", "[", "'copy_data'", "]", "\n", "use_fp16", "=", "args", "[", "'meta'", "]", "[", "'use_fp16'", "]", "\n", "use_pred_head", "=", "args", "[", "'meta'", "]", "[", "'use_pred_head'", "]", "\n", "device", "=", "torch", ".", "device", "(", "args", "[", "'meta'", "]", "[", "'device'", "]", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "device", ")", "\n", "\n", "# -- CRITERTION", "\n", "reg", "=", "args", "[", "'criterion'", "]", "[", "'me_max'", "]", "\n", "supervised_views", "=", "args", "[", "'criterion'", "]", "[", "'supervised_views'", "]", "\n", "classes_per_batch", "=", "args", "[", "'criterion'", "]", "[", "'classes_per_batch'", "]", "\n", "s_batch_size", "=", "args", "[", "'criterion'", "]", "[", "'supervised_imgs_per_class'", "]", "\n", "u_batch_size", "=", "args", "[", "'criterion'", "]", "[", "'unsupervised_batch_size'", "]", "\n", "temperature", "=", "args", "[", "'criterion'", "]", "[", "'temperature'", "]", "\n", "sharpen", "=", "args", "[", "'criterion'", "]", "[", "'sharpen'", "]", "\n", "\n", "# -- DATA", "\n", "unlabeled_frac", "=", "args", "[", "'data'", "]", "[", "'unlabeled_frac'", "]", "\n", "color_jitter", "=", "args", "[", "'data'", "]", "[", "'color_jitter_strength'", "]", "\n", "normalize", "=", "args", "[", "'data'", "]", "[", "'normalize'", "]", "\n", "root_path", "=", "args", "[", "'data'", "]", "[", "'root_path'", "]", "\n", "image_folder", "=", "args", "[", "'data'", "]", "[", "'image_folder'", "]", "\n", "dataset_name", "=", "args", "[", "'data'", "]", "[", "'dataset'", "]", "\n", "subset_path", "=", "args", "[", "'data'", "]", "[", "'subset_path'", "]", "\n", "unique_classes", "=", "args", "[", "'data'", "]", "[", "'unique_classes_per_rank'", "]", "\n", "multicrop", "=", "args", "[", "'data'", "]", "[", "'multicrop'", "]", "\n", "label_smoothing", "=", "args", "[", "'data'", "]", "[", "'label_smoothing'", "]", "\n", "data_seed", "=", "None", "\n", "if", "'cifar10'", "in", "dataset_name", ":", "\n", "        ", "data_seed", "=", "args", "[", "'data'", "]", "[", "'data_seed'", "]", "\n", "crop_scale", "=", "(", "0.75", ",", "1.0", ")", "if", "multicrop", ">", "0", "else", "(", "0.5", ",", "1.0", ")", "\n", "mc_scale", "=", "(", "0.3", ",", "0.75", ")", "\n", "mc_size", "=", "18", "\n", "", "else", ":", "\n", "        ", "crop_scale", "=", "(", "0.14", ",", "1.0", ")", "if", "multicrop", ">", "0", "else", "(", "0.08", ",", "1.0", ")", "\n", "mc_scale", "=", "(", "0.05", ",", "0.14", ")", "\n", "mc_size", "=", "96", "\n", "\n", "# -- OPTIMIZATION", "\n", "", "wd", "=", "float", "(", "args", "[", "'optimization'", "]", "[", "'weight_decay'", "]", ")", "\n", "num_epochs", "=", "args", "[", "'optimization'", "]", "[", "'epochs'", "]", "\n", "warmup", "=", "args", "[", "'optimization'", "]", "[", "'warmup'", "]", "\n", "start_lr", "=", "args", "[", "'optimization'", "]", "[", "'start_lr'", "]", "\n", "lr", "=", "args", "[", "'optimization'", "]", "[", "'lr'", "]", "\n", "final_lr", "=", "args", "[", "'optimization'", "]", "[", "'final_lr'", "]", "\n", "mom", "=", "args", "[", "'optimization'", "]", "[", "'momentum'", "]", "\n", "nesterov", "=", "args", "[", "'optimization'", "]", "[", "'nesterov'", "]", "\n", "\n", "# -- LOGGING", "\n", "folder", "=", "args", "[", "'logging'", "]", "[", "'folder'", "]", "\n", "tag", "=", "args", "[", "'logging'", "]", "[", "'write_tag'", "]", "\n", "# ----------------------------------------------------------------------- #", "\n", "\n", "# -- init torch distributed backend", "\n", "world_size", ",", "rank", "=", "init_distributed", "(", ")", "\n", "logger", ".", "info", "(", "f'Initialized (rank/world-size) {rank}/{world_size}'", ")", "\n", "\n", "# -- log/checkpointing paths", "\n", "log_file", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "f'{tag}_r{rank}.csv'", ")", "\n", "save_path", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "f'{tag}'", "+", "'-ep{epoch}.pth.tar'", ")", "\n", "latest_path", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "f'{tag}-latest.pth.tar'", ")", "\n", "best_path", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "f'{tag}'", "+", "'-best.pth.tar'", ")", "\n", "load_path", "=", "None", "\n", "if", "load_model", ":", "\n", "        ", "load_path", "=", "os", ".", "path", ".", "join", "(", "folder", ",", "r_file", ")", "if", "r_file", "is", "not", "None", "else", "latest_path", "\n", "\n", "# -- make csv_logger", "\n", "", "csv_logger", "=", "CSVLogger", "(", "log_file", ",", "\n", "(", "'%d'", ",", "'epoch'", ")", ",", "\n", "(", "'%d'", ",", "'itr'", ")", ",", "\n", "(", "'%.5f'", ",", "'paws-xent-loss'", ")", ",", "\n", "(", "'%.5f'", ",", "'paws-me_max-reg'", ")", ",", "\n", "(", "'%d'", ",", "'time (ms)'", ")", ")", "\n", "\n", "# -- init model", "\n", "encoder", "=", "init_model", "(", "\n", "device", "=", "device", ",", "\n", "model_name", "=", "model_name", ",", "\n", "use_pred", "=", "use_pred_head", ",", "\n", "output_dim", "=", "output_dim", ")", "\n", "if", "world_size", ">", "1", ":", "\n", "        ", "process_group", "=", "apex", ".", "parallel", ".", "create_syncbn_process_group", "(", "0", ")", "\n", "encoder", "=", "apex", ".", "parallel", ".", "convert_syncbn_model", "(", "encoder", ",", "process_group", "=", "process_group", ")", "\n", "\n", "# -- init losses", "\n", "", "paws", "=", "init_paws_loss", "(", "\n", "multicrop", "=", "multicrop", ",", "\n", "tau", "=", "temperature", ",", "\n", "T", "=", "sharpen", ",", "\n", "me_max", "=", "reg", ")", "\n", "# -- assume support images are sampled with ClassStratifiedSampler", "\n", "labels_matrix", "=", "make_labels_matrix", "(", "\n", "num_classes", "=", "classes_per_batch", ",", "\n", "s_batch_size", "=", "s_batch_size", ",", "\n", "world_size", "=", "world_size", ",", "\n", "device", "=", "device", ",", "\n", "unique_classes", "=", "unique_classes", ",", "\n", "smoothing", "=", "label_smoothing", ")", "\n", "\n", "# -- make data transforms", "\n", "transform", ",", "init_transform", "=", "make_transforms", "(", "\n", "dataset_name", "=", "dataset_name", ",", "\n", "subset_path", "=", "subset_path", ",", "\n", "unlabeled_frac", "=", "unlabeled_frac", ",", "\n", "training", "=", "True", ",", "\n", "split_seed", "=", "data_seed", ",", "\n", "crop_scale", "=", "crop_scale", ",", "\n", "basic_augmentations", "=", "False", ",", "\n", "color_jitter", "=", "color_jitter", ",", "\n", "normalize", "=", "normalize", ")", "\n", "multicrop_transform", "=", "(", "multicrop", ",", "None", ")", "\n", "if", "multicrop", ">", "0", ":", "\n", "        ", "multicrop_transform", "=", "make_multicrop_transform", "(", "\n", "dataset_name", "=", "dataset_name", ",", "\n", "num_crops", "=", "multicrop", ",", "\n", "size", "=", "mc_size", ",", "\n", "crop_scale", "=", "mc_scale", ",", "\n", "normalize", "=", "normalize", ",", "\n", "color_distortion", "=", "color_jitter", ")", "\n", "\n", "# -- init data-loaders/samplers", "\n", "", "(", "unsupervised_loader", ",", "\n", "unsupervised_sampler", ",", "\n", "supervised_loader", ",", "\n", "supervised_sampler", ")", "=", "init_data", "(", "\n", "dataset_name", "=", "dataset_name", ",", "\n", "transform", "=", "transform", ",", "\n", "init_transform", "=", "init_transform", ",", "\n", "supervised_views", "=", "supervised_views", ",", "\n", "u_batch_size", "=", "u_batch_size", ",", "\n", "s_batch_size", "=", "s_batch_size", ",", "\n", "unique_classes", "=", "unique_classes", ",", "\n", "classes_per_batch", "=", "classes_per_batch", ",", "\n", "multicrop_transform", "=", "multicrop_transform", ",", "\n", "world_size", "=", "world_size", ",", "\n", "rank", "=", "rank", ",", "\n", "root_path", "=", "root_path", ",", "\n", "image_folder", "=", "image_folder", ",", "\n", "training", "=", "True", ",", "\n", "copy_data", "=", "copy_data", ")", "\n", "iter_supervised", "=", "None", "\n", "ipe", "=", "len", "(", "unsupervised_loader", ")", "\n", "logger", ".", "info", "(", "f'iterations per epoch: {ipe}'", ")", "\n", "\n", "# -- init optimizer and scheduler", "\n", "scaler", "=", "torch", ".", "cuda", ".", "amp", ".", "GradScaler", "(", "enabled", "=", "use_fp16", ")", "\n", "encoder", ",", "optimizer", ",", "scheduler", "=", "init_opt", "(", "\n", "encoder", "=", "encoder", ",", "\n", "weight_decay", "=", "wd", ",", "\n", "start_lr", "=", "start_lr", ",", "\n", "ref_lr", "=", "lr", ",", "\n", "final_lr", "=", "final_lr", ",", "\n", "ref_mom", "=", "mom", ",", "\n", "nesterov", "=", "nesterov", ",", "\n", "iterations_per_epoch", "=", "ipe", ",", "\n", "warmup", "=", "warmup", ",", "\n", "num_epochs", "=", "num_epochs", ")", "\n", "if", "world_size", ">", "1", ":", "\n", "        ", "encoder", "=", "DistributedDataParallel", "(", "encoder", ",", "broadcast_buffers", "=", "False", ")", "\n", "\n", "", "start_epoch", "=", "0", "\n", "# -- load training checkpoint", "\n", "if", "load_model", ":", "\n", "        ", "encoder", ",", "optimizer", ",", "start_epoch", "=", "load_checkpoint", "(", "\n", "r_path", "=", "load_path", ",", "\n", "encoder", "=", "encoder", ",", "\n", "opt", "=", "optimizer", ",", "\n", "scaler", "=", "scaler", ",", "\n", "use_fp16", "=", "use_fp16", ")", "\n", "for", "_", "in", "range", "(", "start_epoch", ")", ":", "\n", "            ", "for", "_", "in", "range", "(", "ipe", ")", ":", "\n", "                ", "scheduler", ".", "step", "(", ")", "\n", "\n", "# -- TRAINING LOOP", "\n", "", "", "", "best_loss", "=", "None", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "num_epochs", ")", ":", "\n", "        ", "logger", ".", "info", "(", "'Epoch %d'", "%", "(", "epoch", "+", "1", ")", ")", "\n", "\n", "# -- update distributed-data-loader epoch", "\n", "unsupervised_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "if", "supervised_sampler", "is", "not", "None", ":", "\n", "            ", "supervised_sampler", ".", "set_epoch", "(", "epoch", ")", "\n", "\n", "", "loss_meter", "=", "AverageMeter", "(", ")", "\n", "ploss_meter", "=", "AverageMeter", "(", ")", "\n", "rloss_meter", "=", "AverageMeter", "(", ")", "\n", "time_meter", "=", "AverageMeter", "(", ")", "\n", "data_meter", "=", "AverageMeter", "(", ")", "\n", "\n", "for", "itr", ",", "udata", "in", "enumerate", "(", "unsupervised_loader", ")", ":", "\n", "\n", "            ", "def", "load_imgs", "(", ")", ":", "\n", "# -- unsupervised imgs", "\n", "                ", "uimgs", "=", "[", "u", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "for", "u", "in", "udata", "[", ":", "-", "1", "]", "]", "\n", "# -- supervised imgs", "\n", "global", "iter_supervised", "\n", "try", ":", "\n", "                    ", "sdata", "=", "next", "(", "iter_supervised", ")", "\n", "", "except", "Exception", ":", "\n", "                    ", "iter_supervised", "=", "iter", "(", "supervised_loader", ")", "\n", "logger", ".", "info", "(", "f'len.supervised_loader: {len(iter_supervised)}'", ")", "\n", "sdata", "=", "next", "(", "iter_supervised", ")", "\n", "", "finally", ":", "\n", "                    ", "labels", "=", "torch", ".", "cat", "(", "[", "labels_matrix", "for", "_", "in", "range", "(", "supervised_views", ")", "]", ")", "\n", "simgs", "=", "[", "s", ".", "to", "(", "device", ",", "non_blocking", "=", "True", ")", "for", "s", "in", "sdata", "[", ":", "-", "1", "]", "]", "\n", "# -- concatenate supervised imgs and unsupervised imgs", "\n", "", "imgs", "=", "simgs", "+", "uimgs", "\n", "return", "imgs", ",", "labels", "\n", "", "(", "imgs", ",", "labels", ")", ",", "dtime", "=", "gpu_timer", "(", "load_imgs", ")", "\n", "data_meter", ".", "update", "(", "dtime", ")", "\n", "\n", "def", "train_step", "(", ")", ":", "\n", "                ", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", "enabled", "=", "use_fp16", ")", ":", "\n", "                    ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# --", "\n", "# h: representations of 'imgs' before head", "\n", "# z: representations of 'imgs' after head", "\n", "# -- If use_pred_head=False, then encoder.pred (prediction", "\n", "#    head) is None, and _forward_head just returns the", "\n", "#    identity, z=h", "\n", "h", ",", "z", "=", "encoder", "(", "imgs", ",", "return_before_head", "=", "True", ")", "\n", "\n", "# Compute paws loss in full precision", "\n", "with", "torch", ".", "cuda", ".", "amp", ".", "autocast", "(", "enabled", "=", "False", ")", ":", "\n", "\n", "# Step 1. convert representations to fp32", "\n", "                        ", "h", ",", "z", "=", "h", ".", "float", "(", ")", ",", "z", ".", "float", "(", ")", "\n", "\n", "# Step 2. determine anchor views/supports and their", "\n", "#         corresponding target views/supports", "\n", "# --", "\n", "num_support", "=", "supervised_views", "*", "s_batch_size", "*", "classes_per_batch", "\n", "# --", "\n", "anchor_supports", "=", "z", "[", ":", "num_support", "]", "\n", "anchor_views", "=", "z", "[", "num_support", ":", "]", "\n", "# --", "\n", "target_supports", "=", "h", "[", ":", "num_support", "]", ".", "detach", "(", ")", "\n", "target_views", "=", "h", "[", "num_support", ":", "]", ".", "detach", "(", ")", "\n", "target_views", "=", "torch", ".", "cat", "(", "[", "\n", "target_views", "[", "u_batch_size", ":", "2", "*", "u_batch_size", "]", ",", "\n", "target_views", "[", ":", "u_batch_size", "]", "]", ",", "dim", "=", "0", ")", "\n", "\n", "# Step 3. compute paws loss with me-max regularization", "\n", "(", "ploss", ",", "me_max", ")", "=", "paws", "(", "\n", "anchor_views", "=", "anchor_views", ",", "\n", "anchor_supports", "=", "anchor_supports", ",", "\n", "anchor_support_labels", "=", "labels", ",", "\n", "target_views", "=", "target_views", ",", "\n", "target_supports", "=", "target_supports", ",", "\n", "target_support_labels", "=", "labels", ")", "\n", "loss", "=", "ploss", "+", "me_max", "\n", "\n", "", "", "scaler", ".", "scale", "(", "loss", ")", ".", "backward", "(", ")", "\n", "lr_stats", "=", "scaler", ".", "step", "(", "optimizer", ")", "\n", "scaler", ".", "update", "(", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "return", "(", "float", "(", "loss", ")", ",", "float", "(", "ploss", ")", ",", "float", "(", "me_max", ")", ",", "lr_stats", ")", "\n", "", "(", "loss", ",", "ploss", ",", "rloss", ",", "lr_stats", ")", ",", "etime", "=", "gpu_timer", "(", "train_step", ")", "\n", "loss_meter", ".", "update", "(", "loss", ")", "\n", "ploss_meter", ".", "update", "(", "ploss", ")", "\n", "rloss_meter", ".", "update", "(", "rloss", ")", "\n", "time_meter", ".", "update", "(", "etime", ")", "\n", "\n", "if", "(", "itr", "%", "log_freq", "==", "0", ")", "or", "np", ".", "isnan", "(", "loss", ")", "or", "np", ".", "isinf", "(", "loss", ")", ":", "\n", "                ", "csv_logger", ".", "log", "(", "epoch", "+", "1", ",", "itr", ",", "\n", "ploss_meter", ".", "avg", ",", "\n", "rloss_meter", ".", "avg", ",", "\n", "time_meter", ".", "avg", ")", "\n", "logger", ".", "info", "(", "'[%d, %5d] loss: %.3f (%.3f %.3f) '", "\n", "'(%d ms; %d ms)'", "\n", "%", "(", "epoch", "+", "1", ",", "itr", ",", "\n", "loss_meter", ".", "avg", ",", "\n", "ploss_meter", ".", "avg", ",", "\n", "rloss_meter", ".", "avg", ",", "\n", "time_meter", ".", "avg", ",", "\n", "data_meter", ".", "avg", ")", ")", "\n", "if", "lr_stats", "is", "not", "None", ":", "\n", "                    ", "logger", ".", "info", "(", "'[%d, %5d] lr_stats: %.3f (%.2e, %.2e)'", "\n", "%", "(", "epoch", "+", "1", ",", "itr", ",", "\n", "lr_stats", ".", "avg", ",", "\n", "lr_stats", ".", "min", ",", "\n", "lr_stats", ".", "max", ")", ")", "\n", "\n", "", "", "assert", "not", "np", ".", "isnan", "(", "loss", ")", ",", "'loss is nan'", "\n", "\n", "# -- logging/checkpointing", "\n", "", "logger", ".", "info", "(", "'avg. loss %.3f'", "%", "loss_meter", ".", "avg", ")", "\n", "\n", "if", "rank", "==", "0", ":", "\n", "            ", "save_dict", "=", "{", "\n", "'encoder'", ":", "encoder", ".", "state_dict", "(", ")", ",", "\n", "'opt'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'epoch'", ":", "epoch", "+", "1", ",", "\n", "'unlabel_prob'", ":", "unlabeled_frac", ",", "\n", "'loss'", ":", "loss_meter", ".", "avg", ",", "\n", "'s_batch_size'", ":", "s_batch_size", ",", "\n", "'u_batch_size'", ":", "u_batch_size", ",", "\n", "'world_size'", ":", "world_size", ",", "\n", "'lr'", ":", "lr", ",", "\n", "'temperature'", ":", "temperature", ",", "\n", "'amp'", ":", "scaler", ".", "state_dict", "(", ")", "\n", "}", "\n", "torch", ".", "save", "(", "save_dict", ",", "latest_path", ")", "\n", "if", "best_loss", "is", "None", "or", "best_loss", ">", "loss_meter", ".", "avg", ":", "\n", "                ", "best_loss", "=", "loss_meter", ".", "avg", "\n", "logger", ".", "info", "(", "'updating \"best\" checkpoint'", ")", "\n", "torch", ".", "save", "(", "save_dict", ",", "best_path", ")", "\n", "", "if", "(", "epoch", "+", "1", ")", "%", "checkpoint_freq", "==", "0", "or", "(", "epoch", "+", "1", ")", "%", "10", "==", "0", "and", "epoch", "<", "checkpoint_freq", ":", "\n", "                ", "torch", ".", "save", "(", "save_dict", ",", "save_path", ".", "format", "(", "epoch", "=", "f'{epoch + 1}'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.paws_train.load_checkpoint": [[389, 411], ["torch.load", "encoder.load_state_dict", "logger.info", "opt.load_state_dict", "logger.info", "logger.info", "scaler.load_state_dict"], "function", ["home.repos.pwc.inspect_result.facebookresearch_suncet.src.lars.LARS.load_state_dict", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.lars.LARS.load_state_dict", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.lars.LARS.load_state_dict"], ["", "", "", "", "def", "load_checkpoint", "(", "\n", "r_path", ",", "\n", "encoder", ",", "\n", "opt", ",", "\n", "scaler", ",", "\n", "use_fp16", "=", "False", "\n", ")", ":", "\n", "    ", "checkpoint", "=", "torch", ".", "load", "(", "r_path", ",", "map_location", "=", "'cpu'", ")", "\n", "epoch", "=", "checkpoint", "[", "'epoch'", "]", "\n", "\n", "# -- loading encoder", "\n", "encoder", ".", "load_state_dict", "(", "checkpoint", "[", "'encoder'", "]", ")", "\n", "logger", ".", "info", "(", "f'loaded encoder from epoch {epoch}'", ")", "\n", "\n", "# -- loading optimizer", "\n", "opt", ".", "load_state_dict", "(", "checkpoint", "[", "'opt'", "]", ")", "\n", "if", "use_fp16", ":", "\n", "        ", "scaler", ".", "load_state_dict", "(", "checkpoint", "[", "'amp'", "]", ")", "\n", "", "logger", ".", "info", "(", "f'loaded optimizers from epoch {epoch}'", ")", "\n", "logger", ".", "info", "(", "f'read-path: {r_path}'", ")", "\n", "del", "checkpoint", "\n", "return", "encoder", ",", "opt", ",", "epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.paws_train.init_model": [[413, 456], ["torch.nn.Sequential", "encoder.to", "logger.info", "collections.OrderedDict", "collections.OrderedDict", "torch.nn.BatchNorm1d", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.ReLU", "torch.nn.Linear"], "function", ["None"], ["", "def", "init_model", "(", "\n", "device", ",", "\n", "model_name", "=", "'resnet50'", ",", "\n", "use_pred", "=", "False", ",", "\n", "output_dim", "=", "128", "\n", ")", ":", "\n", "    ", "if", "'wide_resnet'", "in", "model_name", ":", "\n", "        ", "encoder", "=", "wide_resnet", ".", "__dict__", "[", "model_name", "]", "(", "dropout_rate", "=", "0.0", ")", "\n", "hidden_dim", "=", "128", "\n", "", "else", ":", "\n", "        ", "encoder", "=", "resnet", ".", "__dict__", "[", "model_name", "]", "(", ")", "\n", "hidden_dim", "=", "2048", "\n", "if", "'w2'", "in", "model_name", ":", "\n", "            ", "hidden_dim", "*=", "2", "\n", "", "elif", "'w4'", "in", "model_name", ":", "\n", "            ", "hidden_dim", "*=", "4", "\n", "\n", "# -- projection head", "\n", "", "", "encoder", ".", "fc", "=", "torch", ".", "nn", ".", "Sequential", "(", "OrderedDict", "(", "[", "\n", "(", "'fc1'", ",", "torch", ".", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", ")", ",", "\n", "(", "'bn1'", ",", "torch", ".", "nn", ".", "BatchNorm1d", "(", "hidden_dim", ")", ")", ",", "\n", "(", "'relu1'", ",", "torch", ".", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'fc2'", ",", "torch", ".", "nn", ".", "Linear", "(", "hidden_dim", ",", "hidden_dim", ")", ")", ",", "\n", "(", "'bn2'", ",", "torch", ".", "nn", ".", "BatchNorm1d", "(", "hidden_dim", ")", ")", ",", "\n", "(", "'relu2'", ",", "torch", ".", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", ",", "\n", "(", "'fc3'", ",", "torch", ".", "nn", ".", "Linear", "(", "hidden_dim", ",", "output_dim", ")", ")", "\n", "]", ")", ")", "\n", "\n", "# -- prediction head", "\n", "encoder", ".", "pred", "=", "None", "\n", "if", "use_pred", ":", "\n", "        ", "mx", "=", "4", "# 4x bottleneck prediction head", "\n", "pred_head", "=", "OrderedDict", "(", "[", "]", ")", "\n", "pred_head", "[", "'bn1'", "]", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "output_dim", ")", "\n", "pred_head", "[", "'fc1'", "]", "=", "torch", ".", "nn", ".", "Linear", "(", "output_dim", ",", "output_dim", "//", "mx", ")", "\n", "pred_head", "[", "'bn2'", "]", "=", "torch", ".", "nn", ".", "BatchNorm1d", "(", "output_dim", "//", "mx", ")", "\n", "pred_head", "[", "'relu'", "]", "=", "torch", ".", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "pred_head", "[", "'fc2'", "]", "=", "torch", ".", "nn", ".", "Linear", "(", "output_dim", "//", "mx", ",", "output_dim", ")", "\n", "encoder", ".", "pred", "=", "torch", ".", "nn", ".", "Sequential", "(", "pred_head", ")", "\n", "\n", "", "encoder", ".", "to", "(", "device", ")", "\n", "logger", ".", "info", "(", "encoder", ")", "\n", "return", "encoder", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.paws_train.init_opt": [[458, 493], ["src.sgd.SGD", "src.utils.WarmupCosineSchedule", "src.lars.LARS", "encoder.named_parameters", "encoder.named_parameters"], "function", ["None"], ["", "def", "init_opt", "(", "\n", "encoder", ",", "\n", "iterations_per_epoch", ",", "\n", "start_lr", ",", "\n", "ref_lr", ",", "\n", "ref_mom", ",", "\n", "nesterov", ",", "\n", "warmup", ",", "\n", "num_epochs", ",", "\n", "weight_decay", "=", "1e-6", ",", "\n", "final_lr", "=", "0.0", "\n", ")", ":", "\n", "    ", "param_groups", "=", "[", "\n", "{", "'params'", ":", "(", "p", "for", "n", ",", "p", "in", "encoder", ".", "named_parameters", "(", ")", "\n", "if", "(", "'bias'", "not", "in", "n", ")", "and", "(", "'bn'", "not", "in", "n", ")", ")", "}", ",", "\n", "{", "'params'", ":", "(", "p", "for", "n", ",", "p", "in", "encoder", ".", "named_parameters", "(", ")", "\n", "if", "(", "'bias'", "in", "n", ")", "or", "(", "'bn'", "in", "n", ")", ")", ",", "\n", "'LARS_exclude'", ":", "True", ",", "\n", "'weight_decay'", ":", "0", "}", "\n", "]", "\n", "optimizer", "=", "SGD", "(", "\n", "param_groups", ",", "\n", "weight_decay", "=", "weight_decay", ",", "\n", "momentum", "=", "0.9", ",", "\n", "nesterov", "=", "nesterov", ",", "\n", "lr", "=", "ref_lr", ")", "\n", "scheduler", "=", "WarmupCosineSchedule", "(", "\n", "optimizer", ",", "\n", "warmup_steps", "=", "warmup", "*", "iterations_per_epoch", ",", "\n", "start_lr", "=", "start_lr", ",", "\n", "ref_lr", "=", "ref_lr", ",", "\n", "final_lr", "=", "final_lr", ",", "\n", "T_max", "=", "num_epochs", "*", "iterations_per_epoch", ")", "\n", "optimizer", "=", "LARS", "(", "optimizer", ",", "trust_coefficient", "=", "0.001", ")", "\n", "return", "encoder", ",", "optimizer", ",", "scheduler", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.utils.WarmupCosineSchedule.__init__": [[69, 88], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_suncet.src.sgd.SGD.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "optimizer", ",", "\n", "warmup_steps", ",", "\n", "start_lr", ",", "\n", "ref_lr", ",", "\n", "T_max", ",", "\n", "last_epoch", "=", "-", "1", ",", "\n", "final_lr", "=", "0.", "\n", ")", ":", "\n", "        ", "self", ".", "start_lr", "=", "start_lr", "\n", "self", ".", "ref_lr", "=", "ref_lr", "\n", "self", ".", "final_lr", "=", "final_lr", "\n", "self", ".", "warmup_steps", "=", "warmup_steps", "\n", "self", ".", "T_max", "=", "T_max", "-", "warmup_steps", "\n", "super", "(", "WarmupCosineSchedule", ",", "self", ")", ".", "__init__", "(", "\n", "optimizer", ",", "\n", "self", ".", "lr_lambda", ",", "\n", "last_epoch", "=", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.utils.WarmupCosineSchedule.lr_lambda": [[89, 100], ["max", "float", "float", "float", "float", "max", "max", "math.cos"], "methods", ["None"], ["", "def", "lr_lambda", "(", "self", ",", "step", ")", ":", "\n", "        ", "if", "step", "<", "self", ".", "warmup_steps", ":", "\n", "            ", "progress", "=", "float", "(", "step", ")", "/", "float", "(", "max", "(", "1", ",", "self", ".", "warmup_steps", ")", ")", "\n", "new_lr", "=", "self", ".", "start_lr", "+", "progress", "*", "(", "self", ".", "ref_lr", "-", "self", ".", "start_lr", ")", "\n", "return", "new_lr", "/", "self", ".", "ref_lr", "\n", "\n", "# -- progress after warmup", "\n", "", "progress", "=", "float", "(", "step", "-", "self", ".", "warmup_steps", ")", "/", "float", "(", "max", "(", "1", ",", "self", ".", "T_max", ")", ")", "\n", "new_lr", "=", "max", "(", "self", ".", "final_lr", ",", "\n", "self", ".", "final_lr", "+", "(", "self", ".", "ref_lr", "-", "self", ".", "final_lr", ")", "*", "0.5", "*", "(", "1.", "+", "math", ".", "cos", "(", "math", ".", "pi", "*", "progress", ")", ")", ")", "\n", "return", "new_lr", "/", "self", ".", "ref_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.utils.CSVLogger.__init__": [[104, 115], ["open", "enumerate", "utils.CSVLogger.types.append", "len", "print", "print"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "fname", ",", "*", "argv", ")", ":", "\n", "        ", "self", ".", "fname", "=", "fname", "\n", "self", ".", "types", "=", "[", "]", "\n", "# -- print headers", "\n", "with", "open", "(", "self", ".", "fname", ",", "'+a'", ")", "as", "f", ":", "\n", "            ", "for", "i", ",", "v", "in", "enumerate", "(", "argv", ",", "1", ")", ":", "\n", "                ", "self", ".", "types", ".", "append", "(", "v", "[", "0", "]", ")", "\n", "if", "i", "<", "len", "(", "argv", ")", ":", "\n", "                    ", "print", "(", "v", "[", "1", "]", ",", "end", "=", "','", ",", "file", "=", "f", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "v", "[", "1", "]", ",", "end", "=", "'\\n'", ",", "file", "=", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.utils.CSVLogger.log": [[116, 121], ["open", "enumerate", "zip", "print", "len"], "methods", ["None"], ["", "", "", "", "def", "log", "(", "self", ",", "*", "argv", ")", ":", "\n", "        ", "with", "open", "(", "self", ".", "fname", ",", "'+a'", ")", "as", "f", ":", "\n", "            ", "for", "i", ",", "tv", "in", "enumerate", "(", "zip", "(", "self", ".", "types", ",", "argv", ")", ",", "1", ")", ":", "\n", "                ", "end", "=", "','", "if", "i", "<", "len", "(", "argv", ")", "else", "'\\n'", "\n", "print", "(", "tv", "[", "0", "]", "%", "tv", "[", "1", "]", ",", "end", "=", "end", ",", "file", "=", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.utils.AverageMeter.__init__": [[126, 128], ["utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_suncet.src.utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.utils.AverageMeter.reset": [[129, 136], ["float", "float"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "max", "=", "float", "(", "'-inf'", ")", "\n", "self", ".", "min", "=", "float", "(", "'inf'", ")", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.utils.AverageMeter.update": [[137, 144], ["max", "min"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "max", "=", "max", "(", "val", ",", "self", ".", "max", ")", "\n", "self", ".", "min", "=", "min", "(", "val", ",", "self", ".", "min", ")", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.utils.AllGather.forward": [[148, 159], ["torch.is_available", "torch.is_available", "torch.is_initialized", "torch.is_initialized", "torch.all_gather", "torch.all_gather", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.get_world_size", "torch.get_world_size", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "range", "torch.get_world_size", "torch.get_world_size"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ")", ":", "\n", "        ", "if", "(", "\n", "dist", ".", "is_available", "(", ")", "\n", "and", "dist", ".", "is_initialized", "(", ")", "\n", "and", "(", "dist", ".", "get_world_size", "(", ")", ">", "1", ")", "\n", ")", ":", "\n", "            ", "outputs", "=", "[", "torch", ".", "zeros_like", "(", "x", ")", "for", "_", "in", "range", "(", "dist", ".", "get_world_size", "(", ")", ")", "]", "\n", "dist", ".", "all_gather", "(", "outputs", ",", "x", ")", "\n", "return", "torch", ".", "cat", "(", "outputs", ",", "0", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.utils.AllGather.backward": [[160, 173], ["torch.is_available", "torch.is_available", "torch.is_initialized", "torch.is_initialized", "grads.contiguous.contiguous.contiguous", "torch.all_reduce", "torch.all_reduce", "torch.get_world_size", "torch.get_world_size", "torch.get_rank", "torch.get_rank", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size", "torch.get_rank", "torch.get_rank"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grads", ")", ":", "\n", "        ", "if", "(", "\n", "dist", ".", "is_available", "(", ")", "\n", "and", "dist", ".", "is_initialized", "(", ")", "\n", "and", "(", "dist", ".", "get_world_size", "(", ")", ">", "1", ")", "\n", ")", ":", "\n", "            ", "s", "=", "(", "grads", ".", "shape", "[", "0", "]", "//", "dist", ".", "get_world_size", "(", ")", ")", "*", "dist", ".", "get_rank", "(", ")", "\n", "e", "=", "(", "grads", ".", "shape", "[", "0", "]", "//", "dist", ".", "get_world_size", "(", ")", ")", "*", "(", "dist", ".", "get_rank", "(", ")", "+", "1", ")", "\n", "grads", "=", "grads", ".", "contiguous", "(", ")", "\n", "dist", ".", "all_reduce", "(", "grads", ")", "\n", "return", "grads", "[", "s", ":", "e", "]", "\n", "", "return", "grads", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.utils.AllReduce.forward": [[177, 187], ["torch.is_available", "torch.is_available", "torch.is_initialized", "torch.is_initialized", "torch.all_reduce", "torch.all_reduce", "torch.get_world_size", "torch.get_world_size", "x.contiguous", "torch.get_world_size", "torch.get_world_size"], "methods", ["None"], ["    ", "@", "staticmethod", "\n", "def", "forward", "(", "ctx", ",", "x", ")", ":", "\n", "        ", "if", "(", "\n", "dist", ".", "is_available", "(", ")", "\n", "and", "dist", ".", "is_initialized", "(", ")", "\n", "and", "(", "dist", ".", "get_world_size", "(", ")", ">", "1", ")", "\n", ")", ":", "\n", "            ", "x", "=", "x", ".", "contiguous", "(", ")", "/", "dist", ".", "get_world_size", "(", ")", "\n", "dist", ".", "all_reduce", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.utils.AllReduce.backward": [[188, 191], ["None"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "backward", "(", "ctx", ",", "grads", ")", ":", "\n", "        ", "return", "grads", "\n", "", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.utils.gpu_timer": [[18, 34], ["closure", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event", "torch.cuda.Event.record", "torch.cuda.Event.record", "torch.cuda.synchronize", "torch.cuda.synchronize", "torch.cuda.Event.elapsed_time"], "function", ["None"], ["def", "gpu_timer", "(", "closure", ",", "log_timings", "=", "True", ")", ":", "\n", "    ", "\"\"\" Helper to time gpu-time to execute closure() \"\"\"", "\n", "elapsed_time", "=", "-", "1.", "\n", "if", "log_timings", ":", "\n", "        ", "start", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "end", "=", "torch", ".", "cuda", ".", "Event", "(", "enable_timing", "=", "True", ")", "\n", "start", ".", "record", "(", ")", "\n", "\n", "", "result", "=", "closure", "(", ")", "\n", "\n", "if", "log_timings", ":", "\n", "        ", "end", ".", "record", "(", ")", "\n", "torch", ".", "cuda", ".", "synchronize", "(", ")", "\n", "elapsed_time", "=", "start", ".", "elapsed_time", "(", "end", ")", "\n", "\n", "", "return", "result", ",", "elapsed_time", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.utils.init_distributed": [[36, 65], ["torch.is_available", "torch.is_initialized", "str", "torch.distributed.init_process_group", "torch.distributed.init_process_group", "torch.get_world_size", "torch.get_rank", "int", "int", "logger.info", "logger.info"], "function", ["None"], ["", "def", "init_distributed", "(", "port", "=", "40101", ",", "rank_and_world_size", "=", "(", "None", ",", "None", ")", ")", ":", "\n", "\n", "    ", "if", "dist", ".", "is_available", "(", ")", "and", "dist", ".", "is_initialized", "(", ")", ":", "\n", "        ", "return", "dist", ".", "get_world_size", "(", ")", ",", "dist", ".", "get_rank", "(", ")", "\n", "\n", "", "rank", ",", "world_size", "=", "rank_and_world_size", "\n", "os", ".", "environ", "[", "'MASTER_ADDR'", "]", "=", "'localhost'", "\n", "\n", "if", "(", "rank", "is", "None", ")", "or", "(", "world_size", "is", "None", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "world_size", "=", "int", "(", "os", ".", "environ", "[", "'SLURM_NTASKS'", "]", ")", "\n", "rank", "=", "int", "(", "os", ".", "environ", "[", "'SLURM_PROCID'", "]", ")", "\n", "os", ".", "environ", "[", "'MASTER_ADDR'", "]", "=", "os", ".", "environ", "[", "'HOSTNAME'", "]", "\n", "", "except", "Exception", ":", "\n", "            ", "logger", ".", "info", "(", "'distributed training not available'", ")", "\n", "world_size", ",", "rank", "=", "1", ",", "0", "\n", "return", "world_size", ",", "rank", "\n", "\n", "", "", "try", ":", "\n", "        ", "os", ".", "environ", "[", "'MASTER_PORT'", "]", "=", "str", "(", "port", ")", "\n", "torch", ".", "distributed", ".", "init_process_group", "(", "\n", "backend", "=", "'nccl'", ",", "\n", "world_size", "=", "world_size", ",", "\n", "rank", "=", "rank", ")", "\n", "", "except", "Exception", ":", "\n", "        ", "world_size", ",", "rank", "=", "1", ",", "0", "\n", "logger", ".", "info", "(", "'distributed training not available'", ")", "\n", "\n", "", "return", "world_size", ",", "rank", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.losses.init_paws_loss": [[18, 88], ["torch.nn.Softmax", "torch.sum", "torch.nn.functional.normalize", "torch.nn.functional.normalize", "src.utils.AllGather.apply", "losses.init_paws_loss.snn"], "function", ["None"], ["def", "init_paws_loss", "(", "\n", "multicrop", "=", "6", ",", "\n", "tau", "=", "0.1", ",", "\n", "T", "=", "0.25", ",", "\n", "me_max", "=", "True", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Make semi-supervised PAWS loss\n\n    :param multicrop: number of small multi-crop views\n    :param tau: cosine similarity temperature\n    :param T: target sharpenning temperature\n    :param me_max: whether to perform me-max regularization\n    \"\"\"", "\n", "softmax", "=", "torch", ".", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "\n", "\n", "def", "sharpen", "(", "p", ")", ":", "\n", "        ", "sharp_p", "=", "p", "**", "(", "1.", "/", "T", ")", "\n", "sharp_p", "/=", "torch", ".", "sum", "(", "sharp_p", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "return", "sharp_p", "\n", "\n", "", "def", "snn", "(", "query", ",", "supports", ",", "labels", ")", ":", "\n", "        ", "\"\"\" Soft Nearest Neighbours similarity classifier \"\"\"", "\n", "# Step 1: normalize embeddings", "\n", "query", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "query", ")", "\n", "supports", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "supports", ")", "\n", "\n", "# Step 2: gather embeddings from all workers", "\n", "supports", "=", "AllGather", ".", "apply", "(", "supports", ")", "\n", "\n", "# Step 3: compute similarlity between local embeddings", "\n", "return", "softmax", "(", "query", "@", "supports", ".", "T", "/", "tau", ")", "@", "labels", "\n", "\n", "", "def", "loss", "(", "\n", "anchor_views", ",", "\n", "anchor_supports", ",", "\n", "anchor_support_labels", ",", "\n", "target_views", ",", "\n", "target_supports", ",", "\n", "target_support_labels", ",", "\n", "sharpen", "=", "sharpen", ",", "\n", "snn", "=", "snn", "\n", ")", ":", "\n", "# -- NOTE: num views of each unlabeled instance = 2+multicrop", "\n", "        ", "batch_size", "=", "len", "(", "anchor_views", ")", "//", "(", "2", "+", "multicrop", ")", "\n", "\n", "# Step 1: compute anchor predictions", "\n", "probs", "=", "snn", "(", "anchor_views", ",", "anchor_supports", ",", "anchor_support_labels", ")", "\n", "\n", "# Step 2: compute targets for anchor predictions", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "targets", "=", "snn", "(", "target_views", ",", "target_supports", ",", "target_support_labels", ")", "\n", "targets", "=", "sharpen", "(", "targets", ")", "\n", "if", "multicrop", ">", "0", ":", "\n", "                ", "mc_target", "=", "0.5", "*", "(", "targets", "[", ":", "batch_size", "]", "+", "targets", "[", "batch_size", ":", "]", ")", "\n", "targets", "=", "torch", ".", "cat", "(", "[", "targets", ",", "*", "[", "mc_target", "for", "_", "in", "range", "(", "multicrop", ")", "]", "]", ",", "dim", "=", "0", ")", "\n", "", "targets", "[", "targets", "<", "1e-4", "]", "*=", "0", "# numerical stability", "\n", "\n", "# Step 3: compute cross-entropy loss H(targets, queries)", "\n", "", "loss", "=", "torch", ".", "mean", "(", "torch", ".", "sum", "(", "torch", ".", "log", "(", "probs", "**", "(", "-", "targets", ")", ")", ",", "dim", "=", "1", ")", ")", "\n", "\n", "# Step 4: compute me-max regularizer", "\n", "rloss", "=", "0.", "\n", "if", "me_max", ":", "\n", "            ", "avg_probs", "=", "AllReduce", ".", "apply", "(", "torch", ".", "mean", "(", "sharpen", "(", "probs", ")", ",", "dim", "=", "0", ")", ")", "\n", "rloss", "-=", "torch", ".", "sum", "(", "torch", ".", "log", "(", "avg_probs", "**", "(", "-", "avg_probs", ")", ")", ")", "\n", "\n", "", "return", "loss", ",", "rloss", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.losses.init_simclr_loss": [[90, 139], ["torch.zeros().to", "torch.ones().to", "range", "torch.nn.functional.normalize", "src.utils.AllGather.apply", "logger.debug", "torch.sum", "torch.sum", "loss.squeeze", "torch.zeros", "torch.ones", "torch.nn.functional.normalize.detach", "torch.exp", "torch.sum", "torch.log", "torch.sum.div"], "function", ["home.repos.pwc.inspect_result.facebookresearch_suncet.src.utils.CSVLogger.log"], ["", "def", "init_simclr_loss", "(", "\n", "batch_size", ",", "\n", "world_size", ",", "\n", "rank", ",", "\n", "temperature", ",", "\n", "device", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Make NTXent loss with normalized embeddings and a temperature parameter\n\n    NOTE: Assumes data is loaded with data-loaders constrcuted from 'init_data'\n          method in data_manager.py\n\n    :param batch_size: num. local original images per batch\n    :param world_size: total number of workers in network\n    :param rank: rank in network\n    :param temperature: temp. param\n    :param device: device to map tensors onto\n    :param gather_tensors: whether to all-gather tensors across workers\n    \"\"\"", "\n", "total_images", "=", "2", "*", "batch_size", "*", "world_size", "\n", "pos_mask", "=", "torch", ".", "zeros", "(", "2", "*", "batch_size", ",", "total_images", ")", ".", "to", "(", "device", ")", "\n", "diag_mask", "=", "torch", ".", "ones", "(", "2", "*", "batch_size", ",", "total_images", ")", ".", "to", "(", "device", ")", "\n", "offset", "=", "rank", "*", "2", "*", "batch_size", "\n", "for", "i", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "pos_mask", "[", "i", ",", "offset", "+", "batch_size", "+", "i", "]", "=", "1.", "\n", "pos_mask", "[", "batch_size", "+", "i", ",", "offset", "+", "i", "]", "=", "1.", "\n", "diag_mask", "[", "i", ",", "offset", "+", "i", "]", "=", "0.", "\n", "diag_mask", "[", "batch_size", "+", "i", ",", "offset", "+", "batch_size", "+", "i", "]", "=", "0.", "\n", "\n", "", "def", "contrastive_loss", "(", "z", ")", ":", "\n", "# Step 1: normalize embeddings", "\n", "        ", "z", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "z", ")", "\n", "\n", "# Step 2: gather embeddings from all workers", "\n", "z_buffer", "=", "AllGather", ".", "apply", "(", "z", ".", "detach", "(", ")", ")", "\n", "logger", ".", "debug", "(", "f'{z_buffer.shape}'", ")", "\n", "\n", "# Step 3: compute similarity between local embeddings and all others", "\n", "exp_cs", "=", "torch", ".", "exp", "(", "z", "@", "z_buffer", ".", "T", "/", "temperature", ")", "*", "diag_mask", "\n", "\n", "# Step 4: separate positive sample from negatives and compute loss", "\n", "pos", "=", "torch", ".", "sum", "(", "exp_cs", "*", "pos_mask", ",", "dim", "=", "1", ")", "\n", "diag", "=", "torch", ".", "sum", "(", "exp_cs", ",", "dim", "=", "1", ")", "\n", "loss", "=", "-", "torch", ".", "sum", "(", "torch", ".", "log", "(", "pos", ".", "div", "(", "diag", ")", ")", ")", "/", "(", "2.", "*", "batch_size", ")", "\n", "\n", "return", "loss", ".", "squeeze", "(", ")", "\n", "\n", "", "return", "contrastive_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.losses.init_suncet_loss": [[141, 190], ["torch.ones().to", "range", "torch.nn.functional.normalize", "src.utils.AllGather.apply", "torch.mean", "torch.ones", "torch.exp", "exp_cs.div", "torch.sum", "exp_cs.sum", "torch.log"], "function", ["home.repos.pwc.inspect_result.facebookresearch_suncet.src.utils.CSVLogger.log"], ["", "def", "init_suncet_loss", "(", "\n", "num_classes", ",", "\n", "batch_size", ",", "\n", "world_size", ",", "\n", "rank", ",", "\n", "temperature", ",", "\n", "device", ",", "\n", "unique_classes", "=", "False", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Make SuNCEt supervised contrastive loss\n\n    NOTE: Assumes data is loaded with data-loaders constrcuted from 'init_data'\n          method in data_manager.py\n\n    :param num_classes: num. image classes per batch\n    :param batch_size: num. images per class in each batch\n    :param world_size: total number of workers in network\n    :param rank: local rank in network\n    :param temperature: temp. param\n    :param device: device to map tensors onto\n    :param unique_classes: whether each worker loads the same set of classes\n    \"\"\"", "\n", "local_images", "=", "batch_size", "*", "num_classes", "\n", "total_images", "=", "local_images", "*", "world_size", "\n", "diag_mask", "=", "torch", ".", "ones", "(", "local_images", ",", "total_images", ")", ".", "to", "(", "device", ")", "\n", "offset", "=", "rank", "*", "local_images", "\n", "for", "i", "in", "range", "(", "local_images", ")", ":", "\n", "        ", "diag_mask", "[", "i", ",", "offset", "+", "i", "]", "=", "0.", "\n", "\n", "", "def", "contrastive_loss", "(", "z", ",", "labels", ")", ":", "\n", "\n", "# Step 1: normalize embeddings", "\n", "        ", "z", "=", "torch", ".", "nn", ".", "functional", ".", "normalize", "(", "z", ")", "\n", "\n", "# Step 2: gather embeddings from all workers", "\n", "z_buffer", "=", "AllGather", ".", "apply", "(", "z", ")", "\n", "\n", "# Step 3: compute class predictions", "\n", "exp_cs", "=", "torch", ".", "exp", "(", "z", "@", "z_buffer", ".", "T", "/", "temperature", ")", "*", "diag_mask", "\n", "probs", "=", "exp_cs", ".", "div", "(", "exp_cs", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ")", "@", "labels", "\n", "\n", "# Step 4: compute loss for predictions", "\n", "targets", "=", "labels", "[", "offset", ":", "offset", "+", "local_images", "]", "\n", "overlap", "=", "probs", "**", "(", "-", "targets", ")", "\n", "loss", "=", "torch", ".", "mean", "(", "torch", ".", "sum", "(", "torch", ".", "log", "(", "overlap", ")", ",", "dim", "=", "1", ")", ")", "\n", "return", "loss", "\n", "\n", "", "return", "contrastive_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.losses.make_labels_matrix": [[192, 228], ["range", "range", "torch.zeros().to", "range", "torch.zeros().to", "torch.zeros", "torch.zeros"], "function", ["None"], ["", "def", "make_labels_matrix", "(", "\n", "num_classes", ",", "\n", "s_batch_size", ",", "\n", "world_size", ",", "\n", "device", ",", "\n", "unique_classes", "=", "False", ",", "\n", "smoothing", "=", "0.0", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Make one-hot labels matrix for labeled samples\n\n    NOTE: Assumes labeled data is loaded with ClassStratifiedSampler from\n          src/data_manager.py\n    \"\"\"", "\n", "\n", "local_images", "=", "s_batch_size", "*", "num_classes", "\n", "total_images", "=", "local_images", "*", "world_size", "\n", "\n", "off_value", "=", "smoothing", "/", "(", "num_classes", "*", "world_size", ")", "if", "unique_classes", "else", "smoothing", "/", "num_classes", "\n", "\n", "if", "unique_classes", ":", "\n", "        ", "labels", "=", "torch", ".", "zeros", "(", "total_images", ",", "num_classes", "*", "world_size", ")", ".", "to", "(", "device", ")", "+", "off_value", "\n", "for", "r", "in", "range", "(", "world_size", ")", ":", "\n", "# -- index range for rank 'r' images", "\n", "            ", "s1", "=", "r", "*", "local_images", "\n", "e1", "=", "s1", "+", "local_images", "\n", "# -- index offset for rank 'r' classes", "\n", "offset", "=", "r", "*", "num_classes", "\n", "for", "i", "in", "range", "(", "num_classes", ")", ":", "\n", "                ", "labels", "[", "s1", ":", "e1", "]", "[", "i", ":", ":", "num_classes", "]", "[", ":", ",", "offset", "+", "i", "]", "=", "1.", "-", "smoothing", "+", "off_value", "\n", "", "", "", "else", ":", "\n", "        ", "labels", "=", "torch", ".", "zeros", "(", "total_images", ",", "num_classes", "*", "world_size", ")", ".", "to", "(", "device", ")", "+", "off_value", "\n", "for", "i", "in", "range", "(", "num_classes", ")", ":", "\n", "            ", "labels", "[", "i", ":", ":", "num_classes", "]", "[", ":", ",", "i", "]", "=", "1.", "-", "smoothing", "+", "off_value", "\n", "\n", "", "", "return", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.losses.gather_from_all": [[230, 234], ["losses.gather_tensors_from_all", "torch.cat"], "function", ["home.repos.pwc.inspect_result.facebookresearch_suncet.src.losses.gather_tensors_from_all"], ["", "def", "gather_from_all", "(", "tensor", ")", ":", "\n", "    ", "gathered_tensors", "=", "gather_tensors_from_all", "(", "tensor", ")", "\n", "gathered_tensor", "=", "torch", ".", "cat", "(", "gathered_tensors", ",", "0", ")", "\n", "return", "gathered_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.losses.gather_tensors_from_all": [[236, 264], ["tensor.unsqueeze.unsqueeze", "torch.distributed.is_available", "torch.distributed.is_initialized", "losses.convert_to_distributed_tensor", "torch.distributed.all_gather", "torch.distributed.get_world_size", "torch.zeros_like", "losses.convert_to_normal_tensor", "range", "torch.distributed.get_world_size"], "function", ["home.repos.pwc.inspect_result.facebookresearch_suncet.src.losses.convert_to_distributed_tensor", "home.repos.pwc.inspect_result.facebookresearch_suncet.src.losses.convert_to_normal_tensor"], ["", "def", "gather_tensors_from_all", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"\n    Wrapper over torch.distributed.all_gather for performing\n    'gather' of 'tensor' over all processes in both distributed /\n    non-distributed scenarios.\n    \"\"\"", "\n", "if", "tensor", ".", "ndim", "==", "0", ":", "\n", "# 0 dim tensors cannot be gathered. so unsqueeze", "\n", "        ", "tensor", "=", "tensor", ".", "unsqueeze", "(", "0", ")", "\n", "\n", "", "if", "(", "\n", "torch", ".", "distributed", ".", "is_available", "(", ")", "\n", "and", "torch", ".", "distributed", ".", "is_initialized", "(", ")", "\n", "and", "(", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ">", "1", ")", "\n", ")", ":", "\n", "        ", "tensor", ",", "orig_device", "=", "convert_to_distributed_tensor", "(", "tensor", ")", "\n", "gathered_tensors", "=", "[", "\n", "torch", ".", "zeros_like", "(", "tensor", ")", "for", "_", "in", "range", "(", "torch", ".", "distributed", ".", "get_world_size", "(", ")", ")", "\n", "]", "\n", "torch", ".", "distributed", ".", "all_gather", "(", "gathered_tensors", ",", "tensor", ")", "\n", "gathered_tensors", "=", "[", "\n", "convert_to_normal_tensor", "(", "_tensor", ",", "orig_device", ")", "\n", "for", "_tensor", "in", "gathered_tensors", "\n", "]", "\n", "", "else", ":", "\n", "        ", "gathered_tensors", "=", "[", "tensor", "]", "\n", "\n", "", "return", "gathered_tensors", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.losses.convert_to_distributed_tensor": [[266, 280], ["torch.distributed.is_available", "tensor.cuda.cuda", "torch.distributed.get_backend"], "function", ["None"], ["", "def", "convert_to_distributed_tensor", "(", "tensor", ")", ":", "\n", "    ", "\"\"\"\n    For some backends, such as NCCL, communication only works if the\n    tensor is on the GPU. This helper function converts to the correct\n    device and returns the tensor + original device.\n    \"\"\"", "\n", "orig_device", "=", "'cpu'", "if", "not", "tensor", ".", "is_cuda", "else", "'gpu'", "\n", "if", "(", "\n", "torch", ".", "distributed", ".", "is_available", "(", ")", "\n", "and", "torch", ".", "distributed", ".", "get_backend", "(", ")", "==", "torch", ".", "distributed", ".", "Backend", ".", "NCCL", "\n", "and", "not", "tensor", ".", "is_cuda", "\n", ")", ":", "\n", "        ", "tensor", "=", "tensor", ".", "cuda", "(", ")", "\n", "", "return", "(", "tensor", ",", "orig_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.losses.convert_to_normal_tensor": [[282, 290], ["tensor.cpu.cpu"], "function", ["None"], ["", "def", "convert_to_normal_tensor", "(", "tensor", ",", "orig_device", ")", ":", "\n", "    ", "\"\"\"\n    For some backends, such as NCCL, communication only works if the\n    tensor is on the GPU. This converts the tensor back to original device.\n    \"\"\"", "\n", "if", "tensor", ".", "is_cuda", "and", "orig_device", "==", "'cpu'", ":", "\n", "        ", "tensor", "=", "tensor", ".", "cpu", "(", ")", "\n", "", "return", "tensor", "\n", "", ""]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.sgd.SGD.__init__": [[14, 27], ["dict", "torch.optim.Optimizer.__init__", "ValueError", "ValueError", "ValueError", "ValueError"], "methods", ["home.repos.pwc.inspect_result.facebookresearch_suncet.src.sgd.SGD.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "lr", ",", "momentum", "=", "0", ",", "weight_decay", "=", "0", ",", "nesterov", "=", "False", ")", ":", "\n", "        ", "if", "lr", "<", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "f'Invalid learning rate: {lr}'", ")", "\n", "", "if", "momentum", "<", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "f'Invalid momentum value: {momentum}'", ")", "\n", "", "if", "weight_decay", "<", "0.0", ":", "\n", "            ", "raise", "ValueError", "(", "f'Invalid weight_decay value: {weight_decay}'", ")", "\n", "", "if", "nesterov", "and", "(", "momentum", "==", "0.0", ")", ":", "\n", "            ", "raise", "ValueError", "(", "f'Nesterov needs momentum > 0'", ")", "\n", "\n", "", "defaults", "=", "dict", "(", "lr", "=", "lr", ",", "momentum", "=", "momentum", ",", "weight_decay", "=", "weight_decay", ",", "\n", "nesterov", "=", "nesterov", ")", "\n", "super", "(", "SGD", ",", "self", ")", ".", "__init__", "(", "params", ",", "defaults", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.facebookresearch_suncet.src.sgd.SGD.step": [[28, 60], ["torch.no_grad", "d_p.add.add.mul_", "p.add_", "d_p.add.add.add", "d_p.add.add.clone().detach", "d_p.add.clone().detach.mul_().add_", "d_p.add.add.add", "d_p.add.add.clone", "d_p.add.clone().detach.mul_"], "methods", ["None"], ["", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "step", "(", "self", ")", ":", "\n", "        ", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "weight_decay", "=", "group", "[", "'weight_decay'", "]", "\n", "momentum", "=", "group", "[", "'momentum'", "]", "\n", "nesterov", "=", "group", "[", "'nesterov'", "]", "\n", "\n", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "\n", "", "d_p", "=", "p", ".", "grad", "\n", "if", "weight_decay", "!=", "0", ":", "\n", "                    ", "d_p", "=", "d_p", ".", "add", "(", "p", ",", "alpha", "=", "weight_decay", ")", "\n", "", "d_p", ".", "mul_", "(", "-", "group", "[", "'lr'", "]", ")", "\n", "\n", "if", "momentum", "!=", "0", ":", "\n", "                    ", "param_state", "=", "self", ".", "state", "[", "p", "]", "\n", "if", "'momentum_buffer'", "not", "in", "param_state", ":", "\n", "                        ", "buf", "=", "param_state", "[", "'momentum_buffer'", "]", "=", "d_p", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "", "else", ":", "\n", "                        ", "buf", "=", "param_state", "[", "'momentum_buffer'", "]", "\n", "buf", ".", "mul_", "(", "momentum", ")", ".", "add_", "(", "d_p", ")", "\n", "\n", "", "if", "nesterov", ":", "\n", "                        ", "d_p", "=", "d_p", ".", "add", "(", "buf", ",", "alpha", "=", "momentum", ")", "\n", "", "else", ":", "\n", "                        ", "d_p", "=", "buf", "\n", "\n", "", "", "p", ".", "add_", "(", "d_p", ")", "\n", "\n", "", "", "return", "None", "\n", "", "", ""]]}