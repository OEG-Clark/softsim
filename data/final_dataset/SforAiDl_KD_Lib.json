{"home.repos.pwc.inspect_result.SforAiDl_KD_Lib.static.static_quantization.Static_Quantizer.__init__": [[27, 38], ["torch.nn.CrossEntropyLoss", "torch.device", "KD_Lib.Quantization.common.Quantizer.__init__"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.MeanResnet.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "model", ",", "\n", "train_loader", ",", "\n", "test_loader", ",", "\n", "qconfig", "=", "torch", ".", "quantization", ".", "default_qconfig", ",", "\n", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ",", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ",", "\n", ")", ":", "\n", "        ", "super", "(", "Static_Quantizer", ",", "self", ")", ".", "__init__", "(", "\n", "model", ",", "qconfig", ",", "train_loader", ",", "test_loader", ",", "None", ",", "criterion", ",", "device", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.static.static_quantization.Static_Quantizer.quantize": [[40, 62], ["copy.deepcopy", "static_quantization.Static_Quantizer.quantized_model.eval", "static_quantization.Static_Quantizer.quantized_model.fuse_model", "torch.quantization.prepare", "print", "static_quantization.Static_Quantizer._calibrate_model", "print", "torch.quantization.convert"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.static.static_quantization.Static_Quantizer._calibrate_model"], ["", "def", "quantize", "(", "self", ",", "num_calibration_batches", "=", "10", ")", ":", "\n", "        ", "\"\"\"\n        Function used for quantization\n\n        :param num_calibration_batches: Number of batches used for calibration\n        :type num_calibration_batches: int\n        \"\"\"", "\n", "\n", "self", ".", "quantized_model", "=", "deepcopy", "(", "self", ".", "model", ")", "\n", "self", ".", "quantized_model", ".", "eval", "(", ")", "\n", "self", ".", "quantized_model", ".", "fuse_model", "(", ")", "\n", "self", ".", "quantized_model", ".", "qconfig", "=", "self", ".", "qconfig", "\n", "\n", "torch", ".", "quantization", ".", "prepare", "(", "self", ".", "quantized_model", ",", "inplace", "=", "True", ")", "\n", "\n", "print", "(", "\"Calibrating model...\"", ")", "\n", "self", ".", "_calibrate_model", "(", "num_calibration_batches", ")", "\n", "\n", "print", "(", "\"Converting to quantized model...\"", ")", "\n", "torch", ".", "quantization", ".", "convert", "(", "self", ".", "quantized_model", ",", "inplace", "=", "True", ")", "\n", "\n", "return", "self", ".", "quantized_model", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.static.static_quantization.Static_Quantizer._calibrate_model": [[63, 93], ["static_quantization.Static_Quantizer.quantized_model.eval", "min", "len", "torch.no_grad", "static_quantization.Static_Quantizer.quantized_model", "isinstance", "static_quantization.Static_Quantizer.criterion", "static_quantization.Static_Quantizer.argmax", "static_quantization.Static_Quantizer.argmax.eq().sum().item", "static_quantization.Static_Quantizer.argmax.eq().sum", "static_quantization.Static_Quantizer.argmax.eq", "target.view_as"], "methods", ["None"], ["", "def", "_calibrate_model", "(", "self", ",", "num_batches", ")", ":", "\n", "        ", "\"\"\"\n        Function used for calibrating the model for quantization\n\n        :param num_batches: Number of batches used for calibration\n        :type num_batches: int\n        \"\"\"", "\n", "\n", "self", ".", "quantized_model", ".", "eval", "(", ")", "\n", "correct", "=", "0", "\n", "cnt", "=", "0", "\n", "len_dataset", "=", "min", "(", "\n", "num_batches", "*", "self", ".", "train_loader", ".", "batch_size", ",", "len", "(", "self", ".", "train_loader", ".", "dataset", ")", "\n", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "image", ",", "target", "in", "self", ".", "train_loader", ":", "\n", "                ", "output", "=", "self", ".", "quantized_model", "(", "image", ")", "\n", "\n", "if", "isinstance", "(", "output", ",", "tuple", ")", ":", "\n", "                    ", "output", "=", "output", "[", "0", "]", "\n", "\n", "", "loss", "=", "self", ".", "criterion", "(", "output", ",", "target", ")", "\n", "cnt", "+=", "1", "\n", "pred", "=", "output", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "if", "cnt", ">=", "num_batches", ":", "\n", "                    ", "return", "correct", "/", "len_dataset", "\n", "\n", "", "", "", "return", "correct", "/", "len_dataset", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.qat.qat.QAT_Quantizer.__init__": [[28, 40], ["torch.quantization.get_default_qat_qconfig", "torch.nn.CrossEntropyLoss", "torch.device", "KD_Lib.Quantization.common.Quantizer.__init__"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.MeanResnet.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "model", ",", "\n", "train_loader", ",", "\n", "test_loader", ",", "\n", "optimizer", ",", "\n", "qconfig", "=", "torch", ".", "quantization", ".", "get_default_qat_qconfig", "(", "\"fbgemm\"", ")", ",", "\n", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", ",", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ",", "\n", ")", ":", "\n", "        ", "super", "(", "QAT_Quantizer", ",", "self", ")", ".", "__init__", "(", "\n", "model", ",", "qconfig", ",", "train_loader", ",", "test_loader", ",", "optimizer", ",", "criterion", ",", "device", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.qat.qat.QAT_Quantizer.quantize": [[42, 94], ["copy.deepcopy", "copy.deepcopy.fuse_model", "copy.deepcopy", "copy.deepcopy.parameters", "torch.quantization.prepare_qat", "print", "range", "print", "qat.QAT_Quantizer._train_model", "print", "torch.quantization.convert", "qat.QAT_Quantizer._evaluate_model", "print", "copy.deepcopy.apply", "copy.deepcopy.apply", "copy.deepcopy.eval"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.qat.qat.QAT_Quantizer._train_model", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.DML.dml.DML._evaluate_model"], ["", "def", "quantize", "(", "\n", "self", ",", "\n", "num_train_epochs", "=", "10", ",", "\n", "num_train_batches", "=", "10", ",", "\n", "param_freeze_epoch", "=", "3", ",", "\n", "bn_freeze_epoch", "=", "2", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Function used for quantization\n\n        :param num_train_epochs: Number of epochs used for training\n        :type num_train_epochs: int\n        :param num_train_batches: Number of batches used for training\n        :type num_train_batches: int\n        :param param_freeze_epoch: Epoch after which quantizer parameters need to be freezed\n        :type param_freeze_epoch: int\n        :param bn_freeze_epoch: Epoch after which batch norm mean and variance stats are freezed\n        :type bn_freeze_epoch: int\n        \"\"\"", "\n", "\n", "qat_model", "=", "deepcopy", "(", "self", ".", "model", ")", "\n", "qat_model", ".", "fuse_model", "(", ")", "\n", "\n", "optimizer", "=", "deepcopy", "(", "self", ".", "optimizer", ")", "\n", "optimizer", ".", "params", "=", "qat_model", ".", "parameters", "(", ")", "\n", "\n", "qat_model", ".", "qconfig", "=", "self", ".", "qconfig", "\n", "\n", "torch", ".", "quantization", ".", "prepare_qat", "(", "qat_model", ",", "inplace", "=", "True", ")", "\n", "\n", "print", "(", "\"Training model...\"", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "num_train_epochs", ")", ":", "\n", "\n", "            ", "print", "(", "f\"Epoch {epoch}\"", ")", "\n", "loss", ",", "acc", "=", "self", ".", "_train_model", "(", "qat_model", ",", "optimizer", ",", "num_train_batches", ")", "\n", "print", "(", "f\"Training Loss: {loss} | Training Acc: {acc}\"", ")", "\n", "\n", "if", "epoch", ">", "param_freeze_epoch", ":", "\n", "                ", "qat_model", ".", "apply", "(", "torch", ".", "quantization", ".", "disable_observer", ")", "\n", "\n", "", "if", "epoch", ">", "bn_freeze_epoch", ":", "\n", "                ", "qat_model", ".", "apply", "(", "torch", ".", "nn", ".", "intrinsic", ".", "qat", ".", "freeze_bn_stats", ")", "\n", "\n", "", "self", ".", "quantized_model", "=", "torch", ".", "quantization", ".", "convert", "(", "\n", "qat_model", ".", "eval", "(", ")", ",", "inplace", "=", "False", "\n", ")", "\n", "acc", "=", "self", ".", "_evaluate_model", "(", "self", ".", "quantized_model", ")", "\n", "\n", "print", "(", "f\"Evaluation accuracy: {acc}\"", ")", "\n", "\n", "", "return", "self", ".", "quantized_model", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.qat.qat.QAT_Quantizer._train_model": [[95, 137], ["model.to", "model.train", "min", "len", "model", "isinstance", "qat.QAT_Quantizer.criterion", "optimizer.zero_grad", "qat.QAT_Quantizer.backward", "optimizer.step", "model.argmax", "model.argmax.eq().sum().item", "qat.QAT_Quantizer.item", "image.to", "target.to", "model.argmax.eq().sum", "model.argmax.eq", "target.view_as"], "methods", ["None"], ["", "def", "_train_model", "(", "self", ",", "model", ",", "optimizer", ",", "num_batches", ")", ":", "\n", "        ", "\"\"\"\n        Function used for training the model\n\n        :param model (torch.nn.Module): Model that needs to be trained\n        :param optimizer (torch.optim.*): Optimizer for training\n        :param num_batches (int): Number of batches used for calibration\n        \"\"\"", "\n", "\n", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "model", ".", "train", "(", ")", "\n", "\n", "correct", "=", "0", "\n", "epoch_loss", "=", "0", "\n", "cnt", "=", "0", "\n", "len_dataset", "=", "min", "(", "\n", "num_batches", "*", "self", ".", "train_loader", ".", "batch_size", ",", "len", "(", "self", ".", "train_loader", ".", "dataset", ")", "\n", ")", "\n", "\n", "for", "image", ",", "target", "in", "self", ".", "train_loader", ":", "\n", "            ", "image", ",", "target", "=", "image", ".", "to", "(", "self", ".", "device", ")", ",", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "output", "=", "model", "(", "image", ")", "\n", "\n", "if", "isinstance", "(", "output", ",", "tuple", ")", ":", "\n", "                ", "output", "=", "output", "[", "0", "]", "\n", "\n", "", "loss", "=", "self", ".", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "cnt", "+=", "1", "\n", "pred", "=", "output", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "epoch_loss", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "if", "cnt", ">=", "num_batches", ":", "\n", "                ", "return", "epoch_loss", ",", "(", "correct", "/", "len_dataset", ")", "\n", "\n", "", "", "return", "epoch_loss", ",", "(", "correct", "/", "len_dataset", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.dynamic.dynamic_quantization.Dynamic_Quantizer.__init__": [[18, 21], ["KD_Lib.Quantization.common.Quantizer.__init__"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.MeanResnet.__init__"], ["def", "__init__", "(", "self", ",", "model", ",", "test_loader", ",", "qconfig_spec", "=", "None", ")", ":", "\n", "        ", "super", "(", "Dynamic_Quantizer", ",", "self", ")", ".", "__init__", "(", "\n", "model", ",", "qconfig_spec", ",", "test_loader", "=", "test_loader", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.dynamic.dynamic_quantization.Dynamic_Quantizer.quantize": [[23, 41], ["torch.quantization.quantize_dynamic"], "methods", ["None"], ["", "def", "quantize", "(", "self", ",", "dtype", "=", "torch", ".", "qint8", ",", "mapping", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Function used for quantization\n\n        :param dtype: dtype for quantized modules\n        :type dtype: torch.dtype\n        :param mapping: maps type of a submodule to a type of corresponding dynamically quantized version with which the submodule needs to be replaced\n        :type mapping: mapping\n        \"\"\"", "\n", "\n", "self", ".", "quantized_model", "=", "torch", ".", "quantization", ".", "quantize_dynamic", "(", "\n", "self", ".", "model", ",", "\n", "qconfig_spec", "=", "self", ".", "qconfig", ",", "\n", "dtype", "=", "dtype", ",", "\n", "mapping", "=", "mapping", ",", "\n", "inplace", "=", "False", ",", "\n", ")", "\n", "return", "self", ".", "quantized_model", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.common.base_class.Quantizer.__init__": [[27, 45], ["torch.device"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "model", ",", "\n", "qconfig", ",", "\n", "train_loader", "=", "None", ",", "\n", "test_loader", "=", "None", ",", "\n", "optimizer", "=", "None", ",", "\n", "criterion", "=", "None", ",", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ",", "\n", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "quantized_model", "=", "model", "\n", "self", ".", "qconfig", "=", "qconfig", "\n", "self", ".", "train_loader", "=", "train_loader", "\n", "self", ".", "test_loader", "=", "test_loader", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "criterion", "=", "criterion", "\n", "self", ".", "device", "=", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.common.base_class.Quantizer.quantize": [[46, 52], ["None"], "methods", ["None"], ["", "def", "quantize", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Function used for quantization\n        \"\"\"", "\n", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.common.base_class.Quantizer.get_model_sizes": [[53, 64], ["base_class.Quantizer._get_size_of_model", "base_class.Quantizer._get_size_of_model", "print", "print", "print"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.common.base_class.Quantizer._get_size_of_model", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.common.base_class.Quantizer._get_size_of_model"], ["", "def", "get_model_sizes", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Function for printing sizes of the original and quantized model\n        \"\"\"", "\n", "\n", "original_size", "=", "self", ".", "_get_size_of_model", "(", "self", ".", "model", ")", "\n", "quantized_size", "=", "self", ".", "_get_size_of_model", "(", "self", ".", "quantized_model", ")", "\n", "\n", "print", "(", "\"-\"", "*", "80", ")", "\n", "print", "(", "f\"Size of original model (MB): {original_size}\"", ")", "\n", "print", "(", "f\"Size of quantized_model (MB): {quantized_size}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.common.base_class.Quantizer.get_performance_statistics": [[65, 78], ["base_class.Quantizer._time_model_evaluation", "print", "base_class.Quantizer._time_model_evaluation", "print"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.common.base_class.Quantizer._time_model_evaluation", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.common.base_class.Quantizer._time_model_evaluation"], ["", "def", "get_performance_statistics", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Function used for reporting inference performance of original and quantized models\n        Note that performance here referes to the following:\n        1. Accuracy achieved on the testset\n        2. Time taken for evaluating on the testset\n        \"\"\"", "\n", "\n", "acc", ",", "elapsed", "=", "self", ".", "_time_model_evaluation", "(", "self", ".", "model", ")", "\n", "print", "(", "f\"Original Model: Acc: {acc} | Time: {elapsed}s\"", ")", "\n", "\n", "acc", ",", "elapsed", "=", "self", ".", "_time_model_evaluation", "(", "self", ".", "quantized_model", ")", "\n", "print", "(", "f\"Quantized Model: Acc: {acc} | Time: {elapsed}s\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.common.base_class.Quantizer._get_size_of_model": [[79, 91], ["torch.save", "os.remove", "model.state_dict", "os.path.getsize"], "methods", ["None"], ["", "def", "_get_size_of_model", "(", "self", ",", "model", ")", ":", "\n", "        ", "\"\"\"\n        Function used for fetching size of a model\n\n        :param model: Model\n        :type model: torch.nn.Module\n        \"\"\"", "\n", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "\"temp.p\"", ")", "\n", "model_size", "=", "os", ".", "path", ".", "getsize", "(", "\"temp.p\"", ")", "/", "1e6", "\n", "os", ".", "remove", "(", "\"temp.p\"", ")", "\n", "return", "model_size", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.common.base_class.Quantizer._time_model_evaluation": [[92, 104], ["time.time", "base_class.Quantizer._evaluate_model", "time.time"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.DML.dml.DML._evaluate_model"], ["", "def", "_time_model_evaluation", "(", "self", ",", "model", ")", ":", "\n", "        ", "\"\"\"\n        Function used for fetching time taken by the model for inference\n\n        :param model: Model\n        :type model: torch.nn.Module\n        \"\"\"", "\n", "\n", "s", "=", "time", ".", "time", "(", ")", "\n", "acc", "=", "self", ".", "_evaluate_model", "(", "model", ")", "\n", "elapsed", "=", "time", ".", "time", "(", ")", "-", "s", "\n", "return", "acc", ",", "elapsed", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.common.base_class.Quantizer._evaluate_model": [[105, 128], ["model.eval", "len", "torch.no_grad", "model", "isinstance", "model.argmax", "model.argmax.eq().sum().item", "model.argmax.eq().sum", "model.argmax.eq", "target.view_as"], "methods", ["None"], ["", "def", "_evaluate_model", "(", "self", ",", "model", ")", ":", "\n", "        ", "\"\"\"\n        Function used for evaluating the model\n\n        :param model: Model\n        :type model: torch.nn.Module\n        \"\"\"", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "correct", "=", "0", "\n", "len_dataset", "=", "len", "(", "self", ".", "test_loader", ".", "dataset", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "image", ",", "target", "in", "self", ".", "test_loader", ":", "\n", "                ", "output", "=", "model", "(", "image", ")", "\n", "\n", "if", "isinstance", "(", "output", ",", "tuple", ")", ":", "\n", "                    ", "output", "=", "output", "[", "0", "]", "\n", "\n", "", "pred", "=", "output", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "", "return", "correct", "/", "len_dataset", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.common.iterative_base_class.BaseIterativePruner.__init__": [[25, 39], ["torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "model.to", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "iterative_base_class.BaseIterativePruner.model.parameters"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "model", ",", "\n", "train_loader", ",", "\n", "test_loader", ",", "\n", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ",", "\n", "device", "=", "\"cpu\"", ",", "\n", ")", ":", "\n", "        ", "self", ".", "device", "=", "device", "\n", "self", ".", "model", "=", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "loss_fn", "=", "loss_fn", "\n", "self", ".", "train_loader", "=", "train_loader", "\n", "self", ".", "test_loader", "=", "test_loader", "\n", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.common.iterative_base_class.BaseIterativePruner.train_model": [[40, 73], ["len", "data.to.to.to", "label.to.to.to", "iterative_base_class.BaseIterativePruner.model", "isinstance", "iterative_base_class.BaseIterativePruner.loss_fn", "iterative_base_class.BaseIterativePruner.argmax", "iterative_base_class.BaseIterativePruner.argmax.eq().sum().item", "iterative_base_class.BaseIterativePruner.optimizer.zero_grad", "iterative_base_class.BaseIterativePruner.backward", "iterative_base_class.BaseIterativePruner.zero_pruned_gradients", "iterative_base_class.BaseIterativePruner.optimizer.step", "iterative_base_class.BaseIterativePruner.item", "iterative_base_class.BaseIterativePruner.argmax.eq().sum", "iterative_base_class.BaseIterativePruner.argmax.eq", "label.to.to.view_as"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.common.iterative_base_class.BaseIterativePruner.zero_pruned_gradients"], ["", "def", "train_model", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Function used for training the model for one epoch\n        \"\"\"", "\n", "\n", "epoch_loss", "=", "0.0", "\n", "correct", "=", "0", "\n", "length_of_dataset", "=", "len", "(", "self", ".", "train_loader", ".", "dataset", ")", "\n", "\n", "for", "(", "data", ",", "label", ")", "in", "self", ".", "train_loader", ":", "\n", "            ", "data", "=", "data", ".", "to", "(", "self", ".", "device", ")", "\n", "label", "=", "label", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "out", "=", "self", ".", "model", "(", "data", ")", "\n", "if", "isinstance", "(", "out", ",", "tuple", ")", ":", "\n", "                ", "out", "=", "out", "[", "0", "]", "\n", "\n", "", "loss", "=", "self", ".", "loss_fn", "(", "out", ",", "label", ")", "\n", "\n", "pred", "=", "out", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "correct", "+=", "pred", ".", "eq", "(", "label", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "self", ".", "zero_pruned_gradients", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "epoch_loss", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "", "epoch_loss", "/=", "length_of_dataset", "\n", "epoch_acc", "=", "100", "*", "(", "correct", "/", "length_of_dataset", ")", "\n", "return", "epoch_loss", ",", "epoch_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.common.iterative_base_class.BaseIterativePruner.zero_pruned_gradients": [[74, 85], ["iterative_base_class.BaseIterativePruner.model.named_parameters", "param.data.cpu().numpy", "param.grad.data.cpu().numpy", "numpy.where", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "param.data.cpu", "param.grad.data.cpu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "zero_pruned_gradients", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Function used for zeroing gradients of pruned weights\n        \"\"\"", "\n", "\n", "for", "name", ",", "param", "in", "self", ".", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "\"weight\"", "in", "name", ":", "\n", "                ", "param_data", "=", "param", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "param_grad", "=", "param", ".", "grad", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "param_grad", "=", "np", ".", "where", "(", "param_data", "==", "0.0", ",", "0", ",", "param_grad", ")", "\n", "param", ".", "grad", ".", "data", "=", "torch", ".", "from_numpy", "(", "param_grad", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.common.iterative_base_class.BaseIterativePruner.finetune_model": [[86, 119], ["copy.deepcopy", "range", "iterative_base_class.BaseIterativePruner.model.load_state_dict", "iterative_base_class.BaseIterativePruner.model.state_dict", "iterative_base_class.BaseIterativePruner.train_model", "iterative_base_class.BaseIterativePruner.evaluate_model", "loss_arr.append", "print", "print", "torch.save", "torch.save", "torch.save", "torch.save", "copy.deepcopy", "iterative_base_class.BaseIterativePruner.model.state_dict", "iterative_base_class.BaseIterativePruner.model.state_dict"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.common.iterative_base_class.BaseIterativePruner.train_model", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.common.iterative_base_class.BaseIterativePruner.evaluate_model"], ["", "", "", "def", "finetune_model", "(", "self", ",", "epochs", ",", "save_model", "=", "False", ",", "save_model_path", "=", "\"model.pt\"", ")", ":", "\n", "        ", "\"\"\"\n        Function used for finetuning the model after it is pruned\n\n        :param epochs: Number of training epochs\n        :type epochs: int\n        :param save_model: True if the model needs to be saved\n        :type save_model: bool\n        :param save_model_path: Path where the model needs to be saved (only used if save_model = True).\n        :type save_model_path: str\n        \"\"\"", "\n", "\n", "best_acc", "=", "0.0", "\n", "best_model_weights", "=", "copy", ".", "deepcopy", "(", "self", ".", "model", ".", "state_dict", "(", ")", ")", "\n", "loss_arr", "=", "[", "]", "\n", "accs", "=", "[", "]", "\n", "\n", "for", "ep", "in", "range", "(", "epochs", ")", ":", "\n", "            ", "epoch_loss", ",", "epoch_acc", "=", "self", ".", "train_model", "(", ")", "\n", "test_loss", ",", "test_acc", "=", "self", ".", "evaluate_model", "(", ")", "\n", "if", "test_acc", ">", "best_acc", ":", "\n", "                ", "best_acc", "=", "epoch_acc", "\n", "best_model_weights", "=", "copy", ".", "deepcopy", "(", "self", ".", "model", ".", "state_dict", "(", ")", ")", "\n", "\n", "", "loss_arr", ".", "append", "(", "epoch_loss", ")", "\n", "print", "(", "\n", "f\"Epoch: {ep+1}, Training Loss: {epoch_loss}, Training Accuracy: {epoch_acc}\"", "\n", ")", "\n", "print", "(", "f\"Epoch: {ep+1}, Test Loss: {test_loss}, Test Accuracy: {test_acc}\"", ")", "\n", "\n", "", "self", ".", "model", ".", "load_state_dict", "(", "best_model_weights", ")", "\n", "if", "save_model", ":", "\n", "            ", "torch", ".", "save", "(", "self", ".", "model", ".", "state_dict", "(", ")", ",", "save_model_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.common.iterative_base_class.BaseIterativePruner.evaluate_model": [[120, 152], ["copy.deepcopy", "copy.deepcopy.eval", "copy.deepcopy.load_state_dict", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "len", "torch.load", "torch.load", "torch.load", "torch.load", "copy.deepcopy.", "isinstance", "iterative_base_class.BaseIterativePruner.loss_fn().item", "copy.deepcopy.argmax", "model.argmax.eq().sum().item", "len", "data.to", "targets.to", "iterative_base_class.BaseIterativePruner.loss_fn", "model.argmax.eq().sum", "model.argmax.eq", "targets.data.view_as"], "methods", ["None"], ["", "", "def", "evaluate_model", "(", "self", ",", "model_path", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Function used for evaluating a model\n\n        :param model_path: Path to a PyTorch model that needs to be evaluated. If None, current final model is used.\n        :type model_path: str\n        \"\"\"", "\n", "\n", "model", "=", "copy", ".", "deepcopy", "(", "self", ".", "model", ")", "\n", "if", "model_path", ":", "\n", "            ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ")", "\n", "\n", "", "model", ".", "eval", "(", ")", "\n", "test_loss", "=", "0", "\n", "correct", "=", "0", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "data", ",", "targets", "in", "self", ".", "test_loader", ":", "\n", "                ", "data", ",", "targets", "=", "data", ".", "to", "(", "self", ".", "device", ")", ",", "targets", ".", "to", "(", "self", ".", "device", ")", "\n", "outputs", "=", "model", "(", "data", ")", "\n", "\n", "if", "isinstance", "(", "outputs", ",", "tuple", ")", ":", "\n", "                    ", "outputs", "=", "outputs", "[", "0", "]", "\n", "\n", "", "test_loss", "+=", "self", ".", "loss_fn", "(", "outputs", ",", "targets", ")", ".", "item", "(", ")", "\n", "pred", "=", "outputs", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "correct", "+=", "pred", ".", "eq", "(", "targets", ".", "data", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "test_loss", "/=", "len", "(", "self", ".", "test_loader", ".", "dataset", ")", "\n", "test_acc", "=", "100.0", "*", "correct", "/", "len", "(", "self", ".", "test_loader", ".", "dataset", ")", "\n", "\n", "", "return", "test_loss", ",", "test_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.common.iterative_base_class.BaseIterativePruner.prune": [[153, 179], ["range", "print", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "iterative_base_class.BaseIterativePruner.finetune_model", "iterative_base_class.BaseIterativePruner.prune_model", "iterative_base_class.BaseIterativePruner.model.parameters"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.common.iterative_base_class.BaseIterativePruner.finetune_model", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.lottery_tickets.lottery_tickets.LotteryTicketsPruner.prune_model"], ["", "def", "prune", "(", "\n", "self", ",", "num_iterations", "=", "10", ",", "train_epochs", "=", "10", ",", "save_models", "=", "True", ",", "**", "prune_params", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Function used for facilitating the pruning pipeline\n\n        :param num_iterations: Number of iterations for pruning\n        :type num_iterations: int\n        :param train_epochs: Number of iterations for training per pruning iteration\n        :type train_epochs: int\n        :param save_models: True if validated models (per pruning iteration) need to be saved\n        :type save_models: bool\n        :param prune_params: Any additional parameters needed by the \"prune_model\" method (specific to pruning technique used)\n        \"\"\"", "\n", "\n", "for", "it", "in", "range", "(", "num_iterations", ")", ":", "\n", "            ", "print", "(", "\n", "\"======== Pruning Iteration {:} / {:} ========\"", ".", "format", "(", "\n", "it", "+", "1", ",", "num_iterations", "\n", ")", "\n", ")", "\n", "if", "not", "it", "==", "0", ":", "\n", "                ", "self", ".", "prune_model", "(", "**", "prune_params", ")", "\n", "", "self", ".", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ")", "\n", "self", ".", "finetune_model", "(", "\n", "train_epochs", ",", "save_models", ",", "f\"pruned_model_iteration_{it}.pt\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.common.iterative_base_class.BaseIterativePruner.prune_model": [[181, 188], ["None"], "methods", ["None"], ["", "", "def", "prune_model", "(", "self", ",", "**", "prune_params", ")", ":", "\n", "        ", "\"\"\"\n        Function used to implement the pruning technique.\n        Needs to zero parameters of the model that are pruned by the technique.\n        \"\"\"", "\n", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.common.iterative_base_class.BaseIterativePruner.get_pruning_statistics": [[189, 225], ["copy.deepcopy", "copy.deepcopy.named_parameters", "round", "copy.deepcopy.load_state_dict", "p.data.cpu().numpy", "numpy.count_nonzero", "numpy.prod", "print", "torch.load", "torch.load", "torch.load", "torch.load", "print", "p.data.cpu"], "methods", ["None"], ["", "def", "get_pruning_statistics", "(", "self", ",", "model_path", "=", "None", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Function used for priniting layer-wise pruning statistics\n\n        :param model_path: Path of the model whose statistics need to be displayed\n                            If None, statistics of the final model is displayed\n        :type model_path: str\n        :param verbose: If true, the entire statistics is printed\n        :type verbose: bool\n\n        :return alive: If model_path is specified, percentage of alive neurons is returned.\n                        If model_path is None and saved_models are available, returns a list\n                        containing alive neurons percentage for each saved model\n                        Else returns -1\n        :type alive: int or list\n        \"\"\"", "\n", "\n", "model", "=", "copy", ".", "deepcopy", "(", "self", ".", "model", ")", "\n", "if", "model_path", ":", "\n", "            ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_path", ")", ")", "\n", "", "nonzero", "=", "total", "=", "0", "\n", "for", "name", ",", "p", "in", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "tensor", "=", "p", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "nz_count", "=", "np", ".", "count_nonzero", "(", "tensor", ")", "\n", "total_params", "=", "np", ".", "prod", "(", "tensor", ".", "shape", ")", "\n", "nonzero", "+=", "nz_count", "\n", "total", "+=", "total_params", "\n", "if", "verbose", ":", "\n", "                ", "print", "(", "\n", "f\"{name:20} | nonzeros = {nz_count:7} / {total_params:7} ({100 * nz_count / total_params:6.2f}%) | total_pruned = {total_params - nz_count :7} | shape = {tensor.shape}\"", "\n", ")", "\n", "", "", "if", "verbose", ":", "\n", "            ", "print", "(", "\n", "f\"alive: {nonzero}, pruned : {total - nonzero}, total: {total}, Compression rate : {total/nonzero:10.2f}x  ({100 * (total-nonzero) / total:6.2f}% pruned)\"", "\n", ")", "\n", "", "return", "round", "(", "(", "nonzero", "/", "total", ")", "*", "100", ",", "1", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.common.base_class.BaseClass.__init__": [[28, 75], ["torch.KLDivLoss", "torch.KLDivLoss", "student_model.to", "loss_fn.to", "torch.CrossEntropyLoss().to", "torch.CrossEntropyLoss().to", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "torch.device", "torch.device", "torch.device", "torch.device", "teacher_model.to", "print", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.device", "torch.device", "torch.device", "torch.device", "print", "torch.device", "torch.device", "torch.device", "torch.device"], "methods", ["None"], ["self", ",", "\n", "model", ",", "\n", "qconfig", ",", "\n", "train_loader", "=", "None", ",", "\n", "test_loader", "=", "None", ",", "\n", "optimizer", "=", "None", ",", "\n", "criterion", "=", "None", ",", "\n", "device", "=", "torch", ".", "device", "(", "\"cpu\"", ")", ",", "\n", ")", ":", "\n", "        ", "self", ".", "model", "=", "model", "\n", "self", ".", "quantized_model", "=", "model", "\n", "self", ".", "qconfig", "=", "qconfig", "\n", "self", ".", "train_loader", "=", "train_loader", "\n", "self", ".", "test_loader", "=", "test_loader", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "self", ".", "criterion", "=", "criterion", "\n", "self", ".", "device", "=", "device", "\n", "\n", "", "def", "quantize", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Function used for quantization\n        \"\"\"", "\n", "\n", "raise", "NotImplementedError", "\n", "\n", "", "def", "get_model_sizes", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Function for printing sizes of the original and quantized model\n        \"\"\"", "\n", "\n", "original_size", "=", "self", ".", "_get_size_of_model", "(", "self", ".", "model", ")", "\n", "quantized_size", "=", "self", ".", "_get_size_of_model", "(", "self", ".", "quantized_model", ")", "\n", "\n", "print", "(", "\"-\"", "*", "80", ")", "\n", "print", "(", "f\"Size of original model (MB): {original_size}\"", ")", "\n", "print", "(", "f\"Size of quantized_model (MB): {quantized_size}\"", ")", "\n", "\n", "", "def", "get_performance_statistics", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Function used for reporting inference performance of original and quantized models\n        Note that performance here referes to the following:\n        1. Accuracy achieved on the testset\n        2. Time taken for evaluating on the testset\n        \"\"\"", "\n", "\n", "acc", ",", "elapsed", "=", "self", ".", "_time_model_evaluation", "(", "self", ".", "model", ")", "\n", "print", "(", "f\"Original Model: Acc: {acc} | Time: {elapsed}s\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.common.base_class.BaseClass.train_teacher": [[76, 156], ["base_class.BaseClass.teacher_model.train", "len", "copy.deepcopy", "os.path.dirname", "print", "range", "base_class.BaseClass.teacher_model.load_state_dict", "base_class.BaseClass.teacher_model.state_dict", "os.path.exists", "os.makedirs", "base_class.BaseClass.evaluate", "loss_arr.append", "print", "base_class.BaseClass.post_epoch_call", "torch.save", "torch.save", "torch.save", "torch.save", "matplotlib.plot", "data.to.to.to", "label.to.to.to", "base_class.BaseClass.teacher_model", "isinstance", "base_class.BaseClass.argmax", "base_class.BaseClass.argmax.eq().sum().item", "base_class.BaseClass.ce_fn", "base_class.BaseClass.optimizer_teacher.zero_grad", "base_class.BaseClass.backward", "base_class.BaseClass.optimizer_teacher.step", "base_class.BaseClass.item", "copy.deepcopy", "base_class.BaseClass.writer.add_scalar", "base_class.BaseClass.writer.add_scalar", "base_class.BaseClass.writer.add_scalar", "base_class.BaseClass.teacher_model.state_dict", "base_class.BaseClass.teacher_model.state_dict", "base_class.BaseClass.argmax.eq().sum", "base_class.BaseClass.argmax.eq", "label.to.to.view_as"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.self_training.SelfTraining.evaluate", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.mean_teacher.mean_teacher.MeanTeacher.post_epoch_call"], ["acc", ",", "elapsed", "=", "self", ".", "_time_model_evaluation", "(", "self", ".", "quantized_model", ")", "\n", "print", "(", "f\"Quantized Model: Acc: {acc} | Time: {elapsed}s\"", ")", "\n", "\n", "", "def", "_get_size_of_model", "(", "self", ",", "model", ")", ":", "\n", "        ", "\"\"\"\n        Function used for fetching size of a model\n\n        :param model: Model\n        :type model: torch.nn.Module\n        \"\"\"", "\n", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "\"temp.p\"", ")", "\n", "model_size", "=", "os", ".", "path", ".", "getsize", "(", "\"temp.p\"", ")", "/", "1e6", "\n", "os", ".", "remove", "(", "\"temp.p\"", ")", "\n", "return", "model_size", "\n", "\n", "", "def", "_time_model_evaluation", "(", "self", ",", "model", ")", ":", "\n", "        ", "\"\"\"\n        Function used for fetching time taken by the model for inference\n\n        :param model: Model\n        :type model: torch.nn.Module\n        \"\"\"", "\n", "\n", "s", "=", "time", ".", "time", "(", ")", "\n", "acc", "=", "self", ".", "_evaluate_model", "(", "model", ")", "\n", "elapsed", "=", "time", ".", "time", "(", ")", "-", "s", "\n", "return", "acc", ",", "elapsed", "\n", "\n", "", "def", "_evaluate_model", "(", "self", ",", "model", ")", ":", "\n", "        ", "\"\"\"\n        Function used for evaluating the model\n\n        :param model: Model\n        :type model: torch.nn.Module\n        \"\"\"", "\n", "\n", "model", ".", "eval", "(", ")", "\n", "correct", "=", "0", "\n", "len_dataset", "=", "len", "(", "self", ".", "test_loader", ".", "dataset", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "image", ",", "target", "in", "self", ".", "test_loader", ":", "\n", "                ", "output", "=", "model", "(", "image", ")", "\n", "\n", "if", "isinstance", "(", "output", ",", "tuple", ")", ":", "\n", "                    ", "output", "=", "output", "[", "0", "]", "\n", "\n", "", "pred", "=", "output", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "", "return", "correct", "/", "len_dataset", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.common.base_class.BaseClass._train_student": [[157, 240], ["base_class.BaseClass.teacher_model.eval", "base_class.BaseClass.student_model.train", "len", "copy.deepcopy", "os.path.dirname", "print", "range", "base_class.BaseClass.student_model.load_state_dict", "base_class.BaseClass.student_model.state_dict", "os.path.exists", "os.makedirs", "base_class.BaseClass._evaluate_model", "loss_arr.append", "print", "torch.save", "torch.save", "torch.save", "torch.save", "matplotlib.plot", "data.to.to.to", "label.to.to.to", "base_class.BaseClass.student_model", "base_class.BaseClass.teacher_model", "base_class.BaseClass.calculate_kd_loss", "isinstance", "base_class.BaseClass.argmax", "base_class.BaseClass.argmax.eq().sum().item", "base_class.BaseClass.optimizer_student.zero_grad", "base_class.BaseClass.backward", "base_class.BaseClass.optimizer_student.step", "base_class.BaseClass.item", "copy.deepcopy", "base_class.BaseClass.writer.add_scalar", "base_class.BaseClass.writer.add_scalar", "base_class.BaseClass.writer.add_scalar", "base_class.BaseClass.student_model.state_dict", "base_class.BaseClass.student_model.state_dict", "base_class.BaseClass.argmax.eq().sum", "base_class.BaseClass.argmax.eq", "label.to.to.view_as"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.DML.dml.DML._evaluate_model", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.mean_teacher.mean_teacher.MeanTeacher.calculate_kd_loss"], []], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.common.base_class.BaseClass.train_student": [[241, 257], ["base_class.BaseClass._train_student"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.noisy.messy_collab.MessyCollab._train_student"], []], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.common.base_class.BaseClass.calculate_kd_loss": [[258, 268], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.common.base_class.BaseClass._evaluate_model": [[269, 301], ["model.eval", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "print", "print", "data.to.to.to", "target.to.to.to", "model", "isinstance", "outputs.append", "model.argmax", "model.argmax.eq().sum().item", "model.argmax.eq().sum", "model.argmax.eq", "target.to.to.view_as"], "methods", ["None"], []], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.common.base_class.BaseClass.evaluate": [[302, 315], ["base_class.BaseClass._evaluate_model", "copy.deepcopy().to", "copy.deepcopy().to", "copy.deepcopy", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.DML.dml.DML._evaluate_model"], []], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.common.base_class.BaseClass.get_parameters": [[316, 326], ["sum", "sum", "print", "print", "print", "p.numel", "p.numel", "base_class.BaseClass.teacher_model.parameters", "base_class.BaseClass.student_model.parameters"], "methods", ["None"], []], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.common.base_class.BaseClass.post_epoch_call": [[327, 336], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.weight_threshold.weight_threshold_pruning.WeightThresholdPruner.__init__": [[24, 33], ["torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "common.BaseIterativePruner.__init__"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.MeanResnet.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "model", ",", "\n", "train_loader", ",", "\n", "test_loader", ",", "\n", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ",", "\n", "device", "=", "\"cpu\"", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model", ",", "train_loader", ",", "test_loader", ",", "loss_fn", ",", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.weight_threshold.weight_threshold_pruning.WeightThresholdPruner.prune_model": [[34, 46], ["weight_threshold_pruning.WeightThresholdPruner.model.named_parameters", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "methods", ["None"], ["", "def", "prune_model", "(", "self", ",", "threshold", ")", ":", "\n", "        ", "\"\"\"\n        Function used for pruning\n\n        :param threshold: Weight threshold. Weights with magnitudes lesser than the threshold are pruned.\n            :type threshold: float\n        \"\"\"", "\n", "\n", "for", "name", ",", "param", "in", "self", ".", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "\"weight\"", "in", "name", ":", "\n", "                ", "param_mask", "=", "torch", ".", "abs", "(", "param", ")", "<", "threshold", "\n", "param", ".", "data", "[", "param_mask", "]", "=", "0.0", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.lottery_tickets.lottery_tickets.LotteryTicketsPruner.__init__": [[26, 37], ["torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "common.BaseIterativePruner.__init__", "copy.deepcopy", "lottery_tickets.LotteryTicketsPruner.model.state_dict"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.MeanResnet.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "model", ",", "\n", "train_loader", ",", "\n", "test_loader", ",", "\n", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ",", "\n", "device", "=", "\"cpu\"", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model", ",", "train_loader", ",", "test_loader", ",", "loss_fn", ",", "device", ")", "\n", "\n", "self", ".", "initial_state_dict", "=", "copy", ".", "deepcopy", "(", "self", ".", "model", ".", "state_dict", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.lottery_tickets.lottery_tickets.LotteryTicketsPruner.prune_model": [[38, 57], ["lottery_tickets.LotteryTicketsPruner.model.named_parameters", "param.data.cpu().numpy", "numpy.percentile", "numpy.where", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "abs", "param.data.cpu", "numpy.nonzero", "abs", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "prune_model", "(", "self", ",", "prune_percent", "=", "10", ")", ":", "\n", "        ", "\"\"\"\n        Function used for pruning\n\n        :param prune_percent: Pruning percent per iteration (percentage of alive weights to zero per pruning iteration)\n        :type prune_percent: int\n        \"\"\"", "\n", "\n", "for", "name", ",", "param", "in", "self", ".", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "\"weight\"", "in", "name", ":", "\n", "                ", "param_data", "=", "param", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "alive", "=", "param_data", "[", "np", ".", "nonzero", "(", "param_data", ")", "]", "\n", "percentile", "=", "np", ".", "percentile", "(", "abs", "(", "alive", ")", ",", "prune_percent", ")", "\n", "new_param_data", "=", "np", ".", "where", "(", "\n", "abs", "(", "param_data", ")", "<", "percentile", ",", "0", ",", "self", ".", "initial_state_dict", "[", "name", "]", "\n", ")", "\n", "param", ".", "data", "=", "torch", ".", "from_numpy", "(", "new_param_data", ")", ".", "to", "(", "param", ".", "device", ")", "\n", "", "if", "\"bias\"", "in", "name", ":", "\n", "                ", "param", ".", "data", "=", "self", ".", "initial_state_dict", "[", "name", "]", "\n", "", "", "", "", ""]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.utils.bert.get_bert_dataloader": [[19, 42], ["bert.df_to_bert_dataset", "torch.utils.data.SequentialSampler", "torch.utils.data.DataLoader", "torch.utils.data.SequentialSampler", "torch.utils.data.DataLoader", "torch.utils.data.RandomSampler", "torch.utils.data.DataLoader"], "function", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.utils.bert.df_to_bert_dataset"], ["def", "get_bert_dataloader", "(", "df", ",", "tokenizer", ",", "max_seq_length", "=", "64", ",", "batch_size", "=", "16", ",", "mode", "=", "\"train\"", ")", ":", "\n", "    ", "\"\"\"\n    Helper function for generating dataloaders for BERT\n    \"\"\"", "\n", "\n", "dataset", "=", "df_to_bert_dataset", "(", "df", ",", "max_seq_length", ",", "tokenizer", ")", "\n", "\n", "if", "mode", "==", "\"validate\"", ":", "\n", "        ", "val_sampler", "=", "SequentialSampler", "(", "dataset", ")", "\n", "val_loader", "=", "DataLoader", "(", "dataset", ",", "sampler", "=", "val_sampler", ",", "batch_size", "=", "batch_size", ")", "\n", "return", "val_loader", "\n", "\n", "", "if", "mode", "==", "\"distill\"", ":", "\n", "        ", "distill_sampler", "=", "SequentialSampler", "(", "dataset", ")", "\n", "distill_loader", "=", "DataLoader", "(", "\n", "dataset", ",", "sampler", "=", "distill_sampler", ",", "batch_size", "=", "batch_size", "\n", ")", "\n", "return", "distill_loader", "\n", "\n", "", "elif", "mode", "==", "\"train\"", ":", "\n", "        ", "train_sampler", "=", "RandomSampler", "(", "dataset", ")", "\n", "train_loader", "=", "DataLoader", "(", "dataset", ",", "sampler", "=", "train_sampler", ",", "batch_size", "=", "batch_size", ")", "\n", "return", "train_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.utils.bert.df_to_bert_format": [[44, 70], ["torch.cat", "torch.cat", "torch.tensor", "tokenizer.encode_plus", "torch.cat.append", "torch.cat.append"], "function", ["None"], ["", "", "def", "df_to_bert_format", "(", "df", ",", "max_length", ",", "tokenizer", ")", ":", "\n", "    ", "sentences", "=", "df", ".", "iloc", "[", ":", ",", "0", "]", ".", "values", "\n", "labels", "=", "df", ".", "iloc", "[", ":", ",", "1", "]", ".", "values", "\n", "\n", "input_ids", "=", "[", "]", "\n", "attention_masks", "=", "[", "]", "\n", "\n", "for", "sent", "in", "sentences", ":", "\n", "        ", "encoded_dict", "=", "tokenizer", ".", "encode_plus", "(", "\n", "sent", ",", "\n", "add_special_tokens", "=", "True", ",", "\n", "max_length", "=", "max_length", ",", "\n", "pad_to_max_length", "=", "True", ",", "\n", "truncation", "=", "True", ",", "\n", "return_attention_mask", "=", "True", ",", "\n", "return_tensors", "=", "\"pt\"", ",", "\n", ")", "\n", "\n", "input_ids", ".", "append", "(", "encoded_dict", "[", "\"input_ids\"", "]", ")", "\n", "attention_masks", ".", "append", "(", "encoded_dict", "[", "\"attention_mask\"", "]", ")", "\n", "\n", "", "input_ids", "=", "torch", ".", "cat", "(", "input_ids", ",", "dim", "=", "0", ")", "\n", "attention_masks", "=", "torch", ".", "cat", "(", "attention_masks", ",", "dim", "=", "0", ")", "\n", "labels", "=", "torch", ".", "tensor", "(", "labels", ")", "\n", "\n", "return", "input_ids", ",", "attention_masks", ",", "labels", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.utils.bert.df_to_bert_dataset": [[72, 76], ["bert.df_to_bert_format", "torch.utils.data.TensorDataset"], "function", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.utils.bert.df_to_bert_format"], ["", "def", "df_to_bert_dataset", "(", "df", ",", "max_length", ",", "tokenizer", ")", ":", "\n", "    ", "input_ids", ",", "attention_masks", ",", "labels", "=", "df_to_bert_format", "(", "df", ",", "max_length", ",", "tokenizer", ")", "\n", "dataset", "=", "TensorDataset", "(", "input_ids", ",", "attention_masks", ",", "labels", ")", "\n", "return", "dataset", "\n", "", ""]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.utils.mock_model.MockImageClassifier.__init__": [[6, 13], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "isinstance", "isinstance"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.MeanResnet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "n_classes", ",", "n_channels", "=", "3", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "if", "not", "isinstance", "(", "size", ",", "list", ")", "and", "not", "isinstance", "(", "size", ",", "tuple", ")", ":", "\n", "            ", "size", "=", "(", "size", ",", "size", ")", "\n", "\n", "", "self", ".", "model", "=", "nn", ".", "Linear", "(", "size", "[", "0", "]", "*", "size", "[", "1", "]", "*", "n_channels", ",", "n_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.utils.mock_model.MockImageClassifier.forward": [[14, 17], ["torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "mock_model.MockImageClassifier.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "return", "self", ".", "model", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.utils.mock_data.MockVisionDataset.__init__": [[6, 15], ["torch.randn", "torch.randint", "isinstance", "isinstance"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "size", ",", "n_classes", ",", "length", ",", "n_channels", ")", ":", "\n", "\n", "        ", "self", ".", "length", "=", "length", "\n", "\n", "if", "not", "isinstance", "(", "size", ",", "list", ")", "and", "not", "isinstance", "(", "size", ",", "tuple", ")", ":", "\n", "            ", "size", "=", "(", "size", ",", "size", ")", "\n", "\n", "", "self", ".", "imgs", "=", "torch", ".", "randn", "(", "length", ",", "n_channels", ",", "*", "size", ")", "\n", "self", ".", "labels", "=", "torch", ".", "randint", "(", "0", ",", "n_classes", ",", "(", "length", ",", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.utils.mock_data.MockVisionDataset.__len__": [[16, 18], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.utils.mock_data.MockVisionDataset.__getitem__": [[19, 21], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "return", "self", ".", "imgs", "[", "idx", "]", ",", "self", ".", "labels", "[", "idx", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.BERT2LSTM.bert2lstm.BERT2LSTM.__init__": [[33, 83], ["transformers.BertForSequenceClassification.from_pretrained", "transformers.AdamW", "KD_Lib.KD.common.BaseClass.__init__", "bert2lstm.BERT2LSTM.set_seed", "transformers.BertTokenizer.from_pretrained", "transformers.BertForSequenceClassification.from_pretrained.parameters"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.MeanResnet.__init__", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.BERT2LSTM.utils.set_seed"], ["def", "__init__", "(", "\n", "self", ",", "\n", "student_model", ",", "\n", "distill_train_loader", ",", "\n", "distill_val_loader", ",", "\n", "optimizer_student", ",", "\n", "train_df", ",", "\n", "val_df", ",", "\n", "num_classes", "=", "2", ",", "\n", "seed", "=", "42", ",", "\n", "distil_weight", "=", "0.5", ",", "\n", "device", "=", "\"cpu\"", ",", "\n", "log", "=", "False", ",", "\n", "logdir", "=", "\"./Experiments\"", ",", "\n", "max_seq_length", "=", "128", ",", "\n", ")", ":", "\n", "\n", "        ", "teacher_model", "=", "BertForSequenceClassification", ".", "from_pretrained", "(", "\n", "\"bert-base-uncased\"", ",", "\n", "num_labels", "=", "num_classes", ",", "\n", "output_attentions", "=", "False", ",", "\n", "output_hidden_states", "=", "False", ",", "\n", ")", "\n", "\n", "optimizer_teacher", "=", "AdamW", "(", "teacher_model", ".", "parameters", "(", ")", ",", "lr", "=", "2e-5", ",", "eps", "=", "1e-8", ")", "\n", "\n", "super", "(", "BERT2LSTM", ",", "self", ")", ".", "__init__", "(", "\n", "teacher_model", ",", "\n", "student_model", ",", "\n", "distill_train_loader", ",", "\n", "distill_val_loader", ",", "\n", "optimizer_teacher", ",", "\n", "optimizer_student", ",", "\n", "None", ",", "\n", "None", ",", "\n", "distil_weight", ",", "\n", "device", ",", "\n", "log", ",", "\n", "logdir", ",", "\n", ")", "\n", "\n", "self", ".", "set_seed", "(", "42", ")", "\n", "\n", "self", ".", "train_df", ",", "self", ".", "val_df", "=", "train_df", ",", "val_df", "\n", "\n", "self", ".", "bert_tokenizer", "=", "BertTokenizer", ".", "from_pretrained", "(", "\n", "\"bert-base-uncased\"", ",", "do_lower_case", "=", "True", "\n", ")", "\n", "\n", "self", ".", "max_seq_length", "=", "max_seq_length", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.BERT2LSTM.bert2lstm.BERT2LSTM.set_seed": [[84, 89], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all"], "methods", ["None"], ["", "def", "set_seed", "(", "self", ",", "seed", ")", ":", "\n", "        ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.BERT2LSTM.bert2lstm.BERT2LSTM._get_teacher_dataloaders": [[90, 98], ["KD_Lib.KD.text.utils.get_bert_dataloader"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.utils.bert.get_bert_dataloader"], ["", "def", "_get_teacher_dataloaders", "(", "self", ",", "batch_size", "=", "16", ",", "mode", "=", "\"train\"", ")", ":", "\n", "        ", "\"\"\"\n        Helper function for generating dataloaders for the teacher\n        \"\"\"", "\n", "df", "=", "self", ".", "val_df", "if", "(", "mode", "==", "\"validate\"", ")", "else", "self", ".", "train_df", "\n", "\n", "return", "get_bert_dataloader", "(", "\n", "df", ",", "self", ".", "bert_tokenizer", ",", "self", ".", "max_seq_length", ",", "batch_size", ",", "mode", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.BERT2LSTM.bert2lstm.BERT2LSTM.calculate_kd_loss": [[100, 117], ["torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.MSELoss", "bert2lstm.BERT2LSTM.criterion_ce", "bert2lstm.BERT2LSTM.criterion_mse"], "methods", ["None"], ["", "def", "calculate_kd_loss", "(", "self", ",", "y_pred_student", ",", "y_pred_teacher", ",", "y_true", ")", ":", "\n", "        ", "\"\"\"\n        Function used for calculating the KD loss during distillation\n\n        :param y_pred_student (torch.FloatTensor): Prediction made by the student model\n        :param y_pred_teacher (torch.FloatTensor): Prediction made by the teacher model\n        :param y_true (torch.FloatTensor): Original label\n        \"\"\"", "\n", "\n", "teacher_out", "=", "y_pred_teacher", "\n", "student_out", "=", "y_pred_student", "\n", "self", ".", "criterion_ce", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "criterion_mse", "=", "torch", ".", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "loss", "=", "(", "1", "-", "self", ".", "distil_weight", ")", "*", "self", ".", "criterion_ce", "(", "student_out", ",", "y_true", ")", "\n", "loss", "+=", "(", "self", ".", "distil_weight", ")", "*", "self", ".", "criterion_mse", "(", "teacher_out", ",", "student_out", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.BERT2LSTM.bert2lstm.BERT2LSTM.train_teacher": [[118, 224], ["bert2lstm.BERT2LSTM._get_teacher_dataloaders", "bert2lstm.BERT2LSTM.teacher_model.to", "bert2lstm.BERT2LSTM.teacher_model.train", "len", "copy.deepcopy", "print", "range", "bert2lstm.BERT2LSTM.teacher_model.load_state_dict", "bert2lstm.BERT2LSTM.teacher_model.state_dict", "print", "print", "enumerate", "print", "bert2lstm.BERT2LSTM.evaluate_teacher", "loss_arr.append", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "matplotlib.plot", "batch[].to", "batch[].to", "batch[].to", "bert2lstm.BERT2LSTM.optimizer_teacher.zero_grad", "bert2lstm.BERT2LSTM.teacher_model", "loss.item", "logits.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "batch[].to.to().numpy", "numpy.argmax().flatten", "batch[].to.to().numpy.flatten", "numpy.sum", "loss.backward", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "torch.nn.utils.clip_grad_norm_", "bert2lstm.BERT2LSTM.optimizer_teacher.step", "copy.deepcopy", "bert2lstm.BERT2LSTM.writer.add_scalar", "bert2lstm.BERT2LSTM.writer.add_scalar", "bert2lstm.BERT2LSTM.writer.add_scalar", "bert2lstm.BERT2LSTM.teacher_model.state_dict", "print", "bert2lstm.BERT2LSTM.teacher_model.parameters", "bert2lstm.BERT2LSTM.teacher_model.state_dict", "logits.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "batch[].to.to", "numpy.argmax", "len", "logits.detach().cpu().numpy.detach().cpu().numpy.detach"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.BERT2LSTM.bert2lstm.BERT2LSTM._get_teacher_dataloaders", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.BERT2LSTM.bert2lstm.BERT2LSTM.evaluate_teacher"], ["", "def", "train_teacher", "(", "\n", "self", ",", "\n", "epochs", "=", "1", ",", "\n", "plot_losses", "=", "True", ",", "\n", "save_model", "=", "True", ",", "\n", "save_model_pth", "=", "\"./models/teacher.pt\"", ",", "\n", "train_batch_size", "=", "16", ",", "\n", "batch_print_freq", "=", "40", ",", "\n", "val_batch_size", "=", "16", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Function that will be training the teacher\n\n        :param epochs (int): Number of epochs you want to train the teacher\n        :param plot_losses (bool): True if you want to plot the losses\n        :param save_model (bool): True if you want to save the teacher model\n        :param save_model_pth (str): Path where you want to store the teacher model\n        :param train_batch_size (int): Batch size paramter for generating dataloaders\n        :param batch_print_freq (int): Frequency at which batch number needs to be printed per epoch\n        \"\"\"", "\n", "self", ".", "teacher_train_loader", "=", "self", ".", "_get_teacher_dataloaders", "(", "\n", "train_batch_size", ",", "mode", "=", "\"train\"", "\n", ")", "\n", "\n", "self", ".", "teacher_model", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "teacher_model", ".", "train", "(", ")", "\n", "\n", "# training_stats = []", "\n", "loss_arr", "=", "[", "]", "\n", "\n", "length_of_dataset", "=", "len", "(", "self", ".", "teacher_train_loader", ".", "dataset", ")", "\n", "best_acc", "=", "0.0", "\n", "self", ".", "best_teacher_model_weights", "=", "deepcopy", "(", "self", ".", "teacher_model", ".", "state_dict", "(", ")", ")", "\n", "\n", "print", "(", "\"Training Teacher... \"", ")", "\n", "\n", "for", "ep", "in", "range", "(", "0", ",", "epochs", ")", ":", "\n", "            ", "print", "(", "\"\"", ")", "\n", "print", "(", "\"======== Epoch {:} / {:} ========\"", ".", "format", "(", "ep", "+", "1", ",", "epochs", ")", ")", "\n", "\n", "epoch_loss", "=", "0.0", "\n", "correct", "=", "0", "\n", "\n", "for", "step", ",", "batch", "in", "enumerate", "(", "self", ".", "teacher_train_loader", ")", ":", "\n", "                ", "if", "step", "%", "(", "batch_print_freq", ")", "==", "0", "and", "not", "step", "==", "0", ":", "\n", "                    ", "print", "(", "\n", "\"  Batch {:>5,}  of  {:>5,}.\"", ".", "format", "(", "\n", "step", ",", "len", "(", "self", ".", "teacher_train_loader", ")", "\n", ")", "\n", ")", "\n", "\n", "", "b_input_ids", "=", "batch", "[", "0", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "b_input_mask", "=", "batch", "[", "1", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "b_labels", "=", "batch", "[", "2", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "optimizer_teacher", ".", "zero_grad", "(", ")", "\n", "\n", "loss", ",", "logits", "=", "self", ".", "teacher_model", "(", "\n", "b_input_ids", ",", "\n", "token_type_ids", "=", "None", ",", "\n", "attention_mask", "=", "b_input_mask", ",", "\n", "labels", "=", "b_labels", ",", "\n", ")", "\n", "\n", "epoch_loss", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "logits", "=", "logits", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "label_ids", "=", "b_labels", ".", "to", "(", "\"cpu\"", ")", ".", "numpy", "(", ")", "\n", "preds", "=", "np", ".", "argmax", "(", "logits", ",", "axis", "=", "1", ")", ".", "flatten", "(", ")", "\n", "labels", "=", "label_ids", ".", "flatten", "(", ")", "\n", "correct", "+=", "np", ".", "sum", "(", "preds", "==", "labels", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# For preventing exploding gradients", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "teacher_model", ".", "parameters", "(", ")", ",", "1.0", ")", "\n", "\n", "self", ".", "optimizer_teacher", ".", "step", "(", ")", "\n", "\n", "", "epoch_acc", "=", "correct", "/", "length_of_dataset", "\n", "print", "(", "f\"Loss: {epoch_loss} | Accuracy: {epoch_acc}\"", ")", "\n", "\n", "_", ",", "epoch_val_acc", "=", "self", ".", "evaluate_teacher", "(", "val_batch_size", ")", "\n", "\n", "if", "epoch_val_acc", ">", "best_acc", ":", "\n", "                ", "best_acc", "=", "epoch_val_acc", "\n", "self", ".", "best_teacher_model_weights", "=", "deepcopy", "(", "\n", "self", ".", "teacher_model", ".", "state_dict", "(", ")", "\n", ")", "\n", "\n", "", "if", "self", ".", "log", ":", "\n", "                ", "self", ".", "writer", ".", "add_scalar", "(", "\"Training loss/Teacher\"", ",", "epoch_loss", ",", "epochs", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "\"Training accuracy/Teacher\"", ",", "epoch_acc", ",", "epochs", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "\n", "\"Validation accuracy/Teacher\"", ",", "epoch_val_acc", ",", "epochs", "\n", ")", "\n", "\n", "", "loss_arr", ".", "append", "(", "epoch_loss", ")", "\n", "\n", "", "self", ".", "teacher_model", ".", "load_state_dict", "(", "self", ".", "best_teacher_model_weights", ")", "\n", "\n", "if", "save_model", ":", "\n", "            ", "torch", ".", "save", "(", "self", ".", "teacher_model", ".", "state_dict", "(", ")", ",", "save_model_pth", ")", "\n", "\n", "", "if", "plot_losses", ":", "\n", "            ", "plt", ".", "plot", "(", "loss_arr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.BERT2LSTM.bert2lstm.BERT2LSTM.train_student": [[225, 340], ["bert2lstm.BERT2LSTM._get_teacher_dataloaders", "print", "bert2lstm.BERT2LSTM.teacher_model.eval", "bert2lstm.BERT2LSTM.teacher_model.to", "bert2lstm.BERT2LSTM.student_model.train", "len", "copy.deepcopy", "bert2lstm.BERT2LSTM.student_model.to", "print", "range", "bert2lstm.BERT2LSTM.student_model.load_state_dict", "batch[].to", "batch[].to", "batch[].to", "bert2lstm.BERT2LSTM.student_model.state_dict", "print", "print", "zip", "print", "bert2lstm.BERT2LSTM.evaluate_student", "loss_arr.append", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "matplotlib.plot", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "bert2lstm.BERT2LSTM.teacher_model", "logits.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "y_pred_teacher.append", "data.to.to.to", "data_len.to.to.to", "label.to.to.to", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor.to", "torch.tensor.to", "torch.tensor.to", "bert2lstm.BERT2LSTM.optimizer_student.zero_grad", "bert2lstm.BERT2LSTM.student_model().squeeze", "bert2lstm.BERT2LSTM.calculate_kd_loss", "bert2lstm.BERT2LSTM.argmax", "bert2lstm.BERT2LSTM.argmax.eq().sum().item", "bert2lstm.BERT2LSTM.backward", "bert2lstm.BERT2LSTM.optimizer_student.step", "copy.deepcopy", "bert2lstm.BERT2LSTM.writer.add_scalar", "bert2lstm.BERT2LSTM.writer.add_scalar", "bert2lstm.BERT2LSTM.writer.add_scalar", "bert2lstm.BERT2LSTM.student_model.state_dict", "bert2lstm.BERT2LSTM.student_model.state_dict", "logits.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "bert2lstm.BERT2LSTM.student_model", "bert2lstm.BERT2LSTM.argmax.eq().sum", "logits.detach().cpu().numpy.detach().cpu().numpy.detach", "bert2lstm.BERT2LSTM.argmax.eq", "label.to.to.view_as"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.BERT2LSTM.bert2lstm.BERT2LSTM._get_teacher_dataloaders", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.BERT2LSTM.bert2lstm.BERT2LSTM.evaluate_student", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.mean_teacher.mean_teacher.MeanTeacher.calculate_kd_loss"], ["", "", "def", "train_student", "(", "\n", "self", ",", "\n", "epochs", "=", "10", ",", "\n", "plot_losses", "=", "True", ",", "\n", "save_model", "=", "True", ",", "\n", "save_model_pth", "=", "\"./models/student.pth\"", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Function that will be training the student\n\n        :param epochs (int): Number of epochs you want to train the teacher\n        :param plot_losses (bool): True if you want to plot the losses\n        :param save_model (bool): True if you want to save the student model\n        :param save_model_pth (str): Path where you want to save the student model\n        \"\"\"", "\n", "\n", "self", ".", "teacher_distill_loader", "=", "self", ".", "_get_teacher_dataloaders", "(", "\n", "batch_size", "=", "self", ".", "train_loader", ".", "batch_size", ",", "mode", "=", "\"distill\"", "\n", ")", "\n", "\n", "y_pred_teacher", "=", "[", "]", "\n", "\n", "print", "(", "\"Obtaining teacher predictions...\"", ")", "\n", "self", ".", "teacher_model", ".", "eval", "(", ")", "\n", "self", ".", "teacher_model", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "for", "batch", "in", "self", ".", "teacher_distill_loader", ":", "\n", "            ", "b_input_ids", "=", "batch", "[", "0", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "b_input_mask", "=", "batch", "[", "1", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "b_labels", "=", "batch", "[", "2", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "(", "loss", ",", "logits", ")", "=", "self", ".", "teacher_model", "(", "\n", "b_input_ids", ",", "\n", "token_type_ids", "=", "None", ",", "\n", "attention_mask", "=", "b_input_mask", ",", "\n", "labels", "=", "b_labels", ",", "\n", ")", "\n", "\n", "logits", "=", "logits", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "y_pred_teacher", ".", "append", "(", "logits", ")", "\n", "\n", "", "", "self", ".", "student_model", ".", "train", "(", ")", "\n", "\n", "loss_arr", "=", "[", "]", "\n", "length_of_dataset", "=", "len", "(", "self", ".", "train_loader", ".", "dataset", ")", "\n", "best_acc", "=", "0.0", "\n", "self", ".", "best_student_model_weights", "=", "deepcopy", "(", "self", ".", "student_model", ".", "state_dict", "(", ")", ")", "\n", "self", ".", "student_model", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "print", "(", "\"\\nTraining student...\"", ")", "\n", "\n", "for", "ep", "in", "range", "(", "epochs", ")", ":", "\n", "            ", "print", "(", "\"\"", ")", "\n", "print", "(", "\"======== Epoch {:} / {:} ========\"", ".", "format", "(", "ep", "+", "1", ",", "epochs", ")", ")", "\n", "\n", "epoch_loss", "=", "0.0", "\n", "correct", "=", "0", "\n", "\n", "for", "(", "data", ",", "data_len", ",", "label", ")", ",", "bert_prob", "in", "zip", "(", "\n", "self", ".", "train_loader", ",", "y_pred_teacher", "\n", ")", ":", "\n", "                ", "data", "=", "data", ".", "to", "(", "self", ".", "device", ")", "\n", "data_len", "=", "data_len", ".", "to", "(", "self", ".", "device", ")", "\n", "label", "=", "label", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "bert_prob", "=", "torch", ".", "tensor", "(", "bert_prob", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "teacher_out", "=", "bert_prob", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "optimizer_student", ".", "zero_grad", "(", ")", "\n", "\n", "student_out", "=", "self", ".", "student_model", "(", "data", ",", "data_len", ")", ".", "squeeze", "(", "1", ")", "\n", "\n", "loss", "=", "self", ".", "calculate_kd_loss", "(", "student_out", ",", "teacher_out", ",", "label", ")", "\n", "\n", "pred", "=", "student_out", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "correct", "+=", "pred", ".", "eq", "(", "label", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# ##For preventing exploding gradients", "\n", "# torch.nn.utils.clip_grad_norm_(self.student_model.parameters(), 1.0)", "\n", "\n", "self", ".", "optimizer_student", ".", "step", "(", ")", "\n", "\n", "epoch_loss", "+=", "loss", "\n", "\n", "", "epoch_acc", "=", "correct", "/", "length_of_dataset", "\n", "print", "(", "f\"Loss: {epoch_loss} | Accuracy: {epoch_acc}\"", ")", "\n", "\n", "_", ",", "epoch_val_acc", "=", "self", ".", "evaluate_student", "(", ")", "\n", "if", "epoch_val_acc", ">", "best_acc", ":", "\n", "                ", "best_acc", "=", "epoch_val_acc", "\n", "self", ".", "best_student_model_weights", "=", "deepcopy", "(", "\n", "self", ".", "student_model", ".", "state_dict", "(", ")", "\n", ")", "\n", "\n", "", "if", "self", ".", "log", ":", "\n", "                ", "self", ".", "writer", ".", "add_scalar", "(", "\"Training loss/Student\"", ",", "epoch_loss", ",", "epochs", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "\"Training accuracy/Student\"", ",", "epoch_acc", ",", "epochs", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "\n", "\"Validation accuracy/Student\"", ",", "epoch_val_acc", ",", "epochs", "\n", ")", "\n", "\n", "", "loss_arr", ".", "append", "(", "epoch_loss", ")", "\n", "print", "(", "f\"Epoch: {ep+1}, Loss: {epoch_loss}, Accuracy: {epoch_acc}\"", ")", "\n", "\n", "", "self", ".", "student_model", ".", "load_state_dict", "(", "self", ".", "best_student_model_weights", ")", "\n", "\n", "if", "save_model", ":", "\n", "            ", "torch", ".", "save", "(", "self", ".", "student_model", ".", "state_dict", "(", ")", ",", "save_model_pth", ")", "\n", "\n", "", "if", "plot_losses", ":", "\n", "            ", "plt", ".", "plot", "(", "loss_arr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.BERT2LSTM.bert2lstm.BERT2LSTM.evaluate_student": [[341, 371], ["bert2lstm.BERT2LSTM.student_model.eval", "bert2lstm.BERT2LSTM.student_model.to", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "print", "print", "data.to.to.to", "data_len.to.to.to", "target.to.to.to", "bert2lstm.BERT2LSTM.student_model().squeeze", "outputs.append", "bert2lstm.BERT2LSTM.argmax", "bert2lstm.BERT2LSTM.argmax.eq().sum().item", "bert2lstm.BERT2LSTM.student_model", "bert2lstm.BERT2LSTM.argmax.eq().sum", "bert2lstm.BERT2LSTM.argmax.eq", "target.to.to.view_as"], "methods", ["None"], ["", "", "def", "evaluate_student", "(", "self", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Function used for evaluating student\n\n        :param verbose (bool): True if the accuracy needs to be printed else False\n        \"\"\"", "\n", "\n", "self", ".", "student_model", ".", "eval", "(", ")", "\n", "self", ".", "student_model", ".", "to", "(", "self", ".", "device", ")", "\n", "length_of_dataset", "=", "len", "(", "self", ".", "val_loader", ".", "dataset", ")", "\n", "correct", "=", "0", "\n", "outputs", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "data", ",", "data_len", ",", "target", "in", "self", ".", "val_loader", ":", "\n", "                ", "data", "=", "data", ".", "to", "(", "self", ".", "device", ")", "\n", "data_len", "=", "data_len", ".", "to", "(", "self", ".", "device", ")", "\n", "target", "=", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "output", "=", "self", ".", "student_model", "(", "data", ",", "data_len", ")", ".", "squeeze", "(", "1", ")", "\n", "outputs", ".", "append", "(", "output", ")", "\n", "\n", "pred", "=", "output", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "", "accuracy", "=", "correct", "/", "length_of_dataset", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"-\"", "*", "80", ")", "\n", "print", "(", "f\"Accuracy: {accuracy}\"", ")", "\n", "\n", "", "return", "outputs", ",", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.BERT2LSTM.bert2lstm.BERT2LSTM.evaluate_teacher": [[372, 423], ["bert2lstm.BERT2LSTM._get_teacher_dataloaders", "bert2lstm.BERT2LSTM.teacher_model.to", "bert2lstm.BERT2LSTM.teacher_model.eval", "len", "print", "batch[].to", "batch[].to", "batch[].to", "print", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "bert2lstm.BERT2LSTM.teacher_model", "logits.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "batch[].to.to().numpy", "numpy.argmax().flatten", "batch[].to.to().numpy.flatten", "numpy.sum", "outputs.append", "logits.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "batch[].to.to", "numpy.argmax", "logits.detach().cpu().numpy.detach().cpu().numpy.detach"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.BERT2LSTM.bert2lstm.BERT2LSTM._get_teacher_dataloaders"], ["", "def", "evaluate_teacher", "(", "self", ",", "val_batch_size", "=", "16", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Function used for evaluating student\n\n        :param max_seq_length (int): Maximum sequence length paramter for generating dataloaders\n        :param val_batch_size (int): Batch size paramter for generating dataloaders\n        :param verbose (bool): True if the accuracy needs to be printed else False\n        \"\"\"", "\n", "\n", "self", ".", "teacher_val_loader", "=", "self", ".", "_get_teacher_dataloaders", "(", "\n", "val_batch_size", ",", "mode", "=", "\"validate\"", "\n", ")", "\n", "\n", "self", ".", "teacher_model", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "teacher_model", ".", "eval", "(", ")", "\n", "\n", "correct", "=", "0", "\n", "length_of_dataset", "=", "len", "(", "self", ".", "teacher_val_loader", ".", "dataset", ")", "\n", "\n", "print", "(", "\"Evaluating teacher...\"", ")", "\n", "outputs", "=", "[", "]", "\n", "\n", "for", "batch", "in", "self", ".", "teacher_val_loader", ":", "\n", "            ", "b_input_ids", "=", "batch", "[", "0", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "b_input_mask", "=", "batch", "[", "1", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "b_labels", "=", "batch", "[", "2", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "(", "loss", ",", "logits", ")", "=", "self", ".", "teacher_model", "(", "\n", "b_input_ids", ",", "\n", "token_type_ids", "=", "None", ",", "\n", "attention_mask", "=", "b_input_mask", ",", "\n", "labels", "=", "b_labels", ",", "\n", ")", "\n", "\n", "logits", "=", "logits", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "label_ids", "=", "b_labels", ".", "to", "(", "\"cpu\"", ")", ".", "numpy", "(", ")", "\n", "\n", "# out = F.softmax(logits, dim=1)", "\n", "preds", "=", "np", ".", "argmax", "(", "logits", ",", "axis", "=", "1", ")", ".", "flatten", "(", ")", "\n", "labels", "=", "label_ids", ".", "flatten", "(", ")", "\n", "\n", "correct", "+=", "np", ".", "sum", "(", "preds", "==", "labels", ")", "\n", "outputs", ".", "append", "(", "preds", ")", "\n", "\n", "", "", "accuracy", "=", "correct", "/", "length_of_dataset", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"-\"", "*", "80", ")", "\n", "print", "(", "f\"Accuracy: {accuracy}\"", ")", "\n", "\n", "", "return", "outputs", ",", "accuracy", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.BERT2LSTM.utils.InputExample.__init__": [[28, 33], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "guid", ",", "text_a", ",", "text_b", "=", "None", ",", "label", "=", "None", ")", ":", "\n", "        ", "self", ".", "guid", "=", "guid", "\n", "self", ".", "text_a", "=", "text_a", "\n", "self", ".", "text_b", "=", "text_b", "\n", "self", ".", "label", "=", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.BERT2LSTM.utils.InputFeatures.__init__": [[40, 45], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "input_ids", ",", "input_mask", ",", "segment_ids", ",", "label_ids", ")", ":", "\n", "        ", "self", ".", "input_ids", "=", "input_ids", "\n", "self", ".", "input_mask", "=", "input_mask", "\n", "self", ".", "segment_ids", "=", "segment_ids", "\n", "self", ".", "label_ids", "=", "label_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.BERT2LSTM.utils.example_to_feature": [[47, 94], ["tokenizer.convert_tokens_to_ids", "utils.InputFeatures", "tokenizer.tokenize", "len", "len", "len", "len", "len", "len", "len"], "function", ["None"], ["", "", "def", "example_to_feature", "(", "example_row", ")", ":", "\n", "    ", "\"\"\"\n    :param example_row: tuple (example, label_map, tokenizer, max_seq_length)\n    :return: InputFeatures\n    \"\"\"", "\n", "\n", "(", "example", ",", "label_map", ",", "tokenizer", ",", "max_seq_length", ")", "=", "example_row", "\n", "\n", "try", ":", "\n", "        ", "tokens_a", "=", "tokenizer", ".", "tokenize", "(", "example", ".", "text_a", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "tokens_a", "=", "[", "]", "\n", "\n", "# Account for [CLS] and [SEP] with \"- 2\"", "\n", "", "if", "len", "(", "tokens_a", ")", ">", "max_seq_length", "-", "2", ":", "\n", "        ", "tokens_a", "=", "tokens_a", "[", ":", "(", "max_seq_length", "-", "2", ")", "]", "\n", "\n", "", "tokens", "=", "tokens_a", "+", "[", "tokenizer", ".", "sep_token", "]", "\n", "segment_ids", "=", "[", "0", "]", "*", "len", "(", "tokens", ")", "\n", "\n", "tokens", "=", "[", "tokenizer", ".", "cls_token", "]", "+", "tokens", "\n", "segment_ids", "=", "[", "0", "]", "+", "segment_ids", "\n", "\n", "input_ids", "=", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokens", ")", "\n", "\n", "# The mask has 1 for real tokens and 0 for padding tokens. Only real", "\n", "# tokens are attended to.", "\n", "input_mask", "=", "[", "1", "]", "*", "len", "(", "input_ids", ")", "\n", "\n", "# Zero-pad up to the sequence length.", "\n", "padding_length", "=", "max_seq_length", "-", "len", "(", "input_ids", ")", "\n", "\n", "input_ids", "=", "input_ids", "+", "(", "[", "0", "]", "*", "padding_length", ")", "\n", "input_mask", "=", "input_mask", "+", "(", "[", "0", "]", "*", "padding_length", ")", "\n", "segment_ids", "=", "segment_ids", "+", "(", "[", "0", "]", "*", "padding_length", ")", "\n", "\n", "assert", "len", "(", "input_ids", ")", "==", "max_seq_length", "\n", "assert", "len", "(", "input_mask", ")", "==", "max_seq_length", "\n", "assert", "len", "(", "segment_ids", ")", "==", "max_seq_length", "\n", "\n", "label_id", "=", "label_map", "[", "example", ".", "label", "]", "\n", "\n", "return", "InputFeatures", "(", "\n", "input_ids", "=", "input_ids", ",", "\n", "input_mask", "=", "input_mask", ",", "\n", "segment_ids", "=", "segment_ids", ",", "\n", "label_ids", "=", "label_id", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.BERT2LSTM.utils.features_to_dataset": [[97, 111], ["torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.utils.data.TensorDataset"], "function", ["None"], ["", "def", "features_to_dataset", "(", "features", ")", ":", "\n", "    ", "\"\"\"\n    :param features: list InputFeatures\n    :return: TensorDataset\n    \"\"\"", "\n", "all_input_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "input_ids", "for", "f", "in", "features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_input_mask", "=", "torch", ".", "tensor", "(", "[", "f", ".", "input_mask", "for", "f", "in", "features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_segment_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "segment_ids", "for", "f", "in", "features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "all_label_ids", "=", "torch", ".", "tensor", "(", "[", "f", ".", "label_ids", "for", "f", "in", "features", "]", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "\n", "dataset", "=", "TensorDataset", "(", "\n", "all_input_ids", ",", "all_input_mask", ",", "all_segment_ids", ",", "all_label_ids", "\n", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.BERT2LSTM.utils.df_to_dataset": [[113, 143], ["pandas.DataFrame", "enumerate", "utils.features_to_dataset", "pd.DataFrame.T.to_dict().values", "examples.append", "contextlib.closing", "list", "p.terminate", "range", "df.iloc[].replace", "utils.InputExample", "enumerate", "multiprocessing.Pool", "tqdm.tqdm", "len", "pd.DataFrame.T.to_dict", "p.imap", "len"], "function", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.BERT2LSTM.utils.features_to_dataset"], ["", "def", "df_to_dataset", "(", "df", ",", "tokenizer", ",", "max_seq_length", ")", ":", "\n", "    ", "bert_df", "=", "pd", ".", "DataFrame", "(", "\n", "{", "\n", "\"id\"", ":", "range", "(", "len", "(", "df", ")", ")", ",", "\n", "\"label\"", ":", "df", ".", "iloc", "[", ":", ",", "1", "]", ",", "\n", "\"alpha\"", ":", "[", "\"a\"", "]", "*", "df", ".", "shape", "[", "0", "]", ",", "\n", "\"text\"", ":", "df", ".", "iloc", "[", ":", ",", "0", "]", ".", "replace", "(", "r\"\\n\"", ",", "\" \"", ",", "regex", "=", "True", ")", ",", "\n", "}", "\n", ")", "\n", "examples", "=", "[", "]", "\n", "for", "(", "i", ",", "line", ")", "in", "enumerate", "(", "bert_df", ".", "T", ".", "to_dict", "(", ")", ".", "values", "(", ")", ")", ":", "\n", "        ", "guid", "=", "\"%s-%s\"", "%", "(", "\"train\"", ",", "i", ")", "\n", "text_a", "=", "line", "[", "\"text\"", "]", "\n", "label", "=", "line", "[", "\"label\"", "]", "\n", "examples", ".", "append", "(", "\n", "InputExample", "(", "guid", "=", "guid", ",", "text_a", "=", "text_a", ",", "text_b", "=", "None", ",", "label", "=", "label", ")", "\n", ")", "\n", "\n", "", "label_map", "=", "{", "label", ":", "i", "for", "i", ",", "label", "in", "enumerate", "(", "[", "0", ",", "1", "]", ")", "}", "\n", "examples", "=", "[", "(", "example", ",", "label_map", ",", "tokenizer", ",", "max_seq_length", ")", "for", "example", "in", "examples", "]", "\n", "\n", "with", "closing", "(", "Pool", "(", "10", ")", ")", "as", "p", ":", "\n", "        ", "features", "=", "list", "(", "\n", "tqdm", "(", "\n", "p", ".", "imap", "(", "example_to_feature", ",", "examples", ",", "chunksize", "=", "100", ")", ",", "total", "=", "len", "(", "examples", ")", "\n", ")", "\n", ")", "\n", "p", ".", "terminate", "(", ")", "\n", "\n", "", "return", "features_to_dataset", "(", "features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.BERT2LSTM.utils.batch_to_inputs": [[145, 154], ["None"], "function", ["None"], ["", "def", "batch_to_inputs", "(", "batch", ")", ":", "\n", "    ", "inputs", "=", "{", "\n", "\"input_ids\"", ":", "batch", "[", "0", "]", ",", "\n", "\"attention_mask\"", ":", "batch", "[", "1", "]", ",", "\n", "\"token_type_ids\"", ":", "batch", "[", "2", "]", ",", "\n", "\"labels\"", ":", "batch", "[", "3", "]", ",", "\n", "}", "\n", "\n", "return", "inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.BERT2LSTM.utils.set_seed": [[156, 161], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.cuda.manual_seed_all"], "function", ["None"], ["", "def", "set_seed", "(", "seed", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.BERT2LSTM.utils.pad": [[163, 168], ["len", "len"], "function", ["None"], ["", "def", "pad", "(", "seq", ",", "max_len", ")", ":", "\n", "    ", "if", "len", "(", "seq", ")", "<", "max_len", ":", "\n", "        ", "seq", "=", "seq", "+", "[", "\"<pad>\"", "]", "*", "(", "max_len", "-", "len", "(", "seq", ")", ")", "\n", "\n", "", "return", "seq", "[", "0", ":", "max_len", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.BERT2LSTM.utils.to_indexes": [[170, 172], ["None"], "function", ["None"], ["", "def", "to_indexes", "(", "vocab", ",", "words", ")", ":", "\n", "    ", "return", "[", "vocab", ".", "stoi", "[", "w", "]", "for", "w", "in", "words", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.BERT2LSTM.utils.to_dataset": [[174, 179], ["torch.tensor", "torch.tensor", "torch.utils.data.TensorDataset"], "function", ["None"], ["", "def", "to_dataset", "(", "x", ",", "y_real", ")", ":", "\n", "    ", "torch_x", "=", "torch", ".", "tensor", "(", "x", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "# torch_y = torch.tensor(y, dtype=torch.float)", "\n", "torch_real_y", "=", "torch", ".", "tensor", "(", "y_real", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "return", "TensorDataset", "(", "torch_x", ",", "torch_real_y", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.BERT2LSTM.utils.get_essentials": [[181, 207], ["torchtext.legacy.data.Field", "data.Field.build_vocab", "utils.to_dataset", "torch.utils.data.SequentialSampler", "torch.utils.data.DataLoader", "t.split", "utils.pad", "utils.to_indexes"], "function", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.BERT2LSTM.utils.to_dataset", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.BERT2LSTM.utils.pad", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.BERT2LSTM.utils.to_indexes"], ["", "def", "get_essentials", "(", "train_df", ",", "max_seq_length", "=", "128", ",", "train_batch_size", "=", "16", ")", ":", "\n", "\n", "    ", "X", ",", "y", "=", "train_df", ".", "iloc", "[", ":", ",", "0", "]", ".", "values", ",", "train_df", ".", "iloc", "[", ":", ",", "1", "]", ".", "values", "\n", "\n", "text_field", "=", "data", ".", "Field", "(", ")", "\n", "text_field", ".", "build_vocab", "(", "X", ",", "max_size", "=", "10000", ")", "\n", "\n", "X_split", "=", "[", "t", ".", "split", "(", ")", "for", "t", "in", "X", "]", "\n", "\n", "# pad", "\n", "X_pad", "=", "[", "pad", "(", "s", ",", "max_seq_length", ")", "for", "s", "in", "X_split", "]", "\n", "\n", "# to index", "\n", "X_index", "=", "[", "to_indexes", "(", "text_field", ".", "vocab", ",", "s", ")", "for", "s", "in", "X_pad", "]", "\n", "\n", "train_dataset", "=", "to_dataset", "(", "X_index", ",", "y", ")", "\n", "\n", "train_sampler", "=", "SequentialSampler", "(", "train_dataset", ")", "\n", "train_loader", "=", "DataLoader", "(", "\n", "train_dataset", ",", "\n", "sampler", "=", "train_sampler", ",", "\n", "batch_size", "=", "train_batch_size", ",", "\n", "drop_last", "=", "True", ",", "\n", ")", "\n", "\n", "return", "text_field", ",", "train_loader", "\n", "", ""]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.RCO.rco.RCO.__init__": [[34, 68], ["torch.KLDivLoss", "torch.KLDivLoss", "torch.KLDivLoss", "torch.KLDivLoss", "KD_Lib.KD.common.BaseClass.__init__"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.MeanResnet.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "teacher_model", ",", "\n", "student_model", ",", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "optimizer_teacher", ",", "\n", "optimizer_student", ",", "\n", "loss_fn", "=", "nn", ".", "KLDivLoss", "(", ")", ",", "\n", "epoch_interval", "=", "5", ",", "\n", "temp", "=", "20.0", ",", "\n", "distil_weight", "=", "0.5", ",", "\n", "device", "=", "\"cpu\"", ",", "\n", "log", "=", "False", ",", "\n", "logdir", "=", "\"./Experiments\"", ",", "\n", ")", ":", "\n", "\n", "        ", "super", "(", "RCO", ",", "self", ")", ".", "__init__", "(", "\n", "teacher_model", ",", "\n", "student_model", ",", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "optimizer_teacher", ",", "\n", "optimizer_student", ",", "\n", "loss_fn", ",", "\n", "temp", ",", "\n", "distil_weight", ",", "\n", "device", ",", "\n", "log", ",", "\n", "logdir", ",", "\n", ")", "\n", "\n", "self", ".", "epoch_interval", "=", "epoch_interval", "\n", "self", ".", "anchors", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.RCO.rco.RCO.train_teacher": [[69, 144], ["rco.RCO.teacher_model.train", "len", "copy.deepcopy", "print", "range", "rco.RCO.teacher_model.load_state_dict", "rco.RCO.teacher_model.state_dict", "rco.RCO.evaluate", "loss_arr.append", "print", "rco.RCO.post_epoch_call", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "matplotlib.plot", "data.to.to.to", "label.to.to.to", "rco.RCO.teacher_model", "isinstance", "rco.RCO.argmax", "rco.RCO.argmax.eq().sum().item", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "rco.RCO.optimizer_teacher.zero_grad", "torch.cross_entropy.backward", "rco.RCO.optimizer_teacher.step", "rco.RCO.anchors.append", "copy.deepcopy", "rco.RCO.writer.add_scalar", "rco.RCO.writer.add_scalar", "rco.RCO.writer.add_scalar", "rco.RCO.teacher_model.state_dict", "copy.deepcopy", "rco.RCO.teacher_model.state_dict", "rco.RCO.argmax.eq().sum", "rco.RCO.argmax.eq", "label.to.to.view_as"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.self_training.SelfTraining.evaluate", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.mean_teacher.mean_teacher.MeanTeacher.post_epoch_call"], ["", "def", "train_teacher", "(", "\n", "self", ",", "\n", "epochs", "=", "20", ",", "\n", "plot_losses", "=", "True", ",", "\n", "save_model", "=", "True", ",", "\n", "save_model_pth", "=", "\"./models/teacher.pt\"", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Function that will be training the teacher\n\n        :param epochs (int): Number of epochs you want to train the teacher\n        :param plot_losses (bool): True if you want to plot the losses\n        :param save_model (bool): True if you want to save the teacher model\n        :param save_model_pth (str): Path where you want to store the teacher model\n        \"\"\"", "\n", "self", ".", "teacher_model", ".", "train", "(", ")", "\n", "loss_arr", "=", "[", "]", "\n", "length_of_dataset", "=", "len", "(", "self", ".", "train_loader", ".", "dataset", ")", "\n", "best_acc", "=", "0.0", "\n", "self", ".", "best_teacher_model_weights", "=", "deepcopy", "(", "self", ".", "teacher_model", ".", "state_dict", "(", ")", ")", "\n", "\n", "print", "(", "\"Training Teacher... \"", ")", "\n", "\n", "for", "ep", "in", "range", "(", "epochs", ")", ":", "\n", "            ", "epoch_loss", "=", "0.0", "\n", "correct", "=", "0", "\n", "for", "(", "data", ",", "label", ")", "in", "self", ".", "train_loader", ":", "\n", "                ", "data", "=", "data", ".", "to", "(", "self", ".", "device", ")", "\n", "label", "=", "label", ".", "to", "(", "self", ".", "device", ")", "\n", "out", "=", "self", ".", "teacher_model", "(", "data", ")", "\n", "\n", "if", "isinstance", "(", "out", ",", "tuple", ")", ":", "\n", "                    ", "out", "=", "out", "[", "0", "]", "\n", "\n", "", "pred", "=", "out", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "correct", "+=", "pred", ".", "eq", "(", "label", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "out", ",", "label", ")", "\n", "\n", "self", ".", "optimizer_teacher", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_teacher", ".", "step", "(", ")", "\n", "\n", "epoch_loss", "+=", "loss", "\n", "\n", "", "if", "(", "ep", "+", "1", ")", "%", "self", ".", "epoch_interval", "==", "0", "or", "(", "ep", "+", "1", ")", "==", "epochs", ":", "\n", "                ", "self", ".", "anchors", ".", "append", "(", "deepcopy", "(", "self", ".", "teacher_model", ")", ")", "\n", "\n", "", "epoch_acc", "=", "correct", "/", "length_of_dataset", "\n", "\n", "epoch_val_acc", "=", "self", ".", "evaluate", "(", "teacher", "=", "True", ")", "\n", "\n", "if", "epoch_val_acc", ">", "best_acc", ":", "\n", "                ", "best_acc", "=", "epoch_val_acc", "\n", "self", ".", "best_teacher_model_weights", "=", "deepcopy", "(", "\n", "self", ".", "teacher_model", ".", "state_dict", "(", ")", "\n", ")", "\n", "\n", "", "if", "self", ".", "log", ":", "\n", "                ", "self", ".", "writer", ".", "add_scalar", "(", "\"Training loss/Teacher\"", ",", "epoch_loss", ",", "epochs", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "\"Training accuracy/Teacher\"", ",", "epoch_acc", ",", "epochs", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "\n", "\"Validation accuracy/Teacher\"", ",", "epoch_val_acc", ",", "epochs", "\n", ")", "\n", "\n", "", "loss_arr", ".", "append", "(", "epoch_loss", ")", "\n", "print", "(", "f\"Epoch: {ep+1}, Loss: {epoch_loss}, Accuracy: {epoch_acc}\"", ")", "\n", "\n", "self", ".", "post_epoch_call", "(", "ep", ")", "\n", "\n", "", "self", ".", "teacher_model", ".", "load_state_dict", "(", "self", ".", "best_teacher_model_weights", ")", "\n", "if", "save_model", ":", "\n", "            ", "torch", ".", "save", "(", "self", ".", "teacher_model", ".", "state_dict", "(", ")", ",", "save_model_pth", ")", "\n", "", "if", "plot_losses", ":", "\n", "            ", "plt", ".", "plot", "(", "loss_arr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.RCO.rco.RCO.train_student": [[145, 225], ["rco.RCO.student_model.train", "len", "copy.deepcopy", "print", "range", "rco.RCO.student_model.load_state_dict", "rco.RCO.student_model.state_dict", "rco.RCO.evaluate", "loss_arr.append", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "matplotlib.plot", "rco.RCO.anchors[].to", "rco.RCO.eval", "data.to.to.to", "label.to.to.to", "rco.RCO.student_model", "rco.RCO.", "rco.RCO.calculate_kd_loss", "isinstance", "rco.RCO.argmax", "rco.RCO.argmax.eq().sum().item", "rco.RCO.optimizer_student.zero_grad", "rco.RCO.backward", "rco.RCO.optimizer_student.step", "copy.deepcopy", "rco.RCO.writer.add_scalar", "rco.RCO.writer.add_scalar", "rco.RCO.writer.add_scalar", "rco.RCO.student_model.state_dict", "rco.RCO.student_model.state_dict", "rco.RCO.argmax.eq().sum", "rco.RCO.argmax.eq", "label.to.to.view_as"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.self_training.SelfTraining.evaluate", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.mean_teacher.mean_teacher.MeanTeacher.calculate_kd_loss"], ["", "", "def", "train_student", "(", "\n", "self", ",", "\n", "epochs", "=", "10", ",", "\n", "plot_losses", "=", "True", ",", "\n", "save_model", "=", "True", ",", "\n", "save_model_pth", "=", "\"./models/student.pth\"", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Function that will be training the student\n\n        :param epochs (int): Number of epochs you want to train the teacher\n        :param plot_losses (bool): True if you want to plot the losses\n        :param save_model (bool): True if you want to save the student model\n        :param save_model_pth (str): Path where you want to save the student model\n        \"\"\"", "\n", "anchor_point", "=", "0", "\n", "self", ".", "student_model", ".", "train", "(", ")", "\n", "loss_arr", "=", "[", "]", "\n", "length_of_dataset", "=", "len", "(", "self", ".", "train_loader", ".", "dataset", ")", "\n", "best_acc", "=", "0.0", "\n", "self", ".", "best_student_model_weights", "=", "deepcopy", "(", "self", ".", "student_model", ".", "state_dict", "(", ")", ")", "\n", "\n", "print", "(", "\"\\nTraining student...\"", ")", "\n", "\n", "for", "ep", "in", "range", "(", "epochs", ")", ":", "\n", "            ", "epoch_loss", "=", "0.0", "\n", "correct", "=", "0", "\n", "\n", "if", "ep", "%", "self", ".", "epoch_interval", "==", "0", "and", "ep", "<", "epochs", ":", "\n", "                ", "teacher_model", "=", "self", ".", "anchors", "[", "anchor_point", "]", ".", "to", "(", "self", ".", "device", ")", "\n", "teacher_model", ".", "eval", "(", ")", "\n", "anchor_point", "+=", "1", "\n", "\n", "", "for", "(", "data", ",", "label", ")", "in", "self", ".", "train_loader", ":", "\n", "\n", "                ", "data", "=", "data", ".", "to", "(", "self", ".", "device", ")", "\n", "label", "=", "label", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "student_out", "=", "self", ".", "student_model", "(", "data", ")", "\n", "teacher_out", "=", "teacher_model", "(", "data", ")", "\n", "\n", "loss", "=", "self", ".", "calculate_kd_loss", "(", "student_out", ",", "teacher_out", ",", "label", ")", "\n", "\n", "if", "isinstance", "(", "student_out", ",", "tuple", ")", ":", "\n", "                    ", "student_out", "=", "student_out", "[", "0", "]", "\n", "\n", "", "pred", "=", "student_out", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "correct", "+=", "pred", ".", "eq", "(", "label", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "self", ".", "optimizer_student", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_student", ".", "step", "(", ")", "\n", "\n", "epoch_loss", "+=", "loss", "\n", "\n", "", "epoch_acc", "=", "correct", "/", "length_of_dataset", "\n", "\n", "epoch_val_acc", "=", "self", ".", "evaluate", "(", "teacher", "=", "False", ")", "\n", "\n", "if", "epoch_val_acc", ">", "best_acc", ":", "\n", "                ", "best_acc", "=", "epoch_val_acc", "\n", "self", ".", "best_student_model_weights", "=", "deepcopy", "(", "\n", "self", ".", "student_model", ".", "state_dict", "(", ")", "\n", ")", "\n", "\n", "", "if", "self", ".", "log", ":", "\n", "                ", "self", ".", "writer", ".", "add_scalar", "(", "\"Training loss/Student\"", ",", "epoch_loss", ",", "epochs", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "\"Training accuracy/Student\"", ",", "epoch_acc", ",", "epochs", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "\n", "\"Validation accuracy/Student\"", ",", "epoch_val_acc", ",", "epochs", "\n", ")", "\n", "\n", "", "loss_arr", ".", "append", "(", "epoch_loss", ")", "\n", "print", "(", "f\"Epoch: {ep+1}, Loss: {epoch_loss}, Accuracy: {epoch_acc}\"", ")", "\n", "\n", "", "self", ".", "student_model", ".", "load_state_dict", "(", "self", ".", "best_student_model_weights", ")", "\n", "if", "save_model", ":", "\n", "            ", "torch", ".", "save", "(", "self", ".", "student_model", ".", "state_dict", "(", ")", ",", "save_model_pth", ")", "\n", "", "if", "plot_losses", ":", "\n", "            ", "plt", ".", "plot", "(", "loss_arr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.RCO.rco.RCO.calculate_kd_loss": [[226, 244], ["torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "rco.RCO.loss_fn", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax"], "methods", ["None"], ["", "", "def", "calculate_kd_loss", "(", "self", ",", "y_pred_student", ",", "y_pred_teacher", ",", "y_true", ")", ":", "\n", "        ", "\"\"\"\n        Function used for calculating the KD loss during distillation\n\n        :param y_pred_student (Tensor): Predicted outputs from the student network\n        :param y_pred_teacher (Tensor): Predicted outputs from the teacher network\n        :param y_true (Tensor): True labels\n        \"\"\"", "\n", "\n", "loss", "=", "(", "1", "-", "self", ".", "distil_weight", ")", "*", "F", ".", "cross_entropy", "(", "\n", "F", ".", "softmax", "(", "y_pred_student", ",", "dim", "=", "1", ")", ",", "y_true", "\n", ")", "\n", "loss", "+=", "(", "self", ".", "distil_weight", "*", "self", ".", "temp", "*", "self", ".", "temp", ")", "*", "self", ".", "loss_fn", "(", "\n", "F", ".", "log_softmax", "(", "y_pred_student", "/", "self", ".", "temp", ",", "dim", "=", "1", ")", ",", "\n", "F", ".", "log_softmax", "(", "y_pred_teacher", "/", "self", ".", "temp", ",", "dim", "=", "1", ")", ",", "\n", ")", "\n", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.vanilla.vanilla_kd.VanillaKD.__init__": [[26, 54], ["torch.MSELoss", "torch.MSELoss", "KD_Lib.KD.common.BaseClass.__init__"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.MeanResnet.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "teacher_model", ",", "\n", "student_model", ",", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "optimizer_teacher", ",", "\n", "optimizer_student", ",", "\n", "loss_fn", "=", "nn", ".", "MSELoss", "(", ")", ",", "\n", "temp", "=", "20.0", ",", "\n", "distil_weight", "=", "0.5", ",", "\n", "device", "=", "\"cpu\"", ",", "\n", "log", "=", "False", ",", "\n", "logdir", "=", "\"./Experiments\"", ",", "\n", ")", ":", "\n", "        ", "super", "(", "VanillaKD", ",", "self", ")", ".", "__init__", "(", "\n", "teacher_model", ",", "\n", "student_model", ",", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "optimizer_teacher", ",", "\n", "optimizer_student", ",", "\n", "loss_fn", ",", "\n", "temp", ",", "\n", "distil_weight", ",", "\n", "device", ",", "\n", "log", ",", "\n", "logdir", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.vanilla.vanilla_kd.VanillaKD.calculate_kd_loss": [[56, 74], ["torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.cross_entropy", "torch.cross_entropy", "vanilla_kd.VanillaKD.loss_fn"], "methods", ["None"], ["", "def", "calculate_kd_loss", "(", "self", ",", "y_pred_student", ",", "y_pred_teacher", ",", "y_true", ")", ":", "\n", "        ", "\"\"\"\n        Function used for calculating the KD loss during distillation\n\n        :param y_pred_student (torch.FloatTensor): Prediction made by the student model\n        :param y_pred_teacher (torch.FloatTensor): Prediction made by the teacher model\n        :param y_true (torch.FloatTensor): Original label\n        \"\"\"", "\n", "\n", "soft_teacher_out", "=", "F", ".", "softmax", "(", "y_pred_teacher", "/", "self", ".", "temp", ",", "dim", "=", "1", ")", "\n", "soft_student_out", "=", "F", ".", "softmax", "(", "y_pred_student", "/", "self", ".", "temp", ",", "dim", "=", "1", ")", "\n", "\n", "loss", "=", "(", "1", "-", "self", ".", "distil_weight", ")", "*", "F", ".", "cross_entropy", "(", "y_pred_student", ",", "y_true", ")", "\n", "loss", "+=", "(", "self", ".", "distil_weight", "*", "self", ".", "temp", "*", "self", ".", "temp", ")", "*", "self", ".", "loss_fn", "(", "\n", "soft_teacher_out", ",", "soft_student_out", "\n", ")", "\n", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.RKD.loss_metric.RKDDistanceLoss.forward": [[28, 45], ["loss_metric.pairwaise_distance", "s[].mean", "torch.smooth_l1_loss", "torch.smooth_l1_loss", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "loss_metric.pairwaise_distance", "t[].mean"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.RKD.loss_metric.pairwaise_distance", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.RKD.loss_metric.pairwaise_distance"], ["def", "forward", "(", "self", ",", "teacher", ",", "student", ")", ":", "\n", "        ", "\"\"\"\n        Forward function\n\n        :param teacher (torch.FloatTensor): Prediction made by the teacher model\n        :param student (torch.FloatTensor): Prediction made by the student model\n        \"\"\"", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "t", "=", "pairwaise_distance", "(", "teacher", ")", "\n", "t_mean", "=", "t", "[", "t", ">", "0", "]", ".", "mean", "(", ")", "\n", "t", "=", "t", "/", "(", "t_mean", "+", "1e-7", ")", "\n", "\n", "", "s", "=", "pairwaise_distance", "(", "student", ")", "\n", "s_mean", "=", "s", "[", "s", ">", "0", "]", ".", "mean", "(", ")", "\n", "s", "=", "s", "/", "(", "s_mean", "+", "1e-7", ")", "\n", "return", "F", ".", "smooth_l1_loss", "(", "s", ",", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.RKD.loss_metric.RKDAngleLoss.forward": [[52, 72], ["torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.smooth_l1_loss", "torch.smooth_l1_loss", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "torch.bmm().view", "student.unsqueeze", "student.unsqueeze", "torch.normalize", "torch.normalize", "teacher.unsqueeze", "teacher.unsqueeze", "torch.normalize", "torch.normalize", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.normalize.transpose", "torch.normalize.transpose"], "methods", ["None"], ["def", "forward", "(", "self", ",", "teacher", ",", "student", ",", "normalize", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Forward function\n\n        :param teacher (torch.FloatTensor): Prediction made by the teacher model\n        :param student (torch.FloatTensor): Prediction made by the student model\n        :param normalize (bool): True if inputs need to be normalized\n        \"\"\"", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "t", "=", "teacher", ".", "unsqueeze", "(", "0", ")", "-", "teacher", ".", "unsqueeze", "(", "1", ")", "\n", "if", "normalize", ":", "\n", "                ", "t", "=", "F", ".", "normalize", "(", "t", ",", "p", "=", "2", ",", "dim", "=", "2", ")", "\n", "", "t", "=", "torch", ".", "bmm", "(", "t", ",", "t", ".", "transpose", "(", "1", ",", "2", ")", ")", ".", "view", "(", "-", "1", ")", "\n", "\n", "", "s", "=", "student", ".", "unsqueeze", "(", "0", ")", "-", "student", ".", "unsqueeze", "(", "1", ")", "\n", "if", "normalize", ":", "\n", "            ", "s", "=", "F", ".", "normalize", "(", "s", ",", "p", "=", "2", ",", "dim", "=", "2", ")", "\n", "", "s", "=", "torch", ".", "bmm", "(", "s", ",", "s", ".", "transpose", "(", "1", ",", "2", ")", ")", ".", "view", "(", "-", "1", ")", "\n", "return", "F", ".", "smooth_l1_loss", "(", "s", ",", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.RKD.loss_metric.RKDLoss.__init__": [[87, 92], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.MeanResnet.__init__"], ["def", "__init__", "(", "self", ",", "dist_ratio", "=", "0.5", ",", "angle_ratio", "=", "0.5", ",", "normalize", "=", "True", ")", ":", "\n", "        ", "super", "(", "RKDLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dist_ratio", "=", "dist_ratio", "\n", "self", ".", "angle_ratio", "=", "angle_ratio", "\n", "self", ".", "normalize", "=", "normalize", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.RKD.loss_metric.RKDLoss.forward": [[93, 105], ["angle_loss", "distance_loss"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "teacher", ",", "student", ")", ":", "\n", "        ", "\"\"\"\n        Forward function\n\n        :param teacher (torch.FloatTensor): Prediction made by the teacher model\n        :param student (torch.FloatTensor): Prediction made by the student model\n        :param normalize (bool): True if inputs need to be normalized\n        \"\"\"", "\n", "\n", "loss", "=", "angle_loss", "(", "teacher", ",", "student", ",", "self", ".", "normalize", ")", "*", "self", ".", "angle_ratio", "\n", "loss", "+=", "distance_loss", "(", "teacher", ",", "student", ")", "*", "self", ".", "dist_ratio", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.RKD.loss_metric.pairwaise_distance": [[6, 21], ["output.pow().sum", "torch.matmul", "torch.matmul", "result.clone.clamp", "result.clone.sqrt", "result.clone.clone", "output.t", "output.pow", "output.pow().sum.unsqueeze", "output.pow().sum.unsqueeze", "range", "range", "len", "len"], "function", ["None"], ["def", "pairwaise_distance", "(", "output", ")", ":", "\n", "    ", "\"\"\"\n    Function for calculating pairwise distance\n\n    :param output (torch.FloatTensor): Input for calculating pairwise distance\n    \"\"\"", "\n", "\n", "output_squared", "=", "output", ".", "pow", "(", "2", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "product", "=", "torch", ".", "matmul", "(", "output", ",", "output", ".", "t", "(", ")", ")", "\n", "result", "=", "output_squared", ".", "unsqueeze", "(", "0", ")", "+", "output_squared", ".", "unsqueeze", "(", "1", ")", "-", "2", "*", "product", "\n", "result", "=", "result", ".", "clamp", "(", "min", "=", "1e-10", ")", "\n", "result", "=", "result", ".", "sqrt", "(", ")", "\n", "result", "=", "result", ".", "clone", "(", ")", "\n", "result", "[", "range", "(", "len", "(", "output", ")", ")", ",", "range", "(", "len", "(", "output", ")", ")", "]", "=", "0", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.attention.loss_metric.ATLoss.__init__": [[12, 15], ["torch.nn.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.MeanResnet.__init__"], ["\n", "output_squared", "=", "output", ".", "pow", "(", "2", ")", ".", "sum", "(", "dim", "=", "1", ")", "\n", "product", "=", "torch", ".", "matmul", "(", "output", ",", "output", ".", "t", "(", ")", ")", "\n", "result", "=", "output_squared", ".", "unsqueeze", "(", "0", ")", "+", "output_squared", ".", "unsqueeze", "(", "1", ")", "-", "2", "*", "product", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.attention.loss_metric.ATLoss.forward": [[16, 35], ["zip", "loss_metric.ATLoss.single_at_loss", "loss_metric.ATLoss.single_at_loss"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.attention.loss_metric.ATLoss.single_at_loss", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.attention.loss_metric.ATLoss.single_at_loss"], ["result", "=", "result", ".", "clamp", "(", "min", "=", "1e-10", ")", "\n", "result", "=", "result", ".", "sqrt", "(", ")", "\n", "result", "=", "result", ".", "clone", "(", ")", "\n", "result", "[", "range", "(", "len", "(", "output", ")", ")", ",", "range", "(", "len", "(", "output", ")", ")", "]", "=", "0", "\n", "return", "result", "\n", "\n", "\n", "", "class", "RKDDistanceLoss", "(", "nn", ".", "Module", ")", ":", "\n", "    ", "\"\"\"\n    Module for calculating RKD Distance Loss\n    \"\"\"", "\n", "\n", "def", "forward", "(", "self", ",", "teacher", ",", "student", ")", ":", "\n", "        ", "\"\"\"\n        Forward function\n\n        :param teacher (torch.FloatTensor): Prediction made by the teacher model\n        :param student (torch.FloatTensor): Prediction made by the student model\n        \"\"\"", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.attention.loss_metric.ATLoss.single_at_loss": [[36, 41], ["torch.normalize", "activation.pow().view", "activation.size", "activation.pow"], "methods", ["None"], ["with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "t", "=", "pairwaise_distance", "(", "teacher", ")", "\n", "t_mean", "=", "t", "[", "t", ">", "0", "]", ".", "mean", "(", ")", "\n", "t", "=", "t", "/", "(", "t_mean", "+", "1e-7", ")", "\n", "\n", "", "s", "=", "pairwaise_distance", "(", "student", ")", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.attention.attention.Attention.__init__": [[28, 58], ["KD_Lib.KD.common.BaseClass.__init__", "attention.Attention.loss_fn.to", "loss_metric.ATLoss"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.MeanResnet.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "teacher_model", ",", "\n", "student_model", ",", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "optimizer_teacher", ",", "\n", "optimizer_student", ",", "\n", "temp", "=", "20.0", ",", "\n", "distil_weight", "=", "0.5", ",", "\n", "device", "=", "\"cpu\"", ",", "\n", "log", "=", "False", ",", "\n", "logdir", "=", "\"./Experiments\"", ",", "\n", ")", ":", "\n", "        ", "super", "(", "Attention", ",", "self", ")", ".", "__init__", "(", "\n", "teacher_model", ",", "\n", "student_model", ",", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "optimizer_teacher", ",", "\n", "optimizer_student", ",", "\n", "ATLoss", "(", ")", ",", "\n", "temp", ",", "\n", "distil_weight", ",", "\n", "device", ",", "\n", "log", ",", "\n", "logdir", ",", "\n", ")", "\n", "\n", "self", ".", "loss_fn", "=", "self", ".", "loss_fn", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.attention.attention.Attention.calculate_kd_loss": [[59, 74], ["torch.cross_entropy", "attention.Attention.loss_fn"], "methods", ["None"], ["", "def", "calculate_kd_loss", "(", "self", ",", "y_pred_student", ",", "y_pred_teacher", ",", "y_true", ")", ":", "\n", "        ", "\"\"\"\n        Function used for calculating the KD loss during distillation\n\n        :param y_pred_student (torch.FloatTensor): Prediction made by the student model\n        :param y_pred_teacher (torch.FloatTensor): Prediction made by the teacher model\n        :param y_true (torch.FloatTensor): Original label\n        \"\"\"", "\n", "loss", "=", "(", "\n", "(", "1.0", "-", "self", ".", "distil_weight", ")", "\n", "*", "self", ".", "temp", "\n", "*", "F", ".", "cross_entropy", "(", "y_pred_student", "/", "self", ".", "temp", ",", "y_true", ")", "\n", ")", "\n", "loss", "+=", "self", ".", "distil_weight", "*", "self", ".", "loss_fn", "(", "y_pred_teacher", ",", "y_pred_student", ")", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.KA.LSR.LabelSmoothReg.__init__": [[29, 62], ["torch.KLDivLoss", "torch.KLDivLoss", "torch.KLDivLoss", "KD_Lib.KD.common.BaseClass.__init__"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.MeanResnet.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "teacher_model", ",", "\n", "student_model", ",", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "optimizer_teacher", ",", "\n", "optimizer_student", ",", "\n", "correct_prob", "=", "0.90", ",", "\n", "loss_fn", "=", "nn", ".", "KLDivLoss", "(", "reduction", "=", "\"batchmean\"", ")", ",", "\n", "temp", "=", "20.0", ",", "\n", "ka_weight", "=", "0.85", ",", "\n", "device", "=", "\"cpu\"", ",", "\n", "log", "=", "False", ",", "\n", "logdir", "=", "\"./Experiments\"", ",", "\n", ")", ":", "\n", "\n", "        ", "super", "(", "LabelSmoothReg", ",", "self", ")", ".", "__init__", "(", "\n", "teacher_model", ",", "\n", "student_model", ",", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "optimizer_teacher", ",", "\n", "optimizer_student", ",", "\n", "loss_fn", "=", "loss_fn", ",", "\n", "temp", "=", "temp", ",", "\n", "distil_weight", "=", "ka_weight", ",", "\n", "device", "=", "device", ",", "\n", "log", "=", "log", ",", "\n", "logdir", "=", "logdir", ",", "\n", ")", "\n", "\n", "self", ".", "correct_prob", "=", "correct_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.KA.LSR.LabelSmoothReg.calculate_kd_loss": [[63, 94], ["torch.softmax", "torch.softmax", "torch.softmax", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.softmax", "torch.softmax", "torch.softmax", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "LSR.LabelSmoothReg.loss_fn", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "calculate_kd_loss", "(", "self", ",", "y_pred_student", ",", "y_pred_teacher", ",", "y_true", ")", ":", "\n", "        ", "\"\"\"\n        Applies label smoothing with teacher outputs to compare with student.\n\n        :param y_pred_student (Tensor): Predicted outputs from the student network\n        :param y_pred_teacher (Tensor): Predicted outputs from the teacher network\n        :param y_true (Tensor): True labels\n        \"\"\"", "\n", "\n", "num_classes", "=", "y_pred_teacher", ".", "shape", "[", "1", "]", "\n", "soft_pred_student", "=", "F", ".", "softmax", "(", "y_pred_student", "/", "self", ".", "temp", ",", "dim", "=", "1", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "soft_pred_teacher", "=", "F", ".", "softmax", "(", "y_pred_teacher", "/", "self", ".", "temp", ",", "dim", "=", "1", ")", "\n", "activated_label", "=", "torch", ".", "zeros", "(", "soft_pred_teacher", ".", "shape", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "for", "i", "in", "range", "(", "soft_pred_teacher", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "t_label", "=", "torch", ".", "argmax", "(", "soft_pred_teacher", "[", "i", "]", ")", "\n", "\n", "if", "t_label", "==", "y_true", "[", "i", "]", ":", "\n", "                    ", "activated_label", "[", "i", "]", "=", "soft_pred_teacher", "[", "i", "]", "\n", "", "else", ":", "\n", "                    ", "activated_label", "[", "i", "]", "=", "(", "1", "-", "self", ".", "correct_prob", ")", "/", "(", "num_classes", "-", "1", ")", "\n", "activated_label", "[", "i", "]", "[", "y_true", "[", "i", "]", "]", "=", "self", ".", "correct_prob", "\n", "\n", "", "", "", "ka_loss", "=", "(", "self", ".", "temp", "*", "self", ".", "temp", ")", "*", "self", ".", "loss_fn", "(", "\n", "activated_label", ",", "soft_pred_student", "\n", ")", "\n", "\n", "ce_loss", "=", "self", ".", "temp", "*", "nn", ".", "CrossEntropyLoss", "(", ")", "(", "y_pred_student", "/", "self", ".", "temp", ",", "y_true", ")", "\n", "\n", "return", "(", "1", "-", "self", ".", "distil_weight", ")", "*", "ce_loss", "+", "self", ".", "distil_weight", "*", "ka_loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.KA.PS.ProbShift.__init__": [[27, 58], ["torch.KLDivLoss", "torch.KLDivLoss", "torch.KLDivLoss", "KD_Lib.KD.common.BaseClass.__init__", "torch.CrossEntropyLoss().to", "torch.CrossEntropyLoss().to", "torch.CrossEntropyLoss().to", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.MeanResnet.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "teacher_model", ",", "\n", "student_model", ",", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "optimizer_teacher", ",", "\n", "optimizer_student", ",", "\n", "loss_fn", "=", "nn", ".", "KLDivLoss", "(", "reduction", "=", "\"batchmean\"", ")", ",", "\n", "temp", "=", "20.0", ",", "\n", "ka_weight", "=", "0.5", ",", "\n", "device", "=", "\"cpu\"", ",", "\n", "log", "=", "False", ",", "\n", "logdir", "=", "\"./Experiments\"", ",", "\n", ")", ":", "\n", "\n", "        ", "super", "(", "ProbShift", ",", "self", ")", ".", "__init__", "(", "\n", "teacher_model", ",", "\n", "student_model", ",", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "optimizer_teacher", ",", "\n", "optimizer_student", ",", "\n", "loss_fn", "=", "loss_fn", ",", "\n", "temp", "=", "temp", ",", "\n", "distil_weight", "=", "ka_weight", ",", "\n", "device", "=", "device", ",", "\n", "log", "=", "log", ",", "\n", "logdir", "=", "logdir", ",", "\n", ")", "\n", "self", ".", "label_loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.KA.PS.ProbShift.calculate_kd_loss": [[59, 83], ["torch.softmax", "torch.softmax", "torch.softmax", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.softmax", "torch.softmax", "torch.softmax", "range", "PS.ProbShift.loss_fn", "PS.ProbShift.label_loss", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax"], "methods", ["None"], ["", "def", "calculate_kd_loss", "(", "self", ",", "y_pred_student", ",", "y_pred_teacher", ",", "y_true", ")", ":", "\n", "        ", "\"\"\"\n        Swaps probabilty of incorrectly predicted class with true class.\n\n        :param y_pred_student (Tensor): Predicted outputs from the student network\n        :param y_pred_teacher (Tensor): Predicted outputs from the teacher network\n        :param y_true (Tensor): True labels\n        \"\"\"", "\n", "soft_pred_student", "=", "F", ".", "softmax", "(", "y_pred_student", "/", "self", ".", "temp", ",", "dim", "=", "1", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "soft_pred_teacher", "=", "F", ".", "softmax", "(", "y_pred_teacher", "/", "self", ".", "temp", ",", "dim", "=", "1", ")", "\n", "for", "i", "in", "range", "(", "y_pred_teacher", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "t_label", "=", "torch", ".", "argmax", "(", "soft_pred_teacher", "[", "i", "]", ")", "\n", "if", "t_label", "!=", "y_true", "[", "i", "]", ":", "\n", "                    ", "temp_prob", "=", "soft_pred_teacher", "[", "i", "]", "[", "t_label", "]", "\n", "soft_pred_teacher", "[", "i", "]", "[", "t_label", "]", "=", "soft_pred_teacher", "[", "i", "]", "[", "y_true", "[", "i", "]", "]", "\n", "soft_pred_teacher", "[", "i", "]", "[", "y_true", "[", "i", "]", "]", "=", "temp_prob", "\n", "\n", "", "", "", "ka_loss", "=", "(", "\n", "self", ".", "temp", "*", "self", ".", "temp", "*", "self", ".", "loss_fn", "(", "soft_pred_teacher", ",", "soft_pred_student", ")", "\n", ")", "\n", "ce_loss", "=", "self", ".", "temp", "*", "self", ".", "label_loss", "(", "y_pred_student", "/", "self", ".", "temp", ",", "y_true", ")", "\n", "return", "ka_loss", "*", "self", ".", "distil_weight", "+", "(", "1", "-", "self", ".", "distil_weight", ")", "*", "ce_loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.TAKD.takd.TAKD.__init__": [[34, 70], ["torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "KD_Lib.KD.common.BaseClass.__init__", "torch.LogSoftmax().to", "torch.LogSoftmax().to", "torch.LogSoftmax().to", "torch.LogSoftmax().to", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax", "torch.LogSoftmax"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.MeanResnet.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "teacher_model", ",", "\n", "assistant_models", ",", "\n", "student_model", ",", "\n", "assistant_train_order", ",", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "optimizer_teacher", ",", "\n", "optimizer_assistants", ",", "\n", "optimizer_student", ",", "\n", "loss_fn", "=", "nn", ".", "MSELoss", "(", ")", ",", "\n", "temp", "=", "20.0", ",", "\n", "distil_weight", "=", "0.4", ",", "\n", "device", "=", "\"cpu\"", ",", "\n", "log", "=", "False", ",", "\n", "logdir", "=", "\"./Experiments\"", ",", "\n", ")", ":", "\n", "        ", "super", "(", "TAKD", ",", "self", ")", ".", "__init__", "(", "\n", "teacher_model", ",", "\n", "student_model", ",", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "optimizer_teacher", ",", "\n", "optimizer_student", ",", "\n", "loss_fn", ",", "\n", "temp", ",", "\n", "distil_weight", ",", "\n", "device", ",", "\n", "log", ",", "\n", "logdir", ",", "\n", ")", "\n", "self", ".", "assistant_models", "=", "assistant_models", "\n", "self", ".", "optimizer_assistants", "=", "optimizer_assistants", "\n", "self", ".", "assistant_train_order", "=", "assistant_train_order", "\n", "self", ".", "log_softmax", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.TAKD.takd.TAKD.calculate_kd_loss": [[71, 87], ["takd.TAKD.ce_fn", "takd.TAKD.loss_fn", "takd.TAKD.log_softmax", "takd.TAKD.log_softmax"], "methods", ["None"], ["", "def", "calculate_kd_loss", "(", "self", ",", "y_pred_student", ",", "y_pred_teacher", ",", "y_true", ")", ":", "\n", "        ", "\"\"\"\n        Function used for calculating the KD loss during distillation\n\n        :param y_pred_student (torch.FloatTensor): Prediction made by the student model\n        :param y_pred_teacher (torch.FloatTensor): Prediction made by the teacher model\n        :param y_true (torch.FloatTensor): Original label\n        \"\"\"", "\n", "\n", "loss", "=", "(", "1", "-", "self", ".", "distil_weight", ")", "*", "self", ".", "ce_fn", "(", "y_pred_student", ",", "y_true", ")", "\n", "loss", "+=", "(", "self", ".", "distil_weight", "*", "self", ".", "temp", "*", "self", ".", "temp", ")", "*", "self", ".", "loss_fn", "(", "\n", "self", ".", "log_softmax", "(", "y_pred_student", "/", "self", ".", "temp", ")", ",", "\n", "self", ".", "log_softmax", "(", "y_pred_teacher", "/", "self", ".", "temp", ")", ",", "\n", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.TAKD.takd.TAKD.train_distil_model": [[88, 156], ["model.train", "len", "copy.deepcopy", "range", "model.load_state_dict", "model.state_dict", "isinstance", "enumerate", "takd.TAKD._evaluate_model", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "data.to.to.to", "target.to.to.to", "model", "model.argmax", "model.argmax.eq().sum().item", "range", "len", "takd.TAKD.calculate_kd_loss", "optimizer.zero_grad", "takd.TAKD.backward", "optimizer.step", "takd.TAKD.item", "copy.deepcopy", "model.state_dict", "len", "model.state_dict", "model.argmax.eq().sum", "model.argmax.eq", "target.to.to.view_as"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.DML.dml.DML._evaluate_model", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.mean_teacher.mean_teacher.MeanTeacher.calculate_kd_loss"], ["", "def", "train_distil_model", "(", "\n", "self", ",", "\n", "teachers", ",", "\n", "model", ",", "\n", "optimizer", ",", "\n", "epochs", "=", "20", ",", "\n", "plot_losses", "=", "True", ",", "\n", "save_model", "=", "True", ",", "\n", "save_model_pth", "=", "\"./models/student.pt\"", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Function used for distillation\n\n        :param teachers (list or tuple): Teachers used for distillation\n        :param model (nn.Module): Model learning during distillation\n        :param optimizer (torch.optim.*): Optimizer used for training\n        :param epochs (int): Number of epochs to train\n        :param plot_losses (bool): True if the loss curves need to be plotted\n        :param save_model (bool): True if the model needs to be saved\n        :param save_model_path (str): Path used for storing the model\n        \"\"\"", "\n", "\n", "model", ".", "train", "(", ")", "\n", "length_of_dataset", "=", "len", "(", "self", ".", "train_loader", ".", "dataset", ")", "\n", "best_acc", "=", "0.0", "\n", "self", ".", "best_model_weights", "=", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "\n", "if", "not", "isinstance", "(", "teachers", ",", "list", ")", ":", "\n", "            ", "teachers", "=", "[", "teachers", "]", "\n", "\n", "", "for", "epoch", "in", "range", "(", "epochs", ")", ":", "\n", "            ", "correct", "=", "0", "\n", "epoch_loss", "=", "0.0", "\n", "for", "_", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "self", ".", "train_loader", ")", ":", "\n", "                ", "data", "=", "data", ".", "to", "(", "self", ".", "device", ")", "\n", "target", "=", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "scores", "=", "model", "(", "data", ")", "\n", "\n", "pred", "=", "scores", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "teacher_output", "=", "teachers", "[", "0", "]", "(", "data", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "teachers", ")", ")", ":", "\n", "                    ", "teacher_output", "+=", "teachers", "[", "i", "]", "(", "data", ")", "\n", "", "teacher_output", "/=", "len", "(", "teachers", ")", "\n", "\n", "loss", "=", "self", ".", "calculate_kd_loss", "(", "scores", ",", "teacher_output", ",", "target", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "epoch_loss", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "", "epoch_acc", "=", "correct", "/", "length_of_dataset", "\n", "\n", "_", ",", "epoch_val_acc", "=", "self", ".", "_evaluate_model", "(", "model", ")", "\n", "\n", "if", "epoch_val_acc", ">", "best_acc", ":", "\n", "                ", "best_acc", "=", "epoch_val_acc", "\n", "self", ".", "best_model_weights", "=", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "\n", "", "print", "(", "f\"Epoch: {epoch}, Loss: {epoch_loss}, Accuracy: {epoch_acc}\"", ")", "\n", "\n", "", "model", ".", "load_state_dict", "(", "self", ".", "best_model_weights", ")", "\n", "if", "save_model", ":", "\n", "            ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "save_model_pth", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.TAKD.takd.TAKD.train_assistants": [[157, 190], ["takd.TAKD.train_distil_model", "trainers.append", "trainers.append", "str"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.CSKD.cskd.CSKD.train_distil_model"], ["", "", "def", "train_assistants", "(", "\n", "self", ",", "epochs", "=", "20", ",", "plot_losses", "=", "True", ",", "save_model", "=", "True", ",", "save_dir", "=", "\"./models/\"", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Function used for training assistants\n\n        :param epochs (int): Number of epochs to train\n        :param plot_losses (bool): True if the loss curves need to be plotted\n        :param save_model (bool): True if the model needs to be saved\n        :param save_dir (str): Path used for storing the trained asssistant models\n        \"\"\"", "\n", "\n", "count", "=", "0", "\n", "for", "assistant", "in", "self", ".", "assistant_models", ":", "\n", "            ", "trainers", "=", "[", "]", "\n", "train_order", "=", "self", ".", "assistant_train_order", "[", "count", "]", "\n", "for", "elem", "in", "train_order", ":", "\n", "                ", "if", "elem", "==", "-", "1", ":", "\n", "                    ", "trainers", ".", "append", "(", "self", ".", "teacher_model", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "trainers", ".", "append", "(", "self", ".", "assistant_models", "[", "elem", "]", ")", "\n", "\n", "", "", "self", ".", "train_distil_model", "(", "\n", "trainers", ",", "\n", "assistant", ",", "\n", "self", ".", "optimizer_assistants", "[", "count", "]", ",", "\n", "epochs", ",", "\n", "plot_losses", ",", "\n", "save_model", ",", "\n", "save_dir", "+", "\"assistant_\"", "+", "str", "(", "count", ")", "+", "\".pt\"", ",", "\n", ")", "\n", "count", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.TAKD.takd.TAKD.train_student": [[191, 214], ["takd.TAKD.train_distil_model"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.CSKD.cskd.CSKD.train_distil_model"], ["", "", "def", "train_student", "(", "\n", "self", ",", "\n", "epochs", "=", "20", ",", "\n", "plot_losses", "=", "True", ",", "\n", "save_model", "=", "True", ",", "\n", "save_model_pth", "=", "\"./models/student.pth\"", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Function used for distilling knowledge to student\n\n        :param plot_losses (bool): True if the loss curves need to be plotted\n        :param save_model (bool): True if the model needs to be saved\n        :param save_model_path (str): Path used for storing the trained student model\n        \"\"\"", "\n", "\n", "self", ".", "train_distil_model", "(", "\n", "self", ".", "assistant_models", ",", "\n", "self", ".", "student_model", ",", "\n", "self", ".", "optimizer_student", ",", "\n", "epochs", ",", "\n", "plot_losses", ",", "\n", "save_model", ",", "\n", "save_model_pth", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.noisy.noisy_teacher.NoisyTeacher.__init__": [[35, 69], ["torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "KD_Lib.KD.common.BaseClass.__init__"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.MeanResnet.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "teacher_model", ",", "\n", "student_model", ",", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "optimizer_teacher", ",", "\n", "optimizer_student", ",", "\n", "alpha", "=", "0.5", ",", "\n", "noise_variance", "=", "0.1", ",", "\n", "loss_fn", "=", "nn", ".", "MSELoss", "(", ")", ",", "\n", "temp", "=", "20.0", ",", "\n", "distil_weight", "=", "0.5", ",", "\n", "device", "=", "\"cpu\"", ",", "\n", "log", "=", "False", ",", "\n", "logdir", "=", "\"./Experiments\"", ",", "\n", ")", ":", "\n", "        ", "super", "(", "NoisyTeacher", ",", "self", ")", ".", "__init__", "(", "\n", "teacher_model", ",", "\n", "student_model", ",", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "optimizer_teacher", ",", "\n", "optimizer_student", ",", "\n", "loss_fn", ",", "\n", "temp", ",", "\n", "distil_weight", ",", "\n", "device", ",", "\n", "log", ",", "\n", "logdir", ",", "\n", ")", "\n", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "noise_variance", "=", "noise_variance", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.noisy.noisy_teacher.NoisyTeacher.calculate_kd_loss": [[70, 88], ["random.uniform", "utils.add_noise", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "noisy_teacher.NoisyTeacher.loss_fn", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.noisy.utils.add_noise"], ["", "def", "calculate_kd_loss", "(", "self", ",", "y_pred_student", ",", "y_pred_teacher", ",", "y_true", ")", ":", "\n", "        ", "\"\"\"\n        Function used for calculating the KD loss during distillation\n\n        :param y_pred_student (torch.FloatTensor): Prediction made by the student model\n        :param y_pred_teacher (torch.FloatTensor): Prediction made by the teacher model\n        :param y_true (torch.FloatTensor): Original label\n        \"\"\"", "\n", "\n", "if", "random", ".", "uniform", "(", "0", ",", "1", ")", "<=", "self", ".", "alpha", ":", "\n", "            ", "y_pred_teacher", "=", "add_noise", "(", "y_pred_teacher", ",", "self", ".", "noise_variance", ")", "\n", "\n", "", "loss", "=", "(", "1.0", "-", "self", ".", "distil_weight", ")", "*", "F", ".", "cross_entropy", "(", "y_pred_student", ",", "y_true", ")", "\n", "loss", "+=", "(", "self", ".", "distil_weight", "*", "self", ".", "temp", "*", "self", ".", "temp", ")", "*", "self", ".", "loss_fn", "(", "\n", "F", ".", "log_softmax", "(", "y_pred_student", "/", "self", ".", "temp", ",", "dim", "=", "1", ")", ",", "\n", "F", ".", "softmax", "(", "y_pred_teacher", "/", "self", ".", "temp", ",", "dim", "=", "1", ")", ",", "\n", ")", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.noisy.soft_random.SoftRandom.__init__": [[34, 66], ["torch.KLDivLoss", "torch.KLDivLoss", "torch.KLDivLoss", "KD_Lib.KD.common.BaseClass.__init__"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.MeanResnet.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "teacher_model", ",", "\n", "student_model", ",", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "optimizer_teacher", ",", "\n", "optimizer_student", ",", "\n", "noise_variance", "=", "0.1", ",", "\n", "loss_fn", "=", "nn", ".", "KLDivLoss", "(", ")", ",", "\n", "temp", "=", "20.0", ",", "\n", "distil_weight", "=", "0.5", ",", "\n", "device", "=", "\"cpu\"", ",", "\n", "log", "=", "False", ",", "\n", "logdir", "=", "\"./Experiments\"", ",", "\n", ")", ":", "\n", "        ", "super", "(", "SoftRandom", ",", "self", ")", ".", "__init__", "(", "\n", "teacher_model", ",", "\n", "student_model", ",", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "optimizer_teacher", ",", "\n", "optimizer_student", ",", "\n", "loss_fn", ",", "\n", "temp", ",", "\n", "distil_weight", ",", "\n", "device", ",", "\n", "log", ",", "\n", "logdir", ",", "\n", ")", "\n", "\n", "self", ".", "noise_variance", "=", "noise_variance", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.noisy.soft_random.SoftRandom._train_student": [[67, 143], ["soft_random.SoftRandom.teacher_model.eval", "soft_random.SoftRandom.student_model.train", "len", "copy.deepcopy", "print", "range", "soft_random.SoftRandom.student_model.load_state_dict", "soft_random.SoftRandom.student_model.state_dict", "soft_random.SoftRandom.evaluate", "loss_arr.append", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "matplotlib.plot", "data.to.to.to", "utils.add_noise", "label.to.to.to", "soft_random.SoftRandom.student_model", "soft_random.SoftRandom.teacher_model", "soft_random.SoftRandom.calculate_kd_loss", "isinstance", "soft_random.SoftRandom.argmax", "soft_random.SoftRandom.argmax.eq().sum().item", "soft_random.SoftRandom.optimizer_student.zero_grad", "soft_random.SoftRandom.backward", "soft_random.SoftRandom.optimizer_student.step", "copy.deepcopy", "soft_random.SoftRandom.writer.add_scalar", "soft_random.SoftRandom.writer.add_scalar", "soft_random.SoftRandom.writer.add_scalar", "soft_random.SoftRandom.student_model.state_dict", "soft_random.SoftRandom.student_model.state_dict", "soft_random.SoftRandom.argmax.eq().sum", "soft_random.SoftRandom.argmax.eq", "label.to.to.view_as"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.self_training.SelfTraining.evaluate", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.noisy.utils.add_noise", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.mean_teacher.mean_teacher.MeanTeacher.calculate_kd_loss"], ["", "def", "_train_student", "(", "\n", "self", ",", "\n", "epochs", "=", "10", ",", "\n", "plot_losses", "=", "True", ",", "\n", "save_model", "=", "True", ",", "\n", "save_model_pth", "=", "\"./models/student.pth\"", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Function to train student model - for internal use only.\n\n        :param epochs (int): Number of epochs you want to train the teacher\n        :param plot_losses (bool): True if you want to plot the losses\n        :param save_model (bool): True if you want to save the student model\n        :param save_model_pth (str): Path where you want to save the student model\n        \"\"\"", "\n", "self", ".", "teacher_model", ".", "eval", "(", ")", "\n", "self", ".", "student_model", ".", "train", "(", ")", "\n", "loss_arr", "=", "[", "]", "\n", "length_of_dataset", "=", "len", "(", "self", ".", "train_loader", ".", "dataset", ")", "\n", "best_acc", "=", "0.0", "\n", "self", ".", "best_student_model_weights", "=", "deepcopy", "(", "self", ".", "student_model", ".", "state_dict", "(", ")", ")", "\n", "\n", "print", "(", "\"\\nTraining student...\"", ")", "\n", "\n", "for", "ep", "in", "range", "(", "epochs", ")", ":", "\n", "            ", "epoch_loss", "=", "0.0", "\n", "correct", "=", "0", "\n", "\n", "for", "(", "data", ",", "label", ")", "in", "self", ".", "train_loader", ":", "\n", "\n", "                ", "data", "=", "data", ".", "to", "(", "self", ".", "device", ")", "\n", "noisy_data", "=", "add_noise", "(", "data", ",", "self", ".", "noise_variance", ")", "\n", "label", "=", "label", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "student_out", "=", "self", ".", "student_model", "(", "noisy_data", ")", "\n", "teacher_out", "=", "self", ".", "teacher_model", "(", "data", ")", "\n", "\n", "loss", "=", "self", ".", "calculate_kd_loss", "(", "student_out", ",", "teacher_out", ",", "label", ")", "\n", "\n", "if", "isinstance", "(", "student_out", ",", "tuple", ")", ":", "\n", "                    ", "student_out", "=", "student_out", "[", "0", "]", "\n", "\n", "", "pred", "=", "student_out", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "correct", "+=", "pred", ".", "eq", "(", "label", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "self", ".", "optimizer_student", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_student", ".", "step", "(", ")", "\n", "\n", "epoch_loss", "+=", "loss", "\n", "\n", "", "epoch_acc", "=", "correct", "/", "length_of_dataset", "\n", "\n", "epoch_val_acc", "=", "self", ".", "evaluate", "(", "teacher", "=", "False", ")", "\n", "\n", "if", "epoch_acc", ">", "best_acc", ":", "\n", "                ", "best_acc", "=", "epoch_acc", "\n", "self", ".", "best_student_model_weights", "=", "deepcopy", "(", "\n", "self", ".", "student_model", ".", "state_dict", "(", ")", "\n", ")", "\n", "\n", "", "if", "self", ".", "log", ":", "\n", "                ", "self", ".", "writer", ".", "add_scalar", "(", "\"Training loss/Student\"", ",", "epoch_loss", ",", "epochs", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "\"Training accuracy/Student\"", ",", "epoch_acc", ",", "epochs", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "\n", "\"Validation accuracy/Student\"", ",", "epoch_val_acc", ",", "epochs", "\n", ")", "\n", "\n", "", "loss_arr", ".", "append", "(", "epoch_loss", ")", "\n", "print", "(", "f\"Epoch: {ep+1}, Loss: {epoch_loss}, Accuracy: {epoch_acc}\"", ")", "\n", "\n", "", "self", ".", "student_model", ".", "load_state_dict", "(", "self", ".", "best_student_model_weights", ")", "\n", "if", "save_model", ":", "\n", "            ", "torch", ".", "save", "(", "self", ".", "student_model", ".", "state_dict", "(", ")", ",", "save_model_pth", ")", "\n", "", "if", "plot_losses", ":", "\n", "            ", "plt", ".", "plot", "(", "loss_arr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.noisy.soft_random.SoftRandom.calculate_kd_loss": [[144, 159], ["torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "soft_random.SoftRandom.loss_fn", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], ["", "", "def", "calculate_kd_loss", "(", "self", ",", "y_pred_student", ",", "y_pred_teacher", ",", "y_true", ")", ":", "\n", "        ", "\"\"\"\n        Function used for calculating the KD loss during distillation\n\n        :param y_pred_student (torch.FloatTensor): Prediction made by the student model\n        :param y_pred_teacher (torch.FloatTensor): Prediction made by the teacher model\n        :param y_true (torch.FloatTensor): Original label\n        \"\"\"", "\n", "loss", "=", "(", "1.0", "-", "self", ".", "distil_weight", ")", "*", "F", ".", "cross_entropy", "(", "y_pred_student", ",", "y_true", ")", "\n", "loss", "+=", "(", "self", ".", "distil_weight", "*", "self", ".", "temp", "*", "self", ".", "temp", ")", "*", "self", ".", "loss_fn", "(", "\n", "F", ".", "log_softmax", "(", "y_pred_student", "/", "self", ".", "temp", ",", "dim", "=", "1", ")", ",", "\n", "F", ".", "softmax", "(", "y_pred_teacher", "/", "self", ".", "temp", ",", "dim", "=", "1", ")", ",", "\n", ")", "\n", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.noisy.messy_collab.MessyCollab.__init__": [[35, 69], ["torch.KLDivLoss", "torch.KLDivLoss", "torch.KLDivLoss", "KD_Lib.KD.common.BaseClass.__init__", "method.upper"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.MeanResnet.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "teacher_model", ",", "\n", "student_model", ",", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "optimizer_teacher", ",", "\n", "optimizer_student", ",", "\n", "noise_rate", "=", "0.02", ",", "\n", "method", "=", "\"S\"", ",", "\n", "loss_fn", "=", "nn", ".", "KLDivLoss", "(", ")", ",", "\n", "temp", "=", "20.0", ",", "\n", "distil_weight", "=", "0.5", ",", "\n", "device", "=", "\"cpu\"", ",", "\n", "log", "=", "False", ",", "\n", "logdir", "=", "\"./Experiments\"", ",", "\n", ")", ":", "\n", "        ", "super", "(", "MessyCollab", ",", "self", ")", ".", "__init__", "(", "\n", "teacher_model", ",", "\n", "student_model", ",", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "optimizer_teacher", ",", "\n", "optimizer_student", ",", "\n", "loss_fn", ",", "\n", "temp", ",", "\n", "distil_weight", ",", "\n", "device", ",", "\n", "log", ",", "\n", "logdir", ",", "\n", ")", "\n", "\n", "self", ".", "noise_rate", "=", "noise_rate", "\n", "self", ".", "method", "=", "method", ".", "upper", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.noisy.messy_collab.MessyCollab.train_teacher": [[70, 156], ["messy_collab.MessyCollab.teacher_model.train", "len", "copy.deepcopy", "print", "range", "messy_collab.MessyCollab.teacher_model.load_state_dict", "messy_collab.MessyCollab.teacher_model.state_dict", "messy_collab.MessyCollab.evaluate", "loss_arr.append", "print", "messy_collab.MessyCollab.post_epoch_call", "os.path.isdir", "matplotlib.plot", "data.to.to.to", "label.to.to.to", "messy_collab.MessyCollab.teacher_model", "isinstance", "messy_collab.MessyCollab.argmax", "messy_collab.MessyCollab.argmax.eq().sum().item", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "messy_collab.MessyCollab.optimizer_teacher.zero_grad", "torch.cross_entropy.backward", "messy_collab.MessyCollab.optimizer_teacher.step", "copy.deepcopy", "messy_collab.MessyCollab.writer.add_scalar", "messy_collab.MessyCollab.writer.add_scalar", "messy_collab.MessyCollab.writer.add_scalar", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "os.mkdir", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "range", "messy_collab.MessyCollab.teacher_model.state_dict", "messy_collab.MessyCollab.teacher_model.state_dict", "messy_collab.MessyCollab.teacher_model.state_dict", "int", "random.randint", "messy_collab.MessyCollab.argmax.eq().sum", "messy_collab.MessyCollab.argmax.eq", "label.to.to.view_as"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.self_training.SelfTraining.evaluate", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.mean_teacher.mean_teacher.MeanTeacher.post_epoch_call"], ["", "def", "train_teacher", "(", "\n", "self", ",", "\n", "epochs", "=", "20", ",", "\n", "plot_losses", "=", "True", ",", "\n", "save_model", "=", "True", ",", "\n", "save_model_pth", "=", "\"./models/teacher.pt\"", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Function that will be training the teacher\n\n        :param epochs (int): Number of epochs you want to train the teacher\n        :param plot_losses (bool): True if you want to plot the losses\n        :param save_model (bool): True if you want to save the teacher model\n        :param save_model_pth (str): Path where you want to store the teacher model\n        \"\"\"", "\n", "self", ".", "teacher_model", ".", "train", "(", ")", "\n", "loss_arr", "=", "[", "]", "\n", "length_of_dataset", "=", "len", "(", "self", ".", "train_loader", ".", "dataset", ")", "\n", "best_acc", "=", "0.0", "\n", "self", ".", "best_teacher_model_weights", "=", "deepcopy", "(", "self", ".", "teacher_model", ".", "state_dict", "(", ")", ")", "\n", "\n", "print", "(", "\"Training Teacher... \"", ")", "\n", "\n", "for", "ep", "in", "range", "(", "epochs", ")", ":", "\n", "            ", "epoch_loss", "=", "0.0", "\n", "correct", "=", "0", "\n", "for", "(", "data", ",", "label", ")", "in", "self", ".", "train_loader", ":", "\n", "                ", "data", "=", "data", ".", "to", "(", "self", ".", "device", ")", "\n", "label", "=", "label", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "self", ".", "method", "in", "(", "\"T\"", ",", "\"TS\"", ")", ":", "\n", "                    ", "for", "i", "in", "range", "(", "int", "(", "self", ".", "noise_rate", "*", "data", ".", "shape", "[", "0", "]", ")", ")", ":", "\n", "                        ", "perturbation", "=", "random", ".", "randint", "(", "0", ",", "data", ".", "shape", "[", "1", "]", "-", "1", ")", "\n", "if", "perturbation", "!=", "label", "[", "i", "]", ":", "\n", "                            ", "label", "[", "i", "]", "=", "perturbation", "\n", "", "else", ":", "\n", "                            ", "try", ":", "\n", "                                ", "perturbation", "+", "1", "<", "data", ".", "shape", "[", "1", "]", "\n", "label", "[", "i", "]", "=", "perturbation", "+", "1", "\n", "", "except", ":", "\n", "                                ", "label", "[", "i", "]", "=", "perturbation", "-", "1", "\n", "", "", "", "", "out", "=", "self", ".", "teacher_model", "(", "data", ")", "\n", "\n", "if", "isinstance", "(", "out", ",", "tuple", ")", ":", "\n", "                    ", "out", "=", "out", "[", "0", "]", "\n", "\n", "", "pred", "=", "out", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "correct", "+=", "pred", ".", "eq", "(", "label", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "out", ",", "label", ")", "\n", "\n", "self", ".", "optimizer_teacher", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_teacher", ".", "step", "(", ")", "\n", "\n", "epoch_loss", "+=", "loss", "\n", "\n", "", "epoch_acc", "=", "correct", "/", "length_of_dataset", "\n", "epoch_val_acc", "=", "self", ".", "evaluate", "(", "teacher", "=", "True", ")", "\n", "\n", "if", "epoch_val_acc", ">", "best_acc", ":", "\n", "                ", "best_acc", "=", "epoch_val_acc", "\n", "self", ".", "best_teacher_model_weights", "=", "deepcopy", "(", "\n", "self", ".", "teacher_model", ".", "state_dict", "(", ")", "\n", ")", "\n", "\n", "", "if", "self", ".", "log", ":", "\n", "                ", "self", ".", "writer", ".", "add_scalar", "(", "\"Training loss/Teacher\"", ",", "epoch_loss", ",", "epochs", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "\"Training accuracy/Teacher\"", ",", "epoch_acc", ",", "epochs", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "\n", "\"Validation accuracy/Teacher\"", ",", "epoch_val_acc", ",", "epochs", "\n", ")", "\n", "\n", "", "loss_arr", ".", "append", "(", "epoch_loss", ")", "\n", "print", "(", "f\"Epoch: {ep+1}, Loss: {epoch_loss}, Accuracy: {epoch_acc}\"", ")", "\n", "\n", "self", ".", "post_epoch_call", "(", "ep", ")", "\n", "\n", "", "self", ".", "teacher_model", ".", "load_state_dict", "(", "self", ".", "best_teacher_model_weights", ")", "\n", "if", "save_model", ":", "\n", "            ", "if", "os", ".", "path", ".", "isdir", "(", "\"./models\"", ")", ":", "\n", "                ", "torch", ".", "save", "(", "self", ".", "teacher_model", ".", "state_dict", "(", ")", ",", "save_model_pth", ")", "\n", "", "else", ":", "\n", "                ", "os", ".", "mkdir", "(", "\"./models\"", ")", "\n", "torch", ".", "save", "(", "self", ".", "teacher_model", ".", "state_dict", "(", ")", ",", "save_model_pth", ")", "\n", "", "", "if", "plot_losses", ":", "\n", "            ", "plt", ".", "plot", "(", "loss_arr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.noisy.messy_collab.MessyCollab._train_student": [[157, 243], ["messy_collab.MessyCollab.teacher_model.eval", "messy_collab.MessyCollab.student_model.train", "len", "copy.deepcopy", "print", "range", "messy_collab.MessyCollab.student_model.load_state_dict", "messy_collab.MessyCollab.student_model.state_dict", "messy_collab.MessyCollab.evaluate", "loss_arr.append", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "matplotlib.plot", "data.to.to.to", "label.to.to.to", "messy_collab.MessyCollab.student_model", "messy_collab.MessyCollab.teacher_model", "messy_collab.MessyCollab.calculate_kd_loss", "isinstance", "messy_collab.MessyCollab.argmax", "messy_collab.MessyCollab.argmax.eq().sum().item", "messy_collab.MessyCollab.optimizer_student.zero_grad", "messy_collab.MessyCollab.backward", "messy_collab.MessyCollab.optimizer_student.step", "copy.deepcopy", "messy_collab.MessyCollab.writer.add_scalar", "messy_collab.MessyCollab.writer.add_scalar", "messy_collab.MessyCollab.writer.add_scalar", "messy_collab.MessyCollab.student_model.state_dict", "range", "messy_collab.MessyCollab.student_model.state_dict", "int", "random.randint", "messy_collab.MessyCollab.argmax.eq().sum", "messy_collab.MessyCollab.argmax.eq", "label.to.to.view_as"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.self_training.SelfTraining.evaluate", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.mean_teacher.mean_teacher.MeanTeacher.calculate_kd_loss"], ["", "", "def", "_train_student", "(", "\n", "self", ",", "\n", "epochs", "=", "10", ",", "\n", "plot_losses", "=", "True", ",", "\n", "save_model", "=", "True", ",", "\n", "save_model_pth", "=", "\"./models/student.pth\"", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Function to train student model - for internal use only.\n\n        :param epochs (int): Number of epochs you want to train the teacher\n        :param plot_losses (bool): True if you want to plot the losses\n        :param save_model (bool): True if you want to save the student model\n        :param save_model_pth (str): Path where you want to save the student model\n        \"\"\"", "\n", "self", ".", "teacher_model", ".", "eval", "(", ")", "\n", "self", ".", "student_model", ".", "train", "(", ")", "\n", "loss_arr", "=", "[", "]", "\n", "length_of_dataset", "=", "len", "(", "self", ".", "train_loader", ".", "dataset", ")", "\n", "best_acc", "=", "0.0", "\n", "self", ".", "best_student_model_weights", "=", "deepcopy", "(", "self", ".", "student_model", ".", "state_dict", "(", ")", ")", "\n", "\n", "print", "(", "\"\\nTraining student...\"", ")", "\n", "\n", "for", "ep", "in", "range", "(", "epochs", ")", ":", "\n", "            ", "epoch_loss", "=", "0.0", "\n", "correct", "=", "0", "\n", "\n", "for", "(", "data", ",", "label", ")", "in", "self", ".", "train_loader", ":", "\n", "\n", "                ", "data", "=", "data", ".", "to", "(", "self", ".", "device", ")", "\n", "label", "=", "label", ".", "to", "(", "self", ".", "device", ")", "\n", "if", "self", ".", "method", "in", "(", "\"S\"", ",", "\"TS\"", ")", ":", "\n", "                    ", "for", "i", "in", "range", "(", "int", "(", "self", ".", "noise_rate", "*", "data", ".", "shape", "[", "0", "]", ")", ")", ":", "\n", "                        ", "perturbation", "=", "random", ".", "randint", "(", "0", ",", "data", ".", "shape", "[", "1", "]", "-", "1", ")", "\n", "if", "perturbation", "!=", "label", "[", "i", "]", ":", "\n", "                            ", "label", "[", "i", "]", "=", "perturbation", "\n", "", "else", ":", "\n", "                            ", "try", ":", "\n", "                                ", "perturbation", "+", "1", "<", "data", ".", "shape", "[", "1", "]", "\n", "label", "[", "i", "]", "=", "perturbation", "+", "1", "\n", "", "except", ":", "\n", "                                ", "label", "[", "i", "]", "=", "perturbation", "-", "1", "\n", "\n", "", "", "", "", "student_out", "=", "self", ".", "student_model", "(", "data", ")", "\n", "teacher_out", "=", "self", ".", "teacher_model", "(", "data", ")", "\n", "\n", "loss", "=", "self", ".", "calculate_kd_loss", "(", "student_out", ",", "teacher_out", ",", "label", ")", "\n", "\n", "if", "isinstance", "(", "student_out", ",", "tuple", ")", ":", "\n", "                    ", "student_out", "=", "student_out", "[", "0", "]", "\n", "\n", "", "pred", "=", "student_out", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "correct", "+=", "pred", ".", "eq", "(", "label", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "self", ".", "optimizer_student", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_student", ".", "step", "(", ")", "\n", "\n", "epoch_loss", "+=", "loss", "\n", "\n", "", "epoch_acc", "=", "correct", "/", "length_of_dataset", "\n", "\n", "epoch_val_acc", "=", "self", ".", "evaluate", "(", "teacher", "=", "False", ")", "\n", "\n", "if", "epoch_val_acc", ">", "best_acc", ":", "\n", "                ", "best_acc", "=", "epoch_val_acc", "\n", "self", ".", "best_student_model_weights", "=", "deepcopy", "(", "\n", "self", ".", "student_model", ".", "state_dict", "(", ")", "\n", ")", "\n", "\n", "", "if", "self", ".", "log", ":", "\n", "                ", "self", ".", "writer", ".", "add_scalar", "(", "\"Training loss/Student\"", ",", "epoch_loss", ",", "epochs", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "\"Training accuracy/Student\"", ",", "epoch_acc", ",", "epochs", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "\n", "\"Validation accuracy/Student\"", ",", "epoch_val_acc", ",", "epochs", "\n", ")", "\n", "\n", "", "loss_arr", ".", "append", "(", "epoch_loss", ")", "\n", "print", "(", "f\"Epoch: {ep+1}, Loss: {epoch_loss}, Accuracy: {epoch_acc}\"", ")", "\n", "\n", "", "self", ".", "student_model", ".", "load_state_dict", "(", "self", ".", "best_student_model_weights", ")", "\n", "if", "save_model", ":", "\n", "            ", "torch", ".", "save", "(", "self", ".", "student_model", ".", "state_dict", "(", ")", ",", "save_model_pth", ")", "\n", "", "if", "plot_losses", ":", "\n", "            ", "plt", ".", "plot", "(", "loss_arr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.noisy.messy_collab.MessyCollab.calculate_kd_loss": [[244, 259], ["torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "messy_collab.MessyCollab.loss_fn", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], ["", "", "def", "calculate_kd_loss", "(", "self", ",", "y_pred_student", ",", "y_pred_teacher", ",", "y_true", ")", ":", "\n", "        ", "\"\"\"\n        Function used for calculating the KD loss during distillation\n\n        :param y_pred_student (torch.FloatTensor): Prediction made by the student model\n        :param y_pred_teacher (torch.FloatTensor): Prediction made by the teacher model\n        :param y_true (torch.FloatTensor): Original label\n        \"\"\"", "\n", "loss", "=", "(", "1.0", "-", "self", ".", "distil_weight", ")", "*", "F", ".", "cross_entropy", "(", "y_pred_student", ",", "y_true", ")", "\n", "loss", "+=", "(", "self", ".", "distil_weight", "*", "self", ".", "temp", "*", "self", ".", "temp", ")", "*", "self", ".", "loss_fn", "(", "\n", "F", ".", "log_softmax", "(", "y_pred_student", "/", "self", ".", "temp", ",", "dim", "=", "1", ")", ",", "\n", "F", ".", "softmax", "(", "y_pred_teacher", "/", "self", ".", "temp", ",", "dim", "=", "1", ")", ",", "\n", ")", "\n", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.noisy.utils.add_noise": [[4, 13], ["torch.randn_like"], "function", ["None"], ["\n", "import", "random", "\n", "from", "contextlib", "import", "closing", "\n", "from", "multiprocessing", "import", "Pool", "\n", "\n", "import", "numpy", "as", "np", "\n", "import", "pandas", "as", "pd", "\n", "import", "torch", "\n", "from", "torch", ".", "utils", ".", "data", "import", "(", "\n", "DataLoader", ",", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.DML.dml.DML.__init__": [[26, 57], ["torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.MSELoss", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "print", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "student_cohort", ",", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "student_optimizers", ",", "\n", "loss_fn", "=", "nn", ".", "MSELoss", "(", ")", ",", "\n", "device", "=", "\"cpu\"", ",", "\n", "log", "=", "False", ",", "\n", "logdir", "=", "\"./Experiments\"", ",", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "student_cohort", "=", "student_cohort", "\n", "self", ".", "train_loader", "=", "train_loader", "\n", "self", ".", "val_loader", "=", "val_loader", "\n", "self", ".", "student_optimizers", "=", "student_optimizers", "\n", "self", ".", "loss_fn", "=", "loss_fn", "\n", "self", ".", "log", "=", "log", "\n", "self", ".", "logdir", "=", "logdir", "\n", "\n", "if", "self", ".", "log", ":", "\n", "            ", "self", ".", "writer", "=", "SummaryWriter", "(", "logdir", ")", "\n", "\n", "", "try", ":", "\n", "            ", "torch", ".", "Tensor", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "device", "=", "device", "\n", "", "except", ":", "\n", "            ", "print", "(", "\n", "\"Either an invalid device or CUDA is not available. Defaulting to CPU.\"", "\n", ")", "\n", "self", ".", "device", "=", "\"cpu\"", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.DML.dml.DML.train_students": [[58, 152], ["len", "copy.deepcopy", "len", "print", "range", "dml.DML.best_student.load_state_dict", "student.train", "dml.DML.student_cohort[].state_dict", "enumerate", "print", "loss_arr.append", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "print", "matplotlib.plot", "data.to.to.to", "label.to.to.to", "range", "enumerate", "max", "avg_student_loss.item", "dml.DML._evaluate_model", "dml.DML.writer.add_scalar", "dml.DML.writer.add_scalar", "dml.DML.best_student.state_dict", "torch.zero_grad", "torch.zero_grad", "torch.zero_grad", "torch.zero_grad", "range", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "student_loss.backward", "dml.DML.student_optimizers[].step", "predictions.append", "correct_preds.append", "copy.deepcopy", "dml.DML.loss_fn", "student().argmax", "predictions[].eq().sum().item", "student.state_dict", "student", "predictions[].eq().sum", "predictions[].eq", "label.to.to.view_as"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.DML.dml.DML._evaluate_model"], ["", "", "def", "train_students", "(", "\n", "self", ",", "\n", "epochs", "=", "20", ",", "\n", "plot_losses", "=", "True", ",", "\n", "save_model", "=", "True", ",", "\n", "save_model_path", "=", "\"./models/student.pth\"", ",", "\n", ")", ":", "\n", "\n", "        ", "for", "student", "in", "self", ".", "student_cohort", ":", "\n", "            ", "student", ".", "train", "(", ")", "\n", "\n", "", "loss_arr", "=", "[", "]", "\n", "\n", "length_of_dataset", "=", "len", "(", "self", ".", "train_loader", ".", "dataset", ")", "\n", "best_acc", "=", "0.0", "\n", "self", ".", "best_student_model_weights", "=", "deepcopy", "(", "self", ".", "student_cohort", "[", "0", "]", ".", "state_dict", "(", ")", ")", "\n", "self", ".", "best_student", "=", "self", ".", "student_cohort", "[", "0", "]", "\n", "best_student_id", "=", "0", "\n", "num_students", "=", "len", "(", "self", ".", "student_cohort", ")", "\n", "\n", "print", "(", "\"\\nTraining students...\"", ")", "\n", "\n", "for", "ep", "in", "range", "(", "epochs", ")", ":", "\n", "            ", "epoch_loss", "=", "0.0", "\n", "correct", "=", "0", "\n", "\n", "for", "(", "data", ",", "label", ")", "in", "self", ".", "train_loader", ":", "\n", "\n", "                ", "data", "=", "data", ".", "to", "(", "self", ".", "device", ")", "\n", "label", "=", "label", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "for", "optim", "in", "self", ".", "student_optimizers", ":", "\n", "                    ", "optim", ".", "zero_grad", "(", ")", "\n", "\n", "", "avg_student_loss", "=", "0", "\n", "for", "i", "in", "range", "(", "num_students", ")", ":", "\n", "                    ", "student_loss", "=", "0", "\n", "for", "j", "in", "range", "(", "num_students", ")", ":", "\n", "                        ", "if", "i", "==", "j", ":", "\n", "                            ", "continue", "\n", "", "student_loss", "+=", "self", ".", "loss_fn", "(", "\n", "self", ".", "student_cohort", "[", "i", "]", "(", "data", ")", ",", "self", ".", "student_cohort", "[", "j", "]", "(", "data", ")", "\n", ")", "\n", "", "student_loss", "/=", "num_students", "-", "1", "\n", "student_loss", "+=", "F", ".", "cross_entropy", "(", "self", ".", "student_cohort", "[", "i", "]", "(", "data", ")", ",", "label", ")", "\n", "student_loss", ".", "backward", "(", ")", "\n", "self", ".", "student_optimizers", "[", "i", "]", ".", "step", "(", ")", "\n", "\n", "avg_student_loss", "+=", "student_loss", "\n", "\n", "", "avg_student_loss", "/=", "num_students", "\n", "\n", "predictions", "=", "[", "]", "\n", "correct_preds", "=", "[", "]", "\n", "for", "i", ",", "student", "in", "enumerate", "(", "self", ".", "student_cohort", ")", ":", "\n", "                    ", "predictions", ".", "append", "(", "student", "(", "data", ")", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ")", "\n", "correct_preds", ".", "append", "(", "\n", "predictions", "[", "i", "]", ".", "eq", "(", "label", ".", "view_as", "(", "predictions", "[", "i", "]", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", ")", "\n", "\n", "", "correct", "+=", "max", "(", "correct_preds", ")", "\n", "\n", "epoch_loss", "+=", "avg_student_loss", ".", "item", "(", ")", "\n", "\n", "", "epoch_acc", "=", "correct", "/", "length_of_dataset", "\n", "\n", "for", "student_id", ",", "student", "in", "enumerate", "(", "self", ".", "student_cohort", ")", ":", "\n", "                ", "_", ",", "epoch_val_acc", "=", "self", ".", "_evaluate_model", "(", "student", ")", "\n", "\n", "if", "epoch_val_acc", ">", "best_acc", ":", "\n", "                    ", "best_acc", "=", "epoch_val_acc", "\n", "self", ".", "best_student_model_weights", "=", "deepcopy", "(", "student", ".", "state_dict", "(", ")", ")", "\n", "self", ".", "best_student", "=", "student", "\n", "best_student_id", "=", "student_id", "\n", "\n", "", "", "print", "(", "\n", "f\"The best student model is the model with index {best_student_id} in the cohort\"", "\n", ")", "\n", "\n", "if", "self", ".", "log", ":", "\n", "                ", "self", ".", "writer", ".", "add_scalar", "(", "\"Training loss/Student\"", ",", "epoch_loss", ",", "epochs", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "\"Training accuracy/Student\"", ",", "epoch_acc", ",", "epochs", ")", "\n", "\n", "", "loss_arr", ".", "append", "(", "epoch_loss", ")", "\n", "print", "(", "f\"Epoch: {ep+1}, Loss: {epoch_loss}, Accuracy: {epoch_acc}\"", ")", "\n", "\n", "", "self", ".", "best_student", ".", "load_state_dict", "(", "self", ".", "best_student_model_weights", ")", "\n", "if", "save_model", ":", "\n", "            ", "torch", ".", "save", "(", "self", ".", "best_student", ".", "state_dict", "(", ")", ",", "save_model_path", ")", "\n", "print", "(", "\n", "f\"Saved the model weights of the best performing student! (with index {best_student_id} in the cohort)\"", "\n", ")", "\n", "", "if", "plot_losses", ":", "\n", "            ", "plt", ".", "plot", "(", "loss_arr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.DML.dml.DML._evaluate_model": [[153, 184], ["model.eval", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "print", "data.to.to.to", "target.to.to.to", "model", "isinstance", "outputs.append", "model.argmax", "model.argmax.eq().sum().item", "model.argmax.eq().sum", "model.argmax.eq", "target.to.to.view_as"], "methods", ["None"], ["", "", "def", "_evaluate_model", "(", "self", ",", "model", ",", "verbose", "=", "True", ")", ":", "\n", "        ", "\"\"\"\n        Evaluate the given model's accuaracy over val set.\n        For internal use only.\n\n        :param model (nn.Module): Model to be used for evaluation\n        :param verbose (bool): Display Accuracy\n        \"\"\"", "\n", "model", ".", "eval", "(", ")", "\n", "length_of_dataset", "=", "len", "(", "self", ".", "val_loader", ".", "dataset", ")", "\n", "correct", "=", "0", "\n", "outputs", "=", "[", "]", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "data", ",", "target", "in", "self", ".", "val_loader", ":", "\n", "                ", "data", "=", "data", ".", "to", "(", "self", ".", "device", ")", "\n", "target", "=", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "\n", "if", "isinstance", "(", "output", ",", "tuple", ")", ":", "\n", "                    ", "output", "=", "output", "[", "0", "]", "\n", "", "outputs", ".", "append", "(", "output", ")", "\n", "\n", "pred", "=", "output", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "", "if", "verbose", ":", "\n", "            ", "print", "(", "f\"Accuracy: {correct/length_of_dataset}\"", ")", "\n", "\n", "", "epoch_val_acc", "=", "correct", "/", "length_of_dataset", "\n", "return", "outputs", ",", "epoch_val_acc", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.DML.dml.DML.evaluate": [[185, 196], ["enumerate", "print", "copy.deepcopy().to", "print", "dml.DML._evaluate_model", "copy.deepcopy"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.DML.dml.DML._evaluate_model"], ["", "def", "evaluate", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Evaluate method for printing accuracies of the trained student networks\n\n        \"\"\"", "\n", "\n", "for", "i", ",", "student", "in", "enumerate", "(", "self", ".", "student_cohort", ")", ":", "\n", "            ", "print", "(", "\"-\"", "*", "80", ")", "\n", "model", "=", "deepcopy", "(", "student", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "print", "(", "f\"Evaluating student {i}\"", ")", "\n", "_", ",", "_", "=", "self", ".", "_evaluate_model", "(", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.DML.dml.DML.get_parameters": [[197, 206], ["print", "enumerate", "sum", "print", "p.numel", "student.parameters"], "methods", ["None"], ["", "", "def", "get_parameters", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get the number of parameters for the teacher and the student network\n        \"\"\"", "\n", "\n", "print", "(", "\"-\"", "*", "80", ")", "\n", "for", "i", ",", "student", "in", "enumerate", "(", "self", ".", "student_cohort", ")", ":", "\n", "            ", "student_params", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "student", ".", "parameters", "(", ")", ")", "\n", "print", "(", "f\"Total parameters for the student network {i} are: {student_params}\"", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.CSKD.sampler.PairBatchSampler.__init__": [[31, 35], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset", ",", "batch_size", ",", "num_iterations", "=", "None", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "num_iterations", "=", "num_iterations", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.CSKD.sampler.PairBatchSampler.__iter__": [[36, 52], ["list", "random.shuffle", "range", "range", "len", "len", "random.sample", "sampler.PairBatchSampler.dataset.get_class", "pair_indices.append", "range", "random.choice", "len"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.CSKD.sampler.DatasetWrapper.get_class"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "indices", "=", "list", "(", "range", "(", "len", "(", "self", ".", "dataset", ")", ")", ")", "\n", "random", ".", "shuffle", "(", "indices", ")", "\n", "for", "k", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "            ", "if", "self", ".", "num_iterations", "is", "None", ":", "\n", "                ", "offset", "=", "k", "*", "self", ".", "batch_size", "\n", "batch_indices", "=", "indices", "[", "offset", ":", "offset", "+", "self", ".", "batch_size", "]", "\n", "", "else", ":", "\n", "                ", "batch_indices", "=", "random", ".", "sample", "(", "range", "(", "len", "(", "self", ".", "dataset", ")", ")", ",", "self", ".", "batch_size", ")", "\n", "\n", "", "pair_indices", "=", "[", "]", "\n", "for", "idx", "in", "batch_indices", ":", "\n", "                ", "y", "=", "self", ".", "dataset", ".", "get_class", "(", "idx", ")", "\n", "pair_indices", ".", "append", "(", "random", ".", "choice", "(", "self", ".", "dataset", ".", "classwise_indices", "[", "y", "]", ")", ")", "\n", "\n", "", "yield", "batch_indices", "+", "pair_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.CSKD.sampler.PairBatchSampler.__len__": [[53, 58], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "num_iterations", "is", "None", ":", "\n", "            ", "return", "(", "len", "(", "self", ".", "dataset", ")", "+", "self", ".", "batch_size", "-", "1", ")", "//", "self", ".", "batch_size", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "num_iterations", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.CSKD.sampler.DatasetWrapper.__init__": [[68, 90], ["torchvision.__version__.startswith", "collections.defaultdict", "range", "list", "isinstance", "len", "sampler.DatasetWrapper.classwise_indices[].append", "max", "range", "sampler.DatasetWrapper.classwise_indices.keys", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dataset", ",", "indices", "=", "None", ")", ":", "\n", "        ", "self", ".", "base_dataset", "=", "dataset", "\n", "if", "indices", "is", "None", ":", "\n", "            ", "self", ".", "indices", "=", "list", "(", "range", "(", "len", "(", "dataset", ")", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "indices", "=", "indices", "\n", "\n", "# torchvision 0.2.0 compatibility", "\n", "", "if", "torchvision", ".", "__version__", ".", "startswith", "(", "\"0.2\"", ")", ":", "\n", "            ", "if", "isinstance", "(", "self", ".", "base_dataset", ",", "datasets", ".", "ImageFolder", ")", ":", "\n", "                ", "self", ".", "base_dataset", ".", "targets", "=", "[", "s", "[", "1", "]", "for", "s", "in", "self", ".", "base_dataset", ".", "imgs", "]", "\n", "", "else", ":", "\n", "                ", "if", "self", ".", "base_dataset", ".", "train", ":", "\n", "                    ", "self", ".", "base_dataset", ".", "targets", "=", "self", ".", "base_dataset", ".", "train_labels", "\n", "", "else", ":", "\n", "                    ", "self", ".", "base_dataset", ".", "targets", "=", "self", ".", "base_dataset", ".", "test_labels", "\n", "\n", "", "", "", "self", ".", "classwise_indices", "=", "defaultdict", "(", "list", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ")", ")", ":", "\n", "            ", "y", "=", "self", ".", "base_dataset", ".", "targets", "[", "self", ".", "indices", "[", "i", "]", "]", "\n", "self", ".", "classwise_indices", "[", "y", "]", ".", "append", "(", "i", ")", "\n", "", "self", ".", "num_classes", "=", "max", "(", "self", ".", "classwise_indices", ".", "keys", "(", ")", ")", "+", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.CSKD.sampler.DatasetWrapper.__getitem__": [[91, 93], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "self", ".", "base_dataset", "[", "self", ".", "indices", "[", "i", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.CSKD.sampler.DatasetWrapper.__len__": [[94, 96], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.CSKD.sampler.DatasetWrapper.get_class": [[97, 99], ["None"], "methods", ["None"], ["", "def", "get_class", "(", "self", ",", "i", ")", ":", "\n", "        ", "return", "self", ".", "base_dataset", ".", "targets", "[", "self", ".", "indices", "[", "i", "]", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.CSKD.sampler.load_dataset": [[101, 261], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "name.startswith", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "os.path.join", "os.path.join", "sampler.DatasetWrapper", "sampler.DatasetWrapper", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "sampler.DatasetWrapper", "sampler.DatasetWrapper", "Exception", "torch.utils.data.BatchSampler", "torch.utils.data.BatchSampler", "Exception", "get_train_sampler", "get_test_sampler", "torchvision.datasets.ImageFolder", "torchvision.datasets.ImageFolder", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "os.path.join", "os.path.join", "sampler.DatasetWrapper", "sampler.DatasetWrapper", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "os.path.join", "os.path.join", "sampler.DatasetWrapper", "sampler.DatasetWrapper", "CIFAR", "CIFAR", "torch.utils.data.RandomSampler", "torch.utils.data.SequentialSampler", "sampler.PairBatchSampler", "torch.utils.data.BatchSampler", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.datasets.ImageFolder", "torchvision.datasets.ImageFolder", "torchvision.datasets.ImageFolder", "torchvision.datasets.ImageFolder", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torch.utils.data.SequentialSampler", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["None"], ["", "", "def", "load_dataset", "(", "name", ",", "root", ",", "sample", "=", "\"default\"", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"\n    Default dataset wrapper\n\n    :param name (string): Name of the dataset (Out of cifar10/100, imagenet, tinyimagenet, CUB200, STANFORD120, MIT67).\n    :param root (string): Path to download the dataset.\n    :param sample (string): Default (random) sampling as the classic pytorch dataloader or Pairwise sampling as mentioned in\n    the paper \"Regularizing Class-wise Predictions via Self-knowledge Distillation\"\n    \"\"\"", "\n", "\n", "# Dataset", "\n", "if", "name", "in", "[", "\"imagenet\"", ",", "\"tinyimagenet\"", ",", "\"CUB200\"", ",", "\"STANFORD120\"", ",", "\"MIT67\"", "]", ":", "\n", "        ", "if", "name", "==", "\"tinyimagenet\"", ":", "\n", "            ", "transform_train", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "32", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ",", "\n", "]", "\n", ")", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "Resize", "(", "32", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "train_val_dataset_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "\"train\"", ")", "\n", "test_dataset_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "\"val\"", ")", "\n", "\n", "trainset", "=", "DatasetWrapper", "(", "\n", "datasets", ".", "ImageFolder", "(", "\n", "root", "=", "train_val_dataset_dir", ",", "transform", "=", "transform_train", "\n", ")", "\n", ")", "\n", "valset", "=", "DatasetWrapper", "(", "\n", "datasets", ".", "ImageFolder", "(", "root", "=", "test_dataset_dir", ",", "transform", "=", "transform_test", ")", "\n", ")", "\n", "\n", "", "elif", "name", "==", "\"imagenet\"", ":", "\n", "            ", "transform_train", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ",", "\n", "]", "\n", ")", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ",", "\n", "]", "\n", ")", "\n", "train_val_dataset_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "\"train\"", ")", "\n", "test_dataset_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "\"val\"", ")", "\n", "\n", "trainset", "=", "DatasetWrapper", "(", "\n", "datasets", ".", "ImageFolder", "(", "\n", "root", "=", "train_val_dataset_dir", ",", "transform", "=", "transform_train", "\n", ")", "\n", ")", "\n", "valset", "=", "DatasetWrapper", "(", "\n", "datasets", ".", "ImageFolder", "(", "root", "=", "test_dataset_dir", ",", "transform", "=", "transform_test", ")", "\n", ")", "\n", "\n", "", "else", ":", "\n", "            ", "transform_train", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ",", "\n", "]", "\n", ")", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.485", ",", "0.456", ",", "0.406", ")", ",", "(", "0.229", ",", "0.224", ",", "0.225", ")", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "train_val_dataset_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "name", ",", "\"train\"", ")", "\n", "test_dataset_dir", "=", "os", ".", "path", ".", "join", "(", "root", ",", "name", ",", "\"test\"", ")", "\n", "\n", "trainset", "=", "DatasetWrapper", "(", "\n", "datasets", ".", "ImageFolder", "(", "\n", "root", "=", "train_val_dataset_dir", ",", "transform", "=", "transform_train", "\n", ")", "\n", ")", "\n", "valset", "=", "DatasetWrapper", "(", "\n", "datasets", ".", "ImageFolder", "(", "root", "=", "test_dataset_dir", ",", "transform", "=", "transform_test", ")", "\n", ")", "\n", "\n", "", "", "elif", "name", ".", "startswith", "(", "\"cifar\"", ")", ":", "\n", "        ", "transform_train", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "\n", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", "\n", ")", ",", "\n", "]", "\n", ")", "\n", "transform_test", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "\n", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", "\n", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "if", "name", "==", "\"cifar10\"", ":", "\n", "            ", "CIFAR", "=", "datasets", ".", "CIFAR10", "\n", "", "else", ":", "\n", "            ", "CIFAR", "=", "datasets", ".", "CIFAR100", "\n", "\n", "", "trainset", "=", "DatasetWrapper", "(", "\n", "CIFAR", "(", "root", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transform_train", ")", "\n", ")", "\n", "valset", "=", "DatasetWrapper", "(", "\n", "CIFAR", "(", "root", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "transform_test", ")", "\n", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"Unknown dataset: {}\"", ".", "format", "(", "name", ")", ")", "\n", "\n", "# Sampler", "\n", "", "if", "sample", "==", "\"default\"", ":", "\n", "        ", "get_train_sampler", "=", "lambda", "d", ":", "BatchSampler", "(", "\n", "RandomSampler", "(", "d", ")", ",", "kwargs", "[", "\"batch_size\"", "]", ",", "False", "\n", ")", "\n", "get_test_sampler", "=", "lambda", "d", ":", "BatchSampler", "(", "\n", "SequentialSampler", "(", "d", ")", ",", "kwargs", "[", "\"batch_size\"", "]", ",", "False", "\n", ")", "\n", "\n", "", "elif", "sample", "==", "\"pair\"", ":", "\n", "        ", "get_train_sampler", "=", "lambda", "d", ":", "PairBatchSampler", "(", "d", ",", "kwargs", "[", "\"batch_size\"", "]", ")", "\n", "get_test_sampler", "=", "lambda", "d", ":", "BatchSampler", "(", "\n", "SequentialSampler", "(", "d", ")", ",", "kwargs", "[", "\"batch_size\"", "]", ",", "False", "\n", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "\"Unknown sampling: {}\"", ".", "format", "(", "sampling", ")", ")", "\n", "\n", "", "train_loader", "=", "DataLoader", "(", "\n", "trainset", ",", "batch_sampler", "=", "get_train_sampler", "(", "trainset", ")", ",", "num_workers", "=", "4", "\n", ")", "\n", "val_loader", "=", "DataLoader", "(", "\n", "valset", ",", "batch_sampler", "=", "get_test_sampler", "(", "valset", ")", ",", "num_workers", "=", "4", "\n", ")", "\n", "\n", "return", "train_loader", ",", "val_loader", "\n", "", ""]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.CSKD.cskd.CSKD.__init__": [[32, 68], ["torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "KD_Lib.KD.common.BaseClass.__init__", "print"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.MeanResnet.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "teacher_model", ",", "\n", "student_model", ",", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "optimizer_teacher", ",", "\n", "optimizer_student", ",", "\n", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ",", "\n", "temp", "=", "4.0", ",", "\n", "lamda", "=", "1", ",", "\n", "distil_weight", "=", "0.4", ",", "\n", "device", "=", "\"cpu\"", ",", "\n", "log", "=", "False", ",", "\n", "logdir", "=", "\"./Experiments\"", ",", "\n", ")", ":", "\n", "        ", "super", "(", "CSKD", ",", "self", ")", ".", "__init__", "(", "\n", "teacher_model", ",", "\n", "student_model", ",", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "optimizer_teacher", ",", "\n", "optimizer_student", ",", "\n", "loss_fn", ",", "\n", "temp", ",", "\n", "distil_weight", ",", "\n", "device", ",", "\n", "log", ",", "\n", "logdir", ",", "\n", ")", "\n", "self", ".", "lamda", "=", "lamda", "\n", "if", "teacher_model", "is", "not", "None", "or", "optimizer_teacher", "is", "not", "None", ":", "\n", "            ", "print", "(", "\n", "\"Error!!! Teacher model and Teacher optimizer should be None for self-distillation, please refer to the documentation.\"", "\n", ")", "\n", "", "assert", "teacher_model", "==", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.CSKD.cskd.CSKD.calculate_kd_loss": [[69, 85], ["torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "y_pred_pair_1.size", "torch.KLDivLoss", "torch.KLDivLoss", "torch.KLDivLoss", "torch.KLDivLoss"], "methods", ["None"], ["", "def", "calculate_kd_loss", "(", "self", ",", "y_pred_pair_1", ",", "y_pred_pair_2", ")", ":", "\n", "        ", "\"\"\"\n        Function used for calculating the KD loss during distillation\n\n        :param y_pred_pair_1 (torch.FloatTensor): Prediction made by the student model for first pair elements\n        :param y_pred_pair_2 (torch.FloatTensor): Prediction made by the student models for second pair elements\n        \"\"\"", "\n", "log_p", "=", "torch", ".", "log_softmax", "(", "y_pred_pair_1", "/", "self", ".", "temp", ",", "dim", "=", "1", ")", "\n", "q", "=", "torch", ".", "softmax", "(", "y_pred_pair_2", "/", "self", ".", "temp", ",", "dim", "=", "1", ")", "\n", "loss", "=", "(", "\n", "nn", ".", "KLDivLoss", "(", "reduction", "=", "\"sum\"", ")", "(", "log_p", ",", "q", ")", "\n", "*", "(", "self", ".", "temp", "**", "2", ")", "\n", "/", "y_pred_pair_1", ".", "size", "(", "0", ")", "\n", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.CSKD.cskd.CSKD.train_distil_model": [[86, 176], ["model.train", "len", "copy.deepcopy", "range", "model.load_state_dict", "model.state_dict", "enumerate", "cskd.CSKD.evaluate", "loss_arr.append", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "matplotlib.plot", "data.to.to.to", "target.to.to.to", "data.to.to.size", "model", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean.item", "torch.mean.item", "torch.mean.item", "torch.mean.item", "cskd.CSKD.calculate_kd_loss", "cskd.CSKD.item", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "targets_.size", "pred.eq().sum().item", "optimizer.zero_grad", "torch.mean.backward", "torch.mean.backward", "torch.mean.backward", "torch.mean.backward", "optimizer.step", "torch.mean.item", "torch.mean.item", "torch.mean.item", "torch.mean.item", "copy.deepcopy", "cskd.CSKD.writer.add_scalar", "cskd.CSKD.write.add_scalar", "cskd.CSKD.writer.add_scalar", "cskd.CSKD.writer.add_scalar", "model.state_dict", "cskd.CSKD.loss_fn", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "model.detach", "model.state_dict", "pred.eq().sum", "pred.eq"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.self_training.SelfTraining.evaluate", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.mean_teacher.mean_teacher.MeanTeacher.calculate_kd_loss"], ["", "def", "train_distil_model", "(", "\n", "self", ",", "\n", "model", ",", "\n", "optimizer", ",", "\n", "epochs", "=", "20", ",", "\n", "plot_losses", "=", "True", ",", "\n", "save_model", "=", "True", ",", "\n", "save_model_pth", "=", "\"./models/student.pth\"", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Function used for distillation\n\n        :param teacher(list or tuple): Teachers used for distillation\n        :param model (nn.Module): Model learning during distillation\n        :param optimizer (torch.optim.*): Optimizer used for training\n        :param epochs (int): Number of epochs to train\n        :param plot_losses (bool): True if the loss curves need to be plotted\n        :param save_model (bool): True if the model needs to be saved\n        :param save_model_path (str): Path used for storing the model\n        \"\"\"", "\n", "\n", "model", ".", "train", "(", ")", "\n", "length_of_dataset", "=", "len", "(", "self", ".", "train_loader", ".", "dataset", ")", "\n", "best_acc", "=", "0.0", "\n", "self", ".", "best_model_weights", "=", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "epochs", ")", ":", "\n", "            ", "correct", "=", "0", "\n", "epoch_loss", "=", "0.0", "\n", "epoch_cls_loss", "=", "0.0", "\n", "train_loss", "=", "0", "\n", "total", "=", "0", "\n", "train_cls_loss", "=", "0", "\n", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "self", ".", "train_loader", ")", ":", "\n", "                ", "data", "=", "data", ".", "to", "(", "self", ".", "device", ")", "\n", "target", "=", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "batch_size", "=", "data", ".", "size", "(", "0", ")", "\n", "\n", "targets_", "=", "target", "[", ":", "batch_size", "//", "2", "]", "\n", "outputs", "=", "model", "(", "data", "[", ":", "batch_size", "//", "2", "]", ")", "\n", "loss", "=", "torch", ".", "mean", "(", "self", ".", "loss_fn", "(", "outputs", ",", "targets_", ")", ")", "\n", "train_loss", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                    ", "outputs_cls", "=", "model", "(", "data", "[", "batch_size", "//", "2", ":", "]", ")", "\n", "", "cls_loss", "=", "self", ".", "calculate_kd_loss", "(", "outputs", ",", "outputs_cls", ".", "detach", "(", ")", ")", "\n", "loss", "+=", "self", ".", "lamda", "*", "cls_loss", "\n", "train_cls_loss", "+=", "cls_loss", ".", "item", "(", ")", "\n", "\n", "_", ",", "pred", "=", "torch", ".", "max", "(", "outputs", ",", "1", ")", "\n", "total", "+=", "targets_", ".", "size", "(", "0", ")", "\n", "correct", "+=", "pred", ".", "eq", "(", "targets_", ".", "data", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "epoch_loss", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "", "epoch_acc", "=", "correct", "/", "length_of_dataset", "\n", "epoch_val_acc", "=", "self", ".", "evaluate", "(", "teacher", "=", "False", ")", "\n", "\n", "if", "epoch_val_acc", ">", "best_acc", ":", "\n", "                ", "best_acc", "=", "epoch_val_acc", "\n", "self", ".", "best_model_weights", "=", "deepcopy", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "\n", "", "if", "self", ".", "log", ":", "\n", "                ", "self", ".", "writer", ".", "add_scalar", "(", "\n", "\"Training loss/Student\"", ",", "epoch_loss", "/", "batch_idx", ",", "epochs", "\n", ")", "\n", "self", ".", "write", ".", "add_scalar", "(", "\n", "\"Training Cls loss/Student\"", ",", "train_cls_loss", "/", "batch_idx", ",", "epochs", "\n", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "\"Training accuracy/Student\"", ",", "epoch_acc", ",", "epochs", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "\n", "\"Validation accuracy/Student\"", ",", "epoch_val_acc", ",", "epochs", "\n", ")", "\n", "\n", "", "loss_arr", ".", "append", "(", "epoch_loss", ")", "\n", "\n", "print", "(", "\n", "f\"Epoch: {epoch+1}, Loss: {epoch_loss/batch_idx} Loss_cls: {train_cls_loss/batch_idx}, Accuracy: {epoch_acc*100.}\"", "\n", ")", "\n", "\n", "", "model", ".", "load_state_dict", "(", "self", ".", "best_model_weights", ")", "\n", "if", "save_model", ":", "\n", "            ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "save_model_pth", ")", "\n", "\n", "", "if", "plot_losses", ":", "\n", "            ", "plt", ".", "plot", "(", "loss_arr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.CSKD.cskd.CSKD.train_student": [[177, 199], ["cskd.CSKD.train_distil_model"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.CSKD.cskd.CSKD.train_distil_model"], ["", "", "def", "train_student", "(", "\n", "self", ",", "\n", "epochs", "=", "20", ",", "\n", "plot_losses", "=", "True", ",", "\n", "save_model", "=", "True", ",", "\n", "save_model_pth", "=", "\"./models/student.pth\"", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Function used for distilling knowledge to student\n\n        :param plot_losses (bool): True if the loss curves need to be plotted\n        :param save_model (bool): True if the model needs to be saved\n        :param save_model_path (str): Path used for storing the trained student model\n        \"\"\"", "\n", "\n", "self", ".", "train_distil_model", "(", "\n", "self", ".", "student_model", ",", "\n", "self", ".", "optimizer_student", ",", "\n", "epochs", ",", "\n", "plot_losses", ",", "\n", "save_model", ",", "\n", "save_model_pth", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.BANN.BANN.BANN.__init__": [[31, 64], ["torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "KD_Lib.KD.common.BaseClass.__init__", "copy.deepcopy", "copy.deepcopy", "student_model.state_dict", "optimizer.state_dict"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.MeanResnet.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "student_model", ",", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "optimizer", ",", "\n", "num_gen", ",", "\n", "loss_fn", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ",", "\n", "epoch_interval", "=", "5", ",", "\n", "temp", "=", "20.0", ",", "\n", "distil_weight", "=", "0.5", ",", "\n", "device", "=", "\"cpu\"", ",", "\n", "log", "=", "False", ",", "\n", "logdir", "=", "\"./Experiments\"", ",", "\n", ")", ":", "\n", "        ", "super", "(", "BANN", ",", "self", ")", ".", "__init__", "(", "\n", "student_model", ",", "\n", "student_model", ",", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "optimizer", ",", "\n", "optimizer", ",", "\n", "loss_fn", ",", "\n", "temp", ",", "\n", "distil_weight", ",", "\n", "device", ",", "\n", "log", ",", "\n", "logdir", ",", "\n", ")", "\n", "self", ".", "init_weights", "=", "deepcopy", "(", "student_model", ".", "state_dict", "(", ")", ")", "\n", "self", ".", "init_optim", "=", "deepcopy", "(", "optimizer", ".", "state_dict", "(", ")", ")", "\n", "self", ".", "num_gen", "=", "num_gen", "\n", "self", ".", "gen", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.BANN.BANN.BANN.train_student": [[65, 99], ["range", "save_model_pth.format", "print", "BANN.BANN._train_student", "BANN.BANN.teacher_model.load_state_dict", "BANN.BANN.student_model.load_state_dict", "BANN.BANN.optimizer_student.load_state_dict", "print", "save_model_pth.format"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.noisy.messy_collab.MessyCollab._train_student"], ["", "def", "train_student", "(", "\n", "self", ",", "\n", "epochs", "=", "10", ",", "\n", "plot_losses", "=", "False", ",", "\n", "save_model", "=", "True", ",", "\n", "save_model_pth", "=", "\"./models/student-{}.pth\"", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Function that will be training the student\n\n        :param epochs (int): Number of epochs you want to train the student per generation\n        :param plot_losses (bool): True if you want to plot the losses for every generation\n        :param save_model (bool): True if you want to save the student model (Set true if you want to use models for later evaluation)\n        :param save_model_pth (str): Path where you want to save the student model\n        \"\"\"", "\n", "try", ":", "\n", "            ", "fmt", "=", "save_model_pth", ".", "format", "(", "1", ")", "\n", "", "except", ":", "\n", "            ", "print", "(", "\"Invalid save_model_pth, allow {\\} for generation number\"", ")", "\n", "return", "\n", "", "for", "k", "in", "range", "(", "self", ".", "num_gen", ")", ":", "\n", "            ", "print", "(", "\"Born Again : Gen {}/{}\"", ".", "format", "(", "k", "+", "1", ",", "self", ".", "num_gen", ")", ")", "\n", "\n", "self", ".", "_train_student", "(", "\n", "epochs", ",", "plot_losses", ",", "save_model", ",", "save_model_pth", ".", "format", "(", "k", "+", "1", ")", "\n", ")", "\n", "\n", "# Use best model in k-1 gen as last model", "\n", "self", ".", "teacher_model", ".", "load_state_dict", "(", "self", ".", "best_student_model_weights", ")", "\n", "# Reset model for next generation", "\n", "self", ".", "student_model", ".", "load_state_dict", "(", "self", ".", "init_weights", ")", "\n", "# Reset optimizer for next generation", "\n", "self", ".", "optimizer_student", ".", "load_state_dict", "(", "self", ".", "init_optim", ")", "\n", "self", ".", "gen", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.BANN.BANN.BANN.evaluate": [[100, 133], ["print", "glob.glob", "len", "print", "len", "print", "enumerate", "print", "print", "os.path.join", "model.load_state_dict", "BANN.BANN._evaluate_model", "outputs.append", "len", "target.to.to.to", "range", "output.argmax", "output.argmax.eq().sum().item", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "output.argmax.eq().sum", "output.argmax.eq", "target.to.to.view_as"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.DML.dml.DML._evaluate_model"], ["", "", "def", "evaluate", "(", "self", ",", "models_dir", "=", "\"./models\"", ")", ":", "\n", "        ", "\"\"\"\n        Evaluate method for printing accuracies of the trained network\n\n        :param models_dir (str): Location of stored models. (default: ./models)\n        \"\"\"", "\n", "print", "(", "\"Evaluating Model Ensemble\"", ")", "\n", "models_dir", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "models_dir", ",", "\"*.pth\"", ")", ")", "\n", "len_models", "=", "len", "(", "models_dir", ")", "\n", "outputs", "=", "[", "]", "\n", "model", "=", "self", ".", "student_model", "\n", "for", "model_weight", "in", "models_dir", ":", "\n", "            ", "model", ".", "load_state_dict", "(", "torch", ".", "load", "(", "model_weight", ")", ")", "\n", "output", ",", "_", "=", "self", ".", "_evaluate_model", "(", "model", ",", "verbose", "=", "False", ")", "\n", "outputs", ".", "append", "(", "output", ")", "\n", "", "print", "(", "\"Total Models: \"", ",", "len", "(", "outputs", ")", ")", "\n", "total", "=", "len", "(", "self", ".", "val_loader", ")", "\n", "print", "(", "\"Total Samples: \"", ",", "total", ")", "\n", "correct", "=", "0", "\n", "for", "idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "self", ".", "val_loader", ")", ":", "\n", "            ", "target", "=", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "output", "=", "outputs", "[", "0", "]", "[", "idx", "]", "/", "len_models", "\n", "for", "k", "in", "range", "(", "1", ",", "len_models", ")", ":", "\n", "                ", "output", "+=", "outputs", "[", "k", "]", "[", "idx", "]", "/", "len_models", "\n", "\n", "", "pred", "=", "output", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "accuracy", "=", "{", "correct", "/", "total", "}", "\n", "print", "(", "\"-\"", "*", "80", ")", "\n", "print", "(", "f\"Accuracy: {accuracy}\"", ")", "\n", "\n", "return", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.BANN.BANN.BANN.calculate_kd_loss": [[134, 153], ["torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.softmax", "torch.softmax", "torch.softmax", "BANN.BANN.loss_fn", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.KLDivLoss", "torch.KLDivLoss", "torch.KLDivLoss"], "methods", ["None"], ["", "def", "calculate_kd_loss", "(", "self", ",", "y_pred_student", ",", "y_pred_teacher", ",", "y_true", ")", ":", "\n", "        ", "\"\"\"\n        Function used for calculating the KD loss during distillation\n\n        :param y_pred_student (Tensor): Predicted outputs from the student network\n        :param y_pred_teacher (Tensor): Predicted outputs from the teacher network\n        :param y_true (Tensor): True labels\n        \"\"\"", "\n", "if", "self", ".", "gen", "==", "0", ":", "\n", "            ", "return", "self", ".", "loss_fn", "(", "y_pred_student", ",", "y_true", ")", "\n", "\n", "", "s_i", "=", "F", ".", "log_softmax", "(", "y_pred_student", "/", "self", ".", "temp", ",", "dim", "=", "1", ")", "\n", "t_i", "=", "F", ".", "softmax", "(", "y_pred_teacher", "/", "self", ".", "temp", ",", "dim", "=", "1", ")", "\n", "KD_loss", "=", "nn", ".", "KLDivLoss", "(", ")", "(", "s_i", ",", "t_i", ")", "*", "(", "\n", "self", ".", "distil_weight", "*", "self", ".", "temp", "*", "self", ".", "temp", "\n", ")", "\n", "KD_loss", "+=", "F", ".", "cross_entropy", "(", "y_pred_student", ",", "y_true", ")", "*", "(", "1.0", "-", "self", ".", "distil_weight", ")", "\n", "\n", "return", "KD_loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.virtual_teacher.VirtualTeacher.__init__": [[30, 67], ["torch.KLDivLoss", "torch.KLDivLoss", "torch.KLDivLoss", "torch.KLDivLoss", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "print", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "student_model", ",", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "optimizer_student", ",", "\n", "loss_fn", "=", "nn", ".", "KLDivLoss", "(", ")", ",", "\n", "correct_prob", "=", "0.9", ",", "\n", "temp", "=", "10.0", ",", "\n", "distil_weight", "=", "0.5", ",", "\n", "device", "=", "\"cpu\"", ",", "\n", "log", "=", "False", ",", "\n", "logdir", "=", "\"./Experiments\"", ",", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "student_model", "=", "student_model", "\n", "self", ".", "train_loader", "=", "train_loader", "\n", "self", ".", "val_loader", "=", "val_loader", "\n", "self", ".", "optimizer_student", "=", "optimizer_student", "\n", "self", ".", "loss_fn", "=", "loss_fn", "\n", "self", ".", "correct_prob", "=", "correct_prob", "\n", "self", ".", "temp", "=", "temp", "\n", "self", ".", "distil_weight", "=", "distil_weight", "\n", "self", ".", "log", "=", "log", "\n", "self", ".", "logdir", "=", "logdir", "\n", "\n", "if", "self", ".", "log", ":", "\n", "            ", "self", ".", "writer", "=", "SummaryWriter", "(", "logdir", ")", "\n", "\n", "", "try", ":", "\n", "            ", "torch", ".", "Tensor", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "device", "=", "device", "\n", "", "except", ":", "\n", "            ", "print", "(", "\n", "\"Either an invalid device or CUDA is not available. Defaulting to CPU.\"", "\n", ")", "\n", "self", ".", "device", "=", "\"cpu\"", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.virtual_teacher.VirtualTeacher.train_student": [[68, 142], ["virtual_teacher.VirtualTeacher.student_model.train", "len", "copy.deepcopy", "print", "range", "virtual_teacher.VirtualTeacher.student_model.load_state_dict", "virtual_teacher.VirtualTeacher.student_model.state_dict", "virtual_teacher.VirtualTeacher.evaluate", "loss_arr.append", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "matplotlib.plot", "data.to.to.to", "label.to.to.to", "virtual_teacher.VirtualTeacher.student_model", "virtual_teacher.VirtualTeacher.calculate_kd_loss", "isinstance", "virtual_teacher.VirtualTeacher.argmax", "virtual_teacher.VirtualTeacher.argmax.eq().sum().item", "virtual_teacher.VirtualTeacher.optimizer_student.zero_grad", "virtual_teacher.VirtualTeacher.backward", "virtual_teacher.VirtualTeacher.optimizer_student.step", "copy.deepcopy", "virtual_teacher.VirtualTeacher.writer.add_scalar", "virtual_teacher.VirtualTeacher.writer.add_scalar", "virtual_teacher.VirtualTeacher.writer.add_scalar", "virtual_teacher.VirtualTeacher.student_model.state_dict", "virtual_teacher.VirtualTeacher.student_model.state_dict", "virtual_teacher.VirtualTeacher.argmax.eq().sum", "virtual_teacher.VirtualTeacher.argmax.eq", "label.to.to.view_as"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.self_training.SelfTraining.evaluate", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.mean_teacher.mean_teacher.MeanTeacher.calculate_kd_loss"], ["", "", "def", "train_student", "(", "\n", "self", ",", "\n", "epochs", "=", "10", ",", "\n", "plot_losses", "=", "True", ",", "\n", "save_model", "=", "True", ",", "\n", "save_model_pth", "=", "\"./models/student.pth\"", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Function that will be training the student\n\n        :param epochs (int): Number of epochs you want to train the teacher\n        :param plot_losses (bool): True if you want to plot the losses\n        :param save_model (bool): True if you want to save the student model\n        :param save_model_pth (str): Path where you want to save the student model\n        \"\"\"", "\n", "\n", "self", ".", "student_model", ".", "train", "(", ")", "\n", "loss_arr", "=", "[", "]", "\n", "length_of_dataset", "=", "len", "(", "self", ".", "train_loader", ".", "dataset", ")", "\n", "best_acc", "=", "0.0", "\n", "self", ".", "best_student_model_weights", "=", "deepcopy", "(", "self", ".", "student_model", ".", "state_dict", "(", ")", ")", "\n", "\n", "print", "(", "\"\\nTraining student...\"", ")", "\n", "\n", "for", "ep", "in", "range", "(", "epochs", ")", ":", "\n", "            ", "epoch_loss", "=", "0.0", "\n", "correct", "=", "0", "\n", "\n", "for", "(", "data", ",", "label", ")", "in", "self", ".", "train_loader", ":", "\n", "\n", "                ", "data", "=", "data", ".", "to", "(", "self", ".", "device", ")", "\n", "label", "=", "label", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "student_out", "=", "self", ".", "student_model", "(", "data", ")", "\n", "\n", "loss", "=", "self", ".", "calculate_kd_loss", "(", "student_out", ",", "label", ")", "\n", "\n", "if", "isinstance", "(", "student_out", ",", "tuple", ")", ":", "\n", "                    ", "student_out", "=", "student_out", "[", "0", "]", "\n", "\n", "", "pred", "=", "student_out", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "correct", "+=", "pred", ".", "eq", "(", "label", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "self", ".", "optimizer_student", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_student", ".", "step", "(", ")", "\n", "\n", "epoch_loss", "+=", "loss", "\n", "\n", "", "epoch_acc", "=", "correct", "/", "length_of_dataset", "\n", "\n", "epoch_val_acc", "=", "self", ".", "evaluate", "(", ")", "\n", "\n", "if", "epoch_val_acc", ">", "best_acc", ":", "\n", "                ", "best_acc", "=", "epoch_val_acc", "\n", "self", ".", "best_student_model_weights", "=", "deepcopy", "(", "\n", "self", ".", "student_model", ".", "state_dict", "(", ")", "\n", ")", "\n", "\n", "", "if", "self", ".", "log", ":", "\n", "                ", "self", ".", "writer", ".", "add_scalar", "(", "\"Training loss/Student\"", ",", "epoch_loss", ",", "epochs", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "\"Training accuracy/Student\"", ",", "epoch_acc", ",", "epochs", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "\n", "\"Validation accuracy/Student\"", ",", "epoch_val_acc", ",", "epochs", "\n", ")", "\n", "\n", "", "loss_arr", ".", "append", "(", "epoch_loss", ")", "\n", "print", "(", "f\"Epoch: {ep+1}, Loss: {epoch_loss}, Accuracy: {epoch_acc}\"", ")", "\n", "\n", "", "self", ".", "student_model", ".", "load_state_dict", "(", "self", ".", "best_student_model_weights", ")", "\n", "if", "save_model", ":", "\n", "            ", "torch", ".", "save", "(", "self", ".", "student_model", ".", "state_dict", "(", ")", ",", "save_model_pth", ")", "\n", "", "if", "plot_losses", ":", "\n", "            ", "plt", ".", "plot", "(", "loss_arr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.virtual_teacher.VirtualTeacher.calculate_kd_loss": [[143, 158], ["torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "torch.ones_like().to", "range", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "virtual_teacher.VirtualTeacher.loss_fn", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], ["", "", "def", "calculate_kd_loss", "(", "self", ",", "y_pred_student", ",", "y_true", ")", ":", "\n", "\n", "        ", "num_classes", "=", "y_pred_student", ".", "shape", "[", "1", "]", "\n", "\n", "soft_label", "=", "torch", ".", "ones_like", "(", "y_pred_student", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "soft_label", "=", "soft_label", "*", "(", "1", "-", "self", ".", "correct_prob", ")", "/", "(", "num_classes", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "y_pred_student", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "soft_label", "[", "i", ",", "y_true", "[", "i", "]", "]", "=", "self", ".", "correct_prob", "\n", "\n", "", "loss", "=", "(", "1", "-", "self", ".", "distil_weight", ")", "*", "F", ".", "cross_entropy", "(", "y_pred_student", ",", "y_true", ")", "\n", "loss", "+=", "(", "self", ".", "distil_weight", ")", "*", "self", ".", "loss_fn", "(", "\n", "F", ".", "log_softmax", "(", "y_pred_student", ",", "dim", "=", "1", ")", ",", "\n", "F", ".", "softmax", "(", "soft_label", "/", "self", ".", "temp", ",", "dim", "=", "1", ")", ",", "\n", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.virtual_teacher.VirtualTeacher.evaluate": [[159, 186], ["copy.deepcopy", "copy.deepcopy.eval", "len", "print", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "data.to.to.to", "target.to.to.to", "copy.deepcopy.", "isinstance", "copy.deepcopy.argmax", "model.argmax.eq().sum().item", "model.argmax.eq().sum", "model.argmax.eq", "target.to.to.view_as"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Evaluate method for printing accuracies of the trained network\n\n        \"\"\"", "\n", "\n", "model", "=", "deepcopy", "(", "self", ".", "student_model", ")", "\n", "model", ".", "eval", "(", ")", "\n", "length_of_dataset", "=", "len", "(", "self", ".", "val_loader", ".", "dataset", ")", "\n", "correct", "=", "0", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "data", ",", "target", "in", "self", ".", "val_loader", ":", "\n", "                ", "data", "=", "data", ".", "to", "(", "self", ".", "device", ")", "\n", "target", "=", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "\n", "if", "isinstance", "(", "output", ",", "tuple", ")", ":", "\n", "                    ", "output", "=", "output", "[", "0", "]", "\n", "\n", "", "pred", "=", "output", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "", "accuracy", "=", "correct", "/", "length_of_dataset", "\n", "print", "(", "\"-\"", "*", "80", ")", "\n", "print", "(", "f\"Accuracy: {accuracy}\"", ")", "\n", "return", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.virtual_teacher.VirtualTeacher.get_parameters": [[187, 196], ["sum", "print", "print", "p.numel", "virtual_teacher.VirtualTeacher.student_model.parameters"], "methods", ["None"], ["", "def", "get_parameters", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get the number of parameters for the student network\n        \"\"\"", "\n", "\n", "student_params", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "self", ".", "student_model", ".", "parameters", "(", ")", ")", "\n", "\n", "print", "(", "\"-\"", "*", "80", ")", "\n", "print", "(", "f\"Total parameters for the student network are: {student_params}\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.self_training.SelfTraining.__init__": [[31, 66], ["torch.KLDivLoss", "torch.KLDivLoss", "torch.KLDivLoss", "torch.KLDivLoss", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "torch.Tensor().to", "print", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "student_model", ",", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "optimizer_student", ",", "\n", "loss_fn", "=", "nn", ".", "KLDivLoss", "(", ")", ",", "\n", "temp", "=", "10.0", ",", "\n", "distil_weight", "=", "0.5", ",", "\n", "device", "=", "\"cpu\"", ",", "\n", "log", "=", "False", ",", "\n", "logdir", "=", "\"./Experiments\"", ",", "\n", ")", ":", "\n", "\n", "        ", "self", ".", "student_model", "=", "student_model", "\n", "self", ".", "train_loader", "=", "train_loader", "\n", "self", ".", "val_loader", "=", "val_loader", "\n", "self", ".", "optimizer_student", "=", "optimizer_student", "\n", "self", ".", "loss_fn", "=", "loss_fn", "\n", "self", ".", "temp", "=", "temp", "\n", "self", ".", "distil_weight", "=", "distil_weight", "\n", "self", ".", "log", "=", "log", "\n", "self", ".", "logdir", "=", "logdir", "\n", "\n", "if", "self", ".", "log", ":", "\n", "            ", "self", ".", "writer", "=", "SummaryWriter", "(", "logdir", ")", "\n", "\n", "", "try", ":", "\n", "            ", "torch", ".", "Tensor", "(", "0", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "device", "=", "device", "\n", "", "except", ":", "\n", "            ", "print", "(", "\n", "\"Either an invalid device or CUDA is not available. Defaulting to CPU.\"", "\n", ")", "\n", "self", ".", "device", "=", "\"cpu\"", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.self_training.SelfTraining.train_student": [[67, 186], ["copy.deepcopy", "torch.SGD", "torch.SGD", "torch.SGD", "torch.SGD", "copy.deepcopy.train", "len", "print", "range", "copy.deepcopy.eval", "self_training.SelfTraining.SelfTraining.student_model.train", "len", "copy.deepcopy", "print", "range", "self_training.SelfTraining.SelfTraining.student_model.load_state_dict", "copy.deepcopy.parameters", "print", "self_training.SelfTraining.SelfTraining.student_model.state_dict", "self_training.SelfTraining.SelfTraining.evaluate", "loss_arr.append", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "matplotlib.plot", "data.to.to.to", "label.to.to.to", "copy.deepcopy.", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "isinstance", "self_training.SelfTraining.SelfTraining.argmax", "self_training.SelfTraining.argmax.eq().sum().item", "torch.SGD.zero_grad", "self_training.SelfTraining.SelfTraining.backward", "torch.SGD.step", "self_training.SelfTraining.SelfTraining.writer.add_scalar", "self_training.SelfTraining.SelfTraining.writer.add_scalar", "data.to.to.to", "label.to.to.to", "self_training.SelfTraining.SelfTraining.student_model", "copy.deepcopy.", "self_training.SelfTraining.SelfTraining.calculate_kd_loss", "isinstance", "self_training.SelfTraining.SelfTraining.argmax", "self_training.SelfTraining.argmax.eq().sum().item", "self_training.SelfTraining.SelfTraining.optimizer_student.zero_grad", "self_training.SelfTraining.SelfTraining.backward", "self_training.SelfTraining.SelfTraining.optimizer_student.step", "copy.deepcopy", "self_training.SelfTraining.SelfTraining.writer.add_scalar", "self_training.SelfTraining.SelfTraining.writer.add_scalar", "self_training.SelfTraining.SelfTraining.writer.add_scalar", "self_training.SelfTraining.SelfTraining.student_model.state_dict", "self_training.SelfTraining.SelfTraining.student_model.state_dict", "self_training.SelfTraining.argmax.eq().sum", "self_training.SelfTraining.argmax.eq().sum", "self_training.SelfTraining.argmax.eq", "self_training.SelfTraining.argmax.eq", "label.to.to.view_as", "label.to.to.view_as"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.self_training.SelfTraining.evaluate", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.mean_teacher.mean_teacher.MeanTeacher.calculate_kd_loss"], ["", "", "def", "train_student", "(", "\n", "self", ",", "\n", "epochs", "=", "10", ",", "\n", "plot_losses", "=", "True", ",", "\n", "save_model", "=", "True", ",", "\n", "save_model_pth", "=", "\"./models/student.pth\"", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Function that will be training the student\n\n        :param epochs (int): Number of epochs you want to train the teacher\n        :param plot_losses (bool): True if you want to plot the losses\n        :param save_model (bool): True if you want to save the student model\n        :param save_model_pth (str): Path where you want to save the student model\n        \"\"\"", "\n", "\n", "self_teacher", "=", "deepcopy", "(", "self", ".", "student_model", ")", "\n", "optimizer_self_teacher", "=", "optim", ".", "SGD", "(", "self_teacher", ".", "parameters", "(", ")", ",", "0.01", ",", "0.9", ")", "\n", "self_teacher", ".", "train", "(", ")", "\n", "\n", "length_of_dataset", "=", "len", "(", "self", ".", "train_loader", ".", "dataset", ")", "\n", "\n", "print", "(", "\"\\nTraining self teacher...\"", ")", "\n", "\n", "for", "ep", "in", "range", "(", "epochs", ")", ":", "\n", "            ", "epoch_loss", "=", "0.0", "\n", "correct", "=", "0", "\n", "\n", "for", "(", "data", ",", "label", ")", "in", "self", ".", "train_loader", ":", "\n", "\n", "                ", "data", "=", "data", ".", "to", "(", "self", ".", "device", ")", "\n", "label", "=", "label", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "out", "=", "self_teacher", "(", "data", ")", "\n", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "out", ",", "label", ")", "\n", "\n", "if", "isinstance", "(", "out", ",", "tuple", ")", ":", "\n", "                    ", "out", "=", "out", "[", "0", "]", "\n", "\n", "", "pred", "=", "out", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "correct", "+=", "pred", ".", "eq", "(", "label", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "optimizer_self_teacher", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer_self_teacher", ".", "step", "(", ")", "\n", "\n", "epoch_loss", "+=", "loss", "\n", "\n", "", "epoch_acc", "=", "correct", "/", "length_of_dataset", "\n", "\n", "if", "self", ".", "log", ":", "\n", "                ", "self", ".", "writer", ".", "add_scalar", "(", "\"Training loss/Self Teacher\"", ",", "epoch_loss", ",", "epochs", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "\n", "\"Training accuracy/Self Teacher\"", ",", "epoch_acc", ",", "epochs", "\n", ")", "\n", "\n", "", "print", "(", "f\"Epoch: {ep+1}, Loss: {epoch_loss}, Accuracy: {epoch_acc}\"", ")", "\n", "\n", "", "self_teacher", ".", "eval", "(", ")", "\n", "self", ".", "student_model", ".", "train", "(", ")", "\n", "loss_arr", "=", "[", "]", "\n", "length_of_dataset", "=", "len", "(", "self", ".", "train_loader", ".", "dataset", ")", "\n", "best_acc", "=", "0.0", "\n", "self", ".", "best_student_model_weights", "=", "deepcopy", "(", "self", ".", "student_model", ".", "state_dict", "(", ")", ")", "\n", "\n", "print", "(", "\"\\nTraining student...\"", ")", "\n", "\n", "for", "ep", "in", "range", "(", "epochs", ")", ":", "\n", "            ", "epoch_loss", "=", "0.0", "\n", "correct", "=", "0", "\n", "\n", "for", "(", "data", ",", "label", ")", "in", "self", ".", "train_loader", ":", "\n", "\n", "                ", "data", "=", "data", ".", "to", "(", "self", ".", "device", ")", "\n", "label", "=", "label", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "student_out", "=", "self", ".", "student_model", "(", "data", ")", "\n", "self_teacher_out", "=", "self_teacher", "(", "data", ")", "\n", "\n", "loss", "=", "self", ".", "calculate_kd_loss", "(", "student_out", ",", "self_teacher_out", ",", "label", ")", "\n", "\n", "if", "isinstance", "(", "student_out", ",", "tuple", ")", ":", "\n", "                    ", "student_out", "=", "student_out", "[", "0", "]", "\n", "\n", "", "pred", "=", "student_out", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "correct", "+=", "pred", ".", "eq", "(", "label", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "self", ".", "optimizer_student", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer_student", ".", "step", "(", ")", "\n", "\n", "epoch_loss", "+=", "loss", "\n", "\n", "", "epoch_acc", "=", "correct", "/", "length_of_dataset", "\n", "\n", "epoch_val_acc", "=", "self", ".", "evaluate", "(", ")", "\n", "\n", "if", "epoch_val_acc", ">", "best_acc", ":", "\n", "                ", "best_acc", "=", "epoch_val_acc", "\n", "self", ".", "best_student_model_weights", "=", "deepcopy", "(", "\n", "self", ".", "student_model", ".", "state_dict", "(", ")", "\n", ")", "\n", "\n", "", "if", "self", ".", "log", ":", "\n", "                ", "self", ".", "writer", ".", "add_scalar", "(", "\"Training loss/Student\"", ",", "epoch_loss", ",", "epochs", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "\"Training accuracy/Student\"", ",", "epoch_acc", ",", "epochs", ")", "\n", "self", ".", "writer", ".", "add_scalar", "(", "\n", "\"Validation accuracy/Student\"", ",", "epoch_val_acc", ",", "epochs", "\n", ")", "\n", "\n", "", "loss_arr", ".", "append", "(", "epoch_loss", ")", "\n", "print", "(", "f\"Epoch: {ep+1}, Loss: {epoch_loss}, Accuracy: {epoch_acc}\"", ")", "\n", "\n", "", "self", ".", "student_model", ".", "load_state_dict", "(", "self", ".", "best_student_model_weights", ")", "\n", "if", "save_model", ":", "\n", "            ", "torch", ".", "save", "(", "self", ".", "student_model", ".", "state_dict", "(", ")", ",", "save_model_pth", ")", "\n", "", "if", "plot_losses", ":", "\n", "            ", "plt", ".", "plot", "(", "loss_arr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.self_training.SelfTraining.calculate_kd_loss": [[187, 202], ["torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "self_training.SelfTraining.SelfTraining.loss_fn", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], ["", "", "def", "calculate_kd_loss", "(", "self", ",", "y_pred_student", ",", "y_pred_teacher", ",", "y_true", ")", ":", "\n", "        ", "\"\"\"\n        Function used for calculating the KD loss during distillation\n\n        :param y_pred_student (torch.FloatTensor): Prediction made by the student model\n        :param y_pred_teacher (torch.FloatTensor): Prediction made by the teacher model\n        :param y_true (torch.FloatTensor): Original label\n        \"\"\"", "\n", "\n", "loss", "=", "(", "1", "-", "self", ".", "distil_weight", ")", "*", "F", ".", "cross_entropy", "(", "y_pred_student", ",", "y_true", ")", "\n", "loss", "+=", "(", "self", ".", "distil_weight", ")", "*", "self", ".", "loss_fn", "(", "\n", "F", ".", "log_softmax", "(", "y_pred_student", ",", "dim", "=", "1", ")", ",", "\n", "F", ".", "softmax", "(", "y_pred_teacher", "/", "self", ".", "temp", ",", "dim", "=", "1", ")", ",", "\n", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.self_training.SelfTraining.evaluate": [[203, 230], ["copy.deepcopy", "copy.deepcopy.eval", "len", "print", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "data.to.to.to", "target.to.to.to", "copy.deepcopy.", "isinstance", "copy.deepcopy.argmax", "model.argmax.eq().sum().item", "model.argmax.eq().sum", "model.argmax.eq", "target.to.to.view_as"], "methods", ["None"], ["", "def", "evaluate", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Evaluate method for printing accuracies of the trained network\n\n        \"\"\"", "\n", "\n", "model", "=", "deepcopy", "(", "self", ".", "student_model", ")", "\n", "model", ".", "eval", "(", ")", "\n", "length_of_dataset", "=", "len", "(", "self", ".", "val_loader", ".", "dataset", ")", "\n", "correct", "=", "0", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "data", ",", "target", "in", "self", ".", "val_loader", ":", "\n", "                ", "data", "=", "data", ".", "to", "(", "self", ".", "device", ")", "\n", "target", "=", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "\n", "if", "isinstance", "(", "output", ",", "tuple", ")", ":", "\n", "                    ", "output", "=", "output", "[", "0", "]", "\n", "\n", "", "pred", "=", "output", ".", "argmax", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "correct", "+=", "pred", ".", "eq", "(", "target", ".", "view_as", "(", "pred", ")", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "\n", "", "", "accuracy", "=", "correct", "/", "length_of_dataset", "\n", "print", "(", "\"-\"", "*", "80", ")", "\n", "print", "(", "f\"Accuracy: {accuracy}\"", ")", "\n", "return", "accuracy", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.self_training.SelfTraining.get_parameters": [[231, 240], ["sum", "print", "print", "p.numel", "self_training.SelfTraining.SelfTraining.student_model.parameters"], "methods", ["None"], ["", "def", "get_parameters", "(", "self", ")", ":", "\n", "        ", "\"\"\"(\n        Get the number of parameters for the student network\n        \"\"\"", "\n", "\n", "student_params", "=", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "self", ".", "student_model", ".", "parameters", "(", ")", ")", "\n", "\n", "print", "(", "\"-\"", "*", "80", ")", "\n", "print", "(", "f\"Total parameters for the student network are: {student_params}\"", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.mean_teacher.mean_teacher.MeanTeacher.__init__": [[37, 75], ["torch.nn.MSELoss", "torch.nn.MSELoss", "torch.nn.CrossEntropyLoss", "torch.nn.CrossEntropyLoss", "KD_Lib.KD.common.BaseClass.__init__", "class_loss.to", "loss_fn.to", "torch.nn.LogSoftmax().to", "torch.nn.LogSoftmax().to", "res_loss.to", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.MeanResnet.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "teacher_model", ",", "\n", "student_model", ",", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "optimizer_teacher", ",", "\n", "optimizer_student", ",", "\n", "loss_fn", "=", "nn", ".", "MSELoss", "(", ")", ",", "\n", "class_loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ",", "\n", "res_loss", "=", "symmetric_mse_loss", ",", "\n", "temp", "=", "20.0", ",", "\n", "distil_weight", "=", "0.5", ",", "\n", "device", "=", "\"cpu\"", ",", "\n", "log", "=", "False", ",", "\n", "logdir", "=", "\"./Experiments\"", ",", "\n", ")", ":", "\n", "        ", "super", "(", "MeanTeacher", ",", "self", ")", ".", "__init__", "(", "\n", "teacher_model", ",", "\n", "student_model", ",", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "optimizer_teacher", ",", "\n", "optimizer_student", ",", "\n", "loss_fn", ",", "\n", "temp", ",", "\n", "distil_weight", ",", "\n", "device", ",", "\n", "log", ",", "\n", "logdir", ",", "\n", ")", "\n", "self", ".", "class_loss", "=", "class_loss", ".", "to", "(", "self", ".", "device", ")", "\n", "try", ":", "\n", "            ", "self", ".", "res_loss", "=", "res_loss", ".", "to", "(", "self", ".", "device", ")", "\n", "", "except", ":", "\n", "            ", "self", ".", "res_loss", "=", "res_loss", "\n", "", "self", ".", "loss_fn", "=", "loss_fn", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "log_softmax", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.mean_teacher.mean_teacher.MeanTeacher.calculate_kd_loss": [[76, 95], ["mean_teacher.MeanTeacher.class_loss", "mean_teacher.MeanTeacher.log_softmax", "mean_teacher.MeanTeacher.log_softmax", "consis_logit.size", "mean_teacher.MeanTeacher.res_loss", "mean_teacher.MeanTeacher.loss_fn"], "methods", ["None"], ["", "def", "calculate_kd_loss", "(", "self", ",", "y_pred_student", ",", "y_pred_teacher", ",", "y_true", ")", ":", "\n", "        ", "\"\"\"\n        Function used for calculating the KD loss during distillation\n\n        :param y_pred_student (torch.FloatTensor): Prediction made by the student model\n        :param y_pred_teacher (torch.FloatTensor): Prediction made by the teacher model\n        :param y_true (torch.FloatTensor): Original label\n        \"\"\"", "\n", "class_logit", ",", "consis_logit", "=", "y_pred_student", "\n", "class_loss", "=", "self", ".", "class_loss", "(", "class_logit", ",", "y_true", ")", "\n", "\n", "num_classes", "=", "consis_logit", ".", "size", "(", ")", "[", "1", "]", "\n", "res_loss", "=", "self", ".", "res_loss", "(", "class_logit", ",", "consis_logit", ")", "/", "num_classes", "\n", "\n", "student_softmax", "=", "self", ".", "log_softmax", "(", "consis_logit", ",", "dim", "=", "1", ")", "\n", "teacher_softmax", "=", "self", ".", "log_softmax", "(", "y_pred_teacher", "[", "0", "]", ",", "dim", "=", "1", ")", "\n", "consis_loss", "=", "self", ".", "loss_fn", "(", "student_softmax", ",", "teacher_softmax", ")", "/", "num_classes", "\n", "\n", "return", "class_loss", "+", "res_loss", "+", "consis_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.mean_teacher.mean_teacher.MeanTeacher.post_epoch_call": [[96, 108], ["min", "zip", "mean_teacher.MeanTeacher.teacher_model.parameters", "mean_teacher.MeanTeacher.student_model.parameters", "teacher_param.data.mul_().add_", "teacher_param.data.mul_"], "methods", ["None"], ["", "def", "post_epoch_call", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"\n        Exponentially updates the weights of teacher model.\n\n        :param epoch (int): current epoch\n        \"\"\"", "\n", "alpha", "=", "min", "(", "1e-3", ",", "epoch", "/", "(", "epoch", "+", "1", ")", ")", "\n", "param_zip", "=", "zip", "(", "\n", "self", ".", "teacher_model", ".", "parameters", "(", ")", ",", "self", ".", "student_model", ".", "parameters", "(", ")", "\n", ")", "\n", "for", "teacher_param", ",", "param", "in", "param_zip", ":", "\n", "            ", "teacher_param", ".", "data", ".", "mul_", "(", "alpha", ")", ".", "add_", "(", "1", "-", "alpha", ",", "param", ".", "data", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.mean_teacher.mean_teacher.symmetric_mse_loss": [[8, 10], ["torch.sum", "torch.sum"], "function", ["None"], ["def", "symmetric_mse_loss", "(", "input1", ",", "input2", ")", ":", "\n", "    ", "return", "torch", ".", "sum", "(", "(", "input1", "-", "input2", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.nin.NetworkInNetwork.__init__": [[12, 44], ["torch.nn.Module.__init__", "torch.nn.Sequential", "nin.NetworkInNetwork._initialize_weights", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.MaxPool2d", "torch.nn.Dropout", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.AvgPool2d", "torch.nn.Dropout", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.AvgPool2d"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.MeanResnet.__init__", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.nin.NetworkInNetwork._initialize_weights"], ["def", "__init__", "(", "self", ",", "num_classes", "=", "10", ",", "in_channels", "=", "3", ")", ":", "\n", "        ", "super", "(", "NetworkInNetwork", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "in_channels", ",", "192", ",", "5", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "192", ",", "160", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "160", ",", "96", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "3", ",", "stride", "=", "2", ",", "ceil_mode", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "96", ",", "192", ",", "5", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "192", ",", "192", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "192", ",", "192", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "3", ",", "stride", "=", "2", ",", "ceil_mode", "=", "True", ")", ",", "\n", "nn", ".", "Dropout", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "192", ",", "192", ",", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "192", ",", "192", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "192", ",", "self", ".", "num_classes", ",", "1", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "8", ",", "stride", "=", "1", ")", ",", "\n", ")", "\n", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.nin.NetworkInNetwork.forward": [[45, 49], ["nin.NetworkInNetwork.features", "x.view.view.view", "x.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "self", ".", "num_classes", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.nin.NetworkInNetwork._initialize_weights": [[50, 56], ["nin.NetworkInNetwork.modules", "isinstance", "m.weight.data.normal_", "m.bias.data.zero_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "0.05", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.shallow.Shallow.__init__": [[15, 26], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.MeanResnet.__init__"], ["def", "__init__", "(", "self", ",", "img_size", "=", "28", ",", "hidden_size", "=", "800", ",", "num_classes", "=", "10", ",", "num_channels", "=", "1", ")", ":", "\n", "        ", "super", "(", "Shallow", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "hidden_size", "=", "hidden_size", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "num_channels", "=", "num_channels", "\n", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "self", ".", "img_size", "**", "2", "*", "self", ".", "num_channels", ",", "self", ".", "hidden_size", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_size", ",", "self", ".", "hidden_size", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "self", ".", "hidden_size", ",", "self", ".", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.shallow.Shallow.forward": [[27, 36], ["torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "shallow.Shallow.fc1", "torch.relu", "torch.relu", "torch.relu", "shallow.Shallow.fc2", "torch.relu", "torch.relu", "torch.relu", "shallow.Shallow.fc3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "fc2", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "out", "=", "self", ".", "fc3", "(", "x", ")", "\n", "\n", "return", "out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.lenet.ModLeNet.__init__": [[14, 32], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Tanh", "torch.MaxPool2d", "torch.Conv2d", "torch.Tanh", "torch.MaxPool2d", "torch.Linear", "torch.Tanh", "torch.Linear", "int"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.MeanResnet.__init__"], ["def", "__init__", "(", "self", ",", "img_size", "=", "32", ",", "num_classes", "=", "10", ",", "in_channels", "=", "3", ")", ":", "\n", "        ", "super", "(", "ModLeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "fc_inp", "=", "(", "int", "(", "self", ".", "img_size", "/", "4", ")", "**", "2", ")", "*", "16", "\n", "\n", "self", ".", "cnn", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "in_channels", ",", "6", ",", "5", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "6", ",", "16", ",", "5", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "2", ",", "stride", "=", "2", ")", ",", "\n", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "64", "*", "16", ",", "1024", ")", ",", "nn", ".", "Tanh", "(", ")", ",", "nn", ".", "Linear", "(", "1024", ",", "self", ".", "num_classes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.lenet.ModLeNet.forward": [[34, 39], ["lenet.ModLeNet.cnn", "lenet.ModLeNet.view", "lenet.ModLeNet.fc", "lenet.ModLeNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "cnn", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.lenet.LeNet.__init__": [[51, 73], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Tanh", "torch.AvgPool2d", "torch.Conv2d", "torch.Tanh", "torch.AvgPool2d", "torch.Linear", "torch.Tanh", "torch.Linear", "torch.Tanh", "torch.Linear", "int"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.MeanResnet.__init__"], ["def", "__init__", "(", "self", ",", "img_size", "=", "32", ",", "num_classes", "=", "10", ",", "in_channels", "=", "3", ")", ":", "\n", "        ", "super", "(", "LeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "fc_inp", "=", "(", "int", "(", "(", "self", ".", "img_size", "-", "12", ")", "/", "4", ")", "**", "2", ")", "*", "16", "\n", "\n", "self", ".", "cnn", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "in_channels", ",", "6", ",", "5", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "6", ",", "16", ",", "5", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "2", ",", "stride", "=", "2", ")", ",", "\n", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "fc_inp", ",", "120", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "120", ",", "84", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "84", ",", "self", ".", "num_classes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.lenet.LeNet.forward": [[75, 80], ["lenet.LeNet.cnn", "lenet.LeNet.view", "lenet.LeNet.fc", "lenet.LeNet.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "cnn", "(", "x", ")", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.lstm.LSTMNet.__init__": [[18, 46], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.LSTM", "torch.LSTM", "torch.Dropout", "torch.Dropout", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.MeanResnet.__init__"], ["def", "__init__", "(", "\n", "self", ",", "\n", "input_dim", "=", "100", ",", "\n", "embed_dim", "=", "50", ",", "\n", "hidden_dim", "=", "32", ",", "\n", "num_classes", "=", "2", ",", "\n", "num_layers", "=", "5", ",", "\n", "dropout_prob", "=", "0", ",", "\n", "bidirectional", "=", "False", ",", "\n", "pad_idx", "=", "0", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "hidden_dim", "=", "hidden_dim", "\n", "self", ".", "num_layers", "=", "num_layers", "\n", "self", ".", "embed_dim", "=", "embed_dim", "\n", "\n", "self", ".", "embedding", "=", "nn", ".", "Embedding", "(", "input_dim", ",", "embed_dim", ",", "padding_idx", "=", "pad_idx", ")", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "\n", "embed_dim", ",", "\n", "hidden_dim", ",", "\n", "num_layers", ",", "\n", "dropout", "=", "dropout_prob", ",", "\n", "bidirectional", "=", "bidirectional", ",", "\n", "batch_first", "=", "True", ",", "\n", ")", "\n", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "dropout_prob", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "hidden_dim", "*", "2", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.lstm.LSTMNet.forward": [[47, 59], ["lstm.LSTMNet.dropout", "torch.utils.rnn.pack_padded_sequence", "torch.utils.rnn.pack_padded_sequence", "lstm.LSTMNet.lstm", "lstm.LSTMNet.dropout", "lstm.LSTMNet.fc", "lstm.LSTMNet.embedding", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "x_len", ")", ":", "\n", "        ", "embed_out", "=", "self", ".", "dropout", "(", "self", ".", "embedding", "(", "x", ")", ")", "\n", "\n", "packed_embed_out", "=", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "\n", "embed_out", ",", "x_len", ",", "batch_first", "=", "True", ",", "enforce_sorted", "=", "False", "\n", ")", "\n", "_", ",", "(", "hidden", ",", "cell", ")", "=", "self", ".", "lstm", "(", "packed_embed_out", ")", "\n", "\n", "hidden", "=", "self", ".", "dropout", "(", "torch", ".", "cat", "(", "(", "hidden", "[", "-", "2", ",", ":", ",", ":", "]", ",", "hidden", "[", "-", "1", ",", ":", ",", ":", "]", ")", ",", "dim", "=", "1", ")", ")", "\n", "fc_out", "=", "self", ".", "fc", "(", "hidden", ")", "\n", "\n", "return", "fc_out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.BasicBlock.__init__": [[8, 30], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.MeanResnet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "self", ".", "expansion", "*", "planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.BasicBlock.forward": [[32, 38], ["torch.relu", "torch.relu", "resnet.BasicBlock.bn2", "resnet.BasicBlock.shortcut", "torch.relu", "torch.relu", "resnet.BasicBlock.bn1", "resnet.BasicBlock.conv2", "resnet.BasicBlock.conv1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.Bottleneck.__init__": [[43, 67], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.MeanResnet.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "\n", "planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "self", ".", "expansion", "*", "planes", ":", "\n", "            ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "self", ".", "expansion", "*", "planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.Bottleneck.forward": [[69, 76], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet.Bottleneck.bn3", "resnet.Bottleneck.shortcut", "torch.relu", "torch.relu", "resnet.Bottleneck.bn1", "resnet.Bottleneck.bn2", "resnet.Bottleneck.conv3", "resnet.Bottleneck.conv1", "resnet.Bottleneck.conv2"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", ")", "\n", "out", "=", "self", ".", "bn3", "(", "self", ".", "conv3", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.ResNet.__init__": [[79, 92], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.MeanResnet.__init__", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "params", ",", "num_channel", "=", "3", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "params", "[", "0", "]", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "num_channel", ",", "params", "[", "0", "]", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "params", "[", "0", "]", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "params", "[", "1", "]", ",", "num_blocks", "[", "0", "]", ",", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "params", "[", "2", "]", ",", "num_blocks", "[", "1", "]", ",", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "params", "[", "3", "]", ",", "num_blocks", "[", "2", "]", ",", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "params", "[", "4", "]", ",", "num_blocks", "[", "3", "]", ",", "2", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "params", "[", "4", "]", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.ResNet._make_layer": [[93, 100], ["torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.ResNet.forward": [[101, 114], ["torch.relu", "torch.relu", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "resnet.ResNet.view", "resnet.ResNet.linear", "resnet.ResNet.bn1", "resnet.ResNet.size", "resnet.ResNet.conv1"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "out_feature", "=", "False", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "feature", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "feature", ")", "\n", "if", "not", "out_feature", ":", "\n", "            ", "return", "out", "\n", "", "else", ":", "\n", "            ", "return", "out", ",", "feature", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.ResnetWithAT.forward": [[117, 129], ["resnet.ResnetWithAT.conv1", "resnet.ResnetWithAT.bn1", "torch.relu", "torch.relu", "resnet.ResnetWithAT.layer1", "resnet.ResnetWithAT.layer2", "resnet.ResnetWithAT.layer3", "resnet.ResnetWithAT.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "resnet.ResnetWithAT.view", "resnet.ResnetWithAT.linear", "resnet.ResnetWithAT.size"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "at1", "=", "self", ".", "layer1", "(", "out", ")", "\n", "at2", "=", "self", ".", "layer2", "(", "at1", ")", "\n", "at3", "=", "self", ".", "layer3", "(", "at2", ")", "\n", "at4", "=", "self", ".", "layer4", "(", "at3", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "at4", ",", "4", ")", "\n", "feature", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "linear", "(", "feature", ")", "\n", "return", "out", ",", "at1", ",", "at2", ",", "at3", ",", "at4", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.MeanResnet.__init__": [[132, 137], ["resnet.ResNet.__init__", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.MeanResnet.__init__"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "params", ",", "num_channel", "=", "3", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "MeanResnet", ",", "self", ")", ".", "__init__", "(", "\n", "block", ",", "num_blocks", ",", "params", ",", "num_channel", ",", "num_classes", "\n", ")", "\n", "self", ".", "linear2", "=", "nn", ".", "Linear", "(", "params", "[", "4", "]", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.MeanResnet.forward": [[138, 149], ["resnet.MeanResnet.conv1", "resnet.MeanResnet.bn1", "torch.relu", "torch.relu", "resnet.MeanResnet.layer1", "resnet.MeanResnet.layer2", "resnet.MeanResnet.layer3", "resnet.MeanResnet.layer4", "torch.avg_pool2d", "torch.avg_pool2d", "out.view.view.view", "out.view.view.size", "resnet.MeanResnet.linear", "resnet.MeanResnet.linear2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "4", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "self", ".", "linear", "(", "out", ")", ",", "self", ".", "linear2", "(", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.ResNet18": [[151, 168], ["model"], "function", ["None"], ["", "", "def", "ResNet18", "(", "parameters", ",", "num_channel", "=", "3", ",", "num_classes", "=", "10", ",", "att", "=", "False", ",", "mean", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Function that creates a ResNet 18 model\n\n    :param parameters (list or tuple): List of parameters for the model\n    :param num_channel (int): Number of channels in input specimens\n    :param num_classes (int): Number of classes for classification\n    :param att (bool): True if attention needs to be used\n    :param mean (bool): True if mean teacher model needs to be used\n    \"\"\"", "\n", "model", "=", "ResNet", "\n", "if", "att", "and", "not", "mean", ":", "\n", "        ", "model", "=", "ResnetWithAT", "\n", "", "elif", "not", "att", "and", "mean", ":", "\n", "        ", "model", "=", "MeanResnet", "\n", "", "return", "model", "(", "\n", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "parameters", ",", "num_channel", ",", "num_classes", "=", "num_classes", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.ResNet34": [[171, 188], ["model"], "function", ["None"], ["", "def", "ResNet34", "(", "parameters", ",", "num_channel", "=", "3", ",", "num_classes", "=", "10", ",", "att", "=", "False", ",", "mean", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Function that creates a ResNet 34 model\n\n    :param parameters (list or tuple): List of parameters for the model\n    :param num_channel (int): Number of channels in input specimens\n    :param num_classes (int): Number of classes for classification\n    :param att (bool): True if attention needs to be used\n    :param mean (bool): True if mean teacher model needs to be used\n    \"\"\"", "\n", "model", "=", "ResNet", "\n", "if", "att", "and", "not", "mean", ":", "\n", "        ", "model", "=", "ResnetWithAT", "\n", "", "elif", "not", "att", "and", "mean", ":", "\n", "        ", "model", "=", "MeanResnet", "\n", "", "return", "model", "(", "\n", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "parameters", ",", "num_channel", ",", "num_classes", "=", "num_classes", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.ResNet50": [[191, 208], ["model"], "function", ["None"], ["", "def", "ResNet50", "(", "parameters", ",", "num_channel", "=", "3", ",", "num_classes", "=", "10", ",", "att", "=", "False", ",", "mean", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Function that creates a ResNet 50 model\n\n    :param parameters (list or tuple): List of parameters for the model\n    :param num_channel (int): Number of channels in input specimens\n    :param num_classes (int): Number of classes for classification\n    :param att (bool): True if attention needs to be used\n    :param mean (bool): True if mean teacher model needs to be used\n    \"\"\"", "\n", "model", "=", "ResNet", "\n", "if", "att", "and", "not", "mean", ":", "\n", "        ", "model", "=", "ResnetWithAT", "\n", "", "elif", "not", "att", "and", "mean", ":", "\n", "        ", "model", "=", "MeanResnet", "\n", "", "return", "model", "(", "\n", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "parameters", ",", "num_channel", ",", "num_classes", "=", "num_classes", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.ResNet101": [[211, 228], ["model"], "function", ["None"], ["", "def", "ResNet101", "(", "parameters", ",", "num_channel", "=", "3", ",", "num_classes", "=", "10", ",", "att", "=", "False", ",", "mean", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Function that creates a ResNet 101 model\n\n    :param parameters (list or tuple): List of parameters for the model\n    :param num_channel (int): Number of channels in input specimens\n    :param num_classes (int): Number of classes for classification\n    :param att (bool): True if attention needs to be used\n    :param mean (bool): True if mean teacher model needs to be used\n    \"\"\"", "\n", "model", "=", "ResNet", "\n", "if", "att", "and", "not", "mean", ":", "\n", "        ", "model", "=", "ResnetWithAT", "\n", "", "elif", "not", "att", "and", "mean", ":", "\n", "        ", "model", "=", "MeanResnet", "\n", "", "return", "model", "(", "\n", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "parameters", ",", "num_channel", ",", "num_classes", "=", "num_classes", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.ResNet152": [[231, 248], ["model"], "function", ["None"], ["", "def", "ResNet152", "(", "parameters", ",", "num_channel", "=", "3", ",", "num_classes", "=", "10", ",", "att", "=", "False", ",", "mean", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Function that creates a ResNet 152 model\n\n    :param parameters (list or tuple): List of parameters for the model\n    :param num_channel (int): Number of channels in input specimens\n    :param num_classes (int): Number of classes for classification\n    :param att (bool): True if attention needs to be used\n    :param mean (bool): True if mean teacher model needs to be used\n    \"\"\"", "\n", "model", "=", "ResNet", "\n", "if", "att", "and", "not", "mean", ":", "\n", "        ", "model", "=", "ResnetWithAT", "\n", "", "elif", "not", "att", "and", "mean", ":", "\n", "        ", "model", "=", "MeanResnet", "\n", "", "return", "model", "(", "\n", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "parameters", ",", "num_channel", ",", "num_classes", "=", "num_classes", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.tests.test_models.test_resnet": [[19, 49], ["KD_Lib.models.ResNet18", "KD_Lib.models.ResNet101.", "KD_Lib.models.ResNet34", "KD_Lib.models.ResNet101.", "KD_Lib.models.ResNet50", "KD_Lib.models.ResNet101.", "KD_Lib.models.ResNet101", "KD_Lib.models.ResNet101.", "KD_Lib.models.ResNet152", "KD_Lib.models.ResNet101.", "KD_Lib.models.ResNet34", "KD_Lib.models.ResNet101.", "KD_Lib.models.ResNet34", "KD_Lib.models.ResNet101.", "KD_Lib.models.ResNet101", "KD_Lib.models.ResNet101.", "KD_Lib.models.ResNet101", "KD_Lib.models.ResNet101."], "function", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.ResNet18", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.ResNet34", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.ResNet50", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.ResNet101", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.ResNet152", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.ResNet34", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.ResNet34", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.ResNet101", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.ResNet101"], ["def", "test_resnet", "(", ")", ":", "\n", "\n", "    ", "params", "=", "[", "4", ",", "4", ",", "8", ",", "8", ",", "16", "]", "\n", "\n", "model", "=", "ResNet18", "(", "params", ")", "\n", "_", "=", "model", "(", "sample_input", ")", "\n", "\n", "model", "=", "ResNet34", "(", "params", ")", "\n", "_", "=", "model", "(", "sample_input", ")", "\n", "\n", "model", "=", "ResNet50", "(", "params", ")", "\n", "_", "=", "model", "(", "sample_input", ")", "\n", "\n", "model", "=", "ResNet101", "(", "params", ")", "\n", "_", "=", "model", "(", "sample_input", ")", "\n", "\n", "model", "=", "ResNet152", "(", "params", ")", "\n", "_", "=", "model", "(", "sample_input", ")", "\n", "\n", "model", "=", "ResNet34", "(", "params", ",", "att", "=", "True", ")", "\n", "_", "=", "model", "(", "sample_input", ")", "\n", "\n", "model", "=", "ResNet34", "(", "params", ",", "mean", "=", "True", ")", "\n", "_", "=", "model", "(", "sample_input", ")", "\n", "\n", "model", "=", "ResNet101", "(", "params", ",", "att", "=", "True", ")", "\n", "_", "=", "model", "(", "sample_input", ")", "\n", "\n", "model", "=", "ResNet101", "(", "params", ",", "mean", "=", "True", ")", "\n", "_", "=", "model", "(", "sample_input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.tests.test_models.test_attention_model": [[51, 56], ["KD_Lib.models.ResNet152", "KD_Lib.models.ResNet152."], "function", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.models.resnet.ResNet152"], ["", "def", "test_attention_model", "(", ")", ":", "\n", "\n", "    ", "params", "=", "[", "4", ",", "4", ",", "8", ",", "8", ",", "16", "]", "\n", "model", "=", "ResNet152", "(", "params", ",", "att", "=", "True", ")", "\n", "_", "=", "model", "(", "sample_input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.tests.test_models.test_NIN": [[58, 62], ["KD_Lib.models.NetworkInNetwork", "KD_Lib.models.NetworkInNetwork."], "function", ["None"], ["", "def", "test_NIN", "(", ")", ":", "\n", "\n", "    ", "model", "=", "NetworkInNetwork", "(", "10", ",", "3", ")", "\n", "_", "=", "model", "(", "sample_input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.tests.test_models.test_shallow": [[64, 68], ["KD_Lib.models.Shallow", "KD_Lib.models.Shallow."], "function", ["None"], ["", "def", "test_shallow", "(", ")", ":", "\n", "\n", "    ", "model", "=", "Shallow", "(", "32", ",", "num_channels", "=", "3", ")", "\n", "_", "=", "model", "(", "sample_input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.tests.test_models.test_lenet": [[70, 74], ["KD_Lib.models.LeNet", "KD_Lib.models.LeNet."], "function", ["None"], ["", "def", "test_lenet", "(", ")", ":", "\n", "\n", "    ", "model", "=", "LeNet", "(", ")", "\n", "_", "=", "model", "(", "sample_input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.tests.test_models.test_modlenet": [[76, 80], ["KD_Lib.models.ModLeNet", "KD_Lib.models.ModLeNet."], "function", ["None"], ["", "def", "test_modlenet", "(", ")", ":", "\n", "\n", "    ", "model", "=", "ModLeNet", "(", ")", "\n", "_", "=", "model", "(", "sample_input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.tests.test_models.test_LSTMNet": [[82, 94], ["torch.tensor", "torch.tensor", "KD_Lib.models.LSTMNet", "KD_Lib.models.LSTMNet.", "KD_Lib.models.LSTMNet", "KD_Lib.models.LSTMNet."], "function", ["None"], ["", "def", "test_LSTMNet", "(", ")", ":", "\n", "\n", "    ", "sample_input", "=", "torch", ".", "tensor", "(", "[", "[", "1", ",", "2", ",", "8", ",", "3", ",", "2", "]", ",", "[", "2", ",", "4", ",", "99", ",", "1", ",", "7", "]", "]", ")", "\n", "sample_lengths", "=", "torch", ".", "tensor", "(", "[", "5", ",", "5", "]", ")", "\n", "\n", "# Simple LSTM", "\n", "model", "=", "LSTMNet", "(", "num_classes", "=", "2", ",", "dropout_prob", "=", "0.5", ")", "\n", "_", "=", "model", "(", "sample_input", ",", "sample_lengths", ")", "\n", "\n", "# Bidirectional LSTM", "\n", "model", "=", "LSTMNet", "(", "num_classes", "=", "2", ",", "dropout_prob", "=", "0.5", ",", "bidirectional", "=", "True", ")", "\n", "_", "=", "model", "(", "sample_input", ",", "sample_lengths", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.tests.test_kd.test_VanillaKD": [[64, 74], ["KD_Lib.KD.VanillaKD", "KD_Lib.KD.VanillaKD.train_teacher", "KD_Lib.KD.VanillaKD.train_student", "KD_Lib.KD.VanillaKD.evaluate", "KD_Lib.KD.VanillaKD.get_parameters"], "function", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.noisy.messy_collab.MessyCollab.train_teacher", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.self_training.SelfTraining.train_student", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.self_training.SelfTraining.evaluate", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.self_training.SelfTraining.get_parameters"], ["def", "test_VanillaKD", "(", ")", ":", "\n", "\n", "    ", "distiller", "=", "VanillaKD", "(", "\n", "teacher", ",", "student", ",", "train_loader", ",", "test_loader", ",", "t_optimizer", ",", "s_optimizer", ",", "log", "=", "True", "\n", ")", "\n", "\n", "distiller", ".", "train_teacher", "(", "epochs", "=", "1", ",", "plot_losses", "=", "True", ",", "save_model", "=", "True", ")", "\n", "distiller", ".", "train_student", "(", "epochs", "=", "1", ",", "plot_losses", "=", "True", ",", "save_model", "=", "True", ")", "\n", "distiller", ".", "evaluate", "(", "teacher", "=", "False", ")", "\n", "distiller", ".", "get_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.tests.test_kd.test_TAKD": [[76, 104], ["torch.Adam", "assistant_optimizers.append", "assistant_optimizers.append", "torch.Adam", "KD_Lib.KD.TAKD", "KD_Lib.KD.TAKD.train_teacher", "KD_Lib.KD.TAKD.train_assistants", "KD_Lib.KD.TAKD.train_student", "KD_Lib.KD.TAKD.get_parameters", "copy.deepcopy", "teacher.parameters", "torch.Adam", "torch.Adam", "student.parameters", "range", "assistants[].parameters", "assistants[].parameters"], "function", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.noisy.messy_collab.MessyCollab.train_teacher", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.TAKD.takd.TAKD.train_assistants", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.self_training.SelfTraining.train_student", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.self_training.SelfTraining.get_parameters"], ["", "def", "test_TAKD", "(", ")", ":", "\n", "\n", "    ", "assistants", "=", "[", "deepcopy", "(", "mock_vision_model", ")", "for", "_", "in", "range", "(", "2", ")", "]", "\n", "\n", "teacher_optimizer", "=", "optim", ".", "Adam", "(", "teacher", ".", "parameters", "(", ")", ")", "\n", "assistant_optimizers", "=", "[", "]", "\n", "assistant_optimizers", ".", "append", "(", "optim", ".", "Adam", "(", "assistants", "[", "0", "]", ".", "parameters", "(", ")", ")", ")", "\n", "assistant_optimizers", ".", "append", "(", "optim", ".", "Adam", "(", "assistants", "[", "1", "]", ".", "parameters", "(", ")", ")", ")", "\n", "student_optimizer", "=", "optim", ".", "Adam", "(", "student", ".", "parameters", "(", ")", ")", "\n", "\n", "assistant_train_order", "=", "[", "[", "-", "1", "]", ",", "[", "-", "1", ",", "0", "]", "]", "\n", "\n", "distiller", "=", "TAKD", "(", "\n", "teacher", ",", "\n", "assistants", ",", "\n", "student", ",", "\n", "assistant_train_order", ",", "\n", "train_loader", ",", "\n", "test_loader", ",", "\n", "teacher_optimizer", ",", "\n", "assistant_optimizers", ",", "\n", "student_optimizer", ",", "\n", ")", "\n", "\n", "distiller", ".", "train_teacher", "(", "epochs", "=", "1", ",", "plot_losses", "=", "False", ",", "save_model", "=", "False", ")", "\n", "distiller", ".", "train_assistants", "(", "epochs", "=", "1", ",", "plot_losses", "=", "False", ",", "save_model", "=", "False", ")", "\n", "distiller", ".", "train_student", "(", "epochs", "=", "1", ",", "plot_losses", "=", "False", ",", "save_model", "=", "False", ")", "\n", "distiller", ".", "get_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.tests.test_kd.test_Attention": [[106, 121], ["KD_Lib.KD.Attention", "KD_Lib.KD.Attention.train_teacher", "KD_Lib.KD.Attention.train_student", "KD_Lib.KD.Attention.evaluate", "KD_Lib.KD.Attention.get_parameters"], "function", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.noisy.messy_collab.MessyCollab.train_teacher", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.self_training.SelfTraining.train_student", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.self_training.SelfTraining.evaluate", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.self_training.SelfTraining.get_parameters"], ["", "def", "test_Attention", "(", ")", ":", "\n", "\n", "    ", "distiller", "=", "Attention", "(", "\n", "teacher", ",", "\n", "student", ",", "\n", "train_loader", ",", "\n", "test_loader", ",", "\n", "t_optimizer", ",", "\n", "s_optimizer", ",", "\n", ")", "\n", "\n", "distiller", ".", "train_teacher", "(", "epochs", "=", "1", ",", "plot_losses", "=", "False", ",", "save_model", "=", "False", ")", "\n", "distiller", ".", "train_student", "(", "epochs", "=", "1", ",", "plot_losses", "=", "False", ",", "save_model", "=", "False", ")", "\n", "distiller", ".", "evaluate", "(", "teacher", "=", "False", ")", "\n", "distiller", ".", "get_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.tests.test_kd.test_NoisyTeacher": [[123, 141], ["KD_Lib.KD.NoisyTeacher", "KD_Lib.KD.NoisyTeacher.train_teacher", "KD_Lib.KD.NoisyTeacher.train_student", "KD_Lib.KD.NoisyTeacher.evaluate", "KD_Lib.KD.NoisyTeacher.get_parameters"], "function", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.noisy.messy_collab.MessyCollab.train_teacher", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.self_training.SelfTraining.train_student", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.self_training.SelfTraining.evaluate", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.self_training.SelfTraining.get_parameters"], ["", "def", "test_NoisyTeacher", "(", ")", ":", "\n", "\n", "    ", "distiller", "=", "NoisyTeacher", "(", "\n", "teacher", ",", "\n", "student", ",", "\n", "train_loader", ",", "\n", "test_loader", ",", "\n", "t_optimizer", ",", "\n", "s_optimizer", ",", "\n", "alpha", "=", "0.4", ",", "\n", "noise_variance", "=", "0.2", ",", "\n", "device", "=", "\"cpu\"", ",", "\n", ")", "\n", "\n", "distiller", ".", "train_teacher", "(", "epochs", "=", "1", ",", "plot_losses", "=", "False", ",", "save_model", "=", "False", ")", "\n", "distiller", ".", "train_student", "(", "epochs", "=", "1", ",", "plot_losses", "=", "False", ",", "save_model", "=", "False", ")", "\n", "distiller", ".", "evaluate", "(", "teacher", "=", "False", ")", "\n", "distiller", ".", "get_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.tests.test_kd.test_VirtualTeacher": [[143, 149], ["KD_Lib.KD.VirtualTeacher", "KD_Lib.KD.VirtualTeacher.train_student", "KD_Lib.KD.VirtualTeacher.evaluate", "KD_Lib.KD.VirtualTeacher.get_parameters"], "function", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.self_training.SelfTraining.train_student", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.self_training.SelfTraining.evaluate", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.self_training.SelfTraining.get_parameters"], ["", "def", "test_VirtualTeacher", "(", ")", ":", "\n", "\n", "    ", "distiller", "=", "VirtualTeacher", "(", "student", ",", "train_loader", ",", "test_loader", ",", "s_optimizer", ")", "\n", "distiller", ".", "train_student", "(", "epochs", "=", "1", ",", "plot_losses", "=", "False", ",", "save_model", "=", "False", ")", "\n", "distiller", ".", "evaluate", "(", ")", "\n", "distiller", ".", "get_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.tests.test_kd.test_SelfTraining": [[151, 158], ["KD_Lib.KD.SelfTraining", "KD_Lib.KD.SelfTraining.train_student", "KD_Lib.KD.SelfTraining.evaluate", "KD_Lib.KD.SelfTraining.get_parameters"], "function", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.self_training.SelfTraining.train_student", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.self_training.SelfTraining.evaluate", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.self_training.SelfTraining.get_parameters"], ["", "def", "test_SelfTraining", "(", ")", ":", "\n", "\n", "    ", "distiller", "=", "SelfTraining", "(", "student", ",", "train_loader", ",", "test_loader", ",", "s_optimizer", ")", "\n", "\n", "distiller", ".", "train_student", "(", "epochs", "=", "1", ",", "plot_losses", "=", "False", ",", "save_model", "=", "False", ")", "\n", "distiller", ".", "evaluate", "(", ")", "\n", "distiller", ".", "get_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.tests.test_kd.test_RCO": [[177, 192], ["KD_Lib.KD.RCO", "KD_Lib.KD.RCO.train_teacher", "KD_Lib.KD.RCO.train_student", "KD_Lib.KD.RCO.evaluate", "KD_Lib.KD.RCO.get_parameters"], "function", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.noisy.messy_collab.MessyCollab.train_teacher", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.self_training.SelfTraining.train_student", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.self_training.SelfTraining.evaluate", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.self_training.SelfTraining.get_parameters"], ["", "def", "test_RCO", "(", ")", ":", "\n", "\n", "    ", "distiller", "=", "RCO", "(", "\n", "teacher", ",", "\n", "student", ",", "\n", "train_loader", ",", "\n", "test_loader", ",", "\n", "t_optimizer", ",", "\n", "s_optimizer", ",", "\n", ")", "\n", "\n", "distiller", ".", "train_teacher", "(", "epochs", "=", "1", ",", "plot_losses", "=", "False", ",", "save_model", "=", "False", ")", "\n", "distiller", ".", "train_student", "(", "epochs", "=", "1", ",", "plot_losses", "=", "False", ",", "save_model", "=", "False", ")", "\n", "distiller", ".", "evaluate", "(", ")", "\n", "distiller", ".", "get_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.tests.test_kd.test_BANN": [[194, 202], ["copy.deepcopy", "torch.SGD", "KD_Lib.KD.BANN", "KD_Lib.KD.BANN.train_student", "copy.deepcopy.parameters"], "function", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.self_training.SelfTraining.train_student"], ["", "def", "test_BANN", "(", ")", ":", "\n", "\n", "    ", "model", "=", "deepcopy", "(", "mock_vision_model", ")", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "0.01", ")", "\n", "\n", "distiller", "=", "BANN", "(", "model", ",", "train_loader", ",", "test_loader", ",", "optimizer", ",", "num_gen", "=", "2", ")", "\n", "\n", "distiller", ".", "train_student", "(", "epochs", "=", "1", ",", "plot_losses", "=", "False", ",", "save_model", "=", "False", ")", "\n", "# distiller.evaluate()", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.tests.test_kd.test_PS": [[205, 220], ["KD_Lib.KD.ProbShift", "KD_Lib.KD.ProbShift.train_teacher", "KD_Lib.KD.ProbShift.train_student", "KD_Lib.KD.ProbShift.evaluate", "KD_Lib.KD.ProbShift.get_parameters"], "function", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.noisy.messy_collab.MessyCollab.train_teacher", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.self_training.SelfTraining.train_student", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.self_training.SelfTraining.evaluate", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.self_training.SelfTraining.get_parameters"], ["", "def", "test_PS", "(", ")", ":", "\n", "\n", "    ", "distiller", "=", "ProbShift", "(", "\n", "teacher", ",", "\n", "student", ",", "\n", "train_loader", ",", "\n", "test_loader", ",", "\n", "t_optimizer", ",", "\n", "s_optimizer", ",", "\n", ")", "\n", "\n", "distiller", ".", "train_teacher", "(", "epochs", "=", "1", ",", "plot_losses", "=", "False", ",", "save_model", "=", "False", ")", "\n", "distiller", ".", "train_student", "(", "epochs", "=", "1", ",", "plot_losses", "=", "False", ",", "save_model", "=", "False", ")", "\n", "distiller", ".", "evaluate", "(", ")", "\n", "distiller", ".", "get_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.tests.test_kd.test_LSR": [[222, 237], ["KD_Lib.KD.LabelSmoothReg", "KD_Lib.KD.LabelSmoothReg.train_teacher", "KD_Lib.KD.LabelSmoothReg.train_student", "KD_Lib.KD.LabelSmoothReg.evaluate", "KD_Lib.KD.LabelSmoothReg.get_parameters"], "function", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.noisy.messy_collab.MessyCollab.train_teacher", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.self_training.SelfTraining.train_student", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.self_training.SelfTraining.evaluate", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.self_training.SelfTraining.get_parameters"], ["", "def", "test_LSR", "(", ")", ":", "\n", "\n", "    ", "distiller", "=", "LabelSmoothReg", "(", "\n", "teacher", ",", "\n", "student", ",", "\n", "train_loader", ",", "\n", "test_loader", ",", "\n", "t_optimizer", ",", "\n", "s_optimizer", ",", "\n", ")", "\n", "\n", "distiller", ".", "train_teacher", "(", "epochs", "=", "1", ",", "plot_losses", "=", "False", ",", "save_model", "=", "False", ")", "\n", "distiller", ".", "train_student", "(", "epochs", "=", "1", ",", "plot_losses", "=", "False", ",", "save_model", "=", "False", ")", "\n", "distiller", ".", "evaluate", "(", ")", "\n", "distiller", ".", "get_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.tests.test_kd.test_SoftRandom": [[239, 254], ["KD_Lib.KD.SoftRandom", "KD_Lib.KD.SoftRandom.train_teacher", "KD_Lib.KD.SoftRandom.train_student", "KD_Lib.KD.SoftRandom.evaluate", "KD_Lib.KD.SoftRandom.get_parameters"], "function", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.noisy.messy_collab.MessyCollab.train_teacher", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.self_training.SelfTraining.train_student", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.self_training.SelfTraining.evaluate", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.self_training.SelfTraining.get_parameters"], ["", "def", "test_SoftRandom", "(", ")", ":", "\n", "\n", "    ", "distiller", "=", "SoftRandom", "(", "\n", "teacher", ",", "\n", "student", ",", "\n", "train_loader", ",", "\n", "test_loader", ",", "\n", "t_optimizer", ",", "\n", "s_optimizer", ",", "\n", ")", "\n", "\n", "distiller", ".", "train_teacher", "(", "epochs", "=", "1", ",", "plot_losses", "=", "False", ",", "save_model", "=", "False", ")", "\n", "distiller", ".", "train_student", "(", "epochs", "=", "1", ",", "plot_losses", "=", "False", ",", "save_model", "=", "False", ")", "\n", "distiller", ".", "evaluate", "(", ")", "\n", "distiller", ".", "get_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.tests.test_kd.test_MessyCollab": [[256, 271], ["KD_Lib.KD.MessyCollab", "KD_Lib.KD.MessyCollab.train_teacher", "KD_Lib.KD.MessyCollab.train_student", "KD_Lib.KD.MessyCollab.evaluate", "KD_Lib.KD.MessyCollab.get_parameters"], "function", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.noisy.messy_collab.MessyCollab.train_teacher", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.self_training.SelfTraining.train_student", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.self_training.SelfTraining.evaluate", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.self_training.SelfTraining.get_parameters"], ["", "def", "test_MessyCollab", "(", ")", ":", "\n", "\n", "    ", "distiller", "=", "MessyCollab", "(", "\n", "teacher", ",", "\n", "student", ",", "\n", "train_loader", ",", "\n", "test_loader", ",", "\n", "t_optimizer", ",", "\n", "s_optimizer", ",", "\n", ")", "\n", "\n", "distiller", ".", "train_teacher", "(", "epochs", "=", "1", ",", "plot_losses", "=", "False", ",", "save_model", "=", "False", ")", "\n", "distiller", ".", "train_student", "(", "epochs", "=", "1", ",", "plot_losses", "=", "False", ",", "save_model", "=", "False", ")", "\n", "distiller", ".", "evaluate", "(", ")", "\n", "distiller", ".", "get_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.tests.test_kd.test_DML": [[273, 299], ["copy.deepcopy", "copy.deepcopy", "torch.SGD", "torch.SGD", "KD_Lib.KD.DML", "KD_Lib.KD.DML.train_students", "KD_Lib.KD.DML.evaluate", "KD_Lib.KD.DML.get_parameters", "copy.deepcopy.parameters", "copy.deepcopy.parameters"], "function", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.DML.dml.DML.train_students", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.self_training.SelfTraining.evaluate", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.teacher_free.self_training.SelfTraining.get_parameters"], ["", "def", "test_DML", "(", ")", ":", "\n", "\n", "    ", "student_1", "=", "deepcopy", "(", "mock_vision_model", ")", "\n", "student_2", "=", "deepcopy", "(", "mock_vision_model", ")", "\n", "\n", "student_cohort", "=", "(", "student_1", ",", "student_2", ")", "\n", "\n", "s_optimizer_1", "=", "optim", ".", "SGD", "(", "student_1", ".", "parameters", "(", ")", ",", "0.01", ")", "\n", "s_optimizer_2", "=", "optim", ".", "SGD", "(", "student_2", ".", "parameters", "(", ")", ",", "0.01", ")", "\n", "\n", "student_optimizers", "=", "(", "s_optimizer_1", ",", "s_optimizer_2", ")", "\n", "\n", "distiller", "=", "DML", "(", "\n", "student_cohort", ",", "\n", "train_loader", ",", "\n", "test_loader", ",", "\n", "student_optimizers", ",", "\n", "log", "=", "True", ",", "\n", "logdir", "=", "\".\"", ",", "\n", ")", "\n", "\n", "distiller", ".", "train_students", "(", "\n", "epochs", "=", "1", ",", "plot_losses", "=", "True", ",", "save_model", "=", "True", ",", "save_model_path", "=", "\"./student.pt\"", "\n", ")", "\n", "distiller", ".", "evaluate", "(", ")", "\n", "distiller", ".", "get_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.tests.test_quantization.test_dynamic_quantization": [[29, 37], ["copy.deepcopy", "KD_Lib.Quantization.Dynamic_Quantizer", "KD_Lib.Quantization.Dynamic_Quantizer.quantize", "KD_Lib.Quantization.Dynamic_Quantizer.get_model_sizes", "KD_Lib.Quantization.Dynamic_Quantizer.get_performance_statistics"], "function", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.common.base_class.Quantizer.quantize", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.common.base_class.Quantizer.get_model_sizes", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.common.base_class.Quantizer.get_performance_statistics"], ["def", "test_dynamic_quantization", "(", ")", ":", "\n", "\n", "    ", "model", "=", "deepcopy", "(", "mock_model", ")", "\n", "\n", "quantizer", "=", "Dynamic_Quantizer", "(", "model", ",", "test_loader", ",", "{", "torch", ".", "nn", ".", "Linear", "}", ")", "\n", "_", "=", "quantizer", ".", "quantize", "(", ")", "\n", "quantizer", ".", "get_model_sizes", "(", ")", "\n", "quantizer", ".", "get_performance_statistics", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.tests.test_quantization.test_static_quantization": [[39, 48], ["torchvision.models.quantization.resnet18", "KD_Lib.Quantization.Static_Quantizer", "KD_Lib.Quantization.Static_Quantizer.quantize", "KD_Lib.Quantization.Static_Quantizer.get_model_sizes", "KD_Lib.Quantization.Static_Quantizer.get_performance_statistics"], "function", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.common.base_class.Quantizer.quantize", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.common.base_class.Quantizer.get_model_sizes", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.common.base_class.Quantizer.get_performance_statistics"], ["", "def", "test_static_quantization", "(", ")", ":", "\n", "\n", "    ", "model", "=", "models", ".", "quantization", ".", "resnet18", "(", "quantize", "=", "False", ")", "\n", "model", ".", "fc", ".", "out_features", "=", "10", "\n", "\n", "quantizer", "=", "Static_Quantizer", "(", "model", ",", "train_loader", ",", "test_loader", ")", "\n", "_", "=", "quantizer", ".", "quantize", "(", "1", ")", "\n", "quantizer", ".", "get_model_sizes", "(", ")", "\n", "quantizer", ".", "get_performance_statistics", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.tests.test_quantization.test_qat_quantization": [[50, 60], ["torchvision.models.quantization.resnet18", "torch.optim.Adam", "KD_Lib.Quantization.QAT_Quantizer", "KD_Lib.Quantization.QAT_Quantizer.quantize", "KD_Lib.Quantization.QAT_Quantizer.get_model_sizes", "KD_Lib.Quantization.QAT_Quantizer.get_performance_statistics", "models.quantization.resnet18.parameters"], "function", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.common.base_class.Quantizer.quantize", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.common.base_class.Quantizer.get_model_sizes", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.common.base_class.Quantizer.get_performance_statistics"], ["", "def", "test_qat_quantization", "(", ")", ":", "\n", "\n", "    ", "model", "=", "models", ".", "quantization", ".", "resnet18", "(", "quantize", "=", "False", ")", "\n", "model", ".", "fc", ".", "out_features", "=", "10", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ")", "\n", "quantizer", "=", "QAT_Quantizer", "(", "model", ",", "train_loader", ",", "test_loader", ",", "optimizer", ")", "\n", "_", "=", "quantizer", ".", "quantize", "(", "1", ",", "1", ",", "1", ",", "1", ")", "\n", "quantizer", ".", "get_model_sizes", "(", ")", "\n", "quantizer", ".", "get_performance_statistics", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.tests.test_pruning.test_lottery_tickets": [[27, 33], ["copy.deepcopy", "KD_Lib.Pruning.LotteryTicketsPruner", "KD_Lib.Pruning.LotteryTicketsPruner.prune"], "function", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.common.iterative_base_class.BaseIterativePruner.prune"], ["def", "test_lottery_tickets", "(", ")", ":", "\n", "\n", "    ", "model", "=", "deepcopy", "(", "mock_model", ")", "\n", "\n", "pruner", "=", "LotteryTicketsPruner", "(", "model", ",", "train_loader", ",", "test_loader", ")", "\n", "pruner", ".", "prune", "(", "num_iterations", "=", "2", ",", "train_epochs", "=", "1", ",", "save_models", "=", "True", ",", "prune_percent", "=", "50", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.tests.test_pruning.test_weight_threshold_pruning": [[35, 43], ["copy.deepcopy", "KD_Lib.Pruning.WeightThresholdPruner", "KD_Lib.Pruning.WeightThresholdPruner.prune", "KD_Lib.Pruning.WeightThresholdPruner.get_pruning_statistics"], "function", ["home.repos.pwc.inspect_result.SforAiDl_KD_Lib.common.iterative_base_class.BaseIterativePruner.prune", "home.repos.pwc.inspect_result.SforAiDl_KD_Lib.common.iterative_base_class.BaseIterativePruner.get_pruning_statistics"], ["", "def", "test_weight_threshold_pruning", "(", ")", ":", "\n", "\n", "    ", "model", "=", "deepcopy", "(", "mock_model", ")", "\n", "\n", "pruner", "=", "WeightThresholdPruner", "(", "model", ",", "train_loader", ",", "test_loader", ")", "\n", "pruner", ".", "prune", "(", "num_iterations", "=", "2", ",", "train_epochs", "=", "1", ",", "save_models", "=", "True", ",", "threshold", "=", "0.1", ")", "\n", "pruner", ".", "get_pruning_statistics", "(", "\n", "model_path", "=", "\"pruned_model_iteration_0.pt\"", ",", "verbose", "=", "True", "\n", ")", "\n"]]}