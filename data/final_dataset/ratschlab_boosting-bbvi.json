{"home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.plots.plotd.plot": [[26, 52], ["matplotlib.subplots", "range", "ax.set_xticks", "ax.set_xlabel", "ax.set_ylabel", "fig.suptitle", "fig.legend", "os.path.join", "print", "fig.savefig", "matplotlib.close", "len", "range", "ax.plot", "range", "range", "len", "len"], "function", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.plots.plot1d.plot"], ["def", "plot", "(", "values", ",", "xlabel", ",", "ylabel", ",", "title", ",", "xvalues", "=", "None", ")", ":", "\n", "    ", "n", ",", "d", "=", "values", ".", "shape", "\n", "\n", "if", "len", "(", "FLAGS", ".", "labels", ")", "==", "0", ":", "\n", "        ", "labels", "=", "range", "(", "d", ")", "\n", "", "else", ":", "\n", "        ", "labels", "=", "FLAGS", ".", "labels", "\n", "\n", "", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "for", "i", "in", "range", "(", "d", ")", ":", "\n", "        ", "vs", "=", "values", "[", ":", ",", "i", "]", "\n", "ax", ".", "plot", "(", "range", "(", "len", "(", "vs", ")", ")", ",", "vs", ",", "'.-'", ",", "label", "=", "labels", "[", "i", "]", ")", "\n", "\n", "", "if", "not", "xvalues", ":", "\n", "        ", "xvalues", "=", "range", "(", "len", "(", "values", ")", ")", "\n", "\n", "", "ax", ".", "set_xticks", "(", "xvalues", ")", "\n", "ax", ".", "set_xlabel", "(", "xlabel", ")", "\n", "ax", ".", "set_ylabel", "(", "ylabel", ")", "\n", "fig", ".", "suptitle", "(", "title", ")", "\n", "fig", ".", "legend", "(", ")", "\n", "\n", "out_filename", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "outdir", ",", "FLAGS", ".", "outfile", ")", "\n", "print", "(", "out_filename", ")", "\n", "fig", ".", "savefig", "(", "out_filename", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.plots.plotd.plot_with_confidence": [[53, 73], ["os.path.join", "matplotlib.subplots", "ax.plot", "ax.fill_between", "fig.suptitle", "ax.set_xticks", "ax.set_xlabel", "ax.set_ylabel", "print", "fig.savefig", "matplotlib.close", "range", "range", "range", "len", "len", "line.get_color", "len"], "function", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.plots.plot1d.plot"], ["", "def", "plot_with_confidence", "(", "values", ",", "xlabel", ",", "ylabel", ",", "title", ")", ":", "\n", "    ", "'''\n    One of those plots with a mean line and a fill between `mean + std` and\n    `mean - std`.\n    '''", "\n", "out_filename", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "outdir", ",", "FLAGS", ".", "outfile", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "\n", "means", ",", "stds", "=", "values", "[", ":", ",", "0", "]", ",", "values", "[", ":", ",", "1", "]", "\n", "line", ",", "=", "ax", ".", "plot", "(", "range", "(", "len", "(", "values", ")", ")", ",", "means", ",", "'.-'", ")", "\n", "ax", ".", "fill_between", "(", "range", "(", "len", "(", "values", ")", ")", ",", "means", "+", "stds", ",", "means", "-", "stds", ",", "color", "=", "line", ".", "get_color", "(", ")", ",", "alpha", "=", "0.5", ")", "\n", "\n", "fig", ".", "suptitle", "(", "title", ")", "\n", "ax", ".", "set_xticks", "(", "range", "(", "len", "(", "values", ")", ")", ")", "\n", "ax", ".", "set_xlabel", "(", "xlabel", ")", "\n", "ax", ".", "set_ylabel", "(", "ylabel", ")", "\n", "\n", "print", "(", "out_filename", ")", "\n", "fig", ".", "savefig", "(", "out_filename", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.plots.plotd.main": [[74, 85], ["numpy.loadtxt", "len", "numpy.reshape", "plotd.plot_with_confidence", "plotd.plot"], "function", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.plots.plot1d.plot_with_confidence", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.plots.plot1d.plot"], ["", "def", "main", "(", "argv", ")", ":", "\n", "    ", "del", "argv", "\n", "\n", "values", "=", "np", ".", "loadtxt", "(", "sys", ".", "stdin", ",", "delimiter", "=", "FLAGS", ".", "delimiter", ")", "\n", "if", "len", "(", "values", ".", "shape", ")", "==", "1", ":", "\n", "        ", "values", "=", "np", ".", "reshape", "(", "values", ",", "(", "values", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "\n", "", "if", "FLAGS", ".", "confidence", ":", "\n", "        ", "plot_with_confidence", "(", "values", ",", "FLAGS", ".", "xlabel", ",", "FLAGS", ".", "ylabel", ",", "FLAGS", ".", "title", ")", "\n", "", "else", ":", "\n", "        ", "plot", "(", "values", ",", "FLAGS", ".", "xlabel", ",", "FLAGS", ".", "ylabel", ",", "FLAGS", ".", "title", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.plots.plot_utils.parse_filename": [[5, 13], ["[].split", "KeyError", "part.split", "[].split", "os.path.split"], "function", ["None"], ["def", "parse_filename", "(", "filename", ",", "key", ")", ":", "\n", "    ", "parts", "=", "os", ".", "path", ".", "split", "(", "filename", ")", "[", "0", "]", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", ".", "split", "(", "\",\"", ")", "\n", "for", "part", "in", "parts", ":", "\n", "        ", "k", ",", "v", "=", "part", ".", "split", "(", "\"=\"", ")", "\n", "if", "k", "==", "key", ":", "\n", "            ", "return", "v", "\n", "\n", "", "", "raise", "KeyError", "(", "\"legend key not found in filename\"", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.plots.plot_mixtures.x_log_prob.log_prob": [[37, 48], ["numpy.array().astype", "len", "range", "numpy.log", "numpy.array", "scipy.multivariate_normal().pdf", "scipy.multivariate_normal", "numpy.dot"], "methods", ["None"], ["    ", "def", "log_prob", "(", "v", ")", ":", "\n", "        ", "pi", "=", "np", ".", "array", "(", "[", "0.4", ",", "0.6", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "mus", "=", "[", "[", "1.", "]", ",", "[", "-", "1.", "]", "]", "\n", "stds", "=", "[", "[", "0.5", "]", ",", "[", "0.5", "]", "]", "\n", "\n", "ret", "=", "0", "\n", "K", "=", "len", "(", "pi", ")", "\n", "for", "i", "in", "range", "(", "K", ")", ":", "\n", "            ", "this", "=", "pi", "[", "i", "]", "*", "stats", ".", "multivariate_normal", "(", "mus", "[", "i", "]", ",", "np", ".", "dot", "(", "stds", "[", "i", "]", ",", "stds", "[", "i", "]", ")", ")", ".", "pdf", "(", "v", ")", "\n", "ret", "+=", "this", "\n", "", "return", "np", ".", "log", "(", "ret", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.plots.plot_mixtures.construct_mixture_from_params": [[25, 35], ["boosting_bbvi.core.infinite_mixture.InfiniteMixtureScipy", "list", "zip", "numpy.dot"], "function", ["None"], ["def", "construct_mixture_from_params", "(", "**", "kwargs", ")", ":", "\n", "    ", "weights", "=", "kwargs", "[", "'weights'", "]", "\n", "locs", "=", "kwargs", "[", "'locs'", "]", "\n", "diags", "=", "kwargs", "[", "'scale_diags'", "]", "\n", "\n", "qx", "=", "InfiniteMixtureScipy", "(", "stats", ".", "multivariate_normal", ")", "\n", "qx", ".", "weights", "=", "weights", "\n", "qx", ".", "params", "=", "list", "(", "zip", "(", "[", "[", "l", "]", "for", "l", "in", "locs", "]", ",", "[", "[", "np", ".", "dot", "(", "d", ",", "d", ")", "]", "for", "d", "in", "diags", "]", ")", ")", "\n", "\n", "return", "qx", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.plots.plot_mixtures.main": [[49, 78], ["qxs.extend", "matplotlib.subplots", "numpy.arange", "zip", "fig.suptitle", "matplotlib.legend", "os.path.expanduser", "fig.savefig", "print", "line.strip", "numpy.load", "labels.extend", "labels.extend", "ax.plot", "len", "ax.plot", "os.path.join", "plot_mixtures.construct_mixture_from_params", "range", "numpy.exp", "plot_utils.parse_filename", "len", "qx.log_prob", "len"], "function", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.plots.plot1d.plot", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.plots.plot1d.plot", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.plots.plot_single_mixture.construct_mixture_from_params", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.plots.plot_utils.parse_filename", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob"], ["", "", "def", "main", "(", "argv", ")", ":", "\n", "    ", "del", "argv", "\n", "\n", "input", "=", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "sys", ".", "stdin", "]", "\n", "qx_params", "=", "[", "np", ".", "load", "(", "line", ")", "for", "line", "in", "input", "]", "\n", "qxs", "=", "[", "x_log_prob", "]", "\n", "qxs", ".", "extend", "(", "[", "construct_mixture_from_params", "(", "**", "p", ")", "for", "p", "in", "qx_params", "]", ")", "\n", "\n", "labels", "=", "[", "\"target distribution\"", "]", "\n", "if", "FLAGS", ".", "legend_key", ":", "\n", "        ", "labels", ".", "extend", "(", "[", "utils", ".", "parse_filename", "(", "line", ",", "FLAGS", ".", "legend_key", ")", "for", "line", "in", "input", "]", ")", "\n", "", "else", ":", "\n", "        ", "labels", ".", "extend", "(", "range", "(", "len", "(", "qxs", ")", ")", ")", "\n", "\n", "", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "grid", "=", "np", ".", "arange", "(", "-", "2", ",", "2", ",", "0.1", ")", "\n", "for", "qx", ",", "label", "in", "zip", "(", "qxs", ",", "labels", ")", ":", "\n", "        ", "probs", "=", "[", "np", ".", "exp", "(", "qx", ".", "log_prob", "(", "v", ")", ")", "for", "v", "in", "grid", "]", "\n", "ax", ".", "plot", "(", "grid", ",", "probs", ",", "label", "=", "label", ")", "\n", "\n", "", "if", "len", "(", "qxs", ")", "==", "2", ":", "\n", "        ", "qx", "=", "qxs", "[", "1", "]", "\n", "ax", ".", "plot", "(", "[", "mu", "[", "0", "]", "for", "(", "mu", ",", "sig", ")", "in", "qx", ".", "params", "]", ",", "[", "0", "]", "*", "len", "(", "qx", ".", "params", ")", ",", "'+'", ")", "\n", "\n", "", "fig", ".", "suptitle", "(", "FLAGS", ".", "title", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "outpath", "=", "os", ".", "path", ".", "expanduser", "(", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "outdir", ",", "FLAGS", ".", "outfile", ")", ")", "\n", "fig", ".", "savefig", "(", "outpath", ")", "\n", "print", "(", "outpath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.plots.plot_losses.main": [[26, 52], ["matplotlib.subplots", "ax.set_xlabel", "ax.set_ylabel", "fig.suptitle", "zip", "matplotlib.legend", "os.path.join", "print", "fig.savefig", "matplotlib.close", "line.strip", "range", "numpy.loadtxt", "ax.plot", "ax.fill_between", "plot_utils.parse_filename", "len", "range", "range", "len", "len", "line.get_color"], "function", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.plots.plot1d.plot", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.plots.plot_utils.parse_filename"], ["def", "main", "(", "argv", ")", ":", "\n", "    ", "del", "argv", "\n", "\n", "filenames", "=", "[", "line", ".", "strip", "(", ")", "for", "line", "in", "sys", ".", "stdin", "]", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "ax", ".", "set_xlabel", "(", "FLAGS", ".", "xlabel", ")", "\n", "ax", ".", "set_ylabel", "(", "FLAGS", ".", "ylabel", ")", "\n", "fig", ".", "suptitle", "(", "FLAGS", ".", "title", ")", "\n", "\n", "if", "FLAGS", ".", "legend_key", ":", "\n", "        ", "labels", "=", "[", "utils", ".", "parse_filename", "(", "fn", ",", "FLAGS", ".", "legend_key", ")", "for", "fn", "in", "filenames", "]", "\n", "", "else", ":", "\n", "        ", "labels", "=", "range", "(", "len", "(", "filenames", ")", ")", "\n", "\n", "", "for", "filename", ",", "label", "in", "zip", "(", "filenames", ",", "labels", ")", ":", "\n", "        ", "values", "=", "np", ".", "loadtxt", "(", "filename", ",", "delimiter", "=", "','", ")", "\n", "means", ",", "stds", "=", "values", "[", ":", ",", "0", "]", ",", "values", "[", ":", ",", "1", "]", "\n", "line", ",", "=", "ax", ".", "plot", "(", "range", "(", "len", "(", "values", ")", ")", ",", "means", ",", "'.-'", ",", "label", "=", "label", ")", "\n", "ax", ".", "fill_between", "(", "range", "(", "len", "(", "values", ")", ")", ",", "means", "+", "stds", ",", "means", "-", "stds", ",", "color", "=", "line", ".", "get_color", "(", ")", ",", "alpha", "=", "0.5", ")", "\n", "\n", "", "plt", ".", "legend", "(", ")", "\n", "\n", "out_filename", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "outdir", ",", "FLAGS", ".", "outfile", ")", "\n", "print", "(", "out_filename", ")", "\n", "fig", ".", "savefig", "(", "out_filename", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.plots.plot_single_mixture.eprint": [[43, 45], ["print"], "function", ["None"], ["def", "eprint", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "print", "(", "*", "args", ",", "file", "=", "sys", ".", "stderr", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.plots.plot_single_mixture.construct_mixture_from_params": [[46, 56], ["boosting_bbvi.core.infinite_mixture.InfiniteMixtureScipy", "list", "zip", "numpy.dot"], "function", ["None"], ["", "def", "construct_mixture_from_params", "(", "**", "kwargs", ")", ":", "\n", "    ", "weights", "=", "kwargs", "[", "'weights'", "]", "\n", "locs", "=", "kwargs", "[", "'loc'", "]", "\n", "diags", "=", "kwargs", "[", "'diags'", "]", "\n", "\n", "qx", "=", "InfiniteMixtureScipy", "(", "stats", ".", "multivariate_normal", ")", "\n", "qx", ".", "weights", "=", "weights", "[", "0", "]", "\n", "qx", ".", "params", "=", "list", "(", "zip", "(", "[", "[", "l", "]", "for", "l", "in", "locs", "]", ",", "[", "[", "np", ".", "dot", "(", "d", ",", "d", ")", "]", "for", "d", "in", "diags", "]", ")", ")", "\n", "\n", "return", "qx", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.plots.plot_single_mixture.deserialize_mixture_from_file": [[57, 69], ["numpy.load", "qt_deserialized[].astype", "qt_deserialized[].astype", "qt_deserialized[].astype", "edward.models.Categorical", "edward.models.Mixture", "edward.models.Normal", "zip", "tensorflow.convert_to_tensor"], "function", ["None"], ["", "def", "deserialize_mixture_from_file", "(", "filename", ")", ":", "\n", "    ", "qt_deserialized", "=", "np", ".", "load", "(", "filename", ")", "\n", "locs", "=", "qt_deserialized", "[", "'locs'", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "scale_diags", "=", "qt_deserialized", "[", "'scale_diags'", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "weights", "=", "qt_deserialized", "[", "'weights'", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "#q_comps = [Normal(loc=loc[0], scale=tf.nn.softmax(scale_diag)[0]) \\", "\n", "q_comps", "=", "[", "Normal", "(", "loc", "=", "loc", "[", "0", "]", ",", "scale", "=", "scale_diag", "[", "0", "]", ")", "for", "loc", ",", "scale_diag", "in", "zip", "(", "locs", ",", "scale_diags", ")", "]", "\n", "cat", "=", "Categorical", "(", "probs", "=", "tf", ".", "convert_to_tensor", "(", "weights", ")", ")", "\n", "q_latest", "=", "Mixture", "(", "cat", "=", "cat", ",", "components", "=", "q_comps", ")", "\n", "return", "q_latest", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.plots.plot_single_mixture.deserialize_target_from_file": [[70, 80], ["numpy.load", "qt_deserialized[].astype", "qt_deserialized[].astype", "qt_deserialized[].astype", "edward.models.Categorical", "edward.models.Mixture", "edward.models.Normal", "tensorflow.convert_to_tensor", "range", "tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor", "len"], "function", ["None"], ["", "def", "deserialize_target_from_file", "(", "filename", ")", ":", "\n", "    ", "qt_deserialized", "=", "np", ".", "load", "(", "filename", ")", "\n", "mus", "=", "qt_deserialized", "[", "'mus'", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "stds", "=", "qt_deserialized", "[", "'stds'", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "pi", "=", "qt_deserialized", "[", "'pi'", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "cat", "=", "Categorical", "(", "probs", "=", "tf", ".", "convert_to_tensor", "(", "pi", ")", ")", "\n", "target_comps", "=", "[", "Normal", "(", "loc", "=", "tf", ".", "convert_to_tensor", "(", "mus", "[", "i", "]", ")", ",", "\n", "scale", "=", "tf", ".", "convert_to_tensor", "(", "stds", "[", "i", "]", ")", ")", "for", "i", "in", "range", "(", "len", "(", "mus", ")", ")", "]", "\n", "return", "Mixture", "(", "cat", "=", "cat", ",", "components", "=", "target_comps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.plots.plot_single_mixture.main": [[81, 137], ["plot_single_mixture.deserialize_target_from_file", "numpy.array", "matplotlib.subplots", "tensorflow.Session", "ax.set_xticks", "ax.set_xticklabels", "ax.set_xlabel", "ax.set_ylabel", "fig.suptitle", "matplotlib.legend", "os.path.join", "fig.tight_layout", "fig.savefig", "print", "numpy.arange().astype", "numpy.arange().astype", "tf.Session.as_default", "deserialize_target_from_file.log_prob", "tensorflow.exp().eval", "ax.plot", "enumerate", "os.path.expanduser", "len", "len", "plot_single_mixture.eprint", "zip", "plot_single_mixture.eprint", "plot_single_mixture.deserialize_mixture_from_file", "tensorflow.exp", "qtprobs.eval.eval", "ax.plot", "ax.plot", "deserialize_mixture_from_file.cat.probs.eval", "range", "numpy.arange", "numpy.arange", "tensorflow.exp", "deserialize_mixture_from_file.log_prob", "numpy.squeeze", "numpy.squeeze", "len", "comp.loc.eval", "len", "ax.bar", "len", "len"], "function", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.plots.plot_residual.deserialize_target_from_file", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.plots.plot1d.plot", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.plots.plot_residual.eprint", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.plots.plot_residual.eprint", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.plots.plot_residual.deserialize_mixture_from_file", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.plots.plot1d.plot", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.plots.plot1d.plot", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob"], ["", "def", "main", "(", "argv", ")", ":", "\n", "    ", "del", "argv", "\n", "\n", "x", "=", "deserialize_target_from_file", "(", "FLAGS", ".", "target", ")", "\n", "\n", "if", "FLAGS", ".", "widegrid", ":", "\n", "        ", "grid", "=", "np", ".", "arange", "(", "-", "25", ",", "25", ",", "0.1", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "        ", "grid", "=", "np", ".", "arange", "(", "-", "4", ",", "4", ",", "0.1", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "", "if", "FLAGS", ".", "labels", ":", "\n", "        ", "labels", "=", "FLAGS", ".", "labels", "\n", "", "else", ":", "\n", "        ", "labels", "=", "[", "'approximation'", "]", "*", "len", "(", "FLAGS", ".", "qt", ")", "\n", "\n", "", "if", "FLAGS", ".", "styles", ":", "\n", "        ", "styles", "=", "FLAGS", ".", "styles", "\n", "", "else", ":", "\n", "        ", "styles", "=", "[", "'+'", ",", "'x'", ",", "'.'", ",", "'-'", "]", "\n", "\n", "", "grid", "=", "np", ".", "array", "(", "[", "[", "g", "]", "for", "g", "in", "grid", "]", ")", "# package dims for tf", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "sess", "=", "tf", ".", "Session", "(", ")", "\n", "with", "sess", ".", "as_default", "(", ")", ":", "\n", "        ", "xprobs", "=", "x", ".", "log_prob", "(", "grid", ")", "\n", "xprobs", "=", "tf", ".", "exp", "(", "xprobs", ")", ".", "eval", "(", ")", "\n", "ax", ".", "plot", "(", "grid", ",", "xprobs", ",", "label", "=", "'target'", ",", "linewidth", "=", "2.0", ")", "\n", "\n", "if", "len", "(", "FLAGS", ".", "qt", ")", "==", "0", ":", "\n", "            ", "eprint", "(", "\"provide some qts to the `--qt` option if you would like to plot them\"", ")", "\n", "\n", "", "for", "i", ",", "(", "qt_filename", ",", "label", ")", "in", "enumerate", "(", "zip", "(", "FLAGS", ".", "qt", ",", "labels", ")", ")", ":", "\n", "            ", "eprint", "(", "\"visualizing %s\"", "%", "qt_filename", ")", "\n", "qt", "=", "deserialize_mixture_from_file", "(", "qt_filename", ")", "\n", "qtprobs", "=", "tf", ".", "exp", "(", "qt", ".", "log_prob", "(", "grid", ")", ")", "\n", "qtprobs", "=", "qtprobs", ".", "eval", "(", ")", "\n", "ax", ".", "plot", "(", "np", ".", "squeeze", "(", "grid", ")", ",", "np", ".", "squeeze", "(", "qtprobs", ")", ",", "styles", "[", "i", "%", "len", "(", "styles", ")", "]", ",", "label", "=", "label", ")", "\n", "\n", "", "if", "len", "(", "FLAGS", ".", "qt", ")", "==", "1", "and", "FLAGS", ".", "bars", ":", "\n", "            ", "locs", "=", "[", "comp", ".", "loc", ".", "eval", "(", ")", "for", "comp", "in", "qt", ".", "components", "]", "\n", "ax", ".", "plot", "(", "locs", ",", "[", "0", "]", "*", "len", "(", "locs", ")", ",", "'+'", ")", "\n", "\n", "weights", "=", "qt", ".", "cat", ".", "probs", ".", "eval", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "locs", ")", ")", ":", "\n", "                ", "ax", ".", "bar", "(", "locs", "[", "i", "]", ",", "weights", "[", "i", "]", ",", ".05", ")", "\n", "\n", "", "", "", "ax", ".", "set_xticks", "(", "[", "]", ")", "\n", "ax", ".", "set_xticklabels", "(", "[", "]", ")", "\n", "ax", ".", "set_xlabel", "(", "FLAGS", ".", "xlabel", ")", "\n", "ax", ".", "set_ylabel", "(", "FLAGS", ".", "ylabel", ")", "\n", "fig", ".", "suptitle", "(", "FLAGS", ".", "title", ")", "\n", "legend", "=", "plt", ".", "legend", "(", "loc", "=", "'upper right'", ",", "prop", "=", "{", "'size'", ":", "15", "}", ",", "bbox_to_anchor", "=", "(", "1.08", ",", "1", ")", ")", "\n", "outname", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "FLAGS", ".", "outdir", ")", ",", "FLAGS", ".", "outfile", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "fig", ".", "savefig", "(", "outname", ",", "bbox_extra_artists", "=", "(", "legend", ",", ")", ",", "bbox_inches", "=", "'tight'", ")", "\n", "print", "(", "outname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.plots.plot1d.plot": [[25, 46], ["os.path.join", "matplotlib.subplots", "ax.plot", "ax.set_xlabel", "ax.set_ylabel", "fig.suptitle", "print", "fig.tight_layout", "fig.savefig", "matplotlib.close", "len", "len", "ax.set_xticks", "ax.set_xticklabels", "ax.set_xticks", "numpy.arange", "range", "range", "max", "len", "len"], "function", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.plots.plot1d.plot"], ["def", "plot", "(", "xvalues", ",", "yvalues", ",", "xlabel", ",", "ylabel", ",", "title", ",", "times", "=", "False", ")", ":", "\n", "    ", "assert", "(", "len", "(", "xvalues", ")", "==", "len", "(", "yvalues", ")", ")", "\n", "out_filename", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "outdir", ",", "FLAGS", ".", "outfile", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "ax", ".", "plot", "(", "xvalues", ",", "yvalues", ",", "'.-'", ")", "\n", "\n", "if", "times", ":", "\n", "        ", "xlabel", "+=", "' (hours)'", "\n", "ax", ".", "set_xticks", "(", "np", ".", "arange", "(", "0", ",", "max", "(", "xvalues", ")", ",", "3600", ")", ")", "\n", "ax", ".", "set_xticklabels", "(", "range", "(", "len", "(", "xvalues", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "ax", ".", "set_xticks", "(", "range", "(", "len", "(", "xvalues", ")", ")", ")", "\n", "\n", "", "ax", ".", "set_xlabel", "(", "xlabel", ")", "\n", "ax", ".", "set_ylabel", "(", "ylabel", ")", "\n", "fig", ".", "suptitle", "(", "title", ")", "\n", "\n", "print", "(", "out_filename", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "fig", ".", "savefig", "(", "out_filename", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.plots.plot1d.plot_with_confidence": [[47, 68], ["os.path.join", "matplotlib.subplots", "ax.plot", "ax.fill_between", "fig.suptitle", "ax.set_xticks", "ax.set_xlabel", "ax.set_ylabel", "print", "fig.tight_layout", "fig.savefig", "matplotlib.close", "range", "range", "range", "len", "len", "line.get_color", "len"], "function", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.plots.plot1d.plot"], ["", "def", "plot_with_confidence", "(", "values", ",", "xlabel", ",", "ylabel", ",", "title", ")", ":", "\n", "    ", "'''\n    One of those plots with a mean line and a fill between `mean + std` and\n    `mean - std`.\n    '''", "\n", "out_filename", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "outdir", ",", "FLAGS", ".", "outfile", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "\n", "means", ",", "stds", "=", "values", "[", ":", ",", "0", "]", ",", "values", "[", ":", ",", "1", "]", "\n", "line", ",", "=", "ax", ".", "plot", "(", "range", "(", "len", "(", "values", ")", ")", ",", "means", ",", "'.-'", ")", "\n", "ax", ".", "fill_between", "(", "range", "(", "len", "(", "values", ")", ")", ",", "means", "+", "stds", ",", "means", "-", "stds", ",", "color", "=", "line", ".", "get_color", "(", ")", ",", "alpha", "=", "0.5", ")", "\n", "\n", "fig", ".", "suptitle", "(", "title", ")", "\n", "ax", ".", "set_xticks", "(", "range", "(", "len", "(", "values", ")", ")", ")", "\n", "ax", ".", "set_xlabel", "(", "xlabel", ")", "\n", "ax", ".", "set_ylabel", "(", "ylabel", ")", "\n", "\n", "print", "(", "out_filename", ")", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "fig", ".", "savefig", "(", "out_filename", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.plots.plot1d.main": [[69, 96], ["numpy.loadtxt", "range", "plot1d.plot", "open", "len", "len", "plot1d.plot_with_confidence", "plot1d.plot", "line.strip.strip", "int", "times.append", "float"], "function", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.plots.plot1d.plot", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.plots.plot1d.plot_with_confidence", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.plots.plot1d.plot"], ["", "def", "main", "(", "argv", ")", ":", "\n", "    ", "del", "argv", "\n", "\n", "values", "=", "np", ".", "loadtxt", "(", "sys", ".", "stdin", ",", "delimiter", "=", "FLAGS", ".", "delimiter", ")", "\n", "\n", "# the x-axis is either times (hours) or a range(0, k).", "\n", "if", "FLAGS", ".", "times", ":", "\n", "        ", "times", "=", "[", "]", "\n", "with", "open", "(", "FLAGS", ".", "times", ",", "'r'", ")", "as", "lines", ":", "\n", "            ", "for", "line", "in", "lines", ":", "\n", "                ", "line", "=", "line", ".", "strip", "(", ")", "\n", "t", "=", "int", "(", "float", "(", "line", ")", ")", "\n", "times", ".", "append", "(", "t", ")", "\n", "\n", "", "", "t0", "=", "times", "[", "0", "]", "\n", "times", "=", "[", "t", "-", "t0", "for", "t", "in", "times", "]", "\n", "xvalues", "=", "times", "\n", "", "else", ":", "\n", "        ", "xvalues", "=", "range", "(", "len", "(", "values", ")", ")", "\n", "\n", "", "if", "len", "(", "values", ".", "shape", ")", ">", "1", "and", "values", ".", "shape", "[", "1", "]", "==", "2", ":", "\n", "        ", "if", "FLAGS", ".", "confidence", ":", "\n", "            ", "plot_with_confidence", "(", "values", ",", "FLAGS", ".", "xlabel", ",", "FLAGS", ".", "ylabel", ",", "FLAGS", ".", "title", ")", "\n", "", "else", ":", "\n", "            ", "plot", "(", "xvalues", ",", "values", "[", ":", ",", "0", "]", ",", "FLAGS", ".", "xlabel", ",", "FLAGS", ".", "ylabel", ",", "FLAGS", ".", "title", ",", "FLAGS", ".", "times", "is", "not", "None", ")", "\n", "", "", "else", ":", "\n", "        ", "plot", "(", "xvalues", ",", "values", ",", "FLAGS", ".", "xlabel", ",", "FLAGS", ".", "ylabel", ",", "FLAGS", ".", "title", ",", "FLAGS", ".", "times", "is", "not", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.plots.plot_residual.eprint": [[34, 36], ["print"], "function", ["None"], ["def", "eprint", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "print", "(", "*", "args", ",", "file", "=", "sys", ".", "stderr", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.plots.plot_residual.deserialize_mixture_from_file": [[37, 49], ["numpy.load", "qt_deserialized[].astype", "qt_deserialized[].astype", "qt_deserialized[].astype", "edward.models.Categorical", "edward.models.Mixture", "edward.models.Normal", "zip", "tensorflow.convert_to_tensor"], "function", ["None"], ["", "def", "deserialize_mixture_from_file", "(", "filename", ")", ":", "\n", "    ", "qt_deserialized", "=", "np", ".", "load", "(", "filename", ")", "\n", "locs", "=", "qt_deserialized", "[", "'locs'", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "scale_diags", "=", "qt_deserialized", "[", "'scale_diags'", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "weights", "=", "qt_deserialized", "[", "'weights'", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "#q_comps = [Normal(loc=loc[0], scale=tf.nn.softmax(scale_diag)[0]) \\", "\n", "q_comps", "=", "[", "Normal", "(", "loc", "=", "loc", "[", "0", "]", ",", "scale", "=", "scale_diag", "[", "0", "]", ")", "for", "loc", ",", "scale_diag", "in", "zip", "(", "locs", ",", "scale_diags", ")", "]", "\n", "cat", "=", "Categorical", "(", "probs", "=", "tf", ".", "convert_to_tensor", "(", "weights", ")", ")", "\n", "q_latest", "=", "Mixture", "(", "cat", "=", "cat", ",", "components", "=", "q_comps", ")", "\n", "return", "q_latest", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.plots.plot_residual.deserialize_target_from_file": [[50, 60], ["numpy.load", "qt_deserialized[].astype", "qt_deserialized[].astype", "qt_deserialized[].astype", "edward.models.Categorical", "edward.models.Mixture", "edward.models.Normal", "tensorflow.convert_to_tensor", "range", "tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor", "len"], "function", ["None"], ["", "def", "deserialize_target_from_file", "(", "filename", ")", ":", "\n", "    ", "qt_deserialized", "=", "np", ".", "load", "(", "filename", ")", "\n", "mus", "=", "qt_deserialized", "[", "'mus'", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "stds", "=", "qt_deserialized", "[", "'stds'", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "pi", "=", "qt_deserialized", "[", "'pi'", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "cat", "=", "Categorical", "(", "probs", "=", "tf", ".", "convert_to_tensor", "(", "pi", ")", ")", "\n", "target_comps", "=", "[", "Normal", "(", "loc", "=", "tf", ".", "convert_to_tensor", "(", "mus", "[", "i", "]", ")", ",", "\n", "scale", "=", "tf", ".", "convert_to_tensor", "(", "stds", "[", "i", "]", ")", ")", "for", "i", "in", "range", "(", "len", "(", "mus", ")", ")", "]", "\n", "return", "Mixture", "(", "cat", "=", "cat", ",", "components", "=", "target_comps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.plots.plot_residual.main": [[61, 86], ["plot_residual.deserialize_target_from_file", "numpy.arange().astype", "numpy.array", "matplotlib.subplots", "tensorflow.Session", "fig.suptitle", "matplotlib.legend", "os.path.join", "fig.savefig", "print", "tf.Session.as_default", "deserialize_target_from_file.log_prob", "numpy.squeeze", "plot_residual.deserialize_mixture_from_file", "deserialize_mixture_from_file.log_prob", "numpy.squeeze", "numpy.exp", "ax.plot", "os.path.expanduser", "numpy.arange", "np.squeeze.eval", "numpy.array", "np.squeeze.eval"], "function", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.plots.plot_residual.deserialize_target_from_file", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.plots.plot_residual.deserialize_mixture_from_file", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.plots.plot1d.plot"], ["", "def", "main", "(", "argv", ")", ":", "\n", "    ", "del", "argv", "\n", "\n", "x", "=", "deserialize_target_from_file", "(", "FLAGS", ".", "target", ")", "\n", "\n", "grid", "=", "np", ".", "arange", "(", "-", "2", ",", "2", ",", "0.1", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "grid", "=", "np", ".", "array", "(", "[", "[", "g", "]", "for", "g", "in", "grid", "]", ")", "# package dims for tf", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "sess", "=", "tf", ".", "Session", "(", ")", "\n", "with", "sess", ".", "as_default", "(", ")", ":", "\n", "        ", "xprobs", "=", "x", ".", "log_prob", "(", "grid", ")", "\n", "xprobs", "=", "np", ".", "squeeze", "(", "xprobs", ".", "eval", "(", ")", ")", "\n", "#ax.plot(grid, xprobs, label='target')", "\n", "\n", "qt", "=", "deserialize_mixture_from_file", "(", "FLAGS", ".", "qt", ")", "\n", "qtprobs", "=", "qt", ".", "log_prob", "(", "np", ".", "array", "(", "[", "[", "g", "]", "for", "g", "in", "grid", "]", ")", ")", "\n", "qtprobs", "=", "np", ".", "squeeze", "(", "qtprobs", ".", "eval", "(", ")", ")", "\n", "residual", "=", "np", ".", "exp", "(", "xprobs", "-", "qtprobs", ")", "\n", "ax", ".", "plot", "(", "residual", ",", "label", "=", "'residual'", ")", "\n", "\n", "", "fig", ".", "suptitle", "(", "FLAGS", ".", "title", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "outname", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "expanduser", "(", "FLAGS", ".", "outdir", ")", ",", "FLAGS", ".", "outfile", ")", "\n", "fig", ".", "savefig", "(", "outname", ")", "\n", "print", "(", "outname", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.matrix_factorization.build_toy_dataset": [[40, 43], ["numpy.dot", "numpy.random.normal", "numpy.transpose"], "function", ["None"], ["def", "build_toy_dataset", "(", "U", ",", "V", ",", "N", ",", "M", ",", "noise_std", "=", "0.1", ")", ":", "\n", "  ", "R", "=", "np", ".", "dot", "(", "np", ".", "transpose", "(", "U", ")", ",", "V", ")", "+", "np", ".", "random", ".", "normal", "(", "0", ",", "noise_std", ",", "size", "=", "(", "N", ",", "M", ")", ")", "\n", "return", "R", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.matrix_factorization.get_indicators": [[44, 47], ["numpy.random.binomial"], "function", ["None"], ["", "def", "get_indicators", "(", "N", ",", "M", ",", "prob_std", "=", "0.5", ")", ":", "\n", "  ", "ind", "=", "np", ".", "random", ".", "binomial", "(", "1", ",", "prob_std", ",", "(", "N", ",", "M", ")", ")", "\n", "return", "ind", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.matrix_factorization.flatten": [[48, 51], ["numpy.reshape"], "function", ["None"], ["", "def", "flatten", "(", "a", ")", ":", "\n", "    ", "n", ",", "m", "=", "a", ".", "shape", "\n", "return", "np", ".", "reshape", "(", "a", ",", "n", "*", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.matrix_factorization.build_mixture": [[52, 58], ["edward.models.Categorical", "edward.models.Mixture", "boosting_bbvi.core.mvn.mvn", "tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor"], "function", ["None"], ["", "def", "build_mixture", "(", "weights", ",", "qus", ")", ":", "\n", "  ", "cat", "=", "Categorical", "(", "probs", "=", "tf", ".", "convert_to_tensor", "(", "weights", ")", ")", "\n", "comps", "=", "[", "mvn", "(", "loc", "=", "tf", ".", "convert_to_tensor", "(", "c", "[", "'loc'", "]", ")", ",", "scale", "=", "tf", ".", "convert_to_tensor", "(", "c", "[", "'scale'", "]", ")", ")", "for", "c", "in", "qus", "]", "\n", "\n", "mix", "=", "Mixture", "(", "cat", "=", "cat", ",", "components", "=", "comps", ")", "\n", "return", "mix", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.matrix_factorization.get_fw_iterates": [[59, 64], ["matrix_factorization.build_mixture"], "function", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr.build_mixture"], ["", "def", "get_fw_iterates", "(", "iter", ",", "weights", ",", "target", ",", "qUVt_components", ")", ":", "\n", "  ", "ret", "=", "{", "}", "\n", "if", "iter", ">", "0", ":", "\n", "    ", "ret", "=", "{", "target", ":", "build_mixture", "(", "weights", ",", "qUVt_components", ")", "}", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.matrix_factorization.update_iterate": [[65, 70], ["s.loc.eval", "s.scale.eval", "components.append"], "function", ["None"], ["", "def", "update_iterate", "(", "components", ",", "s", ")", ":", "\n", "  ", "loc", "=", "s", ".", "loc", ".", "eval", "(", ")", "\n", "scale", "=", "s", ".", "scale", ".", "eval", "(", ")", "\n", "components", ".", "append", "(", "{", "'loc'", ":", "loc", ",", "'scale'", ":", "scale", "}", ")", "\n", "return", "components", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.matrix_factorization.main": [[71, 152], ["numpy.random.randn", "numpy.random.randn", "matrix_factorization.get_indicators", "range", "scipy.loadmat", "scipy.loadmat", "print", "tensorflow.Graph", "os.path.expanduser", "os.path.expanduser", "tf.Graph.as_default", "tensorflow.set_random_seed", "tensorflow.InteractiveSession", "tf.InteractiveSession.as_default", "tensorflow.placeholder", "tensorflow.concat", "tensorflow.concat", "edward.models.Normal", "edward.models.Normal", "tensorflow.concat", "tensorflow.concat", "edward.models.Normal", "boosting_bbvi.KLqp", "relbo.KLqp.run", "weights.append", "matrix_factorization.update_iterate", "matrix_factorization.build_mixture", "edward.models.Normal", "edward.evaluate", "test_mses.append", "print", "edward.evaluate", "test_lls.append", "print", "numpy.savetxt", "numpy.savetxt", "os.path.join", "os.path.join", "tensorflow.ones", "tensorflow.ones", "tensorflow.zeros", "tensorflow.zeros", "tensorflow.ones", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.nn.softplus", "tensorflow.nn.softplus", "matrix_factorization.get_fw_iterates", "tensorflow.matmul", "tensorflow.ones", "tensorflow.matmul", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.transpose", "I_test.astype", "R_true.astype", "I_test.astype", "tensorflow.transpose"], "function", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.matrix_factorization.get_indicators", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr.update_iterate", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr.build_mixture", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr.get_fw_iterates"], ["", "def", "main", "(", "_", ")", ":", "\n", "# true latent factors", "\n", "  ", "U_true", "=", "np", ".", "random", ".", "randn", "(", "FLAGS", ".", "D", ",", "FLAGS", ".", "N", ")", "\n", "V_true", "=", "np", ".", "random", ".", "randn", "(", "FLAGS", ".", "D", ",", "FLAGS", ".", "M", ")", "\n", "\n", "## DATA", "\n", "#R_true = build_toy_dataset(U_true, V_true, FLAGS.N, FLAGS.M)", "\n", "#I_train = get_indicators(FLAGS.N, FLAGS.M)", "\n", "#I_test = 1 - I_train", "\n", "#N = FLAGS.N", "\n", "#M = FLAGS.M", "\n", "\n", "#tr = sio.loadmat(os.path.expanduser(\"~/data/bbbvi/trainData1.mat\"))['X']", "\n", "#te = sio.loadmat(os.path.expanduser(\"~/data/bbbvi/testData1.mat\"))['X']", "\n", "#tr = tr[:,:100]", "\n", "#te = te[:,:100]", "\n", "#I_train = tr != 0", "\n", "#I_test = te != 0", "\n", "#R_true = (tr + te).astype(np.float32)", "\n", "#N,M = R_true.shape", "\n", "\n", "tr", "=", "sio", ".", "loadmat", "(", "os", ".", "path", ".", "expanduser", "(", "\"~/data/bbbvi/cbcl.mat\"", ")", ")", "[", "'V'", "]", "\n", "te", "=", "sio", ".", "loadmat", "(", "os", ".", "path", ".", "expanduser", "(", "\"~/data/bbbvi/cbcl.mat\"", ")", ")", "[", "'V'", "]", "\n", "#I_train = np.ones(tr.shape)", "\n", "#I_test = np.ones(tr.shape)", "\n", "R_true", "=", "tr", "\n", "N", ",", "M", "=", "tr", ".", "shape", "\n", "D", "=", "FLAGS", ".", "D", "\n", "I_train", "=", "get_indicators", "(", "N", ",", "M", ",", "FLAGS", ".", "mask_ratio", ")", "\n", "I_test", "=", "1", "-", "I_train", "\n", "\n", "it_best", "=", "0", "\n", "weights", ",", "qUVt_components", ",", "mses", "=", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "test_mses", ",", "test_lls", "=", "[", "]", ",", "[", "]", "\n", "for", "iter", "in", "range", "(", "FLAGS", ".", "n_fw_iter", ")", ":", "\n", "    ", "print", "(", "\"iter\"", ",", "iter", ")", "\n", "g", "=", "tf", ".", "Graph", "(", ")", "\n", "with", "g", ".", "as_default", "(", ")", ":", "\n", "        ", "tf", ".", "set_random_seed", "(", "FLAGS", ".", "seed", ")", "\n", "sess", "=", "tf", ".", "InteractiveSession", "(", ")", "\n", "with", "sess", ".", "as_default", "(", ")", ":", "\n", "# MODEL", "\n", "          ", "I", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "N", ",", "M", "]", ")", "\n", "\n", "scale_uv", "=", "tf", ".", "concat", "(", "[", "tf", ".", "ones", "(", "[", "FLAGS", ".", "D", ",", "N", "]", ")", ",", "tf", ".", "ones", "(", "[", "FLAGS", ".", "D", ",", "M", "]", ")", "]", ",", "axis", "=", "1", ")", "\n", "mean_uv", "=", "tf", ".", "concat", "(", "[", "tf", ".", "zeros", "(", "[", "FLAGS", ".", "D", ",", "N", "]", ")", ",", "tf", ".", "zeros", "(", "[", "FLAGS", ".", "D", ",", "M", "]", ")", "]", ",", "axis", "=", "1", ")", "\n", "\n", "UV", "=", "Normal", "(", "loc", "=", "mean_uv", ",", "scale", "=", "scale_uv", ")", "\n", "R", "=", "Normal", "(", "loc", "=", "tf", ".", "matmul", "(", "tf", ".", "transpose", "(", "UV", "[", ":", ",", ":", "N", "]", ")", ",", "UV", "[", ":", ",", "N", ":", "]", ")", "*", "I", ",", "scale", "=", "tf", ".", "ones", "(", "[", "N", ",", "M", "]", ")", ")", "\n", "mean_quv", "=", "tf", ".", "concat", "(", "[", "tf", ".", "get_variable", "(", "\"qU/loc\"", ",", "[", "FLAGS", ".", "D", ",", "N", "]", ")", ",", "tf", ".", "get_variable", "(", "\"qV/loc\"", ",", "[", "FLAGS", ".", "D", ",", "M", "]", ")", "]", ",", "\n", "axis", "=", "1", ")", "\n", "scale_quv", "=", "tf", ".", "concat", "(", "[", "tf", ".", "nn", ".", "softplus", "(", "tf", ".", "get_variable", "(", "\"qU/scale\"", ",", "[", "FLAGS", ".", "D", ",", "N", "]", ")", ")", ",", "\n", "tf", ".", "nn", ".", "softplus", "(", "tf", ".", "get_variable", "(", "\"qV/scale\"", ",", "[", "FLAGS", ".", "D", ",", "M", "]", ")", ")", "]", ",", "axis", "=", "1", ")", "\n", "\n", "qUV", "=", "Normal", "(", "loc", "=", "mean_quv", ",", "scale", "=", "scale_quv", ")", "\n", "\n", "inference", "=", "relbo", ".", "KLqp", "(", "{", "UV", ":", "qUV", "}", ",", "data", "=", "{", "R", ":", "R_true", ",", "I", ":", "I_train", "}", ",", "\n", "fw_iterates", "=", "get_fw_iterates", "(", "iter", ",", "weights", ",", "UV", ",", "qUVt_components", ")", ",", "\n", "fw_iter", "=", "iter", ")", "\n", "inference", ".", "run", "(", "n_iter", "=", "100", ")", "\n", "\n", "gamma", "=", "2.", "/", "(", "iter", "+", "2.", ")", "\n", "weights", "=", "[", "(", "1.", "-", "gamma", ")", "*", "w", "for", "w", "in", "weights", "]", "\n", "weights", ".", "append", "(", "gamma", ")", "\n", "\n", "qUVt_components", "=", "update_iterate", "(", "qUVt_components", ",", "qUV", ")", "\n", "\n", "qUV_new", "=", "build_mixture", "(", "weights", ",", "qUVt_components", ")", "\n", "qR", "=", "Normal", "(", "loc", "=", "tf", ".", "matmul", "(", "tf", ".", "transpose", "(", "qUV_new", "[", ":", ",", ":", "N", "]", ")", ",", "qUV_new", "[", ":", ",", "N", ":", "]", ")", ",", "scale", "=", "tf", ".", "ones", "(", "[", "N", ",", "M", "]", ")", ")", "\n", "\n", "# CRITICISM", "\n", "test_mse", "=", "ed", ".", "evaluate", "(", "'mean_squared_error'", ",", "data", "=", "{", "qR", ":", "R_true", ",", "I", ":", "I_test", ".", "astype", "(", "bool", ")", "}", ")", "\n", "test_mses", ".", "append", "(", "test_mse", ")", "\n", "print", "(", "'test mse'", ",", "test_mse", ")", "\n", "\n", "test_ll", "=", "ed", ".", "evaluate", "(", "'log_lik'", ",", "data", "=", "{", "qR", ":", "R_true", ".", "astype", "(", "'float32'", ")", ",", "I", ":", "I_test", ".", "astype", "(", "bool", ")", "}", ")", "\n", "test_lls", ".", "append", "(", "test_ll", ")", "\n", "print", "(", "'test_ll'", ",", "test_ll", ")", "\n", "\n", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "outdir", ",", "'test_mse.csv'", ")", ",", "test_mses", ",", "delimiter", "=", "','", ")", "\n", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "outdir", ",", "'test_ll.csv'", ")", ",", "test_lls", ",", "delimiter", "=", "','", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr_elbo.construct_multivariatenormaldiag": [[41, 46], ["tensorflow.get_variable", "tensorflow.nn.softplus", "boosting_bbvi.core.mvn.mvn", "tensorflow.get_variable", "tensorflow.random_normal", "numpy.random.normal"], "function", ["None"], ["def", "construct_multivariatenormaldiag", "(", "dims", ",", "iter", ",", "name", "=", "''", ")", ":", "\n", "  ", "loc", "=", "tf", ".", "get_variable", "(", "name", "+", "\"_loc%d\"", "%", "iter", ",", "initializer", "=", "tf", ".", "random_normal", "(", "dims", ")", "+", "np", ".", "random", ".", "normal", "(", ")", ")", "\n", "scale", "=", "tf", ".", "nn", ".", "softplus", "(", "tf", ".", "get_variable", "(", "name", "+", "\"_scale%d\"", "%", "iter", ",", "dims", ")", ")", "\n", "rez", "=", "mvn", "(", "loc", "=", "loc", ",", "scale", "=", "scale", ")", "\n", "return", "rez", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr_elbo.main": [[47, 85], ["edward.set_seed", "blr_utils.get_data", "tensorflow.Graph", "tf.Graph.as_default", "tensorflow.set_random_seed", "tensorflow.InteractiveSession", "tf.InteractiveSession.as_default", "edward.models.Normal", "tensorflow.placeholder", "edward.models.Bernoulli", "tensorflow.placeholder", "edward.models.Bernoulli", "blr_elbo.construct_multivariatenormaldiag", "edward.KLqp", "tensorflow.global_variables_initializer().run", "ed.KLqp.run", "edward.copy", "edward.copy", "print", "print", "print", "print", "edward.evaluate", "edward.evaluate", "edward.evaluate", "edward.evaluate", "tensorflow.zeros", "edward.dot", "edward.dot", "tensorflow.global_variables_initializer", "tensorflow.ones"], "function", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr_utils.get_data", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.mixture_model_relbo.construct_multivariatenormaldiag"], ["", "def", "main", "(", "_", ")", ":", "\n", "  ", "ed", ".", "set_seed", "(", "FLAGS", ".", "seed", ")", "\n", "\n", "(", "(", "Xtrain", ",", "ytrain", ")", ",", "(", "Xtest", ",", "ytest", ")", ")", "=", "blr_utils", ".", "get_data", "(", ")", "\n", "N", ",", "D", "=", "Xtrain", ".", "shape", "\n", "N_test", ",", "D_test", "=", "Xtest", ".", "shape", "\n", "\n", "weights", ",", "q_components", "=", "[", "]", ",", "[", "]", "\n", "\n", "g", "=", "tf", ".", "Graph", "(", ")", "\n", "with", "g", ".", "as_default", "(", ")", ":", "\n", "    ", "tf", ".", "set_random_seed", "(", "FLAGS", ".", "seed", ")", "\n", "sess", "=", "tf", ".", "InteractiveSession", "(", ")", "\n", "with", "sess", ".", "as_default", "(", ")", ":", "\n", "\n", "# MODEL", "\n", "      ", "w", "=", "Normal", "(", "loc", "=", "tf", ".", "zeros", "(", "D", ")", ",", "scale", "=", "1.0", "*", "tf", ".", "ones", "(", "D", ")", ")", "\n", "\n", "X", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "N", ",", "D", "]", ")", "\n", "y", "=", "Bernoulli", "(", "logits", "=", "ed", ".", "dot", "(", "X", ",", "w", ")", ")", "\n", "\n", "X_test", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "N_test", ",", "D_test", "]", ")", "# TODO why are these test variables necessary?", "\n", "y_test", "=", "Bernoulli", "(", "logits", "=", "ed", ".", "dot", "(", "X_test", ",", "w", ")", ")", "\n", "\n", "iter", "=", "42", "# TODO", "\n", "\n", "qw", "=", "construct_multivariatenormaldiag", "(", "[", "D", "]", ",", "iter", ",", "'qw'", ")", "\n", "inference", "=", "ed", ".", "KLqp", "(", "{", "w", ":", "qw", "}", ",", "data", "=", "{", "X", ":", "Xtrain", ",", "y", ":", "ytrain", "}", ")", "\n", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", ")", "\n", "inference", ".", "run", "(", "n_iter", "=", "FLAGS", ".", "LMO_iter", ")", "\n", "\n", "x_post", "=", "ed", ".", "copy", "(", "y", ",", "{", "w", ":", "qw", "}", ")", "\n", "x_post_t", "=", "ed", ".", "copy", "(", "y_test", ",", "{", "w", ":", "qw", "}", ")", "\n", "\n", "print", "(", "'log-likelihood train '", ",", "ed", ".", "evaluate", "(", "'log_likelihood'", ",", "data", "=", "{", "x_post", ":", "ytrain", ",", "X", ":", "Xtrain", "}", ")", ")", "\n", "print", "(", "'log-likelihood test '", ",", "ed", ".", "evaluate", "(", "'log_likelihood'", ",", "data", "=", "{", "x_post_t", ":", "ytest", ",", "X_test", ":", "Xtest", "}", ")", ")", "\n", "print", "(", "'binary_accuracy train '", ",", "ed", ".", "evaluate", "(", "'binary_accuracy'", ",", "data", "=", "{", "x_post", ":", "ytrain", ",", "X", ":", "Xtrain", "}", ")", ")", "\n", "print", "(", "'binary_accuracy test '", ",", "ed", ".", "evaluate", "(", "'binary_accuracy'", ",", "data", "=", "{", "x_post_t", ":", "ytest", ",", "X_test", ":", "Xtest", "}", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr_utils.build_1d": [[27, 36], ["numpy.linspace", "X.reshape.reshape", "numpy.tanh", "numpy.random.normal"], "function", ["None"], ["def", "build_1d", "(", "N", "=", "40", ",", "noise_std", "=", "0.1", ")", ":", "\n", "  ", "D", "=", "1", "\n", "X", "=", "np", ".", "linspace", "(", "-", "6", ",", "6", ",", "num", "=", "N", ")", "\n", "y", "=", "np", ".", "tanh", "(", "X", ")", "+", "np", ".", "random", ".", "normal", "(", "0", ",", "noise_std", ",", "size", "=", "N", ")", "\n", "y", "[", "y", "<", "0.5", "]", "=", "0", "\n", "y", "[", "y", ">=", "0.5", "]", "=", "1", "\n", "X", "=", "(", "X", "-", "4.0", ")", "/", "4.0", "\n", "X", "=", "X", ".", "reshape", "(", "(", "N", ",", "D", ")", ")", "\n", "return", "X", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr_utils.build_1d_bimodal": [[37, 54], ["numpy.linspace", "numpy.append", "numpy.append", "X.reshape.reshape", "matplotlib.scatter", "matplotlib.show", "numpy.tanh", "numpy.random.normal", "numpy.zeros"], "function", ["None"], ["", "def", "build_1d_bimodal", "(", "N", "=", "40", ",", "noise_std", "=", "0.1", ")", ":", "\n", "  ", "D", "=", "1", "\n", "X", "=", "np", ".", "linspace", "(", "-", "6", ",", "60", ",", "num", "=", "N", ")", "\n", "y", "=", "np", ".", "tanh", "(", "X", ")", "+", "np", ".", "random", ".", "normal", "(", "0", ",", "noise_std", ",", "size", "=", "N", ")", "\n", "y", "[", "y", "<", "0.5", "]", "=", "0", "\n", "y", "[", "y", ">=", "0.5", "]", "=", "1", "\n", "X", "=", "(", "X", "-", "4.0", ")", "/", "4.0", "\n", "\n", "X", "=", "np", ".", "append", "(", "X", ",", "X", "[", "y", "==", "0", "]", "+", "20", ")", "\n", "y", "=", "np", ".", "append", "(", "y", ",", "np", ".", "zeros", "(", "(", "y", "[", "y", "==", "0", "]", ")", ".", "shape", ")", ")", "\n", "\n", "X", "=", "X", ".", "reshape", "(", "(", "X", ".", "shape", "[", "0", "]", ",", "D", ")", ")", "\n", "\n", "plt", ".", "scatter", "(", "X", ",", "y", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "return", "X", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr_utils.build_linearly_separable": [[55, 65], ["numpy.array", "numpy.array", "numpy.vstack", "numpy.concatenate", "numpy.arange", "numpy.random.shuffle", "numpy.zeros", "numpy.ones", "numpy.array", "numpy.random.normal", "range", "numpy.array", "numpy.random.normal", "range"], "function", ["None"], ["", "def", "build_linearly_separable", "(", ")", ":", "\n", "  ", "Os", "=", "np", ".", "array", "(", "[", "np", ".", "array", "(", "[", "3.0", ",", "3.0", "]", ")", "+", "np", ".", "random", ".", "normal", "(", "[", "0", ",", "0", "]", ",", "[", "2.", ",", "2.", "]", ")", "for", "_", "in", "range", "(", "100", ")", "]", ")", "\n", "Xs", "=", "np", ".", "array", "(", "[", "np", ".", "array", "(", "[", "-", "3.0", ",", "-", "3.0", "]", ")", "+", "np", ".", "random", ".", "normal", "(", "[", "0", ",", "0", "]", ",", "[", "2.", ",", "2.", "]", ")", "for", "_", "in", "range", "(", "100", ")", "]", ")", "\n", "\n", "X", "=", "np", ".", "vstack", "(", "(", "Os", ",", "Xs", ")", ")", "\n", "y", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "100", ")", ",", "np", ".", "ones", "(", "100", ")", "]", ")", "\n", "idxs", "=", "np", ".", "arange", "(", "200", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "idxs", ")", "\n", "\n", "return", "X", "[", "idxs", ",", ":", "]", ",", "y", "[", "idxs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr_utils.build_xs_and_os": [[66, 82], ["numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.vstack", "numpy.vstack", "numpy.vstack", "numpy.concatenate", "numpy.arange", "numpy.random.shuffle", "numpy.zeros", "numpy.ones", "numpy.array", "numpy.random.normal", "range", "numpy.array", "numpy.random.normal", "range", "numpy.array", "numpy.random.normal", "range", "numpy.array", "numpy.random.normal", "range"], "function", ["None"], ["", "def", "build_xs_and_os", "(", ")", ":", "\n", "  ", "Os1", "=", "np", ".", "array", "(", "[", "np", ".", "array", "(", "[", "3.0", ",", "3.0", "]", ")", "+", "np", ".", "random", ".", "normal", "(", "[", "0", ",", "0", "]", ",", "[", "1.", ",", "1.", "]", ")", "for", "_", "in", "range", "(", "100", ")", "]", ")", "\n", "Xs1", "=", "np", ".", "array", "(", "[", "np", ".", "array", "(", "[", "3.0", ",", "-", "3.0", "]", ")", "+", "np", ".", "random", ".", "normal", "(", "[", "0", ",", "0", "]", ",", "[", "1.", ",", "1.", "]", ")", "for", "_", "in", "range", "(", "100", ")", "]", ")", "\n", "\n", "Os2", "=", "np", ".", "array", "(", "[", "np", ".", "array", "(", "[", "-", "3.0", ",", "-", "3.0", "]", ")", "+", "np", ".", "random", ".", "normal", "(", "[", "0", ",", "0", "]", ",", "[", "1.", ",", "1.", "]", ")", "for", "_", "in", "range", "(", "100", ")", "]", ")", "\n", "Xs2", "=", "np", ".", "array", "(", "[", "np", ".", "array", "(", "[", "-", "3.0", ",", "3.0", "]", ")", "+", "np", ".", "random", ".", "normal", "(", "[", "0", ",", "0", "]", ",", "[", "1.", ",", "1.", "]", ")", "for", "_", "in", "range", "(", "100", ")", "]", ")", "\n", "\n", "Os", "=", "np", ".", "vstack", "(", "(", "Os1", ",", "Os2", ")", ")", "\n", "Xs", "=", "np", ".", "vstack", "(", "(", "Xs1", ",", "Xs2", ")", ")", "\n", "\n", "X", "=", "np", ".", "vstack", "(", "(", "Os", ",", "Xs", ")", ")", "\n", "y", "=", "np", ".", "concatenate", "(", "[", "np", ".", "zeros", "(", "200", ")", ",", "np", ".", "ones", "(", "200", ")", "]", ")", "\n", "idxs", "=", "np", ".", "arange", "(", "400", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "idxs", ")", "\n", "\n", "return", "X", "[", "idxs", ",", ":", "]", ",", "y", "[", "idxs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr_utils.load_chem_data": [[83, 93], ["numpy.load", "sp.csr_matrix"], "function", ["None"], ["", "def", "load_chem_data", "(", "path", ")", ":", "\n", "  ", "dat", "=", "np", ".", "load", "(", "path", ")", "\n", "if", "'X'", "in", "dat", ":", "\n", "      ", "X", "=", "dat", "[", "'X'", "]", "\n", "", "else", ":", "\n", "      ", "X", "=", "sp", ".", "csr_matrix", "(", "(", "dat", "[", "'data'", "]", ",", "dat", "[", "'indices'", "]", ",", "dat", "[", "'indptr'", "]", ")", ",", "\n", "shape", "=", "dat", "[", "'shape'", "]", ")", "\n", "", "y", "=", "dat", "[", "'y'", "]", "\n", "y", "[", "y", "<", "0", "]", "=", "0", "\n", "return", "X", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr_utils.get_chem_data": [[94, 101], ["os.path.expanduser", "blr_utils.load_chem_data", "os.path.expanduser", "blr_utils.load_chem_data", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr_utils.load_chem_data", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr_utils.load_chem_data"], ["", "def", "get_chem_data", "(", ")", ":", "\n", "  ", "basepath", "=", "\"data/chem\"", "# TODO refactor", "\n", "traindatapath", "=", "os", ".", "path", ".", "expanduser", "(", "os", ".", "path", ".", "join", "(", "basepath", ",", "'ds1.100_train.npz'", ")", ")", "\n", "Xtrain", ",", "ytrain", "=", "load_chem_data", "(", "traindatapath", ")", "\n", "testdatapath", "=", "os", ".", "path", ".", "expanduser", "(", "os", ".", "path", ".", "join", "(", "basepath", ",", "'ds1.100_test.npz'", ")", ")", "\n", "Xtest", ",", "ytest", "=", "load_chem_data", "(", "testdatapath", ")", "\n", "return", "(", "(", "Xtrain", ",", "ytrain", ")", ",", "(", "Xtest", ",", "ytest", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr_utils.construct_multivariatenormaldiag": [[102, 107], ["tensorflow.get_variable", "tensorflow.nn.softplus", "boosting_bbvi.core.mvn.mvn", "tensorflow.get_variable", "tensorflow.random_normal", "numpy.random.normal"], "function", ["None"], ["", "def", "construct_multivariatenormaldiag", "(", "dims", ",", "iter", ",", "name", "=", "''", ")", ":", "\n", "  ", "loc", "=", "tf", ".", "get_variable", "(", "name", "+", "\"_loc%d\"", "%", "iter", ",", "initializer", "=", "tf", ".", "random_normal", "(", "dims", ")", "+", "np", ".", "random", ".", "normal", "(", ")", ")", "\n", "scale", "=", "tf", ".", "nn", ".", "softplus", "(", "tf", ".", "get_variable", "(", "name", "+", "\"_scale%d\"", "%", "iter", ",", "dims", ")", ")", "\n", "rez", "=", "mvn", "(", "loc", "=", "loc", ",", "scale", "=", "scale", ")", "\n", "return", "rez", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr_utils.setup_outdir": [[108, 113], ["os.path.expanduser", "os.makedirs"], "function", ["None"], ["", "def", "setup_outdir", "(", ")", ":", "\n", "  ", "outdir", "=", "FLAGS", ".", "outdir", "\n", "outdir", "=", "os", ".", "path", ".", "expanduser", "(", "outdir", ")", "\n", "os", ".", "makedirs", "(", "outdir", ",", "exist_ok", "=", "True", ")", "\n", "return", "outdir", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr_utils.build_mixture": [[114, 120], ["edward.models.Categorical", "edward.models.Mixture", "boosting_bbvi.core.mvn.mvn", "tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor"], "function", ["None"], ["", "def", "build_mixture", "(", "weights", ",", "components", ")", ":", "\n", "  ", "cat", "=", "Categorical", "(", "probs", "=", "tf", ".", "convert_to_tensor", "(", "weights", ")", ")", "\n", "comps", "=", "[", "mvn", "(", "loc", "=", "tf", ".", "convert_to_tensor", "(", "c", "[", "'loc'", "]", ")", ",", "\n", "scale", "=", "tf", ".", "convert_to_tensor", "(", "c", "[", "'scale'", "]", ")", ")", "for", "c", "in", "components", "]", "\n", "mix", "=", "Mixture", "(", "cat", "=", "cat", ",", "components", "=", "comps", ")", "\n", "return", "mix", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr_utils.add_bias_column": [[121, 125], ["numpy.ones"], "function", ["None"], ["", "def", "add_bias_column", "(", "X", ")", ":", "\n", "  ", "N", ",", "D", "=", "X", ".", "shape", "\n", "ret", "=", "np", ".", "c_", "[", "X", ",", "np", ".", "ones", "(", "N", ")", "]", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr_utils.load_wine_data": [[126, 131], ["os.path.expanduser", "os.path.join", "numpy.load"], "function", ["None"], ["", "def", "load_wine_data", "(", ")", ":", "\n", "  ", "basepath", "=", "os", ".", "path", ".", "expanduser", "(", "\"data/wine\"", ")", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "basepath", ",", "'train_test_split.npz'", ")", "\n", "data", "=", "np", ".", "load", "(", "filename", ")", "\n", "return", "(", "data", "[", "'Xtrain'", "]", ",", "data", "[", "'ytrain'", "]", ")", ",", "(", "data", "[", "'Xtest'", "]", ",", "data", "[", "'ytest'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr_utils.load_eicu": [[132, 136], ["None"], "function", ["None"], ["", "def", "load_eicu", "(", "task", ")", ":", "\n", "  ", "'''We need to release this data. Gideon <gideon@inf.ethz.ch>'''", "\n", "#TODO", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr_utils.load_eicu_bak": [[147, 157], ["numpy.load", "tasks.index"], "function", ["None"], ["", "def", "load_eicu_bak", "(", "task", "=", "'icu_mortality'", ")", ":", "\n", "  ", "'''TODO. We need to release this data. Gideon <gideon@inf.ethz.ch>'''", "\n", "basepath", "=", "\"data/eicu/train_test_split.npz\"", "\n", "data", "=", "np", ".", "load", "(", "basepath", ")", "\n", "\n", "# N.B. we only deal with classification, no regression on length of icu stay.", "\n", "tasks", "=", "[", "'icu_mortality'", ",", "'hospital_mortality'", ",", "'length_of_icu_stay'", "]", "\n", "col", "=", "tasks", ".", "index", "(", "task", ")", "\n", "\n", "return", "(", "data", "[", "'xtrain'", "]", ",", "data", "[", "'ytrain'", "]", "[", ":", ",", "col", "]", ")", ",", "(", "data", "[", "'xtest'", "]", ",", "data", "[", "'ytest'", "]", "[", ":", ",", "col", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr_utils.get_data": [[158, 190], ["blr_utils.build_linearly_separable", "blr_utils.build_linearly_separable", "blr_utils.build_xs_and_os", "blr_utils.build_xs_and_os", "blr_utils.build_1d", "blr_utils.build_1d", "blr_utils.build_1d_bimodal", "blr_utils.build_1d_bimodal", "blr_utils.get_chem_data", "blr_utils.load_wine_data", "blr_utils.load_eicu", "blr_utils.load_eicu", "Exception"], "function", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr_utils.build_linearly_separable", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr_utils.build_linearly_separable", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr_utils.build_xs_and_os", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr_utils.build_xs_and_os", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr_utils.build_1d", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr_utils.build_1d", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr_utils.build_1d_bimodal", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr_utils.build_1d_bimodal", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr_utils.get_chem_data", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr_utils.load_wine_data", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr_utils.load_eicu", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr_utils.load_eicu"], ["", "def", "get_data", "(", ")", ":", "\n", "  ", "if", "FLAGS", ".", "exp", "==", "'synthetic_linearly_sep'", ":", "\n", "    ", "Xtrain", ",", "ytrain", "=", "build_linearly_separable", "(", ")", "\n", "Xtest", ",", "ytest", "=", "build_linearly_separable", "(", ")", "\n", "\n", "#fig, ax = plt.subplots() # TODO dup below", "\n", "#ax.scatter(Xtrain[ytrain == 0,0], Xtrain[ytrain == 0,1], marker='o')", "\n", "#ax.scatter(Xtrain[ytrain == 1,0], Xtrain[ytrain == 1,1], marker='x')", "\n", "#plt.show()", "\n", "", "elif", "FLAGS", ".", "exp", "==", "'synthetic_not_linearly_sep'", ":", "\n", "    ", "Xtrain", ",", "ytrain", "=", "build_xs_and_os", "(", ")", "\n", "Xtest", ",", "ytest", "=", "build_xs_and_os", "(", ")", "\n", "\n", "#fig, ax = plt.subplots()", "\n", "#ax.scatter(Xtrain[ytrain == 0,0], Xtrain[ytrain == 0,1], marker='o')", "\n", "#ax.scatter(Xtrain[ytrain == 1,0], Xtrain[ytrain == 1,1], marker='x')", "\n", "#plt.show()", "\n", "", "elif", "FLAGS", ".", "exp", "==", "'synthetic_1d'", ":", "\n", "    ", "return", "build_1d", "(", ")", ",", "build_1d", "(", ")", "\n", "", "elif", "FLAGS", ".", "exp", "==", "'synthetic_1d_bimodal'", ":", "\n", "    ", "return", "build_1d_bimodal", "(", ")", ",", "build_1d_bimodal", "(", ")", "\n", "", "elif", "FLAGS", ".", "exp", "==", "'chem'", ":", "\n", "    ", "(", "(", "Xtrain", ",", "ytrain", ")", ",", "(", "Xtest", ",", "ytest", ")", ")", "=", "get_chem_data", "(", ")", "\n", "", "elif", "FLAGS", ".", "exp", "==", "'wine'", ":", "\n", "    ", "(", "(", "Xtrain", ",", "ytrain", ")", ",", "(", "Xtest", ",", "ytest", ")", ")", "=", "load_wine_data", "(", ")", "\n", "", "elif", "FLAGS", ".", "exp", "==", "'eicu_icu_mortality'", ":", "\n", "    ", "(", "(", "Xtrain", ",", "ytrain", ")", ",", "(", "Xtest", ",", "ytest", ")", ")", "=", "load_eicu", "(", "'icu_mortality'", ")", "\n", "", "elif", "FLAGS", ".", "exp", "==", "'eicu_hospital_mortality'", ":", "\n", "    ", "(", "(", "Xtrain", ",", "ytrain", ")", ",", "(", "Xtest", ",", "ytest", ")", ")", "=", "load_eicu", "(", "'hospital_mortality'", ")", "\n", "", "else", ":", "\n", "    ", "raise", "Exception", "(", "\"unknown experiment\"", ")", "\n", "", "return", "(", "Xtrain", ",", "ytrain", ")", ",", "(", "Xtest", ",", "ytest", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.mixture_model_relbo.build_toy_dataset": [[66, 74], ["numpy.zeros", "numpy.zeros", "range", "numpy.argmax", "numpy.random.multivariate_normal", "numpy.random.multinomial", "numpy.diag"], "function", ["None"], ["def", "build_toy_dataset", "(", "N", ",", "D", "=", "1", ")", ":", "\n", "    ", "x", "=", "np", ".", "zeros", "(", "(", "N", ",", "D", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ks", "=", "np", ".", "zeros", "(", "N", ",", "dtype", "=", "np", ".", "int", ")", "\n", "for", "n", "in", "range", "(", "N", ")", ":", "\n", "        ", "k", "=", "np", ".", "argmax", "(", "np", ".", "random", ".", "multinomial", "(", "1", ",", "pi", "[", "0", "]", ")", ")", "\n", "x", "[", "n", ",", ":", "]", "=", "np", ".", "random", ".", "multivariate_normal", "(", "mus", "[", "k", "]", ",", "np", ".", "diag", "(", "stds", "[", "k", "]", ")", ")", "\n", "ks", "[", "n", "]", "=", "k", "\n", "", "return", "x", ",", "ks", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.mixture_model_relbo.construct_multivariatenormaldiag": [[75, 82], ["tensorflow.get_variable", "tensorflow.nn.softplus", "edward.models.MultivariateNormalDiag", "tensorflow.get_variable", "tensorflow.random_normal", "tensorflow.random_normal"], "function", ["None"], ["", "def", "construct_multivariatenormaldiag", "(", "dims", ",", "iter", ",", "name", "=", "''", ",", "sample_shape", "=", "N", ")", ":", "\n", "#loc = tf.get_variable(name + \"_loc%d\" % iter, dims)", "\n", "    ", "loc", "=", "tf", ".", "get_variable", "(", "name", "+", "\"_loc%d\"", "%", "iter", ",", "initializer", "=", "tf", ".", "random_normal", "(", "dims", ")", ")", "\n", "#scale = tf.nn.softplus(tf.get_variable(name + \"_scale%d\" % iter, dims))", "\n", "scale", "=", "tf", ".", "nn", ".", "softplus", "(", "tf", ".", "get_variable", "(", "name", "+", "\"_scale%d\"", "%", "iter", ",", "initializer", "=", "tf", ".", "random_normal", "(", "dims", ")", ")", ")", "\n", "mvn", "=", "MultivariateNormalDiag", "(", "loc", "=", "loc", ",", "scale_diag", "=", "scale", ",", "sample_shape", "=", "sample_shape", ")", "\n", "return", "mvn", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.mixture_model_relbo.construct_normal": [[83, 88], ["tensorflow.get_variable", "tensorflow.get_variable", "edward.models.Normal", "tensorflow.random_normal", "tensorflow.nn.softplus", "tensorflow.random_normal", "numpy.random.normal"], "function", ["None"], ["", "def", "construct_normal", "(", "dims", ",", "iter", ",", "name", "=", "''", ",", "sample_shape", "=", "N", ")", ":", "\n", "    ", "loc", "=", "tf", ".", "get_variable", "(", "name", "+", "\"_loc%d\"", "%", "iter", ",", "initializer", "=", "tf", ".", "random_normal", "(", "dims", ")", "+", "np", ".", "random", ".", "normal", "(", ")", ")", "\n", "scale", "=", "tf", ".", "get_variable", "(", "name", "+", "\"_scale%d\"", "%", "iter", ",", "initializer", "=", "tf", ".", "random_normal", "(", "dims", ")", ")", "\n", "return", "Normal", "(", "loc", "=", "loc", ",", "scale", "=", "tf", ".", "nn", ".", "softplus", "(", "scale", ")", ",", "sample_shape", "=", "N", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.mixture_model_relbo.elbo": [[89, 97], ["q.sample", "elbo_samples.eval.eval", "numpy.mean", "numpy.std", "p.log_prob", "q.log_prob"], "function", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.sample", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob"], ["", "def", "elbo", "(", "q", ",", "p", ",", "n_samples", "=", "1000", ")", ":", "\n", "    ", "samples", "=", "q", ".", "sample", "(", "n_samples", ")", "\n", "elbo_samples", "=", "p", ".", "log_prob", "(", "samples", ")", "-", "q", ".", "log_prob", "(", "samples", ")", "\n", "elbo_samples", "=", "elbo_samples", ".", "eval", "(", ")", "\n", "\n", "avg", "=", "np", ".", "mean", "(", "elbo_samples", ")", "\n", "std", "=", "np", ".", "std", "(", "elbo_samples", ")", "\n", "return", "avg", ",", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.mixture_model_relbo.setup_outdir": [[98, 103], ["os.path.expanduser", "os.makedirs"], "function", ["None"], ["", "def", "setup_outdir", "(", ")", ":", "\n", "    ", "outdir", "=", "FLAGS", ".", "outdir", "\n", "outdir", "=", "os", ".", "path", ".", "expanduser", "(", "outdir", ")", "\n", "os", ".", "makedirs", "(", "outdir", ",", "exist_ok", "=", "True", ")", "\n", "return", "outdir", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.mixture_model_relbo.line_search_dkl": [[104, 161], ["edward.models.Mixture", "boosting_bbvi.core.infinite_mixture.InfiniteMixtureScipy", "list", "boosting_bbvi.core.infinite_mixture.InfiniteMixtureScipy.sample_n", "scipy.multivariate_normal", "stats.multivariate_normal.rvs", "copy.copy", "copy.copy", "copy.copy.append", "copy.copy.append", "edward.util.Progbar", "range", "numpy.log", "edward.models.Normal", "zip", "numpy.dot", "print", "copy.copy", "new_weights[].append", "boosting_bbvi.core.infinite_mixture.InfiniteMixtureScipy", "list", "range", "edward.models.Categorical", "numpy.array", "numpy.array", "zip", "mixture_model_relbo.line_search_dkl.px_qx_ratio_log_prob"], "function", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.sample_n"], ["", "def", "line_search_dkl", "(", "weights", ",", "locs", ",", "diags", ",", "mu_s", ",", "cov_s", ",", "x", ",", "k", ")", ":", "\n", "    ", "def", "softmax", "(", "v", ")", ":", "\n", "        ", "return", "np", ".", "log", "(", "1", "+", "np", ".", "exp", "(", "v", ")", ")", "\n", "\n", "", "N_samples", "=", "10", "\n", "\n", "weights", "=", "[", "weights", "]", "\n", "\n", "qt_comps", "=", "[", "Normal", "(", "loc", "=", "tf", ".", "convert_to_tensor", "(", "locs", "[", "i", "]", ")", ",", "\n", "scale", "=", "tf", ".", "convert_to_tensor", "(", "diags", "[", "i", "]", ")", ")", "for", "i", "in", "range", "(", "len", "(", "locs", ")", ")", "]", "\n", "\n", "qt", "=", "Mixture", "(", "cat", "=", "Categorical", "(", "probs", "=", "tf", ".", "convert_to_tensor", "(", "weights", ")", ")", ",", "\n", "components", "=", "qt_comps", ",", "sample_shape", "=", "N", ")", "\n", "\n", "qt", "=", "InfiniteMixtureScipy", "(", "stats", ".", "multivariate_normal", ")", "\n", "qt", ".", "weights", "=", "weights", "[", "0", "]", "\n", "qt", ".", "params", "=", "list", "(", "zip", "(", "[", "[", "l", "]", "for", "l", "in", "locs", "]", ",", "[", "[", "softmax", "(", "np", ".", "dot", "(", "d", ",", "d", ")", ")", "]", "for", "d", "in", "diags", "]", ")", ")", "\n", "\n", "sample_q", "=", "qt", ".", "sample_n", "(", "N_samples", ")", "\n", "\n", "s", "=", "stats", ".", "multivariate_normal", "(", "[", "mu_s", "]", ",", "np", ".", "dot", "(", "np", ".", "array", "(", "[", "cov_s", "]", ")", ",", "np", ".", "array", "(", "[", "cov_s", "]", ")", ")", ")", "\n", "sample_s", "=", "s", ".", "rvs", "(", "N_samples", ")", "\n", "\n", "new_locs", "=", "copy", ".", "copy", "(", "locs", ")", "\n", "new_diags", "=", "copy", ".", "copy", "(", "diags", ")", "\n", "new_locs", ".", "append", "(", "[", "mu_s", "]", ")", "\n", "new_diags", ".", "append", "(", "[", "cov_s", "]", ")", "\n", "\n", "gamma", "=", "2.", "/", "(", "k", "+", "2.", ")", "\n", "n_steps", "=", "10", "\n", "prog_bar", "=", "ed", ".", "util", ".", "Progbar", "(", "n_steps", ")", "\n", "for", "it", "in", "range", "(", "n_steps", ")", ":", "\n", "        ", "print", "(", "\"line_search iter %d, %.5f\"", "%", "(", "it", ",", "gamma", ")", ")", "\n", "new_weights", "=", "copy", ".", "copy", "(", "weights", ")", "\n", "new_weights", "[", "0", "]", "=", "[", "(", "1.", "-", "gamma", ")", "*", "w", "for", "w", "in", "new_weights", "[", "0", "]", "]", "\n", "new_weights", "[", "0", "]", ".", "append", "(", "gamma", ")", "\n", "\n", "q_next", "=", "InfiniteMixtureScipy", "(", "stats", ".", "multivariate_normal", ")", "\n", "q_next", ".", "weights", "=", "new_weights", "[", "0", "]", "\n", "q_next", ".", "params", "=", "list", "(", "zip", "(", "[", "[", "l", "]", "for", "l", "in", "new_locs", "]", ",", "[", "[", "np", ".", "dot", "(", "d", ",", "d", ")", "]", "for", "d", "in", "new_diags", "]", ")", ")", "\n", "\n", "def", "px_qx_ratio_log_prob", "(", "v", ")", ":", "\n", "            ", "Lambda", "=", "1.", "\n", "ret", "=", "x", ".", "log_prob", "(", "[", "v", "]", ")", ".", "eval", "(", ")", "[", "0", "]", "-", "q_next", ".", "log_prob", "(", "v", ")", "\n", "ret", "/=", "Lambda", "\n", "return", "ret", "\n", "\n", "", "rez_s", "=", "[", "px_qx_ratio_log_prob", "(", "sample_s", "[", "ss", "]", ")", "for", "ss", "in", "range", "(", "len", "(", "sample_s", ")", ")", "]", "\n", "\n", "rez_q", "=", "[", "px_qx_ratio_log_prob", "(", "sample_q", "[", "ss", "]", ")", "for", "ss", "in", "range", "(", "len", "(", "sample_q", ")", ")", "]", "\n", "\n", "gamma", "=", "gamma", "+", "0.1", "*", "(", "sum", "(", "rez_s", ")", "-", "sum", "(", "rez_q", ")", ")", "/", "(", "N_samples", "*", "(", "it", "+", "1.", ")", ")", "\n", "\n", "if", "gamma", ">=", "1", "or", "gamma", "<=", "0", ":", "\n", "            ", "gamma", "=", "max", "(", "min", "(", "gamma", ",", "1.", ")", ",", "0.", ")", "\n", "break", "\n", "", "", "return", "gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.mixture_model_relbo.fully_corrective": [[162, 227], ["len", "numpy.random.random().astype", "numpy.sum", "range", "tensorflow.transpose", "S.eval.eval", "range", "print", "comp.sample", "range", "tensorflow.reshape", "tensorflow.squeeze().eval", "numpy.zeros", "range", "numpy.argmin", "numpy.zeros", "numpy.random.random", "tensorflow.squeeze", "S.eval.append", "tensorflow.stack", "numpy.zeros", "range", "scipy.misc.logsumexp", "numpy.mean", "print", "numpy.dot", "print", "print", "comps[].log_prob", "tensorflow.squeeze", "p.log_prob", "numpy.log"], "function", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.sample", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob"], ["", "def", "fully_corrective", "(", "q", ",", "p", ")", ":", "\n", "    ", "comps", "=", "q", ".", "components", "\n", "\n", "n_comps", "=", "len", "(", "comps", ")", "\n", "\n", "# randomly initialize, rather than take q.cat as the initialization", "\n", "weights", "=", "np", ".", "random", ".", "random", "(", "n_comps", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "weights", "/=", "np", ".", "sum", "(", "weights", ")", "\n", "\n", "n_samples", "=", "1000", "\n", "samples", "=", "[", "comp", ".", "sample", "(", "n_samples", ")", "for", "comp", "in", "comps", "]", "\n", "\n", "#S = tf.zeros([n_samples, n_comps, n_comps])", "\n", "S", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "n_comps", ")", ":", "\n", "        ", "for", "i", "in", "range", "(", "n_comps", ")", ":", "\n", "            ", "comp_log_prob", "=", "tf", ".", "squeeze", "(", "comps", "[", "i", "]", ".", "log_prob", "(", "samples", "[", "j", "]", ")", ")", "\n", "#S[:,i,j] = comp_log_prob", "\n", "S", ".", "append", "(", "comp_log_prob", ")", "\n", "", "", "S", "=", "tf", ".", "transpose", "(", "tf", ".", "reshape", "(", "tf", ".", "stack", "(", "S", ")", ",", "[", "n_comps", ",", "n_comps", ",", "n_samples", "]", ")", ")", "\n", "S", "=", "S", ".", "eval", "(", ")", "\n", "\n", "p_log_probs", "=", "[", "tf", ".", "squeeze", "(", "p", ".", "log_prob", "(", "i", ")", ")", ".", "eval", "(", ")", "for", "i", "in", "samples", "]", "\n", "\n", "T", "=", "1000000", "\n", "for", "t", "in", "range", "(", "T", ")", ":", "\n", "        ", "grad", "=", "np", ".", "zeros", "(", "n_comps", ")", "\n", "for", "i", "in", "range", "(", "n_comps", ")", ":", "\n", "            ", "part", "=", "np", ".", "zeros", "(", "[", "n_samples", ",", "n_comps", "]", ")", "\n", "#part = []", "\n", "for", "j", "in", "range", "(", "n_comps", ")", ":", "\n", "                ", "probs", "=", "S", "[", ":", ",", "j", ",", "i", "]", "\n", "part", "[", ":", ",", "j", "]", "=", "np", ".", "log", "(", "weights", "[", "j", "]", "+", "1e-10", ")", "+", "probs", "\n", "#part.append(np.log(weights[j] + 1e-10).astype(np.float32) + probs)", "\n", "\n", "#part = tf.stack(part)", "\n", "\n", "#part = tf.convert_to_tensor(part.astype(np.float32))", "\n", "", "part", "=", "logsumexp", "(", "part", ",", "axis", "=", "1", ")", "\n", "#part = tf.reduce_logsumexp(part, axis=0)", "\n", "diff", "=", "part", "-", "p_log_probs", "[", "i", "]", "\n", "#grad[i] = tf.reduce_mean(diff, axis=0).eval()", "\n", "grad", "[", "i", "]", "=", "np", ".", "mean", "(", "diff", ",", "axis", "=", "0", ")", "\n", "\n", "", "min_i", "=", "np", ".", "argmin", "(", "grad", ")", "\n", "corner", "=", "np", ".", "zeros", "(", "weights", ".", "shape", ")", "\n", "corner", "[", "min_i", "]", "=", "1", "\n", "\n", "if", "t", "%", "1000", "==", "0", ":", "\n", "            ", "print", "(", "\"grad\"", ",", "grad", ")", "\n", "\n", "", "duality_gap", "=", "-", "np", ".", "dot", "(", "grad", ",", "(", "corner", "-", "weights", ")", ")", "\n", "\n", "if", "t", "%", "1000", "==", "0", ":", "\n", "            ", "print", "(", "\"duality_gap\"", ",", "duality_gap", ")", "\n", "\n", "", "if", "duality_gap", "<", "1e-6", ":", "\n", "            ", "return", "weights", "\n", "\n", "", "weights", "+=", "2.", "/", "(", "t", "+", "2.", ")", "*", "(", "corner", "-", "weights", ")", "\n", "if", "t", "%", "1000", "==", "0", ":", "\n", "            ", "print", "(", "\"weights\"", ",", "weights", ",", "t", ")", "\n", "\n", "", "", "print", "(", "\"weights\"", ",", "weights", ",", "t", ")", "\n", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.mixture_model_relbo.main": [[228, 342], ["mixture_model_relbo.build_toy_dataset", "mixture_model_relbo.setup_outdir", "numpy.savez", "range", "os.path.join", "tensorflow.Graph", "tensorflow.reset_default_graph", "tf.Graph.as_default", "tensorflow.set_random_seed", "tensorflow.InteractiveSession", "tf.InteractiveSession.as_default", "edward.models.Mixture", "mixture_model_relbo.construct_normal", "tf.InteractiveSession.run", "time.time", "boosting_bbvi.KLqp", "relbo.KLqp.run", "time.time", "comps.append", "boosting_bbvi.update_weights", "print", "print", "print", "edward.models.Mixture", "edward.models.Mixture", "elbos.append", "mixture_model_relbo.setup_outdir", "print", "times.append", "boosting_bbvi.save_times", "os.path.join", "logger.info", "numpy.savetxt", "logger.info", "os.path.join", "numpy.savetxt", "logger.info", "os.path.join", "numpy.savez", "numpy.savez", "logger.info", "edward.models.Normal", "edward.models.Mixture", "tensorflow.global_variables_initializer", "relbo_vals.append", "time.time", "mixture_model_relbo.fully_corrective", "list", "reversed", "numpy.array", "time.time", "mixture_model_relbo.elbo", "float", "os.path.join", "numpy.array", "numpy.array", "os.path.join", "range", "edward.models.Categorical", "construct_normal.mean().eval", "construct_normal.stddev().eval", "edward.models.Categorical", "range", "edward.models.Categorical", "tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor", "len", "edward.models.Categorical", "boosting_bbvi.compute_relbo", "time.time", "mixture_model_relbo.line_search_dkl", "time.time", "edward.models.MultivariateNormalDiag", "len", "edward.models.MultivariateNormalDiag", "tensorflow.convert_to_tensor", "edward.models.Normal", "numpy.log", "construct_normal.loc.eval", "construct_normal.stddev().eval", "construct_normal.mean", "construct_normal.stddev", "tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor", "construct_normal.stddev"], "function", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.mixture_model_elbo.build_toy_dataset", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.mixture_model_elbo.setup_outdir", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.mixture_model_elbo.construct_normal", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.utils.update_weights", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.mixture_model_elbo.setup_outdir", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.utils.save_times", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr.fully_corrective", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr.elbo", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.utils.compute_relbo", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.mixture_model_relbo.line_search_dkl"], ["", "def", "main", "(", "argv", ")", ":", "\n", "    ", "del", "argv", "\n", "\n", "x_train", ",", "components", "=", "build_toy_dataset", "(", "N", ")", "\n", "n_examples", ",", "n_features", "=", "x_train", ".", "shape", "\n", "\n", "# save the target", "\n", "outdir", "=", "setup_outdir", "(", ")", "\n", "np", ".", "savez", "(", "os", ".", "path", ".", "join", "(", "outdir", ",", "'target_dist.npz'", ")", ",", "\n", "pi", "=", "pi", ",", "mus", "=", "mus", ",", "stds", "=", "stds", ")", "\n", "\n", "weights", ",", "comps", "=", "[", "]", ",", "[", "]", "\n", "elbos", "=", "[", "]", "\n", "relbo_vals", "=", "[", "]", "\n", "times", "=", "[", "]", "\n", "for", "iter", "in", "range", "(", "FLAGS", ".", "n_fw_iter", ")", ":", "\n", "        ", "g", "=", "tf", ".", "Graph", "(", ")", "\n", "with", "g", ".", "as_default", "(", ")", ":", "\n", "            ", "tf", ".", "set_random_seed", "(", "FLAGS", ".", "seed", ")", "\n", "sess", "=", "tf", ".", "InteractiveSession", "(", ")", "\n", "with", "sess", ".", "as_default", "(", ")", ":", "\n", "# build model", "\n", "                ", "xcomps", "=", "[", "Normal", "(", "loc", "=", "tf", ".", "convert_to_tensor", "(", "mus", "[", "i", "]", ")", ",", "\n", "scale", "=", "tf", ".", "convert_to_tensor", "(", "stds", "[", "i", "]", ")", ")", "for", "i", "in", "range", "(", "len", "(", "mus", ")", ")", "]", "\n", "x", "=", "Mixture", "(", "cat", "=", "Categorical", "(", "probs", "=", "tf", ".", "convert_to_tensor", "(", "pi", ")", ")", ",", "components", "=", "xcomps", ",", "sample_shape", "=", "N", ")", "\n", "\n", "qx", "=", "construct_normal", "(", "[", "n_features", "]", ",", "iter", ",", "'qx'", ")", "\n", "if", "iter", ">", "0", ":", "\n", "                    ", "qtx", "=", "Mixture", "(", "cat", "=", "Categorical", "(", "probs", "=", "tf", ".", "convert_to_tensor", "(", "weights", ")", ")", ",", "\n", "components", "=", "[", "Normal", "(", "loc", "=", "c", "[", "'loc'", "]", "[", "0", "]", ",", "\n", "#scale_diag=tf.nn.softplus(c['scale_diag'])) for c in comps], sample_shape=N)", "\n", "scale", "=", "c", "[", "'scale_diag'", "]", "[", "0", "]", ")", "for", "c", "in", "comps", "]", ",", "sample_shape", "=", "N", ")", "\n", "fw_iterates", "=", "{", "x", ":", "qtx", "}", "\n", "", "else", ":", "\n", "                    ", "fw_iterates", "=", "{", "}", "\n", "\n", "", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "\n", "total_time", "=", "0", "\n", "start_inference_time", "=", "time", ".", "time", "(", ")", "\n", "inference", "=", "relbo", ".", "KLqp", "(", "{", "x", ":", "qx", "}", ",", "fw_iterates", "=", "fw_iterates", ",", "fw_iter", "=", "iter", ")", "\n", "inference", ".", "run", "(", "n_iter", "=", "FLAGS", ".", "LMO_iter", ")", "\n", "end_inference_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "total_time", "+=", "end_inference_time", "-", "start_inference_time", "\n", "\n", "if", "iter", ">", "0", ":", "\n", "                    ", "relbo_vals", ".", "append", "(", "-", "utils", ".", "compute_relbo", "(", "qx", ",", "fw_iterates", "[", "x", "]", ",", "x", ",", "np", ".", "log", "(", "iter", "+", "1", ")", ")", ")", "\n", "\n", "", "if", "iter", "==", "0", ":", "\n", "                    ", "gamma", "=", "1.", "\n", "", "elif", "iter", ">", "0", "and", "FLAGS", ".", "fw_variant", "==", "'fixed'", ":", "\n", "                    ", "gamma", "=", "2.", "/", "(", "iter", "+", "2.", ")", "\n", "", "elif", "iter", ">", "0", "and", "FLAGS", ".", "fw_variant", "==", "'line_search'", ":", "\n", "                    ", "start_line_search_time", "=", "time", ".", "time", "(", ")", "\n", "gamma", "=", "line_search_dkl", "(", "weights", ",", "\n", "[", "c", "[", "'loc'", "]", "for", "c", "in", "comps", "]", ",", "\n", "[", "c", "[", "'scale_diag'", "]", "for", "c", "in", "comps", "]", ",", "\n", "qx", ".", "loc", ".", "eval", "(", ")", ",", "qx", ".", "stddev", "(", ")", ".", "eval", "(", ")", ",", "x", ",", "iter", ")", "\n", "end_line_search_time", "=", "time", ".", "time", "(", ")", "\n", "total_time", "+=", "end_line_search_time", "-", "start_line_search_time", "\n", "", "elif", "iter", ">", "0", "and", "FLAGS", ".", "fw_variant", "==", "'fc'", ":", "\n", "                    ", "gamma", "=", "2.", "/", "(", "iter", "+", "2.", ")", "\n", "\n", "", "comps", ".", "append", "(", "{", "'loc'", ":", "qx", ".", "mean", "(", ")", ".", "eval", "(", ")", ",", "'scale_diag'", ":", "qx", ".", "stddev", "(", ")", ".", "eval", "(", ")", "}", ")", "\n", "weights", "=", "utils", ".", "update_weights", "(", "weights", ",", "gamma", ",", "iter", ")", "\n", "\n", "print", "(", "\"weights\"", ",", "weights", ")", "\n", "print", "(", "\"comps\"", ",", "[", "c", "[", "'loc'", "]", "for", "c", "in", "comps", "]", ")", "\n", "print", "(", "\"scale_diags\"", ",", "[", "c", "[", "'scale_diag'", "]", "for", "c", "in", "comps", "]", ")", "\n", "\n", "q_latest", "=", "Mixture", "(", "cat", "=", "Categorical", "(", "probs", "=", "tf", ".", "convert_to_tensor", "(", "weights", ")", ")", ",", "\n", "components", "=", "[", "MultivariateNormalDiag", "(", "**", "c", ")", "for", "c", "in", "comps", "]", ",", "sample_shape", "=", "N", ")", "\n", "\n", "if", "FLAGS", ".", "fw_variant", "==", "\"fc\"", ":", "\n", "                    ", "start_fc_time", "=", "time", ".", "time", "(", ")", "\n", "weights", "=", "fully_corrective", "(", "q_latest", ",", "x", ")", "\n", "weights", "=", "list", "(", "weights", ")", "\n", "for", "i", "in", "reversed", "(", "range", "(", "len", "(", "weights", ")", ")", ")", ":", "\n", "                        ", "w", "=", "weights", "[", "i", "]", "\n", "if", "w", "==", "0", ":", "\n", "                            ", "del", "weights", "[", "i", "]", "\n", "del", "comps", "[", "i", "]", "\n", "", "", "weights", "=", "np", ".", "array", "(", "weights", ")", "\n", "end_fc_time", "=", "time", ".", "time", "(", ")", "\n", "total_time", "+=", "end_fc_time", "-", "start_fc_time", "\n", "\n", "", "q_latest", "=", "Mixture", "(", "cat", "=", "Categorical", "(", "probs", "=", "tf", ".", "convert_to_tensor", "(", "weights", ")", ")", ",", "\n", "components", "=", "[", "MultivariateNormalDiag", "(", "**", "c", ")", "for", "c", "in", "comps", "]", ",", "sample_shape", "=", "N", ")", "\n", "\n", "elbos", ".", "append", "(", "elbo", "(", "q_latest", ",", "x", ")", ")", "\n", "\n", "outdir", "=", "setup_outdir", "(", ")", "\n", "\n", "print", "(", "\"total time\"", ",", "total_time", ")", "\n", "times", ".", "append", "(", "float", "(", "total_time", ")", ")", "\n", "utils", ".", "save_times", "(", "os", ".", "path", ".", "join", "(", "outdir", ",", "'times.csv'", ")", ",", "times", ")", "\n", "\n", "elbos_filename", "=", "os", ".", "path", ".", "join", "(", "outdir", ",", "'elbos.csv'", ")", "\n", "logger", ".", "info", "(", "\"iter, %d, elbo, %.2f +/- %.2f\"", "%", "(", "iter", ",", "*", "elbos", "[", "-", "1", "]", ")", ")", "\n", "np", ".", "savetxt", "(", "elbos_filename", ",", "elbos", ",", "delimiter", "=", "','", ")", "\n", "logger", ".", "info", "(", "\"saving elbos to, %s\"", "%", "elbos_filename", ")", "\n", "\n", "relbos_filename", "=", "os", ".", "path", ".", "join", "(", "outdir", ",", "'relbos.csv'", ")", "\n", "np", ".", "savetxt", "(", "relbos_filename", ",", "relbo_vals", ",", "delimiter", "=", "','", ")", "\n", "logger", ".", "info", "(", "\"saving relbo values to, %s\"", "%", "relbos_filename", ")", "\n", "\n", "for_serialization", "=", "{", "'locs'", ":", "np", ".", "array", "(", "[", "c", "[", "'loc'", "]", "for", "c", "in", "comps", "]", ")", ",", "\n", "'scale_diags'", ":", "np", ".", "array", "(", "[", "c", "[", "'scale_diag'", "]", "for", "c", "in", "comps", "]", ")", "}", "\n", "qt_outfile", "=", "os", ".", "path", ".", "join", "(", "outdir", ",", "'qt_iter%d.npz'", "%", "iter", ")", "\n", "np", ".", "savez", "(", "qt_outfile", ",", "weights", "=", "weights", ",", "**", "for_serialization", ")", "\n", "np", ".", "savez", "(", "os", ".", "path", ".", "join", "(", "outdir", ",", "'qt_latest.npz'", ")", ",", "weights", "=", "weights", ",", "**", "for_serialization", ")", "\n", "logger", ".", "info", "(", "\"saving qt to, %s\"", "%", "qt_outfile", ")", "\n", "", "", "tf", ".", "reset_default_graph", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr.Joint_slow.__init__": [[246, 252], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "X", ",", "Xtrain", ",", "w", ",", "loglik_op", ",", "sess", ")", ":", "\n", "    ", "self", ".", "X", "=", "X", "\n", "self", ".", "Xtrain", "=", "Xtrain", "\n", "self", ".", "w", "=", "w", "\n", "self", ".", "loglik_op", "=", "loglik_op", "\n", "self", ".", "sess", "=", "sess", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr.Joint_slow.log_prob": [[253, 261], ["numpy.zeros", "range", "blr.Joint_slow.sess.run", "numpy.sum", "blr.Joint_slow.w.log_prob().eval", "blr.Joint_slow.w.log_prob"], "methods", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob"], ["", "def", "log_prob", "(", "self", ",", "samples", ")", ":", "\n", "    ", "n_samples", ",", "n_features", "=", "samples", ".", "shape", "\n", "ret", "=", "np", ".", "zeros", "(", "n_samples", ")", "\n", "for", "i", "in", "range", "(", "n_samples", ")", ":", "\n", "      ", "lik", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "loglik_op", ",", "feed_dict", "=", "{", "self", ".", "X", ":", "self", ".", "Xtrain", ",", "self", ".", "w", ":", "samples", "[", "i", "]", "}", ")", "\n", "prior", "=", "np", ".", "sum", "(", "self", ".", "w", ".", "log_prob", "(", "samples", "[", "i", "]", ")", ".", "eval", "(", ")", ")", "\n", "ret", "[", "i", "]", "=", "lik", "+", "prior", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr.Joint.__init__": [[268, 280], ["tensorflow.placeholder", "tensorflow.placeholder", "edward.models.Bernoulli", "edward.models.Bernoulli", "edward.models.Normal", "edward.models.Normal", "tensorflow.matmul", "tensorflow.zeros", "tensorflow.ones"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "Xtrain", ",", "ytrain", ",", "sess", ")", ":", "\n", "    ", "self", ".", "Xtrain", "=", "Xtrain", "\n", "self", ".", "ytrain", "=", "ytrain", "\n", "self", ".", "sess", "=", "sess", "\n", "\n", "self", ".", "n_samples", "=", "1000", "# TODO this is hard coded and must be matched in elbo and fc.", "\n", "N", ",", "D", "=", "Xtrain", ".", "shape", "\n", "self", ".", "w", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "D", ",", "self", ".", "n_samples", "]", ")", "\n", "self", ".", "X", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "N", ",", "D", "]", ")", "\n", "#self.y = Bernoulli(logits=ed.dot(self.X, self.w))", "\n", "self", ".", "y", "=", "Bernoulli", "(", "logits", "=", "tf", ".", "matmul", "(", "self", ".", "X", ",", "self", ".", "w", ")", ")", "\n", "self", ".", "prior", "=", "Normal", "(", "loc", "=", "tf", ".", "zeros", "(", "[", "self", ".", "n_samples", ",", "D", "]", ")", ",", "scale", "=", "1.0", "*", "tf", ".", "ones", "(", "[", "self", ".", "n_samples", ",", "D", "]", ")", ")", "# TODO hard coded", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr.Joint.log_prob": [[281, 288], ["numpy.repeat", "blr.Joint.sess.run().astype", "numpy.sum", "numpy.sum", "blr.Joint.prior.log_prob().eval", "blr.Joint.sess.run", "blr.Joint.y.log_prob", "blr.Joint.prior.log_prob"], "methods", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob"], ["", "def", "log_prob", "(", "self", ",", "samples", ")", ":", "\n", "    ", "copied_ytrain", "=", "np", ".", "repeat", "(", "self", ".", "ytrain", "[", ":", ",", "np", ".", "newaxis", "]", ",", "self", ".", "n_samples", ",", "axis", "=", "1", ")", "\n", "per_sample", "=", "self", ".", "sess", ".", "run", "(", "self", ".", "y", ".", "log_prob", "(", "copied_ytrain", ")", ",", "\n", "feed_dict", "=", "{", "self", ".", "X", ":", "self", ".", "Xtrain", ",", "self", ".", "w", ":", "samples", ".", "T", "}", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "lik", "=", "np", ".", "sum", "(", "per_sample", ",", "axis", "=", "0", ")", "\n", "prior", "=", "np", ".", "sum", "(", "self", ".", "prior", ".", "log_prob", "(", "samples", ")", ".", "eval", "(", ")", ",", "axis", "=", "1", ")", "\n", "return", "lik", "+", "prior", "\n", "#return lik", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr.construct_base_dist": [[47, 52], ["tensorflow.get_variable", "tensorflow.nn.softplus", "base", "tensorflow.get_variable", "tensorflow.random_normal", "numpy.random.normal", "tensorflow.random_normal", "numpy.random.normal"], "function", ["None"], ["def", "construct_base_dist", "(", "dims", ",", "iter", ",", "name", "=", "''", ")", ":", "\n", "  ", "loc", "=", "tf", ".", "get_variable", "(", "name", "+", "\"_loc%d\"", "%", "iter", ",", "initializer", "=", "tf", ".", "random_normal", "(", "dims", ")", "+", "np", ".", "random", ".", "normal", "(", ")", ")", "\n", "scale", "=", "tf", ".", "nn", ".", "softplus", "(", "tf", ".", "get_variable", "(", "name", "+", "\"_scale%d\"", "%", "iter", ",", "initializer", "=", "tf", ".", "random_normal", "(", "dims", ")", "+", "np", ".", "random", ".", "normal", "(", ")", ")", ")", "\n", "rez", "=", "base", "(", "loc", "=", "loc", ",", "scale", "=", "scale", ")", "\n", "return", "rez", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr.setup_outdir": [[53, 58], ["os.path.expanduser", "os.makedirs"], "function", ["None"], ["", "def", "setup_outdir", "(", ")", ":", "\n", "  ", "outdir", "=", "FLAGS", ".", "outdir", "\n", "outdir", "=", "os", ".", "path", ".", "expanduser", "(", "outdir", ")", "\n", "os", ".", "makedirs", "(", "outdir", ",", "exist_ok", "=", "True", ")", "\n", "return", "outdir", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr.get_fw_iterates": [[59, 64], ["len", "blr.build_mixture"], "function", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr.build_mixture"], ["", "def", "get_fw_iterates", "(", "weights", ",", "target", ",", "components", ")", ":", "\n", "  ", "if", "len", "(", "weights", ")", "==", "0", ":", "\n", "    ", "return", "{", "}", "\n", "", "else", ":", "\n", "    ", "return", "{", "target", ":", "build_mixture", "(", "weights", ",", "components", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr.build_mixture": [[65, 71], ["edward.models.Categorical", "edward.models.Mixture", "base", "tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor"], "function", ["None"], ["", "", "def", "build_mixture", "(", "weights", ",", "components", ")", ":", "\n", "  ", "cat", "=", "Categorical", "(", "probs", "=", "tf", ".", "convert_to_tensor", "(", "weights", ")", ")", "\n", "comps", "=", "[", "base", "(", "loc", "=", "tf", ".", "convert_to_tensor", "(", "c", "[", "'loc'", "]", ")", ",", "\n", "scale", "=", "tf", ".", "convert_to_tensor", "(", "c", "[", "'scale'", "]", ")", ")", "for", "c", "in", "components", "]", "\n", "mix", "=", "Mixture", "(", "cat", "=", "cat", ",", "components", "=", "comps", ")", "\n", "return", "mix", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr.update_iterate": [[72, 77], ["s.loc.eval", "s.scale.eval", "components.append"], "function", ["None"], ["", "def", "update_iterate", "(", "components", ",", "s", ")", ":", "\n", "  ", "loc", "=", "s", ".", "loc", ".", "eval", "(", ")", "\n", "scale", "=", "s", ".", "scale", ".", "eval", "(", ")", "\n", "components", ".", "append", "(", "{", "'loc'", ":", "loc", ",", "'scale'", ":", "scale", "}", ")", "\n", "return", "components", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr.add_bias_column": [[78, 82], ["numpy.ones"], "function", ["None"], ["", "def", "add_bias_column", "(", "X", ")", ":", "\n", "  ", "N", ",", "D", "=", "X", ".", "shape", "\n", "ret", "=", "np", ".", "c_", "[", "X", ",", "np", ".", "ones", "(", "N", ")", "]", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr.euclidean_proj_simplex": [[83, 127], ["numpy.cumsum", "numpy.alltrue", "numpy.sort", "v.sum", "numpy.nonzero", "numpy.arange", "numpy.np.float32", "numpy.np.float32"], "function", ["None"], ["", "def", "euclidean_proj_simplex", "(", "v", ",", "s", "=", "1", ")", ":", "\n", "  ", "\"\"\" Compute the Euclidean projection on a positive simplex\n  Solves the optimisation problem (using the algorithm from [1]):\n      min_w 0.5 * || w - v ||_2^2 , s.t. \\sum_i w_i = s, w_i >= 0 \n  Parameters\n  ----------\n  v: (n,) numpy array,\n     n-dimensional vector to project\n  s: int, optional, default: 1,\n     radius of the simplex\n  Returns\n  -------\n  w: (n,) numpy array,\n     Euclidean projection of v on the simplex\n  Notes\n  -----\n  The complexity of this algorithm is in O(n log(n)) as it involves sorting v.\n  Better alternatives exist for high-dimensional sparse vectors (cf. [1])\n  However, this implementation still easily scales to millions of dimensions.\n  References\n  ----------\n  [1] Efficient Projections onto the .1-Ball for Learning in High Dimensions\n      John Duchi, Shai Shalev-Shwartz, Yoram Singer, and Tushar Chandra.\n      International Conference on Machine Learning (ICML 2008)\n      http://www.cs.berkeley.edu/~jduchi/projects/DuchiSiShCh08.pdf\n\n  source: https://gist.github.com/daien/1272551\n  \"\"\"", "\n", "assert", "s", ">", "0", ",", "\"Radius s must be strictly positive (%d <= 0)\"", "%", "s", "\n", "n", ",", "=", "v", ".", "shape", "# will raise ValueError if v is not 1-D", "\n", "# check if we are already on the simplex", "\n", "if", "v", ".", "sum", "(", ")", "==", "s", "and", "np", ".", "alltrue", "(", "v", ">=", "0", ")", ":", "\n", "# best projection: itself!", "\n", "    ", "return", "v", "\n", "# get the array of cumulative sums of a sorted (decreasing) copy of v", "\n", "", "u", "=", "np", ".", "sort", "(", "v", ")", "[", ":", ":", "-", "1", "]", "\n", "cssv", "=", "np", ".", "cumsum", "(", "u", ")", "\n", "# get the number of > 0 components of the optimal solution", "\n", "rho", "=", "np", ".", "nonzero", "(", "u", "*", "np", ".", "arange", "(", "1", ",", "n", "+", "1", ")", ">", "(", "cssv", "-", "s", ")", ")", "[", "0", "]", "[", "-", "1", "]", "\n", "# compute the Lagrange multiplier associated to the simplex constraint", "\n", "theta", "=", "(", "cssv", "[", "rho", "]", "-", "s", ")", "/", "(", "rho", "+", "1.0", ")", "\n", "# compute the projection by thresholding v using theta", "\n", "w", "=", "(", "v", "-", "theta", ")", ".", "clip", "(", "min", "=", "0", ")", "\n", "return", "w", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr.fully_corrective": [[128, 198], ["len", "numpy.random.random().astype", "numpy.sum", "range", "enumerate", "comp.sample().eval", "tensorflow.squeeze().eval", "numpy.zeros", "range", "print", "numpy.random.random", "edward.models.Mixture().log_prob().eval", "numpy.sum", "numpy.mean", "numpy.argmin", "numpy.zeros", "print", "print", "blr.euclidean_proj_simplex", "print", "euclidean_proj_simplex.astype", "comp.mean().eval", "comp.stddev().eval", "comp.sample", "tensorflow.squeeze", "print", "numpy.dot", "print", "print", "print", "numpy.max", "euclidean_proj_simplex.astype", "p.log_prob", "edward.models.Mixture().log_prob", "numpy.abs", "comp.mean", "comp.stddev", "edward.models.Mixture", "edward.models.Categorical"], "function", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr.euclidean_proj_simplex", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.sample", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob"], ["", "def", "fully_corrective", "(", "q", ",", "p", ")", ":", "\n", "  ", "comps", "=", "q", ".", "components", "\n", "\n", "if", "False", ":", "\n", "    ", "for", "i", ",", "comp", "in", "enumerate", "(", "comps", ")", ":", "\n", "      ", "print", "(", "\"component\"", ",", "i", ",", "\"\\tmean\"", ",", "comp", ".", "mean", "(", ")", ".", "eval", "(", ")", ",", "\"\\tstddev\"", ",", "comp", ".", "stddev", "(", ")", ".", "eval", "(", ")", ")", "\n", "\n", "", "", "n_comps", "=", "len", "(", "comps", ")", "\n", "\n", "# randomly initialize, rather than take q.cat as the initialization", "\n", "weights", "=", "np", ".", "random", ".", "random", "(", "n_comps", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "weights", "/=", "np", ".", "sum", "(", "weights", ")", "\n", "\n", "n_samples", "=", "1000", "\n", "samples", "=", "[", "comp", ".", "sample", "(", "n_samples", ")", ".", "eval", "(", ")", "for", "comp", "in", "comps", "]", "# comp.sample resamples each time, so eval once to keep samples fixed.", "\n", "\n", "p_log_probs", "=", "[", "tf", ".", "squeeze", "(", "p", ".", "log_prob", "(", "i", ")", ")", ".", "eval", "(", ")", "for", "i", "in", "samples", "]", "\n", "\n", "do_frank_wolfe", "=", "False", "\n", "if", "do_frank_wolfe", ":", "\n", "    ", "T", "=", "1000000", "\n", "", "else", ":", "\n", "    ", "T", "=", "100", "\n", "\n", "", "for", "t", "in", "range", "(", "T", ")", ":", "\n", "# compute the gradient", "\n", "    ", "grad", "=", "np", ".", "zeros", "(", "n_comps", ")", "\n", "for", "i", "in", "range", "(", "n_comps", ")", ":", "\n", "      ", "q_log_prob", "=", "Mixture", "(", "cat", "=", "Categorical", "(", "weights", ")", ",", "components", "=", "comps", ")", ".", "log_prob", "(", "samples", "[", "i", "]", ")", ".", "eval", "(", ")", "\n", "q_log_prob", "=", "np", ".", "sum", "(", "q_log_prob", ",", "axis", "=", "1", ")", "\n", "\n", "diff", "=", "q_log_prob", "-", "p_log_probs", "[", "i", "]", "\n", "grad", "[", "i", "]", "=", "np", ".", "mean", "(", "diff", ",", "axis", "=", "0", ")", "# take the expectation", "\n", "\n", "", "if", "do_frank_wolfe", ":", "\n", "      ", "min_i", "=", "np", ".", "argmin", "(", "grad", ")", "\n", "corner", "=", "np", ".", "zeros", "(", "weights", ".", "shape", ")", "\n", "corner", "[", "min_i", "]", "=", "1.", "\n", "\n", "if", "t", "%", "1000", "==", "0", ":", "\n", "        ", "print", "(", "\"grad\"", ",", "grad", ")", "\n", "\n", "", "duality_gap", "=", "-", "np", ".", "dot", "(", "grad", ",", "(", "corner", "-", "weights", ")", ")", "\n", "print", "(", "\"duality gap\"", ",", "duality_gap", ")", "\n", "#assert False", "\n", "\n", "if", "t", "%", "1000", "==", "0", ":", "\n", "        ", "print", "(", "\"duality_gap\"", ",", "duality_gap", ")", "\n", "\n", "", "if", "duality_gap", "<", "1e-10", ":", "\n", "        ", "print", "(", "\"weights\"", ",", "weights", ",", "\"duality gap\"", ",", "duality_gap", ",", "\"iteration\"", ",", "t", ")", "\n", "return", "weights", "\n", "\n", "", "weights", "+=", "2.", "/", "(", "t", "+", "2.", ")", "*", "(", "corner", "-", "weights", ")", "\n", "if", "t", "%", "1000", "==", "0", ":", "\n", "        ", "print", "(", "\"weights\"", ",", "weights", ",", "t", ")", "\n", "", "", "else", ":", "\n", "# gradient step", "\n", "      ", "step_size", "=", "0.001", "\n", "weights_prime", "=", "weights", "-", "step_size", "*", "grad", "\n", "print", "(", "\"before\"", ",", "weights_prime", ")", "\n", "weights_prime", "=", "euclidean_proj_simplex", "(", "weights_prime", ")", "\n", "print", "(", "\"after\"", ",", "weights_prime", ")", "\n", "if", "np", ".", "max", "(", "np", ".", "abs", "(", "weights", "-", "weights_prime", ")", ")", "<", "1e-6", ":", "\n", "        ", "weights", "=", "weights_prime", ".", "astype", "(", "np", ".", "float32", ")", "\n", "break", "\n", "", "weights", "=", "weights_prime", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "#print(\"weights\", weights, \"duality gap\", duality_gap, \"iteration\", t)", "\n", "", "", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr.line_search": [[199, 243], ["s.sample().eval", "q.sample().eval", "list", "list.append", "range", "print", "blr.line_search.get_new_weights"], "function", ["None"], ["", "def", "line_search", "(", "q", ",", "s", ",", "p", ")", ":", "\n", "  ", "s_samples", "=", "s", ".", "sample", "(", "1000", ")", ".", "eval", "(", ")", "\n", "q_samples", "=", "q", ".", "sample", "(", "1000", ")", ".", "eval", "(", ")", "\n", "\n", "gamma", "=", "0.5", "\n", "\n", "def", "get_new_weights", "(", "gamma", ")", ":", "\n", "    ", "weights", "=", "q", ".", "cat", ".", "probs", ".", "eval", "(", ")", "\n", "weights", "*=", "(", "1", "-", "gamma", ")", "\n", "weights", "=", "np", ".", "append", "(", "weights", ",", "gamma", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "weights", "\n", "\n", "", "comps", "=", "q", ".", "components", "\n", "comps", "=", "list", "(", "comps", ")", "\n", "comps", ".", "append", "(", "s", ")", "\n", "\n", "T", "=", "50", "\n", "for", "t", "in", "range", "(", "T", ")", ":", "\n", "    ", "weights", "=", "get_new_weights", "(", "gamma", ")", "\n", "\n", "mix", "=", "Mixture", "(", "cat", "=", "Categorical", "(", "weights", ")", ",", "components", "=", "comps", ")", "\n", "s_expectation", "=", "tf", ".", "reduce_sum", "(", "mix", ".", "log_prob", "(", "s_samples", ")", ",", "axis", "=", "1", ")", "-", "p", ".", "log_prob", "(", "s_samples", ")", "\n", "q_expectation", "=", "tf", ".", "reduce_sum", "(", "mix", ".", "log_prob", "(", "q_samples", ")", ",", "axis", "=", "1", ")", "-", "p", ".", "log_prob", "(", "q_samples", ")", "\n", "grad", "=", "s_expectation", "-", "q_expectation", "\n", "grad", "=", "tf", ".", "reduce_mean", "(", "grad", ")", ".", "eval", "(", ")", "\n", "\n", "print", "(", "\"t\"", ",", "t", ",", "\"gamma\"", ",", "gamma", ",", "\"grad\"", ",", "grad", ")", "\n", "\n", "step_size", "=", "0.01", "/", "(", "t", "+", "1", ")", "\n", "gamma_prime", "=", "gamma", "-", "grad", "*", "step_size", "\n", "if", "gamma_prime", ">=", "1", "or", "gamma_prime", "<=", "0", ":", "\n", "        ", "gamma_prime", "=", "max", "(", "min", "(", "gamma_prime", ",", "1.", ")", ",", "0.", ")", "\n", "\n", "", "if", "np", ".", "abs", "(", "gamma", "-", "gamma_prime", ")", "<", "1e-6", ":", "\n", "      ", "gamma", "=", "gamma_prime", "\n", "break", "\n", "", "gamma", "=", "gamma_prime", "\n", "\n", "\n", "", "if", "gamma", "<", "1e-5", ":", "\n", "    ", "gamma", "=", "1e-5", "\n", "\n", "", "print", "(", "\"final t\"", ",", "t", ",", "\"gamma\"", ",", "gamma", ",", "\"grad\"", ",", "grad", ")", "\n", "return", "get_new_weights", "(", "gamma", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr.elbo": [[290, 299], ["q.sample", "samples.eval.eval", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "print", "tensorflow.reduce_mean().eval", "joint.log_prob", "tensorflow.reduce_sum", "tf.reduce_mean.eval", "tf.reduce_mean.eval", "q.log_prob", "tensorflow.reduce_mean"], "function", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.sample", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob"], ["", "", "def", "elbo", "(", "q", ",", "joint", ",", "prior", ",", "n_samples", "=", "1000", ")", ":", "\n", "  ", "samples", "=", "q", ".", "sample", "(", "n_samples", ")", "\n", "samples", "=", "samples", ".", "eval", "(", ")", "\n", "# TODO sum across elements of prior and q since features are assumed to be indepenent.", "\n", "p_log_prob", "=", "tf", ".", "reduce_mean", "(", "joint", ".", "log_prob", "(", "samples", ")", ")", "\n", "q_log_prob", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "reduce_sum", "(", "q", ".", "log_prob", "(", "samples", ")", ",", "axis", "=", "1", ")", ")", "\n", "elbo_samples", "=", "p_log_prob", "-", "q_log_prob", "\n", "print", "(", "\"elbo\"", ",", "\"p log prob\"", ",", "p_log_prob", ".", "eval", "(", ")", ",", "\"q log prob\"", ",", "q_log_prob", ".", "eval", "(", ")", ")", "\n", "return", "tf", ".", "reduce_mean", "(", "elbo_samples", ")", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr.append_and_save": [[300, 305], ["alist.append", "blr.setup_outdir", "save_func", "os.path.join"], "function", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.mixture_model_elbo.setup_outdir"], ["", "def", "append_and_save", "(", "alist", ",", "datum", ",", "outfile", ",", "save_func", ")", ":", "\n", "  ", "alist", ".", "append", "(", "datum", ")", "\n", "outdir", "=", "setup_outdir", "(", ")", "\n", "save_func", "(", "os", ".", "path", ".", "join", "(", "outdir", ",", "outfile", ")", ",", "alist", ")", "\n", "return", "alist", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr.myloss": [[306, 352], ["range", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.get_default_graph().unique_name", "six.iteritems", "six.iteritems", "six.iterkeys", "six.iterkeys", "tensorflow.get_default_graph().unique_name", "isinstance", "edward.util.copy", "edward.util.copy", "edward.util.copy.value", "tensorflow.reduce_sum", "edward.util.copy", "edward.util.copy", "tensorflow.reduce_sum", "isinstance", "tensorflow.get_default_graph", "isinstance", "edward.util.copy.log_prob", "edward.util.copy.log_prob", "edward.util.copy", "edward.util.copy", "tensorflow.reduce_sum", "tensorflow.get_default_graph", "edward.util.copy", "edward.util.copy", "edward.util.copy.value", "edward.util.copy.log_prob"], "function", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob"], ["", "def", "myloss", "(", "inference", ")", ":", "\n", "  ", "n_samples", "=", "100", "\n", "p_log_prob", "=", "[", "0.0", "]", "*", "n_samples", "\n", "q_log_prob", "=", "[", "0.0", "]", "*", "n_samples", "\n", "base_scope", "=", "tf", ".", "get_default_graph", "(", ")", ".", "unique_name", "(", "\"inference\"", ")", "+", "'/'", "\n", "for", "s", "in", "range", "(", "n_samples", ")", ":", "\n", "# Form dictionary in order to replace conditioning on prior or", "\n", "# observed variable with conditioning on a specific value.", "\n", "    ", "scope", "=", "base_scope", "+", "tf", ".", "get_default_graph", "(", ")", ".", "unique_name", "(", "\"sample\"", ")", "\n", "dict_swap", "=", "{", "}", "\n", "for", "x", ",", "qx", "in", "six", ".", "iteritems", "(", "inference", ".", "data", ")", ":", "\n", "      ", "if", "isinstance", "(", "x", ",", "RandomVariable", ")", ":", "\n", "        ", "if", "isinstance", "(", "qx", ",", "RandomVariable", ")", ":", "\n", "          ", "qx_copy", "=", "edward", ".", "util", ".", "copy", "(", "qx", ",", "scope", "=", "scope", ")", "\n", "dict_swap", "[", "x", "]", "=", "qx_copy", ".", "value", "(", ")", "\n", "", "else", ":", "\n", "          ", "dict_swap", "[", "x", "]", "=", "qx", "\n", "\n", "", "", "", "for", "z", ",", "qz", "in", "six", ".", "iteritems", "(", "inference", ".", "latent_vars", ")", ":", "\n", "# Copy q(z) to obtain new set of posterior samples.", "\n", "      ", "qz_copy", "=", "edward", ".", "util", ".", "copy", "(", "qz", ",", "scope", "=", "scope", ")", "\n", "dict_swap", "[", "z", "]", "=", "qz_copy", ".", "value", "(", ")", "\n", "q_log_prob", "[", "s", "]", "+=", "tf", ".", "reduce_sum", "(", "\n", "#inference.scale.get(z, 1.0) *", "\n", "qz_copy", ".", "log_prob", "(", "dict_swap", "[", "z", "]", ")", ")", "\n", "\n", "# prior", "\n", "", "for", "z", "in", "six", ".", "iterkeys", "(", "inference", ".", "latent_vars", ")", ":", "\n", "      ", "z_copy", "=", "edward", ".", "util", ".", "copy", "(", "z", ",", "dict_swap", ",", "scope", "=", "scope", ")", "\n", "p_log_prob", "[", "s", "]", "+=", "tf", ".", "reduce_sum", "(", "\n", "#inference.scale.get(z, 1.0) *", "\n", "z_copy", ".", "log_prob", "(", "dict_swap", "[", "z", "]", ")", ")", "\n", "\n", "# likelihood", "\n", "", "for", "x", "in", "six", ".", "iterkeys", "(", "inference", ".", "data", ")", ":", "\n", "      ", "if", "isinstance", "(", "x", ",", "RandomVariable", ")", ":", "\n", "        ", "x_copy", "=", "edward", ".", "util", ".", "copy", "(", "x", ",", "dict_swap", ",", "scope", "=", "scope", ")", "\n", "p_log_prob", "[", "s", "]", "+=", "tf", ".", "reduce_sum", "(", "\n", "#inference.scale.get(x, 1.0) *", "\n", "x_copy", ".", "log_prob", "(", "dict_swap", "[", "x", "]", ")", ")", "\n", "\n", "", "", "", "p_log_prob", "=", "tf", ".", "reduce_mean", "(", "p_log_prob", ")", "\n", "q_log_prob", "=", "tf", ".", "reduce_mean", "(", "q_log_prob", ")", "\n", "\n", "loss", "=", "-", "(", "p_log_prob", "-", "q_log_prob", ")", "\n", "return", "p_log_prob", ",", "q_log_prob", "\n", "#return loss", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr.decompose_relbo": [[354, 439], ["range", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_sum", "tensorflow.reduce_mean", "tensorflow.get_default_graph().unique_name", "six.iteritems", "six.iteritems", "six.iterkeys", "six.iterkeys", "six.iteritems", "tensorflow.losses.get_regularization_losses", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.get_default_graph().unique_name", "isinstance", "edward.util.copy", "edward.util.copy", "edward.util.copy.value", "tensorflow.reduce_sum", "edward.util.copy", "edward.util.copy", "tensorflow.reduce_sum", "isinstance", "edward.util.copy", "edward.util.copy", "tensorflow.reduce_sum", "numpy.sqrt", "tensorflow.get_default_graph", "isinstance", "edward.util.copy", "edward.util.copy", "tensorflow.reduce_sum", "numpy.log", "numpy.sqrt", "tensorflow.get_default_graph", "edward.util.copy", "edward.util.copy", "edward.util.copy.value", "inference.scale.get", "edward.util.copy.log_prob", "inference.scale.get", "edward.util.copy.log_prob", "inference.scale.get", "edward.util.copy.log_prob", "inference.scale.get", "edward.util.copy.log_prob"], "function", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob"], ["", "def", "decompose_relbo", "(", "inference", ")", ":", "\n", "  ", "\"\"\"\n  Copied from relbo in an effort to analyze the three parts of the RELBO.\n\n  Build loss function. Its automatic differentiation\n  is a stochastic gradient of\n\n  $-\\\\text{ELBO} =\n      -\\mathbb{E}_{q(z; \\lambda)} [ \\log p(x, z) - \\log q(z; \\lambda) ]$\n\n  based on the reparameterization trick [@kingma2014auto].\n\n  Computed by sampling from $q(z;\\lambda)$ and evaluating the\n  expectation using Monte Carlo sampling.\n  \"\"\"", "\n", "p_log_prob", "=", "[", "0.0", "]", "*", "inference", ".", "n_samples", "\n", "q_log_prob", "=", "[", "0.0", "]", "*", "inference", ".", "n_samples", "\n", "relbo_reg_log_prob", "=", "[", "0.0", "]", "*", "inference", ".", "n_samples", "\n", "base_scope", "=", "tf", ".", "get_default_graph", "(", ")", ".", "unique_name", "(", "\"inference\"", ")", "+", "'/'", "\n", "for", "s", "in", "range", "(", "inference", ".", "n_samples", ")", ":", "\n", "# Form dictionary in order to replace conditioning on prior or", "\n", "# observed variable with conditioning on a specific value.", "\n", "    ", "scope", "=", "base_scope", "+", "tf", ".", "get_default_graph", "(", ")", ".", "unique_name", "(", "\"sample\"", ")", "\n", "dict_swap", "=", "{", "}", "\n", "for", "x", ",", "qx", "in", "six", ".", "iteritems", "(", "inference", ".", "data", ")", ":", "\n", "      ", "if", "isinstance", "(", "x", ",", "RandomVariable", ")", ":", "\n", "        ", "if", "isinstance", "(", "qx", ",", "RandomVariable", ")", ":", "\n", "          ", "qx_copy", "=", "edward", ".", "util", ".", "copy", "(", "qx", ",", "scope", "=", "scope", ")", "\n", "dict_swap", "[", "x", "]", "=", "qx_copy", ".", "value", "(", ")", "\n", "", "else", ":", "\n", "          ", "dict_swap", "[", "x", "]", "=", "qx", "\n", "\n", "", "", "", "for", "z", ",", "qz", "in", "six", ".", "iteritems", "(", "inference", ".", "latent_vars", ")", ":", "\n", "# Copy q(z) to obtain new set of posterior samples.", "\n", "      ", "qz_copy", "=", "edward", ".", "util", ".", "copy", "(", "qz", ",", "scope", "=", "scope", ")", "\n", "dict_swap", "[", "z", "]", "=", "qz_copy", ".", "value", "(", ")", "\n", "q_log_prob", "[", "s", "]", "+=", "tf", ".", "reduce_sum", "(", "\n", "inference", ".", "scale", ".", "get", "(", "z", ",", "1.0", ")", "*", "qz_copy", ".", "log_prob", "(", "dict_swap", "[", "z", "]", ")", ")", "\n", "\n", "# prior", "\n", "", "for", "z", "in", "six", ".", "iterkeys", "(", "inference", ".", "latent_vars", ")", ":", "\n", "      ", "z_copy", "=", "edward", ".", "util", ".", "copy", "(", "z", ",", "dict_swap", ",", "scope", "=", "scope", ")", "\n", "p_log_prob", "[", "s", "]", "+=", "tf", ".", "reduce_sum", "(", "\n", "inference", ".", "scale", ".", "get", "(", "z", ",", "1.0", ")", "*", "z_copy", ".", "log_prob", "(", "dict_swap", "[", "z", "]", ")", ")", "\n", "\n", "# likelihood", "\n", "", "for", "x", "in", "six", ".", "iterkeys", "(", "inference", ".", "data", ")", ":", "\n", "      ", "if", "isinstance", "(", "x", ",", "RandomVariable", ")", ":", "\n", "        ", "x_copy", "=", "edward", ".", "util", ".", "copy", "(", "x", ",", "dict_swap", ",", "scope", "=", "scope", ")", "\n", "p_log_prob", "[", "s", "]", "+=", "tf", ".", "reduce_sum", "(", "\n", "inference", ".", "scale", ".", "get", "(", "x", ",", "1.0", ")", "*", "x_copy", ".", "log_prob", "(", "dict_swap", "[", "x", "]", ")", ")", "\n", "\n", "# RELBO", "\n", "", "", "for", "fz", ",", "qt", "in", "six", ".", "iteritems", "(", "inference", ".", "fw_iterates", ")", ":", "\n", "      ", "qt_copy", "=", "edward", ".", "util", ".", "copy", "(", "qt", ",", "dict_swap", ",", "scope", "=", "scope", ")", "\n", "relbo_reg_log_prob", "[", "s", "]", "+=", "tf", ".", "reduce_sum", "(", "\n", "#inference.scale.get(z, 1.0) * qt_copy.log_prob(fz(dict_swap)))", "\n", "inference", ".", "scale", ".", "get", "(", "z", ",", "1.0", ")", "*", "qt_copy", ".", "log_prob", "(", "dict_swap", "[", "z", "]", ")", ")", "\n", "#1.0 * qt_copy.log_prob(fz(dict_swap)))", "\n", "\n", "", "", "p_log_prob", "=", "tf", ".", "reduce_mean", "(", "p_log_prob", ")", "\n", "q_log_prob", "=", "tf", ".", "reduce_mean", "(", "q_log_prob", ")", "\n", "reg_penalty", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "losses", ".", "get_regularization_losses", "(", ")", ")", "\n", "relbo_reg_log_prob", "=", "tf", ".", "reduce_mean", "(", "relbo_reg_log_prob", ")", "\n", "\n", "if", "inference", ".", "logging", ":", "\n", "    ", "tf", ".", "summary", ".", "scalar", "(", "\"loss/p_log_prob\"", ",", "p_log_prob", ",", "\n", "collections", "=", "[", "inference", ".", "_summary_key", "]", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"loss/q_log_prob\"", ",", "q_log_prob", ",", "\n", "collections", "=", "[", "inference", ".", "_summary_key", "]", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"loss/reg_penalty\"", ",", "reg_penalty", ",", "\n", "collections", "=", "[", "inference", ".", "_summary_key", "]", ")", "\n", "\n", "", "annealers", "=", "{", "'linear'", ":", "lambda", "t", ":", "t", ",", "\n", "'constant'", ":", "lambda", "t", ":", "1.", ",", "\n", "'log'", ":", "lambda", "t", ":", "1.", "+", "np", ".", "log", "(", "t", ")", ",", "\n", "'1oversqrt'", ":", "lambda", "t", ":", "1.", "/", "np", ".", "sqrt", "(", "t", "+", "1", ")", ",", "\n", "'1overt'", ":", "lambda", "t", ":", "1.", "/", "(", "t", "+", "1", ")", ",", "\n", "'sqrtinc'", ":", "lambda", "t", ":", "np", ".", "sqrt", "(", "t", "+", "1", ")", "\n", "}", "\n", "\n", "relbo_reg", "=", "FLAGS", ".", "relbo_reg", "*", "annealers", "[", "FLAGS", ".", "relbo_anneal", "]", "(", "inference", ".", "fw_iter", ")", "\n", "\n", "#loss = -(p_log_prob - relbo_reg * q_log_prob - reg_penalty - 0.001 * relbo_reg_log_prob)", "\n", "return", "p_log_prob", ",", "q_log_prob", ",", "relbo_reg_log_prob", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr.compute_duality_gap": [[440, 451], ["blr.compute_duality_gap.expected_gradient"], "function", ["None"], ["", "def", "compute_duality_gap", "(", "joint", ",", "q", ",", "s", ")", ":", "\n", "  ", "def", "expected_gradient", "(", "wrt", ")", ":", "\n", "    ", "samples", "=", "wrt", ".", "sample", "(", "1000", ")", ".", "eval", "(", ")", "\n", "q_log_prob", "=", "np", ".", "sum", "(", "np", ".", "mean", "(", "q", ".", "log_prob", "(", "samples", ")", ".", "eval", "(", ")", ",", "axis", "=", "0", ")", ")", "\n", "p_log_prob", "=", "np", ".", "mean", "(", "joint", ".", "log_prob", "(", "samples", ")", ")", "\n", "return", "q_log_prob", "-", "p_log_prob", "\n", "\n", "", "egq", "=", "expected_gradient", "(", "q", ")", "\n", "egs", "=", "expected_gradient", "(", "s", ")", "\n", "print", "(", "\"q\"", ",", "egq", ",", "\"s\"", ",", "egs", ")", "\n", "return", "egq", "-", "egs", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr.main": [[452, 607], ["blr.setup_outdir", "edward.set_seed", "blr_utils.get_data", "print", "print", "print", "range", "edward.models.Normal", "tensorflow.placeholder", "edward.models.Bernoulli", "edward.models.Empirical", "edward.HMC", "relbo.KLqp.initialize", "tensorflow.global_variables_initializer().run", "relbo.KLqp.run", "edward.models.Empirical.sample().eval", "print", "tensorflow.Graph", "tensorflow.reset_default_graph", "tf.Graph.as_default", "tensorflow.InteractiveSession", "tensorflow.zeros", "edward.dot", "tensorflow.get_variable", "tensorflow.global_variables_initializer", "edward.models.Empirical.sample", "tf.InteractiveSession.as_default", "tensorflow.set_random_seed", "edward.models.Normal", "tensorflow.placeholder", "edward.models.Bernoulli", "tensorflow.placeholder", "edward.models.Bernoulli", "blr.construct_base_dist", "time.time", "boosting_bbvi.KLqp", "tensorflow.global_variables_initializer().run", "relbo.KLqp.run", "time.time", "float", "blr.Joint", "line_search.append", "blr.update_iterate", "blr.build_mixture", "numpy.mean", "ll_trains.append", "numpy.mean", "ll_tests.append", "numpy.mean", "tensorflow.sigmoid().eval", "sklearn.metrics.roc_auc_score", "rocs.append", "print", "print", "print", "numpy.argsort", "matplotlib.scatter", "matplotlib.savefig", "matplotlib.close", "numpy.savetxt", "numpy.savetxt", "numpy.savetxt", "edward.copy", "edward.copy", "print", "print", "edward.evaluate", "edward.evaluate", "print", "print", "times.append", "numpy.savetxt", "tensorflow.ones", "blr.build_mixture", "blr.compute_duality_gap", "gaps.append", "numpy.savetxt", "print", "print", "blr.fully_corrective", "enumerate", "tf.InteractiveSession.run", "tf.InteractiveSession.run", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "range", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "edward.evaluate", "edward.evaluate", "os.path.join", "tensorflow.zeros", "edward.dot", "edward.dot", "blr.get_fw_iterates", "tensorflow.global_variables_initializer", "os.path.join", "len", "blr.build_mixture", "list", "reversed", "numpy.array", "print", "blr.line_search", "print", "edward.models.Bernoulli.log_prob", "range", "numpy.mean", "numpy.std", "edward.models.Bernoulli.log_prob", "range", "numpy.mean", "numpy.std", "numpy.dot", "tensorflow.sigmoid", "len", "blr.setup_outdir", "tensorflow.ones", "range", "len", "blr.build_mixture", "comp.mean().eval", "comp.stddev().eval", "build_mixture.sample().eval", "range", "len", "build_mixture.sample().eval", "build_mixture.sample().eval", "comp.mean", "comp.stddev", "build_mixture.sample", "build_mixture.sample", "build_mixture.sample"], "function", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.mixture_model_elbo.setup_outdir", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr_utils.get_data", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.ScoreRBKLqp.initialize", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.sample", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr.construct_base_dist", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr.update_iterate", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr.build_mixture", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr.build_mixture", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr.compute_duality_gap", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr.fully_corrective", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr.get_fw_iterates", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr.build_mixture", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr.line_search", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.mixture_model_elbo.setup_outdir", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr.build_mixture", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.sample", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.sample", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.sample"], ["", "def", "main", "(", "_", ")", ":", "\n", "  ", "outdir", "=", "setup_outdir", "(", ")", "\n", "ed", ".", "set_seed", "(", "FLAGS", ".", "seed", ")", "\n", "\n", "(", "(", "Xtrain", ",", "ytrain", ")", ",", "(", "Xtest", ",", "ytest", ")", ")", "=", "blr_utils", ".", "get_data", "(", ")", "\n", "N", ",", "D", "=", "Xtrain", ".", "shape", "\n", "N_test", ",", "D_test", "=", "Xtest", ".", "shape", "\n", "\n", "print", "(", "\"Xtrain\"", ")", "\n", "print", "(", "Xtrain", ")", "\n", "print", "(", "Xtrain", ".", "shape", ")", "\n", "\n", "if", "'synthetic'", "in", "FLAGS", ".", "exp", ":", "\n", "    ", "w", "=", "Normal", "(", "loc", "=", "tf", ".", "zeros", "(", "D", ")", ",", "scale", "=", "1.0", "*", "tf", ".", "ones", "(", "D", ")", ")", "\n", "X", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "N", ",", "D", "]", ")", "\n", "y", "=", "Bernoulli", "(", "logits", "=", "ed", ".", "dot", "(", "X", ",", "w", ")", ")", "\n", "\n", "#n_posterior_samples = 100000", "\n", "n_posterior_samples", "=", "10", "\n", "qw_empirical", "=", "Empirical", "(", "params", "=", "tf", ".", "get_variable", "(", "\"qw/params\"", ",", "[", "n_posterior_samples", ",", "D", "]", ")", ")", "\n", "inference", "=", "ed", ".", "HMC", "(", "{", "w", ":", "qw_empirical", "}", ",", "data", "=", "{", "X", ":", "Xtrain", ",", "y", ":", "ytrain", "}", ")", "\n", "inference", ".", "initialize", "(", "n_print", "=", "10", ",", "step_size", "=", "0.6", ")", "\n", "\n", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", ")", "\n", "inference", ".", "run", "(", ")", "\n", "\n", "empirical_samples", "=", "qw_empirical", ".", "sample", "(", "50", ")", ".", "eval", "(", ")", "\n", "#fig, ax = plt.subplots()", "\n", "#ax.scatter(posterior_samples[:,0], posterior_samples[:,1])", "\n", "#plt.show()", "\n", "\n", "", "weights", ",", "q_components", "=", "[", "]", ",", "[", "]", "\n", "ll_trains", ",", "ll_tests", ",", "bin_ac_trains", ",", "bin_ac_tests", ",", "elbos", ",", "rocs", ",", "gaps", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "total_time", ",", "times", "=", "0.", ",", "[", "]", "\n", "for", "iter", "in", "range", "(", "0", ",", "FLAGS", ".", "n_fw_iter", ")", ":", "\n", "    ", "print", "(", "\"iter %d\"", "%", "iter", ")", "\n", "g", "=", "tf", ".", "Graph", "(", ")", "\n", "with", "g", ".", "as_default", "(", ")", ":", "\n", "      ", "sess", "=", "tf", ".", "InteractiveSession", "(", ")", "\n", "with", "sess", ".", "as_default", "(", ")", ":", "\n", "        ", "tf", ".", "set_random_seed", "(", "FLAGS", ".", "seed", ")", "\n", "# MODEL", "\n", "w", "=", "Normal", "(", "loc", "=", "tf", ".", "zeros", "(", "D", ")", ",", "scale", "=", "1.0", "*", "tf", ".", "ones", "(", "D", ")", ")", "\n", "\n", "X", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "N", ",", "D", "]", ")", "\n", "y", "=", "Bernoulli", "(", "logits", "=", "ed", ".", "dot", "(", "X", ",", "w", ")", ")", "\n", "\n", "X_test", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "[", "N_test", ",", "D_test", "]", ")", "\n", "y_test", "=", "Bernoulli", "(", "logits", "=", "ed", ".", "dot", "(", "X_test", ",", "w", ")", ")", "\n", "\n", "qw", "=", "construct_base_dist", "(", "[", "D", "]", ",", "iter", ",", "'qw'", ")", "\n", "inference_time_start", "=", "time", ".", "time", "(", ")", "\n", "inference", "=", "relbo", ".", "KLqp", "(", "{", "w", ":", "qw", "}", ",", "fw_iterates", "=", "get_fw_iterates", "(", "weights", ",", "w", ",", "q_components", ")", ",", "\n", "data", "=", "{", "X", ":", "Xtrain", ",", "y", ":", "ytrain", "}", ",", "fw_iter", "=", "iter", ")", "\n", "tf", ".", "global_variables_initializer", "(", ")", ".", "run", "(", ")", "\n", "inference", ".", "run", "(", "n_iter", "=", "FLAGS", ".", "LMO_iter", ")", "\n", "inference_time_end", "=", "time", ".", "time", "(", ")", "\n", "total_time", "+=", "float", "(", "inference_time_end", "-", "inference_time_start", ")", "\n", "\n", "joint", "=", "Joint", "(", "Xtrain", ",", "ytrain", ",", "sess", ")", "\n", "if", "iter", ">", "0", ":", "\n", "          ", "qtw_prev", "=", "build_mixture", "(", "weights", ",", "q_components", ")", "\n", "gap", "=", "compute_duality_gap", "(", "joint", ",", "qtw_prev", ",", "qw", ")", "\n", "gaps", ".", "append", "(", "gap", ")", "\n", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "outdir", ",", "\"gaps.csv\"", ")", ",", "gaps", ",", "delimiter", "=", "','", ")", "\n", "print", "(", "\"duality gap\"", ",", "gap", ")", "\n", "\n", "# update weights", "\n", "", "gamma", "=", "2.", "/", "(", "iter", "+", "2.", ")", "\n", "weights", "=", "[", "(", "1.", "-", "gamma", ")", "*", "w", "for", "w", "in", "weights", "]", "\n", "weights", ".", "append", "(", "gamma", ")", "\n", "\n", "# update components", "\n", "q_components", "=", "update_iterate", "(", "q_components", ",", "qw", ")", "\n", "\n", "if", "len", "(", "q_components", ")", ">", "1", "and", "FLAGS", ".", "fw_variant", "==", "'fc'", ":", "\n", "          ", "print", "(", "\"running fully corrective\"", ")", "\n", "# overwrite the weights", "\n", "weights", "=", "fully_corrective", "(", "build_mixture", "(", "weights", ",", "q_components", ")", ",", "joint", ")", "\n", "\n", "if", "True", ":", "\n", "# remove inactivate iterates", "\n", "            ", "weights", "=", "list", "(", "weights", ")", "\n", "for", "i", "in", "reversed", "(", "range", "(", "len", "(", "weights", ")", ")", ")", ":", "\n", "              ", "if", "weights", "[", "i", "]", "==", "0", ":", "\n", "                ", "del", "weights", "[", "i", "]", "\n", "del", "q_components", "[", "i", "]", "\n", "", "", "weights", "=", "np", ".", "array", "(", "weights", ")", "# TODO type acrobatics to make elements deletable", "\n", "", "", "elif", "len", "(", "q_components", ")", ">", "1", "and", "FLAGS", ".", "fw_variant", "==", "'line_search'", ":", "\n", "          ", "print", "(", "\"running line search\"", ")", "\n", "weights", "=", "line_search", "(", "build_mixture", "(", "weights", "[", ":", "-", "1", "]", ",", "q_components", "[", ":", "-", "1", "]", ")", ",", "qw", ",", "joint", ")", "\n", "\n", "", "qtw_new", "=", "build_mixture", "(", "weights", ",", "q_components", ")", "\n", "\n", "if", "False", ":", "\n", "          ", "for", "i", ",", "comp", "in", "enumerate", "(", "qtw_new", ".", "components", ")", ":", "\n", "            ", "print", "(", "\"component\"", ",", "i", ",", "\"\\tmean\"", ",", "comp", ".", "mean", "(", ")", ".", "eval", "(", ")", ",", "\"\\tstddev\"", ",", "comp", ".", "stddev", "(", ")", ".", "eval", "(", ")", ")", "\n", "\n", "", "", "train_lls", "=", "[", "sess", ".", "run", "(", "y", ".", "log_prob", "(", "ytrain", ")", ",", "feed_dict", "=", "{", "X", ":", "Xtrain", ",", "w", ":", "qtw_new", ".", "sample", "(", ")", ".", "eval", "(", ")", "}", ")", "for", "_", "in", "range", "(", "50", ")", "]", "\n", "train_lls", "=", "np", ".", "mean", "(", "train_lls", ",", "axis", "=", "0", ")", "\n", "ll_trains", ".", "append", "(", "(", "np", ".", "mean", "(", "train_lls", ")", ",", "np", ".", "std", "(", "train_lls", ")", ")", ")", "\n", "\n", "test_lls", "=", "[", "sess", ".", "run", "(", "y_test", ".", "log_prob", "(", "ytest", ")", ",", "feed_dict", "=", "{", "X_test", ":", "Xtest", ",", "w", ":", "qtw_new", ".", "sample", "(", ")", ".", "eval", "(", ")", "}", ")", "for", "_", "in", "range", "(", "50", ")", "]", "\n", "test_lls", "=", "np", ".", "mean", "(", "test_lls", ",", "axis", "=", "0", ")", "\n", "ll_tests", ".", "append", "(", "(", "np", ".", "mean", "(", "test_lls", ")", ",", "np", ".", "std", "(", "test_lls", ")", ")", ")", "\n", "\n", "logits", "=", "np", ".", "mean", "(", "[", "np", ".", "dot", "(", "Xtest", ",", "qtw_new", ".", "sample", "(", ")", ".", "eval", "(", ")", ")", "for", "_", "in", "range", "(", "50", ")", "]", ",", "axis", "=", "0", ")", "\n", "ypred", "=", "tf", ".", "sigmoid", "(", "logits", ")", ".", "eval", "(", ")", "\n", "roc_score", "=", "roc_auc_score", "(", "ytest", ",", "ypred", ")", "\n", "rocs", ".", "append", "(", "roc_score", ")", "\n", "\n", "print", "(", "'roc_score'", ",", "roc_score", ")", "\n", "print", "(", "'ytrain'", ",", "np", ".", "mean", "(", "train_lls", ")", ",", "np", ".", "std", "(", "train_lls", ")", ")", "\n", "print", "(", "'ytest'", ",", "np", ".", "mean", "(", "test_lls", ")", ",", "np", ".", "std", "(", "test_lls", ")", ")", "\n", "\n", "order", "=", "np", ".", "argsort", "(", "ytest", ")", "\n", "plt", ".", "scatter", "(", "range", "(", "len", "(", "ypred", ")", ")", ",", "ypred", "[", "order", "]", ",", "c", "=", "ytest", "[", "order", "]", ")", "\n", "plt", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "outdir", ",", "'ypred%d.pdf'", "%", "iter", ")", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "outdir", ",", "\"train_lls.csv\"", ")", ",", "ll_trains", ",", "delimiter", "=", "','", ")", "\n", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "outdir", ",", "\"test_lls.csv\"", ")", ",", "ll_tests", ",", "delimiter", "=", "','", ")", "\n", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "outdir", ",", "\"rocs.csv\"", ")", ",", "rocs", ",", "delimiter", "=", "','", ")", "\n", "\n", "x_post", "=", "ed", ".", "copy", "(", "y", ",", "{", "w", ":", "qtw_new", "}", ")", "\n", "x_post_t", "=", "ed", ".", "copy", "(", "y_test", ",", "{", "w", ":", "qtw_new", "}", ")", "\n", "\n", "print", "(", "'log lik train'", ",", "ed", ".", "evaluate", "(", "'log_likelihood'", ",", "data", "=", "{", "x_post", ":", "ytrain", ",", "X", ":", "Xtrain", "}", ")", ")", "\n", "print", "(", "'log lik test'", ",", "ed", ".", "evaluate", "(", "'log_likelihood'", ",", "data", "=", "{", "x_post_t", ":", "ytest", ",", "X_test", ":", "Xtest", "}", ")", ")", "\n", "\n", "#ll_train = ed.evaluate('log_likelihood', data={x_post: ytrain, X:Xtrain})", "\n", "#ll_test = ed.evaluate('log_likelihood', data={x_post_t: ytest, X_test:Xtest})", "\n", "bin_ac_train", "=", "ed", ".", "evaluate", "(", "'binary_accuracy'", ",", "data", "=", "{", "x_post", ":", "ytrain", ",", "X", ":", "Xtrain", "}", ")", "\n", "bin_ac_test", "=", "ed", ".", "evaluate", "(", "'binary_accuracy'", ",", "data", "=", "{", "x_post_t", ":", "ytest", ",", "X_test", ":", "Xtest", "}", ")", "\n", "print", "(", "'binary accuracy train'", ",", "bin_ac_train", ")", "\n", "print", "(", "'binary accuracy test'", ",", "bin_ac_test", ")", "\n", "#latest_elbo = elbo(qtw_new, joint, w)", "\n", "\n", "#foo = ed.KLqp({w: qtw_new}, data={X: Xtrain, y: ytrain})", "\n", "#op = myloss(foo)", "\n", "#print(\"myloss\", sess.run(op[0], feed_dict={X: Xtrain, y: ytrain}), sess.run(op[1], feed_dict={X: Xtrain, y: ytrain}))", "\n", "\n", "#append_and_save(ll_trains, ll_train, \"loglik_train.csv\", np.savetxt)", "\n", "#append_and_save(ll_tests, ll_train, \"loglik_test.csv\", np.savetxt) #append_and_save(bin_ac_trains, bin_ac_train, \"bin_acc_train.csv\", np.savetxt) #append_and_save(bin_ac_tests, bin_ac_test, \"bin_acc_test.csv\", np.savetxt)", "\n", "##append_and_save(elbos, latest_elbo, \"elbo.csv\", np.savetxt)", "\n", "\n", "#print('log-likelihood train ', ll_train)", "\n", "#print('log-likelihood test ', ll_test)", "\n", "#print('binary_accuracy train ', bin_ac_train)", "\n", "#print('binary_accuracy test ', bin_ac_test)", "\n", "#print('elbo', latest_elbo)", "\n", "times", ".", "append", "(", "total_time", ")", "\n", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "setup_outdir", "(", ")", ",", "'times.csv'", ")", ",", "times", ")", "\n", "\n", "", "", "tf", ".", "reset_default_graph", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.mixture_model_elbo.build_toy_dataset": [[55, 63], ["numpy.zeros", "numpy.zeros", "range", "numpy.argmax", "numpy.random.multivariate_normal", "numpy.random.multinomial", "numpy.diag"], "function", ["None"], ["def", "build_toy_dataset", "(", "N", ",", "D", "=", "1", ")", ":", "\n", "    ", "x", "=", "np", ".", "zeros", "(", "(", "N", ",", "D", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "ks", "=", "np", ".", "zeros", "(", "N", ",", "dtype", "=", "np", ".", "int", ")", "\n", "for", "n", "in", "range", "(", "N", ")", ":", "\n", "        ", "k", "=", "np", ".", "argmax", "(", "np", ".", "random", ".", "multinomial", "(", "1", ",", "pi", "[", "0", "]", ")", ")", "\n", "x", "[", "n", ",", ":", "]", "=", "np", ".", "random", ".", "multivariate_normal", "(", "mus", "[", "k", "]", ",", "np", ".", "diag", "(", "stds", "[", "k", "]", ")", ")", "\n", "ks", "[", "n", "]", "=", "k", "\n", "", "return", "x", ",", "ks", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.mixture_model_elbo.construct_normal": [[64, 69], ["tensorflow.get_variable", "tensorflow.get_variable", "edward.models.Normal", "tensorflow.random_normal", "tensorflow.nn.softplus", "tensorflow.random_normal", "numpy.random.normal"], "function", ["None"], ["", "def", "construct_normal", "(", "dims", ",", "iter", ",", "name", "=", "''", ",", "sample_shape", "=", "N", ")", ":", "\n", "    ", "loc", "=", "tf", ".", "get_variable", "(", "name", "+", "\"_loc%d\"", "%", "iter", ",", "initializer", "=", "tf", ".", "random_normal", "(", "dims", ")", "+", "np", ".", "random", ".", "normal", "(", ")", ")", "\n", "scale", "=", "tf", ".", "get_variable", "(", "name", "+", "\"_scale%d\"", "%", "iter", ",", "initializer", "=", "tf", ".", "random_normal", "(", "dims", ")", ")", "\n", "return", "Normal", "(", "loc", "=", "loc", ",", "scale", "=", "tf", ".", "nn", ".", "softplus", "(", "scale", ")", ",", "sample_shape", "=", "N", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.mixture_model_elbo.setup_outdir": [[70, 75], ["os.path.expanduser", "os.makedirs"], "function", ["None"], ["", "def", "setup_outdir", "(", ")", ":", "\n", "    ", "outdir", "=", "FLAGS", ".", "outdir", "\n", "outdir", "=", "os", ".", "path", ".", "expanduser", "(", "outdir", ")", "\n", "os", ".", "makedirs", "(", "outdir", ",", "exist_ok", "=", "True", ")", "\n", "return", "outdir", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.tests.mvn_test.test_mvn_same_as_edward_mvn": [[9, 20], ["numpy.zeros", "numpy.ones", "boosting_bbvi.mvn", "edward.models.MultivariateNormalDiag", "numpy.random.rand", "tensorflow.InteractiveSession", "tensorflow.reduce_sum().eval", "tensorflow.reduce_sum().eval", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "mvn.mvn.log_prob", "edward.models.MultivariateNormalDiag.log_prob"], "function", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob"], ["def", "test_mvn_same_as_edward_mvn", "(", ")", ":", "\n", "    ", "loc", "=", "np", ".", "zeros", "(", "5", ")", "\n", "scale", "=", "np", ".", "ones", "(", "5", ")", "\n", "\n", "A", "=", "mvn", ".", "mvn", "(", "loc", "=", "loc", ",", "scale", "=", "scale", ")", "\n", "B", "=", "MultivariateNormalDiag", "(", "loc", "=", "loc", ",", "scale_diag", "=", "scale", ")", "\n", "\n", "M", "=", "np", ".", "random", ".", "rand", "(", "5", ",", "5", ")", "\n", "tf", ".", "InteractiveSession", "(", ")", "\n", "\n", "assert", "(", "tf", ".", "reduce_sum", "(", "A", ".", "log_prob", "(", "M", ")", ")", ".", "eval", "(", ")", "-", "tf", ".", "reduce_sum", "(", "B", ".", "log_prob", "(", "M", ")", ")", ".", "eval", "(", ")", "<", "1e-6", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.tests.test_fully_corrective.main": [[10, 33], ["edward.models.Mixture", "boosting_bbvi.build_toy_dataset", "qxs.extend", "edward.models.Mixture", "tensorflow.InteractiveSession", "edward.models.Normal", "edward.models.MultivariateNormalDiag", "edward.models.MultivariateNormalDiag", "edward.models.MultivariateNormalDiag", "tf.InteractiveSession.as_default", "boosting_bbvi.fully_corrective", "range", "edward.models.Categorical", "range", "range", "range", "edward.models.Categorical", "tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor", "len", "tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor", "len", "len", "tensorflow.convert_to_tensor", "scipy.stats.norm.rvs", "scipy.stats.norm.rvs", "len", "len"], "function", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.mixture_model_elbo.build_toy_dataset", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.scripts.blr.fully_corrective"], ["def", "main", "(", ")", ":", "\n", "# build model", "\n", "    ", "xcomps", "=", "[", "Normal", "(", "loc", "=", "tf", ".", "convert_to_tensor", "(", "mixture_model_relbo", ".", "mus", "[", "i", "]", ")", ",", "\n", "scale", "=", "tf", ".", "convert_to_tensor", "(", "mixture_model_relbo", ".", "stds", "[", "i", "]", ")", ")", "for", "i", "in", "range", "(", "len", "(", "mixture_model_relbo", ".", "mus", ")", ")", "]", "\n", "x", "=", "Mixture", "(", "cat", "=", "Categorical", "(", "probs", "=", "tf", ".", "convert_to_tensor", "(", "mixture_model_relbo", ".", "pi", ")", ")", ",", "components", "=", "xcomps", ",", "sample_shape", "=", "mixture_model_relbo", ".", "N", ")", "\n", "\n", "x_mvns", "=", "[", "MultivariateNormalDiag", "(", "loc", "=", "tf", ".", "convert_to_tensor", "(", "mixture_model_relbo", ".", "mus", "[", "i", "]", ")", ",", "\n", "scale_diag", "=", "tf", ".", "convert_to_tensor", "(", "mixture_model_relbo", ".", "stds", "[", "i", "]", ")", ")", "for", "i", "in", "range", "(", "len", "(", "mixture_model_relbo", ".", "mus", ")", ")", "]", "\n", "\n", "x_train", ",", "components", "=", "mixture_model_relbo", ".", "build_toy_dataset", "(", "mixture_model_relbo", ".", "N", ")", "\n", "n_examples", ",", "n_features", "=", "x_train", ".", "shape", "\n", "qxs", "=", "[", "MultivariateNormalDiag", "(", "loc", "=", "[", "scipy", ".", "stats", ".", "norm", ".", "rvs", "(", "1", ")", "]", ",", "\n", "scale_diag", "=", "[", "scipy", ".", "stats", ".", "norm", ".", "rvs", "(", "1", ")", "]", ")", "for", "i", "in", "range", "(", "10", ")", "]", "\n", "\n", "truth", "=", "[", "MultivariateNormalDiag", "(", "loc", "=", "mixture_model_relbo", ".", "mus", "[", "i", "]", ",", "\n", "scale_diag", "=", "mixture_model_relbo", ".", "stds", "[", "i", "]", ")", "for", "i", "in", "range", "(", "len", "(", "mixture_model_relbo", ".", "mus", ")", ")", "]", "\n", "qxs", ".", "extend", "(", "truth", ")", "\n", "\n", "mix", "=", "Mixture", "(", "cat", "=", "Categorical", "(", "probs", "=", "[", "1.", "/", "len", "(", "qxs", ")", "]", "*", "len", "(", "qxs", ")", ")", ",", "components", "=", "qxs", ")", "\n", "\n", "sess", "=", "tf", ".", "InteractiveSession", "(", ")", "\n", "with", "sess", ".", "as_default", "(", ")", ":", "\n", "        ", "mixture_model_relbo", ".", "fully_corrective", "(", "mix", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.KLqp.__init__": [[65, 99], ["isinstance", "edward.inferences.variational_inference.VariationalInference.__init__", "tensorflow.variable_scope", "z.batch_shape.concatenate", "tensorflow.Variable", "tensorflow.nn.softplus", "Normal", "AttributeError", "tensorflow.random_normal", "tensorflow.Variable", "hasattr", "tensorflow.random_normal"], "methods", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.__init__"], ["def", "__init__", "(", "self", ",", "latent_vars", "=", "None", ",", "fw_iterates", "=", "{", "}", ",", "fw_iter", "=", "None", ",", "data", "=", "None", ")", ":", "\n", "    ", "\"\"\"Create an inference algorithm.\n\n    Args:\n      latent_vars: list of RandomVariable or\n                   dict of RandomVariable to RandomVariable.\n        Collection of random variables to perform inference on. If\n        list, each random variable will be implictly optimized using a\n        `Normal` random variable that is defined internally with a\n        free parameter per location and scale and is initialized using\n        standard normal draws. The random variables to approximate\n        must be continuous.\n    \"\"\"", "\n", "if", "isinstance", "(", "latent_vars", ",", "list", ")", ":", "\n", "      ", "with", "tf", ".", "variable_scope", "(", "None", ",", "default_name", "=", "\"posterior\"", ")", ":", "\n", "        ", "latent_vars_dict", "=", "{", "}", "\n", "continuous", "=", "(", "'01'", ",", "'nonnegative'", ",", "'simplex'", ",", "'real'", ",", "'multivariate_real'", ")", "\n", "for", "z", "in", "latent_vars", ":", "\n", "          ", "if", "not", "hasattr", "(", "z", ",", "'support'", ")", "or", "z", ".", "support", "not", "in", "continuous", ":", "\n", "            ", "raise", "AttributeError", "(", "\n", "\"Random variable {} is not continuous or a random \"", "\n", "\"variable with supported continuous support.\"", ".", "format", "(", "z", ")", ")", "\n", "", "batch_event_shape", "=", "z", ".", "batch_shape", ".", "concatenate", "(", "z", ".", "event_shape", ")", "\n", "loc", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "batch_event_shape", ")", ")", "\n", "scale", "=", "tf", ".", "nn", ".", "softplus", "(", "\n", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "batch_event_shape", ")", ")", ")", "\n", "latent_vars_dict", "[", "z", "]", "=", "Normal", "(", "loc", "=", "loc", ",", "scale", "=", "scale", ")", "\n", "", "latent_vars", "=", "latent_vars_dict", "\n", "del", "latent_vars_dict", "\n", "\n", "", "", "self", ".", "fw_iterates", "=", "fw_iterates", "\n", "self", ".", "fw_iter", "=", "fw_iter", "\n", "super", "(", "KLqp", ",", "self", ")", ".", "__init__", "(", "latent_vars", ",", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.KLqp.initialize": [[100, 128], ["super().initialize", "ValueError"], "methods", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.ScoreRBKLqp.initialize"], ["", "def", "initialize", "(", "self", ",", "n_samples", "=", "1", ",", "kl_scaling", "=", "None", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Initialize inference algorithm. It initializes hyperparameters\n    and builds ops for the algorithm's computation graph.\n\n    Args:\n      n_samples: int.\n        Number of samples from variational model for calculating\n        stochastic gradients.\n      kl_scaling: dict of RandomVariable to tf.Tensor.\n        Provides option to scale terms when using ELBO with KL divergence.\n        If the KL divergence terms are\n\n        $\\\\alpha_p \\mathbb{E}_{q(z\\mid x, \\lambda)} [\n              \\log q(z\\mid x, \\lambda) - \\log p(z)],$\n\n        then pass {$p(z)$: $\\\\alpha_p$} as `kl_scaling`,\n        where $\\\\alpha_p$ is a tensor. Its shape must be broadcastable;\n        it is multiplied element-wise to the batchwise KL terms.\n    \"\"\"", "\n", "if", "kl_scaling", "is", "None", ":", "\n", "      ", "kl_scaling", "=", "{", "}", "\n", "", "if", "n_samples", "<=", "0", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "\"n_samples should be greater than zero: {}\"", ".", "format", "(", "n_samples", ")", ")", "\n", "\n", "", "self", ".", "n_samples", "=", "n_samples", "\n", "self", ".", "kl_scaling", "=", "kl_scaling", "\n", "return", "super", "(", "KLqp", ",", "self", ")", ".", "initialize", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.KLqp.build_loss_and_gradients": [[129, 186], ["all", "all", "print", "relbo.build_score_rb_loss_and_gradients_relbo", "relbo.build_reparam_loss_and_gradients", "TypeError", "relbo.build_score_rb_loss_and_gradients", "relbo.build_reparam_kl_loss_and_gradients", "relbo.build_reparam_loss_and_gradients", "six.itervalues", "isinstance", "isinstance", "six.iteritems"], "methods", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.build_score_rb_loss_and_gradients_relbo", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.build_reparam_loss_and_gradients", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.build_score_rb_loss_and_gradients", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.build_reparam_kl_loss_and_gradients", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.build_reparam_loss_and_gradients"], ["", "def", "build_loss_and_gradients", "(", "self", ",", "var_list", ")", ":", "\n", "    ", "\"\"\"Wrapper for the `KLqp` loss function.\n\n    $-\\\\text{ELBO} =\n        -\\mathbb{E}_{q(z; \\lambda)} [ \\log p(x, z) - \\log q(z; \\lambda) ]$\n\n    KLqp supports\n\n    1. score function gradients [@paisley2012variational]\n    2. reparameterization gradients [@kingma2014auto]\n\n    of the loss function.\n\n    If the KL divergence between the variational model and the prior\n    is tractable, then the loss function can be written as\n\n    $-\\mathbb{E}_{q(z; \\lambda)}[\\log p(x \\mid z)] +\n        \\\\text{KL}( q(z; \\lambda) \\| p(z) ),$\n\n    where the KL term is computed analytically [@kingma2014auto]. We\n    compute this automatically when $p(z)$ and $q(z; \\lambda)$ are\n    Normal.\n    \"\"\"", "\n", "\n", "if", "FLAGS", ".", "use_rb", ":", "\n", "      ", "print", "(", "\"USING RAO-BLACKWELL\"", ")", "\n", "return", "build_score_rb_loss_and_gradients_relbo", "(", "self", ",", "var_list", ")", "\n", "", "else", ":", "\n", "      ", "return", "build_reparam_loss_and_gradients", "(", "self", ",", "var_list", ")", "\n", "# the rest is ignored", "\n", "\n", "", "is_reparameterizable", "=", "all", "(", "[", "\n", "rv", ".", "reparameterization_type", "==", "\n", "tf", ".", "contrib", ".", "distributions", ".", "FULLY_REPARAMETERIZED", "\n", "for", "rv", "in", "six", ".", "itervalues", "(", "self", ".", "latent_vars", ")", "]", ")", "\n", "is_analytic_kl", "=", "all", "(", "[", "isinstance", "(", "z", ",", "Normal", ")", "and", "isinstance", "(", "qz", ",", "Normal", ")", "\n", "for", "z", ",", "qz", "in", "six", ".", "iteritems", "(", "self", ".", "latent_vars", ")", "]", ")", "\n", "if", "not", "is_analytic_kl", "and", "self", ".", "kl_scaling", ":", "\n", "      ", "raise", "TypeError", "(", "\"kl_scaling must be None when using non-analytic KL term\"", ")", "\n", "", "if", "is_reparameterizable", ":", "\n", "      ", "if", "is_analytic_kl", ":", "\n", "        ", "return", "build_reparam_kl_loss_and_gradients", "(", "self", ",", "var_list", ")", "\n", "# elif is_analytic_entropy:", "\n", "#    return build_reparam_entropy_loss_and_gradients(self, var_list)", "\n", "", "else", ":", "\n", "        ", "return", "build_reparam_loss_and_gradients", "(", "self", ",", "var_list", ")", "\n", "", "", "else", ":", "\n", "# Prefer Rao-Blackwellization over analytic KL. Unknown what", "\n", "# would happen stability-wise if the two are combined.", "\n", "# if is_analytic_kl:", "\n", "#   return build_score_kl_loss_and_gradients(self, var_list)", "\n", "# Analytic entropies may lead to problems around", "\n", "# convergence; for now it is deactivated.", "\n", "# elif is_analytic_entropy:", "\n", "#    return build_score_entropy_loss_and_gradients(self, var_list)", "\n", "# else:", "\n", "      ", "return", "build_score_rb_loss_and_gradients", "(", "self", ",", "var_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.ReparameterizationKLqp.__init__": [[199, 231], ["isinstance", "edward.inferences.variational_inference.VariationalInference.__init__", "tensorflow.variable_scope", "z.batch_shape.concatenate", "tensorflow.Variable", "tensorflow.nn.softplus", "Normal", "AttributeError", "tensorflow.random_normal", "tensorflow.Variable", "hasattr", "tensorflow.random_normal"], "methods", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.__init__"], ["def", "__init__", "(", "self", ",", "latent_vars", "=", "None", ",", "data", "=", "None", ")", ":", "\n", "    ", "\"\"\"Create an inference algorithm.\n\n    Args:\n      latent_vars: list of RandomVariable or\n                   dict of RandomVariable to RandomVariable.\n        Collection of random variables to perform inference on. If\n        list, each random variable will be implictly optimized using a\n        `Normal` random variable that is defined internally with a\n        free parameter per location and scale and is initialized using\n        standard normal draws. The random variables to approximate\n        must be continuous.\n    \"\"\"", "\n", "if", "isinstance", "(", "latent_vars", ",", "list", ")", ":", "\n", "      ", "with", "tf", ".", "variable_scope", "(", "None", ",", "default_name", "=", "\"posterior\"", ")", ":", "\n", "        ", "latent_vars_dict", "=", "{", "}", "\n", "continuous", "=", "(", "'01'", ",", "'nonnegative'", ",", "'simplex'", ",", "'real'", ",", "'multivariate_real'", ")", "\n", "for", "z", "in", "latent_vars", ":", "\n", "          ", "if", "not", "hasattr", "(", "z", ",", "'support'", ")", "or", "z", ".", "support", "not", "in", "continuous", ":", "\n", "            ", "raise", "AttributeError", "(", "\n", "\"Random variable {} is not continuous or a random \"", "\n", "\"variable with supported continuous support.\"", ".", "format", "(", "z", ")", ")", "\n", "", "batch_event_shape", "=", "z", ".", "batch_shape", ".", "concatenate", "(", "z", ".", "event_shape", ")", "\n", "loc", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "batch_event_shape", ")", ")", "\n", "scale", "=", "tf", ".", "nn", ".", "softplus", "(", "\n", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "batch_event_shape", ")", ")", ")", "\n", "latent_vars_dict", "[", "z", "]", "=", "Normal", "(", "loc", "=", "loc", ",", "scale", "=", "scale", ")", "\n", "", "latent_vars", "=", "latent_vars_dict", "\n", "del", "latent_vars_dict", "\n", "\n", "", "", "super", "(", "ReparameterizationKLqp", ",", "self", ")", ".", "__init__", "(", "latent_vars", ",", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.ReparameterizationKLqp.initialize": [[232, 246], ["super().initialize", "ValueError"], "methods", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.ScoreRBKLqp.initialize"], ["", "def", "initialize", "(", "self", ",", "n_samples", "=", "1", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Initialize inference algorithm. It initializes hyperparameters\n    and builds ops for the algorithm's computation graph.\n\n    Args:\n      n_samples: int.\n        Number of samples from variational model for calculating\n        stochastic gradients.\n    \"\"\"", "\n", "if", "n_samples", "<=", "0", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "\"n_samples should be greater than zero: {}\"", ".", "format", "(", "n_samples", ")", ")", "\n", "", "self", ".", "n_samples", "=", "n_samples", "\n", "return", "super", "(", "ReparameterizationKLqp", ",", "self", ")", ".", "initialize", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.ReparameterizationKLqp.build_loss_and_gradients": [[247, 249], ["relbo.build_reparam_loss_and_gradients"], "methods", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.build_reparam_loss_and_gradients"], ["", "def", "build_loss_and_gradients", "(", "self", ",", "var_list", ")", ":", "\n", "    ", "return", "build_reparam_loss_and_gradients", "(", "self", ",", "var_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.ReparameterizationKLKLqp.__init__": [[262, 294], ["isinstance", "edward.inferences.variational_inference.VariationalInference.__init__", "tensorflow.variable_scope", "z.batch_shape.concatenate", "tensorflow.Variable", "tensorflow.nn.softplus", "Normal", "AttributeError", "tensorflow.random_normal", "tensorflow.Variable", "hasattr", "tensorflow.random_normal"], "methods", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.__init__"], ["def", "__init__", "(", "self", ",", "latent_vars", "=", "None", ",", "data", "=", "None", ")", ":", "\n", "    ", "\"\"\"Create an inference algorithm.\n\n    Args:\n      latent_vars: list of RandomVariable or\n                   dict of RandomVariable to RandomVariable.\n        Collection of random variables to perform inference on. If\n        list, each random variable will be implictly optimized using a\n        `Normal` random variable that is defined internally with a\n        free parameter per location and scale and is initialized using\n        standard normal draws. The random variables to approximate\n        must be continuous.\n    \"\"\"", "\n", "if", "isinstance", "(", "latent_vars", ",", "list", ")", ":", "\n", "      ", "with", "tf", ".", "variable_scope", "(", "None", ",", "default_name", "=", "\"posterior\"", ")", ":", "\n", "        ", "latent_vars_dict", "=", "{", "}", "\n", "continuous", "=", "(", "'01'", ",", "'nonnegative'", ",", "'simplex'", ",", "'real'", ",", "'multivariate_real'", ")", "\n", "for", "z", "in", "latent_vars", ":", "\n", "          ", "if", "not", "hasattr", "(", "z", ",", "'support'", ")", "or", "z", ".", "support", "not", "in", "continuous", ":", "\n", "            ", "raise", "AttributeError", "(", "\n", "\"Random variable {} is not continuous or a random \"", "\n", "\"variable with supported continuous support.\"", ".", "format", "(", "z", ")", ")", "\n", "", "batch_event_shape", "=", "z", ".", "batch_shape", ".", "concatenate", "(", "z", ".", "event_shape", ")", "\n", "loc", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "batch_event_shape", ")", ")", "\n", "scale", "=", "tf", ".", "nn", ".", "softplus", "(", "\n", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "batch_event_shape", ")", ")", ")", "\n", "latent_vars_dict", "[", "z", "]", "=", "Normal", "(", "loc", "=", "loc", ",", "scale", "=", "scale", ")", "\n", "", "latent_vars", "=", "latent_vars_dict", "\n", "del", "latent_vars_dict", "\n", "\n", "", "", "super", "(", "ReparameterizationKLKLqp", ",", "self", ")", ".", "__init__", "(", "latent_vars", ",", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.ReparameterizationKLKLqp.initialize": [[295, 323], ["super().initialize", "ValueError"], "methods", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.ScoreRBKLqp.initialize"], ["", "def", "initialize", "(", "self", ",", "n_samples", "=", "1", ",", "kl_scaling", "=", "None", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Initialize inference algorithm. It initializes hyperparameters\n    and builds ops for the algorithm's computation graph.\n\n    Args:\n      n_samples: int.\n        Number of samples from variational model for calculating\n        stochastic gradients.\n      kl_scaling: dict of RandomVariable to tf.Tensor.\n        Provides option to scale terms when using ELBO with KL divergence.\n        If the KL divergence terms are\n\n        $\\\\alpha_p \\mathbb{E}_{q(z\\mid x, \\lambda)} [\n              \\log q(z\\mid x, \\lambda) - \\log p(z)],$\n\n        then pass {$p(z)$: $\\\\alpha_p$} as `kl_scaling`,\n        where $\\\\alpha_p$ is a tensor. Its shape must be broadcastable;\n        it is multiplied element-wise to the batchwise KL terms.\n    \"\"\"", "\n", "if", "kl_scaling", "is", "None", ":", "\n", "      ", "kl_scaling", "=", "{", "}", "\n", "", "if", "n_samples", "<=", "0", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "\"n_samples should be greater than zero: {}\"", ".", "format", "(", "n_samples", ")", ")", "\n", "\n", "", "self", ".", "n_samples", "=", "n_samples", "\n", "self", ".", "kl_scaling", "=", "kl_scaling", "\n", "return", "super", "(", "ReparameterizationKLKLqp", ",", "self", ")", ".", "initialize", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.ReparameterizationKLKLqp.build_loss_and_gradients": [[324, 326], ["relbo.build_reparam_kl_loss_and_gradients"], "methods", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.build_reparam_kl_loss_and_gradients"], ["", "def", "build_loss_and_gradients", "(", "self", ",", "var_list", ")", ":", "\n", "    ", "return", "build_reparam_kl_loss_and_gradients", "(", "self", ",", "var_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.ReparameterizationEntropyKLqp.__init__": [[339, 371], ["isinstance", "edward.inferences.variational_inference.VariationalInference.__init__", "tensorflow.variable_scope", "z.batch_shape.concatenate", "tensorflow.Variable", "tensorflow.nn.softplus", "Normal", "AttributeError", "tensorflow.random_normal", "tensorflow.Variable", "hasattr", "tensorflow.random_normal"], "methods", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.__init__"], ["def", "__init__", "(", "self", ",", "latent_vars", "=", "None", ",", "data", "=", "None", ")", ":", "\n", "    ", "\"\"\"Create an inference algorithm.\n\n    Args:\n      latent_vars: list of RandomVariable or\n                   dict of RandomVariable to RandomVariable.\n        Collection of random variables to perform inference on. If\n        list, each random variable will be implictly optimized using a\n        `Normal` random variable that is defined internally with a\n        free parameter per location and scale and is initialized using\n        standard normal draws. The random variables to approximate\n        must be continuous.\n    \"\"\"", "\n", "if", "isinstance", "(", "latent_vars", ",", "list", ")", ":", "\n", "      ", "with", "tf", ".", "variable_scope", "(", "None", ",", "default_name", "=", "\"posterior\"", ")", ":", "\n", "        ", "latent_vars_dict", "=", "{", "}", "\n", "continuous", "=", "(", "'01'", ",", "'nonnegative'", ",", "'simplex'", ",", "'real'", ",", "'multivariate_real'", ")", "\n", "for", "z", "in", "latent_vars", ":", "\n", "          ", "if", "not", "hasattr", "(", "z", ",", "'support'", ")", "or", "z", ".", "support", "not", "in", "continuous", ":", "\n", "            ", "raise", "AttributeError", "(", "\n", "\"Random variable {} is not continuous or a random \"", "\n", "\"variable with supported continuous support.\"", ".", "format", "(", "z", ")", ")", "\n", "", "batch_event_shape", "=", "z", ".", "batch_shape", ".", "concatenate", "(", "z", ".", "event_shape", ")", "\n", "loc", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "batch_event_shape", ")", ")", "\n", "scale", "=", "tf", ".", "nn", ".", "softplus", "(", "\n", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "batch_event_shape", ")", ")", ")", "\n", "latent_vars_dict", "[", "z", "]", "=", "Normal", "(", "loc", "=", "loc", ",", "scale", "=", "scale", ")", "\n", "", "latent_vars", "=", "latent_vars_dict", "\n", "del", "latent_vars_dict", "\n", "\n", "", "", "super", "(", "ReparameterizationEntropyKLqp", ",", "self", ")", ".", "__init__", "(", "latent_vars", ",", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.ReparameterizationEntropyKLqp.initialize": [[372, 387], ["super().initialize", "ValueError"], "methods", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.ScoreRBKLqp.initialize"], ["", "def", "initialize", "(", "self", ",", "n_samples", "=", "1", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Initialize inference algorithm. It initializes hyperparameters\n    and builds ops for the algorithm's computation graph.\n\n    Args:\n      n_samples: int.\n        Number of samples from variational model for calculating\n        stochastic gradients.\n    \"\"\"", "\n", "if", "n_samples", "<=", "0", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "\"n_samples should be greater than zero: {}\"", ".", "format", "(", "n_samples", ")", ")", "\n", "", "self", ".", "n_samples", "=", "n_samples", "\n", "return", "super", "(", "ReparameterizationEntropyKLqp", ",", "self", ")", ".", "initialize", "(", "\n", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.ReparameterizationEntropyKLqp.build_loss_and_gradients": [[388, 390], ["relbo.build_reparam_entropy_loss_and_gradients"], "methods", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.build_reparam_entropy_loss_and_gradients"], ["", "def", "build_loss_and_gradients", "(", "self", ",", "var_list", ")", ":", "\n", "    ", "return", "build_reparam_entropy_loss_and_gradients", "(", "self", ",", "var_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.ScoreKLqp.__init__": [[403, 435], ["isinstance", "edward.inferences.variational_inference.VariationalInference.__init__", "tensorflow.variable_scope", "z.batch_shape.concatenate", "tensorflow.Variable", "tensorflow.nn.softplus", "Normal", "AttributeError", "tensorflow.random_normal", "tensorflow.Variable", "hasattr", "tensorflow.random_normal"], "methods", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.__init__"], ["def", "__init__", "(", "self", ",", "latent_vars", "=", "None", ",", "data", "=", "None", ")", ":", "\n", "    ", "\"\"\"Create an inference algorithm.\n\n    Args:\n      latent_vars: list of RandomVariable or\n                   dict of RandomVariable to RandomVariable.\n        Collection of random variables to perform inference on. If\n        list, each random variable will be implictly optimized using a\n        `Normal` random variable that is defined internally with a\n        free parameter per location and scale and is initialized using\n        standard normal draws. The random variables to approximate\n        must be continuous.\n    \"\"\"", "\n", "if", "isinstance", "(", "latent_vars", ",", "list", ")", ":", "\n", "      ", "with", "tf", ".", "variable_scope", "(", "None", ",", "default_name", "=", "\"posterior\"", ")", ":", "\n", "        ", "latent_vars_dict", "=", "{", "}", "\n", "continuous", "=", "(", "'01'", ",", "'nonnegative'", ",", "'simplex'", ",", "'real'", ",", "'multivariate_real'", ")", "\n", "for", "z", "in", "latent_vars", ":", "\n", "          ", "if", "not", "hasattr", "(", "z", ",", "'support'", ")", "or", "z", ".", "support", "not", "in", "continuous", ":", "\n", "            ", "raise", "AttributeError", "(", "\n", "\"Random variable {} is not continuous or a random \"", "\n", "\"variable with supported continuous support.\"", ".", "format", "(", "z", ")", ")", "\n", "", "batch_event_shape", "=", "z", ".", "batch_shape", ".", "concatenate", "(", "z", ".", "event_shape", ")", "\n", "loc", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "batch_event_shape", ")", ")", "\n", "scale", "=", "tf", ".", "nn", ".", "softplus", "(", "\n", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "batch_event_shape", ")", ")", ")", "\n", "latent_vars_dict", "[", "z", "]", "=", "Normal", "(", "loc", "=", "loc", ",", "scale", "=", "scale", ")", "\n", "", "latent_vars", "=", "latent_vars_dict", "\n", "del", "latent_vars_dict", "\n", "\n", "", "", "super", "(", "ScoreKLqp", ",", "self", ")", ".", "__init__", "(", "latent_vars", ",", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.ScoreKLqp.initialize": [[436, 450], ["super().initialize", "ValueError"], "methods", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.ScoreRBKLqp.initialize"], ["", "def", "initialize", "(", "self", ",", "n_samples", "=", "1", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Initialize inference algorithm. It initializes hyperparameters\n    and builds ops for the algorithm's computation graph.\n\n    Args:\n      n_samples: int.\n        Number of samples from variational model for calculating\n        stochastic gradients.\n    \"\"\"", "\n", "if", "n_samples", "<=", "0", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "\"n_samples should be greater than zero: {}\"", ".", "format", "(", "n_samples", ")", ")", "\n", "", "self", ".", "n_samples", "=", "n_samples", "\n", "return", "super", "(", "ScoreKLqp", ",", "self", ")", ".", "initialize", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.ScoreKLqp.build_loss_and_gradients": [[451, 453], ["relbo.build_score_loss_and_gradients"], "methods", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.build_score_loss_and_gradients"], ["", "def", "build_loss_and_gradients", "(", "self", ",", "var_list", ")", ":", "\n", "    ", "return", "build_score_loss_and_gradients", "(", "self", ",", "var_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.ScoreKLKLqp.__init__": [[466, 498], ["isinstance", "edward.inferences.variational_inference.VariationalInference.__init__", "tensorflow.variable_scope", "z.batch_shape.concatenate", "tensorflow.Variable", "tensorflow.nn.softplus", "Normal", "AttributeError", "tensorflow.random_normal", "tensorflow.Variable", "hasattr", "tensorflow.random_normal"], "methods", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.__init__"], ["def", "__init__", "(", "self", ",", "latent_vars", "=", "None", ",", "data", "=", "None", ")", ":", "\n", "    ", "\"\"\"Create an inference algorithm.\n\n    Args:\n      latent_vars: list of RandomVariable or\n                   dict of RandomVariable to RandomVariable.\n        Collection of random variables to perform inference on. If\n        list, each random variable will be implictly optimized using a\n        `Normal` random variable that is defined internally with a\n        free parameter per location and scale and is initialized using\n        standard normal draws. The random variables to approximate\n        must be continuous.\n    \"\"\"", "\n", "if", "isinstance", "(", "latent_vars", ",", "list", ")", ":", "\n", "      ", "with", "tf", ".", "variable_scope", "(", "None", ",", "default_name", "=", "\"posterior\"", ")", ":", "\n", "        ", "latent_vars_dict", "=", "{", "}", "\n", "continuous", "=", "(", "'01'", ",", "'nonnegative'", ",", "'simplex'", ",", "'real'", ",", "'multivariate_real'", ")", "\n", "for", "z", "in", "latent_vars", ":", "\n", "          ", "if", "not", "hasattr", "(", "z", ",", "'support'", ")", "or", "z", ".", "support", "not", "in", "continuous", ":", "\n", "            ", "raise", "AttributeError", "(", "\n", "\"Random variable {} is not continuous or a random \"", "\n", "\"variable with supported continuous support.\"", ".", "format", "(", "z", ")", ")", "\n", "", "batch_event_shape", "=", "z", ".", "batch_shape", ".", "concatenate", "(", "z", ".", "event_shape", ")", "\n", "loc", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "batch_event_shape", ")", ")", "\n", "scale", "=", "tf", ".", "nn", ".", "softplus", "(", "\n", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "batch_event_shape", ")", ")", ")", "\n", "latent_vars_dict", "[", "z", "]", "=", "Normal", "(", "loc", "=", "loc", ",", "scale", "=", "scale", ")", "\n", "", "latent_vars", "=", "latent_vars_dict", "\n", "del", "latent_vars_dict", "\n", "\n", "", "", "super", "(", "ScoreKLKLqp", ",", "self", ")", ".", "__init__", "(", "latent_vars", ",", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.ScoreKLKLqp.initialize": [[499, 526], ["super().initialize", "ValueError"], "methods", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.ScoreRBKLqp.initialize"], ["", "def", "initialize", "(", "self", ",", "n_samples", "=", "1", ",", "kl_scaling", "=", "None", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Initialize inference algorithm. It initializes hyperparameters\n    and builds ops for the algorithm's computation graph.\n\n    Args:\n      n_samples: int.\n        Number of samples from variational model for calculating\n        stochastic gradients.\n      kl_scaling: dict of RandomVariable to tf.Tensor.\n        Provides option to scale terms when using ELBO with KL divergence.\n        If the KL divergence terms are\n\n        $\\\\alpha_p \\mathbb{E}_{q(z\\mid x, \\lambda)} [\n              \\log q(z\\mid x, \\lambda) - \\log p(z)],$\n\n        then pass {$p(z)$: $\\\\alpha_p$} as `kl_scaling`,\n        where $\\\\alpha_p$ is a tensor. Its shape must be broadcastable;\n        it is multiplied element-wise to the batchwise KL terms.\n    \"\"\"", "\n", "if", "kl_scaling", "is", "None", ":", "\n", "      ", "kl_scaling", "=", "{", "}", "\n", "", "if", "n_samples", "<=", "0", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "\"n_samples should be greater than zero: {}\"", ".", "format", "(", "n_samples", ")", ")", "\n", "", "self", ".", "n_samples", "=", "n_samples", "\n", "self", ".", "kl_scaling", "=", "kl_scaling", "\n", "return", "super", "(", "ScoreKLKLqp", ",", "self", ")", ".", "initialize", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.ScoreKLKLqp.build_loss_and_gradients": [[527, 529], ["relbo.build_score_kl_loss_and_gradients"], "methods", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.build_score_kl_loss_and_gradients"], ["", "def", "build_loss_and_gradients", "(", "self", ",", "var_list", ")", ":", "\n", "    ", "return", "build_score_kl_loss_and_gradients", "(", "self", ",", "var_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.ScoreEntropyKLqp.__init__": [[542, 574], ["isinstance", "edward.inferences.variational_inference.VariationalInference.__init__", "tensorflow.variable_scope", "z.batch_shape.concatenate", "tensorflow.Variable", "tensorflow.nn.softplus", "Normal", "AttributeError", "tensorflow.random_normal", "tensorflow.Variable", "hasattr", "tensorflow.random_normal"], "methods", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.__init__"], ["def", "__init__", "(", "self", ",", "latent_vars", "=", "None", ",", "data", "=", "None", ")", ":", "\n", "    ", "\"\"\"Create an inference algorithm.\n\n    Args:\n      latent_vars: list of RandomVariable or\n                   dict of RandomVariable to RandomVariable.\n        Collection of random variables to perform inference on. If\n        list, each random variable will be implictly optimized using a\n        `Normal` random variable that is defined internally with a\n        free parameter per location and scale and is initialized using\n        standard normal draws. The random variables to approximate\n        must be continuous.\n    \"\"\"", "\n", "if", "isinstance", "(", "latent_vars", ",", "list", ")", ":", "\n", "      ", "with", "tf", ".", "variable_scope", "(", "None", ",", "default_name", "=", "\"posterior\"", ")", ":", "\n", "        ", "latent_vars_dict", "=", "{", "}", "\n", "continuous", "=", "(", "'01'", ",", "'nonnegative'", ",", "'simplex'", ",", "'real'", ",", "'multivariate_real'", ")", "\n", "for", "z", "in", "latent_vars", ":", "\n", "          ", "if", "not", "hasattr", "(", "z", ",", "'support'", ")", "or", "z", ".", "support", "not", "in", "continuous", ":", "\n", "            ", "raise", "AttributeError", "(", "\n", "\"Random variable {} is not continuous or a random \"", "\n", "\"variable with supported continuous support.\"", ".", "format", "(", "z", ")", ")", "\n", "", "batch_event_shape", "=", "z", ".", "batch_shape", ".", "concatenate", "(", "z", ".", "event_shape", ")", "\n", "loc", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "batch_event_shape", ")", ")", "\n", "scale", "=", "tf", ".", "nn", ".", "softplus", "(", "\n", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "batch_event_shape", ")", ")", ")", "\n", "latent_vars_dict", "[", "z", "]", "=", "Normal", "(", "loc", "=", "loc", ",", "scale", "=", "scale", ")", "\n", "", "latent_vars", "=", "latent_vars_dict", "\n", "del", "latent_vars_dict", "\n", "\n", "", "", "super", "(", "ScoreEntropyKLqp", ",", "self", ")", ".", "__init__", "(", "latent_vars", ",", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.ScoreEntropyKLqp.initialize": [[575, 589], ["super().initialize", "ValueError"], "methods", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.ScoreRBKLqp.initialize"], ["", "def", "initialize", "(", "self", ",", "n_samples", "=", "1", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Initialize inference algorithm. It initializes hyperparameters\n    and builds ops for the algorithm's computation graph.\n\n    Args:\n      n_samples: int.\n        Number of samples from variational model for calculating\n        stochastic gradients.\n    \"\"\"", "\n", "if", "n_samples", "<=", "0", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "\"n_samples should be greater than zero: {}\"", ".", "format", "(", "n_samples", ")", ")", "\n", "", "self", ".", "n_samples", "=", "n_samples", "\n", "return", "super", "(", "ScoreEntropyKLqp", ",", "self", ")", ".", "initialize", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.ScoreEntropyKLqp.build_loss_and_gradients": [[590, 592], ["relbo.build_score_entropy_loss_and_gradients"], "methods", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.build_score_entropy_loss_and_gradients"], ["", "def", "build_loss_and_gradients", "(", "self", ",", "var_list", ")", ":", "\n", "    ", "return", "build_score_entropy_loss_and_gradients", "(", "self", ",", "var_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.ScoreRBKLqp.__init__": [[612, 644], ["isinstance", "edward.inferences.variational_inference.VariationalInference.__init__", "tensorflow.variable_scope", "z.batch_shape.concatenate", "tensorflow.Variable", "tensorflow.nn.softplus", "Normal", "AttributeError", "tensorflow.random_normal", "tensorflow.Variable", "hasattr", "tensorflow.random_normal"], "methods", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.__init__"], ["def", "__init__", "(", "self", ",", "latent_vars", "=", "None", ",", "data", "=", "None", ")", ":", "\n", "    ", "\"\"\"Create an inference algorithm.\n\n    Args:\n      latent_vars: list of RandomVariable or\n                   dict of RandomVariable to RandomVariable.\n        Collection of random variables to perform inference on. If\n        list, each random variable will be implictly optimized using a\n        `Normal` random variable that is defined internally with a\n        free parameter per location and scale and is initialized using\n        standard normal draws. The random variables to approximate\n        must be continuous.\n    \"\"\"", "\n", "if", "isinstance", "(", "latent_vars", ",", "list", ")", ":", "\n", "      ", "with", "tf", ".", "variable_scope", "(", "None", ",", "default_name", "=", "\"posterior\"", ")", ":", "\n", "        ", "latent_vars_dict", "=", "{", "}", "\n", "continuous", "=", "(", "'01'", ",", "'nonnegative'", ",", "'simplex'", ",", "'real'", ",", "'multivariate_real'", ")", "\n", "for", "z", "in", "latent_vars", ":", "\n", "          ", "if", "not", "hasattr", "(", "z", ",", "'support'", ")", "or", "z", ".", "support", "not", "in", "continuous", ":", "\n", "            ", "raise", "AttributeError", "(", "\n", "\"Random variable {} is not continuous or a random \"", "\n", "\"variable with supported continuous support.\"", ".", "format", "(", "z", ")", ")", "\n", "", "batch_event_shape", "=", "z", ".", "batch_shape", ".", "concatenate", "(", "z", ".", "event_shape", ")", "\n", "loc", "=", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "batch_event_shape", ")", ")", "\n", "scale", "=", "tf", ".", "nn", ".", "softplus", "(", "\n", "tf", ".", "Variable", "(", "tf", ".", "random_normal", "(", "batch_event_shape", ")", ")", ")", "\n", "latent_vars_dict", "[", "z", "]", "=", "Normal", "(", "loc", "=", "loc", ",", "scale", "=", "scale", ")", "\n", "", "latent_vars", "=", "latent_vars_dict", "\n", "del", "latent_vars_dict", "\n", "\n", "", "", "super", "(", "ScoreRBKLqp", ",", "self", ")", ".", "__init__", "(", "latent_vars", ",", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.ScoreRBKLqp.initialize": [[645, 659], ["super().initialize", "ValueError"], "methods", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.ScoreRBKLqp.initialize"], ["", "def", "initialize", "(", "self", ",", "n_samples", "=", "1", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Initialize inference algorithm. It initializes hyperparameters\n    and builds ops for the algorithm's computation graph.\n\n    Args:\n      n_samples: int.\n        Number of samples from variational model for calculating\n        stochastic gradients.\n    \"\"\"", "\n", "if", "n_samples", "<=", "0", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "\"n_samples should be greater than zero: {}\"", ".", "format", "(", "n_samples", ")", ")", "\n", "", "self", ".", "n_samples", "=", "n_samples", "\n", "return", "super", "(", "ScoreRBKLqp", ",", "self", ")", ".", "initialize", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.ScoreRBKLqp.build_loss_and_gradients": [[660, 662], ["relbo.build_score_rb_loss_and_gradients"], "methods", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.build_score_rb_loss_and_gradients"], ["", "def", "build_loss_and_gradients", "(", "self", ",", "var_list", ")", ":", "\n", "    ", "return", "build_score_rb_loss_and_gradients", "(", "self", ",", "var_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.build_reparam_loss_and_gradients": [[664, 752], ["range", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_sum", "tensorflow.reduce_mean", "logger.info", "tensorflow.gradients", "list", "tensorflow.get_default_graph().unique_name", "six.iteritems", "six.iteritems", "six.iterkeys", "six.iterkeys", "six.iteritems", "tensorflow.losses.get_regularization_losses", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "zip", "tensorflow.get_default_graph().unique_name", "isinstance", "edward.util.copy", "edward.util.copy.value", "tensorflow.reduce_sum", "edward.util.copy", "tensorflow.reduce_sum", "isinstance", "edward.util.copy", "tensorflow.reduce_sum", "numpy.sqrt", "tensorflow.get_default_graph", "isinstance", "edward.util.copy", "tensorflow.reduce_sum", "numpy.log", "numpy.sqrt", "tensorflow.get_default_graph", "edward.util.copy", "edward.util.copy.value", "inference.scale.get", "edward.util.copy.log_prob", "inference.scale.get", "edward.util.copy.log_prob", "inference.scale.get", "edward.util.copy.log_prob", "inference.scale.get", "edward.util.copy.log_prob"], "function", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob"], ["", "", "def", "build_reparam_loss_and_gradients", "(", "inference", ",", "var_list", ")", ":", "\n", "  ", "\"\"\"Build loss function. Its automatic differentiation\n  is a stochastic gradient of\n\n  $-\\\\text{ELBO} =\n      -\\mathbb{E}_{q(z; \\lambda)} [ \\log p(x, z) - \\log q(z; \\lambda) ]$\n\n  based on the reparameterization trick [@kingma2014auto].\n\n  Computed by sampling from $q(z;\\lambda)$ and evaluating the\n  expectation using Monte Carlo sampling.\n  \"\"\"", "\n", "p_log_prob", "=", "[", "0.0", "]", "*", "inference", ".", "n_samples", "\n", "q_log_prob", "=", "[", "0.0", "]", "*", "inference", ".", "n_samples", "\n", "relbo_reg_log_prob", "=", "[", "0.0", "]", "*", "inference", ".", "n_samples", "\n", "base_scope", "=", "tf", ".", "get_default_graph", "(", ")", ".", "unique_name", "(", "\"inference\"", ")", "+", "'/'", "\n", "for", "s", "in", "range", "(", "inference", ".", "n_samples", ")", ":", "\n", "# Form dictionary in order to replace conditioning on prior or", "\n", "# observed variable with conditioning on a specific value.", "\n", "    ", "scope", "=", "base_scope", "+", "tf", ".", "get_default_graph", "(", ")", ".", "unique_name", "(", "\"sample\"", ")", "\n", "dict_swap", "=", "{", "}", "\n", "for", "x", ",", "qx", "in", "six", ".", "iteritems", "(", "inference", ".", "data", ")", ":", "\n", "      ", "if", "isinstance", "(", "x", ",", "RandomVariable", ")", ":", "\n", "        ", "if", "isinstance", "(", "qx", ",", "RandomVariable", ")", ":", "\n", "          ", "qx_copy", "=", "copy", "(", "qx", ",", "scope", "=", "scope", ")", "\n", "dict_swap", "[", "x", "]", "=", "qx_copy", ".", "value", "(", ")", "\n", "", "else", ":", "\n", "          ", "dict_swap", "[", "x", "]", "=", "qx", "\n", "\n", "", "", "", "for", "z", ",", "qz", "in", "six", ".", "iteritems", "(", "inference", ".", "latent_vars", ")", ":", "\n", "# Copy q(z) to obtain new set of posterior samples.", "\n", "      ", "qz_copy", "=", "copy", "(", "qz", ",", "scope", "=", "scope", ")", "\n", "dict_swap", "[", "z", "]", "=", "qz_copy", ".", "value", "(", ")", "\n", "q_log_prob", "[", "s", "]", "+=", "tf", ".", "reduce_sum", "(", "\n", "inference", ".", "scale", ".", "get", "(", "z", ",", "1.0", ")", "*", "qz_copy", ".", "log_prob", "(", "dict_swap", "[", "z", "]", ")", ")", "\n", "\n", "# prior", "\n", "", "for", "z", "in", "six", ".", "iterkeys", "(", "inference", ".", "latent_vars", ")", ":", "\n", "      ", "z_copy", "=", "copy", "(", "z", ",", "dict_swap", ",", "scope", "=", "scope", ")", "\n", "p_log_prob", "[", "s", "]", "+=", "tf", ".", "reduce_sum", "(", "\n", "inference", ".", "scale", ".", "get", "(", "z", ",", "1.0", ")", "*", "z_copy", ".", "log_prob", "(", "dict_swap", "[", "z", "]", ")", ")", "\n", "\n", "# likelihood", "\n", "", "for", "x", "in", "six", ".", "iterkeys", "(", "inference", ".", "data", ")", ":", "\n", "      ", "if", "isinstance", "(", "x", ",", "RandomVariable", ")", ":", "\n", "        ", "x_copy", "=", "copy", "(", "x", ",", "dict_swap", ",", "scope", "=", "scope", ")", "\n", "p_log_prob", "[", "s", "]", "+=", "tf", ".", "reduce_sum", "(", "\n", "inference", ".", "scale", ".", "get", "(", "x", ",", "1.0", ")", "*", "x_copy", ".", "log_prob", "(", "dict_swap", "[", "x", "]", ")", ")", "\n", "\n", "# RELBO", "\n", "#for fz, qt in six.iteritems(inference.fw_iterates):", "\n", "", "", "for", "z", ",", "qt", "in", "six", ".", "iteritems", "(", "inference", ".", "fw_iterates", ")", ":", "\n", "      ", "qt_copy", "=", "copy", "(", "qt", ",", "dict_swap", ",", "scope", "=", "scope", ")", "\n", "relbo_reg_log_prob", "[", "s", "]", "+=", "tf", ".", "reduce_sum", "(", "\n", "#inference.scale.get(z, 1.0) * qt_copy.log_prob(fz(dict_swap)))", "\n", "inference", ".", "scale", ".", "get", "(", "z", ",", "1.0", ")", "*", "qt_copy", ".", "log_prob", "(", "dict_swap", "[", "z", "]", ")", ")", "\n", "#1.0 * qt_copy.log_prob(fz(dict_swap)))", "\n", "\n", "", "", "p_log_prob", "=", "tf", ".", "reduce_mean", "(", "p_log_prob", ")", "\n", "q_log_prob", "=", "tf", ".", "reduce_mean", "(", "q_log_prob", ")", "\n", "reg_penalty", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "losses", ".", "get_regularization_losses", "(", ")", ")", "\n", "relbo_reg_log_prob", "=", "tf", ".", "reduce_mean", "(", "relbo_reg_log_prob", ")", "\n", "\n", "if", "inference", ".", "logging", ":", "\n", "    ", "tf", ".", "summary", ".", "scalar", "(", "\"loss/p_log_prob\"", ",", "p_log_prob", ",", "\n", "collections", "=", "[", "inference", ".", "_summary_key", "]", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"loss/q_log_prob\"", ",", "q_log_prob", ",", "\n", "collections", "=", "[", "inference", ".", "_summary_key", "]", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"loss/reg_penalty\"", ",", "reg_penalty", ",", "\n", "collections", "=", "[", "inference", ".", "_summary_key", "]", ")", "\n", "\n", "", "annealers", "=", "{", "'linear'", ":", "lambda", "t", ":", "t", ",", "\n", "'constant'", ":", "lambda", "t", ":", "1.", ",", "\n", "'log'", ":", "lambda", "t", ":", "1.", "+", "np", ".", "log", "(", "t", ")", ",", "\n", "'1oversqrt'", ":", "lambda", "t", ":", "1.", "/", "np", ".", "sqrt", "(", "t", "+", "1", ")", ",", "\n", "'1overt'", ":", "lambda", "t", ":", "1.", "/", "(", "t", "+", "1", ")", ",", "\n", "'sqrtinc'", ":", "lambda", "t", ":", "np", ".", "sqrt", "(", "t", "+", "1", ")", "\n", "}", "\n", "\n", "relbo_reg", "=", "FLAGS", ".", "relbo_reg", "*", "annealers", "[", "FLAGS", ".", "relbo_anneal", "]", "(", "inference", ".", "fw_iter", ")", "\n", "\n", "logger", ".", "info", "(", "\"relbo regularization lambda %.10f\"", "%", "relbo_reg", ")", "\n", "\n", "loss", "=", "-", "(", "p_log_prob", "-", "relbo_reg", "*", "q_log_prob", "-", "reg_penalty", "-", "relbo_reg_log_prob", ")", "\n", "\n", "grads", "=", "tf", ".", "gradients", "(", "loss", ",", "var_list", ")", "\n", "grads_and_vars", "=", "list", "(", "zip", "(", "grads", ",", "var_list", ")", ")", "\n", "return", "loss", ",", "grads_and_vars", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.build_reparam_kl_loss_and_gradients": [[754, 817], ["range", "tensorflow.reduce_mean", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.gradients", "list", "tensorflow.get_default_graph().unique_name", "six.iteritems", "six.iteritems", "six.iterkeys", "tensorflow.losses.get_regularization_losses", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "zip", "tensorflow.get_default_graph().unique_name", "isinstance", "edward.util.copy", "edward.util.copy.value", "isinstance", "tensorflow.reduce_sum", "tensorflow.get_default_graph", "isinstance", "edward.util.copy", "tensorflow.reduce_sum", "six.iteritems", "tensorflow.get_default_graph", "edward.util.copy", "edward.util.copy.value", "inference.kl_scaling.get", "kl_divergence", "inference.scale.get", "edward.util.copy.log_prob"], "function", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob"], ["", "def", "build_reparam_kl_loss_and_gradients", "(", "inference", ",", "var_list", ")", ":", "\n", "  ", "\"\"\"Build loss function. Its automatic differentiation\n  is a stochastic gradient of\n\n  .. math::\n\n    -\\\\text{ELBO} =  - ( \\mathbb{E}_{q(z; \\lambda)} [ \\log p(x \\mid z) ]\n          + \\\\text{KL}(q(z; \\lambda) \\| p(z)) )\n\n  based on the reparameterization trick [@kingma2014auto].\n\n  It assumes the KL is analytic.\n\n  Computed by sampling from $q(z;\\lambda)$ and evaluating the\n  expectation using Monte Carlo sampling.\n  \"\"\"", "\n", "p_log_lik", "=", "[", "0.0", "]", "*", "inference", ".", "n_samples", "\n", "base_scope", "=", "tf", ".", "get_default_graph", "(", ")", ".", "unique_name", "(", "\"inference\"", ")", "+", "'/'", "\n", "for", "s", "in", "range", "(", "inference", ".", "n_samples", ")", ":", "\n", "# Form dictionary in order to replace conditioning on prior or", "\n", "# observed variable with conditioning on a specific value.", "\n", "    ", "scope", "=", "base_scope", "+", "tf", ".", "get_default_graph", "(", ")", ".", "unique_name", "(", "\"sample\"", ")", "\n", "dict_swap", "=", "{", "}", "\n", "for", "x", ",", "qx", "in", "six", ".", "iteritems", "(", "inference", ".", "data", ")", ":", "\n", "      ", "if", "isinstance", "(", "x", ",", "RandomVariable", ")", ":", "\n", "        ", "if", "isinstance", "(", "qx", ",", "RandomVariable", ")", ":", "\n", "          ", "qx_copy", "=", "copy", "(", "qx", ",", "scope", "=", "scope", ")", "\n", "dict_swap", "[", "x", "]", "=", "qx_copy", ".", "value", "(", ")", "\n", "", "else", ":", "\n", "          ", "dict_swap", "[", "x", "]", "=", "qx", "\n", "\n", "", "", "", "for", "z", ",", "qz", "in", "six", ".", "iteritems", "(", "inference", ".", "latent_vars", ")", ":", "\n", "# Copy q(z) to obtain new set of posterior samples.", "\n", "      ", "qz_copy", "=", "copy", "(", "qz", ",", "scope", "=", "scope", ")", "\n", "dict_swap", "[", "z", "]", "=", "qz_copy", ".", "value", "(", ")", "\n", "\n", "", "for", "x", "in", "six", ".", "iterkeys", "(", "inference", ".", "data", ")", ":", "\n", "      ", "if", "isinstance", "(", "x", ",", "RandomVariable", ")", ":", "\n", "        ", "x_copy", "=", "copy", "(", "x", ",", "dict_swap", ",", "scope", "=", "scope", ")", "\n", "p_log_lik", "[", "s", "]", "+=", "tf", ".", "reduce_sum", "(", "\n", "inference", ".", "scale", ".", "get", "(", "x", ",", "1.0", ")", "*", "x_copy", ".", "log_prob", "(", "dict_swap", "[", "x", "]", ")", ")", "\n", "\n", "", "", "", "p_log_lik", "=", "tf", ".", "reduce_mean", "(", "p_log_lik", ")", "\n", "\n", "kl_penalty", "=", "tf", ".", "reduce_sum", "(", "[", "\n", "tf", ".", "reduce_sum", "(", "inference", ".", "kl_scaling", ".", "get", "(", "z", ",", "1.0", ")", "*", "kl_divergence", "(", "qz", ",", "z", ")", ")", "\n", "for", "z", ",", "qz", "in", "six", ".", "iteritems", "(", "inference", ".", "latent_vars", ")", "]", ")", "\n", "\n", "reg_penalty", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "losses", ".", "get_regularization_losses", "(", ")", ")", "\n", "\n", "if", "inference", ".", "logging", ":", "\n", "    ", "tf", ".", "summary", ".", "scalar", "(", "\"loss/p_log_lik\"", ",", "p_log_lik", ",", "\n", "collections", "=", "[", "inference", ".", "_summary_key", "]", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"loss/kl_penalty\"", ",", "kl_penalty", ",", "\n", "collections", "=", "[", "inference", ".", "_summary_key", "]", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"loss/reg_penalty\"", ",", "reg_penalty", ",", "\n", "collections", "=", "[", "inference", ".", "_summary_key", "]", ")", "\n", "\n", "", "loss", "=", "-", "(", "p_log_lik", "-", "kl_penalty", "-", "reg_penalty", ")", "\n", "\n", "grads", "=", "tf", ".", "gradients", "(", "loss", ",", "var_list", ")", "\n", "grads_and_vars", "=", "list", "(", "zip", "(", "grads", ",", "var_list", ")", ")", "\n", "return", "loss", ",", "grads_and_vars", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.build_reparam_entropy_loss_and_gradients": [[819, 885], ["range", "tensorflow.reduce_mean", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.gradients", "list", "tensorflow.get_default_graph().unique_name", "six.iteritems", "six.iteritems", "six.iterkeys", "six.iterkeys", "tensorflow.losses.get_regularization_losses", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "zip", "tensorflow.get_default_graph().unique_name", "isinstance", "edward.util.copy", "edward.util.copy.value", "edward.util.copy", "tensorflow.reduce_sum", "isinstance", "tensorflow.reduce_sum", "tensorflow.get_default_graph", "isinstance", "edward.util.copy", "tensorflow.reduce_sum", "qz.entropy", "six.iteritems", "tensorflow.get_default_graph", "edward.util.copy", "edward.util.copy.value", "inference.scale.get", "edward.util.copy.log_prob", "inference.scale.get", "edward.util.copy.log_prob"], "function", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob"], ["", "def", "build_reparam_entropy_loss_and_gradients", "(", "inference", ",", "var_list", ")", ":", "\n", "  ", "\"\"\"Build loss function. Its automatic differentiation\n  is a stochastic gradient of\n\n  $-\\\\text{ELBO} =  -( \\mathbb{E}_{q(z; \\lambda)} [ \\log p(x , z) ]\n          + \\mathbb{H}(q(z; \\lambda)) )$\n\n  based on the reparameterization trick [@kingma2014auto].\n\n  It assumes the entropy is analytic.\n\n  Computed by sampling from $q(z;\\lambda)$ and evaluating the\n  expectation using Monte Carlo sampling.\n  \"\"\"", "\n", "p_log_prob", "=", "[", "0.0", "]", "*", "inference", ".", "n_samples", "\n", "base_scope", "=", "tf", ".", "get_default_graph", "(", ")", ".", "unique_name", "(", "\"inference\"", ")", "+", "'/'", "\n", "for", "s", "in", "range", "(", "inference", ".", "n_samples", ")", ":", "\n", "# Form dictionary in order to replace conditioning on prior or", "\n", "# observed variable with conditioning on a specific value.", "\n", "    ", "scope", "=", "base_scope", "+", "tf", ".", "get_default_graph", "(", ")", ".", "unique_name", "(", "\"sample\"", ")", "\n", "dict_swap", "=", "{", "}", "\n", "for", "x", ",", "qx", "in", "six", ".", "iteritems", "(", "inference", ".", "data", ")", ":", "\n", "      ", "if", "isinstance", "(", "x", ",", "RandomVariable", ")", ":", "\n", "        ", "if", "isinstance", "(", "qx", ",", "RandomVariable", ")", ":", "\n", "          ", "qx_copy", "=", "copy", "(", "qx", ",", "scope", "=", "scope", ")", "\n", "dict_swap", "[", "x", "]", "=", "qx_copy", ".", "value", "(", ")", "\n", "", "else", ":", "\n", "          ", "dict_swap", "[", "x", "]", "=", "qx", "\n", "\n", "", "", "", "for", "z", ",", "qz", "in", "six", ".", "iteritems", "(", "inference", ".", "latent_vars", ")", ":", "\n", "# Copy q(z) to obtain new set of posterior samples.", "\n", "      ", "qz_copy", "=", "copy", "(", "qz", ",", "scope", "=", "scope", ")", "\n", "dict_swap", "[", "z", "]", "=", "qz_copy", ".", "value", "(", ")", "\n", "\n", "", "for", "z", "in", "six", ".", "iterkeys", "(", "inference", ".", "latent_vars", ")", ":", "\n", "      ", "z_copy", "=", "copy", "(", "z", ",", "dict_swap", ",", "scope", "=", "scope", ")", "\n", "p_log_prob", "[", "s", "]", "+=", "tf", ".", "reduce_sum", "(", "\n", "inference", ".", "scale", ".", "get", "(", "z", ",", "1.0", ")", "*", "z_copy", ".", "log_prob", "(", "dict_swap", "[", "z", "]", ")", ")", "\n", "\n", "", "for", "x", "in", "six", ".", "iterkeys", "(", "inference", ".", "data", ")", ":", "\n", "      ", "if", "isinstance", "(", "x", ",", "RandomVariable", ")", ":", "\n", "        ", "x_copy", "=", "copy", "(", "x", ",", "dict_swap", ",", "scope", "=", "scope", ")", "\n", "p_log_prob", "[", "s", "]", "+=", "tf", ".", "reduce_sum", "(", "\n", "inference", ".", "scale", ".", "get", "(", "x", ",", "1.0", ")", "*", "x_copy", ".", "log_prob", "(", "dict_swap", "[", "x", "]", ")", ")", "\n", "\n", "", "", "", "p_log_prob", "=", "tf", ".", "reduce_mean", "(", "p_log_prob", ")", "\n", "\n", "q_entropy", "=", "tf", ".", "reduce_sum", "(", "[", "\n", "tf", ".", "reduce_sum", "(", "qz", ".", "entropy", "(", ")", ")", "\n", "for", "z", ",", "qz", "in", "six", ".", "iteritems", "(", "inference", ".", "latent_vars", ")", "]", ")", "\n", "\n", "reg_penalty", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "losses", ".", "get_regularization_losses", "(", ")", ")", "\n", "\n", "if", "inference", ".", "logging", ":", "\n", "    ", "tf", ".", "summary", ".", "scalar", "(", "\"loss/p_log_prob\"", ",", "p_log_prob", ",", "\n", "collections", "=", "[", "inference", ".", "_summary_key", "]", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"loss/q_entropy\"", ",", "q_entropy", ",", "\n", "collections", "=", "[", "inference", ".", "_summary_key", "]", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"loss/reg_penalty\"", ",", "reg_penalty", ",", "\n", "collections", "=", "[", "inference", ".", "_summary_key", "]", ")", "\n", "\n", "", "loss", "=", "-", "(", "p_log_prob", "+", "q_entropy", "-", "reg_penalty", ")", "\n", "\n", "grads", "=", "tf", ".", "gradients", "(", "loss", ",", "var_list", ")", "\n", "grads_and_vars", "=", "list", "(", "zip", "(", "grads", ",", "var_list", ")", ")", "\n", "return", "loss", ",", "grads_and_vars", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.build_score_loss_and_gradients": [[887, 954], ["range", "tensorflow.stack", "tensorflow.stack", "tensorflow.reduce_sum", "list", "tensorflow.gradients", "tensorflow.gradients", "tensorflow.get_default_graph().unique_name", "six.iteritems", "six.iteritems", "six.iterkeys", "six.iterkeys", "tensorflow.losses.get_regularization_losses", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "six.itervalues", "list", "list", "tensorflow.get_default_graph().unique_name", "isinstance", "edward.util.copy", "edward.util.copy.value", "tensorflow.reduce_sum", "edward.util.copy", "tensorflow.reduce_sum", "isinstance", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "zip", "zip", "tensorflow.get_default_graph", "isinstance", "edward.util.copy", "tensorflow.reduce_sum", "len", "tensorflow.reduce_mean", "tensorflow.get_default_graph", "edward.util.copy", "edward.util.copy.value", "inference.scale.get", "edward.util.copy.log_prob", "inference.scale.get", "edward.util.copy.log_prob", "edward.util.get_descendants", "tensorflow.stop_gradient", "inference.scale.get", "edward.util.copy.log_prob", "tensorflow.convert_to_tensor", "tensorflow.stop_gradient"], "function", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob"], ["", "def", "build_score_loss_and_gradients", "(", "inference", ",", "var_list", ")", ":", "\n", "  ", "\"\"\"Build loss function and gradients based on the score function\n  estimator [@paisley2012variational].\n\n  Computed by sampling from $q(z;\\lambda)$ and evaluating the\n  expectation using Monte Carlo sampling.\n  \"\"\"", "\n", "p_log_prob", "=", "[", "0.0", "]", "*", "inference", ".", "n_samples", "\n", "q_log_prob", "=", "[", "0.0", "]", "*", "inference", ".", "n_samples", "\n", "base_scope", "=", "tf", ".", "get_default_graph", "(", ")", ".", "unique_name", "(", "\"inference\"", ")", "+", "'/'", "\n", "for", "s", "in", "range", "(", "inference", ".", "n_samples", ")", ":", "\n", "# Form dictionary in order to replace conditioning on prior or", "\n", "# observed variable with conditioning on a specific value.", "\n", "    ", "scope", "=", "base_scope", "+", "tf", ".", "get_default_graph", "(", ")", ".", "unique_name", "(", "\"sample\"", ")", "\n", "dict_swap", "=", "{", "}", "\n", "for", "x", ",", "qx", "in", "six", ".", "iteritems", "(", "inference", ".", "data", ")", ":", "\n", "      ", "if", "isinstance", "(", "x", ",", "RandomVariable", ")", ":", "\n", "        ", "if", "isinstance", "(", "qx", ",", "RandomVariable", ")", ":", "\n", "          ", "qx_copy", "=", "copy", "(", "qx", ",", "scope", "=", "scope", ")", "\n", "dict_swap", "[", "x", "]", "=", "qx_copy", ".", "value", "(", ")", "\n", "", "else", ":", "\n", "          ", "dict_swap", "[", "x", "]", "=", "qx", "\n", "\n", "", "", "", "for", "z", ",", "qz", "in", "six", ".", "iteritems", "(", "inference", ".", "latent_vars", ")", ":", "\n", "# Copy q(z) to obtain new set of posterior samples.", "\n", "      ", "qz_copy", "=", "copy", "(", "qz", ",", "scope", "=", "scope", ")", "\n", "dict_swap", "[", "z", "]", "=", "qz_copy", ".", "value", "(", ")", "\n", "q_log_prob", "[", "s", "]", "+=", "tf", ".", "reduce_sum", "(", "\n", "inference", ".", "scale", ".", "get", "(", "z", ",", "1.0", ")", "*", "\n", "qz_copy", ".", "log_prob", "(", "tf", ".", "stop_gradient", "(", "dict_swap", "[", "z", "]", ")", ")", ")", "\n", "\n", "", "for", "z", "in", "six", ".", "iterkeys", "(", "inference", ".", "latent_vars", ")", ":", "\n", "      ", "z_copy", "=", "copy", "(", "z", ",", "dict_swap", ",", "scope", "=", "scope", ")", "\n", "p_log_prob", "[", "s", "]", "+=", "tf", ".", "reduce_sum", "(", "\n", "inference", ".", "scale", ".", "get", "(", "z", ",", "1.0", ")", "*", "z_copy", ".", "log_prob", "(", "dict_swap", "[", "z", "]", ")", ")", "\n", "\n", "", "for", "x", "in", "six", ".", "iterkeys", "(", "inference", ".", "data", ")", ":", "\n", "      ", "if", "isinstance", "(", "x", ",", "RandomVariable", ")", ":", "\n", "        ", "x_copy", "=", "copy", "(", "x", ",", "dict_swap", ",", "scope", "=", "scope", ")", "\n", "p_log_prob", "[", "s", "]", "+=", "tf", ".", "reduce_sum", "(", "\n", "inference", ".", "scale", ".", "get", "(", "x", ",", "1.0", ")", "*", "x_copy", ".", "log_prob", "(", "dict_swap", "[", "x", "]", ")", ")", "\n", "\n", "", "", "", "p_log_prob", "=", "tf", ".", "stack", "(", "p_log_prob", ")", "\n", "q_log_prob", "=", "tf", ".", "stack", "(", "q_log_prob", ")", "\n", "reg_penalty", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "losses", ".", "get_regularization_losses", "(", ")", ")", "\n", "\n", "if", "inference", ".", "logging", ":", "\n", "    ", "tf", ".", "summary", ".", "scalar", "(", "\"loss/p_log_prob\"", ",", "tf", ".", "reduce_mean", "(", "p_log_prob", ")", ",", "\n", "collections", "=", "[", "inference", ".", "_summary_key", "]", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"loss/q_log_prob\"", ",", "tf", ".", "reduce_mean", "(", "q_log_prob", ")", ",", "\n", "collections", "=", "[", "inference", ".", "_summary_key", "]", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"loss/reg_penalty\"", ",", "reg_penalty", ",", "\n", "collections", "=", "[", "inference", ".", "_summary_key", "]", ")", "\n", "\n", "", "losses", "=", "p_log_prob", "-", "q_log_prob", "\n", "loss", "=", "-", "(", "tf", ".", "reduce_mean", "(", "losses", ")", "-", "reg_penalty", ")", "\n", "\n", "q_rvs", "=", "list", "(", "six", ".", "itervalues", "(", "inference", ".", "latent_vars", ")", ")", "\n", "q_vars", "=", "[", "v", "for", "v", "in", "var_list", "\n", "if", "len", "(", "get_descendants", "(", "tf", ".", "convert_to_tensor", "(", "v", ")", ",", "q_rvs", ")", ")", "!=", "0", "]", "\n", "q_grads", "=", "tf", ".", "gradients", "(", "\n", "-", "(", "tf", ".", "reduce_mean", "(", "q_log_prob", "*", "tf", ".", "stop_gradient", "(", "losses", ")", ")", "-", "reg_penalty", ")", ",", "\n", "q_vars", ")", "\n", "p_vars", "=", "[", "v", "for", "v", "in", "var_list", "if", "v", "not", "in", "q_vars", "]", "\n", "p_grads", "=", "tf", ".", "gradients", "(", "loss", ",", "p_vars", ")", "\n", "grads_and_vars", "=", "list", "(", "zip", "(", "q_grads", ",", "q_vars", ")", ")", "+", "list", "(", "zip", "(", "p_grads", ",", "p_vars", ")", ")", "\n", "return", "loss", ",", "grads_and_vars", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.build_score_kl_loss_and_gradients": [[956, 1025], ["range", "tensorflow.stack", "tensorflow.stack", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "list", "tensorflow.gradients", "tensorflow.gradients", "tensorflow.get_default_graph().unique_name", "six.iteritems", "six.iteritems", "six.iterkeys", "tensorflow.losses.get_regularization_losses", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "six.itervalues", "list", "list", "tensorflow.get_default_graph().unique_name", "isinstance", "edward.util.copy", "edward.util.copy.value", "tensorflow.reduce_sum", "isinstance", "tensorflow.reduce_sum", "tensorflow.reduce_mean", "zip", "zip", "tensorflow.get_default_graph", "isinstance", "edward.util.copy", "tensorflow.reduce_sum", "six.iteritems", "tensorflow.reduce_mean", "len", "tensorflow.get_default_graph", "edward.util.copy", "edward.util.copy.value", "inference.scale.get", "edward.util.copy.log_prob", "inference.kl_scaling.get", "kl_divergence", "edward.util.get_descendants", "tensorflow.reduce_mean", "tensorflow.stop_gradient", "inference.scale.get", "edward.util.copy.log_prob", "tensorflow.convert_to_tensor", "tensorflow.stop_gradient"], "function", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob"], ["", "def", "build_score_kl_loss_and_gradients", "(", "inference", ",", "var_list", ")", ":", "\n", "  ", "\"\"\"Build loss function and gradients based on the score function\n  estimator [@paisley2012variational].\n\n  It assumes the KL is analytic.\n\n  Computed by sampling from $q(z;\\lambda)$ and evaluating the\n  expectation using Monte Carlo sampling.\n  \"\"\"", "\n", "p_log_lik", "=", "[", "0.0", "]", "*", "inference", ".", "n_samples", "\n", "q_log_prob", "=", "[", "0.0", "]", "*", "inference", ".", "n_samples", "\n", "base_scope", "=", "tf", ".", "get_default_graph", "(", ")", ".", "unique_name", "(", "\"inference\"", ")", "+", "'/'", "\n", "for", "s", "in", "range", "(", "inference", ".", "n_samples", ")", ":", "\n", "# Form dictionary in order to replace conditioning on prior or", "\n", "# observed variable with conditioning on a specific value.", "\n", "    ", "scope", "=", "base_scope", "+", "tf", ".", "get_default_graph", "(", ")", ".", "unique_name", "(", "\"sample\"", ")", "\n", "dict_swap", "=", "{", "}", "\n", "for", "x", ",", "qx", "in", "six", ".", "iteritems", "(", "inference", ".", "data", ")", ":", "\n", "      ", "if", "isinstance", "(", "x", ",", "RandomVariable", ")", ":", "\n", "        ", "if", "isinstance", "(", "qx", ",", "RandomVariable", ")", ":", "\n", "          ", "qx_copy", "=", "copy", "(", "qx", ",", "scope", "=", "scope", ")", "\n", "dict_swap", "[", "x", "]", "=", "qx_copy", ".", "value", "(", ")", "\n", "", "else", ":", "\n", "          ", "dict_swap", "[", "x", "]", "=", "qx", "\n", "\n", "", "", "", "for", "z", ",", "qz", "in", "six", ".", "iteritems", "(", "inference", ".", "latent_vars", ")", ":", "\n", "# Copy q(z) to obtain new set of posterior samples.", "\n", "      ", "qz_copy", "=", "copy", "(", "qz", ",", "scope", "=", "scope", ")", "\n", "dict_swap", "[", "z", "]", "=", "qz_copy", ".", "value", "(", ")", "\n", "q_log_prob", "[", "s", "]", "+=", "tf", ".", "reduce_sum", "(", "\n", "inference", ".", "scale", ".", "get", "(", "z", ",", "1.0", ")", "*", "\n", "qz_copy", ".", "log_prob", "(", "tf", ".", "stop_gradient", "(", "dict_swap", "[", "z", "]", ")", ")", ")", "\n", "\n", "", "for", "x", "in", "six", ".", "iterkeys", "(", "inference", ".", "data", ")", ":", "\n", "      ", "if", "isinstance", "(", "x", ",", "RandomVariable", ")", ":", "\n", "        ", "x_copy", "=", "copy", "(", "x", ",", "dict_swap", ",", "scope", "=", "scope", ")", "\n", "p_log_lik", "[", "s", "]", "+=", "tf", ".", "reduce_sum", "(", "\n", "inference", ".", "scale", ".", "get", "(", "x", ",", "1.0", ")", "*", "x_copy", ".", "log_prob", "(", "dict_swap", "[", "x", "]", ")", ")", "\n", "\n", "", "", "", "p_log_lik", "=", "tf", ".", "stack", "(", "p_log_lik", ")", "\n", "q_log_prob", "=", "tf", ".", "stack", "(", "q_log_prob", ")", "\n", "\n", "kl_penalty", "=", "tf", ".", "reduce_sum", "(", "[", "\n", "tf", ".", "reduce_sum", "(", "inference", ".", "kl_scaling", ".", "get", "(", "z", ",", "1.0", ")", "*", "kl_divergence", "(", "qz", ",", "z", ")", ")", "\n", "for", "z", ",", "qz", "in", "six", ".", "iteritems", "(", "inference", ".", "latent_vars", ")", "]", ")", "\n", "\n", "reg_penalty", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "losses", ".", "get_regularization_losses", "(", ")", ")", "\n", "\n", "if", "inference", ".", "logging", ":", "\n", "    ", "tf", ".", "summary", ".", "scalar", "(", "\"loss/p_log_lik\"", ",", "tf", ".", "reduce_mean", "(", "p_log_lik", ")", ",", "\n", "collections", "=", "[", "inference", ".", "_summary_key", "]", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"loss/kl_penalty\"", ",", "kl_penalty", ",", "\n", "collections", "=", "[", "inference", ".", "_summary_key", "]", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"loss/reg_penalty\"", ",", "reg_penalty", ",", "\n", "collections", "=", "[", "inference", ".", "_summary_key", "]", ")", "\n", "\n", "", "loss", "=", "-", "(", "tf", ".", "reduce_mean", "(", "p_log_lik", ")", "-", "kl_penalty", "-", "reg_penalty", ")", "\n", "\n", "q_rvs", "=", "list", "(", "six", ".", "itervalues", "(", "inference", ".", "latent_vars", ")", ")", "\n", "q_vars", "=", "[", "v", "for", "v", "in", "var_list", "\n", "if", "len", "(", "get_descendants", "(", "tf", ".", "convert_to_tensor", "(", "v", ")", ",", "q_rvs", ")", ")", "!=", "0", "]", "\n", "q_grads", "=", "tf", ".", "gradients", "(", "\n", "-", "(", "tf", ".", "reduce_mean", "(", "q_log_prob", "*", "tf", ".", "stop_gradient", "(", "p_log_lik", ")", ")", "-", "kl_penalty", "-", "\n", "reg_penalty", ")", ",", "\n", "q_vars", ")", "\n", "p_vars", "=", "[", "v", "for", "v", "in", "var_list", "if", "v", "not", "in", "q_vars", "]", "\n", "p_grads", "=", "tf", ".", "gradients", "(", "loss", ",", "p_vars", ")", "\n", "grads_and_vars", "=", "list", "(", "zip", "(", "q_grads", ",", "q_vars", ")", ")", "+", "list", "(", "zip", "(", "p_grads", ",", "p_vars", ")", ")", "\n", "return", "loss", ",", "grads_and_vars", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.build_score_entropy_loss_and_gradients": [[1026, 1102], ["range", "tensorflow.stack", "tensorflow.stack", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "list", "tensorflow.gradients", "tensorflow.gradients", "tensorflow.get_default_graph().unique_name", "six.iteritems", "six.iteritems", "six.iterkeys", "six.iterkeys", "tensorflow.losses.get_regularization_losses", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "six.itervalues", "list", "list", "tensorflow.get_default_graph().unique_name", "isinstance", "edward.util.copy", "edward.util.copy.value", "tensorflow.reduce_sum", "edward.util.copy", "tensorflow.reduce_sum", "isinstance", "tensorflow.reduce_sum", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "zip", "zip", "tensorflow.get_default_graph", "isinstance", "edward.util.copy", "tensorflow.reduce_sum", "qz.entropy", "six.iteritems", "tensorflow.reduce_mean", "len", "tensorflow.get_default_graph", "edward.util.copy", "edward.util.copy.value", "inference.scale.get", "edward.util.copy.log_prob", "inference.scale.get", "edward.util.copy.log_prob", "edward.util.get_descendants", "tensorflow.reduce_mean", "tensorflow.stop_gradient", "inference.scale.get", "edward.util.copy.log_prob", "tensorflow.convert_to_tensor", "tensorflow.stop_gradient"], "function", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob"], ["", "def", "build_score_entropy_loss_and_gradients", "(", "inference", ",", "var_list", ")", ":", "\n", "  ", "\"\"\"Build loss function and gradients based on the score function\n  estimator [@paisley2012variational].\n\n  It assumes the entropy is analytic.\n\n  Computed by sampling from $q(z;\\lambda)$ and evaluating the\n  expectation using Monte Carlo sampling.\n  \"\"\"", "\n", "p_log_prob", "=", "[", "0.0", "]", "*", "inference", ".", "n_samples", "\n", "q_log_prob", "=", "[", "0.0", "]", "*", "inference", ".", "n_samples", "\n", "base_scope", "=", "tf", ".", "get_default_graph", "(", ")", ".", "unique_name", "(", "\"inference\"", ")", "+", "'/'", "\n", "for", "s", "in", "range", "(", "inference", ".", "n_samples", ")", ":", "\n", "# Form dictionary in order to replace conditioning on prior or", "\n", "# observed variable with conditioning on a specific value.", "\n", "    ", "scope", "=", "base_scope", "+", "tf", ".", "get_default_graph", "(", ")", ".", "unique_name", "(", "\"sample\"", ")", "\n", "dict_swap", "=", "{", "}", "\n", "for", "x", ",", "qx", "in", "six", ".", "iteritems", "(", "inference", ".", "data", ")", ":", "\n", "      ", "if", "isinstance", "(", "x", ",", "RandomVariable", ")", ":", "\n", "        ", "if", "isinstance", "(", "qx", ",", "RandomVariable", ")", ":", "\n", "          ", "qx_copy", "=", "copy", "(", "qx", ",", "scope", "=", "scope", ")", "\n", "dict_swap", "[", "x", "]", "=", "qx_copy", ".", "value", "(", ")", "\n", "", "else", ":", "\n", "          ", "dict_swap", "[", "x", "]", "=", "qx", "\n", "\n", "", "", "", "for", "z", ",", "qz", "in", "six", ".", "iteritems", "(", "inference", ".", "latent_vars", ")", ":", "\n", "# Copy q(z) to obtain new set of posterior samples.", "\n", "      ", "qz_copy", "=", "copy", "(", "qz", ",", "scope", "=", "scope", ")", "\n", "dict_swap", "[", "z", "]", "=", "qz_copy", ".", "value", "(", ")", "\n", "q_log_prob", "[", "s", "]", "+=", "tf", ".", "reduce_sum", "(", "\n", "inference", ".", "scale", ".", "get", "(", "z", ",", "1.0", ")", "*", "\n", "qz_copy", ".", "log_prob", "(", "tf", ".", "stop_gradient", "(", "dict_swap", "[", "z", "]", ")", ")", ")", "\n", "\n", "", "for", "z", "in", "six", ".", "iterkeys", "(", "inference", ".", "latent_vars", ")", ":", "\n", "      ", "z_copy", "=", "copy", "(", "z", ",", "dict_swap", ",", "scope", "=", "scope", ")", "\n", "p_log_prob", "[", "s", "]", "+=", "tf", ".", "reduce_sum", "(", "\n", "inference", ".", "scale", ".", "get", "(", "z", ",", "1.0", ")", "*", "z_copy", ".", "log_prob", "(", "dict_swap", "[", "z", "]", ")", ")", "\n", "\n", "", "for", "x", "in", "six", ".", "iterkeys", "(", "inference", ".", "data", ")", ":", "\n", "      ", "if", "isinstance", "(", "x", ",", "RandomVariable", ")", ":", "\n", "        ", "x_copy", "=", "copy", "(", "x", ",", "dict_swap", ",", "scope", "=", "scope", ")", "\n", "p_log_prob", "[", "s", "]", "+=", "tf", ".", "reduce_sum", "(", "\n", "inference", ".", "scale", ".", "get", "(", "x", ",", "1.0", ")", "*", "x_copy", ".", "log_prob", "(", "dict_swap", "[", "x", "]", ")", ")", "\n", "\n", "", "", "", "p_log_prob", "=", "tf", ".", "stack", "(", "p_log_prob", ")", "\n", "q_log_prob", "=", "tf", ".", "stack", "(", "q_log_prob", ")", "\n", "\n", "q_entropy", "=", "tf", ".", "reduce_sum", "(", "[", "\n", "tf", ".", "reduce_sum", "(", "qz", ".", "entropy", "(", ")", ")", "\n", "for", "z", ",", "qz", "in", "six", ".", "iteritems", "(", "inference", ".", "latent_vars", ")", "]", ")", "\n", "\n", "reg_penalty", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "losses", ".", "get_regularization_losses", "(", ")", ")", "\n", "\n", "if", "inference", ".", "logging", ":", "\n", "    ", "tf", ".", "summary", ".", "scalar", "(", "\"loss/p_log_prob\"", ",", "tf", ".", "reduce_mean", "(", "p_log_prob", ")", ",", "\n", "collections", "=", "[", "inference", ".", "_summary_key", "]", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"loss/q_log_prob\"", ",", "tf", ".", "reduce_mean", "(", "q_log_prob", ")", ",", "\n", "collections", "=", "[", "inference", ".", "_summary_key", "]", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"loss/q_entropy\"", ",", "q_entropy", ",", "\n", "collections", "=", "[", "inference", ".", "_summary_key", "]", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"loss/reg_penalty\"", ",", "reg_penalty", ",", "\n", "collections", "=", "[", "inference", ".", "_summary_key", "]", ")", "\n", "\n", "", "loss", "=", "-", "(", "tf", ".", "reduce_mean", "(", "p_log_prob", ")", "+", "q_entropy", "-", "reg_penalty", ")", "\n", "\n", "q_rvs", "=", "list", "(", "six", ".", "itervalues", "(", "inference", ".", "latent_vars", ")", ")", "\n", "q_vars", "=", "[", "v", "for", "v", "in", "var_list", "\n", "if", "len", "(", "get_descendants", "(", "tf", ".", "convert_to_tensor", "(", "v", ")", ",", "q_rvs", ")", ")", "!=", "0", "]", "\n", "q_grads", "=", "tf", ".", "gradients", "(", "\n", "-", "(", "tf", ".", "reduce_mean", "(", "q_log_prob", "*", "tf", ".", "stop_gradient", "(", "p_log_prob", ")", ")", "+", "\n", "q_entropy", "-", "reg_penalty", ")", ",", "\n", "q_vars", ")", "\n", "p_vars", "=", "[", "v", "for", "v", "in", "var_list", "if", "v", "not", "in", "q_vars", "]", "\n", "p_grads", "=", "tf", ".", "gradients", "(", "loss", ",", "p_vars", ")", "\n", "grads_and_vars", "=", "list", "(", "zip", "(", "q_grads", ",", "q_vars", ")", ")", "+", "list", "(", "zip", "(", "p_grads", ",", "p_vars", ")", ")", "\n", "return", "loss", ",", "grads_and_vars", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.build_score_rb_loss_and_gradients": [[1104, 1199], ["range", "list", "tensorflow.gradients", "grads.extend", "grads_vars.extend", "list", "tensorflow.get_default_graph().unique_name", "six.iteritems", "six.iteritems", "six.iterkeys", "six.iterkeys", "list", "six.itervalues", "edward.util.get_descendants", "set", "set", "range", "tensorflow.stack", "tensorflow.stack", "tensorflow.gradients", "grads.extend", "grads_vars.append", "zip", "tensorflow.get_default_graph().unique_name", "isinstance", "edward.util.copy", "edward.util.copy.value", "tensorflow.reduce_sum", "edward.util.copy", "tensorflow.reduce_sum", "isinstance", "six.iterkeys", "six.iteritems", "tensorflow.convert_to_tensor", "len", "set.update", "set.update", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.get_default_graph", "isinstance", "edward.util.copy", "tensorflow.reduce_sum", "six.iterkeys", "isinstance", "tensorflow.reduce_sum", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.losses.get_regularization_losses", "tensorflow.get_default_graph", "edward.util.copy", "edward.util.copy.value", "inference.scale.get", "edward.util.copy.log_prob", "inference.scale.get", "edward.util.copy.log_prob", "z.get_blanket", "qz.get_blanket", "tensorflow.reduce_mean", "tensorflow.losses.get_regularization_losses", "tensorflow.stop_gradient", "inference.scale.get", "edward.util.copy.log_prob", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.stop_gradient", "list", "list", "six.itervalues", "six.itervalues"], "function", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob"], ["", "def", "build_score_rb_loss_and_gradients", "(", "inference", ",", "var_list", ")", ":", "\n", "  ", "\"\"\"Build loss function and gradients based on the score function\n  estimator [@paisley2012variational] and Rao-Blackwellization\n  [@ranganath2014black].\n\n  Computed by sampling from :math:`q(z;\\lambda)` and evaluating the\n  expectation using Monte Carlo sampling and Rao-Blackwellization.\n  \"\"\"", "\n", "# Build tensors for loss and gradient calculations. There is one set", "\n", "# for each sample from the variational distribution.", "\n", "p_log_probs", "=", "[", "{", "}", "]", "*", "inference", ".", "n_samples", "\n", "q_log_probs", "=", "[", "{", "}", "]", "*", "inference", ".", "n_samples", "\n", "base_scope", "=", "tf", ".", "get_default_graph", "(", ")", ".", "unique_name", "(", "\"inference\"", ")", "+", "'/'", "\n", "for", "s", "in", "range", "(", "inference", ".", "n_samples", ")", ":", "\n", "# Form dictionary in order to replace conditioning on prior or", "\n", "# observed variable with conditioning on a specific value.", "\n", "    ", "scope", "=", "base_scope", "+", "tf", ".", "get_default_graph", "(", ")", ".", "unique_name", "(", "\"sample\"", ")", "\n", "dict_swap", "=", "{", "}", "\n", "for", "x", ",", "qx", "in", "six", ".", "iteritems", "(", "inference", ".", "data", ")", ":", "\n", "      ", "if", "isinstance", "(", "x", ",", "RandomVariable", ")", ":", "\n", "        ", "if", "isinstance", "(", "qx", ",", "RandomVariable", ")", ":", "\n", "          ", "qx_copy", "=", "copy", "(", "qx", ",", "scope", "=", "scope", ")", "\n", "dict_swap", "[", "x", "]", "=", "qx_copy", ".", "value", "(", ")", "\n", "", "else", ":", "\n", "          ", "dict_swap", "[", "x", "]", "=", "qx", "\n", "\n", "", "", "", "for", "z", ",", "qz", "in", "six", ".", "iteritems", "(", "inference", ".", "latent_vars", ")", ":", "\n", "# Copy q(z) to obtain new set of posterior samples.", "\n", "      ", "qz_copy", "=", "copy", "(", "qz", ",", "scope", "=", "scope", ")", "\n", "dict_swap", "[", "z", "]", "=", "qz_copy", ".", "value", "(", ")", "\n", "q_log_probs", "[", "s", "]", "[", "qz", "]", "=", "tf", ".", "reduce_sum", "(", "\n", "inference", ".", "scale", ".", "get", "(", "z", ",", "1.0", ")", "*", "\n", "qz_copy", ".", "log_prob", "(", "tf", ".", "stop_gradient", "(", "dict_swap", "[", "z", "]", ")", ")", ")", "\n", "\n", "", "for", "z", "in", "six", ".", "iterkeys", "(", "inference", ".", "latent_vars", ")", ":", "\n", "      ", "z_copy", "=", "copy", "(", "z", ",", "dict_swap", ",", "scope", "=", "scope", ")", "\n", "p_log_probs", "[", "s", "]", "[", "z", "]", "=", "tf", ".", "reduce_sum", "(", "\n", "inference", ".", "scale", ".", "get", "(", "z", ",", "1.0", ")", "*", "z_copy", ".", "log_prob", "(", "dict_swap", "[", "z", "]", ")", ")", "\n", "\n", "", "for", "x", "in", "six", ".", "iterkeys", "(", "inference", ".", "data", ")", ":", "\n", "      ", "if", "isinstance", "(", "x", ",", "RandomVariable", ")", ":", "\n", "        ", "x_copy", "=", "copy", "(", "x", ",", "dict_swap", ",", "scope", "=", "scope", ")", "\n", "p_log_probs", "[", "s", "]", "[", "x", "]", "=", "tf", ".", "reduce_sum", "(", "\n", "inference", ".", "scale", ".", "get", "(", "x", ",", "1.0", ")", "*", "x_copy", ".", "log_prob", "(", "dict_swap", "[", "x", "]", ")", ")", "\n", "\n", "# Take gradients of Rao-Blackwellized loss for each variational parameter.", "\n", "", "", "", "p_rvs", "=", "list", "(", "six", ".", "iterkeys", "(", "inference", ".", "latent_vars", ")", ")", "+", "[", "x", "for", "x", "in", "six", ".", "iterkeys", "(", "inference", ".", "data", ")", "if", "isinstance", "(", "x", ",", "RandomVariable", ")", "]", "\n", "q_rvs", "=", "list", "(", "six", ".", "itervalues", "(", "inference", ".", "latent_vars", ")", ")", "\n", "reverse_latent_vars", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "six", ".", "iteritems", "(", "inference", ".", "latent_vars", ")", "}", "\n", "grads", "=", "[", "]", "\n", "grads_vars", "=", "[", "]", "\n", "for", "var", "in", "var_list", ":", "\n", "# Get all variational factors depending on the parameter.", "\n", "    ", "descendants", "=", "get_descendants", "(", "tf", ".", "convert_to_tensor", "(", "var", ")", ",", "q_rvs", ")", "\n", "if", "len", "(", "descendants", ")", "==", "0", ":", "\n", "      ", "continue", "# skip if not a variational parameter", "\n", "# Get p and q's Markov blanket wrt these latent variables.", "\n", "", "var_p_rvs", "=", "set", "(", ")", "\n", "for", "qz", "in", "descendants", ":", "\n", "      ", "z", "=", "reverse_latent_vars", "[", "qz", "]", "\n", "var_p_rvs", ".", "update", "(", "z", ".", "get_blanket", "(", "p_rvs", ")", "+", "[", "z", "]", ")", "\n", "\n", "", "var_q_rvs", "=", "set", "(", ")", "\n", "for", "qz", "in", "descendants", ":", "\n", "      ", "var_q_rvs", ".", "update", "(", "qz", ".", "get_blanket", "(", "q_rvs", ")", "+", "[", "qz", "]", ")", "\n", "\n", "", "pi_log_prob", "=", "[", "0.0", "]", "*", "inference", ".", "n_samples", "\n", "qi_log_prob", "=", "[", "0.0", "]", "*", "inference", ".", "n_samples", "\n", "for", "s", "in", "range", "(", "inference", ".", "n_samples", ")", ":", "\n", "      ", "pi_log_prob", "[", "s", "]", "=", "tf", ".", "reduce_sum", "(", "[", "p_log_probs", "[", "s", "]", "[", "rv", "]", "for", "rv", "in", "var_p_rvs", "]", ")", "\n", "qi_log_prob", "[", "s", "]", "=", "tf", ".", "reduce_sum", "(", "[", "q_log_probs", "[", "s", "]", "[", "rv", "]", "for", "rv", "in", "var_q_rvs", "]", ")", "\n", "\n", "", "pi_log_prob", "=", "tf", ".", "stack", "(", "pi_log_prob", ")", "\n", "qi_log_prob", "=", "tf", ".", "stack", "(", "qi_log_prob", ")", "\n", "grad", "=", "tf", ".", "gradients", "(", "\n", "-", "tf", ".", "reduce_mean", "(", "qi_log_prob", "*", "\n", "tf", ".", "stop_gradient", "(", "pi_log_prob", "-", "qi_log_prob", ")", ")", "+", "\n", "tf", ".", "reduce_sum", "(", "tf", ".", "losses", ".", "get_regularization_losses", "(", ")", ")", ",", "\n", "var", ")", "\n", "grads", ".", "extend", "(", "grad", ")", "\n", "grads_vars", ".", "append", "(", "var", ")", "\n", "\n", "# Take gradients of total loss function for model parameters.", "\n", "", "loss", "=", "-", "(", "tf", ".", "reduce_mean", "(", "[", "tf", ".", "reduce_sum", "(", "list", "(", "six", ".", "itervalues", "(", "p_log_prob", ")", ")", ")", "\n", "for", "p_log_prob", "in", "p_log_probs", "]", ")", "-", "\n", "tf", ".", "reduce_mean", "(", "[", "tf", ".", "reduce_sum", "(", "list", "(", "six", ".", "itervalues", "(", "q_log_prob", ")", ")", ")", "\n", "for", "q_log_prob", "in", "q_log_probs", "]", ")", "-", "\n", "tf", ".", "reduce_sum", "(", "tf", ".", "losses", ".", "get_regularization_losses", "(", ")", ")", ")", "\n", "model_vars", "=", "[", "v", "for", "v", "in", "var_list", "if", "v", "not", "in", "grads_vars", "]", "\n", "model_grads", "=", "tf", ".", "gradients", "(", "loss", ",", "model_vars", ")", "\n", "grads", ".", "extend", "(", "model_grads", ")", "\n", "grads_vars", ".", "extend", "(", "model_vars", ")", "\n", "grads_and_vars", "=", "list", "(", "zip", "(", "grads", ",", "grads_vars", ")", ")", "\n", "return", "loss", ",", "grads_and_vars", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.relbo.build_score_rb_loss_and_gradients_relbo": [[1200, 1316], ["range", "list", "tensorflow.reduce_mean", "logger.info", "tensorflow.gradients", "grads.extend", "grads_vars.extend", "list", "tensorflow.get_default_graph().unique_name", "six.iteritems", "six.iteritems", "six.iterkeys", "six.iterkeys", "six.iteritems", "list", "six.itervalues", "edward.util.get_descendants", "set", "set", "range", "tensorflow.stack", "tensorflow.stack", "tensorflow.gradients", "grads.extend", "grads_vars.append", "zip", "tensorflow.get_default_graph().unique_name", "isinstance", "edward.util.copy", "edward.util.copy.value", "tensorflow.reduce_sum", "edward.util.copy", "tensorflow.reduce_sum", "isinstance", "edward.util.copy", "tensorflow.reduce_sum", "six.iterkeys", "six.iteritems", "tensorflow.convert_to_tensor", "len", "set.update", "set.update", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "numpy.sqrt", "tensorflow.get_default_graph", "isinstance", "edward.util.copy", "tensorflow.reduce_sum", "six.iterkeys", "isinstance", "tensorflow.reduce_sum", "numpy.log", "numpy.sqrt", "tensorflow.reduce_sum", "tensorflow.get_default_graph", "edward.util.copy", "edward.util.copy.value", "inference.scale.get", "edward.util.copy.log_prob", "inference.scale.get", "edward.util.copy.log_prob", "inference.scale.get", "edward.util.copy.log_prob", "z.get_blanket", "qz.get_blanket", "tensorflow.reduce_mean", "tensorflow.losses.get_regularization_losses", "tensorflow.reduce_mean", "tensorflow.losses.get_regularization_losses", "tensorflow.stop_gradient", "inference.scale.get", "edward.util.copy.log_prob", "tensorflow.reduce_mean", "tensorflow.stop_gradient", "tensorflow.reduce_sum", "list", "tensorflow.reduce_sum", "six.itervalues", "list", "six.itervalues"], "function", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob"], ["", "def", "build_score_rb_loss_and_gradients_relbo", "(", "inference", ",", "var_list", ")", ":", "\n", "  ", "\"\"\"Build loss function and gradients based on the score function\n  estimator [@paisley2012variational] and Rao-Blackwellization\n  [@ranganath2014black].\n\n  Computed by sampling from :math:`q(z;\\lambda)` and evaluating the\n  expectation using Monte Carlo sampling and Rao-Blackwellization.\n  \"\"\"", "\n", "# Build tensors for loss and gradient calculations. There is one set", "\n", "# for each sample from the variational distribution.", "\n", "p_log_probs", "=", "[", "{", "}", "]", "*", "inference", ".", "n_samples", "\n", "q_log_probs", "=", "[", "{", "}", "]", "*", "inference", ".", "n_samples", "\n", "relbo_reg_log_prob", "=", "[", "0.0", "]", "*", "inference", ".", "n_samples", "\n", "base_scope", "=", "tf", ".", "get_default_graph", "(", ")", ".", "unique_name", "(", "\"inference\"", ")", "+", "'/'", "\n", "for", "s", "in", "range", "(", "inference", ".", "n_samples", ")", ":", "\n", "# Form dictionary in order to replace conditioning on prior or", "\n", "# observed variable with conditioning on a specific value.", "\n", "    ", "scope", "=", "base_scope", "+", "tf", ".", "get_default_graph", "(", ")", ".", "unique_name", "(", "\"sample\"", ")", "\n", "dict_swap", "=", "{", "}", "\n", "for", "x", ",", "qx", "in", "six", ".", "iteritems", "(", "inference", ".", "data", ")", ":", "\n", "      ", "if", "isinstance", "(", "x", ",", "RandomVariable", ")", ":", "\n", "        ", "if", "isinstance", "(", "qx", ",", "RandomVariable", ")", ":", "\n", "          ", "qx_copy", "=", "copy", "(", "qx", ",", "scope", "=", "scope", ")", "\n", "dict_swap", "[", "x", "]", "=", "qx_copy", ".", "value", "(", ")", "\n", "", "else", ":", "\n", "          ", "dict_swap", "[", "x", "]", "=", "qx", "\n", "\n", "", "", "", "for", "z", ",", "qz", "in", "six", ".", "iteritems", "(", "inference", ".", "latent_vars", ")", ":", "\n", "# Copy q(z) to obtain new set of posterior samples.", "\n", "      ", "qz_copy", "=", "copy", "(", "qz", ",", "scope", "=", "scope", ")", "\n", "dict_swap", "[", "z", "]", "=", "qz_copy", ".", "value", "(", ")", "\n", "q_log_probs", "[", "s", "]", "[", "qz", "]", "=", "tf", ".", "reduce_sum", "(", "\n", "inference", ".", "scale", ".", "get", "(", "z", ",", "1.0", ")", "*", "\n", "qz_copy", ".", "log_prob", "(", "tf", ".", "stop_gradient", "(", "dict_swap", "[", "z", "]", ")", ")", ")", "\n", "\n", "", "for", "z", "in", "six", ".", "iterkeys", "(", "inference", ".", "latent_vars", ")", ":", "\n", "      ", "z_copy", "=", "copy", "(", "z", ",", "dict_swap", ",", "scope", "=", "scope", ")", "\n", "p_log_probs", "[", "s", "]", "[", "z", "]", "=", "tf", ".", "reduce_sum", "(", "\n", "inference", ".", "scale", ".", "get", "(", "z", ",", "1.0", ")", "*", "z_copy", ".", "log_prob", "(", "dict_swap", "[", "z", "]", ")", ")", "\n", "\n", "", "for", "x", "in", "six", ".", "iterkeys", "(", "inference", ".", "data", ")", ":", "\n", "      ", "if", "isinstance", "(", "x", ",", "RandomVariable", ")", ":", "\n", "        ", "x_copy", "=", "copy", "(", "x", ",", "dict_swap", ",", "scope", "=", "scope", ")", "\n", "p_log_probs", "[", "s", "]", "[", "x", "]", "=", "tf", ".", "reduce_sum", "(", "\n", "inference", ".", "scale", ".", "get", "(", "x", ",", "1.0", ")", "*", "x_copy", ".", "log_prob", "(", "dict_swap", "[", "x", "]", ")", ")", "\n", "\n", "# RELBO", "\n", "#for fz, qt in six.iteritems(inference.fw_iterates):", "\n", "", "", "for", "z", ",", "qt", "in", "six", ".", "iteritems", "(", "inference", ".", "fw_iterates", ")", ":", "\n", "      ", "qt_copy", "=", "copy", "(", "qt", ",", "dict_swap", ",", "scope", "=", "scope", ")", "\n", "relbo_reg_log_prob", "[", "s", "]", "+=", "tf", ".", "reduce_sum", "(", "\n", "inference", ".", "scale", ".", "get", "(", "z", ",", "1.0", ")", "*", "qt_copy", ".", "log_prob", "(", "dict_swap", "[", "z", "]", ")", ")", "\n", "\n", "# Take gradients of Rao-Blackwellized loss for each variational parameter.", "\n", "", "", "p_rvs", "=", "list", "(", "six", ".", "iterkeys", "(", "inference", ".", "latent_vars", ")", ")", "+", "[", "x", "for", "x", "in", "six", ".", "iterkeys", "(", "inference", ".", "data", ")", "if", "isinstance", "(", "x", ",", "RandomVariable", ")", "]", "\n", "q_rvs", "=", "list", "(", "six", ".", "itervalues", "(", "inference", ".", "latent_vars", ")", ")", "\n", "reverse_latent_vars", "=", "{", "v", ":", "k", "for", "k", ",", "v", "in", "six", ".", "iteritems", "(", "inference", ".", "latent_vars", ")", "}", "\n", "grads", "=", "[", "]", "\n", "grads_vars", "=", "[", "]", "\n", "for", "var", "in", "var_list", ":", "\n", "# Get all variational factors depending on the parameter.", "\n", "    ", "descendants", "=", "get_descendants", "(", "tf", ".", "convert_to_tensor", "(", "var", ")", ",", "q_rvs", ")", "\n", "if", "len", "(", "descendants", ")", "==", "0", ":", "\n", "      ", "continue", "# skip if not a variational parameter", "\n", "# Get p and q's Markov blanket wrt these latent variables.", "\n", "", "var_p_rvs", "=", "set", "(", ")", "\n", "for", "qz", "in", "descendants", ":", "\n", "      ", "z", "=", "reverse_latent_vars", "[", "qz", "]", "\n", "var_p_rvs", ".", "update", "(", "z", ".", "get_blanket", "(", "p_rvs", ")", "+", "[", "z", "]", ")", "\n", "\n", "", "var_q_rvs", "=", "set", "(", ")", "\n", "for", "qz", "in", "descendants", ":", "\n", "      ", "var_q_rvs", ".", "update", "(", "qz", ".", "get_blanket", "(", "q_rvs", ")", "+", "[", "qz", "]", ")", "\n", "\n", "", "pi_log_prob", "=", "[", "0.0", "]", "*", "inference", ".", "n_samples", "\n", "qi_log_prob", "=", "[", "0.0", "]", "*", "inference", ".", "n_samples", "\n", "for", "s", "in", "range", "(", "inference", ".", "n_samples", ")", ":", "\n", "      ", "pi_log_prob", "[", "s", "]", "=", "tf", ".", "reduce_sum", "(", "[", "p_log_probs", "[", "s", "]", "[", "rv", "]", "for", "rv", "in", "var_p_rvs", "]", ")", "\n", "qi_log_prob", "[", "s", "]", "=", "tf", ".", "reduce_sum", "(", "[", "q_log_probs", "[", "s", "]", "[", "rv", "]", "for", "rv", "in", "var_q_rvs", "]", ")", "\n", "\n", "", "pi_log_prob", "=", "tf", ".", "stack", "(", "pi_log_prob", ")", "\n", "qi_log_prob", "=", "tf", ".", "stack", "(", "qi_log_prob", ")", "\n", "grad", "=", "tf", ".", "gradients", "(", "\n", "-", "tf", ".", "reduce_mean", "(", "qi_log_prob", "*", "\n", "tf", ".", "stop_gradient", "(", "pi_log_prob", "-", "qi_log_prob", ")", ")", "+", "\n", "tf", ".", "reduce_sum", "(", "tf", ".", "losses", ".", "get_regularization_losses", "(", ")", ")", ",", "\n", "var", ")", "\n", "grads", ".", "extend", "(", "grad", ")", "\n", "grads_vars", ".", "append", "(", "var", ")", "\n", "\n", "", "relbo_reg_log_prob", "=", "tf", ".", "reduce_mean", "(", "relbo_reg_log_prob", ")", "\n", "annealers", "=", "{", "'linear'", ":", "lambda", "t", ":", "t", ",", "\n", "'constant'", ":", "lambda", "t", ":", "1.", ",", "\n", "'log'", ":", "lambda", "t", ":", "1.", "+", "np", ".", "log", "(", "t", ")", ",", "\n", "'1oversqrt'", ":", "lambda", "t", ":", "1.", "/", "np", ".", "sqrt", "(", "t", "+", "1", ")", ",", "\n", "'1overt'", ":", "lambda", "t", ":", "1.", "/", "(", "t", "+", "1", ")", ",", "\n", "'sqrtinc'", ":", "lambda", "t", ":", "np", ".", "sqrt", "(", "t", "+", "1", ")", "\n", "}", "\n", "relbo_reg", "=", "FLAGS", ".", "relbo_reg", "*", "annealers", "[", "FLAGS", ".", "relbo_anneal", "]", "(", "inference", ".", "fw_iter", ")", "\n", "logger", ".", "info", "(", "\"relbo regularization lambda %.10f\"", "%", "relbo_reg", ")", "\n", "\n", "# Take gradients of total loss function for model parameters.", "\n", "loss", "=", "-", "(", "tf", ".", "reduce_mean", "(", "[", "tf", ".", "reduce_sum", "(", "list", "(", "six", ".", "itervalues", "(", "p_log_prob", ")", ")", ")", "\n", "for", "p_log_prob", "in", "p_log_probs", "]", ")", "-", "\n", "relbo_reg", "*", "tf", ".", "reduce_mean", "(", "[", "tf", ".", "reduce_sum", "(", "list", "(", "six", ".", "itervalues", "(", "q_log_prob", ")", ")", ")", "\n", "for", "q_log_prob", "in", "q_log_probs", "]", ")", "-", "\n", "tf", ".", "reduce_sum", "(", "tf", ".", "losses", ".", "get_regularization_losses", "(", ")", ")", "\n", "-", "relbo_reg_log_prob", ")", "\n", "\n", "model_vars", "=", "[", "v", "for", "v", "in", "var_list", "if", "v", "not", "in", "grads_vars", "]", "\n", "model_grads", "=", "tf", ".", "gradients", "(", "loss", ",", "model_vars", ")", "\n", "grads", ".", "extend", "(", "model_grads", ")", "\n", "grads_vars", ".", "extend", "(", "model_vars", ")", "\n", "grads_and_vars", "=", "list", "(", "zip", "(", "grads", ",", "grads_vars", ")", ")", "\n", "return", "loss", ",", "grads_and_vars", "\n", "", ""]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.lpl.lpl._batch_shape_tensor": [[7, 9], ["tensorflow.constant"], "methods", ["None"], ["  ", "def", "_batch_shape_tensor", "(", "self", ")", ":", "\n", "    ", "return", "tf", ".", "constant", "(", "[", "]", ",", "dtype", "=", "dtypes", ".", "int32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.lpl.lpl._batch_shape": [[10, 12], ["tensorflow.TensorShape"], "methods", ["None"], ["", "def", "_batch_shape", "(", "self", ")", ":", "\n", "    ", "return", "tf", ".", "TensorShape", "(", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.lpl.lpl._event_shape_tensor": [[13, 15], ["tensorflow.shape"], "methods", ["None"], ["", "def", "_event_shape_tensor", "(", "self", ")", ":", "\n", "    ", "return", "tf", ".", "shape", "(", "self", ".", "loc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.lpl.lpl._event_shape": [[16, 18], ["lpl.lpl._loc.get_shape"], "methods", ["None"], ["", "def", "_event_shape", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_loc", ".", "get_shape", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.lpl.lpl._sample_n": [[19, 23], ["tensorflow.concat", "tensorflow.distributions.Laplace().sample", "tensorflow.cast", "lpl.lpl.event_shape_tensor", "tensorflow.distributions.Laplace"], "methods", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.sample"], ["", "def", "_sample_n", "(", "self", ",", "n", ",", "seed", "=", "None", ")", ":", "\n", "    ", "new_shape", "=", "tf", ".", "concat", "(", "[", "[", "n", "]", ",", "self", ".", "event_shape_tensor", "(", ")", "]", ",", "0", ")", "\n", "sample", "=", "tf", ".", "distributions", ".", "Laplace", "(", "loc", "=", "self", ".", "loc", ",", "scale", "=", "self", ".", "scale", ")", ".", "sample", "(", "n", ")", "\n", "return", "tf", ".", "cast", "(", "sample", ",", "self", ".", "dtype", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.__init__": [[12, 18], ["base.__module__.split"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "base", ")", ":", "\n", "        ", "assert", "base", ".", "__module__", ".", "split", "(", "'.'", ")", "[", ":", "2", "]", "==", "[", "'scipy'", ",", "'stats'", "]", ",", "\"Attempting to assert that base distributions must come from scipy.\"", "\n", "self", ".", "base", "=", "base", "\n", "self", ".", "params", "=", "[", "]", "\n", "self", ".", "weights", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.__str__": [[19, 23], ["str", "str", "str"], "methods", ["None"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "'InfiniteMixture['", "+", "' '", ".", "join", "(", "[", "'base: '", "+", "str", "(", "self", ".", "base", ")", ",", "\n", "'params: '", "+", "str", "(", "self", ".", "params", ")", ",", "\n", "'weights: '", "+", "str", "(", "self", ".", "weights", ")", "]", ")", "+", "']'", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.size": [[24, 26], ["len"], "methods", ["None"], ["", "def", "size", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob": [[27, 33], ["range", "numpy.log", "infinite_mixture.InfiniteMixtureScipy.size", "infinite_mixture.InfiniteMixtureScipy.base().pdf", "infinite_mixture.InfiniteMixtureScipy.base"], "methods", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.size"], ["", "def", "log_prob", "(", "self", ",", "v", ")", ":", "\n", "        ", "ret", "=", "0", "\n", "for", "i", "in", "range", "(", "self", ".", "size", "(", ")", ")", ":", "\n", "            ", "part", "=", "self", ".", "weights", "[", "i", "]", "*", "self", ".", "base", "(", "*", "self", ".", "params", "[", "i", "]", ")", ".", "pdf", "(", "v", ")", "\n", "ret", "+=", "part", "\n", "", "return", "np", ".", "log", "(", "ret", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.sample": [[34, 41], ["range", "numpy.random.choice", "infinite_mixture.InfiniteMixtureScipy.base().rvs", "samples.append", "range", "infinite_mixture.InfiniteMixtureScipy.size", "infinite_mixture.InfiniteMixtureScipy.base"], "methods", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.size"], ["", "def", "sample", "(", "self", ",", "n_samples", ")", ":", "\n", "        ", "samples", "=", "[", "]", "\n", "for", "_", "in", "range", "(", "n_samples", ")", ":", "\n", "            ", "idx", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "self", ".", "size", "(", ")", ")", ",", "p", "=", "self", ".", "weights", ")", "\n", "sample", "=", "self", ".", "base", "(", "*", "self", ".", "params", "[", "idx", "]", ")", ".", "rvs", "(", "1", ")", "\n", "samples", ".", "append", "(", "sample", ")", "\n", "", "return", "samples", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.sample_n": [[42, 45], ["infinite_mixture.InfiniteMixtureScipy.sample"], "methods", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.sample"], ["", "def", "sample_n", "(", "self", ",", "n_samples", ")", ":", "\n", "        ", "'''alias for sample method'''", "\n", "return", "self", ".", "sample", "(", "n_samples", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.utils.decay_linear": [[6, 8], ["None"], "function", ["None"], ["def", "decay_linear", "(", "value", ")", ":", "\n", "    ", "return", "1.", "/", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.utils.decay_log": [[9, 11], ["numpy.log"], "function", ["None"], ["", "def", "decay_log", "(", "value", ")", ":", "\n", "    ", "return", "1.", "/", "np", ".", "log", "(", "value", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.utils.decay_squared": [[12, 14], ["None"], "function", ["None"], ["", "def", "decay_squared", "(", "value", ")", ":", "\n", "    ", "return", "1.", "/", "(", "value", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.utils.get_logger": [[30, 32], ["None"], "function", ["None"], ["def", "get_logger", "(", ")", ":", "\n", "    ", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.utils.update_weights": [[33, 41], ["weights.append", "weights.append"], "function", ["None"], ["", "def", "update_weights", "(", "weights", ",", "gamma", ",", "iter", ")", ":", "\n", "    ", "if", "iter", "==", "0", ":", "\n", "        ", "weights", ".", "append", "(", "gamma", ")", "\n", "", "else", ":", "\n", "        ", "weights", "=", "[", "(", "1.", "-", "gamma", ")", "*", "w", "for", "w", "in", "weights", "]", "\n", "weights", ".", "append", "(", "gamma", ")", "\n", "\n", "", "return", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.utils.compute_relbo": [[42, 48], ["s.sample", "relbo.eval", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "qt.log_prob", "p.log_prob", "tensorflow.reduce_sum", "s.log_prob"], "function", ["home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.sample", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob", "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.infinite_mixture.InfiniteMixtureScipy.log_prob"], ["", "def", "compute_relbo", "(", "s", ",", "qt", ",", "p", ",", "l", ")", ":", "\n", "    ", "s_samples", "=", "s", ".", "sample", "(", "500", ")", "\n", "relbo", "=", "tf", ".", "reduce_sum", "(", "p", ".", "log_prob", "(", "s_samples", ")", ")", "-", "l", "*", "tf", ".", "reduce_sum", "(", "s", ".", "log_prob", "(", "s_samples", ")", ")", "-", "tf", ".", "reduce_sum", "(", "qt", ".", "log_prob", "(", "s_samples", ")", ")", "\n", "return", "relbo", ".", "eval", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.utils.save_times": [[49, 54], ["open", "f.write", "f.write", "str"], "function", ["None"], ["", "def", "save_times", "(", "path", ",", "times", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "for", "t", "in", "times", ":", "\n", "            ", "f", ".", "write", "(", "str", "(", "t", ")", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.utils.block_diagonal": [[55, 97], ["tensorflow.Dimension", "tensorflow.Dimension", "tensorflow.TensorShape", "tensorflow.add_n", "tensorflow.concat", "tf.concat.set_shape", "tensorflow.convert_to_tensor", "matrix.get_shape().with_rank_at_least", "batch_shape.merge_with.merge_with", "tensorflow.shape", "ret_columns_list.append", "tensorflow.shape", "row_blocks.append", "batch_shape.merge_with.concatenate", "tensorflow.pad", "matrix.get_shape", "tensorflow.concat", "tensorflow.zeros", "tensorflow.rank"], "function", ["None"], ["", "", "", "def", "block_diagonal", "(", "matrices", ",", "dtype", "=", "tf", ".", "float32", ")", ":", "\n", "  ", "r\"\"\"Constructs block-diagonal matrices from a list of batched 2D tensors.\n\n  Args:\n    matrices: A list of Tensors with shape [..., N_i, M_i] (i.e. a list of\n      matrices with the same batch dimension).\n    dtype: Data type to use. The Tensors in `matrices` must match this dtype.\n  Returns:\n    A matrix with the input matrices stacked along its main diagonal, having\n    shape [..., \\sum_i N_i, \\sum_i M_i].\n\n  \"\"\"", "\n", "matrices", "=", "[", "tf", ".", "convert_to_tensor", "(", "matrix", ",", "dtype", "=", "dtype", ")", "for", "matrix", "in", "matrices", "]", "\n", "blocked_rows", "=", "tf", ".", "Dimension", "(", "0", ")", "\n", "blocked_cols", "=", "tf", ".", "Dimension", "(", "0", ")", "\n", "batch_shape", "=", "tf", ".", "TensorShape", "(", "None", ")", "\n", "for", "matrix", "in", "matrices", ":", "\n", "    ", "full_matrix_shape", "=", "matrix", ".", "get_shape", "(", ")", ".", "with_rank_at_least", "(", "2", ")", "\n", "batch_shape", "=", "batch_shape", ".", "merge_with", "(", "full_matrix_shape", "[", ":", "-", "2", "]", ")", "\n", "blocked_rows", "+=", "full_matrix_shape", "[", "-", "2", "]", "\n", "blocked_cols", "+=", "full_matrix_shape", "[", "-", "1", "]", "\n", "", "ret_columns_list", "=", "[", "]", "\n", "for", "matrix", "in", "matrices", ":", "\n", "    ", "matrix_shape", "=", "tf", ".", "shape", "(", "matrix", ")", "\n", "ret_columns_list", ".", "append", "(", "matrix_shape", "[", "-", "1", "]", ")", "\n", "", "ret_columns", "=", "tf", ".", "add_n", "(", "ret_columns_list", ")", "\n", "row_blocks", "=", "[", "]", "\n", "current_column", "=", "0", "\n", "for", "matrix", "in", "matrices", ":", "\n", "    ", "matrix_shape", "=", "tf", ".", "shape", "(", "matrix", ")", "\n", "row_before_length", "=", "current_column", "\n", "current_column", "+=", "matrix_shape", "[", "-", "1", "]", "\n", "row_after_length", "=", "ret_columns", "-", "current_column", "\n", "row_blocks", ".", "append", "(", "tf", ".", "pad", "(", "\n", "tensor", "=", "matrix", ",", "\n", "paddings", "=", "tf", ".", "concat", "(", "\n", "[", "tf", ".", "zeros", "(", "[", "tf", ".", "rank", "(", "matrix", ")", "-", "1", ",", "2", "]", ",", "dtype", "=", "tf", ".", "int32", ")", ",", "\n", "[", "(", "row_before_length", ",", "row_after_length", ")", "]", "]", ",", "\n", "axis", "=", "0", ")", ")", ")", "\n", "", "blocked", "=", "tf", ".", "concat", "(", "row_blocks", ",", "-", "2", ")", "\n", "blocked", ".", "set_shape", "(", "batch_shape", ".", "concatenate", "(", "(", "blocked_rows", ",", "blocked_cols", ")", ")", ")", "\n", "return", "blocked", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.mvn.mvn._batch_shape_tensor": [[7, 9], ["tensorflow.constant"], "methods", ["None"], ["  ", "def", "_batch_shape_tensor", "(", "self", ")", ":", "\n", "    ", "return", "tf", ".", "constant", "(", "[", "]", ",", "dtype", "=", "dtypes", ".", "int32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.mvn.mvn._batch_shape": [[10, 12], ["tensorflow.TensorShape"], "methods", ["None"], ["", "def", "_batch_shape", "(", "self", ")", ":", "\n", "    ", "return", "tf", ".", "TensorShape", "(", "[", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.mvn.mvn._event_shape_tensor": [[13, 15], ["tensorflow.shape"], "methods", ["None"], ["", "def", "_event_shape_tensor", "(", "self", ")", ":", "\n", "    ", "return", "tf", ".", "shape", "(", "self", ".", "loc", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.mvn.mvn._event_shape": [[16, 18], ["mvn.mvn._loc.get_shape"], "methods", ["None"], ["", "def", "_event_shape", "(", "self", ")", ":", "\n", "    ", "return", "self", ".", "_loc", ".", "get_shape", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.ratschlab_boosting-bbvi.core.mvn.mvn._sample_n": [[19, 24], ["tensorflow.concat", "tensorflow.random_normal", "tensorflow.cast", "mvn.mvn.event_shape_tensor"], "methods", ["None"], ["", "def", "_sample_n", "(", "self", ",", "n", ",", "seed", "=", "None", ")", ":", "\n", "    ", "new_shape", "=", "tf", ".", "concat", "(", "[", "[", "n", "]", ",", "self", ".", "event_shape_tensor", "(", ")", "]", ",", "0", ")", "\n", "sample", "=", "tf", ".", "random_normal", "(", "new_shape", ",", "seed", "=", "seed", ",", "dtype", "=", "self", ".", "loc", ".", "dtype", ",", "\n", "mean", "=", "self", ".", "loc", ",", "stddev", "=", "self", ".", "scale", ")", "\n", "return", "tf", ".", "cast", "(", "sample", ",", "self", ".", "dtype", ")", "\n", "", "", ""]]}