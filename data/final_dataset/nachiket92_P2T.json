{"home.repos.pwc.inspect_result.nachiket92_P2T.None.utils.get_plan_feats": [[9, 33], ["scene_tensor.reshape.reshape", "agent_tensor.reshape.reshape", "plans[].repeat().long", "plans[].repeat().long", "torch.gather", "torch.gather", "scene_feats.permute.permute", "agent_feats.permute.permute", "plans[].repeat", "plans[].repeat"], "function", ["None"], ["def", "get_plan_feats", "(", "plans", ",", "scene_tensor", ",", "agent_tensor", ")", ":", "\n", "    ", "\"\"\"\n    Returns location coordinates, map and agent features for a given batch of plans\n\n    Inputs\n    plans: Sequences of row and column values on grid. shape: (Batchsize, horizon, 2)\n    scene_tensor: Tensor of scene features: (Batchsize, C_s, H, W)\n    agent_tensor: Tensor of agent features: (Batchsize, C_a, H, W)\n\n    Output\n    scene_feats: Scene features along plan (Batchsize, horizon, C_s)\n    agent_feats: Agent features along plan (Batchsize, horizon, C_a)\n    \"\"\"", "\n", "h", "=", "scene_tensor", ".", "shape", "[", "2", "]", "\n", "scene_tensor", "=", "scene_tensor", ".", "reshape", "(", "scene_tensor", ".", "shape", "[", "0", "]", ",", "scene_tensor", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", "agent_tensor", "=", "agent_tensor", ".", "reshape", "(", "agent_tensor", ".", "shape", "[", "0", "]", ",", "agent_tensor", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", "plans", "=", "plans", "[", ":", ",", ":", ",", "0", "]", "*", "h", "+", "plans", "[", ":", ",", ":", ",", "1", "]", "\n", "plans_s", "=", "plans", "[", ":", ",", "None", ",", ":", "]", ".", "repeat", "(", "1", ",", "scene_tensor", ".", "shape", "[", "1", "]", ",", "1", ")", ".", "long", "(", ")", "\n", "plans_a", "=", "plans", "[", ":", ",", "None", ",", ":", "]", ".", "repeat", "(", "1", ",", "agent_tensor", ".", "shape", "[", "1", "]", ",", "1", ")", ".", "long", "(", ")", "\n", "scene_feats", "=", "torch", ".", "gather", "(", "scene_tensor", ",", "2", ",", "plans_s", ")", "\n", "agent_feats", "=", "torch", ".", "gather", "(", "agent_tensor", ",", "2", ",", "plans_a", ")", "\n", "scene_feats", "=", "scene_feats", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "agent_feats", "=", "agent_feats", ".", "permute", "(", "0", ",", "2", ",", "1", ")", "\n", "return", "scene_feats", ",", "agent_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.nachiket92_P2T.None.utils.km_cluster": [[35, 42], ["sklearn.utils.testing.ignore_warnings", "sklearn.cluster.KMeans().fit", "sklearn.cluster.KMeans"], "function", ["None"], ["", "@", "ignore_warnings", "(", "category", "=", "ConvergenceWarning", ")", "\n", "def", "km_cluster", "(", "data", ",", "num_clusters", ")", ":", "\n", "    ", "\"\"\"\n    Performs K-means clustering on a set of sampled trajectories\n    \"\"\"", "\n", "clustering", "=", "KMeans", "(", "num_clusters", ",", "n_init", "=", "1", ",", "max_iter", "=", "100", ")", ".", "fit", "(", "data", ")", "\n", "return", "clustering", ".", "labels_", "\n", "\n"]], "home.repos.pwc.inspect_result.nachiket92_P2T.None.utils.min_ade_k": [[44, 66], ["y_gt.reshape.reshape", "y_gt.reshape.repeat", "torch.pow", "torch.sum", "torch.pow", "torch.min", "torch.mean", "torch.mean"], "function", ["None"], ["", "def", "min_ade_k", "(", "y_pred", ",", "y_gt", ",", "masks", ")", ":", "\n", "    ", "\"\"\"\n    minADE_k loss for cases where k can vary across a batch.\n\n    Inputs\n    y_pred: Predicted trajectories, Tensor shape: (Batchsize, maxK, prediction horizon, 2).\n     Includes dummy values when K< maxK\n    y_gt: Ground truth trajectory, Tensor shape: (Batchsize, prediction horizon, 2)\n    masks: 0 or inf values depending on value of K for each sample in the batch, Tensor shape: (Batchsize, maxK)\n\n    Output\n    loss: minADE_k loss for batch\n    \"\"\"", "\n", "y_gt", "=", "y_gt", ".", "reshape", "(", "[", "y_gt", ".", "shape", "[", "0", "]", ",", "1", ",", "y_gt", ".", "shape", "[", "1", "]", ",", "y_gt", ".", "shape", "[", "2", "]", "]", ")", "\n", "y_gt_repeated", "=", "y_gt", ".", "repeat", "(", "[", "1", ",", "y_pred", ".", "shape", "[", "1", "]", ",", "1", ",", "1", "]", ")", "\n", "loss", "=", "torch", ".", "pow", "(", "y_gt_repeated", "-", "y_pred", "[", ":", ",", ":", ",", ":", ",", "0", ":", "2", "]", ",", "2", ")", "\n", "loss", "=", "torch", ".", "sum", "(", "loss", ",", "3", ")", "\n", "loss", "=", "torch", ".", "pow", "(", "loss", ",", "0.5", ")", "\n", "loss", "=", "torch", ".", "mean", "(", "loss", ",", "2", ")", "+", "masks", "\n", "loss", ",", "ids", "=", "torch", ".", "min", "(", "loss", ",", "1", ")", "\n", "loss", "=", "torch", ".", "mean", "(", "loss", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.nachiket92_P2T.None.utils.min_fde_k": [[68, 104], ["y_gt.reshape.reshape", "y_gt_last.repeat", "torch.pow", "torch.sum", "torch.min", "torch.mean", "torch.pow", "ids.permute.repeat", "ids.permute.permute", "y_pred.gather", "torch.pow", "torch.sum", "torch.pow", "torch.squeeze", "torch.mean"], "function", ["None"], ["", "def", "min_fde_k", "(", "y_pred", ",", "y_gt", ",", "masks", ",", "all_timestamps", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    minFDE_k loss for cases where k can vary across a batch.\n\n    Inputs\n    y_pred: Predicted trajectories, Tensor shape: (Batchsize, maxK, prediction horizon, 2).\n     Includes dummy values when K< maxK\n    y_gt: Ground truth trajectory, Tensor shape: (Batchsize, prediction horizon, 2)\n    masks: 0 or inf values depending on value of K for each sample in the batch, Tensor shape: (Batchsize, maxK)\n    all_timestamps: Flag, if true, returns displacement error for each timestamp over prediction horizon,\n    for best of k FDE trajectory\n\n    Output\n    l: minFDE_k loss for batch\n    \"\"\"", "\n", "y_gt", "=", "y_gt", ".", "reshape", "(", "[", "y_gt", ".", "shape", "[", "0", "]", ",", "1", ",", "y_gt", ".", "shape", "[", "1", "]", ",", "y_gt", ".", "shape", "[", "2", "]", "]", ")", "\n", "y_gt_last", "=", "y_gt", "[", ":", ",", ":", ",", "y_gt", ".", "shape", "[", "2", "]", "-", "1", ",", ":", "]", "\n", "y_pred_last", "=", "y_pred", "[", ":", ",", ":", ",", "y_pred", ".", "shape", "[", "2", "]", "-", "1", ",", ":", "]", "\n", "y_gt_last_repeated", "=", "y_gt_last", ".", "repeat", "(", "[", "1", ",", "y_pred_last", ".", "shape", "[", "1", "]", ",", "1", "]", ")", "\n", "loss", "=", "torch", ".", "pow", "(", "y_gt_last_repeated", "-", "y_pred_last", "[", ":", ",", ":", ",", "0", ":", "2", "]", ",", "2", ")", "\n", "loss", "=", "torch", ".", "sum", "(", "loss", ",", "2", ")", "\n", "loss", "=", "torch", ".", "pow", "(", "loss", ",", "0.5", ")", "+", "masks", "\n", "loss", ",", "ids", "=", "torch", ".", "min", "(", "loss", ",", "1", ")", "\n", "loss", "=", "torch", ".", "mean", "(", "loss", ")", "\n", "if", "all_timestamps", ":", "\n", "        ", "ids", "=", "ids", ".", "repeat", "(", "1", ",", "y_pred", ".", "shape", "[", "2", "]", ",", "y_pred", ".", "shape", "[", "3", "]", ",", "1", ")", "\n", "ids", "=", "ids", ".", "permute", "(", "3", ",", "0", ",", "1", ",", "2", ")", "\n", "y_pred_best", "=", "y_pred", ".", "gather", "(", "1", ",", "ids", ")", "\n", "loss", "=", "torch", ".", "pow", "(", "y_gt", "-", "y_pred_best", "[", ":", ",", ":", ",", ":", ",", "0", ":", "2", "]", ",", "2", ")", "\n", "loss", "=", "torch", ".", "sum", "(", "loss", ",", "3", ")", "\n", "loss", "=", "torch", ".", "pow", "(", "loss", ",", "0.5", ")", "\n", "loss", "=", "torch", ".", "squeeze", "(", "loss", ")", "\n", "loss", "=", "torch", ".", "mean", "(", "loss", ",", "0", ")", "\n", "return", "loss", "\n", "", "else", ":", "\n", "        ", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.nachiket92_P2T.None.utils.sdd_local2global": [[106, 128], ["torch.zeros", "numpy.cos", "numpy.sin", "numpy.cos", "torch.mm().t", "numpy.sin", "torch.mm", "torch.mm().t.t"], "function", ["None"], ["", "", "def", "sdd_local2global", "(", "traj", ",", "ref_pos", ")", ":", "\n", "    ", "\"\"\"\n    Transforms trajectory to global coordinates for SDD\n    \"\"\"", "\n", "\n", "# Flip", "\n", "traj", "=", "traj", "[", ":", ",", "[", "1", ",", "0", "]", "]", "\n", "ref_pos", "=", "ref_pos", "[", "[", "1", ",", "0", ",", "2", "]", "]", "\n", "\n", "# Rotate", "\n", "theta", "=", "ref_pos", "[", "2", "]", "\n", "r_mat", "=", "torch", ".", "zeros", "(", "2", ",", "2", ")", "\n", "r_mat", "[", "0", ",", "0", "]", "=", "np", ".", "cos", "(", "np", ".", "pi", "*", "theta", "/", "180", ")", "\n", "r_mat", "[", "0", ",", "1", "]", "=", "np", ".", "sin", "(", "np", ".", "pi", "*", "theta", "/", "180", ")", "\n", "r_mat", "[", "1", ",", "0", "]", "=", "-", "np", ".", "sin", "(", "np", ".", "pi", "*", "theta", "/", "180", ")", "\n", "r_mat", "[", "1", ",", "1", "]", "=", "np", ".", "cos", "(", "np", ".", "pi", "*", "theta", "/", "180", ")", "\n", "traj", "=", "torch", ".", "mm", "(", "r_mat", ",", "traj", ".", "t", "(", ")", ")", ".", "t", "(", ")", "\n", "\n", "# Translate", "\n", "traj", "=", "traj", "+", "ref_pos", "[", ":", "2", "]", "\n", "\n", "return", "traj", "\n", "\n"]], "home.repos.pwc.inspect_result.nachiket92_P2T.None.utils.offroad_rate": [[130, 184], ["torch.zeros_like", "torch.zeros_like", "range", "torch.zeros", "torch.zeros", "range", "utils.sdd_local2global", "range", "range", "y_gt[].cpu", "ref_pos[].cpu", "utils.sdd_local2global", "range", "torch.ones_like", "torch.tensor", "y_pred[].cpu", "ref_pos[].cpu", "int", "int", "int", "int", "torch.sum", "torch.sum", "y_pred_global[].item", "y_pred_global[].item", "y_gt_global[].item", "y_gt_global[].item"], "function", ["home.repos.pwc.inspect_result.nachiket92_P2T.None.utils.sdd_local2global", "home.repos.pwc.inspect_result.nachiket92_P2T.None.utils.sdd_local2global"], ["", "def", "offroad_rate", "(", "y_pred", ",", "img_lbls", ",", "ref_pos", ",", "ds_ids", ",", "y_gt", ",", "masks", ",", "all_timestamps", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Computes offroad rate for Stanford drone dataset\n\n    Inputs\n    y_pred, y_gt, all_timestamps: Similar to minADE_k and minFDE_k functions\n    img_lbls: path/obstacle labels, binary images from SDD\n    ref_pos: global co-ordinates of agent location at the time of prediction, for each instance in the batch\n    dsIds: scene Ids for each instance in the batch\n\n    Output\n    offroad rate for batch\n    \"\"\"", "\n", "\n", "# Transform to global co-ordinates", "\n", "y_gt_global", "=", "torch", ".", "zeros_like", "(", "y_gt", ")", "\n", "y_pred_global", "=", "torch", ".", "zeros_like", "(", "y_pred", ")", "\n", "for", "k", "in", "range", "(", "y_pred", ".", "shape", "[", "0", "]", ")", ":", "\n", "\n", "# Transform ground_truth", "\n", "        ", "y_gt_global", "[", "k", "]", "=", "sdd_local2global", "(", "y_gt", "[", "k", "]", ".", "cpu", "(", ")", ",", "ref_pos", "[", "k", "]", ".", "cpu", "(", ")", ")", "\n", "\n", "# Transform predictions", "\n", "for", "n", "in", "range", "(", "y_pred", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "y_pred_global", "[", "k", ",", "n", "]", "=", "sdd_local2global", "(", "y_pred", "[", "k", ",", "n", "]", ".", "cpu", "(", ")", ",", "ref_pos", "[", "k", "]", ".", "cpu", "(", ")", ")", "\n", "\n", "# Compute offroad rate", "\n", "", "", "num_path", "=", "torch", ".", "zeros", "(", "y_pred", ".", "shape", "[", "2", "]", ")", "\n", "counts", "=", "torch", ".", "zeros", "(", "y_pred", ".", "shape", "[", "2", "]", ")", "\n", "for", "k", "in", "range", "(", "y_pred", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "lbl_img", "=", "img_lbls", "[", "0", "]", "[", "ds_ids", "[", "k", "]", "-", "1", "]", "\n", "\n", "for", "n", "in", "range", "(", "y_pred", ".", "shape", "[", "1", "]", ")", ":", "\n", "            ", "for", "m", "in", "range", "(", "y_pred", ".", "shape", "[", "2", "]", ")", ":", "\n", "\n", "                ", "row", "=", "int", "(", "y_pred_global", "[", "k", ",", "n", ",", "m", ",", "1", "]", ".", "item", "(", ")", ")", "\n", "col", "=", "int", "(", "y_pred_global", "[", "k", ",", "n", ",", "m", ",", "0", "]", ".", "item", "(", ")", ")", "\n", "row_gt", "=", "int", "(", "y_gt_global", "[", "k", ",", "m", ",", "1", "]", ".", "item", "(", ")", ")", "\n", "col_gt", "=", "int", "(", "y_gt_global", "[", "k", ",", "m", ",", "0", "]", ".", "item", "(", ")", ")", "\n", "\n", "# If mask is 0:", "\n", "if", "masks", "[", "k", ",", "n", "]", "==", "0", ":", "\n", "# If ground truth future location is on a path and within the image boundaries:", "\n", "                    ", "if", "row_gt", "<", "lbl_img", ".", "shape", "[", "0", "]", "and", "col_gt", "<", "lbl_img", ".", "shape", "[", "1", "]", ":", "\n", "                        ", "if", "lbl_img", "[", "row_gt", ",", "col_gt", "]", ":", "\n", "                            ", "counts", "[", "m", "]", "+=", "1", "\n", "# If predicted location is on a path and within image boundaries:", "\n", "if", "row", "<", "lbl_img", ".", "shape", "[", "0", "]", "and", "col", "<", "lbl_img", ".", "shape", "[", "1", "]", ":", "\n", "                                ", "if", "lbl_img", "[", "row", ",", "col", "]", ":", "\n", "                                    ", "num_path", "[", "m", "]", "+=", "1", "\n", "", "", "", "", "", "", "", "", "if", "all_timestamps", ":", "\n", "        ", "return", "torch", ".", "ones_like", "(", "num_path", ")", "-", "num_path", "/", "counts", "\n", "", "else", ":", "\n", "        ", "return", "torch", ".", "tensor", "(", "1", ")", "-", "torch", ".", "sum", "(", "num_path", ")", "/", "torch", ".", "sum", "(", "counts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nachiket92_P2T.None.utils.tb_reward_plots": [[186, 200], ["matplotlib.subplots", "range", "ax[].imshow", "ax[].imshow", "ax[].imshow", "ax[].imshow", "ax[].imshow", "ax[].imshow", "ax[].imshow", "img_vis[].permute"], "function", ["None"], ["", "", "def", "tb_reward_plots", "(", "img_vis", ",", "r", ",", "svf", ",", "svf_e", ")", ":", "\n", "    ", "\"\"\"\n    Returns matplotlib figure showing rewards and SVFs for visualizing reward model training progress\n    \"\"\"", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "r", ".", "shape", "[", "0", "]", ",", "7", ",", "figsize", "=", "(", "15", ",", "15", ")", ")", "\n", "for", "i", "in", "range", "(", "r", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "ax", "[", "i", ",", "0", "]", ".", "imshow", "(", "img_vis", "[", "i", "]", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "ax", "[", "i", ",", "1", "]", ".", "imshow", "(", "r", "[", "i", ",", "0", "]", ",", "cmap", "=", "'viridis'", ")", "\n", "ax", "[", "i", ",", "2", "]", ".", "imshow", "(", "r", "[", "i", ",", "1", "]", ",", "cmap", "=", "'viridis'", ")", "\n", "ax", "[", "i", ",", "3", "]", ".", "imshow", "(", "svf", "[", "i", ",", "0", "]", ",", "cmap", "=", "'viridis'", ")", "\n", "ax", "[", "i", ",", "4", "]", ".", "imshow", "(", "svf", "[", "i", ",", "1", "]", ",", "cmap", "=", "'viridis'", ")", "\n", "ax", "[", "i", ",", "5", "]", ".", "imshow", "(", "svf_e", "[", "i", ",", "0", "]", ",", "cmap", "=", "'viridis'", ")", "\n", "ax", "[", "i", ",", "6", "]", ".", "imshow", "(", "svf_e", "[", "i", ",", "1", "]", ",", "cmap", "=", "'viridis'", ")", "\n", "", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.nachiket92_P2T.None.utils.tb_traj_pt_plots": [[202, 218], ["matplotlib.subplots", "range", "ax[].imshow", "ax[].plot", "ax[].plot", "ax[].plot", "ax[].imshow", "img_vis[].permute"], "function", ["None"], ["", "def", "tb_traj_pt_plots", "(", "img_vis", ",", "hist", ",", "traj", ",", "fut", ",", "svf_e", ",", "extent", ")", ":", "\n", "    ", "\"\"\"\n    Returns matplotlib figure showing trajectory conditioned on ground truth plan.\n    Helps visualize pre-training progress for trajectory generator\n    \"\"\"", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "2", ",", "img_vis", ".", "shape", "[", "0", "]", ",", "figsize", "=", "(", "16", ",", "5", ")", ")", "\n", "for", "i", "in", "range", "(", "img_vis", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "ax", "[", "0", ",", "i", "]", ".", "imshow", "(", "img_vis", "[", "i", "]", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ",", "extent", "=", "extent", ")", "\n", "ax", "[", "0", ",", "i", "]", ".", "plot", "(", "traj", "[", "i", ",", ":", ",", "0", "]", ",", "traj", "[", "i", ",", ":", ",", "1", "]", ",", "color", "=", "'r'", ",", "lw", "=", "0.5", ",", "marker", "=", "'o'", ",", "\n", "markeredgecolor", "=", "'r'", ",", "markersize", "=", "2", ",", "alpha", "=", "0.8", ")", "\n", "ax", "[", "0", ",", "i", "]", ".", "plot", "(", "fut", "[", "i", ",", ":", ",", "0", "]", ",", "fut", "[", "i", ",", ":", ",", "1", "]", ",", "color", "=", "'k'", ",", "lw", "=", "0.5", ",", "marker", "=", "'o'", ",", "\n", "markeredgecolor", "=", "'k'", ",", "markersize", "=", "2", ",", "alpha", "=", "1", ")", "\n", "ax", "[", "0", ",", "i", "]", ".", "plot", "(", "hist", "[", "i", ",", ":", ",", "0", "]", ",", "hist", "[", "i", ",", ":", ",", "1", "]", ",", "color", "=", "'k'", ",", "lw", "=", "0.5", ",", "marker", "=", "'s'", ",", "\n", "markeredgecolor", "=", "'k'", ",", "markersize", "=", "2", ",", "alpha", "=", "1", ")", "\n", "ax", "[", "1", ",", "i", "]", ".", "imshow", "(", "svf_e", "[", "i", ",", "0", "]", ",", "cmap", "=", "'viridis'", ",", "extent", "=", "extent", ")", "\n", "", "return", "fig", "\n", "\n"]], "home.repos.pwc.inspect_result.nachiket92_P2T.None.utils.tb_traj_ft_plots": [[220, 238], ["matplotlib.subplots", "range", "ax[].imshow", "ax[].plot", "ax[].plot", "range", "ax[].imshow", "ax[].imshow", "img_vis[].permute", "torch.sum().item", "ax[].plot", "torch.sum"], "function", ["None"], ["", "def", "tb_traj_ft_plots", "(", "img_vis", ",", "hist", ",", "traj", ",", "fut", ",", "svf", ",", "counts", ",", "extent", ")", ":", "\n", "    ", "\"\"\"\n    Returns matplotlib figure showing trajectories conditioned on sampled plans along with SVFs for maxEnt policy.\n    Helps visualize fine-tuning progress for trajectory generator\n    \"\"\"", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "3", ",", "img_vis", ".", "shape", "[", "0", "]", ",", "figsize", "=", "(", "16", ",", "5", ")", ")", "\n", "for", "i", "in", "range", "(", "img_vis", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "ax", "[", "0", ",", "i", "]", ".", "imshow", "(", "img_vis", "[", "i", "]", ".", "permute", "(", "1", ",", "2", ",", "0", ")", ",", "extent", "=", "extent", ")", "\n", "ax", "[", "0", ",", "i", "]", ".", "plot", "(", "fut", "[", "i", ",", ":", ",", "0", "]", ",", "fut", "[", "i", ",", ":", ",", "1", "]", ",", "color", "=", "'k'", ",", "lw", "=", "0.5", ",", "marker", "=", "'o'", ",", "\n", "markeredgecolor", "=", "'k'", ",", "markersize", "=", "2", ",", "alpha", "=", "1", ")", "\n", "ax", "[", "0", ",", "i", "]", ".", "plot", "(", "hist", "[", "i", ",", ":", ",", "0", "]", ",", "hist", "[", "i", ",", ":", ",", "1", "]", ",", "color", "=", "'k'", ",", "lw", "=", "0.5", ",", "marker", "=", "'s'", ",", "\n", "markeredgecolor", "=", "'k'", ",", "markersize", "=", "2", ",", "alpha", "=", "1", ")", "\n", "for", "n", "in", "range", "(", "torch", ".", "sum", "(", "counts", "[", "i", "]", "!=", "0", ")", ".", "item", "(", ")", ")", ":", "\n", "            ", "ax", "[", "0", ",", "i", "]", ".", "plot", "(", "traj", "[", "i", ",", "n", ",", ":", ",", "0", "]", ",", "traj", "[", "i", ",", "n", ",", ":", ",", "1", "]", ",", "color", "=", "'r'", ",", "lw", "=", "0.5", ",", "marker", "=", "'o'", ",", "\n", "markeredgecolor", "=", "'r'", ",", "markersize", "=", "2", ",", "alpha", "=", "0.8", ")", "\n", "", "ax", "[", "1", ",", "i", "]", ".", "imshow", "(", "svf", "[", "i", ",", "0", "]", ",", "cmap", "=", "'viridis'", ",", "extent", "=", "extent", ")", "\n", "ax", "[", "2", ",", "i", "]", ".", "imshow", "(", "svf", "[", "i", ",", "1", "]", ",", "cmap", "=", "'viridis'", ",", "extent", "=", "extent", ")", "\n", "", "return", "fig", "\n", "", ""]], "home.repos.pwc.inspect_result.nachiket92_P2T.datasets.sdd.SDD.__init__": [[15, 30], ["int", "int", "scipy.loadmat", "scipy.loadmat", "scipy.loadmat"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataroot", ",", "mat_file", ",", "t_h", "=", "84", ",", "t_f", "=", "144", ",", "grid_dim", "=", "25", ",", "img_size", "=", "200", ",", "horizon", "=", "40", ",", "\n", "grid_extent", "=", "(", "-", "500", ",", "500", ",", "-", "200", ",", "800", ")", ",", "num_actions", "=", "4", ")", ":", "\n", "        ", "self", ".", "D", "=", "scp", ".", "loadmat", "(", "dataroot", "+", "'/'", "+", "mat_file", ")", "[", "'D'", "]", "\n", "self", ".", "T", "=", "scp", ".", "loadmat", "(", "dataroot", "+", "'/'", "+", "mat_file", ")", "[", "'tracks'", "]", "\n", "self", ".", "imgs", "=", "scp", ".", "loadmat", "(", "dataroot", "+", "'/'", "+", "mat_file", ")", "[", "'imgs'", "]", "\n", "self", ".", "t_h", "=", "int", "(", "t_h", "*", "30", ")", "# length of track history", "\n", "self", ".", "t_f", "=", "int", "(", "t_f", "*", "30", ")", "# length of predicted trajectory", "\n", "self", ".", "traj_d_s", "=", "12", "# down sampling rate of sequences for trajectories (SDD raw data is 30 Hz,", "\n", "#  but prior work uses 2.5 Hz)", "\n", "self", ".", "grid_dim", "=", "grid_dim", "# grid dimensions", "\n", "self", ".", "img_size", "=", "img_size", "# size of image mapped to grid (images are downsampled by a factor of 5,", "\n", "#  so crop size is img_size x 5)", "\n", "self", ".", "horizon", "=", "horizon", "# MDP horizon", "\n", "self", ".", "grid_extent", "=", "grid_extent", "# The extent of the cropped scene around the agent (l, r, d, u)", "\n", "self", ".", "num_actions", "=", "num_actions", "# number of actions in MDP (4 or 8)", "\n", "\n"]], "home.repos.pwc.inspect_result.nachiket92_P2T.datasets.sdd.SDD.__len__": [[31, 33], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "D", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nachiket92_P2T.datasets.sdd.SDD.__getitem__": [[34, 101], ["sdd.SDD.D[].astype", "sdd.SDD.D[].astype", "sdd.SDD.get_history", "torch.from_numpy", "torch.from_numpy", "sdd.SDD.get_future", "sdd.SDD.get_future", "torch.from_numpy", "sdd.SDD.get_img", "normalize_imagenet", "torch.zeros", "sdd.SDD.get_expert_waypoints", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "sdd.SDD.get_motion_feats", "torch.from_numpy", "sdd.SDD.get_bc_targets", "torch.from_numpy", "torchvision.ToTensor", "torchvision.ToTensor"], "methods", ["home.repos.pwc.inspect_result.nachiket92_P2T.datasets.sdd.SDD.get_history", "home.repos.pwc.inspect_result.nachiket92_P2T.datasets.sdd.SDD.get_future", "home.repos.pwc.inspect_result.nachiket92_P2T.datasets.sdd.SDD.get_future", "home.repos.pwc.inspect_result.nachiket92_P2T.datasets.sdd.SDD.get_img", "home.repos.pwc.inspect_result.nachiket92_P2T.datasets.ns.NS.get_expert_waypoints", "home.repos.pwc.inspect_result.nachiket92_P2T.datasets.ns.NS.get_motion_feats", "home.repos.pwc.inspect_result.nachiket92_P2T.datasets.ns.NS.get_bc_targets"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        Outputs returned for each prediction instance:\n        hist: snippet of track history\n        fut: ground truth future trajectory\n        img: Imagenet normalized bird's eye view map around the target vehicle\n        svf_e: Goal and path state visitation frequencies for expert demonstration, ie. path from train set\n        motion_feats: motion and position features used for reward model\n        waypts_e: (x,y) BEV co-ordinates corresponding to grid cells of svf_e\n        agents: tensor of surrounding agent states populated in grid around target agent\n        grid_idcs: grid co-ordinates of svf_e\n        bc_targets: ground truth actions for training behavior cloning model\n        img_vis: Raw image (unnormalized) for visualization\n        ref_pos: global coordinates of agent's current location (helpful for computing offroad rate)\n        ds_id: SDD scene id (helpful for computing offroad rate)\n        idx: instance id (mainly for debugging)\n        \"\"\"", "\n", "\n", "# Dataset (scene) id", "\n", "ds_id", "=", "self", ".", "D", "[", "idx", ",", "0", "]", ".", "astype", "(", "int", ")", "\n", "\n", "# Track id", "\n", "t_id", "=", "self", ".", "D", "[", "idx", ",", "1", "]", ".", "astype", "(", "int", ")", "\n", "\n", "# Frame number", "\n", "frame", "=", "self", ".", "D", "[", "idx", ",", "2", "]", "\n", "\n", "# Orientation of agent (based on instantaneous velocity)", "\n", "theta", "=", "self", ".", "D", "[", "idx", ",", "4", "]", "\n", "\n", "# Trajectory history", "\n", "hist", ",", "ref_pos", "=", "self", ".", "get_history", "(", "t_id", ",", "frame", ",", "ds_id", ",", "-", "theta", ")", "\n", "hist", "=", "torch", ".", "from_numpy", "(", "hist", ")", "\n", "ref_pos", "=", "torch", ".", "from_numpy", "(", "ref_pos", ")", "\n", "\n", "# True future trajectory", "\n", "fut_indefinite", "=", "self", ".", "get_future", "(", "t_id", ",", "frame", ",", "ds_id", ",", "-", "theta", ",", "fixed_horizon", "=", "False", ")", "\n", "fut_definite", "=", "self", ".", "get_future", "(", "t_id", ",", "frame", ",", "ds_id", ",", "-", "theta", ",", "fixed_horizon", "=", "True", ")", "\n", "fut_definite", "=", "fut_definite", "[", "1", ":", ",", ":", "]", "\n", "fut", "=", "torch", ".", "from_numpy", "(", "fut_definite", ")", "\n", "\n", "# Cropped image around current position", "\n", "imgret", "=", "self", ".", "get_img", "(", "t_id", ",", "frame", ",", "ds_id", ",", "90", "-", "theta", ")", "\n", "img_vis", "=", "tsfm", ".", "ToTensor", "(", ")", "(", "imgret", ")", "# Raw image for visualization of results", "\n", "img", "=", "tsfm", ".", "ToTensor", "(", ")", "(", "imgret", ")", "\n", "img", "=", "normalize_imagenet", "(", "img", ")", "# Imagenet normalized image, used for training", "\n", "\n", "# surrounding agent states", "\n", "agents", "=", "torch", ".", "zeros", "(", "3", ",", "self", ".", "grid_dim", ",", "self", ".", "grid_dim", ")", "\n", "# TODO", "\n", "\n", "# get expert SVF:", "\n", "svf_e", ",", "waypts_e", ",", "grid_idcs", "=", "self", ".", "get_expert_waypoints", "(", "fut_indefinite", ")", "\n", "svf_e", "=", "torch", ".", "from_numpy", "(", "svf_e", ")", "\n", "waypts_e", "=", "torch", ".", "from_numpy", "(", "waypts_e", ")", "\n", "grid_idcs", "=", "torch", ".", "from_numpy", "(", "grid_idcs", ")", "\n", "\n", "# get motion and position feats:", "\n", "motion_feats", "=", "self", ".", "get_motion_feats", "(", "hist", ")", "\n", "motion_feats", "=", "torch", ".", "from_numpy", "(", "motion_feats", ")", "\n", "\n", "# Targets for behavior cloning model:", "\n", "bc_targets", "=", "self", ".", "get_bc_targets", "(", "fut_indefinite", ",", "self", ".", "num_actions", ")", "\n", "bc_targets", "=", "torch", ".", "from_numpy", "(", "bc_targets", ")", "\n", "\n", "return", "hist", ",", "fut", ",", "img", ",", "svf_e", ",", "motion_feats", ",", "waypts_e", ",", "agents", ",", "grid_idcs", ",", "bc_targets", ",", "img_vis", ",", "ref_pos", ",", "ds_id", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.nachiket92_P2T.datasets.sdd.SDD.get_future": [[102, 122], ["numpy.argwhere().item", "numpy.empty", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.matmul().transpose", "numpy.sin", "numpy.argwhere", "numpy.matmul", "numpy.argwhere().item", "numpy.matmul().transpose.transpose", "numpy.where", "numpy.argwhere"], "methods", ["None"], ["", "def", "get_future", "(", "self", ",", "t_id", ",", "t", ",", "ds_id", ",", "theta", ",", "fixed_horizon", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        helper function to get future trajectory:\n        \"\"\"", "\n", "track", "=", "self", ".", "T", "[", "ds_id", "-", "1", "]", "[", "t_id", "]", "\n", "ref_pos", "=", "track", "[", "np", ".", "where", "(", "track", "[", ":", ",", "0", "]", "==", "t", ")", "]", "[", "0", "]", "[", "1", ":", "3", "]", "\n", "stpt", "=", "np", ".", "argwhere", "(", "track", "[", ":", ",", "0", "]", "==", "t", ")", ".", "item", "(", ")", "\n", "if", "fixed_horizon", ":", "\n", "            ", "enpt", "=", "np", ".", "argwhere", "(", "track", "[", ":", ",", "0", "]", "==", "t", ")", ".", "item", "(", ")", "+", "self", ".", "t_f", "+", "1", "\n", "fut", "=", "track", "[", "stpt", ":", "enpt", ":", "self", ".", "traj_d_s", ",", "1", ":", "3", "]", "-", "ref_pos", "\n", "", "else", ":", "\n", "            ", "fut", "=", "track", "[", "stpt", ":", ",", "1", ":", "3", "]", "-", "ref_pos", "\n", "", "r_mat", "=", "np", ".", "empty", "(", "[", "2", ",", "2", "]", ")", "\n", "r_mat", "[", "0", ",", "0", "]", "=", "np", ".", "cos", "(", "np", ".", "pi", "*", "theta", "/", "180", ")", "\n", "r_mat", "[", "0", ",", "1", "]", "=", "np", ".", "sin", "(", "np", ".", "pi", "*", "theta", "/", "180", ")", "\n", "r_mat", "[", "1", ",", "0", "]", "=", "-", "np", ".", "sin", "(", "np", ".", "pi", "*", "theta", "/", "180", ")", "\n", "r_mat", "[", "1", ",", "1", "]", "=", "np", ".", "cos", "(", "np", ".", "pi", "*", "theta", "/", "180", ")", "\n", "fut", "=", "np", ".", "matmul", "(", "r_mat", ",", "fut", ".", "transpose", "(", ")", ")", ".", "transpose", "(", ")", "\n", "fut", "=", "fut", "[", ":", ",", "[", "1", ",", "0", "]", "]", "\n", "return", "fut", "\n", "\n"]], "home.repos.pwc.inspect_result.nachiket92_P2T.datasets.sdd.SDD.get_history": [[123, 142], ["numpy.empty", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.matmul().transpose", "numpy.append", "numpy.argwhere().item", "numpy.argwhere().item", "numpy.sin", "numpy.matmul", "numpy.argwhere", "numpy.argwhere", "numpy.matmul().transpose.transpose", "numpy.where"], "methods", ["None"], ["", "def", "get_history", "(", "self", ",", "t_id", ",", "t", ",", "ds_id", ",", "theta", ")", ":", "\n", "        ", "\"\"\"\n        helper function to get track history:\n        \"\"\"", "\n", "track", "=", "self", ".", "T", "[", "ds_id", "-", "1", "]", "[", "t_id", "]", "\n", "ref_pos", "=", "track", "[", "np", ".", "where", "(", "track", "[", ":", ",", "0", "]", "==", "t", ")", "]", "[", "0", "]", "[", "1", ":", "3", "]", "\n", "stpt", "=", "np", ".", "argwhere", "(", "track", "[", ":", ",", "0", "]", "==", "t", ")", ".", "item", "(", ")", "-", "self", ".", "t_h", "\n", "enpt", "=", "np", ".", "argwhere", "(", "track", "[", ":", ",", "0", "]", "==", "t", ")", ".", "item", "(", ")", "+", "1", "\n", "hist", "=", "track", "[", "stpt", ":", "enpt", ":", "self", ".", "traj_d_s", ",", "1", ":", "3", "]", "-", "ref_pos", "\n", "r_mat", "=", "np", ".", "empty", "(", "[", "2", ",", "2", "]", ")", "\n", "r_mat", "[", "0", ",", "0", "]", "=", "np", ".", "cos", "(", "np", ".", "pi", "*", "theta", "/", "180", ")", "\n", "r_mat", "[", "0", ",", "1", "]", "=", "np", ".", "sin", "(", "np", ".", "pi", "*", "theta", "/", "180", ")", "\n", "r_mat", "[", "1", ",", "0", "]", "=", "-", "np", ".", "sin", "(", "np", ".", "pi", "*", "theta", "/", "180", ")", "\n", "r_mat", "[", "1", ",", "1", "]", "=", "np", ".", "cos", "(", "np", ".", "pi", "*", "theta", "/", "180", ")", "\n", "hist", "=", "np", ".", "matmul", "(", "r_mat", ",", "hist", ".", "transpose", "(", ")", ")", ".", "transpose", "(", ")", "\n", "hist", "=", "hist", "[", ":", ",", "[", "1", ",", "0", "]", "]", "\n", "ref_pos", "=", "ref_pos", "[", "[", "1", ",", "0", "]", "]", "\n", "ref_pos", "=", "np", ".", "append", "(", "ref_pos", ",", "-", "theta", ")", "\n", "return", "hist", ",", "ref_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.nachiket92_P2T.datasets.sdd.SDD.get_img": [[143, 180], ["PIL.Image.fromarray", "int", "PIL.ImageOps.expand", "PIL.ImageOps.expand.rotate", "numpy.empty", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.empty", "numpy.matmul", "int", "int", "ImageOps.expand.rotate.crop", "numpy.sin", "numpy.where"], "methods", ["None"], ["", "def", "get_img", "(", "self", ",", "t_id", ",", "t", ",", "ds_id", ",", "theta", ")", ":", "\n", "        ", "\"\"\"\n        helper function to get cropped scene around agent being predicted\n        \"\"\"", "\n", "img", "=", "Image", ".", "fromarray", "(", "self", ".", "imgs", "[", "0", "]", "[", "ds_id", "-", "1", "]", ")", "\n", "padsize", "=", "int", "(", "self", ".", "img_size", ")", "\n", "img_expanded", "=", "ImageOps", ".", "expand", "(", "img", ",", "(", "padsize", ",", "padsize", ",", "padsize", ",", "padsize", ")", ")", "\n", "img_rotated", "=", "img_expanded", ".", "rotate", "(", "theta", ",", "expand", "=", "1", ")", "\n", "track", "=", "self", ".", "T", "[", "ds_id", "-", "1", "]", "[", "t_id", "]", "\n", "ref_pos", "=", "track", "[", "np", ".", "where", "(", "track", "[", ":", ",", "0", "]", "==", "t", ")", "]", "[", "0", "]", "[", "1", ":", "3", "]", "\n", "x0", "=", "ref_pos", "[", "0", "]", "/", "5", "\n", "y0", "=", "ref_pos", "[", "1", "]", "/", "5", "\n", "cx", "=", "img", ".", "size", "[", "0", "]", "/", "2", "\n", "cy", "=", "img", ".", "size", "[", "1", "]", "/", "2", "\n", "x1", "=", "x0", "-", "cx", "\n", "y1", "=", "y0", "-", "cy", "\n", "r_mat", "=", "np", ".", "empty", "(", "[", "2", ",", "2", "]", ")", "\n", "r_mat", "[", "0", ",", "0", "]", "=", "np", ".", "cos", "(", "np", ".", "pi", "*", "theta", "/", "180", ")", "\n", "r_mat", "[", "0", ",", "1", "]", "=", "np", ".", "sin", "(", "np", ".", "pi", "*", "theta", "/", "180", ")", "\n", "r_mat", "[", "1", ",", "0", "]", "=", "-", "np", ".", "sin", "(", "np", ".", "pi", "*", "theta", "/", "180", ")", "\n", "r_mat", "[", "1", ",", "1", "]", "=", "np", ".", "cos", "(", "np", ".", "pi", "*", "theta", "/", "180", ")", "\n", "x_1", "=", "np", ".", "empty", "(", "[", "2", ",", "1", "]", ")", "\n", "x_1", "[", "0", "]", "=", "x1", "\n", "x_1", "[", "1", "]", "=", "y1", "\n", "x_2", "=", "np", ".", "matmul", "(", "r_mat", ",", "x_1", ")", "\n", "x2", "=", "x_2", "[", "0", "]", "\n", "y2", "=", "x_2", "[", "1", "]", "\n", "cex", "=", "img_rotated", ".", "size", "[", "0", "]", "/", "2", "\n", "cey", "=", "img_rotated", ".", "size", "[", "1", "]", "/", "2", "\n", "x3", "=", "cex", "+", "x2", "\n", "y3", "=", "cey", "+", "y2", "\n", "x3", "=", "int", "(", "x3", ")", "\n", "y3", "=", "int", "(", "y3", ")", "\n", "img_cropped", "=", "img_rotated", ".", "crop", "(", "\n", "(", "x3", "-", "self", ".", "img_size", "/", "2", ",", "y3", "-", "self", ".", "img_size", "/", "2", ",", "x3", "+", "self", ".", "img_size", "/", "2", ",", "\n", "y3", "+", "self", ".", "img_size", "/", "2", ")", ")", "\n", "return", "img_cropped", "\n", "\n"]], "home.repos.pwc.inspect_result.nachiket92_P2T.datasets.sdd.SDD.get_expert_waypoints": [[181, 224], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.linspace", "numpy.linspace", "range", "numpy.argmin", "numpy.argmin", "numpy.absolute", "numpy.absolute", "row_prev.astype", "column_prev.astype", "numpy.argmin.astype", "numpy.argmin.astype"], "methods", ["None"], ["", "def", "get_expert_waypoints", "(", "self", ",", "fut", ")", ":", "\n", "        ", "\"\"\"\n        Helper function to get the expert's state visitation frequencies based on their trajectory\n        \"\"\"", "\n", "grid_extent", "=", "self", ".", "grid_extent", "\n", "svf_e", "=", "np", ".", "zeros", "(", "(", "2", ",", "self", ".", "grid_dim", ",", "self", ".", "grid_dim", ")", ")", "\n", "waypts_e", "=", "np", ".", "zeros", "(", "(", "self", ".", "horizon", ",", "2", ")", ")", "\n", "grid_idcs", "=", "np", ".", "zeros", "(", "(", "self", ".", "horizon", ",", "2", ")", ")", "\n", "count", "=", "0", "\n", "row_prev", "=", "np", ".", "nan", "\n", "column_prev", "=", "np", ".", "nan", "\n", "grid_size", "=", "grid_extent", "[", "1", "]", "-", "grid_extent", "[", "0", "]", "\n", "row_centers", "=", "np", ".", "linspace", "(", "grid_extent", "[", "3", "]", "-", "grid_size", "/", "(", "self", ".", "grid_dim", "*", "2", ")", ",", "grid_extent", "[", "2", "]", "+", "\n", "grid_size", "/", "(", "self", ".", "grid_dim", "*", "2", ")", ",", "self", ".", "grid_dim", ")", "\n", "col_centers", "=", "np", ".", "linspace", "(", "grid_extent", "[", "0", "]", "+", "grid_size", "/", "(", "self", ".", "grid_dim", "*", "2", ")", ",", "grid_extent", "[", "1", "]", "-", "\n", "grid_size", "/", "(", "self", ".", "grid_dim", "*", "2", ")", ",", "self", ".", "grid_dim", ")", "\n", "\n", "for", "k", "in", "range", "(", "fut", ".", "shape", "[", "0", "]", ")", ":", "\n", "# Convert trajectory (x,y) co-ordinates to grid locations:", "\n", "            ", "column", "=", "np", ".", "argmin", "(", "np", ".", "absolute", "(", "fut", "[", "k", ",", "0", "]", "-", "col_centers", ")", ")", "\n", "row", "=", "np", ".", "argmin", "(", "np", ".", "absolute", "(", "fut", "[", "k", ",", "1", "]", "-", "row_centers", ")", ")", "\n", "# Demonstration ends when expert leaves the image crop corresponding to the grid:", "\n", "if", "grid_extent", "[", "0", "]", "<=", "fut", "[", "k", ",", "0", "]", "<=", "grid_extent", "[", "1", "]", "and", "grid_extent", "[", "2", "]", "<=", "fut", "[", "k", ",", "1", "]", "<=", "grid_extent", "[", "3", "]", ":", "\n", "# Check if cell location has changed", "\n", "                ", "if", "row", "!=", "row_prev", "or", "column", "!=", "column_prev", ":", "\n", "# Add cell location to path states of expert", "\n", "                    ", "svf_e", "[", "0", ",", "row", ".", "astype", "(", "int", ")", ",", "column", ".", "astype", "(", "int", ")", "]", "=", "1", "\n", "if", "count", "<", "self", ".", "horizon", ":", "\n", "# Get BEV coordinates corresponding to cell locations", "\n", "                        ", "waypts_e", "[", "count", ",", "0", "]", "=", "row_centers", "[", "row", "]", "\n", "waypts_e", "[", "count", ",", "1", "]", "=", "col_centers", "[", "column", "]", "\n", "grid_idcs", "[", "count", ",", "0", "]", "=", "row", "\n", "grid_idcs", "[", "count", ",", "1", "]", "=", "column", "\n", "count", "+=", "1", "\n", "", "", "", "else", ":", "\n", "                ", "break", "\n", "", "column_prev", "=", "column", "\n", "row_prev", "=", "row", "\n", "\n", "# Last cell location where demonstration terminates is the goal state:", "\n", "", "svf_e", "[", "1", ",", "row_prev", ".", "astype", "(", "int", ")", ",", "column_prev", ".", "astype", "(", "int", ")", "]", "=", "1", "\n", "return", "svf_e", ",", "waypts_e", ",", "grid_idcs", "\n", "\n"]], "home.repos.pwc.inspect_result.nachiket92_P2T.datasets.sdd.SDD.get_motion_feats": [[225, 242], ["numpy.zeros", "numpy.linspace().reshape().repeat", "numpy.linspace().reshape().repeat().transpose", "numpy.linspace().reshape", "numpy.linspace().reshape().repeat", "numpy.linspace", "numpy.linspace().reshape", "numpy.linspace"], "methods", ["None"], ["", "def", "get_motion_feats", "(", "self", ",", "hist", ")", ":", "\n", "        ", "\"\"\"\n        Helper function to get motion and position features over grid for reward model\n        \"\"\"", "\n", "grid_extent", "=", "self", ".", "grid_extent", "\n", "feats", "=", "np", ".", "zeros", "(", "(", "3", ",", "self", ".", "grid_dim", ",", "self", ".", "grid_dim", ")", ")", "\n", "grid_size", "=", "grid_extent", "[", "1", "]", "-", "grid_extent", "[", "0", "]", "\n", "y", "=", "(", "np", ".", "linspace", "(", "grid_extent", "[", "3", "]", "-", "grid_size", "/", "(", "self", ".", "grid_dim", "*", "2", ")", ",", "grid_extent", "[", "2", "]", "+", "\n", "grid_size", "/", "(", "self", ".", "grid_dim", "*", "2", ")", ",", "self", ".", "grid_dim", ")", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "self", ".", "grid_dim", ",", "axis", "=", "1", ")", "\n", "x", "=", "(", "np", ".", "linspace", "(", "grid_extent", "[", "0", "]", "+", "grid_size", "/", "(", "self", ".", "grid_dim", "*", "2", ")", ",", "grid_extent", "[", "1", "]", "-", "\n", "grid_size", "/", "(", "self", ".", "grid_dim", "*", "2", ")", ",", "self", ".", "grid_dim", ")", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "self", ".", "grid_dim", ",", "\n", "axis", "=", "1", ")", ".", "transpose", "(", ")", "\n", "feats", "[", "0", "]", "=", "(", "(", "hist", "[", "-", "1", ",", "0", "]", "-", "hist", "[", "-", "2", ",", "0", "]", ")", "**", "2", "+", "(", "hist", "[", "-", "1", ",", "1", "]", "-", "hist", "[", "-", "2", ",", "1", "]", ")", "**", "2", ")", "**", "0.5", "\n", "feats", "[", "1", "]", "=", "x", "/", "grid_size", "\n", "feats", "[", "2", "]", "=", "y", "/", "grid_size", "\n", "\n", "return", "feats", "\n", "\n"]], "home.repos.pwc.inspect_result.nachiket92_P2T.datasets.sdd.SDD.get_bc_targets": [[243, 305], ["numpy.zeros", "numpy.linspace", "numpy.linspace", "numpy.argmin", "numpy.argmin", "range", "numpy.absolute", "numpy.absolute", "numpy.argmin", "numpy.argmin", "numpy.absolute", "numpy.absolute", "numpy.arctan2", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int"], "methods", ["None"], ["", "def", "get_bc_targets", "(", "self", ",", "fut", ",", "num_actions", ")", ":", "\n", "        ", "\"\"\"\n        Helper function to get targets for behavior cloning model\n        \"\"\"", "\n", "grid_extent", "=", "self", ".", "grid_extent", "\n", "bc_targets", "=", "np", ".", "zeros", "(", "(", "num_actions", "+", "1", ",", "self", ".", "grid_dim", ",", "self", ".", "grid_dim", ")", ")", "\n", "grid_size", "=", "grid_extent", "[", "1", "]", "-", "grid_extent", "[", "0", "]", "\n", "row_centers", "=", "np", ".", "linspace", "(", "grid_extent", "[", "3", "]", "-", "grid_size", "/", "(", "self", ".", "grid_dim", "*", "2", ")", ",", "grid_extent", "[", "2", "]", "+", "\n", "grid_size", "/", "(", "self", ".", "grid_dim", "*", "2", ")", ",", "self", ".", "grid_dim", ")", "\n", "col_centers", "=", "np", ".", "linspace", "(", "grid_extent", "[", "0", "]", "+", "grid_size", "/", "(", "self", ".", "grid_dim", "*", "2", ")", ",", "grid_extent", "[", "1", "]", "-", "\n", "grid_size", "/", "(", "self", ".", "grid_dim", "*", "2", ")", ",", "self", ".", "grid_dim", ")", "\n", "row_prev", "=", "np", ".", "argmin", "(", "np", ".", "absolute", "(", "fut", "[", "0", ",", "1", "]", "-", "row_centers", ")", ")", "\n", "column_prev", "=", "np", ".", "argmin", "(", "np", ".", "absolute", "(", "fut", "[", "0", ",", "0", "]", "-", "col_centers", ")", ")", "\n", "\n", "for", "k", "in", "range", "(", "fut", ".", "shape", "[", "0", "]", ")", ":", "\n", "# Convert trajectory (x,y) co-ordinates to grid locations:", "\n", "            ", "column", "=", "np", ".", "argmin", "(", "np", ".", "absolute", "(", "fut", "[", "k", ",", "0", "]", "-", "col_centers", ")", ")", "\n", "row", "=", "np", ".", "argmin", "(", "np", ".", "absolute", "(", "fut", "[", "k", ",", "1", "]", "-", "row_centers", ")", ")", "\n", "# Demonstration ends when expert leaves the image crop corresponding to the grid:", "\n", "if", "grid_extent", "[", "0", "]", "<=", "fut", "[", "k", ",", "0", "]", "<=", "grid_extent", "[", "1", "]", "and", "grid_extent", "[", "2", "]", "<=", "fut", "[", "k", ",", "1", "]", "<=", "grid_extent", "[", "3", "]", ":", "\n", "# Check if cell location has changed", "\n", "                ", "if", "row", "!=", "row_prev", "or", "column", "!=", "column_prev", ":", "\n", "                    ", "bc_targets", "[", ":", ",", "int", "(", "row_prev", ")", ",", "int", "(", "column_prev", ")", "]", "=", "0", "\n", "d_x", "=", "column", "-", "column_prev", "\n", "d_y", "=", "row", "-", "row_prev", "\n", "theta", "=", "np", ".", "arctan2", "(", "d_y", ",", "d_x", ")", "\n", "# Assign ground truth actions for expert demonstration", "\n", "if", "num_actions", "==", "4", ":", "# [D,R,U,L,end]", "\n", "                        ", "if", "np", ".", "pi", "/", "4", "<=", "theta", "<", "3", "*", "np", ".", "pi", "/", "4", ":", "\n", "                            ", "bc_targets", "[", "0", ",", "int", "(", "row_prev", ")", ",", "int", "(", "column_prev", ")", "]", "=", "1", "\n", "", "elif", "-", "np", ".", "pi", "/", "4", "<=", "theta", "<", "np", ".", "pi", "/", "4", ":", "\n", "                            ", "bc_targets", "[", "1", ",", "int", "(", "row_prev", ")", ",", "int", "(", "column_prev", ")", "]", "=", "1", "\n", "", "elif", "-", "3", "*", "np", ".", "pi", "/", "4", "<=", "theta", "<", "-", "np", ".", "pi", "/", "4", ":", "\n", "                            ", "bc_targets", "[", "2", ",", "int", "(", "row_prev", ")", ",", "int", "(", "column_prev", ")", "]", "=", "1", "\n", "", "else", ":", "\n", "                            ", "bc_targets", "[", "3", ",", "int", "(", "row_prev", ")", ",", "int", "(", "column_prev", ")", "]", "=", "1", "\n", "", "", "else", ":", "# [D, R, U, L, DR, UR, DL, UL, end]", "\n", "                        ", "if", "3", "*", "np", ".", "pi", "/", "8", "<=", "theta", "<", "5", "*", "np", ".", "pi", "/", "8", ":", "\n", "                            ", "bc_targets", "[", "0", ",", "int", "(", "row_prev", ")", ",", "int", "(", "column_prev", ")", "]", "=", "1", "\n", "", "elif", "-", "np", ".", "pi", "/", "8", "<=", "theta", "<", "np", ".", "pi", "/", "8", ":", "\n", "                            ", "bc_targets", "[", "1", ",", "int", "(", "row_prev", ")", ",", "int", "(", "column_prev", ")", "]", "=", "1", "\n", "", "elif", "-", "5", "*", "np", ".", "pi", "/", "8", "<=", "theta", "<", "-", "3", "*", "np", ".", "pi", "/", "8", ":", "\n", "                            ", "bc_targets", "[", "2", ",", "int", "(", "row_prev", ")", ",", "int", "(", "column_prev", ")", "]", "=", "1", "\n", "", "elif", "np", ".", "pi", "/", "8", "<=", "theta", "<", "3", "*", "np", ".", "pi", "/", "8", ":", "\n", "                            ", "bc_targets", "[", "4", ",", "int", "(", "row_prev", ")", ",", "int", "(", "column_prev", ")", "]", "=", "1", "\n", "", "elif", "-", "3", "*", "np", ".", "pi", "/", "8", "<=", "theta", "<", "-", "np", ".", "pi", "/", "8", ":", "\n", "                            ", "bc_targets", "[", "5", ",", "int", "(", "row_prev", ")", ",", "int", "(", "column_prev", ")", "]", "=", "1", "\n", "", "elif", "5", "*", "np", ".", "pi", "/", "8", "<=", "theta", "<", "7", "*", "np", ".", "pi", "/", "8", ":", "\n", "                            ", "bc_targets", "[", "6", ",", "int", "(", "row_prev", ")", ",", "int", "(", "column_prev", ")", "]", "=", "1", "\n", "", "elif", "-", "7", "*", "np", ".", "pi", "/", "8", "<=", "theta", "<", "-", "5", "*", "np", ".", "pi", "/", "8", ":", "\n", "                            ", "bc_targets", "[", "7", ",", "int", "(", "row_prev", ")", ",", "int", "(", "column_prev", ")", "]", "=", "1", "\n", "", "else", ":", "\n", "                            ", "bc_targets", "[", "3", ",", "int", "(", "row_prev", ")", ",", "int", "(", "column_prev", ")", "]", "=", "1", "\n", "", "", "", "", "else", ":", "\n", "                ", "break", "\n", "", "column_prev", "=", "column", "\n", "row_prev", "=", "row", "\n", "\n", "# Final action is the end action to transition to the goal state:", "\n", "", "bc_targets", "[", "num_actions", ",", "int", "(", "row_prev", ")", ",", "int", "(", "column_prev", ")", "]", "=", "1", "\n", "return", "bc_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.nachiket92_P2T.datasets.sdd.SDD.collate_fn": [[306, 353], ["torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "float", "float", "int", "int", "int", "int"], "methods", ["None"], ["", "def", "collate_fn", "(", "self", ",", "samples", ")", ":", "\n", "        ", "\"\"\"\n        Collate function to get rid of stationary agents while training reward model:\n        \"\"\"", "\n", "batch_size", "=", "0", "\n", "for", "_", ",", "_", ",", "_", ",", "svf_e", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", ",", "_", "in", "samples", ":", "\n", "            ", "if", "svf_e", "[", "1", ",", "int", "(", "(", "self", ".", "grid_dim", "-", "1", ")", "/", "2", ")", ",", "int", "(", "(", "self", ".", "grid_dim", "-", "1", ")", "/", "2", ")", "]", "==", "0", ":", "\n", "                ", "batch_size", "+=", "1", "\n", "\n", "", "", "hist_batch", "=", "torch", ".", "zeros", "(", "batch_size", ",", "samples", "[", "0", "]", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "samples", "[", "0", "]", "[", "0", "]", ".", "shape", "[", "1", "]", ")", "\n", "fut_batch", "=", "torch", ".", "zeros", "(", "batch_size", ",", "samples", "[", "0", "]", "[", "1", "]", ".", "shape", "[", "0", "]", ",", "samples", "[", "0", "]", "[", "1", "]", ".", "shape", "[", "1", "]", ")", "\n", "img_batch", "=", "torch", ".", "zeros", "(", "batch_size", ",", "samples", "[", "0", "]", "[", "2", "]", ".", "shape", "[", "0", "]", ",", "samples", "[", "0", "]", "[", "2", "]", ".", "shape", "[", "1", "]", ",", "samples", "[", "0", "]", "[", "2", "]", ".", "shape", "[", "2", "]", ")", "\n", "svf_e_batch", "=", "torch", ".", "zeros", "(", "batch_size", ",", "samples", "[", "0", "]", "[", "3", "]", ".", "shape", "[", "0", "]", ",", "samples", "[", "0", "]", "[", "3", "]", ".", "shape", "[", "1", "]", ",", "\n", "samples", "[", "0", "]", "[", "3", "]", ".", "shape", "[", "2", "]", ")", "\n", "motion_feats_batch", "=", "torch", ".", "zeros", "(", "batch_size", ",", "samples", "[", "0", "]", "[", "4", "]", ".", "shape", "[", "0", "]", ",", "samples", "[", "0", "]", "[", "4", "]", ".", "shape", "[", "1", "]", ",", "\n", "samples", "[", "0", "]", "[", "4", "]", ".", "shape", "[", "2", "]", ")", "\n", "waypts_e_batch", "=", "torch", ".", "zeros", "(", "batch_size", ",", "samples", "[", "0", "]", "[", "5", "]", ".", "shape", "[", "0", "]", ",", "samples", "[", "0", "]", "[", "5", "]", ".", "shape", "[", "1", "]", ")", "\n", "agents_batch", "=", "torch", ".", "zeros", "(", "batch_size", ",", "samples", "[", "0", "]", "[", "6", "]", ".", "shape", "[", "0", "]", ",", "samples", "[", "0", "]", "[", "6", "]", ".", "shape", "[", "1", "]", ",", "samples", "[", "0", "]", "[", "6", "]", ".", "shape", "[", "2", "]", ")", "\n", "grid_idcs_batch", "=", "torch", ".", "zeros", "(", "batch_size", ",", "samples", "[", "0", "]", "[", "7", "]", ".", "shape", "[", "0", "]", ",", "samples", "[", "0", "]", "[", "7", "]", ".", "shape", "[", "1", "]", ")", "\n", "bc_targets_batch", "=", "torch", ".", "zeros", "(", "batch_size", ",", "samples", "[", "0", "]", "[", "8", "]", ".", "shape", "[", "0", "]", ",", "samples", "[", "0", "]", "[", "8", "]", ".", "shape", "[", "1", "]", ",", "\n", "samples", "[", "0", "]", "[", "8", "]", ".", "shape", "[", "2", "]", ")", "\n", "img_vis_batch", "=", "torch", ".", "zeros", "(", "batch_size", ",", "samples", "[", "0", "]", "[", "9", "]", ".", "shape", "[", "0", "]", ",", "samples", "[", "0", "]", "[", "9", "]", ".", "shape", "[", "1", "]", ",", "samples", "[", "0", "]", "[", "9", "]", ".", "shape", "[", "2", "]", ")", "\n", "ref_pos_batch", "=", "torch", ".", "zeros", "(", "batch_size", ",", "samples", "[", "0", "]", "[", "10", "]", ".", "shape", "[", "0", "]", ")", "\n", "ds_id_batch", "=", "torch", ".", "zeros", "(", "batch_size", ")", "\n", "idx_batch", "=", "torch", ".", "zeros", "(", "batch_size", ")", "\n", "\n", "count", "=", "0", "\n", "for", "sampleId", ",", "(", "hist", ",", "fut", ",", "img", ",", "svf_e", ",", "motion_feats", ",", "waypts_e", ",", "agents", ",", "grid_idcs", ",", "bc_targets", ",", "img_vis", ",", "ref_pos", ",", "\n", "ds_id", ",", "idx", ")", "in", "enumerate", "(", "samples", ")", ":", "\n", "            ", "if", "svf_e", "[", "1", ",", "int", "(", "(", "self", ".", "grid_dim", "-", "1", ")", "/", "2", ")", ",", "int", "(", "(", "self", ".", "grid_dim", "-", "1", ")", "/", "2", ")", "]", "==", "0", ":", "\n", "                ", "hist_batch", "[", "count", ",", ":", ",", ":", "]", "=", "hist", "\n", "fut_batch", "[", "count", ",", ":", ",", ":", "]", "=", "fut", "\n", "img_batch", "[", "count", ",", ":", ",", ":", ",", ":", "]", "=", "img", "\n", "svf_e_batch", "[", "count", ",", ":", ",", ":", ",", ":", "]", "=", "svf_e", "\n", "motion_feats_batch", "[", "count", ",", ":", ",", ":", ",", ":", "]", "=", "motion_feats", "\n", "waypts_e_batch", "[", "count", ",", ":", ",", ":", "]", "=", "waypts_e", "\n", "agents_batch", "[", "count", ",", ":", ",", ":", ",", ":", "]", "=", "agents", "\n", "grid_idcs_batch", "[", "count", ",", ":", ",", ":", "]", "=", "grid_idcs", "\n", "bc_targets_batch", "[", "count", ",", ":", ",", ":", ",", ":", "]", "=", "bc_targets", "\n", "img_vis_batch", "[", "count", ",", ":", ",", ":", ",", ":", "]", "=", "img_vis", "\n", "ref_pos_batch", "[", "count", ",", ":", "]", "=", "ref_pos", "\n", "ds_id_batch", "[", "count", "]", "=", "float", "(", "ds_id", ")", "\n", "idx_batch", "[", "count", "]", "=", "float", "(", "idx", ")", "\n", "count", "+=", "1", "\n", "\n", "", "", "return", "hist_batch", ",", "fut_batch", ",", "img_batch", ",", "svf_e_batch", ",", "motion_feats_batch", ",", "waypts_e_batch", ",", "agents_batch", ",", "grid_idcs_batch", ",", "bc_targets_batch", ",", "img_vis_batch", ",", "ref_pos_batch", ",", "ds_id_batch", ",", "idx_batch", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nachiket92_P2T.datasets.ns.NS.__init__": [[27, 114], ["nuscenes.NuScenes", "nuscenes.prediction.PredictHelper", "nuscenes.eval.prediction.splits.get_prediction_challenge_split", "numpy.linspace", "numpy.linspace", "ns.AgentMotionStatesOnGrid", "nuscenes.prediction.input_representation.static_layers.StaticLayerRasterizer", "nuscenes.prediction.input_representation.static_layers.StaticLayerRasterizer", "nuscenes.prediction.input_representation.agents.AgentBoxesWithFadedHistory", "nuscenes.prediction.input_representation.interface.InputRepresentation", "nuscenes.prediction.input_representation.combinators.Rasterizer"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "dataroot", ":", "str", ",", "\n", "split", ":", "str", ",", "\n", "t_h", ":", "float", "=", "2", ",", "\n", "t_f", ":", "float", "=", "6", ",", "\n", "grid_dim", ":", "int", "=", "25", ",", "\n", "img_size", ":", "int", "=", "200", ",", "\n", "horizon", ":", "int", "=", "40", ",", "\n", "grid_extent", ":", "Tuple", "[", "int", ",", "int", ",", "int", ",", "int", "]", "=", "(", "-", "25", ",", "25", ",", "-", "10", ",", "40", ")", ",", "\n", "num_actions", ":", "int", "=", "4", ",", "\n", "image_extraction_mode", ":", "bool", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Initializes dataset class for nuScenes prediction\n\n        :param dataroot: Path to tables and data\n        :param split: Dataset split for prediction benchmark ('train'/'train_val'/'val')\n        :param t_h: Track history in seconds\n        :param t_f: Prediction horizon in seconds\n        :param grid_dim: Size of grid, default: 25x25\n        :param img_size: Size of raster map image in pixels, default: 200x200\n        :param horizon: MDP horizon\n        :param grid_extent: Map extents in meters, (-left, right, -behind, front)\n        :param num_actions: Number of actions for each state (4: [D,R,U,L] or 8: [D, R, U, L, DR, UR, DL, UL])\n        :param image_extraction_mode: Whether dataset class is being used for image extraction\n        \"\"\"", "\n", "\n", "# Nuscenes dataset and predict helper", "\n", "self", ".", "dataroot", "=", "dataroot", "\n", "self", ".", "ns", "=", "NuScenes", "(", "'v1.0-trainval'", ",", "dataroot", "=", "dataroot", ")", "\n", "self", ".", "helper", "=", "PredictHelper", "(", "self", ".", "ns", ")", "\n", "self", ".", "token_list", "=", "get_prediction_challenge_split", "(", "split", ",", "dataroot", "=", "dataroot", ")", "\n", "\n", "# Useful parameters", "\n", "self", ".", "grid_dim", "=", "grid_dim", "\n", "self", ".", "grid_extent", "=", "grid_extent", "\n", "self", ".", "img_size", "=", "img_size", "\n", "self", ".", "t_f", "=", "t_f", "\n", "self", ".", "t_h", "=", "t_h", "\n", "self", ".", "horizon", "=", "horizon", "\n", "self", ".", "num_actions", "=", "num_actions", "\n", "\n", "# Map row, column and velocity states to actual values", "\n", "grid_size_m", "=", "self", ".", "grid_extent", "[", "1", "]", "-", "self", ".", "grid_extent", "[", "0", "]", "\n", "self", ".", "row_centers", "=", "np", ".", "linspace", "(", "self", ".", "grid_extent", "[", "3", "]", "-", "grid_size_m", "/", "(", "self", ".", "grid_dim", "*", "2", ")", ",", "\n", "self", ".", "grid_extent", "[", "2", "]", "+", "grid_size_m", "/", "(", "self", ".", "grid_dim", "*", "2", ")", ",", "\n", "self", ".", "grid_dim", ")", "\n", "\n", "self", ".", "col_centers", "=", "np", ".", "linspace", "(", "self", ".", "grid_extent", "[", "0", "]", "+", "grid_size_m", "/", "(", "self", ".", "grid_dim", "*", "2", ")", ",", "\n", "self", ".", "grid_extent", "[", "1", "]", "-", "grid_size_m", "/", "(", "self", ".", "grid_dim", "*", "2", ")", ",", "\n", "self", ".", "grid_dim", ")", "\n", "\n", "# Surrounding agent input representation: populate grid with velocity, acc, yaw-rate", "\n", "self", ".", "agent_ip", "=", "AgentMotionStatesOnGrid", "(", "self", ".", "helper", ",", "\n", "resolution", "=", "grid_size_m", "/", "img_size", ",", "\n", "meters_ahead", "=", "grid_extent", "[", "3", "]", ",", "\n", "meters_behind", "=", "-", "grid_extent", "[", "2", "]", ",", "\n", "meters_left", "=", "-", "grid_extent", "[", "0", "]", ",", "\n", "meters_right", "=", "grid_extent", "[", "1", "]", ")", "\n", "\n", "# Image extraction mode is used for extracting map images offline prior to training", "\n", "self", ".", "image_extraction_mode", "=", "image_extraction_mode", "\n", "if", "self", ".", "image_extraction_mode", ":", "\n", "\n", "# Raster map representation", "\n", "            ", "self", ".", "map_ip", "=", "StaticLayerRasterizer", "(", "self", ".", "helper", ",", "\n", "resolution", "=", "grid_size_m", "/", "img_size", ",", "\n", "meters_ahead", "=", "grid_extent", "[", "3", "]", ",", "\n", "meters_behind", "=", "-", "grid_extent", "[", "2", "]", ",", "\n", "meters_left", "=", "-", "grid_extent", "[", "0", "]", ",", "\n", "meters_right", "=", "grid_extent", "[", "1", "]", ")", "\n", "\n", "# Raster map with agent boxes. Only used for visualization", "\n", "static_layer_rasterizer", "=", "StaticLayerRasterizer", "(", "self", ".", "helper", ",", "\n", "resolution", "=", "grid_size_m", "/", "img_size", ",", "\n", "meters_ahead", "=", "grid_extent", "[", "3", "]", ",", "\n", "meters_behind", "=", "-", "grid_extent", "[", "2", "]", ",", "\n", "meters_left", "=", "-", "grid_extent", "[", "0", "]", ",", "\n", "meters_right", "=", "grid_extent", "[", "1", "]", ")", "\n", "\n", "agent_rasterizer", "=", "AgentBoxesWithFadedHistory", "(", "self", ".", "helper", ",", "seconds_of_history", "=", "1", ",", "\n", "resolution", "=", "grid_size_m", "/", "img_size", ",", "\n", "meters_ahead", "=", "grid_extent", "[", "3", "]", ",", "\n", "meters_behind", "=", "-", "grid_extent", "[", "2", "]", ",", "\n", "meters_left", "=", "-", "grid_extent", "[", "0", "]", ",", "\n", "meters_right", "=", "grid_extent", "[", "1", "]", ")", "\n", "\n", "self", ".", "map_ip_agents", "=", "InputRepresentation", "(", "static_layer_rasterizer", ",", "agent_rasterizer", ",", "Rasterizer", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nachiket92_P2T.datasets.ns.NS.__len__": [[115, 117], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "token_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nachiket92_P2T.datasets.ns.NS.__getitem__": [[118, 237], ["ns.NS.token_list[].split", "os.path.join", "ns.NS.map_ip.make_representation", "PIL.Image.fromarray", "PIL.Image.fromarray.save", "ns.NS.map_ip_agents.make_input_representation", "PIL.Image.fromarray", "PIL.Image.fromarray.save", "ns.NS.get_hist", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "ns.NS.helper.get_future_for_agent", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "ns.NS.helper.get_future_for_agent", "numpy.zeros", "numpy.linspace", "numpy.linspace", "numpy.concatenate", "numpy.concatenate", "numpy.interp", "numpy.interp", "os.path.join", "cv2.imread", "cv2.cvtColor", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "normalize_imagenet", "cv2.imread", "cv2.cvtColor", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.avg_pool2d.permute().float", "torch.avg_pool2d", "torch.avg_pool2d", "ns.NS.get_expert_waypoints", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "ns.NS.get_motion_feats", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "ns.NS.get_bc_targets", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "os.path.isdir", "os.mkdir", "os.path.join", "os.path.join", "os.path.join", "normalize_imagenet.permute().float", "os.path.join", "torch.from_numpy.permute().float", "torch.from_numpy.permute().float", "ns.NS.agent_ip.make_representation", "torch.avg_pool2d.squeeze", "torch.avg_pool2d.permute", "str", "str", "normalize_imagenet.permute", "torch.from_numpy.permute", "torch.from_numpy.permute", "int", "int", "str", "str"], "methods", ["home.repos.pwc.inspect_result.nachiket92_P2T.datasets.ns.AgentMotionStatesOnGrid.make_representation", "home.repos.pwc.inspect_result.nachiket92_P2T.datasets.ns.NS.get_hist", "home.repos.pwc.inspect_result.nachiket92_P2T.datasets.ns.NS.get_expert_waypoints", "home.repos.pwc.inspect_result.nachiket92_P2T.datasets.ns.NS.get_motion_feats", "home.repos.pwc.inspect_result.nachiket92_P2T.datasets.ns.NS.get_bc_targets", "home.repos.pwc.inspect_result.nachiket92_P2T.datasets.ns.AgentMotionStatesOnGrid.make_representation"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "\"\"\"\n        Returns inputs, ground truth values and other utilities for data point at given index\n\n        :return hist: snippet of track history, default 2s at 0.5 Hz sampling frequency\n        :return fut: ground truth future trajectory, default 6s at 0.5 Hz sampling frequency\n        :return img: Imagenet normalized bird's eye view map around the target vehicle\n        :return svf_e: Goal and path state visitation frequencies for expert demonstration, ie. path from train set\n        :return motion_feats: motion and position features used for reward model\n        :return waypts_e: (x,y) BEV co-ordinates corresponding to grid cells of svf_e\n        :return agents: tensor of surrounding agent states populated in grid around target agent\n        :return grid_idcs: grid co-ordinates of svf_e\n        :return bc_targets: ground truth actions for training behavior cloning model\n        :return img_agents: image with agent boxes for visualization / debugging\n        :return instance_token: nuScenes instance token for prediction instance\n        :return sample_token: nuScenes sample token for prediction instance\n        :return idx: instance id (mainly for debugging)\n        \"\"\"", "\n", "\n", "# Nuscenes instance and sample token for prediction data point", "\n", "instance_token", ",", "sample_token", "=", "self", ".", "token_list", "[", "idx", "]", ".", "split", "(", "\"_\"", ")", "\n", "\n", "# If dataset is being used for image extraction", "\n", "grid_size_m", "=", "self", ".", "grid_extent", "[", "1", "]", "-", "self", ".", "grid_extent", "[", "0", "]", "\n", "if", "self", ".", "image_extraction_mode", ":", "\n", "\n", "# Make directory to store raster map images", "\n", "            ", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dataroot", ",", "'prediction_raster_maps'", ",", "\n", "'images'", "+", "str", "(", "self", ".", "img_size", ")", "+", "\"_\"", "+", "str", "(", "int", "(", "grid_size_m", ")", ")", "+", "'m'", ")", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "img_dir", ")", ":", "\n", "                ", "os", ".", "mkdir", "(", "img_dir", ")", "\n", "\n", "# Generate and save raster map image with just static elements", "\n", "", "img", "=", "self", ".", "map_ip", ".", "make_representation", "(", "instance_token", ",", "sample_token", ")", "\n", "img_save", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "img_save", ".", "save", "(", "os", ".", "path", ".", "join", "(", "img_dir", ",", "instance_token", "+", "\"_\"", "+", "sample_token", "+", "'.png'", ")", ")", "\n", "\n", "# Generate and save raster map image with static elements and agent boxes (for visualization only)", "\n", "img_agents", "=", "self", ".", "map_ip_agents", ".", "make_input_representation", "(", "instance_token", ",", "sample_token", ")", "\n", "img_agents_save", "=", "Image", ".", "fromarray", "(", "img_agents", ")", "\n", "img_agents_save", ".", "save", "(", "os", ".", "path", ".", "join", "(", "img_dir", ",", "instance_token", "+", "\"_\"", "+", "sample_token", "+", "'agents.png'", ")", ")", "\n", "\n", "# Return dummy values", "\n", "return", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", "\n", "\n", "# If dataset is being used for training/validation/testing", "\n", "", "else", ":", "\n", "\n", "# Get track history for agent:", "\n", "            ", "hist", "=", "self", ".", "get_hist", "(", "instance_token", ",", "sample_token", ")", "\n", "hist", "=", "torch", ".", "from_numpy", "(", "hist", ")", "\n", "\n", "# Get ground truth future for agent:", "\n", "fut", "=", "self", ".", "helper", ".", "get_future_for_agent", "(", "instance_token", ",", "\n", "sample_token", ",", "\n", "seconds", "=", "self", ".", "t_f", ",", "\n", "in_agent_frame", "=", "True", ")", "\n", "fut", "=", "torch", ".", "from_numpy", "(", "fut", ")", "\n", "\n", "# Get indefinite future for computing expert State visitation frequencies (SVF):", "\n", "fut_indefinite", "=", "self", ".", "helper", ".", "get_future_for_agent", "(", "instance_token", ",", "\n", "sample_token", ",", "\n", "seconds", "=", "300", ",", "\n", "in_agent_frame", "=", "True", ")", "\n", "\n", "# Up sample indefinite future by a factor of 10", "\n", "fut_interpolated", "=", "np", ".", "zeros", "(", "(", "fut_indefinite", ".", "shape", "[", "0", "]", "*", "10", "+", "1", ",", "2", ")", ")", "\n", "param_query", "=", "np", ".", "linspace", "(", "0", ",", "fut_indefinite", ".", "shape", "[", "0", "]", ",", "fut_indefinite", ".", "shape", "[", "0", "]", "*", "10", "+", "1", ")", "\n", "param_given", "=", "np", ".", "linspace", "(", "0", ",", "fut_indefinite", ".", "shape", "[", "0", "]", ",", "fut_indefinite", ".", "shape", "[", "0", "]", "+", "1", ")", "\n", "val_given_x", "=", "np", ".", "concatenate", "(", "(", "[", "0", "]", ",", "fut_indefinite", "[", ":", ",", "0", "]", ")", ")", "\n", "val_given_y", "=", "np", ".", "concatenate", "(", "(", "[", "0", "]", ",", "fut_indefinite", "[", ":", ",", "1", "]", ")", ")", "\n", "fut_interpolated", "[", ":", ",", "0", "]", "=", "np", ".", "interp", "(", "param_query", ",", "param_given", ",", "val_given_x", ")", "\n", "fut_interpolated", "[", ":", ",", "1", "]", "=", "np", ".", "interp", "(", "param_query", ",", "param_given", ",", "val_given_y", ")", "\n", "\n", "# Read pre-extracted raster map image", "\n", "img_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "dataroot", ",", "'prediction_raster_maps'", ",", "\n", "'images'", "+", "str", "(", "self", ".", "img_size", ")", "+", "\"_\"", "+", "str", "(", "int", "(", "grid_size_m", ")", ")", "+", "'m'", ")", "\n", "img", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "img_dir", ",", "instance_token", "+", "\"_\"", "+", "sample_token", "+", "'.png'", ")", ")", "\n", "\n", "# Pre-process image", "\n", "img", "=", "cv2", ".", "cvtColor", "(", "img", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "img", "=", "torch", ".", "from_numpy", "(", "img", ")", "\n", "img", "=", "img", ".", "permute", "(", "(", "2", ",", "0", ",", "1", ")", ")", ".", "float", "(", ")", "/", "255", "\n", "\n", "# Normalize using Imagenet stats", "\n", "img", "=", "normalize_imagenet", "(", "img", ")", "\n", "\n", "# Read pre-extracted raster map with agent boxes (for visualization + debugging)", "\n", "img_agents", "=", "cv2", ".", "imread", "(", "os", ".", "path", ".", "join", "(", "img_dir", ",", "instance_token", "+", "\"_\"", "+", "sample_token", "+", "'agents.png'", ")", ")", "\n", "\n", "# Pre-process image", "\n", "img_agents", "=", "cv2", ".", "cvtColor", "(", "img_agents", ",", "cv2", ".", "COLOR_BGR2RGB", ")", "\n", "img_agents", "=", "torch", ".", "from_numpy", "(", "img_agents", ")", "\n", "img_agents", "=", "img_agents", ".", "permute", "(", "(", "2", ",", "0", ",", "1", ")", ")", ".", "float", "(", ")", "/", "255", "\n", "\n", "# Get surrounding agent states", "\n", "agents", "=", "torch", ".", "from_numpy", "(", "self", ".", "agent_ip", ".", "make_representation", "(", "instance_token", ",", "sample_token", ")", ")", "\n", "agents", "=", "agents", ".", "permute", "(", "(", "2", ",", "0", ",", "1", ")", ")", ".", "float", "(", ")", "\n", "\n", "# Sum pool states to down-sample to grid dimensions", "\n", "agents", "=", "f", ".", "avg_pool2d", "(", "agents", "[", "None", ",", ":", ",", ":", ",", ":", "]", ",", "self", ".", "img_size", "//", "self", ".", "grid_dim", ")", "\n", "agents", "=", "agents", ".", "squeeze", "(", "dim", "=", "0", ")", "*", "(", "(", "self", ".", "img_size", "//", "self", ".", "grid_dim", ")", "**", "2", ")", "\n", "\n", "# Get expert SVF:", "\n", "svf_e", ",", "waypts_e", ",", "grid_idcs", "=", "self", ".", "get_expert_waypoints", "(", "fut_interpolated", ")", "\n", "svf_e", "=", "torch", ".", "from_numpy", "(", "svf_e", ")", "\n", "waypts_e", "=", "torch", ".", "from_numpy", "(", "waypts_e", ")", "\n", "grid_idcs", "=", "torch", ".", "from_numpy", "(", "grid_idcs", ")", "\n", "\n", "# Get motion and position feats:", "\n", "motion_feats", "=", "self", ".", "get_motion_feats", "(", "instance_token", ",", "sample_token", ")", "\n", "motion_feats", "=", "torch", ".", "from_numpy", "(", "motion_feats", ")", "\n", "\n", "# Targets for behavior cloning model:", "\n", "bc_targets", "=", "self", ".", "get_bc_targets", "(", "fut_interpolated", ")", "\n", "bc_targets", "=", "torch", ".", "from_numpy", "(", "bc_targets", ")", "\n", "\n", "return", "hist", ",", "fut", ",", "img", ",", "svf_e", ",", "motion_feats", ",", "waypts_e", ",", "agents", ",", "grid_idcs", ",", "bc_targets", ",", "img_agents", ",", "instance_token", ",", "sample_token", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.nachiket92_P2T.datasets.ns.NS.get_hist": [[238, 298], ["ns.NS.helper.get_past_for_agent", "ns.NS.helper.get_past_for_agent", "numpy.zeros", "i_tokens.insert", "s_tokens.insert", "range", "numpy.zeros", "numpy.flip", "len", "ns.NS.helper.get_velocity_for_agent", "ns.NS.helper.get_acceleration_for_agent", "ns.NS.helper.get_heading_change_rate_for_agent", "numpy.isnan", "numpy.isnan", "numpy.isnan", "range", "range", "len", "len", "int", "int", "int"], "methods", ["None"], ["", "", "def", "get_hist", "(", "self", ",", "instance_token", ":", "str", ",", "sample_token", ":", "str", ")", ":", "\n", "        ", "\"\"\"\n        Function to get track history of agent\n        :param instance_token: nuScenes instance token for datapoint\n        :param sample_token nuScenes sample token for datapoint\n        \"\"\"", "\n", "# x, y co-ordinates in agent's frame of reference", "\n", "xy", "=", "self", ".", "helper", ".", "get_past_for_agent", "(", "instance_token", ",", "\n", "sample_token", ",", "\n", "seconds", "=", "self", ".", "t_h", ",", "\n", "in_agent_frame", "=", "True", ")", "\n", "\n", "# Get all history records for obtaining velocity, acceleration and turn rate values", "\n", "hist_records", "=", "self", ".", "helper", ".", "get_past_for_agent", "(", "instance_token", ",", "\n", "sample_token", ",", "\n", "seconds", "=", "self", ".", "t_h", ",", "\n", "in_agent_frame", "=", "True", ",", "\n", "just_xy", "=", "False", ")", "\n", "if", "xy", ".", "shape", "[", "0", "]", ">", "self", ".", "t_h", "*", "2", ":", "\n", "            ", "xy", "=", "xy", "[", "0", ":", "int", "(", "self", ".", "t_h", ")", "*", "2", "]", "\n", "", "if", "len", "(", "hist_records", ")", ">", "self", ".", "t_h", "*", "2", ":", "\n", "            ", "hist_records", "=", "hist_records", "[", "0", ":", "int", "(", "self", ".", "t_h", ")", "*", "2", "]", "\n", "\n", "# Initialize hist tensor and set x and y co-ordinates returned by prediction helper", "\n", "", "hist", "=", "np", ".", "zeros", "(", "(", "xy", ".", "shape", "[", "0", "]", ",", "5", ")", ")", "\n", "hist", "[", ":", ",", "0", ":", "2", "]", "=", "xy", "\n", "\n", "# Instance and sample tokens from history records", "\n", "i_tokens", "=", "[", "hist_records", "[", "i", "]", "[", "'instance_token'", "]", "for", "i", "in", "range", "(", "len", "(", "hist_records", ")", ")", "]", "\n", "i_tokens", ".", "insert", "(", "0", ",", "instance_token", ")", "\n", "s_tokens", "=", "[", "hist_records", "[", "i", "]", "[", "'sample_token'", "]", "for", "i", "in", "range", "(", "len", "(", "hist_records", ")", ")", "]", "\n", "s_tokens", ".", "insert", "(", "0", ",", "sample_token", ")", "\n", "\n", "# Set velocity, acc and turn rate values for hist", "\n", "for", "k", "in", "range", "(", "hist", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "i_t", "=", "i_tokens", "[", "k", "]", "\n", "s_t", "=", "s_tokens", "[", "k", "]", "\n", "v", "=", "self", ".", "helper", ".", "get_velocity_for_agent", "(", "i_t", ",", "s_t", ")", "\n", "a", "=", "self", ".", "helper", ".", "get_acceleration_for_agent", "(", "i_t", ",", "s_t", ")", "\n", "theta", "=", "self", ".", "helper", ".", "get_heading_change_rate_for_agent", "(", "i_t", ",", "s_t", ")", "\n", "\n", "# If function returns nan values due to short tracks, set corresponding value to 0", "\n", "if", "np", ".", "isnan", "(", "v", ")", ":", "\n", "                ", "v", "=", "0", "\n", "", "if", "np", ".", "isnan", "(", "a", ")", ":", "\n", "                ", "a", "=", "0", "\n", "", "if", "np", ".", "isnan", "(", "theta", ")", ":", "\n", "                ", "theta", "=", "0", "\n", "", "hist", "[", "k", ",", "2", "]", "=", "v", "\n", "hist", "[", "k", ",", "3", "]", "=", "a", "\n", "hist", "[", "k", ",", "4", "]", "=", "theta", "\n", "\n", "# Zero pad for track histories shorter than t_h", "\n", "", "hist_zeropadded", "=", "np", ".", "zeros", "(", "(", "int", "(", "self", ".", "t_h", ")", "*", "2", ",", "5", ")", ")", "\n", "\n", "# Flip to have correct order of timestamps", "\n", "hist", "=", "np", ".", "flip", "(", "hist", ",", "0", ")", "\n", "hist_zeropadded", "[", "-", "hist", ".", "shape", "[", "0", "]", ":", "]", "=", "hist", "\n", "\n", "return", "hist_zeropadded", "\n", "\n"]], "home.repos.pwc.inspect_result.nachiket92_P2T.datasets.ns.NS.get_expert_waypoints": [[299, 346], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "range", "numpy.argmin", "numpy.argmin", "numpy.absolute", "numpy.absolute", "row_prev.astype", "column_prev.astype", "numpy.argmin.astype", "numpy.argmin.astype"], "methods", ["None"], ["", "def", "get_expert_waypoints", "(", "self", ",", "fut", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "\"\"\"\n        Function to get the expert's state visitation frequencies based on their trajectory\n        :param fut: numpy array with future trajectory of for all available future timestamps, up-sampled by 10\n        \"\"\"", "\n", "\n", "# Expert state visitation frequencies for training reward model, waypoints in meters and grid indices", "\n", "svf_e", "=", "np", ".", "zeros", "(", "(", "2", ",", "self", ".", "grid_dim", ",", "self", ".", "grid_dim", ")", ")", "\n", "waypts_e", "=", "np", ".", "zeros", "(", "(", "self", ".", "horizon", ",", "2", ")", ")", "\n", "grid_idcs", "=", "np", ".", "zeros", "(", "(", "self", ".", "horizon", ",", "2", ")", ")", "\n", "\n", "count", "=", "0", "\n", "row_prev", "=", "np", ".", "nan", "\n", "column_prev", "=", "np", ".", "nan", "\n", "for", "k", "in", "range", "(", "fut", ".", "shape", "[", "0", "]", ")", ":", "\n", "\n", "# Convert trajectory (x,y) co-ordinates to grid locations:", "\n", "            ", "column", "=", "np", ".", "argmin", "(", "np", ".", "absolute", "(", "fut", "[", "k", ",", "0", "]", "-", "self", ".", "col_centers", ")", ")", "\n", "row", "=", "np", ".", "argmin", "(", "np", ".", "absolute", "(", "fut", "[", "k", ",", "1", "]", "-", "self", ".", "row_centers", ")", ")", "\n", "\n", "# Demonstration ends when expert leaves the image crop corresponding to the grid:", "\n", "if", "self", ".", "grid_extent", "[", "0", "]", "<=", "fut", "[", "k", ",", "0", "]", "<=", "self", ".", "grid_extent", "[", "1", "]", "and", "self", ".", "grid_extent", "[", "2", "]", "<=", "fut", "[", "k", ",", "1", "]", "<=", "self", ".", "grid_extent", "[", "3", "]", ":", "\n", "\n", "# Check if cell location has changed", "\n", "                ", "if", "row", "!=", "row_prev", "or", "column", "!=", "column_prev", ":", "\n", "\n", "# Add cell location to path states of expert", "\n", "                    ", "svf_e", "[", "0", ",", "row", ".", "astype", "(", "int", ")", ",", "column", ".", "astype", "(", "int", ")", "]", "=", "1", "\n", "\n", "if", "count", "<", "self", ".", "horizon", ":", "\n", "\n", "# Get BEV coordinates corresponding to cell locations", "\n", "                        ", "waypts_e", "[", "count", ",", "0", "]", "=", "self", ".", "row_centers", "[", "row", "]", "\n", "waypts_e", "[", "count", ",", "1", "]", "=", "self", ".", "col_centers", "[", "column", "]", "\n", "grid_idcs", "[", "count", ",", "0", "]", "=", "row", "\n", "grid_idcs", "[", "count", ",", "1", "]", "=", "column", "\n", "count", "+=", "1", "\n", "", "", "", "else", ":", "\n", "                ", "break", "\n", "", "column_prev", "=", "column", "\n", "row_prev", "=", "row", "\n", "\n", "# Last cell location where demonstration terminates is the goal state:", "\n", "", "svf_e", "[", "1", ",", "row_prev", ".", "astype", "(", "int", ")", ",", "column_prev", ".", "astype", "(", "int", ")", "]", "=", "1", "\n", "\n", "return", "svf_e", ",", "waypts_e", ",", "grid_idcs", "\n", "\n"]], "home.repos.pwc.inspect_result.nachiket92_P2T.datasets.ns.NS.get_motion_feats": [[347, 375], ["numpy.zeros", "numpy.linspace().reshape().repeat", "numpy.linspace().reshape().repeat().transpose", "ns.NS.helper.get_velocity_for_agent", "numpy.isnan", "numpy.linspace().reshape", "numpy.linspace().reshape().repeat", "numpy.linspace", "numpy.linspace().reshape", "numpy.linspace"], "methods", ["None"], ["", "def", "get_motion_feats", "(", "self", ",", "instance_token", ":", "str", ",", "sample_token", ":", "str", ")", ":", "\n", "        ", "\"\"\"\n        Function to get motion and position features over grid for reward model\n        :param instance_token: NuScenes instance token for datapoint\n        :param sample_token: NuScenes sample token for datapoint\n        \"\"\"", "\n", "feats", "=", "np", ".", "zeros", "(", "(", "3", ",", "self", ".", "grid_dim", ",", "self", ".", "grid_dim", ")", ")", "\n", "\n", "# X and Y co-ordinates over grid", "\n", "grid_size_m", "=", "self", ".", "grid_extent", "[", "1", "]", "-", "self", ".", "grid_extent", "[", "0", "]", "\n", "y", "=", "(", "np", ".", "linspace", "(", "self", ".", "grid_extent", "[", "3", "]", "-", "grid_size_m", "/", "(", "self", ".", "grid_dim", "*", "2", ")", ",", "\n", "self", ".", "grid_extent", "[", "2", "]", "+", "grid_size_m", "/", "(", "self", ".", "grid_dim", "*", "2", ")", ",", "\n", "self", ".", "grid_dim", ")", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "self", ".", "grid_dim", ",", "axis", "=", "1", ")", "\n", "x", "=", "(", "np", ".", "linspace", "(", "self", ".", "grid_extent", "[", "0", "]", "+", "grid_size_m", "/", "(", "self", ".", "grid_dim", "*", "2", ")", ",", "\n", "self", ".", "grid_extent", "[", "1", "]", "-", "grid_size_m", "/", "(", "self", ".", "grid_dim", "*", "2", ")", ",", "\n", "self", ".", "grid_dim", ")", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ".", "repeat", "(", "self", ".", "grid_dim", ",", "axis", "=", "1", ")", ".", "transpose", "(", ")", "\n", "\n", "# Velocity of agent", "\n", "v", "=", "self", ".", "helper", ".", "get_velocity_for_agent", "(", "instance_token", ",", "sample_token", ")", "\n", "if", "np", ".", "isnan", "(", "v", ")", ":", "\n", "            ", "v", "=", "0", "\n", "\n", "# Normalize X and Y co-ordinates over grid", "\n", "", "feats", "[", "0", "]", "=", "v", "\n", "feats", "[", "1", "]", "=", "x", "/", "grid_size_m", "\n", "feats", "[", "2", "]", "=", "y", "/", "grid_size_m", "\n", "\n", "return", "feats", "\n", "\n"]], "home.repos.pwc.inspect_result.nachiket92_P2T.datasets.ns.NS.get_bc_targets": [[376, 439], ["numpy.zeros", "numpy.argmin", "numpy.argmin", "range", "numpy.absolute", "numpy.absolute", "numpy.argmin", "numpy.argmin", "numpy.absolute", "numpy.absolute", "numpy.arctan2", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int"], "methods", ["None"], ["", "def", "get_bc_targets", "(", "self", ",", "fut", ":", "np", ".", "ndarray", ")", ":", "\n", "        ", "\"\"\"\n        Function to get targets for behavior cloning model\n        :param fut: numpy array with future trajectory of for all available future timestamps, up-sampled by 10\n        \"\"\"", "\n", "bc_targets", "=", "np", ".", "zeros", "(", "(", "self", ".", "num_actions", "+", "1", ",", "self", ".", "grid_dim", ",", "self", ".", "grid_dim", ")", ")", "\n", "column_prev", "=", "np", ".", "argmin", "(", "np", ".", "absolute", "(", "fut", "[", "0", ",", "0", "]", "-", "self", ".", "col_centers", ")", ")", "\n", "row_prev", "=", "np", ".", "argmin", "(", "np", ".", "absolute", "(", "fut", "[", "0", ",", "1", "]", "-", "self", ".", "row_centers", ")", ")", "\n", "\n", "for", "k", "in", "range", "(", "fut", ".", "shape", "[", "0", "]", ")", ":", "\n", "\n", "# Convert trajectory (x,y) co-ordinates to grid locations:", "\n", "            ", "column", "=", "np", ".", "argmin", "(", "np", ".", "absolute", "(", "fut", "[", "k", ",", "0", "]", "-", "self", ".", "col_centers", ")", ")", "\n", "row", "=", "np", ".", "argmin", "(", "np", ".", "absolute", "(", "fut", "[", "k", ",", "1", "]", "-", "self", ".", "row_centers", ")", ")", "\n", "\n", "# Demonstration ends when expert leaves the image crop corresponding to the grid:", "\n", "if", "self", ".", "grid_extent", "[", "0", "]", "<=", "fut", "[", "k", ",", "0", "]", "<=", "self", ".", "grid_extent", "[", "1", "]", "and", "self", ".", "grid_extent", "[", "2", "]", "<=", "fut", "[", "k", ",", "1", "]", "<=", "self", ".", "grid_extent", "[", "3", "]", ":", "\n", "\n", "# Check if cell location has changed", "\n", "                ", "if", "row", "!=", "row_prev", "or", "column", "!=", "column_prev", ":", "\n", "                    ", "bc_targets", "[", ":", ",", "int", "(", "row_prev", ")", ",", "int", "(", "column_prev", ")", "]", "=", "0", "\n", "d_x", "=", "column", "-", "column_prev", "\n", "d_y", "=", "row", "-", "row_prev", "\n", "theta", "=", "np", ".", "arctan2", "(", "d_y", ",", "d_x", ")", "\n", "\n", "# Assign ground truth actions for expert demonstration", "\n", "if", "self", ".", "num_actions", "==", "4", ":", "# [D,R,U,L,end]", "\n", "                        ", "if", "np", ".", "pi", "/", "4", "<=", "theta", "<", "3", "*", "np", ".", "pi", "/", "4", ":", "\n", "                            ", "bc_targets", "[", "0", ",", "int", "(", "row_prev", ")", ",", "int", "(", "column_prev", ")", "]", "=", "1", "\n", "", "elif", "-", "np", ".", "pi", "/", "4", "<=", "theta", "<", "np", ".", "pi", "/", "4", ":", "\n", "                            ", "bc_targets", "[", "1", ",", "int", "(", "row_prev", ")", ",", "int", "(", "column_prev", ")", "]", "=", "1", "\n", "", "elif", "-", "3", "*", "np", ".", "pi", "/", "4", "<=", "theta", "<", "-", "np", ".", "pi", "/", "4", ":", "\n", "                            ", "bc_targets", "[", "2", ",", "int", "(", "row_prev", ")", ",", "int", "(", "column_prev", ")", "]", "=", "1", "\n", "", "else", ":", "\n", "                            ", "bc_targets", "[", "3", ",", "int", "(", "row_prev", ")", ",", "int", "(", "column_prev", ")", "]", "=", "1", "\n", "\n", "", "", "else", ":", "# [D, R, U, L, DR, UR, DL, UL, end]", "\n", "                        ", "if", "3", "*", "np", ".", "pi", "/", "8", "<=", "theta", "<", "5", "*", "np", ".", "pi", "/", "8", ":", "\n", "                            ", "bc_targets", "[", "0", ",", "int", "(", "row_prev", ")", ",", "int", "(", "column_prev", ")", "]", "=", "1", "\n", "", "elif", "-", "np", ".", "pi", "/", "8", "<=", "theta", "<", "np", ".", "pi", "/", "8", ":", "\n", "                            ", "bc_targets", "[", "1", ",", "int", "(", "row_prev", ")", ",", "int", "(", "column_prev", ")", "]", "=", "1", "\n", "", "elif", "-", "5", "*", "np", ".", "pi", "/", "8", "<=", "theta", "<", "-", "3", "*", "np", ".", "pi", "/", "8", ":", "\n", "                            ", "bc_targets", "[", "2", ",", "int", "(", "row_prev", ")", ",", "int", "(", "column_prev", ")", "]", "=", "1", "\n", "", "elif", "np", ".", "pi", "/", "8", "<=", "theta", "<", "3", "*", "np", ".", "pi", "/", "8", ":", "\n", "                            ", "bc_targets", "[", "4", ",", "int", "(", "row_prev", ")", ",", "int", "(", "column_prev", ")", "]", "=", "1", "\n", "", "elif", "-", "3", "*", "np", ".", "pi", "/", "8", "<=", "theta", "<", "-", "np", ".", "pi", "/", "8", ":", "\n", "                            ", "bc_targets", "[", "5", ",", "int", "(", "row_prev", ")", ",", "int", "(", "column_prev", ")", "]", "=", "1", "\n", "", "elif", "5", "*", "np", ".", "pi", "/", "8", "<=", "theta", "<", "7", "*", "np", ".", "pi", "/", "8", ":", "\n", "                            ", "bc_targets", "[", "6", ",", "int", "(", "row_prev", ")", ",", "int", "(", "column_prev", ")", "]", "=", "1", "\n", "", "elif", "-", "7", "*", "np", ".", "pi", "/", "8", "<=", "theta", "<", "-", "5", "*", "np", ".", "pi", "/", "8", ":", "\n", "                            ", "bc_targets", "[", "7", ",", "int", "(", "row_prev", ")", ",", "int", "(", "column_prev", ")", "]", "=", "1", "\n", "", "else", ":", "\n", "                            ", "bc_targets", "[", "3", ",", "int", "(", "row_prev", ")", ",", "int", "(", "column_prev", ")", "]", "=", "1", "\n", "", "", "", "", "else", ":", "\n", "                ", "break", "\n", "", "column_prev", "=", "column", "\n", "row_prev", "=", "row", "\n", "\n", "# Final action is the end action to transition to the goal state:", "\n", "", "bc_targets", "[", "self", ".", "num_actions", ",", "int", "(", "row_prev", ")", ",", "int", "(", "column_prev", ")", "]", "=", "1", "\n", "\n", "return", "bc_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.nachiket92_P2T.datasets.ns.AgentMotionStatesOnGrid.__init__": [[447, 460], ["ValueError"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "helper", ":", "PredictHelper", ",", "\n", "resolution", ":", "float", "=", "0.1", ",", "# meters / pixel", "\n", "meters_ahead", ":", "float", "=", "40", ",", "meters_behind", ":", "float", "=", "10", ",", "\n", "meters_left", ":", "float", "=", "25", ",", "meters_right", ":", "float", "=", "25", ",", ")", ":", "\n", "\n", "        ", "self", ".", "helper", "=", "helper", "\n", "if", "not", "resolution", ">", "0", ":", "\n", "            ", "raise", "ValueError", "(", "f\"Resolution must be positive. Received {resolution}.\"", ")", "\n", "", "self", ".", "resolution", "=", "resolution", "\n", "self", ".", "meters_ahead", "=", "meters_ahead", "\n", "self", ".", "meters_behind", "=", "meters_behind", "\n", "self", ".", "meters_left", "=", "meters_left", "\n", "self", ".", "meters_right", "=", "meters_right", "\n", "\n"]], "home.repos.pwc.inspect_result.nachiket92_P2T.datasets.ns.AgentMotionStatesOnGrid.make_representation": [[461, 502], ["int", "numpy.zeros", "ns.AgentMotionStatesOnGrid.helper.get_annotations_for_sample", "ns.AgentMotionStatesOnGrid.helper.get_sample_annotation", "ns.populate_agent_states", "nuscenes.prediction.helper.quaternion_yaw", "nuscenes.prediction.input_representation.utils.get_rotation_matrix", "cv2.warpAffine", "nuscenes.prediction.input_representation.utils.get_crops", "max", "pyquaternion.Quaternion"], "methods", ["home.repos.pwc.inspect_result.nachiket92_P2T.datasets.ns.populate_agent_states"], ["", "def", "make_representation", "(", "self", ",", "instance_token", ":", "str", ",", "sample_token", ":", "str", ")", "->", "np", ".", "ndarray", ":", "\n", "        ", "\"\"\"\n        Represents agents as a 4 channel image. Channel 0: 1 if an agent is present at this location 0 otherwise\n        Channel 1, 2, 3 velocity, acc and yaw-rate of agent\n\n        If multiple agents are present at same location for given resolution, channel 0 is summed, min of other\n        channels retained. (Probably need a better solution than min). All values are scalars, direction can be\n        inferred using lane direction from static layer.\n\n        :param instance_token: Instance token.\n        :param sample_token: Sample token.\n        :return: np.ndarray representing a 4 channel image.\n        \"\"\"", "\n", "\n", "# Taking radius around track before to ensure all actors are in image", "\n", "buffer", "=", "max", "(", "[", "self", ".", "meters_ahead", ",", "self", ".", "meters_behind", ",", "\n", "self", ".", "meters_left", ",", "self", ".", "meters_right", "]", ")", "*", "2", "\n", "\n", "image_side_length", "=", "int", "(", "buffer", "/", "self", ".", "resolution", ")", "\n", "\n", "# We will center the track in the image", "\n", "central_track_pixels", "=", "(", "image_side_length", "/", "2", ",", "image_side_length", "/", "2", ")", "\n", "base_image", "=", "np", ".", "zeros", "(", "(", "image_side_length", ",", "image_side_length", ",", "4", ")", ")", "\n", "\n", "annotations", "=", "self", ".", "helper", ".", "get_annotations_for_sample", "(", "sample_token", ")", "\n", "center_agent_annotation", "=", "self", ".", "helper", ".", "get_sample_annotation", "(", "instance_token", ",", "sample_token", ")", "\n", "\n", "populate_agent_states", "(", "center_agent_annotation", ",", "central_track_pixels", ",", "\n", "annotations", ",", "base_image", ",", "self", ".", "helper", ",", "resolution", "=", "self", ".", "resolution", ")", "\n", "\n", "# Rotate and crop representation:", "\n", "center_agent_yaw", "=", "quaternion_yaw", "(", "Quaternion", "(", "center_agent_annotation", "[", "'rotation'", "]", ")", ")", "\n", "rotation_mat", "=", "get_rotation_matrix", "(", "base_image", ".", "shape", ",", "center_agent_yaw", ")", "\n", "rotated_image", "=", "cv2", ".", "warpAffine", "(", "base_image", ",", "rotation_mat", ",", "(", "base_image", ".", "shape", "[", "1", "]", ",", "\n", "base_image", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n", "row_crop", ",", "col_crop", "=", "get_crops", "(", "self", ".", "meters_ahead", ",", "self", ".", "meters_behind", ",", "\n", "self", ".", "meters_left", ",", "self", ".", "meters_right", ",", "self", ".", "resolution", ",", "\n", "image_side_length", ")", "\n", "\n", "return", "rotated_image", "[", "row_crop", ",", "col_crop", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.nachiket92_P2T.datasets.ns.populate_agent_states": [[504, 560], ["enumerate", "nuscenes.prediction.input_representation.utils.convert_to_pixel_coords", "helper.get_velocity_for_agent", "helper.get_acceleration_for_agent", "helper.get_heading_change_rate_for_agent", "numpy.isnan", "numpy.isnan", "numpy.isnan", "numpy.isnan", "min", "numpy.isnan", "min", "numpy.isnan", "min"], "function", ["None"], ["", "", "def", "populate_agent_states", "(", "center_agent_annotation", ":", "Dict", "[", "str", ",", "Any", "]", ",", "\n", "center_agent_pixels", ":", "Tuple", "[", "float", ",", "float", "]", ",", "\n", "annotations", ":", "List", "[", "Dict", "[", "str", ",", "Any", "]", "]", ",", "\n", "base_image", ":", "np", ".", "ndarray", ",", "\n", "helper", ":", "PredictHelper", ",", "\n", "resolution", ":", "float", "=", "0.1", ")", "->", "None", ":", "\n", "    ", "\"\"\"\n    Adds agent states to 4 channel base_image\n    :param center_agent_annotation: Annotation record for the agent\n        that is in the center of the image.\n    :param center_agent_pixels: Pixel location of the agent in the\n        center of the image.\n    :param annotations: Annotation records for other agents\n    :param base_image: 4 channel image to populate with agent states.\n    :param helper: Predict helper\n    :param resolution: Size of the image in pixels / meter.\n    :return: None.\n    \"\"\"", "\n", "\n", "agent_x", ",", "agent_y", "=", "center_agent_annotation", "[", "'translation'", "]", "[", ":", "2", "]", "\n", "\n", "for", "i", ",", "annotation", "in", "enumerate", "(", "annotations", ")", ":", "\n", "        ", "if", "annotation", "[", "'instance_token'", "]", "!=", "center_agent_annotation", "[", "'instance_token'", "]", ":", "\n", "            ", "location", "=", "annotation", "[", "'translation'", "]", "[", ":", "2", "]", "\n", "row_pixel", ",", "column_pixel", "=", "convert_to_pixel_coords", "(", "location", ",", "\n", "(", "agent_x", ",", "agent_y", ")", ",", "\n", "center_agent_pixels", ",", "resolution", ")", "\n", "\n", "if", "0", "<=", "row_pixel", "<", "base_image", ".", "shape", "[", "0", "]", "and", "0", "<=", "column_pixel", "<", "base_image", ".", "shape", "[", "1", "]", ":", "\n", "\n", "                ", "v", "=", "helper", ".", "get_velocity_for_agent", "(", "annotation", "[", "'instance_token'", "]", ",", "\n", "annotation", "[", "'sample_token'", "]", ")", "\n", "\n", "a", "=", "helper", ".", "get_acceleration_for_agent", "(", "annotation", "[", "'instance_token'", "]", ",", "\n", "annotation", "[", "'sample_token'", "]", ")", "\n", "\n", "omega", "=", "helper", ".", "get_heading_change_rate_for_agent", "(", "annotation", "[", "'instance_token'", "]", ",", "\n", "annotation", "[", "'sample_token'", "]", ")", "\n", "\n", "if", "base_image", "[", "row_pixel", ",", "column_pixel", ",", "0", "]", "==", "0", ":", "\n", "                    ", "base_image", "[", "row_pixel", ",", "column_pixel", ",", "0", "]", "=", "1", "\n", "if", "not", "np", ".", "isnan", "(", "v", ")", ":", "\n", "                        ", "base_image", "[", "row_pixel", ",", "column_pixel", ",", "1", "]", "=", "v", "\n", "", "if", "not", "np", ".", "isnan", "(", "a", ")", ":", "\n", "                        ", "base_image", "[", "row_pixel", ",", "column_pixel", ",", "2", "]", "=", "a", "\n", "", "if", "not", "np", ".", "isnan", "(", "omega", ")", ":", "\n", "                        ", "base_image", "[", "row_pixel", ",", "column_pixel", ",", "3", "]", "=", "omega", "\n", "\n", "", "", "else", ":", "\n", "                    ", "base_image", "[", "row_pixel", ",", "column_pixel", ",", "0", "]", "+=", "1", "\n", "if", "not", "np", ".", "isnan", "(", "v", ")", ":", "\n", "                        ", "base_image", "[", "row_pixel", ",", "column_pixel", ",", "1", "]", "=", "min", "(", "v", ",", "base_image", "[", "row_pixel", ",", "column_pixel", ",", "1", "]", ")", "\n", "", "if", "not", "np", ".", "isnan", "(", "a", ")", ":", "\n", "                        ", "base_image", "[", "row_pixel", ",", "column_pixel", ",", "2", "]", "=", "min", "(", "a", ",", "base_image", "[", "row_pixel", ",", "column_pixel", ",", "2", "]", ")", "\n", "", "if", "not", "np", ".", "isnan", "(", "omega", ")", ":", "\n", "                        ", "base_image", "[", "row_pixel", ",", "column_pixel", ",", "3", "]", "=", "min", "(", "omega", ",", "base_image", "[", "row_pixel", ",", "column_pixel", ",", "3", "]", ")", "\n", "", "", "", "", "", "", ""]], "home.repos.pwc.inspect_result.nachiket92_P2T.models.rl.MDP.__init__": [[13, 39], ["rl.MDP.get_transition_table", "s_next.to", "s_next_inv.to", "s_prev.to", "s_prev_inv.to"], "methods", ["home.repos.pwc.inspect_result.nachiket92_P2T.models.rl.MDP.get_transition_table"], ["    ", "def", "__init__", "(", "self", ",", "grid_dim", ",", "horizon", "=", "40", ",", "gamma", "=", "0.99", ",", "actions", "=", "4", ")", ":", "\n", "\n", "        ", "self", ".", "horizon", "=", "horizon", "\n", "self", ".", "gamma", "=", "gamma", "\n", "\n", "if", "actions", "==", "4", ":", "\n", "# Actions: [D, R, U, L, end]", "\n", "            ", "self", ".", "actions", "=", "[", "(", "1", ",", "0", ",", "0", ")", ",", "(", "0", ",", "1", ",", "0", ")", ",", "(", "-", "1", ",", "0", ",", "0", ")", ",", "(", "0", ",", "-", "1", ",", "0", ")", ",", "(", "0", ",", "0", ",", "1", ")", "]", "\n", "", "else", ":", "\n", "# Actions: [D, R, U, L, DR, UR, DL, UL, end]", "\n", "            ", "self", ".", "actions", "=", "[", "(", "1", ",", "0", ",", "0", ")", ",", "(", "0", ",", "1", ",", "0", ")", ",", "(", "-", "1", ",", "0", ",", "0", ")", ",", "(", "0", ",", "-", "1", ",", "0", ")", ",", "(", "1", ",", "1", ",", "0", ")", ",", "\n", "(", "-", "1", ",", "1", ",", "0", ")", ",", "(", "1", ",", "-", "1", ",", "0", ")", ",", "(", "-", "1", ",", "-", "1", ",", "0", ")", ",", "(", "0", ",", "0", ",", "1", ")", "]", "\n", "\n", "# Grid dimensions", "\n", "", "self", ".", "grid_dim", "=", "grid_dim", "\n", "\n", "# Transition tables", "\n", "s_next", ",", "s_next_inv", ",", "s_prev", ",", "s_prev_inv", "=", "self", ".", "get_transition_table", "(", ")", "\n", "self", ".", "s_next", "=", "s_next", ".", "to", "(", "device", ")", "\n", "self", ".", "s_next_inv", "=", "s_next_inv", ".", "to", "(", "device", ")", "\n", "self", ".", "s_prev", "=", "s_prev", ".", "to", "(", "device", ")", "\n", "self", ".", "s_prev_inv", "=", "s_prev_inv", ".", "to", "(", "device", ")", "\n", "self", ".", "s_next", ".", "requires_grad", "=", "False", "\n", "self", ".", "s_next_inv", ".", "requires_grad", "=", "False", "\n", "self", ".", "s_prev", ".", "requires_grad", "=", "False", "\n", "self", ".", "s_prev_inv", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.nachiket92_P2T.models.rl.MDP.get_transition_table": [[40, 84], ["torch.zeros().long", "torch.zeros().long", "torch.zeros", "torch.ones", "range", "range", "range", "range", "torch.zeros", "torch.zeros", "len", "len", "range", "range", "range", "range", "len", "len", "len", "rl.trc2id", "len", "rl.trc2id", "rl.trc2id", "int", "rl.trc2id", "int"], "methods", ["home.repos.pwc.inspect_result.nachiket92_P2T.models.rl.trc2id", "home.repos.pwc.inspect_result.nachiket92_P2T.models.rl.trc2id", "home.repos.pwc.inspect_result.nachiket92_P2T.models.rl.trc2id", "home.repos.pwc.inspect_result.nachiket92_P2T.models.rl.trc2id"], ["", "def", "get_transition_table", "(", "self", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        Returns look up tables for next state and previous state for a state-action pair. Additionally returns\n        look up tables with invalid flags for invalid transitions\n        \"\"\"", "\n", "s_next", "=", "torch", ".", "zeros", "(", "(", "len", "(", "self", ".", "actions", ")", ",", "2", "*", "self", ".", "grid_dim", "[", "0", "]", "*", "self", ".", "grid_dim", "[", "1", "]", ")", ")", ".", "long", "(", ")", "\n", "s_prev", "=", "torch", ".", "zeros", "(", "(", "len", "(", "self", ".", "actions", ")", ",", "2", "*", "self", ".", "grid_dim", "[", "0", "]", "*", "self", ".", "grid_dim", "[", "1", "]", ")", ")", ".", "long", "(", ")", "\n", "\n", "# Some actions are invalid for certain states, eg. at the boundaries of the grid, or transitions out of goal", "\n", "# states. Flags for these are stored in s_next_inv and s_prev_inv", "\n", "s_next_inv", "=", "torch", ".", "zeros", "(", "(", "len", "(", "self", ".", "actions", ")", ",", "2", "*", "self", ".", "grid_dim", "[", "0", "]", "*", "self", ".", "grid_dim", "[", "1", "]", ")", ")", "\n", "s_prev_inv", "=", "torch", ".", "ones", "(", "(", "len", "(", "self", ".", "actions", ")", ",", "2", "*", "self", ".", "grid_dim", "[", "0", "]", "*", "self", ".", "grid_dim", "[", "1", "]", ")", ")", "\n", "\n", "# Pointers to the next state given current state and action:", "\n", "for", "t", "in", "range", "(", "2", ")", ":", "\n", "            ", "for", "m", "in", "range", "(", "self", ".", "grid_dim", "[", "0", "]", ")", ":", "\n", "                ", "for", "n", "in", "range", "(", "self", ".", "grid_dim", "[", "1", "]", ")", ":", "\n", "                    ", "for", "k", "in", "range", "(", "len", "(", "self", ".", "actions", ")", ")", ":", "\n", "                        ", "s_type", "=", "self", ".", "actions", "[", "k", "]", "[", "2", "]", "\n", "row", "=", "m", "+", "self", ".", "actions", "[", "k", "]", "[", "0", "]", "\n", "col", "=", "n", "+", "self", ".", "actions", "[", "k", "]", "[", "1", "]", "\n", "orig_id", "=", "trc2id", "(", "t", ",", "m", ",", "n", ",", "self", ".", "grid_dim", ")", "\n", "if", "0", "<=", "row", "<", "self", ".", "grid_dim", "[", "0", "]", "and", "0", "<=", "col", "<", "self", ".", "grid_dim", "[", "1", "]", "and", "t", "==", "0", ":", "\n", "                            ", "next_id", "=", "trc2id", "(", "s_type", ",", "row", ",", "col", ",", "self", ".", "grid_dim", ")", "\n", "s_next", "[", "k", ",", "orig_id", "]", "=", "int", "(", "next_id", ")", "\n", "", "else", ":", "\n", "                            ", "s_next_inv", "[", "k", ",", "orig_id", "]", "=", "-", "math", ".", "inf", "\n", "\n", "# Pointers to previous state, given current state and action taken to get there:", "\n", "", "", "", "", "", "for", "t", "in", "range", "(", "2", ")", ":", "\n", "            ", "for", "m", "in", "range", "(", "self", ".", "grid_dim", "[", "0", "]", ")", ":", "\n", "                ", "for", "n", "in", "range", "(", "self", ".", "grid_dim", "[", "1", "]", ")", ":", "\n", "                    ", "for", "k", "in", "range", "(", "len", "(", "self", ".", "actions", ")", ")", ":", "\n", "                        ", "s_type", "=", "t", "-", "self", ".", "actions", "[", "k", "]", "[", "2", "]", "\n", "row", "=", "m", "-", "self", ".", "actions", "[", "k", "]", "[", "0", "]", "\n", "col", "=", "n", "-", "self", ".", "actions", "[", "k", "]", "[", "1", "]", "\n", "orig_id", "=", "trc2id", "(", "t", ",", "m", ",", "n", ",", "self", ".", "grid_dim", ")", "\n", "if", "s_type", "==", "0", "and", "0", "<=", "row", "<", "self", ".", "grid_dim", "[", "0", "]", "and", "0", "<=", "col", "<", "self", ".", "grid_dim", "[", "1", "]", ":", "\n", "                            ", "prev_id", "=", "trc2id", "(", "s_type", ",", "row", ",", "col", ",", "self", ".", "grid_dim", ")", "\n", "s_prev", "[", "k", ",", "orig_id", "]", "=", "int", "(", "prev_id", ")", "\n", "", "else", ":", "\n", "                            ", "s_prev_inv", "[", "k", ",", "orig_id", "]", "=", "0", "\n", "\n", "", "", "", "", "", "return", "s_next", ",", "s_next_inv", ",", "s_prev", ",", "s_prev_inv", "\n", "\n"]], "home.repos.pwc.inspect_result.nachiket92_P2T.models.rl.solve": [[86, 101], ["rl.backward", "rl.forward", "rl.vec2grid"], "function", ["home.repos.pwc.inspect_result.nachiket92_P2T.models.rl.backward", "home.repos.pwc.inspect_result.nachiket92_P2T.models.traj_generator.TrajGenerator.forward", "home.repos.pwc.inspect_result.nachiket92_P2T.models.rl.vec2grid"], ["", "", "def", "solve", "(", "mdp", ":", "MDP", ",", "r", ":", "torch", ".", "Tensor", ",", "initial_state", ":", "Tuple", "[", "int", ",", "int", "]", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "    ", "\"\"\"\n    MaxEnt RL. Solves for MaxEnt policy given current reward. Returns MaxEnt policy and state visitation frequencies\n    given initial state\n    :param mdp: MDP object\n    :param r: Reward tensor, shape [batch_size, 2, grid_dim, grid_dim]\n    :param initial_state: Tuple representing row and column of initial state\n    :return svf: Tensor of SVFs of MaxEnt policy, shape [batch_size, 2, grid_dim, grid_dim]\n    :return pi: Policy tensor, shape [batch_size, horizon, num_actions, num_states]\n    \"\"\"", "\n", "\n", "pi", "=", "backward", "(", "mdp", ",", "r", ")", "\n", "svf", "=", "forward", "(", "mdp", ",", "pi", ",", "initial_state", ")", "\n", "svf", "=", "vec2grid", "(", "svf", ",", "mdp", ".", "grid_dim", ")", "\n", "return", "svf", ",", "pi", "\n", "\n"]], "home.repos.pwc.inspect_result.nachiket92_P2T.models.rl.backward": [[103, 145], ["rl.grid2vec", "torch.zeros_like", "int", "torch.tensor().unsqueeze().unsqueeze", "batch_idcs.repeat.repeat", "torch.zeros_like", "torch.zeros().to", "range", "len", "torch.logsumexp", "torch.exp", "torch.tensor().unsqueeze", "torch.zeros", "torch.isnan", "grid2vec.unsqueeze().repeat", "torch.logsumexp.unsqueeze().repeat", "torch.tensor", "range", "grid2vec.unsqueeze", "torch.logsumexp.unsqueeze"], "function", ["home.repos.pwc.inspect_result.nachiket92_P2T.models.rl.grid2vec"], ["", "def", "backward", "(", "mdp", ":", "MDP", ",", "r", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Approximate value iteration with goal and path states\n    :param mdp: MDP object\n    :param r: Reward tensor, shape [batch_size, 2, grid_dim, grid_dim]\n    :return pi: Policy tensor, shape [batch_size, horizon, num_actions, num_states]\n    \"\"\"", "\n", "# Convert r to a vector", "\n", "r", "=", "grid2vec", "(", "r", ")", "\n", "\n", "# Initialize V tensor", "\n", "v", "=", "torch", ".", "zeros_like", "(", "r", ")", "\n", "num_path_states", "=", "int", "(", "v", ".", "shape", "[", "1", "]", "/", "2", ")", "\n", "\n", "# Initialize path state V to -inf", "\n", "v", "[", ":", ",", "0", ":", "num_path_states", "]", "=", "-", "math", ".", "inf", "\n", "\n", "# Initialize goal state V to goal rewards", "\n", "v", "[", ":", ",", "num_path_states", ":", "]", "=", "r", "[", ":", ",", "num_path_states", ":", "]", "\n", "\n", "# Batch indices", "\n", "batch_idcs", "=", "torch", ".", "tensor", "(", "range", "(", "r", ".", "shape", "[", "0", "]", ")", ")", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", "\n", "batch_idcs", "=", "batch_idcs", ".", "repeat", "(", "1", ",", "len", "(", "mdp", ".", "actions", ")", ",", "r", ".", "shape", "[", "1", "]", ")", "\n", "\n", "# Initialize Q and pi tensors", "\n", "q", "=", "torch", ".", "zeros_like", "(", "v", "[", "batch_idcs", ",", "mdp", ".", "s_next", "]", ")", "\n", "pi", "=", "torch", ".", "zeros", "(", "q", ".", "shape", "[", "0", "]", ",", "mdp", ".", "horizon", ",", "q", ".", "shape", "[", "1", "]", ",", "q", ".", "shape", "[", "2", "]", ")", ".", "to", "(", "device", ")", "\n", "\n", "# Set requires grad to 0 to save memory", "\n", "pi", ".", "requires_grad", "=", "False", "\n", "v", ".", "requires_grad", "=", "False", "\n", "q", ".", "requires_grad", "=", "False", "\n", "\n", "# Backward pass of DP", "\n", "for", "k", "in", "range", "(", "mdp", ".", "horizon", ")", ":", "\n", "        ", "q", "=", "r", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "q", ".", "shape", "[", "1", "]", ",", "1", ")", "+", "mdp", ".", "gamma", "*", "v", "[", "batch_idcs", ",", "mdp", ".", "s_next", "]", "+", "mdp", ".", "s_next_inv", "\n", "v", "=", "torch", ".", "logsumexp", "(", "q", ",", "dim", "=", "1", ")", "\n", "v", "[", ":", ",", "num_path_states", ":", "]", "=", "r", "[", ":", ",", "num_path_states", ":", "]", "\n", "pi", "[", ":", ",", "mdp", ".", "horizon", "-", "k", "-", "1", ",", ":", ",", ":", "]", "=", "torch", ".", "exp", "(", "q", "-", "v", ".", "unsqueeze", "(", "1", ")", ".", "repeat", "(", "1", ",", "q", ".", "shape", "[", "1", "]", ",", "1", ")", ")", "\n", "", "pi", "[", "torch", ".", "isnan", "(", "pi", ")", "]", "=", "0", "\n", "\n", "return", "pi", "\n", "\n"]], "home.repos.pwc.inspect_result.nachiket92_P2T.models.rl.forward": [[148, 181], ["rl.trc2id", "torch.zeros().to", "torch.arange().repeat().permute", "torch.tensor().unsqueeze().unsqueeze().repeat", "range", "torch.sum", "torch.sum", "torch.zeros", "torch.arange().repeat", "torch.tensor().unsqueeze().unsqueeze", "torch.arange", "torch.tensor().unsqueeze", "len", "torch.tensor", "range"], "function", ["home.repos.pwc.inspect_result.nachiket92_P2T.models.rl.trc2id"], ["", "def", "forward", "(", "mdp", ":", "MDP", ",", "pi", ":", "torch", ".", "Tensor", ",", "initial_state", ":", "Tuple", "[", "int", ",", "int", "]", ")", "->", "torch", ".", "Tensor", ":", "\n", "    ", "\"\"\"\n    Policy propagation. Propagates MaxEnt policy given initial state to return SVFs\n    :param mdp: MDP object\n    :param pi: Policy tensor, shape [batch_size, horizon, num_actions, num_states]\n    :param initial_state: Tuple for initial state\n    :return svf: Tensor of SVFs, shape [batch_size, num_states]\n    \"\"\"", "\n", "\n", "# Initialize state visitation frequencies", "\n", "c_row", "=", "initial_state", "[", "0", "]", "\n", "c_col", "=", "initial_state", "[", "1", "]", "\n", "c_id", "=", "trc2id", "(", "0", ",", "c_row", ",", "c_col", ",", "mdp", ".", "grid_dim", ")", "\n", "svf_t", "=", "torch", ".", "zeros", "(", "pi", ".", "shape", "[", "0", "]", ",", "mdp", ".", "horizon", ",", "pi", ".", "shape", "[", "3", "]", ")", ".", "to", "(", "device", ")", "\n", "svf_t", ".", "requires_grad", "=", "False", "\n", "svf_t", "[", ":", ",", "0", ",", "c_id", "]", "=", "1", "\n", "\n", "# Action indices", "\n", "a_idcs", "=", "torch", ".", "arange", "(", "len", "(", "mdp", ".", "actions", ")", ")", ".", "repeat", "(", "pi", ".", "shape", "[", "3", "]", ",", "1", ")", ".", "permute", "(", "1", ",", "0", ")", "\n", "\n", "# Batch indices", "\n", "batch_idcs", "=", "torch", ".", "tensor", "(", "range", "(", "pi", ".", "shape", "[", "0", "]", ")", ")", ".", "unsqueeze", "(", "1", ")", ".", "unsqueeze", "(", "2", ")", ".", "repeat", "(", "1", ",", "pi", ".", "shape", "[", "2", "]", ",", "pi", ".", "shape", "[", "3", "]", ")", "\n", "\n", "# Forward pass of DP to compute state visitation frequencies", "\n", "for", "t", "in", "range", "(", "mdp", ".", "horizon", "-", "1", ")", ":", "\n", "        ", "d_next", "=", "pi", "[", ":", ",", "t", ",", "a_idcs", ",", "mdp", ".", "s_prev", "]", "*", "svf_t", "[", ":", ",", "t", ",", ":", "]", "[", "batch_idcs", ",", "mdp", ".", "s_prev", "]", "*", "mdp", ".", "s_prev_inv", "\n", "svf_t", "[", ":", ",", "t", "+", "1", ",", ":", "]", "=", "torch", ".", "sum", "(", "d_next", ",", "dim", "=", "1", ")", "\n", "\n", "# Sum over MDP horizon", "\n", "", "svf", "=", "torch", ".", "sum", "(", "svf_t", ",", "dim", "=", "1", ")", "\n", "svf", ".", "requires_grad", "=", "False", "\n", "\n", "return", "svf", "\n", "\n"]], "home.repos.pwc.inspect_result.nachiket92_P2T.models.rl.sample_policy": [[183, 253], ["pi.to.permute", "mdp.s_next.permute", "pi.to.to", "s_next.to.to", "torch.zeros().to", "torch.zeros().to", "rl.trc2id", "torch.tensor().to", "torch.tensor().to", "range", "torch.zeros().to.reshape", "scene_tensor.reshape.unsqueeze().repeat().permute", "scene_tensor.reshape.reshape", "agent_tensor.reshape.unsqueeze().repeat().permute", "agent_tensor.reshape.reshape", "utils.get_plan_feats", "scene_feats.reshape.reshape", "agent_feats.reshape.reshape", "torch.tensor", "torch.ones().long().to", "rl.id2trc", "r.reshape", "c.reshape", "torch.tensor().unsqueeze().repeat().permute().reshape().to", "torch.distributions.Categorical().sample", "range", "torch.zeros", "torch.zeros", "torch.tensor", "torch.tensor", "scene_tensor.reshape.unsqueeze().repeat", "agent_tensor.reshape.unsqueeze().repeat", "torch.ones().long", "numpy.linspace", "numpy.linspace", "torch.tensor().unsqueeze().repeat().permute().reshape", "torch.distributions.Categorical", "scene_tensor.reshape.unsqueeze", "agent_tensor.reshape.unsqueeze", "torch.ones", "torch.tensor().unsqueeze().repeat().permute", "r.long", "c.long", "torch.tensor().unsqueeze().repeat", "torch.tensor().unsqueeze", "torch.tensor", "range"], "function", ["home.repos.pwc.inspect_result.nachiket92_P2T.models.rl.trc2id", "home.repos.pwc.inspect_result.nachiket92_P2T.None.utils.get_plan_feats", "home.repos.pwc.inspect_result.nachiket92_P2T.models.rl.id2trc"], ["", "def", "sample_policy", "(", "pi", ",", "mdp", ",", "num_samples", ",", "grid_extent", ",", "initial_state", ",", "scene_tensor", ",", "agent_tensor", ")", ":", "\n", "    ", "\"\"\"\n    Samples state sequences from MaxEnt policy:\n\n    Inputs\n    pi: policy obtained by solving approximate value iteration\n    mdp: Markov decision process object\n    num_samples: number of state sequences to sample from policy\n    grid_extents: (x_min, x_max, y_min, y_max)\n    initial state: (row, column)\n    scene_tensor: Tensor of image features extracted by CNN backbone\n    agent_tensor: Tensor of surrounding agent states\n\n    Output\n    waypts: BEV coordinates for states in the sampled plan\n    scene_feats: sequences of scene features corresponding to sampled plan\n    agent_feats: sequences of agent features corresponding to sampled plan\n    \"\"\"", "\n", "\n", "pi", "=", "pi", ".", "permute", "(", "0", ",", "1", ",", "3", ",", "2", ")", "\n", "pi", "[", ":", ",", ":", ",", "pi", ".", "shape", "[", "2", "]", "//", "2", ":", ",", "-", "1", "]", "=", "1", "\n", "s_next", "=", "mdp", ".", "s_next", ".", "permute", "(", "1", ",", "0", ")", "\n", "s_next", "[", "s_next", ".", "shape", "[", "0", "]", "//", "2", ":", ",", "-", "1", "]", "=", "torch", ".", "tensor", "(", "range", "(", "s_next", ".", "shape", "[", "0", "]", "//", "2", ")", ")", "+", "s_next", ".", "shape", "[", "0", "]", "//", "2", "\n", "\n", "pi", "=", "pi", ".", "to", "(", "device", ")", "\n", "s_next", "=", "s_next", ".", "to", "(", "device", ")", "\n", "\n", "batch_size", "=", "pi", ".", "shape", "[", "0", "]", "\n", "grid_idcs", "=", "torch", ".", "zeros", "(", "batch_size", ",", "num_samples", ",", "mdp", ".", "horizon", ",", "2", ")", ".", "to", "(", "device", ")", "\n", "waypts", "=", "torch", ".", "zeros", "(", "batch_size", ",", "num_samples", ",", "mdp", ".", "horizon", ",", "2", ")", ".", "to", "(", "device", ")", "\n", "s0", "=", "trc2id", "(", "0", ",", "initial_state", "[", "0", "]", ",", "initial_state", "[", "1", "]", ",", "mdp", ".", "grid_dim", ")", "\n", "s", "=", "torch", ".", "ones", "(", "batch_size", "*", "num_samples", ")", ".", "long", "(", ")", ".", "to", "(", "device", ")", "*", "s0", "\n", "grid_size", "=", "grid_extent", "[", "1", "]", "-", "grid_extent", "[", "0", "]", "\n", "row_centers", "=", "torch", ".", "tensor", "(", "np", ".", "linspace", "(", "grid_extent", "[", "3", "]", "-", "grid_size", "/", "(", "mdp", ".", "grid_dim", "[", "0", "]", "*", "2", ")", ",", "\n", "grid_extent", "[", "2", "]", "+", "grid_size", "/", "(", "mdp", ".", "grid_dim", "[", "0", "]", "*", "2", ")", ",", "\n", "mdp", ".", "grid_dim", "[", "0", "]", ")", ")", ".", "to", "(", "device", ")", "\n", "col_centers", "=", "torch", ".", "tensor", "(", "np", ".", "linspace", "(", "grid_extent", "[", "0", "]", "+", "grid_size", "/", "(", "mdp", ".", "grid_dim", "[", "1", "]", "*", "2", ")", ",", "\n", "grid_extent", "[", "1", "]", "-", "grid_size", "/", "(", "mdp", ".", "grid_dim", "[", "1", "]", "*", "2", ")", ",", "\n", "mdp", ".", "grid_dim", "[", "1", "]", ")", ")", ".", "to", "(", "device", ")", "\n", "\n", "for", "n", "in", "range", "(", "mdp", ".", "horizon", ")", ":", "\n", "# Populate grid_idcs and waypts", "\n", "        ", "t", ",", "r", ",", "c", "=", "id2trc", "(", "s", ",", "mdp", ".", "grid_dim", ")", "\n", "r", "=", "r", "*", "(", "1", "-", "t", ")", "\n", "c", "=", "c", "*", "(", "1", "-", "t", ")", "\n", "waypts", "[", ":", ",", ":", ",", "n", ",", "0", "]", "=", "(", "row_centers", "[", "r", ".", "long", "(", ")", "]", "*", "(", "1", "-", "t", ")", ")", ".", "reshape", "(", "batch_size", ",", "num_samples", ")", "\n", "waypts", "[", ":", ",", ":", ",", "n", ",", "1", "]", "=", "(", "col_centers", "[", "c", ".", "long", "(", ")", "]", "*", "(", "1", "-", "t", ")", ")", ".", "reshape", "(", "batch_size", ",", "num_samples", ")", "\n", "grid_idcs", "[", ":", ",", ":", ",", "n", ",", "0", "]", "=", "r", ".", "reshape", "(", "batch_size", ",", "num_samples", ")", "\n", "grid_idcs", "[", ":", ",", ":", ",", "n", ",", "1", "]", "=", "c", ".", "reshape", "(", "batch_size", ",", "num_samples", ")", "\n", "\n", "# Sample next actions", "\n", "idcs", "=", "torch", ".", "tensor", "(", "range", "(", "batch_size", ")", ")", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "num_samples", ",", "1", ")", ".", "permute", "(", "1", ",", "0", ")", ".", "reshape", "(", "-", "1", ")", ".", "to", "(", "device", ")", "\n", "pi_s", "=", "pi", "[", "idcs", ",", "n", ",", "s", "]", "\n", "a", "=", "Categorical", "(", "pi_s", ")", ".", "sample", "(", ")", "\n", "\n", "# Obtain next states", "\n", "s", "=", "s_next", "[", "s", ",", "a", "]", "\n", "\n", "", "all_grid_idcs", "=", "grid_idcs", ".", "reshape", "(", "batch_size", "*", "num_samples", ",", "mdp", ".", "horizon", ",", "2", ")", "\n", "scene_tensor", "=", "scene_tensor", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "num_samples", ",", "1", ",", "1", ",", "1", ",", "1", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ",", "4", ")", "\n", "scene_tensor", "=", "scene_tensor", ".", "reshape", "(", "-", "1", ",", "scene_tensor", ".", "shape", "[", "2", "]", ",", "scene_tensor", ".", "shape", "[", "3", "]", ",", "scene_tensor", ".", "shape", "[", "4", "]", ")", "\n", "agent_tensor", "=", "agent_tensor", ".", "unsqueeze", "(", "0", ")", ".", "repeat", "(", "num_samples", ",", "1", ",", "1", ",", "1", ",", "1", ")", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ",", "4", ")", "\n", "agent_tensor", "=", "agent_tensor", ".", "reshape", "(", "-", "1", ",", "agent_tensor", ".", "shape", "[", "2", "]", ",", "agent_tensor", ".", "shape", "[", "3", "]", ",", "agent_tensor", ".", "shape", "[", "4", "]", ")", "\n", "scene_feats", ",", "agent_feats", "=", "u", ".", "get_plan_feats", "(", "all_grid_idcs", ",", "\n", "scene_tensor", ",", "\n", "agent_tensor", ")", "\n", "scene_feats", "=", "scene_feats", ".", "reshape", "(", "batch_size", ",", "num_samples", ",", "mdp", ".", "horizon", ",", "scene_feats", ".", "shape", "[", "2", "]", ")", "\n", "agent_feats", "=", "agent_feats", ".", "reshape", "(", "batch_size", ",", "num_samples", ",", "mdp", ".", "horizon", ",", "agent_feats", ".", "shape", "[", "2", "]", ")", "\n", "\n", "return", "waypts", ",", "scene_feats", ",", "agent_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.nachiket92_P2T.models.rl.vec2grid": [[255, 262], ["tuple", "v.view", "list"], "function", ["None"], ["", "def", "vec2grid", "(", "v", ",", "grid_dim", ")", ":", "\n", "    ", "\"\"\"\n    Convert vector to grid\n    \"\"\"", "\n", "new_shape", "=", "tuple", "(", "list", "(", "v", ".", "shape", ")", "[", ":", "-", "1", "]", "+", "[", "2", ",", "grid_dim", "[", "0", "]", ",", "grid_dim", "[", "1", "]", "]", ")", "\n", "g", "=", "v", ".", "view", "(", "new_shape", ")", "\n", "return", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.nachiket92_P2T.models.rl.grid2vec": [[264, 272], ["tuple", "g.view", "list"], "function", ["None"], ["", "def", "grid2vec", "(", "g", ")", ":", "\n", "    ", "\"\"\"\n    Convert grid to vector\n    \"\"\"", "\n", "vec_len", "=", "g", ".", "shape", "[", "-", "1", "]", "*", "g", ".", "shape", "[", "-", "2", "]", "*", "g", ".", "shape", "[", "-", "3", "]", "\n", "new_shape", "=", "tuple", "(", "list", "(", "g", ".", "shape", ")", "[", ":", "-", "3", "]", "+", "[", "vec_len", "]", ")", "\n", "v", "=", "g", ".", "view", "(", "new_shape", ")", "\n", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.nachiket92_P2T.models.rl.trc2id": [[274, 280], ["None"], "function", ["None"], ["", "def", "trc2id", "(", "t", ",", "row", ",", "col", ",", "grid_dim", ")", ":", "\n", "    ", "\"\"\"\n    Convert row, col, cell type to state id\n    \"\"\"", "\n", "s_id", "=", "(", "t", "*", "grid_dim", "[", "0", "]", "*", "grid_dim", "[", "1", "]", "+", "row", "*", "grid_dim", "[", "1", "]", "+", "col", ")", "//", "1", "\n", "return", "s_id", "\n", "\n"]], "home.repos.pwc.inspect_result.nachiket92_P2T.models.rl.id2trc": [[282, 290], ["None"], "function", ["None"], ["", "def", "id2trc", "(", "s_id", ",", "grid_dim", ")", ":", "\n", "    ", "\"\"\"\n    Convert state id to row, col, cell type\n    \"\"\"", "\n", "t", "=", "s_id", "//", "(", "grid_dim", "[", "0", "]", "*", "grid_dim", "[", "1", "]", ")", "\n", "r", "=", "(", "s_id", "-", "t", "*", "grid_dim", "[", "0", "]", "*", "grid_dim", "[", "1", "]", ")", "//", "grid_dim", "[", "1", "]", "\n", "c", "=", "(", "s_id", "-", "t", "*", "grid_dim", "[", "0", "]", "*", "grid_dim", "[", "1", "]", "-", "r", "*", "grid_dim", "[", "1", "]", ")", "//", "1", "\n", "return", "t", ",", "r", ",", "c", "\n", "", ""]], "home.repos.pwc.inspect_result.nachiket92_P2T.models.reward_model.RewardModel.__init__": [[13, 51], ["torch.Module.__init__", "reward_model.init_conv_layers", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.LogSigmoid", "torch.nn.LogSigmoid", "torch.nn.LogSigmoid", "torch.nn.LogSigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.Sigmoid", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax", "torch.nn.LogSoftmax"], "methods", ["home.repos.pwc.inspect_result.nachiket92_P2T.models.traj_generator.TrajGenerator.__init__", "home.repos.pwc.inspect_result.nachiket92_P2T.models.reward_model.init_conv_layers"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "\"\"\"\n        Reward model over 2-D grid\n        args to include\n        'backbone': str CNN backbone to use (resnet34 or resnet50)\n        'scene_feat_size': int Size of scene features at each grid cell\n        'grid_cell_size': int Kernel size to pool scene features to map to grid dimensions\n        'agg_sizes': Tuple[int, int] 1x1 conv layer channel dimensions to output rewards at each cell\n        \"\"\"", "\n", "\n", "super", "(", "RewardModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# Unpack arguments:", "\n", "self", ".", "grid_cell_size", "=", "args", "[", "'grid_cell_size'", "]", "\n", "self", ".", "scene_feat_size", "=", "args", "[", "'scene_feat_size'", "]", "\n", "self", ".", "agg_sizes", "=", "args", "[", "'agg_sizes'", "]", "\n", "\n", "# Initialize model parameters:", "\n", "self", ".", "feats", ",", "feat_size", "=", "init_conv_layers", "(", "args", "[", "'backbone'", "]", ")", "\n", "\n", "# Conv layers to aggregate context at each grid location", "\n", "self", ".", "conv_grid", "=", "nn", ".", "Conv2d", "(", "feat_size", ",", "self", ".", "scene_feat_size", ",", "self", ".", "grid_cell_size", ",", "stride", "=", "self", ".", "grid_cell_size", ")", "\n", "\n", "# Layers for aggregating motion and scene features:", "\n", "self", ".", "agg1_goal", "=", "nn", ".", "Conv2d", "(", "self", ".", "scene_feat_size", "+", "3", ",", "self", ".", "agg_sizes", "[", "0", "]", ",", "1", ")", "\n", "self", ".", "agg2_goal", "=", "nn", ".", "Conv2d", "(", "self", ".", "agg_sizes", "[", "0", "]", ",", "self", ".", "agg_sizes", "[", "1", "]", ",", "1", ")", "\n", "self", ".", "agg1_path", "=", "nn", ".", "Conv2d", "(", "self", ".", "scene_feat_size", "+", "3", ",", "self", ".", "agg_sizes", "[", "0", "]", ",", "1", ")", "\n", "self", ".", "agg2_path", "=", "nn", ".", "Conv2d", "(", "self", ".", "agg_sizes", "[", "0", "]", ",", "self", ".", "agg_sizes", "[", "1", "]", ",", "1", ")", "\n", "\n", "# Output layers:", "\n", "self", ".", "op_goal", "=", "nn", ".", "Conv2d", "(", "self", ".", "agg_sizes", "[", "1", "]", ",", "1", ",", "1", ")", "\n", "self", ".", "op_path", "=", "nn", ".", "Conv2d", "(", "self", ".", "agg_sizes", "[", "1", "]", ",", "1", ",", "1", ")", "\n", "\n", "# Non-linearities:", "\n", "self", ".", "relu", "=", "torch", ".", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "logsigmoid", "=", "torch", ".", "nn", ".", "LogSigmoid", "(", ")", "\n", "self", ".", "sigmoid", "=", "torch", ".", "nn", ".", "Sigmoid", "(", ")", "\n", "self", ".", "logsoftmax", "=", "torch", ".", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nachiket92_P2T.models.reward_model.RewardModel.forward": [[52, 75], ["reward_model.RewardModel.feats", "reward_model.RewardModel.relu", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "reward_model.RewardModel.logsigmoid", "reward_model.RewardModel.logsigmoid", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "reward_model.RewardModel.conv_grid", "reward_model.RewardModel.op_goal", "reward_model.RewardModel.op_path", "reward_model.RewardModel.relu", "reward_model.RewardModel.relu", "reward_model.RewardModel.agg2_goal", "reward_model.RewardModel.agg2_path", "reward_model.RewardModel.relu", "reward_model.RewardModel.relu", "reward_model.RewardModel.agg1_goal", "reward_model.RewardModel.agg1_path"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "motion_feats", ":", "torch", ".", "Tensor", ",", "img", ":", "torch", ".", "Tensor", ")", "->", "Tuple", "[", "torch", ".", "Tensor", ",", "torch", ".", "Tensor", "]", ":", "\n", "        ", "\"\"\"\n        Forward pass for reward model\n        :param motion_feats: Tensor of motion features shape [batch_size, motion_feat_size, grid_dim, grid_dim]\n        :param img: Tensor raster map shape [batch_size, 3, img_size, img_size]\n        :return r: Tensor of reward maps shape [batch_size, 2, grid_dim, grid_dim]\n        :return img_feats: Tensor of scene features shape [batch_size, scene_feat_size, grid_dim, grid_dim]\n        \"\"\"", "\n", "# Encode map/scene", "\n", "img_feats", "=", "self", ".", "feats", "(", "img", ")", "\n", "img_feats", "=", "self", ".", "relu", "(", "self", ".", "conv_grid", "(", "img_feats", ")", ")", "\n", "\n", "# Concatenate motion and position features", "\n", "feats", "=", "torch", ".", "cat", "(", "(", "img_feats", ",", "motion_feats", ")", ",", "dim", "=", "1", ")", "\n", "\n", "# Output goal and path rewards", "\n", "r_goal", "=", "self", ".", "logsigmoid", "(", "self", ".", "op_goal", "(", "self", ".", "relu", "(", "self", ".", "agg2_goal", "(", "self", ".", "relu", "(", "self", ".", "agg1_goal", "(", "feats", ")", ")", ")", ")", ")", ")", "\n", "r_path", "=", "self", ".", "logsigmoid", "(", "self", ".", "op_path", "(", "self", ".", "relu", "(", "self", ".", "agg2_path", "(", "self", ".", "relu", "(", "self", ".", "agg1_path", "(", "feats", ")", ")", ")", ")", ")", ")", "\n", "\n", "# Concatenate along channel dimension", "\n", "r", "=", "torch", ".", "cat", "(", "(", "r_path", ",", "r_goal", ")", ",", "1", ")", "\n", "\n", "return", "r", ",", "img_feats", "\n", "\n"]], "home.repos.pwc.inspect_result.nachiket92_P2T.models.reward_model.init_conv_layers": [[77, 89], ["torchvision.resnet34", "torch.Sequential", "torchvision.resnet50", "torch.Sequential"], "function", ["None"], ["", "", "def", "init_conv_layers", "(", "backbone", ":", "str", ")", "->", "Tuple", "[", "nn", ".", "Sequential", ",", "int", "]", ":", "\n", "    ", "\"\"\"\n    Helper function to initialize conv layers for extracting map features\n    :param backbone: CNN backbone to use\n    :return: Tuple with nn.Sequential for first few layers of  backbone and channel dim of final returned layer\n    \"\"\"", "\n", "if", "backbone", "==", "'resnet34'", ":", "\n", "        ", "resnet34", "=", "mdl", ".", "resnet34", "(", "pretrained", "=", "True", ")", "\n", "return", "nn", ".", "Sequential", "(", "resnet34", ".", "conv1", ",", "resnet34", ".", "bn1", ",", "resnet34", ".", "relu", ",", "resnet34", ".", "maxpool", ",", "resnet34", ".", "layer1", ")", ",", "64", "\n", "", "elif", "backbone", "==", "'resnet50'", ":", "\n", "        ", "resnet50", "=", "mdl", ".", "resnet50", "(", "pretrained", "=", "True", ")", "\n", "return", "nn", ".", "Sequential", "(", "resnet50", ".", "conv1", ",", "resnet50", ".", "bn1", ",", "resnet50", ".", "relu", ",", "resnet50", ".", "maxpool", ",", "resnet50", ".", "layer1", ")", ",", "256", "\n", "", "", ""]], "home.repos.pwc.inspect_result.nachiket92_P2T.models.traj_generator.TrajGenerator.__init__": [[11, 71], ["torch.Module.__init__", "torch.GRU", "torch.GRU", "torch.Linear", "torch.Linear", "torch.GRU", "torch.GRU", "torch.GRUCell", "torch.GRUCell", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Softmax", "torch.Softmax", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.nachiket92_P2T.models.traj_generator.TrajGenerator.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "\"\"\"\n        Trajectory generator that outputs a trajectory conditioned on grid based plan\n\n        args to include\n        'coord_emb_size': int Embedding fc layer size for x-y coordinates\n        'traj_enc_size': int Size of trajectory encoder\n        'waypt_enc_size': int Size of waypoint encoder\n        'att_size': int Attention layer size\n        'op_length': int Length (prediction horizon) of output trajectories\n        'use_agents': int Whether or not to use agents (0 or 1)\n        'use_scene': int Whether or not to use scene feats (0 or 1)\n        'use_motion_states': int Whether or not to use vel, acc, turn rate for encoding history (0 or 1)\n        'scene_feat_size': int Size of scene features at each grid cell\n        'agent_feat_size': int Size of agent features at each grid cell\n        'scene_emb_size': int Embedding fc layer size for scene features\n        'agent_emb_size': int Embedding fc layer size for surrounding agent features\n        \"\"\"", "\n", "\n", "super", "(", "TrajGenerator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "coord_emb_size", "=", "args", "[", "'coord_emb_size'", "]", "\n", "self", ".", "traj_enc_size", "=", "args", "[", "'traj_enc_size'", "]", "\n", "self", ".", "waypt_enc_size", "=", "args", "[", "'waypt_enc_size'", "]", "\n", "self", ".", "att_size", "=", "args", "[", "'att_size'", "]", "\n", "self", ".", "op_length", "=", "args", "[", "'op_length'", "]", "\n", "self", ".", "use_agents", "=", "args", "[", "'use_agents'", "]", "# 0 or 1", "\n", "self", ".", "use_scene", "=", "args", "[", "'use_scene'", "]", "# 0 or 1", "\n", "self", ".", "use_motion_states", "=", "args", "[", "'use_motion_states'", "]", "# 0 or 1", "\n", "self", ".", "scene_feat_size", "=", "args", "[", "'scene_feat_size'", "]", "\n", "self", ".", "scene_emb_size", "=", "args", "[", "'scene_emb_size'", "]", "\n", "self", ".", "agent_feat_size", "=", "args", "[", "'agent_feat_size'", "]", "\n", "self", ".", "agent_emb_size", "=", "args", "[", "'agent_emb_size'", "]", "\n", "\n", "# Track history encoder:", "\n", "if", "self", ".", "use_motion_states", ":", "\n", "            ", "self", ".", "hist_emb", "=", "nn", ".", "Linear", "(", "5", ",", "self", ".", "coord_emb_size", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "hist_emb", "=", "nn", ".", "Linear", "(", "2", ",", "self", ".", "coord_emb_size", ")", "\n", "", "self", ".", "hist_enc_gru", "=", "nn", ".", "GRU", "(", "self", ".", "coord_emb_size", ",", "self", ".", "traj_enc_size", ")", "\n", "\n", "# Waypoint encoder:", "\n", "self", ".", "waypt_coord_emb", "=", "nn", ".", "Linear", "(", "2", ",", "self", ".", "coord_emb_size", ")", "\n", "if", "self", ".", "use_scene", ":", "\n", "            ", "self", ".", "waypt_scene_emb", "=", "nn", ".", "Linear", "(", "self", ".", "scene_feat_size", ",", "self", ".", "scene_emb_size", ")", "\n", "", "if", "self", ".", "use_agents", ":", "\n", "            ", "self", ".", "waypt_agent_emb", "=", "nn", ".", "Linear", "(", "self", ".", "agent_feat_size", ",", "self", ".", "agent_emb_size", ")", "\n", "", "self", ".", "waypt_enc_gru", "=", "nn", ".", "GRU", "(", "self", ".", "coord_emb_size", "+", "self", ".", "use_scene", "*", "self", ".", "scene_emb_size", "\n", "+", "self", ".", "use_agents", "*", "self", ".", "agent_emb_size", ",", "self", ".", "waypt_enc_size", ",", "bidirectional", "=", "True", ")", "\n", "\n", "# Decoder:", "\n", "self", ".", "dec_gru", "=", "nn", ".", "GRUCell", "(", "2", "*", "self", ".", "waypt_enc_size", ",", "self", ".", "traj_enc_size", ")", "\n", "self", ".", "attn1", "=", "nn", ".", "Linear", "(", "2", "*", "self", ".", "waypt_enc_size", "+", "self", ".", "traj_enc_size", ",", "self", ".", "att_size", ")", "\n", "self", ".", "attn2", "=", "nn", ".", "Linear", "(", "self", ".", "att_size", ",", "1", ")", "\n", "self", ".", "op_traj", "=", "nn", ".", "Linear", "(", "self", ".", "traj_enc_size", ",", "2", ")", "\n", "\n", "# Non-linearities:", "\n", "self", ".", "leaky_relu", "=", "nn", ".", "LeakyReLU", "(", "0.1", ")", "\n", "self", ".", "softmax_att", "=", "nn", ".", "Softmax", "(", "dim", "=", "0", ")", "\n", "self", ".", "tanh", "=", "nn", ".", "Tanh", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.nachiket92_P2T.models.traj_generator.TrajGenerator.forward": [[72, 128], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.sort", "traj_generator.TrajGenerator.hist_enc_gru", "traj_generator.TrajGenerator.waypt_coord_emb", "traj_generator.TrajGenerator.leaky_relu", "torch.utils.rnn.pack_padded_sequence", "torch.utils.rnn.pack_padded_sequence", "traj_generator.TrajGenerator.waypt_enc_gru", "torch.utils.rnn.pad_packed_sequence", "torch.utils.rnn.pad_packed_sequence", "torch.zeros().float().to", "torch.zeros().float().to", "torch.zeros().float().to", "torch.zeros().float().to", "h_hist.squeeze", "range", "traj.permute.permute.permute", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "traj_generator.TrajGenerator.leaky_relu", "traj_generator.TrajGenerator.waypt_scene_emb", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "traj_generator.TrajGenerator.waypt_agent_emb", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "waypt_lengths_sorted.cpu", "traj_generator.TrajGenerator.softmax_att", "ip.sum.sum.sum", "traj_generator.TrajGenerator.dec_gru", "traj_generator.TrajGenerator.op_traj", "traj_generator.TrajGenerator.hist_emb", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "torch.zeros().float", "traj_generator.TrajGenerator.attn2", "traj_generator.TrajGenerator.repeat", "traj_generator.TrajGenerator.tanh", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "traj_generator.TrajGenerator.attn1", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "traj_generator.TrajGenerator.repeat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "\n", "hist", ":", "torch", ".", "Tensor", ",", "\n", "waypts", ":", "torch", ".", "Tensor", ",", "\n", "scene_feats", ":", "torch", ".", "Tensor", ",", "\n", "agent_feats", ":", "torch", ".", "Tensor", ")", "->", "torch", ".", "Tensor", ":", "\n", "        ", "\"\"\"\n        Forward pass for trajectory generator\n        :param hist: Tensor of track histories, shape [batch_size, hist_len, 2 or 5]\n        :param waypts: Tensor of planned way points, shape [batch_size, MDP horizon, 2]\n        :param scene_feats: Tensor of scene feats along waypoints, shape [batch_size, MDP horizon, scene_feat_size]\n        :param agent_feats: Tensor of agent feats along waypoints, shape [batch_size, MDP horizon, agent_feat_size]\n        :return traj: Tensor of predicted trajectories, shape [batch_size, op_length, 2]\n        \"\"\"", "\n", "\n", "# Obtain sequence lengths and sort indices for pack padded sequence", "\n", "tmp", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "waypts", ")", ",", "dim", "=", "2", ")", "\n", "tmp", "=", "tmp", "[", "1", ":", ",", ":", "]", "!=", "0", "\n", "waypt_lengths", "=", "torch", ".", "sum", "(", "tmp", ",", "dim", "=", "0", ")", "+", "1", "\n", "waypt_lengths_sorted", ",", "argsort", "=", "torch", ".", "sort", "(", "waypt_lengths", ",", "descending", "=", "True", ")", "\n", "_", ",", "argargsort", "=", "torch", ".", "sort", "(", "argsort", ")", "\n", "\n", "# Encode history:", "\n", "_", ",", "h_hist", "=", "self", ".", "hist_enc_gru", "(", "self", ".", "leaky_relu", "(", "self", ".", "hist_emb", "(", "hist", ")", ")", ")", "\n", "\n", "# Encode waypoints:", "\n", "waypt_coord_emb", "=", "self", ".", "waypt_coord_emb", "(", "waypts", ")", "\n", "emb_cat", "=", "waypt_coord_emb", "\n", "if", "self", ".", "use_scene", ":", "\n", "            ", "waypt_scene_emb", "=", "self", ".", "waypt_scene_emb", "(", "scene_feats", ")", "\n", "emb_cat", "=", "torch", ".", "cat", "(", "(", "emb_cat", ",", "waypt_scene_emb", ")", ",", "dim", "=", "2", ")", "\n", "", "if", "self", ".", "use_agents", ":", "\n", "            ", "waypt_agent_emb", "=", "self", ".", "waypt_agent_emb", "(", "agent_feats", ")", "\n", "emb_cat", "=", "torch", ".", "cat", "(", "(", "emb_cat", ",", "waypt_agent_emb", ")", ",", "dim", "=", "2", ")", "\n", "", "emb", "=", "self", ".", "leaky_relu", "(", "emb_cat", ")", "\n", "\n", "emb_sorted", "=", "emb", "[", ":", ",", "argsort", ",", ":", "]", "\n", "emb_packed", "=", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "emb_sorted", ",", "waypt_lengths_sorted", ".", "cpu", "(", ")", ",", "batch_first", "=", "False", ")", "\n", "h_waypt_packed", ",", "_", "=", "self", ".", "waypt_enc_gru", "(", "emb_packed", ")", "\n", "h_waypt_unpacked", ",", "_", "=", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "h_waypt_packed", ")", "\n", "h_waypt", "=", "h_waypt_unpacked", "[", ":", ",", "argargsort", ",", ":", "]", "\n", "\n", "# Attention decoder:", "\n", "traj", "=", "torch", ".", "zeros", "(", "self", ".", "op_length", ",", "hist", ".", "shape", "[", "1", "]", ",", "2", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "\n", "h", "=", "h_hist", ".", "squeeze", "(", ")", "\n", "for", "k", "in", "range", "(", "self", ".", "op_length", ")", ":", "\n", "            ", "att_wts", "=", "self", ".", "softmax_att", "(", "self", ".", "attn2", "(", "self", ".", "tanh", "(", "self", ".", "attn1", "(", "torch", ".", "cat", "(", "(", "h", ".", "repeat", "(", "h_waypt", ".", "shape", "[", "0", "]", ",", "1", ",", "1", ")", ",", "\n", "h_waypt", ")", ",", "dim", "=", "2", ")", ")", ")", ")", ")", "\n", "ip", "=", "att_wts", ".", "repeat", "(", "1", ",", "1", ",", "h_waypt", ".", "shape", "[", "2", "]", ")", "*", "h_waypt", "\n", "ip", "=", "ip", ".", "sum", "(", "dim", "=", "0", ")", "\n", "h", "=", "self", ".", "dec_gru", "(", "ip", ",", "h", ")", "\n", "traj", "[", "k", "]", "=", "self", ".", "op_traj", "(", "h", ")", "\n", "\n", "", "traj", "=", "traj", ".", "permute", "(", "1", ",", "0", ",", "2", ")", "\n", "\n", "return", "traj", "\n", "", "", ""]]}