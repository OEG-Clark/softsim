{"home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.None.config.data_config": [[19, 30], ["datasets.pedes.CuhkPedes", "torch.DataLoader", "torch.DataLoader"], "function", ["None"], ["def", "data_config", "(", "image_dir", ",", "anno_dir", ",", "batch_size", ",", "split", ",", "max_length", ",", "transform", ",", "vocab_path", "=", "''", ",", "min_word_count", "=", "0", ",", "cap_transform", "=", "None", ")", ":", "\n", "\n", "    ", "data_split", "=", "CuhkPedes", "(", "image_dir", ",", "anno_dir", ",", "split", ",", "max_length", ",", "transform", ",", "vocab_path", "=", "vocab_path", ",", "min_word_count", "=", "min_word_count", ",", "cap_transform", "=", "cap_transform", ")", "\n", "if", "split", "==", "'train'", ":", "\n", "        ", "shuffle", "=", "True", "\n", "loader", "=", "data", ".", "DataLoader", "(", "data_split", ",", "batch_size", ",", "shuffle", "=", "shuffle", ",", "num_workers", "=", "4", ",", "drop_last", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "shuffle", "=", "False", "\n", "loader", "=", "data", ".", "DataLoader", "(", "data_split", ",", "batch_size", ",", "shuffle", "=", "shuffle", ",", "num_workers", "=", "4", ",", "drop_last", "=", "False", ")", "\n", "", "return", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.None.config.get_image_unique": [[31, 33], ["datasets.pedes.CuhkPedes"], "function", ["None"], ["", "def", "get_image_unique", "(", "image_dir", ",", "anno_dir", ",", "batch_size", ",", "split", ",", "max_length", ",", "transform", ")", ":", "\n", "    ", "return", "CuhkPedes", "(", "image_dir", ",", "anno_dir", ",", "split", ",", "max_length", ",", "transform", ")", ".", "unique", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.None.config.network_config": [[34, 106], ["models.model.Model", "torch.DataParallel().cuda", "print", "random.randint", "random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "utils.directory.check_file", "torch.load", "torch.load", "torch.load", "torch.load", "nn.DataParallel().cuda.load_state_dict", "print", "list", "list", "filter", "list", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.DataParallel", "print", "nn.DataParallel().cuda.state_dict", "torch.load", "torch.load", "torch.load", "torch.load", "network.state_dict.keys", "torch.load.items", "network.state_dict.update", "nn.DataParallel().cuda.load_state_dict", "map", "map", "nn.DataParallel().cuda.parameters", "list.extend", "list.extend", "torch.optim.Adam.load_state_dict", "nn.DataParallel().cuda.module.image_model.parameters", "nn.DataParallel().cuda.module.language_model.parameters", "list", "list", "nn.DataParallel().cuda.module.image_model.parameters", "nn.DataParallel().cuda.module.language_model.parameters", "sum", "print", "id", "p.numel", "nn.DataParallel().cuda.parameters"], "function", ["home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.directory.check_file", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.AverageMeter.update"], ["", "def", "network_config", "(", "args", ",", "split", "=", "'train'", ",", "param", "=", "None", ",", "resume", "=", "False", ",", "model_path", "=", "None", ",", "param2", "=", "None", ")", ":", "\n", "    ", "network", "=", "Model", "(", "args", ")", "\n", "network", "=", "nn", ".", "DataParallel", "(", "network", ")", ".", "cuda", "(", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "args", ".", "start_epoch", "=", "0", "\n", "\n", "# process network params", "\n", "if", "resume", ":", "\n", "        ", "directory", ".", "check_file", "(", "model_path", ",", "'model_file'", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "args", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "+", "1", "\n", "network", ".", "load_state_dict", "(", "checkpoint", "[", "'network'", "]", ")", "\n", "print", "(", "'==> Loading checkpoint \"{}\"'", ".", "format", "(", "model_path", ")", ")", "\n", "", "else", ":", "\n", "# pretrained", "\n", "        ", "if", "model_path", "is", "not", "None", ":", "\n", "            ", "print", "(", "'==> Loading from pretrained models'", ")", "\n", "network_dict", "=", "network", ".", "state_dict", "(", ")", "\n", "# process keyword of pretrained model", "\n", "cnn_pretrained", "=", "torch", ".", "load", "(", "model_path", ")", "\n", "network_keys", "=", "network_dict", ".", "keys", "(", ")", "\n", "prefix", "=", "'module.image_model.'", "\n", "update_pretrained_dict", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "cnn_pretrained", ".", "items", "(", ")", ":", "\n", "                ", "if", "prefix", "+", "k", "in", "network_keys", ":", "\n", "                    ", "update_pretrained_dict", "[", "prefix", "+", "k", "]", "=", "v", "\n", "", "if", "prefix", "+", "'branch2_'", "+", "k", "in", "network_keys", ":", "\n", "                    ", "update_pretrained_dict", "[", "prefix", "+", "'branch2_'", "+", "k", "]", "=", "v", "\n", "", "if", "prefix", "+", "'branch3_'", "+", "k", "in", "network_keys", ":", "\n", "                    ", "update_pretrained_dict", "[", "prefix", "+", "'branch3_'", "+", "k", "]", "=", "v", "\n", "", "if", "prefix", "+", "k", "not", "in", "network_keys", "and", "prefix", "+", "'branch2_'", "+", "k", "not", "in", "network_keys", "and", "prefix", "+", "'branch3_'", "+", "k", "not", "in", "network_keys", ":", "\n", "                    ", "print", "(", "\"warning: \"", "+", "k", "+", "' not load'", ")", "\n", "", "", "network_dict", ".", "update", "(", "update_pretrained_dict", ")", "\n", "network", ".", "load_state_dict", "(", "network_dict", ")", "\n", "\n", "\n", "# process optimizer params", "\n", "", "", "if", "split", "==", "'test'", ":", "\n", "        ", "optimizer", "=", "None", "\n", "", "else", ":", "\n", "# optimizer", "\n", "# different params for different part", "\n", "        ", "cnn_params", "=", "list", "(", "map", "(", "id", ",", "network", ".", "module", ".", "image_model", ".", "parameters", "(", ")", ")", ")", "\n", "lang_params", "=", "list", "(", "map", "(", "id", ",", "network", ".", "module", ".", "language_model", ".", "parameters", "(", ")", ")", ")", "\n", "cnn_params", "=", "cnn_params", "+", "lang_params", "\n", "other_params", "=", "filter", "(", "lambda", "p", ":", "id", "(", "p", ")", "not", "in", "cnn_params", ",", "network", ".", "parameters", "(", ")", ")", "\n", "other_params", "=", "list", "(", "other_params", ")", "\n", "\n", "if", "param", "is", "not", "None", ":", "\n", "            ", "other_params", ".", "extend", "(", "list", "(", "param", ")", ")", "\n", "\n", "", "if", "param2", "is", "not", "None", ":", "\n", "            ", "other_params", ".", "extend", "(", "list", "(", "param2", ")", ")", "\n", "\n", "", "param_groups", "=", "[", "{", "'params'", ":", "other_params", "}", ",", "\n", "{", "'params'", ":", "network", ".", "module", ".", "image_model", ".", "parameters", "(", ")", ",", "'weight_decay'", ":", "args", ".", "wd", ",", "'lr'", ":", "args", ".", "lr", "/", "10", "}", ",", "\n", "{", "'params'", ":", "network", ".", "module", ".", "language_model", ".", "parameters", "(", ")", ",", "'lr'", ":", "args", ".", "lr", "/", "10", "}", "]", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "param_groups", ",", "\n", "lr", "=", "args", ".", "lr", ",", "betas", "=", "(", "args", ".", "adam_alpha", ",", "args", ".", "adam_beta", ")", ",", "eps", "=", "args", ".", "epsilon", ")", "\n", "if", "resume", ":", "\n", "            ", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "\n", "", "", "print", "(", "'Total params: %2.fM'", "%", "(", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "network", ".", "parameters", "(", ")", ")", "/", "1000000.0", ")", ")", "\n", "# seed", "\n", "manualSeed", "=", "random", ".", "randint", "(", "1", ",", "10000", ")", "\n", "random", ".", "seed", "(", "manualSeed", ")", "\n", "np", ".", "random", ".", "seed", "(", "manualSeed", ")", "\n", "torch", ".", "manual_seed", "(", "manualSeed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "manualSeed", ")", "\n", "\n", "return", "network", ",", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.None.config.log_config": [[108, 117], ["logging.FileHandler", "logging.FileHandler.setLevel", "logging.Formatter", "logging.FileHandler.setFormatter", "logger.addHandler", "logger.addHandler", "logging.info", "logging.StreamHandler"], "function", ["None"], ["", "def", "log_config", "(", "args", ",", "ca", ")", ":", "\n", "    ", "filename", "=", "args", ".", "log_dir", "+", "'/'", "+", "ca", "+", "'.log'", "\n", "handler", "=", "logging", ".", "FileHandler", "(", "filename", ")", "\n", "handler", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(message)s'", ")", "\n", "handler", ".", "setFormatter", "(", "formatter", ")", "\n", "logger", ".", "addHandler", "(", "logging", ".", "StreamHandler", "(", ")", ")", "\n", "logger", ".", "addHandler", "(", "handler", ")", "\n", "logging", ".", "info", "(", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.None.config.dir_config": [[119, 128], ["utils.directory.makedir", "utils.directory.makedir", "utils.directory.makedir", "os.path.exists", "ValueError", "os.path.exists", "ValueError", "os.path.join"], "function", ["home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.makedir", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.makedir", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.makedir"], ["", "def", "dir_config", "(", "args", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "image_dir", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'Supply the dataset directory with --image_dir'", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "args", ".", "anno_dir", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'Supply the anno file with --anno_dir'", ")", "\n", "", "directory", ".", "makedir", "(", "args", ".", "log_dir", ")", "\n", "# save checkpoint", "\n", "directory", ".", "makedir", "(", "args", ".", "checkpoint_dir", ")", "\n", "directory", ".", "makedir", "(", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoint_dir", ",", "'model_best'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.None.config.lr_scheduler": [[130, 138], ["args.epoches_decay.split", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "torch.optim.lr_scheduler.StepLR", "int", "int"], "function", ["None"], ["", "def", "lr_scheduler", "(", "optimizer", ",", "args", ")", ":", "\n", "    ", "if", "'_'", "in", "args", ".", "epoches_decay", ":", "\n", "        ", "epoches_list", "=", "args", ".", "epoches_decay", ".", "split", "(", "'_'", ")", "\n", "epoches_list", "=", "[", "int", "(", "e", ")", "for", "e", "in", "epoches_list", "]", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "epoches_list", ")", "\n", "", "else", ":", "\n", "        ", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "int", "(", "args", ".", "epoches_decay", ")", ")", "\n", "", "return", "scheduler", "\n", "", ""]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.None.test_config.parse_args": [[6, 29], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'command for evaluate on CUHK-PEDES'", ")", "\n", "# Directory", "\n", "parser", ".", "add_argument", "(", "'--image_dir'", ",", "type", "=", "str", ",", "help", "=", "'directory to store dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--anno_dir'", ",", "type", "=", "str", ",", "help", "=", "'directory to store anno'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_path'", ",", "type", "=", "str", ",", "help", "=", "'directory to load checkpoint'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_dir'", ",", "type", "=", "str", ",", "help", "=", "'directory to store log'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--feature_size'", ",", "type", "=", "int", ",", "default", "=", "512", ")", "\n", "parser", ".", "add_argument", "(", "'--cnn_dropout_keep'", ",", "type", "=", "float", ",", "default", "=", "0.999", ")", "\n", "parser", ".", "add_argument", "(", "'--part2'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'number of stripes splited in patch branch'", ")", "\n", "parser", ".", "add_argument", "(", "'--part3'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'number of stripes splited in region branch'", ")", "\n", "parser", ".", "add_argument", "(", "'--focal_type'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_softmax'", ",", "type", "=", "float", ",", "default", "=", "20.0", ",", "help", "=", "'scale constant'", ")", "\n", "parser", ".", "add_argument", "(", "'--reranking'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether reranking during testing'", ")", "\n", "\n", "# Default setting", "\n", "parser", ".", "add_argument", "(", "'--gpus'", ",", "type", "=", "str", ",", "default", "=", "'0'", ")", "\n", "parser", ".", "add_argument", "(", "'--epoch_start'", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_dir'", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.None.test_config.config": [[32, 36], ["test_config.parse_args", "config.log_config"], "function", ["home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.parse_args", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.None.config.log_config"], ["", "def", "config", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "log_config", "(", "args", ",", "'test'", ")", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.None.train.save_checkpoint": [[28, 34], ["torch.save", "torch.save", "torch.save", "os.path.join", "shutil.copyfile", "os.path.join", "str"], "function", ["None"], ["def", "save_checkpoint", "(", "state", ",", "epoch", ",", "dst", ",", "is_best", ")", ":", "\n", "    ", "filename", "=", "os", ".", "path", ".", "join", "(", "dst", ",", "'best_model'", ")", "+", "'.pth.tar'", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "if", "is_best", ":", "\n", "        ", "dst_best", "=", "os", ".", "path", ".", "join", "(", "dst", ",", "'model_best'", ",", "str", "(", "epoch", ")", ")", "+", "'.pth.tar'", "\n", "shutil", ".", "copyfile", "(", "filename", ",", "dst_best", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.None.train.train": [[36, 109], ["utils.metric.AverageMeter", "utils.metric.AverageMeter", "utils.metric.AverageMeter", "utils.metric.AverageMeter", "network.train", "time.time", "enumerate", "enumerate", "network.module.language_model.pre_process", "network.module.language_model.pre_process", "tokens.cuda.cuda", "segments.cuda.cuda", "input_masks.cuda.cuda", "caption_length.cuda.cuda", "sep_tokens.cuda.cuda", "sep_segments.cuda.cuda", "sep_input_masks.cuda.cuda", "images.cuda.cuda", "labels.cuda.cuda", "random.shuffle", "random.shuffle", "network", "compute_loss", "optimizer.zero_grad", "loss.backward", "optimizer.step", "utils.metric.AverageMeter.update", "time.time", "utils.metric.AverageMeter.update", "utils.metric.AverageMeter.update", "utils.metric.AverageMeter.update", "re.split", "print", "utils.metric.constraints_loss", "print", "loss.item", "range", "range", "time.time", "len", "len", "len", "len", "con_images.item", "con_text.item", "range"], "function", ["home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.None.train.train", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.models.bert.Bert.pre_process", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.models.bert.Bert.pre_process", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.AverageMeter.update", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.AverageMeter.update", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.AverageMeter.update", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.AverageMeter.update", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.constraints_loss"], ["", "", "def", "train", "(", "epoch", ",", "train_loader", ",", "network", ",", "optimizer", ",", "compute_loss", ",", "args", ",", "co_location_loss", "=", "None", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "train_loss", "=", "AverageMeter", "(", ")", "\n", "image_pre", "=", "AverageMeter", "(", ")", "\n", "text_pre", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to train mode", "\n", "network", ".", "train", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "for", "step", ",", "(", "images", ",", "captions", ",", "labels", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "sep_captions", "=", "[", "]", "\n", "\n", "n_sep", "=", "2", "\n", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "captions", ")", ":", "\n", "            ", "c", "=", "re", ".", "split", "(", "r'[;,!?.]'", ",", "c", ")", "\n", "if", "len", "(", "c", ")", ">", "n_sep", "or", "len", "(", "c", ")", "==", "n_sep", ":", "\n", "                ", "sep_captions", "=", "sep_captions", "+", "c", "[", "0", ":", "n_sep", "]", "\n", "", "else", ":", "\n", "                ", "pad_length", "=", "n_sep", "-", "len", "(", "c", ")", "\n", "padding", "=", "[", "\"[PAD]\"", "for", "j", "in", "range", "(", "pad_length", ")", "]", "\n", "sep_captions", "=", "sep_captions", "+", "c", "+", "padding", "\n", "\n", "", "", "tokens", ",", "segments", ",", "input_masks", ",", "caption_length", "=", "network", ".", "module", ".", "language_model", ".", "pre_process", "(", "captions", ")", "\n", "sep_tokens", ",", "sep_segments", ",", "sep_input_masks", ",", "sep_caption_length", "=", "network", ".", "module", ".", "language_model", ".", "pre_process", "(", "sep_captions", ")", "\n", "\n", "tokens", "=", "tokens", ".", "cuda", "(", ")", "\n", "segments", "=", "segments", ".", "cuda", "(", ")", "\n", "input_masks", "=", "input_masks", ".", "cuda", "(", ")", "\n", "caption_length", "=", "caption_length", ".", "cuda", "(", ")", "\n", "\n", "sep_tokens", "=", "sep_tokens", ".", "cuda", "(", ")", "\n", "sep_segments", "=", "sep_segments", ".", "cuda", "(", ")", "\n", "sep_input_masks", "=", "sep_input_masks", ".", "cuda", "(", ")", "\n", "\n", "images", "=", "images", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "\n", "p2", "=", "[", "i", "for", "i", "in", "range", "(", "args", ".", "part2", ")", "]", "\n", "p3", "=", "[", "i", "for", "i", "in", "range", "(", "args", ".", "part3", ")", "]", "\n", "random", ".", "shuffle", "(", "p2", ")", "\n", "random", ".", "shuffle", "(", "p3", ")", "\n", "\n", "global_img_feat", ",", "global_text_feat", ",", "local_img_query", ",", "local_img_value", ",", "local_text_key", ",", "local_text_value", "=", "network", "(", "images", ",", "tokens", ",", "segments", ",", "input_masks", ",", "sep_tokens", ",", "sep_segments", ",", "sep_input_masks", ",", "n_sep", ",", "p2", ",", "p3", ",", "stage", "=", "'train'", ")", "\n", "\n", "cmpm_loss", ",", "cmpc_loss", ",", "cont_loss", ",", "loss", ",", "image_precision", ",", "text_precision", ",", "pos_avg_sim", ",", "neg_arg_sim", ",", "local_pos_avg_sim", ",", "local_neg_avg_sim", "=", "compute_loss", "(", "\n", "global_img_feat", ",", "global_text_feat", ",", "local_img_query", ",", "local_img_value", ",", "local_text_key", ",", "local_text_value", ",", "caption_length", ",", "labels", ")", "\n", "\n", "if", "step", "%", "10", "==", "0", ":", "\n", "            ", "print", "(", "'epoch:{}, step:{}, cmpm_loss:{:.3f}, cmpc_loss:{:.3f}, cont_loss:{:.3f}, pos_sim_avg:{:.3f}, neg_sim_avg:{:.3f}, lpos_sim_avg:{:.3f}, lneg_sim_avg:{:.3f}'", ".", "\n", "format", "(", "epoch", ",", "step", ",", "cmpm_loss", ",", "cmpc_loss", ",", "cont_loss", ",", "pos_avg_sim", ",", "neg_arg_sim", ",", "local_pos_avg_sim", ",", "local_neg_avg_sim", ")", ")", "\n", "# constrain embedding with the same id at the end of one epoch", "\n", "", "if", "(", "args", ".", "constraints_images", "or", "args", ".", "constraints_text", ")", "and", "step", "==", "len", "(", "train_loader", ")", "-", "1", ":", "\n", "            ", "con_images", ",", "con_text", "=", "constraints_loss", "(", "train_loader", ",", "network", ",", "args", ")", "\n", "loss", "+=", "(", "con_images", "+", "con_text", ")", "\n", "\n", "print", "(", "'epoch:{}, step:{}, con_images:{:.3f}, con_text:{:.3f}'", ".", "format", "(", "epoch", ",", "step", ",", "con_images", ".", "item", "(", ")", ",", "con_text", ".", "item", "(", ")", ")", ")", "\n", "\n", "# compute gradient and do ADAM step", "\n", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# measure elapsed time", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "train_loss", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "images", ".", "shape", "[", "0", "]", ")", "\n", "image_pre", ".", "update", "(", "image_precision", ",", "images", ".", "shape", "[", "0", "]", ")", "\n", "text_pre", ".", "update", "(", "text_precision", ",", "images", ".", "shape", "[", "0", "]", ")", "\n", "", "return", "train_loss", ".", "avg", ",", "batch_time", ".", "avg", ",", "image_pre", ".", "avg", ",", "text_pre", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.None.train.main": [[111, 189], ["torchvision.Normalize", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "config.data_config", "config.data_config", "config.get_image_unique", "utils.metric.Loss", "torch.DataParallel().cuda", "config.network_config", "solver.WarmupMultiStepLR", "range", "logging.info", "logging.info", "logging.info", "logging.info", "utils.metric.Loss.parameters", "network.train", "train.train", "print", "logging.info", "logging.info", "solver.WarmupMultiStepLR.step", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.ToTensor", "torch.DataParallel", "print", "test.test", "logging.info", "logging.info", "network.state_dict", "optimizer.state_dict", "train.save_checkpoint"], "function", ["home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.None.config.data_config", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.None.config.data_config", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.None.config.get_image_unique", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.None.config.network_config", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.None.train.train", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.None.train.train", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.None.test.test", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.None.train.save_checkpoint"], ["", "def", "main", "(", "args", ")", ":", "\n", "\n", "# transform", "\n", "    ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "val_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "\n", "\n", "\n", "cap_transform", "=", "None", "\n", "\n", "# data", "\n", "train_loader", "=", "data_config", "(", "args", ".", "image_dir", ",", "args", ".", "anno_dir", ",", "args", ".", "batch_size", ",", "'train'", ",", "100", ",", "train_transform", ",", "cap_transform", "=", "cap_transform", ")", "\n", "\n", "test_loader", "=", "data_config", "(", "args", ".", "image_dir", ",", "args", ".", "anno_dir", ",", "64", ",", "'test'", ",", "100", ",", "test_transform", ")", "\n", "unique_image", "=", "get_image_unique", "(", "args", ".", "image_dir", ",", "args", ".", "anno_dir", ",", "64", ",", "'test'", ",", "100", ",", "test_transform", ")", "\n", "\n", "# loss", "\n", "compute_loss", "=", "Loss", "(", "args", ")", "\n", "nn", ".", "DataParallel", "(", "compute_loss", ")", ".", "cuda", "(", ")", "\n", "\n", "# network", "\n", "network", ",", "optimizer", "=", "network_config", "(", "args", ",", "'train'", ",", "compute_loss", ".", "parameters", "(", ")", ",", "args", ".", "resume", ",", "args", ".", "model_path", ")", "\n", "\n", "# lr_scheduler", "\n", "scheduler", "=", "WarmupMultiStepLR", "(", "optimizer", ",", "(", "20", ",", "25", ",", "35", ")", ",", "0.1", ",", "0.01", ",", "10", ",", "'linear'", ")", "\n", "\n", "\n", "ac_t2i_top1_best", "=", "0.0", "\n", "best_epoch", "=", "0", "\n", "for", "epoch", "in", "range", "(", "args", ".", "num_epoches", "-", "args", ".", "start_epoch", ")", ":", "\n", "        ", "network", ".", "train", "(", ")", "\n", "# train for one epoch", "\n", "train_loss", ",", "train_time", ",", "image_precision", ",", "text_precision", "=", "train", "(", "args", ".", "start_epoch", "+", "epoch", ",", "train_loader", ",", "network", ",", "optimizer", ",", "compute_loss", ",", "args", ")", "\n", "\n", "# evaluate on validation set", "\n", "is_best", "=", "False", "\n", "print", "(", "'Train done for epoch-{}'", ".", "format", "(", "args", ".", "start_epoch", "+", "epoch", ")", ")", "\n", "\n", "logging", ".", "info", "(", "'Epoch:  [{}|{}], train_time: {:.3f}, train_loss: {:.3f}'", ".", "format", "(", "args", ".", "start_epoch", "+", "epoch", ",", "args", ".", "num_epoches", ",", "train_time", ",", "train_loss", ")", ")", "\n", "logging", ".", "info", "(", "'image_precision: {:.3f}, text_precision: {:.3f}'", ".", "format", "(", "image_precision", ",", "text_precision", ")", ")", "\n", "scheduler", ".", "step", "(", ")", "\n", "for", "param", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "print", "(", "'lr:{}'", ".", "format", "(", "param", "[", "'lr'", "]", ")", ")", "\n", "\n", "", "if", "epoch", ">=", "0", ":", "\n", "            ", "ac_top1_i2t", ",", "ac_top5_i2t", ",", "ac_top10_i2t", ",", "ac_top1_t2i", ",", "ac_top5_t2i", ",", "ac_top10_t2i", ",", "test_time", "=", "test", "(", "test_loader", ",", "network", ",", "args", ",", "unique_image", ")", "\n", "\n", "state", "=", "{", "'network'", ":", "network", ".", "state_dict", "(", ")", ",", "'optimizer'", ":", "optimizer", ".", "state_dict", "(", ")", ",", "'W'", ":", "compute_loss", ".", "W", ",", "'epoch'", ":", "args", ".", "start_epoch", "+", "epoch", "}", "\n", "\n", "if", "ac_top1_t2i", ">", "ac_t2i_top1_best", ":", "\n", "                ", "best_epoch", "=", "epoch", "\n", "ac_t2i_top1_best", "=", "ac_top1_t2i", "\n", "save_checkpoint", "(", "state", ",", "epoch", ",", "args", ".", "checkpoint_dir", ",", "is_best", ")", "\n", "\n", "", "logging", ".", "info", "(", "'epoch:{}'", ".", "format", "(", "epoch", ")", ")", "\n", "logging", ".", "info", "(", "'top1_t2i: {:.3f}, top5_t2i: {:.3f}, top10_t2i: {:.3f}, top1_i2t: {:.3f}, top5_i2t: {:.3f}, top10_i2t: {:.3f}'", ".", "format", "(", "\n", "ac_top1_t2i", ",", "ac_top5_t2i", ",", "ac_top10_t2i", ",", "ac_top1_i2t", ",", "ac_top5_i2t", ",", "ac_top10_i2t", ")", ")", "\n", "\n", "\n", "", "", "logging", ".", "info", "(", "'Best epoch:{}'", ".", "format", "(", "best_epoch", ")", ")", "\n", "logging", ".", "info", "(", "'Train done'", ")", "\n", "logging", ".", "info", "(", "args", ".", "checkpoint_dir", ")", "\n", "logging", ".", "info", "(", "args", ".", "log_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.None.test.test": [[16, 99], ["utils.metric.AverageMeter", "network.eval", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "len", "torch.no_grad", "time.time", "utils.metric.compute_topk", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "enumerate", "network.module.language_model.pre_process", "network.module.language_model.pre_process", "tokens.cuda.cuda", "segments.cuda.cuda", "input_masks.cuda.cuda", "caption_length.cuda.cuda", "sep_tokens.cuda.cuda", "sep_segments.cuda.cuda", "sep_input_masks.cuda.cuda", "images.cuda.cuda", "labels.cuda.cuda", "network", "utils.metric.AverageMeter.update", "time.time", "torch.tensor", "re.split", "range", "range", "time.time", "len", "len", "len", "range"], "function", ["home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.compute_topk", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.models.bert.Bert.pre_process", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.models.bert.Bert.pre_process", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.AverageMeter.update"], ["def", "test", "(", "data_loader", ",", "network", ",", "args", ",", "unique_image", ")", ":", "\n", "    ", "batch_time", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to evaluate mode", "\n", "network", ".", "eval", "(", ")", "\n", "max_size", "=", "64", "*", "len", "(", "data_loader", ")", "\n", "global_img_feat_bank", "=", "torch", ".", "zeros", "(", "(", "max_size", ",", "args", ".", "feature_size", ")", ")", ".", "cuda", "(", ")", "\n", "global_text_feat_bank", "=", "torch", ".", "zeros", "(", "(", "max_size", ",", "args", ".", "feature_size", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "local_img_query_bank", "=", "torch", ".", "zeros", "(", "(", "max_size", ",", "args", ".", "part2", "+", "args", ".", "part3", "+", "1", ",", "args", ".", "feature_size", ")", ")", ".", "cuda", "(", ")", "\n", "local_img_value_bank", "=", "torch", ".", "zeros", "(", "(", "max_size", ",", "args", ".", "part2", "+", "args", ".", "part3", "+", "1", ",", "args", ".", "feature_size", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "local_text_key_bank", "=", "torch", ".", "zeros", "(", "(", "max_size", ",", "98", "+", "2", "+", "1", ",", "args", ".", "feature_size", ")", ")", ".", "cuda", "(", ")", "\n", "local_text_value_bank", "=", "torch", ".", "zeros", "(", "(", "max_size", ",", "98", "+", "2", "+", "1", ",", "args", ".", "feature_size", ")", ")", ".", "cuda", "(", ")", "\n", "\n", "labels_bank", "=", "torch", ".", "zeros", "(", "max_size", ")", ".", "cuda", "(", ")", "\n", "length_bank", "=", "torch", ".", "zeros", "(", "max_size", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "index", "=", "0", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "images", ",", "captions", ",", "labels", "in", "data_loader", ":", "\n", "            ", "sep_captions", "=", "[", "]", "\n", "n_sep", "=", "2", "\n", "\n", "for", "i", ",", "c", "in", "enumerate", "(", "captions", ")", ":", "\n", "                ", "c", "=", "re", ".", "split", "(", "r'[;,!?.]'", ",", "c", ")", "\n", "if", "len", "(", "c", ")", ">", "n_sep", "or", "len", "(", "c", ")", "==", "n_sep", ":", "\n", "                    ", "sep_captions", "=", "sep_captions", "+", "c", "[", "0", ":", "n_sep", "]", "\n", "", "else", ":", "\n", "                    ", "pad_length", "=", "n_sep", "-", "len", "(", "c", ")", "\n", "padding", "=", "[", "\"[PAD]\"", "for", "j", "in", "range", "(", "pad_length", ")", "]", "\n", "sep_captions", "=", "sep_captions", "+", "c", "+", "padding", "\n", "\n", "", "", "tokens", ",", "segments", ",", "input_masks", ",", "caption_length", "=", "network", ".", "module", ".", "language_model", ".", "pre_process", "(", "captions", ")", "\n", "sep_tokens", ",", "sep_segments", ",", "sep_input_masks", ",", "sep_caption_length", "=", "network", ".", "module", ".", "language_model", ".", "pre_process", "(", "sep_captions", ")", "\n", "\n", "tokens", "=", "tokens", ".", "cuda", "(", ")", "\n", "segments", "=", "segments", ".", "cuda", "(", ")", "\n", "input_masks", "=", "input_masks", ".", "cuda", "(", ")", "\n", "caption_length", "=", "caption_length", ".", "cuda", "(", ")", "\n", "\n", "sep_tokens", "=", "sep_tokens", ".", "cuda", "(", ")", "\n", "sep_segments", "=", "sep_segments", ".", "cuda", "(", ")", "\n", "sep_input_masks", "=", "sep_input_masks", ".", "cuda", "(", ")", "\n", "\n", "images", "=", "images", ".", "cuda", "(", ")", "\n", "labels", "=", "labels", ".", "cuda", "(", ")", "\n", "interval", "=", "images", ".", "shape", "[", "0", "]", "\n", "\n", "p2", "=", "[", "i", "for", "i", "in", "range", "(", "args", ".", "part2", ")", "]", "\n", "p3", "=", "[", "i", "for", "i", "in", "range", "(", "args", ".", "part3", ")", "]", "\n", "\n", "global_img_feat", ",", "global_text_feat", ",", "local_img_query", ",", "local_img_value", ",", "local_text_key", ",", "local_text_value", "=", "network", "(", "images", ",", "tokens", ",", "segments", ",", "input_masks", ",", "sep_tokens", ",", "sep_segments", ",", "sep_input_masks", ",", "n_sep", ",", "p2", ",", "p3", ",", "stage", "=", "'train'", ")", "\n", "\n", "global_img_feat_bank", "[", "index", ":", "index", "+", "interval", "]", "=", "global_img_feat", "\n", "global_text_feat_bank", "[", "index", ":", "index", "+", "interval", "]", "=", "global_text_feat", "\n", "local_img_query_bank", "[", "index", ":", "index", "+", "interval", ",", ":", ",", ":", "]", "=", "local_img_query", "\n", "local_img_value_bank", "[", "index", ":", "index", "+", "interval", ",", ":", ",", ":", "]", "=", "local_img_value", "\n", "local_text_key_bank", "[", "index", ":", "index", "+", "interval", ",", ":", ",", ":", "]", "=", "local_text_key", "\n", "local_text_value_bank", "[", "index", ":", "index", "+", "interval", ",", ":", ",", ":", "]", "=", "local_text_value", "\n", "labels_bank", "[", "index", ":", "index", "+", "interval", "]", "=", "labels", "\n", "length_bank", "[", "index", ":", "index", "+", "interval", "]", "=", "caption_length", "\n", "batch_time", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "index", "=", "index", "+", "interval", "\n", "\n", "", "global_img_feat_bank", "=", "global_img_feat_bank", "[", ":", "index", "]", "\n", "global_text_feat_bank", "=", "global_text_feat_bank", "[", ":", "index", "]", "\n", "local_img_query_bank", "=", "local_img_query_bank", "[", ":", "index", "]", "\n", "local_img_value_bank", "=", "local_img_value_bank", "[", ":", "index", "]", "\n", "local_text_key_bank", "=", "local_text_key_bank", "[", ":", "index", "]", "\n", "local_text_value_bank", "=", "local_text_value_bank", "[", ":", "index", "]", "\n", "labels_bank", "=", "labels_bank", "[", ":", "index", "]", "\n", "length_bank", "=", "length_bank", "[", ":", "index", "]", "\n", "unique_image", "=", "torch", ".", "tensor", "(", "unique_image", ")", "==", "1", "\n", "\n", "global_result", ",", "local_result", ",", "result", "=", "compute_topk", "(", "global_img_feat_bank", "[", "unique_image", "]", ",", "local_img_query_bank", "[", "unique_image", "]", ",", "local_img_value_bank", "[", "unique_image", "]", ",", "global_text_feat_bank", ",", "local_text_key_bank", ",", "\n", "local_text_value_bank", ",", "length_bank", ",", "labels_bank", "[", "unique_image", "]", ",", "labels_bank", ",", "args", ",", "[", "1", ",", "5", ",", "10", "]", ",", "True", ")", "\n", "\n", "ac_top1_i2t", ",", "ac_top5_i2t", ",", "ac_top10_i2t", ",", "ac_top1_t2i", ",", "ac_top5_t2i", ",", "ac_top10_t2i", "=", "result", "\n", "\n", "return", "ac_top1_i2t", ",", "ac_top5_i2t", ",", "ac_top10_i2t", ",", "ac_top1_t2i", ",", "ac_top5_t2i", ",", "ac_top10_t2i", ",", "batch_time", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.None.test.main": [[101, 157], ["torchvision.Normalize", "torchvision.Compose", "config.data_config", "config.get_image_unique", "os.listdir", "os.listdir.sort", "logging.info", "logging.info", "logging.info", "logging.info", "model_list.sort", "os.path.join", "os.path.isdir", "config.network_config", "test.test", "logging.info", "logging.info", "torchvision.ToTensor", "model_list.append", "int", "i2t_model.split", "int", "str", "os.path.join", "str", "i2t_model.split"], "function", ["home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.None.config.data_config", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.None.config.get_image_unique", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.None.config.network_config", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.None.test.test"], ["", "", "def", "main", "(", "args", ")", ":", "\n", "# need to clear the pipeline", "\n", "# top1 & top10 need to be chosen in the same params ???", "\n", "    ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", "\n", "]", ")", "\n", "\n", "test_loader", "=", "data_config", "(", "args", ".", "image_dir", ",", "args", ".", "anno_dir", ",", "64", ",", "'test'", ",", "100", ",", "test_transform", ")", "\n", "unique_image", "=", "get_image_unique", "(", "args", ".", "image_dir", ",", "args", ".", "anno_dir", ",", "64", ",", "'test'", ",", "100", ",", "test_transform", ")", "\n", "\n", "ac_i2t_top1_best", "=", "0.0", "\n", "ac_i2t_top10_best", "=", "0.0", "\n", "ac_t2i_top1_best", "=", "0.0", "\n", "ac_t2i_top10_best", "=", "0.0", "\n", "ac_t2i_top5_best", "=", "0.0", "\n", "ac_i2t_top5_best", "=", "0.0", "\n", "i2t_models", "=", "os", ".", "listdir", "(", "args", ".", "model_path", ")", "\n", "i2t_models", ".", "sort", "(", ")", "\n", "model_list", "=", "[", "]", "\n", "for", "i2t_model", "in", "i2t_models", ":", "\n", "        ", "if", "i2t_model", ".", "split", "(", "'.'", ")", "[", "0", "]", "!=", "\"model_best\"", ":", "\n", "            ", "model_list", ".", "append", "(", "int", "(", "i2t_model", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", ")", "\n", "", "model_list", ".", "sort", "(", ")", "\n", "\n", "", "logging", ".", "info", "(", "'Testing on dataset: {}'", ".", "format", "(", "args", ".", "anno_dir", ")", ")", "\n", "\n", "for", "i2t_model", "in", "model_list", ":", "\n", "        ", "model_file", "=", "os", ".", "path", ".", "join", "(", "args", ".", "model_path", ",", "str", "(", "i2t_model", ")", "+", "'.pth.tar'", ")", "\n", "if", "os", ".", "path", ".", "isdir", "(", "model_file", ")", ":", "\n", "            ", "continue", "\n", "", "epoch", "=", "i2t_model", "\n", "if", "int", "(", "epoch", ")", "<", "args", ".", "epoch_start", ":", "\n", "            ", "continue", "\n", "", "network", ",", "_", "=", "network_config", "(", "args", ",", "'test'", ",", "None", ",", "True", ",", "model_file", ")", "\n", "ac_top1_i2t", ",", "ac_top5_i2t", ",", "ac_top10_i2t", ",", "ac_top1_t2i", ",", "ac_top5_t2i", ",", "ac_top10_t2i", ",", "test_time", "=", "test", "(", "test_loader", ",", "network", ",", "args", ",", "unique_image", ")", "\n", "if", "ac_top1_t2i", ">", "ac_t2i_top1_best", ":", "\n", "            ", "ac_i2t_top1_best", "=", "ac_top1_i2t", "\n", "ac_i2t_top5_best", "=", "ac_top5_i2t", "\n", "ac_i2t_top10_best", "=", "ac_top10_i2t", "\n", "\n", "ac_t2i_top1_best", "=", "ac_top1_t2i", "\n", "ac_t2i_top5_best", "=", "ac_top5_t2i", "\n", "ac_t2i_top10_best", "=", "ac_top10_t2i", "\n", "dst_best", "=", "os", ".", "path", ".", "join", "(", "args", ".", "checkpoint_dir", ",", "'model_best'", ",", "str", "(", "epoch", ")", ")", "+", "'.pth.tar'", "\n", "\n", "\n", "", "logging", ".", "info", "(", "'epoch:{}'", ".", "format", "(", "epoch", ")", ")", "\n", "logging", ".", "info", "(", "'top1_t2i: {:.3f}, top5_t2i: {:.3f}, top10_t2i: {:.3f}, top1_i2t: {:.3f}, top5_i2t: {:.3f}, top10_i2t: {:.3f}'", ".", "format", "(", "\n", "ac_top1_t2i", ",", "ac_top5_t2i", ",", "ac_top10_t2i", ",", "ac_top1_i2t", ",", "ac_top5_i2t", ",", "ac_top10_i2t", ")", ")", "\n", "", "logging", ".", "info", "(", "'t2i_top1_best: {:.3f}, t2i_top5_best: {:.3f}, t2i_top10_best: {:.3f}, i2t_top1_best: {:.3f}, i2t_top5_best: {:.3f}, i2t_top10_best: {:.3f}'", ".", "format", "(", "\n", "ac_t2i_top1_best", ",", "ac_t2i_top5_best", ",", "ac_t2i_top10_best", ",", "ac_i2t_top1_best", ",", "ac_i2t_top5_best", ",", "ac_i2t_top10_best", ")", ")", "\n", "logging", ".", "info", "(", "args", ".", "model_path", ")", "\n", "logging", ".", "info", "(", "args", ".", "log_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.None.train_config.parse_args": [[9, 61], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.parse_args"], ["def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'command for train on CUHK-PEDES'", ")", "\n", "\n", "# Directory", "\n", "parser", ".", "add_argument", "(", "'--image_dir'", ",", "type", "=", "str", ",", "help", "=", "'directory to store dataset'", ")", "\n", "parser", ".", "add_argument", "(", "'--anno_dir'", ",", "type", "=", "str", ",", "help", "=", "'directory to store anno file'", ")", "\n", "parser", ".", "add_argument", "(", "'--checkpoint_dir'", ",", "type", "=", "str", ",", "help", "=", "'directory to store checkpoint'", ")", "\n", "parser", ".", "add_argument", "(", "'--log_dir'", ",", "type", "=", "str", ",", "help", "=", "'directory to store log'", ")", "\n", "parser", ".", "add_argument", "(", "'--model_path'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'directory to pretrained model, whole model or just visual part'", ")", "\n", "\n", "\n", "# Model setting", "\n", "parser", ".", "add_argument", "(", "'--resume'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether or not to restore the pretrained whole model'", ")", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "type", "=", "int", ",", "default", "=", "16", ")", "\n", "parser", ".", "add_argument", "(", "'--num_epoches'", ",", "type", "=", "int", ",", "default", "=", "100", ")", "\n", "parser", ".", "add_argument", "(", "'--ckpt_steps'", ",", "type", "=", "int", ",", "default", "=", "5000", ",", "help", "=", "'#steps to save checkpoint'", ")", "\n", "parser", ".", "add_argument", "(", "'--feature_size'", ",", "type", "=", "int", ",", "default", "=", "512", ")", "\n", "parser", ".", "add_argument", "(", "'--CMPM'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--CMPC'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--CONT'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--focal_type'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--cnn_dropout_keep'", ",", "type", "=", "float", ",", "default", "=", "0.999", ")", "\n", "parser", ".", "add_argument", "(", "'--constraints_text'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--constraints_images'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_classes'", ",", "type", "=", "int", ",", "default", "=", "11003", ")", "\n", "parser", ".", "add_argument", "(", "'--pretrained'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether or not to restore the pretrained visual model'", ")", "\n", "parser", ".", "add_argument", "(", "'--part2'", ",", "type", "=", "int", ",", "default", "=", "3", ")", "\n", "parser", ".", "add_argument", "(", "'--part3'", ",", "type", "=", "int", ",", "default", "=", "2", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_softmax'", ",", "type", "=", "float", ",", "default", "=", "20.0", ",", "help", "=", "'scale constant'", ")", "\n", "parser", ".", "add_argument", "(", "'--lambda_cont'", ",", "type", "=", "float", ",", "default", "=", "0.2", ",", "help", "=", "'hyper-parameter of contrastive loss'", ")", "\n", "parser", ".", "add_argument", "(", "'--reranking'", ",", "action", "=", "'store_true'", ",", "help", "=", "'whether reranking during testing'", ")", "\n", "\n", "# Optimization setting", "\n", "parser", ".", "add_argument", "(", "'--optimizer'", ",", "type", "=", "str", ",", "default", "=", "'adam'", ",", "help", "=", "'one of \"sgd\", \"adam\", \"rmsprop\", \"adadelta\", or \"adagrad\"'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "type", "=", "float", ",", "default", "=", "0.0002", ")", "\n", "parser", ".", "add_argument", "(", "'--wd'", ",", "type", "=", "float", ",", "default", "=", "0.00004", ")", "\n", "parser", ".", "add_argument", "(", "'--adam_alpha'", ",", "type", "=", "float", ",", "default", "=", "0.9", ")", "\n", "parser", ".", "add_argument", "(", "'--adam_beta'", ",", "type", "=", "float", ",", "default", "=", "0.999", ")", "\n", "parser", ".", "add_argument", "(", "'--epsilon'", ",", "type", "=", "float", ",", "default", "=", "1e-8", ")", "\n", "parser", ".", "add_argument", "(", "'--end_lr'", ",", "type", "=", "float", ",", "default", "=", "0.0001", ",", "help", "=", "'minimum end learning rate used by a polynomial decay learning rate'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_type'", ",", "type", "=", "str", ",", "default", "=", "'exponential'", ",", "help", "=", "'One of \"fixed\" or \"exponential\"'", ")", "\n", "parser", ".", "add_argument", "(", "'--lr_decay_ratio'", ",", "type", "=", "float", ",", "default", "=", "0.1", ")", "\n", "parser", ".", "add_argument", "(", "'--epoches_decay'", ",", "type", "=", "str", ",", "default", "=", "'50,100'", ",", "help", "=", "'#epoches when learning rate decays'", ")", "\n", "\n", "parser", ".", "add_argument", "(", "'--nsave'", ",", "type", "=", "str", ",", "default", "=", "''", ")", "\n", "\n", "\n", "# Default setting", "\n", "parser", ".", "add_argument", "(", "'--gpus'", ",", "type", "=", "str", ",", "default", "=", "'0'", ")", "\n", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.None.train_config.config": [[63, 68], ["train_config.parse_args", "config.dir_config", "config.log_config"], "function", ["home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.parse_args", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.None.config.dir_config", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.None.config.log_config"], ["", "def", "config", "(", ")", ":", "\n", "    ", "args", "=", "parse_args", "(", ")", "\n", "dir_config", "(", "args", ")", "\n", "log_config", "(", "args", ",", "'train'", ")", "\n", "return", "args", "\n", "", ""]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.directory.makedir": [[4, 7], ["os.path.exists", "os.makedirs"], "function", ["None"], ["def", "makedir", "(", "root", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "root", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "root", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.directory.write_json": [[9, 12], ["open", "json.dump"], "function", ["None"], ["", "", "def", "write_json", "(", "data", ",", "root", ")", ":", "\n", "    ", "with", "open", "(", "dir", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "data", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.directory.check_exists": [[14, 18], ["os.path.exists"], "function", ["None"], ["", "", "def", "check_exists", "(", "root", ")", ":", "\n", "    ", "if", "os", ".", "path", ".", "exists", "(", "root", ")", ":", "\n", "        ", "return", "True", "\n", "", "return", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.directory.check_file": [[19, 22], ["os.path.isfile", "RuntimeError"], "function", ["None"], ["", "def", "check_file", "(", "root", ",", "keyword", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "isfile", "(", "root", ")", ":", "\n", "        ", "raise", "RuntimeError", "(", "'===> No {} in {}'", ".", "format", "(", "keyword", ",", "root", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.Loss.__init__": [[195, 210], ["torch.Module.__init__", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "print", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "metric.Loss.init_weight", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.Loss.init_weight"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "Loss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "args", "=", "args", "\n", "self", ".", "CMPM", "=", "args", ".", "CMPM", "\n", "self", ".", "CMPC", "=", "args", ".", "CMPC", "\n", "self", ".", "CONT", "=", "args", ".", "CONT", "\n", "self", ".", "epsilon", "=", "args", ".", "epsilon", "\n", "self", ".", "num_classes", "=", "args", ".", "num_classes", "\n", "if", "args", ".", "resume", ":", "\n", "            ", "checkpoint", "=", "torch", ".", "load", "(", "args", ".", "model_path", ")", "\n", "self", ".", "W", "=", "Parameter", "(", "checkpoint", "[", "'W'", "]", ")", "\n", "print", "(", "'=========> Loading in parameter W from pretrained models'", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "W", "=", "Parameter", "(", "torch", ".", "randn", "(", "args", ".", "feature_size", ",", "args", ".", "num_classes", ")", ")", "\n", "self", ".", "init_weight", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.Loss.init_weight": [[211, 213], ["torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_"], "methods", ["None"], ["", "", "def", "init_weight", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "W", ".", "data", ",", "gain", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.Loss.compute_weiTexts": [[214, 264], ["range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "local_text_key[].unsqueeze().contiguous", "local_text_value[].unsqueeze().contiguous", "local_text_key[].unsqueeze().contiguous.repeat", "local_text_value[].unsqueeze().contiguous.repeat", "metric.func_attention_MxN", "metric.l2norm", "metric.compute_similarity", "i2t_sim.mean.mean.mean", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "metric.func_attention_MxN", "metric.l2norm", "metric.compute_similarity", "t2i_sim.mean.mean.mean", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "local_text_key[].unsqueeze", "local_text_value[].unsqueeze"], "methods", ["home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.func_attention_MxN", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.l2norm", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.compute_similarity", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.func_attention_MxN", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.l2norm", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.compute_similarity"], ["", "@", "staticmethod", "\n", "def", "compute_weiTexts", "(", "local_img_query", ",", "local_img_value", ",", "local_text_key", ",", "local_text_value", ",", "text_length", ",", "args", ")", ":", "\n", "        ", "\"\"\"\n        Compute weighted text embeddings\n        :param image_embeddings: Tensor with dtype torch.float32, [n_img, n_region, d]\n        :param text_embeddings: Tensor with dtype torch.float32, [n_txt, n_word, d]\n        :param text_length: list, contain length of each sentence, [batch_size]\n        :param labels: Tensor with dtype torch.int32, [batch_size]\n        :return: i2t_similarities: Tensor, [n_img, n_txt]\n                 t2i_similarities: Tensor, [n_img, n_txt]\n        \"\"\"", "\n", "n_img", "=", "local_img_query", ".", "shape", "[", "0", "]", "\n", "n_txt", "=", "local_text_key", ".", "shape", "[", "0", "]", "\n", "t2i_similarities", "=", "[", "]", "\n", "i2t_similarities", "=", "[", "]", "\n", "#atten_final_result = {}", "\n", "for", "i", "in", "range", "(", "n_txt", ")", ":", "\n", "# Get the i-th text description", "\n", "            ", "n_word", "=", "text_length", "[", "i", "]", "\n", "txt_i_key", "=", "local_text_key", "[", "i", ",", ":", "n_word", ",", ":", "]", ".", "unsqueeze", "(", "0", ")", ".", "contiguous", "(", ")", "\n", "txt_i_value", "=", "local_text_value", "[", "i", ",", ":", "n_word", ",", ":", "]", ".", "unsqueeze", "(", "0", ")", ".", "contiguous", "(", ")", "\n", "# -> (n_img, n_word, d)", "\n", "txt_i_key_expand", "=", "txt_i_key", ".", "repeat", "(", "n_img", ",", "1", ",", "1", ")", "\n", "txt_i_value_expand", "=", "txt_i_value", ".", "repeat", "(", "n_img", ",", "1", ",", "1", ")", "\n", "\n", "# -> (n_img, n_region, d)", "\n", "#weiText, atten_text = func_attention_MxN(local_img_query, txt_i_key_expand, txt_i_value_expand, args)", "\n", "weiText", "=", "func_attention_MxN", "(", "local_img_query", ",", "txt_i_key_expand", ",", "txt_i_value_expand", ",", "args", ")", "\n", "#atten_final_result[i] = atten_text[i, :, :]", "\n", "# image_embeddings = l2norm(image_embeddings, dim=2)", "\n", "weiText", "=", "l2norm", "(", "weiText", ",", "dim", "=", "2", ")", "\n", "i2t_sim", "=", "compute_similarity", "(", "local_img_value", ",", "weiText", ",", "dim", "=", "2", ")", "\n", "i2t_sim", "=", "i2t_sim", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "i2t_similarities", ".", "append", "(", "i2t_sim", ")", "\n", "\n", "# -> (n_img, n_word, d)", "\n", "#weiImage, atten_image = func_attention_MxN(txt_i_key_expand, local_img_query, local_img_value, args)", "\n", "weiImage", "=", "func_attention_MxN", "(", "txt_i_key_expand", ",", "local_img_query", ",", "local_img_value", ",", "args", ")", "\n", "# txt_i_expand = l2norm(txt_i_expand, dim=2)", "\n", "weiImage", "=", "l2norm", "(", "weiImage", ",", "dim", "=", "2", ")", "\n", "t2i_sim", "=", "compute_similarity", "(", "txt_i_value_expand", ",", "weiImage", ",", "dim", "=", "2", ")", "\n", "t2i_sim", "=", "t2i_sim", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "t2i_similarities", ".", "append", "(", "t2i_sim", ")", "\n", "\n", "# (n_img, n_txt)", "\n", "#torch.save(atten_final_result, 'atten_final_result.pt')", "\n", "", "i2t_similarities", "=", "torch", ".", "cat", "(", "i2t_similarities", ",", "1", ")", "\n", "t2i_similarities", "=", "torch", ".", "cat", "(", "t2i_similarities", ",", "1", ")", "\n", "\n", "return", "i2t_similarities", ",", "t2i_similarities", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.Loss.contrastive_loss": [[265, 287], ["torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.reshape.t", "torch.reshape.t", "torch.reshape.t", "torch.reshape.t", "labels_mask.float", "labels_mask.float().norm", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "labels_mask.float"], "methods", ["None"], ["", "def", "contrastive_loss", "(", "self", ",", "i2t_similarites", ",", "t2i_similarities", ",", "labels", ")", ":", "\n", "        ", "batch_size", "=", "i2t_similarites", ".", "shape", "[", "0", "]", "\n", "labels_reshape", "=", "torch", ".", "reshape", "(", "labels", ",", "(", "batch_size", ",", "1", ")", ")", "\n", "labels_dist", "=", "labels_reshape", "-", "labels_reshape", ".", "t", "(", ")", "\n", "labels_mask", "=", "(", "labels_dist", "==", "0", ")", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "# normalize the true matching distribution", "\n", "labels_mask_norm", "=", "labels_mask", ".", "float", "(", ")", "/", "labels_mask", ".", "float", "(", ")", ".", "norm", "(", "dim", "=", "1", ")", "\n", "\n", "\n", "i2t_pred", "=", "F", ".", "softmax", "(", "i2t_similarites", "*", "self", ".", "args", ".", "lambda_softmax", ",", "dim", "=", "1", ")", "\n", "i2t_loss", "=", "i2t_pred", "*", "(", "F", ".", "log_softmax", "(", "i2t_similarites", "*", "self", ".", "args", ".", "lambda_softmax", ",", "dim", "=", "1", ")", "-", "torch", ".", "log", "(", "labels_mask_norm", "+", "self", ".", "epsilon", ")", ")", "\n", "sim_cos", "=", "i2t_similarites", "\n", "\n", "pos_avg_sim", "=", "torch", ".", "mean", "(", "torch", ".", "masked_select", "(", "sim_cos", ",", "labels_mask", ")", ")", "\n", "neg_avg_sim", "=", "torch", ".", "mean", "(", "torch", ".", "masked_select", "(", "sim_cos", ",", "labels_mask", "==", "0", ")", ")", "\n", "\n", "# constrastive_loss = torch.mean(torch.sum(i2t_loss, dim=1)) + torch.mean(torch.sum(t2i_loss, dim=1))", "\n", "constrastive_loss", "=", "torch", ".", "mean", "(", "torch", ".", "sum", "(", "i2t_loss", ",", "dim", "=", "1", ")", ")", "\n", "\n", "return", "constrastive_loss", ",", "pos_avg_sim", ",", "neg_avg_sim", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.Loss.compute_cmpc_loss": [[289, 327], ["torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.argmax", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "image_embeddings.norm", "text_embeddings.norm", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.CrossEntropyLoss.", "torch.CrossEntropyLoss."], "methods", ["None"], ["", "def", "compute_cmpc_loss", "(", "self", ",", "image_embeddings", ",", "text_embeddings", ",", "labels", ")", ":", "\n", "        ", "\"\"\"\n        Cross-Modal Projection Classfication loss(CMPC)\n        :param image_embeddings: Tensor with dtype torch.float32\n        :param text_embeddings: Tensor with dtype torch.float32\n        :param labels: Tensor with dtype torch.int32\n        :return:\n        \"\"\"", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'mean'", ")", "\n", "self", ".", "W_norm", "=", "F", ".", "normalize", "(", "self", ".", "W", ",", "p", "=", "2", ",", "dim", "=", "0", ")", "\n", "\n", "image_norm", "=", "image_embeddings", "/", "image_embeddings", ".", "norm", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "text_norm", "=", "text_embeddings", "/", "text_embeddings", ".", "norm", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "image_proj_text", "=", "torch", ".", "sum", "(", "image_embeddings", "*", "text_norm", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "*", "text_norm", "\n", "text_proj_image", "=", "torch", ".", "sum", "(", "text_embeddings", "*", "image_norm", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "*", "image_norm", "\n", "\n", "image_logits", "=", "torch", ".", "matmul", "(", "image_proj_text", ",", "self", ".", "W_norm", ")", "\n", "text_logits", "=", "torch", ".", "matmul", "(", "text_proj_image", ",", "self", ".", "W_norm", ")", "\n", "\n", "# image_logits = torch.matmul(image_embeddings, self.W_norm)", "\n", "# text_logits = torch.matmul(text_embeddings, self.W_norm)", "\n", "\n", "'''\n        ipt_loss = criterion(input=image_logits, target=labels)\n        tpi_loss = criterion(input=text_logits, target=labels)\n        cmpc_loss = ipt_loss + tpi_loss\n        '''", "\n", "cmpc_loss", "=", "criterion", "(", "image_logits", ",", "labels", ")", "+", "criterion", "(", "text_logits", ",", "labels", ")", "\n", "\n", "# classification accuracy for observation", "\n", "image_pred", "=", "torch", ".", "argmax", "(", "image_logits", ",", "dim", "=", "1", ")", "\n", "text_pred", "=", "torch", ".", "argmax", "(", "text_logits", ",", "dim", "=", "1", ")", "\n", "\n", "image_precision", "=", "torch", ".", "mean", "(", "(", "image_pred", "==", "labels", ")", ".", "float", "(", ")", ")", "\n", "text_precision", "=", "torch", ".", "mean", "(", "(", "text_pred", "==", "labels", ")", ".", "float", "(", ")", ")", "\n", "\n", "return", "cmpc_loss", ",", "image_precision", ",", "text_precision", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.Loss.compute_cmpm_loss": [[328, 373], ["torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.reshape.t", "torch.reshape.t", "torch.reshape.t", "torch.reshape.t", "image_embeddings.norm", "text_embeddings.norm", "text_norm.t", "image_norm.t", "labels_mask.float", "labels_mask.float().norm", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "text_norm.t", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "labels_mask.float"], "methods", ["None"], ["", "def", "compute_cmpm_loss", "(", "self", ",", "image_embeddings", ",", "text_embeddings", ",", "labels", ")", ":", "\n", "        ", "\"\"\"\n        Cross-Modal Projection Matching Loss(CMPM)\n        :param image_embeddings: Tensor with dtype torch.float32\n        :param text_embeddings: Tensor with dtype torch.float32\n        :param labels: Tensor with dtype torch.int32\n        :return:\n            i2t_loss: cmpm loss for image projected to text\n            t2i_loss: cmpm loss for text projected to image\n            pos_avg_sim: average cosine-similarity for positive pairs\n            neg_avg_sim: averate cosine-similarity for negative pairs\n        \"\"\"", "\n", "\n", "batch_size", "=", "image_embeddings", ".", "shape", "[", "0", "]", "\n", "\n", "# print(\"batch size: \" + str(batch_size))", "\n", "\n", "labels_reshape", "=", "torch", ".", "reshape", "(", "labels", ",", "(", "batch_size", ",", "1", ")", ")", "\n", "labels_dist", "=", "labels_reshape", "-", "labels_reshape", ".", "t", "(", ")", "\n", "labels_mask", "=", "(", "labels_dist", "==", "0", ")", "\n", "\n", "image_norm", "=", "image_embeddings", "/", "image_embeddings", ".", "norm", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "text_norm", "=", "text_embeddings", "/", "text_embeddings", ".", "norm", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "image_proj_text", "=", "torch", ".", "matmul", "(", "image_embeddings", ",", "text_norm", ".", "t", "(", ")", ")", "\n", "text_proj_image", "=", "torch", ".", "matmul", "(", "text_embeddings", ",", "image_norm", ".", "t", "(", ")", ")", "\n", "\n", "# normalize the true matching distribution", "\n", "labels_mask_norm", "=", "labels_mask", ".", "float", "(", ")", "/", "labels_mask", ".", "float", "(", ")", ".", "norm", "(", "dim", "=", "1", ")", "\n", "\n", "i2t_pred", "=", "F", ".", "softmax", "(", "image_proj_text", ",", "dim", "=", "1", ")", "\n", "# i2t_loss = i2t_pred * torch.log((i2t_pred + self.epsilon)/ (labels_mask_norm + self.epsilon))", "\n", "i2t_loss", "=", "i2t_pred", "*", "(", "F", ".", "log_softmax", "(", "image_proj_text", ",", "dim", "=", "1", ")", "-", "torch", ".", "log", "(", "labels_mask_norm", "+", "self", ".", "epsilon", ")", ")", "\n", "\n", "t2i_pred", "=", "F", ".", "softmax", "(", "text_proj_image", ",", "dim", "=", "1", ")", "\n", "# t2i_loss = t2i_pred * torch.log((t2i_pred + self.epsilon)/ (labels_mask_norm + self.epsilon))", "\n", "t2i_loss", "=", "t2i_pred", "*", "(", "F", ".", "log_softmax", "(", "text_proj_image", ",", "dim", "=", "1", ")", "-", "torch", ".", "log", "(", "labels_mask_norm", "+", "self", ".", "epsilon", ")", ")", "\n", "\n", "cmpm_loss", "=", "torch", ".", "mean", "(", "torch", ".", "sum", "(", "i2t_loss", ",", "dim", "=", "1", ")", ")", "+", "torch", ".", "mean", "(", "torch", ".", "sum", "(", "t2i_loss", ",", "dim", "=", "1", ")", ")", "\n", "\n", "sim_cos", "=", "torch", ".", "matmul", "(", "image_norm", ",", "text_norm", ".", "t", "(", ")", ")", "\n", "\n", "pos_avg_sim", "=", "torch", ".", "mean", "(", "torch", ".", "masked_select", "(", "sim_cos", ",", "labels_mask", ")", ")", "\n", "neg_avg_sim", "=", "torch", ".", "mean", "(", "torch", ".", "masked_select", "(", "sim_cos", ",", "labels_mask", "==", "0", ")", ")", "\n", "\n", "return", "cmpm_loss", ",", "pos_avg_sim", ",", "neg_avg_sim", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.Loss.forward": [[374, 399], ["metric.Loss.compute_cmpm_loss", "metric.Loss.compute_cmpc_loss", "metric.Loss.compute_weiTexts", "metric.Loss.contrastive_loss", "cmpm_loss.item", "cmpc_loss.item", "cont_loss.item"], "methods", ["home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.Loss.compute_cmpm_loss", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.Loss.compute_cmpc_loss", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.Loss.compute_weiTexts", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.Loss.contrastive_loss"], ["", "def", "forward", "(", "self", ",", "global_img_feat", ",", "global_text_feat", ",", "local_img_query", ",", "local_img_value", ",", "local_text_key", ",", "local_text_value", ",", "text_length", ",", "\n", "labels", ")", ":", "\n", "        ", "cmpm_loss", "=", "0.0", "\n", "cmpc_loss", "=", "0.0", "\n", "cont_loss", "=", "0.0", "\n", "image_precision", "=", "0.0", "\n", "text_precision", "=", "0.0", "\n", "neg_avg_sim", "=", "0.0", "\n", "pos_avg_sim", "=", "0.0", "\n", "local_pos_avg_sim", "=", "0.0", "\n", "local_neg_avg_sim", "=", "0.0", "\n", "if", "self", ".", "CMPM", ":", "\n", "            ", "cmpm_loss", ",", "pos_avg_sim", ",", "neg_avg_sim", "=", "self", ".", "compute_cmpm_loss", "(", "global_img_feat", ",", "global_text_feat", ",", "\n", "labels", ")", "\n", "", "if", "self", ".", "CMPC", ":", "\n", "            ", "cmpc_loss", ",", "image_precision", ",", "text_precision", "=", "self", ".", "compute_cmpc_loss", "(", "global_img_feat", ",", "\n", "global_text_feat", ",", "labels", ")", "\n", "", "if", "self", ".", "CONT", ":", "\n", "            ", "i2t_sim", ",", "t2i_sim", "=", "self", ".", "compute_weiTexts", "(", "local_img_query", ",", "local_img_value", ",", "local_text_key", ",", "local_text_value", ",", "text_length", ",", "self", ".", "args", ")", "\n", "cont_loss", ",", "local_pos_avg_sim", ",", "local_neg_avg_sim", "=", "self", ".", "contrastive_loss", "(", "i2t_sim", ",", "t2i_sim", ",", "labels", ")", "\n", "cont_loss", "=", "cont_loss", "*", "self", ".", "args", ".", "lambda_cont", "\n", "\n", "", "loss", "=", "cmpm_loss", "+", "cmpc_loss", "+", "cont_loss", "\n", "\n", "return", "cmpm_loss", ".", "item", "(", ")", ",", "cmpc_loss", ".", "item", "(", ")", ",", "cont_loss", ".", "item", "(", ")", ",", "loss", ",", "image_precision", ",", "text_precision", ",", "pos_avg_sim", ",", "neg_avg_sim", ",", "local_pos_avg_sim", ",", "local_neg_avg_sim", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.AverageMeter.__init__": [[406, 408], ["metric.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.AverageMeter.reset": [[409, 414], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.AverageMeter.update": [[415, 420], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "n", "*", "val", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.l2norm": [[17, 23], ["torch.div", "torch.div", "torch.div", "torch.div", "torch.pow().sum().sqrt", "torch.pow().sum().sqrt", "torch.pow().sum().sqrt", "torch.pow().sum().sqrt", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow().sum", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "function", ["None"], ["def", "l2norm", "(", "X", ",", "dim", ",", "eps", "=", "1e-8", ")", ":", "\n", "    ", "\"\"\"L2-normalize columns of X\n    \"\"\"", "\n", "norm", "=", "torch", ".", "pow", "(", "X", ",", "2", ")", ".", "sum", "(", "dim", "=", "dim", ",", "keepdim", "=", "True", ")", ".", "sqrt", "(", ")", "+", "eps", "\n", "X", "=", "torch", ".", "div", "(", "X", ",", "norm", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.compute_similarity": [[25, 31], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "function", ["None"], ["", "def", "compute_similarity", "(", "x1", ",", "x2", ",", "dim", "=", "1", ",", "eps", "=", "1e-8", ")", ":", "\n", "    ", "\"\"\"Returns cosine similarity between x1 and x2, computed along dim.\"\"\"", "\n", "w12", "=", "torch", ".", "sum", "(", "x1", "*", "x2", ",", "dim", ")", "\n", "w1", "=", "torch", ".", "norm", "(", "x1", ",", "2", ",", "dim", ")", "\n", "w2", "=", "torch", ".", "norm", "(", "x2", ",", "2", ",", "dim", ")", "\n", "return", "(", "w12", "/", "(", "w1", "*", "w2", ")", ".", "clamp", "(", "min", "=", "eps", ")", ")", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.pairwise_distance": [[32, 45], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum.t", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "B.t"], "function", ["None"], ["", "def", "pairwise_distance", "(", "A", ",", "B", ")", ":", "\n", "    ", "\"\"\"\n    Compute distance between points in A and points in B\n    :param A:  (m,n) -m points, each of n dimension. Every row vector is a point, denoted as A(i).\n    :param B:  (k,n) -k points, each of n dimension. Every row vector is a point, denoted as B(j).\n    :return:  Matrix with (m, k). And the ele in (i,j) is the distance between A(i) and B(j)\n    \"\"\"", "\n", "A_square", "=", "torch", ".", "sum", "(", "A", "*", "A", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "B_square", "=", "torch", ".", "sum", "(", "B", "*", "B", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "distance", "=", "A_square", "+", "B_square", ".", "t", "(", ")", "-", "2", "*", "torch", ".", "matmul", "(", "A", ",", "B", ".", "t", "(", ")", ")", "\n", "\n", "return", "distance", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.func_attention_MxN": [[47, 104], ["metric.l2norm", "metric.l2norm", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "metric.l2norm", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "attn.view.view", "attn.view.view", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.transpose().contiguous", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "txt_i_key_expand.size", "local_img_query.size", "txt_i_key_expand.size", "torch.LeakyReLU", "torch.Softmax", "metric.focal_equal", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose", "metric.focal_prob", "torch.transpose", "torch.transpose", "torch.transpose", "torch.transpose"], "function", ["home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.l2norm", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.l2norm", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.l2norm", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.focal_equal", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.focal_prob"], ["", "def", "func_attention_MxN", "(", "local_img_query", ",", "txt_i_key_expand", ",", "txt_i_value_expand", ",", "opt", ",", "eps", "=", "1e-8", ")", ":", "\n", "    ", "\"\"\"\n    query: (batch, queryL, d)\n    context: (batch, sourceL, d)\n    opt: parameters\n    \"\"\"", "\n", "batch_size", ",", "queryL", ",", "sourceL", "=", "txt_i_key_expand", ".", "size", "(", "\n", "0", ")", ",", "local_img_query", ".", "size", "(", "1", ")", ",", "txt_i_key_expand", ".", "size", "(", "1", ")", "\n", "local_img_query_norm", "=", "l2norm", "(", "local_img_query", ",", "dim", "=", "-", "1", ")", "\n", "txt_i_key_expand_norm", "=", "l2norm", "(", "txt_i_key_expand", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# Step 1: preassign attention", "\n", "# --> (batch, d, queryL)", "\n", "local_img_queryT", "=", "torch", ".", "transpose", "(", "local_img_query_norm", ",", "1", ",", "2", ")", "\n", "\n", "# (batch, sourceL, d)(batch, d, queryL)", "\n", "attn", "=", "torch", ".", "bmm", "(", "txt_i_key_expand_norm", ",", "local_img_queryT", ")", "\n", "attn", "=", "nn", ".", "LeakyReLU", "(", "0.1", ")", "(", "attn", ")", "\n", "attn", "=", "l2norm", "(", "attn", ",", "2", ")", "\n", "\n", "# --> (batch, queryL, sourceL)", "\n", "attn", "=", "torch", ".", "transpose", "(", "attn", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "# --> (batch*queryL, sourceL)", "\n", "attn", "=", "attn", ".", "view", "(", "batch_size", "*", "queryL", ",", "sourceL", ")", "\n", "attn", "=", "nn", ".", "Softmax", "(", "dim", "=", "1", ")", "(", "attn", "*", "opt", ".", "lambda_softmax", ")", "\n", "# --> (batch, queryL, sourceL)", "\n", "attn", "=", "attn", ".", "view", "(", "batch_size", ",", "queryL", ",", "sourceL", ")", "\n", "# print('attn: ', attn)", "\n", "\n", "# Step 2: identify irrelevant fragments", "\n", "# Learning an indicator function H, one for relevant, zero for irrelevant", "\n", "if", "opt", ".", "focal_type", "==", "'equal'", ":", "\n", "        ", "funcH", "=", "focal_equal", "(", "attn", ",", "batch_size", ",", "queryL", ",", "sourceL", ")", "\n", "", "elif", "opt", ".", "focal_type", "==", "'prob'", ":", "\n", "        ", "funcH", "=", "focal_prob", "(", "attn", ",", "batch_size", ",", "queryL", ",", "sourceL", ")", "\n", "", "else", ":", "\n", "        ", "funcH", "=", "None", "\n", "\n", "\n", "# Step 3: reassign attention", "\n", "", "if", "funcH", "is", "not", "None", ":", "\n", "        ", "tmp_attn", "=", "funcH", "*", "attn", "\n", "attn_sum", "=", "torch", ".", "sum", "(", "tmp_attn", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "attn", "=", "tmp_attn", "/", "attn_sum", "\n", "\n", "# --> (batch, d, sourceL)", "\n", "", "txt_i_valueT", "=", "torch", ".", "transpose", "(", "txt_i_value_expand", ",", "1", ",", "2", ")", "\n", "# --> (batch, sourceL, queryL)", "\n", "attnT", "=", "torch", ".", "transpose", "(", "attn", ",", "1", ",", "2", ")", ".", "contiguous", "(", ")", "\n", "# (batch x d x sourceL)(batch x sourceL x queryL)", "\n", "# --> (batch, d, queryL)", "\n", "weightedContext", "=", "torch", ".", "bmm", "(", "txt_i_valueT", ",", "attnT", ")", "\n", "# --> (batch, queryL, d)", "\n", "weightedContext", "=", "torch", ".", "transpose", "(", "weightedContext", ",", "1", ",", "2", ")", "\n", "\n", "#return weightedContext, attn", "\n", "return", "weightedContext", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.focal_equal": [[105, 115], ["torch.where", "torch.where", "torch.where", "torch.where", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like"], "function", ["None"], ["", "def", "focal_equal", "(", "attn", ",", "batch_size", ",", "queryL", ",", "sourceL", ")", ":", "\n", "    ", "\"\"\"\n    consider the confidence g(x) for each fragment as equal\n    sigma_{j} (xi - xj) = sigma_{j} xi - sigma_{j} xj\n    attn: (batch, queryL, sourceL)\n    \"\"\"", "\n", "funcF", "=", "attn", "*", "sourceL", "-", "torch", ".", "sum", "(", "attn", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "fattn", "=", "torch", ".", "where", "(", "funcF", ">", "0", ",", "torch", ".", "ones_like", "(", "attn", ")", ",", "\n", "torch", ".", "zeros_like", "(", "attn", ")", ")", "\n", "return", "fattn", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.focal_prob": [[117, 145], ["attn.unsqueeze().contiguous", "attn.unsqueeze().contiguous", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "xi.view.view", "xj.view.view", "xj_confi.view.view", "torch.bmm", "torch.bmm", "torch.bmm", "torch.bmm", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "funcF.view.view", "torch.where", "torch.where", "torch.where", "torch.where", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "attn.unsqueeze", "attn.unsqueeze"], "function", ["None"], ["", "def", "focal_prob", "(", "attn", ",", "batch_size", ",", "queryL", ",", "sourceL", ")", ":", "\n", "    ", "\"\"\"\n    consider the confidence g(x) for each fragment as the sqrt\n    of their similarity probability to the query fragment\n    sigma_{j} (xi - xj)gj = sigma_{j} xi*gj - sigma_{j} xj*gj\n    attn: (batch, queryL, sourceL)\n    \"\"\"", "\n", "\n", "# -> (batch, queryL, sourceL, 1)", "\n", "xi", "=", "attn", ".", "unsqueeze", "(", "-", "1", ")", ".", "contiguous", "(", ")", "\n", "# -> (batch, queryL, 1, sourceL)", "\n", "xj", "=", "attn", ".", "unsqueeze", "(", "2", ")", ".", "contiguous", "(", ")", "\n", "# -> (batch, queryL, 1, sourceL)", "\n", "xj_confi", "=", "torch", ".", "sqrt", "(", "xj", ")", "\n", "\n", "xi", "=", "xi", ".", "view", "(", "batch_size", "*", "queryL", ",", "sourceL", ",", "1", ")", "\n", "xj", "=", "xj", ".", "view", "(", "batch_size", "*", "queryL", ",", "1", ",", "sourceL", ")", "\n", "xj_confi", "=", "xj_confi", ".", "view", "(", "batch_size", "*", "queryL", ",", "1", ",", "sourceL", ")", "\n", "\n", "# -> (batch*queryL, sourceL, sourceL)", "\n", "term1", "=", "torch", ".", "bmm", "(", "xi", ",", "xj_confi", ")", "\n", "term2", "=", "xj", "*", "xj_confi", "\n", "funcF", "=", "torch", ".", "sum", "(", "term1", "-", "term2", ",", "dim", "=", "-", "1", ")", "# -> (batch*queryL, sourceL)", "\n", "funcF", "=", "funcF", ".", "view", "(", "batch_size", ",", "queryL", ",", "sourceL", ")", "\n", "\n", "fattn", "=", "torch", ".", "where", "(", "funcF", ">", "0", ",", "torch", ".", "ones_like", "(", "attn", ")", ",", "\n", "torch", ".", "zeros_like", "(", "attn", ")", ")", "\n", "return", "fattn", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.constraints": [[147, 161], ["torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "metric.AverageMeter", "k.item", "torch.masked_select", "torch.masked_select", "torch.masked_select", "torch.masked_select", "feas.view.view", "metric.pairwise_distance", "metric.AverageMeter.update", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "function", ["home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.pairwise_distance", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.AverageMeter.update"], ["", "def", "constraints", "(", "features", ",", "labels", ")", ":", "\n", "    ", "labels", "=", "torch", ".", "reshape", "(", "labels", ",", "(", "labels", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "con_loss", "=", "AverageMeter", "(", ")", "\n", "index_dict", "=", "{", "k", ".", "item", "(", ")", "for", "k", "in", "labels", "}", "\n", "for", "index", "in", "index_dict", ":", "\n", "        ", "labels_mask", "=", "(", "labels", "==", "index", ")", "\n", "feas", "=", "torch", ".", "masked_select", "(", "features", ",", "labels_mask", ")", "\n", "feas", "=", "feas", ".", "view", "(", "-", "1", ",", "features", ".", "shape", "[", "1", "]", ")", "\n", "distance", "=", "pairwise_distance", "(", "feas", ",", "feas", ")", "\n", "#torch.sqrt_(distance)", "\n", "num", "=", "feas", ".", "shape", "[", "0", "]", "*", "(", "feas", ".", "shape", "[", "0", "]", "-", "1", ")", "\n", "loss", "=", "torch", ".", "sum", "(", "distance", ")", "/", "num", "\n", "con_loss", ".", "update", "(", "loss", ",", "n", "=", "num", "/", "2", ")", "\n", "", "return", "con_loss", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.constraints_loss": [[163, 192], ["network.eval", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "len", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "metric.constraints", "metric.constraints", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "images.cuda.cuda", "captions.cuda.cuda", "network"], "function", ["home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.constraints", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.constraints"], ["", "def", "constraints_loss", "(", "data_loader", ",", "network", ",", "args", ")", ":", "\n", "    ", "network", ".", "eval", "(", ")", "\n", "max_size", "=", "args", ".", "batch_size", "*", "len", "(", "data_loader", ")", "\n", "images_bank", "=", "torch", ".", "zeros", "(", "(", "max_size", ",", "args", ".", "feature_size", ")", ")", ".", "cuda", "(", ")", "\n", "text_bank", "=", "torch", ".", "zeros", "(", "(", "max_size", ",", "args", ".", "feature_size", ")", ")", ".", "cuda", "(", ")", "\n", "labels_bank", "=", "torch", ".", "zeros", "(", "max_size", ")", ".", "cuda", "(", ")", "\n", "index", "=", "0", "\n", "con_images", "=", "0.0", "\n", "con_text", "=", "0.0", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "images", ",", "captions", ",", "labels", ",", "captions_length", "in", "data_loader", ":", "\n", "            ", "images", "=", "images", ".", "cuda", "(", ")", "\n", "captions", "=", "captions", ".", "cuda", "(", ")", "\n", "interval", "=", "images", ".", "shape", "[", "0", "]", "\n", "image_embeddings", ",", "text_embeddings", "=", "network", "(", "images", ",", "captions", ",", "captions_length", ")", "\n", "images_bank", "[", "index", ":", "index", "+", "interval", "]", "=", "image_embeddings", "\n", "text_bank", "[", "index", ":", "index", "+", "interval", "]", "=", "text_embeddings", "\n", "labels_bank", "[", "index", ":", "index", "+", "interval", "]", "=", "labels", "\n", "index", "=", "index", "+", "interval", "\n", "", "images_bank", "=", "images_bank", "[", ":", "index", "]", "\n", "text_bank", "=", "text_bank", "[", ":", "index", "]", "\n", "labels_bank", "=", "labels_bank", "[", ":", "index", "]", "\n", "\n", "", "if", "args", ".", "constraints_text", ":", "\n", "        ", "con_text", "=", "constraints", "(", "text_bank", ",", "labels_bank", ")", "\n", "", "if", "args", ".", "constraints_images", ":", "\n", "        ", "con_images", "=", "constraints", "(", "images_bank", ",", "labels_bank", ")", "\n", "\n", "", "return", "con_images", ",", "con_text", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.compute_topk": [[422, 459], ["torch.normalize", "torch.normalize", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "global_result.extend", "local_result.extend", "result.extend", "F.normalize.t", "metric.Loss.compute_weiTexts", "torch.cat.append", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "metric.topk", "global_result.extend", "metric.topk", "local_result.extend", "metric.topk", "result.extend", "F.normalize.t", "metric.topk", "metric.topk", "metric.topk"], "function", ["home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.Loss.compute_weiTexts", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.topk", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.topk", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.topk", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.topk", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.topk", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.topk"], ["", "", "def", "compute_topk", "(", "query_global", ",", "query", ",", "value_bank", ",", "gallery_global", ",", "gallery_key", ",", "gallery_value", ",", "\n", "gallery_length", ",", "target_query", ",", "target_gallery", ",", "args", ",", "k_list", "=", "[", "1", ",", "5", ",", "20", "]", ",", "reverse", "=", "False", ")", ":", "\n", "    ", "global_result", "=", "[", "]", "\n", "local_result", "=", "[", "]", "\n", "result", "=", "[", "]", "\n", "sim_cosine", "=", "[", "]", "\n", "\n", "query_global", "=", "F", ".", "normalize", "(", "query_global", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "gallery_global", "=", "F", ".", "normalize", "(", "gallery_global", ",", "p", "=", "2", ",", "dim", "=", "1", ")", "\n", "\n", "sim_cosine_global", "=", "torch", ".", "matmul", "(", "query_global", ",", "gallery_global", ".", "t", "(", ")", ")", "\n", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "query", ".", "shape", "[", "0", "]", ",", "200", ")", ":", "\n", "        ", "i2t_sim", ",", "t2i_sim", "=", "Loss", ".", "compute_weiTexts", "(", "query", "[", "i", ":", "i", "+", "200", "]", ",", "value_bank", "[", "i", ":", "i", "+", "200", "]", ",", "gallery_key", ",", "gallery_value", ",", "gallery_length", ",", "args", ")", "\n", "sim", "=", "i2t_sim", "\n", "sim_cosine", ".", "append", "(", "sim", ")", "\n", "\n", "", "sim_cosine", "=", "torch", ".", "cat", "(", "sim_cosine", ",", "dim", "=", "0", ")", "\n", "\n", "sim_cosine_all", "=", "sim_cosine_global", "+", "sim_cosine", "\n", "reid_sim", "=", "None", "\n", "if", "(", "args", ".", "reranking", ")", ":", "\n", "        ", "reid_sim", "=", "torch", ".", "matmul", "(", "query_global", ",", "query_global", ".", "t", "(", ")", ")", "\n", "\n", "", "global_result", ".", "extend", "(", "topk", "(", "sim_cosine_global", ",", "target_gallery", ",", "target_query", ",", "k", "=", "k_list", ")", ")", "\n", "if", "reverse", ":", "\n", "        ", "global_result", ".", "extend", "(", "topk", "(", "sim_cosine_global", ",", "target_query", ",", "target_gallery", ",", "k", "=", "k_list", ",", "dim", "=", "0", ",", "print_index", "=", "False", ")", ")", "\n", "\n", "", "local_result", ".", "extend", "(", "topk", "(", "sim_cosine", ",", "target_gallery", ",", "target_query", ",", "k", "=", "k_list", ")", ")", "\n", "if", "reverse", ":", "\n", "        ", "local_result", ".", "extend", "(", "topk", "(", "sim_cosine", ",", "target_query", ",", "target_gallery", ",", "k", "=", "k_list", ",", "dim", "=", "0", ",", "print_index", "=", "False", ")", ")", "\n", "\n", "", "result", ".", "extend", "(", "topk", "(", "sim_cosine_all", ",", "target_gallery", ",", "target_query", ",", "k", "=", "k_list", ",", "reid_sim", "=", "reid_sim", ")", ")", "\n", "if", "reverse", ":", "\n", "        ", "result", ".", "extend", "(", "topk", "(", "sim_cosine_all", ",", "target_query", ",", "target_gallery", ",", "k", "=", "k_list", ",", "dim", "=", "0", ",", "print_index", "=", "False", ",", "reid_sim", "=", "reid_sim", ")", ")", "\n", "", "return", "global_result", ",", "local_result", ",", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.jaccard": [[460, 462], ["float", "float", "len", "len", "set", "set", "set", "set"], "function", ["None"], ["", "def", "jaccard", "(", "a_list", ",", "b_list", ")", ":", "\n", "    ", "return", "1.0", "-", "float", "(", "len", "(", "set", "(", "a_list", ")", "&", "set", "(", "b_list", ")", ")", ")", "/", "float", "(", "len", "(", "set", "(", "a_list", ")", "|", "set", "(", "b_list", ")", ")", ")", "*", "1.0", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.topk": [[463, 501], ["max", "len", "pred_labels.t.eq", "sim.cpu().numpy.topk", "sim.cpu().numpy.cpu().numpy", "reid_sim.cpu().numpy.cpu().numpy", "numpy.argsort", "numpy.argsort", "numpy.zeros_like", "enumerate", "torch.Tensor().topk", "torch.Tensor().topk", "torch.Tensor().topk", "torch.Tensor().topk", "pred_labels.t.t", "target_query.view().expand_as", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "result.append", "enumerate", "sim.cpu().numpy.cpu", "reid_sim.cpu().numpy.cpu", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "target_query.view", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "metric.jaccard"], "function", ["home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.topk", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.topk", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.topk", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.topk", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.topk", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.jaccard"], ["", "def", "topk", "(", "sim", ",", "target_gallery", ",", "target_query", ",", "k", "=", "[", "1", ",", "5", ",", "10", "]", ",", "dim", "=", "1", ",", "print_index", "=", "False", ",", "reid_sim", "=", "None", ")", ":", "\n", "    ", "result", "=", "[", "]", "\n", "maxk", "=", "max", "(", "k", ")", "\n", "size_total", "=", "len", "(", "target_query", ")", "\n", "if", "reid_sim", "is", "None", ":", "\n", "        ", "_", ",", "pred_index", "=", "sim", ".", "topk", "(", "maxk", ",", "dim", ",", "True", ",", "True", ")", "\n", "pred_labels", "=", "target_gallery", "[", "pred_index", "]", "\n", "", "else", ":", "\n", "        ", "K", "=", "5", "\n", "sim", "=", "sim", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "reid_sim", "=", "reid_sim", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "pred_index", "=", "np", ".", "argsort", "(", "-", "sim", ",", "axis", "=", "1", ")", "\n", "reid_pred_index", "=", "np", ".", "argsort", "(", "-", "reid_sim", ",", "axis", "=", "1", ")", "\n", "\n", "q_knn", "=", "pred_index", "[", ":", ",", "0", ":", "K", "]", "\n", "g_knn", "=", "reid_pred_index", "[", ":", ",", "0", ":", "K", "]", "\n", "\n", "new_index", "=", "[", "]", "\n", "jaccard_dist", "=", "np", ".", "zeros_like", "(", "sim", ")", "\n", "from", "scipy", ".", "spatial", "import", "distance", "\n", "for", "i", ",", "qq", "in", "enumerate", "(", "q_knn", ")", ":", "\n", "            ", "for", "j", ",", "gg", "in", "enumerate", "(", "g_knn", ")", ":", "\n", "                ", "jaccard_dist", "[", "i", ",", "j", "]", "=", "1.0", "-", "jaccard", "(", "qq", ",", "gg", ")", "\n", "", "", "_", ",", "pred_index", "=", "torch", ".", "Tensor", "(", "sim", "+", "jaccard_dist", ")", ".", "topk", "(", "maxk", ",", "dim", ",", "True", ",", "True", ")", "\n", "pred_labels", "=", "target_gallery", "[", "pred_index", "]", "\n", "\n", "\n", "# pred", "\n", "", "if", "dim", "==", "1", ":", "\n", "        ", "pred_labels", "=", "pred_labels", ".", "t", "(", ")", "\n", "\n", "", "correct", "=", "pred_labels", ".", "eq", "(", "target_query", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred_labels", ")", ")", "\n", "for", "topk", "in", "k", ":", "\n", "#correct_k = torch.sum(correct[:topk]).float()", "\n", "        ", "correct_k", "=", "torch", ".", "sum", "(", "correct", "[", ":", "topk", "]", ",", "dim", "=", "0", ")", "\n", "correct_k", "=", "torch", ".", "sum", "(", "correct_k", ">", "0", ")", ".", "float", "(", ")", "\n", "result", ".", "append", "(", "correct_k", "*", "100", "/", "size_total", ")", "\n", "", "return", "result", "\n", "", ""]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.visualize.visualize_curve": [[6, 43], ["open", "open.readlines", "open.close", "plt.figure", "plt.plot", "plt.figure", "plt.subplot", "plt.plot", "plt.plot", "plt.legend", "plt.subplot", "plt.plot", "plt.plot", "plt.legend", "plt.savefig", "plt.show", "line.strip().split.strip().split", "loss.append", "top1_i2t.append", "top10_i2t.append", "top1_t2i.append", "top10_t2i.append", "line.strip().split.strip", "log_root.rfind"], "function", ["None"], ["def", "visualize_curve", "(", "log_root", ")", ":", "\n", "    ", "log_file", "=", "open", "(", "log_root", ",", "'r'", ")", "\n", "result_root", "=", "log_root", "[", ":", "log_root", ".", "rfind", "(", "'/'", ")", "+", "1", "]", "+", "'train.jpg'", "\n", "loss", "=", "[", "]", "\n", "\n", "top1_i2t", "=", "[", "]", "\n", "top10_i2t", "=", "[", "]", "\n", "top1_t2i", "=", "[", "]", "\n", "top10_t2i", "=", "[", "]", "\n", "for", "line", "in", "log_file", ".", "readlines", "(", ")", ":", "\n", "        ", "line", "=", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "\n", "\n", "if", "'top10_t2i'", "not", "in", "line", "[", "-", "2", "]", ":", "\n", "            ", "continue", "\n", "\n", "", "loss", ".", "append", "(", "line", "[", "1", "]", ")", "\n", "top1_i2t", ".", "append", "(", "line", "[", "3", "]", ")", "\n", "top10_i2t", ".", "append", "(", "line", "[", "5", "]", ")", "\n", "top1_t2i", ".", "append", "(", "line", "[", "7", "]", ")", "\n", "top10_t2i", ".", "append", "(", "line", "[", "9", "]", ")", "\n", "\n", "", "log_file", ".", "close", "(", ")", "\n", "\n", "plt", ".", "figure", "(", "'loss'", ")", "\n", "plt", ".", "plot", "(", "loss", ")", "\n", "\n", "plt", ".", "figure", "(", "'accuracy'", ")", "\n", "plt", ".", "subplot", "(", "211", ")", "\n", "plt", ".", "plot", "(", "top1_i2t", ",", "label", "=", "'top1'", ")", "\n", "plt", ".", "plot", "(", "top10_i2t", ",", "label", "=", "'top10'", ")", "\n", "plt", ".", "legend", "(", "[", "'image to text'", "]", ",", "loc", "=", "'upper right'", ")", "\n", "plt", ".", "subplot", "(", "212", ")", "\n", "plt", ".", "plot", "(", "top1_t2i", ",", "label", "=", "'top1'", ")", "\n", "plt", ".", "plot", "(", "top10_i2t", ",", "label", "=", "'top10'", ")", "\n", "plt", ".", "legend", "(", "[", "'text to image'", "]", ",", "loc", "=", "'upper right'", ")", "\n", "plt", ".", "savefig", "(", "result_root", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.pedes.Namespace.__init__": [[13, 15], ["pedes.Namespace.__dict__.update"], "methods", ["home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.metric.AverageMeter.update"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "__dict__", ".", "update", "(", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.pedes.CuhkPedes.__init__": [[27, 47], ["split.lower", "print", "pedes.CuhkPedes.get_data_from_json", "pedes.CuhkPedes.read_data", "utils.directory.check_exists", "RuntimeError"], "methods", ["home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.pedes.CuhkPedes.get_data_from_json", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.pedes.CuhkPedes.read_data", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.utils.directory.check_exists"], ["def", "__init__", "(", "self", ",", "image_root", ",", "anno_root", ",", "split", ",", "max_length", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "cap_transform", "=", "None", ",", "vocab_path", "=", "''", ",", "min_word_count", "=", "0", ")", ":", "\n", "\n", "        ", "self", ".", "image_root", "=", "image_root", "\n", "self", ".", "anno_root", "=", "anno_root", "\n", "self", ".", "max_length", "=", "max_length", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "target_transform", "=", "target_transform", "\n", "self", ".", "cap_transform", "=", "cap_transform", "\n", "self", ".", "split", "=", "split", ".", "lower", "(", ")", "\n", "self", ".", "vocab_path", "=", "vocab_path", "\n", "self", ".", "min_word_count", "=", "min_word_count", "\n", "\n", "if", "not", "check_exists", "(", "self", ".", "image_root", ")", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Dataset not found or corrupted.'", "+", "\n", "'Please follow the directions to generate datasets'", ")", "\n", "\n", "", "print", "(", "'Reading data from json'", ")", "\n", "data", "=", "self", ".", "get_data_from_json", "(", ")", "\n", "self", ".", "read_data", "(", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.pedes.CuhkPedes.add_caption_to_data": [[49, 68], ["caption.append", "len", "len"], "methods", ["None"], ["", "def", "add_caption_to_data", "(", "self", ",", "split_data", ",", "data", ")", ":", "\n", "\n", "        ", "fname_dict", "=", "{", "jj", "[", "'file_path'", "]", ":", "jj", "for", "jj", "in", "split_data", "}", "\n", "judge", "=", "{", "jj", "[", "'file_path'", "]", ":", "0", "for", "jj", "in", "split_data", "}", "\n", "\n", "for", "fname", "in", "data", "[", "'images_path'", "]", ":", "\n", "            ", "judge", "[", "fname", "]", "=", "judge", "[", "fname", "]", "+", "1", "\n", "\n", "", "caption", "=", "[", "]", "\n", "for", "fname", "in", "data", "[", "'images_path'", "]", ":", "\n", "            ", "jj", "=", "fname_dict", "[", "fname", "]", "\n", "\n", "caption", ".", "append", "(", "jj", "[", "'captions'", "]", "[", "judge", "[", "fname", "]", "-", "1", "]", ")", "\n", "judge", "[", "fname", "]", "=", "judge", "[", "fname", "]", "-", "1", "\n", "\n", "\n", "", "assert", "len", "(", "caption", ")", "==", "len", "(", "data", "[", "'images_path'", "]", ")", "\n", "data", "[", "'captions'", "]", "=", "caption", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.pedes.CuhkPedes.get_data_from_json": [[70, 90], ["pedes.Namespace", "pedes.CuhkPedes.load_split", "datasets.process_metadata", "datasets.process_decodedata", "datasets.process_dataset", "pedes.CuhkPedes.add_caption_to_data", "print", "datasets.build_vocab", "print", "pedes.CuhkPedes.load_vocab"], "methods", ["home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.load_split", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.process_metadata", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.process_decodedata", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.process_dataset", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.pedes.CuhkPedes.add_caption_to_data", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.build_vocab", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.load_vocab"], ["", "def", "get_data_from_json", "(", "self", ")", ":", "\n", "        ", "args", "=", "Namespace", "(", "min_word_count", "=", "self", ".", "min_word_count", ",", "remove_stopwords", "=", "None", ",", "out_root", "=", "None", ")", "\n", "\n", "split_data", "=", "self", ".", "load_split", "(", "self", ".", "split", ")", "\n", "\n", "if", "self", ".", "vocab_path", "==", "''", ":", "\n", "            ", "print", "(", "'Building vocabulary...'", ")", "\n", "vocab", "=", "preprocess", ".", "build_vocab", "(", "split_data", ",", "args", ",", "write", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Loading vocabulary from {}'", ".", "format", "(", "self", ".", "vocab_path", ")", ")", "\n", "vocab", "=", "self", ".", "load_vocab", "(", "self", ".", "vocab_path", ")", "\n", "\n", "\n", "", "split_metadata", "=", "preprocess", ".", "process_metadata", "(", "self", ".", "split", ",", "split_data", ",", "args", ",", "write", "=", "False", ")", "\n", "split_decodedata", "=", "preprocess", ".", "process_decodedata", "(", "split_metadata", ",", "vocab", ")", "\n", "data", "=", "preprocess", ".", "process_dataset", "(", "self", ".", "split", ",", "split_decodedata", ",", "args", ",", "write", "=", "False", ")", "\n", "\n", "\n", "data", "=", "self", ".", "add_caption_to_data", "(", "split_data", ",", "data", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.pedes.CuhkPedes.load_split": [[91, 98], ["os.path.join", "print", "open", "json.load"], "methods", ["None"], ["", "def", "load_split", "(", "self", ",", "split", ")", ":", "\n", "        ", "split_root", "=", "os", ".", "path", ".", "join", "(", "self", ".", "anno_root", ",", "split", "+", "'_reid.json'", ")", "\n", "with", "open", "(", "split_root", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "split_data", "=", "json", ".", "load", "(", "f", ")", "\n", "", "print", "(", "'load {} data from json done'", ".", "format", "(", "split", ")", ")", "\n", "\n", "return", "split_data", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.pedes.CuhkPedes.load_vocab": [[99, 106], ["datasets.Vocabulary", "print", "open", "pickle.load", "len", "os.path.join"], "methods", ["None"], ["", "def", "load_vocab", "(", "self", ",", "vocab_path", ")", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "vocab_path", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "word_to_idx", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "vocab", "=", "preprocess", ".", "Vocabulary", "(", "word_to_idx", ",", "len", "(", "word_to_idx", ")", ")", "\n", "print", "(", "'load vocabulary done'", ")", "\n", "return", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.pedes.CuhkPedes.read_data": [[107, 137], ["RuntimeError", "unique.append", "unique.append", "new_test_images.append"], "methods", ["None"], ["", "def", "read_data", "(", "self", ",", "data", ")", ":", "\n", "\n", "        ", "if", "self", ".", "split", "==", "'train'", ":", "\n", "            ", "self", ".", "train_labels", "=", "data", "[", "'labels'", "]", "\n", "self", ".", "train_captions", "=", "data", "[", "'captions'", "]", "\n", "self", ".", "train_images", "=", "data", "[", "'images_path'", "]", "\n", "\n", "", "elif", "self", ".", "split", "==", "'val'", ":", "\n", "            ", "self", ".", "val_labels", "=", "data", "[", "'labels'", "]", "\n", "self", ".", "val_captions", "=", "data", "[", "'captions'", "]", "\n", "self", ".", "val_images", "=", "data", "[", "'images_path'", "]", "\n", "\n", "", "elif", "self", ".", "split", "==", "'test'", ":", "\n", "            ", "self", ".", "test_labels", "=", "data", "[", "'labels'", "]", "\n", "self", ".", "test_captions", "=", "data", "[", "'captions'", "]", "\n", "self", ".", "test_images", "=", "data", "[", "'images_path'", "]", "\n", "\n", "unique", "=", "[", "]", "\n", "new_test_images", "=", "[", "]", "\n", "for", "test_image", "in", "self", ".", "test_images", ":", "\n", "                ", "if", "test_image", "in", "new_test_images", ":", "\n", "                    ", "unique", ".", "append", "(", "0", ")", "\n", "", "else", ":", "\n", "                    ", "unique", ".", "append", "(", "1", ")", "\n", "new_test_images", ".", "append", "(", "test_image", ")", "\n", "", "", "self", ".", "unique", "=", "unique", "\n", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "'Wrong split which should be one of \"train\",\"val\" or \"test\"'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.pedes.CuhkPedes.__getitem__": [[139, 174], ["scipy.misc.imread", "scipy.misc.imresize", "PIL.Image.fromarray", "os.path.join", "os.path.join", "len", "numpy.dstack", "pedes.CuhkPedes.transform", "pedes.CuhkPedes.target_transform"], "methods", ["None"], ["", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n              index(int): Index\n        Returns:\n              tuple: (images, labels, captions)\n        \"\"\"", "\n", "if", "self", ".", "split", "==", "'train'", ":", "\n", "            ", "img_path", ",", "caption", ",", "label", "=", "self", ".", "train_images", "[", "index", "]", ",", "self", ".", "train_captions", "[", "index", "]", ",", "self", ".", "train_labels", "[", "index", "]", "\n", "", "elif", "self", ".", "split", "==", "'val'", ":", "\n", "            ", "img_path", ",", "caption", ",", "label", "=", "self", ".", "val_images", "[", "index", "]", ",", "self", ".", "val_captions", "[", "index", "]", ",", "self", ".", "val_labels", "[", "index", "]", "\n", "", "else", ":", "\n", "            ", "img_path", ",", "caption", ",", "label", "=", "self", ".", "test_images", "[", "index", "]", ",", "self", ".", "test_captions", "[", "index", "]", ",", "self", ".", "test_labels", "[", "index", "]", "\n", "\n", "\n", "", "middle_path", "=", "\"CUHK-PEDES/imgs\"", "\n", "if", "middle_path", "not", "in", "img_path", ":", "\n", "            ", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_root", ",", "middle_path", ",", "img_path", ")", "\n", "", "else", ":", "\n", "            ", "img_path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "image_root", ",", "img_path", ")", "\n", "\n", "\n", "", "img", "=", "imread", "(", "img_path", ")", "\n", "img", "=", "imresize", "(", "img", ",", "(", "384", ",", "128", ")", ")", "\n", "if", "len", "(", "img", ".", "shape", ")", "==", "2", ":", "\n", "            ", "img", "=", "np", ".", "dstack", "(", "(", "img", ",", "img", ",", "img", ")", ")", "\n", "", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n", "            ", "label", "=", "self", ".", "target_transform", "(", "label", ")", "\n", "\n", "", "return", "img", ",", "caption", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.pedes.CuhkPedes.__len__": [[175, 182], ["len", "len", "len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "split", "==", "'train'", ":", "\n", "            ", "return", "len", "(", "self", ".", "train_labels", ")", "\n", "", "elif", "self", ".", "split", "==", "'val'", ":", "\n", "            ", "return", "len", "(", "self", ".", "val_labels", ")", "\n", "", "else", ":", "\n", "            ", "return", "len", "(", "self", ".", "test_labels", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.Vocabulary.__init__": [[29, 36], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "vocab", ",", "unk_id", ")", ":", "\n", "        ", "\"\"\"\n        :param vocab: A dictionary of word to word_id\n        :param unk_id: Id of the bad/unknown words\n        \"\"\"", "\n", "self", ".", "_vocab", "=", "vocab", "\n", "self", ".", "_unk_id", "=", "unk_id", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.Vocabulary.word_to_id": [[37, 41], ["None"], "methods", ["None"], ["", "def", "word_to_id", "(", "self", ",", "word", ")", ":", "\n", "        ", "if", "word", "not", "in", "self", ".", "_vocab", ":", "\n", "            ", "return", "self", ".", "_unk_id", "\n", "", "return", "self", ".", "_vocab", "[", "word", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.Vocabulary.id_to_word": [[42, 47], ["None"], "methods", ["None"], ["", "def", "id_to_word", "(", "self", ",", "id", ")", ":", "\n", "        ", "if", "id", "not", "in", "self", ".", "_reverse_vocab", ":", "\n", "            ", "return", "''", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_reverse_vocab", "[", "id", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.makedir": [[13, 16], ["os.path.exists", "os.makedirs"], "function", ["None"], ["def", "makedir", "(", "root", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "root", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "root", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.write_json": [[18, 21], ["open", "json.dump"], "function", ["None"], ["", "", "def", "write_json", "(", "data", ",", "root", ")", ":", "\n", "    ", "with", "open", "(", "root", ",", "'w'", ")", "as", "f", ":", "\n", "        ", "json", ".", "dump", "(", "data", ",", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.cap2tokens": [[49, 56], ["set", "preprocess.add_start_end"], "function", ["home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.add_start_end"], ["", "", "", "def", "cap2tokens", "(", "cap", ")", ":", "\n", "    ", "exclude", "=", "set", "(", "string", ".", "punctuation", "+", "string", ".", "whitespace", "+", "hanzi", ".", "punctuation", ")", "\n", "caption", "=", "''", ".", "join", "(", "c", "for", "c", "in", "cap", "if", "c", "not", "in", "exclude", ")", "\n", "tokens", "=", "[", "letter", "for", "letter", "in", "caption", "]", "\n", "# print(tokens)", "\n", "tokens", "=", "add_start_end", "(", "tokens", ")", "\n", "return", "tokens", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.add_start_end": [[58, 66], ["tokens_processed.extend", "tokens_processed.append"], "function", ["None"], ["", "def", "add_start_end", "(", "tokens", ",", "start_word", "=", "'<START>'", ",", "end_word", "=", "'<END>'", ")", ":", "\n", "    ", "\"\"\"\n    Add start and end words for a caption\n    \"\"\"", "\n", "tokens_processed", "=", "[", "start_word", "]", "\n", "tokens_processed", ".", "extend", "(", "tokens", ")", "\n", "tokens_processed", ".", "append", "(", "end_word", ")", "\n", "return", "tokens_processed", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.process_captions": [[68, 74], ["preprocess.cap2tokens", "img[].append"], "function", ["home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.cap2tokens"], ["", "def", "process_captions", "(", "imgs", ")", ":", "\n", "    ", "for", "img", "in", "imgs", ":", "\n", "        ", "img", "[", "'processed_tokens'", "]", "=", "[", "]", "\n", "for", "s", "in", "img", "[", "'captions'", "]", ":", "\n", "            ", "tokens", "=", "cap2tokens", "(", "s", ")", "\n", "img", "[", "'processed_tokens'", "]", ".", "append", "(", "tokens", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.build_vocab": [[76, 134], ["print", "print", "word_counts.sort", "print", "len", "len", "dict", "preprocess.Vocabulary", "enumerate", "print", "print", "print", "len", "print", "len", "os.path.join", "os.path.join", "len", "open", "f.readlines", "l.strip", "counts.items", "counts.items", "open", "f.write", "f.write", "f.write", "open", "f.write", "f.write", "f.write", "open", "pickle.dump", "len", "str", "str", "enumerate", "os.path.join", "len", "len", "len", "len", "counts.get", "len", "len", "len", "len", "len", "len", "len", "len"], "function", ["None"], ["", "", "", "def", "build_vocab", "(", "imgs", ",", "args", ",", "write", "=", "True", ")", ":", "\n", "    ", "print", "(", "'start build vodabulary'", ")", "\n", "counts", "=", "{", "}", "\n", "for", "img", "in", "imgs", ":", "\n", "        ", "for", "tokens", "in", "img", "[", "'processed_tokens'", "]", ":", "\n", "            ", "for", "word", "in", "tokens", ":", "\n", "                ", "counts", "[", "word", "]", "=", "counts", ".", "get", "(", "word", ",", "0", ")", "+", "1", "\n", "", "", "", "print", "(", "'Total words:'", ",", "len", "(", "counts", ")", ")", "\n", "\n", "# filter uncommon words and sort by descending count.", "\n", "# word_counts: a list of (words, count) for words satisfying the condition.", "\n", "stop_words", "=", "[", "]", "\n", "\n", "if", "args", ".", "remove_stopwords", "is", "not", "None", ":", "\n", "        ", "with", "open", "(", "args", ".", "remove_stopwords", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "stop_words", "=", "[", "l", ".", "strip", "(", ")", "for", "l", "in", "lines", "]", "\n", "print", "(", "'Stop words cnt:{}'", ".", "format", "(", "len", "(", "stop_words", ")", ")", ")", "\n", "", "word_counts", "=", "[", "(", "w", ",", "n", ")", "for", "w", ",", "n", "in", "counts", ".", "items", "(", ")", "if", "n", ">=", "args", ".", "min_word_count", "and", "w", "not", "in", "stop_words", "]", "\n", "word_counts", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "print", "(", "'Words in vocab:'", ",", "len", "(", "word_counts", ")", ")", "\n", "\n", "words_out", "=", "[", "(", "w", ",", "n", ")", "for", "w", ",", "n", "in", "counts", ".", "items", "(", ")", "if", "n", "<", "args", ".", "min_word_count", "or", "w", "in", "stop_words", "]", "\n", "bad_words", "=", "len", "(", "words_out", ")", "\n", "bad_count", "=", "len", "(", "[", "x", "[", "1", "]", "for", "x", "in", "words_out", "]", ")", "\n", "\n", "# save the word counts file", "\n", "if", "write", ":", "\n", "        ", "word_counts_root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "out_root", "+", "'/word_counts.txt'", ")", "\n", "with", "open", "(", "word_counts_root", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "'Total words: %d \\n'", "%", "len", "(", "counts", ")", ")", "\n", "f", ".", "write", "(", "'Words in vocabulary: %d \\n'", "%", "len", "(", "word_counts", ")", ")", "\n", "f", ".", "write", "(", "str", "(", "word_counts", ")", ")", "\n", "\n", "", "word_counts_root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "out_root", "+", "'/word_outs.txt'", ")", "\n", "with", "open", "(", "word_counts_root", ",", "'w'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "'Total words: %d \\n'", "%", "len", "(", "counts", ")", ")", "\n", "f", ".", "write", "(", "'Words in vocabulary: %d \\n'", "%", "len", "(", "words_out", ")", ")", "\n", "f", ".", "write", "(", "str", "(", "words_out", ")", ")", "\n", "\n", "", "", "word_reverse", "=", "[", "w", "for", "(", "w", ",", "n", ")", "in", "word_counts", "]", "\n", "vocab_dict", "=", "dict", "(", "[", "(", "word", ",", "index", ")", "for", "(", "index", ",", "word", ")", "in", "enumerate", "(", "word_reverse", ")", "]", ")", "\n", "vocab", "=", "Vocabulary", "(", "vocab_dict", ",", "len", "(", "vocab_dict", ")", ")", "\n", "\n", "# Save word index as pickle form", "\n", "word_to_idx", "=", "{", "}", "\n", "for", "index", ",", "word", "in", "enumerate", "(", "word_reverse", ")", ":", "\n", "        ", "word_to_idx", "[", "word", "]", "=", "index", "\n", "\n", "", "if", "write", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "out_root", ",", "'word_to_index.pkl'", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "word_to_idx", ",", "f", ")", "\n", "\n", "", "", "print", "(", "'number of bad words: %d/%d = %.2f%%'", "%", "(", "bad_words", ",", "len", "(", "counts", ")", ",", "bad_words", "*", "100.0", "/", "len", "(", "counts", ")", ")", ")", "\n", "print", "(", "'number of words in vocab: %d/%d = %.2f%%'", "%", "(", "len", "(", "word_counts", ")", ",", "len", "(", "counts", ")", ",", "len", "(", "word_counts", ")", "*", "100.0", "/", "len", "(", "counts", ")", ")", ")", "\n", "print", "(", "'number of Null: %d/%d = %.2f%%'", "%", "(", "bad_count", ",", "len", "(", "counts", ")", ",", "bad_count", "*", "100.0", "/", "len", "(", "counts", ")", ")", ")", "\n", "\n", "return", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.load_vocab": [[135, 143], ["preprocess.Vocabulary", "print", "open", "pickle.load", "len", "os.path.join"], "function", ["None"], ["", "def", "load_vocab", "(", "args", ")", ":", "\n", "\n", "    ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "out_root", ",", "'word_to_index.pkl'", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "word_to_idx", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "vocab", "=", "Vocabulary", "(", "word_to_idx", ",", "len", "(", "word_to_idx", ")", ")", "\n", "print", "(", "'load vocabulary done'", ")", "\n", "return", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.process_metadata": [[145, 181], ["print", "print", "id_to_captions.setdefault", "id_to_captions[].append", "image_metadata.append", "len", "ImageMetaData", "open", "f.write", "f.write", "len", "os.path.join", "len"], "function", ["None"], ["", "def", "process_metadata", "(", "split", ",", "data", ",", "args", ",", "write", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Wrap data into ImageMatadata form\n    \"\"\"", "\n", "id_to_captions", "=", "{", "}", "\n", "image_metadata", "=", "[", "]", "\n", "num_captions", "=", "0", "\n", "count", "=", "0", "\n", "\n", "for", "img", "in", "data", ":", "\n", "        ", "count", "+=", "1", "\n", "# absolute image path", "\n", "# filepath = os.path.join(args.img_root, img['file_path'])", "\n", "# relative image path", "\n", "filepath", "=", "img", "[", "'file_path'", "]", "\n", "# assert os.path.exists(filepath)", "\n", "id", "=", "img", "[", "'id'", "]", "-", "1", "\n", "captions", "=", "img", "[", "'processed_tokens'", "]", "\n", "\n", "# print(captions)", "\n", "\n", "id_to_captions", ".", "setdefault", "(", "id", ",", "[", "]", ")", "\n", "id_to_captions", "[", "id", "]", ".", "append", "(", "captions", ")", "\n", "assert", "split", "==", "img", "[", "'split'", "]", ",", "'error: wrong split'", "\n", "image_metadata", ".", "append", "(", "ImageMetaData", "(", "id", ",", "filepath", ",", "captions", ",", "split", ")", ")", "\n", "num_captions", "+=", "len", "(", "captions", ")", "\n", "\n", "", "print", "(", "\"Process metadata done!\"", ")", "\n", "print", "(", "\"Total %d captions %d images %d identities in %s\"", "%", "(", "num_captions", ",", "count", ",", "len", "(", "id_to_captions", ")", ",", "split", ")", ")", "\n", "\n", "if", "write", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "args", ".", "out_root", ",", "'metadata_info.txt'", ")", ",", "'a'", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "\"Total %d captions %d images %d identities in %s\"", "%", "(", "num_captions", ",", "count", ",", "len", "(", "id_to_captions", ")", ",", "split", ")", ")", "\n", "f", ".", "write", "(", "'\\n'", ")", "\n", "\n", "", "", "return", "image_metadata", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.process_decodedata": [[183, 201], ["print", "image_decodedata.append", "cap_to_vec.append", "ImageDecodeData", "vocab.word_to_id"], "function", ["home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.Vocabulary.word_to_id"], ["", "def", "process_decodedata", "(", "data", ",", "vocab", ")", ":", "\n", "    ", "\"\"\"\n    Decode ImageMetaData to ImageDecodeData\n    Each item in imagedecodedata has 2 captions. (len(captions_id) = 2)\n    \"\"\"", "\n", "image_decodedata", "=", "[", "]", "\n", "for", "img", "in", "data", ":", "\n", "        ", "image_path", "=", "img", ".", "image_path", "\n", "\n", "cap_to_vec", "=", "[", "]", "\n", "\n", "for", "cap", "in", "img", ".", "captions", ":", "\n", "            ", "cap_to_vec", ".", "append", "(", "[", "vocab", ".", "word_to_id", "(", "word", ")", "for", "word", "in", "cap", "]", ")", "\n", "", "image_decodedata", ".", "append", "(", "ImageDecodeData", "(", "img", ".", "id", ",", "image_path", ",", "cap_to_vec", ",", "img", ".", "split", ")", ")", "\n", "\n", "", "print", "(", "'Process decodedata done!'", ")", "\n", "\n", "return", "image_decodedata", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.process_dataset": [[203, 211], ["preprocess.create_dataset_sort", "preprocess.write_dataset"], "function", ["home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.create_dataset_sort", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.write_dataset"], ["", "def", "process_dataset", "(", "split", ",", "decodedata", ",", "args", ",", "write", "=", "True", ")", ":", "\n", "# Process dataset", "\n", "\n", "# Arrange by caption in a sorted form", "\n", "    ", "dataset", ",", "label_range", "=", "create_dataset_sort", "(", "split", ",", "decodedata", ")", "\n", "\n", "data", "=", "write_dataset", "(", "split", ",", "dataset", ",", "args", ",", "write", "=", "write", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.create_dataset_sort": [[213, 241], ["print", "images.keys", "images_sort.extend", "range", "label_range[].append", "ImageDecodeData", "images[].extend", "label_range[].append", "len", "len", "len"], "function", ["None"], ["", "def", "create_dataset_sort", "(", "split", ",", "data", ")", ":", "\n", "    ", "images_sort", "=", "[", "]", "\n", "label_range", "=", "{", "}", "\n", "images", "=", "{", "}", "\n", "for", "img", "in", "data", ":", "\n", "        ", "label", "=", "img", ".", "id", "\n", "image", "=", "[", "ImageDecodeData", "(", "img", ".", "id", ",", "img", ".", "image_path", ",", "[", "caption_id", "]", ",", "img", ".", "split", ")", "for", "caption_id", "in", "img", ".", "captions_id", "]", "\n", "if", "label", "in", "images", ":", "\n", "            ", "images", "[", "label", "]", ".", "extend", "(", "image", ")", "\n", "label_range", "[", "label", "]", ".", "append", "(", "len", "(", "image", ")", ")", "\n", "", "else", ":", "\n", "            ", "images", "[", "label", "]", "=", "image", "\n", "label_range", "[", "label", "]", "=", "[", "len", "(", "image", ")", "]", "\n", "\n", "", "", "print", "(", "'=========== Arrange by id============================='", ")", "\n", "index", "=", "-", "1", "\n", "for", "label", "in", "images", ".", "keys", "(", ")", ":", "\n", "# all captions arrange together", "\n", "        ", "images_sort", ".", "extend", "(", "images", "[", "label", "]", ")", "\n", "# label_range is arranged according to their actual index", "\n", "# label_range[label] = (previous, current]", "\n", "start", "=", "index", "\n", "for", "index_image", "in", "range", "(", "len", "(", "label_range", "[", "label", "]", ")", ")", ":", "\n", "            ", "label_range", "[", "label", "]", "[", "index_image", "]", "+=", "index", "\n", "index", "=", "label_range", "[", "label", "]", "[", "index_image", "]", "\n", "", "label_range", "[", "label", "]", ".", "append", "(", "start", ")", "\n", "\n", "", "return", "images_sort", ",", "label_range", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.write_dataset": [[243, 273], ["caption_id.append", "labels.append", "images_path.append", "print", "len", "os.path.join", "os.path.join", "open", "pickle.dump"], "function", ["None"], ["", "def", "write_dataset", "(", "split", ",", "data", ",", "args", ",", "label_range", "=", "None", ",", "write", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    Separate each component\n    Write dataset into binary file\n    \"\"\"", "\n", "caption_id", "=", "[", "]", "\n", "images_path", "=", "[", "]", "\n", "labels", "=", "[", "]", "\n", "\n", "for", "img", "in", "data", ":", "\n", "        ", "assert", "len", "(", "img", ".", "captions_id", ")", "==", "1", "\n", "caption_id", ".", "append", "(", "img", ".", "captions_id", "[", "0", "]", ")", "\n", "labels", ".", "append", "(", "img", ".", "id", ")", "\n", "images_path", ".", "append", "(", "img", ".", "image_path", ")", "\n", "\n", "#N = len(images)", "\n", "", "data", "=", "{", "'caption_id'", ":", "caption_id", ",", "'labels'", ":", "labels", ",", "'images_path'", ":", "images_path", "}", "\n", "\n", "if", "write", ":", "\n", "        ", "if", "label_range", "is", "not", "None", ":", "\n", "            ", "data", "[", "'label_range'", "]", "=", "label_range", "\n", "pickle_root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "out_root", ",", "split", "+", "'_sort.pkl'", ")", "\n", "", "else", ":", "\n", "            ", "pickle_root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "out_root", ",", "split", "+", "'.pkl'", ")", "\n", "# Write caption_id and labels as pickle form", "\n", "", "with", "open", "(", "pickle_root", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "data", ",", "f", ")", "\n", "", "print", "(", "'Save dataset'", ")", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.generate_split": [[276, 303], ["preprocess.write_json", "preprocess.write_json", "preprocess.write_json", "open", "json.load", "print", "preprocess.process_captions", "print", "print", "os.path.join", "os.path.join", "os.path.join", "train_data.append", "val_data.append", "test_data.append"], "function", ["home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.write_json", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.write_json", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.write_json", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.process_captions"], ["", "def", "generate_split", "(", "args", ")", ":", "\n", "\n", "    ", "with", "open", "(", "args", ".", "json_root", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "imgs", "=", "json", ".", "load", "(", "f", ")", "\n", "# print(imgs)", "\n", "# process caption", "\n", "", "if", "not", "args", ".", "load_tokens", ":", "\n", "        ", "print", "(", "'Spliting tokens at runtime...'", ")", "\n", "process_captions", "(", "imgs", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Tokens in json preserved...'", ")", "\n", "print", "(", "'DEBUG'", ",", "[", "im", "[", "'processed_tokens'", "]", "for", "im", "in", "imgs", "[", ":", "10", "]", "]", ")", "\n", "", "val_data", "=", "[", "]", "\n", "train_data", "=", "[", "]", "\n", "test_data", "=", "[", "]", "\n", "for", "img", "in", "imgs", ":", "\n", "        ", "if", "img", "[", "'split'", "]", "==", "'train'", ":", "\n", "            ", "train_data", ".", "append", "(", "img", ")", "\n", "", "elif", "img", "[", "'split'", "]", "==", "'val'", ":", "\n", "            ", "val_data", ".", "append", "(", "img", ")", "\n", "", "else", ":", "\n", "            ", "test_data", ".", "append", "(", "img", ")", "\n", "", "", "write_json", "(", "train_data", ",", "os", ".", "path", ".", "join", "(", "args", ".", "out_root", ",", "'train_reid.json'", ")", ")", "\n", "write_json", "(", "val_data", ",", "os", ".", "path", ".", "join", "(", "args", ".", "out_root", ",", "'val_reid.json'", ")", ")", "\n", "write_json", "(", "test_data", ",", "os", ".", "path", ".", "join", "(", "args", ".", "out_root", ",", "'test_reid.json'", ")", ")", "\n", "\n", "return", "[", "train_data", ",", "val_data", ",", "test_data", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.load_split": [[304, 316], ["print", "os.path.join", "data.append", "open", "json.load"], "function", ["None"], ["", "def", "load_split", "(", "args", ")", ":", "\n", "\n", "    ", "data", "=", "[", "]", "\n", "splits", "=", "[", "'train'", ",", "'val'", ",", "'test'", "]", "\n", "for", "split", "in", "splits", ":", "\n", "        ", "split_root", "=", "os", ".", "path", ".", "join", "(", "args", ".", "out_root", ",", "split", "+", "'_reid.json'", ")", "\n", "with", "open", "(", "split_root", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "split_data", "=", "json", ".", "load", "(", "f", ")", "\n", "", "data", ".", "append", "(", "split_data", ")", "\n", "\n", "", "print", "(", "'load data done'", ")", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.process_data": [[318, 344], ["preprocess.process_metadata", "preprocess.process_metadata", "preprocess.process_metadata", "preprocess.process_decodedata", "preprocess.process_decodedata", "preprocess.process_decodedata", "preprocess.process_dataset", "preprocess.process_dataset", "preprocess.process_dataset", "preprocess.load_split", "preprocess.generate_split", "preprocess.load_vocab", "preprocess.build_vocab"], "function", ["home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.process_metadata", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.process_metadata", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.process_metadata", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.process_decodedata", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.process_decodedata", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.process_decodedata", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.process_dataset", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.process_dataset", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.process_dataset", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.load_split", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.generate_split", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.load_vocab", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.build_vocab"], ["", "def", "process_data", "(", "args", ")", ":", "\n", "    ", "if", "args", ".", "load_split", ":", "\n", "        ", "train_data", ",", "val_data", ",", "test_data", "=", "load_split", "(", "args", ")", "\n", "", "else", ":", "\n", "        ", "train_data", ",", "val_data", ",", "test_data", "=", "generate_split", "(", "args", ")", "\n", "\n", "", "if", "args", ".", "load_vocab", ":", "\n", "        ", "vocab", "=", "load_vocab", "(", "args", ")", "\n", "", "else", ":", "\n", "        ", "vocab", "=", "build_vocab", "(", "train_data", ",", "args", ")", "\n", "\n", "# Transform original data to Imagedata form.", "\n", "", "train_metadata", "=", "process_metadata", "(", "'train'", ",", "train_data", ",", "args", ")", "\n", "val_metadata", "=", "process_metadata", "(", "'val'", ",", "val_data", ",", "args", ")", "\n", "test_metadata", "=", "process_metadata", "(", "'test'", ",", "test_data", ",", "args", ")", "\n", "\n", "\n", "# Decode Imagedata to index caption and replace image file_root with image vecetor.", "\n", "train_decodedata", "=", "process_decodedata", "(", "train_metadata", ",", "vocab", ")", "\n", "val_decodedata", "=", "process_decodedata", "(", "val_metadata", ",", "vocab", ")", "\n", "test_decodedata", "=", "process_decodedata", "(", "test_metadata", ",", "vocab", ")", "\n", "\n", "\n", "process_dataset", "(", "'train'", ",", "train_decodedata", ",", "args", ")", "\n", "process_dataset", "(", "'val'", ",", "val_decodedata", ",", "args", ")", "\n", "process_dataset", "(", "'test'", ",", "test_decodedata", ",", "args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.parse_args": [[345, 359], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.datasets.preprocess.parse_args"], ["", "def", "parse_args", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Command for data preprocessing'", ")", "\n", "parser", ".", "add_argument", "(", "'--img_root'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--json_root'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--out_root'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--min_word_count'", ",", "type", "=", "int", ",", "default", "=", "0", ")", "\n", "parser", ".", "add_argument", "(", "'--default_image_size'", ",", "type", "=", "int", ",", "default", "=", "224", ")", "\n", "parser", ".", "add_argument", "(", "'--load_split'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--load_tokens'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--load_vocab'", ",", "action", "=", "'store_true'", ")", "\n", "parser", ".", "add_argument", "(", "'--remove_stopwords'", ",", "type", "=", "str", ",", "default", "=", "None", ")", "\n", "parser", ".", "add_argument", "(", "'--keep_symbol'", ",", "action", "=", "'store_true'", ")", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.models.bert.Bert.__init__": [[8, 15], ["torch.nn.Module.__init__", "pytorch_transformers.BertTokenizer.from_pretrained", "pytorch_transformers.BertConfig.from_pretrained", "pytorch_transformers.BertModel.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "Bert", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "tokenizer", "=", "BertTokenizer", ".", "from_pretrained", "(", "'../pretrained/bert-base-uncased/bert-base-uncased-vocab.txt'", ")", "\n", "modelConfig", "=", "BertConfig", ".", "from_pretrained", "(", "'../pretrained/bert-base-uncased/bert_config.json'", ")", "\n", "self", ".", "textExtractor", "=", "BertModel", ".", "from_pretrained", "(", "\n", "'../pretrained/bert-base-uncased/pytorch_model.bin'", ",", "config", "=", "modelConfig", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.models.bert.Bert.pre_process": [[16, 44], ["range", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "bert.Bert.tokenizer.tokenize", "bert.Bert.tokenizer.convert_tokens_to_ids", "torch.tensor.append", "torch.tensor.append", "torch.tensor.append", "len", "torch.tensor.append", "len", "len", "len", "len", "len"], "methods", ["None"], ["", "def", "pre_process", "(", "self", ",", "texts", ")", ":", "\n", "\n", "        ", "tokens", ",", "segments", ",", "input_masks", ",", "text_length", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "text", "in", "texts", ":", "\n", "            ", "text", "=", "'[CLS] '", "+", "text", "+", "' [SEP]'", "\n", "tokenized_text", "=", "self", ".", "tokenizer", ".", "tokenize", "(", "text", ")", "\n", "indexed_tokens", "=", "self", ".", "tokenizer", ".", "convert_tokens_to_ids", "(", "tokenized_text", ")", "\n", "if", "len", "(", "indexed_tokens", ")", ">", "100", ":", "\n", "                ", "indexed_tokens", "=", "indexed_tokens", "[", ":", "100", "]", "\n", "\n", "", "tokens", ".", "append", "(", "indexed_tokens", ")", "\n", "segments", ".", "append", "(", "[", "0", "]", "*", "len", "(", "indexed_tokens", ")", ")", "\n", "input_masks", ".", "append", "(", "[", "1", "]", "*", "len", "(", "indexed_tokens", ")", ")", "\n", "\n", "\n", "", "for", "j", "in", "range", "(", "len", "(", "tokens", ")", ")", ":", "\n", "            ", "padding", "=", "[", "0", "]", "*", "(", "100", "-", "len", "(", "tokens", "[", "j", "]", ")", ")", "\n", "text_length", ".", "append", "(", "len", "(", "tokens", "[", "j", "]", ")", "+", "3", ")", "\n", "tokens", "[", "j", "]", "+=", "padding", "\n", "segments", "[", "j", "]", "+=", "padding", "\n", "input_masks", "[", "j", "]", "+=", "padding", "\n", "\n", "", "tokens", "=", "torch", ".", "tensor", "(", "tokens", ")", "\n", "segments", "=", "torch", ".", "tensor", "(", "segments", ")", "\n", "input_masks", "=", "torch", ".", "tensor", "(", "input_masks", ")", "\n", "text_length", "=", "torch", ".", "tensor", "(", "text_length", ")", "\n", "\n", "return", "tokens", ",", "segments", ",", "input_masks", ",", "text_length", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.models.bert.Bert.forward": [[46, 53], ["bert.Bert.textExtractor"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "tokens", ",", "segments", ",", "input_masks", ")", ":", "\n", "\n", "        ", "output", "=", "self", ".", "textExtractor", "(", "tokens", ",", "token_type_ids", "=", "segments", ",", "\n", "attention_mask", "=", "input_masks", ")", "\n", "text_embeddings", "=", "output", "[", "0", "]", "\n", "\n", "return", "text_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.models.model.Model.__init__": [[24, 68], ["torch.Module.__init__", "sfenet.SfeNet", "bert.Bert", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm1d", "torch.BatchNorm1d", "model.Model.bottleneck_image.bias.requires_grad_", "model.Model.bottleneck_image.apply", "torch.BatchNorm1d", "torch.BatchNorm1d", "model.Model.bottleneck_text.bias.requires_grad_", "model.Model.bottleneck_text.apply", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.Linear", "torch.Linear", "torch.LayerNorm", "torch.LayerNorm", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "range", "range", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "super", "(", "Model", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "part2", "=", "args", ".", "part2", "\n", "self", ".", "part3", "=", "args", ".", "part3", "\n", "\n", "self", ".", "image_model", "=", "SfeNet", "(", ")", "\n", "self", ".", "language_model", "=", "Bert", "(", ")", "\n", "\n", "inp_size", "=", "2048", "\n", "\n", "# shorten the tensor using 1*1 conv", "\n", "self", ".", "conv_images", "=", "nn", ".", "Conv2d", "(", "inp_size", ",", "args", ".", "feature_size", ",", "1", ")", "\n", "self", ".", "conv_text", "=", "nn", ".", "Conv2d", "(", "768", ",", "args", ".", "feature_size", ",", "1", ")", "\n", "\n", "# BN layer before embedding projection", "\n", "self", ".", "bottleneck_image", "=", "nn", ".", "BatchNorm1d", "(", "args", ".", "feature_size", ")", "\n", "self", ".", "bottleneck_image", ".", "bias", ".", "requires_grad_", "(", "False", ")", "\n", "self", ".", "bottleneck_image", ".", "apply", "(", "weights_init_kaiming", ")", "\n", "\n", "self", ".", "bottleneck_text", "=", "nn", ".", "BatchNorm1d", "(", "args", ".", "feature_size", ")", "\n", "self", ".", "bottleneck_text", ".", "bias", ".", "requires_grad_", "(", "False", ")", "\n", "self", ".", "bottleneck_text", ".", "apply", "(", "weights_init_kaiming", ")", "\n", "\n", "self", ".", "local_fc_text_key", "=", "nn", ".", "Linear", "(", "768", ",", "args", ".", "feature_size", ")", "\n", "self", ".", "local_bottleneck_text_key", "=", "nn", ".", "LayerNorm", "(", "[", "98", "+", "2", "+", "1", ",", "args", ".", "feature_size", "]", ")", "\n", "\n", "self", ".", "local_fc_text_value", "=", "nn", ".", "Linear", "(", "768", ",", "args", ".", "feature_size", ")", "\n", "self", ".", "local_bottleneck_text_value", "=", "nn", ".", "LayerNorm", "(", "[", "98", "+", "2", "+", "1", ",", "args", ".", "feature_size", "]", ")", "\n", "\n", "self", ".", "global_image_query", "=", "nn", ".", "Linear", "(", "args", ".", "feature_size", ",", "args", ".", "feature_size", ")", "\n", "self", ".", "global_image_value", "=", "nn", ".", "Linear", "(", "args", ".", "feature_size", ",", "args", ".", "feature_size", ")", "\n", "\n", "\n", "self", ".", "fc_p2_list", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "inp_size", ",", "args", ".", "feature_size", ")", "for", "i", "in", "range", "(", "self", ".", "part2", ")", "]", ")", "\n", "self", ".", "fc_p3_list", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "inp_size", ",", "args", ".", "feature_size", ")", "for", "i", "in", "range", "(", "self", ".", "part3", ")", "]", ")", "\n", "\n", "self", ".", "fc_p2_list_query", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "args", ".", "feature_size", ",", "args", ".", "feature_size", ")", "for", "i", "in", "range", "(", "self", ".", "part2", ")", "]", ")", "\n", "self", ".", "fc_p2_list_value", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "args", ".", "feature_size", ",", "args", ".", "feature_size", ")", "for", "i", "in", "range", "(", "self", ".", "part2", ")", "]", ")", "\n", "\n", "self", ".", "fc_p3_list_query", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "args", ".", "feature_size", ",", "args", ".", "feature_size", ")", "for", "i", "in", "range", "(", "self", ".", "part3", ")", "]", ")", "\n", "self", ".", "fc_p3_list_value", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "args", ".", "feature_size", ",", "args", ".", "feature_size", ")", "for", "i", "in", "range", "(", "self", ".", "part3", ")", "]", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.models.model.Model.forward": [[70, 117], ["model.Model.language_model", "torch.cat.view", "torch.cat.view", "model.Model.image_model", "model.Model.language_model", "model.Model.build_joint_embeddings", "model.Model.bottleneck_image", "model.Model.bottleneck_text", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "model.Model.local_fc_text_key", "model.Model.local_bottleneck_text_key", "model.Model.local_fc_text_value", "model.Model.local_bottleneck_text_value", "range", "range", "model.Model.global_image_query", "model.Model.global_image_value", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "range", "range", "range", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat.size", "torch.cat.size", "len", "len", "len", "len", "len", "len", "model.Model.unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "model.Model.unsqueeze", "model.Model.unsqueeze"], "methods", ["home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.models.model.Model.build_joint_embeddings"], ["", "def", "forward", "(", "self", ",", "images", ",", "tokens", ",", "segments", ",", "input_masks", ",", "sep_tokens", ",", "sep_segments", ",", "sep_input_masks", ",", "n_sep", ",", "p2", "=", "None", ",", "p3", "=", "None", ",", "object", "=", "None", ",", "attribute", "=", "None", ",", "stage", "=", "''", ")", ":", "\n", "\n", "        ", "text_features", "=", "self", ".", "language_model", "(", "sep_tokens", ",", "sep_segments", ",", "sep_input_masks", ")", "\n", "\n", "local_text_feat", "=", "text_features", "[", ":", ",", "0", ",", ":", "]", "\n", "local_text_feat", "=", "local_text_feat", ".", "view", "(", "-", "1", ",", "n_sep", ",", "local_text_feat", ".", "size", "(", "1", ")", ")", "\n", "\n", "b1", ",", "part_feature_list_b2", ",", "part_feature_list_b3", "=", "self", ".", "image_model", "(", "images", ",", "p2", ",", "p3", ")", "\n", "text_features", "=", "self", ".", "language_model", "(", "tokens", ",", "segments", ",", "input_masks", ")", "\n", "\n", "global_img_feat", ",", "global_text_feat", "=", "self", ".", "build_joint_embeddings", "(", "b1", ",", "text_features", "[", ":", ",", "0", "]", ")", "\n", "global_img_feat", "=", "self", ".", "bottleneck_image", "(", "global_img_feat", ")", "\n", "global_text_feat", "=", "self", ".", "bottleneck_text", "(", "global_text_feat", ")", "\n", "\n", "local_text_feat", "=", "torch", ".", "cat", "(", "(", "global_text_feat", ".", "unsqueeze", "(", "1", ")", ",", "local_text_feat", ",", "text_features", "[", ":", ",", "1", ":", "99", "]", ")", ",", "dim", "=", "1", ")", "\n", "local_text_key", "=", "self", ".", "local_fc_text_key", "(", "local_text_feat", ")", "\n", "local_text_key", "=", "self", ".", "local_bottleneck_text_key", "(", "local_text_key", ")", "\n", "\n", "local_text_value", "=", "self", ".", "local_fc_text_value", "(", "local_text_feat", ")", "\n", "local_text_value", "=", "self", ".", "local_bottleneck_text_value", "(", "local_text_value", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "part_feature_list_b2", ")", ")", ":", "\n", "            ", "part_feature_list_b2", "[", "i", "]", "=", "self", ".", "fc_p2_list", "[", "i", "]", "(", "part_feature_list_b2", "[", "i", "]", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "part_feature_list_b3", ")", ")", ":", "\n", "            ", "part_feature_list_b3", "[", "i", "]", "=", "self", ".", "fc_p3_list", "[", "i", "]", "(", "part_feature_list_b3", "[", "i", "]", ")", "\n", "\n", "\n", "", "global_img_query", "=", "self", ".", "global_image_query", "(", "global_img_feat", ")", "\n", "global_img_value", "=", "self", ".", "global_image_value", "(", "global_img_feat", ")", "\n", "\n", "local_img_query", "=", "torch", ".", "zeros", "(", "global_img_feat", ".", "shape", "[", "0", "]", ",", "self", ".", "part2", "+", "self", ".", "part3", ",", "global_img_feat", ".", "shape", "[", "1", "]", ")", ".", "cuda", "(", ")", "\n", "local_img_value", "=", "torch", ".", "zeros", "(", "global_img_feat", ".", "shape", "[", "0", "]", ",", "self", ".", "part2", "+", "self", ".", "part3", ",", "global_img_feat", ".", "shape", "[", "1", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "part_feature_list_b2", ")", ")", ":", "\n", "            ", "local_img_query", "[", ":", ",", "i", ",", ":", "]", "=", "self", ".", "fc_p2_list_query", "[", "i", "]", "(", "part_feature_list_b2", "[", "i", "]", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "part_feature_list_b3", ")", ")", ":", "\n", "            ", "local_img_query", "[", ":", ",", "i", "+", "self", ".", "part2", ",", ":", "]", "=", "self", ".", "fc_p3_list_query", "[", "i", "]", "(", "part_feature_list_b3", "[", "i", "]", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "part_feature_list_b2", ")", ")", ":", "\n", "            ", "local_img_value", "[", ":", ",", "i", ",", ":", "]", "=", "self", ".", "fc_p2_list_value", "[", "i", "]", "(", "part_feature_list_b2", "[", "i", "]", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "part_feature_list_b3", ")", ")", ":", "\n", "            ", "local_img_value", "[", ":", ",", "i", "+", "self", ".", "part2", ",", ":", "]", "=", "self", ".", "fc_p3_list_value", "[", "i", "]", "(", "part_feature_list_b3", "[", "i", "]", ")", "\n", "\n", "", "local_img_query", "=", "torch", ".", "cat", "(", "(", "global_img_query", ".", "unsqueeze", "(", "1", ")", ",", "local_img_query", ")", ",", "dim", "=", "1", ")", "\n", "local_img_value", "=", "torch", ".", "cat", "(", "(", "global_img_value", ".", "unsqueeze", "(", "1", ")", ",", "local_img_value", ")", ",", "dim", "=", "1", ")", "\n", "\n", "return", "global_img_feat", ",", "global_text_feat", ",", "local_img_query", ",", "local_img_value", ",", "local_text_key", ",", "local_text_value", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.models.model.Model.build_joint_embeddings": [[119, 128], ["text_features.unsqueeze.unsqueeze.unsqueeze", "text_features.unsqueeze.unsqueeze.unsqueeze", "model.Model.conv_images().squeeze", "model.Model.conv_text().squeeze", "model.Model.conv_images", "model.Model.conv_text"], "methods", ["None"], ["", "def", "build_joint_embeddings", "(", "self", ",", "images_features", ",", "text_features", ")", ":", "\n", "\n", "        ", "text_features", "=", "text_features", ".", "unsqueeze", "(", "2", ")", "\n", "text_features", "=", "text_features", ".", "unsqueeze", "(", "3", ")", "\n", "\n", "image_embeddings", "=", "self", ".", "conv_images", "(", "images_features", ")", ".", "squeeze", "(", ")", "\n", "text_embeddings", "=", "self", ".", "conv_text", "(", "text_features", ")", ".", "squeeze", "(", ")", "\n", "\n", "return", "image_embeddings", ",", "text_embeddings", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.models.model.weights_init_kaiming": [[9, 22], ["classname.find", "torch.init.kaiming_normal_", "torch.init.constant_", "classname.find", "torch.init.kaiming_normal_", "torch.init.constant_", "classname.find", "torch.init.constant_", "torch.init.constant_"], "function", ["None"], ["def", "weights_init_kaiming", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "a", "=", "0", ",", "mode", "=", "'fan_out'", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.0", ")", "\n", "", "elif", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", ":", "\n", "        ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.0", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm'", ")", "!=", "-", "1", ":", "\n", "        ", "if", "m", ".", "affine", ":", "\n", "            ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1.0", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0.0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.models.sfenet.Bottleneck.__init__": [[34, 45], ["torch.Module.__init__", "sfenet.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "sfenet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "sfenet.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.models.sfenet.conv1x1", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.models.sfenet.conv3x3", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.models.sfenet.conv1x1"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "planes", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "planes", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.models.sfenet.Bottleneck.forward": [[46, 67], ["sfenet.Bottleneck.conv1", "sfenet.Bottleneck.bn1", "sfenet.Bottleneck.relu", "sfenet.Bottleneck.conv2", "sfenet.Bottleneck.bn2", "sfenet.Bottleneck.relu", "sfenet.Bottleneck.conv3", "sfenet.Bottleneck.bn3", "sfenet.Bottleneck.relu", "sfenet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.models.sfenet.SfeNet.__init__": [[71, 98], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "sfenet.SfeNet._make_layer", "sfenet.SfeNet._make_layer", "sfenet.SfeNet._make_layer", "sfenet.SfeNet._make_layer", "sfenet.SfeNet._make_layer", "sfenet.SfeNet._make_layer", "sfenet.SfeNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "sfenet.SfeNet.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.solver.lr_scheduler.WarmupMultiStepLR.__init__", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.models.sfenet.SfeNet._make_layer", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.models.sfenet.SfeNet._make_layer", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.models.sfenet.SfeNet._make_layer", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.models.sfenet.SfeNet._make_layer", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.models.sfenet.SfeNet._make_layer", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.models.sfenet.SfeNet._make_layer", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.models.sfenet.SfeNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", "=", "Bottleneck", ",", "layers", "=", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", ":", "\n", "        ", "super", "(", "SfeNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ")", "\n", "\n", "self", ".", "inplanes", "=", "512", "\n", "self", ".", "branch2_layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "branch2_layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ")", "\n", "\n", "self", ".", "inplanes", "=", "1024", "\n", "self", ".", "branch3_layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "'fan_out'", ",", "nonlinearity", "=", "'relu'", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.models.sfenet.SfeNet._make_layer": [[99, 114], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "sfenet.conv1x1", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.models.sfenet.conv1x1"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.models.sfenet.SfeNet.forward": [[115, 152], ["sfenet.SfeNet.conv1", "sfenet.SfeNet.bn1", "sfenet.SfeNet.relu", "sfenet.SfeNet.maxpool", "sfenet.SfeNet.layer1", "sfenet.SfeNet.layer2", "sfenet.SfeNet.layer3", "sfenet.SfeNet.layer4", "sfenet.SfeNet.avgpool", "sfenet.SfeNet.height_shuffle", "sfenet.SfeNet.branch2_layer3", "sfenet.SfeNet.branch2_layer4", "sfenet.SfeNet.recover_shuffle", "sfenet.SfeNet.get_index_pair_list", "sfenet.SfeNet.height_shuffle", "sfenet.SfeNet.branch3_layer4", "sfenet.SfeNet.recover_shuffle", "sfenet.SfeNet.get_index_pair_list", "sfenet.SfeNet.avgpool().squeeze", "sfenet.SfeNet.avgpool().squeeze", "sfenet.SfeNet.avgpool", "sfenet.SfeNet.avgpool"], "methods", ["home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.models.sfenet.SfeNet.height_shuffle", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.models.sfenet.SfeNet.recover_shuffle", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.models.sfenet.SfeNet.get_index_pair_list", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.models.sfenet.SfeNet.height_shuffle", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.models.sfenet.SfeNet.recover_shuffle", "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.models.sfenet.SfeNet.get_index_pair_list"], ["", "def", "forward", "(", "self", ",", "x", ",", "p2", ",", "p3", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "\n", "\n", "# branch 1", "\n", "b13", "=", "self", ".", "layer3", "(", "x", ")", "\n", "b1", "=", "self", ".", "layer4", "(", "b13", ")", "\n", "b1", "=", "self", ".", "avgpool", "(", "b1", ")", "\n", "\n", "# branch 2", "\n", "b2", "=", "self", ".", "height_shuffle", "(", "x", ",", "p2", ")", "\n", "b2", "=", "self", ".", "branch2_layer3", "(", "b2", ")", "\n", "b2", "=", "self", ".", "branch2_layer4", "(", "b2", ")", "\n", "b2", "=", "self", ".", "recover_shuffle", "(", "b2", ",", "p2", ")", "\n", "\n", "index_pair_list_b2", "=", "self", ".", "get_index_pair_list", "(", "b2", ",", "p2", ")", "\n", "part_feature_list_b2", "=", "[", "self", ".", "avgpool", "(", "b2", "[", ":", ",", ":", ",", "pair", "[", "0", "]", ":", "pair", "[", "1", "]", ",", ":", "]", ")", ".", "squeeze", "(", ")", "for", "pair", "in", "index_pair_list_b2", "]", "\n", "\n", "# branch 3", "\n", "b3", "=", "self", ".", "height_shuffle", "(", "b13", ",", "p3", ")", "\n", "b3", "=", "self", ".", "branch3_layer4", "(", "b3", ")", "\n", "b3", "=", "self", ".", "recover_shuffle", "(", "b3", ",", "p3", ")", "\n", "\n", "index_pair_list_b3", "=", "self", ".", "get_index_pair_list", "(", "b3", ",", "p3", ")", "\n", "part_feature_list_b3", "=", "[", "self", ".", "avgpool", "(", "b3", "[", ":", ",", ":", ",", "pair", "[", "0", "]", ":", "pair", "[", "1", "]", ",", ":", "]", ")", ".", "squeeze", "(", ")", "for", "pair", "in", "index_pair_list_b3", "]", "\n", "\n", "# #x = x.view(x.size(0), -1)", "\n", "# #x = self.fc(x)", "\n", "#", "\n", "# return x, feature_map_v", "\n", "\n", "return", "b1", ",", "part_feature_list_b2", ",", "part_feature_list_b3", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.models.sfenet.SfeNet.get_index_pair_list": [[154, 161], ["x.data.size", "len", "index_pair_list.append", "range"], "methods", ["None"], ["", "def", "get_index_pair_list", "(", "self", ",", "x", ",", "permu", ")", ":", "\n", "        ", "batchsize", ",", "num_channels", ",", "height", ",", "width", "=", "x", ".", "data", ".", "size", "(", ")", "\n", "number_slice", "=", "len", "(", "permu", ")", "\n", "height_per_slice", "=", "height", "//", "number_slice", "\n", "index_pair_list", "=", "[", "(", "height_per_slice", "*", "i", ",", "height_per_slice", "*", "(", "i", "+", "1", ")", ")", "for", "i", "in", "range", "(", "number_slice", "-", "1", ")", "]", "\n", "index_pair_list", ".", "append", "(", "(", "height_per_slice", "*", "(", "number_slice", "-", "1", ")", ",", "height", ")", ")", "\n", "return", "index_pair_list", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.models.sfenet.SfeNet.height_shuffle": [[163, 181], ["x.data.size", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "len", "index_pair_list.append", "range", "range", "index_pair_list_shuffled.append", "len", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "range"], "methods", ["None"], ["", "def", "height_shuffle", "(", "self", ",", "x", ",", "permu", ")", ":", "\n", "        ", "batchsize", ",", "num_channels", ",", "height", ",", "width", "=", "x", ".", "data", ".", "size", "(", ")", "\n", "result", "=", "torch", ".", "zeros", "(", "batchsize", ",", "num_channels", ",", "height", ",", "width", ")", ".", "cuda", "(", ")", "\n", "number_slice", "=", "len", "(", "permu", ")", "\n", "height_per_slice", "=", "height", "//", "number_slice", "\n", "index_pair_list", "=", "[", "(", "height_per_slice", "*", "i", ",", "height_per_slice", "*", "(", "i", "+", "1", ")", ")", "for", "i", "in", "range", "(", "number_slice", "-", "1", ")", "]", "\n", "index_pair_list", ".", "append", "(", "(", "height_per_slice", "*", "(", "number_slice", "-", "1", ")", ",", "height", ")", ")", "\n", "index_pair_list_shuffled", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "number_slice", ")", ":", "\n", "            ", "index_pair_list_shuffled", ".", "append", "(", "index_pair_list", "[", "permu", "[", "i", "]", "]", ")", "\n", "\n", "", "start", "=", "0", "\n", "for", "i", "in", "range", "(", "len", "(", "index_pair_list_shuffled", ")", ")", ":", "\n", "            ", "index_pair", "=", "index_pair_list_shuffled", "[", "i", "]", "\n", "length", "=", "index_pair", "[", "1", "]", "-", "index_pair", "[", "0", "]", "\n", "result", "[", ":", ",", ":", ",", "start", ":", "(", "start", "+", "length", ")", ",", ":", "]", "=", "x", "[", ":", ",", ":", ",", "index_pair", "[", "0", "]", ":", "index_pair", "[", "1", "]", ",", ":", "]", "\n", "start", "=", "start", "+", "length", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.models.sfenet.SfeNet.recover_shuffle": [[182, 193], ["range", "list", "list.sort", "range", "sfenet.SfeNet.height_shuffle", "len", "dic.keys", "len", "recover_permu.append"], "methods", ["home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.models.sfenet.SfeNet.height_shuffle"], ["", "def", "recover_shuffle", "(", "self", ",", "x", ",", "permu", ")", ":", "\n", "        ", "dic", "=", "{", "}", "\n", "recover_permu", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "permu", ")", ")", ":", "\n", "            ", "dic", "[", "permu", "[", "i", "]", "]", "=", "i", "\n", "", "all_key", "=", "list", "(", "dic", ".", "keys", "(", ")", ")", "\n", "all_key", ".", "sort", "(", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "all_key", ")", ")", ":", "\n", "            ", "recover_permu", ".", "append", "(", "dic", "[", "all_key", "[", "i", "]", "]", ")", "\n", "\n", "", "return", "self", ".", "height_shuffle", "(", "x", ",", "recover_permu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.models.sfenet.conv3x3": [[19, 23], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.models.sfenet.conv1x1": [[25, 28], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.solver.transforms.RandomErasing.__init__": [[17, 23], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "probability", "=", "0.5", ",", "sl", "=", "0.02", ",", "sh", "=", "0.4", ",", "r1", "=", "0.3", ",", "mean", "=", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ")", ":", "\n", "        ", "self", ".", "probability", "=", "probability", "\n", "self", ".", "mean", "=", "mean", "\n", "self", ".", "sl", "=", "sl", "\n", "self", ".", "sh", "=", "sh", "\n", "self", ".", "r1", "=", "r1", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.solver.transforms.RandomErasing.__call__": [[24, 50], ["range", "random.uniform", "random.uniform", "int", "int", "random.uniform", "round", "round", "random.randint", "random.randint", "img.size", "img.size", "math.sqrt", "math.sqrt", "img.size", "img.size", "img.size", "img.size", "img.size"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "\n", "        ", "if", "random", ".", "uniform", "(", "0", ",", "1", ")", ">=", "self", ".", "probability", ":", "\n", "            ", "return", "img", "\n", "\n", "", "for", "attempt", "in", "range", "(", "100", ")", ":", "\n", "            ", "area", "=", "img", ".", "size", "(", ")", "[", "1", "]", "*", "img", ".", "size", "(", ")", "[", "2", "]", "\n", "\n", "target_area", "=", "random", ".", "uniform", "(", "self", ".", "sl", ",", "self", ".", "sh", ")", "*", "area", "\n", "aspect_ratio", "=", "random", ".", "uniform", "(", "self", ".", "r1", ",", "1", "/", "self", ".", "r1", ")", "\n", "\n", "h", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "*", "aspect_ratio", ")", ")", ")", "\n", "w", "=", "int", "(", "round", "(", "math", ".", "sqrt", "(", "target_area", "/", "aspect_ratio", ")", ")", ")", "\n", "\n", "if", "w", "<", "img", ".", "size", "(", ")", "[", "2", "]", "and", "h", "<", "img", ".", "size", "(", ")", "[", "1", "]", ":", "\n", "                ", "x1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "(", ")", "[", "1", "]", "-", "h", ")", "\n", "y1", "=", "random", ".", "randint", "(", "0", ",", "img", ".", "size", "(", ")", "[", "2", "]", "-", "w", ")", "\n", "if", "img", ".", "size", "(", ")", "[", "0", "]", "==", "3", ":", "\n", "                    ", "img", "[", "0", ",", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", "]", "=", "self", ".", "mean", "[", "0", "]", "\n", "img", "[", "1", ",", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", "]", "=", "self", ".", "mean", "[", "1", "]", "\n", "img", "[", "2", ",", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", "]", "=", "self", ".", "mean", "[", "2", "]", "\n", "", "else", ":", "\n", "                    ", "img", "[", "0", ",", "x1", ":", "x1", "+", "h", ",", "y1", ":", "y1", "+", "w", "]", "=", "self", ".", "mean", "[", "0", "]", "\n", "", "return", "img", "\n", "\n", "", "", "return", "img", "\n", "", "", ""]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.solver.lr_scheduler.WarmupMultiStepLR.__init__": [[5, 32], ["super().__init__", "ValueError", "ValueError", "list", "sorted"], "methods", ["home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.solver.lr_scheduler.WarmupMultiStepLR.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "optimizer", ",", "\n", "milestones", ",", "\n", "gamma", "=", "0.1", ",", "\n", "warmup_factor", "=", "1.0", "/", "3", ",", "\n", "warmup_iters", "=", "500", ",", "\n", "warmup_method", "=", "\"linear\"", ",", "\n", "last_epoch", "=", "-", "1", ",", "\n", ")", ":", "\n", "        ", "if", "not", "list", "(", "milestones", ")", "==", "sorted", "(", "milestones", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Milestones should be a list of\"", "\" increasing integers. Got {}\"", ",", "\n", "milestones", ",", "\n", ")", "\n", "\n", "", "if", "warmup_method", "not", "in", "(", "\"constant\"", ",", "\"linear\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Only 'constant' or 'linear' warmup_method accepted\"", "\n", "\"got {}\"", ".", "format", "(", "warmup_method", ")", "\n", ")", "\n", "", "self", ".", "milestones", "=", "milestones", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "warmup_factor", "=", "warmup_factor", "\n", "self", ".", "warmup_iters", "=", "warmup_iters", "\n", "self", ".", "warmup_method", "=", "warmup_method", "\n", "super", "(", "WarmupMultiStepLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TencentYoutuResearch_PersonReID-NAFS.solver.lr_scheduler.WarmupMultiStepLR.get_lr": [[33, 46], ["bisect.bisect_right"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "warmup_factor", "=", "1", "\n", "if", "self", ".", "last_epoch", "<", "self", ".", "warmup_iters", ":", "\n", "            ", "if", "self", ".", "warmup_method", "==", "\"constant\"", ":", "\n", "                ", "warmup_factor", "=", "self", ".", "warmup_factor", "\n", "", "elif", "self", ".", "warmup_method", "==", "\"linear\"", ":", "\n", "                ", "alpha", "=", "self", ".", "last_epoch", "/", "self", ".", "warmup_iters", "\n", "warmup_factor", "=", "self", ".", "warmup_factor", "*", "(", "1", "-", "alpha", ")", "+", "alpha", "\n", "", "", "return", "[", "\n", "base_lr", "\n", "*", "warmup_factor", "\n", "*", "self", ".", "gamma", "**", "bisect_right", "(", "self", ".", "milestones", ",", "self", ".", "last_epoch", ")", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "\n", "]", "\n"]]}