{"home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.dataset_mc.ColorAugmentation.__init__": [[12, 23], ["torch.Tensor", "torch.Tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "eig_vec", "=", "None", ",", "eig_val", "=", "None", ")", ":", "\n", "        ", "if", "eig_vec", "==", "None", ":", "\n", "            ", "eig_vec", "=", "torch", ".", "Tensor", "(", "[", "\n", "[", "0.4009", ",", "0.7192", ",", "-", "0.5675", "]", ",", "\n", "[", "-", "0.8140", ",", "-", "0.0045", ",", "-", "0.5808", "]", ",", "\n", "[", "0.4203", ",", "-", "0.6948", ",", "-", "0.5836", "]", ",", "\n", "]", ")", "\n", "", "if", "eig_val", "==", "None", ":", "\n", "            ", "eig_val", "=", "torch", ".", "Tensor", "(", "[", "[", "0.2175", ",", "0.0188", ",", "0.0045", "]", "]", ")", "\n", "", "self", ".", "eig_val", "=", "eig_val", "# 1*3", "\n", "self", ".", "eig_vec", "=", "eig_vec", "# 3*3", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.dataset_mc.ColorAugmentation.__call__": [[24, 30], ["torch.mm", "tensor.size", "torch.normal", "torch.mm.view", "torch.zeros_like"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "assert", "tensor", ".", "size", "(", "0", ")", "==", "3", "\n", "alpha", "=", "torch", ".", "normal", "(", "means", "=", "torch", ".", "zeros_like", "(", "self", ".", "eig_val", ")", ")", "*", "0.1", "\n", "quatity", "=", "torch", ".", "mm", "(", "self", ".", "eig_val", "*", "alpha", ",", "self", ".", "eig_vec", ")", "\n", "tensor", "=", "tensor", "+", "quatity", ".", "view", "(", "3", ",", "1", ",", "1", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.dataset_mc.McImageFlowDataset.__init__": [[49, 90], ["torchvision.Compose", "print", "print", "config.get", "config.get", "config.get", "config.get", "len", "config[].get", "config[].get", "config[].get", "config[].get", "torchvision.Normalize", "open", "f.readlines", "line.rstrip().split", "dataset_mc.McImageFlowDataset.metas.append", "line.rstrip().split", "dataset_mc.McImageFlowDataset.metas.append", "Exception", "line.rstrip", "line.rstrip"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "meta_file", ",", "config", ",", "phase", ")", ":", "\n", "        ", "self", ".", "img_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Normalize", "(", "config", "[", "'data_mean'", "]", ",", "config", "[", "'data_div'", "]", ")", "\n", "]", ")", "\n", "print", "(", "\"building dataset from {}\"", ".", "format", "(", "meta_file", ")", ")", "\n", "self", ".", "flow_file_type", "=", "config", "[", "'flow_file_type'", "]", "\n", "self", ".", "metas", "=", "[", "]", "\n", "self", ".", "num", "=", "0", "\n", "for", "mf", "in", "meta_file", ":", "\n", "            ", "with", "open", "(", "mf", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "self", ".", "num", "+=", "len", "(", "lines", ")", "\n", "for", "line", "in", "lines", ":", "\n", "                ", "if", "self", ".", "flow_file_type", "==", "\"flo\"", ":", "\n", "                    ", "img0_path", ",", "img1_path", ",", "flow_path", "=", "line", ".", "rstrip", "(", ")", ".", "split", "(", ")", "\n", "self", ".", "metas", ".", "append", "(", "(", "img0_path", ",", "img1_path", ",", "flow_path", ")", ")", "\n", "", "elif", "self", ".", "flow_file_type", "==", "\"jpg\"", ":", "\n", "                    ", "img0_path", ",", "img1_path", ",", "flow_path_x", ",", "flow_path_y", "=", "line", ".", "rstrip", "(", ")", ".", "split", "(", ")", "\n", "self", ".", "metas", ".", "append", "(", "(", "img0_path", ",", "img1_path", ",", "flow_path_x", ",", "flow_path_y", ")", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "Exception", "(", "\"No such flow_file_type: {}\"", ".", "format", "(", "self", ".", "flow_file_type", ")", ")", "\n", "", "", "", "print", "(", "\"read meta done, total: {}\"", ".", "format", "(", "self", ".", "num", ")", ")", "\n", "\n", "\n", "self", ".", "initialized", "=", "False", "\n", "self", ".", "phase", "=", "phase", "\n", "self", ".", "memcached_client", "=", "config", ".", "get", "(", "'memcached_client'", ",", "None", ")", "\n", "\n", "self", ".", "short_size", "=", "config", ".", "get", "(", "'short_size'", ",", "None", ")", "\n", "self", ".", "long_size", "=", "config", ".", "get", "(", "'long_size'", ",", "None", ")", "\n", "self", ".", "crop_size", "=", "config", ".", "get", "(", "'crop_size'", ",", "None", ")", "\n", "self", ".", "sample_strategy", "=", "config", "[", "'sample_strategy'", "]", "\n", "self", ".", "sample_bg_ratio", "=", "config", "[", "'sample_bg_ratio'", "]", "\n", "self", ".", "nms_ks", "=", "config", "[", "'nms_ks'", "]", "\n", "self", ".", "max_num_guide", "=", "config", "[", "'max_num_guide'", "]", "\n", "\n", "if", "self", ".", "phase", "==", "\"train\"", ":", "\n", "            ", "self", ".", "aug_flip", "=", "config", "[", "'image_flow_aug'", "]", ".", "get", "(", "'flip'", ",", "False", ")", "\n", "self", ".", "aug_reverse", "=", "config", "[", "'flow_aug'", "]", ".", "get", "(", "'reverse'", ",", "False", ")", "\n", "self", ".", "aug_scale", "=", "config", "[", "'flow_aug'", "]", ".", "get", "(", "'scale'", ",", "False", ")", "\n", "self", ".", "aug_rotate", "=", "config", "[", "'flow_aug'", "]", ".", "get", "(", "'rotate'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.dataset_mc.McImageFlowDataset.__len__": [[91, 93], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.dataset_mc.McImageFlowDataset._init_memcached": [[94, 101], ["mc.MemcachedClient.GetInstance"], "methods", ["None"], ["", "def", "_init_memcached", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "initialized", ":", "\n", "            ", "assert", "self", ".", "memcached_client", "is", "not", "None", ",", "\"Please specify the path of your memcached_client\"", "\n", "server_list_config_file", "=", "\"{}/server_list.conf\"", ".", "format", "(", "self", ".", "memcached_client", ")", "\n", "client_config_file", "=", "\"{}/client.conf\"", ".", "format", "(", "self", ".", "memcached_client", ")", "\n", "self", ".", "mclient", "=", "mc", ".", "MemcachedClient", ".", "GetInstance", "(", "server_list_config_file", ",", "client_config_file", ")", "\n", "self", ".", "initialized", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.dataset_mc.McImageFlowDataset._read_one": [[102, 159], ["numpy.random.randint", "mc.pyvector", "dataset_mc.McImageFlowDataset.mclient.Get", "mc.ConvertBuffer", "dataset_mc.pil_loader", "mc.pyvector", "dataset_mc.McImageFlowDataset.mclient.Get", "mc.ConvertBuffer", "dataset_mc.pil_loader", "Exception", "mc.pyvector", "dataset_mc.McImageFlowDataset.mclient.Get", "mc.ConvertBuffer", "utils.flowlib.read_flo_file", "mc.pyvector", "dataset_mc.McImageFlowDataset.mclient.Get", "mc.ConvertBuffer", "dataset_mc.pil_loader", "mc.pyvector", "dataset_mc.McImageFlowDataset.mclient.Get", "mc.ConvertBuffer", "dataset_mc.pil_loader", "numpy.concatenate", "dataset_mc.McImageFlowDataset._read_one", "Exception", "Exception", "print", "print", "numpy.array().astype", "numpy.array().astype", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.dataset.pil_loader", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.dataset.pil_loader", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.flowlib.read_flo_file", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.dataset.pil_loader", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.dataset.pil_loader", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.dataset_mc.McImageDataset._read_one"], ["", "", "def", "_read_one", "(", "self", ",", "idx", "=", "None", ")", ":", "\n", "        ", "if", "idx", "is", "None", ":", "\n", "            ", "idx", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "num", ")", "\n", "", "img1_fn", "=", "self", ".", "metas", "[", "idx", "]", "[", "0", "]", "\n", "img2_fn", "=", "self", ".", "metas", "[", "idx", "]", "[", "1", "]", "\n", "if", "self", ".", "flow_file_type", "==", "'flo'", ":", "\n", "            ", "flowname", "=", "self", ".", "metas", "[", "idx", "]", "[", "2", "]", "\n", "", "else", ":", "\n", "            ", "flownamex", "=", "self", ".", "metas", "[", "idx", "]", "[", "2", "]", "\n", "flownamey", "=", "self", ".", "metas", "[", "idx", "]", "[", "3", "]", "\n", "\n", "", "try", ":", "\n", "            ", "img1_value", "=", "mc", ".", "pyvector", "(", ")", "\n", "self", ".", "mclient", ".", "Get", "(", "img1_fn", ",", "img1_value", ")", "\n", "img_value_str1", "=", "mc", ".", "ConvertBuffer", "(", "img1_value", ")", "\n", "img1", "=", "pil_loader", "(", "img_value_str1", ",", "ch", "=", "3", ")", "\n", "\n", "img2_value", "=", "mc", ".", "pyvector", "(", ")", "\n", "self", ".", "mclient", ".", "Get", "(", "img2_fn", ",", "img2_value", ")", "\n", "img_value_str2", "=", "mc", ".", "ConvertBuffer", "(", "img2_value", ")", "\n", "img2", "=", "pil_loader", "(", "img_value_str2", ",", "ch", "=", "3", ")", "\n", "\n", "if", "img1", "is", "None", "or", "img2", "is", "None", ":", "\n", "                ", "raise", "Exception", "(", "\"None image\"", ")", "\n", "\n", "", "if", "self", ".", "flow_file_type", "==", "\"flo\"", ":", "\n", "                ", "flo_value", "=", "mc", ".", "pyvector", "(", ")", "\n", "self", ".", "mclient", ".", "Get", "(", "flowname", ",", "flo_value", ")", "\n", "flo_value_str", "=", "mc", ".", "ConvertBuffer", "(", "flo_value", ")", "\n", "flow", "=", "read_flo_file", "(", "flo_value_str", ",", "memcached", "=", "True", ")", "# w, h, 2", "\n", "", "else", ":", "\n", "                ", "flox_value", "=", "mc", ".", "pyvector", "(", ")", "\n", "self", ".", "mclient", ".", "Get", "(", "flownamex", ",", "flox_value", ")", "\n", "flox_value_str", "=", "mc", ".", "ConvertBuffer", "(", "flox_value", ")", "\n", "flowx", "=", "pil_loader", "(", "flox_value_str", ",", "ch", "=", "1", ")", "\n", "if", "flowx", "is", "None", ":", "\n", "                    ", "raise", "Exception", "(", "\"None flowx\"", ")", "\n", "\n", "", "floy_value", "=", "mc", ".", "pyvector", "(", ")", "\n", "self", ".", "mclient", ".", "Get", "(", "flownamey", ",", "floy_value", ")", "\n", "floy_value_str", "=", "mc", ".", "ConvertBuffer", "(", "floy_value", ")", "\n", "flowy", "=", "pil_loader", "(", "floy_value_str", ",", "ch", "=", "1", ")", "\n", "if", "flowy", "is", "None", ":", "\n", "                    ", "raise", "Exception", "(", "\"None flowy\"", ")", "\n", "\n", "", "flowx", "=", "np", ".", "array", "(", "flowx", ")", ".", "astype", "(", "np", ".", "float32", ")", "/", "255", "*", "100", "-", "50", "\n", "flowy", "=", "np", ".", "array", "(", "flowy", ")", ".", "astype", "(", "np", ".", "float32", ")", "/", "255", "*", "100", "-", "50", "\n", "flow", "=", "np", ".", "concatenate", "(", "(", "flowx", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ",", "flowy", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ")", ",", "axis", "=", "2", ")", "\n", "\n", "", "", "except", ":", "\n", "            ", "if", "self", ".", "flow_file_type", "==", "\"flo\"", ":", "\n", "                ", "print", "(", "'Read image or flow [{}] failed ({}) ({})'", ".", "format", "(", "idx", ",", "img1_fn", ",", "flowname", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'Read image or flow [{}] failed ({}) ({}) ({})'", ".", "format", "(", "idx", ",", "img1_fn", ",", "flownamex", ",", "flownamey", ")", ")", "\n", "", "return", "self", ".", "_read_one", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "img1", ",", "img2", ",", "flow", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.dataset_mc.McImageFlowDataset.__getitem__": [[160, 198], ["dataset_mc.McImageFlowDataset._init_memcached", "dataset_mc.McImageFlowDataset._read_one", "torch.from_numpy", "torch.from_numpy", "dataset_mc.McImageFlowDataset.img_transform", "dataset_mc.McImageFlowDataset.img_transform", "utils.flow_sampler", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "utils.image_flow_resize", "utils.image_flow_crop", "utils.image_flow_aug", "utils.flow_aug", "numpy.array().astype().transpose", "numpy.array().astype().transpose", "utils.flow_aug.transpose", "torch.from_numpy.transpose", "torch.from_numpy.transpose().astype", "numpy.array().astype", "numpy.array().astype", "torch.from_numpy.transpose", "numpy.array", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.dataset_mc.McImageDataset._init_memcached", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.dataset_mc.McImageDataset._read_one", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.data_utils.flow_sampler", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.data_utils.image_flow_resize", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.data_utils.image_flow_crop", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.data_utils.image_flow_aug", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.data_utils.flow_aug"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "self", ".", "_init_memcached", "(", ")", "\n", "img1", ",", "img2", ",", "flow", "=", "self", ".", "_read_one", "(", "idx", ")", "\n", "\n", "## check size", "\n", "assert", "img1", ".", "height", "==", "flow", ".", "shape", "[", "0", "]", "\n", "assert", "img1", ".", "width", "==", "flow", ".", "shape", "[", "1", "]", "\n", "assert", "img2", ".", "height", "==", "flow", ".", "shape", "[", "0", "]", "\n", "assert", "img2", ".", "width", "==", "flow", ".", "shape", "[", "1", "]", "\n", "\n", "## resize", "\n", "if", "self", ".", "short_size", "is", "not", "None", "or", "self", ".", "long_size", "is", "not", "None", ":", "\n", "            ", "img1", ",", "img2", ",", "flow", ",", "ratio", "=", "image_flow_resize", "(", "img1", ",", "img2", ",", "flow", ",", "short_size", "=", "self", ".", "short_size", ",", "long_size", "=", "self", ".", "long_size", ")", "\n", "\n", "## crop", "\n", "", "if", "self", ".", "crop_size", "is", "not", "None", ":", "\n", "            ", "img1", ",", "img2", ",", "flow", ",", "offset", "=", "image_flow_crop", "(", "img1", ",", "img2", ",", "flow", ",", "self", ".", "crop_size", ",", "self", ".", "phase", ")", "\n", "\n", "## augmentation", "\n", "", "if", "self", ".", "phase", "==", "'train'", ":", "\n", "# image flow aug", "\n", "            ", "img1", ",", "img2", ",", "flow", "=", "image_flow_aug", "(", "img1", ",", "img2", ",", "flow", ",", "flip_horizon", "=", "self", ".", "aug_flip", ")", "\n", "# flow aug", "\n", "flow", "=", "flow_aug", "(", "flow", ",", "reverse", "=", "self", ".", "aug_reverse", ",", "scale", "=", "self", ".", "aug_scale", ",", "rotate", "=", "self", ".", "aug_rotate", ")", "\n", "\n", "## transform", "\n", "", "img1", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "img1", ")", ".", "astype", "(", "np", ".", "float32", ")", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ")", "\n", "img2", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "img2", ")", ".", "astype", "(", "np", ".", "float32", ")", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ")", "\n", "img1", "=", "self", ".", "img_transform", "(", "img1", ")", "\n", "img2", "=", "self", ".", "img_transform", "(", "img2", ")", "\n", "\n", "## sparse sampling", "\n", "sparse_flow", ",", "mask", "=", "flow_sampler", "(", "flow", ",", "strategy", "=", "self", ".", "sample_strategy", ",", "bg_ratio", "=", "self", ".", "sample_bg_ratio", ",", "nms_ks", "=", "self", ".", "nms_ks", ",", "max_num_guide", "=", "self", ".", "max_num_guide", ")", "# (h,w,2), (h,w,2)", "\n", "\n", "flow", "=", "torch", ".", "from_numpy", "(", "flow", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ")", "\n", "sparse_flow", "=", "torch", ".", "from_numpy", "(", "sparse_flow", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ")", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "return", "img1", ",", "sparse_flow", ",", "mask", ",", "flow", ",", "img2", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.dataset_mc.McImageDataset.__init__": [[200, 218], ["torchvision.Compose", "print", "len", "print", "config.get", "config.get", "config.get", "config.get", "open", "f.readlines", "l.rstrip", "torchvision.Normalize"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "meta_file", ",", "config", ")", ":", "\n", "        ", "self", ".", "img_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Normalize", "(", "config", "[", "'data_mean'", "]", ",", "config", "[", "'data_div'", "]", ")", "\n", "]", ")", "\n", "print", "(", "\"building dataset from {}\"", ".", "format", "(", "meta_file", ")", ")", "\n", "with", "open", "(", "meta_file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "self", ".", "num", "=", "len", "(", "lines", ")", "\n", "self", ".", "metas", "=", "[", "l", ".", "rstrip", "(", ")", "for", "l", "in", "lines", "]", "\n", "print", "(", "\"read meta done, total: {}\"", ".", "format", "(", "self", ".", "num", ")", ")", "\n", "\n", "\n", "self", ".", "initialized", "=", "False", "\n", "self", ".", "memcached", "=", "config", ".", "get", "(", "'memcached_client'", ",", "None", ")", "\n", "\n", "self", ".", "short_size", "=", "config", ".", "get", "(", "'short_size'", ",", "None", ")", "\n", "self", ".", "long_size", "=", "config", ".", "get", "(", "'long_size'", ",", "None", ")", "\n", "self", ".", "crop_size", "=", "config", ".", "get", "(", "'crop_size'", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.dataset_mc.McImageDataset.__len__": [[219, 221], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.dataset_mc.McImageDataset._init_memcached": [[222, 229], ["mc.MemcachedClient.GetInstance"], "methods", ["None"], ["", "def", "_init_memcached", "(", "self", ")", ":", "\n", "        ", "if", "not", "self", ".", "initialized", ":", "\n", "            ", "assert", "self", ".", "memcached_client", "is", "not", "None", ",", "\"Please specify the path of your memcached_client\"", "\n", "server_list_config_file", "=", "\"{}/server_list.conf\"", ".", "format", "(", "self", ".", "memcached_client", ")", "\n", "client_config_file", "=", "\"{}/client.conf\"", ".", "format", "(", "self", ".", "memcached_client", ")", "\n", "self", ".", "mclient", "=", "mc", ".", "MemcachedClient", ".", "GetInstance", "(", "server_list_config_file", ",", "client_config_file", ")", "\n", "self", ".", "initialized", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.dataset_mc.McImageDataset._read_one": [[230, 247], ["numpy.random.randint", "mc.pyvector", "dataset_mc.McImageDataset.mclient.Get", "mc.ConvertBuffer", "dataset_mc.pil_loader", "Exception", "print", "dataset_mc.McImageDataset._read_one"], "methods", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.dataset.pil_loader", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.dataset_mc.McImageDataset._read_one"], ["", "", "def", "_read_one", "(", "self", ",", "idx", "=", "None", ")", ":", "\n", "        ", "if", "idx", "is", "None", ":", "\n", "            ", "idx", "=", "np", ".", "random", ".", "randint", "(", "self", ".", "num", ")", "\n", "", "img_fn", "=", "self", ".", "metas", "[", "idx", "]", "\n", "try", ":", "\n", "            ", "img_value", "=", "mc", ".", "pyvector", "(", ")", "\n", "self", ".", "mclient", ".", "Get", "(", "img_fn", ",", "img_value", ")", "\n", "img_value_str", "=", "mc", ".", "ConvertBuffer", "(", "img_value", ")", "\n", "img", "=", "pil_loader", "(", "img_value_str", ",", "ch", "=", "3", ")", "\n", "\n", "if", "img", "is", "None", ":", "\n", "                ", "raise", "Exception", "(", "\"None image\"", ")", "\n", "", "", "except", ":", "\n", "            ", "print", "(", "'Read image [{}] failed ({})'", ".", "format", "(", "idx", ",", "img_fn", ")", ")", "\n", "return", "self", ".", "_read_one", "(", ")", "\n", "", "else", ":", "\n", "            ", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.dataset_mc.McImageDataset.__getitem__": [[248, 265], ["dataset_mc.McImageDataset._init_memcached", "dataset_mc.McImageDataset._read_one", "torch.from_numpy", "dataset_mc.McImageDataset.img_transform", "utils.image_resize", "utils.image_crop", "numpy.array().astype().transpose", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "numpy.array().astype", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.dataset_mc.McImageDataset._init_memcached", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.dataset_mc.McImageDataset._read_one", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.data_utils.image_resize", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.data_utils.image_crop"], ["", "", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "self", ".", "_init_memcached", "(", ")", "\n", "img", "=", "self", ".", "_read_one", "(", "idx", ")", "\n", "\n", "## resize", "\n", "if", "self", ".", "short_size", "is", "not", "None", "or", "self", ".", "long_size", "is", "not", "None", ":", "\n", "            ", "img", ",", "size", "=", "image_resize", "(", "img", ",", "short_size", "=", "self", ".", "short_size", ",", "long_size", "=", "self", ".", "long_size", ")", "\n", "\n", "## crop", "\n", "", "if", "self", ".", "crop_size", "is", "not", "None", ":", "\n", "            ", "img", ",", "offset", "=", "image_crop", "(", "img", ",", "self", ".", "crop_size", ")", "\n", "\n", "## transform", "\n", "", "img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "img", ")", ".", "astype", "(", "np", ".", "float32", ")", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ")", "\n", "img", "=", "self", ".", "img_transform", "(", "img", ")", "\n", "\n", "return", "img", ",", "torch", ".", "LongTensor", "(", "[", "idx", "]", ")", ",", "torch", ".", "LongTensor", "(", "offset", ")", ",", "torch", ".", "LongTensor", "(", "size", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.dataset_mc.pil_loader": [[31, 39], ["io.BytesIO", "PIL.Image.open", "PIL.Image.open", "img.convert.convert"], "function", ["None"], ["", "", "def", "pil_loader", "(", "img_str", ",", "ch", ")", ":", "\n", "    ", "buff", "=", "io", ".", "BytesIO", "(", "img_str", ")", "\n", "if", "ch", "==", "1", ":", "\n", "        ", "return", "Image", ".", "open", "(", "buff", ")", "\n", "", "else", ":", "\n", "        ", "with", "Image", ".", "open", "(", "buff", ")", "as", "img", ":", "\n", "            ", "img", "=", "img", ".", "convert", "(", "'RGB'", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.dataset_mc.pil_loader_str": [[40, 47], ["PIL.Image.open", "PIL.Image.open", "img.convert.convert"], "function", ["None"], ["", "", "def", "pil_loader_str", "(", "img_str", ",", "ch", ")", ":", "\n", "    ", "if", "ch", "==", "1", ":", "\n", "        ", "return", "Image", ".", "open", "(", "img_str", ")", "\n", "", "else", ":", "\n", "        ", "with", "Image", ".", "open", "(", "img_str", ")", "as", "img", ":", "\n", "            ", "img", "=", "img", ".", "convert", "(", "'RGB'", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.main.main": [[11, 33], ["yaml.load.items", "utils.dist_init", "trainer.Trainer", "trainer.Trainer.run", "open", "packaging.version.parse", "setattr", "hasattr", "os.path.dirname", "multiprocessing.get_start_method", "multiprocessing.set_start_method", "yaml.load", "yaml.load"], "function", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.distributed_utils.dist_init", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.trainer.Trainer.run"], ["def", "main", "(", "args", ")", ":", "\n", "    ", "with", "open", "(", "args", ".", "config", ")", "as", "f", ":", "\n", "        ", "if", "version", ".", "parse", "(", "yaml", ".", "version", ">=", "\"5.1\"", ")", ":", "\n", "            ", "config", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "", "else", ":", "\n", "            ", "config", "=", "yaml", ".", "load", "(", "f", ")", "\n", "\n", "", "", "for", "k", ",", "v", "in", "config", ".", "items", "(", ")", ":", "\n", "        ", "setattr", "(", "args", ",", "k", ",", "v", ")", "\n", "\n", "# exp path", "\n", "", "if", "not", "hasattr", "(", "args", ",", "'exp_path'", ")", ":", "\n", "        ", "args", ".", "exp_path", "=", "os", ".", "path", ".", "dirname", "(", "args", ".", "config", ")", "\n", "\n", "# dist init", "\n", "", "if", "mp", ".", "get_start_method", "(", "allow_none", "=", "True", ")", "!=", "'spawn'", ":", "\n", "        ", "mp", ".", "set_start_method", "(", "'spawn'", ",", "force", "=", "True", ")", "\n", "", "dist_init", "(", "args", ".", "launcher", ",", "backend", "=", "'nccl'", ")", "\n", "\n", "# train", "\n", "trainer", "=", "Trainer", "(", "args", ")", "\n", "trainer", ".", "run", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.trainer.Trainer.__init__": [[16, 134], ["torch.get_world_size", "torch.get_world_size", "torch.get_world_size", "torch.get_rank", "torch.get_rank", "torch.get_rank", "trainer.Trainer.model.load_state", "trainer.Trainer.model.load_pretrain", "utils.StepLRScheduler", "imageflow_dataset", "utils.DistributedGivenIterationSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "imageflow_dataset", "utils.DistributedSequentialSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "image_dataset", "utils.DistributedSequentialSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "SummaryWriter", "utils.create_logger", "utils.create_logger", "utils.create_logger", "Exception"], "methods", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.models.single_stage_model.SingleStageModel.load_state", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.models.single_stage_model.SingleStageModel.load_pretrain", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.common_utils.create_logger", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.common_utils.create_logger", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.common_utils.create_logger"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "\n", "# get rank", "\n", "        ", "self", ".", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "self", ".", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "\n", "if", "self", ".", "rank", "==", "0", ":", "\n", "# mkdir path", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "'{}/events'", ".", "format", "(", "args", ".", "exp_path", ")", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "'{}/events'", ".", "format", "(", "args", ".", "exp_path", ")", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "'{}/images'", ".", "format", "(", "args", ".", "exp_path", ")", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "'{}/images'", ".", "format", "(", "args", ".", "exp_path", ")", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "'{}/logs'", ".", "format", "(", "args", ".", "exp_path", ")", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "'{}/logs'", ".", "format", "(", "args", ".", "exp_path", ")", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "'{}/checkpoints'", ".", "format", "(", "args", ".", "exp_path", ")", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "'{}/checkpoints'", ".", "format", "(", "args", ".", "exp_path", ")", ")", "\n", "\n", "# logger", "\n", "", "if", "args", ".", "trainer", "[", "'tensorboard'", "]", "and", "not", "args", ".", "extract", ":", "\n", "                ", "try", ":", "\n", "                    ", "from", "tensorboardX", "import", "SummaryWriter", "\n", "", "except", ":", "\n", "                    ", "raise", "Exception", "(", "\"Please switch off \\\"tensorboard\\\" \"", "\n", "\"in your config file if you do not \"", "\n", "\"want to use it, otherwise install it.\"", ")", "\n", "", "self", ".", "tb_logger", "=", "SummaryWriter", "(", "'{}/events'", ".", "format", "(", "\n", "args", ".", "exp_path", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "tb_logger", "=", "None", "\n", "", "if", "args", ".", "validate", ":", "\n", "                ", "self", ".", "logger", "=", "utils", ".", "create_logger", "(", "\n", "'global_logger'", ",", "\n", "'{}/logs/log_offline_val.txt'", ".", "format", "(", "args", ".", "exp_path", ")", ")", "\n", "", "elif", "args", ".", "extract", ":", "\n", "                ", "self", ".", "logger", "=", "utils", ".", "create_logger", "(", "\n", "'global_logger'", ",", "\n", "'{}/logs/log_extract.txt'", ".", "format", "(", "args", ".", "exp_path", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "logger", "=", "utils", ".", "create_logger", "(", "\n", "'global_logger'", ",", "\n", "'{}/logs/log_train.txt'", ".", "format", "(", "args", ".", "exp_path", ")", ")", "\n", "\n", "# create model", "\n", "", "", "self", ".", "model", "=", "models", ".", "__dict__", "[", "args", ".", "model", "[", "'arch'", "]", "]", "(", "args", ".", "model", ",", "\n", "dist_model", "=", "True", ")", "\n", "\n", "# optionally resume from a checkpoint", "\n", "assert", "not", "(", "args", ".", "load_iter", "is", "not", "None", "and", "args", ".", "load_path", "is", "not", "None", ")", "\n", "if", "args", ".", "load_iter", "is", "not", "None", ":", "\n", "            ", "self", ".", "model", ".", "load_state", "(", "\"{}/checkpoints\"", ".", "format", "(", "args", ".", "exp_path", ")", ",", "\n", "args", ".", "load_iter", ",", "args", ".", "resume", ")", "\n", "self", ".", "start_iter", "=", "args", ".", "load_iter", "\n", "", "else", ":", "\n", "            ", "self", ".", "start_iter", "=", "0", "\n", "", "if", "args", ".", "load_path", "is", "not", "None", ":", "\n", "            ", "self", ".", "model", ".", "load_pretrain", "(", "args", ".", "load_path", ")", "\n", "", "self", ".", "curr_step", "=", "self", ".", "start_iter", "\n", "\n", "# lr scheduler", "\n", "if", "not", "(", "args", ".", "validate", "or", "args", ".", "extract", ")", ":", "# train", "\n", "            ", "self", ".", "lr_scheduler", "=", "utils", ".", "StepLRScheduler", "(", "\n", "self", ".", "model", ".", "optim", ",", "\n", "args", ".", "model", "[", "'lr_steps'", "]", ",", "\n", "args", ".", "model", "[", "'lr_mults'", "]", ",", "\n", "args", ".", "model", "[", "'lr'", "]", ",", "\n", "args", ".", "model", "[", "'warmup_lr'", "]", ",", "\n", "args", ".", "model", "[", "'warmup_steps'", "]", ",", "\n", "last_iter", "=", "self", ".", "start_iter", "-", "1", ")", "\n", "\n", "# Data loader", "\n", "", "if", "args", ".", "data", "[", "'memcached'", "]", ":", "\n", "            ", "from", "dataset_mc", "import", "McImageFlowDataset", ",", "McImageDataset", "\n", "imageflow_dataset", "=", "McImageFlowDataset", "\n", "image_dataset", "=", "McImageDataset", "\n", "", "else", ":", "\n", "            ", "from", "dataset", "import", "ImageFlowDataset", ",", "ImageDataset", "\n", "imageflow_dataset", "=", "ImageFlowDataset", "\n", "image_dataset", "=", "ImageDataset", "\n", "\n", "", "if", "not", "(", "args", ".", "validate", "or", "args", ".", "extract", ")", ":", "# train", "\n", "            ", "train_dataset", "=", "imageflow_dataset", "(", "args", ".", "data", "[", "'train_source'", "]", ",", "\n", "args", ".", "data", ",", "'train'", ")", "\n", "train_sampler", "=", "utils", ".", "DistributedGivenIterationSampler", "(", "\n", "train_dataset", ",", "\n", "args", ".", "model", "[", "'total_iter'", "]", ",", "\n", "args", ".", "data", "[", "'batch_size'", "]", ",", "\n", "last_iter", "=", "self", ".", "start_iter", "-", "1", ")", "\n", "self", ".", "train_loader", "=", "DataLoader", "(", "train_dataset", ",", "\n", "batch_size", "=", "args", ".", "data", "[", "'batch_size'", "]", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "data", "[", "'workers'", "]", ",", "\n", "pin_memory", "=", "False", ",", "\n", "sampler", "=", "train_sampler", ")", "\n", "\n", "", "if", "not", "args", ".", "extract", ":", "# train or offline validation", "\n", "            ", "val_dataset", "=", "imageflow_dataset", "(", "args", ".", "data", "[", "'val_source'", "]", ",", "args", ".", "data", ",", "\n", "'val'", ")", "\n", "val_sampler", "=", "utils", ".", "DistributedSequentialSampler", "(", "val_dataset", ")", "\n", "self", ".", "val_loader", "=", "DataLoader", "(", "\n", "val_dataset", ",", "\n", "batch_size", "=", "args", ".", "data", "[", "'batch_size_test'", "]", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "data", "[", "'workers'", "]", ",", "\n", "pin_memory", "=", "False", ",", "\n", "sampler", "=", "val_sampler", ")", "\n", "", "else", ":", "# extract", "\n", "            ", "extract_dataset", "=", "image_dataset", "(", "args", ".", "extract_source", ",", "args", ".", "data", ")", "\n", "self", ".", "extract_metas", "=", "extract_dataset", ".", "metas", "\n", "extract_sampler", "=", "utils", ".", "DistributedSequentialSampler", "(", "\n", "extract_dataset", ")", "\n", "self", ".", "extract_loader", "=", "DataLoader", "(", "extract_dataset", ",", "\n", "batch_size", "=", "1", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "1", ",", "\n", "pin_memory", "=", "False", ",", "\n", "sampler", "=", "extract_sampler", ")", "\n", "\n", "", "self", ".", "args", "=", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.trainer.Trainer.run": [[135, 152], ["trainer.Trainer.train", "trainer.Trainer.validate", "trainer.Trainer.extract", "trainer.Trainer.validate"], "methods", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.distributed_utils.DistModule.train", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.trainer.Trainer.validate", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.trainer.Trainer.extract", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.trainer.Trainer.validate"], ["", "def", "run", "(", "self", ")", ":", "\n", "\n", "# validate only", "\n", "        ", "if", "self", ".", "args", ".", "validate", ":", "\n", "            ", "self", ".", "validate", "(", "'off_val'", ")", "\n", "return", "\n", "\n", "# extract", "\n", "", "if", "self", ".", "args", ".", "extract", ":", "\n", "            ", "self", ".", "extract", "(", ")", "\n", "return", "\n", "\n", "", "if", "self", ".", "args", ".", "trainer", "[", "'initial_val'", "]", ":", "\n", "            ", "self", ".", "validate", "(", "'on_val'", ")", "\n", "\n", "# train", "\n", "", "self", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.trainer.Trainer.train": [[153, 229], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "trainer.Trainer.model.switch_to", "time.time", "enumerate", "utils.AverageMeter", "trainer.Trainer.lr_scheduler.step", "utils.AverageMeter.update", "utils.AverageMeter.update", "image.cuda.cuda.cuda", "sparse.cuda.cuda.cuda", "mask.cuda.cuda.cuda", "flow_target.cuda.cuda.cuda", "rgb_target.cuda.cuda.cuda", "trainer.Trainer.model.set_input", "trainer.Trainer.model.step", "trainer.Trainer.keys", "utils.AverageMeter.update", "time.time", "trainer.Trainer.lr_scheduler.get_lr", "int", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "recorder[].update", "recorder.keys", "trainer.Trainer.logger.info", "trainer.Trainer.validate", "trainer.Trainer.model.save_state", "time.time", "utils.reduce_tensors().item", "time.time", "trainer.Trainer.tb_logger.add_scalar", "trainer.Trainer.tb_logger.add_scalar", "mask.cuda.cuda.size", "trainer.Trainer.tb_logger.add_scalar", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "mask.cuda.cuda.size", "utils.reduce_tensors", "len"], "methods", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.models.single_stage_model.SingleStageModel.switch_to", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.models.single_stage_model.SingleStageModel.step", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.common_utils.AverageMeter.update", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.common_utils.AverageMeter.update", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.models.single_stage_model.SingleStageModel.set_input", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.models.single_stage_model.SingleStageModel.step", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.common_utils.AverageMeter.update", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.scheduler._LRScheduler.get_lr", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.common_utils.AverageMeter.update", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.trainer.Trainer.validate", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.models.single_stage_model.SingleStageModel.save_state", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.distributed_utils.reduce_tensors"], ["", "def", "train", "(", "self", ")", ":", "\n", "\n", "        ", "btime_rec", "=", "utils", ".", "AverageMeter", "(", "10", ")", "\n", "dtime_rec", "=", "utils", ".", "AverageMeter", "(", "10", ")", "\n", "npts_rec", "=", "utils", ".", "AverageMeter", "(", "1000", ")", "\n", "recorder", "=", "{", "}", "\n", "for", "rec", "in", "self", ".", "args", ".", "trainer", "[", "'loss_record'", "]", ":", "\n", "            ", "recorder", "[", "rec", "]", "=", "utils", ".", "AverageMeter", "(", "10", ")", "\n", "\n", "", "self", ".", "model", ".", "switch_to", "(", "'train'", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "image", ",", "sparse", ",", "mask", ",", "flow_target", ",", "\n", "rgb_target", ")", "in", "enumerate", "(", "self", ".", "train_loader", ")", ":", "\n", "            ", "self", ".", "curr_step", "=", "self", ".", "start_iter", "+", "i", "\n", "self", ".", "lr_scheduler", ".", "step", "(", "self", ".", "curr_step", ")", "\n", "curr_lr", "=", "self", ".", "lr_scheduler", ".", "get_lr", "(", ")", "[", "0", "]", "\n", "\n", "# measure data loading time", "\n", "dtime_rec", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "npts_rec", ".", "update", "(", "int", "(", "torch", ".", "sum", "(", "mask", ")", "/", "mask", ".", "size", "(", "0", ")", "/", "mask", ".", "size", "(", "1", ")", ")", ")", "\n", "\n", "assert", "image", ".", "shape", "[", "0", "]", ">", "0", "\n", "image", "=", "image", ".", "cuda", "(", ")", "\n", "sparse", "=", "sparse", ".", "cuda", "(", ")", "\n", "mask", "=", "mask", ".", "cuda", "(", ")", "\n", "flow_target", "=", "flow_target", ".", "cuda", "(", ")", "\n", "rgb_target", "=", "rgb_target", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "model", ".", "set_input", "(", "image", ",", "torch", ".", "cat", "(", "[", "sparse", ",", "mask", "]", ",", "dim", "=", "1", ")", ",", "\n", "flow_target", ",", "rgb_target", ")", "\n", "loss_dict", "=", "self", ".", "model", ".", "step", "(", ")", "\n", "for", "k", "in", "loss_dict", ".", "keys", "(", ")", ":", "\n", "                ", "recorder", "[", "k", "]", ".", "update", "(", "utils", ".", "reduce_tensors", "(", "loss_dict", "[", "k", "]", ")", ".", "item", "(", ")", ")", "\n", "\n", "", "btime_rec", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "# logging", "\n", "if", "self", ".", "rank", "==", "0", "and", "self", ".", "curr_step", "%", "self", ".", "args", ".", "trainer", "[", "\n", "'print_freq'", "]", "==", "0", ":", "\n", "                ", "loss_str", "=", "\"\"", "\n", "if", "self", ".", "tb_logger", "is", "not", "None", ":", "\n", "                    ", "self", ".", "tb_logger", ".", "add_scalar", "(", "'npts'", ",", "npts_rec", ".", "avg", ",", "\n", "self", ".", "curr_step", ")", "\n", "self", ".", "tb_logger", ".", "add_scalar", "(", "'lr'", ",", "curr_lr", ",", "self", ".", "curr_step", ")", "\n", "", "for", "k", "in", "recorder", ".", "keys", "(", ")", ":", "\n", "                    ", "if", "self", ".", "tb_logger", "is", "not", "None", ":", "\n", "                        ", "self", ".", "tb_logger", ".", "add_scalar", "(", "'train_{}'", ".", "format", "(", "k", ")", ",", "\n", "recorder", "[", "k", "]", ".", "avg", ",", "\n", "self", ".", "curr_step", "+", "1", ")", "\n", "", "loss_str", "+=", "'{}: {loss.val:.4g} ({loss.avg:.4g})\\t'", ".", "format", "(", "\n", "k", ",", "loss", "=", "recorder", "[", "k", "]", ")", "\n", "\n", "", "self", ".", "logger", ".", "info", "(", "\n", "'Iter: [{0}/{1}]\\t'", ".", "format", "(", "self", ".", "curr_step", ",", "\n", "len", "(", "self", ".", "train_loader", ")", ")", "+", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", ".", "format", "(", "\n", "batch_time", "=", "btime_rec", ")", "+", "\n", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", ".", "format", "(", "\n", "data_time", "=", "dtime_rec", ")", "+", "loss_str", "+", "\n", "'NPts {num_pts.val} ({num_pts.avg:.1f})\\t'", ".", "format", "(", "\n", "num_pts", "=", "npts_rec", ")", "+", "'lr {lr:.2g}'", ".", "format", "(", "lr", "=", "curr_lr", ")", ")", "\n", "\n", "# validate", "\n", "", "if", "(", "(", "self", ".", "curr_step", "+", "1", ")", "%", "self", ".", "args", ".", "trainer", "[", "'val_freq'", "]", "==", "0", "or", "\n", "(", "self", ".", "curr_step", "+", "1", ")", "==", "self", ".", "args", ".", "model", "[", "'total_iter'", "]", ")", ":", "\n", "                ", "self", ".", "validate", "(", "'on_val'", ")", "\n", "\n", "# save", "\n", "", "if", "(", "self", ".", "rank", "==", "0", "and", "\n", "(", "(", "self", ".", "curr_step", "+", "1", ")", "%", "self", ".", "args", ".", "trainer", "[", "'save_freq'", "]", "==", "0", "or", "\n", "(", "self", ".", "curr_step", "+", "1", ")", "==", "self", ".", "args", ".", "model", "[", "'total_iter'", "]", ")", ")", ":", "\n", "                ", "self", ".", "model", ".", "save_state", "(", "\n", "\"{}/checkpoints\"", ".", "format", "(", "self", ".", "args", ".", "exp_path", ")", ",", "\n", "self", ".", "curr_step", "+", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.trainer.Trainer.validate": [[230, 313], ["utils.AverageMeter", "utils.AverageMeter", "utils.AverageMeter", "trainer.Trainer.model.switch_to", "time.time", "enumerate", "trainer.Trainer.model.switch_to", "utils.AverageMeter", "utils.AverageMeter.update", "utils.AverageMeter.update", "image.cuda.cuda.cuda", "sparse.cuda.cuda.cuda", "mask.cuda.cuda.cuda", "flow_target.cuda.cuda.cuda", "rgb_target.cuda.cuda.cuda", "trainer.Trainer.model.set_input", "trainer.Trainer.model.eval", "loss_dict.keys", "utils.AverageMeter.update", "time.time", "recorder.keys", "trainer.Trainer.logger.info", "int", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "recorder[].update", "time.time", "utils.reduce_tensors().item", "time.time", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torchvision.make_grid", "trainer.Trainer.tb_logger.add_scalar", "mask.cuda.cuda.size", "utils.visualize_tensor", "trainer.Trainer.tb_logger.add_image", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "mask.cuda.cuda.size", "utils.reduce_tensors"], "methods", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.models.single_stage_model.SingleStageModel.switch_to", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.models.single_stage_model.SingleStageModel.switch_to", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.common_utils.AverageMeter.update", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.common_utils.AverageMeter.update", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.models.single_stage_model.SingleStageModel.set_input", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.models.single_stage_model.SingleStageModel.eval", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.common_utils.AverageMeter.update", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.common_utils.AverageMeter.update", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.visualize_utils.visualize_tensor", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.distributed_utils.reduce_tensors"], ["", "", "", "def", "validate", "(", "self", ",", "phase", ")", ":", "\n", "        ", "btime_rec", "=", "utils", ".", "AverageMeter", "(", "0", ")", "\n", "dtime_rec", "=", "utils", ".", "AverageMeter", "(", "0", ")", "\n", "npts_rec", "=", "utils", ".", "AverageMeter", "(", "0", ")", "\n", "recorder", "=", "{", "}", "\n", "for", "rec", "in", "self", ".", "args", ".", "trainer", "[", "'loss_record'", "]", ":", "\n", "            ", "recorder", "[", "rec", "]", "=", "utils", ".", "AverageMeter", "(", "10", ")", "\n", "\n", "", "self", ".", "model", ".", "switch_to", "(", "'eval'", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "all_together", "=", "[", "]", "\n", "for", "i", ",", "(", "image", ",", "sparse", ",", "mask", ",", "flow_target", ",", "\n", "rgb_target", ")", "in", "enumerate", "(", "self", ".", "val_loader", ")", ":", "\n", "            ", "if", "(", "'val_iter'", "in", "self", ".", "args", ".", "trainer", "and", "\n", "self", ".", "args", ".", "trainer", "[", "'val_iter'", "]", "!=", "-", "1", "and", "\n", "i", "==", "self", ".", "args", ".", "trainer", "[", "'val_iter'", "]", ")", ":", "\n", "                ", "break", "\n", "\n", "", "assert", "image", ".", "shape", "[", "0", "]", ">", "0", "\n", "\n", "dtime_rec", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "npts_rec", ".", "update", "(", "int", "(", "torch", ".", "sum", "(", "mask", ")", "/", "mask", ".", "size", "(", "0", ")", "/", "mask", ".", "size", "(", "1", ")", ")", ")", "\n", "\n", "image", "=", "image", ".", "cuda", "(", ")", "\n", "sparse", "=", "sparse", ".", "cuda", "(", ")", "\n", "mask", "=", "mask", ".", "cuda", "(", ")", "\n", "flow_target", "=", "flow_target", ".", "cuda", "(", ")", "\n", "rgb_target", "=", "rgb_target", ".", "cuda", "(", ")", "\n", "\n", "self", ".", "model", ".", "set_input", "(", "image", ",", "torch", ".", "cat", "(", "[", "sparse", ",", "mask", "]", ",", "dim", "=", "1", ")", ",", "\n", "flow_target", ",", "rgb_target", ")", "\n", "tensor_dict", ",", "loss_dict", "=", "self", ".", "model", ".", "eval", "(", ")", "\n", "for", "k", "in", "loss_dict", ".", "keys", "(", ")", ":", "\n", "                ", "recorder", "[", "k", "]", ".", "update", "(", "utils", ".", "reduce_tensors", "(", "loss_dict", "[", "k", "]", ")", ".", "item", "(", ")", ")", "\n", "", "btime_rec", ".", "update", "(", "time", ".", "time", "(", ")", "-", "end", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "\n", "# tb visualize", "\n", "if", "self", ".", "rank", "==", "0", ":", "\n", "                ", "if", "(", "i", ">=", "self", ".", "args", ".", "trainer", "[", "'val_disp_start_iter'", "]", "and", "\n", "i", "<", "self", ".", "args", ".", "trainer", "[", "'val_disp_end_iter'", "]", ")", ":", "\n", "                    ", "all_together", ".", "append", "(", "\n", "utils", ".", "visualize_tensor", "(", "image", ",", "mask", ",", "\n", "tensor_dict", "[", "'flow_tensors'", "]", ",", "\n", "tensor_dict", "[", "'common_tensors'", "]", ",", "\n", "tensor_dict", "[", "'rgb_tensors'", "]", ",", "\n", "self", ".", "args", ".", "data", "[", "'data_mean'", "]", ",", "\n", "self", ".", "args", ".", "data", "[", "'data_div'", "]", ")", ")", "\n", "", "if", "(", "i", "==", "self", ".", "args", ".", "trainer", "[", "'val_disp_end_iter'", "]", "and", "\n", "self", ".", "args", ".", "trainer", "[", "'val_disp_end_iter'", "]", ">", "\n", "self", ".", "args", ".", "trainer", "[", "'val_disp_start_iter'", "]", ")", ":", "\n", "                    ", "all_together", "=", "torch", ".", "cat", "(", "all_together", ",", "dim", "=", "2", ")", "\n", "grid", "=", "vutils", ".", "make_grid", "(", "all_together", ",", "\n", "nrow", "=", "1", ",", "\n", "normalize", "=", "True", ",", "\n", "range", "=", "(", "0", ",", "255", ")", ",", "\n", "scale_each", "=", "False", ")", "\n", "if", "self", ".", "tb_logger", "is", "not", "None", ":", "\n", "                        ", "self", ".", "tb_logger", ".", "add_image", "(", "'Image_'", "+", "phase", ",", "grid", ",", "\n", "self", ".", "curr_step", "+", "1", ")", "\n", "\n", "# logging", "\n", "", "", "", "", "if", "self", ".", "rank", "==", "0", ":", "\n", "            ", "loss_str", "=", "\"\"", "\n", "for", "k", "in", "recorder", ".", "keys", "(", ")", ":", "\n", "                ", "if", "self", ".", "tb_logger", "is", "not", "None", ":", "\n", "                    ", "self", ".", "tb_logger", ".", "add_scalar", "(", "'val_{}'", ".", "format", "(", "k", ")", ",", "\n", "recorder", "[", "k", "]", ".", "avg", ",", "\n", "self", ".", "curr_step", "+", "1", ")", "\n", "", "loss_str", "+=", "'{}: {loss.val:.4g} ({loss.avg:.4g})\\t'", ".", "format", "(", "\n", "k", ",", "loss", "=", "recorder", "[", "k", "]", ")", "\n", "\n", "", "self", ".", "logger", ".", "info", "(", "\n", "'Validation Iter: [{0}]\\t'", ".", "format", "(", "self", ".", "curr_step", ")", "+", "\n", "'Time {batch_time.val:.3f} ({batch_time.avg:.3f})\\t'", ".", "format", "(", "\n", "batch_time", "=", "btime_rec", ")", "+", "\n", "'Data {data_time.val:.3f} ({data_time.avg:.3f})\\t'", ".", "format", "(", "\n", "data_time", "=", "dtime_rec", ")", "+", "loss_str", "+", "\n", "'NPts {num_pts.val} ({num_pts.avg:.1f})\\t'", ".", "format", "(", "\n", "num_pts", "=", "npts_rec", ")", ")", "\n", "\n", "", "self", ".", "model", ".", "switch_to", "(", "\"train\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.trainer.Trainer.extract": [[314, 316], ["None"], "methods", ["None"], ["", "def", "extract", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplemented", "\n", "", "", ""]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.dataset.ColorAugmentation.__init__": [[14, 25], ["torch.Tensor", "torch.Tensor"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "eig_vec", "=", "None", ",", "eig_val", "=", "None", ")", ":", "\n", "        ", "if", "eig_vec", "==", "None", ":", "\n", "            ", "eig_vec", "=", "torch", ".", "Tensor", "(", "[", "\n", "[", "0.4009", ",", "0.7192", ",", "-", "0.5675", "]", ",", "\n", "[", "-", "0.8140", ",", "-", "0.0045", ",", "-", "0.5808", "]", ",", "\n", "[", "0.4203", ",", "-", "0.6948", ",", "-", "0.5836", "]", ",", "\n", "]", ")", "\n", "", "if", "eig_val", "==", "None", ":", "\n", "            ", "eig_val", "=", "torch", ".", "Tensor", "(", "[", "[", "0.2175", ",", "0.0188", ",", "0.0045", "]", "]", ")", "\n", "", "self", ".", "eig_val", "=", "eig_val", "# 1*3", "\n", "self", ".", "eig_vec", "=", "eig_vec", "# 3*3", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.dataset.ColorAugmentation.__call__": [[26, 32], ["torch.mm", "tensor.size", "torch.normal", "torch.mm.view", "torch.zeros_like"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "tensor", ")", ":", "\n", "        ", "assert", "tensor", ".", "size", "(", "0", ")", "==", "3", "\n", "alpha", "=", "torch", ".", "normal", "(", "means", "=", "torch", ".", "zeros_like", "(", "self", ".", "eig_val", ")", ")", "*", "0.1", "\n", "quatity", "=", "torch", ".", "mm", "(", "self", ".", "eig_val", "*", "alpha", ",", "self", ".", "eig_vec", ")", "\n", "tensor", "=", "tensor", "+", "quatity", ".", "view", "(", "3", ",", "1", ",", "1", ")", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.dataset.ImageFlowDataset.__init__": [[55, 93], ["torchvision.Compose", "print", "print", "config.get", "config.get", "config.get", "len", "config[].get", "config[].get", "config[].get", "config[].get", "torchvision.Normalize", "open", "f.readlines", "line.rstrip().split", "dataset.ImageFlowDataset.metas.append", "line.rstrip().split", "dataset.ImageFlowDataset.metas.append", "Exception", "line.rstrip", "line.rstrip"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "meta_file", ",", "config", ",", "phase", ")", ":", "\n", "        ", "self", ".", "img_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Normalize", "(", "config", "[", "'data_mean'", "]", ",", "config", "[", "'data_div'", "]", ")", "\n", "]", ")", "\n", "print", "(", "\"building dataset from {}\"", ".", "format", "(", "meta_file", ")", ")", "\n", "self", ".", "flow_file_type", "=", "config", "[", "'flow_file_type'", "]", "\n", "self", ".", "metas", "=", "[", "]", "\n", "self", ".", "num", "=", "0", "\n", "for", "mf", "in", "meta_file", ":", "\n", "            ", "with", "open", "(", "mf", ",", "'r'", ")", "as", "f", ":", "\n", "                ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "self", ".", "num", "+=", "len", "(", "lines", ")", "\n", "for", "line", "in", "lines", ":", "\n", "                ", "if", "self", ".", "flow_file_type", "==", "\"flo\"", ":", "\n", "                    ", "img0_path", ",", "img1_path", ",", "flow_path", "=", "line", ".", "rstrip", "(", ")", ".", "split", "(", ")", "\n", "self", ".", "metas", ".", "append", "(", "(", "img0_path", ",", "img1_path", ",", "flow_path", ")", ")", "\n", "", "elif", "self", ".", "flow_file_type", "==", "\"jpg\"", ":", "\n", "                    ", "img0_path", ",", "img1_path", ",", "flow_path_x", ",", "flow_path_y", "=", "line", ".", "rstrip", "(", ")", ".", "split", "(", ")", "\n", "self", ".", "metas", ".", "append", "(", "(", "img0_path", ",", "img1_path", ",", "flow_path_x", ",", "flow_path_y", ")", ")", "\n", "", "else", ":", "\n", "                    ", "raise", "Exception", "(", "\"No such flow_file_type: {}\"", ".", "format", "(", "self", ".", "flow_file_type", ")", ")", "\n", "", "", "", "print", "(", "\"read meta done, total: {}\"", ".", "format", "(", "self", ".", "num", ")", ")", "\n", "\n", "self", ".", "phase", "=", "phase", "\n", "\n", "self", ".", "short_size", "=", "config", ".", "get", "(", "'short_size'", ",", "None", ")", "\n", "self", ".", "long_size", "=", "config", ".", "get", "(", "'long_size'", ",", "None", ")", "\n", "self", ".", "crop_size", "=", "config", ".", "get", "(", "'crop_size'", ",", "None", ")", "\n", "self", ".", "sample_strategy", "=", "config", "[", "'sample_strategy'", "]", "\n", "self", ".", "sample_bg_ratio", "=", "config", "[", "'sample_bg_ratio'", "]", "\n", "self", ".", "nms_ks", "=", "config", "[", "'nms_ks'", "]", "\n", "self", ".", "max_num_guide", "=", "config", "[", "'max_num_guide'", "]", "\n", "\n", "if", "self", ".", "phase", "==", "\"train\"", ":", "\n", "            ", "self", ".", "aug_flip", "=", "config", "[", "'image_flow_aug'", "]", ".", "get", "(", "'flip'", ",", "False", ")", "\n", "self", ".", "aug_reverse", "=", "config", "[", "'flow_aug'", "]", ".", "get", "(", "'reverse'", ",", "False", ")", "\n", "self", ".", "aug_scale", "=", "config", "[", "'flow_aug'", "]", ".", "get", "(", "'scale'", ",", "False", ")", "\n", "self", ".", "aug_rotate", "=", "config", "[", "'flow_aug'", "]", ".", "get", "(", "'rotate'", ",", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.dataset.ImageFlowDataset.__len__": [[94, 96], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.dataset.ImageFlowDataset.__getitem__": [[97, 153], ["dataset.pil_loader_str", "dataset.pil_loader_str", "torch.from_numpy", "torch.from_numpy", "dataset.ImageFlowDataset.img_transform", "dataset.ImageFlowDataset.img_transform", "utils.flow_sampler", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "utils.flowlib.read_flo_file", "numpy.concatenate", "utils.image_flow_resize", "utils.image_flow_crop", "utils.image_flow_aug", "utils.flow_aug", "numpy.array().astype().transpose", "numpy.array().astype().transpose", "utils.flow_aug.transpose", "torch.from_numpy.transpose", "torch.from_numpy.transpose().astype", "numpy.array().astype", "numpy.array().astype", "torch.from_numpy.transpose", "numpy.array().astype", "numpy.array().astype", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "PIL.Image.open", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.dataset.pil_loader_str", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.dataset.pil_loader_str", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.data_utils.flow_sampler", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.flowlib.read_flo_file", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.data_utils.image_flow_resize", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.data_utils.image_flow_crop", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.data_utils.image_flow_aug", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.data_utils.flow_aug"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img1_fn", "=", "self", ".", "metas", "[", "idx", "]", "[", "0", "]", "\n", "img2_fn", "=", "self", ".", "metas", "[", "idx", "]", "[", "1", "]", "\n", "if", "self", ".", "flow_file_type", "==", "'flo'", ":", "\n", "            ", "flowname", "=", "self", ".", "metas", "[", "idx", "]", "[", "2", "]", "\n", "flow", "=", "read_flo_file", "(", "flowname", ")", "# h, w, 2", "\n", "", "else", ":", "\n", "            ", "flownamex", "=", "self", ".", "metas", "[", "idx", "]", "[", "2", "]", "\n", "flownamey", "=", "self", ".", "metas", "[", "idx", "]", "[", "3", "]", "\n", "flowx", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "flownamex", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "/", "255", "*", "100", "-", "50", "\n", "flowy", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "flownamey", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", "/", "255", "*", "100", "-", "50", "\n", "flow", "=", "np", ".", "concatenate", "(", "(", "flowx", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ",", "flowy", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ")", ",", "axis", "=", "2", ")", "\n", "", "img1", "=", "pil_loader_str", "(", "img1_fn", ",", "ch", "=", "3", ")", "\n", "img2", "=", "pil_loader_str", "(", "img2_fn", ",", "ch", "=", "3", ")", "\n", "\n", "## check size", "\n", "assert", "img1", ".", "height", "==", "flow", ".", "shape", "[", "0", "]", "\n", "assert", "img1", ".", "width", "==", "flow", ".", "shape", "[", "1", "]", "\n", "assert", "img2", ".", "height", "==", "flow", ".", "shape", "[", "0", "]", "\n", "assert", "img2", ".", "width", "==", "flow", ".", "shape", "[", "1", "]", "\n", "\n", "## resize", "\n", "if", "self", ".", "short_size", "is", "not", "None", "or", "self", ".", "long_size", "is", "not", "None", ":", "\n", "            ", "img1", ",", "img2", ",", "flow", ",", "ratio", "=", "image_flow_resize", "(", "\n", "img1", ",", "img2", ",", "flow", ",", "short_size", "=", "self", ".", "short_size", ",", "\n", "long_size", "=", "self", ".", "long_size", ")", "\n", "\n", "## crop", "\n", "", "if", "self", ".", "crop_size", "is", "not", "None", ":", "\n", "            ", "img1", ",", "img2", ",", "flow", ",", "offset", "=", "image_flow_crop", "(", "\n", "img1", ",", "img2", ",", "flow", ",", "self", ".", "crop_size", ",", "self", ".", "phase", ")", "\n", "\n", "## augmentation", "\n", "", "if", "self", ".", "phase", "==", "'train'", ":", "\n", "# image flow aug", "\n", "            ", "img1", ",", "img2", ",", "flow", "=", "image_flow_aug", "(", "img1", ",", "img2", ",", "flow", ",", "flip_horizon", "=", "self", ".", "aug_flip", ")", "\n", "# flow aug", "\n", "flow", "=", "flow_aug", "(", "flow", ",", "reverse", "=", "self", ".", "aug_reverse", ",", "\n", "scale", "=", "self", ".", "aug_scale", ",", "rotate", "=", "self", ".", "aug_rotate", ")", "\n", "\n", "## transform", "\n", "", "img1", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "img1", ")", ".", "astype", "(", "np", ".", "float32", ")", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ")", "\n", "img2", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "img2", ")", ".", "astype", "(", "np", ".", "float32", ")", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ")", "\n", "img1", "=", "self", ".", "img_transform", "(", "img1", ")", "\n", "img2", "=", "self", ".", "img_transform", "(", "img2", ")", "\n", "\n", "## sparse sampling", "\n", "sparse_flow", ",", "mask", "=", "flow_sampler", "(", "\n", "flow", ",", "strategy", "=", "self", ".", "sample_strategy", ",", "\n", "bg_ratio", "=", "self", ".", "sample_bg_ratio", ",", "nms_ks", "=", "self", ".", "nms_ks", ",", "\n", "max_num_guide", "=", "self", ".", "max_num_guide", ")", "# (h,w,2), (h,w,2)", "\n", "\n", "flow", "=", "torch", ".", "from_numpy", "(", "flow", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ")", "\n", "sparse_flow", "=", "torch", ".", "from_numpy", "(", "sparse_flow", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ")", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ".", "astype", "(", "np", ".", "float32", ")", ")", "\n", "return", "img1", ",", "sparse_flow", ",", "mask", ",", "flow", ",", "img2", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.dataset.ImageDataset.__init__": [[157, 171], ["torchvision.Compose", "print", "len", "print", "config.get", "config.get", "config.get", "open", "f.readlines", "l.rstrip", "torchvision.Normalize"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "meta_file", ",", "config", ")", ":", "\n", "        ", "self", ".", "img_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Normalize", "(", "config", "[", "'data_mean'", "]", ",", "config", "[", "'data_div'", "]", ")", "\n", "]", ")", "\n", "print", "(", "\"building dataset from {}\"", ".", "format", "(", "meta_file", ")", ")", "\n", "with", "open", "(", "meta_file", ",", "'r'", ")", "as", "f", ":", "\n", "            ", "lines", "=", "f", ".", "readlines", "(", ")", "\n", "", "self", ".", "num", "=", "len", "(", "lines", ")", "\n", "self", ".", "metas", "=", "[", "l", ".", "rstrip", "(", ")", "for", "l", "in", "lines", "]", "\n", "print", "(", "\"read meta done, total: {}\"", ".", "format", "(", "self", ".", "num", ")", ")", "\n", "\n", "self", ".", "short_size", "=", "config", ".", "get", "(", "'short_size'", ",", "None", ")", "\n", "self", ".", "long_size", "=", "config", ".", "get", "(", "'long_size'", ",", "None", ")", "\n", "self", ".", "crop_size", "=", "config", ".", "get", "(", "'crop_size'", ",", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.dataset.ImageDataset.__len__": [[172, 174], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.dataset.ImageDataset.__getitem__": [[175, 192], ["dataset.pil_loader_str", "torch.from_numpy", "dataset.ImageDataset.img_transform", "utils.image_resize", "utils.image_crop", "numpy.array().astype().transpose", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "numpy.array().astype", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.dataset.pil_loader_str", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.data_utils.image_resize", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.data_utils.image_crop"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "img_fn", "=", "self", ".", "metas", "[", "idx", "]", "\n", "img", "=", "pil_loader_str", "(", "img_fn", ",", "ch", "=", "3", ")", "\n", "\n", "## resize", "\n", "if", "self", ".", "short_size", "is", "not", "None", "or", "self", ".", "long_size", "is", "not", "None", ":", "\n", "            ", "img", ",", "size", "=", "image_resize", "(", "img", ",", "short_size", "=", "self", ".", "short_size", ",", "long_size", "=", "self", ".", "long_size", ")", "\n", "\n", "## crop", "\n", "", "if", "self", ".", "crop_size", "is", "not", "None", ":", "\n", "            ", "img", ",", "offset", "=", "image_crop", "(", "img", ",", "self", ".", "crop_size", ")", "\n", "\n", "## transform", "\n", "", "img", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "img", ")", ".", "astype", "(", "np", ".", "float32", ")", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", ")", "\n", "img", "=", "self", ".", "img_transform", "(", "img", ")", "\n", "\n", "return", "img", ",", "torch", ".", "LongTensor", "(", "[", "idx", "]", ")", ",", "torch", ".", "LongTensor", "(", "offset", ")", ",", "torch", ".", "LongTensor", "(", "size", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.dataset.pil_loader": [[34, 42], ["io.BytesIO", "PIL.Image.open", "PIL.Image.open", "img.convert.convert"], "function", ["None"], ["", "", "def", "pil_loader", "(", "img_str", ",", "ch", ")", ":", "\n", "    ", "buff", "=", "io", ".", "BytesIO", "(", "img_str", ")", "\n", "if", "ch", "==", "1", ":", "\n", "        ", "return", "Image", ".", "open", "(", "buff", ")", "\n", "", "else", ":", "\n", "        ", "with", "Image", ".", "open", "(", "buff", ")", "as", "img", ":", "\n", "            ", "img", "=", "img", ".", "convert", "(", "'RGB'", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.dataset.pil_loader_str": [[44, 51], ["PIL.Image.open", "PIL.Image.open", "img.convert.convert"], "function", ["None"], ["", "", "def", "pil_loader_str", "(", "img_str", ",", "ch", ")", ":", "\n", "    ", "if", "ch", "==", "1", ":", "\n", "        ", "return", "Image", ".", "open", "(", "img_str", ")", "\n", "", "else", ":", "\n", "        ", "with", "Image", ".", "open", "(", "img_str", ")", "as", "img", ":", "\n", "            ", "img", "=", "img", ".", "convert", "(", "'RGB'", ")", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.losses.EdgeAwareLoss.__init__": [[24, 38], ["torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "losses.EdgeAwareLoss.kernelx.repeat", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "losses.EdgeAwareLoss.kernely.repeat", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.SmoothL1Loss", "torch.SmoothL1Loss", "torch.SmoothL1Loss", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "nc", "=", "2", ",", "loss_type", "=", "\"L1\"", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "assert", "loss_type", "in", "[", "'L1'", ",", "'BCE'", "]", ",", "\"Undefined loss type: {}\"", ".", "format", "(", "loss_type", ")", "\n", "self", ".", "nc", "=", "nc", "\n", "self", ".", "loss_type", "=", "loss_type", "\n", "self", ".", "kernelx", "=", "Variable", "(", "torch", ".", "Tensor", "(", "[", "[", "1", ",", "0", ",", "-", "1", "]", ",", "[", "2", ",", "0", ",", "-", "2", "]", ",", "[", "1", ",", "0", ",", "-", "1", "]", "]", ")", ".", "cuda", "(", ")", ")", "\n", "self", ".", "kernelx", "=", "self", ".", "kernelx", ".", "repeat", "(", "nc", ",", "1", ",", "1", ",", "1", ")", "\n", "self", ".", "kernely", "=", "Variable", "(", "torch", ".", "Tensor", "(", "[", "[", "1", ",", "2", ",", "1", "]", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "2", ",", "-", "1", "]", "]", ")", ".", "cuda", "(", ")", ")", "\n", "self", ".", "kernely", "=", "self", ".", "kernely", ".", "repeat", "(", "nc", ",", "1", ",", "1", ",", "1", ")", "\n", "self", ".", "bias", "=", "Variable", "(", "torch", ".", "zeros", "(", "nc", ")", ".", "cuda", "(", ")", ")", "\n", "self", ".", "reduction", "=", "reduction", "\n", "if", "loss_type", "==", "'L1'", ":", "\n", "            ", "self", ".", "loss", "=", "nn", ".", "SmoothL1Loss", "(", "reduction", "=", "reduction", ")", "\n", "", "elif", "loss_type", "==", "'BCE'", ":", "\n", "            ", "self", ".", "loss", "=", "self", ".", "bce2d", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.losses.EdgeAwareLoss.bce2d": [[39, 45], ["torch.functional.binary_cross_entropy", "torch.functional.binary_cross_entropy", "torch.functional.binary_cross_entropy", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean"], "methods", ["None"], ["", "", "def", "bce2d", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "assert", "not", "target", ".", "requires_grad", "\n", "beta", "=", "1", "-", "torch", ".", "mean", "(", "target", ")", "\n", "weights", "=", "1", "-", "beta", "+", "(", "2", "*", "beta", "-", "1", ")", "*", "target", "\n", "loss", "=", "nn", ".", "functional", ".", "binary_cross_entropy", "(", "input", ",", "target", ",", "weights", ",", "reduction", "=", "self", ".", "reduction", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.losses.EdgeAwareLoss.get_edge": [[46, 53], ["torch.functional.conv2d", "torch.functional.conv2d", "torch.functional.conv2d", "torch.functional.conv2d", "torch.functional.conv2d", "torch.functional.conv2d", "torch.sqrt().mean", "torch.sqrt().mean", "torch.sqrt().mean", "torch.sqrt().mean", "torch.sqrt().mean", "torch.sqrt().mean", "torch.sqrt().mean", "torch.sqrt().mean", "torch.sqrt().mean", "var.size", "var.size", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.functional.conv2d.pow", "torch.functional.conv2d.pow"], "methods", ["None"], ["", "def", "get_edge", "(", "self", ",", "var", ")", ":", "\n", "        ", "assert", "var", ".", "size", "(", "1", ")", "==", "self", ".", "nc", ",", "\"input size at dim 1 should be consistent with nc, {} vs {}\"", ".", "format", "(", "var", ".", "size", "(", "1", ")", ",", "self", ".", "nc", ")", "\n", "outputx", "=", "nn", ".", "functional", ".", "conv2d", "(", "var", ",", "self", ".", "kernelx", ",", "bias", "=", "self", ".", "bias", ",", "padding", "=", "1", ",", "groups", "=", "self", ".", "nc", ")", "\n", "outputy", "=", "nn", ".", "functional", ".", "conv2d", "(", "var", ",", "self", ".", "kernely", ",", "bias", "=", "self", ".", "bias", ",", "padding", "=", "1", ",", "groups", "=", "self", ".", "nc", ")", "\n", "eps", "=", "1e-05", "\n", "return", "torch", ".", "sqrt", "(", "outputx", ".", "pow", "(", "2", ")", "+", "outputy", ".", "pow", "(", "2", ")", "+", "eps", ")", ".", "mean", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.losses.EdgeAwareLoss.__call__": [[54, 62], ["torch.functional.interpolate", "torch.functional.interpolate", "torch.functional.interpolate", "losses.EdgeAwareLoss.get_edge", "losses.EdgeAwareLoss.loss", "losses.EdgeAwareLoss.get_edge"], "methods", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.data_utils.get_edge", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.data_utils.get_edge"], ["", "def", "__call__", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "size", "=", "target", ".", "shape", "[", "2", ":", "4", "]", "\n", "input", "=", "nn", ".", "functional", ".", "interpolate", "(", "input", ",", "size", "=", "size", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", "\n", "target_edge", "=", "self", ".", "get_edge", "(", "target", ")", "\n", "if", "self", ".", "loss_type", "==", "'L1'", ":", "\n", "            ", "return", "self", ".", "loss", "(", "self", ".", "get_edge", "(", "input", ")", ",", "target_edge", ")", "\n", "", "elif", "self", ".", "loss_type", "==", "'BCE'", ":", "\n", "            ", "raise", "NotImplemented", "\n", "#target_edge = torch.sign(target_edge - 0.1)", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.losses.DiscreteLoss.__init__": [[70, 76], ["torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "float"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "nbins", ",", "fmax", ")", ":", "\n", "        ", "self", ".", "loss", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "assert", "nbins", "%", "2", "==", "1", ",", "\"nbins should be odd\"", "\n", "self", ".", "nbins", "=", "nbins", "\n", "self", ".", "fmax", "=", "fmax", "\n", "self", ".", "step", "=", "2", "*", "fmax", "/", "float", "(", "nbins", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.losses.DiscreteLoss.tobin": [[77, 81], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor.type", "torch.floor.type", "torch.floor.type"], "methods", ["None"], ["", "def", "tobin", "(", "self", ",", "target", ")", ":", "\n", "        ", "target", "=", "torch", ".", "clamp", "(", "target", ",", "-", "self", ".", "fmax", "+", "1e-3", ",", "self", ".", "fmax", "-", "1e-3", ")", "\n", "quantized_target", "=", "torch", ".", "floor", "(", "(", "target", "+", "self", ".", "fmax", ")", "/", "self", ".", "step", ")", "\n", "return", "quantized_target", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.losses.DiscreteLoss.__call__": [[82, 89], ["losses.DiscreteLoss.tobin", "torch.functional.interpolate", "torch.functional.interpolate", "torch.functional.interpolate", "torch.functional.interpolate.size", "losses.DiscreteLoss.loss", "losses.DiscreteLoss.loss"], "methods", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.losses.WeightedDiscreteLoss.tobin"], ["", "def", "__call__", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "size", "=", "target", ".", "shape", "[", "2", ":", "4", "]", "\n", "if", "input", ".", "shape", "[", "2", "]", "!=", "size", "[", "0", "]", "or", "input", ".", "shape", "[", "3", "]", "!=", "size", "[", "1", "]", ":", "\n", "            ", "input", "=", "nn", ".", "functional", ".", "interpolate", "(", "input", ",", "size", "=", "size", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", "\n", "", "target", "=", "self", ".", "tobin", "(", "target", ")", "\n", "assert", "input", ".", "size", "(", "1", ")", "==", "self", ".", "nbins", "*", "2", "\n", "return", "self", ".", "loss", "(", "input", "[", ":", ",", ":", "self", ".", "nbins", ",", "...", "]", ",", "target", "[", ":", ",", "0", ",", "...", "]", ")", "+", "self", ".", "loss", "(", "input", "[", ":", ",", "self", ".", "nbins", ":", ",", "...", "]", ",", "target", "[", ":", ",", "1", ",", "...", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.losses.MultiDiscreteLoss.__init__": [[91, 99], ["torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "float"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "nbins", "=", "19", ",", "fmax", "=", "47.5", ",", "reduction", "=", "'mean'", ",", "xy_weight", "=", "(", "1.", ",", "1.", ")", ",", "quantize_strategy", "=", "'linear'", ")", ":", "\n", "        ", "self", ".", "loss", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "reduction", ")", "\n", "assert", "nbins", "%", "2", "==", "1", ",", "\"nbins should be odd\"", "\n", "self", ".", "nbins", "=", "nbins", "\n", "self", ".", "fmax", "=", "fmax", "\n", "self", ".", "step", "=", "2", "*", "fmax", "/", "float", "(", "nbins", ")", "\n", "self", ".", "x_weight", ",", "self", ".", "y_weight", "=", "xy_weight", "\n", "self", ".", "quantize_strategy", "=", "quantize_strategy", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.losses.MultiDiscreteLoss.tobin": [[100, 110], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp.clone.type", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.clamp.clone", "torch.clamp.clone", "torch.clamp.clone", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["None"], ["", "def", "tobin", "(", "self", ",", "target", ")", ":", "\n", "        ", "target", "=", "torch", ".", "clamp", "(", "target", ",", "-", "self", ".", "fmax", "+", "1e-3", ",", "self", ".", "fmax", "-", "1e-3", ")", "\n", "if", "self", ".", "quantize_strategy", "==", "\"linear\"", ":", "\n", "            ", "quantized_target", "=", "torch", ".", "floor", "(", "(", "target", "+", "self", ".", "fmax", ")", "/", "self", ".", "step", ")", "\n", "", "elif", "self", ".", "quantize_strategy", "==", "\"quadratic\"", ":", "\n", "            ", "ind", "=", "target", ".", "data", ">", "0", "\n", "quantized_target", "=", "target", ".", "clone", "(", ")", "\n", "quantized_target", "[", "ind", "]", "=", "torch", ".", "floor", "(", "self", ".", "nbins", "*", "torch", ".", "sqrt", "(", "target", "[", "ind", "]", "/", "(", "4", "*", "self", ".", "fmax", ")", ")", "+", "self", ".", "nbins", "/", "2.", ")", "\n", "quantized_target", "[", "~", "ind", "]", "=", "torch", ".", "floor", "(", "-", "self", ".", "nbins", "*", "torch", ".", "sqrt", "(", "-", "target", "[", "~", "ind", "]", "/", "(", "4", "*", "self", ".", "fmax", ")", ")", "+", "self", ".", "nbins", "/", "2.", ")", "\n", "", "return", "quantized_target", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.losses.MultiDiscreteLoss.__call__": [[111, 120], ["losses.MultiDiscreteLoss.tobin", "isinstance", "torch.functional.interpolate", "torch.functional.interpolate", "torch.functional.interpolate", "torch.functional.interpolate", "torch.functional.interpolate", "torch.functional.interpolate", "sum", "float", "len", "losses.MultiDiscreteLoss.loss", "losses.MultiDiscreteLoss.loss", "range", "losses.MultiDiscreteLoss.loss", "losses.MultiDiscreteLoss.loss", "len"], "methods", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.losses.WeightedDiscreteLoss.tobin"], ["", "def", "__call__", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "size", "=", "target", ".", "shape", "[", "2", ":", "4", "]", "\n", "target", "=", "self", ".", "tobin", "(", "target", ")", "\n", "if", "isinstance", "(", "input", ",", "list", ")", ":", "\n", "            ", "input", "=", "[", "nn", ".", "functional", ".", "interpolate", "(", "ip", ",", "size", "=", "size", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", "for", "ip", "in", "input", "]", "\n", "return", "sum", "(", "[", "self", ".", "x_weight", "*", "self", ".", "loss", "(", "input", "[", "k", "]", "[", ":", ",", ":", "self", ".", "nbins", ",", "...", "]", ",", "target", "[", ":", ",", "0", ",", "...", "]", ")", "+", "self", ".", "y_weight", "*", "self", ".", "loss", "(", "input", "[", "k", "]", "[", ":", ",", "self", ".", "nbins", ":", ",", "...", "]", ",", "target", "[", ":", ",", "1", ",", "...", "]", ")", "for", "k", "in", "range", "(", "len", "(", "input", ")", ")", "]", ")", "/", "float", "(", "len", "(", "input", ")", ")", "\n", "", "else", ":", "\n", "            ", "input", "=", "nn", ".", "functional", ".", "interpolate", "(", "input", ",", "size", "=", "size", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", "\n", "return", "self", ".", "x_weight", "*", "self", ".", "loss", "(", "input", "[", ":", ",", ":", "self", ".", "nbins", ",", "...", "]", ",", "target", "[", ":", ",", "0", ",", "...", "]", ")", "+", "self", ".", "y_weight", "*", "self", ".", "loss", "(", "input", "[", ":", ",", "self", ".", "nbins", ":", ",", "...", "]", ",", "target", "[", ":", ",", "1", ",", "...", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.losses.MultiL1Loss.__init__": [[122, 124], ["torch.SmoothL1Loss", "torch.SmoothL1Loss", "torch.SmoothL1Loss"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "self", ".", "loss", "=", "nn", ".", "SmoothL1Loss", "(", "reduction", "=", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.losses.MultiL1Loss.__call__": [[125, 133], ["isinstance", "torch.functional.interpolate", "torch.functional.interpolate", "torch.functional.interpolate", "losses.MultiL1Loss.loss", "torch.functional.interpolate", "torch.functional.interpolate", "torch.functional.interpolate", "sum", "float", "len", "losses.MultiL1Loss.loss", "range", "len"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "size", "=", "target", ".", "shape", "[", "2", ":", "4", "]", "\n", "if", "isinstance", "(", "input", ",", "list", ")", ":", "\n", "            ", "input", "=", "[", "nn", ".", "functional", ".", "interpolate", "(", "ip", ",", "size", "=", "size", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", "for", "ip", "in", "input", "]", "\n", "return", "sum", "(", "[", "self", ".", "loss", "(", "input", "[", "k", "]", ",", "target", ")", "for", "k", "in", "range", "(", "len", "(", "input", ")", ")", "]", ")", "/", "float", "(", "len", "(", "input", ")", ")", "\n", "", "else", ":", "\n", "            ", "input", "=", "nn", ".", "functional", ".", "interpolate", "(", "input", ",", "size", "=", "size", ",", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", "\n", "return", "self", ".", "loss", "(", "input", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.losses.MultiMSELoss.__init__": [[135, 137], ["torch.MSELoss", "torch.MSELoss", "torch.MSELoss"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "loss", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.losses.MultiMSELoss.__call__": [[138, 143], ["zip", "losses.MultiMSELoss.loss"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "predicts", ",", "targets", ")", ":", "\n", "        ", "loss", "=", "0", "\n", "for", "predict", ",", "target", "in", "zip", "(", "predicts", ",", "targets", ")", ":", "\n", "            ", "loss", "+=", "self", ".", "loss", "(", "predict", ",", "target", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.losses.JointDiscreteLoss.__init__": [[145, 152], ["torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "float"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "nbins", "=", "19", ",", "fmax", "=", "47.5", ",", "reduction", "=", "'mean'", ",", "quantize_strategy", "=", "'linear'", ")", ":", "\n", "        ", "self", ".", "loss", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "reduction", ")", "\n", "assert", "nbins", "%", "2", "==", "1", ",", "\"nbins should be odd\"", "\n", "self", ".", "nbins", "=", "nbins", "\n", "self", ".", "fmax", "=", "fmax", "\n", "self", ".", "step", "=", "2", "*", "fmax", "/", "float", "(", "nbins", ")", "\n", "self", ".", "quantize_strategy", "=", "quantize_strategy", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.losses.JointDiscreteLoss.tobin": [[153, 166], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "joint_target.type", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.clamp.clone", "torch.clamp.clone", "torch.clamp.clone", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "Exception", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["None"], ["", "def", "tobin", "(", "self", ",", "target", ")", ":", "\n", "        ", "target", "=", "torch", ".", "clamp", "(", "target", ",", "-", "self", ".", "fmax", "+", "1e-3", ",", "self", ".", "fmax", "-", "1e-3", ")", "\n", "if", "self", ".", "quantize_strategy", "==", "\"linear\"", ":", "\n", "            ", "quantized_target", "=", "torch", ".", "floor", "(", "(", "target", "+", "self", ".", "fmax", ")", "/", "self", ".", "step", ")", "\n", "", "elif", "self", ".", "quantize_strategy", "==", "\"quadratic\"", ":", "\n", "            ", "ind", "=", "target", ".", "data", ">", "0", "\n", "quantized_target", "=", "target", ".", "clone", "(", ")", "\n", "quantized_target", "[", "ind", "]", "=", "torch", ".", "floor", "(", "self", ".", "nbins", "*", "torch", ".", "sqrt", "(", "target", "[", "ind", "]", "/", "(", "4", "*", "self", ".", "fmax", ")", ")", "+", "self", ".", "nbins", "/", "2.", ")", "\n", "quantized_target", "[", "~", "ind", "]", "=", "torch", ".", "floor", "(", "-", "self", ".", "nbins", "*", "torch", ".", "sqrt", "(", "-", "target", "[", "~", "ind", "]", "/", "(", "4", "*", "self", ".", "fmax", ")", ")", "+", "self", ".", "nbins", "/", "2.", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"No such quantize strategy: {}\"", ".", "format", "(", "self", ".", "quantize_strategy", ")", ")", "\n", "", "joint_target", "=", "quantized_target", "[", ":", ",", "0", ",", ":", ",", ":", "]", "*", "self", ".", "nbins", "+", "quantized_target", "[", ":", ",", "1", ",", ":", ",", ":", "]", "\n", "return", "joint_target", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.losses.JointDiscreteLoss.__call__": [[167, 171], ["losses.JointDiscreteLoss.tobin", "losses.JointDiscreteLoss.loss", "input.size"], "methods", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.losses.WeightedDiscreteLoss.tobin"], ["", "def", "__call__", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "target", "=", "self", ".", "tobin", "(", "target", ")", "\n", "assert", "input", ".", "size", "(", "1", ")", "==", "self", ".", "nbins", "**", "2", "\n", "return", "self", ".", "loss", "(", "input", ",", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.losses.PolarDiscreteLoss.__init__": [[173, 180], ["torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "abins", "=", "30", ",", "rbins", "=", "20", ",", "fmax", "=", "50.", ",", "reduction", "=", "'mean'", ",", "ar_weight", "=", "(", "1.", ",", "1.", ")", ",", "quantize_strategy", "=", "'linear'", ")", ":", "\n", "        ", "self", ".", "loss", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "reduction", ")", "\n", "self", ".", "fmax", "=", "fmax", "\n", "self", ".", "rbins", "=", "rbins", "\n", "self", ".", "abins", "=", "abins", "\n", "self", ".", "a_weight", ",", "self", ".", "r_weight", "=", "ar_weight", "\n", "self", ".", "quantize_strategy", "=", "quantize_strategy", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.losses.PolarDiscreteLoss.tobin": [[181, 201], ["torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.atan", "torch.atan", "torch.atan", "torch.atan", "torch.atan", "torch.atan", "torch.atan", "torch.atan", "torch.atan", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable.type", "torch.autograd.Variable.type", "torch.autograd.Variable.type", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "Exception", "target.data[].size", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt", "torch.sqrt"], "methods", ["None"], ["", "def", "tobin", "(", "self", ",", "target", ")", ":", "\n", "        ", "indxneg", "=", "target", ".", "data", "[", ":", ",", "0", ",", ":", ",", ":", "]", "<", "0", "\n", "eps", "=", "torch", ".", "zeros", "(", "target", ".", "data", "[", ":", ",", "0", ",", ":", ",", ":", "]", ".", "size", "(", ")", ")", ".", "cuda", "(", ")", "\n", "epsind", "=", "target", ".", "data", "[", ":", ",", "0", ",", ":", ",", ":", "]", "==", "0", "\n", "eps", "[", "epsind", "]", "+=", "1e-5", "\n", "angle", "=", "torch", ".", "atan", "(", "target", ".", "data", "[", ":", ",", "1", ",", ":", ",", ":", "]", "/", "(", "target", ".", "data", "[", ":", ",", "0", ",", ":", ",", ":", "]", "+", "eps", ")", ")", "\n", "angle", "[", "indxneg", "]", "+=", "np", ".", "pi", "\n", "angle", "+=", "np", ".", "pi", "/", "2", "# 0 to 2pi", "\n", "angle", "=", "torch", ".", "clamp", "(", "angle", ",", "0", ",", "2", "*", "np", ".", "pi", "-", "1e-3", ")", "\n", "radius", "=", "torch", ".", "sqrt", "(", "target", ".", "data", "[", ":", ",", "0", ",", ":", ",", ":", "]", "**", "2", "+", "target", ".", "data", "[", ":", ",", "1", ",", ":", ",", ":", "]", "**", "2", ")", "\n", "radius", "=", "torch", ".", "clamp", "(", "radius", ",", "0", ",", "self", ".", "fmax", "-", "1e-3", ")", "\n", "quantized_angle", "=", "torch", ".", "floor", "(", "self", ".", "abins", "*", "angle", "/", "(", "2", "*", "np", ".", "pi", ")", ")", "\n", "if", "self", ".", "quantize_strategy", "==", "'linear'", ":", "\n", "            ", "quantized_radius", "=", "torch", ".", "floor", "(", "self", ".", "rbins", "*", "radius", "/", "self", ".", "fmax", ")", "\n", "", "elif", "self", ".", "quantize_strategy", "==", "'quadratic'", ":", "\n", "            ", "quantized_radius", "=", "torch", ".", "floor", "(", "self", ".", "rbins", "*", "torch", ".", "sqrt", "(", "radius", "/", "self", ".", "fmax", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"No such quantize strategy: {}\"", ".", "format", "(", "self", ".", "quantize_strategy", ")", ")", "\n", "", "quantized_target", "=", "torch", ".", "autograd", ".", "Variable", "(", "torch", ".", "cat", "(", "[", "torch", ".", "unsqueeze", "(", "quantized_angle", ",", "1", ")", ",", "torch", ".", "unsqueeze", "(", "quantized_radius", ",", "1", ")", "]", ",", "dim", "=", "1", ")", ")", "\n", "return", "quantized_target", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.losses.PolarDiscreteLoss.__call__": [[202, 206], ["losses.PolarDiscreteLoss.tobin", "losses.PolarDiscreteLoss.loss", "losses.PolarDiscreteLoss.loss"], "methods", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.losses.WeightedDiscreteLoss.tobin"], ["", "def", "__call__", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "target", "=", "self", ".", "tobin", "(", "target", ")", "\n", "assert", "(", "target", ">=", "0", ")", ".", "all", "(", ")", "and", "(", "target", "[", ":", ",", "0", ",", ":", ",", ":", "]", "<", "self", ".", "abins", ")", ".", "all", "(", ")", "and", "(", "target", "[", ":", ",", "1", ",", ":", ",", ":", "]", "<", "self", ".", "rbins", ")", ".", "all", "(", ")", "\n", "return", "self", ".", "a_weight", "*", "self", ".", "loss", "(", "input", "[", ":", ",", ":", "self", ".", "abins", ",", "...", "]", ",", "target", "[", ":", ",", "0", ",", "...", "]", ")", "+", "self", ".", "r_weight", "*", "self", ".", "loss", "(", "input", "[", ":", ",", "self", ".", "abins", ":", ",", "...", "]", ",", "target", "[", ":", ",", "1", ",", "...", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.losses.WeightedDiscreteLoss.__init__": [[208, 217], ["losses.CrossEntropy2d", "numpy.ones", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "torch.from_numpy().cuda", "float", "int", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "nbins", "=", "19", ",", "fmax", "=", "47.5", ",", "reduction", "=", "'mean'", ")", ":", "\n", "        ", "self", ".", "loss", "=", "CrossEntropy2d", "(", "reduction", "=", "reduction", ")", "\n", "assert", "nbins", "%", "2", "==", "1", ",", "\"nbins should be odd\"", "\n", "self", ".", "nbins", "=", "nbins", "\n", "self", ".", "fmax", "=", "fmax", "\n", "self", ".", "step", "=", "2", "*", "fmax", "/", "float", "(", "nbins", ")", "\n", "self", ".", "weight", "=", "np", ".", "ones", "(", "(", "nbins", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "self", ".", "weight", "[", "int", "(", "self", ".", "fmax", "/", "self", ".", "step", ")", "]", "=", "0.01", "\n", "self", ".", "weight", "=", "torch", ".", "from_numpy", "(", "self", ".", "weight", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.losses.WeightedDiscreteLoss.tobin": [[218, 221], ["torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.floor().type", "torch.floor().type", "torch.floor().type", "torch.floor().type", "torch.floor().type", "torch.floor().type", "torch.floor().type", "torch.floor().type", "torch.floor().type", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor", "torch.floor"], "methods", ["None"], ["", "def", "tobin", "(", "self", ",", "target", ")", ":", "\n", "        ", "target", "=", "torch", ".", "clamp", "(", "target", ",", "-", "self", ".", "fmax", "+", "1e-3", ",", "self", ".", "fmax", "-", "1e-3", ")", "\n", "return", "torch", ".", "floor", "(", "(", "target", "+", "self", ".", "fmax", ")", "/", "self", ".", "step", ")", ".", "type", "(", "torch", ".", "cuda", ".", "LongTensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.losses.WeightedDiscreteLoss.__call__": [[222, 226], ["losses.WeightedDiscreteLoss.tobin", "losses.WeightedDiscreteLoss.loss", "losses.WeightedDiscreteLoss.loss"], "methods", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.losses.WeightedDiscreteLoss.tobin"], ["", "def", "__call__", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "target", "=", "self", ".", "tobin", "(", "target", ")", "\n", "assert", "(", "target", ">=", "0", ")", ".", "all", "(", ")", "and", "(", "target", "<", "self", ".", "nbins", ")", ".", "all", "(", ")", "\n", "return", "self", ".", "loss", "(", "input", "[", ":", ",", ":", "self", ".", "nbins", ",", "...", "]", ",", "target", "[", ":", ",", "0", ",", "...", "]", ")", "+", "self", ".", "loss", "(", "input", "[", ":", ",", "self", ".", "nbins", ":", ",", "...", "]", ",", "target", "[", ":", ",", "1", ",", "...", "]", ",", "self", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.losses.CrossEntropy2d.__init__": [[229, 233], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.backbone.alexnet.AlexNetBN_FCN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "reduction", "=", "'mean'", ",", "ignore_label", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "CrossEntropy2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ignore_label", "=", "ignore_label", "\n", "self", ".", "reduction", "=", "reduction", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.losses.CrossEntropy2d.forward": [[234, 255], ["predict[].view.size", "predict[].view.transpose().transpose().contiguous", "predict[].view", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "predict[].view.dim", "target.dim", "predict[].view.size", "target.size", "predict[].view.size", "target.size", "predict[].view.size", "target.size", "predict[].view.size", "target.size", "predict[].view.size", "target.size", "predict[].view.size", "target.size", "predict[].view.transpose().transpose", "predict[].view.transpose", "target_mask.view().repeat", "target_mask.view"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "predict", ",", "target", ",", "weight", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n            Args:\n                predict:(n, c, h, w)\n                target:(n, h, w)\n                weight (Tensor, optional): a manual rescaling weight given to each class.\n                                           If given, has to be a Tensor of size \"nclasses\"\n        \"\"\"", "\n", "assert", "not", "target", ".", "requires_grad", "\n", "assert", "predict", ".", "dim", "(", ")", "==", "4", "\n", "assert", "target", ".", "dim", "(", ")", "==", "3", "\n", "assert", "predict", ".", "size", "(", "0", ")", "==", "target", ".", "size", "(", "0", ")", ",", "\"{0} vs {1} \"", ".", "format", "(", "predict", ".", "size", "(", "0", ")", ",", "target", ".", "size", "(", "0", ")", ")", "\n", "assert", "predict", ".", "size", "(", "2", ")", "==", "target", ".", "size", "(", "1", ")", ",", "\"{0} vs {1} \"", ".", "format", "(", "predict", ".", "size", "(", "2", ")", ",", "target", ".", "size", "(", "1", ")", ")", "\n", "assert", "predict", ".", "size", "(", "3", ")", "==", "target", ".", "size", "(", "2", ")", ",", "\"{0} vs {1} \"", ".", "format", "(", "predict", ".", "size", "(", "3", ")", ",", "target", ".", "size", "(", "3", ")", ")", "\n", "n", ",", "c", ",", "h", ",", "w", "=", "predict", ".", "size", "(", ")", "\n", "target_mask", "=", "(", "target", ">=", "0", ")", "*", "(", "target", "!=", "self", ".", "ignore_label", ")", "\n", "target", "=", "target", "[", "target_mask", "]", "\n", "predict", "=", "predict", ".", "transpose", "(", "1", ",", "2", ")", ".", "transpose", "(", "2", ",", "3", ")", ".", "contiguous", "(", ")", "\n", "predict", "=", "predict", "[", "target_mask", ".", "view", "(", "n", ",", "h", ",", "w", ",", "1", ")", ".", "repeat", "(", "1", ",", "1", ",", "1", ",", "c", ")", "]", ".", "view", "(", "-", "1", ",", "c", ")", "\n", "loss", "=", "F", ".", "cross_entropy", "(", "predict", ",", "target", ",", "weight", "=", "weight", ",", "reduction", "=", "self", ".", "reduction", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.losses.CrossPixelSimilarityLoss.__init__": [[322, 327], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sigma", "=", "0.01", ",", "sampling_size", "=", "512", ")", ":", "\n", "        ", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "sampling_size", "=", "sampling_size", "\n", "self", ".", "epsilon", "=", "1.0e-15", "\n", "self", ".", "embed_norm", "=", "True", "# loss does not decrease no matter it is true or false.", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.losses.CrossPixelSimilarityLoss.__call__": [[328, 379], ["flows.view", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "embeddings.view", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "flows.size", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.unsqueeze().cuda", "torch.unsqueeze().cuda", "torch.unsqueeze().cuda", "torch.unsqueeze().cuda", "torch.unsqueeze().cuda", "torch.unsqueeze().cuda", "torch.unsqueeze().cuda", "torch.unsqueeze().cuda", "torch.unsqueeze().cuda", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "math.log", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.index_select.permute", "torch.index_select.permute", "torch.index_select.permute", "torch.norm.permute", "torch.norm.permute", "torch.norm.permute", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.unsqueeze().permute", "torch.unsqueeze().permute", "torch.unsqueeze().permute", "torch.unsqueeze().permute", "torch.unsqueeze().permute", "torch.unsqueeze().permute", "torch.unsqueeze().permute", "torch.unsqueeze().permute", "torch.unsqueeze().permute", "torch.unsqueeze().permute", "torch.unsqueeze().permute", "torch.unsqueeze().permute", "torch.unsqueeze().permute", "torch.unsqueeze().permute", "torch.unsqueeze().permute", "torch.unsqueeze().permute", "torch.unsqueeze().permute", "torch.unsqueeze().permute", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "random.sample", "range"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "embeddings", ",", "flows", ")", ":", "\n", "        ", "'''\n            embedding: Variable Nx256xHxW (not hyper-column)\n            flows: Variable Nx2xHxW\n        '''", "\n", "assert", "flows", ".", "size", "(", "1", ")", "==", "2", "\n", "\n", "# flow normalization", "\n", "positive_mask", "=", "(", "flows", ">", "0", ")", "\n", "flows", "=", "-", "torch", ".", "clamp", "(", "torch", ".", "log", "(", "torch", ".", "abs", "(", "flows", ")", "+", "1", ")", "/", "math", ".", "log", "(", "50.", "+", "1", ")", ",", "max", "=", "1.", ")", "\n", "flows", "[", "positive_mask", "]", "=", "-", "flows", "[", "positive_mask", "]", "\n", "\n", "# embedding normalization", "\n", "if", "self", ".", "embed_norm", ":", "\n", "            ", "embeddings", "/=", "torch", ".", "norm", "(", "embeddings", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "# Spatially random sampling (512 samples)", "\n", "", "flows_flatten", "=", "flows", ".", "view", "(", "flows", ".", "shape", "[", "0", "]", ",", "2", ",", "-", "1", ")", "\n", "random_locations", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "random", ".", "sample", "(", "range", "(", "flows_flatten", ".", "shape", "[", "2", "]", ")", ",", "self", ".", "sampling_size", ")", ")", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", ")", "\n", "flows_sample", "=", "torch", ".", "index_select", "(", "flows_flatten", ",", "2", ",", "random_locations", ")", "\n", "\n", "# K_f", "\n", "k_f", "=", "self", ".", "epsilon", "+", "torch", ".", "norm", "(", "torch", ".", "unsqueeze", "(", "flows_sample", ",", "dim", "=", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", "-", "\n", "torch", ".", "unsqueeze", "(", "flows_sample", ",", "dim", "=", "-", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ",", "p", "=", "2", ",", "dim", "=", "3", ",", "\n", "keepdim", "=", "False", ")", "**", "2", "\n", "exp_k_f", "=", "torch", ".", "exp", "(", "-", "k_f", "/", "2.", "/", "self", ".", "sigma", ")", "\n", "\n", "\n", "# mask", "\n", "eye", "=", "Variable", "(", "torch", ".", "unsqueeze", "(", "torch", ".", "eye", "(", "k_f", ".", "shape", "[", "1", "]", ")", ",", "dim", "=", "0", ")", ".", "cuda", "(", ")", ")", "\n", "mask", "=", "torch", ".", "ones_like", "(", "exp_k_f", ")", "-", "eye", "\n", "\n", "# S_f", "\n", "masked_exp_k_f", "=", "torch", ".", "mul", "(", "mask", ",", "exp_k_f", ")", "+", "eye", "\n", "s_f", "=", "masked_exp_k_f", "/", "torch", ".", "sum", "(", "masked_exp_k_f", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "# K_theta", "\n", "embeddings_flatten", "=", "embeddings", ".", "view", "(", "embeddings", ".", "shape", "[", "0", "]", ",", "embeddings", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", "embeddings_sample", "=", "torch", ".", "index_select", "(", "embeddings_flatten", ",", "2", ",", "random_locations", ")", "\n", "embeddings_sample_norm", "=", "torch", ".", "norm", "(", "embeddings_sample", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "k_theta", "=", "0.25", "*", "(", "torch", ".", "matmul", "(", "embeddings_sample", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ",", "embeddings_sample", ")", ")", "/", "(", "self", ".", "epsilon", "+", "torch", ".", "matmul", "(", "embeddings_sample_norm", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ",", "embeddings_sample_norm", ")", ")", "\n", "exp_k_theta", "=", "torch", ".", "exp", "(", "k_theta", ")", "\n", "\n", "# S_theta", "\n", "masked_exp_k_theta", "=", "torch", ".", "mul", "(", "mask", ",", "exp_k_theta", ")", "+", "eye", "\n", "s_theta", "=", "masked_exp_k_theta", "/", "torch", ".", "sum", "(", "masked_exp_k_theta", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "# loss", "\n", "loss", "=", "-", "torch", ".", "mean", "(", "torch", ".", "mul", "(", "s_f", ",", "torch", ".", "log", "(", "s_theta", ")", ")", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.losses.CrossPixelSimilarityFullLoss.__init__": [[385, 389], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "sigma", "=", "0.01", ")", ":", "\n", "        ", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "epsilon", "=", "1.0e-15", "\n", "self", ".", "embed_norm", "=", "True", "# loss does not decrease no matter it is true or false.", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.losses.CrossPixelSimilarityFullLoss.__call__": [[390, 446], ["torch.functional.avg_pool2d", "torch.functional.avg_pool2d", "torch.functional.avg_pool2d", "torch.functional.avg_pool2d.view", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "embeddings.view", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.functional.avg_pool2d.size", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.unsqueeze().cuda", "torch.unsqueeze().cuda", "torch.unsqueeze().cuda", "torch.unsqueeze().cuda", "torch.unsqueeze().cuda", "torch.unsqueeze().cuda", "torch.unsqueeze().cuda", "torch.unsqueeze().cuda", "torch.unsqueeze().cuda", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "math.log", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "embeddings.view.permute", "torch.norm.permute", "torch.norm.permute", "torch.norm.permute", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.unsqueeze().permute", "torch.unsqueeze().permute", "torch.unsqueeze().permute", "torch.unsqueeze().permute", "torch.unsqueeze().permute", "torch.unsqueeze().permute", "torch.unsqueeze().permute", "torch.unsqueeze().permute", "torch.unsqueeze().permute", "torch.unsqueeze().permute", "torch.unsqueeze().permute", "torch.unsqueeze().permute", "torch.unsqueeze().permute", "torch.unsqueeze().permute", "torch.unsqueeze().permute", "torch.unsqueeze().permute", "torch.unsqueeze().permute", "torch.unsqueeze().permute", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "embeddings", ",", "flows", ")", ":", "\n", "        ", "'''\n            embedding: Variable Nx256xHxW (not hyper-column)\n            flows: Variable Nx2xHxW\n        '''", "\n", "assert", "flows", ".", "size", "(", "1", ")", "==", "2", "\n", "\n", "# downsample flow", "\n", "factor", "=", "flows", ".", "shape", "[", "2", "]", "//", "embeddings", ".", "shape", "[", "2", "]", "\n", "flows", "=", "nn", ".", "functional", ".", "avg_pool2d", "(", "flows", ",", "factor", ",", "factor", ")", "\n", "assert", "flows", ".", "shape", "[", "2", "]", "==", "embeddings", ".", "shape", "[", "2", "]", "\n", "\n", "# flow normalization", "\n", "positive_mask", "=", "(", "flows", ">", "0", ")", "\n", "flows", "=", "-", "torch", ".", "clamp", "(", "torch", ".", "log", "(", "torch", ".", "abs", "(", "flows", ")", "+", "1", ")", "/", "math", ".", "log", "(", "50.", "+", "1", ")", ",", "max", "=", "1.", ")", "\n", "flows", "[", "positive_mask", "]", "=", "-", "flows", "[", "positive_mask", "]", "\n", "\n", "# embedding normalization", "\n", "if", "self", ".", "embed_norm", ":", "\n", "            ", "embeddings", "/=", "torch", ".", "norm", "(", "embeddings", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "# Spatially random sampling (512 samples)", "\n", "", "flows_flatten", "=", "flows", ".", "view", "(", "flows", ".", "shape", "[", "0", "]", ",", "2", ",", "-", "1", ")", "\n", "#random_locations = Variable(torch.from_numpy(np.array(random.sample(range(flows_flatten.shape[2]), self.sampling_size))).long().cuda())", "\n", "#flows_sample = torch.index_select(flows_flatten, 2, random_locations)", "\n", "\n", "# K_f", "\n", "k_f", "=", "self", ".", "epsilon", "+", "torch", ".", "norm", "(", "torch", ".", "unsqueeze", "(", "flows_flatten", ",", "dim", "=", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", "-", "\n", "torch", ".", "unsqueeze", "(", "flows_flatten", ",", "dim", "=", "-", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ",", "p", "=", "2", ",", "dim", "=", "3", ",", "\n", "keepdim", "=", "False", ")", "**", "2", "\n", "exp_k_f", "=", "torch", ".", "exp", "(", "-", "k_f", "/", "2.", "/", "self", ".", "sigma", ")", "\n", "\n", "\n", "# mask", "\n", "eye", "=", "Variable", "(", "torch", ".", "unsqueeze", "(", "torch", ".", "eye", "(", "k_f", ".", "shape", "[", "1", "]", ")", ",", "dim", "=", "0", ")", ".", "cuda", "(", ")", ")", "\n", "mask", "=", "torch", ".", "ones_like", "(", "exp_k_f", ")", "-", "eye", "\n", "\n", "# S_f", "\n", "masked_exp_k_f", "=", "torch", ".", "mul", "(", "mask", ",", "exp_k_f", ")", "+", "eye", "\n", "s_f", "=", "masked_exp_k_f", "/", "torch", ".", "sum", "(", "masked_exp_k_f", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "# K_theta", "\n", "embeddings_flatten", "=", "embeddings", ".", "view", "(", "embeddings", ".", "shape", "[", "0", "]", ",", "embeddings", ".", "shape", "[", "1", "]", ",", "-", "1", ")", "\n", "#embeddings_sample = torch.index_select(embeddings_flatten, 2, random_locations)", "\n", "embeddings_flatten_norm", "=", "torch", ".", "norm", "(", "embeddings_flatten", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "k_theta", "=", "0.25", "*", "(", "torch", ".", "matmul", "(", "embeddings_flatten", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ",", "embeddings_flatten", ")", ")", "/", "(", "self", ".", "epsilon", "+", "torch", ".", "matmul", "(", "embeddings_flatten_norm", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ",", "embeddings_flatten_norm", ")", ")", "\n", "exp_k_theta", "=", "torch", ".", "exp", "(", "k_theta", ")", "\n", "\n", "# S_theta", "\n", "masked_exp_k_theta", "=", "torch", ".", "mul", "(", "mask", ",", "exp_k_theta", ")", "+", "eye", "\n", "s_theta", "=", "masked_exp_k_theta", "/", "torch", ".", "sum", "(", "masked_exp_k_theta", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "# loss", "\n", "loss", "=", "-", "torch", ".", "mean", "(", "torch", ".", "mul", "(", "s_f", ",", "torch", ".", "log", "(", "s_theta", ")", ")", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.losses.CrossPixelSimilarityColumnLoss.__init__": [[459, 469], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.backbone.alexnet.AlexNetBN_FCN.__init__"], ["def", "__init__", "(", "self", ",", "sigma", "=", "0.0036", ",", "sampling_size", "=", "512", ")", ":", "\n", "        ", "super", "(", "CrossPixelSimilarityColumnLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "sampling_size", "=", "sampling_size", "\n", "self", ".", "epsilon", "=", "1.0e-15", "\n", "self", ".", "embed_norm", "=", "True", "# loss does not decrease no matter it is true or false.", "\n", "self", ".", "mlp", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "96", "+", "96", "+", "384", "+", "256", "+", "4096", ",", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "256", ",", "16", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.losses.CrossPixelSimilarityColumnLoss.forward": [[470, 519], ["flows.view", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.index_select", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "losses.get_column", "losses.CrossPixelSimilarityColumnLoss.mlp", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "flows.size", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.from_numpy().long().cuda", "torch.unsqueeze().cuda", "torch.unsqueeze().cuda", "torch.unsqueeze().cuda", "torch.unsqueeze().cuda", "torch.unsqueeze().cuda", "torch.unsqueeze().cuda", "torch.unsqueeze().cuda", "torch.unsqueeze().cuda", "torch.unsqueeze().cuda", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "math.exp", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "math.log", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.from_numpy().long", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "losses.CrossPixelSimilarityColumnLoss.permute", "torch.norm.permute", "torch.norm.permute", "torch.norm.permute", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.unsqueeze().permute", "torch.unsqueeze().permute", "torch.unsqueeze().permute", "torch.unsqueeze().permute", "torch.unsqueeze().permute", "torch.unsqueeze().permute", "torch.unsqueeze().permute", "torch.unsqueeze().permute", "torch.unsqueeze().permute", "torch.unsqueeze().permute", "torch.unsqueeze().permute", "torch.unsqueeze().permute", "torch.unsqueeze().permute", "torch.unsqueeze().permute", "torch.unsqueeze().permute", "torch.unsqueeze().permute", "torch.unsqueeze().permute", "torch.unsqueeze().permute", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "numpy.array", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "random.sample", "range"], "methods", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.losses.get_column"], ["", "def", "forward", "(", "self", ",", "feats", ",", "flows", ")", ":", "\n", "        ", "'''\n            embedding: Variable Nx256xHxW (not hyper-column)\n            flows: Variable Nx2xHxW\n        '''", "\n", "assert", "flows", ".", "size", "(", "1", ")", "==", "2", "\n", "\n", "# flow normalization", "\n", "positive_mask", "=", "(", "flows", ">", "0", ")", "\n", "flows", "=", "-", "torch", ".", "clamp", "(", "torch", ".", "log", "(", "torch", ".", "abs", "(", "flows", ")", "+", "1", ")", "/", "math", ".", "log", "(", "50.", "+", "1", ")", ",", "max", "=", "1.", ")", "\n", "flows", "[", "positive_mask", "]", "=", "-", "flows", "[", "positive_mask", "]", "\n", "\n", "# Spatially random sampling (512 samples)", "\n", "flows_flatten", "=", "flows", ".", "view", "(", "flows", ".", "shape", "[", "0", "]", ",", "2", ",", "-", "1", ")", "\n", "random_locations", "=", "Variable", "(", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "random", ".", "sample", "(", "range", "(", "flows_flatten", ".", "shape", "[", "2", "]", ")", ",", "self", ".", "sampling_size", ")", ")", ")", ".", "long", "(", ")", ".", "cuda", "(", ")", ")", "\n", "flows_sample", "=", "torch", ".", "index_select", "(", "flows_flatten", ",", "2", ",", "random_locations", ")", "\n", "\n", "# K_f", "\n", "k_f", "=", "self", ".", "epsilon", "+", "torch", ".", "norm", "(", "torch", ".", "unsqueeze", "(", "flows_sample", ",", "dim", "=", "-", "1", ")", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", "-", "\n", "torch", ".", "unsqueeze", "(", "flows_sample", ",", "dim", "=", "-", "1", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", ",", "p", "=", "2", ",", "dim", "=", "3", ",", "\n", "keepdim", "=", "False", ")", "**", "2", "\n", "exp_k_f", "=", "torch", ".", "exp", "(", "-", "k_f", "/", "2.", "/", "self", ".", "sigma", ")", "\n", "\n", "\n", "# mask", "\n", "eye", "=", "Variable", "(", "torch", ".", "unsqueeze", "(", "torch", ".", "eye", "(", "k_f", ".", "shape", "[", "1", "]", ")", ",", "dim", "=", "0", ")", ".", "cuda", "(", ")", ")", "\n", "mask", "=", "torch", ".", "ones_like", "(", "exp_k_f", ")", "-", "eye", "\n", "\n", "# S_f", "\n", "masked_exp_k_f", "=", "torch", ".", "mul", "(", "mask", ",", "exp_k_f", ")", "+", "eye", "\n", "s_f", "=", "masked_exp_k_f", "/", "torch", ".", "sum", "(", "masked_exp_k_f", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "\n", "# column", "\n", "column", "=", "get_column", "(", "feats", ",", "random_locations", ",", "flows", ".", "shape", "[", "2", "]", ")", "\n", "embedding", "=", "self", ".", "mlp", "(", "column", ")", "\n", "# K_theta", "\n", "embedding_norm", "=", "torch", ".", "norm", "(", "embedding", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "k_theta", "=", "0.25", "*", "(", "torch", ".", "matmul", "(", "embedding", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ",", "embedding", ")", ")", "/", "(", "self", ".", "epsilon", "+", "torch", ".", "matmul", "(", "embedding_norm", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ",", "embedding_norm", ")", ")", "\n", "exp_k_theta", "=", "torch", ".", "exp", "(", "k_theta", ")", "\n", "\n", "# S_theta", "\n", "masked_exp_k_theta", "=", "torch", ".", "mul", "(", "mask", ",", "exp_k_theta", ")", "+", "math", ".", "exp", "(", "-", "0.75", ")", "*", "eye", "\n", "s_theta", "=", "masked_exp_k_theta", "/", "torch", ".", "sum", "(", "masked_exp_k_theta", ",", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "# loss", "\n", "loss", "=", "-", "torch", ".", "mean", "(", "torch", ".", "mul", "(", "s_f", ",", "torch", ".", "log", "(", "s_theta", ")", ")", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.losses.MultiChannelSoftBinaryCrossEntropy": [[9, 22], ["input.view.view", "target.view.view", "torch.LogSoftmax", "input.view.size", "input.view.size", "input.view.size", "input.view.size", "torch.mean", "torch.mean", "torch.mean", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "nn.LogSoftmax.", "nn.LogSoftmax."], "function", ["None"], ["def", "MultiChannelSoftBinaryCrossEntropy", "(", "input", ",", "target", ",", "reduction", "=", "'mean'", ")", ":", "\n", "    ", "'''\n    input: N x 38 x H x W --> 19N x 2 x H x W\n    target: N x 19 x H x W --> 19N x 1 x H x W\n    '''", "\n", "input", "=", "input", ".", "view", "(", "-", "1", ",", "2", ",", "input", ".", "size", "(", "2", ")", ",", "input", ".", "size", "(", "3", ")", ")", "\n", "target", "=", "target", ".", "view", "(", "-", "1", ",", "1", ",", "input", ".", "size", "(", "2", ")", ",", "input", ".", "size", "(", "3", ")", ")", "\n", "\n", "logsoftmax", "=", "nn", ".", "LogSoftmax", "(", "dim", "=", "1", ")", "\n", "if", "reduction", "==", "'mean'", ":", "\n", "        ", "return", "torch", ".", "mean", "(", "torch", ".", "sum", "(", "-", "target", "*", "logsoftmax", "(", "input", ")", ",", "dim", "=", "1", ")", ")", "\n", "", "else", ":", "\n", "        ", "return", "torch", ".", "sum", "(", "torch", ".", "sum", "(", "-", "target", "*", "logsoftmax", "(", "input", ")", ",", "dim", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.losses.KLD": [[66, 68], ["torch.sum", "torch.sum", "torch.sum", "logvar.exp", "mean.pow"], "function", ["None"], ["", "", "", "def", "KLD", "(", "mean", ",", "logvar", ")", ":", "\n", "    ", "return", "-", "0.5", "*", "torch", ".", "sum", "(", "1", "+", "logvar", "-", "mean", ".", "pow", "(", "2", ")", "-", "logvar", ".", "exp", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.losses.get_column": [[448, 454], ["torch.cat", "torch.cat", "torch.cat", "col.append", "torch.index_select", "torch.index_select", "torch.index_select", "embd.view", "embd.size", "index.float"], "function", ["None"], ["", "", "def", "get_column", "(", "embeddings", ",", "index", ",", "full_size", ")", ":", "\n", "    ", "col", "=", "[", "]", "\n", "for", "embd", "in", "embeddings", ":", "\n", "        ", "ind", "=", "(", "index", ".", "float", "(", ")", "/", "full_size", "*", "embd", ".", "size", "(", "2", ")", ")", ".", "long", "(", ")", "\n", "col", ".", "append", "(", "torch", ".", "index_select", "(", "embd", ".", "view", "(", "embd", ".", "shape", "[", "0", "]", ",", "embd", ".", "shape", "[", "1", "]", ",", "-", "1", ")", ",", "2", ",", "ind", ")", ")", "\n", "", "return", "torch", ".", "cat", "(", "col", ",", "dim", "=", "1", ")", "# N x coldim x sparsenum", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.losses.print_info": [[521, 523], ["print", "var.size", "torch.max().data.cpu", "torch.max().data.cpu", "torch.max().data.cpu", "torch.min().data.cpu", "torch.min().data.cpu", "torch.min().data.cpu", "torch.mean().data.cpu", "torch.mean().data.cpu", "torch.mean().data.cpu", "torch.max", "torch.max", "torch.max", "torch.min", "torch.min", "torch.min", "torch.mean", "torch.mean", "torch.mean"], "function", ["None"], ["", "", "def", "print_info", "(", "name", ",", "var", ")", ":", "\n", "    ", "print", "(", "name", ",", "var", ".", "size", "(", ")", ",", "torch", ".", "max", "(", "var", ")", ".", "data", ".", "cpu", "(", ")", "[", "0", "]", ",", "torch", ".", "min", "(", "var", ")", ".", "data", ".", "cpu", "(", ")", "[", "0", "]", ",", "torch", ".", "mean", "(", "var", ")", ".", "data", ".", "cpu", "(", ")", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.None.losses.MaskL1Loss": [[525, 532], ["input.size", "torch.sum", "torch.sum", "torch.sum", "torch.sum().item", "torch.sum().item", "torch.sum().item", "torch.abs", "torch.abs", "torch.abs", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "MaskL1Loss", "(", "input", ",", "target", ",", "mask", ")", ":", "\n", "    ", "input_size", "=", "input", ".", "size", "(", ")", "\n", "res", "=", "torch", ".", "sum", "(", "torch", ".", "abs", "(", "input", "*", "mask", "-", "target", "*", "mask", ")", ")", "\n", "total", "=", "torch", ".", "sum", "(", "mask", ")", ".", "item", "(", ")", "\n", "if", "total", ">", "0", ":", "\n", "        ", "res", "=", "res", "/", "(", "total", "*", "input_size", "[", "1", "]", ")", "\n", "", "return", "res", "\n", "", ""]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.distributed_utils.DistModule.__init__": [[13, 17], ["torch.nn.Module.__init__", "distributed_utils.broadcast_params"], "methods", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.backbone.alexnet.AlexNetBN_FCN.__init__", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.distributed_utils.broadcast_params"], ["    ", "def", "__init__", "(", "self", ",", "module", ")", ":", "\n", "        ", "super", "(", "DistModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "module", "=", "module", "\n", "broadcast_params", "(", "self", ".", "module", ")", "\n", "", "def", "forward", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.distributed_utils.DistModule.forward": [[17, 19], ["distributed_utils.DistModule.module"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "inputs", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "module", "(", "*", "inputs", ",", "**", "kwargs", ")", "\n", "", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.distributed_utils.DistModule.train": [[19, 22], ["super().train", "distributed_utils.DistModule.module.train"], "methods", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.distributed_utils.DistModule.train", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.distributed_utils.DistModule.train"], ["", "def", "train", "(", "self", ",", "mode", "=", "True", ")", ":", "\n", "        ", "super", "(", "DistModule", ",", "self", ")", ".", "train", "(", "mode", ")", "\n", "self", ".", "module", ".", "train", "(", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.distributed_utils.DistributedSequentialSampler.__init__": [[114, 128], ["int", "torch.get_world_size", "torch.get_world_size", "torch.get_rank", "torch.get_rank", "len", "len", "math.ceil", "list", "list", "range", "range", "len", "len", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "world_size", "=", "None", ",", "rank", "=", "None", ")", ":", "\n", "        ", "if", "world_size", "==", "None", ":", "\n", "            ", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "", "if", "rank", "==", "None", ":", "\n", "            ", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "world_size", "=", "world_size", "\n", "self", ".", "rank", "=", "rank", "\n", "assert", "len", "(", "self", ".", "dataset", ")", ">=", "self", ".", "world_size", ",", "'{} vs {}'", ".", "format", "(", "len", "(", "self", ".", "dataset", ")", ",", "self", ".", "world_size", ")", "\n", "sub_num", "=", "int", "(", "math", ".", "ceil", "(", "len", "(", "self", ".", "dataset", ")", "*", "1.0", "/", "self", ".", "world_size", ")", ")", "\n", "self", ".", "beg", "=", "sub_num", "*", "self", ".", "rank", "\n", "#self.end = min(self.beg+sub_num, len(self.dataset))", "\n", "self", ".", "end", "=", "self", ".", "beg", "+", "sub_num", "\n", "self", ".", "padded_ind", "=", "list", "(", "range", "(", "len", "(", "self", ".", "dataset", ")", ")", ")", "+", "list", "(", "range", "(", "sub_num", "*", "self", ".", "world_size", "-", "len", "(", "self", ".", "dataset", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.distributed_utils.DistributedSequentialSampler.__iter__": [[129, 132], ["iter", "range"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "indices", "=", "[", "self", ".", "padded_ind", "[", "i", "]", "for", "i", "in", "range", "(", "self", ".", "beg", ",", "self", ".", "end", ")", "]", "\n", "return", "iter", "(", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.distributed_utils.DistributedSequentialSampler.__len__": [[133, 135], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "end", "-", "self", ".", "beg", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.distributed_utils.GivenIterationSampler.__init__": [[137, 146], ["distributed_utils.GivenIterationSampler.gen_new_list"], "methods", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.distributed_utils.DistributedGivenIterationSampler.gen_new_list"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "total_iter", ",", "batch_size", ",", "last_iter", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "total_iter", "=", "total_iter", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "last_iter", "=", "last_iter", "\n", "\n", "self", ".", "total_size", "=", "self", ".", "total_iter", "*", "self", ".", "batch_size", "\n", "self", ".", "indices", "=", "self", ".", "gen_new_list", "(", ")", "\n", "self", ".", "call", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.distributed_utils.GivenIterationSampler.__iter__": [[147, 153], ["iter", "RuntimeError"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "call", "==", "0", ":", "\n", "            ", "self", ".", "call", "=", "1", "\n", "return", "iter", "(", "self", ".", "indices", "[", "(", "self", ".", "last_iter", "+", "1", ")", "*", "self", ".", "batch_size", ":", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"this sampler is not designed to be called more than once!!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.distributed_utils.GivenIterationSampler.gen_new_list": [[154, 171], ["numpy.random.seed", "numpy.arange", "numpy.tile", "numpy.random.shuffle", "len", "len"], "methods", ["None"], ["", "", "def", "gen_new_list", "(", "self", ")", ":", "\n", "\n", "# each process shuffle all list with same seed, and pick one piece according to rank", "\n", "        ", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "\n", "all_size", "=", "self", ".", "total_size", "\n", "indices", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "dataset", ")", ")", "\n", "indices", "=", "indices", "[", ":", "all_size", "]", "\n", "num_repeat", "=", "(", "all_size", "-", "1", ")", "//", "indices", ".", "shape", "[", "0", "]", "+", "1", "\n", "indices", "=", "np", ".", "tile", "(", "indices", ",", "num_repeat", ")", "\n", "indices", "=", "indices", "[", ":", "all_size", "]", "\n", "\n", "np", ".", "random", ".", "shuffle", "(", "indices", ")", "\n", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "total_size", "\n", "\n", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.distributed_utils.GivenIterationSampler.__len__": [[172, 174], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "total_size", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.distributed_utils.DistributedGivenIterationSampler.__init__": [[177, 194], ["distributed_utils.DistributedGivenIterationSampler.gen_new_list", "torch.get_world_size", "torch.get_world_size", "torch.get_rank", "torch.get_rank"], "methods", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.distributed_utils.DistributedGivenIterationSampler.gen_new_list"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "total_iter", ",", "batch_size", ",", "world_size", "=", "None", ",", "rank", "=", "None", ",", "last_iter", "=", "-", "1", ")", ":", "\n", "        ", "if", "world_size", "is", "None", ":", "\n", "            ", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "", "if", "rank", "is", "None", ":", "\n", "            ", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "", "assert", "rank", "<", "world_size", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "total_iter", "=", "total_iter", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "world_size", "=", "world_size", "\n", "self", ".", "rank", "=", "rank", "\n", "self", ".", "last_iter", "=", "last_iter", "\n", "\n", "self", ".", "total_size", "=", "self", ".", "total_iter", "*", "self", ".", "batch_size", "\n", "\n", "self", ".", "indices", "=", "self", ".", "gen_new_list", "(", ")", "\n", "self", ".", "call", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.distributed_utils.DistributedGivenIterationSampler.__iter__": [[195, 201], ["iter", "RuntimeError"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "call", "==", "0", ":", "\n", "            ", "self", ".", "call", "=", "1", "\n", "return", "iter", "(", "self", ".", "indices", "[", "(", "self", ".", "last_iter", "+", "1", ")", "*", "self", ".", "batch_size", ":", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "RuntimeError", "(", "\"this sampler is not designed to be called more than once!!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.distributed_utils.DistributedGivenIterationSampler.gen_new_list": [[202, 221], ["numpy.random.seed", "numpy.arange", "numpy.tile", "numpy.random.shuffle", "len", "len"], "methods", ["None"], ["", "", "def", "gen_new_list", "(", "self", ")", ":", "\n", "\n", "# each process shuffle all list with same seed, and pick one piece according to rank", "\n", "        ", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "\n", "all_size", "=", "self", ".", "total_size", "*", "self", ".", "world_size", "\n", "indices", "=", "np", ".", "arange", "(", "len", "(", "self", ".", "dataset", ")", ")", "\n", "indices", "=", "indices", "[", ":", "all_size", "]", "\n", "num_repeat", "=", "(", "all_size", "-", "1", ")", "//", "indices", ".", "shape", "[", "0", "]", "+", "1", "\n", "indices", "=", "np", ".", "tile", "(", "indices", ",", "num_repeat", ")", "\n", "indices", "=", "indices", "[", ":", "all_size", "]", "\n", "\n", "np", ".", "random", ".", "shuffle", "(", "indices", ")", "\n", "beg", "=", "self", ".", "total_size", "*", "self", ".", "rank", "\n", "indices", "=", "indices", "[", "beg", ":", "beg", "+", "self", ".", "total_size", "]", "\n", "\n", "assert", "len", "(", "indices", ")", "==", "self", ".", "total_size", "\n", "\n", "return", "indices", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.distributed_utils.DistributedGivenIterationSampler.__len__": [[222, 228], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "# note here we do not take last iter into consideration, since __len__", "\n", "# should only be used for displaying, the correct remaining size is", "\n", "# handled by dataloader", "\n", "#return self.total_size - (self.last_iter+1)*self.batch_size", "\n", "        ", "return", "self", ".", "total_size", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.distributed_utils.average_gradients": [[23, 28], ["model.parameters", "torch.all_reduce"], "function", ["None"], ["", "", "def", "average_gradients", "(", "model", ")", ":", "\n", "    ", "\"\"\" average gradients \"\"\"", "\n", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "        ", "if", "param", ".", "requires_grad", ":", "\n", "            ", "dist", ".", "all_reduce", "(", "param", ".", "grad", ".", "data", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.distributed_utils.broadcast_params": [[29, 33], ["model.state_dict().values", "torch.broadcast", "model.state_dict"], "function", ["None"], ["", "", "", "def", "broadcast_params", "(", "model", ")", ":", "\n", "    ", "\"\"\" broadcast model parameters \"\"\"", "\n", "for", "p", "in", "model", ".", "state_dict", "(", ")", ".", "values", "(", ")", ":", "\n", "        ", "dist", ".", "broadcast", "(", "p", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.distributed_utils.dist_init": [[34, 45], ["multiprocessing.get_start_method", "multiprocessing.set_start_method", "distributed_utils._init_dist_pytorch", "distributed_utils._init_dist_mpi", "distributed_utils._init_dist_slurm", "ValueError"], "function", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.distributed_utils._init_dist_pytorch", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.distributed_utils._init_dist_mpi", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.distributed_utils._init_dist_slurm"], ["", "", "def", "dist_init", "(", "launcher", ",", "backend", "=", "'nccl'", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "mp", ".", "get_start_method", "(", "allow_none", "=", "True", ")", "is", "None", ":", "\n", "        ", "mp", ".", "set_start_method", "(", "'spawn'", ")", "\n", "", "if", "launcher", "==", "'pytorch'", ":", "\n", "        ", "_init_dist_pytorch", "(", "backend", ",", "**", "kwargs", ")", "\n", "", "elif", "launcher", "==", "'mpi'", ":", "\n", "        ", "_init_dist_mpi", "(", "backend", ",", "**", "kwargs", ")", "\n", "", "elif", "launcher", "==", "'slurm'", ":", "\n", "        ", "_init_dist_slurm", "(", "backend", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "'Invalid launcher type: {}'", ".", "format", "(", "launcher", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.distributed_utils._init_dist_pytorch": [[46, 51], ["int", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.set_device", "torch.cuda.set_device", "torch.init_process_group"], "function", ["None"], ["", "", "def", "_init_dist_pytorch", "(", "backend", ",", "**", "kwargs", ")", ":", "\n", "    ", "rank", "=", "int", "(", "os", ".", "environ", "[", "'RANK'", "]", ")", "\n", "num_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "rank", "%", "num_gpus", ")", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "backend", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.distributed_utils._init_dist_mpi": [[52, 54], ["None"], "function", ["None"], ["", "def", "_init_dist_mpi", "(", "backend", ",", "**", "kwargs", ")", ":", "\n", "    ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.distributed_utils._init_dist_slurm": [[55, 68], ["int", "int", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.set_device", "torch.cuda.set_device", "subprocess.getoutput", "str", "str", "str", "torch.init_process_group"], "function", ["None"], ["", "def", "_init_dist_slurm", "(", "backend", ",", "port", "=", "10086", ",", "**", "kwargs", ")", ":", "\n", "    ", "proc_id", "=", "int", "(", "os", ".", "environ", "[", "'SLURM_PROCID'", "]", ")", "\n", "ntasks", "=", "int", "(", "os", ".", "environ", "[", "'SLURM_NTASKS'", "]", ")", "\n", "node_list", "=", "os", ".", "environ", "[", "'SLURM_NODELIST'", "]", "\n", "num_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "torch", ".", "cuda", ".", "set_device", "(", "proc_id", "%", "num_gpus", ")", "\n", "addr", "=", "subprocess", ".", "getoutput", "(", "\n", "'scontrol show hostname {} | head -n1'", ".", "format", "(", "node_list", ")", ")", "\n", "os", ".", "environ", "[", "'MASTER_PORT'", "]", "=", "str", "(", "port", ")", "\n", "os", ".", "environ", "[", "'MASTER_ADDR'", "]", "=", "addr", "\n", "os", ".", "environ", "[", "'WORLD_SIZE'", "]", "=", "str", "(", "ntasks", ")", "\n", "os", ".", "environ", "[", "'RANK'", "]", "=", "str", "(", "proc_id", ")", "\n", "dist", ".", "init_process_group", "(", "backend", "=", "backend", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.distributed_utils.gather_tensors": [[69, 92], ["torch.get_world_size", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.all_gather", "max", "numpy.zeros", "input_array.reshape", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.all_gather", "torch.Tensor().cuda", "torch.Tensor().cuda", "x.cpu().numpy", "int", "list", "torch.Tensor().cuda", "torch.Tensor().cuda", "x.cpu().numpy", "x[].reshape", "torch.Tensor", "torch.Tensor", "range", "x.prod", "map", "range", "torch.Tensor", "torch.Tensor", "enumerate", "numpy.array", "torch.Tensor", "torch.Tensor", "x.cpu", "torch.Tensor", "torch.Tensor", "x.cpu", "numpy.array"], "function", ["None"], ["", "def", "gather_tensors", "(", "input_array", ")", ":", "\n", "    ", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "## gather shapes first", "\n", "myshape", "=", "input_array", ".", "shape", "\n", "mycount", "=", "input_array", ".", "size", "\n", "shape_tensor", "=", "torch", ".", "Tensor", "(", "np", ".", "array", "(", "myshape", ")", ")", ".", "cuda", "(", ")", "\n", "all_shape", "=", "[", "torch", ".", "Tensor", "(", "np", ".", "array", "(", "myshape", ")", ")", ".", "cuda", "(", ")", "for", "i", "in", "range", "(", "world_size", ")", "]", "\n", "dist", ".", "all_gather", "(", "all_shape", ",", "shape_tensor", ")", "\n", "## compute largest shapes", "\n", "all_shape", "=", "[", "x", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "for", "x", "in", "all_shape", "]", "\n", "all_count", "=", "[", "int", "(", "x", ".", "prod", "(", ")", ")", "for", "x", "in", "all_shape", "]", "\n", "all_shape", "=", "[", "list", "(", "map", "(", "int", ",", "x", ")", ")", "for", "x", "in", "all_shape", "]", "\n", "max_count", "=", "max", "(", "all_count", ")", "\n", "## padding tensors and gather them", "\n", "output_tensors", "=", "[", "torch", ".", "Tensor", "(", "max_count", ")", ".", "cuda", "(", ")", "for", "i", "in", "range", "(", "world_size", ")", "]", "\n", "padded_input_array", "=", "np", ".", "zeros", "(", "max_count", ")", "\n", "padded_input_array", "[", ":", "mycount", "]", "=", "input_array", ".", "reshape", "(", "-", "1", ")", "\n", "input_tensor", "=", "torch", ".", "Tensor", "(", "padded_input_array", ")", ".", "cuda", "(", ")", "\n", "dist", ".", "all_gather", "(", "output_tensors", ",", "input_tensor", ")", "\n", "## unpadding gathered tensors", "\n", "padded_output", "=", "[", "x", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "for", "x", "in", "output_tensors", "]", "\n", "output", "=", "[", "x", "[", ":", "all_count", "[", "i", "]", "]", ".", "reshape", "(", "all_shape", "[", "i", "]", ")", "for", "i", ",", "x", "in", "enumerate", "(", "padded_output", ")", "]", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.distributed_utils.gather_tensors_batch": [[93, 107], ["torch.get_rank", "range", "print", "numpy.concatenate", "print", "distributed_utils.gather_tensors", "np.concatenate.append", "numpy.concatenate", "len", "range", "min", "len", "range"], "function", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.distributed_utils.gather_tensors"], ["", "def", "gather_tensors_batch", "(", "input_array", ",", "part_size", "=", "10", ")", ":", "\n", "# gather", "\n", "    ", "rank", "=", "dist", ".", "get_rank", "(", ")", "\n", "all_features", "=", "[", "]", "\n", "part_num", "=", "input_array", ".", "shape", "[", "0", "]", "//", "part_size", "+", "1", "if", "input_array", ".", "shape", "[", "0", "]", "%", "part_size", "!=", "0", "else", "input_array", ".", "shape", "[", "0", "]", "//", "part_size", "\n", "for", "i", "in", "range", "(", "part_num", ")", ":", "\n", "        ", "part_feat", "=", "input_array", "[", "i", "*", "part_size", ":", "min", "(", "(", "i", "+", "1", ")", "*", "part_size", ",", "input_array", ".", "shape", "[", "0", "]", ")", ",", "...", "]", "\n", "assert", "part_feat", ".", "shape", "[", "0", "]", ">", "0", ",", "\"rank: {}, length of part features should > 0\"", ".", "format", "(", "rank", ")", "\n", "print", "(", "\"rank: {}, gather part: {}/{}, length: {}\"", ".", "format", "(", "rank", ",", "i", ",", "part_num", ",", "len", "(", "part_feat", ")", ")", ")", "\n", "gather_part_feat", "=", "gather_tensors", "(", "part_feat", ")", "\n", "all_features", ".", "append", "(", "gather_part_feat", ")", "\n", "", "print", "(", "\"rank: {}, gather done.\"", ".", "format", "(", "rank", ")", ")", "\n", "all_features", "=", "np", ".", "concatenate", "(", "[", "np", ".", "concatenate", "(", "[", "all_features", "[", "i", "]", "[", "j", "]", "for", "i", "in", "range", "(", "part_num", ")", "]", ",", "axis", "=", "0", ")", "for", "j", "in", "range", "(", "len", "(", "all_features", "[", "0", "]", ")", ")", "]", ",", "axis", "=", "0", ")", "\n", "return", "all_features", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.distributed_utils.reduce_tensors": [[108, 112], ["tensor.clone", "torch.all_reduce"], "function", ["None"], ["", "def", "reduce_tensors", "(", "tensor", ")", ":", "\n", "    ", "reduced_tensor", "=", "tensor", ".", "clone", "(", ")", "\n", "dist", ".", "all_reduce", "(", "reduced_tensor", ")", "\n", "return", "reduced_tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.common_utils.AverageMeter.__init__": [[52, 55], ["common_utils.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.common_utils.AverageMeter.reset"], ["def", "__init__", "(", "self", ",", "length", "=", "0", ")", ":", "\n", "        ", "self", ".", "length", "=", "length", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.common_utils.AverageMeter.reset": [[56, 64], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "length", ">", "0", ":", "\n", "            ", "self", ".", "history", "=", "[", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "count", "=", "0", "\n", "self", ".", "sum", "=", "0.0", "\n", "", "self", ".", "val", "=", "0.0", "\n", "self", ".", "avg", "=", "0.0", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.common_utils.AverageMeter.update": [[65, 78], ["common_utils.AverageMeter.history.append", "numpy.mean", "len"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ")", ":", "\n", "        ", "if", "self", ".", "length", ">", "0", ":", "\n", "            ", "self", ".", "history", ".", "append", "(", "val", ")", "\n", "if", "len", "(", "self", ".", "history", ")", ">", "self", ".", "length", ":", "\n", "                ", "del", "self", ".", "history", "[", "0", "]", "\n", "\n", "", "self", ".", "val", "=", "self", ".", "history", "[", "-", "1", "]", "\n", "self", ".", "avg", "=", "np", ".", "mean", "(", "self", ".", "history", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "\n", "self", ".", "count", "+=", "1", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.common_utils.init_weights": [[8, 37], ["net.apply", "hasattr", "torch.nn.init.normal_", "hasattr", "torch.nn.init.constant_", "classname.find", "torch.nn.init.normal_", "torch.nn.init.constant_", "classname.find", "classname.find", "torch.nn.init.xavier_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.orthogonal_", "NotImplementedError"], "function", ["None"], ["def", "init_weights", "(", "net", ",", "init_type", "=", "'normal'", ",", "init_gain", "=", "0.02", ")", ":", "\n", "    ", "\"\"\"Initialize network weights.\n    Parameters:\n        net (network)   -- network to be initialized\n        init_type (str) -- the name of an initialization method: normal | xavier | kaiming | orthogonal\n        init_gain (float)    -- scaling factor for normal, xavier and orthogonal.\n    We use 'normal' in the original pix2pix and CycleGAN paper. But xavier and kaiming might\n    work better for some applications. Feel free to try yourself.\n    \"\"\"", "\n", "def", "init_func", "(", "m", ")", ":", "# define the initialization function", "\n", "        ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "hasattr", "(", "m", ",", "'weight'", ")", "and", "(", "classname", ".", "find", "(", "'Conv'", ")", "!=", "-", "1", "or", "classname", ".", "find", "(", "'Linear'", ")", "!=", "-", "1", ")", ":", "\n", "            ", "if", "init_type", "==", "'normal'", ":", "\n", "                ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "0.0", ",", "init_gain", ")", "\n", "", "elif", "init_type", "==", "'xavier'", ":", "\n", "                ", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "init_gain", ")", "\n", "", "elif", "init_type", "==", "'kaiming'", ":", "\n", "                ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ".", "data", ",", "a", "=", "0", ",", "mode", "=", "'fan_in'", ")", "\n", "", "elif", "init_type", "==", "'orthogonal'", ":", "\n", "                ", "init", ".", "orthogonal_", "(", "m", ".", "weight", ".", "data", ",", "gain", "=", "init_gain", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "'initialization method [%s] is not implemented'", "%", "init_type", ")", "\n", "", "if", "hasattr", "(", "m", ",", "'bias'", ")", "and", "m", ".", "bias", "is", "not", "None", ":", "\n", "                ", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "", "", "elif", "classname", ".", "find", "(", "'BatchNorm2d'", ")", "!=", "-", "1", ":", "# BatchNorm Layer's weight is not a matrix; only normal distribution applies.", "\n", "            ", "init", ".", "normal_", "(", "m", ".", "weight", ".", "data", ",", "1.0", ",", "init_gain", ")", "\n", "init", ".", "constant_", "(", "m", ".", "bias", ".", "data", ",", "0.0", ")", "\n", "\n", "", "", "net", ".", "apply", "(", "init_func", ")", "# apply the initialization function <init_func>", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.common_utils.create_logger": [[38, 49], ["logging.getLogger", "logging.Formatter", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.getLogger.setLevel", "logging.getLogger.addHandler", "logging.getLogger.addHandler"], "function", ["None"], ["", "def", "create_logger", "(", "name", ",", "log_file", ",", "level", "=", "logging", ".", "INFO", ")", ":", "\n", "    ", "l", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'[%(asctime)s] %(message)s'", ")", "\n", "fh", "=", "logging", ".", "FileHandler", "(", "log_file", ")", "\n", "fh", ".", "setFormatter", "(", "formatter", ")", "\n", "sh", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "sh", ".", "setFormatter", "(", "formatter", ")", "\n", "l", ".", "setLevel", "(", "level", ")", "\n", "l", ".", "addHandler", "(", "fh", ")", "\n", "l", ".", "addHandler", "(", "sh", ")", "\n", "return", "l", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.common_utils.accuracy": [[79, 93], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ",", "keepdims", "=", "True", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.common_utils.load_state": [[94, 115], ["os.path.isfile", "storage.cuda", "print", "torch.load", "model.load_state_dict", "set", "set", "print", "checkpoint[].keys", "model.state_dict().keys", "print", "optimizer.load_state_dict", "print", "model.state_dict"], "function", ["None"], ["", "def", "load_state", "(", "path", ",", "model", ",", "optimizer", "=", "None", ")", ":", "\n", "    ", "def", "map_func", "(", "storage", ",", "location", ")", ":", "\n", "        ", "return", "storage", ".", "cuda", "(", ")", "\n", "", "if", "os", ".", "path", ".", "isfile", "(", "path", ")", ":", "\n", "        ", "print", "(", "\"=> loading checkpoint '{}'\"", ".", "format", "(", "path", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "path", ",", "map_location", "=", "map_func", ")", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'state_dict'", "]", ",", "strict", "=", "False", ")", "\n", "ckpt_keys", "=", "set", "(", "checkpoint", "[", "'state_dict'", "]", ".", "keys", "(", ")", ")", "\n", "own_keys", "=", "set", "(", "model", ".", "state_dict", "(", ")", ".", "keys", "(", ")", ")", "\n", "missing_keys", "=", "own_keys", "-", "ckpt_keys", "\n", "for", "k", "in", "missing_keys", ":", "\n", "            ", "print", "(", "'caution: missing keys from checkpoint {}: {}'", ".", "format", "(", "path", ",", "k", ")", ")", "\n", "\n", "", "last_iter", "=", "checkpoint", "[", "'step'", "]", "\n", "if", "optimizer", "!=", "None", ":", "\n", "            ", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "print", "(", "\"=> also loaded optimizer from checkpoint '{}' (iter {})\"", "\n", ".", "format", "(", "path", ",", "last_iter", ")", ")", "\n", "", "return", "last_iter", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"=> no checkpoint found at '{}'\"", ".", "format", "(", "path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.flowlib.write_flow": [[25, 42], ["open", "numpy.array", "numpy.array", "numpy.array", "np.array.tofile", "np.array.tofile", "np.array.tofile", "flow.tofile", "open.close"], "function", ["None"], ["def", "write_flow", "(", "flow", ",", "filename", ")", ":", "\n", "    ", "\"\"\"\n    write optical flow in Middlebury .flo format\n    :param flow: optical flow map\n    :param filename: optical flow file path to be saved\n    :return: None\n    \"\"\"", "\n", "f", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "magic", "=", "np", ".", "array", "(", "[", "202021.25", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "(", "height", ",", "width", ")", "=", "flow", ".", "shape", "[", "0", ":", "2", "]", "\n", "w", "=", "np", ".", "array", "(", "[", "width", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "h", "=", "np", ".", "array", "(", "[", "height", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "magic", ".", "tofile", "(", "f", ")", "\n", "w", ".", "tofile", "(", "f", ")", "\n", "h", ".", "tofile", "(", "f", ")", "\n", "flow", ".", "tofile", "(", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.flowlib.save_flow_image": [[44, 54], ["flowlib.flow_to_image", "PIL.Image.fromarray", "Image.fromarray.save"], "function", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.visualize_utils.flow_to_image"], ["", "def", "save_flow_image", "(", "flow", ",", "image_file", ")", ":", "\n", "    ", "\"\"\"\n    save flow visualization into image file\n    :param flow: optical flow data\n    :param flow_fil\n    :return: None\n    \"\"\"", "\n", "flow_img", "=", "flow_to_image", "(", "flow", ")", "\n", "img_out", "=", "Image", ".", "fromarray", "(", "flow_img", ")", "\n", "img_out", ".", "save", "(", "image_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.flowlib.segment_flow": [[55, 90], ["numpy.zeros", "abs", "abs", "abs"], "function", ["None"], ["", "def", "segment_flow", "(", "flow", ")", ":", "\n", "    ", "h", "=", "flow", ".", "shape", "[", "0", "]", "\n", "w", "=", "flow", ".", "shape", "[", "1", "]", "\n", "u", "=", "flow", "[", ":", ",", ":", ",", "0", "]", "\n", "v", "=", "flow", "[", ":", ",", ":", ",", "1", "]", "\n", "\n", "idx", "=", "(", "(", "abs", "(", "u", ")", ">", "LARGEFLOW", ")", "|", "(", "abs", "(", "v", ")", ">", "LARGEFLOW", ")", ")", "\n", "idx2", "=", "(", "abs", "(", "u", ")", "==", "SMALLFLOW", ")", "\n", "class0", "=", "(", "v", "==", "0", ")", "&", "(", "u", "==", "0", ")", "\n", "u", "[", "idx2", "]", "=", "0.00001", "\n", "tan_value", "=", "v", "/", "u", "\n", "\n", "class1", "=", "(", "tan_value", "<", "1", ")", "&", "(", "tan_value", ">=", "0", ")", "&", "(", "u", ">", "0", ")", "&", "(", "v", ">=", "0", ")", "\n", "class2", "=", "(", "tan_value", ">=", "1", ")", "&", "(", "u", ">=", "0", ")", "&", "(", "v", ">=", "0", ")", "\n", "class3", "=", "(", "tan_value", "<", "-", "1", ")", "&", "(", "u", "<=", "0", ")", "&", "(", "v", ">=", "0", ")", "\n", "class4", "=", "(", "tan_value", "<", "0", ")", "&", "(", "tan_value", ">=", "-", "1", ")", "&", "(", "u", "<", "0", ")", "&", "(", "v", ">=", "0", ")", "\n", "class8", "=", "(", "tan_value", ">=", "-", "1", ")", "&", "(", "tan_value", "<", "0", ")", "&", "(", "u", ">", "0", ")", "&", "(", "v", "<=", "0", ")", "\n", "class7", "=", "(", "tan_value", "<", "-", "1", ")", "&", "(", "u", ">=", "0", ")", "&", "(", "v", "<=", "0", ")", "\n", "class6", "=", "(", "tan_value", ">=", "1", ")", "&", "(", "u", "<=", "0", ")", "&", "(", "v", "<=", "0", ")", "\n", "class5", "=", "(", "tan_value", ">=", "0", ")", "&", "(", "tan_value", "<", "1", ")", "&", "(", "u", "<", "0", ")", "&", "(", "v", "<=", "0", ")", "\n", "\n", "seg", "=", "np", ".", "zeros", "(", "(", "h", ",", "w", ")", ")", "\n", "\n", "seg", "[", "class1", "]", "=", "1", "\n", "seg", "[", "class2", "]", "=", "2", "\n", "seg", "[", "class3", "]", "=", "3", "\n", "seg", "[", "class4", "]", "=", "4", "\n", "seg", "[", "class5", "]", "=", "5", "\n", "seg", "[", "class6", "]", "=", "6", "\n", "seg", "[", "class7", "]", "=", "7", "\n", "seg", "[", "class8", "]", "=", "8", "\n", "seg", "[", "class0", "]", "=", "0", "\n", "seg", "[", "idx", "]", "=", "0", "\n", "\n", "return", "seg", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.flowlib.flow_to_image": [[91, 128], ["max", "min", "max", "min", "numpy.sqrt", "max", "flowlib.compute_color", "numpy.repeat", "numpy.uint8", "numpy.max", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "abs", "abs", "numpy.finfo", "numpy.finfo"], "function", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.flowlib.compute_color"], ["", "def", "flow_to_image", "(", "flow", ")", ":", "\n", "    ", "\"\"\"\n    Convert flow into middlebury color code image\n    :param flow: optical flow map\n    :return: optical flow image in middlebury color\n    \"\"\"", "\n", "u", "=", "flow", "[", ":", ",", ":", ",", "0", "]", "\n", "v", "=", "flow", "[", ":", ",", ":", ",", "1", "]", "\n", "\n", "maxu", "=", "-", "999.", "\n", "maxv", "=", "-", "999.", "\n", "minu", "=", "999.", "\n", "minv", "=", "999.", "\n", "\n", "idxUnknow", "=", "(", "abs", "(", "u", ")", ">", "UNKNOWN_FLOW_THRESH", ")", "|", "(", "abs", "(", "v", ")", ">", "UNKNOWN_FLOW_THRESH", ")", "\n", "u", "[", "idxUnknow", "]", "=", "0", "\n", "v", "[", "idxUnknow", "]", "=", "0", "\n", "\n", "maxu", "=", "max", "(", "maxu", ",", "np", ".", "max", "(", "u", ")", ")", "\n", "minu", "=", "min", "(", "minu", ",", "np", ".", "min", "(", "u", ")", ")", "\n", "\n", "maxv", "=", "max", "(", "maxv", ",", "np", ".", "max", "(", "v", ")", ")", "\n", "minv", "=", "min", "(", "minv", ",", "np", ".", "min", "(", "v", ")", ")", "\n", "\n", "rad", "=", "np", ".", "sqrt", "(", "u", "**", "2", "+", "v", "**", "2", ")", "\n", "maxrad", "=", "max", "(", "5", ",", "np", ".", "max", "(", "rad", ")", ")", "\n", "#maxrad = max(-1, 99)", "\n", "\n", "u", "=", "u", "/", "(", "maxrad", "+", "np", ".", "finfo", "(", "float", ")", ".", "eps", ")", "\n", "v", "=", "v", "/", "(", "maxrad", "+", "np", ".", "finfo", "(", "float", ")", ".", "eps", ")", "\n", "\n", "img", "=", "compute_color", "(", "u", ",", "v", ")", "\n", "\n", "idx", "=", "np", ".", "repeat", "(", "idxUnknow", "[", ":", ",", ":", ",", "np", ".", "newaxis", "]", ",", "3", ",", "axis", "=", "2", ")", "\n", "img", "[", "idx", "]", "=", "0", "\n", "\n", "return", "np", ".", "uint8", "(", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.flowlib.disp_to_flowfile": [[129, 148], ["open", "numpy.array", "numpy.array", "numpy.array", "numpy.zeros", "numpy.dstack", "np.array.tofile", "np.array.tofile", "np.array.tofile", "np.dstack.tofile", "open.close"], "function", ["None"], ["", "def", "disp_to_flowfile", "(", "disp", ",", "filename", ")", ":", "\n", "    ", "\"\"\"\n    Read KITTI disparity file in png format\n    :param disp: disparity matrix\n    :param filename: the flow file name to save\n    :return: None\n    \"\"\"", "\n", "f", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "magic", "=", "np", ".", "array", "(", "[", "202021.25", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "(", "height", ",", "width", ")", "=", "disp", ".", "shape", "[", "0", ":", "2", "]", "\n", "w", "=", "np", ".", "array", "(", "[", "width", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "h", "=", "np", ".", "array", "(", "[", "height", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "empty_map", "=", "np", ".", "zeros", "(", "(", "height", ",", "width", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "data", "=", "np", ".", "dstack", "(", "(", "disp", ",", "empty_map", ")", ")", "\n", "magic", ".", "tofile", "(", "f", ")", "\n", "w", ".", "tofile", "(", "f", ")", "\n", "h", ".", "tofile", "(", "f", ")", "\n", "data", ".", "tofile", "(", "f", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.flowlib.compute_color": [[149, 191], ["numpy.zeros", "flowlib.make_color_wheel", "numpy.size", "numpy.sqrt", "numpy.floor().astype", "range", "numpy.isnan", "numpy.isnan", "numpy.arctan2", "numpy.size", "numpy.logical_not", "numpy.uint8", "numpy.floor", "numpy.floor"], "function", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.flowlib.make_color_wheel"], ["", "def", "compute_color", "(", "u", ",", "v", ")", ":", "\n", "    ", "\"\"\"\n    compute optical flow color map\n    :param u: optical flow horizontal map\n    :param v: optical flow vertical map\n    :return: optical flow in color code\n    \"\"\"", "\n", "[", "h", ",", "w", "]", "=", "u", ".", "shape", "\n", "img", "=", "np", ".", "zeros", "(", "[", "h", ",", "w", ",", "3", "]", ")", "\n", "nanIdx", "=", "np", ".", "isnan", "(", "u", ")", "|", "np", ".", "isnan", "(", "v", ")", "\n", "u", "[", "nanIdx", "]", "=", "0", "\n", "v", "[", "nanIdx", "]", "=", "0", "\n", "\n", "colorwheel", "=", "make_color_wheel", "(", ")", "\n", "ncols", "=", "np", ".", "size", "(", "colorwheel", ",", "0", ")", "\n", "\n", "rad", "=", "np", ".", "sqrt", "(", "u", "**", "2", "+", "v", "**", "2", ")", "\n", "\n", "a", "=", "np", ".", "arctan2", "(", "-", "v", ",", "-", "u", ")", "/", "np", ".", "pi", "\n", "\n", "fk", "=", "(", "a", "+", "1", ")", "/", "2", "*", "(", "ncols", "-", "1", ")", "+", "1", "\n", "\n", "k0", "=", "np", ".", "floor", "(", "fk", ")", ".", "astype", "(", "int", ")", "\n", "\n", "k1", "=", "k0", "+", "1", "\n", "k1", "[", "k1", "==", "ncols", "+", "1", "]", "=", "1", "\n", "f", "=", "fk", "-", "k0", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "np", ".", "size", "(", "colorwheel", ",", "1", ")", ")", ":", "\n", "        ", "tmp", "=", "colorwheel", "[", ":", ",", "i", "]", "\n", "col0", "=", "tmp", "[", "k0", "-", "1", "]", "/", "255", "\n", "col1", "=", "tmp", "[", "k1", "-", "1", "]", "/", "255", "\n", "col", "=", "(", "1", "-", "f", ")", "*", "col0", "+", "f", "*", "col1", "\n", "\n", "idx", "=", "rad", "<=", "1", "\n", "col", "[", "idx", "]", "=", "1", "-", "rad", "[", "idx", "]", "*", "(", "1", "-", "col", "[", "idx", "]", ")", "\n", "notidx", "=", "np", ".", "logical_not", "(", "idx", ")", "\n", "\n", "col", "[", "notidx", "]", "*=", "0.75", "\n", "img", "[", ":", ",", ":", ",", "i", "]", "=", "np", ".", "uint8", "(", "np", ".", "floor", "(", "255", "*", "col", "*", "(", "1", "-", "nanIdx", ")", ")", ")", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.flowlib.make_color_wheel": [[193, 241], ["numpy.zeros", "numpy.transpose", "numpy.transpose", "numpy.transpose", "numpy.floor", "numpy.transpose", "numpy.floor", "numpy.transpose", "numpy.floor", "numpy.transpose", "numpy.floor", "numpy.floor", "numpy.floor", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange", "numpy.arange"], "function", ["None"], ["", "def", "make_color_wheel", "(", ")", ":", "\n", "    ", "\"\"\"\n    Generate color wheel according Middlebury color code\n    :return: Color wheel\n    \"\"\"", "\n", "RY", "=", "15", "\n", "YG", "=", "6", "\n", "GC", "=", "4", "\n", "CB", "=", "11", "\n", "BM", "=", "13", "\n", "MR", "=", "6", "\n", "\n", "ncols", "=", "RY", "+", "YG", "+", "GC", "+", "CB", "+", "BM", "+", "MR", "\n", "\n", "colorwheel", "=", "np", ".", "zeros", "(", "[", "ncols", ",", "3", "]", ")", "\n", "\n", "col", "=", "0", "\n", "\n", "# RY", "\n", "colorwheel", "[", "0", ":", "RY", ",", "0", "]", "=", "255", "\n", "colorwheel", "[", "0", ":", "RY", ",", "1", "]", "=", "np", ".", "transpose", "(", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "RY", ")", "/", "RY", ")", ")", "\n", "col", "+=", "RY", "\n", "\n", "# YG", "\n", "colorwheel", "[", "col", ":", "col", "+", "YG", ",", "0", "]", "=", "255", "-", "np", ".", "transpose", "(", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "YG", ")", "/", "YG", ")", ")", "\n", "colorwheel", "[", "col", ":", "col", "+", "YG", ",", "1", "]", "=", "255", "\n", "col", "+=", "YG", "\n", "\n", "# GC", "\n", "colorwheel", "[", "col", ":", "col", "+", "GC", ",", "1", "]", "=", "255", "\n", "colorwheel", "[", "col", ":", "col", "+", "GC", ",", "2", "]", "=", "np", ".", "transpose", "(", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "GC", ")", "/", "GC", ")", ")", "\n", "col", "+=", "GC", "\n", "\n", "# CB", "\n", "colorwheel", "[", "col", ":", "col", "+", "CB", ",", "1", "]", "=", "255", "-", "np", ".", "transpose", "(", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "CB", ")", "/", "CB", ")", ")", "\n", "colorwheel", "[", "col", ":", "col", "+", "CB", ",", "2", "]", "=", "255", "\n", "col", "+=", "CB", "\n", "\n", "# BM", "\n", "colorwheel", "[", "col", ":", "col", "+", "BM", ",", "2", "]", "=", "255", "\n", "colorwheel", "[", "col", ":", "col", "+", "BM", ",", "0", "]", "=", "np", ".", "transpose", "(", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "BM", ")", "/", "BM", ")", ")", "\n", "col", "+=", "+", "BM", "\n", "\n", "# MR", "\n", "colorwheel", "[", "col", ":", "col", "+", "MR", ",", "2", "]", "=", "255", "-", "np", ".", "transpose", "(", "np", ".", "floor", "(", "255", "*", "np", ".", "arange", "(", "0", ",", "MR", ")", "/", "MR", ")", ")", "\n", "colorwheel", "[", "col", ":", "col", "+", "MR", ",", "0", "]", "=", "255", "\n", "\n", "return", "colorwheel", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.flowlib.read_flo_file": [[243, 265], ["open", "open.close", "io.BytesIO", "numpy.fromfile", "print", "numpy.fromfile", "numpy.resize", "numpy.fromfile", "numpy.fromfile"], "function", ["None"], ["", "def", "read_flo_file", "(", "filename", ",", "memcached", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Read from Middlebury .flo file\n    :param flow_file: name of the flow file\n    :return: optical flow data in matrix\n    \"\"\"", "\n", "if", "memcached", ":", "\n", "        ", "filename", "=", "io", ".", "BytesIO", "(", "filename", ")", "\n", "", "f", "=", "open", "(", "filename", ",", "'rb'", ")", "\n", "magic", "=", "np", ".", "fromfile", "(", "f", ",", "np", ".", "float32", ",", "count", "=", "1", ")", "[", "0", "]", "\n", "data2d", "=", "None", "\n", "\n", "if", "202021.25", "!=", "magic", ":", "\n", "        ", "print", "(", "'Magic number incorrect. Invalid .flo file'", ")", "\n", "", "else", ":", "\n", "        ", "w", "=", "np", ".", "fromfile", "(", "f", ",", "np", ".", "int32", ",", "count", "=", "1", ")", "[", "0", "]", "\n", "h", "=", "np", ".", "fromfile", "(", "f", ",", "np", ".", "int32", ",", "count", "=", "1", ")", "[", "0", "]", "\n", "data2d", "=", "np", ".", "fromfile", "(", "f", ",", "np", ".", "float32", ",", "count", "=", "2", "*", "w", "*", "h", ")", "\n", "# reshape data into 3D array (columns, rows, channels)", "\n", "data2d", "=", "np", ".", "resize", "(", "data2d", ",", "(", "h", ",", "w", ",", "2", ")", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "return", "data2d", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.flowlib.resample": [[268, 309], ["numpy.zeros", "numpy.meshgrid", "numpy.floor().astype", "numpy.floor().astype", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "float", "float", "float", "float", "range", "range", "numpy.floor", "numpy.floor"], "function", ["None"], ["", "def", "resample", "(", "img", ",", "sz", ")", ":", "\n", "    ", "\"\"\"\n    img: flow map to be resampled\n    sz: new flow map size. Must be [height,weight]\n    \"\"\"", "\n", "original_image_size", "=", "img", ".", "shape", "\n", "in_height", "=", "img", ".", "shape", "[", "0", "]", "\n", "in_width", "=", "img", ".", "shape", "[", "1", "]", "\n", "out_height", "=", "sz", "[", "0", "]", "\n", "out_width", "=", "sz", "[", "1", "]", "\n", "out_flow", "=", "np", ".", "zeros", "(", "(", "out_height", ",", "out_width", ",", "2", ")", ")", "\n", "# find scale", "\n", "height_scale", "=", "float", "(", "in_height", ")", "/", "float", "(", "out_height", ")", "\n", "width_scale", "=", "float", "(", "in_width", ")", "/", "float", "(", "out_width", ")", "\n", "\n", "[", "x", ",", "y", "]", "=", "np", ".", "meshgrid", "(", "range", "(", "out_width", ")", ",", "range", "(", "out_height", ")", ")", "\n", "xx", "=", "x", "*", "width_scale", "\n", "yy", "=", "y", "*", "height_scale", "\n", "x0", "=", "np", ".", "floor", "(", "xx", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "x1", "=", "x0", "+", "1", "\n", "y0", "=", "np", ".", "floor", "(", "yy", ")", ".", "astype", "(", "np", ".", "int32", ")", "\n", "y1", "=", "y0", "+", "1", "\n", "\n", "x0", "=", "np", ".", "clip", "(", "x0", ",", "0", ",", "in_width", "-", "1", ")", "\n", "x1", "=", "np", ".", "clip", "(", "x1", ",", "0", ",", "in_width", "-", "1", ")", "\n", "y0", "=", "np", ".", "clip", "(", "y0", ",", "0", ",", "in_height", "-", "1", ")", "\n", "y1", "=", "np", ".", "clip", "(", "y1", ",", "0", ",", "in_height", "-", "1", ")", "\n", "\n", "Ia", "=", "img", "[", "y0", ",", "x0", ",", ":", "]", "\n", "Ib", "=", "img", "[", "y1", ",", "x0", ",", ":", "]", "\n", "Ic", "=", "img", "[", "y0", ",", "x1", ",", ":", "]", "\n", "Id", "=", "img", "[", "y1", ",", "x1", ",", ":", "]", "\n", "\n", "wa", "=", "(", "y1", "-", "yy", ")", "*", "(", "x1", "-", "xx", ")", "\n", "wb", "=", "(", "yy", "-", "y0", ")", "*", "(", "x1", "-", "xx", ")", "\n", "wc", "=", "(", "y1", "-", "yy", ")", "*", "(", "xx", "-", "x0", ")", "\n", "wd", "=", "(", "yy", "-", "y0", ")", "*", "(", "xx", "-", "x0", ")", "\n", "out_flow", "[", ":", ",", ":", ",", "0", "]", "=", "(", "Ia", "[", ":", ",", ":", ",", "0", "]", "*", "wa", "+", "Ib", "[", ":", ",", ":", ",", "0", "]", "*", "wb", "+", "Ic", "[", ":", ",", ":", ",", "0", "]", "*", "wc", "+", "Id", "[", ":", ",", ":", ",", "0", "]", "*", "wd", ")", "*", "out_width", "/", "in_width", "\n", "out_flow", "[", ":", ",", ":", ",", "1", "]", "=", "(", "Ia", "[", ":", ",", ":", ",", "1", "]", "*", "wa", "+", "Ib", "[", ":", ",", ":", ",", "1", "]", "*", "wb", "+", "Ic", "[", ":", ",", ":", ",", "1", "]", "*", "wc", "+", "Id", "[", ":", ",", ":", ",", "1", "]", "*", "wd", ")", "*", "out_height", "/", "in_height", "\n", "\n", "return", "out_flow", "\n", "", ""]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.data_utils.get_edge": [[10, 20], ["numpy.array().astype", "range", "sum", "cv2.GaussianBlur", "scipy.signal.convolve2d", "scipy.signal.convolve2d", "ch_edges.append", "numpy.array", "numpy.sqrt"], "function", ["None"], ["def", "get_edge", "(", "data", ",", "blur", "=", "False", ")", ":", "\n", "    ", "if", "blur", ":", "\n", "        ", "data", "=", "cv2", ".", "GaussianBlur", "(", "data", ",", "(", "3", ",", "3", ")", ",", "1.", ")", "\n", "", "sobel", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "-", "1", "]", ",", "[", "2", ",", "0", ",", "-", "2", "]", ",", "[", "1", ",", "0", ",", "-", "1", "]", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "ch_edges", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "data", ".", "shape", "[", "2", "]", ")", ":", "\n", "        ", "edgex", "=", "signal", ".", "convolve2d", "(", "data", "[", ":", ",", ":", ",", "k", "]", ",", "sobel", ",", "boundary", "=", "'symm'", ",", "mode", "=", "'same'", ")", "\n", "edgey", "=", "signal", ".", "convolve2d", "(", "data", "[", ":", ",", ":", ",", "k", "]", ",", "sobel", ".", "T", ",", "boundary", "=", "'symm'", ",", "mode", "=", "'same'", ")", "\n", "ch_edges", ".", "append", "(", "np", ".", "sqrt", "(", "edgex", "**", "2", "+", "edgey", "**", "2", ")", ")", "\n", "", "return", "sum", "(", "ch_edges", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.data_utils.get_max": [[21, 27], ["max", "min", "max", "min", "score[].max"], "function", ["None"], ["", "def", "get_max", "(", "score", ",", "bbox", ")", ":", "\n", "    ", "u", "=", "max", "(", "0", ",", "bbox", "[", "0", "]", ")", "\n", "d", "=", "min", "(", "score", ".", "shape", "[", "0", "]", ",", "bbox", "[", "1", "]", ")", "\n", "l", "=", "max", "(", "0", ",", "bbox", "[", "2", "]", ")", "\n", "r", "=", "min", "(", "score", ".", "shape", "[", "1", "]", ",", "bbox", "[", "3", "]", ")", "\n", "return", "score", "[", "u", ":", "d", ",", "l", ":", "r", "]", ".", "max", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.data_utils.nms": [[28, 34], ["score.copy", "scipy.ndimage.filters.maximum_filter", "numpy.ones"], "function", ["None"], ["", "def", "nms", "(", "score", ",", "ks", ")", ":", "\n", "    ", "assert", "ks", "%", "2", "==", "1", "\n", "ret_score", "=", "score", ".", "copy", "(", ")", "\n", "maxpool", "=", "maximum_filter", "(", "score", ",", "footprint", "=", "np", ".", "ones", "(", "(", "ks", ",", "ks", ")", ")", ")", "\n", "ret_score", "[", "score", "<", "maxpool", "]", "=", "0.", "\n", "return", "ret_score", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.data_utils.image_flow_crop": [[35, 60], ["max", "max", "int", "int", "ImageOps.expand.crop", "ImageOps.expand.crop", "len", "numpy.zeros", "PIL.ImageOps.expand", "PIL.ImageOps.expand", "int", "int", "numpy.random.rand", "numpy.random.rand"], "function", ["None"], ["", "def", "image_flow_crop", "(", "img1", ",", "img2", ",", "flow", ",", "crop_size", ",", "phase", ")", ":", "\n", "    ", "assert", "len", "(", "crop_size", ")", "==", "2", "\n", "pad_h", "=", "max", "(", "crop_size", "[", "0", "]", "-", "img1", ".", "height", ",", "0", ")", "\n", "pad_w", "=", "max", "(", "crop_size", "[", "1", "]", "-", "img1", ".", "width", ",", "0", ")", "\n", "pad_h_half", "=", "int", "(", "pad_h", "/", "2", ")", "\n", "pad_w_half", "=", "int", "(", "pad_w", "/", "2", ")", "\n", "if", "pad_h", ">", "0", "or", "pad_w", ">", "0", ":", "\n", "        ", "flow_expand", "=", "np", ".", "zeros", "(", "(", "img1", ".", "height", "+", "pad_h", ",", "img1", ".", "width", "+", "pad_w", ",", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "flow_expand", "[", "pad_h_half", ":", "pad_h_half", "+", "img1", ".", "height", ",", "pad_w_half", ":", "pad_w_half", "+", "img1", ".", "width", ",", ":", "]", "=", "flow", "\n", "flow", "=", "flow_expand", "\n", "border", "=", "(", "pad_w_half", ",", "pad_h_half", ",", "pad_w", "-", "pad_w_half", ",", "pad_h", "-", "pad_h_half", ")", "\n", "img1", "=", "ImageOps", ".", "expand", "(", "img1", ",", "border", "=", "border", ",", "fill", "=", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "img2", "=", "ImageOps", ".", "expand", "(", "img2", ",", "border", "=", "border", ",", "fill", "=", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "", "if", "phase", "==", "'train'", ":", "\n", "        ", "hoff", "=", "int", "(", "np", ".", "random", ".", "rand", "(", ")", "*", "(", "img1", ".", "height", "-", "crop_size", "[", "0", "]", ")", ")", "\n", "woff", "=", "int", "(", "np", ".", "random", ".", "rand", "(", ")", "*", "(", "img1", ".", "width", "-", "crop_size", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "        ", "hoff", "=", "(", "img1", ".", "height", "-", "crop_size", "[", "0", "]", ")", "//", "2", "\n", "woff", "=", "(", "img1", ".", "width", "-", "crop_size", "[", "1", "]", ")", "//", "2", "\n", "\n", "", "img1", "=", "img1", ".", "crop", "(", "(", "woff", ",", "hoff", ",", "woff", "+", "crop_size", "[", "1", "]", ",", "hoff", "+", "crop_size", "[", "0", "]", ")", ")", "\n", "img2", "=", "img2", ".", "crop", "(", "(", "woff", ",", "hoff", ",", "woff", "+", "crop_size", "[", "1", "]", ",", "hoff", "+", "crop_size", "[", "0", "]", ")", ")", "\n", "flow", "=", "flow", "[", "hoff", ":", "hoff", "+", "crop_size", "[", "0", "]", ",", "woff", ":", "woff", "+", "crop_size", "[", "1", "]", ",", ":", "]", "\n", "offset", "=", "(", "hoff", ",", "woff", ")", "\n", "return", "img1", ",", "img2", ",", "flow", ",", "offset", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.data_utils.image_crop": [[61, 72], ["max", "max", "int", "int", "PIL.ImageOps.expand", "ImageOps.expand.crop"], "function", ["None"], ["", "def", "image_crop", "(", "img", ",", "crop_size", ")", ":", "\n", "    ", "pad_h", "=", "max", "(", "crop_size", "[", "0", "]", "-", "img", ".", "height", ",", "0", ")", "\n", "pad_w", "=", "max", "(", "crop_size", "[", "1", "]", "-", "img", ".", "width", ",", "0", ")", "\n", "pad_h_half", "=", "int", "(", "pad_h", "/", "2", ")", "\n", "pad_w_half", "=", "int", "(", "pad_w", "/", "2", ")", "\n", "if", "pad_h", ">", "0", "or", "pad_w", ">", "0", ":", "\n", "        ", "border", "=", "(", "pad_w_half", ",", "pad_h_half", ",", "pad_w", "-", "pad_w_half", ",", "pad_h", "-", "pad_h_half", ")", "\n", "img", "=", "ImageOps", ".", "expand", "(", "img", ",", "border", "=", "border", ",", "fill", "=", "(", "0", ",", "0", ",", "0", ")", ")", "\n", "", "hoff", "=", "(", "img", ".", "height", "-", "crop_size", "[", "0", "]", ")", "//", "2", "\n", "woff", "=", "(", "img", ".", "width", "-", "crop_size", "[", "1", "]", ")", "//", "2", "\n", "return", "img", ".", "crop", "(", "(", "woff", ",", "hoff", ",", "woff", "+", "crop_size", "[", "1", "]", ",", "hoff", "+", "crop_size", "[", "0", "]", ")", ")", ",", "(", "pad_w_half", ",", "pad_h_half", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.data_utils.image_flow_resize": [[73, 95], ["img1.resize.resize", "img2.resize.resize", "float", "cv2.resize", "int", "int", "int", "int", "flow.copy", "float", "float", "float", "float"], "function", ["None"], ["", "def", "image_flow_resize", "(", "img1", ",", "img2", ",", "flow", ",", "short_size", "=", "None", ",", "long_size", "=", "None", ")", ":", "\n", "    ", "assert", "(", "short_size", "is", "None", ")", "^", "(", "long_size", "is", "None", ")", "\n", "w", ",", "h", "=", "img1", ".", "width", ",", "img1", ".", "height", "\n", "if", "short_size", "is", "not", "None", ":", "\n", "        ", "if", "w", "<", "h", ":", "\n", "            ", "neww", "=", "short_size", "\n", "newh", "=", "int", "(", "short_size", "/", "float", "(", "w", ")", "*", "h", ")", "\n", "", "else", ":", "\n", "            ", "neww", "=", "int", "(", "short_size", "/", "float", "(", "h", ")", "*", "w", ")", "\n", "newh", "=", "short_size", "\n", "", "", "else", ":", "\n", "        ", "if", "w", "<", "h", ":", "\n", "            ", "neww", "=", "int", "(", "long_size", "/", "float", "(", "h", ")", "*", "w", ")", "\n", "newh", "=", "long_size", "\n", "", "else", ":", "\n", "            ", "neww", "=", "long_size", "\n", "newh", "=", "int", "(", "long_size", "/", "float", "(", "w", ")", "*", "h", ")", "\n", "", "", "img1", "=", "img1", ".", "resize", "(", "(", "neww", ",", "newh", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "img2", "=", "img2", ".", "resize", "(", "(", "neww", ",", "newh", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "ratio", "=", "float", "(", "newh", ")", "/", "h", "\n", "flow", "=", "cv2", ".", "resize", "(", "flow", ".", "copy", "(", ")", ",", "(", "neww", ",", "newh", ")", ",", "interpolation", "=", "cv2", ".", "INTER_LINEAR", ")", "*", "ratio", "\n", "return", "img1", ",", "img2", ",", "flow", ",", "ratio", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.data_utils.image_resize": [[96, 115], ["img.resize.resize", "int", "int", "int", "int", "float", "float", "float", "float"], "function", ["None"], ["", "def", "image_resize", "(", "img", ",", "short_size", "=", "None", ",", "long_size", "=", "None", ")", ":", "\n", "    ", "assert", "(", "short_size", "is", "None", ")", "^", "(", "long_size", "is", "None", ")", "\n", "w", ",", "h", "=", "img", ".", "width", ",", "img", ".", "height", "\n", "if", "short_size", "is", "not", "None", ":", "\n", "        ", "if", "w", "<", "h", ":", "\n", "            ", "neww", "=", "short_size", "\n", "newh", "=", "int", "(", "short_size", "/", "float", "(", "w", ")", "*", "h", ")", "\n", "", "else", ":", "\n", "            ", "neww", "=", "int", "(", "short_size", "/", "float", "(", "h", ")", "*", "w", ")", "\n", "newh", "=", "short_size", "\n", "", "", "else", ":", "\n", "        ", "if", "w", "<", "h", ":", "\n", "            ", "neww", "=", "int", "(", "long_size", "/", "float", "(", "h", ")", "*", "w", ")", "\n", "newh", "=", "long_size", "\n", "", "else", ":", "\n", "            ", "neww", "=", "long_size", "\n", "newh", "=", "int", "(", "long_size", "/", "float", "(", "w", ")", "*", "h", ")", "\n", "", "", "img", "=", "img", ".", "resize", "(", "(", "neww", ",", "newh", ")", ",", "Image", ".", "BICUBIC", ")", "\n", "return", "img", ",", "[", "w", ",", "h", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.data_utils.image_pose_crop": [[117, 126], ["img.crop.crop", "len"], "function", ["None"], ["", "def", "image_pose_crop", "(", "img", ",", "posemap", ",", "crop_size", ",", "scale", ")", ":", "\n", "    ", "assert", "len", "(", "crop_size", ")", "==", "2", "\n", "assert", "crop_size", "[", "0", "]", "<=", "img", ".", "height", "\n", "assert", "crop_size", "[", "1", "]", "<=", "img", ".", "width", "\n", "hoff", "=", "(", "img", ".", "height", "-", "crop_size", "[", "0", "]", ")", "//", "2", "\n", "woff", "=", "(", "img", ".", "width", "-", "crop_size", "[", "1", "]", ")", "//", "2", "\n", "img", "=", "img", ".", "crop", "(", "(", "woff", ",", "hoff", ",", "woff", "+", "crop_size", "[", "1", "]", ",", "hoff", "+", "crop_size", "[", "0", "]", ")", ")", "\n", "posemap", "=", "posemap", "[", "hoff", "//", "scale", ":", "hoff", "//", "scale", "+", "crop_size", "[", "0", "]", "//", "scale", ",", "woff", "//", "scale", ":", "woff", "//", "scale", "+", "crop_size", "[", "1", "]", "//", "scale", ",", ":", "]", "\n", "return", "img", ",", "posemap", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.data_utils.neighbor_elim": [[127, 140], ["numpy.ones().astype", "numpy.fabs", "numpy.fabs", "numpy.where", "zip", "numpy.where", "numpy.ones", "numpy.tile", "numpy.tile", "numpy.tile", "numpy.tile", "len", "numpy.random.rand", "len", "len", "len", "len"], "function", ["None"], ["", "def", "neighbor_elim", "(", "ph", ",", "pw", ",", "d", ")", ":", "\n", "    ", "valid", "=", "np", ".", "ones", "(", "(", "len", "(", "ph", ")", ")", ")", ".", "astype", "(", "np", ".", "int", ")", "\n", "h_dist", "=", "np", ".", "fabs", "(", "np", ".", "tile", "(", "ph", "[", ":", ",", "np", ".", "newaxis", "]", ",", "[", "1", ",", "len", "(", "ph", ")", "]", ")", "-", "np", ".", "tile", "(", "ph", ".", "T", "[", "np", ".", "newaxis", ",", ":", "]", ",", "[", "len", "(", "ph", ")", ",", "1", "]", ")", ")", "\n", "w_dist", "=", "np", ".", "fabs", "(", "np", ".", "tile", "(", "pw", "[", ":", ",", "np", ".", "newaxis", "]", ",", "[", "1", ",", "len", "(", "pw", ")", "]", ")", "-", "np", ".", "tile", "(", "pw", ".", "T", "[", "np", ".", "newaxis", ",", ":", "]", ",", "[", "len", "(", "pw", ")", ",", "1", "]", ")", ")", "\n", "idx1", ",", "idx2", "=", "np", ".", "where", "(", "(", "h_dist", "<", "d", ")", "&", "(", "w_dist", "<", "d", ")", ")", "\n", "for", "i", ",", "j", "in", "zip", "(", "idx1", ",", "idx2", ")", ":", "\n", "        ", "if", "valid", "[", "i", "]", "and", "valid", "[", "j", "]", "and", "i", "!=", "j", ":", "\n", "            ", "if", "np", ".", "random", ".", "rand", "(", ")", ">", "0.5", ":", "\n", "                ", "valid", "[", "i", "]", "=", "0", "\n", "", "else", ":", "\n", "                ", "valid", "[", "j", "]", "=", "0", "\n", "", "", "", "valid_idx", "=", "np", ".", "where", "(", "valid", "==", "1", ")", "\n", "return", "ph", "[", "valid_idx", "]", ",", "pw", "[", "valid_idx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.data_utils.remove_border": [[141, 146], ["None"], "function", ["None"], ["", "def", "remove_border", "(", "mask", ")", ":", "\n", "        ", "mask", "[", "0", ",", ":", "]", "=", "0", "\n", "mask", "[", ":", ",", "0", "]", "=", "0", "\n", "mask", "[", "mask", ".", "shape", "[", "0", "]", "-", "1", ",", ":", "]", "=", "0", "\n", "mask", "[", ":", ",", "mask", ".", "shape", "[", "1", "]", "-", "1", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.data_utils.flow_sampler": [[147, 225], ["max", "numpy.concatenate", "numpy.concatenate", "numpy.zeros", "numpy.zeros", "flow.copy", "numpy.ones", "int", "int", "int", "numpy.meshgrid", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "data_utils.get_edge", "scipy.signal.convolve2d", "scipy.signal.convolve2d", "data_utils.nms", "numpy.where", "np.concatenate.append", "np.concatenate.append", "data_utils.get_edge", "max", "scipy.distance_transform_edt", "data_utils.nms", "data_utils.remove_border", "numpy.where", "data_utils.neighbor_elim", "np.concatenate.append", "np.concatenate.append", "numpy.where", "numpy.random.randint", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "np.concatenate.append", "numpy.random.permutation", "max", "numpy.sqrt", "numpy.arange", "numpy.arange", "numpy.random.randint", "numpy.random.randint", "numpy.ones", "numpy.ones", "get_edge.max", "len", "len", "len", "numpy.arange", "int", "int", "signal.convolve2d.max", "signal.convolve2d.max", "min", "len"], "function", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.data_utils.get_edge", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.data_utils.nms", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.data_utils.get_edge", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.data_utils.nms", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.data_utils.remove_border", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.data_utils.neighbor_elim"], ["", "def", "flow_sampler", "(", "flow", ",", "strategy", "=", "[", "'grid'", "]", ",", "bg_ratio", "=", "1.", "/", "6400", ",", "nms_ks", "=", "15", ",", "max_num_guide", "=", "-", "1", ",", "guidepoint", "=", "None", ")", ":", "\n", "    ", "assert", "bg_ratio", ">=", "0", "and", "bg_ratio", "<=", "1", ",", "\"sampling ratio must be in (0, 1]\"", "\n", "for", "s", "in", "strategy", ":", "\n", "        ", "assert", "s", "in", "[", "'grid'", ",", "'uniform'", ",", "'gradnms'", ",", "'watershed'", ",", "'single'", ",", "'full'", ",", "'specified'", "]", ",", "\"No such strategy: {}\"", ".", "format", "(", "s", ")", "\n", "", "h", "=", "flow", ".", "shape", "[", "0", "]", "\n", "w", "=", "flow", ".", "shape", "[", "1", "]", "\n", "ds", "=", "max", "(", "1", ",", "max", "(", "h", ",", "w", ")", "//", "400", ")", "# reduce computation", "\n", "\n", "if", "'full'", "in", "strategy", ":", "\n", "        ", "sparse", "=", "flow", ".", "copy", "(", ")", "\n", "mask", "=", "np", ".", "ones", "(", "flow", ".", "shape", ",", "dtype", "=", "np", ".", "int", ")", "\n", "return", "sparse", ",", "mask", "\n", "\n", "", "pts_h", "=", "[", "]", "\n", "pts_w", "=", "[", "]", "\n", "if", "'grid'", "in", "strategy", ":", "\n", "        ", "stride", "=", "int", "(", "np", ".", "sqrt", "(", "1.", "/", "bg_ratio", ")", ")", "\n", "mesh_start_h", "=", "int", "(", "(", "h", "-", "h", "//", "stride", "*", "stride", ")", "/", "2", ")", "\n", "mesh_start_w", "=", "int", "(", "(", "w", "-", "w", "//", "stride", "*", "stride", ")", "/", "2", ")", "\n", "mesh", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "mesh_start_h", ",", "h", ",", "stride", ")", ",", "np", ".", "arange", "(", "mesh_start_w", ",", "w", ",", "stride", ")", ")", "\n", "pts_h", ".", "append", "(", "mesh", "[", "0", "]", ".", "flat", ")", "\n", "pts_w", ".", "append", "(", "mesh", "[", "1", "]", ".", "flat", ")", "\n", "", "if", "'uniform'", "in", "strategy", ":", "\n", "        ", "pts_h", ".", "append", "(", "np", ".", "random", ".", "randint", "(", "0", ",", "h", ",", "int", "(", "bg_ratio", "*", "h", "*", "w", ")", ")", ")", "\n", "pts_w", ".", "append", "(", "np", ".", "random", ".", "randint", "(", "0", ",", "w", ",", "int", "(", "bg_ratio", "*", "h", "*", "w", ")", ")", ")", "\n", "", "if", "\"gradnms\"", "in", "strategy", ":", "\n", "        ", "ks", "=", "w", "//", "ds", "//", "20", "\n", "edge", "=", "get_edge", "(", "flow", "[", ":", ":", "ds", ",", ":", ":", "ds", ",", ":", "]", ")", "\n", "kernel", "=", "np", ".", "ones", "(", "(", "ks", ",", "ks", ")", ",", "dtype", "=", "np", ".", "float32", ")", "/", "(", "ks", "*", "ks", ")", "\n", "subkernel", "=", "np", ".", "ones", "(", "(", "ks", "//", "2", ",", "ks", "//", "2", ")", ",", "dtype", "=", "np", ".", "float32", ")", "/", "(", "ks", "//", "2", "*", "ks", "//", "2", ")", "\n", "score", "=", "signal", ".", "convolve2d", "(", "edge", ",", "kernel", ",", "boundary", "=", "'symm'", ",", "mode", "=", "'same'", ")", "\n", "subscore", "=", "signal", ".", "convolve2d", "(", "edge", ",", "subkernel", ",", "boundary", "=", "'symm'", ",", "mode", "=", "'same'", ")", "\n", "score", "=", "score", "/", "score", ".", "max", "(", ")", "-", "subscore", "/", "subscore", ".", "max", "(", ")", "\n", "nms_res", "=", "nms", "(", "score", ",", "nms_ks", ")", "\n", "pth", ",", "ptw", "=", "np", ".", "where", "(", "nms_res", ">", "0.1", ")", "\n", "pts_h", ".", "append", "(", "pth", "*", "ds", ")", "\n", "pts_w", ".", "append", "(", "ptw", "*", "ds", ")", "\n", "", "if", "\"watershed\"", "in", "strategy", ":", "\n", "        ", "edge", "=", "get_edge", "(", "flow", "[", ":", ":", "ds", ",", ":", ":", "ds", ",", ":", "]", ")", "\n", "edge", "/=", "max", "(", "edge", ".", "max", "(", ")", ",", "0.01", ")", "\n", "edge", "=", "(", "edge", ">", "0.1", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "watershed", "=", "ndimage", ".", "distance_transform_edt", "(", "1", "-", "edge", ")", "\n", "nms_res", "=", "nms", "(", "watershed", ",", "nms_ks", ")", "\n", "remove_border", "(", "nms_res", ")", "\n", "pth", ",", "ptw", "=", "np", ".", "where", "(", "nms_res", ">", "0", ")", "\n", "pth", ",", "ptw", "=", "neighbor_elim", "(", "pth", ",", "ptw", ",", "(", "nms_ks", "-", "1", ")", "/", "2", ")", "\n", "pts_h", ".", "append", "(", "pth", "*", "ds", ")", "\n", "pts_w", ".", "append", "(", "ptw", "*", "ds", ")", "\n", "", "if", "\"single\"", "in", "strategy", ":", "\n", "        ", "pth", ",", "ptw", "=", "np", ".", "where", "(", "(", "flow", "[", ":", ",", ":", ",", "0", "]", "!=", "0", ")", "|", "(", "flow", "[", ":", ",", ":", ",", "1", "]", "!=", "0", ")", ")", "\n", "randidx", "=", "np", ".", "random", ".", "randint", "(", "len", "(", "pth", ")", ")", "\n", "pts_h", ".", "append", "(", "pth", "[", "randidx", ":", "randidx", "+", "1", "]", ")", "\n", "pts_w", ".", "append", "(", "ptw", "[", "randidx", ":", "randidx", "+", "1", "]", ")", "\n", "", "if", "'specified'", "in", "strategy", ":", "\n", "        ", "assert", "guidepoint", "is", "not", "None", ",", "\"if using \\\"specified\\\", switch \\\"with_info\\\" on.\"", "\n", "pts_h", ".", "append", "(", "guidepoint", "[", ":", ",", "1", "]", ")", "\n", "pts_w", ".", "append", "(", "guidepoint", "[", ":", ",", "0", "]", ")", "\n", "\n", "", "pts_h", "=", "np", ".", "concatenate", "(", "pts_h", ")", "\n", "pts_w", "=", "np", ".", "concatenate", "(", "pts_w", ")", "\n", "\n", "if", "max_num_guide", "==", "-", "1", ":", "\n", "        ", "max_num_guide", "=", "np", ".", "inf", "\n", "\n", "", "randsel", "=", "np", ".", "random", ".", "permutation", "(", "len", "(", "pts_h", ")", ")", "[", ":", "len", "(", "pts_h", ")", "]", "\n", "selidx", "=", "randsel", "[", "np", ".", "arange", "(", "min", "(", "max_num_guide", ",", "len", "(", "randsel", ")", ")", ")", "]", "\n", "pts_h", "=", "pts_h", "[", "selidx", "]", "\n", "pts_w", "=", "pts_w", "[", "selidx", "]", "\n", "\n", "sparse", "=", "np", ".", "zeros", "(", "flow", ".", "shape", ",", "dtype", "=", "flow", ".", "dtype", ")", "\n", "mask", "=", "np", ".", "zeros", "(", "flow", ".", "shape", ",", "dtype", "=", "np", ".", "int", ")", "\n", "\n", "sparse", "[", ":", ",", ":", ",", "0", "]", "[", "(", "pts_h", ",", "pts_w", ")", "]", "=", "flow", "[", ":", ",", ":", ",", "0", "]", "[", "(", "pts_h", ",", "pts_w", ")", "]", "\n", "sparse", "[", ":", ",", ":", ",", "1", "]", "[", "(", "pts_h", ",", "pts_w", ")", "]", "=", "flow", "[", ":", ",", ":", ",", "1", "]", "[", "(", "pts_h", ",", "pts_w", ")", "]", "\n", "\n", "mask", "[", ":", ",", ":", ",", "0", "]", "[", "(", "pts_h", ",", "pts_w", ")", "]", "=", "1", "\n", "mask", "[", ":", ",", ":", ",", "1", "]", "[", "(", "pts_h", ",", "pts_w", ")", "]", "=", "1", "\n", "return", "sparse", ",", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.data_utils.image_flow_aug": [[226, 234], ["random.random", "img1.transpose.transpose", "img2.transpose.transpose", "flow[].copy"], "function", ["None"], ["", "def", "image_flow_aug", "(", "img1", ",", "img2", ",", "flow", ",", "flip_horizon", "=", "True", ")", ":", "\n", "    ", "if", "flip_horizon", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "img1", "=", "img1", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "img2", "=", "img2", ".", "transpose", "(", "Image", ".", "FLIP_LEFT_RIGHT", ")", "\n", "flow", "=", "flow", "[", ":", ",", ":", ":", "-", "1", ",", ":", "]", ".", "copy", "(", ")", "\n", "flow", "[", ":", ",", ":", ",", "0", "]", "=", "-", "flow", "[", ":", ",", ":", ",", "0", "]", "\n", "", "", "return", "img1", ",", "img2", ",", "flow", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.data_utils.flow_aug": [[235, 249], ["random.uniform", "numpy.sqrt", "numpy.arctan", "random.uniform", "random.random", "random.random", "numpy.cos", "numpy.sin", "numpy.square", "numpy.square"], "function", ["None"], ["", "def", "flow_aug", "(", "flow", ",", "reverse", "=", "True", ",", "scale", "=", "True", ",", "rotate", "=", "True", ")", ":", "\n", "    ", "if", "reverse", ":", "\n", "        ", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "            ", "flow", "=", "-", "flow", "\n", "", "", "if", "scale", ":", "\n", "        ", "rand_scale", "=", "random", ".", "uniform", "(", "0.5", ",", "2.0", ")", "\n", "flow", "=", "flow", "*", "rand_scale", "\n", "", "if", "rotate", "and", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "        ", "lengh", "=", "np", ".", "sqrt", "(", "np", ".", "square", "(", "flow", "[", ":", ",", ":", ",", "0", "]", ")", "+", "np", ".", "square", "(", "flow", "[", ":", ",", ":", ",", "1", "]", ")", ")", "\n", "alpha", "=", "np", ".", "arctan", "(", "flow", "[", ":", ",", ":", ",", "1", "]", "/", "flow", "[", ":", ",", ":", ",", "0", "]", ")", "\n", "theta", "=", "random", ".", "uniform", "(", "0", ",", "np", ".", "pi", "*", "2", ")", "\n", "flow", "[", ":", ",", ":", ",", "0", "]", "=", "lengh", "*", "np", ".", "cos", "(", "alpha", "+", "theta", ")", "\n", "flow", "[", ":", ",", ":", ",", "1", "]", "=", "lengh", "*", "np", ".", "sin", "(", "alpha", "+", "theta", ")", "\n", "", "return", "flow", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.data_utils.draw_gaussian": [[250, 279], ["numpy.arange", "int", "int", "int", "int", "numpy.exp", "max", "max", "max", "min", "max", "min", "min", "min"], "function", ["None"], ["", "def", "draw_gaussian", "(", "img", ",", "pt", ",", "sigma", ",", "type", "=", "'Gaussian'", ")", ":", "\n", "# Check that any part of the gaussian is in-bounds", "\n", "    ", "ul", "=", "[", "int", "(", "pt", "[", "0", "]", "-", "3", "*", "sigma", ")", ",", "int", "(", "pt", "[", "1", "]", "-", "3", "*", "sigma", ")", "]", "\n", "br", "=", "[", "int", "(", "pt", "[", "0", "]", "+", "3", "*", "sigma", "+", "1", ")", ",", "int", "(", "pt", "[", "1", "]", "+", "3", "*", "sigma", "+", "1", ")", "]", "\n", "if", "(", "ul", "[", "0", "]", ">=", "img", ".", "shape", "[", "1", "]", "or", "ul", "[", "1", "]", ">=", "img", ".", "shape", "[", "0", "]", "or", "\n", "br", "[", "0", "]", "<", "0", "or", "br", "[", "1", "]", "<", "0", ")", ":", "\n", "# If not, just return the image as is", "\n", "        ", "return", "img", "\n", "\n", "# Generate gaussian", "\n", "", "size", "=", "6", "*", "sigma", "+", "1", "\n", "x", "=", "np", ".", "arange", "(", "0", ",", "size", ",", "1", ",", "float", ")", "\n", "y", "=", "x", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "x0", "=", "y0", "=", "size", "//", "2", "\n", "# The gaussian is not normalized, we want the center value to equal 1", "\n", "if", "type", "==", "'Gaussian'", ":", "\n", "        ", "g", "=", "np", ".", "exp", "(", "-", "(", "(", "x", "-", "x0", ")", "**", "2", "+", "(", "y", "-", "y0", ")", "**", "2", ")", "/", "(", "2", "*", "sigma", "**", "2", ")", ")", "\n", "", "elif", "type", "==", "'Cauchy'", ":", "\n", "        ", "g", "=", "sigma", "/", "(", "(", "(", "x", "-", "x0", ")", "**", "2", "+", "(", "y", "-", "y0", ")", "**", "2", "+", "sigma", "**", "2", ")", "**", "1.5", ")", "\n", "\n", "# Usable gaussian range", "\n", "", "g_x", "=", "max", "(", "0", ",", "-", "ul", "[", "0", "]", ")", ",", "min", "(", "br", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", ")", "-", "ul", "[", "0", "]", "\n", "g_y", "=", "max", "(", "0", ",", "-", "ul", "[", "1", "]", ")", ",", "min", "(", "br", "[", "1", "]", ",", "img", ".", "shape", "[", "0", "]", ")", "-", "ul", "[", "1", "]", "\n", "# Image range", "\n", "img_x", "=", "max", "(", "0", ",", "ul", "[", "0", "]", ")", ",", "min", "(", "br", "[", "0", "]", ",", "img", ".", "shape", "[", "1", "]", ")", "\n", "img_y", "=", "max", "(", "0", ",", "ul", "[", "1", "]", ")", ",", "min", "(", "br", "[", "1", "]", ",", "img", ".", "shape", "[", "0", "]", ")", "\n", "\n", "img", "[", "img_y", "[", "0", "]", ":", "img_y", "[", "1", "]", ",", "img_x", "[", "0", "]", ":", "img_x", "[", "1", "]", "]", "=", "g", "[", "g_y", "[", "0", "]", ":", "g_y", "[", "1", "]", ",", "g_x", "[", "0", "]", ":", "g_x", "[", "1", "]", "]", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.scheduler._LRScheduler.__init__": [[5, 20], ["list", "isinstance", "TypeError", "enumerate", "map", "group.setdefault", "KeyError", "type"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "last_iter", "=", "-", "1", ")", ":", "\n", "        ", "if", "not", "isinstance", "(", "optimizer", ",", "torch", ".", "optim", ".", "Optimizer", ")", ":", "\n", "            ", "raise", "TypeError", "(", "'{} is not an Optimizer'", ".", "format", "(", "\n", "type", "(", "optimizer", ")", ".", "__name__", ")", ")", "\n", "", "self", ".", "optimizer", "=", "optimizer", "\n", "if", "last_iter", "==", "-", "1", ":", "\n", "            ", "for", "group", "in", "optimizer", ".", "param_groups", ":", "\n", "                ", "group", ".", "setdefault", "(", "'initial_lr'", ",", "group", "[", "'lr'", "]", ")", "\n", "", "", "else", ":", "\n", "            ", "for", "i", ",", "group", "in", "enumerate", "(", "optimizer", ".", "param_groups", ")", ":", "\n", "                ", "if", "'initial_lr'", "not", "in", "group", ":", "\n", "                    ", "raise", "KeyError", "(", "\"param 'initial_lr' is not specified \"", "\n", "\"in param_groups[{}] when resuming an optimizer\"", ".", "format", "(", "i", ")", ")", "\n", "", "", "", "self", ".", "base_lrs", "=", "list", "(", "map", "(", "lambda", "group", ":", "group", "[", "'initial_lr'", "]", ",", "optimizer", ".", "param_groups", ")", ")", "\n", "self", ".", "last_iter", "=", "last_iter", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.scheduler._LRScheduler._get_new_lr": [[21, 23], ["None"], "methods", ["None"], ["", "def", "_get_new_lr", "(", "self", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.scheduler._LRScheduler.get_lr": [[24, 26], ["list", "map"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "return", "list", "(", "map", "(", "lambda", "group", ":", "group", "[", "'lr'", "]", ",", "self", ".", "optimizer", ".", "param_groups", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.scheduler._LRScheduler.step": [[27, 33], ["zip", "scheduler._LRScheduler._get_new_lr"], "methods", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.scheduler.StepLRScheduler._get_new_lr"], ["", "def", "step", "(", "self", ",", "this_iter", "=", "None", ")", ":", "\n", "        ", "if", "this_iter", "is", "None", ":", "\n", "            ", "this_iter", "=", "self", ".", "last_iter", "+", "1", "\n", "", "self", ".", "last_iter", "=", "this_iter", "\n", "for", "param_group", ",", "lr", "in", "zip", "(", "self", ".", "optimizer", ".", "param_groups", ",", "self", ".", "_get_new_lr", "(", ")", ")", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.scheduler._WarmUpLRSchedulerOld.__init__": [[36, 44], ["scheduler._LRScheduler.__init__"], "methods", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.backbone.alexnet.AlexNetBN_FCN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "base_lr", ",", "warmup_lr", ",", "warmup_steps", ",", "last_iter", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "base_lr", "=", "base_lr", "\n", "self", ".", "warmup_steps", "=", "warmup_steps", "\n", "if", "warmup_steps", "==", "0", ":", "\n", "            ", "self", ".", "warmup_lr", "=", "base_lr", "\n", "", "else", ":", "\n", "            ", "self", ".", "warmup_lr", "=", "warmup_lr", "\n", "", "super", "(", "_WarmUpLRSchedulerOld", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_iter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.scheduler._WarmUpLRSchedulerOld._get_warmup_lr": [[45, 53], ["None"], "methods", ["None"], ["", "def", "_get_warmup_lr", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "warmup_steps", ">", "0", "and", "self", ".", "last_iter", "<", "self", ".", "warmup_steps", ":", "\n", "# first compute relative scale for self.base_lr, then multiply to base_lr", "\n", "            ", "scale", "=", "(", "(", "self", ".", "last_iter", "/", "self", ".", "warmup_steps", ")", "*", "(", "self", ".", "warmup_lr", "-", "self", ".", "base_lr", ")", "+", "self", ".", "base_lr", ")", "/", "self", ".", "base_lr", "\n", "#print('last_iter: {}, warmup_lr: {}, base_lr: {}, scale: {}'.format(self.last_iter, self.warmup_lr, self.base_lr, scale))", "\n", "return", "[", "scale", "*", "base_lr", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.scheduler._WarmUpLRScheduler.__init__": [[56, 64], ["isinstance", "isinstance", "scheduler._LRScheduler.__init__", "len", "len"], "methods", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.backbone.alexnet.AlexNetBN_FCN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "base_lr", ",", "warmup_lr", ",", "warmup_steps", ",", "last_iter", "=", "-", "1", ")", ":", "\n", "        ", "self", ".", "base_lr", "=", "base_lr", "\n", "self", ".", "warmup_lr", "=", "warmup_lr", "\n", "self", ".", "warmup_steps", "=", "warmup_steps", "\n", "assert", "isinstance", "(", "warmup_lr", ",", "list", ")", "\n", "assert", "isinstance", "(", "warmup_steps", ",", "list", ")", "\n", "assert", "len", "(", "warmup_lr", ")", "==", "len", "(", "warmup_steps", ")", "\n", "super", "(", "_WarmUpLRScheduler", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_iter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.scheduler._WarmUpLRScheduler._get_warmup_lr": [[65, 76], ["bisect.bisect_right", "len"], "methods", ["None"], ["", "def", "_get_warmup_lr", "(", "self", ")", ":", "\n", "        ", "pos", "=", "bisect_right", "(", "self", ".", "warmup_steps", ",", "self", ".", "last_iter", ")", "\n", "if", "pos", ">=", "len", "(", "self", ".", "warmup_steps", ")", ":", "\n", "            ", "return", "None", "\n", "", "else", ":", "\n", "            ", "if", "pos", "==", "0", ":", "\n", "                ", "curr_lr", "=", "self", ".", "base_lr", "+", "self", ".", "last_iter", "*", "(", "self", ".", "warmup_lr", "[", "pos", "]", "-", "self", ".", "base_lr", ")", "/", "self", ".", "warmup_steps", "[", "pos", "]", "\n", "", "else", ":", "\n", "                ", "curr_lr", "=", "self", ".", "warmup_lr", "[", "pos", "-", "1", "]", "+", "(", "self", ".", "last_iter", "-", "self", ".", "warmup_steps", "[", "pos", "-", "1", "]", ")", "*", "(", "self", ".", "warmup_lr", "[", "pos", "]", "-", "self", ".", "warmup_lr", "[", "pos", "-", "1", "]", ")", "/", "(", "self", ".", "warmup_steps", "[", "pos", "]", "-", "self", ".", "warmup_steps", "[", "pos", "-", "1", "]", ")", "\n", "", "", "scale", "=", "curr_lr", "/", "self", ".", "base_lr", "\n", "return", "[", "scale", "*", "base_lr", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.scheduler.StepLRScheduler.__init__": [[78, 91], ["scheduler._WarmUpLRScheduler.__init__", "len", "len", "isinstance", "ValueError", "scheduler.StepLRScheduler.lr_mults.append", "list", "sorted"], "methods", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.backbone.alexnet.AlexNetBN_FCN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "optimizer", ",", "milestones", ",", "lr_mults", ",", "base_lr", ",", "warmup_lr", ",", "warmup_steps", ",", "last_iter", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "StepLRScheduler", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "base_lr", ",", "warmup_lr", ",", "warmup_steps", ",", "last_iter", ")", "\n", "\n", "assert", "len", "(", "milestones", ")", "==", "len", "(", "lr_mults", ")", ",", "\"{} vs {}\"", ".", "format", "(", "milestones", ",", "lr_mults", ")", "\n", "for", "x", "in", "milestones", ":", "\n", "            ", "assert", "isinstance", "(", "x", ",", "int", ")", "\n", "", "if", "not", "list", "(", "milestones", ")", "==", "sorted", "(", "milestones", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'Milestones should be a list of'", "\n", "' increasing integers. Got {}'", ",", "milestones", ")", "\n", "", "self", ".", "milestones", "=", "milestones", "\n", "self", ".", "lr_mults", "=", "[", "1.0", "]", "\n", "for", "x", "in", "lr_mults", ":", "\n", "            ", "self", ".", "lr_mults", ".", "append", "(", "self", ".", "lr_mults", "[", "-", "1", "]", "*", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.scheduler.StepLRScheduler._get_new_lr": [[92, 103], ["scheduler.StepLRScheduler._get_warmup_lr", "bisect.bisect_right", "len"], "methods", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.scheduler._WarmUpLRScheduler._get_warmup_lr"], ["", "", "def", "_get_new_lr", "(", "self", ")", ":", "\n", "        ", "warmup_lrs", "=", "self", ".", "_get_warmup_lr", "(", ")", "\n", "if", "warmup_lrs", "is", "not", "None", ":", "\n", "            ", "return", "warmup_lrs", "\n", "\n", "", "pos", "=", "bisect_right", "(", "self", ".", "milestones", ",", "self", ".", "last_iter", ")", "\n", "if", "len", "(", "self", ".", "warmup_lr", ")", "==", "0", ":", "\n", "            ", "scale", "=", "self", ".", "lr_mults", "[", "pos", "]", "\n", "", "else", ":", "\n", "            ", "scale", "=", "self", ".", "warmup_lr", "[", "-", "1", "]", "*", "self", ".", "lr_mults", "[", "pos", "]", "/", "self", ".", "base_lr", "\n", "", "return", "[", "base_lr", "*", "scale", "for", "base_lr", "in", "self", ".", "base_lrs", "]", "\n", "", "", ""]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.visualize_utils.Fuser.__init__": [[7, 12], ["float", "torch.arange().view().float().cuda", "torch.arange().view().float", "torch.arange().view", "torch.arange"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "nbins", ",", "fmax", ")", ":", "\n", "        ", "self", ".", "nbins", "=", "nbins", "\n", "self", ".", "fmax", "=", "fmax", "\n", "self", ".", "step", "=", "2", "*", "fmax", "/", "float", "(", "nbins", ")", "\n", "self", ".", "mesh", "=", "torch", ".", "arange", "(", "nbins", ")", ".", "view", "(", "1", ",", "-", "1", ",", "1", ",", "1", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "*", "self", ".", "step", "-", "fmax", "+", "self", ".", "step", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.visualize_utils.Fuser.convert_flow": [[13, 20], ["torch.nn.functional.softmax", "torch.nn.functional.softmax", "torch.cat", "torch.nn.functional.softmax.sum", "torch.nn.functional.softmax.sum"], "methods", ["None"], ["", "def", "convert_flow", "(", "self", ",", "flow_prob", ")", ":", "\n", "        ", "flow_probx", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "flow_prob", "[", ":", ",", ":", "self", ".", "nbins", ",", ":", ",", ":", "]", ",", "dim", "=", "1", ")", "\n", "flow_proby", "=", "torch", ".", "nn", ".", "functional", ".", "softmax", "(", "flow_prob", "[", ":", ",", "self", ".", "nbins", ":", ",", ":", ",", ":", "]", ",", "dim", "=", "1", ")", "\n", "flow_probx", "*=", "self", ".", "mesh", "\n", "flow_proby", "*=", "self", ".", "mesh", "\n", "flow", "=", "torch", ".", "cat", "(", "[", "flow_probx", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", ",", "flow_proby", ".", "sum", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "]", ",", "dim", "=", "1", ")", "\n", "return", "flow", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.visualize_utils.visualize_tensor_old": [[21, 34], ["torch.cat", "visualize_utils.draw_cross", "visualize_utils.flow_to_image", "visualize_utils.flow_to_image", "torch.cat.append", "torch.cat.append", "torch.cat.append", "visualize_utils.unormalize", "mask.cpu", "flow_pred.detach().cpu", "flow_target.detach().cpu", "torch.clamp", "torch.clamp", "torch.clamp", "image.cpu", "int", "visualize_utils.unormalize", "visualize_utils.unormalize", "visualize_utils.unormalize", "flow_pred.detach", "flow_target.detach", "warped.detach().cpu", "rgb_gen.detach().cpu", "image_target.cpu", "image.size", "warped.detach", "rgb_gen.detach"], "function", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.visualize_utils.draw_cross", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.visualize_utils.flow_to_image", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.visualize_utils.flow_to_image", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.visualize_utils.unormalize", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.visualize_utils.unormalize", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.visualize_utils.unormalize", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.visualize_utils.unormalize"], ["", "", "def", "visualize_tensor_old", "(", "image", ",", "mask", ",", "flow_pred", ",", "flow_target", ",", "warped", ",", "rgb_gen", ",", "image_target", ",", "image_mean", ",", "image_div", ")", ":", "\n", "    ", "together", "=", "[", "\n", "draw_cross", "(", "unormalize", "(", "image", ".", "cpu", "(", ")", ",", "mean", "=", "image_mean", ",", "div", "=", "image_div", ")", ",", "mask", ".", "cpu", "(", ")", ",", "radius", "=", "int", "(", "image", ".", "size", "(", "3", ")", "/", "50.", ")", ")", ",", "\n", "flow_to_image", "(", "flow_pred", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", ",", "\n", "flow_to_image", "(", "flow_target", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "]", "\n", "if", "warped", "is", "not", "None", ":", "\n", "        ", "together", ".", "append", "(", "torch", ".", "clamp", "(", "unormalize", "(", "warped", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "mean", "=", "image_mean", ",", "div", "=", "image_div", ")", ",", "0", ",", "255", ")", ")", "\n", "", "if", "rgb_gen", "is", "not", "None", ":", "\n", "        ", "together", ".", "append", "(", "torch", ".", "clamp", "(", "unormalize", "(", "rgb_gen", ".", "detach", "(", ")", ".", "cpu", "(", ")", ",", "mean", "=", "image_mean", ",", "div", "=", "image_div", ")", ",", "0", ",", "255", ")", ")", "\n", "", "if", "image_target", "is", "not", "None", ":", "\n", "        ", "together", ".", "append", "(", "torch", ".", "clamp", "(", "unormalize", "(", "image_target", ".", "cpu", "(", ")", ",", "mean", "=", "image_mean", ",", "div", "=", "image_div", ")", ",", "0", ",", "255", ")", ")", "\n", "", "together", "=", "torch", ".", "cat", "(", "together", ",", "dim", "=", "3", ")", "\n", "return", "together", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.visualize_utils.visualize_tensor": [[35, 46], ["torch.cat", "visualize_utils.draw_cross", "torch.cat.append", "torch.cat.append", "torch.cat.append", "visualize_utils.unormalize", "mask.cpu", "visualize_utils.flow_to_image", "torch.clamp", "torch.clamp", "image.cpu", "int", "ft.cpu", "ct.cpu", "visualize_utils.unormalize", "rt.cpu", "image.size"], "function", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.visualize_utils.draw_cross", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.visualize_utils.unormalize", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.visualize_utils.flow_to_image", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.visualize_utils.unormalize"], ["", "def", "visualize_tensor", "(", "image", ",", "mask", ",", "flow_tensors", ",", "common_tensors", ",", "rgb_tensors", ",", "image_mean", ",", "image_div", ")", ":", "\n", "    ", "together", "=", "[", "\n", "draw_cross", "(", "unormalize", "(", "image", ".", "cpu", "(", ")", ",", "mean", "=", "image_mean", ",", "div", "=", "image_div", ")", ",", "mask", ".", "cpu", "(", ")", ",", "radius", "=", "int", "(", "image", ".", "size", "(", "3", ")", "/", "50.", ")", ")", "]", "\n", "for", "ft", "in", "flow_tensors", ":", "\n", "        ", "together", ".", "append", "(", "flow_to_image", "(", "ft", ".", "cpu", "(", ")", ")", ")", "\n", "", "for", "ct", "in", "common_tensors", ":", "\n", "        ", "together", ".", "append", "(", "torch", ".", "clamp", "(", "ct", ".", "cpu", "(", ")", ",", "0", ",", "255", ")", ")", "\n", "", "for", "rt", "in", "rgb_tensors", ":", "\n", "        ", "together", ".", "append", "(", "torch", ".", "clamp", "(", "unormalize", "(", "rt", ".", "cpu", "(", ")", ",", "mean", "=", "image_mean", ",", "div", "=", "image_div", ")", ",", "0", ",", "255", ")", ")", "\n", "", "together", "=", "torch", ".", "cat", "(", "together", ",", "dim", "=", "3", ")", "\n", "return", "together", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.visualize_utils.unormalize": [[48, 52], ["enumerate", "zip", "tensor[].mul_().add_", "tensor[].mul_"], "function", ["None"], ["", "def", "unormalize", "(", "tensor", ",", "mean", ",", "div", ")", ":", "\n", "    ", "for", "c", ",", "(", "m", ",", "d", ")", "in", "enumerate", "(", "zip", "(", "mean", ",", "div", ")", ")", ":", "\n", "        ", "tensor", "[", ":", ",", "c", ",", ":", ",", ":", "]", ".", "mul_", "(", "d", ")", ".", "add_", "(", "m", ")", "\n", "", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.visualize_utils.flow_to_image": [[54, 58], ["flow.numpy.numpy", "numpy.array().astype", "torch.from_numpy", "numpy.array", "flowlib.flow_to_image().transpose", "flowlib.flow_to_image", "fl.transpose"], "function", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.visualize_utils.flow_to_image"], ["", "def", "flow_to_image", "(", "flow", ")", ":", "\n", "    ", "flow", "=", "flow", ".", "numpy", "(", ")", "\n", "flow_img", "=", "np", ".", "array", "(", "[", "flowlib", ".", "flow_to_image", "(", "fl", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", ")", ".", "transpose", "(", "(", "2", ",", "0", ",", "1", ")", ")", "for", "fl", "in", "flow", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "return", "torch", ".", "from_numpy", "(", "flow_img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.visualize_utils.shift_tensor": [[59, 65], ["torch.zeros", "input.size", "input.size", "input.size", "max", "min", "max", "min", "max", "min", "max", "min"], "function", ["None"], ["", "def", "shift_tensor", "(", "input", ",", "offh", ",", "offw", ")", ":", "\n", "    ", "new", "=", "torch", ".", "zeros", "(", "input", ".", "size", "(", ")", ")", "\n", "h", "=", "input", ".", "size", "(", "2", ")", "\n", "w", "=", "input", ".", "size", "(", "3", ")", "\n", "new", "[", ":", ",", ":", ",", "max", "(", "0", ",", "offh", ")", ":", "min", "(", "h", ",", "h", "+", "offh", ")", ",", "max", "(", "0", ",", "offw", ")", ":", "min", "(", "w", ",", "w", "+", "offw", ")", "]", "=", "input", "[", ":", ",", ":", ",", "max", "(", "0", ",", "-", "offh", ")", ":", "min", "(", "h", ",", "h", "-", "offh", ")", ",", "max", "(", "0", ",", "-", "offw", ")", ":", "min", "(", "w", ",", "w", "-", "offw", ")", "]", "\n", "return", "new", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.visualize_utils.draw_block": [[66, 79], ["range", "sum", "range", "all_mask.append", "visualize_utils.shift_tensor"], "function", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.visualize_utils.shift_tensor"], ["", "def", "draw_block", "(", "mask", ",", "radius", "=", "5", ")", ":", "\n", "    ", "'''\n    input:  tensor (NxCxHxW)\n    output: block_mask (Nx1xHxW)\n    '''", "\n", "all_mask", "=", "[", "]", "\n", "mask", "=", "mask", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", "\n", "for", "offh", "in", "range", "(", "-", "radius", ",", "radius", "+", "1", ")", ":", "\n", "        ", "for", "offw", "in", "range", "(", "-", "radius", ",", "radius", "+", "1", ")", ":", "\n", "            ", "all_mask", ".", "append", "(", "shift_tensor", "(", "mask", ",", "offh", ",", "offw", ")", ")", "\n", "", "", "block_mask", "=", "sum", "(", "all_mask", ")", "\n", "block_mask", "[", "block_mask", ">", "0", "]", "=", "1", "\n", "return", "block_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.visualize_utils.expand_block": [[80, 91], ["range", "sum", "range", "all_sparse.append", "visualize_utils.shift_tensor"], "function", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.visualize_utils.shift_tensor"], ["", "def", "expand_block", "(", "sparse", ",", "radius", "=", "5", ")", ":", "\n", "    ", "'''\n    input:  sparse (NxCxHxW)\n    output: block_sparse (NxCxHxW)\n    '''", "\n", "all_sparse", "=", "[", "]", "\n", "for", "offh", "in", "range", "(", "-", "radius", ",", "radius", "+", "1", ")", ":", "\n", "        ", "for", "offw", "in", "range", "(", "-", "radius", ",", "radius", "+", "1", ")", ":", "\n", "            ", "all_sparse", ".", "append", "(", "shift_tensor", "(", "sparse", ",", "offh", ",", "offw", ")", ")", "\n", "", "", "block_sparse", "=", "sum", "(", "all_sparse", ")", "\n", "return", "block_sparse", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.visualize_utils.draw_cross": [[92, 110], ["range", "sum", "tensor.clone", "range", "all_mask.append", "all_mask.append", "visualize_utils.shift_tensor", "visualize_utils.shift_tensor"], "function", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.visualize_utils.shift_tensor", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.visualize_utils.shift_tensor"], ["", "def", "draw_cross", "(", "tensor", ",", "mask", ",", "radius", "=", "5", ",", "thickness", "=", "2", ")", ":", "\n", "    ", "'''\n    input:  tensor (NxCxHxW)\n            mask (NxXxHxW)\n    output: new_tensor (NxCxHxW)\n    '''", "\n", "all_mask", "=", "[", "]", "\n", "mask", "=", "mask", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", "\n", "for", "off", "in", "range", "(", "-", "radius", ",", "radius", "+", "1", ")", ":", "\n", "        ", "for", "t", "in", "range", "(", "-", "thickness", ",", "thickness", "+", "1", ")", ":", "\n", "            ", "all_mask", ".", "append", "(", "shift_tensor", "(", "mask", ",", "off", ",", "t", ")", ")", "\n", "all_mask", ".", "append", "(", "shift_tensor", "(", "mask", ",", "t", ",", "off", ")", ")", "\n", "", "", "cross_mask", "=", "sum", "(", "all_mask", ")", "\n", "new_tensor", "=", "tensor", ".", "clone", "(", ")", "\n", "new_tensor", "[", ":", ",", "0", ":", "1", ",", ":", ",", ":", "]", "[", "cross_mask", ">", "0", "]", "=", "255.0", "\n", "new_tensor", "[", ":", ",", "1", ":", "2", ",", ":", ",", ":", "]", "[", "cross_mask", ">", "0", "]", "=", "0.0", "\n", "new_tensor", "[", ":", ",", "2", ":", "3", ",", ":", ",", ":", "]", "[", "cross_mask", ">", "0", "]", "=", "0.0", "\n", "return", "new_tensor", "\n", "", ""]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.tools.weight_process.main": [[22, 45], ["os.path.dirname", "yaml.load.items", "torch.nn.DataParallel", "torch.load", "torch.nn.DataParallel.load_state_dict", "torch.save", "open", "packaging.version.parse", "setattr", "torch.nn.DataParallel.state_dict", "yaml.load", "yaml.load"], "function", ["None"], ["def", "main", "(", ")", ":", "\n", "    ", "exp_dir", "=", "os", ".", "path", ".", "dirname", "(", "args", ".", "config", ")", "\n", "\n", "with", "open", "(", "args", ".", "config", ")", "as", "f", ":", "\n", "        ", "if", "version", ".", "parse", "(", "yaml", ".", "version", ">=", "\"5.1\"", ")", ":", "\n", "            ", "config", "=", "yaml", ".", "load", "(", "f", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "", "else", ":", "\n", "            ", "config", "=", "yaml", ".", "load", "(", "f", ")", "\n", "\n", "", "", "for", "k", ",", "v", "in", "config", ".", "items", "(", ")", ":", "\n", "        ", "setattr", "(", "args", ",", "k", ",", "v", ")", "\n", "\n", "", "model", "=", "models", ".", "modules", ".", "__dict__", "[", "args", ".", "model", "[", "'module'", "]", "[", "'arch'", "]", "]", "(", "args", ".", "model", "[", "'module'", "]", ")", "\n", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", "\n", "\n", "ckpt_path", "=", "exp_dir", "+", "'/checkpoints/ckpt_iter_{}.pth.tar'", ".", "format", "(", "args", ".", "iter", ")", "\n", "save_path", "=", "exp_dir", "+", "'/checkpoints/convert_iter_{}.pth.tar'", ".", "format", "(", "args", ".", "iter", ")", "\n", "ckpt", "=", "torch", ".", "load", "(", "ckpt_path", ")", "\n", "weight", "=", "ckpt", "[", "'state_dict'", "]", "\n", "model", ".", "load_state_dict", "(", "weight", ",", "strict", "=", "True", ")", "\n", "model", "=", "model", ".", "module", ".", "image_encoder", "\n", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "save_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.models.cmp.CMP.__init__": [[11, 29], ["SingleStageModel.__init__", "utils.Fuser", "torch.SmoothL1Loss", "torch.SmoothL1Loss", "torch.MSELoss", "torch.MSELoss", "losses.DiscreteLoss", "Exception"], "methods", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.backbone.alexnet.AlexNetBN_FCN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "dist_model", "=", "False", ")", ":", "\n", "        ", "super", "(", "CMP", ",", "self", ")", ".", "__init__", "(", "params", ",", "dist_model", ")", "\n", "model_params", "=", "params", "[", "'module'", "]", "\n", "\n", "# define loss", "\n", "if", "model_params", "[", "'flow_criterion'", "]", "==", "'L1'", ":", "\n", "            ", "self", ".", "flow_criterion", "=", "nn", ".", "SmoothL1Loss", "(", ")", "\n", "", "elif", "model_params", "[", "'flow_criterion'", "]", "==", "'L2'", ":", "\n", "            ", "self", ".", "flow_criterion", "=", "nn", ".", "MSELoss", "(", ")", "\n", "", "elif", "model_params", "[", "'flow_criterion'", "]", "==", "'DiscreteLoss'", ":", "\n", "            ", "self", ".", "flow_criterion", "=", "losses", ".", "DiscreteLoss", "(", "\n", "nbins", "=", "model_params", "[", "'nbins'", "]", ",", "fmax", "=", "model_params", "[", "'fmax'", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"No such flow loss: {}\"", ".", "format", "(", "model_params", "[", "'flow_criterion'", "]", ")", ")", "\n", "\n", "", "self", ".", "fuser", "=", "utils", ".", "Fuser", "(", "nbins", "=", "model_params", "[", "'nbins'", "]", ",", "\n", "fmax", "=", "model_params", "[", "'fmax'", "]", ")", "\n", "self", ".", "model_params", "=", "model_params", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.models.cmp.CMP.eval": [[30, 56], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "cmp.CMP.model", "cmp.CMP.fuser.convert_flow", "torch.functional.interpolate", "torch.functional.interpolate", "torch.functional.interpolate", "torch.functional.interpolate", "cmp.CMP.flow_criterion"], "methods", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.visualize_utils.Fuser.convert_flow"], ["", "def", "eval", "(", "self", ",", "ret_loss", "=", "True", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "cmp_output", "=", "self", ".", "model", "(", "self", ".", "image_input", ",", "self", ".", "sparse_input", ")", "\n", "", "if", "self", ".", "model_params", "[", "'flow_criterion'", "]", "==", "\"DiscreteLoss\"", ":", "\n", "            ", "self", ".", "flow", "=", "self", ".", "fuser", ".", "convert_flow", "(", "cmp_output", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "flow", "=", "cmp_output", "\n", "", "if", "self", ".", "flow", ".", "shape", "[", "2", "]", "!=", "self", ".", "image_input", ".", "shape", "[", "2", "]", ":", "\n", "            ", "self", ".", "flow", "=", "nn", ".", "functional", ".", "interpolate", "(", "\n", "self", ".", "flow", ",", "size", "=", "self", ".", "image_input", ".", "shape", "[", "2", ":", "4", "]", ",", "\n", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", "\n", "\n", "", "ret_tensors", "=", "{", "\n", "'flow_tensors'", ":", "[", "self", ".", "flow", ",", "self", ".", "flow_target", "]", ",", "\n", "'common_tensors'", ":", "[", "]", ",", "\n", "'rgb_tensors'", ":", "[", "]", "}", "# except for image_input", "\n", "\n", "if", "ret_loss", ":", "\n", "            ", "if", "cmp_output", ".", "shape", "[", "2", "]", "!=", "self", ".", "flow_target", ".", "shape", "[", "2", "]", ":", "\n", "                ", "cmp_output", "=", "nn", ".", "functional", ".", "interpolate", "(", "\n", "cmp_output", ",", "size", "=", "self", ".", "flow_target", ".", "shape", "[", "2", ":", "4", "]", ",", "\n", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", "\n", "", "loss_flow", "=", "self", ".", "flow_criterion", "(", "cmp_output", ",", "self", ".", "flow_target", ")", "/", "self", ".", "world_size", "\n", "return", "ret_tensors", ",", "{", "'loss_flow'", ":", "loss_flow", "}", "\n", "", "else", ":", "\n", "            ", "return", "ret_tensors", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.models.cmp.CMP.step": [[57, 65], ["cmp.CMP.model", "cmp.CMP.optim.zero_grad", "loss_flow.backward", "utils.average_gradients", "cmp.CMP.optim.step", "cmp.CMP.flow_criterion"], "methods", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.distributed_utils.average_gradients", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.models.single_stage_model.SingleStageModel.step"], ["", "", "def", "step", "(", "self", ")", ":", "\n", "        ", "cmp_output", "=", "self", ".", "model", "(", "self", ".", "image_input", ",", "self", ".", "sparse_input", ")", "\n", "loss_flow", "=", "self", ".", "flow_criterion", "(", "cmp_output", ",", "self", ".", "flow_target", ")", "/", "self", ".", "world_size", "\n", "self", ".", "optim", ".", "zero_grad", "(", ")", "\n", "loss_flow", ".", "backward", "(", ")", "\n", "utils", ".", "average_gradients", "(", "self", ".", "model", ")", "\n", "self", ".", "optim", ".", "step", "(", ")", "\n", "return", "{", "'loss_flow'", ":", "loss_flow", "}", "\n", "", "", ""]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.models.single_stage_model.SingleStageModel.__init__": [[11, 35], ["utils.init_weights", "single_stage_model.SingleStageModel.model.cuda", "utils.DistModule", "torch.get_world_size", "torch.get_world_size", "torch.get_world_size", "models.modules.FixModule", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "single_stage_model.SingleStageModel.model.parameters", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "Exception", "single_stage_model.SingleStageModel.model.parameters"], "methods", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.common_utils.init_weights"], ["    ", "def", "__init__", "(", "self", ",", "params", ",", "dist_model", "=", "False", ")", ":", "\n", "        ", "model_params", "=", "params", "[", "'module'", "]", "\n", "self", ".", "model", "=", "models", ".", "modules", ".", "__dict__", "[", "params", "[", "'module'", "]", "[", "'arch'", "]", "]", "(", "model_params", ")", "\n", "utils", ".", "init_weights", "(", "self", ".", "model", ",", "init_type", "=", "'xavier'", ")", "\n", "self", ".", "model", ".", "cuda", "(", ")", "\n", "if", "dist_model", ":", "\n", "            ", "self", ".", "model", "=", "utils", ".", "DistModule", "(", "self", ".", "model", ")", "\n", "self", ".", "world_size", "=", "dist", ".", "get_world_size", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", "=", "models", ".", "modules", ".", "FixModule", "(", "self", ".", "model", ")", "\n", "self", ".", "world_size", "=", "1", "\n", "\n", "", "if", "params", "[", "'optim'", "]", "==", "'SGD'", ":", "\n", "            ", "self", ".", "optim", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "params", "[", "'lr'", "]", ",", "\n", "momentum", "=", "0.9", ",", "weight_decay", "=", "0.0001", ")", "\n", "", "elif", "params", "[", "'optim'", "]", "==", "'Adam'", ":", "\n", "            ", "self", ".", "optim", "=", "torch", ".", "optim", ".", "Adam", "(", "\n", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "params", "[", "'lr'", "]", ",", "\n", "betas", "=", "(", "params", "[", "'beta1'", "]", ",", "0.999", ")", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"No such optimizer: {}\"", ".", "format", "(", "params", "[", "'optim'", "]", ")", ")", "\n", "\n", "", "cudnn", ".", "benchmark", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.models.single_stage_model.SingleStageModel.set_input": [[36, 41], ["None"], "methods", ["None"], ["", "def", "set_input", "(", "self", ",", "image_input", ",", "sparse_input", ",", "flow_target", "=", "None", ",", "rgb_target", "=", "None", ")", ":", "\n", "        ", "self", ".", "image_input", "=", "image_input", "\n", "self", ".", "sparse_input", "=", "sparse_input", "\n", "self", ".", "flow_target", "=", "flow_target", "\n", "self", ".", "rgb_target", "=", "rgb_target", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.models.single_stage_model.SingleStageModel.eval": [[42, 44], ["None"], "methods", ["None"], ["", "def", "eval", "(", "self", ",", "ret_loss", "=", "True", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.models.single_stage_model.SingleStageModel.step": [[45, 47], ["None"], "methods", ["None"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.models.single_stage_model.SingleStageModel.load_state": [[48, 55], ["os.path.join", "utils.load_state", "utils.load_state"], "methods", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.models.single_stage_model.SingleStageModel.load_state", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.models.single_stage_model.SingleStageModel.load_state"], ["", "def", "load_state", "(", "self", ",", "path", ",", "Iter", ",", "resume", "=", "False", ")", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "\"ckpt_iter_{}.pth.tar\"", ".", "format", "(", "Iter", ")", ")", "\n", "\n", "if", "resume", ":", "\n", "            ", "utils", ".", "load_state", "(", "path", ",", "self", ".", "model", ",", "self", ".", "optim", ")", "\n", "", "else", ":", "\n", "            ", "utils", ".", "load_state", "(", "path", ",", "self", ".", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.models.single_stage_model.SingleStageModel.load_pretrain": [[56, 58], ["utils.load_state"], "methods", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.models.single_stage_model.SingleStageModel.load_state"], ["", "", "def", "load_pretrain", "(", "self", ",", "load_path", ")", ":", "\n", "        ", "utils", ".", "load_state", "(", "load_path", ",", "self", ".", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.models.single_stage_model.SingleStageModel.save_state": [[59, 66], ["os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "single_stage_model.SingleStageModel.model.state_dict", "single_stage_model.SingleStageModel.optim.state_dict"], "methods", ["None"], ["", "def", "save_state", "(", "self", ",", "path", ",", "Iter", ")", ":", "\n", "        ", "path", "=", "os", ".", "path", ".", "join", "(", "path", ",", "\"ckpt_iter_{}.pth.tar\"", ".", "format", "(", "Iter", ")", ")", "\n", "\n", "torch", ".", "save", "(", "{", "\n", "'step'", ":", "Iter", ",", "\n", "'state_dict'", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "self", ".", "optim", ".", "state_dict", "(", ")", "}", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.models.single_stage_model.SingleStageModel.switch_to": [[67, 72], ["single_stage_model.SingleStageModel.model.train", "single_stage_model.SingleStageModel.model.eval"], "methods", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.utils.distributed_utils.DistModule.train", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.models.single_stage_model.SingleStageModel.eval"], ["", "def", "switch_to", "(", "self", ",", "phase", ")", ":", "\n", "        ", "if", "phase", "==", "'train'", ":", "\n", "            ", "self", ".", "model", ".", "train", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "model", ".", "eval", "(", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.modules.cmp.CMP.__init__": [[7, 25], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.backbone.alexnet.AlexNetBN_FCN.__init__"], ["from", ".", "import", "SingleStageModel", "\n", "\n", "class", "CMP", "(", "SingleStageModel", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "params", ",", "dist_model", "=", "False", ")", ":", "\n", "        ", "super", "(", "CMP", ",", "self", ")", ".", "__init__", "(", "params", ",", "dist_model", ")", "\n", "model_params", "=", "params", "[", "'module'", "]", "\n", "\n", "# define loss", "\n", "if", "model_params", "[", "'flow_criterion'", "]", "==", "'L1'", ":", "\n", "            ", "self", ".", "flow_criterion", "=", "nn", ".", "SmoothL1Loss", "(", ")", "\n", "", "elif", "model_params", "[", "'flow_criterion'", "]", "==", "'L2'", ":", "\n", "            ", "self", ".", "flow_criterion", "=", "nn", ".", "MSELoss", "(", ")", "\n", "", "elif", "model_params", "[", "'flow_criterion'", "]", "==", "'DiscreteLoss'", ":", "\n", "            ", "self", ".", "flow_criterion", "=", "losses", ".", "DiscreteLoss", "(", "\n", "nbins", "=", "model_params", "[", "'nbins'", "]", ",", "fmax", "=", "model_params", "[", "'fmax'", "]", ")", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", "\"No such flow loss: {}\"", ".", "format", "(", "model_params", "[", "'flow_criterion'", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.modules.cmp.CMP.forward": [[26, 35], ["cmp.CMP.flow_encoder", "cmp.CMP.image_encoder", "cmp.CMP.flow_decoder", "cmp.CMP.image_encoder", "cmp.CMP.flow_decoder", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "self", ".", "fuser", "=", "utils", ".", "Fuser", "(", "nbins", "=", "model_params", "[", "'nbins'", "]", ",", "\n", "fmax", "=", "model_params", "[", "'fmax'", "]", ")", "\n", "self", ".", "model_params", "=", "model_params", "\n", "\n", "", "def", "eval", "(", "self", ",", "ret_loss", "=", "True", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "cmp_output", "=", "self", ".", "model", "(", "self", ".", "image_input", ",", "self", ".", "sparse_input", ")", "\n", "", "if", "self", ".", "model_params", "[", "'flow_criterion'", "]", "==", "\"DiscreteLoss\"", ":", "\n", "            ", "self", ".", "flow", "=", "self", ".", "fuser", ".", "convert_flow", "(", "cmp_output", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.modules.shallownet.ShallowNet.__init__": [[6, 34], ["torch.Module.__init__", "torch.Sequential", "shallownet.ShallowNet.modules", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.MaxPool2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.ReLU", "torch.AvgPool2d", "isinstance", "math.sqrt", "m.weight.data.uniform_", "isinstance", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.backbone.alexnet.AlexNetBN_FCN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", "=", "4", ",", "output_dim", "=", "16", ",", "stride", "=", "[", "2", ",", "2", ",", "2", "]", ")", ":", "\n", "        ", "super", "(", "ShallowNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "global", "BN", "\n", "\n", "BN", "=", "nn", ".", "BatchNorm2d", "\n", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "input_dim", ",", "16", ",", "kernel_size", "=", "5", ",", "stride", "=", "stride", "[", "0", "]", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "16", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "stride", "[", "1", "]", ",", "stride", "=", "stride", "[", "1", "]", ")", ",", "\n", "nn", ".", "Conv2d", "(", "16", ",", "output_dim", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "output_dim", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "AvgPool2d", "(", "kernel_size", "=", "stride", "[", "2", "]", ",", "stride", "=", "stride", "[", "2", "]", ")", ",", "\n", ")", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "fan_in", "=", "m", ".", "out_channels", "*", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "\n", "scale", "=", "math", ".", "sqrt", "(", "2.", "/", "fan_in", ")", "\n", "m", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "scale", ",", "scale", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "if", "not", "m", ".", "weight", "is", "None", ":", "\n", "                    ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "", "if", "not", "m", ".", "bias", "is", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.modules.shallownet.ShallowNet.forward": [[35, 38], ["shallownet.ShallowNet.features"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.modules.shallownet.shallownet8x": [[40, 43], ["shallownet.ShallowNet"], "function", ["None"], ["", "", "def", "shallownet8x", "(", "output_dim", ")", ":", "\n", "    ", "model", "=", "ShallowNet", "(", "output_dim", "=", "output_dim", ",", "stride", "=", "[", "2", ",", "2", ",", "2", "]", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.modules.shallownet.shallownet32x": [[44, 47], ["shallownet.ShallowNet"], "function", ["None"], ["", "def", "shallownet32x", "(", "output_dim", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ShallowNet", "(", "output_dim", "=", "output_dim", ",", "stride", "=", "[", "2", ",", "2", ",", "8", "]", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.modules.others.FixModule.__init__": [[5, 8], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.backbone.alexnet.AlexNetBN_FCN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "m", ")", ":", "\n", "        ", "super", "(", "FixModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "module", "=", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.modules.others.FixModule.forward": [[9, 11], ["others.FixModule.module"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "return", "self", ".", "module", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.modules.decoder.MotionDecoderPlain.__init__": [[7, 68], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "decoder.MotionDecoderPlain.modules", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "isinstance", "torch.Conv2d", "torch.Conv2d", "BN", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "BN", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "BN", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "BN", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "BN", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "BN", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "BN", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "BN", "torch.ReLU", "torch.ReLU", "len", "math.sqrt", "m.weight.data.uniform_", "isinstance", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.backbone.alexnet.AlexNetBN_FCN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", "=", "512", ",", "output_dim", "=", "2", ",", "combo", "=", "[", "1", ",", "2", ",", "4", "]", ")", ":", "\n", "        ", "super", "(", "MotionDecoderPlain", ",", "self", ")", ".", "__init__", "(", ")", "\n", "BN", "=", "nn", ".", "BatchNorm2d", "\n", "\n", "self", ".", "combo", "=", "combo", "\n", "for", "c", "in", "combo", ":", "\n", "            ", "assert", "c", "in", "[", "1", ",", "2", ",", "4", ",", "8", "]", ",", "\"invalid combo: {}\"", ".", "format", "(", "combo", ")", "\n", "\n", "", "if", "1", "in", "combo", ":", "\n", "            ", "self", ".", "decoder1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "input_dim", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "BN", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "BN", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "", "if", "2", "in", "combo", ":", "\n", "            ", "self", ".", "decoder2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_dim", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ")", ",", "\n", "BN", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "BN", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "", "if", "4", "in", "combo", ":", "\n", "            ", "self", ".", "decoder4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "4", ",", "stride", "=", "4", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_dim", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ")", ",", "\n", "BN", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "BN", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "", "if", "8", "in", "combo", ":", "\n", "            ", "self", ".", "decoder8", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "8", ",", "stride", "=", "8", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_dim", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ")", ",", "\n", "BN", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "BN", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "", "self", ".", "head", "=", "nn", ".", "Conv2d", "(", "128", "*", "len", "(", "self", ".", "combo", ")", ",", "output_dim", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "fan_in", "=", "m", ".", "out_channels", "*", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "\n", "scale", "=", "math", ".", "sqrt", "(", "2.", "/", "fan_in", ")", "\n", "m", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "scale", ",", "scale", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "if", "not", "m", ".", "weight", "is", "None", ":", "\n", "                    ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "", "if", "not", "m", ".", "bias", "is", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.modules.decoder.MotionDecoderPlain.forward": [[69, 94], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "decoder.MotionDecoderPlain.head", "decoder.MotionDecoderPlain.decoder1", "cat_list.append", "torch.functional.interpolate", "torch.functional.interpolate", "cat_list.append", "torch.functional.interpolate", "torch.functional.interpolate", "cat_list.append", "torch.functional.interpolate", "torch.functional.interpolate", "cat_list.append", "decoder.MotionDecoderPlain.decoder2", "decoder.MotionDecoderPlain.decoder4", "decoder.MotionDecoderPlain.decoder8", "x.size", "x.size", "x.size", "x.size", "x.size", "x.size"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "cat_list", "=", "[", "]", "\n", "if", "1", "in", "self", ".", "combo", ":", "\n", "            ", "x1", "=", "self", ".", "decoder1", "(", "x", ")", "\n", "cat_list", ".", "append", "(", "x1", ")", "\n", "", "if", "2", "in", "self", ".", "combo", ":", "\n", "            ", "x2", "=", "nn", ".", "functional", ".", "interpolate", "(", "\n", "self", ".", "decoder2", "(", "x", ")", ",", "size", "=", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ",", "\n", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", "\n", "cat_list", ".", "append", "(", "x2", ")", "\n", "", "if", "4", "in", "self", ".", "combo", ":", "\n", "            ", "x4", "=", "nn", ".", "functional", ".", "interpolate", "(", "\n", "self", ".", "decoder4", "(", "x", ")", ",", "size", "=", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ",", "\n", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", "\n", "cat_list", ".", "append", "(", "x4", ")", "\n", "", "if", "8", "in", "self", ".", "combo", ":", "\n", "            ", "x8", "=", "nn", ".", "functional", ".", "interpolate", "(", "\n", "self", ".", "decoder8", "(", "x", ")", ",", "size", "=", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ",", "\n", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", "\n", "cat_list", ".", "append", "(", "x8", ")", "\n", "\n", "", "cat", "=", "torch", ".", "cat", "(", "cat_list", ",", "dim", "=", "1", ")", "\n", "flow", "=", "self", ".", "head", "(", "cat", ")", "\n", "return", "flow", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.modules.decoder.MotionDecoderSkipLayer.__init__": [[98, 187], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "decoder.MotionDecoderSkipLayer.modules", "torch.Conv2d", "torch.Conv2d", "BN", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "BN", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "BN", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "BN", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "BN", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "BN", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "BN", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "BN", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "BN", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "BN", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "BN", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "BN", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "BN", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "BN", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "BN", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "BN", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "BN", "torch.ReLU", "torch.ReLU", "isinstance", "math.sqrt", "m.weight.data.uniform_", "isinstance", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.backbone.alexnet.AlexNetBN_FCN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", "=", "512", ",", "output_dim", "=", "2", ",", "combo", "=", "[", "1", ",", "2", ",", "4", ",", "8", "]", ")", ":", "\n", "        ", "super", "(", "MotionDecoderSkipLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "BN", "=", "nn", ".", "BatchNorm2d", "\n", "\n", "self", ".", "decoder1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "input_dim", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "BN", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "BN", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "BN", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "decoder2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_dim", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ")", ",", "\n", "BN", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "BN", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "BN", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "decoder4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "4", ",", "stride", "=", "4", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_dim", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ")", ",", "\n", "BN", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "BN", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "BN", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "decoder8", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "8", ",", "stride", "=", "8", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_dim", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ")", ",", "\n", "BN", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "BN", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "BN", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "fusion8", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "512", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "BN", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "skipconv4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "256", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "BN", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "fusion4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "256", "+", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "BN", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "skipconv2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "64", ",", "32", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "BN", "(", "32", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "fusion2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "128", "+", "32", ",", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "BN", "(", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "head", "=", "nn", ".", "Conv2d", "(", "64", ",", "output_dim", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "fan_in", "=", "m", ".", "out_channels", "*", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "\n", "scale", "=", "math", ".", "sqrt", "(", "2.", "/", "fan_in", ")", "\n", "m", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "scale", ",", "scale", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "if", "not", "m", ".", "weight", "is", "None", ":", "\n", "                    ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "", "if", "not", "m", ".", "bias", "is", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.modules.decoder.MotionDecoderSkipLayer.forward": [[188, 216], ["decoder.MotionDecoderSkipLayer.decoder1", "torch.functional.interpolate", "torch.functional.interpolate", "torch.functional.interpolate", "torch.functional.interpolate", "torch.functional.interpolate", "torch.functional.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "decoder.MotionDecoderSkipLayer.fusion8", "torch.functional.interpolate", "torch.functional.interpolate", "decoder.MotionDecoderSkipLayer.fusion4", "torch.functional.interpolate", "torch.functional.interpolate", "decoder.MotionDecoderSkipLayer.fusion2", "decoder.MotionDecoderSkipLayer.head", "decoder.MotionDecoderSkipLayer.decoder2", "decoder.MotionDecoderSkipLayer.decoder4", "decoder.MotionDecoderSkipLayer.decoder8", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "decoder.MotionDecoderSkipLayer.size", "decoder.MotionDecoderSkipLayer.size", "decoder.MotionDecoderSkipLayer.size", "decoder.MotionDecoderSkipLayer.size", "decoder.MotionDecoderSkipLayer.size", "decoder.MotionDecoderSkipLayer.size", "layer4.size", "layer4.size", "decoder.MotionDecoderSkipLayer.skipconv4", "layer2.size", "layer2.size", "decoder.MotionDecoderSkipLayer.skipconv2"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ",", "skip_feat", ")", ":", "\n", "        ", "layer1", ",", "layer2", ",", "layer4", "=", "skip_feat", "\n", "\n", "x1", "=", "self", ".", "decoder1", "(", "x", ")", "\n", "x2", "=", "nn", ".", "functional", ".", "interpolate", "(", "\n", "self", ".", "decoder2", "(", "x", ")", ",", "size", "=", "(", "x1", ".", "size", "(", "2", ")", ",", "x1", ".", "size", "(", "3", ")", ")", ",", "\n", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", "\n", "x4", "=", "nn", ".", "functional", ".", "interpolate", "(", "\n", "self", ".", "decoder4", "(", "x", ")", ",", "size", "=", "(", "x1", ".", "size", "(", "2", ")", ",", "x1", ".", "size", "(", "3", ")", ")", ",", "\n", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", "\n", "x8", "=", "nn", ".", "functional", ".", "interpolate", "(", "\n", "self", ".", "decoder8", "(", "x", ")", ",", "size", "=", "(", "x1", ".", "size", "(", "2", ")", ",", "x1", ".", "size", "(", "3", ")", ")", ",", "\n", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", "\n", "cat", "=", "torch", ".", "cat", "(", "[", "x1", ",", "x2", ",", "x4", ",", "x8", "]", ",", "dim", "=", "1", ")", "\n", "f8", "=", "self", ".", "fusion8", "(", "cat", ")", "\n", "\n", "f8_up", "=", "nn", ".", "functional", ".", "interpolate", "(", "\n", "f8", ",", "size", "=", "(", "layer4", ".", "size", "(", "2", ")", ",", "layer4", ".", "size", "(", "3", ")", ")", ",", "\n", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", "\n", "f4", "=", "self", ".", "fusion4", "(", "torch", ".", "cat", "(", "[", "f8_up", ",", "self", ".", "skipconv4", "(", "layer4", ")", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "f4_up", "=", "nn", ".", "functional", ".", "interpolate", "(", "\n", "f4", ",", "size", "=", "(", "layer2", ".", "size", "(", "2", ")", ",", "layer2", ".", "size", "(", "3", ")", ")", ",", "\n", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", "\n", "f2", "=", "self", ".", "fusion2", "(", "torch", ".", "cat", "(", "[", "f4_up", ",", "self", ".", "skipconv2", "(", "layer2", ")", "]", ",", "dim", "=", "1", ")", ")", "\n", "\n", "flow", "=", "self", ".", "head", "(", "f2", ")", "\n", "return", "flow", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.modules.decoder.MotionDecoderFlowNet.__init__": [[220, 307], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "decoder.predict_flow", "decoder.predict_flow", "decoder.predict_flow", "decoder.predict_flow", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "decoder.deconv", "decoder.deconv", "decoder.deconv", "decoder.MotionDecoderFlowNet.modules", "torch.Conv2d", "torch.Conv2d", "BN", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "BN", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "BN", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "BN", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "BN", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "BN", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "BN", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "BN", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "BN", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Conv2d", "torch.Conv2d", "BN", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "BN", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "BN", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "BN", "torch.ReLU", "torch.ReLU", "isinstance", "math.sqrt", "m.weight.data.uniform_", "isinstance", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.backbone.alexnet.AlexNetBN_FCN.__init__", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.modules.decoder.predict_flow", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.modules.decoder.predict_flow", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.modules.decoder.predict_flow", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.modules.decoder.predict_flow", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.modules.decoder.deconv", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.modules.decoder.deconv", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.modules.decoder.deconv"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", "=", "512", ",", "output_dim", "=", "2", ",", "combo", "=", "[", "1", ",", "2", ",", "4", ",", "8", "]", ")", ":", "\n", "        ", "super", "(", "MotionDecoderFlowNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "global", "BN", "\n", "\n", "BN", "=", "nn", ".", "BatchNorm2d", "\n", "\n", "self", ".", "decoder1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "input_dim", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "BN", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "BN", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "BN", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "decoder2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_dim", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ")", ",", "\n", "BN", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "BN", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "BN", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "decoder4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "4", ",", "stride", "=", "4", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_dim", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ")", ",", "\n", "BN", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "BN", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "BN", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "decoder8", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "8", ",", "stride", "=", "8", ")", ",", "\n", "nn", ".", "Conv2d", "(", "input_dim", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ")", ",", "\n", "BN", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "BN", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "128", ",", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "BN", "(", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "self", ".", "fusion8", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "512", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "BN", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "\n", "# flownet head", "\n", "self", ".", "predict_flow8", "=", "predict_flow", "(", "256", ",", "output_dim", ")", "\n", "self", ".", "predict_flow4", "=", "predict_flow", "(", "384", "+", "output_dim", ",", "output_dim", ")", "\n", "self", ".", "predict_flow2", "=", "predict_flow", "(", "192", "+", "output_dim", ",", "output_dim", ")", "\n", "self", ".", "predict_flow1", "=", "predict_flow", "(", "67", "+", "output_dim", ",", "output_dim", ")", "\n", "\n", "self", ".", "upsampled_flow8_to_4", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "output_dim", ",", "output_dim", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "upsampled_flow4_to_2", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "output_dim", ",", "output_dim", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "upsampled_flow2_to_1", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "output_dim", ",", "output_dim", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "deconv8", "=", "deconv", "(", "256", ",", "128", ")", "\n", "self", ".", "deconv4", "=", "deconv", "(", "384", "+", "output_dim", ",", "128", ")", "\n", "self", ".", "deconv2", "=", "deconv", "(", "192", "+", "output_dim", ",", "64", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "fan_in", "=", "m", ".", "out_channels", "*", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "\n", "scale", "=", "math", ".", "sqrt", "(", "2.", "/", "fan_in", ")", "\n", "m", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "scale", ",", "scale", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "if", "not", "m", ".", "weight", "is", "None", ":", "\n", "                    ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "", "if", "not", "m", ".", "bias", "is", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.modules.decoder.MotionDecoderFlowNet.forward": [[308, 344], ["decoder.MotionDecoderFlowNet.decoder1", "torch.functional.interpolate", "torch.functional.interpolate", "torch.functional.interpolate", "torch.functional.interpolate", "torch.functional.interpolate", "torch.functional.interpolate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "decoder.MotionDecoderFlowNet.fusion8", "decoder.MotionDecoderFlowNet.predict_flow8", "decoder.MotionDecoderFlowNet.upsampled_flow8_to_4", "decoder.MotionDecoderFlowNet.deconv8", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "decoder.MotionDecoderFlowNet.predict_flow4", "decoder.MotionDecoderFlowNet.upsampled_flow4_to_2", "decoder.MotionDecoderFlowNet.deconv4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "decoder.MotionDecoderFlowNet.predict_flow2", "decoder.MotionDecoderFlowNet.upsampled_flow2_to_1", "decoder.MotionDecoderFlowNet.deconv2", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "decoder.MotionDecoderFlowNet.predict_flow1", "decoder.MotionDecoderFlowNet.decoder2", "decoder.MotionDecoderFlowNet.decoder4", "decoder.MotionDecoderFlowNet.decoder8", "decoder.MotionDecoderFlowNet.size", "decoder.MotionDecoderFlowNet.size", "decoder.MotionDecoderFlowNet.size", "decoder.MotionDecoderFlowNet.size", "decoder.MotionDecoderFlowNet.size", "decoder.MotionDecoderFlowNet.size"], "methods", ["None"], ["", "", "", "", "def", "forward", "(", "self", ",", "x", ",", "skip_feat", ")", ":", "\n", "        ", "layer1", ",", "layer2", ",", "layer4", "=", "skip_feat", "# 3, 64, 256", "\n", "\n", "# propagation nets", "\n", "x1", "=", "self", ".", "decoder1", "(", "x", ")", "\n", "x2", "=", "nn", ".", "functional", ".", "interpolate", "(", "\n", "self", ".", "decoder2", "(", "x", ")", ",", "size", "=", "(", "x1", ".", "size", "(", "2", ")", ",", "x1", ".", "size", "(", "3", ")", ")", ",", "\n", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", "\n", "x4", "=", "nn", ".", "functional", ".", "interpolate", "(", "\n", "self", ".", "decoder4", "(", "x", ")", ",", "size", "=", "(", "x1", ".", "size", "(", "2", ")", ",", "x1", ".", "size", "(", "3", ")", ")", ",", "\n", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", "\n", "x8", "=", "nn", ".", "functional", ".", "interpolate", "(", "\n", "self", ".", "decoder8", "(", "x", ")", ",", "size", "=", "(", "x1", ".", "size", "(", "2", ")", ",", "x1", ".", "size", "(", "3", ")", ")", ",", "\n", "mode", "=", "\"bilinear\"", ",", "align_corners", "=", "True", ")", "\n", "cat", "=", "torch", ".", "cat", "(", "[", "x1", ",", "x2", ",", "x4", ",", "x8", "]", ",", "dim", "=", "1", ")", "\n", "feat8", "=", "self", ".", "fusion8", "(", "cat", ")", "# 256", "\n", "\n", "# flownet head", "\n", "flow8", "=", "self", ".", "predict_flow8", "(", "feat8", ")", "\n", "flow8_up", "=", "self", ".", "upsampled_flow8_to_4", "(", "flow8", ")", "\n", "out_deconv8", "=", "self", ".", "deconv8", "(", "feat8", ")", "# 128", "\n", "\n", "concat4", "=", "torch", ".", "cat", "(", "(", "layer4", ",", "out_deconv8", ",", "flow8_up", ")", ",", "dim", "=", "1", ")", "# 394 + out", "\n", "flow4", "=", "self", ".", "predict_flow4", "(", "concat4", ")", "\n", "flow4_up", "=", "self", ".", "upsampled_flow4_to_2", "(", "flow4", ")", "\n", "out_deconv4", "=", "self", ".", "deconv4", "(", "concat4", ")", "# 128", "\n", "\n", "concat2", "=", "torch", ".", "cat", "(", "(", "layer2", ",", "out_deconv4", ",", "flow4_up", ")", ",", "dim", "=", "1", ")", "# 192 + out", "\n", "flow2", "=", "self", ".", "predict_flow2", "(", "concat2", ")", "\n", "flow2_up", "=", "self", ".", "upsampled_flow2_to_1", "(", "flow2", ")", "\n", "out_deconv2", "=", "self", ".", "deconv2", "(", "concat2", ")", "# 64", "\n", "\n", "concat1", "=", "torch", ".", "cat", "(", "(", "layer1", ",", "out_deconv2", ",", "flow2_up", ")", ",", "dim", "=", "1", ")", "# 67 + out", "\n", "flow1", "=", "self", ".", "predict_flow1", "(", "concat1", ")", "\n", "\n", "return", "[", "flow1", ",", "flow2", ",", "flow4", ",", "flow8", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.modules.decoder.predict_flow": [[346, 349], ["torch.Conv2d"], "function", ["None"], ["", "", "def", "predict_flow", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "\n", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.modules.decoder.deconv": [[351, 356], ["torch.Sequential", "torch.ConvTranspose2d", "torch.LeakyReLU"], "function", ["None"], ["", "def", "deconv", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "return", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "4", ",", "\n", "stride", "=", "2", ",", "padding", "=", "1", ",", "bias", "=", "True", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.1", ",", "inplace", "=", "True", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.modules.warp.WarpingLayerBWFlow.__init__": [[6, 8], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.backbone.alexnet.AlexNetBN_FCN.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "WarpingLayerBWFlow", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.modules.warp.WarpingLayerBWFlow.forward": [[9, 26], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.linspace().view().expand", "torch.linspace().view().expand", "torch.linspace().view().expand", "torch.linspace().view().expand", "torch.linspace().view().expand", "torch.linspace().view().expand", "torch.linspace().view().expand", "torch.linspace().view().expand", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.cat().cuda", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "torch.nn.functional.grid_sample", "image.size", "image.size", "image.size", "image.size", "image.size", "image.size", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.linspace().view", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "flow.size", "flow.size", "image.size", "image.size", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "torch.linspace", "image.size", "image.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image", ",", "flow", ")", ":", "\n", "        ", "flow_for_grip", "=", "torch", ".", "zeros_like", "(", "flow", ")", "\n", "flow_for_grip", "[", ":", ",", "0", ",", ":", ",", ":", "]", "=", "flow", "[", ":", ",", "0", ",", ":", ",", ":", "]", "/", "(", "(", "flow", ".", "size", "(", "3", ")", "-", "1.0", ")", "/", "2.0", ")", "\n", "flow_for_grip", "[", ":", ",", "1", ",", ":", ",", ":", "]", "=", "flow", "[", ":", ",", "1", ",", ":", ",", ":", "]", "/", "(", "(", "flow", ".", "size", "(", "2", ")", "-", "1.0", ")", "/", "2.0", ")", "\n", "\n", "torchHorizontal", "=", "torch", ".", "linspace", "(", "\n", "-", "1.0", ",", "1.0", ",", "image", ".", "size", "(", "3", ")", ")", ".", "view", "(", "\n", "1", ",", "1", ",", "1", ",", "image", ".", "size", "(", "3", ")", ")", ".", "expand", "(", "\n", "image", ".", "size", "(", "0", ")", ",", "1", ",", "image", ".", "size", "(", "2", ")", ",", "image", ".", "size", "(", "3", ")", ")", "\n", "torchVertical", "=", "torch", ".", "linspace", "(", "\n", "-", "1.0", ",", "1.0", ",", "image", ".", "size", "(", "2", ")", ")", ".", "view", "(", "\n", "1", ",", "1", ",", "image", ".", "size", "(", "2", ")", ",", "1", ")", ".", "expand", "(", "\n", "image", ".", "size", "(", "0", ")", ",", "1", ",", "image", ".", "size", "(", "2", ")", ",", "image", ".", "size", "(", "3", ")", ")", "\n", "grid", "=", "torch", ".", "cat", "(", "[", "torchHorizontal", ",", "torchVertical", "]", ",", "1", ")", ".", "cuda", "(", ")", "\n", "\n", "grid", "=", "(", "grid", "+", "flow_for_grip", ")", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "return", "torch", ".", "nn", ".", "functional", ".", "grid_sample", "(", "image", ",", "grid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.modules.warp.WarpingLayerFWFlow.__init__": [[30, 33], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.backbone.alexnet.AlexNetBN_FCN.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "WarpingLayerFWFlow", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "initialized", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.modules.warp.WarpingLayerFWFlow.forward": [[34, 69], ["torch.sort", "torch.sort", "torch.sort", "torch.sort", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp", "warp.WarpingLayerFWFlow.warped_image.zero_", "range", "image.size", "image.size", "image.size", "torch.arange().view().expand().contiguous().view().cuda", "torch.arange().view().expand().contiguous().view().cuda", "torch.arange().view().expand().contiguous().view().cuda", "torch.arange().view().expand().contiguous().view().cuda", "torch.arange().view().expand().contiguous().view().cuda", "torch.arange().view().expand().contiguous().view().cuda", "torch.arange().view().expand().contiguous().view().cuda", "torch.arange().view().expand().contiguous().view().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "torch.zeros().cuda", "flow[].long().view", "flow[].long().view", "warp.WarpingLayerFWFlow.hole_mask.fill_", "range", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.ones().cuda", "torch.arange().view().expand().contiguous().view", "torch.arange().view().expand().contiguous().view", "torch.arange().view().expand().contiguous().view", "torch.arange().view().expand().contiguous().view", "torch.arange().view().expand().contiguous().view", "torch.arange().view().expand().contiguous().view", "torch.arange().view().expand().contiguous().view", "torch.arange().view().expand().contiguous().view", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "flow[].long", "flow[].long", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.arange().view().expand().contiguous", "torch.arange().view().expand().contiguous", "torch.arange().view().expand().contiguous", "torch.arange().view().expand().contiguous", "torch.arange().view().expand().contiguous", "torch.arange().view().expand().contiguous", "torch.arange().view().expand().contiguous", "torch.arange().view().expand().contiguous", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view().expand", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "image", ",", "flow", ",", "ret_mask", "=", "False", ")", ":", "\n", "        ", "n", ",", "h", ",", "w", "=", "image", ".", "size", "(", "0", ")", ",", "image", ".", "size", "(", "2", ")", ",", "image", ".", "size", "(", "3", ")", "\n", "\n", "if", "not", "self", ".", "initialized", "or", "n", "!=", "self", ".", "meshx", ".", "shape", "[", "0", "]", "or", "h", "*", "w", "!=", "self", ".", "meshx", ".", "shape", "[", "1", "]", ":", "\n", "            ", "self", ".", "meshx", "=", "torch", ".", "arange", "(", "w", ")", ".", "view", "(", "1", ",", "1", ",", "w", ")", ".", "expand", "(", "\n", "n", ",", "h", ",", "w", ")", ".", "contiguous", "(", ")", ".", "view", "(", "n", ",", "-", "1", ")", ".", "cuda", "(", ")", "\n", "self", ".", "meshy", "=", "torch", ".", "arange", "(", "h", ")", ".", "view", "(", "1", ",", "h", ",", "1", ")", ".", "expand", "(", "\n", "n", ",", "h", ",", "w", ")", ".", "contiguous", "(", ")", ".", "view", "(", "n", ",", "-", "1", ")", ".", "cuda", "(", ")", "\n", "self", ".", "warped_image", "=", "torch", ".", "zeros", "(", "(", "n", ",", "3", ",", "h", ",", "w", ")", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "if", "ret_mask", ":", "\n", "                ", "self", ".", "hole_mask", "=", "torch", ".", "ones", "(", "(", "n", ",", "1", ",", "h", ",", "w", ")", ",", "dtype", "=", "torch", ".", "float32", ")", ".", "cuda", "(", ")", "\n", "", "self", ".", "initialized", "=", "True", "\n", "\n", "", "v", "=", "(", "flow", "[", ":", ",", "0", ",", ":", ",", ":", "]", "**", "2", "+", "flow", "[", ":", ",", "1", ",", ":", ",", ":", "]", "**", "2", ")", ".", "view", "(", "n", ",", "-", "1", ")", "\n", "_", ",", "sortidx", "=", "torch", ".", "sort", "(", "v", ",", "dim", "=", "1", ")", "\n", "\n", "warped_meshx", "=", "self", ".", "meshx", "+", "flow", "[", ":", ",", "0", ",", ":", ",", ":", "]", ".", "long", "(", ")", ".", "view", "(", "n", ",", "-", "1", ")", "\n", "warped_meshy", "=", "self", ".", "meshy", "+", "flow", "[", ":", ",", "1", ",", ":", ",", ":", "]", ".", "long", "(", ")", ".", "view", "(", "n", ",", "-", "1", ")", "\n", "\n", "warped_meshx", "=", "torch", ".", "clamp", "(", "warped_meshx", ",", "0", ",", "w", "-", "1", ")", "\n", "warped_meshy", "=", "torch", ".", "clamp", "(", "warped_meshy", ",", "0", ",", "h", "-", "1", ")", "\n", "\n", "self", ".", "warped_image", ".", "zero_", "(", ")", "\n", "if", "ret_mask", ":", "\n", "            ", "self", ".", "hole_mask", ".", "fill_", "(", "1.", ")", "\n", "", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "for", "c", "in", "range", "(", "3", ")", ":", "\n", "                ", "ind", "=", "sortidx", "[", "i", "]", "\n", "self", ".", "warped_image", "[", "i", ",", "c", ",", "warped_meshy", "[", "i", "]", "[", "ind", "]", ",", "warped_meshx", "[", "i", "]", "[", "ind", "]", "]", "=", "image", "[", "i", ",", "c", ",", "self", ".", "meshy", "[", "i", "]", "[", "ind", "]", ",", "self", ".", "meshx", "[", "i", "]", "[", "ind", "]", "]", "\n", "", "if", "ret_mask", ":", "\n", "                ", "self", ".", "hole_mask", "[", "i", ",", "0", ",", "warped_meshy", "[", "i", "]", ",", "warped_meshx", "[", "i", "]", "]", "=", "0.", "\n", "", "", "if", "ret_mask", ":", "\n", "            ", "return", "self", ".", "warped_image", ",", "self", ".", "hole_mask", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "warped_image", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.backbone.resnet.BasicBlock.__init__": [[26, 35], ["torch.Module.__init__", "resnet.conv3x3", "BN", "torch.ReLU", "torch.ReLU", "resnet.conv3x3", "BN"], "methods", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.backbone.alexnet.AlexNetBN_FCN.__init__", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.backbone.resnet.conv3x3", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.backbone.resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "BN", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "BN", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.backbone.resnet.BasicBlock.forward": [[36, 53], ["resnet.BasicBlock.conv1", "resnet.BasicBlock.bn1", "resnet.BasicBlock.relu", "resnet.BasicBlock.conv2", "resnet.BasicBlock.bn2", "resnet.BasicBlock.relu", "resnet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.backbone.resnet.Bottleneck.__init__": [[58, 70], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "BN", "torch.Conv2d", "torch.Conv2d", "BN", "torch.Conv2d", "torch.Conv2d", "BN", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.backbone.alexnet.AlexNetBN_FCN.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BN", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "BN", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "BN", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.backbone.resnet.Bottleneck.forward": [[71, 92], ["resnet.Bottleneck.conv1", "resnet.Bottleneck.bn1", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv2", "resnet.Bottleneck.bn2", "resnet.Bottleneck.relu", "resnet.Bottleneck.conv3", "resnet.Bottleneck.bn3", "resnet.Bottleneck.relu", "resnet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.backbone.resnet.ResNet.__init__": [[96, 135], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "BN", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "resnet.ResNet._make_layer", "torch.Conv2d", "torch.Conv2d", "resnet.ResNet.layer3.named_modules", "resnet.ResNet.layer4.named_modules", "resnet.ResNet.modules", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.backbone.alexnet.AlexNetBN_FCN.__init__", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.backbone.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.backbone.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.backbone.resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.backbone.resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "output_dim", ",", "block", ",", "layers", ")", ":", "\n", "\n", "        ", "global", "BN", "\n", "\n", "BN", "=", "nn", ".", "BatchNorm2d", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "BN", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "\n", "self", ".", "conv5", "=", "nn", ".", "Conv2d", "(", "2048", ",", "output_dim", ",", "kernel_size", "=", "1", ")", "\n", "\n", "## dilation", "\n", "for", "n", ",", "m", "in", "self", ".", "layer3", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "'conv2'", "in", "n", ":", "\n", "                ", "m", ".", "dilation", ",", "m", ".", "padding", ",", "m", ".", "stride", "=", "(", "2", ",", "2", ")", ",", "(", "2", ",", "2", ")", ",", "(", "1", ",", "1", ")", "\n", "", "elif", "'downsample.0'", "in", "n", ":", "\n", "                ", "m", ".", "stride", "=", "(", "1", ",", "1", ")", "\n", "", "", "for", "n", ",", "m", "in", "self", ".", "layer4", ".", "named_modules", "(", ")", ":", "\n", "            ", "if", "'conv2'", "in", "n", ":", "\n", "                ", "m", ".", "dilation", ",", "m", ".", "padding", ",", "m", ".", "stride", "=", "(", "4", ",", "4", ")", ",", "(", "4", ",", "4", ")", ",", "(", "1", ",", "1", ")", "\n", "", "elif", "'downsample.0'", "in", "n", ":", "\n", "                ", "m", ".", "stride", "=", "(", "1", ",", "1", ")", "\n", "\n", "", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.backbone.resnet.ResNet._make_layer": [[136, 152], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "BN", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "BN", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.backbone.resnet.ResNet.forward": [[153, 169], ["resnet.ResNet.conv1", "resnet.ResNet.bn1", "resnet.ResNet.relu", "resnet.ResNet.maxpool", "resnet.ResNet.layer1", "resnet.ResNet.layer2", "resnet.ResNet.layer3", "resnet.ResNet.layer4", "resnet.ResNet.conv5"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "img", ",", "ret_feat", "=", "False", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "img", ")", "# 1/2", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "conv1", "=", "self", ".", "relu", "(", "x", ")", "# 1/2", "\n", "pool1", "=", "self", ".", "maxpool", "(", "conv1", ")", "# 1/4", "\n", "\n", "layer1", "=", "self", ".", "layer1", "(", "pool1", ")", "# 1/4", "\n", "layer2", "=", "self", ".", "layer2", "(", "layer1", ")", "# 1/8", "\n", "layer3", "=", "self", ".", "layer3", "(", "layer2", ")", "# 1/8", "\n", "layer4", "=", "self", ".", "layer4", "(", "layer3", ")", "# 1/8", "\n", "out", "=", "self", ".", "conv5", "(", "layer4", ")", "\n", "\n", "if", "ret_feat", ":", "\n", "            ", "return", "out", ",", "[", "img", ",", "conv1", ",", "layer1", "]", "# 3, 64, 256", "\n", "", "else", ":", "\n", "            ", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.backbone.resnet.conv3x3": [[17, 21], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.backbone.resnet.resnet18": [[170, 175], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "", "", "def", "resnet18", "(", "output_dim", ",", "pretrained", "=", "False", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "output_dim", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.backbone.resnet.resnet34": [[177, 182], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet34", "(", "output_dim", ",", "pretrained", "=", "False", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "output_dim", ",", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet34'", "]", ")", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.backbone.resnet.resnet50": [[184, 189], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet50", "(", "output_dim", ",", "pretrained", "=", "False", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "output_dim", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.backbone.resnet.resnet101": [[190, 195], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet101", "(", "output_dim", ",", "pretrained", "=", "False", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "output_dim", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ")", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.backbone.resnet.resnet152": [[197, 202], ["resnet.ResNet", "ResNet.load_state_dict", "torch.load_url"], "function", ["None"], ["", "def", "resnet152", "(", "output_dim", ",", "pretrained", "=", "False", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "output_dim", ",", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ")", "\n", "if", "pretrained", ":", "\n", "        ", "model", ".", "load_state_dict", "(", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ")", ",", "strict", "=", "False", ")", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.backbone.alexnet.AlexNetBN_FCN.__init__": [[6, 56], ["torch.Module.__init__", "torch.Sequential", "torch.MaxPool2d", "torch.Sequential", "torch.MaxPool2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.MaxPool2d", "torch.Sequential", "torch.Dropout", "torch.Sequential", "torch.Dropout", "torch.Conv2d", "alexnet.AlexNetBN_FCN.modules", "torch.Conv2d", "BN", "torch.ReLU", "torch.Conv2d", "BN", "torch.ReLU", "torch.Conv2d", "BN", "torch.ReLU", "torch.Conv2d", "BN", "torch.ReLU", "torch.Conv2d", "BN", "torch.ReLU", "torch.Conv2d", "BN", "torch.ReLU", "torch.Conv2d", "BN", "torch.ReLU", "isinstance", "math.sqrt", "m.weight.data.uniform_", "isinstance", "m.bias.data.zero_", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.backbone.alexnet.AlexNetBN_FCN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "output_dim", "=", "256", ",", "stride", "=", "[", "4", ",", "2", ",", "2", ",", "2", "]", ",", "dilation", "=", "[", "1", ",", "1", "]", ",", "padding", "=", "[", "1", ",", "1", "]", ")", ":", "\n", "        ", "super", "(", "AlexNetBN_FCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "BN", "=", "nn", ".", "BatchNorm2d", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "3", ",", "96", ",", "kernel_size", "=", "11", ",", "stride", "=", "stride", "[", "0", "]", ",", "padding", "=", "5", ")", ",", "\n", "BN", "(", "96", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "pool1", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "stride", "[", "1", "]", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "96", ",", "256", ",", "kernel_size", "=", "5", ",", "padding", "=", "2", ")", ",", "\n", "BN", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "pool2", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "stride", "[", "2", "]", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "256", ",", "384", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "BN", "(", "384", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "384", ",", "384", ",", "kernel_size", "=", "3", ",", "padding", "=", "padding", "[", "0", "]", ",", "dilation", "=", "dilation", "[", "0", "]", ")", ",", "\n", "BN", "(", "384", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "conv5", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "384", ",", "256", ",", "kernel_size", "=", "3", ",", "padding", "=", "padding", "[", "1", "]", ",", "dilation", "=", "dilation", "[", "1", "]", ")", ",", "\n", "BN", "(", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "pool5", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "stride", "[", "3", "]", ",", "padding", "=", "1", ")", "\n", "\n", "self", ".", "fc6", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "256", ",", "4096", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", ",", "\n", "BN", "(", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "drop6", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "self", ".", "fc7", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "4096", ",", "4096", ",", "kernel_size", "=", "1", ",", "stride", "=", "1", ",", "padding", "=", "0", ")", ",", "\n", "BN", "(", "4096", ")", ",", "\n", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", ")", "\n", "self", ".", "drop7", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "self", ".", "conv8", "=", "nn", ".", "Conv2d", "(", "4096", ",", "output_dim", ",", "kernel_size", "=", "1", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "fan_in", "=", "m", ".", "out_channels", "*", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "\n", "scale", "=", "math", ".", "sqrt", "(", "2.", "/", "fan_in", ")", "\n", "m", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "scale", ",", "scale", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.backbone.alexnet.AlexNetBN_FCN.forward": [[57, 74], ["alexnet.AlexNetBN_FCN.conv1", "alexnet.AlexNetBN_FCN.pool1", "alexnet.AlexNetBN_FCN.conv2", "alexnet.AlexNetBN_FCN.pool2", "alexnet.AlexNetBN_FCN.conv3", "alexnet.AlexNetBN_FCN.conv4", "alexnet.AlexNetBN_FCN.conv5", "alexnet.AlexNetBN_FCN.pool5", "alexnet.AlexNetBN_FCN.fc6", "alexnet.AlexNetBN_FCN.drop6", "alexnet.AlexNetBN_FCN.fc7", "alexnet.AlexNetBN_FCN.drop7", "alexnet.AlexNetBN_FCN.conv8"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ",", "ret_feat", "=", "False", ")", ":", "\n", "        ", "if", "ret_feat", ":", "\n", "            ", "raise", "NotImplemented", "\n", "", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "pool1", "(", "x", ")", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "self", ".", "pool2", "(", "x", ")", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "self", ".", "conv5", "(", "x", ")", "\n", "x", "=", "self", ".", "pool5", "(", "x", ")", "\n", "x", "=", "self", ".", "fc6", "(", "x", ")", "\n", "x", "=", "self", ".", "drop6", "(", "x", ")", "\n", "x", "=", "self", ".", "fc7", "(", "x", ")", "\n", "x", "=", "self", ".", "drop7", "(", "x", ")", "\n", "x", "=", "self", ".", "conv8", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.backbone.alexnet.alexnet_fcn_32x": [[75, 79], ["alexnet.AlexNetBN_FCN"], "function", ["None"], ["", "", "def", "alexnet_fcn_32x", "(", "output_dim", ",", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "assert", "pretrained", "==", "False", "\n", "model", "=", "AlexNetBN_FCN", "(", "output_dim", "=", "output_dim", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.XiaohangZhan_conditional-motion-propagation.backbone.alexnet.alexnet_fcn_8x": [[80, 84], ["alexnet.AlexNetBN_FCN"], "function", ["None"], ["", "def", "alexnet_fcn_8x", "(", "output_dim", ",", "use_ppm", "=", "False", ",", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "assert", "pretrained", "==", "False", "\n", "model", "=", "AlexNetBN_FCN", "(", "output_dim", "=", "output_dim", ",", "stride", "=", "[", "2", ",", "2", ",", "2", ",", "1", "]", ",", "**", "kwargs", ")", "\n", "return", "model", "\n", "", ""]]}