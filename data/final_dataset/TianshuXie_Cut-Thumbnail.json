{"home.repos.pwc.inspect_result.TianshuXie_Cut-Thumbnail.None.train.AverageMeter.__init__": [[260, 262], ["train.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.TianshuXie_Cut-Thumbnail.None.train.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TianshuXie_Cut-Thumbnail.None.train.AverageMeter.reset": [[263, 268], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.TianshuXie_Cut-Thumbnail.None.train.AverageMeter.update": [[269, 274], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.TianshuXie_Cut-Thumbnail.None.train.main": [[79, 150], ["os.path.exists", "torchvision.Normalize", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "print", "torch.CrossEntropyLoss().cuda", "torch.SGD", "range", "print", "print", "print", "print", "print", "print", "os.path.join", "os.path.join", "print", "print", "exit", "torchvision.ImageFolder", "torchvision.ImageFolder", "torchvision.models.resnet18", "print", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torch.nn.DataParallel().cuda", "torchvision.models.resnet50.parameters", "train.adjust_learning_rate", "print", "train.train", "train.test", "max", "torchvision.Compose", "torchvision.Compose", "torchvision.models.resnet50", "print", "torch.CrossEntropyLoss", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "sum", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Resize", "torchvision.CenterCrop", "torchvision.ToTensor", "p.numel", "torchvision.models.resnet50.parameters"], "function", ["home.repos.pwc.inspect_result.TianshuXie_Cut-Thumbnail.None.train.adjust_learning_rate", "home.repos.pwc.inspect_result.TianshuXie_Cut-Thumbnail.None.train.train", "home.repos.pwc.inspect_result.TianshuXie_Cut-Thumbnail.None.train.test"], ["def", "main", "(", ")", ":", "\n", "    ", "global", "best_acc", ",", "best_t5", ",", "best_epoch", "\n", "start_epoch", "=", "args", ".", "start_epoch", "# start from epoch 0 or last checkpoint epoch", "\n", "\n", "if", "os", ".", "path", ".", "exists", "(", "args", ".", "data", ")", ":", "\n", "        ", "traindir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'train'", ")", "\n", "valdir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "data", ",", "'val'", ")", "\n", "print", "(", "'==> Preparing dataset in %s'", "%", "args", ".", "data", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'Error: no dataset directory found in %s!'", "%", "args", ".", "data", ")", "\n", "exit", "(", ")", "\n", "", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "train_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "ImageFolder", "(", "traindir", ",", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", ",", "\n", "batch_size", "=", "args", ".", "train_batch", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "val_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "datasets", ".", "ImageFolder", "(", "valdir", ",", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", ")", ",", "\n", "batch_size", "=", "args", ".", "test_batch", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "\n", "if", "args", ".", "depth", "==", "18", ":", "\n", "        ", "model", "=", "resnet18", "(", "pretrained", "=", "False", ")", "\n", "print", "(", "'===> Preparing ResNet-18'", ")", "\n", "", "elif", "args", ".", "depth", "==", "50", ":", "\n", "        ", "model", "=", "resnet50", "(", "pretrained", "=", "False", ")", "\n", "print", "(", "'===> Preparing ResNet-50'", ")", "\n", "\n", "", "if", "use_cuda", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", ".", "cuda", "(", ")", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "", "print", "(", "'    Total params: %.2fM'", "%", "(", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", ")", "/", "1000000.0", ")", ")", "\n", "\n", "# define loss function (criterion) and optimizer", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", ".", "cuda", "(", ")", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "args", ".", "lr", ",", "momentum", "=", "args", ".", "momentum", ",", "weight_decay", "=", "args", ".", "weight_decay", ")", "\n", "\n", "# Train and val", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "        ", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", "\n", "\n", "print", "(", "'\\nEpoch: [%d | %d] LR: %f'", "%", "(", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "state", "[", "'lr'", "]", ")", ")", "\n", "\n", "train_loss", ",", "train_acc", "=", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "use_cuda", ")", "\n", "test_loss", ",", "test_acc", ",", "top_5", "=", "test", "(", "val_loader", ",", "model", ",", "criterion", ",", "epoch", ",", "use_cuda", ")", "\n", "\n", "is_best", "=", "test_acc", ">", "best_acc", "\n", "best_acc", "=", "max", "(", "test_acc", ",", "best_acc", ")", "\n", "if", "is_best", "is", "True", ":", "\n", "            ", "best_epoch", "=", "epoch", "+", "1", "\n", "best_t5", "=", "top_5", "\n", "\n", "", "", "print", "(", "'Best acc:'", ")", "\n", "print", "(", "best_acc", ")", "\n", "print", "(", "'Best Top_5:'", ")", "\n", "print", "(", "best_t5", ")", "\n", "print", "(", "'Best Epoch:'", ")", "\n", "print", "(", "best_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.TianshuXie_Cut-Thumbnail.None.train.train": [[152, 210], ["model.train", "train.AverageMeter", "train.AverageMeter", "train.AverageMeter", "enumerate", "print", "train.accuracy", "train.AverageMeter.update", "train.AverageMeter.update", "train.AverageMeter.update", "optimizer.zero_grad", "criterion.backward", "optimizer.step", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "numpy.random.rand", "model", "model", "criterion", "criterion.item", "inputs.size", "prec1.item", "inputs.size", "prec5.item", "inputs.size", "print", "len", "inputs.cuda", "targets.cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "torch.randperm().cuda", "train.rand_bbox", "torch.interpolate", "inputs.size", "train.rand_bbox", "torch.interpolate", "print", "exit", "criterion", "len", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "inputs.size", "criterion", "criterion", "inputs.size"], "function", ["home.repos.pwc.inspect_result.TianshuXie_Cut-Thumbnail.None.train.train", "home.repos.pwc.inspect_result.TianshuXie_Cut-Thumbnail.None.train.accuracy", "home.repos.pwc.inspect_result.TianshuXie_Cut-Thumbnail.None.train.AverageMeter.update", "home.repos.pwc.inspect_result.TianshuXie_Cut-Thumbnail.None.train.AverageMeter.update", "home.repos.pwc.inspect_result.TianshuXie_Cut-Thumbnail.None.train.AverageMeter.update", "home.repos.pwc.inspect_result.TianshuXie_Cut-Thumbnail.None.train.rand_bbox", "home.repos.pwc.inspect_result.TianshuXie_Cut-Thumbnail.None.train.rand_bbox"], ["", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ",", "use_cuda", ")", ":", "\n", "# switch to train mode", "\n", "    ", "model", ".", "train", "(", ")", "\n", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "        ", "if", "use_cuda", ":", "\n", "            ", "inputs", ",", "targets", "=", "inputs", ".", "cuda", "(", ")", ",", "targets", ".", "cuda", "(", ")", "\n", "", "inputs", ",", "targets", "=", "torch", ".", "autograd", ".", "Variable", "(", "inputs", ")", ",", "torch", ".", "autograd", ".", "Variable", "(", "targets", ")", "\n", "\n", "if", "np", ".", "random", ".", "rand", "(", "1", ")", "<", "args", ".", "participation_rate", ":", "\n", "# generate mixed sample with thumbnail", "\n", "            ", "if", "args", ".", "mode", "==", "'mst'", ":", "\n", "# mixed single thumbnail", "\n", "                ", "rand_index", "=", "torch", ".", "randperm", "(", "inputs", ".", "size", "(", ")", "[", "0", "]", ")", ".", "cuda", "(", ")", "\n", "target_a", "=", "targets", "\n", "target_b", "=", "targets", "[", "rand_index", "]", "\n", "bbx1", ",", "bby1", ",", "bbx2", ",", "bby2", "=", "rand_bbox", "(", "inputs", ".", "size", "(", "2", ")", ",", "args", ".", "size", ")", "\n", "inputs", "[", ":", ",", ":", ",", "bbx1", ":", "bbx2", ",", "bby1", ":", "bby2", "]", "=", "F", ".", "interpolate", "(", "inputs", "[", "rand_index", ",", ":", ",", ":", ",", ":", "]", ",", "(", "args", ".", "size", ",", "args", ".", "size", ")", ")", "\n", "", "elif", "args", ".", "mode", "==", "'st'", ":", "\n", "# single thumbnail", "\n", "                ", "bbx1", ",", "bby1", ",", "bbx2", ",", "bby2", "=", "rand_bbox", "(", "inputs", ".", "size", "(", "2", ")", ",", "args", ".", "size", ")", "\n", "inputs", "[", ":", ",", ":", ",", "bbx1", ":", "bbx2", ",", "bby1", ":", "bby2", "]", "=", "F", ".", "interpolate", "(", "inputs", ",", "(", "args", ".", "size", ",", "args", ".", "size", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'Wrong prarameter of args.mode'", ")", "\n", "exit", "(", ")", "\n", "# compute output", "\n", "", "outputs", "=", "model", "(", "inputs", ")", "\n", "if", "args", ".", "mode", "==", "'mst'", ":", "\n", "                ", "loss", "=", "criterion", "(", "outputs", ",", "target_a", ")", "*", "(", "1.0", "-", "args", ".", "lam", ")", "+", "criterion", "(", "outputs", ",", "target_b", ")", "*", "args", ".", "lam", "\n", "", "elif", "args", ".", "mode", "==", "'st'", ":", "\n", "                ", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "", "", "else", ":", "\n", "# compute output", "\n", "            ", "outputs", "=", "model", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "", "prec1", ",", "prec5", "=", "accuracy", "(", "outputs", ".", "data", ",", "targets", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "(", "batch_idx", "+", "1", ")", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "print", "(", "'\\rTraining | Epoch:{}/{}| Batch: {}/{}| Losses:{:.4f} | Top-1:{:.2f} | Top-5:{:.2f}'", ".", "format", "(", "\n", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "batch_idx", "+", "1", ",", "len", "(", "train_loader", ")", ",", "losses", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ")", ",", "\n", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "\n", "", "", "print", "(", "'\\rTraining | Epoch:{}/{}| Batch: {}/{}| Losses:{:.4f} | Top-1:{:.2f} | Top-5:{:.2f}'", ".", "format", "(", "\n", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "batch_idx", "+", "1", ",", "len", "(", "train_loader", ")", ",", "losses", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ")", ",", "end", "=", "'\\n'", ")", "\n", "return", "losses", ".", "avg", ",", "top1", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.TianshuXie_Cut-Thumbnail.None.train.test": [[212, 246], ["train.AverageMeter", "train.AverageMeter", "train.AverageMeter", "model.eval", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "model", "criterion", "train.accuracy", "train.AverageMeter.update", "train.AverageMeter.update", "train.AverageMeter.update", "len", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "criterion.item", "inputs.size", "prec1.item", "inputs.size", "prec5.item", "inputs.size", "print", "inputs.cuda", "targets.cuda", "len"], "function", ["home.repos.pwc.inspect_result.TianshuXie_Cut-Thumbnail.None.train.accuracy", "home.repos.pwc.inspect_result.TianshuXie_Cut-Thumbnail.None.train.AverageMeter.update", "home.repos.pwc.inspect_result.TianshuXie_Cut-Thumbnail.None.train.AverageMeter.update", "home.repos.pwc.inspect_result.TianshuXie_Cut-Thumbnail.None.train.AverageMeter.update"], ["", "def", "test", "(", "val_loader", ",", "model", ",", "criterion", ",", "epoch", ",", "use_cuda", ")", ":", "\n", "    ", "global", "best_acc", "\n", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "top5", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "            ", "if", "use_cuda", ":", "\n", "                ", "inputs", ",", "targets", "=", "inputs", ".", "cuda", "(", ")", ",", "targets", ".", "cuda", "(", ")", "\n", "", "inputs", ",", "targets", "=", "torch", ".", "autograd", ".", "Variable", "(", "inputs", ")", ",", "torch", ".", "autograd", ".", "Variable", "(", "targets", ")", "\n", "\n", "# compute output", "\n", "outputs", "=", "model", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "prec1", ",", "prec5", "=", "accuracy", "(", "outputs", ".", "data", ",", "targets", ".", "data", ",", "topk", "=", "(", "1", ",", "5", ")", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "top5", ".", "update", "(", "prec5", ".", "item", "(", ")", ",", "inputs", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "(", "batch_idx", "+", "1", ")", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "                ", "print", "(", "'Testing | Epoch:{}/{}| Batch: {}/{} | Losses:{:.4f} | Top-1:{:.2f} | Top-5:{:.2f}'", ".", "format", "(", "\n", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "batch_idx", "+", "1", ",", "len", "(", "val_loader", ")", ",", "losses", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ")", ",", "\n", "end", "=", "''", ",", "flush", "=", "True", ")", "\n", "\n", "", "", "", "print", "(", "'Testing | Epoch:{}/{}| Batch: {}/{} | Losses:{:.4f} | Top-1:{:.2f} | Top-5:{:.2f}'", ".", "format", "(", "\n", "epoch", "+", "1", ",", "args", ".", "epochs", ",", "batch_idx", "+", "1", ",", "len", "(", "val_loader", ")", ",", "losses", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", ")", ",", "end", "=", "'\\n'", ")", "\n", "return", "losses", ".", "avg", ",", "top1", ".", "avg", ",", "top5", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.TianshuXie_Cut-Thumbnail.None.train.adjust_learning_rate": [[248, 254], ["None"], "function", ["None"], ["", "def", "adjust_learning_rate", "(", "optimizer", ",", "epoch", ")", ":", "\n", "    ", "global", "state", "\n", "if", "epoch", "in", "args", ".", "schedule", ":", "\n", "        ", "state", "[", "'lr'", "]", "*=", "args", ".", "gamma", "\n", "for", "param_group", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "param_group", "[", "'lr'", "]", "=", "state", "[", "'lr'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.TianshuXie_Cut-Thumbnail.None.train.accuracy": [[276, 290], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.TianshuXie_Cut-Thumbnail.None.train.rand_bbox": [[292, 296], ["random.randint", "random.randint"], "function", ["None"], ["", "def", "rand_bbox", "(", "inputs_size", ",", "dst_size", ")", ":", "\n", "    ", "x", "=", "random", ".", "randint", "(", "0", ",", "inputs_size", "-", "dst_size", ")", "\n", "y", "=", "random", ".", "randint", "(", "0", ",", "inputs_size", "-", "dst_size", ")", "\n", "return", "x", ",", "y", ",", "x", "+", "dst_size", ",", "y", "+", "dst_size", "\n", "\n"]]}