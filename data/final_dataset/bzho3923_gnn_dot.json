{"home.repos.pwc.inspect_result.bzho3923_gnn_dot.None.ufg_layer.UFGConv_S.__init__": [[63, 85], ["torch.Module.__init__", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "ufg_layer.UFGConv_S.reset_parameters", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "ufg_layer.UFGConv_S.register_parameter", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.bzho3923_gnn_dot.None.denoising_filters.BregmanADMM.__init__", "home.repos.pwc.inspect_result.bzho3923_gnn_dot.None.main.Net.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "r", ",", "Lev", ",", "num_nodes", ",", "shrinkage", ",", "sigma", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "UFGConv_S", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "r", "=", "r", "\n", "self", ".", "Lev", "=", "Lev", "\n", "self", ".", "num_nodes", "=", "num_nodes", "\n", "self", ".", "shrinkage", "=", "shrinkage", "\n", "self", ".", "sigma", "=", "sigma", "\n", "self", ".", "crop_len", "=", "(", "Lev", "-", "1", ")", "*", "num_nodes", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "in_features", ",", "out_features", ")", ".", "cuda", "(", ")", ")", "\n", "self", ".", "filter", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "r", "*", "Lev", "*", "num_nodes", ",", "1", ")", ".", "cuda", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "in_features", ",", "out_features", ")", ")", "\n", "self", ".", "filter", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "r", "*", "Lev", "*", "num_nodes", ",", "1", ")", ")", "\n", "", "if", "bias", ":", "\n", "            ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "out_features", ")", ".", "cuda", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "out_features", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_dot.None.ufg_layer.UFGConv_S.reset_parameters": [[86, 91], ["torch.init.uniform_", "torch.init.uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.zeros_", "torch.init.zeros_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "filter", ",", "0.9", ",", "1.1", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "weight", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_dot.None.ufg_layer.UFGConv_S.forward": [[92, 128], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "ufg_layer.multiScales", "range", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ufg_layer.waveletShrinkage", "ufg_layer.simpleLambda"], "methods", ["home.repos.pwc.inspect_result.bzho3923_gnn_dot.None.ufg_layer.multiScales", "home.repos.pwc.inspect_result.bzho3923_gnn_dot.None.ufg_layer.waveletShrinkage", "home.repos.pwc.inspect_result.bzho3923_gnn_dot.None.ufg_layer.simpleLambda"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "d_list", ")", ":", "\n", "# d_list is a list of matrix operators (torch sparse format), row-by-row", "\n", "# x is a torch dense tensor", "\n", "        ", "x", "=", "torch", ".", "matmul", "(", "x", ",", "self", ".", "weight", ")", "\n", "\n", "# Fast Tight Frame Decomposition", "\n", "x", "=", "torch", ".", "sparse", ".", "mm", "(", "torch", ".", "cat", "(", "d_list", ",", "dim", "=", "0", ")", ",", "x", ")", "\n", "# the output x has shape [r * Lev * num_nodes, #Features]", "\n", "\n", "# Hadamard product in spectral domain", "\n", "x", "=", "self", ".", "filter", "*", "x", "\n", "# filter has shape [r * Lev * num_nodes, 1]", "\n", "# the output x has shape [r * Lev * num_nodes, #Features]", "\n", "\n", "# calculate the scales for thresholding", "\n", "ms", "=", "multiScales", "(", "x", ",", "self", ".", "r", ",", "self", ".", "Lev", ",", "self", ".", "num_nodes", ")", "\n", "\n", "# perform wavelet shrinkage", "\n", "for", "block_idx", "in", "range", "(", "self", ".", "Lev", "-", "1", ",", "self", ".", "r", "*", "self", ".", "Lev", ")", ":", "\n", "            ", "ms_idx", "=", "0", "\n", "if", "block_idx", "==", "self", ".", "Lev", "-", "1", ":", "# low frequency block", "\n", "                ", "x_shrink", "=", "x", "[", "block_idx", "*", "self", ".", "num_nodes", ":", "(", "block_idx", "+", "1", ")", "*", "self", ".", "num_nodes", ",", ":", "]", "\n", "", "else", ":", "# remaining high frequency blocks with wavelet shrinkage", "\n", "                ", "x_shrink", "=", "torch", ".", "cat", "(", "(", "x_shrink", ",", "\n", "waveletShrinkage", "(", "x", "[", "block_idx", "*", "self", ".", "num_nodes", ":", "(", "block_idx", "+", "1", ")", "*", "self", ".", "num_nodes", ",", ":", "]", ",", "\n", "simpleLambda", "(", "x", "[", "block_idx", "*", "self", ".", "num_nodes", ":", "(", "block_idx", "+", "1", ")", "*", "self", ".", "num_nodes", ",", ":", "]", ",", "\n", "ms", "[", "ms_idx", "]", ",", "self", ".", "sigma", ")", ",", "mode", "=", "self", ".", "shrinkage", ")", ")", ",", "dim", "=", "0", ")", "\n", "ms_idx", "+=", "1", "\n", "\n", "# Fast Tight Frame Reconstruction", "\n", "", "", "x_shrink", "=", "torch", ".", "sparse", ".", "mm", "(", "torch", ".", "cat", "(", "d_list", "[", "self", ".", "Lev", "-", "1", ":", "]", ",", "dim", "=", "1", ")", ",", "x_shrink", ")", "\n", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "x_shrink", "+=", "self", ".", "bias", "\n", "\n", "", "return", "x_shrink", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_dot.None.ufg_layer.UFGConv_R.__init__": [[131, 149], ["torch.Module.__init__", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "ufg_layer.UFGConv_R.reset_parameters", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "ufg_layer.UFGConv_R.register_parameter", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.bzho3923_gnn_dot.None.denoising_filters.BregmanADMM.__init__", "home.repos.pwc.inspect_result.bzho3923_gnn_dot.None.main.Net.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "r", ",", "Lev", ",", "num_nodes", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "UFGConv_R", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "Lev", "=", "Lev", "\n", "self", ".", "crop_len", "=", "(", "Lev", "-", "1", ")", "*", "num_nodes", "\n", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "            ", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "in_features", ",", "out_features", ")", ".", "cuda", "(", ")", ")", "\n", "self", ".", "filter", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "r", "*", "Lev", "*", "num_nodes", ",", "1", ")", ".", "cuda", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "in_features", ",", "out_features", ")", ")", "\n", "self", ".", "filter", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "r", "*", "Lev", "*", "num_nodes", ",", "1", ")", ")", "\n", "", "if", "bias", ":", "\n", "            ", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", ":", "\n", "                ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "out_features", ")", ".", "cuda", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "bias", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "out_features", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_dot.None.ufg_layer.UFGConv_R.reset_parameters": [[150, 155], ["torch.init.uniform_", "torch.init.uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.zeros_", "torch.init.zeros_"], "methods", ["None"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "filter", ",", "0.9", ",", "1.1", ")", "\n", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "weight", ")", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_dot.None.ufg_layer.UFGConv_R.forward": [[156, 177], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "d_list", ")", ":", "\n", "# d_list is a list of matrix operators (torch sparse format), row-by-row", "\n", "# x is a torch dense tensor", "\n", "        ", "x", "=", "torch", ".", "matmul", "(", "x", ",", "self", ".", "weight", ")", "\n", "\n", "# Fast Tight Frame Decomposition", "\n", "x", "=", "torch", ".", "sparse", ".", "mm", "(", "torch", ".", "cat", "(", "d_list", ",", "dim", "=", "0", ")", ",", "x", ")", "\n", "# the output x has shape [r * Lev * num_nodes, #Features]", "\n", "\n", "# Hadamard product in spectral domain", "\n", "x", "=", "self", ".", "filter", "*", "x", "\n", "# filter has shape [r * Lev * num_nodes, 1]", "\n", "# the output x has shape [r * Lev * num_nodes, #Features]", "\n", "\n", "# Fast Tight Frame Reconstruction", "\n", "x", "=", "torch", ".", "sparse", ".", "mm", "(", "torch", ".", "cat", "(", "d_list", "[", "self", ".", "Lev", "-", "1", ":", "]", ",", "dim", "=", "1", ")", ",", "x", "[", "self", ".", "crop_len", ":", ",", ":", "]", ")", "\n", "\n", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "x", "+=", "self", ".", "bias", "\n", "\n", "", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.bzho3923_gnn_dot.None.ufg_layer.multiScales": [[6, 26], ["range", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze().to", "torch.unsqueeze().to", "torch.cat", "torch.cat", "torch.sum", "torch.sum", "torch.unsqueeze", "torch.unsqueeze", "torch.tensor", "torch.tensor", "torch.unsqueeze", "torch.unsqueeze", "torch.sum", "torch.sum"], "function", ["None"], ["def", "multiScales", "(", "x", ",", "r", ",", "Lev", ",", "num_nodes", ")", ":", "\n", "    ", "\"\"\"\n    calculate the scales of the high frequency wavelet coefficients, which will be used for wavelet shrinkage.\n\n    :param x: all the blocks of wavelet coefficients, shape [r * Lev * num_nodes, num_hid_features] torch dense tensor\n    :param r: an integer\n    :param Lev: an integer\n    :param num_nodes: an integer which denotes the number of nodes in the graph\n    :return: scales stored in a torch dense tensor with shape [(r - 1) * Lev] for wavelet shrinkage\n    \"\"\"", "\n", "for", "block_idx", "in", "range", "(", "Lev", ",", "r", "*", "Lev", ")", ":", "\n", "        ", "if", "block_idx", "==", "Lev", ":", "\n", "            ", "specEnergy_temp", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "sum", "(", "x", "[", "block_idx", "*", "num_nodes", ":", "(", "block_idx", "+", "1", ")", "*", "num_nodes", ",", ":", "]", "**", "2", ")", ",", "dim", "=", "0", ")", "\n", "specEnergy", "=", "torch", ".", "unsqueeze", "(", "torch", ".", "tensor", "(", "1.0", ")", ",", "dim", "=", "0", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "", "else", ":", "\n", "            ", "specEnergy", "=", "torch", ".", "cat", "(", "(", "specEnergy", ",", "\n", "torch", ".", "unsqueeze", "(", "torch", ".", "sum", "(", "x", "[", "block_idx", "*", "num_nodes", ":", "(", "block_idx", "+", "1", ")", "*", "num_nodes", ",", ":", "]", "**", "2", ")", ",", "dim", "=", "0", ")", "/", "specEnergy_temp", ")", ")", "\n", "\n", "", "", "assert", "specEnergy", ".", "shape", "[", "0", "]", "==", "(", "r", "-", "1", ")", "*", "Lev", ",", "'something wrong in multiScales'", "\n", "return", "specEnergy", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_dot.None.ufg_layer.simpleLambda": [[28, 41], ["torch.unsqueeze().repeat", "torch.unsqueeze().repeat", "math.sqrt", "math.sqrt", "torch.unsqueeze", "torch.unsqueeze", "math.log"], "function", ["None"], ["", "def", "simpleLambda", "(", "x", ",", "scale", ",", "sigma", "=", "1.0", ")", ":", "\n", "    ", "\"\"\"\n    De-noising by Soft-thresholding. Author: David L. Donoho\n\n    :param x: one block of wavelet coefficients, shape [num_nodes, num_hid_features] torch dense tensor\n    :param scale: the scale of the specific input block of wavelet coefficients, a zero-dimensional torch tensor\n    :param sigma: a scalar constant, which denotes the standard deviation of the noise\n    :return: thresholds stored in a torch dense tensor with shape [num_hid_features]\n    \"\"\"", "\n", "n", ",", "m", "=", "x", ".", "shape", "\n", "thr", "=", "(", "math", ".", "sqrt", "(", "2", "*", "math", ".", "log", "(", "n", ")", ")", "/", "math", ".", "sqrt", "(", "n", ")", "*", "sigma", ")", "*", "torch", ".", "unsqueeze", "(", "scale", ",", "dim", "=", "0", ")", ".", "repeat", "(", "m", ")", "\n", "\n", "return", "thr", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_dot.None.ufg_layer.waveletShrinkage": [[43, 60], ["torch.mul", "torch.mul", "torch.mul", "torch.mul", "torch.sign", "torch.sign", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs"], "function", ["None"], ["", "def", "waveletShrinkage", "(", "x", ",", "thr", ",", "mode", "=", "'soft'", ")", ":", "\n", "    ", "\"\"\"\n    Perform soft or hard thresholding. The shrinkage is only applied to high frequency blocks.\n\n    :param x: one block of wavelet coefficients, shape [num_nodes, num_hid_features] torch dense tensor\n    :param thr: thresholds stored in a torch dense tensor with shape [num_hid_features]\n    :param mode: 'soft' or 'hard'. Default: 'soft'\n    :return: one block of wavelet coefficients after shrinkage. The shape will not be changed\n    \"\"\"", "\n", "assert", "mode", "in", "(", "'soft'", ",", "'hard'", ")", ",", "'shrinkage type is invalid'", "\n", "\n", "if", "mode", "==", "'soft'", ":", "\n", "        ", "x", "=", "torch", ".", "mul", "(", "torch", ".", "sign", "(", "x", ")", ",", "(", "(", "(", "torch", ".", "abs", "(", "x", ")", "-", "thr", ")", "+", "torch", ".", "abs", "(", "torch", ".", "abs", "(", "x", ")", "-", "thr", ")", ")", "/", "2", ")", ")", "\n", "", "else", ":", "\n", "        ", "x", "=", "torch", ".", "mul", "(", "x", ",", "(", "torch", ".", "abs", "(", "x", ")", ">", "thr", ")", ")", "\n", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_dot.None.main.Net.__init__": [[18, 29], ["nn.Module.__init__", "nn.Dropout", "main.Net.reset_parameters", "filter_type.lower", "conv_type.lower"], "methods", ["home.repos.pwc.inspect_result.bzho3923_gnn_dot.None.denoising_filters.BregmanADMM.__init__", "home.repos.pwc.inspect_result.bzho3923_gnn_dot.None.main.Net.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "conv", ",", "conv_type", ",", "smoothing", ",", "filter_type", ",", "Lev", ",", "dropout_prob", "=", "0.5", ")", ":", "\n", "        ", "super", "(", "Net", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "GConv", "=", "conv", "\n", "self", ".", "conv_type", "=", "conv_type", "\n", "self", ".", "smoothing", "=", "smoothing", "\n", "self", ".", "filter_type", "=", "filter_type", "\n", "self", ".", "Lev", "=", "Lev", "\n", "self", ".", "drop1", "=", "nn", ".", "Dropout", "(", "dropout_prob", ")", "\n", "assert", "filter_type", ".", "lower", "(", ")", "in", "[", "'tv'", ",", "'node'", ",", "'edge'", ",", "'breg'", ",", "'none'", "]", ",", "'invalid filter type'", "\n", "assert", "conv_type", ".", "lower", "(", ")", "in", "[", "'gcn'", ",", "'gat'", ",", "'ufg_r'", ",", "'ufg_s'", "]", ",", "'invalid graph convolution type'", "\n", "self", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_dot.None.main.Net.reset_parameters": [[30, 33], ["conv.reset_parameters"], "methods", ["home.repos.pwc.inspect_result.bzho3923_gnn_dot.None.main.Net.reset_parameters"], ["", "def", "reset_parameters", "(", "self", ")", ":", "\n", "        ", "for", "conv", "in", "self", ".", "GConv", ":", "\n", "            ", "conv", ".", "reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_dot.None.main.Net.forward": [[34, 72], ["main.Net.drop1", "F.log_softmax", "main.Net.conv_type.lower", "main.Net.filter_type.lower", "main.Net.filter_type.lower", "main.Net.smoothing", "main.Net.drop1", "main.Net.conv_type.lower", "main.Net.conv_type.lower", "F.elu", "main.Net.filter_type.lower", "main.Net.smoothing", "main.Net.drop1", "main.Net.conv_type.lower", "F.relu", "main.Net.filter_type.lower", "main.Net.smoothing", "main.Net.drop1", "main.Net.filter_type.lower", "main.Net.smoothing", "main.Net.drop1"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "data", ",", "d_list", ",", "degree", ")", ":", "\n", "        ", "x", ",", "edge_index", "=", "data", ".", "x", ",", "data", ".", "edge_index", "\n", "\n", "if", "'ufg'", "in", "self", ".", "conv_type", ".", "lower", "(", ")", ":", "\n", "            ", "x", "=", "self", ".", "GConv", "[", "0", "]", "(", "x", ",", "d_list", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "GConv", "[", "0", "]", "(", "x", ",", "edge_index", ")", "\n", "\n", "", "if", "self", ".", "filter_type", ".", "lower", "(", ")", "==", "'none'", ":", "\n", "            ", "if", "self", ".", "conv_type", ".", "lower", "(", ")", "==", "'gat'", ":", "\n", "                ", "x", "=", "F", ".", "elu", "(", "x", ")", "\n", "", "elif", "self", ".", "conv_type", ".", "lower", "(", ")", "==", "(", "'gcn'", "or", "'ufg_r'", ")", ":", "\n", "                ", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "\n", "", "", "x", "=", "self", ".", "drop1", "(", "x", ")", "\n", "\n", "if", "self", ".", "filter_type", ".", "lower", "(", ")", "==", "'tv'", ":", "\n", "            ", "x", "=", "self", ".", "smoothing", "(", "x", ",", "degree", ")", "\n", "x", "=", "self", ".", "drop1", "(", "x", ")", "\n", "\n", "", "elif", "self", ".", "filter_type", ".", "lower", "(", ")", "==", "'node'", ":", "\n", "            ", "x", "=", "self", ".", "smoothing", "(", "x", ",", "d_list", "[", "self", ".", "Lev", "-", "1", ":", "]", ",", "degree", ")", "\n", "x", "=", "self", ".", "drop1", "(", "x", ")", "\n", "\n", "", "elif", "self", ".", "filter_type", ".", "lower", "(", ")", "==", "'edge'", ":", "\n", "            ", "x", ",", "_", "=", "self", ".", "smoothing", "(", "x", ",", "degree", ")", "\n", "x", "=", "self", ".", "drop1", "(", "x", ")", "\n", "\n", "", "elif", "self", ".", "filter_type", ".", "lower", "(", ")", "==", "'breg'", ":", "\n", "            ", "x", ",", "_", "=", "self", ".", "smoothing", "(", "x", ",", "d_list", "[", "self", ".", "Lev", "-", "1", ":", "]", ",", "degree", ")", "\n", "x", "=", "self", ".", "drop1", "(", "x", ")", "\n", "\n", "", "if", "'ufg'", "in", "self", ".", "conv_type", ".", "lower", "(", ")", ":", "\n", "            ", "x", "=", "self", ".", "GConv", "[", "1", "]", "(", "x", ",", "d_list", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "self", ".", "GConv", "[", "1", "]", "(", "x", ",", "edge_index", ")", "\n", "\n", "", "return", "F", ".", "log_softmax", "(", "x", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_dot.None.denoising_filters.TVDenoisingADMM.__init__": [[33, 40], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.bzho3923_gnn_dot.None.denoising_filters.BregmanADMM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_nodes", ",", "num_features", ",", "L", ",", "alpha", "=", "0.5", ",", "admm_iter", "=", "1", ")", ":", "\n", "        ", "super", "(", "TVDenoisingADMM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_nodes", "=", "num_nodes", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "L", "=", "L", "\n", "self", ".", "admm_iter", "=", "admm_iter", "\n", "self", ".", "alpha", "=", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_dot.None.denoising_filters.TVDenoisingADMM.forward": [[41, 57], ["range", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "denoising_filters.TVDenoisingADMM.L.todense"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "F", ",", "d", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ---------\n        F : Graph signal to be smoothed, shape [Num_node, Num_features]\n        d : Vector of normalized graph node degrees in shape [Num_node]\n\n        :returns : Smoothed graph signal U\n\n        \"\"\"", "\n", "for", "k", "in", "range", "(", "self", ".", "admm_iter", ")", ":", "\n", "            ", "d", "[", "d", "==", "0", "]", "=", "1", "# avoid isolated nodes to prevent nan value in 1 / d", "\n", "Uk", "=", "torch", ".", "eye", "(", "self", ".", "num_nodes", ")", ".", "to", "(", "F", ".", "device", ")", "-", "self", ".", "alpha", "*", "(", "1.0", "/", "d", ")", ".", "unsqueeze", "(", "1", ")", "*", "torch", ".", "tensor", "(", "self", ".", "L", ".", "todense", "(", ")", ")", ".", "to", "(", "F", ".", "device", ")", "\n", "Uk", "=", "torch", ".", "mm", "(", "Uk", ",", "F", ")", "\n", "\n", "", "return", "Uk", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_dot.None.denoising_filters.EdgeDenoisingADMM.__init__": [[61, 76], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.bzho3923_gnn_dot.None.denoising_filters.BregmanADMM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_nodes", ",", "num_features", ",", "rho", ",", "mu1_0", ",", "mu3_0", ",", "mu4_0", ",", "admm_iter", ")", ":", "\n", "        ", "super", "(", "EdgeDenoisingADMM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_nodes", "=", "num_nodes", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "admm_iter", "=", "admm_iter", "\n", "self", ".", "rho", "=", "rho", "\n", "self", ".", "mu1_max", "=", "1e+6", "\n", "self", ".", "initial_mu1", "=", "mu1_0", "\n", "self", ".", "mu1", "=", "self", ".", "initial_mu1", "\n", "self", ".", "mu3_max", "=", "1e+6", "\n", "self", ".", "initial_mu3", "=", "mu3_0", "\n", "self", ".", "mu3", "=", "self", ".", "initial_mu3", "\n", "self", ".", "mu4_max", "=", "1e+6", "\n", "self", ".", "initial_mu4", "=", "mu4_0", "\n", "self", ".", "mu4", "=", "self", ".", "initial_mu4", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_dot.None.denoising_filters.EdgeDenoisingADMM.forward": [[77, 161], ["torch.eye().to().detach", "torch.eye().to().detach", "torch.eye().to().detach", "torch.eye().to().detach", "torch.eye().to().detach", "torch.eye().to().detach", "torch.eye().to().detach", "torch.eye().to().detach", "torch.eye().to().detach", "torch.eye().to().detach", "torch.eye().to().detach", "torch.eye().to().detach", "torch.eye().to().detach", "torch.eye().to().detach", "torch.eye().to().detach", "torch.eye().to().detach", "torch.eye().to().detach", "torch.eye().to().detach", "range", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.linalg.cholesky", "torch.linalg.cholesky", "torch.linalg.cholesky", "torch.linalg.cholesky", "torch.linalg.cholesky", "torch.linalg.cholesky", "torch.linalg.cholesky", "torch.linalg.cholesky", "torch.linalg.cholesky", "denoising_filters.soft_thresholding", "torch.diagonal().zero_", "torch.diagonal().zero_", "torch.diagonal().zero_", "torch.diagonal().zero_", "torch.diagonal().zero_", "torch.diagonal().zero_", "torch.diagonal().zero_", "torch.diagonal().zero_", "torch.diagonal().zero_", "torch.linalg.cholesky", "torch.linalg.cholesky", "torch.linalg.cholesky", "torch.linalg.cholesky", "torch.linalg.cholesky", "torch.linalg.cholesky", "torch.linalg.cholesky", "torch.linalg.cholesky", "torch.linalg.cholesky", "torch.cholesky_solve", "torch.cholesky_solve", "torch.cholesky_solve", "torch.cholesky_solve", "torch.cholesky_solve", "torch.cholesky_solve", "torch.cholesky_solve", "torch.cholesky_solve", "torch.cholesky_solve", "denoising_filters.soft_thresholding", "min", "min", "min", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.cat.t", "torch.cat.t", "torch.cat.t", "torch.cholesky_solve", "torch.cholesky_solve", "torch.cholesky_solve", "torch.cholesky_solve", "torch.cholesky_solve", "torch.cholesky_solve", "torch.cholesky_solve", "torch.cholesky_solve", "torch.cholesky_solve", "L0k.t", "d.unsqueeze", "L0k.t", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.cat.t", "torch.cat.t", "torch.cat.t", "torch.ones().to.t", "torch.ones().to.t", "torch.ones().to.t", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.cholesky_solve.t", "torch.cholesky_solve.t", "torch.cholesky_solve.t", "torch.cholesky_solve.t", "torch.cholesky_solve.t", "torch.cholesky_solve.t", "torch.ones().to.t", "torch.ones().to.t", "torch.ones().to.t"], "methods", ["home.repos.pwc.inspect_result.bzho3923_gnn_dot.None.denoising_filters.soft_thresholding", "home.repos.pwc.inspect_result.bzho3923_gnn_dot.None.denoising_filters.soft_thresholding"], ["", "def", "forward", "(", "self", ",", "F", ",", "d", ",", "init_U", "=", "None", ",", "init_Z", "=", "None", ",", "init_E", "=", "None", ",", "init_Ones", "=", "None", ",", "init_Lambda1", "=", "None", ",", "init_Lambda3", "=", "None", ",", "init_Lambda4", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        F : Graph signal to be smoothed, shape [Num_node, Num_features].\n        d : Vector of normalized graph node degrees in shape [Num_node, 1].\n        init_Y : initialized matrix with zeros diag and other elements of 1 / (Num_nodes -1) in shape [Num_node, Num_node].\n        init_Z : initialized matrix with elements of 1 / (Num_node - 1) in shape [Num_node, Num_node].\n        init_E : Initialized zero matrix in shape [Num_node, Num_feature].\n        init_Ones : Vector of ones in shape [Num_node, 1].\n        init_Lambda1 : Initialized zero matrix in shape [Num_node, Num_feature].\n        init_Lambda3 : Initialized zero vector in shape [Num_node, 1].\n\n        :returns: Smoothed graph signal U\n\n        \"\"\"", "\n", "if", "init_U", "is", "None", ":", "\n", "            ", "Uk", "=", "F", "# Initialized matrix Uk with F in dim [Num_nodes, Num_features]", "\n", "", "else", ":", "\n", "            ", "Uk", "=", "init_U", "\n", "", "if", "init_Z", "is", "None", ":", "\n", "            ", "Zk", "=", "torch", ".", "zeros", "(", "self", ".", "num_nodes", ",", "self", ".", "num_nodes", ")", ".", "to", "(", "F", ".", "device", ")", "# Initialized matrix Zk in dim [Num_nodes, Num_nodes]", "\n", "", "else", ":", "\n", "            ", "Zk", "=", "init_Z", "\n", "", "if", "init_E", "is", "None", ":", "\n", "            ", "Ek", "=", "torch", ".", "zeros", "(", "self", ".", "num_nodes", ",", "self", ".", "num_features", ")", ".", "to", "(", "F", ".", "device", ")", "# Initialized matrix Ek in dim [Num_nodes, Num_features]", "\n", "", "else", ":", "\n", "            ", "Ek", "=", "init_E", "\n", "", "if", "init_Ones", "is", "None", ":", "\n", "            ", "Ones", "=", "torch", ".", "ones", "(", "self", ".", "num_nodes", ",", "1", ")", ".", "to", "(", "F", ".", "device", ")", "# Initialized vector Ones in dim [Num_nodes, 1]", "\n", "", "else", ":", "\n", "            ", "Ones", "=", "init_Ones", "\n", "", "if", "init_Lambda1", "is", "None", ":", "\n", "            ", "Lambda1", "=", "torch", ".", "zeros", "(", "self", ".", "num_nodes", ",", "self", ".", "num_features", ")", ".", "to", "(", "F", ".", "device", ")", "# Initialized matrix Lambda1 in dim [Num_nodes, Num_features]", "\n", "", "else", ":", "\n", "            ", "Lambda1", "=", "init_Lambda1", "\n", "", "if", "init_Lambda3", "is", "None", ":", "\n", "            ", "Lambda3", "=", "torch", ".", "zeros", "(", "self", ".", "num_nodes", ",", "1", ")", ".", "to", "(", "F", ".", "device", ")", "# Initialized vector Lambda3 in dim [Num_nodes, 1]", "\n", "", "else", ":", "\n", "            ", "Lambda3", "=", "init_Lambda3", "\n", "", "if", "init_Lambda4", "is", "None", ":", "\n", "            ", "Lambda4", "=", "torch", ".", "zeros", "(", "self", ".", "num_nodes", ",", "self", ".", "num_nodes", ")", ".", "to", "(", "F", ".", "device", ")", "# Initialized matrix Lambda4 in dim [Num_nodes, Num_nodes]", "\n", "", "else", ":", "\n", "            ", "Lambda4", "=", "init_Lambda4", "\n", "\n", "", "self", ".", "mu1", "=", "self", ".", "initial_mu1", "\n", "self", ".", "mu3", "=", "self", ".", "initial_mu3", "\n", "self", ".", "mu4", "=", "self", ".", "initial_mu4", "\n", "I1", "=", "torch", ".", "eye", "(", "self", ".", "num_nodes", ",", "self", ".", "num_nodes", ")", ".", "to", "(", "F", ".", "device", ")", ".", "detach", "(", ")", "# Identity matrix for Yk and Zk update in dim: [Num_nodes, Num_nodes]", "\n", "I2", "=", "torch", ".", "eye", "(", "self", ".", "num_features", "+", "1", ",", "self", ".", "num_features", "+", "1", ")", ".", "to", "(", "F", ".", "device", ")", ".", "detach", "(", ")", "# Identity matrix for TildeUk update in dim: [Num_features + 1, Num_features + 1]", "\n", "\n", "for", "k", "in", "range", "(", "self", ".", "admm_iter", ")", ":", "\n", "# Update Yk", "\n", "            ", "TildeUk", "=", "torch", ".", "cat", "(", "(", "self", ".", "mu1", "**", "0.5", "*", "Uk", ",", "self", ".", "mu3", "**", "0.5", "*", "Ones", ")", ",", "dim", "=", "1", ")", "# TildeUk dim: [Num_features + 1, Num_features + 1]", "\n", "l_tmp", "=", "torch", ".", "linalg", ".", "cholesky", "(", "self", ".", "mu4", "*", "I2", "+", "TildeUk", ".", "t", "(", ")", "@", "TildeUk", ")", "\n", "inv_1", "=", "(", "1", "/", "self", ".", "mu4", ")", "*", "(", "I1", "-", "TildeUk", "@", "torch", ".", "cholesky_solve", "(", "TildeUk", ".", "t", "(", ")", ",", "l_tmp", ")", ")", "# Use Cholesky to solve the Woodbury small matrix", "\n", "\n", "Yk", "=", "(", "self", ".", "mu1", "*", "(", "Uk", "-", "Ek", ")", "@", "Uk", ".", "t", "(", ")", "+", "self", ".", "mu3", "*", "Ones", "@", "Ones", ".", "t", "(", ")", "+", "\n", "self", ".", "mu4", "*", "Zk", "+", "Lambda1", "@", "Uk", ".", "t", "(", ")", "-", "Lambda3", "@", "Ones", ".", "t", "(", ")", "-", "Lambda4", ")", "@", "inv_1", "\n", "\n", "# Update Zk", "\n", "R", "=", "soft_thresholding", "(", "Yk", "+", "1", "/", "self", ".", "mu4", "*", "Lambda4", ",", "1", "/", "self", ".", "mu4", ",", "'element'", ")", "\n", "torch", ".", "diagonal", "(", "R", ")", ".", "zero_", "(", ")", "\n", "Zk", "=", "R", "\n", "\n", "# Update Uk", "\n", "L0k", "=", "I1", "-", "Yk", "# L0k dim:[Num_nodes, Num_nodes]", "\n", "inv_2", "=", "torch", ".", "diag", "(", "d", ")", "+", "self", ".", "mu1", "*", "L0k", ".", "t", "(", ")", "@", "L0k", "\n", "l_inv_2", "=", "torch", ".", "linalg", ".", "cholesky", "(", "inv_2", ")", "# Cholesky factorize matrix into lower-tri matrix", "\n", "Uk", "=", "torch", ".", "cholesky_solve", "(", "d", ".", "unsqueeze", "(", "1", ")", "*", "F", "+", "L0k", ".", "t", "(", ")", "@", "\n", "(", "self", ".", "mu1", "*", "Ek", "-", "Lambda1", ")", ",", "l_inv_2", ")", "\n", "\n", "# Update Ek", "\n", "Ek", "=", "soft_thresholding", "(", "torch", ".", "mm", "(", "L0k", ",", "Uk", ")", "+", "Lambda1", "/", "self", ".", "mu1", ",", "1", "/", "self", ".", "mu1", ",", "'row'", ")", "\n", "# Update Lambda1, Lambda2, Lambda4", "\n", "Lambda1", "=", "Lambda1", "+", "self", ".", "mu1", "*", "(", "Uk", "-", "torch", ".", "mm", "(", "Zk", ",", "Uk", ")", "-", "Ek", ")", "\n", "Lambda3", "=", "Lambda3", "+", "self", ".", "mu3", "*", "(", "torch", ".", "sum", "(", "Zk", ",", "1", ",", "keepdim", "=", "True", ")", "-", "1", ")", "\n", "Lambda4", "=", "Lambda4", "+", "self", ".", "mu4", "*", "(", "Yk", "-", "Zk", ")", "\n", "# Update mu1, mu3, and mu4", "\n", "self", ".", "mu1", "=", "min", "(", "self", ".", "rho", "*", "self", ".", "mu1", ",", "self", ".", "mu1_max", ")", "\n", "self", ".", "mu3", "=", "min", "(", "self", ".", "rho", "*", "self", ".", "mu3", ",", "self", ".", "mu3_max", ")", "\n", "self", ".", "mu4", "=", "min", "(", "self", ".", "rho", "*", "self", ".", "mu4", ",", "self", ".", "mu4_max", ")", "\n", "\n", "", "return", "Uk", ",", "Zk", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_dot.None.denoising_filters.NodeDenoisingADMM.__init__": [[165, 180], ["torch.Module.__init__", "range", "numpy.power"], "methods", ["home.repos.pwc.inspect_result.bzho3923_gnn_dot.None.denoising_filters.BregmanADMM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_nodes", ",", "num_features", ",", "r", ",", "J", ",", "nu", ",", "admm_iter", ",", "rho", ",", "mu2_0", ")", ":", "\n", "        ", "super", "(", "NodeDenoisingADMM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "r", "=", "r", "\n", "self", ".", "J", "=", "J", "\n", "self", ".", "num_nodes", "=", "num_nodes", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "admm_iter", "=", "admm_iter", "\n", "self", ".", "rho", "=", "rho", "\n", "self", ".", "nu", "=", "[", "nu", "]", "*", "J", "\n", "for", "i", "in", "range", "(", "J", ")", ":", "\n", "            ", "self", ".", "nu", "[", "i", "]", "=", "self", ".", "nu", "[", "i", "]", "/", "np", ".", "power", "(", "4.0", ",", "i", ")", "# from (4.3) in Dong's paper", "\n", "", "self", ".", "nu", "=", "[", "0.0", "]", "+", "self", ".", "nu", "# To include W_{0,J}", "\n", "self", ".", "mu2_max", "=", "1e+6", "\n", "self", ".", "initial_mu2", "=", "mu2_0", "\n", "self", ".", "mu2", "=", "self", ".", "initial_mu2", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_dot.None.denoising_filters.NodeDenoisingADMM.forward": [[181, 223], ["range", "range", "range", "min", "range", "range", "denoising_filters.soft_thresholding", "Qs.append", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "Lambda2.append", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "zip", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "zip", "zip", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "d.unsqueeze", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "d.unsqueeze", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size"], "methods", ["home.repos.pwc.inspect_result.bzho3923_gnn_dot.None.denoising_filters.soft_thresholding"], ["", "def", "forward", "(", "self", ",", "F", ",", "W_list", ",", "d", ",", "init_Qs", "=", "None", ",", "init_Lambda2", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        F : Graph signal to be smoothed, shape [Num_node, Num_features].\n        W_list : Framelet Base Operator, in list, each is a sparse matrix of size Num_node x Num_node.\n        d : Vector of normalized graph node degrees in shape [Num_node, 1].\n        init_Qs: Initialized list of (length: j * l) zero matrix in shape [Num_node, Num_feature].\n        init_Lambda2: Initialized lists of (length: j*l) zero matrix in shape [Num_node, Num_feature].\n\n        :returns:  Smoothed graph signal U\n\n        \"\"\"", "\n", "if", "init_Qs", "is", "None", ":", "\n", "            ", "Qs", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "self", ".", "r", "-", "1", ")", ":", "\n", "                ", "for", "l", "in", "range", "(", "self", ".", "J", ")", ":", "\n", "                    ", "Qs", ".", "append", "(", "torch", ".", "zeros", "(", "torch", ".", "Size", "(", "[", "self", ".", "num_nodes", ",", "self", ".", "num_features", "]", ")", ")", ".", "to", "(", "F", ".", "device", ")", ")", "\n", "", "", "Qs", "=", "[", "torch", ".", "zeros", "(", "(", "self", ".", "num_nodes", ",", "self", ".", "num_features", ")", ")", ".", "to", "(", "F", ".", "device", ")", "]", "+", "Qs", "\n", "", "else", ":", "\n", "            ", "Qs", "=", "init_Qs", "\n", "", "if", "init_Lambda2", "is", "None", ":", "\n", "            ", "Lambda2", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "self", ".", "r", "-", "1", ")", ":", "\n", "                ", "for", "l", "in", "range", "(", "self", ".", "J", ")", ":", "\n", "                    ", "Lambda2", ".", "append", "(", "torch", ".", "zeros", "(", "torch", ".", "Size", "(", "[", "self", ".", "num_nodes", ",", "self", ".", "num_features", "]", ")", ")", ".", "to", "(", "F", ".", "device", ")", ")", "\n", "", "", "Lambda2", "=", "[", "torch", ".", "zeros", "(", "(", "self", ".", "num_nodes", ",", "self", ".", "num_features", ")", ")", ".", "to", "(", "F", ".", "device", ")", "]", "+", "Lambda2", "\n", "", "else", ":", "\n", "            ", "Lambda2", "=", "init_Lambda2", "\n", "\n", "", "self", ".", "mu2", "=", "self", ".", "initial_mu2", "\n", "\n", "for", "k", "in", "range", "(", "self", ".", "admm_iter", ")", ":", "\n", "            ", "tmp", "=", "[", "self", ".", "mu2", "*", "q_jl", "+", "Lambda_jl", "for", "q_jl", ",", "Lambda_jl", "in", "zip", "(", "Qs", ",", "Lambda2", ")", "]", "\n", "# Equation (15) in the manuscript to update U", "\n", "Uk", "=", "(", "1.0", "/", "(", "d", "+", "self", ".", "mu2", ")", ")", ".", "unsqueeze", "(", "1", ")", "*", "(", "d", ".", "unsqueeze", "(", "1", ")", "*", "F", "+", "torch", ".", "sparse", ".", "mm", "(", "torch", ".", "cat", "(", "W_list", ",", "dim", "=", "1", ")", ",", "torch", ".", "cat", "(", "tmp", ",", "dim", "=", "0", ")", ")", ")", "\n", "Qs", "=", "[", "soft_thresholding", "(", "torch", ".", "sparse", ".", "mm", "(", "W_jl", ",", "Uk", ")", "-", "Lambda_jl", "/", "self", ".", "mu2", ",", "(", "nu_jl", "/", "self", ".", "mu2", ")", "*", "d", ".", "unsqueeze", "(", "1", ")", ",", "'element'", ")", "\n", "for", "nu_jl", ",", "W_jl", ",", "Lambda_jl", "in", "zip", "(", "self", ".", "nu", ",", "W_list", ",", "Lambda2", ")", "]", "\n", "Lambda2", "=", "[", "Lambda_jl", "+", "self", ".", "mu2", "*", "(", "q_jl", "-", "torch", ".", "sparse", ".", "mm", "(", "W_jl", ",", "Uk", ")", ")", "for", "W_jl", ",", "Lambda_jl", ",", "q_jl", "in", "zip", "(", "W_list", ",", "Lambda2", ",", "Qs", ")", "]", "\n", "self", ".", "mu2", "=", "min", "(", "self", ".", "rho", "*", "self", ".", "mu2", ",", "self", ".", "mu2_max", ")", "\n", "\n", "", "return", "Uk", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_dot.None.denoising_filters.BregmanADMM.__init__": [[226, 252], ["torch.Module.__init__", "range", "numpy.power"], "methods", ["home.repos.pwc.inspect_result.bzho3923_gnn_dot.None.denoising_filters.BregmanADMM.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_nodes", ",", "num_features", ",", "r", ",", "J", ",", "nu", ",", "rho", ",", "mu1_0", ",", "mu2_0", ",", "\n", "mu3_0", ",", "mu4_0", ",", "lam", ",", "admm_iter", ")", ":", "\n", "        ", "super", "(", "BregmanADMM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_nodes", "=", "num_nodes", "\n", "self", ".", "num_features", "=", "num_features", "\n", "self", ".", "r", "=", "r", "\n", "self", ".", "J", "=", "J", "\n", "self", ".", "admm_iter", "=", "admm_iter", "\n", "self", ".", "rho", "=", "rho", "\n", "self", ".", "nu", "=", "[", "nu", "]", "*", "J", "\n", "for", "i", "in", "range", "(", "J", ")", ":", "\n", "            ", "self", ".", "nu", "[", "i", "]", "=", "self", ".", "nu", "[", "i", "]", "/", "np", ".", "power", "(", "4.0", ",", "i", ")", "# Dong bin's paper section (4.3)", "\n", "", "self", ".", "nu", "=", "[", "0.0", "]", "+", "self", ".", "nu", "\n", "self", ".", "mu1_max", "=", "1e+6", "\n", "self", ".", "initial_mu1", "=", "mu1_0", "\n", "self", ".", "mu1", "=", "self", ".", "initial_mu1", "\n", "self", ".", "mu2_max", "=", "1e+6", "\n", "self", ".", "initial_mu2", "=", "mu2_0", "\n", "self", ".", "mu2", "=", "self", ".", "initial_mu2", "\n", "self", ".", "mu3_max", "=", "1e+6", "\n", "self", ".", "initial_mu3", "=", "mu3_0", "\n", "self", ".", "mu3", "=", "self", ".", "initial_mu3", "\n", "self", ".", "mu4_max", "=", "1e+6", "\n", "self", ".", "initial_mu4", "=", "mu4_0", "\n", "self", ".", "mu4", "=", "self", ".", "initial_mu4", "\n", "self", ".", "lam", "=", "lam", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_dot.None.denoising_filters.BregmanADMM.forward": [[253, 372], ["torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "range", "range", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.ones().to().detach", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "range", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "denoising_filters.soft_thresholding", "torch.diagonal().zero_", "torch.diagonal().zero_", "torch.diagonal().zero_", "torch.diagonal().zero_", "torch.diagonal().zero_", "torch.diagonal().zero_", "torch.diagonal().zero_", "torch.diagonal().zero_", "torch.diagonal().zero_", "torch.linalg.solve", "torch.linalg.solve", "torch.linalg.solve", "torch.linalg.solve", "torch.linalg.solve", "torch.linalg.solve", "torch.linalg.solve", "torch.linalg.solve", "torch.linalg.solve", "denoising_filters.soft_thresholding", "min", "min", "min", "min", "range", "range", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.diag", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "denoising_filters.soft_thresholding", "Qs.append", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.ones().to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "Lambda2.append", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "torch.diagonal", "zip", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "zip", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "zip", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.linalg.solve", "torch.linalg.solve", "torch.linalg.solve", "torch.linalg.solve", "torch.linalg.solve", "torch.linalg.solve", "torch.linalg.solve", "torch.linalg.solve", "torch.linalg.solve", "L0k.t", "d.unsqueeze", "L0k.t", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "d.unsqueeze", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.ones", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.cat.t", "torch.cat.t", "torch.cat.t", "torch.ones().to().detach.t", "torch.ones().to().detach.t", "torch.ones().to().detach.t", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.sparse.mm", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.linalg.solve.t", "torch.linalg.solve.t", "torch.linalg.solve.t", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.Size", "torch.cat.t", "torch.cat.t", "torch.cat.t", "torch.linalg.solve.t", "torch.linalg.solve.t", "torch.linalg.solve.t", "torch.ones().to().detach.t", "torch.ones().to().detach.t", "torch.ones().to().detach.t"], "methods", ["home.repos.pwc.inspect_result.bzho3923_gnn_dot.None.denoising_filters.soft_thresholding", "home.repos.pwc.inspect_result.bzho3923_gnn_dot.None.denoising_filters.soft_thresholding", "home.repos.pwc.inspect_result.bzho3923_gnn_dot.None.denoising_filters.soft_thresholding"], ["", "def", "forward", "(", "self", ",", "F", ",", "W_list", ",", "d", ",", "init_U", "=", "None", ",", "init_Qs", "=", "None", ",", "init_Z", "=", "None", ",", "\n", "init_E", "=", "None", ",", "init_Ones", "=", "None", ",", "init_Lambda1", "=", "None", ",", "init_Lambda2", "=", "None", ",", "\n", "init_Lambda3", "=", "None", ",", "init_Lambda4", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Parameters\n        ----------\n        init_U : Initialized matrix U with F in dim [Num_nodes, Num_features].\n        F : Graph signal to be smoothed, shape [Num_node, Num_features].\n        W_list : Framelet Base Operator, in list, each is a sparse matrix of size [Num_node, Num_node].\n        d : Vector of normalized graph node degrees in shape [Num_node].\n        init_Qs : Initialized list of (length: j * l) zero matrix in shape [Num_node, Num_feature].\n        init_Z : Initialized zero matrix in shape [Num_node, Num_node].\n        init_E : Initialized zero matrix in shape [Num_node, Num_feature].\n        init_Ones : Vector of ones in shape [Num_node, 1].\n        init_Lambda1 : Initialized zero matrix in shape [Num_node, Num_feature].\n        init_Lambda2 : Initialized lists of (length: j * l) zero matrix in shape [Num_node, Num_feature].\n        init_Lambda3 : Initialized zero vector in shape [Num_node, 1].\n        init_Lambda4 : Initialized Zero matrix in shape [Num_node, Num_node].\n\n        :returns:\n        Uk : Smoothed graph signal U. (feature matrix)\n        Zk : Smoothed graph topology structure (adjacency matrix)\n\n        \"\"\"", "\n", "if", "init_U", "is", "None", ":", "\n", "            ", "Uk", "=", "F", "# Initialized matrix Uk with F in dim [Num_nodes, Num_features]", "\n", "", "else", ":", "\n", "            ", "Uk", "=", "init_U", "\n", "\n", "", "if", "init_Qs", "is", "None", ":", "\n", "            ", "Qs", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "self", ".", "r", "-", "1", ")", ":", "\n", "                ", "for", "l", "in", "range", "(", "self", ".", "J", ")", ":", "\n", "                    ", "Qs", ".", "append", "(", "torch", ".", "zeros", "(", "torch", ".", "Size", "(", "[", "self", ".", "num_nodes", ",", "self", ".", "num_features", "]", ")", ")", ".", "to", "(", "F", ".", "device", ")", ")", "\n", "", "", "Qs", "=", "[", "torch", ".", "zeros", "(", "(", "self", ".", "num_nodes", ",", "self", ".", "num_features", ")", ")", ".", "to", "(", "F", ".", "device", ")", "]", "+", "Qs", "\n", "", "else", ":", "\n", "            ", "Qs", "=", "init_Qs", "\n", "\n", "", "if", "init_Z", "is", "None", ":", "\n", "            ", "Zk", "=", "torch", ".", "zeros", "(", "self", ".", "num_nodes", ",", "self", ".", "num_nodes", ")", ".", "to", "(", "F", ".", "device", ")", "# Initialized matrix Zk in dim [Num_nodes, Num_nodes]", "\n", "", "else", ":", "\n", "            ", "Zk", "=", "init_Z", "\n", "\n", "", "if", "init_E", "is", "None", ":", "\n", "            ", "Ek", "=", "torch", ".", "zeros", "(", "self", ".", "num_nodes", ",", "self", ".", "num_features", ")", ".", "to", "(", "F", ".", "device", ")", "# Initialized matrix Ek in dim [Num_nodes, Num_features]", "\n", "", "else", ":", "\n", "            ", "Ek", "=", "init_E", "\n", "\n", "", "if", "init_Ones", "is", "None", ":", "\n", "            ", "Ones", "=", "torch", ".", "ones", "(", "self", ".", "num_nodes", ",", "1", ")", ".", "to", "(", "F", ".", "device", ")", ".", "detach", "(", ")", "# Initialized vector Ones in dim [Num_nodes, 1]", "\n", "", "else", ":", "\n", "            ", "Ones", "=", "init_Ones", "\n", "\n", "", "if", "init_Lambda1", "is", "None", ":", "\n", "            ", "Lambda1", "=", "torch", ".", "zeros", "(", "self", ".", "num_nodes", ",", "self", ".", "num_features", ")", ".", "to", "(", "F", ".", "device", ")", "# Initialized matrix Lambda1 in dim [Num_nodes, Num_features]", "\n", "", "else", ":", "\n", "            ", "Lambda1", "=", "init_Lambda1", "\n", "\n", "", "if", "init_Lambda2", "is", "None", ":", "\n", "            ", "Lambda2", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "self", ".", "r", "-", "1", ")", ":", "\n", "                ", "for", "l", "in", "range", "(", "self", ".", "J", ")", ":", "\n", "                    ", "Lambda2", ".", "append", "(", "torch", ".", "zeros", "(", "self", ".", "num_nodes", ",", "self", ".", "num_features", ")", ".", "to", "(", "F", ".", "device", ")", ")", "\n", "", "", "Lambda2", "=", "[", "torch", ".", "zeros", "(", "self", ".", "num_nodes", ",", "self", ".", "num_features", ")", ".", "to", "(", "F", ".", "device", ")", "]", "+", "Lambda2", "\n", "", "else", ":", "\n", "            ", "Lambda2", "=", "init_Lambda2", "# Setting initial Lambda2 as list (length: j * l) of zero matrix with dim[n * d]", "\n", "\n", "", "if", "init_Lambda3", "is", "None", ":", "\n", "            ", "Lambda3", "=", "torch", ".", "zeros", "(", "self", ".", "num_nodes", ",", "1", ")", ".", "to", "(", "F", ".", "device", ")", "# Initialized vector Lambda3 in dim [Num_nodes, 1]", "\n", "", "else", ":", "\n", "            ", "Lambda3", "=", "init_Lambda3", "\n", "\n", "", "if", "init_Lambda4", "is", "None", ":", "\n", "            ", "Lambda4", "=", "torch", ".", "zeros", "(", "self", ".", "num_nodes", ",", "self", ".", "num_nodes", ")", ".", "to", "(", "F", ".", "device", ")", "# Initialized matrix Lambda4 in dim [Num_nodes, Num_nodes]", "\n", "", "else", ":", "\n", "            ", "Lambda4", "=", "init_Lambda4", "\n", "\n", "", "self", ".", "mu1", "=", "self", ".", "initial_mu1", "\n", "self", ".", "mu2", "=", "self", ".", "initial_mu2", "\n", "self", ".", "mu3", "=", "self", ".", "initial_mu3", "\n", "self", ".", "mu4", "=", "self", ".", "initial_mu4", "\n", "\n", "I1", "=", "torch", ".", "eye", "(", "self", ".", "num_nodes", ",", "self", ".", "num_nodes", ")", ".", "to", "(", "F", ".", "device", ")", "# Identity matrix for Yk and Zk update in dim: [Num_nodes, Num_nodes]", "\n", "I2", "=", "torch", ".", "eye", "(", "self", ".", "num_features", "+", "1", ",", "self", ".", "num_features", "+", "1", ")", ".", "to", "(", "F", ".", "device", ")", "# Identity matrix for TildeUk update in dim: [Num_features + 1, Num_features + 1]", "\n", "for", "k", "in", "range", "(", "self", ".", "admm_iter", ")", ":", "\n", "# Update Yk", "\n", "            ", "TildeUk", "=", "torch", ".", "cat", "(", "(", "self", ".", "mu1", "**", "0.5", "*", "Uk", ",", "self", ".", "mu3", "**", "0.5", "*", "Ones", ")", ",", "dim", "=", "1", ")", "# TildeUk dim: [Num_features + 1, Num_features + 1]", "\n", "inv_1", "=", "(", "1", "/", "self", ".", "mu4", ")", "*", "(", "I1", "-", "TildeUk", "@", "torch", ".", "linalg", ".", "solve", "(", "\n", "self", ".", "mu4", "*", "I2", "+", "TildeUk", ".", "t", "(", ")", "@", "TildeUk", ",", "TildeUk", ".", "t", "(", ")", ")", ")", "# Solution of Woodbury formula scaling down the large inverse", "\n", "Yk", "=", "(", "self", ".", "mu1", "*", "(", "Uk", "-", "Ek", ")", "@", "Uk", ".", "t", "(", ")", "+", "self", ".", "mu3", "*", "Ones", "@", "Ones", ".", "t", "(", ")", "+", "\n", "self", ".", "mu4", "*", "Zk", "+", "Lambda1", "@", "Uk", ".", "t", "(", ")", "-", "Lambda3", "@", "Ones", ".", "t", "(", ")", "-", "Lambda4", ")", "@", "inv_1", "\n", "# Update Zk", "\n", "R", "=", "soft_thresholding", "(", "Yk", "+", "1", "/", "self", ".", "mu4", "*", "Lambda4", ",", "1", "/", "self", ".", "mu4", ",", "'element'", ")", "\n", "torch", ".", "diagonal", "(", "R", ")", ".", "zero_", "(", ")", "\n", "Zk", "=", "R", "\n", "# Update Uk", "\n", "L0k", "=", "I1", "-", "Yk", "\n", "inv_2", "=", "torch", ".", "diag", "(", "d", "+", "self", ".", "mu2", ")", "+", "self", ".", "mu1", "*", "L0k", ".", "t", "(", ")", "@", "L0k", "\n", "tmp_1", "=", "[", "self", ".", "mu2", "*", "q_jl", "+", "Lambda2_jl", "for", "q_jl", ",", "Lambda2_jl", "in", "zip", "(", "Qs", ",", "Lambda2", ")", "]", "# mu2 * Qjl + Lambda2jl", "\n", "tmp_2", "=", "d", ".", "unsqueeze", "(", "1", ")", "*", "F", "+", "torch", ".", "mm", "(", "L0k", ".", "t", "(", ")", ",", "self", ".", "mu1", "*", "Ek", "-", "Lambda1", ")", "+", "torch", ".", "sparse", ".", "mm", "(", "torch", ".", "cat", "(", "W_list", ",", "dim", "=", "1", ")", ",", "torch", ".", "cat", "(", "tmp_1", ",", "dim", "=", "0", ")", ")", "\n", "Uk", "=", "torch", ".", "linalg", ".", "solve", "(", "inv_2", ",", "tmp_2", ")", "\n", "# Update Qs", "\n", "Qs", "=", "[", "soft_thresholding", "(", "torch", ".", "sparse", ".", "mm", "(", "W_jl", ",", "Uk", ")", "-", "Lambda_jl", "/", "self", ".", "mu2", ",", "(", "nu_jl", "/", "self", ".", "mu2", ")", "*", "d", ".", "unsqueeze", "(", "1", ")", ",", "'element'", ")", "\n", "for", "nu_jl", ",", "W_jl", ",", "Lambda_jl", "in", "zip", "(", "self", ".", "nu", ",", "W_list", ",", "Lambda2", ")", "]", "\n", "# Update Ek", "\n", "Ek", "=", "soft_thresholding", "(", "torch", ".", "mm", "(", "L0k", ",", "Uk", ")", "+", "Lambda1", "/", "self", ".", "mu1", ",", "1", "/", "self", ".", "mu1", ",", "'row'", ")", "\n", "# Update Lambda1, Lambda2, Lambda3, Lambda4", "\n", "Lambda1", "=", "Lambda1", "+", "self", ".", "mu1", "*", "(", "Uk", "-", "torch", ".", "mm", "(", "Zk", ",", "Uk", ")", "-", "Ek", ")", "\n", "Lambda2", "=", "[", "Lambda_jl", "+", "self", ".", "mu2", "*", "(", "q_jl", "-", "torch", ".", "sparse", ".", "mm", "(", "W_jl", ",", "Uk", ")", ")", "for", "W_jl", ",", "Lambda_jl", ",", "q_jl", "in", "zip", "(", "W_list", ",", "Lambda2", ",", "Qs", ")", "]", "\n", "Lambda3", "=", "Lambda3", "+", "self", ".", "mu3", "*", "(", "torch", ".", "sum", "(", "Zk", ",", "1", ",", "keepdim", "=", "True", ")", "-", "1", ")", "\n", "Lambda4", "=", "Lambda4", "+", "self", ".", "mu4", "*", "(", "Yk", "-", "Zk", ")", "\n", "# Update mu1, mu3, and mu4", "\n", "self", ".", "mu1", "=", "min", "(", "self", ".", "rho", "*", "self", ".", "mu1", ",", "self", ".", "mu1_max", ")", "\n", "self", ".", "mu2", "=", "min", "(", "self", ".", "rho", "*", "self", ".", "mu2", ",", "self", ".", "mu2_max", ")", "\n", "self", ".", "mu3", "=", "min", "(", "self", ".", "rho", "*", "self", ".", "mu3", ",", "self", ".", "mu3_max", ")", "\n", "self", ".", "mu4", "=", "min", "(", "self", ".", "rho", "*", "self", ".", "mu4", ",", "self", ".", "mu4_max", ")", "\n", "\n", "", "return", "Uk", ",", "Zk", "", "", "", ""]], "home.repos.pwc.inspect_result.bzho3923_gnn_dot.None.denoising_filters.soft_thresholding": [[7, 29], ["torch.linalg.norm().unsqueeze", "torch.linalg.norm().unsqueeze", "torch.linalg.norm().unsqueeze", "torch.linalg.norm().unsqueeze.clamp_", "torch.relu", "torch.relu", "torch.relu", "torch.linalg.norm", "torch.linalg.norm", "torch.linalg.norm"], "function", ["None"], ["def", "soft_thresholding", "(", "x", ",", "soft_eta", ",", "mode", ")", ":", "\n", "    ", "\"\"\"\n    Perform row-wise soft thresholding.\n    The row wise shrinkage is specific on E(k+1) updating\n    The element wise shrinkage is specific on Z(k+1) updating\n\n    :param x: one block of target matrix, shape[num_nodes, num_features]\n    :param soft_eta: threshold scalar stores in a torch tensor\n    :param mode: model types selection \"row\" or \"element\"\n    :return: one block of matrix after shrinkage, shape[num_nodes, num_features]\n\n    \"\"\"", "\n", "assert", "mode", "in", "(", "'element'", ",", "'row'", ")", ",", "'shrinkage type is invalid (element or row)'", "\n", "if", "mode", "==", "'row'", ":", "\n", "        ", "row_norm", "=", "torch", ".", "linalg", ".", "norm", "(", "x", ",", "dim", "=", "1", ")", ".", "unsqueeze", "(", "1", ")", "\n", "row_norm", ".", "clamp_", "(", "1e-12", ")", "\n", "row_thresh", "=", "F", ".", "relu", "(", "row_norm", "-", "soft_eta", ")", "/", "row_norm", "\n", "out", "=", "x", "*", "row_thresh", "\n", "", "else", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "x", "-", "soft_eta", ")", "-", "F", ".", "relu", "(", "-", "x", "-", "soft_eta", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_dot.None.graph_attack.to_undirected_my": [[8, 13], ["torch.stack", "torch.cat", "torch.cat"], "function", ["None"], ["def", "to_undirected_my", "(", "edge_index", ")", ":", "\n", "    ", "row", ",", "col", "=", "edge_index", "\n", "row", ",", "col", "=", "torch", ".", "cat", "(", "[", "row", ",", "col", "]", ",", "dim", "=", "0", ")", ",", "torch", ".", "cat", "(", "[", "col", ",", "row", "]", ",", "dim", "=", "0", ")", "\n", "edge_index", "=", "torch", ".", "stack", "(", "[", "row", ",", "col", "]", ",", "dim", "=", "0", ")", "\n", "return", "edge_index", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_dot.None.graph_attack.edge_attack": [[16, 58], ["torch.zeros", "torch.tril_indices", "torch.zeros.to_sparse().indices", "round", "zip", "sym_m.to_sparse().indices", "torch.zeros.t", "scipy.sparse.coo_matrix", "scipy.sparse.tril", "torch.from_numpy", "torch.from_numpy", "torch.vstack", "round", "numpy.array", "numpy.random.shuffle", "torch.from_numpy().type", "graph_attack.to_undirected_my", "torch.cat", "torch_geometric.utils.sort_edge_index", "torch.zeros.to_sparse", "random.sample", "sym_m.to_sparse", "scipy.sparse.coo_matrix.numpy", "len", "list", "torch.stack", "torch.stack", "torch_geometric.utils.to_dense_adj", "len", "torch.from_numpy", "zip", "len"], "function", ["home.repos.pwc.inspect_result.bzho3923_gnn_dot.None.graph_attack.to_undirected_my"], ["", "def", "edge_attack", "(", "dataset", ",", "ratio", ",", "edgeinx", ")", ":", "\n", "    ", "edge_old", "=", "edgeinx", "\n", "n", "=", "dataset", ".", "num_nodes", "\n", "\n", "m", "=", "torch", ".", "zeros", "(", "(", "n", ",", "n", ")", ")", "\n", "m", "[", "edge_old", "[", "0", "]", ",", "edge_old", "[", "1", "]", "]", "=", "1", "\n", "tril_idx", "=", "torch", ".", "tril_indices", "(", "n", ",", "n", ")", "\n", "\n", "num_nodes", "=", "dataset", ".", "num_nodes", "\n", "edge_index", "=", "edgeinx", "\n", "\n", "if", "ratio", "<", "1", ":", "\n", "# prepare idx of the upper triangular matrix", "\n", "        ", "m", "[", "tril_idx", "[", "0", "]", ",", "tril_idx", "[", "1", "]", "]", "=", "0", "\n", "uptri_idx", "=", "m", ".", "to_sparse", "(", "2", ")", ".", "indices", "(", ")", "\n", "num_edge", "=", "round", "(", "(", "1", "-", "ratio", ")", "*", "len", "(", "edge_old", "[", "0", "]", ")", "/", "2", ")", "\n", "# random sample", "\n", "r", ",", "c", "=", "zip", "(", "*", "random", ".", "sample", "(", "list", "(", "zip", "(", "uptri_idx", "[", "0", "]", ",", "uptri_idx", "[", "1", "]", ")", ")", ",", "num_edge", ")", ")", "\n", "# prepare the new adj matrix (dense)", "\n", "m", "[", "torch", ".", "stack", "(", "r", ")", ",", "torch", ".", "stack", "(", "c", ")", "]", "=", "0", "\n", "sym_m", "=", "m", "+", "m", ".", "t", "(", ")", "\n", "edge", "=", "sym_m", ".", "to_sparse", "(", "2", ")", ".", "indices", "(", ")", "\n", "\n", "", "elif", "ratio", ">=", "1", ":", "\n", "# convert to scipy sparse which is more powerful than torch sparse", "\n", "        ", "new_adj", "=", "1", "-", "to_dense_adj", "(", "edge_index", ",", "max_num_nodes", "=", "num_nodes", ")", "[", "0", "]", "\n", "new_adj", "=", "coo_matrix", "(", "new_adj", ".", "numpy", "(", ")", ")", "\n", "lower_tri", "=", "tril", "(", "new_adj", ",", "k", "=", "-", "1", ")", "\n", "row", "=", "torch", ".", "from_numpy", "(", "lower_tri", ".", "row", ")", "\n", "col", "=", "torch", ".", "from_numpy", "(", "lower_tri", ".", "col", ")", "\n", "new_edge_index", "=", "torch", ".", "vstack", "(", "(", "row", ",", "col", ")", ")", "\n", "num_edge_add", "=", "round", "(", "(", "ratio", "-", "1", ")", "*", "len", "(", "edge_index", "[", "0", "]", ")", "/", "2", ")", "\n", "mask", "=", "np", ".", "array", "(", "[", "0", "]", "*", "len", "(", "row", ")", ")", "\n", "mask", "[", ":", "num_edge_add", "]", "=", "1", "\n", "np", ".", "random", ".", "shuffle", "(", "mask", ")", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", ".", "type", "(", "torch", ".", "bool", ")", "\n", "add_edge", "=", "new_edge_index", "[", ":", ",", "mask", "]", "\n", "add_edge", "=", "to_undirected_my", "(", "add_edge", ")", "\n", "edge_index", "=", "torch", ".", "cat", "(", "(", "edge_index", ",", "add_edge", ")", ",", "dim", "=", "1", ")", "\n", "edge", "=", "sort_edge_index", "(", "edge_index", ",", "num_nodes", "=", "num_nodes", ")", "\n", "\n", "", "return", "edge", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_dot.None.graph_attack.node_attack": [[61, 70], ["mask.int", "torch.normal", "torch.FloatTensor().uniform_", "torch.FloatTensor", "torch.abs"], "function", ["None"], ["", "def", "node_attack", "(", "x", ",", "ratio", ",", "normal", "=", "False", ")", ":", "\n", "    ", "if", "normal", ":", "\n", "        ", "x_new", "=", "x", "+", "torch", ".", "normal", "(", "0", ",", "ratio", ",", "size", "=", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ")", ")", "\n", "", "else", ":", "\n", "        ", "mask", "=", "torch", ".", "FloatTensor", "(", "x", ".", "shape", "[", "0", "]", ",", "x", ".", "shape", "[", "1", "]", ")", ".", "uniform_", "(", ")", "<", "ratio", "\n", "mask", "=", "mask", "\n", "x", "-=", "mask", ".", "int", "(", ")", "\n", "x_new", "=", "(", "torch", ".", "abs", "(", "x", ")", "==", "1", ")", ".", "double", "(", ")", "\n", "", "return", "x_new", "", "", ""]], "home.repos.pwc.inspect_result.bzho3923_gnn_dot.None.utils.scipy_to_torch_sparse": [[6, 15], ["torch.no_grad", "scipy.sparse.coo_matrix", "torch.tensor", "torch.tensor", "torch.stack", "torch.Tensor", "torch.sparse_coo_tensor"], "function", ["None"], ["@", "torch", ".", "no_grad", "(", ")", "\n", "def", "scipy_to_torch_sparse", "(", "A", ")", ":", "\n", "    ", "A", "=", "sparse", ".", "coo_matrix", "(", "A", ")", "\n", "row", "=", "torch", ".", "tensor", "(", "A", ".", "row", ")", "\n", "col", "=", "torch", ".", "tensor", "(", "A", ".", "col", ")", "\n", "index", "=", "torch", ".", "stack", "(", "(", "row", ",", "col", ")", ",", "dim", "=", "0", ")", "\n", "value", "=", "torch", ".", "Tensor", "(", "A", ".", "data", ")", "\n", "\n", "return", "torch", ".", "sparse_coo_tensor", "(", "index", ",", "value", ",", "A", ".", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_dot.None.utils.ChebyshevApprox": [[17, 28], ["numpy.zeros", "range", "numpy.linspace", "Integrand", "numpy.trapz", "numpy.cos", "f", "numpy.cos"], "function", ["None"], ["", "def", "ChebyshevApprox", "(", "f", ",", "n", ")", ":", "# assuming f : [0, pi] -> R", "\n", "    ", "quad_points", "=", "500", "\n", "c", "=", "np", ".", "zeros", "(", "n", ")", "\n", "a", "=", "np", ".", "pi", "/", "2", "\n", "for", "k", "in", "range", "(", "1", ",", "n", "+", "1", ")", ":", "\n", "        ", "Integrand", "=", "lambda", "x", ":", "np", ".", "cos", "(", "(", "k", "-", "1", ")", "*", "x", ")", "*", "f", "(", "a", "*", "(", "np", ".", "cos", "(", "x", ")", "+", "1", ")", ")", "\n", "x", "=", "np", ".", "linspace", "(", "0", ",", "np", ".", "pi", ",", "quad_points", ")", "\n", "y", "=", "Integrand", "(", "x", ")", "\n", "c", "[", "k", "-", "1", "]", "=", "2", "/", "np", ".", "pi", "*", "np", ".", "trapz", "(", "y", ",", "x", ")", "\n", "\n", "", "return", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.bzho3923_gnn_dot.None.utils.get_operator": [[30, 52], ["len", "range", "scipy.sparse.identity", "dict", "range", "utils.ChebyshevApprox", "range", "range"], "function", ["home.repos.pwc.inspect_result.bzho3923_gnn_dot.None.utils.ChebyshevApprox"], ["", "def", "get_operator", "(", "L", ",", "DFilters", ",", "n", ",", "s", ",", "J", ",", "Lev", ")", ":", "\n", "    ", "r", "=", "len", "(", "DFilters", ")", "\n", "c", "=", "[", "None", "]", "*", "r", "\n", "for", "j", "in", "range", "(", "r", ")", ":", "\n", "        ", "c", "[", "j", "]", "=", "ChebyshevApprox", "(", "DFilters", "[", "j", "]", ",", "n", ")", "\n", "", "a", "=", "np", ".", "pi", "/", "2", "# consider the domain of masks as [0, pi]", "\n", "# Fast Tight Frame Decomposition (FTFD)", "\n", "FD1", "=", "sparse", ".", "identity", "(", "L", ".", "shape", "[", "0", "]", ")", "\n", "d", "=", "dict", "(", ")", "\n", "for", "l", "in", "range", "(", "1", ",", "Lev", "+", "1", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "r", ")", ":", "\n", "            ", "T0F", "=", "FD1", "\n", "T1F", "=", "(", "(", "s", "**", "(", "-", "J", "+", "l", "-", "1", ")", "/", "a", ")", "*", "L", ")", "@", "T0F", "-", "T0F", "\n", "d", "[", "j", ",", "l", "-", "1", "]", "=", "(", "1", "/", "2", ")", "*", "c", "[", "j", "]", "[", "0", "]", "*", "T0F", "+", "c", "[", "j", "]", "[", "1", "]", "*", "T1F", "\n", "for", "k", "in", "range", "(", "2", ",", "n", ")", ":", "\n", "                ", "TkF", "=", "(", "(", "2", "/", "a", "*", "s", "**", "(", "-", "J", "+", "l", "-", "1", ")", ")", "*", "L", ")", "@", "T1F", "-", "2", "*", "T1F", "-", "T0F", "\n", "T0F", "=", "T1F", "\n", "T1F", "=", "TkF", "\n", "d", "[", "j", ",", "l", "-", "1", "]", "+=", "c", "[", "j", "]", "[", "k", "]", "*", "TkF", "\n", "", "", "FD1", "=", "d", "[", "0", ",", "l", "-", "1", "]", "\n", "\n", "", "return", "d", "", "", ""]]}