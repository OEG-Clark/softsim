{"home.repos.pwc.inspect_result.beierzhu_xerm.xERM.RIDE.public.t-normalization.pnorm": [[22, 28], ["torch.norm", "weights.clone", "range", "weights.size", "torch.pow"], "function", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size"], ["def", "pnorm", "(", "weights", ",", "p", ")", ":", "\n", "    ", "normB", "=", "torch", ".", "norm", "(", "weights", ",", "2", ",", "1", ")", "\n", "ws", "=", "weights", ".", "clone", "(", ")", "\n", "for", "i", "in", "range", "(", "weights", ".", "size", "(", "0", ")", ")", ":", "\n", "        ", "ws", "[", "i", "]", "=", "ws", "[", "i", "]", "/", "torch", ".", "pow", "(", "normB", "[", "i", "]", ",", "p", ")", "\n", "", "return", "ws", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.RIDE.public.t-normalization.parallel": [[31, 36], ["None"], "function", ["None"], ["def", "parallel", "(", "key", ")", ":", "\n", "    ", "if", "use_parallel", ":", "\n", "        ", "return", "\"module.\"", "+", "key", "\n", "", "else", ":", "\n", "        ", "return", "key", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.RIDE.public.train.main": [[22, 87], ["config.get_logger", "config.init_obj", "config.init_obj", "config.get_logger.info", "getattr", "config.init_obj", "trainer.Trainer", "getattr", "hasattr", "config.init_obj", "config.init_obj", "getattr", "config.init_obj.parameters", "trainer.Trainer.check_ensemble", "trainer.Trainer.train", "print", "torch.optim.lr_scheduler.LambdaLR", "config.init_obj", "float"], "function", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.RIDE.public.parse_config.ConfigParser.get_logger", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.RIDE.public.parse_config.ConfigParser.init_obj", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.RIDE.public.parse_config.ConfigParser.init_obj", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.RIDE.public.parse_config.ConfigParser.init_obj", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.RIDE.public.parse_config.ConfigParser.init_obj", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.RIDE.public.parse_config.ConfigParser.init_obj", "home.repos.pwc.inspect_result.beierzhu_xerm.trainer.trainer.Trainer.check_ensemble", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.train", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.RIDE.public.parse_config.ConfigParser.init_obj"], ["", "def", "main", "(", "config", ")", ":", "\n", "    ", "logger", "=", "config", ".", "get_logger", "(", "'train'", ")", "\n", "\n", "# setup data_loader instances", "\n", "data_loader", "=", "config", ".", "init_obj", "(", "'data_loader'", ",", "module_data", ")", "\n", "# valid_data_loader = data_loader.split_validation()", "\n", "valid_data_loader", "=", "getattr", "(", "module_data", ",", "config", "[", "'data_loader'", "]", "[", "'type'", "]", ")", "(", "\n", "config", "[", "'data_loader'", "]", "[", "'args'", "]", "[", "'data_dir'", "]", ",", "\n", "batch_size", "=", "128", ",", "\n", "shuffle", "=", "False", ",", "\n", "training", "=", "False", ",", "\n", "num_workers", "=", "2", "\n", ")", "\n", "# build model architecture, then print to console", "\n", "model", "=", "config", ".", "init_obj", "(", "'arch'", ",", "module_arch", ")", "\n", "logger", ".", "info", "(", "model", ")", "\n", "\n", "# get function handles of loss and metrics", "\n", "loss_class", "=", "getattr", "(", "module_loss", ",", "config", "[", "\"loss\"", "]", "[", "\"type\"", "]", ")", "\n", "if", "hasattr", "(", "loss_class", ",", "\"require_num_experts\"", ")", "and", "loss_class", ".", "require_num_experts", ":", "\n", "        ", "criterion", "=", "config", ".", "init_obj", "(", "'loss'", ",", "module_loss", ",", "cls_num_list", "=", "data_loader", ".", "cls_num_list", ",", "num_experts", "=", "config", "[", "\"arch\"", "]", "[", "\"args\"", "]", "[", "\"num_experts\"", "]", ")", "\n", "", "else", ":", "\n", "        ", "criterion", "=", "config", ".", "init_obj", "(", "'loss'", ",", "module_loss", ",", "cls_num_list", "=", "data_loader", ".", "cls_num_list", ")", "\n", "", "metrics", "=", "[", "getattr", "(", "module_metric", ",", "met", ")", "for", "met", "in", "config", "[", "'metrics'", "]", "]", "\n", "\n", "# build optimizer, learning rate scheduler. delete every lines containing lr_scheduler for disabling scheduler", "\n", "optimizer", "=", "config", ".", "init_obj", "(", "'optimizer'", ",", "torch", ".", "optim", ",", "model", ".", "parameters", "(", ")", ")", "\n", "\n", "if", "\"type\"", "in", "config", ".", "_config", "[", "\"lr_scheduler\"", "]", ":", "\n", "        ", "if", "config", "[", "\"lr_scheduler\"", "]", "[", "\"type\"", "]", "==", "\"CustomLR\"", ":", "\n", "            ", "lr_scheduler_args", "=", "config", "[", "\"lr_scheduler\"", "]", "[", "\"args\"", "]", "\n", "gamma", "=", "lr_scheduler_args", "[", "\"gamma\"", "]", "if", "\"gamma\"", "in", "lr_scheduler_args", "else", "0.1", "\n", "print", "(", "\"Scheduler step1, step2, warmup_epoch, gamma:\"", ",", "(", "lr_scheduler_args", "[", "\"step1\"", "]", ",", "lr_scheduler_args", "[", "\"step2\"", "]", ",", "lr_scheduler_args", "[", "\"warmup_epoch\"", "]", ",", "gamma", ")", ")", "\n", "def", "lr_lambda", "(", "epoch", ")", ":", "\n", "                ", "if", "epoch", ">=", "lr_scheduler_args", "[", "\"step2\"", "]", ":", "\n", "                    ", "lr", "=", "gamma", "*", "gamma", "\n", "", "elif", "epoch", ">=", "lr_scheduler_args", "[", "\"step1\"", "]", ":", "\n", "                    ", "lr", "=", "gamma", "\n", "", "else", ":", "\n", "                    ", "lr", "=", "1", "\n", "\n", "", "\"\"\"Warmup\"\"\"", "\n", "warmup_epoch", "=", "lr_scheduler_args", "[", "\"warmup_epoch\"", "]", "\n", "if", "epoch", "<", "warmup_epoch", ":", "\n", "                    ", "lr", "=", "lr", "*", "float", "(", "1", "+", "epoch", ")", "/", "warmup_epoch", "\n", "", "return", "lr", "\n", "", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "LambdaLR", "(", "optimizer", ",", "lr_lambda", ")", "\n", "", "else", ":", "\n", "            ", "lr_scheduler", "=", "config", ".", "init_obj", "(", "'lr_scheduler'", ",", "torch", ".", "optim", ".", "lr_scheduler", ",", "optimizer", ")", "\n", "", "", "else", ":", "\n", "        ", "lr_scheduler", "=", "None", "\n", "\n", "# print(data_loader.prior)", "\n", "# print(valid_data_loader.prior)", "\n", "\n", "", "trainer", "=", "Trainer", "(", "model", ",", "criterion", ",", "metrics", ",", "optimizer", ",", "\n", "config", "=", "config", ",", "\n", "data_loader", "=", "data_loader", ",", "\n", "valid_data_loader", "=", "valid_data_loader", ",", "\n", "lr_scheduler", "=", "lr_scheduler", ")", "\n", "\n", "if", "'eval_ensemble'", "in", "config", ".", "_config", "and", "config", ".", "_config", "[", "'eval_ensemble'", "]", ":", "\n", "        ", "trainer", ".", "check_ensemble", "(", ")", "\n", "", "else", ":", "\n", "        ", "trainer", ".", "train", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.RIDE.public.test.main": [[12, 169], ["config.get_logger", "config.init_obj", "config.init_obj", "config.get_logger.info", "config.get_logger.info", "torch.load", "torch.nn.DataParallel.load_state_dict", "torch.device", "torch.nn.DataParallel.to", "torch.nn.DataParallel.eval", "torch.zeros", "torch.zeros().cuda", "torch.empty().cuda", "torch.empty().cuda", "test.shot_acc", "print", "test.shot_precision", "print", "acc_per_class.cpu().numpy", "print", "print", "len", "log.update", "config.get_logger.info", "getattr", "config.init_obj", "config.init_obj", "getattr", "torch.nn.DataParallel", "len", "hasattr", "torch.zeros", "numpy.array", "numpy.array", "torch.no_grad", "enumerate", "print", "print", "torch.zeros().cuda.diag", "torch.zeros().cuda.sum", "acc_per_class.mean().item", "numpy.all", "acc[].mean", "acc[].mean", "acc[].mean", "print", "log.update", "torch.cuda.is_available", "torch.zeros", "torch.zeros", "getattr", "torch.empty", "torch.empty", "tqdm.tqdm", "torch.max", "torch.cat", "torch.cat", "enumerate", "zip", "acc_per_class.cpu", "range", "data.to", "target.to", "torch.nn.DataParallel.", "torch.unique", "count.type", "data.size", "torch.tensor", "torch.tensor", "torch.tensor", "enumerate", "torch.nn.DataParallel.", "target.view", "model.argmax().view", "model.argmax().view", "model.argmax().view", "acc_per_class.mean", "numpy.round", "numpy.round", "numpy.round", "total_metrics[].item", "enumerate", "many_shot.sum", "medium_shot.sum", "few_shot.sum", "torch.unique", "count.float", "torch.log().cuda", "metric", "model.argmax", "model.argmax", "model.argmax", "torch.log().cuda", "torch.log", "t.long", "p.long", "torch.log", "cumulative_sample_num_experts_each_shot[].sum", "cumulative_sample_num_experts_each_shot[].sum", "cumulative_sample_num_experts_each_shot[].sum"], "function", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.RIDE.public.parse_config.ConfigParser.get_logger", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.RIDE.public.parse_config.ConfigParser.init_obj", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.RIDE.public.parse_config.ConfigParser.init_obj", "home.repos.pwc.inspect_result.beierzhu_xerm.utils.util.load_state_dict", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.eval", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.shot_acc", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.shot_precision", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.RIDE.public.parse_config.ConfigParser.init_obj", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.RIDE.public.parse_config.ConfigParser.init_obj", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size"], ["def", "main", "(", "config", ")", ":", "\n", "    ", "logger", "=", "config", ".", "get_logger", "(", "'test'", ")", "\n", "\n", "# setup data_loader instances", "\n", "train_loader", "=", "config", ".", "init_obj", "(", "'data_loader'", ",", "module_data", ")", "\n", "# setup data_loader instances", "\n", "data_loader", "=", "getattr", "(", "module_data", ",", "config", "[", "'data_loader'", "]", "[", "'type'", "]", ")", "(", "\n", "config", "[", "'data_loader'", "]", "[", "'args'", "]", "[", "'data_dir'", "]", ",", "\n", "batch_size", "=", "128", ",", "\n", "shuffle", "=", "False", ",", "\n", "training", "=", "False", ",", "\n", "num_workers", "=", "2", "\n", ")", "\n", "train_loader", "=", "config", ".", "init_obj", "(", "'data_loader'", ",", "module_data", ")", "\n", "\n", "# build model architecture", "\n", "if", "'returns_feat'", "in", "config", "[", "'arch'", "]", "[", "'args'", "]", ":", "\n", "        ", "model", "=", "config", ".", "init_obj", "(", "'arch'", ",", "module_arch", ",", "allow_override", "=", "True", ",", "returns_feat", "=", "False", ")", "\n", "", "else", ":", "\n", "        ", "model", "=", "config", ".", "init_obj", "(", "'arch'", ",", "module_arch", ")", "\n", "", "logger", ".", "info", "(", "model", ")", "\n", "\n", "# get function handles of loss and metrics", "\n", "# loss_fn = config.init_obj('loss', module_loss)", "\n", "metric_fns", "=", "[", "getattr", "(", "module_metric", ",", "met", ")", "for", "met", "in", "config", "[", "'metrics'", "]", "]", "\n", "\n", "logger", ".", "info", "(", "'Loading checkpoint: {} ...'", ".", "format", "(", "config", ".", "resume", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "config", ".", "resume", ")", "\n", "state_dict", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "if", "config", "[", "'n_gpu'", "]", ">", "1", ":", "\n", "        ", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "model", ")", "\n", "", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "\n", "# prepare model for testing", "\n", "device", "=", "torch", ".", "device", "(", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", ")", "\n", "model", "=", "model", ".", "to", "(", "device", ")", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "total_loss", "=", "0.0", "\n", "total_metrics", "=", "torch", ".", "zeros", "(", "len", "(", "metric_fns", ")", ")", "\n", "\n", "num_classes", "=", "config", ".", "_config", "[", "\"arch\"", "]", "[", "\"args\"", "]", "[", "\"num_classes\"", "]", "\n", "confusion_matrix", "=", "torch", ".", "zeros", "(", "num_classes", ",", "num_classes", ")", ".", "cuda", "(", ")", "\n", "\n", "if", "hasattr", "(", "model", ",", "\"confidence_model\"", ")", "and", "model", ".", "confidence_model", ":", "\n", "        ", "cumulative_sample_num_experts", "=", "torch", ".", "zeros", "(", "(", "model", ".", "backbone", ".", "num_experts", ",", ")", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ")", "\n", "cumulative_sample_num_experts_each_shot", "=", "[", "torch", ".", "zeros", "(", "(", "model", ".", "backbone", ".", "num_experts", ",", ")", ",", "dtype", "=", "torch", ".", "float", ",", "device", "=", "device", ")", "for", "_", "in", "range", "(", "3", ")", "]", "\n", "num_samples", "=", "0", "\n", "confidence_model", "=", "True", "\n", "", "else", ":", "\n", "        ", "cumulative_sample_num_experts", "=", "None", "\n", "cumulative_sample_num_experts_each_shot", "=", "None", "\n", "confidence_model", "=", "False", "\n", "\n", "", "get_class_acc", "=", "True", "\n", "if", "get_class_acc", ":", "\n", "        ", "train_data_loader", "=", "getattr", "(", "module_data", ",", "config", "[", "'data_loader'", "]", "[", "'type'", "]", ")", "(", "\n", "config", "[", "'data_loader'", "]", "[", "'args'", "]", "[", "'data_dir'", "]", ",", "\n", "batch_size", "=", "256", ",", "\n", "training", "=", "True", "\n", ")", "\n", "test_cls_num_list", "=", "np", ".", "array", "(", "data_loader", ".", "cls_num_list", ")", "\n", "train_cls_num_list", "=", "np", ".", "array", "(", "train_data_loader", ".", "cls_num_list", ")", "\n", "many_shot", "=", "train_cls_num_list", ">", "100", "\n", "medium_shot", "=", "(", "train_cls_num_list", "<=", "100", ")", "&", "(", "train_cls_num_list", ">=", "20", ")", "\n", "few_shot", "=", "train_cls_num_list", "<", "20", "\n", "\n", "", "total_preds", "=", "torch", ".", "empty", "(", "0", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "total_labels", "=", "torch", ".", "empty", "(", "0", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "i", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "tqdm", "(", "data_loader", ")", ")", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "\n", "if", "confidence_model", ":", "\n", "                ", "output", ",", "sample_num_experts", "=", "model", "(", "data", ")", "\n", "num", ",", "count", "=", "torch", ".", "unique", "(", "sample_num_experts", ",", "return_counts", "=", "True", ")", "\n", "cumulative_sample_num_experts", "[", "num", "-", "1", "]", "+=", "count", ".", "type", "(", "torch", ".", "float", ")", "\n", "num_samples", "+=", "data", ".", "size", "(", "0", ")", "\n", "\n", "many_shot_tensor", "=", "torch", ".", "tensor", "(", "many_shot", ",", "device", "=", "device", ")", "\n", "medium_shot_tensor", "=", "torch", ".", "tensor", "(", "medium_shot", ",", "device", "=", "device", ")", "\n", "few_shot_tensor", "=", "torch", ".", "tensor", "(", "few_shot", ",", "device", "=", "device", ")", "\n", "\n", "for", "i", ",", "mask_shot", "in", "enumerate", "(", "[", "many_shot_tensor", ",", "medium_shot_tensor", ",", "few_shot_tensor", "]", ")", ":", "\n", "                    ", "num", ",", "count", "=", "torch", ".", "unique", "(", "sample_num_experts", "[", "mask_shot", "[", "target", "]", "]", ",", "return_counts", "=", "True", ")", "\n", "(", "cumulative_sample_num_experts_each_shot", "[", "i", "]", ")", "[", "num", "-", "1", "]", "+=", "count", ".", "float", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "output", "=", "model", "(", "data", ")", "\n", "\n", "", "if", "config", "[", "'PC_eval'", "]", ":", "\n", "                ", "output", "=", "output", "-", "2", "*", "torch", ".", "log", "(", "train_loader", ".", "prior", ")", ".", "cuda", "(", ")", "+", "torch", ".", "log", "(", "data_loader", ".", "prior", ")", ".", "cuda", "(", ")", "\n", "\n", "#", "\n", "# save sample images, or do something with output here", "\n", "#", "\n", "\n", "# computing loss, metrics on test set", "\n", "\n", "# loss = loss_fn(output, target)", "\n", "", "batch_size", "=", "data", ".", "shape", "[", "0", "]", "\n", "# total_loss += loss.item() * batch_size", "\n", "\n", "_", ",", "preds", "=", "torch", ".", "max", "(", "output", ",", "1", ")", "\n", "total_preds", "=", "torch", ".", "cat", "(", "(", "total_preds", ",", "preds", ")", ")", "\n", "total_labels", "=", "torch", ".", "cat", "(", "(", "total_labels", ",", "target", ")", ")", "\n", "for", "i", ",", "metric", "in", "enumerate", "(", "metric_fns", ")", ":", "\n", "                ", "total_metrics", "[", "i", "]", "+=", "metric", "(", "output", ",", "target", ")", "*", "batch_size", "\n", "\n", "", "for", "t", ",", "p", "in", "zip", "(", "target", ".", "view", "(", "-", "1", ")", ",", "output", ".", "argmax", "(", "dim", "=", "1", ")", ".", "view", "(", "-", "1", ")", ")", ":", "\n", "                ", "confusion_matrix", "[", "t", ".", "long", "(", ")", ",", "p", ".", "long", "(", ")", "]", "+=", "1", "\n", "\n", "", "", "", "cls_accs", "=", "shot_acc", "(", "total_preds", ",", "total_labels", ",", "train_loader", ",", "acc_per_cls", "=", "False", ")", "\n", "print", "(", "cls_accs", ")", "\n", "cls_accs", "=", "shot_precision", "(", "total_preds", ",", "total_labels", ",", "train_loader", ",", "acc_per_cls", "=", "False", ")", "\n", "print", "(", "cls_accs", ")", "\n", "\n", "if", "confidence_model", ":", "\n", "        ", "print", "(", "\"Samples with num_experts:\"", ",", "*", "[", "(", "'%.2f'", "%", "item", ")", "for", "item", "in", "(", "cumulative_sample_num_experts", "*", "100", "/", "num_samples", ")", ".", "tolist", "(", ")", "]", ")", "\n", "print", "(", "{", "\"many_hp_num\"", ":", "(", "cumulative_sample_num_experts_each_shot", "[", "0", "]", "/", "cumulative_sample_num_experts_each_shot", "[", "0", "]", ".", "sum", "(", ")", ")", ".", "cpu", "(", ")", ".", "tolist", "(", ")", ",", "\n", "\"medium_hp_num\"", ":", "(", "cumulative_sample_num_experts_each_shot", "[", "1", "]", "/", "cumulative_sample_num_experts_each_shot", "[", "1", "]", ".", "sum", "(", ")", ")", ".", "cpu", "(", ")", ".", "tolist", "(", ")", ",", "\n", "\"few_hp_num\"", ":", "(", "cumulative_sample_num_experts_each_shot", "[", "2", "]", "/", "cumulative_sample_num_experts_each_shot", "[", "2", "]", ".", "sum", "(", ")", ")", ".", "cpu", "(", ")", ".", "tolist", "(", ")", "}", ")", "\n", "\n", "", "acc_per_class", "=", "confusion_matrix", ".", "diag", "(", ")", "/", "confusion_matrix", ".", "sum", "(", "1", ")", "\n", "\n", "acc", "=", "acc_per_class", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "print", "(", "'Acc for each class: \\n'", ",", "acc", ")", "\n", "\n", "print", "(", "'Acc with class mean:'", ",", "acc_per_class", ".", "mean", "(", ")", ".", "item", "(", ")", ")", "\n", "\n", "# np.save(\"test_acc.npy\", acc)", "\n", "\n", "if", "get_class_acc", ":", "\n", "# Here we assume each class has same number of instances", "\n", "        ", "assert", "np", ".", "all", "(", "test_cls_num_list", "==", "test_cls_num_list", "[", "0", "]", ")", "\n", "\n", "many_shot_acc", "=", "acc", "[", "many_shot", "]", ".", "mean", "(", ")", "\n", "medium_shot_acc", "=", "acc", "[", "medium_shot", "]", ".", "mean", "(", ")", "\n", "few_shot_acc", "=", "acc", "[", "few_shot", "]", ".", "mean", "(", ")", "\n", "print", "(", "\"{}, {}, {}\"", ".", "format", "(", "np", ".", "round", "(", "many_shot_acc", "*", "100", ",", "decimals", "=", "2", ")", ",", "np", ".", "round", "(", "medium_shot_acc", "*", "100", ",", "decimals", "=", "2", ")", ",", "np", ".", "round", "(", "few_shot_acc", "*", "100", ",", "decimals", "=", "2", ")", ")", ")", "\n", "\n", "", "n_samples", "=", "len", "(", "data_loader", ".", "sampler", ")", "\n", "log", "=", "{", "'loss'", ":", "total_loss", "/", "n_samples", "}", "\n", "log", ".", "update", "(", "{", "\n", "met", ".", "__name__", ":", "total_metrics", "[", "i", "]", ".", "item", "(", ")", "/", "n_samples", "for", "i", ",", "met", "in", "enumerate", "(", "metric_fns", ")", "\n", "}", ")", "\n", "\n", "if", "get_class_acc", ":", "\n", "        ", "log", ".", "update", "(", "{", "\n", "\"many_class_num\"", ":", "many_shot", ".", "sum", "(", ")", ",", "\n", "\"medium_class_num\"", ":", "medium_shot", ".", "sum", "(", ")", ",", "\n", "\"few_class_num\"", ":", "few_shot", ".", "sum", "(", ")", ",", "\n", "\"many_shot_acc\"", ":", "many_shot_acc", ",", "\n", "\"medium_shot_acc\"", ":", "medium_shot_acc", ",", "\n", "\"few_shot_acc\"", ":", "few_shot_acc", ",", "\n", "}", ")", "\n", "", "logger", ".", "info", "(", "log", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.RIDE.public.test.shot_acc": [[170, 217], ["isinstance", "isinstance", "numpy.unique", "range", "numpy.array().astype", "numpy.array().astype", "preds.detach().cpu().numpy.detach().cpu().numpy", "labels.detach().cpu().numpy.detach().cpu().numpy", "isinstance", "train_class_count.append", "test_class_count.append", "class_correct.append", "len", "len", "many_shot.append", "len", "median_shot.append", "len", "low_shot.append", "len", "TypeError", "len", "len", "many_shot.append", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.array", "numpy.array", "preds.detach().cpu().numpy.detach().cpu", "labels.detach().cpu().numpy.detach().cpu", "low_shot.append", "median_shot.append", "zip", "type", "preds.detach().cpu().numpy.detach", "labels.detach().cpu().numpy.detach"], "function", ["None"], ["", "def", "shot_acc", "(", "preds", ",", "labels", ",", "train_data", ",", "many_shot_thr", "=", "100", ",", "low_shot_thr", "=", "20", ",", "acc_per_cls", "=", "False", ")", ":", "\n", "\n", "    ", "if", "isinstance", "(", "train_data", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "training_labels", "=", "np", ".", "array", "(", "train_data", ")", ".", "astype", "(", "int", ")", "\n", "", "else", ":", "\n", "        ", "training_labels", "=", "np", ".", "array", "(", "train_data", ".", "dataset", ".", "targets", ")", ".", "astype", "(", "int", ")", "\n", "\n", "", "if", "isinstance", "(", "preds", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "preds", "=", "preds", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "labels", "=", "labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "elif", "isinstance", "(", "preds", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "'Type ({}) of preds not supported'", ".", "format", "(", "type", "(", "preds", ")", ")", ")", "\n", "", "train_class_count", "=", "[", "]", "\n", "test_class_count", "=", "[", "]", "\n", "class_correct", "=", "[", "]", "\n", "for", "l", "in", "np", ".", "unique", "(", "labels", ")", ":", "\n", "        ", "train_class_count", ".", "append", "(", "len", "(", "training_labels", "[", "training_labels", "==", "l", "]", ")", ")", "\n", "test_class_count", ".", "append", "(", "len", "(", "labels", "[", "labels", "==", "l", "]", ")", ")", "\n", "class_correct", ".", "append", "(", "(", "preds", "[", "labels", "==", "l", "]", "==", "labels", "[", "labels", "==", "l", "]", ")", ".", "sum", "(", ")", ")", "\n", "\n", "", "many_shot", "=", "[", "]", "\n", "median_shot", "=", "[", "]", "\n", "low_shot", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "train_class_count", ")", ")", ":", "\n", "        ", "if", "train_class_count", "[", "i", "]", ">", "many_shot_thr", ":", "\n", "            ", "many_shot", ".", "append", "(", "(", "class_correct", "[", "i", "]", "/", "test_class_count", "[", "i", "]", ")", ")", "\n", "", "elif", "train_class_count", "[", "i", "]", "<", "low_shot_thr", ":", "\n", "            ", "low_shot", ".", "append", "(", "(", "class_correct", "[", "i", "]", "/", "test_class_count", "[", "i", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "median_shot", ".", "append", "(", "(", "class_correct", "[", "i", "]", "/", "test_class_count", "[", "i", "]", ")", ")", "\n", "\n", "", "", "if", "len", "(", "many_shot", ")", "==", "0", ":", "\n", "        ", "many_shot", ".", "append", "(", "0", ")", "\n", "", "if", "len", "(", "median_shot", ")", "==", "0", ":", "\n", "        ", "median_shot", ".", "append", "(", "0", ")", "\n", "", "if", "len", "(", "low_shot", ")", "==", "0", ":", "\n", "        ", "low_shot", ".", "append", "(", "0", ")", "\n", "\n", "", "overall_acc", "=", "(", "preds", "==", "labels", ")", ".", "sum", "(", ")", "/", "len", "(", "preds", ")", "\n", "\n", "if", "acc_per_cls", ":", "\n", "        ", "class_accs", "=", "[", "c", "/", "cnt", "for", "c", ",", "cnt", "in", "zip", "(", "class_correct", ",", "test_class_count", ")", "]", "\n", "return", "overall_acc", ",", "np", ".", "mean", "(", "many_shot", ")", ",", "np", ".", "mean", "(", "median_shot", ")", ",", "np", ".", "mean", "(", "low_shot", ")", ",", "class_accs", "\n", "", "else", ":", "\n", "        ", "return", "overall_acc", ",", "np", ".", "mean", "(", "many_shot", ")", ",", "np", ".", "mean", "(", "median_shot", ")", ",", "np", ".", "mean", "(", "low_shot", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.RIDE.public.test.shot_precision": [[218, 267], ["isinstance", "isinstance", "numpy.unique", "range", "numpy.array().astype", "numpy.array().astype", "preds.detach().cpu().numpy.detach().cpu().numpy", "labels.detach().cpu().numpy.detach().cpu().numpy", "isinstance", "train_class_count.append", "test_class_count.append", "class_correct.append", "len", "len", "many_shot.append", "len", "median_shot.append", "len", "low_shot.append", "TypeError", "len", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.array", "numpy.array", "preds.detach().cpu().numpy.detach().cpu", "labels.detach().cpu().numpy.detach().cpu", "many_shot.append", "zip", "type", "low_shot.append", "median_shot.append", "preds.detach().cpu().numpy.detach", "labels.detach().cpu().numpy.detach"], "function", ["None"], ["", "", "def", "shot_precision", "(", "preds", ",", "labels", ",", "train_data", ",", "many_shot_thr", "=", "100", ",", "low_shot_thr", "=", "20", ",", "acc_per_cls", "=", "False", ")", ":", "\n", "\n", "    ", "if", "isinstance", "(", "train_data", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "training_labels", "=", "np", ".", "array", "(", "train_data", ")", ".", "astype", "(", "int", ")", "\n", "", "else", ":", "\n", "        ", "training_labels", "=", "np", ".", "array", "(", "train_data", ".", "dataset", ".", "targets", ")", ".", "astype", "(", "int", ")", "\n", "\n", "", "if", "isinstance", "(", "preds", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "preds", "=", "preds", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "labels", "=", "labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "elif", "isinstance", "(", "preds", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "'Type ({}) of preds not supported'", ".", "format", "(", "type", "(", "preds", ")", ")", ")", "\n", "", "train_class_count", "=", "[", "]", "\n", "test_class_count", "=", "[", "]", "\n", "class_correct", "=", "[", "]", "\n", "for", "l", "in", "np", ".", "unique", "(", "labels", ")", ":", "\n", "        ", "train_class_count", ".", "append", "(", "len", "(", "training_labels", "[", "training_labels", "==", "l", "]", ")", ")", "\n", "num_pred", "=", "(", "preds", "==", "l", ")", ".", "sum", "(", ")", "\n", "test_class_count", ".", "append", "(", "num_pred", ")", "\n", "class_correct", ".", "append", "(", "(", "preds", "[", "labels", "==", "l", "]", "==", "labels", "[", "labels", "==", "l", "]", ")", ".", "sum", "(", ")", ")", "\n", "\n", "", "many_shot", "=", "[", "]", "\n", "median_shot", "=", "[", "]", "\n", "low_shot", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "train_class_count", ")", ")", ":", "\n", "        ", "if", "train_class_count", "[", "i", "]", ">", "many_shot_thr", ":", "\n", "            ", "if", "test_class_count", "[", "i", "]", "!=", "0", ":", "\n", "                ", "many_shot", ".", "append", "(", "(", "class_correct", "[", "i", "]", "/", "test_class_count", "[", "i", "]", ")", ")", "\n", "", "", "elif", "train_class_count", "[", "i", "]", "<", "low_shot_thr", ":", "\n", "            ", "if", "test_class_count", "[", "i", "]", "!=", "0", ":", "\n", "                ", "low_shot", ".", "append", "(", "(", "class_correct", "[", "i", "]", "/", "test_class_count", "[", "i", "]", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "test_class_count", "[", "i", "]", "!=", "0", ":", "\n", "                ", "median_shot", ".", "append", "(", "(", "class_correct", "[", "i", "]", "/", "test_class_count", "[", "i", "]", ")", ")", "\n", "\n", "", "", "", "if", "len", "(", "many_shot", ")", "==", "0", ":", "\n", "        ", "many_shot", ".", "append", "(", "0", ")", "\n", "", "if", "len", "(", "median_shot", ")", "==", "0", ":", "\n", "        ", "median_shot", ".", "append", "(", "0", ")", "\n", "", "if", "len", "(", "low_shot", ")", "==", "0", ":", "\n", "        ", "low_shot", ".", "append", "(", "0", ")", "\n", "\n", "", "if", "acc_per_cls", ":", "\n", "        ", "class_accs", "=", "[", "c", "/", "cnt", "for", "c", ",", "cnt", "in", "zip", "(", "class_correct", ",", "test_class_count", ")", "]", "\n", "return", "np", ".", "mean", "(", "many_shot", ")", ",", "np", ".", "mean", "(", "median_shot", ")", ",", "np", ".", "mean", "(", "low_shot", ")", ",", "class_accs", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "mean", "(", "many_shot", ")", ",", "np", ".", "mean", "(", "median_shot", ")", ",", "np", ".", "mean", "(", "low_shot", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.RIDE.public.parse_config.ConfigParser.__init__": [[12, 50], ["parse_config._update_config", "pathlib.Path", "parse_config.ConfigParser.save_dir.mkdir", "parse_config.ConfigParser.log_dir.mkdir", "utils.write_json", "logger.setup_logging", "datetime.datetime.datetime.now().strftime", "datetime.datetime.datetime.now"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.RIDE.public.parse_config._update_config", "home.repos.pwc.inspect_result.beierzhu_xerm.utils.util.write_json", "home.repos.pwc.inspect_result.beierzhu_xerm.logger.logger.setup_logging"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "resume", "=", "None", ",", "modification", "=", "None", ",", "load_crt", "=", "None", ",", "run_id", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        class to parse configuration json file. Handles hyperparameters for training, initializations of modules, checkpoint saving\n        and logging module.\n        :param config: Dict containing configurations, hyperparameters for training. contents of `config.json` file for example.\n        :param resume: String, path to the checkpoint being loaded.\n        :param modification: Dict keychain:value, specifying position values to be replaced from config dict.\n        :param run_id: Unique Identifier for training processes. Used to save checkpoints and training log. Timestamp is being used as default\n        \"\"\"", "\n", "# load config file and apply modification", "\n", "self", ".", "_config", "=", "_update_config", "(", "config", ",", "modification", ")", "\n", "self", ".", "resume", "=", "resume", "\n", "\n", "self", ".", "load_crt", "=", "load_crt", "\n", "\n", "# set save_dir where trained model and log will be saved.", "\n", "save_dir", "=", "Path", "(", "self", ".", "config", "[", "'trainer'", "]", "[", "'save_dir'", "]", ")", "\n", "\n", "exper_name", "=", "self", ".", "config", "[", "'name'", "]", "\n", "if", "run_id", "is", "None", ":", "# use timestamp as default run-id", "\n", "            ", "run_id", "=", "datetime", ".", "now", "(", ")", ".", "strftime", "(", "r'%m%d_%H%M%S'", ")", "\n", "", "self", ".", "_save_dir", "=", "save_dir", "/", "'models'", "/", "exper_name", "/", "run_id", "\n", "self", ".", "_log_dir", "=", "save_dir", "/", "'log'", "/", "exper_name", "/", "run_id", "\n", "\n", "# make directory for saving checkpoints and log.", "\n", "exist_ok", "=", "run_id", "==", "''", "\n", "self", ".", "save_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "exist_ok", ")", "\n", "self", ".", "log_dir", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "exist_ok", ")", "\n", "\n", "# save updated config file to the checkpoint dir", "\n", "write_json", "(", "self", ".", "config", ",", "self", ".", "save_dir", "/", "'config.json'", ")", "\n", "\n", "# configure logging module", "\n", "setup_logging", "(", "self", ".", "log_dir", ")", "\n", "self", ".", "log_levels", "=", "{", "\n", "0", ":", "logging", ".", "WARNING", ",", "\n", "1", ":", "logging", ".", "INFO", ",", "\n", "2", ":", "logging", ".", "DEBUG", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.RIDE.public.parse_config.ConfigParser.from_args": [[52, 87], ["hasattr", "utils.read_json", "cls", "args.parse_args.parse_args.add_argument", "isinstance", "args.parse_args.parse_args.parse_args", "pathlib.Path", "pathlib.Path", "utils.read_json.update", "getattr", "utils.read_json", "parse_config._get_opt_name"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.utils.util.read_json", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.utils.util.read_json", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.RIDE.public.parse_config._get_opt_name"], ["", "@", "classmethod", "\n", "def", "from_args", "(", "cls", ",", "args", ",", "options", "=", "''", ")", ":", "\n", "        ", "\"\"\"\n        Initialize this class from some cli arguments. Used in train, test.\n        \"\"\"", "\n", "for", "opt", "in", "options", ":", "\n", "            ", "args", ".", "add_argument", "(", "*", "opt", ".", "flags", ",", "default", "=", "None", ",", "type", "=", "opt", ".", "type", ")", "\n", "", "if", "not", "isinstance", "(", "args", ",", "tuple", ")", ":", "\n", "            ", "args", "=", "args", ".", "parse_args", "(", ")", "\n", "\n", "", "if", "args", ".", "device", "is", "not", "None", ":", "\n", "            ", "os", ".", "environ", "[", "\"CUDA_VISIBLE_DEVICES\"", "]", "=", "args", ".", "device", "\n", "\n", "", "if", "hasattr", "(", "args", ",", "\"load_crt\"", ")", ":", "\n", "            ", "load_crt", "=", "args", ".", "load_crt", "\n", "", "else", ":", "\n", "            ", "load_crt", "=", "None", "\n", "\n", "", "if", "args", ".", "resume", "is", "not", "None", ":", "\n", "            ", "resume", "=", "Path", "(", "args", ".", "resume", ")", "\n", "cfg_fname", "=", "resume", ".", "parent", "/", "'config.json'", "\n", "", "else", ":", "\n", "            ", "msg_no_cfg", "=", "\"Configuration file need to be specified. Add '-c config.json', for example.\"", "\n", "assert", "args", ".", "config", "is", "not", "None", ",", "msg_no_cfg", "\n", "resume", "=", "None", "\n", "cfg_fname", "=", "Path", "(", "args", ".", "config", ")", "\n", "\n", "", "config", "=", "read_json", "(", "cfg_fname", ")", "\n", "if", "args", ".", "config", "and", "resume", ":", "\n", "# update new config for fine-tuning", "\n", "            ", "config", ".", "update", "(", "read_json", "(", "args", ".", "config", ")", ")", "\n", "\n", "# parse custom cli options into dictionary", "\n", "", "modification", "=", "{", "opt", ".", "target", ":", "getattr", "(", "args", ",", "_get_opt_name", "(", "opt", ".", "flags", ")", ")", "for", "opt", "in", "options", "}", "\n", "return", "cls", "(", "config", ",", "resume", ",", "modification", ",", "load_crt", "=", "load_crt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.RIDE.public.parse_config.ConfigParser.init_obj": [[88, 103], ["module_args.update", "dict", "dict", "all", "getattr"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update"], ["", "def", "init_obj", "(", "self", ",", "name", ",", "module", ",", "*", "args", ",", "allow_override", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Finds a function handle with the name given as 'type' in config, and returns the\n        instance initialized with corresponding arguments given.\n\n        `object = config.init_obj('name', module, a, b=1)`\n        is equivalent to\n        `object = module.name(a, b=1)`\n        \"\"\"", "\n", "module_name", "=", "self", "[", "name", "]", "[", "'type'", "]", "\n", "module_args", "=", "dict", "(", "self", "[", "name", "]", "[", "'args'", "]", ")", "if", "'args'", "in", "self", "[", "name", "]", "else", "dict", "(", ")", "\n", "if", "not", "allow_override", ":", "\n", "            ", "assert", "all", "(", "[", "k", "not", "in", "module_args", "for", "k", "in", "kwargs", "]", ")", ",", "'Overwriting kwargs given in config file is not allowed'", "\n", "", "module_args", ".", "update", "(", "kwargs", ")", "\n", "return", "getattr", "(", "module", ",", "module_name", ")", "(", "*", "args", ",", "**", "module_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.RIDE.public.parse_config.ConfigParser.init_ftn": [[104, 118], ["dict", "all", "dict.update", "functools.partial", "getattr"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update"], ["", "def", "init_ftn", "(", "self", ",", "name", ",", "module", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Finds a function handle with the name given as 'type' in config, and returns the\n        function with given arguments fixed with functools.partial.\n\n        `function = config.init_ftn('name', module, a, b=1)`\n        is equivalent to\n        `function = lambda *args, **kwargs: module.name(a, *args, b=1, **kwargs)`.\n        \"\"\"", "\n", "module_name", "=", "self", "[", "name", "]", "[", "'type'", "]", "\n", "module_args", "=", "dict", "(", "self", "[", "name", "]", "[", "'args'", "]", ")", "\n", "assert", "all", "(", "[", "k", "not", "in", "module_args", "for", "k", "in", "kwargs", "]", ")", ",", "'Overwriting kwargs given in config file is not allowed'", "\n", "module_args", ".", "update", "(", "kwargs", ")", "\n", "return", "partial", "(", "getattr", "(", "module", ",", "module_name", ")", ",", "*", "args", ",", "**", "module_args", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.RIDE.public.parse_config.ConfigParser.__getitem__": [[119, 122], ["None"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"Access items like ordinary dict.\"\"\"", "\n", "return", "self", ".", "config", "[", "name", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.RIDE.public.parse_config.ConfigParser.get_logger": [[123, 129], ["logging.getLogger", "logging.getLogger.setLevel", "parse_config.ConfigParser.log_levels.keys"], "methods", ["None"], ["", "def", "get_logger", "(", "self", ",", "name", ",", "verbosity", "=", "2", ")", ":", "\n", "        ", "msg_verbosity", "=", "'verbosity option {} is invalid. Valid options are {}.'", ".", "format", "(", "verbosity", ",", "self", ".", "log_levels", ".", "keys", "(", ")", ")", "\n", "assert", "verbosity", "in", "self", ".", "log_levels", ",", "msg_verbosity", "\n", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "self", ".", "log_levels", "[", "verbosity", "]", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.RIDE.public.parse_config.ConfigParser.config": [[131, 134], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "config", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_config", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.RIDE.public.parse_config.ConfigParser.save_dir": [[135, 138], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "save_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_save_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.RIDE.public.parse_config.ConfigParser.log_dir": [[139, 142], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "log_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_log_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.RIDE.public.parse_config._update_config": [[144, 152], ["modification.items", "parse_config._set_by_path"], "function", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.RIDE.public.parse_config._set_by_path"], ["", "", "def", "_update_config", "(", "config", ",", "modification", ")", ":", "\n", "    ", "if", "modification", "is", "None", ":", "\n", "        ", "return", "config", "\n", "\n", "", "for", "k", ",", "v", "in", "modification", ".", "items", "(", ")", ":", "\n", "        ", "if", "v", "is", "not", "None", ":", "\n", "            ", "_set_by_path", "(", "config", ",", "k", ",", "v", ")", "\n", "", "", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.RIDE.public.parse_config._get_opt_name": [[153, 158], ["flags[].replace", "flg.startswith", "flg.replace"], "function", ["None"], ["", "def", "_get_opt_name", "(", "flags", ")", ":", "\n", "    ", "for", "flg", "in", "flags", ":", "\n", "        ", "if", "flg", ".", "startswith", "(", "'--'", ")", ":", "\n", "            ", "return", "flg", ".", "replace", "(", "'--'", ",", "''", ")", "\n", "", "", "return", "flags", "[", "0", "]", ".", "replace", "(", "'--'", ",", "''", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.RIDE.public.parse_config._set_by_path": [[159, 163], ["keys.split.split", "parse_config._get_by_path"], "function", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.RIDE.public.parse_config._get_by_path"], ["", "def", "_set_by_path", "(", "tree", ",", "keys", ",", "value", ")", ":", "\n", "    ", "\"\"\"Set a value in a nested object in tree by sequence of keys.\"\"\"", "\n", "keys", "=", "keys", ".", "split", "(", "';'", ")", "\n", "_get_by_path", "(", "tree", ",", "keys", "[", ":", "-", "1", "]", ")", "[", "keys", "[", "-", "1", "]", "]", "=", "value", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.RIDE.public.parse_config._get_by_path": [[164, 167], ["functools.reduce"], "function", ["None"], ["", "def", "_get_by_path", "(", "tree", ",", "keys", ")", ":", "\n", "    ", "\"\"\"Access a nested object in tree by sequence of keys.\"\"\"", "\n", "return", "reduce", "(", "getitem", ",", "keys", ",", "tree", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.beierzhu_xerm.utils.gflops.gflops_normed_linear": [[53, 58], ["y.size", "torch.DoubleTensor", "m.weight.size", "m.weight.numel", "int"], "function", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size"], ["def", "gflops_normed_linear", "(", "m", ",", "x", ",", "y", ")", ":", "\n", "# per output element", "\n", "    ", "num_instance", "=", "y", ".", "size", "(", "0", ")", "\n", "total_ops", "=", "m", ".", "weight", ".", "numel", "(", ")", "*", "num_instance", "+", "m", ".", "weight", ".", "size", "(", "0", ")", "# weight normalization can be ignored", "\n", "m", ".", "total_ops", "+=", "torch", ".", "DoubleTensor", "(", "[", "int", "(", "total_ops", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.utils.util.MetricTracker.__init__": [[83, 87], ["pandas.DataFrame", "util.MetricTracker.reset"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.reset"], ["    ", "def", "__init__", "(", "self", ",", "*", "keys", ",", "writer", "=", "None", ")", ":", "\n", "        ", "self", ".", "writer", "=", "writer", "\n", "self", ".", "_data", "=", "pd", ".", "DataFrame", "(", "index", "=", "keys", ",", "columns", "=", "[", "'total'", ",", "'counts'", ",", "'average'", "]", ")", "\n", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.utils.util.MetricTracker.reset": [[88, 91], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "for", "col", "in", "self", ".", "_data", ".", "columns", ":", "\n", "            ", "self", ".", "_data", "[", "col", "]", ".", "values", "[", ":", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.utils.util.MetricTracker.update": [[92, 100], ["isinstance", "util.MetricTracker.writer.add_scalar", "len"], "methods", ["None"], ["", "", "def", "update", "(", "self", ",", "key", ",", "value", ",", "n", "=", "1", ")", ":", "\n", "        ", "if", "isinstance", "(", "value", ",", "tuple", ")", "and", "len", "(", "value", ")", "==", "2", ":", "\n", "            ", "value", ",", "n", "=", "value", "\n", "", "if", "self", ".", "writer", "is", "not", "None", ":", "\n", "            ", "self", ".", "writer", ".", "add_scalar", "(", "key", ",", "value", ")", "\n", "", "self", ".", "_data", ".", "total", "[", "key", "]", "+=", "value", "*", "n", "\n", "self", ".", "_data", ".", "counts", "[", "key", "]", "+=", "n", "\n", "self", ".", "_data", ".", "average", "[", "key", "]", "=", "self", ".", "_data", ".", "total", "[", "key", "]", "/", "self", ".", "_data", ".", "counts", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.utils.util.MetricTracker.avg": [[101, 103], ["None"], "methods", ["None"], ["", "def", "avg", "(", "self", ",", "key", ")", ":", "\n", "        ", "return", "self", ".", "_data", ".", "average", "[", "key", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.utils.util.MetricTracker.result": [[104, 106], ["dict"], "methods", ["None"], ["", "def", "result", "(", "self", ")", ":", "\n", "        ", "return", "dict", "(", "self", ".", "_data", ".", "average", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.utils.util.MiscMeter.__init__": [[111, 113], ["util.MiscMeter.reset"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.utils.util.MiscMeter.reset": [[114, 121], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "min", "=", "9e15", "\n", "self", ".", "max", "=", "-", "9e15", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.utils.util.MiscMeter.update": [[122, 129], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "self", ".", "min", "=", "val", "if", "val", "<", "self", ".", "min", "else", "self", ".", "min", "\n", "self", ".", "max", "=", "val", "if", "val", ">", "self", ".", "max", "else", "self", ".", "max", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.utils.util.rename_parallel_state_dict": [[29, 40], ["list", "state_dict.keys", "k.startswith", "print", "state_dict.pop"], "function", ["None"], ["", "def", "rename_parallel_state_dict", "(", "state_dict", ")", ":", "\n", "    ", "count", "=", "0", "\n", "for", "k", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "        ", "if", "k", ".", "startswith", "(", "'module.'", ")", ":", "\n", "            ", "v", "=", "state_dict", ".", "pop", "(", "k", ")", "\n", "renamed", "=", "k", "[", "7", ":", "]", "\n", "state_dict", "[", "renamed", "]", "=", "v", "\n", "count", "+=", "1", "\n", "", "", "if", "count", ">", "0", ":", "\n", "        ", "print", "(", "\"Detected DataParallel: Renamed {} parameters\"", ".", "format", "(", "count", ")", ")", "\n", "", "return", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.utils.util.load_state_dict": [[41, 61], ["model.state_dict", "state_dict.items", "isinstance", "len", "print", "print", "own_state[].copy_", "print", "len"], "function", ["None"], ["", "def", "load_state_dict", "(", "model", ",", "state_dict", ",", "no_ignore", "=", "False", ")", ":", "\n", "    ", "own_state", "=", "model", ".", "state_dict", "(", ")", "\n", "count", "=", "0", "\n", "for", "name", ",", "param", "in", "state_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "name", "not", "in", "own_state", ":", "# ignore", "\n", "            ", "print", "(", "\"Warning: {} ignored because it does not exist in state_dict\"", ".", "format", "(", "name", ")", ")", "\n", "assert", "not", "no_ignore", ",", "\"Ignoring param that does not exist in model's own state dict is not allowed.\"", "\n", "continue", "\n", "", "if", "isinstance", "(", "param", ",", "torch", ".", "nn", ".", "Parameter", ")", ":", "\n", "# backwards compatibility for serialized parameters", "\n", "            ", "param", "=", "param", ".", "data", "\n", "", "try", ":", "\n", "            ", "own_state", "[", "name", "]", ".", "copy_", "(", "param", ")", "\n", "", "except", "RuntimeError", "as", "e", ":", "\n", "            ", "print", "(", "\"Error in copying parameter {}, source shape: {}, destination shape: {}\"", ".", "format", "(", "name", ",", "param", ".", "shape", ",", "own_state", "[", "name", "]", ".", "shape", ")", ")", "\n", "raise", "e", "\n", "", "count", "+=", "1", "\n", "", "if", "count", "!=", "len", "(", "own_state", ")", ":", "\n", "        ", "print", "(", "\"Warning: Model has {} parameters, copied {} from state dict\"", ".", "format", "(", "len", "(", "own_state", ")", ",", "count", ")", ")", "\n", "", "return", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.utils.util.ensure_dir": [[62, 66], ["pathlib.Path", "pathlib.Path.is_dir", "pathlib.Path.mkdir"], "function", ["None"], ["", "def", "ensure_dir", "(", "dirname", ")", ":", "\n", "    ", "dirname", "=", "Path", "(", "dirname", ")", "\n", "if", "not", "dirname", ".", "is_dir", "(", ")", ":", "\n", "        ", "dirname", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.utils.util.read_json": [[67, 71], ["pathlib.Path", "pathlib.Path.open", "json.load"], "function", ["None"], ["", "", "def", "read_json", "(", "fname", ")", ":", "\n", "    ", "fname", "=", "Path", "(", "fname", ")", "\n", "with", "fname", ".", "open", "(", "'rt'", ")", "as", "handle", ":", "\n", "        ", "return", "json", ".", "load", "(", "handle", ",", "object_hook", "=", "OrderedDict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.utils.util.write_json": [[72, 76], ["pathlib.Path", "pathlib.Path.open", "json.dump"], "function", ["None"], ["", "", "def", "write_json", "(", "content", ",", "fname", ")", ":", "\n", "    ", "fname", "=", "Path", "(", "fname", ")", "\n", "with", "fname", ".", "open", "(", "'wt'", ")", "as", "handle", ":", "\n", "        ", "json", ".", "dump", "(", "content", ",", "handle", ",", "indent", "=", "4", ",", "sort_keys", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.utils.util.inf_loop": [[77, 81], ["itertools.repeat"], "function", ["None"], ["", "", "def", "inf_loop", "(", "data_loader", ")", ":", "\n", "    ", "''' wrapper function for endless data loader. '''", "\n", "for", "loader", "in", "repeat", "(", "data_loader", ")", ":", "\n", "        ", "yield", "from", "loader", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.utils.util.shot_acc": [[131, 176], ["isinstance", "isinstance", "numpy.unique", "range", "numpy.array().astype", "numpy.array().astype", "preds.detach().cpu().numpy.detach().cpu().numpy", "labels.detach().cpu().numpy.detach().cpu().numpy", "isinstance", "train_class_count.append", "test_class_count.append", "class_correct.append", "len", "len", "many_shot.append", "len", "median_shot.append", "len", "low_shot.append", "TypeError", "len", "len", "many_shot.append", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.array", "numpy.array", "preds.detach().cpu().numpy.detach().cpu", "labels.detach().cpu().numpy.detach().cpu", "low_shot.append", "median_shot.append", "zip", "type", "preds.detach().cpu().numpy.detach", "labels.detach().cpu().numpy.detach"], "function", ["None"], ["", "", "def", "shot_acc", "(", "preds", ",", "labels", ",", "train_data", ",", "many_shot_thr", "=", "100", ",", "low_shot_thr", "=", "20", ",", "acc_per_cls", "=", "False", ")", ":", "\n", "\n", "    ", "if", "isinstance", "(", "train_data", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "training_labels", "=", "np", ".", "array", "(", "train_data", ")", ".", "astype", "(", "int", ")", "\n", "", "else", ":", "\n", "        ", "training_labels", "=", "np", ".", "array", "(", "train_data", ".", "dataset", ".", "targets", ")", ".", "astype", "(", "int", ")", "\n", "\n", "", "if", "isinstance", "(", "preds", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "preds", "=", "preds", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "labels", "=", "labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "elif", "isinstance", "(", "preds", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "'Type ({}) of preds not supported'", ".", "format", "(", "type", "(", "preds", ")", ")", ")", "\n", "", "train_class_count", "=", "[", "]", "\n", "test_class_count", "=", "[", "]", "\n", "class_correct", "=", "[", "]", "\n", "for", "l", "in", "np", ".", "unique", "(", "labels", ")", ":", "\n", "        ", "train_class_count", ".", "append", "(", "len", "(", "training_labels", "[", "training_labels", "==", "l", "]", ")", ")", "\n", "test_class_count", ".", "append", "(", "len", "(", "labels", "[", "labels", "==", "l", "]", ")", ")", "\n", "class_correct", ".", "append", "(", "(", "preds", "[", "labels", "==", "l", "]", "==", "labels", "[", "labels", "==", "l", "]", ")", ".", "sum", "(", ")", ")", "\n", "\n", "", "many_shot", "=", "[", "]", "\n", "median_shot", "=", "[", "]", "\n", "low_shot", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "train_class_count", ")", ")", ":", "\n", "        ", "if", "train_class_count", "[", "i", "]", ">", "many_shot_thr", ":", "\n", "            ", "many_shot", ".", "append", "(", "(", "class_correct", "[", "i", "]", "/", "test_class_count", "[", "i", "]", ")", ")", "\n", "", "elif", "train_class_count", "[", "i", "]", "<", "low_shot_thr", ":", "\n", "            ", "low_shot", ".", "append", "(", "(", "class_correct", "[", "i", "]", "/", "test_class_count", "[", "i", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "median_shot", ".", "append", "(", "(", "class_correct", "[", "i", "]", "/", "test_class_count", "[", "i", "]", ")", ")", "\n", "\n", "", "", "if", "len", "(", "many_shot", ")", "==", "0", ":", "\n", "        ", "many_shot", ".", "append", "(", "0", ")", "\n", "", "if", "len", "(", "median_shot", ")", "==", "0", ":", "\n", "        ", "median_shot", ".", "append", "(", "0", ")", "\n", "", "if", "len", "(", "low_shot", ")", "==", "0", ":", "\n", "        ", "low_shot", ".", "append", "(", "0", ")", "\n", "\n", "", "if", "acc_per_cls", ":", "\n", "        ", "class_accs", "=", "[", "c", "/", "cnt", "for", "c", ",", "cnt", "in", "zip", "(", "class_correct", ",", "test_class_count", ")", "]", "\n", "return", "np", ".", "mean", "(", "many_shot", ")", ",", "np", ".", "mean", "(", "median_shot", ")", ",", "np", ".", "mean", "(", "low_shot", ")", ",", "class_accs", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "mean", "(", "many_shot", ")", ",", "np", ".", "mean", "(", "median_shot", ")", ",", "np", ".", "mean", "(", "low_shot", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.FocalLoss.__init__": [[23, 28], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cls_num_list", "=", "None", ",", "weight", "=", "None", ",", "gamma", "=", "0.", ")", ":", "\n", "        ", "super", "(", "FocalLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "assert", "gamma", ">=", "0", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "weight", "=", "weight", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.FocalLoss._hook_before_epoch": [[29, 31], ["None"], "methods", ["None"], ["", "def", "_hook_before_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.FocalLoss.forward": [[32, 34], ["loss.focal_loss", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.focal_loss"], ["", "def", "forward", "(", "self", ",", "output_logits", ",", "target", ")", ":", "\n", "        ", "return", "focal_loss", "(", "F", ".", "cross_entropy", "(", "output_logits", ",", "target", ",", "reduction", "=", "'none'", ",", "weight", "=", "self", ".", "weight", ")", ",", "self", ".", "gamma", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.CrossEntropyLoss.__init__": [[36, 47], ["torch.Module.__init__", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.power", "numpy.array", "len", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cls_num_list", "=", "None", ",", "reweight_CE", "=", "False", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "reweight_CE", ":", "\n", "            ", "idx", "=", "1", "# condition could be put in order to set idx", "\n", "betas", "=", "[", "0", ",", "0.9999", "]", "\n", "effective_num", "=", "1.0", "-", "np", ".", "power", "(", "betas", "[", "idx", "]", ",", "cls_num_list", ")", "\n", "per_cls_weights", "=", "(", "1.0", "-", "betas", "[", "idx", "]", ")", "/", "np", ".", "array", "(", "effective_num", ")", "\n", "per_cls_weights", "=", "per_cls_weights", "/", "np", ".", "sum", "(", "per_cls_weights", ")", "*", "len", "(", "cls_num_list", ")", "\n", "self", ".", "per_cls_weights", "=", "torch", ".", "tensor", "(", "per_cls_weights", ",", "dtype", "=", "torch", ".", "float", ",", "requires_grad", "=", "False", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "per_cls_weights", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.CrossEntropyLoss.to": [[48, 54], ["super().to", "loss.CrossEntropyLoss.per_cls_weights.to"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to"], ["", "", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "super", "(", ")", ".", "to", "(", "device", ")", "\n", "if", "self", ".", "per_cls_weights", "is", "not", "None", ":", "\n", "            ", "self", ".", "per_cls_weights", "=", "self", ".", "per_cls_weights", ".", "to", "(", "device", ")", "\n", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.CrossEntropyLoss.forward": [[55, 57], ["torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "output_logits", ",", "target", ",", "extra_info", "=", "None", ")", ":", "# output is logits", "\n", "        ", "return", "F", ".", "cross_entropy", "(", "output_logits", ",", "target", ",", "weight", "=", "self", ".", "per_cls_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.LDAMLoss.__init__": [[59, 82], ["torch.Module.__init__", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.sqrt", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.sqrt", "numpy.max", "numpy.power", "numpy.array", "len", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max"], ["    ", "def", "__init__", "(", "self", ",", "cls_num_list", "=", "None", ",", "max_m", "=", "0.5", ",", "s", "=", "30", ",", "reweight_epoch", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "cls_num_list", "is", "None", ":", "\n", "# No cls_num_list is provided, then we cannot adjust cross entropy with LDAM.", "\n", "            ", "self", ".", "m_list", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "reweight_epoch", "=", "reweight_epoch", "\n", "m_list", "=", "1.0", "/", "np", ".", "sqrt", "(", "np", ".", "sqrt", "(", "cls_num_list", ")", ")", "\n", "m_list", "=", "m_list", "*", "(", "max_m", "/", "np", ".", "max", "(", "m_list", ")", ")", "\n", "m_list", "=", "torch", ".", "tensor", "(", "m_list", ",", "dtype", "=", "torch", ".", "float", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "m_list", "=", "m_list", "\n", "assert", "s", ">", "0", "\n", "self", ".", "s", "=", "s", "\n", "if", "reweight_epoch", "!=", "-", "1", ":", "\n", "                ", "idx", "=", "1", "# condition could be put in order to set idx", "\n", "betas", "=", "[", "0", ",", "0.9999", "]", "\n", "effective_num", "=", "1.0", "-", "np", ".", "power", "(", "betas", "[", "idx", "]", ",", "cls_num_list", ")", "\n", "per_cls_weights", "=", "(", "1.0", "-", "betas", "[", "idx", "]", ")", "/", "np", ".", "array", "(", "effective_num", ")", "\n", "per_cls_weights", "=", "per_cls_weights", "/", "np", ".", "sum", "(", "per_cls_weights", ")", "*", "len", "(", "cls_num_list", ")", "\n", "self", ".", "per_cls_weights_enabled", "=", "torch", ".", "tensor", "(", "per_cls_weights", ",", "dtype", "=", "torch", ".", "float", ",", "requires_grad", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "per_cls_weights_enabled", "=", "None", "\n", "self", ".", "per_cls_weights", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.LDAMLoss.to": [[83, 92], ["super().to", "loss.LDAMLoss.m_list.to", "loss.LDAMLoss.per_cls_weights_enabled.to"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to"], ["", "", "", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "super", "(", ")", ".", "to", "(", "device", ")", "\n", "if", "self", ".", "m_list", "is", "not", "None", ":", "\n", "            ", "self", ".", "m_list", "=", "self", ".", "m_list", ".", "to", "(", "device", ")", "\n", "\n", "", "if", "self", ".", "per_cls_weights_enabled", "is", "not", "None", ":", "\n", "            ", "self", ".", "per_cls_weights_enabled", "=", "self", ".", "per_cls_weights_enabled", ".", "to", "(", "device", ")", "\n", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.LDAMLoss._hook_before_epoch": [[93, 101], ["None"], "methods", ["None"], ["", "def", "_hook_before_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "if", "self", ".", "reweight_epoch", "!=", "-", "1", ":", "\n", "            ", "self", ".", "epoch", "=", "epoch", "\n", "\n", "if", "epoch", ">", "self", ".", "reweight_epoch", ":", "\n", "                ", "self", ".", "per_cls_weights", "=", "self", ".", "per_cls_weights_enabled", "\n", "", "else", ":", "\n", "                ", "self", ".", "per_cls_weights", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.LDAMLoss.get_final_output": [[102, 116], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.zeros_like.float", "torch.zeros_like.float", "torch.zeros_like.float", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "batch_m.view.view.view", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "target.data.view", "torch.zeros_like.float.transpose"], "methods", ["None"], ["", "", "", "def", "get_final_output", "(", "self", ",", "output_logits", ",", "target", ")", ":", "\n", "        ", "x", "=", "output_logits", "\n", "\n", "index", "=", "torch", ".", "zeros_like", "(", "x", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "x", ".", "device", ")", "\n", "index", ".", "scatter_", "(", "1", ",", "target", ".", "data", ".", "view", "(", "-", "1", ",", "1", ")", ",", "1", ")", "\n", "\n", "index_float", "=", "index", ".", "float", "(", ")", "\n", "batch_m", "=", "torch", ".", "matmul", "(", "self", ".", "m_list", "[", "None", ",", ":", "]", ",", "index_float", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "\n", "batch_m", "=", "batch_m", ".", "view", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "x_m", "=", "x", "-", "batch_m", "*", "self", ".", "s", "\n", "\n", "final_output", "=", "torch", ".", "where", "(", "index", ",", "x_m", ",", "x", ")", "\n", "return", "final_output", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.LDAMLoss.forward": [[117, 123], ["loss.LDAMLoss.get_final_output", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.ListSimpleLoss.get_final_output"], ["", "def", "forward", "(", "self", ",", "output_logits", ",", "target", ")", ":", "\n", "        ", "if", "self", ".", "m_list", "is", "None", ":", "\n", "            ", "return", "F", ".", "cross_entropy", "(", "output_logits", ",", "target", ")", "\n", "\n", "", "final_output", "=", "self", ".", "get_final_output", "(", "output_logits", ",", "target", ")", "\n", "return", "F", ".", "cross_entropy", "(", "final_output", ",", "target", ",", "weight", "=", "self", ".", "per_cls_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.KD.__init__": [[126, 129], ["print"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "T", ")", ":", "\n", "        ", "self", ".", "T", "=", "T", "\n", "print", "(", "f'=> temperature for KD loss is {self.T}'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.KD.KL": [[130, 138], ["torch.softmax().clone().detach", "torch.softmax().clone().detach", "torch.softmax().clone().detach", "torch.softmax", "torch.softmax", "torch.softmax", "loss.sum", "torch.softmax().clone", "torch.softmax().clone", "torch.softmax().clone", "torch.softmax.log", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], ["", "def", "KL", "(", "self", ",", "input", ",", "target", ",", "weight", "=", "None", ",", "reduction", "=", "None", ")", ":", "\n", "# input and target are unnormalized probability", "\n", "        ", "prob_target", "=", "F", ".", "softmax", "(", "target", "/", "self", ".", "T", ",", "-", "1", ")", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "prob_input", "=", "F", ".", "softmax", "(", "input", "/", "self", ".", "T", ",", "-", "1", ")", "\n", "loss", "=", "-", "prob_target", "*", "prob_input", ".", "log", "(", ")", "*", "self", ".", "T", "*", "self", ".", "T", "\n", "\n", "# return loss.sum(1).mean()", "\n", "return", "loss", ".", "sum", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.xERMLoss.__init__": [[140, 159], ["torch.Module.__init__", "print", "loss.ListRIDELoss", "loss.ListRIDELoss", "loss.KD"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "T", "=", "1", ",", "cls_num_list", "=", "None", ",", "base_diversity_temperature", "=", "1.0", ",", "max_m", "=", "0.5", ",", "s", "=", "30", ",", "reweight", "=", "True", ",", "reweight_epoch", "=", "-", "1", ",", "\n", "base_loss_factor", "=", "1.0", ",", "additional_diversity_factor", "=", "-", "0.2", ",", "reweight_factor", "=", "0.05", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "print", "(", "'=> init xERMLoss'", ")", "\n", "self", ".", "gamma", "=", "1", "\n", "# self.imbalanced_loss = RIDELoss(cls_num_list, base_diversity_temperature, ", "\n", "#                                 max_m, s, reweight, reweight_epoch, ", "\n", "#                                 base_loss_factor, additional_diversity_factor, reweight_factor)", "\n", "\n", "self", ".", "imbalanced_loss", "=", "ListRIDELoss", "(", "cls_num_list", ",", "base_diversity_temperature", ",", "\n", "max_m", ",", "s", ",", "reweight", ",", "200", ",", "\n", "base_loss_factor", ",", "additional_diversity_factor", ",", "reweight_factor", ")", "\n", "\n", "self", ".", "balanced_loss", "=", "ListRIDELoss", "(", "cls_num_list", ",", "base_diversity_temperature", ",", "\n", "max_m", ",", "s", ",", "reweight", ",", "reweight_epoch", ",", "\n", "base_loss_factor", ",", "additional_diversity_factor", ",", "reweight_factor", ")", "\n", "\n", "kd", "=", "KD", "(", "T", "=", "T", ")", "\n", "self", ".", "balanced_loss", ".", "base_loss", "=", "kd", ".", "KL", "\n", "# self.w_cfs = torch.empty(0).cuda()", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.xERMLoss.to": [[163, 171], ["super().to", "loss.xERMLoss.balanced_loss.to", "loss.xERMLoss.imbalanced_loss.to"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "super", "(", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "balanced_loss", ".", "to", "(", "device", ")", "\n", "self", ".", "imbalanced_loss", ".", "to", "(", "device", ")", "\n", "# self.balanced_loss_debug.to(device)", "\n", "# self.imbalanced_loss_debug.to(device)", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.xERMLoss.cal_xERM_weight": [[172, 187], ["torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow"], "methods", ["None"], ["", "def", "cal_xERM_weight", "(", "self", ",", "logits_CF", ",", "logits_F", ",", "labels", ")", ":", "\n", "        ", "XE_CF", "=", "F", ".", "cross_entropy", "(", "logits_CF", ",", "labels", ",", "reduction", "=", "'none'", ")", "\n", "XE_F", "=", "F", ".", "cross_entropy", "(", "logits_F", ",", "labels", ",", "reduction", "=", "'none'", ")", "\n", "\n", "XE_CF", "=", "torch", ".", "pow", "(", "XE_CF", ",", "self", ".", "gamma", ")", "\n", "XE_F", "=", "torch", ".", "pow", "(", "XE_F", ",", "self", ".", "gamma", ")", "\n", "\n", "w_cf", "=", "XE_CF", "/", "(", "XE_CF", "+", "XE_F", "+", "1e-5", ")", "\n", "\n", "w_f", "=", "1", "-", "w_cf", "\n", "\n", "# self.w_cfs = torch.cat((self.w_cfs, w_cf))", "\n", "# self.w_fs = torch.cat((self.w_fs, w_f))", "\n", "\n", "return", "w_cf", ",", "w_f", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.xERMLoss._hook_before_epoch": [[188, 191], ["loss.xERMLoss.balanced_loss._hook_before_epoch", "loss.xERMLoss.imbalanced_loss._hook_before_epoch"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill._hook_before_epoch", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill._hook_before_epoch"], ["", "def", "_hook_before_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "balanced_loss", ".", "_hook_before_epoch", "(", "epoch", ")", "\n", "self", ".", "imbalanced_loss", ".", "_hook_before_epoch", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.xERMLoss.forward": [[195, 210], ["balanced_logits.clone().detach.clone().detach.clone().detach", "imbalanced_logits.clone().detach.clone().detach.clone().detach", "loss.xERMLoss.imbalanced_loss", "loss.xERMLoss.balanced_loss", "loss.xERMLoss.cal_xERM_weight", "balanced_logits.clone().detach.clone().detach.clone", "imbalanced_logits.clone().detach.clone().detach.clone"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.SimplexERMLoss.cal_xERM_weight"], ["", "def", "forward", "(", "self", ",", "output_logits", ",", "balanced_logits", ",", "imbalanced_logits", ",", "target", ",", "extra_info", "=", "None", ")", ":", "\n", "        ", "balanced_logits", "=", "balanced_logits", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "imbalanced_logits", "=", "imbalanced_logits", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "loss_f", "=", "self", ".", "imbalanced_loss", "(", "output_logits", ",", "target", ",", "extra_info", ")", "\n", "loss_cf", "=", "self", ".", "balanced_loss", "(", "output_logits", ",", "balanced_logits", ",", "extra_info", ")", "\n", "# loss_cf = self.balanced_loss(output_logits, target, extra_info)", "\n", "\n", "# loss_f_debug = self.imbalanced_loss_debug(output_logits, target, extra_info)", "\n", "# loss_cf_debug = self.balanced_loss_debug(output_logits, target, extra_info)", "\n", "\n", "w_cf", ",", "w_f", "=", "self", ".", "cal_xERM_weight", "(", "balanced_logits", ",", "imbalanced_logits", ",", "target", ")", "\n", "# w_cf = 1", "\n", "# w_f = 0", "\n", "\n", "return", "(", "loss_f", "*", "w_f", ")", ".", "mean", "(", ")", "+", "(", "loss_cf", "*", "w_cf", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.ListRIDELoss.__init__": [[213, 264], ["torch.Module.__init__", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "len", "numpy.all", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "numpy.sqrt", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.array", "numpy.sum", "numpy.max", "numpy.sqrt", "numpy.max", "numpy.power", "numpy.array", "len", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max"], ["    ", "def", "__init__", "(", "self", ",", "cls_num_list", "=", "None", ",", "base_diversity_temperature", "=", "1.0", ",", "max_m", "=", "0.5", ",", "s", "=", "30", ",", "reweight", "=", "True", ",", "reweight_epoch", "=", "-", "1", ",", "\n", "base_loss_factor", "=", "1.0", ",", "additional_diversity_factor", "=", "-", "0.2", ",", "reweight_factor", "=", "0.05", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "base_loss", "=", "F", ".", "cross_entropy", "\n", "self", ".", "base_loss_factor", "=", "base_loss_factor", "\n", "if", "not", "reweight", ":", "\n", "            ", "self", ".", "reweight_epoch", "=", "-", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "reweight_epoch", "=", "reweight_epoch", "\n", "\n", "# LDAM is a variant of cross entropy and we handle it with self.m_list.", "\n", "", "if", "cls_num_list", "is", "None", ":", "\n", "# No cls_num_list is provided, then we cannot adjust cross entropy with LDAM.", "\n", "\n", "            ", "self", ".", "m_list", "=", "None", "\n", "self", ".", "per_cls_weights_enabled", "=", "None", "\n", "self", ".", "per_cls_weights_enabled_diversity", "=", "None", "\n", "", "else", ":", "\n", "# We will use LDAM loss if we provide cls_num_list.", "\n", "\n", "            ", "m_list", "=", "1.0", "/", "np", ".", "sqrt", "(", "np", ".", "sqrt", "(", "cls_num_list", ")", ")", "\n", "m_list", "=", "m_list", "*", "(", "max_m", "/", "np", ".", "max", "(", "m_list", ")", ")", "\n", "m_list", "=", "torch", ".", "tensor", "(", "m_list", ",", "dtype", "=", "torch", ".", "float", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "m_list", "=", "m_list", "\n", "self", ".", "s", "=", "s", "\n", "assert", "s", ">", "0", "\n", "\n", "if", "reweight_epoch", "!=", "-", "1", ":", "\n", "                ", "idx", "=", "1", "# condition could be put in order to set idx", "\n", "betas", "=", "[", "0", ",", "0.9999", "]", "\n", "effective_num", "=", "1.0", "-", "np", ".", "power", "(", "betas", "[", "idx", "]", ",", "cls_num_list", ")", "\n", "per_cls_weights", "=", "(", "1.0", "-", "betas", "[", "idx", "]", ")", "/", "np", ".", "array", "(", "effective_num", ")", "\n", "per_cls_weights", "=", "per_cls_weights", "/", "np", ".", "sum", "(", "per_cls_weights", ")", "*", "len", "(", "cls_num_list", ")", "\n", "self", ".", "per_cls_weights_enabled", "=", "torch", ".", "tensor", "(", "per_cls_weights", ",", "dtype", "=", "torch", ".", "float", ",", "requires_grad", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "per_cls_weights_enabled", "=", "None", "\n", "\n", "", "cls_num_list", "=", "np", ".", "array", "(", "cls_num_list", ")", "/", "np", ".", "sum", "(", "cls_num_list", ")", "\n", "C", "=", "len", "(", "cls_num_list", ")", "\n", "per_cls_weights", "=", "C", "*", "cls_num_list", "*", "reweight_factor", "+", "1", "-", "reweight_factor", "\n", "\n", "# Experimental normalization: This is for easier hyperparam tuning, the effect can be described in the learning rate so the math formulation keeps the same.", "\n", "# At the same time, the 1 - max trick that was previously used is not required since weights are already adjusted.", "\n", "per_cls_weights", "=", "per_cls_weights", "/", "np", ".", "max", "(", "per_cls_weights", ")", "\n", "\n", "assert", "np", ".", "all", "(", "per_cls_weights", ">", "0", ")", ",", "\"reweight factor is too large: out of bounds\"", "\n", "# save diversity per_cls_weights", "\n", "self", ".", "per_cls_weights_enabled_diversity", "=", "torch", ".", "tensor", "(", "per_cls_weights", ",", "dtype", "=", "torch", ".", "float", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "base_diversity_temperature", "=", "base_diversity_temperature", "\n", "self", ".", "additional_diversity_factor", "=", "additional_diversity_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.ListRIDELoss.to": [[265, 277], ["super().to", "loss.ListRIDELoss.m_list.to", "loss.ListRIDELoss.per_cls_weights_enabled.to", "loss.ListRIDELoss.per_cls_weights_enabled_diversity.to"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "super", "(", ")", ".", "to", "(", "device", ")", "\n", "if", "self", ".", "m_list", "is", "not", "None", ":", "\n", "            ", "self", ".", "m_list", "=", "self", ".", "m_list", ".", "to", "(", "device", ")", "\n", "\n", "", "if", "self", ".", "per_cls_weights_enabled", "is", "not", "None", ":", "\n", "            ", "self", ".", "per_cls_weights_enabled", "=", "self", ".", "per_cls_weights_enabled", ".", "to", "(", "device", ")", "\n", "\n", "", "if", "self", ".", "per_cls_weights_enabled_diversity", "is", "not", "None", ":", "\n", "            ", "self", ".", "per_cls_weights_enabled_diversity", "=", "self", ".", "per_cls_weights_enabled_diversity", ".", "to", "(", "device", ")", "\n", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.ListRIDELoss._hook_before_epoch": [[278, 288], ["None"], "methods", ["None"], ["", "def", "_hook_before_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "if", "self", ".", "reweight_epoch", "!=", "-", "1", ":", "\n", "            ", "self", ".", "epoch", "=", "epoch", "\n", "\n", "if", "epoch", ">", "self", ".", "reweight_epoch", ":", "\n", "                ", "self", ".", "per_cls_weights_base", "=", "self", ".", "per_cls_weights_enabled", "\n", "self", ".", "per_cls_weights_diversity", "=", "self", ".", "per_cls_weights_enabled_diversity", "\n", "", "else", ":", "\n", "                ", "self", ".", "per_cls_weights_base", "=", "None", "\n", "self", ".", "per_cls_weights_diversity", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.ListRIDELoss.get_final_output": [[289, 306], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.zeros_like.float", "torch.zeros_like.float", "torch.zeros_like.float", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "batch_m.view.view.view", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "output_logits.size", "target.size", "target.data.view", "torch.zeros_like.float.transpose"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size"], ["", "", "", "def", "get_final_output", "(", "self", ",", "output_logits", ",", "target", ")", ":", "\n", "        ", "if", "output_logits", ".", "size", "(", ")", "==", "target", ".", "size", "(", ")", ":", "\n", "            ", "return", "output_logits", "\n", "\n", "", "x", "=", "output_logits", "\n", "\n", "index", "=", "torch", ".", "zeros_like", "(", "x", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "x", ".", "device", ")", "\n", "index", ".", "scatter_", "(", "1", ",", "target", ".", "data", ".", "view", "(", "-", "1", ",", "1", ")", ",", "1", ")", "\n", "\n", "index_float", "=", "index", ".", "float", "(", ")", "\n", "batch_m", "=", "torch", ".", "matmul", "(", "self", ".", "m_list", "[", "None", ",", ":", "]", ",", "index_float", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "\n", "batch_m", "=", "batch_m", ".", "view", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "x_m", "=", "x", "-", "batch_m", "*", "self", ".", "s", "\n", "\n", "final_output", "=", "torch", ".", "where", "(", "index", ",", "x_m", ",", "x", ")", "\n", "return", "final_output", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.ListRIDELoss.forward": [[307, 344], ["loss.ListRIDELoss.base_loss", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "loss.ListRIDELoss.get_final_output", "diversity_temperature.mean().item", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.softmax", "torch.softmax", "torch.softmax", "torch.kl_div().sum", "torch.kl_div().sum", "torch.kl_div().sum", "loss.ListRIDELoss.base_loss", "loss.ListRIDELoss.per_cls_weights_diversity.view", "loss.ListRIDELoss.per_cls_weights_base[].mean", "loss.ListRIDELoss.base_loss", "diversity_temperature.mean", "torch.kl_div", "torch.kl_div", "torch.kl_div", "loss.ListRIDELoss.base_loss"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.ListSimpleLoss.get_final_output"], ["", "def", "forward", "(", "self", ",", "output_logits", ",", "target", ",", "extra_info", "=", "None", ")", ":", "\n", "        ", "if", "extra_info", "is", "None", ":", "\n", "            ", "return", "self", ".", "base_loss", "(", "output_logits", ",", "target", ")", "\n", "\n", "", "loss", "=", "0", "\n", "\n", "# Adding RIDE Individual Loss for each expert", "\n", "for", "logits_item", "in", "extra_info", "[", "'logits'", "]", ":", "\n", "#ride_loss_logits = output_logits if self.additional_diversity_factor == 0 else logits_item", "\n", "            ", "ride_loss_logits", "=", "logits_item", "\n", "if", "self", ".", "m_list", "is", "None", ":", "\n", "                ", "loss", "+=", "self", ".", "base_loss_factor", "*", "self", ".", "base_loss", "(", "ride_loss_logits", ",", "target", ",", "reduction", "=", "\"none\"", ")", "\n", "", "else", ":", "\n", "                ", "final_output", "=", "self", ".", "get_final_output", "(", "ride_loss_logits", ",", "target", ")", "\n", "if", "self", ".", "per_cls_weights_base", "is", "not", "None", ":", "\n", "                    ", "loss", "+=", "self", ".", "base_loss_factor", "*", "self", ".", "base_loss", "(", "final_output", ",", "target", ",", "weight", "=", "self", ".", "per_cls_weights_base", ",", "reduction", "=", "\"none\"", ")", "/", "self", ".", "per_cls_weights_base", "[", "target", "]", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "                    ", "loss", "+=", "self", ".", "base_loss_factor", "*", "self", ".", "base_loss", "(", "final_output", ",", "target", ",", "weight", "=", "self", ".", "per_cls_weights_base", ",", "reduction", "=", "\"none\"", ")", "\n", "\n", "", "", "base_diversity_temperature", "=", "self", ".", "base_diversity_temperature", "\n", "\n", "if", "self", ".", "per_cls_weights_diversity", "is", "not", "None", ":", "\n", "                ", "diversity_temperature", "=", "base_diversity_temperature", "*", "self", ".", "per_cls_weights_diversity", ".", "view", "(", "(", "1", ",", "-", "1", ")", ")", "\n", "temperature_mean", "=", "diversity_temperature", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "                ", "diversity_temperature", "=", "base_diversity_temperature", "\n", "temperature_mean", "=", "base_diversity_temperature", "\n", "\n", "", "output_dist", "=", "F", ".", "log_softmax", "(", "logits_item", "/", "diversity_temperature", ",", "dim", "=", "1", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Using the mean takes only linear instead of quadratic time in computing and has only a slight difference so using the mean is preferred here", "\n", "                ", "mean_output_dist", "=", "F", ".", "softmax", "(", "output_logits", "/", "diversity_temperature", ",", "dim", "=", "1", ")", "\n", "\n", "\n", "", "loss", "+=", "self", ".", "additional_diversity_factor", "*", "temperature_mean", "*", "temperature_mean", "*", "F", ".", "kl_div", "(", "output_dist", ",", "mean_output_dist", ",", "reduction", "=", "'none'", ")", ".", "sum", "(", "1", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELoss.__init__": [[346, 397], ["torch.Module.__init__", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "len", "numpy.all", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "numpy.sqrt", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.array", "numpy.sum", "numpy.max", "numpy.sqrt", "numpy.max", "numpy.power", "numpy.array", "len", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max"], ["    ", "def", "__init__", "(", "self", ",", "cls_num_list", "=", "None", ",", "base_diversity_temperature", "=", "1.0", ",", "max_m", "=", "0.5", ",", "s", "=", "30", ",", "reweight", "=", "True", ",", "reweight_epoch", "=", "-", "1", ",", "\n", "base_loss_factor", "=", "1.0", ",", "additional_diversity_factor", "=", "-", "0.2", ",", "reweight_factor", "=", "0.05", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "base_loss", "=", "F", ".", "cross_entropy", "\n", "self", ".", "base_loss_factor", "=", "base_loss_factor", "\n", "if", "not", "reweight", ":", "\n", "            ", "self", ".", "reweight_epoch", "=", "-", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "reweight_epoch", "=", "reweight_epoch", "\n", "\n", "# LDAM is a variant of cross entropy and we handle it with self.m_list.", "\n", "", "if", "cls_num_list", "is", "None", ":", "\n", "# No cls_num_list is provided, then we cannot adjust cross entropy with LDAM.", "\n", "\n", "            ", "self", ".", "m_list", "=", "None", "\n", "self", ".", "per_cls_weights_enabled", "=", "None", "\n", "self", ".", "per_cls_weights_enabled_diversity", "=", "None", "\n", "", "else", ":", "\n", "# We will use LDAM loss if we provide cls_num_list.", "\n", "\n", "            ", "m_list", "=", "1.0", "/", "np", ".", "sqrt", "(", "np", ".", "sqrt", "(", "cls_num_list", ")", ")", "\n", "m_list", "=", "m_list", "*", "(", "max_m", "/", "np", ".", "max", "(", "m_list", ")", ")", "\n", "m_list", "=", "torch", ".", "tensor", "(", "m_list", ",", "dtype", "=", "torch", ".", "float", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "m_list", "=", "m_list", "\n", "self", ".", "s", "=", "s", "\n", "assert", "s", ">", "0", "\n", "\n", "if", "reweight_epoch", "!=", "-", "1", ":", "\n", "                ", "idx", "=", "1", "# condition could be put in order to set idx", "\n", "betas", "=", "[", "0", ",", "0.9999", "]", "\n", "effective_num", "=", "1.0", "-", "np", ".", "power", "(", "betas", "[", "idx", "]", ",", "cls_num_list", ")", "\n", "per_cls_weights", "=", "(", "1.0", "-", "betas", "[", "idx", "]", ")", "/", "np", ".", "array", "(", "effective_num", ")", "\n", "per_cls_weights", "=", "per_cls_weights", "/", "np", ".", "sum", "(", "per_cls_weights", ")", "*", "len", "(", "cls_num_list", ")", "\n", "self", ".", "per_cls_weights_enabled", "=", "torch", ".", "tensor", "(", "per_cls_weights", ",", "dtype", "=", "torch", ".", "float", ",", "requires_grad", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "per_cls_weights_enabled", "=", "None", "\n", "\n", "", "cls_num_list", "=", "np", ".", "array", "(", "cls_num_list", ")", "/", "np", ".", "sum", "(", "cls_num_list", ")", "\n", "C", "=", "len", "(", "cls_num_list", ")", "\n", "per_cls_weights", "=", "C", "*", "cls_num_list", "*", "reweight_factor", "+", "1", "-", "reweight_factor", "\n", "\n", "# Experimental normalization: This is for easier hyperparam tuning, the effect can be described in the learning rate so the math formulation keeps the same.", "\n", "# At the same time, the 1 - max trick that was previously used is not required since weights are already adjusted.", "\n", "per_cls_weights", "=", "per_cls_weights", "/", "np", ".", "max", "(", "per_cls_weights", ")", "\n", "\n", "assert", "np", ".", "all", "(", "per_cls_weights", ">", "0", ")", ",", "\"reweight factor is too large: out of bounds\"", "\n", "# save diversity per_cls_weights", "\n", "self", ".", "per_cls_weights_enabled_diversity", "=", "torch", ".", "tensor", "(", "per_cls_weights", ",", "dtype", "=", "torch", ".", "float", ",", "requires_grad", "=", "False", ")", ".", "cuda", "(", ")", "\n", "\n", "", "self", ".", "base_diversity_temperature", "=", "base_diversity_temperature", "\n", "self", ".", "additional_diversity_factor", "=", "additional_diversity_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELoss.to": [[398, 410], ["super().to", "loss.RIDELoss.m_list.to", "loss.RIDELoss.per_cls_weights_enabled.to", "loss.RIDELoss.per_cls_weights_enabled_diversity.to"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "super", "(", ")", ".", "to", "(", "device", ")", "\n", "if", "self", ".", "m_list", "is", "not", "None", ":", "\n", "            ", "self", ".", "m_list", "=", "self", ".", "m_list", ".", "to", "(", "device", ")", "\n", "\n", "", "if", "self", ".", "per_cls_weights_enabled", "is", "not", "None", ":", "\n", "            ", "self", ".", "per_cls_weights_enabled", "=", "self", ".", "per_cls_weights_enabled", ".", "to", "(", "device", ")", "\n", "\n", "", "if", "self", ".", "per_cls_weights_enabled_diversity", "is", "not", "None", ":", "\n", "            ", "self", ".", "per_cls_weights_enabled_diversity", "=", "self", ".", "per_cls_weights_enabled_diversity", ".", "to", "(", "device", ")", "\n", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELoss._hook_before_epoch": [[411, 421], ["None"], "methods", ["None"], ["", "def", "_hook_before_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "if", "self", ".", "reweight_epoch", "!=", "-", "1", ":", "\n", "            ", "self", ".", "epoch", "=", "epoch", "\n", "\n", "if", "epoch", ">", "self", ".", "reweight_epoch", ":", "\n", "                ", "self", ".", "per_cls_weights_base", "=", "self", ".", "per_cls_weights_enabled", "\n", "self", ".", "per_cls_weights_diversity", "=", "self", ".", "per_cls_weights_enabled_diversity", "\n", "", "else", ":", "\n", "                ", "self", ".", "per_cls_weights_base", "=", "None", "\n", "self", ".", "per_cls_weights_diversity", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELoss.get_final_output": [[422, 439], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.zeros_like.float", "torch.zeros_like.float", "torch.zeros_like.float", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "batch_m.view.view.view", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "output_logits.size", "target.size", "target.data.view", "torch.zeros_like.float.transpose"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size"], ["", "", "", "def", "get_final_output", "(", "self", ",", "output_logits", ",", "target", ")", ":", "\n", "        ", "if", "output_logits", ".", "size", "(", ")", "==", "target", ".", "size", "(", ")", ":", "\n", "            ", "return", "output_logits", "\n", "\n", "", "x", "=", "output_logits", "\n", "\n", "index", "=", "torch", ".", "zeros_like", "(", "x", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "x", ".", "device", ")", "\n", "index", ".", "scatter_", "(", "1", ",", "target", ".", "data", ".", "view", "(", "-", "1", ",", "1", ")", ",", "1", ")", "\n", "\n", "index_float", "=", "index", ".", "float", "(", ")", "\n", "batch_m", "=", "torch", ".", "matmul", "(", "self", ".", "m_list", "[", "None", ",", ":", "]", ",", "index_float", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "\n", "batch_m", "=", "batch_m", ".", "view", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "x_m", "=", "x", "-", "batch_m", "*", "self", ".", "s", "\n", "\n", "final_output", "=", "torch", ".", "where", "(", "index", ",", "x_m", ",", "x", ")", "\n", "return", "final_output", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELoss.forward": [[440, 473], ["loss.RIDELoss.base_loss", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "loss.RIDELoss.get_final_output", "diversity_temperature.mean().item", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.softmax", "torch.softmax", "torch.softmax", "torch.kl_div", "torch.kl_div", "torch.kl_div", "loss.RIDELoss.base_loss", "loss.RIDELoss.base_loss", "loss.RIDELoss.per_cls_weights_diversity.view", "diversity_temperature.mean"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.ListSimpleLoss.get_final_output"], ["", "def", "forward", "(", "self", ",", "output_logits", ",", "target", ",", "extra_info", "=", "None", ")", ":", "\n", "        ", "if", "extra_info", "is", "None", ":", "\n", "            ", "return", "self", ".", "base_loss", "(", "output_logits", ",", "target", ")", "\n", "\n", "", "loss", "=", "0", "\n", "\n", "# Adding RIDE Individual Loss for each expert", "\n", "for", "logits_item", "in", "extra_info", "[", "'logits'", "]", ":", "\n", "#ride_loss_logits = output_logits if self.additional_diversity_factor == 0 else logits_item", "\n", "            ", "ride_loss_logits", "=", "logits_item", "\n", "if", "self", ".", "m_list", "is", "None", ":", "\n", "                ", "loss", "+=", "self", ".", "base_loss_factor", "*", "self", ".", "base_loss", "(", "ride_loss_logits", ",", "target", ")", "\n", "", "else", ":", "\n", "                ", "final_output", "=", "self", ".", "get_final_output", "(", "ride_loss_logits", ",", "target", ")", "\n", "loss", "+=", "self", ".", "base_loss_factor", "*", "self", ".", "base_loss", "(", "final_output", ",", "target", ",", "weight", "=", "self", ".", "per_cls_weights_base", ")", "\n", "\n", "", "base_diversity_temperature", "=", "self", ".", "base_diversity_temperature", "\n", "\n", "if", "self", ".", "per_cls_weights_diversity", "is", "not", "None", ":", "\n", "                ", "diversity_temperature", "=", "base_diversity_temperature", "*", "self", ".", "per_cls_weights_diversity", ".", "view", "(", "(", "1", ",", "-", "1", ")", ")", "\n", "temperature_mean", "=", "diversity_temperature", ".", "mean", "(", ")", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "                ", "diversity_temperature", "=", "base_diversity_temperature", "\n", "temperature_mean", "=", "base_diversity_temperature", "\n", "\n", "", "output_dist", "=", "F", ".", "log_softmax", "(", "logits_item", "/", "diversity_temperature", ",", "dim", "=", "1", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Using the mean takes only linear instead of quadratic time in computing and has only a slight difference so using the mean is preferred here", "\n", "                ", "mean_output_dist", "=", "F", ".", "softmax", "(", "output_logits", "/", "diversity_temperature", ",", "dim", "=", "1", ")", "\n", "\n", "", "loss", "+=", "self", ".", "additional_diversity_factor", "*", "temperature_mean", "*", "temperature_mean", "*", "F", ".", "kl_div", "(", "output_dist", ",", "mean_output_dist", ",", "reduction", "=", "'batchmean'", ")", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.SimpleLoss.__init__": [[476, 521], ["torch.Module.__init__", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "len", "numpy.all", "numpy.sqrt", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.array", "numpy.sum", "numpy.max", "numpy.sqrt", "numpy.max", "numpy.power", "numpy.array", "len", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max"], ["    ", "def", "__init__", "(", "self", ",", "cls_num_list", "=", "None", ",", "max_m", "=", "0.5", ",", "s", "=", "30", ",", "reweight", "=", "True", ",", "reweight_epoch", "=", "-", "1", ",", "\n", "base_loss_factor", "=", "1.0", ",", "reweight_factor", "=", "0.05", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "base_loss", "=", "F", ".", "cross_entropy", "\n", "self", ".", "base_loss_factor", "=", "base_loss_factor", "\n", "if", "not", "reweight", ":", "\n", "            ", "self", ".", "reweight_epoch", "=", "-", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "reweight_epoch", "=", "reweight_epoch", "\n", "\n", "# LDAM is a variant of cross entropy and we handle it with self.m_list.", "\n", "", "if", "cls_num_list", "is", "None", ":", "\n", "# No cls_num_list is provided, then we cannot adjust cross entropy with LDAM.", "\n", "\n", "            ", "self", ".", "m_list", "=", "None", "\n", "self", ".", "per_cls_weights_enabled", "=", "None", "\n", "", "else", ":", "\n", "# We will use LDAM loss if we provide cls_num_list.", "\n", "\n", "            ", "m_list", "=", "1.0", "/", "np", ".", "sqrt", "(", "np", ".", "sqrt", "(", "cls_num_list", ")", ")", "\n", "m_list", "=", "m_list", "*", "(", "max_m", "/", "np", ".", "max", "(", "m_list", ")", ")", "\n", "m_list", "=", "torch", ".", "tensor", "(", "m_list", ",", "dtype", "=", "torch", ".", "float", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "m_list", "=", "m_list", "\n", "self", ".", "s", "=", "s", "\n", "assert", "s", ">", "0", "\n", "\n", "if", "reweight_epoch", "!=", "-", "1", ":", "\n", "                ", "idx", "=", "1", "# condition could be put in order to set idx", "\n", "betas", "=", "[", "0", ",", "0.9999", "]", "\n", "effective_num", "=", "1.0", "-", "np", ".", "power", "(", "betas", "[", "idx", "]", ",", "cls_num_list", ")", "\n", "per_cls_weights", "=", "(", "1.0", "-", "betas", "[", "idx", "]", ")", "/", "np", ".", "array", "(", "effective_num", ")", "\n", "per_cls_weights", "=", "per_cls_weights", "/", "np", ".", "sum", "(", "per_cls_weights", ")", "*", "len", "(", "cls_num_list", ")", "\n", "self", ".", "per_cls_weights_enabled", "=", "torch", ".", "tensor", "(", "per_cls_weights", ",", "dtype", "=", "torch", ".", "float", ",", "requires_grad", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "per_cls_weights_enabled", "=", "None", "\n", "\n", "", "cls_num_list", "=", "np", ".", "array", "(", "cls_num_list", ")", "/", "np", ".", "sum", "(", "cls_num_list", ")", "\n", "C", "=", "len", "(", "cls_num_list", ")", "\n", "per_cls_weights", "=", "C", "*", "cls_num_list", "*", "reweight_factor", "+", "1", "-", "reweight_factor", "\n", "\n", "# Experimental normalization: This is for easier hyperparam tuning, the effect can be described in the learning rate so the math formulation keeps the same.", "\n", "# At the same time, the 1 - max trick that was previously used is not required since weights are already adjusted.", "\n", "per_cls_weights", "=", "per_cls_weights", "/", "np", ".", "max", "(", "per_cls_weights", ")", "\n", "\n", "assert", "np", ".", "all", "(", "per_cls_weights", ">", "0", ")", ",", "\"reweight factor is too large: out of bounds\"", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.SimpleLoss.to": [[523, 532], ["super().to", "loss.SimpleLoss.m_list.to", "loss.SimpleLoss.per_cls_weights_enabled.to"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to"], ["", "", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "super", "(", ")", ".", "to", "(", "device", ")", "\n", "if", "self", ".", "m_list", "is", "not", "None", ":", "\n", "            ", "self", ".", "m_list", "=", "self", ".", "m_list", ".", "to", "(", "device", ")", "\n", "\n", "", "if", "self", ".", "per_cls_weights_enabled", "is", "not", "None", ":", "\n", "            ", "self", ".", "per_cls_weights_enabled", "=", "self", ".", "per_cls_weights_enabled", ".", "to", "(", "device", ")", "\n", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.SimpleLoss._hook_before_epoch": [[533, 541], ["None"], "methods", ["None"], ["", "def", "_hook_before_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "if", "self", ".", "reweight_epoch", "!=", "-", "1", ":", "\n", "            ", "self", ".", "epoch", "=", "epoch", "\n", "\n", "if", "epoch", ">", "self", ".", "reweight_epoch", ":", "\n", "                ", "self", ".", "per_cls_weights_base", "=", "self", ".", "per_cls_weights_enabled", "\n", "", "else", ":", "\n", "                ", "self", ".", "per_cls_weights_base", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.SimpleLoss.get_final_output": [[542, 559], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.zeros_like.float", "torch.zeros_like.float", "torch.zeros_like.float", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "batch_m.view.view.view", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "output_logits.size", "target.size", "target.data.view", "torch.zeros_like.float.transpose"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size"], ["", "", "", "def", "get_final_output", "(", "self", ",", "output_logits", ",", "target", ")", ":", "\n", "        ", "if", "output_logits", ".", "size", "(", ")", "==", "target", ".", "size", "(", ")", ":", "\n", "            ", "return", "output_logits", "\n", "\n", "", "x", "=", "output_logits", "\n", "\n", "index", "=", "torch", ".", "zeros_like", "(", "x", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "x", ".", "device", ")", "\n", "index", ".", "scatter_", "(", "1", ",", "target", ".", "data", ".", "view", "(", "-", "1", ",", "1", ")", ",", "1", ")", "\n", "\n", "index_float", "=", "index", ".", "float", "(", ")", "\n", "batch_m", "=", "torch", ".", "matmul", "(", "self", ".", "m_list", "[", "None", ",", ":", "]", ",", "index_float", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "\n", "batch_m", "=", "batch_m", ".", "view", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "x_m", "=", "x", "-", "batch_m", "*", "self", ".", "s", "\n", "\n", "final_output", "=", "torch", ".", "where", "(", "index", ",", "x_m", ",", "x", ")", "\n", "return", "final_output", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.SimpleLoss.forward": [[560, 585], ["isinstance", "loss.SimpleLoss.base_loss", "zip", "loss.SimpleLoss.get_final_output", "loss.SimpleLoss.get_final_output", "loss.SimpleLoss.base_loss", "loss.SimpleLoss.base_loss", "loss.SimpleLoss.base_loss", "loss.SimpleLoss.base_loss"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.ListSimpleLoss.get_final_output", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.ListSimpleLoss.get_final_output"], ["", "def", "forward", "(", "self", ",", "output_logits", ",", "target", ",", "extra_info", "=", "None", ")", ":", "\n", "        ", "if", "extra_info", "is", "None", ":", "\n", "            ", "return", "self", ".", "base_loss", "(", "output_logits", ",", "target", ")", "\n", "\n", "", "loss", "=", "0", "\n", "\n", "# Adding RIDE Individual Loss for each expert", "\n", "if", "isinstance", "(", "target", ",", "list", ")", ":", "\n", "             ", "for", "logits_item", ",", "target_item", "in", "zip", "(", "extra_info", "[", "'logits'", "]", ",", "target", ")", ":", "\n", "                ", "ride_loss_logits", "=", "logits_item", "\n", "if", "self", ".", "m_list", "is", "None", ":", "\n", "                    ", "loss", "+=", "self", ".", "base_loss_factor", "*", "self", ".", "base_loss", "(", "ride_loss_logits", ",", "target_item", ")", "\n", "", "else", ":", "\n", "                    ", "final_output", "=", "self", ".", "get_final_output", "(", "ride_loss_logits", ",", "target_item", ")", "\n", "loss", "+=", "self", ".", "base_loss_factor", "*", "self", ".", "base_loss", "(", "final_output", ",", "target_item", ",", "weight", "=", "self", ".", "per_cls_weights_base", ")", "\n", "", "", "", "else", ":", "\n", "\n", "            ", "for", "logits_item", "in", "extra_info", "[", "'logits'", "]", ":", "\n", "                ", "ride_loss_logits", "=", "logits_item", "\n", "if", "self", ".", "m_list", "is", "None", ":", "\n", "                    ", "loss", "+=", "self", ".", "base_loss_factor", "*", "self", ".", "base_loss", "(", "ride_loss_logits", ",", "target", ")", "\n", "", "else", ":", "\n", "                    ", "final_output", "=", "self", ".", "get_final_output", "(", "ride_loss_logits", ",", "target", ")", "\n", "loss", "+=", "self", ".", "base_loss_factor", "*", "self", ".", "base_loss", "(", "final_output", ",", "target", ",", "weight", "=", "self", ".", "per_cls_weights_base", ")", "\n", "", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.ListSimpleLoss.__init__": [[588, 633], ["torch.Module.__init__", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "len", "numpy.all", "numpy.sqrt", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.array", "numpy.sum", "numpy.max", "numpy.sqrt", "numpy.max", "numpy.power", "numpy.array", "len", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max"], ["    ", "def", "__init__", "(", "self", ",", "cls_num_list", "=", "None", ",", "max_m", "=", "0.5", ",", "s", "=", "30", ",", "reweight", "=", "True", ",", "reweight_epoch", "=", "-", "1", ",", "\n", "base_loss_factor", "=", "1.0", ",", "reweight_factor", "=", "0.05", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "base_loss", "=", "F", ".", "cross_entropy", "\n", "self", ".", "base_loss_factor", "=", "base_loss_factor", "\n", "if", "not", "reweight", ":", "\n", "            ", "self", ".", "reweight_epoch", "=", "-", "1", "\n", "", "else", ":", "\n", "            ", "self", ".", "reweight_epoch", "=", "reweight_epoch", "\n", "\n", "# LDAM is a variant of cross entropy and we handle it with self.m_list.", "\n", "", "if", "cls_num_list", "is", "None", ":", "\n", "# No cls_num_list is provided, then we cannot adjust cross entropy with LDAM.", "\n", "\n", "            ", "self", ".", "m_list", "=", "None", "\n", "self", ".", "per_cls_weights_enabled", "=", "None", "\n", "", "else", ":", "\n", "# We will use LDAM loss if we provide cls_num_list.", "\n", "\n", "            ", "m_list", "=", "1.0", "/", "np", ".", "sqrt", "(", "np", ".", "sqrt", "(", "cls_num_list", ")", ")", "\n", "m_list", "=", "m_list", "*", "(", "max_m", "/", "np", ".", "max", "(", "m_list", ")", ")", "\n", "m_list", "=", "torch", ".", "tensor", "(", "m_list", ",", "dtype", "=", "torch", ".", "float", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "m_list", "=", "m_list", "\n", "self", ".", "s", "=", "s", "\n", "assert", "s", ">", "0", "\n", "\n", "if", "reweight_epoch", "!=", "-", "1", ":", "\n", "                ", "idx", "=", "1", "# condition could be put in order to set idx", "\n", "betas", "=", "[", "0", ",", "0.9999", "]", "\n", "effective_num", "=", "1.0", "-", "np", ".", "power", "(", "betas", "[", "idx", "]", ",", "cls_num_list", ")", "\n", "per_cls_weights", "=", "(", "1.0", "-", "betas", "[", "idx", "]", ")", "/", "np", ".", "array", "(", "effective_num", ")", "\n", "per_cls_weights", "=", "per_cls_weights", "/", "np", ".", "sum", "(", "per_cls_weights", ")", "*", "len", "(", "cls_num_list", ")", "\n", "self", ".", "per_cls_weights_enabled", "=", "torch", ".", "tensor", "(", "per_cls_weights", ",", "dtype", "=", "torch", ".", "float", ",", "requires_grad", "=", "False", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "per_cls_weights_enabled", "=", "None", "\n", "\n", "", "cls_num_list", "=", "np", ".", "array", "(", "cls_num_list", ")", "/", "np", ".", "sum", "(", "cls_num_list", ")", "\n", "C", "=", "len", "(", "cls_num_list", ")", "\n", "per_cls_weights", "=", "C", "*", "cls_num_list", "*", "reweight_factor", "+", "1", "-", "reweight_factor", "\n", "\n", "# Experimental normalization: This is for easier hyperparam tuning, the effect can be described in the learning rate so the math formulation keeps the same.", "\n", "# At the same time, the 1 - max trick that was previously used is not required since weights are already adjusted.", "\n", "per_cls_weights", "=", "per_cls_weights", "/", "np", ".", "max", "(", "per_cls_weights", ")", "\n", "\n", "assert", "np", ".", "all", "(", "per_cls_weights", ">", "0", ")", ",", "\"reweight factor is too large: out of bounds\"", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.ListSimpleLoss.to": [[635, 644], ["super().to", "loss.ListSimpleLoss.m_list.to", "loss.ListSimpleLoss.per_cls_weights_enabled.to"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to"], ["", "", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "super", "(", ")", ".", "to", "(", "device", ")", "\n", "if", "self", ".", "m_list", "is", "not", "None", ":", "\n", "            ", "self", ".", "m_list", "=", "self", ".", "m_list", ".", "to", "(", "device", ")", "\n", "\n", "", "if", "self", ".", "per_cls_weights_enabled", "is", "not", "None", ":", "\n", "            ", "self", ".", "per_cls_weights_enabled", "=", "self", ".", "per_cls_weights_enabled", ".", "to", "(", "device", ")", "\n", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.ListSimpleLoss._hook_before_epoch": [[645, 653], ["None"], "methods", ["None"], ["", "def", "_hook_before_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "if", "self", ".", "reweight_epoch", "!=", "-", "1", ":", "\n", "            ", "self", ".", "epoch", "=", "epoch", "\n", "\n", "if", "epoch", ">", "self", ".", "reweight_epoch", ":", "\n", "                ", "self", ".", "per_cls_weights_base", "=", "self", ".", "per_cls_weights_enabled", "\n", "", "else", ":", "\n", "                ", "self", ".", "per_cls_weights_base", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.ListSimpleLoss.get_final_output": [[654, 671], ["torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.zeros_like.scatter_", "torch.zeros_like.float", "torch.zeros_like.float", "torch.zeros_like.float", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "batch_m.view.view.view", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "output_logits.size", "target.size", "target.data.view", "torch.zeros_like.float.transpose"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size"], ["", "", "", "def", "get_final_output", "(", "self", ",", "output_logits", ",", "target", ")", ":", "\n", "        ", "if", "output_logits", ".", "size", "(", ")", "==", "target", ".", "size", "(", ")", ":", "\n", "            ", "return", "output_logits", "\n", "\n", "", "x", "=", "output_logits", "\n", "\n", "index", "=", "torch", ".", "zeros_like", "(", "x", ",", "dtype", "=", "torch", ".", "uint8", ",", "device", "=", "x", ".", "device", ")", "\n", "index", ".", "scatter_", "(", "1", ",", "target", ".", "data", ".", "view", "(", "-", "1", ",", "1", ")", ",", "1", ")", "\n", "\n", "index_float", "=", "index", ".", "float", "(", ")", "\n", "batch_m", "=", "torch", ".", "matmul", "(", "self", ".", "m_list", "[", "None", ",", ":", "]", ",", "index_float", ".", "transpose", "(", "0", ",", "1", ")", ")", "\n", "\n", "batch_m", "=", "batch_m", ".", "view", "(", "(", "-", "1", ",", "1", ")", ")", "\n", "x_m", "=", "x", "-", "batch_m", "*", "self", ".", "s", "\n", "\n", "final_output", "=", "torch", ".", "where", "(", "index", ",", "x_m", ",", "x", ")", "\n", "return", "final_output", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.ListSimpleLoss.forward": [[672, 704], ["isinstance", "loss.ListSimpleLoss.base_loss", "zip", "loss.ListSimpleLoss.get_final_output", "loss.ListSimpleLoss.get_final_output", "loss.ListSimpleLoss.base_loss", "loss.ListSimpleLoss.base_loss", "loss.ListSimpleLoss.per_cls_weights_base[].mean", "loss.ListSimpleLoss.base_loss", "loss.ListSimpleLoss.per_cls_weights_base[].mean", "loss.ListSimpleLoss.base_loss", "loss.ListSimpleLoss.base_loss", "loss.ListSimpleLoss.base_loss"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.ListSimpleLoss.get_final_output", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.ListSimpleLoss.get_final_output"], ["", "def", "forward", "(", "self", ",", "output_logits", ",", "target", ",", "extra_info", "=", "None", ")", ":", "\n", "        ", "if", "extra_info", "is", "None", ":", "\n", "            ", "return", "self", ".", "base_loss", "(", "output_logits", ",", "target", ")", "\n", "\n", "", "loss", "=", "0", "\n", "\n", "# Adding RIDE Individual Loss for each expert", "\n", "if", "isinstance", "(", "target", ",", "list", ")", ":", "\n", "             ", "for", "logits_item", ",", "target_item", "in", "zip", "(", "extra_info", "[", "'logits'", "]", ",", "target", ")", ":", "\n", "                ", "ride_loss_logits", "=", "logits_item", "\n", "if", "self", ".", "m_list", "is", "None", ":", "\n", "                    ", "loss", "+=", "self", ".", "base_loss_factor", "*", "self", ".", "base_loss", "(", "ride_loss_logits", ",", "target_item", ",", "reduction", "=", "\"none\"", ")", "\n", "", "else", ":", "\n", "                    ", "final_output", "=", "self", ".", "get_final_output", "(", "ride_loss_logits", ",", "target_item", ")", "\n", "if", "self", ".", "per_cls_weights_base", "is", "not", "None", ":", "\n", "                        ", "loss", "+=", "self", ".", "base_loss_factor", "*", "self", ".", "base_loss", "(", "final_output", ",", "target_item", ",", "weight", "=", "self", ".", "per_cls_weights_base", ",", "reduction", "=", "\"none\"", ")", "/", "self", ".", "per_cls_weights_base", "[", "target_item", "]", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "                        ", "loss", "+=", "self", ".", "base_loss_factor", "*", "self", ".", "base_loss", "(", "final_output", ",", "target_item", ",", "weight", "=", "self", ".", "per_cls_weights_base", ",", "reduction", "=", "\"none\"", ")", "\n", "", "", "", "", "else", ":", "\n", "\n", "            ", "for", "logits_item", "in", "extra_info", "[", "'logits'", "]", ":", "\n", "                ", "ride_loss_logits", "=", "logits_item", "\n", "\n", "if", "self", ".", "m_list", "is", "None", ":", "\n", "                    ", "loss", "+=", "self", ".", "base_loss_factor", "*", "self", ".", "base_loss", "(", "ride_loss_logits", ",", "target", ",", "reduction", "=", "\"none\"", ")", "\n", "", "else", ":", "\n", "                    ", "final_output", "=", "self", ".", "get_final_output", "(", "ride_loss_logits", ",", "target", ")", "\n", "if", "self", ".", "per_cls_weights_base", "is", "not", "None", ":", "\n", "                        ", "loss", "+=", "self", ".", "base_loss_factor", "*", "self", ".", "base_loss", "(", "final_output", ",", "target", ",", "weight", "=", "self", ".", "per_cls_weights_base", ",", "reduction", "=", "\"none\"", ")", "/", "self", ".", "per_cls_weights_base", "[", "target", "]", ".", "mean", "(", ")", "\n", "", "else", ":", "\n", "                        ", "loss", "+=", "self", ".", "base_loss_factor", "*", "self", ".", "base_loss", "(", "final_output", ",", "target", ",", "weight", "=", "self", ".", "per_cls_weights_base", ",", "reduction", "=", "\"none\"", ")", "\n", "", "", "", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.SimplexERMLoss.__init__": [[706, 720], ["torch.Module.__init__", "print", "loss.ListSimpleLoss", "loss.ListSimpleLoss", "loss.KD"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "T", "=", "1", ",", "gamma", "=", "1", ",", "cls_num_list", "=", "None", ",", "max_m", "=", "0.5", ",", "s", "=", "30", ",", "reweight", "=", "True", ",", "reweight_epoch", "=", "-", "1", ",", "\n", "base_loss_factor", "=", "1.0", ",", "reweight_factor", "=", "0.05", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "print", "(", "'=> init xERMLoss'", ")", "\n", "self", ".", "gamma", "=", "gamma", "\n", "\n", "self", ".", "imbalanced_loss", "=", "ListSimpleLoss", "(", "cls_num_list", ",", "max_m", ",", "s", ",", "reweight", ",", "200", ",", "\n", "base_loss_factor", ",", "reweight_factor", ")", "\n", "\n", "self", ".", "balanced_loss", "=", "ListSimpleLoss", "(", "cls_num_list", ",", "max_m", ",", "s", ",", "reweight", ",", "reweight_epoch", ",", "\n", "base_loss_factor", ",", "reweight_factor", ")", "\n", "\n", "kd", "=", "KD", "(", "T", "=", "T", ")", "\n", "self", ".", "balanced_loss", ".", "base_loss", "=", "kd", ".", "KL", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.SimplexERMLoss.to": [[722, 728], ["super().to", "loss.SimplexERMLoss.balanced_loss.to", "loss.SimplexERMLoss.imbalanced_loss.to"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "super", "(", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "balanced_loss", ".", "to", "(", "device", ")", "\n", "self", ".", "imbalanced_loss", ".", "to", "(", "device", ")", "\n", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.SimplexERMLoss.cal_xERM_weight": [[729, 743], ["torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.cross_entropy", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["", "def", "cal_xERM_weight", "(", "self", ",", "logits_CF", ",", "logits_F", ",", "labels", ")", ":", "\n", "        ", "logits_CF", "=", "torch", ".", "stack", "(", "logits_CF", ",", "dim", "=", "1", ")", ".", "mean", "(", "dim", "=", "1", ")", "\n", "logits_F", "=", "torch", ".", "stack", "(", "logits_F", ",", "dim", "=", "1", ")", ".", "mean", "(", "dim", "=", "1", ")", "\n", "XE_CF", "=", "F", ".", "cross_entropy", "(", "logits_CF", ",", "labels", ",", "reduction", "=", "'none'", ")", "\n", "XE_F", "=", "F", ".", "cross_entropy", "(", "logits_F", ",", "labels", ",", "reduction", "=", "'none'", ")", "\n", "\n", "XE_CF", "=", "torch", ".", "pow", "(", "XE_CF", ",", "self", ".", "gamma", ")", "\n", "XE_F", "=", "torch", ".", "pow", "(", "XE_F", ",", "self", ".", "gamma", ")", "\n", "\n", "w_cf", "=", "XE_CF", "/", "(", "XE_CF", "+", "XE_F", "+", "1e-5", ")", "\n", "\n", "w_f", "=", "1", "-", "w_cf", "\n", "\n", "return", "w_cf", ",", "w_f", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.SimplexERMLoss._hook_before_epoch": [[744, 747], ["loss.SimplexERMLoss.balanced_loss._hook_before_epoch", "loss.SimplexERMLoss.imbalanced_loss._hook_before_epoch"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill._hook_before_epoch", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill._hook_before_epoch"], ["", "def", "_hook_before_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "balanced_loss", ".", "_hook_before_epoch", "(", "epoch", ")", "\n", "self", ".", "imbalanced_loss", ".", "_hook_before_epoch", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.SimplexERMLoss.forward": [[749, 756], ["loss.SimplexERMLoss.imbalanced_loss", "loss.SimplexERMLoss.balanced_loss", "loss.SimplexERMLoss.cal_xERM_weight"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.SimplexERMLoss.cal_xERM_weight"], ["", "def", "forward", "(", "self", ",", "output_logits", ",", "balanced_logits", ",", "imbalanced_logits", ",", "target", ",", "extra_info", "=", "None", ")", ":", "\n", "        ", "loss_f", "=", "self", ".", "imbalanced_loss", "(", "output_logits", ",", "target", ",", "extra_info", ")", "\n", "loss_cf", "=", "self", ".", "balanced_loss", "(", "output_logits", ",", "balanced_logits", ",", "extra_info", ")", "\n", "\n", "w_cf", ",", "w_f", "=", "self", ".", "cal_xERM_weight", "(", "balanced_logits", ",", "imbalanced_logits", ",", "target", ")", "\n", "\n", "return", "(", "loss_f", "*", "w_f", ")", ".", "mean", "(", ")", "+", "(", "loss_cf", "*", "w_cf", ")", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.__init__": [[759, 766], ["torch.Module.__init__", "loss.RIDELoss"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "cls_num_list", "=", "None", ",", "additional_distill_loss_factor", "=", "1.0", ",", "distill_temperature", "=", "1.0", ",", "ride_loss_factor", "=", "1.0", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ride_loss", "=", "RIDELoss", "(", "cls_num_list", "=", "cls_num_list", ",", "**", "kwargs", ")", "\n", "self", ".", "distill_temperature", "=", "distill_temperature", "\n", "\n", "self", ".", "ride_loss_factor", "=", "ride_loss_factor", "\n", "self", ".", "additional_distill_loss_factor", "=", "additional_distill_loss_factor", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to": [[767, 771], ["super().to", "loss.RIDELossWithDistill.ride_loss.to"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to"], ["", "def", "to", "(", "self", ",", "device", ")", ":", "\n", "        ", "super", "(", ")", ".", "to", "(", "device", ")", "\n", "self", ".", "ride_loss", "=", "self", ".", "ride_loss", ".", "to", "(", "device", ")", "\n", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill._hook_before_epoch": [[772, 774], ["loss.RIDELossWithDistill.ride_loss._hook_before_epoch"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill._hook_before_epoch"], ["", "def", "_hook_before_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "self", ".", "ride_loss", ".", "_hook_before_epoch", "(", "epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.forward": [[775, 794], ["len", "loss.RIDELossWithDistill.ride_loss", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "torch.kl_div", "torch.kl_div", "torch.kl_div", "loss.RIDELossWithDistill.ride_loss", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "student", ",", "target", "=", "None", ",", "teacher", "=", "None", ",", "extra_info", "=", "None", ")", ":", "\n", "        ", "output_logits", "=", "student", "\n", "if", "extra_info", "is", "None", ":", "\n", "            ", "return", "self", ".", "ride_loss", "(", "output_logits", ",", "target", ")", "\n", "\n", "", "loss", "=", "0", "\n", "num_experts", "=", "len", "(", "extra_info", "[", "'logits'", "]", ")", "\n", "for", "logits_item", "in", "extra_info", "[", "'logits'", "]", ":", "\n", "            ", "loss", "+=", "self", ".", "ride_loss_factor", "*", "self", ".", "ride_loss", "(", "output_logits", ",", "target", ",", "extra_info", ")", "\n", "distill_temperature", "=", "self", ".", "distill_temperature", "\n", "\n", "student_dist", "=", "F", ".", "log_softmax", "(", "student", "/", "distill_temperature", ",", "dim", "=", "1", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "teacher_dist", "=", "F", ".", "softmax", "(", "teacher", "/", "distill_temperature", ",", "dim", "=", "1", ")", "\n", "\n", "", "distill_loss", "=", "F", ".", "kl_div", "(", "student_dist", ",", "teacher_dist", ",", "reduction", "=", "'batchmean'", ")", "\n", "distill_loss", "=", "distill_temperature", "*", "distill_temperature", "*", "distill_loss", "\n", "loss", "+=", "self", ".", "additional_distill_loss_factor", "*", "distill_loss", "\n", "", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.focal_loss": [[16, 21], ["torch.exp", "torch.exp", "torch.exp", "loss.mean"], "function", ["None"], ["def", "focal_loss", "(", "input_values", ",", "gamma", ")", ":", "\n", "    ", "\"\"\"Computes the focal loss\"\"\"", "\n", "p", "=", "torch", ".", "exp", "(", "-", "input_values", ")", "\n", "loss", "=", "(", "1", "-", "p", ")", "**", "gamma", "*", "input_values", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.model.Model.__init__": [[18, 22], ["base.BaseModel.__init__", "backbone_class"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", ",", "backbone_class", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "backbone_class", "is", "not", "None", ":", "# Do not init backbone here if None", "\n", "            ", "self", ".", "backbone", "=", "backbone_class", "(", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.model.Model._hook_before_iter": [[23, 25], ["model.Model.backbone._hook_before_iter"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.resnet_cifar.ResNet_s._hook_before_iter"], ["", "", "def", "_hook_before_iter", "(", "self", ")", ":", "\n", "        ", "self", ".", "backbone", ".", "_hook_before_iter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.model.Model.forward": [[26, 31], ["model.Model.backbone"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mode", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "backbone", "(", "x", ")", "\n", "\n", "assert", "mode", "is", "None", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.model.EAModel.__init__": [[36, 40], ["base.BaseModel.__init__", "backbone_class"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["def", "__init__", "(", "self", ",", "num_classes", ",", "backbone_class", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "backbone_class", "is", "not", "None", ":", "# Do not init backbone here if None", "\n", "            ", "self", ".", "backbone", "=", "backbone_class", "(", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.model.EAModel._hook_before_iter": [[41, 43], ["model.EAModel.backbone._hook_before_iter"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.resnet_cifar.ResNet_s._hook_before_iter"], ["", "", "def", "_hook_before_iter", "(", "self", ")", ":", "\n", "        ", "self", ".", "backbone", ".", "_hook_before_iter", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.model.EAModel.forward": [[44, 51], ["model.EAModel.backbone", "isinstance"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "mode", "=", "None", ",", "target", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "backbone", "(", "x", ",", "target", "=", "target", ")", "\n", "\n", "assert", "isinstance", "(", "x", ",", "tuple", ")", "# logits, extra_info", "\n", "assert", "mode", "is", "None", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.model.ResNet10Model.__init__": [[53, 59], ["model.Model.__init__", "fb_resnets.ResNet.ResNet", "fb_resnets.RIDEResNet.ResNet"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "reduce_dimension", "=", "False", ",", "layer3_output_dim", "=", "None", ",", "layer4_output_dim", "=", "None", ",", "use_norm", "=", "False", ",", "num_experts", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_classes", ",", "None", ")", "\n", "if", "num_experts", "==", "1", ":", "\n", "            ", "self", ".", "backbone", "=", "ResNet", ".", "ResNet", "(", "ResNet", ".", "BasicBlock", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "dropout", "=", "None", ",", "num_classes", "=", "num_classes", ",", "use_norm", "=", "use_norm", ",", "reduce_dimension", "=", "reduce_dimension", ",", "layer3_output_dim", "=", "layer3_output_dim", ",", "layer4_output_dim", "=", "layer4_output_dim", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "backbone", "=", "RIDEResNet", ".", "ResNet", "(", "ResNet", ".", "BasicBlock", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "dropout", "=", "None", ",", "num_classes", "=", "num_classes", ",", "use_norm", "=", "use_norm", ",", "reduce_dimension", "=", "reduce_dimension", ",", "layer3_output_dim", "=", "layer3_output_dim", ",", "layer4_output_dim", "=", "layer4_output_dim", ",", "num_experts", "=", "num_experts", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.model.ResNet10EAModel.__init__": [[61, 64], ["model.EAModel.__init__", "fb_resnets.EAResNet.ResNet"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "reduce_dimension", "=", "False", ",", "layer3_output_dim", "=", "None", ",", "layer4_output_dim", "=", "None", ",", "num_experts", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_classes", ",", "None", ")", "\n", "self", ".", "backbone", "=", "EAResNet", ".", "ResNet", "(", "EAResNet", ".", "BasicBlock", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "dropout", "=", "None", ",", "num_classes", "=", "num_classes", ",", "reduce_dimension", "=", "reduce_dimension", ",", "layer3_output_dim", "=", "layer3_output_dim", ",", "layer4_output_dim", "=", "layer4_output_dim", ",", "num_experts", "=", "num_experts", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.model.ResNet32Model.__init__": [[66, 72], ["model.Model.__init__", "ldam_drw_resnets.resnet_cifar.ResNet_s", "ldam_drw_resnets.ride_resnet_cifar.ResNet_s"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "reduce_dimension", "=", "False", ",", "layer2_output_dim", "=", "None", ",", "layer3_output_dim", "=", "None", ",", "use_norm", "=", "False", ",", "num_experts", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_classes", ",", "None", ")", "\n", "if", "num_experts", "==", "1", ":", "\n", "            ", "self", ".", "backbone", "=", "resnet_cifar", ".", "ResNet_s", "(", "resnet_cifar", ".", "BasicBlock", ",", "[", "5", ",", "5", ",", "5", "]", ",", "num_classes", "=", "num_classes", ",", "reduce_dimension", "=", "reduce_dimension", ",", "layer2_output_dim", "=", "layer2_output_dim", ",", "layer3_output_dim", "=", "layer3_output_dim", ",", "use_norm", "=", "use_norm", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "backbone", "=", "ride_resnet_cifar", ".", "ResNet_s", "(", "ride_resnet_cifar", ".", "BasicBlock", ",", "[", "5", ",", "5", ",", "5", "]", ",", "num_classes", "=", "num_classes", ",", "reduce_dimension", "=", "reduce_dimension", ",", "layer2_output_dim", "=", "layer2_output_dim", ",", "layer3_output_dim", "=", "layer3_output_dim", ",", "use_norm", "=", "use_norm", ",", "num_experts", "=", "num_experts", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.model.ResNet32EAModel.__init__": [[74, 77], ["model.EAModel.__init__", "ldam_drw_resnets.ea_resnet_cifar.ResNet_s"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "reduce_dimension", "=", "False", ",", "layer2_output_dim", "=", "None", ",", "layer3_output_dim", "=", "None", ",", "num_experts", "=", "2", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_classes", ",", "None", ")", "\n", "self", ".", "backbone", "=", "ea_resnet_cifar", ".", "ResNet_s", "(", "ea_resnet_cifar", ".", "BasicBlock", ",", "[", "5", ",", "5", ",", "5", "]", ",", "num_classes", "=", "num_classes", ",", "reduce_dimension", "=", "reduce_dimension", ",", "layer2_output_dim", "=", "layer2_output_dim", ",", "layer3_output_dim", "=", "layer3_output_dim", ",", "num_experts", "=", "num_experts", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.model.ResNet50Model.__init__": [[79, 85], ["model.Model.__init__", "fb_resnets.ResNet.ResNet", "fb_resnets.RIDEResNet.ResNet"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "reduce_dimension", "=", "False", ",", "layer3_output_dim", "=", "None", ",", "layer4_output_dim", "=", "None", ",", "use_norm", "=", "False", ",", "num_experts", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_classes", ",", "None", ")", "\n", "if", "num_experts", "==", "1", ":", "\n", "            ", "self", ".", "backbone", "=", "ResNet", ".", "ResNet", "(", "ResNet", ".", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "dropout", "=", "None", ",", "num_classes", "=", "num_classes", ",", "reduce_dimension", "=", "reduce_dimension", ",", "layer3_output_dim", "=", "layer3_output_dim", ",", "layer4_output_dim", "=", "layer4_output_dim", ",", "use_norm", "=", "use_norm", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "backbone", "=", "RIDEResNet", ".", "ResNet", "(", "RIDEResNet", ".", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "dropout", "=", "None", ",", "num_classes", "=", "num_classes", ",", "reduce_dimension", "=", "reduce_dimension", ",", "layer3_output_dim", "=", "layer3_output_dim", ",", "layer4_output_dim", "=", "layer4_output_dim", ",", "use_norm", "=", "use_norm", ",", "num_experts", "=", "num_experts", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.model.ResNet50EAModel.__init__": [[87, 91], ["model.EAModel.__init__", "fb_resnets.EAResNet.ResNet"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "reduce_dimension", "=", "False", ",", "layer3_output_dim", "=", "None", ",", "layer4_output_dim", "=", "None", ",", "num_experts", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_classes", ",", "None", ")", "\n", "assert", "num_experts", "!=", "1", "\n", "self", ".", "backbone", "=", "EAResNet", ".", "ResNet", "(", "EAResNet", ".", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "dropout", "=", "None", ",", "num_classes", "=", "num_classes", ",", "reduce_dimension", "=", "reduce_dimension", ",", "layer3_output_dim", "=", "layer3_output_dim", ",", "layer4_output_dim", "=", "layer4_output_dim", ",", "num_experts", "=", "num_experts", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.model.ResNeXt50EAModel.__init__": [[93, 97], ["model.EAModel.__init__", "fb_resnets.EAResNeXt.ResNext"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "reduce_dimension", "=", "False", ",", "layer3_output_dim", "=", "None", ",", "layer4_output_dim", "=", "None", ",", "num_experts", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_classes", ",", "None", ")", "\n", "assert", "num_experts", "!=", "1", "\n", "self", ".", "backbone", "=", "EAResNeXt", ".", "ResNext", "(", "EAResNeXt", ".", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "groups", "=", "32", ",", "width_per_group", "=", "4", ",", "dropout", "=", "None", ",", "num_classes", "=", "num_classes", ",", "reduce_dimension", "=", "reduce_dimension", ",", "layer3_output_dim", "=", "layer3_output_dim", ",", "layer4_output_dim", "=", "layer4_output_dim", ",", "num_experts", "=", "num_experts", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.model.ResNeXt50Model.__init__": [[99, 105], ["model.Model.__init__", "fb_resnets.ResNeXt.ResNext", "fb_resnets.RIDEResNeXt.ResNext"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "reduce_dimension", "=", "False", ",", "layer3_output_dim", "=", "None", ",", "layer4_output_dim", "=", "None", ",", "num_experts", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_classes", ",", "None", ")", "\n", "if", "num_experts", "==", "1", ":", "\n", "            ", "self", ".", "backbone", "=", "ResNeXt", ".", "ResNext", "(", "ResNeXt", ".", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "groups", "=", "32", ",", "width_per_group", "=", "4", ",", "dropout", "=", "None", ",", "num_classes", "=", "num_classes", ",", "reduce_dimension", "=", "reduce_dimension", ",", "layer3_output_dim", "=", "layer3_output_dim", ",", "layer4_output_dim", "=", "layer4_output_dim", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "backbone", "=", "RIDEResNeXt", ".", "ResNext", "(", "RIDEResNeXt", ".", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "groups", "=", "32", ",", "width_per_group", "=", "4", ",", "dropout", "=", "None", ",", "num_classes", "=", "num_classes", ",", "reduce_dimension", "=", "reduce_dimension", ",", "layer3_output_dim", "=", "layer3_output_dim", ",", "layer4_output_dim", "=", "layer4_output_dim", ",", "num_experts", "=", "num_experts", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.model.ResNet101Model.__init__": [[107, 113], ["model.Model.__init__", "fb_resnets.ResNet.ResNet", "fb_resnets.RIDEResNet.ResNet"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "reduce_dimension", "=", "False", ",", "layer3_output_dim", "=", "None", ",", "layer4_output_dim", "=", "None", ",", "use_norm", "=", "False", ",", "num_experts", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_classes", ",", "None", ")", "\n", "if", "num_experts", "==", "1", ":", "\n", "            ", "self", ".", "backbone", "=", "ResNet", ".", "ResNet", "(", "ResNet", ".", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "dropout", "=", "None", ",", "num_classes", "=", "num_classes", ",", "reduce_dimension", "=", "reduce_dimension", ",", "layer3_output_dim", "=", "layer3_output_dim", ",", "layer4_output_dim", "=", "layer4_output_dim", ",", "use_norm", "=", "use_norm", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "backbone", "=", "RIDEResNet", ".", "ResNet", "(", "RIDEResNet", ".", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "dropout", "=", "None", ",", "num_classes", "=", "num_classes", ",", "reduce_dimension", "=", "reduce_dimension", ",", "layer3_output_dim", "=", "layer3_output_dim", ",", "layer4_output_dim", "=", "layer4_output_dim", ",", "use_norm", "=", "use_norm", ",", "num_experts", "=", "num_experts", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.model.ResNet152Model.__init__": [[115, 121], ["model.Model.__init__", "fb_resnets.ResNet.ResNet", "fb_resnets.RIDEResNet.ResNet"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "reduce_dimension", "=", "False", ",", "layer3_output_dim", "=", "None", ",", "layer4_output_dim", "=", "None", ",", "use_norm", "=", "False", ",", "num_experts", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_classes", ",", "None", ")", "\n", "if", "num_experts", "==", "1", ":", "\n", "            ", "self", ".", "backbone", "=", "ResNet", ".", "ResNet", "(", "ResNet", ".", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "dropout", "=", "None", ",", "num_classes", "=", "num_classes", ",", "reduce_dimension", "=", "reduce_dimension", ",", "layer3_output_dim", "=", "layer3_output_dim", ",", "layer4_output_dim", "=", "layer4_output_dim", ",", "use_norm", "=", "use_norm", ",", "**", "kwargs", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "backbone", "=", "RIDEResNet", ".", "ResNet", "(", "RIDEResNet", ".", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "dropout", "=", "None", ",", "num_classes", "=", "num_classes", ",", "reduce_dimension", "=", "reduce_dimension", ",", "layer3_output_dim", "=", "layer3_output_dim", ",", "layer4_output_dim", "=", "layer4_output_dim", ",", "use_norm", "=", "use_norm", ",", "num_experts", "=", "num_experts", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.model.ResNet152EAModel.__init__": [[123, 127], ["model.EAModel.__init__", "fb_resnets.EAResNet.ResNet"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "reduce_dimension", "=", "False", ",", "layer3_output_dim", "=", "None", ",", "layer4_output_dim", "=", "None", ",", "num_experts", "=", "1", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_classes", ",", "None", ")", "\n", "assert", "num_experts", "!=", "1", "\n", "self", ".", "backbone", "=", "EAResNet", ".", "ResNet", "(", "EAResNet", ".", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "dropout", "=", "None", ",", "num_classes", "=", "num_classes", ",", "reduce_dimension", "=", "reduce_dimension", ",", "layer3_output_dim", "=", "layer3_output_dim", ",", "layer4_output_dim", "=", "layer4_output_dim", ",", "num_experts", "=", "num_experts", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.model.ResNeXt152Model.__init__": [[129, 135], ["model.Model.__init__", "fb_resnets.ResNeXt.ResNext", "fb_resnets.RIDEResNeXt.ResNext"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "reduce_dimension", "=", "False", ",", "layer3_output_dim", "=", "None", ",", "layer4_output_dim", "=", "None", ",", "num_experts", "=", "1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "num_classes", ",", "None", ")", "\n", "if", "num_experts", "==", "1", ":", "\n", "            ", "self", ".", "backbone", "=", "ResNeXt", ".", "ResNext", "(", "ResNeXt", ".", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "groups", "=", "32", ",", "width_per_group", "=", "4", ",", "dropout", "=", "None", ",", "num_classes", "=", "num_classes", ",", "reduce_dimension", "=", "reduce_dimension", ",", "layer3_output_dim", "=", "layer3_output_dim", ",", "layer4_output_dim", "=", "layer4_output_dim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "backbone", "=", "RIDEResNeXt", ".", "ResNext", "(", "RIDEResNeXt", ".", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "groups", "=", "32", ",", "width_per_group", "=", "4", ",", "dropout", "=", "None", ",", "num_classes", "=", "num_classes", ",", "reduce_dimension", "=", "reduce_dimension", ",", "layer3_output_dim", "=", "layer3_output_dim", ",", "layer4_output_dim", "=", "layer4_output_dim", ",", "num_experts", "=", "num_experts", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.metric.accuracy": [[3, 13], ["torch.no_grad", "torch.argmax", "torch.sum().item", "len", "len", "len", "torch.sum", "len"], "function", ["None"], ["def", "accuracy", "(", "output", ",", "target", ",", "return_length", "=", "False", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "pred", "=", "torch", ".", "argmax", "(", "output", ",", "dim", "=", "1", ")", "\n", "assert", "pred", ".", "shape", "[", "0", "]", "==", "len", "(", "target", ")", "\n", "correct", "=", "0", "\n", "correct", "+=", "torch", ".", "sum", "(", "pred", "==", "target", ")", ".", "item", "(", ")", "\n", "", "if", "return_length", ":", "\n", "        ", "return", "correct", "/", "len", "(", "target", ")", ",", "len", "(", "target", ")", "\n", "", "else", ":", "\n", "        ", "return", "correct", "/", "len", "(", "target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.model.metric.top_k_acc": [[14, 25], ["torch.no_grad", "range", "torch.topk", "len", "torch.sum().item", "len", "len", "len", "torch.sum"], "function", ["None"], ["", "", "def", "top_k_acc", "(", "output", ",", "target", ",", "k", "=", "5", ",", "return_length", "=", "False", ")", ":", "\n", "    ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "pred", "=", "torch", ".", "topk", "(", "output", ",", "k", ",", "dim", "=", "1", ")", "[", "1", "]", "\n", "assert", "pred", ".", "shape", "[", "0", "]", "==", "len", "(", "target", ")", "\n", "correct", "=", "0", "\n", "for", "i", "in", "range", "(", "k", ")", ":", "\n", "            ", "correct", "+=", "torch", ".", "sum", "(", "pred", "[", ":", ",", "i", "]", "==", "target", ")", ".", "item", "(", ")", "\n", "", "", "if", "return_length", ":", "\n", "        ", "return", "correct", "/", "len", "(", "target", ")", ",", "len", "(", "target", ")", "\n", "", "else", ":", "\n", "        ", "return", "correct", "/", "len", "(", "target", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.ResNet.NormedLinear.__init__": [[32, 36], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "ResNet.NormedLinear.weight.data.uniform_().renorm_().mul_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "ResNet.NormedLinear.weight.data.uniform_().renorm_", "ResNet.NormedLinear.weight.data.uniform_"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ")", ":", "\n", "        ", "super", "(", "NormedLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "in_features", ",", "out_features", ")", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "1", ",", "1", ")", ".", "renorm_", "(", "2", ",", "1", ",", "1e-5", ")", ".", "mul_", "(", "1e5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.ResNet.NormedLinear.forward": [[37, 40], ["torch.normalize().mm", "torch.normalize().mm", "torch.normalize().mm", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "normalize", "(", "x", ",", "dim", "=", "1", ")", ".", "mm", "(", "F", ".", "normalize", "(", "self", ".", "weight", ",", "dim", "=", "0", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.ResNet.BasicBlock.__init__": [[44, 53], ["torch.Module.__init__", "ResNet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "ResNet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.conv3x3", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.ResNet.BasicBlock.forward": [[54, 71], ["ResNet.BasicBlock.conv1", "ResNet.BasicBlock.bn1", "ResNet.BasicBlock.relu", "ResNet.BasicBlock.conv2", "ResNet.BasicBlock.bn2", "ResNet.BasicBlock.relu", "ResNet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.ResNet.Bottleneck.__init__": [[75, 87], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.ResNet.Bottleneck.forward": [[88, 109], ["ResNet.Bottleneck.conv1", "ResNet.Bottleneck.bn1", "ResNet.Bottleneck.relu", "ResNet.Bottleneck.conv2", "ResNet.Bottleneck.bn2", "ResNet.Bottleneck.relu", "ResNet.Bottleneck.conv3", "ResNet.Bottleneck.bn3", "ResNet.Bottleneck.relu", "ResNet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.ResNet.ResNet.__init__": [[112, 191], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "ResNet.ResNet._make_layer", "ResNet.ResNet._make_layer", "ResNet.ResNet._make_layer", "ResNet.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "ResNet.ResNet.modules", "print", "torch.Dropout", "torch.Dropout", "torch.Dropout", "isinstance", "ResNet.NormedLinear", "torch.Linear", "torch.Linear", "torch.Linear", "list", "utils.load_state_dict", "print", "ResNet.ResNet.named_parameters", "m.weight.data.normal_", "isinstance", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "print", "param_name.startswith", "torch.load.keys", "torch.load.keys", "torch.load.keys", "should_ignore", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "torch.load.pop", "torch.load.pop", "torch.load.pop", "print", "param_name.startswith", "param_name.startswith", "should_train", "param.requires_grad_", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load.items", "torch.load.items", "torch.load.items"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet._make_layer", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet._make_layer", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet._make_layer", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet._make_layer", "home.repos.pwc.inspect_result.beierzhu_xerm.utils.util.load_state_dict"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "dropout", "=", "None", ",", "num_classes", "=", "1000", ",", "use_norm", "=", "False", ",", "reduce_dimension", "=", "False", ",", "layer3_output_dim", "=", "None", ",", "layer4_output_dim", "=", "None", ",", "load_pretrained_weights", "=", "False", ",", "returns_feat", "=", "False", ",", "s", "=", "30", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "\n", "if", "layer3_output_dim", "is", "None", ":", "\n", "            ", "if", "reduce_dimension", ":", "\n", "                ", "layer3_output_dim", "=", "192", "\n", "", "else", ":", "\n", "                ", "layer3_output_dim", "=", "256", "\n", "\n", "", "", "if", "layer4_output_dim", "is", "None", ":", "\n", "            ", "if", "reduce_dimension", ":", "\n", "                ", "layer4_output_dim", "=", "384", "\n", "", "else", ":", "\n", "                ", "layer4_output_dim", "=", "512", "\n", "\n", "", "", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "layer3_output_dim", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "layer4_output_dim", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "\n", "self", ".", "use_dropout", "=", "True", "if", "dropout", "else", "False", "\n", "\n", "if", "self", ".", "use_dropout", ":", "\n", "            ", "print", "(", "'Using dropout.'", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "if", "use_norm", ":", "\n", "            ", "self", ".", "linear", "=", "NormedLinear", "(", "layer4_output_dim", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "", "else", ":", "\n", "            ", "s", "=", "1", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "layer4_output_dim", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "", "self", ".", "returns_feat", "=", "returns_feat", "\n", "\n", "self", ".", "s", "=", "s", "\n", "\n", "if", "load_pretrained_weights", ":", "\n", "            ", "caffe_model", "=", "True", "\n", "if", "caffe_model", ":", "\n", "                ", "print", "(", "'Loading Caffe Pretrained ResNet 152 Weights.'", ")", "\n", "pretrained_weights_state_dict", "=", "torch", ".", "load", "(", "'./data/caffe_resnet152.pth'", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'Loading Places-LT Pretrained ResNet 152 Weights.'", ")", "\n", "pretrained_weights_state_dict", "=", "torch", ".", "load", "(", "'./data/places_lt_pretrained.pth'", ")", "[", "'state_dict_best'", "]", "[", "'feat_model'", "]", "\n", "pretrained_weights_state_dict", "=", "{", "k", "[", "7", ":", "]", ":", "v", "for", "k", ",", "v", "in", "pretrained_weights_state_dict", ".", "items", "(", ")", "}", "# remove \"module.\"", "\n", "\n", "", "should_ignore", "=", "lambda", "param_name", ":", "param_name", ".", "startswith", "(", "'fc'", ")", "# It's called fc in caffe model.", "\n", "\n", "for", "k", "in", "list", "(", "pretrained_weights_state_dict", ".", "keys", "(", ")", ")", ":", "\n", "                ", "if", "should_ignore", "(", "k", ")", ":", "\n", "                    ", "pretrained_weights_state_dict", ".", "pop", "(", "k", ")", "\n", "print", "(", "\"Ignored when loading the model:\"", ",", "k", ")", "\n", "\n", "# The number of parameters may mismatch since we don't have num_batches_tracked in the caffe model.", "\n", "", "", "load_state_dict", "(", "self", ",", "pretrained_weights_state_dict", ",", "no_ignore", "=", "True", ")", "\n", "\n", "print", "(", "\"Warning: We allow training on layer 3 and layer 4.\"", ")", "\n", "# should_train = lambda param_name: param_name.startswith('layer3') or param_name.startswith('layer4') or param_name.startswith('linear')", "\n", "should_train", "=", "lambda", "param_name", ":", "param_name", ".", "startswith", "(", "'layer4'", ")", "or", "param_name", ".", "startswith", "(", "'linear'", ")", "\n", "for", "name", ",", "param", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "not", "should_train", "(", "name", ")", ":", "\n", "                    ", "param", ".", "requires_grad_", "(", "False", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "\"Allow gradient on:\"", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.ResNet.ResNet._hook_before_iter": [[192, 203], ["ResNet.ResNet.modules", "isinstance", "print", "module.eval"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.eval"], ["", "", "", "", "def", "_hook_before_iter", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "training", ",", "\"_hook_before_iter should be called at training time only, after train() is called\"", "\n", "count", "=", "0", "\n", "for", "module", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "if", "module", ".", "weight", ".", "requires_grad", "==", "False", ":", "\n", "                    ", "module", ".", "eval", "(", ")", "\n", "count", "+=", "1", "\n", "\n", "", "", "", "if", "count", ">", "0", ":", "\n", "            ", "print", "(", "\"Warning: detected at least one frozen BN, set them to eval state. Count:\"", ",", "count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.ResNet.ResNet._make_layer": [[204, 220], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.ResNet.ResNet.forward": [[221, 252], ["utils.autocast", "ResNet.ResNet.conv1", "ResNet.ResNet.bn1", "ResNet.ResNet.relu", "ResNet.ResNet.maxpool", "ResNet.ResNet.layer1", "ResNet.ResNet.layer2", "ResNet.ResNet.layer3", "ResNet.ResNet.layer4", "ResNet.ResNet.avgpool", "ResNet.ResNet.view", "ResNet.ResNet.linear", "ResNet.ResNet.size", "ResNet.ResNet.dropout"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "with", "autocast", "(", ")", ":", "\n", "            ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "self", ".", "feat", "=", "x", "\n", "\n", "if", "self", ".", "use_dropout", ":", "\n", "                ", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "linear", "(", "x", ")", "\n", "\n", "x", "=", "x", "*", "self", ".", "s", "# This hyperparam s is originally in the loss function, but we moved it here to prevent using s multiple times in distillation.", "\n", "\n", "", "if", "self", ".", "returns_feat", ":", "\n", "            ", "return", "{", "\n", "\"output\"", ":", "x", ",", "\n", "\"feat\"", ":", "self", ".", "feat", "\n", "}", "\n", "", "else", ":", "\n", "            ", "return", "x", "", "", "", "", ""]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.ResNet.conv3x3": [[24, 28], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.ResNeXt.BasicBlock.__init__": [[23, 32], ["torch.Module.__init__", "ResNeXt.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "ResNeXt.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.conv3x3", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.ResNeXt.BasicBlock.forward": [[33, 50], ["ResNeXt.BasicBlock.conv1", "ResNeXt.BasicBlock.bn1", "ResNeXt.BasicBlock.relu", "ResNeXt.BasicBlock.conv2", "ResNeXt.BasicBlock.bn2", "ResNeXt.BasicBlock.relu", "ResNeXt.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.ResNeXt.Bottleneck.__init__": [[54, 69], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "\n", "groups", "=", "1", ",", "base_width", "=", "64", ",", "is_last", "=", "False", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "width", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "width", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "width", ",", "width", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "groups", "=", "groups", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "width", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "width", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "is_last", "=", "is_last", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.ResNeXt.Bottleneck.forward": [[70, 91], ["ResNeXt.Bottleneck.conv1", "ResNeXt.Bottleneck.bn1", "ResNeXt.Bottleneck.relu", "ResNeXt.Bottleneck.conv2", "ResNeXt.Bottleneck.bn2", "ResNeXt.Bottleneck.relu", "ResNeXt.Bottleneck.conv3", "ResNeXt.Bottleneck.bn3", "ResNeXt.Bottleneck.relu", "ResNeXt.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.ResNeXt.ResNext.__init__": [[94, 140], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "ResNeXt.ResNext._make_layer", "ResNeXt.ResNext._make_layer", "ResNeXt.ResNext._make_layer", "ResNeXt.ResNext._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "ResNeXt.ResNext.modules", "torch.Linear", "torch.Linear", "print", "torch.Dropout", "torch.Dropout", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet._make_layer", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet._make_layer", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet._make_layer", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "dropout", "=", "None", ",", "num_classes", "=", "1000", ",", "reduce_dimension", "=", "False", ",", "layer3_output_dim", "=", "None", ",", "layer4_output_dim", "=", "None", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNext", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "\n", "if", "layer3_output_dim", "is", "None", ":", "\n", "            ", "if", "reduce_dimension", ":", "\n", "                ", "layer3_output_dim", "=", "192", "\n", "", "else", ":", "\n", "                ", "layer3_output_dim", "=", "256", "\n", "\n", "", "", "if", "layer4_output_dim", "is", "None", ":", "\n", "            ", "if", "reduce_dimension", ":", "\n", "                ", "layer4_output_dim", "=", "384", "\n", "", "else", ":", "\n", "                ", "layer4_output_dim", "=", "512", "\n", "\n", "", "", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "layer3_output_dim", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "layer4_output_dim", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "\n", "self", ".", "use_dropout", "=", "True", "if", "dropout", "else", "False", "\n", "\n", "if", "self", ".", "use_dropout", ":", "\n", "            ", "print", "(", "'Using dropout.'", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "layer4_output_dim", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.ResNeXt.ResNext._hook_before_iter": [[142, 153], ["ResNeXt.ResNext.modules", "isinstance", "print", "module.eval"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.eval"], ["", "def", "_hook_before_iter", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "training", ",", "\"_hook_before_iter should be called at training time only, after train() is called\"", "\n", "count", "=", "0", "\n", "for", "module", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "if", "module", ".", "weight", ".", "requires_grad", "==", "False", ":", "\n", "                    ", "module", ".", "eval", "(", ")", "\n", "count", "+=", "1", "\n", "\n", "", "", "", "if", "count", ">", "0", ":", "\n", "            ", "print", "(", "\"Warning: detected at least one frozen BN, set them to eval state. Count:\"", ",", "count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.ResNeXt.ResNext._make_layer": [[154, 173], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "is_last", "=", "False", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "\n", "groups", "=", "self", ".", "groups", ",", "base_width", "=", "self", ".", "base_width", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "\n", "groups", "=", "self", ".", "groups", ",", "base_width", "=", "self", ".", "base_width", ",", "\n", "is_last", "=", "(", "is_last", "and", "i", "==", "blocks", "-", "1", ")", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.ResNeXt.ResNext.forward": [[174, 196], ["utils.autocast", "ResNeXt.ResNext.conv1", "ResNeXt.ResNext.bn1", "ResNeXt.ResNext.relu", "ResNeXt.ResNext.maxpool", "ResNeXt.ResNext.layer1", "ResNeXt.ResNext.layer2", "ResNeXt.ResNext.layer3", "ResNeXt.ResNext.layer4", "ResNeXt.ResNext.avgpool", "ResNeXt.ResNext.view", "ResNeXt.ResNext.linear", "ResNeXt.ResNext.size", "ResNeXt.ResNext.dropout"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "with", "autocast", "(", ")", ":", "\n", "            ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "if", "self", ".", "use_dropout", ":", "\n", "                ", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "linear", "(", "x", ")", "\n", "\n", "", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.ResNeXt.conv3x3": [[15, 19], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.RIDEResNet.NormedLinear.__init__": [[30, 34], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "RIDEResNet.NormedLinear.weight.data.uniform_().renorm_().mul_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "RIDEResNet.NormedLinear.weight.data.uniform_().renorm_", "RIDEResNet.NormedLinear.weight.data.uniform_"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ")", ":", "\n", "        ", "super", "(", "NormedLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "in_features", ",", "out_features", ")", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "1", ",", "1", ")", ".", "renorm_", "(", "2", ",", "1", ",", "1e-5", ")", ".", "mul_", "(", "1e5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.RIDEResNet.NormedLinear.forward": [[35, 38], ["torch.normalize().mm", "torch.normalize().mm", "torch.normalize().mm", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "normalize", "(", "x", ",", "dim", "=", "1", ")", ".", "mm", "(", "F", ".", "normalize", "(", "self", ".", "weight", ",", "dim", "=", "0", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.RIDEResNet.BasicBlock.__init__": [[42, 51], ["torch.Module.__init__", "RIDEResNet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "RIDEResNet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.conv3x3", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.RIDEResNet.BasicBlock.forward": [[52, 69], ["RIDEResNet.BasicBlock.conv1", "RIDEResNet.BasicBlock.bn1", "RIDEResNet.BasicBlock.relu", "RIDEResNet.BasicBlock.conv2", "RIDEResNet.BasicBlock.bn2", "RIDEResNet.BasicBlock.relu", "RIDEResNet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.RIDEResNet.Bottleneck.__init__": [[73, 85], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.RIDEResNet.Bottleneck.forward": [[86, 107], ["RIDEResNet.Bottleneck.conv1", "RIDEResNet.Bottleneck.bn1", "RIDEResNet.Bottleneck.relu", "RIDEResNet.Bottleneck.conv2", "RIDEResNet.Bottleneck.bn2", "RIDEResNet.Bottleneck.relu", "RIDEResNet.Bottleneck.conv3", "RIDEResNet.Bottleneck.bn3", "RIDEResNet.Bottleneck.relu", "RIDEResNet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.RIDEResNet.ResNet.__init__": [[110, 170], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "RIDEResNet.ResNet._make_layer", "RIDEResNet.ResNet._make_layer", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "RIDEResNet.ResNet.modules", "RIDEResNet.ResNet._make_layer", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "print", "torch.Dropout", "torch.Dropout", "torch.Dropout", "isinstance", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "RIDEResNet.ResNet._make_layer", "m.weight.data.normal_", "isinstance", "RIDEResNet.ResNet._make_layer", "range", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "RIDEResNet.NormedLinear", "torch.Linear", "torch.Linear", "torch.Linear", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet._make_layer", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet._make_layer", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet._make_layer", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet._make_layer", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_experts", ",", "dropout", "=", "None", ",", "num_classes", "=", "1000", ",", "use_norm", "=", "False", ",", "reduce_dimension", "=", "False", ",", "layer3_output_dim", "=", "None", ",", "layer4_output_dim", "=", "None", ",", "share_layer3", "=", "False", ",", "returns_feat", "=", "False", ",", "s", "=", "30", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "num_experts", "=", "num_experts", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "inplanes", "=", "self", ".", "next_inplanes", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "inplanes", "=", "self", ".", "next_inplanes", "\n", "\n", "self", ".", "share_layer3", "=", "share_layer3", "\n", "\n", "if", "layer3_output_dim", "is", "None", ":", "\n", "            ", "if", "reduce_dimension", ":", "\n", "                ", "layer3_output_dim", "=", "192", "\n", "", "else", ":", "\n", "                ", "layer3_output_dim", "=", "256", "\n", "\n", "", "", "if", "layer4_output_dim", "is", "None", ":", "\n", "            ", "if", "reduce_dimension", ":", "\n", "                ", "layer4_output_dim", "=", "384", "\n", "", "else", ":", "\n", "                ", "layer4_output_dim", "=", "512", "\n", "\n", "", "", "if", "self", ".", "share_layer3", ":", "\n", "            ", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "layer3_output_dim", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "layer3s", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "_make_layer", "(", "block", ",", "layer3_output_dim", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "for", "_", "in", "range", "(", "num_experts", ")", "]", ")", "\n", "", "self", ".", "inplanes", "=", "self", ".", "next_inplanes", "\n", "self", ".", "layer4s", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "_make_layer", "(", "block", ",", "layer4_output_dim", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "for", "_", "in", "range", "(", "num_experts", ")", "]", ")", "\n", "self", ".", "inplanes", "=", "self", ".", "next_inplanes", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "\n", "self", ".", "use_dropout", "=", "True", "if", "dropout", "else", "False", "\n", "\n", "if", "self", ".", "use_dropout", ":", "\n", "            ", "print", "(", "'Using dropout.'", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "if", "use_norm", ":", "\n", "            ", "self", ".", "linears", "=", "nn", ".", "ModuleList", "(", "[", "NormedLinear", "(", "layer4_output_dim", "*", "block", ".", "expansion", ",", "num_classes", ")", "for", "_", "in", "range", "(", "num_experts", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "linears", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "layer4_output_dim", "*", "block", ".", "expansion", ",", "num_classes", ")", "for", "_", "in", "range", "(", "num_experts", ")", "]", ")", "\n", "s", "=", "1", "\n", "\n", "", "self", ".", "s", "=", "s", "\n", "\n", "self", ".", "returns_feat", "=", "returns_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.RIDEResNet.ResNet._hook_before_iter": [[171, 182], ["RIDEResNet.ResNet.modules", "isinstance", "print", "module.eval"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.eval"], ["", "def", "_hook_before_iter", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "training", ",", "\"_hook_before_iter should be called at training time only, after train() is called\"", "\n", "count", "=", "0", "\n", "for", "module", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "if", "module", ".", "weight", ".", "requires_grad", "==", "False", ":", "\n", "                    ", "module", ".", "eval", "(", ")", "\n", "count", "+=", "1", "\n", "\n", "", "", "", "if", "count", ">", "0", ":", "\n", "            ", "print", "(", "\"Warning: detected at least one frozen BN, set them to eval state. Count:\"", ",", "count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.RIDEResNet.ResNet._make_layer": [[183, 199], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "next_inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "next_inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.RIDEResNet.ResNet._separate_part": [[200, 216], ["RIDEResNet.ResNet.avgpool", "RIDEResNet.ResNet.view", "RIDEResNet.ResNet.feat.append", "RIDEResNet.ResNet.size", "RIDEResNet.ResNet.dropout"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size"], ["", "def", "_separate_part", "(", "self", ",", "x", ",", "ind", ")", ":", "\n", "        ", "if", "not", "self", ".", "share_layer3", ":", "\n", "            ", "x", "=", "(", "self", ".", "layer3s", "[", "ind", "]", ")", "(", "x", ")", "\n", "", "x", "=", "(", "self", ".", "layer4s", "[", "ind", "]", ")", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "if", "self", ".", "use_dropout", ":", "\n", "            ", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "\n", "", "self", ".", "feat", ".", "append", "(", "x", ")", "\n", "x", "=", "(", "self", ".", "linears", "[", "ind", "]", ")", "(", "x", ")", "\n", "x", "=", "x", "*", "self", ".", "s", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.RIDEResNet.ResNet.forward": [[217, 244], ["utils.autocast", "RIDEResNet.ResNet.conv1", "RIDEResNet.ResNet.bn1", "RIDEResNet.ResNet.relu", "RIDEResNet.ResNet.maxpool", "RIDEResNet.ResNet.layer1", "RIDEResNet.ResNet.layer2", "range", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "RIDEResNet.ResNet.layer3", "outs.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "RIDEResNet.ResNet._separate_part", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ride_resnet_cifar.ResNet_s._separate_part"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "with", "autocast", "(", ")", ":", "\n", "            ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "if", "self", ".", "share_layer3", ":", "\n", "                ", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "\n", "", "outs", "=", "[", "]", "\n", "self", ".", "feat", "=", "[", "]", "\n", "for", "ind", "in", "range", "(", "self", ".", "num_experts", ")", ":", "\n", "                ", "outs", ".", "append", "(", "self", ".", "_separate_part", "(", "x", ",", "ind", ")", ")", "\n", "\n", "", "final_out", "=", "torch", ".", "stack", "(", "outs", ",", "dim", "=", "1", ")", ".", "mean", "(", "dim", "=", "1", ")", "\n", "\n", "", "if", "self", ".", "returns_feat", ":", "\n", "            ", "return", "{", "\n", "\"output\"", ":", "final_out", ",", "\n", "\"feat\"", ":", "torch", ".", "stack", "(", "self", ".", "feat", ",", "dim", "=", "1", ")", ",", "\n", "\"logits\"", ":", "torch", ".", "stack", "(", "outs", ",", "dim", "=", "1", ")", "\n", "}", "\n", "", "else", ":", "\n", "            ", "return", "final_out", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.RIDEResNet.conv3x3": [[23, 27], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.RIDEResNeXt.NormedLinear.__init__": [[23, 27], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "RIDEResNeXt.NormedLinear.weight.data.uniform_().renorm_().mul_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "RIDEResNeXt.NormedLinear.weight.data.uniform_().renorm_", "RIDEResNeXt.NormedLinear.weight.data.uniform_"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ")", ":", "\n", "        ", "super", "(", "NormedLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "in_features", ",", "out_features", ")", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "1", ",", "1", ")", ".", "renorm_", "(", "2", ",", "1", ",", "1e-5", ")", ".", "mul_", "(", "1e5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.RIDEResNeXt.NormedLinear.forward": [[28, 31], ["torch.normalize().mm", "torch.normalize().mm", "torch.normalize().mm", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "normalize", "(", "x", ",", "dim", "=", "1", ")", ".", "mm", "(", "F", ".", "normalize", "(", "self", ".", "weight", ",", "dim", "=", "0", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.RIDEResNeXt.BasicBlock.__init__": [[35, 44], ["torch.Module.__init__", "RIDEResNeXt.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "RIDEResNeXt.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.conv3x3", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.RIDEResNeXt.BasicBlock.forward": [[45, 62], ["RIDEResNeXt.BasicBlock.conv1", "RIDEResNeXt.BasicBlock.bn1", "RIDEResNeXt.BasicBlock.relu", "RIDEResNeXt.BasicBlock.conv2", "RIDEResNeXt.BasicBlock.bn2", "RIDEResNeXt.BasicBlock.relu", "RIDEResNeXt.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.RIDEResNeXt.Bottleneck.__init__": [[66, 81], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "\n", "groups", "=", "1", ",", "base_width", "=", "64", ",", "is_last", "=", "False", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "width", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "width", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "width", ",", "width", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "groups", "=", "groups", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "width", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "width", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "is_last", "=", "is_last", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.RIDEResNeXt.Bottleneck.forward": [[82, 103], ["RIDEResNeXt.Bottleneck.conv1", "RIDEResNeXt.Bottleneck.bn1", "RIDEResNeXt.Bottleneck.relu", "RIDEResNeXt.Bottleneck.conv2", "RIDEResNeXt.Bottleneck.bn2", "RIDEResNeXt.Bottleneck.relu", "RIDEResNeXt.Bottleneck.conv3", "RIDEResNeXt.Bottleneck.bn3", "RIDEResNeXt.Bottleneck.relu", "RIDEResNeXt.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.RIDEResNeXt.ResNext.__init__": [[106, 165], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "RIDEResNeXt.ResNext._make_layer", "RIDEResNeXt.ResNext._make_layer", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "RIDEResNeXt.ResNext.modules", "print", "torch.Dropout", "torch.Dropout", "torch.Dropout", "isinstance", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "RIDEResNeXt.ResNext._make_layer", "RIDEResNeXt.ResNext._make_layer", "m.weight.data.normal_", "isinstance", "range", "range", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "RIDEResNeXt.NormedLinear", "torch.Linear", "torch.Linear", "torch.Linear", "range", "range"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet._make_layer", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet._make_layer", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet._make_layer", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_experts", ",", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "dropout", "=", "None", ",", "num_classes", "=", "1000", ",", "use_norm", "=", "False", ",", "reduce_dimension", "=", "False", ",", "layer3_output_dim", "=", "None", ",", "layer4_output_dim", "=", "None", ",", "returns_feat", "=", "False", ",", "s", "=", "30", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "num_experts", "=", "num_experts", "\n", "super", "(", "ResNext", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "inplanes", "=", "self", ".", "next_inplanes", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "inplanes", "=", "self", ".", "next_inplanes", "\n", "\n", "if", "layer3_output_dim", "is", "None", ":", "\n", "            ", "if", "reduce_dimension", ":", "\n", "                ", "layer3_output_dim", "=", "192", "\n", "", "else", ":", "\n", "                ", "layer3_output_dim", "=", "256", "\n", "\n", "", "", "if", "layer4_output_dim", "is", "None", ":", "\n", "            ", "if", "reduce_dimension", ":", "\n", "                ", "layer4_output_dim", "=", "384", "\n", "", "else", ":", "\n", "                ", "layer4_output_dim", "=", "512", "\n", "\n", "", "", "self", ".", "layer3s", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "_make_layer", "(", "block", ",", "layer3_output_dim", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "for", "_", "in", "range", "(", "num_experts", ")", "]", ")", "\n", "self", ".", "inplanes", "=", "self", ".", "next_inplanes", "\n", "self", ".", "layer4s", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "_make_layer", "(", "block", ",", "layer4_output_dim", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "for", "_", "in", "range", "(", "num_experts", ")", "]", ")", "\n", "self", ".", "inplanes", "=", "self", ".", "next_inplanes", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "\n", "self", ".", "use_dropout", "=", "True", "if", "dropout", "else", "False", "\n", "\n", "if", "self", ".", "use_dropout", ":", "\n", "            ", "print", "(", "'Using dropout.'", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "if", "use_norm", ":", "\n", "            ", "self", ".", "linears", "=", "nn", ".", "ModuleList", "(", "[", "NormedLinear", "(", "layer4_output_dim", "*", "block", ".", "expansion", ",", "num_classes", ")", "for", "_", "in", "range", "(", "num_experts", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "linears", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "layer4_output_dim", "*", "block", ".", "expansion", ",", "num_classes", ")", "for", "_", "in", "range", "(", "num_experts", ")", "]", ")", "\n", "s", "=", "1", "\n", "\n", "", "self", ".", "s", "=", "s", "\n", "\n", "self", ".", "returns_feat", "=", "returns_feat", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.RIDEResNeXt.ResNext._hook_before_iter": [[166, 177], ["RIDEResNeXt.ResNext.modules", "isinstance", "print", "module.eval"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.eval"], ["", "def", "_hook_before_iter", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "training", ",", "\"_hook_before_iter should be called at training time only, after train() is called\"", "\n", "count", "=", "0", "\n", "for", "module", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "if", "module", ".", "weight", ".", "requires_grad", "==", "False", ":", "\n", "                    ", "module", ".", "eval", "(", ")", "\n", "count", "+=", "1", "\n", "\n", "", "", "", "if", "count", ">", "0", ":", "\n", "            ", "print", "(", "\"Warning: detected at least one frozen BN, set them to eval state. Count:\"", ",", "count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.RIDEResNeXt.ResNext._make_layer": [[178, 197], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "is_last", "=", "False", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "\n", "groups", "=", "self", ".", "groups", ",", "base_width", "=", "self", ".", "base_width", ")", ")", "\n", "self", ".", "next_inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "next_inplanes", ",", "planes", ",", "\n", "groups", "=", "self", ".", "groups", ",", "base_width", "=", "self", ".", "base_width", ",", "\n", "is_last", "=", "(", "is_last", "and", "i", "==", "blocks", "-", "1", ")", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.RIDEResNeXt.ResNext._separate_part": [[198, 213], ["RIDEResNeXt.ResNext.avgpool", "RIDEResNeXt.ResNext.view", "RIDEResNeXt.ResNext.feat.append", "RIDEResNeXt.ResNext.size", "RIDEResNeXt.ResNext.dropout"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size"], ["", "def", "_separate_part", "(", "self", ",", "x", ",", "ind", ")", ":", "\n", "        ", "x", "=", "(", "self", ".", "layer3s", "[", "ind", "]", ")", "(", "x", ")", "\n", "x", "=", "(", "self", ".", "layer4s", "[", "ind", "]", ")", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "if", "self", ".", "use_dropout", ":", "\n", "            ", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "\n", "", "self", ".", "feat", ".", "append", "(", "x", ")", "\n", "x", "=", "(", "self", ".", "linears", "[", "ind", "]", ")", "(", "x", ")", "\n", "x", "=", "x", "*", "self", ".", "s", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.RIDEResNeXt.ResNext.forward": [[214, 239], ["utils.autocast", "RIDEResNeXt.ResNext.conv1", "RIDEResNeXt.ResNext.bn1", "RIDEResNeXt.ResNext.relu", "RIDEResNeXt.ResNext.maxpool", "RIDEResNeXt.ResNext.layer1", "RIDEResNeXt.ResNext.layer2", "range", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "outs.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "RIDEResNeXt.ResNext._separate_part", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ride_resnet_cifar.ResNet_s._separate_part"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "with", "autocast", "(", ")", ":", "\n", "            ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "\n", "outs", "=", "[", "]", "\n", "self", ".", "feat", "=", "[", "]", "\n", "for", "ind", "in", "range", "(", "self", ".", "num_experts", ")", ":", "\n", "                ", "outs", ".", "append", "(", "self", ".", "_separate_part", "(", "x", ",", "ind", ")", ")", "\n", "\n", "", "final_out", "=", "torch", ".", "stack", "(", "outs", ",", "dim", "=", "1", ")", ".", "mean", "(", "dim", "=", "1", ")", "\n", "\n", "", "if", "self", ".", "returns_feat", ":", "\n", "            ", "return", "{", "\n", "\"output\"", ":", "final_out", ",", "\n", "\"feat\"", ":", "torch", ".", "stack", "(", "self", ".", "feat", ",", "dim", "=", "1", ")", ",", "\n", "\"logits\"", ":", "torch", ".", "stack", "(", "outs", ",", "dim", "=", "1", ")", "\n", "}", "\n", "", "else", ":", "\n", "            ", "return", "final_out", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.RIDEResNeXt.conv3x3": [[16, 20], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.EAResNet.NormedLinear.__init__": [[28, 32], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "EAResNet.NormedLinear.weight.data.uniform_().renorm_().mul_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "EAResNet.NormedLinear.weight.data.uniform_().renorm_", "EAResNet.NormedLinear.weight.data.uniform_"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ")", ":", "\n", "        ", "super", "(", "NormedLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "in_features", ",", "out_features", ")", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "1", ",", "1", ")", ".", "renorm_", "(", "2", ",", "1", ",", "1e-5", ")", ".", "mul_", "(", "1e5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.EAResNet.NormedLinear.forward": [[33, 36], ["torch.normalize().mm", "torch.normalize().mm", "torch.normalize().mm", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "normalize", "(", "x", ",", "dim", "=", "1", ")", ".", "mm", "(", "F", ".", "normalize", "(", "self", ".", "weight", ",", "dim", "=", "0", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.EAResNet.BasicBlock.__init__": [[40, 49], ["torch.Module.__init__", "EAResNet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "EAResNet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.conv3x3", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.EAResNet.BasicBlock.forward": [[50, 67], ["EAResNet.BasicBlock.conv1", "EAResNet.BasicBlock.bn1", "EAResNet.BasicBlock.relu", "EAResNet.BasicBlock.conv2", "EAResNet.BasicBlock.bn2", "EAResNet.BasicBlock.relu", "EAResNet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.EAResNet.Bottleneck.__init__": [[71, 83], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.EAResNet.Bottleneck.forward": [[84, 105], ["EAResNet.Bottleneck.conv1", "EAResNet.Bottleneck.bn1", "EAResNet.Bottleneck.relu", "EAResNet.Bottleneck.conv2", "EAResNet.Bottleneck.bn2", "EAResNet.Bottleneck.relu", "EAResNet.Bottleneck.conv3", "EAResNet.Bottleneck.bn3", "EAResNet.Bottleneck.relu", "EAResNet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.EAResNet.ResNet.__init__": [[108, 191], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "EAResNet.ResNet._make_layer", "EAResNet.ResNet._make_layer", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "EAResNet.ResNet.modules", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "EAResNet.ResNet._make_layer", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "print", "torch.Dropout", "torch.Dropout", "torch.Dropout", "isinstance", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "EAResNet.ResNet.named_parameters", "EAResNet.ResNet._make_layer", "m.weight.data.normal_", "isinstance", "torch.Linear", "torch.Linear", "torch.Linear", "EAResNet.ResNet._make_layer", "range", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "EAResNet.NormedLinear", "torch.Linear", "torch.Linear", "torch.Linear", "range", "torch.Linear", "torch.Linear", "torch.Linear", "param.requires_grad_", "param.requires_grad_", "range", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet._make_layer", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet._make_layer", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet._make_layer", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet._make_layer", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_experts", ",", "dropout", "=", "None", ",", "num_classes", "=", "1000", ",", "use_norm", "=", "False", ",", "reduce_dimension", "=", "False", ",", "layer3_output_dim", "=", "None", ",", "layer4_output_dim", "=", "None", ",", "share_layer3", "=", "False", ",", "top_choices_num", "=", "5", ",", "pos_weight", "=", "20", ",", "share_expert_help_pred_fc", "=", "True", ",", "force_all", "=", "False", ",", "s", "=", "30", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "num_experts", "=", "num_experts", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "inplanes", "=", "self", ".", "next_inplanes", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "inplanes", "=", "self", ".", "next_inplanes", "\n", "\n", "self", ".", "share_layer3", "=", "share_layer3", "\n", "\n", "if", "layer3_output_dim", "is", "None", ":", "\n", "            ", "if", "reduce_dimension", ":", "\n", "                ", "layer3_output_dim", "=", "192", "\n", "", "else", ":", "\n", "                ", "layer3_output_dim", "=", "256", "\n", "\n", "", "", "if", "layer4_output_dim", "is", "None", ":", "\n", "            ", "if", "reduce_dimension", ":", "\n", "                ", "layer4_output_dim", "=", "384", "\n", "", "else", ":", "\n", "                ", "layer4_output_dim", "=", "512", "\n", "\n", "", "", "if", "self", ".", "share_layer3", ":", "\n", "            ", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "layer3_output_dim", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "layer3s", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "_make_layer", "(", "block", ",", "layer3_output_dim", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "for", "_", "in", "range", "(", "num_experts", ")", "]", ")", "\n", "", "self", ".", "inplanes", "=", "self", ".", "next_inplanes", "\n", "self", ".", "layer4s", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "_make_layer", "(", "block", ",", "layer4_output_dim", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "for", "_", "in", "range", "(", "num_experts", ")", "]", ")", "\n", "self", ".", "inplanes", "=", "self", ".", "next_inplanes", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "\n", "self", ".", "use_dropout", "=", "True", "if", "dropout", "else", "False", "\n", "\n", "if", "self", ".", "use_dropout", ":", "\n", "            ", "print", "(", "'Using dropout.'", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "if", "use_norm", ":", "\n", "            ", "self", ".", "linears", "=", "nn", ".", "ModuleList", "(", "[", "NormedLinear", "(", "layer4_output_dim", "*", "block", ".", "expansion", ",", "num_classes", ")", "for", "_", "in", "range", "(", "num_experts", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "s", "=", "1", "\n", "self", ".", "linears", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "layer4_output_dim", "*", "block", ".", "expansion", ",", "num_classes", ")", "for", "_", "in", "range", "(", "num_experts", ")", "]", ")", "\n", "\n", "", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "self", ".", "top_choices_num", "=", "top_choices_num", "\n", "\n", "self", ".", "share_expert_help_pred_fc", "=", "share_expert_help_pred_fc", "\n", "self", ".", "layer4_feat", "=", "True", "\n", "\n", "expert_hidden_fc_output_dim", "=", "16", "\n", "self", ".", "expert_help_pred_hidden_fcs", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "(", "layer4_output_dim", "if", "self", ".", "layer4_feat", "else", "layer3_output_dim", ")", "*", "block", ".", "expansion", ",", "expert_hidden_fc_output_dim", ")", "for", "_", "in", "range", "(", "self", ".", "num_experts", "-", "1", ")", "]", ")", "\n", "if", "self", ".", "share_expert_help_pred_fc", ":", "\n", "            ", "self", ".", "expert_help_pred_fc", "=", "nn", ".", "Linear", "(", "expert_hidden_fc_output_dim", "+", "self", ".", "top_choices_num", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "expert_help_pred_fcs", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "expert_hidden_fc_output_dim", "+", "self", ".", "top_choices_num", ",", "1", ")", "for", "_", "in", "range", "(", "self", ".", "num_experts", "-", "1", ")", "]", ")", "\n", "\n", "", "self", ".", "pos_weight", "=", "pos_weight", "\n", "\n", "self", ".", "s", "=", "s", "\n", "\n", "self", ".", "force_all", "=", "force_all", "# For calulating FLOPs", "\n", "\n", "if", "not", "force_all", ":", "\n", "            ", "for", "name", ",", "param", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "\"expert_help_pred\"", "in", "name", ":", "\n", "                    ", "param", ".", "requires_grad_", "(", "True", ")", "\n", "", "else", ":", "\n", "                    ", "param", ".", "requires_grad_", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.EAResNet.ResNet._hook_before_iter": [[192, 203], ["EAResNet.ResNet.modules", "isinstance", "print", "module.eval"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.eval"], ["", "", "", "", "def", "_hook_before_iter", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "training", ",", "\"_hook_before_iter should be called at training time only, after train() is called\"", "\n", "count", "=", "0", "\n", "for", "module", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "if", "module", ".", "weight", ".", "requires_grad", "==", "False", ":", "\n", "                    ", "module", ".", "eval", "(", ")", "\n", "count", "+=", "1", "\n", "\n", "", "", "", "if", "count", ">", "0", ":", "\n", "            ", "print", "(", "\"Warning: detected at least one frozen BN, set them to eval state. Count:\"", ",", "count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.EAResNet.ResNet._make_layer": [[204, 220], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "next_inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "next_inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.EAResNet.ResNet._separate_part": [[221, 240], ["EAResNet.ResNet.avgpool", "EAResNet.ResNet.view", "EAResNet.ResNet.size", "EAResNet.ResNet.dropout"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size"], ["", "def", "_separate_part", "(", "self", ",", "x", ",", "ind", ")", ":", "\n", "        ", "if", "not", "self", ".", "share_layer3", ":", "\n", "            ", "x", "=", "(", "self", ".", "layer3s", "[", "ind", "]", ")", "(", "x", ")", "\n", "", "if", "not", "self", ".", "layer4_feat", ":", "\n", "            ", "self", ".", "feat", "=", "x", "\n", "", "x", "=", "(", "self", ".", "layer4s", "[", "ind", "]", ")", "(", "x", ")", "\n", "if", "self", ".", "layer4_feat", ":", "\n", "            ", "self", ".", "feat", "=", "x", "\n", "\n", "", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "if", "self", ".", "use_dropout", ":", "\n", "            ", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "\n", "", "x", "=", "(", "self", ".", "linears", "[", "ind", "]", ")", "(", "x", ")", "\n", "x", "=", "x", "*", "self", ".", "s", "# This hyperparam s is originally in the loss function, but we moved it here to prevent using s multiple times in distillation.", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.EAResNet.ResNet.pred_expert_help": [[241, 255], ["torch.adaptive_avg_pool2d().flatten", "torch.adaptive_avg_pool2d().flatten", "torch.adaptive_avg_pool2d().flatten", "EAResNet.ResNet.relu", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "EAResNet.ResNet.norm", "EAResNet.ResNet.expert_help_pred_fc", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d"], "methods", ["None"], ["", "def", "pred_expert_help", "(", "self", ",", "input_part", ",", "i", ")", ":", "\n", "        ", "feature", ",", "logits", "=", "input_part", "\n", "feature", "=", "F", ".", "adaptive_avg_pool2d", "(", "feature", ",", "(", "1", ",", "1", ")", ")", ".", "flatten", "(", "1", ")", "\n", "feature", "=", "feature", "/", "feature", ".", "norm", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "feature", "=", "self", ".", "relu", "(", "(", "self", ".", "expert_help_pred_hidden_fcs", "[", "i", "]", ")", "(", "feature", ")", ")", "\n", "\n", "topk", ",", "_", "=", "torch", ".", "topk", "(", "logits", ",", "k", "=", "self", ".", "top_choices_num", ",", "dim", "=", "1", ")", "\n", "confidence_input", "=", "torch", ".", "cat", "(", "(", "topk", ",", "feature", ")", ",", "dim", "=", "1", ")", "\n", "if", "self", ".", "share_expert_help_pred_fc", ":", "\n", "            ", "expert_help_pred", "=", "self", ".", "expert_help_pred_fc", "(", "confidence_input", ")", "\n", "", "else", ":", "\n", "            ", "expert_help_pred", "=", "(", "self", ".", "expert_help_pred_fcs", "[", "i", "]", ")", "(", "confidence_input", ")", "\n", "", "return", "expert_help_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.EAResNet.ResNet.forward": [[256, 311], ["EAResNet.ResNet.conv1", "EAResNet.ResNet.bn1", "EAResNet.ResNet.relu", "EAResNet.ResNet.maxpool", "EAResNet.ResNet.layer1", "EAResNet.ResNet.layer2", "EAResNet.ResNet.layer3", "EAResNet.ResNet.new_zeros", "EAResNet.ResNet.new_zeros", "EAResNet.ResNet.new_zeros", "EAResNet.ResNet.new_zeros", "range", "range", "EAResNet.ResNet.new_ones", "EAResNet.ResNet.new_ones", "EAResNet.ResNet._separate_part", "range", "EAResNet.ResNet._separate_part", "print", "print", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "EAResNet.ResNet.pred_expert_help().view", "print", "EAResNet.ResNet._separate_part", "EAResNet.ResNet.size", "EAResNet.ResNet.size", "EAResNet.ResNet.size", "EAResNet.ResNet.argmax", "EAResNet.ResNet.pred_expert_help().view", "correctness[].any", "expert_help_target.float", "EAResNet.ResNet.size", "EAResNet.ResNet.size", "EAResNet.ResNet.new_ones.any", "EAResNet.ResNet.new_ones.float", "expert_help_target.sum().item", "expert_help_target.size", "expert_help_target.size", "expert_help_target.size", "EAResNet.ResNet.new_tensor", "EAResNet.ResNet.pred_expert_help", "EAResNet.ResNet.new_ones.sum().item", "EAResNet.ResNet.new_ones.size", "EAResNet.ResNet.pred_expert_help", "EAResNet.ResNet.new_ones.clone", "expert_help_target.sum", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "EAResNet.ResNet.new_ones.sum", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ride_resnet_cifar.ResNet_s._separate_part", "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ride_resnet_cifar.ResNet_s._separate_part", "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ride_resnet_cifar.ResNet_s._separate_part", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ea_resnet_cifar.ResNet_s.pred_expert_help", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ea_resnet_cifar.ResNet_s.pred_expert_help"], ["", "def", "forward", "(", "self", ",", "x", ",", "target", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "shared_part", "=", "self", ".", "layer2", "(", "x", ")", "\n", "if", "self", ".", "share_layer3", ":", "\n", "            ", "shared_part", "=", "self", ".", "layer3", "(", "shared_part", ")", "\n", "\n", "", "if", "target", "is", "not", "None", ":", "# training time", "\n", "            ", "output", "=", "shared_part", ".", "new_zeros", "(", "(", "shared_part", ".", "size", "(", "0", ")", ",", "self", ".", "num_classes", ")", ")", "\n", "\n", "expert_help_preds", "=", "output", ".", "new_zeros", "(", "(", "output", ".", "size", "(", "0", ")", ",", "self", ".", "num_experts", "-", "1", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "# first column: correctness of the first model, second: correctness of expert of the first and second, etc.", "\n", "correctness", "=", "output", ".", "new_zeros", "(", "(", "output", ".", "size", "(", "0", ")", ",", "self", ".", "num_experts", ")", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "\n", "loss", "=", "output", ".", "new_zeros", "(", "(", "1", ",", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_experts", ")", ":", "\n", "                ", "output", "+=", "self", ".", "_separate_part", "(", "shared_part", ",", "i", ")", "\n", "correctness", "[", ":", ",", "i", "]", "=", "output", ".", "argmax", "(", "dim", "=", "1", ")", "==", "target", "# Or: just helpful, predict 1", "\n", "if", "i", "!=", "self", ".", "num_experts", "-", "1", ":", "\n", "                    ", "expert_help_preds", "[", ":", ",", "i", "]", "=", "self", ".", "pred_expert_help", "(", "(", "self", ".", "feat", ",", "output", "/", "(", "i", "+", "1", ")", ")", ",", "i", ")", ".", "view", "(", "(", "-", "1", ",", ")", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "self", ".", "num_experts", "-", "1", ")", ":", "\n", "# import ipdb; ipdb.set_trace()", "\n", "                ", "expert_help_target", "=", "(", "~", "correctness", "[", ":", ",", "i", "]", ")", "&", "correctness", "[", ":", ",", "i", "+", "1", ":", "]", ".", "any", "(", "dim", "=", "1", ")", "\n", "expert_help_pred", "=", "expert_help_preds", "[", ":", ",", "i", "]", "\n", "\n", "print", "(", "\"Helps ({}):\"", ".", "format", "(", "i", "+", "1", ")", ",", "expert_help_target", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "expert_help_target", ".", "size", "(", "0", ")", ")", "\n", "print", "(", "\"Prediction ({}):\"", ".", "format", "(", "i", "+", "1", ")", ",", "(", "torch", ".", "sigmoid", "(", "expert_help_pred", ")", ">", "0.5", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "expert_help_target", ".", "size", "(", "0", ")", ",", "(", "torch", ".", "sigmoid", "(", "expert_help_pred", ")", ">", "0.3", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "expert_help_target", ".", "size", "(", "0", ")", ")", "\n", "\n", "loss", "+=", "F", ".", "binary_cross_entropy_with_logits", "(", "expert_help_pred", ",", "expert_help_target", ".", "float", "(", ")", ",", "pos_weight", "=", "expert_help_pred", ".", "new_tensor", "(", "[", "self", ".", "pos_weight", "]", ")", ")", "\n", "\n", "# output with all experts", "\n", "", "return", "output", "/", "self", ".", "num_experts", ",", "loss", "/", "(", "self", ".", "num_experts", "-", "1", ")", "\n", "", "else", ":", "# test time", "\n", "            ", "expert_next", "=", "shared_part", ".", "new_ones", "(", "(", "shared_part", ".", "size", "(", "0", ")", ",", ")", ",", "dtype", "=", "torch", ".", "uint8", ")", "\n", "num_experts_for_each_sample", "=", "shared_part", ".", "new_ones", "(", "(", "shared_part", ".", "size", "(", "0", ")", ",", "1", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "output", "=", "self", ".", "_separate_part", "(", "shared_part", ",", "0", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "num_experts", ")", ":", "\n", "                ", "expert_help_pred", "=", "self", ".", "pred_expert_help", "(", "(", "self", ".", "feat", ",", "output", "[", "expert_next", "]", "/", "i", ")", ",", "i", "-", "1", ")", ".", "view", "(", "(", "-", "1", ",", ")", ")", "\n", "if", "not", "self", ".", "force_all", ":", "# For evaluating FLOPs", "\n", "                    ", "expert_next", "[", "expert_next", ".", "clone", "(", ")", "]", "=", "(", "torch", ".", "sigmoid", "(", "expert_help_pred", ")", ">", "0.5", ")", ".", "type", "(", "torch", ".", "uint8", ")", "\n", "", "print", "(", "\"expert ({}):\"", ".", "format", "(", "i", ")", ",", "expert_next", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "expert_next", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "not", "expert_next", ".", "any", "(", ")", ":", "\n", "                    ", "break", "\n", "", "output", "[", "expert_next", "]", "+=", "self", ".", "_separate_part", "(", "shared_part", "[", "expert_next", "]", ",", "i", ")", "\n", "num_experts_for_each_sample", "[", "expert_next", "]", "+=", "1", "\n", "\n", "", "return", "output", "/", "num_experts_for_each_sample", ".", "float", "(", ")", ",", "num_experts_for_each_sample", "\n", "\n", "", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.EAResNet.conv3x3": [[21, 25], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.EAResNeXt.NormedLinear.__init__": [[28, 32], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "EAResNeXt.NormedLinear.weight.data.uniform_().renorm_().mul_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "EAResNeXt.NormedLinear.weight.data.uniform_().renorm_", "EAResNeXt.NormedLinear.weight.data.uniform_"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ")", ":", "\n", "        ", "super", "(", "NormedLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "in_features", ",", "out_features", ")", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "1", ",", "1", ")", ".", "renorm_", "(", "2", ",", "1", ",", "1e-5", ")", ".", "mul_", "(", "1e5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.EAResNeXt.NormedLinear.forward": [[33, 36], ["torch.normalize().mm", "torch.normalize().mm", "torch.normalize().mm", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "normalize", "(", "x", ",", "dim", "=", "1", ")", ".", "mm", "(", "F", ".", "normalize", "(", "self", ".", "weight", ",", "dim", "=", "0", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.EAResNeXt.BasicBlock.__init__": [[40, 49], ["torch.Module.__init__", "EAResNeXt.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "EAResNeXt.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.conv3x3", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.EAResNeXt.BasicBlock.forward": [[50, 67], ["EAResNeXt.BasicBlock.conv1", "EAResNeXt.BasicBlock.bn1", "EAResNeXt.BasicBlock.relu", "EAResNeXt.BasicBlock.conv2", "EAResNeXt.BasicBlock.bn2", "EAResNeXt.BasicBlock.relu", "EAResNeXt.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.EAResNeXt.Bottleneck.__init__": [[71, 86], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "\n", "groups", "=", "1", ",", "base_width", "=", "64", ",", "is_last", "=", "False", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "width", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "width", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "width", ",", "width", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "groups", "=", "groups", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "width", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "width", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "is_last", "=", "is_last", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.EAResNeXt.Bottleneck.forward": [[87, 108], ["EAResNeXt.Bottleneck.conv1", "EAResNeXt.Bottleneck.bn1", "EAResNeXt.Bottleneck.relu", "EAResNeXt.Bottleneck.conv2", "EAResNeXt.Bottleneck.bn2", "EAResNeXt.Bottleneck.relu", "EAResNeXt.Bottleneck.conv3", "EAResNeXt.Bottleneck.bn3", "EAResNeXt.Bottleneck.relu", "EAResNeXt.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.EAResNeXt.ResNext.__init__": [[111, 193], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "EAResNeXt.ResNext._make_layer", "EAResNeXt.ResNext._make_layer", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "EAResNeXt.ResNext.modules", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "print", "torch.Dropout", "torch.Dropout", "torch.Dropout", "isinstance", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "EAResNeXt.ResNext.named_parameters", "EAResNeXt.ResNext._make_layer", "EAResNeXt.ResNext._make_layer", "m.weight.data.normal_", "isinstance", "torch.Linear", "torch.Linear", "torch.Linear", "range", "range", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_", "EAResNeXt.NormedLinear", "torch.Linear", "torch.Linear", "torch.Linear", "range", "torch.Linear", "torch.Linear", "torch.Linear", "param.requires_grad_", "param.requires_grad_", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet._make_layer", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet._make_layer", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet._make_layer", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "num_experts", ",", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "dropout", "=", "None", ",", "num_classes", "=", "1000", ",", "use_norm", "=", "False", ",", "reduce_dimension", "=", "False", ",", "layer3_output_dim", "=", "None", ",", "layer4_output_dim", "=", "None", ",", "top_choices_num", "=", "5", ",", "pos_weight", "=", "20", ",", "share_expert_help_pred_fc", "=", "True", ",", "force_all", "=", "False", ",", "s", "=", "30", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "num_experts", "=", "num_experts", "\n", "super", "(", "ResNext", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "inplanes", "=", "self", ".", "next_inplanes", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "inplanes", "=", "self", ".", "next_inplanes", "\n", "\n", "if", "layer3_output_dim", "is", "None", ":", "\n", "            ", "if", "reduce_dimension", ":", "\n", "                ", "layer3_output_dim", "=", "192", "\n", "", "else", ":", "\n", "                ", "layer3_output_dim", "=", "256", "\n", "\n", "", "", "if", "layer4_output_dim", "is", "None", ":", "\n", "            ", "if", "reduce_dimension", ":", "\n", "                ", "layer4_output_dim", "=", "384", "\n", "", "else", ":", "\n", "                ", "layer4_output_dim", "=", "512", "\n", "\n", "", "", "self", ".", "layer3s", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "_make_layer", "(", "block", ",", "layer3_output_dim", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "for", "_", "in", "range", "(", "num_experts", ")", "]", ")", "\n", "self", ".", "inplanes", "=", "self", ".", "next_inplanes", "\n", "self", ".", "layer4s", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "_make_layer", "(", "block", ",", "layer4_output_dim", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "for", "_", "in", "range", "(", "num_experts", ")", "]", ")", "\n", "self", ".", "inplanes", "=", "self", ".", "next_inplanes", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "\n", "self", ".", "use_dropout", "=", "True", "if", "dropout", "else", "False", "\n", "\n", "if", "self", ".", "use_dropout", ":", "\n", "            ", "print", "(", "'Using dropout.'", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "", "if", "use_norm", ":", "\n", "            ", "self", ".", "linears", "=", "nn", ".", "ModuleList", "(", "[", "NormedLinear", "(", "layer4_output_dim", "*", "block", ".", "expansion", ",", "num_classes", ")", "for", "_", "in", "range", "(", "num_experts", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "linears", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "layer4_output_dim", "*", "block", ".", "expansion", ",", "num_classes", ")", "for", "_", "in", "range", "(", "num_experts", ")", "]", ")", "\n", "s", "=", "1", "\n", "\n", "", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "self", ".", "top_choices_num", "=", "top_choices_num", "\n", "\n", "self", ".", "share_expert_help_pred_fc", "=", "share_expert_help_pred_fc", "\n", "self", ".", "layer4_feat", "=", "True", "\n", "\n", "expert_hidden_fc_output_dim", "=", "16", "\n", "self", ".", "expert_help_pred_hidden_fcs", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "(", "layer4_output_dim", "if", "self", ".", "layer4_feat", "else", "layer3_output_dim", ")", "*", "block", ".", "expansion", ",", "expert_hidden_fc_output_dim", ")", "for", "_", "in", "range", "(", "self", ".", "num_experts", "-", "1", ")", "]", ")", "\n", "if", "self", ".", "share_expert_help_pred_fc", ":", "\n", "            ", "self", ".", "expert_help_pred_fc", "=", "nn", ".", "Linear", "(", "expert_hidden_fc_output_dim", "+", "self", ".", "top_choices_num", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "expert_help_pred_fcs", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "expert_hidden_fc_output_dim", "+", "self", ".", "top_choices_num", ",", "1", ")", "for", "_", "in", "range", "(", "self", ".", "num_experts", "-", "1", ")", "]", ")", "\n", "\n", "", "self", ".", "pos_weight", "=", "pos_weight", "\n", "\n", "self", ".", "s", "=", "s", "\n", "\n", "self", ".", "force_all", "=", "force_all", "# For calulating FLOPs", "\n", "\n", "if", "not", "force_all", ":", "\n", "            ", "for", "name", ",", "param", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "\"expert_help_pred\"", "in", "name", ":", "\n", "                    ", "param", ".", "requires_grad_", "(", "True", ")", "\n", "", "else", ":", "\n", "                    ", "param", ".", "requires_grad_", "(", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.EAResNeXt.ResNext._hook_before_iter": [[194, 205], ["EAResNeXt.ResNext.modules", "isinstance", "print", "module.eval"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.eval"], ["", "", "", "", "def", "_hook_before_iter", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "training", ",", "\"_hook_before_iter should be called at training time only, after train() is called\"", "\n", "count", "=", "0", "\n", "for", "module", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "if", "module", ".", "weight", ".", "requires_grad", "==", "False", ":", "\n", "                    ", "module", ".", "eval", "(", ")", "\n", "count", "+=", "1", "\n", "\n", "", "", "", "if", "count", ">", "0", ":", "\n", "            ", "print", "(", "\"Warning: detected at least one frozen BN, set them to eval state. Count:\"", ",", "count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.EAResNeXt.ResNext._make_layer": [[206, 225], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "is_last", "=", "False", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "\n", "groups", "=", "self", ".", "groups", ",", "base_width", "=", "self", ".", "base_width", ")", ")", "\n", "self", ".", "next_inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "next_inplanes", ",", "planes", ",", "\n", "groups", "=", "self", ".", "groups", ",", "base_width", "=", "self", ".", "base_width", ",", "\n", "is_last", "=", "(", "is_last", "and", "i", "==", "blocks", "-", "1", ")", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.EAResNeXt.ResNext._separate_part": [[226, 244], ["EAResNeXt.ResNext.avgpool", "EAResNeXt.ResNext.view", "EAResNeXt.ResNext.size", "EAResNeXt.ResNext.dropout"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size"], ["", "def", "_separate_part", "(", "self", ",", "x", ",", "ind", ")", ":", "\n", "        ", "x", "=", "(", "self", ".", "layer3s", "[", "ind", "]", ")", "(", "x", ")", "\n", "if", "not", "self", ".", "layer4_feat", ":", "\n", "            ", "self", ".", "feat", "=", "x", "\n", "", "x", "=", "(", "self", ".", "layer4s", "[", "ind", "]", ")", "(", "x", ")", "\n", "if", "self", ".", "layer4_feat", ":", "\n", "            ", "self", ".", "feat", "=", "x", "\n", "\n", "", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "if", "self", ".", "use_dropout", ":", "\n", "            ", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "\n", "", "x", "=", "(", "self", ".", "linears", "[", "ind", "]", ")", "(", "x", ")", "\n", "x", "=", "x", "*", "self", ".", "s", "# This hyperparam s is originally in the loss function, but we moved it here to prevent using s multiple times in distillation.", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.EAResNeXt.ResNext.pred_expert_help": [[245, 259], ["torch.adaptive_avg_pool2d().flatten", "torch.adaptive_avg_pool2d().flatten", "torch.adaptive_avg_pool2d().flatten", "EAResNeXt.ResNext.relu", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "EAResNeXt.ResNext.norm", "EAResNeXt.ResNext.expert_help_pred_fc", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d"], "methods", ["None"], ["", "def", "pred_expert_help", "(", "self", ",", "input_part", ",", "i", ")", ":", "\n", "        ", "feature", ",", "logits", "=", "input_part", "\n", "feature", "=", "F", ".", "adaptive_avg_pool2d", "(", "feature", ",", "(", "1", ",", "1", ")", ")", ".", "flatten", "(", "1", ")", "\n", "feature", "=", "feature", "/", "feature", ".", "norm", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "feature", "=", "self", ".", "relu", "(", "(", "self", ".", "expert_help_pred_hidden_fcs", "[", "i", "]", ")", "(", "feature", ")", ")", "\n", "\n", "topk", ",", "_", "=", "torch", ".", "topk", "(", "logits", ",", "k", "=", "self", ".", "top_choices_num", ",", "dim", "=", "1", ")", "\n", "confidence_input", "=", "torch", ".", "cat", "(", "(", "topk", ",", "feature", ")", ",", "dim", "=", "1", ")", "\n", "if", "self", ".", "share_expert_help_pred_fc", ":", "\n", "            ", "expert_help_pred", "=", "self", ".", "expert_help_pred_fc", "(", "confidence_input", ")", "\n", "", "else", ":", "\n", "            ", "expert_help_pred", "=", "(", "self", ".", "expert_help_pred_fcs", "[", "i", "]", ")", "(", "confidence_input", ")", "\n", "", "return", "expert_help_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.EAResNeXt.ResNext.forward": [[260, 313], ["EAResNeXt.ResNext.conv1", "EAResNeXt.ResNext.bn1", "EAResNeXt.ResNext.relu", "EAResNeXt.ResNext.maxpool", "EAResNeXt.ResNext.layer1", "EAResNeXt.ResNext.layer2", "EAResNeXt.ResNext.new_zeros", "EAResNeXt.ResNext.new_zeros", "EAResNeXt.ResNext.new_zeros", "EAResNeXt.ResNext.new_zeros", "range", "range", "EAResNeXt.ResNext.new_ones", "EAResNeXt.ResNext.new_ones", "EAResNeXt.ResNext._separate_part", "range", "EAResNeXt.ResNext._separate_part", "print", "print", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "EAResNeXt.ResNext.pred_expert_help().view", "print", "EAResNeXt.ResNext._separate_part", "EAResNeXt.ResNext.size", "EAResNeXt.ResNext.size", "EAResNeXt.ResNext.size", "EAResNeXt.ResNext.argmax", "EAResNeXt.ResNext.pred_expert_help().view", "correctness[].any", "expert_help_target.float", "EAResNeXt.ResNext.size", "EAResNeXt.ResNext.size", "EAResNeXt.ResNext.new_ones.any", "expert_help_target.sum().item", "expert_help_target.size", "expert_help_target.size", "expert_help_target.size", "EAResNeXt.ResNext.new_tensor", "EAResNeXt.ResNext.pred_expert_help", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "EAResNeXt.ResNext.new_ones.sum().item", "EAResNeXt.ResNext.new_ones.size", "EAResNeXt.ResNext.pred_expert_help", "EAResNeXt.ResNext.new_ones.clone", "expert_help_target.sum", "EAResNeXt.ResNext.new_ones.sum", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ride_resnet_cifar.ResNet_s._separate_part", "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ride_resnet_cifar.ResNet_s._separate_part", "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ride_resnet_cifar.ResNet_s._separate_part", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ea_resnet_cifar.ResNet_s.pred_expert_help", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ea_resnet_cifar.ResNet_s.pred_expert_help"], ["", "def", "forward", "(", "self", ",", "x", ",", "target", "=", "None", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "shared_part", "=", "self", ".", "layer2", "(", "x", ")", "\n", "\n", "if", "target", "is", "not", "None", ":", "# training time", "\n", "            ", "output", "=", "shared_part", ".", "new_zeros", "(", "(", "shared_part", ".", "size", "(", "0", ")", ",", "self", ".", "num_classes", ")", ")", "\n", "\n", "expert_help_preds", "=", "output", ".", "new_zeros", "(", "(", "output", ".", "size", "(", "0", ")", ",", "self", ".", "num_experts", "-", "1", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "# first column: correctness of the first model, second: correctness of expert of the first and second, etc.", "\n", "correctness", "=", "output", ".", "new_zeros", "(", "(", "output", ".", "size", "(", "0", ")", ",", "self", ".", "num_experts", ")", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "\n", "loss", "=", "output", ".", "new_zeros", "(", "(", "1", ",", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_experts", ")", ":", "\n", "                ", "output", "+=", "self", ".", "_separate_part", "(", "shared_part", ",", "i", ")", "\n", "correctness", "[", ":", ",", "i", "]", "=", "output", ".", "argmax", "(", "dim", "=", "1", ")", "==", "target", "# Or: just helpful, predict 1", "\n", "if", "i", "!=", "self", ".", "num_experts", "-", "1", ":", "\n", "                    ", "expert_help_preds", "[", ":", ",", "i", "]", "=", "self", ".", "pred_expert_help", "(", "(", "self", ".", "feat", ",", "output", "/", "(", "i", "+", "1", ")", ")", ",", "i", ")", ".", "view", "(", "(", "-", "1", ",", ")", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "self", ".", "num_experts", "-", "1", ")", ":", "\n", "# import ipdb; ipdb.set_trace()", "\n", "                ", "expert_help_target", "=", "(", "~", "correctness", "[", ":", ",", "i", "]", ")", "&", "correctness", "[", ":", ",", "i", "+", "1", ":", "]", ".", "any", "(", "dim", "=", "1", ")", "\n", "expert_help_pred", "=", "expert_help_preds", "[", ":", ",", "i", "]", "\n", "\n", "print", "(", "\"Helps ({}):\"", ".", "format", "(", "i", "+", "1", ")", ",", "expert_help_target", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "expert_help_target", ".", "size", "(", "0", ")", ")", "\n", "print", "(", "\"Prediction ({}):\"", ".", "format", "(", "i", "+", "1", ")", ",", "(", "torch", ".", "sigmoid", "(", "expert_help_pred", ")", ">", "0.5", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "expert_help_target", ".", "size", "(", "0", ")", ",", "(", "torch", ".", "sigmoid", "(", "expert_help_pred", ")", ">", "0.3", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "expert_help_target", ".", "size", "(", "0", ")", ")", "\n", "\n", "loss", "+=", "F", ".", "binary_cross_entropy_with_logits", "(", "expert_help_pred", ",", "expert_help_target", ".", "float", "(", ")", ",", "pos_weight", "=", "expert_help_pred", ".", "new_tensor", "(", "[", "self", ".", "pos_weight", "]", ")", ")", "\n", "\n", "# output with all experts", "\n", "", "return", "output", "/", "self", ".", "num_experts", ",", "loss", "/", "(", "self", ".", "num_experts", "-", "1", ")", "\n", "", "else", ":", "# test time", "\n", "            ", "expert_next", "=", "shared_part", ".", "new_ones", "(", "(", "shared_part", ".", "size", "(", "0", ")", ",", ")", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "num_experts_for_each_sample", "=", "shared_part", ".", "new_ones", "(", "(", "shared_part", ".", "size", "(", "0", ")", ",", "1", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "output", "=", "self", ".", "_separate_part", "(", "shared_part", ",", "0", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "num_experts", ")", ":", "\n", "                ", "expert_help_pred", "=", "self", ".", "pred_expert_help", "(", "(", "self", ".", "feat", ",", "output", "[", "expert_next", "]", "/", "i", ")", ",", "i", "-", "1", ")", ".", "view", "(", "(", "-", "1", ",", ")", ")", "\n", "if", "not", "self", ".", "force_all", ":", "# For evaluating FLOPs", "\n", "                    ", "expert_next", "[", "expert_next", ".", "clone", "(", ")", "]", "=", "torch", ".", "sigmoid", "(", "expert_help_pred", ")", ">", "0.5", "\n", "", "print", "(", "\"expert ({}):\"", ".", "format", "(", "i", ")", ",", "expert_next", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "expert_next", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "not", "expert_next", ".", "any", "(", ")", ":", "\n", "                    ", "break", "\n", "", "output", "[", "expert_next", "]", "+=", "self", ".", "_separate_part", "(", "shared_part", "[", "expert_next", "]", ",", "i", ")", "\n", "num_experts_for_each_sample", "[", "expert_next", "]", "+=", "1", "\n", "\n", "", "return", "output", "/", "num_experts_for_each_sample", ",", "num_experts_for_each_sample", "\n", "\n", "", "return", "output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.beierzhu_xerm.fb_resnets.EAResNeXt.conv3x3": [[21, 25], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ea_resnet_cifar.NormedLinear.__init__": [[40, 44], ["torch.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "ea_resnet_cifar.NormedLinear.weight.data.uniform_().renorm_().mul_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "ea_resnet_cifar.NormedLinear.weight.data.uniform_().renorm_", "ea_resnet_cifar.NormedLinear.weight.data.uniform_"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ")", ":", "\n", "        ", "super", "(", "NormedLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "in_features", ",", "out_features", ")", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "1", ",", "1", ")", ".", "renorm_", "(", "2", ",", "1", ",", "1e-5", ")", ".", "mul_", "(", "1e5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ea_resnet_cifar.NormedLinear.forward": [[45, 48], ["torch.normalize().mm", "torch.normalize().mm", "torch.normalize().mm", "torch.normalize().mm", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "normalize", "(", "x", ",", "dim", "=", "1", ")", ".", "mm", "(", "F", ".", "normalize", "(", "self", ".", "weight", ",", "dim", "=", "0", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ea_resnet_cifar.LambdaLayer.__init__": [[51, 54], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "lambd", ")", ":", "\n", "        ", "super", "(", "LambdaLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lambd", "=", "lambd", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ea_resnet_cifar.LambdaLayer.forward": [[55, 57], ["ea_resnet_cifar.LambdaLayer.lambd"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "lambd", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ea_resnet_cifar.BasicBlock.__init__": [[62, 85], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "ea_resnet_cifar.LambdaLayer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ",", "option", "=", "'A'", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "if", "option", "==", "'A'", ":", "\n", "                ", "\"\"\"\n                For CIFAR10 ResNet paper uses option A.\n                \"\"\"", "\n", "self", ".", "planes", "=", "planes", "\n", "self", ".", "in_planes", "=", "in_planes", "\n", "# self.shortcut = LambdaLayer(lambda x: F.pad(x[:, :, ::2, ::2], (0, 0, 0, 0, planes // 4, planes // 4), \"constant\", 0))", "\n", "self", ".", "shortcut", "=", "LambdaLayer", "(", "lambda", "x", ":", "\n", "F", ".", "pad", "(", "x", "[", ":", ",", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", ",", "(", "0", ",", "0", ",", "0", ",", "0", ",", "(", "planes", "-", "in_planes", ")", "//", "2", ",", "(", "planes", "-", "in_planes", ")", "//", "2", ")", ",", "\"constant\"", ",", "0", ")", ")", "\n", "\n", "", "elif", "option", "==", "'B'", ":", "\n", "                ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ea_resnet_cifar.BasicBlock.forward": [[87, 93], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "ea_resnet_cifar.BasicBlock.bn2", "ea_resnet_cifar.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "ea_resnet_cifar.BasicBlock.bn1", "ea_resnet_cifar.BasicBlock.conv2", "ea_resnet_cifar.BasicBlock.conv1"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ea_resnet_cifar.ResNet_s.__init__": [[97, 159], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "ea_resnet_cifar.ResNet_s._make_layer", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "ea_resnet_cifar.ResNet_s.apply", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "ea_resnet_cifar.ResNet_s.named_parameters", "ea_resnet_cifar.ResNet_s._make_layer", "ea_resnet_cifar.ResNet_s._make_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "range", "range", "ea_resnet_cifar.NormedLinear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "range", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "param.requires_grad_", "param.requires_grad_", "range", "range", "range"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet._make_layer", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet._make_layer", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_experts", ",", "num_classes", "=", "10", ",", "reduce_dimension", "=", "False", ",", "layer2_output_dim", "=", "None", ",", "layer3_output_dim", "=", "None", ",", "top_choices_num", "=", "5", ",", "pos_weight", "=", "20", ",", "share_expert_help_pred_fc", "=", "True", ",", "force_all", "=", "False", ",", "use_norm", "=", "False", ",", "s", "=", "30", ")", ":", "\n", "        ", "super", "(", "ResNet_s", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_planes", "=", "16", "\n", "self", ".", "num_experts", "=", "num_experts", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "in_planes", "=", "self", ".", "next_in_planes", "\n", "\n", "if", "layer2_output_dim", "is", "None", ":", "\n", "            ", "if", "reduce_dimension", ":", "\n", "                ", "layer2_output_dim", "=", "24", "\n", "", "else", ":", "\n", "                ", "layer2_output_dim", "=", "32", "\n", "\n", "", "", "if", "layer3_output_dim", "is", "None", ":", "\n", "            ", "if", "reduce_dimension", ":", "\n", "                ", "layer3_output_dim", "=", "48", "\n", "", "else", ":", "\n", "                ", "layer3_output_dim", "=", "64", "\n", "\n", "", "", "self", ".", "layer2s", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "_make_layer", "(", "block", ",", "layer2_output_dim", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "for", "_", "in", "range", "(", "num_experts", ")", "]", ")", "\n", "self", ".", "in_planes", "=", "self", ".", "next_in_planes", "\n", "self", ".", "layer3s", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "_make_layer", "(", "block", ",", "layer3_output_dim", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "for", "_", "in", "range", "(", "num_experts", ")", "]", ")", "\n", "self", ".", "in_planes", "=", "self", ".", "next_in_planes", "\n", "\n", "if", "use_norm", ":", "\n", "            ", "self", ".", "linears", "=", "nn", ".", "ModuleList", "(", "[", "NormedLinear", "(", "layer3_output_dim", ",", "num_classes", ")", "for", "_", "in", "range", "(", "num_experts", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "s", "=", "1", "\n", "self", ".", "linears", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "layer3_output_dim", ",", "num_classes", ")", "for", "_", "in", "range", "(", "num_experts", ")", "]", ")", "\n", "\n", "", "self", ".", "num_classes", "=", "num_classes", "\n", "\n", "self", ".", "top_choices_num", "=", "top_choices_num", "\n", "\n", "self", ".", "share_expert_help_pred_fc", "=", "share_expert_help_pred_fc", "\n", "self", ".", "layer3_feat", "=", "True", "\n", "\n", "expert_hidden_fc_output_dim", "=", "16", "\n", "self", ".", "expert_help_pred_hidden_fcs", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "(", "layer3_output_dim", "if", "self", ".", "layer3_feat", "else", "layer2_output_dim", ")", "*", "block", ".", "expansion", ",", "expert_hidden_fc_output_dim", ")", "for", "_", "in", "range", "(", "self", ".", "num_experts", "-", "1", ")", "]", ")", "\n", "if", "self", ".", "share_expert_help_pred_fc", ":", "\n", "            ", "self", ".", "expert_help_pred_fc", "=", "nn", ".", "Linear", "(", "expert_hidden_fc_output_dim", "+", "self", ".", "top_choices_num", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "expert_help_pred_fcs", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "expert_hidden_fc_output_dim", "+", "self", ".", "top_choices_num", ",", "1", ")", "for", "_", "in", "range", "(", "self", ".", "num_experts", "-", "1", ")", "]", ")", "\n", "\n", "", "self", ".", "pos_weight", "=", "pos_weight", "\n", "\n", "self", ".", "s", "=", "s", "\n", "\n", "self", ".", "force_all", "=", "force_all", "\n", "\n", "if", "not", "force_all", ":", "\n", "            ", "for", "name", ",", "param", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "                ", "if", "\"expert_help_pred\"", "in", "name", ":", "\n", "                    ", "param", ".", "requires_grad_", "(", "True", ")", "\n", "", "else", ":", "\n", "                    ", "param", ".", "requires_grad_", "(", "False", ")", "\n", "\n", "", "", "", "self", ".", "apply", "(", "_weights_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ea_resnet_cifar.ResNet_s._make_layer": [[160, 169], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "self", ".", "next_in_planes", "=", "self", ".", "in_planes", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "next_in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "next_in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ea_resnet_cifar.ResNet_s._hook_before_iter": [[170, 181], ["ea_resnet_cifar.ResNet_s.modules", "isinstance", "print", "module.eval"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.eval"], ["", "def", "_hook_before_iter", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "training", ",", "\"_hook_before_iter should be called at training time only, after train() is called\"", "\n", "count", "=", "0", "\n", "for", "module", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "if", "module", ".", "weight", ".", "requires_grad", "==", "False", ":", "\n", "                    ", "module", ".", "eval", "(", ")", "\n", "count", "+=", "1", "\n", "\n", "", "", "", "if", "count", ">", "0", ":", "\n", "            ", "print", "(", "\"Warning: detected at least one frozen BN, set them to eval state. Count:\"", ",", "count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ea_resnet_cifar.ResNet_s._separate_part": [[182, 193], ["torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "out.view.view.view", "out.view.view.size", "out.view.view.size"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size"], ["", "", "def", "_separate_part", "(", "self", ",", "x", ",", "ind", ")", ":", "\n", "        ", "out", "=", "x", "\n", "out", "=", "(", "self", ".", "layer2s", "[", "ind", "]", ")", "(", "out", ")", "\n", "out", "=", "(", "self", ".", "layer3s", "[", "ind", "]", ")", "(", "out", ")", "\n", "self", ".", "feat", "=", "out", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "out", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "out", "=", "(", "self", ".", "linears", "[", "ind", "]", ")", "(", "out", ")", "\n", "out", "=", "out", "*", "self", ".", "s", "# This hyperparam s is originally in the loss function, but we moved it here to prevent using s multiple times in distillation.", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ea_resnet_cifar.ResNet_s.pred_expert_help": [[194, 208], ["torch.adaptive_avg_pool2d().flatten", "torch.adaptive_avg_pool2d().flatten", "torch.adaptive_avg_pool2d().flatten", "torch.adaptive_avg_pool2d().flatten", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.topk", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.relu.norm", "ea_resnet_cifar.ResNet_s.expert_help_pred_fc", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d", "torch.adaptive_avg_pool2d"], "methods", ["None"], ["", "def", "pred_expert_help", "(", "self", ",", "input_part", ",", "i", ")", ":", "\n", "        ", "feature", ",", "logits", "=", "input_part", "\n", "feature", "=", "F", ".", "adaptive_avg_pool2d", "(", "feature", ",", "(", "1", ",", "1", ")", ")", ".", "flatten", "(", "1", ")", "\n", "feature", "=", "feature", "/", "feature", ".", "norm", "(", "dim", "=", "1", ",", "keepdim", "=", "True", ")", "\n", "\n", "feature", "=", "F", ".", "relu", "(", "(", "self", ".", "expert_help_pred_hidden_fcs", "[", "i", "]", ")", "(", "feature", ")", ")", "\n", "\n", "topk", ",", "_", "=", "torch", ".", "topk", "(", "logits", ",", "k", "=", "self", ".", "top_choices_num", ",", "dim", "=", "1", ")", "\n", "confidence_input", "=", "torch", ".", "cat", "(", "(", "topk", ",", "feature", ")", ",", "dim", "=", "1", ")", "\n", "if", "self", ".", "share_expert_help_pred_fc", ":", "\n", "            ", "expert_help_pred", "=", "self", ".", "expert_help_pred_fc", "(", "confidence_input", ")", "\n", "", "else", ":", "\n", "            ", "expert_help_pred", "=", "(", "self", ".", "expert_help_pred_fcs", "[", "i", "]", ")", "(", "confidence_input", ")", "\n", "", "return", "expert_help_pred", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ea_resnet_cifar.ResNet_s.forward": [[209, 251], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "ea_resnet_cifar.ResNet_s.layer1", "ea_resnet_cifar.ResNet_s.bn1", "ea_resnet_cifar.ResNet_s.new_zeros", "ea_resnet_cifar.ResNet_s.new_zeros", "ea_resnet_cifar.ResNet_s.new_zeros", "ea_resnet_cifar.ResNet_s.new_zeros", "range", "range", "ea_resnet_cifar.ResNet_s.new_ones", "ea_resnet_cifar.ResNet_s.new_ones", "ea_resnet_cifar.ResNet_s._separate_part", "range", "ea_resnet_cifar.ResNet_s.conv1", "ea_resnet_cifar.ResNet_s._separate_part", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "torch.binary_cross_entropy_with_logits", "ea_resnet_cifar.ResNet_s.pred_expert_help().view", "print", "ea_resnet_cifar.ResNet_s._separate_part", "ea_resnet_cifar.ResNet_s.size", "ea_resnet_cifar.ResNet_s.size", "ea_resnet_cifar.ResNet_s.size", "ea_resnet_cifar.ResNet_s.argmax", "ea_resnet_cifar.ResNet_s.pred_expert_help().view", "correctness[].any", "expert_help_target.float", "ea_resnet_cifar.ResNet_s.size", "ea_resnet_cifar.ResNet_s.size", "ea_resnet_cifar.ResNet_s.new_ones.any", "ea_resnet_cifar.ResNet_s.new_tensor", "ea_resnet_cifar.ResNet_s.pred_expert_help", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "ea_resnet_cifar.ResNet_s.new_ones.sum().item", "ea_resnet_cifar.ResNet_s.new_ones.size", "ea_resnet_cifar.ResNet_s.pred_expert_help", "ea_resnet_cifar.ResNet_s.new_ones.clone", "ea_resnet_cifar.ResNet_s.new_ones.sum"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ride_resnet_cifar.ResNet_s._separate_part", "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ride_resnet_cifar.ResNet_s._separate_part", "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ride_resnet_cifar.ResNet_s._separate_part", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ea_resnet_cifar.ResNet_s.pred_expert_help", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ea_resnet_cifar.ResNet_s.pred_expert_help"], ["", "def", "forward", "(", "self", ",", "x", ",", "target", "=", "None", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "shared_part", "=", "self", ".", "layer1", "(", "out", ")", "\n", "\n", "if", "target", "is", "not", "None", ":", "# training time", "\n", "            ", "output", "=", "shared_part", ".", "new_zeros", "(", "(", "shared_part", ".", "size", "(", "0", ")", ",", "self", ".", "num_classes", ")", ")", "\n", "\n", "expert_help_preds", "=", "output", ".", "new_zeros", "(", "(", "output", ".", "size", "(", "0", ")", ",", "self", ".", "num_experts", "-", "1", ")", ",", "dtype", "=", "torch", ".", "float", ")", "\n", "# first column: correctness of the first model, second: correctness of expert of the first and second, etc.", "\n", "correctness", "=", "output", ".", "new_zeros", "(", "(", "output", ".", "size", "(", "0", ")", ",", "self", ".", "num_experts", ")", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "\n", "loss", "=", "output", ".", "new_zeros", "(", "(", "1", ",", ")", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "num_experts", ")", ":", "\n", "                ", "output", "+=", "self", ".", "_separate_part", "(", "shared_part", ",", "i", ")", "\n", "correctness", "[", ":", ",", "i", "]", "=", "output", ".", "argmax", "(", "dim", "=", "1", ")", "==", "target", "# Or: just helpful, predict 1", "\n", "if", "i", "!=", "self", ".", "num_experts", "-", "1", ":", "\n", "                    ", "expert_help_preds", "[", ":", ",", "i", "]", "=", "self", ".", "pred_expert_help", "(", "(", "self", ".", "feat", ",", "output", "/", "(", "i", "+", "1", ")", ")", ",", "i", ")", ".", "view", "(", "(", "-", "1", ",", ")", ")", "\n", "\n", "", "", "for", "i", "in", "range", "(", "self", ".", "num_experts", "-", "1", ")", ":", "\n", "                ", "expert_help_target", "=", "(", "~", "correctness", "[", ":", ",", "i", "]", ")", "&", "correctness", "[", ":", ",", "i", "+", "1", ":", "]", ".", "any", "(", "dim", "=", "1", ")", "\n", "expert_help_pred", "=", "expert_help_preds", "[", ":", ",", "i", "]", "\n", "\n", "loss", "+=", "F", ".", "binary_cross_entropy_with_logits", "(", "expert_help_pred", ",", "expert_help_target", ".", "float", "(", ")", ",", "pos_weight", "=", "expert_help_pred", ".", "new_tensor", "(", "[", "self", ".", "pos_weight", "]", ")", ")", "\n", "\n", "# output with all experts", "\n", "", "return", "output", "/", "self", ".", "num_experts", ",", "loss", "/", "(", "self", ".", "num_experts", "-", "1", ")", "\n", "", "else", ":", "# test time", "\n", "            ", "expert_next", "=", "shared_part", ".", "new_ones", "(", "(", "shared_part", ".", "size", "(", "0", ")", ",", ")", ",", "dtype", "=", "torch", ".", "bool", ")", "\n", "num_experts_for_each_sample", "=", "shared_part", ".", "new_ones", "(", "(", "shared_part", ".", "size", "(", "0", ")", ",", "1", ")", ",", "dtype", "=", "torch", ".", "long", ")", "\n", "output", "=", "self", ".", "_separate_part", "(", "shared_part", ",", "0", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "self", ".", "num_experts", ")", ":", "\n", "                ", "expert_help_pred", "=", "self", ".", "pred_expert_help", "(", "(", "self", ".", "feat", ",", "output", "[", "expert_next", "]", "/", "i", ")", ",", "i", "-", "1", ")", ".", "view", "(", "(", "-", "1", ",", ")", ")", "\n", "if", "not", "self", ".", "force_all", ":", "\n", "                    ", "expert_next", "[", "expert_next", ".", "clone", "(", ")", "]", "=", "torch", ".", "sigmoid", "(", "expert_help_pred", ")", ">", "0.5", "\n", "", "print", "(", "\"expert ({}):\"", ".", "format", "(", "i", ")", ",", "expert_next", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "expert_next", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "not", "expert_next", ".", "any", "(", ")", ":", "\n", "                    ", "break", "\n", "", "output", "[", "expert_next", "]", "+=", "self", ".", "_separate_part", "(", "shared_part", "[", "expert_next", "]", ",", "i", ")", "\n", "num_experts_for_each_sample", "[", "expert_next", "]", "+=", "1", "\n", "\n", "", "return", "output", "/", "num_experts_for_each_sample", ",", "num_experts_for_each_sample", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ea_resnet_cifar._weights_init": [[33, 37], ["isinstance", "isinstance", "torch.kaiming_normal_"], "function", ["None"], ["def", "_weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ea_resnet_cifar.resnet20": [[252, 254], ["ea_resnet_cifar.ResNet_s"], "function", ["None"], ["", "", "", "def", "resnet20", "(", ")", ":", "\n", "    ", "return", "ResNet_s", "(", "BasicBlock", ",", "[", "3", ",", "3", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ea_resnet_cifar.resnet32": [[256, 258], ["ea_resnet_cifar.ResNet_s"], "function", ["None"], ["", "def", "resnet32", "(", "num_classes", "=", "10", ",", "use_norm", "=", "False", ")", ":", "\n", "    ", "return", "ResNet_s", "(", "BasicBlock", ",", "[", "5", ",", "5", ",", "5", "]", ",", "num_classes", "=", "num_classes", ",", "use_norm", "=", "use_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ea_resnet_cifar.resnet44": [[260, 262], ["ea_resnet_cifar.ResNet_s"], "function", ["None"], ["", "def", "resnet44", "(", ")", ":", "\n", "    ", "return", "ResNet_s", "(", "BasicBlock", ",", "[", "7", ",", "7", ",", "7", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ea_resnet_cifar.resnet56": [[264, 266], ["ea_resnet_cifar.ResNet_s"], "function", ["None"], ["", "def", "resnet56", "(", ")", ":", "\n", "    ", "return", "ResNet_s", "(", "BasicBlock", ",", "[", "9", ",", "9", ",", "9", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ea_resnet_cifar.resnet110": [[268, 270], ["ea_resnet_cifar.ResNet_s"], "function", ["None"], ["", "def", "resnet110", "(", ")", ":", "\n", "    ", "return", "ResNet_s", "(", "BasicBlock", ",", "[", "18", ",", "18", ",", "18", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ea_resnet_cifar.resnet1202": [[272, 274], ["ea_resnet_cifar.ResNet_s"], "function", ["None"], ["", "def", "resnet1202", "(", ")", ":", "\n", "    ", "return", "ResNet_s", "(", "BasicBlock", ",", "[", "200", ",", "200", ",", "200", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ea_resnet_cifar.test": [[276, 284], ["filter", "print", "print", "net.parameters", "np.prod", "len", "list", "x.data.numpy", "filter", "net.parameters", "len", "p.data.size"], "function", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size"], ["", "def", "test", "(", "net", ")", ":", "\n", "    ", "import", "numpy", "as", "np", "\n", "total_params", "=", "0", "\n", "\n", "for", "x", "in", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "net", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "total_params", "+=", "np", ".", "prod", "(", "x", ".", "data", ".", "numpy", "(", ")", ".", "shape", ")", "\n", "", "print", "(", "\"Total number of params\"", ",", "total_params", ")", "\n", "print", "(", "\"Total layers\"", ",", "len", "(", "list", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", "and", "len", "(", "p", ".", "data", ".", "size", "(", ")", ")", ">", "1", ",", "net", ".", "parameters", "(", ")", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ride_resnet_cifar.NormedLinear.__init__": [[42, 46], ["torch.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "ride_resnet_cifar.NormedLinear.weight.data.uniform_().renorm_().mul_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "ride_resnet_cifar.NormedLinear.weight.data.uniform_().renorm_", "ride_resnet_cifar.NormedLinear.weight.data.uniform_"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ")", ":", "\n", "        ", "super", "(", "NormedLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "in_features", ",", "out_features", ")", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "1", ",", "1", ")", ".", "renorm_", "(", "2", ",", "1", ",", "1e-5", ")", ".", "mul_", "(", "1e5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ride_resnet_cifar.NormedLinear.forward": [[47, 50], ["torch.normalize().mm", "torch.normalize().mm", "torch.normalize().mm", "torch.normalize().mm", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "normalize", "(", "x", ",", "dim", "=", "1", ")", ".", "mm", "(", "F", ".", "normalize", "(", "self", ".", "weight", ",", "dim", "=", "0", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ride_resnet_cifar.LambdaLayer.__init__": [[53, 56], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "lambd", ")", ":", "\n", "        ", "super", "(", "LambdaLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lambd", "=", "lambd", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ride_resnet_cifar.LambdaLayer.forward": [[57, 59], ["ride_resnet_cifar.LambdaLayer.lambd"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "lambd", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ride_resnet_cifar.BasicBlock.__init__": [[64, 87], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "ride_resnet_cifar.LambdaLayer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ",", "option", "=", "'A'", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "if", "option", "==", "'A'", ":", "\n", "                ", "\"\"\"\n                For CIFAR10 ResNet paper uses option A.\n                \"\"\"", "\n", "self", ".", "planes", "=", "planes", "\n", "self", ".", "in_planes", "=", "in_planes", "\n", "# self.shortcut = LambdaLayer(lambda x: F.pad(x[:, :, ::2, ::2], (0, 0, 0, 0, planes // 4, planes // 4), \"constant\", 0))", "\n", "self", ".", "shortcut", "=", "LambdaLayer", "(", "lambda", "x", ":", "\n", "F", ".", "pad", "(", "x", "[", ":", ",", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", ",", "(", "0", ",", "0", ",", "0", ",", "0", ",", "(", "planes", "-", "in_planes", ")", "//", "2", ",", "(", "planes", "-", "in_planes", ")", "//", "2", ")", ",", "\"constant\"", ",", "0", ")", ")", "\n", "\n", "", "elif", "option", "==", "'B'", ":", "\n", "                ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ride_resnet_cifar.BasicBlock.forward": [[89, 95], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "ride_resnet_cifar.BasicBlock.bn2", "ride_resnet_cifar.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "ride_resnet_cifar.BasicBlock.bn1", "ride_resnet_cifar.BasicBlock.conv2", "ride_resnet_cifar.BasicBlock.conv1"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ride_resnet_cifar.ResNet_s.__init__": [[99, 143], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "ride_resnet_cifar.ResNet_s._make_layer", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "ride_resnet_cifar.ResNet_s.apply", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "list", "ride_resnet_cifar.ResNet_s._make_layer", "ride_resnet_cifar.ResNet_s._make_layer", "range", "range", "range", "ride_resnet_cifar.NormedLinear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "int", "range", "range", "use_experts.split"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet._make_layer", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet._make_layer", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_experts", ",", "num_classes", "=", "10", ",", "reduce_dimension", "=", "False", ",", "layer2_output_dim", "=", "None", ",", "layer3_output_dim", "=", "None", ",", "use_norm", "=", "False", ",", "use_experts", "=", "None", ",", "s", "=", "30", ")", ":", "\n", "        ", "super", "(", "ResNet_s", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_planes", "=", "16", "\n", "self", ".", "num_experts", "=", "num_experts", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "in_planes", "=", "self", ".", "next_in_planes", "\n", "\n", "if", "layer2_output_dim", "is", "None", ":", "\n", "            ", "if", "reduce_dimension", ":", "\n", "                ", "layer2_output_dim", "=", "24", "\n", "", "else", ":", "\n", "                ", "layer2_output_dim", "=", "32", "\n", "\n", "", "", "if", "layer3_output_dim", "is", "None", ":", "\n", "            ", "if", "reduce_dimension", ":", "\n", "                ", "layer3_output_dim", "=", "48", "\n", "", "else", ":", "\n", "                ", "layer3_output_dim", "=", "64", "\n", "\n", "", "", "self", ".", "layer2s", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "_make_layer", "(", "block", ",", "layer2_output_dim", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "for", "_", "in", "range", "(", "num_experts", ")", "]", ")", "\n", "self", ".", "in_planes", "=", "self", ".", "next_in_planes", "\n", "self", ".", "layer3s", "=", "nn", ".", "ModuleList", "(", "[", "self", ".", "_make_layer", "(", "block", ",", "layer3_output_dim", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "for", "_", "in", "range", "(", "num_experts", ")", "]", ")", "\n", "self", ".", "in_planes", "=", "self", ".", "next_in_planes", "\n", "\n", "if", "use_norm", ":", "\n", "            ", "self", ".", "linears", "=", "nn", ".", "ModuleList", "(", "[", "NormedLinear", "(", "layer3_output_dim", ",", "num_classes", ")", "for", "_", "in", "range", "(", "num_experts", ")", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "linears", "=", "nn", ".", "ModuleList", "(", "[", "nn", ".", "Linear", "(", "layer3_output_dim", ",", "num_classes", ")", "for", "_", "in", "range", "(", "num_experts", ")", "]", ")", "\n", "s", "=", "1", "\n", "\n", "", "if", "use_experts", "is", "None", ":", "\n", "            ", "self", ".", "use_experts", "=", "list", "(", "range", "(", "num_experts", ")", ")", "\n", "", "elif", "use_experts", "==", "\"rand\"", ":", "\n", "            ", "self", ".", "use_experts", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "use_experts", "=", "[", "int", "(", "item", ")", "for", "item", "in", "use_experts", ".", "split", "(", "\",\"", ")", "]", "\n", "\n", "", "self", ".", "s", "=", "s", "\n", "\n", "self", ".", "apply", "(", "_weights_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ride_resnet_cifar.ResNet_s._make_layer": [[144, 153], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "self", ".", "next_in_planes", "=", "self", ".", "in_planes", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "next_in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "next_in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ride_resnet_cifar.ResNet_s._hook_before_iter": [[154, 165], ["ride_resnet_cifar.ResNet_s.modules", "isinstance", "print", "module.eval"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.eval"], ["", "def", "_hook_before_iter", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "training", ",", "\"_hook_before_iter should be called at training time only, after train() is called\"", "\n", "count", "=", "0", "\n", "for", "module", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "if", "module", ".", "weight", ".", "requires_grad", "==", "False", ":", "\n", "                    ", "module", ".", "eval", "(", ")", "\n", "count", "+=", "1", "\n", "\n", "", "", "", "if", "count", ">", "0", ":", "\n", "            ", "print", "(", "\"Warning: detected at least one frozen BN, set them to eval state. Count:\"", ",", "count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ride_resnet_cifar.ResNet_s._separate_part": [[166, 177], ["ride_resnet_cifar.ResNet_s.feat_before_GAP.append", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "out.view.view.view", "ride_resnet_cifar.ResNet_s.feat.append", "out.view.view.size", "out.view.view.size"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size"], ["", "", "def", "_separate_part", "(", "self", ",", "x", ",", "ind", ")", ":", "\n", "        ", "out", "=", "x", "\n", "out", "=", "(", "self", ".", "layer2s", "[", "ind", "]", ")", "(", "out", ")", "\n", "out", "=", "(", "self", ".", "layer3s", "[", "ind", "]", ")", "(", "out", ")", "\n", "self", ".", "feat_before_GAP", ".", "append", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "out", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "self", ".", "feat", ".", "append", "(", "out", ")", "\n", "out", "=", "(", "self", ".", "linears", "[", "ind", "]", ")", "(", "out", ")", "\n", "out", "=", "out", "*", "self", ".", "s", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ride_resnet_cifar.ResNet_s.forward": [[178, 198], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "ride_resnet_cifar.ResNet_s.layer1", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "torch.stack().mean", "ride_resnet_cifar.ResNet_s.bn1", "random.sample", "outs.append", "ride_resnet_cifar.ResNet_s.conv1", "range", "ride_resnet_cifar.ResNet_s._separate_part", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ride_resnet_cifar.ResNet_s._separate_part"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "\n", "outs", "=", "[", "]", "\n", "self", ".", "feat", "=", "[", "]", "\n", "self", ".", "logits", "=", "outs", "\n", "self", ".", "feat_before_GAP", "=", "[", "]", "\n", "\n", "if", "self", ".", "use_experts", "is", "None", ":", "\n", "            ", "use_experts", "=", "random", ".", "sample", "(", "range", "(", "self", ".", "num_experts", ")", ",", "self", ".", "num_experts", "-", "1", ")", "\n", "", "else", ":", "\n", "            ", "use_experts", "=", "self", ".", "use_experts", "\n", "\n", "", "for", "ind", "in", "use_experts", ":", "\n", "            ", "outs", ".", "append", "(", "self", ".", "_separate_part", "(", "out", ",", "ind", ")", ")", "\n", "", "self", ".", "feat", "=", "torch", ".", "stack", "(", "self", ".", "feat", ",", "dim", "=", "1", ")", "\n", "self", ".", "feat_before_GAP", "=", "torch", ".", "stack", "(", "self", ".", "feat_before_GAP", ",", "dim", "=", "1", ")", "\n", "final_out", "=", "torch", ".", "stack", "(", "outs", ",", "dim", "=", "1", ")", ".", "mean", "(", "dim", "=", "1", ")", "\n", "return", "final_out", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ride_resnet_cifar._weights_init": [[35, 39], ["isinstance", "isinstance", "torch.kaiming_normal_"], "function", ["None"], ["def", "_weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ride_resnet_cifar.resnet20": [[199, 201], ["ride_resnet_cifar.ResNet_s"], "function", ["None"], ["", "", "def", "resnet20", "(", ")", ":", "\n", "    ", "return", "ResNet_s", "(", "BasicBlock", ",", "[", "3", ",", "3", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ride_resnet_cifar.resnet32": [[203, 205], ["ride_resnet_cifar.ResNet_s"], "function", ["None"], ["", "def", "resnet32", "(", "num_classes", "=", "10", ",", "use_norm", "=", "False", ")", ":", "\n", "    ", "return", "ResNet_s", "(", "BasicBlock", ",", "[", "5", ",", "5", ",", "5", "]", ",", "num_classes", "=", "num_classes", ",", "use_norm", "=", "use_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ride_resnet_cifar.resnet44": [[207, 209], ["ride_resnet_cifar.ResNet_s"], "function", ["None"], ["", "def", "resnet44", "(", ")", ":", "\n", "    ", "return", "ResNet_s", "(", "BasicBlock", ",", "[", "7", ",", "7", ",", "7", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ride_resnet_cifar.resnet56": [[211, 213], ["ride_resnet_cifar.ResNet_s"], "function", ["None"], ["", "def", "resnet56", "(", ")", ":", "\n", "    ", "return", "ResNet_s", "(", "BasicBlock", ",", "[", "9", ",", "9", ",", "9", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ride_resnet_cifar.resnet110": [[215, 217], ["ride_resnet_cifar.ResNet_s"], "function", ["None"], ["", "def", "resnet110", "(", ")", ":", "\n", "    ", "return", "ResNet_s", "(", "BasicBlock", ",", "[", "18", ",", "18", ",", "18", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ride_resnet_cifar.resnet1202": [[219, 221], ["ride_resnet_cifar.ResNet_s"], "function", ["None"], ["", "def", "resnet1202", "(", ")", ":", "\n", "    ", "return", "ResNet_s", "(", "BasicBlock", ",", "[", "200", ",", "200", ",", "200", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.ride_resnet_cifar.test": [[223, 231], ["filter", "print", "print", "net.parameters", "np.prod", "len", "list", "x.data.numpy", "filter", "net.parameters", "len", "p.data.size"], "function", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size"], ["", "def", "test", "(", "net", ")", ":", "\n", "    ", "import", "numpy", "as", "np", "\n", "total_params", "=", "0", "\n", "\n", "for", "x", "in", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "net", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "total_params", "+=", "np", ".", "prod", "(", "x", ".", "data", ".", "numpy", "(", ")", ".", "shape", ")", "\n", "", "print", "(", "\"Total number of params\"", ",", "total_params", ")", "\n", "print", "(", "\"Total layers\"", ",", "len", "(", "list", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", "and", "len", "(", "p", ".", "data", ".", "size", "(", ")", ")", ">", "1", ",", "net", ".", "parameters", "(", ")", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.resnet_cifar.NormedLinear.__init__": [[40, 44], ["torch.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "resnet_cifar.NormedLinear.weight.data.uniform_().renorm_().mul_", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "resnet_cifar.NormedLinear.weight.data.uniform_().renorm_", "resnet_cifar.NormedLinear.weight.data.uniform_"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ")", ":", "\n", "        ", "super", "(", "NormedLinear", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "in_features", ",", "out_features", ")", ")", "\n", "self", ".", "weight", ".", "data", ".", "uniform_", "(", "-", "1", ",", "1", ")", ".", "renorm_", "(", "2", ",", "1", ",", "1e-5", ")", ".", "mul_", "(", "1e5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.resnet_cifar.NormedLinear.forward": [[45, 48], ["torch.normalize().mm", "torch.normalize().mm", "torch.normalize().mm", "torch.normalize().mm", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "normalize", "(", "x", ",", "dim", "=", "1", ")", ".", "mm", "(", "F", ".", "normalize", "(", "self", ".", "weight", ",", "dim", "=", "0", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.resnet_cifar.LambdaLayer.__init__": [[51, 54], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "lambd", ")", ":", "\n", "        ", "super", "(", "LambdaLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lambd", "=", "lambd", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.resnet_cifar.LambdaLayer.forward": [[55, 57], ["resnet_cifar.LambdaLayer.lambd"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "lambd", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.resnet_cifar.BasicBlock.__init__": [[62, 85], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "resnet_cifar.LambdaLayer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ",", "option", "=", "'A'", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "if", "option", "==", "'A'", ":", "\n", "                ", "\"\"\"\n                For CIFAR10 ResNet paper uses option A.\n                \"\"\"", "\n", "self", ".", "planes", "=", "planes", "\n", "self", ".", "in_planes", "=", "in_planes", "\n", "# self.shortcut = LambdaLayer(lambda x: F.pad(x[:, :, ::2, ::2], (0, 0, 0, 0, planes // 4, planes // 4), \"constant\", 0))", "\n", "self", ".", "shortcut", "=", "LambdaLayer", "(", "lambda", "x", ":", "\n", "F", ".", "pad", "(", "x", "[", ":", ",", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", ",", "(", "0", ",", "0", ",", "0", ",", "0", ",", "(", "planes", "-", "in_planes", ")", "//", "2", ",", "(", "planes", "-", "in_planes", ")", "//", "2", ")", ",", "\"constant\"", ",", "0", ")", ")", "\n", "\n", "", "elif", "option", "==", "'B'", ":", "\n", "                ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "self", ".", "expansion", "*", "planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.resnet_cifar.BasicBlock.forward": [[87, 93], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar.BasicBlock.bn2", "resnet_cifar.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar.BasicBlock.bn1", "resnet_cifar.BasicBlock.conv2", "resnet_cifar.BasicBlock.conv1"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.resnet_cifar.ResNet_s.__init__": [[97, 129], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "resnet_cifar.ResNet_s._make_layer", "resnet_cifar.ResNet_s._make_layer", "resnet_cifar.ResNet_s._make_layer", "resnet_cifar.ResNet_s.apply", "resnet_cifar.NormedLinear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet._make_layer", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet._make_layer", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ",", "reduce_dimension", "=", "False", ",", "layer2_output_dim", "=", "None", ",", "layer3_output_dim", "=", "None", ",", "use_norm", "=", "False", ",", "s", "=", "30", ")", ":", "\n", "        ", "super", "(", "ResNet_s", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "16", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "\n", "if", "layer2_output_dim", "is", "None", ":", "\n", "            ", "if", "reduce_dimension", ":", "\n", "                ", "layer2_output_dim", "=", "24", "\n", "", "else", ":", "\n", "                ", "layer2_output_dim", "=", "32", "\n", "\n", "", "", "if", "layer3_output_dim", "is", "None", ":", "\n", "            ", "if", "reduce_dimension", ":", "\n", "                ", "layer3_output_dim", "=", "48", "\n", "", "else", ":", "\n", "                ", "layer3_output_dim", "=", "64", "\n", "\n", "", "", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "layer2_output_dim", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "layer3_output_dim", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "\n", "if", "use_norm", ":", "\n", "            ", "self", ".", "linear", "=", "NormedLinear", "(", "layer3_output_dim", ",", "num_classes", ")", "\n", "", "else", ":", "\n", "            ", "s", "=", "1", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "layer3_output_dim", ",", "num_classes", ")", "\n", "\n", "", "self", ".", "s", "=", "s", "\n", "\n", "self", ".", "apply", "(", "_weights_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.resnet_cifar.ResNet_s._make_layer": [[130, 138], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.resnet_cifar.ResNet_s._hook_before_iter": [[139, 150], ["resnet_cifar.ResNet_s.modules", "isinstance", "print", "module.eval"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.eval"], ["", "def", "_hook_before_iter", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "training", ",", "\"_hook_before_iter should be called at training time only, after train() is called\"", "\n", "count", "=", "0", "\n", "for", "module", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "module", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "if", "module", ".", "weight", ".", "requires_grad", "==", "False", ":", "\n", "                    ", "module", ".", "eval", "(", ")", "\n", "count", "+=", "1", "\n", "\n", "", "", "", "if", "count", ">", "0", ":", "\n", "            ", "print", "(", "\"Warning: detected at least one frozen BN, set them to eval state. Count:\"", ",", "count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.resnet_cifar.ResNet_s.forward": [[151, 164], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "resnet_cifar.ResNet_s.layer1", "resnet_cifar.ResNet_s.layer2", "resnet_cifar.ResNet_s.layer3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "resnet_cifar.ResNet_s.view", "resnet_cifar.ResNet_s.linear", "resnet_cifar.ResNet_s.bn1", "resnet_cifar.ResNet_s.size", "resnet_cifar.ResNet_s.conv1", "resnet_cifar.ResNet_s.size"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "self", ".", "feat_before_GAP", "=", "out", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "out", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "self", ".", "feat", "=", "out", "\n", "\n", "out", "=", "self", ".", "linear", "(", "out", ")", "\n", "out", "=", "out", "*", "self", ".", "s", "# This hyperparam s is originally in the loss function, but we moved it here to prevent using s multiple times in distillation.", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.resnet_cifar._weights_init": [[33, 37], ["isinstance", "isinstance", "torch.kaiming_normal_"], "function", ["None"], ["def", "_weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.resnet_cifar.resnet20": [[166, 168], ["resnet_cifar.ResNet_s"], "function", ["None"], ["", "", "def", "resnet20", "(", ")", ":", "\n", "    ", "return", "ResNet_s", "(", "BasicBlock", ",", "[", "3", ",", "3", ",", "3", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.resnet_cifar.resnet32": [[170, 172], ["resnet_cifar.ResNet_s"], "function", ["None"], ["", "def", "resnet32", "(", "num_classes", "=", "10", ",", "use_norm", "=", "False", ")", ":", "\n", "    ", "return", "ResNet_s", "(", "BasicBlock", ",", "[", "5", ",", "5", ",", "5", "]", ",", "num_classes", "=", "num_classes", ",", "use_norm", "=", "use_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.resnet_cifar.resnet44": [[174, 176], ["resnet_cifar.ResNet_s"], "function", ["None"], ["", "def", "resnet44", "(", ")", ":", "\n", "    ", "return", "ResNet_s", "(", "BasicBlock", ",", "[", "7", ",", "7", ",", "7", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.resnet_cifar.resnet56": [[178, 180], ["resnet_cifar.ResNet_s"], "function", ["None"], ["", "def", "resnet56", "(", ")", ":", "\n", "    ", "return", "ResNet_s", "(", "BasicBlock", ",", "[", "9", ",", "9", ",", "9", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.resnet_cifar.resnet110": [[182, 184], ["resnet_cifar.ResNet_s"], "function", ["None"], ["", "def", "resnet110", "(", ")", ":", "\n", "    ", "return", "ResNet_s", "(", "BasicBlock", ",", "[", "18", ",", "18", ",", "18", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.resnet_cifar.resnet1202": [[186, 188], ["resnet_cifar.ResNet_s"], "function", ["None"], ["", "def", "resnet1202", "(", ")", ":", "\n", "    ", "return", "ResNet_s", "(", "BasicBlock", ",", "[", "200", ",", "200", ",", "200", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.resnet_cifar.test": [[190, 198], ["filter", "print", "print", "net.parameters", "np.prod", "len", "list", "x.data.numpy", "filter", "net.parameters", "len", "p.data.size"], "function", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size"], ["", "def", "test", "(", "net", ")", ":", "\n", "    ", "import", "numpy", "as", "np", "\n", "total_params", "=", "0", "\n", "\n", "for", "x", "in", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", ",", "net", ".", "parameters", "(", ")", ")", ":", "\n", "        ", "total_params", "+=", "np", ".", "prod", "(", "x", ".", "data", ".", "numpy", "(", ")", ".", "shape", ")", "\n", "", "print", "(", "\"Total number of params\"", ",", "total_params", ")", "\n", "print", "(", "\"Total layers\"", ",", "len", "(", "list", "(", "filter", "(", "lambda", "p", ":", "p", ".", "requires_grad", "and", "len", "(", "p", ".", "data", ".", "size", "(", ")", ")", ">", "1", ",", "net", ".", "parameters", "(", ")", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data_loader.cifar_data_loaders.CIFAR100DataLoader.__init__": [[15, 53], ["torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "len", "len", "torch.utils.data.DataLoader.__init__", "torchvision.datasets.CIFAR100", "torchvision.datasets.CIFAR100", "torchvision.datasets.CIFAR100", "numpy.unique", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.RandomRotation", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["def", "__init__", "(", "self", ",", "data_dir", ",", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "1", ",", "training", "=", "True", ")", ":", "\n", "        ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.5070751592371323", ",", "0.48654887331495095", ",", "0.4409178433670343", "]", ",", "\n", "std", "=", "[", "0.2673342858792401", ",", "0.2564384629170883", ",", "0.27615047132568404", "]", ")", "\n", "train_trsfm", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "RandomRotation", "(", "15", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "test_trsfm", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "if", "training", ":", "\n", "            ", "self", ".", "dataset", "=", "datasets", ".", "CIFAR100", "(", "data_dir", ",", "train", "=", "training", ",", "download", "=", "True", ",", "transform", "=", "train_trsfm", ")", "\n", "self", ".", "val_dataset", "=", "datasets", ".", "CIFAR100", "(", "data_dir", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "test_trsfm", ")", "# test set", "\n", "", "else", ":", "\n", "            ", "self", ".", "dataset", "=", "datasets", ".", "CIFAR100", "(", "data_dir", ",", "train", "=", "training", ",", "download", "=", "True", ",", "transform", "=", "test_trsfm", ")", "\n", "\n", "", "num_classes", "=", "len", "(", "np", ".", "unique", "(", "self", ".", "dataset", ".", "targets", ")", ")", "\n", "assert", "num_classes", "==", "100", "\n", "\n", "cls_num_list", "=", "[", "0", "]", "*", "num_classes", "\n", "for", "label", "in", "self", ".", "dataset", ".", "targets", ":", "\n", "            ", "cls_num_list", "[", "label", "]", "+=", "1", "\n", "\n", "", "self", ".", "cls_num_list", "=", "cls_num_list", "\n", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "n_samples", "=", "len", "(", "self", ".", "dataset", ")", "\n", "\n", "self", ".", "init_kwargs", "=", "{", "\n", "'batch_size'", ":", "batch_size", ",", "\n", "'shuffle'", ":", "self", ".", "shuffle", ",", "\n", "'num_workers'", ":", "num_workers", "\n", "}", "\n", "super", "(", ")", ".", "__init__", "(", "dataset", "=", "self", ".", "dataset", ",", "**", "self", ".", "init_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data_loader.cifar_data_loaders.CIFAR100DataLoader.split_validation": [[54, 59], ["torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "split_validation", "(", "self", ")", ":", "\n", "# If you do not want to validate:", "\n", "# return None", "\n", "# If you want to validate:", "\n", "        ", "return", "DataLoader", "(", "dataset", "=", "self", ".", "val_dataset", ",", "**", "self", ".", "init_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data_loader.cifar_data_loaders.BalancedSampler.__init__": [[61, 69], ["len", "random.shuffle", "range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "buckets", ",", "retain_epoch_size", "=", "False", ")", ":", "\n", "        ", "for", "bucket", "in", "buckets", ":", "\n", "            ", "random", ".", "shuffle", "(", "bucket", ")", "\n", "\n", "", "self", ".", "bucket_num", "=", "len", "(", "buckets", ")", "\n", "self", ".", "buckets", "=", "buckets", "\n", "self", ".", "bucket_pointers", "=", "[", "0", "for", "_", "in", "range", "(", "self", ".", "bucket_num", ")", "]", "\n", "self", ".", "retain_epoch_size", "=", "retain_epoch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data_loader.cifar_data_loaders.BalancedSampler.__iter__": [[70, 75], ["cifar_data_loaders.BalancedSampler.__len__", "cifar_data_loaders.BalancedSampler._next_item"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.dataloader.LT_Dataset.__len__", "home.repos.pwc.inspect_result.beierzhu_xerm.data_loader.imagenet_lt_data_loaders.BalancedSampler._next_item"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "count", "=", "self", ".", "__len__", "(", ")", "\n", "while", "count", ">", "0", ":", "\n", "            ", "yield", "self", ".", "_next_item", "(", ")", "\n", "count", "-=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data_loader.cifar_data_loaders.BalancedSampler._next_item": [[76, 85], ["random.randint", "len", "random.shuffle"], "methods", ["None"], ["", "", "def", "_next_item", "(", "self", ")", ":", "\n", "        ", "bucket_idx", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "bucket_num", "-", "1", ")", "\n", "bucket", "=", "self", ".", "buckets", "[", "bucket_idx", "]", "\n", "item", "=", "bucket", "[", "self", ".", "bucket_pointers", "[", "bucket_idx", "]", "]", "\n", "self", ".", "bucket_pointers", "[", "bucket_idx", "]", "+=", "1", "\n", "if", "self", ".", "bucket_pointers", "[", "bucket_idx", "]", "==", "len", "(", "bucket", ")", ":", "\n", "            ", "self", ".", "bucket_pointers", "[", "bucket_idx", "]", "=", "0", "\n", "random", ".", "shuffle", "(", "bucket", ")", "\n", "", "return", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data_loader.cifar_data_loaders.BalancedSampler.__len__": [[86, 91], ["sum", "max", "len", "len"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "retain_epoch_size", ":", "\n", "            ", "return", "sum", "(", "[", "len", "(", "bucket", ")", "for", "bucket", "in", "self", ".", "buckets", "]", ")", "# Acrually we need to upscale to next full batch", "\n", "", "else", ":", "\n", "            ", "return", "max", "(", "[", "len", "(", "bucket", ")", "for", "bucket", "in", "self", ".", "buckets", "]", ")", "*", "self", ".", "bucket_num", "# Ensures every instance has the chance to be visited in an epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data_loader.cifar_data_loaders.ImbalanceCIFAR100DataLoader.__init__": [[96, 152], ["torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.datasets.CIFAR100", "len", "torch.utils.data.DataLoader.__init__", "imbalance_cifar.IMBALANCECIFAR100", "numpy.unique", "torch.FloatTensor", "torch.FloatTensor().sum", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.RandomRotation", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "enumerate", "cifar_data_loaders.BalancedSampler", "print", "torch.FloatTensor", "buckets[].append", "range"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["def", "__init__", "(", "self", ",", "data_dir", ",", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "1", ",", "training", "=", "True", ",", "balanced", "=", "False", ",", "retain_epoch_size", "=", "True", ",", "imb_type", "=", "'exp'", ",", "imb_factor", "=", "0.01", ")", ":", "\n", "        ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.4914", ",", "0.4822", ",", "0.4465", "]", ",", "\n", "std", "=", "[", "0.2023", ",", "0.1994", ",", "0.2010", "]", ")", "\n", "train_trsfm", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "RandomRotation", "(", "15", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "test_trsfm", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "test_dataset", "=", "datasets", ".", "CIFAR100", "(", "data_dir", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "test_trsfm", ")", "# test set", "\n", "\n", "if", "training", ":", "\n", "            ", "dataset", "=", "IMBALANCECIFAR100", "(", "data_dir", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "train_trsfm", ",", "imb_type", "=", "imb_type", ",", "imb_factor", "=", "imb_factor", ")", "\n", "val_dataset", "=", "test_dataset", "\n", "", "else", ":", "\n", "            ", "dataset", "=", "test_dataset", "\n", "val_dataset", "=", "None", "\n", "\n", "", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "val_dataset", "=", "val_dataset", "\n", "\n", "num_classes", "=", "len", "(", "np", ".", "unique", "(", "dataset", ".", "targets", ")", ")", "\n", "assert", "num_classes", "==", "100", "\n", "\n", "cls_num_list", "=", "[", "0", "]", "*", "num_classes", "\n", "for", "label", "in", "dataset", ".", "targets", ":", "\n", "            ", "cls_num_list", "[", "label", "]", "+=", "1", "\n", "\n", "", "self", ".", "cls_num_list", "=", "cls_num_list", "\n", "self", ".", "prior", "=", "torch", ".", "FloatTensor", "(", "cls_num_list", ")", "/", "torch", ".", "FloatTensor", "(", "cls_num_list", ")", ".", "sum", "(", ")", "\n", "\n", "if", "balanced", ":", "\n", "            ", "if", "training", ":", "\n", "                ", "buckets", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_classes", ")", "]", "\n", "for", "idx", ",", "label", "in", "enumerate", "(", "dataset", ".", "targets", ")", ":", "\n", "                    ", "buckets", "[", "label", "]", ".", "append", "(", "idx", ")", "\n", "", "sampler", "=", "BalancedSampler", "(", "buckets", ",", "retain_epoch_size", ")", "\n", "shuffle", "=", "False", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"Test set will not be evaluated with balanced sampler, nothing is done to make it balanced\"", ")", "\n", "", "", "else", ":", "\n", "            ", "sampler", "=", "None", "\n", "\n", "", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "init_kwargs", "=", "{", "\n", "'batch_size'", ":", "batch_size", ",", "\n", "'shuffle'", ":", "self", ".", "shuffle", ",", "\n", "'num_workers'", ":", "num_workers", "\n", "}", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "dataset", "=", "self", ".", "dataset", ",", "**", "self", ".", "init_kwargs", ",", "sampler", "=", "sampler", ")", "# Note that sampler does not apply to validation set", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data_loader.cifar_data_loaders.ImbalanceCIFAR100DataLoader.split_validation": [[153, 158], ["torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "split_validation", "(", "self", ")", ":", "\n", "# If you do not want to validate:", "\n", "# return None", "\n", "# If you want to validate:", "\n", "        ", "return", "DataLoader", "(", "dataset", "=", "self", ".", "val_dataset", ",", "**", "self", ".", "init_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data_loader.cifar_data_loaders.ImbalanceCIFAR10DataLoader.__init__": [[163, 217], ["torchvision.transforms.Normalize", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "len", "torch.utils.data.DataLoader.__init__", "imbalance_cifar.IMBALANCECIFAR10", "torchvision.datasets.CIFAR10", "torchvision.datasets.CIFAR10", "numpy.unique", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.RandomRotation", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "enumerate", "cifar_data_loaders.BalancedSampler", "print", "buckets[].append", "range"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["def", "__init__", "(", "self", ",", "data_dir", ",", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "1", ",", "training", "=", "True", ",", "balanced", "=", "False", ",", "retain_epoch_size", "=", "True", ")", ":", "\n", "        ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.4914", ",", "0.4822", ",", "0.4465", "]", ",", "\n", "std", "=", "[", "0.2023", ",", "0.1994", ",", "0.2010", "]", ")", "\n", "train_trsfm", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "RandomRotation", "(", "15", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "test_trsfm", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "normalize", ",", "\n", "]", ")", "\n", "\n", "if", "training", ":", "\n", "            ", "dataset", "=", "IMBALANCECIFAR10", "(", "data_dir", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "train_trsfm", ")", "\n", "val_dataset", "=", "datasets", ".", "CIFAR10", "(", "data_dir", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "test_trsfm", ")", "# test set", "\n", "", "else", ":", "\n", "            ", "dataset", "=", "datasets", ".", "CIFAR10", "(", "data_dir", ",", "train", "=", "False", ",", "download", "=", "True", ",", "transform", "=", "test_trsfm", ")", "# test set", "\n", "val_dataset", "=", "None", "\n", "\n", "", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "val_dataset", "=", "val_dataset", "\n", "\n", "num_classes", "=", "len", "(", "np", ".", "unique", "(", "dataset", ".", "targets", ")", ")", "\n", "assert", "num_classes", "==", "10", "\n", "\n", "cls_num_list", "=", "[", "0", "]", "*", "num_classes", "\n", "for", "label", "in", "dataset", ".", "targets", ":", "\n", "            ", "cls_num_list", "[", "label", "]", "+=", "1", "\n", "\n", "", "self", ".", "cls_num_list", "=", "cls_num_list", "\n", "\n", "if", "balanced", ":", "\n", "            ", "if", "training", ":", "\n", "                ", "buckets", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_classes", ")", "]", "\n", "for", "idx", ",", "label", "in", "enumerate", "(", "dataset", ".", "targets", ")", ":", "\n", "                    ", "buckets", "[", "label", "]", ".", "append", "(", "idx", ")", "\n", "", "sampler", "=", "BalancedSampler", "(", "buckets", ",", "retain_epoch_size", ")", "\n", "shuffle", "=", "False", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"Test set will not be evaluated with balanced sampler, nothing is done to make it balanced\"", ")", "\n", "", "", "else", ":", "\n", "            ", "sampler", "=", "None", "\n", "\n", "", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "init_kwargs", "=", "{", "\n", "'batch_size'", ":", "batch_size", ",", "\n", "'shuffle'", ":", "self", ".", "shuffle", ",", "\n", "'num_workers'", ":", "num_workers", "\n", "}", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "dataset", "=", "self", ".", "dataset", ",", "**", "self", ".", "init_kwargs", ",", "sampler", "=", "sampler", ")", "# Note that sampler does not apply to validation set", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data_loader.cifar_data_loaders.ImbalanceCIFAR10DataLoader.split_validation": [[218, 223], ["torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "split_validation", "(", "self", ")", ":", "\n", "# If you do not want to validate:", "\n", "# return None", "\n", "# If you want to validate:", "\n", "        ", "return", "DataLoader", "(", "dataset", "=", "self", ".", "val_dataset", ",", "**", "self", ".", "init_kwargs", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.beierzhu_xerm.data_loader.inaturalist_data_loaders.BalancedSampler.__init__": [[11, 19], ["len", "random.shuffle", "range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "buckets", ",", "retain_epoch_size", "=", "False", ")", ":", "\n", "        ", "for", "bucket", "in", "buckets", ":", "\n", "            ", "random", ".", "shuffle", "(", "bucket", ")", "\n", "\n", "", "self", ".", "bucket_num", "=", "len", "(", "buckets", ")", "\n", "self", ".", "buckets", "=", "buckets", "\n", "self", ".", "bucket_pointers", "=", "[", "0", "for", "_", "in", "range", "(", "self", ".", "bucket_num", ")", "]", "\n", "self", ".", "retain_epoch_size", "=", "retain_epoch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data_loader.inaturalist_data_loaders.BalancedSampler.__iter__": [[20, 25], ["inaturalist_data_loaders.BalancedSampler.__len__", "inaturalist_data_loaders.BalancedSampler._next_item"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.dataloader.LT_Dataset.__len__", "home.repos.pwc.inspect_result.beierzhu_xerm.data_loader.imagenet_lt_data_loaders.BalancedSampler._next_item"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "count", "=", "self", ".", "__len__", "(", ")", "\n", "while", "count", ">", "0", ":", "\n", "            ", "yield", "self", ".", "_next_item", "(", ")", "\n", "count", "-=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data_loader.inaturalist_data_loaders.BalancedSampler._next_item": [[26, 35], ["random.randint", "len", "random.shuffle"], "methods", ["None"], ["", "", "def", "_next_item", "(", "self", ")", ":", "\n", "        ", "bucket_idx", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "bucket_num", "-", "1", ")", "\n", "bucket", "=", "self", ".", "buckets", "[", "bucket_idx", "]", "\n", "item", "=", "bucket", "[", "self", ".", "bucket_pointers", "[", "bucket_idx", "]", "]", "\n", "self", ".", "bucket_pointers", "[", "bucket_idx", "]", "+=", "1", "\n", "if", "self", ".", "bucket_pointers", "[", "bucket_idx", "]", "==", "len", "(", "bucket", ")", ":", "\n", "            ", "self", ".", "bucket_pointers", "[", "bucket_idx", "]", "=", "0", "\n", "random", ".", "shuffle", "(", "bucket", ")", "\n", "", "return", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data_loader.inaturalist_data_loaders.BalancedSampler.__len__": [[36, 41], ["sum", "max", "len", "len"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "retain_epoch_size", ":", "\n", "            ", "return", "sum", "(", "[", "len", "(", "bucket", ")", "for", "bucket", "in", "self", ".", "buckets", "]", ")", "# Acrually we need to upscale to next full batch", "\n", "", "else", ":", "\n", "            ", "return", "max", "(", "[", "len", "(", "bucket", ")", "for", "bucket", "in", "self", ".", "buckets", "]", ")", "*", "self", ".", "bucket_num", "# Ensures every instance has the chance to be visited in an epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data_loader.inaturalist_data_loaders.LT_Dataset.__init__": [[44, 53], ["open", "inaturalist_data_loaders.LT_Dataset.img_path.append", "inaturalist_data_loaders.LT_Dataset.labels.append", "os.path.join", "int", "line.split", "line.split"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "txt", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "img_path", "=", "[", "]", "\n", "self", ".", "labels", "=", "[", "]", "\n", "self", ".", "transform", "=", "transform", "\n", "with", "open", "(", "txt", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "self", ".", "img_path", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "line", ".", "split", "(", ")", "[", "0", "]", ")", ")", "\n", "self", ".", "labels", ".", "append", "(", "int", "(", "line", ".", "split", "(", ")", "[", "1", "]", ")", ")", "\n", "", "", "self", ".", "targets", "=", "self", ".", "labels", "# Sampler needs to use targets", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data_loader.inaturalist_data_loaders.LT_Dataset.__len__": [[54, 56], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data_loader.inaturalist_data_loaders.LT_Dataset.__getitem__": [[57, 70], ["open", "PIL.Image.open().convert", "inaturalist_data_loaders.LT_Dataset.transform", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.iNaturalist18.gen_lists.convert"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "path", "=", "self", ".", "img_path", "[", "index", "]", "\n", "label", "=", "self", ".", "labels", "[", "index", "]", "\n", "\n", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "sample", "=", "Image", ".", "open", "(", "f", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "\n", "# return sample, label, path", "\n", "", "return", "sample", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data_loader.inaturalist_data_loaders.iNaturalistDataLoader.__init__": [[75, 130], ["torchvision.transforms.Compose", "torchvision.transforms.Compose", "len", "len", "torch.utils.data.DataLoader.__init__", "inaturalist_data_loaders.LT_Dataset", "inaturalist_data_loaders.LT_Dataset", "inaturalist_data_loaders.LT_Dataset", "numpy.unique", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "enumerate", "inaturalist_data_loaders.BalancedSampler", "print", "buckets[].append", "range"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["def", "__init__", "(", "self", ",", "data_dir", ",", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "1", ",", "training", "=", "True", ",", "balanced", "=", "False", ",", "retain_epoch_size", "=", "True", ")", ":", "\n", "        ", "train_trsfm", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.466", ",", "0.471", ",", "0.380", "]", ",", "[", "0.195", ",", "0.194", ",", "0.192", "]", ")", "\n", "]", ")", "\n", "test_trsfm", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.466", ",", "0.471", ",", "0.380", "]", ",", "[", "0.195", ",", "0.194", ",", "0.192", "]", ")", "\n", "]", ")", "\n", "\n", "if", "training", ":", "\n", "            ", "dataset", "=", "LT_Dataset", "(", "data_dir", ",", "data_dir", "+", "'/iNaturalist18_train.txt'", ",", "train_trsfm", ")", "\n", "val_dataset", "=", "LT_Dataset", "(", "data_dir", ",", "data_dir", "+", "'/iNaturalist18_val.txt'", ",", "test_trsfm", ")", "\n", "", "else", ":", "# test", "\n", "            ", "dataset", "=", "LT_Dataset", "(", "data_dir", ",", "data_dir", "+", "'/iNaturalist18_val.txt'", ",", "test_trsfm", ")", "\n", "val_dataset", "=", "None", "\n", "\n", "", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "val_dataset", "=", "val_dataset", "\n", "\n", "self", ".", "n_samples", "=", "len", "(", "self", ".", "dataset", ")", "\n", "\n", "num_classes", "=", "len", "(", "np", ".", "unique", "(", "dataset", ".", "targets", ")", ")", "\n", "assert", "num_classes", "==", "8142", "\n", "\n", "cls_num_list", "=", "[", "0", "]", "*", "num_classes", "\n", "for", "label", "in", "dataset", ".", "targets", ":", "\n", "            ", "cls_num_list", "[", "label", "]", "+=", "1", "\n", "\n", "", "self", ".", "cls_num_list", "=", "cls_num_list", "\n", "\n", "if", "balanced", ":", "\n", "            ", "if", "training", ":", "\n", "                ", "buckets", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_classes", ")", "]", "\n", "for", "idx", ",", "label", "in", "enumerate", "(", "dataset", ".", "targets", ")", ":", "\n", "                    ", "buckets", "[", "label", "]", ".", "append", "(", "idx", ")", "\n", "", "sampler", "=", "BalancedSampler", "(", "buckets", ",", "retain_epoch_size", ")", "\n", "shuffle", "=", "False", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"Test set will not be evaluated with balanced sampler, nothing is done to make it balanced\"", ")", "\n", "", "", "else", ":", "\n", "            ", "sampler", "=", "None", "\n", "\n", "", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "init_kwargs", "=", "{", "\n", "'batch_size'", ":", "batch_size", ",", "\n", "'shuffle'", ":", "self", ".", "shuffle", ",", "\n", "'num_workers'", ":", "num_workers", "\n", "}", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "dataset", "=", "self", ".", "dataset", ",", "**", "self", ".", "init_kwargs", ",", "sampler", "=", "sampler", ")", "# Note that sampler does not apply to validation set", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data_loader.inaturalist_data_loaders.iNaturalistDataLoader.split_validation": [[131, 133], ["None"], "methods", ["None"], ["", "def", "split_validation", "(", "self", ")", ":", "\n", "        ", "return", "None", "\n", "# If you want to validate:", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data_loader.imbalance_cifar.IMBALANCECIFAR10.__init__": [[10, 17], ["super().__init__", "numpy.random.seed", "imbalance_cifar.IMBALANCECIFAR10.get_img_num_per_cls", "imbalance_cifar.IMBALANCECIFAR10.gen_imbalanced_data"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__", "home.repos.pwc.inspect_result.beierzhu_xerm.data.ImbalanceCIFAR.IMBALANCECIFAR10.get_img_num_per_cls", "home.repos.pwc.inspect_result.beierzhu_xerm.data.ImbalanceCIFAR.IMBALANCECIFAR10.gen_imbalanced_data"], ["def", "__init__", "(", "self", ",", "root", ",", "imb_type", "=", "'exp'", ",", "imb_factor", "=", "0.01", ",", "rand_number", "=", "0", ",", "train", "=", "True", ",", "\n", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "\n", "download", "=", "False", ")", ":", "\n", "        ", "super", "(", "IMBALANCECIFAR10", ",", "self", ")", ".", "__init__", "(", "root", ",", "train", ",", "transform", ",", "target_transform", ",", "download", ")", "\n", "np", ".", "random", ".", "seed", "(", "rand_number", ")", "\n", "img_num_list", "=", "self", ".", "get_img_num_per_cls", "(", "self", ".", "cls_num", ",", "imb_type", ",", "imb_factor", ")", "\n", "self", ".", "gen_imbalanced_data", "(", "img_num_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data_loader.imbalance_cifar.IMBALANCECIFAR10.get_img_num_per_cls": [[18, 33], ["len", "range", "img_num_per_cls.append", "range", "range", "img_num_per_cls.extend", "int", "img_num_per_cls.append", "img_num_per_cls.append", "int", "int", "int"], "methods", ["None"], ["", "def", "get_img_num_per_cls", "(", "self", ",", "cls_num", ",", "imb_type", ",", "imb_factor", ")", ":", "\n", "        ", "img_max", "=", "len", "(", "self", ".", "data", ")", "/", "cls_num", "\n", "img_num_per_cls", "=", "[", "]", "\n", "if", "imb_type", "==", "'exp'", ":", "\n", "            ", "for", "cls_idx", "in", "range", "(", "cls_num", ")", ":", "\n", "                ", "num", "=", "img_max", "*", "(", "imb_factor", "**", "(", "cls_idx", "/", "(", "cls_num", "-", "1.0", ")", ")", ")", "\n", "img_num_per_cls", ".", "append", "(", "int", "(", "num", ")", ")", "\n", "", "", "elif", "imb_type", "==", "'step'", ":", "\n", "            ", "for", "cls_idx", "in", "range", "(", "cls_num", "//", "2", ")", ":", "\n", "                ", "img_num_per_cls", ".", "append", "(", "int", "(", "img_max", ")", ")", "\n", "", "for", "cls_idx", "in", "range", "(", "cls_num", "//", "2", ")", ":", "\n", "                ", "img_num_per_cls", ".", "append", "(", "int", "(", "img_max", "*", "imb_factor", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "img_num_per_cls", ".", "extend", "(", "[", "int", "(", "img_max", ")", "]", "*", "cls_num", ")", "\n", "", "return", "img_num_per_cls", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data_loader.imbalance_cifar.IMBALANCECIFAR10.gen_imbalanced_data": [[34, 51], ["numpy.array", "numpy.unique", "dict", "zip", "numpy.vstack", "numpy.random.shuffle", "numpy.vstack.append", "new_targets.extend", "numpy.where"], "methods", ["None"], ["", "def", "gen_imbalanced_data", "(", "self", ",", "img_num_per_cls", ")", ":", "\n", "        ", "new_data", "=", "[", "]", "\n", "new_targets", "=", "[", "]", "\n", "targets_np", "=", "np", ".", "array", "(", "self", ".", "targets", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "classes", "=", "np", ".", "unique", "(", "targets_np", ")", "\n", "# np.random.shuffle(classes)", "\n", "self", ".", "num_per_cls_dict", "=", "dict", "(", ")", "\n", "for", "the_class", ",", "the_img_num", "in", "zip", "(", "classes", ",", "img_num_per_cls", ")", ":", "\n", "            ", "self", ".", "num_per_cls_dict", "[", "the_class", "]", "=", "the_img_num", "\n", "idx", "=", "np", ".", "where", "(", "targets_np", "==", "the_class", ")", "[", "0", "]", "\n", "np", ".", "random", ".", "shuffle", "(", "idx", ")", "\n", "selec_idx", "=", "idx", "[", ":", "the_img_num", "]", "\n", "new_data", ".", "append", "(", "self", ".", "data", "[", "selec_idx", ",", "...", "]", ")", "\n", "new_targets", ".", "extend", "(", "[", "the_class", ",", "]", "*", "the_img_num", ")", "\n", "", "new_data", "=", "np", ".", "vstack", "(", "new_data", ")", "\n", "self", ".", "data", "=", "new_data", "\n", "self", ".", "targets", "=", "new_targets", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data_loader.imbalance_cifar.IMBALANCECIFAR10.get_cls_num_list": [[52, 57], ["range", "cls_num_list.append"], "methods", ["None"], ["", "def", "get_cls_num_list", "(", "self", ")", ":", "\n", "        ", "cls_num_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "cls_num", ")", ":", "\n", "            ", "cls_num_list", ".", "append", "(", "self", ".", "num_per_cls_dict", "[", "i", "]", ")", "\n", "", "return", "cls_num_list", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data_loader.imagenet_lt_data_loaders.BalancedSampler.__init__": [[11, 19], ["len", "random.shuffle", "range"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "buckets", ",", "retain_epoch_size", "=", "False", ")", ":", "\n", "        ", "for", "bucket", "in", "buckets", ":", "\n", "            ", "random", ".", "shuffle", "(", "bucket", ")", "\n", "\n", "", "self", ".", "bucket_num", "=", "len", "(", "buckets", ")", "\n", "self", ".", "buckets", "=", "buckets", "\n", "self", ".", "bucket_pointers", "=", "[", "0", "for", "_", "in", "range", "(", "self", ".", "bucket_num", ")", "]", "\n", "self", ".", "retain_epoch_size", "=", "retain_epoch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data_loader.imagenet_lt_data_loaders.BalancedSampler.__iter__": [[20, 25], ["imagenet_lt_data_loaders.BalancedSampler.__len__", "imagenet_lt_data_loaders.BalancedSampler._next_item"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.dataloader.LT_Dataset.__len__", "home.repos.pwc.inspect_result.beierzhu_xerm.data_loader.imagenet_lt_data_loaders.BalancedSampler._next_item"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "count", "=", "self", ".", "__len__", "(", ")", "\n", "while", "count", ">", "0", ":", "\n", "            ", "yield", "self", ".", "_next_item", "(", ")", "\n", "count", "-=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data_loader.imagenet_lt_data_loaders.BalancedSampler._next_item": [[26, 35], ["random.randint", "len", "random.shuffle"], "methods", ["None"], ["", "", "def", "_next_item", "(", "self", ")", ":", "\n", "        ", "bucket_idx", "=", "random", ".", "randint", "(", "0", ",", "self", ".", "bucket_num", "-", "1", ")", "\n", "bucket", "=", "self", ".", "buckets", "[", "bucket_idx", "]", "\n", "item", "=", "bucket", "[", "self", ".", "bucket_pointers", "[", "bucket_idx", "]", "]", "\n", "self", ".", "bucket_pointers", "[", "bucket_idx", "]", "+=", "1", "\n", "if", "self", ".", "bucket_pointers", "[", "bucket_idx", "]", "==", "len", "(", "bucket", ")", ":", "\n", "            ", "self", ".", "bucket_pointers", "[", "bucket_idx", "]", "=", "0", "\n", "random", ".", "shuffle", "(", "bucket", ")", "\n", "", "return", "item", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data_loader.imagenet_lt_data_loaders.BalancedSampler.__len__": [[36, 41], ["sum", "max", "len", "len"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "retain_epoch_size", ":", "\n", "            ", "return", "sum", "(", "[", "len", "(", "bucket", ")", "for", "bucket", "in", "self", ".", "buckets", "]", ")", "# Acrually we need to upscale to next full batch", "\n", "", "else", ":", "\n", "            ", "return", "max", "(", "[", "len", "(", "bucket", ")", "for", "bucket", "in", "self", ".", "buckets", "]", ")", "*", "self", ".", "bucket_num", "# Ensures every instance has the chance to be visited in an epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data_loader.imagenet_lt_data_loaders.LT_Dataset.__init__": [[44, 53], ["open", "imagenet_lt_data_loaders.LT_Dataset.img_path.append", "imagenet_lt_data_loaders.LT_Dataset.labels.append", "os.path.join", "int", "line.split", "line.split"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root", ",", "txt", ",", "transform", "=", "None", ")", ":", "\n", "        ", "self", ".", "img_path", "=", "[", "]", "\n", "self", ".", "labels", "=", "[", "]", "\n", "self", ".", "transform", "=", "transform", "\n", "with", "open", "(", "txt", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "self", ".", "img_path", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "line", ".", "split", "(", ")", "[", "0", "]", ")", ")", "\n", "self", ".", "labels", ".", "append", "(", "int", "(", "line", ".", "split", "(", ")", "[", "1", "]", ")", ")", "\n", "", "", "self", ".", "targets", "=", "self", ".", "labels", "# Sampler needs to use targets", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data_loader.imagenet_lt_data_loaders.LT_Dataset.__len__": [[54, 56], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data_loader.imagenet_lt_data_loaders.LT_Dataset.__getitem__": [[57, 70], ["open", "PIL.Image.open().convert", "imagenet_lt_data_loaders.LT_Dataset.transform", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.iNaturalist18.gen_lists.convert"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "path", "=", "self", ".", "img_path", "[", "index", "]", "\n", "label", "=", "self", ".", "labels", "[", "index", "]", "\n", "\n", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "sample", "=", "Image", ".", "open", "(", "f", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "\n", "# return sample, label, path", "\n", "", "return", "sample", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data_loader.imagenet_lt_data_loaders.ImageNetLTDataLoader.__init__": [[75, 131], ["torchvision.transforms.Compose", "torchvision.transforms.Compose", "len", "len", "torch.utils.data.DataLoader.__init__", "imagenet_lt_data_loaders.LT_Dataset", "imagenet_lt_data_loaders.LT_Dataset", "imagenet_lt_data_loaders.LT_Dataset", "numpy.unique", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ColorJitter", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "enumerate", "imagenet_lt_data_loaders.BalancedSampler", "print", "buckets[].append", "range"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["def", "__init__", "(", "self", ",", "data_dir", ",", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "1", ",", "training", "=", "True", ",", "balanced", "=", "False", ",", "retain_epoch_size", "=", "True", ")", ":", "\n", "        ", "train_trsfm", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ",", "hue", "=", "0", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", "\n", "test_trsfm", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "]", ")", "\n", "\n", "if", "training", ":", "\n", "            ", "dataset", "=", "LT_Dataset", "(", "data_dir", ",", "data_dir", "+", "'/ImageNet_LT_train.txt'", ",", "train_trsfm", ")", "\n", "val_dataset", "=", "LT_Dataset", "(", "data_dir", ",", "data_dir", "+", "'/ImageNet_LT_val.txt'", ",", "test_trsfm", ")", "\n", "", "else", ":", "# test", "\n", "            ", "dataset", "=", "LT_Dataset", "(", "data_dir", ",", "data_dir", "+", "'/ImageNet_LT_test.txt'", ",", "test_trsfm", ")", "\n", "val_dataset", "=", "None", "\n", "\n", "", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "val_dataset", "=", "val_dataset", "\n", "\n", "self", ".", "n_samples", "=", "len", "(", "self", ".", "dataset", ")", "\n", "\n", "num_classes", "=", "len", "(", "np", ".", "unique", "(", "dataset", ".", "targets", ")", ")", "\n", "assert", "num_classes", "==", "1000", "\n", "\n", "cls_num_list", "=", "[", "0", "]", "*", "num_classes", "\n", "for", "label", "in", "dataset", ".", "targets", ":", "\n", "            ", "cls_num_list", "[", "label", "]", "+=", "1", "\n", "\n", "", "self", ".", "cls_num_list", "=", "cls_num_list", "\n", "\n", "if", "balanced", ":", "\n", "            ", "if", "training", ":", "\n", "                ", "buckets", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_classes", ")", "]", "\n", "for", "idx", ",", "label", "in", "enumerate", "(", "dataset", ".", "targets", ")", ":", "\n", "                    ", "buckets", "[", "label", "]", ".", "append", "(", "idx", ")", "\n", "", "sampler", "=", "BalancedSampler", "(", "buckets", ",", "retain_epoch_size", ")", "\n", "shuffle", "=", "False", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"Test set will not be evaluated with balanced sampler, nothing is done to make it balanced\"", ")", "\n", "", "", "else", ":", "\n", "            ", "sampler", "=", "None", "\n", "\n", "", "self", ".", "shuffle", "=", "shuffle", "\n", "self", ".", "init_kwargs", "=", "{", "\n", "'batch_size'", ":", "batch_size", ",", "\n", "'shuffle'", ":", "self", ".", "shuffle", ",", "\n", "'num_workers'", ":", "num_workers", "\n", "}", "\n", "\n", "super", "(", ")", ".", "__init__", "(", "dataset", "=", "self", ".", "dataset", ",", "**", "self", ".", "init_kwargs", ",", "sampler", "=", "sampler", ")", "# Note that sampler does not apply to validation set", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data_loader.imagenet_lt_data_loaders.ImageNetLTDataLoader.split_validation": [[132, 135], ["None"], "methods", ["None"], ["", "def", "split_validation", "(", "self", ")", ":", "\n", "# If you do not want to validate:", "\n", "        ", "return", "None", "\n", "# If you want to validate:", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.logger.visualization.TensorboardWriter.__init__": [[6, 39], ["datetime.datetime.datetime.now", "str", "logger.warning", "importlib.import_module().SummaryWriter", "importlib.import_module"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "log_dir", ",", "logger", ",", "enabled", ")", ":", "\n", "        ", "self", ".", "writer", "=", "None", "\n", "self", ".", "selected_module", "=", "\"\"", "\n", "\n", "if", "enabled", ":", "\n", "            ", "log_dir", "=", "str", "(", "log_dir", ")", "\n", "\n", "# Retrieve vizualization writer.", "\n", "succeeded", "=", "False", "\n", "for", "module", "in", "[", "\"torch.utils.tensorboard\"", ",", "\"tensorboardX\"", "]", ":", "\n", "                ", "try", ":", "\n", "                    ", "self", ".", "writer", "=", "importlib", ".", "import_module", "(", "module", ")", ".", "SummaryWriter", "(", "log_dir", ")", "\n", "succeeded", "=", "True", "\n", "break", "\n", "", "except", "ImportError", ":", "\n", "                    ", "succeeded", "=", "False", "\n", "", "self", ".", "selected_module", "=", "module", "\n", "\n", "", "if", "not", "succeeded", ":", "\n", "                ", "message", "=", "\"Warning: visualization (Tensorboard) is configured to use, but currently not installed on \"", "\"this machine. Please install TensorboardX with 'pip install tensorboardx', upgrade PyTorch to \"", "\"version >= 1.1 to use 'torch.utils.tensorboard' or turn off the option in the 'config.json' file.\"", "\n", "logger", ".", "warning", "(", "message", ")", "\n", "\n", "", "", "self", ".", "step", "=", "0", "\n", "self", ".", "mode", "=", "''", "\n", "\n", "self", ".", "tb_writer_ftns", "=", "{", "\n", "'add_scalar'", ",", "'add_scalars'", ",", "'add_image'", ",", "'add_images'", ",", "'add_audio'", ",", "\n", "'add_text'", ",", "'add_histogram'", ",", "'add_pr_curve'", ",", "'add_embedding'", "\n", "}", "\n", "self", ".", "tag_mode_exceptions", "=", "{", "'add_histogram'", ",", "'add_embedding'", "}", "\n", "self", ".", "timer", "=", "datetime", ".", "now", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.logger.visualization.TensorboardWriter.set_step": [[40, 49], ["datetime.datetime.datetime.now", "visualization.TensorboardWriter.add_scalar", "datetime.datetime.datetime.now", "datetime.datetime.datetime.now", "duration.total_seconds"], "methods", ["None"], ["", "def", "set_step", "(", "self", ",", "step", ",", "mode", "=", "'train'", ")", ":", "\n", "        ", "self", ".", "mode", "=", "mode", "\n", "self", ".", "step", "=", "step", "\n", "if", "step", "==", "0", ":", "\n", "            ", "self", ".", "timer", "=", "datetime", ".", "now", "(", ")", "\n", "", "else", ":", "\n", "            ", "duration", "=", "datetime", ".", "now", "(", ")", "-", "self", ".", "timer", "\n", "self", ".", "add_scalar", "(", "'steps_per_sec'", ",", "1", "/", "duration", ".", "total_seconds", "(", ")", ")", "\n", "self", ".", "timer", "=", "datetime", ".", "now", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.logger.visualization.TensorboardWriter.__getattr__": [[50, 74], ["getattr", "object.__getattr__", "getattr.", "AttributeError"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.logger.visualization.TensorboardWriter.__getattr__"], ["", "", "def", "__getattr__", "(", "self", ",", "name", ")", ":", "\n", "        ", "\"\"\"\n        If visualization is configured to use:\n            return add_data() methods of tensorboard with additional information (step, tag) added.\n        Otherwise:\n            return a blank function handle that does nothing\n        \"\"\"", "\n", "if", "name", "in", "self", ".", "tb_writer_ftns", ":", "\n", "            ", "add_data", "=", "getattr", "(", "self", ".", "writer", ",", "name", ",", "None", ")", "\n", "\n", "def", "wrapper", "(", "tag", ",", "data", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "                ", "if", "add_data", "is", "not", "None", ":", "\n", "# add mode(train/valid) tag", "\n", "                    ", "if", "name", "not", "in", "self", ".", "tag_mode_exceptions", ":", "\n", "                        ", "tag", "=", "'{}/{}'", ".", "format", "(", "tag", ",", "self", ".", "mode", ")", "\n", "", "add_data", "(", "tag", ",", "data", ",", "self", ".", "step", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", "return", "wrapper", "\n", "", "else", ":", "\n", "# default action for returning methods defined in this class, set_step() for instance.", "\n", "            ", "try", ":", "\n", "                ", "attr", "=", "object", ".", "__getattr__", "(", "name", ")", "\n", "", "except", "AttributeError", ":", "\n", "                ", "raise", "AttributeError", "(", "\"type object '{}' has no attribute '{}'\"", ".", "format", "(", "self", ".", "selected_module", ",", "name", ")", ")", "\n", "", "return", "attr", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.beierzhu_xerm.logger.logger.setup_logging": [[7, 23], ["pathlib.Path", "pathlib.Path.is_file", "utils.read_json", "config[].items", "logging.config.dictConfig", "logging.config.dictConfig", "print", "logging.basicConfig", "logging.basicConfig", "str"], "function", ["home.repos.pwc.inspect_result.beierzhu_xerm.utils.util.read_json"], ["def", "setup_logging", "(", "save_dir", ",", "log_config", "=", "'logger/logger_config.json'", ",", "default_level", "=", "logging", ".", "INFO", ")", ":", "\n", "    ", "\"\"\"\n    Setup logging configuration\n    \"\"\"", "\n", "log_config", "=", "Path", "(", "log_config", ")", "\n", "if", "log_config", ".", "is_file", "(", ")", ":", "\n", "        ", "config", "=", "read_json", "(", "log_config", ")", "\n", "# modify logging paths based on run config", "\n", "for", "_", ",", "handler", "in", "config", "[", "'handlers'", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "'filename'", "in", "handler", ":", "\n", "                ", "handler", "[", "'filename'", "]", "=", "str", "(", "save_dir", "/", "handler", "[", "'filename'", "]", ")", "\n", "\n", "", "", "logging", ".", "config", ".", "dictConfig", "(", "config", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Warning: logging configuration file is not found in {}.\"", ".", "format", "(", "log_config", ")", ")", "\n", "logging", ".", "basicConfig", "(", "level", "=", "default_level", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.beierzhu_xerm.trainer.trainer.Trainer.__init__": [[13, 83], ["base.BaseTrainer.__init__", "config._config.get", "config._config.get", "int", "utils.MetricTracker", "utils.MetricTracker", "utils.MetricTracker", "utils.MetricTracker", "print", "config.init_obj", "torch.load", "torch.load", "torch.load", "torch.load", "trainer.Trainer.teacher_model.to", "utils.rename_parallel_state_dict", "len", "utils.inf_loop", "trainer.Trainer.logger.warn", "GradScaler", "numpy.sqrt", "print", "config.init_obj", "torch.load", "torch.load", "torch.load", "torch.load", "utils.load_state_dict", "trainer.Trainer.balanced_model.to", "trainer.Trainer.balanced_model.parameters", "trainer.Trainer.balanced_model.eval", "print", "utils.load_state_dict", "len", "print", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "utils.load_state_dict", "utils.load_state_dict", "teacher_state_dict.items"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.RIDE.public.parse_config.ConfigParser.init_obj", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.utils.util.rename_parallel_state_dict", "home.repos.pwc.inspect_result.beierzhu_xerm.utils.util.inf_loop", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.RIDE.public.parse_config.ConfigParser.init_obj", "home.repos.pwc.inspect_result.beierzhu_xerm.utils.util.load_state_dict", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.eval", "home.repos.pwc.inspect_result.beierzhu_xerm.utils.util.load_state_dict", "home.repos.pwc.inspect_result.beierzhu_xerm.utils.util.load_state_dict", "home.repos.pwc.inspect_result.beierzhu_xerm.utils.util.load_state_dict"], ["def", "__init__", "(", "self", ",", "model", ",", "criterion", ",", "metric_ftns", ",", "optimizer", ",", "config", ",", "data_loader", ",", "\n", "valid_data_loader", "=", "None", ",", "lr_scheduler", "=", "None", ",", "len_epoch", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "model", ",", "criterion", ",", "metric_ftns", ",", "optimizer", ",", "config", ")", "\n", "self", ".", "config", "=", "config", "\n", "\n", "self", ".", "distill", "=", "config", ".", "_config", ".", "get", "(", "'distill'", ",", "False", ")", "\n", "\n", "# add_extra_info will return info about individual experts. This is crucial for individual loss. If this is false, we can only get a final mean logits.", "\n", "self", ".", "add_extra_info", "=", "config", ".", "_config", ".", "get", "(", "'add_extra_info'", ",", "False", ")", "\n", "\n", "if", "self", ".", "distill", ":", "\n", "            ", "print", "(", "\"** Distill is on, please double check distill_checkpoint in config **\"", ")", "\n", "self", ".", "teacher_model", "=", "config", ".", "init_obj", "(", "'distill_arch'", ",", "module_arch", ")", "\n", "teacher_checkpoint", "=", "torch", ".", "load", "(", "config", "[", "'distill_checkpoint'", "]", ",", "map_location", "=", "\"cpu\"", ")", "\n", "\n", "self", ".", "teacher_model", "=", "self", ".", "teacher_model", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "teacher_state_dict", "=", "teacher_checkpoint", "[", "\"state_dict\"", "]", "\n", "\n", "rename_parallel_state_dict", "(", "teacher_state_dict", ")", "\n", "\n", "if", "len", "(", "self", ".", "device_ids", ")", ">", "1", ":", "\n", "                ", "print", "(", "\"Using multiple GPUs for teacher model\"", ")", "\n", "self", ".", "teacher_model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "self", ".", "teacher_model", ",", "device_ids", "=", "self", ".", "device_ids", ")", "\n", "load_state_dict", "(", "self", ".", "teacher_model", ",", "{", "\"module.\"", "+", "k", ":", "v", "for", "k", ",", "v", "in", "teacher_state_dict", ".", "items", "(", ")", "}", ",", "no_ignore", "=", "True", ")", "\n", "", "else", ":", "\n", "                ", "load_state_dict", "(", "self", ".", "teacher_model", ",", "teacher_state_dict", ",", "no_ignore", "=", "True", ")", "\n", "\n", "", "", "self", ".", "data_loader", "=", "data_loader", "\n", "if", "len_epoch", "is", "None", ":", "\n", "# epoch-based training", "\n", "            ", "self", ".", "len_epoch", "=", "len", "(", "self", ".", "data_loader", ")", "\n", "", "else", ":", "\n", "# iteration-based training", "\n", "            ", "self", ".", "data_loader", "=", "inf_loop", "(", "data_loader", ")", "\n", "self", ".", "len_epoch", "=", "len_epoch", "\n", "\n", "", "if", "use_fp16", ":", "\n", "            ", "self", ".", "logger", ".", "warn", "(", "\"FP16 is enabled. This option should be used with caution unless you make sure it's working and we do not provide guarantee.\"", ")", "\n", "from", "torch", ".", "cuda", ".", "amp", "import", "GradScaler", "\n", "self", ".", "scaler", "=", "GradScaler", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "scaler", "=", "None", "\n", "\n", "", "self", ".", "valid_data_loader", "=", "valid_data_loader", "\n", "self", ".", "do_validation", "=", "self", ".", "valid_data_loader", "is", "not", "None", "\n", "self", ".", "lr_scheduler", "=", "lr_scheduler", "\n", "self", ".", "log_step", "=", "int", "(", "np", ".", "sqrt", "(", "data_loader", ".", "batch_size", ")", ")", "\n", "\n", "self", ".", "train_metrics", "=", "MetricTracker", "(", "'loss'", ",", "*", "[", "m", ".", "__name__", "for", "m", "in", "self", ".", "metric_ftns", "]", ",", "writer", "=", "self", ".", "writer", ")", "\n", "self", ".", "valid_metrics", "=", "MetricTracker", "(", "'loss'", ",", "*", "[", "m", ".", "__name__", "for", "m", "in", "self", ".", "metric_ftns", "]", ",", "writer", "=", "self", ".", "writer", ")", "\n", "\n", "self", ".", "balanced_metrics", "=", "MetricTracker", "(", "'loss'", ",", "*", "[", "m", ".", "__name__", "for", "m", "in", "self", ".", "metric_ftns", "]", ",", "writer", "=", "self", ".", "writer", ")", "\n", "self", ".", "imbalanced_metrics", "=", "MetricTracker", "(", "'loss'", ",", "*", "[", "m", ".", "__name__", "for", "m", "in", "self", ".", "metric_ftns", "]", ",", "writer", "=", "self", ".", "writer", ")", "\n", "\n", "self", ".", "xERM", "=", "False", "\n", "if", "'balanced_model_path'", "in", "config", ".", "_config", ":", "\n", "            ", "print", "(", "'=> load balanced model'", ")", "\n", "balanced_model", "=", "config", ".", "init_obj", "(", "'arch'", ",", "module_arch", ")", "\n", "balanced_checkpoint", "=", "torch", ".", "load", "(", "config", "[", "'balanced_model_path'", "]", ",", "map_location", "=", "\"cpu\"", ")", "\n", "balanced_state_dict", "=", "balanced_checkpoint", "[", "\"state_dict\"", "]", "\n", "load_state_dict", "(", "balanced_model", ",", "balanced_state_dict", ",", "no_ignore", "=", "True", ")", "\n", "self", ".", "balanced_model", "=", "balanced_model", "\n", "self", ".", "balanced_model", ".", "to", "(", "self", ".", "device", ")", "\n", "for", "param", "in", "self", ".", "balanced_model", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "require_grad", "=", "False", "\n", "", "self", ".", "balanced_model", ".", "eval", "(", ")", "\n", "self", ".", "xERM", "=", "True", "\n", "print", "(", "'=> load student as well'", ")", "\n", "load_state_dict", "(", "self", ".", "model", ",", "balanced_state_dict", ",", "no_ignore", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.trainer.trainer.Trainer._train_epoch": [[85, 207], ["trainer.Trainer.model.train", "trainer.Trainer.real_model._hook_before_iter", "trainer.Trainer.train_metrics.reset", "hasattr", "enumerate", "trainer.Trainer.train_metrics.result", "trainer.Trainer.criterion._hook_before_epoch", "trainer.Trainer.optimizer.zero_grad", "trainer.Trainer.writer.set_step", "trainer.Trainer.train_metrics.update", "trainer.Trainer._valid_epoch", "trainer.Trainer.update", "trainer.Trainer.lr_scheduler.step", "data.to", "target.to", "utils.autocast", "trainer.Trainer.backward", "trainer.Trainer.optimizer.step", "trainer.Trainer.scaler.scale().backward", "trainer.Trainer.scaler.step", "trainer.Trainer.scaler.update", "trainer.Trainer.item", "trainer.Trainer.train_metrics.update", "trainer.Trainer.logger.debug", "trainer.Trainer.writer.add_image", "len", "idx.to", "contrast_idx.to", "trainer.Trainer.model", "trainer.Trainer.model", "isinstance", "met", "torchvision.utils.make_grid", "isinstance", "isinstance", "trainer.Trainer.criterion", "trainer.Trainer.scaler.scale", "trainer.Trainer._progress", "trainer.Trainer.item", "max", "min", "data.cpu", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "trainer.Trainer.balanced_model", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "trainer.Trainer.teacher_model", "isinstance", "extra_info.update", "extra_info.update", "trainer.Trainer.criterion", "trainer.Trainer.items", "extra_info.update", "extra_info.update", "isinstance", "extra_info.update", "trainer.Trainer.criterion", "trainer.Trainer.criterion", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "extra_info.update", "logits.transpose", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.train", "home.repos.pwc.inspect_result.beierzhu_xerm.ldam_drw_resnets.resnet_cifar.ResNet_s._hook_before_iter", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.reset", "home.repos.pwc.inspect_result.beierzhu_xerm.utils.util.MetricTracker.result", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill._hook_before_epoch", "home.repos.pwc.inspect_result.beierzhu_xerm.logger.visualization.TensorboardWriter.set_step", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.trainer.trainer.Trainer._valid_epoch", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.trainer.trainer.Trainer._progress", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.min", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update"], ["", "", "def", "_train_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"\n        Training logic for an epoch\n\n        :param epoch: Integer, current training epoch.\n        :return: A log that contains average loss and metric in this epoch.\n        \"\"\"", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "self", ".", "real_model", ".", "_hook_before_iter", "(", ")", "\n", "self", ".", "train_metrics", ".", "reset", "(", ")", "\n", "\n", "if", "hasattr", "(", "self", ".", "criterion", ",", "\"_hook_before_epoch\"", ")", ":", "\n", "            ", "self", ".", "criterion", ".", "_hook_before_epoch", "(", "epoch", ")", "\n", "\n", "", "for", "batch_idx", ",", "data", "in", "enumerate", "(", "self", ".", "data_loader", ")", ":", "\n", "            ", "if", "self", ".", "distill", "and", "len", "(", "data", ")", "==", "4", ":", "\n", "                ", "data", ",", "target", ",", "idx", ",", "contrast_idx", "=", "data", "\n", "idx", ",", "contrast_idx", "=", "idx", ".", "to", "(", "self", ".", "device", ")", ",", "contrast_idx", ".", "to", "(", "self", ".", "device", ")", "\n", "", "else", ":", "\n", "                ", "data", ",", "target", "=", "data", "\n", "idx", ",", "contrast_idx", "=", "None", ",", "None", "\n", "", "data", ",", "target", "=", "data", ".", "to", "(", "self", ".", "device", ")", ",", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "with", "autocast", "(", ")", ":", "\n", "                ", "if", "self", ".", "real_model", ".", "requires_target", ":", "\n", "                    ", "output", "=", "self", ".", "model", "(", "data", ",", "target", "=", "target", ")", "\n", "output", ",", "loss", "=", "output", "\n", "", "else", ":", "\n", "                    ", "extra_info", "=", "{", "}", "\n", "output", "=", "self", ".", "model", "(", "data", ")", "\n", "if", "self", ".", "xERM", ":", "\n", "                        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                            ", "_", "=", "self", ".", "balanced_model", "(", "data", ")", "\n", "imbalanced_logits", "=", "self", ".", "balanced_model", ".", "backbone", ".", "logits", "\n", "balanced_logits", "=", "[", "imbalanced_logit", "-", "2", "*", "torch", ".", "log", "(", "self", ".", "data_loader", ".", "prior", ")", ".", "cuda", "(", ")", "+", "torch", ".", "log", "(", "self", ".", "valid_data_loader", ".", "prior", ")", ".", "cuda", "(", ")", "for", "imbalanced_logit", "in", "imbalanced_logits", "]", "\n", "", "", "if", "self", ".", "distill", ":", "\n", "                        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                            ", "teacher", "=", "self", ".", "teacher_model", "(", "data", ")", "\n", "if", "idx", "is", "not", "None", ":", "# Contrast", "\n", "                                ", "extra_info", ".", "update", "(", "{", "\n", "\"idx\"", ":", "idx", ",", "\n", "\"contrast_idx\"", ":", "contrast_idx", "\n", "}", ")", "\n", "", "if", "isinstance", "(", "output", ",", "dict", ")", ":", "# New return that does support DataParallel", "\n", "                                ", "feat_students", "=", "output", "[", "\"feat\"", "]", "\n", "extra_info", ".", "update", "(", "{", "\n", "\"feat_students\"", ":", "feat_students", ",", "\n", "}", ")", "\n", "if", "isinstance", "(", "teacher", ",", "dict", ")", ":", "\n", "                                    ", "feat_teachers", "=", "teacher", "[", "\"feat\"", "]", "\n", "extra_info", ".", "update", "(", "{", "\n", "\"feat_teachers\"", ":", "feat_teachers", ",", "\n", "}", ")", "\n", "", "", "else", ":", "# Old return that does not support DataParallel", "\n", "                                ", "extra_info", ".", "update", "(", "{", "\n", "\"feat_students\"", ":", "self", ".", "real_model", ".", "backbone", ".", "feat", ",", "\n", "\"feat_teachers\"", ":", "self", ".", "teacher_model", ".", "backbone", ".", "feat", ",", "\n", "\"feat_students_before_GAP\"", ":", "self", ".", "real_model", ".", "backbone", ".", "feat_before_GAP", ",", "\n", "\"feat_teachers_before_GAP\"", ":", "self", ".", "teacher_model", ".", "backbone", ".", "feat_before_GAP", ",", "\n", "}", ")", "\n", "", "", "if", "isinstance", "(", "teacher", ",", "dict", ")", ":", "\n", "                            ", "teacher", "=", "teacher", "[", "\"output\"", "]", "\n", "\n", "", "", "if", "self", ".", "add_extra_info", ":", "\n", "                        ", "if", "isinstance", "(", "output", ",", "dict", ")", ":", "\n", "                            ", "logits", "=", "output", "[", "\"logits\"", "]", "\n", "extra_info", ".", "update", "(", "{", "\n", "\"logits\"", ":", "logits", ".", "transpose", "(", "0", ",", "1", ")", "\n", "}", ")", "\n", "", "else", ":", "\n", "                            ", "extra_info", ".", "update", "(", "{", "\n", "\"logits\"", ":", "self", ".", "real_model", ".", "backbone", ".", "logits", "\n", "}", ")", "\n", "\n", "", "", "if", "isinstance", "(", "output", ",", "dict", ")", ":", "\n", "                        ", "output", "=", "output", "[", "\"output\"", "]", "\n", "\n", "", "if", "self", ".", "distill", ":", "\n", "                        ", "loss", "=", "self", ".", "criterion", "(", "student", "=", "output", ",", "target", "=", "target", ",", "teacher", "=", "teacher", ",", "extra_info", "=", "extra_info", ")", "\n", "", "elif", "self", ".", "xERM", ":", "\n", "                        ", "loss", "=", "self", ".", "criterion", "(", "output_logits", "=", "output", ",", "balanced_logits", "=", "balanced_logits", ",", "imbalanced_logits", "=", "imbalanced_logits", ",", "target", "=", "target", ",", "extra_info", "=", "extra_info", ")", "\n", "", "elif", "self", ".", "add_extra_info", ":", "\n", "                        ", "loss", "=", "self", ".", "criterion", "(", "output_logits", "=", "output", ",", "target", "=", "target", ",", "extra_info", "=", "extra_info", ")", "\n", "", "else", ":", "\n", "                        ", "loss", "=", "self", ".", "criterion", "(", "output_logits", "=", "output", ",", "target", "=", "target", ")", "\n", "\n", "", "", "", "if", "not", "use_fp16", ":", "\n", "                ", "loss", ".", "backward", "(", ")", "\n", "self", ".", "optimizer", ".", "step", "(", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "scaler", ".", "scale", "(", "loss", ")", ".", "backward", "(", ")", "\n", "self", ".", "scaler", ".", "step", "(", "self", ".", "optimizer", ")", "\n", "self", ".", "scaler", ".", "update", "(", ")", "\n", "\n", "", "self", ".", "writer", ".", "set_step", "(", "(", "epoch", "-", "1", ")", "*", "self", ".", "len_epoch", "+", "batch_idx", ")", "\n", "self", ".", "train_metrics", ".", "update", "(", "'loss'", ",", "loss", ".", "item", "(", ")", ")", "\n", "for", "met", "in", "self", ".", "metric_ftns", ":", "\n", "                ", "self", ".", "train_metrics", ".", "update", "(", "met", ".", "__name__", ",", "met", "(", "output", ",", "target", ",", "return_length", "=", "True", ")", ")", "\n", "\n", "", "if", "batch_idx", "%", "self", ".", "log_step", "==", "0", ":", "\n", "                ", "self", ".", "logger", ".", "debug", "(", "'Train Epoch: {} {} Loss: {:.6f} max group LR: {:.6f} min group LR: {:.6f}'", ".", "format", "(", "\n", "epoch", ",", "\n", "self", ".", "_progress", "(", "batch_idx", ")", ",", "\n", "loss", ".", "item", "(", ")", ",", "\n", "max", "(", "[", "param_group", "[", "'lr'", "]", "for", "param_group", "in", "self", ".", "optimizer", ".", "param_groups", "]", ")", ",", "\n", "min", "(", "[", "param_group", "[", "'lr'", "]", "for", "param_group", "in", "self", ".", "optimizer", ".", "param_groups", "]", ")", ")", ")", "\n", "self", ".", "writer", ".", "add_image", "(", "'input'", ",", "make_grid", "(", "data", ".", "cpu", "(", ")", ",", "nrow", "=", "8", ",", "normalize", "=", "True", ")", ")", "\n", "\n", "", "if", "batch_idx", "==", "self", ".", "len_epoch", ":", "\n", "                ", "break", "\n", "", "", "log", "=", "self", ".", "train_metrics", ".", "result", "(", ")", "\n", "\n", "if", "self", ".", "do_validation", ":", "\n", "            ", "val_log", "=", "self", ".", "_valid_epoch", "(", "epoch", ")", "\n", "log", ".", "update", "(", "**", "{", "'val_'", "+", "k", ":", "v", "for", "k", ",", "v", "in", "val_log", ".", "items", "(", ")", "}", ")", "\n", "\n", "", "if", "self", ".", "lr_scheduler", "is", "not", "None", ":", "\n", "            ", "self", ".", "lr_scheduler", ".", "step", "(", ")", "\n", "\n", "", "return", "log", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.trainer.trainer.Trainer.check_ensemble": [[208, 271], ["utils.MiscMeter", "utils.MiscMeter", "utils.MiscMeter", "utils.MiscMeter", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "print", "utils.shot_acc", "print", "utils.shot_acc", "print", "utils.shot_acc", "print", "utils.shot_acc", "print", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "trainer.Trainer.balanced_model", "trainer.Trainer.imbalanced_model", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "balanced_preds.clone", "utils.MiscMeter.update", "utils.MiscMeter.update", "utils.MiscMeter.update", "utils.MiscMeter.update", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "data.to", "target.to", "data.size", "data.size", "data.size", "data.size", "data.size", "data.size", "data.size", "data.size"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.shot_acc", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.shot_acc", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.shot_acc", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.shot_acc", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size"], ["", "def", "check_ensemble", "(", "self", ")", ":", "\n", "        ", "balanced_metrics", "=", "MiscMeter", "(", ")", "\n", "imbalanced_metrics", "=", "MiscMeter", "(", ")", "\n", "ensemble_metrics", "=", "MiscMeter", "(", ")", "\n", "upper_bound_metrics", "=", "MiscMeter", "(", ")", "\n", "\n", "balanced_total_preds", "=", "torch", ".", "empty", "(", "0", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "imbalanced_total_preds", "=", "torch", ".", "empty", "(", "0", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "ensemble_total_preds", "=", "torch", ".", "empty", "(", "0", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "upper_total_preds", "=", "torch", ".", "empty", "(", "0", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "total_target", "=", "torch", ".", "empty", "(", "0", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "\n", "alpha", "=", "0.5", "\n", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "self", ".", "valid_data_loader", ")", ":", "\n", "                ", "data", ",", "target", "=", "data", ".", "to", "(", "self", ".", "device", ")", ",", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "balanced_output", "=", "self", ".", "balanced_model", "(", "data", ")", "\n", "imbalanced_output", "=", "self", ".", "imbalanced_model", "(", "data", ")", "\n", "ensemble_output", "=", "(", "1", "-", "alpha", ")", "*", "balanced_output", "+", "alpha", "*", "imbalanced_output", "\n", "\n", "balanced_prob", "=", "F", ".", "softmax", "(", "balanced_output", ",", "-", "1", ")", "\n", "imbalanced_prob", "=", "F", ".", "softmax", "(", "imbalanced_output", ",", "-", "1", ")", "\n", "\n", "_", ",", "balanced_preds", "=", "torch", ".", "max", "(", "balanced_prob", ",", "1", ")", "\n", "_", ",", "imbalanced_preds", "=", "torch", ".", "max", "(", "imbalanced_prob", ",", "1", ")", "\n", "# _, ensemble_preds = torch.max(balanced_prob+imbalanced_prob, 1)", "\n", "_", ",", "ensemble_preds", "=", "torch", ".", "max", "(", "ensemble_output", ",", "1", ")", "\n", "\n", "balanced_right", "=", "balanced_preds", "==", "target", "\n", "imbalanced_right", "=", "imbalanced_preds", "==", "target", "\n", "\n", "preds_bound", "=", "balanced_preds", ".", "clone", "(", ")", "\n", "preds_bound", "[", "balanced_right", "]", "=", "balanced_preds", "[", "balanced_right", "]", "\n", "preds_bound", "[", "imbalanced_right", "]", "=", "imbalanced_preds", "[", "imbalanced_right", "]", "\n", "\n", "balanced_metrics", ".", "update", "(", "(", "balanced_preds", "==", "target", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "data", ".", "size", "(", "0", ")", ",", "n", "=", "data", ".", "size", "(", "0", ")", ")", "\n", "imbalanced_metrics", ".", "update", "(", "(", "imbalanced_preds", "==", "target", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "data", ".", "size", "(", "0", ")", ",", "n", "=", "data", ".", "size", "(", "0", ")", ")", "\n", "ensemble_metrics", ".", "update", "(", "(", "ensemble_preds", "==", "target", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "data", ".", "size", "(", "0", ")", ",", "n", "=", "data", ".", "size", "(", "0", ")", ")", "\n", "upper_bound_metrics", ".", "update", "(", "(", "preds_bound", "==", "target", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "data", ".", "size", "(", "0", ")", ",", "n", "=", "data", ".", "size", "(", "0", ")", ")", "\n", "\n", "total_target", "=", "torch", ".", "cat", "(", "(", "total_target", ",", "target", ")", ")", "\n", "balanced_total_preds", "=", "torch", ".", "cat", "(", "(", "balanced_total_preds", ",", "balanced_preds", ")", ")", "\n", "imbalanced_total_preds", "=", "torch", ".", "cat", "(", "(", "imbalanced_total_preds", ",", "imbalanced_preds", ")", ")", "\n", "ensemble_total_preds", "=", "torch", ".", "cat", "(", "(", "ensemble_total_preds", ",", "ensemble_preds", ")", ")", "\n", "upper_total_preds", "=", "torch", ".", "cat", "(", "(", "upper_total_preds", ",", "preds_bound", ")", ")", "\n", "\n", "", "", "print", "(", "f'balanced accuracy:  {balanced_metrics.avg:.3f} '", "\n", "f'imblanced accuracy: {imbalanced_metrics.avg:.3f} '", "\n", "f'ensemble accuracy: {ensemble_metrics.avg:.3f} '", "\n", "f'upper bound accuracy: {upper_bound_metrics.avg:.3f} '", ")", "\n", "\n", "many", ",", "med", ",", "few", "=", "shot_acc", "(", "balanced_total_preds", ",", "total_target", ",", "self", ".", "data_loader", ")", "\n", "print", "(", "f'balanced many: {many:.3f} med: {med:.3f} few: {few:.3f} '", ")", "\n", "\n", "many", ",", "med", ",", "few", "=", "shot_acc", "(", "imbalanced_total_preds", ",", "total_target", ",", "self", ".", "data_loader", ")", "\n", "print", "(", "f'imbalanced many: {many:.3f} med: {med:.3f} few: {few:.3f} '", ")", "\n", "\n", "many", ",", "med", ",", "few", "=", "shot_acc", "(", "ensemble_total_preds", ",", "total_target", ",", "self", ".", "data_loader", ")", "\n", "print", "(", "f'ensemble many: {many:.3f} med: {med:.3f} few: {few:.3f} '", ")", "\n", "\n", "many", ",", "med", ",", "few", "=", "shot_acc", "(", "upper_total_preds", ",", "total_target", ",", "self", ".", "data_loader", ")", "\n", "print", "(", "f'upper bound many: {many:.3f} med: {med:.3f} few: {few:.3f} '", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.trainer.trainer.Trainer._valid_epoch": [[273, 332], ["trainer.Trainer.model.eval", "trainer.Trainer.valid_metrics.reset", "trainer.Trainer.model.named_parameters", "trainer.Trainer.valid_metrics.result", "trainer.Trainer.balanced_model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "trainer.Trainer.writer.add_histogram", "trainer.Trainer.imbalanced_metrics.result", "trainer.Trainer.balanced_metrics.result", "hasattr", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "isinstance", "torch.cross_entropy", "torch.cross_entropy", "trainer.Trainer.writer.set_step", "trainer.Trainer.valid_metrics.update", "trainer.Trainer.writer.add_image", "print", "data.to", "target.to", "trainer.Trainer.model", "torch.unique", "torch.unique", "torch.unique", "torch.unique", "data.size", "trainer.Trainer.model", "torch.cross_entropy.item", "trainer.Trainer.valid_metrics.update", "torchvision.utils.make_grid", "trainer.Trainer.balanced_model", "met", "trainer.Trainer.balanced_metrics.update", "trainer.Trainer.imbalanced_metrics.update", "data.cpu", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "len", "met", "met", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.eval", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.reset", "home.repos.pwc.inspect_result.beierzhu_xerm.utils.util.MetricTracker.result", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.eval", "home.repos.pwc.inspect_result.beierzhu_xerm.utils.util.MetricTracker.result", "home.repos.pwc.inspect_result.beierzhu_xerm.utils.util.MetricTracker.result", "home.repos.pwc.inspect_result.beierzhu_xerm.logger.visualization.TensorboardWriter.set_step", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update"], ["", "def", "_valid_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"\n        Validate after training an epoch\n\n        :param epoch: Integer, current training epoch.\n        :return: A log that contains information about validation\n        \"\"\"", "\n", "self", ".", "model", ".", "eval", "(", ")", "\n", "if", "self", ".", "xERM", ":", "\n", "            ", "self", ".", "balanced_model", ".", "eval", "(", ")", "\n", "", "self", ".", "valid_metrics", ".", "reset", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "hasattr", "(", "self", ".", "model", ",", "\"confidence_model\"", ")", "and", "self", ".", "model", ".", "confidence_model", ":", "\n", "                ", "cumulative_sample_num_experts", "=", "torch", ".", "zeros", "(", "(", "self", ".", "model", ".", "backbone", ".", "num_experts", ",", ")", ",", "device", "=", "self", ".", "device", ")", "\n", "num_samples", "=", "0", "\n", "confidence_model", "=", "True", "\n", "", "else", ":", "\n", "                ", "confidence_model", "=", "False", "\n", "", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "self", ".", "valid_data_loader", ")", ":", "\n", "                ", "data", ",", "target", "=", "data", ".", "to", "(", "self", ".", "device", ")", ",", "target", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "if", "confidence_model", ":", "\n", "                    ", "output", ",", "sample_num_experts", "=", "self", ".", "model", "(", "data", ")", "\n", "num", ",", "count", "=", "torch", ".", "unique", "(", "sample_num_experts", ",", "return_counts", "=", "True", ")", "\n", "cumulative_sample_num_experts", "[", "num", "-", "1", "]", "+=", "count", "\n", "num_samples", "+=", "data", ".", "size", "(", "0", ")", "\n", "", "else", ":", "\n", "                    ", "output", "=", "self", ".", "model", "(", "data", ")", "\n", "\n", "if", "self", ".", "xERM", ":", "\n", "                        ", "imbalanced_logits", "=", "self", ".", "balanced_model", "(", "data", ")", "\n", "balanced_logits", "=", "imbalanced_logits", "-", "2", "*", "torch", ".", "log", "(", "self", ".", "data_loader", ".", "prior", ")", ".", "cuda", "(", ")", "+", "torch", ".", "log", "(", "self", ".", "valid_data_loader", ".", "prior", ")", ".", "cuda", "(", ")", "\n", "\n", "", "", "if", "isinstance", "(", "output", ",", "dict", ")", ":", "\n", "                    ", "output", "=", "output", "[", "\"output\"", "]", "\n", "\n", "# output = output - torch.log(self.data_loader.prior).cuda() + torch.log(self.valid_data_loader.prior).cuda()", "\n", "# loss = self.criterion(output, target)", "\n", "", "loss", "=", "F", ".", "cross_entropy", "(", "output", ",", "target", ")", "\n", "\n", "self", ".", "writer", ".", "set_step", "(", "(", "epoch", "-", "1", ")", "*", "len", "(", "self", ".", "valid_data_loader", ")", "+", "batch_idx", ",", "'valid'", ")", "\n", "self", ".", "valid_metrics", ".", "update", "(", "'loss'", ",", "loss", ".", "item", "(", ")", ")", "\n", "for", "met", "in", "self", ".", "metric_ftns", ":", "\n", "                    ", "self", ".", "valid_metrics", ".", "update", "(", "met", ".", "__name__", ",", "met", "(", "output", ",", "target", ",", "return_length", "=", "True", ")", ")", "\n", "if", "self", ".", "xERM", ":", "\n", "                        ", "self", ".", "balanced_metrics", ".", "update", "(", "met", ".", "__name__", ",", "met", "(", "balanced_logits", ",", "target", ",", "return_length", "=", "True", ")", ")", "\n", "self", ".", "imbalanced_metrics", ".", "update", "(", "met", ".", "__name__", ",", "met", "(", "imbalanced_logits", ",", "target", ",", "return_length", "=", "True", ")", ")", "\n", "", "", "self", ".", "writer", ".", "add_image", "(", "'input'", ",", "make_grid", "(", "data", ".", "cpu", "(", ")", ",", "nrow", "=", "8", ",", "normalize", "=", "True", ")", ")", "\n", "\n", "", "if", "confidence_model", ":", "\n", "                ", "print", "(", "\"Samples with num_experts:\"", ",", "*", "[", "(", "'%.2f'", "%", "item", ")", "for", "item", "in", "(", "cumulative_sample_num_experts", "*", "100", "/", "num_samples", ")", ".", "tolist", "(", ")", "]", ")", "\n", "\n", "# add histogram of model parameters to the tensorboard", "\n", "", "", "for", "name", ",", "p", "in", "self", ".", "model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "self", ".", "writer", ".", "add_histogram", "(", "name", ",", "p", ",", "bins", "=", "'auto'", ")", "\n", "", "if", "self", ".", "xERM", ":", "\n", "            ", "self", ".", "imbalanced_metrics", ".", "result", "(", ")", "\n", "self", ".", "balanced_metrics", ".", "result", "(", ")", "\n", "", "return", "self", ".", "valid_metrics", ".", "result", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.trainer.trainer.Trainer._progress": [[333, 342], ["hasattr", "base.format"], "methods", ["None"], ["", "def", "_progress", "(", "self", ",", "batch_idx", ")", ":", "\n", "        ", "base", "=", "'[{}/{} ({:.0f}%)]'", "\n", "if", "hasattr", "(", "self", ".", "data_loader", ",", "'n_samples'", ")", ":", "\n", "            ", "current", "=", "batch_idx", "*", "self", ".", "data_loader", ".", "batch_size", "\n", "total", "=", "self", ".", "data_loader", ".", "n_samples", "\n", "", "else", ":", "\n", "            ", "current", "=", "batch_idx", "\n", "total", "=", "self", ".", "len_epoch", "\n", "", "return", "base", ".", "format", "(", "current", ",", "total", ",", "100.0", "*", "current", "/", "total", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.beierzhu_xerm.base.base_trainer.BaseTrainer.__init__": [[12, 60], ["config.get_logger", "base_trainer.BaseTrainer._prepare_device", "base_trainer.BaseTrainer.model.to", "criterion.to", "cfg_trainer.get", "logger.TensorboardWriter", "len", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "torch.nn.DataParallel", "base_trainer.BaseTrainer.monitor.split", "cfg_trainer.get", "print", "base_trainer.BaseTrainer._load_crt", "config._config.get", "base_trainer.BaseTrainer._resume_checkpoint"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.RIDE.public.parse_config.ConfigParser.get_logger", "home.repos.pwc.inspect_result.beierzhu_xerm.base.base_trainer.BaseTrainer._prepare_device", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.base.base_trainer.BaseTrainer._load_crt", "home.repos.pwc.inspect_result.beierzhu_xerm.base.base_trainer.BaseTrainer._resume_checkpoint"], ["def", "__init__", "(", "self", ",", "model", ",", "criterion", ",", "metric_ftns", ",", "optimizer", ",", "config", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "logger", "=", "config", ".", "get_logger", "(", "'trainer'", ",", "config", "[", "'trainer'", "]", "[", "'verbosity'", "]", ")", "\n", "\n", "# setup GPU device if available, move model into configured device", "\n", "self", ".", "device", ",", "device_ids", "=", "self", ".", "_prepare_device", "(", "config", "[", "'n_gpu'", "]", ")", "\n", "self", ".", "device_ids", "=", "device_ids", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "model", "=", "self", ".", "model", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "self", ".", "real_model", "=", "self", ".", "model", "\n", "if", "len", "(", "self", ".", "device_ids", ")", ">", "1", ":", "\n", "            ", "self", ".", "model", "=", "torch", ".", "nn", ".", "DataParallel", "(", "self", ".", "model", ",", "device_ids", "=", "device_ids", ")", "\n", "\n", "", "self", ".", "criterion", "=", "criterion", ".", "to", "(", "self", ".", "device", ")", "\n", "self", ".", "metric_ftns", "=", "metric_ftns", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "\n", "cfg_trainer", "=", "config", "[", "'trainer'", "]", "\n", "self", ".", "epochs", "=", "cfg_trainer", "[", "'epochs'", "]", "\n", "self", ".", "save_period", "=", "cfg_trainer", "[", "'save_period'", "]", "\n", "self", ".", "monitor", "=", "cfg_trainer", ".", "get", "(", "'monitor'", ",", "'off'", ")", "\n", "\n", "# configuration to monitor model performance and save best", "\n", "if", "self", ".", "monitor", "==", "'off'", ":", "\n", "            ", "self", ".", "mnt_mode", "=", "'off'", "\n", "self", ".", "mnt_best", "=", "0", "\n", "", "else", ":", "\n", "            ", "self", ".", "mnt_mode", ",", "self", ".", "mnt_metric", "=", "self", ".", "monitor", ".", "split", "(", ")", "\n", "assert", "self", ".", "mnt_mode", "in", "[", "'min'", ",", "'max'", "]", "\n", "\n", "self", ".", "mnt_best", "=", "inf", "if", "self", ".", "mnt_mode", "==", "'min'", "else", "-", "inf", "\n", "self", ".", "early_stop", "=", "cfg_trainer", ".", "get", "(", "'early_stop'", ",", "inf", ")", "\n", "\n", "", "self", ".", "start_epoch", "=", "1", "\n", "\n", "self", ".", "checkpoint_dir", "=", "config", ".", "save_dir", "\n", "\n", "# setup visualization writer instance                ", "\n", "self", ".", "writer", "=", "TensorboardWriter", "(", "config", ".", "log_dir", ",", "self", ".", "logger", ",", "cfg_trainer", "[", "'tensorboard'", "]", ")", "\n", "\n", "if", "config", ".", "load_crt", "is", "not", "None", ":", "\n", "            ", "print", "(", "\"Loading from cRT pretrain: {}\"", ".", "format", "(", "config", ".", "load_crt", ")", ")", "\n", "self", ".", "_load_crt", "(", "config", ".", "load_crt", ")", "\n", "\n", "", "if", "config", ".", "resume", "is", "not", "None", ":", "\n", "            ", "state_dict_only", "=", "config", ".", "_config", ".", "get", "(", "\"resume_state_dict_only\"", ",", "False", ")", "\n", "self", ".", "_resume_checkpoint", "(", "config", ".", "resume", ",", "state_dict_only", "=", "state_dict_only", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.base.base_trainer.BaseTrainer._train_epoch": [[61, 69], ["None"], "methods", ["None"], ["", "", "@", "abstractmethod", "\n", "def", "_train_epoch", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "\"\"\"\n        Training logic for an epoch\n\n        :param epoch: Current epoch number\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.base.base_trainer.BaseTrainer.train": [[70, 115], ["range", "base_trainer.BaseTrainer._train_epoch", "log.update", "log.items", "base_trainer.BaseTrainer.logger.info", "base_trainer.BaseTrainer._save_checkpoint", "base_trainer.BaseTrainer.logger.info", "base_trainer.BaseTrainer._save_checkpoint", "str", "base_trainer.BaseTrainer.logger.warning"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.base.base_trainer.BaseTrainer._train_epoch", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.base.base_trainer.BaseTrainer._save_checkpoint", "home.repos.pwc.inspect_result.beierzhu_xerm.base.base_trainer.BaseTrainer._save_checkpoint"], ["", "def", "train", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Full training logic\n        \"\"\"", "\n", "not_improved_count", "=", "0", "\n", "for", "epoch", "in", "range", "(", "self", ".", "start_epoch", ",", "self", ".", "epochs", "+", "1", ")", ":", "\n", "            ", "result", "=", "self", ".", "_train_epoch", "(", "epoch", ")", "\n", "\n", "# save logged informations into log dict", "\n", "log", "=", "{", "'epoch'", ":", "epoch", "}", "\n", "log", ".", "update", "(", "result", ")", "\n", "\n", "# print logged informations to the screen", "\n", "for", "key", ",", "value", "in", "log", ".", "items", "(", ")", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "'    {:15s}: {}'", ".", "format", "(", "str", "(", "key", ")", ",", "value", ")", ")", "\n", "\n", "# evaluate model performance according to configured metric, save best checkpoint as model_best", "\n", "", "best", "=", "False", "\n", "if", "self", ".", "mnt_mode", "!=", "'off'", ":", "\n", "                ", "try", ":", "\n", "# check whether model performance improved or not, according to specified metric(mnt_metric)", "\n", "                    ", "improved", "=", "(", "self", ".", "mnt_mode", "==", "'min'", "and", "log", "[", "self", ".", "mnt_metric", "]", "<=", "self", ".", "mnt_best", ")", "or", "(", "self", ".", "mnt_mode", "==", "'max'", "and", "log", "[", "self", ".", "mnt_metric", "]", ">=", "self", ".", "mnt_best", ")", "\n", "", "except", "KeyError", ":", "\n", "                    ", "self", ".", "logger", ".", "warning", "(", "\"Warning: Metric '{}' is not found. \"", "\n", "\"Model performance monitoring is disabled.\"", ".", "format", "(", "self", ".", "mnt_metric", ")", ")", "\n", "self", ".", "mnt_mode", "=", "'off'", "\n", "improved", "=", "False", "\n", "\n", "", "if", "improved", ":", "\n", "                    ", "self", ".", "mnt_best", "=", "log", "[", "self", ".", "mnt_metric", "]", "\n", "not_improved_count", "=", "0", "\n", "best", "=", "True", "\n", "", "else", ":", "\n", "                    ", "not_improved_count", "+=", "1", "\n", "\n", "", "if", "not_improved_count", ">", "self", ".", "early_stop", ":", "\n", "                    ", "self", ".", "logger", ".", "info", "(", "\"Validation performance didn\\'t improve for {} epochs. \"", "\n", "\"Training stops.\"", ".", "format", "(", "self", ".", "early_stop", ")", ")", "\n", "break", "\n", "\n", "", "", "if", "epoch", "%", "self", ".", "save_period", "==", "0", ":", "\n", "                ", "self", ".", "_save_checkpoint", "(", "epoch", ",", "save_best", "=", "best", ")", "\n", "", "elif", "best", ":", "\n", "                ", "self", ".", "_save_checkpoint", "(", "epoch", ",", "save_best", "=", "True", ",", "best_only", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.base.base_trainer.BaseTrainer._prepare_device": [[116, 132], ["torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.device", "torch.device", "torch.device", "torch.device", "list", "base_trainer.BaseTrainer.logger.warning", "base_trainer.BaseTrainer.logger.warning", "range"], "methods", ["None"], ["", "", "", "def", "_prepare_device", "(", "self", ",", "n_gpu_use", ")", ":", "\n", "        ", "\"\"\"\n        setup GPU device if available, move model into configured device\n        \"\"\"", "\n", "n_gpu", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "if", "n_gpu_use", ">", "0", "and", "n_gpu", "==", "0", ":", "\n", "            ", "self", ".", "logger", ".", "warning", "(", "\"Warning: There\\'s no GPU available on this machine,\"", "\n", "\"training will be performed on CPU.\"", ")", "\n", "n_gpu_use", "=", "0", "\n", "", "if", "n_gpu_use", ">", "n_gpu", ":", "\n", "            ", "self", ".", "logger", ".", "warning", "(", "\"Warning: The number of GPU\\'s configured to use is {}, but only {} are available \"", "\n", "\"on this machine.\"", ".", "format", "(", "n_gpu_use", ",", "n_gpu", ")", ")", "\n", "n_gpu_use", "=", "n_gpu", "\n", "", "device", "=", "torch", ".", "device", "(", "'cuda:0'", "if", "n_gpu_use", ">", "0", "else", "'cpu'", ")", "\n", "list_ids", "=", "list", "(", "range", "(", "n_gpu_use", ")", ")", "\n", "return", "device", ",", "list_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.base.base_trainer.BaseTrainer._save_checkpoint": [[133, 159], ["type", "base_trainer.BaseTrainer.model.state_dict", "base_trainer.BaseTrainer.optimizer.state_dict", "base_trainer.BaseTrainer.criterion.state_dict", "str", "torch.save", "torch.save", "torch.save", "torch.save", "base_trainer.BaseTrainer.logger.info", "str", "torch.save", "torch.save", "torch.save", "torch.save", "base_trainer.BaseTrainer.logger.info"], "methods", ["None"], ["", "def", "_save_checkpoint", "(", "self", ",", "epoch", ",", "save_best", "=", "False", ",", "best_only", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Saving checkpoints\n\n        :param epoch: current epoch number\n        :param log: logging information of the epoch\n        :param save_best: if True, rename the saved checkpoint to 'model_best.pth'\n        \"\"\"", "\n", "arch", "=", "type", "(", "self", ".", "model", ")", ".", "__name__", "\n", "state", "=", "{", "\n", "'arch'", ":", "arch", ",", "\n", "'epoch'", ":", "epoch", ",", "\n", "'state_dict'", ":", "self", ".", "model", ".", "state_dict", "(", ")", ",", "\n", "'optimizer'", ":", "self", ".", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "'monitor_best'", ":", "self", ".", "mnt_best", ",", "\n", "'config'", ":", "self", ".", "config", ",", "\n", "'criterion'", ":", "self", ".", "criterion", ".", "state_dict", "(", ")", "\n", "}", "\n", "if", "not", "best_only", ":", "\n", "            ", "filename", "=", "str", "(", "self", ".", "checkpoint_dir", "/", "'checkpoint-epoch{}.pth'", ".", "format", "(", "epoch", ")", ")", "\n", "torch", ".", "save", "(", "state", ",", "filename", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Saving checkpoint: {} ...\"", ".", "format", "(", "filename", ")", ")", "\n", "", "if", "save_best", ":", "\n", "            ", "best_path", "=", "str", "(", "self", ".", "checkpoint_dir", "/", "'model_best.pth'", ")", "\n", "torch", ".", "save", "(", "state", ",", "best_path", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Saving current best: {} ...\"", ".", "format", "(", "best_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.base.base_trainer.BaseTrainer._load_crt": [[160, 182], ["utils.rename_parallel_state_dict", "utils.load_state_dict", "base_trainer.BaseTrainer.real_model.named_parameters", "print", "torch.load", "torch.load", "torch.load", "torch.load", "list", "state_dict.keys", "k.startswith", "name.startswith", "param.requires_grad_", "print", "state_dict.pop", "print"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.utils.util.rename_parallel_state_dict", "home.repos.pwc.inspect_result.beierzhu_xerm.utils.util.load_state_dict"], ["", "", "def", "_load_crt", "(", "self", ",", "cRT_pretrain", ")", ":", "\n", "        ", "\"\"\"\n        Load from cRT pretrain\n        :param cRT pretrain path to the checkpoint of cRT pretrain\n        \"\"\"", "\n", "state_dict", "=", "torch", ".", "load", "(", "cRT_pretrain", ")", "[", "'state_dict'", "]", "\n", "ignore_linear", "=", "True", "\n", "\n", "rename_parallel_state_dict", "(", "state_dict", ")", "\n", "\n", "if", "ignore_linear", ":", "\n", "            ", "for", "k", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", ":", "\n", "                ", "if", "k", ".", "startswith", "(", "'backbone.linear'", ")", ":", "\n", "                    ", "state_dict", ".", "pop", "(", "k", ")", "\n", "print", "(", "\"Popped\"", ",", "k", ")", "\n", "", "", "", "load_state_dict", "(", "self", ".", "real_model", ",", "state_dict", ")", "\n", "for", "name", ",", "param", "in", "self", ".", "real_model", ".", "named_parameters", "(", ")", ":", "\n", "            ", "if", "not", "name", ".", "startswith", "(", "'backbone.linear'", ")", ":", "\n", "                ", "param", ".", "requires_grad_", "(", "False", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"Allow gradient on:\"", ",", "name", ")", "\n", "", "", "print", "(", "\"** Please check the list of allowed gradient to confirm **\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.base.base_trainer.BaseTrainer._resume_checkpoint": [[183, 228], ["str", "base_trainer.BaseTrainer.logger.info", "torch.load", "torch.load", "torch.load", "torch.load", "utils.load_state_dict", "base_trainer.BaseTrainer.logger.info", "utils.rename_parallel_state_dict", "base_trainer.BaseTrainer.logger.warning", "utils.load_state_dict", "base_trainer.BaseTrainer.logger.info", "base_trainer.BaseTrainer.logger.info", "base_trainer.BaseTrainer.logger.warning", "base_trainer.BaseTrainer.optimizer.load_state_dict"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.utils.util.load_state_dict", "home.repos.pwc.inspect_result.beierzhu_xerm.utils.util.rename_parallel_state_dict", "home.repos.pwc.inspect_result.beierzhu_xerm.utils.util.load_state_dict", "home.repos.pwc.inspect_result.beierzhu_xerm.utils.util.load_state_dict"], ["", "def", "_resume_checkpoint", "(", "self", ",", "resume_path", ",", "state_dict_only", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Resume from saved checkpoints\n\n        :param resume_path: Checkpoint path to be resumed\n        \"\"\"", "\n", "resume_path", "=", "str", "(", "resume_path", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Loading checkpoint: {} ...\"", ".", "format", "(", "resume_path", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "resume_path", ")", "\n", "\n", "if", "not", "state_dict_only", ":", "\n", "            ", "if", "'epoch'", "in", "checkpoint", ":", "\n", "                ", "self", ".", "start_epoch", "=", "checkpoint", "[", "'epoch'", "]", "+", "1", "\n", "\n", "", "if", "'monitor_best'", "in", "checkpoint", ":", "\n", "                ", "self", ".", "mnt_best", "=", "checkpoint", "[", "'monitor_best'", "]", "\n", "\n", "# load architecture params from checkpoint.", "\n", "", "if", "checkpoint", "[", "'config'", "]", "[", "'arch'", "]", "!=", "self", ".", "config", "[", "'arch'", "]", ":", "\n", "                ", "self", ".", "logger", ".", "warning", "(", "\"Warning: Architecture configuration given in config file is different from that of \"", "\n", "\"checkpoint. This may yield an exception while state_dict is being loaded.\"", ")", "\n", "\n", "", "", "state_dict", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "if", "state_dict_only", ":", "\n", "            ", "rename_parallel_state_dict", "(", "state_dict", ")", "\n", "\n", "# self.model.load_state_dict(state_dict)", "\n", "", "load_state_dict", "(", "self", ".", "model", ",", "state_dict", ")", "\n", "\n", "if", "not", "state_dict_only", ":", "\n", "            ", "if", "'criterion'", "in", "checkpoint", ":", "\n", "                ", "load_state_dict", "(", "self", ".", "criterion", ",", "checkpoint", "[", "'criterion'", "]", ")", "\n", "self", ".", "logger", ".", "info", "(", "\"Criterion state dict is loaded\"", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "logger", ".", "info", "(", "\"Criterion state dict is not found, so it's not loaded.\"", ")", "\n", "\n", "# load optimizer state from checkpoint only when optimizer type is not changed.", "\n", "", "if", "'optimizer'", "in", "checkpoint", ":", "\n", "                ", "if", "checkpoint", "[", "'config'", "]", "[", "'optimizer'", "]", "[", "'type'", "]", "!=", "self", ".", "config", "[", "'optimizer'", "]", "[", "'type'", "]", ":", "\n", "                    ", "self", ".", "logger", ".", "warning", "(", "\"Warning: Optimizer type given in config file is different from that of checkpoint. \"", "\n", "\"Optimizer parameters not being resumed.\"", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "'optimizer'", "]", ")", "\n", "\n", "", "", "", "self", ".", "logger", ".", "info", "(", "\"Checkpoint loaded. Resume training from epoch {}\"", ".", "format", "(", "self", ".", "start_epoch", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.beierzhu_xerm.base.base_data_loader.BaseDataLoader.__init__": [[11, 28], ["len", "base_data_loader.BaseDataLoader._split_sampler", "torch.utils.data.DataLoader.__init__"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.base.base_data_loader.BaseDataLoader._split_sampler", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["def", "__init__", "(", "self", ",", "dataset", ",", "batch_size", ",", "shuffle", ",", "validation_split", ",", "num_workers", ",", "collate_fn", "=", "default_collate", ")", ":", "\n", "        ", "self", ".", "validation_split", "=", "validation_split", "\n", "self", ".", "shuffle", "=", "shuffle", "\n", "\n", "self", ".", "batch_idx", "=", "0", "\n", "self", ".", "n_samples", "=", "len", "(", "dataset", ")", "\n", "\n", "self", ".", "sampler", ",", "self", ".", "valid_sampler", "=", "self", ".", "_split_sampler", "(", "self", ".", "validation_split", ")", "\n", "\n", "self", ".", "init_kwargs", "=", "{", "\n", "'dataset'", ":", "dataset", ",", "\n", "'batch_size'", ":", "batch_size", ",", "\n", "'shuffle'", ":", "self", ".", "shuffle", ",", "\n", "'collate_fn'", ":", "collate_fn", ",", "\n", "'num_workers'", ":", "num_workers", "\n", "}", "\n", "super", "(", ")", ".", "__init__", "(", "sampler", "=", "self", ".", "sampler", ",", "**", "self", ".", "init_kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.base.base_data_loader.BaseDataLoader._split_sampler": [[29, 56], ["numpy.arange", "numpy.random.seed", "numpy.random.shuffle", "isinstance", "numpy.delete", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "len", "int", "numpy.arange"], "methods", ["None"], ["", "def", "_split_sampler", "(", "self", ",", "split", ")", ":", "\n", "        ", "if", "split", "==", "0.0", ":", "\n", "            ", "return", "None", ",", "None", "\n", "\n", "", "idx_full", "=", "np", ".", "arange", "(", "self", ".", "n_samples", ")", "\n", "\n", "np", ".", "random", ".", "seed", "(", "0", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "idx_full", ")", "\n", "\n", "if", "isinstance", "(", "split", ",", "int", ")", ":", "\n", "            ", "assert", "split", ">", "0", "\n", "assert", "split", "<", "self", ".", "n_samples", ",", "\"validation set size is configured to be larger than entire dataset.\"", "\n", "len_valid", "=", "split", "\n", "", "else", ":", "\n", "            ", "len_valid", "=", "int", "(", "self", ".", "n_samples", "*", "split", ")", "\n", "\n", "", "valid_idx", "=", "idx_full", "[", "0", ":", "len_valid", "]", "\n", "train_idx", "=", "np", ".", "delete", "(", "idx_full", ",", "np", ".", "arange", "(", "0", ",", "len_valid", ")", ")", "\n", "\n", "train_sampler", "=", "SubsetRandomSampler", "(", "train_idx", ")", "\n", "valid_sampler", "=", "SubsetRandomSampler", "(", "valid_idx", ")", "\n", "\n", "# turn off shuffle option which is mutually exclusive with sampler", "\n", "self", ".", "shuffle", "=", "False", "\n", "self", ".", "n_samples", "=", "len", "(", "train_idx", ")", "\n", "\n", "return", "train_sampler", ",", "valid_sampler", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.base.base_data_loader.BaseDataLoader.split_validation": [[57, 62], ["torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "split_validation", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "valid_sampler", "is", "None", ":", "\n", "            ", "return", "None", "\n", "", "else", ":", "\n", "            ", "return", "DataLoader", "(", "sampler", "=", "self", ".", "valid_sampler", ",", "**", "self", ".", "init_kwargs", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.beierzhu_xerm.base.base_model.BaseModel.forward": [[10, 18], ["None"], "methods", ["None"], ["@", "abstractmethod", "\n", "def", "forward", "(", "self", ",", "*", "inputs", ")", ":", "\n", "        ", "\"\"\"\n        Forward pass logic\n\n        :return: Model output\n        \"\"\"", "\n", "raise", "NotImplementedError", "\n", "", "", ""]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.run_networks.model.__init__": [[20, 68], ["torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "logger.Logger", "torch.zeros().numpy", "torch.zeros().numpy", "torch.zeros().numpy", "torch.zeros().numpy", "torch.zeros().numpy", "torch.zeros().numpy", "torch.zeros().numpy", "torch.zeros().numpy", "torch.zeros().numpy", "torch.zeros().numpy", "torch.zeros().numpy", "torch.zeros().numpy", "torch.zeros().numpy", "torch.zeros().numpy", "torch.zeros().numpy", "torch.zeros().numpy", "run_networks.model.init_models", "print", "sklearn.decomposition.IncrementalPCA", "run_networks.model.load_model", "print", "len", "int", "print", "run_networks.model.init_optimizers", "run_networks.model.init_criterions", "os.path.join", "run_networks.model.logger.log_cfg", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "int"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.init_models", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.load_model", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.init_optimizers", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.init_criterions", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.logger.Logger.log_cfg"], ["    ", "def", "__init__", "(", "self", ",", "config", ",", "data", ",", "test", "=", "False", ")", ":", "\n", "        ", "self", ".", "config", "=", "config", "\n", "self", ".", "training_opt", "=", "self", ".", "config", "[", "'training_opt'", "]", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "test_mode", "=", "test", "\n", "self", ".", "num_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "self", ".", "do_shuffle", "=", "config", "[", "'shuffle'", "]", "if", "'shuffle'", "in", "config", "else", "False", "\n", "\n", "# Setup logger", "\n", "self", ".", "logger", "=", "Logger", "(", "self", ".", "training_opt", "[", "'log_dir'", "]", ")", "\n", "\n", "# init moving average", "\n", "self", ".", "embed_mean", "=", "torch", ".", "zeros", "(", "int", "(", "self", ".", "training_opt", "[", "'feature_dim'", "]", ")", ")", ".", "numpy", "(", ")", "\n", "self", ".", "mu", "=", "0.9", "\n", "\n", "# Initialize model", "\n", "self", ".", "init_models", "(", ")", "\n", "\n", "# apply incremental pca", "\n", "self", ".", "apply_pca", "=", "(", "'apply_ipca'", "in", "self", ".", "config", ")", "and", "self", ".", "config", "[", "'apply_ipca'", "]", "\n", "if", "self", ".", "apply_pca", ":", "\n", "            ", "print", "(", "'==========> Apply Incremental PCA <======='", ")", "\n", "self", ".", "pca", "=", "IncrementalPCA", "(", "n_components", "=", "self", ".", "config", "[", "'num_components'", "]", ",", "batch_size", "=", "self", ".", "training_opt", "[", "'batch_size'", "]", ")", "\n", "\n", "# Load pre-trained model parameters", "\n", "", "if", "'model_dir'", "in", "self", ".", "config", "and", "self", ".", "config", "[", "'model_dir'", "]", "is", "not", "None", ":", "\n", "            ", "self", ".", "load_model", "(", "self", ".", "config", "[", "'model_dir'", "]", ")", "\n", "\n", "# Under training mode, initialize training steps, optimizers, schedulers, criterions", "\n", "", "if", "not", "self", ".", "test_mode", ":", "\n", "\n", "# If using steps for training, we need to calculate training steps ", "\n", "# for each epoch based on actual number of training data instead of ", "\n", "# oversampled data number ", "\n", "            ", "print", "(", "'Using steps for training.'", ")", "\n", "self", ".", "training_data_num", "=", "len", "(", "self", ".", "data", "[", "'train'", "]", ".", "dataset", ")", "\n", "self", ".", "epoch_steps", "=", "int", "(", "self", ".", "training_data_num", "/", "self", ".", "training_opt", "[", "'batch_size'", "]", ")", "\n", "\n", "# Initialize model optimizer and scheduler", "\n", "print", "(", "'Initializing model optimizer.'", ")", "\n", "self", ".", "init_optimizers", "(", "self", ".", "model_optim_params_dict", ")", "\n", "self", ".", "init_criterions", "(", ")", "\n", "\n", "# Set up log file", "\n", "self", ".", "log_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "training_opt", "[", "'log_dir'", "]", ",", "'log.txt'", ")", "\n", "self", ".", "logger", ".", "log_cfg", "(", "self", ".", "config", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "log_file", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.run_networks.model.init_models": [[69, 110], ["print", "networks_defs.items", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "model_args.update", "utils.source_import().create_model", "torch.DataParallel().cuda", "torch.DataParallel().cuda", "torch.DataParallel().cuda", "torch.DataParallel().cuda", "run_networks.model.model_optim_named_params.update", "print", "run_networks.model.networks[].named_parameters", "print", "dict", "run_networks.model.networks[].parameters", "utils.source_import", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "run_networks.model.networks[].named_parameters", "run_networks.model.networks[].named_parameters", "print"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNext152Feature.create_model", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.source_import"], ["", "", "def", "init_models", "(", "self", ",", "optimizer", "=", "True", ")", ":", "\n", "        ", "networks_defs", "=", "self", ".", "config", "[", "'networks'", "]", "\n", "self", ".", "networks", "=", "{", "}", "\n", "self", ".", "model_optim_params_dict", "=", "{", "}", "\n", "self", ".", "model_optim_named_params", "=", "{", "}", "\n", "\n", "print", "(", "\"Using\"", ",", "torch", ".", "cuda", ".", "device_count", "(", ")", ",", "\"GPUs.\"", ")", "\n", "\n", "for", "key", ",", "val", "in", "networks_defs", ".", "items", "(", ")", ":", "\n", "# Networks", "\n", "            ", "def_file", "=", "val", "[", "'def_file'", "]", "\n", "model_args", "=", "val", "[", "'params'", "]", "\n", "model_args", ".", "update", "(", "{", "'test'", ":", "self", ".", "test_mode", "}", ")", "\n", "\n", "self", ".", "networks", "[", "key", "]", "=", "source_import", "(", "def_file", ")", ".", "create_model", "(", "**", "model_args", ")", "\n", "self", ".", "networks", "[", "key", "]", "=", "nn", ".", "DataParallel", "(", "self", ".", "networks", "[", "key", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "if", "'fix'", "in", "val", "and", "val", "[", "'fix'", "]", ":", "\n", "                ", "print", "(", "'Freezing weights of module {}'", ".", "format", "(", "key", ")", ")", "\n", "for", "param_name", ",", "param", "in", "self", ".", "networks", "[", "key", "]", ".", "named_parameters", "(", ")", ":", "\n", "# Freeze all parameters except final fc layer", "\n", "                    ", "if", "'fc'", "not", "in", "param_name", ":", "\n", "                        ", "param", ".", "requires_grad", "=", "False", "\n", "", "", "print", "(", "'=====> Freezing: {} | False'", ".", "format", "(", "key", ")", ")", "\n", "\n", "", "if", "'fix_set'", "in", "val", ":", "\n", "                ", "for", "fix_layer", "in", "val", "[", "'fix_set'", "]", ":", "\n", "                    ", "for", "param_name", ",", "param", "in", "self", ".", "networks", "[", "key", "]", ".", "named_parameters", "(", ")", ":", "\n", "                        ", "if", "fix_layer", "==", "param_name", ":", "\n", "                            ", "param", ".", "requires_grad", "=", "False", "\n", "print", "(", "'=====> Freezing: {} | {}'", ".", "format", "(", "param_name", ",", "param", ".", "requires_grad", ")", ")", "\n", "continue", "\n", "\n", "\n", "# Optimizer list", "\n", "", "", "", "", "optim_params", "=", "val", "[", "'optim_params'", "]", "\n", "self", ".", "model_optim_named_params", ".", "update", "(", "dict", "(", "self", ".", "networks", "[", "key", "]", ".", "named_parameters", "(", ")", ")", ")", "\n", "self", ".", "model_optim_params_dict", "[", "key", "]", "=", "{", "'params'", ":", "self", ".", "networks", "[", "key", "]", ".", "parameters", "(", ")", ",", "\n", "'lr'", ":", "optim_params", "[", "'lr'", "]", ",", "\n", "'momentum'", ":", "optim_params", "[", "'momentum'", "]", ",", "\n", "'weight_decay'", ":", "optim_params", "[", "'weight_decay'", "]", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.run_networks.model.init_criterions": [[111, 135], ["criterion_defs.items", "list", "utils.source_import().create_loss().cuda", "val[].values", "print", "run_networks.model.init_optimizers", "utils.source_import().create_loss", "run_networks.model.criterions[].parameters", "utils.source_import"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.init_optimizers", "home.repos.pwc.inspect_result.beierzhu_xerm.loss.PriorCELoss.create_loss", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.source_import"], ["", "", "def", "init_criterions", "(", "self", ")", ":", "\n", "        ", "criterion_defs", "=", "self", ".", "config", "[", "'criterions'", "]", "\n", "self", ".", "criterions", "=", "{", "}", "\n", "self", ".", "criterion_weights", "=", "{", "}", "\n", "\n", "for", "key", ",", "val", "in", "criterion_defs", ".", "items", "(", ")", ":", "\n", "            ", "def_file", "=", "val", "[", "'def_file'", "]", "\n", "loss_args", "=", "list", "(", "val", "[", "'loss_params'", "]", ".", "values", "(", ")", ")", "\n", "\n", "self", ".", "criterions", "[", "key", "]", "=", "source_import", "(", "def_file", ")", ".", "create_loss", "(", "*", "loss_args", ")", ".", "cuda", "(", ")", "\n", "self", ".", "criterion_weights", "[", "key", "]", "=", "val", "[", "'weight'", "]", "\n", "\n", "if", "val", "[", "'optim_params'", "]", ":", "\n", "                ", "print", "(", "'Initializing criterion optimizer.'", ")", "\n", "optim_params", "=", "val", "[", "'optim_params'", "]", "\n", "optim_params", "=", "[", "{", "'params'", ":", "self", ".", "criterions", "[", "key", "]", ".", "parameters", "(", ")", ",", "\n", "'lr'", ":", "optim_params", "[", "'lr'", "]", ",", "\n", "'momentum'", ":", "optim_params", "[", "'momentum'", "]", ",", "\n", "'weight_decay'", ":", "optim_params", "[", "'weight_decay'", "]", "}", "]", "\n", "# Initialize criterion optimizer and scheduler", "\n", "self", ".", "criterion_optimizer", ",", "self", ".", "criterion_optimizer_scheduler", "=", "self", ".", "init_optimizers", "(", "optim_params", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "criterion_optimizer", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.run_networks.model.init_optimizers": [[136, 171], ["networks_defs.items", "print", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "print", "torch.SGD", "torch.SGD", "torch.SGD", "torch.SGD", "print", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "print", "utils.WarmupMultiStepLR", "print", "torch.lr_scheduler.StepLR", "torch.lr_scheduler.StepLR", "torch.lr_scheduler.StepLR", "torch.lr_scheduler.StepLR"], "methods", ["None"], ["", "", "", "def", "init_optimizers", "(", "self", ",", "optim_params_dict", ")", ":", "\n", "        ", "'''\n        seperate backbone optimizer and classifier optimizer\n        by Kaihua\n        '''", "\n", "networks_defs", "=", "self", ".", "config", "[", "'networks'", "]", "\n", "self", ".", "model_optimizer_dict", "=", "{", "}", "\n", "self", ".", "model_scheduler_dict", "=", "{", "}", "\n", "\n", "for", "key", ",", "val", "in", "networks_defs", ".", "items", "(", ")", ":", "\n", "# optimizer", "\n", "            ", "if", "'optimizer'", "in", "self", ".", "training_opt", "and", "self", ".", "training_opt", "[", "'optimizer'", "]", "==", "'adam'", ":", "\n", "                ", "print", "(", "'=====> Using Adam optimizer'", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "[", "optim_params_dict", "[", "key", "]", ",", "]", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'=====> Using SGD optimizer'", ")", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "[", "optim_params_dict", "[", "key", "]", ",", "]", ")", "\n", "", "self", ".", "model_optimizer_dict", "[", "key", "]", "=", "optimizer", "\n", "# scheduler", "\n", "scheduler_params", "=", "val", "[", "'scheduler_params'", "]", "\n", "if", "scheduler_params", "[", "'coslr'", "]", ":", "\n", "                ", "print", "(", "\"===> Module {} : Using coslr eta_min={}\"", ".", "format", "(", "key", ",", "scheduler_params", "[", "'endlr'", "]", ")", ")", "\n", "self", ".", "model_scheduler_dict", "[", "key", "]", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "\n", "optimizer", ",", "self", ".", "training_opt", "[", "'num_epochs'", "]", ",", "eta_min", "=", "scheduler_params", "[", "'endlr'", "]", ")", "\n", "", "elif", "scheduler_params", "[", "'warmup'", "]", ":", "\n", "                ", "print", "(", "\"===> Module {} : Using warmup\"", ".", "format", "(", "key", ")", ")", "\n", "self", ".", "model_scheduler_dict", "[", "key", "]", "=", "WarmupMultiStepLR", "(", "optimizer", ",", "scheduler_params", "[", "'lr_step'", "]", ",", "\n", "gamma", "=", "scheduler_params", "[", "'lr_factor'", "]", ",", "warmup_epochs", "=", "scheduler_params", "[", "'warm_epoch'", "]", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "f'===> Module {key}: Using StepLR'", ")", "\n", "self", ".", "model_scheduler_dict", "[", "key", "]", "=", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "\n", "step_size", "=", "scheduler_params", "[", "'step_size'", "]", ",", "\n", "gamma", "=", "scheduler_params", "[", "'gamma'", "]", ")", "\n", "\n", "", "", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.run_networks.model.show_current_lr": [[172, 182], ["run_networks.model.model_optimizer_dict.items", "list", "utils.print_write", "set", "max", "max", "str", "str"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.print_write", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max"], ["", "def", "show_current_lr", "(", "self", ")", ":", "\n", "        ", "max_lr", "=", "0.0", "\n", "for", "key", ",", "val", "in", "self", ".", "model_optimizer_dict", ".", "items", "(", ")", ":", "\n", "            ", "lr_set", "=", "list", "(", "set", "(", "[", "para", "[", "'lr'", "]", "for", "para", "in", "val", ".", "param_groups", "]", ")", ")", "\n", "if", "max", "(", "lr_set", ")", ">", "max_lr", ":", "\n", "                ", "max_lr", "=", "max", "(", "lr_set", ")", "\n", "", "lr_set", "=", "','", ".", "join", "(", "[", "str", "(", "i", ")", "for", "i", "in", "lr_set", "]", ")", "\n", "print_str", "=", "[", "'=====> Current Learning Rate of model {} : {}'", ".", "format", "(", "key", ",", "str", "(", "lr_set", ")", ")", "]", "\n", "print_write", "(", "print_str", ",", "self", ".", "log_file", ")", "\n", "", "return", "max_lr", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.run_networks.model.batch_forward": [[184, 209], ["run_networks.model.pca.partial_fit", "run_networks.model.pca.transform", "run_networks.model.pca.inverse_transform", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "run_networks.model.features.detach().mean().view().cpu().numpy", "run_networks.model.features.cpu().numpy", "run_networks.model.features.cpu().numpy", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "run_networks.model.features.detach().mean().view().cpu", "run_networks.model.features.cpu", "run_networks.model.features.cpu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "run_networks.model.features.detach().mean().view", "run_networks.model.features.detach().mean", "run_networks.model.features.detach"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to"], ["", "def", "batch_forward", "(", "self", ",", "inputs", ",", "labels", "=", "None", ",", "feature_ext", "=", "False", ",", "phase", "=", "'train'", ")", ":", "\n", "        ", "'''\n        This is a general single batch running function. \n        '''", "\n", "\n", "# Calculate Features", "\n", "self", ".", "features", "=", "self", ".", "networks", "[", "'feat_model'", "]", "(", "inputs", ")", "\n", "\n", "if", "self", ".", "apply_pca", ":", "\n", "            ", "if", "phase", "==", "'train'", "and", "self", ".", "features", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "                ", "self", ".", "pca", ".", "partial_fit", "(", "self", ".", "features", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "pca_feat", "=", "self", ".", "pca", ".", "transform", "(", "self", ".", "features", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "pca_feat", "[", ":", ",", "0", "]", "=", "0.0", "\n", "new_feat", "=", "self", ".", "pca", ".", "inverse_transform", "(", "pca_feat", ")", "\n", "self", ".", "features", "=", "torch", ".", "from_numpy", "(", "new_feat", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "features", ".", "device", ")", "\n", "\n", "# update moving average", "\n", "", "", "if", "phase", "==", "'train'", ":", "\n", "            ", "self", ".", "embed_mean", "=", "self", ".", "mu", "*", "self", ".", "embed_mean", "+", "self", ".", "features", ".", "detach", "(", ")", ".", "mean", "(", "0", ")", ".", "view", "(", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "# If not just extracting features, calculate logits", "\n", "", "if", "not", "feature_ext", ":", "\n", "# cont_eval = 'continue_eval' in self.training_opt and self.training_opt['continue_eval'] and phase != 'train'", "\n", "            ", "self", ".", "logits", ",", "self", ".", "route_logits", "=", "self", ".", "networks", "[", "'classifier'", "]", "(", "self", ".", "features", ",", "labels", ",", "self", ".", "embed_mean", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.run_networks.model.batch_backward": [[210, 226], ["run_networks.model.model_optimizer_dict.items", "run_networks.model.loss.backward", "run_networks.model.model_optimizer_dict.items", "optimizer.zero_grad", "run_networks.model.criterion_optimizer.zero_grad", "utils.print_grad_norm", "optimizer.step", "run_networks.model.criterion_optimizer.step"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.print_grad_norm"], ["", "", "def", "batch_backward", "(", "self", ",", "print_grad", "=", "False", ")", ":", "\n", "# Zero out optimizer gradients", "\n", "        ", "for", "key", ",", "optimizer", "in", "self", ".", "model_optimizer_dict", ".", "items", "(", ")", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "", "if", "self", ".", "criterion_optimizer", ":", "\n", "            ", "self", ".", "criterion_optimizer", ".", "zero_grad", "(", ")", "\n", "# Back-propagation from loss outputs", "\n", "", "self", ".", "loss", ".", "backward", "(", ")", "\n", "# display gradient", "\n", "if", "self", ".", "training_opt", "[", "'display_grad'", "]", ":", "\n", "            ", "print_grad_norm", "(", "self", ".", "model_optim_named_params", ",", "print_write", ",", "self", ".", "log_file", ",", "verbose", "=", "print_grad", ")", "\n", "# Step optimizers", "\n", "", "for", "key", ",", "optimizer", "in", "self", ".", "model_optimizer_dict", ".", "items", "(", ")", ":", "\n", "            ", "optimizer", ".", "step", "(", ")", "\n", "", "if", "self", ".", "criterion_optimizer", ":", "\n", "            ", "self", ".", "criterion_optimizer", ".", "step", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.run_networks.model.batch_loss": [[227, 242], ["run_networks.model.criterions.keys", "run_networks.model.criterions.keys"], "methods", ["None"], ["", "", "def", "batch_loss", "(", "self", ",", "labels", ")", ":", "\n", "        ", "self", ".", "loss", "=", "0", "\n", "\n", "# First, apply performance loss", "\n", "if", "'PerformanceLoss'", "in", "self", ".", "criterions", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "loss_perf", "=", "self", ".", "criterions", "[", "'PerformanceLoss'", "]", "(", "self", ".", "logits", ",", "labels", ")", "\n", "self", ".", "loss_perf", "*=", "self", ".", "criterion_weights", "[", "'PerformanceLoss'", "]", "\n", "self", ".", "loss", "+=", "self", ".", "loss_perf", "\n", "\n", "# Apply loss on Route Weights if set up", "\n", "", "if", "'RouteWeightLoss'", "in", "self", ".", "criterions", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "loss_route", "=", "self", ".", "criterions", "[", "'RouteWeightLoss'", "]", "(", "self", ".", "route_logits", ",", "labels", ")", "\n", "self", ".", "loss_route", "=", "self", ".", "loss_route", "*", "self", ".", "criterion_weights", "[", "'RouteWeightLoss'", "]", "\n", "# Add Route Weights loss to total loss", "\n", "self", ".", "loss", "+=", "self", ".", "loss_route", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.run_networks.model.shuffle_batch": [[244, 249], ["torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "x.size"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size"], ["", "", "def", "shuffle_batch", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "index", "=", "torch", ".", "randperm", "(", "x", ".", "size", "(", "0", ")", ")", "\n", "x", "=", "x", "[", "index", "]", "\n", "y", "=", "y", "[", "index", "]", "\n", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.run_networks.model.xERM_train": [[250, 467], ["print", "datetime.datetime.datetime.now", "datetime.datetime.datetime.timestamp", "datetime.datetime.datetime.fromtimestamp", "datetime.datetime.fromtimestamp.isoformat", "os.path.join", "networks_defs.items", "print", "networks_defs.items", "print", "print", "xERM_loss.xERM_loss.xERMLoss", "run_networks.model.networks.items", "len", "range", "model_args.update", "utils.source_import().create_model", "torch.DataParallel().cuda", "torch.DataParallel().cuda", "torch.DataParallel().cuda", "torch.DataParallel().cuda", "xERM_optim_named_params.update", "torch.SGD", "torch.SGD", "torch.SGD", "torch.SGD", "model.parameters", "run_networks.model.eval", "xERM_networks.items", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "xERM_scheduler_dict.items", "utils.MiscMeter", "utils.MiscMeter", "utils.MiscMeter", "utils.MiscMeter", "enumerate", "run_networks.model.eval_with_preds", "utils.MiscMeter", "utils.MiscMeter", "utils.MiscMeter", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "xERM_networks.items", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "utils.print_w", "utils.shot_acc", "utils.print_w", "utils.print_w", "utils.shot_acc", "utils.print_w", "utils.print_w", "utils.shot_acc", "utils.print_w", "utils.print_w", "copy.deepcopy", "copy.deepcopy", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "dict", "xERM_networks[].parameters", "print", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "run_networks.model.train", "scheduler.step", "print", "xERM_loss.xERM_loss.xERMLoss.", "utils.MiscMeter.update", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "utils.MiscMeter.update", "utils.MiscMeter.update", "utils.MiscMeter.update", "xERM_scheduler_dict.items", "loss.xERM_loss.xERMLoss.backward", "xERM_scheduler_dict.items", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "run_networks.model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "xERM_networks[].state_dict", "xERM_networks[].state_dict", "utils.source_import", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "xERM_networks[].named_parameters", "print", "utils.WarmupMultiStepLR", "torch.lr_scheduler.StepLR", "torch.lr_scheduler.StepLR", "torch.lr_scheduler.StepLR", "torch.lr_scheduler.StepLR", "scheduler.get_last_lr", "inputs.cuda", "labels.cuda", "loss.xERM_loss.xERMLoss.item", "scheduler.optimizer.zero_grad", "scheduler.optimizer.step", "utils.print_w", "utils.torch2numpy", "utils.torch2numpy", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "utils.MiscMeter.update", "utils.MiscMeter.update", "utils.MiscMeter.update", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "labels.size", "labels.size", "labels.size", "labels.size", "labels.size", "labels.size", "inputs.cuda", "labels.cuda", "labels.size", "labels.size", "labels.size", "labels.size", "labels.size", "labels.size"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNext152Feature.create_model", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.eval", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.eval_with_preds", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.print_w", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.shot_acc", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.print_w", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.print_w", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.shot_acc", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.print_w", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.print_w", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.shot_acc", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.print_w", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.print_w", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.train", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.eval", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.source_import", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.print_w", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.torch2numpy", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.torch2numpy", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size"], ["", "def", "xERM_train", "(", "self", ")", ":", "\n", "        ", "print", "(", "'=> Build xERM model'", ")", "\n", "now", "=", "datetime", ".", "now", "(", ")", "\n", "timestamp", "=", "datetime", ".", "timestamp", "(", "now", ")", "\n", "dt_object", "=", "datetime", ".", "fromtimestamp", "(", "timestamp", ")", "\n", "time_str", "=", "dt_object", ".", "isoformat", "(", ")", "\n", "\n", "self", ".", "xERM_log", "=", "os", ".", "path", ".", "join", "(", "self", ".", "training_opt", "[", "'log_dir'", "]", ",", "f'{time_str}_distil_log.txt'", ")", "\n", "networks_defs", "=", "self", ".", "config", "[", "'networks'", "]", "\n", "xERM_networks", "=", "{", "}", "\n", "xERM_optim_params_dict", "=", "{", "}", "\n", "xERM_optim_named_params", "=", "{", "}", "\n", "\n", "for", "key", ",", "val", "in", "networks_defs", ".", "items", "(", ")", ":", "\n", "# Networks", "\n", "            ", "def_file", "=", "val", "[", "'def_file'", "]", "\n", "model_args", "=", "val", "[", "'params'", "]", "\n", "model_args", ".", "update", "(", "{", "'test'", ":", "False", "}", ")", "\n", "\n", "xERM_networks", "[", "key", "]", "=", "source_import", "(", "def_file", ")", ".", "create_model", "(", "**", "model_args", ")", "\n", "xERM_networks", "[", "key", "]", "=", "nn", ".", "DataParallel", "(", "xERM_networks", "[", "key", "]", ")", ".", "cuda", "(", ")", "\n", "# Optimizer list", "\n", "optim_params", "=", "val", "[", "'optim_params'", "]", "\n", "xERM_optim_named_params", ".", "update", "(", "dict", "(", "xERM_networks", "[", "key", "]", ".", "named_parameters", "(", ")", ")", ")", "\n", "xERM_optim_params_dict", "[", "key", "]", "=", "{", "'params'", ":", "xERM_networks", "[", "key", "]", ".", "parameters", "(", ")", ",", "\n", "'lr'", ":", "optim_params", "[", "'lr'", "]", ",", "\n", "'momentum'", ":", "optim_params", "[", "'momentum'", "]", ",", "\n", "'weight_decay'", ":", "optim_params", "[", "'weight_decay'", "]", "}", "\n", "\n", "", "print", "(", "'=> Build optimizer'", ")", "\n", "networks_defs", "=", "self", ".", "config", "[", "'networks'", "]", "\n", "xERM_optimizer_dict", "=", "{", "}", "\n", "xERM_scheduler_dict", "=", "{", "}", "\n", "\n", "for", "key", ",", "val", "in", "networks_defs", ".", "items", "(", ")", ":", "\n", "            ", "optimizer", "=", "optim", ".", "SGD", "(", "[", "xERM_optim_params_dict", "[", "key", "]", ",", "]", ")", "\n", "xERM_optimizer_dict", "[", "key", "]", "=", "optimizer", "\n", "# scheduler", "\n", "scheduler_params", "=", "val", "[", "'scheduler_params'", "]", "\n", "# -------------------add scheduler new ---------------------------------", "\n", "if", "scheduler_params", "[", "'coslr'", "]", ":", "\n", "                ", "print", "(", "\"===> Module {} : Using coslr eta_min={}\"", ".", "format", "(", "key", ",", "scheduler_params", "[", "'endlr'", "]", ")", ")", "\n", "xERM_scheduler_dict", "[", "key", "]", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "\n", "optimizer", ",", "self", ".", "training_opt", "[", "'num_epochs'", "]", ",", "eta_min", "=", "scheduler_params", "[", "'endlr'", "]", ")", "\n", "", "elif", "scheduler_params", "[", "'warmup'", "]", ":", "\n", "                ", "print", "(", "\"===> Module {} : Using warmup\"", ".", "format", "(", "key", ")", ")", "\n", "xERM_scheduler_dict", "[", "key", "]", "=", "WarmupMultiStepLR", "(", "optimizer", ",", "scheduler_params", "[", "'lr_step'", "]", ",", "\n", "gamma", "=", "scheduler_params", "[", "'lr_factor'", "]", ",", "warmup_epochs", "=", "scheduler_params", "[", "'warm_epoch'", "]", ")", "\n", "", "else", ":", "\n", "                ", "xERM_scheduler_dict", "[", "key", "]", "=", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "\n", "step_size", "=", "scheduler_params", "[", "'step_size'", "]", ",", "\n", "gamma", "=", "scheduler_params", "[", "'gamma'", "]", ")", "\n", "\n", "", "", "print", "(", "'=> Build Criterion'", ")", "\n", "gamma", "=", "self", ".", "training_opt", "[", "'gamma'", "]", "\n", "print", "(", "f'=> gamma {gamma}'", ")", "\n", "xERM_loss", "=", "xERMLoss", "(", "gamma", "=", "gamma", ")", "\n", "end_epoch", "=", "self", ".", "training_opt", "[", "'num_epochs'", "]", "\n", "# freeze teacher", "\n", "for", "key", ",", "model", "in", "self", ".", "networks", ".", "items", "(", ")", ":", "\n", "            ", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "", "model", ".", "eval", "(", ")", "\n", "\n", "", "step_length", "=", "len", "(", "self", ".", "data", "[", "'train'", "]", ")", "\n", "for", "epoch", "in", "range", "(", "1", ",", "end_epoch", "+", "1", ")", ":", "\n", "            ", "for", "key", ",", "model", "in", "xERM_networks", ".", "items", "(", ")", ":", "\n", "                ", "model", ".", "train", "(", ")", "\n", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "for", "key", ",", "scheduler", "in", "xERM_scheduler_dict", ".", "items", "(", ")", ":", "\n", "                ", "scheduler", ".", "step", "(", ")", "\n", "lr", "=", "scheduler", ".", "get_last_lr", "(", ")", "[", "0", "]", "\n", "print", "(", "f'{key} lr is {lr}'", ")", "\n", "\n", "", "total_preds", "=", "[", "]", "\n", "total_labels", "=", "[", "]", "\n", "# Iterate over dataset", "\n", "losses", "=", "MiscMeter", "(", ")", "\n", "te_accs", "=", "MiscMeter", "(", ")", "\n", "tde_accs", "=", "MiscMeter", "(", ")", "\n", "xERM_accs", "=", "MiscMeter", "(", ")", "\n", "\n", "for", "step", ",", "(", "inputs", ",", "labels", ",", "indexes", ")", "in", "enumerate", "(", "self", ".", "data", "[", "'train'", "]", ")", ":", "\n", "                ", "inputs", ",", "labels", "=", "inputs", ".", "cuda", "(", ")", ",", "labels", ".", "cuda", "(", ")", "\n", "# forward teacher model", "\n", "features", "=", "self", ".", "networks", "[", "'feat_model'", "]", "(", "inputs", ")", "\n", "logits_TDE", ",", "logits_TE", "=", "self", ".", "networks", "[", "'classifier'", "]", "(", "features", ",", "None", ",", "self", ".", "embed_mean", ")", "\n", "# forward xERM model", "\n", "xERM_features", "=", "xERM_networks", "[", "'feat_model'", "]", "(", "inputs", ")", "\n", "_", ",", "logits_xERM", "=", "xERM_networks", "[", "'classifier'", "]", "(", "xERM_features", ",", "None", ",", "self", ".", "embed_mean", ")", "\n", "# calculate loss", "\n", "loss", "=", "xERM_loss", "(", "logits_TE", ",", "logits_TDE", ",", "logits_xERM", ",", "labels", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ")", "\n", "_", ",", "te_preds", "=", "torch", ".", "max", "(", "logits_TE", ",", "1", ")", "\n", "_", ",", "tde_preds", "=", "torch", ".", "max", "(", "logits_TDE", ",", "1", ")", "\n", "_", ",", "xERM_preds", "=", "torch", ".", "max", "(", "logits_xERM", ",", "1", ")", "\n", "te_accs", ".", "update", "(", "(", "te_preds", "==", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "labels", ".", "size", "(", "0", ")", ",", "n", "=", "labels", ".", "size", "(", "0", ")", ")", "\n", "tde_accs", ".", "update", "(", "(", "tde_preds", "==", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "labels", ".", "size", "(", "0", ")", ",", "n", "=", "labels", ".", "size", "(", "0", ")", ")", "\n", "xERM_accs", ".", "update", "(", "(", "xERM_preds", "==", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "labels", ".", "size", "(", "0", ")", ",", "n", "=", "labels", ".", "size", "(", "0", ")", ")", "\n", "# update loss", "\n", "for", "key", ",", "scheduler", "in", "xERM_scheduler_dict", ".", "items", "(", ")", ":", "\n", "                    ", "scheduler", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "", "loss", ".", "backward", "(", ")", "\n", "for", "key", ",", "scheduler", "in", "xERM_scheduler_dict", ".", "items", "(", ")", ":", "\n", "                    ", "scheduler", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "if", "step", "%", "self", ".", "training_opt", "[", "'display_step'", "]", "==", "0", ":", "\n", "                    ", "print_w", "(", "f'Epoch: [{epoch}][{step}/{step_length+1}] '", "\n", "f'LR {lr:.6f} '", "\n", "f'Total Loss {losses.avg:.3f} '", "\n", "f'TE Acc {te_accs.avg:.3f} '", "\n", "f'TDE Acc {tde_accs.avg:.3f} '", "\n", "f'xERM Acc {xERM_accs.avg:.3f}'", ",", "self", ".", "xERM_log", ")", "\n", "", "total_preds", ".", "append", "(", "torch2numpy", "(", "te_preds", ")", ")", "\n", "total_labels", ".", "append", "(", "torch2numpy", "(", "labels", ")", ")", "\n", "", "rsls_train", "=", "self", ".", "eval_with_preds", "(", "total_preds", ",", "total_labels", ")", "\n", "\n", "# after each epoch validate", "\n", "te_accs", "=", "MiscMeter", "(", ")", "\n", "tde_accs", "=", "MiscMeter", "(", ")", "\n", "xERM_accs", "=", "MiscMeter", "(", ")", "\n", "\n", "total_labels", "=", "torch", ".", "empty", "(", "0", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "total_preds", "=", "torch", ".", "empty", "(", "0", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "total_tde_preds", "=", "torch", ".", "empty", "(", "0", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "total_te_preds", "=", "torch", ".", "empty", "(", "0", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "key", ",", "model", "in", "xERM_networks", ".", "items", "(", ")", ":", "\n", "                ", "model", ".", "eval", "(", ")", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "step", ",", "(", "inputs", ",", "labels", ",", "indexes", ")", "in", "enumerate", "(", "self", ".", "data", "[", "'test'", "]", ")", ":", "\n", "                    ", "inputs", ",", "labels", "=", "inputs", ".", "cuda", "(", ")", ",", "labels", ".", "cuda", "(", ")", "\n", "# forward teacher model", "\n", "features", "=", "self", ".", "networks", "[", "'feat_model'", "]", "(", "inputs", ")", "\n", "logits_TDE", ",", "logits_TE", "=", "self", ".", "networks", "[", "'classifier'", "]", "(", "features", ",", "None", ",", "self", ".", "embed_mean", ")", "\n", "# forward xERM model", "\n", "xERM_features", "=", "xERM_networks", "[", "'feat_model'", "]", "(", "inputs", ")", "\n", "logits_xERM_tde", ",", "logits_xERM", "=", "xERM_networks", "[", "'classifier'", "]", "(", "xERM_features", ",", "None", ",", "self", ".", "embed_mean", ")", "\n", "\n", "_", ",", "te_preds", "=", "torch", ".", "max", "(", "logits_TE", ",", "1", ")", "\n", "_", ",", "tde_preds", "=", "torch", ".", "max", "(", "logits_TDE", ",", "1", ")", "\n", "_", ",", "xERM_preds", "=", "torch", ".", "max", "(", "logits_xERM", ",", "1", ")", "\n", "\n", "te_accs", ".", "update", "(", "(", "te_preds", "==", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "labels", ".", "size", "(", "0", ")", ",", "n", "=", "labels", ".", "size", "(", "0", ")", ")", "\n", "tde_accs", ".", "update", "(", "(", "tde_preds", "==", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "labels", ".", "size", "(", "0", ")", ",", "n", "=", "labels", ".", "size", "(", "0", ")", ")", "\n", "xERM_accs", ".", "update", "(", "(", "xERM_preds", "==", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "labels", ".", "size", "(", "0", ")", ",", "n", "=", "labels", ".", "size", "(", "0", ")", ")", "\n", "\n", "total_preds", "=", "torch", ".", "cat", "(", "(", "total_preds", ",", "xERM_preds", ")", ")", "\n", "total_labels", "=", "torch", ".", "cat", "(", "(", "total_labels", ",", "labels", ")", ")", "\n", "total_tde_preds", "=", "torch", ".", "cat", "(", "(", "total_tde_preds", ",", "tde_preds", ")", ")", "\n", "total_te_preds", "=", "torch", ".", "cat", "(", "(", "total_te_preds", ",", "te_preds", ")", ")", "\n", "\n", "", "", "print_w", "(", "f'=> Test Epoch: [{epoch}] '", "\n", "f'TE Acc {te_accs.avg:.3f} '", "\n", "f'TDE Acc {tde_accs.avg:.3f} '", "\n", "f'xERM Acc {xERM_accs.avg:.3f} '", ",", "self", ".", "xERM_log", ")", "\n", "\n", "self", ".", "many_acc_top1", ",", "self", ".", "median_acc_top1", ",", "self", ".", "low_acc_top1", ",", "self", ".", "cls_accs", "=", "shot_acc", "(", "total_preds", ",", "\n", "total_labels", ",", "\n", "self", ".", "data", "[", "'train'", "]", ",", "\n", "acc_per_cls", "=", "True", ")", "\n", "\n", "# Top-1 accuracy and additional string", "\n", "print_w", "(", "'xERM---------'", ",", "self", ".", "xERM_log", ")", "\n", "print_w", "(", "f'Many_shot_accuracy_top1: {self.many_acc_top1:.3f} '", "\n", "f'Median_shot_accuracy_top1: {self.median_acc_top1:.3f} '", "\n", "f'Low_shot_accuracy_top1: {self.low_acc_top1:.3f}'", ",", "self", ".", "xERM_log", ")", "\n", "\n", "self", ".", "many_acc_top1", ",", "self", ".", "median_acc_top1", ",", "self", ".", "low_acc_top1", ",", "self", ".", "cls_accs", "=", "shot_acc", "(", "total_tde_preds", ",", "\n", "total_labels", ",", "\n", "self", ".", "data", "[", "'train'", "]", ",", "\n", "acc_per_cls", "=", "True", ")", "\n", "\n", "# Top-1 accuracy and additional string", "\n", "print_w", "(", "'TDE--------'", ",", "self", ".", "xERM_log", ")", "\n", "print_w", "(", "f'Many_shot_accuracy_top1: {self.many_acc_top1:.3f} '", "\n", "f'Median_shot_accuracy_top1: {self.median_acc_top1:.3f} '", "\n", "f'Low_shot_accuracy_top1: {self.low_acc_top1:.3f}'", ",", "self", ".", "xERM_log", ")", "\n", "\n", "self", ".", "many_acc_top1", ",", "self", ".", "median_acc_top1", ",", "self", ".", "low_acc_top1", ",", "self", ".", "cls_accs", "=", "shot_acc", "(", "total_te_preds", ",", "\n", "total_labels", ",", "\n", "self", ".", "data", "[", "'train'", "]", ",", "\n", "acc_per_cls", "=", "True", ")", "\n", "\n", "# Top-1 accuracy and additional string", "\n", "\n", "print_w", "(", "'TE---------'", ",", "self", ".", "xERM_log", ")", "\n", "print_w", "(", "f'Many_shot_accuracy_top1: {self.many_acc_top1:.3f} '", "\n", "f'Median_shot_accuracy_top1: {self.median_acc_top1:.3f} '", "\n", "f'Low_shot_accuracy_top1: {self.low_acc_top1:.3f}'", ",", "self", ".", "xERM_log", ")", "\n", "\n", "\n", "model_weights", "=", "{", "}", "\n", "model_weights", "[", "'feat_model'", "]", "=", "copy", ".", "deepcopy", "(", "xERM_networks", "[", "'feat_model'", "]", ".", "state_dict", "(", ")", ")", "\n", "model_weights", "[", "'classifier'", "]", "=", "copy", ".", "deepcopy", "(", "xERM_networks", "[", "'classifier'", "]", ".", "state_dict", "(", ")", ")", "\n", "\n", "model_states", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'state_dict'", ":", "model_weights", ",", "\n", "'embed'", ":", "self", ".", "embed_mean", ",", "\n", "}", "\n", "\n", "model_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "training_opt", "[", "'log_dir'", "]", ",", "\n", "'latest_xERM_model_checkpoint.pth'", ")", "\n", "torch", ".", "save", "(", "model_states", ",", "model_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.run_networks.model.xERM_eval": [[468, 614], ["print", "networks_defs.items", "xERM_networks.items", "utils.MiscMeter", "utils.MiscMeter", "utils.MiscMeter", "utils.MiscMeter", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "xERM_networks.items", "run_networks.model.networks.items", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "print", "utils.shot_acc", "print", "print", "utils.shot_acc", "print", "print", "utils.shot_acc", "print", "print", "utils.shot_acc", "print", "print", "model_args.update", "utils.source_import().create_model", "torch.DataParallel().cuda", "torch.DataParallel().cuda", "torch.DataParallel().cuda", "torch.DataParallel().cuda", "os.path.join", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "model.state_dict", "model.state_dict.update", "all", "model.load_state_dict", "run_networks.model.eval", "run_networks.model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "print", "print", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "te_preds.clone", "utils.MiscMeter.update", "utils.MiscMeter.update", "utils.MiscMeter.update", "utils.MiscMeter.update", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "utils.source_import", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "inputs.cuda", "labels.cuda", "model.state_dict", "weights[].sum().item", "x[].sum().item", "labels.size", "labels.size", "labels.size", "labels.size", "labels.size", "labels.size", "labels.size", "labels.size", "weights[].sum", "x[].sum"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.shot_acc", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.shot_acc", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.shot_acc", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.shot_acc", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNext152Feature.create_model", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.utils.util.load_state_dict", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.eval", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.eval", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.source_import", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size"], ["", "", "def", "xERM_eval", "(", "self", ")", ":", "\n", "        ", "print", "(", "'=> Build xERM model'", ")", "\n", "networks_defs", "=", "self", ".", "config", "[", "'networks'", "]", "\n", "xERM_networks", "=", "{", "}", "\n", "\n", "for", "key", ",", "val", "in", "networks_defs", ".", "items", "(", ")", ":", "\n", "# Networks", "\n", "            ", "def_file", "=", "val", "[", "'def_file'", "]", "\n", "model_args", "=", "val", "[", "'params'", "]", "\n", "model_args", ".", "update", "(", "{", "'test'", ":", "False", "}", ")", "\n", "\n", "xERM_networks", "[", "key", "]", "=", "source_import", "(", "def_file", ")", ".", "create_model", "(", "**", "model_args", ")", "\n", "xERM_networks", "[", "key", "]", "=", "nn", ".", "DataParallel", "(", "xERM_networks", "[", "key", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "model_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "config", "[", "'model_dir'", "]", ",", "'latest_xERM_model_checkpoint.pth'", ")", "\n", "print", "(", "'Loading xERM model from %s'", "%", "(", "model_dir", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_dir", ")", "\n", "model_state", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "\n", "", "for", "key", ",", "model", "in", "xERM_networks", ".", "items", "(", ")", ":", "\n", "            ", "weights", "=", "model_state", "[", "key", "]", "\n", "weights", "=", "{", "k", ":", "weights", "[", "k", "]", "for", "k", "in", "weights", "if", "k", "in", "model", ".", "state_dict", "(", ")", "}", "\n", "x", "=", "model", ".", "state_dict", "(", ")", "\n", "x", ".", "update", "(", "weights", ")", "\n", "if", "all", "(", "[", "weights", "[", "k", "]", ".", "sum", "(", ")", ".", "item", "(", ")", "==", "x", "[", "k", "]", ".", "sum", "(", ")", ".", "item", "(", ")", "for", "k", "in", "weights", "if", "k", "in", "x", "]", ")", ":", "\n", "                ", "print", "(", "'=====> All keys in weights have been loaded to the module {}'", ".", "format", "(", "key", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'=====> Error! Error! Error! Error! Loading failure in module {}'", ".", "format", "(", "key", ")", ")", "\n", "", "model", ".", "load_state_dict", "(", "x", ")", "\n", "\n", "", "te_accs", "=", "MiscMeter", "(", ")", "\n", "tde_accs", "=", "MiscMeter", "(", ")", "\n", "xERM_accs", "=", "MiscMeter", "(", ")", "\n", "upper_bound_accs", "=", "MiscMeter", "(", ")", "\n", "\n", "total_labels", "=", "torch", ".", "empty", "(", "0", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "total_preds", "=", "torch", ".", "empty", "(", "0", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "total_tde_preds", "=", "torch", ".", "empty", "(", "0", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "total_te_preds", "=", "torch", ".", "empty", "(", "0", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "total_upper_bound", "=", "torch", ".", "empty", "(", "0", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "\n", "total_te_logits", "=", "torch", ".", "empty", "(", "0", ")", ".", "cuda", "(", ")", "\n", "total_tde_logits", "=", "torch", ".", "empty", "(", "0", ")", ".", "cuda", "(", ")", "\n", "total_xERM_logits", "=", "torch", ".", "empty", "(", "0", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "key", ",", "model", "in", "xERM_networks", ".", "items", "(", ")", ":", "\n", "            ", "model", ".", "eval", "(", ")", "\n", "\n", "", "for", "key", ",", "model", "in", "self", ".", "networks", ".", "items", "(", ")", ":", "\n", "            ", "model", ".", "eval", "(", ")", "\n", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "step", ",", "(", "inputs", ",", "labels", ",", "indexes", ")", "in", "enumerate", "(", "self", ".", "data", "[", "'test'", "]", ")", ":", "\n", "                ", "inputs", ",", "labels", "=", "inputs", ".", "cuda", "(", ")", ",", "labels", ".", "cuda", "(", ")", "\n", "# forward teacher model", "\n", "features", "=", "self", ".", "networks", "[", "'feat_model'", "]", "(", "inputs", ")", "\n", "logits_TDE", ",", "logits_TE", "=", "self", ".", "networks", "[", "'classifier'", "]", "(", "features", ",", "None", ",", "self", ".", "embed_mean", ")", "\n", "# forward xERM model", "\n", "xERM_features", "=", "xERM_networks", "[", "'feat_model'", "]", "(", "inputs", ")", "\n", "logits_xERM_tde", ",", "logits_xERM", "=", "xERM_networks", "[", "'classifier'", "]", "(", "xERM_features", ",", "None", ",", "self", ".", "embed_mean", ")", "\n", "\n", "_", ",", "te_preds", "=", "torch", ".", "max", "(", "logits_TE", ",", "1", ")", "\n", "_", ",", "tde_preds", "=", "torch", ".", "max", "(", "logits_TDE", ",", "1", ")", "\n", "_", ",", "xERM_preds", "=", "torch", ".", "max", "(", "logits_xERM", ",", "1", ")", "\n", "_", ",", "xERM_preds_tde", "=", "torch", ".", "max", "(", "logits_xERM_tde", ",", "1", ")", "\n", "\n", "preds_bound", "=", "te_preds", ".", "clone", "(", ")", "\n", "TDE_right", "=", "tde_preds", "==", "labels", "\n", "TE_right", "=", "te_preds", "==", "labels", "\n", "preds_bound", "[", "TDE_right", "]", "=", "tde_preds", "[", "TDE_right", "]", "\n", "preds_bound", "[", "TE_right", "]", "=", "te_preds", "[", "TE_right", "]", "\n", "\n", "te_accs", ".", "update", "(", "(", "te_preds", "==", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "labels", ".", "size", "(", "0", ")", ",", "n", "=", "labels", ".", "size", "(", "0", ")", ")", "\n", "tde_accs", ".", "update", "(", "(", "tde_preds", "==", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "labels", ".", "size", "(", "0", ")", ",", "n", "=", "labels", ".", "size", "(", "0", ")", ")", "\n", "xERM_accs", ".", "update", "(", "(", "xERM_preds", "==", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "labels", ".", "size", "(", "0", ")", ",", "n", "=", "labels", ".", "size", "(", "0", ")", ")", "\n", "upper_bound_accs", ".", "update", "(", "(", "preds_bound", "==", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "labels", ".", "size", "(", "0", ")", ",", "n", "=", "labels", ".", "size", "(", "0", ")", ")", "\n", "\n", "total_preds", "=", "torch", ".", "cat", "(", "(", "total_preds", ",", "xERM_preds", ")", ")", "\n", "total_labels", "=", "torch", ".", "cat", "(", "(", "total_labels", ",", "labels", ")", ")", "\n", "total_tde_preds", "=", "torch", ".", "cat", "(", "(", "total_tde_preds", ",", "tde_preds", ")", ")", "\n", "total_te_preds", "=", "torch", ".", "cat", "(", "(", "total_te_preds", ",", "te_preds", ")", ")", "\n", "total_upper_bound", "=", "torch", ".", "cat", "(", "(", "total_upper_bound", ",", "preds_bound", ")", ")", "\n", "\n", "total_te_logits", "=", "torch", ".", "cat", "(", "(", "total_te_logits", ",", "logits_TE", ")", ",", "0", ")", "\n", "total_tde_logits", "=", "torch", ".", "cat", "(", "(", "total_tde_logits", ",", "logits_TDE", ")", ",", "0", ")", "\n", "total_xERM_logits", "=", "torch", ".", "cat", "(", "(", "total_xERM_logits", ",", "logits_xERM", ")", ",", "0", ")", "\n", "\n", "", "", "print", "(", "f'TE Acc {te_accs.avg:.3f} '", "\n", "f'TDE Acc {tde_accs.avg:.3f} '", "\n", "f'xERM Acc {xERM_accs.avg:.3f} '", "\n", "f'Upper Bound {upper_bound_accs.avg:.3f}'", ")", "\n", "\n", "self", ".", "many_acc_top1", ",", "self", ".", "median_acc_top1", ",", "self", ".", "low_acc_top1", ",", "self", ".", "cls_accs", "=", "shot_acc", "(", "total_preds", ",", "\n", "total_labels", ",", "\n", "self", ".", "data", "[", "'train'", "]", ",", "\n", "acc_per_cls", "=", "True", ")", "\n", "\n", "# Top-1 accuracy and additional string", "\n", "print", "(", "'xERM---------'", ")", "\n", "print", "(", "f'Many_shot_accuracy_top1: {self.many_acc_top1:.3f} '", "\n", "f'Median_shot_accuracy_top1: {self.median_acc_top1:.3f} '", "\n", "f'Low_shot_accuracy_top1: {self.low_acc_top1:.3f}'", ")", "\n", "\n", "self", ".", "many_acc_top1", ",", "self", ".", "median_acc_top1", ",", "self", ".", "low_acc_top1", ",", "self", ".", "cls_accs", "=", "shot_acc", "(", "total_tde_preds", ",", "\n", "total_labels", ",", "\n", "self", ".", "data", "[", "'train'", "]", ",", "\n", "acc_per_cls", "=", "True", ")", "\n", "\n", "# Top-1 accuracy and additional string", "\n", "print", "(", "'TDE--------'", ")", "\n", "print", "(", "f'Many_shot_accuracy_top1: {self.many_acc_top1:.3f} '", "\n", "f'Median_shot_accuracy_top1: {self.median_acc_top1:.3f} '", "\n", "f'Low_shot_accuracy_top1: {self.low_acc_top1:.3f}'", ")", "\n", "\n", "self", ".", "many_acc_top1", ",", "self", ".", "median_acc_top1", ",", "self", ".", "low_acc_top1", ",", "self", ".", "cls_accs", "=", "shot_acc", "(", "total_te_preds", ",", "\n", "total_labels", ",", "\n", "self", ".", "data", "[", "'train'", "]", ",", "\n", "acc_per_cls", "=", "True", ")", "\n", "\n", "# Top-1 accuracy and additional string", "\n", "print", "(", "'TE---------'", ")", "\n", "print", "(", "f'Many_shot_accuracy_top1: {self.many_acc_top1:.3f} '", "\n", "f'Median_shot_accuracy_top1: {self.median_acc_top1:.3f} '", "\n", "f'Low_shot_accuracy_top1: {self.low_acc_top1:.3f}'", ")", "\n", "\n", "self", ".", "many_acc_top1", ",", "self", ".", "median_acc_top1", ",", "self", ".", "low_acc_top1", ",", "self", ".", "cls_accs", "=", "shot_acc", "(", "total_upper_bound", ",", "\n", "total_labels", ",", "\n", "self", ".", "data", "[", "'train'", "]", ",", "\n", "acc_per_cls", "=", "True", ")", "\n", "\n", "# Top-1 accuracy and additional string", "\n", "print", "(", "'Upper Bound ---------'", ")", "\n", "print", "(", "f'Many_shot_accuracy_top1: {self.many_acc_top1:.3f} '", "\n", "f'Median_shot_accuracy_top1: {self.median_acc_top1:.3f} '", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.run_networks.model.train": [[617, 777], ["utils.print_write", "time.sleep", "utils.print_write", "copy.deepcopy", "copy.deepcopy", "range", "print", "print", "utils.print_write", "run_networks.model.save_model", "run_networks.model.reset_model", "run_networks.model.eval", "print", "run_networks.model.networks[].state_dict", "run_networks.model.networks[].state_dict", "run_networks.model.networks.items", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "run_networks.model.model_scheduler_dict.items", "utils.print_write", "run_networks.model.show_current_lr", "min", "enumerate", "hasattr", "hasattr", "run_networks.model.eval_with_preds", "run_networks.model.eval", "rsls.update", "rsls.update", "hasattr", "run_networks.model.logger.log_acc", "print", "run_networks.model.save_latest", "scheduler.step", "run_networks.model.criterion_optimizer_scheduler.step", "hasattr", "run_networks.model.logger.log_ws", "run_networks.model.data[].sampler.reset_weights", "utils.get_priority", "run_networks.model.data[].sampler.reset_priority", "copy.deepcopy", "copy.deepcopy", "utils.print_write", "run_networks.model.eval", "run_networks.model.train", "run_networks.model.shuffle_batch", "inputs.cuda", "labels.cuda", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "run_networks.model.batch_forward", "run_networks.model.batch_loss", "run_networks.model.batch_backward", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "total_preds.append", "total_labels.append", "hasattr", "utils.get_priority", "run_networks.model.data[].sampler.update_weights", "run_networks.model.data[].sampler.get_weights", "run_networks.model.total_logits.detach", "run_networks.model.total_labels.cpu().numpy", "run_networks.model.networks[].state_dict", "run_networks.model.networks[].state_dict", "utils.torch2numpy", "utils.torch2numpy", "run_networks.model.loss.item", "utils.mic_acc_cal", "utils.print_write", "run_networks.model.logger.log_loss", "run_networks.model.logits.detach", "indexes.cpu().numpy", "inlist.append", "run_networks.model.loss_route.item", "run_networks.model.loss_perf.item", "labels.cpu().numpy", "run_networks.model.total_labels.cpu", "run_networks.model.criterions.keys", "indexes.cpu", "labels.cpu"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.print_write", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.print_write", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.print_write", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.save_model", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.reset_model", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.eval", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.print_write", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.show_current_lr", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.min", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.eval_with_preds", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.eval", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.logger.Logger.log_acc", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.save_latest", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.logger.Logger.log_ws", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.MixedPrioritizedSampler.reset_weights", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.get_priority", "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.ClassPrioritySampler.reset_priority", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.print_write", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.eval", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.train", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.shuffle_batch", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.batch_forward", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.batch_loss", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.batch_backward", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.get_priority", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.MixedPrioritizedSampler.update_weights", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.MixedPrioritizedSampler.get_weights", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.torch2numpy", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.torch2numpy", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.mic_acc_cal", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.print_write", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.logger.Logger.log_loss"], ["", "def", "train", "(", "self", ")", ":", "\n", "# When training the network", "\n", "        ", "print_str", "=", "[", "'Phase: train'", "]", "\n", "print_write", "(", "print_str", ",", "self", ".", "log_file", ")", "\n", "time", ".", "sleep", "(", "0.25", ")", "\n", "\n", "print_write", "(", "[", "'Force shuffle in training??? --- '", ",", "self", ".", "do_shuffle", "]", ",", "self", ".", "log_file", ")", "\n", "\n", "# Initialize best model", "\n", "best_model_weights", "=", "{", "}", "\n", "best_model_weights", "[", "'feat_model'", "]", "=", "copy", ".", "deepcopy", "(", "self", ".", "networks", "[", "'feat_model'", "]", ".", "state_dict", "(", ")", ")", "\n", "best_model_weights", "[", "'classifier'", "]", "=", "copy", ".", "deepcopy", "(", "self", ".", "networks", "[", "'classifier'", "]", ".", "state_dict", "(", ")", ")", "\n", "best_acc", "=", "0.0", "\n", "best_epoch", "=", "0", "\n", "\n", "end_epoch", "=", "self", ".", "training_opt", "[", "'num_epochs'", "]", "\n", "\n", "# Loop over epochs", "\n", "for", "epoch", "in", "range", "(", "1", ",", "end_epoch", "+", "1", ")", ":", "\n", "            ", "for", "key", ",", "model", "in", "self", ".", "networks", ".", "items", "(", ")", ":", "\n", "# only train the module with lr > 0", "\n", "                ", "if", "self", ".", "config", "[", "'networks'", "]", "[", "key", "]", "[", "'optim_params'", "]", "[", "'lr'", "]", "==", "0.0", ":", "\n", "                    ", "print_write", "(", "[", "'=====> module {} is set to eval due to 0.0 learning rate.'", ".", "format", "(", "key", ")", "]", ",", "self", ".", "log_file", ")", "\n", "model", ".", "eval", "(", ")", "\n", "", "else", ":", "\n", "                    ", "model", ".", "train", "(", ")", "\n", "\n", "", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "# Set model modes and set scheduler", "\n", "# In training, step optimizer scheduler and set model to train()", "\n", "for", "key", ",", "scheduler", "in", "self", ".", "model_scheduler_dict", ".", "items", "(", ")", ":", "\n", "                ", "scheduler", ".", "step", "(", ")", "\n", "", "if", "self", ".", "criterion_optimizer", ":", "\n", "                ", "self", ".", "criterion_optimizer_scheduler", ".", "step", "(", ")", "\n", "\n", "# Iterate over dataset", "\n", "", "total_preds", "=", "[", "]", "\n", "total_labels", "=", "[", "]", "\n", "\n", "# indicate current path", "\n", "print_write", "(", "[", "self", ".", "training_opt", "[", "'log_dir'", "]", "]", ",", "self", ".", "log_file", ")", "\n", "# print learning rate", "\n", "current_lr", "=", "self", ".", "show_current_lr", "(", ")", "\n", "current_lr", "=", "min", "(", "current_lr", "*", "50", ",", "1.0", ")", "\n", "# scale the original mu according to the lr", "\n", "if", "'CIFAR'", "not", "in", "self", ".", "training_opt", "[", "'dataset'", "]", ":", "\n", "                ", "self", ".", "mu", "=", "1.0", "-", "(", "1", "-", "0.9", ")", "*", "current_lr", "\n", "\n", "", "for", "step", ",", "(", "inputs", ",", "labels", ",", "indexes", ")", "in", "enumerate", "(", "self", ".", "data", "[", "'train'", "]", ")", ":", "\n", "# Break when step equal to epoch step", "\n", "                ", "if", "step", "==", "self", ".", "epoch_steps", ":", "\n", "                    ", "break", "\n", "", "if", "self", ".", "do_shuffle", ":", "\n", "                    ", "inputs", ",", "labels", "=", "self", ".", "shuffle_batch", "(", "inputs", ",", "labels", ")", "\n", "", "inputs", ",", "labels", "=", "inputs", ".", "cuda", "(", ")", ",", "labels", ".", "cuda", "(", ")", "\n", "\n", "# If on training phase, enable gradients", "\n", "with", "torch", ".", "set_grad_enabled", "(", "True", ")", ":", "\n", "\n", "# If training, forward with loss, and no top 5 accuracy calculation", "\n", "                    ", "self", ".", "batch_forward", "(", "inputs", ",", "labels", ",", "phase", "=", "'train'", ")", "\n", "self", ".", "batch_loss", "(", "labels", ")", "\n", "self", ".", "batch_backward", "(", "print_grad", "=", "(", "step", "%", "self", ".", "training_opt", "[", "'display_grad_step'", "]", "==", "0", ")", ")", "\n", "\n", "# Tracking predictions", "\n", "_", ",", "preds", "=", "torch", ".", "max", "(", "self", ".", "logits", ",", "1", ")", "\n", "total_preds", ".", "append", "(", "torch2numpy", "(", "preds", ")", ")", "\n", "total_labels", ".", "append", "(", "torch2numpy", "(", "labels", ")", ")", "\n", "\n", "# Output minibatch training results", "\n", "if", "step", "%", "self", ".", "training_opt", "[", "'display_step'", "]", "==", "0", ":", "\n", "\n", "                        ", "minibatch_loss_route", "=", "self", ".", "loss_route", ".", "item", "(", ")", "if", "'RouteWeightLoss'", "in", "self", ".", "criterions", ".", "keys", "(", ")", "else", "None", "\n", "minibatch_loss_perf", "=", "self", ".", "loss_perf", ".", "item", "(", ")", "if", "'PerformanceLoss'", "in", "self", ".", "criterions", "else", "None", "\n", "minibatch_loss_total", "=", "self", ".", "loss", ".", "item", "(", ")", "\n", "minibatch_acc", "=", "mic_acc_cal", "(", "preds", ",", "labels", ")", "\n", "\n", "print_str", "=", "[", "'Epoch: [%d/%d]'", "\n", "%", "(", "epoch", ",", "self", ".", "training_opt", "[", "'num_epochs'", "]", ")", ",", "\n", "'Step: %5d'", "\n", "%", "(", "step", ")", ",", "\n", "'Minibatch_loss_route: %.3f'", "\n", "%", "(", "minibatch_loss_route", ")", "if", "minibatch_loss_route", "else", "''", ",", "\n", "'Minibatch_loss_performance: %.3f'", "\n", "%", "(", "minibatch_loss_perf", ")", "if", "minibatch_loss_perf", "else", "''", ",", "\n", "'Minibatch_accuracy_micro: %.3f'", "\n", "%", "(", "minibatch_acc", ")", "]", "\n", "print_write", "(", "print_str", ",", "self", ".", "log_file", ")", "\n", "\n", "loss_info", "=", "{", "\n", "'Epoch'", ":", "epoch", ",", "\n", "'Step'", ":", "step", ",", "\n", "'Total'", ":", "minibatch_loss_total", ",", "\n", "'CE'", ":", "minibatch_loss_perf", ",", "\n", "'route'", ":", "minibatch_loss_route", ",", "\n", "}", "\n", "\n", "self", ".", "logger", ".", "log_loss", "(", "loss_info", ")", "\n", "\n", "# batch-level: sampler update", "\n", "", "", "if", "hasattr", "(", "self", ".", "data", "[", "'train'", "]", ".", "sampler", ",", "'update_weights'", ")", ":", "\n", "                    ", "if", "hasattr", "(", "self", ".", "data", "[", "'train'", "]", ".", "sampler", ",", "'ptype'", ")", ":", "\n", "                        ", "ptype", "=", "self", ".", "data", "[", "'train'", "]", ".", "sampler", ".", "ptype", "\n", "", "else", ":", "\n", "                        ", "ptype", "=", "'score'", "\n", "", "ws", "=", "get_priority", "(", "ptype", ",", "self", ".", "logits", ".", "detach", "(", ")", ",", "labels", ")", "\n", "\n", "inlist", "=", "[", "indexes", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "ws", "]", "\n", "if", "self", ".", "training_opt", "[", "'sampler'", "]", "[", "'type'", "]", "==", "'ClassPrioritySampler'", ":", "\n", "                        ", "inlist", ".", "append", "(", "labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "self", ".", "data", "[", "'train'", "]", ".", "sampler", ".", "update_weights", "(", "*", "inlist", ")", "\n", "\n", "# epoch-level: reset sampler weight", "\n", "", "", "if", "hasattr", "(", "self", ".", "data", "[", "'train'", "]", ".", "sampler", ",", "'get_weights'", ")", ":", "\n", "                ", "self", ".", "logger", ".", "log_ws", "(", "epoch", ",", "self", ".", "data", "[", "'train'", "]", ".", "sampler", ".", "get_weights", "(", ")", ")", "\n", "", "if", "hasattr", "(", "self", ".", "data", "[", "'train'", "]", ".", "sampler", ",", "'reset_weights'", ")", ":", "\n", "                ", "self", ".", "data", "[", "'train'", "]", ".", "sampler", ".", "reset_weights", "(", "epoch", ")", "\n", "\n", "# After every epoch, validation", "\n", "", "rsls", "=", "{", "'epoch'", ":", "epoch", "}", "\n", "rsls_train", "=", "self", ".", "eval_with_preds", "(", "total_preds", ",", "total_labels", ")", "\n", "rsls_eval", "=", "self", ".", "eval", "(", "phase", "=", "'val'", ")", "\n", "rsls", ".", "update", "(", "rsls_train", ")", "\n", "rsls", ".", "update", "(", "rsls_eval", ")", "\n", "\n", "# Reset class weights for sampling if pri_mode is valid", "\n", "if", "hasattr", "(", "self", ".", "data", "[", "'train'", "]", ".", "sampler", ",", "'reset_priority'", ")", ":", "\n", "                ", "ws", "=", "get_priority", "(", "self", ".", "data", "[", "'train'", "]", ".", "sampler", ".", "ptype", ",", "\n", "self", ".", "total_logits", ".", "detach", "(", ")", ",", "\n", "self", ".", "total_labels", ")", "\n", "self", ".", "data", "[", "'train'", "]", ".", "sampler", ".", "reset_priority", "(", "ws", ",", "self", ".", "total_labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "# Log results", "\n", "", "self", ".", "logger", ".", "log_acc", "(", "rsls", ")", "\n", "\n", "# Under validation, the best model need to be updated", "\n", "if", "self", ".", "eval_acc_mic_top1", ">", "best_acc", ":", "\n", "                ", "best_epoch", "=", "epoch", "\n", "best_acc", "=", "self", ".", "eval_acc_mic_top1", "\n", "best_model_weights", "[", "'feat_model'", "]", "=", "copy", ".", "deepcopy", "(", "self", ".", "networks", "[", "'feat_model'", "]", ".", "state_dict", "(", ")", ")", "\n", "best_model_weights", "[", "'classifier'", "]", "=", "copy", ".", "deepcopy", "(", "self", ".", "networks", "[", "'classifier'", "]", ".", "state_dict", "(", ")", ")", "\n", "\n", "", "print", "(", "'===> Saving checkpoint'", ")", "\n", "self", ".", "save_latest", "(", "epoch", ")", "\n", "\n", "", "print", "(", ")", "\n", "print", "(", "'Training Complete.'", ")", "\n", "\n", "print_str", "=", "[", "'Best validation accuracy is %.3f at epoch %d'", "%", "(", "best_acc", ",", "best_epoch", ")", "]", "\n", "print_write", "(", "print_str", ",", "self", ".", "log_file", ")", "\n", "# Save the best model", "\n", "self", ".", "save_model", "(", "epoch", ",", "best_epoch", ",", "best_model_weights", ",", "best_acc", ")", "\n", "\n", "# Test on the test set", "\n", "self", ".", "reset_model", "(", "best_model_weights", ")", "\n", "self", ".", "eval", "(", "'test'", "if", "'test'", "in", "self", ".", "data", "else", "'val'", ")", "\n", "print", "(", "'Done'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.run_networks.model.eval_with_preds": [[778, 831], ["sum", "zip", "utils.print_write", "isinstance", "len", "list", "utils.mic_acc_cal", "utils.shot_acc", "len", "list", "numpy.concatenate", "utils.weighted_mic_acc_cal", "utils.weighted_shot_acc", "len", "mixup_preds.append", "mixup_labels1.append", "mixup_labels2.append", "numpy.concatenate.append", "normal_preds.append", "normal_labels.append", "map", "map", "len", "len", "len", "len", "numpy.ones_like", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.print_write", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.mic_acc_cal", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.shot_acc", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.weighted_mic_acc_cal", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.utils.weighted_shot_acc"], ["", "def", "eval_with_preds", "(", "self", ",", "preds", ",", "labels", ")", ":", "\n", "# Count the number of examples", "\n", "        ", "n_total", "=", "sum", "(", "[", "len", "(", "p", ")", "for", "p", "in", "preds", "]", ")", "\n", "\n", "# Split the examples into normal and mixup", "\n", "normal_preds", ",", "normal_labels", "=", "[", "]", ",", "[", "]", "\n", "mixup_preds", ",", "mixup_labels1", ",", "mixup_labels2", ",", "mixup_ws", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "p", ",", "l", "in", "zip", "(", "preds", ",", "labels", ")", ":", "\n", "            ", "if", "isinstance", "(", "l", ",", "tuple", ")", ":", "\n", "                ", "mixup_preds", ".", "append", "(", "p", ")", "\n", "mixup_labels1", ".", "append", "(", "l", "[", "0", "]", ")", "\n", "mixup_labels2", ".", "append", "(", "l", "[", "1", "]", ")", "\n", "mixup_ws", ".", "append", "(", "l", "[", "2", "]", "*", "np", ".", "ones_like", "(", "l", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "normal_preds", ".", "append", "(", "p", ")", "\n", "normal_labels", ".", "append", "(", "l", ")", "\n", "\n", "# Calculate normal prediction accuracy", "\n", "", "", "rsl", "=", "{", "'train_all'", ":", "0.", ",", "'train_many'", ":", "0.", ",", "'train_median'", ":", "0.", ",", "'train_low'", ":", "0.", "}", "\n", "if", "len", "(", "normal_preds", ")", ">", "0", ":", "\n", "            ", "normal_preds", ",", "normal_labels", "=", "list", "(", "map", "(", "np", ".", "concatenate", ",", "[", "normal_preds", ",", "normal_labels", "]", ")", ")", "\n", "n_top1", "=", "mic_acc_cal", "(", "normal_preds", ",", "normal_labels", ")", "\n", "n_top1_many", ",", "n_top1_median", ",", "n_top1_low", ",", "=", "shot_acc", "(", "normal_preds", ",", "normal_labels", ",", "self", ".", "data", "[", "'train'", "]", ")", "\n", "rsl", "[", "'train_all'", "]", "+=", "len", "(", "normal_preds", ")", "/", "n_total", "*", "n_top1", "\n", "rsl", "[", "'train_many'", "]", "+=", "len", "(", "normal_preds", ")", "/", "n_total", "*", "n_top1_many", "\n", "rsl", "[", "'train_median'", "]", "+=", "len", "(", "normal_preds", ")", "/", "n_total", "*", "n_top1_median", "\n", "rsl", "[", "'train_low'", "]", "+=", "len", "(", "normal_preds", ")", "/", "n_total", "*", "n_top1_low", "\n", "\n", "# Calculate mixup prediction accuracy", "\n", "", "if", "len", "(", "mixup_preds", ")", ">", "0", ":", "\n", "            ", "mixup_preds", ",", "mixup_labels", ",", "mixup_ws", "=", "list", "(", "map", "(", "np", ".", "concatenate", ",", "[", "mixup_preds", "*", "2", ",", "mixup_labels1", "+", "mixup_labels2", ",", "mixup_ws", "]", ")", ")", "\n", "mixup_ws", "=", "np", ".", "concatenate", "(", "[", "mixup_ws", ",", "1", "-", "mixup_ws", "]", ")", "\n", "n_top1", "=", "weighted_mic_acc_cal", "(", "mixup_preds", ",", "mixup_labels", ",", "mixup_ws", ")", "\n", "n_top1_many", ",", "n_top1_median", ",", "n_top1_low", ",", "=", "weighted_shot_acc", "(", "mixup_preds", ",", "mixup_labels", ",", "mixup_ws", ",", "self", ".", "data", "[", "'train'", "]", ")", "\n", "rsl", "[", "'train_all'", "]", "+=", "len", "(", "mixup_preds", ")", "/", "2", "/", "n_total", "*", "n_top1", "\n", "rsl", "[", "'train_many'", "]", "+=", "len", "(", "mixup_preds", ")", "/", "2", "/", "n_total", "*", "n_top1_many", "\n", "rsl", "[", "'train_median'", "]", "+=", "len", "(", "mixup_preds", ")", "/", "2", "/", "n_total", "*", "n_top1_median", "\n", "rsl", "[", "'train_low'", "]", "+=", "len", "(", "mixup_preds", ")", "/", "2", "/", "n_total", "*", "n_top1_low", "\n", "\n", "# Top-1 accuracy and additional string", "\n", "", "print_str", "=", "[", "'\\n Training acc Top1: %.3f \\n'", "%", "(", "rsl", "[", "'train_all'", "]", ")", ",", "\n", "'Many_top1: %.3f'", "%", "(", "rsl", "[", "'train_many'", "]", ")", ",", "\n", "'Median_top1: %.3f'", "%", "(", "rsl", "[", "'train_median'", "]", ")", ",", "\n", "'Low_top1: %.3f'", "%", "(", "rsl", "[", "'train_low'", "]", ")", ",", "\n", "'\\n'", "]", "\n", "print_write", "(", "print_str", ",", "self", ".", "log_file", ")", "\n", "\n", "return", "rsl", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.run_networks.model.save_mean_embedding": [[832, 846], ["run_networks.model.saving_feature_with_label_init", "tqdm.tqdm.tqdm", "run_networks.model.saving_feature_with_label_export", "inputs.cuda", "labels.cuda", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "run_networks.model.batch_forward", "run_networks.model.saving_feature_with_label_update"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.saving_feature_with_label_init", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.saving_feature_with_label_export", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.batch_forward", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.saving_feature_with_label_update"], ["", "def", "save_mean_embedding", "(", "self", ")", ":", "\n", "# Iterate over training data, ", "\n", "# save the mean features for each class", "\n", "# save the mean features for all class", "\n", "\n", "        ", "self", ".", "saving_feature_with_label_init", "(", ")", "\n", "\n", "for", "inputs", ",", "labels", ",", "_", "in", "tqdm", "(", "self", ".", "data", "[", "'train'", "]", ")", ":", "\n", "            ", "inputs", ",", "labels", "=", "inputs", ".", "cuda", "(", ")", ",", "labels", ".", "cuda", "(", ")", "\n", "with", "torch", ".", "set_grad_enabled", "(", "False", ")", ":", "\n", "                ", "self", ".", "batch_forward", "(", "inputs", ",", "labels", ",", "phase", "=", "'test'", ")", "\n", "self", ".", "saving_feature_with_label_update", "(", "self", ".", "features", ",", "self", ".", "logits", ",", "labels", ")", "\n", "\n", "", "", "self", ".", "saving_feature_with_label_export", "(", "save_name", "=", "'train_statistics.pth'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.run_networks.model.eval": [[848, 951], ["utils.print_write", "time.sleep", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "run_networks.model.networks.values", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "numpy.empty", "tqdm.tqdm.tqdm", "torch.softmax().max", "torch.softmax().max", "torch.softmax().max", "torch.softmax().max", "utils.mic_acc_cal", "utils.F_measure", "utils.shot_acc", "run_networks.model.eval", "run_networks.model.saving_feature_with_label_init", "run_networks.model.saving_feature_with_label_export", "utils.print_write", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "inputs.cuda", "labels.cuda", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "run_networks.model.batch_forward", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "numpy.concatenate", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "os.path.exists", "utils.print_write", "utils.print_write", "print", "print", "open", "pickle.dump", "run_networks.model.saving_feature_with_label_update", "run_networks.model.total_logits.detach", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.print_write", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.mic_acc_cal", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.F_measure", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.shot_acc", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.eval", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.saving_feature_with_label_init", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.saving_feature_with_label_export", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.print_write", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.batch_forward", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.print_write", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.print_write", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.saving_feature_with_label_update"], ["", "def", "eval", "(", "self", ",", "phase", "=", "'val'", ",", "save_feat", "=", "False", ")", ":", "\n", "\n", "        ", "print_str", "=", "[", "'Phase: %s'", "%", "(", "phase", ")", "]", "\n", "print_write", "(", "print_str", ",", "self", ".", "log_file", ")", "\n", "time", ".", "sleep", "(", "0.25", ")", "\n", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "# In validation or testing mode, set model to eval() and initialize running loss/correct", "\n", "for", "model", "in", "self", ".", "networks", ".", "values", "(", ")", ":", "\n", "            ", "model", ".", "eval", "(", ")", "\n", "\n", "", "self", ".", "total_logits", "=", "torch", ".", "empty", "(", "(", "0", ",", "self", ".", "training_opt", "[", "'num_classes'", "]", ")", ")", ".", "cuda", "(", ")", "\n", "self", ".", "total_labels", "=", "torch", ".", "empty", "(", "0", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "self", ".", "total_paths", "=", "np", ".", "empty", "(", "0", ")", "\n", "\n", "feats_all", ",", "labels_all", ",", "idxs_all", ",", "logits_all", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "featmaps_all", "=", "[", "]", "\n", "\n", "# feature saving initialization", "\n", "if", "save_feat", ":", "\n", "            ", "self", ".", "saving_feature_with_label_init", "(", ")", "\n", "\n", "# Iterate over dataset", "\n", "", "for", "inputs", ",", "labels", ",", "paths", "in", "tqdm", "(", "self", ".", "data", "[", "phase", "]", ")", ":", "\n", "            ", "inputs", ",", "labels", "=", "inputs", ".", "cuda", "(", ")", ",", "labels", ".", "cuda", "(", ")", "\n", "\n", "# If on training phase, enable gradients", "\n", "with", "torch", ".", "set_grad_enabled", "(", "False", ")", ":", "\n", "\n", "# In validation or testing", "\n", "                ", "self", ".", "batch_forward", "(", "inputs", ",", "labels", ",", "phase", "=", "phase", ")", "\n", "# feature saving update", "\n", "if", "save_feat", ":", "\n", "                    ", "self", ".", "saving_feature_with_label_update", "(", "self", ".", "features", ",", "self", ".", "logits", ",", "labels", ")", "\n", "\n", "", "self", ".", "total_logits", "=", "torch", ".", "cat", "(", "(", "self", ".", "total_logits", ",", "self", ".", "logits", ")", ")", "\n", "self", ".", "total_labels", "=", "torch", ".", "cat", "(", "(", "self", ".", "total_labels", ",", "labels", ")", ")", "\n", "self", ".", "total_paths", "=", "np", ".", "concatenate", "(", "(", "self", ".", "total_paths", ",", "paths", ")", ")", "\n", "\n", "# feature saving export", "\n", "", "", "if", "save_feat", ":", "\n", "            ", "self", ".", "saving_feature_with_label_export", "(", "save_name", "=", "'test_statistics.pth'", ")", "\n", "\n", "", "probs", ",", "preds", "=", "F", ".", "softmax", "(", "self", ".", "total_logits", ".", "detach", "(", ")", ",", "dim", "=", "1", ")", ".", "max", "(", "dim", "=", "1", ")", "\n", "\n", "# Calculate the overall accuracy and F measurement", "\n", "self", ".", "eval_acc_mic_top1", "=", "mic_acc_cal", "(", "preds", "[", "self", ".", "total_labels", "!=", "-", "1", "]", ",", "\n", "self", ".", "total_labels", "[", "self", ".", "total_labels", "!=", "-", "1", "]", ")", "\n", "self", ".", "eval_f_measure", "=", "F_measure", "(", "preds", ",", "self", ".", "total_labels", ",", "theta", "=", "self", ".", "training_opt", "[", "'open_threshold'", "]", ")", "\n", "\n", "self", ".", "many_acc_top1", ",", "self", ".", "median_acc_top1", ",", "self", ".", "low_acc_top1", ",", "self", ".", "cls_accs", "=", "shot_acc", "(", "preds", "[", "self", ".", "total_labels", "!=", "-", "1", "]", ",", "\n", "self", ".", "total_labels", "[", "self", ".", "total_labels", "!=", "-", "1", "]", ",", "\n", "self", ".", "data", "[", "'train'", "]", ",", "\n", "acc_per_cls", "=", "True", ")", "\n", "\n", "# Top-1 accuracy and additional string", "\n", "print_str", "=", "[", "'\\n\\n'", ",", "\n", "'Phase: %s'", "\n", "%", "(", "phase", ")", ",", "\n", "'\\n\\n'", ",", "\n", "'Evaluation_accuracy_micro_top1: %.3f'", "\n", "%", "(", "self", ".", "eval_acc_mic_top1", ")", ",", "\n", "'\\n'", ",", "\n", "'Averaged F-measure: %.3f'", "\n", "%", "(", "self", ".", "eval_f_measure", ")", ",", "\n", "'\\n'", ",", "\n", "'Many_shot_accuracy_top1: %.3f'", "\n", "%", "(", "self", ".", "many_acc_top1", ")", ",", "\n", "'Median_shot_accuracy_top1: %.3f'", "\n", "%", "(", "self", ".", "median_acc_top1", ")", ",", "\n", "'Low_shot_accuracy_top1: %.3f'", "\n", "%", "(", "self", ".", "low_acc_top1", ")", ",", "\n", "'\\n'", "]", "\n", "\n", "rsl", "=", "{", "phase", "+", "'_all'", ":", "self", ".", "eval_acc_mic_top1", ",", "\n", "phase", "+", "'_many'", ":", "self", ".", "many_acc_top1", ",", "\n", "phase", "+", "'_median'", ":", "self", ".", "median_acc_top1", ",", "\n", "phase", "+", "'_low'", ":", "self", ".", "low_acc_top1", ",", "\n", "phase", "+", "'_fscore'", ":", "self", ".", "eval_f_measure", "}", "\n", "\n", "if", "phase", "==", "'val'", ":", "\n", "            ", "print_write", "(", "print_str", ",", "self", ".", "log_file", ")", "\n", "", "else", ":", "\n", "            ", "acc_str", "=", "[", "\"{:.1f} \\t {:.1f} \\t {:.1f} \\t {:.1f}\"", ".", "format", "(", "\n", "self", ".", "many_acc_top1", "*", "100", ",", "\n", "self", ".", "median_acc_top1", "*", "100", ",", "\n", "self", ".", "low_acc_top1", "*", "100", ",", "\n", "self", ".", "eval_acc_mic_top1", "*", "100", ")", "]", "\n", "if", "self", ".", "log_file", "is", "not", "None", "and", "os", ".", "path", ".", "exists", "(", "self", ".", "log_file", ")", ":", "\n", "                ", "print_write", "(", "print_str", ",", "self", ".", "log_file", ")", "\n", "print_write", "(", "acc_str", ",", "self", ".", "log_file", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "*", "print_str", ")", "\n", "print", "(", "*", "acc_str", ")", "\n", "\n", "", "", "if", "phase", "==", "'test'", ":", "\n", "            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "training_opt", "[", "'log_dir'", "]", ",", "'cls_accs.pkl'", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "self", ".", "cls_accs", ",", "f", ")", "\n", "", "", "return", "rsl", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.run_networks.model.reset_model": [[952, 957], ["run_networks.model.networks.items", "model.load_state_dict", "model.state_dict"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.utils.util.load_state_dict"], ["", "def", "reset_model", "(", "self", ",", "model_state", ")", ":", "\n", "        ", "for", "key", ",", "model", "in", "self", ".", "networks", ".", "items", "(", ")", ":", "\n", "            ", "weights", "=", "model_state", "[", "key", "]", "\n", "weights", "=", "{", "k", ":", "weights", "[", "k", "]", "for", "k", "in", "weights", "if", "k", "in", "model", ".", "state_dict", "(", ")", "}", "\n", "model", ".", "load_state_dict", "(", "weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.run_networks.model.load_model": [[958, 1018], ["run_networks.model.networks.items", "print", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "print", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "model.state_dict", "model.state_dict.update", "all", "model.load_state_dict", "os.path.join.endswith", "os.path.join", "os.path.join.endswith", "os.path.join", "print", "print", "print", "print", "print", "run_networks.model.networks[].named_parameters", "print", "print", "print", "model.state_dict", "weights[].sum().item", "x[].sum().item", "print", "str().ljust", "weights[].sum", "x[].sum", "str"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.utils.util.load_state_dict"], ["", "", "def", "load_model", "(", "self", ",", "model_dir", "=", "None", ")", ":", "\n", "        ", "model_dir", "=", "self", ".", "training_opt", "[", "'log_dir'", "]", "if", "model_dir", "is", "None", "else", "model_dir", "\n", "\n", "if", "'CIFAR'", "in", "self", ".", "training_opt", "[", "'dataset'", "]", ":", "\n", "# CIFARs don't have val set, so use the latest model", "\n", "            ", "print", "(", "'Validation on the latest model.'", ")", "\n", "if", "not", "model_dir", ".", "endswith", "(", "'.pth'", ")", ":", "\n", "                ", "model_dir", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'latest_model_checkpoint.pth'", ")", "\n", "", "print", "(", "'Loading model from %s'", "%", "(", "model_dir", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_dir", ")", "\n", "model_state", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Validation on the best model.'", ")", "\n", "if", "not", "model_dir", ".", "endswith", "(", "'.pth'", ")", ":", "\n", "                ", "model_dir", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'final_model_checkpoint.pth'", ")", "\n", "", "print", "(", "'Loading model from %s'", "%", "(", "model_dir", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_dir", ")", "\n", "model_state", "=", "checkpoint", "[", "'state_dict_best'", "]", "\n", "\n", "", "for", "key", ",", "model", "in", "self", ".", "networks", ".", "items", "(", ")", ":", "\n", "##########################################", "\n", "# if loading classifier in training:", "\n", "#     1. only tuning memory embedding", "\n", "#     2. retrain the entire classifier", "\n", "##########################################", "\n", "            ", "if", "'embed'", "in", "checkpoint", ":", "\n", "                ", "print", "(", "'============> Load Moving Average <==========='", ")", "\n", "self", ".", "embed_mean", "=", "checkpoint", "[", "'embed'", "]", "\n", "self", ".", "embed_back", "=", "checkpoint", "[", "'embed'", "]", "\n", "\n", "", "if", "not", "self", ".", "test_mode", "and", "'Classifier'", "in", "self", ".", "config", "[", "'networks'", "]", "[", "key", "]", "[", "'def_file'", "]", ":", "\n", "                ", "if", "'tuning_memory'", "in", "self", ".", "config", "and", "self", ".", "config", "[", "'tuning_memory'", "]", ":", "\n", "                    ", "print", "(", "'=============== WARNING! WARNING! ==============='", ")", "\n", "print", "(", "'========> Only Tuning Memory Embedding  <========'", ")", "\n", "for", "param_name", ",", "param", "in", "self", ".", "networks", "[", "key", "]", ".", "named_parameters", "(", ")", ":", "\n", "# frezing all params only tuning memory_embeding", "\n", "                        ", "if", "'embed'", "in", "param_name", ":", "\n", "                            ", "param", ".", "requires_grad", "=", "True", "\n", "print", "(", "'=====> Abandon Weight {} in {} from the checkpoints.'", ".", "format", "(", "param_name", ",", "key", ")", ")", "\n", "if", "param_name", "in", "model_state", "[", "key", "]", ":", "\n", "                                ", "del", "model_state", "[", "key", "]", "[", "param_name", "]", "\n", "", "", "else", ":", "\n", "                            ", "param", ".", "requires_grad", "=", "False", "\n", "", "print", "(", "'=====> Tuning: {} | {}'", ".", "format", "(", "str", "(", "param", ".", "requires_grad", ")", ".", "ljust", "(", "5", ",", "' '", ")", ",", "param_name", ")", ")", "\n", "", "print", "(", "'================================================='", ")", "\n", "", "else", ":", "\n", "# Skip classifier initialization ", "\n", "#print('================ WARNING! WARNING! ================')", "\n", "                    ", "print", "(", "'=======> Load classifier from checkpoint <======='", ")", "\n", "#print('===================================================')", "\n", "#continue", "\n", "", "", "weights", "=", "model_state", "[", "key", "]", "\n", "weights", "=", "{", "k", ":", "weights", "[", "k", "]", "for", "k", "in", "weights", "if", "k", "in", "model", ".", "state_dict", "(", ")", "}", "\n", "x", "=", "model", ".", "state_dict", "(", ")", "\n", "x", ".", "update", "(", "weights", ")", "\n", "if", "all", "(", "[", "weights", "[", "k", "]", ".", "sum", "(", ")", ".", "item", "(", ")", "==", "x", "[", "k", "]", ".", "sum", "(", ")", ".", "item", "(", ")", "for", "k", "in", "weights", "if", "k", "in", "x", "]", ")", ":", "\n", "                ", "print", "(", "'=====> All keys in weights have been loaded to the module {}'", ".", "format", "(", "key", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'=====> Error! Error! Error! Error! Loading failure in module {}'", ".", "format", "(", "key", ")", ")", "\n", "", "model", ".", "load_state_dict", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.run_networks.model.save_latest": [[1019, 1033], ["copy.deepcopy", "copy.deepcopy", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "run_networks.model.networks[].state_dict", "run_networks.model.networks[].state_dict"], "methods", ["None"], ["", "", "def", "save_latest", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "model_weights", "=", "{", "}", "\n", "model_weights", "[", "'feat_model'", "]", "=", "copy", ".", "deepcopy", "(", "self", ".", "networks", "[", "'feat_model'", "]", ".", "state_dict", "(", ")", ")", "\n", "model_weights", "[", "'classifier'", "]", "=", "copy", ".", "deepcopy", "(", "self", ".", "networks", "[", "'classifier'", "]", ".", "state_dict", "(", ")", ")", "\n", "\n", "model_states", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'state_dict'", ":", "model_weights", ",", "\n", "'embed'", ":", "self", ".", "embed_mean", ",", "\n", "}", "\n", "\n", "model_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "training_opt", "[", "'log_dir'", "]", ",", "\n", "'latest_model_checkpoint.pth'", ")", "\n", "torch", ".", "save", "(", "model_states", ",", "model_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.run_networks.model.save_model": [[1034, 1046], ["os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save"], "methods", ["None"], ["", "def", "save_model", "(", "self", ",", "epoch", ",", "best_epoch", ",", "best_model_weights", ",", "best_acc", ")", ":", "\n", "\n", "        ", "model_states", "=", "{", "'epoch'", ":", "epoch", ",", "\n", "'best_epoch'", ":", "best_epoch", ",", "\n", "'state_dict_best'", ":", "best_model_weights", ",", "\n", "'best_acc'", ":", "best_acc", ",", "\n", "'embed'", ":", "self", ".", "embed_mean", ",", "}", "\n", "\n", "model_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "training_opt", "[", "'log_dir'", "]", ",", "\n", "'final_model_checkpoint.pth'", ")", "\n", "\n", "torch", ".", "save", "(", "model_states", ",", "model_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.run_networks.model.output_logits": [[1047, 1054], ["os.path.join", "print", "numpy.savez", "run_networks.model.total_logits.detach().cpu().numpy", "run_networks.model.total_labels.detach().cpu().numpy", "run_networks.model.total_logits.detach().cpu", "run_networks.model.total_labels.detach().cpu", "run_networks.model.total_logits.detach", "run_networks.model.total_labels.detach"], "methods", ["None"], ["", "def", "output_logits", "(", "self", ")", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "training_opt", "[", "'log_dir'", "]", ",", "'logits'", ")", "\n", "print", "(", "\"Saving total logits to: %s.npz\"", "%", "filename", ")", "\n", "np", ".", "savez", "(", "filename", ",", "\n", "logits", "=", "self", ".", "total_logits", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "labels", "=", "self", ".", "total_labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "paths", "=", "self", ".", "total_paths", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.run_networks.model.saving_feature_with_label_init": [[1055, 1069], ["isinstance", "numpy.unique", "numpy.array", "numpy.array().astype", "numpy.array().astype", "train_class_count.append", "len", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "saving_feature_with_label_init", "(", "self", ")", ":", "\n", "        ", "self", ".", "saving_feature_container", "=", "[", "]", "\n", "self", ".", "saving_logit_container", "=", "[", "]", "\n", "self", ".", "saving_label_container", "=", "[", "]", "\n", "# record number of instances for each class", "\n", "if", "isinstance", "(", "self", ".", "data", "[", "'train'", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "training_labels", "=", "np", ".", "array", "(", "self", ".", "data", "[", "'train'", "]", ")", ".", "astype", "(", "int", ")", "\n", "", "else", ":", "\n", "            ", "training_labels", "=", "np", ".", "array", "(", "self", ".", "data", "[", "'train'", "]", ".", "dataset", ".", "labels", ")", ".", "astype", "(", "int", ")", "\n", "\n", "", "train_class_count", "=", "[", "]", "\n", "for", "l", "in", "np", ".", "unique", "(", "training_labels", ")", ":", "\n", "            ", "train_class_count", ".", "append", "(", "len", "(", "training_labels", "[", "training_labels", "==", "l", "]", ")", ")", "\n", "", "self", ".", "train_class_count", "=", "np", ".", "array", "(", "train_class_count", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.run_networks.model.saving_feature_with_label_update": [[1070, 1074], ["run_networks.model.saving_feature_container.append", "run_networks.model.saving_logit_container.append", "run_networks.model.saving_label_container.append", "features.detach().cpu", "logits.detach().cpu", "labels.detach().cpu", "features.detach", "logits.detach", "labels.detach"], "methods", ["None"], ["", "def", "saving_feature_with_label_update", "(", "self", ",", "features", ",", "logits", ",", "labels", ")", ":", "\n", "        ", "self", ".", "saving_feature_container", ".", "append", "(", "features", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "self", ".", "saving_logit_container", ".", "append", "(", "logits", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "self", ".", "saving_label_container", ".", "append", "(", "labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.run_networks.model.saving_feature_with_label_export": [[1076, 1085], ["os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "utils.print_write", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.print_write"], ["", "def", "saving_feature_with_label_export", "(", "self", ",", "save_name", "=", "'eval_features_with_labels.pth'", ")", ":", "\n", "        ", "eval_features", "=", "{", "'features'", ":", "torch", ".", "cat", "(", "self", ".", "saving_feature_container", ",", "dim", "=", "0", ")", ".", "numpy", "(", ")", ",", "\n", "'labels'", ":", "torch", ".", "cat", "(", "self", ".", "saving_label_container", ",", "dim", "=", "0", ")", ".", "numpy", "(", ")", ",", "\n", "'logits'", ":", "torch", ".", "cat", "(", "self", ".", "saving_logit_container", ",", "dim", "=", "0", ")", ".", "numpy", "(", ")", ",", "\n", "'class_count'", ":", "self", ".", "train_class_count", "}", "\n", "\n", "eval_features_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "training_opt", "[", "'log_dir'", "]", ",", "save_name", ")", "\n", "torch", ".", "save", "(", "eval_features", ",", "eval_features_dir", ")", "\n", "print_write", "(", "[", "'=====> Features with labels are saved as {}'", ".", "format", "(", "eval_features_dir", ")", "]", ",", "self", ".", "log_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.logger.Logger.__init__": [[15, 26], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.isdir", "os.makedirs"], "methods", ["None"], ["for", "_", ",", "handler", "in", "config", "[", "'handlers'", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "'filename'", "in", "handler", ":", "\n", "                ", "handler", "[", "'filename'", "]", "=", "str", "(", "save_dir", "/", "handler", "[", "'filename'", "]", ")", "\n", "\n", "", "", "logging", ".", "config", ".", "dictConfig", "(", "config", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Warning: logging configuration file is not found in {}.\"", ".", "format", "(", "log_config", ")", ")", "\n", "logging", ".", "basicConfig", "(", "level", "=", "default_level", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.logger.Logger.log_cfg": [[27, 31], ["print", "open", "yaml.dump"], "methods", ["None"], []], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.logger.Logger.log_acc": [[32, 43], ["open", "csv.DictWriter", "csv.DictWriter.writeheader", "csv.DictWriter.writerow", "open", "csv.DictWriter", "csv.DictWriter.writerow", "accs.keys"], "methods", ["None"], []], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.logger.Logger.log_loss": [[44, 57], ["open", "csv.DictWriter", "csv.DictWriter.writeheader", "csv.DictWriter.writerow", "open", "csv.DictWriter", "csv.DictWriter.writerow", "valid_losses.keys"], "methods", ["None"], []], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.logger.Logger.log_ws": [[58, 67], ["h5py.File", "f.create_group", "ws.items", "f.create_group.create_dataset"], "methods", ["None"], []], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.utils.MiscMeter.__init__": [[28, 30], ["utils.MiscMeter.reset"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.utils.MiscMeter.reset": [[31, 38], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "self", ".", "min", "=", "9e15", "\n", "self", ".", "max", "=", "-", "9e15", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.utils.MiscMeter.update": [[39, 46], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "self", ".", "min", "=", "val", "if", "val", "<", "self", ".", "min", "else", "self", ".", "min", "\n", "self", ".", "max", "=", "val", "if", "val", ">", "self", ".", "max", "else", "self", ".", "max", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.utils.WarmupMultiStepLR.__init__": [[360, 387], ["super().__init__", "ValueError", "ValueError", "list", "sorted"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "optimizer", ",", "\n", "milestones", ",", "\n", "gamma", "=", "0.1", ",", "\n", "warmup_factor", "=", "1.0", "/", "3", ",", "\n", "warmup_epochs", "=", "5", ",", "\n", "warmup_method", "=", "\"linear\"", ",", "\n", "last_epoch", "=", "-", "1", ",", "\n", ")", ":", "\n", "        ", "if", "not", "list", "(", "milestones", ")", "==", "sorted", "(", "milestones", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Milestones should be a list of\"", "\" increasing integers. Got {}\"", ",", "\n", "milestones", ",", "\n", ")", "\n", "\n", "", "if", "warmup_method", "not", "in", "(", "\"constant\"", ",", "\"linear\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Only 'constant' or 'linear' warmup_method accepted\"", "\n", "\"got {}\"", ".", "format", "(", "warmup_method", ")", "\n", ")", "\n", "", "self", ".", "milestones", "=", "milestones", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "warmup_factor", "=", "warmup_factor", "\n", "self", ".", "warmup_epochs", "=", "warmup_epochs", "\n", "self", ".", "warmup_method", "=", "warmup_method", "\n", "super", "(", "WarmupMultiStepLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.utils.WarmupMultiStepLR.get_lr": [[388, 401], ["bisect.bisect_right", "float"], "methods", ["None"], ["", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "warmup_factor", "=", "1", "\n", "if", "self", ".", "last_epoch", "<", "self", ".", "warmup_epochs", ":", "\n", "            ", "if", "self", ".", "warmup_method", "==", "\"constant\"", ":", "\n", "                ", "warmup_factor", "=", "self", ".", "warmup_factor", "\n", "", "elif", "self", ".", "warmup_method", "==", "\"linear\"", ":", "\n", "                ", "alpha", "=", "float", "(", "self", ".", "last_epoch", ")", "/", "self", ".", "warmup_epochs", "\n", "warmup_factor", "=", "self", ".", "warmup_factor", "*", "(", "1", "-", "alpha", ")", "+", "alpha", "\n", "", "", "return", "[", "\n", "base_lr", "\n", "*", "warmup_factor", "\n", "*", "self", ".", "gamma", "**", "bisect_right", "(", "self", ".", "milestones", ",", "self", ".", "last_epoch", ")", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "\n", "]", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.utils.update": [[48, 54], ["utils.get_value"], "function", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.get_value"], ["", "", "def", "update", "(", "config", ",", "args", ")", ":", "\n", "# Change parameters", "\n", "# config['model_dir'] = get_value(config['model_dir'], args.model_dir)", "\n", "    ", "config", "[", "'training_opt'", "]", "[", "'batch_size'", "]", "=", "get_value", "(", "config", "[", "'training_opt'", "]", "[", "'batch_size'", "]", ",", "args", ".", "batch_size", ")", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.utils.source_import": [[56, 62], ["importlib.util.spec_from_file_location", "importlib.util.module_from_spec", "importlib.util.spec_from_file_location.loader.exec_module"], "function", ["None"], ["", "def", "source_import", "(", "file_path", ")", ":", "\n", "    ", "\"\"\"This function imports python module directly from source code using importlib\"\"\"", "\n", "spec", "=", "importlib", ".", "util", ".", "spec_from_file_location", "(", "''", ",", "file_path", ")", "\n", "module", "=", "importlib", ".", "util", ".", "module_from_spec", "(", "spec", ")", "\n", "spec", ".", "loader", ".", "exec_module", "(", "module", ")", "\n", "return", "module", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.utils.batch_show": [[63, 74], ["np.clip.numpy().transpose", "numpy.array", "numpy.array", "numpy.clip", "matplotlib.figure", "matplotlib.imshow", "matplotlib.title", "np.clip.numpy"], "function", ["None"], ["", "def", "batch_show", "(", "inp", ",", "title", "=", "None", ")", ":", "\n", "    ", "\"\"\"Imshow for Tensor.\"\"\"", "\n", "inp", "=", "inp", ".", "numpy", "(", ")", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "mean", "=", "np", ".", "array", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", "\n", "std", "=", "np", ".", "array", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "inp", "=", "std", "*", "inp", "+", "mean", "\n", "inp", "=", "np", ".", "clip", "(", "inp", ",", "0", ",", "1", ")", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "20", ")", ")", "\n", "plt", ".", "imshow", "(", "inp", ")", "\n", "if", "title", "is", "not", "None", ":", "\n", "        ", "plt", ".", "title", "(", "title", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.utils.print_write": [[75, 81], ["print", "open", "print"], "function", ["None"], ["", "", "def", "print_write", "(", "print_str", ",", "log_file", ")", ":", "\n", "    ", "print", "(", "*", "print_str", ")", "\n", "if", "log_file", "is", "None", ":", "\n", "        ", "return", "\n", "", "with", "open", "(", "log_file", ",", "'a'", ")", "as", "f", ":", "\n", "        ", "print", "(", "*", "print_str", ",", "file", "=", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.utils.print_w": [[82, 88], ["print", "open", "print"], "function", ["None"], ["", "", "def", "print_w", "(", "print_str", ",", "log_file", ")", ":", "\n", "    ", "print", "(", "print_str", ")", "\n", "if", "log_file", "is", "None", ":", "\n", "        ", "return", "\n", "", "with", "open", "(", "log_file", ",", "'a'", ")", "as", "f", ":", "\n", "        ", "print", "(", "print_str", ",", "file", "=", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.utils.init_weights": [[89, 108], ["print", "torch.load", "torch.load", "model.load_state_dict", "model.state_dict", "model.state_dict", "model.state_dict", "model.state_dict", "model.state_dict", "model.state_dict"], "function", ["home.repos.pwc.inspect_result.beierzhu_xerm.utils.util.load_state_dict"], ["", "", "def", "init_weights", "(", "model", ",", "weights_path", ",", "caffe", "=", "False", ",", "classifier", "=", "False", ")", ":", "\n", "    ", "\"\"\"Initialize weights\"\"\"", "\n", "print", "(", "'Pretrained %s weights path: %s'", "%", "(", "'classifier'", "if", "classifier", "else", "'feature model'", ",", "\n", "weights_path", ")", ")", "\n", "weights", "=", "torch", ".", "load", "(", "weights_path", ")", "\n", "if", "not", "classifier", ":", "\n", "        ", "if", "caffe", ":", "\n", "            ", "weights", "=", "{", "k", ":", "weights", "[", "k", "]", "if", "k", "in", "weights", "else", "model", ".", "state_dict", "(", ")", "[", "k", "]", "\n", "for", "k", "in", "model", ".", "state_dict", "(", ")", "}", "\n", "", "else", ":", "\n", "            ", "weights", "=", "weights", "[", "'state_dict_best'", "]", "[", "'feat_model'", "]", "\n", "weights", "=", "{", "k", ":", "weights", "[", "'module.'", "+", "k", "]", "if", "'module.'", "+", "k", "in", "weights", "else", "model", ".", "state_dict", "(", ")", "[", "k", "]", "\n", "for", "k", "in", "model", ".", "state_dict", "(", ")", "}", "\n", "", "", "else", ":", "\n", "        ", "weights", "=", "weights", "[", "'state_dict_best'", "]", "[", "'classifier'", "]", "\n", "weights", "=", "{", "k", ":", "weights", "[", "'module.fc.'", "+", "k", "]", "if", "'module.fc.'", "+", "k", "in", "weights", "else", "model", ".", "state_dict", "(", ")", "[", "k", "]", "\n", "for", "k", "in", "model", ".", "state_dict", "(", ")", "}", "\n", "", "model", ".", "load_state_dict", "(", "weights", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.utils.shot_acc": [[109, 154], ["isinstance", "isinstance", "numpy.unique", "range", "numpy.array().astype", "numpy.array().astype", "preds.detach().cpu().numpy.detach().cpu().numpy", "labels.detach().cpu().numpy.detach().cpu().numpy", "isinstance", "train_class_count.append", "test_class_count.append", "class_correct.append", "len", "len", "many_shot.append", "len", "median_shot.append", "len", "low_shot.append", "TypeError", "len", "len", "many_shot.append", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.array", "numpy.array", "preds.detach().cpu().numpy.detach().cpu", "labels.detach().cpu().numpy.detach().cpu", "low_shot.append", "median_shot.append", "zip", "type", "preds.detach().cpu().numpy.detach", "labels.detach().cpu().numpy.detach"], "function", ["None"], ["", "def", "shot_acc", "(", "preds", ",", "labels", ",", "train_data", ",", "many_shot_thr", "=", "100", ",", "low_shot_thr", "=", "20", ",", "acc_per_cls", "=", "False", ")", ":", "\n", "\n", "    ", "if", "isinstance", "(", "train_data", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "training_labels", "=", "np", ".", "array", "(", "train_data", ")", ".", "astype", "(", "int", ")", "\n", "", "else", ":", "\n", "        ", "training_labels", "=", "np", ".", "array", "(", "train_data", ".", "dataset", ".", "labels", ")", ".", "astype", "(", "int", ")", "\n", "\n", "", "if", "isinstance", "(", "preds", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "preds", "=", "preds", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "labels", "=", "labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "elif", "isinstance", "(", "preds", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "'Type ({}) of preds not supported'", ".", "format", "(", "type", "(", "preds", ")", ")", ")", "\n", "", "train_class_count", "=", "[", "]", "\n", "test_class_count", "=", "[", "]", "\n", "class_correct", "=", "[", "]", "\n", "for", "l", "in", "np", ".", "unique", "(", "labels", ")", ":", "\n", "        ", "train_class_count", ".", "append", "(", "len", "(", "training_labels", "[", "training_labels", "==", "l", "]", ")", ")", "\n", "test_class_count", ".", "append", "(", "len", "(", "labels", "[", "labels", "==", "l", "]", ")", ")", "\n", "class_correct", ".", "append", "(", "(", "preds", "[", "labels", "==", "l", "]", "==", "labels", "[", "labels", "==", "l", "]", ")", ".", "sum", "(", ")", ")", "\n", "\n", "", "many_shot", "=", "[", "]", "\n", "median_shot", "=", "[", "]", "\n", "low_shot", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "train_class_count", ")", ")", ":", "\n", "        ", "if", "train_class_count", "[", "i", "]", ">", "many_shot_thr", ":", "\n", "            ", "many_shot", ".", "append", "(", "(", "class_correct", "[", "i", "]", "/", "test_class_count", "[", "i", "]", ")", ")", "\n", "", "elif", "train_class_count", "[", "i", "]", "<", "low_shot_thr", ":", "\n", "            ", "low_shot", ".", "append", "(", "(", "class_correct", "[", "i", "]", "/", "test_class_count", "[", "i", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "median_shot", ".", "append", "(", "(", "class_correct", "[", "i", "]", "/", "test_class_count", "[", "i", "]", ")", ")", "\n", "\n", "", "", "if", "len", "(", "many_shot", ")", "==", "0", ":", "\n", "        ", "many_shot", ".", "append", "(", "0", ")", "\n", "", "if", "len", "(", "median_shot", ")", "==", "0", ":", "\n", "        ", "median_shot", ".", "append", "(", "0", ")", "\n", "", "if", "len", "(", "low_shot", ")", "==", "0", ":", "\n", "        ", "low_shot", ".", "append", "(", "0", ")", "\n", "\n", "", "if", "acc_per_cls", ":", "\n", "        ", "class_accs", "=", "[", "c", "/", "cnt", "for", "c", ",", "cnt", "in", "zip", "(", "class_correct", ",", "test_class_count", ")", "]", "\n", "return", "np", ".", "mean", "(", "many_shot", ")", ",", "np", ".", "mean", "(", "median_shot", ")", ",", "np", ".", "mean", "(", "low_shot", ")", ",", "class_accs", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "mean", "(", "many_shot", ")", ",", "np", ".", "mean", "(", "median_shot", ")", ",", "np", ".", "mean", "(", "low_shot", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.utils.weighted_shot_acc": [[157, 187], ["numpy.array().astype", "isinstance", "numpy.unique", "range", "preds.detach().cpu().numpy.detach().cpu().numpy", "labels.detach().cpu().numpy.detach().cpu().numpy", "isinstance", "train_class_count.append", "test_class_count.append", "class_correct.append", "len", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.array", "TypeError", "len", "ws[].sum", "many_shot.append", "preds.detach().cpu().numpy.detach().cpu", "labels.detach().cpu().numpy.detach().cpu", "low_shot.append", "median_shot.append", "type", "preds.detach().cpu().numpy.detach", "labels.detach().cpu().numpy.detach"], "function", ["None"], ["", "", "def", "weighted_shot_acc", "(", "preds", ",", "labels", ",", "ws", ",", "train_data", ",", "many_shot_thr", "=", "100", ",", "low_shot_thr", "=", "20", ")", ":", "\n", "\n", "    ", "training_labels", "=", "np", ".", "array", "(", "train_data", ".", "dataset", ".", "labels", ")", ".", "astype", "(", "int", ")", "\n", "\n", "if", "isinstance", "(", "preds", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "preds", "=", "preds", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "labels", "=", "labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "elif", "isinstance", "(", "preds", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "'Type ({}) of preds not supported'", ".", "format", "(", "type", "(", "preds", ")", ")", ")", "\n", "", "train_class_count", "=", "[", "]", "\n", "test_class_count", "=", "[", "]", "\n", "class_correct", "=", "[", "]", "\n", "for", "l", "in", "np", ".", "unique", "(", "labels", ")", ":", "\n", "        ", "train_class_count", ".", "append", "(", "len", "(", "training_labels", "[", "training_labels", "==", "l", "]", ")", ")", "\n", "test_class_count", ".", "append", "(", "ws", "[", "labels", "==", "l", "]", ".", "sum", "(", ")", ")", "\n", "class_correct", ".", "append", "(", "(", "(", "preds", "[", "labels", "==", "l", "]", "==", "labels", "[", "labels", "==", "l", "]", ")", "*", "ws", "[", "labels", "==", "l", "]", ")", ".", "sum", "(", ")", ")", "\n", "\n", "", "many_shot", "=", "[", "]", "\n", "median_shot", "=", "[", "]", "\n", "low_shot", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "train_class_count", ")", ")", ":", "\n", "        ", "if", "train_class_count", "[", "i", "]", ">", "many_shot_thr", ":", "\n", "            ", "many_shot", ".", "append", "(", "(", "class_correct", "[", "i", "]", "/", "test_class_count", "[", "i", "]", ")", ")", "\n", "", "elif", "train_class_count", "[", "i", "]", "<", "low_shot_thr", ":", "\n", "            ", "low_shot", ".", "append", "(", "(", "class_correct", "[", "i", "]", "/", "test_class_count", "[", "i", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "median_shot", ".", "append", "(", "(", "class_correct", "[", "i", "]", "/", "test_class_count", "[", "i", "]", ")", ")", "\n", "", "", "return", "np", ".", "mean", "(", "many_shot", ")", ",", "np", ".", "mean", "(", "median_shot", ")", ",", "np", ".", "mean", "(", "low_shot", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.utils.F_measure": [[188, 191], ["sklearn.metrics.f1_score", "labels.detach().cpu().numpy", "preds.detach().cpu().numpy", "labels.detach().cpu", "preds.detach().cpu", "labels.detach", "preds.detach"], "function", ["None"], ["", "def", "F_measure", "(", "preds", ",", "labels", ",", "theta", "=", "None", ")", ":", "\n", "# Regular f1 score", "\n", "    ", "return", "f1_score", "(", "labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "preds", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "average", "=", "'macro'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.utils.mic_acc_cal": [[192, 201], ["isinstance", "len", "len", "len", "preds.eq().cpu().sum().float", "preds.eq().cpu().sum().float", "preds.eq().cpu().sum", "preds.eq().cpu().sum", "preds.eq().cpu", "preds.eq().cpu", "preds.eq", "preds.eq"], "function", ["None"], ["", "def", "mic_acc_cal", "(", "preds", ",", "labels", ")", ":", "\n", "    ", "if", "isinstance", "(", "labels", ",", "tuple", ")", ":", "\n", "        ", "assert", "len", "(", "labels", ")", "==", "3", "\n", "targets_a", ",", "targets_b", ",", "lam", "=", "labels", "\n", "acc_mic_top1", "=", "(", "lam", "*", "preds", ".", "eq", "(", "targets_a", ".", "data", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", ".", "float", "(", ")", "+", "(", "1", "-", "lam", ")", "*", "preds", ".", "eq", "(", "targets_b", ".", "data", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", ".", "float", "(", ")", ")", "/", "len", "(", "preds", ")", "\n", "", "else", ":", "\n", "        ", "acc_mic_top1", "=", "(", "preds", "==", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "len", "(", "labels", ")", "\n", "", "return", "acc_mic_top1", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.utils.weighted_mic_acc_cal": [[203, 206], ["ws[].sum", "ws.sum"], "function", ["None"], ["", "def", "weighted_mic_acc_cal", "(", "preds", ",", "labels", ",", "ws", ")", ":", "\n", "    ", "acc_mic_top1", "=", "ws", "[", "preds", "==", "labels", "]", ".", "sum", "(", ")", "/", "ws", ".", "sum", "(", ")", "\n", "return", "acc_mic_top1", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.utils.class_count": [[207, 213], ["numpy.array", "numpy.unique", "class_data_num.append", "len"], "function", ["None"], ["", "def", "class_count", "(", "data", ")", ":", "\n", "    ", "labels", "=", "np", ".", "array", "(", "data", ".", "dataset", ".", "labels", ")", "\n", "class_data_num", "=", "[", "]", "\n", "for", "l", "in", "np", ".", "unique", "(", "labels", ")", ":", "\n", "        ", "class_data_num", ".", "append", "(", "len", "(", "labels", "[", "labels", "==", "l", "]", ")", ")", "\n", "", "return", "class_data_num", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.utils.torch2numpy": [[216, 223], ["isinstance", "x.detach().cpu().numpy", "isinstance", "tuple", "x.detach().cpu", "utils.torch2numpy", "x.detach"], "function", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.torch2numpy"], ["", "def", "torch2numpy", "(", "x", ")", ":", "\n", "    ", "if", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "x", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "elif", "isinstance", "(", "x", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "return", "tuple", "(", "[", "torch2numpy", "(", "xi", ")", "for", "xi", "in", "x", "]", ")", "\n", "", "else", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.utils.logits2score": [[224, 229], ["torch.softmax", "F.softmax.gather", "score.squeeze().cpu().numpy.squeeze().cpu().numpy", "labels.view", "score.squeeze().cpu().numpy.squeeze().cpu", "score.squeeze().cpu().numpy.squeeze"], "function", ["None"], ["", "", "def", "logits2score", "(", "logits", ",", "labels", ")", ":", "\n", "    ", "scores", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "score", "=", "scores", ".", "gather", "(", "1", ",", "labels", ".", "view", "(", "-", "1", ",", "1", ")", ")", "\n", "score", "=", "score", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "return", "score", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.utils.logits2entropy": [[231, 237], ["torch.softmax", "numpy.sum", "F.softmax.cpu().numpy", "numpy.log", "F.softmax.cpu"], "function", ["None"], ["", "def", "logits2entropy", "(", "logits", ")", ":", "\n", "    ", "scores", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "scores", "=", "scores", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "+", "1e-30", "\n", "ent", "=", "-", "scores", "*", "np", ".", "log", "(", "scores", ")", "\n", "ent", "=", "np", ".", "sum", "(", "ent", ",", "1", ")", "\n", "return", "ent", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.utils.logits2CE": [[239, 245], ["torch.softmax", "F.softmax.gather", "labels.view", "scores.gather.squeeze().cpu().numpy", "numpy.log", "scores.gather.squeeze().cpu", "scores.gather.squeeze"], "function", ["None"], ["", "def", "logits2CE", "(", "logits", ",", "labels", ")", ":", "\n", "    ", "scores", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "score", "=", "scores", ".", "gather", "(", "1", ",", "labels", ".", "view", "(", "-", "1", ",", "1", ")", ")", "\n", "score", "=", "score", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "+", "1e-30", "\n", "ce", "=", "-", "np", ".", "log", "(", "score", ")", "\n", "return", "ce", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.utils.get_priority": [[247, 256], ["utils.logits2score", "utils.logits2entropy", "utils.logits2CE"], "function", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.logits2score", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.logits2entropy", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.logits2CE"], ["", "def", "get_priority", "(", "ptype", ",", "logits", ",", "labels", ")", ":", "\n", "    ", "if", "ptype", "==", "'score'", ":", "\n", "        ", "ws", "=", "1", "-", "logits2score", "(", "logits", ",", "labels", ")", "\n", "", "elif", "ptype", "==", "'entropy'", ":", "\n", "        ", "ws", "=", "logits2entropy", "(", "logits", ")", "\n", "", "elif", "ptype", "==", "'CE'", ":", "\n", "        ", "ws", "=", "logits2CE", "(", "logits", ",", "labels", ")", "\n", "\n", "", "return", "ws", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.utils.get_value": [[257, 262], ["None"], "function", ["None"], ["", "def", "get_value", "(", "oldv", ",", "newv", ")", ":", "\n", "    ", "if", "newv", "is", "not", "None", ":", "\n", "        ", "return", "newv", "\n", "", "else", ":", "\n", "        ", "return", "oldv", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.utils.print_grad_norm": [[265, 287], ["named_parameters.items", "logger_func", "sorted", "logger_func", "param_to_norm.items", "logger_func", "p.grad.norm", "p.size"], "function", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size"], ["", "", "def", "print_grad_norm", "(", "named_parameters", ",", "logger_func", ",", "log_file", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "if", "not", "verbose", ":", "\n", "        ", "return", "None", "\n", "\n", "", "total_norm", "=", "0.0", "\n", "param_to_norm", "=", "{", "}", "\n", "param_to_shape", "=", "{", "}", "\n", "for", "n", ",", "p", "in", "named_parameters", ".", "items", "(", ")", ":", "\n", "        ", "if", "p", ".", "grad", "is", "not", "None", ":", "\n", "            ", "param_norm", "=", "p", ".", "grad", ".", "norm", "(", "2", ")", "\n", "total_norm", "+=", "param_norm", "**", "2", "\n", "param_to_norm", "[", "n", "]", "=", "param_norm", "\n", "param_to_shape", "[", "n", "]", "=", "p", ".", "size", "(", ")", "\n", "\n", "", "", "total_norm", "=", "total_norm", "**", "(", "1.", "/", "2", ")", "\n", "\n", "logger_func", "(", "[", "'----------Total norm {:.5f}-----------------'", ".", "format", "(", "total_norm", ")", "]", ",", "log_file", ")", "\n", "for", "name", ",", "norm", "in", "sorted", "(", "param_to_norm", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "-", "x", "[", "1", "]", ")", ":", "\n", "        ", "logger_func", "(", "[", "\"{:<50s}: {:.5f}, ({})\"", ".", "format", "(", "name", ",", "norm", ",", "param_to_shape", "[", "name", "]", ")", "]", ",", "log_file", ")", "\n", "", "logger_func", "(", "[", "'-------------------------------'", "]", ",", "log_file", ")", "\n", "\n", "return", "total_norm", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.utils.smooth_l1_loss": [[288, 299], ["torch.abs", "torch.abs", "torch.where", "torch.where", "torch.where.mean", "torch.where.sum", "print", "torch.where.mean"], "function", ["None"], ["", "def", "smooth_l1_loss", "(", "input", ",", "target", ",", "beta", "=", "1.", "/", "9", ",", "reduction", "=", "'mean'", ")", ":", "\n", "    ", "n", "=", "torch", ".", "abs", "(", "input", "-", "target", ")", "\n", "cond", "=", "n", "<", "beta", "\n", "loss", "=", "torch", ".", "where", "(", "cond", ",", "0.5", "*", "n", "**", "2", "/", "beta", ",", "n", "-", "0.5", "*", "beta", ")", "\n", "if", "reduction", "==", "'mean'", ":", "\n", "        ", "return", "loss", ".", "mean", "(", ")", "\n", "", "elif", "reduction", "==", "'sum'", ":", "\n", "        ", "return", "loss", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'XXXXXX Error Reduction Type for smooth_l1_loss, use default mean'", ")", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.utils.l2_loss": [[301, 303], ["torch.mse_loss"], "function", ["None"], ["", "", "def", "l2_loss", "(", "input", ",", "target", ",", "reduction", "=", "'mean'", ")", ":", "\n", "    ", "return", "F", ".", "mse_loss", "(", "input", ",", "target", ",", "reduction", "=", "reduction", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.utils.regression_loss": [[305, 322], ["utils.l2_loss", "utils.l2_loss", "utils.smooth_l1_loss", "target.clone().detach", "target.clone().detach().mean", "target.clone().detach", "torch.no_grad", "torch.no_grad", "target.clone", "target.clone().detach", "target.clone", "target.clone().detach().mean", "target.clone", "target.clone().detach", "target.clone"], "function", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.l2_loss", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.l2_loss", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.smooth_l1_loss"], ["", "def", "regression_loss", "(", "input", ",", "target", ",", "l2", "=", "False", ",", "pre_mean", "=", "True", ",", "l1", "=", "False", ",", "moving_average", "=", "False", ",", "moving_ratio", "=", "0.01", ")", ":", "\n", "    ", "assert", "(", "l2", "+", "l1", "+", "moving_average", ")", "==", "1", "\n", "if", "l2", ":", "\n", "        ", "if", "(", "input", ".", "shape", "[", "0", "]", "==", "target", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "assert", "not", "pre_mean", "\n", "loss", "=", "l2_loss", "(", "input", ",", "target", ".", "clone", "(", ")", ".", "detach", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "assert", "pre_mean", "\n", "loss", "=", "l2_loss", "(", "input", ",", "target", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "mean", "(", "0", ",", "keepdim", "=", "True", ")", ")", "\n", "", "", "elif", "l1", ":", "\n", "        ", "loss", "=", "smooth_l1_loss", "(", "input", ",", "target", ".", "clone", "(", ")", ".", "detach", "(", ")", ")", "\n", "", "elif", "moving_average", ":", "\n", "# input should be register_buffer rather than nn.Parameter", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "input", "=", "(", "1", "-", "moving_ratio", ")", "*", "input", "+", "moving_ratio", "*", "target", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "mean", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "", "loss", "=", "None", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.utils.gumbel_softmax": [[323, 340], ["gumbels.softmax", "logits.softmax", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "logits.softmax.max", "torch.zeros_like", "torch.zeros_like", "logits.softmax.detach", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like", "torch.empty_like"], "function", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max"], ["", "def", "gumbel_softmax", "(", "logits", ",", "tau", "=", "1", ",", "hard", "=", "False", ",", "gumbel", "=", "True", ",", "dim", "=", "-", "1", ")", ":", "\n", "    ", "if", "gumbel", ":", "\n", "        ", "gumbels", "=", "-", "torch", ".", "empty_like", "(", "logits", ")", ".", "exponential_", "(", ")", ".", "log", "(", ")", "# ~Gumbel(0,1)", "\n", "gumbels", "=", "(", "logits", "+", "gumbels", ")", "/", "tau", "# ~Gumbel(logits,tau)", "\n", "y_soft", "=", "gumbels", ".", "softmax", "(", "dim", ")", "\n", "", "else", ":", "\n", "        ", "y_soft", "=", "logits", ".", "softmax", "(", "dim", ")", "\n", "\n", "", "if", "hard", ":", "\n", "# Straight through.", "\n", "        ", "index", "=", "y_soft", ".", "max", "(", "dim", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "y_hard", "=", "torch", ".", "zeros_like", "(", "logits", ")", ".", "scatter_", "(", "dim", ",", "index", ",", "1.0", ")", "\n", "ret", "=", "y_hard", "-", "y_soft", ".", "detach", "(", ")", "+", "y_soft", "\n", "", "else", ":", "\n", "# Reparametrization trick.", "\n", "        ", "ret", "=", "y_soft", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.utils.gumbel_sigmoid": [[342, 358], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.sigmoid.detach", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like", "torch.empty_like"], "function", ["None"], ["", "def", "gumbel_sigmoid", "(", "logits", ",", "tau", "=", "1", ",", "hard", "=", "False", ",", "gumbel", "=", "True", ")", ":", "\n", "    ", "if", "gumbel", ":", "\n", "        ", "gumbels", "=", "-", "torch", ".", "empty_like", "(", "logits", ")", ".", "exponential_", "(", ")", ".", "log", "(", ")", "# ~Gumbel(0,1)", "\n", "gumbels", "=", "(", "logits", "+", "gumbels", ")", "/", "tau", "# ~Gumbel(logits,tau)", "\n", "y_soft", "=", "torch", ".", "sigmoid", "(", "gumbels", ")", "\n", "", "else", ":", "\n", "        ", "y_soft", "=", "torch", ".", "sigmoid", "(", "logits", ")", "\n", "\n", "", "if", "hard", ":", "\n", "# Straight through.", "\n", "        ", "y_hard", "=", "(", "y_soft", ">", "0.5", ")", ".", "float", "(", ")", "\n", "ret", "=", "y_hard", "-", "y_soft", ".", "detach", "(", ")", "+", "y_soft", "\n", "", "else", ":", "\n", "# Reparametrization trick.", "\n", "        ", "ret", "=", "y_soft", "\n", "", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.DotProductClassifier.DotProduct_Classifier.__init__": [[22, 26], ["torch.Module.__init__", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1000", ",", "feat_dim", "=", "2048", ",", "*", "args", ")", ":", "\n", "        ", "super", "(", "DotProduct_Classifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "feat_dim", ",", "num_classes", ",", "bias", "=", "False", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "x", ",", "*", "args", ")", ":", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.DotProductClassifier.DotProduct_Classifier.forward": [[27, 33], ["DotProductClassifier.DotProduct_Classifier.fc"], "methods", ["None"], ["        ", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", ",", "None", "\n", "\n", "", "", "def", "create_model", "(", "feat_dim", ",", "num_classes", "=", "1000", ",", "stage1_weights", "=", "False", ",", "dataset", "=", "None", ",", "log_dir", "=", "None", ",", "test", "=", "False", ",", "*", "args", ")", ":", "\n", "    ", "print", "(", "'Loading Dot Product Classifier.'", ")", "\n", "clf", "=", "DotProduct_Classifier", "(", "num_classes", ",", "feat_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.DotProductClassifier.create_model": [[34, 57], ["print", "DotProductClassifier.DotProduct_Classifier", "print", "print", "init_weights", "print", "subdir.replace.replace", "os.path.join", "log_dir.strip().split", "os.path.join", "log_dir.strip", "log_dir.split"], "function", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.init_weights"], ["if", "not", "test", ":", "\n", "        ", "if", "stage1_weights", ":", "\n", "            ", "assert", "(", "dataset", ")", "\n", "print", "(", "'Loading %s Stage 1 Classifier Weights.'", "%", "dataset", ")", "\n", "if", "log_dir", "is", "not", "None", ":", "\n", "                ", "subdir", "=", "log_dir", ".", "strip", "(", "'/'", ")", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "subdir", "=", "subdir", ".", "replace", "(", "'stage2'", ",", "'stage1'", ")", "\n", "weight_dir", "=", "path", ".", "join", "(", "'/'", ".", "join", "(", "log_dir", ".", "split", "(", "'/'", ")", "[", ":", "-", "1", "]", ")", ",", "subdir", ")", "\n", "# weight_dir = path.join('/'.join(log_dir.split('/')[:-1]), 'stage1')", "\n", "", "else", ":", "\n", "                ", "weight_dir", "=", "'./logs/%s/stage1'", "%", "dataset", "\n", "", "print", "(", "'==> Loading classifier weights from %s'", "%", "weight_dir", ")", "\n", "clf", ".", "fc", "=", "init_weights", "(", "model", "=", "clf", ".", "fc", ",", "\n", "weights_path", "=", "path", ".", "join", "(", "weight_dir", ",", "'final_model_checkpoint.pth'", ")", ",", "\n", "classifier", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Random initialized classifier weights.'", ")", "\n", "\n", "", "", "return", "clf", "\n", "", ""]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.CausalNormClassifier.Causal_Norm_Classifier.__init__": [[9, 19], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "CausalNormClassifier.Causal_Norm_Classifier.reset_parameters", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__", "home.repos.pwc.inspect_result.beierzhu_xerm.models.CausalNormClassifierFixWeight.Causal_Norm_Classifier.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1000", ",", "feat_dim", "=", "2048", ",", "use_effect", "=", "True", ",", "num_head", "=", "2", ",", "tau", "=", "16.0", ",", "alpha", "=", "3.0", ",", "gamma", "=", "0.03125", ",", "*", "args", ")", ":", "\n", "        ", "super", "(", "Causal_Norm_Classifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_classes", ",", "feat_dim", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "scale", "=", "tau", "/", "num_head", "# 16.0 / num_head", "\n", "self", ".", "norm_scale", "=", "gamma", "# 1.0 / 32.0", "\n", "self", ".", "alpha", "=", "alpha", "# 3.0", "\n", "self", ".", "num_head", "=", "num_head", "\n", "self", ".", "head_dim", "=", "feat_dim", "//", "num_head", "\n", "self", ".", "use_effect", "=", "use_effect", "\n", "self", ".", "reset_parameters", "(", "self", ".", "weight", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.CausalNormClassifier.Causal_Norm_Classifier.reset_parameters": [[21, 24], ["weight.data.uniform_", "math.sqrt", "weight.size"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size"], ["", "def", "reset_parameters", "(", "self", ",", "weight", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "weight", ".", "size", "(", "1", ")", ")", "\n", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.CausalNormClassifier.Causal_Norm_Classifier.forward": [[25, 48], ["CausalNormClassifier.Causal_Norm_Classifier.multi_head_call", "CausalNormClassifier.Causal_Norm_Classifier.multi_head_call", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "CausalNormClassifier.Causal_Norm_Classifier.t", "torch.from_numpy().view().to", "torch.from_numpy().view().to", "torch.from_numpy().view().to", "torch.from_numpy().view().to", "CausalNormClassifier.Causal_Norm_Classifier.multi_head_call", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "zip", "sum", "CausalNormClassifier.Causal_Norm_Classifier.get_cos_sin", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "output.append", "torch.from_numpy().view", "torch.from_numpy().view", "torch.from_numpy().view", "torch.from_numpy().view", "nw.t", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.models.CausalNormClassifierFixWeight.Causal_Norm_Classifier.multi_head_call", "home.repos.pwc.inspect_result.beierzhu_xerm.models.CausalNormClassifierFixWeight.Causal_Norm_Classifier.multi_head_call", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.models.CausalNormClassifierFixWeight.Causal_Norm_Classifier.multi_head_call", "home.repos.pwc.inspect_result.beierzhu_xerm.models.CausalNormClassifierFixWeight.Causal_Norm_Classifier.get_cos_sin"], ["", "def", "forward", "(", "self", ",", "x", ",", "label", ",", "embed", ")", ":", "\n", "# calculate capsule normalized feature vector and predict", "\n", "        ", "normed_w", "=", "self", ".", "multi_head_call", "(", "self", ".", "causal_norm", ",", "self", ".", "weight", ",", "weight", "=", "self", ".", "norm_scale", ")", "\n", "normed_x", "=", "self", ".", "multi_head_call", "(", "self", ".", "l2_norm", ",", "x", ")", "\n", "y_TE", "=", "torch", ".", "mm", "(", "normed_x", "*", "self", ".", "scale", ",", "normed_w", ".", "t", "(", ")", ")", "\n", "y_TDE", "=", "y_TE", ".", "clone", "(", ")", "\n", "\n", "# remove the effect of confounder c during test", "\n", "if", "(", "not", "self", ".", "training", ")", "and", "self", ".", "use_effect", ":", "\n", "            ", "self", ".", "embed", "=", "torch", ".", "from_numpy", "(", "embed", ")", ".", "view", "(", "1", ",", "-", "1", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "normed_c", "=", "self", ".", "multi_head_call", "(", "self", ".", "l2_norm", ",", "self", ".", "embed", ")", "\n", "head_dim", "=", "x", ".", "shape", "[", "1", "]", "//", "self", ".", "num_head", "\n", "x_list", "=", "torch", ".", "split", "(", "normed_x", ",", "head_dim", ",", "dim", "=", "1", ")", "\n", "c_list", "=", "torch", ".", "split", "(", "normed_c", ",", "head_dim", ",", "dim", "=", "1", ")", "\n", "w_list", "=", "torch", ".", "split", "(", "normed_w", ",", "head_dim", ",", "dim", "=", "1", ")", "\n", "output", "=", "[", "]", "\n", "\n", "for", "nx", ",", "nc", ",", "nw", "in", "zip", "(", "x_list", ",", "c_list", ",", "w_list", ")", ":", "\n", "                ", "cos_val", ",", "sin_val", "=", "self", ".", "get_cos_sin", "(", "nx", ",", "nc", ")", "\n", "y0", "=", "torch", ".", "mm", "(", "(", "nx", "-", "cos_val", "*", "self", ".", "alpha", "*", "nc", ")", "*", "self", ".", "scale", ",", "nw", ".", "t", "(", ")", ")", "\n", "output", ".", "append", "(", "y0", ")", "\n", "", "y_TDE", "=", "sum", "(", "output", ")", "\n", "\n", "", "return", "y_TDE", ",", "y_TE", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.CausalNormClassifier.Causal_Norm_Classifier.get_cos_sin": [[49, 53], ["torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["\n", "", "def", "get_cos_sin", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "cos_val", "=", "(", "x", "*", "y", ")", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", "/", "torch", ".", "norm", "(", "x", ",", "2", ",", "1", ",", "keepdim", "=", "True", ")", "/", "torch", ".", "norm", "(", "y", ",", "2", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "sin_val", "=", "(", "1", "-", "cos_val", "*", "cos_val", ")", ".", "sqrt", "(", ")", "\n", "return", "cos_val", ",", "sin_val", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.CausalNormClassifier.Causal_Norm_Classifier.multi_head_call": [[54, 64], ["torch.split", "torch.split", "torch.split", "torch.split", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "len", "len", "func", "func"], "methods", ["None"], ["\n", "", "def", "multi_head_call", "(", "self", ",", "func", ",", "x", ",", "weight", "=", "None", ")", ":", "\n", "        ", "assert", "len", "(", "x", ".", "shape", ")", "==", "2", "\n", "x_list", "=", "torch", ".", "split", "(", "x", ",", "self", ".", "head_dim", ",", "dim", "=", "1", ")", "\n", "if", "weight", ":", "\n", "            ", "y_list", "=", "[", "func", "(", "item", ",", "weight", ")", "for", "item", "in", "x_list", "]", "\n", "", "else", ":", "\n", "            ", "y_list", "=", "[", "func", "(", "item", ")", "for", "item", "in", "x_list", "]", "\n", "", "assert", "len", "(", "x_list", ")", "==", "self", ".", "num_head", "\n", "assert", "len", "(", "y_list", ")", "==", "self", ".", "num_head", "\n", "return", "torch", ".", "cat", "(", "y_list", ",", "dim", "=", "1", ")", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.CausalNormClassifier.Causal_Norm_Classifier.l2_norm": [[65, 68], ["torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["\n", "", "def", "l2_norm", "(", "self", ",", "x", ")", ":", "\n", "        ", "normed_x", "=", "x", "/", "torch", ".", "norm", "(", "x", ",", "2", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "return", "normed_x", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.CausalNormClassifier.Causal_Norm_Classifier.capsule_norm": [[69, 73], ["torch.norm", "torch.norm", "torch.norm", "torch.norm", "x.clone"], "methods", ["None"], ["\n", "", "def", "capsule_norm", "(", "self", ",", "x", ")", ":", "\n", "        ", "norm", "=", "torch", ".", "norm", "(", "x", ".", "clone", "(", ")", ",", "2", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "normed_x", "=", "(", "norm", "/", "(", "1", "+", "norm", ")", ")", "*", "(", "x", "/", "norm", ")", "\n", "return", "normed_x", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.CausalNormClassifier.Causal_Norm_Classifier.causal_norm": [[74, 78], ["torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["\n", "", "def", "causal_norm", "(", "self", ",", "x", ",", "weight", ")", ":", "\n", "        ", "norm", "=", "torch", ".", "norm", "(", "x", ",", "2", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "normed_x", "=", "x", "/", "(", "norm", "+", "weight", ")", "\n", "return", "normed_x", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.CausalNormClassifier.create_model": [[79, 84], ["print", "CausalNormClassifier.Causal_Norm_Classifier", "str"], "function", ["None"], ["\n", "", "", "def", "create_model", "(", "feat_dim", ",", "num_classes", "=", "1000", ",", "stage1_weights", "=", "False", ",", "dataset", "=", "None", ",", "log_dir", "=", "None", ",", "test", "=", "False", ",", "use_effect", "=", "True", ",", "num_head", "=", "None", ",", "tau", "=", "None", ",", "alpha", "=", "None", ",", "gamma", "=", "None", ",", "*", "args", ")", ":", "\n", "    ", "print", "(", "'Loading Causal Norm Classifier with use_effect: {}, num_head: {}, tau: {}, alpha: {}, gamma: {}.'", ".", "format", "(", "str", "(", "use_effect", ")", ",", "num_head", ",", "tau", ",", "alpha", ",", "gamma", ")", ")", "\n", "clf", "=", "Causal_Norm_Classifier", "(", "num_classes", ",", "feat_dim", ",", "use_effect", "=", "use_effect", ",", "num_head", "=", "num_head", ",", "tau", "=", "tau", ",", "alpha", "=", "alpha", ",", "gamma", "=", "gamma", ")", "\n", "\n", "return", "clf", ""]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.CausalNormClassifierTrain.Causal_Norm_Classifier.__init__": [[9, 20], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "CausalNormClassifierTrain.Causal_Norm_Classifier.reset_parameters", "torch.ReLU", "torch.ReLU", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__", "home.repos.pwc.inspect_result.beierzhu_xerm.models.CausalNormClassifierFixWeight.Causal_Norm_Classifier.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1000", ",", "feat_dim", "=", "2048", ",", "use_effect", "=", "True", ",", "num_head", "=", "2", ",", "tau", "=", "16.0", ",", "alpha", "=", "3.0", ",", "gamma", "=", "0.03125", ",", "*", "args", ")", ":", "\n", "        ", "super", "(", "Causal_Norm_Classifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_classes", ",", "feat_dim", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "scale", "=", "tau", "/", "num_head", "# 16.0 / num_head", "\n", "self", ".", "norm_scale", "=", "gamma", "# 1.0 / 32.0", "\n", "self", ".", "alpha", "=", "alpha", "# 3.0", "\n", "self", ".", "num_head", "=", "num_head", "\n", "self", ".", "head_dim", "=", "feat_dim", "//", "num_head", "\n", "self", ".", "use_effect", "=", "use_effect", "\n", "self", ".", "reset_parameters", "(", "self", ".", "weight", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.CausalNormClassifierTrain.Causal_Norm_Classifier.reset_parameters": [[21, 24], ["weight.data.uniform_", "math.sqrt", "weight.size"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size"], ["", "def", "reset_parameters", "(", "self", ",", "weight", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "weight", ".", "size", "(", "1", ")", ")", "\n", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.CausalNormClassifierTrain.Causal_Norm_Classifier.forward": [[25, 49], ["CausalNormClassifierTrain.Causal_Norm_Classifier.multi_head_call", "CausalNormClassifierTrain.Causal_Norm_Classifier.multi_head_call", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.from_numpy().view().to", "torch.from_numpy().view().to", "torch.from_numpy().view().to", "torch.from_numpy().view().to", "CausalNormClassifierTrain.Causal_Norm_Classifier.multi_head_call", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "zip", "sum", "CausalNormClassifierTrain.Causal_Norm_Classifier.t", "CausalNormClassifierTrain.Causal_Norm_Classifier.get_cos_sin", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "output.append", "torch.from_numpy().view", "torch.from_numpy().view", "torch.from_numpy().view", "torch.from_numpy().view", "nw.t", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.models.CausalNormClassifierFixWeight.Causal_Norm_Classifier.multi_head_call", "home.repos.pwc.inspect_result.beierzhu_xerm.models.CausalNormClassifierFixWeight.Causal_Norm_Classifier.multi_head_call", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.models.CausalNormClassifierFixWeight.Causal_Norm_Classifier.multi_head_call", "home.repos.pwc.inspect_result.beierzhu_xerm.models.CausalNormClassifierFixWeight.Causal_Norm_Classifier.get_cos_sin"], ["", "def", "forward", "(", "self", ",", "x", ",", "label", ",", "embed", ")", ":", "\n", "# calculate capsule normalized feature vector and predict", "\n", "        ", "normed_w", "=", "self", ".", "multi_head_call", "(", "self", ".", "causal_norm", ",", "self", ".", "weight", ",", "weight", "=", "self", ".", "norm_scale", ")", "\n", "normed_x", "=", "self", ".", "multi_head_call", "(", "self", ".", "l2_norm", ",", "x", ")", "\n", "if", "not", "self", ".", "use_effect", ":", "\n", "            ", "y", "=", "torch", ".", "mm", "(", "normed_x", "*", "self", ".", "scale", ",", "normed_w", ".", "t", "(", ")", ")", "\n", "", "else", ":", "\n", "# remove the effect of confounder c during test", "\n", "            ", "self", ".", "embed", "=", "torch", ".", "from_numpy", "(", "embed", ")", ".", "view", "(", "1", ",", "-", "1", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "\n", "normed_c", "=", "self", ".", "multi_head_call", "(", "self", ".", "l2_norm", ",", "self", ".", "embed", ")", "\n", "head_dim", "=", "x", ".", "shape", "[", "1", "]", "//", "self", ".", "num_head", "\n", "x_list", "=", "torch", ".", "split", "(", "normed_x", ",", "head_dim", ",", "dim", "=", "1", ")", "\n", "c_list", "=", "torch", ".", "split", "(", "normed_c", ",", "head_dim", ",", "dim", "=", "1", ")", "\n", "w_list", "=", "torch", ".", "split", "(", "normed_w", ",", "head_dim", ",", "dim", "=", "1", ")", "\n", "output", "=", "[", "]", "\n", "\n", "for", "nx", ",", "nc", ",", "nw", "in", "zip", "(", "x_list", ",", "c_list", ",", "w_list", ")", ":", "\n", "                ", "cos_val", ",", "sin_val", "=", "self", ".", "get_cos_sin", "(", "nx", ",", "nc", ")", "\n", "y0", "=", "torch", ".", "mm", "(", "(", "nx", "-", "cos_val", "*", "self", ".", "alpha", "*", "nc", ")", "*", "self", ".", "scale", ",", "nw", ".", "t", "(", ")", ")", "\n", "output", ".", "append", "(", "y0", ")", "\n", "", "y", "=", "sum", "(", "output", ")", "\n", "\n", "", "return", "y", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.CausalNormClassifierTrain.Causal_Norm_Classifier.get_cos_sin": [[50, 54], ["torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "def", "get_cos_sin", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "cos_val", "=", "(", "x", "*", "y", ")", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", "/", "torch", ".", "norm", "(", "x", ",", "2", ",", "1", ",", "keepdim", "=", "True", ")", "/", "torch", ".", "norm", "(", "y", ",", "2", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "sin_val", "=", "(", "1", "-", "cos_val", "*", "cos_val", ")", ".", "sqrt", "(", ")", "\n", "return", "cos_val", ",", "sin_val", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.CausalNormClassifierTrain.Causal_Norm_Classifier.multi_head_call": [[55, 65], ["torch.split", "torch.split", "torch.split", "torch.split", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "len", "len", "func", "func"], "methods", ["None"], ["", "def", "multi_head_call", "(", "self", ",", "func", ",", "x", ",", "weight", "=", "None", ")", ":", "\n", "        ", "assert", "len", "(", "x", ".", "shape", ")", "==", "2", "\n", "x_list", "=", "torch", ".", "split", "(", "x", ",", "self", ".", "head_dim", ",", "dim", "=", "1", ")", "\n", "if", "weight", ":", "\n", "            ", "y_list", "=", "[", "func", "(", "item", ",", "weight", ")", "for", "item", "in", "x_list", "]", "\n", "", "else", ":", "\n", "            ", "y_list", "=", "[", "func", "(", "item", ")", "for", "item", "in", "x_list", "]", "\n", "", "assert", "len", "(", "x_list", ")", "==", "self", ".", "num_head", "\n", "assert", "len", "(", "y_list", ")", "==", "self", ".", "num_head", "\n", "return", "torch", ".", "cat", "(", "y_list", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.CausalNormClassifierTrain.Causal_Norm_Classifier.l2_norm": [[66, 69], ["torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "def", "l2_norm", "(", "self", ",", "x", ")", ":", "\n", "        ", "normed_x", "=", "x", "/", "torch", ".", "norm", "(", "x", ",", "2", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "return", "normed_x", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.CausalNormClassifierTrain.Causal_Norm_Classifier.capsule_norm": [[70, 74], ["torch.norm", "torch.norm", "torch.norm", "torch.norm", "x.clone"], "methods", ["None"], ["", "def", "capsule_norm", "(", "self", ",", "x", ")", ":", "\n", "        ", "norm", "=", "torch", ".", "norm", "(", "x", ".", "clone", "(", ")", ",", "2", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "normed_x", "=", "(", "norm", "/", "(", "1", "+", "norm", ")", ")", "*", "(", "x", "/", "norm", ")", "\n", "return", "normed_x", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.CausalNormClassifierTrain.Causal_Norm_Classifier.causal_norm": [[75, 79], ["torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "def", "causal_norm", "(", "self", ",", "x", ",", "weight", ")", ":", "\n", "        ", "norm", "=", "torch", ".", "norm", "(", "x", ",", "2", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "normed_x", "=", "x", "/", "(", "norm", "+", "weight", ")", "\n", "return", "normed_x", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.CausalNormClassifierTrain.create_model": [[80, 85], ["print", "CausalNormClassifierTrain.Causal_Norm_Classifier", "str"], "function", ["None"], ["", "", "def", "create_model", "(", "feat_dim", ",", "num_classes", "=", "1000", ",", "stage1_weights", "=", "False", ",", "dataset", "=", "None", ",", "log_dir", "=", "None", ",", "test", "=", "False", ",", "use_effect", "=", "True", ",", "num_head", "=", "None", ",", "tau", "=", "None", ",", "alpha", "=", "None", ",", "gamma", "=", "None", ",", "*", "args", ")", ":", "\n", "    ", "print", "(", "'Loading Causal Norm Classifier with use_effect: {}, num_head: {}, tau: {}, alpha: {}, gamma: {}.'", ".", "format", "(", "str", "(", "use_effect", ")", ",", "num_head", ",", "tau", ",", "alpha", ",", "gamma", ")", ")", "\n", "clf", "=", "Causal_Norm_Classifier", "(", "num_classes", ",", "feat_dim", ",", "use_effect", "=", "use_effect", ",", "num_head", "=", "num_head", ",", "tau", "=", "tau", ",", "alpha", "=", "alpha", ",", "gamma", "=", "gamma", ")", "\n", "\n", "return", "clf", "", "", ""]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNet101Feature.create_model": [[13, 33], ["print", "ResNet", "print", "print", "init_weights", "print", "os.path.join", "os.path.join", "log_dir.split"], "function", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.init_weights"], ["def", "create_model", "(", "use_fc", "=", "False", ",", "dropout", "=", "None", ",", "stage1_weights", "=", "False", ",", "dataset", "=", "None", ",", "log_dir", "=", "None", ",", "test", "=", "False", ",", "*", "args", ")", ":", "\n", "\n", "    ", "print", "(", "'Loading Scratch ResNet 101 Feature Model.'", ")", "\n", "resnet101", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "use_fc", "=", "use_fc", ",", "dropout", "=", "None", ")", "\n", "\n", "if", "not", "test", ":", "\n", "        ", "if", "stage1_weights", ":", "\n", "            ", "assert", "(", "dataset", ")", "\n", "print", "(", "'Loading %s Stage 1 ResNet 101 Weights.'", "%", "dataset", ")", "\n", "if", "log_dir", "is", "not", "None", ":", "\n", "                ", "weight_dir", "=", "path", ".", "join", "(", "'/'", ".", "join", "(", "log_dir", ".", "split", "(", "'/'", ")", "[", ":", "-", "1", "]", ")", ",", "'stage1'", ")", "\n", "", "else", ":", "\n", "                ", "weight_dir", "=", "'./logs/%s/stage1'", "%", "dataset", "\n", "", "print", "(", "'==> Loading weights from %s'", "%", "weight_dir", ")", "\n", "resnet101", "=", "init_weights", "(", "model", "=", "resnet101", ",", "\n", "weights_path", "=", "path", ".", "join", "(", "weight_dir", ",", "'final_model_checkpoint.pth'", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'No Pretrained Weights For Feature Model.'", ")", "\n", "\n", "", "", "return", "resnet101", "\n", "", ""]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNet32Feature.LambdaLayer.__init__": [[19, 22], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "lambd", ")", ":", "\n", "        ", "super", "(", "LambdaLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lambd", "=", "lambd", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNet32Feature.LambdaLayer.forward": [[23, 25], ["ResNet32Feature.LambdaLayer.lambd"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "lambd", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNet32Feature.BasicBlock.__init__": [[30, 65], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "ResNet32Feature.LambdaLayer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ",", "option", "=", "\"A\"", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "if", "option", "==", "\"A\"", ":", "\n", "                ", "\"\"\"\n                For CIFAR10 ResNet paper uses option A.\n                \"\"\"", "\n", "self", ".", "shortcut", "=", "LambdaLayer", "(", "\n", "lambda", "x", ":", "F", ".", "pad", "(", "\n", "x", "[", ":", ",", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", ",", "\n", "(", "0", ",", "0", ",", "0", ",", "0", ",", "planes", "//", "4", ",", "planes", "//", "4", ")", ",", "\n", "\"constant\"", ",", "\n", "0", ",", "\n", ")", "\n", ")", "\n", "", "elif", "option", "==", "\"B\"", ":", "\n", "                ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "self", ".", "expansion", "*", "planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNet32Feature.BasicBlock.forward": [[67, 73], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "ResNet32Feature.BasicBlock.bn2", "ResNet32Feature.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "ResNet32Feature.BasicBlock.bn1", "ResNet32Feature.BasicBlock.conv2", "ResNet32Feature.BasicBlock.conv1"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNet32Feature.BBN_ResNet_Cifar.__init__": [[76, 91], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "ResNet32Feature.BBN_ResNet_Cifar._make_layer", "ResNet32Feature.BBN_ResNet_Cifar._make_layer", "ResNet32Feature.BBN_ResNet_Cifar._make_layer", "block", "block", "ResNet32Feature.BBN_ResNet_Cifar.apply", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet._make_layer", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet._make_layer", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ")", ":", "\n", "        ", "super", "(", "BBN_ResNet_Cifar", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "16", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "2", "]", "-", "1", ",", "stride", "=", "2", ")", "\n", "self", ".", "cb_block", "=", "block", "(", "self", ".", "in_planes", ",", "self", ".", "in_planes", ",", "stride", "=", "1", ")", "\n", "self", ".", "rb_block", "=", "block", "(", "self", ".", "in_planes", ",", "self", ".", "in_planes", ",", "stride", "=", "1", ")", "\n", "\n", "self", ".", "apply", "(", "_weights_init", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNet32Feature.BBN_ResNet_Cifar.load_model": [[92, 108], ["print", "ResNet32Feature.BBN_ResNet_Cifar.state_dict", "collections.OrderedDict", "pretrain_dict.items", "ResNet32Feature.BBN_ResNet_Cifar.update", "ResNet32Feature.BBN_ResNet_Cifar.load_state_dict", "print", "k.startswith", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.utils.util.load_state_dict"], ["", "def", "load_model", "(", "self", ",", "pretrain", ")", ":", "\n", "        ", "print", "(", "\"Loading Backbone pretrain model from {}......\"", ".", "format", "(", "pretrain", ")", ")", "\n", "model_dict", "=", "self", ".", "state_dict", "(", ")", "\n", "pretrain_dict", "=", "torch", ".", "load", "(", "pretrain", ")", "[", "\"state_dict_best\"", "]", "[", "'feat_model'", "]", "\n", "\n", "new_dict", "=", "OrderedDict", "(", ")", "\n", "\n", "for", "k", ",", "v", "in", "pretrain_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", ".", "startswith", "(", "\"module\"", ")", ":", "\n", "                ", "k", "=", "k", "[", "7", ":", "]", "\n", "", "if", "\"fc\"", "not", "in", "k", "and", "\"classifier\"", "not", "in", "k", ":", "\n", "                ", "new_dict", "[", "k", "]", "=", "v", "\n", "\n", "", "", "model_dict", ".", "update", "(", "new_dict", ")", "\n", "self", ".", "load_state_dict", "(", "model_dict", ")", "\n", "print", "(", "\"Backbone model has been loaded......\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNet32Feature.BBN_ResNet_Cifar._make_layer": [[109, 117], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ",", "add_flag", "=", "True", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNet32Feature.BBN_ResNet_Cifar.forward": [[118, 139], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "ResNet32Feature.BBN_ResNet_Cifar.layer1", "ResNet32Feature.BBN_ResNet_Cifar.layer2", "ResNet32Feature.BBN_ResNet_Cifar.layer3", "ResNet32Feature.BBN_ResNet_Cifar.cb_block", "ResNet32Feature.BBN_ResNet_Cifar.rb_block", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ResNet32Feature.BBN_ResNet_Cifar.avgpool", "ResNet32Feature.BBN_ResNet_Cifar.view", "ResNet32Feature.BBN_ResNet_Cifar.bn1", "ResNet32Feature.BBN_ResNet_Cifar.cb_block", "ResNet32Feature.BBN_ResNet_Cifar.conv1", "ResNet32Feature.BBN_ResNet_Cifar.rb_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "**", "kwargs", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "if", "\"feature_cb\"", "in", "kwargs", ":", "\n", "            ", "out", "=", "self", ".", "cb_block", "(", "out", ")", "\n", "return", "out", "\n", "", "elif", "\"feature_rb\"", "in", "kwargs", ":", "\n", "            ", "out", "=", "self", ".", "rb_block", "(", "out", ")", "\n", "return", "out", "\n", "\n", "", "out1", "=", "self", ".", "cb_block", "(", "out", ")", "\n", "out2", "=", "self", ".", "rb_block", "(", "out", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "out1", ",", "out2", ")", ",", "dim", "=", "1", ")", "\n", "\n", "out", "=", "self", ".", "avgpool", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "\n", "return", "out", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNet32Feature._weights_init": [[12, 16], ["isinstance", "isinstance", "torch.kaiming_normal_"], "function", ["None"], ["def", "_weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNet32Feature.create_model": [[142, 155], ["print", "ResNet32Feature.BBN_ResNet_Cifar", "os.path.exists", "print", "ResNet32Feature.BBN_ResNet_Cifar.load_model", "print"], "function", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.load_model"], ["    ", "print", "(", "'Loading ResNet 32 Feature Model.'", ")", "\n", "resnet32", "=", "BBN_ResNet_Cifar", "(", "BasicBlock", ",", "[", "5", ",", "5", ",", "5", "]", ")", "\n", "\n", "pretrained_model", "=", "\"./data/checkpoints/final_model_checkpoint.pth\"", "\n", "if", "path", ".", "exists", "(", "pretrained_model", ")", "and", "pretrain", ":", "\n", "        ", "print", "(", "'===> Load Initialization for ResNet32'", ")", "\n", "resnet32", ".", "load_model", "(", "pretrain", "=", "pretrained_model", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'===> Train backbone from the scratch'", ")", "\n", "\n", "", "return", "resnet32", "\n", "", ""]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.BaselineCosineClassifier.BaselineCosineClassifier.__init__": [[9, 15], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "BaselineCosineClassifier.BaselineCosineClassifier.reset_parameters", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__", "home.repos.pwc.inspect_result.beierzhu_xerm.models.CausalNormClassifierFixWeight.Causal_Norm_Classifier.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "10", ",", "feat_dim", "=", "128", ",", "tau", "=", "16", ",", "gamma", "=", "0.03125", ")", ":", "\n", "        ", "super", "(", "BaselineCosineClassifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_classes", ",", "feat_dim", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "True", ")", "\n", "self", ".", "tau", "=", "tau", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "reset_parameters", "(", "self", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.BaselineCosineClassifier.BaselineCosineClassifier.reset_parameters": [[16, 19], ["weight.data.uniform_", "math.sqrt", "weight.size"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size"], ["", "def", "reset_parameters", "(", "self", ",", "weight", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "weight", ".", "size", "(", "1", ")", ")", "\n", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.BaselineCosineClassifier.BaselineCosineClassifier.get_cos_sin": [[20, 24], ["torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "def", "get_cos_sin", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "cos_val", "=", "(", "x", "*", "y", ")", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", "/", "torch", ".", "norm", "(", "x", ",", "2", ",", "1", ",", "keepdim", "=", "True", ")", "/", "torch", ".", "norm", "(", "y", ",", "2", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "sin_val", "=", "(", "1", "-", "cos_val", "*", "cos_val", ")", ".", "sqrt", "(", ")", "\n", "return", "cos_val", ",", "sin_val", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.BaselineCosineClassifier.BaselineCosineClassifier.l2_norm": [[25, 28], ["torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "def", "l2_norm", "(", "self", ",", "x", ")", ":", "\n", "        ", "normed_x", "=", "x", "/", "torch", ".", "norm", "(", "x", ",", "2", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "return", "normed_x", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.BaselineCosineClassifier.BaselineCosineClassifier.causal_norm": [[29, 33], ["torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "def", "causal_norm", "(", "self", ",", "x", ",", "weight", ")", ":", "\n", "        ", "norm", "=", "torch", ".", "norm", "(", "x", ",", "2", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "normed_x", "=", "x", "/", "(", "norm", "+", "weight", ")", "\n", "return", "normed_x", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.BaselineCosineClassifier.BaselineCosineClassifier.forward": [[34, 40], ["BaselineCosineClassifier.BaselineCosineClassifier.causal_norm", "BaselineCosineClassifier.BaselineCosineClassifier.l2_norm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "BaselineCosineClassifier.BaselineCosineClassifier.t"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.models.CausalNormClassifierFixWeight.Causal_Norm_Classifier.causal_norm", "home.repos.pwc.inspect_result.beierzhu_xerm.models.CausalNormClassifierFixWeight.Causal_Norm_Classifier.l2_norm"], ["", "def", "forward", "(", "self", ",", "x", ",", "label", ",", "embed", ")", ":", "\n", "        ", "normed_w", "=", "self", ".", "causal_norm", "(", "self", ".", "weight", ",", "self", ".", "gamma", ")", "\n", "normed_x", "=", "self", ".", "l2_norm", "(", "x", ")", "\n", "y", "=", "torch", ".", "mm", "(", "normed_x", "*", "self", ".", "tau", ",", "normed_w", ".", "t", "(", ")", ")", "\n", "\n", "return", "y", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.BaselineCosineClassifier.create_model": [[42, 47], ["print", "BaselineCosineClassifier.BaselineCosineClassifier"], "function", ["None"], ["", "", "def", "create_model", "(", "feat_dim", ",", "num_classes", "=", "1000", ",", "stage1_weights", "=", "False", ",", "dataset", "=", "None", ",", "log_dir", "=", "None", ",", "test", "=", "False", ",", "use_effect", "=", "True", ",", "num_head", "=", "None", ",", "tau", "=", "None", ",", "alpha", "=", "None", ",", "gamma", "=", "None", ",", "*", "args", ")", ":", "\n", "    ", "print", "(", "'Loading Baseline Cosine Classifier'", ")", "\n", "clf", "=", "BaselineCosineClassifier", "(", "num_classes", ",", "feat_dim", ",", "tau", "=", "tau", ",", "gamma", "=", "gamma", ")", "\n", "\n", "return", "clf", "", "", ""]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.TauNormClassifier.DotProduct_Classifier.__init__": [[24, 30], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.nn.parameter.Parameter", "torch.nn.parameter.Parameter", "TauNormClassifier.DotProduct_Classifier.fc.named_parameters", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1000", ",", "feat_dim", "=", "2048", ",", "use_effect", "=", "False", ",", "num_head", "=", "2", ",", "apply_gate", "=", "False", ",", "*", "args", ")", ":", "\n", "        ", "super", "(", "DotProduct_Classifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "feat_dim", ",", "num_classes", ")", "\n", "self", ".", "scales", "=", "Parameter", "(", "torch", ".", "ones", "(", "num_classes", ")", ")", "\n", "for", "param_name", ",", "param", "in", "self", ".", "fc", ".", "named_parameters", "(", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.TauNormClassifier.DotProduct_Classifier.forward": [[32, 36], ["TauNormClassifier.DotProduct_Classifier.fc"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ",", "label", ",", "embed", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "x", "*=", "self", ".", "scales", "\n", "return", "x", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.TauNormClassifier.create_model": [[37, 60], ["print", "TauNormClassifier.DotProduct_Classifier", "print", "print", "init_weights", "print", "subdir.replace.replace", "os.path.join", "log_dir.strip().split", "os.path.join", "log_dir.strip", "log_dir.split"], "function", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.init_weights"], ["", "", "def", "create_model", "(", "feat_dim", ",", "num_classes", "=", "1000", ",", "stage1_weights", "=", "False", ",", "dataset", "=", "None", ",", "log_dir", "=", "None", ",", "test", "=", "False", ",", "*", "args", ")", ":", "\n", "    ", "print", "(", "'Loading Tau Norm Classifier.'", ")", "\n", "clf", "=", "DotProduct_Classifier", "(", "num_classes", ",", "feat_dim", ")", "\n", "\n", "if", "not", "test", ":", "\n", "        ", "if", "stage1_weights", ":", "\n", "            ", "assert", "(", "dataset", ")", "\n", "print", "(", "'Loading %s Stage 1 Classifier Weights.'", "%", "dataset", ")", "\n", "if", "log_dir", "is", "not", "None", ":", "\n", "                ", "subdir", "=", "log_dir", ".", "strip", "(", "'/'", ")", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "subdir", "=", "subdir", ".", "replace", "(", "'stage2'", ",", "'stage1'", ")", "\n", "weight_dir", "=", "path", ".", "join", "(", "'/'", ".", "join", "(", "log_dir", ".", "split", "(", "'/'", ")", "[", ":", "-", "1", "]", ")", ",", "subdir", ")", "\n", "# weight_dir = path.join('/'.join(log_dir.split('/')[:-1]), 'stage1')", "\n", "", "else", ":", "\n", "                ", "weight_dir", "=", "'./logs/%s/stage1'", "%", "dataset", "\n", "", "print", "(", "'==> Loading classifier weights from %s'", "%", "weight_dir", ")", "\n", "clf", ".", "fc", "=", "init_weights", "(", "model", "=", "clf", ".", "fc", ",", "\n", "weights_path", "=", "path", ".", "join", "(", "weight_dir", ",", "'final_model_checkpoint.pth'", ")", ",", "\n", "classifier", "=", "True", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Random initialized classifier weights.'", ")", "\n", "\n", "", "", "return", "clf", "", "", ""]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNet152Feature.create_model": [[12, 35], ["print", "ResNet", "print", "init_weights", "print", "init_weights", "print"], "function", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.init_weights", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.init_weights"], ["def", "create_model", "(", "use_fc", "=", "False", ",", "dropout", "=", "None", ",", "stage1_weights", "=", "False", ",", "dataset", "=", "None", ",", "log_dir", "=", "None", ",", "test", "=", "False", ",", "*", "args", ")", ":", "\n", "\n", "    ", "print", "(", "'Loading Scratch ResNet 152 Feature Model.'", ")", "\n", "resnet", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "use_fc", "=", "use_fc", ",", "dropout", "=", "None", ")", "\n", "\n", "resnet", "=", "init_weights", "(", "model", "=", "resnet", ",", "\n", "weights_path", "=", "'./logs/resnet152.pth'", ",", "\n", "caffe", "=", "True", ")", "\n", "\n", "print", "(", "'=> load resnet 152'", ")", "\n", "\n", "return", "resnet", "\n", "", ""]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNext50Feature.create_model": [[12, 34], ["print", "print", "ResNext", "print", "print", "init_weights", "print", "os.path.join", "os.path.join", "log_dir.split"], "function", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.init_weights"], ["def", "create_model", "(", "use_fc", "=", "False", ",", "dropout", "=", "None", ",", "stage1_weights", "=", "False", ",", "dataset", "=", "None", ",", "log_dir", "=", "None", ",", "test", "=", "False", ",", "last_relu", "=", "True", ",", "*", "args", ")", ":", "\n", "\n", "    ", "print", "(", "'Loading Scratch ResNext 50 Feature Model.'", ")", "\n", "print", "(", "'======> Last ReLU: '", ",", "last_relu", ")", "\n", "resnext", "=", "ResNext", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "use_fc", "=", "use_fc", ",", "dropout", "=", "None", ",", "\n", "groups", "=", "32", ",", "width_per_group", "=", "4", ",", "last_relu", "=", "last_relu", ")", "\n", "\n", "if", "not", "test", ":", "\n", "        ", "if", "stage1_weights", ":", "\n", "            ", "assert", "(", "dataset", ")", "\n", "print", "(", "'Loading %s Stage 1 ResNext 50 Weights.'", "%", "dataset", ")", "\n", "if", "log_dir", "is", "not", "None", ":", "\n", "                ", "weight_dir", "=", "path", ".", "join", "(", "'/'", ".", "join", "(", "log_dir", ".", "split", "(", "'/'", ")", "[", ":", "-", "1", "]", ")", ",", "'stage1'", ")", "\n", "", "else", ":", "\n", "                ", "weight_dir", "=", "'./logs/%s/stage1'", "%", "dataset", "\n", "", "print", "(", "'==> Loading weights from %s'", "%", "weight_dir", ")", "\n", "resnext", "=", "init_weights", "(", "model", "=", "resnext", ",", "\n", "weights_path", "=", "path", ".", "join", "(", "weight_dir", ",", "'final_model_checkpoint.pth'", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'No Pretrained Weights For Feature Model.'", ")", "\n", "\n", "", "", "return", "resnext", "", "", ""]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNextFeature.BasicBlock.__init__": [[22, 31], ["torch.Module.__init__", "ResNextFeature.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "ResNextFeature.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.conv3x3", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNextFeature.BasicBlock.forward": [[32, 49], ["ResNextFeature.BasicBlock.conv1", "ResNextFeature.BasicBlock.bn1", "ResNextFeature.BasicBlock.relu", "ResNextFeature.BasicBlock.conv2", "ResNextFeature.BasicBlock.bn2", "ResNextFeature.BasicBlock.relu", "ResNextFeature.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNextFeature.Bottleneck.__init__": [[53, 69], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "\n", "groups", "=", "1", ",", "base_width", "=", "64", ",", "is_last", "=", "False", ",", "last_relu", "=", "True", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.", ")", ")", "*", "groups", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "width", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "width", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "width", ",", "width", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "groups", "=", "groups", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "width", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "width", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "self", ".", "is_last", "=", "is_last", "\n", "self", ".", "last_relu", "=", "last_relu", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNextFeature.Bottleneck.forward": [[70, 94], ["ResNextFeature.Bottleneck.conv1", "ResNextFeature.Bottleneck.bn1", "ResNextFeature.Bottleneck.relu", "ResNextFeature.Bottleneck.conv2", "ResNextFeature.Bottleneck.bn2", "ResNextFeature.Bottleneck.relu", "ResNextFeature.Bottleneck.conv3", "ResNextFeature.Bottleneck.bn3", "ResNextFeature.Bottleneck.downsample", "ResNextFeature.Bottleneck.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "if", "self", ".", "is_last", "and", "(", "not", "self", ".", "last_relu", ")", ":", "\n", "            ", "pass", "\n", "", "else", ":", "\n", "            ", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNextFeature.ResNext.__init__": [[97, 134], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "ResNextFeature.ResNext._make_layer", "ResNextFeature.ResNext._make_layer", "ResNextFeature.ResNext._make_layer", "ResNextFeature.ResNext._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "ResNextFeature.ResNext.modules", "print", "torch.Linear", "torch.Linear", "print", "torch.Dropout", "torch.Dropout", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet._make_layer", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet._make_layer", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet._make_layer", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "groups", "=", "1", ",", "width_per_group", "=", "64", ",", "use_fc", "=", "False", ",", "dropout", "=", "None", ",", "\n", "use_glore", "=", "False", ",", "use_gem", "=", "False", ",", "last_relu", "=", "True", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNext", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "is_last", "=", "True", ",", "last_relu", "=", "last_relu", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "\n", "self", ".", "use_fc", "=", "use_fc", "\n", "self", ".", "use_dropout", "=", "True", "if", "dropout", "else", "False", "\n", "\n", "if", "self", ".", "use_fc", ":", "\n", "            ", "print", "(", "'Using fc.'", ")", "\n", "self", ".", "fc_add", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "512", ")", "\n", "\n", "", "if", "self", ".", "use_dropout", ":", "\n", "            ", "print", "(", "'Using dropout.'", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNextFeature.ResNext._make_layer": [[136, 155], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "is_last", "=", "False", ",", "last_relu", "=", "True", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "\n", "groups", "=", "self", ".", "groups", ",", "base_width", "=", "self", ".", "base_width", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "\n", "groups", "=", "self", ".", "groups", ",", "base_width", "=", "self", ".", "base_width", ",", "\n", "is_last", "=", "(", "is_last", "and", "i", "==", "blocks", "-", "1", ")", ",", "last_relu", "=", "last_relu", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNextFeature.ResNext.forward": [[156, 178], ["ResNextFeature.ResNext.conv1", "ResNextFeature.ResNext.bn1", "ResNextFeature.ResNext.relu", "ResNextFeature.ResNext.maxpool", "ResNextFeature.ResNext.layer1", "ResNextFeature.ResNext.layer2", "ResNextFeature.ResNext.layer3", "ResNextFeature.ResNext.layer4", "ResNextFeature.ResNext.avgpool", "ResNextFeature.ResNext.view", "ResNextFeature.ResNext.size", "torch.relu", "torch.relu", "ResNextFeature.ResNext.dropout", "ResNextFeature.ResNext.fc_add"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size"], ["", "def", "forward", "(", "self", ",", "x", ",", "*", "args", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "\n", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n", "if", "self", ".", "use_fc", ":", "\n", "            ", "x", "=", "F", ".", "relu", "(", "self", ".", "fc_add", "(", "x", ")", ")", "\n", "\n", "", "if", "self", ".", "use_dropout", ":", "\n", "            ", "x", "=", "self", ".", "dropout", "(", "x", ")", "\n", "\n", "", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNextFeature.conv3x3": [[14, 18], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNet32FeatureCausal.LambdaLayer.__init__": [[21, 24], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "lambd", ")", ":", "\n", "        ", "super", "(", "LambdaLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lambd", "=", "lambd", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNet32FeatureCausal.LambdaLayer.forward": [[25, 27], ["ResNet32FeatureCausal.LambdaLayer.lambd"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "lambd", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNet32FeatureCausal.BasicBlock.__init__": [[31, 66], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "ResNet32FeatureCausal.LambdaLayer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ",", "option", "=", "\"A\"", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "if", "option", "==", "\"A\"", ":", "\n", "                ", "\"\"\"\n                For CIFAR10 ResNet paper uses option A.\n                \"\"\"", "\n", "self", ".", "shortcut", "=", "LambdaLayer", "(", "\n", "lambda", "x", ":", "F", ".", "pad", "(", "\n", "x", "[", ":", ",", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", ",", "\n", "(", "0", ",", "0", ",", "0", ",", "0", ",", "planes", "//", "4", ",", "planes", "//", "4", ")", ",", "\n", "\"constant\"", ",", "\n", "0", ",", "\n", ")", "\n", ")", "\n", "", "elif", "option", "==", "\"B\"", ":", "\n", "                ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "self", ".", "expansion", "*", "planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNet32FeatureCausal.BasicBlock.forward": [[68, 74], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "ResNet32FeatureCausal.BasicBlock.bn2", "ResNet32FeatureCausal.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "ResNet32FeatureCausal.BasicBlock.bn1", "ResNet32FeatureCausal.BasicBlock.conv2", "ResNet32FeatureCausal.BasicBlock.conv1"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNet32FeatureCausal.BBN_ResNet_Cifar.__init__": [[77, 93], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "ResNet32FeatureCausal.BBN_ResNet_Cifar._make_layer", "ResNet32FeatureCausal.BBN_ResNet_Cifar._make_layer", "ResNet32FeatureCausal.BBN_ResNet_Cifar._make_layer", "block", "block", "ResNet32FeatureCausal.BBN_ResNet_Cifar.apply", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet._make_layer", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet._make_layer", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ")", ":", "\n", "        ", "super", "(", "BBN_ResNet_Cifar", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "16", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "2", "]", "-", "1", ",", "stride", "=", "2", ")", "\n", "self", ".", "cb_block", "=", "block", "(", "self", ".", "in_planes", ",", "self", ".", "in_planes", ",", "stride", "=", "1", ")", "\n", "self", ".", "rb_block", "=", "block", "(", "self", ".", "in_planes", ",", "self", ".", "in_planes", ",", "stride", "=", "1", ")", "\n", "\n", "self", ".", "apply", "(", "_weights_init", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "128", ",", "128", ",", "bias", "=", "False", ")", "\n", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNet32FeatureCausal.BBN_ResNet_Cifar.load_model": [[94, 110], ["print", "ResNet32FeatureCausal.BBN_ResNet_Cifar.state_dict", "collections.OrderedDict", "pretrain_dict.items", "ResNet32FeatureCausal.BBN_ResNet_Cifar.update", "ResNet32FeatureCausal.BBN_ResNet_Cifar.load_state_dict", "print", "k.startswith", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.utils.util.load_state_dict"], ["", "def", "load_model", "(", "self", ",", "pretrain", ")", ":", "\n", "        ", "print", "(", "\"Loading Backbone pretrain model from {}......\"", ".", "format", "(", "pretrain", ")", ")", "\n", "model_dict", "=", "self", ".", "state_dict", "(", ")", "\n", "pretrain_dict", "=", "torch", ".", "load", "(", "pretrain", ")", "[", "\"state_dict_best\"", "]", "[", "'feat_model'", "]", "\n", "\n", "new_dict", "=", "OrderedDict", "(", ")", "\n", "\n", "for", "k", ",", "v", "in", "pretrain_dict", ".", "items", "(", ")", ":", "\n", "            ", "if", "k", ".", "startswith", "(", "\"module\"", ")", ":", "\n", "                ", "k", "=", "k", "[", "7", ":", "]", "\n", "", "if", "\"fc\"", "not", "in", "k", "and", "\"classifier\"", "not", "in", "k", ":", "\n", "                ", "new_dict", "[", "k", "]", "=", "v", "\n", "\n", "", "", "model_dict", ".", "update", "(", "new_dict", ")", "\n", "self", ".", "load_state_dict", "(", "model_dict", ")", "\n", "print", "(", "\"Backbone model has been loaded......\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNet32FeatureCausal.BBN_ResNet_Cifar._make_layer": [[111, 119], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ",", "add_flag", "=", "True", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNet32FeatureCausal.BBN_ResNet_Cifar.forward": [[120, 141], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "ResNet32FeatureCausal.BBN_ResNet_Cifar.layer1", "ResNet32FeatureCausal.BBN_ResNet_Cifar.layer2", "ResNet32FeatureCausal.BBN_ResNet_Cifar.layer3", "ResNet32FeatureCausal.BBN_ResNet_Cifar.cb_block", "ResNet32FeatureCausal.BBN_ResNet_Cifar.rb_block", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "ResNet32FeatureCausal.BBN_ResNet_Cifar.avgpool", "ResNet32FeatureCausal.BBN_ResNet_Cifar.view", "ResNet32FeatureCausal.BBN_ResNet_Cifar.fc", "ResNet32FeatureCausal.BBN_ResNet_Cifar.bn1", "ResNet32FeatureCausal.BBN_ResNet_Cifar.cb_block", "ResNet32FeatureCausal.BBN_ResNet_Cifar.conv1", "ResNet32FeatureCausal.BBN_ResNet_Cifar.rb_block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "**", "kwargs", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "if", "\"feature_cb\"", "in", "kwargs", ":", "\n", "            ", "out", "=", "self", ".", "cb_block", "(", "out", ")", "\n", "return", "out", "\n", "", "elif", "\"feature_rb\"", "in", "kwargs", ":", "\n", "            ", "out", "=", "self", ".", "rb_block", "(", "out", ")", "\n", "return", "out", "\n", "\n", "", "out1", "=", "self", ".", "cb_block", "(", "out", ")", "\n", "out2", "=", "self", ".", "rb_block", "(", "out", ")", "\n", "out", "=", "torch", ".", "cat", "(", "(", "out1", ",", "out2", ")", ",", "dim", "=", "1", ")", "\n", "\n", "out", "=", "self", ".", "avgpool", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "shape", "[", "0", "]", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNet32FeatureCausal._weights_init": [[12, 18], ["isinstance", "isinstance", "torch.kaiming_normal_", "torch.xavier_normal_"], "function", ["None"], ["def", "_weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "        ", "init", ".", "xavier_normal_", "(", "m", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNet32FeatureCausal.create_model": [[144, 157], ["print", "ResNet32FeatureCausal.BBN_ResNet_Cifar", "os.path.exists", "print", "ResNet32FeatureCausal.BBN_ResNet_Cifar.load_model", "print"], "function", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.load_model"], ["", "", "def", "create_model", "(", "use_fc", "=", "False", ",", "pretrain", "=", "False", ",", "dropout", "=", "None", ",", "stage1_weights", "=", "False", ",", "dataset", "=", "None", ",", "log_dir", "=", "None", ",", "test", "=", "False", ",", "*", "args", ")", ":", "\n", "\n", "    ", "print", "(", "'Loading ResNet 32 Feature Model.'", ")", "\n", "resnet32", "=", "BBN_ResNet_Cifar", "(", "BasicBlock", ",", "[", "5", ",", "5", ",", "5", "]", ")", "\n", "\n", "pretrained_model", "=", "\"./data/checkpoints/final_model_checkpoint.pth\"", "\n", "if", "path", ".", "exists", "(", "pretrained_model", ")", "and", "pretrain", ":", "\n", "        ", "print", "(", "'===> Load Initialization for ResNet32'", ")", "\n", "resnet32", ".", "load_model", "(", "pretrain", "=", "pretrained_model", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'===> Train backbone from the scratch'", ")", "\n", "\n", "", "return", "resnet32", "\n", "", ""]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNet50Feature.load_model": [[14, 31], ["print", "model.state_dict", "torch.load", "collections.OrderedDict", "torch.load.items", "model.state_dict.update", "model.load_state_dict", "print", "k.startswith"], "function", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.utils.util.load_state_dict"], ["\n", "def", "load_model", "(", "model", ",", "pretrain", ")", ":", "\n", "    ", "print", "(", "\"Loading Backbone pretrain model from {}......\"", ".", "format", "(", "pretrain", ")", ")", "\n", "model_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "pretrain_dict", "=", "torch", ".", "load", "(", "pretrain", ")", "\n", "new_dict", "=", "OrderedDict", "(", ")", "\n", "\n", "for", "k", ",", "v", "in", "pretrain_dict", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", ".", "startswith", "(", "\"module\"", ")", ":", "\n", "            ", "k", "=", "k", "[", "7", ":", "]", "\n", "", "if", "\"fc\"", "not", "in", "k", "and", "\"classifier\"", "not", "in", "k", ":", "\n", "            ", "new_dict", "[", "k", "]", "=", "v", "\n", "\n", "", "", "model_dict", ".", "update", "(", "new_dict", ")", "\n", "model", ".", "load_state_dict", "(", "model_dict", ")", "\n", "print", "(", "\"Backbone model has been loaded......\"", ")", "\n", "\n", "return", "model", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNet50Feature.create_model": [[33, 41], ["print", "ResNet", "ResNet50Feature.load_model"], "function", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.load_model"], ["", "def", "create_model", "(", "use_fc", "=", "False", ",", "dropout", "=", "None", ",", "stage1_weights", "=", "False", ",", "dataset", "=", "None", ",", "log_dir", "=", "None", ",", "test", "=", "False", ",", "*", "args", ")", ":", "\n", "\n", "    ", "print", "(", "'Loading Scratch ResNet 50 Feature Model.'", ")", "\n", "resnet50", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "use_fc", "=", "use_fc", ",", "dropout", "=", "None", ")", "\n", "\n", "resnet50", "=", "load_model", "(", "resnet50", ",", "pretrain", "=", "'/data1/pretrained/resnet50-0676ba61.pth'", ")", "\n", "\n", "return", "resnet50", "\n", "", ""]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.CausalNormClassifierFixWeight.Causal_Norm_Classifier.__init__": [[9, 20], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "CausalNormClassifierFixWeight.Causal_Norm_Classifier.reset_parameters", "torch.ReLU", "torch.ReLU", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor().cuda", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__", "home.repos.pwc.inspect_result.beierzhu_xerm.models.CausalNormClassifierFixWeight.Causal_Norm_Classifier.reset_parameters"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "1000", ",", "feat_dim", "=", "2048", ",", "use_effect", "=", "True", ",", "num_head", "=", "2", ",", "tau", "=", "16.0", ",", "alpha", "=", "3.0", ",", "gamma", "=", "0.03125", ",", "*", "args", ")", ":", "\n", "        ", "super", "(", "Causal_Norm_Classifier", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "weight", "=", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "num_classes", ",", "feat_dim", ")", ".", "cuda", "(", ")", ",", "requires_grad", "=", "False", ")", "\n", "self", ".", "scale", "=", "tau", "/", "num_head", "# 16.0 / num_head", "\n", "self", ".", "norm_scale", "=", "gamma", "# 1.0 / 32.0", "\n", "self", ".", "alpha", "=", "alpha", "# 3.0", "\n", "self", ".", "num_head", "=", "num_head", "\n", "self", ".", "head_dim", "=", "feat_dim", "//", "num_head", "\n", "self", ".", "use_effect", "=", "use_effect", "\n", "self", ".", "reset_parameters", "(", "self", ".", "weight", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.CausalNormClassifierFixWeight.Causal_Norm_Classifier.reset_parameters": [[21, 24], ["weight.data.uniform_", "math.sqrt", "weight.size"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size"], ["", "def", "reset_parameters", "(", "self", ",", "weight", ")", ":", "\n", "        ", "stdv", "=", "1.", "/", "math", ".", "sqrt", "(", "weight", ".", "size", "(", "1", ")", ")", "\n", "weight", ".", "data", ".", "uniform_", "(", "-", "stdv", ",", "stdv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.CausalNormClassifierFixWeight.Causal_Norm_Classifier.forward": [[25, 48], ["CausalNormClassifierFixWeight.Causal_Norm_Classifier.multi_head_call", "CausalNormClassifierFixWeight.Causal_Norm_Classifier.multi_head_call", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "CausalNormClassifierFixWeight.Causal_Norm_Classifier.t", "torch.from_numpy().view().to", "torch.from_numpy().view().to", "torch.from_numpy().view().to", "torch.from_numpy().view().to", "CausalNormClassifierFixWeight.Causal_Norm_Classifier.multi_head_call", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "zip", "sum", "CausalNormClassifierFixWeight.Causal_Norm_Classifier.get_cos_sin", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "output.append", "torch.from_numpy().view", "torch.from_numpy().view", "torch.from_numpy().view", "torch.from_numpy().view", "nw.t", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.models.CausalNormClassifierFixWeight.Causal_Norm_Classifier.multi_head_call", "home.repos.pwc.inspect_result.beierzhu_xerm.models.CausalNormClassifierFixWeight.Causal_Norm_Classifier.multi_head_call", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.models.CausalNormClassifierFixWeight.Causal_Norm_Classifier.multi_head_call", "home.repos.pwc.inspect_result.beierzhu_xerm.models.CausalNormClassifierFixWeight.Causal_Norm_Classifier.get_cos_sin"], ["", "def", "forward", "(", "self", ",", "x", ",", "label", ",", "embed", ")", ":", "\n", "# calculate capsule normalized feature vector and predict", "\n", "        ", "normed_w", "=", "self", ".", "multi_head_call", "(", "self", ".", "causal_norm", ",", "self", ".", "weight", ",", "weight", "=", "self", ".", "norm_scale", ")", "\n", "normed_x", "=", "self", ".", "multi_head_call", "(", "self", ".", "l2_norm", ",", "x", ")", "\n", "y", "=", "torch", ".", "mm", "(", "normed_x", "*", "self", ".", "scale", ",", "normed_w", ".", "t", "(", ")", ")", "\n", "\n", "# remove the effect of confounder c during test", "\n", "if", "(", "not", "self", ".", "training", ")", "and", "self", ".", "use_effect", ":", "\n", "            ", "self", ".", "embed", "=", "torch", ".", "from_numpy", "(", "embed", ")", ".", "view", "(", "1", ",", "-", "1", ")", ".", "to", "(", "x", ".", "device", ")", "\n", "normed_c", "=", "self", ".", "multi_head_call", "(", "self", ".", "l2_norm", ",", "self", ".", "embed", ")", "\n", "head_dim", "=", "x", ".", "shape", "[", "1", "]", "//", "self", ".", "num_head", "\n", "x_list", "=", "torch", ".", "split", "(", "normed_x", ",", "head_dim", ",", "dim", "=", "1", ")", "\n", "c_list", "=", "torch", ".", "split", "(", "normed_c", ",", "head_dim", ",", "dim", "=", "1", ")", "\n", "w_list", "=", "torch", ".", "split", "(", "normed_w", ",", "head_dim", ",", "dim", "=", "1", ")", "\n", "output", "=", "[", "]", "\n", "\n", "for", "nx", ",", "nc", ",", "nw", "in", "zip", "(", "x_list", ",", "c_list", ",", "w_list", ")", ":", "\n", "                ", "cos_val", ",", "sin_val", "=", "self", ".", "get_cos_sin", "(", "nx", ",", "nc", ")", "\n", "y0", "=", "torch", ".", "mm", "(", "(", "nx", "-", "cos_val", "*", "self", ".", "alpha", "*", "nc", ")", "*", "self", ".", "scale", ",", "nw", ".", "t", "(", ")", ")", "\n", "output", ".", "append", "(", "y0", ")", "\n", "", "y", "=", "sum", "(", "output", ")", "\n", "\n", "", "return", "y", ",", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.CausalNormClassifierFixWeight.Causal_Norm_Classifier.get_cos_sin": [[49, 53], ["torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "def", "get_cos_sin", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "cos_val", "=", "(", "x", "*", "y", ")", ".", "sum", "(", "-", "1", ",", "keepdim", "=", "True", ")", "/", "torch", ".", "norm", "(", "x", ",", "2", ",", "1", ",", "keepdim", "=", "True", ")", "/", "torch", ".", "norm", "(", "y", ",", "2", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "sin_val", "=", "(", "1", "-", "cos_val", "*", "cos_val", ")", ".", "sqrt", "(", ")", "\n", "return", "cos_val", ",", "sin_val", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.CausalNormClassifierFixWeight.Causal_Norm_Classifier.multi_head_call": [[54, 64], ["torch.split", "torch.split", "torch.split", "torch.split", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "len", "len", "len", "func", "func"], "methods", ["None"], ["", "def", "multi_head_call", "(", "self", ",", "func", ",", "x", ",", "weight", "=", "None", ")", ":", "\n", "        ", "assert", "len", "(", "x", ".", "shape", ")", "==", "2", "\n", "x_list", "=", "torch", ".", "split", "(", "x", ",", "self", ".", "head_dim", ",", "dim", "=", "1", ")", "\n", "if", "weight", ":", "\n", "            ", "y_list", "=", "[", "func", "(", "item", ",", "weight", ")", "for", "item", "in", "x_list", "]", "\n", "", "else", ":", "\n", "            ", "y_list", "=", "[", "func", "(", "item", ")", "for", "item", "in", "x_list", "]", "\n", "", "assert", "len", "(", "x_list", ")", "==", "self", ".", "num_head", "\n", "assert", "len", "(", "y_list", ")", "==", "self", ".", "num_head", "\n", "return", "torch", ".", "cat", "(", "y_list", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.CausalNormClassifierFixWeight.Causal_Norm_Classifier.l2_norm": [[65, 68], ["torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "def", "l2_norm", "(", "self", ",", "x", ")", ":", "\n", "        ", "normed_x", "=", "x", "/", "torch", ".", "norm", "(", "x", ",", "2", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "return", "normed_x", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.CausalNormClassifierFixWeight.Causal_Norm_Classifier.capsule_norm": [[69, 73], ["torch.norm", "torch.norm", "torch.norm", "torch.norm", "x.clone"], "methods", ["None"], ["", "def", "capsule_norm", "(", "self", ",", "x", ")", ":", "\n", "        ", "norm", "=", "torch", ".", "norm", "(", "x", ".", "clone", "(", ")", ",", "2", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "normed_x", "=", "(", "norm", "/", "(", "1", "+", "norm", ")", ")", "*", "(", "x", "/", "norm", ")", "\n", "return", "normed_x", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.CausalNormClassifierFixWeight.Causal_Norm_Classifier.causal_norm": [[74, 78], ["torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["None"], ["", "def", "causal_norm", "(", "self", ",", "x", ",", "weight", ")", ":", "\n", "        ", "norm", "=", "torch", ".", "norm", "(", "x", ",", "2", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "normed_x", "=", "x", "/", "(", "norm", "+", "weight", ")", "\n", "return", "normed_x", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.CausalNormClassifierFixWeight.create_model": [[79, 84], ["print", "CausalNormClassifierFixWeight.Causal_Norm_Classifier", "str"], "function", ["None"], ["", "", "def", "create_model", "(", "feat_dim", ",", "num_classes", "=", "1000", ",", "stage1_weights", "=", "False", ",", "dataset", "=", "None", ",", "log_dir", "=", "None", ",", "test", "=", "False", ",", "use_effect", "=", "True", ",", "num_head", "=", "None", ",", "tau", "=", "None", ",", "alpha", "=", "None", ",", "gamma", "=", "None", ",", "*", "args", ")", ":", "\n", "    ", "print", "(", "'Loading Causal Norm Classifier with use_effect: {}, num_head: {}, tau: {}, alpha: {}, gamma: {}.'", ".", "format", "(", "str", "(", "use_effect", ")", ",", "num_head", ",", "tau", ",", "alpha", ",", "gamma", ")", ")", "\n", "clf", "=", "Causal_Norm_Classifier", "(", "num_classes", ",", "feat_dim", ",", "use_effect", "=", "use_effect", ",", "num_head", "=", "num_head", ",", "tau", "=", "tau", ",", "alpha", "=", "alpha", ",", "gamma", "=", "gamma", ")", "\n", "\n", "return", "clf", "", "", ""]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNext101Feature.create_model": [[12, 34], ["print", "print", "ResNext", "print", "print", "init_weights", "print", "os.path.join", "os.path.join", "log_dir.split"], "function", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.init_weights"], ["def", "create_model", "(", "use_fc", "=", "False", ",", "dropout", "=", "None", ",", "stage1_weights", "=", "False", ",", "dataset", "=", "None", ",", "log_dir", "=", "None", ",", "test", "=", "False", ",", "last_relu", "=", "True", ",", "*", "args", ")", ":", "\n", "\n", "    ", "print", "(", "'Loading Scratch ResNext 101 Feature Model.'", ")", "\n", "print", "(", "'======> Last ReLU: '", ",", "last_relu", ")", "\n", "resnext", "=", "ResNext", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "use_fc", "=", "use_fc", ",", "dropout", "=", "None", ",", "\n", "groups", "=", "32", ",", "width_per_group", "=", "4", ",", "last_relu", "=", "last_relu", ")", "\n", "\n", "if", "not", "test", ":", "\n", "        ", "if", "stage1_weights", ":", "\n", "            ", "assert", "(", "dataset", ")", "\n", "print", "(", "'Loading %s Stage 1 ResNext 101 Weights.'", "%", "dataset", ")", "\n", "if", "log_dir", "is", "not", "None", ":", "\n", "                ", "weight_dir", "=", "path", ".", "join", "(", "'/'", ".", "join", "(", "log_dir", ".", "split", "(", "'/'", ")", "[", ":", "-", "1", "]", ")", ",", "'stage1'", ")", "\n", "", "else", ":", "\n", "                ", "weight_dir", "=", "'./logs/%s/stage1'", "%", "dataset", "\n", "", "print", "(", "'==> Loading weights from %s'", "%", "weight_dir", ")", "\n", "resnext", "=", "init_weights", "(", "model", "=", "resnext", ",", "\n", "weights_path", "=", "path", ".", "join", "(", "weight_dir", ",", "'final_model_checkpoint.pth'", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'No Pretrained Weights For Feature Model.'", ")", "\n", "\n", "", "", "return", "resnext", "\n", "", ""]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNext152Feature.create_model": [[12, 34], ["print", "print", "ResNext", "print", "print", "init_weights", "print", "os.path.join", "os.path.join", "log_dir.split"], "function", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.init_weights"], ["def", "create_model", "(", "use_fc", "=", "False", ",", "dropout", "=", "None", ",", "stage1_weights", "=", "False", ",", "dataset", "=", "None", ",", "log_dir", "=", "None", ",", "test", "=", "False", ",", "last_relu", "=", "True", ",", "*", "args", ")", ":", "\n", "\n", "    ", "print", "(", "'Loading Scratch ResNext 152 Feature Model.'", ")", "\n", "print", "(", "'======> Last ReLU: '", ",", "last_relu", ")", "\n", "resnext", "=", "ResNext", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "use_fc", "=", "use_fc", ",", "dropout", "=", "None", ",", "\n", "groups", "=", "32", ",", "width_per_group", "=", "4", ",", "last_relu", "=", "last_relu", ")", "\n", "\n", "if", "not", "test", ":", "\n", "        ", "if", "stage1_weights", ":", "\n", "            ", "assert", "(", "dataset", ")", "\n", "print", "(", "'Loading %s Stage 1 ResNext 152 Weights.'", "%", "dataset", ")", "\n", "if", "log_dir", "is", "not", "None", ":", "\n", "                ", "weight_dir", "=", "path", ".", "join", "(", "'/'", ".", "join", "(", "log_dir", ".", "split", "(", "'/'", ")", "[", ":", "-", "1", "]", ")", ",", "'stage1'", ")", "\n", "", "else", ":", "\n", "                ", "weight_dir", "=", "'./logs/%s/stage1'", "%", "dataset", "\n", "", "print", "(", "'==> Loading weights from %s'", "%", "weight_dir", ")", "\n", "resnext", "=", "init_weights", "(", "model", "=", "resnext", ",", "\n", "weights_path", "=", "path", ".", "join", "(", "weight_dir", ",", "'final_model_checkpoint.pth'", ")", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'No Pretrained Weights For Feature Model.'", ")", "\n", "\n", "", "", "return", "resnext", "\n", "", ""]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.BasicBlock.__init__": [[28, 37], ["torch.Module.__init__", "ResNetFeature.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "ResNetFeature.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.conv3x3", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.BasicBlock.forward": [[38, 55], ["ResNetFeature.BasicBlock.conv1", "ResNetFeature.BasicBlock.bn1", "ResNetFeature.BasicBlock.relu", "ResNetFeature.BasicBlock.conv2", "ResNetFeature.BasicBlock.bn2", "ResNetFeature.BasicBlock.relu", "ResNetFeature.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.Bottleneck.__init__": [[59, 71], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.Bottleneck.forward": [[72, 93], ["ResNetFeature.Bottleneck.conv1", "ResNetFeature.Bottleneck.bn1", "ResNetFeature.Bottleneck.relu", "ResNetFeature.Bottleneck.conv2", "ResNetFeature.Bottleneck.bn2", "ResNetFeature.Bottleneck.relu", "ResNetFeature.Bottleneck.conv3", "ResNetFeature.Bottleneck.bn3", "ResNetFeature.Bottleneck.relu", "ResNetFeature.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet.__init__": [[96, 128], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "ResNetFeature.ResNet._make_layer", "ResNetFeature.ResNet._make_layer", "ResNetFeature.ResNet._make_layer", "ResNetFeature.ResNet._make_layer", "torch.AvgPool2d", "torch.AvgPool2d", "ResNetFeature.ResNet.modules", "print", "torch.Linear", "torch.Linear", "print", "torch.Dropout", "torch.Dropout", "isinstance", "m.weight.data.normal_", "isinstance", "math.sqrt", "m.weight.data.fill_", "m.bias.data.zero_"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet._make_layer", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet._make_layer", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet._make_layer", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "use_fc", "=", "False", ",", "dropout", "=", "None", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "\n", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ",", "stride", "=", "1", ")", "\n", "\n", "self", ".", "use_fc", "=", "use_fc", "\n", "self", ".", "use_dropout", "=", "True", "if", "dropout", "else", "False", "\n", "\n", "if", "self", ".", "use_fc", ":", "\n", "            ", "print", "(", "'Using fc.'", ")", "\n", "self", ".", "fc_add", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "512", ")", "\n", "\n", "", "if", "self", ".", "use_dropout", ":", "\n", "            ", "print", "(", "'Using dropout.'", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "p", "=", "dropout", ")", "\n", "\n", "", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "n", "=", "m", ".", "kernel_size", "[", "0", "]", "*", "m", ".", "kernel_size", "[", "1", "]", "*", "m", ".", "out_channels", "\n", "m", ".", "weight", ".", "data", ".", "normal_", "(", "0", ",", "math", ".", "sqrt", "(", "2.", "/", "n", ")", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "m", ".", "weight", ".", "data", ".", "fill_", "(", "1", ")", "\n", "m", ".", "bias", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet._make_layer": [[129, 145], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.ResNet.forward": [[146, 168], ["ResNetFeature.ResNet.conv1", "ResNetFeature.ResNet.bn1", "ResNetFeature.ResNet.relu", "ResNetFeature.ResNet.maxpool", "ResNetFeature.ResNet.layer1", "ResNetFeature.ResNet.layer2", "ResNetFeature.ResNet.layer3", "ResNetFeature.ResNet.layer4", "ResNetFeature.ResNet.avgpool", "ResNetFeature.ResNet.view", "ResNetFeature.ResNet.size", "torch.relu", "torch.relu", "ResNetFeature.ResNet.dropout", "ResNetFeature.ResNet.fc_add"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size"], ["# def freeze_except_last(self):", "\n", "#     print('=>> Freeze params except last .....')", "\n", "#     for param in self.conv1.parameters():", "\n", "#         param.requires_grad = False", "\n", "\n", "#     for param in self.bn1.parameters():", "\n", "#         param.requires_grad = False", "\n", "\n", "#     for param in self.layer1.parameters():", "\n", "#         param.requires_grad = False", "\n", "\n", "#     for param in self.layer2.parameters():", "\n", "#         param.requires_grad = False", "\n", "\n", "#     for param in self.layer3.parameters():", "\n", "#         param.requires_grad = False", "\n", "\n", "\n", "# def set_bn_eval(self, module):", "\n", "#     if isinstance(module, torch.nn.modules.batchnorm._BatchNorm):", "\n", "#         module.eval()", "\n", "\n", "# def train(self, mode=True):", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNetFeature.conv3x3": [[20, 24], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassAwareSampler.RandomCycleIter.__init__": [[26, 31], ["list", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "test_mode", "=", "False", ")", ":", "\n", "        ", "self", ".", "data_list", "=", "list", "(", "data", ")", "\n", "self", ".", "length", "=", "len", "(", "self", ".", "data_list", ")", "\n", "self", ".", "i", "=", "self", ".", "length", "-", "1", "\n", "self", ".", "test_mode", "=", "test_mode", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassAwareSampler.RandomCycleIter.__iter__": [[32, 34], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassAwareSampler.RandomCycleIter.__next__": [[35, 44], ["random.shuffle"], "methods", ["None"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "self", ".", "i", "+=", "1", "\n", "\n", "if", "self", ".", "i", "==", "self", ".", "length", ":", "\n", "            ", "self", ".", "i", "=", "0", "\n", "if", "not", "self", ".", "test_mode", ":", "\n", "                ", "random", ".", "shuffle", "(", "self", ".", "data_list", ")", "\n", "\n", "", "", "return", "self", ".", "data_list", "[", "self", ".", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassAwareSampler.ClassAwareSampler.__init__": [[67, 76], ["len", "ClassAwareSampler.RandomCycleIter", "enumerate", "numpy.unique", "range", "list", "cls_data_list[].append", "ClassAwareSampler.RandomCycleIter", "max", "len", "range", "len"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max"], ["    ", "def", "__init__", "(", "self", ",", "data_source", ",", "num_samples_cls", "=", "1", ",", ")", ":", "\n", "        ", "num_classes", "=", "len", "(", "np", ".", "unique", "(", "data_source", ".", "labels", ")", ")", "\n", "self", ".", "class_iter", "=", "RandomCycleIter", "(", "range", "(", "num_classes", ")", ")", "\n", "cls_data_list", "=", "[", "list", "(", ")", "for", "_", "in", "range", "(", "num_classes", ")", "]", "\n", "for", "i", ",", "label", "in", "enumerate", "(", "data_source", ".", "labels", ")", ":", "\n", "            ", "cls_data_list", "[", "label", "]", ".", "append", "(", "i", ")", "\n", "", "self", ".", "data_iter_list", "=", "[", "RandomCycleIter", "(", "x", ")", "for", "x", "in", "cls_data_list", "]", "\n", "self", ".", "num_samples", "=", "max", "(", "[", "len", "(", "x", ")", "for", "x", "in", "cls_data_list", "]", ")", "*", "len", "(", "cls_data_list", ")", "\n", "self", ".", "num_samples_cls", "=", "num_samples_cls", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassAwareSampler.ClassAwareSampler.__iter__": [[77, 80], ["ClassAwareSampler.class_aware_sample_generator"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassAwareSampler.class_aware_sample_generator"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "class_aware_sample_generator", "(", "self", ".", "class_iter", ",", "self", ".", "data_iter_list", ",", "\n", "self", ".", "num_samples", ",", "self", ".", "num_samples_cls", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassAwareSampler.ClassAwareSampler.__len__": [[81, 83], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassAwareSampler.class_aware_sample_generator": [[45, 64], ["next", "zip", "next"], "function", ["None"], ["", "", "def", "class_aware_sample_generator", "(", "cls_iter", ",", "data_iter_list", ",", "n", ",", "num_samples_cls", "=", "1", ")", ":", "\n", "\n", "    ", "i", "=", "0", "\n", "j", "=", "0", "\n", "while", "i", "<", "n", ":", "\n", "\n", "#         yield next(data_iter_list[next(cls_iter)])", "\n", "\n", "        ", "if", "j", ">=", "num_samples_cls", ":", "\n", "            ", "j", "=", "0", "\n", "\n", "", "if", "j", "==", "0", ":", "\n", "            ", "temp_tuple", "=", "next", "(", "zip", "(", "*", "[", "data_iter_list", "[", "next", "(", "cls_iter", ")", "]", "]", "*", "num_samples_cls", ")", ")", "\n", "yield", "temp_tuple", "[", "j", "]", "\n", "", "else", ":", "\n", "            ", "yield", "temp_tuple", "[", "j", "]", "\n", "\n", "", "i", "+=", "1", "\n", "j", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassAwareSampler.get_sampler": [[84, 86], ["None"], "function", ["None"], ["", "", "def", "get_sampler", "(", ")", ":", "\n", "    ", "return", "ClassAwareSampler", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.RandomCycleIter.__init__": [[16, 21], ["list", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data", ",", "test_mode", "=", "False", ")", ":", "\n", "        ", "self", ".", "data_list", "=", "list", "(", "data", ")", "\n", "self", ".", "length", "=", "len", "(", "self", ".", "data_list", ")", "\n", "self", ".", "i", "=", "self", ".", "length", "-", "1", "\n", "self", ".", "test_mode", "=", "test_mode", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.RandomCycleIter.__iter__": [[22, 24], ["None"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.RandomCycleIter.__next__": [[25, 34], ["random.shuffle"], "methods", ["None"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "self", ".", "i", "+=", "1", "\n", "\n", "if", "self", ".", "i", "==", "self", ".", "length", ":", "\n", "            ", "self", ".", "i", "=", "0", "\n", "if", "not", "self", ".", "test_mode", ":", "\n", "                ", "random", ".", "shuffle", "(", "self", ".", "data_list", ")", "\n", "\n", "", "", "return", "self", ".", "data_list", "[", "self", ".", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.PriorityTree.__init__": [[37, 53], ["numpy.zeros", "ClassPrioritySampler.PriorityTree.initialize", "len", "numpy.zeros", "len"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.initialize"], ["    ", "def", "__init__", "(", "self", ",", "capacity", ",", "init_weights", ",", "fixed_weights", "=", "None", ",", "fixed_scale", "=", "1.0", ",", "\n", "alpha", "=", "1.0", ")", ":", "\n", "        ", "\"\"\"\n        fixed_weights: weights that wont be updated by self.update()\n        \"\"\"", "\n", "assert", "fixed_weights", "is", "None", "or", "len", "(", "fixed_weights", ")", "==", "capacity", "\n", "assert", "len", "(", "init_weights", ")", "==", "capacity", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "_capacity", "=", "capacity", "\n", "self", ".", "_tree_size", "=", "2", "*", "capacity", "-", "1", "\n", "self", ".", "fixed_scale", "=", "fixed_scale", "\n", "self", ".", "fixed_weights", "=", "np", ".", "zeros", "(", "self", ".", "_capacity", ")", "if", "fixed_weights", "is", "None", "else", "fixed_weights", "\n", "self", ".", "tree", "=", "np", ".", "zeros", "(", "self", ".", "_tree_size", ")", "\n", "self", ".", "_initialized", "=", "False", "\n", "self", ".", "initialize", "(", "init_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.PriorityTree.initialize": [[54, 67], ["print", "ClassPrioritySampler.PriorityTree.update_whole", "ClassPrioritySampler.PriorityTree.fixed_weights.sum", "init_weights.sum", "init_weights.sum", "ClassPrioritySampler.PriorityTree.fixed_weights.sum", "ClassPrioritySampler.PriorityTree.fixed_weights.sum", "ClassPrioritySampler.PriorityTree.fixed_weights.sum", "init_weights.sum"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.update_whole"], ["", "def", "initialize", "(", "self", ",", "init_weights", ")", ":", "\n", "        ", "\"\"\"Initialize the tree.\"\"\"", "\n", "\n", "# Rescale the fixed_weights if it is not zero", "\n", "self", ".", "fixed_scale_init", "=", "self", ".", "fixed_scale", "\n", "if", "self", ".", "fixed_weights", ".", "sum", "(", ")", ">", "0", "and", "init_weights", ".", "sum", "(", ")", ">", "0", ":", "\n", "            ", "self", ".", "fixed_scale_init", "*=", "init_weights", ".", "sum", "(", ")", "/", "self", ".", "fixed_weights", ".", "sum", "(", ")", "\n", "self", ".", "fixed_weights", "*=", "self", ".", "fixed_scale", "*", "init_weights", ".", "sum", "(", ")", "/", "self", ".", "fixed_weights", ".", "sum", "(", ")", "\n", "", "print", "(", "'FixedWeights: {}'", ".", "format", "(", "self", ".", "fixed_weights", ".", "sum", "(", ")", ")", ")", "\n", "\n", "self", ".", "update_whole", "(", "init_weights", "+", "self", ".", "fixed_weights", ")", "\n", "self", ".", "_initialized", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.PriorityTree.reset_adaptive_weights": [[68, 70], ["ClassPrioritySampler.PriorityTree.update_whole"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.update_whole"], ["", "def", "reset_adaptive_weights", "(", "self", ",", "adaptive_weights", ")", ":", "\n", "        ", "self", ".", "update_whole", "(", "self", ".", "fixed_weights", "+", "adaptive_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.PriorityTree.reset_fixed_weights": [[71, 89], ["ClassPrioritySampler.PriorityTree.get_adaptive_weights", "fixed_weights.sum", "ClassPrioritySampler.PriorityTree.update_whole", "ClassPrioritySampler.PriorityTree.fixed_weights.sum", "ClassPrioritySampler.PriorityTree.sum"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.get_adaptive_weights", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.update_whole"], ["", "def", "reset_fixed_weights", "(", "self", ",", "fixed_weights", ",", "rescale", "=", "False", ")", ":", "\n", "        ", "\"\"\" Reset the manually designed weights and \n            update the whole tree accordingly.\n\n            @rescale: rescale the fixed_weights such that \n            fixed_weights.sum() = self.fixed_scale * adaptive_weights.sum()\n        \"\"\"", "\n", "\n", "adaptive_weights", "=", "self", ".", "get_adaptive_weights", "(", ")", "\n", "fixed_sum", "=", "fixed_weights", ".", "sum", "(", ")", "\n", "if", "rescale", "and", "fixed_sum", ">", "0", ":", "\n", "# Rescale fixedweight based on adaptive weights", "\n", "            ", "scale", "=", "self", ".", "fixed_scale", "*", "adaptive_weights", ".", "sum", "(", ")", "/", "fixed_sum", "\n", "", "else", ":", "\n", "# Rescale fixedweight based on previous fixedweight", "\n", "            ", "scale", "=", "self", ".", "fixed_weights", ".", "sum", "(", ")", "/", "fixed_sum", "\n", "", "self", ".", "fixed_weights", "=", "fixed_weights", "*", "scale", "\n", "self", ".", "update_whole", "(", "self", ".", "fixed_weights", "+", "adaptive_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.PriorityTree.update_whole": [[90, 106], ["ClassPrioritySampler.PriorityTree.pointer_to_treeidx", "ClassPrioritySampler.PriorityTree.pointer_to_treeidx", "numpy.power", "range"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.pointer_to_treeidx", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.pointer_to_treeidx"], ["", "def", "update_whole", "(", "self", ",", "total_weights", ")", ":", "\n", "        ", "\"\"\" Update the whole tree based on per-example sampling weights \"\"\"", "\n", "if", "self", ".", "alpha", "!=", "1", ":", "\n", "            ", "total_weights", "=", "np", ".", "power", "(", "total_weights", ",", "self", ".", "alpha", ")", "\n", "", "lefti", "=", "self", ".", "pointer_to_treeidx", "(", "0", ")", "\n", "righti", "=", "self", ".", "pointer_to_treeidx", "(", "self", ".", "capacity", "-", "1", ")", "\n", "self", ".", "tree", "[", "lefti", ":", "righti", "+", "1", "]", "=", "total_weights", "\n", "\n", "# Iteratively find a parent layer", "\n", "while", "lefti", "!=", "0", "and", "righti", "!=", "0", ":", "\n", "            ", "lefti", "=", "(", "lefti", "-", "1", ")", "//", "2", "if", "lefti", "!=", "0", "else", "0", "\n", "righti", "=", "(", "righti", "-", "1", ")", "//", "2", "if", "righti", "!=", "0", "else", "0", "\n", "\n", "# Assign paraent weights from right to left", "\n", "for", "i", "in", "range", "(", "righti", ",", "lefti", "-", "1", ",", "-", "1", ")", ":", "\n", "                ", "self", ".", "tree", "[", "i", "]", "=", "self", ".", "tree", "[", "2", "*", "i", "+", "1", "]", "+", "self", ".", "tree", "[", "2", "*", "i", "+", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.PriorityTree.get_adaptive_weights": [[107, 113], ["ClassPrioritySampler.PriorityTree.get_total_weights", "ClassPrioritySampler.PriorityTree.get_raw_total_weights"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.get_total_weights", "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.PriorityTree.get_raw_total_weights"], ["", "", "", "def", "get_adaptive_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\" Get the instance-aware weights, that are not mannually designed\"\"\"", "\n", "if", "self", ".", "alpha", "==", "1", ":", "\n", "            ", "return", "self", ".", "get_total_weights", "(", ")", "-", "self", ".", "fixed_weights", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "get_raw_total_weights", "(", ")", "-", "self", ".", "fixed_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.PriorityTree.get_total_weights": [[114, 121], ["ClassPrioritySampler.PriorityTree.pointer_to_treeidx", "ClassPrioritySampler.PriorityTree.pointer_to_treeidx"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.pointer_to_treeidx", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.pointer_to_treeidx"], ["", "", "def", "get_total_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\" Get the per-example sampling weights\n            return shape: [capacity]\n        \"\"\"", "\n", "lefti", "=", "self", ".", "pointer_to_treeidx", "(", "0", ")", "\n", "righti", "=", "self", ".", "pointer_to_treeidx", "(", "self", ".", "capacity", "-", "1", ")", "\n", "return", "self", ".", "tree", "[", "lefti", ":", "righti", "+", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.PriorityTree.get_raw_total_weights": [[122, 129], ["ClassPrioritySampler.PriorityTree.pointer_to_treeidx", "ClassPrioritySampler.PriorityTree.pointer_to_treeidx", "numpy.power"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.pointer_to_treeidx", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.pointer_to_treeidx"], ["", "def", "get_raw_total_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\" Get the per-example sampling weights\n            return shape: [capacity]\n        \"\"\"", "\n", "lefti", "=", "self", ".", "pointer_to_treeidx", "(", "0", ")", "\n", "righti", "=", "self", ".", "pointer_to_treeidx", "(", "self", ".", "capacity", "-", "1", ")", "\n", "return", "np", ".", "power", "(", "self", ".", "tree", "[", "lefti", ":", "righti", "+", "1", "]", ",", "1", "/", "self", ".", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.PriorityTree.size": [[130, 133], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_tree_size", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.PriorityTree.capacity": [[134, 137], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "capacity", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_capacity", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.PriorityTree.__len__": [[138, 140], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "capacity", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.PriorityTree.pointer_to_treeidx": [[141, 144], ["int"], "methods", ["None"], ["", "def", "pointer_to_treeidx", "(", "self", ",", "pointer", ")", ":", "\n", "        ", "assert", "pointer", "<", "self", ".", "capacity", "\n", "return", "int", "(", "pointer", "+", "self", ".", "capacity", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.PriorityTree.update": [[145, 156], ["ClassPrioritySampler.PriorityTree.pointer_to_treeidx", "numpy.power"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.pointer_to_treeidx"], ["", "def", "update", "(", "self", ",", "pointer", ",", "priority", ")", ":", "\n", "        ", "assert", "pointer", "<", "self", ".", "capacity", "\n", "tree_idx", "=", "self", ".", "pointer_to_treeidx", "(", "pointer", ")", "\n", "priority", "+=", "self", ".", "fixed_weights", "[", "pointer", "]", "\n", "if", "self", ".", "alpha", "!=", "1", ":", "\n", "            ", "priority", "=", "np", ".", "power", "(", "priority", ",", "self", ".", "alpha", ")", "\n", "", "delta", "=", "priority", "-", "self", ".", "tree", "[", "tree_idx", "]", "\n", "self", ".", "tree", "[", "tree_idx", "]", "=", "priority", "\n", "while", "tree_idx", "!=", "0", ":", "\n", "            ", "tree_idx", "=", "(", "tree_idx", "-", "1", ")", "//", "2", "\n", "self", ".", "tree", "[", "tree_idx", "]", "+=", "delta", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.PriorityTree.update_delta": [[157, 174], ["ClassPrioritySampler.PriorityTree.pointer_to_treeidx", "pdb.set_trace", "numpy.power", "numpy.power", "numpy.power"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.pointer_to_treeidx"], ["", "", "def", "update_delta", "(", "self", ",", "pointer", ",", "delta", ")", ":", "\n", "        ", "assert", "pointer", "<", "self", ".", "capacity", "\n", "tree_idx", "=", "self", ".", "pointer_to_treeidx", "(", "pointer", ")", "\n", "ratio", "=", "1", "-", "self", ".", "fixed_weights", "[", "pointer", "]", "/", "self", ".", "tree", "[", "tree_idx", "]", "\n", "# delta *= ratio", "\n", "if", "self", ".", "alpha", "!=", "1", ":", "\n", "# Update delta", "\n", "            ", "if", "self", ".", "tree", "[", "tree_idx", "]", "<", "0", "or", "np", ".", "power", "(", "self", ".", "tree", "[", "tree_idx", "]", ",", "1", "/", "self", ".", "alpha", ")", "+", "delta", "<", "0", ":", "\n", "                ", "import", "pdb", ";", "pdb", ".", "set_trace", "(", ")", "\n", "", "delta", "=", "np", ".", "power", "(", "np", ".", "power", "(", "self", ".", "tree", "[", "tree_idx", "]", ",", "1", "/", "self", ".", "alpha", ")", "+", "delta", ",", "\n", "self", ".", "alpha", ")", "-", "self", ".", "tree", "[", "tree_idx", "]", "\n", "", "self", ".", "tree", "[", "tree_idx", "]", "+=", "delta", "\n", "while", "tree_idx", "!=", "0", ":", "\n", "            ", "tree_idx", "=", "(", "tree_idx", "-", "1", ")", "//", "2", "\n", "self", ".", "tree", "[", "tree_idx", "]", "+=", "delta", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.PriorityTree.get_leaf": [[175, 192], ["len"], "methods", ["None"], ["", "", "def", "get_leaf", "(", "self", ",", "value", ")", ":", "\n", "        ", "assert", "self", ".", "_initialized", ",", "'PriorityTree not initialized!!!!'", "\n", "assert", "self", ".", "total", ">", "0", ",", "'No priority weights setted!!'", "\n", "parent", "=", "0", "\n", "while", "True", ":", "\n", "            ", "left_child", "=", "2", "*", "parent", "+", "1", "\n", "right_child", "=", "2", "*", "parent", "+", "2", "\n", "if", "left_child", ">=", "len", "(", "self", ".", "tree", ")", ":", "\n", "                ", "tgt_leaf", "=", "parent", "\n", "break", "\n", "", "if", "value", "<", "self", ".", "tree", "[", "left_child", "]", ":", "\n", "                ", "parent", "=", "left_child", "\n", "", "else", ":", "\n", "                ", "value", "-=", "self", ".", "tree", "[", "left_child", "]", "\n", "parent", "=", "right_child", "\n", "", "", "data_idx", "=", "tgt_leaf", "-", "self", ".", "capacity", "+", "1", "\n", "return", "data_idx", ",", "self", ".", "tree", "[", "tgt_leaf", "]", "# data idx, priority", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.PriorityTree.total": [[193, 197], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "total", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "_initialized", ",", "'PriorityTree not initialized!!!!'", "\n", "return", "self", ".", "tree", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.PriorityTree.max": [[198, 201], ["numpy.max"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max"], ["", "@", "property", "\n", "def", "max", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "max", "(", "self", ".", "tree", "[", "-", "self", ".", "capacity", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.PriorityTree.min": [[202, 206], ["numpy.min"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.min"], ["", "@", "property", "\n", "def", "min", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "_initialized", ",", "'PriorityTree not initialized!!!!'", "\n", "return", "np", ".", "min", "(", "self", ".", "tree", "[", "-", "self", ".", "capacity", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.PriorityTree.get_weights": [[207, 215], ["ClassPrioritySampler.PriorityTree.get_total_weights", "wdict.update", "ClassPrioritySampler.PriorityTree.get_raw_total_weights"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.get_total_weights", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.PriorityTree.get_raw_total_weights"], ["", "def", "get_weights", "(", "self", ")", ":", "\n", "        ", "wdict", "=", "{", "'fixed_weights'", ":", "self", ".", "fixed_weights", ",", "\n", "'total_weights'", ":", "self", ".", "get_total_weights", "(", ")", "}", "\n", "if", "self", ".", "alpha", "!=", "1", ":", "\n", "            ", "wdict", ".", "update", "(", "{", "'raw_total_weights'", ":", "self", ".", "get_raw_total_weights", "(", ")", ",", "\n", "'alpha'", ":", "self", ".", "alpha", "}", ")", "\n", "\n", "", "return", "wdict", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.ClassPrioritySampler.__init__": [[264, 373], ["len", "print", "numpy.array", "numpy.unique", "len", "numpy.array().astype", "enumerate", "range", "ClassPrioritySampler.ClassPrioritySampler.get_balanced_weights", "ClassPrioritySampler.ClassPrioritySampler.get_uniform_weights", "ClassPrioritySampler.ClassPrioritySampler.get_manual_weights", "ClassPrioritySampler.ClassPrioritySampler.get_cls_ratios", "ClassPrioritySampler.ClassPrioritySampler.broadcast", "numpy.zeros", "ClassPrioritySampler.PriorityTree", "ClassPrioritySampler.ClassPrioritySampler.cls_cnts.append", "ClassPrioritySampler.ClassPrioritySampler.cls_idxs[].append", "ClassPrioritySampler.RandomCycleIter", "numpy.array", "numpy.ones", "ClassPrioritySampler.ClassPrioritySampler.manual_weights.copy", "numpy.power", "numpy.linspace", "numpy.sum", "numpy.array", "range", "NotImplementedError", "numpy.concatenate", "numpy.concatenate", "NotImplementedError", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.MixedPrioritizedSampler.get_balanced_weights", "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.ClassPrioritySampler.get_uniform_weights", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.MixedPrioritizedSampler.get_manual_weights", "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.ClassPrioritySampler.get_cls_ratios", "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.ClassPrioritySampler.broadcast"], ["def", "__init__", "(", "self", ",", "dataset", ",", "balance_scale", "=", "1.0", ",", "fixed_scale", "=", "1.0", ",", "\n", "lam", "=", "None", ",", "epochs", "=", "90", ",", "cycle", "=", "0", ",", "nroot", "=", "None", ",", "manual_only", "=", "False", ",", "\n", "rescale", "=", "False", ",", "root_decay", "=", "None", ",", "decay_gap", "=", "30", ",", "ptype", "=", "'score'", ",", "\n", "pri_mode", "=", "'train'", ",", "momentum", "=", "0.", ",", "alpha", "=", "1.0", ")", ":", "\n", "        ", "\"\"\"\n        \"\"\"", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "balance_scale", "=", "balance_scale", "\n", "self", ".", "fixed_scale", "=", "fixed_scale", "\n", "self", ".", "epochs", "=", "epochs", "\n", "self", ".", "lam", "=", "lam", "\n", "self", ".", "cycle", "=", "cycle", "\n", "self", ".", "nroot", "=", "nroot", "\n", "self", ".", "rescale", "=", "rescale", "\n", "self", ".", "manual_only", "=", "manual_only", "\n", "self", ".", "root_decay", "=", "root_decay", "\n", "self", ".", "decay_gap", "=", "decay_gap", "\n", "self", ".", "ptype", "=", "ptype", "\n", "self", ".", "pri_mode", "=", "pri_mode", "\n", "self", ".", "num_samples", "=", "len", "(", "dataset", ")", "\n", "self", ".", "manual_as_backend", "=", "False", "\n", "self", ".", "momentum", "=", "momentum", "\n", "self", ".", "alpha", "=", "alpha", "\n", "\n", "assert", "0.", "<=", "self", ".", "momentum", "<=", "1.0", "\n", "assert", "0.", "<=", "self", ".", "alpha", "\n", "\n", "# Change the backend distribution of priority if needed", "\n", "if", "self", ".", "fixed_scale", "<", "0", ":", "\n", "            ", "self", ".", "fixed_scale", "=", "0", "\n", "self", ".", "manual_as_backend", "=", "True", "\n", "\n", "# If using root_decay, reset relevent parameters", "\n", "", "if", "self", ".", "root_decay", "in", "[", "'exp'", ",", "'linear'", ",", "'autoexp'", "]", ":", "\n", "            ", "self", ".", "lam", "=", "1", "\n", "self", ".", "manual_only", "=", "True", "\n", "self", ".", "nroot", "=", "1", "\n", "if", "self", ".", "root_decay", "==", "'autoexp'", ":", "\n", "                ", "self", ".", "decay_gap", "=", "1", "\n", "self", ".", "decay_factor", "=", "np", ".", "power", "(", "nroot", ",", "1", "/", "(", "self", ".", "epochs", "-", "1", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "assert", "self", ".", "root_decay", "is", "None", "\n", "assert", "self", ".", "nroot", "is", "None", "or", "self", ".", "nroot", ">", "1", "\n", "", "print", "(", "\"====> Decay GAP: {}\"", ".", "format", "(", "self", ".", "decay_gap", ")", ")", "\n", "\n", "# Take care of lambdas", "\n", "self", ".", "freeze", "=", "True", "\n", "if", "self", ".", "lam", "is", "None", ":", "\n", "            ", "self", ".", "freeze", "=", "False", "\n", "if", "cycle", "==", "0", ":", "\n", "                ", "self", ".", "lams", "=", "np", ".", "linspace", "(", "0", ",", "1", ",", "epochs", ")", "\n", "", "elif", "cycle", "==", "1", ":", "\n", "                ", "self", ".", "lams", "=", "np", ".", "concatenate", "(", "[", "np", ".", "linspace", "(", "0", ",", "1", ",", "epochs", "//", "3", ")", "]", "*", "3", ")", "\n", "", "elif", "cycle", "==", "2", ":", "\n", "                ", "self", ".", "lams", "=", "np", ".", "concatenate", "(", "[", "np", ".", "linspace", "(", "0", ",", "1", ",", "epochs", "//", "3", ")", ",", "\n", "np", ".", "linspace", "(", "0", ",", "1", ",", "epochs", "//", "3", ")", "[", ":", ":", "-", "1", "]", ",", "\n", "np", ".", "linspace", "(", "0", ",", "1", ",", "epochs", "//", "3", ")", "]", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "\n", "'cycle = {} not implemented'", ".", "format", "(", "cycle", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "lams", "=", "[", "self", ".", "lam", "]", "\n", "\n", "# Get num of samples per class", "\n", "", "self", ".", "cls_cnts", "=", "[", "]", "\n", "self", ".", "labels", "=", "labels", "=", "np", ".", "array", "(", "self", ".", "dataset", ".", "labels", ")", "\n", "for", "l", "in", "np", ".", "unique", "(", "labels", ")", ":", "\n", "            ", "self", ".", "cls_cnts", ".", "append", "(", "np", ".", "sum", "(", "labels", "==", "l", ")", ")", "\n", "", "self", ".", "num_classes", "=", "len", "(", "self", ".", "cls_cnts", ")", "\n", "self", ".", "cnts", "=", "np", ".", "array", "(", "self", ".", "cls_cnts", ")", ".", "astype", "(", "float", ")", "\n", "\n", "# Get per-class image indexes", "\n", "self", ".", "cls_idxs", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_classes", ")", "]", "\n", "for", "i", ",", "label", "in", "enumerate", "(", "self", ".", "dataset", ".", "labels", ")", ":", "\n", "            ", "self", ".", "cls_idxs", "[", "label", "]", ".", "append", "(", "i", ")", "\n", "", "self", ".", "data_iter_list", "=", "[", "RandomCycleIter", "(", "x", ")", "for", "x", "in", "self", ".", "cls_idxs", "]", "\n", "for", "ci", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "            ", "self", ".", "cls_idxs", "[", "ci", "]", "=", "np", ".", "array", "(", "self", ".", "cls_idxs", "[", "ci", "]", ")", "\n", "\n", "# Build balanced weights based on class counts ", "\n", "", "self", ".", "balanced_weights", "=", "self", ".", "get_balanced_weights", "(", "self", ".", "nroot", ")", "\n", "self", ".", "uniform_weights", "=", "self", ".", "get_uniform_weights", "(", ")", "\n", "self", ".", "manual_weights", "=", "self", ".", "get_manual_weights", "(", "self", ".", "lams", "[", "0", "]", ")", "\n", "\n", "# back_weights = self.get_balanced_weights(1.5)", "\n", "back_weights", "=", "self", ".", "uniform_weights", "\n", "\n", "# Calculate priority ratios that reshape priority into target distribution", "\n", "self", ".", "per_cls_ratios", "=", "self", ".", "get_cls_ratios", "(", "\n", "self", ".", "manual_weights", "if", "self", ".", "manual_as_backend", "else", "back_weights", ")", "\n", "self", ".", "per_example_ratios", "=", "self", ".", "broadcast", "(", "self", ".", "per_cls_ratios", ")", "\n", "\n", "# Setup priority tree", "\n", "if", "self", ".", "ptype", "==", "'score'", ":", "\n", "            ", "self", ".", "init_weight", "=", "1.", "\n", "", "elif", "self", ".", "ptype", "in", "[", "'CE'", ",", "'entropy'", "]", ":", "\n", "            ", "self", ".", "init_weight", "=", "6.9", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'ptype {} not implemented'", ".", "format", "(", "self", ".", "ptype", ")", ")", "\n", "", "if", "self", ".", "manual_only", ":", "\n", "            ", "self", ".", "init_weight", "=", "0.", "\n", "", "self", ".", "per_example_uni_weights", "=", "np", ".", "ones", "(", "self", ".", "num_samples", ")", "*", "self", ".", "init_weight", "\n", "self", ".", "per_example_velocities", "=", "np", ".", "zeros", "(", "self", ".", "num_samples", ")", "\n", "# init_priorities = np.power(self.init_weight, self.alpha) \\", "\n", "#                 * self.uniform_weights * self.per_cls_ratios", "\n", "init_priorities", "=", "self", ".", "init_weight", "*", "self", ".", "uniform_weights", "*", "self", ".", "per_cls_ratios", "\n", "self", ".", "ptree", "=", "PriorityTree", "(", "self", ".", "num_classes", ",", "init_priorities", ",", "\n", "self", ".", "manual_weights", ".", "copy", "(", ")", ",", "fixed_scale", "=", "self", ".", "fixed_scale", ",", "\n", "alpha", "=", "self", ".", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.ClassPrioritySampler.get_cls_ratios": [[374, 380], ["numpy.ones_like", "ClassPrioritySampler.ClassPrioritySampler.uniform_weights.sum", "tgt_weights.sum"], "methods", ["None"], ["", "def", "get_cls_ratios", "(", "self", ",", "tgt_weights", ")", ":", "\n", "        ", "if", "tgt_weights", "is", "self", ".", "uniform_weights", ":", "\n", "            ", "return", "np", ".", "ones_like", "(", "self", ".", "uniform_weights", ")", "\n", "", "per_cls_ratios", "=", "tgt_weights", "/", "self", ".", "uniform_weights", "\n", "per_cls_ratios", "*=", "self", ".", "uniform_weights", ".", "sum", "(", ")", "/", "tgt_weights", ".", "sum", "(", ")", "\n", "return", "per_cls_ratios", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.ClassPrioritySampler.get_cls_weights": [[381, 384], ["ClassPrioritySampler.ClassPrioritySampler.debroadcast_sum"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.ClassPrioritySampler.debroadcast_sum"], ["", "def", "get_cls_weights", "(", "self", ")", ":", "\n", "        ", "ratioed_ws", "=", "self", ".", "per_example_uni_weights", "*", "self", ".", "per_example_ratios", "\n", "return", "self", ".", "debroadcast_sum", "(", "ratioed_ws", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.ClassPrioritySampler.broadcast": [[385, 391], ["numpy.zeros", "range"], "methods", ["None"], ["", "def", "broadcast", "(", "self", ",", "per_cls_info", ")", ":", "\n", "        ", "per_exmaple_info", "=", "np", ".", "zeros", "(", "self", ".", "num_samples", ")", "\n", "# Braodcast per-cls info to each example ", "\n", "for", "ci", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "            ", "per_exmaple_info", "[", "self", ".", "cls_idxs", "[", "ci", "]", "]", "=", "per_cls_info", "[", "ci", "]", "\n", "", "return", "per_exmaple_info", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.ClassPrioritySampler.debroadcast_sum": [[392, 398], ["numpy.zeros", "range", "per_example_info[].sum"], "methods", ["None"], ["", "def", "debroadcast_sum", "(", "self", ",", "per_example_info", ")", ":", "\n", "        ", "per_cls_info", "=", "np", ".", "zeros", "(", "self", ".", "num_classes", ")", "\n", "# DeBraodcast per-example info to each cls by summation ", "\n", "for", "ci", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "            ", "per_cls_info", "[", "ci", "]", "=", "per_example_info", "[", "self", ".", "cls_idxs", "[", "ci", "]", "]", ".", "sum", "(", ")", "\n", "", "return", "per_cls_info", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.ClassPrioritySampler.get_manual_weights": [[399, 408], ["ClassPrioritySampler.ClassPrioritySampler.balanced_weights.copy", "ClassPrioritySampler.ClassPrioritySampler.uniform_weights.copy"], "methods", ["None"], ["", "def", "get_manual_weights", "(", "self", ",", "lam", ")", ":", "\n", "# Merge balanced weights and uniform weights ", "\n", "        ", "if", "lam", "==", "1", ":", "\n", "            ", "manual_weights", "=", "self", ".", "balanced_weights", ".", "copy", "(", ")", "\n", "", "elif", "lam", "==", "0", ":", "\n", "            ", "manual_weights", "=", "self", ".", "uniform_weights", ".", "copy", "(", ")", "\n", "", "else", ":", "\n", "            ", "manual_weights", "=", "self", ".", "balanced_weights", "*", "lam", "+", "(", "1", "-", "lam", ")", "*", "self", ".", "uniform_weights", "\n", "", "return", "manual_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.ClassPrioritySampler.get_uniform_weights": [[409, 411], ["ClassPrioritySampler.ClassPrioritySampler.cnts.copy"], "methods", ["None"], ["", "def", "get_uniform_weights", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "cnts", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.ClassPrioritySampler.get_balanced_weights": [[412, 436], ["numpy.ones", "len", "NotImplementedError", "balanced_weights.sum", "cnts.sum", "numpy.power", "cnts.sum"], "methods", ["None"], ["", "def", "get_balanced_weights", "(", "self", ",", "nroot", ")", ":", "\n", "        ", "\"\"\" Calculate normalized generalized balanced weights \"\"\"", "\n", "\n", "cnts", "=", "self", ".", "cnts", "\n", "if", "nroot", "is", "None", ":", "\n", "# Real balanced sampling weights, each class has the same weights", "\n", "# Un-normalized !!!", "\n", "            ", "cls_ws", "=", "np", ".", "ones", "(", "len", "(", "cnts", ")", ")", "\n", "", "elif", "nroot", ">=", "1", ":", "\n", "# Generalized balanced weights", "\n", "# Un-normalized !!!", "\n", "            ", "cls_ws", "=", "cnts", "/", "cnts", ".", "sum", "(", ")", "\n", "cls_ws", "=", "np", ".", "power", "(", "cls_ws", ",", "1.", "/", "nroot", ")", "*", "cnts", ".", "sum", "(", ")", "\n", "cls_ws", "=", "cls_ws", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'root:{} not implemented'", ".", "format", "(", "nroot", ")", ")", "\n", "\n", "# Get un-normalized weights", "\n", "", "balanced_weights", "=", "cls_ws", "\n", "\n", "# Normalization and rescale", "\n", "balanced_weights", "*=", "self", ".", "num_samples", "/", "balanced_weights", ".", "sum", "(", ")", "*", "self", ".", "balance_scale", "\n", "return", "balanced_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.ClassPrioritySampler.__iter__": [[437, 442], ["range", "ClassPrioritySampler.ClassPrioritySampler.ptree.get_leaf", "random.random", "next"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.get_leaf"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "_", "in", "range", "(", "self", ".", "num_samples", ")", ":", "\n", "            ", "w", "=", "random", ".", "random", "(", ")", "*", "self", ".", "ptree", ".", "total", "\n", "ci", ",", "pri", "=", "self", ".", "ptree", ".", "get_leaf", "(", "w", ")", "\n", "yield", "next", "(", "self", ".", "data_iter_list", "[", "ci", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.ClassPrioritySampler.__len__": [[443, 445], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.ClassPrioritySampler.reset_weights": [[446, 473], ["numpy.clip", "ClassPrioritySampler.ClassPrioritySampler.get_manual_weights", "ClassPrioritySampler.ClassPrioritySampler.get_balanced_weights", "ClassPrioritySampler.ClassPrioritySampler.ptree.reset_fixed_weights", "ClassPrioritySampler.ClassPrioritySampler.update_backend_distribution", "ClassPrioritySampler.ClassPrioritySampler.update_backend_distribution", "ClassPrioritySampler.ClassPrioritySampler.ptree.reset_fixed_weights", "numpy.power"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.MixedPrioritizedSampler.get_manual_weights", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.MixedPrioritizedSampler.get_balanced_weights", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.reset_fixed_weights", "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.ClassPrioritySampler.update_backend_distribution", "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.ClassPrioritySampler.update_backend_distribution", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.reset_fixed_weights"], ["", "def", "reset_weights", "(", "self", ",", "epoch", ")", ":", "\n", "# If it is linear shifting ", "\n", "        ", "if", "not", "self", ".", "freeze", ":", "\n", "            ", "e", "=", "np", ".", "clip", "(", "epoch", ",", "0", ",", "self", ".", "epochs", "-", "1", ")", "\n", "self", ".", "manual_weights", "=", "self", ".", "get_manual_weights", "(", "self", ".", "lams", "[", "e", "]", ")", "\n", "# make sure 'self.fixed_scale > 0' and 'self.manual_as_backend = True' are ", "\n", "# mutually exclusive ", "\n", "if", "self", ".", "fixed_scale", ">", "0", ":", "\n", "                ", "self", ".", "ptree", ".", "reset_fixed_weights", "(", "self", ".", "manual_weights", ",", "self", ".", "rescale", ")", "\n", "", "if", "self", ".", "manual_as_backend", ":", "\n", "                ", "self", ".", "update_backend_distribution", "(", "self", ".", "manual_weights", ")", "\n", "\n", "# If it is root decay", "\n", "", "", "if", "self", ".", "root_decay", "in", "[", "'exp'", ",", "'linear'", ",", "'autoexp'", "]", "and", "epoch", "%", "self", ".", "decay_gap", "==", "0", ":", "\n", "            ", "if", "self", ".", "root_decay", "==", "'exp'", ":", "\n", "                ", "self", ".", "nroot", "*=", "2", "\n", "", "elif", "self", ".", "root_decay", "==", "'linear'", ":", "\n", "                ", "self", ".", "nroot", "+=", "1", "\n", "", "elif", "self", ".", "root_decay", "==", "'autoexp'", ":", "\n", "# self.nroot *= self.decay_factor", "\n", "                ", "self", ".", "nroot", "=", "np", ".", "power", "(", "self", ".", "decay_factor", ",", "epoch", ")", "\n", "\n", "", "bw", "=", "self", ".", "get_balanced_weights", "(", "self", ".", "nroot", ")", "\n", "if", "self", ".", "manual_as_backend", ":", "\n", "                ", "self", ".", "update_backend_distribution", "(", "bw", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "ptree", ".", "reset_fixed_weights", "(", "bw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.ClassPrioritySampler.update_backend_distribution": [[474, 483], ["ClassPrioritySampler.ClassPrioritySampler.get_cls_ratios", "ClassPrioritySampler.ClassPrioritySampler.broadcast", "ClassPrioritySampler.ClassPrioritySampler.get_cls_weights", "ClassPrioritySampler.ClassPrioritySampler.ptree.reset_adaptive_weights"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.ClassPrioritySampler.get_cls_ratios", "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.ClassPrioritySampler.broadcast", "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.ClassPrioritySampler.get_cls_weights", "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.PriorityTree.reset_adaptive_weights"], ["", "", "", "def", "update_backend_distribution", "(", "self", ",", "tgt_weights", ")", ":", "\n", "# Recalculate the cls ratios based on the given target distribution", "\n", "        ", "self", ".", "per_cls_ratios", "=", "self", ".", "get_cls_ratios", "(", "tgt_weights", ")", "\n", "self", ".", "per_example_ratios", "=", "self", ".", "broadcast", "(", "self", ".", "per_cls_ratios", ")", "\n", "\n", "# Recalculate the new per-class weights based on the new ratios", "\n", "# new_backend_weights = self.init_weight * self.uniform_weights * self.per_cls_ratios", "\n", "new_cls_weights", "=", "self", ".", "get_cls_weights", "(", ")", "\n", "self", ".", "ptree", ".", "reset_adaptive_weights", "(", "new_cls_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.ClassPrioritySampler.update_weights": [[484, 515], ["numpy.clip", "numpy.unique", "ClassPrioritySampler.ClassPrioritySampler.ptree.update_delta", "ClassPrioritySampler.ClassPrioritySampler.ptree.update", "delta.sum", "ClassPrioritySampler.ClassPrioritySampler.per_example_uni_weights[].sum"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.PriorityTree.update_delta", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update"], ["", "def", "update_weights", "(", "self", ",", "inds", ",", "weights", ",", "labels", ")", ":", "\n", "        ", "\"\"\" Update priority weights \"\"\"", "\n", "if", "not", "self", ".", "manual_only", "and", "self", ".", "pri_mode", "==", "'train'", ":", "\n", "            ", "weights", "=", "np", ".", "clip", "(", "weights", ",", "0", ",", "self", ".", "init_weight", ")", "\n", "\n", "# Iterate over all classes in the batch", "\n", "for", "l", "in", "np", ".", "unique", "(", "labels", ")", ":", "\n", "# Calculate per-class delta weights", "\n", "                ", "example_inds", "=", "inds", "[", "labels", "==", "l", "]", "\n", "last_weights", "=", "self", ".", "per_example_uni_weights", "[", "example_inds", "]", "\n", "# delta = np.power(weights[labels==l], self.alpha) - \\", "\n", "#         np.power(last_weights, self.alpha)", "\n", "delta", "=", "weights", "[", "labels", "==", "l", "]", "-", "last_weights", "\n", "delta", "=", "self", ".", "momentum", "*", "self", ".", "per_example_velocities", "[", "example_inds", "]", "+", "(", "1", "-", "self", ".", "momentum", ")", "*", "delta", "\n", "\n", "# Update velocities ", "\n", "self", ".", "per_example_velocities", "[", "example_inds", "]", "=", "delta", "\n", "# Update per-example weights ", "\n", "# self.per_example_uni_weights[example_inds] = weights[labels==l]", "\n", "self", ".", "per_example_uni_weights", "[", "example_inds", "]", "+=", "delta", "\n", "\n", "# Sacle the delta ", "\n", "# (ie, the per-example weights both before and after update)", "\n", "delta", "*=", "self", ".", "per_example_ratios", "[", "example_inds", "]", "\n", "\n", "# Update tree", "\n", "if", "self", ".", "alpha", "==", "1", ":", "\n", "                    ", "self", ".", "ptree", ".", "update_delta", "(", "l", ",", "delta", ".", "sum", "(", ")", ")", "\n", "", "else", ":", "\n", "                    ", "self", ".", "ptree", ".", "update", "(", "l", ",", "self", ".", "per_example_uni_weights", "[", "self", ".", "cls_idxs", "[", "l", "]", "]", ".", "sum", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.ClassPrioritySampler.reset_priority": [[517, 527], ["numpy.clip", "numpy.zeros", "numpy.unique", "ClassPrioritySampler.ClassPrioritySampler.ptree.reset_adaptive_weights", "len", "weights[].mean", "numpy.unique"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.PriorityTree.reset_adaptive_weights"], ["", "", "", "", "def", "reset_priority", "(", "self", ",", "weights", ",", "labels", ")", ":", "\n", "        ", "if", "self", ".", "pri_mode", "==", "'valid'", ":", "\n", "            ", "assert", "len", "(", "np", ".", "unique", "(", "labels", ")", ")", "==", "self", ".", "num_classes", "\n", "weights", "=", "np", ".", "clip", "(", "weights", ",", "0", ",", "self", ".", "init_weight", ")", "\n", "cls_weights", "=", "np", ".", "zeros", "(", "self", ".", "num_classes", ")", "\n", "for", "c", "in", "np", ".", "unique", "(", "labels", ")", ":", "\n", "                ", "cls_weights", "[", "c", "]", "=", "weights", "[", "labels", "==", "c", "]", ".", "mean", "(", ")", "\n", "", "cls_weights", "*=", "self", ".", "cnts", "\n", "cls_weights", "*=", "self", ".", "per_cls_ratios", "\n", "self", ".", "ptree", ".", "reset_adaptive_weights", "(", "cls_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.ClassPrioritySampler.get_weights": [[528, 530], ["ClassPrioritySampler.ClassPrioritySampler.ptree.get_weights"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.MixedPrioritizedSampler.get_weights"], ["", "", "def", "get_weights", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "ptree", ".", "get_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.get_sampler": [[532, 534], ["None"], "function", ["None"], ["", "", "def", "get_sampler", "(", ")", ":", "\n", "    ", "return", "ClassPrioritySampler", "\n", "", ""]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ImbalanceCIFAR.IMBALANCECIFAR10.__init__": [[15, 50], ["super().__init__", "print", "ImbalanceCIFAR.IMBALANCECIFAR10.get_img_num_per_cls", "ImbalanceCIFAR.IMBALANCECIFAR10.gen_imbalanced_data", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "torchvision.Compose", "ImbalanceCIFAR.IMBALANCECIFAR10.get_img_num_per_cls", "ImbalanceCIFAR.IMBALANCECIFAR10.gen_imbalanced_data", "ImbalanceCIFAR.IMBALANCECIFAR10.get_img_num_per_cls", "len", "torchvision.RandomCrop", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Normalize", "torchvision.ToTensor", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Normalize"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__", "home.repos.pwc.inspect_result.beierzhu_xerm.data.ImbalanceCIFAR.IMBALANCECIFAR10.get_img_num_per_cls", "home.repos.pwc.inspect_result.beierzhu_xerm.data.ImbalanceCIFAR.IMBALANCECIFAR10.gen_imbalanced_data", "home.repos.pwc.inspect_result.beierzhu_xerm.data.ImbalanceCIFAR.IMBALANCECIFAR10.get_img_num_per_cls", "home.repos.pwc.inspect_result.beierzhu_xerm.data.ImbalanceCIFAR.IMBALANCECIFAR10.gen_imbalanced_data", "home.repos.pwc.inspect_result.beierzhu_xerm.data.ImbalanceCIFAR.IMBALANCECIFAR10.get_img_num_per_cls"], ["class", "IMBALANCECIFAR10", "(", "torchvision", ".", "datasets", ".", "CIFAR10", ")", ":", "\n", "    ", "cls_num", "=", "10", "\n", "\n", "def", "__init__", "(", "self", ",", "phase", ",", "imbalance_ratio", ",", "root", "=", "'/gruntdata5/kaihua/datasets'", ",", "imb_type", "=", "'exp'", ")", ":", "\n", "        ", "train", "=", "True", "if", "phase", "==", "\"train\"", "else", "False", "\n", "super", "(", "IMBALANCECIFAR10", ",", "self", ")", ".", "__init__", "(", "root", ",", "train", ",", "transform", "=", "None", ",", "target_transform", "=", "None", ",", "download", "=", "True", ")", "\n", "self", ".", "train", "=", "train", "\n", "if", "self", ".", "train", ":", "\n", "            ", "img_num_list", "=", "self", ".", "get_img_num_per_cls", "(", "self", ".", "cls_num", ",", "imb_type", ",", "imbalance_ratio", ")", "\n", "self", ".", "gen_imbalanced_data", "(", "img_num_list", ")", "\n", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "#transforms.Resize(224),", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", ",", "\n", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "#transforms.Resize(224),", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "(", "0.4914", ",", "0.4822", ",", "0.4465", ")", ",", "(", "0.2023", ",", "0.1994", ",", "0.2010", ")", ")", ",", "\n", "]", ")", "\n", "\n", "", "self", ".", "labels", "=", "self", ".", "targets", "\n", "\n", "print", "(", "\"{} Mode: Contain {} images\"", ".", "format", "(", "phase", ",", "len", "(", "self", ".", "data", ")", ")", ")", "\n", "\n", "", "def", "_get_class_dict", "(", "self", ")", ":", "\n", "        ", "class_dict", "=", "dict", "(", ")", "\n", "for", "i", ",", "anno", "in", "enumerate", "(", "self", ".", "get_annotations", "(", ")", ")", ":", "\n", "            ", "cat_id", "=", "anno", "[", "\"category_id\"", "]", "\n", "if", "not", "cat_id", "in", "class_dict", ":", "\n", "                ", "class_dict", "[", "cat_id", "]", "=", "[", "]", "\n", "", "class_dict", "[", "cat_id", "]", ".", "append", "(", "i", ")", "\n", "", "return", "class_dict", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ImbalanceCIFAR.IMBALANCECIFAR10._get_class_dict": [[51, 59], ["dict", "enumerate", "ImbalanceCIFAR.IMBALANCECIFAR10.get_annotations", "class_dict[].append"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.ImbalanceCIFAR.IMBALANCECIFAR10.get_annotations"], ["\n", "\n", "", "def", "get_img_num_per_cls", "(", "self", ",", "cls_num", ",", "imb_type", ",", "imb_factor", ")", ":", "\n", "        ", "img_max", "=", "len", "(", "self", ".", "data", ")", "/", "cls_num", "\n", "img_num_per_cls", "=", "[", "]", "\n", "if", "imb_type", "==", "'exp'", ":", "\n", "            ", "for", "cls_idx", "in", "range", "(", "cls_num", ")", ":", "\n", "                ", "num", "=", "img_max", "*", "(", "imb_factor", "**", "(", "cls_idx", "/", "(", "cls_num", "-", "1.0", ")", ")", ")", "\n", "img_num_per_cls", ".", "append", "(", "int", "(", "num", ")", ")", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ImbalanceCIFAR.IMBALANCECIFAR10.get_img_num_per_cls": [[61, 79], ["len", "range", "img_num_per_cls.append", "range", "range", "img_num_per_cls.extend", "int", "img_num_per_cls.append", "img_num_per_cls.append", "int", "int", "int"], "methods", ["None"], ["            ", "for", "cls_idx", "in", "range", "(", "cls_num", "//", "2", ")", ":", "\n", "                ", "img_num_per_cls", ".", "append", "(", "int", "(", "img_max", ")", ")", "\n", "", "for", "cls_idx", "in", "range", "(", "cls_num", "//", "2", ")", ":", "\n", "                ", "img_num_per_cls", ".", "append", "(", "int", "(", "img_max", "*", "imb_factor", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "img_num_per_cls", ".", "extend", "(", "[", "int", "(", "img_max", ")", "]", "*", "cls_num", ")", "\n", "", "return", "img_num_per_cls", "\n", "\n", "", "def", "gen_imbalanced_data", "(", "self", ",", "img_num_per_cls", ")", ":", "\n", "        ", "new_data", "=", "[", "]", "\n", "new_targets", "=", "[", "]", "\n", "targets_np", "=", "np", ".", "array", "(", "self", ".", "targets", ",", "dtype", "=", "np", ".", "int64", ")", "\n", "classes", "=", "np", ".", "unique", "(", "targets_np", ")", "\n", "\n", "self", ".", "num_per_cls_dict", "=", "dict", "(", ")", "\n", "for", "the_class", ",", "the_img_num", "in", "zip", "(", "classes", ",", "img_num_per_cls", ")", ":", "\n", "            ", "self", ".", "num_per_cls_dict", "[", "the_class", "]", "=", "the_img_num", "\n", "idx", "=", "np", ".", "where", "(", "targets_np", "==", "the_class", ")", "[", "0", "]", "\n", "np", ".", "random", ".", "shuffle", "(", "idx", ")", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ImbalanceCIFAR.IMBALANCECIFAR10.gen_imbalanced_data": [[80, 97], ["numpy.array", "numpy.unique", "dict", "zip", "numpy.vstack", "numpy.random.shuffle", "numpy.vstack.append", "new_targets.extend", "numpy.where"], "methods", ["None"], ["selec_idx", "=", "idx", "[", ":", "the_img_num", "]", "\n", "new_data", ".", "append", "(", "self", ".", "data", "[", "selec_idx", ",", "...", "]", ")", "\n", "new_targets", ".", "extend", "(", "[", "the_class", ",", "]", "*", "the_img_num", ")", "\n", "", "new_data", "=", "np", ".", "vstack", "(", "new_data", ")", "\n", "self", ".", "data", "=", "new_data", "\n", "self", ".", "targets", "=", "new_targets", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img", ",", "label", "=", "self", ".", "data", "[", "index", "]", ",", "self", ".", "labels", "[", "index", "]", "\n", "\n", "# doing this so that it is consistent with all other datasets", "\n", "# to return a PIL Image", "\n", "img", "=", "Image", ".", "fromarray", "(", "img", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "if", "self", ".", "target_transform", "is", "not", "None", ":", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ImbalanceCIFAR.IMBALANCECIFAR10.__getitem__": [[98, 112], ["PIL.Image.fromarray", "ImbalanceCIFAR.IMBALANCECIFAR10.transform", "ImbalanceCIFAR.IMBALANCECIFAR10.target_transform"], "methods", ["None"], ["            ", "label", "=", "self", ".", "target_transform", "(", "label", ")", "\n", "\n", "", "return", "img", ",", "label", ",", "index", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "labels", ")", "\n", "\n", "", "def", "get_num_classes", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "cls_num", "\n", "\n", "", "def", "get_annotations", "(", "self", ")", ":", "\n", "        ", "annos", "=", "[", "]", "\n", "for", "label", "in", "self", ".", "labels", ":", "\n", "            ", "annos", ".", "append", "(", "{", "'category_id'", ":", "int", "(", "label", ")", "}", ")", "\n", "", "return", "annos", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ImbalanceCIFAR.IMBALANCECIFAR10.__len__": [[113, 115], ["len"], "methods", ["None"], ["\n", "", "def", "get_cls_num_list", "(", "self", ")", ":", "\n", "        ", "cls_num_list", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ImbalanceCIFAR.IMBALANCECIFAR10.get_num_classes": [[116, 118], ["None"], "methods", ["None"], ["for", "i", "in", "range", "(", "self", ".", "cls_num", ")", ":", "\n", "            ", "cls_num_list", ".", "append", "(", "self", ".", "num_per_cls_dict", "[", "i", "]", ")", "\n", "", "return", "cls_num_list", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ImbalanceCIFAR.IMBALANCECIFAR10.get_annotations": [[119, 124], ["annos.append", "int"], "methods", ["None"], ["\n", "", "", "class", "IMBALANCECIFAR100", "(", "IMBALANCECIFAR10", ")", ":", "\n", "    ", "\"\"\"`CIFAR100 <https://www.cs.toronto.edu/~kriz/cifar.html>`_ Dataset.\n    This is a subclass of the `CIFAR10` Dataset.\n    \"\"\"", "\n", "cls_num", "=", "100", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.ImbalanceCIFAR.IMBALANCECIFAR10.get_cls_num_list": [[125, 130], ["range", "cls_num_list.append"], "methods", ["None"], ["base_folder", "=", "'cifar-100-python'", "\n", "url", "=", "\"https://www.cs.toronto.edu/~kriz/cifar-100-python.tar.gz\"", "\n", "filename", "=", "\"cifar-100-python.tar.gz\"", "\n", "tgz_md5", "=", "'eb9058c3a382ffc7106e4002c42a8d85'", "\n", "train_list", "=", "[", "\n", "[", "'train'", ",", "'16019d7e3df5f24257cddd939b257f8d'", "]", ",", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.__init__": [[15, 29], ["numpy.zeros", "MixedPrioritizedSampler.PriorityTree.initialize", "numpy.zeros", "len"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.initialize"], ["    ", "def", "__init__", "(", "self", ",", "capacity", ",", "fixed_weights", "=", "None", ",", "fixed_scale", "=", "1.0", ",", "\n", "init_weight", "=", "1.0", ")", ":", "\n", "        ", "\"\"\"\n        fixed_weights: weights that wont be updated by self.update()\n        \"\"\"", "\n", "assert", "fixed_weights", "is", "None", "or", "len", "(", "fixed_weights", ")", "==", "capacity", "\n", "self", ".", "_capacity", "=", "capacity", "\n", "self", ".", "_tree_size", "=", "2", "*", "capacity", "-", "1", "\n", "self", ".", "fixed_scale", "=", "fixed_scale", "\n", "self", ".", "fixed_weights", "=", "np", ".", "zeros", "(", "self", ".", "_capacity", ")", "if", "fixed_weights", "is", "None", "else", "fixed_weights", "\n", "self", ".", "tree", "=", "np", ".", "zeros", "(", "self", ".", "_tree_size", ")", "\n", "self", ".", "_initialized", "=", "False", "\n", "self", ".", "initialize", "(", "init_weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.initialize": [[30, 41], ["print", "MixedPrioritizedSampler.PriorityTree.update_whole", "MixedPrioritizedSampler.PriorityTree.fixed_weights.sum", "MixedPrioritizedSampler.PriorityTree.fixed_weights.sum", "MixedPrioritizedSampler.PriorityTree.fixed_weights.sum"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.update_whole"], ["", "def", "initialize", "(", "self", ",", "init_weight", ")", ":", "\n", "        ", "\"\"\"Initialize the tree.\"\"\"", "\n", "\n", "# Rescale the fixed_weights if it is not zero", "\n", "if", "self", ".", "fixed_weights", ".", "sum", "(", ")", ">", "0", "and", "init_weight", ">", "0", ":", "\n", "            ", "self", ".", "fixed_weights", "*=", "self", ".", "fixed_scale", "*", "init_weight", "*", "self", ".", "capacity", "/", "self", ".", "fixed_weights", ".", "sum", "(", ")", "\n", "", "print", "(", "'FixedWeights: {}'", ".", "format", "(", "self", ".", "fixed_weights", ".", "sum", "(", ")", ")", ")", "\n", "\n", "self", ".", "update_whole", "(", "init_weight", "+", "self", ".", "fixed_weights", ")", "\n", "self", ".", "_initialized", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.reset_fixed_weights": [[42, 58], ["MixedPrioritizedSampler.PriorityTree.get_adaptive_weights", "fixed_weights.sum", "MixedPrioritizedSampler.PriorityTree.update_whole", "MixedPrioritizedSampler.PriorityTree.sum"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.get_adaptive_weights", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.update_whole"], ["", "def", "reset_fixed_weights", "(", "self", ",", "fixed_weights", ",", "rescale", "=", "False", ")", ":", "\n", "        ", "\"\"\" Reset the manually designed weights and \n            update the whole tree accordingly.\n\n            @rescale: rescale the fixed_weights such that \n            fixed_weights.sum() = self.fixed_scale * adaptive_weights.sum()\n        \"\"\"", "\n", "\n", "adaptive_weights", "=", "self", ".", "get_adaptive_weights", "(", ")", "\n", "fixed_sum", "=", "fixed_weights", ".", "sum", "(", ")", "\n", "if", "rescale", "and", "fixed_sum", ">", "0", ":", "\n", "            ", "scale", "=", "self", ".", "fixed_scale", "*", "adaptive_weights", ".", "sum", "(", ")", "/", "fixed_sum", "\n", "self", ".", "fixed_weights", "=", "fixed_weights", "*", "scale", "\n", "", "else", ":", "\n", "            ", "self", ".", "fixed_weights", "=", "fixed_weights", "\n", "", "self", ".", "update_whole", "(", "self", ".", "fixed_weights", "+", "adaptive_weights", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.update_whole": [[59, 73], ["MixedPrioritizedSampler.PriorityTree.pointer_to_treeidx", "MixedPrioritizedSampler.PriorityTree.pointer_to_treeidx", "range"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.pointer_to_treeidx", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.pointer_to_treeidx"], ["", "def", "update_whole", "(", "self", ",", "total_weights", ")", ":", "\n", "        ", "\"\"\" Update the whole tree based on per-example sampling weights \"\"\"", "\n", "lefti", "=", "self", ".", "pointer_to_treeidx", "(", "0", ")", "\n", "righti", "=", "self", ".", "pointer_to_treeidx", "(", "self", ".", "capacity", "-", "1", ")", "\n", "self", ".", "tree", "[", "lefti", ":", "righti", "+", "1", "]", "=", "total_weights", "\n", "\n", "# Iteratively find a parent layer", "\n", "while", "lefti", "!=", "0", "and", "righti", "!=", "0", ":", "\n", "            ", "lefti", "=", "(", "lefti", "-", "1", ")", "//", "2", "if", "lefti", "!=", "0", "else", "0", "\n", "righti", "=", "(", "righti", "-", "1", ")", "//", "2", "if", "righti", "!=", "0", "else", "0", "\n", "\n", "# Assign paraent weights from right to left", "\n", "for", "i", "in", "range", "(", "righti", ",", "lefti", "-", "1", ",", "-", "1", ")", ":", "\n", "                ", "self", ".", "tree", "[", "i", "]", "=", "self", ".", "tree", "[", "2", "*", "i", "+", "1", "]", "+", "self", ".", "tree", "[", "2", "*", "i", "+", "2", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.get_adaptive_weights": [[74, 77], ["MixedPrioritizedSampler.PriorityTree.get_total_weights"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.get_total_weights"], ["", "", "", "def", "get_adaptive_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\" Get the instance-aware weights, that are not mannually designed\"\"\"", "\n", "return", "self", ".", "get_total_weights", "(", ")", "-", "self", ".", "fixed_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.get_total_weights": [[78, 85], ["MixedPrioritizedSampler.PriorityTree.pointer_to_treeidx", "MixedPrioritizedSampler.PriorityTree.pointer_to_treeidx"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.pointer_to_treeidx", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.pointer_to_treeidx"], ["", "def", "get_total_weights", "(", "self", ")", ":", "\n", "        ", "\"\"\" Get the per-example sampling weights\n            return shape: [capacity]\n        \"\"\"", "\n", "lefti", "=", "self", ".", "pointer_to_treeidx", "(", "0", ")", "\n", "righti", "=", "self", ".", "pointer_to_treeidx", "(", "self", ".", "capacity", "-", "1", ")", "\n", "return", "self", ".", "tree", "[", "lefti", ":", "righti", "+", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size": [[86, 89], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_tree_size", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.capacity": [[90, 93], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "capacity", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_capacity", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.__len__": [[94, 96], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "capacity", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.pointer_to_treeidx": [[97, 100], ["int"], "methods", ["None"], ["", "def", "pointer_to_treeidx", "(", "self", ",", "pointer", ")", ":", "\n", "        ", "assert", "pointer", "<", "self", ".", "capacity", "\n", "return", "int", "(", "pointer", "+", "self", ".", "capacity", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.update": [[101, 110], ["MixedPrioritizedSampler.PriorityTree.pointer_to_treeidx"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.pointer_to_treeidx"], ["", "def", "update", "(", "self", ",", "pointer", ",", "priority", ")", ":", "\n", "        ", "assert", "pointer", "<", "self", ".", "capacity", "\n", "tree_idx", "=", "self", ".", "pointer_to_treeidx", "(", "pointer", ")", "\n", "priority", "+=", "self", ".", "fixed_weights", "[", "pointer", "]", "\n", "delta", "=", "priority", "-", "self", ".", "tree", "[", "tree_idx", "]", "\n", "self", ".", "tree", "[", "tree_idx", "]", "=", "priority", "\n", "while", "tree_idx", "!=", "0", ":", "\n", "            ", "tree_idx", "=", "(", "tree_idx", "-", "1", ")", "//", "2", "\n", "self", ".", "tree", "[", "tree_idx", "]", "+=", "delta", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.get_leaf": [[111, 128], ["len"], "methods", ["None"], ["", "", "def", "get_leaf", "(", "self", ",", "value", ")", ":", "\n", "        ", "assert", "self", ".", "_initialized", ",", "'PriorityTree not initialized!!!!'", "\n", "assert", "self", ".", "total", ">", "0", ",", "'No priority weights setted!!'", "\n", "parent", "=", "0", "\n", "while", "True", ":", "\n", "            ", "left_child", "=", "2", "*", "parent", "+", "1", "\n", "right_child", "=", "2", "*", "parent", "+", "2", "\n", "if", "left_child", ">=", "len", "(", "self", ".", "tree", ")", ":", "\n", "                ", "tgt_leaf", "=", "parent", "\n", "break", "\n", "", "if", "value", "<", "self", ".", "tree", "[", "left_child", "]", ":", "\n", "                ", "parent", "=", "left_child", "\n", "", "else", ":", "\n", "                ", "value", "-=", "self", ".", "tree", "[", "left_child", "]", "\n", "parent", "=", "right_child", "\n", "", "", "data_idx", "=", "tgt_leaf", "-", "self", ".", "capacity", "+", "1", "\n", "return", "data_idx", ",", "self", ".", "tree", "[", "tgt_leaf", "]", "# data idx, priority", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.total": [[129, 133], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "total", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "_initialized", ",", "'PriorityTree not initialized!!!!'", "\n", "return", "self", ".", "tree", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max": [[134, 137], ["numpy.max"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max"], ["", "@", "property", "\n", "def", "max", "(", "self", ")", ":", "\n", "        ", "return", "np", ".", "max", "(", "self", ".", "tree", "[", "-", "self", ".", "capacity", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.min": [[138, 142], ["numpy.min"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.min"], ["", "@", "property", "\n", "def", "min", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "_initialized", ",", "'PriorityTree not initialized!!!!'", "\n", "return", "np", ".", "min", "(", "self", ".", "tree", "[", "-", "self", ".", "capacity", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.get_weights": [[143, 146], ["MixedPrioritizedSampler.PriorityTree.get_total_weights"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.get_total_weights"], ["", "def", "get_weights", "(", "self", ")", ":", "\n", "        ", "return", "{", "'fixed_weights'", ":", "self", ".", "fixed_weights", ",", "\n", "'total_weights'", ":", "self", ".", "get_total_weights", "(", ")", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.MixedPrioritizedSampler.__init__": [[194, 278], ["len", "print", "numpy.array", "numpy.unique", "len", "numpy.array().astype", "enumerate", "range", "MixedPrioritizedSampler.MixedPrioritizedSampler.get_balanced_weights", "MixedPrioritizedSampler.MixedPrioritizedSampler.get_manual_weights", "numpy.power", "MixedPrioritizedSampler.PriorityTree", "MixedPrioritizedSampler.MixedPrioritizedSampler.cls_cnts.append", "MixedPrioritizedSampler.MixedPrioritizedSampler.cls_idxs[].append", "numpy.array", "numpy.power", "numpy.linspace", "numpy.sum", "numpy.array", "range", "NotImplementedError", "numpy.concatenate", "numpy.concatenate", "NotImplementedError", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.linspace"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.MixedPrioritizedSampler.get_balanced_weights", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.MixedPrioritizedSampler.get_manual_weights"], ["def", "__init__", "(", "self", ",", "dataset", ",", "balance_scale", "=", "1.0", ",", "fixed_scale", "=", "1.0", ",", "\n", "lam", "=", "None", ",", "epochs", "=", "90", ",", "cycle", "=", "0", ",", "nroot", "=", "None", ",", "manual_only", "=", "False", ",", "\n", "rescale", "=", "False", ",", "root_decay", "=", "None", ",", "decay_gap", "=", "30", ",", "ptype", "=", "'score'", ",", "\n", "alpha", "=", "1.0", ")", ":", "\n", "        ", "\"\"\"\n        \"\"\"", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "balance_scale", "=", "balance_scale", "\n", "self", ".", "fixed_scale", "=", "fixed_scale", "\n", "self", ".", "epochs", "=", "epochs", "\n", "self", ".", "lam", "=", "lam", "\n", "self", ".", "cycle", "=", "cycle", "\n", "self", ".", "nroot", "=", "nroot", "\n", "self", ".", "rescale", "=", "rescale", "\n", "self", ".", "manual_only", "=", "manual_only", "\n", "self", ".", "root_decay", "=", "root_decay", "\n", "self", ".", "decay_gap", "=", "decay_gap", "\n", "self", ".", "ptype", "=", "ptype", "\n", "self", ".", "num_samples", "=", "len", "(", "dataset", ")", "\n", "self", ".", "alpha", "=", "alpha", "\n", "\n", "# If using root_decay, reset relevent parameters", "\n", "if", "self", ".", "root_decay", "in", "[", "'exp'", ",", "'linear'", ",", "'autoexp'", "]", ":", "\n", "            ", "self", ".", "lam", "=", "1", "\n", "self", ".", "manual_only", "=", "True", "\n", "self", ".", "nroot", "=", "1", "\n", "if", "self", ".", "root_decay", "==", "'autoexp'", ":", "\n", "                ", "self", ".", "decay_gap", "=", "1", "\n", "self", ".", "decay_factor", "=", "np", ".", "power", "(", "nroot", ",", "1", "/", "(", "self", ".", "epochs", "-", "1", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "assert", "self", ".", "root_decay", "is", "None", "\n", "assert", "self", ".", "nroot", "is", "None", "or", "self", ".", "nroot", ">=", "2", "\n", "", "print", "(", "\"====> Decay GAP: {}\"", ".", "format", "(", "self", ".", "decay_gap", ")", ")", "\n", "\n", "# Take care of lambdas", "\n", "if", "self", ".", "lam", "is", "None", ":", "\n", "            ", "self", ".", "freeze", "=", "False", "\n", "if", "cycle", "==", "0", ":", "\n", "                ", "self", ".", "lams", "=", "np", ".", "linspace", "(", "0", ",", "1", ",", "epochs", ")", "\n", "", "elif", "cycle", "==", "1", ":", "\n", "                ", "self", ".", "lams", "=", "np", ".", "concatenate", "(", "[", "np", ".", "linspace", "(", "0", ",", "1", ",", "epochs", "//", "3", ")", "]", "*", "3", ")", "\n", "", "elif", "cycle", "==", "2", ":", "\n", "                ", "self", ".", "lams", "=", "np", ".", "concatenate", "(", "[", "np", ".", "linspace", "(", "0", ",", "1", ",", "epochs", "//", "3", ")", ",", "\n", "np", ".", "linspace", "(", "0", ",", "1", ",", "epochs", "//", "3", ")", "[", ":", ":", "-", "1", "]", ",", "\n", "np", ".", "linspace", "(", "0", ",", "1", ",", "epochs", "//", "3", ")", "]", ")", "\n", "", "else", ":", "\n", "                ", "raise", "NotImplementedError", "(", "\n", "'cycle = {} not implemented'", ".", "format", "(", "cycle", ")", ")", "\n", "", "", "else", ":", "\n", "            ", "self", ".", "lams", "=", "[", "self", ".", "lam", "]", "\n", "self", ".", "freeze", "=", "True", "\n", "\n", "# Get num of samples per class", "\n", "", "self", ".", "cls_cnts", "=", "[", "]", "\n", "self", ".", "labels", "=", "labels", "=", "np", ".", "array", "(", "self", ".", "dataset", ".", "labels", ")", "\n", "for", "l", "in", "np", ".", "unique", "(", "labels", ")", ":", "\n", "            ", "self", ".", "cls_cnts", ".", "append", "(", "np", ".", "sum", "(", "labels", "==", "l", ")", ")", "\n", "", "self", ".", "num_classes", "=", "len", "(", "self", ".", "cls_cnts", ")", "\n", "self", ".", "cnts", "=", "np", ".", "array", "(", "self", ".", "cls_cnts", ")", ".", "astype", "(", "float", ")", "\n", "\n", "# Get per-class image indexes", "\n", "self", ".", "cls_idxs", "=", "[", "[", "]", "for", "_", "in", "range", "(", "self", ".", "num_classes", ")", "]", "\n", "for", "i", ",", "label", "in", "enumerate", "(", "self", ".", "dataset", ".", "labels", ")", ":", "\n", "            ", "self", ".", "cls_idxs", "[", "label", "]", ".", "append", "(", "i", ")", "\n", "", "for", "ci", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "            ", "self", ".", "cls_idxs", "[", "ci", "]", "=", "np", ".", "array", "(", "self", ".", "cls_idxs", "[", "ci", "]", ")", "\n", "\n", "# Build balanced weights based on class counts ", "\n", "", "self", ".", "balanced_weights", "=", "self", ".", "get_balanced_weights", "(", "self", ".", "nroot", ")", "\n", "self", ".", "manual_weights", "=", "self", ".", "get_manual_weights", "(", "self", ".", "lams", "[", "0", "]", ")", "\n", "\n", "# Setup priority tree", "\n", "if", "self", ".", "ptype", "==", "'score'", ":", "\n", "            ", "self", ".", "init_weight", "=", "1.", "\n", "", "elif", "self", ".", "ptype", "in", "[", "'CE'", ",", "'entropy'", "]", ":", "\n", "            ", "self", ".", "init_weight", "=", "6.9", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'ptype {} not implemented'", ".", "format", "(", "self", ".", "ptype", ")", ")", "\n", "", "if", "self", ".", "manual_only", ":", "\n", "            ", "self", ".", "init_weight", "=", "0.", "\n", "", "self", ".", "init_weight", "=", "np", ".", "power", "(", "self", ".", "init_weight", ",", "self", ".", "alpha", ")", "\n", "self", ".", "ptree", "=", "PriorityTree", "(", "self", ".", "num_samples", ",", "self", ".", "manual_weights", ",", "\n", "fixed_scale", "=", "self", ".", "fixed_scale", ",", "\n", "init_weight", "=", "self", ".", "init_weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.MixedPrioritizedSampler.get_manual_weights": [[279, 288], ["numpy.ones", "len"], "methods", ["None"], ["", "def", "get_manual_weights", "(", "self", ",", "lam", ")", ":", "\n", "# Merge balanced weights and uniform weights ", "\n", "        ", "if", "lam", "==", "1", ":", "\n", "            ", "manual_weights", "=", "self", ".", "balanced_weights", "\n", "", "elif", "lam", "==", "0", ":", "\n", "            ", "manual_weights", "=", "np", ".", "ones", "(", "len", "(", "self", ".", "balanced_weights", ")", ")", "\n", "", "else", ":", "\n", "            ", "manual_weights", "=", "self", ".", "balanced_weights", "*", "lam", "+", "(", "1", "-", "lam", ")", "\n", "", "return", "manual_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.MixedPrioritizedSampler.get_balanced_weights": [[289, 313], ["numpy.zeros", "range", "cnts.min", "NotImplementedError", "numpy.zeros.sum", "cnts.sum", "numpy.power", "cnts.sum"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.min"], ["", "def", "get_balanced_weights", "(", "self", ",", "nroot", ")", ":", "\n", "        ", "\"\"\" Calculate normalized generalized balanced weights \"\"\"", "\n", "\n", "cnts", "=", "self", ".", "cnts", "\n", "if", "nroot", "is", "None", ":", "\n", "# Real balanced sampling weights", "\n", "            ", "cls_ws", "=", "cnts", ".", "min", "(", ")", "/", "cnts", "\n", "", "elif", "nroot", ">=", "1", ":", "\n", "# Generalized balanced weights", "\n", "            ", "cls_ws", "=", "cnts", "/", "cnts", ".", "sum", "(", ")", "\n", "cls_ws", "=", "np", ".", "power", "(", "cls_ws", ",", "1.", "/", "nroot", ")", "*", "cnts", ".", "sum", "(", ")", "\n", "cls_ws", "=", "cls_ws", "/", "cnts", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'root:{} not implemented'", ".", "format", "(", "nroot", ")", ")", "\n", "\n", "# Get un-normalized weights", "\n", "", "balanced_weights", "=", "np", ".", "zeros", "(", "self", ".", "num_samples", ")", "\n", "for", "ci", "in", "range", "(", "self", ".", "num_classes", ")", ":", "\n", "            ", "balanced_weights", "[", "self", ".", "cls_idxs", "[", "ci", "]", "]", "=", "cls_ws", "[", "ci", "]", "\n", "\n", "# Normalization and rescale", "\n", "", "balanced_weights", "*=", "self", ".", "num_samples", "/", "balanced_weights", ".", "sum", "(", ")", "*", "self", ".", "balance_scale", "\n", "return", "balanced_weights", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.MixedPrioritizedSampler.__iter__": [[314, 319], ["range", "MixedPrioritizedSampler.MixedPrioritizedSampler.ptree.get_leaf", "random.random"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.get_leaf"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "for", "_", "in", "range", "(", "self", ".", "num_samples", ")", ":", "\n", "            ", "w", "=", "random", ".", "random", "(", ")", "*", "self", ".", "ptree", ".", "total", "\n", "i", ",", "pri", "=", "self", ".", "ptree", ".", "get_leaf", "(", "w", ")", "\n", "yield", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.MixedPrioritizedSampler.__len__": [[320, 322], ["None"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "num_samples", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.MixedPrioritizedSampler.reset_weights": [[323, 345], ["MixedPrioritizedSampler.MixedPrioritizedSampler.get_manual_weights", "MixedPrioritizedSampler.MixedPrioritizedSampler.ptree.reset_fixed_weights", "MixedPrioritizedSampler.MixedPrioritizedSampler.get_balanced_weights", "MixedPrioritizedSampler.MixedPrioritizedSampler.ptree.reset_fixed_weights", "numpy.power"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.MixedPrioritizedSampler.get_manual_weights", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.reset_fixed_weights", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.MixedPrioritizedSampler.get_balanced_weights", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.reset_fixed_weights"], ["", "def", "reset_weights", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "if", "not", "self", ".", "freeze", "and", "self", ".", "fixed_scale", ">", "0", ":", "\n", "            ", "if", "epoch", ">=", "self", ".", "epochs", ":", "\n", "                ", "e", "=", "self", ".", "epochs", "-", "1", "\n", "", "elif", "epoch", "<", "1", ":", "\n", "                ", "e", "=", "0", "\n", "", "else", ":", "\n", "                ", "e", "=", "epoch", "\n", "", "self", ".", "manual_weights", "=", "self", ".", "get_manual_weights", "(", "self", ".", "lams", "[", "e", "]", ")", "\n", "self", ".", "ptree", ".", "reset_fixed_weights", "(", "self", ".", "manual_weights", ",", "self", ".", "rescale", ")", "\n", "\n", "", "if", "self", ".", "root_decay", "in", "[", "'exp'", ",", "'linear'", ",", "'autoexp'", "]", "and", "epoch", "%", "self", ".", "decay_gap", "==", "0", ":", "\n", "            ", "if", "self", ".", "root_decay", "==", "'exp'", ":", "\n", "                ", "self", ".", "nroot", "*=", "2", "\n", "", "elif", "self", ".", "root_decay", "==", "'linear'", ":", "\n", "                ", "self", ".", "nroot", "+=", "1", "\n", "", "elif", "self", ".", "root_decay", "==", "'autoexp'", ":", "\n", "# self.nroot *= self.decay_factor", "\n", "                ", "self", ".", "nroot", "=", "np", ".", "power", "(", "self", ".", "decay_factor", ",", "epoch", ")", "\n", "\n", "", "bw", "=", "self", ".", "get_balanced_weights", "(", "self", ".", "nroot", ")", "\n", "self", ".", "ptree", ".", "reset_fixed_weights", "(", "bw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.MixedPrioritizedSampler.update_weights": [[346, 353], ["numpy.clip", "numpy.power", "zip", "MixedPrioritizedSampler.MixedPrioritizedSampler.ptree.update"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update"], ["", "", "def", "update_weights", "(", "self", ",", "inds", ",", "weights", ")", ":", "\n", "        ", "\"\"\" Update priority weights \"\"\"", "\n", "if", "not", "self", ".", "manual_only", ":", "\n", "            ", "weights", "=", "np", ".", "clip", "(", "weights", ",", "0", ",", "self", ".", "init_weight", ")", "\n", "weights", "=", "np", ".", "power", "(", "weights", ",", "self", ".", "alpha", ")", "\n", "for", "i", ",", "w", "in", "zip", "(", "inds", ",", "weights", ")", ":", "\n", "                ", "self", ".", "ptree", ".", "update", "(", "i", ",", "w", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.MixedPrioritizedSampler.get_weights": [[354, 356], ["MixedPrioritizedSampler.MixedPrioritizedSampler.ptree.get_weights"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.MixedPrioritizedSampler.get_weights"], ["", "", "", "def", "get_weights", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "ptree", ".", "get_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.get_sampler": [[358, 360], ["None"], "function", ["None"], ["", "", "def", "get_sampler", "(", ")", ":", "\n", "    ", "return", "MixedPrioritizedSampler", "\n", "", ""]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.dataloader.LT_Dataset.__init__": [[73, 110], ["dict", "open", "collections.Counter", "zip", "dataloader.LT_Dataset.img_path.append", "dataloader.LT_Dataset.labels.append", "sorted", "torch.load.sort", "torch.save", "torch.load", "os.path.join", "int", "dict.keys", "max", "enumerate", "dataloader.LT_Dataset.new_img_path.append", "dataloader.LT_Dataset.new_labels.append", "range", "line.split", "line.split"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max"], ["with", "open", "(", "txt", ")", "as", "f", ":", "\n", "            ", "for", "line", "in", "f", ":", "\n", "                ", "self", ".", "img_path", ".", "append", "(", "os", ".", "path", ".", "join", "(", "root", ",", "line", ".", "split", "(", ")", "[", "0", "]", ")", ")", "\n", "self", ".", "labels", ".", "append", "(", "int", "(", "line", ".", "split", "(", ")", "[", "1", "]", ")", ")", "\n", "# select top k class", "\n", "", "", "if", "top_k", ":", "\n", "# only select top k in training, in case train/val/test not matching.", "\n", "            ", "if", "'train'", "in", "txt", ":", "\n", "                ", "max_len", "=", "max", "(", "self", ".", "labels", ")", "+", "1", "\n", "dist", "=", "[", "[", "i", ",", "0", "]", "for", "i", "in", "range", "(", "max_len", ")", "]", "\n", "for", "i", "in", "self", ".", "labels", ":", "\n", "                    ", "dist", "[", "i", "]", "[", "-", "1", "]", "+=", "1", "\n", "", "dist", ".", "sort", "(", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ",", "reverse", "=", "True", ")", "\n", "# saving", "\n", "torch", ".", "save", "(", "dist", ",", "template", "+", "'_top_{}_mapping'", ".", "format", "(", "top_k", ")", ")", "\n", "", "else", ":", "\n", "# loading", "\n", "                ", "dist", "=", "torch", ".", "load", "(", "template", "+", "'_top_{}_mapping'", ".", "format", "(", "top_k", ")", ")", "\n", "", "selected_labels", "=", "{", "item", "[", "0", "]", ":", "i", "for", "i", ",", "item", "in", "enumerate", "(", "dist", "[", ":", "top_k", "]", ")", "}", "\n", "# replace original path and labels", "\n", "self", ".", "new_img_path", "=", "[", "]", "\n", "self", ".", "new_labels", "=", "[", "]", "\n", "for", "path", ",", "label", "in", "zip", "(", "self", ".", "img_path", ",", "self", ".", "labels", ")", ":", "\n", "                ", "if", "label", "in", "selected_labels", ":", "\n", "                    ", "self", ".", "new_img_path", ".", "append", "(", "path", ")", "\n", "self", ".", "new_labels", ".", "append", "(", "selected_labels", "[", "label", "]", ")", "\n", "", "", "self", ".", "img_path", "=", "self", ".", "new_img_path", "\n", "self", ".", "labels", "=", "self", ".", "new_labels", "\n", "\n", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "labels", ")", "\n", "\n", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "        ", "path", "=", "self", ".", "img_path", "[", "index", "]", "\n", "label", "=", "self", ".", "labels", "[", "index", "]", "\n", "\n", "with", "open", "(", "path", ",", "'rb'", ")", "as", "f", ":", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.dataloader.LT_Dataset.__len__": [[111, 113], ["len"], "methods", ["None"], ["            ", "sample", "=", "Image", ".", "open", "(", "f", ")", ".", "convert", "(", "'RGB'", ")", "\n", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.dataloader.LT_Dataset.__getitem__": [[114, 126], ["open", "PIL.Image.open().convert", "dataloader.LT_Dataset.transform", "PIL.Image.open"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.iNaturalist18.gen_lists.convert"], ["            ", "sample", "=", "self", ".", "transform", "(", "sample", ")", "\n", "\n", "", "return", "sample", ",", "label", ",", "index", "\n", "\n", "# Load datasets", "\n", "", "", "def", "load_data", "(", "data_root", ",", "dataset", ",", "phase", ",", "batch_size", ",", "top_k_class", "=", "None", ",", "sampler_dic", "=", "None", ",", "num_workers", "=", "4", ",", "shuffle", "=", "True", ",", "cifar_imb_ratio", "=", "None", ")", ":", "\n", "\n", "    ", "txt_split", "=", "phase", "\n", "txt", "=", "'./data/%s/%s_%s.txt'", "%", "(", "dataset", ",", "dataset", ",", "txt_split", ")", "\n", "template", "=", "'./data/%s/%s'", "%", "(", "dataset", ",", "dataset", ")", "\n", "\n", "print", "(", "'Loading data from %s'", "%", "(", "txt", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.dataloader.get_data_transform": [[41, 69], ["torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Compose", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.Resize", "torchvision.transforms.CenterCrop", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize", "torchvision.transforms.RandomResizedCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ColorJitter", "torchvision.transforms.ToTensor", "torchvision.transforms.Normalize"], "function", ["None"], ["transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "rgb_mean", ",", "rbg_std", ")", "\n", "]", ")", "if", "key", "==", "'iNaturalist18'", "else", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "RandomResizedCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ColorJitter", "(", "brightness", "=", "0.4", ",", "contrast", "=", "0.4", ",", "saturation", "=", "0.4", ",", "hue", "=", "0", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "rgb_mean", ",", "rbg_std", ")", "\n", "]", ")", ",", "\n", "'val'", ":", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "rgb_mean", ",", "rbg_std", ")", "\n", "]", ")", ",", "\n", "'test'", ":", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "rgb_mean", ",", "rbg_std", ")", "\n", "]", ")", "\n", "}", "\n", "return", "data_transforms", "[", "split", "]", "\n", "\n", "# Dataset", "\n", "", "class", "LT_Dataset", "(", "Dataset", ")", ":", "\n", "\n", "    ", "def", "__init__", "(", "self", ",", "root", ",", "txt", ",", "transform", "=", "None", ",", "template", "=", "None", ",", "top_k", "=", "None", ")", ":", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.data.dataloader.load_data": [[128, 183], ["print", "print", "print", "print", "data.ImbalanceCIFAR.IMBALANCECIFAR10", "len", "print", "print", "print", "print", "print", "data.ImbalanceCIFAR.IMBALANCECIFAR100", "print", "dataloader.LT_Dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "dataloader.get_data_transform", "dataloader.get_data_transform", "torch.FloatTensor", "torch.FloatTensor().sum", "torch.FloatTensor", "torch.FloatTensor().sum", "torch.FloatTensor", "torch.FloatTensor"], "function", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.dataloader.get_data_transform", "home.repos.pwc.inspect_result.beierzhu_xerm.data.dataloader.get_data_transform"], ["        ", "print", "(", "'===> Loading iNaturalist18 statistics'", ")", "\n", "key", "=", "'iNaturalist18'", "\n", "", "else", ":", "\n", "        ", "key", "=", "'default'", "\n", "\n", "", "if", "dataset", "==", "'CIFAR10_LT'", ":", "\n", "        ", "print", "(", "'====> CIFAR10 Imbalance Ratio: '", ",", "cifar_imb_ratio", ")", "\n", "set_", "=", "IMBALANCECIFAR10", "(", "phase", ",", "imbalance_ratio", "=", "cifar_imb_ratio", ",", "root", "=", "data_root", ")", "\n", "", "elif", "dataset", "==", "'CIFAR100_LT'", ":", "\n", "        ", "print", "(", "'====> CIFAR100 Imbalance Ratio: '", ",", "cifar_imb_ratio", ")", "\n", "set_", "=", "IMBALANCECIFAR100", "(", "phase", ",", "imbalance_ratio", "=", "cifar_imb_ratio", ",", "root", "=", "data_root", ")", "\n", "", "else", ":", "\n", "        ", "rgb_mean", ",", "rgb_std", "=", "RGB_statistics", "[", "key", "]", "[", "'mean'", "]", ",", "RGB_statistics", "[", "key", "]", "[", "'std'", "]", "\n", "if", "phase", "not", "in", "[", "'train'", ",", "'val'", "]", ":", "\n", "            ", "transform", "=", "get_data_transform", "(", "'test'", ",", "rgb_mean", ",", "rgb_std", ",", "key", ")", "\n", "", "else", ":", "\n", "            ", "transform", "=", "get_data_transform", "(", "phase", ",", "rgb_mean", ",", "rgb_std", ",", "key", ")", "\n", "", "print", "(", "'Use data transformation:'", ",", "transform", ")", "\n", "\n", "set_", "=", "LT_Dataset", "(", "data_root", ",", "txt", ",", "transform", ",", "template", "=", "template", ",", "top_k", "=", "top_k_class", ")", "\n", "\n", "\n", "", "print", "(", "len", "(", "set_", ")", ")", "\n", "\n", "if", "sampler_dic", "and", "phase", "==", "'train'", ":", "\n", "        ", "print", "(", "'=====> Using sampler: '", ",", "sampler_dic", "[", "'sampler'", "]", ")", "\n", "# print('Sample %s samples per-class.' % sampler_dic['num_samples_cls'])", "\n", "print", "(", "'=====> Sampler parameters: '", ",", "sampler_dic", "[", "'params'", "]", ")", "\n", "return", "DataLoader", "(", "dataset", "=", "set_", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "sampler", "=", "sampler_dic", "[", "'sampler'", "]", "(", "set_", ",", "**", "sampler_dic", "[", "'params'", "]", ")", ",", "\n", "num_workers", "=", "num_workers", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'=====> No sampler.'", ")", "\n", "print", "(", "'=====> Shuffle is %s.'", "%", "(", "shuffle", ")", ")", "\n", "return", "DataLoader", "(", "dataset", "=", "set_", ",", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "num_workers", "=", "num_workers", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.beierzhu_xerm.iNaturalist18.gen_lists.convert": [[22, 35], ["tqdm.tqdm", "open", "json.load", "range", "lines.append", "open", "ftxt.writelines", "len", "str"], "function", ["None"], ["def", "convert", "(", "json_file", ",", "txt_file", ")", ":", "\n", "    ", "with", "open", "(", "json_file", ",", "'r'", ")", "as", "f", ":", "\n", "        ", "data", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "lines", "=", "[", "]", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "len", "(", "data", "[", "'images'", "]", ")", ")", ")", ":", "\n", "        ", "assert", "data", "[", "'images'", "]", "[", "i", "]", "[", "'id'", "]", "==", "data", "[", "'annotations'", "]", "[", "i", "]", "[", "'id'", "]", "\n", "img_name", "=", "data", "[", "'images'", "]", "[", "i", "]", "[", "'file_name'", "]", "\n", "label", "=", "data", "[", "'annotations'", "]", "[", "i", "]", "[", "'category_id'", "]", "\n", "lines", ".", "append", "(", "img_name", "+", "' '", "+", "str", "(", "label", ")", "+", "'\\n'", ")", "\n", "\n", "", "with", "open", "(", "txt_file", ",", "'w'", ")", "as", "ftxt", ":", "\n", "        ", "ftxt", ".", "writelines", "(", "lines", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.loss.WeightedSoftmaxLoss.create_loss": [[18, 35], ["print", "sum", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor.max().item", "torch.CrossEntropyLoss", "open", "range", "torch.FloatTensor.max", "torch.FloatTensor.log", "int", "line.split"], "function", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max"], ["def", "create_loss", "(", ")", ":", "\n", "    ", "print", "(", "'Loading Weighted Softmax Loss.'", ")", "\n", "# Imagenet_LT class distribution", "\n", "dist", "=", "[", "0", "for", "_", "in", "range", "(", "1000", ")", "]", "\n", "with", "open", "(", "'./data/ImageNet_LT/ImageNet_LT_train.txt'", ")", "as", "f", ":", "\n", "        ", "for", "line", "in", "f", ":", "\n", "            ", "dist", "[", "int", "(", "line", ".", "split", "(", ")", "[", "1", "]", ")", "]", "+=", "1", "\n", "", "", "num", "=", "sum", "(", "dist", ")", "\n", "prob", "=", "[", "i", "/", "num", "for", "i", "in", "dist", "]", "\n", "prob", "=", "torch", ".", "FloatTensor", "(", "prob", ")", "\n", "# normalization", "\n", "max_prob", "=", "prob", ".", "max", "(", ")", ".", "item", "(", ")", "\n", "prob", "=", "prob", "/", "max_prob", "\n", "# class reweight", "\n", "weight", "=", "-", "prob", ".", "log", "(", ")", "+", "1", "\n", "\n", "return", "nn", ".", "CrossEntropyLoss", "(", "weight", "=", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.loss.SoftmaxLoss.create_loss": [[18, 21], ["print", "torch.CrossEntropyLoss"], "function", ["None"], ["def", "create_loss", "(", ")", ":", "\n", "    ", "print", "(", "'Loading Softmax Loss.'", ")", "\n", "return", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.loss.xERM_loss.xERMLoss.__init__": [[6, 10], ["torch.Module.__init__", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gamma", ")", ":", "\n", "        ", "super", "(", "xERMLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "CE_loss", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'none'", ")", "\n", "self", ".", "gamma", "=", "gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.loss.xERM_loss.xERMLoss.forward": [[11, 30], ["xERM_loss.xERMLoss.CE_loss", "xERM_loss.xERMLoss.CE_loss", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "xERM_loss.xERMLoss.CE_loss", "torch.softmax().clone().detach", "torch.softmax().clone().detach", "torch.softmax().clone().detach", "torch.softmax", "torch.softmax", "torch.softmax", "tde_loss.sum.sum.sum", "torch.softmax.log", "torch.softmax().clone", "torch.softmax().clone", "torch.softmax().clone", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "logits_TE", ",", "logits_TDE", ",", "logits_student", ",", "labels", ")", ":", "\n", "# calculate weight", "\n", "        ", "TDE_acc", "=", "self", ".", "CE_loss", "(", "logits_TDE", ",", "labels", ")", "\n", "TE_acc", "=", "self", ".", "CE_loss", "(", "logits_TE", ",", "labels", ")", "\n", "TDE_acc", "=", "torch", ".", "pow", "(", "TDE_acc", ",", "self", ".", "gamma", ")", "\n", "TE_acc", "=", "torch", ".", "pow", "(", "TE_acc", ",", "self", ".", "gamma", ")", "\n", "weight", "=", "TDE_acc", "/", "(", "TDE_acc", "+", "TE_acc", ")", "\n", "# student td loss", "\n", "te_loss", "=", "self", ".", "CE_loss", "(", "logits_student", ",", "labels", ")", "\n", "\n", "# student tde loss", "\n", "prob_tde", "=", "F", ".", "softmax", "(", "logits_TDE", ",", "-", "1", ")", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "prob_student", "=", "F", ".", "softmax", "(", "logits_student", ",", "-", "1", ")", "\n", "tde_loss", "=", "-", "prob_tde", "*", "prob_student", ".", "log", "(", ")", "\n", "tde_loss", "=", "tde_loss", ".", "sum", "(", "1", ")", "\n", "\n", "loss", "=", "(", "weight", "*", "tde_loss", ")", ".", "mean", "(", ")", "+", "(", "(", "1", "-", "weight", ")", "*", "te_loss", ")", ".", "mean", "(", ")", "\n", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.beierzhu_xerm.loss.FocalLoss.FocalLoss.__init__": [[6, 11], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gamma", "=", "0", ",", "alpha", "=", "None", ",", "size_average", "=", "True", ")", ":", "\n", "        ", "super", "(", "FocalLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "alpha", "=", "alpha", "\n", "self", ".", "size_average", "=", "size_average", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.loss.FocalLoss.FocalLoss.forward": [[12, 30], ["target.view.view.view", "torch.log_softmax", "torch.log_softmax", "torch.log_softmax", "logpt.view.view.gather", "logpt.view.view.view", "logpt.view.view.detach().exp", "input.contiguous().view.contiguous().view.dim", "input.contiguous().view.contiguous().view.view", "input.contiguous().view.contiguous().view.transpose", "input.contiguous().view.contiguous().view.contiguous().view", "loss.mean", "loss.sum", "input.contiguous().view.contiguous().view.size", "input.contiguous().view.contiguous().view.size", "input.contiguous().view.contiguous().view.size", "logpt.view.view.detach", "input.contiguous().view.contiguous().view.contiguous"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size"], ["", "def", "forward", "(", "self", ",", "input", ",", "target", ")", ":", "\n", "        ", "if", "input", ".", "dim", "(", ")", ">", "2", ":", "\n", "            ", "input", "=", "input", ".", "view", "(", "input", ".", "size", "(", "0", ")", ",", "input", ".", "size", "(", "1", ")", ",", "-", "1", ")", "# N,C,H,W => N,C,H*W", "\n", "input", "=", "input", ".", "transpose", "(", "1", ",", "2", ")", "# N,C,H*W => N,H*W,C", "\n", "input", "=", "input", ".", "contiguous", "(", ")", ".", "view", "(", "-", "1", ",", "input", ".", "size", "(", "2", ")", ")", "# N,H*W,C => N*H*W,C", "\n", "", "target", "=", "target", ".", "view", "(", "-", "1", ",", "1", ")", "\n", "\n", "logpt", "=", "F", ".", "log_softmax", "(", "input", ",", "dim", "=", "-", "1", ")", "\n", "logpt", "=", "logpt", ".", "gather", "(", "1", ",", "target", ")", "\n", "logpt", "=", "logpt", ".", "view", "(", "-", "1", ")", "\n", "pt", "=", "logpt", ".", "detach", "(", ")", ".", "exp", "(", ")", "\n", "\n", "if", "self", ".", "alpha", "is", "not", "None", ":", "\n", "            ", "assert", "False", "\n", "\n", "", "loss", "=", "-", "1", "*", "(", "1", "-", "pt", ")", "**", "self", ".", "gamma", "*", "logpt", "\n", "if", "self", ".", "size_average", ":", "return", "loss", ".", "mean", "(", ")", "\n", "else", ":", "return", "loss", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.loss.FocalLoss.create_loss": [[31, 33], ["FocalLoss.FocalLoss"], "function", ["None"], ["", "", "def", "create_loss", "(", ")", ":", "\n", "    ", "return", "FocalLoss", "(", "gamma", "=", "2.0", ")", "", "", ""]], "home.repos.pwc.inspect_result.beierzhu_xerm.loss.LADELoss.LADELoss.__init__": [[15, 28], ["torch.nn.Module.__init__", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "torch.tensor().float().cuda", "calculate_prior().float().cuda", "LADELoss.LADELoss.img_num_per_cls.sum", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "torch.tensor().float", "calculate_prior().float", "LADELoss.LADELoss.img_num_per_cls.float", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "LADELoss.LADELoss.img_num_per_cls.float", "calculate_prior"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.calculate_prior"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", "=", "10", ",", "img_max", "=", "None", ",", "prior", "=", "None", ",", "prior_txt", "=", "None", ",", "remine_lambda", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "img_max", "is", "not", "None", "or", "prior_txt", "is", "not", "None", ":", "\n", "            ", "self", ".", "img_num_per_cls", "=", "calculate_prior", "(", "num_classes", ",", "img_max", ",", "prior", ",", "prior_txt", ",", "return_num", "=", "True", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "prior", "=", "self", ".", "img_num_per_cls", "/", "self", ".", "img_num_per_cls", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "prior", "=", "None", "\n", "\n", "", "self", ".", "balanced_prior", "=", "torch", ".", "tensor", "(", "1.", "/", "num_classes", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "remine_lambda", "=", "remine_lambda", "\n", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "self", ".", "cls_weight", "=", "(", "self", ".", "img_num_per_cls", ".", "float", "(", ")", "/", "torch", ".", "sum", "(", "self", ".", "img_num_per_cls", ".", "float", "(", ")", ")", ")", ".", "cuda", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.loss.LADELoss.LADELoss.mine_lower_bound": [[29, 35], ["x_p.size", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "numpy.log"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size"], ["", "def", "mine_lower_bound", "(", "self", ",", "x_p", ",", "x_q", ",", "num_samples_per_cls", ")", ":", "\n", "        ", "N", "=", "x_p", ".", "size", "(", "-", "1", ")", "\n", "first_term", "=", "torch", ".", "sum", "(", "x_p", ",", "-", "1", ")", "/", "(", "num_samples_per_cls", "+", "1e-8", ")", "\n", "second_term", "=", "torch", ".", "logsumexp", "(", "x_q", ",", "-", "1", ")", "-", "np", ".", "log", "(", "N", ")", "\n", "\n", "return", "first_term", "-", "second_term", ",", "first_term", ",", "second_term", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.loss.LADELoss.LADELoss.remine_lower_bound": [[36, 40], ["LADELoss.LADELoss.mine_lower_bound"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.loss.LADELoss.LADELoss.mine_lower_bound"], ["", "def", "remine_lower_bound", "(", "self", ",", "x_p", ",", "x_q", ",", "num_samples_per_cls", ")", ":", "\n", "        ", "loss", ",", "first_term", ",", "second_term", "=", "self", ".", "mine_lower_bound", "(", "x_p", ",", "x_q", ",", "num_samples_per_cls", ")", "\n", "reg", "=", "(", "second_term", "**", "2", ")", "*", "self", ".", "remine_lambda", "\n", "return", "loss", "-", "reg", ",", "first_term", ",", "second_term", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.loss.LADELoss.LADELoss.forward": [[41, 54], ["torch.sum().float", "torch.sum().float", "torch.sum().float", "torch.sum().float", "LADELoss.LADELoss.remine_lower_bound", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.arange().view().type_as", "torch.arange().view().type_as", "torch.arange().view().type_as", "torch.arange().view().type_as", "torch.log", "torch.log", "torch.log", "torch.log", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.log", "torch.log", "torch.log", "torch.log", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view().type_as", "torch.arange().view().type_as", "torch.arange().view().type_as", "torch.arange().view().type_as", "torch.arange", "torch.arange", "torch.arange", "torch.arange", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange().view", "torch.arange", "torch.arange", "torch.arange", "torch.arange"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.loss.LADELoss.LADELoss.remine_lower_bound"], ["", "def", "forward", "(", "self", ",", "y_pred", ",", "target", ",", "q_pred", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        y_pred: N x C\n        target: N\n        \"\"\"", "\n", "per_cls_pred_spread", "=", "y_pred", ".", "T", "*", "(", "target", "==", "torch", ".", "arange", "(", "0", ",", "self", ".", "num_classes", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "type_as", "(", "target", ")", ")", "# C x N", "\n", "pred_spread", "=", "(", "y_pred", "-", "torch", ".", "log", "(", "self", ".", "prior", "+", "1e-9", ")", "+", "torch", ".", "log", "(", "self", ".", "balanced_prior", "+", "1e-9", ")", ")", ".", "T", "# C x N", "\n", "\n", "num_samples_per_cls", "=", "torch", ".", "sum", "(", "target", "==", "torch", ".", "arange", "(", "0", ",", "self", ".", "num_classes", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "type_as", "(", "target", ")", ",", "-", "1", ")", ".", "float", "(", ")", "# C", "\n", "estim_loss", ",", "first_term", ",", "second_term", "=", "self", ".", "remine_lower_bound", "(", "per_cls_pred_spread", ",", "pred_spread", ",", "num_samples_per_cls", ")", "\n", "\n", "loss", "=", "-", "torch", ".", "sum", "(", "estim_loss", "*", "self", ".", "cls_weight", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.loss.LADELoss.create_loss": [[55, 63], ["print", "LADELoss.LADELoss"], "function", ["None"], ["", "", "def", "create_loss", "(", "num_classes", ",", "img_max", "=", "None", ",", "prior", "=", "None", ",", "prior_txt", "=", "None", ",", "remine_lambda", "=", "0.1", ")", ":", "\n", "    ", "print", "(", "\"Loading LADELoss.\"", ")", "\n", "return", "LADELoss", "(", "\n", "num_classes", "=", "num_classes", ",", "\n", "img_max", "=", "img_max", ",", "\n", "prior", "=", "prior", ",", "\n", "prior_txt", "=", "prior_txt", ",", "\n", "remine_lambda", "=", "remine_lambda", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.loss.xERMLoss.xERMLoss.__init__": [[6, 10], ["torch.Module.__init__", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gamma", "=", "2", ")", ":", "\n", "        ", "super", "(", "xERMLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "XE_loss", "=", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "'none'", ")", "\n", "self", ".", "gamma", "=", "gamma", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.loss.xERMLoss.xERMLoss.forward": [[11, 32], ["xERMLoss.xERMLoss.XE_loss", "xERMLoss.xERMLoss.XE_loss", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "xERMLoss.xERMLoss.XE_loss", "torch.softmax().clone().detach", "torch.softmax().clone().detach", "torch.softmax().clone().detach", "torch.softmax", "torch.softmax", "torch.softmax", "loss_CF.sum.sum.sum", "torch.softmax.log", "torch.softmax().clone", "torch.softmax().clone", "torch.softmax().clone", "torch.softmax", "torch.softmax", "torch.softmax"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "logits_F", ",", "logits_CF", ",", "logits_FCF", ",", "labels", ")", ":", "\n", "# calculate w_cf", "\n", "        ", "XE_CF", "=", "self", ".", "XE_loss", "(", "logits_CF", ",", "labels", ")", "\n", "XE_F", "=", "self", ".", "XE_loss", "(", "logits_F", ",", "labels", ")", "\n", "\n", "XE_CF", "=", "torch", ".", "pow", "(", "XE_CF", ",", "self", ".", "gamma", ")", "\n", "XE_F", "=", "torch", ".", "pow", "(", "XE_F", ",", "self", ".", "gamma", ")", "\n", "\n", "w_cf", "=", "XE_CF", "/", "(", "XE_CF", "+", "XE_F", "+", "1e-5", ")", "\n", "w_f", "=", "1", "-", "w_cf", "\n", "# factual loss", "\n", "loss_F", "=", "self", ".", "XE_loss", "(", "logits_FCF", ",", "labels", ")", "\n", "# counterfacutal loss", "\n", "prob_CF", "=", "F", ".", "softmax", "(", "logits_CF", ",", "-", "1", ")", ".", "clone", "(", ")", ".", "detach", "(", ")", "\n", "prob_FCF", "=", "F", ".", "softmax", "(", "logits_FCF", ",", "-", "1", ")", "\n", "loss_CF", "=", "-", "prob_CF", "*", "prob_FCF", ".", "log", "(", ")", "\n", "loss_CF", "=", "loss_CF", ".", "sum", "(", "1", ")", "\n", "\n", "loss", "=", "(", "w_cf", "*", "loss_CF", ")", ".", "mean", "(", ")", "+", "(", "w_f", "*", "loss_F", ")", ".", "mean", "(", ")", "\n", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.beierzhu_xerm.loss.PriorCELoss.PriorCELoss.__init__": [[15, 21], ["torch.Module.__init__", "calculate_prior().float().cuda", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "PriorCELoss.PriorCELoss.img_num_per_cls.sum", "calculate_prior().float", "calculate_prior"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.calculate_prior"], ["    ", "def", "__init__", "(", "self", ",", "num_classes", ",", "img_max", "=", "None", ",", "prior", "=", "None", ",", "prior_txt", "=", "None", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "img_num_per_cls", "=", "calculate_prior", "(", "num_classes", ",", "img_max", ",", "prior", ",", "prior_txt", ",", "return_num", "=", "True", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "self", ".", "prior", "=", "self", ".", "img_num_per_cls", "/", "self", ".", "img_num_per_cls", ".", "sum", "(", ")", "\n", "self", ".", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "self", ".", "num_classes", "=", "num_classes", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.loss.PriorCELoss.PriorCELoss.forward": [[22, 26], ["PriorCELoss.PriorCELoss.criterion", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "logits", "=", "x", "+", "torch", ".", "log", "(", "self", ".", "prior", "+", "1e-9", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "logits", ",", "y", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.loss.PriorCELoss.create_loss": [[28, 35], ["print", "PriorCELoss.PriorCELoss"], "function", ["None"], ["", "", "def", "create_loss", "(", "num_classes", ",", "img_max", "=", "None", ",", "prior", "=", "None", ",", "prior_txt", "=", "None", ")", ":", "\n", "    ", "print", "(", "'Loading PriorCELoss Loss.'", ")", "\n", "return", "PriorCELoss", "(", "\n", "num_classes", "=", "num_classes", ",", "\n", "img_max", "=", "img_max", ",", "\n", "prior", "=", "prior", ",", "\n", "prior_txt", "=", "prior_txt", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.__init__": [[22, 82], ["torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "logger.Logger", "torch.zeros().numpy", "torch.zeros().numpy", "torch.zeros().numpy", "torch.zeros().numpy", "torch.zeros().numpy", "torch.zeros().numpy", "torch.zeros().numpy", "torch.zeros().numpy", "torch.zeros().numpy", "torch.zeros().numpy", "torch.zeros().numpy", "torch.zeros().numpy", "torch.zeros().numpy", "torch.zeros().numpy", "torch.zeros().numpy", "torch.zeros().numpy", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "run_networks.model.init_models", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "torch.utils.tensorboard.SummaryWriter", "print", "sklearn.decomposition.IncrementalPCA", "run_networks.model.load_model", "print", "len", "int", "print", "run_networks.model.init_optimizers", "run_networks.model.init_criterions", "os.path.join", "run_networks.model.logger.log_cfg", "run_networks.model.logger.log_cfg", "data.items", "data.items", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "os.path.join", "os.path.join", "int"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.init_models", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.load_model", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.init_optimizers", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.init_criterions", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.logger.Logger.log_cfg", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.logger.Logger.log_cfg"], ["self", ".", "training_opt", "=", "self", ".", "config", "[", "'training_opt'", "]", "\n", "self", ".", "data", "=", "data", "\n", "self", ".", "test_mode", "=", "test", "\n", "self", ".", "num_gpus", "=", "torch", ".", "cuda", ".", "device_count", "(", ")", "\n", "self", ".", "do_shuffle", "=", "config", "[", "'shuffle'", "]", "if", "'shuffle'", "in", "config", "else", "False", "\n", "\n", "# Setup logger", "\n", "self", ".", "logger", "=", "Logger", "(", "self", ".", "training_opt", "[", "'log_dir'", "]", ")", "\n", "\n", "# init moving average", "\n", "self", ".", "embed_mean", "=", "torch", ".", "zeros", "(", "int", "(", "self", ".", "training_opt", "[", "'feature_dim'", "]", ")", ")", ".", "numpy", "(", ")", "\n", "self", ".", "mu", "=", "0.9", "\n", "\n", "# Initialize model", "\n", "self", ".", "init_models", "(", ")", "\n", "\n", "# apply incremental pca", "\n", "self", ".", "apply_pca", "=", "(", "'apply_ipca'", "in", "self", ".", "config", ")", "and", "self", ".", "config", "[", "'apply_ipca'", "]", "\n", "if", "self", ".", "apply_pca", ":", "\n", "            ", "print", "(", "'==========> Apply Incremental PCA <======='", ")", "\n", "self", ".", "pca", "=", "IncrementalPCA", "(", "n_components", "=", "self", ".", "config", "[", "'num_components'", "]", ",", "batch_size", "=", "self", ".", "training_opt", "[", "'batch_size'", "]", ")", "\n", "\n", "# Load pre-trained model parameters", "\n", "", "if", "'model_dir'", "in", "self", ".", "config", "and", "self", ".", "config", "[", "'model_dir'", "]", "is", "not", "None", ":", "\n", "            ", "self", ".", "load_model", "(", "self", ".", "config", "[", "'model_dir'", "]", ")", "\n", "\n", "# Under training mode, initialize training steps, optimizers, schedulers, criterions", "\n", "", "if", "not", "self", ".", "test_mode", ":", "\n", "\n", "# If using steps for training, we need to calculate training steps ", "\n", "# for each epoch based on actual number of training data instead of ", "\n", "# oversampled data number ", "\n", "            ", "print", "(", "'Using steps for training.'", ")", "\n", "self", ".", "training_data_num", "=", "len", "(", "self", ".", "data", "[", "'train'", "]", ".", "dataset", ")", "\n", "self", ".", "epoch_steps", "=", "int", "(", "self", ".", "training_data_num", "/", "self", ".", "training_opt", "[", "'batch_size'", "]", ")", "\n", "\n", "# Initialize model optimizer and scheduler", "\n", "print", "(", "'Initializing model optimizer.'", ")", "\n", "self", ".", "init_optimizers", "(", "self", ".", "model_optim_params_dict", ")", "\n", "self", ".", "init_criterions", "(", ")", "\n", "\n", "# Set up log file", "\n", "self", ".", "log_file", "=", "os", ".", "path", ".", "join", "(", "self", ".", "training_opt", "[", "'log_dir'", "]", ",", "'log.txt'", ")", "\n", "self", ".", "logger", ".", "log_cfg", "(", "self", ".", "config", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "log_file", "=", "None", "\n", "\n", "", "", "def", "init_models", "(", "self", ",", "optimizer", "=", "True", ")", ":", "\n", "        ", "networks_defs", "=", "self", ".", "config", "[", "'networks'", "]", "\n", "self", ".", "networks", "=", "{", "}", "\n", "self", ".", "model_optim_params_dict", "=", "{", "}", "\n", "self", ".", "model_optim_named_params", "=", "{", "}", "\n", "\n", "print", "(", "\"Using\"", ",", "torch", ".", "cuda", ".", "device_count", "(", ")", ",", "\"GPUs.\"", ")", "\n", "\n", "for", "key", ",", "val", "in", "networks_defs", ".", "items", "(", ")", ":", "\n", "# Networks", "\n", "            ", "def_file", "=", "val", "[", "'def_file'", "]", "\n", "model_args", "=", "val", "[", "'params'", "]", "\n", "model_args", ".", "update", "(", "{", "'test'", ":", "self", ".", "test_mode", "}", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.write_summary": [[83, 90], ["kargs.items", "hasattr", "run_networks.model.tensorboard.add_scalar"], "methods", ["None"], ["self", ".", "networks", "[", "key", "]", "=", "source_import", "(", "def_file", ")", ".", "create_model", "(", "**", "model_args", ")", "\n", "self", ".", "networks", "[", "key", "]", "=", "nn", ".", "DataParallel", "(", "self", ".", "networks", "[", "key", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "if", "'fix'", "in", "val", "and", "val", "[", "'fix'", "]", ":", "\n", "                ", "print", "(", "'Freezing weights of module {}'", ".", "format", "(", "key", ")", ")", "\n", "for", "param_name", ",", "param", "in", "self", ".", "networks", "[", "key", "]", ".", "named_parameters", "(", ")", ":", "\n", "# Freeze all parameters except final fc layer", "\n", "                    ", "if", "'fc'", "not", "in", "param_name", ":", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.init_models": [[92, 135], ["print", "networks_defs.items", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "torch.cuda.device_count", "model_args.update", "utils.source_import().create_model", "torch.DataParallel().cuda", "torch.DataParallel().cuda", "torch.DataParallel().cuda", "torch.DataParallel().cuda", "run_networks.model.model_optim_named_params.update", "print", "run_networks.model.networks[].named_parameters", "print", "dict", "run_networks.model.networks[].parameters", "utils.source_import", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "run_networks.model.networks[].named_parameters", "run_networks.model.networks[].named_parameters", "print"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNext152Feature.create_model", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.source_import"], ["", "", "print", "(", "'=====> Freezing: {} | False'", ".", "format", "(", "key", ")", ")", "\n", "\n", "", "if", "'fix_set'", "in", "val", ":", "\n", "                ", "for", "fix_layer", "in", "val", "[", "'fix_set'", "]", ":", "\n", "                    ", "for", "param_name", ",", "param", "in", "self", ".", "networks", "[", "key", "]", ".", "named_parameters", "(", ")", ":", "\n", "                        ", "if", "fix_layer", "==", "param_name", ":", "\n", "                            ", "param", ".", "requires_grad", "=", "False", "\n", "print", "(", "'=====> Freezing: {} | {}'", ".", "format", "(", "param_name", ",", "param", ".", "requires_grad", ")", ")", "\n", "continue", "\n", "\n", "\n", "# Optimizer list", "\n", "", "", "", "", "optim_params", "=", "val", "[", "'optim_params'", "]", "\n", "self", ".", "model_optim_named_params", ".", "update", "(", "dict", "(", "self", ".", "networks", "[", "key", "]", ".", "named_parameters", "(", ")", ")", ")", "\n", "self", ".", "model_optim_params_dict", "[", "key", "]", "=", "{", "'params'", ":", "self", ".", "networks", "[", "key", "]", ".", "parameters", "(", ")", ",", "\n", "'lr'", ":", "optim_params", "[", "'lr'", "]", ",", "\n", "'momentum'", ":", "optim_params", "[", "'momentum'", "]", ",", "\n", "'weight_decay'", ":", "optim_params", "[", "'weight_decay'", "]", "}", "\n", "\n", "", "", "def", "init_criterions", "(", "self", ")", ":", "\n", "        ", "criterion_defs", "=", "self", ".", "config", "[", "'criterions'", "]", "\n", "self", ".", "criterions", "=", "{", "}", "\n", "self", ".", "criterion_weights", "=", "{", "}", "\n", "\n", "for", "key", ",", "val", "in", "criterion_defs", ".", "items", "(", ")", ":", "\n", "            ", "def_file", "=", "val", "[", "'def_file'", "]", "\n", "loss_args", "=", "list", "(", "val", "[", "'loss_params'", "]", ".", "values", "(", ")", ")", "\n", "\n", "self", ".", "criterions", "[", "key", "]", "=", "source_import", "(", "def_file", ")", ".", "create_loss", "(", "*", "loss_args", ")", ".", "cuda", "(", ")", "\n", "self", ".", "criterion_weights", "[", "key", "]", "=", "val", "[", "'weight'", "]", "\n", "\n", "if", "val", "[", "'optim_params'", "]", ":", "\n", "                ", "print", "(", "'Initializing criterion optimizer.'", ")", "\n", "optim_params", "=", "val", "[", "'optim_params'", "]", "\n", "optim_params", "=", "[", "{", "'params'", ":", "self", ".", "criterions", "[", "key", "]", ".", "parameters", "(", ")", ",", "\n", "'lr'", ":", "optim_params", "[", "'lr'", "]", ",", "\n", "'momentum'", ":", "optim_params", "[", "'momentum'", "]", ",", "\n", "'weight_decay'", ":", "optim_params", "[", "'weight_decay'", "]", "}", "]", "\n", "# Initialize criterion optimizer and scheduler", "\n", "self", ".", "criterion_optimizer", ",", "self", ".", "criterion_optimizer_scheduler", "=", "self", ".", "init_optimizers", "(", "optim_params", ")", "\n", "", "else", ":", "\n", "                ", "self", ".", "criterion_optimizer", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.init_criterions": [[136, 160], ["criterion_defs.items", "utils.source_import().create_loss().cuda", "print", "run_networks.model.init_optimizers", "utils.source_import().create_loss", "run_networks.model.criterions[].parameters", "utils.source_import"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.init_optimizers", "home.repos.pwc.inspect_result.beierzhu_xerm.loss.PriorCELoss.create_loss", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.source_import"], ["", "", "", "def", "init_optimizers", "(", "self", ",", "optim_params_dict", ")", ":", "\n", "        ", "'''\n        seperate backbone optimizer and classifier optimizer\n        by Kaihua\n        '''", "\n", "networks_defs", "=", "self", ".", "config", "[", "'networks'", "]", "\n", "self", ".", "model_optimizer_dict", "=", "{", "}", "\n", "self", ".", "model_scheduler_dict", "=", "{", "}", "\n", "\n", "for", "key", ",", "val", "in", "networks_defs", ".", "items", "(", ")", ":", "\n", "# optimizer", "\n", "            ", "if", "'optimizer'", "in", "self", ".", "training_opt", "and", "self", ".", "training_opt", "[", "'optimizer'", "]", "==", "'adam'", ":", "\n", "                ", "print", "(", "'=====> Using Adam optimizer'", ")", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "[", "optim_params_dict", "[", "key", "]", ",", "]", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'=====> Using SGD optimizer'", ")", "\n", "optimizer", "=", "optim", ".", "SGD", "(", "[", "optim_params_dict", "[", "key", "]", ",", "]", ")", "\n", "", "self", ".", "model_optimizer_dict", "[", "key", "]", "=", "optimizer", "\n", "# scheduler", "\n", "scheduler_params", "=", "val", "[", "'scheduler_params'", "]", "\n", "if", "scheduler_params", "[", "'coslr'", "]", ":", "\n", "                ", "print", "(", "\"===> Module {} : Using coslr eta_min={}\"", ".", "format", "(", "key", ",", "scheduler_params", "[", "'endlr'", "]", ")", ")", "\n", "self", ".", "model_scheduler_dict", "[", "key", "]", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "\n", "optimizer", ",", "self", ".", "training_opt", "[", "'num_epochs'", "]", ",", "eta_min", "=", "scheduler_params", "[", "'endlr'", "]", ")", "\n", "", "elif", "scheduler_params", "[", "'warmup'", "]", ":", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.init_optimizers": [[161, 195], ["networks_defs.items", "print", "torch.Adam", "torch.Adam", "torch.Adam", "torch.Adam", "print", "torch.SGD", "torch.SGD", "torch.SGD", "torch.SGD", "print", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "print", "utils.WarmupMultiStepLR", "torch.lr_scheduler.StepLR", "torch.lr_scheduler.StepLR", "torch.lr_scheduler.StepLR", "torch.lr_scheduler.StepLR"], "methods", ["None"], ["                ", "print", "(", "\"===> Module {} : Using warmup\"", ".", "format", "(", "key", ")", ")", "\n", "self", ".", "model_scheduler_dict", "[", "key", "]", "=", "WarmupMultiStepLR", "(", "optimizer", ",", "scheduler_params", "[", "'lr_step'", "]", ",", "\n", "gamma", "=", "scheduler_params", "[", "'lr_factor'", "]", ",", "warmup_epochs", "=", "scheduler_params", "[", "'warm_epoch'", "]", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "f'===> Module {key}: Using StepLR'", ")", "\n", "self", ".", "model_scheduler_dict", "[", "key", "]", "=", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "\n", "step_size", "=", "scheduler_params", "[", "'step_size'", "]", ",", "\n", "gamma", "=", "scheduler_params", "[", "'gamma'", "]", ")", "\n", "\n", "", "", "return", "\n", "\n", "", "def", "show_current_lr", "(", "self", ")", ":", "\n", "        ", "max_lr", "=", "0.0", "\n", "for", "key", ",", "val", "in", "self", ".", "model_optimizer_dict", ".", "items", "(", ")", ":", "\n", "            ", "lr_set", "=", "list", "(", "set", "(", "[", "para", "[", "'lr'", "]", "for", "para", "in", "val", ".", "param_groups", "]", ")", ")", "\n", "if", "max", "(", "lr_set", ")", ">", "max_lr", ":", "\n", "                ", "max_lr", "=", "max", "(", "lr_set", ")", "\n", "", "lr_set", "=", "','", ".", "join", "(", "[", "str", "(", "i", ")", "for", "i", "in", "lr_set", "]", ")", "\n", "print_str", "=", "[", "'=====> Current Learning Rate of model {} : {}'", ".", "format", "(", "key", ",", "str", "(", "lr_set", ")", ")", "]", "\n", "print_write", "(", "print_str", ",", "self", ".", "log_file", ")", "\n", "", "return", "max_lr", "\n", "\n", "\n", "", "def", "batch_forward", "(", "self", ",", "inputs", ",", "labels", "=", "None", ",", "feature_ext", "=", "False", ",", "phase", "=", "'train'", ")", ":", "\n", "        ", "'''\n        This is a general single batch running function. \n        '''", "\n", "\n", "# Calculate Features", "\n", "self", ".", "features", "=", "self", ".", "networks", "[", "'feat_model'", "]", "(", "inputs", ")", "\n", "\n", "if", "self", ".", "apply_pca", ":", "\n", "            ", "if", "phase", "==", "'train'", "and", "self", ".", "features", ".", "shape", "[", "0", "]", ">", "0", ":", "\n", "                ", "self", ".", "pca", ".", "partial_fit", "(", "self", ".", "features", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.show_current_lr": [[196, 206], ["run_networks.model.model_optimizer_dict.items", "list", "utils.print_write", "set", "max", "max", "str", "str"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.print_write", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max"], ["                ", "pca_feat", "=", "self", ".", "pca", ".", "transform", "(", "self", ".", "features", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "pca_feat", "[", ":", ",", "0", "]", "=", "0.0", "\n", "new_feat", "=", "self", ".", "pca", ".", "inverse_transform", "(", "pca_feat", ")", "\n", "self", ".", "features", "=", "torch", ".", "from_numpy", "(", "new_feat", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "features", ".", "device", ")", "\n", "\n", "# update moving average", "\n", "", "", "if", "phase", "==", "'train'", ":", "\n", "            ", "self", ".", "embed_mean", "=", "self", ".", "mu", "*", "self", ".", "embed_mean", "+", "self", ".", "features", ".", "detach", "(", ")", ".", "mean", "(", "0", ")", ".", "view", "(", "-", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "# If not just extracting features, calculate logits", "\n", "", "if", "not", "feature_ext", ":", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.batch_forward": [[208, 233], ["run_networks.model.pca.partial_fit", "run_networks.model.pca.transform", "run_networks.model.pca.inverse_transform", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "run_networks.model.features.detach().mean().view().cpu().numpy", "run_networks.model.features.cpu().numpy", "run_networks.model.features.cpu().numpy", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "run_networks.model.features.detach().mean().view().cpu", "run_networks.model.features.cpu", "run_networks.model.features.cpu", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "run_networks.model.features.detach().mean().view", "run_networks.model.features.detach().mean", "run_networks.model.features.detach"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to", "home.repos.pwc.inspect_result.beierzhu_xerm.model.loss.RIDELossWithDistill.to"], ["            ", "self", ".", "logits", ",", "self", ".", "route_logits", "=", "self", ".", "networks", "[", "'classifier'", "]", "(", "self", ".", "features", ",", "labels", ",", "self", ".", "embed_mean", ")", "\n", "\n", "", "", "def", "batch_backward", "(", "self", ",", "print_grad", "=", "False", ")", ":", "\n", "# Zero out optimizer gradients", "\n", "        ", "for", "key", ",", "optimizer", "in", "self", ".", "model_optimizer_dict", ".", "items", "(", ")", ":", "\n", "            ", "optimizer", ".", "zero_grad", "(", ")", "\n", "", "if", "self", ".", "criterion_optimizer", ":", "\n", "            ", "self", ".", "criterion_optimizer", ".", "zero_grad", "(", ")", "\n", "# Back-propagation from loss outputs", "\n", "", "self", ".", "loss", ".", "backward", "(", ")", "\n", "# display gradient", "\n", "if", "self", ".", "training_opt", "[", "'display_grad'", "]", ":", "\n", "            ", "print_grad_norm", "(", "self", ".", "model_optim_named_params", ",", "print_write", ",", "self", ".", "log_file", ",", "verbose", "=", "print_grad", ")", "\n", "# Step optimizers", "\n", "", "for", "key", ",", "optimizer", "in", "self", ".", "model_optimizer_dict", ".", "items", "(", ")", ":", "\n", "            ", "optimizer", ".", "step", "(", ")", "\n", "", "if", "self", ".", "criterion_optimizer", ":", "\n", "            ", "self", ".", "criterion_optimizer", ".", "step", "(", ")", "\n", "\n", "", "", "def", "batch_loss", "(", "self", ",", "labels", ")", ":", "\n", "        ", "self", ".", "loss", "=", "0", "\n", "\n", "# First, apply performance loss", "\n", "if", "'PerformanceLoss'", "in", "self", ".", "criterions", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "loss_perf", "=", "self", ".", "criterions", "[", "'PerformanceLoss'", "]", "(", "self", ".", "logits", ",", "labels", ")", "\n", "self", ".", "loss_perf", "*=", "self", ".", "criterion_weights", "[", "'PerformanceLoss'", "]", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.batch_backward": [[234, 250], ["run_networks.model.model_optimizer_dict.items", "run_networks.model.loss.backward", "run_networks.model.model_optimizer_dict.items", "optimizer.zero_grad", "run_networks.model.criterion_optimizer.zero_grad", "utils.print_grad_norm", "optimizer.step", "run_networks.model.criterion_optimizer.step"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.print_grad_norm"], ["self", ".", "loss", "+=", "self", ".", "loss_perf", "\n", "\n", "# Apply loss on Route Weights if set up", "\n", "", "if", "'RouteWeightLoss'", "in", "self", ".", "criterions", ".", "keys", "(", ")", ":", "\n", "            ", "self", ".", "loss_route", "=", "self", ".", "criterions", "[", "'RouteWeightLoss'", "]", "(", "self", ".", "route_logits", ",", "labels", ")", "\n", "self", ".", "loss_route", "=", "self", ".", "loss_route", "*", "self", ".", "criterion_weights", "[", "'RouteWeightLoss'", "]", "\n", "# Add Route Weights loss to total loss", "\n", "self", ".", "loss", "+=", "self", ".", "loss_route", "\n", "\n", "\n", "", "", "def", "shuffle_batch", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "index", "=", "torch", ".", "randperm", "(", "x", ".", "size", "(", "0", ")", ")", "\n", "x", "=", "x", "[", "index", "]", "\n", "y", "=", "y", "[", "index", "]", "\n", "return", "x", ",", "y", "\n", "\n", "", "def", "xERM_train", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.batch_loss": [[251, 269], ["torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "run_networks.model.criterions.keys", "run_networks.model.criterions.keys", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp", "torch.exp"], "methods", ["None"], ["        ", "print", "(", "'=> Build xERM model'", ")", "\n", "now", "=", "datetime", ".", "now", "(", ")", "\n", "timestamp", "=", "datetime", ".", "timestamp", "(", "now", ")", "\n", "dt_object", "=", "datetime", ".", "fromtimestamp", "(", "timestamp", ")", "\n", "time_str", "=", "dt_object", ".", "isoformat", "(", ")", "\n", "\n", "self", ".", "xERM_log", "=", "os", ".", "path", ".", "join", "(", "self", ".", "training_opt", "[", "'log_dir'", "]", ",", "f'{time_str}_distil_log.txt'", ")", "\n", "networks_defs", "=", "self", ".", "config", "[", "'networks'", "]", "\n", "xERM_networks", "=", "{", "}", "\n", "xERM_optim_params_dict", "=", "{", "}", "\n", "xERM_optim_named_params", "=", "{", "}", "\n", "\n", "for", "key", ",", "val", "in", "networks_defs", ".", "items", "(", ")", ":", "\n", "# Networks", "\n", "            ", "def_file", "=", "val", "[", "'def_file'", "]", "\n", "model_args", "=", "val", "[", "'params'", "]", "\n", "model_args", ".", "update", "(", "{", "'test'", ":", "False", "}", ")", "\n", "\n", "xERM_networks", "[", "key", "]", "=", "source_import", "(", "def_file", ")", ".", "create_model", "(", "**", "model_args", ")", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.shuffle_batch": [[270, 275], ["torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "x.size"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size"], ["xERM_networks", "[", "key", "]", "=", "nn", ".", "DataParallel", "(", "xERM_networks", "[", "key", "]", ")", ".", "cuda", "(", ")", "\n", "# Optimizer list", "\n", "optim_params", "=", "val", "[", "'optim_params'", "]", "\n", "xERM_optim_named_params", ".", "update", "(", "dict", "(", "xERM_networks", "[", "key", "]", ".", "named_parameters", "(", ")", ")", ")", "\n", "xERM_optim_params_dict", "[", "key", "]", "=", "{", "'params'", ":", "xERM_networks", "[", "key", "]", ".", "parameters", "(", ")", ",", "\n", "'lr'", ":", "optim_params", "[", "'lr'", "]", ",", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.xERM_train": [[276, 534], ["print", "datetime.datetime.datetime.now", "datetime.datetime.datetime.timestamp", "datetime.datetime.datetime.fromtimestamp", "datetime.datetime.fromtimestamp.isoformat", "os.path.join", "networks_defs.items", "xERM_networks.items", "print", "networks_defs.items", "print", "print", "xERM_loss.xERMLoss.xERMLoss", "run_networks.model.networks.items", "len", "range", "print", "run_networks.model.xERM_eval", "print", "run_networks.model.xERM_eval", "model_args.update", "utils.source_import().create_model", "torch.DataParallel().cuda", "torch.DataParallel().cuda", "torch.DataParallel().cuda", "torch.DataParallel().cuda", "xERM_optim_named_params.update", "os.path.join", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "model.state_dict", "model.state_dict.update", "all", "model.load_state_dict", "torch.SGD", "torch.SGD", "torch.SGD", "torch.SGD", "model.parameters", "run_networks.model.eval", "xERM_networks.items", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "xERM_scheduler_dict.items", "utils.MiscMeter", "utils.MiscMeter", "utils.MiscMeter", "utils.MiscMeter", "enumerate", "run_networks.model.eval_with_preds", "utils.MiscMeter", "utils.MiscMeter", "utils.MiscMeter", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "xERM_networks.items", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "utils.print_w", "utils.shot_acc", "utils.print_w", "utils.print_w", "utils.shot_acc", "utils.print_w", "utils.print_w", "utils.shot_acc", "utils.print_w", "utils.print_w", "copy.deepcopy", "copy.deepcopy", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "dict", "xERM_networks[].parameters", "print", "print", "print", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "run_networks.model.train", "scheduler.step", "print", "xERM_loss.xERMLoss.xERMLoss.", "utils.MiscMeter.update", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "utils.MiscMeter.update", "utils.MiscMeter.update", "utils.MiscMeter.update", "xERM_scheduler_dict.items", "loss.xERMLoss.xERMLoss.backward", "xERM_scheduler_dict.items", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "run_networks.model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tqdm.tqdm.tqdm", "utils.print_w", "copy.deepcopy", "copy.deepcopy", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "xERM_networks[].state_dict", "xERM_networks[].state_dict", "utils.source_import", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "xERM_networks[].named_parameters", "print", "utils.WarmupMultiStepLR", "torch.lr_scheduler.StepLR", "torch.lr_scheduler.StepLR", "torch.lr_scheduler.StepLR", "torch.lr_scheduler.StepLR", "scheduler.get_last_lr", "inputs.cuda", "labels.cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "loss.xERMLoss.xERMLoss.item", "scheduler.optimizer.zero_grad", "scheduler.optimizer.step", "utils.print_w", "utils.torch2numpy", "utils.torch2numpy", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "enumerate", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "utils.MiscMeter.update", "utils.MiscMeter.update", "utils.MiscMeter.update", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "xERM_networks[].state_dict", "xERM_networks[].state_dict", "model.state_dict", "weights[].sum().item", "x[].sum().item", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "labels.size", "labels.size", "labels.size", "labels.size", "labels.size", "labels.size", "inputs.cuda", "labels.cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "labels.size", "labels.size", "labels.size", "labels.size", "labels.size", "labels.size", "weights[].sum", "x[].sum", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.xERM_eval", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.xERM_eval", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNext152Feature.create_model", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.utils.util.load_state_dict", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.eval", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.eval_with_preds", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.print_w", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.shot_acc", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.print_w", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.print_w", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.shot_acc", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.print_w", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.print_w", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.shot_acc", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.print_w", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.print_w", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.train", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.eval", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.print_w", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.source_import", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.print_w", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.torch2numpy", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.torch2numpy", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size"], ["'momentum'", ":", "optim_params", "[", "'momentum'", "]", ",", "\n", "'weight_decay'", ":", "optim_params", "[", "'weight_decay'", "]", "}", "\n", "\n", "", "print", "(", "'=> Build optimizer'", ")", "\n", "networks_defs", "=", "self", ".", "config", "[", "'networks'", "]", "\n", "xERM_optimizer_dict", "=", "{", "}", "\n", "xERM_scheduler_dict", "=", "{", "}", "\n", "\n", "for", "key", ",", "val", "in", "networks_defs", ".", "items", "(", ")", ":", "\n", "            ", "optimizer", "=", "optim", ".", "SGD", "(", "[", "xERM_optim_params_dict", "[", "key", "]", ",", "]", ")", "\n", "xERM_optimizer_dict", "[", "key", "]", "=", "optimizer", "\n", "# scheduler", "\n", "scheduler_params", "=", "val", "[", "'scheduler_params'", "]", "\n", "# -------------------add scheduler new ---------------------------------", "\n", "if", "scheduler_params", "[", "'coslr'", "]", ":", "\n", "                ", "print", "(", "\"===> Module {} : Using coslr eta_min={}\"", ".", "format", "(", "key", ",", "scheduler_params", "[", "'endlr'", "]", ")", ")", "\n", "xERM_scheduler_dict", "[", "key", "]", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "\n", "optimizer", ",", "self", ".", "training_opt", "[", "'num_epochs'", "]", ",", "eta_min", "=", "scheduler_params", "[", "'endlr'", "]", ")", "\n", "", "elif", "scheduler_params", "[", "'warmup'", "]", ":", "\n", "                ", "print", "(", "\"===> Module {} : Using warmup\"", ".", "format", "(", "key", ")", ")", "\n", "xERM_scheduler_dict", "[", "key", "]", "=", "WarmupMultiStepLR", "(", "optimizer", ",", "scheduler_params", "[", "'lr_step'", "]", ",", "\n", "gamma", "=", "scheduler_params", "[", "'lr_factor'", "]", ",", "warmup_epochs", "=", "scheduler_params", "[", "'warm_epoch'", "]", ")", "\n", "", "else", ":", "\n", "                ", "xERM_scheduler_dict", "[", "key", "]", "=", "optim", ".", "lr_scheduler", ".", "StepLR", "(", "optimizer", ",", "\n", "step_size", "=", "scheduler_params", "[", "'step_size'", "]", ",", "\n", "gamma", "=", "scheduler_params", "[", "'gamma'", "]", ")", "\n", "\n", "", "", "print", "(", "'=> Build Criterion'", ")", "\n", "gamma", "=", "self", ".", "training_opt", "[", "'gamma'", "]", "\n", "print", "(", "f'=> gamma {gamma}'", ")", "\n", "xERM_loss", "=", "xERMLoss", "(", "gamma", "=", "gamma", ")", "\n", "end_epoch", "=", "self", ".", "training_opt", "[", "'num_epochs'", "]", "\n", "# freeze teacher", "\n", "for", "key", ",", "model", "in", "self", ".", "networks", ".", "items", "(", ")", ":", "\n", "            ", "for", "param", "in", "model", ".", "parameters", "(", ")", ":", "\n", "                ", "param", ".", "requires_grad", "=", "False", "\n", "", "model", ".", "eval", "(", ")", "\n", "\n", "", "step_length", "=", "len", "(", "self", ".", "data", "[", "'train'", "]", ")", "\n", "for", "epoch", "in", "range", "(", "1", ",", "end_epoch", "+", "1", ")", ":", "\n", "            ", "for", "key", ",", "model", "in", "xERM_networks", ".", "items", "(", ")", ":", "\n", "                ", "model", ".", "train", "(", ")", "\n", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "for", "key", ",", "scheduler", "in", "xERM_scheduler_dict", ".", "items", "(", ")", ":", "\n", "                ", "scheduler", ".", "step", "(", ")", "\n", "lr", "=", "scheduler", ".", "get_last_lr", "(", ")", "[", "0", "]", "\n", "print", "(", "f'{key} lr is {lr}'", ")", "\n", "\n", "", "total_preds", "=", "[", "]", "\n", "total_labels", "=", "[", "]", "\n", "# Iterate over dataset", "\n", "losses", "=", "MiscMeter", "(", ")", "\n", "te_accs", "=", "MiscMeter", "(", ")", "\n", "tde_accs", "=", "MiscMeter", "(", ")", "\n", "xERM_accs", "=", "MiscMeter", "(", ")", "\n", "\n", "for", "step", ",", "(", "inputs", ",", "labels", ",", "indexes", ")", "in", "enumerate", "(", "self", ".", "data", "[", "'train'", "]", ")", ":", "\n", "                ", "inputs", ",", "labels", "=", "inputs", ".", "cuda", "(", ")", ",", "labels", ".", "cuda", "(", ")", "\n", "# forward teacher model", "\n", "features", "=", "self", ".", "networks", "[", "'feat_model'", "]", "(", "inputs", ")", "\n", "logits_TDE", ",", "logits_TE", "=", "self", ".", "networks", "[", "'classifier'", "]", "(", "features", ",", "None", ",", "self", ".", "embed_mean", ")", "\n", "# forward xERM model", "\n", "xERM_features", "=", "xERM_networks", "[", "'feat_model'", "]", "(", "inputs", ")", "\n", "_", ",", "logits_xERM", "=", "xERM_networks", "[", "'classifier'", "]", "(", "xERM_features", ",", "None", ",", "self", ".", "embed_mean", ")", "\n", "# calculate loss", "\n", "loss", "=", "xERM_loss", "(", "logits_TE", ",", "logits_TDE", ",", "logits_xERM", ",", "labels", ")", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ")", "\n", "_", ",", "te_preds", "=", "torch", ".", "max", "(", "logits_TE", ",", "1", ")", "\n", "_", ",", "tde_preds", "=", "torch", ".", "max", "(", "logits_TDE", ",", "1", ")", "\n", "_", ",", "xERM_preds", "=", "torch", ".", "max", "(", "logits_xERM", ",", "1", ")", "\n", "te_accs", ".", "update", "(", "(", "te_preds", "==", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "labels", ".", "size", "(", "0", ")", ",", "n", "=", "labels", ".", "size", "(", "0", ")", ")", "\n", "tde_accs", ".", "update", "(", "(", "tde_preds", "==", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "labels", ".", "size", "(", "0", ")", ",", "n", "=", "labels", ".", "size", "(", "0", ")", ")", "\n", "xERM_accs", ".", "update", "(", "(", "xERM_preds", "==", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "labels", ".", "size", "(", "0", ")", ",", "n", "=", "labels", ".", "size", "(", "0", ")", ")", "\n", "# update loss", "\n", "for", "key", ",", "scheduler", "in", "xERM_scheduler_dict", ".", "items", "(", ")", ":", "\n", "                    ", "scheduler", ".", "optimizer", ".", "zero_grad", "(", ")", "\n", "", "loss", ".", "backward", "(", ")", "\n", "for", "key", ",", "scheduler", "in", "xERM_scheduler_dict", ".", "items", "(", ")", ":", "\n", "                    ", "scheduler", ".", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "if", "step", "%", "self", ".", "training_opt", "[", "'display_step'", "]", "==", "0", ":", "\n", "                    ", "print_w", "(", "f'Epoch: [{epoch}][{step}/{step_length+1}] '", "\n", "f'LR {lr:.6f} '", "\n", "f'Total Loss {losses.avg:.3f} '", "\n", "f'TE Acc {te_accs.avg:.3f} '", "\n", "f'TDE Acc {tde_accs.avg:.3f} '", "\n", "f'xERM Acc {xERM_accs.avg:.3f}'", ",", "self", ".", "xERM_log", ")", "\n", "", "total_preds", ".", "append", "(", "torch2numpy", "(", "te_preds", ")", ")", "\n", "total_labels", ".", "append", "(", "torch2numpy", "(", "labels", ")", ")", "\n", "", "rsls_train", "=", "self", ".", "eval_with_preds", "(", "total_preds", ",", "total_labels", ")", "\n", "\n", "# after each epoch validate", "\n", "te_accs", "=", "MiscMeter", "(", ")", "\n", "tde_accs", "=", "MiscMeter", "(", ")", "\n", "xERM_accs", "=", "MiscMeter", "(", ")", "\n", "\n", "total_labels", "=", "torch", ".", "empty", "(", "0", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "total_preds", "=", "torch", ".", "empty", "(", "0", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "total_tde_preds", "=", "torch", ".", "empty", "(", "0", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "total_te_preds", "=", "torch", ".", "empty", "(", "0", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "key", ",", "model", "in", "xERM_networks", ".", "items", "(", ")", ":", "\n", "                ", "model", ".", "eval", "(", ")", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "step", ",", "(", "inputs", ",", "labels", ",", "indexes", ")", "in", "enumerate", "(", "self", ".", "data", "[", "'test'", "]", ")", ":", "\n", "                    ", "inputs", ",", "labels", "=", "inputs", ".", "cuda", "(", ")", ",", "labels", ".", "cuda", "(", ")", "\n", "# forward teacher model", "\n", "features", "=", "self", ".", "networks", "[", "'feat_model'", "]", "(", "inputs", ")", "\n", "logits_TDE", ",", "logits_TE", "=", "self", ".", "networks", "[", "'classifier'", "]", "(", "features", ",", "None", ",", "self", ".", "embed_mean", ")", "\n", "# forward xERM model", "\n", "xERM_features", "=", "xERM_networks", "[", "'feat_model'", "]", "(", "inputs", ")", "\n", "logits_xERM_tde", ",", "logits_xERM", "=", "xERM_networks", "[", "'classifier'", "]", "(", "xERM_features", ",", "None", ",", "self", ".", "embed_mean", ")", "\n", "\n", "_", ",", "te_preds", "=", "torch", ".", "max", "(", "logits_TE", ",", "1", ")", "\n", "_", ",", "tde_preds", "=", "torch", ".", "max", "(", "logits_TDE", ",", "1", ")", "\n", "_", ",", "xERM_preds", "=", "torch", ".", "max", "(", "logits_xERM", ",", "1", ")", "\n", "\n", "te_accs", ".", "update", "(", "(", "te_preds", "==", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "labels", ".", "size", "(", "0", ")", ",", "n", "=", "labels", ".", "size", "(", "0", ")", ")", "\n", "tde_accs", ".", "update", "(", "(", "tde_preds", "==", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "labels", ".", "size", "(", "0", ")", ",", "n", "=", "labels", ".", "size", "(", "0", ")", ")", "\n", "xERM_accs", ".", "update", "(", "(", "xERM_preds", "==", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "labels", ".", "size", "(", "0", ")", ",", "n", "=", "labels", ".", "size", "(", "0", ")", ")", "\n", "\n", "total_preds", "=", "torch", ".", "cat", "(", "(", "total_preds", ",", "xERM_preds", ")", ")", "\n", "total_labels", "=", "torch", ".", "cat", "(", "(", "total_labels", ",", "labels", ")", ")", "\n", "total_tde_preds", "=", "torch", ".", "cat", "(", "(", "total_tde_preds", ",", "tde_preds", ")", ")", "\n", "total_te_preds", "=", "torch", ".", "cat", "(", "(", "total_te_preds", ",", "te_preds", ")", ")", "\n", "\n", "", "", "print_w", "(", "f'=> Test Epoch: [{epoch}] '", "\n", "f'TE Acc {te_accs.avg:.3f} '", "\n", "f'TDE Acc {tde_accs.avg:.3f} '", "\n", "f'xERM Acc {xERM_accs.avg:.3f} '", ",", "self", ".", "xERM_log", ")", "\n", "\n", "self", ".", "many_acc_top1", ",", "self", ".", "median_acc_top1", ",", "self", ".", "low_acc_top1", ",", "self", ".", "cls_accs", "=", "shot_acc", "(", "total_preds", ",", "\n", "total_labels", ",", "\n", "self", ".", "data", "[", "'train'", "]", ",", "\n", "acc_per_cls", "=", "True", ")", "\n", "\n", "# Top-1 accuracy and additional string", "\n", "print_w", "(", "'xERM---------'", ",", "self", ".", "xERM_log", ")", "\n", "print_w", "(", "f'Many_shot_accuracy_top1: {self.many_acc_top1:.3f} '", "\n", "f'Median_shot_accuracy_top1: {self.median_acc_top1:.3f} '", "\n", "f'Low_shot_accuracy_top1: {self.low_acc_top1:.3f}'", ",", "self", ".", "xERM_log", ")", "\n", "\n", "self", ".", "many_acc_top1", ",", "self", ".", "median_acc_top1", ",", "self", ".", "low_acc_top1", ",", "self", ".", "cls_accs", "=", "shot_acc", "(", "total_tde_preds", ",", "\n", "total_labels", ",", "\n", "self", ".", "data", "[", "'train'", "]", ",", "\n", "acc_per_cls", "=", "True", ")", "\n", "\n", "# Top-1 accuracy and additional string", "\n", "print_w", "(", "'TDE--------'", ",", "self", ".", "xERM_log", ")", "\n", "print_w", "(", "f'Many_shot_accuracy_top1: {self.many_acc_top1:.3f} '", "\n", "f'Median_shot_accuracy_top1: {self.median_acc_top1:.3f} '", "\n", "f'Low_shot_accuracy_top1: {self.low_acc_top1:.3f}'", ",", "self", ".", "xERM_log", ")", "\n", "\n", "self", ".", "many_acc_top1", ",", "self", ".", "median_acc_top1", ",", "self", ".", "low_acc_top1", ",", "self", ".", "cls_accs", "=", "shot_acc", "(", "total_te_preds", ",", "\n", "total_labels", ",", "\n", "self", ".", "data", "[", "'train'", "]", ",", "\n", "acc_per_cls", "=", "True", ")", "\n", "\n", "# Top-1 accuracy and additional string", "\n", "\n", "print_w", "(", "'TE---------'", ",", "self", ".", "xERM_log", ")", "\n", "print_w", "(", "f'Many_shot_accuracy_top1: {self.many_acc_top1:.3f} '", "\n", "f'Median_shot_accuracy_top1: {self.median_acc_top1:.3f} '", "\n", "f'Low_shot_accuracy_top1: {self.low_acc_top1:.3f}'", ",", "self", ".", "xERM_log", ")", "\n", "\n", "\n", "model_weights", "=", "{", "}", "\n", "model_weights", "[", "'feat_model'", "]", "=", "copy", ".", "deepcopy", "(", "xERM_networks", "[", "'feat_model'", "]", ".", "state_dict", "(", ")", ")", "\n", "model_weights", "[", "'classifier'", "]", "=", "copy", ".", "deepcopy", "(", "xERM_networks", "[", "'classifier'", "]", ".", "state_dict", "(", ")", ")", "\n", "\n", "model_states", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'state_dict'", ":", "model_weights", ",", "\n", "'embed'", ":", "self", ".", "embed_mean", ",", "\n", "}", "\n", "\n", "model_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "training_opt", "[", "'log_dir'", "]", ",", "\n", "'latest_xERM_model_checkpoint.pth'", ")", "\n", "torch", ".", "save", "(", "model_states", ",", "model_dir", ")", "\n", "\n", "", "", "def", "xERM_eval", "(", "self", ")", ":", "\n", "        ", "print", "(", "'=> Build xERM model'", ")", "\n", "networks_defs", "=", "self", ".", "config", "[", "'networks'", "]", "\n", "xERM_networks", "=", "{", "}", "\n", "\n", "for", "key", ",", "val", "in", "networks_defs", ".", "items", "(", ")", ":", "\n", "# Networks", "\n", "            ", "def_file", "=", "val", "[", "'def_file'", "]", "\n", "model_args", "=", "val", "[", "'params'", "]", "\n", "model_args", ".", "update", "(", "{", "'test'", ":", "False", "}", ")", "\n", "\n", "xERM_networks", "[", "key", "]", "=", "source_import", "(", "def_file", ")", ".", "create_model", "(", "**", "model_args", ")", "\n", "xERM_networks", "[", "key", "]", "=", "nn", ".", "DataParallel", "(", "xERM_networks", "[", "key", "]", ")", ".", "cuda", "(", ")", "\n", "\n", "model_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "config", "[", "'model_dir'", "]", ",", "'latest_xERM_model_checkpoint.pth'", ")", "\n", "print", "(", "'Loading xERM model from %s'", "%", "(", "model_dir", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_dir", ")", "\n", "model_state", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "\n", "", "for", "key", ",", "model", "in", "xERM_networks", ".", "items", "(", ")", ":", "\n", "            ", "weights", "=", "model_state", "[", "key", "]", "\n", "weights", "=", "{", "k", ":", "weights", "[", "k", "]", "for", "k", "in", "weights", "if", "k", "in", "model", ".", "state_dict", "(", ")", "}", "\n", "x", "=", "model", ".", "state_dict", "(", ")", "\n", "x", ".", "update", "(", "weights", ")", "\n", "if", "all", "(", "[", "weights", "[", "k", "]", ".", "sum", "(", ")", ".", "item", "(", ")", "==", "x", "[", "k", "]", ".", "sum", "(", ")", ".", "item", "(", ")", "for", "k", "in", "weights", "if", "k", "in", "x", "]", ")", ":", "\n", "                ", "print", "(", "'=====> All keys in weights have been loaded to the module {}'", ".", "format", "(", "key", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'=====> Error! Error! Error! Error! Loading failure in module {}'", ".", "format", "(", "key", ")", ")", "\n", "", "model", ".", "load_state_dict", "(", "x", ")", "\n", "\n", "", "te_accs", "=", "MiscMeter", "(", ")", "\n", "tde_accs", "=", "MiscMeter", "(", ")", "\n", "xERM_accs", "=", "MiscMeter", "(", ")", "\n", "upper_bound_accs", "=", "MiscMeter", "(", ")", "\n", "\n", "total_labels", "=", "torch", ".", "empty", "(", "0", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "total_preds", "=", "torch", ".", "empty", "(", "0", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "total_tde_preds", "=", "torch", ".", "empty", "(", "0", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "total_te_preds", "=", "torch", ".", "empty", "(", "0", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "total_upper_bound", "=", "torch", ".", "empty", "(", "0", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "\n", "total_te_logits", "=", "torch", ".", "empty", "(", "0", ")", ".", "cuda", "(", ")", "\n", "total_tde_logits", "=", "torch", ".", "empty", "(", "0", ")", ".", "cuda", "(", ")", "\n", "total_xERM_logits", "=", "torch", ".", "empty", "(", "0", ")", ".", "cuda", "(", ")", "\n", "\n", "for", "key", ",", "model", "in", "xERM_networks", ".", "items", "(", ")", ":", "\n", "            ", "model", ".", "eval", "(", ")", "\n", "\n", "", "for", "key", ",", "model", "in", "self", ".", "networks", ".", "items", "(", ")", ":", "\n", "            ", "model", ".", "eval", "(", ")", "\n", "\n", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "step", ",", "(", "inputs", ",", "labels", ",", "indexes", ")", "in", "enumerate", "(", "self", ".", "data", "[", "'test'", "]", ")", ":", "\n", "                ", "inputs", ",", "labels", "=", "inputs", ".", "cuda", "(", ")", ",", "labels", ".", "cuda", "(", ")", "\n", "# forward teacher model", "\n", "features", "=", "self", ".", "networks", "[", "'feat_model'", "]", "(", "inputs", ")", "\n", "logits_TDE", ",", "logits_TE", "=", "self", ".", "networks", "[", "'classifier'", "]", "(", "features", ",", "None", ",", "self", ".", "embed_mean", ")", "\n", "# forward xERM model", "\n", "xERM_features", "=", "xERM_networks", "[", "'feat_model'", "]", "(", "inputs", ")", "\n", "logits_xERM_tde", ",", "logits_xERM", "=", "xERM_networks", "[", "'classifier'", "]", "(", "xERM_features", ",", "None", ",", "self", ".", "embed_mean", ")", "\n", "\n", "_", ",", "te_preds", "=", "torch", ".", "max", "(", "logits_TE", ",", "1", ")", "\n", "_", ",", "tde_preds", "=", "torch", ".", "max", "(", "logits_TDE", ",", "1", ")", "\n", "_", ",", "xERM_preds", "=", "torch", ".", "max", "(", "logits_xERM", ",", "1", ")", "\n", "_", ",", "xERM_preds_tde", "=", "torch", ".", "max", "(", "logits_xERM_tde", ",", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.xERM_eval": [[535, 716], ["print", "networks_defs.items", "xERM_networks.items", "utils.MiscMeter", "utils.MiscMeter", "utils.MiscMeter", "utils.MiscMeter", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "xERM_networks.items", "run_networks.model.networks.items", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "print", "utils.shot_acc", "print", "print", "utils.shot_acc", "print", "print", "utils.shot_acc", "print", "print", "utils.shot_acc", "print", "print", "print", "utils.shot_precision", "print", "utils.shot_precision", "print", "utils.shot_precision", "print", "model_args.update", "utils.source_import().create_model", "torch.DataParallel().cuda", "torch.DataParallel().cuda", "torch.DataParallel().cuda", "torch.DataParallel().cuda", "os.path.join", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "model.state_dict", "model.state_dict.update", "all", "model.load_state_dict", "run_networks.model.eval", "run_networks.model.eval", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "tqdm.tqdm.tqdm", "print", "print", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "enumerate", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "te_preds.clone", "utils.MiscMeter.update", "utils.MiscMeter.update", "utils.MiscMeter.update", "utils.MiscMeter.update", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "utils.source_import", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "torch.DataParallel", "inputs.cuda", "labels.cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "model.state_dict", "weights[].sum().item", "x[].sum().item", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "labels.size", "labels.size", "labels.size", "labels.size", "labels.size", "labels.size", "labels.size", "labels.size", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "weights[].sum", "x[].sum", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.shot_acc", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.shot_acc", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.shot_acc", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.shot_acc", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.shot_precision", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.shot_precision", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.shot_precision", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.models.ResNext152Feature.create_model", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.utils.util.load_state_dict", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.eval", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.eval", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.source_import", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size"], ["preds_bound", "=", "te_preds", ".", "clone", "(", ")", "\n", "TDE_right", "=", "tde_preds", "==", "labels", "\n", "TE_right", "=", "te_preds", "==", "labels", "\n", "preds_bound", "[", "TDE_right", "]", "=", "tde_preds", "[", "TDE_right", "]", "\n", "preds_bound", "[", "TE_right", "]", "=", "te_preds", "[", "TE_right", "]", "\n", "\n", "te_accs", ".", "update", "(", "(", "te_preds", "==", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "labels", ".", "size", "(", "0", ")", ",", "n", "=", "labels", ".", "size", "(", "0", ")", ")", "\n", "tde_accs", ".", "update", "(", "(", "tde_preds", "==", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "labels", ".", "size", "(", "0", ")", ",", "n", "=", "labels", ".", "size", "(", "0", ")", ")", "\n", "xERM_accs", ".", "update", "(", "(", "xERM_preds", "==", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "labels", ".", "size", "(", "0", ")", ",", "n", "=", "labels", ".", "size", "(", "0", ")", ")", "\n", "upper_bound_accs", ".", "update", "(", "(", "preds_bound", "==", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "labels", ".", "size", "(", "0", ")", ",", "n", "=", "labels", ".", "size", "(", "0", ")", ")", "\n", "\n", "total_preds", "=", "torch", ".", "cat", "(", "(", "total_preds", ",", "xERM_preds", ")", ")", "\n", "total_labels", "=", "torch", ".", "cat", "(", "(", "total_labels", ",", "labels", ")", ")", "\n", "total_tde_preds", "=", "torch", ".", "cat", "(", "(", "total_tde_preds", ",", "tde_preds", ")", ")", "\n", "total_te_preds", "=", "torch", ".", "cat", "(", "(", "total_te_preds", ",", "te_preds", ")", ")", "\n", "total_upper_bound", "=", "torch", ".", "cat", "(", "(", "total_upper_bound", ",", "preds_bound", ")", ")", "\n", "\n", "total_te_logits", "=", "torch", ".", "cat", "(", "(", "total_te_logits", ",", "logits_TE", ")", ",", "0", ")", "\n", "total_tde_logits", "=", "torch", ".", "cat", "(", "(", "total_tde_logits", ",", "logits_TDE", ")", ",", "0", ")", "\n", "total_xERM_logits", "=", "torch", ".", "cat", "(", "(", "total_xERM_logits", ",", "logits_xERM", ")", ",", "0", ")", "\n", "\n", "", "", "print", "(", "f'TE Acc {te_accs.avg:.3f} '", "\n", "f'TDE Acc {tde_accs.avg:.3f} '", "\n", "f'xERM Acc {xERM_accs.avg:.3f} '", "\n", "f'Upper Bound {upper_bound_accs.avg:.3f}'", ")", "\n", "\n", "self", ".", "many_acc_top1", ",", "self", ".", "median_acc_top1", ",", "self", ".", "low_acc_top1", ",", "self", ".", "cls_accs", "=", "shot_acc", "(", "total_preds", ",", "\n", "total_labels", ",", "\n", "self", ".", "data", "[", "'train'", "]", ",", "\n", "acc_per_cls", "=", "True", ")", "\n", "\n", "# Top-1 accuracy and additional string", "\n", "print", "(", "'xERM---------'", ")", "\n", "print", "(", "f'Many_shot_accuracy_top1: {self.many_acc_top1:.3f} '", "\n", "f'Median_shot_accuracy_top1: {self.median_acc_top1:.3f} '", "\n", "f'Low_shot_accuracy_top1: {self.low_acc_top1:.3f}'", ")", "\n", "\n", "self", ".", "many_acc_top1", ",", "self", ".", "median_acc_top1", ",", "self", ".", "low_acc_top1", ",", "self", ".", "cls_accs", "=", "shot_acc", "(", "total_tde_preds", ",", "\n", "total_labels", ",", "\n", "self", ".", "data", "[", "'train'", "]", ",", "\n", "acc_per_cls", "=", "True", ")", "\n", "\n", "# Top-1 accuracy and additional string", "\n", "print", "(", "'TDE--------'", ")", "\n", "print", "(", "f'Many_shot_accuracy_top1: {self.many_acc_top1:.3f} '", "\n", "f'Median_shot_accuracy_top1: {self.median_acc_top1:.3f} '", "\n", "f'Low_shot_accuracy_top1: {self.low_acc_top1:.3f}'", ")", "\n", "\n", "self", ".", "many_acc_top1", ",", "self", ".", "median_acc_top1", ",", "self", ".", "low_acc_top1", ",", "self", ".", "cls_accs", "=", "shot_acc", "(", "total_te_preds", ",", "\n", "total_labels", ",", "\n", "self", ".", "data", "[", "'train'", "]", ",", "\n", "acc_per_cls", "=", "True", ")", "\n", "\n", "# Top-1 accuracy and additional string", "\n", "print", "(", "'TE---------'", ")", "\n", "print", "(", "f'Many_shot_accuracy_top1: {self.many_acc_top1:.3f} '", "\n", "f'Median_shot_accuracy_top1: {self.median_acc_top1:.3f} '", "\n", "f'Low_shot_accuracy_top1: {self.low_acc_top1:.3f}'", ")", "\n", "\n", "self", ".", "many_acc_top1", ",", "self", ".", "median_acc_top1", ",", "self", ".", "low_acc_top1", ",", "self", ".", "cls_accs", "=", "shot_acc", "(", "total_upper_bound", ",", "\n", "total_labels", ",", "\n", "self", ".", "data", "[", "'train'", "]", ",", "\n", "acc_per_cls", "=", "True", ")", "\n", "\n", "# Top-1 accuracy and additional string", "\n", "print", "(", "'Upper Bound ---------'", ")", "\n", "print", "(", "f'Many_shot_accuracy_top1: {self.many_acc_top1:.3f} '", "\n", "f'Median_shot_accuracy_top1: {self.median_acc_top1:.3f} '", "\n", "f'Low_shot_accuracy_top1: {self.low_acc_top1:.3f}'", ")", "\n", "\n", "", "def", "train", "(", "self", ")", ":", "\n", "# When training the network", "\n", "        ", "print_str", "=", "[", "'Phase: train'", "]", "\n", "print_write", "(", "print_str", ",", "self", ".", "log_file", ")", "\n", "time", ".", "sleep", "(", "0.25", ")", "\n", "\n", "print_write", "(", "[", "'Force shuffle in training??? --- '", ",", "self", ".", "do_shuffle", "]", ",", "self", ".", "log_file", ")", "\n", "\n", "# Initialize best model", "\n", "best_model_weights", "=", "{", "}", "\n", "best_model_weights", "[", "'feat_model'", "]", "=", "copy", ".", "deepcopy", "(", "self", ".", "networks", "[", "'feat_model'", "]", ".", "state_dict", "(", ")", ")", "\n", "best_model_weights", "[", "'classifier'", "]", "=", "copy", ".", "deepcopy", "(", "self", ".", "networks", "[", "'classifier'", "]", ".", "state_dict", "(", ")", ")", "\n", "best_acc", "=", "0.0", "\n", "best_epoch", "=", "0", "\n", "\n", "end_epoch", "=", "self", ".", "training_opt", "[", "'num_epochs'", "]", "\n", "\n", "# Loop over epochs", "\n", "for", "epoch", "in", "range", "(", "1", ",", "end_epoch", "+", "1", ")", ":", "\n", "            ", "for", "key", ",", "model", "in", "self", ".", "networks", ".", "items", "(", ")", ":", "\n", "# only train the module with lr > 0", "\n", "                ", "if", "self", ".", "config", "[", "'networks'", "]", "[", "key", "]", "[", "'optim_params'", "]", "[", "'lr'", "]", "==", "0.0", ":", "\n", "                    ", "print_write", "(", "[", "'=====> module {} is set to eval due to 0.0 learning rate.'", ".", "format", "(", "key", ")", "]", ",", "self", ".", "log_file", ")", "\n", "model", ".", "eval", "(", ")", "\n", "", "else", ":", "\n", "                    ", "model", ".", "train", "(", ")", "\n", "\n", "", "", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "# Set model modes and set scheduler", "\n", "# In training, step optimizer scheduler and set model to train()", "\n", "for", "key", ",", "scheduler", "in", "self", ".", "model_scheduler_dict", ".", "items", "(", ")", ":", "\n", "                ", "scheduler", ".", "step", "(", ")", "\n", "", "if", "self", ".", "criterion_optimizer", ":", "\n", "                ", "self", ".", "criterion_optimizer_scheduler", ".", "step", "(", ")", "\n", "\n", "# Iterate over dataset", "\n", "", "total_preds", "=", "[", "]", "\n", "total_labels", "=", "[", "]", "\n", "\n", "# indicate current path", "\n", "print_write", "(", "[", "self", ".", "training_opt", "[", "'log_dir'", "]", "]", ",", "self", ".", "log_file", ")", "\n", "# print learning rate", "\n", "current_lr", "=", "self", ".", "show_current_lr", "(", ")", "\n", "current_lr", "=", "min", "(", "current_lr", "*", "50", ",", "1.0", ")", "\n", "# scale the original mu according to the lr", "\n", "if", "'CIFAR'", "not", "in", "self", ".", "training_opt", "[", "'dataset'", "]", ":", "\n", "                ", "self", ".", "mu", "=", "1.0", "-", "(", "1", "-", "0.9", ")", "*", "current_lr", "\n", "\n", "", "for", "step", ",", "(", "inputs", ",", "labels", ",", "indexes", ")", "in", "enumerate", "(", "self", ".", "data", "[", "'train'", "]", ")", ":", "\n", "# Break when step equal to epoch step", "\n", "                ", "if", "step", "==", "self", ".", "epoch_steps", ":", "\n", "                    ", "break", "\n", "", "if", "self", ".", "do_shuffle", ":", "\n", "                    ", "inputs", ",", "labels", "=", "self", ".", "shuffle_batch", "(", "inputs", ",", "labels", ")", "\n", "", "inputs", ",", "labels", "=", "inputs", ".", "cuda", "(", ")", ",", "labels", ".", "cuda", "(", ")", "\n", "\n", "# If on training phase, enable gradients", "\n", "with", "torch", ".", "set_grad_enabled", "(", "True", ")", ":", "\n", "\n", "# If training, forward with loss, and no top 5 accuracy calculation", "\n", "                    ", "self", ".", "batch_forward", "(", "inputs", ",", "labels", ",", "phase", "=", "'train'", ")", "\n", "self", ".", "batch_loss", "(", "labels", ")", "\n", "self", ".", "batch_backward", "(", "print_grad", "=", "(", "step", "%", "self", ".", "training_opt", "[", "'display_grad_step'", "]", "==", "0", ")", ")", "\n", "\n", "# Tracking predictions", "\n", "_", ",", "preds", "=", "torch", ".", "max", "(", "self", ".", "logits", ",", "1", ")", "\n", "total_preds", ".", "append", "(", "torch2numpy", "(", "preds", ")", ")", "\n", "total_labels", ".", "append", "(", "torch2numpy", "(", "labels", ")", ")", "\n", "\n", "# Output minibatch training results", "\n", "if", "step", "%", "self", ".", "training_opt", "[", "'display_step'", "]", "==", "0", ":", "\n", "\n", "                        ", "minibatch_loss_route", "=", "self", ".", "loss_route", ".", "item", "(", ")", "if", "'RouteWeightLoss'", "in", "self", ".", "criterions", ".", "keys", "(", ")", "else", "None", "\n", "minibatch_loss_perf", "=", "self", ".", "loss_perf", ".", "item", "(", ")", "if", "'PerformanceLoss'", "in", "self", ".", "criterions", "else", "None", "\n", "minibatch_loss_total", "=", "self", ".", "loss", ".", "item", "(", ")", "\n", "minibatch_acc", "=", "mic_acc_cal", "(", "preds", ",", "labels", ")", "\n", "\n", "print_str", "=", "[", "'Epoch: [%d/%d]'", "\n", "%", "(", "epoch", ",", "self", ".", "training_opt", "[", "'num_epochs'", "]", ")", ",", "\n", "'Step: %5d'", "\n", "%", "(", "step", ")", ",", "\n", "'Minibatch_loss_route: %.3f'", "\n", "%", "(", "minibatch_loss_route", ")", "if", "minibatch_loss_route", "else", "''", ",", "\n", "'Minibatch_loss_performance: %.3f'", "\n", "%", "(", "minibatch_loss_perf", ")", "if", "minibatch_loss_perf", "else", "''", ",", "\n", "'Minibatch_accuracy_micro: %.3f'", "\n", "%", "(", "minibatch_acc", ")", "]", "\n", "print_write", "(", "print_str", ",", "self", ".", "log_file", ")", "\n", "\n", "loss_info", "=", "{", "\n", "'Epoch'", ":", "epoch", ",", "\n", "'Step'", ":", "step", ",", "\n", "'Total'", ":", "minibatch_loss_total", ",", "\n", "'CE'", ":", "minibatch_loss_perf", ",", "\n", "'route'", ":", "minibatch_loss_route", ",", "\n", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.train": [[717, 893], ["utils.print_write", "time.sleep", "utils.print_write", "copy.deepcopy", "copy.deepcopy", "range", "print", "print", "utils.print_write", "run_networks.model.save_model", "run_networks.model.eval", "print", "run_networks.model.networks[].state_dict", "run_networks.model.networks[].state_dict", "run_networks.model.networks.items", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "run_networks.model.model_scheduler_dict.items", "utils.print_write", "run_networks.model.show_current_lr", "min", "enumerate", "hasattr", "hasattr", "run_networks.model.eval_with_preds", "run_networks.model.eval", "rsls.update", "rsls.update", "hasattr", "run_networks.model.logger.log_acc", "print", "run_networks.model.save_latest", "run_networks.model.reset_model", "scheduler.step", "run_networks.model.criterion_optimizer_scheduler.step", "hasattr", "run_networks.model.logger.log_ws", "run_networks.model.data[].sampler.reset_weights", "utils.get_priority", "run_networks.model.data[].sampler.reset_priority", "copy.deepcopy", "copy.deepcopy", "utils.print_write", "run_networks.model.eval", "run_networks.model.train", "run_networks.model.shuffle_batch", "inputs.cuda", "labels.cuda", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "run_networks.model.batch_forward", "run_networks.model.batch_loss", "run_networks.model.batch_backward", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "total_preds.append", "total_labels.append", "hasattr", "utils.get_priority", "run_networks.model.data[].sampler.update_weights", "run_networks.model.data[].sampler.get_weights", "run_networks.model.total_logits.detach", "run_networks.model.total_labels.cpu().numpy", "run_networks.model.networks[].state_dict", "run_networks.model.networks[].state_dict", "utils.torch2numpy", "utils.torch2numpy", "dict", "run_networks.model.loss.item", "utils.mic_acc_cal", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "torch.mean().item", "print_str.extend", "run_networks.model.write_summary", "utils.print_write", "run_networks.model.logger.log_loss", "run_networks.model.logits.detach", "indexes.cpu().numpy", "inlist.append", "run_networks.model.loss_route.item", "run_networks.model.loss_perf.item", "labels.cpu().numpy", "run_networks.model.total_labels.cpu", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "indexes.cpu", "dict.items", "labels.cpu"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.print_write", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.print_write", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.print_write", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.save_model", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.eval", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.print_write", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.show_current_lr", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.min", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.eval_with_preds", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.eval", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.logger.Logger.log_acc", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.save_latest", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.reset_model", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.logger.Logger.log_ws", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.MixedPrioritizedSampler.reset_weights", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.get_priority", "home.repos.pwc.inspect_result.beierzhu_xerm.data.ClassPrioritySampler.ClassPrioritySampler.reset_priority", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.print_write", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.eval", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.train", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.shuffle_batch", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.batch_forward", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.batch_loss", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.batch_backward", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.get_priority", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.MixedPrioritizedSampler.update_weights", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.MixedPrioritizedSampler.get_weights", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.torch2numpy", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.torch2numpy", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.mic_acc_cal", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.write_summary", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.print_write", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.logger.Logger.log_loss"], ["self", ".", "logger", ".", "log_loss", "(", "loss_info", ")", "\n", "\n", "# batch-level: sampler update", "\n", "", "", "if", "hasattr", "(", "self", ".", "data", "[", "'train'", "]", ".", "sampler", ",", "'update_weights'", ")", ":", "\n", "                    ", "if", "hasattr", "(", "self", ".", "data", "[", "'train'", "]", ".", "sampler", ",", "'ptype'", ")", ":", "\n", "                        ", "ptype", "=", "self", ".", "data", "[", "'train'", "]", ".", "sampler", ".", "ptype", "\n", "", "else", ":", "\n", "                        ", "ptype", "=", "'score'", "\n", "", "ws", "=", "get_priority", "(", "ptype", ",", "self", ".", "logits", ".", "detach", "(", ")", ",", "labels", ")", "\n", "\n", "inlist", "=", "[", "indexes", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "ws", "]", "\n", "if", "self", ".", "training_opt", "[", "'sampler'", "]", "[", "'type'", "]", "==", "'ClassPrioritySampler'", ":", "\n", "                        ", "inlist", ".", "append", "(", "labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "self", ".", "data", "[", "'train'", "]", ".", "sampler", ".", "update_weights", "(", "*", "inlist", ")", "\n", "\n", "# epoch-level: reset sampler weight", "\n", "", "", "if", "hasattr", "(", "self", ".", "data", "[", "'train'", "]", ".", "sampler", ",", "'get_weights'", ")", ":", "\n", "                ", "self", ".", "logger", ".", "log_ws", "(", "epoch", ",", "self", ".", "data", "[", "'train'", "]", ".", "sampler", ".", "get_weights", "(", ")", ")", "\n", "", "if", "hasattr", "(", "self", ".", "data", "[", "'train'", "]", ".", "sampler", ",", "'reset_weights'", ")", ":", "\n", "                ", "self", ".", "data", "[", "'train'", "]", ".", "sampler", ".", "reset_weights", "(", "epoch", ")", "\n", "\n", "# After every epoch, validation", "\n", "", "rsls", "=", "{", "'epoch'", ":", "epoch", "}", "\n", "rsls_train", "=", "self", ".", "eval_with_preds", "(", "total_preds", ",", "total_labels", ")", "\n", "rsls_eval", "=", "self", ".", "eval", "(", "phase", "=", "'val'", ")", "\n", "rsls", ".", "update", "(", "rsls_train", ")", "\n", "rsls", ".", "update", "(", "rsls_eval", ")", "\n", "\n", "# Reset class weights for sampling if pri_mode is valid", "\n", "if", "hasattr", "(", "self", ".", "data", "[", "'train'", "]", ".", "sampler", ",", "'reset_priority'", ")", ":", "\n", "                ", "ws", "=", "get_priority", "(", "self", ".", "data", "[", "'train'", "]", ".", "sampler", ".", "ptype", ",", "\n", "self", ".", "total_logits", ".", "detach", "(", ")", ",", "\n", "self", ".", "total_labels", ")", "\n", "self", ".", "data", "[", "'train'", "]", ".", "sampler", ".", "reset_priority", "(", "ws", ",", "self", ".", "total_labels", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "\n", "# Log results", "\n", "", "self", ".", "logger", ".", "log_acc", "(", "rsls", ")", "\n", "\n", "# Under validation, the best model need to be updated", "\n", "if", "self", ".", "eval_acc_mic_top1", ">", "best_acc", ":", "\n", "                ", "best_epoch", "=", "epoch", "\n", "best_acc", "=", "self", ".", "eval_acc_mic_top1", "\n", "best_model_weights", "[", "'feat_model'", "]", "=", "copy", ".", "deepcopy", "(", "self", ".", "networks", "[", "'feat_model'", "]", ".", "state_dict", "(", ")", ")", "\n", "best_model_weights", "[", "'classifier'", "]", "=", "copy", ".", "deepcopy", "(", "self", ".", "networks", "[", "'classifier'", "]", ".", "state_dict", "(", ")", ")", "\n", "\n", "", "print", "(", "'===> Saving checkpoint'", ")", "\n", "self", ".", "save_latest", "(", "epoch", ")", "\n", "\n", "", "print", "(", ")", "\n", "print", "(", "'Training Complete.'", ")", "\n", "\n", "print_str", "=", "[", "'Best validation accuracy is %.3f at epoch %d'", "%", "(", "best_acc", ",", "best_epoch", ")", "]", "\n", "print_write", "(", "print_str", ",", "self", ".", "log_file", ")", "\n", "# Save the best model", "\n", "self", ".", "save_model", "(", "epoch", ",", "best_epoch", ",", "best_model_weights", ",", "best_acc", ")", "\n", "\n", "# Test on the test set", "\n", "self", ".", "reset_model", "(", "best_model_weights", ")", "\n", "self", ".", "eval", "(", "'test'", "if", "'test'", "in", "self", ".", "data", "else", "'val'", ")", "\n", "print", "(", "'Done'", ")", "\n", "\n", "", "def", "eval_with_preds", "(", "self", ",", "preds", ",", "labels", ")", ":", "\n", "# Count the number of examples", "\n", "        ", "n_total", "=", "sum", "(", "[", "len", "(", "p", ")", "for", "p", "in", "preds", "]", ")", "\n", "\n", "# Split the examples into normal and mixup", "\n", "normal_preds", ",", "normal_labels", "=", "[", "]", ",", "[", "]", "\n", "mixup_preds", ",", "mixup_labels1", ",", "mixup_labels2", ",", "mixup_ws", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "for", "p", ",", "l", "in", "zip", "(", "preds", ",", "labels", ")", ":", "\n", "            ", "if", "isinstance", "(", "l", ",", "tuple", ")", ":", "\n", "                ", "mixup_preds", ".", "append", "(", "p", ")", "\n", "mixup_labels1", ".", "append", "(", "l", "[", "0", "]", ")", "\n", "mixup_labels2", ".", "append", "(", "l", "[", "1", "]", ")", "\n", "mixup_ws", ".", "append", "(", "l", "[", "2", "]", "*", "np", ".", "ones_like", "(", "l", "[", "0", "]", ")", ")", "\n", "", "else", ":", "\n", "                ", "normal_preds", ".", "append", "(", "p", ")", "\n", "normal_labels", ".", "append", "(", "l", ")", "\n", "\n", "# Calculate normal prediction accuracy", "\n", "", "", "rsl", "=", "{", "'train_all'", ":", "0.", ",", "'train_many'", ":", "0.", ",", "'train_median'", ":", "0.", ",", "'train_low'", ":", "0.", "}", "\n", "if", "len", "(", "normal_preds", ")", ">", "0", ":", "\n", "            ", "normal_preds", ",", "normal_labels", "=", "list", "(", "map", "(", "np", ".", "concatenate", ",", "[", "normal_preds", ",", "normal_labels", "]", ")", ")", "\n", "n_top1", "=", "mic_acc_cal", "(", "normal_preds", ",", "normal_labels", ")", "\n", "n_top1_many", ",", "n_top1_median", ",", "n_top1_low", ",", "=", "shot_acc", "(", "normal_preds", ",", "normal_labels", ",", "self", ".", "data", "[", "'train'", "]", ")", "\n", "rsl", "[", "'train_all'", "]", "+=", "len", "(", "normal_preds", ")", "/", "n_total", "*", "n_top1", "\n", "rsl", "[", "'train_many'", "]", "+=", "len", "(", "normal_preds", ")", "/", "n_total", "*", "n_top1_many", "\n", "rsl", "[", "'train_median'", "]", "+=", "len", "(", "normal_preds", ")", "/", "n_total", "*", "n_top1_median", "\n", "rsl", "[", "'train_low'", "]", "+=", "len", "(", "normal_preds", ")", "/", "n_total", "*", "n_top1_low", "\n", "\n", "# Calculate mixup prediction accuracy", "\n", "", "if", "len", "(", "mixup_preds", ")", ">", "0", ":", "\n", "            ", "mixup_preds", ",", "mixup_labels", ",", "mixup_ws", "=", "list", "(", "map", "(", "np", ".", "concatenate", ",", "[", "mixup_preds", "*", "2", ",", "mixup_labels1", "+", "mixup_labels2", ",", "mixup_ws", "]", ")", ")", "\n", "mixup_ws", "=", "np", ".", "concatenate", "(", "[", "mixup_ws", ",", "1", "-", "mixup_ws", "]", ")", "\n", "n_top1", "=", "weighted_mic_acc_cal", "(", "mixup_preds", ",", "mixup_labels", ",", "mixup_ws", ")", "\n", "n_top1_many", ",", "n_top1_median", ",", "n_top1_low", ",", "=", "weighted_shot_acc", "(", "mixup_preds", ",", "mixup_labels", ",", "mixup_ws", ",", "self", ".", "data", "[", "'train'", "]", ")", "\n", "rsl", "[", "'train_all'", "]", "+=", "len", "(", "mixup_preds", ")", "/", "2", "/", "n_total", "*", "n_top1", "\n", "rsl", "[", "'train_many'", "]", "+=", "len", "(", "mixup_preds", ")", "/", "2", "/", "n_total", "*", "n_top1_many", "\n", "rsl", "[", "'train_median'", "]", "+=", "len", "(", "mixup_preds", ")", "/", "2", "/", "n_total", "*", "n_top1_median", "\n", "rsl", "[", "'train_low'", "]", "+=", "len", "(", "mixup_preds", ")", "/", "2", "/", "n_total", "*", "n_top1_low", "\n", "\n", "# Top-1 accuracy and additional string", "\n", "", "print_str", "=", "[", "'\\n Training acc Top1: %.3f \\n'", "%", "(", "rsl", "[", "'train_all'", "]", ")", ",", "\n", "'Many_top1: %.3f'", "%", "(", "rsl", "[", "'train_many'", "]", ")", ",", "\n", "'Median_top1: %.3f'", "%", "(", "rsl", "[", "'train_median'", "]", ")", ",", "\n", "'Low_top1: %.3f'", "%", "(", "rsl", "[", "'train_low'", "]", ")", ",", "\n", "'\\n'", "]", "\n", "print_write", "(", "print_str", ",", "self", ".", "log_file", ")", "\n", "\n", "return", "rsl", "\n", "\n", "", "def", "save_mean_embedding", "(", "self", ")", ":", "\n", "# Iterate over training data, ", "\n", "# save the mean features for each class", "\n", "# save the mean features for all class", "\n", "\n", "        ", "self", ".", "saving_feature_with_label_init", "(", ")", "\n", "\n", "for", "inputs", ",", "labels", ",", "_", "in", "tqdm", "(", "self", ".", "data", "[", "'train'", "]", ")", ":", "\n", "            ", "inputs", ",", "labels", "=", "inputs", ".", "cuda", "(", ")", ",", "labels", ".", "cuda", "(", ")", "\n", "with", "torch", ".", "set_grad_enabled", "(", "False", ")", ":", "\n", "                ", "self", ".", "batch_forward", "(", "inputs", ",", "labels", ",", "phase", "=", "'test'", ")", "\n", "self", ".", "saving_feature_with_label_update", "(", "self", ".", "features", ",", "self", ".", "logits", ",", "labels", ")", "\n", "\n", "", "", "self", ".", "saving_feature_with_label_export", "(", "save_name", "=", "'train_statistics.pth'", ")", "\n", "\n", "\n", "", "def", "eval", "(", "self", ",", "phase", "=", "'val'", ",", "save_feat", "=", "False", ")", ":", "\n", "\n", "        ", "print_str", "=", "[", "'Phase: %s'", "%", "(", "phase", ")", "]", "\n", "print_write", "(", "print_str", ",", "self", ".", "log_file", ")", "\n", "time", ".", "sleep", "(", "0.25", ")", "\n", "\n", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "# In validation or testing mode, set model to eval() and initialize running loss/correct", "\n", "for", "model", "in", "self", ".", "networks", ".", "values", "(", ")", ":", "\n", "            ", "model", ".", "eval", "(", ")", "\n", "\n", "", "self", ".", "total_logits", "=", "torch", ".", "empty", "(", "(", "0", ",", "self", ".", "training_opt", "[", "'num_classes'", "]", ")", ")", ".", "cuda", "(", ")", "\n", "self", ".", "total_labels", "=", "torch", ".", "empty", "(", "0", ",", "dtype", "=", "torch", ".", "long", ")", ".", "cuda", "(", ")", "\n", "self", ".", "total_paths", "=", "np", ".", "empty", "(", "0", ")", "\n", "\n", "feats_all", ",", "labels_all", ",", "idxs_all", ",", "logits_all", "=", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "\n", "featmaps_all", "=", "[", "]", "\n", "\n", "# feature saving initialization", "\n", "if", "save_feat", ":", "\n", "            ", "self", ".", "saving_feature_with_label_init", "(", ")", "\n", "\n", "# Iterate over dataset", "\n", "", "for", "inputs", ",", "labels", ",", "paths", "in", "tqdm", "(", "self", ".", "data", "[", "phase", "]", ")", ":", "\n", "            ", "inputs", ",", "labels", "=", "inputs", ".", "cuda", "(", ")", ",", "labels", ".", "cuda", "(", ")", "\n", "\n", "# If on training phase, enable gradients", "\n", "with", "torch", ".", "set_grad_enabled", "(", "False", ")", ":", "\n", "\n", "# In validation or testing", "\n", "                ", "self", ".", "batch_forward", "(", "inputs", ",", "labels", ",", "phase", "=", "phase", ")", "\n", "# feature saving update", "\n", "if", "save_feat", ":", "\n", "                    ", "self", ".", "saving_feature_with_label_update", "(", "self", ".", "features", ",", "self", ".", "logits", ",", "labels", ")", "\n", "\n", "", "self", ".", "total_logits", "=", "torch", ".", "cat", "(", "(", "self", ".", "total_logits", ",", "self", ".", "logits", ")", ")", "\n", "self", ".", "total_labels", "=", "torch", ".", "cat", "(", "(", "self", ".", "total_labels", ",", "labels", ")", ")", "\n", "self", ".", "total_paths", "=", "np", ".", "concatenate", "(", "(", "self", ".", "total_paths", ",", "paths", ")", ")", "\n", "\n", "# feature saving export", "\n", "", "", "if", "save_feat", ":", "\n", "            ", "self", ".", "saving_feature_with_label_export", "(", "save_name", "=", "'test_statistics.pth'", ")", "\n", "\n", "", "probs", ",", "preds", "=", "F", ".", "softmax", "(", "self", ".", "total_logits", ".", "detach", "(", ")", ",", "dim", "=", "1", ")", ".", "max", "(", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.eval_with_preds": [[894, 947], ["sum", "zip", "utils.print_write", "isinstance", "len", "list", "utils.mic_acc_cal", "utils.shot_acc", "len", "list", "numpy.concatenate", "utils.weighted_mic_acc_cal", "weighted_shot_acc", "len", "mixup_preds.append", "mixup_labels1.append", "mixup_labels2.append", "numpy.concatenate.append", "normal_preds.append", "normal_labels.append", "map", "map", "len", "len", "len", "len", "numpy.ones_like", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.print_write", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.mic_acc_cal", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.shot_acc", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.weighted_mic_acc_cal", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.TDE.public.utils.weighted_shot_acc"], ["# Calculate the overall accuracy and F measurement", "\n", "self", ".", "eval_acc_mic_top1", "=", "mic_acc_cal", "(", "preds", "[", "self", ".", "total_labels", "!=", "-", "1", "]", ",", "\n", "self", ".", "total_labels", "[", "self", ".", "total_labels", "!=", "-", "1", "]", ")", "\n", "self", ".", "eval_f_measure", "=", "F_measure", "(", "preds", ",", "self", ".", "total_labels", ",", "theta", "=", "self", ".", "training_opt", "[", "'open_threshold'", "]", ")", "\n", "\n", "self", ".", "many_acc_top1", ",", "self", ".", "median_acc_top1", ",", "self", ".", "low_acc_top1", ",", "self", ".", "cls_accs", "=", "shot_acc", "(", "preds", "[", "self", ".", "total_labels", "!=", "-", "1", "]", ",", "\n", "self", ".", "total_labels", "[", "self", ".", "total_labels", "!=", "-", "1", "]", ",", "\n", "self", ".", "data", "[", "'train'", "]", ",", "\n", "acc_per_cls", "=", "True", ")", "\n", "\n", "# Top-1 accuracy and additional string", "\n", "print_str", "=", "[", "'\\n\\n'", ",", "\n", "'Phase: %s'", "\n", "%", "(", "phase", ")", ",", "\n", "'\\n\\n'", ",", "\n", "'Evaluation_accuracy_micro_top1: %.3f'", "\n", "%", "(", "self", ".", "eval_acc_mic_top1", ")", ",", "\n", "'\\n'", ",", "\n", "'Averaged F-measure: %.3f'", "\n", "%", "(", "self", ".", "eval_f_measure", ")", ",", "\n", "'\\n'", ",", "\n", "'Many_shot_accuracy_top1: %.3f'", "\n", "%", "(", "self", ".", "many_acc_top1", ")", ",", "\n", "'Median_shot_accuracy_top1: %.3f'", "\n", "%", "(", "self", ".", "median_acc_top1", ")", ",", "\n", "'Low_shot_accuracy_top1: %.3f'", "\n", "%", "(", "self", ".", "low_acc_top1", ")", ",", "\n", "'\\n'", "]", "\n", "\n", "rsl", "=", "{", "phase", "+", "'_all'", ":", "self", ".", "eval_acc_mic_top1", ",", "\n", "phase", "+", "'_many'", ":", "self", ".", "many_acc_top1", ",", "\n", "phase", "+", "'_median'", ":", "self", ".", "median_acc_top1", ",", "\n", "phase", "+", "'_low'", ":", "self", ".", "low_acc_top1", ",", "\n", "phase", "+", "'_fscore'", ":", "self", ".", "eval_f_measure", "}", "\n", "\n", "if", "phase", "==", "'val'", ":", "\n", "            ", "print_write", "(", "print_str", ",", "self", ".", "log_file", ")", "\n", "", "else", ":", "\n", "            ", "acc_str", "=", "[", "\"{:.1f} \\t {:.1f} \\t {:.1f} \\t {:.1f}\"", ".", "format", "(", "\n", "self", ".", "many_acc_top1", "*", "100", ",", "\n", "self", ".", "median_acc_top1", "*", "100", ",", "\n", "self", ".", "low_acc_top1", "*", "100", ",", "\n", "self", ".", "eval_acc_mic_top1", "*", "100", ")", "]", "\n", "if", "self", ".", "log_file", "is", "not", "None", "and", "os", ".", "path", ".", "exists", "(", "self", ".", "log_file", ")", ":", "\n", "                ", "print_write", "(", "print_str", ",", "self", ".", "log_file", ")", "\n", "print_write", "(", "acc_str", ",", "self", ".", "log_file", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "*", "print_str", ")", "\n", "print", "(", "*", "acc_str", ")", "\n", "\n", "", "", "if", "phase", "==", "'test'", ":", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.store_logits": [[948, 977], ["torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "run_networks.model.networks.values", "tqdm.tqdm.tqdm", "numpy.save", "numpy.save", "print", "run_networks.model.eval", "os.path.join", "run_networks.model.total_logits.cpu().data.numpy", "os.path.join", "run_networks.model.total_labels.cpu().data.numpy", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "inputs.cuda", "labels.cuda", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "run_networks.model.batch_forward", "hasattr", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "run_networks.model.total_logits.cpu", "run_networks.model.total_labels.cpu"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.eval", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.batch_forward"], ["            ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "training_opt", "[", "'log_dir'", "]", ",", "'cls_accs.pkl'", ")", ",", "'wb'", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "self", ".", "cls_accs", ",", "f", ")", "\n", "", "", "return", "rsl", "\n", "\n", "", "def", "reset_model", "(", "self", ",", "model_state", ")", ":", "\n", "        ", "for", "key", ",", "model", "in", "self", ".", "networks", ".", "items", "(", ")", ":", "\n", "            ", "weights", "=", "model_state", "[", "key", "]", "\n", "weights", "=", "{", "k", ":", "weights", "[", "k", "]", "for", "k", "in", "weights", "if", "k", "in", "model", ".", "state_dict", "(", ")", "}", "\n", "model", ".", "load_state_dict", "(", "weights", ")", "\n", "\n", "", "", "def", "load_model", "(", "self", ",", "model_dir", "=", "None", ")", ":", "\n", "        ", "model_dir", "=", "self", ".", "training_opt", "[", "'log_dir'", "]", "if", "model_dir", "is", "None", "else", "model_dir", "\n", "\n", "if", "'CIFAR'", "in", "self", ".", "training_opt", "[", "'dataset'", "]", ":", "\n", "# CIFARs don't have val set, so use the latest model", "\n", "            ", "print", "(", "'Validation on the latest model.'", ")", "\n", "if", "not", "model_dir", ".", "endswith", "(", "'.pth'", ")", ":", "\n", "                ", "model_dir", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'latest_model_checkpoint.pth'", ")", "\n", "", "print", "(", "'Loading model from %s'", "%", "(", "model_dir", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_dir", ")", "\n", "model_state", "=", "checkpoint", "[", "'state_dict'", "]", "\n", "", "else", ":", "\n", "            ", "print", "(", "'Validation on the best model.'", ")", "\n", "if", "not", "model_dir", ".", "endswith", "(", "'.pth'", ")", ":", "\n", "                ", "model_dir", "=", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'final_model_checkpoint.pth'", ")", "\n", "", "print", "(", "'Loading model from %s'", "%", "(", "model_dir", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_dir", ")", "\n", "model_state", "=", "checkpoint", "[", "'state_dict_best'", "]", "\n", "\n", "", "for", "key", ",", "model", "in", "self", ".", "networks", ".", "items", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.eval": [[979, 1104], ["utils.print_write", "time.sleep", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "torch.cuda.empty_cache", "run_networks.model.networks.values", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "torch.empty().cuda", "numpy.empty", "tqdm.tqdm.tqdm", "torch.softmax().max", "torch.softmax().max", "torch.softmax().max", "torch.softmax().max", "utils.mic_acc_cal", "utils.F_measure", "utils.shot_acc", "run_networks.model.store_logits", "run_networks.model.store_logits", "run_networks.model.store_logits", "run_networks.model.eval", "run_networks.model.saving_feature_with_label_init", "run_networks.model.saving_feature_with_label_export", "utils.print_write", "run_networks.model.write_summary", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "torch.empty", "inputs.cuda", "labels.cuda", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "run_networks.model.batch_forward", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "numpy.concatenate", "torch.softmax", "torch.softmax", "torch.softmax", "torch.softmax", "os.path.exists", "utils.print_write", "utils.print_write", "print", "print", "open", "pickle.dump", "run_networks.model.saving_feature_with_label_update", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "torch.log().cuda", "run_networks.model.total_logits.detach", "os.path.join", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log", "torch.log"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.print_write", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.mic_acc_cal", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.F_measure", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.shot_acc", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.store_logits", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.store_logits", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.store_logits", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.eval", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.saving_feature_with_label_init", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.saving_feature_with_label_export", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.print_write", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.write_summary", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.batch_forward", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.print_write", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.print_write", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.saving_feature_with_label_update"], ["# if loading classifier in training:", "\n", "#     1. only tuning memory embedding", "\n", "#     2. retrain the entire classifier", "\n", "##########################################", "\n", "            ", "if", "'embed'", "in", "checkpoint", ":", "\n", "                ", "print", "(", "'============> Load Moving Average <==========='", ")", "\n", "self", ".", "embed_mean", "=", "checkpoint", "[", "'embed'", "]", "\n", "self", ".", "embed_back", "=", "checkpoint", "[", "'embed'", "]", "\n", "\n", "", "if", "not", "self", ".", "test_mode", "and", "'Classifier'", "in", "self", ".", "config", "[", "'networks'", "]", "[", "key", "]", "[", "'def_file'", "]", ":", "\n", "                ", "if", "'tuning_memory'", "in", "self", ".", "config", "and", "self", ".", "config", "[", "'tuning_memory'", "]", ":", "\n", "                    ", "print", "(", "'=============== WARNING! WARNING! ==============='", ")", "\n", "print", "(", "'========> Only Tuning Memory Embedding  <========'", ")", "\n", "for", "param_name", ",", "param", "in", "self", ".", "networks", "[", "key", "]", ".", "named_parameters", "(", ")", ":", "\n", "# frezing all params only tuning memory_embeding", "\n", "                        ", "if", "'embed'", "in", "param_name", ":", "\n", "                            ", "param", ".", "requires_grad", "=", "True", "\n", "print", "(", "'=====> Abandon Weight {} in {} from the checkpoints.'", ".", "format", "(", "param_name", ",", "key", ")", ")", "\n", "if", "param_name", "in", "model_state", "[", "key", "]", ":", "\n", "                                ", "del", "model_state", "[", "key", "]", "[", "param_name", "]", "\n", "", "", "else", ":", "\n", "                            ", "param", ".", "requires_grad", "=", "False", "\n", "", "print", "(", "'=====> Tuning: {} | {}'", ".", "format", "(", "str", "(", "param", ".", "requires_grad", ")", ".", "ljust", "(", "5", ",", "' '", ")", ",", "param_name", ")", ")", "\n", "", "print", "(", "'================================================='", ")", "\n", "", "else", ":", "\n", "# Skip classifier initialization ", "\n", "#print('================ WARNING! WARNING! ================')", "\n", "                    ", "print", "(", "'=======> Load classifier from checkpoint <======='", ")", "\n", "#print('===================================================')", "\n", "#continue", "\n", "", "", "weights", "=", "model_state", "[", "key", "]", "\n", "weights", "=", "{", "k", ":", "weights", "[", "k", "]", "for", "k", "in", "weights", "if", "k", "in", "model", ".", "state_dict", "(", ")", "}", "\n", "x", "=", "model", ".", "state_dict", "(", ")", "\n", "x", ".", "update", "(", "weights", ")", "\n", "if", "all", "(", "[", "weights", "[", "k", "]", ".", "sum", "(", ")", ".", "item", "(", ")", "==", "x", "[", "k", "]", ".", "sum", "(", ")", ".", "item", "(", ")", "for", "k", "in", "weights", "if", "k", "in", "x", "]", ")", ":", "\n", "                ", "print", "(", "'=====> All keys in weights have been loaded to the module {}'", ".", "format", "(", "key", ")", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'=====> Error! Error! Error! Error! Loading failure in module {}'", ".", "format", "(", "key", ")", ")", "\n", "", "model", ".", "load_state_dict", "(", "x", ")", "\n", "\n", "", "", "def", "save_latest", "(", "self", ",", "epoch", ")", ":", "\n", "        ", "model_weights", "=", "{", "}", "\n", "model_weights", "[", "'feat_model'", "]", "=", "copy", ".", "deepcopy", "(", "self", ".", "networks", "[", "'feat_model'", "]", ".", "state_dict", "(", ")", ")", "\n", "model_weights", "[", "'classifier'", "]", "=", "copy", ".", "deepcopy", "(", "self", ".", "networks", "[", "'classifier'", "]", ".", "state_dict", "(", ")", ")", "\n", "\n", "model_states", "=", "{", "\n", "'epoch'", ":", "epoch", ",", "\n", "'state_dict'", ":", "model_weights", ",", "\n", "'embed'", ":", "self", ".", "embed_mean", ",", "\n", "}", "\n", "\n", "model_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "training_opt", "[", "'log_dir'", "]", ",", "\n", "'latest_model_checkpoint.pth'", ")", "\n", "torch", ".", "save", "(", "model_states", ",", "model_dir", ")", "\n", "\n", "", "def", "save_model", "(", "self", ",", "epoch", ",", "best_epoch", ",", "best_model_weights", ",", "best_acc", ")", ":", "\n", "\n", "        ", "model_states", "=", "{", "'epoch'", ":", "epoch", ",", "\n", "'best_epoch'", ":", "best_epoch", ",", "\n", "'state_dict_best'", ":", "best_model_weights", ",", "\n", "'best_acc'", ":", "best_acc", ",", "\n", "'embed'", ":", "self", ".", "embed_mean", ",", "}", "\n", "\n", "model_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "training_opt", "[", "'log_dir'", "]", ",", "\n", "'final_model_checkpoint.pth'", ")", "\n", "\n", "torch", ".", "save", "(", "model_states", ",", "model_dir", ")", "\n", "\n", "", "def", "output_logits", "(", "self", ")", ":", "\n", "        ", "filename", "=", "os", ".", "path", ".", "join", "(", "self", ".", "training_opt", "[", "'log_dir'", "]", ",", "'logits'", ")", "\n", "print", "(", "\"Saving total logits to: %s.npz\"", "%", "filename", ")", "\n", "np", ".", "savez", "(", "filename", ",", "\n", "logits", "=", "self", ".", "total_logits", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "labels", "=", "self", ".", "total_labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "\n", "paths", "=", "self", ".", "total_paths", ")", "\n", "\n", "", "def", "saving_feature_with_label_init", "(", "self", ")", ":", "\n", "        ", "self", ".", "saving_feature_container", "=", "[", "]", "\n", "self", ".", "saving_logit_container", "=", "[", "]", "\n", "self", ".", "saving_label_container", "=", "[", "]", "\n", "# record number of instances for each class", "\n", "if", "isinstance", "(", "self", ".", "data", "[", "'train'", "]", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "training_labels", "=", "np", ".", "array", "(", "self", ".", "data", "[", "'train'", "]", ")", ".", "astype", "(", "int", ")", "\n", "", "else", ":", "\n", "            ", "training_labels", "=", "np", ".", "array", "(", "self", ".", "data", "[", "'train'", "]", ".", "dataset", ".", "labels", ")", ".", "astype", "(", "int", ")", "\n", "\n", "", "train_class_count", "=", "[", "]", "\n", "for", "l", "in", "np", ".", "unique", "(", "training_labels", ")", ":", "\n", "            ", "train_class_count", ".", "append", "(", "len", "(", "training_labels", "[", "training_labels", "==", "l", "]", ")", ")", "\n", "", "self", ".", "train_class_count", "=", "np", ".", "array", "(", "train_class_count", ")", "\n", "\n", "", "def", "saving_feature_with_label_update", "(", "self", ",", "features", ",", "logits", ",", "labels", ")", ":", "\n", "        ", "self", ".", "saving_feature_container", ".", "append", "(", "features", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "self", ".", "saving_logit_container", ".", "append", "(", "logits", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "self", ".", "saving_label_container", ".", "append", "(", "labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ")", "\n", "\n", "\n", "", "def", "saving_feature_with_label_export", "(", "self", ",", "save_name", "=", "'eval_features_with_labels.pth'", ")", ":", "\n", "        ", "eval_features", "=", "{", "'features'", ":", "torch", ".", "cat", "(", "self", ".", "saving_feature_container", ",", "dim", "=", "0", ")", ".", "numpy", "(", ")", ",", "\n", "'labels'", ":", "torch", ".", "cat", "(", "self", ".", "saving_label_container", ",", "dim", "=", "0", ")", ".", "numpy", "(", ")", ",", "\n", "'logits'", ":", "torch", ".", "cat", "(", "self", ".", "saving_logit_container", ",", "dim", "=", "0", ")", ".", "numpy", "(", ")", ",", "\n", "'class_count'", ":", "self", ".", "train_class_count", "}", "\n", "\n", "eval_features_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "training_opt", "[", "'log_dir'", "]", ",", "save_name", ")", "\n", "torch", ".", "save", "(", "eval_features", ",", "eval_features_dir", ")", "\n", "print_write", "(", "[", "'=====> Features with labels are saved as {}'", ".", "format", "(", "eval_features_dir", ")", "]", ",", "self", ".", "log_file", ")", "\n", "\n", "\n", "\n", "", "", ""]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.reset_model": [[1105, 1110], ["run_networks.model.networks.items", "model.load_state_dict", "model.state_dict"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.utils.util.load_state_dict"], []], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.load_model": [[1111, 1170], ["print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "run_networks.model.networks.items", "print", "print", "model.state_dict", "model.state_dict.update", "all", "model.load_state_dict", "os.path.join.endswith", "os.path.join", "os.path.join.endswith", "os.path.join", "print", "print", "print", "print", "print", "run_networks.model.networks[].named_parameters", "print", "print", "print", "model.state_dict", "weights[].sum().item", "x[].sum().item", "print", "str().ljust", "weights[].sum", "x[].sum", "str"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update", "home.repos.pwc.inspect_result.beierzhu_xerm.utils.util.load_state_dict"], []], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.save_latest": [[1171, 1185], ["copy.deepcopy", "copy.deepcopy", "os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "run_networks.model.networks[].state_dict", "run_networks.model.networks[].state_dict"], "methods", ["None"], []], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.save_model": [[1186, 1198], ["os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save"], "methods", ["None"], []], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.output_logits": [[1199, 1206], ["os.path.join", "print", "numpy.savez", "run_networks.model.total_logits.detach().cpu().numpy", "run_networks.model.total_labels.detach().cpu().numpy", "run_networks.model.total_logits.detach().cpu", "run_networks.model.total_labels.detach().cpu", "run_networks.model.total_logits.detach", "run_networks.model.total_labels.detach"], "methods", ["None"], []], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.saving_feature_with_label_init": [[1207, 1211], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.saving_feature_with_label_update": [[1213, 1217], ["run_networks.model.saving_feature_container.append", "run_networks.model.saving_logit_container.append", "run_networks.model.saving_label_container.append", "features.detach().cpu", "logits.detach().cpu", "labels.detach().cpu", "features.detach", "logits.detach", "labels.detach"], "methods", ["None"], []], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.saving_feature_with_label_export": [[1219, 1229], ["os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "utils.print_write", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat().numpy", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.print_write"], []], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.calculate_thresholds": [[1231, 1255], ["run_networks.model.networks.values", "run_networks.model.eval", "tqdm.tqdm.tqdm", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "thresholds.data.cpu().numpy", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "torch.logsumexp", "numpy.log", "inputs.cuda", "labels.cuda", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "torch.set_grad_enabled", "run_networks.model.batch_forward", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.append", "torch.cat.size", "torch.cat.size", "torch.cat.size", "torch.cat.size", "thresholds.data.cpu"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.eval", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.run_networks.model.batch_forward", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size", "home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size"], []], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.logger.Logger.__init__": [[15, 26], ["os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.isdir", "os.makedirs"], "methods", ["None"], ["for", "_", ",", "handler", "in", "config", "[", "'handlers'", "]", ".", "items", "(", ")", ":", "\n", "            ", "if", "'filename'", "in", "handler", ":", "\n", "                ", "handler", "[", "'filename'", "]", "=", "str", "(", "save_dir", "/", "handler", "[", "'filename'", "]", ")", "\n", "\n", "", "", "logging", ".", "config", ".", "dictConfig", "(", "config", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"Warning: logging configuration file is not found in {}.\"", ".", "format", "(", "log_config", ")", ")", "\n", "logging", ".", "basicConfig", "(", "level", "=", "default_level", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.logger.Logger.log_cfg": [[27, 31], ["print", "open", "yaml.dump"], "methods", ["None"], []], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.logger.Logger.log_acc": [[32, 43], ["open", "csv.DictWriter", "csv.DictWriter.writeheader", "csv.DictWriter.writerow", "open", "csv.DictWriter", "csv.DictWriter.writerow", "accs.keys"], "methods", ["None"], []], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.logger.Logger.log_loss": [[44, 57], ["open", "csv.DictWriter", "csv.DictWriter.writeheader", "csv.DictWriter.writerow", "open", "csv.DictWriter", "csv.DictWriter.writerow", "valid_losses.keys"], "methods", ["None"], []], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.logger.Logger.log_ws": [[58, 67], ["h5py.File", "f.create_group", "ws.items", "f.create_group.create_dataset"], "methods", ["None"], []], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.WarmupMultiStepLR.__init__": [[301, 328], ["super().__init__", "ValueError", "ValueError", "list", "sorted"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__"], ["", "", "def", "l2_loss", "(", "input", ",", "target", ",", "reduction", "=", "'mean'", ")", ":", "\n", "    ", "return", "F", ".", "mse_loss", "(", "input", ",", "target", ",", "reduction", "=", "reduction", ")", "\n", "\n", "\n", "", "def", "regression_loss", "(", "input", ",", "target", ",", "l2", "=", "False", ",", "pre_mean", "=", "True", ",", "l1", "=", "False", ",", "moving_average", "=", "False", ",", "moving_ratio", "=", "0.01", ")", ":", "\n", "    ", "assert", "(", "l2", "+", "l1", "+", "moving_average", ")", "==", "1", "\n", "if", "l2", ":", "\n", "        ", "if", "(", "input", ".", "shape", "[", "0", "]", "==", "target", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "assert", "not", "pre_mean", "\n", "loss", "=", "l2_loss", "(", "input", ",", "target", ".", "clone", "(", ")", ".", "detach", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "assert", "pre_mean", "\n", "loss", "=", "l2_loss", "(", "input", ",", "target", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "mean", "(", "0", ",", "keepdim", "=", "True", ")", ")", "\n", "", "", "elif", "l1", ":", "\n", "        ", "loss", "=", "smooth_l1_loss", "(", "input", ",", "target", ".", "clone", "(", ")", ".", "detach", "(", ")", ")", "\n", "", "elif", "moving_average", ":", "\n", "# input should be register_buffer rather than nn.Parameter", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "input", "=", "(", "1", "-", "moving_ratio", ")", "*", "input", "+", "moving_ratio", "*", "target", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "mean", "(", "0", ",", "keepdim", "=", "True", ")", "\n", "", "loss", "=", "None", "\n", "", "return", "loss", "\n", "\n", "", "def", "gumbel_softmax", "(", "logits", ",", "tau", "=", "1", ",", "hard", "=", "False", ",", "gumbel", "=", "True", ",", "dim", "=", "-", "1", ")", ":", "\n", "    ", "if", "gumbel", ":", "\n", "        ", "gumbels", "=", "-", "torch", ".", "empty_like", "(", "logits", ")", ".", "exponential_", "(", ")", ".", "log", "(", ")", "# ~Gumbel(0,1)", "\n", "gumbels", "=", "(", "logits", "+", "gumbels", ")", "/", "tau", "# ~Gumbel(logits,tau)", "\n", "y_soft", "=", "gumbels", ".", "softmax", "(", "dim", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.WarmupMultiStepLR.get_lr": [[329, 342], ["bisect.bisect_right", "float"], "methods", ["None"], ["        ", "y_soft", "=", "logits", ".", "softmax", "(", "dim", ")", "\n", "\n", "", "if", "hard", ":", "\n", "# Straight through.", "\n", "        ", "index", "=", "y_soft", ".", "max", "(", "dim", ",", "keepdim", "=", "True", ")", "[", "1", "]", "\n", "y_hard", "=", "torch", ".", "zeros_like", "(", "logits", ")", ".", "scatter_", "(", "dim", ",", "index", ",", "1.0", ")", "\n", "ret", "=", "y_hard", "-", "y_soft", ".", "detach", "(", ")", "+", "y_soft", "\n", "", "else", ":", "\n", "# Reparametrization trick.", "\n", "        ", "ret", "=", "y_soft", "\n", "", "return", "ret", "\n", "\n", "\n", "", "def", "gumbel_sigmoid", "(", "logits", ",", "tau", "=", "1", ",", "hard", "=", "False", ",", "gumbel", "=", "True", ")", ":", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.__init__": [[372, 374], ["utils.MiscMeter.reset"], "methods", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.reset"], ["\"Milestones should be a list of\"", "\" increasing integers. Got {}\"", ",", "\n", "milestones", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.reset": [[375, 382], ["None"], "methods", ["None"], ["\n", "", "if", "warmup_method", "not", "in", "(", "\"constant\"", ",", "\"linear\"", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"Only 'constant' or 'linear' warmup_method accepted\"", "\n", "\"got {}\"", ".", "format", "(", "warmup_method", ")", "\n", ")", "\n", "", "self", ".", "milestones", "=", "milestones", "\n", "self", ".", "gamma", "=", "gamma", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.MiscMeter.update": [[383, 390], ["None"], "methods", ["None"], ["self", ".", "warmup_factor", "=", "warmup_factor", "\n", "self", ".", "warmup_epochs", "=", "warmup_epochs", "\n", "self", ".", "warmup_method", "=", "warmup_method", "\n", "super", "(", "WarmupMultiStepLR", ",", "self", ")", ".", "__init__", "(", "optimizer", ",", "last_epoch", ")", "\n", "\n", "", "def", "get_lr", "(", "self", ")", ":", "\n", "        ", "warmup_factor", "=", "1", "\n", "if", "self", ".", "last_epoch", "<", "self", ".", "warmup_epochs", ":", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.print_w": [[29, 35], ["print", "open", "print"], "function", ["None"], ["        ", "self", ".", "reset", "(", ")", "\n", "\n", "", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.source_import": [[36, 42], ["importlib.util.spec_from_file_location", "importlib.util.module_from_spec", "importlib.util.spec_from_file_location.loader.exec_module"], "function", ["None"], ["self", ".", "min", "=", "9e15", "\n", "self", ".", "max", "=", "-", "9e15", "\n", "\n", "", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.batch_show": [[43, 54], ["np.clip.numpy().transpose", "numpy.array", "numpy.array", "numpy.clip", "matplotlib.figure", "matplotlib.imshow", "matplotlib.title", "np.clip.numpy"], "function", ["None"], ["self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "self", ".", "min", "=", "val", "if", "val", "<", "self", ".", "min", "else", "self", ".", "min", "\n", "self", ".", "max", "=", "val", "if", "val", ">", "self", ".", "max", "else", "self", ".", "max", "\n", "\n", "\n", "", "", "def", "update", "(", "config", ",", "args", ")", ":", "\n", "# Change parameters", "\n", "# config['model_dir'] = get_value(config['model_dir'], args.model_dir)", "\n", "    ", "config", "[", "'training_opt'", "]", "[", "'batch_size'", "]", "=", "get_value", "(", "config", "[", "'training_opt'", "]", "[", "'batch_size'", "]", ",", "args", ".", "batch_size", ")", "\n", "return", "config", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.print_write": [[55, 61], ["print", "open", "print"], "function", ["None"], ["\n", "", "def", "source_import", "(", "file_path", ")", ":", "\n", "    ", "\"\"\"This function imports python module directly from source code using importlib\"\"\"", "\n", "spec", "=", "importlib", ".", "util", ".", "spec_from_file_location", "(", "''", ",", "file_path", ")", "\n", "module", "=", "importlib", ".", "util", ".", "module_from_spec", "(", "spec", ")", "\n", "spec", ".", "loader", ".", "exec_module", "(", "module", ")", "\n", "return", "module", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.init_weights": [[62, 81], ["print", "torch.load", "torch.load", "model.load_state_dict", "model.state_dict", "model.state_dict", "model.state_dict", "model.state_dict", "model.state_dict", "model.state_dict"], "function", ["home.repos.pwc.inspect_result.beierzhu_xerm.utils.util.load_state_dict"], ["\n", "", "def", "batch_show", "(", "inp", ",", "title", "=", "None", ")", ":", "\n", "    ", "\"\"\"Imshow for Tensor.\"\"\"", "\n", "inp", "=", "inp", ".", "numpy", "(", ")", ".", "transpose", "(", "(", "1", ",", "2", ",", "0", ")", ")", "\n", "mean", "=", "np", ".", "array", "(", "[", "0.485", ",", "0.456", ",", "0.406", "]", ")", "\n", "std", "=", "np", ".", "array", "(", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "inp", "=", "std", "*", "inp", "+", "mean", "\n", "inp", "=", "np", ".", "clip", "(", "inp", ",", "0", ",", "1", ")", "\n", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "20", ")", ")", "\n", "plt", ".", "imshow", "(", "inp", ")", "\n", "if", "title", "is", "not", "None", ":", "\n", "        ", "plt", ".", "title", "(", "title", ")", "\n", "\n", "", "", "def", "print_write", "(", "print_str", ",", "log_file", ")", ":", "\n", "    ", "print", "(", "*", "print_str", ")", "\n", "if", "log_file", "is", "None", ":", "\n", "        ", "return", "\n", "", "with", "open", "(", "log_file", ",", "'a'", ")", "as", "f", ":", "\n", "        ", "print", "(", "*", "print_str", ",", "file", "=", "f", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.shot_acc": [[82, 127], ["isinstance", "isinstance", "numpy.unique", "range", "numpy.array().astype", "numpy.array().astype", "preds.detach().cpu().numpy.detach().cpu().numpy", "labels.detach().cpu().numpy.detach().cpu().numpy", "isinstance", "train_class_count.append", "test_class_count.append", "class_correct.append", "len", "len", "many_shot.append", "len", "median_shot.append", "len", "low_shot.append", "TypeError", "len", "len", "many_shot.append", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.array", "numpy.array", "preds.detach().cpu().numpy.detach().cpu", "labels.detach().cpu().numpy.detach().cpu", "low_shot.append", "median_shot.append", "zip", "type", "preds.detach().cpu().numpy.detach", "labels.detach().cpu().numpy.detach"], "function", ["None"], ["", "", "def", "print_w", "(", "print_str", ",", "log_file", ")", ":", "\n", "    ", "print", "(", "print_str", ")", "\n", "if", "log_file", "is", "None", ":", "\n", "        ", "return", "\n", "", "with", "open", "(", "log_file", ",", "'a'", ")", "as", "f", ":", "\n", "        ", "print", "(", "print_str", ",", "file", "=", "f", ")", "\n", "\n", "", "", "def", "init_weights", "(", "model", ",", "weights_path", ",", "caffe", "=", "False", ",", "classifier", "=", "False", ")", ":", "\n", "    ", "\"\"\"Initialize weights\"\"\"", "\n", "print", "(", "'Pretrained %s weights path: %s'", "%", "(", "'classifier'", "if", "classifier", "else", "'feature model'", ",", "\n", "weights_path", ")", ")", "\n", "weights", "=", "torch", ".", "load", "(", "weights_path", ")", "\n", "if", "not", "classifier", ":", "\n", "        ", "if", "caffe", ":", "\n", "            ", "weights", "=", "{", "k", ":", "weights", "[", "k", "]", "if", "k", "in", "weights", "else", "model", ".", "state_dict", "(", ")", "[", "k", "]", "\n", "for", "k", "in", "model", ".", "state_dict", "(", ")", "}", "\n", "", "else", ":", "\n", "            ", "weights", "=", "weights", "[", "'state_dict_best'", "]", "[", "'feat_model'", "]", "\n", "weights", "=", "{", "k", ":", "weights", "[", "'module.'", "+", "k", "]", "if", "'module.'", "+", "k", "in", "weights", "else", "model", ".", "state_dict", "(", ")", "[", "k", "]", "\n", "for", "k", "in", "model", ".", "state_dict", "(", ")", "}", "\n", "", "", "else", ":", "\n", "        ", "weights", "=", "weights", "[", "'state_dict_best'", "]", "[", "'classifier'", "]", "\n", "weights", "=", "{", "k", ":", "weights", "[", "'module.fc.'", "+", "k", "]", "if", "'module.fc.'", "+", "k", "in", "weights", "else", "model", ".", "state_dict", "(", ")", "[", "k", "]", "\n", "for", "k", "in", "model", ".", "state_dict", "(", ")", "}", "\n", "", "model", ".", "load_state_dict", "(", "weights", ")", "\n", "return", "model", "\n", "\n", "", "def", "shot_acc", "(", "preds", ",", "labels", ",", "train_data", ",", "many_shot_thr", "=", "100", ",", "low_shot_thr", "=", "20", ",", "acc_per_cls", "=", "False", ")", ":", "\n", "\n", "    ", "if", "isinstance", "(", "train_data", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "training_labels", "=", "np", ".", "array", "(", "train_data", ")", ".", "astype", "(", "int", ")", "\n", "", "else", ":", "\n", "        ", "training_labels", "=", "np", ".", "array", "(", "train_data", ".", "dataset", ".", "labels", ")", ".", "astype", "(", "int", ")", "\n", "\n", "", "if", "isinstance", "(", "preds", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "preds", "=", "preds", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "labels", "=", "labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "elif", "isinstance", "(", "preds", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "pass", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "'Type ({}) of preds not supported'", ".", "format", "(", "type", "(", "preds", ")", ")", ")", "\n", "", "train_class_count", "=", "[", "]", "\n", "test_class_count", "=", "[", "]", "\n", "class_correct", "=", "[", "]", "\n", "for", "l", "in", "np", ".", "unique", "(", "labels", ")", ":", "\n", "        ", "train_class_count", ".", "append", "(", "len", "(", "training_labels", "[", "training_labels", "==", "l", "]", ")", ")", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.F_measure": [[129, 132], ["sklearn.metrics.f1_score", "labels.detach().cpu().numpy", "preds.detach().cpu().numpy", "labels.detach().cpu", "preds.detach().cpu", "labels.detach", "preds.detach"], "function", ["None"], ["class_correct", ".", "append", "(", "(", "preds", "[", "labels", "==", "l", "]", "==", "labels", "[", "labels", "==", "l", "]", ")", ".", "sum", "(", ")", ")", "\n", "\n", "", "many_shot", "=", "[", "]", "\n", "median_shot", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.mic_acc_cal": [[133, 142], ["isinstance", "len", "len", "len", "preds.eq().cpu().sum().float", "preds.eq().cpu().sum().float", "preds.eq().cpu().sum", "preds.eq().cpu().sum", "preds.eq().cpu", "preds.eq().cpu", "preds.eq", "preds.eq"], "function", ["None"], ["low_shot", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "train_class_count", ")", ")", ":", "\n", "        ", "if", "train_class_count", "[", "i", "]", ">", "many_shot_thr", ":", "\n", "            ", "many_shot", ".", "append", "(", "(", "class_correct", "[", "i", "]", "/", "test_class_count", "[", "i", "]", ")", ")", "\n", "", "elif", "train_class_count", "[", "i", "]", "<", "low_shot_thr", ":", "\n", "            ", "low_shot", ".", "append", "(", "(", "class_correct", "[", "i", "]", "/", "test_class_count", "[", "i", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "median_shot", ".", "append", "(", "(", "class_correct", "[", "i", "]", "/", "test_class_count", "[", "i", "]", ")", ")", "\n", "\n", "", "", "if", "len", "(", "many_shot", ")", "==", "0", ":", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.weighted_mic_acc_cal": [[144, 147], ["ws[].sum", "ws.sum"], "function", ["None"], ["", "if", "len", "(", "median_shot", ")", "==", "0", ":", "\n", "        ", "median_shot", ".", "append", "(", "0", ")", "\n", "", "if", "len", "(", "low_shot", ")", "==", "0", ":", "\n", "        ", "low_shot", ".", "append", "(", "0", ")", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.class_count": [[148, 154], ["numpy.array", "numpy.unique", "class_data_num.append", "len"], "function", ["None"], ["\n", "", "if", "acc_per_cls", ":", "\n", "        ", "class_accs", "=", "[", "c", "/", "cnt", "for", "c", ",", "cnt", "in", "zip", "(", "class_correct", ",", "test_class_count", ")", "]", "\n", "return", "np", ".", "mean", "(", "many_shot", ")", ",", "np", ".", "mean", "(", "median_shot", ")", ",", "np", ".", "mean", "(", "low_shot", ")", ",", "class_accs", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "mean", "(", "many_shot", ")", ",", "np", ".", "mean", "(", "median_shot", ")", ",", "np", ".", "mean", "(", "low_shot", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.torch2numpy": [[157, 164], ["isinstance", "x.detach().cpu().numpy", "isinstance", "tuple", "x.detach().cpu", "utils.torch2numpy", "x.detach"], "function", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.torch2numpy"], ["", "", "def", "weighted_shot_acc", "(", "preds", ",", "labels", ",", "ws", ",", "train_data", ",", "many_shot_thr", "=", "100", ",", "low_shot_thr", "=", "20", ")", ":", "\n", "\n", "    ", "training_labels", "=", "np", ".", "array", "(", "train_data", ".", "dataset", ".", "labels", ")", ".", "astype", "(", "int", ")", "\n", "\n", "if", "isinstance", "(", "preds", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "preds", "=", "preds", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "labels", "=", "labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "elif", "isinstance", "(", "preds", ",", "np", ".", "ndarray", ")", ":", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.logits2score": [[165, 170], ["torch.softmax", "F.softmax.gather", "score.squeeze().cpu().numpy.squeeze().cpu().numpy", "labels.view", "score.squeeze().cpu().numpy.squeeze().cpu", "score.squeeze().cpu().numpy.squeeze"], "function", ["None"], ["        ", "pass", "\n", "", "else", ":", "\n", "        ", "raise", "TypeError", "(", "'Type ({}) of preds not supported'", ".", "format", "(", "type", "(", "preds", ")", ")", ")", "\n", "", "train_class_count", "=", "[", "]", "\n", "test_class_count", "=", "[", "]", "\n", "class_correct", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.logits2entropy": [[172, 178], ["torch.softmax", "numpy.sum", "F.softmax.cpu().numpy", "numpy.log", "F.softmax.cpu"], "function", ["None"], ["        ", "train_class_count", ".", "append", "(", "len", "(", "training_labels", "[", "training_labels", "==", "l", "]", ")", ")", "\n", "test_class_count", ".", "append", "(", "ws", "[", "labels", "==", "l", "]", ".", "sum", "(", ")", ")", "\n", "class_correct", ".", "append", "(", "(", "(", "preds", "[", "labels", "==", "l", "]", "==", "labels", "[", "labels", "==", "l", "]", ")", "*", "ws", "[", "labels", "==", "l", "]", ")", ".", "sum", "(", ")", ")", "\n", "\n", "", "many_shot", "=", "[", "]", "\n", "median_shot", "=", "[", "]", "\n", "low_shot", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.logits2CE": [[180, 186], ["torch.softmax", "F.softmax.gather", "labels.view", "scores.gather.squeeze().cpu().numpy", "numpy.log", "scores.gather.squeeze().cpu", "scores.gather.squeeze"], "function", ["None"], ["        ", "if", "train_class_count", "[", "i", "]", ">", "many_shot_thr", ":", "\n", "            ", "many_shot", ".", "append", "(", "(", "class_correct", "[", "i", "]", "/", "test_class_count", "[", "i", "]", ")", ")", "\n", "", "elif", "train_class_count", "[", "i", "]", "<", "low_shot_thr", ":", "\n", "            ", "low_shot", ".", "append", "(", "(", "class_correct", "[", "i", "]", "/", "test_class_count", "[", "i", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "median_shot", ".", "append", "(", "(", "class_correct", "[", "i", "]", "/", "test_class_count", "[", "i", "]", ")", ")", "\n", "", "", "return", "np", ".", "mean", "(", "many_shot", ")", ",", "np", ".", "mean", "(", "median_shot", ")", ",", "np", ".", "mean", "(", "low_shot", ")", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.get_priority": [[188, 197], ["utils.logits2score", "utils.logits2entropy", "utils.logits2CE"], "function", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.logits2score", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.logits2entropy", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.logits2CE"], ["", "def", "F_measure", "(", "preds", ",", "labels", ",", "theta", "=", "None", ")", ":", "\n", "# Regular f1 score", "\n", "    ", "return", "f1_score", "(", "labels", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "preds", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "average", "=", "'macro'", ")", "\n", "\n", "", "def", "mic_acc_cal", "(", "preds", ",", "labels", ")", ":", "\n", "    ", "if", "isinstance", "(", "labels", ",", "tuple", ")", ":", "\n", "        ", "assert", "len", "(", "labels", ")", "==", "3", "\n", "targets_a", ",", "targets_b", ",", "lam", "=", "labels", "\n", "acc_mic_top1", "=", "(", "lam", "*", "preds", ".", "eq", "(", "targets_a", ".", "data", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", ".", "float", "(", ")", "+", "(", "1", "-", "lam", ")", "*", "preds", ".", "eq", "(", "targets_b", ".", "data", ")", ".", "cpu", "(", ")", ".", "sum", "(", ")", ".", "float", "(", ")", ")", "/", "len", "(", "preds", ")", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.get_value": [[198, 203], ["None"], "function", ["None"], ["", "else", ":", "\n", "        ", "acc_mic_top1", "=", "(", "preds", "==", "labels", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "/", "len", "(", "labels", ")", "\n", "", "return", "acc_mic_top1", "\n", "\n", "\n", "", "def", "weighted_mic_acc_cal", "(", "preds", ",", "labels", ",", "ws", ")", ":", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.print_grad_norm": [[206, 228], ["named_parameters.items", "logger_func", "sorted", "logger_func", "param_to_norm.items", "logger_func", "p.grad.norm", "p.size"], "function", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.size"], ["\n", "", "def", "class_count", "(", "data", ")", ":", "\n", "    ", "labels", "=", "np", ".", "array", "(", "data", ".", "dataset", ".", "labels", ")", "\n", "class_data_num", "=", "[", "]", "\n", "for", "l", "in", "np", ".", "unique", "(", "labels", ")", ":", "\n", "        ", "class_data_num", ".", "append", "(", "len", "(", "labels", "[", "labels", "==", "l", "]", ")", ")", "\n", "", "return", "class_data_num", "\n", "\n", "\n", "# New Added", "\n", "", "def", "torch2numpy", "(", "x", ")", ":", "\n", "    ", "if", "isinstance", "(", "x", ",", "torch", ".", "Tensor", ")", ":", "\n", "        ", "return", "x", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "elif", "isinstance", "(", "x", ",", "(", "list", ",", "tuple", ")", ")", ":", "\n", "        ", "return", "tuple", "(", "[", "torch2numpy", "(", "xi", ")", "for", "xi", "in", "x", "]", ")", "\n", "", "else", ":", "\n", "        ", "return", "x", "\n", "\n", "", "", "def", "logits2score", "(", "logits", ",", "labels", ")", ":", "\n", "    ", "scores", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "score", "=", "scores", ".", "gather", "(", "1", ",", "labels", ".", "view", "(", "-", "1", ",", "1", ")", ")", "\n", "score", "=", "score", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "return", "score", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.smooth_l1_loss": [[229, 240], ["torch.abs", "torch.abs", "torch.where", "torch.where", "torch.where.mean", "torch.where.sum", "print", "torch.where.mean"], "function", ["None"], ["\n", "\n", "", "def", "logits2entropy", "(", "logits", ")", ":", "\n", "    ", "scores", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n", "scores", "=", "scores", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "+", "1e-30", "\n", "ent", "=", "-", "scores", "*", "np", ".", "log", "(", "scores", ")", "\n", "ent", "=", "np", ".", "sum", "(", "ent", ",", "1", ")", "\n", "return", "ent", "\n", "\n", "\n", "", "def", "logits2CE", "(", "logits", ",", "labels", ")", ":", "\n", "    ", "scores", "=", "F", ".", "softmax", "(", "logits", ",", "dim", "=", "1", ")", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.l2_loss": [[242, 244], ["torch.mse_loss"], "function", ["None"], ["score", "=", "score", ".", "squeeze", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "+", "1e-30", "\n", "ce", "=", "-", "np", ".", "log", "(", "score", ")", "\n", "return", "ce", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.regression_loss": [[246, 263], ["utils.l2_loss", "utils.l2_loss", "utils.smooth_l1_loss", "target.clone().detach", "target.clone().detach().mean", "target.clone().detach", "torch.no_grad", "torch.no_grad", "target.clone", "target.clone().detach", "target.clone", "target.clone().detach().mean", "target.clone", "target.clone().detach", "target.clone"], "function", ["home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.l2_loss", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.l2_loss", "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.smooth_l1_loss"], ["\n", "", "def", "get_priority", "(", "ptype", ",", "logits", ",", "labels", ")", ":", "\n", "    ", "if", "ptype", "==", "'score'", ":", "\n", "        ", "ws", "=", "1", "-", "logits2score", "(", "logits", ",", "labels", ")", "\n", "", "elif", "ptype", "==", "'entropy'", ":", "\n", "        ", "ws", "=", "logits2entropy", "(", "logits", ")", "\n", "", "elif", "ptype", "==", "'CE'", ":", "\n", "        ", "ws", "=", "logits2CE", "(", "logits", ",", "labels", ")", "\n", "\n", "", "return", "ws", "\n", "\n", "", "def", "get_value", "(", "oldv", ",", "newv", ")", ":", "\n", "    ", "if", "newv", "is", "not", "None", ":", "\n", "        ", "return", "newv", "\n", "", "else", ":", "\n", "        ", "return", "oldv", "\n", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.gumbel_softmax": [[264, 281], ["gumbels.softmax", "logits.softmax", "torch.zeros_like().scatter_", "torch.zeros_like().scatter_", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "logits.softmax.max", "torch.zeros_like", "torch.zeros_like", "logits.softmax.detach", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like", "torch.empty_like"], "function", ["home.repos.pwc.inspect_result.beierzhu_xerm.data.MixedPrioritizedSampler.PriorityTree.max"], ["# Tang Kaihua New Add", "\n", "", "", "def", "print_grad_norm", "(", "named_parameters", ",", "logger_func", ",", "log_file", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "if", "not", "verbose", ":", "\n", "        ", "return", "None", "\n", "\n", "", "total_norm", "=", "0.0", "\n", "param_to_norm", "=", "{", "}", "\n", "param_to_shape", "=", "{", "}", "\n", "for", "n", ",", "p", "in", "named_parameters", ".", "items", "(", ")", ":", "\n", "        ", "if", "p", ".", "grad", "is", "not", "None", ":", "\n", "            ", "param_norm", "=", "p", ".", "grad", ".", "norm", "(", "2", ")", "\n", "total_norm", "+=", "param_norm", "**", "2", "\n", "param_to_norm", "[", "n", "]", "=", "param_norm", "\n", "param_to_shape", "[", "n", "]", "=", "p", ".", "size", "(", ")", "\n", "\n", "", "", "total_norm", "=", "total_norm", "**", "(", "1.", "/", "2", ")", "\n", "\n", "logger_func", "(", "[", "'----------Total norm {:.5f}-----------------'", ".", "format", "(", "total_norm", ")", "]", ",", "log_file", ")", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.gumbel_sigmoid": [[283, 299], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.empty_like().exponential_().log", "torch.empty_like().exponential_().log", "torch.sigmoid.detach", "torch.empty_like().exponential_", "torch.empty_like().exponential_", "torch.empty_like", "torch.empty_like"], "function", ["None"], ["        ", "logger_func", "(", "[", "\"{:<50s}: {:.5f}, ({})\"", ".", "format", "(", "name", ",", "norm", ",", "param_to_shape", "[", "name", "]", ")", "]", ",", "log_file", ")", "\n", "", "logger_func", "(", "[", "'-------------------------------'", "]", ",", "log_file", ")", "\n", "\n", "return", "total_norm", "\n", "\n", "", "def", "smooth_l1_loss", "(", "input", ",", "target", ",", "beta", "=", "1.", "/", "9", ",", "reduction", "=", "'mean'", ")", ":", "\n", "    ", "n", "=", "torch", ".", "abs", "(", "input", "-", "target", ")", "\n", "cond", "=", "n", "<", "beta", "\n", "loss", "=", "torch", ".", "where", "(", "cond", ",", "0.5", "*", "n", "**", "2", "/", "beta", ",", "n", "-", "0.5", "*", "beta", ")", "\n", "if", "reduction", "==", "'mean'", ":", "\n", "        ", "return", "loss", ".", "mean", "(", ")", "\n", "", "elif", "reduction", "==", "'sum'", ":", "\n", "        ", "return", "loss", ".", "sum", "(", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'XXXXXX Error Reduction Type for smooth_l1_loss, use default mean'", ")", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.calculate_prior": [[345, 367], ["torch.Tensor", "torch.Tensor", "dict", "range", "open", "collections.Counter", "torch.Tensor.append", "torch.Tensor.sum", "labels.append", "range", "int", "int", "line.split"], "function", ["None"], ["gumbels", "=", "(", "logits", "+", "gumbels", ")", "/", "tau", "# ~Gumbel(logits,tau)", "\n", "y_soft", "=", "torch", ".", "sigmoid", "(", "gumbels", ")", "\n", "", "else", ":", "\n", "        ", "y_soft", "=", "torch", ".", "sigmoid", "(", "logits", ")", "\n", "\n", "", "if", "hard", ":", "\n", "# Straight through.", "\n", "        ", "y_hard", "=", "(", "y_soft", ">", "0.5", ")", ".", "float", "(", ")", "\n", "ret", "=", "y_hard", "-", "y_soft", ".", "detach", "(", ")", "+", "y_soft", "\n", "", "else", ":", "\n", "# Reparametrization trick.", "\n", "        ", "ret", "=", "y_soft", "\n", "", "return", "ret", "\n", "\n", "", "class", "WarmupMultiStepLR", "(", "torch", ".", "optim", ".", "lr_scheduler", ".", "_LRScheduler", ")", ":", "\n", "    ", "def", "__init__", "(", "\n", "self", ",", "\n", "optimizer", ",", "\n", "milestones", ",", "\n", "gamma", "=", "0.1", ",", "\n", "warmup_factor", "=", "1.0", "/", "3", ",", "\n", "warmup_epochs", "=", "5", ",", "\n", "warmup_method", "=", "\"linear\"", ",", "\n"]], "home.repos.pwc.inspect_result.beierzhu_xerm.xERM.PC.public.utils.shot_precision": [[392, 442], ["isinstance", "isinstance", "numpy.unique", "range", "numpy.array().astype", "numpy.array().astype", "preds.detach().cpu().numpy.detach().cpu().numpy", "labels.detach().cpu().numpy.detach().cpu().numpy", "isinstance", "train_class_count.append", "test_class_count.append", "class_correct.append", "len", "len", "many_shot.append", "len", "median_shot.append", "len", "low_shot.append", "TypeError", "len", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.array", "numpy.array", "preds.detach().cpu().numpy.detach().cpu", "labels.detach().cpu().numpy.detach().cpu", "many_shot.append", "zip", "type", "low_shot.append", "median_shot.append", "preds.detach().cpu().numpy.detach", "labels.detach().cpu().numpy.detach"], "function", ["None"], ["                ", "warmup_factor", "=", "self", ".", "warmup_factor", "\n", "", "elif", "self", ".", "warmup_method", "==", "\"linear\"", ":", "\n", "                ", "alpha", "=", "float", "(", "self", ".", "last_epoch", ")", "/", "self", ".", "warmup_epochs", "\n", "warmup_factor", "=", "self", ".", "warmup_factor", "*", "(", "1", "-", "alpha", ")", "+", "alpha", "\n", "", "", "return", "[", "\n", "base_lr", "\n", "*", "warmup_factor", "\n", "*", "self", ".", "gamma", "**", "bisect_right", "(", "self", ".", "milestones", ",", "self", ".", "last_epoch", ")", "\n", "for", "base_lr", "in", "self", ".", "base_lrs", "\n", "]", "\n", "", "", ""]]}