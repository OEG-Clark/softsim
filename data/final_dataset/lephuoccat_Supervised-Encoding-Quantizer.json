{"home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.main_decoder_mnist.Flatten.__init__": [[25, 29], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.fmnist-decoder.AEdecoder.__init__"], ["def", "__init__", "(", "self", ",", "start_dim", "=", "1", ",", "end_dim", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "Flatten", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "start_dim", "=", "start_dim", "\n", "self", ".", "end_dim", "=", "end_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.main_decoder_mnist.Flatten.forward": [[30, 32], ["input.flatten"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", ".", "flatten", "(", "self", ".", "start_dim", ",", "self", ".", "end_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.main_decoder_mnist.AEencoder.__init__": [[85, 99], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "main_decoder_mnist.Flatten", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.fmnist-decoder.AEdecoder.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "AEencoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1", ",", "32", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "28", "*", "28", "*", "64", ",", "1024", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "1024", ",", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "128", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.main_decoder_mnist.AEencoder.forward": [[100, 104], ["main_decoder_mnist.AEencoder.encoder", "main_decoder_mnist.AEencoder.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "X", "=", "self", ".", "encoder", "(", "X", ")", "\n", "X", "=", "self", ".", "classifier", "(", "X", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.main_decoder_mnist.AEdecoder.__init__": [[106, 119], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.Sigmoid", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.fmnist-decoder.AEdecoder.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "AEdecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear_decoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "128", ",", "1024", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "1024", ",", "28", "*", "28", "*", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "self", ".", "conv_decoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "64", ",", "32", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "32", ",", "1", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.main_decoder_mnist.AEdecoder.forward": [[120, 125], ["main_decoder_mnist.AEdecoder.linear_decoder", "main_decoder_mnist.AEdecoder.view", "main_decoder_mnist.AEdecoder.conv_decoder", "main_decoder_mnist.AEdecoder.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "X", "=", "self", ".", "linear_decoder", "(", "X", ")", "\n", "X", "=", "X", ".", "view", "(", "X", ".", "size", "(", "0", ")", ",", "64", ",", "28", ",", "28", ")", "\n", "X", "=", "self", ".", "conv_decoder", "(", "X", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.main_decoder_mnist.to_img": [[53, 56], ["x.view.view", "x.view.size"], "function", ["None"], ["", "def", "to_img", "(", "x", ")", ":", "\n", "    ", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "28", ",", "28", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.main_decoder_mnist.min_max_normalization": [[57, 64], ["tensor.min", "tensor.max"], "function", ["None"], ["", "def", "min_max_normalization", "(", "tensor", ",", "min_value", ",", "max_value", ")", ":", "\n", "    ", "min_tensor", "=", "tensor", ".", "min", "(", ")", "\n", "tensor", "=", "(", "tensor", "-", "min_tensor", ")", "\n", "max_tensor", "=", "tensor", ".", "max", "(", ")", "\n", "tensor", "=", "tensor", "/", "max_tensor", "\n", "tensor", "=", "tensor", "*", "(", "max_value", "-", "min_value", ")", "+", "min_value", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.main_decoder_mnist.tensor_round": [[65, 67], ["torch.round", "torch.round"], "function", ["None"], ["", "def", "tensor_round", "(", "tensor", ")", ":", "\n", "    ", "return", "torch", ".", "round", "(", "tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.main_decoder_mnist.train_quantizer": [[199, 235], ["print", "numpy.column_stack", "range", "torch.no_grad", "torch.no_grad", "range", "range", "k_label.append", "model.eval", "enumerate", "numpy.concatenate", "numpy.concatenate", "print", "kmeans_pytorch.kmeans.lloyd", "print", "numpy.histogram", "np.concatenate.append", "np.concatenate.append", "temp.append", "enumerate", "inputs.to", "target.cpu().detach().numpy", "max", "target.cpu().detach", "target.cpu"], "function", ["None"], ["def", "train_quantizer", "(", "agrs", ",", "K", ")", ":", "\n", "    ", "print", "(", "'==> start K-means process with k = %d..'", "%", "(", "K", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "epoch", "in", "range", "(", "args", ".", "num_epoch", ")", ":", "\n", "# Extract Feature", "\n", "            ", "model", ".", "eval", "(", ")", "\n", "features", "=", "[", "]", "\n", "targets", "=", "[", "]", "\n", "for", "_", ",", "(", "inputs", ",", "target", ")", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "                ", "inputs", ",", "target", "=", "inputs", ".", "to", "(", "device", ")", ",", "target", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "feature", "=", "model", "[", "0", "]", "(", "inputs", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "features", ".", "append", "(", "feature", ")", "\n", "targets", ".", "append", "(", "target", ")", "\n", "\n", "", "features", "=", "np", ".", "concatenate", "(", "features", ",", "axis", "=", "0", ")", "\n", "targets", "=", "np", ".", "concatenate", "(", "targets", ",", "axis", "=", "0", ")", "\n", "print", "(", "features", ".", "shape", ")", "\n", "\n", "cl", ",", "c", "=", "lloyd", "(", "features", ",", "K", ",", "device", "=", "0", ",", "tol", "=", "1e-4", ")", "\n", "print", "(", "'next batch...'", ")", "\n", "\n", "", "", "k_label", "=", "[", "]", "\n", "hit_map", "=", "np", ".", "column_stack", "(", "(", "cl", ",", "targets", ")", ")", "\n", "\n", "\n", "for", "i", "in", "range", "(", "K", ")", ":", "\n", "        ", "temp", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "dataset_size", ")", ":", "\n", "            ", "if", "hit_map", "[", "j", ",", "0", "]", "==", "i", ":", "\n", "                ", "temp", ".", "append", "(", "hit_map", "[", "j", ",", "1", "]", ")", "\n", "\n", "", "", "hist", "=", "np", ".", "histogram", "(", "temp", ",", "bins", "=", "10", ",", "range", "=", "(", "0", ",", "9", ")", ")", "[", "0", "]", "\n", "index", "=", "[", "idx", "for", "idx", ",", "cnt", "in", "enumerate", "(", "hist", ")", "if", "cnt", "==", "max", "(", "hist", ")", "]", "\n", "k_label", ".", "append", "(", "index", "[", "0", "]", ")", "\n", "\n", "", "return", "c", ",", "k_label", ",", "cl", ",", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.main_decoder_mnist.test_quantizer": [[238, 261], ["model.eval", "enumerate", "print", "numpy.zeros", "range", "numpy.argpartition", "range", "len", "inputs.to", "targets.cpu().detach().numpy", "numpy.linalg.norm", "inputs.size", "inputs.size", "targets.cpu().detach", "targets.cpu"], "function", ["None"], ["", "def", "test_quantizer", "(", "args", ",", "K", ",", "cluster", ",", "cluster_label", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "\n", "for", "_", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "        ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "features", "=", "model", "[", "0", "]", "(", "inputs", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "dist", "=", "np", ".", "zeros", "(", "(", "inputs", ".", "size", "(", "0", ")", ",", "K", ")", ")", "\n", "for", "node", "in", "range", "(", "K", ")", ":", "\n", "# L2 distance measure", "\n", "            ", "dist", "[", ":", ",", "node", "]", "=", "LA", ".", "norm", "(", "cluster", "[", "node", "]", "-", "features", ",", "axis", "=", "1", ")", "\n", "", "closest_id", "=", "np", ".", "argpartition", "(", "dist", ",", "0", ",", "axis", "=", "1", ")", "\n", "\n", "for", "idx", "in", "range", "(", "inputs", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "if", "cluster_label", "[", "closest_id", "[", "idx", ",", "0", "]", "]", "==", "targets", "[", "idx", "]", ":", "\n", "                ", "correct", "+=", "1", "\n", "", "", "total", "+=", "len", "(", "targets", ")", "\n", "\n", "", "acc", "=", "100.", "*", "correct", "/", "total", "\n", "print", "(", "'--Test Acc--: %.3f%% (%d/%d)\\n'", "%", "(", "acc", ",", "correct", ",", "total", ")", ")", "\n", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.main_encoder.Flatten.__init__": [[33, 37], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.fmnist-decoder.AEdecoder.__init__"], ["def", "__init__", "(", "self", ",", "start_dim", "=", "1", ",", "end_dim", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "Flatten", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "start_dim", "=", "start_dim", "\n", "self", ".", "end_dim", "=", "end_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.main_encoder.Flatten.forward": [[38, 40], ["input.flatten"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", ".", "flatten", "(", "self", ".", "start_dim", ",", "self", ".", "end_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.main_encoder.AEencoder.__init__": [[99, 135], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "main_encoder.Flatten", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.fmnist-decoder.AEdecoder.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "AEencoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1", ",", "32", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "#                nn.Conv2d(32, 32, kernel_size=5, stride=1, padding=2),", "\n", "#                nn.ReLU(True),", "\n", "#                nn.Conv2d(32, 64, kernel_size=5, stride=1, padding=2),", "\n", "#                nn.ReLU(True),", "\n", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "#                ", "\n", "Flatten", "(", ")", ",", "\n", "#                ", "\n", "nn", ".", "Linear", "(", "28", "*", "28", "*", "64", ",", "1024", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "#                nn.Linear(1024, 512),", "\n", "#                nn.ReLU(True),", "\n", "#                nn.Linear(512, 256),", "\n", "#                nn.ReLU(True),", "\n", "nn", ".", "Linear", "(", "1024", ",", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "\n", "\n", "#                Flatten(),", "\n", "#                nn.Linear(28 * 28, 1024),", "\n", "#                nn.ReLU(True),", "\n", "#                nn.Linear(1024, 512),", "\n", "#                nn.ReLU(True),", "\n", "#                nn.Linear(512, 256),", "\n", "#                nn.ReLU(True),", "\n", "#                nn.Linear(256, 128),", "\n", "#                nn.ReLU(True))", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "128", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.main_encoder.AEencoder.forward": [[136, 140], ["main_encoder.AEencoder.encoder", "main_encoder.AEencoder.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "X", "=", "self", ".", "encoder", "(", "X", ")", "\n", "X", "=", "self", ".", "classifier", "(", "X", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.main_encoder.to_img": [[60, 63], ["x.view.view", "x.view.size"], "function", ["None"], ["", "def", "to_img", "(", "x", ")", ":", "\n", "    ", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "28", ",", "28", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.main_encoder.min_max_normalization": [[64, 71], ["tensor.min", "tensor.max"], "function", ["None"], ["", "def", "min_max_normalization", "(", "tensor", ",", "min_value", ",", "max_value", ")", ":", "\n", "    ", "min_tensor", "=", "tensor", ".", "min", "(", ")", "\n", "tensor", "=", "(", "tensor", "-", "min_tensor", ")", "\n", "max_tensor", "=", "tensor", ".", "max", "(", ")", "\n", "tensor", "=", "tensor", "/", "max_tensor", "\n", "tensor", "=", "tensor", "*", "(", "max_value", "-", "min_value", ")", "+", "min_value", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.main_encoder.tensor_round": [[72, 74], ["torch.round", "torch.round"], "function", ["None"], ["", "def", "tensor_round", "(", "tensor", ")", ":", "\n", "    ", "return", "torch", ".", "round", "(", "tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.main_encoder.fit": [[145, 169], ["torch.optim.Adam", "torch.optim.Adam", "torch.nn.CrossEntropyLoss", "model.train", "range", "model.parameters", "enumerate", "inputs.to.to", "targets.to.to", "torch.optim.Adam.zero_grad", "model", "nn.CrossEntropyLoss.", "error.backward", "torch.optim.Adam.step", "torch.max", "torch.max", "print", "len", "float", "float"], "function", ["None"], ["def", "fit", "(", "model", ",", "train_loader", ")", ":", "\n", "    ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ")", "#,lr=0.001, betas=(0.9,0.999))", "\n", "error", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "EPOCHS", "=", "10", "\n", "model", ".", "train", "(", ")", "\n", "for", "epoch", "in", "range", "(", "EPOCHS", ")", ":", "\n", "        ", "correct", "=", "0", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "inputs", "=", "inputs", ".", "to", "(", "device", ")", "\n", "targets", "=", "targets", ".", "to", "(", "device", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "inputs", ")", "\n", "loss", "=", "error", "(", "output", ",", "targets", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# Total correct predictions", "\n", "predicted", "=", "torch", ".", "max", "(", "output", ".", "data", ",", "1", ")", "[", "1", "]", "\n", "correct", "+=", "(", "predicted", "==", "targets", ")", ".", "sum", "(", ")", "\n", "#print(correct)", "\n", "if", "batch_idx", "%", "50", "==", "0", ":", "\n", "                ", "print", "(", "'Epoch : {} ({:.0f}%)\\t Accuracy:{:.3f}%'", ".", "format", "(", "\n", "epoch", ",", "100.", "*", "batch_idx", "/", "len", "(", "train_loader", ")", ",", "float", "(", "correct", "*", "100", ")", "/", "float", "(", "args", ".", "batch_size_train", "*", "(", "batch_idx", "+", "1", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.main_encoder.evaluate": [[174, 197], ["print", "print", "torch.save", "torch.save", "test_imgs.to.to", "test_labels.to.to", "model", "cnn.state_dict", "os.path.isdir", "os.mkdir", "torch.max", "torch.max", "float", "len"], "function", ["None"], ["def", "evaluate", "(", "model", ",", "test_loader", ")", ":", "\n", "    ", "global", "best_acc", "\n", "correct", "=", "0", "\n", "for", "test_imgs", ",", "test_labels", "in", "test_loader", ":", "\n", "        ", "test_imgs", "=", "test_imgs", ".", "to", "(", "device", ")", "\n", "test_labels", "=", "test_labels", ".", "to", "(", "device", ")", "\n", "\n", "output", "=", "model", "(", "test_imgs", ")", "\n", "predicted", "=", "torch", ".", "max", "(", "output", ",", "1", ")", "[", "1", "]", "\n", "correct", "+=", "(", "predicted", "==", "test_labels", ")", ".", "sum", "(", ")", "\n", "", "print", "(", "\"Test accuracy:{:.3f}% \\n\"", ".", "format", "(", "float", "(", "correct", "*", "100", ")", "/", "(", "len", "(", "test_loader", ")", "*", "args", ".", "batch_size_test", ")", ")", ")", "\n", "\n", "# Save the pretrained network", "\n", "#    if correct > best_acc:", "\n", "print", "(", "'Saving..'", ")", "\n", "state", "=", "{", "\n", "'net'", ":", "cnn", ".", "state_dict", "(", ")", ",", "\n", "'acc'", ":", "correct", ",", "\n", "}", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "'checkpoint'", ")", ":", "\n", "        ", "os", ".", "mkdir", "(", "'checkpoint'", ")", "\n", "", "torch", ".", "save", "(", "state", ",", "'./checkpoint/mnist-encoder.t1'", ")", "\n", "best_acc", "=", "correct", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.main_encoder.train_quantizer": [[207, 243], ["print", "numpy.column_stack", "range", "torch.no_grad", "torch.no_grad", "range", "range", "k_label.append", "cnn.eval", "enumerate", "numpy.concatenate", "numpy.concatenate", "print", "kmeans_pytorch.kmeans.lloyd", "print", "numpy.histogram", "cnn.encoder().cpu().detach().numpy", "np.concatenate.append", "np.concatenate.append", "temp.append", "enumerate", "inputs.to", "target.cpu().detach().numpy", "max", "cnn.encoder().cpu().detach", "target.cpu().detach", "cnn.encoder().cpu", "target.cpu", "cnn.encoder"], "function", ["None"], ["def", "train_quantizer", "(", "agrs", ",", "K", ")", ":", "\n", "    ", "print", "(", "'==> start K-means process with k = %d..'", "%", "(", "K", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "epoch", "in", "range", "(", "args", ".", "num_epoch", ")", ":", "\n", "# Extract Feature", "\n", "            ", "cnn", ".", "eval", "(", ")", "\n", "features", "=", "[", "]", "\n", "targets", "=", "[", "]", "\n", "for", "_", ",", "(", "inputs", ",", "target", ")", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "                ", "inputs", ",", "target", "=", "inputs", ".", "to", "(", "device", ")", ",", "target", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "feature", "=", "cnn", ".", "encoder", "(", "inputs", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "features", ".", "append", "(", "feature", ")", "\n", "targets", ".", "append", "(", "target", ")", "\n", "\n", "", "features", "=", "np", ".", "concatenate", "(", "features", ",", "axis", "=", "0", ")", "\n", "targets", "=", "np", ".", "concatenate", "(", "targets", ",", "axis", "=", "0", ")", "\n", "print", "(", "features", ".", "shape", ")", "\n", "\n", "cl", ",", "c", "=", "lloyd", "(", "features", ",", "K", ",", "device", "=", "0", ",", "tol", "=", "1e-4", ")", "\n", "print", "(", "'next batch...'", ")", "\n", "\n", "", "", "k_label", "=", "[", "]", "\n", "hit_map", "=", "np", ".", "column_stack", "(", "(", "cl", ",", "targets", ")", ")", "\n", "\n", "\n", "for", "i", "in", "range", "(", "K", ")", ":", "\n", "        ", "temp", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "dataset_size", ")", ":", "\n", "            ", "if", "hit_map", "[", "j", ",", "0", "]", "==", "i", ":", "\n", "                ", "temp", ".", "append", "(", "hit_map", "[", "j", ",", "1", "]", ")", "\n", "\n", "", "", "hist", "=", "np", ".", "histogram", "(", "temp", ",", "bins", "=", "10", ",", "range", "=", "(", "0", ",", "9", ")", ")", "[", "0", "]", "\n", "index", "=", "[", "idx", "for", "idx", ",", "cnt", "in", "enumerate", "(", "hist", ")", "if", "cnt", "==", "max", "(", "hist", ")", "]", "\n", "k_label", ".", "append", "(", "index", "[", "0", "]", ")", "\n", "\n", "", "return", "c", ",", "k_label", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.main_encoder.test_quantizer": [[246, 269], ["cnn.eval", "enumerate", "print", "cnn.encoder().cpu().detach().numpy", "numpy.zeros", "range", "numpy.argpartition", "range", "len", "inputs.to", "targets.cpu().detach().numpy", "numpy.linalg.norm", "inputs.size", "cnn.encoder().cpu().detach", "inputs.size", "targets.cpu().detach", "cnn.encoder().cpu", "targets.cpu", "cnn.encoder"], "function", ["None"], ["", "def", "test_quantizer", "(", "args", ",", "K", ",", "cluster", ",", "cluster_label", ")", ":", "\n", "    ", "cnn", ".", "eval", "(", ")", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "\n", "for", "_", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "        ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "features", "=", "cnn", ".", "encoder", "(", "inputs", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "dist", "=", "np", ".", "zeros", "(", "(", "inputs", ".", "size", "(", "0", ")", ",", "K", ")", ")", "\n", "for", "node", "in", "range", "(", "K", ")", ":", "\n", "# L2 distance measure", "\n", "            ", "dist", "[", ":", ",", "node", "]", "=", "LA", ".", "norm", "(", "cluster", "[", "node", "]", "-", "features", ",", "axis", "=", "1", ")", "\n", "", "closest_id", "=", "np", ".", "argpartition", "(", "dist", ",", "0", ",", "axis", "=", "1", ")", "\n", "\n", "for", "idx", "in", "range", "(", "inputs", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "if", "cluster_label", "[", "closest_id", "[", "idx", ",", "0", "]", "]", "==", "targets", "[", "idx", "]", ":", "\n", "                ", "correct", "+=", "1", "\n", "", "", "total", "+=", "len", "(", "targets", ")", "\n", "\n", "", "acc", "=", "100.", "*", "correct", "/", "total", "\n", "print", "(", "'--Test Acc--: %.3f%% (%d/%d)\\n'", "%", "(", "acc", ",", "correct", ",", "total", ")", ")", "\n", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.fmnist-encoder.Flatten.__init__": [[49, 53], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.fmnist-decoder.AEdecoder.__init__"], ["def", "__init__", "(", "self", ",", "start_dim", "=", "1", ",", "end_dim", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "Flatten", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "start_dim", "=", "start_dim", "\n", "self", ".", "end_dim", "=", "end_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.fmnist-encoder.Flatten.forward": [[54, 56], ["input.flatten"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", ".", "flatten", "(", "self", ".", "start_dim", ",", "self", ".", "end_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.fmnist-encoder.AEencoder.__init__": [[114, 130], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "fmnist-encoder.Flatten", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.fmnist-decoder.AEdecoder.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "AEencoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1", ",", "32", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "\n", "Flatten", "(", ")", ",", "\n", "\n", "nn", ".", "Linear", "(", "28", "*", "28", "*", "64", ",", "1024", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "1024", ",", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "128", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.fmnist-encoder.AEencoder.forward": [[131, 135], ["fmnist-encoder.AEencoder.encoder", "fmnist-encoder.AEencoder.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "X", "=", "self", ".", "encoder", "(", "X", ")", "\n", "X", "=", "self", ".", "classifier", "(", "X", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.fmnist-encoder.to_img": [[76, 79], ["x.view.view", "x.view.size"], "function", ["None"], ["", "def", "to_img", "(", "x", ")", ":", "\n", "    ", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "28", ",", "28", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.fmnist-encoder.min_max_normalization": [[80, 87], ["tensor.min", "tensor.max"], "function", ["None"], ["", "def", "min_max_normalization", "(", "tensor", ",", "min_value", ",", "max_value", ")", ":", "\n", "    ", "min_tensor", "=", "tensor", ".", "min", "(", ")", "\n", "tensor", "=", "(", "tensor", "-", "min_tensor", ")", "\n", "max_tensor", "=", "tensor", ".", "max", "(", ")", "\n", "tensor", "=", "tensor", "/", "max_tensor", "\n", "tensor", "=", "tensor", "*", "(", "max_value", "-", "min_value", ")", "+", "min_value", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.fmnist-encoder.tensor_round": [[88, 90], ["torch.round", "torch.round"], "function", ["None"], ["", "def", "tensor_round", "(", "tensor", ")", ":", "\n", "    ", "return", "torch", ".", "round", "(", "tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.fmnist-encoder.fit": [[140, 164], ["torch.optim.Adam", "torch.optim.Adam", "torch.nn.CrossEntropyLoss", "model.train", "range", "model.parameters", "enumerate", "inputs.to.to", "targets.to.to", "torch.optim.Adam.zero_grad", "model", "nn.CrossEntropyLoss.", "error.backward", "torch.optim.Adam.step", "torch.max", "torch.max", "print", "len", "float", "float"], "function", ["None"], ["def", "fit", "(", "model", ",", "train_loader", ")", ":", "\n", "    ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ")", "#,lr=0.001, betas=(0.9,0.999))", "\n", "error", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "EPOCHS", "=", "10", "\n", "model", ".", "train", "(", ")", "\n", "for", "epoch", "in", "range", "(", "EPOCHS", ")", ":", "\n", "        ", "correct", "=", "0", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "inputs", "=", "inputs", ".", "to", "(", "device", ")", "\n", "targets", "=", "targets", ".", "to", "(", "device", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "inputs", ")", "\n", "loss", "=", "error", "(", "output", ",", "targets", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# Total correct predictions", "\n", "predicted", "=", "torch", ".", "max", "(", "output", ".", "data", ",", "1", ")", "[", "1", "]", "\n", "correct", "+=", "(", "predicted", "==", "targets", ")", ".", "sum", "(", ")", "\n", "#print(correct)", "\n", "if", "batch_idx", "%", "50", "==", "0", ":", "\n", "                ", "print", "(", "'Epoch : {} ({:.0f}%)\\t Accuracy:{:.3f}%'", ".", "format", "(", "\n", "epoch", ",", "100.", "*", "batch_idx", "/", "len", "(", "train_loader", ")", ",", "float", "(", "correct", "*", "100", ")", "/", "float", "(", "args", ".", "batch_size_train", "*", "(", "batch_idx", "+", "1", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.fmnist-encoder.evaluate": [[169, 192], ["print", "test_imgs.to.to", "test_labels.to.to", "model", "print", "torch.save", "torch.save", "torch.max", "torch.max", "cnn.state_dict", "os.path.isdir", "os.mkdir", "float", "len"], "function", ["None"], ["def", "evaluate", "(", "model", ",", "test_loader", ")", ":", "\n", "    ", "global", "best_acc", "\n", "correct", "=", "0", "\n", "for", "test_imgs", ",", "test_labels", "in", "test_loader", ":", "\n", "        ", "test_imgs", "=", "test_imgs", ".", "to", "(", "device", ")", "\n", "test_labels", "=", "test_labels", ".", "to", "(", "device", ")", "\n", "\n", "output", "=", "model", "(", "test_imgs", ")", "\n", "predicted", "=", "torch", ".", "max", "(", "output", ",", "1", ")", "[", "1", "]", "\n", "correct", "+=", "(", "predicted", "==", "test_labels", ")", ".", "sum", "(", ")", "\n", "", "print", "(", "\"Test accuracy:{:.3f}% \"", ".", "format", "(", "float", "(", "correct", "*", "100", ")", "/", "(", "len", "(", "test_loader", ")", "*", "args", ".", "batch_size_test", ")", ")", ")", "\n", "\n", "# Save the pretrained network", "\n", "if", "correct", ">", "best_acc", ":", "\n", "        ", "print", "(", "'Saving..'", ")", "\n", "state", "=", "{", "\n", "'net'", ":", "cnn", ".", "state_dict", "(", ")", ",", "\n", "'acc'", ":", "correct", ",", "\n", "}", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "'checkpoint'", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "'checkpoint'", ")", "\n", "", "torch", ".", "save", "(", "state", ",", "'./checkpoint/fmnist-encoder.t1'", ")", "\n", "best_acc", "=", "correct", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.fmnist-encoder.test": [[250, 280], ["cnn.eval", "enumerate", "cnn.encoder().cpu().detach().numpy", "numpy.zeros", "range", "numpy.argpartition", "range", "len", "print", "print", "inputs.to", "targets.cpu().detach().numpy", "numpy.linalg.norm", "inputs.size", "cnn.encoder().cpu().detach", "inputs.size", "targets.cpu().detach", "cnn.encoder().cpu", "targets.cpu", "cnn.encoder"], "function", ["None"], ["def", "test", "(", "epoch", ",", "args", ")", ":", "\n", "    ", "global", "best_acc", "\n", "global", "acc", "\n", "cnn", ".", "eval", "(", ")", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "\n", "for", "_", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "        ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "features", "=", "cnn", ".", "encoder", "(", "inputs", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "dist", "=", "np", ".", "zeros", "(", "(", "inputs", ".", "size", "(", "0", ")", ",", "K", ")", ")", "\n", "for", "node", "in", "range", "(", "K", ")", ":", "\n", "# L2 distance measure", "\n", "            ", "dist", "[", ":", ",", "node", "]", "=", "LA", ".", "norm", "(", "c", "[", "node", "]", "-", "features", ",", "axis", "=", "1", ")", "\n", "", "closest_id", "=", "np", ".", "argpartition", "(", "dist", ",", "0", ",", "axis", "=", "1", ")", "\n", "\n", "for", "idx", "in", "range", "(", "inputs", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "if", "k_label", "[", "closest_id", "[", "idx", ",", "0", "]", "]", "==", "targets", "[", "idx", "]", ":", "\n", "                ", "correct", "+=", "1", "\n", "", "", "total", "+=", "len", "(", "targets", ")", "\n", "\n", "", "if", "epoch", "%", "1", "==", "0", ":", "\n", "        ", "print", "(", "'--Test Acc-- (epoch=%d): %.3f%% (%d/%d)'", "%", "(", "epoch", ",", "100.", "*", "correct", "/", "total", ",", "correct", ",", "total", ")", ")", "\n", "\n", "# Save checkpoint.", "\n", "", "acc", "=", "100.", "*", "correct", "/", "total", "\n", "if", "acc", ">", "best_acc", ":", "\n", "        ", "print", "(", "'Saving..'", ")", "\n", "best_acc", "=", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.pretrained-decoder.AEencoder.__init__": [[70, 78], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.fmnist-decoder.AEdecoder.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "AEencoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "28", "*", "28", ",", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "256", ",", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "64", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.pretrained-decoder.AEencoder.forward": [[79, 83], ["pretrained-decoder.AEencoder.encoder", "pretrained-decoder.AEencoder.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "X", "=", "self", ".", "encoder", "(", "X", ")", "\n", "X", "=", "self", ".", "classifier", "(", "X", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.pretrained-decoder.AEdecoder.__init__": [[85, 92], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Sigmoid", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.fmnist-decoder.AEdecoder.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "AEdecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "decoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "64", ",", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "256", ",", "28", "*", "28", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.pretrained-decoder.AEdecoder.forward": [[93, 96], ["pretrained-decoder.AEdecoder.decoder"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "X", "=", "self", ".", "decoder", "(", "X", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.pretrained-decoder.to_img": [[40, 43], ["x.view.view", "x.view.size"], "function", ["None"], ["", "def", "to_img", "(", "x", ")", ":", "\n", "    ", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "28", ",", "28", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.pretrained-decoder.min_max_normalization": [[44, 51], ["tensor.min", "tensor.max"], "function", ["None"], ["", "def", "min_max_normalization", "(", "tensor", ",", "min_value", ",", "max_value", ")", ":", "\n", "    ", "min_tensor", "=", "tensor", ".", "min", "(", ")", "\n", "tensor", "=", "(", "tensor", "-", "min_tensor", ")", "\n", "max_tensor", "=", "tensor", ".", "max", "(", ")", "\n", "tensor", "=", "tensor", "/", "max_tensor", "\n", "tensor", "=", "tensor", "*", "(", "max_value", "-", "min_value", ")", "+", "min_value", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.pretrained-decoder.tensor_round": [[52, 54], ["torch.round", "torch.round"], "function", ["None"], ["", "def", "tensor_round", "(", "tensor", ")", ":", "\n", "    ", "return", "torch", ".", "round", "(", "tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.pretrained-decoder.test": [[214, 250], ["model.eval", "enumerate", "Variable().cuda.view", "torch.autograd.Variable().cuda", "numpy.zeros", "range", "numpy.argpartition", "range", "len", "print", "print", "Variable().cuda.to", "targets.cpu().detach().numpy", "Variable().cuda.size", "numpy.linalg.norm", "Variable().cuda.size", "torch.autograd.Variable", "Variable().cuda.size", "targets.cpu().detach", "targets.cpu"], "function", ["None"], ["def", "test", "(", "epoch", ",", "args", ")", ":", "\n", "    ", "global", "best_acc", "\n", "global", "acc", "\n", "model", ".", "eval", "(", ")", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "\n", "for", "_", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "        ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "inputs", "=", "inputs", ".", "view", "(", "inputs", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "inputs", "=", "Variable", "(", "inputs", ")", ".", "cuda", "(", ")", "\n", "features", "=", "features", "=", "model", "[", "0", "]", "(", "inputs", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "dist", "=", "np", ".", "zeros", "(", "(", "inputs", ".", "size", "(", "0", ")", ",", "K", ")", ")", "\n", "for", "node", "in", "range", "(", "K", ")", ":", "\n", "# L2 distance measure", "\n", "            ", "dist", "[", ":", ",", "node", "]", "=", "LA", ".", "norm", "(", "c", "[", "node", "]", "-", "features", ",", "axis", "=", "1", ")", "\n", "", "closest_id", "=", "np", ".", "argpartition", "(", "dist", ",", "0", ",", "axis", "=", "1", ")", "\n", "\n", "for", "idx", "in", "range", "(", "inputs", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "if", "k_label", "[", "closest_id", "[", "idx", ",", "0", "]", "]", "==", "targets", "[", "idx", "]", ":", "\n", "                ", "correct", "+=", "1", "\n", "", "", "total", "+=", "len", "(", "targets", ")", "\n", "\n", "", "if", "epoch", "%", "1", "==", "0", ":", "\n", "        ", "print", "(", "'--Test Acc-- (epoch=%d): %.3f%% (%d/%d)'", "%", "(", "epoch", ",", "100.", "*", "correct", "/", "total", ",", "correct", ",", "total", ")", ")", "\n", "\n", "# Save checkpoint.", "\n", "", "acc", "=", "100.", "*", "correct", "/", "total", "\n", "if", "acc", ">", "best_acc", ":", "\n", "        ", "print", "(", "'Saving..'", ")", "\n", "#        if not os.path.isdir('checkpoint_GWR'):", "\n", "#            os.mkdir('checkpoint_GWR')", "\n", "#        nx.write_gpickle(G,'./checkpoint_GWR/graph.gpickle')", "\n", "#        np.save('./checkpoint_GWR/best_acc.npy', acc)", "\n", "best_acc", "=", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.pretrained-encoder.AEencoder.__init__": [[71, 81], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.fmnist-decoder.AEdecoder.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "AEencoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "28", "*", "28", ",", "512", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "256", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "256", ",", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "64", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.pretrained-encoder.AEencoder.forward": [[82, 86], ["pretrained-encoder.AEencoder.encoder", "pretrained-encoder.AEencoder.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "X", "=", "self", ".", "encoder", "(", "X", ")", "\n", "X", "=", "self", ".", "classifier", "(", "X", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.pretrained-encoder.to_img": [[41, 44], ["x.view.view", "x.view.size"], "function", ["None"], ["", "def", "to_img", "(", "x", ")", ":", "\n", "    ", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "28", ",", "28", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.pretrained-encoder.min_max_normalization": [[45, 52], ["tensor.min", "tensor.max"], "function", ["None"], ["", "def", "min_max_normalization", "(", "tensor", ",", "min_value", ",", "max_value", ")", ":", "\n", "    ", "min_tensor", "=", "tensor", ".", "min", "(", ")", "\n", "tensor", "=", "(", "tensor", "-", "min_tensor", ")", "\n", "max_tensor", "=", "tensor", ".", "max", "(", ")", "\n", "tensor", "=", "tensor", "/", "max_tensor", "\n", "tensor", "=", "tensor", "*", "(", "max_value", "-", "min_value", ")", "+", "min_value", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.pretrained-encoder.tensor_round": [[53, 55], ["torch.round", "torch.round"], "function", ["None"], ["", "def", "tensor_round", "(", "tensor", ")", ":", "\n", "    ", "return", "torch", ".", "round", "(", "tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.pretrained-encoder.fit": [[91, 117], ["torch.optim.Adam", "torch.optim.Adam", "torch.nn.CrossEntropyLoss", "model.train", "range", "model.parameters", "enumerate", "Variable().float().cuda.view", "torch.autograd.Variable().float().cuda", "torch.autograd.Variable().cuda", "torch.optim.Adam.zero_grad", "model", "nn.CrossEntropyLoss.", "error.backward", "torch.optim.Adam.step", "Variable().float().cuda.size", "torch.max", "torch.max", "print", "torch.autograd.Variable().float", "torch.autograd.Variable", "torch.autograd.Variable", "len", "float", "float"], "function", ["None"], ["def", "fit", "(", "model", ",", "train_loader", ")", ":", "\n", "    ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ")", "#,lr=0.001, betas=(0.9,0.999))", "\n", "error", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "EPOCHS", "=", "10", "\n", "model", ".", "train", "(", ")", "\n", "for", "epoch", "in", "range", "(", "EPOCHS", ")", ":", "\n", "        ", "correct", "=", "0", "\n", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "            ", "inputs", "=", "inputs", ".", "view", "(", "inputs", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "inputs", "=", "Variable", "(", "inputs", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "targets", "=", "Variable", "(", "targets", ")", ".", "cuda", "(", ")", "\n", "#            inputs, targets = inputs.to(device), targets.to(device)", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "output", "=", "model", "(", "inputs", ")", "\n", "loss", "=", "error", "(", "output", ",", "targets", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# Total correct predictions", "\n", "predicted", "=", "torch", ".", "max", "(", "output", ".", "data", ",", "1", ")", "[", "1", "]", "\n", "correct", "+=", "(", "predicted", "==", "targets", ")", ".", "sum", "(", ")", "\n", "#print(correct)", "\n", "if", "batch_idx", "%", "50", "==", "0", ":", "\n", "                ", "print", "(", "'Epoch : {} ({:.0f}%)\\t Accuracy:{:.3f}%'", ".", "format", "(", "\n", "epoch", ",", "100.", "*", "batch_idx", "/", "len", "(", "train_loader", ")", ",", "float", "(", "correct", "*", "100", ")", "/", "float", "(", "args", ".", "batch_size_train", "*", "(", "batch_idx", "+", "1", ")", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.pretrained-encoder.evaluate": [[122, 146], ["print", "Variable().float().cuda.view", "torch.autograd.Variable().float().cuda", "test_labels.to.to", "model", "print", "torch.save", "torch.save", "Variable().float().cuda.size", "torch.max", "torch.max", "cnn.state_dict", "os.path.isdir", "os.mkdir", "torch.autograd.Variable().float", "float", "len", "torch.autograd.Variable"], "function", ["None"], ["def", "evaluate", "(", "model", ",", "test_loader", ")", ":", "\n", "    ", "global", "best_acc", "\n", "correct", "=", "0", "\n", "for", "test_imgs", ",", "test_labels", "in", "test_loader", ":", "\n", "        ", "test_imgs", "=", "test_imgs", ".", "view", "(", "test_imgs", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "test_imgs", "=", "Variable", "(", "test_imgs", ")", ".", "float", "(", ")", ".", "cuda", "(", ")", "\n", "test_labels", "=", "test_labels", ".", "to", "(", "device", ")", "\n", "\n", "output", "=", "model", "(", "test_imgs", ")", "\n", "predicted", "=", "torch", ".", "max", "(", "output", ",", "1", ")", "[", "1", "]", "\n", "correct", "+=", "(", "predicted", "==", "test_labels", ")", ".", "sum", "(", ")", "\n", "", "print", "(", "\"Test accuracy:{:.3f}% \"", ".", "format", "(", "float", "(", "correct", "*", "100", ")", "/", "(", "len", "(", "test_loader", ")", "*", "args", ".", "batch_size_test", ")", ")", ")", "\n", "\n", "# Save the pretrained network", "\n", "if", "correct", ">", "best_acc", ":", "\n", "        ", "print", "(", "'Saving..'", ")", "\n", "state", "=", "{", "\n", "'net'", ":", "cnn", ".", "state_dict", "(", ")", ",", "\n", "'acc'", ":", "correct", ",", "\n", "}", "\n", "if", "not", "os", ".", "path", ".", "isdir", "(", "'checkpoint'", ")", ":", "\n", "            ", "os", ".", "mkdir", "(", "'checkpoint'", ")", "\n", "", "torch", ".", "save", "(", "state", ",", "'./checkpoint/pretrained-encoder.t1'", ")", "\n", "best_acc", "=", "correct", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.main_decoder_fmnist.Flatten.__init__": [[26, 30], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.fmnist-decoder.AEdecoder.__init__"], ["def", "__init__", "(", "self", ",", "start_dim", "=", "1", ",", "end_dim", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "Flatten", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "start_dim", "=", "start_dim", "\n", "self", ".", "end_dim", "=", "end_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.main_decoder_fmnist.Flatten.forward": [[31, 33], ["input.flatten"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", ".", "flatten", "(", "self", ".", "start_dim", ",", "self", ".", "end_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.main_decoder_fmnist.AEencoder.__init__": [[87, 101], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "main_decoder_fmnist.Flatten", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.fmnist-decoder.AEdecoder.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "AEencoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1", ",", "32", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "28", "*", "28", "*", "64", ",", "1024", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "1024", ",", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "128", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.main_decoder_fmnist.AEencoder.forward": [[102, 106], ["main_decoder_fmnist.AEencoder.encoder", "main_decoder_fmnist.AEencoder.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "X", "=", "self", ".", "encoder", "(", "X", ")", "\n", "X", "=", "self", ".", "classifier", "(", "X", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.main_decoder_fmnist.AEdecoder.__init__": [[108, 121], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.Sigmoid", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.fmnist-decoder.AEdecoder.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "AEdecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear_decoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "128", ",", "1024", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "1024", ",", "28", "*", "28", "*", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "self", ".", "conv_decoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "64", ",", "32", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "32", ",", "1", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.main_decoder_fmnist.AEdecoder.forward": [[122, 127], ["main_decoder_fmnist.AEdecoder.linear_decoder", "main_decoder_fmnist.AEdecoder.view", "main_decoder_fmnist.AEdecoder.conv_decoder", "main_decoder_fmnist.AEdecoder.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "X", "=", "self", ".", "linear_decoder", "(", "X", ")", "\n", "X", "=", "X", ".", "view", "(", "X", ".", "size", "(", "0", ")", ",", "64", ",", "28", ",", "28", ")", "\n", "X", "=", "self", ".", "conv_decoder", "(", "X", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.main_decoder_fmnist.to_img": [[54, 57], ["x.view.view", "x.view.size"], "function", ["None"], ["", "def", "to_img", "(", "x", ")", ":", "\n", "    ", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "28", ",", "28", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.main_decoder_fmnist.min_max_normalization": [[58, 65], ["tensor.min", "tensor.max"], "function", ["None"], ["", "def", "min_max_normalization", "(", "tensor", ",", "min_value", ",", "max_value", ")", ":", "\n", "    ", "min_tensor", "=", "tensor", ".", "min", "(", ")", "\n", "tensor", "=", "(", "tensor", "-", "min_tensor", ")", "\n", "max_tensor", "=", "tensor", ".", "max", "(", ")", "\n", "tensor", "=", "tensor", "/", "max_tensor", "\n", "tensor", "=", "tensor", "*", "(", "max_value", "-", "min_value", ")", "+", "min_value", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.main_decoder_fmnist.tensor_round": [[66, 68], ["torch.round", "torch.round"], "function", ["None"], ["", "def", "tensor_round", "(", "tensor", ")", ":", "\n", "    ", "return", "torch", ".", "round", "(", "tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.main_decoder_fmnist.train_quantizer": [[201, 237], ["print", "numpy.column_stack", "range", "torch.no_grad", "torch.no_grad", "range", "range", "k_label.append", "model.eval", "enumerate", "numpy.concatenate", "numpy.concatenate", "print", "kmeans_pytorch.kmeans.lloyd", "print", "numpy.histogram", "np.concatenate.append", "np.concatenate.append", "temp.append", "enumerate", "inputs.to", "target.cpu().detach().numpy", "max", "target.cpu().detach", "target.cpu"], "function", ["None"], ["def", "train_quantizer", "(", "agrs", ",", "K", ")", ":", "\n", "    ", "print", "(", "'==> start K-means process with k = %d..'", "%", "(", "K", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "epoch", "in", "range", "(", "args", ".", "num_epoch", ")", ":", "\n", "# Extract Feature", "\n", "            ", "model", ".", "eval", "(", ")", "\n", "features", "=", "[", "]", "\n", "targets", "=", "[", "]", "\n", "for", "_", ",", "(", "inputs", ",", "target", ")", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "                ", "inputs", ",", "target", "=", "inputs", ".", "to", "(", "device", ")", ",", "target", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "feature", "=", "model", "[", "0", "]", "(", "inputs", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "features", ".", "append", "(", "feature", ")", "\n", "targets", ".", "append", "(", "target", ")", "\n", "\n", "", "features", "=", "np", ".", "concatenate", "(", "features", ",", "axis", "=", "0", ")", "\n", "targets", "=", "np", ".", "concatenate", "(", "targets", ",", "axis", "=", "0", ")", "\n", "print", "(", "features", ".", "shape", ")", "\n", "\n", "cl", ",", "c", "=", "lloyd", "(", "features", ",", "K", ",", "device", "=", "0", ",", "tol", "=", "1e-4", ")", "\n", "print", "(", "'next batch...'", ")", "\n", "\n", "", "", "k_label", "=", "[", "]", "\n", "hit_map", "=", "np", ".", "column_stack", "(", "(", "cl", ",", "targets", ")", ")", "\n", "\n", "\n", "for", "i", "in", "range", "(", "K", ")", ":", "\n", "        ", "temp", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "dataset_size", ")", ":", "\n", "            ", "if", "hit_map", "[", "j", ",", "0", "]", "==", "i", ":", "\n", "                ", "temp", ".", "append", "(", "hit_map", "[", "j", ",", "1", "]", ")", "\n", "\n", "", "", "hist", "=", "np", ".", "histogram", "(", "temp", ",", "bins", "=", "10", ",", "range", "=", "(", "0", ",", "9", ")", ")", "[", "0", "]", "\n", "index", "=", "[", "idx", "for", "idx", ",", "cnt", "in", "enumerate", "(", "hist", ")", "if", "cnt", "==", "max", "(", "hist", ")", "]", "\n", "k_label", ".", "append", "(", "index", "[", "0", "]", ")", "\n", "\n", "", "return", "c", ",", "k_label", ",", "cl", ",", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.main_decoder_fmnist.test_quantizer": [[240, 263], ["model.eval", "enumerate", "print", "numpy.zeros", "range", "numpy.argpartition", "range", "len", "inputs.to", "targets.cpu().detach().numpy", "numpy.linalg.norm", "inputs.size", "inputs.size", "targets.cpu().detach", "targets.cpu"], "function", ["None"], ["", "def", "test_quantizer", "(", "args", ",", "K", ",", "cluster", ",", "cluster_label", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "\n", "for", "_", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "        ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "features", "=", "model", "[", "0", "]", "(", "inputs", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "dist", "=", "np", ".", "zeros", "(", "(", "inputs", ".", "size", "(", "0", ")", ",", "K", ")", ")", "\n", "for", "node", "in", "range", "(", "K", ")", ":", "\n", "# L2 distance measure", "\n", "            ", "dist", "[", ":", ",", "node", "]", "=", "LA", ".", "norm", "(", "cluster", "[", "node", "]", "-", "features", ",", "axis", "=", "1", ")", "\n", "", "closest_id", "=", "np", ".", "argpartition", "(", "dist", ",", "0", ",", "axis", "=", "1", ")", "\n", "\n", "for", "idx", "in", "range", "(", "inputs", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "if", "cluster_label", "[", "closest_id", "[", "idx", ",", "0", "]", "]", "==", "targets", "[", "idx", "]", ":", "\n", "                ", "correct", "+=", "1", "\n", "", "", "total", "+=", "len", "(", "targets", ")", "\n", "\n", "", "acc", "=", "100.", "*", "correct", "/", "total", "\n", "print", "(", "'--Test Acc--: %.3f%% (%d/%d)\\n'", "%", "(", "acc", ",", "correct", ",", "total", ")", ")", "\n", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.fmnist-decoder.Flatten.__init__": [[26, 30], ["super().__init__"], "methods", ["home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.fmnist-decoder.AEdecoder.__init__"], ["def", "__init__", "(", "self", ",", "start_dim", "=", "1", ",", "end_dim", "=", "-", "1", ")", ":", "\n", "        ", "super", "(", "Flatten", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "start_dim", "=", "start_dim", "\n", "self", ".", "end_dim", "=", "end_dim", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.fmnist-decoder.Flatten.forward": [[31, 33], ["input.flatten"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", ".", "flatten", "(", "self", ".", "start_dim", ",", "self", ".", "end_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.fmnist-decoder.AEencoder.__init__": [[87, 101], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Conv2d", "torch.nn.Conv2d", "torch.nn.ReLU", "torch.nn.ReLU", "fmnist-decoder.Flatten", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.fmnist-decoder.AEdecoder.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "AEencoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "encoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "1", ",", "32", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "28", "*", "28", "*", "64", ",", "1024", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "1024", ",", "128", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "128", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.fmnist-decoder.AEencoder.forward": [[102, 106], ["fmnist-decoder.AEencoder.encoder", "fmnist-decoder.AEencoder.classifier"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "X", "=", "self", ".", "encoder", "(", "X", ")", "\n", "X", "=", "self", ".", "classifier", "(", "X", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.fmnist-decoder.AEdecoder.__init__": [[108, 121], ["torch.nn.Module.__init__", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Sequential", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.ReLU", "torch.nn.ReLU", "torch.nn.ConvTranspose2d", "torch.nn.ConvTranspose2d", "torch.nn.Sigmoid", "torch.nn.Sigmoid"], "methods", ["home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.fmnist-decoder.AEdecoder.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "AEdecoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "linear_decoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "128", ",", "1024", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "1024", ",", "28", "*", "28", "*", "64", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ")", "\n", "\n", "self", ".", "conv_decoder", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ConvTranspose2d", "(", "64", ",", "32", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "ReLU", "(", "True", ")", ",", "\n", "nn", ".", "ConvTranspose2d", "(", "32", ",", "1", ",", "kernel_size", "=", "5", ",", "stride", "=", "1", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.fmnist-decoder.AEdecoder.forward": [[122, 127], ["fmnist-decoder.AEdecoder.linear_decoder", "fmnist-decoder.AEdecoder.view", "fmnist-decoder.AEdecoder.conv_decoder", "fmnist-decoder.AEdecoder.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ")", ":", "\n", "        ", "X", "=", "self", ".", "linear_decoder", "(", "X", ")", "\n", "X", "=", "X", ".", "view", "(", "X", ".", "size", "(", "0", ")", ",", "64", ",", "28", ",", "28", ")", "\n", "X", "=", "self", ".", "conv_decoder", "(", "X", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.fmnist-decoder.to_img": [[54, 57], ["x.view.view", "x.view.size"], "function", ["None"], ["", "def", "to_img", "(", "x", ")", ":", "\n", "    ", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "1", ",", "28", ",", "28", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.fmnist-decoder.min_max_normalization": [[58, 65], ["tensor.min", "tensor.max"], "function", ["None"], ["", "def", "min_max_normalization", "(", "tensor", ",", "min_value", ",", "max_value", ")", ":", "\n", "    ", "min_tensor", "=", "tensor", ".", "min", "(", ")", "\n", "tensor", "=", "(", "tensor", "-", "min_tensor", ")", "\n", "max_tensor", "=", "tensor", ".", "max", "(", ")", "\n", "tensor", "=", "tensor", "/", "max_tensor", "\n", "tensor", "=", "tensor", "*", "(", "max_value", "-", "min_value", ")", "+", "min_value", "\n", "return", "tensor", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.fmnist-decoder.tensor_round": [[66, 68], ["torch.round", "torch.round"], "function", ["None"], ["", "def", "tensor_round", "(", "tensor", ")", ":", "\n", "    ", "return", "torch", ".", "round", "(", "tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.fmnist-decoder.train_quantizer": [[201, 237], ["print", "numpy.column_stack", "range", "torch.no_grad", "torch.no_grad", "range", "range", "k_label.append", "model.eval", "enumerate", "numpy.concatenate", "numpy.concatenate", "print", "kmeans_pytorch.kmeans.lloyd", "print", "numpy.histogram", "np.concatenate.append", "np.concatenate.append", "temp.append", "enumerate", "inputs.to", "target.cpu().detach().numpy", "max", "target.cpu().detach", "target.cpu"], "function", ["None"], ["def", "train_quantizer", "(", "agrs", ",", "K", ")", ":", "\n", "    ", "print", "(", "'==> start K-means process with k = %d..'", "%", "(", "K", ")", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "        ", "for", "epoch", "in", "range", "(", "args", ".", "num_epoch", ")", ":", "\n", "# Extract Feature", "\n", "            ", "model", ".", "eval", "(", ")", "\n", "features", "=", "[", "]", "\n", "targets", "=", "[", "]", "\n", "for", "_", ",", "(", "inputs", ",", "target", ")", "in", "enumerate", "(", "trainloader", ")", ":", "\n", "                ", "inputs", ",", "target", "=", "inputs", ".", "to", "(", "device", ")", ",", "target", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "feature", "=", "model", "[", "0", "]", "(", "inputs", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "features", ".", "append", "(", "feature", ")", "\n", "targets", ".", "append", "(", "target", ")", "\n", "\n", "", "features", "=", "np", ".", "concatenate", "(", "features", ",", "axis", "=", "0", ")", "\n", "targets", "=", "np", ".", "concatenate", "(", "targets", ",", "axis", "=", "0", ")", "\n", "print", "(", "features", ".", "shape", ")", "\n", "\n", "cl", ",", "c", "=", "lloyd", "(", "features", ",", "K", ",", "device", "=", "0", ",", "tol", "=", "1e-4", ")", "\n", "print", "(", "'next batch...'", ")", "\n", "\n", "", "", "k_label", "=", "[", "]", "\n", "hit_map", "=", "np", ".", "column_stack", "(", "(", "cl", ",", "targets", ")", ")", "\n", "\n", "\n", "for", "i", "in", "range", "(", "K", ")", ":", "\n", "        ", "temp", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "dataset_size", ")", ":", "\n", "            ", "if", "hit_map", "[", "j", ",", "0", "]", "==", "i", ":", "\n", "                ", "temp", ".", "append", "(", "hit_map", "[", "j", ",", "1", "]", ")", "\n", "\n", "", "", "hist", "=", "np", ".", "histogram", "(", "temp", ",", "bins", "=", "10", ",", "range", "=", "(", "0", ",", "9", ")", ")", "[", "0", "]", "\n", "index", "=", "[", "idx", "for", "idx", ",", "cnt", "in", "enumerate", "(", "hist", ")", "if", "cnt", "==", "max", "(", "hist", ")", "]", "\n", "k_label", ".", "append", "(", "index", "[", "0", "]", ")", "\n", "\n", "", "return", "c", ",", "k_label", ",", "cl", ",", "features", "\n", "\n"]], "home.repos.pwc.inspect_result.lephuoccat_Supervised-Encoding-Quantizer.None.fmnist-decoder.test_quantizer": [[240, 263], ["model.eval", "enumerate", "print", "numpy.zeros", "range", "numpy.argpartition", "range", "len", "inputs.to", "targets.cpu().detach().numpy", "numpy.linalg.norm", "inputs.size", "inputs.size", "targets.cpu().detach", "targets.cpu"], "function", ["None"], ["", "def", "test_quantizer", "(", "args", ",", "K", ",", "cluster", ",", "cluster_label", ")", ":", "\n", "    ", "model", ".", "eval", "(", ")", "\n", "correct", "=", "0", "\n", "total", "=", "0", "\n", "\n", "for", "_", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "testloader", ")", ":", "\n", "        ", "inputs", ",", "targets", "=", "inputs", ".", "to", "(", "device", ")", ",", "targets", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "features", "=", "model", "[", "0", "]", "(", "inputs", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "dist", "=", "np", ".", "zeros", "(", "(", "inputs", ".", "size", "(", "0", ")", ",", "K", ")", ")", "\n", "for", "node", "in", "range", "(", "K", ")", ":", "\n", "# L2 distance measure", "\n", "            ", "dist", "[", ":", ",", "node", "]", "=", "LA", ".", "norm", "(", "cluster", "[", "node", "]", "-", "features", ",", "axis", "=", "1", ")", "\n", "", "closest_id", "=", "np", ".", "argpartition", "(", "dist", ",", "0", ",", "axis", "=", "1", ")", "\n", "\n", "for", "idx", "in", "range", "(", "inputs", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "if", "cluster_label", "[", "closest_id", "[", "idx", ",", "0", "]", "]", "==", "targets", "[", "idx", "]", ":", "\n", "                ", "correct", "+=", "1", "\n", "", "", "total", "+=", "len", "(", "targets", ")", "\n", "\n", "", "acc", "=", "100.", "*", "correct", "/", "total", "\n", "print", "(", "'--Test Acc--: %.3f%% (%d/%d)\\n'", "%", "(", "acc", ",", "correct", ",", "total", ")", ")", "\n", "return", "acc", "\n", "\n"]]}