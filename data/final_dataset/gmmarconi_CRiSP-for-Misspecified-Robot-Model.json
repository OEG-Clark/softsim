{"home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_urdf_randomizer.generate_custom_urdf": [[5, 169], ["numpy.array", "numpy.array", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos"], "function", ["None"], ["def", "generate_custom_urdf", "(", "joint_bias", ":", "np", ".", "ndarray", "=", "np", ".", "array", "(", "(", "0", ",", "0", ",", "0", ",", "0", ",", "0", ")", ")", ",", "\n", "link_bias", ":", "np", ".", "ndarray", "=", "np", ".", "array", "(", "(", "0", ",", "0", ",", "0", ",", "0", ",", "0", ")", ")", ")", "->", "str", ":", "\n", "    ", "robot_urdf", "=", "f\"\"\"\n        <?xml version=\"1.0\" ?>\n        <robot name = \"5d_planar_manipulator_v2\">\n            <!-- links section -->>\n            <link name = \"base_link\">\n                <inertial>\n                    <origin xyz = \"0 0 0\" />\n                    <mass value = \"0.5\" />\n                    <inertia ixx = \"0.5\" iyy = \"0.5\" izz = \"0.5\" ixy = \"0\" ixz = \"0\" iyz = \"0\" />\n                </inertial>\n                <visual>\n                    <origin xyz = \"0 0 0\"  rpy=\"1.5708 0 0\"/>\n                    <geometry>\n                <cylinder radius = \"0.2\" length = \"0.2\"  />\n                    </geometry>\n                    <material name = \"dark_gray\">\n                        <color rgba = \"0.1 0.1 0.1 1\" />\n                    </material>\n                </visual>\n            </link>\n            <link name = \"link_1\">\n                <inertial>\n                    <origin xyz = \"0 0 1\" />\n                    <mass value = \"0.5\" />\n                    <inertia ixx = \"0.5\" iyy = \"0.5\" izz = \"0.5\" ixy = \"0\" ixz = \"0\" iyz = \"0\" />\n                </inertial>\n                <visual>\n                    <origin xyz = \"{np.sin(joint_bias[0])} 0 {np.cos(joint_bias[0])}\"  rpy=\"0 {joint_bias[0]} 0\" />\n                    <geometry>\n                        <cylinder radius = \"0.1\" length = \"{2+link_bias[0]}\"  />\n                    </geometry>\n                    <material name = \"light_gray\">\n                        <color rgba = \"0.3 0.3 0.3 1\" />\n                    </material>\n                </visual>\n            </link>\n            <link name = \"link_2\">\n                <inertial>\n                    <origin xyz = \"{np.sin(joint_bias[1])} 0 {np.cos(joint_bias[1])}\" rpy=\"0 {joint_bias[1]} 0\" />\n                    <mass value = \"0.5\" />\n                    <inertia ixx = \"0.5\" iyy = \"0.5\" izz = \"0.5\" ixy = \"0\" ixz = \"0\" iyz = \"0\" />\n                </inertial>\n                <visual>\n                    <origin xyz = \"{np.sin(joint_bias[1])} 0 {np.cos(joint_bias[1])}\"  rpy=\"0 {joint_bias[1]} 0\" />\n                    <geometry>\n                        <cylinder radius = \"0.1\" length = \"{2+link_bias[1]}\"  />\n                    </geometry>\n                        <material name = \"light_gray\">\n                        <color rgba = \"0.3 0.3 0.3 1\" />\n                    </material>\n                </visual>\n            </link>\n            <link name = \"link_3\">\n                <inertial>\n                  <origin xyz = \"0 0 1\" />\n                  <mass value = \"0.5\" />\n                  <inertia ixx = \"0.5\" iyy = \"0.5\" izz = \"0.5\" ixy = \"0\" ixz = \"0\" iyz = \"0\" />\n                </inertial>\n                <visual>\n                  <origin xyz = \"{np.sin(joint_bias[2])} 0 {np.cos(joint_bias[2])}\"  rpy=\"0 {joint_bias[2]} 0\" />\n                  <geometry>\n                    <cylinder radius = \"0.1\" length = \"{2+link_bias[2]}\"  />\n                  </geometry>\n                  <material name = \"light_gray\">\n                    <color rgba = \"0.3 0.3 0.3 1\" />\n                  </material>\n                </visual>\n            </link>\n            <link name = \"link_4\">\n                <inertial>\n                  <origin xyz = \"0 0 1\" />\n                  <mass value = \"0.5\" />\n                  <inertia ixx = \"0.5\" iyy = \"0.5\" izz = \"0.5\" ixy = \"0\" ixz = \"0\" iyz = \"0\" />\n                </inertial>\n                <visual>\n                  <origin xyz = \"{np.sin(joint_bias[3])} 0 {np.cos(joint_bias[3])}\"  rpy=\"0 {joint_bias[3]} 0\" />\n                  <geometry>\n                    <cylinder radius = \"0.1\" length = \"{2+link_bias[3]}\"  />\n                  </geometry>\n                  <material name = \"light_gray\">\n                    <color rgba = \"0.3 0.3 0.3 1\" />\n                  </material>\n                </visual>\n            </link>\n            <link name = \"link_5\">\n                <inertial>\n                  <origin xyz = \"0 0 1\" />\n                  <mass value = \"0.5\" />\n                  <inertia ixx = \"0.5\" iyy = \"0.5\" izz = \"0.5\" ixy = \"0\" ixz = \"0\" iyz = \"0\" />\n                </inertial>\n                <visual>\n                  <origin xyz = \"{np.sin(joint_bias[4])} 0 {np.cos(joint_bias[4])}\"  rpy=\"0 {joint_bias[4]} 0\" />\n                  <geometry>\n                    <cylinder radius = \"0.1\" length = \"{2+link_bias[4]}\"  />\n                  </geometry>\n                  <material name = \"light_gray\">\n                    <color rgba = \"0.3 0.3 0.3 1\" />\n                  </material>\n                </visual>\n            </link>\n              <link name = \"link_6\">\n                <inertial>\n                  <origin xyz = \"0 0 1\" />\n                  <mass value = \"0.5\" />\n                  <inertia ixx = \"0.5\" iyy = \"0.5\" izz = \"0.5\"\n              ixy = \"0\" ixz = \"0\" iyz = \"0\" />\n                </inertial>\n                <visual>\n                  <origin xyz = \"0 0 1\" />\n                  <geometry>\n                    <cylinder radius = \"0.1\" length = \"2\"  />\n                  </geometry>\n                  <material name = \"light_gray\">\n                    <color rgba = \"0.3 0.3 0.3 1\" />\n                  </material>\n                </visual>\n            </link>\n        \n            <!-- joints section -->>\n            <joint name = \"joint_b_1\" type = \"continuous\">\n                <parent link = \"base_link\" />\n                <child link = \"link_1\" />\n                <origin xyz = \"0 0 0\" />\n                <axis xyz = \"0 -1 0\" />\n            <limit lower = \"0\" upper = \"3.1415\" />\n            </joint>\n            <joint name = \"joint_1_2\" type = \"continuous\">\n                <parent link = \"link_1\" />\n                <child link = \"link_2\" />\n                <origin xyz = \"{(2+link_bias[0])*np.sin(joint_bias[0])} 0 {(2+link_bias[0])*np.cos(joint_bias[0])}\"  rpy=\"0 {joint_bias[0]} 0\" />\n                <axis xyz = \"0 -1 0\" />\n            <limit lower = \"-3.1415\" upper = \"0\" />\n            </joint>\n            <joint name = \"joint_2_3\" type = \"continuous\">\n                <parent link = \"link_2\" />\n                <child link = \"link_3\" />\n                <origin xyz = \"{(2+link_bias[1])*np.sin(joint_bias[1])} 0 {(2+link_bias[1])*np.cos(joint_bias[1])}\"  rpy=\"0 {joint_bias[1]} 0\" />\n                <axis xyz = \"0 -1 0\" />\n            <limit lower = \"-1.5707\" upper = \" 1.5707\" />\n            </joint>\n            <joint name = \"joint_3_4\" type = \"continuous\">\n                <parent link = \"link_3\" />\n                <child link = \"link_4\" />\n                <origin xyz = \"{(2+link_bias[2])*np.sin(joint_bias[2])} 0 {(2+link_bias[2])*np.cos(joint_bias[2])}\"  rpy=\"0 {joint_bias[2]} 0\" />\n                <axis xyz = \"0 -1 0\" />\n            <limit lower = \"-3.1415\" upper = \"0\" />\n            </joint>\n            <joint name = \"joint_4_5\" type = \"continuous\">\n                <parent link = \"link_4\" />\n                <child link = \"link_5\" />\n                <origin xyz = \"{(2+link_bias[3])*np.sin(joint_bias[3])} 0 {(2+link_bias[3])*np.cos(joint_bias[3])}\"  rpy=\"0 {joint_bias[3]} 0\" />\n                <axis xyz = \"0 -1 0\" />\n            <limit lower = \"-1.5707\" upper = \"1.5707\" />\n            </joint>\n            <joint name = \"joint_5_6\" type = \"fixed\">\n                <parent link = \"link_5\" />\n                <child link = \"link_6\" />\n                <origin xyz = \"{(2+link_bias[4])*np.sin(joint_bias[4])} 0 {(2+link_bias[4])*np.cos(joint_bias[4])}\"  rpy=\"0 {joint_bias[4]} 0\" />\n                <axis xyz = \"0 -1 0\" />\n            </joint>\n        </robot>\"\"\"", "\n", "return", "robot_urdf", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.panda_urdf_randomizer.generate_custom_urdf": [[5, 356], ["numpy.sin", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.sin", "numpy.cos"], "function", ["None"], ["def", "generate_custom_urdf", "(", "joint_ang_bias", ":", "tuple", "=", "(", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ",", "0", ")", ",", "\n", "joint_pos_bias", ":", "tuple", "=", "(", "(", "0", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "0", ")", ",", "\n", "(", "0", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "0", ")", ",", "(", "0", ",", "0", ",", "0", ")", ")", ")", "->", "str", ":", "\n", "\n", "    ", "robot_urdf", "=", "f\"\"\"<?xml version=\"1.0\" ?>\n<!-- =================================================================================== -->\n<!-- |    This document was autogenerated by xacro from panda_arm_hand.urdf.xacro      | -->\n<!-- |    EDITING THIS FILE BY HAND IS NOT RECOMMENDED                                 | -->\n<!-- =================================================================================== -->\n<robot name=\"panda\" xmlns:xacro=\"http://www.ros.org/wiki/xacro\">\n  <link name=\"panda_link0\">\n    <inertial>\n      <origin rpy=\"0 0 0\" xyz=\"0 0 0.05\"/>\n       <mass value=\"2.9\"/>\n       <inertia ixx=\"0.1\" ixy=\"0\" ixz=\"0\" iyy=\"0.1\" iyz=\"0\" izz=\"0.1\"/>\n    </inertial>\n    <visual>\n      <geometry>\n        <mesh filename=\"package://meshes/collision/link0.obj\"/>\n      </geometry>\n      <material name=\"panda_white\">\n            <color rgba=\"1. 1. 1. 1.\"/>\n        </material>\n    </visual>\n    <collision>\n      <geometry>\n        <mesh filename=\"package://meshes/collision/link0.obj\"/>\n      </geometry>\n      <material name=\"panda_white\"/>\n    </collision>\n  </link>\n  <joint name=\"panda_joint1\" type=\"revolute\">\n    <safety_controller k_position=\"100.0\" k_velocity=\"40.0\" soft_lower_limit=\"-2.8973\" soft_upper_limit=\"2.8973\"/>\n    <origin rpy=\"0 0 0\" xyz=\"{joint_pos_bias[0][0]} {joint_pos_bias[0][1]} {0.333 + joint_pos_bias[0][2]}\"/>\n    <parent link=\"panda_link0\"/>\n    <child link=\"panda_link1\"/>\n    <axis xyz=\"0 0 1\"/>\n    <limit effort=\"87\" lower=\"-2.9671\" upper=\"2.9671\" velocity=\"2.1750\"/>\n  </joint>\n  <link name=\"panda_link1\">\n    <inertial>\n      <origin rpy=\"0 0 0\" xyz=\"0 -0.04 -0.05\"/>\n       <mass value=\"2.7\"/>\n       <inertia ixx=\"0.1\" ixy=\"0\" ixz=\"0\" iyy=\"0.1\" iyz=\"0\" izz=\"0.1\"/>\n    </inertial>\n    <visual>\n      <origin rpy=\"0 0 {joint_ang_bias[0]}\" xyz = \"0 0 0\" />\n      <geometry>\n        <mesh filename=\"package://meshes/visual/link1.obj\"/>\n      </geometry>\n      <material name=\"panda_white\"/>\n    </visual>\n    <collision>\n      <geometry>\n        <mesh filename=\"package://meshes/collision/link1.obj\"/>\n      </geometry>\n      <material name=\"panda_white\"/>\n    </collision>\n  </link>\n  <joint name=\"panda_joint2\" type=\"revolute\">\n    <safety_controller k_position=\"100.0\" k_velocity=\"40.0\" soft_lower_limit=\"-1.7628\" soft_upper_limit=\"1.7628\"/>\n    <origin rpy=\"-1.57079632679 0 {joint_ang_bias[0]}\" xyz=\"{joint_pos_bias[1][0]} {joint_pos_bias[1][1]} {joint_pos_bias[1][2]}\"/>\n    <parent link=\"panda_link1\"/>\n    <child link=\"panda_link2\"/>\n    <axis xyz=\"0 0 1\"/>\n    <limit effort=\"87\" lower=\"-1.8326\" upper=\"1.8326\" velocity=\"2.1750\"/>\n  </joint>\n  <link name=\"panda_link2\">\n    <inertial>\n      <origin rpy=\"0 0 0\" xyz=\"0 -0.04 0.06\"/>\n       <mass value=\"2.73\"/>\n       <inertia ixx=\"0.1\" ixy=\"0\" ixz=\"0\" iyy=\"0.1\" iyz=\"0\" izz=\"0.1\"/>\n    </inertial>\n    <visual>\n      <origin rpy=\"0 0 {joint_ang_bias[1]}\" xyz = \"0 0 0\" />\n      <geometry>\n        <mesh filename=\"package://meshes/visual/link2.obj\"/>\n      </geometry>\n      <material name=\"panda_white\"/>\n    </visual>\n    <collision>\n      <geometry>\n        <mesh filename=\"package://meshes/collision/link2.obj\"/>\n      </geometry>\n      <material name=\"panda_white\"/>\n    </collision>\n  </link>\n  <joint name=\"panda_joint3\" type=\"revolute\">\n    <safety_controller k_position=\"100.0\" k_velocity=\"40.0\" soft_lower_limit=\"-2.8973\" soft_upper_limit=\"2.8973\"/>\n    <origin rpy=\"1.57079632679 0 {joint_ang_bias[1]}\" xyz=\"{0.316 * np.sin(joint_ang_bias[1]) + joint_pos_bias[2][0]} {-0.316 * np.cos(joint_ang_bias[1]) + joint_pos_bias[2][1]} {joint_pos_bias[2][2]}\"/>\n    <parent link=\"panda_link2\"/>\n    <child link=\"panda_link3\"/>\n    <axis xyz=\"0 0 1\"/>\n    <limit effort=\"87\" lower=\"-2.9671\" upper=\"2.9671\" velocity=\"2.1750\"/>\n  </joint>\n  <link name=\"panda_link3\">\n      <inertial>\n      <origin rpy=\"0 0 0\" xyz=\"0.01 0.01 -0.05\"/>\n       <mass value=\"2.04\"/>\n       <inertia ixx=\"0.1\" ixy=\"0\" ixz=\"0\" iyy=\"0.1\" iyz=\"0\" izz=\"0.1\"/>\n    </inertial>\n    <visual>\n      <origin rpy=\"0 0 {joint_ang_bias[2]}\" xyz = \"0 0 0\" />\n      <geometry>\n        <mesh filename=\"package://meshes/visual/link3.obj\"/>\n      </geometry>\n      <material name=\"panda_red\">\n            <color rgba=\"1. 1. 1. 1.\"/>\n        </material>\n    </visual>\n    <collision>\n      <geometry>\n        <mesh filename=\"package://meshes/collision/link3.obj\"/>\n      </geometry>\n    </collision>\n  </link>\n  <joint name=\"panda_joint4\" type=\"revolute\">\n    <safety_controller k_position=\"100.0\" k_velocity=\"40.0\" soft_lower_limit=\"-3.0718\" soft_upper_limit=\"-0.0698\"/>\n    <origin rpy=\"1.57079632679 0 {joint_ang_bias[2]}\" xyz=\"{0.0825*np.cos(joint_ang_bias[2]) + joint_pos_bias[3][0]} {0.0825*np.sin(joint_ang_bias[2]) + joint_pos_bias[3][1]} {joint_pos_bias[3][2]}\"/>\n    <parent link=\"panda_link3\"/>\n    <child link=\"panda_link4\"/>\n    <axis xyz=\"0 0 1\"/>\n    <limit effort=\"87\" lower=\"-3.1416\" upper=\"0.0\" velocity=\"2.1750\"/>\n  </joint>\n  <link name=\"panda_link4\">\n    <inertial>\n      <origin rpy=\"0 0 0\" xyz=\"-0.03 0.03 0.02\"/>\n       <mass value=\"2.08\"/>\n       <inertia ixx=\"0.1\" ixy=\"0\" ixz=\"0\" iyy=\"0.1\" iyz=\"0\" izz=\"0.1\"/>\n    </inertial>\n    <visual>      \n      <origin rpy=\"0 0 {joint_ang_bias[3]}\" xyz = \"0 0 0\" />\n      <geometry>\n        <mesh filename=\"package://meshes/visual/link4.obj\"/>\n      </geometry>\n      <material name=\"panda_white\"/>\n    </visual>\n    <collision>\n      <geometry>\n        <mesh filename=\"package://meshes/collision/link4.obj\"/>\n      </geometry>\n      <material name=\"panda_white\"/>\n    </collision>\n  </link>\n  <joint name=\"panda_joint5\" type=\"revolute\">\n    <safety_controller k_position=\"100.0\" k_velocity=\"40.0\" soft_lower_limit=\"-2.8973\" soft_upper_limit=\"2.8973\"/>\n    <origin rpy=\"-1.57079632679 0 {joint_ang_bias[3]}\" xyz=\"{-0.0825*np.cos(joint_ang_bias[3])-0.384*np.sin(joint_ang_bias[3]) + joint_pos_bias[4][0]} {-0.0825*np.sin(joint_ang_bias[3])+0.384*np.cos(joint_ang_bias[3]) + joint_pos_bias[4][1]} {joint_pos_bias[4][2]}\"/>\n    <parent link=\"panda_link4\"/>\n    <child link=\"panda_link5\"/>\n    <axis xyz=\"0 0 1\"/>\n    <limit effort=\"12\" lower=\"-2.9671\" upper=\"2.9671\" velocity=\"2.6100\"/>\n  </joint>\n  <link name=\"panda_link5\">\n    <inertial>\n      <origin rpy=\"0 0 0\" xyz=\"0 0.04 -0.12\"/>\n       <mass value=\"3\"/>\n       <inertia ixx=\"0.1\" ixy=\"0\" ixz=\"0\" iyy=\"0.1\" iyz=\"0\" izz=\"0.1\"/>\n    </inertial>\n    <visual>\n      <origin rpy=\"0 0 {joint_ang_bias[4]}\" xyz = \"0 0 0\" />\n      <geometry>\n        <mesh filename=\"package://meshes/visual/link5.obj\"/>\n      </geometry>\n      <material name=\"panda_white\"/>\n    </visual>\n    <collision>\n      <geometry>\n        <mesh filename=\"package://meshes/collision/link5.obj\"/>\n      </geometry>\n      <material name=\"panda_white\"/>\n    </collision>\n  </link>\n  <joint name=\"panda_joint6\" type=\"revolute\">\n    <safety_controller k_position=\"100.0\" k_velocity=\"40.0\" soft_lower_limit=\"-0.0175\" soft_upper_limit=\"3.7525\"/>\n    <origin rpy=\"1.57079632679 0 {joint_ang_bias[4]}\" xyz=\"{joint_pos_bias[5][0]} {joint_pos_bias[5][1]} {joint_pos_bias[5][2]}\"/>\n    <parent link=\"panda_link5\"/>\n    <child link=\"panda_link6\"/>\n    <axis xyz=\"0 0 1\"/>\n    <limit effort=\"12\" lower=\"-0.0873\" upper=\"3.8223\" velocity=\"2.6100\"/>\n  </joint>\n  <link name=\"panda_link6\">\n    <inertial>\n      <origin rpy=\"0 0 0\" xyz=\"0.04 0 0\"/>\n       <mass value=\"1.3\"/>\n       <inertia ixx=\"0.1\" ixy=\"0\" ixz=\"0\" iyy=\"0.1\" iyz=\"0\" izz=\"0.1\"/>\n    </inertial>\n    <visual>\n      <origin rpy=\"0 0 {joint_ang_bias[5]}\" xyz = \"0 0 0\" />\n      <geometry>\n        <mesh filename=\"package://meshes/visual/link6.obj\"/>\n      </geometry>\n      <material name=\"panda_white\"/>\n    </visual>\n    <collision>\n      <geometry>\n        <mesh filename=\"package://meshes/collision/link6.obj\"/>\n      </geometry>\n      <material name=\"panda_white\"/>\n    </collision>\n  </link>\n  <joint name=\"panda_joint7\" type=\"revolute\">\n    <safety_controller k_position=\"100.0\" k_velocity=\"40.0\" soft_lower_limit=\"-2.8973\" soft_upper_limit=\"2.8973\"/>\n    <origin rpy=\"1.57079632679 0 {joint_ang_bias[5]}\" xyz=\"{0.088*np.cos(joint_ang_bias[5]) + joint_pos_bias[6][0]} {0.088*np.sin(joint_ang_bias[5]) + joint_pos_bias[6][1]} {joint_pos_bias[6][2]}\"/>\n    <parent link=\"panda_link6\"/>\n    <child link=\"panda_link7\"/>\n    <axis xyz=\"0 0 1\"/>\n    <limit effort=\"12\" lower=\"-2.9671\" upper=\"2.9671\" velocity=\"2.6100\"/>\n  </joint>\n  <link name=\"panda_link7\">\n    <inertial>\n      <origin rpy=\"0 0 0\" xyz=\"0 0 0.08\"/>\n       <mass value=\".2\"/>\n       <inertia ixx=\"0.1\" ixy=\"0\" ixz=\"0\" iyy=\"0.1\" iyz=\"0\" izz=\"0.1\"/>\n    </inertial>\n    <visual>\n      <origin rpy=\"0 0 {joint_ang_bias[6]}\" xyz = \"0 0 0\" />\n      <geometry>\n        <mesh filename=\"package://meshes/collision/link7.obj\"/>\n      </geometry>\n      <material name=\"panda_white\"/>\n    </visual>\n    <collision>\n      <geometry>\n        <mesh filename=\"package://meshes/collision/link7.obj\"/>\n      </geometry>\n      <material name=\"panda_white\"/>\n    </collision>\n  </link>\n  <joint name=\"panda_joint8\" type=\"fixed\">\n    <origin rpy=\"0 0 {joint_ang_bias[6]}\" xyz=\"{joint_pos_bias[7][0]} {joint_pos_bias[7][1]} {0.107 + joint_pos_bias[7][2]}\"/>\n    <parent link=\"panda_link7\"/>\n    <child link=\"panda_link8\"/>\n    <axis xyz=\"0 0 0\"/>\n  </joint>\n  <link name=\"panda_link8\">\n     <inertial>\n      <origin rpy=\"0 0 0\" xyz=\"0 0 0\"/>\n       <mass value=\"0.0\"/>\n       <inertia ixx=\"0.1\" ixy=\"0\" ixz=\"0\" iyy=\"0.1\" iyz=\"0\" izz=\"0.1\"/>\n    </inertial>\n  </link>\n  <joint name=\"panda_hand_joint\" type=\"fixed\">\n    <parent link=\"panda_link8\"/>\n    <child link=\"panda_hand\"/>\n    <origin rpy=\"0 0 -0.785398163397\" xyz=\"{joint_pos_bias[8][0]} {joint_pos_bias[8][1]} {joint_pos_bias[8][2]}\"/>\n  </joint>\n  <link name=\"panda_hand\">\n    <inertial>\n      <origin rpy=\"0 0 0\" xyz=\"0 0 0.04\"/>\n       <mass value=\".81\"/>\n       <inertia ixx=\"0.1\" ixy=\"0\" ixz=\"0\" iyy=\"0.1\" iyz=\"0\" izz=\"0.1\"/>\n    </inertial>\n    <visual>\n      <geometry>\n        <mesh filename=\"package://meshes/visual/hand.obj\"/>\n      </geometry>\n      <material name=\"panda_white\"/>\n    </visual>\n    <collision>\n      <geometry>\n        <mesh filename=\"package://meshes/collision/hand.obj\"/>\n      </geometry>\n      <material name=\"panda_white\"/>\n    </collision>\n  </link>\n  <link name=\"panda_leftfinger\">\n       <contact>\n      <friction_anchor/>\n      <stiffness value=\"30000.0\"/>\n      <damping value=\"1000.0\"/>\n      <spinning_friction value=\"0.1\"/>\n      <lateral_friction value=\"1.0\"/>\n    </contact>\n    <inertial>\n      <origin rpy=\"0 0 0\" xyz=\"0 0.01 0.02\"/>\n       <mass value=\"0.1\"/>\n       <inertia ixx=\"0.1\" ixy=\"0\" ixz=\"0\" iyy=\"0.1\" iyz=\"0\" izz=\"0.1\"/>\n    </inertial>\n    <visual>\n      <geometry>\n        <mesh filename=\"package://meshes/visual/finger.obj\"/>\n      </geometry>\n      <material name=\"panda_white\"/>\n    </visual>\n    <collision>\n      <geometry>\n        <mesh filename=\"package://meshes/collision/finger.obj\"/>\n      </geometry>\n      <material name=\"panda_white\"/>\n    </collision>\n  </link>\n  <link name=\"panda_rightfinger\">\n        <contact>\n      <friction_anchor/>\n      <stiffness value=\"30000.0\"/>\n      <damping value=\"1000.0\"/>\n      <spinning_friction value=\"0.1\"/>\n      <lateral_friction value=\"1.0\"/>\n    </contact>\n\n    <inertial>\n      <origin rpy=\"0 0 0\" xyz=\"0 -0.01 0.02\"/>\n       <mass value=\"0.1\"/>\n       <inertia ixx=\"0.1\" ixy=\"0\" ixz=\"0\" iyy=\"0.1\" iyz=\"0\" izz=\"0.1\"/>\n    </inertial>\n    <visual>\n      <origin rpy=\"0 0 3.14159265359\" xyz=\"0 0 0\"/>\n      <geometry>\n        <mesh filename=\"package://meshes/visual/finger.obj\"/>\n      </geometry>\n      <material name=\"panda_white\"/>\n    </visual>\n    <collision>\n      <origin rpy=\"0 0 3.14159265359\" xyz=\"0 0 0\"/>\n      <geometry>\n        <mesh filename=\"package://meshes/collision/finger.obj\"/>\n      </geometry>\n      <material name=\"panda_white\"/>\n    </collision>\n  </link>\n  <joint name=\"panda_finger_joint1\" type=\"prismatic\">\n    <parent link=\"panda_hand\"/>\n    <child link=\"panda_leftfinger\"/>\n    <origin rpy=\"0 0 0\" xyz=\"0 0 0.0584\"/>\n    <axis xyz=\"0 1 0\"/>\n    <limit effort=\"20\" lower=\"0.0\" upper=\"0.04\" velocity=\"0.2\"/>\n  </joint>\n  <joint name=\"panda_finger_joint2\" type=\"prismatic\">\n    <parent link=\"panda_hand\"/>\n    <child link=\"panda_rightfinger\"/>\n    <origin rpy=\"0 0 0\" xyz=\"0 0 0.0584\"/>\n    <axis xyz=\"0 -1 0\"/>\n    <limit effort=\"20\" lower=\"0.0\" upper=\"0.04\" velocity=\"0.2\"/>\n    <mimic joint=\"panda_finger_joint1\"/>\n  </joint>\n   <link name=\"panda_grasptarget\">\n <inertial>\n      <origin rpy=\"0 0 0\" xyz=\"0 0 0\"/>\n       <mass value=\"0.0\"/>\n       <inertia ixx=\"0.1\" ixy=\"0\" ixz=\"0\" iyy=\"0.1\" iyz=\"0\" izz=\"0.1\"/>\n    </inertial>\n   </link>\n   <joint name=\"panda_grasptarget_hand\" type=\"fixed\">\n    <parent link=\"panda_hand\"/>\n    <child link=\"panda_grasptarget\"/>\n    <origin rpy=\"0 0 0\" xyz=\"0 0 0.105\"/>\n  </joint>\n</robot>\n    \"\"\"", "\n", "return", "robot_urdf", "", "", ""]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.panda_forward_kinematics.PandaSimForwardKin.__init__": [[16, 88], ["numpy.array", "panda_forward_kinematics.PandaSimForwardKin.bullet_client.loadURDF", "range", "zip", "panda_forward_kinematics.PandaSimForwardKin.bullet_client.getNumJoints", "panda_forward_kinematics.PandaSimForwardKin.bullet_client.changeDynamics", "panda_forward_kinematics.PandaSimForwardKin.bullet_client.getJointInfo", "panda_forward_kinematics.PandaSimForwardKin.joint_ranges.append", "panda_forward_kinematics.PandaSimForwardKin.bullet_client.getNumJoints", "numpy.array", "panda_forward_kinematics.PandaSimForwardKin.bullet_client.resetJointState", "panda_forward_kinematics.PandaSimForwardKin.bullet_client.resetJointState"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "bullet_client", ",", "\n", "base_offset", ",", "\n", "base_orientation", ",", "\n", "gui", "=", "False", ",", "\n", "use_simulation", "=", "True", ",", "\n", "urdf_path", "=", "\"franka_panda/panda.urdf\"", ")", ":", "\n", "\n", "        ", "self", ".", "bullet_client", "=", "bullet_client", "\n", "self", ".", "base_offset", "=", "np", ".", "array", "(", "base_offset", ")", "\n", "self", ".", "base_orientation", "=", "base_orientation", "\n", "self", ".", "use_simulation", "=", "use_simulation", "\n", "self", ".", "_gui", "=", "gui", "\n", "self", ".", "num_fixed_joints", "=", "0", "\n", "self", ".", "_urdf_path", "=", "urdf_path", "\n", "self", ".", "num_controlled_joints", "=", "0", "\n", "\n", "# Panda rest pose used for initialization and by null-space IK solver", "\n", "#   Note: last 2 scalars are prismatic finger joints and can be ignored", "\n", "self", ".", "rest_configuration", "=", "[", "0.98", ",", "0.458", ",", "0.31", ",", "-", "2.24", ",", "-", "0.30", ",", "2.66", ",", "2.32", ",", "0.02", ",", "0.02", "]", "\n", "\n", "flags", "=", "self", ".", "bullet_client", ".", "URDF_ENABLE_CACHED_GRAPHICS_SHAPES", "\n", "\n", "# Load Panda arm model from URDF", "\n", "self", ".", "panda_id", "=", "self", ".", "bullet_client", ".", "loadURDF", "(", "urdf_path", ",", "\n", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", "]", ")", "+", "self", ".", "base_offset", ",", "\n", "self", ".", "base_orientation", ",", "\n", "useFixedBase", "=", "True", ",", "\n", "flags", "=", "flags", ")", "\n", "\n", "# Official Panda joint limits", "\n", "# lower limits for null space", "\n", "self", ".", "lower_joint_limits", "=", "[", "-", "2.8973", ",", "-", "1.7628", ",", "-", "2.8973", ",", "-", "3.0718", ",", "-", "2.8973", ",", "-", "0.0175", ",", "-", "2.8973", ",", "0.0", ",", "0.0", "]", "\n", "# upper limits for null space", "\n", "self", ".", "upper_joint_limits", "=", "[", "2.8973", ",", "1.7628", ",", "2.8973", ",", "-", "0.0698", ",", "2.8973", ",", "3.7525", ",", "2.8973", ",", "0.04", ",", "0.04", "]", "\n", "\n", "# Initialize lists to store joint limits from URDF", "\n", "# self.lower_joint_limits = []", "\n", "# self.upper_joint_limits = []", "\n", "\n", "# Initialize Panda in rest joint configuration", "\n", "index", "=", "0", "\n", "fingers", "=", "0", "\n", "for", "j", "in", "range", "(", "self", ".", "bullet_client", ".", "getNumJoints", "(", "self", ".", "panda_id", ")", ")", ":", "\n", "# Set joint damping to zero", "\n", "            ", "self", ".", "bullet_client", ".", "changeDynamics", "(", "self", ".", "panda_id", ",", "j", ",", "linearDamping", "=", "0", ",", "angularDamping", "=", "0", ")", "\n", "\n", "info", "=", "self", ".", "bullet_client", ".", "getJointInfo", "(", "self", ".", "panda_id", ",", "j", ")", "\n", "jointType", "=", "info", "[", "2", "]", "\n", "if", "jointType", "==", "self", ".", "bullet_client", ".", "JOINT_FIXED", ":", "\n", "                ", "self", ".", "num_fixed_joints", "+=", "1", "\n", "\n", "", "if", "jointType", "==", "self", ".", "bullet_client", ".", "JOINT_PRISMATIC", ":", "\n", "                ", "self", ".", "bullet_client", ".", "resetJointState", "(", "self", ".", "panda_id", ",", "j", ",", "self", ".", "rest_configuration", "[", "index", "]", ")", "\n", "index", "+=", "1", "\n", "fingers", "+=", "1", "\n", "\n", "", "if", "jointType", "==", "self", ".", "bullet_client", ".", "JOINT_REVOLUTE", ":", "\n", "                ", "self", ".", "bullet_client", ".", "resetJointState", "(", "self", ".", "panda_id", ",", "j", ",", "self", ".", "rest_configuration", "[", "index", "]", ")", "\n", "index", "+=", "1", "\n", "\n", "# Joint ranges for null space IK", "\n", "", "", "self", ".", "joint_ranges", "=", "[", "]", "\n", "zip_object", "=", "zip", "(", "self", ".", "upper_joint_limits", ",", "self", ".", "lower_joint_limits", ")", "\n", "for", "ul_i", ",", "ll_i", "in", "zip_object", ":", "\n", "            ", "self", ".", "joint_ranges", ".", "append", "(", "ul_i", "-", "ll_i", ")", "\n", "\n", "# Initialize simulation time counter to zero", "\n", "", "self", ".", "t", "=", "0.", "\n", "\n", "self", ".", "num_non_fixed_joints", "=", "self", ".", "bullet_client", ".", "getNumJoints", "(", "self", ".", "panda_id", ")", "-", "self", ".", "num_fixed_joints", "\n", "self", ".", "num_controlled_joints", "=", "self", ".", "num_non_fixed_joints", "-", "fingers", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.panda_forward_kinematics.PandaSimForwardKin.reset": [[89, 91], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.panda_forward_kinematics.PandaSimForwardKin.compute_forward_kin": [[92, 120], ["numpy.atleast_2d", "panda_forward_kinematics.PandaSimForwardKin.getJointsConfiguration", "numpy.hstack", "enumerate", "panda_forward_kinematics.PandaSimForwardKin.setJointsConfiguration", "numpy.hstack", "numpy.zeros", "numpy.zeros", "panda_forward_kinematics.PandaSimForwardKin.setJointsConfiguration", "panda_forward_kinematics.PandaSimForwardKin.bullet_client.getLinkState", "numpy.array", "numpy.array", "numpy.zeros", "panda_forward_kinematics.PandaSimForwardKin.bullet_client.getEulerFromQuaternion", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.getJointsConfiguration", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.setJointsConfiguration", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.setJointsConfiguration"], ["", "def", "compute_forward_kin", "(", "self", ",", "joint_configurations", ")", ":", "\n", "# IN: A numpy matrix with a desired joint configuration for each row.", "\n", "# OUT: A list of numpy matrices containing the corresponding end effector 3D positions and orientations in Euler angles", "\n", "\n", "        ", "joint_configurations", "=", "np", ".", "atleast_2d", "(", "joint_configurations", ")", "\n", "assert", "(", "joint_configurations", ".", "shape", "[", "0", "]", ">", "0", ")", "\n", "assert", "(", "joint_configurations", ".", "shape", "[", "1", "]", "==", "self", ".", "num_controlled_joints", ")", "\n", "\n", "current_config", "=", "self", ".", "getJointsConfiguration", "(", ")", "\n", "\n", "# Initialize np arrays to be filled and returned", "\n", "ee_pos", "=", "np", ".", "nan", "*", "np", ".", "zeros", "(", "[", "joint_configurations", ".", "shape", "[", "0", "]", ",", "3", "]", ")", "\n", "ee_orn", "=", "np", ".", "nan", "*", "np", ".", "zeros", "(", "[", "joint_configurations", ".", "shape", "[", "0", "]", ",", "3", "]", ")", "\n", "\n", "joint_configurations", "=", "np", ".", "hstack", "(", "(", "joint_configurations", ",", "np", ".", "zeros", "(", "(", "joint_configurations", ".", "shape", "[", "0", "]", ",", "2", ")", ")", ")", ")", "\n", "\n", "for", "idx", ",", "q", "in", "enumerate", "(", "joint_configurations", ")", ":", "\n", "            ", "self", ".", "setJointsConfiguration", "(", "q", ")", "\n", "\n", "ee_state", "=", "self", ".", "bullet_client", ".", "getLinkState", "(", "self", ".", "panda_id", ",", "\n", "panda_end_effector_index", ",", "\n", "computeForwardKinematics", "=", "True", ")", "\n", "ee_pos", "[", "idx", "]", "=", "np", ".", "array", "(", "ee_state", "[", "4", "]", ")", "\n", "ee_orn", "[", "idx", "]", "=", "np", ".", "array", "(", "self", ".", "bullet_client", ".", "getEulerFromQuaternion", "(", "np", ".", "array", "(", "ee_state", "[", "5", "]", ")", ")", ")", "\n", "#", "\n", "# time.sleep(0.1)   # Used for debug", "\n", "", "self", ".", "setJointsConfiguration", "(", "current_config", ")", "\n", "return", "np", ".", "hstack", "(", "(", "ee_pos", ",", "ee_orn", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.panda_forward_kinematics.PandaSimForwardKin.compute_inverse_kin": [[121, 149], ["tqdm.tqdm.tqdm", "numpy.zeros", "enumerate", "ee_pose[].tolist", "ee_pose[].tolist", "panda_forward_kinematics.PandaSimForwardKin.bullet_client.calculateInverseKinematics", "panda_forward_kinematics.PandaSimForwardKin.bullet_client.getQuaternionFromEuler"], "methods", ["None"], ["", "def", "compute_inverse_kin", "(", "self", ",", "end_effector_poses", ")", ":", "\n", "        ", "\"\"\"\n        Computes a joint configuration solution corresponding to a desired end-effector pose. It uses PyBullet's default IK solver (damped least squres).\n        Parameters:\n            end_effector_poses: A numpy matrix with a desired end-effector pose for each row.\n        Returns:\n            joint_configurations: A list of numpy matrices containing the corresponding joint configurations computed via PyBullet IK\n        \"\"\"", "\n", "joint_configurations", "=", "np", ".", "nan", "*", "np", ".", "zeros", "(", "(", "end_effector_poses", ".", "shape", "[", "0", "]", ",", "\n", "self", ".", "num_non_fixed_joints", ")", ")", "\n", "for", "idx", ",", "ee_pose", "in", "tqdm", "(", "enumerate", "(", "end_effector_poses", ")", ")", ":", "\n", "\n", "            ", "ee_target_pos_curr", "=", "ee_pose", "[", ":", "3", "]", ".", "tolist", "(", ")", "\n", "ee_target_orn_curr", "=", "ee_pose", "[", "3", ":", "]", ".", "tolist", "(", ")", "\n", "\n", "joint_configurations", "[", "idx", ",", ":", "]", "=", "self", ".", "bullet_client", ".", "calculateInverseKinematics", "(", "\n", "self", ".", "panda_id", ",", "\n", "panda_end_effector_index", ",", "\n", "ee_target_pos_curr", ",", "\n", "self", ".", "bullet_client", ".", "getQuaternionFromEuler", "(", "ee_target_orn_curr", ")", ",", "\n", "self", ".", "lower_joint_limits", ",", "\n", "self", ".", "upper_joint_limits", ",", "\n", "self", ".", "joint_ranges", ",", "\n", "self", ".", "rest_configuration", ",", "\n", "maxNumIterations", "=", "20000", ",", "\n", "residualThreshold", "=", "0.00001", ")", "\n", "\n", "", "return", "joint_configurations", "[", ":", ",", ":", "self", ".", "num_controlled_joints", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.panda_forward_kinematics.PandaSimForwardKin.getJointStates": [[150, 154], ["panda_forward_kinematics.PandaSimForwardKin.bullet_client.getJointStates", "range", "panda_forward_kinematics.PandaSimForwardKin.bullet_client.getNumJoints"], "methods", ["home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.panda_forward_kinematics.PandaSimForwardKin.getJointStates"], ["", "def", "getJointStates", "(", "self", ",", "robot_id", ")", ":", "\n", "        ", "joint_states", "=", "self", ".", "bullet_client", ".", "getJointStates", "(", "robot_id", ",", "range", "(", "self", ".", "bullet_client", ".", "getNumJoints", "(", "robot_id", ")", ")", ")", "\n", "joint_positions", "=", "[", "state", "[", "0", "]", "for", "state", "in", "joint_states", "]", "\n", "return", "joint_positions", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.panda_forward_kinematics.PandaSimForwardKin.setJointsConfiguration": [[156, 179], ["range", "len", "panda_forward_kinematics.PandaSimForwardKin.bullet_client.resetJointState"], "methods", ["None"], ["", "def", "setJointsConfiguration", "(", "self", ",", "desired_joints_configuration", ")", ":", "\n", "        ", "\"\"\"\n        Sets the robot joints configuration to the desired one. Checks for joint limits and prints a warning if violated.\n\n        Parameters:\n            desired_joints_configuration: A Python list containing the desired joints configuration.\n\n        Returns:\n            attained_joints_configuration: A Python list containing the attained joints configuration.\n        \"\"\"", "\n", "\n", "# Check dimensions", "\n", "assert", "(", "len", "(", "desired_joints_configuration", ")", "==", "self", ".", "num_non_fixed_joints", ")", "\n", "\n", "# Set desired joint positions", "\n", "for", "j", "in", "range", "(", "self", ".", "num_non_fixed_joints", ")", ":", "\n", "            ", "self", ".", "bullet_client", ".", "resetJointState", "(", "self", ".", "panda_id", ",", "\n", "j", ",", "\n", "desired_joints_configuration", "[", "j", "]", ")", "\n", "\n", "", "attained_joints_configuration", "=", "desired_joints_configuration", "\n", "\n", "return", "attained_joints_configuration", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.panda_forward_kinematics.PandaSimForwardKin.getJointsConfiguration": [[180, 195], ["range", "panda_forward_kinematics.PandaSimForwardKin.bullet_client.getJointState", "panda_forward_kinematics.PandaSimForwardKin.joints_configuration.append"], "methods", ["None"], ["", "def", "getJointsConfiguration", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns the current joints configuration.\n\n        Returns:\n            joints_configuration: A Python list containing the current joint values\n        \"\"\"", "\n", "\n", "self", ".", "joints_configuration", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "self", ".", "num_non_fixed_joints", ")", ":", "\n", "# Get joint limits from URDF", "\n", "            ", "jointState", "=", "self", ".", "bullet_client", ".", "getJointState", "(", "self", ".", "panda_id", ",", "j", ")", "\n", "self", ".", "joints_configuration", ".", "append", "(", "jointState", "[", "0", "]", ")", "\n", "\n", "", "return", "self", ".", "joints_configuration", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.panda_forward_kinematics.generate_trajectory": [[197, 208], ["crisp.generate_circumference", "numpy.array", "numpy.hstack", "numpy.tile"], "function", ["home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.utils.panda_utils.generate_circumference"], ["", "", "def", "generate_trajectory", "(", "ori", ",", "num_points", ")", ":", "\n", "    ", "'''\n    :param ori:\n    :param num_points:\n    :return:\n    '''", "\n", "ee_trajectory_3D", "=", "iku3d", ".", "generate_circumference", "(", "center", "=", "[", "0.0", ",", "0.044", ",", "-", "0.55", "]", ",", "\n", "radius", "=", "0.03", ",", "\n", "num_points", "=", "num_points", ")", "# number of sampled trajectory points", "\n", "ee_target_orientation", "=", "np", ".", "array", "(", "[", "np", ".", "pi", "/", "2.", ",", "0.", ",", "ori", "]", ")", "\n", "return", "np", ".", "hstack", "(", "(", "ee_trajectory_3D", ",", "np", ".", "tile", "(", "ee_target_orientation", ",", "(", "num_points", ",", "1", ")", ")", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.__init__": [[15, 99], ["planar_5links_robot.planar_5links_robot.bullet_client.connect", "planar_5links_robot.planar_5links_robot.bullet_client.setAdditionalSearchPath", "planar_5links_robot.planar_5links_robot.bullet_client.setTimeStep", "planar_5links_robot.planar_5links_robot.bullet_client.setGravity", "numpy.array", "planar_5links_robot.planar_5links_robot.bullet_client.loadURDF", "planar_5links_robot.planar_5links_robot.bullet_client.getNumJoints", "range", "zip", "pybullet_data.getDataPath", "planar_5links_robot.planar_5links_robot.bullet_client.getJointInfo", "planar_5links_robot.planar_5links_robot.bullet_client.changeDynamics", "planar_5links_robot.planar_5links_robot.joint_ranges.append", "numpy.array", "planar_5links_robot.planar_5links_robot.bullet_client.resetJointState", "planar_5links_robot.planar_5links_robot.lower_joint_limits.append", "planar_5links_robot.planar_5links_robot.upper_joint_limits.append"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "gui", "=", "False", ",", "\n", "urdf_path", "=", "\"./urdf/planar_5R_robot.urdf\"", ")", ":", "\n", "        ", "\"\"\"\n        Planar 5R robot constructor.\n\n        Parameters: TODO\n        \"\"\"", "\n", "\n", "# Set up pybullet sim", "\n", "self", ".", "bullet_client", "=", "p", "\n", "self", ".", "bullet_client", ".", "connect", "(", "self", ".", "bullet_client", ".", "DIRECT", ")", "\n", "self", ".", "bullet_client", ".", "setAdditionalSearchPath", "(", "pd", ".", "getDataPath", "(", ")", ")", "\n", "self", ".", "timeStep", "=", "1.", "/", "60.", "\n", "self", ".", "bullet_client", ".", "setTimeStep", "(", "self", ".", "timeStep", ")", "\n", "self", ".", "bullet_client", ".", "setGravity", "(", "0", ",", "0", ",", "0", ")", "\n", "num_sim_steps", "=", "5000", "\n", "rest_configuration", "=", "[", "0.", ",", "1.5708", ",", "0.", ",", "4.7124", ",", "0.", "]", "\n", "base_orientation", "=", "[", "-", "0.707107", ",", "0.0", ",", "0.0", ",", "0.707107", "]", "\n", "# Instantiate simulated Panda object with", "\n", "base_offset", "=", "[", "0", ",", "0", ",", "0", "]", "# Base position offset [0,0,0] (meters)", "\n", "use_simulation", "=", "False", "# Do not simulate the physics of the step or force new configuration", "\n", "\n", "self", ".", "base_offset", "=", "np", ".", "array", "(", "base_offset", ")", "\n", "self", ".", "base_orientation", "=", "base_orientation", "\n", "self", ".", "use_simulation", "=", "use_simulation", "\n", "self", ".", "_gui", "=", "gui", "\n", "self", ".", "num_fixed_joints", "=", "0", "\n", "self", ".", "_urdf_path", "=", "urdf_path", "\n", "\n", "flags", "=", "self", ".", "bullet_client", ".", "URDF_ENABLE_CACHED_GRAPHICS_SHAPES", "\n", "\n", "# Load robot model from URDF", "\n", "self", ".", "robot_id", "=", "self", ".", "bullet_client", ".", "loadURDF", "(", "urdf_path", ",", "\n", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", "]", ")", "+", "self", ".", "base_offset", ",", "\n", "self", ".", "base_orientation", ",", "\n", "useFixedBase", "=", "True", ",", "\n", "flags", "=", "flags", ")", "\n", "\n", "# Robot-specific parameters", "\n", "self", ".", "_end_effector_index", "=", "5", "\n", "self", ".", "num_joints", "=", "self", ".", "bullet_client", ".", "getNumJoints", "(", "self", ".", "robot_id", ")", "\n", "self", ".", "link_lengths", "=", "[", "2", "]", "*", "self", ".", "num_joints", "\n", "self", ".", "_rest_configuration", "=", "[", "np", ".", "pi", "/", "2", ",", "-", "np", ".", "pi", "/", "2", ",", "0", ",", "-", "np", ".", "pi", "/", "2", ",", "0", ",", "0", "]", "\n", "\n", "# Inverse Kinematics configuration parameters", "\n", "self", ".", "useNullSpace", "=", "1", "\n", "self", ".", "ikSolver", "=", "0", "\n", "\n", "# Initialize lists to store joint limits from URDF", "\n", "self", ".", "lower_joint_limits", "=", "[", "]", "\n", "self", ".", "upper_joint_limits", "=", "[", "]", "\n", "\n", "# Initialize Panda in rest joint configuration", "\n", "index", "=", "0", "\n", "for", "j", "in", "range", "(", "self", ".", "num_joints", ")", ":", "\n", "\n", "# Get joint limits from URDF", "\n", "            ", "info", "=", "self", ".", "bullet_client", ".", "getJointInfo", "(", "self", ".", "robot_id", ",", "j", ")", "\n", "jointType", "=", "info", "[", "2", "]", "\n", "\n", "# Set joint damping to zero", "\n", "self", ".", "bullet_client", ".", "changeDynamics", "(", "self", ".", "robot_id", ",", "j", ",", "linearDamping", "=", "0", ",", "angularDamping", "=", "0", ")", "\n", "\n", "if", "jointType", "==", "self", ".", "bullet_client", ".", "JOINT_FIXED", ":", "\n", "                ", "self", ".", "num_fixed_joints", "+=", "1", "\n", "\n", "", "if", "(", "jointType", "==", "self", ".", "bullet_client", ".", "JOINT_REVOLUTE", ")", ":", "\n", "                ", "self", ".", "bullet_client", ".", "resetJointState", "(", "self", ".", "robot_id", ",", "j", ",", "self", ".", "_rest_configuration", "[", "index", "]", ")", "\n", "self", ".", "lower_joint_limits", ".", "append", "(", "info", "[", "8", "]", ")", "\n", "self", ".", "upper_joint_limits", ".", "append", "(", "info", "[", "9", "]", ")", "\n", "index", "=", "index", "+", "1", "\n", "\n", "# Compute joint ranges from limits", "\n", "", "", "self", ".", "joint_ranges", "=", "[", "]", "\n", "zip_object", "=", "zip", "(", "self", ".", "upper_joint_limits", ",", "self", ".", "lower_joint_limits", ")", "\n", "for", "ul_i", ",", "ll_i", "in", "zip_object", ":", "\n", "            ", "self", ".", "joint_ranges", ".", "append", "(", "ul_i", "-", "ll_i", ")", "\n", "\n", "# Initialize joint configuration array", "\n", "", "self", ".", "num_non_fixed_joints", "=", "self", ".", "num_joints", "-", "self", ".", "num_fixed_joints", "\n", "self", ".", "joints_configuration", "=", "self", ".", "_rest_configuration", "\n", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.getJointsConfiguration": [[100, 115], ["range", "planar_5links_robot.planar_5links_robot.bullet_client.getJointState", "planar_5links_robot.planar_5links_robot.joints_configuration.append"], "methods", ["None"], ["", "def", "getJointsConfiguration", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Returns the current joints configuration.\n\n        Returns:\n            joints_configuration: A Python list containing the current joint values\n        \"\"\"", "\n", "\n", "self", ".", "joints_configuration", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "self", ".", "num_non_fixed_joints", ")", ":", "\n", "# Get joint limits from URDF", "\n", "            ", "jointState", "=", "self", ".", "bullet_client", ".", "getJointState", "(", "self", ".", "robot_id", ",", "j", ")", "\n", "self", ".", "joints_configuration", ".", "append", "(", "jointState", "[", "0", "]", ")", "\n", "\n", "", "return", "self", ".", "joints_configuration", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.setJointsConfiguration": [[116, 139], ["range", "len", "planar_5links_robot.planar_5links_robot.bullet_client.resetJointState"], "methods", ["None"], ["", "def", "setJointsConfiguration", "(", "self", ",", "desired_joints_configuration", ")", ":", "\n", "        ", "\"\"\"\n        Sets the robot joints configuration to the desired one. Checks for joint limits and prints a warning if violated.\n\n        Parameters:\n            desired_joints_configuration: A Python list containing the desired joints configuration.\n\n        Returns:\n            attained_joints_configuration: A Python list containing the attained joints configuration.\n        \"\"\"", "\n", "\n", "# Check dimensions", "\n", "assert", "(", "len", "(", "desired_joints_configuration", ")", "==", "self", ".", "num_non_fixed_joints", ")", "\n", "\n", "# Set desired joint positions", "\n", "for", "j", "in", "range", "(", "self", ".", "num_non_fixed_joints", ")", ":", "\n", "            ", "self", ".", "bullet_client", ".", "resetJointState", "(", "self", ".", "robot_id", ",", "\n", "j", ",", "\n", "desired_joints_configuration", "[", "j", "]", ")", "\n", "\n", "", "attained_joints_configuration", "=", "desired_joints_configuration", "\n", "\n", "return", "attained_joints_configuration", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.computeForwardKinematics": [[141, 183], ["numpy.atleast_2d", "planar_5links_robot.planar_5links_robot.getJointsConfiguration", "enumerate", "planar_5links_robot.planar_5links_robot.setJointsConfiguration", "numpy.zeros", "planar_5links_robot.planar_5links_robot.setJointsConfiguration", "planar_5links_robot.planar_5links_robot.bullet_client.getLinkState", "numpy.array", "numpy.array", "planar_5links_robot.planar_5links_robot.bullet_client.getEulerFromQuaternion", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.getJointsConfiguration", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.setJointsConfiguration", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.setJointsConfiguration"], ["", "def", "computeForwardKinematics", "(", "self", ",", "joint_configurations", ")", ":", "\n", "        ", "\"\"\"\n        Returns the end-effector pose corresponding to the current joint configuration.\n\n        Parameters:\n            joint_configurations: A numpy matrix with a desired joint configuration for each row.\n\n        Returns:\n            A list of numpy matrices containing the corresponding end effector 3D positions and orientations in Euler angles\n        \"\"\"", "\n", "\n", "joint_configurations", "=", "np", ".", "atleast_2d", "(", "joint_configurations", ")", "\n", "assert", "(", "joint_configurations", ".", "shape", "[", "0", "]", ">", "0", ")", "\n", "assert", "(", "joint_configurations", ".", "shape", "[", "1", "]", "==", "self", ".", "num_non_fixed_joints", ")", "\n", "\n", "# Save current joint configuration", "\n", "current_config", "=", "self", ".", "getJointsConfiguration", "(", ")", "\n", "\n", "# Initialize np arrays to be filled and returned", "\n", "ee_pose", "=", "np", ".", "nan", "*", "np", ".", "zeros", "(", "[", "joint_configurations", ".", "shape", "[", "0", "]", ",", "3", "]", ")", "\n", "\n", "# Add config for ghost joint", "\n", "# joint_configurations = np.hstack((joint_configurations, np.zeros(joint_configurations.shape[0])))", "\n", "\n", "for", "idx", ",", "q", "in", "enumerate", "(", "joint_configurations", ")", ":", "\n", "\n", "# Set i-th joints configuration", "\n", "            ", "self", ".", "setJointsConfiguration", "(", "q", ")", "\n", "\n", "# Get position and orientation of the end effector link", "\n", "ee_state", "=", "self", ".", "bullet_client", ".", "getLinkState", "(", "self", ".", "robot_id", ",", "\n", "self", ".", "_end_effector_index", ",", "\n", "computeForwardKinematics", "=", "True", ")", "\n", "ee_pose", "[", "idx", ",", ":", "2", "]", "=", "np", ".", "array", "(", "ee_state", "[", "4", "]", ")", "[", ":", "2", "]", "\n", "ee_pose", "[", "idx", ",", "2", "]", "=", "np", ".", "array", "(", "self", ".", "bullet_client", ".", "getEulerFromQuaternion", "(", "np", ".", "array", "(", "ee_state", "[", "5", "]", ")", ")", ")", "[", "2", "]", "\n", "#", "\n", "# ee_pose[idx, :2] = np.array(ee_state[4])[:2] + [np.sin(q[-1])*self.link_lengths[-1], np.cos(q[-1])*self.link_lengths[-1]]", "\n", "# ee_pose[idx, 2] = np.array(self.bullet_client.getEulerFromQuaternion(np.array(ee_state[5]).tolist()))[2]", "\n", "\n", "# Restore initial joints configuration", "\n", "", "self", ".", "setJointsConfiguration", "(", "current_config", ")", "\n", "return", "ee_pose", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.computeInverseKinematics": [[184, 221], ["numpy.zeros", "tqdm.tqdm.tqdm", "numpy.zeros", "numpy.ones", "enumerate", "ee_pose[].tolist", "ee_pose[].tolist", "planar_5links_robot.planar_5links_robot.bullet_client.calculateInverseKinematics", "planar_5links_robot.planar_5links_robot.bullet_client.getQuaternionFromEuler"], "methods", ["None"], ["", "def", "computeInverseKinematics", "(", "self", ",", "end_effector_poses_2d", ")", ":", "\n", "        ", "\"\"\"\n        Computes a joint configuration solution corresponding to a desired end-effector pose. It uses PyBullet's default IK solver (damped least squres).\n\n        Parameters:\n            end_effector_poses: A numpy matrix with a desired end-effector pose for each row.\n\n        Returns:\n            joint_configurations: A list of numpy matrices containing the corresponding joint configurations computed via PyBullet IK\n        \"\"\"", "\n", "joint_configurations", "=", "np", ".", "nan", "*", "np", ".", "zeros", "(", "(", "end_effector_poses_2d", ".", "shape", "[", "0", "]", ",", "\n", "self", ".", "num_non_fixed_joints", ")", ")", "\n", "\n", "end_effector_poses", "=", "np", ".", "zeros", "(", "(", "end_effector_poses_2d", ".", "shape", "[", "0", "]", ",", "\n", "6", ")", ")", "\n", "\n", "end_effector_poses", "[", ":", ",", ":", "2", "]", "=", "end_effector_poses_2d", "[", ":", ",", ":", "2", "]", "\n", "end_effector_poses", "[", ":", ",", "3", "]", "=", "-", "(", "np", ".", "pi", "/", "2", ")", "*", "np", ".", "ones", "(", "end_effector_poses_2d", ".", "shape", "[", "0", "]", ")", "\n", "end_effector_poses", "[", ":", ",", "5", "]", "=", "end_effector_poses_2d", "[", ":", ",", "2", "]", "\n", "\n", "for", "idx", ",", "ee_pose", "in", "tqdm", "(", "enumerate", "(", "end_effector_poses", ")", ")", ":", "\n", "            ", "ee_target_pos_curr", "=", "ee_pose", "[", ":", "3", "]", ".", "tolist", "(", ")", "\n", "ee_target_orn_curr", "=", "ee_pose", "[", "3", ":", "]", ".", "tolist", "(", ")", "\n", "\n", "joint_configurations", "[", "idx", ",", ":", "]", "=", "self", ".", "bullet_client", ".", "calculateInverseKinematics", "(", "\n", "self", ".", "robot_id", ",", "\n", "self", ".", "_end_effector_index", ",", "\n", "ee_target_pos_curr", ",", "\n", "self", ".", "bullet_client", ".", "getQuaternionFromEuler", "(", "ee_target_orn_curr", ")", ",", "\n", "self", ".", "lower_joint_limits", ",", "\n", "self", ".", "upper_joint_limits", ",", "\n", "self", ".", "joint_ranges", ",", "\n", "self", ".", "_rest_configuration", ",", "\n", "maxNumIterations", "=", "20000", ",", "\n", "residualThreshold", "=", "0.00001", ")", "\n", "\n", "", "return", "joint_configurations", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.reset": [[222, 228], ["planar_5links_robot.planar_5links_robot.setJointsConfiguration"], "methods", ["home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.setJointsConfiguration"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Resets the robot joints configuration to the rest configuration.\n        \"\"\"", "\n", "self", ".", "setJointsConfiguration", "(", "self", ".", "_rest_configuration", ")", "\n", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.step": [[229, 231], ["None"], "methods", ["None"], ["", "def", "step", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.get_boundaries": [[232, 234], ["zip"], "methods", ["None"], ["", "def", "get_boundaries", "(", "self", ")", ":", "\n", "        ", "return", "[", "(", "l", ",", "u", ")", "for", "l", ",", "u", "in", "zip", "(", "self", ".", "lower_joint_limits", ",", "self", ".", "upper_joint_limits", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.test_trajectory": [[235, 330], ["pathlib.Path", "matplotlib.figure", "matplotlib.figure.add_subplot", "planar_5links_robot.planar_5links_robot.scatter", "matplotlib.xlim", "matplotlib.ylim", "numpy.zeros", "model.predict", "planar_5links_robot.planar_5links_robot.check_if_inside_boundaries", "true_kinematics_model.computeForwardKinematics", "numpy.abs", "numpy.amin", "true_kinematics_model.get_joints_and_ee_pos_pb", "matplotlib.legend", "numpy.sqrt", "numpy.std", "numpy.mean", "numpy.mean", "numpy.std", "min", "max", "min", "max", "numpy.zeros", "print", "planar_5links_robot.planar_5links_robot.plot_multiple_arms", "planar_5links_robot.planar_5links_robot.scatter", "planar_5links_robot.planar_5links_robot.scatter", "planar_5links_robot.planar_5links_robot.make_gif_frame", "matplotlib.savefig", "matplotlib.savefig", "numpy.mean", "numpy.std", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.abs", "matplotlib.savefig", "matplotlib.savefig", "numpy.atleast_2d", "numpy.abs", "len", "numpy.rad2deg", "numpy.rad2deg", "numpy.mean", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.NN.fc_nn.predict", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.check_if_inside_boundaries", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.computeForwardKinematics", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.get_joints_and_ee_pos_pb", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.plot_multiple_arms", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.make_gif_frame"], ["", "def", "test_trajectory", "(", "self", ",", "\n", "trajectory", ",", "\n", "true_kinematics_model", ",", "\n", "model", ",", "\n", "output_folder", "=", "Path", "(", "'.'", ")", ",", "\n", "traj_name", "=", "None", ",", "\n", "analyze_preds", "=", "False", ",", "\n", "plot_bias", "=", "False", ",", "\n", "id_string", "=", "None", ",", "\n", "save_svg", "=", "False", ",", "\n", "giffable", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Reconstruct a sequence of orientations in space (a trajectory), one at a time by\n        predicting the joint configuration with the supplied model\n        :param trajectory: numpy array of orientations\n        :param model: a trained model that can has a predict() function\n        :param output_folder: folder where to store results\n        :param y0: initial joint configuration\n        :param orientation: if True, also reconstructs orientations\n        :param traj_name: name of the trajectory for visualization purposes\n        \"\"\"", "\n", "if", "giffable", ":", "\n", "            ", "(", "output_folder", "/", "'giffy'", ")", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "", "if", "analyze_preds", ":", "\n", "            ", "(", "output_folder", "/", "f'alpha_plots/{id_string}'", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "", "traj_pts", "=", "trajectory", ".", "shape", "[", "0", "]", "\n", "# Plot circle", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "9", ",", "7", ")", ")", "\n", "# plt.clf()", "\n", "f", "=", "fig", ".", "add_subplot", "(", "111", ")", "\n", "# plt.tight_layout()", "\n", "f", ".", "scatter", "(", "trajectory", "[", ":", ",", "0", "]", ",", "trajectory", "[", ":", ",", "1", "]", ",", "c", "=", "'green'", ",", "s", "=", "200", ",", "label", "=", "'Original trajectory'", ")", "\n", "x_min", "=", "min", "(", "np", ".", "min", "(", "trajectory", "[", ":", ",", "0", "]", ")", ",", "0", ")", "-", "4", "\n", "x_max", "=", "max", "(", "np", ".", "max", "(", "trajectory", "[", ":", ",", "0", "]", ")", ",", "0", ")", "+", "1", "\n", "y_min", "=", "min", "(", "np", ".", "min", "(", "trajectory", "[", ":", ",", "1", "]", ")", ",", "0", ")", "-", "1", "\n", "y_max", "=", "max", "(", "np", ".", "max", "(", "trajectory", "[", ":", ",", "1", "]", ")", ",", "0", ")", "+", "1", "\n", "#", "\n", "plt", ".", "xlim", "(", "[", "x_min", ",", "x_max", "]", ")", "\n", "plt", ".", "ylim", "(", "[", "y_min", ",", "y_max", "]", ")", "\n", "\n", "Error", "=", "np", ".", "zeros", "(", "(", "traj_pts", ",", "3", ")", ",", "float", ")", "\n", "if", "plot_bias", ":", "\n", "            ", "Error_bias", "=", "np", ".", "zeros", "(", "(", "traj_pts", ",", "3", ")", ",", "float", ")", "\n", "\n", "", "predictions", ",", "model_data", "=", "model", ".", "predict", "(", "X", "=", "trajectory", ",", "is_sequence", "=", "True", ")", "\n", "any_outside", ",", "preds_outside", ",", "out_of_bounds_errors", "=", "self", ".", "check_if_inside_boundaries", "(", "predictions", ")", "\n", "if", "any_outside", ":", "\n", "            ", "print", "(", "f\"There were {len(preds_outside)} predictions out of range with\"", "\n", "f\"\\taverage error: {np.rad2deg(np.mean(out_of_bounds_errors['average'])):.2f}\u00b0\"", "\n", "f\"\\taverage Max error: {np.rad2deg(np.mean(out_of_bounds_errors['worst'])):.2f}\u00b0\"", ")", "\n", "", "poses", "=", "true_kinematics_model", ".", "computeForwardKinematics", "(", "predictions", ")", "\n", "X_hat", "=", "poses", "[", ":", ",", "0", "]", "\n", "Y_hat", "=", "poses", "[", ":", ",", "1", "]", "\n", "theta_hat", "=", "poses", "[", ":", ",", "2", "]", "\n", "Error", "[", ":", ",", ":", "2", "]", "=", "np", ".", "abs", "(", "trajectory", "[", ":", ",", ":", "2", "]", "-", "np", ".", "atleast_2d", "(", "[", "X_hat", ",", "Y_hat", "]", ")", ".", "T", ")", "\n", "Error", "[", ":", ",", "2", "]", "=", "np", ".", "amin", "(", "[", "np", ".", "abs", "(", "trajectory", "[", ":", ",", "2", "]", "-", "theta_hat", ")", ",", "\n", "2", "*", "np", ".", "pi", "-", "np", ".", "abs", "(", "trajectory", "[", ":", ",", "2", "]", "-", "theta_hat", ")", "]", ")", "\n", "\n", "joints_pos", "=", "true_kinematics_model", ".", "get_joints_and_ee_pos_pb", "(", "predictions", ")", "\n", "\n", "if", "not", "giffable", ":", "\n", "            ", "f", "=", "self", ".", "plot_multiple_arms", "(", "joints_pos", ",", "f", ",", "c_links", "=", "'red'", ",", "ls", "=", "'-'", ",", "alpha", "=", "0.2", ")", "\n", "f", ".", "scatter", "(", "X_hat", "[", "0", "]", ",", "Y_hat", "[", "0", "]", ",", "c", "=", "'red'", ",", "zorder", "=", "1", ",", "s", "=", "140", ",", "edgecolor", "=", "'k'", ",", "label", "=", "'Predicted trajectory'", ")", "\n", "f", ".", "scatter", "(", "X_hat", "[", "1", ":", "]", ",", "Y_hat", "[", "1", ":", "]", ",", "c", "=", "'red'", ",", "zorder", "=", "2", ",", "s", "=", "180", ",", "edgecolor", "=", "'k'", ")", "\n", "# plt.show()", "\n", "\n", "", "else", ":", "\n", "            ", "f", "=", "self", ".", "make_gif_frame", "(", "joints_pos", ",", "poses", ",", "f", ",", "output_folder", "/", "'giffy'", ")", "\n", "\n", "", "plt", ".", "legend", "(", ")", "\n", "if", "id_string", ":", "\n", "            ", "plt", ".", "savefig", "(", "output_folder", "/", "f'[{traj_name}] Reconstructed - {id_string}.png'", ")", "\n", "if", "save_svg", ":", "\n", "                ", "plt", ".", "savefig", "(", "output_folder", "/", "f'[{traj_name}] Reconstructed - {id_string}.svg'", ")", "\n", "", "", "else", ":", "\n", "            ", "plt", ".", "savefig", "(", "output_folder", "/", "f'[{traj_name}] Reconstructed.png'", ")", "\n", "if", "save_svg", ":", "\n", "                ", "plt", ".", "savefig", "(", "output_folder", "/", "f'[{traj_name}] Reconstructed - {id_string}.svg'", ")", "\n", "\n", "", "", "err", "=", "np", ".", "sqrt", "(", "Error", "**", "2", ")", "\n", "if", "err", ".", "shape", "[", "1", "]", "==", "3", ":", "\n", "            ", "mae_orientation", "=", "np", ".", "mean", "(", "err", "[", ":", ",", "2", "]", ")", "\n", "var_orientation", "=", "np", ".", "std", "(", "err", "[", ":", ",", "2", "]", ")", "\n", "", "else", ":", "\n", "            ", "mae_orientation", "=", "None", "\n", "var_orientation", "=", "None", "\n", "", "var_position", "=", "np", ".", "std", "(", "np", ".", "sum", "(", "err", "[", ":", ",", ":", "2", "]", ",", "axis", "=", "1", ")", ")", "\n", "mae_position", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "err", "[", ":", ",", ":", "2", "]", ",", "axis", "=", "1", ")", ")", "\n", "mae", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "err", ",", "axis", "=", "1", ")", ")", "\n", "var", "=", "np", ".", "std", "(", "np", ".", "sum", "(", "err", ",", "axis", "=", "1", ")", ")", "\n", "\n", "return", "{", "'rmse_orientation'", ":", "mae_orientation", ",", "'var_orientation'", ":", "var_orientation", ",", "\n", "'rmse_position'", ":", "mae_position", ",", "'var_position'", ":", "var_position", ",", "\n", "'rmse'", ":", "mae", ",", "'var'", ":", "var", ",", "'predictions'", ":", "predictions", ",", "\n", "'pointwise_error'", ":", "err", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.test_trajectory_inv_pb": [[332, 428], ["pathlib.Path", "matplotlib.figure", "matplotlib.figure.add_subplot", "planar_5links_robot.planar_5links_robot.scatter", "matplotlib.xlim", "matplotlib.ylim", "numpy.zeros", "numpy.zeros", "planar_5links_robot.planar_5links_robot.computeInverseKinematics", "true_kinematics_model.computeForwardKinematics", "numpy.abs", "numpy.amin", "true_kinematics_model.get_joints_and_ee_pos_pb", "matplotlib.legend", "numpy.sqrt", "numpy.std", "numpy.mean", "numpy.mean", "numpy.std", "min", "max", "min", "max", "numpy.zeros", "planar_5links_robot.planar_5links_robot.plot_multiple_arms", "planar_5links_robot.planar_5links_robot.scatter", "planar_5links_robot.planar_5links_robot.scatter", "planar_5links_robot.planar_5links_robot.make_gif_frame", "matplotlib.savefig", "matplotlib.savefig", "numpy.mean", "numpy.std", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sqrt", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.min", "numpy.max", "numpy.min", "numpy.max", "numpy.abs", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.atleast_2d", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.computeInverseKinematics", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.computeForwardKinematics", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.get_joints_and_ee_pos_pb", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.plot_multiple_arms", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.make_gif_frame"], ["", "def", "test_trajectory_inv_pb", "(", "self", ",", "\n", "true_kinematics_model", ",", "\n", "trajectory", ",", "output_folder", "=", "Path", "(", "'.'", ")", ",", "\n", "traj_name", "=", "None", ",", "\n", "plot_bias", "=", "False", ",", "\n", "id_string", "=", "None", ",", "\n", "giffable", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        Reconstruct a sequence of orientations in space (a trajectory), one at a time by\n        predicting the joint configuration with the supplied model\n        :param trajectory: numpy array of orientations\n        :param model: a trained model that can has a predict() function\n        :param output_folder: folder where to store results\n        :param y0: initial joint configuration\n        :param orientation: if True, also reconstructs orientations\n        :param traj_name: name of the trajectory for visualization purposes\n        \"\"\"", "\n", "if", "giffable", ":", "\n", "            ", "(", "output_folder", "/", "'giffy_pb'", ")", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "", "traj_pts", "=", "trajectory", ".", "shape", "[", "0", "]", "\n", "# Plot circle", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "9", ",", "7", ")", ")", "\n", "# plt.clf()", "\n", "f", "=", "fig", ".", "add_subplot", "(", "111", ")", "\n", "# plt.tight_layout()", "\n", "f", ".", "scatter", "(", "trajectory", "[", ":", ",", "0", "]", ",", "trajectory", "[", ":", ",", "1", "]", ",", "c", "=", "'green'", ",", "s", "=", "200", ",", "label", "=", "'Original trajectory'", ")", "\n", "x_min", "=", "min", "(", "np", ".", "min", "(", "trajectory", "[", ":", ",", "0", "]", ")", ",", "0", ")", "-", "1.5", "\n", "x_max", "=", "max", "(", "np", ".", "max", "(", "trajectory", "[", ":", ",", "0", "]", ")", ",", "0", ")", "+", "2", "\n", "y_min", "=", "min", "(", "np", ".", "min", "(", "trajectory", "[", ":", ",", "1", "]", ")", ",", "0", ")", "-", "2", "\n", "y_max", "=", "max", "(", "np", ".", "max", "(", "trajectory", "[", ":", ",", "1", "]", ")", ",", "0", ")", "+", "1.5", "\n", "\n", "plt", ".", "xlim", "(", "[", "x_min", ",", "x_max", "]", ")", "\n", "plt", ".", "ylim", "(", "[", "y_min", ",", "y_max", "]", ")", "\n", "\n", "misses", "=", "0", "\n", "wrong_pts", "=", "[", "]", "\n", "\n", "Error", "=", "np", ".", "zeros", "(", "(", "traj_pts", ",", "3", ")", ",", "float", ")", "\n", "Qs_hat", "=", "np", ".", "zeros", "(", "(", "traj_pts", ",", "5", ")", ",", "float", ")", "\n", "if", "plot_bias", ":", "\n", "            ", "Error_bias", "=", "np", ".", "zeros", "(", "(", "traj_pts", ",", "3", ")", ",", "float", ")", "\n", "\n", "", "predictions", "=", "self", ".", "computeInverseKinematics", "(", "trajectory", ")", "\n", "poses", "=", "true_kinematics_model", ".", "computeForwardKinematics", "(", "predictions", ")", "\n", "X_hat", "=", "poses", "[", ":", ",", "0", "]", "\n", "Y_hat", "=", "poses", "[", ":", ",", "1", "]", "\n", "theta_hat", "=", "poses", "[", ":", ",", "2", "]", "\n", "\n", "Error", "[", ":", ",", ":", "2", "]", "=", "np", ".", "abs", "(", "trajectory", "[", ":", ",", ":", "2", "]", "-", "np", ".", "atleast_2d", "(", "[", "X_hat", ",", "Y_hat", "]", ")", ".", "T", ")", "\n", "Error", "[", ":", ",", "2", "]", "=", "np", ".", "amin", "(", "[", "np", ".", "abs", "(", "trajectory", "[", ":", ",", "2", "]", "-", "theta_hat", ")", ",", "\n", "2", "*", "np", ".", "pi", "-", "np", ".", "abs", "(", "trajectory", "[", ":", ",", "2", "]", "-", "theta_hat", ")", "]", ")", "\n", "joints_pos", "=", "true_kinematics_model", ".", "get_joints_and_ee_pos_pb", "(", "predictions", ")", "\n", "\n", "if", "not", "giffable", ":", "\n", "            ", "f", "=", "self", ".", "plot_multiple_arms", "(", "joints_pos", ",", "f", ",", "c_links", "=", "'red'", ",", "ls", "=", "'-'", ",", "alpha", "=", "0.2", ")", "\n", "f", ".", "scatter", "(", "X_hat", "[", "0", "]", ",", "Y_hat", "[", "0", "]", ",", "c", "=", "'red'", ",", "zorder", "=", "1", ",", "s", "=", "140", ",", "edgecolor", "=", "'k'", ",", "label", "=", "'Predicted trajectory'", ")", "\n", "f", ".", "scatter", "(", "X_hat", "[", "1", ":", "]", ",", "Y_hat", "[", "1", ":", "]", ",", "c", "=", "'red'", ",", "zorder", "=", "2", ",", "s", "=", "180", ",", "edgecolor", "=", "'k'", ")", "\n", "\n", "", "else", ":", "\n", "            ", "f", "=", "self", ".", "make_gif_frame", "(", "joints_pos", ",", "poses", ",", "f", ",", "output_folder", "/", "'giffy_pb'", ")", "\n", "\n", "# if fig_text is not None:", "\n", "#     plt.plot([], [], ' ', label=fig_text)", "\n", "", "plt", ".", "legend", "(", ")", "\n", "if", "id_string", ":", "\n", "            ", "plt", ".", "savefig", "(", "output_folder", "/", "f'[{traj_name}] Pybullet inverse kinematics - {id_string}.png'", ")", "\n", "", "else", ":", "\n", "            ", "plt", ".", "savefig", "(", "output_folder", "/", "f'[{traj_name}] Pybullet inverse kinematics.png'", ")", "\n", "\n", "\n", "", "err", "=", "np", ".", "sqrt", "(", "Error", "**", "2", ")", "\n", "if", "err", ".", "shape", "[", "1", "]", "==", "3", ":", "\n", "            ", "mae_orientation", "=", "np", ".", "mean", "(", "err", "[", ":", ",", "2", "]", ")", "\n", "var_orientation", "=", "np", ".", "std", "(", "err", "[", ":", ",", "2", "]", ")", "\n", "", "else", ":", "\n", "            ", "mae_orientation", "=", "None", "\n", "var_orientation", "=", "None", "\n", "", "var_position", "=", "np", ".", "std", "(", "np", ".", "sum", "(", "err", "[", ":", ",", ":", "2", "]", ",", "axis", "=", "1", ")", ")", "\n", "mae_position", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "err", "[", ":", ",", ":", "2", "]", ",", "axis", "=", "1", ")", ")", "\n", "mae", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "err", ",", "axis", "=", "1", ")", ")", "\n", "var", "=", "np", ".", "std", "(", "np", ".", "sum", "(", "err", ",", "axis", "=", "1", ")", ")", "\n", "\n", "bias_errors", "=", "{", "}", "\n", "if", "plot_bias", ":", "\n", "            ", "Error_bias", "=", "np", ".", "sqrt", "(", "Error_bias", "**", "2", ")", "\n", "bias_errors", "[", "'rmse_orientation'", "]", "=", "np", ".", "mean", "(", "Error_bias", "[", ":", ",", "2", "]", ")", "\n", "bias_errors", "[", "'var_orientation'", "]", "=", "np", ".", "std", "(", "Error_bias", "[", ":", ",", "2", "]", ")", "\n", "bias_errors", "[", "'rmse_position'", "]", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "Error_bias", "[", ":", ",", ":", "2", "]", ",", "axis", "=", "1", ")", ")", "\n", "bias_errors", "[", "'var_position'", "]", "=", "np", ".", "std", "(", "np", ".", "sum", "(", "Error_bias", "[", ":", ",", ":", "2", "]", ",", "axis", "=", "1", ")", ")", "\n", "bias_errors", "[", "'rmse'", "]", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "Error_bias", ",", "axis", "=", "1", ")", ")", "\n", "bias_errors", "[", "'var'", "]", "=", "np", ".", "std", "(", "np", ".", "sum", "(", "Error_bias", ",", "axis", "=", "1", ")", ")", "\n", "\n", "", "return", "{", "'rmse_orientation'", ":", "mae_orientation", ",", "'var_orientation'", ":", "var_orientation", ",", "\n", "'rmse_position'", ":", "mae_position", ",", "'var_position'", ":", "var_position", ",", "\n", "'rmse'", ":", "mae", ",", "'var'", ":", "var", ",", "'predictions'", ":", "predictions", ",", "\n", "'pointwise_error'", ":", "err", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.clip_into_boundaries": [[429, 436], ["enumerate", "zip"], "methods", ["None"], ["", "def", "clip_into_boundaries", "(", "self", ",", "Q", ")", ":", "\n", "        ", "\"\"\" Clips inside joint boundaries the supplied numpy array\"\"\"", "\n", "for", "idx", ",", "(", "q", ",", "low", ",", "high", ")", "in", "enumerate", "(", "zip", "(", "Q", ",", "self", ".", "lower_joint_limits", ",", "self", ".", "upper_joint_limits", ")", ")", ":", "\n", "            ", "if", "q", "<", "low", ":", "\n", "                ", "Q", "[", "idx", "]", "=", "low", "\n", "", "elif", "q", ">", "high", ":", "\n", "                ", "Q", "[", "idx", "]", "=", "high", "\n", "# return Q", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.check_if_inside_boundaries": [[438, 472], ["numpy.array", "numpy.array", "numpy.atleast_2d", "enumerate", "below_idx.any", "above_idx.any", "below_idx.any", "above_idx.any", "errors[].append", "errors[].append", "outside.append", "below_idx.any", "above_idx.any", "mean_errs.append", "max_errs.append", "mean_errs.append", "max_errs.append", "numpy.mean", "numpy.max", "numpy.mean", "numpy.max", "numpy.mean", "numpy.max"], "methods", ["None"], ["", "", "", "def", "check_if_inside_boundaries", "(", "self", ",", "Qs", ")", ":", "\n", "        ", "\"\"\" Checks if the supplied numpy array is a valid joint configuration\"\"\"", "\n", "outside", "=", "[", "]", "\n", "errors", "=", "{", "\"average\"", ":", "[", "]", ",", "\"worst\"", ":", "[", "]", "}", "\n", "lower_joint_limits", "=", "np", ".", "array", "(", "self", ".", "lower_joint_limits", ")", "\n", "upper_joint_limits", "=", "np", ".", "array", "(", "self", ".", "upper_joint_limits", ")", "\n", "Qs", "=", "np", ".", "atleast_2d", "(", "Qs", ")", "\n", "\n", "for", "idx", ",", "Q", "in", "enumerate", "(", "Qs", ")", ":", "\n", "            ", "below_idx", "=", "Q", "<", "lower_joint_limits", "\n", "above_idx", "=", "Q", ">", "upper_joint_limits", "\n", "\n", "if", "below_idx", ".", "any", "(", ")", "or", "above_idx", ".", "any", "(", ")", ":", "\n", "                ", "mean_errs", "=", "[", "]", "\n", "max_errs", "=", "[", "]", "\n", "if", "below_idx", ".", "any", "(", ")", ":", "\n", "                    ", "mean_errs", ".", "append", "(", "np", ".", "mean", "(", "lower_joint_limits", "[", "below_idx", "]", "-", "Q", "[", "below_idx", "]", ")", ")", "\n", "max_errs", ".", "append", "(", "np", ".", "max", "(", "lower_joint_limits", "[", "below_idx", "]", "-", "Q", "[", "below_idx", "]", ")", ")", "\n", "", "if", "above_idx", ".", "any", "(", ")", ":", "\n", "                    ", "mean_errs", ".", "append", "(", "np", ".", "mean", "(", "Q", "[", "above_idx", "]", "-", "lower_joint_limits", "[", "above_idx", "]", ")", ")", "\n", "max_errs", ".", "append", "(", "np", ".", "max", "(", "Q", "[", "above_idx", "]", "-", "lower_joint_limits", "[", "above_idx", "]", ")", ")", "\n", "", "errors", "[", "'average'", "]", ".", "append", "(", "np", ".", "mean", "(", "mean_errs", ")", ")", "\n", "errors", "[", "'worst'", "]", ".", "append", "(", "np", ".", "max", "(", "max_errs", ")", ")", "\n", "outside", ".", "append", "(", "idx", ")", "\n", "\n", "if", "below_idx", ".", "any", "(", ")", ":", "\n", "                    ", "Q", "[", "below_idx", "]", "=", "lower_joint_limits", "[", "Q", "<", "lower_joint_limits", "]", "\n", "", "if", "above_idx", ".", "any", "(", ")", ":", "\n", "                    ", "Q", "[", "above_idx", "]", "=", "upper_joint_limits", "[", "Q", ">", "upper_joint_limits", "]", "\n", "\n", "", "", "", "if", "outside", ":", "\n", "            ", "return", "True", ",", "outside", ",", "errors", "\n", "", "else", ":", "\n", "            ", "return", "False", ",", "outside", ",", "errors", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.generate_dset": [[473, 502], ["pathlib.Path", "save_folder.mkdir", "numpy.random.default_rng", "numpy.random.default_rng.random", "numpy.tile", "numpy.tile", "planar_5links_robot.planar_5links_robot.computeForwardKinematics", "matplotlib.plot", "matplotlib.scatter", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.savefig", "planar_5links_robot.planar_5links_robot.split_data_into_train_val_test", "numpy.array", "numpy.array", "numpy.sin", "numpy.cos"], "methods", ["home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.computeForwardKinematics", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.split_data_into_train_val_test"], ["", "", "def", "generate_dset", "(", "self", ",", "samples", ",", "save_folder", "=", "Path", "(", "'.'", ")", ",", "savename", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n         Generates a dataset of points randomly sampled for the joint space of the robot\n         :param samples: number of samples to generate\n         :param output_folder: folder where to save .pickle file\n         :param remove_duplicates: if True, removes all duplicated points\n         :return: a dict with keys 'xtr', 'xval', 'xte', 'ytr', 'yval, 'yte' for the generated dataset\n         \"\"\"", "\n", "save_folder", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "rng", "=", "default_rng", "(", ")", "\n", "Qs", "=", "rng", ".", "random", "(", "[", "samples", ",", "self", ".", "num_non_fixed_joints", "]", ")", "\n", "high_tiled", "=", "np", ".", "tile", "(", "np", ".", "array", "(", "self", ".", "upper_joint_limits", ")", ",", "(", "samples", ",", "1", ")", ")", "\n", "low_tiled", "=", "np", ".", "tile", "(", "np", ".", "array", "(", "self", ".", "lower_joint_limits", ")", ",", "(", "samples", ",", "1", ")", ")", "\n", "Qs", "=", "(", "high_tiled", "-", "low_tiled", ")", "*", "Qs", "+", "low_tiled", "# Generates samples in the desired intervals", "\n", "\n", "poses", "=", "self", ".", "computeForwardKinematics", "(", "Qs", ")", "\n", "X", "=", "poses", "[", ":", ",", "0", "]", "\n", "Y", "=", "poses", "[", ":", ",", "1", "]", "\n", "Theta", "=", "poses", "[", ":", ",", "2", "]", "\n", "\n", "plt", ".", "plot", "(", "[", "X", ",", "X", "+", "0.2", "*", "np", ".", "sin", "(", "Theta", ")", "]", ",", "\n", "[", "Y", ",", "Y", "-", "0.2", "*", "np", ".", "cos", "(", "Theta", ")", "]", ",", "'k-'", ")", "\n", "plt", ".", "scatter", "(", "X", ",", "Y", ")", "# Plotting the data set", "\n", "plt", ".", "xlabel", "(", "\"X Axis\"", ")", "\n", "plt", ".", "ylabel", "(", "\"Y Axis\"", ")", "\n", "plt", ".", "savefig", "(", "save_folder", "/", "f'Data set of {samples} possible endeffector positions and orientations.png'", ")", "\n", "output", "=", "Qs", "# Q1,Q2,Q3", "\n", "\n", "return", "self", ".", "split_data_into_train_val_test", "(", "poses", ",", "output", ",", "save_folder", ",", "savename", "=", "savename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.generate_dset_near_trajectory": [[503, 564], ["pathlib.Path", "numpy.random.default_rng", "numpy.array", "planar_5links_robot.planar_5links_robot.computeForwardKinematics", "numpy.array", "planar_5links_robot.planar_5links_robot.split_data_into_train_val_test", "len", "numpy.random.default_rng.random", "numpy.tile", "numpy.tile", "planar_5links_robot.planar_5links_robot.computeForwardKinematics", "crisp.utils.planar_utils.sqdist", "len", "numpy.vstack", "numpy.array", "numpy.array", "numpy.array", "print", "numpy.array.pop", "numpy.array.append", "numpy.array.append", "range", "numpy.vstack", "numpy.sqrt().min", "zip", "zip", "p_wise_dists.min", "len", "len", "numpy.sqrt", "p_wise_dists.min", "crisp.utils.planar_utils.radial_squared_error", "numpy.atleast_2d", "numpy.atleast_2d"], "methods", ["home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.computeForwardKinematics", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.split_data_into_train_val_test", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.computeForwardKinematics", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.utils.planar_utils.sqdist", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.utils.planar_utils.radial_squared_error"], ["", "def", "generate_dset_near_trajectory", "(", "self", ",", "trajectory", ",", "max_dist", ",", "samples", ",", "\n", "orientation", "=", "False", ",", "\n", "savename", "=", "None", ",", "\n", "save_folder", "=", "Path", "(", "'.'", ")", ")", ":", "\n", "        ", "\"\"\"\n        Samples training points close to the supplied trajectory, if remove_duplicates is True,\n        it removes duplicated points\n        :return: dict with dataset\n        \"\"\"", "\n", "Qs", "=", "[", "]", "\n", "rng", "=", "default_rng", "(", ")", "\n", "tentative_per_try", "=", "50000", "\n", "tries", "=", "0", "\n", "if", "orientation", ":", "\n", "            ", "check_every", "=", "tentative_per_try", "*", "20", "\n", "", "else", ":", "\n", "            ", "check_every", "=", "tentative_per_try", "*", "5", "\n", "", "while", "len", "(", "Qs", ")", "<=", "samples", ":", "\n", "            ", "tries", "+=", "tentative_per_try", "\n", "tentative_Qs", "=", "rng", ".", "random", "(", "[", "tentative_per_try", ",", "self", ".", "num_non_fixed_joints", "]", ")", "\n", "high_tiled", "=", "np", ".", "tile", "(", "np", ".", "array", "(", "self", ".", "upper_joint_limits", ")", ",", "(", "tentative_per_try", ",", "1", ")", ")", "\n", "low_tiled", "=", "np", ".", "tile", "(", "np", ".", "array", "(", "self", ".", "lower_joint_limits", ")", ",", "(", "tentative_per_try", ",", "1", ")", ")", "\n", "tentative_Qs", "=", "(", "high_tiled", "-", "low_tiled", ")", "*", "tentative_Qs", "+", "low_tiled", "\n", "\n", "poses", "=", "self", ".", "computeForwardKinematics", "(", "tentative_Qs", ")", "\n", "X", "=", "poses", "[", ":", ",", "0", "]", "\n", "Y", "=", "poses", "[", ":", ",", "1", "]", "\n", "distances", "=", "sqdist", "(", "X1", "=", "np", ".", "vstack", "(", "(", "X", ",", "Y", ")", ")", ".", "T", ",", "X2", "=", "trajectory", "[", ":", ",", ":", "2", "]", ")", "\n", "\n", "if", "orientation", ":", "\n", "                ", "Theta", "=", "poses", "[", ":", ",", "2", "]", "\n", "circle_distances_min", "=", "np", ".", "array", "(", "[", "np", ".", "sqrt", "(", "radial_squared_error", "(", "np", ".", "atleast_2d", "(", "candidate", ")", ".", "T", ",", "np", ".", "atleast_2d", "(", "trajectory", "[", ":", ",", "2", "]", ")", ")", ")", ".", "min", "(", ")", "for", "candidate", "in", "Theta", "]", ")", "\n", "[", "Qs", ".", "append", "(", "q", ")", "for", "(", "q", ",", "p_wise_dists", ",", "min_ori_dist", ")", "in", "zip", "(", "tentative_Qs", ",", "distances", ",", "circle_distances_min", ")", "\n", "if", "(", "p_wise_dists", ".", "min", "(", ")", "<=", "max_dist", ")", "and", "(", "min_ori_dist", "<=", "0.03", ")", "]", "\n", "\n", "", "else", ":", "\n", "                ", "[", "Qs", ".", "append", "(", "q", ")", "for", "(", "q", ",", "p_wise_dists", ")", "in", "zip", "(", "tentative_Qs", ",", "distances", ")", "if", "p_wise_dists", ".", "min", "(", ")", "<=", "max_dist", "]", "\n", "\n", "", "if", "tries", "%", "check_every", "==", "0", ":", "\n", "                ", "print", "(", "f'Generating dataset.\\t Tries: {tries}\\tCurrent samples: {len(Qs)}\\\\{samples}'", ")", "\n", "\n", "", "", "if", "len", "(", "Qs", ")", ">", "samples", ":", "\n", "            ", "[", "Qs", ".", "pop", "(", ")", "for", "idx", "in", "range", "(", "len", "(", "Qs", ")", "-", "samples", ")", "]", "\n", "\n", "", "Qs", "=", "np", ".", "array", "(", "Qs", ")", "\n", "poses", "=", "self", ".", "computeForwardKinematics", "(", "Qs", ")", "\n", "X", "=", "poses", "[", ":", ",", "0", "]", "\n", "Y", "=", "poses", "[", ":", ",", "1", "]", "\n", "Theta", "=", "poses", "[", ":", ",", "2", "]", "\n", "\n", "# plt.plot([X, X + 0.2 * np.cos(Theta)],", "\n", "#         [Y, Y + 0.2 * np.sin(Theta)], 'k-')", "\n", "# plt.scatter(X, Y)  # Plotting the data set", "\n", "# plt.xlabel(\"X Axis\")", "\n", "# plt.ylabel(\"Y Axis\")", "\n", "# plt.savefig(output_folder / f'Dataset of {samples} samples with {traj_name} trajectory.png')", "\n", "\n", "data", "=", "np", ".", "vstack", "(", "(", "X", ",", "Y", ",", "Theta", ")", ")", ".", "T", "# X,Y,Theta", "\n", "output", "=", "np", ".", "array", "(", "Qs", ")", "\n", "\n", "return", "self", ".", "split_data_into_train_val_test", "(", "data", ",", "output", ",", "save_folder", ",", "fullspace", "=", "False", ",", "savename", "=", "savename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.split_data_into_train_val_test": [[565, 592], ["pathlib.Path", "save_folder.mkdir", "pickle.dump", "open", "pickle.dump", "pickle.dump", "int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "open", "open"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "split_data_into_train_val_test", "(", "cls", ",", "inputs", ",", "outputs", ",", "save_folder", "=", "Path", "(", "'.'", ")", ",", "\n", "savename", "=", "None", ",", "fullspace", "=", "True", ")", ":", "\n", "        ", "\"\"\" Separate data set in to Train, Test And Validation \"\"\"", "\n", "samples", "=", "inputs", ".", "shape", "[", "0", "]", "\n", "train_input", "=", "inputs", "[", "0", ":", "int", "(", "0.7", "*", "samples", ")", ",", ":", "]", "\n", "train_output", "=", "outputs", "[", "0", ":", "int", "(", "0.7", "*", "samples", ")", ",", ":", "]", "\n", "\n", "test_input", "=", "inputs", "[", "int", "(", "0.7", "*", "samples", ")", ":", "int", "(", "0.85", "*", "samples", ")", ",", ":", "]", "\n", "test_output", "=", "outputs", "[", "int", "(", "0.7", "*", "samples", ")", ":", "int", "(", "0.85", "*", "samples", ")", ",", ":", "]", "\n", "\n", "validate_input", "=", "inputs", "[", "int", "(", "0.85", "*", "samples", ")", ":", "int", "(", "samples", ")", ",", ":", "]", "\n", "validate_output", "=", "outputs", "[", "int", "(", "0.85", "*", "samples", ")", ":", "int", "(", "samples", ")", ",", ":", "]", "\n", "\n", "dataset", "=", "{", "'xtr'", ":", "train_input", ",", "'ytr'", ":", "train_output", ",", "\n", "'xte'", ":", "test_input", ",", "'yte'", ":", "test_output", ",", "\n", "'xval'", ":", "validate_input", ",", "'yval'", ":", "validate_output", "}", "\n", "\n", "save_folder", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "if", "savename", "is", "not", "None", ":", "\n", "            ", "pickle", ".", "dump", "(", "dataset", ",", "open", "(", "save_folder", "/", "savename", ",", "\"wb\"", ")", ")", "\n", "", "elif", "fullspace", ":", "\n", "            ", "pickle", ".", "dump", "(", "dataset", ",", "open", "(", "save_folder", "/", "f'synth_dset_{samples}_fullspace.pickle'", ",", "'wb'", ")", ")", "\n", "", "else", ":", "\n", "            ", "pickle", ".", "dump", "(", "dataset", ",", "open", "(", "save_folder", "/", "f'synth_dset_{samples}_neartraj.pickle'", ",", "'wb'", ")", ")", "\n", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.get_joints_and_ee_pos_pb": [[594, 616], ["numpy.atleast_2d", "numpy.full", "enumerate", "planar_5links_robot.planar_5links_robot.setJointsConfiguration", "range", "planar_5links_robot.planar_5links_robot.computeForwardKinematics().squeeze", "planar_5links_robot.planar_5links_robot.bullet_client.getLinkState", "numpy.array", "planar_5links_robot.planar_5links_robot.computeForwardKinematics", "numpy.atleast_2d"], "methods", ["home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.setJointsConfiguration", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.computeForwardKinematics"], ["", "def", "get_joints_and_ee_pos_pb", "(", "self", ",", "joint_configurations", ")", ":", "\n", "        ", "joint_configurations", "=", "np", ".", "atleast_2d", "(", "joint_configurations", ")", "\n", "num_configurations", "=", "joint_configurations", ".", "shape", "[", "0", "]", "\n", "positions", "=", "self", ".", "num_joints", "# We add the position for the end effector", "\n", "assert", "(", "joint_configurations", ".", "shape", "[", "1", "]", "==", "self", ".", "num_non_fixed_joints", ")", "\n", "joints_pos", "=", "np", ".", "full", "(", "(", "(", "num_configurations", ",", "positions", ",", "2", ")", ")", ",", "np", ".", "inf", ")", "\n", "\n", "for", "idx", ",", "jc", "in", "enumerate", "(", "joint_configurations", ")", ":", "\n", "# Set i-th joints configuration", "\n", "            ", "self", ".", "setJointsConfiguration", "(", "jc", ")", "\n", "\n", "# Get position and orientation of the end effector link", "\n", "for", "link_idx", "in", "range", "(", "self", ".", "num_non_fixed_joints", ")", ":", "\n", "                ", "ee_state", "=", "self", ".", "bullet_client", ".", "getLinkState", "(", "self", ".", "robot_id", ",", "\n", "link_idx", ",", "\n", "computeForwardKinematics", "=", "True", ")", "\n", "joints_pos", "[", "idx", ",", "link_idx", "]", "=", "np", ".", "array", "(", "ee_state", "[", "4", "]", ")", "[", ":", "2", "]", "\n", "\n", "", "P", "=", "self", ".", "computeForwardKinematics", "(", "np", ".", "atleast_2d", "(", "jc", ")", ")", ".", "squeeze", "(", ")", "\n", "joints_pos", "[", "idx", ",", "-", "1", "]", "=", "P", "[", ":", "2", "]", "\n", "# Restore initial joints configuration", "\n", "", "return", "joints_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.plot_arm": [[617, 635], ["enumerate", "kwargs.items", "f.plot", "f.scatter", "f.plot", "f.scatter"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "plot_arm", "(", "extr", ",", "f", ",", "c_links", "=", "'red'", ",", "c_joints", "=", "'black'", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Plots the arms given the link extremities positions in a [N_l x 2] array\"\"\"", "\n", "plot_args", "=", "{", "key", ":", "value", "for", "(", "key", ",", "value", ")", "in", "kwargs", ".", "items", "(", ")", "if", "key", "!=", "'label'", "}", "\n", "for", "idx", ",", "_", "in", "enumerate", "(", "extr", ")", ":", "\n", "# first plot is to assign only one label using **kwargs", "\n", "            ", "if", "idx", "==", "0", ":", "\n", "# plot links", "\n", "                ", "f", ".", "plot", "(", "[", "0", ",", "extr", "[", "idx", ",", "0", "]", "]", ",", "[", "0", ",", "extr", "[", "idx", ",", "1", "]", "]", ",", "c", "=", "c_links", ",", "**", "kwargs", ")", "\n", "# plot joints", "\n", "f", ".", "scatter", "(", "extr", "[", "idx", ",", "0", "]", ",", "extr", "[", "idx", ",", "1", "]", ",", "marker", "=", "'s'", ",", "c", "=", "c_joints", ",", "alpha", "=", "0.4", ")", "\n", "", "else", ":", "\n", "#plot links", "\n", "                ", "f", ".", "plot", "(", "[", "extr", "[", "idx", "-", "1", ",", "0", "]", ",", "extr", "[", "idx", ",", "0", "]", "]", ",", "\n", "[", "extr", "[", "idx", "-", "1", ",", "1", "]", ",", "extr", "[", "idx", ",", "1", "]", "]", ",", "'-'", ",", "c", "=", "c_links", ",", "**", "plot_args", ")", "\n", "# plot joints", "\n", "f", ".", "scatter", "(", "extr", "[", "idx", ",", "0", "]", ",", "extr", "[", "idx", ",", "1", "]", ",", "marker", "=", "'o'", ",", "c", "=", "c_joints", ",", "zorder", "=", "2", ",", "alpha", "=", "0.4", ")", "\n", "", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.plot_multiple_arms": [[636, 654], ["range", "kwargs.items", "f.plot", "f.scatter", "f.plot", "f.scatter", "numpy.zeros", "numpy.zeros"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "plot_multiple_arms", "(", "extr", ",", "f", ",", "c_links", "=", "'red'", ",", "c_joints", "=", "'black'", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Plots the arms given the link extremities positions in a [N_l x 2 x N_p] array\"\"\"", "\n", "plot_args", "=", "{", "key", ":", "value", "for", "(", "key", ",", "value", ")", "in", "kwargs", ".", "items", "(", ")", "if", "key", "!=", "'label'", "}", "\n", "for", "idx", "in", "range", "(", "extr", ".", "shape", "[", "1", "]", ")", ":", "\n", "# first plot is to assign only one label using **kwargs", "\n", "            ", "if", "idx", "==", "0", ":", "\n", "# plot links", "\n", "                ", "f", ".", "plot", "(", "[", "np", ".", "zeros", "(", "extr", ".", "shape", "[", "0", "]", ")", ",", "extr", "[", ":", ",", "idx", ",", "0", "]", "]", ",", "[", "np", ".", "zeros", "(", "extr", ".", "shape", "[", "0", "]", ")", ",", "extr", "[", ":", ",", "idx", ",", "1", "]", "]", ",", "\n", "c", "=", "c_links", ",", "**", "kwargs", ")", "# plot joints", "\n", "f", ".", "scatter", "(", "extr", "[", ":", ",", "idx", ",", "0", "]", ",", "extr", "[", ":", ",", "idx", ",", "1", "]", ",", "marker", "=", "'s'", ",", "c", "=", "c_joints", ",", "alpha", "=", "0.3", ")", "\n", "", "else", ":", "\n", "#plot links", "\n", "                ", "f", ".", "plot", "(", "[", "extr", "[", ":", ",", "idx", "-", "1", ",", "0", "]", ",", "extr", "[", ":", ",", "idx", ",", "0", "]", "]", ",", "\n", "[", "extr", "[", ":", ",", "idx", "-", "1", ",", "1", "]", ",", "extr", "[", ":", ",", "idx", ",", "1", "]", "]", ",", "'-'", ",", "c", "=", "c_links", ",", "**", "plot_args", ")", "\n", "# plot joints", "\n", "f", ".", "scatter", "(", "extr", "[", ":", ",", "idx", ",", "0", "]", ",", "extr", "[", ":", ",", "idx", ",", "1", "]", ",", "marker", "=", "'o'", ",", "c", "=", "c_joints", ",", "alpha", "=", "0.3", ",", "zorder", "=", "2", ")", "\n", "", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.plot_arm_old": [[655, 668], ["enumerate", "kwargs.items", "f.plot", "f.scatter", "f.plot", "f.scatter", "extr[].sum", "extr[].sum", "extr[].sum", "extr[].sum", "extr[].sum", "extr[].sum"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "plot_arm_old", "(", "extr", ",", "f", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Plots the arms given the link extremities positions in a [N_l x 2] array\"\"\"", "\n", "plot_args", "=", "{", "key", ":", "value", "for", "(", "key", ",", "value", ")", "in", "kwargs", ".", "items", "(", ")", "if", "key", "!=", "'label'", "}", "\n", "for", "idx", ",", "_", "in", "enumerate", "(", "extr", ")", ":", "\n", "            ", "if", "idx", "==", "0", ":", "\n", "                ", "f", ".", "plot", "(", "[", "0", ",", "extr", "[", "idx", ",", "0", "]", "]", ",", "[", "0", ",", "extr", "[", "idx", ",", "1", "]", "]", ",", "zorder", "=", "1", ",", "**", "kwargs", ")", "\n", "f", ".", "scatter", "(", "extr", "[", "idx", ",", "0", "]", ",", "extr", "[", "idx", ",", "1", "]", ",", "zorder", "=", "2", ",", "marker", "=", "'o'", ",", "color", "=", "'k'", ")", "\n", "", "else", ":", "\n", "                ", "f", ".", "plot", "(", "[", "extr", "[", ":", "idx", ",", "0", "]", ".", "sum", "(", ")", ",", "extr", "[", ":", "idx", "+", "1", ",", "0", "]", ".", "sum", "(", ")", "]", ",", "\n", "[", "extr", "[", ":", "idx", ",", "1", "]", ".", "sum", "(", ")", ",", "extr", "[", ":", "idx", "+", "1", ",", "1", "]", ".", "sum", "(", ")", "]", ",", "'-k'", ",", "zorder", "=", "1", ",", "**", "plot_args", ")", "\n", "f", ".", "scatter", "(", "extr", "[", ":", "idx", ",", "0", "]", ".", "sum", "(", ")", ",", "extr", "[", ":", "idx", "+", "1", ",", "0", "]", ".", "sum", "(", ")", ",", "zorder", "=", "2", ",", "marker", "=", "'o'", ",", "color", "=", "'k'", ")", "\n", "", "", "return", "f", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.get_joints_pos_old": [[669, 678], ["numpy.full", "enumerate", "numpy.atleast_2d", "numpy.cos", "numpy.sin", "numpy.sum", "numpy.sum", "numpy.atleast_2d", "numpy.atleast_2d"], "methods", ["None"], ["", "def", "get_joints_pos_old", "(", "self", ",", "Q", ",", "idx", "=", "0", ")", ":", "\n", "        ", "if", "Q", ".", "ndim", "==", "1", ":", "\n", "            ", "Q", "=", "np", ".", "atleast_2d", "(", "Q", ")", "\n", "", "joints_pos", "=", "np", ".", "full", "(", "(", "self", ".", "num_non_fixed_joints", ",", "2", ")", ",", "np", ".", "inf", ")", "\n", "for", "jdx", ",", "length", "in", "enumerate", "(", "self", ".", "link_lengths", "[", ":", "self", ".", "num_non_fixed_joints", "]", ")", ":", "\n", "            ", "x", "=", "length", "*", "np", ".", "cos", "(", "np", ".", "sum", "(", "np", ".", "atleast_2d", "(", "Q", "[", "idx", ",", ":", "jdx", "+", "1", "]", ")", ",", "axis", "=", "1", ")", ")", "\n", "y", "=", "length", "*", "np", ".", "sin", "(", "np", ".", "sum", "(", "np", ".", "atleast_2d", "(", "Q", "[", "idx", ",", ":", "jdx", "+", "1", "]", ")", ",", "axis", "=", "1", ")", ")", "\n", "joints_pos", "[", "jdx", "]", "=", "(", "x", ",", "y", ")", "\n", "", "return", "joints_pos", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.analyze_point": [[679, 720], ["matplotlib.figure", "matplotlib.figure.add_axes", "planar_5links_robot.planar_5links_robot.set_xlim", "planar_5links_robot.planar_5links_robot.set_ylim", "planar_5links_robot.planar_5links_robot.set_title", "matplotlib.colors.DivergingNorm", "planar_5links_robot.planar_5links_robot.scatter", "planar_5links_robot.planar_5links_robot.plot_arm", "planar_5links_robot.planar_5links_robot.scatter", "planar_5links_robot.planar_5links_robot.scatter", "itertools.cycle", "kwargs.items", "planar_5links_robot.planar_5links_robot.legend", "planar_5links_robot.planar_5links_robot.scatter", "alphas.min", "alphas.max", "next"], "methods", ["home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.plot_arm"], ["", "def", "analyze_point", "(", "self", ",", "xtr", ",", "x_true", ",", "x_hat", ",", "alphas", ",", "joints_pos", ",", "\n", "a_indexes", "=", "None", ",", "\n", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"Plots the alphas associated to a certain point\"\"\"", "\n", "assert", "x_true", ".", "shape", "[", "0", "]", "<", "3", ",", "\"analyze_point() supports only 2d points\"", "\n", "assert", "x_hat", ".", "shape", "[", "0", "]", "<", "3", ",", "\"analyze_point() supports only 2d points\"", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "8", ",", "6", ")", ")", "\n", "ax", "=", "fig", ".", "add_axes", "(", "[", "0", ",", "0", ",", "1", ",", "1", "]", ")", "\n", "ax", ".", "set_xlim", "(", "[", "-", "10", ",", "-", "0", "]", ")", "\n", "ax", ".", "set_ylim", "(", "[", "-", "8", ",", "8", "]", ")", "\n", "ax", ".", "set_title", "(", "f'Alphas'", ")", "\n", "\n", "if", "a_indexes", "is", "not", "None", ":", "\n", "            ", "xtr_to_plot", "=", "xtr", "[", "a_indexes", "]", "\n", "alphas_to_plot", "=", "alphas", "[", "a_indexes", "]", "\n", "", "else", ":", "\n", "            ", "xtr_to_plot", "=", "xtr", "\n", "alphas_to_plot", "=", "alphas", "\n", "", "divnorm", "=", "colors", ".", "DivergingNorm", "(", "vmin", "=", "alphas", ".", "min", "(", ")", ",", "vmax", "=", "alphas", ".", "max", "(", ")", ",", "vcenter", "=", "0", ")", "\n", "splot", "=", "ax", ".", "scatter", "(", "xtr_to_plot", "[", ":", ",", "0", "]", ",", "xtr_to_plot", "[", ":", ",", "1", "]", ",", "cmap", "=", "'PiYG'", ",", "\n", "norm", "=", "divnorm", ",", "c", "=", "alphas_to_plot", ",", "\n", "alpha", "=", "0.4", ",", "s", "=", "20", ",", "zorder", "=", "0", ")", "\n", "# splot = ax.scatter(xtr_to_plot[alphas_to_plot>=0, 0], xtr_to_plot[alphas_to_plot>=0, 1], cmap='PiYG',", "\n", "#                    vmin=alphas.min(), vmax=alphas.max(), c=alphas_to_plot[alphas_to_plot>=0],", "\n", "#                    alpha=0.4, s=30, zorder=1)", "\n", "# ax.plot([xtr[:, 0], xtr[:, 0] + 0.2 * np.cos(xtr[:, 2])],", "\n", "#         [xtr[:, 1], xtr[:, 1] + 0.2 * np.sin(xtr[:, 2])],", "\n", "#         'c-', alpha=0.2, cmap='twilight', colors=xtr[:, 2])", "\n", "# cbar = fig.colorbar(splot)", "\n", "# cbar.ax.tick_params(labelsize=20)", "\n", "ax", "=", "self", ".", "plot_arm", "(", "joints_pos", ",", "ax", ")", "\n", "ax", ".", "scatter", "(", "x_true", "[", "0", "]", ",", "x_true", "[", "1", "]", ",", "zorder", "=", "2", ",", "marker", "=", "'X'", ",", "color", "=", "'blue'", ",", "s", "=", "100", ",", "label", "=", "'True'", ")", "\n", "ax", ".", "scatter", "(", "x_hat", "[", "0", "]", ",", "x_hat", "[", "1", "]", ",", "zorder", "=", "2", ",", "marker", "=", "'X'", ",", "color", "=", "'red'", ",", "s", "=", "100", ",", "label", "=", "'Reconstructed'", ")", "\n", "marker", "=", "itertools", ".", "cycle", "(", "[", "'.'", ",", "'o'", ",", "'v'", ",", "'^'", ",", "'1'", ",", "'2'", ",", "'3'", ",", "'4'", ",", "'8'", ",", "'s'", ",", "'p'", ",", "'P'", ",", "'h'", "]", ")", "\n", "for", "key", ",", "value", "in", "kwargs", ".", "items", "(", ")", ":", "\n", "            ", "ax", ".", "scatter", "(", "value", "[", "0", "]", ",", "value", "[", "1", "]", ",", "marker", "=", "next", "(", "marker", ")", ",", "zorder", "=", "2", ",", "s", "=", "160", ",", "label", "=", "key", ")", "\n", "\n", "", "ax", ".", "legend", "(", "fontsize", "=", "12", ")", "\n", "# plt.show()", "\n", "\n", "return", "fig", ",", "ax", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.plot_configs_of_biggest_alphas": [[721, 747], ["matplotlib.figure", "planar_5links_robot.planar_5links_robot.add_axes", "planar_5links_robot.planar_5links_robot.add_axes.set_xlim", "planar_5links_robot.planar_5links_robot.add_axes.set_ylim", "planar_5links_robot.planar_5links_robot.add_axes.set_title", "planar_5links_robot.planar_5links_robot.add_axes.scatter", "planar_5links_robot.planar_5links_robot.add_axes.scatter", "planar_5links_robot.planar_5links_robot.plot_arm", "planar_5links_robot.planar_5links_robot.add_axes.scatter", "planar_5links_robot.planar_5links_robot.add_axes.legend", "numpy.argsort", "planar_5links_robot.planar_5links_robot.get_joints_and_ee_pos_pb", "planar_5links_robot.planar_5links_robot.plot_arm", "planar_5links_robot.planar_5links_robot.get_joints_and_ee_pos_pb"], "methods", ["home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.plot_arm", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.get_joints_and_ee_pos_pb", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.plot_arm", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.get_joints_and_ee_pos_pb"], ["", "def", "plot_configs_of_biggest_alphas", "(", "self", ",", "xtr", ",", "ytr", ",", "x_true", ",", "x_hat", ",", "y_hat", ",", "alphas", ",", "num_to_plot", "=", "3", ")", ":", "\n", "        ", "assert", "x_true", ".", "shape", "[", "0", "]", "<", "3", ",", "\"analyze_point() supports only 2d points\"", "\n", "assert", "x_hat", ".", "shape", "[", "0", "]", "<", "3", ",", "\"analyze_point() supports only 2d points\"", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "8", ",", "6", ")", ")", "\n", "ax", "=", "fig", ".", "add_axes", "(", "[", "0", ",", "0", ",", "1", ",", "1", "]", ")", "\n", "ax", ".", "set_xlim", "(", "[", "-", "6.5", ",", "0.5", "]", ")", "\n", "ax", ".", "set_ylim", "(", "[", "-", "2.5", ",", "6", "]", ")", "\n", "ax", ".", "set_title", "(", "f'Alphas'", ")", "\n", "a_indexes", "=", "np", ".", "argsort", "(", "alphas", ")", "[", "-", "num_to_plot", ":", "]", "\n", "xtr_to_plot", "=", "xtr", "[", "a_indexes", "]", "\n", "ytr_to_plot", "=", "ytr", "[", "a_indexes", "]", "\n", "\n", "splot", "=", "ax", ".", "scatter", "(", "xtr_to_plot", "[", ":", ",", "0", "]", ",", "xtr_to_plot", "[", ":", ",", "1", "]", ",", "c", "=", "'tab:orange'", ",", "\n", "s", "=", "100", ",", "zorder", "=", "2", ")", "\n", "vivid_c", "=", "'tab:red'", "\n", "dull_c", "=", "'black'", "\n", "for", "y", "in", "ytr_to_plot", ":", "\n", "            ", "j_pos", "=", "self", ".", "get_joints_and_ee_pos_pb", "(", "y", ")", "\n", "fig", "=", "self", ".", "plot_arm", "(", "j_pos", ",", "ax", ",", "c_links", "=", "'black'", ",", "c_joints", "=", "vivid_c", ",", "ls", "=", "'-'", ",", "alpha", "=", "0.7", ",", "linewidth", "=", "4", ",", "zorder", "=", "1", ")", "\n", "\n", "", "ax", ".", "scatter", "(", "x_true", "[", "0", "]", ",", "x_true", "[", "1", "]", ",", "zorder", "=", "1", ",", "marker", "=", "'X'", ",", "color", "=", "'blue'", ",", "s", "=", "1000", ",", "label", "=", "'Target'", ")", "\n", "fig", "=", "self", ".", "plot_arm", "(", "self", ".", "get_joints_and_ee_pos_pb", "(", "y_hat", ")", ",", "ax", ",", "c_links", "=", "vivid_c", ",", "c_joints", "=", "dull_c", ",", "ls", "=", "'-'", ",", "alpha", "=", "1", ",", "linewidth", "=", "8", ",", "zorder", "=", "1", ")", "\n", "ax", ".", "scatter", "(", "x_hat", "[", "0", "]", ",", "x_hat", "[", "1", "]", ",", "zorder", "=", "2", ",", "marker", "=", "'X'", ",", "color", "=", "'tab:red'", ",", "s", "=", "400", ",", "label", "=", "'Reconstructed'", ")", "\n", "ax", ".", "legend", "(", "fontsize", "=", "30", ")", "\n", "\n", "return", "fig", ",", "ax", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.make_gif_frame": [[748, 765], ["print", "enumerate", "print", "planar_5links_robot.planar_5links_robot.plot_arm", "matplotlib.legend", "matplotlib.savefig", "planar_5links_robot.planar_5links_robot.scatter", "planar_5links_robot.planar_5links_robot.scatter"], "methods", ["home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.plot_arm"], ["", "def", "make_gif_frame", "(", "self", ",", "joint_positions", ",", "ee_positions", ",", "figure", ",", "gif_folder", ")", ":", "\n", "        ", "print", "(", "\"Producing gif frames...\"", ")", "\n", "for", "idx", ",", "jp", "in", "enumerate", "(", "joint_positions", ")", ":", "\n", "            ", "figure", "=", "self", ".", "plot_arm", "(", "jp", ",", "figure", ",", "c_links", "=", "'red'", ",", "ls", "=", "'-'", ",", "alpha", "=", "0.2", ")", "\n", "\n", "if", "idx", "==", "0", ":", "# put a label on red markers", "\n", "                ", "figure", ".", "scatter", "(", "ee_positions", "[", "idx", ",", "0", "]", ",", "ee_positions", "[", "idx", ",", "1", "]", ",", "c", "=", "'red'", ",", "zorder", "=", "1", ",", "s", "=", "140", ",", "edgecolor", "=", "'k'", ",", "\n", "alpha", "=", "0.3", ",", "label", "=", "'Predicted trajectory'", ")", "\n", "", "else", ":", "\n", "                ", "figure", ".", "scatter", "(", "ee_positions", "[", "idx", ",", "0", "]", ",", "ee_positions", "[", "idx", ",", "1", "]", ",", "c", "=", "'red'", ",", "zorder", "=", "2", ",", "s", "=", "180", ",", "edgecolor", "=", "'k'", ",", "\n", "alpha", "=", "0.3", ")", "\n", "", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "savefig", "(", "gif_folder", "/", "f'frame_{idx:08d}'", ")", "\n", "\n", "", "print", "(", "\"...gif frames completed!\"", ")", "\n", "\n", "return", "figure", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.utils.data_utils.make_gif": [[7, 16], ["sorted", "imageio.mimwrite", "images_buffer.append", "gif_folder.glob", "f.is_file", "imageio.imread"], "function", ["None"], ["def", "make_gif", "(", "gif_folder", ",", "save_name", "=", "None", ")", ":", "\n", "    ", "\"\"\" Collects numbered images from folder called \"giffy\" and makes a gif with save_name in output_folder \"\"\"", "\n", "images_buffer", "=", "[", "]", "\n", "for", "filename", "in", "sorted", "(", "[", "f", "for", "f", "in", "(", "gif_folder", ")", ".", "glob", "(", "'**/*'", ")", "if", "f", ".", "is_file", "(", ")", "]", ")", ":", "\n", "        ", "if", "filename", ".", "suffix", "==", "'.png'", ":", "\n", "            ", "images_buffer", ".", "append", "(", "imageio", ".", "imread", "(", "filename", ")", ")", "\n", "", "", "if", "save_name", "is", "None", ":", "\n", "        ", "save_name", "=", "'reconstructed_trajectory'", "\n", "", "imageio", ".", "mimwrite", "(", "gif_folder", ".", "parent", "/", "(", "save_name", "+", "'.gif'", ")", ",", "images_buffer", ",", "fps", "=", "7", ")", "#, format='GIF-FI')", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.utils.data_utils.set_plt_params": [[18, 26], ["None"], "function", ["None"], ["", "def", "set_plt_params", "(", ")", ":", "\n", "    ", "\"\"\"    Sets pyplot parameters    \"\"\"", "\n", "plt", ".", "rcParams", "[", "'figure.figsize'", "]", "=", "[", "12", ",", "9", "]", "\n", "plt", ".", "rcParams", "[", "'lines.markersize'", "]", "=", "8", "\n", "plt", ".", "rcParams", "[", "'axes.labelsize'", "]", "=", "20", "\n", "plt", ".", "rcParams", "[", "'xtick.labelsize'", "]", "=", "25", "\n", "plt", ".", "rcParams", "[", "'ytick.labelsize'", "]", "=", "25", "\n", "plt", ".", "rcParams", "[", "'legend.fontsize'", "]", "=", "20", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.utils.data_utils.set_logger": [[27, 64], ["logging.getLogger", "logging.getLogger.setLevel", "logging.StreamHandler", "logging.StreamHandler.setLevel", "logging.getLogger.addHandler", "pathlib.Path.parent.mkdir", "logging.FileHandler", "logging.FileHandler.setLevel", "logging.getLogger.addHandler", "logging.getLogger.info", "config.sections", "config.has_option", "config.has_option", "pathlib.Path", "logging.getLogger.info", "config.options", "pathlib.Path", "config.get", "pathlib.Path", "logging.getLogger.info", "logging.getLogger.info", "pathlib.Path", "config.get"], "function", ["None"], ["", "def", "set_logger", "(", "config", ",", "id_string", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Sets up and returns a logger object. Using \"log.info\"\n    outputs text to both shell and logfile.\n    :param config: config object from configparser\n    :param id_string: identificative string for logfile\n    :return: log object\n    \"\"\"", "\n", "\n", "if", "config", ".", "has_option", "(", "'Outputs'", ",", "'log_filename'", ")", "and", "config", ".", "has_option", "(", "'Outputs'", ",", "'output_folder'", ")", ":", "\n", "        ", "filename", "=", "Path", "(", "config", "[", "'Outputs'", "]", "[", "'log_filename'", "]", ")", ".", "stem", "+", "\"_\"", "+", "id_string", "+", "Path", "(", "config", "[", "'Outputs'", "]", "[", "'log_filename'", "]", ")", ".", "suffix", "\n", "logfile", "=", "Path", "(", "config", "[", "'Outputs'", "]", "[", "'output_folder'", "]", ")", "/", "filename", "\n", "", "else", ":", "\n", "        ", "logfile", "=", "Path", "(", "'logs/struct_kinematics_'", "+", "id_string", "+", "'.log'", ")", "\n", "", "log", "=", "logging", ".", "getLogger", "(", "'logger'", ")", "\n", "log", ".", "setLevel", "(", "level", "=", "logging", ".", "INFO", ")", "\n", "chandler", "=", "logging", ".", "StreamHandler", "(", ")", "\n", "chandler", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "log", ".", "addHandler", "(", "chandler", ")", "\n", "logfile", ".", "parent", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "fhandler", "=", "logging", ".", "FileHandler", "(", "logfile", ",", "mode", "=", "'w'", ")", "\n", "fhandler", ".", "setLevel", "(", "logging", ".", "INFO", ")", "\n", "log", ".", "addHandler", "(", "fhandler", ")", "\n", "\n", "# Print config file", "\n", "log", ".", "info", "(", "\"\\n\\nConfiguration file for experiment\"", ")", "\n", "for", "section", "in", "config", ".", "sections", "(", ")", ":", "\n", "        ", "log", ".", "info", "(", "f\"\\n{section}\"", ")", "\n", "for", "option", "in", "config", ".", "options", "(", "section", ")", ":", "\n", "            ", "if", "config", ".", "get", "(", "section", ",", "option", ")", ":", "\n", "                ", "log", ".", "info", "(", "f\"{option} = {config.get(section, option)}\"", ")", "\n", "", "else", ":", "\n", "                ", "log", ".", "info", "(", "f\"{option}\"", ")", "\n", "\n", "", "", "", "return", "log", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.utils.data_utils.print_trajectory_results": [[66, 84], ["out", "out", "print", "out", "out", "out", "out", "out"], "function", ["None"], ["", "def", "print_trajectory_results", "(", "alg", ",", "results", ",", "s", ",", "v", ",", "out", ")", ":", "\n", "    ", "\"\"\"Prints a formatted version of one repetition of trajectory reconstruction experiments\"\"\"", "\n", "\n", "out", "(", "f\"Algorithm: {alg}\"", ")", "\n", "if", "alg", "in", "[", "'CRiSP'", ",", "'OC_SVM'", "]", ":", "\n", "        ", "out", "(", "f\"s: {s}\\t v: {v}\"", ")", "\n", "", "if", "results", "[", "'rmse_orientation'", "]", ":", "\n", "        ", "out", "(", "f\"\\t\\tRMSE ori: {results['rmse_orientation']:7.6f} \u00b1 {results['var_orientation']:7.6f}\"", ")", "\n", "", "out", "(", "f\"\\t\\tRMSE pos: {results['rmse_position']:7.6f} \u00b1 {results['var_position']:7.6f}\\n\"", "\n", "f\"\\t\\tRMSE: {results['rmse']:7.6f} \u00b1 {results['var']:7.6f}\"", ")", "\n", "\n", "if", "'bias_error'", "in", "results", ":", "\n", "        ", "out", "(", "\"#Biased model results#\"", ")", "\n", "if", "results", "[", "'bias_error'", "]", "[", "'rmse_orientation'", "]", ":", "\n", "            ", "out", "(", "f\"\\t\\tRMSE ori: {results['bias_error']['rmse_orientation']:7.6f} \u00b1 {results['bias_error']['var_orientation']:7.6f}\"", ")", "\n", "", "out", "(", "f\"\\t\\tRMSE pos: {results['bias_error']['rmse_position']:7.6f} \u00b1 {results['bias_error']['var_position']:7.6f}\\n\"", "\n", "f\"\\t\\tRMSE: {results['bias_error']['rmse']:7.6f} \u00b1 {results['bias_error']['var']:7.6f}\\n\"", ")", "\n", "", "print", "(", "\"\"", ")", "", "", ""]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.utils.panda_utils.generate_circumference": [[6, 21], ["numpy.linspace", "numpy.zeros", "numpy.cos", "numpy.sin", "numpy.radians", "numpy.radians"], "function", ["None"], ["def", "generate_circumference", "(", "center", ",", "radius", ",", "num_points", ")", ":", "\n", "    ", "\"\"\"\n    Generates a circle trajectory\n    :param center: coordinates of circumference center\n    :param radius: circumference radius\n    :param num_points: number of points in the trajectory\n    :return: a ndarray with the trajectory of points\n    \"\"\"", "\n", "theta_z", "=", "np", ".", "linspace", "(", "0", ",", "360", ",", "num", "=", "num_points", ")", "\n", "Circle", "=", "np", ".", "zeros", "(", "(", "num_points", ",", "3", ")", ")", "\n", "Circle", "[", ":", ",", "0", "]", "=", "center", "[", "0", "]", "+", "radius", "*", "np", ".", "cos", "(", "np", ".", "radians", "(", "theta_z", ")", ")", "\n", "Circle", "[", ":", ",", "1", "]", "=", "center", "[", "1", "]", "+", "radius", "*", "np", ".", "sin", "(", "np", ".", "radians", "(", "theta_z", ")", ")", "\n", "Circle", "[", ":", ",", "2", "]", "=", "center", "[", "2", "]", "\n", "\n", "return", "Circle", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.utils.panda_utils.generate_noisy_circumference_samples": [[22, 55], ["numpy.zeros", "numpy.random.default_rng", "range", "numpy.random.default_rng.uniform", "numpy.random.default_rng.uniform", "numpy.sqrt", "numpy.random.default_rng.uniform", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.sin", "numpy.cos", "numpy.cos"], "function", ["None"], ["", "def", "generate_noisy_circumference_samples", "(", "center", ",", "radius1", ",", "radius2", ",", "num_points", ")", ":", "\n", "    ", "\"\"\"\n    Generates a circle trajectory\n    :param center: coordinates of circumference center\n    :param radius1: Main circumference radius\n    :param radius2: small torus radius\n    :param num_points: number of points to sample\n    :return: a ndarray with the trajectory of points\n    \"\"\"", "\n", "\n", "sample", "=", "np", ".", "zeros", "(", "(", "num_points", ",", "3", ")", ")", "\n", "\n", "# Initialize random number generator", "\n", "rng", "=", "default_rng", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_points", ")", ":", "\n", "\n", "# Uniformly sample joint_ranges", "\n", "        ", "theta1", "=", "rng", ".", "uniform", "(", "0", ",", "2", "*", "np", ".", "pi", ",", "1", ")", "\n", "theta2", "=", "rng", ".", "uniform", "(", "0", ",", "2", "*", "np", ".", "pi", ",", "1", ")", "\n", "r", "=", "radius2", "*", "np", ".", "sqrt", "(", "rng", ".", "uniform", "(", "0", ",", "1", ",", "1", ")", ")", "\n", "\n", "# Sample on main circumference", "\n", "sample", "[", "i", ",", "0", "]", "=", "center", "[", "0", "]", "+", "radius1", "*", "np", ".", "cos", "(", "theta1", ")", "\n", "sample", "[", "i", ",", "1", "]", "=", "center", "[", "1", "]", "+", "radius1", "*", "np", ".", "sin", "(", "theta1", ")", "\n", "sample", "[", "i", ",", "2", "]", "=", "center", "[", "2", "]", "\n", "\n", "# Add torus noise (see https://stackoverflow.com/a/50746409)", "\n", "sample", "[", "i", ",", "0", "]", "=", "sample", "[", "i", ",", "0", "]", "+", "r", "*", "np", ".", "cos", "(", "theta2", ")", "*", "np", ".", "cos", "(", "theta1", ")", "\n", "sample", "[", "i", ",", "1", "]", "=", "sample", "[", "i", ",", "1", "]", "+", "r", "*", "np", ".", "cos", "(", "theta2", ")", "*", "np", ".", "sin", "(", "theta1", ")", "\n", "sample", "[", "i", ",", "2", "]", "=", "sample", "[", "i", ",", "2", "]", "+", "r", "*", "np", ".", "sin", "(", "theta2", ")", "\n", "\n", "", "return", "sample", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.utils.panda_utils.generate_spiral": [[56, 75], ["numpy.linspace", "numpy.zeros", "numpy.concatenate", "numpy.cos", "numpy.sin", "numpy.linspace", "numpy.linspace", "numpy.radians", "numpy.radians", "math.floor", "math.ceil"], "function", ["None"], ["", "def", "generate_spiral", "(", "center", ",", "radius", ",", "theta_max", ",", "height", ",", "num_points", ")", ":", "\n", "    ", "\"\"\"\n    Generates a spiral trajectory\n    :param center: coordinates of the center of the containing cylinder\n    :param radius: spiral radius\n    :param theta_max: maximum angle of the spiral trajectory (0, +inf)\n    :param height: height of the spiral along z\n    :param num_points: number of points in the trajectory\n    :return: a ndarray with the trajectory of points\n    \"\"\"", "\n", "theta_z", "=", "np", ".", "linspace", "(", "0", ",", "theta_max", ",", "num", "=", "num_points", ")", "\n", "\n", "spiral", "=", "np", ".", "zeros", "(", "(", "num_points", ",", "3", ")", ")", "\n", "spiral", "[", ":", ",", "0", "]", "=", "center", "[", "0", "]", "+", "radius", "*", "np", ".", "cos", "(", "np", ".", "radians", "(", "theta_z", ")", ")", "\n", "spiral", "[", ":", ",", "1", "]", "=", "center", "[", "1", "]", "+", "radius", "*", "np", ".", "sin", "(", "np", ".", "radians", "(", "theta_z", ")", ")", "\n", "spiral", "[", ":", ",", "2", "]", "=", "np", ".", "concatenate", "(", "(", "np", ".", "linspace", "(", "center", "[", "2", "]", "-", "height", "/", "2.0", ",", "center", "[", "2", "]", "+", "height", "/", "2.0", ",", "math", ".", "floor", "(", "num_points", "/", "2", ")", ")", ",", "\n", "np", ".", "linspace", "(", "center", "[", "2", "]", "+", "height", "/", "2.0", ",", "center", "[", "2", "]", "-", "height", "/", "2.0", ",", "math", ".", "ceil", "(", "num_points", "/", "2", ")", ")", ")", ")", "\n", "\n", "return", "spiral", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.utils.panda_utils.generate_8_shape": [[77, 90], ["numpy.linspace", "numpy.ones", "numpy.vstack", "numpy.cos", "numpy.sin", "numpy.sin"], "function", ["None"], ["", "def", "generate_8_shape", "(", "center", ",", "radius", ",", "num_points", ")", ":", "\n", "    ", "\"\"\"\n    Generates an eight-like  trajectory\n    :param center: coordinates of shape center\n    :param radius: shape radius\n    :param num_points: number of points in the trajectory\n    :return: a ndarray with the trajectory of points\n    \"\"\"", "\n", "t", "=", "np", ".", "linspace", "(", "0", ",", "2", "*", "np", ".", "pi", ",", "num_points", ")", "\n", "z", "=", "center", "[", "2", "]", "*", "np", ".", "ones", "(", "num_points", ")", "\n", "return", "np", ".", "vstack", "(", "(", "radius", "*", "np", ".", "sin", "(", "t", ")", "*", "np", ".", "cos", "(", "t", ")", "+", "center", "[", "0", "]", ",", "\n", "radius", "*", "np", ".", "sin", "(", "t", ")", "+", "center", "[", "1", "]", ",", "\n", "z", "\n", ")", ")", ".", "T", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.utils.panda_utils.sqdist": [[93, 126], ["numpy.squeeze", "numpy.squeeze", "numpy.squeeze", "numpy.maximum", "isinstance", "numpy.array", "isinstance", "numpy.array", "numpy.array", "numpy.sum", "numpy.array", "numpy.sum", "numpy.outer", "numpy.outer", "numpy.zeros", "numpy.multiply", "numpy.multiply", "numpy.ones", "numpy.ones", "numpy.dot"], "function", ["None"], ["", "def", "sqdist", "(", "X1", ",", "X2", ")", ":", "\n", "    ", "\"\"\" Given two matrices whose rows are points, computes the distances\n    between all the points of the first matrix and all the points of the\n    second matrix\n    Arguments:\n    X1: [N1 x d], earch row is a d-dimensional point\n    X2: [N2 x d], each row is a d-dimensional point\n    Returns:\n    M: [N1 x N2], each element  is the distance between two points\n    M_ij = || X1_i - X2_j ||\"\"\"", "\n", "\n", "if", "not", "isinstance", "(", "X1", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "X1", "=", "np", ".", "array", "(", "X1", ")", "\n", "", "if", "not", "isinstance", "(", "X2", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "X2", "=", "np", ".", "array", "(", "X2", ")", "\n", "", "if", "X1", ".", "ndim", "<=", "1", ":", "\n", "        ", "sqx", "=", "np", ".", "array", "(", "X1", "*", "X1", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "rows_X1", "=", "1", "\n", "", "else", ":", "\n", "        ", "sqx", "=", "np", ".", "sum", "(", "np", ".", "multiply", "(", "X1", ",", "X1", ")", ",", "1", ")", "\n", "rows_X1", "=", "sqx", ".", "shape", "[", "0", "]", "\n", "\n", "", "if", "X2", ".", "ndim", "<=", "1", ":", "\n", "        ", "sqy", "=", "np", ".", "array", "(", "X2", "*", "X2", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "rows_X2", "=", "1", "\n", "", "else", ":", "\n", "        ", "sqy", "=", "np", ".", "sum", "(", "np", ".", "multiply", "(", "X2", ",", "X2", ")", ",", "1", ")", "\n", "rows_X2", "=", "sqy", ".", "shape", "[", "0", "]", "\n", "", "X1_squares", "=", "np", ".", "squeeze", "(", "np", ".", "outer", "(", "np", ".", "ones", "(", "rows_X1", ")", ",", "sqy", ".", "T", ")", ")", "\n", "X2_squares", "=", "np", ".", "squeeze", "(", "np", ".", "outer", "(", "sqx", ",", "np", ".", "ones", "(", "rows_X2", ")", ")", ")", "\n", "double_prod", "=", "np", ".", "squeeze", "(", "2", "*", "np", ".", "dot", "(", "X1", ",", "X2", ".", "T", ")", ")", "\n", "\n", "return", "np", ".", "maximum", "(", "X1_squares", "+", "X2_squares", "-", "double_prod", ",", "np", ".", "zeros", "(", "X1_squares", ".", "shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.utils.panda_utils.check_joint_limits_respected": [[127, 148], ["len", "range", "len", "len", "len"], "function", ["None"], ["", "def", "check_joint_limits_respected", "(", "lower_joint_limits", ",", "upper_joint_limits", ",", "joints_configuration_query", ")", ":", "\n", "    ", "\"\"\"\n    Generates a circle trajectory\n    :param lower_joint_limits: upper joint limits\n    :param upper_joint_limits: lower joint limits\n    :param joints_configuration_query: joints configuration to be checked\n    :return: True if respected, False otherwise\n    \"\"\"", "\n", "\n", "# Check list sizes match", "\n", "assert", "len", "(", "lower_joint_limits", ")", "==", "len", "(", "upper_joint_limits", ")", "==", "len", "(", "joints_configuration_query", ")", "\n", "\n", "size", "=", "len", "(", "lower_joint_limits", ")", "\n", "\n", "is_ok", "=", "True", "\n", "for", "i", "in", "range", "(", "size", ")", ":", "\n", "        ", "is_ok", "=", "lower_joint_limits", "[", "i", "]", "<=", "joints_configuration_query", "[", "i", "]", "<=", "upper_joint_limits", "[", "i", "]", "\n", "if", "not", "is_ok", ":", "\n", "            ", "break", "\n", "\n", "", "", "return", "is_ok", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.utils.panda_utils.compute_rmse": [[150, 178], ["range", "numpy.sqrt", "numpy.linalg.norm"], "function", ["None"], ["", "def", "compute_rmse", "(", "trajectory_1", ",", "trajectory_2", ")", ":", "\n", "\n", "    ", "if", "trajectory_1", ".", "ndim", "==", "2", "and", "trajectory_2", ".", "ndim", "==", "2", ":", "\n", "        ", "m1", "=", "trajectory_1", ".", "shape", "[", "0", "]", "\n", "m2", "=", "trajectory_2", ".", "shape", "[", "0", "]", "\n", "assert", "m1", "==", "m2", "\n", "", "elif", "trajectory_1", ".", "ndim", "==", "1", "and", "trajectory_2", ".", "ndim", "==", "1", ":", "\n", "        ", "m1", "=", "1", "\n", "assert", "trajectory_1", ".", "shape", "[", "0", "]", "==", "trajectory_2", ".", "shape", "[", "0", "]", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "nan", "\n", "\n", "\n", "", "mse", "=", "0", "\n", "\n", "for", "i", "in", "range", "(", "m1", ")", ":", "\n", "        ", "mse", "+=", "np", ".", "linalg", ".", "norm", "(", "trajectory_1", "[", "i", "]", "-", "trajectory_2", "[", "i", "]", ")", "**", "2", "\n", "\n", "", "mse", "/=", "m1", "\n", "\n", "rmse", "=", "np", ".", "sqrt", "(", "mse", ")", "\n", "\n", "# TODO: vectorized form", "\n", "# error = np.linalg.norm(trajectory_1 - trajectory_2)", "\n", "# mse = np.sqrt(np.mean(np.sum(error ** 2))", "\n", "#               )", "\n", "\n", "return", "rmse", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.utils.panda_utils.predict_panda_trajectory_CRiSP": [[180, 221], ["invert_kin", "forward", "numpy.full", "numpy.sqrt", "numpy.sqrt", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "out", "out", "out", "out", "out", "crisp.utils.planar_utils.radial_squared_error", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.linalg.norm"], "function", ["home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.NN.fc_nn.forward", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.utils.planar_utils.radial_squared_error"], ["", "def", "predict_panda_trajectory_CRiSP", "(", "xte", ",", "invert_kin", ",", "forward", ",", "out", ",", "s", ",", "v", ",", "alg", ")", ":", "\n", "\n", "    ", "predictions", ",", "data", "=", "invert_kin", "(", "xte", ",", "is_sequence", "=", "True", ")", "\n", "\n", "# Compare results on test set", "\n", "reconstructed", "=", "forward", "(", "predictions", ")", "\n", "error", "=", "np", ".", "full", "(", "(", "xte", ".", "shape", ")", ",", "np", ".", "inf", ")", "\n", "\n", "error", "[", ":", ",", ":", "3", "]", "=", "np", ".", "sqrt", "(", "(", "reconstructed", "[", ":", ",", ":", "3", "]", "-", "xte", "[", ":", ",", ":", "3", "]", ")", "**", "2", ")", "\n", "error", "[", ":", ",", "3", ":", "]", "=", "np", ".", "sqrt", "(", "radial_squared_error", "(", "reconstructed", "[", ":", ",", "3", ":", "]", ",", "xte", "[", ":", ",", "3", ":", "]", ")", ")", "\n", "\n", "rmse_orientation", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "error", "[", ":", ",", "3", ":", "]", ",", "axis", "=", "1", ")", ")", "\n", "var_orientation", "=", "np", ".", "std", "(", "np", ".", "sum", "(", "error", "[", ":", ",", "3", ":", "]", ",", "axis", "=", "1", ")", ")", "\n", "\n", "rmse_position", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "error", "[", ":", ",", ":", "3", "]", ",", "axis", "=", "1", ")", ")", "\n", "var_position", "=", "np", ".", "std", "(", "np", ".", "sum", "(", "error", "[", ":", ",", ":", "3", "]", ",", "axis", "=", "1", ")", ")", "\n", "\n", "rmse", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "error", ",", "axis", "=", "1", ")", ")", "\n", "var", "=", "np", ".", "std", "(", "np", ".", "sum", "(", "error", ",", "axis", "=", "1", ")", ")", "\n", "\n", "out", "(", "f\"\\nAlgorithm: {alg}\"", ")", "\n", "results", "=", "{", "'rmse_orientation'", ":", "rmse_orientation", ",", "\n", "'var_orientation'", ":", "var_orientation", ",", "\n", "'rmse_position'", ":", "rmse_position", ",", "\n", "'var_position'", ":", "var_position", ",", "\n", "'rmse'", ":", "rmse", ",", "\n", "'var'", ":", "var", ",", "\n", "'xte'", ":", "xte", ",", "\n", "'alpha'", ":", "data", "[", "'alpha'", "]", ",", "\n", "'Kx'", ":", "data", "[", "'Kx'", "]", ",", "\n", "'trajectory_pos'", ":", "reconstructed", "[", ":", ",", ":", "3", "]", ",", "\n", "'trajectory_orn'", ":", "reconstructed", "[", ":", ",", "3", ":", "]", ",", "\n", "'trajectory_joints_pred_CRiSP'", ":", "predictions", "}", "\n", "\n", "out", "(", "f\"s: {s}\\t v: {v}\"", ")", "\n", "out", "(", "f\"\\t\\tRMSE ori: {results['rmse_orientation']:7.6f} \u00b1 {results['var_orientation']:7.6f}\"", ")", "\n", "out", "(", "f\"\\t\\tRMSE pos: {results['rmse_position']:7.6f} \u00b1 {results['var_position']:7.6f}\\n\"", "\n", "f\"\\t\\tRMSE: {results['rmse']:7.6f} \u00b1 {results['var']:7.6f}\"", ")", "\n", "out", "(", "f\"Norm of alphas = {np.linalg.norm(data['alpha'])}\"", ")", "\n", "\n", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.utils.panda_utils.predict_panda_trajectory_PB": [[222, 255], ["invert_kin", "forward", "numpy.full", "numpy.sqrt", "numpy.sqrt", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "out", "out", "out", "crisp.utils.planar_utils.radial_squared_error", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.NN.fc_nn.forward", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.utils.planar_utils.radial_squared_error"], ["", "def", "predict_panda_trajectory_PB", "(", "xte", ",", "invert_kin", ",", "forward", ",", "out", ",", "s", ",", "v", ",", "alg", ")", ":", "\n", "\n", "    ", "predictions", "=", "invert_kin", "(", "xte", ")", "\n", "\n", "# Compare results on test set", "\n", "reconstructed", "=", "forward", "(", "predictions", ")", "\n", "error", "=", "np", ".", "full", "(", "(", "xte", ".", "shape", ")", ",", "np", ".", "inf", ")", "\n", "\n", "error", "[", ":", ",", ":", "3", "]", "=", "np", ".", "sqrt", "(", "(", "reconstructed", "[", ":", ",", ":", "3", "]", "-", "xte", "[", ":", ",", ":", "3", "]", ")", "**", "2", ")", "\n", "error", "[", ":", ",", "3", ":", "]", "=", "np", ".", "sqrt", "(", "radial_squared_error", "(", "reconstructed", "[", ":", ",", "3", ":", "]", ",", "xte", "[", ":", ",", "3", ":", "]", ")", ")", "\n", "\n", "rmse_orientation", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "error", "[", ":", ",", "3", ":", "]", ",", "axis", "=", "1", ")", ")", "\n", "var_orientation", "=", "np", ".", "std", "(", "np", ".", "sum", "(", "error", "[", ":", ",", "3", ":", "]", ",", "axis", "=", "1", ")", ")", "\n", "\n", "rmse_position", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "error", "[", ":", ",", ":", "3", "]", ",", "axis", "=", "1", ")", ")", "\n", "var_position", "=", "np", ".", "std", "(", "np", ".", "sum", "(", "error", "[", ":", ",", ":", "3", "]", ",", "axis", "=", "1", ")", ")", "\n", "\n", "rmse", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "error", ",", "axis", "=", "1", ")", ")", "\n", "var", "=", "np", ".", "std", "(", "np", ".", "sum", "(", "error", ",", "axis", "=", "1", ")", ")", "\n", "\n", "out", "(", "f\"\\nAlgorithm: PyBullet Inverse Kinematics\"", ")", "\n", "results", "=", "{", "'rmse_orientation'", ":", "rmse_orientation", ",", "'var_orientation'", ":", "var_orientation", ",", "\n", "'rmse_position'", ":", "rmse_position", ",", "'var_position'", ":", "var_position", ",", "\n", "'rmse'", ":", "rmse", ",", "'var'", ":", "var", ",", "'xte'", ":", "xte", ",", "'predictions'", ":", "predictions", ",", "\n", "'trajectory_PyBullet_IK_reference_joints'", ":", "predictions", ",", "\n", "'trajectory_pos_ikpb'", ":", "reconstructed", "[", ":", ",", ":", "3", "]", ",", "\n", "'trajectory_orn_ikpb'", ":", "reconstructed", "[", ":", ",", "3", ":", "]", ",", "\n", "}", "\n", "out", "(", "f\"\\t\\tRMSE ori: {results['rmse_orientation']:7.6f} \u00b1 {results['var_orientation']:7.6f}\"", ")", "\n", "out", "(", "f\"\\t\\tRMSE pos: {results['rmse_position']:7.6f} \u00b1 {results['var_position']:7.6f}\\n\"", "\n", "f\"\\t\\tRMSE: {results['rmse']:7.6f} \u00b1 {results['var']:7.6f}\"", ")", "\n", "\n", "return", "results", "\n", "", ""]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.utils.planar_utils.generate_circle": [[6, 28], ["numpy.linspace", "numpy.zeros", "numpy.cos", "numpy.sin", "numpy.sin"], "function", ["None"], ["def", "generate_circle", "(", "cx", ",", "cy", ",", "num_points", ",", "r", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Generates a circle trajectory\n    :param cx: x coordinate of center\n    :param cy: y coordinate of center\n    :param r: radius\n    :param num_points: number of points in the trajectory\n    :return: a ndarray with the trajectory of points\n    \"\"\"", "\n", "if", "r", "is", "None", ":", "\n", "        ", "r", "=", "1", "\n", "", "theta_z", "=", "np", ".", "linspace", "(", "0", ",", "2", "*", "np", ".", "pi", ",", "num", "=", "num_points", ")", "\n", "Circle", "=", "np", ".", "zeros", "(", "(", "num_points", ",", "3", ")", ")", "\n", "Circle", "[", ":", ",", "0", "]", "=", "cx", "+", "r", "*", "np", ".", "cos", "(", "theta_z", ")", "\n", "Circle", "[", ":", ",", "1", "]", "=", "cy", "+", "r", "*", "np", ".", "sin", "(", "theta_z", ")", "\n", "Circle", "[", ":", ",", "2", "]", "=", "np", ".", "pi", "/", "8", "*", "np", ".", "sin", "(", "theta_z", ")", "-", "np", ".", "pi", "/", "2", "#+ 0.1", "\n", "# Circle[:, 2] = np.hstack([np.linspace(0, 60, num_points // 4),", "\n", "#                           np.linspace(60, 5, num_points // 4),", "\n", "#                           np.linspace(5, -30, num_points // 4),", "\n", "#                           np.linspace(-30, 0, num_points // 4)])", "\n", "\n", "return", "Circle", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.utils.planar_utils.generate_8": [[30, 55], ["numpy.linspace", "numpy.vstack", "numpy.array", "numpy.ones", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.sin", "numpy.sin"], "function", ["None"], ["", "def", "generate_8", "(", "cx", ",", "cy", ",", "num_points", ",", "scale", "=", "None", ",", "rotation", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Generates an eight-like  trajectory\n    :param cx: x coordinate of center\n    :param cy: y coordinate of center\n    :param r: radius\n    :param num_points: number of points in the trajectory\n    :return: a ndarray with the trajectory of points\n    \"\"\"", "\n", "if", "scale", "is", "None", ":", "\n", "        ", "scale", "=", "1", "\n", "", "t", "=", "np", ".", "linspace", "(", "0", ",", "2", "*", "np", ".", "pi", ",", "num_points", ")", "\n", "trajectory", "=", "np", ".", "vstack", "(", "(", "scale", "*", "np", ".", "sin", "(", "t", ")", "*", "np", ".", "cos", "(", "t", ")", "+", "cx", ",", "\n", "scale", "*", "np", ".", "sin", "(", "t", ")", "+", "cy", ",", "\n", "# 0.20 * np.arctan2(np.sin(t)*np.cos(t) + cx, scale * np.sin(t) + cy)", "\n", "0.2", "*", "np", ".", "ones", "(", "num_points", ")", "\n", ")", ")", ".", "T", "\n", "if", "rotation", ":", "\n", "# rotations in anticlockwise sense", "\n", "        ", "rot_matrix", "=", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "rotation", ")", ",", "-", "np", ".", "sin", "(", "rotation", ")", "]", ",", "\n", "[", "np", ".", "sin", "(", "rotation", ")", ",", "np", ".", "cos", "(", "rotation", ")", "]", "]", ")", "\n", "trajectory", "[", ":", ",", ":", "2", "]", "=", "(", "rot_matrix", "@", "trajectory", "[", ":", ",", ":", "2", "]", ".", "T", ")", ".", "T", "\n", "# trajectory[:, 2] += rotation", "\n", "\n", "", "return", "trajectory", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.utils.planar_utils.predict_panda_trajectory": [[57, 83], ["model.predict", "forward", "numpy.full", "numpy.sqrt", "numpy.sqrt", "numpy.mean", "numpy.std", "numpy.std", "numpy.mean", "numpy.mean", "numpy.std", "out", "out", "out", "out", "out", "planar_utils.radial_squared_error", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.linalg.norm"], "function", ["home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.NN.fc_nn.predict", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.NN.fc_nn.forward", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.utils.planar_utils.radial_squared_error"], ["", "def", "predict_panda_trajectory", "(", "xte", ",", "model", ",", "forward", ",", "out", ",", "s", ",", "v", ",", "alg", ")", ":", "\n", "    ", "predictions", ",", "data", "=", "model", ".", "predict", "(", "xte", ",", "is_sequence", "=", "False", ")", "\n", "\n", "# Compare results on test set", "\n", "reconstructed", "=", "forward", "(", "predictions", ")", "\n", "error", "=", "np", ".", "full", "(", "(", "xte", ".", "shape", ")", ",", "np", ".", "inf", ")", "\n", "\n", "error", "[", ":", ",", ":", "3", "]", "=", "np", ".", "sqrt", "(", "(", "reconstructed", "[", ":", ",", ":", "3", "]", "-", "xte", "[", ":", ",", ":", "3", "]", ")", "**", "2", ")", "\n", "error", "[", ":", ",", "3", ":", "]", "=", "np", ".", "sqrt", "(", "radial_squared_error", "(", "reconstructed", "[", ":", ",", "3", ":", "]", ",", "xte", "[", ":", ",", "3", ":", "]", ")", ")", "\n", "rmse_orientation", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "error", "[", ":", ",", "3", ":", "]", ",", "axis", "=", "1", ")", ")", "\n", "var_orientation", "=", "np", ".", "std", "(", "np", ".", "sum", "(", "error", "[", ":", ",", "3", ":", "]", ",", "axis", "=", "1", ")", ")", "\n", "var_position", "=", "np", ".", "std", "(", "np", ".", "sum", "(", "error", "[", ":", ",", ":", "3", "]", ",", "axis", "=", "1", ")", ")", "\n", "rmse_position", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "error", "[", ":", ",", ":", "3", "]", ",", "axis", "=", "1", ")", ")", "\n", "rmse", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "error", ",", "axis", "=", "1", ")", ")", "\n", "var", "=", "np", ".", "std", "(", "np", ".", "sum", "(", "error", ",", "axis", "=", "1", ")", ")", "\n", "results", "=", "{", "'rmse_orientation'", ":", "rmse_orientation", ",", "'var_orientation'", ":", "var_orientation", ",", "\n", "'rmse_position'", ":", "rmse_position", ",", "'var_position'", ":", "var_position", ",", "\n", "'rmse'", ":", "rmse", ",", "'var'", ":", "var", ",", "'predictions'", ":", "predictions", "}", "\n", "\n", "out", "(", "f\"s: {s}\\t v: {v}\"", ")", "\n", "out", "(", "f\"\\t\\tRMSE ori: {results['rmse_orientation']:7.6f} \u00b1 {results['var_orientation']:7.6f}\"", ")", "\n", "out", "(", "f\"\\t\\tRMSE pos: {results['rmse_position']:7.6f} \u00b1 {results['var_position']:7.6f}\\n\"", "\n", "f\"\\t\\tRMSE: {results['rmse']:7.6f} \u00b1 {results['var']:7.6f}\"", ")", "\n", "out", "(", "f\"Norm of alphas = {np.linalg.norm(data['alpha'])}\"", ")", "\n", "\n", "out", "(", "f\"Algorithm: {alg}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.utils.planar_utils.print_avg_distances_on_dataset": [[84, 146], ["numpy.sqrt", "numpy.sort", "out", "planar_utils.print_avg_distances_on_dataset.print_stats"], "function", ["None"], ["", "def", "print_avg_distances_on_dataset", "(", "X1", ",", "X2", ",", "output_folder", ",", "dimensions", "=", "None", ",", "\n", "plot_hist", "=", "False", ",", "\n", "savename", "=", "None", ",", "\n", "out", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Plots statistics on daa distances\n    :param X1: First matrix of points\n    :param X2: Second matrix of points\n    :param output_folder: output folder where to save data\n    :param dimensions: spatial dimensionality of data: 2D or 3D (excluding orientation)\n    :param savename: savename of the pictures\n    \"\"\"", "\n", "\n", "if", "savename", "is", "None", ":", "\n", "        ", "savename", "=", "'hists'", "\n", "", "if", "out", "is", "None", ":", "\n", "        ", "out", "=", "print", "\n", "\n", "", "(", "output_folder", "/", "\"hists\"", ")", ".", "mkdir", "(", "parents", "=", "True", ",", "exist_ok", "=", "True", ")", "\n", "\n", "def", "print_stats", "(", "D", ")", ":", "\n", "        ", "out", "(", "f\"Avg distance 5th nearest neighbour: {np.mean(D_sorted[:, 5]):.5f}  \u00b1 {np.std(D_sorted[:, 5]):.5f}\\n\"", "\n", "f\"Avg distance 10th nearest neighbour: {np.mean(D_sorted[:, 10]):.5f}  \u00b1 {np.std(D_sorted[:, 10]):.5f}\\n\"", "\n", "f\"Avg distance 20th nearest neighbour: {np.mean(D_sorted[:, 20]):.5f}  \u00b1 {np.std(D_sorted[:, 20]):.5f}\\n\"", "\n", "f\"Mean distance: {np.mean(D[D > 0]):.5f} \u00b1 {np.std(D[D > 0]):.5f}\\n\"", "\n", "f\"Median distance: {np.median(D[D > 0]):.5f}\\n\"", "\n", "f\"Avg Min distance: {np.mean(D_sorted[:, 1]):.5f} \u00b1 {np.std(D_sorted[:, 1]):.5f}\\n\"", "\n", "f\"Avg Max distance: {np.mean(D_sorted[:, -1]):.5f} \u00b1 {np.std(D_sorted[:, -1]):.5f}\\n\"", ")", "\n", "\n", "", "if", "X2", "is", "None", ":", "\n", "        ", "X2", "=", "X1", "\n", "\n", "", "DD", "=", "{", "}", "\n", "D", "=", "np", ".", "sqrt", "(", "sqdist", "(", "X1", ",", "X2", ")", ")", "\n", "D_sorted", "=", "np", ".", "sort", "(", "D", ",", "axis", "=", "1", ")", "\n", "out", "(", "f\"## Overall Distances ##\"", ")", "\n", "print_stats", "(", "D_sorted", ")", "\n", "DD", "[", "'Overall'", "]", "=", "D", "\n", "\n", "if", "dimensions", "is", "not", "None", ":", "\n", "        ", "D_pos", "=", "np", ".", "sqrt", "(", "sqdist", "(", "X1", "[", ":", ",", ":", "dimensions", "]", ",", "X2", "[", ":", ",", ":", "dimensions", "]", ")", ")", "\n", "D_sorted", "=", "np", ".", "sort", "(", "D_pos", ",", "axis", "=", "1", ")", "\n", "out", "(", "f\"## Position distances ##\"", ")", "\n", "print_stats", "(", "D_sorted", ")", "\n", "DD", "[", "'Position'", "]", "=", "D_pos", "\n", "\n", "D_ori", "=", "np", ".", "sqrt", "(", "sqdist", "(", "X1", "[", ":", ",", "dimensions", ":", "]", ",", "X2", "[", ":", ",", "dimensions", ":", "]", ")", ")", "\n", "D_sorted", "=", "np", ".", "sort", "(", "D_ori", ",", "axis", "=", "1", ")", "\n", "out", "(", "f\"## Orientation distances ##\"", ")", "\n", "print_stats", "(", "D_sorted", ")", "\n", "DD", "[", "'Orientation'", "]", "=", "D_ori", "\n", "\n", "", "if", "plot_hist", ":", "\n", "        ", "hists", ",", "axes", "=", "plt", ".", "subplots", "(", "3", ",", "1", ")", "\n", "# hists.xticks(fontsize=10)", "\n", "# hists.yticks(fontsize=10)", "\n", "for", "d", ",", "(", "name", ",", "dists", ")", "in", "enumerate", "(", "DD", ".", "items", "(", ")", ")", ":", "\n", "            ", "axes", "[", "d", "]", ".", "hist", "(", "dists", ".", "flatten", "(", ")", ",", "color", "=", "'skyblue'", ")", "\n", "axes", "[", "d", "]", ".", "set_title", "(", "f\"{name}\"", ")", "\n", "axes", "[", "d", "]", ".", "tick_params", "(", "axis", "=", "'both'", ",", "labelsize", "=", "8", ")", "\n", "", "plt", ".", "savefig", "(", "output_folder", "/", "'hists'", "/", "f\"{savename}\"", ")", "\n", "plt", ".", "close", "(", "hists", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.utils.planar_utils.sqdist": [[149, 182], ["numpy.squeeze", "numpy.squeeze", "numpy.squeeze", "numpy.maximum", "isinstance", "numpy.array", "isinstance", "numpy.array", "numpy.array", "numpy.sum", "numpy.array", "numpy.sum", "numpy.outer", "numpy.outer", "numpy.zeros", "numpy.multiply", "numpy.multiply", "numpy.ones", "numpy.ones", "numpy.dot"], "function", ["None"], ["", "", "def", "sqdist", "(", "X1", ",", "X2", ")", ":", "\n", "    ", "\"\"\" Given two matrices whose rows are points, computes the distances\n    between all the points of the first matrix and all the points of the\n    second matrix\n    Arguments:\n    X1: [N1 x d], earch row is a d-dimensional point\n    X2: [N2 x d], each row is a d-dimensional point\n    Returns:\n    M: [N1 x N2], each element  is the distance between two points\n    M_ij = || X1_i - X2_j ||\"\"\"", "\n", "\n", "if", "not", "isinstance", "(", "X1", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "X1", "=", "np", ".", "array", "(", "X1", ")", "\n", "", "if", "not", "isinstance", "(", "X2", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "X2", "=", "np", ".", "array", "(", "X2", ")", "\n", "", "if", "X1", ".", "ndim", "<=", "1", ":", "\n", "        ", "sqx", "=", "np", ".", "array", "(", "X1", "*", "X1", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "rows_X1", "=", "1", "\n", "", "else", ":", "\n", "        ", "sqx", "=", "np", ".", "sum", "(", "np", ".", "multiply", "(", "X1", ",", "X1", ")", ",", "1", ")", "\n", "rows_X1", "=", "sqx", ".", "shape", "[", "0", "]", "\n", "\n", "", "if", "X2", ".", "ndim", "<=", "1", ":", "\n", "        ", "sqy", "=", "np", ".", "array", "(", "X2", "*", "X2", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "rows_X2", "=", "1", "\n", "", "else", ":", "\n", "        ", "sqy", "=", "np", ".", "sum", "(", "np", ".", "multiply", "(", "X2", ",", "X2", ")", ",", "1", ")", "\n", "rows_X2", "=", "sqy", ".", "shape", "[", "0", "]", "\n", "", "X1_squares", "=", "np", ".", "squeeze", "(", "np", ".", "outer", "(", "np", ".", "ones", "(", "rows_X1", ")", ",", "sqy", ".", "T", ")", ")", "\n", "X2_squares", "=", "np", ".", "squeeze", "(", "np", ".", "outer", "(", "sqx", ",", "np", ".", "ones", "(", "rows_X2", ")", ")", ")", "\n", "double_prod", "=", "np", ".", "squeeze", "(", "2", "*", "np", ".", "dot", "(", "X1", ",", "X2", ".", "T", ")", ")", "\n", "\n", "return", "np", ".", "maximum", "(", "X1_squares", "+", "X2_squares", "-", "double_prod", ",", "np", ".", "zeros", "(", "X1_squares", ".", "shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.utils.planar_utils.radial_squared_error": [[183, 190], ["isinstance", "isinstance", "numpy.amin", "numpy.abs", "numpy.abs"], "function", ["None"], ["", "def", "radial_squared_error", "(", "Y1", ",", "Y2", ")", ":", "\n", "    ", "\"\"\"Computes radial distance dimension-wise between two matrices of radial points [N1 x d] and [N2 x d],\n    where N1 and N2 are the number of points\"\"\"", "\n", "assert", "isinstance", "(", "Y1", ",", "np", ".", "ndarray", ")", ",", "\"radial_squared_error(): please provide a ndarray\"", "\n", "assert", "isinstance", "(", "Y2", ",", "np", ".", "ndarray", ")", ",", "\"radial_squared_error(): please provide a ndarray\"", "\n", "\n", "return", "np", ".", "amin", "(", "[", "np", ".", "abs", "(", "Y1", "-", "Y2", ")", ",", "2", "*", "np", ".", "pi", "-", "np", ".", "abs", "(", "Y1", "-", "Y2", ")", "]", ",", "axis", "=", "0", ")", "**", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.utils.planar_utils.nneigh": [[191, 199], ["numpy.sqrt", "numpy.sort", "numpy.mean", "planar_utils.sqdist", "print"], "function", ["home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.utils.planar_utils.sqdist"], ["", "def", "nneigh", "(", "X0", ",", "X1", ",", "k", ",", "verbose", "=", "False", ")", ":", "\n", "# Compute the average nearest neighbour distances", "\n", "    ", "D", "=", "np", ".", "sqrt", "(", "sqdist", "(", "X0", ",", "X1", ")", ")", "\n", "sorteD", "=", "np", ".", "sort", "(", "D", ",", "axis", "=", "0", ")", "\n", "kth_n_dist", "=", "np", ".", "mean", "(", "sorteD", "[", ":", "k", "]", ",", "axis", "=", "1", ")", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "f\"Average distance from {k}th nearest neighbour: {kth_n_dist}\"", ")", "\n", "", "return", "kth_n_dist", ",", "D", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.utils.planar_utils.gausskernel": [[200, 204], ["numpy.exp", "planar_utils.sqdist"], "function", ["home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.utils.planar_utils.sqdist"], ["", "def", "gausskernel", "(", "X1", ",", "X2", ",", "sigma", "=", "1", ")", ":", "\n", "    ", "\"\"\" Computes the kernel matrix given two matrices whose rows\n    are points\"\"\"", "\n", "return", "np", ".", "exp", "(", "-", "sqdist", "(", "X1", ",", "X2", ")", "/", "(", "2", "*", "sigma", "**", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.utils.planar_utils.sqdist_weighted": [[205, 232], ["numpy.sum", "numpy.sum", "numpy.squeeze", "numpy.squeeze", "numpy.squeeze", "numpy.maximum", "ValueError", "numpy.outer", "numpy.outer", "numpy.tile", "numpy.zeros", "isinstance", "isinstance", "numpy.tile", "numpy.tile", "numpy.ones", "numpy.ones", "numpy.dot"], "function", ["None"], ["", "def", "sqdist_weighted", "(", "X1", ",", "X2", ",", "S", ")", ":", "\n", "    ", "\"\"\" Given two matrices whose rows are points, computes the distances\n    between all the points of the first matrix and all the points of the\n    second matrix\n    Arguments:\n    X1: [N1 x d], earch row is a d-dimensional point\n    X2: [N2 x d], each row is a d-dimensional point\n    S: [1 x d] vector with sigmas for each dimension\n    Returns:\n    M: [N1 x N2], each element  is the distance between two points\n    M_ij = || X1_i - X2_j ||\"\"\"", "\n", "\n", "if", "not", "isinstance", "(", "X1", ",", "np", ".", "ndarray", ")", "or", "not", "isinstance", "(", "X1", ",", "np", ".", "ndarray", ")", "or", "X1", ".", "ndim", "<=", "1", "or", "X2", ".", "ndim", "<=", "1", ":", "\n", "        ", "raise", "ValueError", "(", "\"sqdist_wighted() works only with multidimensional points\"", ")", "\n", "\n", "", "N1", "=", "X1", ".", "shape", "[", "0", "]", "\n", "sqx", "=", "np", ".", "sum", "(", "X1", "**", "2", "/", "np", ".", "tile", "(", "S", "**", "2", ",", "(", "N1", ",", "1", ")", ")", ",", "1", ")", "\n", "\n", "N2", "=", "X2", ".", "shape", "[", "0", "]", "\n", "sqy", "=", "np", ".", "sum", "(", "X2", "**", "2", "/", "np", ".", "tile", "(", "S", "**", "2", ",", "(", "N2", ",", "1", ")", ")", ",", "1", ")", "\n", "\n", "X1_squares", "=", "np", ".", "squeeze", "(", "np", ".", "outer", "(", "np", ".", "ones", "(", "N1", ")", ",", "sqy", ".", "T", ")", ")", "\n", "X2_squares", "=", "np", ".", "squeeze", "(", "np", ".", "outer", "(", "sqx", ",", "np", ".", "ones", "(", "N2", ")", ")", ")", "\n", "weighted_X1", "=", "X1", "/", "np", ".", "tile", "(", "S", "**", "2", ",", "(", "N1", ",", "1", ")", ")", "\n", "double_prod", "=", "np", ".", "squeeze", "(", "2", "*", "np", ".", "dot", "(", "weighted_X1", ",", "X2", ".", "T", ")", ")", "\n", "\n", "return", "np", ".", "maximum", "(", "X1_squares", "+", "X2_squares", "-", "double_prod", ",", "np", ".", "zeros", "(", "X1_squares", ".", "shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.utils.planar_utils.plot_dataset": [[234, 270], ["matplotlib.figure", "plt.figure.add_axes", "matplotlib.xlim", "matplotlib.ylim", "fig_dset.add_axes.scatter", "fig_dset.add_axes.plot", "fig_dset.add_axes.scatter", "fig_dset.add_axes.plot", "planar_manip.computeForwardKinematics().squeeze", "planar_manip.plot_arm", "fig_dset.add_axes.scatter", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.legend", "matplotlib.savefig", "matplotlib.show", "matplotlib.close", "numpy.array", "numpy.squeeze", "planar_manip.computeForwardKinematics", "planar_manip.get_joints_and_ee_pos_pb", "numpy.atleast_2d", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos"], "function", ["home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.plot_arm", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.computeForwardKinematics", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.get_joints_and_ee_pos_pb"], ["", "def", "plot_dataset", "(", "xtr", ",", "ytr", ",", "traj", ",", "planar_manip", ",", "output_folder", ")", ":", "\n", "    ", "fig_dset", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig_dset", ".", "add_axes", "(", "[", "0", ",", "0", ",", "1", ",", "1", "]", ")", "\n", "plt", ".", "xlim", "(", "[", "-", "11", ",", "12", "]", ")", "\n", "plt", ".", "ylim", "(", "[", "-", "11", ",", "12", "]", ")", "\n", "\n", "sel", "=", "1", "\n", "config_to_visualize", "=", "ytr", "[", "sel", "]", "\n", "config_to_visualize", "=", "np", ".", "array", "(", "[", "np", ".", "pi", ",", "np", ".", "pi", ",", "np", ".", "pi", ",", "np", ".", "pi", ",", "np", ".", "pi", "]", ")", "/", "4", "\n", "ax", ".", "scatter", "(", "xtr", "[", ":", ",", "0", "]", ",", "xtr", "[", ":", ",", "1", "]", ",", "zorder", "=", "0", ",", "alpha", "=", "0.4", ")", "\n", "# # plot orientation of xtr", "\n", "ax", ".", "plot", "(", "[", "xtr", "[", ":", ",", "0", "]", ",", "xtr", "[", ":", ",", "0", "]", "+", "0.2", "*", "np", ".", "sin", "(", "xtr", "[", ":", ",", "2", "]", ")", "]", ",", "\n", "[", "xtr", "[", ":", ",", "1", "]", ",", "xtr", "[", ":", ",", "1", "]", "-", "0.2", "*", "np", ".", "cos", "(", "xtr", "[", ":", ",", "2", "]", ")", "]", ",", "\n", "'c-'", ",", "alpha", "=", "0.2", ",", "zorder", "=", "0", ")", "\n", "\n", "# plot trajectory and orientation", "\n", "ax", ".", "scatter", "(", "traj", "[", ":", ",", "0", "]", ",", "traj", "[", ":", ",", "1", "]", ",", "c", "=", "'orange'", ",", "s", "=", "100", ",", "zorder", "=", "1", ",", "alpha", "=", "0.8", ",", "edgecolor", "=", "'k'", ")", "\n", "ax", ".", "plot", "(", "[", "traj", "[", ":", ",", "0", "]", ",", "traj", "[", ":", ",", "0", "]", "+", "0.4", "*", "np", ".", "sin", "(", "traj", "[", ":", ",", "2", "]", ")", "]", ",", "\n", "[", "traj", "[", ":", ",", "1", "]", ",", "traj", "[", ":", ",", "1", "]", "-", "0.4", "*", "np", ".", "cos", "(", "traj", "[", ":", ",", "2", "]", ")", "]", ",", "\n", "'k-'", ",", "alpha", "=", "1", ",", "zorder", "=", "2", ")", "\n", "\n", "P_hat", "=", "planar_manip", ".", "computeForwardKinematics", "(", "np", ".", "atleast_2d", "(", "config_to_visualize", ")", ")", ".", "squeeze", "(", ")", "\n", "planar_manip", ".", "plot_arm", "(", "np", ".", "squeeze", "(", "planar_manip", ".", "get_joints_and_ee_pos_pb", "(", "config_to_visualize", ")", ")", ",", "\n", "ax", ",", "ls", "=", "'-'", ",", "linewidth", "=", "12", ",", "label", "=", "'manipulator'", ",", "alpha", "=", "0.2", ",", "c_links", "=", "'red'", ")", "\n", "\n", "X_hat", ",", "Y_hat", "=", "P_hat", "[", "0", "]", ",", "P_hat", "[", "1", "]", "\n", "ax", ".", "scatter", "(", "X_hat", ",", "Y_hat", ",", "c", "=", "'tab:red'", ",", "zorder", "=", "2", ",", "s", "=", "600", ",", "edgecolor", "=", "'k'", ",", "\n", "label", "=", "'EE position'", ",", "marker", "=", "'X'", ")", "\n", "plt", ".", "xlabel", "(", "'X'", ")", "\n", "plt", ".", "ylabel", "(", "'Y'", ")", "\n", "# ax.set_yticklabels([])", "\n", "# ax.set_xticklabels([])", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "savefig", "(", "output_folder", "/", "f'dataset.png'", ",", "format", "=", "'png'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "plt", ".", "close", "(", "fig_dset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.CRiSPIK.CRiSPIK.__init__": [[25, 68], ["isinstance", "float", "len", "numpy.random.default_rng", "numpy.array", "float", "float"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "pos_dimensionality", ",", "\n", "psi", "=", "None", ",", "forward", "=", "None", ",", "\n", "boundaries", "=", "None", ",", "s", "=", "None", ",", "v", "=", "None", ",", "\n", "loss_structure", "=", "None", ",", "krls", "=", "False", ",", "\n", "use_leverage", "=", "False", ",", "\n", "jacobian", "=", "None", ",", "\n", "random_seed", "=", "None", ")", ":", "\n", "        ", "\"\"\"Constructor of inverse kinematics structured estimator\n\n        :param boundaries: List of duples for lower and upper joint boundaries\n        :param g: gamma for Gaussian kernel\n        :param loss_structure: \"Euclidean\" or \"Spherical\" for choosing the type of loss\n        \"\"\"", "\n", "self", ".", "is_fitted_", "=", "False", "\n", "self", ".", "M_inv", "=", "None", "\n", "self", ".", "X", "=", "None", "\n", "self", ".", "Y", "=", "None", "\n", "if", "isinstance", "(", "s", ",", "list", ")", ":", "\n", "            ", "self", ".", "s", "=", "np", ".", "array", "(", "[", "float", "(", "s", ")", "for", "s", "in", "s", "]", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "s", "=", "float", "(", "s", ")", "\n", "", "self", ".", "v", "=", "float", "(", "v", ")", "\n", "self", ".", "loss_structure", "=", "loss_structure", "\n", "self", ".", "boundaries", "=", "boundaries", "\n", "self", ".", "outdim", "=", "len", "(", "boundaries", ")", "\n", "self", ".", "krls_preds", "=", "None", "\n", "self", ".", "krls", "=", "krls", "\n", "self", ".", "Kx", "=", "None", "\n", "self", ".", "forward", "=", "forward", "\n", "self", ".", "pos_dimensionality", "=", "pos_dimensionality", "\n", "if", "pos_dimensionality", "==", "2", ":", "\n", "            ", "self", ".", "f_cartesian", "=", "self", ".", "f_cartesian_2d", "\n", "", "elif", "pos_dimensionality", "==", "3", ":", "\n", "            ", "self", ".", "f_cartesian", "=", "self", ".", "f_cartesian_3d", "\n", "", "if", "psi", "is", "not", "None", ":", "\n", "            ", "self", ".", "psi", "=", "psi", "\n", "", "if", "jacobian", "is", "not", "None", ":", "\n", "            ", "self", ".", "jacobian", "=", "jacobian", "\n", "", "self", ".", "leverage_scores", "=", "None", "\n", "self", ".", "use_leverage", "=", "use_leverage", "\n", "\n", "# print(f\"Loss structure: {self.loss_structure}\")", "\n", "self", ".", "rng", "=", "np", ".", "random", ".", "default_rng", "(", "random_seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.CRiSPIK.CRiSPIK.fit": [[69, 73], ["CRiSPIK.CRiSPIK.fit_classic"], "methods", ["home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.CRiSPIK.CRiSPIK.fit_classic"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", ",", "**", "kwargs", ")", ":", "\n", "        ", "if", "'out'", "not", "in", "kwargs", ":", "\n", "            ", "kwargs", "[", "'out'", "]", "=", "None", "\n", "", "return", "self", ".", "fit_classic", "(", "X", ",", "y", ",", "kwargs", "[", "'out'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.CRiSPIK.CRiSPIK.fit_classic": [[74, 109], ["out", "datetime.datetime.now", "CRiSPIK.CRiSPIK.K_matrix", "CRiSPIK.invPD", "datetime.datetime.now", "out", "CRiSPIK.CRiSPIK.psi", "numpy.einsum", "numpy.identity", "str", "datetime.timedelta"], "methods", ["home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.OneClassSSVM.OneClassSSVM.K_matrix", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.CRiSPIK.invPD", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.experiments_scripts.panda_demo.psi"], ["", "def", "fit_classic", "(", "self", ",", "X", ",", "y", ",", "out", "=", "None", ")", ":", "\n", "        ", "\"\"\"A reference implementation of a fitting function.\n        Parameters\n        ----------\n        X : {array-like, sparse matrix}, shape (n_samples, n_features)\n            The training input samples.\n        y : array-like, shape (n_samples,) or (n_samples, n_outputs)\n            The target values (class labels in classification, real numbers in\n            regression).\n        Returns\n        -------\n        self : object\n            Returns self.\n        \"\"\"", "\n", "\n", "self", ".", "is_fitted_", "=", "True", "\n", "self", ".", "X", "=", "X", "\n", "self", ".", "Y", "=", "y", "\n", "n", "=", "X", ".", "shape", "[", "0", "]", "\n", "\n", "if", "out", "is", "None", ":", "\n", "            ", "out", "=", "print", "\n", "\n", "", "out", "(", "f\"Training CRiSP model with {n} training points\"", ")", "\n", "t0", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "K", "=", "self", ".", "K_matrix", "(", "self", ".", "psi", "(", "self", ".", "X", ")", ")", "\n", "self", ".", "M_inv", "=", "invPD", "(", "K", "+", "n", "*", "self", ".", "v", "*", "np", ".", "identity", "(", "n", ")", ")", "\n", "t1", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "out", "(", "f\"Training completed in {str(datetime.timedelta(seconds=(t1 - t0).seconds))}\\n\"", ")", "\n", "\n", "if", "self", ".", "use_leverage", ":", "\n", "# self.leverage_scores = np.diagonal(K @ self.M_inv)", "\n", "            ", "self", ".", "leverage_scores", "=", "np", ".", "einsum", "(", "'ij,ji->i'", ",", "K", ",", "self", ".", "M_inv", ")", "\n", "# `fit` should always return `self`", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.CRiSPIK.CRiSPIK.predict_krls": [[110, 120], ["sklearn.utils.validation.check_is_fitted", "numpy.atleast_2d", "CRiSPIK.CRiSPIK.K_matrix", "numpy.dot", "CRiSPIK.CRiSPIK.psi", "CRiSPIK.CRiSPIK.psi"], "methods", ["home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.OneClassSSVM.OneClassSSVM.K_matrix", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.experiments_scripts.panda_demo.psi", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.experiments_scripts.panda_demo.psi"], ["", "def", "predict_krls", "(", "self", ",", "X", ",", "is_sequence", "=", "False", ",", "out", "=", "None", ")", ":", "\n", "        ", "check_is_fitted", "(", "self", ",", "'is_fitted_'", ")", "\n", "xte", "=", "np", ".", "atleast_2d", "(", "X", ")", "\n", "if", "out", "is", "None", ":", "\n", "            ", "out", "=", "print", "\n", "", "if", "self", ".", "Kx", "is", "None", ":", "\n", "            ", "self", ".", "Kx", "=", "self", ".", "K_matrix", "(", "self", ".", "psi", "(", "self", ".", "X", ")", ",", "self", ".", "psi", "(", "xte", ")", ")", "\n", "", "alpha", "=", "np", ".", "dot", "(", "self", ".", "M_inv", ",", "self", ".", "Kx", ")", ".", "T", "\n", "self", ".", "Kx", "=", "None", "\n", "return", "alpha", "@", "self", ".", "Y", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.CRiSPIK.CRiSPIK.predict": [[121, 220], ["sklearn.utils.validation.check_is_fitted", "numpy.atleast_2d", "sklearn.utils.validation.check_array", "CRiSPIK.CRiSPIK.K_matrix", "numpy.atleast_2d", "numpy.full", "CRiSPIK.CRiSPIK.forward", "print", "numpy.random.default_rng", "print", "numpy.full", "CRiSPIK.CRiSPIK.psi", "CRiSPIK.CRiSPIK.psi", "out", "datetime.datetime.now", "enumerate", "enumerate", "numpy.arange", "a_indexes.append", "numpy.ndarray.copy", "y0s.append", "y_amax.append", "datetime.datetime.now", "out", "print", "numpy.einsum", "numpy.dot", "tqdm.tqdm.tqdm", "len", "numpy.ndarray.copy", "numpy.ndarray.copy", "CRiSPIK.CRiSPIK.inside_boundaries", "out", "CRiSPIK.CRiSPIK.K_matrix", "numpy.ndarray.copy", "numpy.atleast_2d", "out", "CRiSPIK.CRiSPIK.psi", "scipy.optimize.minimize", "str", "numpy.mean", "numpy.std", "numpy.argmax", "numpy.argmax", "scipy.optimize.minimize", "datetime.timedelta"], "methods", ["home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.OneClassSSVM.OneClassSSVM.K_matrix", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.NN.fc_nn.forward", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.experiments_scripts.panda_demo.psi", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.experiments_scripts.panda_demo.psi", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.OneClassSSVM.OneClassSSVM.inside_boundaries", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.OneClassSSVM.OneClassSSVM.K_matrix", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.experiments_scripts.panda_demo.psi"], ["", "def", "predict", "(", "self", ",", "\n", "X", ",", "\n", "y", "=", "None", ",", "\n", "y0", "=", "None", ",", "\n", "is_sequence", "=", "False", ",", "\n", "out", "=", "None", ")", ":", "\n", "        ", "\"\"\" A reference implementation of a predicting function.\n        Parameters\n        ----------\n        X : {array-like, sparse matrix}, shape (n_samples, n_features)\n            The training input samples.\n        Returns\n        -------\n        y : ndarray, shape (n_samples,)\n            Returns an array of ones.\n        \"\"\"", "\n", "check_is_fitted", "(", "self", ",", "'is_fitted_'", ")", "\n", "X", "=", "np", ".", "atleast_2d", "(", "X", ")", "\n", "xte", "=", "check_array", "(", "X", ",", "accept_sparse", "=", "False", ")", "\n", "y0s", "=", "[", "]", "\n", "y_amax", "=", "[", "]", "\n", "y_mean", "=", "[", "]", "\n", "a_indexes", "=", "[", "]", "\n", "data", "=", "{", "}", "\n", "if", "self", ".", "loss_structure", "==", "'Forward'", ":", "\n", "            ", "self", ".", "Ptr", "=", "self", ".", "forward", "(", "self", ".", "Y", ")", "\n", "\n", "", "if", "self", ".", "use_leverage", ":", "\n", "## Lev scores", "\n", "            ", "print", "(", "\"Computing leverage scores\"", ")", "\n", "if", "self", ".", "leverage_scores", "is", "None", ":", "\n", "                ", "self", ".", "leverage_scores", "=", "np", ".", "einsum", "(", "'ij,ji->i'", ",", "self", ".", "K_matrix", "(", "self", ".", "psi", "(", "self", ".", "X", ")", ")", ",", "self", ".", "M_inv", ")", "\n", "\n", "", "rng", "=", "np", ".", "random", ".", "default_rng", "(", "77", ")", "\n", "print", "(", "\"computed LS\"", ")", "\n", "leverage_sampled", "=", "np", ".", "full", "(", "self", ".", "X", ".", "shape", "[", "0", "]", ",", "np", ".", "inf", ")", "\n", "", "if", "out", "is", "None", ":", "\n", "            ", "out", "=", "print", "\n", "\n", "# compute alphas", "\n", "", "self", ".", "Kx", "=", "self", ".", "K_matrix", "(", "self", ".", "psi", "(", "self", ".", "X", ")", ",", "self", ".", "psi", "(", "xte", ")", ")", "\n", "# self.Kx = np.exp(-sqdist(self.psi(self.X), self.psi(xte)) / (2*self.s**2))", "\n", "alpha", "=", "np", ".", "atleast_2d", "(", "np", ".", "dot", "(", "self", ".", "M_inv", ",", "self", ".", "Kx", ")", ".", "T", ")", "\n", "\n", "y_hat", "=", "np", ".", "full", "(", "(", "X", ".", "shape", "[", "0", "]", ",", "self", ".", "outdim", ")", ",", "np", ".", "inf", ")", "\n", "if", "X", ".", "shape", "[", "0", "]", ">", "1", ":", "\n", "            ", "out", "(", "f\"Predicting {X.shape[0]} test points.\\tLoss structure: {self.loss_structure}\"", ")", "\n", "t0", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "\n", "", "for", "idx", ",", "alpha_x", "in", "(", "enumerate", "(", "tqdm", "(", "alpha", ")", ")", "if", "X", ".", "shape", "[", "0", "]", ">", "1", "else", "enumerate", "(", "alpha", ")", ")", ":", "\n", "            ", "idx_a", "=", "np", ".", "arange", "(", "len", "(", "alpha_x", ")", ")", "\n", "a_indexes", ".", "append", "(", "idx_a", ")", "\n", "a_x", "=", "np", ".", "ndarray", ".", "copy", "(", "alpha_x", "[", "idx_a", "]", ")", "\n", "\n", "if", "y0", "is", "None", "and", "(", "not", "is_sequence", "or", "idx", "==", "0", ")", ":", "\n", "                ", "y0", "=", "np", ".", "ndarray", ".", "copy", "(", "self", ".", "Y", "[", "np", ".", "argmax", "(", "a_x", ")", "]", ")", "\n", "# y0 = np.array([(high-low)*np.random.random() + low for low, high in self.boundaries])", "\n", "", "elif", "is_sequence", "and", "idx", ">", "0", ":", "\n", "                ", "y0", "=", "np", ".", "ndarray", ".", "copy", "(", "y_hat", "[", "idx", "-", "1", "]", ")", "\n", "\n", "", "y0s", ".", "append", "(", "y0", ")", "\n", "y_amax", ".", "append", "(", "np", ".", "ndarray", ".", "copy", "(", "self", ".", "Y", "[", "np", ".", "argmax", "(", "alpha_x", ")", "]", ")", ")", "\n", "if", "self", ".", "loss_structure", "==", "'Radians'", ":", "\n", "                ", "y_hat", "[", "idx", "]", "=", "minimize", "(", "self", ".", "f_circle", ",", "x0", "=", "y0", ",", "args", "=", "(", "a_x", ",", "self", ".", "Y", "[", "idx_a", "]", ")", ",", "\n", "method", "=", "'L-BFGS-B'", ",", "\n", "bounds", "=", "self", ".", "boundaries", ",", "\n", "jac", "=", "self", ".", "grad_f_circle", ",", "\n", "options", "=", "{", "'gtol'", ":", "1e-6", ",", "'disp'", ":", "False", "}", ")", ".", "x", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "", "elif", "self", ".", "loss_structure", "==", "'Forward'", ":", "\n", "                ", "y_hat", "[", "idx", "]", "=", "np", ".", "atleast_2d", "(", "minimize", "(", "self", ".", "f_cartesian", ",", "x0", "=", "y0", ",", "args", "=", "(", "a_x", ",", "idx_a", ")", ",", "method", "=", "'L-BFGS-B'", ",", "\n", "bounds", "=", "self", ".", "boundaries", ",", "\n", "# jac='2-point',", "\n", "options", "=", "{", "'gtol'", ":", "1e-12", ",", "\n", "'ftol'", ":", "1e-12", ",", "\n", "'maxls'", ":", "200", ",", "\n", "'eps'", ":", "1e-4", ",", "\n", "'disp'", ":", "False", "}", ")", ".", "x", ")", "\n", "", "else", ":", "\n", "                ", "out", "(", "\"Please supply a valid mode: Cartesian or Radians\"", ")", "\n", "", "y0", "=", "None", "\n", "\n", "if", "not", "self", ".", "inside_boundaries", "(", "y_hat", "[", "idx", "]", ")", ":", "\n", "                ", "out", "(", "f\"[{idx}] outside of boundaries\"", ")", "\n", "", "", "if", "X", ".", "shape", "[", "0", "]", ">", "1", ":", "\n", "            ", "t1", "=", "datetime", ".", "datetime", ".", "now", "(", ")", "\n", "out", "(", "f\"Inference completed in {str(datetime.timedelta(seconds=(t1 - t0).seconds))} mins\"", ")", "\n", "\n", "", "if", "self", ".", "use_leverage", ":", "\n", "            ", "print", "(", "f\"Average samples: {np.mean(leverage_sampled)} \u00b1 {np.std(leverage_sampled):.2f}\"", ")", "\n", "", "data", "[", "'alpha'", "]", "=", "alpha", "\n", "data", "[", "'Kx'", "]", "=", "self", ".", "Kx", "\n", "if", "y0s", ":", "data", "[", "'y0s'", "]", "=", "y0s", "\n", "if", "y_amax", ":", "data", "[", "'y_amax'", "]", "=", "y_amax", "\n", "if", "y_mean", ":", "data", "[", "'y_mean'", "]", "=", "y_mean", "\n", "if", "a_indexes", ":", "data", "[", "'a_indexes'", "]", "=", "a_indexes", "\n", "self", ".", "Ptr", "=", "None", "\n", "self", ".", "Kx", "=", "None", "\n", "\n", "return", "y_hat", ",", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.CRiSPIK.CRiSPIK.f_Euclidean": [[223, 232], ["numpy.dot", "CRiSPIK.CRiSPIK.delta_Euclidean"], "methods", ["home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.CRiSPIK.CRiSPIK.delta_Euclidean"], ["", "def", "f_Euclidean", "(", "self", ",", "x", ",", "alpha", ",", "ytr", ")", ":", "\n", "        ", "\"\"\" Functional to be minimized for Consistent Regularized Structured Prediction.\n        Reference:\n        Ciliberto, Carlo, Lorenzo Rosasco, and Alessandro Rudi.\n        \"A consistent regularization approach for structured prediction.\"\n        Advances in neural information processing systems. 2016..\"\"\"", "\n", "if", "x", ".", "ndim", "==", "1", ":", "\n", "            ", "x", "=", "x", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "", "return", "np", ".", "dot", "(", "alpha", ",", "self", ".", "delta_Euclidean", "(", "x", ",", "ytr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.CRiSPIK.CRiSPIK.grad_f_Euclidean": [[233, 238], ["numpy.dot"], "methods", ["None"], ["", "def", "grad_f_Euclidean", "(", "self", ",", "x", ",", "alpha", ",", "ytr", ")", ":", "\n", "        ", "\"\"\"Returns gradient of self.f\"\"\"", "\n", "if", "x", ".", "ndim", "==", "1", ":", "\n", "            ", "x", "=", "x", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "", "return", "2", "*", "np", ".", "dot", "(", "alpha", ",", "x", "-", "ytr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.CRiSPIK.CRiSPIK.delta_Euclidean": [[239, 242], ["crisp.utils.planar_utils.sqdist"], "methods", ["home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.utils.planar_utils.sqdist"], ["", "def", "delta_Euclidean", "(", "self", ",", "y0", ",", "y1", ")", ":", "\n", "        ", "\"\"\" \"Structured\" loss \"\"\"", "\n", "return", "sqdist", "(", "y0", ",", "y1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.CRiSPIK.CRiSPIK.f_circle": [[245, 254], ["numpy.dot", "CRiSPIK.CRiSPIK.sq_delta_circle"], "methods", ["home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.CRiSPIK.CRiSPIK.sq_delta_circle"], ["", "def", "f_circle", "(", "self", ",", "x", ",", "alpha", ",", "ytr", ")", ":", "\n", "        ", "\"\"\" Functional to be minimized for Consistent Regularized Structured Prediction.\n        Reference:\n        Ciliberto, Carlo, Lorenzo Rosasco, and Alessandro Rudi.\n        \"A consistent regularization approach for structured prediction.\"\n        Advances in neural information processing systems. 2016..\"\"\"", "\n", "if", "x", ".", "ndim", "==", "1", ":", "\n", "            ", "x", "=", "x", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "", "return", "np", ".", "dot", "(", "alpha", ",", "self", ".", "sq_delta_circle", "(", "x", ",", "ytr", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.CRiSPIK.CRiSPIK.sq_delta_circle": [[255, 260], ["numpy.sum", "numpy.amin", "numpy.abs", "numpy.abs"], "methods", ["None"], ["", "def", "sq_delta_circle", "(", "self", ",", "y", ",", "ytr", ")", ":", "\n", "        ", "\"\"\"Computes distance as the squared sum of radians distances\"\"\"", "\n", "if", "y", ".", "ndim", "==", "1", ":", "\n", "            ", "y", "=", "y", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "", "return", "np", ".", "sum", "(", "np", ".", "amin", "(", "[", "np", ".", "abs", "(", "y", "-", "ytr", ")", ",", "2", "*", "np", ".", "pi", "-", "np", ".", "abs", "(", "y", "-", "ytr", ")", "]", ",", "axis", "=", "0", ")", "**", "2", ",", "axis", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.CRiSPIK.CRiSPIK.grad_f_circle": [[261, 266], ["numpy.dot", "CRiSPIK.CRiSPIK.grad_sq_delta_circle"], "methods", ["home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.CRiSPIK.CRiSPIK.grad_sq_delta_circle"], ["", "def", "grad_f_circle", "(", "self", ",", "x", ",", "alpha", ",", "ytr", ")", ":", "\n", "        ", "\"\"\"Gradient of the structured loss on the circle\"\"\"", "\n", "if", "x", ".", "ndim", "==", "1", ":", "\n", "            ", "x", "=", "x", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "", "return", "np", ".", "dot", "(", "alpha", ",", "self", ".", "grad_sq_delta_circle", "(", "x", ",", "ytr", ")", ")", "/", "2", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.CRiSPIK.CRiSPIK.grad_sq_delta_circle": [[267, 274], ["numpy.sign", "numpy.sign", "numpy.amin", "numpy.abs", "numpy.abs", "numpy.abs"], "methods", ["None"], ["", "def", "grad_sq_delta_circle", "(", "self", ",", "y", ",", "ytr", ")", ":", "\n", "        ", "\"\"\"Gradient of the sum of squared radians distances\"\"\"", "\n", "if", "y", ".", "ndim", "==", "1", ":", "\n", "            ", "y", "=", "y", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "", "delta", "=", "y", "-", "ytr", "\n", "return", "-", "np", ".", "amin", "(", "[", "np", ".", "abs", "(", "delta", ")", ",", "2", "*", "np", ".", "pi", "-", "np", ".", "abs", "(", "delta", ")", "]", ",", "axis", "=", "0", ")", "*", "np", ".", "sign", "(", "delta", ")", "*", "np", ".", "sign", "(", "\n", "np", ".", "abs", "(", "delta", ")", "-", "np", ".", "pi", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.CRiSPIK.CRiSPIK.f_cartesian_2d": [[276, 298], ["CRiSPIK.CRiSPIK.forward", "crisp.utils.planar_utils.sqdist", "numpy.dot", "numpy.amin", "numpy.abs", "numpy.abs"], "methods", ["home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.NN.fc_nn.forward", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.utils.planar_utils.sqdist"], ["", "def", "f_cartesian_2d", "(", "self", ",", "x", ",", "alpha", ",", "idx_a", ")", ":", "\n", "        ", "\"\"\"Functional to be minimized for Consistent Regularized Structured Prediction.\n        Uses the forward kinematics in self.for4ward to compute the Euclidean loss in the workspace\n        Reference:\n        Ciliberto, Carlo, Lorenzo Rosasco, and Alessandro Rudi.\n        \"A consistent regularization approach for structured prediction.\"\n        Advances in neural information processing systems. 2016.\n\n        :param x: candidate configuration point (set of joint angles)\n        :param alpha: alphas associated with the training points\n        :param ytr: configuration training points\n        :return: a single scalar loss\n        \"\"\"", "\n", "if", "x", ".", "ndim", "==", "1", ":", "\n", "            ", "x", "=", "x", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "", "P", "=", "self", ".", "forward", "(", "x", ")", "\n", "\n", "D_Euclidean", "=", "sqdist", "(", "P", "[", ":", ",", ":", "self", ".", "pos_dimensionality", "]", ",", "self", ".", "Ptr", "[", "idx_a", ",", ":", "self", ".", "pos_dimensionality", "]", ")", "\n", "D_angular", "=", "np", ".", "amin", "(", "[", "np", ".", "abs", "(", "P", "[", ":", ",", "2", "]", "-", "self", ".", "Ptr", "[", "idx_a", ",", "2", "]", ")", ",", "2", "*", "np", ".", "pi", "-", "np", ".", "abs", "(", "P", "[", ":", ",", "2", "]", "-", "self", ".", "Ptr", "[", "idx_a", ",", "2", "]", ")", "]", ",", "\n", "axis", "=", "0", ")", "**", "2", "\n", "\n", "return", "np", ".", "dot", "(", "10", "*", "D_Euclidean", "+", "D_angular", ",", "alpha", ")", "\n", "# return np.dot(D_Euclidean, alpha)", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.CRiSPIK.CRiSPIK.f_cartesian_3d": [[301, 321], ["CRiSPIK.CRiSPIK.forward", "CRiSPIK.CRiSPIK.delta_Euclidean", "CRiSPIK.CRiSPIK.sq_delta_circle", "numpy.dot"], "methods", ["home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.NN.fc_nn.forward", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.CRiSPIK.CRiSPIK.delta_Euclidean", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.CRiSPIK.CRiSPIK.sq_delta_circle"], ["", "def", "f_cartesian_3d", "(", "self", ",", "x", ",", "alpha", ",", "idx_a", ")", ":", "\n", "        ", "\"\"\"Functional to be minimized for Consistent Regularized Structured Prediction.\n        Uses the forward kinematics in self.for4ward to compute the Euclidean loss in the workspace\n        Reference:\n        Ciliberto, Carlo, Lorenzo Rosasco, and Alessandro Rudi.\n        \"A consistent regularization approach for structured prediction.\"\n        Advances in neural information processing systems. 2016.\n\n        :param x: candidate configuration point (set of joint angles)\n        :param alpha: alphas associated with the training points\n        :param ytr: configuration training points\n        :return: a single scalar loss\n        \"\"\"", "\n", "if", "x", ".", "ndim", "==", "1", ":", "\n", "            ", "x", "=", "x", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "", "P", "=", "self", ".", "forward", "(", "x", ")", "\n", "\n", "D_Euclidean", "=", "self", ".", "delta_Euclidean", "(", "P", "[", ":", ",", ":", "3", "]", ",", "self", ".", "Ptr", "[", "idx_a", ",", ":", "3", "]", ")", "\n", "D_angular", "=", "self", ".", "sq_delta_circle", "(", "P", "[", ":", ",", "3", ":", "]", ",", "self", ".", "Ptr", "[", "idx_a", ",", "3", ":", "]", ")", "\n", "return", "np", ".", "dot", "(", "D_Euclidean", "+", "D_angular", ",", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.CRiSPIK.CRiSPIK.save": [[322, 336], ["print", "pickle.dump", "print", "open", "sys.getsizeof"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "output_folder", ",", "save_name", ")", ":", "\n", "        ", "\"\"\"\n        Saves the model in a .pickle file\n        :param output_folder: destination folder\n        :param save_name: name of the file\n        \"\"\"", "\n", "CRiSP", "=", "{", "'M_inv'", ":", "self", ".", "M_inv", ",", "'X'", ":", "self", ".", "X", ",", "'Y'", ":", "self", ".", "Y", ",", "'s'", ":", "self", ".", "s", ",", "'psi'", ":", "self", ".", "psi", "}", "\n", "print", "(", "\n", "f\"Saving model in {output_folder}...\\tKernel matrix inverse size: \\t{sys.getsizeof(CRiSP['M_inv']) * 1e-9:3f}GB\"", ")", "\n", "\n", "if", "save_name", "is", "None", ":", "\n", "            ", "save_name", "=", "'CRiSP'", "\n", "", "pickle", ".", "dump", "(", "CRiSP", ",", "open", "(", "output_folder", "/", "(", "save_name", "+", "\".pickle\"", ")", ",", "'wb'", ")", ",", "protocol", "=", "4", ")", "\n", "print", "(", "f\"Save complete!\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.CRiSPIK.CRiSPIK.load_state": [[337, 350], ["pickle.load", "open", "print", "sys.exit"], "methods", ["None"], ["", "def", "load_state", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\" Loads a model saved with 'save' function \"\"\"", "\n", "try", ":", "\n", "            ", "state", "=", "pickle", ".", "load", "(", "open", "(", "path", ",", "'rb'", ")", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "            ", "print", "(", "f\"CRiSP_tjm.load_state(): Could not find the model to load, please check the path\"", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "", "self", ".", "M_inv", "=", "state", "[", "'M_inv'", "]", "\n", "self", ".", "s", "=", "state", "[", "'s'", "]", "\n", "self", ".", "X", "=", "state", "[", "'X'", "]", "\n", "self", ".", "Y", "=", "state", "[", "'Y'", "]", "\n", "self", ".", "psi", "=", "state", "[", "'psi'", "]", "\n", "self", ".", "is_fitted_", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.CRiSPIK.CRiSPIK.inside_boundaries": [[351, 356], ["zip"], "methods", ["None"], ["", "def", "inside_boundaries", "(", "self", ",", "Q", ")", ":", "\n", "        ", "for", "q", ",", "bounds", "in", "zip", "(", "Q", ",", "self", ".", "boundaries", ")", ":", "\n", "            ", "if", "q", "<", "bounds", "[", "0", "]", "or", "q", ">", "bounds", "[", "1", "]", ":", "\n", "                ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.CRiSPIK.CRiSPIK.K_matrix": [[357, 377], ["isinstance", "isinstance", "isinstance", "crisp.utils.planar_utils.sqdist", "numpy.sqrt", "numpy.sort", "print", "numpy.exp", "numpy.exp", "isinstance", "isinstance", "crisp.utils.planar_utils.sqdist_weighted", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std", "numpy.mean", "numpy.std"], "methods", ["home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.utils.planar_utils.sqdist", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.utils.planar_utils.sqdist_weighted"], ["", "", "def", "K_matrix", "(", "self", ",", "X1", ",", "X2", "=", "None", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "\"\"\"Compute the kernel matrix of a Gaussian kernel given two matrices of points\"\"\"", "\n", "if", "X2", "is", "None", ":", "\n", "            ", "X2", "=", "X1", "\n", "", "if", "isinstance", "(", "self", ".", "s", ",", "float", ")", "or", "isinstance", "(", "self", ".", "s", ",", "int", ")", ":", "\n", "            ", "sqD", "=", "sqdist", "(", "X1", ",", "X2", ")", "\n", "", "elif", "isinstance", "(", "self", ".", "s", ",", "list", ")", "or", "isinstance", "(", "self", ".", "s", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "sqD", "=", "sqdist_weighted", "(", "X1", ",", "X2", ",", "self", ".", "s", ")", "\n", "", "if", "verbose", ":", "\n", "            ", "D", "=", "np", ".", "sqrt", "(", "sqD", ")", "\n", "D_sorted", "=", "np", ".", "sort", "(", "D", ",", "axis", "=", "1", ")", "\n", "print", "(", "f\"Avg distance 5th nearest neighbour: {np.mean(D_sorted[:, 5]):.3f}  \u00b1 {np.std(D_sorted[:, 5]):.3f}\\n\"", "\n", "f\"Avg distance 10th nearest neighbour: {np.mean(D_sorted[:, 10]):.3f}  \u00b1 {np.std(D_sorted[:, 10]):.3f}\\n\"", "\n", "f\"Mean distance: {np.mean(D[D > 0]):.3f} \u00b1 {np.std(D[D > 0]):.3f}\\n\"", "\n", "f\"Avg Min distance: {np.mean(D_sorted[:, 1]):.3f} \u00b1 {np.std(D_sorted[:, 1]):.3f}\\n\"", "\n", "f\"Avg Max distance: {np.mean(D_sorted[:, -1]):.3f} \u00b1 {np.std(D_sorted[:, -1]):.3f}\\n\"", ")", "\n", "", "if", "isinstance", "(", "self", ".", "s", ",", "float", ")", ":", "\n", "            ", "return", "np", ".", "exp", "(", "-", "sqD", "/", "(", "2", "*", "self", ".", "s", "**", "2", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "np", ".", "exp", "(", "-", "sqD", "/", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.CRiSPIK.CRiSPIK.K_matrix_const": [[378, 392], ["isinstance", "isinstance", "isinstance", "crisp.utils.planar_utils.sqdist", "isinstance", "isinstance", "crisp.utils.planar_utils.sqdist_weighted", "crisp.utils.planar_utils.sqdist_weighted", "numpy.exp", "numpy.exp", "numpy.exp"], "methods", ["home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.utils.planar_utils.sqdist", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.utils.planar_utils.sqdist_weighted", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.utils.planar_utils.sqdist_weighted"], ["", "", "def", "K_matrix_const", "(", "self", ",", "X1", ",", "X2", "=", "None", ",", "dim_pos", "=", "None", ",", "verbose", "=", "False", ")", ":", "\n", "        ", "\"\"\"Computes the kernel matrix of a Gaussian kernel + constant given two matrices of points\"\"\"", "\n", "if", "X2", "is", "None", ":", "\n", "            ", "X2", "=", "X1", "\n", "", "if", "isinstance", "(", "self", ".", "s", ",", "float", ")", "or", "isinstance", "(", "self", ".", "s", ",", "int", ")", ":", "\n", "            ", "D", "=", "sqdist", "(", "X1", ",", "X2", ")", "\n", "", "elif", "isinstance", "(", "self", ".", "s", ",", "list", ")", "or", "isinstance", "(", "self", ".", "s", ",", "np", ".", "ndarray", ")", ":", "\n", "            ", "D_pos", "=", "sqdist_weighted", "(", "X1", "[", ":", ",", ":", "dim_pos", "]", ",", "X2", "[", ":", ",", ":", "dim_pos", "]", ",", "self", ".", "s", "[", ":", "dim_pos", "]", ")", "\n", "D_ori", "=", "sqdist_weighted", "(", "X1", "[", ":", ",", "dim_pos", ":", "]", ",", "X2", "[", ":", ",", "dim_pos", ":", "]", ",", "self", ".", "s", "[", "dim_pos", ":", "]", ")", "\n", "\n", "", "if", "isinstance", "(", "self", ".", "s", ",", "float", ")", ":", "\n", "            ", "return", "np", ".", "exp", "(", "-", "D", "/", "(", "2", "*", "self", ".", "s", "**", "2", ")", ")", "+", "1", "\n", "", "else", ":", "\n", "            ", "return", "(", "np", ".", "exp", "(", "-", "D_ori", "/", "2", ")", "+", "1", ")", "*", "(", "(", "np", ".", "exp", "(", "-", "D_pos", "/", "2", ")", "+", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.CRiSPIK.CRiSPIK.psi": [[393, 398], ["numpy.hstack", "numpy.sin", "numpy.cos", "numpy.atleast_2d", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.sin", "numpy.cos", "numpy.ones", "numpy.sin", "numpy.cos"], "methods", ["None"], ["", "", "def", "psi", "(", "self", ",", "x", ")", ":", "\n", "        ", "\"\"\" Feature map \"\"\"", "\n", "return", "np", ".", "hstack", "(", "(", "np", ".", "atleast_2d", "(", "np", ".", "ones", "(", "x", ".", "shape", "[", "0", "]", ")", ")", ".", "T", ",", "x", ",", "np", ".", "sin", "(", "x", ")", ",", "np", ".", "cos", "(", "x", ")", ",", "\n", "np", ".", "sin", "(", "x", ")", "*", "np", ".", "cos", "(", "x", ")", ",", "np", ".", "sin", "(", "x", ")", "**", "2", ",", "np", ".", "cos", "(", "x", ")", "**", "2", ",", "\n", "np", ".", "sin", "(", "x", ")", "**", "2", "*", "np", ".", "cos", "(", "x", ")", ",", "np", ".", "sin", "(", "x", ")", "*", "np", ".", "cos", "(", "x", ")", "**", "2", ",", "np", ".", "sin", "(", "x", ")", "**", "3", ",", "np", ".", "cos", "(", "x", ")", "**", "3", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.CRiSPIK.CRiSPIK.preprocess": [[399, 402], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "preprocess", "(", "cls", ",", "x", ")", ":", "\n", "        ", "x", "[", ":", ",", ":", "3", "]", "=", "x", "[", ":", ",", ":", "3", "]", "*", "1e2", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.CRiSPIK.CRiSPIK.postprocess": [[403, 406], ["None"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "postprocess", "(", "cls", ",", "x", ")", ":", "\n", "        ", "x", "[", ":", ",", ":", "3", "]", "=", "x", "[", ":", ",", ":", "3", "]", "/", "1e2", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.CRiSPIK.invPD": [[407, 411], ["numpy.linalg.inv", "numpy.dot", "numpy.linalg.cholesky"], "function", ["None"], ["", "", "def", "invPD", "(", "M", ")", ":", "\n", "    ", "\"Inverts positive definite matrix with Cholesky decomposition\"", "\n", "C", "=", "np", ".", "linalg", ".", "inv", "(", "np", ".", "linalg", ".", "cholesky", "(", "M", ")", ")", "\n", "return", "np", ".", "dot", "(", "C", ".", "T", ",", "C", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.OneClassSSVM.OneClassSSVM.__init__": [[25, 36], ["len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "s", ",", "v", ",", "balls", "=", "True", ",", "boundaries", "=", "None", ")", ":", "\n", "        ", "self", ".", "balls", "=", "balls", "\n", "self", ".", "is_fitted_", "=", "False", "\n", "self", ".", "k", "=", "12", "\n", "self", ".", "c", "=", "None", "\n", "self", ".", "X", "=", "None", "\n", "self", ".", "Y", "=", "None", "\n", "self", ".", "s", "=", "s", "\n", "self", ".", "v", "=", "v", "\n", "self", ".", "boundaries", "=", "boundaries", "\n", "self", ".", "outdim", "=", "len", "(", "boundaries", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.OneClassSSVM.OneClassSSVM.fit": [[37, 99], ["cvxopt.matrix", "cvxopt.matrix", "cvxopt.matrix", "cvxopt.matrix", "cvxopt.matrix", "cvxopt.solvers.qp", "numpy.array", "cvxopt.matrix", "cvxopt.matrix", "numpy.vstack", "numpy.hstack", "numpy.ones", "numpy.ones", "print", "time.time", "time.time", "print", "OneClassSSVM.OneClassSSVM.K_matrix", "numpy.ones", "numpy.zeros", "numpy.identity", "numpy.zeros", "numpy.identity", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.OneClassSSVM.OneClassSSVM.K_matrix"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", ")", ":", "\n", "        ", "\"\"\"Computes best w using cutting plane algorithm\n        Solves the following minimization problem using quadratic solvers\n        from cvxopt:\n        K \\in R^{m \\times m}\n        a \\in R^m\n        1_v = [ 1, 1, ..., 1] \\in R^m\n\n        min_{c} 1/2 <a,Ka>\n        s.t. 0 <= a <= 1/(v*m)\n             <1_v,a> = 1\n\n        ----------\n        X : {array-like, sparse matrix}, shape (m, d_in)\n            The training input samples.\n        y : array-like, shape (m, d_out)\n            The target values (class labels in classification, real numbers in\n            regression).\n        Returns\n        -------\n        self : object\n            Returns self.\n        \"\"\"", "\n", "self", ".", "is_fitted_", "=", "True", "\n", "self", ".", "X", "=", "X", "\n", "self", ".", "Y", "=", "y", "\n", "m", "=", "X", ".", "shape", "[", "0", "]", "\n", "\n", "# CVXOPT solves problem in the form:", "\n", "#   min_c 1\\2 <c,Pc> + <q, c>", "\n", "#   s.t. Gc <= h", "\n", "#        Ac =  b", "\n", "# Prepare the problem in such form", "\n", "P", "=", "cvxopt_matrix", "(", "self", ".", "K_matrix", "(", "X", ",", "y", ")", "/", "2", ")", "# <c,Kc>", "\n", "\n", "if", "self", ".", "balls", ":", "\n", "            ", "q", "=", "cvxopt_matrix", "(", "np", ".", "ones", "(", "m", ")", ")", "\n", "", "else", ":", "\n", "            ", "q", "=", "cvxopt_matrix", "(", "np", ".", "zeros", "(", "m", ")", ")", "# <q,c>", "\n", "\n", "", "G", "=", "cvxopt_matrix", "(", "np", ".", "vstack", "(", "(", "-", "np", ".", "identity", "(", "m", ")", ",", "np", ".", "identity", "(", "m", ")", ")", ")", ")", "\n", "h", "=", "cvxopt_matrix", "(", "np", ".", "hstack", "(", "(", "np", ".", "zeros", "(", "m", ")", ",", "np", ".", "ones", "(", "m", ")", "/", "(", "self", ".", "v", ")", ")", ")", ")", "# s.t. Gc <= h", "\n", "\n", "A", "=", "cvxopt_matrix", "(", "np", ".", "ones", "(", "(", "1", ",", "m", ")", ")", ")", "\n", "b", "=", "cvxopt_matrix", "(", "np", ".", "ones", "(", "1", ")", ")", "\n", "\n", "# cvxopt parameters", "\n", "cvxopt_solvers", ".", "options", "[", "'abstol'", "]", "=", "1e-5", "\n", "cvxopt_solvers", ".", "options", "[", "'reltol'", "]", "=", "1e-5", "\n", "cvxopt_solvers", ".", "options", "[", "'feastol'", "]", "=", "1e-5", "\n", "\n", "if", "m", ">", "1", ":", "\n", "            ", "print", "(", "f\"Training OC-SVM model with {m} training points\"", ")", "\n", "t0", "=", "time", ".", "time", "(", ")", "\n", "", "sol", "=", "cvxopt_solvers", ".", "qp", "(", "P", ",", "q", ",", "G", ",", "h", ",", "A", ",", "b", ")", "\n", "self", ".", "c", "=", "np", ".", "array", "(", "sol", "[", "'x'", "]", ")", "\n", "if", "m", ">", "1", ":", "\n", "            ", "t1", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "f\"Training completed in {(t1-t0)/60} mins\"", ")", "\n", "\n", "# `fit` should always return `self`", "\n", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.OneClassSSVM.OneClassSSVM.predict": [[100, 138], ["sklearn.utils.validation.check_is_fitted", "sklearn.utils.validation.check_array", "numpy.full", "enumerate", "out", "time.time", "time.time", "out", "numpy.array", "OneClassSSVM.OneClassSSVM.inside_boundaries", "print", "scipy.optimize.minimize", "numpy.random.random"], "methods", ["home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.OneClassSSVM.OneClassSSVM.inside_boundaries"], ["", "def", "predict", "(", "self", ",", "X", ",", "y0", "=", "None", ",", "is_sequence", "=", "False", ",", "\n", "out", "=", "None", ")", ":", "\n", "        ", "\"\"\" A reference implementation of a predicting function.\n        Parameters\n        ----------\n        X : {array-like, sparse matrix}, shape (n_samples, n_features)\n            The test input samples.\n        Returns\n        -------\n        y : ndarray, shape (n_samples,)\n            Returns an array of joints angles.\n        \"\"\"", "\n", "check_is_fitted", "(", "self", ",", "'is_fitted_'", ")", "\n", "X", "=", "check_array", "(", "X", ",", "accept_sparse", "=", "True", ")", "\n", "if", "out", "is", "None", ":", "\n", "            ", "out", "=", "print", "\n", "\n", "# y0 = np.array([(high-low)*np.random.random() + low for low, high in self.boundaries])", "\n", "\n", "", "y_hat", "=", "np", ".", "full", "(", "(", "X", ".", "shape", "[", "0", "]", ",", "self", ".", "outdim", ")", ",", "np", ".", "inf", ")", "\n", "if", "X", ".", "shape", "[", "0", "]", ">", "1", ":", "\n", "            ", "out", "(", "f\"Predicting {X.shape[0]} test points\"", ")", "\n", "t0", "=", "time", ".", "time", "(", ")", "\n", "", "for", "idx", ",", "x", "in", "enumerate", "(", "X", ")", ":", "\n", "            ", "if", "y0", "is", "None", "and", "(", "not", "is_sequence", "or", "idx", "==", "0", ")", ":", "\n", "                ", "y0", "=", "np", ".", "array", "(", "[", "(", "high", "-", "low", ")", "*", "np", ".", "random", ".", "random", "(", ")", "+", "low", "for", "low", ",", "high", "in", "self", ".", "boundaries", "]", ")", "\n", "", "elif", "is_sequence", "and", "idx", ">", "0", ":", "\n", "                ", "y0", "=", "y_hat", "[", "idx", "-", "1", "]", "\n", "\n", "", "y_hat", "[", "idx", "]", "=", "minimize", "(", "self", ".", "f", ",", "x0", "=", "y0", ",", "args", "=", "(", "x", "[", "np", ".", "newaxis", ",", ":", "]", ")", ",", "method", "=", "'L-BFGS-B'", ",", "bounds", "=", "self", ".", "boundaries", ",", "#jac=self.grad_f,", "\n", "options", "=", "{", "'gtol'", ":", "1e-9", ",", "'disp'", ":", "False", ",", "'maxiter'", ":", "40000", ",", "'maxfun'", ":", "30000", ",", "'ftol'", ":", "1e-9", ",", "'maxls'", ":", "30", "}", ")", ".", "x", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "if", "not", "self", ".", "inside_boundaries", "(", "y_hat", "[", "idx", "]", ")", ":", "\n", "                ", "print", "(", "f\"[{idx}] outside of boundaries\"", ")", "\n", "", "", "if", "X", ".", "shape", "[", "0", "]", ">", "1", ":", "\n", "            ", "t1", "=", "time", ".", "time", "(", ")", "\n", "out", "(", "f\"Inference completed in {(t1-t0)/60} mins\"", ")", "\n", "\n", "", "return", "y_hat", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.OneClassSSVM.OneClassSSVM.score": [[139, 143], ["OneClassSSVM.OneClassSSVM.predict", "numpy.mean", "numpy.sum"], "methods", ["home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.NN.fc_nn.predict"], ["", "def", "score", "(", "self", ",", "X_test", ",", "Y_test", ")", ":", "\n", "        ", "\"\"\" Evaluates the squared loss over some test set \"\"\"", "\n", "prediction", "=", "self", ".", "predict", "(", "X_test", ")", "# predict", "\n", "return", "np", ".", "mean", "(", "np", ".", "sum", "(", "(", "Y_test", "-", "prediction", ")", "**", "2", ",", "axis", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.OneClassSSVM.OneClassSSVM.save": [[144, 155], ["pickle.dump", "open"], "methods", ["None"], ["", "def", "save", "(", "self", ",", "output_folder", ",", "save_name", ")", ":", "\n", "        ", "\"\"\"\n        Saves the model in a .pickle file\n        :param output_folder: destination folder\n        :param save_name: name of the file\n        \"\"\"", "\n", "OC_SVM", "=", "{", "'c'", ":", "self", ".", "c", ",", "'X'", ":", "self", ".", "X", ",", "'Y'", ":", "self", ".", "Y", ",", "'s'", ":", "self", ".", "s", ",", "'k'", ":", "self", ".", "k", ",", "'psi'", ":", "self", ".", "psi", ",", "'v'", ":", "self", ".", "v", "}", "\n", "\n", "if", "save_name", "is", "None", ":", "\n", "            ", "save_name", "=", "f'OC_SVM.pickle'", "\n", "", "pickle", ".", "dump", "(", "OC_SVM", ",", "open", "(", "output_folder", "/", "save_name", ",", "'wb'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.OneClassSSVM.OneClassSSVM.loss": [[156, 158], ["numpy.sum"], "methods", ["None"], ["", "def", "loss", "(", "self", ",", "y", ",", "y_hat", ")", ":", "\n", "        ", "return", "np", ".", "sum", "(", "y", "**", "2", "-", "y_hat", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.OneClassSSVM.OneClassSSVM.psi": [[159, 163], ["numpy.hstack", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos"], "methods", ["None"], ["", "def", "psi", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "\"\"\" Structured feature map \"\"\"", "\n", "return", "np", ".", "hstack", "(", "(", "x", ",", "np", ".", "sin", "(", "x", ")", ",", "np", ".", "cos", "(", "x", ")", ",", "np", ".", "sin", "(", "x", ")", "*", "np", ".", "cos", "(", "x", ")", ",", "\n", "y", ",", "np", ".", "sin", "(", "y", ")", ",", "np", ".", "cos", "(", "y", ")", ",", "np", ".", "sin", "(", "y", ")", "*", "np", ".", "cos", "(", "y", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.OneClassSSVM.OneClassSSVM.inside_boundaries": [[164, 169], ["zip"], "methods", ["None"], ["", "def", "inside_boundaries", "(", "self", ",", "Q", ")", ":", "\n", "        ", "for", "q", ",", "bounds", "in", "zip", "(", "Q", ",", "self", ".", "boundaries", ")", ":", "\n", "            ", "if", "q", "<", "bounds", "[", "0", "]", "or", "q", ">", "bounds", "[", "1", "]", ":", "\n", "                ", "return", "False", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.OneClassSSVM.OneClassSSVM.f": [[170, 181], ["OneClassSSVM.OneClassSSVM.psi", "OneClassSSVM.OneClassSSVM.psi", "crisp.utils.planar_utils.sqdist", "numpy.dot", "numpy.squeeze", "numpy.exp"], "methods", ["home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.experiments_scripts.panda_demo.psi", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.experiments_scripts.panda_demo.psi", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.utils.planar_utils.sqdist"], ["", "", "def", "f", "(", "self", ",", "x", ",", "actual_x", ")", ":", "\n", "        ", "\"\"\" Functional to be minimized for One Class Structured SVM.\n        Reference:\n         B\u00f3csi, Botond, et al. \"Learning tracking control with forward models.\"\n         2012 IEEE International Conference on Robotics and Automation. IEEE, 2012.\"\"\"", "\n", "if", "x", ".", "ndim", "==", "1", ":", "\n", "            ", "x", "=", "x", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "", "psi_tr", "=", "self", ".", "psi", "(", "self", ".", "X", ",", "self", ".", "Y", ")", "\n", "psi", "=", "self", ".", "psi", "(", "actual_x", ",", "x", ")", "\n", "D", "=", "sqdist", "(", "psi", ",", "psi_tr", ")", "\n", "return", "-", "np", ".", "dot", "(", "np", ".", "squeeze", "(", "self", ".", "c", ")", ",", "np", ".", "exp", "(", "-", "D", "/", "(", "2", "*", "self", ".", "s", "**", "2", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.OneClassSSVM.OneClassSSVM.K_matrix": [[182, 187], ["OneClassSSVM.OneClassSSVM.psi", "crisp.utils.planar_utils.sqdist", "numpy.exp"], "methods", ["home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.experiments_scripts.panda_demo.psi", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.utils.planar_utils.sqdist"], ["", "def", "K_matrix", "(", "self", ",", "X", ",", "Y", ")", ":", "\n", "        ", "\"\"\" Computes the kernel matrix wit the structured feature map \"\"\"", "\n", "psi", "=", "self", ".", "psi", "(", "X", ",", "Y", ")", "\n", "D", "=", "sqdist", "(", "psi", ",", "psi", ")", "\n", "return", "np", ".", "exp", "(", "-", "D", "/", "(", "2", "*", "self", ".", "s", "**", "2", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.OneClassSSVM.OneClassSSVM.grad_f": [[188, 198], ["OneClassSSVM.OneClassSSVM.psi", "OneClassSSVM.OneClassSSVM.psi", "crisp.utils.planar_utils.sqdist", "numpy.exp", "numpy.dot", "numpy.cos", "numpy.sin", "OneClassSSVM.OneClassSSVM.c.squeeze", "numpy.sin", "numpy.cos"], "methods", ["home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.experiments_scripts.panda_demo.psi", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.experiments_scripts.panda_demo.psi", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.utils.planar_utils.sqdist"], ["", "def", "grad_f", "(", "self", ",", "x", ",", "actual_x", ")", ":", "\n", "        ", "\"\"\" Gradient of f w.r.t to x, needs testing \"\"\"", "\n", "if", "x", ".", "ndim", "==", "1", ":", "\n", "            ", "x", "=", "x", "[", "np", ".", "newaxis", ",", ":", "]", "\n", "", "psi_tr", "=", "self", ".", "psi", "(", "self", ".", "X", ",", "self", ".", "Y", ")", "\n", "psi", "=", "self", ".", "psi", "(", "actual_x", ",", "x", ")", "\n", "D", "=", "sqdist", "(", "psi", ",", "psi_tr", ")", "\n", "f_evals", "=", "(", "1", "/", "self", ".", "s", "**", "2", ")", "*", "np", ".", "exp", "(", "-", "D", "/", "(", "2", "*", "self", ".", "s", "**", "2", ")", ")", "\n", "grads", "=", "x", "-", "self", ".", "Y", "-", "np", ".", "sin", "(", "self", ".", "Y", ")", "*", "np", ".", "cos", "(", "x", ")", "+", "np", ".", "cos", "(", "self", ".", "Y", ")", "*", "np", ".", "sin", "(", "x", ")", "\n", "return", "-", "np", ".", "dot", "(", "self", ".", "c", ".", "squeeze", "(", ")", ",", "grads", "*", "f_evals", "[", ":", ",", "np", ".", "newaxis", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.OneClassSSVM.OneClassSSVM.gd": [[199, 207], ["range", "OneClassSSVM.OneClassSSVM.grad_f", "print", "numpy.linalg.norm", "OneClassSSVM.OneClassSSVM.grad_f"], "methods", ["home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.OneClassSSVM.OneClassSSVM.grad_f", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.OneClassSSVM.OneClassSSVM.grad_f"], ["", "def", "gd", "(", "self", ",", "y0", ",", "x", ")", ":", "\n", "        ", "\"\"\" Gradient descent base implementation \"\"\"", "\n", "y", "=", "y0", "\n", "for", "idx", "in", "range", "(", "500", ")", ":", "\n", "            ", "y", "-=", "1e+1", "*", "self", ".", "grad_f", "(", "y", ",", "x", ")", "\n", "if", "idx", "%", "100", "==", "0", ":", "\n", "                ", "print", "(", "f\"Grad norm at iter {idx}:\\t {np.linalg.norm(self.grad_f(y, x))}\"", ")", "\n", "", "", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.OneClassSSVM.OneClassSSVM.load_state": [[208, 223], ["pickle.load", "open", "print", "sys.exit"], "methods", ["None"], ["", "def", "load_state", "(", "self", ",", "path", ")", ":", "\n", "        ", "\"\"\" Loads a model saved with 'save' function \"\"\"", "\n", "try", ":", "\n", "            ", "state", "=", "pickle", ".", "load", "(", "open", "(", "path", ",", "'rb'", ")", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "            ", "print", "(", "f\"OneClass_SVM.load_state(): Could not find the model to load, please check the path\"", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "", "self", ".", "s", "=", "state", "[", "'s'", "]", "\n", "self", ".", "c", "=", "state", "[", "'c'", "]", "\n", "self", ".", "X", "=", "state", "[", "'X'", "]", "\n", "self", ".", "Y", "=", "state", "[", "'Y'", "]", "\n", "self", ".", "k", "=", "state", "[", "'k'", "]", "\n", "self", ".", "v", "=", "state", "[", "'v'", "]", "\n", "self", ".", "psi", "=", "state", "[", "'psi'", "]", "\n", "self", ".", "is_fitted_", "=", "True", "\n", "", "", ""]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.NN.fc_nn.__init__": [[15, 28], ["torch.nn.modules.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.NN.fc_nn.__init__"], ["def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "device", ")", ":", "\n", "        ", "super", "(", "fc_nn", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "self", ".", "input_dim", ",", "64", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "64", ",", "128", ")", "\n", "self", ".", "fc3", "=", "nn", ".", "Linear", "(", "128", ",", "128", ")", "\n", "self", ".", "fc4", "=", "nn", ".", "Linear", "(", "128", ",", "128", ")", "\n", "self", ".", "fc5", "=", "nn", ".", "Linear", "(", "128", ",", "64", ")", "\n", "self", ".", "fc6", "=", "nn", ".", "Linear", "(", "64", ",", "64", ")", "\n", "self", ".", "fc7", "=", "nn", ".", "Linear", "(", "64", ",", "self", ".", "output_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.NN.fc_nn.forward": [[29, 38], ["NN.fc_nn.fc1", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "NN.fc_nn.fc7", "NN.fc_nn.fc2", "NN.fc_nn.fc3", "NN.fc_nn.fc4", "NN.fc_nn.fc5", "NN.fc_nn.fc6"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "fc1", "(", "x", ")", "\n", "x", "=", "th", ".", "tanh", "(", "self", ".", "fc2", "(", "x", ")", ")", "\n", "x", "=", "th", ".", "tanh", "(", "self", ".", "fc3", "(", "x", ")", ")", "\n", "x", "=", "th", ".", "tanh", "(", "self", ".", "fc4", "(", "x", ")", ")", "\n", "x", "=", "th", ".", "tanh", "(", "self", ".", "fc5", "(", "x", ")", ")", "\n", "x", "=", "th", ".", "tanh", "(", "self", ".", "fc6", "(", "x", ")", ")", "\n", "x", "=", "self", ".", "fc7", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.NN.fc_nn.predict": [[39, 48], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "numpy.full", "enumerate", "NN.fc_nn.forward().cpu().numpy", "NN.fc_nn.forward().cpu().numpy", "NN.fc_nn.forward().cpu", "NN.fc_nn.forward().cpu", "NN.fc_nn.forward", "NN.fc_nn.forward", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.NN.fc_nn.forward", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.NN.fc_nn.forward"], ["", "def", "predict", "(", "self", ",", "X", ",", "y0", "=", "None", ",", "yte", "=", "None", ",", "is_sequence", "=", "False", ")", ":", "\n", "        ", "with", "th", ".", "no_grad", "(", ")", ":", "\n", "            ", "if", "X", ".", "ndim", ">", "1", ":", "\n", "                ", "preds", "=", "np", ".", "full", "(", "(", "X", ".", "shape", "[", "0", "]", ",", "self", ".", "output_dim", ")", ",", "np", ".", "inf", ")", "\n", "for", "idx", ",", "point", "in", "enumerate", "(", "X", ")", ":", "\n", "                    ", "preds", "[", "idx", "]", "=", "(", "self", ".", "forward", "(", "th", ".", "tensor", "(", "point", ",", "dtype", "=", "th", ".", "float", ")", ".", "to", "(", "self", ".", "device", ")", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", "\n", "", "return", "preds", ",", "{", "}", "\n", "", "else", ":", "\n", "                ", "return", "self", ".", "forward", "(", "th", ".", "tensor", "(", "X", ",", "dtype", "=", "th", ".", "float", ")", ".", "to", "(", "self", ".", "device", ")", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ",", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.NN.fc_nn.evaluate": [[49, 53], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "numpy.mean", "NN.fc_nn.predict"], "methods", ["home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.NN.fc_nn.predict"], ["", "", "", "def", "evaluate", "(", "self", ",", "xtest", ",", "ytest", ")", ":", "\n", "        ", "with", "th", ".", "no_grad", "(", ")", ":", "\n", "            ", "preds", "=", "self", ".", "predict", "(", "xtest", ")", "[", "0", "]", "\n", "return", "np", ".", "mean", "(", "(", "ytest", "-", "preds", ")", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.NN.trainer": [[54, 105], ["pathlib.Path", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "model.to", "torch.MSELoss", "torch.Adam", "print", "time.time", "copy.deepcopy", "copy.deepcopy.load_state_dict", "time.time", "print", "model.parameters", "NN.train_epoch", "torch.load", "torch.from_numpy().float", "torch.from_numpy().float", "model.evaluate", "print", "print", "torch.from_numpy", "torch.from_numpy", "torch.save", "torch.save", "model.state_dict", "model.state_dict"], "function", ["home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.NN.train_epoch", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.NN.fc_nn.evaluate", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.OneClassSSVM.OneClassSSVM.save", "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.OneClassSSVM.OneClassSSVM.save"], ["", "", "", "def", "trainer", "(", "xtrain", ",", "ytrain", ",", "model", ",", "device", ",", "lr", "=", "0.0001", ",", "max_epochs", "=", "10", ",", "output_folder", "=", "Path", "(", "','", ")", ",", "save_name", "=", "None", ",", "xval", "=", "None", ",", "yval", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    Trainer function for simple_nn\n    :param xtrain: x of training set\n    :param ytrain: y of training se\n    :param model: any pre-existing model to use as a starting training point\n    :param device: device where to store the model, CPU or GPU\n    :param max_epochs: maximum number of training peochs (1 epoch = 1 pass over the whole training set)\n    :param output_folder: wheere to save the models during training\n    :param save_name: name for saving the model\n    :param xval:\n    :param yval:\n    :return: the model with minimum loss on the validation set\n    \"\"\"", "\n", "if", "save_name", "is", "None", ":", "\n", "        ", "save_name", "=", "'NN'", "\n", "", "ntrain", "=", "xtrain", ".", "shape", "[", "0", "]", "\n", "best_val_loss", "=", "np", ".", "inf", "\n", "\n", "xtrain_th", "=", "th", ".", "from_numpy", "(", "xtrain", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "ytrain_th", "=", "th", ".", "from_numpy", "(", "ytrain", ")", ".", "float", "(", ")", ".", "to", "(", "device", ")", "\n", "model", ".", "to", "(", "device", ")", "\n", "criterion", "=", "nn", ".", "MSELoss", "(", ")", "\n", "\n", "# optimizer = optim.SGD(model.parameters(), lr=0.01)", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "lr", "=", "lr", ",", "weight_decay", "=", "1e-3", ")", "\n", "\n", "print", "(", "f\"Training NN model with {ntrain} training points\"", ")", "\n", "t0", "=", "time", ".", "time", "(", ")", "\n", "epoch", "=", "0", "\n", "while", "epoch", "<", "max_epochs", ":", "\n", "        ", "epoch_loss", ",", "net", ",", "optimizer", "=", "train_epoch", "(", "xtrain_th", ",", "ytrain_th", ",", "model", ",", "optimizer", ",", "\n", "criterion", ",", "b_size", "=", "200", ",", "device", "=", "device", ",", ")", "\n", "if", "(", "epoch", "+", "1", ")", "%", "50", "==", "0", "or", "epoch", "==", "0", ":", "\n", "            ", "if", "xval", "is", "not", "None", "and", "yval", "is", "not", "None", ":", "\n", "                ", "val_loss", "=", "model", ".", "evaluate", "(", "xval", ",", "yval", ")", "\n", "if", "val_loss", "<", "best_val_loss", ":", "\n", "                    ", "th", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "output_folder", "/", "(", "save_name", "+", "'_best.pth'", ")", ")", "\n", "best_val_loss", "=", "val_loss", "\n", "", "print", "(", "f'[Epoch: {epoch + 1}/{max_epochs}] Tr loss: {epoch_loss / xtrain.shape[0]:7.5f}\\t Val loss: {val_loss:7.5f}'", ")", "\n", "", "else", ":", "\n", "                ", "if", "epoch", "==", "0", ":", "\n", "                    ", "th", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "output_folder", "/", "(", "save_name", "+", "'_best.pth'", ")", ")", "\n", "", "print", "(", "f'[Epoch: {epoch + 1}/{max_epochs}, Points:{xtrain.shape[0]}] loss: {epoch_loss / xtrain.shape[0]:7.5f}'", ")", "\n", "", "", "epoch", "+=", "1", "\n", "\n", "", "best_on_val", "=", "copy", ".", "deepcopy", "(", "model", ")", "\n", "best_on_val", ".", "load_state_dict", "(", "th", ".", "load", "(", "output_folder", "/", "(", "save_name", "+", "'_best.pth'", ")", ")", ")", "\n", "t1", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "f\"Training completed in {(t1 - t0) / 60} mins\"", ")", "\n", "return", "model", ",", "best_on_val", "\n", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.algorithms.NN.train_epoch": [[106, 124], ["torch.randperm", "range", "xtrain[].to", "optimizer.zero_grad", "net", "criterion", "criterion.backward", "optimizer.step", "criterion.item", "min", "min"], "function", ["home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.robots.planar_5links_robot.planar_5links_robot.step"], ["", "def", "train_epoch", "(", "xtrain", ",", "ytrain", ",", "net", ",", "optimizer", ",", "criterion", ",", "b_size", ",", "device", ")", ":", "\n", "    ", "\"\"\"\n    Trains a single epoch of the supplied model\n    :return: the loss at the end of the epoch on the training set, the model and the optimizer used for training\n    \"\"\"", "\n", "epoch_loss", "=", "0.0", "\n", "indexes", "=", "th", ".", "randperm", "(", "xtrain", ".", "shape", "[", "0", "]", ")", "\n", "\n", "for", "idx", "in", "range", "(", "0", ",", "xtrain", ".", "shape", "[", "0", "]", ",", "b_size", ")", ":", "\n", "        ", "inputs", "=", "xtrain", "[", "indexes", "[", "idx", ":", "min", "(", "idx", "+", "b_size", ",", "xtrain", ".", "shape", "[", "0", "]", ")", "]", "]", ".", "to", "(", "device", ")", "\n", "labels", "=", "ytrain", "[", "indexes", "[", "idx", ":", "min", "(", "idx", "+", "b_size", ",", "xtrain", ".", "shape", "[", "0", "]", ")", "]", "]", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "outputs", "=", "net", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "labels", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "epoch_loss", "+=", "loss", ".", "item", "(", ")", "\n", "", "return", "epoch_loss", ",", "net", ",", "optimizer", "", "", ""]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.experiments_scripts.planar_manipulator_demo.psi": [[24, 30], ["numpy.hstack", "numpy.atleast_2d", "numpy.atleast_2d", "numpy.sin", "numpy.cos", "numpy.atleast_2d", "numpy.exp", "numpy.amin", "numpy.abs", "numpy.abs"], "function", ["None"], ["def", "psi", "(", "x", ")", ":", "\n", "    ", "\"\"\" Feature map \"\"\"", "\n", "return", "np", ".", "hstack", "(", "(", "x", "[", ":", ",", ":", "2", "]", "/", "500", ",", "\n", "0.5", "*", "(", "1", "/", "(", "1", "+", "np", ".", "exp", "(", "-", "x", "[", ":", ",", ":", "2", "]", ")", ")", ")", "-", "0.5", ",", "\n", "np", ".", "atleast_2d", "(", "np", ".", "sin", "(", "x", "[", ":", ",", "2", "]", ")", ")", ".", "T", ",", "np", ".", "atleast_2d", "(", "np", ".", "cos", "(", "x", "[", ":", ",", "2", "]", ")", ")", ".", "T", ",", "\n", "(", "np", ".", "atleast_2d", "(", "np", ".", "amin", "(", "[", "np", ".", "abs", "(", "x", "[", ":", ",", "2", "]", ")", ",", "2", "*", "np", ".", "pi", "-", "np", ".", "abs", "(", "x", "[", ":", ",", "2", "]", ")", "]", ",", "axis", "=", "0", ")", ")", ".", "T", "/", "(", "np", ".", "pi", "*", "0.5", ")", ")", "-", "1", ")", ")", "\n", "", "pos_dimensions", "=", "6", "\n"]], "home.repos.pwc.inspect_result.gmmarconi_CRiSP-for-Misspecified-Robot-Model.experiments_scripts.panda_demo.psi": [[29, 32], ["numpy.hstack"], "function", ["None"], ["def", "psi", "(", "x", ")", ":", "\n", "    ", "return", "np", ".", "hstack", "(", "(", "x", "[", ":", ",", ":", "3", "]", "*", "20", ",", "\n", "x", "[", ":", ",", "3", ":", "]", ")", ")", "\n", "\n"]]}