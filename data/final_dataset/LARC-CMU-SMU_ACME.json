{"home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.GLU.__init__": [[26, 28], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.triplet_loss.TripletLoss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "GLU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.GLU.forward": [[29, 34], ["x.size", "int", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "nc", "=", "x", ".", "size", "(", "1", ")", "\n", "assert", "nc", "%", "2", "==", "0", ",", "'channels dont divide 2!'", "\n", "nc", "=", "int", "(", "nc", "/", "2", ")", "\n", "return", "x", "[", ":", ",", ":", "nc", "]", "*", "torch", ".", "sigmoid", "(", "x", "[", ":", ",", "nc", ":", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.ResBlock.__init__": [[64, 72], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torchvision.GLU", "models.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.triplet_loss.TripletLoss.__init__", "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.conv3x3", "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.conv3x3"], ["    ", "def", "__init__", "(", "self", ",", "channel_num", ")", ":", "\n", "        ", "super", "(", "ResBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "block", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "channel_num", ",", "channel_num", "*", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "channel_num", "*", "2", ")", ",", "\n", "GLU", "(", ")", ",", "\n", "conv3x3", "(", "channel_num", ",", "channel_num", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "channel_num", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.ResBlock.forward": [[74, 79], ["torchvision.ResBlock.block"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "out", "=", "self", ".", "block", "(", "x", ")", "\n", "out", "+=", "residual", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.TableModule.__init__": [[81, 83], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.triplet_loss.TripletLoss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "TableModule", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.TableModule.forward": [[84, 87], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "dim", ")", ":", "\n", "        ", "y", "=", "torch", ".", "cat", "(", "x", ",", "dim", ")", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.stRNN.__init__": [[93, 96], ["torch.Module.__init__", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.triplet_loss.TripletLoss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "stRNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "input_size", "=", "opts", ".", "stDim", ",", "hidden_size", "=", "opts", ".", "srnnDim", ",", "bidirectional", "=", "False", ",", "batch_first", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.stRNN.forward": [[97, 122], ["sq_lengths.sort", "sorted_idx.view().expand_as", "x.gather", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torchvision.stRNN.lstm", "sorted_idx.sort", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "torch.nn.utils.rnn.pad_packed_sequence", "original_idx.view().expand_as", "unpacked.gather().gather", "output.view.view.view", "sorted_idx.view().expand_as.long", "sorted_len.cpu().data.numpy", "idx.long", "output.view.view.size", "sorted_idx.view", "original_idx.view", "unpacked.gather", "output.view.view.size", "output.view.view.size", "unpacked.size", "unpacked.size", "original_idx.view().expand_as.long", "sorted_len.cpu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "sq_lengths", ")", ":", "\n", "# here we use a previous LSTM to get the representation of each instruction ", "\n", "# sort sequence according to the length", "\n", "        ", "sorted_len", ",", "sorted_idx", "=", "sq_lengths", ".", "sort", "(", "0", ",", "descending", "=", "True", ")", "\n", "index_sorted_idx", "=", "sorted_idx", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", ".", "expand_as", "(", "x", ")", "\n", "sorted_inputs", "=", "x", ".", "gather", "(", "0", ",", "index_sorted_idx", ".", "long", "(", ")", ")", "\n", "# pack sequence", "\n", "packed_seq", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "\n", "sorted_inputs", ",", "sorted_len", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ",", "batch_first", "=", "True", ")", "\n", "# pass it to the lstm", "\n", "out", ",", "hidden", "=", "self", ".", "lstm", "(", "packed_seq", ")", "\n", "\n", "# unsort the output", "\n", "_", ",", "original_idx", "=", "sorted_idx", ".", "sort", "(", "0", ",", "descending", "=", "False", ")", "\n", "\n", "unpacked", ",", "_", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pad_packed_sequence", "(", "out", ",", "batch_first", "=", "True", ")", "\n", "unsorted_idx", "=", "original_idx", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", ".", "expand_as", "(", "unpacked", ")", "\n", "# we get the last index of each sequence in the batch", "\n", "idx", "=", "(", "sq_lengths", "-", "1", ")", ".", "view", "(", "-", "1", ",", "1", ")", ".", "expand", "(", "unpacked", ".", "size", "(", "0", ")", ",", "unpacked", ".", "size", "(", "2", ")", ")", ".", "unsqueeze", "(", "1", ")", "\n", "# we sort and get the last element of each sequence", "\n", "output", "=", "unpacked", ".", "gather", "(", "0", ",", "unsorted_idx", ".", "long", "(", ")", ")", ".", "gather", "(", "1", ",", "idx", ".", "long", "(", ")", ")", "\n", "output", "=", "output", ".", "view", "(", "output", ".", "size", "(", "0", ")", ",", "output", ".", "size", "(", "1", ")", "*", "output", ".", "size", "(", "2", ")", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.ingRNN.__init__": [[124, 131], ["torch.Module.__init__", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torchwordemb.load_word2vec_bin", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torchvision.ingRNN.embs.weight.data.copy_", "vec.size"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.triplet_loss.TripletLoss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ingRNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "irnn", "=", "nn", ".", "LSTM", "(", "input_size", "=", "opts", ".", "ingrW2VDim", ",", "hidden_size", "=", "opts", ".", "irnnDim", ",", "bidirectional", "=", "True", ",", "batch_first", "=", "True", ")", "\n", "_", ",", "vec", "=", "torchwordemb", ".", "load_word2vec_bin", "(", "opts", ".", "ingrW2V", ")", "\n", "self", ".", "embs", "=", "nn", ".", "Embedding", "(", "vec", ".", "size", "(", "0", ")", ",", "opts", ".", "ingrW2VDim", ",", "padding_idx", "=", "0", ")", "# not sure about the padding idx ", "\n", "self", ".", "embs", ".", "weight", ".", "data", ".", "copy_", "(", "vec", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.ingRNN.forward": [[135, 163], ["torchvision.ingRNN.embs", "sq_lengths.sort", "sorted_idx.view().expand_as", "torchvision.ingRNN.gather", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torchvision.ingRNN.irnn", "sorted_idx.sort", "original_idx.view().expand_as", "hidden[].gather().transpose().contiguous", "output.view.view.view", "sorted_idx.view().expand_as.long", "sorted_len.cpu().data.numpy", "output.view.view.size", "sorted_idx.view", "original_idx.view", "hidden[].gather().transpose", "output.view.view.size", "output.view.view.size", "sorted_len.cpu", "hidden[].gather"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ",", "sq_lengths", ")", ":", "\n", "\n", "# we get the w2v for each element of the ingredient sequence", "\n", "        ", "x", "=", "self", ".", "embs", "(", "x", ")", "# torch.Size([64, 20, 300])", "\n", "\n", "# sort sequence according to the length", "\n", "sorted_len", ",", "sorted_idx", "=", "sq_lengths", ".", "sort", "(", "0", ",", "descending", "=", "True", ")", "\n", "index_sorted_idx", "=", "sorted_idx", ".", "view", "(", "-", "1", ",", "1", ",", "1", ")", ".", "expand_as", "(", "x", ")", "\n", "sorted_inputs", "=", "x", ".", "gather", "(", "0", ",", "index_sorted_idx", ".", "long", "(", ")", ")", "\n", "# pack sequence", "\n", "packed_seq", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "\n", "sorted_inputs", ",", "sorted_len", ".", "cpu", "(", ")", ".", "data", ".", "numpy", "(", ")", ",", "batch_first", "=", "True", ")", "\n", "# pass it to the rnn", "\n", "out", ",", "hidden", "=", "self", ".", "irnn", "(", "packed_seq", ")", "\n", "\n", "# unsort the output", "\n", "_", ",", "original_idx", "=", "sorted_idx", ".", "sort", "(", "0", ",", "descending", "=", "False", ")", "\n", "\n", "# LSTM", "\n", "# bi-directional", "\n", "unsorted_idx", "=", "original_idx", ".", "view", "(", "1", ",", "-", "1", ",", "1", ")", ".", "expand_as", "(", "hidden", "[", "0", "]", ")", "\n", "# 2 directions x batch_size x num features, we transpose 1st and 2nd dimension", "\n", "output", "=", "hidden", "[", "0", "]", ".", "gather", "(", "1", ",", "unsorted_idx", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "# torch.Size([64, 2, 300])", "\n", "\n", "output", "=", "output", ".", "view", "(", "output", ".", "size", "(", "0", ")", ",", "output", ".", "size", "(", "1", ")", "*", "output", ".", "size", "(", "2", ")", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.TextEmbedding.__init__": [[166, 185], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torchvision.stRNN", "torchvision.ingRNN", "torchvision.TableModule", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.triplet_loss.TripletLoss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "TextEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "recipe_embedding", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "opts", ".", "irnnDim", "*", "2", "+", "opts", ".", "srnnDim", ",", "opts", ".", "embDim", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "semantic_branch", "=", "nn", ".", "Linear", "(", "opts", ".", "embDim", ",", "opts", ".", "numClasses", ")", "\n", "\n", "self", ".", "fc_recipe", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "opts", ".", "embDim", ",", "opts", ".", "embDim", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "opts", ".", "embDim", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "stRNN_", "=", "stRNN", "(", ")", "\n", "self", ".", "ingRNN_", "=", "ingRNN", "(", ")", "\n", "self", ".", "table", "=", "TableModule", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.TextEmbedding.forward": [[186, 196], ["torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torch.is_tensor", "torchvision.TextEmbedding.recipe_embedding", "torchvision.TextEmbedding.table", "torchvision.TextEmbedding.ingRNN_", "torchvision.TextEmbedding.table", "torchvision.TextEmbedding.stRNN_", "torchvision.TextEmbedding.stRNN_"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "y1", ",", "y2", ",", "z1", ",", "z2", ",", "ingrs_emb", "=", "None", ")", ":", "\n", "        ", "if", "torch", ".", "is_tensor", "(", "ingrs_emb", ")", ":", "\n", "            ", "recipe_emb", "=", "self", ".", "table", "(", "[", "self", ".", "stRNN_", "(", "y1", ",", "y2", ")", ",", "ingrs_emb", "]", ",", "1", ")", "# joining on the last dim ", "\n", "", "else", ":", "\n", "            ", "ingrs_emb", "=", "self", ".", "ingRNN_", "(", "z1", ",", "z2", ")", "\n", "recipe_emb", "=", "self", ".", "table", "(", "[", "self", ".", "stRNN_", "(", "y1", ",", "y2", ")", ",", "ingrs_emb", "]", ",", "1", ")", "# joining on the last dim ", "\n", "", "recipe_emb_domain", "=", "self", ".", "recipe_embedding", "(", "recipe_emb", ")", "\n", "\n", "output", "=", "recipe_emb_domain", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.ImageEmbedding.__init__": [[198, 216], ["torch.Module.__init__", "torchvision.resnet50", "torchvision.resnet50", "torchvision.resnet50", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "list", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torchvision.resnet50.children"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.triplet_loss.TripletLoss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "ImageEmbedding", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "resnet", "=", "models", ".", "resnet50", "(", "pretrained", "=", "True", ")", "\n", "modules", "=", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", "# we do not use the last fc layer.", "\n", "self", ".", "visionMLP", "=", "nn", ".", "Sequential", "(", "*", "modules", ")", "\n", "\n", "self", ".", "visual_embedding", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "opts", ".", "imfeatDim", ",", "opts", ".", "embDim", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", ")", "\n", "\n", "self", ".", "semantic_branch", "=", "nn", ".", "Linear", "(", "opts", ".", "embDim", ",", "opts", ".", "numClasses", ")", "\n", "\n", "self", ".", "fc_visual", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "opts", ".", "embDim", ",", "opts", ".", "embDim", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "opts", ".", "embDim", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.ImageEmbedding.forward": [[218, 226], ["torchvision.ImageEmbedding.visionMLP", "visual_emb.view.view.view", "torchvision.ImageEmbedding.visual_embedding", "visual_emb.view.view.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "visual_emb", "=", "self", ".", "visionMLP", "(", "x", ")", "\n", "visual_emb", "=", "visual_emb", ".", "view", "(", "visual_emb", ".", "size", "(", "0", ")", ",", "-", "1", ")", "# batch_size * 2048", "\n", "visual_emb_domain", "=", "self", ".", "visual_embedding", "(", "visual_emb", ")", "\n", "\n", "output", "=", "visual_emb_domain", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.MultiLabelNet.__init__": [[229, 244], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.triplet_loss.TripletLoss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "MultiLabelNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "opts", ".", "embDim", ",", "512", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "256", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "256", ",", "4102", ")", "\n", ")", "\n", "\n", "self", ".", "ingrs_linear", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "opts", ".", "embDim", ",", "512", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "opts", ".", "numClasses", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.MultiLabelNet.forward": [[246, 250], ["torchvision.MultiLabelNet.model", "torchvision.MultiLabelNet.ingrs_linear", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ")", ":", "\n", "        ", "output", "=", "self", ".", "model", "(", "features", ")", "\n", "\n", "return", "[", "nn", ".", "Sigmoid", "(", ")", "(", "output", ")", ",", "self", ".", "ingrs_linear", "(", "features", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.DecoderRNN.__init__": [[253, 262], ["torch.Module.__init__", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.Embedding", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.LSTM", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.triplet_loss.TripletLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "embed_size", ",", "hidden_size", ",", "vocab_size", ",", "num_layers", ",", "max_seq_length", "=", "100", ")", ":", "\n", "        ", "\"\"\"Set the hyper-parameters and build the layers.\"\"\"", "\n", "super", "(", "DecoderRNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "embed", "=", "nn", ".", "Embedding", "(", "vocab_size", ",", "embed_size", ")", "\n", "# self.lstm = nn.LSTM(embed_size, hidden_size, num_layers, batch_first=True)", "\n", "self", ".", "lstm", "=", "nn", ".", "LSTM", "(", "input_size", "=", "embed_size", ",", "hidden_size", "=", "opts", ".", "irnnDim", ",", "bidirectional", "=", "False", ",", "batch_first", "=", "True", ")", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "opts", ".", "irnnDim", ",", "vocab_size", ")", "\n", "self", ".", "ingrs_linear", "=", "nn", ".", "Linear", "(", "opts", ".", "irnnDim", ",", "opts", ".", "irnnDim", "*", "2", ")", "\n", "self", ".", "max_seg_length", "=", "max_seq_length", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.DecoderRNN.forward": [[263, 278], ["torchvision.DecoderRNN.embed", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torch.nn.utils.rnn.pack_padded_sequence", "torchvision.DecoderRNN.lstm", "lengths.sort", "original_idx.view().expand_as", "hidden[].gather().transpose().contiguous", "torchvision.DecoderRNN.ingrs_linear", "torchvision.DecoderRNN.linear", "hidden[].gather().transpose().contiguous.view", "features.unsqueeze", "original_idx.view", "hidden[].gather().transpose", "hidden[].gather().transpose().contiguous.size", "hidden[].gather().transpose().contiguous.size", "hidden[].gather().transpose().contiguous.size", "hidden[].gather"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "features", ",", "captions", ",", "lengths", ")", ":", "\n", "        ", "\"\"\"Decode image feature vectors and generates captions.\"\"\"", "\n", "embeddings", "=", "self", ".", "embed", "(", "captions", ")", "\n", "embeddings", "=", "torch", ".", "cat", "(", "(", "features", ".", "unsqueeze", "(", "1", ")", ",", "embeddings", ")", ",", "1", ")", "\n", "packed", "=", "torch", ".", "nn", ".", "utils", ".", "rnn", ".", "pack_padded_sequence", "(", "embeddings", ",", "lengths", ",", "batch_first", "=", "True", ")", "\n", "outs", ",", "hidden", "=", "self", ".", "lstm", "(", "packed", ")", "\n", "\n", "_", ",", "original_idx", "=", "lengths", ".", "sort", "(", "0", ",", "descending", "=", "False", ")", "\n", "unsorted_idx", "=", "original_idx", ".", "view", "(", "1", ",", "-", "1", ",", "1", ")", ".", "expand_as", "(", "hidden", "[", "0", "]", ")", "\n", "output", "=", "hidden", "[", "0", "]", ".", "gather", "(", "1", ",", "unsorted_idx", ")", ".", "transpose", "(", "0", ",", "1", ")", ".", "contiguous", "(", ")", "\n", "# output = output.view(output.size(0),output.size(1)*output.size(2))", "\n", "output_fea", "=", "self", ".", "ingrs_linear", "(", "output", ".", "view", "(", "output", ".", "size", "(", "0", ")", ",", "output", ".", "size", "(", "1", ")", "*", "output", ".", "size", "(", "2", ")", ")", ")", "\n", "\n", "outputs", "=", "self", ".", "linear", "(", "outs", "[", "0", "]", ")", "\n", "return", "[", "outputs", ",", "output_fea", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.DecoderRNN.sample": [[279, 292], ["features.unsqueeze", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torchvision.DecoderRNN.lstm", "torchvision.DecoderRNN.linear", "torchvision.DecoderRNN.max", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torch.stack.append", "torchvision.DecoderRNN.embed", "inputs.unsqueeze.unsqueeze.unsqueeze", "outs.squeeze"], "methods", ["None"], ["", "def", "sample", "(", "self", ",", "features", ",", "states", "=", "None", ")", ":", "\n", "        ", "\"\"\"Generate captions for given image features using greedy search.\"\"\"", "\n", "sampled_ids", "=", "[", "]", "\n", "inputs", "=", "features", ".", "unsqueeze", "(", "1", ")", "\n", "for", "i", "in", "range", "(", "self", ".", "max_seg_length", ")", ":", "\n", "            ", "outs", ",", "states", "=", "self", ".", "lstm", "(", "inputs", ",", "states", ")", "# outs: (batch_size, 1, hidden_size)", "\n", "outputs", "=", "self", ".", "linear", "(", "outs", ".", "squeeze", "(", "1", ")", ")", "# outputs:  (batch_size, vocab_size)", "\n", "_", ",", "predicted", "=", "outputs", ".", "max", "(", "1", ")", "# predicted: (batch_size)", "\n", "sampled_ids", ".", "append", "(", "predicted", ")", "\n", "inputs", "=", "self", ".", "embed", "(", "predicted", ")", "# inputs: (batch_size, embed_size)", "\n", "inputs", "=", "inputs", ".", "unsqueeze", "(", "1", ")", "# inputs: (batch_size, 1, embed_size)", "\n", "", "sampled_ids", "=", "torch", ".", "stack", "(", "sampled_ids", ",", "1", ")", "# sampled_ids: (batch_size, max_seq_length)", "\n", "return", "sampled_ids", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.text_emb_discriminator.__init__": [[295, 304], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.triplet_loss.TripletLoss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "text_emb_discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "opts", ".", "irnnDim", "*", "2", ",", "512", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "256", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "256", ",", "opts", ".", "numClasses", "*", "2", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.text_emb_discriminator.forward": [[306, 310], ["torchvision.text_emb_discriminator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "fea", ")", ":", "\n", "        ", "output", "=", "self", ".", "model", "(", "fea", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.cross_modal_discriminator.__init__": [[312, 321], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.triplet_loss.TripletLoss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "cross_modal_discriminator", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "model", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "opts", ".", "embDim", ",", "512", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "512", ",", "256", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "nn", ".", "Linear", "(", "256", ",", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.cross_modal_discriminator.forward": [[323, 327], ["torchvision.cross_modal_discriminator.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "fea", ")", ":", "\n", "        ", "output", "=", "self", ".", "model", "(", "fea", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.CA_NET.__init__": [[332, 338], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torchvision.GLU"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.triplet_loss.TripletLoss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "CA_NET", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "t_dim", "=", "opts", ".", "embDim", "\n", "self", ".", "ef_dim", "=", "opts", ".", "EMBEDDING_DIM", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "self", ".", "t_dim", ",", "self", ".", "ef_dim", "*", "4", ",", "bias", "=", "True", ")", "\n", "self", ".", "relu", "=", "GLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.CA_NET.encode": [[339, 344], ["torchvision.CA_NET.relu", "torchvision.CA_NET.fc"], "methods", ["None"], ["", "def", "encode", "(", "self", ",", "text_embedding", ")", ":", "\n", "        ", "x", "=", "self", ".", "relu", "(", "self", ".", "fc", "(", "text_embedding", ")", ")", "\n", "mu", "=", "x", "[", ":", ",", ":", "self", ".", "ef_dim", "]", "\n", "logvar", "=", "x", "[", ":", ",", "self", ".", "ef_dim", ":", "]", "\n", "return", "mu", ",", "logvar", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.CA_NET.reparametrize": [[345, 353], ["torch.autograd.Variable.mul().add_", "torch.autograd.Variable.mul().add_", "torch.autograd.Variable.mul().add_", "torch.autograd.Variable.mul().add_", "torch.autograd.Variable.mul().add_", "torch.autograd.Variable.mul().add_", "torch.autograd.Variable.mul().add_", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "torch.cuda.device", "logvar.mul().exp_", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.FloatTensor().normal_().cuda", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "logvar.get_device", "torch.autograd.Variable.mul", "torch.autograd.Variable.mul", "torch.autograd.Variable.mul", "torch.autograd.Variable.mul", "torch.autograd.Variable.mul", "torch.autograd.Variable.mul", "torch.autograd.Variable.mul", "logvar.mul", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor().normal_", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "logvar.mul().exp_.size"], "methods", ["None"], ["", "def", "reparametrize", "(", "self", ",", "mu", ",", "logvar", ")", ":", "\n", "\n", "        ", "with", "torch", ".", "cuda", ".", "device", "(", "logvar", ".", "get_device", "(", ")", ")", ":", "\n", "            ", "std", "=", "logvar", ".", "mul", "(", "0.5", ")", ".", "exp_", "(", ")", "\n", "eps", "=", "torch", ".", "FloatTensor", "(", "std", ".", "size", "(", ")", ")", ".", "normal_", "(", ")", ".", "cuda", "(", ")", "\n", "eps", "=", "Variable", "(", "eps", ")", "\n", "\n", "", "return", "eps", ".", "mul", "(", "std", ")", ".", "add_", "(", "mu", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.CA_NET.forward": [[354, 358], ["torchvision.CA_NET.encode", "torchvision.CA_NET.reparametrize"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.CA_NET.encode", "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.CA_NET.reparametrize"], ["", "def", "forward", "(", "self", ",", "text_embedding", ")", ":", "\n", "        ", "mu", ",", "logvar", "=", "self", ".", "encode", "(", "text_embedding", ")", "\n", "c_code", "=", "self", ".", "reparametrize", "(", "mu", ",", "logvar", ")", "\n", "return", "c_code", ",", "mu", ",", "logvar", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.INIT_STAGE_G.__init__": [[361, 369], ["torch.Module.__init__", "torchvision.INIT_STAGE_G.define_module"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.triplet_loss.TripletLoss.__init__", "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.D_NET128.define_module"], ["    ", "def", "__init__", "(", "self", ",", "ngf", ")", ":", "\n", "        ", "super", "(", "INIT_STAGE_G", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gf_dim", "=", "ngf", "\n", "if", "opts", ".", "B_CONDITION", ":", "\n", "            ", "self", ".", "in_dim", "=", "opts", ".", "Z_DIM", "+", "opts", ".", "EMBEDDING_DIM", "\n", "", "else", ":", "\n", "            ", "self", ".", "in_dim", "=", "opts", ".", "Z_DIM", "\n", "", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.INIT_STAGE_G.define_module": [[370, 382], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.upBlock", "models.upBlock", "models.upBlock", "models.upBlock", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torchvision.GLU"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.upBlock", "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.upBlock", "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.upBlock", "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.upBlock"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "in_dim", "=", "self", ".", "in_dim", "\n", "ngf", "=", "self", ".", "gf_dim", "\n", "self", ".", "fc", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Linear", "(", "in_dim", ",", "ngf", "*", "4", "*", "4", "*", "2", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm1d", "(", "ngf", "*", "4", "*", "4", "*", "2", ")", ",", "\n", "GLU", "(", ")", ")", "\n", "\n", "self", ".", "upsample1", "=", "upBlock", "(", "ngf", ",", "ngf", "//", "2", ")", "\n", "self", ".", "upsample2", "=", "upBlock", "(", "ngf", "//", "2", ",", "ngf", "//", "4", ")", "\n", "self", ".", "upsample3", "=", "upBlock", "(", "ngf", "//", "4", ",", "ngf", "//", "8", ")", "\n", "self", ".", "upsample4", "=", "upBlock", "(", "ngf", "//", "8", ",", "ngf", "//", "16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.INIT_STAGE_G.forward": [[383, 401], ["torchvision.INIT_STAGE_G.fc", "torchvision.INIT_STAGE_G.view", "torchvision.INIT_STAGE_G.upsample1", "torchvision.INIT_STAGE_G.upsample2", "torchvision.INIT_STAGE_G.upsample3", "torchvision.INIT_STAGE_G.upsample4", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "z_code", ",", "c_code", "=", "None", ")", ":", "\n", "        ", "if", "opts", ".", "B_CONDITION", "and", "c_code", "is", "not", "None", ":", "\n", "            ", "in_code", "=", "torch", ".", "cat", "(", "(", "c_code", ",", "z_code", ")", ",", "1", ")", "\n", "", "else", ":", "\n", "            ", "in_code", "=", "z_code", "\n", "# state size 16ngf x 4 x 4", "\n", "", "out_code", "=", "self", ".", "fc", "(", "in_code", ")", "\n", "out_code", "=", "out_code", ".", "view", "(", "-", "1", ",", "self", ".", "gf_dim", ",", "4", ",", "4", ")", "\n", "# state size 8ngf x 8 x 8", "\n", "out_code", "=", "self", ".", "upsample1", "(", "out_code", ")", "\n", "# state size 4ngf x 16 x 16", "\n", "out_code", "=", "self", ".", "upsample2", "(", "out_code", ")", "\n", "# state size 2ngf x 32 x 32", "\n", "out_code", "=", "self", ".", "upsample3", "(", "out_code", ")", "\n", "# state size ngf x 64 x 64", "\n", "out_code", "=", "self", ".", "upsample4", "(", "out_code", ")", "\n", "\n", "return", "out_code", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.NEXT_STAGE_G.__init__": [[404, 413], ["torch.Module.__init__", "torchvision.NEXT_STAGE_G.define_module"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.triplet_loss.TripletLoss.__init__", "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.D_NET128.define_module"], ["    ", "def", "__init__", "(", "self", ",", "ngf", ",", "num_residual", "=", "opts", ".", "R_NUM", ")", ":", "\n", "        ", "super", "(", "NEXT_STAGE_G", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gf_dim", "=", "ngf", "\n", "if", "opts", ".", "B_CONDITION", ":", "\n", "            ", "self", ".", "ef_dim", "=", "opts", ".", "EMBEDDING_DIM", "\n", "", "else", ":", "\n", "            ", "self", ".", "ef_dim", "=", "opts", ".", "Z_DIM", "\n", "", "self", ".", "num_residual", "=", "num_residual", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.NEXT_STAGE_G._make_layer": [[414, 419], ["range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "channel_num", ")", ":", "\n", "        ", "layers", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "num_residual", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "channel_num", ")", ")", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.NEXT_STAGE_G.define_module": [[420, 427], ["models.Block3x3_relu", "torchvision.NEXT_STAGE_G._make_layer", "models.upBlock"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.Block3x3_relu", "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.NEXT_STAGE_G._make_layer", "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.upBlock"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "ngf", "=", "self", ".", "gf_dim", "\n", "efg", "=", "self", ".", "ef_dim", "\n", "\n", "self", ".", "jointConv", "=", "Block3x3_relu", "(", "ngf", "+", "efg", ",", "ngf", ")", "\n", "self", ".", "residual", "=", "self", ".", "_make_layer", "(", "ResBlock", ",", "ngf", ")", "\n", "self", ".", "upsample", "=", "upBlock", "(", "ngf", ",", "ngf", "//", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.NEXT_STAGE_G.forward": [[428, 441], ["h_code.size", "c_code.repeat.repeat.view", "c_code.repeat.repeat.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torchvision.NEXT_STAGE_G.jointConv", "torchvision.NEXT_STAGE_G.residual", "torchvision.NEXT_STAGE_G.upsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "h_code", ",", "c_code", ")", ":", "\n", "        ", "s_size", "=", "h_code", ".", "size", "(", "2", ")", "\n", "c_code", "=", "c_code", ".", "view", "(", "-", "1", ",", "self", ".", "ef_dim", ",", "1", ",", "1", ")", "\n", "c_code", "=", "c_code", ".", "repeat", "(", "1", ",", "1", ",", "s_size", ",", "s_size", ")", "\n", "# state size (ngf+egf) x in_size x in_size", "\n", "h_c_code", "=", "torch", ".", "cat", "(", "(", "c_code", ",", "h_code", ")", ",", "1", ")", "\n", "# state size ngf x in_size x in_size", "\n", "out_code", "=", "self", ".", "jointConv", "(", "h_c_code", ")", "\n", "out_code", "=", "self", ".", "residual", "(", "out_code", ")", "\n", "# state size ngf/2 x 2in_size x 2in_size", "\n", "out_code", "=", "self", ".", "upsample", "(", "out_code", ")", "\n", "\n", "return", "out_code", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.GET_IMAGE_G.__init__": [[443, 449], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "models.conv3x3", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh", "torch.Tanh"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.triplet_loss.TripletLoss.__init__", "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.conv3x3"], ["    ", "def", "__init__", "(", "self", ",", "ngf", ")", ":", "\n", "        ", "super", "(", "GET_IMAGE_G", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gf_dim", "=", "ngf", "\n", "self", ".", "img", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "ngf", ",", "3", ")", ",", "\n", "nn", ".", "Tanh", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.GET_IMAGE_G.forward": [[451, 454], ["torchvision.GET_IMAGE_G.img"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "h_code", ")", ":", "\n", "        ", "out_img", "=", "self", ".", "img", "(", "h_code", ")", "\n", "return", "out_img", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.G_NET.__init__": [[457, 461], ["torch.Module.__init__", "torchvision.G_NET.define_module"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.triplet_loss.TripletLoss.__init__", "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.D_NET128.define_module"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "G_NET", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gf_dim", "=", "opts", ".", "GF_DIM", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.G_NET.define_module": [[462, 481], ["torchvision.CA_NET", "torchvision.INIT_STAGE_G", "torchvision.GET_IMAGE_G", "torchvision.NEXT_STAGE_G", "torchvision.GET_IMAGE_G", "torchvision.NEXT_STAGE_G", "torchvision.GET_IMAGE_G", "torchvision.NEXT_STAGE_G", "torchvision.GET_IMAGE_G", "torchvision.NEXT_STAGE_G", "torchvision.GET_IMAGE_G"], "methods", ["None"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "if", "opts", ".", "B_CONDITION", ":", "\n", "            ", "self", ".", "ca_net", "=", "CA_NET", "(", ")", "\n", "\n", "", "if", "opts", ".", "BRANCH_NUM", ">", "0", ":", "\n", "            ", "self", ".", "h_net1", "=", "INIT_STAGE_G", "(", "self", ".", "gf_dim", "*", "16", ")", "\n", "self", ".", "img_net1", "=", "GET_IMAGE_G", "(", "self", ".", "gf_dim", ")", "\n", "", "if", "opts", ".", "BRANCH_NUM", ">", "1", ":", "\n", "            ", "self", ".", "h_net2", "=", "NEXT_STAGE_G", "(", "self", ".", "gf_dim", ")", "\n", "self", ".", "img_net2", "=", "GET_IMAGE_G", "(", "self", ".", "gf_dim", "//", "2", ")", "\n", "", "if", "opts", ".", "BRANCH_NUM", ">", "2", ":", "\n", "            ", "self", ".", "h_net3", "=", "NEXT_STAGE_G", "(", "self", ".", "gf_dim", "//", "2", ")", "\n", "self", ".", "img_net3", "=", "GET_IMAGE_G", "(", "self", ".", "gf_dim", "//", "4", ")", "\n", "", "if", "opts", ".", "BRANCH_NUM", ">", "3", ":", "# Recommended structure (mainly limited by GPU memory), and not test yet", "\n", "            ", "self", ".", "h_net4", "=", "NEXT_STAGE_G", "(", "self", ".", "gf_dim", "//", "4", ",", "num_residual", "=", "1", ")", "\n", "self", ".", "img_net4", "=", "GET_IMAGE_G", "(", "self", ".", "gf_dim", "//", "8", ")", "\n", "", "if", "opts", ".", "BRANCH_NUM", ">", "4", ":", "\n", "            ", "self", ".", "h_net4", "=", "NEXT_STAGE_G", "(", "self", ".", "gf_dim", "//", "8", ",", "num_residual", "=", "1", ")", "\n", "self", ".", "img_net4", "=", "GET_IMAGE_G", "(", "self", ".", "gf_dim", "//", "16", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.G_NET.forward": [[482, 495], ["torchvision.G_NET.h_net1", "torchvision.G_NET.h_net2", "torchvision.G_NET.img_net2", "fake_imgs.append", "torchvision.G_NET.ca_net"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "z_code", ",", "text_embedding", "=", "None", ")", ":", "\n", "        ", "if", "opts", ".", "B_CONDITION", "and", "text_embedding", "is", "not", "None", ":", "\n", "            ", "c_code", ",", "mu", ",", "logvar", "=", "self", ".", "ca_net", "(", "text_embedding", ")", "\n", "", "else", ":", "\n", "            ", "c_code", ",", "mu", ",", "logvar", "=", "z_code", ",", "None", ",", "None", "\n", "", "fake_imgs", "=", "[", "]", "\n", "h_code1", "=", "self", ".", "h_net1", "(", "z_code", ",", "c_code", ")", "\n", "h_code2", "=", "self", ".", "h_net2", "(", "h_code1", ",", "c_code", ")", "\n", "fake_img2", "=", "self", ".", "img_net2", "(", "h_code2", ")", "\n", "\n", "fake_imgs", ".", "append", "(", "fake_img2", ")", "\n", "\n", "return", "fake_imgs", ",", "mu", ",", "logvar", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.D_NET128.__init__": [[539, 544], ["torch.Module.__init__", "torchvision.D_NET128.define_module"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.triplet_loss.TripletLoss.__init__", "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.D_NET128.define_module"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "D_NET128", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "df_dim", "=", "opts", ".", "DF_DIM", "\n", "self", ".", "ef_dim", "=", "opts", ".", "EMBEDDING_DIM", "\n", "self", ".", "define_module", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.D_NET128.define_module": [[545, 566], ["models.encode_image_by_16times", "models.downBlock", "models.Block3x3_leakRelu", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "torch.Sigmoid", "models.Block3x3_leakRelu", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU", "torch.LeakyReLU"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.encode_image_by_16times", "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.downBlock", "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.Block3x3_leakRelu", "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.Block3x3_leakRelu"], ["", "def", "define_module", "(", "self", ")", ":", "\n", "        ", "ndf", "=", "self", ".", "df_dim", "\n", "efg", "=", "self", ".", "ef_dim", "\n", "self", ".", "img_code_s16", "=", "encode_image_by_16times", "(", "ndf", ")", "\n", "self", ".", "img_code_s32", "=", "downBlock", "(", "ndf", "*", "8", ",", "ndf", "*", "16", ")", "\n", "self", ".", "img_code_s32_1", "=", "Block3x3_leakRelu", "(", "ndf", "*", "16", ",", "ndf", "*", "8", ")", "\n", "\n", "self", ".", "logits", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "4", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "self", ".", "logits_class", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "1", ",", "kernel_size", "=", "4", ",", "stride", "=", "4", ")", ",", "\n", "nn", ".", "Sigmoid", "(", ")", ")", "\n", "\n", "if", "opts", ".", "B_CONDITION", ":", "\n", "            ", "self", ".", "jointConv", "=", "Block3x3_leakRelu", "(", "ndf", "*", "8", "+", "efg", ",", "ndf", "*", "8", ")", "\n", "self", ".", "uncond_branch", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "8", ",", "ndf", "*", "4", ",", "kernel_size", "=", "4", ",", "stride", "=", "4", ")", ",", "\n", "# nn.BatchNorm2d(ndf * 4),", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ")", "\n", "self", ".", "semantic_branch", "=", "nn", ".", "Linear", "(", "ndf", "*", "4", ",", "opts", ".", "numClasses", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.D_NET128.forward": [[567, 590], ["torchvision.D_NET128.img_code_s16", "torchvision.D_NET128.img_code_s32", "torchvision.D_NET128.img_code_s32_1", "torchvision.D_NET128.logits", "c_code.repeat.repeat.view", "c_code.repeat.repeat.repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torchvision.D_NET128.jointConv", "torchvision.D_NET128.uncond_branch", "torchvision.D_NET128.view", "torchvision.D_NET128.semantic_branch", "torchvision.D_NET128.size", "torchvision.D_NET128.view", "torchvision.D_NET128.view"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x_var", ",", "c_code", "=", "None", ")", ":", "\n", "        ", "x_code", "=", "self", ".", "img_code_s16", "(", "x_var", ")", "\n", "x_code", "=", "self", ".", "img_code_s32", "(", "x_code", ")", "\n", "x_code", "=", "self", ".", "img_code_s32_1", "(", "x_code", ")", "\n", "\n", "if", "opts", ".", "B_CONDITION", "and", "c_code", "is", "not", "None", ":", "\n", "            ", "c_code", "=", "c_code", ".", "view", "(", "-", "1", ",", "self", ".", "ef_dim", ",", "1", ",", "1", ")", "\n", "c_code", "=", "c_code", ".", "repeat", "(", "1", ",", "1", ",", "4", ",", "4", ")", "\n", "# state size (ngf+egf) x 4 x 4", "\n", "h_c_code", "=", "torch", ".", "cat", "(", "(", "c_code", ",", "x_code", ")", ",", "1", ")", "\n", "# state size ngf x in_size x in_size", "\n", "h_c_code", "=", "self", ".", "jointConv", "(", "h_c_code", ")", "\n", "", "else", ":", "\n", "            ", "h_c_code", "=", "x_code", "\n", "\n", "", "output", "=", "self", ".", "logits", "(", "h_c_code", ")", "\n", "if", "opts", ".", "B_CONDITION", ":", "\n", "            ", "out_uncond", "=", "self", ".", "uncond_branch", "(", "x_code", ")", "\n", "out_uncond", "=", "out_uncond", ".", "view", "(", "out_uncond", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out_uncond", "=", "self", ".", "semantic_branch", "(", "out_uncond", ")", "\n", "return", "[", "output", ".", "view", "(", "-", "1", ")", ",", "out_uncond", "]", "\n", "", "else", ":", "\n", "            ", "return", "[", "output", ".", "view", "(", "-", "1", ")", "]", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.conv3x3": [[36, 40], ["torch.Conv2d"], "function", ["None"], ["", "", "def", "conv3x3", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.upBlock": [[44, 52], ["torch.Sequential", "torch.Upsample", "models.conv3x3", "torch.BatchNorm2d", "models.GLU"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.conv3x3"], ["", "def", "upBlock", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "'nearest'", ")", ",", "\n", "conv3x3", "(", "in_planes", ",", "out_planes", "*", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", "*", "2", ")", ",", "\n", "GLU", "(", ")", "\n", ")", "\n", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.Block3x3_relu": [[55, 62], ["torch.Sequential", "models.conv3x3", "torch.BatchNorm2d", "models.GLU"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.conv3x3"], ["", "def", "Block3x3_relu", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "block", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "in_planes", ",", "out_planes", "*", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", "*", "2", ")", ",", "\n", "GLU", "(", ")", "\n", ")", "\n", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.norm": [[88, 90], ["input.norm().clamp().expand_as", "input.norm().clamp", "input.norm"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.norm"], ["", "", "def", "norm", "(", "input", ",", "p", "=", "2", ",", "dim", "=", "1", ",", "eps", "=", "1e-12", ")", ":", "\n", "    ", "return", "input", "/", "input", ".", "norm", "(", "p", ",", "dim", ",", "keepdim", "=", "True", ")", ".", "clamp", "(", "min", "=", "eps", ")", ".", "expand_as", "(", "input", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.Block3x3_leakRelu": [[497, 504], ["torch.Sequential", "models.conv3x3", "torch.BatchNorm2d", "torch.LeakyReLU"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.conv3x3"], ["", "", "def", "Block3x3_leakRelu", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "block", "=", "nn", ".", "Sequential", "(", "\n", "conv3x3", "(", "in_planes", ",", "out_planes", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", ")", "\n", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.downBlock": [[506, 513], ["torch.Sequential", "torch.Conv2d", "torch.BatchNorm2d", "torch.LeakyReLU"], "function", ["None"], ["", "def", "downBlock", "(", "in_planes", ",", "out_planes", ")", ":", "\n", "    ", "block", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_planes", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", ")", "\n", "return", "block", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.encode_image_by_16times": [[516, 535], ["torch.Sequential", "torch.Conv2d", "torch.LeakyReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.Conv2d", "torch.BatchNorm2d", "torch.LeakyReLU"], "function", ["None"], ["", "def", "encode_image_by_16times", "(", "ndf", ")", ":", "\n", "    ", "encode_img", "=", "nn", ".", "Sequential", "(", "\n", "# --> state size. ndf x in_size/2 x in_size/2", "\n", "nn", ".", "Conv2d", "(", "3", ",", "ndf", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# --> state size 2ndf x x in_size/4 x in_size/4", "\n", "nn", ".", "Conv2d", "(", "ndf", ",", "ndf", "*", "2", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ndf", "*", "2", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# --> state size 4ndf x in_size/8 x in_size/8", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "2", ",", "ndf", "*", "4", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ndf", "*", "4", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", ",", "\n", "# --> state size 8ndf x in_size/16 x in_size/16", "\n", "nn", ".", "Conv2d", "(", "ndf", "*", "4", ",", "ndf", "*", "8", ",", "4", ",", "2", ",", "1", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "ndf", "*", "8", ")", ",", "\n", "nn", ".", "LeakyReLU", "(", "0.2", ",", "inplace", "=", "True", ")", "\n", ")", "\n", "return", "encode_img", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.data_loader.ImagerLoader.__init__": [[30, 57], ["lmdb.open", "Exception", "Exception", "os.path.join", "open", "pickle.load", "open", "pickle.load", "os.path.join", "os.path.join"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "img_path", ",", "transform", "=", "None", ",", "vocab", "=", "None", ",", "\n", "loader", "=", "default_loader", ",", "data_path", "=", "None", ",", "partition", "=", "None", ")", ":", "\n", "\n", "        ", "if", "data_path", "==", "None", ":", "\n", "            ", "raise", "Exception", "(", "'No data path specified.'", ")", "\n", "\n", "", "if", "partition", "is", "None", ":", "\n", "            ", "raise", "Exception", "(", "'Unknown partition type %s.'", "%", "partition", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "partition", "=", "partition", "\n", "\n", "", "self", ".", "env", "=", "lmdb", ".", "open", "(", "os", ".", "path", ".", "join", "(", "img_path", ",", "partition", "+", "'_lmdb'", ")", ",", "max_readers", "=", "1", ",", "readonly", "=", "True", ",", "lock", "=", "False", ",", "\n", "readahead", "=", "False", ",", "meminit", "=", "False", ")", "\n", "\n", "with", "open", "(", "os", ".", "path", ".", "join", "(", "'data/food_data/'", "+", "partition", "+", "'_ids.pkl'", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "self", ".", "ids", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "'data/food_data/'", "+", "partition", "+", "'_split.pkl'", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "self", ".", "split", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "\n", "", "self", ".", "imgPath", "=", "img_path", "\n", "self", ".", "maxInst", "=", "20", "\n", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "loader", "=", "loader", "\n", "\n", "self", ".", "vocab", "=", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.data_loader.ImagerLoader.__getitem__": [[58, 115], ["pickle.loads", "os.path.join", "os.path.join", "len", "numpy.zeros", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "sample[].astype", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "data_loader.ImagerLoader.loader", "data_loader.ImagerLoader.transform", "torchvision.Compose", "torchvision.Compose.", "torchvision.Compose.", "set", "torch.Tensor.append", "torch.Tensor.append", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "list", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "data_loader.ImagerLoader.env.begin", "txn.get", "numpy.random.choice", "max", "torchvision.Resize", "vocab", "data_loader.ImagerLoader.ids[].encode", "range", "range", "torchvision.ToTensor", "torchvision.Normalize", "min", "numpy.shape", "numpy.nonzero", "vocab", "len", "str().lower", "str"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.CA_NET.encode"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "# for background", "\n", "        ", "with", "self", ".", "env", ".", "begin", "(", "write", "=", "False", ")", "as", "txn", ":", "\n", "            ", "serialized_sample", "=", "txn", ".", "get", "(", "self", ".", "ids", "[", "index", "]", ".", "encode", "(", ")", ")", "\n", "", "sample", "=", "pickle", ".", "loads", "(", "serialized_sample", ",", "encoding", "=", "'latin1'", ")", "\n", "imgs", "=", "sample", "[", "'imgs'", "]", "\n", "food_id", "=", "self", ".", "ids", "[", "index", "]", "\n", "\n", "if", "self", ".", "partition", "!=", "'train'", ":", "\n", "            ", "imgIdx", "=", "0", "\n", "", "else", ":", "\n", "            ", "imgIdx", "=", "np", ".", "random", ".", "choice", "(", "range", "(", "min", "(", "5", ",", "len", "(", "imgs", ")", ")", ")", ")", "\n", "", "loader_path", "=", "[", "imgs", "[", "imgIdx", "]", "[", "'id'", "]", "[", "i", "]", "for", "i", "in", "range", "(", "4", ")", "]", "\n", "loader_path", "=", "os", ".", "path", ".", "join", "(", "*", "loader_path", ")", "\n", "path", "=", "os", ".", "path", ".", "join", "(", "self", ".", "imgPath", ",", "self", ".", "partition", ",", "loader_path", ",", "imgs", "[", "imgIdx", "]", "[", "'id'", "]", ")", "\n", "\n", "# instructions", "\n", "instrs", "=", "sample", "[", "'intrs'", "]", "\n", "itr_ln", "=", "len", "(", "instrs", ")", "\n", "t_inst", "=", "np", ".", "zeros", "(", "(", "self", ".", "maxInst", ",", "np", ".", "shape", "(", "instrs", ")", "[", "1", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "t_inst", "[", ":", "itr_ln", "]", "[", ":", "]", "=", "instrs", "\n", "instrs", "=", "torch", ".", "FloatTensor", "(", "t_inst", ")", "\n", "\n", "# ingredients", "\n", "ingrs", "=", "sample", "[", "'ingrs'", "]", ".", "astype", "(", "int", ")", "\n", "ingrs", "=", "torch", ".", "LongTensor", "(", "ingrs", ")", "\n", "igr_ln", "=", "max", "(", "np", ".", "nonzero", "(", "sample", "[", "'ingrs'", "]", ")", "[", "0", "]", ")", "+", "1", "\n", "\n", "# image", "\n", "img", "=", "self", ".", "loader", "(", "path", ")", "\n", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "normalize", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "]", ")", "\n", "re_img", "=", "transforms", ".", "Resize", "(", "128", ")", "(", "img", ")", "\n", "img", "=", "normalize", "(", "img", ")", "\n", "ret", "=", "normalize", "(", "re_img", ")", "\n", "\n", "class_label", "=", "sample", "[", "'classes'", "]", "-", "1", "\n", "\n", "vocab", "=", "self", ".", "vocab", "\n", "selec_ingrs", "=", "set", "(", "self", ".", "split", "[", "food_id", "]", "[", "'ingredients'", "]", ")", "\n", "ingr_cap", "=", "[", "]", "\n", "ingr_cap", ".", "append", "(", "vocab", "(", "'<start>'", ")", ")", "\n", "\n", "one_hot_vec", "=", "torch", ".", "zeros", "(", "4102", ")", "\n", "for", "i", "in", "list", "(", "selec_ingrs", ")", ":", "\n", "            ", "one_hot_vec", "[", "vocab", "(", "str", "(", "i", ")", ".", "lower", "(", ")", ")", "]", "=", "1", "\n", "\n", "", "ingr_cap", "=", "torch", ".", "Tensor", "(", "ingr_cap", ")", "\n", "\n", "# output", "\n", "## also output the length of captions, which could be used in LSTM prediction", "\n", "return", "img", ",", "instrs", ",", "itr_ln", ",", "ingrs", ",", "igr_ln", ",", "ingr_cap", ",", "class_label", ",", "ret", ",", "one_hot_vec", ",", "food_id", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.data_loader.ImagerLoader.__len__": [[116, 118], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.data_loader.default_loader": [[21, 27], ["PIL.Image.open().convert", "PIL.Image.new", "PIL.Image.open"], "function", ["None"], ["def", "default_loader", "(", "path", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "im", "=", "Image", ".", "open", "(", "path", ")", ".", "convert", "(", "'RGB'", ")", "\n", "return", "im", "\n", "", "except", ":", "\n", "        ", "return", "Image", ".", "new", "(", "'RGB'", ",", "(", "224", ",", "224", ")", ",", "'white'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.data_loader.collate_fn": [[119, 159], ["torch.sort", "zip", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.LongTensor", "torch.LongTensor", "torch.stack", "torch.stack", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.LongTensor", "torch.stack", "torch.stack", "torch.zeros().long", "torch.zeros().long", "enumerate", "torch.stack", "torch.stack", "list", "list", "list", "len", "torch.zeros", "torch.zeros", "list", "len", "len", "max"], "function", ["None"], ["", "", "def", "collate_fn", "(", "data", ")", ":", "\n", "    ", "\"\"\"Creates mini-batch tensors from the list of tuples (image, caption).\n    \n    We should build custom collate_fn rather than using default collate_fn, \n    because merging caption (including padding) is not supported in default.\n    Args:\n        data: list of tuple (image, caption). \n            - image: torch tensor of shape (3, 256, 256).\n            - caption: torch tensor of shape (?); variable length.\n    Returns:\n        images: torch tensor of shape (batch_size, 3, 256, 256).\n        targets: torch tensor of shape (batch_size, padded_length).\n        lengths: list; valid length for each padded caption.\n    \"\"\"", "\n", "# Sort a data list by caption length (descending order).", "\n", "\n", "data", ".", "sort", "(", "key", "=", "lambda", "x", ":", "len", "(", "x", "[", "5", "]", ")", ",", "reverse", "=", "True", ")", "\n", "img", ",", "instrs", ",", "itr_ln", ",", "ingrs", ",", "igr_ln", ",", "ingr_cap", ",", "class_label", ",", "ret", ",", "one_hot_vec", ",", "food_id", "=", "zip", "(", "*", "data", ")", "\n", "\n", "# Merge images (from tuple of 3D tensor to 4D tensor).", "\n", "images", "=", "torch", ".", "stack", "(", "img", ",", "0", ")", "\n", "instrs", "=", "torch", ".", "stack", "(", "instrs", ",", "0", ")", "\n", "itr_ln", "=", "torch", ".", "LongTensor", "(", "list", "(", "itr_ln", ")", ")", "\n", "ingrs", "=", "torch", ".", "stack", "(", "ingrs", ",", "0", ")", "\n", "igr_ln", "=", "torch", ".", "LongTensor", "(", "list", "(", "igr_ln", ")", ")", "\n", "class_label", "=", "torch", ".", "LongTensor", "(", "list", "(", "class_label", ")", ")", "\n", "ret", "=", "torch", ".", "stack", "(", "ret", ",", "0", ")", "\n", "\n", "# Merge captions (from tuple of 1D tensor to 2D tensor).", "\n", "lengths", "=", "[", "len", "(", "cap", ")", "for", "cap", "in", "ingr_cap", "]", "\n", "targets", "=", "torch", ".", "zeros", "(", "len", "(", "ingr_cap", ")", ",", "max", "(", "lengths", ")", ")", ".", "long", "(", ")", "\n", "for", "i", ",", "cap", "in", "enumerate", "(", "ingr_cap", ")", ":", "\n", "        ", "end", "=", "lengths", "[", "i", "]", "\n", "targets", "[", "i", ",", ":", "end", "]", "=", "cap", "[", ":", "end", "]", "\n", "\n", "", "one_hot_vec", "=", "torch", ".", "stack", "(", "one_hot_vec", ",", "0", ")", "\n", "\n", "return", "[", "images", ",", "instrs", ",", "itr_ln", ",", "ingrs", ",", "igr_ln", ",", "list", "(", "food_id", ")", "]", ",", "[", "images", ",", "instrs", ",", "itr_ln", ",", "ingrs", ",", "igr_ln", ",", "targets", ",", "lengths", ",", "class_label", ",", "ret", ",", "one_hot_vec", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.data_loader.get_loader": [[160, 171], ["torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "data_loader.ImagerLoader"], "function", ["None"], ["", "def", "get_loader", "(", "img_path", ",", "transform", ",", "vocab", ",", "data_path", ",", "partition", ",", "batch_size", ",", "shuffle", ",", "num_workers", ",", "pin_memory", ")", ":", "\n", "\n", "    ", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "ImagerLoader", "(", "img_path", ",", "transform", ",", "vocab", ",", "\n", "data_path", "=", "data_path", ",", "partition", "=", "partition", ")", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "shuffle", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "pin_memory", "=", "pin_memory", ",", "\n", "drop_last", "=", "True", ",", "\n", "collate_fn", "=", "collate_fn", ")", "\n", "return", "data_loader", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.train.AverageMeter.__init__": [[454, 456], ["train.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.train.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.train.AverageMeter.reset": [[457, 462], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.train.AverageMeter.update": [[463, 468], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.train.main": [[91, 155], ["torchvision.Normalize", "torchvision.Compose", "torchvision.Compose", "data_loader.get_loader", "print", "data_loader.get_loader", "print", "range", "train.train", "train.validate", "print", "print", "torchvision.Resize", "torchvision.RandomCrop", "torchvision.RandomHorizontalFlip", "torchvision.Resize", "torchvision.CenterCrop", "open", "f.write", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "model_n.state_dict"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.data_loader.get_loader", "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.data_loader.get_loader", "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.train.train", "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.train.validate"], ["", "def", "main", "(", ")", ":", "\n", "\n", "# data preparation, loaders", "\n", "    ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "RandomCrop", "(", "224", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", "]", ")", "\n", "val_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", "]", ")", "\n", "\n", "cudnn", ".", "benchmark", "=", "True", "\n", "\n", "# preparing the training laoder", "\n", "train_loader", "=", "get_loader", "(", "opts", ".", "img_path", ",", "train_transform", ",", "vocab", ",", "opts", ".", "data_path", ",", "partition", "=", "'train'", ",", "\n", "batch_size", "=", "opts", ".", "batch_size", ",", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "opts", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "print", "(", "'Training loader prepared.'", ")", "\n", "\n", "# preparing validation loader ", "\n", "val_loader", "=", "get_loader", "(", "opts", ".", "img_path", ",", "val_transform", ",", "vocab", ",", "opts", ".", "data_path", ",", "partition", "=", "'test'", ",", "\n", "batch_size", "=", "opts", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "opts", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "print", "(", "'Validation loader prepared.'", ")", "\n", "\n", "best_val_i2t", "=", "{", "1", ":", "0.0", ",", "5", ":", "0.0", ",", "10", ":", "0.0", "}", "\n", "best_val_t2i", "=", "{", "1", ":", "0.0", ",", "5", ":", "0.0", ",", "10", ":", "0.0", "}", "\n", "best_epoch_i2t", "=", "0", "\n", "best_epoch_t2i", "=", "0", "\n", "\n", "for", "epoch", "in", "range", "(", "0", ",", "opts", ".", "epochs", ")", ":", "\n", "\n", "        ", "train", "(", "train_loader", ",", "epoch", ",", "val_loader", ")", "\n", "\n", "recall_i2t", ",", "recall_t2i", ",", "medR_i2t", ",", "medR_t2i", "=", "validate", "(", "val_loader", ")", "\n", "with", "open", "(", "epoch_trace_f_dir", ",", "\"a\"", ")", "as", "f", ":", "\n", "            ", "lr", "=", "optimizer", ".", "param_groups", "[", "1", "]", "[", "'lr'", "]", "\n", "f", ".", "write", "(", "\"{},{},{},{},{},{},{},{},{},{}\\n\"", ".", "format", "(", "epoch", ",", "lr", ",", "medR_i2t", ",", "recall_i2t", "[", "1", "]", ",", "recall_i2t", "[", "5", "]", ",", "recall_i2t", "[", "10", "]", ",", "medR_t2i", ",", "recall_t2i", "[", "1", "]", ",", "recall_t2i", "[", "5", "]", ",", "recall_t2i", "[", "10", "]", ")", ")", "\n", "\n", "", "for", "keys", "in", "best_val_i2t", ":", "\n", "            ", "if", "recall_i2t", "[", "keys", "]", ">", "best_val_i2t", "[", "keys", "]", ":", "\n", "                ", "best_val_i2t", "=", "recall_i2t", "\n", "best_epoch", "=", "epoch", "+", "1", "\n", "model_num", "=", "1", "\n", "for", "model_n", "in", "model_list", ":", "\n", "                    ", "filename", "=", "save_folder", "+", "'/model_e%03d_v%d.pkl'", "%", "(", "epoch", "+", "1", ",", "model_num", ")", "\n", "torch", ".", "save", "(", "model_n", ".", "state_dict", "(", ")", ",", "filename", ")", "\n", "model_num", "+=", "1", "\n", "", "break", "\n", "", "", "print", "(", "\"best: \"", ",", "best_epoch", ",", "best_val_i2t", ")", "\n", "print", "(", "'params lr: %f'", "%", "optimizer", ".", "param_groups", "[", "1", "]", "[", "'lr'", "]", ")", "\n", "\n", "if", "epoch", "==", "30", ":", "\n", "            ", "optimizer", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "0.00001", "\n", "optimizer", ".", "param_groups", "[", "1", "]", "[", "'lr'", "]", "=", "0.00001", "\n", "optimizer", ".", "param_groups", "[", "2", "]", "[", "'lr'", "]", "=", "0.00001", "\n", "optimizer", ".", "param_groups", "[", "3", "]", "[", "'lr'", "]", "=", "0.00001", "\n", "optimizers_imgD", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "0.00001", "\n", "optimizer_cmD", ".", "param_groups", "[", "0", "]", "[", "'lr'", "]", "=", "0.00001", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.train.train_Dnet": [[156, 169], ["netD", "netD", "GAN_criterion", "GAN_criterion", "mu.detach", "fake_imgs.detach", "mu.detach"], "function", ["None"], ["", "", "", "def", "train_Dnet", "(", "idx", ",", "real_imgs", ",", "fake_imgs", ",", "mu", ",", "label_class", ")", ":", "\n", "    ", "netD", "=", "netsD", "\n", "real_imgs", "=", "real_imgs", "[", "idx", "]", "\n", "fake_imgs", "=", "fake_imgs", "[", "idx", "]", "\n", "\n", "real_logits", "=", "netD", "(", "real_imgs", ",", "mu", ".", "detach", "(", ")", ")", "\n", "fake_logits", "=", "netD", "(", "fake_imgs", ".", "detach", "(", ")", ",", "mu", ".", "detach", "(", ")", ")", "\n", "\n", "lossD_real", "=", "GAN_criterion", "(", "real_logits", "[", "0", "]", ",", "real_labels", ")", "\n", "lossD_fake", "=", "GAN_criterion", "(", "fake_logits", "[", "0", "]", ",", "fake_labels", ")", "\n", "\n", "lossD", "=", "lossD_real", "+", "lossD_fake", "\n", "return", "lossD", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.train.KL_loss": [[170, 174], ["mu.pow().add_().mul_().add_().add_", "torch.mean().mul_", "torch.mean().mul_", "torch.mean().mul_", "torch.mean().mul_", "torch.mean().mul_", "torch.mean().mul_", "torch.mean().mul_", "mu.pow().add_().mul_().add_", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "mu.pow().add_().mul_", "mu.pow().add_", "logvar.exp", "mu.pow"], "function", ["None"], ["", "def", "KL_loss", "(", "mu", ",", "logvar", ")", ":", "\n", "    ", "KLD_element", "=", "mu", ".", "pow", "(", "2", ")", ".", "add_", "(", "logvar", ".", "exp", "(", ")", ")", ".", "mul_", "(", "-", "1", ")", ".", "add_", "(", "1", ")", ".", "add_", "(", "logvar", ")", "\n", "KLD", "=", "torch", ".", "mean", "(", "KLD_element", ")", ".", "mul_", "(", "-", "0.5", ")", "\n", "return", "KLD", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.train.train_Gnet": [[175, 195], ["netD", "netD", "GAN_criterion", "class_criterion", "class_criterion", "train.KL_loss"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.train.KL_loss"], ["", "def", "train_Gnet", "(", "idx", ",", "real_imgs", ",", "fake_imgs", ",", "mu", ",", "logvar", ",", "label_class", ")", ":", "\n", "    ", "netD", "=", "netsD", "\n", "real_imgs", "=", "real_imgs", "[", "idx", "]", "\n", "fake_imgs", "=", "fake_imgs", "[", "idx", "]", "\n", "\n", "real_logits", "=", "netD", "(", "real_imgs", ",", "mu", ")", "\n", "fake_logits", "=", "netD", "(", "fake_imgs", ",", "mu", ")", "\n", "\n", "lossG_fake", "=", "GAN_criterion", "(", "fake_logits", "[", "0", "]", ",", "real_labels", ")", "\n", "\n", "lossG_real_cond", "=", "class_criterion", "(", "real_logits", "[", "1", "]", ",", "label_class", ")", "\n", "lossG_fake_cond", "=", "class_criterion", "(", "fake_logits", "[", "1", "]", ",", "label_class", ")", "\n", "lossG_cond", "=", "lossG_real_cond", "+", "lossG_fake_cond", "\n", "\n", "lossG", "=", "lossG_fake", "+", "lossG_cond", "\n", "\n", "kl_loss", "=", "KL_loss", "(", "mu", ",", "logvar", ")", "*", "2", "\n", "lossG", "=", "kl_loss", "+", "lossG", "\n", "\n", "return", "lossG", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.train.compute_gradient_penalty": [[196, 216], ["torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "D", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "torch.autograd.Variable", "gradients.view.view", "numpy.random.random", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.cuda.FloatTensor().fill_", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "gradients.view.size", "real_samples.size", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "torch.cuda.FloatTensor", "gradients.view.norm"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.norm"], ["", "def", "compute_gradient_penalty", "(", "D", ",", "real_samples", ",", "fake_samples", ")", ":", "\n", "    ", "\"\"\"Calculates the gradient penalty loss for WGAN GP\"\"\"", "\n", "# Random weight term for interpolation between real and fake samples", "\n", "alpha", "=", "torch", ".", "cuda", ".", "FloatTensor", "(", "np", ".", "random", ".", "random", "(", "(", "real_samples", ".", "size", "(", "0", ")", ",", "1", ")", ")", ")", "\n", "# Get random interpolation between real and fake samples", "\n", "interpolates", "=", "(", "alpha", "*", "real_samples", "+", "(", "(", "1", "-", "alpha", ")", "*", "fake_samples", ")", ")", ".", "requires_grad_", "(", "True", ")", "\n", "d_interpolates", "=", "D", "(", "interpolates", ")", "\n", "fake", "=", "torch", ".", "autograd", ".", "Variable", "(", "torch", ".", "cuda", ".", "FloatTensor", "(", "real_samples", ".", "shape", "[", "0", "]", ",", "1", ")", ".", "fill_", "(", "1.0", ")", ",", "requires_grad", "=", "False", ")", "\n", "# Get gradient w.r.t. interpolates", "\n", "gradients", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "outputs", "=", "d_interpolates", ",", "# fack samples", "\n", "inputs", "=", "interpolates", ",", "# real samples", "\n", "grad_outputs", "=", "fake", ",", "\n", "create_graph", "=", "True", ",", "\n", "retain_graph", "=", "True", ",", "\n", "only_inputs", "=", "True", ",", "\n", ")", "[", "0", "]", "\n", "gradients", "=", "gradients", ".", "view", "(", "gradients", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "gradient_penalty", "=", "(", "(", "gradients", ".", "norm", "(", "2", ",", "dim", "=", "1", ")", "-", "1", ")", "**", "2", ")", ".", "mean", "(", ")", "\n", "return", "gradient_penalty", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.train.train": [[217, 314], ["train.AverageMeter", "train.AverageMeter", "train.AverageMeter", "train.AverageMeter", "image_model.train", "recipe_model.train", "enumerate", "print", "print", "tqdm.tqdm", "image_model", "recipe_model", "cm_discriminator", "cm_discriminator", "train.compute_gradient_penalty", "optimizer_cmD.zero_grad", "loss_cmD.backward", "optimizer_cmD.step", "cm_discriminator", "models.norm", "models.norm", "[].cuda", "real_imgs.append", "[].cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "torch.tensor().cuda", "[].cuda().long", "multi_label_net", "img2text_criterion", "class_criterion", "noise.data.normal_", "netG", "train.train_Dnet", "optimizers_imgD.zero_grad", "train_Dnet.backward", "optimizers_imgD.step", "train.train_Gnet", "train.AverageMeter.update", "train.AverageMeter.update", "train.AverageMeter.update", "train.AverageMeter.update", "optimizer.zero_grad", "loss.backward", "optimizer.step", "[].cuda", "[].cuda", "[].cuda", "[].cuda", "[].cuda", "image_model.detach", "recipe_model.detach", "image_model.detach", "recipe_model.detach", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "fc_sia", "fc_sia", "triplet_loss.global_loss", "[].cuda", "torch.nn.utils.rnn.pack_padded_sequence", "loss_text.item", "loss_img.item", "tri_loss.item", "[].size", "loss_img.item", "[].size", "loss_text.item", "[].size", "loss_cmG.item", "[].size", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "[].cuda", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "loss_text.item", "loss_img.item", "loss_img.item", "loss_text.item"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.train.train", "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.train.train", "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.train.compute_gradient_penalty", "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.norm", "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.norm", "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.train.train_Dnet", "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.train.train_Gnet", "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.train.AverageMeter.update", "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.train.AverageMeter.update", "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.train.AverageMeter.update", "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.train.AverageMeter.update", "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.triplet_loss.global_loss"], ["", "def", "train", "(", "train_loader", ",", "epoch", ",", "val_loader", ")", ":", "\n", "    ", "tri_losses", "=", "AverageMeter", "(", ")", "\n", "\n", "img_losses", "=", "AverageMeter", "(", ")", "\n", "text_losses", "=", "AverageMeter", "(", ")", "\n", "cmG_losses", "=", "AverageMeter", "(", ")", "\n", "\n", "image_model", ".", "train", "(", ")", "\n", "recipe_model", ".", "train", "(", ")", "\n", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "tqdm", "(", "train_loader", ")", ")", ":", "\n", "\n", "        ", "img_emd_modal", "=", "image_model", "(", "data", "[", "0", "]", "[", "0", "]", ".", "cuda", "(", ")", ")", "\n", "recipe_emb_modal", "=", "recipe_model", "(", "data", "[", "0", "]", "[", "1", "]", ".", "cuda", "(", ")", ",", "data", "[", "0", "]", "[", "2", "]", ".", "cuda", "(", ")", ",", "data", "[", "0", "]", "[", "3", "]", ".", "cuda", "(", ")", ",", "data", "[", "0", "]", "[", "4", "]", ".", "cuda", "(", ")", ")", "\n", "\n", "################################################################", "\n", "# modal-level fusion", "\n", "################################################################", "\n", "real_validity", "=", "cm_discriminator", "(", "img_emd_modal", ".", "detach", "(", ")", ")", "\n", "fake_validity", "=", "cm_discriminator", "(", "recipe_emb_modal", ".", "detach", "(", ")", ")", "\n", "gradient_penalty", "=", "compute_gradient_penalty", "(", "cm_discriminator", ",", "img_emd_modal", ".", "detach", "(", ")", ",", "recipe_emb_modal", ".", "detach", "(", ")", ")", "\n", "loss_cmD", "=", "-", "torch", ".", "mean", "(", "real_validity", ")", "+", "torch", ".", "mean", "(", "fake_validity", ")", "+", "10", "*", "gradient_penalty", "\n", "optimizer_cmD", ".", "zero_grad", "(", ")", "\n", "loss_cmD", ".", "backward", "(", ")", "\n", "optimizer_cmD", ".", "step", "(", ")", "\n", "\n", "g_fake_validity", "=", "cm_discriminator", "(", "recipe_emb_modal", ")", "\n", "loss_cmG", "=", "-", "torch", ".", "mean", "(", "g_fake_validity", ")", "\n", "\n", "################################################################", "\n", "# cross-modal retrieval", "\n", "################################################################", "\n", "img_id_fea", "=", "norm", "(", "fc_sia", "(", "img_emd_modal", ")", ")", "\n", "rec_id_fea", "=", "norm", "(", "fc_sia", "(", "recipe_emb_modal", ")", ")", "\n", "tri_loss", "=", "global_loss", "(", "triplet_loss", ",", "torch", ".", "cat", "(", "(", "img_id_fea", ",", "rec_id_fea", ")", ")", ",", "label", ")", "[", "0", "]", "\n", "\n", "################################################################", "\n", "# translation consistency", "\n", "label_class", "=", "data", "[", "1", "]", "[", "7", "]", ".", "cuda", "(", ")", "\n", "real_imgs", "=", "[", "]", "\n", "real_imgs", ".", "append", "(", "data", "[", "1", "]", "[", "8", "]", ".", "cuda", "(", ")", ")", "\n", "ingr_cap", "=", "data", "[", "1", "]", "[", "5", "]", ".", "cuda", "(", ")", "\n", "lengths", "=", "torch", ".", "tensor", "(", "data", "[", "1", "]", "[", "6", "]", ")", ".", "cuda", "(", ")", "\n", "targets", "=", "pack_padded_sequence", "(", "ingr_cap", ",", "lengths", ",", "batch_first", "=", "True", ")", "[", "0", "]", "\n", "one_hot_cap", "=", "data", "[", "1", "]", "[", "9", "]", ".", "cuda", "(", ")", ".", "long", "(", ")", "\n", "################################################################", "\n", "# img2text", "\n", "################################################################", "\n", "recipe_out", "=", "multi_label_net", "(", "img_id_fea", ")", "\n", "loss_i2t", "=", "img2text_criterion", "(", "recipe_out", "[", "0", "]", ",", "one_hot_cap", ")", "\n", "loss_t_class", "=", "class_criterion", "(", "recipe_out", "[", "1", "]", ",", "label_class", ")", "\n", "loss_text", "=", "loss_i2t", "+", "loss_t_class", "\n", "\n", "###############################################################", "\n", "# text2img", "\n", "###############################################################", "\n", "noise", ".", "data", ".", "normal_", "(", "0", ",", "1", ")", "\n", "fake_imgs", ",", "mu", ",", "logvar", "=", "netG", "(", "noise", ",", "rec_id_fea", ")", "\n", "\n", "lossD_total", "=", "0", "\n", "lossD", "=", "train_Dnet", "(", "0", ",", "real_imgs", ",", "fake_imgs", ",", "mu", ",", "label_class", ")", "\n", "optimizers_imgD", ".", "zero_grad", "(", ")", "\n", "lossD", ".", "backward", "(", ")", "\n", "optimizers_imgD", ".", "step", "(", ")", "\n", "\n", "lossG", "=", "train_Gnet", "(", "0", ",", "real_imgs", ",", "fake_imgs", ",", "mu", ",", "logvar", ",", "label_class", ")", "\n", "loss_img", "=", "lossG", "\n", "\n", "if", "loss_text", ".", "item", "(", ")", "<", "loss_img", ".", "item", "(", ")", ":", "\n", "            ", "loss_img", "=", "(", "loss_text", ".", "item", "(", ")", "/", "loss_img", ".", "item", "(", ")", ")", "*", "loss_img", "\n", "", "else", ":", "\n", "            ", "loss_text", "=", "(", "loss_img", ".", "item", "(", ")", "/", "loss_text", ".", "item", "(", ")", ")", "*", "loss_text", "\n", "", "loss_g", "=", "loss_img", "+", "loss_text", "\n", "\n", "###############################################################", "\n", "# back-propogate", "\n", "###############################################################", "\n", "loss", "=", "tri_loss", "+", "0.005", "*", "loss_cmG", "+", "0.002", "*", "loss_g", "\n", "\n", "tri_losses", ".", "update", "(", "tri_loss", ".", "item", "(", ")", ",", "data", "[", "0", "]", "[", "0", "]", ".", "size", "(", "0", ")", ")", "\n", "img_losses", ".", "update", "(", "loss_img", ".", "item", "(", ")", ",", "data", "[", "0", "]", "[", "0", "]", ".", "size", "(", "0", ")", ")", "\n", "text_losses", ".", "update", "(", "loss_text", ".", "item", "(", ")", ",", "data", "[", "0", "]", "[", "0", "]", ".", "size", "(", "0", ")", ")", "\n", "cmG_losses", ".", "update", "(", "loss_cmG", ".", "item", "(", ")", ",", "data", "[", "0", "]", "[", "0", "]", ".", "size", "(", "0", ")", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "", "print", "(", "epoch", ")", "\n", "print", "(", "'Epoch: {0}  '", "\n", "'tri loss {tri_loss.val:.4f} ({tri_loss.avg:.4f}),  '", "\n", "'cm loss {loss_cmG.val:.4f} ({loss_cmG.avg:.4f}),  '", "\n", "'img loss {img_losses.val:.4f} ({img_losses.avg:.4f}),  '", "\n", "'text loss {loss_text.val:.4f} ({loss_text.avg:.4f})'", "\n", ".", "format", "(", "\n", "epoch", ",", "tri_loss", "=", "tri_losses", ",", "loss_cmG", "=", "cmG_losses", ",", "\n", "img_losses", "=", "img_losses", ",", "loss_text", "=", "text_losses", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.train.validate": [[316, 349], ["image_model.eval", "recipe_model.eval", "time.time", "enumerate", "train.rank_i2t", "print", "train.rank_t2i", "print", "tqdm.tqdm", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "image_model", "recipe_model", "models.norm", "models.norm", "[].cuda", "[].cuda", "[].cuda", "[].cuda", "[].cuda", "fc_sia", "fc_sia", "models.norm.data.cpu().numpy", "models.norm.data.cpu().numpy", "numpy.concatenate", "numpy.concatenate", "models.norm.data.cpu", "models.norm.data.cpu", "models.norm.data.cpu().numpy", "models.norm.data.cpu().numpy", "models.norm.data.cpu", "models.norm.data.cpu"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.test.rank_i2t", "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.test.rank_t2i", "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.norm", "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.norm"], ["", "def", "validate", "(", "val_loader", ")", ":", "\n", "\n", "# switch to evaluate mode", "\n", "    ", "image_model", ".", "eval", "(", ")", "\n", "recipe_model", ".", "eval", "(", ")", "\n", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "tqdm", "(", "val_loader", ")", ")", ":", "\n", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "            ", "img_emd_modal", "=", "image_model", "(", "data", "[", "0", "]", "[", "0", "]", ".", "cuda", "(", ")", ")", "\n", "recipe_emb_modal", "=", "recipe_model", "(", "data", "[", "0", "]", "[", "1", "]", ".", "cuda", "(", ")", ",", "data", "[", "0", "]", "[", "2", "]", ".", "cuda", "(", ")", ",", "data", "[", "0", "]", "[", "3", "]", ".", "cuda", "(", ")", ",", "data", "[", "0", "]", "[", "4", "]", ".", "cuda", "(", ")", ")", "\n", "\n", "img_emd_modal", "=", "norm", "(", "fc_sia", "(", "img_emd_modal", ")", ")", "\n", "recipe_emb_modal", "=", "norm", "(", "fc_sia", "(", "recipe_emb_modal", ")", ")", "\n", "\n", "if", "i", "==", "0", ":", "\n", "                ", "data0", "=", "img_emd_modal", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "data1", "=", "recipe_emb_modal", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                ", "data0", "=", "np", ".", "concatenate", "(", "(", "data0", ",", "img_emd_modal", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "axis", "=", "0", ")", "\n", "data1", "=", "np", ".", "concatenate", "(", "(", "data1", ",", "recipe_emb_modal", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "", "medR_i2t", ",", "recall_i2t", "=", "rank_i2t", "(", "opts", ",", "data0", ",", "data1", ")", "\n", "print", "(", "'I2T Val medR {medR:.4f}\\t'", "\n", "'Recall {recall}'", ".", "format", "(", "medR", "=", "medR_i2t", ",", "recall", "=", "recall_i2t", ")", ")", "\n", "\n", "medR_t2i", ",", "recall_t2i", "=", "rank_t2i", "(", "opts", ",", "data0", ",", "data1", ")", "\n", "print", "(", "'T2I Val medR {medR:.4f}\\t'", "\n", "'Recall {recall}'", ".", "format", "(", "medR", "=", "medR_t2i", ",", "recall", "=", "recall_t2i", ")", ")", "\n", "\n", "return", "recall_i2t", ",", "recall_t2i", ",", "medR_i2t", ",", "medR_t2i", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.train.rank_i2t": [[350, 400], ["random.seed", "range", "range", "glob_recall.keys", "random.sample", "recall.keys", "numpy.median", "recall.keys", "glob_rank.append", "numpy.average", "range", "range", "sorted", "med_rank.append", "len", "numpy.linalg.norm", "distance.items", "numpy.where", "numpy.array"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.DecoderRNN.sample", "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.norm"], ["", "def", "rank_i2t", "(", "opts", ",", "img_embeds", ",", "rec_embeds", ")", ":", "\n", "    ", "random", ".", "seed", "(", "opts", ".", "seed", ")", "\n", "im_vecs", "=", "img_embeds", "\n", "instr_vecs", "=", "rec_embeds", "\n", "\n", "# Ranker", "\n", "N", "=", "1000", "\n", "idxs", "=", "range", "(", "N", ")", "\n", "\n", "glob_rank", "=", "[", "]", "\n", "glob_recall", "=", "{", "1", ":", "0.0", ",", "5", ":", "0.0", ",", "10", ":", "0.0", "}", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "\n", "        ", "ids", "=", "random", ".", "sample", "(", "range", "(", "0", ",", "len", "(", "img_embeds", ")", ")", ",", "N", ")", "\n", "im_sub", "=", "im_vecs", "[", "ids", ",", ":", "]", "\n", "instr_sub", "=", "instr_vecs", "[", "ids", ",", ":", "]", "\n", "\n", "med_rank", "=", "[", "]", "\n", "recall", "=", "{", "1", ":", "0.0", ",", "5", ":", "0.0", ",", "10", ":", "0.0", "}", "\n", "\n", "for", "ii", "in", "idxs", ":", "\n", "            ", "distance", "=", "{", "}", "\n", "for", "j", "in", "range", "(", "N", ")", ":", "\n", "                ", "distance", "[", "j", "]", "=", "np", ".", "linalg", ".", "norm", "(", "im_sub", "[", "ii", "]", "-", "instr_sub", "[", "j", "]", ")", "\n", "", "distance_sorted", "=", "sorted", "(", "distance", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "pos", "=", "np", ".", "where", "(", "np", ".", "array", "(", "distance_sorted", ")", "==", "distance", "[", "ii", "]", ")", "[", "0", "]", "[", "0", "]", "\n", "\n", "if", "(", "pos", "+", "1", ")", "==", "1", ":", "\n", "                ", "recall", "[", "1", "]", "+=", "1", "\n", "", "if", "(", "pos", "+", "1", ")", "<=", "5", ":", "\n", "                ", "recall", "[", "5", "]", "+=", "1", "\n", "", "if", "(", "pos", "+", "1", ")", "<=", "10", ":", "\n", "                ", "recall", "[", "10", "]", "+=", "1", "\n", "\n", "# store the position", "\n", "", "med_rank", ".", "append", "(", "pos", "+", "1", ")", "\n", "\n", "", "for", "i", "in", "recall", ".", "keys", "(", ")", ":", "\n", "            ", "recall", "[", "i", "]", "=", "recall", "[", "i", "]", "/", "N", "\n", "\n", "", "med", "=", "np", ".", "median", "(", "med_rank", ")", "\n", "\n", "for", "i", "in", "recall", ".", "keys", "(", ")", ":", "\n", "            ", "glob_recall", "[", "i", "]", "+=", "recall", "[", "i", "]", "\n", "", "glob_rank", ".", "append", "(", "med", ")", "\n", "\n", "", "for", "i", "in", "glob_recall", ".", "keys", "(", ")", ":", "\n", "        ", "glob_recall", "[", "i", "]", "=", "glob_recall", "[", "i", "]", "/", "10", "\n", "\n", "", "return", "np", ".", "average", "(", "glob_rank", ")", ",", "glob_recall", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.train.rank_t2i": [[401, 451], ["random.seed", "range", "range", "glob_recall.keys", "random.sample", "recall.keys", "numpy.median", "recall.keys", "glob_rank.append", "numpy.average", "range", "range", "sorted", "med_rank.append", "len", "numpy.linalg.norm", "distance.items", "numpy.where", "numpy.array"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.DecoderRNN.sample", "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.norm"], ["", "def", "rank_t2i", "(", "opts", ",", "img_embeds", ",", "rec_embeds", ")", ":", "\n", "    ", "random", ".", "seed", "(", "opts", ".", "seed", ")", "\n", "im_vecs", "=", "img_embeds", "\n", "instr_vecs", "=", "rec_embeds", "\n", "\n", "# Ranker", "\n", "N", "=", "1000", "\n", "idxs", "=", "range", "(", "N", ")", "\n", "\n", "glob_rank", "=", "[", "]", "\n", "glob_recall", "=", "{", "1", ":", "0.0", ",", "5", ":", "0.0", ",", "10", ":", "0.0", "}", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "\n", "        ", "ids", "=", "random", ".", "sample", "(", "range", "(", "0", ",", "len", "(", "img_embeds", ")", ")", ",", "N", ")", "\n", "im_sub", "=", "im_vecs", "[", "ids", ",", ":", "]", "\n", "instr_sub", "=", "instr_vecs", "[", "ids", ",", ":", "]", "\n", "\n", "med_rank", "=", "[", "]", "\n", "recall", "=", "{", "1", ":", "0.0", ",", "5", ":", "0.0", ",", "10", ":", "0.0", "}", "\n", "\n", "for", "ii", "in", "idxs", ":", "\n", "            ", "distance", "=", "{", "}", "\n", "for", "j", "in", "range", "(", "N", ")", ":", "\n", "                ", "distance", "[", "j", "]", "=", "np", ".", "linalg", ".", "norm", "(", "instr_sub", "[", "ii", "]", "-", "im_sub", "[", "j", "]", ")", "\n", "", "distance_sorted", "=", "sorted", "(", "distance", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "pos", "=", "np", ".", "where", "(", "np", ".", "array", "(", "distance_sorted", ")", "==", "distance", "[", "ii", "]", ")", "[", "0", "]", "[", "0", "]", "\n", "\n", "if", "(", "pos", "+", "1", ")", "==", "1", ":", "\n", "                ", "recall", "[", "1", "]", "+=", "1", "\n", "", "if", "(", "pos", "+", "1", ")", "<=", "5", ":", "\n", "                ", "recall", "[", "5", "]", "+=", "1", "\n", "", "if", "(", "pos", "+", "1", ")", "<=", "10", ":", "\n", "                ", "recall", "[", "10", "]", "+=", "1", "\n", "\n", "# store the position", "\n", "", "med_rank", ".", "append", "(", "pos", "+", "1", ")", "\n", "\n", "", "for", "i", "in", "recall", ".", "keys", "(", ")", ":", "\n", "            ", "recall", "[", "i", "]", "=", "recall", "[", "i", "]", "/", "N", "\n", "\n", "", "med", "=", "np", ".", "median", "(", "med_rank", ")", "\n", "\n", "for", "i", "in", "recall", ".", "keys", "(", ")", ":", "\n", "            ", "glob_recall", "[", "i", "]", "+=", "recall", "[", "i", "]", "\n", "", "glob_rank", ".", "append", "(", "med", ")", "\n", "\n", "", "for", "i", "in", "glob_recall", ".", "keys", "(", ")", ":", "\n", "        ", "glob_recall", "[", "i", "]", "=", "glob_recall", "[", "i", "]", "/", "10", "\n", "\n", "", "return", "np", ".", "average", "(", "glob_rank", ")", ",", "glob_recall", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.test.main": [[50, 64], ["torchvision.Normalize", "torchvision.Compose", "data_loader.get_loader", "print", "test.test", "torchvision.Resize", "torchvision.CenterCrop"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.data_loader.get_loader", "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.test.test"], ["def", "main", "(", ")", ":", "\n", "    ", "normalize", "=", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.485", ",", "0.456", ",", "0.406", "]", ",", "\n", "std", "=", "[", "0.229", ",", "0.224", ",", "0.225", "]", ")", "\n", "\n", "val_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "256", ")", ",", "\n", "transforms", ".", "CenterCrop", "(", "224", ")", "]", ")", "\n", "\n", "val_loader", "=", "get_loader", "(", "opts", ".", "img_path", ",", "val_transform", ",", "vocab", ",", "opts", ".", "data_path", ",", "partition", "=", "'test'", ",", "\n", "batch_size", "=", "opts", ".", "batch_size", ",", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "opts", ".", "workers", ",", "pin_memory", "=", "True", ")", "\n", "print", "(", "'Validation loader prepared.'", ")", "\n", "\n", "test", "(", "val_loader", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.test.test": [[65, 95], ["image_model.eval", "recipe_model.eval", "enumerate", "test.rank_i2t", "print", "test.rank_t2i", "print", "tqdm.tqdm", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "image_model", "recipe_model", "models.norm", "models.norm", "[].cuda", "[].cuda", "[].cuda", "[].cuda", "[].cuda", "fc_sia", "fc_sia", "models.norm.data.cpu().numpy", "models.norm.data.cpu().numpy", "numpy.concatenate", "numpy.concatenate", "models.norm.data.cpu", "models.norm.data.cpu", "models.norm.data.cpu().numpy", "models.norm.data.cpu().numpy", "models.norm.data.cpu", "models.norm.data.cpu"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.test.rank_i2t", "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.test.rank_t2i", "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.norm", "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.norm"], ["", "def", "test", "(", "test_loader", ")", ":", "\n", "    ", "image_model", ".", "eval", "(", ")", "\n", "recipe_model", ".", "eval", "(", ")", "\n", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "tqdm", "(", "test_loader", ")", ")", ":", "\n", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "            ", "img_emd_modal", "=", "image_model", "(", "data", "[", "0", "]", "[", "0", "]", ".", "cuda", "(", ")", ")", "\n", "recipe_emb_modal", "=", "recipe_model", "(", "data", "[", "0", "]", "[", "1", "]", ".", "cuda", "(", ")", ",", "data", "[", "0", "]", "[", "2", "]", ".", "cuda", "(", ")", ",", "data", "[", "0", "]", "[", "3", "]", ".", "cuda", "(", ")", ",", "data", "[", "0", "]", "[", "4", "]", ".", "cuda", "(", ")", ")", "\n", "\n", "img_emd_modal", "=", "norm", "(", "fc_sia", "(", "img_emd_modal", ")", ")", "\n", "recipe_emb_modal", "=", "norm", "(", "fc_sia", "(", "recipe_emb_modal", ")", ")", "\n", "\n", "if", "i", "==", "0", ":", "\n", "                ", "data0", "=", "img_emd_modal", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "data1", "=", "recipe_emb_modal", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "", "else", ":", "\n", "                ", "data0", "=", "np", ".", "concatenate", "(", "(", "data0", ",", "img_emd_modal", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "axis", "=", "0", ")", "\n", "data1", "=", "np", ".", "concatenate", "(", "(", "data1", ",", "recipe_emb_modal", ".", "data", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ")", ",", "axis", "=", "0", ")", "\n", "\n", "", "", "", "medR_i2t", ",", "recall_i2t", "=", "rank_i2t", "(", "opts", ",", "data0", ",", "data1", ")", "\n", "print", "(", "'I2T Val medR {medR:.4f}\\t'", "\n", "'Recall {recall}'", ".", "format", "(", "medR", "=", "medR_i2t", ",", "recall", "=", "recall_i2t", ")", ")", "\n", "\n", "medR_t2i", ",", "recall_t2i", "=", "rank_t2i", "(", "opts", ",", "data0", ",", "data1", ")", "\n", "print", "(", "'T2I Val medR {medR:.4f}\\t'", "\n", "'Recall {recall}'", ".", "format", "(", "medR", "=", "medR_t2i", ",", "recall", "=", "recall_t2i", ")", ")", "\n", "\n", "return", "recall_i2t", ",", "recall_t2i", ",", "medR_i2t", ",", "medR_t2i", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.test.rank_i2t": [[96, 146], ["random.seed", "range", "range", "glob_recall.keys", "random.sample", "recall.keys", "numpy.median", "recall.keys", "glob_rank.append", "numpy.average", "range", "range", "sorted", "med_rank.append", "len", "numpy.linalg.norm", "distance.items", "numpy.where", "numpy.array"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.DecoderRNN.sample", "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.norm"], ["", "def", "rank_i2t", "(", "opts", ",", "img_embeds", ",", "rec_embeds", ")", ":", "\n", "    ", "random", ".", "seed", "(", "opts", ".", "seed", ")", "\n", "im_vecs", "=", "img_embeds", "\n", "instr_vecs", "=", "rec_embeds", "\n", "\n", "# Ranker", "\n", "N", "=", "10000", "\n", "idxs", "=", "range", "(", "N", ")", "\n", "\n", "glob_rank", "=", "[", "]", "\n", "glob_recall", "=", "{", "1", ":", "0.0", ",", "5", ":", "0.0", ",", "10", ":", "0.0", "}", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "\n", "        ", "ids", "=", "random", ".", "sample", "(", "range", "(", "0", ",", "len", "(", "img_embeds", ")", ")", ",", "N", ")", "\n", "im_sub", "=", "im_vecs", "[", "ids", ",", ":", "]", "\n", "instr_sub", "=", "instr_vecs", "[", "ids", ",", ":", "]", "\n", "\n", "med_rank", "=", "[", "]", "\n", "recall", "=", "{", "1", ":", "0.0", ",", "5", ":", "0.0", ",", "10", ":", "0.0", "}", "\n", "\n", "for", "ii", "in", "idxs", ":", "\n", "            ", "distance", "=", "{", "}", "\n", "for", "j", "in", "range", "(", "N", ")", ":", "\n", "                ", "distance", "[", "j", "]", "=", "np", ".", "linalg", ".", "norm", "(", "im_sub", "[", "ii", "]", "-", "instr_sub", "[", "j", "]", ")", "\n", "", "distance_sorted", "=", "sorted", "(", "distance", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "pos", "=", "np", ".", "where", "(", "np", ".", "array", "(", "distance_sorted", ")", "==", "distance", "[", "ii", "]", ")", "[", "0", "]", "[", "0", "]", "\n", "\n", "if", "(", "pos", "+", "1", ")", "==", "1", ":", "\n", "                ", "recall", "[", "1", "]", "+=", "1", "\n", "", "if", "(", "pos", "+", "1", ")", "<=", "5", ":", "\n", "                ", "recall", "[", "5", "]", "+=", "1", "\n", "", "if", "(", "pos", "+", "1", ")", "<=", "10", ":", "\n", "                ", "recall", "[", "10", "]", "+=", "1", "\n", "\n", "# store the position", "\n", "", "med_rank", ".", "append", "(", "pos", "+", "1", ")", "\n", "\n", "", "for", "i", "in", "recall", ".", "keys", "(", ")", ":", "\n", "            ", "recall", "[", "i", "]", "=", "recall", "[", "i", "]", "/", "N", "\n", "\n", "", "med", "=", "np", ".", "median", "(", "med_rank", ")", "\n", "\n", "for", "i", "in", "recall", ".", "keys", "(", ")", ":", "\n", "            ", "glob_recall", "[", "i", "]", "+=", "recall", "[", "i", "]", "\n", "", "glob_rank", ".", "append", "(", "med", ")", "\n", "\n", "", "for", "i", "in", "glob_recall", ".", "keys", "(", ")", ":", "\n", "        ", "glob_recall", "[", "i", "]", "=", "glob_recall", "[", "i", "]", "/", "10", "\n", "\n", "", "return", "np", ".", "average", "(", "glob_rank", ")", ",", "glob_recall", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.test.rank_t2i": [[147, 197], ["random.seed", "range", "range", "glob_recall.keys", "random.sample", "recall.keys", "numpy.median", "recall.keys", "glob_rank.append", "numpy.average", "range", "range", "sorted", "med_rank.append", "len", "numpy.linalg.norm", "distance.items", "numpy.where", "numpy.array"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.DecoderRNN.sample", "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.norm"], ["", "def", "rank_t2i", "(", "opts", ",", "img_embeds", ",", "rec_embeds", ")", ":", "\n", "    ", "random", ".", "seed", "(", "opts", ".", "seed", ")", "\n", "im_vecs", "=", "img_embeds", "\n", "instr_vecs", "=", "rec_embeds", "\n", "\n", "# Ranker", "\n", "N", "=", "10000", "\n", "idxs", "=", "range", "(", "N", ")", "\n", "\n", "glob_rank", "=", "[", "]", "\n", "glob_recall", "=", "{", "1", ":", "0.0", ",", "5", ":", "0.0", ",", "10", ":", "0.0", "}", "\n", "for", "i", "in", "range", "(", "10", ")", ":", "\n", "\n", "        ", "ids", "=", "random", ".", "sample", "(", "range", "(", "0", ",", "len", "(", "img_embeds", ")", ")", ",", "N", ")", "\n", "im_sub", "=", "im_vecs", "[", "ids", ",", ":", "]", "\n", "instr_sub", "=", "instr_vecs", "[", "ids", ",", ":", "]", "\n", "\n", "med_rank", "=", "[", "]", "\n", "recall", "=", "{", "1", ":", "0.0", ",", "5", ":", "0.0", ",", "10", ":", "0.0", "}", "\n", "\n", "for", "ii", "in", "idxs", ":", "\n", "            ", "distance", "=", "{", "}", "\n", "for", "j", "in", "range", "(", "N", ")", ":", "\n", "                ", "distance", "[", "j", "]", "=", "np", ".", "linalg", ".", "norm", "(", "instr_sub", "[", "ii", "]", "-", "im_sub", "[", "j", "]", ")", "\n", "", "distance_sorted", "=", "sorted", "(", "distance", ".", "items", "(", ")", ",", "key", "=", "lambda", "x", ":", "x", "[", "1", "]", ")", "\n", "pos", "=", "np", ".", "where", "(", "np", ".", "array", "(", "distance_sorted", ")", "==", "distance", "[", "ii", "]", ")", "[", "0", "]", "[", "0", "]", "\n", "\n", "if", "(", "pos", "+", "1", ")", "==", "1", ":", "\n", "                ", "recall", "[", "1", "]", "+=", "1", "\n", "", "if", "(", "pos", "+", "1", ")", "<=", "5", ":", "\n", "                ", "recall", "[", "5", "]", "+=", "1", "\n", "", "if", "(", "pos", "+", "1", ")", "<=", "10", ":", "\n", "                ", "recall", "[", "10", "]", "+=", "1", "\n", "\n", "# store the position", "\n", "", "med_rank", ".", "append", "(", "pos", "+", "1", ")", "\n", "\n", "", "for", "i", "in", "recall", ".", "keys", "(", ")", ":", "\n", "            ", "recall", "[", "i", "]", "=", "recall", "[", "i", "]", "/", "N", "\n", "\n", "", "med", "=", "np", ".", "median", "(", "med_rank", ")", "\n", "\n", "for", "i", "in", "recall", ".", "keys", "(", ")", ":", "\n", "            ", "glob_recall", "[", "i", "]", "+=", "recall", "[", "i", "]", "\n", "", "glob_rank", ".", "append", "(", "med", ")", "\n", "\n", "", "for", "i", "in", "glob_recall", ".", "keys", "(", ")", ":", "\n", "        ", "glob_recall", "[", "i", "]", "=", "glob_recall", "[", "i", "]", "/", "10", "\n", "\n", "", "return", "np", ".", "average", "(", "glob_rank", ")", ",", "glob_recall", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.build_vocab.Vocabulary.__init__": [[9, 13], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "word2idx", "=", "{", "}", "\n", "self", ".", "idx2word", "=", "{", "}", "\n", "self", ".", "idx", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.build_vocab.Vocabulary.add_word": [[14, 19], ["None"], "methods", ["None"], ["", "def", "add_word", "(", "self", ",", "word", ")", ":", "\n", "        ", "if", "not", "word", "in", "self", ".", "word2idx", ":", "\n", "            ", "self", ".", "word2idx", "[", "word", "]", "=", "self", ".", "idx", "\n", "self", ".", "idx2word", "[", "self", ".", "idx", "]", "=", "word", "\n", "self", ".", "idx", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.build_vocab.Vocabulary.__call__": [[20, 24], ["None"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "word", ")", ":", "\n", "        ", "if", "not", "word", "in", "self", ".", "word2idx", ":", "\n", "            ", "return", "self", ".", "word2idx", "[", "'<unk>'", "]", "\n", "", "return", "self", ".", "word2idx", "[", "word", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.build_vocab.Vocabulary.__len__": [[25, 27], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "word2idx", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.build_vocab.build_vocab": [[28, 65], ["collections.Counter", "build_vocab.Vocabulary", "build_vocab.Vocabulary.add_word", "build_vocab.Vocabulary.add_word", "build_vocab.Vocabulary.add_word", "build_vocab.Vocabulary.add_word", "build_vocab.Vocabulary.add_word", "enumerate", "pdb.set_trace", "pickle.load.keys", "enumerate", "build_vocab.Vocabulary.add_word", "open", "pickle.load", "range", "collections.Counter.items", "len", "collections.Counter.update", "print", "ingredient[].lower", "len"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.build_vocab.Vocabulary.add_word", "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.build_vocab.Vocabulary.add_word", "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.build_vocab.Vocabulary.add_word", "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.build_vocab.Vocabulary.add_word", "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.build_vocab.Vocabulary.add_word", "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.build_vocab.Vocabulary.add_word", "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.train.AverageMeter.update"], ["", "", "def", "build_vocab", "(", "path", ",", "threshold", ")", ":", "\n", "    ", "\"\"\"Build a simple vocabulary wrapper.\"\"\"", "\n", "dataset", "=", "[", "'train'", ",", "'val'", ",", "'test'", "]", "\n", "# dataset = ['train']", "\n", "counter", "=", "Counter", "(", ")", "\n", "\n", "for", "i", "in", "dataset", ":", "\n", "        ", "data_path", "=", "path", "+", "i", "+", "'_split.pkl'", "\n", "with", "open", "(", "data_path", ",", "\"rb\"", ")", "as", "f", ":", "\n", "            ", "data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "ids", "=", "data", ".", "keys", "(", ")", "\n", "for", "j", ",", "id", "in", "enumerate", "(", "ids", ")", ":", "\n", "            ", "ingredient", "=", "data", "[", "id", "]", "[", "'ingredients'", "]", "\n", "for", "k", "in", "range", "(", "len", "(", "ingredient", ")", ")", ":", "\n", "# tokens = nltk.tokenize.word_tokenize(ingredient[k].lower())", "\n", "                ", "tokens", "=", "[", "ingredient", "[", "k", "]", ".", "lower", "(", ")", "]", "\n", "counter", ".", "update", "(", "tokens", ")", "\n", "\n", "", "if", "(", "j", "+", "1", ")", "%", "1000", "==", "0", ":", "\n", "                ", "print", "(", "\"[{}/{}] Tokenized the ingredients.\"", ".", "format", "(", "j", "+", "1", ",", "len", "(", "ids", ")", ")", ")", "\n", "\n", "# If the word frequency is less than 'threshold', then the word is discarded.", "\n", "", "", "", "words", "=", "[", "word", "for", "word", ",", "cnt", "in", "counter", ".", "items", "(", ")", "if", "cnt", ">=", "threshold", "]", "\n", "\n", "# Create a vocab wrapper and add some special tokens.", "\n", "vocab", "=", "Vocabulary", "(", ")", "\n", "vocab", ".", "add_word", "(", "'<pad>'", ")", "\n", "vocab", ".", "add_word", "(", "'<start>'", ")", "\n", "vocab", ".", "add_word", "(", "'<end>'", ")", "\n", "vocab", ".", "add_word", "(", "'<unk>'", ")", "\n", "vocab", ".", "add_word", "(", "','", ")", "\n", "\n", "for", "i", ",", "word", "in", "enumerate", "(", "words", ")", ":", "\n", "        ", "vocab", ".", "add_word", "(", "word", ")", "\n", "\n", "", "import", "pdb", ";", "pdb", ".", "set_trace", "(", ")", "\n", "return", "vocab", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.build_vocab.main": [[66, 73], ["build_vocab.build_vocab", "print", "print", "open", "pickle.dump", "len"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.build_vocab.build_vocab"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "vocab", "=", "build_vocab", "(", "path", "=", "args", ".", "caption_path", ",", "threshold", "=", "args", ".", "threshold", ")", "\n", "vocab_path", "=", "args", ".", "vocab_path", "\n", "with", "open", "(", "vocab_path", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "vocab", ",", "f", ")", "\n", "", "print", "(", "\"Total vocabulary size: {}\"", ".", "format", "(", "len", "(", "vocab", ")", ")", ")", "\n", "print", "(", "\"Saved the vocabulary wrapper to '{}'\"", ".", "format", "(", "vocab_path", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.triplet_loss.TripletLoss.__init__": [[10, 17], ["torch.nn.MarginRankingLoss", "torch.nn.SoftMarginLoss"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "device", ",", "margin", "=", "None", ")", ":", "\n", "    ", "self", ".", "margin", "=", "margin", "\n", "self", ".", "device", "=", "device", "\n", "if", "margin", "is", "not", "None", ":", "\n", "      ", "self", ".", "ranking_loss", "=", "nn", ".", "MarginRankingLoss", "(", "margin", "=", "margin", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "ranking_loss", "=", "nn", ".", "SoftMarginLoss", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.triplet_loss.TripletLoss.__call__": [[18, 27], ["torch.cuda.device", "torch.autograd.Variable().cuda", "triplet_loss.TripletLoss.ranking_loss", "triplet_loss.TripletLoss.ranking_loss", "torch.autograd.Variable", "dist_an.data.new().resize_as_().fill_", "dist_an.data.new().resize_as_", "dist_an.data.new"], "methods", ["None"], ["", "", "def", "__call__", "(", "self", ",", "dist_ap", ",", "dist_an", ")", ":", "\n", "\n", "    ", "with", "torch", ".", "cuda", ".", "device", "(", "self", ".", "device", "[", "0", "]", ")", ":", "\n", "      ", "y", "=", "Variable", "(", "dist_an", ".", "data", ".", "new", "(", ")", ".", "resize_as_", "(", "dist_an", ".", "data", ")", ".", "fill_", "(", "1", ")", ")", ".", "cuda", "(", ")", "\n", "", "if", "self", ".", "margin", "is", "not", "None", ":", "\n", "      ", "loss", "=", "self", ".", "ranking_loss", "(", "dist_an", ",", "dist_ap", ",", "y", ")", "\n", "", "else", ":", "\n", "      ", "loss", "=", "self", ".", "ranking_loss", "(", "dist_an", "-", "dist_ap", ",", "y", ")", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.triplet_loss.normalize": [[28, 32], ["torch.norm().expand_as", "torch.norm"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.models.norm"], ["", "", "def", "normalize", "(", "x", ",", "axis", "=", "-", "1", ")", ":", "\n", "\n", "  ", "x", "=", "1.", "*", "x", "/", "(", "torch", ".", "norm", "(", "x", ",", "2", ",", "axis", ",", "keepdim", "=", "True", ")", ".", "expand_as", "(", "x", ")", "+", "1e-12", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.triplet_loss.euclidean_dist": [[34, 50], ["torch.pow().sum().expand", "torch.pow().sum().expand().t", "dist.clamp().sqrt.addmm_", "dist.clamp().sqrt.clamp().sqrt", "x.size", "y.size", "y.t", "torch.pow().sum", "torch.pow().sum().expand", "dist.clamp().sqrt.clamp", "torch.pow", "torch.pow().sum", "torch.pow"], "function", ["None"], ["", "def", "euclidean_dist", "(", "x", ",", "y", ")", ":", "\n", "  ", "\"\"\"\n  Args:\n    x: pytorch Variable, with shape [m, d]\n    y: pytorch Variable, with shape [n, d]\n  Returns:\n    dist: pytorch Variable, with shape [m, n]\n  \"\"\"", "\n", "m", ",", "n", "=", "x", ".", "size", "(", "0", ")", ",", "y", ".", "size", "(", "0", ")", "\n", "xx", "=", "torch", ".", "pow", "(", "x", ",", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "m", ",", "n", ")", "\n", "# import pdb; pdb.set_trace()", "\n", "yy", "=", "torch", ".", "pow", "(", "y", ",", "2", ")", ".", "sum", "(", "1", ",", "keepdim", "=", "True", ")", ".", "expand", "(", "n", ",", "m", ")", ".", "t", "(", ")", "\n", "dist", "=", "xx", "+", "yy", "\n", "dist", ".", "addmm_", "(", "1", ",", "-", "2", ",", "x", ",", "y", ".", "t", "(", ")", ")", "\n", "dist", "=", "dist", ".", "clamp", "(", "min", "=", "1e-12", ")", ".", "sqrt", "(", ")", "# for numerical stability", "\n", "return", "dist", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.triplet_loss.hard_example_mining": [[52, 90], ["dist_mat.size", "labels.expand().eq", "labels.expand().ne", "torch.max", "torch.min", "dist_ap.squeeze.squeeze", "dist_an.squeeze.squeeze", "len", "dist_mat.size", "dist_mat.size", "labels.expand().t", "labels.expand().t", "dist_mat[].contiguous().view", "dist_mat[].contiguous().view", "labels.new().resize_as_().copy_().unsqueeze().expand", "torch.gather", "torch.gather", "p_inds.squeeze.squeeze", "n_inds.squeeze.squeeze", "dist_mat.size", "labels.expand", "labels.expand", "ind[].contiguous().view", "ind[].contiguous().view", "labels.expand", "labels.expand", "dist_mat[].contiguous", "dist_mat[].contiguous", "labels.new().resize_as_().copy_().unsqueeze", "ind[].contiguous", "ind[].contiguous", "labels.new().resize_as_().copy_", "torch.arange().long", "labels.new().resize_as_", "torch.arange", "labels.new"], "function", ["None"], ["", "def", "hard_example_mining", "(", "dist_mat", ",", "labels", ",", "return_inds", "=", "False", ")", ":", "\n", "\n", "  ", "assert", "len", "(", "dist_mat", ".", "size", "(", ")", ")", "==", "2", "\n", "assert", "dist_mat", ".", "size", "(", "0", ")", "==", "dist_mat", ".", "size", "(", "1", ")", "\n", "N", "=", "dist_mat", ".", "size", "(", "0", ")", "\n", "\n", "# shape [N, N]", "\n", "is_pos", "=", "labels", ".", "expand", "(", "N", ",", "N", ")", ".", "eq", "(", "labels", ".", "expand", "(", "N", ",", "N", ")", ".", "t", "(", ")", ")", "\n", "is_neg", "=", "labels", ".", "expand", "(", "N", ",", "N", ")", ".", "ne", "(", "labels", ".", "expand", "(", "N", ",", "N", ")", ".", "t", "(", ")", ")", "\n", "\n", "# `dist_ap` means distance(anchor, positive)", "\n", "# both `dist_ap` and `relative_p_inds` with shape [N, 1]", "\n", "dist_ap", ",", "relative_p_inds", "=", "torch", ".", "max", "(", "\n", "dist_mat", "[", "is_pos", "]", ".", "contiguous", "(", ")", ".", "view", "(", "N", ",", "-", "1", ")", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "# `dist_an` means distance(anchor, negative)", "\n", "# both `dist_an` and `relative_n_inds` with shape [N, 1]", "\n", "dist_an", ",", "relative_n_inds", "=", "torch", ".", "min", "(", "\n", "dist_mat", "[", "is_neg", "]", ".", "contiguous", "(", ")", ".", "view", "(", "N", ",", "-", "1", ")", ",", "1", ",", "keepdim", "=", "True", ")", "\n", "# shape [N]", "\n", "dist_ap", "=", "dist_ap", ".", "squeeze", "(", "1", ")", "\n", "dist_an", "=", "dist_an", ".", "squeeze", "(", "1", ")", "\n", "\n", "if", "return_inds", ":", "\n", "# shape [N, N]", "\n", "    ", "ind", "=", "(", "labels", ".", "new", "(", ")", ".", "resize_as_", "(", "labels", ")", "\n", ".", "copy_", "(", "torch", ".", "arange", "(", "0", ",", "N", ")", ".", "long", "(", ")", ")", "\n", ".", "unsqueeze", "(", "0", ")", ".", "expand", "(", "N", ",", "N", ")", ")", "\n", "# shape [N, 1]", "\n", "p_inds", "=", "torch", ".", "gather", "(", "\n", "ind", "[", "is_pos", "]", ".", "contiguous", "(", ")", ".", "view", "(", "N", ",", "-", "1", ")", ",", "1", ",", "relative_p_inds", ".", "data", ")", "\n", "n_inds", "=", "torch", ".", "gather", "(", "\n", "ind", "[", "is_neg", "]", ".", "contiguous", "(", ")", ".", "view", "(", "N", ",", "-", "1", ")", ",", "1", ",", "relative_n_inds", ".", "data", ")", "\n", "# shape [N]", "\n", "p_inds", "=", "p_inds", ".", "squeeze", "(", "1", ")", "\n", "n_inds", "=", "n_inds", ".", "squeeze", "(", "1", ")", "\n", "return", "dist_ap", ",", "dist_an", ",", "p_inds", ",", "n_inds", "\n", "\n", "", "return", "dist_ap", ",", "dist_an", "\n", "\n"]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.triplet_loss.global_loss": [[92, 102], ["triplet_loss.euclidean_dist", "triplet_loss.hard_example_mining", "tri_loss", "triplet_loss.normalize"], "function", ["home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.triplet_loss.euclidean_dist", "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.triplet_loss.hard_example_mining", "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.triplet_loss.normalize"], ["", "def", "global_loss", "(", "tri_loss", ",", "global_feat", ",", "labels", ",", "normalize_feature", "=", "False", ")", ":", "\n", "\n", "  ", "if", "normalize_feature", ":", "\n", "    ", "global_feat", "=", "normalize", "(", "global_feat", ",", "axis", "=", "-", "1", ")", "\n", "# shape [N, N]", "\n", "", "dist_mat", "=", "euclidean_dist", "(", "global_feat", ",", "global_feat", ")", "\n", "dist_ap", ",", "dist_an", "=", "hard_example_mining", "(", "\n", "dist_mat", ",", "labels", ",", "return_inds", "=", "False", ")", "\n", "loss", "=", "tri_loss", "(", "dist_ap", ",", "dist_an", ")", "\n", "return", "loss", ",", "dist_ap", ",", "dist_an", ",", "dist_mat", "", "", ""]], "home.repos.pwc.inspect_result.LARC-CMU-SMU_ACME.None.args.get_parser": [[3, 60], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument"], "function", ["None"], ["def", "get_parser", "(", ")", ":", "\n", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'tri-joint parameters'", ")", "\n", "# general", "\n", "parser", ".", "add_argument", "(", "'--seed'", ",", "default", "=", "1234", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--device'", ",", "default", "=", "[", "0", "]", ",", "type", "=", "list", ")", "\n", "\n", "# data", "\n", "parser", ".", "add_argument", "(", "'--img_path'", ",", "default", "=", "'../im2recipe-Pytorch/data'", ")", "\n", "parser", ".", "add_argument", "(", "'--data_path'", ",", "default", "=", "'data/food_data/'", ")", "\n", "parser", ".", "add_argument", "(", "'--workers'", ",", "default", "=", "10", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--vocab_path'", ",", "type", "=", "str", ",", "default", "=", "'data/new_word_dict.pkl'", ",", "help", "=", "'path for vocabulary wrapper'", ")", "\n", "\n", "# model", "\n", "parser", ".", "add_argument", "(", "'--batch_size'", ",", "default", "=", "64", ",", "type", "=", "int", ")", "\n", "\n", "# im2recipe model", "\n", "parser", ".", "add_argument", "(", "'--embDim'", ",", "default", "=", "1024", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--nRNNs'", ",", "default", "=", "1", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--srnnDim'", ",", "default", "=", "1024", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--irnnDim'", ",", "default", "=", "300", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--imfeatDim'", ",", "default", "=", "2048", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--stDim'", ",", "default", "=", "1024", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--ingrW2VDim'", ",", "default", "=", "300", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--maxSeqlen'", ",", "default", "=", "20", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--maxIngrs'", ",", "default", "=", "20", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--maxImgs'", ",", "default", "=", "5", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--numClasses'", ",", "default", "=", "1048", ",", "type", "=", "int", ")", "\n", "\n", "#img-text", "\n", "parser", ".", "add_argument", "(", "'--hidden_size'", ",", "type", "=", "int", ",", "default", "=", "512", ",", "help", "=", "'dimension of lstm hidden states'", ")", "\n", "parser", ".", "add_argument", "(", "'--num_layers'", ",", "type", "=", "int", ",", "default", "=", "1", ",", "help", "=", "'number of layers in lstm'", ")", "\n", "\n", "#text-img", "\n", "parser", ".", "add_argument", "(", "'--Z_DIM'", ",", "type", "=", "int", ",", "default", "=", "100", ",", "help", "=", "'noise dimension for image generation'", ")", "\n", "parser", ".", "add_argument", "(", "'--DF_DIM'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'D dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--GF_DIM'", ",", "type", "=", "int", ",", "default", "=", "64", ",", "help", "=", "'G dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--EMBEDDING_DIM'", ",", "type", "=", "int", ",", "default", "=", "128", ",", "help", "=", "'embedding dimension'", ")", "\n", "parser", ".", "add_argument", "(", "'--R_NUM'", ",", "type", "=", "int", ",", "default", "=", "2", ",", "help", "=", "'resudial unit number'", ")", "\n", "parser", ".", "add_argument", "(", "'--BRANCH_NUM'", ",", "type", "=", "int", ",", "default", "=", "3", ",", "help", "=", "'the number of the stages'", ")", "\n", "parser", ".", "add_argument", "(", "'--B_CONDITION'", ",", "type", "=", "bool", ",", "default", "=", "True", ",", "help", "=", "'if use condition loss'", ")", "\n", "\n", "# training ", "\n", "parser", ".", "add_argument", "(", "'--lr'", ",", "default", "=", "0.0001", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--momentum'", ",", "default", "=", "0.9", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--weight_decay'", ",", "default", "=", "0", ",", "type", "=", "float", ")", "\n", "parser", ".", "add_argument", "(", "'--epochs'", ",", "default", "=", "50", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--start_epoch'", ",", "default", "=", "0", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--ingrW2V'", ",", "default", "=", "'data/vocab.bin'", ",", "type", "=", "str", ")", "\n", "\n", "# dataset", "\n", "parser", ".", "add_argument", "(", "'--maxlen'", ",", "default", "=", "20", ",", "type", "=", "int", ")", "\n", "parser", ".", "add_argument", "(", "'--vocab'", ",", "default", "=", "'vocab.txt'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--dataset'", ",", "default", "=", "'../data/recipe1M/'", ",", "type", "=", "str", ")", "\n", "parser", ".", "add_argument", "(", "'--sthdir'", ",", "default", "=", "'../data/'", ",", "type", "=", "str", ")", "\n", "\n", "return", "parser", "\n", "", ""]]}