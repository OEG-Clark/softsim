{"home.repos.pwc.inspect_result.dragonlong_articulated-pose.None._init_paths.add_path": [[5, 8], ["sys.path.insert"], "function", ["None"], ["def", "add_path", "(", "path", ")", ":", "\n", "    ", "if", "path", "not", "in", "sys", ".", "path", ":", "\n", "        ", "sys", ".", "path", ".", "insert", "(", "0", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.None.global_info.global_info.__init__": [[184, 194], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "name", "=", "'art6d'", "\n", "self", ".", "datasets", "=", "_DATASETS", "\n", "self", ".", "model_type", "=", "'pointnet++'", "\n", "# primary path, with sub-folders:", "\n", "# model/: put all training profiles & checkpoints;", "\n", "# results/: put network raw predictions + pose estimation results + error evaluation results;", "\n", "# dataset/: all data we use", "\n", "self", ".", "base_path", "=", "'/work/cascades/lxiaol9/6DPOSE'", "\n", "self", ".", "group_path", "=", "'./'", "# useful when we have additional dataset;", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.parallel_ancsh_pose.hungarian_matching": [[21, 49], ["numpy.zeros", "range", "numpy.zeros", "numpy.sum", "scipy.optimize.linear_sum_assignment", "numpy.max", "numpy.maximum", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.expand_dims", "numpy.arange", "numpy.sum", "numpy.sum"], "function", ["None"], ["def", "hungarian_matching", "(", "W_pred", ",", "I", ")", ":", "\n", "# This non-tf function does not backprob gradient, only output matching indices", "\n", "# W_pred - BxNxK", "\n", "# I - BxN, may contain -1's", "\n", "# Output: matching_indices - BxK, where (b,k)th ground truth primitive is matched with (b, matching_indices[b, k])", "\n", "#   where only n_labels entries on each row have meaning. The matching does not include gt background part", "\n", "    ", "batch_size", "=", "I", ".", "shape", "[", "0", "]", "\n", "n_points", "=", "I", ".", "shape", "[", "1", "]", "\n", "n_max_labels", "=", "W_pred", ".", "shape", "[", "2", "]", "\n", "\n", "matching_indices", "=", "np", ".", "zeros", "(", "[", "batch_size", ",", "n_max_labels", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "# assuming I[b] does not have gap", "\n", "        ", "n_labels", "=", "np", ".", "max", "(", "I", "[", "b", "]", ")", "+", "1", "# this is K'", "\n", "# print('Type: ', type(n_points), type(n_max_labels))", "\n", "W", "=", "np", ".", "zeros", "(", "[", "n_points", ",", "n_labels", "+", "1", "]", ")", "# HACK: add an extra column to contain -1's", "\n", "W", "[", "np", ".", "arange", "(", "n_points", ")", ",", "I", "[", "b", "]", "]", "=", "1.0", "# NxK'", "\n", "\n", "dot", "=", "np", ".", "sum", "(", "np", ".", "expand_dims", "(", "W", ",", "axis", "=", "2", ")", "*", "np", ".", "expand_dims", "(", "W_pred", "[", "b", "]", ",", "axis", "=", "1", ")", ",", "axis", "=", "0", ")", "# K'xK", "\n", "denominator", "=", "np", ".", "expand_dims", "(", "np", ".", "sum", "(", "W", ",", "axis", "=", "0", ")", ",", "axis", "=", "1", ")", "+", "np", ".", "expand_dims", "(", "np", ".", "sum", "(", "W_pred", "[", "b", "]", ",", "axis", "=", "0", ")", ",", "axis", "=", "0", ")", "-", "dot", "\n", "cost", "=", "dot", "/", "np", ".", "maximum", "(", "denominator", ",", "DIVISION_EPS", ")", "# K'xK", "\n", "cost", "=", "cost", "[", ":", "n_labels", ",", ":", "]", "# remove last row, corresponding to matching gt background part", "\n", "\n", "_", ",", "col_ind", "=", "linear_sum_assignment", "(", "-", "cost", ")", "# want max solution", "\n", "# print('finishing linear_sum_assignment')", "\n", "matching_indices", "[", "b", ",", ":", "n_labels", "]", "=", "col_ind", "\n", "\n", "", "return", "matching_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.parallel_ancsh_pose.rotate_pts": [[50, 63], ["numpy.matmul", "numpy.linalg.svd", "numpy.matmul", "numpy.mean", "numpy.mean", "numpy.linalg.det", "numpy.linalg.det"], "function", ["None"], ["", "def", "rotate_pts", "(", "source", ",", "target", ")", ":", "\n", "# compute rotation between source: [N x 3], target: [N x 3]", "\n", "# pre-centering", "\n", "    ", "source", "=", "source", "-", "np", ".", "mean", "(", "source", ",", "0", ",", "keepdims", "=", "True", ")", "\n", "target", "=", "target", "-", "np", ".", "mean", "(", "target", ",", "0", ",", "keepdims", "=", "True", ")", "\n", "M", "=", "np", ".", "matmul", "(", "target", ".", "T", ",", "source", ")", "\n", "U", ",", "D", ",", "Vh", "=", "np", ".", "linalg", ".", "svd", "(", "M", ",", "full_matrices", "=", "True", ")", "\n", "d", "=", "(", "np", ".", "linalg", ".", "det", "(", "U", ")", "*", "np", ".", "linalg", ".", "det", "(", "Vh", ")", ")", "<", "0.0", "\n", "if", "d", ":", "\n", "        ", "D", "[", "-", "1", "]", "=", "-", "D", "[", "-", "1", "]", "\n", "U", "[", ":", ",", "-", "1", "]", "=", "-", "U", "[", ":", ",", "-", "1", "]", "\n", "", "R", "=", "np", ".", "matmul", "(", "U", ",", "Vh", ")", "\n", "return", "R", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.parallel_ancsh_pose.scale_pts": [[64, 72], ["numpy.sqrt().reshape", "numpy.sqrt().reshape", "source.reshape", "source.reshape", "target.reshape", "target.reshape", "numpy.dot", "numpy.sqrt", "numpy.sqrt", "numpy.dot", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "scale_pts", "(", "source", ",", "target", ")", ":", "\n", "# compute scaling factor between source: [N x 3], target: [N x 3]", "\n", "    ", "pdist_s", "=", "source", ".", "reshape", "(", "source", ".", "shape", "[", "0", "]", ",", "1", ",", "3", ")", "-", "source", ".", "reshape", "(", "1", ",", "source", ".", "shape", "[", "0", "]", ",", "3", ")", "\n", "A", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "pdist_s", "**", "2", ",", "2", ")", ")", ".", "reshape", "(", "-", "1", ")", "\n", "pdist_t", "=", "target", ".", "reshape", "(", "target", ".", "shape", "[", "0", "]", ",", "1", ",", "3", ")", "-", "target", ".", "reshape", "(", "1", ",", "target", ".", "shape", "[", "0", "]", ",", "3", ")", "\n", "b", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "pdist_t", "**", "2", ",", "2", ")", ")", ".", "reshape", "(", "-", "1", ")", "\n", "scale", "=", "np", ".", "dot", "(", "A", ",", "b", ")", "/", "(", "np", ".", "dot", "(", "A", ",", "A", ")", "+", "1e-6", ")", "\n", "return", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.parallel_ancsh_pose.transform_pts": [[73, 89], ["parallel_ancsh_pose.rotate_pts", "parallel_ancsh_pose.scale_pts", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.matmul"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rotate_pts", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.scale_pts"], ["", "def", "transform_pts", "(", "source", ",", "target", ")", ":", "\n", "# source: [N x 3], target: [N x 3]", "\n", "# pre-centering and compute rotation", "\n", "    ", "source_centered", "=", "source", "-", "np", ".", "mean", "(", "source", ",", "0", ",", "keepdims", "=", "True", ")", "\n", "target_centered", "=", "target", "-", "np", ".", "mean", "(", "target", ",", "0", ",", "keepdims", "=", "True", ")", "\n", "rotation", "=", "rotate_pts", "(", "source_centered", ",", "target_centered", ")", "\n", "\n", "# compute scale", "\n", "#     A = np.matmul(rotation, source_centered.T).reshape(-1)", "\n", "#     b = target_centered.T.reshape(-1)", "\n", "#     scale = np.dot(A, b) / (np.dot(A, A)+1e-6)", "\n", "scale", "=", "scale_pts", "(", "source_centered", ",", "target_centered", ")", "\n", "\n", "# compute translation", "\n", "translation", "=", "np", ".", "mean", "(", "target", ".", "T", "-", "scale", "*", "np", ".", "matmul", "(", "rotation", ",", "source", ".", "T", ")", ",", "1", ")", "\n", "return", "rotation", ",", "scale", ",", "translation", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.parallel_ancsh_pose.rot_diff_rad": [[90, 92], ["numpy.arccos", "numpy.trace", "numpy.matmul"], "function", ["None"], ["", "def", "rot_diff_rad", "(", "rot1", ",", "rot2", ")", ":", "\n", "    ", "return", "np", ".", "arccos", "(", "(", "np", ".", "trace", "(", "np", ".", "matmul", "(", "rot1", ",", "rot2", ".", "T", ")", ")", "-", "1", ")", "/", "2", ")", "%", "(", "2", "*", "np", ".", "pi", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.parallel_ancsh_pose.rot_diff_degree": [[93, 95], ["parallel_ancsh_pose.rot_diff_rad"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rot_diff_rad"], ["", "def", "rot_diff_degree", "(", "rot1", ",", "rot2", ")", ":", "\n", "    ", "return", "rot_diff_rad", "(", "rot1", ",", "rot2", ")", "/", "np", ".", "pi", "*", "180", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.parallel_ancsh_pose.ransac": [[96, 108], ["range", "model_estimator", "parallel_ancsh_pose.joint_transformation_estimator", "parallel_ancsh_pose.joint_transformation_verifier"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.evaluation.baseline_naocs.joint_transformation_estimator", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.evaluation.baseline_naocs.joint_transformation_verifier"], ["", "def", "ransac", "(", "dataset", ",", "model_estimator", ",", "model_verifier", ",", "inlier_th", ",", "niter", "=", "10000", ")", ":", "\n", "    ", "best_model", "=", "None", "\n", "best_score", "=", "-", "np", ".", "inf", "\n", "best_inliers", "=", "None", "\n", "for", "i", "in", "range", "(", "niter", ")", ":", "\n", "        ", "cur_model", "=", "model_estimator", "(", "dataset", ")", "\n", "cur_score", ",", "cur_inliers", "=", "model_verifier", "(", "dataset", ",", "cur_model", ",", "inlier_th", ")", "\n", "if", "cur_score", ">", "best_score", ":", "\n", "            ", "best_model", "=", "cur_model", "\n", "best_inliers", "=", "cur_inliers", "\n", "", "", "best_model", "=", "model_estimator", "(", "dataset", ",", "best_inliers", ")", "\n", "return", "best_model", ",", "best_inliers", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.parallel_ancsh_pose.single_transformation_estimator": [[109, 121], ["parallel_ancsh_pose.transform_pts", "dict", "numpy.random.randint"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.transform_pts"], ["", "def", "single_transformation_estimator", "(", "dataset", ",", "best_inliers", "=", "None", ")", ":", "\n", "# dataset: dict, fields include source, target, nsource", "\n", "    ", "if", "best_inliers", "is", "None", ":", "\n", "        ", "sample_idx", "=", "np", ".", "random", ".", "randint", "(", "dataset", "[", "'nsource'", "]", ",", "size", "=", "3", ")", "\n", "", "else", ":", "\n", "        ", "sample_idx", "=", "best_inliers", "\n", "", "rotation", ",", "scale", ",", "translation", "=", "transform_pts", "(", "dataset", "[", "'source'", "]", "[", "sample_idx", ",", ":", "]", ",", "dataset", "[", "'target'", "]", "[", "sample_idx", ",", ":", "]", ")", "\n", "strans", "=", "dict", "(", ")", "\n", "strans", "[", "'rotation'", "]", "=", "rotation", "\n", "strans", "[", "'scale'", "]", "=", "scale", "\n", "strans", "[", "'translation'", "]", "=", "translation", "\n", "return", "strans", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.parallel_ancsh_pose.single_transformation_verifier": [[122, 129], ["numpy.sum", "model[].reshape", "numpy.sqrt", "numpy.sum", "numpy.matmul"], "function", ["None"], ["", "def", "single_transformation_verifier", "(", "dataset", ",", "model", ",", "inlier_th", ")", ":", "\n", "# dataset: dict, fields include source, target, nsource, ntarget", "\n", "# model: dict, fields include rotation, scale, translation", "\n", "    ", "res", "=", "dataset", "[", "'target'", "]", ".", "T", "-", "model", "[", "'scale'", "]", "*", "np", ".", "matmul", "(", "model", "[", "'rotation'", "]", ",", "dataset", "[", "'source'", "]", ".", "T", ")", "-", "model", "[", "'translation'", "]", ".", "reshape", "(", "(", "3", ",", "1", ")", ")", "\n", "inliers", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "res", "**", "2", ",", "0", ")", ")", "<", "inlier_th", "\n", "score", "=", "np", ".", "sum", "(", "inliers", ")", "\n", "return", "score", ",", "inliers", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.parallel_ancsh_pose.rotate_points_with_rotvec": [[130, 144], ["numpy.cos", "numpy.sin", "numpy.linalg.norm", "numpy.errstate", "numpy.nan_to_num", "numpy.sum", "numpy.cross"], "function", ["None"], ["", "def", "rotate_points_with_rotvec", "(", "points", ",", "rot_vecs", ")", ":", "\n", "    ", "\"\"\"Rotate points by given rotation vectors.\n\n    Rodrigues' rotation formula is used.\n    \"\"\"", "\n", "theta", "=", "np", ".", "linalg", ".", "norm", "(", "rot_vecs", ",", "axis", "=", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "with", "np", ".", "errstate", "(", "invalid", "=", "'ignore'", ")", ":", "\n", "        ", "v", "=", "rot_vecs", "/", "theta", "\n", "v", "=", "np", ".", "nan_to_num", "(", "v", ")", "\n", "", "dot", "=", "np", ".", "sum", "(", "points", "*", "v", ",", "axis", "=", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "cos_theta", "=", "np", ".", "cos", "(", "theta", ")", "\n", "sin_theta", "=", "np", ".", "sin", "(", "theta", ")", "\n", "\n", "return", "cos_theta", "*", "points", "+", "sin_theta", "*", "np", ".", "cross", "(", "v", ",", "points", ")", "+", "dot", "*", "(", "1", "-", "cos_theta", ")", "*", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.parallel_ancsh_pose.objective_eval": [[145, 158], ["params[].reshape", "params[].reshape", "numpy.concatenate().ravel", "parallel_ancsh_pose.rotate_points_with_rotvec", "parallel_ancsh_pose.rotate_points_with_rotvec", "parallel_ancsh_pose.rotate_points_with_rotvec", "parallel_ancsh_pose.rotate_points_with_rotvec", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rotate_points_with_rotvec", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rotate_points_with_rotvec", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rotate_points_with_rotvec", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rotate_points_with_rotvec"], ["", "def", "objective_eval", "(", "params", ",", "x0", ",", "y0", ",", "x1", ",", "y1", ",", "joints", ",", "isweight", "=", "True", ")", ":", "\n", "# params: [:3] R0, [3:] R1", "\n", "# x0: N x 3, y0: N x 3, x1: M x 3, y1: M x 3, R0: 1 x 3, R1: 1 x 3, joints: K x 3", "\n", "    ", "rotvec0", "=", "params", "[", ":", "3", "]", ".", "reshape", "(", "(", "1", ",", "3", ")", ")", "\n", "rotvec1", "=", "params", "[", "3", ":", "]", ".", "reshape", "(", "(", "1", ",", "3", ")", ")", "\n", "res0", "=", "y0", "-", "rotate_points_with_rotvec", "(", "x0", ",", "rotvec0", ")", "\n", "res1", "=", "y1", "-", "rotate_points_with_rotvec", "(", "x1", ",", "rotvec1", ")", "\n", "res_joint", "=", "rotate_points_with_rotvec", "(", "joints", ",", "rotvec0", ")", "-", "rotate_points_with_rotvec", "(", "joints", ",", "rotvec1", ")", "\n", "if", "isweight", ":", "\n", "        ", "res0", "/=", "x0", ".", "shape", "[", "0", "]", "\n", "res1", "/=", "x1", ".", "shape", "[", "0", "]", "\n", "res_joint", "/=", "joints", ".", "shape", "[", "0", "]", "\n", "", "return", "np", ".", "concatenate", "(", "(", "res0", ",", "res1", ",", "res_joint", ")", ",", "0", ")", ".", "ravel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.parallel_ancsh_pose.objective_eval_r": [[159, 171], ["params[].reshape", "params[].reshape", "numpy.concatenate().ravel", "parallel_ancsh_pose.rotate_points_with_rotvec", "parallel_ancsh_pose.rotate_points_with_rotvec", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rotate_points_with_rotvec", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rotate_points_with_rotvec"], ["", "def", "objective_eval_r", "(", "params", ",", "x0", ",", "y0", ",", "x1", ",", "y1", ",", "joints", ",", "isweight", "=", "True", ",", "joint_type", "=", "'prismatic'", ")", ":", "\n", "# params: [:3] R0, [3:] R1", "\n", "# x0: N x 3, y0: N x 3, x1: M x 3, y1: M x 3, R0: 1 x 3, R1: 1 x 3, joints: K x 3", "\n", "    ", "rotvec0", "=", "params", "[", ":", "3", "]", ".", "reshape", "(", "(", "1", ",", "3", ")", ")", "\n", "rotvec1", "=", "params", "[", "3", ":", "]", ".", "reshape", "(", "(", "1", ",", "3", ")", ")", "\n", "res0", "=", "y0", "-", "rotate_points_with_rotvec", "(", "x0", ",", "rotvec0", ")", "\n", "res1", "=", "y1", "-", "rotate_points_with_rotvec", "(", "x1", ",", "rotvec1", ")", "\n", "res_R", "=", "rotvec0", "-", "rotvec1", "\n", "if", "isweight", ":", "\n", "        ", "res0", "/=", "x0", ".", "shape", "[", "0", "]", "\n", "res1", "/=", "x1", ".", "shape", "[", "0", "]", "\n", "", "return", "np", ".", "concatenate", "(", "(", "res0", ",", "res1", ",", "res_R", ")", ",", "0", ")", ".", "ravel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.parallel_ancsh_pose.objective_eval_t": [[172, 194], ["params[].reshape", "params[].reshape", "numpy.array", "numpy.matmul().reshape", "numpy.concatenate().ravel", "numpy.matmul", "numpy.ones", "numpy.matmul", "numpy.concatenate", "numpy.matmul", "numpy.matmul", "numpy.min"], "function", ["None"], ["", "def", "objective_eval_t", "(", "params", ",", "x0", ",", "y0", ",", "x1", ",", "y1", ",", "joints", ",", "R0", ",", "R1", ",", "scale0", ",", "scale1", ",", "isweight", "=", "True", ")", ":", "\n", "# params: [0:3] t0, [3:6] t1;", "\n", "# joints: K * 3", "\n", "# rotvec0, rotvec1, scale0, scale1 solved from previous steps", "\n", "    ", "R", "=", "R0", "\n", "transvec0", "=", "params", "[", "0", ":", "3", "]", ".", "reshape", "(", "(", "1", ",", "3", ")", ")", "\n", "transvec1", "=", "params", "[", "3", ":", "6", "]", ".", "reshape", "(", "(", "1", ",", "3", ")", ")", "\n", "res0", "=", "y0", "-", "scale0", "*", "np", ".", "matmul", "(", "x0", ",", "R0", ".", "T", ")", "-", "transvec0", "\n", "res1", "=", "y1", "-", "scale1", "*", "np", ".", "matmul", "(", "x1", ",", "R1", ".", "T", ")", "-", "transvec1", "\n", "rot_u", "=", "np", ".", "matmul", "(", "joints", ",", "R", ".", "T", ")", "[", "0", "]", "\n", "delta_trans", "=", "transvec0", "-", "transvec1", "\n", "cross_mat", "=", "np", ".", "array", "(", "[", "[", "0", ",", "-", "rot_u", "[", "2", "]", ",", "rot_u", "[", "1", "]", "]", ",", "\n", "[", "rot_u", "[", "2", "]", ",", "0", ",", "-", "rot_u", "[", "0", "]", "]", ",", "\n", "[", "-", "rot_u", "[", "1", "]", ",", "rot_u", "[", "0", "]", ",", "0", "]", "]", ")", "\n", "res2", "=", "np", ".", "matmul", "(", "delta_trans", ",", "cross_mat", ".", "T", ")", ".", "reshape", "(", "1", ",", "3", ")", "\n", "# np.linspace(0, 1, num = np.min((x0.shape[0], x1.shape[0]))+1 )[1:].reshape((-1, 1))", "\n", "res2", "=", "np", ".", "ones", "(", "(", "np", ".", "min", "(", "(", "x0", ".", "shape", "[", "0", "]", ",", "x1", ".", "shape", "[", "0", "]", ")", ")", ",", "1", ")", ")", "*", "res2", "\n", "if", "isweight", ":", "\n", "        ", "res0", "/=", "x0", ".", "shape", "[", "0", "]", "\n", "res1", "/=", "x1", ".", "shape", "[", "0", "]", "\n", "res2", "/=", "res2", ".", "shape", "[", "0", "]", "\n", "", "return", "np", ".", "concatenate", "(", "(", "res0", ",", "res1", ",", "res2", ")", ",", "0", ")", ".", "ravel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.parallel_ancsh_pose.joint_transformation_estimator": [[195, 284], ["parallel_ancsh_pose.scale_pts", "parallel_ancsh_pose.scale_pts", "parallel_ancsh_pose.scale_pts", "parallel_ancsh_pose.scale_pts", "numpy.mean", "numpy.mean", "dataset[].reshape", "parallel_ancsh_pose.rotate_pts", "parallel_ancsh_pose.rotate_pts", "numpy.mean", "numpy.mean", "dict", "numpy.random.randint", "numpy.random.randint", "numpy.mean", "numpy.mean", "numpy.ones_like", "dataset[].reshape", "numpy.ones_like", "dataset[].reshape", "scipy.spatial.transform.Rotation.from_dcm().as_rotvec", "scipy.spatial.transform.Rotation.from_dcm().as_rotvec", "scipy.spatial.transform.Rotation.from_rotvec().as_dcm", "scipy.spatial.transform.Rotation.from_rotvec().as_dcm", "range", "[].reshape", "[].reshape", "scipy.optimize.least_squares", "numpy.concatenate", "numpy.concatenate", "parallel_ancsh_pose.rotate_pts", "parallel_ancsh_pose.rot_diff_degree", "numpy.concatenate", "numpy.concatenate", "parallel_ancsh_pose.rotate_pts", "parallel_ancsh_pose.rot_diff_degree", "scipy.spatial.transform.Rotation.from_dcm", "scipy.spatial.transform.Rotation.from_dcm", "numpy.hstack", "scipy.optimize.least_squares", "scipy.spatial.transform.Rotation.from_rotvec", "scipy.spatial.transform.Rotation.from_rotvec", "numpy.matmul", "numpy.matmul", "numpy.hstack", "numpy.matmul", "numpy.matmul", "numpy.linspace", "numpy.linspace", "numpy.min", "numpy.min"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.scale_pts", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.scale_pts", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.scale_pts", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.scale_pts", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rotate_pts", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rotate_pts", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rotate_pts", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rot_diff_degree", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rotate_pts", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rot_diff_degree"], ["", "def", "joint_transformation_estimator", "(", "dataset", ",", "best_inliers", "=", "None", ",", "joint_type", "=", "'revolute'", ")", ":", "\n", "# dataset: dict, fields include source0, target0, nsource0,", "\n", "#     source1, target1, nsource1, joint_direction", "\n", "    ", "if", "best_inliers", "is", "None", ":", "\n", "        ", "sample_idx0", "=", "np", ".", "random", ".", "randint", "(", "dataset", "[", "'nsource0'", "]", ",", "size", "=", "3", ")", "\n", "sample_idx1", "=", "np", ".", "random", ".", "randint", "(", "dataset", "[", "'nsource1'", "]", ",", "size", "=", "3", ")", "\n", "", "else", ":", "\n", "        ", "sample_idx0", "=", "best_inliers", "[", "0", "]", "\n", "sample_idx1", "=", "best_inliers", "[", "1", "]", "\n", "\n", "", "source0", "=", "dataset", "[", "'source0'", "]", "[", "sample_idx0", ",", ":", "]", "\n", "target0", "=", "dataset", "[", "'target0'", "]", "[", "sample_idx0", ",", ":", "]", "\n", "source1", "=", "dataset", "[", "'source1'", "]", "[", "sample_idx1", ",", ":", "]", "\n", "target1", "=", "dataset", "[", "'target1'", "]", "[", "sample_idx1", ",", ":", "]", "\n", "# prescaling and centering", "\n", "scale0", "=", "scale_pts", "(", "source0", ",", "target0", ")", "\n", "scale1", "=", "scale_pts", "(", "source1", ",", "target1", ")", "\n", "scale0_inv", "=", "scale_pts", "(", "target0", ",", "source0", ")", "# check if could simply take reciprocal", "\n", "scale1_inv", "=", "scale_pts", "(", "target1", ",", "source1", ")", "\n", "\n", "target0_scaled_centered", "=", "scale0_inv", "*", "target0", "\n", "target0_scaled_centered", "-=", "np", ".", "mean", "(", "target0_scaled_centered", ",", "0", ",", "keepdims", "=", "True", ")", "\n", "source0_centered", "=", "source0", "-", "np", ".", "mean", "(", "source0", ",", "0", ",", "keepdims", "=", "True", ")", "\n", "\n", "target1_scaled_centered", "=", "scale1_inv", "*", "target1", "\n", "target1_scaled_centered", "-=", "np", ".", "mean", "(", "target1_scaled_centered", ",", "0", ",", "keepdims", "=", "True", ")", "\n", "source1_centered", "=", "source1", "-", "np", ".", "mean", "(", "source1", ",", "0", ",", "keepdims", "=", "True", ")", "\n", "\n", "# joint optimization", "\n", "#     joint_points0 = np.linspace(0, 1, num = np.min((source0.shape[0], source1.shape[0]))+1 )[1:].reshape((-1, 1))*dataset['joint_direction'].reshape((1, 3))", "\n", "#     joint_points1 = np.linspace(0, 1, num = np.min((source0.shape[0], source1.shape[0]))+1 )[1:].reshape((-1, 1))*dataset['joint_direction'].reshape((1, 3))", "\n", "joint_points0", "=", "np", ".", "ones_like", "(", "np", ".", "linspace", "(", "0", ",", "1", ",", "num", "=", "np", ".", "min", "(", "(", "source0", ".", "shape", "[", "0", "]", ",", "source1", ".", "shape", "[", "0", "]", ")", ")", "+", "1", ")", "[", "1", ":", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", ")", "*", "dataset", "[", "'joint_direction'", "]", ".", "reshape", "(", "(", "1", ",", "3", ")", ")", "\n", "joint_points1", "=", "np", ".", "ones_like", "(", "np", ".", "linspace", "(", "0", ",", "1", ",", "num", "=", "np", ".", "min", "(", "(", "source0", ".", "shape", "[", "0", "]", ",", "source1", ".", "shape", "[", "0", "]", ")", ")", "+", "1", ")", "[", "1", ":", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", ")", "*", "dataset", "[", "'joint_direction'", "]", ".", "reshape", "(", "(", "1", ",", "3", ")", ")", "\n", "joint_axis", "=", "dataset", "[", "'joint_direction'", "]", ".", "reshape", "(", "(", "1", ",", "3", ")", ")", "\n", "#     joint_points0 = np.linspace(0, 1, num = source1.shape[0]+1 )[1:].reshape((-1, 1))*dataset['joint_direction'].reshape((1, 3))", "\n", "#     joint_points1 = np.linspace(0, 1, num = source0.shape[0]+1 )[1:].reshape((-1, 1))*dataset['joint_direction'].reshape((1, 3))", "\n", "R0", "=", "rotate_pts", "(", "source0_centered", ",", "target0_scaled_centered", ")", "\n", "R1", "=", "rotate_pts", "(", "source1_centered", ",", "target1_scaled_centered", ")", "\n", "rdiff0", "=", "np", ".", "inf", "\n", "rdiff1", "=", "np", ".", "inf", "\n", "niter", "=", "100", "\n", "degree_th", "=", "0.1", "\n", "isalternate", "=", "False", "\n", "isdirect", "=", "False", "\n", "if", "not", "isalternate", ":", "\n", "        ", "rotvec0", "=", "srot", ".", "from_dcm", "(", "R0", ")", ".", "as_rotvec", "(", ")", "\n", "rotvec1", "=", "srot", ".", "from_dcm", "(", "R1", ")", ".", "as_rotvec", "(", ")", "\n", "# print('initialize rotvec0 vs rotvec1: \\n', rotvec0, rotvec1)", "\n", "if", "joint_type", "==", "'prismatic'", ":", "\n", "            ", "res", "=", "least_squares", "(", "objective_eval_r", ",", "np", ".", "hstack", "(", "(", "rotvec0", ",", "rotvec1", ")", ")", ",", "verbose", "=", "0", ",", "ftol", "=", "1e-4", ",", "method", "=", "'lm'", ",", "\n", "args", "=", "(", "source0_centered", ",", "target0_scaled_centered", ",", "source1_centered", ",", "target1_scaled_centered", ",", "joint_points0", ",", "False", ")", ")", "\n", "", "elif", "joint_type", "==", "'revolute'", ":", "\n", "            ", "res", "=", "least_squares", "(", "objective_eval", ",", "np", ".", "hstack", "(", "(", "rotvec0", ",", "rotvec1", ")", ")", ",", "verbose", "=", "0", ",", "ftol", "=", "1e-4", ",", "method", "=", "'lm'", ",", "\n", "args", "=", "(", "source0_centered", ",", "target0_scaled_centered", ",", "source1_centered", ",", "target1_scaled_centered", ",", "joint_points0", ",", "False", ")", ")", "\n", "", "R0", "=", "srot", ".", "from_rotvec", "(", "res", ".", "x", "[", ":", "3", "]", ")", ".", "as_dcm", "(", ")", "\n", "R1", "=", "srot", ".", "from_rotvec", "(", "res", ".", "x", "[", "3", ":", "]", ")", ".", "as_dcm", "(", ")", "\n", "", "else", ":", "\n", "        ", "for", "i", "in", "range", "(", "niter", ")", ":", "\n", "            ", "if", "rdiff0", "<=", "degree_th", "and", "rdiff1", "<=", "degree_th", ":", "\n", "                ", "break", "\n", "", "newsrc0", "=", "np", ".", "concatenate", "(", "(", "source0_centered", ",", "joint_points0", ")", ",", "0", ")", "\n", "newtgt0", "=", "np", ".", "concatenate", "(", "(", "target0_scaled_centered", ",", "np", ".", "matmul", "(", "joint_points0", ",", "R1", ".", "T", ")", ")", ",", "0", ")", "\n", "newR0", "=", "rotate_pts", "(", "newsrc0", ",", "newtgt0", ")", "\n", "rdiff0", "=", "rot_diff_degree", "(", "R0", ",", "newR0", ")", "\n", "R0", "=", "newR0", "\n", "\n", "newsrc1", "=", "np", ".", "concatenate", "(", "(", "source1_centered", ",", "joint_points1", ")", ",", "0", ")", "\n", "newtgt1", "=", "np", ".", "concatenate", "(", "(", "target1_scaled_centered", ",", "np", ".", "matmul", "(", "joint_points1", ",", "R0", ".", "T", ")", ")", ",", "0", ")", "\n", "newR1", "=", "rotate_pts", "(", "newsrc1", ",", "newtgt1", ")", "\n", "rdiff1", "=", "rot_diff_degree", "(", "R1", ",", "newR1", ")", "\n", "R1", "=", "newR1", "\n", "\n", "", "", "translation0", "=", "np", ".", "mean", "(", "target0", ".", "T", "-", "scale0", "*", "np", ".", "matmul", "(", "R0", ",", "source0", ".", "T", ")", ",", "1", ")", "\n", "translation1", "=", "np", ".", "mean", "(", "target1", ".", "T", "-", "scale1", "*", "np", ".", "matmul", "(", "R1", ",", "source1", ".", "T", ")", ",", "1", ")", "\n", "\n", "# if joint_type == 'prismatic': # todo best_inliers is not None and", "\n", "#     res = least_squares(objective_eval_t, np.hstack((translation0, translation1)), verbose=0, ftol=1e-4, method='lm',", "\n", "#                 args=(source0, target0, source1, target1, joint_axis, R0, R1, scale0, scale1, False))", "\n", "#     translation0 = res.x[:3]", "\n", "#     translation1 = res.x[3:]", "\n", "\n", "jtrans", "=", "dict", "(", ")", "\n", "jtrans", "[", "'rotation0'", "]", "=", "R0", "\n", "jtrans", "[", "'scale0'", "]", "=", "scale0", "\n", "jtrans", "[", "'translation0'", "]", "=", "translation0", "\n", "jtrans", "[", "'rotation1'", "]", "=", "R1", "\n", "jtrans", "[", "'scale1'", "]", "=", "scale1", "\n", "jtrans", "[", "'translation1'", "]", "=", "translation1", "\n", "return", "jtrans", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.parallel_ancsh_pose.joint_transformation_verifier": [[285, 294], ["model[].reshape", "numpy.sqrt", "model[].reshape", "numpy.sqrt", "numpy.sum", "numpy.sum", "numpy.matmul", "numpy.matmul", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "joint_transformation_verifier", "(", "dataset", ",", "model", ",", "inlier_th", ")", ":", "\n", "# dataset: dict, fields include source, target, nsource, ntarget", "\n", "# model: dict, fields include rotation, scale, translation", "\n", "    ", "res0", "=", "dataset", "[", "'target0'", "]", ".", "T", "-", "model", "[", "'scale0'", "]", "*", "np", ".", "matmul", "(", "model", "[", "'rotation0'", "]", ",", "dataset", "[", "'source0'", "]", ".", "T", ")", "-", "model", "[", "'translation0'", "]", ".", "reshape", "(", "(", "3", ",", "1", ")", ")", "\n", "inliers0", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "res0", "**", "2", ",", "0", ")", ")", "<", "inlier_th", "\n", "res1", "=", "dataset", "[", "'target1'", "]", ".", "T", "-", "model", "[", "'scale1'", "]", "*", "np", ".", "matmul", "(", "model", "[", "'rotation1'", "]", ",", "dataset", "[", "'source1'", "]", ".", "T", ")", "-", "model", "[", "'translation1'", "]", ".", "reshape", "(", "(", "3", ",", "1", ")", ")", "\n", "inliers1", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "res1", "**", "2", ",", "0", ")", ")", "<", "inlier_th", "\n", "score", "=", "(", "np", ".", "sum", "(", "inliers0", ")", "/", "res0", ".", "shape", "[", "0", "]", "+", "np", ".", "sum", "(", "inliers1", ")", "/", "res1", ".", "shape", "[", "0", "]", ")", "/", "2", "\n", "return", "score", ",", "[", "inliers0", ",", "inliers1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.parallel_ancsh_pose.solver_ransac_nonlinear": [[295, 440], ["range", "range", "time.time", "print", "print", "h5py.File", "print", "numpy.argmax", "range", "h5py.File", "numpy.argmax", "range", "numpy.argmax", "range", "range", "open", "pickle.dump", "numpy.array", "numpy.array", "print", "print", "test_group[].split", "partidx.append", "joint_idx.append", "partidx_ours.append", "numpy.median", "print", "jts_axis.append", "dict", "parallel_ancsh_pose.ransac", "parallel_ancsh_pose.rot_diff_degree", "numpy.linalg.norm", "numpy.linalg.norm", "parallel_ancsh_pose.rot_diff_degree", "numpy.linalg.norm", "numpy.linalg.norm", "print", "rpy_err[].append", "xyz_err[].append", "scale_err[].append", "[].append", "[].append", "[].append", "scale_dict[].append", "scale_dict[].append", "r_dict[].append", "r_dict[].append", "t_dict[].append", "t_dict[].append", "test_group[].split", "print", "rpy_err[].append", "xyz_err[].append", "scale_err[].append", "[].append", "[].append", "[].append", "scale_dict[].append", "scale_dict[].append", "r_dict[].append", "r_dict[].append", "t_dict[].append", "t_dict[].append", "numpy.where", "np.array.mean", "np.array.mean", "numpy.where", "numpy.where", "numpy.where", "numpy.isnan", "numpy.sum", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.evaluation.baseline_naocs.ransac", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rot_diff_degree", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rot_diff_degree"], ["", "def", "solver_ransac_nonlinear", "(", "s_ind", ",", "e_ind", ",", "test_exp", ",", "baseline_exp", ",", "choose_threshold", ",", "num_parts", ",", "test_group", ",", "problem_ins", ",", "rts_all", ",", "file_name", ")", ":", "\n", "    ", "all_rts", "=", "{", "}", "\n", "mean_err", "=", "{", "'baseline'", ":", "[", "]", ",", "'nonlinear'", ":", "[", "]", "}", "\n", "if", "num_parts", "==", "2", ":", "\n", "        ", "r_raw_err", "=", "{", "'baseline'", ":", "[", "[", "]", ",", "[", "]", "]", ",", "'nonlinear'", ":", "[", "[", "]", ",", "[", "]", "]", "}", "\n", "t_raw_err", "=", "{", "'baseline'", ":", "[", "[", "]", ",", "[", "]", "]", ",", "'nonlinear'", ":", "[", "[", "]", ",", "[", "]", "]", "}", "\n", "s_raw_err", "=", "{", "'baseline'", ":", "[", "[", "]", ",", "[", "]", "]", ",", "'nonlinear'", ":", "[", "[", "]", ",", "[", "]", "]", "}", "\n", "", "elif", "num_parts", "==", "3", ":", "\n", "        ", "r_raw_err", "=", "{", "'baseline'", ":", "[", "[", "]", ",", "[", "]", ",", "[", "]", "]", ",", "'nonlinear'", ":", "[", "[", "]", ",", "[", "]", ",", "[", "]", "]", "}", "\n", "t_raw_err", "=", "{", "'baseline'", ":", "[", "[", "]", ",", "[", "]", ",", "[", "]", "]", ",", "'nonlinear'", ":", "[", "[", "]", ",", "[", "]", ",", "[", "]", "]", "}", "\n", "s_raw_err", "=", "{", "'baseline'", ":", "[", "[", "]", ",", "[", "]", ",", "[", "]", "]", ",", "'nonlinear'", ":", "[", "[", "]", ",", "[", "]", ",", "[", "]", "]", "}", "\n", "", "elif", "num_parts", "==", "4", ":", "\n", "        ", "r_raw_err", "=", "{", "'baseline'", ":", "[", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "]", ",", "'nonlinear'", ":", "[", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "]", "}", "\n", "t_raw_err", "=", "{", "'baseline'", ":", "[", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "]", ",", "'nonlinear'", ":", "[", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "]", "}", "\n", "s_raw_err", "=", "{", "'baseline'", ":", "[", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "]", ",", "'nonlinear'", ":", "[", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "]", "}", "\n", "\n", "", "for", "i", "in", "range", "(", "s_ind", ",", "e_ind", ")", ":", "\n", "# try:", "\n", "        ", "print", "(", "'\\n Checking {}th data point: {}'", ".", "format", "(", "i", ",", "test_group", "[", "i", "]", ")", ")", "\n", "if", "test_group", "[", "i", "]", ".", "split", "(", "'_'", ")", "[", "0", "]", "in", "problem_ins", ":", "\n", "            ", "continue", "\n", "", "basename", "=", "test_group", "[", "i", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "rts_dict", "=", "rts_all", "[", "basename", "]", "\n", "scale_gt", "=", "rts_dict", "[", "'scale'", "]", "[", "'gt'", "]", "# list of 2, for part 0 and part 1", "\n", "rt_gt", "=", "rts_dict", "[", "'rt'", "]", "[", "'gt'", "]", "# list of 2, each is 4*4 Hom transformation mat, [:3, :3] is rotation", "\n", "nocs_err_pn", "=", "rts_dict", "[", "'nocs_err'", "]", "\n", "\n", "fb", "=", "h5py", ".", "File", "(", "global_info", ".", "base_path", "+", "'/results/test_pred/{}/{}.h5'", ".", "format", "(", "baseline_exp", ",", "basename", ")", ",", "'r'", ")", "\n", "# for name in list(f.keys()):", "\n", "#     print(name, f[name].shape)", "\n", "\n", "print", "(", "'using baseline part NOCS'", ")", "\n", "nocs_pred", "=", "fb", "[", "'nocs_per_point'", "]", "\n", "nocs_gt", "=", "fb", "[", "'nocs_gt'", "]", "\n", "mask_pred", "=", "fb", "[", "'instance_per_point'", "]", "[", "(", ")", "]", "\n", "mask_gt", "=", "fb", "[", "'cls_gt'", "]", "[", "(", ")", "]", "\n", "# matching_indices = hungarian_matching(mask_pred[np.newaxis, : ,:], mask_gt[np.newaxis, :].astype(np.int32))", "\n", "# mask_pred = mask_pred[:, matching_indices[0, :]]", "\n", "cls_per_pt_pred", "=", "np", ".", "argmax", "(", "mask_pred", ",", "axis", "=", "1", ")", "\n", "partidx", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_parts", ")", ":", "\n", "            ", "partidx", ".", "append", "(", "np", ".", "where", "(", "cls_per_pt_pred", "==", "j", ")", "[", "0", "]", ")", "\n", "\n", "", "f", "=", "h5py", ".", "File", "(", "global_info", ".", "base_path", "+", "'/results/test_pred/{}/{}.h5'", ".", "format", "(", "test_exp", ",", "basename", ")", ",", "'r'", ")", "\n", "joint_cls_pred", "=", "f", "[", "'index_per_point'", "]", "[", "(", ")", "]", "\n", "joint_cls_pred", "=", "np", ".", "argmax", "(", "joint_cls_pred", ",", "axis", "=", "1", ")", "\n", "joint_idx", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "1", ",", "num_parts", ")", ":", "\n", "            ", "joint_idx", ".", "append", "(", "np", ".", "where", "(", "joint_cls_pred", "==", "j", ")", "[", "0", "]", ")", "\n", "\n", "", "mask_pred", "=", "f", "[", "'instance_per_point'", "]", "[", "(", ")", "]", "\n", "cls_per_pt_pred_ours", "=", "np", ".", "argmax", "(", "mask_pred", ",", "axis", "=", "1", ")", "\n", "partidx_ours", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_parts", ")", ":", "\n", "            ", "partidx_ours", ".", "append", "(", "np", ".", "where", "(", "cls_per_pt_pred_ours", "==", "j", ")", "[", "0", "]", ")", "\n", "\n", "", "scale_dict", "=", "{", "'gt'", ":", "[", "]", ",", "'baseline'", ":", "[", "]", ",", "'nonlinear'", ":", "[", "]", "}", "\n", "r_dict", "=", "{", "'gt'", ":", "[", "]", ",", "'baseline'", ":", "[", "]", ",", "'nonlinear'", ":", "[", "]", "}", "\n", "t_dict", "=", "{", "'gt'", ":", "[", "]", ",", "'baseline'", ":", "[", "]", ",", "'nonlinear'", ":", "[", "]", "}", "\n", "xyz_err", "=", "{", "'baseline'", ":", "[", "]", ",", "'nonlinear'", ":", "[", "]", "}", "\n", "rpy_err", "=", "{", "'baseline'", ":", "[", "]", ",", "'nonlinear'", ":", "[", "]", "}", "\n", "scale_err", "=", "{", "'baseline'", ":", "[", "]", ",", "'nonlinear'", ":", "[", "]", "}", "\n", "jts_axis", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "1", ",", "num_parts", ")", ":", "\n", "            ", "niter", "=", "200", "\n", "inlier_th", "=", "choose_threshold", "\n", "source0", "=", "nocs_pred", "[", "partidx", "[", "0", "]", ",", ":", "3", "]", "\n", "target0", "=", "fb", "[", "'P'", "]", "[", "partidx", "[", "0", "]", ",", ":", "3", "]", "\n", "source1", "=", "nocs_pred", "[", "partidx", "[", "j", "]", ",", "3", "*", "j", ":", "3", "*", "(", "j", "+", "1", ")", "]", "\n", "target1", "=", "fb", "[", "'P'", "]", "[", "partidx", "[", "j", "]", ",", ":", "3", "]", "\n", "\n", "jt_axis", "=", "np", ".", "median", "(", "f", "[", "'joint_axis_per_point'", "]", "[", "joint_idx", "[", "j", "-", "1", "]", ",", ":", "]", ",", "0", ")", "\n", "print", "(", "'jt_axis'", ",", "jt_axis", ")", "\n", "jts_axis", ".", "append", "(", "jts_axis", ")", "\n", "dataset", "=", "dict", "(", ")", "\n", "dataset", "[", "'source0'", "]", "=", "source0", "\n", "dataset", "[", "'target0'", "]", "=", "target0", "\n", "dataset", "[", "'nsource0'", "]", "=", "source0", ".", "shape", "[", "0", "]", "\n", "dataset", "[", "'source1'", "]", "=", "source1", "\n", "dataset", "[", "'target1'", "]", "=", "target1", "\n", "dataset", "[", "'nsource1'", "]", "=", "source1", ".", "shape", "[", "0", "]", "\n", "dataset", "[", "'joint_direction'", "]", "=", "jt_axis", "\n", "\n", "best_model", ",", "best_inliers", "=", "ransac", "(", "dataset", ",", "joint_transformation_estimator", ",", "joint_transformation_verifier", ",", "inlier_th", ",", "niter", ")", "\n", "rdiff0", "=", "rot_diff_degree", "(", "best_model", "[", "'rotation0'", "]", ",", "rt_gt", "[", "0", "]", "[", ":", "3", ",", ":", "3", "]", ")", "\n", "tdiff0", "=", "np", ".", "linalg", ".", "norm", "(", "best_model", "[", "'translation0'", "]", "-", "rt_gt", "[", "0", "]", "[", ":", "3", ",", "3", "]", ")", "\n", "sdiff0", "=", "np", ".", "linalg", ".", "norm", "(", "best_model", "[", "'scale0'", "]", "-", "scale_gt", "[", "0", "]", "[", "0", "]", ")", "\n", "if", "j", "==", "1", ":", "\n", "                ", "print", "(", "'part0 -- rdiff: %f degree, tdiff: %f, sdiff %f, ninliers: %f, npoint: %f'", "%", "(", "rdiff0", ",", "tdiff0", ",", "sdiff0", ",", "np", ".", "sum", "(", "best_inliers", "[", "0", "]", ")", ",", "best_inliers", "[", "0", "]", ".", "shape", "[", "0", "]", ")", ")", "\n", "rpy_err", "[", "'nonlinear'", "]", ".", "append", "(", "rdiff0", ")", "\n", "xyz_err", "[", "'nonlinear'", "]", ".", "append", "(", "tdiff0", ")", "\n", "scale_err", "[", "'nonlinear'", "]", ".", "append", "(", "sdiff0", ")", "\n", "r_raw_err", "[", "'nonlinear'", "]", "[", "0", "]", ".", "append", "(", "rdiff0", ")", "\n", "t_raw_err", "[", "'nonlinear'", "]", "[", "0", "]", ".", "append", "(", "tdiff0", ")", "\n", "s_raw_err", "[", "'nonlinear'", "]", "[", "0", "]", ".", "append", "(", "sdiff0", ")", "\n", "\n", "", "rdiff1", "=", "rot_diff_degree", "(", "best_model", "[", "'rotation1'", "]", ",", "rt_gt", "[", "j", "]", "[", ":", "3", ",", ":", "3", "]", ")", "\n", "tdiff1", "=", "np", ".", "linalg", ".", "norm", "(", "best_model", "[", "'translation1'", "]", "-", "rt_gt", "[", "j", "]", "[", ":", "3", ",", "3", "]", ")", "\n", "sdiff1", "=", "np", ".", "linalg", ".", "norm", "(", "best_model", "[", "'scale1'", "]", "-", "scale_gt", "[", "j", "]", "[", "0", "]", ")", "\n", "print", "(", "'part%d -- rdiff: %f degree, tdiff: %f, sdiff %f, ninliers: %f, npoint: %f'", "%", "(", "j", ",", "rdiff1", ",", "tdiff1", ",", "sdiff1", ",", "np", ".", "sum", "(", "best_inliers", "[", "1", "]", ")", ",", "best_inliers", "[", "1", "]", ".", "shape", "[", "0", "]", ")", ")", "\n", "rpy_err", "[", "'nonlinear'", "]", ".", "append", "(", "rdiff1", ")", "\n", "xyz_err", "[", "'nonlinear'", "]", ".", "append", "(", "tdiff1", ")", "\n", "scale_err", "[", "'nonlinear'", "]", ".", "append", "(", "sdiff1", ")", "\n", "r_raw_err", "[", "'nonlinear'", "]", "[", "j", "]", ".", "append", "(", "rdiff1", ")", "\n", "t_raw_err", "[", "'nonlinear'", "]", "[", "j", "]", ".", "append", "(", "tdiff1", ")", "\n", "s_raw_err", "[", "'nonlinear'", "]", "[", "j", "]", ".", "append", "(", "sdiff1", ")", "\n", "# save", "\n", "rts_dict", "=", "{", "}", "\n", "if", "j", "==", "1", ":", "\n", "                ", "scale_dict", "[", "'gt'", "]", ".", "append", "(", "scale_gt", "[", "0", "]", "[", "0", "]", ")", "\n", "scale_dict", "[", "'nonlinear'", "]", ".", "append", "(", "best_model", "[", "'scale0'", "]", ")", "\n", "r_dict", "[", "'gt'", "]", ".", "append", "(", "rt_gt", "[", "0", "]", "[", ":", "3", ",", ":", "3", "]", ")", "\n", "r_dict", "[", "'nonlinear'", "]", ".", "append", "(", "best_model", "[", "'rotation0'", "]", ")", "\n", "t_dict", "[", "'gt'", "]", ".", "append", "(", "rt_gt", "[", "0", "]", "[", ":", "3", ",", "3", "]", ")", "\n", "t_dict", "[", "'nonlinear'", "]", ".", "append", "(", "best_model", "[", "'translation0'", "]", ")", "\n", "\n", "", "scale_dict", "[", "'gt'", "]", ".", "append", "(", "scale_gt", "[", "j", "]", "[", "0", "]", ")", "\n", "scale_dict", "[", "'nonlinear'", "]", ".", "append", "(", "best_model", "[", "'scale1'", "]", ")", "\n", "r_dict", "[", "'gt'", "]", ".", "append", "(", "rt_gt", "[", "j", "]", "[", ":", "3", ",", ":", "3", "]", ")", "\n", "r_dict", "[", "'nonlinear'", "]", ".", "append", "(", "best_model", "[", "'rotation1'", "]", ")", "\n", "t_dict", "[", "'gt'", "]", ".", "append", "(", "rt_gt", "[", "j", "]", "[", ":", "3", ",", "3", "]", ")", "\n", "t_dict", "[", "'nonlinear'", "]", ".", "append", "(", "best_model", "[", "'translation1'", "]", ")", "\n", "\n", "", "rts_dict", "[", "'scale'", "]", "=", "scale_dict", "\n", "rts_dict", "[", "'axis'", "]", "=", "jts_axis", "\n", "rts_dict", "[", "'rotation'", "]", "=", "r_dict", "\n", "rts_dict", "[", "'translation'", "]", "=", "t_dict", "\n", "rts_dict", "[", "'xyz_err'", "]", "=", "xyz_err", "\n", "rts_dict", "[", "'rpy_err'", "]", "=", "rpy_err", "\n", "rts_dict", "[", "'scale_err'", "]", "=", "scale_err", "\n", "all_rts", "[", "basename", "]", "=", "rts_dict", "\n", "# except:", "\n", "#     print('Something wrong happens!!')", "\n", "\n", "", "with", "open", "(", "file_name", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "all_rts", ",", "f", ")", "\n", "\n", "", "for", "j", "in", "range", "(", "num_parts", ")", ":", "\n", "        ", "r_err_base", "=", "np", ".", "array", "(", "r_raw_err", "[", "'nonlinear'", "]", "[", "j", "]", ")", "\n", "t_err_base", "=", "np", ".", "array", "(", "t_raw_err", "[", "'nonlinear'", "]", "[", "j", "]", ")", "\n", "t_err_base", "[", "np", ".", "where", "(", "np", ".", "isnan", "(", "t_err_base", ")", ")", "]", "=", "0", "\n", "print", "(", "'mean rotation err of part {}: \\n'", ".", "format", "(", "j", ")", ",", "'nonlinear: {}'", ".", "format", "(", "r_err_base", ".", "mean", "(", ")", ")", ")", "#", "\n", "print", "(", "'mean translation err of part {}: \\n'", ".", "format", "(", "j", ")", ",", "'nonlinear: {}'", ".", "format", "(", "t_err_base", ".", "mean", "(", ")", ")", ")", "#", "\n", "", "end_time", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "'saving to '", ",", "file_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.eval_config.EvalConfig.__init__": [[4, 6], ["yaml.load", "open"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "filename", ")", ":", "\n", "        ", "self", ".", "conf", "=", "yaml", ".", "load", "(", "open", "(", "filename", ",", "'r'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.eval_config.EvalConfig.fetch": [[7, 11], ["eval_config.EvalConfig.conf.get"], "methods", ["None"], ["", "def", "fetch", "(", "self", ",", "name", ",", "default_value", "=", "None", ")", ":", "\n", "        ", "result", "=", "self", ".", "conf", ".", "get", "(", "name", ",", "default_value", ")", "\n", "assert", "result", "is", "not", "None", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.eval_config.EvalConfig.get_batch_size": [[12, 14], ["eval_config.EvalConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "get_batch_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fetch", "(", "'batch_size'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.eval_config.EvalConfig.get_test_data_file": [[15, 17], ["eval_config.EvalConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "get_test_data_file", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fetch", "(", "'test_data_file'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.eval_config.EvalConfig.get_test_data_first_n": [[18, 20], ["eval_config.EvalConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "get_test_data_first_n", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fetch", "(", "'test_first_n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.eval_config.EvalConfig.is_test_data_noisy": [[21, 23], ["eval_config.EvalConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "is_test_data_noisy", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fetch", "(", "'test_data_noisy'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.eval_config.EvalConfig.get_prediction_dir": [[24, 26], ["eval_config.EvalConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "get_prediction_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fetch", "(", "'prediction_dir'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.eval_config.EvalConfig.get_bundle_dir": [[27, 29], ["eval_config.EvalConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "get_bundle_dir", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fetch", "(", "'bundle_dir'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.eval_config.EvalConfig.get_n_max_instances": [[30, 32], ["eval_config.EvalConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "get_n_max_instances", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fetch", "(", "'n_max_instances'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.eval_config.EvalConfig.get_list_of_primitives": [[33, 35], ["eval_config.EvalConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "get_list_of_primitives", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fetch", "(", "'list_of_primitives'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.eval_config.EvalConfig.get_CUDA_visible_GPUs": [[36, 38], ["eval_config.EvalConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "get_CUDA_visible_GPUs", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fetch", "(", "'CUDA_visible_GPUs'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.eval_config.EvalConfig.is_nn": [[39, 41], ["eval_config.EvalConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "is_nn", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fetch", "(", "'is_nn'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.Arcball.__init__": [[1538, 1562], ["numpy.array", "numpy.array", "numpy.array", "transformations.quaternion_from_matrix", "transformations.vector_norm", "ValueError"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.quaternion_from_matrix", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.vector_norm"], ["def", "__init__", "(", "self", ",", "initial", "=", "None", ")", ":", "\n", "        ", "\"\"\"Initialize virtual trackball control.\n\n        initial : quaternion or rotation matrix\n\n        \"\"\"", "\n", "self", ".", "_axis", "=", "None", "\n", "self", ".", "_axes", "=", "None", "\n", "self", ".", "_radius", "=", "1.0", "\n", "self", ".", "_center", "=", "[", "0.0", ",", "0.0", "]", "\n", "self", ".", "_vdown", "=", "numpy", ".", "array", "(", "[", "0.0", ",", "0.0", ",", "1.0", "]", ")", "\n", "self", ".", "_constrain", "=", "False", "\n", "if", "initial", "is", "None", ":", "\n", "            ", "self", ".", "_qdown", "=", "numpy", ".", "array", "(", "[", "1.0", ",", "0.0", ",", "0.0", ",", "0.0", "]", ")", "\n", "", "else", ":", "\n", "            ", "initial", "=", "numpy", ".", "array", "(", "initial", ",", "dtype", "=", "numpy", ".", "float64", ")", "\n", "if", "initial", ".", "shape", "==", "(", "4", ",", "4", ")", ":", "\n", "                ", "self", ".", "_qdown", "=", "quaternion_from_matrix", "(", "initial", ")", "\n", "", "elif", "initial", ".", "shape", "==", "(", "4", ",", ")", ":", "\n", "                ", "initial", "/=", "vector_norm", "(", "initial", ")", "\n", "self", ".", "_qdown", "=", "initial", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"initial not a quaternion or matrix\"", ")", "\n", "", "", "self", ".", "_qnow", "=", "self", ".", "_qpre", "=", "self", ".", "_qdown", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.Arcball.place": [[1563, 1575], ["float"], "methods", ["None"], ["", "def", "place", "(", "self", ",", "center", ",", "radius", ")", ":", "\n", "        ", "\"\"\"Place Arcball, e.g. when window size changes.\n\n        center : sequence[2]\n            Window coordinates of trackball center.\n        radius : float\n            Radius of trackball in window coordinates.\n\n        \"\"\"", "\n", "self", ".", "_radius", "=", "float", "(", "radius", ")", "\n", "self", ".", "_center", "[", "0", "]", "=", "center", "[", "0", "]", "\n", "self", ".", "_center", "[", "1", "]", "=", "center", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.Arcball.setaxes": [[1576, 1582], ["transformations.unit_vector"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.unit_vector"], ["", "def", "setaxes", "(", "self", ",", "*", "axes", ")", ":", "\n", "        ", "\"\"\"Set axes to constrain rotations.\"\"\"", "\n", "if", "axes", "is", "None", ":", "\n", "            ", "self", ".", "_axes", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "_axes", "=", "[", "unit_vector", "(", "axis", ")", "for", "axis", "in", "axes", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.Arcball.constrain": [[1588, 1592], ["bool"], "methods", ["None"], ["", "@", "constrain", ".", "setter", "\n", "def", "constrain", "(", "self", ",", "value", ")", ":", "\n", "        ", "\"\"\"Set state of constrain to axis mode.\"\"\"", "\n", "self", ".", "_constrain", "=", "bool", "(", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.Arcball.down": [[1593, 1602], ["transformations.arcball_map_to_sphere", "transformations.arcball_nearest_axis", "transformations.arcball_constrain_to_axis"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.arcball_map_to_sphere", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.arcball_nearest_axis", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.arcball_constrain_to_axis"], ["", "def", "down", "(", "self", ",", "point", ")", ":", "\n", "        ", "\"\"\"Set initial cursor window coordinates and pick constrain-axis.\"\"\"", "\n", "self", ".", "_vdown", "=", "arcball_map_to_sphere", "(", "point", ",", "self", ".", "_center", ",", "self", ".", "_radius", ")", "\n", "self", ".", "_qdown", "=", "self", ".", "_qpre", "=", "self", ".", "_qnow", "\n", "if", "self", ".", "_constrain", "and", "self", ".", "_axes", "is", "not", "None", ":", "\n", "            ", "self", ".", "_axis", "=", "arcball_nearest_axis", "(", "self", ".", "_vdown", ",", "self", ".", "_axes", ")", "\n", "self", ".", "_vdown", "=", "arcball_constrain_to_axis", "(", "self", ".", "_vdown", ",", "self", ".", "_axis", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_axis", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.Arcball.drag": [[1603, 1615], ["transformations.arcball_map_to_sphere", "numpy.cross", "transformations.arcball_constrain_to_axis", "numpy.dot", "transformations.quaternion_multiply", "numpy.dot"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.arcball_map_to_sphere", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.arcball_constrain_to_axis", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.quaternion_multiply"], ["", "", "def", "drag", "(", "self", ",", "point", ")", ":", "\n", "        ", "\"\"\"Update current cursor window coordinates.\"\"\"", "\n", "vnow", "=", "arcball_map_to_sphere", "(", "point", ",", "self", ".", "_center", ",", "self", ".", "_radius", ")", "\n", "if", "self", ".", "_axis", "is", "not", "None", ":", "\n", "            ", "vnow", "=", "arcball_constrain_to_axis", "(", "vnow", ",", "self", ".", "_axis", ")", "\n", "", "self", ".", "_qpre", "=", "self", ".", "_qnow", "\n", "t", "=", "numpy", ".", "cross", "(", "self", ".", "_vdown", ",", "vnow", ")", "\n", "if", "numpy", ".", "dot", "(", "t", ",", "t", ")", "<", "_EPS", ":", "\n", "            ", "self", ".", "_qnow", "=", "self", ".", "_qdown", "\n", "", "else", ":", "\n", "            ", "q", "=", "[", "numpy", ".", "dot", "(", "self", ".", "_vdown", ",", "vnow", ")", ",", "t", "[", "0", "]", ",", "t", "[", "1", "]", ",", "t", "[", "2", "]", "]", "\n", "self", ".", "_qnow", "=", "quaternion_multiply", "(", "q", ",", "self", ".", "_qdown", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.Arcball.next": [[1616, 1620], ["transformations.quaternion_slerp"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.quaternion_slerp"], ["", "", "def", "next", "(", "self", ",", "acceleration", "=", "0.0", ")", ":", "\n", "        ", "\"\"\"Continue rotation in direction of last drag.\"\"\"", "\n", "q", "=", "quaternion_slerp", "(", "self", ".", "_qpre", ",", "self", ".", "_qnow", ",", "2.0", "+", "acceleration", ",", "False", ")", "\n", "self", ".", "_qpre", ",", "self", ".", "_qnow", "=", "self", ".", "_qnow", ",", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.Arcball.matrix": [[1621, 1624], ["transformations.quaternion_matrix"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.quaternion_matrix"], ["", "def", "matrix", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return homogeneous rotation matrix.\"\"\"", "\n", "return", "quaternion_matrix", "(", "self", ".", "_qnow", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.identity_matrix": [[207, 220], ["numpy.identity"], "function", ["None"], ["def", "identity_matrix", "(", ")", ":", "\n", "    ", "\"\"\"Return 4x4 identity/unit matrix.\n\n    >>> I = identity_matrix()\n    >>> numpy.allclose(I, numpy.dot(I, I))\n    True\n    >>> numpy.sum(I), numpy.trace(I)\n    (4.0, 4.0)\n    >>> numpy.allclose(I, numpy.identity(4))\n    True\n\n    \"\"\"", "\n", "return", "numpy", ".", "identity", "(", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.translation_matrix": [[222, 233], ["numpy.identity"], "function", ["None"], ["", "def", "translation_matrix", "(", "direction", ")", ":", "\n", "    ", "\"\"\"Return matrix to translate by direction vector.\n\n    >>> v = numpy.random.random(3) - 0.5\n    >>> numpy.allclose(v, translation_matrix(v)[:3, 3])\n    True\n\n    \"\"\"", "\n", "M", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "M", "[", ":", "3", ",", "3", "]", "=", "direction", "[", ":", "3", "]", "\n", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.translation_from_matrix": [[235, 245], ["[].copy", "numpy.array"], "function", ["None"], ["", "def", "translation_from_matrix", "(", "matrix", ")", ":", "\n", "    ", "\"\"\"Return translation vector from translation matrix.\n\n    >>> v0 = numpy.random.random(3) - 0.5\n    >>> v1 = translation_from_matrix(translation_matrix(v0))\n    >>> numpy.allclose(v0, v1)\n    True\n\n    \"\"\"", "\n", "return", "numpy", ".", "array", "(", "matrix", ",", "copy", "=", "False", ")", "[", ":", "3", ",", "3", "]", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.reflection_matrix": [[247, 271], ["transformations.unit_vector", "numpy.identity", "numpy.outer", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.unit_vector"], ["", "def", "reflection_matrix", "(", "point", ",", "normal", ")", ":", "\n", "    ", "\"\"\"Return matrix to mirror at plane defined by point and normal vector.\n\n    >>> v0 = numpy.random.random(4) - 0.5\n    >>> v0[3] = 1.\n    >>> v1 = numpy.random.random(3) - 0.5\n    >>> R = reflection_matrix(v0, v1)\n    >>> numpy.allclose(2, numpy.trace(R))\n    True\n    >>> numpy.allclose(v0, numpy.dot(R, v0))\n    True\n    >>> v2 = v0.copy()\n    >>> v2[:3] += v1\n    >>> v3 = v0.copy()\n    >>> v2[:3] -= v1\n    >>> numpy.allclose(v2, numpy.dot(R, v3))\n    True\n\n    \"\"\"", "\n", "normal", "=", "unit_vector", "(", "normal", "[", ":", "3", "]", ")", "\n", "M", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "M", "[", ":", "3", ",", ":", "3", "]", "-=", "2.0", "*", "numpy", ".", "outer", "(", "normal", ",", "normal", ")", "\n", "M", "[", ":", "3", ",", "3", "]", "=", "(", "2.0", "*", "numpy", ".", "dot", "(", "point", "[", ":", "3", "]", ",", "normal", ")", ")", "*", "normal", "\n", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.reflection_from_matrix": [[273, 300], ["numpy.array", "numpy.linalg.eig", "numpy.real().squeeze", "numpy.linalg.eig", "numpy.real().squeeze", "numpy.where", "len", "ValueError", "numpy.where", "len", "ValueError", "numpy.real", "numpy.real", "abs", "abs", "numpy.real", "numpy.real"], "function", ["None"], ["", "def", "reflection_from_matrix", "(", "matrix", ")", ":", "\n", "    ", "\"\"\"Return mirror plane point and normal vector from reflection matrix.\n\n    >>> v0 = numpy.random.random(3) - 0.5\n    >>> v1 = numpy.random.random(3) - 0.5\n    >>> M0 = reflection_matrix(v0, v1)\n    >>> point, normal = reflection_from_matrix(M0)\n    >>> M1 = reflection_matrix(point, normal)\n    >>> is_same_transform(M0, M1)\n    True\n\n    \"\"\"", "\n", "M", "=", "numpy", ".", "array", "(", "matrix", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "# normal: unit eigenvector corresponding to eigenvalue -1", "\n", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eig", "(", "M", "[", ":", "3", ",", ":", "3", "]", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", "+", "1.0", ")", "<", "1e-8", ")", "[", "0", "]", "\n", "if", "not", "len", "(", "i", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'no unit eigenvector corresponding to eigenvalue -1'", ")", "\n", "", "normal", "=", "numpy", ".", "real", "(", "V", "[", ":", ",", "i", "[", "0", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "# point: any unit eigenvector corresponding to eigenvalue 1", "\n", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eig", "(", "M", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", "-", "1.0", ")", "<", "1e-8", ")", "[", "0", "]", "\n", "if", "not", "len", "(", "i", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'no unit eigenvector corresponding to eigenvalue 1'", ")", "\n", "", "point", "=", "numpy", ".", "real", "(", "V", "[", ":", ",", "i", "[", "-", "1", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "point", "/=", "point", "[", "3", "]", "\n", "return", "point", ",", "normal", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.rotation_matrix": [[302, 344], ["math.sin", "math.cos", "transformations.unit_vector", "numpy.diag", "numpy.array", "numpy.identity", "numpy.outer", "numpy.array", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.unit_vector"], ["", "def", "rotation_matrix", "(", "angle", ",", "direction", ",", "point", "=", "None", ")", ":", "\n", "    ", "\"\"\"Return matrix to rotate about axis defined by point and direction.\n\n    >>> R = rotation_matrix(math.pi/2, [0, 0, 1], [1, 0, 0])\n    >>> numpy.allclose(numpy.dot(R, [0, 0, 0, 1]), [1, -1, 0, 1])\n    True\n    >>> angle = (random.random() - 0.5) * (2*math.pi)\n    >>> direc = numpy.random.random(3) - 0.5\n    >>> point = numpy.random.random(3) - 0.5\n    >>> R0 = rotation_matrix(angle, direc, point)\n    >>> R1 = rotation_matrix(angle-2*math.pi, direc, point)\n    >>> is_same_transform(R0, R1)\n    True\n    >>> R0 = rotation_matrix(angle, direc, point)\n    >>> R1 = rotation_matrix(-angle, -direc, point)\n    >>> is_same_transform(R0, R1)\n    True\n    >>> I = numpy.identity(4, numpy.float64)\n    >>> numpy.allclose(I, rotation_matrix(math.pi*2, direc))\n    True\n    >>> numpy.allclose(2, numpy.trace(rotation_matrix(math.pi/2,\n    ...                                               direc, point)))\n    True\n\n    \"\"\"", "\n", "sina", "=", "math", ".", "sin", "(", "angle", ")", "\n", "cosa", "=", "math", ".", "cos", "(", "angle", ")", "\n", "direction", "=", "unit_vector", "(", "direction", "[", ":", "3", "]", ")", "\n", "# rotation matrix around unit vector", "\n", "R", "=", "numpy", ".", "diag", "(", "[", "cosa", ",", "cosa", ",", "cosa", "]", ")", "\n", "R", "+=", "numpy", ".", "outer", "(", "direction", ",", "direction", ")", "*", "(", "1.0", "-", "cosa", ")", "\n", "direction", "*=", "sina", "\n", "R", "+=", "numpy", ".", "array", "(", "[", "[", "0.0", ",", "-", "direction", "[", "2", "]", ",", "direction", "[", "1", "]", "]", ",", "\n", "[", "direction", "[", "2", "]", ",", "0.0", ",", "-", "direction", "[", "0", "]", "]", ",", "\n", "[", "-", "direction", "[", "1", "]", ",", "direction", "[", "0", "]", ",", "0.0", "]", "]", ")", "\n", "M", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "M", "[", ":", "3", ",", ":", "3", "]", "=", "R", "\n", "if", "point", "is", "not", "None", ":", "\n", "# rotation not around origin", "\n", "        ", "point", "=", "numpy", ".", "array", "(", "point", "[", ":", "3", "]", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "M", "[", ":", "3", ",", "3", "]", "=", "point", "-", "numpy", ".", "dot", "(", "R", ",", "point", ")", "\n", "", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.rotation_from_matrix": [[346, 384], ["numpy.array", "numpy.linalg.eig", "numpy.real().squeeze", "numpy.linalg.eig", "numpy.real().squeeze", "math.atan2", "numpy.where", "len", "ValueError", "numpy.where", "len", "ValueError", "abs", "numpy.real", "numpy.real", "numpy.trace", "abs", "abs", "abs", "numpy.real", "numpy.real"], "function", ["None"], ["", "def", "rotation_from_matrix", "(", "matrix", ")", ":", "\n", "    ", "\"\"\"Return rotation angle and axis from rotation matrix.\n\n    >>> angle = (random.random() - 0.5) * (2*math.pi)\n    >>> direc = numpy.random.random(3) - 0.5\n    >>> point = numpy.random.random(3) - 0.5\n    >>> R0 = rotation_matrix(angle, direc, point)\n    >>> angle, direc, point = rotation_from_matrix(R0)\n    >>> R1 = rotation_matrix(angle, direc, point)\n    >>> is_same_transform(R0, R1)\n    True\n\n    \"\"\"", "\n", "R", "=", "numpy", ".", "array", "(", "matrix", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "R33", "=", "R", "[", ":", "3", ",", ":", "3", "]", "\n", "# direction: unit eigenvector of R33 corresponding to eigenvalue of 1", "\n", "w", ",", "W", "=", "numpy", ".", "linalg", ".", "eig", "(", "R33", ".", "T", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", "-", "1.0", ")", "<", "1e-8", ")", "[", "0", "]", "\n", "if", "not", "len", "(", "i", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'no unit eigenvector corresponding to eigenvalue 1'", ")", "\n", "", "direction", "=", "numpy", ".", "real", "(", "W", "[", ":", ",", "i", "[", "-", "1", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "# point: unit eigenvector of R33 corresponding to eigenvalue of 1", "\n", "w", ",", "Q", "=", "numpy", ".", "linalg", ".", "eig", "(", "R", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", "-", "1.0", ")", "<", "1e-8", ")", "[", "0", "]", "\n", "if", "not", "len", "(", "i", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'no unit eigenvector corresponding to eigenvalue 1'", ")", "\n", "", "point", "=", "numpy", ".", "real", "(", "Q", "[", ":", ",", "i", "[", "-", "1", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "point", "/=", "point", "[", "3", "]", "\n", "# rotation angle depending on direction", "\n", "cosa", "=", "(", "numpy", ".", "trace", "(", "R33", ")", "-", "1.0", ")", "/", "2.0", "\n", "if", "abs", "(", "direction", "[", "2", "]", ")", ">", "1e-8", ":", "\n", "        ", "sina", "=", "(", "R", "[", "1", ",", "0", "]", "+", "(", "cosa", "-", "1.0", ")", "*", "direction", "[", "0", "]", "*", "direction", "[", "1", "]", ")", "/", "direction", "[", "2", "]", "\n", "", "elif", "abs", "(", "direction", "[", "1", "]", ")", ">", "1e-8", ":", "\n", "        ", "sina", "=", "(", "R", "[", "0", ",", "2", "]", "+", "(", "cosa", "-", "1.0", ")", "*", "direction", "[", "0", "]", "*", "direction", "[", "2", "]", ")", "/", "direction", "[", "1", "]", "\n", "", "else", ":", "\n", "        ", "sina", "=", "(", "R", "[", "2", ",", "1", "]", "+", "(", "cosa", "-", "1.0", ")", "*", "direction", "[", "1", "]", "*", "direction", "[", "2", "]", ")", "/", "direction", "[", "0", "]", "\n", "", "angle", "=", "math", ".", "atan2", "(", "sina", ",", "cosa", ")", "\n", "return", "angle", ",", "direction", ",", "point", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.scale_matrix": [[386, 418], ["numpy.diag", "transformations.unit_vector", "numpy.identity", "numpy.outer", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.unit_vector"], ["", "def", "scale_matrix", "(", "factor", ",", "origin", "=", "None", ",", "direction", "=", "None", ")", ":", "\n", "    ", "\"\"\"Return matrix to scale by factor around origin in direction.\n\n    Use factor -1 for point symmetry.\n\n    >>> v = (numpy.random.rand(4, 5) - 0.5) * 20\n    >>> v[3] = 1\n    >>> S = scale_matrix(-1.234)\n    >>> numpy.allclose(numpy.dot(S, v)[:3], -1.234*v[:3])\n    True\n    >>> factor = random.random() * 10 - 5\n    >>> origin = numpy.random.random(3) - 0.5\n    >>> direct = numpy.random.random(3) - 0.5\n    >>> S = scale_matrix(factor, origin)\n    >>> S = scale_matrix(factor, origin, direct)\n\n    \"\"\"", "\n", "if", "direction", "is", "None", ":", "\n", "# uniform scaling", "\n", "        ", "M", "=", "numpy", ".", "diag", "(", "[", "factor", ",", "factor", ",", "factor", ",", "1.0", "]", ")", "\n", "if", "origin", "is", "not", "None", ":", "\n", "            ", "M", "[", ":", "3", ",", "3", "]", "=", "origin", "[", ":", "3", "]", "\n", "M", "[", ":", "3", ",", "3", "]", "*=", "1.0", "-", "factor", "\n", "", "", "else", ":", "\n", "# nonuniform scaling", "\n", "        ", "direction", "=", "unit_vector", "(", "direction", "[", ":", "3", "]", ")", "\n", "factor", "=", "1.0", "-", "factor", "\n", "M", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "M", "[", ":", "3", ",", ":", "3", "]", "-=", "factor", "*", "numpy", ".", "outer", "(", "direction", ",", "direction", ")", "\n", "if", "origin", "is", "not", "None", ":", "\n", "            ", "M", "[", ":", "3", ",", "3", "]", "=", "(", "factor", "*", "numpy", ".", "dot", "(", "origin", "[", ":", "3", "]", ",", "direction", ")", ")", "*", "direction", "\n", "", "", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.scale_from_matrix": [[420, 459], ["numpy.array", "numpy.linalg.eig", "numpy.real().squeeze", "numpy.trace", "numpy.linalg.eig", "numpy.real().squeeze", "transformations.vector_norm", "numpy.where", "len", "ValueError", "numpy.real", "numpy.where", "numpy.real", "abs", "abs", "numpy.real", "numpy.real"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.vector_norm"], ["", "def", "scale_from_matrix", "(", "matrix", ")", ":", "\n", "    ", "\"\"\"Return scaling factor, origin and direction from scaling matrix.\n\n    >>> factor = random.random() * 10 - 5\n    >>> origin = numpy.random.random(3) - 0.5\n    >>> direct = numpy.random.random(3) - 0.5\n    >>> S0 = scale_matrix(factor, origin)\n    >>> factor, origin, direction = scale_from_matrix(S0)\n    >>> S1 = scale_matrix(factor, origin, direction)\n    >>> is_same_transform(S0, S1)\n    True\n    >>> S0 = scale_matrix(factor, origin, direct)\n    >>> factor, origin, direction = scale_from_matrix(S0)\n    >>> S1 = scale_matrix(factor, origin, direction)\n    >>> is_same_transform(S0, S1)\n    True\n\n    \"\"\"", "\n", "M", "=", "numpy", ".", "array", "(", "matrix", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "M33", "=", "M", "[", ":", "3", ",", ":", "3", "]", "\n", "factor", "=", "numpy", ".", "trace", "(", "M33", ")", "-", "2.0", "\n", "try", ":", "\n", "# direction: unit eigenvector corresponding to eigenvalue factor", "\n", "        ", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eig", "(", "M33", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", "-", "factor", ")", "<", "1e-8", ")", "[", "0", "]", "[", "0", "]", "\n", "direction", "=", "numpy", ".", "real", "(", "V", "[", ":", ",", "i", "]", ")", ".", "squeeze", "(", ")", "\n", "direction", "/=", "vector_norm", "(", "direction", ")", "\n", "", "except", "IndexError", ":", "\n", "# uniform scaling", "\n", "        ", "factor", "=", "(", "factor", "+", "2.0", ")", "/", "3.0", "\n", "direction", "=", "None", "\n", "# origin: any eigenvector corresponding to eigenvalue 1", "\n", "", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eig", "(", "M", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", "-", "1.0", ")", "<", "1e-8", ")", "[", "0", "]", "\n", "if", "not", "len", "(", "i", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'no eigenvector corresponding to eigenvalue 1'", ")", "\n", "", "origin", "=", "numpy", ".", "real", "(", "V", "[", ":", ",", "i", "[", "-", "1", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "origin", "/=", "origin", "[", "3", "]", "\n", "return", "factor", ",", "origin", ",", "direction", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.projection_matrix": [[461, 521], ["numpy.identity", "numpy.array", "transformations.unit_vector", "numpy.array", "numpy.dot", "numpy.outer", "numpy.dot", "numpy.outer", "numpy.array", "numpy.dot", "numpy.outer", "numpy.dot", "numpy.dot", "numpy.outer", "numpy.dot", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.unit_vector"], ["", "def", "projection_matrix", "(", "point", ",", "normal", ",", "direction", "=", "None", ",", "\n", "perspective", "=", "None", ",", "pseudo", "=", "False", ")", ":", "\n", "    ", "\"\"\"Return matrix to project onto plane defined by point and normal.\n\n    Using either perspective point, projection direction, or none of both.\n\n    If pseudo is True, perspective projections will preserve relative depth\n    such that Perspective = dot(Orthogonal, PseudoPerspective).\n\n    >>> P = projection_matrix([0, 0, 0], [1, 0, 0])\n    >>> numpy.allclose(P[1:, 1:], numpy.identity(4)[1:, 1:])\n    True\n    >>> point = numpy.random.random(3) - 0.5\n    >>> normal = numpy.random.random(3) - 0.5\n    >>> direct = numpy.random.random(3) - 0.5\n    >>> persp = numpy.random.random(3) - 0.5\n    >>> P0 = projection_matrix(point, normal)\n    >>> P1 = projection_matrix(point, normal, direction=direct)\n    >>> P2 = projection_matrix(point, normal, perspective=persp)\n    >>> P3 = projection_matrix(point, normal, perspective=persp, pseudo=True)\n    >>> is_same_transform(P2, numpy.dot(P0, P3))\n    True\n    >>> P = projection_matrix([3, 0, 0], [1, 1, 0], [1, 0, 0])\n    >>> v0 = (numpy.random.rand(4, 5) - 0.5) * 20\n    >>> v0[3] = 1\n    >>> v1 = numpy.dot(P, v0)\n    >>> numpy.allclose(v1[1], v0[1])\n    True\n    >>> numpy.allclose(v1[0], 3-v1[1])\n    True\n\n    \"\"\"", "\n", "M", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "point", "=", "numpy", ".", "array", "(", "point", "[", ":", "3", "]", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "normal", "=", "unit_vector", "(", "normal", "[", ":", "3", "]", ")", "\n", "if", "perspective", "is", "not", "None", ":", "\n", "# perspective projection", "\n", "        ", "perspective", "=", "numpy", ".", "array", "(", "perspective", "[", ":", "3", "]", ",", "dtype", "=", "numpy", ".", "float64", ",", "\n", "copy", "=", "False", ")", "\n", "M", "[", "0", ",", "0", "]", "=", "M", "[", "1", ",", "1", "]", "=", "M", "[", "2", ",", "2", "]", "=", "numpy", ".", "dot", "(", "perspective", "-", "point", ",", "normal", ")", "\n", "M", "[", ":", "3", ",", ":", "3", "]", "-=", "numpy", ".", "outer", "(", "perspective", ",", "normal", ")", "\n", "if", "pseudo", ":", "\n", "# preserve relative depth", "\n", "            ", "M", "[", ":", "3", ",", ":", "3", "]", "-=", "numpy", ".", "outer", "(", "normal", ",", "normal", ")", "\n", "M", "[", ":", "3", ",", "3", "]", "=", "numpy", ".", "dot", "(", "point", ",", "normal", ")", "*", "(", "perspective", "+", "normal", ")", "\n", "", "else", ":", "\n", "            ", "M", "[", ":", "3", ",", "3", "]", "=", "numpy", ".", "dot", "(", "point", ",", "normal", ")", "*", "perspective", "\n", "", "M", "[", "3", ",", ":", "3", "]", "=", "-", "normal", "\n", "M", "[", "3", ",", "3", "]", "=", "numpy", ".", "dot", "(", "perspective", ",", "normal", ")", "\n", "", "elif", "direction", "is", "not", "None", ":", "\n", "# parallel projection", "\n", "        ", "direction", "=", "numpy", ".", "array", "(", "direction", "[", ":", "3", "]", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "scale", "=", "numpy", ".", "dot", "(", "direction", ",", "normal", ")", "\n", "M", "[", ":", "3", ",", ":", "3", "]", "-=", "numpy", ".", "outer", "(", "direction", ",", "normal", ")", "/", "scale", "\n", "M", "[", ":", "3", ",", "3", "]", "=", "direction", "*", "(", "numpy", ".", "dot", "(", "point", ",", "normal", ")", "/", "scale", ")", "\n", "", "else", ":", "\n", "# orthogonal projection", "\n", "        ", "M", "[", ":", "3", ",", ":", "3", "]", "-=", "numpy", ".", "outer", "(", "normal", ",", "normal", ")", "\n", "M", "[", ":", "3", ",", "3", "]", "=", "numpy", ".", "dot", "(", "point", ",", "normal", ")", "*", "normal", "\n", "", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.projection_from_matrix": [[523, 594], ["numpy.array", "numpy.linalg.eig", "numpy.where", "len", "numpy.real().squeeze", "numpy.linalg.eig", "numpy.real().squeeze", "transformations.vector_norm", "numpy.linalg.eig", "len", "numpy.real().squeeze", "numpy.where", "len", "ValueError", "numpy.where", "numpy.real().squeeze", "transformations.vector_norm", "numpy.where", "len", "ValueError", "numpy.dot", "abs", "numpy.real", "numpy.real", "numpy.real", "abs", "abs", "numpy.real", "abs", "numpy.real", "numpy.real", "numpy.real", "numpy.real"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.vector_norm", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.vector_norm"], ["", "def", "projection_from_matrix", "(", "matrix", ",", "pseudo", "=", "False", ")", ":", "\n", "    ", "\"\"\"Return projection plane and perspective point from projection matrix.\n\n    Return values are same as arguments for projection_matrix function:\n    point, normal, direction, perspective, and pseudo.\n\n    >>> point = numpy.random.random(3) - 0.5\n    >>> normal = numpy.random.random(3) - 0.5\n    >>> direct = numpy.random.random(3) - 0.5\n    >>> persp = numpy.random.random(3) - 0.5\n    >>> P0 = projection_matrix(point, normal)\n    >>> result = projection_from_matrix(P0)\n    >>> P1 = projection_matrix(*result)\n    >>> is_same_transform(P0, P1)\n    True\n    >>> P0 = projection_matrix(point, normal, direct)\n    >>> result = projection_from_matrix(P0)\n    >>> P1 = projection_matrix(*result)\n    >>> is_same_transform(P0, P1)\n    True\n    >>> P0 = projection_matrix(point, normal, perspective=persp, pseudo=False)\n    >>> result = projection_from_matrix(P0, pseudo=False)\n    >>> P1 = projection_matrix(*result)\n    >>> is_same_transform(P0, P1)\n    True\n    >>> P0 = projection_matrix(point, normal, perspective=persp, pseudo=True)\n    >>> result = projection_from_matrix(P0, pseudo=True)\n    >>> P1 = projection_matrix(*result)\n    >>> is_same_transform(P0, P1)\n    True\n\n    \"\"\"", "\n", "M", "=", "numpy", ".", "array", "(", "matrix", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "M33", "=", "M", "[", ":", "3", ",", ":", "3", "]", "\n", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eig", "(", "M", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", "-", "1.0", ")", "<", "1e-8", ")", "[", "0", "]", "\n", "if", "not", "pseudo", "and", "len", "(", "i", ")", ":", "\n", "# point: any eigenvector corresponding to eigenvalue 1", "\n", "        ", "point", "=", "numpy", ".", "real", "(", "V", "[", ":", ",", "i", "[", "-", "1", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "point", "/=", "point", "[", "3", "]", "\n", "# direction: unit eigenvector corresponding to eigenvalue 0", "\n", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eig", "(", "M33", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", ")", "<", "1e-8", ")", "[", "0", "]", "\n", "if", "not", "len", "(", "i", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'no eigenvector corresponding to eigenvalue 0'", ")", "\n", "", "direction", "=", "numpy", ".", "real", "(", "V", "[", ":", ",", "i", "[", "0", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "direction", "/=", "vector_norm", "(", "direction", ")", "\n", "# normal: unit eigenvector of M33.T corresponding to eigenvalue 0", "\n", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eig", "(", "M33", ".", "T", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", ")", "<", "1e-8", ")", "[", "0", "]", "\n", "if", "len", "(", "i", ")", ":", "\n", "# parallel projection", "\n", "            ", "normal", "=", "numpy", ".", "real", "(", "V", "[", ":", ",", "i", "[", "0", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "normal", "/=", "vector_norm", "(", "normal", ")", "\n", "return", "point", ",", "normal", ",", "direction", ",", "None", ",", "False", "\n", "", "else", ":", "\n", "# orthogonal projection, where normal equals direction vector", "\n", "            ", "return", "point", ",", "direction", ",", "None", ",", "None", ",", "False", "\n", "", "", "else", ":", "\n", "# perspective projection", "\n", "        ", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", ")", ">", "1e-8", ")", "[", "0", "]", "\n", "if", "not", "len", "(", "i", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'no eigenvector not corresponding to eigenvalue 0'", ")", "\n", "", "point", "=", "numpy", ".", "real", "(", "V", "[", ":", ",", "i", "[", "-", "1", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "point", "/=", "point", "[", "3", "]", "\n", "normal", "=", "-", "M", "[", "3", ",", ":", "3", "]", "\n", "perspective", "=", "M", "[", ":", "3", ",", "3", "]", "/", "numpy", ".", "dot", "(", "point", "[", ":", "3", "]", ",", "normal", ")", "\n", "if", "pseudo", ":", "\n", "            ", "perspective", "-=", "normal", "\n", "", "return", "point", ",", "normal", ",", "None", ",", "perspective", ",", "pseudo", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.clip_matrix": [[596, 646], ["numpy.array", "ValueError", "ValueError"], "function", ["None"], ["", "", "def", "clip_matrix", "(", "left", ",", "right", ",", "bottom", ",", "top", ",", "near", ",", "far", ",", "perspective", "=", "False", ")", ":", "\n", "    ", "\"\"\"Return matrix to obtain normalized device coordinates from frustum.\n\n    The frustum bounds are axis-aligned along x (left, right),\n    y (bottom, top) and z (near, far).\n\n    Normalized device coordinates are in range [-1, 1] if coordinates are\n    inside the frustum.\n\n    If perspective is True the frustum is a truncated pyramid with the\n    perspective point at origin and direction along z axis, otherwise an\n    orthographic canonical view volume (a box).\n\n    Homogeneous coordinates transformed by the perspective clip matrix\n    need to be dehomogenized (divided by w coordinate).\n\n    >>> frustum = numpy.random.rand(6)\n    >>> frustum[1] += frustum[0]\n    >>> frustum[3] += frustum[2]\n    >>> frustum[5] += frustum[4]\n    >>> M = clip_matrix(perspective=False, *frustum)\n    >>> numpy.dot(M, [frustum[0], frustum[2], frustum[4], 1])\n    array([-1., -1., -1.,  1.])\n    >>> numpy.dot(M, [frustum[1], frustum[3], frustum[5], 1])\n    array([ 1.,  1.,  1.,  1.])\n    >>> M = clip_matrix(perspective=True, *frustum)\n    >>> v = numpy.dot(M, [frustum[0], frustum[2], frustum[4], 1])\n    >>> v / v[3]\n    array([-1., -1., -1.,  1.])\n    >>> v = numpy.dot(M, [frustum[1], frustum[3], frustum[4], 1])\n    >>> v / v[3]\n    array([ 1.,  1., -1.,  1.])\n\n    \"\"\"", "\n", "if", "left", ">=", "right", "or", "bottom", ">=", "top", "or", "near", ">=", "far", ":", "\n", "        ", "raise", "ValueError", "(", "'invalid frustum'", ")", "\n", "", "if", "perspective", ":", "\n", "        ", "if", "near", "<=", "_EPS", ":", "\n", "            ", "raise", "ValueError", "(", "'invalid frustum: near <= 0'", ")", "\n", "", "t", "=", "2.0", "*", "near", "\n", "M", "=", "[", "[", "t", "/", "(", "left", "-", "right", ")", ",", "0.0", ",", "(", "right", "+", "left", ")", "/", "(", "right", "-", "left", ")", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "t", "/", "(", "bottom", "-", "top", ")", ",", "(", "top", "+", "bottom", ")", "/", "(", "top", "-", "bottom", ")", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "(", "far", "+", "near", ")", "/", "(", "near", "-", "far", ")", ",", "t", "*", "far", "/", "(", "far", "-", "near", ")", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "-", "1.0", ",", "0.0", "]", "]", "\n", "", "else", ":", "\n", "        ", "M", "=", "[", "[", "2.0", "/", "(", "right", "-", "left", ")", ",", "0.0", ",", "0.0", ",", "(", "right", "+", "left", ")", "/", "(", "left", "-", "right", ")", "]", ",", "\n", "[", "0.0", ",", "2.0", "/", "(", "top", "-", "bottom", ")", ",", "0.0", ",", "(", "top", "+", "bottom", ")", "/", "(", "bottom", "-", "top", ")", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "2.0", "/", "(", "far", "-", "near", ")", ",", "(", "far", "+", "near", ")", "/", "(", "near", "-", "far", ")", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", "]", "\n", "", "return", "numpy", ".", "array", "(", "M", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.shear_matrix": [[648, 677], ["transformations.unit_vector", "transformations.unit_vector", "math.tan", "numpy.identity", "abs", "ValueError", "numpy.outer", "numpy.dot", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.unit_vector", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.unit_vector"], ["", "def", "shear_matrix", "(", "angle", ",", "direction", ",", "point", ",", "normal", ")", ":", "\n", "    ", "\"\"\"Return matrix to shear by angle along direction vector on shear plane.\n\n    The shear plane is defined by a point and normal vector. The direction\n    vector must be orthogonal to the plane's normal vector.\n\n    A point P is transformed by the shear matrix into P\" such that\n    the vector P-P\" is parallel to the direction vector and its extent is\n    given by the angle of P-P'-P\", where P' is the orthogonal projection\n    of P onto the shear plane.\n\n    >>> angle = (random.random() - 0.5) * 4*math.pi\n    >>> direct = numpy.random.random(3) - 0.5\n    >>> point = numpy.random.random(3) - 0.5\n    >>> normal = numpy.cross(direct, numpy.random.random(3))\n    >>> S = shear_matrix(angle, direct, point, normal)\n    >>> numpy.allclose(1, numpy.linalg.det(S))\n    True\n\n    \"\"\"", "\n", "normal", "=", "unit_vector", "(", "normal", "[", ":", "3", "]", ")", "\n", "direction", "=", "unit_vector", "(", "direction", "[", ":", "3", "]", ")", "\n", "if", "abs", "(", "numpy", ".", "dot", "(", "normal", ",", "direction", ")", ")", ">", "1e-6", ":", "\n", "        ", "raise", "ValueError", "(", "'direction and normal vectors are not orthogonal'", ")", "\n", "", "angle", "=", "math", ".", "tan", "(", "angle", ")", "\n", "M", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "M", "[", ":", "3", ",", ":", "3", "]", "+=", "angle", "*", "numpy", ".", "outer", "(", "direction", ",", "normal", ")", "\n", "M", "[", ":", "3", ",", "3", "]", "=", "-", "angle", "*", "numpy", ".", "dot", "(", "point", "[", ":", "3", "]", ",", "normal", ")", "*", "direction", "\n", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.shear_from_matrix": [[679, 722], ["numpy.array", "numpy.linalg.eig", "numpy.dot", "transformations.vector_norm", "math.atan", "numpy.linalg.eig", "numpy.real().squeeze", "numpy.where", "len", "ValueError", "numpy.real().squeeze", "numpy.cross", "transformations.vector_norm", "numpy.where", "len", "ValueError", "numpy.identity", "numpy.real", "abs", "numpy.real", "abs", "numpy.real", "numpy.real"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.vector_norm", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.vector_norm"], ["", "def", "shear_from_matrix", "(", "matrix", ")", ":", "\n", "    ", "\"\"\"Return shear angle, direction and plane from shear matrix.\n\n    >>> angle = (random.random() - 0.5) * 4*math.pi\n    >>> direct = numpy.random.random(3) - 0.5\n    >>> point = numpy.random.random(3) - 0.5\n    >>> normal = numpy.cross(direct, numpy.random.random(3))\n    >>> S0 = shear_matrix(angle, direct, point, normal)\n    >>> angle, direct, point, normal = shear_from_matrix(S0)\n    >>> S1 = shear_matrix(angle, direct, point, normal)\n    >>> is_same_transform(S0, S1)\n    True\n\n    \"\"\"", "\n", "M", "=", "numpy", ".", "array", "(", "matrix", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "M33", "=", "M", "[", ":", "3", ",", ":", "3", "]", "\n", "# normal: cross independent eigenvectors corresponding to the eigenvalue 1", "\n", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eig", "(", "M33", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", "-", "1.0", ")", "<", "1e-4", ")", "[", "0", "]", "\n", "if", "len", "(", "i", ")", "<", "2", ":", "\n", "        ", "raise", "ValueError", "(", "'no two linear independent eigenvectors found %s'", "%", "w", ")", "\n", "", "V", "=", "numpy", ".", "real", "(", "V", "[", ":", ",", "i", "]", ")", ".", "squeeze", "(", ")", ".", "T", "\n", "lenorm", "=", "-", "1.0", "\n", "for", "i0", ",", "i1", "in", "(", "(", "0", ",", "1", ")", ",", "(", "0", ",", "2", ")", ",", "(", "1", ",", "2", ")", ")", ":", "\n", "        ", "n", "=", "numpy", ".", "cross", "(", "V", "[", "i0", "]", ",", "V", "[", "i1", "]", ")", "\n", "w", "=", "vector_norm", "(", "n", ")", "\n", "if", "w", ">", "lenorm", ":", "\n", "            ", "lenorm", "=", "w", "\n", "normal", "=", "n", "\n", "", "", "normal", "/=", "lenorm", "\n", "# direction and angle", "\n", "direction", "=", "numpy", ".", "dot", "(", "M33", "-", "numpy", ".", "identity", "(", "3", ")", ",", "normal", ")", "\n", "angle", "=", "vector_norm", "(", "direction", ")", "\n", "direction", "/=", "angle", "\n", "angle", "=", "math", ".", "atan", "(", "angle", ")", "\n", "# point: eigenvector corresponding to eigenvalue 1", "\n", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eig", "(", "M", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", "-", "1.0", ")", "<", "1e-8", ")", "[", "0", "]", "\n", "if", "not", "len", "(", "i", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'no eigenvector corresponding to eigenvalue 1'", ")", "\n", "", "point", "=", "numpy", ".", "real", "(", "V", "[", ":", ",", "i", "[", "-", "1", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "point", "/=", "point", "[", "3", "]", "\n", "return", "angle", ",", "direction", ",", "point", ",", "normal", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.decompose_matrix": [[724, 807], ["M.copy", "numpy.zeros", "any", "M[].copy", "M[].copy", "transformations.vector_norm", "numpy.dot", "transformations.vector_norm", "numpy.dot", "numpy.dot", "transformations.vector_norm", "math.asin", "math.cos", "numpy.array", "abs", "ValueError", "numpy.linalg.det", "ValueError", "numpy.dot", "numpy.array", "numpy.dot", "numpy.negative", "numpy.negative", "math.atan2", "math.atan2", "math.atan2", "abs", "numpy.linalg.inv", "numpy.cross"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.vector_norm", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.vector_norm", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.vector_norm"], ["", "def", "decompose_matrix", "(", "matrix", ")", ":", "\n", "    ", "\"\"\"Return sequence of transformations from transformation matrix.\n\n    matrix : array_like\n        Non-degenerative homogeneous transformation matrix\n\n    Return tuple of:\n        scale : vector of 3 scaling factors\n        shear : list of shear factors for x-y, x-z, y-z axes\n        angles : list of Euler angles about static x, y, z axes\n        translate : translation vector along x, y, z axes\n        perspective : perspective partition of matrix\n\n    Raise ValueError if matrix is of wrong type or degenerative.\n\n    >>> T0 = translation_matrix([1, 2, 3])\n    >>> scale, shear, angles, trans, persp = decompose_matrix(T0)\n    >>> T1 = translation_matrix(trans)\n    >>> numpy.allclose(T0, T1)\n    True\n    >>> S = scale_matrix(0.123)\n    >>> scale, shear, angles, trans, persp = decompose_matrix(S)\n    >>> scale[0]\n    0.123\n    >>> R0 = euler_matrix(1, 2, 3)\n    >>> scale, shear, angles, trans, persp = decompose_matrix(R0)\n    >>> R1 = euler_matrix(*angles)\n    >>> numpy.allclose(R0, R1)\n    True\n\n    \"\"\"", "\n", "M", "=", "numpy", ".", "array", "(", "matrix", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", ".", "T", "\n", "if", "abs", "(", "M", "[", "3", ",", "3", "]", ")", "<", "_EPS", ":", "\n", "        ", "raise", "ValueError", "(", "'M[3, 3] is zero'", ")", "\n", "", "M", "/=", "M", "[", "3", ",", "3", "]", "\n", "P", "=", "M", ".", "copy", "(", ")", "\n", "P", "[", ":", ",", "3", "]", "=", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "\n", "if", "not", "numpy", ".", "linalg", ".", "det", "(", "P", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'matrix is singular'", ")", "\n", "\n", "", "scale", "=", "numpy", ".", "zeros", "(", "(", "3", ",", ")", ")", "\n", "shear", "=", "[", "0.0", ",", "0.0", ",", "0.0", "]", "\n", "angles", "=", "[", "0.0", ",", "0.0", ",", "0.0", "]", "\n", "\n", "if", "any", "(", "abs", "(", "M", "[", ":", "3", ",", "3", "]", ")", ">", "_EPS", ")", ":", "\n", "        ", "perspective", "=", "numpy", ".", "dot", "(", "M", "[", ":", ",", "3", "]", ",", "numpy", ".", "linalg", ".", "inv", "(", "P", ".", "T", ")", ")", "\n", "M", "[", ":", ",", "3", "]", "=", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "\n", "", "else", ":", "\n", "        ", "perspective", "=", "numpy", ".", "array", "(", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", ")", "\n", "\n", "", "translate", "=", "M", "[", "3", ",", ":", "3", "]", ".", "copy", "(", ")", "\n", "M", "[", "3", ",", ":", "3", "]", "=", "0.0", "\n", "\n", "row", "=", "M", "[", ":", "3", ",", ":", "3", "]", ".", "copy", "(", ")", "\n", "scale", "[", "0", "]", "=", "vector_norm", "(", "row", "[", "0", "]", ")", "\n", "row", "[", "0", "]", "/=", "scale", "[", "0", "]", "\n", "shear", "[", "0", "]", "=", "numpy", ".", "dot", "(", "row", "[", "0", "]", ",", "row", "[", "1", "]", ")", "\n", "row", "[", "1", "]", "-=", "row", "[", "0", "]", "*", "shear", "[", "0", "]", "\n", "scale", "[", "1", "]", "=", "vector_norm", "(", "row", "[", "1", "]", ")", "\n", "row", "[", "1", "]", "/=", "scale", "[", "1", "]", "\n", "shear", "[", "0", "]", "/=", "scale", "[", "1", "]", "\n", "shear", "[", "1", "]", "=", "numpy", ".", "dot", "(", "row", "[", "0", "]", ",", "row", "[", "2", "]", ")", "\n", "row", "[", "2", "]", "-=", "row", "[", "0", "]", "*", "shear", "[", "1", "]", "\n", "shear", "[", "2", "]", "=", "numpy", ".", "dot", "(", "row", "[", "1", "]", ",", "row", "[", "2", "]", ")", "\n", "row", "[", "2", "]", "-=", "row", "[", "1", "]", "*", "shear", "[", "2", "]", "\n", "scale", "[", "2", "]", "=", "vector_norm", "(", "row", "[", "2", "]", ")", "\n", "row", "[", "2", "]", "/=", "scale", "[", "2", "]", "\n", "shear", "[", "1", ":", "]", "/=", "scale", "[", "2", "]", "\n", "\n", "if", "numpy", ".", "dot", "(", "row", "[", "0", "]", ",", "numpy", ".", "cross", "(", "row", "[", "1", "]", ",", "row", "[", "2", "]", ")", ")", "<", "0", ":", "\n", "        ", "numpy", ".", "negative", "(", "scale", ",", "scale", ")", "\n", "numpy", ".", "negative", "(", "row", ",", "row", ")", "\n", "\n", "", "angles", "[", "1", "]", "=", "math", ".", "asin", "(", "-", "row", "[", "0", ",", "2", "]", ")", "\n", "if", "math", ".", "cos", "(", "angles", "[", "1", "]", ")", ":", "\n", "        ", "angles", "[", "0", "]", "=", "math", ".", "atan2", "(", "row", "[", "1", ",", "2", "]", ",", "row", "[", "2", ",", "2", "]", ")", "\n", "angles", "[", "2", "]", "=", "math", ".", "atan2", "(", "row", "[", "0", ",", "1", "]", ",", "row", "[", "0", ",", "0", "]", ")", "\n", "", "else", ":", "\n", "# angles[0] = math.atan2(row[1, 0], row[1, 1])", "\n", "        ", "angles", "[", "0", "]", "=", "math", ".", "atan2", "(", "-", "row", "[", "2", ",", "1", "]", ",", "row", "[", "1", ",", "1", "]", ")", "\n", "angles", "[", "2", "]", "=", "0.0", "\n", "\n", "", "return", "scale", ",", "shear", ",", "angles", ",", "translate", ",", "perspective", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.compose_matrix": [[809, 860], ["numpy.identity", "numpy.identity", "numpy.dot", "numpy.identity", "numpy.dot", "transformations.euler_matrix", "numpy.dot", "numpy.identity", "numpy.dot", "numpy.identity", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.euler_matrix"], ["", "def", "compose_matrix", "(", "scale", "=", "None", ",", "shear", "=", "None", ",", "angles", "=", "None", ",", "translate", "=", "None", ",", "\n", "perspective", "=", "None", ")", ":", "\n", "    ", "\"\"\"Return transformation matrix from sequence of transformations.\n\n    This is the inverse of the decompose_matrix function.\n\n    Sequence of transformations:\n        scale : vector of 3 scaling factors\n        shear : list of shear factors for x-y, x-z, y-z axes\n        angles : list of Euler angles about static x, y, z axes\n        translate : translation vector along x, y, z axes\n        perspective : perspective partition of matrix\n\n    >>> scale = numpy.random.random(3) - 0.5\n    >>> shear = numpy.random.random(3) - 0.5\n    >>> angles = (numpy.random.random(3) - 0.5) * (2*math.pi)\n    >>> trans = numpy.random.random(3) - 0.5\n    >>> persp = numpy.random.random(4) - 0.5\n    >>> M0 = compose_matrix(scale, shear, angles, trans, persp)\n    >>> result = decompose_matrix(M0)\n    >>> M1 = compose_matrix(*result)\n    >>> is_same_transform(M0, M1)\n    True\n\n    \"\"\"", "\n", "M", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "if", "perspective", "is", "not", "None", ":", "\n", "        ", "P", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "P", "[", "3", ",", ":", "]", "=", "perspective", "[", ":", "4", "]", "\n", "M", "=", "numpy", ".", "dot", "(", "M", ",", "P", ")", "\n", "", "if", "translate", "is", "not", "None", ":", "\n", "        ", "T", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "T", "[", ":", "3", ",", "3", "]", "=", "translate", "[", ":", "3", "]", "\n", "M", "=", "numpy", ".", "dot", "(", "M", ",", "T", ")", "\n", "", "if", "angles", "is", "not", "None", ":", "\n", "        ", "R", "=", "euler_matrix", "(", "angles", "[", "0", "]", ",", "angles", "[", "1", "]", ",", "angles", "[", "2", "]", ",", "'sxyz'", ")", "\n", "M", "=", "numpy", ".", "dot", "(", "M", ",", "R", ")", "\n", "", "if", "shear", "is", "not", "None", ":", "\n", "        ", "Z", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "Z", "[", "1", ",", "2", "]", "=", "shear", "[", "2", "]", "\n", "Z", "[", "0", ",", "2", "]", "=", "shear", "[", "1", "]", "\n", "Z", "[", "0", ",", "1", "]", "=", "shear", "[", "0", "]", "\n", "M", "=", "numpy", ".", "dot", "(", "M", ",", "Z", ")", "\n", "", "if", "scale", "is", "not", "None", ":", "\n", "        ", "S", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "S", "[", "0", ",", "0", "]", "=", "scale", "[", "0", "]", "\n", "S", "[", "1", ",", "1", "]", "=", "scale", "[", "1", "]", "\n", "S", "[", "2", ",", "2", "]", "=", "scale", "[", "2", "]", "\n", "M", "=", "numpy", ".", "dot", "(", "M", ",", "S", ")", "\n", "", "M", "/=", "M", "[", "3", ",", "3", "]", "\n", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.orthogonalization_matrix": [[862, 887], ["numpy.radians", "numpy.sin", "numpy.cos", "numpy.array", "math.sqrt"], "function", ["None"], ["", "def", "orthogonalization_matrix", "(", "lengths", ",", "angles", ")", ":", "\n", "    ", "\"\"\"Return orthogonalization matrix for crystallographic cell coordinates.\n\n    Angles are expected in degrees.\n\n    The de-orthogonalization matrix is the inverse.\n\n    >>> O = orthogonalization_matrix([10, 10, 10], [90, 90, 90])\n    >>> numpy.allclose(O[:3, :3], numpy.identity(3, float) * 10)\n    True\n    >>> O = orthogonalization_matrix([9.8, 12.0, 15.5], [87.2, 80.7, 69.7])\n    >>> numpy.allclose(numpy.sum(O), 43.063229)\n    True\n\n    \"\"\"", "\n", "a", ",", "b", ",", "c", "=", "lengths", "\n", "angles", "=", "numpy", ".", "radians", "(", "angles", ")", "\n", "sina", ",", "sinb", ",", "_", "=", "numpy", ".", "sin", "(", "angles", ")", "\n", "cosa", ",", "cosb", ",", "cosg", "=", "numpy", ".", "cos", "(", "angles", ")", "\n", "co", "=", "(", "cosa", "*", "cosb", "-", "cosg", ")", "/", "(", "sina", "*", "sinb", ")", "\n", "return", "numpy", ".", "array", "(", "[", "\n", "[", "a", "*", "sinb", "*", "math", ".", "sqrt", "(", "1.0", "-", "co", "*", "co", ")", ",", "0.0", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "-", "a", "*", "sinb", "*", "co", ",", "b", "*", "sina", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "a", "*", "cosb", ",", "b", "*", "cosa", ",", "c", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.affine_matrix_from_points": [[889, 996], ["numpy.array", "numpy.array", "numpy.identity", "t0.reshape", "numpy.identity", "t1.reshape", "numpy.dot", "ValueError", "numpy.mean", "numpy.mean", "numpy.concatenate", "numpy.linalg.svd", "numpy.dot", "numpy.concatenate", "numpy.vstack", "math.sqrt", "numpy.linalg.inv", "numpy.dot", "numpy.linalg.pinv", "numpy.linalg.svd", "numpy.dot", "numpy.identity", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.linalg.eigh", "transformations.vector_norm", "transformations.quaternion_matrix", "numpy.zeros", "numpy.dot", "numpy.linalg.det", "numpy.outer", "numpy.sum", "numpy.sum", "numpy.roll", "numpy.roll", "numpy.argmax"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.vector_norm", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.quaternion_matrix"], ["", "def", "affine_matrix_from_points", "(", "v0", ",", "v1", ",", "shear", "=", "True", ",", "scale", "=", "True", ",", "usesvd", "=", "True", ")", ":", "\n", "    ", "\"\"\"Return affine transform matrix to register two point sets.\n\n    v0 and v1 are shape (ndims, \\*) arrays of at least ndims non-homogeneous\n    coordinates, where ndims is the dimensionality of the coordinate space.\n\n    If shear is False, a similarity transformation matrix is returned.\n    If also scale is False, a rigid/Euclidean transformation matrix\n    is returned.\n\n    By default the algorithm by Hartley and Zissermann [15] is used.\n    If usesvd is True, similarity and Euclidean transformation matrices\n    are calculated by minimizing the weighted sum of squared deviations\n    (RMSD) according to the algorithm by Kabsch [8].\n    Otherwise, and if ndims is 3, the quaternion based algorithm by Horn [9]\n    is used, which is slower when using this Python implementation.\n\n    The returned matrix performs rotation, translation and uniform scaling\n    (if specified).\n\n    >>> v0 = [[0, 1031, 1031, 0], [0, 0, 1600, 1600]]\n    >>> v1 = [[675, 826, 826, 677], [55, 52, 281, 277]]\n    >>> affine_matrix_from_points(v0, v1)\n    array([[   0.14549,    0.00062,  675.50008],\n           [   0.00048,    0.14094,   53.24971],\n           [   0.     ,    0.     ,    1.     ]])\n    >>> T = translation_matrix(numpy.random.random(3)-0.5)\n    >>> R = random_rotation_matrix(numpy.random.random(3))\n    >>> S = scale_matrix(random.random())\n    >>> M = concatenate_matrices(T, R, S)\n    >>> v0 = (numpy.random.rand(4, 100) - 0.5) * 20\n    >>> v0[3] = 1\n    >>> v1 = numpy.dot(M, v0)\n    >>> v0[:3] += numpy.random.normal(0, 1e-8, 300).reshape(3, -1)\n    >>> M = affine_matrix_from_points(v0[:3], v1[:3])\n    >>> numpy.allclose(v1, numpy.dot(M, v0))\n    True\n\n    More examples in superimposition_matrix()\n\n    \"\"\"", "\n", "v0", "=", "numpy", ".", "array", "(", "v0", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "v1", "=", "numpy", ".", "array", "(", "v1", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "\n", "ndims", "=", "v0", ".", "shape", "[", "0", "]", "\n", "if", "ndims", "<", "2", "or", "v0", ".", "shape", "[", "1", "]", "<", "ndims", "or", "v0", ".", "shape", "!=", "v1", ".", "shape", ":", "\n", "        ", "raise", "ValueError", "(", "'input arrays are of wrong shape or type'", ")", "\n", "\n", "# move centroids to origin", "\n", "", "t0", "=", "-", "numpy", ".", "mean", "(", "v0", ",", "axis", "=", "1", ")", "\n", "M0", "=", "numpy", ".", "identity", "(", "ndims", "+", "1", ")", "\n", "M0", "[", ":", "ndims", ",", "ndims", "]", "=", "t0", "\n", "v0", "+=", "t0", ".", "reshape", "(", "ndims", ",", "1", ")", "\n", "t1", "=", "-", "numpy", ".", "mean", "(", "v1", ",", "axis", "=", "1", ")", "\n", "M1", "=", "numpy", ".", "identity", "(", "ndims", "+", "1", ")", "\n", "M1", "[", ":", "ndims", ",", "ndims", "]", "=", "t1", "\n", "v1", "+=", "t1", ".", "reshape", "(", "ndims", ",", "1", ")", "\n", "\n", "if", "shear", ":", "\n", "# Affine transformation", "\n", "        ", "A", "=", "numpy", ".", "concatenate", "(", "(", "v0", ",", "v1", ")", ",", "axis", "=", "0", ")", "\n", "u", ",", "s", ",", "vh", "=", "numpy", ".", "linalg", ".", "svd", "(", "A", ".", "T", ")", "\n", "vh", "=", "vh", "[", ":", "ndims", "]", ".", "T", "\n", "B", "=", "vh", "[", ":", "ndims", "]", "\n", "C", "=", "vh", "[", "ndims", ":", "2", "*", "ndims", "]", "\n", "t", "=", "numpy", ".", "dot", "(", "C", ",", "numpy", ".", "linalg", ".", "pinv", "(", "B", ")", ")", "\n", "t", "=", "numpy", ".", "concatenate", "(", "(", "t", ",", "numpy", ".", "zeros", "(", "(", "ndims", ",", "1", ")", ")", ")", ",", "axis", "=", "1", ")", "\n", "M", "=", "numpy", ".", "vstack", "(", "(", "t", ",", "(", "(", "0.0", ",", ")", "*", "ndims", ")", "+", "(", "1.0", ",", ")", ")", ")", "\n", "", "elif", "usesvd", "or", "ndims", "!=", "3", ":", "\n", "# Rigid transformation via SVD of covariance matrix", "\n", "        ", "u", ",", "s", ",", "vh", "=", "numpy", ".", "linalg", ".", "svd", "(", "numpy", ".", "dot", "(", "v1", ",", "v0", ".", "T", ")", ")", "\n", "# rotation matrix from SVD orthonormal bases", "\n", "R", "=", "numpy", ".", "dot", "(", "u", ",", "vh", ")", "\n", "if", "numpy", ".", "linalg", ".", "det", "(", "R", ")", "<", "0.0", ":", "\n", "# R does not constitute right handed system", "\n", "            ", "R", "-=", "numpy", ".", "outer", "(", "u", "[", ":", ",", "ndims", "-", "1", "]", ",", "vh", "[", "ndims", "-", "1", ",", ":", "]", "*", "2.0", ")", "\n", "s", "[", "-", "1", "]", "*=", "-", "1.0", "\n", "# homogeneous transformation matrix", "\n", "", "M", "=", "numpy", ".", "identity", "(", "ndims", "+", "1", ")", "\n", "M", "[", ":", "ndims", ",", ":", "ndims", "]", "=", "R", "\n", "", "else", ":", "\n", "# Rigid transformation matrix via quaternion", "\n", "# compute symmetric matrix N", "\n", "        ", "xx", ",", "yy", ",", "zz", "=", "numpy", ".", "sum", "(", "v0", "*", "v1", ",", "axis", "=", "1", ")", "\n", "xy", ",", "yz", ",", "zx", "=", "numpy", ".", "sum", "(", "v0", "*", "numpy", ".", "roll", "(", "v1", ",", "-", "1", ",", "axis", "=", "0", ")", ",", "axis", "=", "1", ")", "\n", "xz", ",", "yx", ",", "zy", "=", "numpy", ".", "sum", "(", "v0", "*", "numpy", ".", "roll", "(", "v1", ",", "-", "2", ",", "axis", "=", "0", ")", ",", "axis", "=", "1", ")", "\n", "N", "=", "[", "[", "xx", "+", "yy", "+", "zz", ",", "0.0", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "yz", "-", "zy", ",", "xx", "-", "yy", "-", "zz", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "zx", "-", "xz", ",", "xy", "+", "yx", ",", "yy", "-", "xx", "-", "zz", ",", "0.0", "]", ",", "\n", "[", "xy", "-", "yx", ",", "zx", "+", "xz", ",", "yz", "+", "zy", ",", "zz", "-", "xx", "-", "yy", "]", "]", "\n", "# quaternion: eigenvector corresponding to most positive eigenvalue", "\n", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eigh", "(", "N", ")", "\n", "q", "=", "V", "[", ":", ",", "numpy", ".", "argmax", "(", "w", ")", "]", "\n", "q", "/=", "vector_norm", "(", "q", ")", "# unit quaternion", "\n", "# homogeneous transformation matrix", "\n", "M", "=", "quaternion_matrix", "(", "q", ")", "\n", "\n", "", "if", "scale", "and", "not", "shear", ":", "\n", "# Affine transformation; scale is ratio of RMS deviations from centroid", "\n", "        ", "v0", "*=", "v0", "\n", "v1", "*=", "v1", "\n", "M", "[", ":", "ndims", ",", ":", "ndims", "]", "*=", "math", ".", "sqrt", "(", "numpy", ".", "sum", "(", "v1", ")", "/", "numpy", ".", "sum", "(", "v0", ")", ")", "\n", "\n", "# move centroids back", "\n", "", "M", "=", "numpy", ".", "dot", "(", "numpy", ".", "linalg", ".", "inv", "(", "M1", ")", ",", "numpy", ".", "dot", "(", "M", ",", "M0", ")", ")", "\n", "M", "/=", "M", "[", "ndims", ",", "ndims", "]", "\n", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.superimposition_matrix": [[998, 1047], ["transformations.affine_matrix_from_points", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.affine_matrix_from_points"], ["", "def", "superimposition_matrix", "(", "v0", ",", "v1", ",", "scale", "=", "False", ",", "usesvd", "=", "True", ")", ":", "\n", "    ", "\"\"\"Return matrix to transform given 3D point set into second point set.\n\n    v0 and v1 are shape (3, \\*) or (4, \\*) arrays of at least 3 points.\n\n    The parameters scale and usesvd are explained in the more general\n    affine_matrix_from_points function.\n\n    The returned matrix is a similarity or Euclidean transformation matrix.\n    This function has a fast C implementation in transformations.c.\n\n    >>> v0 = numpy.random.rand(3, 10)\n    >>> M = superimposition_matrix(v0, v0)\n    >>> numpy.allclose(M, numpy.identity(4))\n    True\n    >>> R = random_rotation_matrix(numpy.random.random(3))\n    >>> v0 = [[1,0,0], [0,1,0], [0,0,1], [1,1,1]]\n    >>> v1 = numpy.dot(R, v0)\n    >>> M = superimposition_matrix(v0, v1)\n    >>> numpy.allclose(v1, numpy.dot(M, v0))\n    True\n    >>> v0 = (numpy.random.rand(4, 100) - 0.5) * 20\n    >>> v0[3] = 1\n    >>> v1 = numpy.dot(R, v0)\n    >>> M = superimposition_matrix(v0, v1)\n    >>> numpy.allclose(v1, numpy.dot(M, v0))\n    True\n    >>> S = scale_matrix(random.random())\n    >>> T = translation_matrix(numpy.random.random(3)-0.5)\n    >>> M = concatenate_matrices(T, R, S)\n    >>> v1 = numpy.dot(M, v0)\n    >>> v0[:3] += numpy.random.normal(0, 1e-9, 300).reshape(3, -1)\n    >>> M = superimposition_matrix(v0, v1, scale=True)\n    >>> numpy.allclose(v1, numpy.dot(M, v0))\n    True\n    >>> M = superimposition_matrix(v0, v1, scale=True, usesvd=False)\n    >>> numpy.allclose(v1, numpy.dot(M, v0))\n    True\n    >>> v = numpy.empty((4, 100, 3))\n    >>> v[:, :, 0] = v0\n    >>> M = superimposition_matrix(v0, v1, scale=True, usesvd=False)\n    >>> numpy.allclose(v1, numpy.dot(M, v[:, :, 0]))\n    True\n\n    \"\"\"", "\n", "v0", "=", "numpy", ".", "array", "(", "v0", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "[", ":", "3", "]", "\n", "v1", "=", "numpy", ".", "array", "(", "v1", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "[", ":", "3", "]", "\n", "return", "affine_matrix_from_points", "(", "v0", ",", "v1", ",", "shear", "=", "False", ",", "\n", "scale", "=", "scale", ",", "usesvd", "=", "usesvd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.euler_matrix": [[1049, 1110], ["numpy.identity", "math.sin", "math.sin", "math.sin", "math.cos", "math.cos", "math.cos"], "function", ["None"], ["", "def", "euler_matrix", "(", "ai", ",", "aj", ",", "ak", ",", "axes", "=", "'sxyz'", ")", ":", "\n", "    ", "\"\"\"Return homogeneous rotation matrix from Euler angles and axis sequence.\n\n    ai, aj, ak : Euler's roll, pitch and yaw angles\n    axes : One of 24 axis sequences as string or encoded tuple\n\n    >>> R = euler_matrix(1, 2, 3, 'syxz')\n    >>> numpy.allclose(numpy.sum(R[0]), -1.34786452)\n    True\n    >>> R = euler_matrix(1, 2, 3, (0, 1, 0, 1))\n    >>> numpy.allclose(numpy.sum(R[0]), -0.383436184)\n    True\n    >>> ai, aj, ak = (4*math.pi) * (numpy.random.random(3) - 0.5)\n    >>> for axes in _AXES2TUPLE.keys():\n    ...    R = euler_matrix(ai, aj, ak, axes)\n    >>> for axes in _TUPLE2AXES.keys():\n    ...    R = euler_matrix(ai, aj, ak, axes)\n\n    \"\"\"", "\n", "try", ":", "\n", "        ", "firstaxis", ",", "parity", ",", "repetition", ",", "frame", "=", "_AXES2TUPLE", "[", "axes", "]", "\n", "", "except", "(", "AttributeError", ",", "KeyError", ")", ":", "\n", "        ", "_TUPLE2AXES", "[", "axes", "]", "# validation", "\n", "firstaxis", ",", "parity", ",", "repetition", ",", "frame", "=", "axes", "\n", "\n", "", "i", "=", "firstaxis", "\n", "j", "=", "_NEXT_AXIS", "[", "i", "+", "parity", "]", "\n", "k", "=", "_NEXT_AXIS", "[", "i", "-", "parity", "+", "1", "]", "\n", "\n", "if", "frame", ":", "\n", "        ", "ai", ",", "ak", "=", "ak", ",", "ai", "\n", "", "if", "parity", ":", "\n", "        ", "ai", ",", "aj", ",", "ak", "=", "-", "ai", ",", "-", "aj", ",", "-", "ak", "\n", "\n", "", "si", ",", "sj", ",", "sk", "=", "math", ".", "sin", "(", "ai", ")", ",", "math", ".", "sin", "(", "aj", ")", ",", "math", ".", "sin", "(", "ak", ")", "\n", "ci", ",", "cj", ",", "ck", "=", "math", ".", "cos", "(", "ai", ")", ",", "math", ".", "cos", "(", "aj", ")", ",", "math", ".", "cos", "(", "ak", ")", "\n", "cc", ",", "cs", "=", "ci", "*", "ck", ",", "ci", "*", "sk", "\n", "sc", ",", "ss", "=", "si", "*", "ck", ",", "si", "*", "sk", "\n", "\n", "M", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "if", "repetition", ":", "\n", "        ", "M", "[", "i", ",", "i", "]", "=", "cj", "\n", "M", "[", "i", ",", "j", "]", "=", "sj", "*", "si", "\n", "M", "[", "i", ",", "k", "]", "=", "sj", "*", "ci", "\n", "M", "[", "j", ",", "i", "]", "=", "sj", "*", "sk", "\n", "M", "[", "j", ",", "j", "]", "=", "-", "cj", "*", "ss", "+", "cc", "\n", "M", "[", "j", ",", "k", "]", "=", "-", "cj", "*", "cs", "-", "sc", "\n", "M", "[", "k", ",", "i", "]", "=", "-", "sj", "*", "ck", "\n", "M", "[", "k", ",", "j", "]", "=", "cj", "*", "sc", "+", "cs", "\n", "M", "[", "k", ",", "k", "]", "=", "cj", "*", "cc", "-", "ss", "\n", "", "else", ":", "\n", "        ", "M", "[", "i", ",", "i", "]", "=", "cj", "*", "ck", "\n", "M", "[", "i", ",", "j", "]", "=", "sj", "*", "sc", "-", "cs", "\n", "M", "[", "i", ",", "k", "]", "=", "sj", "*", "cc", "+", "ss", "\n", "M", "[", "j", ",", "i", "]", "=", "cj", "*", "sk", "\n", "M", "[", "j", ",", "j", "]", "=", "sj", "*", "ss", "+", "cc", "\n", "M", "[", "j", ",", "k", "]", "=", "sj", "*", "cs", "-", "sc", "\n", "M", "[", "k", ",", "i", "]", "=", "-", "sj", "\n", "M", "[", "k", ",", "j", "]", "=", "cj", "*", "si", "\n", "M", "[", "k", ",", "k", "]", "=", "cj", "*", "ci", "\n", "", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.euler_from_matrix": [[1112, 1168], ["numpy.array", "math.sqrt", "math.sqrt", "math.atan2", "math.atan2", "math.atan2", "math.atan2", "math.atan2", "math.atan2", "math.atan2", "math.atan2", "math.atan2", "math.atan2", "axes.lower"], "function", ["None"], ["", "def", "euler_from_matrix", "(", "matrix", ",", "axes", "=", "'sxyz'", ")", ":", "\n", "    ", "\"\"\"Return Euler angles from rotation matrix for specified axis sequence.\n\n    axes : One of 24 axis sequences as string or encoded tuple\n\n    Note that many Euler angle triplets can describe one matrix.\n\n    >>> R0 = euler_matrix(1, 2, 3, 'syxz')\n    >>> al, be, ga = euler_from_matrix(R0, 'syxz')\n    >>> R1 = euler_matrix(al, be, ga, 'syxz')\n    >>> numpy.allclose(R0, R1)\n    True\n    >>> angles = (4*math.pi) * (numpy.random.random(3) - 0.5)\n    >>> for axes in _AXES2TUPLE.keys():\n    ...    R0 = euler_matrix(axes=axes, *angles)\n    ...    R1 = euler_matrix(axes=axes, *euler_from_matrix(R0, axes))\n    ...    if not numpy.allclose(R0, R1): print(axes, \"failed\")\n\n    \"\"\"", "\n", "try", ":", "\n", "        ", "firstaxis", ",", "parity", ",", "repetition", ",", "frame", "=", "_AXES2TUPLE", "[", "axes", ".", "lower", "(", ")", "]", "\n", "", "except", "(", "AttributeError", ",", "KeyError", ")", ":", "\n", "        ", "_TUPLE2AXES", "[", "axes", "]", "# validation", "\n", "firstaxis", ",", "parity", ",", "repetition", ",", "frame", "=", "axes", "\n", "\n", "", "i", "=", "firstaxis", "\n", "j", "=", "_NEXT_AXIS", "[", "i", "+", "parity", "]", "\n", "k", "=", "_NEXT_AXIS", "[", "i", "-", "parity", "+", "1", "]", "\n", "\n", "M", "=", "numpy", ".", "array", "(", "matrix", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "[", ":", "3", ",", ":", "3", "]", "\n", "if", "repetition", ":", "\n", "        ", "sy", "=", "math", ".", "sqrt", "(", "M", "[", "i", ",", "j", "]", "*", "M", "[", "i", ",", "j", "]", "+", "M", "[", "i", ",", "k", "]", "*", "M", "[", "i", ",", "k", "]", ")", "\n", "if", "sy", ">", "_EPS", ":", "\n", "            ", "ax", "=", "math", ".", "atan2", "(", "M", "[", "i", ",", "j", "]", ",", "M", "[", "i", ",", "k", "]", ")", "\n", "ay", "=", "math", ".", "atan2", "(", "sy", ",", "M", "[", "i", ",", "i", "]", ")", "\n", "az", "=", "math", ".", "atan2", "(", "M", "[", "j", ",", "i", "]", ",", "-", "M", "[", "k", ",", "i", "]", ")", "\n", "", "else", ":", "\n", "            ", "ax", "=", "math", ".", "atan2", "(", "-", "M", "[", "j", ",", "k", "]", ",", "M", "[", "j", ",", "j", "]", ")", "\n", "ay", "=", "math", ".", "atan2", "(", "sy", ",", "M", "[", "i", ",", "i", "]", ")", "\n", "az", "=", "0.0", "\n", "", "", "else", ":", "\n", "        ", "cy", "=", "math", ".", "sqrt", "(", "M", "[", "i", ",", "i", "]", "*", "M", "[", "i", ",", "i", "]", "+", "M", "[", "j", ",", "i", "]", "*", "M", "[", "j", ",", "i", "]", ")", "\n", "if", "cy", ">", "_EPS", ":", "\n", "            ", "ax", "=", "math", ".", "atan2", "(", "M", "[", "k", ",", "j", "]", ",", "M", "[", "k", ",", "k", "]", ")", "\n", "ay", "=", "math", ".", "atan2", "(", "-", "M", "[", "k", ",", "i", "]", ",", "cy", ")", "\n", "az", "=", "math", ".", "atan2", "(", "M", "[", "j", ",", "i", "]", ",", "M", "[", "i", ",", "i", "]", ")", "\n", "", "else", ":", "\n", "            ", "ax", "=", "math", ".", "atan2", "(", "-", "M", "[", "j", ",", "k", "]", ",", "M", "[", "j", ",", "j", "]", ")", "\n", "ay", "=", "math", ".", "atan2", "(", "-", "M", "[", "k", ",", "i", "]", ",", "cy", ")", "\n", "az", "=", "0.0", "\n", "\n", "", "", "if", "parity", ":", "\n", "        ", "ax", ",", "ay", ",", "az", "=", "-", "ax", ",", "-", "ay", ",", "-", "az", "\n", "", "if", "frame", ":", "\n", "        ", "ax", ",", "az", "=", "az", ",", "ax", "\n", "", "return", "ax", ",", "ay", ",", "az", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.euler_from_quaternion": [[1170, 1179], ["transformations.euler_from_matrix", "transformations.quaternion_matrix"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.euler_from_matrix", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.quaternion_matrix"], ["", "def", "euler_from_quaternion", "(", "quaternion", ",", "axes", "=", "'sxyz'", ")", ":", "\n", "    ", "\"\"\"Return Euler angles from quaternion for specified axis sequence.\n\n    >>> angles = euler_from_quaternion([0.99810947, 0.06146124, 0, 0])\n    >>> numpy.allclose(angles, [0.123, 0, 0])\n    True\n\n    \"\"\"", "\n", "return", "euler_from_matrix", "(", "quaternion_matrix", "(", "quaternion", ")", ",", "axes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.quaternion_from_euler": [[1181, 1236], ["math.cos", "math.sin", "math.cos", "math.sin", "math.cos", "math.sin", "numpy.empty", "axes.lower"], "function", ["None"], ["", "def", "quaternion_from_euler", "(", "ai", ",", "aj", ",", "ak", ",", "axes", "=", "'sxyz'", ")", ":", "\n", "    ", "\"\"\"Return quaternion from Euler angles and axis sequence.\n\n    ai, aj, ak : Euler's roll, pitch and yaw angles\n    axes : One of 24 axis sequences as string or encoded tuple\n\n    >>> q = quaternion_from_euler(1, 2, 3, 'ryxz')\n    >>> numpy.allclose(q, [0.435953, 0.310622, -0.718287, 0.444435])\n    True\n\n    \"\"\"", "\n", "try", ":", "\n", "        ", "firstaxis", ",", "parity", ",", "repetition", ",", "frame", "=", "_AXES2TUPLE", "[", "axes", ".", "lower", "(", ")", "]", "\n", "", "except", "(", "AttributeError", ",", "KeyError", ")", ":", "\n", "        ", "_TUPLE2AXES", "[", "axes", "]", "# validation", "\n", "firstaxis", ",", "parity", ",", "repetition", ",", "frame", "=", "axes", "\n", "\n", "", "i", "=", "firstaxis", "+", "1", "\n", "j", "=", "_NEXT_AXIS", "[", "i", "+", "parity", "-", "1", "]", "+", "1", "\n", "k", "=", "_NEXT_AXIS", "[", "i", "-", "parity", "]", "+", "1", "\n", "\n", "if", "frame", ":", "\n", "        ", "ai", ",", "ak", "=", "ak", ",", "ai", "\n", "", "if", "parity", ":", "\n", "        ", "aj", "=", "-", "aj", "\n", "\n", "", "ai", "/=", "2.0", "\n", "aj", "/=", "2.0", "\n", "ak", "/=", "2.0", "\n", "ci", "=", "math", ".", "cos", "(", "ai", ")", "\n", "si", "=", "math", ".", "sin", "(", "ai", ")", "\n", "cj", "=", "math", ".", "cos", "(", "aj", ")", "\n", "sj", "=", "math", ".", "sin", "(", "aj", ")", "\n", "ck", "=", "math", ".", "cos", "(", "ak", ")", "\n", "sk", "=", "math", ".", "sin", "(", "ak", ")", "\n", "cc", "=", "ci", "*", "ck", "\n", "cs", "=", "ci", "*", "sk", "\n", "sc", "=", "si", "*", "ck", "\n", "ss", "=", "si", "*", "sk", "\n", "\n", "q", "=", "numpy", ".", "empty", "(", "(", "4", ",", ")", ")", "\n", "if", "repetition", ":", "\n", "        ", "q", "[", "0", "]", "=", "cj", "*", "(", "cc", "-", "ss", ")", "\n", "q", "[", "i", "]", "=", "cj", "*", "(", "cs", "+", "sc", ")", "\n", "q", "[", "j", "]", "=", "sj", "*", "(", "cc", "+", "ss", ")", "\n", "q", "[", "k", "]", "=", "sj", "*", "(", "cs", "-", "sc", ")", "\n", "", "else", ":", "\n", "        ", "q", "[", "0", "]", "=", "cj", "*", "cc", "+", "sj", "*", "ss", "\n", "q", "[", "i", "]", "=", "cj", "*", "sc", "-", "sj", "*", "cs", "\n", "q", "[", "j", "]", "=", "cj", "*", "ss", "+", "sj", "*", "cc", "\n", "q", "[", "k", "]", "=", "cj", "*", "cs", "-", "sj", "*", "sc", "\n", "", "if", "parity", ":", "\n", "        ", "q", "[", "j", "]", "*=", "-", "1.0", "\n", "\n", "", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.quaternion_about_axis": [[1238, 1252], ["numpy.array", "transformations.vector_norm", "math.cos", "math.sin"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.vector_norm"], ["", "def", "quaternion_about_axis", "(", "angle", ",", "axis", ")", ":", "\n", "    ", "\"\"\"Return quaternion for rotation about axis.\n\n    >>> q = quaternion_about_axis(0.123, [1, 0, 0])\n    >>> numpy.allclose(q, [0.99810947, 0.06146124, 0, 0])\n    True\n\n    \"\"\"", "\n", "q", "=", "numpy", ".", "array", "(", "[", "0.0", ",", "axis", "[", "0", "]", ",", "axis", "[", "1", "]", ",", "axis", "[", "2", "]", "]", ")", "\n", "qlen", "=", "vector_norm", "(", "q", ")", "\n", "if", "qlen", ">", "_EPS", ":", "\n", "        ", "q", "*=", "math", ".", "sin", "(", "angle", "/", "2.0", ")", "/", "qlen", "\n", "", "q", "[", "0", "]", "=", "math", ".", "cos", "(", "angle", "/", "2.0", ")", "\n", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.quaternion_matrix": [[1254, 1279], ["numpy.array", "numpy.dot", "math.sqrt", "numpy.outer", "numpy.array", "numpy.identity"], "function", ["None"], ["", "def", "quaternion_matrix", "(", "quaternion", ")", ":", "\n", "    ", "\"\"\"Return homogeneous rotation matrix from quaternion.\n\n    >>> M = quaternion_matrix([0.99810947, 0.06146124, 0, 0])\n    >>> numpy.allclose(M, rotation_matrix(0.123, [1, 0, 0]))\n    True\n    >>> M = quaternion_matrix([1, 0, 0, 0])\n    >>> numpy.allclose(M, numpy.identity(4))\n    True\n    >>> M = quaternion_matrix([0, 1, 0, 0])\n    >>> numpy.allclose(M, numpy.diag([1, -1, -1, 1]))\n    True\n\n    \"\"\"", "\n", "q", "=", "numpy", ".", "array", "(", "quaternion", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "n", "=", "numpy", ".", "dot", "(", "q", ",", "q", ")", "\n", "if", "n", "<", "_EPS", ":", "\n", "        ", "return", "numpy", ".", "identity", "(", "4", ")", "\n", "", "q", "*=", "math", ".", "sqrt", "(", "2.0", "/", "n", ")", "\n", "q", "=", "numpy", ".", "outer", "(", "q", ",", "q", ")", "\n", "return", "numpy", ".", "array", "(", "[", "\n", "[", "1.0", "-", "q", "[", "2", ",", "2", "]", "-", "q", "[", "3", ",", "3", "]", ",", "q", "[", "1", ",", "2", "]", "-", "q", "[", "3", ",", "0", "]", ",", "q", "[", "1", ",", "3", "]", "+", "q", "[", "2", ",", "0", "]", ",", "0.0", "]", ",", "\n", "[", "q", "[", "1", ",", "2", "]", "+", "q", "[", "3", ",", "0", "]", ",", "1.0", "-", "q", "[", "1", ",", "1", "]", "-", "q", "[", "3", ",", "3", "]", ",", "q", "[", "2", ",", "3", "]", "-", "q", "[", "1", ",", "0", "]", ",", "0.0", "]", ",", "\n", "[", "q", "[", "1", ",", "3", "]", "-", "q", "[", "2", ",", "0", "]", ",", "q", "[", "2", ",", "3", "]", "+", "q", "[", "1", ",", "0", "]", ",", "1.0", "-", "q", "[", "1", ",", "1", "]", "-", "q", "[", "2", ",", "2", "]", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.quaternion_from_matrix": [[1281, 1364], ["numpy.array", "numpy.empty", "numpy.trace", "numpy.array", "numpy.linalg.eigh", "numpy.negative", "math.sqrt", "numpy.argmax"], "function", ["None"], ["", "def", "quaternion_from_matrix", "(", "matrix", ",", "isprecise", "=", "False", ")", ":", "\n", "    ", "\"\"\"Return quaternion from rotation matrix.\n\n    If isprecise is True, the input matrix is assumed to be a precise rotation\n    matrix and a faster algorithm is used.\n\n    >>> q = quaternion_from_matrix(numpy.identity(4), True)\n    >>> numpy.allclose(q, [1, 0, 0, 0])\n    True\n    >>> q = quaternion_from_matrix(numpy.diag([1, -1, -1, 1]))\n    >>> numpy.allclose(q, [0, 1, 0, 0]) or numpy.allclose(q, [0, -1, 0, 0])\n    True\n    >>> R = rotation_matrix(0.123, (1, 2, 3))\n    >>> q = quaternion_from_matrix(R, True)\n    >>> numpy.allclose(q, [0.9981095, 0.0164262, 0.0328524, 0.0492786])\n    True\n    >>> R = [[-0.545, 0.797, 0.260, 0], [0.733, 0.603, -0.313, 0],\n    ...      [-0.407, 0.021, -0.913, 0], [0, 0, 0, 1]]\n    >>> q = quaternion_from_matrix(R)\n    >>> numpy.allclose(q, [0.19069, 0.43736, 0.87485, -0.083611])\n    True\n    >>> R = [[0.395, 0.362, 0.843, 0], [-0.626, 0.796, -0.056, 0],\n    ...      [-0.677, -0.498, 0.529, 0], [0, 0, 0, 1]]\n    >>> q = quaternion_from_matrix(R)\n    >>> numpy.allclose(q, [0.82336615, -0.13610694, 0.46344705, -0.29792603])\n    True\n    >>> R = random_rotation_matrix()\n    >>> q = quaternion_from_matrix(R)\n    >>> is_same_transform(R, quaternion_matrix(q))\n    True\n    >>> is_same_quaternion(quaternion_from_matrix(R, isprecise=False),\n    ...                    quaternion_from_matrix(R, isprecise=True))\n    True\n    >>> R = euler_matrix(0.0, 0.0, numpy.pi/2.0)\n    >>> is_same_quaternion(quaternion_from_matrix(R, isprecise=False),\n    ...                    quaternion_from_matrix(R, isprecise=True))\n    True\n\n    \"\"\"", "\n", "M", "=", "numpy", ".", "array", "(", "matrix", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "[", ":", "4", ",", ":", "4", "]", "\n", "if", "isprecise", ":", "\n", "        ", "q", "=", "numpy", ".", "empty", "(", "(", "4", ",", ")", ")", "\n", "t", "=", "numpy", ".", "trace", "(", "M", ")", "\n", "if", "t", ">", "M", "[", "3", ",", "3", "]", ":", "\n", "            ", "q", "[", "0", "]", "=", "t", "\n", "q", "[", "3", "]", "=", "M", "[", "1", ",", "0", "]", "-", "M", "[", "0", ",", "1", "]", "\n", "q", "[", "2", "]", "=", "M", "[", "0", ",", "2", "]", "-", "M", "[", "2", ",", "0", "]", "\n", "q", "[", "1", "]", "=", "M", "[", "2", ",", "1", "]", "-", "M", "[", "1", ",", "2", "]", "\n", "", "else", ":", "\n", "            ", "i", ",", "j", ",", "k", "=", "0", ",", "1", ",", "2", "\n", "if", "M", "[", "1", ",", "1", "]", ">", "M", "[", "0", ",", "0", "]", ":", "\n", "                ", "i", ",", "j", ",", "k", "=", "1", ",", "2", ",", "0", "\n", "", "if", "M", "[", "2", ",", "2", "]", ">", "M", "[", "i", ",", "i", "]", ":", "\n", "                ", "i", ",", "j", ",", "k", "=", "2", ",", "0", ",", "1", "\n", "", "t", "=", "M", "[", "i", ",", "i", "]", "-", "(", "M", "[", "j", ",", "j", "]", "+", "M", "[", "k", ",", "k", "]", ")", "+", "M", "[", "3", ",", "3", "]", "\n", "q", "[", "i", "]", "=", "t", "\n", "q", "[", "j", "]", "=", "M", "[", "i", ",", "j", "]", "+", "M", "[", "j", ",", "i", "]", "\n", "q", "[", "k", "]", "=", "M", "[", "k", ",", "i", "]", "+", "M", "[", "i", ",", "k", "]", "\n", "q", "[", "3", "]", "=", "M", "[", "k", ",", "j", "]", "-", "M", "[", "j", ",", "k", "]", "\n", "q", "=", "q", "[", "[", "3", ",", "0", ",", "1", ",", "2", "]", "]", "\n", "", "q", "*=", "0.5", "/", "math", ".", "sqrt", "(", "t", "*", "M", "[", "3", ",", "3", "]", ")", "\n", "", "else", ":", "\n", "        ", "m00", "=", "M", "[", "0", ",", "0", "]", "\n", "m01", "=", "M", "[", "0", ",", "1", "]", "\n", "m02", "=", "M", "[", "0", ",", "2", "]", "\n", "m10", "=", "M", "[", "1", ",", "0", "]", "\n", "m11", "=", "M", "[", "1", ",", "1", "]", "\n", "m12", "=", "M", "[", "1", ",", "2", "]", "\n", "m20", "=", "M", "[", "2", ",", "0", "]", "\n", "m21", "=", "M", "[", "2", ",", "1", "]", "\n", "m22", "=", "M", "[", "2", ",", "2", "]", "\n", "# symmetric matrix K", "\n", "K", "=", "numpy", ".", "array", "(", "[", "[", "m00", "-", "m11", "-", "m22", ",", "0.0", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "m01", "+", "m10", ",", "m11", "-", "m00", "-", "m22", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "m02", "+", "m20", ",", "m12", "+", "m21", ",", "m22", "-", "m00", "-", "m11", ",", "0.0", "]", ",", "\n", "[", "m21", "-", "m12", ",", "m02", "-", "m20", ",", "m10", "-", "m01", ",", "m00", "+", "m11", "+", "m22", "]", "]", ")", "\n", "K", "/=", "3.0", "\n", "# quaternion is eigenvector of K that corresponds to largest eigenvalue", "\n", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eigh", "(", "K", ")", "\n", "q", "=", "V", "[", "[", "3", ",", "0", ",", "1", ",", "2", "]", ",", "numpy", ".", "argmax", "(", "w", ")", "]", "\n", "", "if", "q", "[", "0", "]", "<", "0.0", ":", "\n", "        ", "numpy", ".", "negative", "(", "q", ",", "q", ")", "\n", "", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.quaternion_multiply": [[1366, 1381], ["numpy.array"], "function", ["None"], ["", "def", "quaternion_multiply", "(", "quaternion1", ",", "quaternion0", ")", ":", "\n", "    ", "\"\"\"Return multiplication of two quaternions.\n\n    >>> q = quaternion_multiply([4, 1, -2, 3], [8, -5, 6, 7])\n    >>> numpy.allclose(q, [28, -44, -14, 48])\n    True\n\n    \"\"\"", "\n", "w0", ",", "x0", ",", "y0", ",", "z0", "=", "quaternion0", "\n", "w1", ",", "x1", ",", "y1", ",", "z1", "=", "quaternion1", "\n", "return", "numpy", ".", "array", "(", "[", "\n", "-", "x1", "*", "x0", "-", "y1", "*", "y0", "-", "z1", "*", "z0", "+", "w1", "*", "w0", ",", "\n", "x1", "*", "w0", "+", "y1", "*", "z0", "-", "z1", "*", "y0", "+", "w1", "*", "x0", ",", "\n", "-", "x1", "*", "z0", "+", "y1", "*", "w0", "+", "z1", "*", "x0", "+", "w1", "*", "y0", ",", "\n", "x1", "*", "y0", "-", "y1", "*", "x0", "+", "z1", "*", "w0", "+", "w1", "*", "z0", "]", ",", "dtype", "=", "numpy", ".", "float64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.quaternion_conjugate": [[1383, 1395], ["numpy.array", "numpy.negative"], "function", ["None"], ["", "def", "quaternion_conjugate", "(", "quaternion", ")", ":", "\n", "    ", "\"\"\"Return conjugate of quaternion.\n\n    >>> q0 = random_quaternion()\n    >>> q1 = quaternion_conjugate(q0)\n    >>> q1[0] == q0[0] and all(q1[1:] == -q0[1:])\n    True\n\n    \"\"\"", "\n", "q", "=", "numpy", ".", "array", "(", "quaternion", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "numpy", ".", "negative", "(", "q", "[", "1", ":", "]", ",", "q", "[", "1", ":", "]", ")", "\n", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.quaternion_inverse": [[1397, 1409], ["numpy.array", "numpy.negative", "numpy.dot"], "function", ["None"], ["", "def", "quaternion_inverse", "(", "quaternion", ")", ":", "\n", "    ", "\"\"\"Return inverse of quaternion.\n\n    >>> q0 = random_quaternion()\n    >>> q1 = quaternion_inverse(q0)\n    >>> numpy.allclose(quaternion_multiply(q0, q1), [1, 0, 0, 0])\n    True\n\n    \"\"\"", "\n", "q", "=", "numpy", ".", "array", "(", "quaternion", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "numpy", ".", "negative", "(", "q", "[", "1", ":", "]", ",", "q", "[", "1", ":", "]", ")", "\n", "return", "q", "/", "numpy", ".", "dot", "(", "q", ",", "q", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.quaternion_real": [[1411, 1419], ["float"], "function", ["None"], ["", "def", "quaternion_real", "(", "quaternion", ")", ":", "\n", "    ", "\"\"\"Return real part of quaternion.\n\n    >>> quaternion_real([3, 0, 1, 2])\n    3.0\n\n    \"\"\"", "\n", "return", "float", "(", "quaternion", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.quaternion_imag": [[1421, 1429], ["numpy.array"], "function", ["None"], ["", "def", "quaternion_imag", "(", "quaternion", ")", ":", "\n", "    ", "\"\"\"Return imaginary part of quaternion.\n\n    >>> quaternion_imag([3, 0, 1, 2])\n    array([ 0.,  1.,  2.])\n\n    \"\"\"", "\n", "return", "numpy", ".", "array", "(", "quaternion", "[", "1", ":", "4", "]", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.quaternion_slerp": [[1431, 1470], ["transformations.unit_vector", "transformations.unit_vector", "numpy.dot", "abs", "numpy.negative", "math.acos", "abs", "math.sin", "math.sin", "math.sin", "abs"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.unit_vector", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.unit_vector"], ["", "def", "quaternion_slerp", "(", "quat0", ",", "quat1", ",", "fraction", ",", "spin", "=", "0", ",", "shortestpath", "=", "True", ")", ":", "\n", "    ", "\"\"\"Return spherical linear interpolation between two quaternions.\n\n    >>> q0 = random_quaternion()\n    >>> q1 = random_quaternion()\n    >>> q = quaternion_slerp(q0, q1, 0)\n    >>> numpy.allclose(q, q0)\n    True\n    >>> q = quaternion_slerp(q0, q1, 1, 1)\n    >>> numpy.allclose(q, q1)\n    True\n    >>> q = quaternion_slerp(q0, q1, 0.5)\n    >>> angle = math.acos(numpy.dot(q0, q))\n    >>> numpy.allclose(2, math.acos(numpy.dot(q0, q1)) / angle) or \\\n        numpy.allclose(2, math.acos(-numpy.dot(q0, q1)) / angle)\n    True\n\n    \"\"\"", "\n", "q0", "=", "unit_vector", "(", "quat0", "[", ":", "4", "]", ")", "\n", "q1", "=", "unit_vector", "(", "quat1", "[", ":", "4", "]", ")", "\n", "if", "fraction", "==", "0.0", ":", "\n", "        ", "return", "q0", "\n", "", "elif", "fraction", "==", "1.0", ":", "\n", "        ", "return", "q1", "\n", "", "d", "=", "numpy", ".", "dot", "(", "q0", ",", "q1", ")", "\n", "if", "abs", "(", "abs", "(", "d", ")", "-", "1.0", ")", "<", "_EPS", ":", "\n", "        ", "return", "q0", "\n", "", "if", "shortestpath", "and", "d", "<", "0.0", ":", "\n", "# invert rotation", "\n", "        ", "d", "=", "-", "d", "\n", "numpy", ".", "negative", "(", "q1", ",", "q1", ")", "\n", "", "angle", "=", "math", ".", "acos", "(", "d", ")", "+", "spin", "*", "math", ".", "pi", "\n", "if", "abs", "(", "angle", ")", "<", "_EPS", ":", "\n", "        ", "return", "q0", "\n", "", "isin", "=", "1.0", "/", "math", ".", "sin", "(", "angle", ")", "\n", "q0", "*=", "math", ".", "sin", "(", "(", "1.0", "-", "fraction", ")", "*", "angle", ")", "*", "isin", "\n", "q1", "*=", "math", ".", "sin", "(", "fraction", "*", "angle", ")", "*", "isin", "\n", "q0", "+=", "q1", "\n", "return", "q0", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.random_quaternion": [[1472, 1498], ["numpy.sqrt", "numpy.sqrt", "numpy.array", "numpy.random.rand", "len", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "function", ["None"], ["", "def", "random_quaternion", "(", "rand", "=", "None", ")", ":", "\n", "    ", "\"\"\"Return uniform random unit quaternion.\n\n    rand: array like or None\n        Three independent random variables that are uniformly distributed\n        between 0 and 1.\n\n    >>> q = random_quaternion()\n    >>> numpy.allclose(1, vector_norm(q))\n    True\n    >>> q = random_quaternion(numpy.random.random(3))\n    >>> len(q.shape), q.shape[0]==4\n    (1, True)\n\n    \"\"\"", "\n", "if", "rand", "is", "None", ":", "\n", "        ", "rand", "=", "numpy", ".", "random", ".", "rand", "(", "3", ")", "\n", "", "else", ":", "\n", "        ", "assert", "len", "(", "rand", ")", "==", "3", "\n", "", "r1", "=", "numpy", ".", "sqrt", "(", "1.0", "-", "rand", "[", "0", "]", ")", "\n", "r2", "=", "numpy", ".", "sqrt", "(", "rand", "[", "0", "]", ")", "\n", "pi2", "=", "math", ".", "pi", "*", "2.0", "\n", "t1", "=", "pi2", "*", "rand", "[", "1", "]", "\n", "t2", "=", "pi2", "*", "rand", "[", "2", "]", "\n", "return", "numpy", ".", "array", "(", "[", "numpy", ".", "cos", "(", "t2", ")", "*", "r2", ",", "numpy", ".", "sin", "(", "t1", ")", "*", "r1", ",", "\n", "numpy", ".", "cos", "(", "t1", ")", "*", "r1", ",", "numpy", ".", "sin", "(", "t2", ")", "*", "r2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.random_rotation_matrix": [[1500, 1513], ["transformations.quaternion_matrix", "transformations.random_quaternion"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.quaternion_matrix", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.random_quaternion"], ["", "def", "random_rotation_matrix", "(", "rand", "=", "None", ")", ":", "\n", "    ", "\"\"\"Return uniform random rotation matrix.\n\n    rand: array like\n        Three independent random variables that are uniformly distributed\n        between 0 and 1 for each returned quaternion.\n\n    >>> R = random_rotation_matrix()\n    >>> numpy.allclose(numpy.dot(R.T, R), numpy.identity(4))\n    True\n\n    \"\"\"", "\n", "return", "quaternion_matrix", "(", "random_quaternion", "(", "rand", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.arcball_map_to_sphere": [[1626, 1637], ["math.sqrt", "numpy.array", "numpy.array", "math.sqrt"], "function", ["None"], ["", "", "def", "arcball_map_to_sphere", "(", "point", ",", "center", ",", "radius", ")", ":", "\n", "    ", "\"\"\"Return unit sphere coordinates from window coordinates.\"\"\"", "\n", "v0", "=", "(", "point", "[", "0", "]", "-", "center", "[", "0", "]", ")", "/", "radius", "\n", "v1", "=", "(", "center", "[", "1", "]", "-", "point", "[", "1", "]", ")", "/", "radius", "\n", "n", "=", "v0", "*", "v0", "+", "v1", "*", "v1", "\n", "if", "n", ">", "1.0", ":", "\n", "# position outside of sphere", "\n", "        ", "n", "=", "math", ".", "sqrt", "(", "n", ")", "\n", "return", "numpy", ".", "array", "(", "[", "v0", "/", "n", ",", "v1", "/", "n", ",", "0.0", "]", ")", "\n", "", "else", ":", "\n", "        ", "return", "numpy", ".", "array", "(", "[", "v0", ",", "v1", ",", "math", ".", "sqrt", "(", "1.0", "-", "n", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.arcball_constrain_to_axis": [[1639, 1653], ["numpy.array", "numpy.array", "transformations.vector_norm", "transformations.unit_vector", "numpy.dot", "numpy.array", "numpy.negative"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.vector_norm", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.unit_vector"], ["", "", "def", "arcball_constrain_to_axis", "(", "point", ",", "axis", ")", ":", "\n", "    ", "\"\"\"Return sphere point perpendicular to axis.\"\"\"", "\n", "v", "=", "numpy", ".", "array", "(", "point", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "a", "=", "numpy", ".", "array", "(", "axis", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "v", "-=", "a", "*", "numpy", ".", "dot", "(", "a", ",", "v", ")", "# on plane", "\n", "n", "=", "vector_norm", "(", "v", ")", "\n", "if", "n", ">", "_EPS", ":", "\n", "        ", "if", "v", "[", "2", "]", "<", "0.0", ":", "\n", "            ", "numpy", ".", "negative", "(", "v", ",", "v", ")", "\n", "", "v", "/=", "n", "\n", "return", "v", "\n", "", "if", "a", "[", "2", "]", "==", "1.0", ":", "\n", "        ", "return", "numpy", ".", "array", "(", "[", "1.0", ",", "0.0", ",", "0.0", "]", ")", "\n", "", "return", "unit_vector", "(", "[", "-", "a", "[", "1", "]", ",", "a", "[", "0", "]", ",", "0.0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.arcball_nearest_axis": [[1655, 1666], ["numpy.array", "numpy.dot", "transformations.arcball_constrain_to_axis"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.arcball_constrain_to_axis"], ["", "def", "arcball_nearest_axis", "(", "point", ",", "axes", ")", ":", "\n", "    ", "\"\"\"Return axis, which arc is nearest to point.\"\"\"", "\n", "point", "=", "numpy", ".", "array", "(", "point", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "nearest", "=", "None", "\n", "mx", "=", "-", "1.0", "\n", "for", "axis", "in", "axes", ":", "\n", "        ", "t", "=", "numpy", ".", "dot", "(", "arcball_constrain_to_axis", "(", "point", ",", "axis", ")", ",", "point", ")", "\n", "if", "t", ">", "mx", ":", "\n", "            ", "nearest", "=", "axis", "\n", "mx", "=", "t", "\n", "", "", "return", "nearest", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.vector_norm": [[1688, 1725], ["numpy.array", "numpy.atleast_1d", "numpy.sqrt", "numpy.sum", "numpy.sqrt", "math.sqrt", "numpy.sum", "numpy.dot"], "function", ["None"], ["def", "vector_norm", "(", "data", ",", "axis", "=", "None", ",", "out", "=", "None", ")", ":", "\n", "    ", "\"\"\"Return length, i.e. Euclidean norm, of ndarray along axis.\n\n    >>> v = numpy.random.random(3)\n    >>> n = vector_norm(v)\n    >>> numpy.allclose(n, numpy.linalg.norm(v))\n    True\n    >>> v = numpy.random.rand(6, 5, 3)\n    >>> n = vector_norm(v, axis=-1)\n    >>> numpy.allclose(n, numpy.sqrt(numpy.sum(v*v, axis=2)))\n    True\n    >>> n = vector_norm(v, axis=1)\n    >>> numpy.allclose(n, numpy.sqrt(numpy.sum(v*v, axis=1)))\n    True\n    >>> v = numpy.random.rand(5, 4, 3)\n    >>> n = numpy.empty((5, 3))\n    >>> vector_norm(v, axis=1, out=n)\n    >>> numpy.allclose(n, numpy.sqrt(numpy.sum(v*v, axis=1)))\n    True\n    >>> vector_norm([])\n    0.0\n    >>> vector_norm([1])\n    1.0\n\n    \"\"\"", "\n", "data", "=", "numpy", ".", "array", "(", "data", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "if", "out", "is", "None", ":", "\n", "        ", "if", "data", ".", "ndim", "==", "1", ":", "\n", "            ", "return", "math", ".", "sqrt", "(", "numpy", ".", "dot", "(", "data", ",", "data", ")", ")", "\n", "", "data", "*=", "data", "\n", "out", "=", "numpy", ".", "atleast_1d", "(", "numpy", ".", "sum", "(", "data", ",", "axis", "=", "axis", ")", ")", "\n", "numpy", ".", "sqrt", "(", "out", ",", "out", ")", "\n", "return", "out", "\n", "", "else", ":", "\n", "        ", "data", "*=", "data", "\n", "numpy", ".", "sum", "(", "data", ",", "axis", "=", "axis", ",", "out", "=", "out", ")", "\n", "numpy", ".", "sqrt", "(", "out", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.unit_vector": [[1727, 1769], ["numpy.atleast_1d", "numpy.sqrt", "numpy.array", "numpy.sum", "numpy.expand_dims", "math.sqrt", "numpy.array", "numpy.dot"], "function", ["None"], ["", "", "def", "unit_vector", "(", "data", ",", "axis", "=", "None", ",", "out", "=", "None", ")", ":", "\n", "    ", "\"\"\"Return ndarray normalized by length, i.e. Euclidean norm, along axis.\n\n    >>> v0 = numpy.random.random(3)\n    >>> v1 = unit_vector(v0)\n    >>> numpy.allclose(v1, v0 / numpy.linalg.norm(v0))\n    True\n    >>> v0 = numpy.random.rand(5, 4, 3)\n    >>> v1 = unit_vector(v0, axis=-1)\n    >>> v2 = v0 / numpy.expand_dims(numpy.sqrt(numpy.sum(v0*v0, axis=2)), 2)\n    >>> numpy.allclose(v1, v2)\n    True\n    >>> v1 = unit_vector(v0, axis=1)\n    >>> v2 = v0 / numpy.expand_dims(numpy.sqrt(numpy.sum(v0*v0, axis=1)), 1)\n    >>> numpy.allclose(v1, v2)\n    True\n    >>> v1 = numpy.empty((5, 4, 3))\n    >>> unit_vector(v0, axis=1, out=v1)\n    >>> numpy.allclose(v1, v2)\n    True\n    >>> list(unit_vector([]))\n    []\n    >>> list(unit_vector([1]))\n    [1.0]\n\n    \"\"\"", "\n", "if", "out", "is", "None", ":", "\n", "        ", "data", "=", "numpy", ".", "array", "(", "data", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "if", "data", ".", "ndim", "==", "1", ":", "\n", "            ", "data", "/=", "math", ".", "sqrt", "(", "numpy", ".", "dot", "(", "data", ",", "data", ")", ")", "\n", "return", "data", "\n", "", "", "else", ":", "\n", "        ", "if", "out", "is", "not", "data", ":", "\n", "            ", "out", "[", ":", "]", "=", "numpy", ".", "array", "(", "data", ",", "copy", "=", "False", ")", "\n", "", "data", "=", "out", "\n", "", "length", "=", "numpy", ".", "atleast_1d", "(", "numpy", ".", "sum", "(", "data", "*", "data", ",", "axis", ")", ")", "\n", "numpy", ".", "sqrt", "(", "length", ",", "length", ")", "\n", "if", "axis", "is", "not", "None", ":", "\n", "        ", "length", "=", "numpy", ".", "expand_dims", "(", "length", ",", "axis", ")", "\n", "", "data", "/=", "length", "\n", "if", "out", "is", "None", ":", "\n", "        ", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.random_vector": [[1771, 1784], ["numpy.random.random"], "function", ["None"], ["", "", "def", "random_vector", "(", "size", ")", ":", "\n", "    ", "\"\"\"Return array of random doubles in the half-open interval [0.0, 1.0).\n\n    >>> v = random_vector(10000)\n    >>> numpy.all(v >= 0) and numpy.all(v < 1)\n    True\n    >>> v0 = random_vector(10)\n    >>> v1 = random_vector(10)\n    >>> numpy.any(v0 == v1)\n    False\n\n    \"\"\"", "\n", "return", "numpy", ".", "random", ".", "random", "(", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.vector_product": [[1786, 1805], ["numpy.cross"], "function", ["None"], ["", "def", "vector_product", "(", "v0", ",", "v1", ",", "axis", "=", "0", ")", ":", "\n", "    ", "\"\"\"Return vector perpendicular to vectors.\n\n    >>> v = vector_product([2, 0, 0], [0, 3, 0])\n    >>> numpy.allclose(v, [0, 0, 6])\n    True\n    >>> v0 = [[2, 0, 0, 2], [0, 2, 0, 2], [0, 0, 2, 2]]\n    >>> v1 = [[3], [0], [0]]\n    >>> v = vector_product(v0, v1)\n    >>> numpy.allclose(v, [[0, 0, 0, 0], [0, 0, 6, 6], [0, -6, 0, -6]])\n    True\n    >>> v0 = [[2, 0, 0], [2, 0, 0], [0, 2, 0], [2, 0, 0]]\n    >>> v1 = [[0, 3, 0], [0, 0, 3], [0, 0, 3], [3, 3, 3]]\n    >>> v = vector_product(v0, v1, axis=1)\n    >>> numpy.allclose(v, [[0, 0, 6], [0, -6, 0], [6, 0, 0], [0, -6, 6]])\n    True\n\n    \"\"\"", "\n", "return", "numpy", ".", "cross", "(", "v0", ",", "v1", ",", "axis", "=", "axis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.angle_between_vectors": [[1807, 1837], ["numpy.array", "numpy.array", "numpy.sum", "numpy.clip", "numpy.arccos", "transformations.vector_norm", "transformations.vector_norm", "numpy.fabs"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.vector_norm", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.vector_norm"], ["", "def", "angle_between_vectors", "(", "v0", ",", "v1", ",", "directed", "=", "True", ",", "axis", "=", "0", ")", ":", "\n", "    ", "\"\"\"Return angle between vectors.\n\n    If directed is False, the input vectors are interpreted as undirected axes,\n    i.e. the maximum angle is pi/2.\n\n    >>> a = angle_between_vectors([1, -2, 3], [-1, 2, -3])\n    >>> numpy.allclose(a, math.pi)\n    True\n    >>> a = angle_between_vectors([1, -2, 3], [-1, 2, -3], directed=False)\n    >>> numpy.allclose(a, 0)\n    True\n    >>> v0 = [[2, 0, 0, 2], [0, 2, 0, 2], [0, 0, 2, 2]]\n    >>> v1 = [[3], [0], [0]]\n    >>> a = angle_between_vectors(v0, v1)\n    >>> numpy.allclose(a, [0, 1.5708, 1.5708, 0.95532])\n    True\n    >>> v0 = [[2, 0, 0], [2, 0, 0], [0, 2, 0], [2, 0, 0]]\n    >>> v1 = [[0, 3, 0], [0, 0, 3], [0, 0, 3], [3, 3, 3]]\n    >>> a = angle_between_vectors(v0, v1, axis=1)\n    >>> numpy.allclose(a, [1.5708, 1.5708, 1.5708, 0.95532])\n    True\n\n    \"\"\"", "\n", "v0", "=", "numpy", ".", "array", "(", "v0", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "v1", "=", "numpy", ".", "array", "(", "v1", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "dot", "=", "numpy", ".", "sum", "(", "v0", "*", "v1", ",", "axis", "=", "axis", ")", "\n", "dot", "/=", "vector_norm", "(", "v0", ",", "axis", "=", "axis", ")", "*", "vector_norm", "(", "v1", ",", "axis", "=", "axis", ")", "\n", "dot", "=", "numpy", ".", "clip", "(", "dot", ",", "-", "1.0", ",", "1.0", ")", "\n", "return", "numpy", ".", "arccos", "(", "dot", "if", "directed", "else", "numpy", ".", "fabs", "(", "dot", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.inverse_matrix": [[1839, 1853], ["numpy.linalg.inv"], "function", ["None"], ["", "def", "inverse_matrix", "(", "matrix", ")", ":", "\n", "    ", "\"\"\"Return inverse of square transformation matrix.\n\n    >>> M0 = random_rotation_matrix()\n    >>> M1 = inverse_matrix(M0.T)\n    >>> numpy.allclose(M1, numpy.linalg.inv(M0.T))\n    True\n    >>> for size in range(1, 7):\n    ...     M0 = numpy.random.rand(size, size)\n    ...     M1 = inverse_matrix(M0)\n    ...     if not numpy.allclose(M1, numpy.linalg.inv(M0)): print(size)\n\n    \"\"\"", "\n", "return", "numpy", ".", "linalg", ".", "inv", "(", "matrix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.concatenate_matrices": [[1855, 1869], ["numpy.identity", "numpy.dot"], "function", ["None"], ["", "def", "concatenate_matrices", "(", "*", "matrices", ")", ":", "\n", "    ", "\"\"\"Return concatenation of series of transformation matrices.\n\n    >>> M = numpy.random.rand(16).reshape((4, 4)) - 0.5\n    >>> numpy.allclose(M, concatenate_matrices(M))\n    True\n    >>> numpy.allclose(numpy.dot(M, M.T), concatenate_matrices(M, M.T))\n    True\n\n    \"\"\"", "\n", "M", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "for", "i", "in", "matrices", ":", "\n", "        ", "M", "=", "numpy", ".", "dot", "(", "M", ",", "i", ")", "\n", "", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.is_same_transform": [[1871, 1885], ["numpy.array", "numpy.array", "numpy.allclose"], "function", ["None"], ["", "def", "is_same_transform", "(", "matrix0", ",", "matrix1", ")", ":", "\n", "    ", "\"\"\"Return True if two matrices perform same transformation.\n\n    >>> is_same_transform(numpy.identity(4), numpy.identity(4))\n    True\n    >>> is_same_transform(numpy.identity(4), random_rotation_matrix())\n    False\n\n    \"\"\"", "\n", "matrix0", "=", "numpy", ".", "array", "(", "matrix0", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "matrix0", "/=", "matrix0", "[", "3", ",", "3", "]", "\n", "matrix1", "=", "numpy", ".", "array", "(", "matrix1", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "matrix1", "/=", "matrix1", "[", "3", ",", "3", "]", "\n", "return", "numpy", ".", "allclose", "(", "matrix0", ",", "matrix1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.is_same_quaternion": [[1887, 1892], ["numpy.array", "numpy.array", "numpy.allclose", "numpy.allclose"], "function", ["None"], ["", "def", "is_same_quaternion", "(", "q0", ",", "q1", ")", ":", "\n", "    ", "\"\"\"Return True if two quaternions are equal.\"\"\"", "\n", "q0", "=", "numpy", ".", "array", "(", "q0", ")", "\n", "q1", "=", "numpy", ".", "array", "(", "q1", ")", "\n", "return", "numpy", ".", "allclose", "(", "q0", ",", "q1", ")", "or", "numpy", ".", "allclose", "(", "q0", ",", "-", "q1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations._import_module": [[1894, 1925], ["dir", "import_module", "import_module", "getattr", "attr.startswith", "globals", "globals", "globals", "globals", "warnings.warn"], "function", ["None"], ["", "def", "_import_module", "(", "name", ",", "package", "=", "None", ",", "warn", "=", "True", ",", "prefix", "=", "'_py_'", ",", "ignore", "=", "'_'", ")", ":", "\n", "    ", "\"\"\"Try import all public attributes from module into global namespace.\n\n    Existing attributes with name clashes are renamed with prefix.\n    Attributes starting with underscore are ignored by default.\n\n    Return True on successful import.\n\n    \"\"\"", "\n", "import", "warnings", "\n", "from", "importlib", "import", "import_module", "\n", "try", ":", "\n", "        ", "if", "not", "package", ":", "\n", "            ", "module", "=", "import_module", "(", "name", ")", "\n", "", "else", ":", "\n", "            ", "module", "=", "import_module", "(", "'.'", "+", "name", ",", "package", "=", "package", ")", "\n", "", "", "except", "ImportError", ":", "\n", "        ", "if", "warn", ":", "\n", "            ", "pass", "\n", "# warnings.warn('failed to import module %s' % name)", "\n", "", "", "else", ":", "\n", "        ", "for", "attr", "in", "dir", "(", "module", ")", ":", "\n", "            ", "if", "ignore", "and", "attr", ".", "startswith", "(", "ignore", ")", ":", "\n", "                ", "continue", "\n", "", "if", "prefix", ":", "\n", "                ", "if", "attr", "in", "globals", "(", ")", ":", "\n", "                    ", "globals", "(", ")", "[", "prefix", "+", "attr", "]", "=", "globals", "(", ")", "[", "attr", "]", "\n", "", "elif", "warn", ":", "\n", "                    ", "warnings", ".", "warn", "(", "'no Python implementation of '", "+", "attr", ")", "\n", "", "", "globals", "(", ")", "[", "attr", "]", "=", "getattr", "(", "module", ",", "attr", ")", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.vis_utils.get_tableau_palette": [[16, 29], ["np.array"], "function", ["None"], ["def", "get_tableau_palette", "(", ")", ":", "\n", "    ", "palette", "=", "np", ".", "array", "(", "[", "[", "78", ",", "121", ",", "167", "]", ",", "# blue", "\n", "[", "255", ",", "87", ",", "89", "]", ",", "# red", "\n", "[", "89", ",", "169", ",", "79", "]", ",", "# green", "\n", "[", "242", ",", "142", ",", "43", "]", ",", "# orange", "\n", "[", "237", ",", "201", ",", "72", "]", ",", "# yellow", "\n", "[", "176", ",", "122", ",", "161", "]", ",", "# purple", "\n", "[", "255", ",", "157", ",", "167", "]", ",", "# pink", "\n", "[", "118", ",", "183", ",", "178", "]", ",", "# cyan", "\n", "[", "156", ",", "117", ",", "95", "]", ",", "# brown", "\n", "[", "186", ",", "176", ",", "172", "]", "# gray", "\n", "]", ",", "dtype", "=", "np", ".", "uint8", ")", "\n", "return", "palette", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.vis_utils.set_axes_equal": [[30, 61], ["ax.get_xlim3d", "ax.get_ylim3d", "ax.get_zlim3d", "abs", "np.mean", "abs", "np.mean", "abs", "np.mean", "ax.set_xlim3d", "ax.set_ylim3d", "ax.set_zlim3d", "ax.set_xlim3d", "ax.set_ylim3d", "ax.set_zlim3d", "max"], "function", ["None"], ["", "def", "set_axes_equal", "(", "ax", ",", "limits", "=", "None", ")", ":", "\n", "    ", "'''Make axes of 3D plot have equal scale so that spheres appear as spheres,\n    cubes as cubes, etc..  This is one possible solution to Matplotlib's\n    ax.set_aspect('equal') and ax.axis('equal') not working for 3D.\n\n    Input\n      ax: a matplotlib axis, e.g., as output from plt.gca().\n    '''", "\n", "if", "limits", "is", "None", ":", "\n", "        ", "x_limits", "=", "ax", ".", "get_xlim3d", "(", ")", "\n", "y_limits", "=", "ax", ".", "get_ylim3d", "(", ")", "\n", "z_limits", "=", "ax", ".", "get_zlim3d", "(", ")", "\n", "\n", "x_range", "=", "abs", "(", "x_limits", "[", "1", "]", "-", "x_limits", "[", "0", "]", ")", "\n", "x_middle", "=", "np", ".", "mean", "(", "x_limits", ")", "\n", "y_range", "=", "abs", "(", "y_limits", "[", "1", "]", "-", "y_limits", "[", "0", "]", ")", "\n", "y_middle", "=", "np", ".", "mean", "(", "y_limits", ")", "\n", "z_range", "=", "abs", "(", "z_limits", "[", "1", "]", "-", "z_limits", "[", "0", "]", ")", "\n", "z_middle", "=", "np", ".", "mean", "(", "z_limits", ")", "\n", "\n", "# The plot bounding box is a sphere in the sense of the infinity", "\n", "# norm, hence I call half the max range the plot radius.", "\n", "plot_radius", "=", "0.5", "*", "max", "(", "[", "x_range", ",", "y_range", ",", "z_range", "]", ")", "\n", "ax", ".", "set_xlim3d", "(", "[", "x_middle", "-", "plot_radius", ",", "x_middle", "+", "plot_radius", "]", ")", "\n", "ax", ".", "set_ylim3d", "(", "[", "y_middle", "-", "plot_radius", ",", "y_middle", "+", "plot_radius", "]", ")", "\n", "ax", ".", "set_zlim3d", "(", "[", "z_middle", "-", "plot_radius", ",", "z_middle", "+", "plot_radius", "]", ")", "\n", "", "else", ":", "\n", "        ", "x_limits", ",", "y_limits", ",", "z_limits", "=", "limits", "\n", "ax", ".", "set_xlim3d", "(", "[", "x_limits", "[", "0", "]", ",", "x_limits", "[", "1", "]", "]", ")", "\n", "ax", ".", "set_ylim3d", "(", "[", "y_limits", "[", "0", "]", ",", "y_limits", "[", "1", "]", "]", ")", "\n", "ax", ".", "set_zlim3d", "(", "[", "z_limits", "[", "0", "]", ",", "z_limits", "[", "1", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.vis_utils.plot2d_img": [[62, 95], ["matplotlib.subplots", "range", "matplotlib.subplots_adjust", "sum", "range", "matplotlib.show", "fig.savefig", "range", "range", "sum", "axes[].imshow", "axes[].axis", "os.path.exists", "os.makedirs"], "function", ["None"], ["", "", "def", "plot2d_img", "(", "imgs", ",", "title_name", "=", "None", ",", "dpi", "=", "200", ",", "cmap", "=", "None", ",", "save_fig", "=", "False", ",", "show_fig", "=", "False", ",", "save_path", "=", "None", ",", "sub_name", "=", "'0'", ")", ":", "\n", "# fig     = plt.figure(dpi=dpi)", "\n", "    ", "step", "=", "0", "\n", "heights", "=", "[", "50", "for", "a", "in", "range", "(", "1", ")", "]", "\n", "widths", "=", "[", "60", "for", "a", "in", "range", "(", "2", ")", "]", "\n", "cmaps", "=", "[", "[", "'viridis'", ",", "'binary'", "]", ",", "[", "'plasma'", ",", "'coolwarm'", "]", ",", "[", "'Greens'", ",", "'copper'", "]", "]", "\n", "fig_width", "=", "10", "# inches", "\n", "fig_height", "=", "fig_width", "*", "sum", "(", "heights", ")", "/", "sum", "(", "widths", ")", "\n", "fig", ",", "axes", "=", "plt", ".", "subplots", "(", "nrows", "=", "1", ",", "ncols", "=", "2", ",", "figsize", "=", "(", "fig_width", ",", "fig_height", ")", ",", "gridspec_kw", "=", "{", "'height_ratios'", ":", "heights", "}", ",", "dpi", "=", "dpi", ")", "#define to be 2 rows, and 4cols.", "\n", "\n", "for", "i", "in", "range", "(", "1", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "2", ")", ":", "\n", "            ", "axes", "[", "j", "]", ".", "imshow", "(", "imgs", "[", "j", "]", ")", "\n", "axes", "[", "j", "]", ".", "axis", "(", "'off'", ")", "\n", "", "", "plt", ".", "subplots_adjust", "(", "top", "=", "1", ",", "bottom", "=", "0", ",", "right", "=", "1", ",", "left", "=", "0", ",", "\n", "hspace", "=", "0.01", ",", "wspace", "=", "0.01", ")", "\n", "# all_poss=['.','o','v','^']", "\n", "# num     = len(imgs)", "\n", "# for m in range(num):", "\n", "#     ax = plt.subplot(1, num, m+1)", "\n", "#     if cmap is None:", "\n", "#         plt.imshow(imgs[m])", "\n", "#     else:", "\n", "#         plt.imshow(imgs[m], cmap=cmap)", "\n", "#     plt.title(title_name[m])", "\n", "#     plt.axis('off')", "\n", "#     plt.grid('off')", "\n", "if", "show_fig", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "", "if", "save_fig", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "", "fig", ".", "savefig", "(", "'{}/{}.png'", ".", "format", "(", "save_path", ",", "sub_name", ",", "pad_inches", "=", "0", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.vis_utils.plot3d_pts": [[96, 197], ["matplotlib.figure", "matplotlib.cm.get_cmap", "matplotlib.cm.get_cmap", "np.vstack", "len", "range", "vis_utils.set_axes_equal", "matplotlib.close", "matplotlib.subplot", "plt.subplot.set_xlabel", "plt.subplot.set_ylabel", "plt.subplot.set_zlabel", "matplotlib.show", "plt.cm.get_cmap.", "plt.cm.get_cmap.", "plt.subplot.view_init", "plt.subplot.view_init", "len", "range", "range", "matplotlib.axis", "range", "plt.subplot.text2D", "plt.figure.savefig", "plt.figure.savefig", "np.linspace", "np.linspace", "len", "len", "len", "matplotlib.title", "matplotlib.legend", "matplotlib.title", "len", "plt.subplot.plot3D", "plt.subplot.plot3D", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "plt.subplot.scatter", "plt.subplot.scatter", "plt.subplot.plot3D", "plt.subplot.scatter", "plt.subplot.scatter", "plt.figure.colorbar", "plt.subplot.scatter", "plt.subplot.scatter", "plt.figure.colorbar", "np.array", "len", "np.array", "len", "np.amin", "np.amin", "np.amax", "np.amin", "np.amax", "np.amin"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.vis_utils.set_axes_equal"], ["", "", "def", "plot3d_pts", "(", "pts", ",", "pts_name", ",", "s", "=", "2", ",", "dpi", "=", "150", ",", "title_name", "=", "None", ",", "sub_name", "=", "'default'", ",", "color_channel", "=", "None", ",", "colorbar", "=", "False", ",", "bcm", "=", "None", ",", "puttext", "=", "None", ",", "view_angle", "=", "None", ",", "save_fig", "=", "False", ",", "save_path", "=", "None", ",", "axis_off", "=", "False", ",", "show_fig", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    fig using\n    \"\"\"", "\n", "fig", "=", "plt", ".", "figure", "(", "dpi", "=", "dpi", ")", "\n", "cmap", "=", "plt", ".", "cm", ".", "jet", "\n", "top", "=", "plt", ".", "cm", ".", "get_cmap", "(", "'Oranges_r'", ",", "128", ")", "\n", "bottom", "=", "plt", ".", "cm", ".", "get_cmap", "(", "'Blues'", ",", "128", ")", "\n", "\n", "colors", "=", "np", ".", "vstack", "(", "(", "top", "(", "np", ".", "linspace", "(", "0", ",", "1", ",", "10", ")", ")", ",", "\n", "bottom", "(", "np", ".", "linspace", "(", "0", ",", "1", ",", "10", ")", ")", ")", ")", "\n", "# colors = ListedColormap(newcolors, name='OrangeBlue')", "\n", "# colors  = cmap(np.linspace(0., 1., 5))", "\n", "# colors = ['Blues', 'Blues',  'Blues', 'Blues', 'Blues']", "\n", "all_poss", "=", "[", "'o'", ",", "'o'", ",", "'o'", ",", "'.'", ",", "'o'", ",", "'*'", ",", "'.'", ",", "'o'", ",", "'v'", ",", "'^'", ",", "'>'", ",", "'<'", ",", "'s'", ",", "'p'", ",", "'*'", ",", "'h'", ",", "'H'", ",", "'D'", ",", "'d'", ",", "'1'", ",", "''", ",", "''", "]", "\n", "num", "=", "len", "(", "pts", ")", "\n", "for", "m", "in", "range", "(", "num", ")", ":", "\n", "        ", "ax", "=", "plt", ".", "subplot", "(", "1", ",", "num", ",", "m", "+", "1", ",", "projection", "=", "'3d'", ")", "\n", "if", "view_angle", "==", "None", ":", "\n", "            ", "ax", ".", "view_init", "(", "elev", "=", "36", ",", "azim", "=", "-", "49", ")", "\n", "", "else", ":", "\n", "            ", "ax", ".", "view_init", "(", "elev", "=", "view_angle", "[", "0", "]", ",", "azim", "=", "view_angle", "[", "1", "]", ")", "\n", "", "if", "len", "(", "pts", "[", "m", "]", ")", ">", "1", ":", "\n", "            ", "for", "n", "in", "range", "(", "len", "(", "pts", "[", "m", "]", ")", ")", ":", "\n", "                ", "if", "color_channel", "is", "None", ":", "\n", "                    ", "ax", ".", "scatter", "(", "pts", "[", "m", "]", "[", "n", "]", "[", ":", ",", "0", "]", ",", "pts", "[", "m", "]", "[", "n", "]", "[", ":", ",", "1", "]", ",", "pts", "[", "m", "]", "[", "n", "]", "[", ":", ",", "2", "]", ",", "marker", "=", "all_poss", "[", "n", "]", ",", "s", "=", "s", ",", "cmap", "=", "colors", "[", "n", "]", ",", "label", "=", "pts_name", "[", "m", "]", "[", "n", "]", ")", "\n", "", "else", ":", "\n", "                    ", "if", "colorbar", ":", "\n", "                        ", "rgb_encoded", "=", "color_channel", "[", "m", "]", "[", "n", "]", "\n", "", "else", ":", "\n", "                        ", "rgb_encoded", "=", "(", "color_channel", "[", "m", "]", "[", "n", "]", "-", "np", ".", "amin", "(", "color_channel", "[", "m", "]", "[", "n", "]", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", ")", "/", "np", ".", "array", "(", "np", ".", "amax", "(", "color_channel", "[", "m", "]", "[", "n", "]", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "-", "np", ".", "amin", "(", "color_channel", "[", "m", "]", "[", "n", "]", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", ")", "\n", "", "if", "len", "(", "pts", "[", "m", "]", ")", "==", "3", "and", "n", "==", "2", ":", "\n", "                        ", "p", "=", "ax", ".", "scatter", "(", "pts", "[", "m", "]", "[", "n", "]", "[", ":", ",", "0", "]", ",", "pts", "[", "m", "]", "[", "n", "]", "[", ":", ",", "1", "]", ",", "pts", "[", "m", "]", "[", "n", "]", "[", ":", ",", "2", "]", ",", "marker", "=", "all_poss", "[", "4", "]", ",", "s", "=", "s", ",", "c", "=", "rgb_encoded", ",", "label", "=", "pts_name", "[", "m", "]", "[", "n", "]", ")", "\n", "", "else", ":", "\n", "                        ", "p", "=", "ax", ".", "scatter", "(", "pts", "[", "m", "]", "[", "n", "]", "[", ":", ",", "0", "]", ",", "pts", "[", "m", "]", "[", "n", "]", "[", ":", ",", "1", "]", ",", "pts", "[", "m", "]", "[", "n", "]", "[", ":", ",", "2", "]", ",", "marker", "=", "all_poss", "[", "n", "]", ",", "s", "=", "s", ",", "c", "=", "rgb_encoded", ",", "label", "=", "pts_name", "[", "m", "]", "[", "n", "]", ")", "\n", "", "if", "colorbar", ":", "\n", "                        ", "fig", ".", "colorbar", "(", "p", ")", "\n", "", "", "", "", "else", ":", "\n", "            ", "for", "n", "in", "range", "(", "len", "(", "pts", "[", "m", "]", ")", ")", ":", "\n", "                ", "if", "color_channel", "is", "None", ":", "\n", "                    ", "p", "=", "ax", ".", "scatter", "(", "pts", "[", "m", "]", "[", "n", "]", "[", ":", ",", "0", "]", ",", "pts", "[", "m", "]", "[", "n", "]", "[", ":", ",", "1", "]", ",", "pts", "[", "m", "]", "[", "n", "]", "[", ":", ",", "2", "]", ",", "marker", "=", "all_poss", "[", "n", "]", ",", "s", "=", "s", ",", "cmap", "=", "colors", "[", "n", "]", ")", "\n", "", "else", ":", "\n", "                    ", "if", "colorbar", ":", "\n", "                        ", "rgb_encoded", "=", "color_channel", "[", "m", "]", "[", "n", "]", "\n", "", "else", ":", "\n", "                        ", "rgb_encoded", "=", "(", "color_channel", "[", "m", "]", "[", "n", "]", "-", "np", ".", "amin", "(", "color_channel", "[", "m", "]", "[", "n", "]", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", ")", "/", "np", ".", "array", "(", "np", ".", "amax", "(", "color_channel", "[", "m", "]", "[", "n", "]", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "-", "np", ".", "amin", "(", "color_channel", "[", "m", "]", "[", "n", "]", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", ")", "\n", "", "if", "len", "(", "pts", "[", "m", "]", ")", "==", "3", "and", "n", "==", "2", ":", "\n", "                        ", "p", "=", "ax", ".", "scatter", "(", "pts", "[", "m", "]", "[", "n", "]", "[", ":", ",", "0", "]", ",", "pts", "[", "m", "]", "[", "n", "]", "[", ":", ",", "1", "]", ",", "pts", "[", "m", "]", "[", "n", "]", "[", ":", ",", "2", "]", ",", "marker", "=", "all_poss", "[", "4", "]", ",", "s", "=", "s", ",", "c", "=", "rgb_encoded", ")", "\n", "", "else", ":", "\n", "                        ", "p", "=", "ax", ".", "scatter", "(", "pts", "[", "m", "]", "[", "n", "]", "[", ":", ",", "0", "]", ",", "pts", "[", "m", "]", "[", "n", "]", "[", ":", ",", "1", "]", ",", "pts", "[", "m", "]", "[", "n", "]", "[", ":", ",", "2", "]", ",", "marker", "=", "all_poss", "[", "n", "]", ",", "s", "=", "s", ",", "c", "=", "rgb_encoded", ")", "\n", "", "if", "colorbar", ":", "\n", "# fig.colorbar(p)", "\n", "                        ", "fig", ".", "colorbar", "(", "p", ",", "ax", "=", "ax", ")", "\n", "\n", "", "", "", "", "ax", ".", "set_xlabel", "(", "'X Label'", ")", "\n", "ax", ".", "set_ylabel", "(", "'Y Label'", ")", "\n", "ax", ".", "set_zlabel", "(", "'Z Label'", ")", "\n", "if", "axis_off", ":", "\n", "            ", "plt", ".", "axis", "(", "'off'", ")", "\n", "\n", "", "if", "title_name", "is", "not", "None", ":", "\n", "            ", "if", "len", "(", "pts_name", "[", "m", "]", ")", "==", "1", ":", "\n", "                ", "plt", ".", "title", "(", "title_name", "[", "m", "]", "+", "' '", "+", "pts_name", "[", "m", "]", "[", "0", "]", "+", "'    '", ")", "\n", "", "else", ":", "\n", "                ", "plt", ".", "legend", "(", "loc", "=", "0", ")", "\n", "plt", ".", "title", "(", "title_name", "[", "m", "]", "+", "'    '", ")", "\n", "\n", "", "", "if", "bcm", "is", "not", "None", ":", "\n", "            ", "for", "j", "in", "range", "(", "len", "(", "bcm", ")", ")", ":", "\n", "                ", "ax", ".", "plot3D", "(", "[", "bcm", "[", "j", "]", "[", "0", "]", "[", "0", "]", ",", "bcm", "[", "j", "]", "[", "2", "]", "[", "0", "]", ",", "bcm", "[", "j", "]", "[", "6", "]", "[", "0", "]", ",", "bcm", "[", "j", "]", "[", "4", "]", "[", "0", "]", ",", "bcm", "[", "j", "]", "[", "0", "]", "[", "0", "]", "]", ",", "[", "bcm", "[", "j", "]", "[", "0", "]", "[", "1", "]", ",", "bcm", "[", "j", "]", "[", "2", "]", "[", "1", "]", ",", "bcm", "[", "j", "]", "[", "6", "]", "[", "1", "]", ",", "bcm", "[", "j", "]", "[", "4", "]", "[", "1", "]", ",", "bcm", "[", "j", "]", "[", "0", "]", "[", "1", "]", "]", ",", "[", "bcm", "[", "j", "]", "[", "0", "]", "[", "2", "]", ",", "bcm", "[", "j", "]", "[", "2", "]", "[", "2", "]", ",", "bcm", "[", "j", "]", "[", "6", "]", "[", "2", "]", ",", "bcm", "[", "j", "]", "[", "4", "]", "[", "2", "]", ",", "bcm", "[", "j", "]", "[", "0", "]", "[", "2", "]", "]", ",", "'blue'", ")", "\n", "\n", "ax", ".", "plot3D", "(", "[", "bcm", "[", "j", "]", "[", "1", "]", "[", "0", "]", ",", "bcm", "[", "j", "]", "[", "3", "]", "[", "0", "]", ",", "bcm", "[", "j", "]", "[", "7", "]", "[", "0", "]", ",", "bcm", "[", "j", "]", "[", "5", "]", "[", "0", "]", ",", "bcm", "[", "j", "]", "[", "1", "]", "[", "0", "]", "]", ",", "[", "bcm", "[", "j", "]", "[", "1", "]", "[", "1", "]", ",", "bcm", "[", "j", "]", "[", "3", "]", "[", "1", "]", ",", "bcm", "[", "j", "]", "[", "7", "]", "[", "1", "]", ",", "bcm", "[", "j", "]", "[", "5", "]", "[", "1", "]", ",", "bcm", "[", "j", "]", "[", "1", "]", "[", "1", "]", "]", ",", "[", "bcm", "[", "j", "]", "[", "1", "]", "[", "2", "]", ",", "bcm", "[", "j", "]", "[", "3", "]", "[", "2", "]", ",", "bcm", "[", "j", "]", "[", "7", "]", "[", "2", "]", ",", "bcm", "[", "j", "]", "[", "5", "]", "[", "2", "]", ",", "bcm", "[", "j", "]", "[", "1", "]", "[", "2", "]", "]", ",", "'gray'", ")", "\n", "\n", "for", "pair", "in", "[", "[", "0", ",", "1", "]", ",", "[", "2", ",", "3", "]", ",", "[", "4", ",", "5", "]", ",", "[", "6", ",", "7", "]", "]", ":", "\n", "                    ", "ax", ".", "plot3D", "(", "[", "bcm", "[", "j", "]", "[", "pair", "[", "0", "]", "]", "[", "0", "]", ",", "bcm", "[", "j", "]", "[", "pair", "[", "1", "]", "]", "[", "0", "]", "]", ",", "[", "bcm", "[", "j", "]", "[", "pair", "[", "0", "]", "]", "[", "1", "]", ",", "bcm", "[", "j", "]", "[", "pair", "[", "1", "]", "]", "[", "1", "]", "]", ",", "[", "bcm", "[", "j", "]", "[", "pair", "[", "0", "]", "]", "[", "2", "]", ",", "bcm", "[", "j", "]", "[", "pair", "[", "1", "]", "]", "[", "2", "]", "]", ",", "'red'", ")", "\n", "", "", "", "if", "puttext", "is", "not", "None", ":", "\n", "            ", "ax", ".", "text2D", "(", "0.55", ",", "0.80", ",", "puttext", ",", "transform", "=", "ax", ".", "transAxes", ",", "color", "=", "'blue'", ",", "fontsize", "=", "6", ")", "\n", "", "", "limits", "=", "[", "[", "-", "1", ",", "1", "]", ",", "[", "-", "1", ",", "1", "]", ",", "[", "-", "1", ",", "1", "]", "]", "\n", "set_axes_equal", "(", "ax", ",", "limits", "=", "None", ")", "\n", "if", "show_fig", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "", "if", "save_fig", ":", "\n", "        ", "if", "save_path", "is", "None", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "'./results/test/'", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "'./results/test/'", ")", "\n", "", "fig", ".", "savefig", "(", "'./results/test/{}_{}.png'", ".", "format", "(", "sub_name", ",", "title_name", "[", "0", "]", ")", ",", "pad_inches", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "", "fig", ".", "savefig", "(", "'{}/{}_{}.png'", ".", "format", "(", "save_path", ",", "sub_name", ",", "title_name", "[", "0", "]", ")", ",", "pad_inches", "=", "0", ")", "\n", "", "", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.vis_utils.plot_imgs": [[198, 222], ["matplotlib.figure", "len", "range", "matplotlib.close", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.show", "imgs[].astype", "matplotlib.title", "matplotlib.title", "plt.figure.savefig", "plt.figure.savefig", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs"], "function", ["None"], ["", "def", "plot_imgs", "(", "imgs", ",", "imgs_name", ",", "title_name", "=", "'default'", ",", "sub_name", "=", "'default'", ",", "save_path", "=", "None", ",", "save_fig", "=", "False", ",", "axis_off", "=", "False", ",", "show_fig", "=", "True", ",", "dpi", "=", "150", ")", ":", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", "dpi", "=", "dpi", ")", "\n", "cmap", "=", "plt", ".", "cm", ".", "jet", "\n", "num", "=", "len", "(", "imgs", ")", "\n", "for", "m", "in", "range", "(", "num", ")", ":", "\n", "        ", "ax1", "=", "plt", ".", "subplot", "(", "1", ",", "num", ",", "m", "+", "1", ")", "\n", "plt", ".", "imshow", "(", "imgs", "[", "m", "]", ".", "astype", "(", "np", ".", "uint8", ")", ")", "\n", "if", "title_name", "is", "not", "None", ":", "\n", "            ", "plt", ".", "title", "(", "title_name", "[", "0", "]", "+", "' '", "+", "imgs_name", "[", "m", "]", ")", "\n", "", "else", ":", "\n", "            ", "plt", ".", "title", "(", "imgs_name", "[", "m", "]", ")", "\n", "", "", "if", "show_fig", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "", "if", "save_fig", ":", "\n", "        ", "if", "save_path", "is", "None", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "'./results/test/'", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "'./results/test/'", ")", "\n", "", "fig", ".", "savefig", "(", "'./results/test/{}_{}.png'", ".", "format", "(", "sub_name", ",", "title_name", "[", "0", "]", ")", ",", "pad_inches", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "", "fig", ".", "savefig", "(", "'{}/{}_{}.png'", ".", "format", "(", "save_path", ",", "sub_name", ",", "title_name", "[", "0", "]", ")", ",", "pad_inches", "=", "0", ")", "\n", "\n", "", "", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.vis_utils.plot_arrows": [[223, 289], ["matplotlib.figure", "cmap", "len", "matplotlib.subplot", "plt.subplot.view_init", "plt.subplot.scatter", "matplotlib.title", "plt.subplot.set_xlim", "plt.subplot.set_ylim", "plt.subplot.set_zlim", "plt.subplot.set_xlabel", "plt.subplot.set_ylabel", "plt.subplot.set_zlabel", "matplotlib.close", "np.linspace", "plt.subplot.scatter", "enumerate", "enumerate", "matplotlib.show", "isinstance", "sub_j[].reshape", "sub_j[].reshape", "plt.subplot.plot3D", "plt.figure.savefig", "plt.figure.savefig", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "plt.subplot.quiver", "plt.subplot.quiver", "plt.subplot.quiver", "print", "plt.subplot.quiver"], "function", ["None"], ["", "def", "plot_arrows", "(", "points", ",", "offset", "=", "None", ",", "joint", "=", "None", ",", "whole_pts", "=", "None", ",", "title_name", "=", "'default'", ",", "idx", "=", "None", ",", "dpi", "=", "200", ",", "s", "=", "5", ",", "thres_r", "=", "0.1", ",", "show_fig", "=", "True", ",", "sparse", "=", "True", ",", "index", "=", "0", ",", "save", "=", "False", ",", "save_path", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    points: [N, 3]\n    offset: [N, 3] or list of [N, 3]\n    joint : [P0, ll], a list, array\n\n    \"\"\"", "\n", "fig", "=", "plt", ".", "figure", "(", "dpi", "=", "dpi", ")", "\n", "cmap", "=", "plt", ".", "cm", ".", "jet", "\n", "colors", "=", "cmap", "(", "np", ".", "linspace", "(", "0.", ",", "1.", ",", "5", ")", ")", "\n", "c_set", "=", "[", "'r'", ",", "'b'", ",", "'g'", ",", "'k'", ",", "'m'", "]", "\n", "all_poss", "=", "[", "'.'", ",", "'o'", ",", "'v'", ",", "'^'", ",", "'>'", ",", "'<'", ",", "'s'", ",", "'p'", ",", "'*'", ",", "'h'", ",", "'H'", ",", "'D'", ",", "'d'", ",", "'1'", ",", "''", ",", "''", "]", "\n", "num", "=", "len", "(", "points", ")", "\n", "ax", "=", "plt", ".", "subplot", "(", "1", ",", "1", ",", "1", ",", "projection", "=", "'3d'", ")", "\n", "ax", ".", "view_init", "(", "elev", "=", "32", ",", "azim", "=", "-", "54", ")", "\n", "p", "=", "ax", ".", "scatter", "(", "points", "[", ":", ",", "0", "]", ",", "points", "[", ":", ",", "1", "]", ",", "points", "[", ":", ",", "2", "]", ",", "marker", "=", "all_poss", "[", "0", "]", ",", "s", "=", "s", ")", "\n", "if", "whole_pts", "is", "not", "None", ":", "\n", "        ", "p", "=", "ax", ".", "scatter", "(", "whole_pts", "[", ":", ",", "0", "]", ",", "whole_pts", "[", ":", ",", "1", "]", ",", "whole_pts", "[", ":", ",", "2", "]", ",", "marker", "=", "all_poss", "[", "1", "]", ",", "s", "=", "s", ")", "\n", "\n", "", "if", "offset", "is", "not", "None", ":", "\n", "        ", "if", "not", "isinstance", "(", "offset", ",", "list", ")", ":", "\n", "            ", "offset", "=", "[", "offset", "]", "\n", "\n", "", "for", "j", ",", "offset_sub", "in", "enumerate", "(", "offset", ")", ":", "\n", "            ", "if", "sparse", ":", "\n", "                ", "if", "idx", "is", "None", ":", "\n", "                    ", "ax", ".", "quiver", "(", "points", "[", ":", ":", "10", ",", "0", "]", ",", "points", "[", ":", ":", "10", ",", "1", "]", ",", "points", "[", ":", ":", "10", ",", "2", "]", ",", "offset_sub", "[", ":", ":", "10", ",", "0", "]", ",", "offset_sub", "[", ":", ":", "10", ",", "1", "]", ",", "offset_sub", "[", ":", ":", "10", ",", "2", "]", ",", "color", "=", "c_set", "[", "j", "]", ")", "\n", "", "else", ":", "\n", "                    ", "points", "=", "points", "[", "idx", ",", ":", "]", "\n", "ax", ".", "quiver", "(", "points", "[", ":", ":", "2", ",", "0", "]", ",", "points", "[", ":", ":", "2", ",", "1", "]", ",", "points", "[", ":", ":", "2", ",", "2", "]", ",", "offset_sub", "[", ":", ":", "2", ",", "0", "]", ",", "offset_sub", "[", ":", ":", "2", ",", "1", "]", ",", "offset_sub", "[", ":", ":", "2", ",", "2", "]", ",", "color", "=", "c_set", "[", "j", "]", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "idx", "is", "None", ":", "\n", "                    ", "ax", ".", "quiver", "(", "points", "[", ":", ",", "0", "]", ",", "points", "[", ":", ",", "1", "]", ",", "points", "[", ":", ",", "2", "]", ",", "offset_sub", "[", ":", ",", "0", "]", ",", "offset_sub", "[", ":", ",", "1", "]", ",", "offset_sub", "[", ":", ",", "2", "]", ",", "color", "=", "c_set", "[", "j", "]", ")", "\n", "", "else", ":", "\n", "                    ", "print", "(", "idx", ")", "\n", "ax", ".", "quiver", "(", "points", "[", "idx", "[", ":", "]", ",", "0", "]", ",", "points", "[", "idx", "[", ":", "]", ",", "1", "]", ",", "points", "[", "idx", "[", ":", "]", ",", "2", "]", ",", "offset_sub", "[", "idx", "[", ":", "]", ",", "0", "]", ",", "offset_sub", "[", "idx", "[", ":", "]", ",", "1", "]", ",", "offset_sub", "[", "idx", "[", ":", "]", ",", "2", "]", ",", "color", "=", "c_set", "[", "j", "]", ")", "\n", "", "", "", "", "if", "joint", "is", "not", "None", ":", "\n", "        ", "for", "j", ",", "sub_j", "in", "enumerate", "(", "joint", ")", ":", "\n", "            ", "length", "=", "0.5", "\n", "sub_j", "[", "0", "]", "=", "sub_j", "[", "0", "]", ".", "reshape", "(", "1", ",", "3", ")", "\n", "sub_j", "[", "1", "]", "=", "sub_j", "[", "1", "]", ".", "reshape", "(", "-", "1", ")", "\n", "ax", ".", "plot3D", "(", "[", "sub_j", "[", "0", "]", "[", "0", ",", "0", "]", "-", "length", "*", "sub_j", "[", "1", "]", "[", "0", "]", ",", "sub_j", "[", "0", "]", "[", "0", ",", "0", "]", "+", "length", "*", "sub_j", "[", "1", "]", "[", "0", "]", "]", ",", "[", "sub_j", "[", "0", "]", "[", "0", ",", "1", "]", "-", "length", "*", "sub_j", "[", "1", "]", "[", "1", "]", ",", "sub_j", "[", "0", "]", "[", "0", ",", "1", "]", "+", "length", "*", "sub_j", "[", "1", "]", "[", "1", "]", "]", ",", "[", "sub_j", "[", "0", "]", "[", "0", ",", "2", "]", "-", "length", "*", "sub_j", "[", "1", "]", "[", "2", "]", ",", "sub_j", "[", "0", "]", "[", "0", ",", "2", "]", "+", "length", "*", "sub_j", "[", "1", "]", "[", "2", "]", "]", ",", "c", "=", "c_set", "[", "j", "]", ",", "linewidth", "=", "2", ")", "\n", "# set_axes_equal(ax)", "\n", "\n", "", "", "plt", ".", "title", "(", "title_name", ")", "\n", "ax", ".", "set_xlim", "(", "0", ",", "1", ")", "\n", "ax", ".", "set_ylim", "(", "0", ",", "1", ")", "\n", "ax", ".", "set_zlim", "(", "0", ",", "1", ")", "\n", "ax", ".", "set_xlabel", "(", "'X Label'", ")", "\n", "ax", ".", "set_ylabel", "(", "'Y Label'", ")", "\n", "ax", ".", "set_zlabel", "(", "'Z Label'", ")", "\n", "if", "show_fig", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "\n", "", "if", "save", ":", "\n", "        ", "if", "save_path", "is", "None", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "'./results/test/'", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "'./results/test/'", ")", "\n", "", "fig", ".", "savefig", "(", "'./results/test/{}_{}.png'", ".", "format", "(", "index", ",", "title_name", "[", "0", "]", ")", ",", "pad_inches", "=", "0", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "", "fig", ".", "savefig", "(", "'{}/{}_{}.png'", ".", "format", "(", "save_path", ",", "index", ",", "title_name", "[", "0", "]", ")", ",", "pad_inches", "=", "0", ")", "\n", "", "", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.vis_utils.plot_lines": [[290, 309], ["matplotlib.figure", "cmap", "matplotlib.subplot", "plt.subplot.view_init", "matplotlib.show", "matplotlib.close", "np.linspace", "plt.subplot.plot3D"], "function", ["None"], ["", "def", "plot_lines", "(", "orient_vect", ")", ":", "\n", "    ", "\"\"\"\n    orient_vect: list of [3] or None\n    \"\"\"", "\n", "fig", "=", "plt", ".", "figure", "(", "dpi", "=", "150", ")", "\n", "cmap", "=", "plt", ".", "cm", ".", "jet", "\n", "colors", "=", "cmap", "(", "np", ".", "linspace", "(", "0.", ",", "1.", ",", "5", ")", ")", "\n", "c_set", "=", "[", "'r'", ",", "'b'", ",", "'g'", ",", "'k'", ",", "'m'", "]", "\n", "all_poss", "=", "[", "'.'", ",", "'o'", ",", "'v'", ",", "'^'", ",", "'>'", ",", "'<'", ",", "'s'", ",", "'p'", ",", "'*'", ",", "'h'", ",", "'H'", ",", "'D'", ",", "'d'", ",", "'1'", ",", "''", ",", "''", "]", "\n", "ax", "=", "plt", ".", "subplot", "(", "1", ",", "1", ",", "1", ",", "projection", "=", "'3d'", ")", "\n", "ax", ".", "view_init", "(", "elev", "=", "32", ",", "azim", "=", "-", "54", ")", "\n", "for", "sub_j", "in", "orient_vect", ":", "\n", "        ", "if", "sub_j", "is", "not", "None", ":", "\n", "            ", "length", "=", "0.5", "\n", "ax", ".", "plot3D", "(", "[", "0", ",", "sub_j", "[", "0", "]", "]", ",", "[", "0", ",", "sub_j", "[", "1", "]", "]", ",", "[", "0", ",", "sub_j", "[", "2", "]", "]", ",", "'blue'", ",", "linewidth", "=", "5", ")", "\n", "", "", "plt", ".", "show", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.vis_utils.plot_arrows_list": [[310, 345], ["matplotlib.figure", "cmap", "matplotlib.subplot", "range", "vis_utils.set_axes_equal", "matplotlib.title", "matplotlib.show", "matplotlib.close", "np.linspace", "plt.subplot.view_init", "plt.subplot.view_init", "plt.subplot.scatter", "len", "plt.subplot.scatter", "matplotlib.axis", "matplotlib.grid", "plt.subplot.quiver", "plt.subplot.quiver"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.vis_utils.set_axes_equal"], ["", "def", "plot_arrows_list", "(", "points_list", ",", "offset_list", ",", "whole_pts", "=", "None", ",", "title_name", "=", "'default'", ",", "dpi", "=", "200", ",", "s", "=", "5", ",", "lw", "=", "1", ",", "length", "=", "0.5", ",", "view_angle", "=", "None", ",", "sparse", "=", "True", ",", "axis_off", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    points: list of [N, 3]\n    offset: nested list of [N, 3]\n    joint : [P0, ll], 2-order nested list, array\n\n    \"\"\"", "\n", "fig", "=", "plt", ".", "figure", "(", "dpi", "=", "dpi", ")", "\n", "cmap", "=", "plt", ".", "cm", ".", "jet", "\n", "colors", "=", "cmap", "(", "np", ".", "linspace", "(", "0.", ",", "1.", ",", "5", ")", ")", "\n", "c_set", "=", "[", "'r'", ",", "'g'", ",", "'b'", ",", "'k'", ",", "'m'", "]", "\n", "all_poss", "=", "[", "'.'", ",", "'o'", ",", "'v'", ",", "'^'", ",", "'>'", ",", "'<'", ",", "'s'", ",", "'p'", ",", "'*'", ",", "'h'", ",", "'H'", ",", "'D'", ",", "'d'", ",", "'1'", ",", "''", ",", "''", "]", "\n", "ax", "=", "plt", ".", "subplot", "(", "1", ",", "1", ",", "1", ",", "projection", "=", "'3d'", ")", "\n", "if", "view_angle", "==", "None", ":", "\n", "        ", "ax", ".", "view_init", "(", "elev", "=", "36", ",", "azim", "=", "-", "49", ")", "\n", "", "else", ":", "\n", "        ", "ax", ".", "view_init", "(", "elev", "=", "view_angle", "[", "0", "]", ",", "azim", "=", "view_angle", "[", "1", "]", ")", "\n", "", "if", "whole_pts", "is", "not", "None", ":", "\n", "        ", "p", "=", "ax", ".", "scatter", "(", "whole_pts", "[", ":", ",", "0", "]", ",", "whole_pts", "[", ":", ",", "1", "]", ",", "whole_pts", "[", ":", ",", "2", "]", ",", "marker", "=", "all_poss", "[", "0", "]", ",", "s", "=", "s", ")", "\n", "", "for", "i", "in", "range", "(", "len", "(", "points_list", ")", ")", ":", "\n", "        ", "points", "=", "points_list", "[", "i", "]", "\n", "p", "=", "ax", ".", "scatter", "(", "points", "[", ":", ",", "0", "]", ",", "points", "[", ":", ",", "1", "]", ",", "points", "[", ":", ",", "2", "]", ",", "marker", "=", "all_poss", "[", "1", "]", ",", "s", "=", "10", ",", "cmap", "=", "colors", "[", "i", "+", "1", "]", ")", "\n", "offset", "=", "offset_list", "[", "i", "]", "\n", "if", "sparse", ":", "\n", "            ", "ls", "=", "5", "\n", "ax", ".", "quiver", "(", "points", "[", ":", ":", "ls", ",", "0", "]", ",", "points", "[", ":", ":", "ls", ",", "1", "]", ",", "points", "[", ":", ":", "ls", ",", "2", "]", ",", "offset", "[", ":", ":", "ls", ",", "0", "]", ",", "offset", "[", ":", ":", "ls", ",", "1", "]", ",", "offset", "[", ":", ":", "ls", ",", "2", "]", ",", "color", "=", "c_set", "[", "i", "]", ",", "linewidth", "=", "lw", ")", "\n", "", "else", ":", "\n", "            ", "ax", ".", "quiver", "(", "points", "[", ":", ",", "0", "]", ",", "points", "[", ":", ",", "1", "]", ",", "points", "[", ":", ",", "2", "]", ",", "offset", "[", ":", ",", "0", "]", ",", "offset", "[", ":", ",", "1", "]", ",", "offset", "[", ":", ",", "2", "]", ",", "color", "=", "'r'", ",", "linewidth", "=", "lw", ")", "\n", "", "", "set_axes_equal", "(", "ax", ")", "\n", "plt", ".", "title", "(", "title_name", ")", "\n", "if", "axis_off", ":", "\n", "        ", "plt", ".", "axis", "(", "'off'", ")", "\n", "plt", ".", "grid", "(", "'off'", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.vis_utils.plot_joints_bb_list": [[346, 437], ["matplotlib.figure", "matplotlib.cm.get_cmap", "matplotlib.cm.get_cmap", "np.vstack", "matplotlib.subplot", "np.mean", "range", "print", "matplotlib.title", "matplotlib.axis", "matplotlib.grid", "vis_utils.set_axes_equal", "matplotlib.close", "plt.subplot.view_init", "plt.subplot.view_init", "enumerate", "len", "vis_utils.get_tableau_palette", "enumerate", "range", "matplotlib.show", "plt.cm.get_cmap.", "plt.cm.get_cmap.", "range", "plt.subplot.scatter", "sub_j[].reshape", "sub_j[].reshape", "plt.subplot.plot3D", "len", "plt.subplot.plot3D", "plt.subplot.plot3D", "plt.figure.savefig", "print", "plt.figure.savefig", "print", "np.linspace", "np.linspace", "plt.subplot.quiver", "plt.subplot.quiver", "plt.subplot.plot3D", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.vis_utils.set_axes_equal", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.vis_utils.get_tableau_palette"], ["", "def", "plot_joints_bb_list", "(", "points_list", ",", "offset_list", "=", "None", ",", "joint_list", "=", "None", ",", "whole_pts", "=", "None", ",", "bcm", "=", "None", ",", "view_angle", "=", "None", ",", "title_name", "=", "'default'", ",", "sub_name", "=", "'0'", ",", "dpi", "=", "200", ",", "s", "=", "15", ",", "lw", "=", "1", ",", "length", "=", "0.5", ",", "sparse", "=", "True", ",", "save_path", "=", "None", ",", "show_fig", "=", "True", ",", "save_fig", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    points: list of [N, 3]\n    offset: nested list of [N, 3]\n    joint : [P0, ll], 2-order nested list, array\n\n    \"\"\"", "\n", "fig", "=", "plt", ".", "figure", "(", "dpi", "=", "dpi", ")", "\n", "cmap", "=", "plt", ".", "cm", ".", "jet", "\n", "top", "=", "plt", ".", "cm", ".", "get_cmap", "(", "'Oranges_r'", ",", "128", ")", "\n", "bottom", "=", "plt", ".", "cm", ".", "get_cmap", "(", "'Blues'", ",", "128", ")", "\n", "\n", "colors", "=", "np", ".", "vstack", "(", "(", "top", "(", "np", ".", "linspace", "(", "0", ",", "1", ",", "10", ")", ")", ",", "\n", "bottom", "(", "np", ".", "linspace", "(", "0", ",", "1", ",", "10", ")", ")", ")", ")", "\n", "c_set", "=", "[", "'g'", ",", "'b'", ",", "'m'", ",", "'y'", ",", "'r'", ",", "'c'", "]", "\n", "all_poss", "=", "[", "'.'", ",", "'o'", ",", "'.'", ",", "'o'", ",", "'v'", ",", "'^'", ",", "'>'", ",", "'<'", ",", "'s'", ",", "'p'", ",", "'*'", ",", "'h'", ",", "'H'", ",", "'D'", ",", "'d'", ",", "'1'", ",", "''", ",", "''", "]", "\n", "ax", "=", "plt", ".", "subplot", "(", "1", ",", "1", ",", "1", ",", "projection", "=", "'3d'", ")", "\n", "if", "view_angle", "==", "None", ":", "\n", "        ", "ax", ".", "view_init", "(", "elev", "=", "36", ",", "azim", "=", "-", "49", ")", "\n", "", "else", ":", "\n", "        ", "ax", ".", "view_init", "(", "elev", "=", "view_angle", "[", "0", "]", ",", "azim", "=", "view_angle", "[", "1", "]", ")", "\n", "# ax.view_init(elev=46, azim=-164)", "\n", "", "pts_name", "=", "[", "'part {}'", ".", "format", "(", "j", ")", "for", "j", "in", "range", "(", "10", ")", "]", "\n", "if", "whole_pts", "is", "not", "None", ":", "\n", "        ", "for", "m", ",", "points", "in", "enumerate", "(", "whole_pts", ")", ":", "\n", "            ", "p", "=", "ax", ".", "scatter", "(", "points", "[", ":", ",", "0", "]", ",", "points", "[", ":", ",", "1", "]", ",", "points", "[", ":", ",", "2", "]", ",", "marker", "=", "all_poss", "[", "1", "]", ",", "s", "=", "s", ",", "cmap", "=", "colors", "[", "m", "]", ",", "label", "=", "pts_name", "[", "m", "]", ")", "\n", "", "", "center_pt", "=", "np", ".", "mean", "(", "whole_pts", "[", "0", "]", ",", "axis", "=", "0", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "points_list", ")", ")", ":", "\n", "        ", "points", "=", "points_list", "[", "i", "]", "\n", "# p = ax.scatter(points[:, 0], points[:, 1], points[:, 2],  marker=all_poss[i], s=s,  c='c')", "\n", "if", "offset_list", "is", "not", "None", ":", "\n", "            ", "offset", "=", "offset_list", "[", "i", "]", "# with m previously", "\n", "if", "sparse", ":", "\n", "                ", "ax", ".", "quiver", "(", "points", "[", ":", ":", "50", ",", "0", "]", ",", "points", "[", ":", ":", "50", ",", "1", "]", ",", "points", "[", ":", ":", "50", ",", "2", "]", ",", "offset", "[", ":", ":", "50", ",", "0", "]", ",", "offset", "[", ":", ":", "50", ",", "1", "]", ",", "offset", "[", ":", ":", "50", ",", "2", "]", ",", "color", "=", "c_set", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                ", "ax", ".", "quiver", "(", "points", "[", ":", ",", "0", "]", ",", "points", "[", ":", ",", "1", "]", ",", "points", "[", ":", ",", "2", "]", ",", "offset", "[", ":", ",", "0", "]", ",", "offset", "[", ":", ",", "1", "]", ",", "offset", "[", ":", ",", "2", "]", ",", "color", "=", "'r'", ")", "\n", "# we have two layers", "\n", "", "", "palette", "=", "get_tableau_palette", "(", ")", "\n", "if", "joint_list", "is", "not", "None", ":", "\n", "            ", "if", "joint_list", "[", "i", "]", "is", "not", "[", "]", ":", "\n", "                ", "joint", "=", "joint_list", "[", "i", "]", "# [[1, 3], [1, 3]]", "\n", "", "", "for", "j", ",", "sub_j", "in", "enumerate", "(", "joint_list", ")", ":", "\n", "            ", "length", "=", "0.5", "\n", "sub_j", "[", "0", "]", "=", "sub_j", "[", "0", "]", ".", "reshape", "(", "1", ",", "3", ")", "\n", "sub_j", "[", "1", "]", "=", "sub_j", "[", "1", "]", ".", "reshape", "(", "-", "1", ")", "\n", "ax", ".", "plot3D", "(", "[", "sub_j", "[", "0", "]", "[", "0", ",", "0", "]", "-", "length", "*", "sub_j", "[", "1", "]", "[", "0", "]", ",", "sub_j", "[", "0", "]", "[", "0", ",", "0", "]", "+", "length", "*", "sub_j", "[", "1", "]", "[", "0", "]", "]", ",", "[", "sub_j", "[", "0", "]", "[", "0", ",", "1", "]", "-", "length", "*", "sub_j", "[", "1", "]", "[", "1", "]", ",", "sub_j", "[", "0", "]", "[", "0", ",", "1", "]", "+", "length", "*", "sub_j", "[", "1", "]", "[", "1", "]", "]", ",", "[", "sub_j", "[", "0", "]", "[", "0", ",", "2", "]", "-", "length", "*", "sub_j", "[", "1", "]", "[", "2", "]", ",", "sub_j", "[", "0", "]", "[", "0", ",", "2", "]", "+", "length", "*", "sub_j", "[", "1", "]", "[", "2", "]", "]", ",", "c", "=", "c_set", "[", "j", "]", ",", "linewidth", "=", "2", ")", "\n", "# set_axes_equal(ax)", "\n", "# ax.dist = 8", "\n", "", "", "print", "(", "'viewing distance is '", ",", "ax", ".", "dist", ")", "\n", "if", "bcm", "is", "not", "None", ":", "\n", "        ", "for", "j", "in", "range", "(", "len", "(", "bcm", ")", ")", ":", "\n", "            ", "color_s", "=", "'gray'", "\n", "lw_s", "=", "1.5", "\n", "# if j == 1:", "\n", "#     color_s = 'red'", "\n", "#     lw_s = 2", "\n", "ax", ".", "plot3D", "(", "[", "bcm", "[", "j", "]", "[", "0", "]", "[", "0", "]", ",", "bcm", "[", "j", "]", "[", "2", "]", "[", "0", "]", ",", "bcm", "[", "j", "]", "[", "6", "]", "[", "0", "]", ",", "bcm", "[", "j", "]", "[", "4", "]", "[", "0", "]", ",", "bcm", "[", "j", "]", "[", "0", "]", "[", "0", "]", "]", ",", "[", "bcm", "[", "j", "]", "[", "0", "]", "[", "1", "]", ",", "bcm", "[", "j", "]", "[", "2", "]", "[", "1", "]", ",", "bcm", "[", "j", "]", "[", "6", "]", "[", "1", "]", ",", "bcm", "[", "j", "]", "[", "4", "]", "[", "1", "]", ",", "bcm", "[", "j", "]", "[", "0", "]", "[", "1", "]", "]", ",", "[", "bcm", "[", "j", "]", "[", "0", "]", "[", "2", "]", ",", "bcm", "[", "j", "]", "[", "2", "]", "[", "2", "]", ",", "bcm", "[", "j", "]", "[", "6", "]", "[", "2", "]", ",", "bcm", "[", "j", "]", "[", "4", "]", "[", "2", "]", ",", "bcm", "[", "j", "]", "[", "0", "]", "[", "2", "]", "]", ",", "color", "=", "color_s", ",", "linewidth", "=", "lw_s", ")", "\n", "\n", "ax", ".", "plot3D", "(", "[", "bcm", "[", "j", "]", "[", "1", "]", "[", "0", "]", ",", "bcm", "[", "j", "]", "[", "3", "]", "[", "0", "]", ",", "bcm", "[", "j", "]", "[", "7", "]", "[", "0", "]", ",", "bcm", "[", "j", "]", "[", "5", "]", "[", "0", "]", ",", "bcm", "[", "j", "]", "[", "1", "]", "[", "0", "]", "]", ",", "[", "bcm", "[", "j", "]", "[", "1", "]", "[", "1", "]", ",", "bcm", "[", "j", "]", "[", "3", "]", "[", "1", "]", ",", "bcm", "[", "j", "]", "[", "7", "]", "[", "1", "]", ",", "bcm", "[", "j", "]", "[", "5", "]", "[", "1", "]", ",", "bcm", "[", "j", "]", "[", "1", "]", "[", "1", "]", "]", ",", "[", "bcm", "[", "j", "]", "[", "1", "]", "[", "2", "]", ",", "bcm", "[", "j", "]", "[", "3", "]", "[", "2", "]", ",", "bcm", "[", "j", "]", "[", "7", "]", "[", "2", "]", ",", "bcm", "[", "j", "]", "[", "5", "]", "[", "2", "]", ",", "bcm", "[", "j", "]", "[", "1", "]", "[", "2", "]", "]", ",", "color", "=", "color_s", ",", "linewidth", "=", "lw_s", ")", "\n", "\n", "for", "pair", "in", "[", "[", "0", ",", "1", "]", ",", "[", "2", ",", "3", "]", ",", "[", "4", ",", "5", "]", ",", "[", "6", ",", "7", "]", "]", ":", "\n", "                ", "ax", ".", "plot3D", "(", "[", "bcm", "[", "j", "]", "[", "pair", "[", "0", "]", "]", "[", "0", "]", ",", "bcm", "[", "j", "]", "[", "pair", "[", "1", "]", "]", "[", "0", "]", "]", ",", "[", "bcm", "[", "j", "]", "[", "pair", "[", "0", "]", "]", "[", "1", "]", ",", "bcm", "[", "j", "]", "[", "pair", "[", "1", "]", "]", "[", "1", "]", "]", ",", "[", "bcm", "[", "j", "]", "[", "pair", "[", "0", "]", "]", "[", "2", "]", ",", "bcm", "[", "j", "]", "[", "pair", "[", "1", "]", "]", "[", "2", "]", "]", ",", "color", "=", "color_s", ",", "linewidth", "=", "lw_s", ")", "\n", "\n", "", "", "", "plt", ".", "title", "(", "title_name", ",", "fontsize", "=", "10", ")", "\n", "plt", ".", "axis", "(", "'off'", ")", "\n", "# plt.legend('off')", "\n", "plt", ".", "grid", "(", "'off'", ")", "\n", "limits", "=", "[", "[", "0", ",", "1", "]", ",", "[", "0", ",", "1", "]", ",", "[", "0", ",", "1", "]", "]", "\n", "set_axes_equal", "(", "ax", ",", "limits", ")", "\n", "if", "show_fig", ":", "\n", "        ", "plt", ".", "show", "(", ")", "\n", "", "if", "save_fig", ":", "\n", "        ", "if", "save_path", "is", "None", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "'./results/test/'", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "'./results/test/'", ")", "\n", "", "fig", ".", "savefig", "(", "'./results/test/{}_{}.png'", ".", "format", "(", "sub_name", ",", "title_name", ")", ",", "pad_inches", "=", "0", ")", "\n", "print", "(", "'saving figure into '", ",", "'./results/test/{}_{}.png'", ".", "format", "(", "sub_name", ",", "title_name", ")", ")", "\n", "", "else", ":", "\n", "            ", "if", "not", "os", ".", "path", ".", "exists", "(", "save_path", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "save_path", ")", "\n", "", "fig", ".", "savefig", "(", "'{}/{}_{}.png'", ".", "format", "(", "save_path", ",", "sub_name", ",", "title_name", ")", ",", "pad_inches", "=", "0", ")", "\n", "print", "(", "'saving fig into '", ",", "'{}/{}_{}.png'", ".", "format", "(", "save_path", ",", "sub_name", ",", "title_name", ")", ")", "\n", "", "", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.vis_utils.plot_arrows_list_threshold": [[438, 468], ["matplotlib.figure", "cmap", "matplotlib.subplot", "range", "matplotlib.title", "matplotlib.show", "matplotlib.close", "np.linspace", "len", "plt.subplot.scatter", "range", "len", "np.linalg.norm", "plt.subplot.quiver", "plt.subplot.plot3D", "np.where"], "function", ["None"], ["", "def", "plot_arrows_list_threshold", "(", "points_list", ",", "offset_list", ",", "joint_list", ",", "title_name", "=", "'default'", ",", "dpi", "=", "200", ",", "s", "=", "5", ",", "lw", "=", "5", ",", "length", "=", "0.5", ",", "threshold", "=", "0.2", ")", ":", "\n", "    ", "\"\"\"\n    points: [N, 3]\n    offset: [N, 3]\n    joint : [P0, ll], a list, array\n\n    \"\"\"", "\n", "fig", "=", "plt", ".", "figure", "(", "dpi", "=", "dpi", ")", "\n", "cmap", "=", "plt", ".", "cm", ".", "jet", "\n", "colors", "=", "cmap", "(", "np", ".", "linspace", "(", "0.", ",", "1.", ",", "5", ")", ")", "\n", "c_set", "=", "[", "'r'", ",", "'g'", ",", "'b'", ",", "'k'", ",", "'m'", "]", "\n", "all_poss", "=", "[", "'.'", ",", "'o'", ",", "'v'", ",", "'^'", ",", "'>'", ",", "'<'", ",", "'s'", ",", "'p'", ",", "'*'", ",", "'h'", ",", "'H'", ",", "'D'", ",", "'d'", ",", "'1'", ",", "''", ",", "''", "]", "\n", "ax", "=", "plt", ".", "subplot", "(", "1", ",", "1", ",", "1", ",", "projection", "=", "'3d'", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "points_list", ")", ")", ":", "\n", "        ", "points", "=", "points_list", "[", "i", "]", "\n", "p", "=", "ax", ".", "scatter", "(", "points", "[", ":", ",", "0", "]", ",", "points", "[", ":", ",", "1", "]", ",", "points", "[", ":", ",", "2", "]", ",", "marker", "=", "all_poss", "[", "n", "]", ",", "s", "=", "s", ",", "c", "=", "'c'", ")", "\n", "if", "joint_list", "[", "i", "]", "is", "not", "[", "]", ":", "\n", "            ", "for", "m", "in", "range", "(", "len", "(", "joint_list", "[", "i", "]", ")", ")", ":", "\n", "                ", "offset", "=", "offset_list", "[", "i", "]", "[", "m", "]", "\n", "joint", "=", "joint_list", "[", "i", "]", "[", "m", "]", "\n", "offset_norm", "=", "np", ".", "linalg", ".", "norm", "(", "offset", ",", "axis", "=", "1", ")", "\n", "idx", "=", "np", ".", "where", "(", "offset_norm", "<", "threshold", ")", "[", "0", "]", "\n", "ax", ".", "quiver", "(", "points", "[", "idx", ",", "0", "]", ",", "points", "[", "idx", ",", "1", "]", ",", "points", "[", "idx", ",", "2", "]", ",", "offset", "[", "idx", ",", "0", "]", ",", "offset", "[", "idx", ",", "1", "]", ",", "offset", "[", "idx", ",", "2", "]", ",", "color", "=", "c_set", "[", "i", "]", ")", "\n", "ax", ".", "plot3D", "(", "[", "joint", "[", "0", "]", "[", "0", ",", "0", "]", "-", "length", "*", "joint", "[", "1", "]", "[", "0", "]", ",", "joint", "[", "0", "]", "[", "0", ",", "0", "]", "+", "length", "*", "joint", "[", "1", "]", "[", "0", "]", "]", ",", "[", "joint", "[", "0", "]", "[", "0", ",", "1", "]", "-", "length", "*", "joint", "[", "1", "]", "[", "1", "]", ",", "joint", "[", "0", "]", "[", "0", ",", "1", "]", "+", "length", "*", "joint", "[", "1", "]", "[", "1", "]", "]", ",", "[", "joint", "[", "0", "]", "[", "0", ",", "2", "]", "-", "length", "*", "joint", "[", "1", "]", "[", "2", "]", ",", "joint", "[", "0", "]", "[", "0", ",", "2", "]", "+", "length", "*", "joint", "[", "1", "]", "[", "2", "]", "]", ",", "linewidth", "=", "lw", ",", "c", "=", "'blue'", ")", "\n", "# set_axes_equal(ax", "\n", "", "", "", "plt", ".", "title", "(", "title_name", ")", "\n", "plt", ".", "show", "(", ")", "\n", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.vis_utils.hist_show": [[470, 506], ["list", "len", "matplotlib.figure", "matplotlib.subplot", "enumerate", "matplotlib.title", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.legend", "matplotlib.show", "matplotlib.close", "range", "matplotlib.bar", "range", "plt.subplot.set_ylim", "plt.figure.savefig", "len", "int", "matplotlib.xticks", "len", "range", "len", "title_name.split", "plt.subplot.set_ylim", "os.path.exists", "os.makedirs", "len", "title_name.split", "plt.subplot.set_ylim", "plt.subplot.text", "plt.subplot.text", "title_name.split"], "function", ["None"], ["", "def", "hist_show", "(", "values", ",", "labels", ",", "tick_label", ",", "axes_label", ",", "title_name", ",", "total_width", "=", "0.5", ",", "dpi", "=", "300", ",", "save_fig", "=", "False", ",", "sub_name", "=", "'seen'", ")", ":", "\n", "    ", "x", "=", "list", "(", "range", "(", "len", "(", "values", "[", "0", "]", ")", ")", ")", "\n", "n", "=", "len", "(", "labels", ")", "\n", "width", "=", "total_width", "/", "n", "\n", "colors", "=", "[", "'r'", ",", "'b'", ",", "'g'", ",", "'k'", ",", "'y'", "]", "\n", "fig", "=", "plt", ".", "figure", "(", "figsize", "=", "(", "20", ",", "5", ")", ",", "dpi", "=", "dpi", ")", "\n", "ax", "=", "plt", ".", "subplot", "(", "111", ")", "\n", "\n", "for", "i", ",", "num_list", "in", "enumerate", "(", "values", ")", ":", "\n", "        ", "if", "i", "==", "int", "(", "n", "/", "2", ")", ":", "\n", "            ", "plt", ".", "xticks", "(", "x", ",", "tick_label", ",", "rotation", "=", "'vertical'", ",", "fontsize", "=", "5", ")", "\n", "", "plt", ".", "bar", "(", "x", ",", "num_list", ",", "width", "=", "width", ",", "label", "=", "labels", "[", "i", "]", ",", "fc", "=", "colors", "[", "i", "]", ")", "\n", "if", "len", "(", "x", ")", "<", "10", ":", "\n", "            ", "for", "j", "in", "range", "(", "len", "(", "x", ")", ")", ":", "\n", "                ", "if", "num_list", "[", "j", "]", "<", "0.30", ":", "\n", "                    ", "ax", ".", "text", "(", "x", "[", "j", "]", ",", "num_list", "[", "j", "]", ",", "'{0:0.04f}'", ".", "format", "(", "num_list", "[", "j", "]", ")", ",", "color", "=", "'black'", ",", "fontsize", "=", "2", ")", "\n", "", "else", ":", "\n", "                    ", "ax", ".", "text", "(", "x", "[", "j", "]", ",", "0.28", ",", "'{0:0.04f}'", ".", "format", "(", "num_list", "[", "j", "]", ")", ",", "color", "=", "'black'", ",", "fontsize", "=", "2", ")", "\n", "", "", "", "for", "j", "in", "range", "(", "len", "(", "x", ")", ")", ":", "\n", "            ", "x", "[", "j", "]", "=", "x", "[", "j", "]", "+", "width", "\n", "", "", "if", "title_name", ".", "split", "(", ")", "[", "0", "]", "==", "'rotation'", ":", "\n", "        ", "ax", ".", "set_ylim", "(", "0", ",", "30", ")", "\n", "", "elif", "title_name", ".", "split", "(", ")", "[", "0", "]", "==", "'translation'", ":", "\n", "        ", "ax", ".", "set_ylim", "(", "0", ",", "0.10", ")", "\n", "", "elif", "title_name", ".", "split", "(", ")", "[", "0", "]", "==", "'ADD'", ":", "\n", "        ", "ax", ".", "set_ylim", "(", "0", ",", "0.10", ")", "\n", "", "plt", ".", "title", "(", "title_name", ")", "\n", "plt", ".", "xlabel", "(", "axes_label", "[", "0", "]", ",", "fontsize", "=", "8", ",", "labelpad", "=", "0", ")", "\n", "plt", ".", "ylabel", "(", "axes_label", "[", "1", "]", ",", "fontsize", "=", "8", ",", "labelpad", "=", "5", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "if", "save_fig", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "'./results/test/'", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "'./results/test/'", ")", "\n", "", "fig", ".", "savefig", "(", "'./results/test/{}_{}.png'", ".", "format", "(", "title_name", ",", "sub_name", ")", ",", "pad_inches", "=", "0", ")", "\n", "", "plt", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.vis_utils.draw": [[508, 535], ["np.int32().reshape", "zip", "zip", "zip", "int", "int", "int", "cv2.line", "int", "int", "int", "cv2.line", "cv2.line", "cv2.line", "cv2.line", "cv2.line", "np.int32", "tuple", "tuple", "tuple", "tuple", "tuple", "tuple", "tuple", "tuple", "tuple", "tuple", "tuple", "tuple"], "function", ["None"], ["", "def", "draw", "(", "img", ",", "imgpts", ",", "axes", "=", "None", ",", "color", "=", "None", ")", ":", "\n", "    ", "imgpts", "=", "np", ".", "int32", "(", "imgpts", ")", ".", "reshape", "(", "-", "1", ",", "2", ")", "\n", "\n", "\n", "# draw ground layer in darker color", "\n", "color_ground", "=", "(", "int", "(", "color", "[", "0", "]", "*", "0.3", ")", ",", "int", "(", "color", "[", "1", "]", "*", "0.3", ")", ",", "int", "(", "color", "[", "2", "]", "*", "0.3", ")", ")", "\n", "for", "i", ",", "j", "in", "zip", "(", "[", "1", ",", "3", ",", "7", ",", "5", "]", ",", "[", "3", ",", "7", ",", "5", ",", "1", "]", ")", ":", "\n", "        ", "img", "=", "cv2", ".", "line", "(", "img", ",", "tuple", "(", "imgpts", "[", "i", "]", ")", ",", "tuple", "(", "imgpts", "[", "j", "]", ")", ",", "color_ground", ",", "2", ")", "\n", "\n", "\n", "# draw pillars in blue color", "\n", "", "color_pillar", "=", "(", "int", "(", "color", "[", "0", "]", "*", "0.6", ")", ",", "int", "(", "color", "[", "1", "]", "*", "0.6", ")", ",", "int", "(", "color", "[", "2", "]", "*", "0.6", ")", ")", "\n", "for", "i", ",", "j", "in", "zip", "(", "[", "0", ",", "2", ",", "6", ",", "4", "]", ",", "[", "1", ",", "3", ",", "7", ",", "5", "]", ")", ":", "\n", "        ", "img", "=", "cv2", ".", "line", "(", "img", ",", "tuple", "(", "imgpts", "[", "i", "]", ")", ",", "tuple", "(", "imgpts", "[", "j", "]", ")", ",", "color_pillar", ",", "2", ")", "\n", "\n", "\n", "# finally, draw top layer in color", "\n", "", "for", "i", ",", "j", "in", "zip", "(", "[", "0", ",", "2", ",", "6", ",", "4", "]", ",", "[", "2", ",", "6", ",", "4", ",", "0", "]", ")", ":", "\n", "        ", "img", "=", "cv2", ".", "line", "(", "img", ",", "tuple", "(", "imgpts", "[", "i", "]", ")", ",", "tuple", "(", "imgpts", "[", "j", "]", ")", ",", "color_pillar", ",", "2", ")", "\n", "\n", "# draw axes", "\n", "", "if", "axes", "is", "not", "None", ":", "\n", "        ", "img", "=", "cv2", ".", "line", "(", "img", ",", "tuple", "(", "axes", "[", "0", "]", ")", ",", "tuple", "(", "axes", "[", "1", "]", ")", ",", "(", "0", ",", "0", ",", "255", ")", ",", "3", ")", "\n", "img", "=", "cv2", ".", "line", "(", "img", ",", "tuple", "(", "axes", "[", "0", "]", ")", ",", "tuple", "(", "axes", "[", "3", "]", ")", ",", "(", "255", ",", "0", ",", "0", ")", ",", "3", ")", "\n", "img", "=", "cv2", ".", "line", "(", "img", ",", "tuple", "(", "axes", "[", "0", "]", ")", ",", "tuple", "(", "axes", "[", "2", "]", ")", ",", "(", "0", ",", "255", ",", "0", ")", ",", "3", ")", "## y last", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.vis_utils.draw_text": [[536, 572], ["cv2.getTextSize", "cv2.rectangle", "cv2.rectangle", "cv2.putText", "min", "min", "cv2.rectangle"], "function", ["None"], ["", "def", "draw_text", "(", "draw_image", ",", "bbox", ",", "text", ",", "draw_box", "=", "False", ")", ":", "\n", "    ", "fontFace", "=", "cv2", ".", "FONT_HERSHEY_TRIPLEX", "\n", "fontScale", "=", "1", "\n", "thickness", "=", "1", "\n", "\n", "retval", ",", "baseline", "=", "cv2", ".", "getTextSize", "(", "text", ",", "fontFace", ",", "fontScale", ",", "thickness", ")", "\n", "\n", "bbox_margin", "=", "10", "\n", "text_margin", "=", "10", "\n", "\n", "text_box_pos_tl", "=", "(", "min", "(", "bbox", "[", "1", "]", "+", "bbox_margin", ",", "635", "-", "retval", "[", "0", "]", "-", "2", "*", "text_margin", ")", ",", "min", "(", "bbox", "[", "2", "]", "+", "bbox_margin", ",", "475", "-", "retval", "[", "1", "]", "-", "2", "*", "text_margin", ")", ")", "\n", "text_box_pos_br", "=", "(", "text_box_pos_tl", "[", "0", "]", "+", "retval", "[", "0", "]", "+", "2", "*", "text_margin", ",", "text_box_pos_tl", "[", "1", "]", "+", "retval", "[", "1", "]", "+", "2", "*", "text_margin", ")", "\n", "\n", "# text_pose is the bottom-left corner of the text", "\n", "text_pos", "=", "(", "text_box_pos_tl", "[", "0", "]", "+", "text_margin", ",", "text_box_pos_br", "[", "1", "]", "-", "text_margin", "-", "3", ")", "\n", "\n", "if", "draw_box", ":", "\n", "        ", "cv2", ".", "rectangle", "(", "draw_image", ",", "\n", "(", "bbox", "[", "1", "]", ",", "bbox", "[", "0", "]", ")", ",", "\n", "(", "bbox", "[", "3", "]", ",", "bbox", "[", "2", "]", ")", ",", "\n", "(", "255", ",", "0", ",", "0", ")", ",", "2", ")", "\n", "\n", "", "cv2", ".", "rectangle", "(", "draw_image", ",", "\n", "text_box_pos_tl", ",", "\n", "text_box_pos_br", ",", "\n", "(", "255", ",", "0", ",", "0", ")", ",", "-", "1", ")", "\n", "\n", "cv2", ".", "rectangle", "(", "draw_image", ",", "\n", "text_box_pos_tl", ",", "\n", "text_box_pos_br", ",", "\n", "(", "0", ",", "0", ",", "0", ")", ",", "1", ")", "\n", "\n", "cv2", ".", "putText", "(", "draw_image", ",", "text", ",", "text_pos", ",", "\n", "fontFace", ",", "fontScale", ",", "(", "255", ",", "255", ",", "255", ")", ",", "thickness", ")", "\n", "\n", "return", "draw_image", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.vis_utils.plot_distribution": [[573, 589], ["matplotlib.figure", "matplotlib.hist", "matplotlib.grid", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "n.max", "matplotlib.ylim", "matplotlib.show", "matplotlib.text", "matplotlib.xlim", "np.ceil"], "function", ["None"], ["", "def", "plot_distribution", "(", "d", ",", "labelx", "=", "'Value'", ",", "labely", "=", "'Frequency'", ",", "title_name", "=", "'Mine'", ",", "dpi", "=", "200", ",", "xlimit", "=", "None", ",", "put_text", "=", "False", ")", ":", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", "dpi", "=", "dpi", ")", "\n", "n", ",", "bins", ",", "patches", "=", "plt", ".", "hist", "(", "x", "=", "d", ",", "bins", "=", "'auto'", ",", "color", "=", "'#0504aa'", ",", "\n", "alpha", "=", "0.7", ",", "rwidth", "=", "0.85", ")", "\n", "plt", ".", "grid", "(", "axis", "=", "'y'", ",", "alpha", "=", "0.75", ")", "\n", "plt", ".", "xlabel", "(", "labelx", ")", "\n", "plt", ".", "ylabel", "(", "labely", ")", "\n", "plt", ".", "title", "(", "title_name", ")", "\n", "if", "put_text", ":", "\n", "        ", "plt", ".", "text", "(", "23", ",", "45", ",", "r'$\\mu=15, b=3$'", ")", "\n", "", "maxfreq", "=", "n", ".", "max", "(", ")", "\n", "# Set a clean upper y-axis limit.", "\n", "plt", ".", "ylim", "(", "ymax", "=", "np", ".", "ceil", "(", "maxfreq", "/", "10", ")", "*", "10", "if", "maxfreq", "%", "10", "else", "maxfreq", "+", "10", ")", "\n", "if", "xlimit", "is", "not", "None", ":", "\n", "        ", "plt", ".", "xlim", "(", "xmin", "=", "xlimit", "[", "0", "]", ",", "xmax", "=", "xlimit", "[", "1", "]", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.vis_utils.viz_err_distri": [[590, 596], ["vis_utils.plot_distribution", "np.linalg.norm", "np.squeeze", "np.squeeze"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.vis_utils.plot_distribution"], ["", "def", "viz_err_distri", "(", "val_gt", ",", "val_pred", ",", "title_name", ")", ":", "\n", "    ", "if", "val_gt", ".", "shape", "[", "1", "]", ">", "1", ":", "\n", "        ", "err", "=", "np", ".", "linalg", ".", "norm", "(", "val_gt", "-", "val_pred", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "        ", "err", "=", "np", ".", "squeeze", "(", "val_gt", ")", "-", "np", ".", "squeeze", "(", "val_pred", ")", "\n", "", "plot_distribution", "(", "err", ",", "labelx", "=", "'L2 error'", ",", "labely", "=", "'Frequency'", ",", "title_name", "=", "title_name", ",", "dpi", "=", "160", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.data_utils.collect_file": [[45, 75], ["print", "os.listdir", "os.listdir", "glob.glob", "os.listdir", "os.listdir", "len", "os.listdir", "os.listdir", "os.listdir.sort", "print", "file.endswith", "open", "h5_list.append", "ft.write", "file.split"], "function", ["None"], ["def", "collect_file", "(", "root_dset", ",", "ctgy_objs", ",", "mode", "=", "'train'", ",", "selected_list", "=", "None", ")", ":", "\n", "# list rgb", "\n", "    ", "for", "name_obj", "in", "ctgy_objs", ":", "\n", "        ", "if", "mode", "==", "'train'", ":", "\n", "            ", "name_instances", "=", "os", ".", "listdir", "(", "root_dset", "+", "'/render/'", "+", "name_obj", ")", "\n", "", "elif", "mode", "==", "'demo'", ":", "\n", "            ", "name_instances", "=", "os", ".", "listdir", "(", "root_dset", "+", "'/demo/'", "+", "name_obj", ")", "\n", "", "print", "(", "'We have {} different instances'", ".", "format", "(", "len", "(", "name_instances", ")", ")", ")", "\n", "\n", "for", "instance", "in", "name_instances", ":", "\n", "            ", "if", "selected_list", "is", "not", "None", "and", "instance", "not", "in", "selected_list", ":", "\n", "                ", "continue", "\n", "", "if", "mode", "==", "'train'", ":", "\n", "                ", "directory", "=", "root_dset", "+", "'/render/'", "+", "name_obj", "+", "'/'", "+", "instance", "+", "'/*'", "\n", "", "elif", "mode", "==", "'demo'", ":", "\n", "                ", "directory", "=", "root_dset", "+", "'/demo/'", "+", "name_obj", "+", "'/'", "+", "instance", "+", "'/*'", "\n", "", "else", ":", "\n", "                ", "directory", "=", "root_dset", "+", "'/render/'", "+", "name_obj", "+", "'/'", "+", "instance", "+", "'/*'", "\n", "", "for", "dir_arti", "in", "glob", ".", "glob", "(", "directory", ")", ":", "\n", "                ", "h5_frames", "=", "os", ".", "listdir", "(", "dir_arti", "+", "'/rgb'", ")", "\n", "h5_frames", ".", "sort", "(", ")", "\n", "h5_list", "=", "[", "]", "\n", "for", "file", "in", "h5_frames", ":", "\n", "                    ", "if", "file", ".", "endswith", "(", "'.png'", ")", ":", "\n", "                        ", "h5_list", ".", "append", "(", "file", ".", "split", "(", "'.'", ")", "[", "0", "]", ")", "\n", "", "", "all_csv", "=", "dir_arti", "+", "'/all.txt'", "\n", "with", "open", "(", "all_csv", ",", "'w'", ")", "as", "ft", ":", "\n", "                  ", "for", "item", "in", "h5_list", ":", "\n", "                      ", "ft", ".", "write", "(", "'{}\\n'", ".", "format", "(", "item", ")", ")", "\n", "", "", "print", "(", "'done for {} {}'", ".", "format", "(", "instance", ",", "dir_arti", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.data_utils.split_dataset": [[76, 161], ["print", "print", "os.listdir", "os.listdir", "print", "random.shuffle", "print", "len", "len", "open", "open", "os.listdir", "os.listdir", "print", "random.shuffle", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "glob.glob", "glob.glob", "ft.write", "ft.write", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "glob.glob", "open", "len", "os.listdir.remove", "glob.glob", "print", "random.shuffle", "glob.glob", "print", "len", "glob.glob", "print", "random.shuffle", "ft.write", "len", "file.endswith", "file.endswith", "file.endswith", "h5_list.append", "h5_list.append", "len", "h5_list.append", "len", "len"], "function", ["None"], ["", "", "", "", "def", "split_dataset", "(", "root_dset", ",", "ctgy_objs", ",", "args", ",", "test_ins", ",", "spec_ins", "=", "[", "]", ",", "train_ins", "=", "None", ")", ":", "\n", "    ", "num_expr", "=", "args", ".", "num_expr", "\n", "if", "args", ".", "mode", "==", "'train'", "or", "args", ".", "mode", "==", "'test'", ":", "\n", "        ", "for", "name_obj", "in", "ctgy_objs", ":", "\n", "            ", "train_csv", "=", "root_dset", "+", "'/splits/{}/{}/train.txt'", ".", "format", "(", "name_obj", ",", "num_expr", ")", "\n", "test_csv", "=", "root_dset", "+", "'/splits/{}/{}/test.txt'", ".", "format", "(", "name_obj", ",", "num_expr", ")", "\n", "train_list", "=", "[", "]", "\n", "test_list", "=", "[", "]", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "root_dset", "+", "'/splits/{}/{}'", ".", "format", "(", "name_obj", ",", "num_expr", ")", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "root_dset", "+", "'/splits/{}/{}'", ".", "format", "(", "name_obj", ",", "num_expr", ")", ")", "\n", "", "name_instances", "=", "os", ".", "listdir", "(", "root_dset", "+", "'/hdf5/'", "+", "name_obj", ")", "\n", "print", "(", "'We have {} different instances'", ".", "format", "(", "len", "(", "name_instances", ")", ")", ",", "name_instances", ")", "\n", "random", ".", "shuffle", "(", "name_instances", ")", "\n", "rm_ins", "=", "[", "]", "\n", "ins_to_remove", "=", "test_ins", "+", "rm_ins", "\n", "print", "(", "ins_to_remove", ")", "\n", "for", "instance", "in", "ins_to_remove", ":", "\n", "                ", "if", "instance", "in", "name_instances", ":", "\n", "                    ", "name_instances", ".", "remove", "(", "instance", ")", "\n", "# remove tricycles", "\n", "", "", "if", "train_ins", "is", "None", ":", "\n", "                ", "train_ins", "=", "name_instances", "\n", "\n", "", "for", "instance", "in", "train_ins", ":", "\n", "                ", "if", "len", "(", "spec_ins", ")", ">", "0", "and", "instance", "in", "spec_ins", ":", "\n", "                    ", "continue", "\n", "", "for", "dir_arti", "in", "glob", ".", "glob", "(", "root_dset", "+", "'/hdf5/'", "+", "name_obj", "+", "'/train/'", "+", "instance", "+", "'/*'", ")", ":", "\n", "                    ", "h5_frames", "=", "glob", ".", "glob", "(", "dir_arti", "+", "'/*'", ")", "\n", "h5_list", "=", "[", "]", "\n", "for", "file", "in", "h5_frames", ":", "\n", "                        ", "if", "file", ".", "endswith", "(", "'.h5'", ")", ":", "\n", "                            ", "h5_list", ".", "append", "(", "file", ")", "\n", "", "", "print", "(", "'training h5 has {} for {} {}'", ".", "format", "(", "len", "(", "h5_list", ")", "-", "1", ",", "instance", ",", "dir_arti", ")", ")", "\n", "random", ".", "shuffle", "(", "h5_list", ")", "\n", "try", ":", "\n", "                        ", "train_list", "=", "train_list", "+", "h5_list", "[", ":", "-", "1", "]", "\n", "test_list", "=", "test_list", "+", "[", "h5_list", "[", "-", "1", "]", "]", "\n", "", "except", ":", "\n", "                        ", "continue", "\n", "\n", "", "", "", "for", "instance", "in", "test_ins", ":", "\n", "                ", "for", "dir_arti", "in", "glob", ".", "glob", "(", "root_dset", "+", "'/hdf5/'", "+", "name_obj", "+", "'/test/'", "+", "instance", "+", "'/*'", ")", ":", "\n", "                    ", "h5_frames", "=", "glob", ".", "glob", "(", "dir_arti", "+", "'/*'", ")", "\n", "h5_list", "=", "[", "]", "\n", "for", "file", "in", "h5_frames", ":", "\n", "                        ", "if", "file", ".", "endswith", "(", "'.h5'", ")", ":", "\n", "                            ", "h5_list", ".", "append", "(", "file", ")", "\n", "", "", "print", "(", "'testing h5 has {} for {} {}'", ".", "format", "(", "len", "(", "h5_list", ")", ",", "instance", ",", "dir_arti", ")", ")", "\n", "test_list", "=", "test_list", "+", "h5_list", "\n", "", "", "", "print", "(", "'train_list: \\n'", ",", "len", "(", "train_list", ")", ")", "\n", "print", "(", "'test list: \\n'", ",", "len", "(", "test_list", ")", ")", "\n", "with", "open", "(", "train_csv", ",", "'w'", ")", "as", "ft", ":", "\n", "          ", "for", "item", "in", "train_list", ":", "\n", "              ", "ft", ".", "write", "(", "'{}\\n'", ".", "format", "(", "item", ")", ")", "\n", "\n", "", "", "with", "open", "(", "test_csv", ",", "'w'", ")", "as", "ft", ":", "\n", "          ", "for", "item", "in", "test_list", ":", "\n", "              ", "ft", ".", "write", "(", "'{}\\n'", ".", "format", "(", "item", ")", ")", "\n", "", "", "", "else", ":", "\n", "        ", "for", "name_obj", "in", "ctgy_objs", ":", "\n", "            ", "demo_csv", "=", "root_dset", "+", "'/splits/{}/{}/demo.txt'", ".", "format", "(", "name_obj", ",", "num_expr", ")", "\n", "demo_list", "=", "[", "]", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "root_dset", "+", "'/splits/{}/{}'", ".", "format", "(", "name_obj", ",", "num_expr", ")", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "root_dset", "+", "'/splits/{}/{}'", ".", "format", "(", "name_obj", ",", "num_expr", ")", ")", "\n", "", "name_instances", "=", "os", ".", "listdir", "(", "root_dset", "+", "'/hdf5_demo/'", "+", "name_obj", ")", "\n", "print", "(", "'We have {} different instances'", ".", "format", "(", "len", "(", "name_instances", ")", ")", ")", "\n", "random", ".", "shuffle", "(", "name_instances", ")", "\n", "# test_ins  = ['0001']", "\n", "# remove tricycles", "\n", "demo_ins", "=", "name_instances", "\n", "\n", "for", "instance", "in", "demo_ins", ":", "\n", "                ", "for", "dir_arti", "in", "glob", ".", "glob", "(", "root_dset", "+", "'/hdf5_demo/'", "+", "name_obj", "+", "'/'", "+", "instance", "+", "'/*'", ")", ":", "\n", "                    ", "h5_frames", "=", "glob", ".", "glob", "(", "dir_arti", "+", "'/*'", ")", "\n", "h5_list", "=", "[", "]", "\n", "for", "file", "in", "h5_frames", ":", "\n", "                        ", "if", "file", ".", "endswith", "(", "'.h5'", ")", ":", "\n", "                            ", "h5_list", ".", "append", "(", "file", ")", "\n", "", "", "print", "(", "'training h5 has {}'", ".", "format", "(", "len", "(", "h5_list", ")", "-", "1", ")", ")", "\n", "random", ".", "shuffle", "(", "h5_list", ")", "\n", "demo_list", "=", "demo_list", "+", "h5_list", "\n", "\n", "", "", "with", "open", "(", "demo_csv", ",", "'w'", ")", "as", "ft", ":", "\n", "              ", "for", "item", "in", "demo_list", ":", "\n", "                  ", "ft", ".", "write", "(", "'{}\\n'", ".", "format", "(", "item", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.data_utils.write_pointcloud": [[163, 184], ["open", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "open.write", "range", "open.close", "bytes", "bytes", "bytes", "bytes", "bytes", "bytes", "bytes", "bytes", "bytes", "bytes", "open.write", "numpy.ones().astype", "bytearray", "struct.pack", "numpy.ones", "rgb_points[].tostring", "rgb_points[].tostring", "rgb_points[].tostring"], "function", ["None"], ["", "", "", "", "", "def", "write_pointcloud", "(", "filename", ",", "xyz_points", ",", "rgb_points", "=", "None", ")", ":", "\n", "    ", "assert", "xyz_points", ".", "shape", "[", "1", "]", "==", "3", ",", "'Input XYZ points should be Nx3 float array'", "\n", "if", "rgb_points", "is", "None", ":", "\n", "        ", "rgb_points", "=", "np", ".", "ones", "(", "xyz_points", ".", "shape", ")", ".", "astype", "(", "np", ".", "uint8", ")", "*", "255", "\n", "", "assert", "xyz_points", ".", "shape", "==", "rgb_points", ".", "shape", ",", "'Input RGB colors should be Nx3 float array and have same size as input XYZ points'", "\n", "# Write header of .ply file", "\n", "fid", "=", "open", "(", "filename", ",", "'wb'", ")", "\n", "fid", ".", "write", "(", "bytes", "(", "'ply\\n'", ",", "'utf-8'", ")", ")", "\n", "fid", ".", "write", "(", "bytes", "(", "'format binary_little_endian 1.0\\n'", ",", "'utf-8'", ")", ")", "\n", "fid", ".", "write", "(", "bytes", "(", "'element vertex %d\\n'", "%", "xyz_points", ".", "shape", "[", "0", "]", ",", "'utf-8'", ")", ")", "\n", "fid", ".", "write", "(", "bytes", "(", "'property float x\\n'", ",", "'utf-8'", ")", ")", "\n", "fid", ".", "write", "(", "bytes", "(", "'property float y\\n'", ",", "'utf-8'", ")", ")", "\n", "fid", ".", "write", "(", "bytes", "(", "'property float z\\n'", ",", "'utf-8'", ")", ")", "\n", "fid", ".", "write", "(", "bytes", "(", "'property uchar red\\n'", ",", "'utf-8'", ")", ")", "\n", "fid", ".", "write", "(", "bytes", "(", "'property uchar green\\n'", ",", "'utf-8'", ")", ")", "\n", "fid", ".", "write", "(", "bytes", "(", "'property uchar blue\\n'", ",", "'utf-8'", ")", ")", "\n", "fid", ".", "write", "(", "bytes", "(", "'end_header\\n'", ",", "'utf-8'", ")", ")", "\n", "# Write 3D points to .ply file", "\n", "for", "i", "in", "range", "(", "xyz_points", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "fid", ".", "write", "(", "bytearray", "(", "struct", ".", "pack", "(", "\"fffccc\"", ",", "xyz_points", "[", "i", ",", "0", "]", ",", "xyz_points", "[", "i", ",", "1", "]", ",", "xyz_points", "[", "i", ",", "2", "]", ",", "rgb_points", "[", "i", ",", "0", "]", ".", "tostring", "(", ")", ",", "rgb_points", "[", "i", ",", "1", "]", ".", "tostring", "(", ")", ",", "rgb_points", "[", "i", ",", "2", "]", ".", "tostring", "(", ")", ")", ")", ")", "\n", "", "fid", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.data_utils.get_pose": [[186, 229], ["open", "yaml.load", "numpy.array", "numpy.array", "range", "range", "numpy.array().reshape", "numpy.array().reshape", "numpy.array", "range", "numpy.dot", "numpy.array().astype", "numpy.array().astype", "lib.transformations.quaternion_matrix", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.quaternion_matrix"], ["", "def", "get_pose", "(", "root_dset", ",", "obj_category", ",", "item", ",", "art_index", ",", "frame_order", ",", "mode", "=", "'train'", ",", "num_parts", "=", "5", ")", ":", "\n", "# pose infos", "\n", "    ", "parts_world_pos", "=", "[", "None", "]", "*", "num_parts", "\n", "parts_world_orn", "=", "[", "None", "]", "*", "num_parts", "\n", "parts_model2world", "=", "[", "None", "]", "*", "num_parts", "\n", "if", "mode", "==", "'demo'", ":", "\n", "        ", "sub_dir0", "=", "root_dset", "+", "'/demo/'", "+", "obj_category", "+", "'/'", "+", "item", "+", "'/'", "+", "art_index", "\n", "", "else", ":", "\n", "        ", "sub_dir0", "=", "root_dset", "+", "'/render/'", "+", "obj_category", "+", "'/'", "+", "item", "+", "'/'", "+", "art_index", "\n", "", "meta_file", "=", "open", "(", "sub_dir0", "+", "'/gt.yml'", ",", "'r'", ")", "\n", "meta_instance", "=", "yaml", ".", "load", "(", "meta_file", ")", "\n", "pose_dict", "=", "meta_instance", "[", "'frame_{}'", ".", "format", "(", "frame_order", ")", "]", "\n", "viewMat", "=", "np", ".", "array", "(", "pose_dict", "[", "'viewMat'", "]", ")", ".", "reshape", "(", "4", ",", "4", ")", ".", "T", "\n", "projMat", "=", "np", ".", "array", "(", "pose_dict", "[", "'projMat'", "]", ")", ".", "reshape", "(", "4", ",", "4", ")", ".", "T", "\n", "#", "\n", "parts_world_pos", "[", "0", "]", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "parts_world_orn", "[", "0", "]", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", ",", "1", "]", ")", "\n", "for", "link", "in", "range", "(", "0", ",", "num_parts", ")", ":", "\n", "# parts_urdf_box[link] = np.array(urdf_dict['link']['box'][link])", "\n", "        ", "if", "link", ">", "0", ":", "\n", "            ", "parts_world_pos", "[", "link", "]", "=", "np", ".", "array", "(", "pose_dict", "[", "'obj'", "]", "[", "link", "-", "1", "]", "[", "4", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "parts_world_orn", "[", "link", "]", "=", "np", ".", "array", "(", "pose_dict", "[", "'obj'", "]", "[", "link", "-", "1", "]", "[", "5", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "# manual correction", "\n", "", "", "if", "obj_category", "==", "'bike'", ":", "\n", "        ", "parts_world_pos", "[", "1", "]", ",", "parts_world_pos", "[", "2", "]", "=", "parts_world_pos", "[", "2", "]", ",", "parts_world_pos", "[", "1", "]", "\n", "parts_world_orn", "[", "1", "]", ",", "parts_world_orn", "[", "2", "]", "=", "parts_world_orn", "[", "2", "]", ",", "parts_world_orn", "[", "1", "]", "\n", "\n", "# target rotation, translation, and target points", "\n", "", "for", "k", "in", "range", "(", "num_parts", ")", ":", "\n", "# matrix computation", "\n", "        ", "center_world_orn", "=", "parts_world_orn", "[", "k", "]", "\n", "center_world_orn", "=", "np", ".", "array", "(", "[", "center_world_orn", "[", "3", "]", ",", "center_world_orn", "[", "0", "]", ",", "center_world_orn", "[", "1", "]", ",", "center_world_orn", "[", "2", "]", "]", ")", "\n", "my_model2world_r", "=", "quaternion_matrix", "(", "center_world_orn", ")", "[", ":", "4", ",", ":", "4", "]", "# [w, x, y, z]", "\n", "my_model2world_t", "=", "parts_world_pos", "[", "k", "]", "\n", "my_model2world_mat", "=", "my_model2world_r", "\n", "for", "m", "in", "range", "(", "3", ")", ":", "\n", "            ", "my_model2world_mat", "[", "m", ",", "3", "]", "=", "my_model2world_t", "[", "m", "]", "\n", "", "my_world2camera_mat", "=", "viewMat", "\n", "my_camera2clip_mat", "=", "projMat", "\n", "my_model2camera_mat", "=", "np", ".", "dot", "(", "my_world2camera_mat", ",", "my_model2world_mat", ")", "\n", "parts_model2world", "[", "k", "]", "=", "my_model2world_mat", "\n", "\n", "", "return", "parts_model2world", ",", "viewMat", ",", "projMat", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.data_utils.get_urdf_mobility": [[230, 351], ["xml.parse", "len", "ET.parse.getroot", "tree_urdf.getroot.iter", "tree_urdf.getroot.iter", "ET.parse.findall", "link.iter", "int", "joint.iter", "joint.iter", "joint.iter", "joint.iter", "joint.iter", "enumerate", "enumerate", "enumerate", "enumerate", "enumerate", "enumerate", "enumerate", "visual.iter", "visual.iter", "print", "print", "print", "print", "print", "int", "geometry.iter", "joint.attrib[].split", "float", "float", "float", "len", "print", "print", "len", "print", "print", "list_xyz[].append", "list_xyz[].append", "list_rpy[].append", "list_rpy[].append", "int", "int", "float", "float", "axis.attrib[].split", "link.attrib[].split", "list_obj[].append", "list_obj[].append", "origin.attrib[].split", "origin.attrib[].split", "float", "float", "link_name.split", "link_name.split", "origin.attrib[].split", "origin.attrib[].split"], "function", ["None"], ["", "def", "get_urdf_mobility", "(", "inpath", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "urdf_ins", "=", "{", "}", "\n", "tree_urdf", "=", "ET", ".", "parse", "(", "inpath", "+", "\"/mobility.urdf\"", ")", "# todo", "\n", "num_real_links", "=", "len", "(", "tree_urdf", ".", "findall", "(", "'link'", ")", ")", "\n", "root_urdf", "=", "tree_urdf", ".", "getroot", "(", ")", "\n", "rpy_xyz", "=", "{", "}", "\n", "list_xyz", "=", "[", "None", "]", "*", "num_real_links", "\n", "list_rpy", "=", "[", "None", "]", "*", "num_real_links", "\n", "list_box", "=", "[", "None", "]", "*", "num_real_links", "\n", "list_obj", "=", "[", "None", "]", "*", "num_real_links", "\n", "# ['obj'] ['link/joint']['xyz/rpy'] [0, 1, 2, 3, 4]", "\n", "num_links", "=", "0", "\n", "for", "link", "in", "root_urdf", ".", "iter", "(", "'link'", ")", ":", "\n", "        ", "num_links", "+=", "1", "\n", "index_link", "=", "None", "\n", "if", "link", ".", "attrib", "[", "'name'", "]", "==", "'base'", ":", "\n", "            ", "index_link", "=", "0", "\n", "", "else", ":", "\n", "            ", "index_link", "=", "int", "(", "link", ".", "attrib", "[", "'name'", "]", ".", "split", "(", "'_'", ")", "[", "1", "]", ")", "+", "1", "# since the name is base, link_0, link_1", "\n", "", "list_xyz", "[", "index_link", "]", "=", "[", "]", "\n", "list_rpy", "[", "index_link", "]", "=", "[", "]", "\n", "list_obj", "[", "index_link", "]", "=", "[", "]", "\n", "for", "visual", "in", "link", ".", "iter", "(", "'visual'", ")", ":", "\n", "            ", "for", "origin", "in", "visual", ".", "iter", "(", "'origin'", ")", ":", "\n", "                ", "if", "'xyz'", "in", "origin", ".", "attrib", ":", "\n", "                    ", "list_xyz", "[", "index_link", "]", ".", "append", "(", "[", "float", "(", "x", ")", "for", "x", "in", "origin", ".", "attrib", "[", "'xyz'", "]", ".", "split", "(", ")", "]", ")", "\n", "", "else", ":", "\n", "                    ", "list_xyz", "[", "index_link", "]", ".", "append", "(", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "", "if", "'rpy'", "in", "origin", ".", "attrib", ":", "\n", "                    ", "list_rpy", "[", "index_link", "]", ".", "append", "(", "[", "float", "(", "x", ")", "for", "x", "in", "origin", ".", "attrib", "[", "'rpy'", "]", ".", "split", "(", ")", "]", ")", "\n", "", "else", ":", "\n", "                    ", "list_rpy", "[", "index_link", "]", ".", "append", "(", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "", "", "for", "geometry", "in", "visual", ".", "iter", "(", "'geometry'", ")", ":", "\n", "                ", "for", "mesh", "in", "geometry", ".", "iter", "(", "'mesh'", ")", ":", "\n", "                    ", "if", "'home'", "in", "mesh", ".", "attrib", "[", "'filename'", "]", "or", "'work'", "in", "mesh", ".", "attrib", "[", "'filename'", "]", ":", "\n", "                        ", "list_obj", "[", "index_link", "]", ".", "append", "(", "mesh", ".", "attrib", "[", "'filename'", "]", ")", "\n", "", "else", ":", "\n", "                        ", "list_obj", "[", "index_link", "]", ".", "append", "(", "inpath", "+", "'/'", "+", "mesh", ".", "attrib", "[", "'filename'", "]", ")", "\n", "\n", "", "", "", "", "", "rpy_xyz", "[", "'xyz'", "]", "=", "list_xyz", "\n", "rpy_xyz", "[", "'rpy'", "]", "=", "list_rpy", "# here it is empty list", "\n", "urdf_ins", "[", "'link'", "]", "=", "rpy_xyz", "\n", "urdf_ins", "[", "'obj_name'", "]", "=", "list_obj", "\n", "\n", "rpy_xyz", "=", "{", "}", "\n", "list_type", "=", "[", "None", "]", "*", "(", "num_real_links", "-", "1", ")", "\n", "list_parent", "=", "[", "None", "]", "*", "(", "num_real_links", "-", "1", ")", "\n", "list_child", "=", "[", "None", "]", "*", "(", "num_real_links", "-", "1", ")", "\n", "list_xyz", "=", "[", "None", "]", "*", "(", "num_real_links", "-", "1", ")", "\n", "list_rpy", "=", "[", "None", "]", "*", "(", "num_real_links", "-", "1", ")", "\n", "list_axis", "=", "[", "None", "]", "*", "(", "num_real_links", "-", "1", ")", "\n", "list_limit", "=", "[", "[", "0", ",", "0", "]", "]", "*", "(", "num_real_links", "-", "1", ")", "\n", "# here we still have to read the URDF file", "\n", "for", "joint", "in", "root_urdf", ".", "iter", "(", "'joint'", ")", ":", "\n", "        ", "joint_index", "=", "int", "(", "joint", ".", "attrib", "[", "'name'", "]", ".", "split", "(", "'_'", ")", "[", "1", "]", ")", "\n", "list_type", "[", "joint_index", "]", "=", "joint", ".", "attrib", "[", "'type'", "]", "\n", "\n", "for", "parent", "in", "joint", ".", "iter", "(", "'parent'", ")", ":", "\n", "            ", "link_name", "=", "parent", ".", "attrib", "[", "'link'", "]", "\n", "if", "link_name", "==", "'base'", ":", "\n", "                ", "link_index", "=", "0", "\n", "", "else", ":", "\n", "                ", "link_index", "=", "int", "(", "link_name", ".", "split", "(", "'_'", ")", "[", "1", "]", ")", "+", "1", "\n", "", "list_parent", "[", "joint_index", "]", "=", "link_index", "\n", "", "for", "child", "in", "joint", ".", "iter", "(", "'child'", ")", ":", "\n", "            ", "link_name", "=", "child", ".", "attrib", "[", "'link'", "]", "\n", "if", "link_name", "==", "'base'", ":", "\n", "                ", "link_index", "=", "0", "\n", "", "else", ":", "\n", "                ", "link_index", "=", "int", "(", "link_name", ".", "split", "(", "'_'", ")", "[", "1", "]", ")", "+", "1", "\n", "", "list_child", "[", "joint_index", "]", "=", "link_index", "\n", "", "for", "origin", "in", "joint", ".", "iter", "(", "'origin'", ")", ":", "\n", "            ", "if", "'xyz'", "in", "origin", ".", "attrib", ":", "\n", "                ", "list_xyz", "[", "joint_index", "]", "=", "[", "float", "(", "x", ")", "for", "x", "in", "origin", ".", "attrib", "[", "'xyz'", "]", ".", "split", "(", ")", "]", "\n", "", "else", ":", "\n", "                ", "list_xyz", "[", "joint_index", "]", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "", "if", "'rpy'", "in", "origin", ".", "attrib", ":", "\n", "                ", "list_rpy", "[", "joint_index", "]", "=", "[", "float", "(", "x", ")", "for", "x", "in", "origin", ".", "attrib", "[", "'rpy'", "]", ".", "split", "(", ")", "]", "\n", "", "else", ":", "\n", "                ", "list_rpy", "[", "joint_index", "]", "=", "[", "0", ",", "0", ",", "0", "]", "\n", "", "", "for", "axis", "in", "joint", ".", "iter", "(", "'axis'", ")", ":", "# we must have", "\n", "            ", "list_axis", "[", "joint_index", "]", "=", "[", "float", "(", "x", ")", "for", "x", "in", "axis", ".", "attrib", "[", "'xyz'", "]", ".", "split", "(", ")", "]", "\n", "", "for", "limit", "in", "joint", ".", "iter", "(", "'limit'", ")", ":", "\n", "            ", "list_limit", "[", "joint_index", "]", "=", "[", "float", "(", "limit", ".", "attrib", "[", "'lower'", "]", ")", ",", "float", "(", "limit", ".", "attrib", "[", "'upper'", "]", ")", "]", "\n", "\n", "", "", "rpy_xyz", "[", "'type'", "]", "=", "list_type", "\n", "rpy_xyz", "[", "'parent'", "]", "=", "list_parent", "\n", "rpy_xyz", "[", "'child'", "]", "=", "list_child", "\n", "rpy_xyz", "[", "'xyz'", "]", "=", "list_xyz", "\n", "rpy_xyz", "[", "'rpy'", "]", "=", "list_rpy", "\n", "rpy_xyz", "[", "'axis'", "]", "=", "list_axis", "\n", "rpy_xyz", "[", "'limit'", "]", "=", "list_limit", "\n", "\n", "\n", "urdf_ins", "[", "'joint'", "]", "=", "rpy_xyz", "\n", "urdf_ins", "[", "'num_links'", "]", "=", "num_real_links", "\n", "if", "verbose", ":", "\n", "        ", "for", "j", ",", "pos", "in", "enumerate", "(", "urdf_ins", "[", "'link'", "]", "[", "'xyz'", "]", ")", ":", "\n", "            ", "if", "len", "(", "pos", ")", ">", "3", ":", "\n", "                ", "print", "(", "'link {} xyz: '", ".", "format", "(", "j", ")", ",", "pos", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'link {} xyz: '", ".", "format", "(", "j", ")", ",", "pos", ")", "\n", "", "", "for", "j", ",", "orient", "in", "enumerate", "(", "urdf_ins", "[", "'link'", "]", "[", "'rpy'", "]", ")", ":", "\n", "            ", "if", "len", "(", "orient", ")", ">", "3", ":", "\n", "                ", "print", "(", "'link {} rpy: '", ".", "format", "(", "j", ")", ",", "orient", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'link {} rpy: '", ".", "format", "(", "j", ")", ",", "orient", ")", "\n", "# for joint", "\n", "", "", "for", "j", ",", "pos", "in", "enumerate", "(", "urdf_ins", "[", "'joint'", "]", "[", "'xyz'", "]", ")", ":", "\n", "            ", "print", "(", "'joint {} xyz: '", ".", "format", "(", "j", ")", ",", "pos", ")", "\n", "", "for", "j", ",", "orient", "in", "enumerate", "(", "urdf_ins", "[", "'joint'", "]", "[", "'rpy'", "]", ")", ":", "\n", "            ", "print", "(", "'joint {} rpy: '", ".", "format", "(", "j", ")", ",", "orient", ")", "\n", "", "for", "j", ",", "orient", "in", "enumerate", "(", "urdf_ins", "[", "'joint'", "]", "[", "'axis'", "]", ")", ":", "\n", "            ", "print", "(", "'joint {} axis: '", ".", "format", "(", "j", ")", ",", "orient", ")", "\n", "", "for", "j", ",", "child", "in", "enumerate", "(", "urdf_ins", "[", "'joint'", "]", "[", "'child'", "]", ")", ":", "\n", "            ", "print", "(", "'joint {} has child link: '", ".", "format", "(", "j", ")", ",", "child", ")", "\n", "", "for", "j", ",", "parent", "in", "enumerate", "(", "urdf_ins", "[", "'joint'", "]", "[", "'parent'", "]", ")", ":", "\n", "            ", "print", "(", "'joint {} has parent link: '", ".", "format", "(", "j", ")", ",", "parent", ")", "\n", "# plot_lines(urdf_ins['joint']['axis'])", "\n", "\n", "", "", "return", "urdf_ins", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.data_utils.get_urdf": [[353, 414], ["xml.parse", "ET.parse.getroot", "tree_urdf.getroot.iter", "tree_urdf.getroot.iter", "link.iter", "int", "int", "joint.iter", "joint.iter", "len", "int", "visual.iter", "visual.iter", "os.listdir", "os.listdir", "geometry.iter", "joint.attrib[].split", "joint.attrib[].split", "float", "float", "float", "float", "float", "origin.attrib[].split", "origin.attrib[].split", "axis.attrib[].split", "origin.attrib[].split", "origin.attrib[].split"], "function", ["None"], ["", "def", "get_urdf", "(", "inpath", ",", "num_real_links", "=", "None", ")", ":", "\n", "    ", "urdf_ins", "=", "{", "}", "\n", "# urdf parameters", "\n", "tree_urdf", "=", "ET", ".", "parse", "(", "inpath", "+", "\"/syn.urdf\"", ")", "# todo", "\n", "if", "num_real_links", "is", "None", ":", "\n", "        ", "num_real_links", "=", "len", "(", "os", ".", "listdir", "(", "inpath", ")", ")", "-", "1", "# todo", "\n", "", "root_urdf", "=", "tree_urdf", ".", "getroot", "(", ")", "\n", "rpy_xyz", "=", "{", "}", "\n", "list_xyz", "=", "[", "None", "]", "*", "num_real_links", "\n", "list_rpy", "=", "[", "None", "]", "*", "num_real_links", "\n", "list_box", "=", "[", "None", "]", "*", "num_real_links", "\n", "list_obj", "=", "[", "None", "]", "*", "num_real_links", "\n", "# ['obj'] ['link/joint']['xyz/rpy'] [0, 1, 2, 3, 4]", "\n", "num_links", "=", "0", "\n", "for", "link", "in", "root_urdf", ".", "iter", "(", "'link'", ")", ":", "\n", "        ", "num_links", "+=", "1", "\n", "index_link", "=", "None", "\n", "if", "link", ".", "attrib", "[", "'name'", "]", "==", "'base_link'", ":", "\n", "            ", "index_link", "=", "0", "\n", "", "else", ":", "\n", "            ", "index_link", "=", "int", "(", "link", ".", "attrib", "[", "'name'", "]", ")", "\n", "", "for", "visual", "in", "link", ".", "iter", "(", "'visual'", ")", ":", "\n", "            ", "for", "origin", "in", "visual", ".", "iter", "(", "'origin'", ")", ":", "\n", "                ", "list_xyz", "[", "index_link", "]", "=", "[", "float", "(", "x", ")", "for", "x", "in", "origin", ".", "attrib", "[", "'xyz'", "]", ".", "split", "(", ")", "]", "\n", "list_rpy", "[", "index_link", "]", "=", "[", "float", "(", "x", ")", "for", "x", "in", "origin", ".", "attrib", "[", "'rpy'", "]", ".", "split", "(", ")", "]", "\n", "", "for", "geometry", "in", "visual", ".", "iter", "(", "'geometry'", ")", ":", "\n", "                ", "for", "mesh", "in", "geometry", ".", "iter", "(", "'mesh'", ")", ":", "\n", "                    ", "list_obj", "[", "index_link", "]", "=", "mesh", ".", "attrib", "[", "'filename'", "]", "\n", "\n", "", "", "", "", "rpy_xyz", "[", "'xyz'", "]", "=", "list_xyz", "\n", "rpy_xyz", "[", "'rpy'", "]", "=", "list_rpy", "\n", "urdf_ins", "[", "'link'", "]", "=", "rpy_xyz", "\n", "urdf_ins", "[", "'obj_name'", "]", "=", "list_obj", "\n", "\n", "rpy_xyz", "=", "{", "}", "\n", "list_xyz", "=", "[", "None", "]", "*", "num_real_links", "\n", "list_rpy", "=", "[", "None", "]", "*", "num_real_links", "\n", "list_axis", "=", "[", "None", "]", "*", "num_real_links", "\n", "list_type", "=", "[", "None", "]", "*", "num_real_links", "\n", "list_part", "=", "[", "None", "]", "*", "num_real_links", "\n", "# here we still have to read the URDF file", "\n", "for", "joint", "in", "root_urdf", ".", "iter", "(", "'joint'", ")", ":", "\n", "        ", "index_child", "=", "int", "(", "joint", ".", "attrib", "[", "'name'", "]", ".", "split", "(", "'_'", ")", "[", "-", "1", "]", ")", "\n", "index_parent", "=", "int", "(", "joint", ".", "attrib", "[", "'name'", "]", ".", "split", "(", "'_'", ")", "[", "0", "]", ")", "\n", "list_type", "[", "index_child", "]", "=", "joint", ".", "attrib", "[", "'type'", "]", "\n", "list_part", "[", "index_child", "]", "=", "index_parent", "\n", "for", "origin", "in", "joint", ".", "iter", "(", "'origin'", ")", ":", "\n", "            ", "list_xyz", "[", "index_child", "]", "=", "[", "float", "(", "x", ")", "for", "x", "in", "origin", ".", "attrib", "[", "'xyz'", "]", ".", "split", "(", ")", "]", "\n", "list_rpy", "[", "index_child", "]", "=", "[", "float", "(", "x", ")", "for", "x", "in", "origin", ".", "attrib", "[", "'rpy'", "]", ".", "split", "(", ")", "]", "\n", "", "for", "axis", "in", "joint", ".", "iter", "(", "'axis'", ")", ":", "\n", "            ", "list_axis", "[", "index_child", "]", "=", "[", "float", "(", "x", ")", "for", "x", "in", "axis", ".", "attrib", "[", "'xyz'", "]", ".", "split", "(", ")", "]", "\n", "", "", "rpy_xyz", "[", "'xyz'", "]", "=", "list_xyz", "\n", "rpy_xyz", "[", "'rpy'", "]", "=", "list_rpy", "\n", "rpy_xyz", "[", "'axis'", "]", "=", "list_axis", "\n", "rpy_xyz", "[", "'type'", "]", "=", "list_type", "\n", "rpy_xyz", "[", "'parent'", "]", "=", "list_part", "\n", "\n", "urdf_ins", "[", "'joint'", "]", "=", "rpy_xyz", "\n", "urdf_ins", "[", "'num_links'", "]", "=", "num_links", "\n", "\n", "return", "urdf_ins", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.data_utils.fetch_gt_bmvc": [[415, 446], ["basename.split", "range", "enumerate", "info_files.append", "open", "fp.readline", "numpy.eye", "numpy.zeros", "fp.readline", "range", "fp.readline", "fp.readline", "len", "fp.readline", "len", "float", "len", "float", "fp.readline.strip", "fp.readline.strip", "float", "fp.readline.strip", "fp.readline.strip", "fp.readline.strip().split", "fp.readline.strip", "fp.readline.strip", "fp.readline.strip().split", "fp.readline.strip().split", "fp.readline.strip", "fp.readline.strip", "fp.readline.strip"], "function", ["None"], ["", "def", "fetch_gt_bmvc", "(", "basepath", ",", "basename", ",", "num_parts", "=", "2", ")", ":", "\n", "    ", "base_infos", "=", "basename", ".", "split", "(", "'_'", ")", "\n", "# Laptop_Seq_1_00020.h5", "\n", "pose_dict", "=", "{", "}", "\n", "BB_dict", "=", "{", "}", "\n", "info_files", "=", "[", "]", "\n", "for", "k", "in", "range", "(", "num_parts", ")", ":", "\n", "        ", "info_files", ".", "append", "(", "basepath", "+", "'/{0}_{1}_{2}/info/info_{3}_{4:03d}.txt'", ".", "format", "(", "base_infos", "[", "0", "]", ",", "base_infos", "[", "1", "]", ",", "base_infos", "[", "2", "]", ",", "base_infos", "[", "3", "]", ",", "k", ")", ")", "\n", "# print(info_files)", "\n", "", "for", "k", ",", "info_file", "in", "enumerate", "(", "info_files", ")", ":", "\n", "        ", "with", "open", "(", "info_file", ",", "\"r\"", ",", "errors", "=", "'replace'", ")", "as", "fp", ":", "\n", "            ", "line", "=", "fp", ".", "readline", "(", ")", "\n", "cnt", "=", "1", "\n", "viewMat", "=", "np", ".", "eye", "(", "4", ")", "# from object coordinate to camera coordinate", "\n", "tight_bb", "=", "np", ".", "zeros", "(", "(", "3", ")", ")", "\n", "while", "line", ":", "\n", "                ", "if", "len", "(", "line", ".", "strip", "(", ")", ")", "==", "9", "and", "line", ".", "strip", "(", ")", "[", ":", "8", "]", "==", "'rotation'", ":", "\n", "                    ", "for", "i", "in", "range", "(", "3", ")", ":", "\n", "                        ", "line", "=", "fp", ".", "readline", "(", ")", "\n", "viewMat", "[", "i", ",", ":", "3", "]", "=", "[", "float", "(", "x", ")", "for", "x", "in", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "]", "\n", "", "", "if", "len", "(", "line", ".", "strip", "(", ")", ")", "==", "7", "and", "line", ".", "strip", "(", ")", "[", ":", "6", "]", "==", "'center'", ":", "\n", "                    ", "line", "=", "fp", ".", "readline", "(", ")", "\n", "viewMat", "[", ":", "3", ",", "3", "]", "=", "[", "float", "(", "x", ")", "for", "x", "in", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "]", "\n", "", "if", "len", "(", "line", ".", "strip", "(", ")", ")", "==", "7", "and", "line", ".", "strip", "(", ")", "[", ":", "6", "]", "==", "'extent'", ":", "\n", "                    ", "line", "=", "fp", ".", "readline", "(", ")", "\n", "tight_bb", "[", ":", "]", "=", "[", "float", "(", "x", ")", "for", "x", "in", "line", ".", "strip", "(", ")", ".", "split", "(", ")", "]", "\n", "break", "\n", "", "line", "=", "fp", ".", "readline", "(", ")", "\n", "", "", "pose_dict", "[", "k", "]", "=", "viewMat", "\n", "BB_dict", "[", "k", "]", "=", "tight_bb", "\n", "", "return", "pose_dict", ",", "BB_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.data_utils.get_all_objs": [[447, 576], ["range", "enumerate", "enumerate", "print", "len", "enumerate", "len", "len", "numpy.concatenate", "print", "numpy.amin", "norm_factors.append", "numpy.amin", "numpy.amax", "glob.glob", "pts_list.append", "name_list.append", "enumerate", "enumerate", "print", "max", "min", "max", "min", "max", "min", "numpy.sqrt", "numpy.sqrt", "print", "lib.vis_utils.plot3d_pts", "print", "trimesh.load", "numpy.array", "[].split", "pts_list.append", "name_list.append", "isinstance", "print", "part2.append", "print", "part1.append", "len", "parts_b[].append", "data_utils.load_model_split", "numpy.concatenate", "isinstance", "trimesh.load", "numpy.array", "[].split", "numpy.concatenate", "pts_list.append", "name_list.append", "parts_b[].append", "parts_b[].append", "len", "str", "data_utils.load_model_split", "numpy.concatenate", "print", "parts_b[].append", "obj_file.split", "name_objs.append", "part_pts.append", "obj_files.split", "len", "isinstance", "trimesh.load", "numpy.array", "[].split", "data_utils.load_model_split", "numpy.concatenate", "obj_file.split"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.vis_utils.plot3d_pts", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.data_utils.load_model_split", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.data_utils.load_model_split", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.data_utils.load_model_split"], ["", "def", "get_all_objs", "(", "root_dset", ",", "obj_category", ",", "item", ",", "obj_file_list", "=", "None", ",", "offsets", "=", "None", ",", "is_debug", "=", "False", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    offsets is usually 0, but sometimes could be [x, y, z] in array 1*3, it could be made to a K*3 array if necessary\n    \"\"\"", "\n", "norm_factors", "=", "[", "]", "\n", "pts_list", "=", "[", "]", "\n", "name_list", "=", "[", "]", "\n", "target_dir", "=", "root_dset", "+", "'/objects/'", "+", "obj_category", "+", "'/'", "+", "item", "\n", "\n", "offset", "=", "0", "\n", "if", "obj_file_list", "is", "None", ":", "\n", "        ", "for", "k", ",", "obj_file", "in", "enumerate", "(", "glob", ".", "glob", "(", "target_dir", "+", "'/part_objs/*.obj'", ")", ")", ":", "\n", "            ", "if", "offsets", "is", "not", "None", ":", "\n", "                ", "offset", "=", "offsets", "[", "k", ":", "k", "+", "1", ",", ":", "]", "\n", "", "if", "is_debug", ":", "\n", "                ", "print", "(", "'obj_file is: '", ",", "obj_file", ")", "\n", "", "try", ":", "\n", "                ", "tm", "=", "trimesh", ".", "load", "(", "obj_file", ")", "\n", "vertices_obj", "=", "np", ".", "array", "(", "tm", ".", "vertices", ")", "\n", "", "except", ":", "\n", "                ", "dict_mesh", ",", "_", ",", "_", ",", "_", "=", "load_model_split", "(", "obj_file", ")", "\n", "vertices_obj", "=", "np", ".", "concatenate", "(", "dict_mesh", "[", "'v'", "]", ",", "axis", "=", "0", ")", "\n", "", "pts_list", ".", "append", "(", "vertices_obj", "+", "offset", ")", "\n", "name_obj", "=", "obj_file", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "name_list", ".", "append", "(", "name_obj", ")", "\n", "", "", "else", ":", "\n", "        ", "for", "k", ",", "obj_files", "in", "enumerate", "(", "obj_file_list", ")", ":", "\n", "            ", "if", "offsets", "is", "not", "None", ":", "\n", "                ", "offset", "=", "offsets", "[", "k", ":", "k", "+", "1", ",", ":", "]", "\n", "", "if", "obj_files", "is", "not", "None", "and", "not", "isinstance", "(", "obj_files", ",", "list", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "tm", "=", "trimesh", ".", "load", "(", "obj_files", ")", "\n", "vertices_obj", "=", "np", ".", "array", "(", "tm", ".", "vertices", ")", "\n", "", "except", ":", "\n", "                    ", "dict_mesh", ",", "_", ",", "_", ",", "_", "=", "load_model_split", "(", "obj_files", ")", "\n", "vertices_obj", "=", "np", ".", "concatenate", "(", "dict_mesh", "[", "'v'", "]", ",", "axis", "=", "0", ")", "\n", "", "pts_list", ".", "append", "(", "vertices_obj", "+", "offset", ")", "\n", "name_obj", "=", "obj_files", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "name_list", ".", "append", "(", "name_obj", ")", "# which should follow the right order", "\n", "", "elif", "isinstance", "(", "obj_files", ",", "list", ")", ":", "\n", "                ", "if", "verbose", ":", "\n", "                    ", "print", "(", "'{} part has {} obj files'", ".", "format", "(", "k", ",", "len", "(", "obj_files", ")", ")", ")", "\n", "", "part_pts", "=", "[", "]", "\n", "name_objs", "=", "[", "]", "\n", "for", "obj_file", "in", "obj_files", ":", "\n", "                    ", "if", "obj_file", "is", "not", "None", "and", "not", "isinstance", "(", "obj_file", ",", "list", ")", ":", "\n", "                        ", "try", ":", "\n", "                            ", "tm", "=", "trimesh", ".", "load", "(", "obj_file", ")", "\n", "vertices_obj", "=", "np", ".", "array", "(", "tm", ".", "vertices", ")", "\n", "", "except", ":", "\n", "                            ", "dict_mesh", ",", "_", ",", "_", ",", "_", "=", "load_model_split", "(", "obj_file", ")", "\n", "vertices_obj", "=", "np", ".", "concatenate", "(", "dict_mesh", "[", "'v'", "]", ",", "axis", "=", "0", ")", "\n", "", "name_obj", "=", "obj_file", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "name_objs", ".", "append", "(", "name_obj", ")", "\n", "part_pts", ".", "append", "(", "vertices_obj", ")", "\n", "", "", "part_pts_whole", "=", "np", ".", "concatenate", "(", "part_pts", ",", "axis", "=", "0", ")", "\n", "pts_list", ".", "append", "(", "part_pts_whole", "+", "offset", ")", "\n", "name_list", ".", "append", "(", "name_objs", ")", "# which should follow the right", "\n", "\n", "", "", "", "if", "is_debug", ":", "\n", "        ", "print", "(", "'name_list is: '", ",", "name_list", ")", "\n", "\n", "", "parts_a", "=", "[", "]", "\n", "parts_a", "=", "pts_list", "\n", "parts_b", "=", "[", "None", "]", "*", "len", "(", "obj_file_list", ")", "\n", "# dof_rootd_Aa001_r.obj  dof_rootd_Aa002_r.obj  none_motion.obj", "\n", "# bike: part2: 'dof_Aa001_Ca001_r', 'dof_rootd_Aa001_r'", "\n", "if", "obj_category", "==", "'bike'", ":", "\n", "        ", "part0", "=", "[", "]", "\n", "part1", "=", "[", "]", "\n", "part2", "=", "[", "]", "\n", "part0", "=", "pts_list", "\n", "for", "i", ",", "name_obj", "in", "enumerate", "(", "name_list", ")", ":", "\n", "            ", "if", "name_obj", "in", "[", "'dof_Aa001_Ca001_r'", ",", "'dof_rootd_Aa001_r'", "]", ":", "\n", "                ", "print", "(", "'part 2 adding '", ",", "name_obj", ")", "\n", "part2", ".", "append", "(", "pts_list", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "'part 1 adding '", ",", "name_obj", ")", "\n", "part1", ".", "append", "(", "pts_list", "[", "i", "]", ")", "\n", "", "", "parts", "=", "[", "part0", ",", "part1", ",", "part2", "]", "\n", "\n", "", "elif", "obj_category", "==", "'eyeglasses'", ":", "\n", "        ", "for", "i", ",", "name_obj", "in", "enumerate", "(", "name_list", ")", ":", "\n", "            ", "if", "name_obj", "in", "[", "'none_motion'", "]", ":", "\n", "                ", "parts_b", "[", "0", "]", "=", "[", "]", "\n", "parts_b", "[", "0", "]", ".", "append", "(", "pts_list", "[", "i", "]", ")", "\n", "", "if", "name_obj", "in", "[", "'dof_rootd_Aa001_r'", "]", ":", "\n", "                ", "parts_b", "[", "1", "]", "=", "[", "]", "\n", "parts_b", "[", "1", "]", ".", "append", "(", "pts_list", "[", "i", "]", ")", "\n", "", "elif", "name_obj", "in", "[", "'dof_rootd_Aa002_r'", "]", ":", "\n", "                ", "parts_b", "[", "2", "]", "=", "[", "]", "\n", "parts_b", "[", "2", "]", ".", "append", "(", "pts_list", "[", "i", "]", ")", "\n", "\n", "", "", "parts", "=", "[", "parts_a", "]", "+", "parts_b", "\n", "\n", "", "else", ":", "\n", "        ", "parts_a", "=", "[", "]", "\n", "parts_a", "=", "pts_list", "\n", "parts_b", "=", "[", "None", "]", "*", "len", "(", "name_list", ")", "\n", "for", "i", ",", "name_obj", "in", "enumerate", "(", "name_list", ")", ":", "\n", "            ", "parts_b", "[", "i", "]", "=", "[", "]", "\n", "parts_b", "[", "i", "]", ".", "append", "(", "pts_list", "[", "i", "]", ")", "\n", "\n", "", "parts", "=", "[", "parts_a", "]", "+", "parts_b", "\n", "\n", "", "corner_pts", "=", "[", "None", "]", "*", "len", "(", "parts", ")", "\n", "\n", "for", "j", "in", "range", "(", "len", "(", "parts", ")", ")", ":", "\n", "        ", "if", "is_debug", ":", "\n", "            ", "print", "(", "'Now checking '", ",", "j", ")", "\n", "", "part_gts", "=", "np", ".", "concatenate", "(", "parts", "[", "j", "]", ",", "axis", "=", "0", ")", "\n", "print", "(", "'part_gts: '", ",", "part_gts", ".", "shape", ")", "\n", "tight_w", "=", "max", "(", "part_gts", "[", ":", ",", "0", "]", ")", "-", "min", "(", "part_gts", "[", ":", ",", "0", "]", ")", "\n", "tight_l", "=", "max", "(", "part_gts", "[", ":", ",", "1", "]", ")", "-", "min", "(", "part_gts", "[", ":", ",", "1", "]", ")", "\n", "tight_h", "=", "max", "(", "part_gts", "[", ":", ",", "2", "]", ")", "-", "min", "(", "part_gts", "[", ":", ",", "2", "]", ")", "\n", "corner_pts", "[", "j", "]", "=", "np", ".", "amin", "(", "part_gts", ",", "axis", "=", "1", ")", "\n", "norm_factor", "=", "np", ".", "sqrt", "(", "1", ")", "/", "np", ".", "sqrt", "(", "tight_w", "**", "2", "+", "tight_l", "**", "2", "+", "tight_h", "**", "2", ")", "\n", "norm_factors", ".", "append", "(", "norm_factor", ")", "\n", "corner_pt_left", "=", "np", ".", "amin", "(", "part_gts", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "corner_pt_right", "=", "np", ".", "amax", "(", "part_gts", ",", "axis", "=", "0", ",", "keepdims", "=", "True", ")", "\n", "corner_pts", "[", "j", "]", "=", "[", "corner_pt_left", ",", "corner_pt_right", "]", "# [index][left/right][x, y, z], numpy array", "\n", "if", "is_debug", ":", "\n", "            ", "print", "(", "'Group {} has {} points with shape {}'", ".", "format", "(", "j", ",", "len", "(", "corner_pts", "[", "j", "]", ")", ",", "corner_pts", "[", "j", "]", "[", "0", "]", ".", "shape", ")", ")", "\n", "", "if", "verbose", ":", "\n", "            ", "plot3d_pts", "(", "[", "[", "part_gts", "[", ":", ":", "2", "]", "]", "]", ",", "[", "'model pts'", "]", ",", "s", "=", "15", ",", "title_name", "=", "[", "'GT model pts {}'", ".", "format", "(", "j", ")", "]", ",", "sub_name", "=", "str", "(", "j", ")", ")", "\n", "# for k in range(len(parts[j])):", "\n", "#     plot3d_pts([[parts[j][k][::2]]], ['model pts of part {}'.format(k)], s=15, title_name=['GT model pts'], sub_name=str(k))", "\n", "\n", "", "", "return", "parts", "[", "1", ":", "]", ",", "norm_factors", ",", "corner_pts", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.data_utils.calculate_factor_nocs": [[577, 591], ["data_utils.get_all_objs", "print", "print"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.data_utils.get_all_objs"], ["", "def", "calculate_factor_nocs", "(", "root_dset", ",", "obj_category", ",", "item", ",", "parts_map", ",", "obj_file_list", "=", "None", ",", "offsets", "=", "None", ",", "is_debug", "=", "False", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    read all .obj files,\n    group 1:  dof_rootd_Ba001_r.obj  dof_rootd_Ca002_r.obj  none_motion.obj;\n    group 2:  dof_Aa001_Ca001_r.obj  dof_rootd_Aa001_r.obj;\n    [global, part0, part1]\n    \"\"\"", "\n", "if", "obj_file_list", "is", "not", "None", "and", "obj_file_list", "[", "0", "]", "==", "[", "]", ":", "\n", "        ", "obj_file_list", "=", "obj_file_list", "[", "1", ":", "]", "\n", "", "_", ",", "norm_factors", ",", "corner_pts", "=", "get_all_objs", "(", "root_dset", ",", "obj_category", ",", "item", ",", "obj_file_list", "=", "obj_file_list", ",", "offsets", "=", "offsets", ",", "is_debug", "=", "is_debug", ",", "verbose", "=", "False", ")", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "'norm_factors for global NOCS: '", ",", "norm_factors", "[", "0", "]", ")", "\n", "print", "(", "'norm_factors for part NOCS: '", ",", "norm_factors", "[", "1", ":", "]", ")", "\n", "", "return", "norm_factors", ",", "corner_pts", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.data_utils.get_model_pts": [[592, 605], ["data_utils.get_all_objs", "print"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.data_utils.get_all_objs"], ["", "def", "get_model_pts", "(", "root_dset", ",", "obj_category", ",", "item", "=", "'0001'", ",", "obj_file_list", "=", "None", ",", "offsets", "=", "None", ",", "is_debug", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    read all .obj files,\n    group 1:  dof_rootd_Ba001_r.obj  dof_rootd_Ca002_r.obj  none_motion.obj;\n    group 2:  dof_Aa001_Ca001_r.obj  dof_rootd_Aa001_r.obj;\n    [global, part0, part1]\n    \"\"\"", "\n", "if", "obj_file_list", "is", "not", "None", "and", "obj_file_list", "[", "0", "]", "==", "[", "]", ":", "\n", "        ", "print", "(", "'removing the 0th name list'", ")", "\n", "obj_file_list", "=", "obj_file_list", "[", "1", ":", "]", "\n", "", "model_pts", ",", "norm_factors", ",", "corner_pts", "=", "get_all_objs", "(", "root_dset", ",", "obj_category", ",", "item", ",", "obj_file_list", "=", "obj_file_list", ",", "offsets", "=", "offsets", ",", "is_debug", "=", "is_debug", ")", "\n", "# read", "\n", "return", "model_pts", ",", "norm_factors", ",", "corner_pts", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.data_utils.get_boundary": [[606, 629], ["numpy.array"], "function", ["None"], ["", "def", "get_boundary", "(", "cpts", ")", ":", "\n", "    ", "p", "=", "0", "\n", "x_min", "=", "cpts", "[", "p", "]", "[", "0", "]", "[", "0", "]", "[", "0", "]", "\n", "y_min", "=", "cpts", "[", "p", "]", "[", "0", "]", "[", "0", "]", "[", "1", "]", "\n", "z_min", "=", "cpts", "[", "p", "]", "[", "0", "]", "[", "0", "]", "[", "2", "]", "\n", "x_max", "=", "cpts", "[", "p", "]", "[", "1", "]", "[", "0", "]", "[", "0", "]", "\n", "y_max", "=", "cpts", "[", "p", "]", "[", "1", "]", "[", "0", "]", "[", "1", "]", "\n", "z_max", "=", "cpts", "[", "p", "]", "[", "1", "]", "[", "0", "]", "[", "2", "]", "\n", "boundary", "=", "np", ".", "array", "(", "[", "[", "x_min", ",", "y_min", ",", "z_min", "]", ",", "\n", "[", "x_max", ",", "y_min", ",", "z_min", "]", ",", "\n", "[", "x_max", ",", "y_min", ",", "z_max", "]", ",", "\n", "[", "x_min", ",", "y_min", ",", "z_max", "]", ",", "\n", "[", "x_min", ",", "y_max", ",", "z_min", "]", ",", "\n", "[", "x_min", ",", "y_max", ",", "z_max", "]", ",", "\n", "[", "x_max", ",", "y_max", ",", "z_max", "]", ",", "\n", "[", "x_max", ",", "y_max", ",", "z_min", "]", ",", "\n", "[", "x_min", ",", "y_min", ",", "z_max", "]", ",", "\n", "[", "x_min", ",", "y_max", ",", "z_max", "]", ",", "\n", "[", "x_max", ",", "y_max", ",", "z_max", "]", ",", "\n", "[", "x_max", ",", "y_min", ",", "z_max", "]", ",", "\n", "]", "\n", ")", "\n", "return", "boundary", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.data_utils.load_model_split": [[630, 686], ["sum", "sum", "open", "fp.readline", "fp.readline", "len", "fp.readline", "list_group.append", "vsplit.append", "list_xyz.append", "fsplit.append", "list_face.append", "xyz.append", "fp.readline", "face.append", "fp.readline", "float", "line[].strip().split", "line[].strip().split", "line[].strip", "line[].strip"], "function", ["None"], ["", "def", "load_model_split", "(", "inpath", ")", ":", "\n", "    ", "vsplit", "=", "[", "]", "\n", "fsplit", "=", "[", "]", "\n", "vcount", "=", "0", "\n", "fcount", "=", "0", "\n", "dict_mesh", "=", "{", "}", "\n", "list_group", "=", "[", "]", "\n", "list_xyz", "=", "[", "]", "\n", "list_face", "=", "[", "]", "\n", "with", "open", "(", "inpath", ",", "\"r\"", ",", "errors", "=", "'replace'", ")", "as", "fp", ":", "\n", "        ", "line", "=", "fp", ".", "readline", "(", ")", "\n", "cnt", "=", "1", "\n", "while", "line", ":", "\n", "# print('cnt: ', cnt, line)", "\n", "            ", "if", "len", "(", "line", ")", "<", "2", ":", "\n", "                ", "line", "=", "fp", ".", "readline", "(", ")", "\n", "cnt", "+=", "1", "\n", "continue", "\n", "", "xyz", "=", "[", "]", "\n", "face", "=", "[", "]", "\n", "mesh", "=", "{", "}", "\n", "if", "line", "[", "0", "]", "==", "'g'", ":", "\n", "                ", "list_group", ".", "append", "(", "line", "[", "2", ":", "]", ")", "\n", "", "if", "line", "[", "0", ":", "2", "]", "==", "'v '", ":", "\n", "                ", "vcount", "=", "0", "\n", "while", "line", "[", "0", ":", "2", "]", "==", "'v '", ":", "\n", "                    ", "xyz", ".", "append", "(", "[", "float", "(", "coord", ")", "for", "coord", "in", "line", "[", "2", ":", "]", ".", "strip", "(", ")", ".", "split", "(", ")", "]", ")", "\n", "vcount", "+=", "1", "\n", "line", "=", "fp", ".", "readline", "(", ")", "\n", "cnt", "+=", "1", "\n", "", "vsplit", ".", "append", "(", "vcount", ")", "\n", "list_xyz", ".", "append", "(", "xyz", ")", "\n", "\n", "# it has intermediate g/obj", "\n", "", "if", "line", "[", "0", "]", "==", "'f'", ":", "\n", "                ", "fcount", "=", "0", "\n", "while", "line", "[", "0", "]", "==", "'f'", ":", "\n", "                    ", "face", ".", "append", "(", "[", "num", "for", "num", "in", "line", "[", "2", ":", "]", ".", "strip", "(", ")", ".", "split", "(", ")", "]", ")", "\n", "fcount", "+=", "1", "\n", "line", "=", "fp", ".", "readline", "(", ")", "\n", "cnt", "+=", "1", "\n", "if", "not", "line", ":", "\n", "                        ", "break", "\n", "", "", "fsplit", ".", "append", "(", "fcount", ")", "\n", "list_face", ".", "append", "(", "face", ")", "\n", "# print(\"Line {}: {}\".format(cnt, line.strip()))", "\n", "", "line", "=", "fp", ".", "readline", "(", ")", "\n", "cnt", "+=", "1", "\n", "# print('vsplit', vsplit, '\\n', 'fsplit', fsplit)", "\n", "# print(\"list_mesh\", list_mesh)", "\n", "", "", "dict_mesh", "[", "'v'", "]", "=", "list_xyz", "\n", "dict_mesh", "[", "'f'", "]", "=", "list_face", "\n", "vsplit_total", "=", "sum", "(", "vsplit", ")", "\n", "fsplit_total", "=", "sum", "(", "fsplit", ")", "\n", "\n", "return", "dict_mesh", ",", "list_group", ",", "vsplit", ",", "fsplit", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.data_utils.save_objmesh": [[687, 711], ["open", "range", "fp.write", "fp.write", "len", "range", "range", "len", "fp.write", "len", "fp.write"], "function", ["None"], ["", "def", "save_objmesh", "(", "name_obj", ",", "dict_mesh", ")", ":", "\n", "    ", "with", "open", "(", "name_obj", ",", "\"w+\"", ")", "as", "fp", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "dict_mesh", "[", "'v'", "]", ")", ")", ":", "\n", "            ", "xyz", "=", "dict_mesh", "[", "'v'", "]", "[", "i", "]", "\n", "face", "=", "dict_mesh", "[", "'f'", "]", "[", "i", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "xyz", ")", ")", ":", "\n", "                ", "fp", ".", "write", "(", "'v {} {} {}\\n'", ".", "format", "(", "xyz", "[", "j", "]", "[", "0", "]", ",", "xyz", "[", "j", "]", "[", "1", "]", ",", "xyz", "[", "j", "]", "[", "2", "]", ")", ")", "\n", "", "for", "m", "in", "range", "(", "len", "(", "face", ")", ")", ":", "\n", "                ", "fp", ".", "write", "(", "'f {} {} {}\\n'", ".", "format", "(", "face", "[", "m", "]", "[", "0", "]", ",", "face", "[", "m", "]", "[", "1", "]", ",", "face", "[", "m", "]", "[", "2", "]", ")", ")", "\n", "# fprintf(fid, 'vt %f %f\\n',(i-1)/(l-1),(j-1)/(h-1));", "\n", "# if (normals) fprintf(fid, 'vn %f %f %f\\n', nx(i,j),ny(i,j),nz(i,j)); end", "\n", "# Iterate vertex data collected in each material", "\n", "# for name, material in obj_model.materials.items():", "\n", "#     # Contains the vertex format (string) such as \"T2F_N3F_V3F\"", "\n", "#     # T2F, C3F, N3F and V3F may appear in this string", "\n", "#     material.vertex_format", "\n", "#     # Contains the vertex list of floats in the format described above", "\n", "#     material.vertices", "\n", "#     # Material properties", "\n", "#     material.diffuse", "\n", "#     material.ambient", "\n", "#     material.texture", "\n", "", "", "fp", ".", "write", "(", "'g mesh\\n'", ")", ";", "\n", "fp", ".", "write", "(", "'g\\n\\n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.data_utils.save_multiobjmesh": [[712, 736], ["open", "range", "fp.write", "fp.write", "len", "range", "range", "len", "fp.write", "len", "fp.write"], "function", ["None"], ["", "", "def", "save_multiobjmesh", "(", "name_obj", ",", "dict_mesh", ")", ":", "\n", "    ", "with", "open", "(", "name_obj", ",", "\"w+\"", ")", "as", "fp", ":", "\n", "        ", "for", "i", "in", "range", "(", "len", "(", "dict_mesh", "[", "'v'", "]", ")", ")", ":", "\n", "            ", "xyz", "=", "dict_mesh", "[", "'v'", "]", "[", "i", "]", "\n", "face", "=", "dict_mesh", "[", "'f'", "]", "[", "i", "]", "\n", "for", "j", "in", "range", "(", "len", "(", "xyz", ")", ")", ":", "\n", "                ", "fp", ".", "write", "(", "'v {} {} {}\\n'", ".", "format", "(", "xyz", "[", "j", "]", "[", "0", "]", ",", "xyz", "[", "j", "]", "[", "1", "]", ",", "xyz", "[", "j", "]", "[", "2", "]", ")", ")", "\n", "", "for", "m", "in", "range", "(", "len", "(", "face", ")", ")", ":", "\n", "                ", "fp", ".", "write", "(", "'f {} {} {}\\n'", ".", "format", "(", "face", "[", "m", "]", "[", "0", "]", ",", "face", "[", "m", "]", "[", "1", "]", ",", "face", "[", "m", "]", "[", "2", "]", ")", ")", "\n", "# fprintf(fid, 'vt %f %f\\n',(i-1)/(l-1),(j-1)/(h-1));", "\n", "# if (normals) fprintf(fid, 'vn %f %f %f\\n', nx(i,j),ny(i,j),nz(i,j)); end", "\n", "# Iterate vertex data collected in each material", "\n", "# for name, material in obj_model.materials.items():", "\n", "#     # Contains the vertex format (string) such as \"T2F_N3F_V3F\"", "\n", "#     # T2F, C3F, N3F and V3F may appear in this string", "\n", "#     material.vertex_format", "\n", "#     # Contains the vertex list of floats in the format described above", "\n", "#     material.vertices", "\n", "#     # Material properties", "\n", "#     material.diffuse", "\n", "#     material.ambient", "\n", "#     material.texture", "\n", "", "", "fp", ".", "write", "(", "'g mesh\\n'", ")", "\n", "fp", ".", "write", "(", "'g\\n\\n'", ")", "\n", "# mo:", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.data_utils.get_sampled_model_pts": [[749, 817], ["time.time", "os.listdir", "os.listdir", "time.time", "list", "time.time", "print", "print", "data_utils.get_model_pts", "enumerate", "open", "pickle.dump", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "pickle.load.keys", "enumerate", "list", "numpy.concatenate", "numpy.random.shuffle", "pt_ii.append", "print", "print", "numpy.copy", "print", "bbox3d_per_part.append", "numpy.random.shuffle", "pt_ii.append", "print", "print", "pickle.load.keys", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.array", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.data_utils.get_model_pts"], ["", "", "def", "get_sampled_model_pts", "(", "basepath", ",", "urdf_path", ",", "args", ",", "viz", "=", "False", ")", ":", "\n", "    ", "pts_m", "=", "{", "}", "\n", "bbox3d_all", "=", "{", "}", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "m_file", "=", "basepath", "+", "'/shape2motion/pickle/{}_pts.pkl'", ".", "format", "(", "args", ".", "item", ")", "\n", "c_file", "=", "basepath", "+", "'/shape2motion/pickle/{}_corners.pkl'", ".", "format", "(", "args", ".", "item", ")", "\n", "n_file", "=", "basepath", "+", "'/shape2motion/pickle/{}.pkl'", ".", "format", "(", "args", ".", "item", ")", "\n", "\n", "if", "args", ".", "process", ":", "\n", "        ", "root_dset", "=", "basepath", "+", "'/shape2motion'", "\n", "for", "item", "in", "os", ".", "listdir", "(", "urdf_path", ")", ":", "\n", "            ", "print", "(", "'now fetching for item {}'", ".", "format", "(", "item", ")", ")", "\n", "pts", ",", "nf", ",", "cpts", "=", "get_model_pts", "(", "root_dset", ",", "args", ".", "item", ",", "item", ")", "\n", "pt_ii", "=", "[", "]", "\n", "bbox3d_per_part", "=", "[", "]", "\n", "for", "p", ",", "pt", "in", "enumerate", "(", "pts", ")", ":", "\n", "                ", "pt_s", "=", "np", ".", "concatenate", "(", "pt", ",", "axis", "=", "0", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "pt_s", ")", "\n", "# pt_s = pt_s[::20, :]", "\n", "pt_ii", ".", "append", "(", "pt_s", ")", "\n", "print", "(", "'We have {} pts'", ".", "format", "(", "pt_ii", "[", "p", "]", ".", "shape", "[", "0", "]", ")", ")", "\n", "", "if", "pt_ii", "is", "not", "[", "]", ":", "\n", "                ", "pts_m", "[", "item", "]", "=", "pt_ii", "\n", "", "else", ":", "\n", "                ", "print", "(", "'!!!!! {} model loading is wrong'", ".", "format", "(", "item", ")", ")", "\n", "", "", "end_t", "=", "time", ".", "time", "(", ")", "\n", "\n", "with", "open", "(", "m_file", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "pts_m", ",", "f", ")", "\n", "", "", "else", ":", "\n", "        ", "with", "open", "(", "m_file", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "pts_m", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "with", "open", "(", "c_file", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "pts_c", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "with", "open", "(", "n_file", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "pts_n", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "for", "item", "in", "list", "(", "pts_m", ".", "keys", "(", ")", ")", ":", "\n", "            ", "pts", "=", "pts_m", "[", "item", "]", "\n", "norm_factors", "=", "pts_n", "[", "item", "]", "\n", "norm_corners", "=", "pts_c", "[", "item", "]", "\n", "pt_ii", "=", "[", "]", "\n", "bbox3d_per_part", "=", "[", "]", "\n", "for", "p", ",", "pt", "in", "enumerate", "(", "pts", ")", ":", "# todo: assume we are dealing part-nocs, so model pts are processed", "\n", "                ", "norm_factor", "=", "norm_factors", "[", "p", "+", "1", "]", "\n", "norm_corner", "=", "norm_corners", "[", "p", "+", "1", "]", "\n", "nocs_corner", "=", "np", ".", "copy", "(", "norm_corner", ")", "# copy is very important, as they are", "\n", "print", "(", "'norm_corner:\\n'", ",", "norm_corner", ")", "\n", "pt_nocs", "=", "(", "pt", "-", "norm_corner", "[", "0", "]", ")", "*", "norm_factor", "+", "np", ".", "array", "(", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", ".", "reshape", "(", "1", ",", "3", ")", "-", "0.5", "*", "(", "norm_corner", "[", "1", "]", "-", "norm_corner", "[", "0", "]", ")", "*", "norm_factor", "\n", "nocs_corner", "[", "0", "]", "=", "np", ".", "array", "(", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", ".", "reshape", "(", "1", ",", "3", ")", "-", "0.5", "*", "(", "norm_corner", "[", "1", "]", "-", "norm_corner", "[", "0", "]", ")", "*", "norm_factor", "\n", "nocs_corner", "[", "1", "]", "=", "np", ".", "array", "(", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", ".", "reshape", "(", "1", ",", "3", ")", "+", "0.5", "*", "(", "norm_corner", "[", "1", "]", "-", "norm_corner", "[", "0", "]", ")", "*", "norm_factor", "\n", "bbox3d_per_part", ".", "append", "(", "nocs_corner", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "pt_nocs", ")", "\n", "pt_ii", ".", "append", "(", "pt_nocs", "[", "0", ":", "2000", ",", ":", "]", ")", "# sub-sampling", "\n", "print", "(", "'We have {} pts'", ".", "format", "(", "pt_ii", "[", "p", "]", ".", "shape", "[", "0", "]", ")", ")", "\n", "", "if", "pt_ii", "is", "not", "[", "]", ":", "\n", "                ", "pts_m", "[", "item", "]", "=", "pt_ii", "\n", "", "else", ":", "\n", "                ", "print", "(", "'!!!!! {} model loading is wrong'", ".", "format", "(", "item", ")", ")", "\n", "", "assert", "bbox3d_per_part", "!=", "[", "]", "\n", "bbox3d_all", "[", "item", "]", "=", "bbox3d_per_part", "\n", "\n", "", "end_t", "=", "time", ".", "time", "(", ")", "\n", "", "if", "viz", ":", "\n", "        ", "print", "(", "'It takes {} seconds to get: \\n'", ".", "format", "(", "end_t", "-", "start", ")", ",", "list", "(", "pts_m", ".", "keys", "(", ")", ")", ")", "\n", "", "return", "bbox3d_all", ",", "pts_m", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.data_utils.get_part_bounding_box": [[819, 888], ["time.time", "print", "os.listdir", "os.listdir", "time.time", "time.time", "list", "lib.vis_utils.plot3d_pts", "print", "data_utils.get_model_pts", "enumerate", "open", "pickle.dump", "open", "pickle.load", "open", "pickle.load", "open", "pickle.load", "enumerate", "pickle.load.keys", "numpy.concatenate", "numpy.random.shuffle", "pt_ii.append", "print", "print", "numpy.copy", "print", "bbox3d_per_part.append", "numpy.random.shuffle", "pt_ii.append", "print", "print", "numpy.array().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.array", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.vis_utils.plot3d_pts", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.data_utils.get_model_pts"], ["", "def", "get_part_bounding_box", "(", "my_dir", ",", "test_ins", ",", "args", ",", "viz", "=", "False", ")", ":", "\n", "    ", "pts_m", "=", "{", "}", "\n", "bbox3d_all", "=", "{", "}", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "m_file", "=", "my_dir", "+", "'/shape2motion/pickle/{}_pts.pkl'", ".", "format", "(", "args", ".", "item", ")", "\n", "c_file", "=", "my_dir", "+", "'/shape2motion/pickle/{}_corners.pkl'", ".", "format", "(", "args", ".", "item", ")", "\n", "n_file", "=", "my_dir", "+", "'/shape2motion/pickle/{}.pkl'", ".", "format", "(", "args", ".", "item", ")", "\n", "\n", "if", "args", ".", "process", ":", "\n", "        ", "for", "item", "in", "os", ".", "listdir", "(", "test_ins", ")", ":", "\n", "            ", "print", "(", "'now fetching for item {}'", ".", "format", "(", "item", ")", ")", "\n", "pts", ",", "nf", ",", "cpts", "=", "get_model_pts", "(", "root_dset", ",", "args", ".", "item", ",", "item", ")", "\n", "pt_ii", "=", "[", "]", "\n", "for", "p", ",", "pt", "in", "enumerate", "(", "pts", ")", ":", "\n", "                ", "pt_s", "=", "np", ".", "concatenate", "(", "pt", ",", "axis", "=", "0", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "pt_s", ")", "\n", "# pt_s = pt_s[::20, :]", "\n", "pt_ii", ".", "append", "(", "pt_s", ")", "\n", "print", "(", "'We have {} pts'", ".", "format", "(", "pt_ii", "[", "p", "]", ".", "shape", "[", "0", "]", ")", ")", "\n", "", "if", "pt_ii", "is", "not", "[", "]", ":", "\n", "                ", "pts_m", "[", "item", "]", "=", "pt_ii", "\n", "", "else", ":", "\n", "                ", "print", "(", "'!!!!! {} model loading is wrong'", ".", "format", "(", "item", ")", ")", "\n", "", "", "end_t", "=", "time", ".", "time", "(", ")", "\n", "\n", "with", "open", "(", "m_file", ",", "'wb'", ")", "as", "f", ":", "\n", "            ", "pickle", ".", "dump", "(", "pts_m", ",", "f", ")", "\n", "", "", "else", ":", "\n", "        ", "with", "open", "(", "m_file", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "pts_m", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "with", "open", "(", "c_file", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "pts_c", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "with", "open", "(", "n_file", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "pts_n", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "# for item in list(pts_m.keys()):", "\n", "", "for", "item", "in", "test_ins", ":", "\n", "            ", "pts", "=", "pts_m", "[", "item", "]", "\n", "norm_factors", "=", "pts_n", "[", "item", "]", "\n", "norm_corners", "=", "pts_c", "[", "item", "]", "\n", "pt_ii", "=", "[", "]", "\n", "bbox3d_per_part", "=", "[", "]", "\n", "for", "p", ",", "pt", "in", "enumerate", "(", "pts", ")", ":", "# todo: assume we are dealing part-nocs, so model pts are processed", "\n", "                ", "norm_factor", "=", "norm_factors", "[", "p", "+", "1", "]", "\n", "norm_corner", "=", "norm_corners", "[", "p", "+", "1", "]", "\n", "nocs_corner", "=", "np", ".", "copy", "(", "norm_corner", ")", "# copy is very important, as they are", "\n", "print", "(", "'norm_corner:\\n'", ",", "norm_corner", ")", "\n", "pt_nocs", "=", "(", "pt", "-", "norm_corner", "[", "0", "]", ")", "*", "norm_factor", "+", "np", ".", "array", "(", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", ".", "reshape", "(", "1", ",", "3", ")", "-", "0.5", "*", "(", "norm_corner", "[", "1", "]", "-", "norm_corner", "[", "0", "]", ")", "*", "norm_factor", "\n", "nocs_corner", "[", "0", "]", "=", "np", ".", "array", "(", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", ".", "reshape", "(", "1", ",", "3", ")", "-", "0.5", "*", "(", "norm_corner", "[", "1", "]", "-", "norm_corner", "[", "0", "]", ")", "*", "norm_factor", "\n", "nocs_corner", "[", "1", "]", "=", "np", ".", "array", "(", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", ".", "reshape", "(", "1", ",", "3", ")", "+", "0.5", "*", "(", "norm_corner", "[", "1", "]", "-", "norm_corner", "[", "0", "]", ")", "*", "norm_factor", "\n", "bbox3d_per_part", ".", "append", "(", "nocs_corner", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "pt_nocs", ")", "\n", "pt_ii", ".", "append", "(", "pt_nocs", "[", "0", ":", "2000", ",", ":", "]", ")", "# sub-sampling", "\n", "print", "(", "'We have {} pts'", ".", "format", "(", "pt_ii", "[", "p", "]", ".", "shape", "[", "0", "]", ")", ")", "\n", "", "if", "pt_ii", "is", "not", "[", "]", ":", "\n", "                ", "pts_m", "[", "item", "]", "=", "pt_ii", "\n", "", "else", ":", "\n", "                ", "print", "(", "'!!!!! {} model loading is wrong'", ".", "format", "(", "item", ")", ")", "\n", "", "assert", "bbox3d_per_part", "!=", "[", "]", "\n", "bbox3d_all", "[", "item", "]", "=", "bbox3d_per_part", "\n", "", "end_t", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "print", "(", "'It takes {} seconds to get: \\n'", ".", "format", "(", "end_t", "-", "start", ")", ",", "list", "(", "pts_m", ".", "keys", "(", ")", ")", ")", "\n", "if", "viz", ":", "\n", "        ", "plot3d_pts", "(", "[", "pts_m", "[", "'0001'", "]", "]", ",", "[", "[", "'part 0'", ",", "'part 1'", "]", "]", ",", "s", "=", "5", ",", "title_name", "=", "[", "'sampled model pts'", "]", ",", "dpi", "=", "200", ")", "\n", "\n", "", "return", "bbox3d_all", ",", "pts_m", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.data_utils.get_test_seq": [[889, 907], ["[].split", "unseen_test_h5.append", "seen_test_h5.append", "test_h5.split"], "function", ["None"], ["", "def", "get_test_seq", "(", "all_test_h5", ",", "unseen_instances", ",", "domain", "=", "'seen'", ",", "spec_instances", "=", "[", "]", ",", "category", "=", "None", ")", ":", "\n", "    ", "seen_test_h5", "=", "[", "]", "\n", "unseen_test_h5", "=", "[", "]", "\n", "for", "test_h5", "in", "all_test_h5", ":", "\n", "        ", "if", "test_h5", "[", "0", ":", "4", "]", "in", "spec_instances", "or", "test_h5", "[", "-", "2", ":", "]", "!=", "'h5'", ":", "\n", "            ", "continue", "\n", "", "name_info", "=", "test_h5", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "split", "(", "'_'", ")", "\n", "item", "=", "name_info", "[", "0", "]", "\n", "if", "item", "in", "unseen_instances", ":", "\n", "            ", "unseen_test_h5", ".", "append", "(", "test_h5", ")", "\n", "", "else", ":", "\n", "            ", "seen_test_h5", ".", "append", "(", "test_h5", ")", "\n", "", "", "if", "domain", "==", "'seen'", ":", "\n", "        ", "test_group", "=", "seen_test_h5", "\n", "", "else", ":", "\n", "        ", "test_group", "=", "unseen_test_h5", "\n", "\n", "", "return", "test_group", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.data_utils.get_test_group": [[908, 935], ["list", "list", "numpy.arange", "str", "numpy.arange", "str", "[].split", "unseen_test_h5.append", "seen_test_h5.append", "test_h5.split"], "function", ["None"], ["", "def", "get_test_group", "(", "all_test_h5", ",", "unseen_instances", ",", "domain", "=", "'seen'", ",", "spec_instances", "=", "[", "]", ",", "category", "=", "None", ")", ":", "\n", "    ", "seen_test_h5", "=", "[", "]", "\n", "unseen_test_h5", "=", "[", "]", "\n", "seen_arti_select", "=", "list", "(", "np", ".", "arange", "(", "0", ",", "31", ",", "3", ")", ")", "# todo,  15 * 1 * [24 - 83], half", "\n", "seen_arti_select", "=", "[", "str", "(", "x", ")", "for", "x", "in", "seen_arti_select", "]", "\n", "\n", "unseen_frame_select", "=", "list", "(", "np", ".", "arange", "(", "0", ",", "30", ",", "5", ")", ")", "# todo, 6 * 31 * 3", "\n", "unseen_frame_select", "=", "[", "str", "(", "x", ")", "for", "x", "in", "unseen_frame_select", "]", "\n", "for", "test_h5", "in", "all_test_h5", ":", "\n", "        ", "if", "test_h5", "[", "0", ":", "4", "]", "in", "spec_instances", "or", "test_h5", "[", "-", "2", ":", "]", "!=", "'h5'", ":", "\n", "            ", "continue", "\n", "", "name_info", "=", "test_h5", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "split", "(", "'_'", ")", "\n", "item", "=", "name_info", "[", "0", "]", "\n", "art_index", "=", "name_info", "[", "1", "]", "\n", "frame_order", "=", "name_info", "[", "2", "]", "\n", "\n", "if", "item", "in", "unseen_instances", "and", "frame_order", "in", "unseen_frame_select", ":", "\n", "            ", "unseen_test_h5", ".", "append", "(", "test_h5", ")", "\n", "", "elif", "item", "not", "in", "unseen_instances", "and", "art_index", "in", "seen_arti_select", ":", "\n", "            ", "seen_test_h5", ".", "append", "(", "test_h5", ")", "\n", "\n", "", "", "if", "domain", "==", "'seen'", ":", "\n", "        ", "test_group", "=", "seen_test_h5", "\n", "", "else", ":", "\n", "        ", "test_group", "=", "unseen_test_h5", "\n", "\n", "", "return", "test_group", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.data_utils.get_full_test": [[936, 958], ["[].split", "unseen_test_h5.append", "seen_test_h5.append", "test_h5.split"], "function", ["None"], ["", "def", "get_full_test", "(", "all_test_h5", ",", "unseen_instances", ",", "domain", "=", "'seen'", ",", "spec_instances", "=", "[", "]", ",", "category", "=", "None", ")", ":", "\n", "    ", "seen_test_h5", "=", "[", "]", "\n", "unseen_test_h5", "=", "[", "]", "\n", "for", "test_h5", "in", "all_test_h5", ":", "\n", "        ", "if", "test_h5", "[", "0", ":", "4", "]", "in", "spec_instances", "or", "test_h5", "[", "-", "2", ":", "]", "!=", "'h5'", ":", "\n", "            ", "continue", "\n", "", "name_info", "=", "test_h5", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "split", "(", "'_'", ")", "\n", "item", "=", "name_info", "[", "0", "]", "\n", "art_index", "=", "name_info", "[", "1", "]", "\n", "frame_order", "=", "name_info", "[", "2", "]", "\n", "\n", "if", "item", "in", "unseen_instances", ":", "\n", "            ", "unseen_test_h5", ".", "append", "(", "test_h5", ")", "\n", "", "elif", "item", "not", "in", "unseen_instances", ":", "\n", "            ", "seen_test_h5", ".", "append", "(", "test_h5", ")", "\n", "\n", "", "", "if", "domain", "==", "'seen'", ":", "\n", "        ", "test_group", "=", "seen_test_h5", "\n", "", "else", ":", "\n", "        ", "test_group", "=", "unseen_test_h5", "\n", "\n", "", "return", "test_group", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.data_utils.get_demo_h5": [[960, 968], ["demo_full_h5.append"], "function", ["None"], ["", "def", "get_demo_h5", "(", "all_test_h5", ",", "spec_instances", "=", "[", "]", ")", ":", "\n", "    ", "demo_full_h5", "=", "[", "]", "\n", "for", "test_h5", "in", "all_test_h5", ":", "\n", "        ", "if", "test_h5", "[", "0", ":", "4", "]", "in", "spec_instances", "or", "test_h5", "[", "-", "2", ":", "]", "!=", "'h5'", ":", "\n", "            ", "continue", "\n", "", "demo_full_h5", ".", "append", "(", "test_h5", ")", "\n", "\n", "", "return", "demo_full_h5", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.data_utils.get_pickle": [[969, 980], ["print", "os.path.exists", "os.path.exists", "os.makedirs", "os.makedirs", "open", "pickle.dump"], "function", ["None"], ["", "def", "get_pickle", "(", "data", ",", "base_path", ",", "index", ")", ":", "\n", "    ", "\"\"\"\n    data: better to be dict-like structure\n    \"\"\"", "\n", "file_name", "=", "base_path", "+", "'/pickle/datapoint_{}.pkl'", ".", "format", "(", "index", ")", "\n", "directory", "=", "base_path", "+", "'/pickle'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "directory", ")", "\n", "", "with", "open", "(", "file_name", ",", "'wb'", ")", "as", "f", ":", "\n", "        ", "pickle", ".", "dump", "(", "data", ",", "f", ")", "\n", "", "print", "(", "'Saving the data into '", "+", "base_path", "+", "'/pickle/datapoint_{}.pkl'", ".", "format", "(", "index", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.data_utils.load_pickle": [[982, 987], ["open", "pickle.load"], "function", ["None"], ["", "def", "load_pickle", "(", "file_name", ")", ":", "\n", "    ", "with", "open", "(", "file_name", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.__init__": [[9, 17], ["yaml.load", "str", "open"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "args", ")", ":", "\n", "        ", "self", ".", "conf", "=", "yaml", ".", "load", "(", "open", "(", "args", ".", "config_file", ",", "'r'", ")", ")", "\n", "self", ".", "num_exp", "=", "str", "(", "args", ".", "num_expr", ")", "\n", "self", ".", "nocs_type", "=", "args", ".", "nocs_type", "\n", "self", ".", "pred_joint", "=", "args", ".", "pred_joint", "\n", "self", ".", "pred_joint_ind", "=", "args", ".", "pred_joint_ind", "\n", "self", ".", "early_split", "=", "args", ".", "early_split", "\n", "self", ".", "early_split_nocs", "=", "args", ".", "early_split_nocs", "# control early split for part & global NOCS estimation", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch": [[18, 22], ["network_config.NetworkConfig.conf.get"], "methods", ["None"], ["", "def", "fetch", "(", "self", ",", "name", ",", "default_value", "=", "None", ")", ":", "\n", "        ", "result", "=", "self", ".", "conf", ".", "get", "(", "name", ",", "default_value", ")", "\n", "assert", "result", "is", "not", "None", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_in_model_dir": [[23, 25], ["network_config.NetworkConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "get_in_model_dir", "(", "self", ")", ":", "\n", "        ", "return", "infos", ".", "base_path", "+", "'/'", "+", "self", ".", "fetch", "(", "'in_model_dir'", ")", "+", "'/'", "+", "self", ".", "num_exp", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_pretrain_model_dir": [[26, 28], ["network_config.NetworkConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "get_pretrain_model_dir", "(", "self", ")", ":", "\n", "        ", "return", "infos", ".", "base_path", "+", "'/'", "+", "self", ".", "fetch", "(", "'in_model_dir'", ")", "+", "'/2.001'", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_out_model_dir": [[29, 31], ["network_config.NetworkConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "get_out_model_dir", "(", "self", ")", ":", "\n", "        ", "return", "infos", ".", "base_path", "+", "'/'", "+", "self", ".", "fetch", "(", "'out_model_dir'", ")", "+", "'/'", "+", "self", ".", "num_exp", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_log_dir": [[32, 34], ["network_config.NetworkConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "get_log_dir", "(", "self", ")", ":", "\n", "        ", "return", "infos", ".", "base_path", "+", "'/'", "+", "self", ".", "fetch", "(", "'log_dir'", ")", "+", "'/'", "+", "self", ".", "num_exp", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_val_prediction_dir": [[35, 37], ["network_config.NetworkConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "get_val_prediction_dir", "(", "self", ")", ":", "\n", "        ", "return", "infos", ".", "base_path", "+", "'/'", "+", "self", ".", "fetch", "(", "'val_prediction_dir'", ")", "+", "'/'", "+", "self", ".", "num_exp", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_test_prediction_dir": [[38, 40], ["network_config.NetworkConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "get_test_prediction_dir", "(", "self", ")", ":", "\n", "        ", "return", "infos", ".", "base_path", "+", "'/'", "+", "self", ".", "fetch", "(", "'test_prediction_dir'", ")", "+", "'/'", "+", "self", ".", "num_exp", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_demo_prediction_dir": [[41, 43], ["network_config.NetworkConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "get_demo_prediction_dir", "(", "self", ")", ":", "\n", "        ", "return", "infos", ".", "base_path", "+", "'/'", "+", "self", ".", "fetch", "(", "'demo_prediction_dir'", ")", "+", "'/'", "+", "self", ".", "num_exp", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_nn_name": [[44, 46], ["network_config.NetworkConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "get_nn_name", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fetch", "(", "'nn_name'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_batch_size": [[47, 49], ["network_config.NetworkConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "get_batch_size", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fetch", "(", "'batch_size'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_nocs_type": [[50, 52], ["None"], "methods", ["None"], ["", "def", "get_nocs_type", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "nocs_type", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_parametri_type": [[53, 55], ["network_config.NetworkConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "get_parametri_type", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fetch", "(", "'parametri_type'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_pred_joint": [[56, 58], ["None"], "methods", ["None"], ["", "def", "get_pred_joint", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "pred_joint", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_total_loss_multiplier": [[59, 61], ["network_config.NetworkConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "get_total_loss_multiplier", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fetch", "(", "'total_loss_multiplier'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_nocs_loss_multiplier": [[62, 64], ["network_config.NetworkConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "get_nocs_loss_multiplier", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fetch", "(", "'nocs_loss_multiplier'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_gocs_loss_multiplier": [[65, 67], ["network_config.NetworkConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "get_gocs_loss_multiplier", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fetch", "(", "'gocs_loss_multiplier'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_offset_loss_multiplier": [[68, 70], ["network_config.NetworkConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "get_offset_loss_multiplier", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fetch", "(", "'offset_loss_multiplier'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_orient_loss_multiplier": [[71, 73], ["network_config.NetworkConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "get_orient_loss_multiplier", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fetch", "(", "'orient_loss_multiplier'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_index_loss_multiplier": [[74, 76], ["network_config.NetworkConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "get_index_loss_multiplier", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fetch", "(", "'index_loss_multiplier'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_direct_loss_multiplier": [[77, 79], ["network_config.NetworkConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "get_direct_loss_multiplier", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fetch", "(", "'direct_loss_multiplier'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_type_loss_multiplier": [[80, 82], ["network_config.NetworkConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "get_type_loss_multiplier", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fetch", "(", "'type_loss_multiplier'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_residue_loss_multiplier": [[83, 85], ["network_config.NetworkConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "get_residue_loss_multiplier", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fetch", "(", "'residue_loss_multiplier'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_parameter_loss_multiplier": [[86, 88], ["network_config.NetworkConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "get_parameter_loss_multiplier", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fetch", "(", "'parameter_loss_multiplier'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_miou_loss_multiplier": [[89, 91], ["network_config.NetworkConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "get_miou_loss_multiplier", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fetch", "(", "'miou_loss_multiplier'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_bn_decay_step": [[92, 94], ["network_config.NetworkConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "get_bn_decay_step", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fetch", "(", "'bn_decay_step'", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_init_learning_rate": [[95, 97], ["network_config.NetworkConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "get_init_learning_rate", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fetch", "(", "'init_learning_rate'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_decay_step": [[98, 100], ["network_config.NetworkConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "get_decay_step", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fetch", "(", "'decay_step'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_decay_rate": [[101, 103], ["network_config.NetworkConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "get_decay_rate", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fetch", "(", "'decay_rate'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_n_epochs": [[104, 106], ["network_config.NetworkConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "get_n_epochs", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fetch", "(", "'n_epochs'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_val_interval": [[107, 109], ["network_config.NetworkConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "get_val_interval", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fetch", "(", "'val_interval'", ",", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_snapshot_interval": [[110, 112], ["network_config.NetworkConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "get_snapshot_interval", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fetch", "(", "'snapshot_interval'", ",", "100", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_train_data_file": [[113, 115], ["network_config.NetworkConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "get_train_data_file", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fetch", "(", "'train_data_file'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_train_data_first_n": [[116, 118], ["network_config.NetworkConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "get_train_data_first_n", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fetch", "(", "'train_first_n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.is_train_data_add_noise": [[119, 121], ["network_config.NetworkConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "is_train_data_add_noise", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fetch", "(", "'train_data_add_noise'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_val_data_file": [[122, 124], ["network_config.NetworkConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "get_val_data_file", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fetch", "(", "'val_data_file'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_val_data_first_n": [[125, 127], ["network_config.NetworkConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "get_val_data_first_n", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fetch", "(", "'val_first_n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.is_val_data_add_noise": [[128, 130], ["network_config.NetworkConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "is_val_data_add_noise", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fetch", "(", "'val_data_add_noise'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_val_prediction_n_keep": [[131, 133], ["network_config.NetworkConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "get_val_prediction_n_keep", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fetch", "(", "'val_prediction_n_keep'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_test_data_file": [[134, 136], ["network_config.NetworkConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "get_test_data_file", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fetch", "(", "'test_data_file'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_test_data_first_n": [[137, 139], ["network_config.NetworkConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "get_test_data_first_n", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fetch", "(", "'test_first_n'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.is_test_data_add_noise": [[140, 142], ["network_config.NetworkConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "is_test_data_add_noise", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fetch", "(", "'test_data_add_noise'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_CUDA_visible_GPUs": [[143, 145], ["network_config.NetworkConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "get_CUDA_visible_GPUs", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fetch", "(", "'CUDA_visible_GPUs'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_writer_start_step": [[146, 148], ["network_config.NetworkConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "get_writer_start_step", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fetch", "(", "'writer_start_step'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.is_debug_mode": [[149, 151], ["network_config.NetworkConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "is_debug_mode", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fetch", "(", "'debug_mode'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_n_max_parts": [[152, 154], ["network_config.NetworkConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "get_n_max_parts", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fetch", "(", "'n_max_parts'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_list_of_primitives": [[155, 157], ["network_config.NetworkConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "get_list_of_primitives", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fetch", "(", "'list_of_primitives'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.use_direct_regression": [[158, 160], ["network_config.NetworkConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "use_direct_regression", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fetch", "(", "'use_direct_regression'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_nocs_loss": [[161, 163], ["network_config.NetworkConfig.fetch"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.fetch"], ["", "def", "get_nocs_loss", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "fetch", "(", "'coord_regress_loss'", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.get_3d_bbox": [[8, 38], ["hasattr", "bbox_3d.transpose.transpose", "numpy.array", "numpy.array"], "function", ["None"], ["def", "get_3d_bbox", "(", "scale", ",", "shift", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n        scale: [3] or scalar\n        shift: [3] or scalar\n    Return\n        bbox_3d: [3, N]\n\n    \"\"\"", "\n", "if", "hasattr", "(", "scale", ",", "\"__iter__\"", ")", ":", "\n", "        ", "bbox_3d", "=", "np", ".", "array", "(", "[", "[", "scale", "[", "0", "]", "/", "2", ",", "+", "scale", "[", "1", "]", "/", "2", ",", "scale", "[", "2", "]", "/", "2", "]", ",", "\n", "[", "scale", "[", "0", "]", "/", "2", ",", "+", "scale", "[", "1", "]", "/", "2", ",", "-", "scale", "[", "2", "]", "/", "2", "]", ",", "\n", "[", "-", "scale", "[", "0", "]", "/", "2", ",", "+", "scale", "[", "1", "]", "/", "2", ",", "scale", "[", "2", "]", "/", "2", "]", ",", "\n", "[", "-", "scale", "[", "0", "]", "/", "2", ",", "+", "scale", "[", "1", "]", "/", "2", ",", "-", "scale", "[", "2", "]", "/", "2", "]", ",", "\n", "[", "+", "scale", "[", "0", "]", "/", "2", ",", "-", "scale", "[", "1", "]", "/", "2", ",", "scale", "[", "2", "]", "/", "2", "]", ",", "\n", "[", "+", "scale", "[", "0", "]", "/", "2", ",", "-", "scale", "[", "1", "]", "/", "2", ",", "-", "scale", "[", "2", "]", "/", "2", "]", ",", "\n", "[", "-", "scale", "[", "0", "]", "/", "2", ",", "-", "scale", "[", "1", "]", "/", "2", ",", "scale", "[", "2", "]", "/", "2", "]", ",", "\n", "[", "-", "scale", "[", "0", "]", "/", "2", ",", "-", "scale", "[", "1", "]", "/", "2", ",", "-", "scale", "[", "2", "]", "/", "2", "]", "]", ")", "+", "shift", "\n", "", "else", ":", "\n", "        ", "bbox_3d", "=", "np", ".", "array", "(", "[", "[", "scale", "/", "2", ",", "+", "scale", "/", "2", ",", "scale", "/", "2", "]", ",", "\n", "[", "scale", "/", "2", ",", "+", "scale", "/", "2", ",", "-", "scale", "/", "2", "]", ",", "\n", "[", "-", "scale", "/", "2", ",", "+", "scale", "/", "2", ",", "scale", "/", "2", "]", ",", "\n", "[", "-", "scale", "/", "2", ",", "+", "scale", "/", "2", ",", "-", "scale", "/", "2", "]", ",", "\n", "[", "+", "scale", "/", "2", ",", "-", "scale", "/", "2", ",", "scale", "/", "2", "]", ",", "\n", "[", "+", "scale", "/", "2", ",", "-", "scale", "/", "2", ",", "-", "scale", "/", "2", "]", ",", "\n", "[", "-", "scale", "/", "2", ",", "-", "scale", "/", "2", ",", "scale", "/", "2", "]", ",", "\n", "[", "-", "scale", "/", "2", ",", "-", "scale", "/", "2", ",", "-", "scale", "/", "2", "]", "]", ")", "+", "shift", "\n", "\n", "", "bbox_3d", "=", "bbox_3d", ".", "transpose", "(", ")", "\n", "return", "bbox_3d", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.pts_inside_box": [[39, 54], ["numpy.matmul", "numpy.matmul", "numpy.matmul", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.logical_and", "numpy.reshape", "u1.reshape", "u2.reshape", "u3.reshape", "numpy.logical_and", "numpy.dot", "numpy.dot", "numpy.dot"], "function", ["None"], ["", "def", "pts_inside_box", "(", "pts", ",", "bbox", ")", ":", "\n", "# pts: N x 3", "\n", "# bbox: 8 x 3 (-1, 1, 1), (1, 1, 1), (1, -1, 1), (-1, -1, 1), (-1, 1, -1), (1, 1, -1), (1, -1, -1), (-1, -1, -1)", "\n", "    ", "u1", "=", "bbox", "[", "5", ",", ":", "]", "-", "bbox", "[", "4", ",", ":", "]", "\n", "u2", "=", "bbox", "[", "7", ",", ":", "]", "-", "bbox", "[", "4", ",", ":", "]", "\n", "u3", "=", "bbox", "[", "0", ",", ":", "]", "-", "bbox", "[", "4", ",", ":", "]", "\n", "\n", "up", "=", "pts", "-", "np", ".", "reshape", "(", "bbox", "[", "4", ",", ":", "]", ",", "(", "1", ",", "3", ")", ")", "\n", "p1", "=", "np", ".", "matmul", "(", "up", ",", "u1", ".", "reshape", "(", "(", "3", ",", "1", ")", ")", ")", "\n", "p2", "=", "np", ".", "matmul", "(", "up", ",", "u2", ".", "reshape", "(", "(", "3", ",", "1", ")", ")", ")", "\n", "p3", "=", "np", ".", "matmul", "(", "up", ",", "u3", ".", "reshape", "(", "(", "3", ",", "1", ")", ")", ")", "\n", "p1", "=", "np", ".", "logical_and", "(", "p1", ">", "0", ",", "p1", "<", "np", ".", "dot", "(", "u1", ",", "u1", ")", ")", "\n", "p2", "=", "np", ".", "logical_and", "(", "p2", ">", "0", ",", "p2", "<", "np", ".", "dot", "(", "u2", ",", "u2", ")", ")", "\n", "p3", "=", "np", ".", "logical_and", "(", "p3", ">", "0", ",", "p3", "<", "np", ".", "dot", "(", "u3", ",", "u3", ")", ")", "\n", "return", "np", ".", "logical_and", "(", "np", ".", "logical_and", "(", "p1", ",", "p2", ")", ",", "p3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.iou_3d": [[55, 70], ["numpy.min", "numpy.max", "numpy.linspace", "numpy.linspace", "numpy.linspace", "numpy.array", "d3_utils.pts_inside_box", "d3_utils.pts_inside_box", "numpy.sum", "numpy.sum", "numpy.concatenate", "numpy.concatenate", "numpy.logical_and", "numpy.logical_or", "float", "itertools.product"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.pts_inside_box", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.pts_inside_box"], ["", "def", "iou_3d", "(", "bbox1", ",", "bbox2", ",", "nres", "=", "50", ")", ":", "\n", "    ", "bmin", "=", "np", ".", "min", "(", "np", ".", "concatenate", "(", "(", "bbox1", ",", "bbox2", ")", ",", "0", ")", ",", "0", ")", "\n", "bmax", "=", "np", ".", "max", "(", "np", ".", "concatenate", "(", "(", "bbox1", ",", "bbox2", ")", ",", "0", ")", ",", "0", ")", "\n", "xs", "=", "np", ".", "linspace", "(", "bmin", "[", "0", "]", ",", "bmax", "[", "0", "]", ",", "nres", ")", "\n", "ys", "=", "np", ".", "linspace", "(", "bmin", "[", "1", "]", ",", "bmax", "[", "1", "]", ",", "nres", ")", "\n", "zs", "=", "np", ".", "linspace", "(", "bmin", "[", "2", "]", ",", "bmax", "[", "2", "]", ",", "nres", ")", "\n", "pts", "=", "np", ".", "array", "(", "[", "x", "for", "x", "in", "itertools", ".", "product", "(", "xs", ",", "ys", ",", "zs", ")", "]", ")", "\n", "flag1", "=", "pts_inside_box", "(", "pts", ",", "bbox1", ")", "\n", "flag2", "=", "pts_inside_box", "(", "pts", ",", "bbox2", ")", "\n", "intersect", "=", "np", ".", "sum", "(", "np", ".", "logical_and", "(", "flag1", ",", "flag2", ")", ")", "\n", "union", "=", "np", ".", "sum", "(", "np", ".", "logical_or", "(", "flag1", ",", "flag2", ")", ")", "\n", "if", "union", "==", "0", ":", "\n", "        ", "return", "1", "\n", "", "else", ":", "\n", "        ", "return", "intersect", "/", "float", "(", "union", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.transform_coordinates_3d": [[71, 87], ["numpy.vstack", "coordinates.transpose.transpose", "numpy.ones"], "function", ["None"], ["", "", "def", "transform_coordinates_3d", "(", "coordinates", ",", "RT", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n        coordinates: [3, N]\n        RT: [4, 4]\n    Return\n        new_coordinates: [3, N]\n\n    \"\"\"", "\n", "if", "coordinates", ".", "shape", "[", "0", "]", "!=", "3", "and", "coordinates", ".", "shape", "[", "1", "]", "==", "3", ":", "\n", "# print('transpose box channels')", "\n", "        ", "coordinates", "=", "coordinates", ".", "transpose", "(", ")", "\n", "", "coordinates", "=", "np", ".", "vstack", "(", "[", "coordinates", ",", "np", ".", "ones", "(", "(", "1", ",", "coordinates", ".", "shape", "[", "1", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "]", ")", "\n", "new_coordinates", "=", "RT", "@", "coordinates", "\n", "new_coordinates", "=", "new_coordinates", "[", ":", "3", ",", ":", "]", "/", "new_coordinates", "[", "3", ",", ":", "]", "\n", "return", "new_coordinates", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.calculate_2d_projections": [[88, 102], ["np.array.transpose", "numpy.array"], "function", ["None"], ["", "def", "calculate_2d_projections", "(", "coordinates_3d", ",", "intrinsics", ")", ":", "\n", "    ", "\"\"\"\n    Input:\n        coordinates: [3, N]\n        intrinsics: [3, 3]\n    Return\n        projected_coordinates: [N, 2]\n    \"\"\"", "\n", "projected_coordinates", "=", "intrinsics", "@", "coordinates_3d", "\n", "projected_coordinates", "=", "projected_coordinates", "[", ":", "2", ",", ":", "]", "/", "projected_coordinates", "[", "2", ",", ":", "]", "\n", "projected_coordinates", "=", "projected_coordinates", ".", "transpose", "(", ")", "\n", "projected_coordinates", "=", "np", ".", "array", "(", "projected_coordinates", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "\n", "return", "projected_coordinates", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.compute_RT_distances": [[104, 136], ["numpy.array_equal", "numpy.array_equal", "numpy.cbrt", "numpy.cbrt", "R2.transpose", "numpy.linalg.norm", "numpy.array", "print", "numpy.linalg.det", "numpy.linalg.det", "numpy.arccos", "numpy.trace"], "function", ["None"], ["", "def", "compute_RT_distances", "(", "RT_1", ",", "RT_2", ")", ":", "\n", "    ", "'''\n    :param RT_1: [4, 4]. homogeneous affine transformation\n    :param RT_2: [4, 4]. homogeneous affine transformation\n    :return: theta: angle difference of R in degree, shift: l2 difference of T in centimeter\n    '''", "\n", "#print(RT_1[3, :], RT_2[3, :])", "\n", "## make sure the last row is [0, 0, 0, 1]", "\n", "if", "RT_1", "is", "None", "or", "RT_2", "is", "None", ":", "\n", "        ", "return", "-", "1", "\n", "\n", "", "try", ":", "\n", "        ", "assert", "np", ".", "array_equal", "(", "RT_1", "[", "3", ",", ":", "]", ",", "RT_2", "[", "3", ",", ":", "]", ")", "\n", "assert", "np", ".", "array_equal", "(", "RT_1", "[", "3", ",", ":", "]", ",", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", ",", "1", "]", ")", ")", "\n", "", "except", "AssertionError", ":", "\n", "        ", "print", "(", "RT_1", "[", "3", ",", ":", "]", ",", "RT_2", "[", "3", ",", ":", "]", ")", "\n", "\n", "", "R1", "=", "RT_1", "[", ":", "3", ",", ":", "3", "]", "/", "np", ".", "cbrt", "(", "np", ".", "linalg", ".", "det", "(", "RT_1", "[", ":", "3", ",", ":", "3", "]", ")", ")", "\n", "T1", "=", "RT_1", "[", ":", "3", ",", "3", "]", "\n", "\n", "R2", "=", "RT_2", "[", ":", "3", ",", ":", "3", "]", "/", "np", ".", "cbrt", "(", "np", ".", "linalg", ".", "det", "(", "RT_2", "[", ":", "3", ",", ":", "3", "]", ")", ")", "\n", "T2", "=", "RT_2", "[", ":", "3", ",", "3", "]", "\n", "\n", "R", "=", "R1", "@", "R2", ".", "transpose", "(", ")", "\n", "theta", "=", "np", ".", "arccos", "(", "(", "np", ".", "trace", "(", "R", ")", "-", "1", ")", "/", "2", ")", "*", "180", "/", "np", ".", "pi", "\n", "shift", "=", "np", ".", "linalg", ".", "norm", "(", "T1", "-", "T2", ")", "*", "100", "\n", "# print(theta, shift)", "\n", "\n", "if", "theta", "<", "5", "and", "shift", "<", "5", ":", "\n", "        ", "return", "10", "-", "theta", "-", "shift", "\n", "", "else", ":", "\n", "        ", "return", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.axis_diff_degree": [[137, 143], ["v1.reshape.reshape", "v2.reshape.reshape", "min", "numpy.arccos", "numpy.sum", "numpy.linalg.norm", "numpy.linalg.norm"], "function", ["None"], ["", "", "def", "axis_diff_degree", "(", "v1", ",", "v2", ")", ":", "\n", "    ", "v1", "=", "v1", ".", "reshape", "(", "-", "1", ")", "\n", "v2", "=", "v2", ".", "reshape", "(", "-", "1", ")", "\n", "r_diff", "=", "np", ".", "arccos", "(", "np", ".", "sum", "(", "v1", "*", "v2", ")", "/", "(", "np", ".", "linalg", ".", "norm", "(", "v1", ")", "*", "np", ".", "linalg", ".", "norm", "(", "v2", ")", ")", ")", "*", "180", "/", "np", ".", "pi", "\n", "# print(r_diff)", "\n", "return", "min", "(", "r_diff", ",", "180", "-", "r_diff", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rot_diff_degree": [[144, 146], ["d3_utils.rot_diff_rad"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rot_diff_rad"], ["", "def", "rot_diff_degree", "(", "rot1", ",", "rot2", ")", ":", "\n", "    ", "return", "rot_diff_rad", "(", "rot1", ",", "rot2", ")", "/", "np", ".", "pi", "*", "180", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rot_diff_rad": [[147, 149], ["numpy.arccos", "numpy.trace", "numpy.matmul"], "function", ["None"], ["", "def", "rot_diff_rad", "(", "rot1", ",", "rot2", ")", ":", "\n", "    ", "return", "np", ".", "arccos", "(", "(", "np", ".", "trace", "(", "np", ".", "matmul", "(", "rot1", ",", "rot2", ".", "T", ")", ")", "-", "1", ")", "/", "2", ")", "%", "(", "2", "*", "np", ".", "pi", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rotate_points_with_rotvec": [[150, 164], ["numpy.cos", "numpy.sin", "numpy.linalg.norm", "numpy.errstate", "numpy.nan_to_num", "numpy.sum", "numpy.cross"], "function", ["None"], ["", "def", "rotate_points_with_rotvec", "(", "points", ",", "rot_vecs", ")", ":", "\n", "    ", "\"\"\"Rotate points by given rotation vectors.\n\n    Rodrigues' rotation formula is used.\n    \"\"\"", "\n", "theta", "=", "np", ".", "linalg", ".", "norm", "(", "rot_vecs", ",", "axis", "=", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "with", "np", ".", "errstate", "(", "invalid", "=", "'ignore'", ")", ":", "\n", "        ", "v", "=", "rot_vecs", "/", "theta", "\n", "v", "=", "np", ".", "nan_to_num", "(", "v", ")", "\n", "", "dot", "=", "np", ".", "sum", "(", "points", "*", "v", ",", "axis", "=", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "cos_theta", "=", "np", ".", "cos", "(", "theta", ")", "\n", "sin_theta", "=", "np", ".", "sin", "(", "theta", ")", "\n", "\n", "return", "cos_theta", "*", "points", "+", "sin_theta", "*", "np", ".", "cross", "(", "v", ",", "points", ")", "+", "dot", "*", "(", "1", "-", "cos_theta", ")", "*", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.dist_between_3d_lines": [[165, 175], ["p1.reshape.reshape", "p2.reshape.reshape", "e1.reshape.reshape", "e2.reshape.reshape", "numpy.cross", "numpy.sum", "numpy.abs", "numpy.linalg.norm"], "function", ["None"], ["", "def", "dist_between_3d_lines", "(", "p1", ",", "e1", ",", "p2", ",", "e2", ")", ":", "\n", "    ", "p1", "=", "p1", ".", "reshape", "(", "-", "1", ")", "\n", "p2", "=", "p2", ".", "reshape", "(", "-", "1", ")", "\n", "e1", "=", "e1", ".", "reshape", "(", "-", "1", ")", "\n", "e2", "=", "e2", ".", "reshape", "(", "-", "1", ")", "\n", "orth_vect", "=", "np", ".", "cross", "(", "e1", ",", "e2", ")", "\n", "product", "=", "np", ".", "sum", "(", "orth_vect", "*", "(", "p1", "-", "p2", ")", ")", "\n", "dist", "=", "product", "/", "np", ".", "linalg", ".", "norm", "(", "orth_vect", ")", "\n", "\n", "return", "np", ".", "abs", "(", "dist", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.project3d": [[176, 190], ["numpy.dot", "print", "u.astype.astype", "v.astype.astype", "print"], "function", ["None"], ["", "def", "project3d", "(", "pcloud_target", ",", "projMat", ",", "height", "=", "512", ",", "width", "=", "512", ")", ":", "\n", "    ", "pcloud_projected", "=", "np", ".", "dot", "(", "pcloud_target", ",", "projMat", ".", "T", ")", "\n", "pcloud_projected_ndc", "=", "pcloud_projected", "/", "pcloud_projected", "[", ":", ",", "3", ":", "4", "]", "\n", "img_coord", "=", "(", "pcloud_projected_ndc", "[", ":", ",", "0", ":", "2", "]", "+", "1", ")", "/", "(", "1", "/", "256", ")", "\n", "print", "(", "'transformed image coordinates:\\n'", ",", "img_coord", ".", "shape", ")", "\n", "u", "=", "img_coord", "[", ":", ",", "0", "]", "\n", "v", "=", "img_coord", "[", ":", ",", "1", "]", "\n", "u", "=", "u", ".", "astype", "(", "np", ".", "int16", ")", "\n", "v", "=", "v", ".", "astype", "(", "np", ".", "int16", ")", "\n", "v", "=", "512", "-", "v", "\n", "print", "(", "'u0, v0:\\n'", ",", "u", "[", "0", "]", ",", "v", "[", "0", "]", ")", "\n", "# rgb_raw[v, u]   = 250*np.array([0, 0, 1])              #rgb_raw[u, v] +", "\n", "\n", "return", "u", ",", "v", "# x, y in cv coords", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.point_3d_offset_joint": [[192, 204], ["len", "numpy.array", "numpy.array", "numpy.array().reshape", "numpy.array", "numpy.dot", "numpy.linalg.norm"], "function", ["None"], ["", "def", "point_3d_offset_joint", "(", "joint", ",", "point", ")", ":", "\n", "    ", "\"\"\"\n    joint: [x, y, z] or [[x, y, z] + [rx, ry, rz]]\n    point: N * 3\n    \"\"\"", "\n", "if", "len", "(", "joint", ")", "==", "2", ":", "\n", "        ", "P0", "=", "np", ".", "array", "(", "joint", "[", "0", "]", ")", "\n", "P", "=", "np", ".", "array", "(", "point", ")", "\n", "l", "=", "np", ".", "array", "(", "joint", "[", "1", "]", ")", ".", "reshape", "(", "1", ",", "3", ")", "\n", "P0P", "=", "P", "-", "P0", "\n", "PP", "=", "np", ".", "dot", "(", "P0P", ",", "l", ".", "T", ")", "*", "l", "/", "np", ".", "linalg", ".", "norm", "(", "l", ")", "**", "2", "-", "P0P", "\n", "", "return", "PP", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rotate_pts": [[206, 221], ["numpy.matmul", "numpy.linalg.svd", "numpy.matmul", "numpy.mean", "numpy.mean", "numpy.linalg.det", "numpy.linalg.det"], "function", ["None"], ["", "def", "rotate_pts", "(", "source", ",", "target", ")", ":", "\n", "    ", "'''\n    func: compute rotation between source: [N x 3], target: [N x 3]\n    '''", "\n", "# pre-centering", "\n", "source", "=", "source", "-", "np", ".", "mean", "(", "source", ",", "0", ",", "keepdims", "=", "True", ")", "\n", "target", "=", "target", "-", "np", ".", "mean", "(", "target", ",", "0", ",", "keepdims", "=", "True", ")", "\n", "M", "=", "np", ".", "matmul", "(", "target", ".", "T", ",", "source", ")", "\n", "U", ",", "D", ",", "Vh", "=", "np", ".", "linalg", ".", "svd", "(", "M", ",", "full_matrices", "=", "True", ")", "\n", "d", "=", "(", "np", ".", "linalg", ".", "det", "(", "U", ")", "*", "np", ".", "linalg", ".", "det", "(", "Vh", ")", ")", "<", "0.0", "\n", "if", "d", ":", "\n", "        ", "D", "[", "-", "1", "]", "=", "-", "D", "[", "-", "1", "]", "\n", "U", "[", ":", ",", "-", "1", "]", "=", "-", "U", "[", ":", ",", "-", "1", "]", "\n", "", "R", "=", "np", ".", "matmul", "(", "U", ",", "Vh", ")", "\n", "return", "R", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.transform_pts": [[223, 235], ["d3_utils.rotate_pts", "d3_utils.scale_pts", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.matmul"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rotate_pts", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.scale_pts"], ["", "def", "transform_pts", "(", "source", ",", "target", ")", ":", "\n", "# source: [N x 3], target: [N x 3]", "\n", "# pre-centering and compute rotation", "\n", "    ", "source_centered", "=", "source", "-", "np", ".", "mean", "(", "source", ",", "0", ",", "keepdims", "=", "True", ")", "\n", "target_centered", "=", "target", "-", "np", ".", "mean", "(", "target", ",", "0", ",", "keepdims", "=", "True", ")", "\n", "rotation", "=", "rotate_pts", "(", "source_centered", ",", "target_centered", ")", "\n", "\n", "scale", "=", "scale_pts", "(", "source_centered", ",", "target_centered", ")", "\n", "\n", "# compute translation", "\n", "translation", "=", "np", ".", "mean", "(", "target", ".", "T", "-", "scale", "*", "np", ".", "matmul", "(", "rotation", ",", "source", ".", "T", ")", ",", "1", ")", "\n", "return", "rotation", ",", "scale", ",", "translation", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.scale_pts": [[237, 247], ["numpy.sqrt().reshape", "numpy.sqrt().reshape", "source.reshape", "source.reshape", "target.reshape", "target.reshape", "numpy.dot", "numpy.sqrt", "numpy.sqrt", "numpy.dot", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "scale_pts", "(", "source", ",", "target", ")", ":", "\n", "    ", "'''\n    func: compute scaling factor between source: [N x 3], target: [N x 3]\n    '''", "\n", "pdist_s", "=", "source", ".", "reshape", "(", "source", ".", "shape", "[", "0", "]", ",", "1", ",", "3", ")", "-", "source", ".", "reshape", "(", "1", ",", "source", ".", "shape", "[", "0", "]", ",", "3", ")", "\n", "A", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "pdist_s", "**", "2", ",", "2", ")", ")", ".", "reshape", "(", "-", "1", ")", "\n", "pdist_t", "=", "target", ".", "reshape", "(", "target", ".", "shape", "[", "0", "]", ",", "1", ",", "3", ")", "-", "target", ".", "reshape", "(", "1", ",", "target", ".", "shape", "[", "0", "]", ",", "3", ")", "\n", "b", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "pdist_t", "**", "2", ",", "2", ")", ")", ".", "reshape", "(", "-", "1", ")", "\n", "scale", "=", "np", ".", "dot", "(", "A", ",", "b", ")", "/", "(", "np", ".", "dot", "(", "A", ",", "A", ")", "+", "1e-6", ")", "\n", "return", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.compute_3d_rotation_axis": [[249, 289], ["len", "print", "numpy.dot", "numpy.concatenate", "range", "numpy.dot", "axis_list.append", "angle_list.append", "numpy.ones", "numpy.concatenate", "numpy.random.randint", "d3_utils.estimate_joint_HL", "d3_utils.point_3d_offset_joint", "d3_utils.point_3d_offset_joint", "range", "print", "angle_list.append", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.arccos", "angle.append", "numpy.ones", "position.reshape", "position.reshape", "orient.reshape", "numpy.dot", "sum", "len", "source_offset_arr[].reshape", "rotated_offset_arr[].reshape"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.estimate_joint_HL", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.point_3d_offset_joint", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.point_3d_offset_joint"], ["", "def", "compute_3d_rotation_axis", "(", "pts_0", ",", "pts_1", ",", "rt", ",", "orientation", "=", "None", ",", "line_pts", "=", "None", ",", "methods", "=", "'H-L'", ",", "item", "=", "'eyeglasses'", ",", "viz", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    pts_0: points in NOCS space of cannonical status(scaled)\n    pts_1: points in camera space retrieved from depth image;\n    rt: rotation + translation in 4 * 4\n    \"\"\"", "\n", "num_parts", "=", "len", "(", "rt", ")", "\n", "print", "(", "'we have {} parts'", ".", "format", "(", "num_parts", ")", ")", "\n", "\n", "chained_pts", "=", "[", "None", "]", "*", "num_parts", "\n", "delta_Ps", "=", "[", "None", "]", "*", "num_parts", "\n", "chained_pts", "[", "0", "]", "=", "np", ".", "dot", "(", "np", ".", "concatenate", "(", "[", "pts_0", "[", "0", "]", ",", "np", ".", "ones", "(", "(", "pts_0", "[", "0", "]", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "]", ",", "axis", "=", "1", ")", ",", "rt", "[", "0", "]", ".", "T", ")", "\n", "axis_list", "=", "[", "]", "\n", "angle_list", "=", "[", "]", "\n", "if", "item", "==", "'eyeglasses'", ":", "\n", "        ", "for", "j", "in", "range", "(", "1", ",", "num_parts", ")", ":", "\n", "            ", "chained_pts", "[", "j", "]", "=", "np", ".", "dot", "(", "np", ".", "concatenate", "(", "[", "pts_0", "[", "j", "]", ",", "np", ".", "ones", "(", "(", "pts_0", "[", "j", "]", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "]", ",", "axis", "=", "1", ")", ",", "rt", "[", "0", "]", ".", "T", ")", "\n", "\n", "if", "methods", "==", "'H-L'", ":", "\n", "                ", "RandIdx", "=", "np", ".", "random", ".", "randint", "(", "chained_pts", "[", "j", "]", ".", "shape", "[", "1", "]", ",", "size", "=", "5", ")", "\n", "orient", ",", "position", "=", "estimate_joint_HL", "(", "chained_pts", "[", "j", "]", "[", "RandIdx", ",", "0", ":", "3", "]", ",", "pts_1", "[", "j", "]", "[", "RandIdx", ",", "0", ":", "3", "]", ")", "\n", "joint_axis", "=", "{", "}", "\n", "joint_axis", "[", "'orient'", "]", "=", "orient", "\n", "joint_axis", "[", "'position'", "]", "=", "position", "\n", "source_offset_arr", "=", "point_3d_offset_joint", "(", "[", "position", ".", "reshape", "(", "1", ",", "3", ")", ",", "orient", "]", ",", "chained_pts", "[", "j", "]", "[", "RandIdx", ",", "0", ":", "3", "]", ")", "\n", "rotated_offset_arr", "=", "point_3d_offset_joint", "(", "[", "position", ".", "reshape", "(", "1", ",", "3", ")", ",", "orient", ".", "reshape", "(", "1", ",", "3", ")", "]", ",", "pts_1", "[", "j", "]", "[", "RandIdx", ",", "0", ":", "3", "]", ")", "\n", "angle", "=", "[", "]", "\n", "for", "m", "in", "range", "(", "RandIdx", ".", "shape", "[", "0", "]", ")", ":", "\n", "                    ", "modulus_0", "=", "np", ".", "linalg", ".", "norm", "(", "source_offset_arr", "[", "m", ",", ":", "]", ")", "\n", "modulus_1", "=", "np", ".", "linalg", ".", "norm", "(", "rotated_offset_arr", "[", "m", ",", ":", "]", ")", "\n", "cos_angle", "=", "np", ".", "dot", "(", "source_offset_arr", "[", "m", ",", ":", "]", ".", "reshape", "(", "1", ",", "3", ")", ",", "rotated_offset_arr", "[", "m", ",", ":", "]", ".", "reshape", "(", "3", ",", "1", ")", ")", "/", "(", "modulus_0", "*", "modulus_1", ")", "\n", "angle_per_pair", "=", "np", ".", "arccos", "(", "cos_angle", ")", "\n", "angle", ".", "append", "(", "angle_per_pair", ")", "\n", "", "print", "(", "'angle per pair from multiple pairs: {}'", ",", "angle", ")", "\n", "angle_list", ".", "append", "(", "sum", "(", "angle", ")", "/", "len", "(", "angle", ")", ")", "\n", "\n", "", "axis_list", ".", "append", "(", "joint_axis", ")", "\n", "angle_list", ".", "append", "(", "angle", ")", "\n", "\n", "", "", "return", "axis_list", ",", "angle_list", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.point_rotate_about_axis": [[290, 306], ["anchor.reshape", "unitvec.reshape", "numpy.zeros_like", "math.sin", "math.sin", "math.sin", "math.cos", "math.cos", "math.cos", "math.cos", "math.cos", "math.cos"], "function", ["None"], ["", "def", "point_rotate_about_axis", "(", "pts", ",", "anchor", ",", "unitvec", ",", "theta", ")", ":", "\n", "    ", "a", ",", "b", ",", "c", "=", "anchor", ".", "reshape", "(", "3", ")", "\n", "u", ",", "v", ",", "w", "=", "unitvec", ".", "reshape", "(", "3", ")", "\n", "x", "=", "pts", "[", ":", ",", "0", "]", "\n", "y", "=", "pts", "[", ":", ",", "1", "]", "\n", "z", "=", "pts", "[", ":", ",", "2", "]", "\n", "ss", "=", "u", "*", "x", "+", "v", "*", "y", "+", "w", "*", "z", "\n", "x_rotated", "=", "(", "a", "*", "(", "v", "**", "2", "+", "w", "**", "2", ")", "-", "u", "*", "(", "b", "*", "v", "+", "c", "*", "w", "-", "ss", ")", ")", "*", "(", "1", "-", "cos", "(", "theta", ")", ")", "+", "x", "*", "cos", "(", "theta", ")", "+", "(", "-", "c", "*", "v", "+", "b", "*", "w", "-", "w", "*", "y", "+", "v", "*", "z", ")", "*", "sin", "(", "theta", ")", "\n", "y_rotated", "=", "(", "b", "*", "(", "u", "**", "2", "+", "w", "**", "2", ")", "-", "v", "*", "(", "a", "*", "u", "+", "c", "*", "w", "-", "ss", ")", ")", "*", "(", "1", "-", "cos", "(", "theta", ")", ")", "+", "y", "*", "cos", "(", "theta", ")", "+", "(", "c", "*", "u", "-", "a", "*", "w", "+", "w", "*", "x", "-", "u", "*", "z", ")", "*", "sin", "(", "theta", ")", "\n", "z_rotated", "=", "(", "c", "*", "(", "u", "**", "2", "+", "v", "**", "2", ")", "-", "w", "*", "(", "a", "*", "u", "+", "b", "*", "v", "-", "ss", ")", ")", "*", "(", "1", "-", "cos", "(", "theta", ")", ")", "+", "z", "*", "cos", "(", "theta", ")", "+", "(", "-", "b", "*", "u", "+", "a", "*", "v", "-", "v", "*", "x", "+", "u", "*", "y", ")", "*", "sin", "(", "theta", ")", "\n", "rotated_pts", "=", "np", ".", "zeros_like", "(", "pts", ")", "\n", "rotated_pts", "[", ":", ",", "0", "]", "=", "x_rotated", "\n", "rotated_pts", "[", ":", ",", "1", "]", "=", "y_rotated", "\n", "rotated_pts", "[", ":", ",", "2", "]", "=", "z_rotated", "\n", "\n", "return", "rotated_pts", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.estimate_joint_HL": [[307, 329], ["numpy.zeros", "numpy.zeros", "range", "numpy.linalg.eig", "print", "print", "v[].reshape", "numpy.linalg.pinv", "numpy.dot", "print", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "delta_P[].reshape", "delta_P[].reshape", "delta_P[].reshape", "mid_pts[].reshape", "numpy.argmin", "numpy.squeeze"], "function", ["None"], ["", "def", "estimate_joint_HL", "(", "source_pts", ",", "rotated_pts", ")", ":", "\n", "# estimate offsets", "\n", "    ", "delta_P", "=", "rotated_pts", "-", "source_pts", "\n", "assert", "delta_P", ".", "shape", "[", "1", "]", "==", "3", ",", "'points coordinates dimension is wrong, current is {}'", ".", "format", "(", "delta_P", ".", "shape", ")", "\n", "mid_pts", "=", "(", "source_pts", "+", "rotated_pts", ")", "/", "2", "\n", "CC", "=", "np", ".", "zeros", "(", "(", "3", ",", "3", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "BB", "=", "np", ".", "zeros", "(", "(", "delta_P", ".", "shape", "[", "0", "]", ",", "1", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "j", "in", "range", "(", "0", ",", "delta_P", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "CC", "+=", "np", ".", "dot", "(", "delta_P", "[", "j", ",", ":", "]", ".", "reshape", "(", "3", ",", "1", ")", ",", "delta_P", "[", "j", ",", ":", "]", ".", "reshape", "(", "1", ",", "3", ")", ")", "\n", "BB", "[", "j", "]", "=", "np", ".", "dot", "(", "delta_P", "[", "j", ",", ":", "]", ".", "reshape", "(", "1", ",", "3", ")", ",", "mid_pts", "[", "j", ",", ":", "]", ".", "reshape", "(", "(", "3", ",", "1", ")", ")", ")", "\n", "", "w", ",", "v", "=", "np", ".", "linalg", ".", "eig", "(", "CC", ")", "\n", "print", "(", "'eigen vectors are: \\n'", ",", "v", ")", "\n", "print", "(", "'eigne values are: \\n'", ",", "w", ")", "\n", "orient", "=", "v", "[", ":", ",", "np", ".", "argmin", "(", "np", ".", "squeeze", "(", "w", ")", ")", "]", ".", "reshape", "(", "3", ",", "1", ")", "\n", "\n", "# we already decouple the orient & position", "\n", "mat_1", "=", "np", ".", "linalg", ".", "pinv", "(", "np", ".", "dot", "(", "delta_P", ".", "T", ",", "delta_P", ")", ")", "\n", "\n", "position", "=", "np", ".", "dot", "(", "np", ".", "dot", "(", "mat_1", ",", "delta_P", ".", "T", ")", ",", "BB", ")", "\n", "print", "(", "'orient has shape {}, position has shape {}'", ".", "format", "(", "orient", ".", "shape", ",", "position", ".", "shape", ")", ")", "\n", "\n", "return", "orient", ",", "position", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.architecture.get_per_point_model": [[17, 84], ["tensorflow.nn.softmax", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.tanh", "tensorflow.nn.tanh", "tensorflow.nn.softmax", "tensorflow.variable_scope", "out_dims.append", "pointnet_plusplus.architectures.build_pointnet2_shared", "architecture.joint_est_model", "out_dims.append", "print", "tensorflow.variable_scope", "enumerate", "tensorflow.variable_scope", "enumerate", "net_results.append", "pointnet_plusplus.utils.tf_util.conv1d", "net_results.append", "pointnet_plusplus.utils.tf_util.conv1d", "pointnet_plusplus.utils.tf_util.conv1d", "pointnet_plusplus.utils.tf_util.conv1d"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.pointnet_plusplus.architectures.build_pointnet2_shared", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.architecture.joint_est_model", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.conv1d", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.conv1d", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.conv1d", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.conv1d"], ["def", "get_per_point_model", "(", "scope", ",", "P", ",", "n_max_parts", ",", "is_training", ",", "bn_decay", ",", "early_split", "=", "False", ",", "early_split_nocs", "=", "False", ",", "mixed_pred", "=", "False", ",", "pred_joint", "=", "False", ",", "pred_joint_ind", "=", "False", ")", ":", "\n", "    ", "'''\n        Inputs:\n            - P: BxNx3 tensor, the input point cloud\n            - K := n_max_parts\n        Outputs: a dict, containing\n            - W: BxNxK, segmentation instances, fractional\n            - nocs_per_points: BxNx3, nocs per point\n            - confi_per_points: BxNx1,\n            - parameters - a dict, each entry is a BxKx... tensor, not using here\n    '''", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "        ", "out_dims", "=", "[", "n_max_parts", ",", "3", "*", "n_max_parts", "]", "\n", "if", "mixed_pred", ":", "\n", "            ", "out_dims", ".", "append", "(", "3", ")", "\n", "", "out_dims", ".", "append", "(", "1", ")", "\n", "net", "=", "build_pointnet2_shared", "(", "'est_net'", ",", "X", "=", "P", ",", "out_dims", "=", "out_dims", ",", "is_training", "=", "is_training", ",", "bn_decay", "=", "bn_decay", ")", "\n", "# early_split by default", "\n", "if", "early_split_nocs", ":", "\n", "            ", "print", "(", "'Now we are using early_split_nocs'", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'nocs_net'", ")", ":", "\n", "                ", "net_results", "=", "[", "]", "\n", "for", "idx", ",", "out_dim", "in", "enumerate", "(", "out_dims", ")", ":", "\n", "                    ", "if", "idx", ">", "0", ":", "\n", "                        ", "net_shared", "=", "net", "\n", "net_shared", "=", "tf_util", ".", "conv1d", "(", "net_shared", ",", "128", ",", "1", ",", "padding", "=", "'VALID'", ",", "activation_fn", "=", "None", ",", "scope", "=", "'fc11_{}'", ".", "format", "(", "idx", ")", ")", "\n", "current_result", "=", "tf_util", ".", "conv1d", "(", "net_shared", ",", "out_dim", ",", "1", ",", "padding", "=", "'VALID'", ",", "activation_fn", "=", "None", ",", "scope", "=", "'fc2_{}'", ".", "format", "(", "idx", ")", ")", "\n", "", "else", ":", "\n", "                        ", "current_result", "=", "tf_util", ".", "conv1d", "(", "net", ",", "out_dim", ",", "1", ",", "padding", "=", "'VALID'", ",", "activation_fn", "=", "None", ",", "scope", "=", "'fc2_{}'", ".", "format", "(", "idx", ")", ")", "\n", "", "net_results", ".", "append", "(", "current_result", ")", "\n", "", "", "", "else", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'nocs_net'", ")", ":", "\n", "                ", "net_results", "=", "[", "]", "\n", "for", "idx", ",", "out_dim", "in", "enumerate", "(", "out_dims", ")", ":", "\n", "                    ", "current_result", "=", "tf_util", ".", "conv1d", "(", "net", ",", "out_dim", ",", "1", ",", "padding", "=", "'VALID'", ",", "activation_fn", "=", "None", ",", "scope", "=", "'fc2_{}'", ".", "format", "(", "idx", ")", ")", "\n", "net_results", ".", "append", "(", "current_result", ")", "\n", "\n", "", "", "", "if", "mixed_pred", ":", "\n", "            ", "W", ",", "nocs_per_points", ",", "gocs_per_points", ",", "confi_per_points", "=", "net_results", "\n", "", "else", ":", "\n", "            ", "W", ",", "nocs_per_points", ",", "confi_per_points", "=", "net_results", "\n", "# by default we predict joints", "\n", "", "joint_axis", ",", "unitvec", ",", "heatmap", ",", "joint_cls", "=", "joint_est_model", "(", "'joint_net'", ",", "X", "=", "net", ",", "is_training", "=", "is_training", ",", "bn_decay", "=", "bn_decay", ",", "pred_joint_ind", "=", "pred_joint_ind", ")", "\n", "\n", "", "W", "=", "tf", ".", "nn", ".", "softmax", "(", "W", ",", "axis", "=", "2", ")", "# BxNxK # maximum", "\n", "confi_per_points", "=", "tf", ".", "nn", ".", "sigmoid", "(", "confi_per_points", ")", "\n", "nocs_per_points", "=", "tf", ".", "nn", ".", "sigmoid", "(", "nocs_per_points", ")", "# BxNx3", "\n", "\n", "heatmap", "=", "tf", ".", "nn", ".", "sigmoid", "(", "heatmap", ")", "\n", "unitvec", "=", "tf", ".", "nn", ".", "tanh", "(", "unitvec", ")", "\n", "joint_axis", "=", "tf", ".", "nn", ".", "tanh", "(", "joint_axis", ")", "\n", "joint_cls", "=", "tf", ".", "nn", ".", "softmax", "(", "joint_cls", ",", "axis", "=", "2", ")", "\n", "\n", "pred", "=", "{", "\n", "'W'", ":", "W", ",", "\n", "'nocs_per_point'", ":", "nocs_per_points", ",", "\n", "'confi_per_point'", ":", "confi_per_points", ",", "\n", "'heatmap_per_point'", ":", "heatmap", ",", "\n", "'unitvec_per_point'", ":", "unitvec", ",", "\n", "'joint_axis_per_point'", ":", "joint_axis", ",", "\n", "'index_per_point'", ":", "joint_cls", ",", "\n", "}", "\n", "\n", "if", "mixed_pred", ":", "\n", "        ", "pred", "[", "'gocs_per_point'", "]", "=", "gocs_per_points", "\n", "\n", "", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.architecture.get_per_point_model_new": [[86, 162], ["tensorflow.nn.softmax", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.tanh", "tensorflow.nn.tanh", "tensorflow.nn.softmax", "tensorflow.variable_scope", "out_dims.append", "pointnet_plusplus.architectures.build_pointnet2_shared", "architecture.joint_est_model", "tensorflow.reshape", "print", "out_dims.append", "out_dims.append", "print", "tensorflow.nn.sigmoid", "tensorflow.nn.tanh", "tensorflow.tile", "tensorflow.variable_scope", "enumerate", "tensorflow.variable_scope", "enumerate", "tensorflow.expand_dims", "trans_per_points_tiled.get_shape().as_list", "tf.reshape.get_shape().as_list", "tf.reshape.get_shape().as_list", "trans_per_points_tiled.get_shape().as_list", "pointnet_plusplus.utils.tf_util.conv1d", "net_results.append", "pointnet_plusplus.utils.tf_util.conv1d", "net_results.append", "tensorflow.shape", "tensorflow.shape", "pointnet_plusplus.utils.tf_util.conv1d", "trans_per_points_tiled.get_shape", "tf.reshape.get_shape", "tf.reshape.get_shape", "trans_per_points_tiled.get_shape"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.pointnet_plusplus.architectures.build_pointnet2_shared", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.architecture.joint_est_model", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.conv1d", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.conv1d", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.conv1d"], ["", "def", "get_per_point_model_new", "(", "scope", ",", "P", ",", "n_max_parts", ",", "is_training", ",", "bn_decay", ",", "early_split", "=", "False", ",", "early_split_nocs", "=", "False", ",", "mixed_pred", "=", "False", ",", "pred_joint", "=", "False", ",", "pred_joint_ind", "=", "False", ")", ":", "\n", "    ", "'''\n        Inputs:\n            - P: BxNx3 tensor, the input point cloud\n            - K := n_max_parts\n        Outputs: a dict, containing\n            - W: BxNxK, segmentation instances, fractional\n            - nocs_per_points: BxNx3, nocs per point\n            - confi_per_points: BxNx1,\n            - parameters - a dict, each entry is a BxKx... tensor, not using here\n    '''", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "        ", "out_dims", "=", "[", "n_max_parts", ",", "3", "*", "n_max_parts", "]", "# seg + part NOCS", "\n", "if", "mixed_pred", ":", "\n", "            ", "out_dims", ".", "append", "(", "1", "*", "n_max_parts", ")", "# scale", "\n", "out_dims", ".", "append", "(", "3", "*", "n_max_parts", ")", "# translation", "\n", "", "out_dims", ".", "append", "(", "1", ")", "\n", "net", "=", "build_pointnet2_shared", "(", "'est_net'", ",", "X", "=", "P", ",", "out_dims", "=", "out_dims", ",", "is_training", "=", "is_training", ",", "bn_decay", "=", "bn_decay", ")", "\n", "\n", "if", "early_split_nocs", ":", "\n", "            ", "print", "(", "'Now we are using early_split_nocs'", ")", "\n", "with", "tf", ".", "variable_scope", "(", "'nocs_net'", ")", ":", "\n", "                ", "net_results", "=", "[", "]", "\n", "for", "idx", ",", "out_dim", "in", "enumerate", "(", "out_dims", ")", ":", "\n", "                    ", "net_shared", "=", "net", "\n", "if", "idx", "==", "1", ":", "\n", "                        ", "net_shared", "=", "tf_util", ".", "conv1d", "(", "net_shared", ",", "128", ",", "1", ",", "padding", "=", "'VALID'", ",", "activation_fn", "=", "None", ",", "scope", "=", "'fc11_{}'", ".", "format", "(", "idx", ")", ")", "\n", "", "current_result", "=", "tf_util", ".", "conv1d", "(", "net_shared", ",", "out_dim", ",", "1", ",", "padding", "=", "'VALID'", ",", "activation_fn", "=", "None", ",", "scope", "=", "'fc2_{}'", ".", "format", "(", "idx", ")", ")", "\n", "net_results", ".", "append", "(", "current_result", ")", "\n", "", "", "", "else", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'nocs_net'", ")", ":", "\n", "                ", "net_results", "=", "[", "]", "\n", "for", "idx", ",", "out_dim", "in", "enumerate", "(", "out_dims", ")", ":", "\n", "                    ", "current_result", "=", "tf_util", ".", "conv1d", "(", "net", ",", "out_dim", ",", "1", ",", "padding", "=", "'VALID'", ",", "activation_fn", "=", "None", ",", "scope", "=", "'fc2_{}'", ".", "format", "(", "idx", ")", ")", "\n", "net_results", ".", "append", "(", "current_result", ")", "\n", "\n", "", "", "", "if", "mixed_pred", ":", "\n", "            ", "W", ",", "nocs_per_points", ",", "scale_per_points", ",", "trans_per_points", ",", "confi_per_points", "=", "net_results", "\n", "scale_per_points", "=", "tf", ".", "nn", ".", "sigmoid", "(", "scale_per_points", ")", "\n", "trans_per_points", "=", "tf", ".", "nn", ".", "tanh", "(", "trans_per_points", ")", "\n", "", "else", ":", "\n", "            ", "W", ",", "nocs_per_points", ",", "confi_per_points", "=", "net_results", "\n", "\n", "", "joint_axis", ",", "unitvec", ",", "heatmap", ",", "joint_cls", "=", "joint_est_model", "(", "'joint_net'", ",", "X", "=", "net", ",", "is_training", "=", "is_training", ",", "bn_decay", "=", "bn_decay", ",", "pred_joint_ind", "=", "pred_joint_ind", ")", "\n", "\n", "", "W", "=", "tf", ".", "nn", ".", "softmax", "(", "W", ",", "axis", "=", "2", ")", "# BxNxK # maximum", "\n", "confi_per_points", "=", "tf", ".", "nn", ".", "sigmoid", "(", "confi_per_points", ")", "\n", "nocs_per_points", "=", "tf", ".", "nn", ".", "sigmoid", "(", "nocs_per_points", ")", "# BxNx3", "\n", "\n", "\n", "heatmap", "=", "tf", ".", "nn", ".", "sigmoid", "(", "heatmap", ")", "\n", "unitvec", "=", "tf", ".", "nn", ".", "tanh", "(", "unitvec", ")", "\n", "joint_axis", "=", "tf", ".", "nn", ".", "tanh", "(", "joint_axis", ")", "\n", "joint_cls", "=", "tf", ".", "nn", ".", "softmax", "(", "joint_cls", ",", "axis", "=", "2", ")", "\n", "\n", "pred", "=", "{", "\n", "'W'", ":", "W", ",", "\n", "'nocs_per_point'", ":", "nocs_per_points", ",", "\n", "'confi_per_point'", ":", "confi_per_points", ",", "\n", "'heatmap_per_point'", ":", "heatmap", ",", "\n", "'unitvec_per_point'", ":", "unitvec", ",", "\n", "'joint_axis_per_point'", ":", "joint_axis", ",", "\n", "'index_per_point'", ":", "joint_cls", "\n", "}", "\n", "\n", "if", "mixed_pred", ":", "\n", "# scale_per_points_tiled = tf.tile(scale_per_points, [1, 1, 3*n_max_parts])", "\n", "# trans_per_points_tiled = tf.tile(trans_per_points, [1, 1, n_max_parts])", "\n", "        ", "scale_per_points_tiled", "=", "tf", ".", "reshape", "(", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "scale_per_points", ",", "-", "1", ")", ",", "[", "1", ",", "1", ",", "1", ",", "3", "]", ")", ",", "[", "tf", ".", "shape", "(", "scale_per_points", ")", "[", "0", "]", ",", "tf", ".", "shape", "(", "scale_per_points", ")", "[", "1", "]", ",", "3", "*", "n_max_parts", "]", ")", "\n", "trans_per_points_tiled", "=", "trans_per_points", "\n", "assert", "trans_per_points_tiled", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "2", "]", "==", "scale_per_points_tiled", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "2", "]", "==", "3", "*", "n_max_parts", ",", "print", "(", "scale_per_points_tiled", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "2", "]", ",", "trans_per_points_tiled", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "2", "]", ")", "\n", "pred", "[", "'gocs_per_point'", "]", "=", "nocs_per_points", "*", "scale_per_points_tiled", "+", "trans_per_points_tiled", "\n", "pred", "[", "'global_scale'", "]", "=", "scale_per_points", "\n", "pred", "[", "'global_translation'", "]", "=", "trans_per_points", "\n", "\n", "", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.architecture.get_direct_regression_model_baseline": [[163, 193], ["pointnet_plusplus.architectures.build_pointnet2_cls", "range", "param_pair_list.append", "tensorflow.nn.tanh", "tensorflow.nn.tanh", "tensorflow.nn.sigmoid", "tensorflow.nn.tanh", "tensorflow.nn.tanh"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.pointnet_plusplus.architectures.build_pointnet2_cls"], ["", "def", "get_direct_regression_model_baseline", "(", "scope", ",", "P", ",", "n_max_parts", ",", "gt_dict", ",", "is_training", ",", "bn_decay", ",", "line_space", "=", "'orthogonal'", ")", ":", "\n", "    ", "\"\"\"\n    P: input pts, [N, 3];\n    output: [K, 7(split into 3, 3, 1)], K is the number of joints, is a kind of direct regression\n    \"\"\"", "\n", "# check dict keys and items", "\n", "if", "line_space", "==", "'orthogonal'", ":", "\n", "        ", "unit_param", "=", "[", "3", ",", "3", ",", "1", "]", "\n", "", "else", ":", "\n", "        ", "unit_param", "=", "[", "3", ",", "3", "]", "\n", "\n", "", "param_dim_list", "=", "unit_param", "*", "(", "n_max_parts", "-", "1", ")", "\n", "param_pair_list", "=", "[", "]", "\n", "reg_result", "=", "build_pointnet2_cls", "(", "'direct_reg_net'", ",", "point_cloud", "=", "P", ",", "out_dims", "=", "param_dim_list", ",", "is_training", "=", "is_training", ",", "bn_decay", "=", "bn_decay", ")", "\n", "for", "j", "in", "range", "(", "n_max_parts", "-", "1", ")", ":", "\n", "        ", "if", "line_space", "==", "'orthogonal'", ":", "\n", "            ", "axis", ",", "orth", ",", "dist", "=", "reg_result", "[", "j", "*", "3", ":", "(", "j", "+", "1", ")", "*", "3", "]", "\n", "direct_axis", "=", "tf", ".", "nn", ".", "tanh", "(", "axis", ")", "\n", "direct_orth", "=", "tf", ".", "nn", ".", "tanh", "(", "orth", ")", "\n", "direct_dist", "=", "tf", ".", "nn", ".", "sigmoid", "(", "dist", ")", "\n", "joint_params", "=", "[", "direct_axis", ",", "direct_orth", ",", "direct_dist", "]", "\n", "", "else", ":", "\n", "            ", "axis", ",", "orth", "=", "reg_result", "[", "j", "*", "2", ":", "(", "j", "+", "1", ")", "*", "2", "]", "\n", "direct_axis", "=", "tf", ".", "nn", ".", "tanh", "(", "axis", ")", "\n", "direct_orth", "=", "tf", ".", "nn", ".", "tanh", "(", "orth", ")", "\n", "joint_params", "=", "[", "direct_axis", ",", "direct_orth", "]", "\n", "", "param_pair_list", ".", "append", "(", "joint_params", ")", "\n", "", "pred", "=", "{", "'joint_params'", ":", "param_pair_list", "}", "\n", "\n", "return", "pred", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.architecture.joint_est_model": [[195, 209], ["tensorflow.variable_scope", "enumerate", "pointnet_plusplus.utils.tf_util.conv1d", "pointnet_plusplus.utils.tf_util.conv1d", "pointnet_plusplus.utils.tf_util.conv1d", "pointnet_plusplus.utils.tf_util.conv1d", "pointnet_plusplus.utils.tf_util.conv1d", "pointnet_plusplus.utils.tf_util.dropout"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.conv1d", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.conv1d", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.conv1d", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.conv1d", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.conv1d", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.dropout"], ["", "def", "joint_est_model", "(", "scope", ",", "X", ",", "is_training", ",", "bn_decay", ",", "n_max_parts", "=", "3", ",", "pred_joint_ind", "=", "False", ")", ":", "\n", "    ", "layer_dims", "=", "[", "128", ",", "128", "]", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "        ", "for", "j", ",", "dim", "in", "enumerate", "(", "layer_dims", ")", ":", "\n", "            ", "X", "=", "tf_util", ".", "conv1d", "(", "X", ",", "dim", ",", "1", ",", "padding", "=", "'VALID'", ",", "bn", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "scope", "=", "'fc3_{}'", ".", "format", "(", "j", ")", ",", "bn_decay", "=", "bn_decay", ")", "\n", "X", "=", "tf_util", ".", "dropout", "(", "X", ",", "keep_prob", "=", "0.5", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'dp1'", ")", "\n", "", "joint_axis", "=", "tf_util", ".", "conv1d", "(", "X", ",", "3", ",", "1", ",", "padding", "=", "'VALID'", ",", "activation_fn", "=", "None", ",", "scope", "=", "'fc4_0'", ")", "# default is relu, as we have extra activation function", "\n", "univect", "=", "tf_util", ".", "conv1d", "(", "X", ",", "3", ",", "1", ",", "padding", "=", "'VALID'", ",", "activation_fn", "=", "None", ",", "scope", "=", "'fc4_1'", ")", "\n", "heatmap", "=", "tf_util", ".", "conv1d", "(", "X", ",", "1", ",", "1", ",", "padding", "=", "'VALID'", ",", "activation_fn", "=", "None", ",", "scope", "=", "'fc4_2'", ")", "\n", "joint_cls", "=", "tf_util", ".", "conv1d", "(", "X", ",", "n_max_parts", ",", "1", ",", "padding", "=", "'VALID'", ",", "activation_fn", "=", "None", ",", "scope", "=", "'fc4_3'", ")", "\n", "\n", "", "return", "joint_axis", ",", "univect", ",", "heatmap", ",", "joint_cls", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.architecture.get_batch_norm_decay": [[210, 224], ["tensorflow.train.exponential_decay", "tensorflow.minimum"], "function", ["None"], ["", "def", "get_batch_norm_decay", "(", "global_step", ",", "batch_size", ",", "bn_decay_step", ")", ":", "\n", "    ", "BN_INIT_DECAY", "=", "0.5", "\n", "BN_DECAY_RATE", "=", "0.5", "\n", "BN_DECAY_CLIP", "=", "0.99", "\n", "\n", "bn_momentum", "=", "tf", ".", "train", ".", "exponential_decay", "(", "\n", "BN_INIT_DECAY", ",", "\n", "global_step", "*", "batch_size", ",", "\n", "bn_decay_step", ",", "\n", "BN_DECAY_RATE", ",", "\n", "staircase", "=", "True", ")", "\n", "\n", "bn_decay", "=", "tf", ".", "minimum", "(", "BN_DECAY_CLIP", ",", "1", "-", "bn_momentum", ")", "\n", "return", "bn_decay", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network.Network.__init__": [[26, 94], ["tensorflow.Graph", "config.get_nocs_type", "print", "network.Network.graph.as_default", "tensorflow.Variable", "tensorflow.placeholder", "tensorflow.placeholder", "network.Network.create_gt_dict", "architecture.get_per_point_model_new", "network.Network.compute_loss", "network.Network.collect_losses", "network.Network.get_learning_rate", "tensorflow.summary.scalar", "tensorflow.get_collection", "tensorflow.summary.merge_all", "tensorflow.train.Saver", "tensorflow.shape", "config.get_bn_decay_step", "network.Network.get_batch_norm_decay", "tensorflow.summary.scalar", "config.get_init_learning_rate", "config.get_decay_step", "config.get_decay_rate", "tensorflow.control_dependencies", "network.Network.create_train_op", "config.get_bn_decay_step"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_nocs_type", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network.Network.create_gt_dict", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.architecture.get_per_point_model_new", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network.Network.compute_loss", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network.Network.collect_losses", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network.Network.get_learning_rate", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_bn_decay_step", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network.Network.get_batch_norm_decay", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_init_learning_rate", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_decay_step", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_decay_rate", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network.Network.create_train_op", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_bn_decay_step"], ["    ", "def", "__init__", "(", "self", ",", "n_max_parts", ",", "config", ",", "is_new_training", ")", ":", "\n", "        ", "self", ".", "n_max_parts", "=", "n_max_parts", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "graph", "=", "tf", ".", "Graph", "(", ")", "\n", "\n", "self", ".", "pred_joint", "=", "config", ".", "pred_joint", "# control both sub model architecture and loss", "\n", "self", ".", "pred_joint_ind", "=", "config", ".", "pred_joint_ind", "# control both sub model architecture and loss", "\n", "self", ".", "early_split", "=", "config", ".", "early_split", "# control sub model architecture", "\n", "self", ".", "early_split_nocs", "=", "config", ".", "early_split_nocs", "# control early split for part & global NOCS", "\n", "self", ".", "is_mixed", "=", "False", "# control whether we want to consider part & global NOCS together", "\n", "if", "config", ".", "get_nocs_type", "(", ")", "==", "'ancsh'", ":", "\n", "            ", "self", ".", "is_mixed", "=", "True", "\n", "print", "(", "'We use mixed NOCS type...'", ")", "\n", "\n", "", "with", "self", ".", "graph", ".", "as_default", "(", ")", ":", "\n", "            ", "self", ".", "global_step", "=", "tf", ".", "Variable", "(", "0", ")", "\n", "\n", "self", ".", "is_training", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "bool", ",", "shape", "=", "[", "]", ")", "\n", "\n", "self", ".", "P", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "None", ",", "3", "]", ")", "# B, N, 3", "\n", "self", ".", "batch_size", "=", "tf", ".", "shape", "(", "self", ".", "P", ")", "[", "0", "]", "\n", "\n", "if", "config", ".", "get_bn_decay_step", "(", ")", "<", "0", ":", "\n", "                ", "self", ".", "bn_decay", "=", "None", "\n", "", "else", ":", "\n", "                ", "self", ".", "bn_decay", "=", "self", ".", "get_batch_norm_decay", "(", "self", ".", "global_step", ",", "self", ".", "batch_size", ",", "config", ".", "get_bn_decay_step", "(", ")", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'bn_decay'", ",", "self", ".", "bn_decay", ")", "\n", "\n", "", "self", ".", "gt_dict", "=", "self", ".", "create_gt_dict", "(", "n_max_parts", ")", "\n", "\n", "# todo", "\n", "self", ".", "pred_dict", "=", "architecture", ".", "get_per_point_model_new", "(", "\n", "scope", "=", "'SPFN'", ",", "\n", "P", "=", "self", ".", "P", ",", "\n", "n_max_parts", "=", "n_max_parts", ",", "\n", "is_training", "=", "self", ".", "is_training", ",", "\n", "bn_decay", "=", "self", ".", "bn_decay", ",", "\n", "mixed_pred", "=", "self", ".", "is_mixed", ",", "\n", "pred_joint", "=", "self", ".", "pred_joint", ",", "\n", "pred_joint_ind", "=", "self", ".", "pred_joint_ind", ",", "\n", "early_split", "=", "self", ".", "early_split", ",", "\n", "early_split_nocs", "=", "self", ".", "early_split_nocs", "\n", ")", "\n", "# here we'll bring all the preditions into loss module", "\n", "eval_dict", "=", "self", ".", "compute_loss", "(", "\n", "self", ".", "pred_dict", ",", "\n", "self", ".", "gt_dict", ",", "\n", "config", ",", "\n", "is_eval", "=", "False", ",", "\n", "is_nn", "=", "True", "\n", ")", "\n", "self", ".", "collect_losses", "(", "eval_dict", "[", "'loss_dict'", "]", ")", "\n", "\n", "learning_rate", "=", "self", ".", "get_learning_rate", "(", "\n", "config", ".", "get_init_learning_rate", "(", ")", ",", "\n", "self", ".", "global_step", ",", "\n", "self", ".", "batch_size", ",", "\n", "config", ".", "get_decay_step", "(", ")", ",", "\n", "config", ".", "get_decay_rate", "(", ")", ")", "\n", "\n", "tf", ".", "summary", ".", "scalar", "(", "'learning_rate'", ",", "learning_rate", ")", "\n", "\n", "update_ops", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "update_ops", ")", ":", "\n", "                ", "self", ".", "train_op", "=", "self", ".", "create_train_op", "(", "learning_rate", ",", "self", ".", "total_loss", ")", "\n", "\n", "", "self", ".", "summary", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "self", ".", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "max_to_keep", "=", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network.Network.create_train_op": [[95, 115], ["tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer.compute_gradients", "tensorflow.ones", "tensorflow.cond", "tensorflow.reduce_any", "tensorflow.cond", "tensorflow.train.AdamOptimizer.apply_gradients", "tensorflow.Print", "tensorflow.is_finite", "tensorflow.control_dependencies", "tensorflow.logical_and", "zip", "tensorflow.Print", "str"], "methods", ["None"], ["", "", "def", "create_train_op", "(", "self", ",", "learning_rate", ",", "total_loss", ")", ":", "\n", "# Skip gradient update if any gradient is infinite. This should not happen and is for debug only.", "\n", "        ", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "learning_rate", ")", "\n", "self", ".", "optimizer", "=", "optimizer", "\n", "grads_and_vars", "=", "optimizer", ".", "compute_gradients", "(", "total_loss", ")", "\n", "grads", "=", "[", "g", "for", "g", ",", "v", "in", "grads_and_vars", "]", "\n", "varnames", "=", "[", "v", "for", "g", ",", "v", "in", "grads_and_vars", "]", "\n", "is_finite", "=", "tf", ".", "ones", "(", "dtype", "=", "tf", ".", "bool", ",", "shape", "=", "[", "]", ")", "\n", "for", "g", ",", "v", "in", "grads_and_vars", ":", "\n", "            ", "if", "g", "is", "not", "None", ":", "\n", "                ", "g_is_finite", "=", "tf", ".", "reduce_any", "(", "tf", ".", "is_finite", "(", "g", ")", ")", "\n", "g_is_finite_cond", "=", "tf", ".", "cond", "(", "g_is_finite", ",", "tf", ".", "no_op", ",", "lambda", ":", "tf", ".", "Print", "(", "g_is_finite", ",", "[", "g", "]", ",", "'{} is not finite:'", ".", "format", "(", "str", "(", "g", ")", ")", ")", ")", "\n", "with", "tf", ".", "control_dependencies", "(", "[", "g_is_finite_cond", "]", ")", ":", "\n", "                    ", "is_finite", "=", "tf", ".", "logical_and", "(", "is_finite", ",", "g_is_finite", ")", "\n", "", "", "", "train_op", "=", "tf", ".", "cond", "(", "\n", "is_finite", ",", "\n", "lambda", ":", "optimizer", ".", "apply_gradients", "(", "zip", "(", "grads", ",", "varnames", ")", ",", "global_step", "=", "self", ".", "global_step", ")", ",", "\n", "lambda", ":", "tf", ".", "Print", "(", "is_finite", ",", "[", "is_finite", "]", ",", "'Some gradients are not finite! Skipping gradient backprop.'", ")", "\n", ")", "\n", "return", "train_op", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network.Network.collect_losses": [[117, 172], ["tensorflow.zeros", "tensorflow.reduce_mean", "network.Network.config.get_nocs_loss_multiplier", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "network.Network.config.get_offset_loss_multiplier", "network.Network.config.get_offset_loss_multiplier", "network.Network.config.get_orient_loss_multiplier", "tensorflow.reduce_mean", "network.Network.config.get_index_loss_multiplier", "tensorflow.reduce_mean", "network.Network.config.get_miou_loss_multiplier", "tensorflow.summary.scalar", "network.Network.config.get_total_loss_multiplier", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.reduce_mean", "network.Network.config.get_gocs_loss_multiplier", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_nocs_loss_multiplier", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_offset_loss_multiplier", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_offset_loss_multiplier", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_orient_loss_multiplier", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_index_loss_multiplier", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_miou_loss_multiplier", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_total_loss_multiplier", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_gocs_loss_multiplier"], ["", "def", "collect_losses", "(", "self", ",", "loss_dict", ")", ":", "\n", "        ", "\"\"\"\n        confidence map is B*N*1\n        \"\"\"", "\n", "self", ".", "total_loss", "=", "tf", ".", "zeros", "(", "shape", "=", "[", "]", ",", "dtype", "=", "tf", ".", "float32", ")", "\n", "self", ".", "nocs_loss_per_part", "=", "loss_dict", "[", "'nocs_loss'", "]", "\n", "self", ".", "total_nocs_loss", "=", "tf", ".", "reduce_mean", "(", "self", ".", "nocs_loss_per_part", ")", "\n", "nocs_loss_multiplier", "=", "self", ".", "config", ".", "get_nocs_loss_multiplier", "(", ")", "\n", "if", "nocs_loss_multiplier", ">", "0", ":", "\n", "            ", "tf", ".", "summary", ".", "scalar", "(", "'total_nocs_loss'", ",", "self", ".", "total_nocs_loss", ")", "\n", "\n", "", "if", "self", ".", "is_mixed", ":", "\n", "            ", "self", ".", "gocs_loss_per_part", "=", "loss_dict", "[", "'gocs_loss'", "]", "\n", "self", ".", "total_gocs_loss", "=", "tf", ".", "reduce_mean", "(", "self", ".", "gocs_loss_per_part", ")", "\n", "gocs_loss_multiplier", "=", "self", ".", "config", ".", "get_gocs_loss_multiplier", "(", ")", "\n", "if", "gocs_loss_multiplier", ">", "0", ":", "\n", "                ", "tf", ".", "summary", ".", "scalar", "(", "'total_gocs_loss'", ",", "self", ".", "total_gocs_loss", ")", "\n", "\n", "# loss from heatmap estimation & offset estimation", "\n", "", "", "self", ".", "total_heatmap_loss", "=", "tf", ".", "reduce_mean", "(", "loss_dict", "[", "'heatmap_loss'", "]", ")", "\n", "self", ".", "total_unitvec_loss", "=", "tf", ".", "reduce_mean", "(", "loss_dict", "[", "'unitvec_loss'", "]", ")", "\n", "self", ".", "total_orient_loss", "=", "tf", ".", "reduce_mean", "(", "loss_dict", "[", "'orient_loss'", "]", ")", "\n", "heatmap_loss_multiplier", "=", "self", ".", "config", ".", "get_offset_loss_multiplier", "(", ")", "\n", "unitvec_loss_multiplier", "=", "self", ".", "config", ".", "get_offset_loss_multiplier", "(", ")", "\n", "orient_loss_multiplier", "=", "self", ".", "config", ".", "get_orient_loss_multiplier", "(", ")", "\n", "if", "heatmap_loss_multiplier", ">", "0", ":", "# add loss profile on", "\n", "            ", "tf", ".", "summary", ".", "scalar", "(", "'total_heatmap_loss'", ",", "self", ".", "total_heatmap_loss", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'total_unitvec_loss'", ",", "self", ".", "total_unitvec_loss", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'total_orient_loss'", ",", "self", ".", "total_orient_loss", ")", "\n", "\n", "", "self", ".", "total_index_loss", "=", "tf", ".", "reduce_mean", "(", "loss_dict", "[", "'index_loss'", "]", ")", "\n", "index_loss_multiplier", "=", "self", ".", "config", ".", "get_index_loss_multiplier", "(", ")", "\n", "if", "index_loss_multiplier", ">", "0", ":", "\n", "            ", "tf", ".", "summary", ".", "scalar", "(", "'total_index_loss'", ",", "self", ".", "total_index_loss", ")", "\n", "\n", "", "self", ".", "miou_loss_per_part", "=", "loss_dict", "[", "'miou_loss'", "]", "\n", "self", ".", "total_miou_loss", "=", "tf", ".", "reduce_mean", "(", "self", ".", "miou_loss_per_part", ")", "\n", "miou_loss_multiplier", "=", "self", ".", "config", ".", "get_miou_loss_multiplier", "(", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'total_miou_loss'", ",", "self", ".", "total_miou_loss", ")", "\n", "\n", "self", ".", "total_loss", "+=", "nocs_loss_multiplier", "*", "self", ".", "total_nocs_loss", "\n", "self", ".", "total_loss", "+=", "miou_loss_multiplier", "*", "self", ".", "total_miou_loss", "\n", "if", "self", ".", "is_mixed", ":", "\n", "            ", "self", ".", "total_loss", "+=", "gocs_loss_multiplier", "*", "self", ".", "total_gocs_loss", "\n", "\n", "", "if", "self", ".", "pred_joint", ":", "# todo", "\n", "            ", "if", "self", ".", "is_mixed", ":", "# only use it in part + global NOCS", "\n", "                ", "self", ".", "total_loss", "+=", "heatmap_loss_multiplier", "*", "self", ".", "total_heatmap_loss", "\n", "self", ".", "total_loss", "+=", "unitvec_loss_multiplier", "*", "self", ".", "total_unitvec_loss", "\n", "", "self", ".", "total_loss", "+=", "orient_loss_multiplier", "*", "self", ".", "total_orient_loss", "\n", "if", "self", ".", "pred_joint_ind", ":", "# no joint points association", "\n", "                ", "self", ".", "total_loss", "+=", "index_loss_multiplier", "*", "self", ".", "total_index_loss", "\n", "\n", "", "", "self", ".", "total_loss", "*=", "self", ".", "config", ".", "get_total_loss_multiplier", "(", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'total_loss'", ",", "self", ".", "total_loss", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network.Network.train": [[173, 227], ["tensorflow.summary.FileWriter", "tensorflow.summary.FileWriter", "tensorflow.summary.FileWriter", "print", "time.time", "range", "tensorflow.summary.FileWriter.close", "val1_writer.close", "val2_writer.close", "print", "print", "print", "os.path.join", "os.path.join", "os.path.join", "os.path.exists", "os.makedirs", "os.path.exists", "os.makedirs", "train_data.create_iterator", "network.Network.config.get_val_prediction_dir", "network.Network.config.get_val_prediction_dir", "network.Network.create_feed_dict", "sess.run", "print", "time.time", "network.Network.saver.save", "network.Network.config.get_writer_start_step", "tensorflow.summary.FileWriter.add_summary", "print", "enumerate", "print", "network.Network.saver.save", "print", "os.path.join", "time.time", "network.Network.predict_and_save", "print", "network.Network.config.get_val_prediction_n_keep", "os.path.join", "network.Network.clean_predictions_earlier_than", "network.Network.config.get_writer_start_step", "os.path.join", "tensorflow.summary.FileWriter.add_summary", "tensorflow.summary.FileWriter.add_summary", "network.Network.config.get_val_prediction_dir", "network.Network.config.get_val_prediction_dir"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.dataset.Dataset.create_iterator", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_val_prediction_dir", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_val_prediction_dir", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network.Network.create_feed_dict", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_writer_start_step", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network.Network.predict_and_save", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_val_prediction_n_keep", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network.Network.clean_predictions_earlier_than", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_writer_start_step", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_val_prediction_dir", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_val_prediction_dir"], ["", "def", "train", "(", "self", ",", "sess", ",", "train_data", ",", "vals_data", ",", "n_epochs", ",", "val_interval", ",", "snapshot_interval", ",", "model_dir", ",", "log_dir", ")", ":", "\n", "        ", "assert", "n_epochs", ">", "0", "\n", "train_writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'train'", ")", ",", "sess", ".", "graph", ")", "\n", "val_writer1", "=", "tf", ".", "summary", ".", "FileWriter", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'val1'", ")", ",", "sess", ".", "graph", ")", "\n", "val_writer2", "=", "tf", ".", "summary", ".", "FileWriter", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "'val2'", ")", ",", "sess", ".", "graph", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "model_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "model_dir", ")", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "self", ".", "config", ".", "get_val_prediction_dir", "(", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "self", ".", "config", ".", "get_val_prediction_dir", "(", ")", ")", "\n", "", "print", "(", "'Training started.'", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "for", "epoch", "in", "range", "(", "1", ",", "n_epochs", "+", "1", ")", ":", "\n", "            ", "for", "batch", "in", "train_data", ".", "create_iterator", "(", ")", ":", "\n", "                ", "feed_dict", "=", "self", ".", "create_feed_dict", "(", "batch", ",", "is_training", "=", "True", ")", "\n", "step", ",", "_", ",", "summary", ",", "loss", "=", "sess", ".", "run", "(", "[", "self", ".", "global_step", ",", "self", ".", "train_op", ",", "self", ".", "summary", ",", "self", ".", "total_loss", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "\n", "elapsed_min", "=", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "/", "60", "\n", "print", "(", "'Epoch: {:d} | Step: {:d} | Batch Loss: {:6f} | Elapsed: {:.2f}m'", ".", "format", "(", "epoch", ",", "step", ",", "loss", ",", "elapsed_min", ")", ")", "\n", "\n", "if", "step", ">=", "self", ".", "config", ".", "get_writer_start_step", "(", ")", ":", "\n", "                    ", "train_writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "\n", "", "if", "step", "%", "val_interval", "==", "0", ":", "\n", "                    ", "print", "(", "'Start validating...'", ")", "\n", "msg", "=", "'Epoch: {:d} | Step: {:d}'", ".", "format", "(", "epoch", ",", "step", ")", "\n", "remain_min", "=", "(", "n_epochs", "*", "train_data", ".", "n_data", "-", "step", ")", "*", "elapsed_min", "/", "step", "\n", "for", "i", ",", "val_data", "in", "enumerate", "(", "vals_data", ")", ":", "\n", "                        ", "predict_result", "=", "self", ".", "predict_and_save", "(", "sess", ",", "val_data", ",", "save_dir", "=", "os", ".", "path", ".", "join", "(", "self", ".", "config", ".", "get_val_prediction_dir", "(", ")", ",", "'step{}'", ".", "format", "(", "step", ")", ")", ")", "\n", "msg", "=", "predict_result", "[", "'msg'", "]", "\n", "msg", "=", "'Validation: '", "+", "msg", "+", "' | Elapsed: {:.2f}m, Remaining: {:.2f}m'", ".", "format", "(", "elapsed_min", ",", "remain_min", ")", "\n", "print", "(", "msg", ")", "\n", "# clean up old predictions", "\n", "prediction_n_keep", "=", "self", ".", "config", ".", "get_val_prediction_n_keep", "(", ")", "\n", "if", "prediction_n_keep", "!=", "-", "1", ":", "\n", "                            ", "self", ".", "clean_predictions_earlier_than", "(", "step", "=", "step", ",", "prediction_dir", "=", "self", ".", "config", ".", "get_val_prediction_dir", "(", ")", ",", "n_keep", "=", "prediction_n_keep", ")", "\n", "", "if", "step", ">=", "self", ".", "config", ".", "get_writer_start_step", "(", ")", ":", "\n", "                            ", "if", "i", "==", "0", ":", "\n", "                                ", "val_writer1", ".", "add_summary", "(", "predict_result", "[", "'summary'", "]", ",", "step", ")", "\n", "", "else", ":", "\n", "                                ", "val_writer2", ".", "add_summary", "(", "predict_result", "[", "'summary'", "]", ",", "step", ")", "\n", "\n", "", "", "", "", "if", "step", "%", "snapshot_interval", "==", "0", ":", "\n", "                    ", "print", "(", "'Saving snapshot at step {:d}...'", ".", "format", "(", "step", ")", ")", "\n", "self", ".", "saver", ".", "save", "(", "sess", ",", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'tf_model.ckpt'", ")", ",", "global_step", "=", "step", ")", "\n", "print", "(", "'Done saving model at step {:d}.'", ".", "format", "(", "step", ")", ")", "\n", "\n", "", "", "", "train_writer", ".", "close", "(", ")", "\n", "val1_writer", ".", "close", "(", ")", "\n", "val2_writer", ".", "close", "(", ")", "\n", "elapsed_min", "=", "(", "time", ".", "time", "(", ")", "-", "start_time", ")", "/", "60", "\n", "print", "(", "'Training finished.'", ")", "\n", "print", "(", "'Elapsed: {:.2f}m.'", ".", "format", "(", "elapsed_min", ")", ")", "\n", "print", "(", "'Saved {}.'", ".", "format", "(", "self", ".", "saver", ".", "save", "(", "sess", ",", "os", ".", "path", ".", "join", "(", "model_dir", ",", "'tf_model.ckpt'", ")", ",", "global_step", "=", "step", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network.Network.format_loss_result": [[228, 244], ["None"], "methods", ["None"], ["", "def", "format_loss_result", "(", "self", ",", "losses", ")", ":", "\n", "        ", "msg", "=", "''", "\n", "msg", "+=", "'Total Loss: {:6f}'", ".", "format", "(", "losses", "[", "'total_loss'", "]", ")", "\n", "msg", "+=", "', MIoU Loss: {:6f}'", ".", "format", "(", "losses", "[", "'total_miou_loss'", "]", ")", "\n", "msg", "+=", "', nocs Loss: {:6f}'", ".", "format", "(", "losses", "[", "'total_nocs_loss'", "]", ")", "\n", "if", "self", ".", "is_mixed", ":", "\n", "            ", "msg", "+=", "', gocs Loss: {:6f}'", ".", "format", "(", "losses", "[", "'total_gocs_loss'", "]", ")", "\n", "", "if", "self", ".", "pred_joint", ":", "\n", "            ", "msg", "+=", "', heatmap Loss: {:6f}'", ".", "format", "(", "losses", "[", "'total_heatmap_loss'", "]", ")", "\n", "msg", "+=", "', unitvec Loss: {:6f}'", ".", "format", "(", "losses", "[", "'total_unitvec_loss'", "]", ")", "\n", "if", "self", ".", "early_split", ":", "\n", "                ", "msg", "+=", "', orient Loss: {:6f}'", ".", "format", "(", "losses", "[", "'total_orient_loss'", "]", ")", "\n", "", "", "if", "self", ".", "pred_joint_ind", ":", "\n", "            ", "msg", "+=", "', index Loss: {:6f}'", ".", "format", "(", "losses", "[", "'total_index_loss'", "]", ")", "\n", "\n", "", "return", "msg", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network.Network.clean_predictions_earlier_than": [[245, 256], ["re.compile", "os.listdir", "arr.sort", "os.path.isdir", "subprocess.run", "os.path.join", "re.compile.match", "arr.append", "os.path.join", "int", "re.compile.match.group"], "methods", ["None"], ["", "def", "clean_predictions_earlier_than", "(", "self", ",", "step", ",", "prediction_dir", ",", "n_keep", ")", ":", "\n", "        ", "prog", "=", "re", ".", "compile", "(", "'step([0-9]+)'", ")", "\n", "arr", "=", "[", "]", "\n", "for", "f", "in", "os", ".", "listdir", "(", "prediction_dir", ")", ":", "\n", "            ", "if", "os", ".", "path", ".", "isdir", "(", "os", ".", "path", ".", "join", "(", "prediction_dir", ",", "f", ")", ")", ":", "\n", "                ", "m", "=", "prog", ".", "match", "(", "f", ")", "\n", "if", "m", "is", "not", "None", ":", "\n", "                    ", "arr", ".", "append", "(", "(", "int", "(", "m", ".", "group", "(", "1", ")", ")", ",", "f", ")", ")", "\n", "", "", "", "arr", ".", "sort", "(", "key", "=", "lambda", "pr", ":", "pr", "[", "0", "]", ")", "\n", "for", "pr", "in", "arr", "[", ":", "-", "n_keep", "]", ":", "\n", "            ", "subprocess", ".", "run", "(", "[", "'rm'", ",", "'-r'", ",", "os", ".", "path", ".", "join", "(", "prediction_dir", ",", "pr", "[", "1", "]", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network.Network.predict_and_save": [[257, 316], ["print", "dset.create_iterator", "losses.update", "network.Network.format_loss_result", "open().write", "tensorflow.Summary", "losses.items", "os.path.exists", "os.makedirs", "network.Network.create_feed_dict", "sess.run", "losses.keys", "prediction_io.save_batch_nn", "print", "tensorflow.Summary.value.add", "open", "network.Network.config.get_nn_name", "dset.get_last_batch_basename_list", "losses.items", "os.path.join", "dset.get_last_batch_range"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.dataset.Dataset.create_iterator", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network.Network.format_loss_result", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network.Network.create_feed_dict", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.prediction_io.save_batch_nn", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_nn_name", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.dataset.Dataset.get_last_batch_basename_list", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.dataset.Dataset.get_last_batch_range"], ["", "", "def", "predict_and_save", "(", "self", ",", "sess", ",", "dset", ",", "save_dir", ")", ":", "\n", "        ", "print", "(", "'Predicting and saving predictions to {}...'", ".", "format", "(", "save_dir", ")", ")", "\n", "losses", "=", "{", "\n", "'total_loss'", ":", "0.0", ",", "\n", "'total_miou_loss'", ":", "0.0", ",", "\n", "'total_nocs_loss'", ":", "0.0", ",", "\n", "}", "\n", "if", "self", ".", "is_mixed", ":", "\n", "            ", "losses", "[", "'total_gocs_loss'", "]", "=", "0.0", "\n", "\n", "", "if", "self", ".", "pred_joint", ":", "\n", "            ", "losses", "[", "'total_heatmap_loss'", "]", "=", "0.0", "\n", "losses", "[", "'total_unitvec_loss'", "]", "=", "0.0", "\n", "if", "self", ".", "early_split", ":", "\n", "                ", "losses", "[", "'total_orient_loss'", "]", "=", "0.0", "\n", "\n", "", "", "if", "self", ".", "pred_joint_ind", ":", "\n", "            ", "losses", "[", "'total_index_loss'", "]", "=", "0.0", "\n", "\n", "", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "", "for", "batch", "in", "dset", ".", "create_iterator", "(", ")", ":", "\n", "            ", "feed_dict", "=", "self", ".", "create_feed_dict", "(", "batch", ",", "is_training", "=", "False", ")", "\n", "loss_dict", "=", "{", "\n", "'total_loss'", ":", "self", ".", "total_loss", ",", "\n", "'total_miou_loss'", ":", "self", ".", "total_miou_loss", ",", "\n", "'total_nocs_loss'", ":", "self", ".", "total_nocs_loss", ",", "\n", "'total_heatmap_loss'", ":", "self", ".", "total_heatmap_loss", ",", "\n", "'total_unitvec_loss'", ":", "self", ".", "total_unitvec_loss", ",", "\n", "'total_orient_loss'", ":", "self", ".", "total_orient_loss", ",", "\n", "'total_index_loss'", ":", "self", ".", "total_index_loss", ",", "\n", "}", "\n", "if", "self", ".", "is_mixed", ":", "\n", "                ", "loss_dict", "[", "'total_gocs_loss'", "]", "=", "self", ".", "total_gocs_loss", "\n", "\n", "", "pred_result", ",", "loss_result", "=", "sess", ".", "run", "(", "[", "self", ".", "pred_dict", ",", "loss_dict", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "\n", "for", "key", "in", "losses", ".", "keys", "(", ")", ":", "\n", "                ", "losses", "[", "key", "]", "+=", "loss_result", "[", "key", "]", "*", "dset", ".", "last_step_size", "\n", "\n", "", "prediction_io", ".", "save_batch_nn", "(", "\n", "nn_name", "=", "self", ".", "config", ".", "get_nn_name", "(", ")", ",", "\n", "pred_result", "=", "pred_result", ",", "\n", "input_batch", "=", "batch", ",", "\n", "basename_list", "=", "dset", ".", "get_last_batch_basename_list", "(", ")", ",", "\n", "save_dir", "=", "save_dir", ",", "\n", "is_mixed", "=", "self", ".", "is_mixed", ",", "\n", "W_reduced", "=", "False", "\n", ")", "\n", "print", "(", "'Finished {}/{}'", ".", "format", "(", "dset", ".", "get_last_batch_range", "(", ")", "[", "1", "]", ",", "dset", ".", "n_data", ")", ",", "end", "=", "'\\r'", ")", "\n", "", "losses", ".", "update", "(", "(", "x", ",", "y", "/", "dset", ".", "n_data", ")", "for", "x", ",", "y", "in", "losses", ".", "items", "(", ")", ")", "\n", "msg", "=", "self", ".", "format_loss_result", "(", "losses", ")", "\n", "open", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "'test_loss.txt'", ")", ",", "'w'", ")", ".", "write", "(", "msg", ")", "\n", "summary", "=", "tf", ".", "Summary", "(", ")", "\n", "for", "x", ",", "y", "in", "losses", ".", "items", "(", ")", ":", "\n", "            ", "summary", ".", "value", ".", "add", "(", "tag", "=", "x", ",", "simple_value", "=", "y", ")", "\n", "", "return", "{", "\n", "'msg'", ":", "msg", ",", "\n", "'summary'", ":", "summary", ",", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network.Network.simple_predict_and_save": [[318, 329], ["sess.run", "prediction_io.save_single_nn", "numpy.expand_dims", "network.Network.config.get_nn_name"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.prediction_io.save_single_nn", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_nn_name"], ["", "def", "simple_predict_and_save", "(", "self", ",", "sess", ",", "pc", ",", "pred_h5_file", ")", ":", "\n", "        ", "feed_dict", "=", "{", "\n", "self", ".", "P", ":", "np", ".", "expand_dims", "(", "pc", ",", "axis", "=", "0", ")", ",", "# 1xNx3", "\n", "self", ".", "is_training", ":", "False", "\n", "}", "\n", "pred_result", "=", "sess", ".", "run", "(", "self", ".", "pred_dict", ",", "feed_dict", "=", "feed_dict", ")", "\n", "prediction_io", ".", "save_single_nn", "(", "\n", "nn_name", "=", "self", ".", "config", ".", "get_nn_name", "(", ")", ",", "\n", "pred_result", "=", "pred_result", ",", "\n", "pred_h5_file", "=", "pred_h5_file", ",", "\n", "W_reduced", "=", "False", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network.Network.create_feed_dict": [[331, 339], ["network.Network.fill_gt_dict_with_batch_data"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network.Network.fill_gt_dict_with_batch_data"], ["", "def", "create_feed_dict", "(", "self", ",", "batch", ",", "is_training", ")", ":", "\n", "        ", "feed_dict", "=", "{", "\n", "self", ".", "P", ":", "batch", "[", "'P'", "]", ",", "\n", "self", ".", "is_training", ":", "is_training", ",", "\n", "}", "\n", "self", ".", "fill_gt_dict_with_batch_data", "(", "feed_dict", ",", "self", ".", "gt_dict", ",", "batch", ")", "\n", "\n", "return", "feed_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network.Network.create_gt_dict": [[340, 364], ["tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder"], "methods", ["None"], ["", "def", "create_gt_dict", "(", "self", ",", "n_max_parts", ")", ":", "\n", "        ", "'''\n            Returns gt_dict containing:\n                - cls_per_point: BxN\n                - nocs_per_point: BxNx3\n                # - type_per_part: BxK\n                - points_per_part: BxKxN'x3, sampled points on each part\n                - parameters: a dict, each entry is a BxKx... tensor\n        '''", "\n", "gt_dict", "=", "{", "}", "\n", "gt_dict", "[", "'nocs_per_point'", "]", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "None", ",", "3", "]", ")", "\n", "gt_dict", "[", "'cls_per_point'", "]", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "None", "]", ")", "\n", "gt_dict", "[", "'mask_array_per_point'", "]", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "None", ",", "n_max_parts", "]", ")", "\n", "if", "self", ".", "is_mixed", ":", "\n", "            ", "gt_dict", "[", "'gocs_per_point'", "]", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "None", ",", "3", "]", ")", "\n", "#", "\n", "", "gt_dict", "[", "'heatmap_per_point'", "]", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "None", "]", ")", "\n", "gt_dict", "[", "'unitvec_per_point'", "]", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "None", ",", "3", "]", ")", "\n", "gt_dict", "[", "'orient_per_point'", "]", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "None", ",", "3", "]", ")", "\n", "gt_dict", "[", "'index_per_point'", "]", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "int32", ",", "shape", "=", "[", "None", ",", "None", "]", ")", "\n", "gt_dict", "[", "'joint_cls_mask'", "]", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "None", "]", ")", "\n", "gt_dict", "[", "'joint_params_gt'", "]", "=", "tf", ".", "placeholder", "(", "dtype", "=", "tf", ".", "float32", ",", "shape", "=", "[", "None", ",", "None", ",", "7", "]", ")", "\n", "\n", "return", "gt_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network.Network.fill_gt_dict_with_batch_data": [[365, 383], ["feed_dict.update", "feed_dict.update"], "methods", ["None"], ["", "def", "fill_gt_dict_with_batch_data", "(", "self", ",", "feed_dict", ",", "gt_dict", ",", "batch", ")", ":", "\n", "        ", "\"\"\"\n        feed dict update the results\n        \"\"\"", "\n", "feed_dict", ".", "update", "(", "{", "\n", "gt_dict", "[", "'nocs_per_point'", "]", ":", "batch", "[", "'nocs_gt'", "]", ",", "# input NOCS", "\n", "gt_dict", "[", "'cls_per_point'", "]", ":", "batch", "[", "'cls_gt'", "]", ",", "# part cls: 0-9", "\n", "gt_dict", "[", "'mask_array_per_point'", "]", ":", "batch", "[", "'mask_array'", "]", ",", "\n", "gt_dict", "[", "'heatmap_per_point'", "]", ":", "batch", "[", "'heatmap_gt'", "]", ",", "# input offset scalar", "\n", "gt_dict", "[", "'unitvec_per_point'", "]", ":", "batch", "[", "'unitvec_gt'", "]", ",", "# input offset scalar", "\n", "gt_dict", "[", "'orient_per_point'", "]", ":", "batch", "[", "'orient_gt'", "]", ",", "\n", "gt_dict", "[", "'index_per_point'", "]", ":", "batch", "[", "'joint_cls_gt'", "]", ",", "\n", "gt_dict", "[", "'joint_cls_mask'", "]", ":", "batch", "[", "'joint_cls_mask'", "]", ",", "\n", "gt_dict", "[", "'joint_params_gt'", "]", ":", "batch", "[", "'joint_params_gt'", "]", ",", "\n", "}", ")", "\n", "if", "self", ".", "is_mixed", ":", "\n", "            ", "feed_dict", ".", "update", "(", "{", "\n", "gt_dict", "[", "'gocs_per_point'", "]", ":", "batch", "[", "'nocs_gt_g'", "]", ",", "# input NOCS global", "\n", "}", ")", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network.Network.get_batch_norm_decay": [[385, 399], ["tensorflow.train.exponential_decay", "tensorflow.minimum"], "methods", ["None"], ["", "", "def", "get_batch_norm_decay", "(", "self", ",", "global_step", ",", "batch_size", ",", "bn_decay_step", ")", ":", "\n", "        ", "BN_INIT_DECAY", "=", "0.5", "\n", "BN_DECAY_RATE", "=", "0.5", "\n", "BN_DECAY_CLIP", "=", "0.99", "\n", "\n", "bn_momentum", "=", "tf", ".", "train", ".", "exponential_decay", "(", "\n", "BN_INIT_DECAY", ",", "\n", "global_step", "*", "batch_size", ",", "\n", "bn_decay_step", ",", "\n", "BN_DECAY_RATE", ",", "\n", "staircase", "=", "True", ")", "\n", "\n", "bn_decay", "=", "tf", ".", "minimum", "(", "BN_DECAY_CLIP", ",", "1", "-", "bn_momentum", ")", "\n", "return", "bn_decay", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network.Network.get_learning_rate": [[400, 408], ["tensorflow.train.exponential_decay"], "methods", ["None"], ["", "def", "get_learning_rate", "(", "self", ",", "init_learning_rate", ",", "global_step", ",", "batch_size", ",", "decay_step", ",", "decay_rate", ")", ":", "\n", "        ", "learning_rate", "=", "tf", ".", "train", ".", "exponential_decay", "(", "\n", "init_learning_rate", ",", "\n", "global_step", "*", "batch_size", ",", "\n", "decay_step", ",", "\n", "decay_rate", ",", "\n", "staircase", "=", "True", ")", "\n", "return", "learning_rate", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network.Network.load_ckpt": [[409, 420], ["sess.run", "tensorflow.get_collection", "tensorflow.train.Saver", "print", "tensorflow.train.Saver.restore", "tensorflow.global_variables_initializer"], "methods", ["None"], ["", "def", "load_ckpt", "(", "self", ",", "sess", ",", "pretrained_model_path", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n            Load a model checkpoint\n            In train mode, load the latest checkpoint from the checkpoint folder if it exists; otherwise, run initializer.\n            In other modes, load from the specified checkpoint file.\n        \"\"\"", "\n", "sess", ".", "run", "(", "tf", ".", "global_variables_initializer", "(", ")", ")", "\n", "var", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "scope", "=", "'SPFN'", ")", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "{", "v", ".", "op", ".", "name", ":", "v", "for", "v", "in", "var", "}", ")", "\n", "print", "(", "'Restoring from {}'", ".", "format", "(", "pretrained_model_path", ")", ")", "\n", "saver", ".", "restore", "(", "sess", ",", "pretrained_model_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network.Network.compute_loss": [[421, 513], ["tensorflow.sequence_mask", "tensorflow.stop_gradient", "loss.compute_miou_loss", "loss.compute_nocs_loss", "loss.compute_vect_loss", "loss.compute_vect_loss", "loss.compute_vect_loss", "loss.compute_miou_loss", "tensorflow.shape", "tensorflow.shape", "nn_filter_W.get_shape", "nn_filter_W", "tensorflow.reduce_max", "tensorflow.py_func", "loss.compute_nocs_loss", "config.get_nocs_loss", "config.get_nocs_loss", "config.get_nocs_loss", "config.get_nocs_loss", "config.get_nocs_loss"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.loss.compute_miou_loss", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.loss.compute_nocs_loss", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.loss.compute_vect_loss", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.loss.compute_vect_loss", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.loss.compute_vect_loss", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.loss.compute_miou_loss", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.loss.compute_nocs_loss", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_nocs_loss", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_nocs_loss", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_nocs_loss", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_nocs_loss", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.network_config.NetworkConfig.get_nocs_loss"], ["", "def", "compute_loss", "(", "self", ",", "pred_dict", ",", "gt_dict", ",", "config", ",", "is_eval", ",", "is_nn", ",", "P_in", "=", "None", ")", ":", "\n", "        ", "'''\n            Input:\n                pred_dict should contain:\n                    - W: BxNxK, segmentation parts. Allow zero rows to indicate unassigned points.\n                    - nocs_per_point: BxNx3, nocs per point\n                    - confi_per_point: type per points\n                        - This should be logit of shape BxNxT if is_eval=False, and actual value of shape BxN otherwise\n                        - can contain -1\n                    - parameters - a dict, each entry is a BxKx... tensor\n                gt_dict should be obtained from calling create_gt_dict\n                P_in - BxNx3 is the input point cloud, used only when is_eval=True\n\n            Returns: {loss_dict, matching_indices} + stats from calculate_eval_stats(), where\n                - loss_dict contains:\n                    - nocs_loss: B, averaged over all N points\n                    - type_loss: B, averaged over all N points.\n                        - This is cross entropy loss during training, and accuracy during test time\n                    - miou_loss: BxK, mean IoU loss for each matched parts\n                    - residue_loss: BxK, residue loss for each part\n                    - parameter_loss: BxK, parameter loss for each part\n                    - avg_miou_loss: B\n                    - avg_residue_loss: B\n                    - avg_parameter_loss: B\n                - matching_indices: BxK, where (b,k)th ground truth primitive is matched with (b, matching_indices[b, k])\n        '''", "\n", "# dimension tensors", "\n", "W", "=", "pred_dict", "[", "'W'", "]", "\n", "batch_size", "=", "tf", ".", "shape", "(", "W", ")", "[", "0", "]", "# B*N*K(k parts)", "\n", "n_points", "=", "tf", ".", "shape", "(", "W", ")", "[", "1", "]", "\n", "n_max_parts", "=", "W", ".", "get_shape", "(", ")", "[", "2", "]", "# n_max_parts should not be dynamic, fixed number of parts", "\n", "# n_registered_primitives = fitter_factory.get_n_registered_primitives()", "\n", "\n", "if", "is_eval", "and", "is_nn", ":", "\n", "# at loss, want W to be binary and filtered (if is from nn)", "\n", "            ", "W", "=", "nn_filter_W", "(", "W", ")", "\n", "\n", "# note that I_gt can contain -1, indicating part of unknown primitive type", "\n", "", "I_gt", "=", "gt_dict", "[", "'cls_per_point'", "]", "# BxN", "\n", "n_parts_gt", "=", "tf", ".", "reduce_max", "(", "I_gt", ",", "axis", "=", "1", ")", "+", "1", "# only count known primitive type parts, as -1 will be ignored", "\n", "mask_gt", "=", "tf", ".", "sequence_mask", "(", "n_parts_gt", ",", "maxlen", "=", "n_max_parts", ")", "# BxK, mask_gt[b, k] = 1 iff instace k is present in the ground truth batch b", "\n", "\n", "matching_indices", "=", "tf", ".", "stop_gradient", "(", "tf", ".", "py_func", "(", "hungarian_matching", ",", "[", "W", ",", "I_gt", "]", ",", "Tout", "=", "tf", ".", "int32", ")", ")", "# BxK into K parts", "\n", "# miou_loss = loss.compute_miou_loss(W, I_gt, matching_indices) # losses all have dimension BxK, here is for segmentation", "\n", "miou_loss", "=", "loss", ".", "compute_miou_loss", "(", "W", ",", "I_gt", ")", "\n", "nocs_loss", "=", "loss", ".", "compute_nocs_loss", "(", "pred_dict", "[", "'nocs_per_point'", "]", ",", "gt_dict", "[", "'nocs_per_point'", "]", ",", "pred_dict", "[", "'confi_per_point'", "]", ",", "num_parts", "=", "n_max_parts", ",", "mask_array", "=", "gt_dict", "[", "'mask_array_per_point'", "]", ",", "TYPE_L", "=", "config", ".", "get_nocs_loss", "(", ")", ",", "MULTI_HEAD", "=", "True", ",", "SELF_SU", "=", "False", ")", "# todo", "\n", "\n", "if", "self", ".", "is_mixed", ":", "\n", "            ", "gocs_loss", "=", "loss", ".", "compute_nocs_loss", "(", "pred_dict", "[", "'gocs_per_point'", "]", ",", "gt_dict", "[", "'gocs_per_point'", "]", ",", "pred_dict", "[", "'confi_per_point'", "]", ",", "num_parts", "=", "n_max_parts", ",", "mask_array", "=", "gt_dict", "[", "'mask_array_per_point'", "]", ",", "TYPE_L", "=", "config", ".", "get_nocs_loss", "(", ")", ",", "MULTI_HEAD", "=", "True", ",", "SELF_SU", "=", "False", ")", "# todo", "\n", "\n", "", "heatmap_loss", "=", "loss", ".", "compute_vect_loss", "(", "pred_dict", "[", "'heatmap_per_point'", "]", ",", "gt_dict", "[", "'heatmap_per_point'", "]", ",", "confidence", "=", "gt_dict", "[", "'joint_cls_mask'", "]", ",", "TYPE_L", "=", "config", ".", "get_nocs_loss", "(", ")", ")", "\n", "unitvec_loss", "=", "loss", ".", "compute_vect_loss", "(", "pred_dict", "[", "'unitvec_per_point'", "]", ",", "gt_dict", "[", "'unitvec_per_point'", "]", ",", "confidence", "=", "gt_dict", "[", "'joint_cls_mask'", "]", ",", "TYPE_L", "=", "config", ".", "get_nocs_loss", "(", ")", ")", "\n", "orient_loss", "=", "loss", ".", "compute_vect_loss", "(", "pred_dict", "[", "'joint_axis_per_point'", "]", ",", "gt_dict", "[", "'orient_per_point'", "]", ",", "confidence", "=", "gt_dict", "[", "'joint_cls_mask'", "]", ",", "TYPE_L", "=", "config", ".", "get_nocs_loss", "(", ")", ")", "\n", "\n", "J_gt", "=", "gt_dict", "[", "'index_per_point'", "]", "# BxN", "\n", "inds_pred", "=", "pred_dict", "[", "'index_per_point'", "]", "\n", "miou_joint_loss", "=", "loss", ".", "compute_miou_loss", "(", "inds_pred", ",", "J_gt", ")", "# losses all have dimension BxK, here is for segmentation", "\n", "# here we need to add input GT masks for different array", "\n", "\n", "loss_dict", "=", "{", "\n", "'nocs_loss'", ":", "nocs_loss", ",", "\n", "'miou_loss'", ":", "miou_loss", ",", "\n", "'heatmap_loss'", ":", "heatmap_loss", ",", "\n", "'unitvec_loss'", ":", "unitvec_loss", ",", "\n", "'orient_loss'", ":", "orient_loss", ",", "\n", "'index_loss'", ":", "miou_joint_loss", "\n", "}", "\n", "\n", "if", "self", ".", "is_mixed", ":", "\n", "            ", "loss_dict", "[", "'gocs_loss'", "]", "=", "gocs_loss", "\n", "\n", "", "result", "=", "{", "'loss_dict'", ":", "loss_dict", ",", "'matching_indices'", ":", "matching_indices", "}", "\n", "\"\"\"\n        if is_eval:\n            result.update(\n                calculate_eval_stats(\n                    W=W,\n                    matching_indices=matching_indices,\n                    mask_gt=mask_gt,\n                    P_in=P_in,\n                    confi_per_point=pred_dict['confi_per_point'],\n                )\n            )\n        \"\"\"", "\n", "return", "result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib._init_paths.add_path": [[5, 8], ["sys.path.insert"], "function", ["None"], ["def", "add_path", "(", "path", ")", ":", "\n", "    ", "if", "path", "not", "in", "sys", ".", "path", ":", "\n", "        ", "sys", ".", "path", ".", "insert", "(", "0", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.tf_wrapper._variable_on_gpu": [[4, 7], ["tensorflow.device", "tensorflow.get_variable"], "function", ["None"], ["def", "_variable_on_gpu", "(", "name", ",", "shape", ",", "initializer", ",", "dtype", "=", "tf", ".", "float32", ")", ":", "\n", "    ", "with", "tf", ".", "device", "(", "\"/gpu:0\"", ")", ":", "\n", "        ", "return", "tf", ".", "get_variable", "(", "name", ",", "shape", ",", "initializer", "=", "initializer", ",", "dtype", "=", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.tf_wrapper._batch_norm_simple": [[8, 12], ["tensorflow.contrib.layers.batch_norm"], "function", ["None"], ["", "", "def", "_batch_norm_simple", "(", "scope", ",", "inputs", ",", "is_training", ",", "bn_decay", "=", "0.9", ")", ":", "\n", "# Setting updates_collections to None will automatically add dependencies to update moving mean/variance", "\n", "# data_format = 'NHWC' so that normalization occurs at the last dimension", "\n", "    ", "return", "tf", ".", "contrib", ".", "layers", ".", "batch_norm", "(", "inputs", ",", "center", "=", "True", ",", "scale", "=", "True", ",", "is_training", "=", "is_training", ",", "decay", "=", "bn_decay", ",", "scope", "=", "scope", ",", "data_format", "=", "'NHWC'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.tf_wrapper.fully_connected": [[13, 27], ["tensorflow.variable_scope", "tf_wrapper._variable_on_gpu", "tf_wrapper._variable_on_gpu", "tensorflow.nn.bias_add", "tensorflow.tensordot", "tf_wrapper._batch_norm_simple", "activation_fn", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.constant_initializer", "inputs.get_shape"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util._variable_on_gpu", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util._variable_on_gpu", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.tf_wrapper._batch_norm_simple"], ["", "def", "fully_connected", "(", "scope", ",", "inputs", ",", "num_outputs", ",", "is_training", ",", "bn_decay", "=", "None", ",", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ")", ":", "\n", "# Input: inputs is ...xN", "\n", "# Returns: ...x[num_outputs]", "\n", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "        ", "weights", "=", "_variable_on_gpu", "(", "'weights'", ",", "[", "inputs", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", ",", "num_outputs", "]", ",", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", ")", "\n", "biases", "=", "_variable_on_gpu", "(", "'biases'", ",", "[", "num_outputs", "]", ",", "initializer", "=", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "\n", "outputs", "=", "tf", ".", "nn", ".", "bias_add", "(", "tf", ".", "tensordot", "(", "inputs", ",", "weights", ",", "axes", "=", "[", "[", "-", "1", "]", ",", "[", "0", "]", "]", ")", ",", "biases", ")", "\n", "if", "bn_decay", "is", "not", "None", ":", "\n", "            ", "outputs", "=", "_batch_norm_simple", "(", "'bn'", ",", "outputs", ",", "is_training", ",", "bn_decay", ")", "\n", "", "if", "activation_fn", "is", "not", "None", ":", "\n", "            ", "outputs", "=", "activation_fn", "(", "outputs", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.tf_wrapper.dropout": [[28, 31], ["tensorflow.variable_scope", "tensorflow.cond", "tensorflow.nn.dropout"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.dropout"], ["", "", "def", "dropout", "(", "scope", ",", "inputs", ",", "is_training", ",", "keep_prob", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "        ", "return", "tf", ".", "cond", "(", "is_training", ",", "lambda", ":", "tf", ".", "nn", ".", "dropout", "(", "inputs", ",", "keep_prob", ")", ",", "lambda", ":", "inputs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.tf_wrapper.batched_gather": [[32, 51], ["tensorflow.tile", "tensorflow.concat", "tensorflow.gather_nd", "tf.transpose.get_shape", "numpy.arange", "tensorflow.transpose", "tensorflow.shape", "tensorflow.expand_dims", "tensorflow.transpose", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.range", "tensorflow.shape"], "function", ["None"], ["", "", "def", "batched_gather", "(", "data", ",", "indices", ",", "axis", ")", ":", "\n", "# data - Bx...xKx..., axis is where dimension K is", "\n", "# indices - BxK", "\n", "# output[b, ..., k, ...] = in[b, ..., indices[b, k], ...]", "\n", "    ", "assert", "axis", ">=", "1", "\n", "ndims", "=", "data", ".", "get_shape", "(", ")", ".", "ndims", "# allow dynamic rank", "\n", "if", "axis", ">", "1", ":", "\n", "# tranpose data to BxKx...", "\n", "        ", "perm", "=", "np", ".", "arange", "(", "ndims", ")", "\n", "perm", "[", "axis", "]", "=", "1", "\n", "perm", "[", "1", "]", "=", "axis", "\n", "data", "=", "tf", ".", "transpose", "(", "data", ",", "perm", "=", "perm", ")", "\n", "", "batch_size", "=", "tf", ".", "shape", "(", "data", ")", "[", "0", "]", "\n", "batch_nums", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "tf", ".", "range", "(", "batch_size", ")", ",", "axis", "=", "1", ")", ",", "axis", "=", "2", ")", ",", "multiples", "=", "[", "1", ",", "tf", ".", "shape", "(", "indices", ")", "[", "1", "]", ",", "1", "]", ")", "# BxKx1", "\n", "indices", "=", "tf", ".", "concat", "(", "[", "batch_nums", ",", "tf", ".", "expand_dims", "(", "indices", ",", "axis", "=", "2", ")", "]", ",", "axis", "=", "2", ")", "# BxKx2", "\n", "gathered_data", "=", "tf", ".", "gather_nd", "(", "data", ",", "indices", "=", "indices", ")", "\n", "if", "axis", ">", "1", ":", "\n", "        ", "gathered_data", "=", "tf", ".", "transpose", "(", "gathered_data", ",", "perm", "=", "perm", ")", "\n", "", "return", "gathered_data", "\n", "", ""]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.dataset.Dataset.__init__": [[25, 86], ["global_info.global_info.global_info", "len", "dataset.Dataset.fetch_factors_nocs", "dataset.Dataset.fetch_joints_params", "open", "fp.readline", "print", "random.shuffle", "print", "fp.readline.strip", "fp.readline", "len", "[].split", "dataset.Dataset.hdf5_file_list.append", "dataset.Dataset.hdf5_file_list.append", "dataset.Dataset.hdf5_file_list.append", "dataset.Dataset.hdf5_file_list.append", "[].split", "fp.readline.strip.split", "p.split"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.dataset.Dataset.fetch_factors_nocs", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.dataset.Dataset.fetch_joints_params"], ["    ", "def", "__init__", "(", "self", ",", "root_dir", ",", "ctgy_obj", ",", "mode", ",", "n_max_parts", ",", "batch_size", ",", "name_dset", "=", "'shape2motion'", ",", "num_expr", "=", "0.01", ",", "domain", "=", "None", ",", "nocs_type", "=", "'A'", ",", "parametri_type", "=", "'orthogonal'", ",", "first_n", "=", "-", "1", ",", "add_noise", "=", "False", ",", "fixed_order", "=", "False", ",", "is_debug", "=", "False", ",", "is_testing", "=", "False", ",", "is_gen", "=", "False", ",", "baseline_joints", "=", "False", ")", ":", "\n", "        ", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "name_dset", "=", "name_dset", "\n", "self", ".", "ctgy_obj", "=", "ctgy_obj", "\n", "infos", "=", "global_info", "(", ")", "\n", "self", ".", "ctgy_spec", "=", "infos", ".", "datasets", "[", "ctgy_obj", "]", "\n", "self", ".", "parts_map", "=", "infos", ".", "datasets", "[", "ctgy_obj", "]", ".", "parts_map", "\n", "self", ".", "baseline_joints", "=", "baseline_joints", "\n", "\n", "self", ".", "num_points", "=", "1024", "# fixed for category with < 5 parts", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "n_max_parts", "=", "n_max_parts", "\n", "self", ".", "fixed_order", "=", "fixed_order", "\n", "self", ".", "first_n", "=", "first_n", "\n", "self", ".", "add_noise", "=", "add_noise", "\n", "self", ".", "is_testing", "=", "is_testing", "\n", "self", ".", "is_gen", "=", "is_gen", "\n", "self", ".", "is_debug", "=", "is_debug", "\n", "self", ".", "nocs_type", "=", "nocs_type", "\n", "self", ".", "line_space", "=", "parametri_type", "\n", "self", ".", "hdf5_file_list", "=", "[", "]", "\n", "if", "mode", "==", "'train'", ":", "\n", "            ", "idx_txt", "=", "self", ".", "root_dir", "+", "'/splits/{}/{}/train.txt'", ".", "format", "(", "ctgy_obj", ",", "num_expr", ")", "\n", "", "elif", "mode", "==", "'demo'", ":", "\n", "            ", "idx_txt", "=", "self", ".", "root_dir", "+", "'/splits/{}/{}/demo.txt'", ".", "format", "(", "ctgy_obj", ",", "num_expr", ")", "\n", "", "else", ":", "\n", "            ", "idx_txt", "=", "self", ".", "root_dir", "+", "'/splits/{}/{}/test.txt'", ".", "format", "(", "ctgy_obj", ",", "num_expr", ")", "\n", "", "with", "open", "(", "idx_txt", ",", "\"r\"", ",", "errors", "=", "'replace'", ")", "as", "fp", ":", "\n", "            ", "line", "=", "fp", ".", "readline", "(", ")", "\n", "cnt", "=", "1", "\n", "while", "line", ":", "\n", "# todos: test mode", "\n", "                ", "hdf5_file", "=", "line", ".", "strip", "(", ")", "\n", "item", "=", "hdf5_file", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "-", "3", "]", "\n", "if", "mode", "==", "'test'", ":", "\n", "                    ", "if", "domain", "==", "'seen'", "and", "(", "item", "not", "in", "infos", ".", "datasets", "[", "ctgy_obj", "]", ".", "test_list", ")", ":", "\n", "                        ", "self", ".", "hdf5_file_list", ".", "append", "(", "hdf5_file", ")", "\n", "", "if", "domain", "==", "'unseen'", "and", "(", "item", "in", "infos", ".", "datasets", "[", "ctgy_obj", "]", ".", "test_list", ")", ":", "\n", "                        ", "self", ".", "hdf5_file_list", ".", "append", "(", "hdf5_file", ")", "\n", "", "if", "domain", "is", "None", ":", "\n", "                        ", "self", ".", "hdf5_file_list", ".", "append", "(", "hdf5_file", ")", "\n", "", "", "else", ":", "\n", "                    ", "self", ".", "hdf5_file_list", ".", "append", "(", "hdf5_file", ")", "\n", "\n", "", "line", "=", "fp", ".", "readline", "(", ")", "\n", "", "", "if", "is_debug", ":", "\n", "            ", "print", "(", "'hdf5_file_list: '", ",", "len", "(", "self", ".", "hdf5_file_list", ")", ",", "self", ".", "hdf5_file_list", "[", "0", "]", ")", "\n", "", "if", "not", "fixed_order", ":", "\n", "            ", "random", ".", "shuffle", "(", "self", ".", "hdf5_file_list", ")", "\n", "", "if", "first_n", "!=", "-", "1", ":", "\n", "            ", "self", ".", "hdf5_file_list", "=", "self", ".", "hdf5_file_list", "[", ":", "first_n", "]", "\n", "\n", "", "self", ".", "basename_list", "=", "[", "\"_\"", ".", "join", "(", "[", "\"{}\"", ".", "format", "(", "q", ")", "for", "q", "in", "p", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "-", "3", ":", "]", "]", ")", "for", "p", "in", "self", ".", "hdf5_file_list", "]", "\n", "if", "is_debug", ":", "\n", "            ", "print", "(", "'basename_list: '", ",", "self", ".", "basename_list", "[", "0", "]", ")", "\n", "", "self", ".", "n_data", "=", "len", "(", "self", ".", "hdf5_file_list", ")", "\n", "self", ".", "first_iteration_finished", "=", "False", "\n", "# whole URDF points, load all obj files", "\n", "self", ".", "all_factors", ",", "self", ".", "all_corners", "=", "self", ".", "fetch_factors_nocs", "(", "self", ".", "ctgy_obj", ",", "is_debug", "=", "self", ".", "is_debug", ",", "is_gen", "=", "self", ".", "is_gen", ")", "\n", "self", ".", "all_joints", "=", "self", ".", "fetch_joints_params", "(", "self", ".", "ctgy_obj", ",", "is_debug", "=", "self", ".", "is_debug", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.dataset.Dataset.fetch_data_at_index": [[87, 108], ["print", "[].split", "print", "h5py.File", "dataset.Dataset.create_unit_data_from_hdf5", "path.split"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.dataset.Dataset.create_unit_data_from_hdf5"], ["", "def", "fetch_data_at_index", "(", "self", ",", "i", ")", ":", "\n", "        ", "assert", "not", "self", ".", "first_iteration_finished", "\n", "path", "=", "self", ".", "hdf5_file_list", "[", "i", "]", "\n", "if", "self", ".", "is_testing", "or", "self", ".", "is_debug", ":", "\n", "            ", "print", "(", "'Fetch {}th datapoint from {}'", ".", "format", "(", "i", ",", "path", ")", ")", "\n", "# name = os.path.splitext(os.path.basename(path))[0]", "\n", "", "item", "=", "path", ".", "split", "(", "'.'", ")", "[", "0", "]", ".", "split", "(", "'/'", ")", "[", "-", "3", "]", "\n", "norm_factor_instance", "=", "self", ".", "all_factors", "[", "item", "]", "\n", "corner_pts_instance", "=", "self", ".", "all_corners", "[", "item", "]", "\n", "joints", "=", "self", ".", "all_joints", "[", "item", "]", "\n", "if", "self", ".", "is_debug", ":", "\n", "            ", "print", "(", "'Now fetching {}th data from instance {} with norm_factors: {}'", ".", "format", "(", "i", ",", "item", ",", "norm_factor_instance", ")", ")", "\n", "", "with", "h5py", ".", "File", "(", "path", ",", "'r'", ")", "as", "handle", ":", "\n", "            ", "data", "=", "self", ".", "create_unit_data_from_hdf5", "(", "handle", ",", "self", ".", "n_max_parts", ",", "self", ".", "num_points", ",", "parts_map", "=", "self", ".", "parts_map", ",", "instance", "=", "item", ",", "norm_factors", "=", "norm_factor_instance", ",", "norm_corners", "=", "corner_pts_instance", ",", "joints", "=", "joints", ",", "nocs_type", "=", "self", ".", "nocs_type", ",", "add_noise", "=", "self", ".", "add_noise", ",", "fixed_order", "=", "self", ".", "fixed_order", ",", "shuffle", "=", "not", "self", ".", "fixed_order", ",", "line_space", "=", "self", ".", "line_space", ",", "is_testing", "=", "self", ".", "is_testing", ")", "\n", "# assert data is not None # assume data are all clean", "\n", "", "if", "self", ".", "is_testing", "or", "self", ".", "is_debug", ":", "\n", "            ", "return", "data", ",", "path", "\n", "", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.dataset.Dataset.__iter__": [[109, 118], ["numpy.random.permutation", "dataset.Dataset.data_matrix.keys"], "methods", ["None"], ["", "def", "__iter__", "(", "self", ")", ":", "\n", "        ", "self", ".", "current", "=", "0", "\n", "if", "not", "self", ".", "fixed_order", "and", "self", ".", "first_iteration_finished", ":", "\n", "# shuffle data matrix", "\n", "            ", "perm", "=", "np", ".", "random", ".", "permutation", "(", "self", ".", "n_data", ")", "\n", "for", "key", "in", "self", ".", "data_matrix", ".", "keys", "(", ")", ":", "\n", "                ", "self", ".", "data_matrix", "[", "key", "]", "=", "self", ".", "data_matrix", "[", "key", "]", "[", "perm", "]", "\n", "\n", "", "", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.dataset.Dataset.__next__": [[119, 156], ["min", "StopIteration", "dataset.Dataset.data_matrix.keys", "range", "data[].keys", "dataset.Dataset.fetch_data_at_index", "hasattr", "data[].keys", "data.append", "numpy.full", "numpy.tile", "numpy.stack", "numpy.expand_dims", "print", "len", "numpy.zeros_like"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.dataset.Dataset.fetch_data_at_index"], ["", "def", "__next__", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "current", ">=", "self", ".", "n_data", ":", "\n", "            ", "if", "not", "self", ".", "first_iteration_finished", ":", "\n", "                ", "self", ".", "first_iteration_finished", "=", "True", "\n", "", "raise", "StopIteration", "(", ")", "\n", "\n", "", "step", "=", "min", "(", "self", ".", "n_data", "-", "self", ".", "current", ",", "self", ".", "batch_size", ")", "\n", "assert", "step", ">", "0", "\n", "self", ".", "last_step_size", "=", "step", "\n", "batched_data", "=", "{", "}", "\n", "if", "self", ".", "first_iteration_finished", ":", "\n", "            ", "for", "key", "in", "self", ".", "data_matrix", ".", "keys", "(", ")", ":", "\n", "                ", "batched_data", "[", "key", "]", "=", "self", ".", "data_matrix", "[", "key", "]", "[", "self", ".", "current", ":", "self", ".", "current", "+", "step", ",", "...", "]", "\n", "", "", "else", ":", "\n", "            ", "data", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "step", ")", ":", "\n", "                ", "dp", "=", "self", ".", "fetch_data_at_index", "(", "self", ".", "current", "+", "i", ")", "\n", "if", "dp", "is", "not", "None", ":", "\n", "                    ", "data", ".", "append", "(", "dp", ")", "\n", "# if len(data) < step:", "\n", "#     for i in range(len(data), step):", "\n", "#         data.append(data[0])", "\n", "", "", "if", "not", "hasattr", "(", "self", ",", "'data_matrix'", ")", ":", "\n", "                ", "self", ".", "data_matrix", "=", "{", "}", "\n", "for", "key", "in", "data", "[", "0", "]", ".", "keys", "(", ")", ":", "\n", "                    ", "trailing_ones", "=", "np", ".", "full", "(", "[", "len", "(", "data", "[", "0", "]", "[", "key", "]", ".", "shape", ")", "]", ",", "1", ",", "dtype", "=", "int", ")", "\n", "self", ".", "data_matrix", "[", "key", "]", "=", "np", ".", "tile", "(", "np", ".", "expand_dims", "(", "np", ".", "zeros_like", "(", "data", "[", "0", "]", "[", "key", "]", ")", ",", "axis", "=", "0", ")", ",", "[", "self", ".", "n_data", ",", "*", "trailing_ones", "]", ")", "\n", "", "", "for", "key", "in", "data", "[", "0", "]", ".", "keys", "(", ")", ":", "\n", "                ", "try", ":", "\n", "                    ", "batched_data", "[", "key", "]", "=", "np", ".", "stack", "(", "[", "x", "[", "key", "]", "for", "x", "in", "data", "]", ",", "axis", "=", "0", ")", "\n", "self", ".", "data_matrix", "[", "key", "]", "[", "self", ".", "current", ":", "self", ".", "current", "+", "step", ",", "...", "]", "=", "batched_data", "[", "key", "]", "[", "0", ":", "step", "]", "\n", "", "except", ":", "\n", "                    ", "print", "(", "'error key is '", ",", "key", ")", "\n", "break", "\n", "\n", "", "", "", "self", ".", "current", "+=", "step", "\n", "return", "batched_data", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.dataset.Dataset.get_last_batch_range": [[157, 160], ["None"], "methods", ["None"], ["", "def", "get_last_batch_range", "(", "self", ")", ":", "\n", "# return: [l, r)", "\n", "        ", "return", "(", "self", ".", "current", "-", "self", ".", "last_step_size", ",", "self", ".", "current", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.dataset.Dataset.get_last_batch_basename_list": [[161, 165], ["dataset.Dataset.get_last_batch_range"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.dataset.Dataset.get_last_batch_range"], ["", "def", "get_last_batch_basename_list", "(", "self", ")", ":", "\n", "        ", "assert", "self", ".", "fixed_order", "\n", "l", ",", "r", "=", "self", ".", "get_last_batch_range", "(", ")", "\n", "return", "self", ".", "basename_list", "[", "l", ":", "r", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.dataset.Dataset.create_iterator": [[166, 168], ["None"], "methods", ["None"], ["", "def", "create_iterator", "(", "self", ")", ":", "\n", "        ", "return", "self", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.dataset.Dataset.fetch_factors_nocs": [[169, 226], ["os.listdir", "open", "pickle.load", "open.close", "open", "pickle.load", "open.close", "print", "data_utils.get_model_pts", "enumerate", "os.path.exists", "os.makedirs", "open", "pickle.dump", "open", "pickle.dump", "open", "pickle.dump", "type", "data_utils.get_urdf_mobility", "numpy.concatenate", "pt_ii.append", "print", "print", "data_utils.get_urdf", "data_utils.get_urdf"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.data_utils.get_model_pts", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.data_utils.get_urdf_mobility", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.data_utils.get_urdf", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.data_utils.get_urdf"], ["", "def", "fetch_factors_nocs", "(", "self", ",", "obj_category", ",", "is_debug", "=", "False", ",", "is_gen", "=", "False", ")", ":", "\n", "        ", "if", "is_gen", ":", "\n", "            ", "all_items", "=", "os", ".", "listdir", "(", "self", ".", "root_dir", "+", "'/render/'", "+", "obj_category", ")", "# check according to render folder", "\n", "all_factors", "=", "{", "}", "\n", "all_corners", "=", "{", "}", "\n", "pts_m", "=", "{", "}", "\n", "root_dset", "=", "self", ".", "root_dir", "\n", "offsets", "=", "None", "\n", "for", "item", "in", "all_items", ":", "\n", "                ", "if", "self", ".", "name_dset", "==", "'sapien'", ":", "\n", "                    ", "path_urdf", "=", "self", ".", "root_dir", "+", "'/objects/'", "+", "'/'", "+", "obj_category", "+", "'/'", "+", "item", "\n", "urdf_ins", "=", "get_urdf_mobility", "(", "path_urdf", ")", "\n", "", "elif", "self", ".", "name_dset", "==", "'shape2motion'", ":", "\n", "                    ", "path_urdf", "=", "self", ".", "root_dir", "+", "'/urdf/'", "+", "'/'", "+", "obj_category", "\n", "urdf_ins", "=", "get_urdf", "(", "\"{}/{}\"", ".", "format", "(", "path_urdf", ",", "item", ")", ")", "\n", "", "else", ":", "\n", "                    ", "path_urdf", "=", "self", ".", "root_dir", "+", "'/urdf/'", "+", "'/'", "+", "obj_category", "\n", "urdf_ins", "=", "get_urdf", "(", "\"{}/{}\"", ".", "format", "(", "path_urdf", ",", "item", ")", ")", "\n", "", "pts", ",", "norm_factors", ",", "corner_pts", "=", "get_model_pts", "(", "self", ".", "root_dir", ",", "self", ".", "ctgy_obj", ",", "item", ",", "obj_file_list", "=", "urdf_ins", "[", "'obj_name'", "]", ",", "offsets", "=", "offsets", ",", "is_debug", "=", "is_debug", ")", "\n", "all_factors", "[", "item", "]", "=", "norm_factors", "\n", "all_corners", "[", "item", "]", "=", "corner_pts", "\n", "\n", "pt_ii", "=", "[", "]", "\n", "bbox3d_per_part", "=", "[", "]", "\n", "for", "p", ",", "pt", "in", "enumerate", "(", "pts", ")", ":", "\n", "                    ", "pt_s", "=", "np", ".", "concatenate", "(", "pt", ",", "axis", "=", "0", ")", "\n", "pt_ii", ".", "append", "(", "pt_s", ")", "\n", "print", "(", "'We have {} pts'", ".", "format", "(", "pt_ii", "[", "p", "]", ".", "shape", "[", "0", "]", ")", ")", "\n", "", "if", "pt_ii", "is", "not", "[", "]", ":", "\n", "                    ", "pts_m", "[", "item", "]", "=", "pt_ii", "\n", "", "else", ":", "\n", "                    ", "print", "(", "'!!!!! {} model loading is wrong'", ".", "format", "(", "item", ")", ")", "\n", "# save into pickle file, need to make pickle folder", "\n", "", "", "directory", "=", "root_dset", "+", "\"/pickle/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "directory", ")", ":", "\n", "                ", "os", ".", "makedirs", "(", "directory", ")", "\n", "", "with", "open", "(", "root_dset", "+", "\"/pickle/{}.pkl\"", ".", "format", "(", "obj_category", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                ", "pickle", ".", "dump", "(", "all_factors", ",", "f", ")", "\n", "", "with", "open", "(", "root_dset", "+", "\"/pickle/{}_corners.pkl\"", ".", "format", "(", "obj_category", ")", ",", "\"wb\"", ")", "as", "fc", ":", "\n", "                ", "pickle", ".", "dump", "(", "all_corners", ",", "fc", ")", "\n", "", "with", "open", "(", "root_dset", "+", "\"/pickle/{}_pts.pkl\"", ".", "format", "(", "obj_category", ")", ",", "'wb'", ")", "as", "fp", ":", "\n", "                ", "pickle", ".", "dump", "(", "pts_m", ",", "fp", ")", "\n", "", "", "else", ":", "\n", "            ", "root_dset", "=", "self", ".", "root_dir", "\n", "# open a file, where you stored the pickled data", "\n", "file", "=", "open", "(", "root_dset", "+", "\"/pickle/{}.pkl\"", ".", "format", "(", "obj_category", ")", ",", "\"rb\"", ")", "\n", "# dump information to that file", "\n", "data", "=", "pickle", ".", "load", "(", "file", ")", "\n", "all_factors", "=", "data", "\n", "file", ".", "close", "(", ")", "\n", "fc", "=", "open", "(", "root_dset", "+", "\"/pickle/{}_corners.pkl\"", ".", "format", "(", "obj_category", ")", ",", "\"rb\"", ")", "\n", "all_corners", "=", "pickle", ".", "load", "(", "fc", ")", "\n", "fc", ".", "close", "(", ")", "\n", "", "if", "is_debug", ":", "\n", "            ", "print", "(", "'Now fetching nocs normalization factors'", ",", "type", "(", "all_factors", ")", ",", "all_factors", ")", "\n", "\n", "", "return", "all_factors", ",", "all_corners", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.dataset.Dataset.fetch_joints_params": [[227, 250], ["os.listdir", "data_utils.get_urdf", "print", "data_utils.get_urdf_mobility", "data_utils.get_urdf"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.data_utils.get_urdf", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.data_utils.get_urdf_mobility", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.data_utils.get_urdf"], ["", "def", "fetch_joints_params", "(", "self", ",", "obj_category", ",", "is_debug", "=", "False", ")", ":", "\n", "        ", "all_items", "=", "os", ".", "listdir", "(", "self", ".", "root_dir", "+", "'/render/'", "+", "obj_category", ")", "#TODO: which one to choose? urdf or render?", "\n", "all_joints", "=", "{", "}", "\n", "root_dset", "=", "self", ".", "root_dir", "\n", "for", "item", "in", "all_items", ":", "\n", "            ", "if", "self", ".", "name_dset", "==", "'shape2motion'", ":", "\n", "                ", "path_urdf", "=", "self", ".", "root_dir", "+", "'/urdf/'", "+", "'/'", "+", "obj_category", "\n", "urdf_ins", "=", "get_urdf", "(", "\"{}/{}\"", ".", "format", "(", "path_urdf", ",", "item", ")", ")", "\n", "", "elif", "self", ".", "name_dset", "==", "'sapien'", ":", "\n", "                ", "path_urdf", "=", "self", ".", "root_dir", "+", "'/objects/'", "+", "'/'", "+", "obj_category", "+", "'/'", "+", "item", "\n", "urdf_ins", "=", "get_urdf_mobility", "(", "path_urdf", ")", "\n", "", "else", ":", "\n", "                ", "path_urdf", "=", "self", ".", "root_dir", "+", "'/urdf/'", "+", "'/'", "+", "obj_category", "\n", "urdf_ins", "=", "get_urdf", "(", "\"{}/{}\"", ".", "format", "(", "path_urdf", ",", "item", ")", ")", "\n", "", "if", "obj_category", "==", "'bike'", ":", "\n", "                ", "urdf_ins", "[", "'link'", "]", "[", "'xyz'", "]", "[", "1", "]", ",", "urdf_ins", "[", "'link'", "]", "[", "'xyz'", "]", "[", "2", "]", "=", "urdf_ins", "[", "'link'", "]", "[", "'xyz'", "]", "[", "2", "]", ",", "urdf_ins", "[", "'link'", "]", "[", "'xyz'", "]", "[", "1", "]", "\n", "urdf_ins", "[", "'joint'", "]", "[", "'axis'", "]", "[", "1", "]", ",", "urdf_ins", "[", "'joint'", "]", "[", "'axis'", "]", "[", "2", "]", "=", "urdf_ins", "[", "'joint'", "]", "[", "'axis'", "]", "[", "2", "]", ",", "urdf_ins", "[", "'joint'", "]", "[", "'axis'", "]", "[", "1", "]", "\n", "", "all_joints", "[", "item", "]", "=", "urdf_ins", "\n", "\n", "if", "is_debug", ":", "\n", "                ", "print", "(", "urdf_ins", "[", "'link'", "]", "[", "'xyz'", "]", ",", "urdf_ins", "[", "'joint'", "]", "[", "'axis'", "]", ")", "\n", "\n", "", "", "return", "all_joints", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.dataset.Dataset.create_unit_data_from_hdf5": [[251, 433], ["len", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.random.permutation", "numpy.zeros", "dataset.Dataset.create_data_mobility", "dataset.Dataset.create_data_shape2motion", "print", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "print", "numpy.amax", "print", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.zeros", "numpy.where", "numpy.dot", "numpy.dot", "int", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.zeros", "numpy.zeros", "numpy.concatenate.astype", "numpy.zeros.astype", "transformations.euler_matrix", "numpy.dot", "numpy.concatenate.astype", "numpy.zeros.astype", "numpy.concatenate.astype", "numpy.concatenate.astype", "offset_heatmap_arr.astype", "numpy.dot.astype", "numpy.dot.astype", "joint_cls_arr.astype", "numpy.zeros.astype", "numpy.amax", "numpy.amax", "transformations.euler_matrix", "numpy.dot", "numpy.dot", "numpy.arange", "numpy.concatenate.astype", "numpy.dot", "numpy.concatenate.astype", "numpy.zeros.astype", "numpy.concatenate.astype", "numpy.concatenate.astype", "numpy.zeros.astype", "numpy.concatenate.astype", "offset_heatmap_arr.astype", "numpy.dot.astype", "numpy.dot.astype", "joint_cls_arr.astype", "numpy.zeros.astype", "numpy.concatenate.astype", "numpy.zeros.astype", "numpy.concatenate.astype", "numpy.concatenate.astype", "offset_heatmap_arr.astype", "numpy.dot.astype", "numpy.dot.astype", "joint_cls_arr.astype", "numpy.zeros.astype"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.dataset.Dataset.create_data_mobility", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.dataset.Dataset.create_data_shape2motion", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.euler_matrix", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.euler_matrix"], ["", "def", "create_unit_data_from_hdf5", "(", "self", ",", "f", ",", "n_max_parts", ",", "num_points", ",", "parts_map", "=", "[", "[", "0", ",", "3", ",", "4", "]", ",", "[", "1", ",", "2", "]", "]", ",", "instance", "=", "None", ",", "norm_corners", "=", "[", "None", "]", ",", "norm_factors", "=", "[", "None", "]", ",", "joints", "=", "None", ",", "nocs_type", "=", "'A'", ",", "line_space", "=", "'orth'", ",", "thres_r", "=", "0.2", ",", "add_noise", "=", "False", ",", "fixed_order", "=", "False", ",", "check_only", "=", "False", ",", "shuffle", "=", "True", ",", "is_testing", "=", "False", ",", "is_debug", "=", "False", ")", ":", "\n", "        ", "n_parts", "=", "len", "(", "parts_map", ")", "\n", "if", "self", ".", "name_dset", "==", "'sapien'", ":", "\n", "            ", "nocs_p", ",", "nocs_g", ",", "nocs_n", ",", "parts_cls", ",", "parts_pts", ",", "offset_heatmap", ",", "offset_unitvec", ",", "joint_orient", ",", "joint_cls", ",", "joint_params", ",", "n_total_points", "=", "self", ".", "create_data_mobility", "(", "f", ",", "n_max_parts", ",", "num_points", ",", "parts_map", "=", "parts_map", ",", "instance", "=", "instance", ",", "norm_corners", "=", "norm_corners", ",", "norm_factors", "=", "norm_factors", ",", "joints", "=", "joints", ",", "nocs_type", "=", "nocs_type", ",", "line_space", "=", "line_space", ",", "thres_r", "=", "thres_r", ",", "add_noise", "=", "add_noise", ",", "fixed_order", "=", "fixed_order", ",", "check_only", "=", "check_only", ",", "shuffle", "=", "shuffle", ",", "is_testing", "=", "is_testing", ",", "is_debug", "=", "is_debug", ")", "\n", "", "else", ":", "\n", "            ", "nocs_p", ",", "nocs_g", ",", "nocs_n", ",", "parts_cls", ",", "parts_pts", ",", "offset_heatmap", ",", "offset_unitvec", ",", "joint_orient", ",", "joint_cls", ",", "joint_params", ",", "n_total_points", "=", "self", ".", "create_data_shape2motion", "(", "f", ",", "n_max_parts", ",", "num_points", ",", "parts_map", "=", "parts_map", ",", "instance", "=", "instance", ",", "norm_corners", "=", "norm_corners", ",", "norm_factors", "=", "norm_factors", ",", "joints", "=", "joints", ",", "nocs_type", "=", "nocs_type", ",", "line_space", "=", "line_space", ",", "thres_r", "=", "thres_r", ",", "add_noise", "=", "add_noise", ",", "fixed_order", "=", "fixed_order", ",", "check_only", "=", "check_only", ",", "shuffle", "=", "shuffle", ",", "is_testing", "=", "is_testing", ",", "is_debug", "=", "is_debug", ")", "\n", "", "cls_arr", "=", "np", ".", "concatenate", "(", "parts_cls", ",", "axis", "=", "0", ")", "\n", "pts_arr", "=", "np", ".", "concatenate", "(", "parts_pts", ",", "axis", "=", "0", ")", "\n", "offset_heatmap", "=", "np", ".", "concatenate", "(", "offset_heatmap", ",", "axis", "=", "0", ")", "\n", "if", "is_debug", ":", "\n", "            ", "print", "(", "'offset_heatmap max is {}'", ".", "format", "(", "np", ".", "amax", "(", "offset_heatmap", ")", ")", ")", "\n", "", "offset_unitvec", "=", "np", ".", "concatenate", "(", "offset_unitvec", ",", "axis", "=", "0", ")", "\n", "joint_orient", "=", "np", ".", "concatenate", "(", "joint_orient", ",", "axis", "=", "0", ")", "\n", "joint_cls", "=", "np", ".", "concatenate", "(", "joint_cls", ",", "axis", "=", "0", ")", "\n", "\n", "if", "nocs_p", "[", "0", "]", "is", "not", "None", ":", "\n", "            ", "p_arr", "=", "np", ".", "concatenate", "(", "nocs_p", ",", "axis", "=", "0", ")", "\n", "", "if", "nocs_n", "[", "0", "]", "is", "not", "None", ":", "\n", "            ", "n_arr", "=", "np", ".", "concatenate", "(", "nocs_n", ",", "axis", "=", "0", ")", "\n", "", "if", "nocs_g", "[", "0", "]", "is", "not", "None", ":", "\n", "            ", "g_arr", "=", "np", ".", "concatenate", "(", "nocs_g", ",", "axis", "=", "0", ")", "\n", "\n", "", "if", "n_parts", ">", "n_max_parts", ":", "\n", "            ", "print", "(", "'n_parts {} > n_max_parts {}'", ".", "format", "(", "n_parts", ",", "n_max_parts", ")", ")", "\n", "return", "None", "\n", "\n", "", "if", "np", ".", "amax", "(", "cls_arr", ")", ">=", "n_parts", ":", "\n", "            ", "print", "(", "'max label {} > n_parts {}'", ".", "format", "(", "np", ".", "amax", "(", "cls_arr", ")", ",", "n_parts", ")", ")", "\n", "return", "None", "\n", "\n", "", "if", "n_total_points", "<", "num_points", ":", "\n", "# print('tiling points, n_total_points {} < num_points {} required'.format(n_total_points, num_points))", "\n", "# we'll tile the points", "\n", "            ", "tile_n", "=", "int", "(", "num_points", "/", "n_total_points", ")", "+", "1", "\n", "n_total_points", "=", "tile_n", "*", "n_total_points", "\n", "cls_tiled", "=", "np", ".", "concatenate", "(", "[", "cls_arr", "]", "*", "tile_n", ",", "axis", "=", "0", ")", "\n", "cls_arr", "=", "cls_tiled", "\n", "pts_tiled", "=", "np", ".", "concatenate", "(", "[", "pts_arr", "]", "*", "tile_n", ",", "axis", "=", "0", ")", "\n", "pts_arr", "=", "pts_tiled", "\n", "offset_heatmap_tiled", "=", "np", ".", "concatenate", "(", "[", "offset_heatmap", "]", "*", "tile_n", ",", "axis", "=", "0", ")", "\n", "offset_heatmap", "=", "offset_heatmap_tiled", "\n", "offset_unitvec_tiled", "=", "np", ".", "concatenate", "(", "[", "offset_unitvec", "]", "*", "tile_n", ",", "axis", "=", "0", ")", "\n", "offset_unitvec", "=", "offset_unitvec_tiled", "\n", "joint_orient_tiled", "=", "np", ".", "concatenate", "(", "[", "joint_orient", "]", "*", "tile_n", ",", "axis", "=", "0", ")", "\n", "joint_orient", "=", "joint_orient_tiled", "\n", "joint_cls_tiled", "=", "np", ".", "concatenate", "(", "[", "joint_cls", "]", "*", "tile_n", ",", "axis", "=", "0", ")", "\n", "joint_cls", "=", "joint_cls_tiled", "\n", "if", "nocs_p", "[", "0", "]", "is", "not", "None", ":", "\n", "                ", "p_tiled", "=", "np", ".", "concatenate", "(", "[", "p_arr", "]", "*", "tile_n", ",", "axis", "=", "0", ")", "\n", "p_arr", "=", "p_tiled", "\n", "\n", "", "if", "nocs_n", "[", "0", "]", "is", "not", "None", ":", "\n", "                ", "n_tiled", "=", "np", ".", "concatenate", "(", "[", "n_arr", "]", "*", "tile_n", ",", "axis", "=", "0", ")", "\n", "n_arr", "=", "n_tiled", "\n", "\n", "", "if", "nocs_g", "[", "0", "]", "is", "not", "None", ":", "\n", "                ", "g_tiled", "=", "np", ".", "concatenate", "(", "[", "g_arr", "]", "*", "tile_n", ",", "axis", "=", "0", ")", "\n", "g_arr", "=", "g_tiled", "\n", "\n", "", "", "if", "check_only", ":", "\n", "            ", "return", "True", "\n", "", "if", "self", ".", "name_dset", "==", "'BMVC15'", ":", "\n", "            ", "if", "n_parts", "<", "3", ":", "\n", "                ", "mask_array", "=", "np", ".", "zeros", "(", "[", "num_points", ",", "3", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "else", ":", "\n", "                ", "mask_array", "=", "np", ".", "zeros", "(", "[", "num_points", ",", "6", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "", "else", ":", "\n", "            ", "mask_array", "=", "np", ".", "zeros", "(", "[", "num_points", ",", "n_parts", "]", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "", "img", "=", "f", "[", "'rgb'", "]", "[", "(", ")", "]", "\n", "if", "is_testing", ":", "# return the original unsmapled data", "\n", "            ", "if", "self", ".", "name_dset", "==", "'sapien'", ":", "\n", "                ", "target_order", "=", "self", ".", "ctgy_spec", ".", "spec_map", "[", "instance", "]", "\n", "joint_rpy", "=", "joints", "[", "'joint'", "]", "[", "'rpy'", "]", "[", "target_order", "[", "0", "]", "]", "\n", "rot_mat", "=", "euler_matrix", "(", "joint_rpy", "[", "0", "]", ",", "joint_rpy", "[", "1", "]", ",", "joint_rpy", "[", "2", "]", ")", "[", ":", "3", ",", ":", "3", "]", "\n", "p_arr", "=", "np", ".", "dot", "(", "p_arr", "-", "0.5", ",", "rot_mat", ".", "T", ")", "+", "0.5", "\n", "g_arr", "=", "np", ".", "dot", "(", "g_arr", "-", "0.5", ",", "rot_mat", ".", "T", ")", "+", "0.5", "\n", "", "result", "=", "{", "\n", "'img'", ":", "img", ",", "\n", "'P'", ":", "pts_arr", "*", "norm_factors", "[", "0", "]", ",", "# todo", "\n", "'cls_gt'", ":", "cls_arr", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "'mask_array'", ":", "mask_array", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "'nocs_gt'", ":", "p_arr", ",", "\n", "'nocs_gt_g'", ":", "g_arr", ",", "\n", "}", "\n", "return", "result", "\n", "\n", "", "perm", "=", "np", ".", "random", ".", "permutation", "(", "n_total_points", ")", "\n", "cls_arr", "=", "cls_arr", "[", "perm", "[", ":", "num_points", "]", "]", "\n", "if", "self", ".", "name_dset", "==", "'BMVC15'", ":", "\n", "            ", "pts_arr", "=", "pts_arr", "[", "perm", "[", ":", "num_points", "]", "]", "\n", "", "else", ":", "\n", "            ", "pts_arr", "=", "pts_arr", "[", "perm", "[", ":", "num_points", "]", "]", "*", "norm_factors", "[", "0", "]", "\n", "", "offset_heatmap_arr", "=", "offset_heatmap", "[", "perm", "[", ":", "num_points", "]", "]", "\n", "offset_unitvec_arr", "=", "offset_unitvec", "[", "perm", "[", ":", "num_points", "]", "]", "\n", "joint_orient_arr", "=", "joint_orient", "[", "perm", "[", ":", "num_points", "]", "]", "\n", "joint_cls_arr", "=", "joint_cls", "[", "perm", "[", ":", "num_points", "]", "]", "\n", "# print('joint_cls_arr has shape: ', joint_cls_arr.shape)", "\n", "joint_cls_mask", "=", "np", ".", "zeros", "(", "(", "joint_cls_arr", ".", "shape", "[", "0", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "id_valid", "=", "np", ".", "where", "(", "joint_cls_arr", ">", "0", ")", "[", "0", "]", "\n", "joint_cls_mask", "[", "id_valid", "]", "=", "1.00", "\n", "\n", "mask_array", "[", "np", ".", "arange", "(", "num_points", ")", ",", "cls_arr", ".", "astype", "(", "np", ".", "int8", ")", "]", "=", "1.00", "\n", "\n", "if", "nocs_p", "[", "0", "]", "is", "not", "None", ":", "\n", "            ", "p_arr", "=", "p_arr", "[", "perm", "[", ":", "num_points", "]", "]", "\n", "", "if", "nocs_n", "[", "0", "]", "is", "not", "None", ":", "\n", "            ", "n_arr", "=", "n_arr", "[", "perm", "[", ":", "num_points", "]", "]", "\n", "", "if", "nocs_g", "[", "0", "]", "is", "not", "None", ":", "\n", "            ", "g_arr", "=", "g_arr", "[", "perm", "[", ":", "num_points", "]", "]", "\n", "\n", "# rotate according to urdf_ins joint_rpy", "\n", "", "if", "self", ".", "name_dset", "==", "'sapien'", ":", "\n", "            ", "target_order", "=", "self", ".", "ctgy_spec", ".", "spec_map", "[", "instance", "]", "\n", "joint_rpy", "=", "joints", "[", "'joint'", "]", "[", "'rpy'", "]", "[", "target_order", "[", "0", "]", "]", "\n", "rot_mat", "=", "euler_matrix", "(", "joint_rpy", "[", "0", "]", ",", "joint_rpy", "[", "1", "]", ",", "joint_rpy", "[", "2", "]", ")", "[", ":", "3", ",", ":", "3", "]", "\n", "if", "nocs_p", "[", "0", "]", "is", "not", "None", ":", "\n", "                ", "p_arr", "=", "np", ".", "dot", "(", "p_arr", "-", "0.5", ",", "rot_mat", ".", "T", ")", "+", "0.5", "\n", "", "g_arr", "=", "np", ".", "dot", "(", "g_arr", "-", "0.5", ",", "rot_mat", ".", "T", ")", "+", "0.5", "\n", "offset_unitvec_arr", "=", "np", ".", "dot", "(", "offset_unitvec_arr", ",", "rot_mat", ".", "T", ")", "\n", "joint_orient_arr", "=", "np", ".", "dot", "(", "joint_orient_arr", ",", "rot_mat", ".", "T", ")", "\n", "\n", "", "if", "nocs_type", "==", "'A'", ":", "\n", "            ", "result", "=", "{", "\n", "'P'", ":", "pts_arr", ",", "\n", "'cls_gt'", ":", "cls_arr", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "'mask_array'", ":", "mask_array", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "'nocs_gt'", ":", "p_arr", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "'nocs_gt_g'", ":", "g_arr", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "'heatmap_gt'", ":", "offset_heatmap_arr", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "'unitvec_gt'", ":", "offset_unitvec_arr", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "'orient_gt'", ":", "joint_orient_arr", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "'joint_cls_gt'", ":", "joint_cls_arr", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "'joint_cls_mask'", ":", "joint_cls_mask", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "'joint_params_gt'", ":", "joint_params", ",", "\n", "}", "\n", "", "elif", "nocs_type", "==", "'B'", ":", "\n", "            ", "result", "=", "{", "\n", "'P'", ":", "pts_arr", ",", "\n", "'cls_gt'", ":", "cls_arr", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "'mask_array'", ":", "mask_array", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "'nocs_gt'", ":", "n_arr", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "}", "\n", "", "elif", "nocs_type", "==", "'C'", ":", "\n", "            ", "result", "=", "{", "\n", "'P'", ":", "pts_arr", ",", "\n", "'cls_gt'", ":", "cls_arr", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "'mask_array'", ":", "mask_array", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "'nocs_gt'", ":", "g_arr", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "'heatmap_gt'", ":", "offset_heatmap_arr", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "'unitvec_gt'", ":", "offset_unitvec_arr", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "'orient_gt'", ":", "joint_orient_arr", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "'joint_cls_gt'", ":", "joint_cls_arr", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "'joint_cls_mask'", ":", "joint_cls_mask", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "'joint_params_gt'", ":", "joint_params", ",", "\n", "# 'joint_axis'   : # [B, 2, 7]", "\n", "}", "\n", "", "elif", "nocs_type", "==", "'AC'", ":", "\n", "            ", "result", "=", "{", "\n", "'P'", ":", "pts_arr", ",", "\n", "'cls_gt'", ":", "cls_arr", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "'mask_array'", ":", "mask_array", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "'nocs_gt'", ":", "p_arr", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "'nocs_gt_g'", ":", "g_arr", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "'heatmap_gt'", ":", "offset_heatmap_arr", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "'unitvec_gt'", ":", "offset_unitvec_arr", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "'orient_gt'", ":", "joint_orient_arr", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "'joint_cls_gt'", ":", "joint_cls_arr", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "'joint_cls_mask'", ":", "joint_cls_mask", ".", "astype", "(", "np", ".", "float32", ")", ",", "\n", "'joint_params_gt'", ":", "joint_params", ",", "\n", "}", "\n", "# for keys, item in result.items():", "\n", "#     print(keys, item.shape)", "\n", "", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.dataset.Dataset.create_data_shape2motion": [[434, 555], ["len", "numpy.zeros", "enumerate", "range", "enumerate", "numpy.zeros", "range", "range", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "enumerate", "len", "numpy.concatenate", "numpy.ones", "len", "numpy.concatenate", "numpy.array", "d3_utils.point_3d_offset_joint", "numpy.linalg.norm", "numpy.array", "d3_utils.point_3d_offset_joint", "parts_offset_joint[].append", "parts_joints[].append", "joint_index[].append", "numpy.linalg.norm", "plot_arrows_list", "plot_arrows_list_threshold", "enumerate", "numpy.array().reshape", "numpy.array().reshape", "numpy.array", "numpy.array().reshape", "numpy.array", "numpy.array", "d3_utils.point_3d_offset_joint", "parts_offset_joint[].append", "parts_joints[].append", "joint_index[].append", "numpy.where", "numpy.array().reshape", "numpy.array().reshape", "numpy.array", "numpy.linalg.norm.reshape", "str", "str", "numpy.array", "numpy.array", "numpy.array", "numpy.array().reshape", "numpy.array", "numpy.array", "numpy.array", "str", "str"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.point_3d_offset_joint", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.point_3d_offset_joint", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.vis_utils.plot_arrows_list", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.vis_utils.plot_arrows_list_threshold", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.point_3d_offset_joint"], ["", "def", "create_data_shape2motion", "(", "self", ",", "f", ",", "n_max_parts", ",", "num_points", ",", "parts_map", "=", "[", "[", "0", ",", "3", ",", "4", "]", ",", "[", "1", ",", "2", "]", "]", ",", "instance", "=", "None", ",", "norm_corners", "=", "[", "None", "]", ",", "norm_factors", "=", "[", "None", "]", ",", "joints", "=", "None", ",", "nocs_type", "=", "'A'", ",", "line_space", "=", "'orth'", ",", "thres_r", "=", "0.2", ",", "add_noise", "=", "False", ",", "fixed_order", "=", "False", ",", "check_only", "=", "False", ",", "shuffle", "=", "True", ",", "is_testing", "=", "False", ",", "is_debug", "=", "False", ")", ":", "\n", "        ", "'''\n            f will be a h5py group-like object\n        '''", "\n", "# read", "\n", "n_parts", "=", "len", "(", "parts_map", ")", "# parts map to combine points", "\n", "parts_pts", "=", "[", "None", "]", "*", "n_parts", "\n", "parts_gts", "=", "[", "None", "]", "*", "n_parts", "\n", "parts_cls", "=", "[", "None", "]", "*", "n_parts", "\n", "parts_nocs", "=", "[", "None", "]", "*", "n_parts", "\n", "nocs_p", "=", "[", "None", "]", "*", "n_parts", "\n", "nocs_g", "=", "[", "None", "]", "*", "n_parts", "\n", "nocs_n", "=", "[", "None", "]", "*", "n_parts", "\n", "n_total_points", "=", "0", "\n", "parts_parent_joint", "=", "[", "None", "]", "*", "n_parts", "\n", "parts_child_joint", "=", "[", "None", "]", "*", "n_parts", "\n", "if", "n_parts", "==", "2", ":", "\n", "            ", "parts_offset_joint", "=", "[", "[", "]", ",", "[", "]", "]", "\n", "parts_joints", "=", "[", "[", "]", ",", "[", "]", "]", "\n", "joint_index", "=", "[", "[", "]", ",", "[", "]", "]", "\n", "", "elif", "n_parts", "==", "3", ":", "\n", "            ", "parts_offset_joint", "=", "[", "[", "]", ",", "[", "]", ",", "[", "]", "]", "# per part pts offsets to correponding parts", "\n", "parts_joints", "=", "[", "[", "]", ",", "[", "]", ",", "[", "]", "]", "# joint params list of the joints", "\n", "joint_index", "=", "[", "[", "]", ",", "[", "]", ",", "[", "]", "]", "# joint index recording the corresponding parts", "\n", "", "elif", "n_parts", "==", "4", ":", "\n", "            ", "parts_offset_joint", "=", "[", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "]", "# per part pts offsets to correponding parts", "\n", "parts_joints", "=", "[", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "]", "# joint params list of the joints", "\n", "joint_index", "=", "[", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "]", "# joint index recording the corresponding parts", "\n", "\n", "", "joint_xyz", "=", "joints", "[", "'link'", "]", "[", "'xyz'", "]", "\n", "joint_rpy", "=", "joints", "[", "'joint'", "]", "[", "'axis'", "]", "\n", "joint_part", "=", "joints", "[", "'joint'", "]", "[", "'parent'", "]", "\n", "joint_type", "=", "joints", "[", "'joint'", "]", "[", "'type'", "]", "\n", "\n", "joint_params", "=", "np", ".", "zeros", "(", "(", "n_parts", ",", "7", ")", ")", "\n", "if", "line_space", "==", "'plucker'", ":", "\n", "            ", "joint_params", "=", "np", ".", "zeros", "(", "(", "n_parts", ",", "6", ")", ")", "\n", "\n", "", "for", "idx", ",", "group", "in", "enumerate", "(", "parts_map", ")", ":", "\n", "            ", "P", "=", "f", "[", "'gt_points'", "]", "[", "str", "(", "group", "[", "0", "]", ")", "]", "[", "(", ")", "]", "[", ":", ",", ":", "3", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "group", ")", ")", ":", "\n", "                ", "P", "=", "np", ".", "concatenate", "(", "(", "P", ",", "f", "[", "'gt_points'", "]", "[", "str", "(", "group", "[", "i", "]", ")", "]", "[", "(", ")", "]", "[", ":", ",", ":", "3", "]", ")", ",", "axis", "=", "0", ")", "\n", "", "parts_pts", "[", "idx", "]", "=", "P", "\n", "n_total_points", "+=", "P", ".", "shape", "[", "0", "]", "\n", "parts_cls", "[", "idx", "]", "=", "idx", "*", "np", ".", "ones", "(", "(", "P", ".", "shape", "[", "0", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "Pc", "=", "f", "[", "'gt_coords'", "]", "[", "str", "(", "group", "[", "0", "]", ")", "]", "[", "(", ")", "]", "[", ":", ",", ":", "3", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "group", ")", ")", ":", "\n", "                ", "Pc", "=", "np", ".", "concatenate", "(", "(", "Pc", ",", "f", "[", "'gt_coords'", "]", "[", "str", "(", "group", "[", "i", "]", ")", "]", "[", "(", ")", "]", "[", ":", ",", ":", "3", "]", ")", ",", "axis", "=", "0", ")", "\n", "", "parts_gts", "[", "idx", "]", "=", "Pc", "\n", "parts_parent_joint", "[", "idx", "]", "=", "group", "[", "0", "]", "# first element as part that serve as child", "\n", "parts_child_joint", "[", "idx", "]", "=", "[", "ind", "for", "ind", ",", "x", "in", "enumerate", "(", "joint_part", ")", "if", "x", "==", "group", "[", "-", "1", "]", "]", "# in a group, we may use the last element to find joint that part serves as parent", "\n", "# plot3d_pts([parts_gts], [['part {}'.format(j) for j in range(len(parts_map))]], s=10, title_name=['default'])", "\n", "\n", "", "for", "j", "in", "range", "(", "n_parts", ")", ":", "\n", "# part NOCS compared to A-shape", "\n", "            ", "norm_factor", "=", "norm_factors", "[", "j", "+", "1", "]", "\n", "norm_corner", "=", "norm_corners", "[", "j", "+", "1", "]", "\n", "nocs_p", "[", "j", "]", "=", "(", "parts_gts", "[", "j", "]", "[", ":", ",", ":", "3", "]", "-", "norm_corner", "[", "0", "]", ")", "*", "norm_factor", "+", "np", ".", "array", "(", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", ".", "reshape", "(", "1", ",", "3", ")", "-", "0.5", "*", "(", "norm_corner", "[", "1", "]", "-", "norm_corner", "[", "0", "]", ")", "*", "norm_factor", "\n", "\n", "norm_factor", "=", "norm_factors", "[", "0", "]", "\n", "norm_corner", "=", "norm_corners", "[", "0", "]", "\n", "nocs_g", "[", "j", "]", "=", "(", "parts_gts", "[", "j", "]", "[", ":", ",", ":", "3", "]", "-", "norm_corner", "[", "0", "]", ")", "*", "norm_factor", "+", "np", ".", "array", "(", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", ".", "reshape", "(", "1", ",", "3", ")", "-", "0.5", "*", "(", "norm_corner", "[", "1", "]", "-", "norm_corner", "[", "0", "]", ")", "*", "norm_factor", "\n", "if", "j", ">", "0", ":", "\n", "                ", "joint_P0", "=", "-", "np", ".", "array", "(", "joint_xyz", "[", "j", "]", ")", "\n", "joint_P0", "=", "(", "joint_P0", "-", "norm_corner", "[", "0", "]", ")", "*", "norm_factor", "+", "np", ".", "array", "(", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", ".", "reshape", "(", "1", ",", "3", ")", "-", "0.5", "*", "(", "norm_corner", "[", "1", "]", "-", "norm_corner", "[", "0", "]", ")", "*", "norm_factor", "\n", "joint_l", "=", "np", ".", "array", "(", "joint_rpy", "[", "j", "]", ")", "\n", "orth_vect", "=", "point_3d_offset_joint", "(", "[", "joint_P0", ",", "joint_l", "]", ",", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", "]", ")", ".", "reshape", "(", "1", ",", "3", ")", ")", "\n", "joint_params", "[", "j", ",", "0", ":", "3", "]", "=", "joint_l", "\n", "joint_params", "[", "j", ",", "6", "]", "=", "np", ".", "linalg", ".", "norm", "(", "orth_vect", ")", "\n", "joint_params", "[", "j", ",", "3", ":", "6", "]", "=", "orth_vect", "/", "joint_params", "[", "j", ",", "6", "]", "\n", "\n", "", "if", "parts_parent_joint", "[", "j", "]", "!=", "0", ":", "\n", "                ", "joint_P0", "=", "-", "np", ".", "array", "(", "joint_xyz", "[", "parts_parent_joint", "[", "j", "]", "]", ")", "\n", "joint_P0", "=", "(", "joint_P0", "-", "norm_corner", "[", "0", "]", ")", "*", "norm_factor", "+", "np", ".", "array", "(", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", ".", "reshape", "(", "1", ",", "3", ")", "-", "0.5", "*", "(", "norm_corner", "[", "1", "]", "-", "norm_corner", "[", "0", "]", ")", "*", "norm_factor", "\n", "joint_l", "=", "np", ".", "array", "(", "joint_rpy", "[", "j", "]", ")", "\n", "offset_arr", "=", "point_3d_offset_joint", "(", "[", "joint_P0", ",", "joint_l", "]", ",", "nocs_g", "[", "j", "]", ")", "\n", "parts_offset_joint", "[", "j", "]", ".", "append", "(", "offset_arr", ")", "\n", "parts_joints", "[", "j", "]", ".", "append", "(", "[", "joint_P0", ",", "joint_l", "]", ")", "\n", "joint_index", "[", "j", "]", ".", "append", "(", "parts_parent_joint", "[", "j", "]", ")", "\n", "# if is_debug:", "\n", "#     plot_arrows(nocs_g[j], offset_arr, [joint_P0, joint_l], title_name='NOCS {} to joint {}'.format(j, j))", "\n", "", "if", "parts_child_joint", "[", "j", "]", "is", "not", "None", ":", "\n", "                ", "for", "m", "in", "parts_child_joint", "[", "j", "]", ":", "\n", "                    ", "joint_P0", "=", "-", "np", ".", "array", "(", "joint_xyz", "[", "m", "]", ")", "\n", "joint_P0", "=", "(", "joint_P0", "-", "norm_corner", "[", "0", "]", ")", "*", "norm_factor", "+", "np", ".", "array", "(", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", ".", "reshape", "(", "1", ",", "3", ")", "-", "0.5", "*", "(", "norm_corner", "[", "1", "]", "-", "norm_corner", "[", "0", "]", ")", "*", "norm_factor", "\n", "joint_l", "=", "np", ".", "array", "(", "joint_rpy", "[", "m", "]", ")", "\n", "offset_arr", "=", "point_3d_offset_joint", "(", "[", "joint_P0", ",", "joint_l", "]", ",", "nocs_g", "[", "j", "]", ")", "\n", "parts_offset_joint", "[", "j", "]", ".", "append", "(", "offset_arr", ")", "\n", "parts_joints", "[", "j", "]", ".", "append", "(", "[", "joint_P0", ",", "joint_l", "]", ")", "\n", "joint_index", "[", "j", "]", ".", "append", "(", "m", ")", "\n", "# if is_debug:", "\n", "#     plot_arrows(nocs_g[j], offset_arr, [joint_P0, joint_l], title_name='NOCS {} to joint {}'.format(j, m))", "\n", "# sampling & fusion", "\n", "# rate_sampling = num_points_in/num_points", "\n", "", "", "", "offset_heatmap", "=", "[", "None", "]", "*", "n_parts", "\n", "offset_unitvec", "=", "[", "None", "]", "*", "n_parts", "\n", "joint_orient", "=", "[", "None", "]", "*", "n_parts", "\n", "joint_cls", "=", "[", "None", "]", "*", "n_parts", "\n", "for", "j", ",", "offsets", "in", "enumerate", "(", "parts_offset_joint", ")", ":", "\n", "            ", "offset_heatmap", "[", "j", "]", "=", "np", ".", "zeros", "(", "(", "parts_gts", "[", "j", "]", ".", "shape", "[", "0", "]", ")", ")", "\n", "offset_unitvec", "[", "j", "]", "=", "np", ".", "zeros", "(", "(", "parts_gts", "[", "j", "]", ".", "shape", "[", "0", "]", ",", "3", ")", ")", "\n", "joint_orient", "[", "j", "]", "=", "np", ".", "zeros", "(", "(", "parts_gts", "[", "j", "]", ".", "shape", "[", "0", "]", ",", "3", ")", ")", "\n", "joint_cls", "[", "j", "]", "=", "np", ".", "zeros", "(", "(", "parts_gts", "[", "j", "]", ".", "shape", "[", "0", "]", ")", ")", "\n", "for", "k", ",", "offset", "in", "enumerate", "(", "offsets", ")", ":", "\n", "                ", "heatmap", "=", "np", ".", "linalg", ".", "norm", "(", "offset", ",", "axis", "=", "1", ")", "\n", "unitvec", "=", "offset", "/", "(", "heatmap", ".", "reshape", "(", "-", "1", ",", "1", ")", "+", "epsilon", ")", "\n", "idc", "=", "np", ".", "where", "(", "heatmap", "<", "thres_r", ")", "[", "0", "]", "\n", "offset_heatmap", "[", "j", "]", "[", "idc", "]", "=", "1", "-", "heatmap", "[", "idc", "]", "/", "thres_r", "\n", "offset_unitvec", "[", "j", "]", "[", "idc", ",", ":", "]", "=", "unitvec", "[", "idc", ",", ":", "]", "\n", "joint_orient", "[", "j", "]", "[", "idc", ",", ":", "]", "=", "parts_joints", "[", "j", "]", "[", "k", "]", "[", "1", "]", "\n", "joint_cls", "[", "j", "]", "[", "idc", "]", "=", "joint_index", "[", "j", "]", "[", "k", "]", "\n", "\n", "", "", "if", "nocs_type", "==", "'C'", ":", "\n", "            ", "if", "is_debug", ":", "\n", "                ", "plot_arrows_list", "(", "nocs_g", ",", "parts_offset_joint", ",", "parts_joints", ",", "title_name", "=", "'joint offset'", ")", "\n", "plot_arrows_list_threshold", "(", "nocs_g", ",", "parts_offset_joint", ",", "parts_joints", ",", "title_name", "=", "'joint offset'", ")", "\n", "\n", "", "", "return", "nocs_p", ",", "nocs_g", ",", "nocs_n", ",", "parts_cls", ",", "parts_pts", ",", "offset_heatmap", ",", "offset_unitvec", ",", "joint_orient", ",", "joint_cls", ",", "joint_params", ",", "n_total_points", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.dataset.Dataset.create_data_mobility": [[556, 702], ["len", "numpy.zeros", "enumerate", "range", "enumerate", "enumerate", "numpy.zeros", "range", "range", "dataset.Dataset.create_data_mobility.compute_joint_params"], "methods", ["None"], ["", "def", "create_data_mobility", "(", "self", ",", "f", ",", "n_max_parts", ",", "num_points", ",", "parts_map", "=", "[", "[", "0", ",", "3", ",", "4", "]", ",", "[", "1", ",", "2", "]", "]", ",", "instance", "=", "None", ",", "norm_corners", "=", "[", "None", "]", ",", "norm_factors", "=", "[", "None", "]", ",", "joints", "=", "None", ",", "nocs_type", "=", "'A'", ",", "line_space", "=", "'orth'", ",", "thres_r", "=", "0.2", ",", "add_noise", "=", "False", ",", "fixed_order", "=", "False", ",", "check_only", "=", "False", ",", "shuffle", "=", "True", ",", "is_testing", "=", "False", ",", "is_debug", "=", "False", ")", ":", "\n", "        ", "'''\n            f will be a h5py group-like object\n        '''", "\n", "# read", "\n", "n_parts", "=", "len", "(", "parts_map", ")", "# parts map to combine points", "\n", "parts_pts", "=", "[", "None", "]", "*", "n_parts", "\n", "parts_gts", "=", "[", "None", "]", "*", "n_parts", "\n", "parts_cls", "=", "[", "None", "]", "*", "n_parts", "\n", "parts_nocs", "=", "[", "None", "]", "*", "n_parts", "\n", "nocs_p", "=", "[", "None", "]", "*", "n_parts", "\n", "nocs_g", "=", "[", "None", "]", "*", "n_parts", "\n", "nocs_n", "=", "[", "None", "]", "*", "n_parts", "\n", "n_total_points", "=", "0", "\n", "parts_parent_joint", "=", "[", "None", "]", "*", "n_parts", "\n", "parts_child_joint", "=", "[", "None", "]", "*", "n_parts", "\n", "\n", "if", "n_parts", "==", "3", ":", "\n", "            ", "parts_offset_joint", "=", "[", "[", "]", ",", "[", "]", ",", "[", "]", "]", "# per part pts offsets to correponding parts", "\n", "parts_joints", "=", "[", "[", "]", ",", "[", "]", ",", "[", "]", "]", "# joint params list of the joints", "\n", "joint_index", "=", "[", "[", "]", ",", "[", "]", ",", "[", "]", "]", "# joint index recording the corresponding parts", "\n", "", "elif", "n_parts", "==", "4", ":", "\n", "            ", "parts_offset_joint", "=", "[", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "]", "# per part pts offsets to correponding parts", "\n", "parts_joints", "=", "[", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "]", "# joint params list of the joints", "\n", "joint_index", "=", "[", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "]", "# joint index recording the corresponding parts", "\n", "", "elif", "n_parts", "==", "5", ":", "\n", "            ", "parts_offset_joint", "=", "[", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "]", "# per part pts offsets to correponding parts", "\n", "parts_joints", "=", "[", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "]", "# joint params list of the joints", "\n", "joint_index", "=", "[", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "]", "# joint index recording the corresponding parts", "\n", "\n", "# fetch link & joint offsets from urdf_ins", "\n", "", "link_xyz", "=", "joints", "[", "'link'", "]", "[", "'xyz'", "]", "[", "1", ":", "]", "# we only need to consider link xyz, n_parts", "\n", "joint_rpy", "=", "joints", "[", "'joint'", "]", "[", "'rpy'", "]", "\n", "joint_xyz", "=", "joints", "[", "'joint'", "]", "[", "'xyz'", "]", "\n", "joint_axis", "=", "joints", "[", "'joint'", "]", "[", "'axis'", "]", "\n", "joint_parent", "=", "joints", "[", "'joint'", "]", "[", "'parent'", "]", "\n", "joint_type", "=", "joints", "[", "'joint'", "]", "[", "'type'", "]", "\n", "joint_child", "=", "joints", "[", "'joint'", "]", "[", "'child'", "]", "\n", "\n", "#", "\n", "joint_params", "=", "np", ".", "zeros", "(", "(", "n_parts", ",", "7", ")", ")", "\n", "if", "line_space", "==", "'plucker'", ":", "\n", "            ", "joint_params", "=", "np", ".", "zeros", "(", "(", "n_parts", ",", "6", ")", ")", "\n", "\n", "", "for", "idx", ",", "group", "in", "enumerate", "(", "parts_map", ")", ":", "\n", "            ", "P", "=", "f", "[", "'gt_points'", "]", "[", "str", "(", "group", "[", "0", "]", ")", "]", "[", "(", ")", "]", "[", ":", ",", ":", "3", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "group", ")", ")", ":", "\n", "                ", "P", "=", "np", ".", "concatenate", "(", "(", "P", ",", "f", "[", "'gt_points'", "]", "[", "str", "(", "group", "[", "i", "]", ")", "]", "[", "(", ")", "]", "[", ":", ",", ":", "3", "]", ")", ",", "axis", "=", "0", ")", "\n", "", "parts_pts", "[", "idx", "]", "=", "P", "# input pt cloud", "\n", "n_total_points", "+=", "P", ".", "shape", "[", "0", "]", "\n", "parts_cls", "[", "idx", "]", "=", "idx", "*", "np", ".", "ones", "(", "(", "P", ".", "shape", "[", "0", "]", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "Pc", "=", "f", "[", "'gt_coords'", "]", "[", "str", "(", "group", "[", "0", "]", ")", "]", "[", "(", ")", "]", "[", ":", ",", ":", "3", "]", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "group", ")", ")", ":", "\n", "                ", "Pc", "=", "np", ".", "concatenate", "(", "(", "Pc", ",", "f", "[", "'gt_coords'", "]", "[", "str", "(", "group", "[", "i", "]", ")", "]", "[", "(", ")", "]", "[", ":", ",", ":", "3", "]", ")", ",", "axis", "=", "0", ")", "\n", "", "parts_gts", "[", "idx", "]", "=", "Pc", "-", "np", ".", "array", "(", "link_xyz", "[", "idx", "]", "[", "0", "]", ")", ".", "reshape", "(", "1", ",", "3", ")", "# pts in canonical coords", "\n", "parts_parent_joint", "[", "idx", "]", "=", "group", "[", "0", "]", "# first element as child, assume link and its parent joint have same index", "\n", "parts_child_joint", "[", "idx", "]", "=", "[", "ind", "for", "ind", ",", "x", "in", "enumerate", "(", "joint_parent", ")", "if", "x", "-", "1", "==", "group", "[", "-", "1", "]", "]", "# in a group, we may use the last element to find joint that part serves as parent", "\n", "\n", "", "for", "j", "in", "range", "(", "n_parts", ")", ":", "\n", "# part NOCS compared to A-shape", "\n", "            ", "norm_factor", "=", "norm_factors", "[", "j", "+", "1", "]", "\n", "norm_corner", "=", "norm_corners", "[", "j", "+", "1", "]", "\n", "nocs_p", "[", "j", "]", "=", "(", "parts_gts", "[", "j", "]", "[", ":", ",", ":", "3", "]", "-", "norm_corner", "[", "0", "]", ")", "*", "norm_factor", "+", "np", ".", "array", "(", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", ".", "reshape", "(", "1", ",", "3", ")", "-", "0.5", "*", "(", "norm_corner", "[", "1", "]", "-", "norm_corner", "[", "0", "]", ")", "*", "norm_factor", "\n", "\n", "norm_factor", "=", "norm_factors", "[", "0", "]", "\n", "norm_corner", "=", "norm_corners", "[", "0", "]", "\n", "nocs_g", "[", "j", "]", "=", "(", "parts_gts", "[", "j", "]", "[", ":", ",", ":", "3", "]", "-", "norm_corner", "[", "0", "]", ")", "*", "norm_factor", "+", "np", ".", "array", "(", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", ".", "reshape", "(", "1", ",", "3", ")", "-", "0.5", "*", "(", "norm_corner", "[", "1", "]", "-", "norm_corner", "[", "0", "]", ")", "*", "norm_factor", "\n", "\n", "def", "compute_joint_params", "(", "j_position", ",", "j_axis", ",", "j_type", ",", "pts", ",", "norm_factor", ",", "norm_corner", ")", ":", "\n", "                ", "joint_P0", "=", "-", "np", ".", "array", "(", "j_position", ")", "\n", "joint_P0", "=", "(", "joint_P0", "-", "norm_corner", "[", "0", "]", ")", "*", "norm_factor", "+", "np", ".", "array", "(", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", ".", "reshape", "(", "1", ",", "3", ")", "-", "0.5", "*", "(", "norm_corner", "[", "1", "]", "-", "norm_corner", "[", "0", "]", ")", "*", "norm_factor", "\n", "if", "j_type", "==", "'fixed'", ":", "\n", "                    ", "joint_l", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "1", "]", ")", "\n", "orth_vect", "=", "np", ".", "ones_like", "(", "pts", ")", "*", "0.5", "*", "thres_r", "\n", "", "elif", "j_type", "==", "'prismatic'", ":", "\n", "                    ", "joint_l", "=", "np", ".", "array", "(", "j_axis", ")", "\n", "orth_vect", "=", "np", ".", "ones_like", "(", "pts", ")", "*", "0.5", "*", "thres_r", "\n", "", "else", ":", "\n", "                    ", "joint_l", "=", "np", ".", "array", "(", "j_axis", ")", "\n", "orth_vect", "=", "point_3d_offset_joint", "(", "[", "joint_P0", ",", "joint_l", "]", ",", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", "]", ")", ".", "reshape", "(", "1", ",", "3", ")", ")", "\n", "", "return", "orth_vect", ",", "joint_P0", ",", "joint_l", "\n", "\n", "# we use 0th xyz since we have multiple obj xyz", "\n", "", "orth_vect", ",", "joint_P0", ",", "joint_l", "=", "compute_joint_params", "(", "link_xyz", "[", "j", "]", "[", "0", "]", ",", "joint_axis", "[", "j", "]", ",", "joint_type", "[", "j", "]", ",", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", "]", ")", ".", "reshape", "(", "1", ",", "3", ")", ",", "norm_factor", ",", "norm_corner", ")", "\n", "joint_params", "[", "j", ",", "0", ":", "3", "]", "=", "joint_l", "\n", "joint_params", "[", "j", ",", "6", "]", "=", "np", ".", "linalg", ".", "norm", "(", "orth_vect", ")", "\n", "joint_params", "[", "j", ",", "3", ":", "6", "]", "=", "orth_vect", "/", "joint_params", "[", "j", ",", "6", "]", "\n", "\n", "idj", "=", "parts_parent_joint", "[", "j", "]", "\n", "offset_arr", ",", "joint_P0", ",", "joint_l", "=", "compute_joint_params", "(", "link_xyz", "[", "idj", "]", "[", "0", "]", ",", "joint_axis", "[", "idj", "]", ",", "joint_type", "[", "idj", "]", ",", "nocs_g", "[", "j", "]", ",", "norm_factor", ",", "norm_corner", ")", "\n", "parts_offset_joint", "[", "j", "]", ".", "append", "(", "offset_arr", ")", "\n", "parts_joints", "[", "j", "]", ".", "append", "(", "[", "joint_P0", ",", "joint_l", "]", ")", "\n", "joint_index", "[", "j", "]", ".", "append", "(", "idj", ")", "\n", "\n", "if", "parts_child_joint", "[", "j", "]", "!=", "[", "]", ":", "\n", "                ", "for", "m", "in", "parts_child_joint", "[", "j", "]", ":", "\n", "                    ", "offset_arr", ",", "joint_P0", ",", "joint_l", "=", "compute_joint_params", "(", "link_xyz", "[", "m", "]", "[", "0", "]", ",", "joint_axis", "[", "m", "]", ",", "joint_type", "[", "m", "]", ",", "nocs_g", "[", "j", "]", ",", "norm_factor", ",", "norm_corner", ")", "\n", "parts_offset_joint", "[", "j", "]", ".", "append", "(", "offset_arr", ")", "\n", "parts_joints", "[", "j", "]", ".", "append", "(", "[", "joint_P0", ",", "joint_l", "]", ")", "\n", "joint_index", "[", "j", "]", ".", "append", "(", "m", ")", "\n", "\n", "# sampling & fusion", "\n", "", "", "", "offset_mask", "=", "[", "None", "]", "*", "n_parts", "\n", "offset_heatmap", "=", "[", "None", "]", "*", "n_parts", "\n", "offset_unitvec", "=", "[", "None", "]", "*", "n_parts", "\n", "joint_orient", "=", "[", "None", "]", "*", "n_parts", "\n", "joint_cls", "=", "[", "None", "]", "*", "n_parts", "\n", "\n", "for", "j", ",", "offsets", "in", "enumerate", "(", "parts_offset_joint", ")", ":", "\n", "            ", "offset_mask", "[", "j", "]", "=", "np", ".", "zeros", "(", "(", "parts_gts", "[", "j", "]", ".", "shape", "[", "0", "]", ")", ")", "\n", "offset_heatmap", "[", "j", "]", "=", "np", ".", "zeros", "(", "(", "parts_gts", "[", "j", "]", ".", "shape", "[", "0", "]", ")", ")", "\n", "offset_unitvec", "[", "j", "]", "=", "np", ".", "zeros", "(", "(", "parts_gts", "[", "j", "]", ".", "shape", "[", "0", "]", ",", "3", ")", ")", "\n", "joint_orient", "[", "j", "]", "=", "np", ".", "zeros", "(", "(", "parts_gts", "[", "j", "]", ".", "shape", "[", "0", "]", ",", "3", ")", ")", "\n", "joint_cls", "[", "j", "]", "=", "np", ".", "ones", "(", "(", "parts_gts", "[", "j", "]", ".", "shape", "[", "0", "]", ")", ")", "*", "n_parts", "\n", "\n", "for", "k", ",", "offset", "in", "enumerate", "(", "offsets", ")", ":", "\n", "                ", "id_j", "=", "joint_index", "[", "j", "]", "[", "k", "]", "\n", "heatmap", "=", "np", ".", "linalg", ".", "norm", "(", "offset", ",", "axis", "=", "1", ")", "\n", "unitvec", "=", "offset", "/", "(", "heatmap", ".", "reshape", "(", "-", "1", ",", "1", ")", "+", "epsilon", ")", "\n", "if", "joint_type", "[", "id_j", "]", "==", "'prismatic'", ":", "\n", "                    ", "idc", "=", "np", ".", "where", "(", "heatmap", ">", "0", ")", "[", "0", "]", "\n", "", "elif", "joint_type", "[", "id_j", "]", "==", "'fixed'", ":", "\n", "                    ", "continue", "\n", "", "else", ":", "\n", "                    ", "idc", "=", "np", ".", "where", "(", "heatmap", "<=", "thres_r", ")", "[", "0", "]", "\n", "", "offset_heatmap", "[", "j", "]", "[", "idc", "]", "=", "1", "-", "heatmap", "[", "idc", "]", "/", "thres_r", "\n", "offset_unitvec", "[", "j", "]", "[", "idc", ",", ":", "]", "=", "unitvec", "[", "idc", ",", ":", "]", "\n", "joint_orient", "[", "j", "]", "[", "idc", ",", ":", "]", "=", "parts_joints", "[", "j", "]", "[", "k", "]", "[", "1", "]", "\n", "joint_cls", "[", "j", "]", "[", "idc", "]", "=", "joint_index", "[", "j", "]", "[", "k", "]", "#", "\n", "\n", "", "", "if", "nocs_type", "==", "'C'", ":", "\n", "            ", "if", "is_debug", ":", "\n", "                ", "plot_arrows_list", "(", "nocs_g", ",", "parts_offset_joint", ",", "parts_joints", ",", "title_name", "=", "'joint offset'", ")", "\n", "plot_arrows_list_threshold", "(", "nocs_g", ",", "parts_offset_joint", ",", "parts_joints", ",", "title_name", "=", "'joint offset'", ")", "\n", "# start to exchange the labels", "\n", "# [0, 1, 2, 3] to [3, 0, 1, 2]", "\n", "", "", "target_order", "=", "self", ".", "ctgy_spec", ".", "spec_map", "[", "instance", "]", "\n", "\n", "for", "j", ",", "idx", "in", "enumerate", "(", "target_order", ")", ":", "\n", "            ", "parts_cls", "[", "idx", "]", "=", "np", ".", "ones_like", "(", "parts_cls", "[", "idx", "]", ")", "*", "j", "\n", "joint_cls", "[", "idx", "]", "=", "np", ".", "ones_like", "(", "joint_cls", "[", "idx", "]", ")", "*", "j", "\n", "\n", "", "return", "nocs_p", ",", "nocs_g", ",", "nocs_n", ",", "parts_cls", ",", "parts_pts", ",", "offset_heatmap", ",", "offset_unitvec", ",", "joint_orient", ",", "joint_cls", ",", "joint_params", ",", "n_total_points", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.prediction_io.PredictionLoader.__init__": [[11, 19], ["os.listdir", "enumerate", "os.path.join", "os.path.splitext", "os.path.splitext", "os.path.basename", "os.path.basename"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "n_max_instances", ",", "pred_dir", ")", ":", "\n", "        ", "self", ".", "n_max_instances", "=", "n_max_instances", "\n", "self", ".", "basename_to_hdf5_file", "=", "{", "}", "\n", "hdf5_file_list", "=", "os", ".", "listdir", "(", "pred_dir", ")", "\n", "basename_list", "=", "[", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "p", ")", ")", "[", "0", "]", "for", "p", "in", "hdf5_file_list", "]", "\n", "for", "idx", ",", "h5_file", "in", "enumerate", "(", "hdf5_file_list", ")", ":", "\n", "            ", "basename", "=", "os", ".", "path", ".", "splitext", "(", "os", ".", "path", ".", "basename", "(", "h5_file", ")", ")", "[", "0", "]", "\n", "self", ".", "basename_to_hdf5_file", "[", "basename", "]", "=", "os", ".", "path", ".", "join", "(", "pred_dir", ",", "h5_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.prediction_io.PredictionLoader.load_multiple": [[20, 64], ["len", "enumerate", "result.keys", "h5py.File", "result[].append", "result[].append", "method_name_list.append", "pickle.loads", "result[].append", "str", "fitter_factory.primitive_name_to_id", "numpy.array", "[].append", "numpy.stack", "result[].keys", "numpy.stack", "len", "numpy.pad", "len", "numpy.pad"], "methods", ["None"], ["", "", "def", "load_multiple", "(", "self", ",", "basename_list", ")", ":", "\n", "        ", "batch_size", "=", "len", "(", "basename_list", ")", "\n", "method_name_list", "=", "[", "]", "\n", "result", "=", "{", "\n", "'normal_per_point'", ":", "[", "]", ",", "\n", "'instance_per_point'", ":", "[", "]", ",", "\n", "'type_per_point'", ":", "[", "]", ",", "\n", "'parameters'", ":", "{", "}", ",", "\n", "}", "\n", "\n", "for", "idx", ",", "basename", "in", "enumerate", "(", "basename_list", ")", ":", "\n", "            ", "hdf5_file", "=", "self", ".", "basename_to_hdf5_file", "[", "basename", "]", "\n", "f", "=", "h5py", ".", "File", "(", "hdf5_file", ",", "'r'", ")", "\n", "result", "[", "'normal_per_point'", "]", ".", "append", "(", "f", "[", "'normal_per_point'", "]", "[", "(", ")", "]", ")", "\n", "result", "[", "'instance_per_point'", "]", ".", "append", "(", "f", "[", "'instance_per_point'", "]", "[", "(", ")", "]", ")", "\n", "method_name_list", ".", "append", "(", "str", "(", "f", ".", "attrs", "[", "'method_name'", "]", ")", ")", "\n", "primitive_name_to_id_dict", "=", "pickle", ".", "loads", "(", "f", ".", "attrs", "[", "'name_to_id_dict'", "]", ")", "\n", "primitive_id_to_ephemeral_id_dict", "=", "{", "primitive_name_to_id_dict", "[", "key", "]", ":", "fitter_factory", ".", "primitive_name_to_id", "(", "key", ")", "for", "key", "in", "primitive_name_to_id_dict", "}", "\n", "result", "[", "'type_per_point'", "]", ".", "append", "(", "np", ".", "array", "(", "[", "primitive_id_to_ephemeral_id_dict", "[", "x", "]", "for", "x", "in", "f", "[", "'type_per_point'", "]", "]", ")", ")", "\n", "\n", "for", "key", "in", "f", "[", "'parameters'", "]", ":", "\n", "                ", "if", "key", "not", "in", "result", "[", "'parameters'", "]", ":", "\n", "                    ", "result", "[", "'parameters'", "]", "[", "key", "]", "=", "[", "]", "\n", "", "params", "=", "f", "[", "'parameters'", "]", "[", "key", "]", "[", "(", ")", "]", "\n", "# add paddings", "\n", "if", "params", ".", "shape", "[", "0", "]", "<", "self", ".", "n_max_instances", ":", "\n", "                    ", "diff", "=", "self", ".", "n_max_instances", "-", "params", ".", "shape", "[", "0", "]", "\n", "if", "len", "(", "params", ".", "shape", ")", "==", "1", ":", "\n", "                        ", "params", "=", "np", ".", "pad", "(", "params", ",", "pad_width", "=", "(", "(", "0", ",", "diff", ")", ")", ",", "mode", "=", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "", "elif", "len", "(", "params", ".", "shape", ")", "==", "2", ":", "\n", "                        ", "params", "=", "np", ".", "pad", "(", "params", ",", "pad_width", "=", "(", "(", "0", ",", "diff", ")", ",", "(", "0", ",", "0", ")", ")", ",", "mode", "=", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "", "else", ":", "\n", "                        ", "assert", "False", "\n", "", "", "result", "[", "'parameters'", "]", "[", "key", "]", ".", "append", "(", "params", ")", "\n", "\n", "", "", "packed", "=", "{", "}", "\n", "for", "key", "in", "result", ".", "keys", "(", ")", ":", "\n", "            ", "if", "key", "!=", "'parameters'", ":", "\n", "                ", "packed", "[", "key", "]", "=", "np", ".", "stack", "(", "result", "[", "key", "]", ",", "axis", "=", "0", ")", "\n", "", "else", ":", "\n", "                ", "packed", "[", "'parameters'", "]", "=", "{", "}", "\n", "for", "key2", "in", "result", "[", "'parameters'", "]", ".", "keys", "(", ")", ":", "\n", "                    ", "packed", "[", "'parameters'", "]", "[", "key2", "]", "=", "np", ".", "stack", "(", "result", "[", "'parameters'", "]", "[", "key2", "]", ",", "axis", "=", "0", ")", "\n", "", "", "", "return", "packed", ",", "method_name_list", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.prediction_io.save_batch_nn": [[65, 96], ["range", "len", "len", "numpy.argmax", "h5py.File", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "os.path.join", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset"], "function", ["None"], ["", "", "def", "save_batch_nn", "(", "nn_name", ",", "pred_result", ",", "input_batch", ",", "basename_list", ",", "save_dir", ",", "sample_index", "=", "None", ",", "is_mixed", "=", "False", ",", "W_reduced", "=", "True", ",", "two_stages", "=", "False", ")", ":", "\n", "    ", "batch_size", "=", "pred_result", "[", "'W'", "]", ".", "shape", "[", "0", "]", "\n", "assert", "batch_size", "==", "len", "(", "basename_list", ")", ",", "'Oh no, batch size is {}, while len of basename_list is{}'", ".", "format", "(", "batch_size", ",", "len", "(", "basename_list", ")", ")", "\n", "confidence_per_point", "=", "pred_result", "[", "'confi_per_point'", "]", "\n", "instance_per_point", "=", "pred_result", "[", "'W'", "]", "# BxNxK", "\n", "if", "W_reduced", ":", "\n", "        ", "instance_per_point", "=", "np", ".", "argmax", "(", "instance_per_point", ",", "axis", "=", "2", ")", "# BxN", "\n", "", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "f", "=", "h5py", ".", "File", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "basename_list", "[", "b", "]", "+", "'.h5'", ")", ",", "'w'", ")", "\n", "f", ".", "attrs", "[", "'method_name'", "]", "=", "nn_name", "\n", "f", ".", "attrs", "[", "'basename'", "]", "=", "basename_list", "[", "b", "]", "\n", "f", ".", "create_dataset", "(", "'confidence_per_point'", ",", "data", "=", "confidence_per_point", "[", "b", "]", ")", "\n", "f", ".", "create_dataset", "(", "'P'", ",", "data", "=", "input_batch", "[", "'P'", "]", "[", "b", "]", ")", "\n", "f", ".", "create_dataset", "(", "'cls_gt'", ",", "data", "=", "input_batch", "[", "'cls_gt'", "]", "[", "b", "]", ")", "\n", "f", ".", "create_dataset", "(", "'nocs_gt'", ",", "data", "=", "input_batch", "[", "'nocs_gt'", "]", "[", "b", "]", ")", "\n", "f", ".", "create_dataset", "(", "'nocs_per_point'", ",", "data", "=", "pred_result", "[", "'nocs_per_point'", "]", "[", "b", "]", ")", "\n", "f", ".", "create_dataset", "(", "'instance_per_point'", ",", "data", "=", "instance_per_point", "[", "b", "]", ")", "\n", "if", "is_mixed", ":", "\n", "            ", "f", ".", "create_dataset", "(", "'gocs_per_point'", ",", "data", "=", "pred_result", "[", "'gocs_per_point'", "]", "[", "b", "]", ")", "\n", "", "f", ".", "create_dataset", "(", "'nocs_gt_g'", ",", "data", "=", "input_batch", "[", "'nocs_gt_g'", "]", "[", "b", "]", ")", "\n", "f", ".", "create_dataset", "(", "'heatmap_per_point'", ",", "data", "=", "pred_result", "[", "'heatmap_per_point'", "]", "[", "b", "]", ")", "\n", "f", ".", "create_dataset", "(", "'heatmap_gt'", ",", "data", "=", "input_batch", "[", "'heatmap_gt'", "]", "[", "b", "]", ")", "\n", "f", ".", "create_dataset", "(", "'unitvec_gt'", ",", "data", "=", "input_batch", "[", "'unitvec_gt'", "]", "[", "b", "]", ")", "\n", "f", ".", "create_dataset", "(", "'unitvec_per_point'", ",", "data", "=", "pred_result", "[", "'unitvec_per_point'", "]", "[", "b", "]", ")", "\n", "f", ".", "create_dataset", "(", "'joint_axis_per_point'", ",", "data", "=", "pred_result", "[", "'joint_axis_per_point'", "]", "[", "b", "]", ")", "\n", "f", ".", "create_dataset", "(", "'joint_axis_gt'", ",", "data", "=", "input_batch", "[", "'orient_gt'", "]", "[", "b", "]", ")", "\n", "f", ".", "create_dataset", "(", "'index_per_point'", ",", "data", "=", "pred_result", "[", "'index_per_point'", "]", "[", "b", "]", ")", "\n", "f", ".", "create_dataset", "(", "'joint_cls_gt'", ",", "data", "=", "input_batch", "[", "'joint_cls_gt'", "]", "[", "b", "]", ")", "\n", "if", "two_stages", ":", "\n", "            ", "f", ".", "create_dataset", "(", "'joint_params_pred'", ",", "data", "=", "pred_result", "[", "'joint_params_pred'", "]", "[", "b", "]", ")", "\n", "f", ".", "create_dataset", "(", "'joint_params_gt'", ",", "data", "=", "input_batch", "[", "'joint_params_gt'", "]", "[", "b", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.prediction_io.save_batch_nn_real": [[97, 130], ["range", "len", "len", "numpy.argmax", "h5py.File", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "os.path.join", "h5py.File.create_dataset", "h5py.File.create_dataset"], "function", ["None"], ["", "", "", "def", "save_batch_nn_real", "(", "nn_name", ",", "pred_result", ",", "input_batch", ",", "basename_list", ",", "save_dir", ",", "sample_index", "=", "None", ",", "is_mixed", "=", "False", ",", "W_reduced", "=", "True", ",", "two_stages", "=", "False", ",", "verbose", "=", "True", ")", ":", "\n", "    ", "batch_size", "=", "pred_result", "[", "'W'", "]", ".", "shape", "[", "0", "]", "\n", "assert", "batch_size", "==", "len", "(", "basename_list", ")", ",", "'Oh no, batch size is {}, while len of basename_list is{}'", ".", "format", "(", "batch_size", ",", "len", "(", "basename_list", ")", ")", "\n", "confidence_per_point", "=", "pred_result", "[", "'confi_per_point'", "]", "\n", "instance_per_point", "=", "pred_result", "[", "'W'", "]", "# BxNxK", "\n", "if", "W_reduced", ":", "\n", "        ", "instance_per_point", "=", "np", ".", "argmax", "(", "instance_per_point", ",", "axis", "=", "2", ")", "# BxN", "\n", "", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "        ", "f", "=", "h5py", ".", "File", "(", "os", ".", "path", ".", "join", "(", "save_dir", ",", "basename_list", "[", "b", "]", "+", "'.h5'", ")", ",", "'w'", ")", "\n", "f", ".", "attrs", "[", "'method_name'", "]", "=", "nn_name", "\n", "f", ".", "attrs", "[", "'basename'", "]", "=", "basename_list", "[", "b", "]", "\n", "f", ".", "create_dataset", "(", "'confidence_per_point'", ",", "data", "=", "confidence_per_point", "[", "b", "]", ")", "\n", "f", ".", "create_dataset", "(", "'P'", ",", "data", "=", "input_batch", "[", "'P'", "]", "[", "b", "]", ")", "\n", "f", ".", "create_dataset", "(", "'cls_gt'", ",", "data", "=", "input_batch", "[", "'cls_gt'", "]", "[", "b", "]", ")", "\n", "f", ".", "create_dataset", "(", "'nocs_gt'", ",", "data", "=", "input_batch", "[", "'nocs_gt'", "]", "[", "b", "]", ")", "\n", "f", ".", "create_dataset", "(", "'nocs_per_point'", ",", "data", "=", "pred_result", "[", "'nocs_per_point'", "]", "[", "b", "]", ")", "\n", "f", ".", "create_dataset", "(", "'instance_per_point'", ",", "data", "=", "instance_per_point", "[", "b", "]", ")", "\n", "if", "is_mixed", ":", "\n", "            ", "f", ".", "create_dataset", "(", "'gocs_per_point'", ",", "data", "=", "pred_result", "[", "'gocs_per_point'", "]", "[", "b", "]", ")", "\n", "f", ".", "create_dataset", "(", "'nocs_gt_g'", ",", "data", "=", "input_batch", "[", "'nocs_gt_g'", "]", "[", "b", "]", ")", "\n", "# if verbose:", "\n", "#     print('saving sample index, ', pred_result['sample_index'][b].shape)", "\n", "", "f", ".", "create_dataset", "(", "'sample_index'", ",", "data", "=", "pred_result", "[", "'sample_index'", "]", "[", "b", "]", ")", "# [B, N=512]", "\n", "f", ".", "create_dataset", "(", "'P_center'", ",", "data", "=", "input_batch", "[", "'P_center'", "]", "[", "b", "]", ")", "\n", "f", ".", "create_dataset", "(", "'P_scale'", ",", "data", "=", "input_batch", "[", "'P_scale'", "]", "[", "b", "]", ")", "\n", "f", ".", "create_dataset", "(", "'heatmap_per_point'", ",", "data", "=", "pred_result", "[", "'heatmap_per_point'", "]", "[", "b", "]", ")", "\n", "f", ".", "create_dataset", "(", "'heatmap_gt'", ",", "data", "=", "input_batch", "[", "'heatmap_gt'", "]", "[", "b", "]", ")", "\n", "f", ".", "create_dataset", "(", "'unitvec_gt'", ",", "data", "=", "input_batch", "[", "'unitvec_gt'", "]", "[", "b", "]", ")", "\n", "f", ".", "create_dataset", "(", "'unitvec_per_point'", ",", "data", "=", "pred_result", "[", "'unitvec_per_point'", "]", "[", "b", "]", ")", "\n", "f", ".", "create_dataset", "(", "'joint_axis_per_point'", ",", "data", "=", "pred_result", "[", "'joint_axis_per_point'", "]", "[", "b", "]", ")", "\n", "f", ".", "create_dataset", "(", "'joint_axis_gt'", ",", "data", "=", "input_batch", "[", "'orient_gt'", "]", "[", "b", "]", ")", "\n", "f", ".", "create_dataset", "(", "'index_per_point'", ",", "data", "=", "pred_result", "[", "'index_per_point'", "]", "[", "b", "]", ")", "\n", "f", ".", "create_dataset", "(", "'joint_cls_gt'", ",", "data", "=", "input_batch", "[", "'joint_cls_gt'", "]", "[", "b", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.prediction_io.save_single_nn": [[131, 146], ["numpy.argmax", "h5py.File", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_group", "numpy.argmax", "f.create_group.create_dataset"], "function", ["None"], ["", "", "def", "save_single_nn", "(", "nn_name", ",", "pred_result", ",", "pred_h5_file", ",", "W_reduced", "=", "True", ")", ":", "\n", "    ", "batch_size", "=", "pred_result", "[", "'W'", "]", ".", "shape", "[", "0", "]", "\n", "assert", "batch_size", "==", "1", "\n", "type_per_point", "=", "np", ".", "argmax", "(", "pred_result", "[", "'type_per_point'", "]", ",", "axis", "=", "2", ")", "# BxN", "\n", "instance_per_point", "=", "pred_result", "[", "'W'", "]", "# BxNxK", "\n", "if", "W_reduced", ":", "\n", "        ", "instance_per_point", "=", "np", ".", "argmax", "(", "instance_per_point", ",", "axis", "=", "2", ")", "# BxN", "\n", "", "f", "=", "h5py", ".", "File", "(", "pred_h5_file", ",", "'w'", ")", "\n", "f", ".", "attrs", "[", "'method_name'", "]", "=", "nn_name", "\n", "f", ".", "create_dataset", "(", "'normal_per_point'", ",", "data", "=", "pred_result", "[", "'normal_per_point'", "]", "[", "0", "]", ")", "\n", "f", ".", "create_dataset", "(", "'type_per_point'", ",", "data", "=", "type_per_point", "[", "0", "]", ")", "\n", "f", ".", "create_dataset", "(", "'instance_per_point'", ",", "data", "=", "instance_per_point", "[", "0", "]", ")", "\n", "g", "=", "f", ".", "create_group", "(", "'parameters'", ")", "\n", "for", "key", "in", "pred_result", "[", "'parameters'", "]", ":", "\n", "        ", "g", ".", "create_dataset", "(", "key", ",", "data", "=", "pred_result", "[", "'parameters'", "]", "[", "key", "]", "[", "0", "]", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.loss.hungarian_matching": [[14, 22], ["numpy.zeros", "range", "scipy.optimize.linear_sum_assignment"], "function", ["None"], ["def", "hungarian_matching", "(", "cost", ",", "n_instance_gt", ")", ":", "\n", "# cost is BxNxM", "\n", "    ", "B", ",", "N", ",", "M", "=", "cost", ".", "shape", "\n", "matching_indices", "=", "np", ".", "zeros", "(", "[", "B", ",", "N", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "b", "in", "range", "(", "B", ")", ":", "\n", "# limit to first n_instance_gt[b]", "\n", "        ", "_", ",", "matching_indices", "[", "b", ",", ":", "n_instance_gt", "[", "b", "]", "]", "=", "linear_sum_assignment", "(", "cost", "[", "b", ",", ":", "n_instance_gt", "[", "b", "]", ",", ":", "]", ")", "\n", "", "return", "matching_indices", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.loss.aggregate_loss_from_stacked": [[23, 32], ["tensorflow.tile", "tensorflow.tile", "tensorflow.stack", "tensorflow.gather_nd", "tensorflow.shape", "tensorflow.shape", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.range", "tensorflow.range"], "function", ["None"], ["", "def", "aggregate_loss_from_stacked", "(", "loss_stacked", ",", "T_gt", ")", ":", "\n", "# loss_stacked - BxKxT, T_gt - BxK", "\n", "# out[b, k] = loss_stacked[b, k, T_gt[b, k]]", "\n", "    ", "B", "=", "tf", ".", "shape", "(", "loss_stacked", ")", "[", "0", "]", "\n", "K", "=", "tf", ".", "shape", "(", "loss_stacked", ")", "[", "1", "]", "\n", "indices_0", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "tf", ".", "range", "(", "B", ")", ",", "axis", "=", "1", ")", ",", "multiples", "=", "[", "1", ",", "K", "]", ")", "# BxK", "\n", "indices_1", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "tf", ".", "range", "(", "K", ")", ",", "axis", "=", "0", ")", ",", "multiples", "=", "[", "B", ",", "1", "]", ")", "# BxK", "\n", "indices", "=", "tf", ".", "stack", "(", "[", "indices_0", ",", "indices_1", ",", "T_gt", "]", ",", "axis", "=", "2", ")", "# BxKx3", "\n", "return", "tf", ".", "gather_nd", "(", "loss_stacked", ",", "indices", "=", "indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.loss.aggregate_per_point_loss_from_stacked": [[33, 46], ["tensorflow.tile", "tensorflow.tile", "tensorflow.tile", "tensorflow.tile", "tensorflow.stack", "tensorflow.gather_nd", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.expand_dims", "tensorflow.range", "tensorflow.range", "tensorflow.range"], "function", ["None"], ["", "def", "aggregate_per_point_loss_from_stacked", "(", "loss_stacked", ",", "T_gt", ")", ":", "\n", "# loss_stacked - BxKxN'xT, T_gt - BxK", "\n", "# out[b, k, n'] = loss_stacked[b, k, n', T_gt[b, k]]", "\n", "    ", "B", "=", "tf", ".", "shape", "(", "loss_stacked", ")", "[", "0", "]", "\n", "K", "=", "tf", ".", "shape", "(", "loss_stacked", ")", "[", "1", "]", "\n", "N_p", "=", "tf", ".", "shape", "(", "loss_stacked", ")", "[", "2", "]", "\n", "\n", "indices_0", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "tf", ".", "range", "(", "B", ")", ",", "axis", "=", "1", ")", ",", "axis", "=", "2", ")", ",", "multiples", "=", "[", "1", ",", "K", ",", "N_p", "]", ")", "# BxKxN'", "\n", "indices_1", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "tf", ".", "range", "(", "K", ")", ",", "axis", "=", "0", ")", ",", "axis", "=", "2", ")", ",", "multiples", "=", "[", "B", ",", "1", ",", "N_p", "]", ")", "# BxKxN'", "\n", "indices_2", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "tf", ".", "expand_dims", "(", "tf", ".", "range", "(", "N_p", ")", ",", "axis", "=", "0", ")", ",", "axis", "=", "0", ")", ",", "multiples", "=", "[", "B", ",", "K", ",", "1", "]", ")", "# BxKxN'", "\n", "indices_3", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "T_gt", ",", "axis", "=", "2", ")", ",", "multiples", "=", "[", "1", ",", "1", ",", "N_p", "]", ")", "# BxKxN'", "\n", "indices", "=", "tf", ".", "stack", "(", "[", "indices_0", ",", "indices_1", ",", "indices_2", ",", "indices_3", "]", ",", "axis", "=", "3", ")", "\n", "return", "tf", ".", "gather_nd", "(", "loss_stacked", ",", "indices", "=", "indices", ")", "# BxKxN'", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.loss.reduce_mean_masked_part": [[47, 53], ["tensorflow.where", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.where", "tensorflow.zeros_like", "tensorflow.to_float", "tensorflow.zeros_like"], "function", ["None"], ["", "def", "reduce_mean_masked_part", "(", "loss", ",", "mask_gt", ")", ":", "\n", "# loss: BxK", "\n", "    ", "loss", "=", "tf", ".", "where", "(", "mask_gt", ",", "loss", ",", "tf", ".", "zeros_like", "(", "loss", ")", ")", "\n", "reduced_loss", "=", "tf", ".", "reduce_sum", "(", "loss", ",", "axis", "=", "1", ")", "# B", "\n", "denom", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "to_float", "(", "mask_gt", ")", ",", "axis", "=", "1", ")", "# B", "\n", "return", "tf", ".", "where", "(", "denom", ">", "0", ",", "reduced_loss", "/", "denom", ",", "tf", ".", "zeros_like", "(", "reduced_loss", ")", ")", "# B", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.loss.compute_nocs_loss": [[54, 103], ["tensorflow.split", "tensorflow.split", "range", "tensorflow.norm", "tensorflow.reduce_sum", "tensorflow.norm", "tensorflow.reduce_sum", "tensorflow.abs", "tensorflow.abs", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.log", "loss.smooth_l1_diff", "loss.smooth_l1_diff", "tensorflow.log", "loss.smooth_l1_diff", "loss.smooth_l1_diff", "tensorflow.log", "tensorflow.log"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.loss.smooth_l1_diff", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.loss.smooth_l1_diff", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.loss.smooth_l1_diff", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.loss.smooth_l1_diff"], ["", "def", "compute_nocs_loss", "(", "nocs", ",", "nocs_gt", ",", "confidence", ",", "num_parts", "=", "2", ",", "mask_array", "=", "None", ",", "TYPE_L", "=", "'L2'", ",", "MULTI_HEAD", "=", "False", ",", "SELF_SU", "=", "False", ")", ":", "\n", "# nocs, nocs_gt: BxNx3", "\n", "# Assume nocss are unoriented * L1", "\n", "    ", "if", "MULTI_HEAD", ":", "\n", "        ", "loss_nocs", "=", "0", "\n", "nocs_splits", "=", "tf", ".", "split", "(", "nocs", ",", "num_or_size_splits", "=", "num_parts", ",", "axis", "=", "2", ")", "\n", "mask_splits", "=", "tf", ".", "split", "(", "mask_array", ",", "num_or_size_splits", "=", "num_parts", ",", "axis", "=", "2", ")", "\n", "for", "i", "in", "range", "(", "num_parts", ")", ":", "\n", "            ", "diff_l2", "=", "tf", ".", "norm", "(", "nocs_splits", "[", "i", "]", "-", "nocs_gt", ",", "axis", "=", "2", ")", "# BxN", "\n", "diff_abs", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "abs", "(", "nocs_splits", "[", "i", "]", "-", "nocs_gt", ")", ",", "axis", "=", "2", ")", "\n", "if", "not", "SELF_SU", ":", "\n", "                ", "if", "TYPE_L", "==", "'Soft_L1'", ":", "\n", "                    ", "loss_nocs", "+=", "tf", ".", "reduce_mean", "(", "mask_splits", "[", "i", "]", "[", ":", ",", ":", ",", "0", "]", "*", "smooth_l1_diff", "(", "diff_l2", ")", ",", "axis", "=", "1", ")", "\n", "", "elif", "TYPE_L", "==", "'L2'", ":", "\n", "                    ", "loss_nocs", "+=", "tf", ".", "reduce_mean", "(", "mask_splits", "[", "i", "]", "[", ":", ",", ":", ",", "0", "]", "*", "diff_l2", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "                    ", "loss_nocs", "+=", "tf", ".", "reduce_mean", "(", "mask_splits", "[", "i", "]", "[", ":", ",", ":", ",", "0", "]", "*", "diff_abs", ",", "axis", "=", "1", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "TYPE_L", "==", "'Soft_L1'", ":", "\n", "                    ", "loss_nocs", "+=", "tf", ".", "reduce_mean", "(", "mask_splits", "[", "i", "]", "[", ":", ",", ":", ",", "0", "]", "*", "smooth_l1_diff", "(", "diff_l2", ")", "*", "confidence", "[", ":", ",", ":", ",", "0", "]", ",", "axis", "=", "1", ")", "# B", "\n", "", "elif", "TYPE_L", "==", "'L2'", ":", "\n", "                    ", "loss_nocs", "+=", "tf", ".", "reduce_mean", "(", "mask_splits", "[", "i", "]", "[", ":", ",", ":", ",", "0", "]", "*", "diff_l2", "*", "confidence", "[", ":", ",", ":", ",", "0", "]", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "                    ", "loss_nocs", "+=", "tf", ".", "reduce_mean", "(", "mask_splits", "[", "i", "]", "[", ":", ",", ":", ",", "0", "]", "*", "diff_abs", "*", "confidence", "[", ":", ",", ":", ",", "0", "]", ",", "axis", "=", "1", ")", "\n", "\n", "", "", "if", "SELF_SU", ":", "\n", "                ", "loss_nocs", "+=", "-", "0.1", "*", "tf", ".", "reduce_mean", "(", "tf", ".", "log", "(", "confidence", "[", ":", ",", ":", ",", "0", "]", ")", ",", "axis", "=", "1", ")", "\n", "", "", "return", "loss_nocs", "\n", "\n", "", "else", ":", "\n", "        ", "diff_l2", "=", "tf", ".", "norm", "(", "nocs", "-", "nocs_gt", ",", "axis", "=", "2", ")", "# BxN", "\n", "diff_abs", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "abs", "(", "nocs", "-", "nocs_gt", ")", ",", "axis", "=", "2", ")", "# BxN", "\n", "if", "not", "SELF_SU", ":", "\n", "            ", "if", "TYPE_L", "==", "'L2'", ":", "\n", "                ", "return", "tf", ".", "reduce_mean", "(", "diff_l2", ",", "axis", "=", "1", ")", "# B", "\n", "", "elif", "TYPE_L", "==", "'Soft_L1'", ":", "\n", "                ", "return", "tf", ".", "reduce_mean", "(", "smooth_l1_diff", "(", "diff_l2", ")", ",", "axis", "=", "1", ")", "# B", "\n", "", "else", ":", "\n", "                ", "return", "tf", ".", "reduce_mean", "(", "diff_abs", ",", "axis", "=", "1", ")", "# B", "\n", "", "", "else", ":", "\n", "            ", "if", "TYPE_L", "==", "'L2'", ":", "\n", "                ", "return", "tf", ".", "reduce_mean", "(", "diff_l2", "*", "confidence", "[", ":", ",", ":", ",", "0", "]", "-", "0.1", "*", "tf", ".", "log", "(", "confidence", "[", ":", ",", ":", ",", "0", "]", ")", ",", "axis", "=", "1", ")", "# B", "\n", "", "elif", "TYPE_L", "==", "'Soft_L1'", ":", "\n", "                ", "return", "tf", ".", "reduce_mean", "(", "confidence", "[", ":", ",", ":", ",", "0", "]", "*", "smooth_l1_diff", "(", "diff_l2", ")", "-", "0.1", "*", "tf", ".", "log", "(", "confidence", "[", ":", ",", ":", ",", "0", "]", ")", ",", "axis", "=", "1", ")", "# B", "\n", "", "else", ":", "\n", "                ", "return", "tf", ".", "reduce_mean", "(", "confidence", "[", ":", ",", ":", ",", "0", "]", "*", "diff_abs", "-", "0.1", "*", "tf", ".", "log", "(", "confidence", "[", ":", ",", ":", ",", "0", "]", ")", ",", "axis", "=", "1", ")", "# B", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.loss.compute_vect_loss": [[104, 167], ["tensorflow.split", "tensorflow.split", "range", "tensorflow.norm", "tensorflow.reduce_sum", "tensorflow.squeeze", "tensorflow.abs", "tensorflow.norm", "tensorflow.reduce_sum", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.abs", "tensorflow.abs", "tensorflow.abs", "tensorflow.abs", "tensorflow.norm", "tensorflow.reduce_sum", "tensorflow.abs", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "tensorflow.log", "tensorflow.abs", "loss.smooth_l1_diff", "loss.smooth_l1_diff", "tensorflow.log", "loss.smooth_l1_diff", "loss.smooth_l1_diff", "tensorflow.log", "tensorflow.log"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.loss.smooth_l1_diff", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.loss.smooth_l1_diff", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.loss.smooth_l1_diff", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.loss.smooth_l1_diff"], ["", "", "", "", "def", "compute_vect_loss", "(", "vect", ",", "vect_gt", ",", "confidence", "=", "None", ",", "num_parts", "=", "2", ",", "mask_array", "=", "None", ",", "TYPE_L", "=", "'L2'", ",", "MULTI_HEAD", "=", "False", ",", "SELF_SU", "=", "False", ")", ":", "\n", "# nocs, nocs_gt: BxNx3", "\n", "# Assume nocss are unoriented * L1", "\n", "    ", "if", "MULTI_HEAD", ":", "\n", "        ", "loss_vect", "=", "0", "\n", "vect_splits", "=", "tf", ".", "split", "(", "vect", ",", "num_or_size_splits", "=", "num_parts", ",", "axis", "=", "2", ")", "\n", "mask_splits", "=", "tf", ".", "split", "(", "mask_array", ",", "num_or_size_splits", "=", "num_parts", ",", "axis", "=", "2", ")", "\n", "for", "i", "in", "range", "(", "num_parts", ")", ":", "\n", "            ", "diff_l2", "=", "tf", ".", "norm", "(", "vect_splits", "[", "i", "]", "-", "vect_gt", ",", "axis", "=", "2", ")", "# BxN", "\n", "diff_abs", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "abs", "(", "vect_splits", "[", "i", "]", "-", "vect_gt", ")", ",", "axis", "=", "2", ")", "\n", "if", "not", "SELF_SU", ":", "\n", "                ", "if", "TYPE_L", "==", "'Soft_L1'", ":", "\n", "                    ", "loss_vect", "+=", "tf", ".", "reduce_mean", "(", "mask_splits", "[", "i", "]", "[", ":", ",", ":", ",", "0", "]", "*", "smooth_l1_diff", "(", "diff_l2", ")", ",", "axis", "=", "1", ")", "\n", "", "elif", "TYPE_L", "==", "'L2'", ":", "\n", "                    ", "loss_vect", "+=", "tf", ".", "reduce_mean", "(", "mask_splits", "[", "i", "]", "[", ":", ",", ":", ",", "0", "]", "*", "diff_l2", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "                    ", "loss_vect", "+=", "tf", ".", "reduce_mean", "(", "mask_splits", "[", "i", "]", "[", ":", ",", ":", ",", "0", "]", "*", "diff_abs", ",", "axis", "=", "1", ")", "\n", "", "", "else", ":", "\n", "                ", "if", "TYPE_L", "==", "'Soft_L1'", ":", "\n", "                    ", "loss_vect", "+=", "tf", ".", "reduce_mean", "(", "mask_splits", "[", "i", "]", "[", ":", ",", ":", ",", "0", "]", "*", "smooth_l1_diff", "(", "diff_l2", ")", "*", "confidence", "[", ":", ",", ":", ",", "0", "]", ",", "axis", "=", "1", ")", "# B", "\n", "", "elif", "TYPE_L", "==", "'L2'", ":", "\n", "                    ", "loss_vect", "+=", "tf", ".", "reduce_mean", "(", "mask_splits", "[", "i", "]", "[", ":", ",", ":", ",", "0", "]", "*", "diff_l2", "*", "confidence", "[", ":", ",", ":", ",", "0", "]", ",", "axis", "=", "1", ")", "\n", "", "else", ":", "\n", "                    ", "loss_vect", "+=", "tf", ".", "reduce_mean", "(", "mask_splits", "[", "i", "]", "[", ":", ",", ":", ",", "0", "]", "*", "diff_abs", "*", "confidence", "[", ":", ",", ":", ",", "0", "]", ",", "axis", "=", "1", ")", "\n", "\n", "", "", "if", "SELF_SU", ":", "\n", "                ", "loss_vect", "+=", "-", "0.01", "*", "tf", ".", "reduce_mean", "(", "tf", ".", "log", "(", "confidence", "[", ":", ",", ":", ",", "0", "]", ")", ",", "axis", "=", "1", ")", "\n", "", "", "return", "loss_vect", "\n", "\n", "", "else", ":", "\n", "        ", "if", "vect", ".", "shape", "[", "2", "]", "==", "1", ":", "\n", "            ", "vect", "=", "tf", ".", "squeeze", "(", "vect", ",", "axis", "=", "2", ")", "\n", "if", "confidence", "is", "not", "None", ":", "\n", "                ", "diff_l2", "=", "tf", ".", "abs", "(", "vect", "-", "vect_gt", ")", "*", "confidence", "# BxN", "\n", "diff_abs", "=", "tf", ".", "abs", "(", "vect", "-", "vect_gt", ")", "*", "confidence", "# BxN", "\n", "", "else", ":", "\n", "                ", "diff_l2", "=", "tf", ".", "abs", "(", "vect", "-", "vect_gt", ")", "*", "confidence", "# BxN", "\n", "diff_abs", "=", "tf", ".", "abs", "(", "vect", "-", "vect_gt", ")", "*", "confidence", "# BxN", "\n", "", "", "else", ":", "\n", "            ", "if", "confidence", "is", "not", "None", ":", "\n", "                ", "diff_l2", "=", "tf", ".", "norm", "(", "vect", "-", "vect_gt", ",", "axis", "=", "2", ")", "*", "confidence", "# BxN", "\n", "diff_abs", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "abs", "(", "vect", "-", "vect_gt", ")", ",", "axis", "=", "2", ")", "*", "confidence", "# BxN", "\n", "", "else", ":", "\n", "                ", "diff_l2", "=", "tf", ".", "norm", "(", "vect", "-", "vect_gt", ",", "axis", "=", "2", ")", "# BxN", "\n", "diff_abs", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "abs", "(", "vect", "-", "vect_gt", ")", ",", "axis", "=", "2", ")", "# BxN", "\n", "\n", "", "", "if", "not", "SELF_SU", ":", "\n", "            ", "if", "TYPE_L", "==", "'L2'", ":", "\n", "                ", "return", "tf", ".", "reduce_mean", "(", "diff_l2", ",", "axis", "=", "1", ")", "# B", "\n", "", "elif", "TYPE_L", "==", "'Soft_L1'", ":", "\n", "                ", "return", "tf", ".", "reduce_mean", "(", "smooth_l1_diff", "(", "diff_l2", ")", ",", "axis", "=", "1", ")", "# B", "\n", "", "else", ":", "\n", "                ", "return", "tf", ".", "reduce_mean", "(", "diff_abs", ",", "axis", "=", "1", ")", "# B", "\n", "", "", "else", ":", "\n", "            ", "if", "TYPE_L", "==", "'L2'", ":", "\n", "                ", "return", "tf", ".", "reduce_mean", "(", "diff_l2", "*", "confidence", "[", ":", ",", ":", ",", "0", "]", "-", "0.01", "*", "tf", ".", "log", "(", "confidence", "[", ":", ",", ":", ",", "0", "]", ")", ",", "axis", "=", "1", ")", "# B", "\n", "", "elif", "TYPE_L", "==", "'Soft_L1'", ":", "\n", "                ", "return", "tf", ".", "reduce_mean", "(", "confidence", "[", ":", ",", ":", ",", "0", "]", "*", "smooth_l1_diff", "(", "diff_l2", ")", "-", "0.01", "*", "tf", ".", "log", "(", "confidence", "[", ":", ",", ":", ",", "0", "]", ")", ",", "axis", "=", "1", ")", "# B", "\n", "", "else", ":", "\n", "                ", "return", "tf", ".", "reduce_mean", "(", "confidence", "[", ":", ",", ":", ",", "0", "]", "*", "diff_abs", "-", "0.01", "*", "tf", ".", "log", "(", "confidence", "[", ":", ",", ":", ",", "0", "]", ")", ",", "axis", "=", "1", ")", "# B", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.loss.compute_miou_loss": [[169, 183], ["tensorflow.one_hot", "tensorflow.reduce_sum", "lib.tf_wrapper.batched_gather", "tensorflow.shape", "tensorflow.reduce_sum", "tensorflow.reduce_sum"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.tf_wrapper.batched_gather"], ["", "", "", "", "def", "compute_miou_loss", "(", "W", ",", "I_gt", ",", "matching_indices", "=", "None", ")", ":", "\n", "# W - BxNxK", "\n", "# I_gt - BxN", "\n", "    ", "if", "matching_indices", "is", "not", "None", ":", "\n", "        ", "W_reordered", "=", "batched_gather", "(", "W", ",", "indices", "=", "matching_indices", ",", "axis", "=", "2", ")", "# BxNxK", "\n", "", "else", ":", "\n", "        ", "W_reordered", "=", "W", "\n", "", "depth", "=", "tf", ".", "shape", "(", "W", ")", "[", "2", "]", "\n", "# notice in tf.one_hot, -1 will result in a zero row, which is what we want", "\n", "W_gt", "=", "tf", ".", "one_hot", "(", "I_gt", ",", "depth", "=", "depth", ",", "dtype", "=", "tf", ".", "float32", ")", "# BxNxK", "\n", "dot", "=", "tf", ".", "reduce_sum", "(", "W_gt", "*", "W_reordered", ",", "axis", "=", "1", ")", "# BxK", "\n", "denominator", "=", "tf", ".", "reduce_sum", "(", "W_gt", ",", "axis", "=", "1", ")", "+", "tf", ".", "reduce_sum", "(", "W_reordered", ",", "axis", "=", "1", ")", "-", "dot", "\n", "mIoU", "=", "dot", "/", "(", "denominator", "+", "DIVISION_EPS", ")", "# BxK", "\n", "return", "1.0", "-", "mIoU", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.loss.compute_per_point_type_loss": [[184, 202], ["tensorflow.tile", "tensorflow.stack", "tensorflow.gather_nd", "tensorflow.where", "tensorflow.shape", "tensorflow.shape", "tensorflow.expand_dims", "tensorflow.nn.sparse_softmax_cross_entropy_with_logits", "tensorflow.equal", "tensorflow.zeros_like", "tensorflow.reduce_sum", "tensorflow.to_float", "tensorflow.range", "tensorflow.maximum", "tensorflow.to_float", "tensorflow.count_nonzero", "tensorflow.equal", "tensorflow.not_equal"], "function", ["None"], ["", "def", "compute_per_point_type_loss", "(", "per_point_type", ",", "I_gt", ",", "T_gt", ",", "is_eval", ")", ":", "\n", "# For training, per_point_type is BxNxQ, where Q = n_registered_primitives", "\n", "# For test, per_point_type is BxN", "\n", "# I_gt - BxN, allow -1", "\n", "# T_gt - BxK", "\n", "    ", "batch_size", "=", "tf", ".", "shape", "(", "I_gt", ")", "[", "0", "]", "\n", "n_points", "=", "tf", ".", "shape", "(", "I_gt", ")", "[", "1", "]", "\n", "indices_0", "=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "tf", ".", "range", "(", "batch_size", ")", ",", "axis", "=", "1", ")", ",", "[", "1", ",", "n_points", "]", ")", "# BxN", "\n", "indices", "=", "tf", ".", "stack", "(", "[", "indices_0", ",", "tf", ".", "maximum", "(", "0", ",", "I_gt", ")", "]", ",", "axis", "=", "2", ")", "\n", "per_point_type_gt", "=", "tf", ".", "gather_nd", "(", "T_gt", ",", "indices", "=", "indices", ")", "# BxN", "\n", "if", "is_eval", ":", "\n", "        ", "type_loss", "=", "1.0", "-", "tf", ".", "to_float", "(", "tf", ".", "equal", "(", "per_point_type", ",", "per_point_type_gt", ")", ")", "\n", "", "else", ":", "\n", "        ", "type_loss", "=", "tf", ".", "nn", ".", "sparse_softmax_cross_entropy_with_logits", "(", "logits", "=", "per_point_type", ",", "labels", "=", "per_point_type_gt", ")", "# BxN", "\n", "\n", "# do not add loss to background points in gt", "\n", "", "type_loss", "=", "tf", ".", "where", "(", "tf", ".", "equal", "(", "I_gt", ",", "-", "1", ")", ",", "tf", ".", "zeros_like", "(", "type_loss", ")", ",", "type_loss", ")", "\n", "return", "tf", ".", "reduce_sum", "(", "type_loss", ",", "axis", "=", "1", ")", "/", "tf", ".", "to_float", "(", "tf", ".", "count_nonzero", "(", "tf", ".", "not_equal", "(", "I_gt", ",", "-", "1", ")", ",", "axis", "=", "1", ")", ")", "# B", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.loss.compute_joint_residual_loss": [[203, 230], ["enumerate", "tensorflow.reduce_mean", "tensorflow.reduce_mean", "axis_loss.append", "orth_loss.append", "tensorflow.stack", "tensorflow.stack", "tensorflow.reduce_mean", "tensorflow.norm", "tensorflow.norm", "dist_loss.append", "tensorflow.stack", "tensorflow.squeeze", "tensorflow.abs"], "function", ["None"], ["", "def", "compute_joint_residual_loss", "(", "all_results", ",", "joint_params_gt", ",", "line_space", "=", "'orthogonal'", ")", ":", "\n", "    ", "\"\"\"\n    all_results: [[[B, 3], [B, 3], [B, 1]], [[B, 3], [B, 3], [B, 1]]]\n    joint_params_gt: [N, 2, 7]\n\n    \"\"\"", "\n", "\n", "axis_loss", "=", "[", "]", "\n", "orth_loss", "=", "[", "]", "\n", "if", "line_space", "==", "'orthogonal'", ":", "\n", "        ", "dist_loss", "=", "[", "]", "\n", "", "for", "i", ",", "joint_param", "in", "enumerate", "(", "all_results", ")", ":", "\n", "        ", "axis_loss", ".", "append", "(", "tf", ".", "norm", "(", "joint_param", "[", "0", "]", "-", "joint_params_gt", "[", ":", ",", "i", ",", "0", ":", "3", "]", ",", "axis", "=", "1", ")", ")", "\n", "orth_loss", ".", "append", "(", "tf", ".", "norm", "(", "joint_param", "[", "1", "]", "-", "joint_params_gt", "[", ":", ",", "i", ",", "3", ":", "6", "]", ",", "axis", "=", "1", ")", ")", "\n", "if", "line_space", "==", "'orthogonal'", ":", "\n", "            ", "dist_loss", ".", "append", "(", "tf", ".", "squeeze", "(", "tf", ".", "abs", "(", "joint_param", "[", "2", "]", "-", "joint_params_gt", "[", ":", ",", "i", ",", "6", ":", "7", "]", ")", ",", "axis", "=", "1", ")", ")", "\n", "", "", "axis_loss_avg", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "stack", "(", "axis_loss", ",", "axis", "=", "1", ")", ",", "axis", "=", "1", ")", "\n", "orth_loss_avg", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "stack", "(", "orth_loss", ",", "axis", "=", "1", ")", ",", "axis", "=", "1", ")", "\n", "\n", "fitter_loss", "=", "{", "}", "\n", "fitter_loss", "[", "'axis_loss'", "]", "=", "axis_loss_avg", "\n", "fitter_loss", "[", "'orth_loss'", "]", "=", "orth_loss_avg", "\n", "if", "line_space", "==", "'orthogonal'", ":", "\n", "        ", "dist_loss_avg", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "stack", "(", "dist_loss", ",", "axis", "=", "1", ")", ",", "axis", "=", "1", ")", "\n", "fitter_loss", "[", "'dist_loss'", "]", "=", "dist_loss_avg", "\n", "\n", "", "return", "fitter_loss", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.loss.smooth_l1_loss": [[231, 240], ["keras.abs", "keras.cast", "keras.less"], "function", ["None"], ["", "def", "smooth_l1_loss", "(", "y_true", ",", "y_pred", ")", ":", "\n", "    ", "\"\"\"Implements Smooth-L1 loss.\n    y_true and y_pred are typicallly: [N, 4], but could be any shape.\n    \"\"\"", "\n", "diff", "=", "K", ".", "abs", "(", "y_true", "-", "y_pred", ")", "\n", "less_than_one", "=", "K", ".", "cast", "(", "K", ".", "less", "(", "diff", ",", "1.0", ")", ",", "\"float32\"", ")", "\n", "loss", "=", "(", "less_than_one", "*", "0.5", "*", "diff", "**", "2", ")", "+", "(", "1", "-", "less_than_one", ")", "*", "(", "diff", "-", "0.5", ")", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.loss.smooth_l1_diff": [[241, 253], ["keras.cast", "keras.less"], "function", ["None"], ["", "def", "smooth_l1_diff", "(", "diff", ",", "threshold", "=", "0.1", ")", ":", "\n", "    ", "coefficient", "=", "1", "/", "(", "2", "*", "threshold", ")", "\n", "#coefficient = tf.Print(coefficient, [coefficient], message='coefficient', summarize=15)", "\n", "\n", "less_than_threshold", "=", "K", ".", "cast", "(", "K", ".", "less", "(", "diff", ",", "threshold", ")", ",", "\"float32\"", ")", "\n", "#less_than_threshold = tf.Print(less_than_threshold, [less_than_threshold], message='less_than_threshold', summarize=15)", "\n", "\n", "loss", "=", "(", "less_than_threshold", "*", "coefficient", "*", "diff", "**", "2", ")", "+", "(", "1", "-", "less_than_threshold", ")", "*", "(", "diff", "-", "threshold", "/", "2", ")", "\n", "#loss = tf.Print(loss, [loss], message='loss',", "\n", "#                              summarize=15)", "\n", "\n", "return", "loss", "\n", "", ""]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.aligning.estimateSimilarityTransform": [[17, 33], ["aligning.set_config", "aligning.getRANSACInliers", "aligning.estimateSimilarityUmeyama", "print", "print"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.aligning.set_config", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.aligning.getRANSACInliers", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.aligning.estimateSimilarityUmeyama"], ["def", "estimateSimilarityTransform", "(", "source", ":", "np", ".", "array", ",", "target", ":", "np", ".", "array", ",", "rt_pre", "=", "None", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "nIter", "=", "100", "\n", "# [4, N], [4, N]", "\n", "SourceHom", ",", "TargetHom", ",", "TargetNorm", ",", "SourceNorm", ",", "RatioTS", ",", "RatioST", ",", "PassT", ",", "StopT", "=", "set_config", "(", "source", ",", "target", ",", "verbose", ")", "\n", "inliers", ",", "transform_results", "=", "getRANSACInliers", "(", "SourceHom", ",", "TargetHom", ",", "rt_pre", "=", "rt_pre", ",", "MaxIterations", "=", "nIter", ",", "PassThreshold", "=", "PassT", ",", "StopThreshold", "=", "StopT", ")", "\n", "SourceInliersHom", ",", "TargetInliersHom", ",", "BestInlierRatio", "=", "inliers", "\n", "# Scales, Rotation, Translation, OutTransform = transform_results", "\n", "if", "(", "BestInlierRatio", "<", "0.1", ")", ":", "\n", "        ", "print", "(", "'[ WARN ] - Something is wrong. Small BestInlierRatio: '", ",", "BestInlierRatio", ")", "\n", "return", "None", ",", "None", ",", "None", ",", "None", "\n", "\n", "", "Scales", ",", "Rotation", ",", "Translation", ",", "OutTransform", "=", "estimateSimilarityUmeyama", "(", "SourceInliersHom", ",", "TargetInliersHom", ",", "rt_pre", "=", "rt_pre", ")", "\n", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "'BestInlierRatio:'", ",", "BestInlierRatio", ")", "\n", "", "return", "Scales", ",", "Rotation", ",", "Translation", ",", "OutTransform", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.aligning.estimateSimilarityTransformCoords": [[34, 87], ["aligning.set_config", "aligning.set_config", "aligning.getRANSACInliersCoords", "aligning.get_joint_features", "aligning.estimateSimilarityUmeyamaCoords", "print", "print", "matplotlib.figure", "range", "matplotlib.show", "plt.figure.savefig", "lib.transformations.quaternion_from_matrix", "lib.transformations.quaternion_from_matrix", "matplotlib.subplot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.plot", "matplotlib.xlabel", "matplotlib.ylabel", "plt.subplot.text", "matplotlib.grid", "matplotlib.legend", "matplotlib.title", "range", "range", "len", "len", "numpy.arccos", "sum"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.aligning.set_config", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.aligning.set_config", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.aligning.getRANSACInliersCoords", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.aligning.get_joint_features", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.aligning.estimateSimilarityUmeyamaCoords", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.quaternion_from_matrix", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.quaternion_from_matrix"], ["", "def", "estimateSimilarityTransformCoords", "(", "source", ":", "np", ".", "array", ",", "target", ":", "np", ".", "array", ",", "source1", "=", "None", ",", "target1", "=", "None", ",", "joints", "=", "None", ",", "rt_ref", "=", "[", "None", ",", "None", "]", ",", "rt_pre", "=", "[", "None", ",", "None", "]", ",", "viz", "=", "False", ",", "viz_ransac", "=", "False", ",", "viz_sample", "=", "False", ",", "viz_normal", "=", "False", ",", "use_jt_pts", "=", "False", ",", "eval_rts", "=", "False", ",", "use_ext_rot", "=", "False", ",", "verbose", "=", "False", ",", "index", "=", "0", ")", ":", "\n", "    ", "nIter", "=", "100", "\n", "# [4, N], [4, N]", "\n", "SourceHom", ",", "TargetHom", ",", "TargetNorm", ",", "SourceNorm", ",", "RatioTS", ",", "RatioST", ",", "PassT", ",", "StopT", "=", "set_config", "(", "source", ",", "target", ",", "verbose", ")", "\n", "SourceHom1", ",", "TargetHom1", ",", "TargetNorm1", ",", "SourceNorm1", ",", "RatioTS1", ",", "RatioST1", ",", "PassT1", ",", "StopT1", "=", "set_config", "(", "source1", ",", "target1", ",", "verbose", ")", "\n", "\n", "# 1. find inliers", "\n", "inliers", ",", "records", "=", "getRANSACInliersCoords", "(", "SourceHom", ",", "TargetHom", ",", "SourceHom1", ",", "TargetHom1", ",", "joints", "=", "joints", ",", "rt_ref", "=", "rt_ref", ",", "rt_pre", "=", "rt_pre", ",", "MaxIterations", "=", "nIter", ",", "PassThreshold", "=", "[", "PassT", ",", "PassT1", "]", ",", "StopThreshold", "=", "[", "StopT", ",", "StopT1", "]", ",", "viz", "=", "viz", ",", "viz_ransac", "=", "viz_ransac", ",", "viz_sample", "=", "viz_sample", ",", "viz_normal", "=", "viz_normal", ",", "use_jt_pts", "=", "use_jt_pts", ",", "eval_rts", "=", "eval_rts", ",", "use_ext_rot", "=", "use_ext_rot", ",", "verbose", "=", "verbose", ")", "\n", "\n", "SourceInliersHom", ",", "TargetInliersHom", ",", "BestInlierRatio0", ",", "SourceInliersHom1", ",", "TargetInliersHom1", ",", "BestInlierRatio1", "=", "inliers", "\n", "ang_dis_list", ",", "inliers_ratio", ",", "select_index", "=", "records", "\n", "\n", "if", "(", "BestInlierRatio0", "<", "0.05", ")", "or", "(", "BestInlierRatio1", "<", "0.05", ")", ":", "\n", "        ", "print", "(", "'[ WARN ] - Something is wrong. Small BestInlierRatio: '", ",", "[", "BestInlierRatio0", ",", "BestInlierRatio1", "]", ")", "\n", "return", "None", ",", "None", ",", "None", ",", "None", "\n", "\n", "# 2. further use inlier points and joints to decide the final pose", "\n", "", "position", ",", "joint_axis", ",", "joint_pts", "=", "get_joint_features", "(", "joints", ")", "\n", "assert", "joint_pts", ".", "shape", "[", "0", "]", "==", "4", "\n", "Scale", ",", "Rotations", ",", "Translations", ",", "OutTransforms", "=", "estimateSimilarityUmeyamaCoords", "(", "SourceInliersHom", ",", "TargetInliersHom", ",", "SourceInliersHom1", ",", "TargetInliersHom1", ",", "joint_axis", ",", "rt_ref", "=", "rt_ref", ",", "joint_pts", "=", "joint_pts", ",", "viz", "=", "viz", ",", "viz_ransac", "=", "viz_ransac", ",", "viz_sample", "=", "viz_sample", ",", "use_jt_pts", "=", "use_jt_pts", ",", "use_ext_rot", "=", "use_ext_rot", ",", "verbose", "=", "verbose", ")", "\n", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "'BestInlierRatio:'", ",", "BestInlierRatio0", ")", "\n", "\n", "", "if", "viz_ransac", ":", "\n", "        ", "fig", "=", "plt", ".", "figure", "(", "dpi", "=", "200", ")", "\n", "for", "j", "in", "range", "(", "2", ")", ":", "\n", "            ", "q_gt", "=", "quaternion_from_matrix", "(", "rt_ref", "[", "j", "]", "[", ":", "3", ",", ":", "3", "]", ")", "\n", "q_iter", "=", "quaternion_from_matrix", "(", "Rotations", "[", "j", "]", ".", "T", ")", "\n", "ang_dis", "=", "2", "*", "np", ".", "arccos", "(", "sum", "(", "q_iter", "*", "q_gt", ")", ")", "*", "180", "/", "np", ".", "pi", "\n", "if", "ang_dis", ">", "180", ":", "\n", "                ", "ang_dis", "=", "360", "-", "ang_dis", "\n", "", "ax", "=", "plt", ".", "subplot", "(", "1", ",", "2", ",", "j", "+", "1", ")", "\n", "plt", ".", "plot", "(", "range", "(", "len", "(", "ang_dis_list", "[", "j", "]", ")", ")", ",", "ang_dis_list", "[", "j", "]", ",", "label", "=", "'rotation err'", ")", "\n", "plt", ".", "plot", "(", "range", "(", "len", "(", "inliers_ratio", "[", "j", "]", ")", ")", ",", "inliers_ratio", "[", "j", "]", ",", "label", "=", "'inliers ratio'", ")", "\n", "plt", ".", "plot", "(", "[", "select_index", "[", "j", "]", "]", ",", "[", "ang_dis_list", "[", "j", "]", "[", "select_index", "[", "j", "]", "]", "]", ",", "'bo'", ")", "\n", "plt", ".", "plot", "(", "[", "select_index", "[", "0", "]", "]", ",", "[", "ang_dis_list", "[", "j", "]", "[", "select_index", "[", "0", "]", "]", "]", ",", "'ro'", ")", "\n", "plt", ".", "plot", "(", "[", "select_index", "[", "j", "]", "]", ",", "[", "ang_dis", "]", ",", "'yo'", ",", "label", "=", "'final rotation error'", ")", "\n", "plt", ".", "xlabel", "(", "'Ransac sampling order'", ")", "\n", "plt", ".", "ylabel", "(", "'value'", ")", "\n", "ax", ".", "text", "(", "0.55", ",", "0.80", ",", "'Select {0}th inliers with {1:0.4f} rotation error'", ".", "format", "(", "select_index", "[", "j", "]", ",", "ang_dis_list", "[", "j", "]", "[", "select_index", "[", "j", "]", "]", ")", ",", "transform", "=", "ax", ".", "transAxes", ",", "color", "=", "'blue'", ",", "fontsize", "=", "6", ")", "\n", "plt", ".", "grid", "(", "True", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "title", "(", "'part {}'", ".", "format", "(", "j", ")", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "save_path", "=", "'/home/lxiaol9/Downloads/ARCwork/6DPOSE/results/test_pred/images'", "\n", "fig", ".", "savefig", "(", "'{}/{}_{}.png'", ".", "format", "(", "save_path", ",", "index", ",", "'coord_descent'", ")", ",", "pad_inches", "=", "0", ")", "\n", "\n", "", "return", "Scale", ",", "Rotations", ",", "Translations", ",", "OutTransforms", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.aligning.set_config": [[88, 104], ["numpy.transpose", "numpy.transpose", "numpy.mean", "numpy.mean", "numpy.hstack", "numpy.hstack", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.ones", "numpy.ones"], "function", ["None"], ["", "def", "set_config", "(", "source", ",", "target", ",", "verbose", ")", ":", "\n", "    ", "SourceHom", "=", "np", ".", "transpose", "(", "np", ".", "hstack", "(", "[", "source", ",", "np", ".", "ones", "(", "[", "source", ".", "shape", "[", "0", "]", ",", "1", "]", ")", "]", ")", ")", "\n", "TargetHom", "=", "np", ".", "transpose", "(", "np", ".", "hstack", "(", "[", "target", ",", "np", ".", "ones", "(", "[", "target", ".", "shape", "[", "0", "]", ",", "1", "]", ")", "]", ")", ")", "\n", "\n", "# Auto-parameter selection based on source-target heuristics", "\n", "TargetNorm", "=", "np", ".", "mean", "(", "np", ".", "linalg", ".", "norm", "(", "target", ",", "axis", "=", "1", ")", ")", "\n", "SourceNorm", "=", "np", ".", "mean", "(", "np", ".", "linalg", ".", "norm", "(", "source", ",", "axis", "=", "1", ")", ")", "\n", "RatioTS", "=", "(", "TargetNorm", "/", "SourceNorm", ")", "\n", "RatioST", "=", "(", "SourceNorm", "/", "TargetNorm", ")", "\n", "PassT", "=", "RatioST", "if", "(", "RatioST", ">", "RatioTS", ")", "else", "RatioTS", "\n", "StopT", "=", "PassT", "/", "100", "\n", "# if verbose:", "\n", "#     print('Pass threshold: ', PassT)", "\n", "#     print('Stop threshold: ', StopT)", "\n", "\n", "return", "SourceHom", ",", "TargetHom", ",", "TargetNorm", ",", "SourceNorm", ",", "RatioTS", ",", "RatioST", ",", "PassT", ",", "StopT", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.aligning.compose_rt": [[105, 111], ["numpy.zeros", "rotation.transpose"], "function", ["None"], ["", "def", "compose_rt", "(", "rotation", ",", "translation", ")", ":", "\n", "    ", "aligned_RT", "=", "np", ".", "zeros", "(", "(", "4", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "aligned_RT", "[", ":", "3", ",", ":", "3", "]", "=", "rotation", ".", "transpose", "(", ")", "\n", "aligned_RT", "[", ":", "3", ",", "3", "]", "=", "translation", "\n", "aligned_RT", "[", "3", ",", "3", "]", "=", "1", "\n", "return", "aligned_RT", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.aligning.getRANSACInliersCoords": [[112, 211], ["numpy.arange", "numpy.arange", "aligning.get_joint_features", "range", "numpy.random.randint", "numpy.random.randint", "aligning.estimateSimilarityUmeyamaCoords", "aligning.evaluateModel", "aligning.evaluateModelRotation", "aligning.evaluateModel", "aligning.evaluateModelRotation", "inliers_ratio[].append", "inliers_ratio[].append", "range", "lib.transformations.quaternion_from_matrix", "lib.transformations.quaternion_from_matrix", "ang_dis_list[].append", "numpy.arccos", "sum"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.aligning.get_joint_features", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.aligning.estimateSimilarityUmeyamaCoords", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.aligning.evaluateModel", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.aligning.evaluateModelRotation", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.aligning.evaluateModel", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.aligning.evaluateModelRotation", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.quaternion_from_matrix", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.quaternion_from_matrix"], ["", "def", "getRANSACInliersCoords", "(", "SourceHom0", ",", "TargetHom0", ",", "SourceHom1", ",", "TargetHom1", ",", "joints", "=", "None", ",", "rt_ref", "=", "[", "None", ",", "None", "]", ",", "rt_pre", "=", "[", "None", ",", "None", "]", ",", "MaxIterations", "=", "100", ",", "PassThreshold", "=", "[", "200", ",", "200", "]", ",", "StopThreshold", "=", "[", "1", ",", "1", "]", ",", "viz", "=", "False", ",", "viz_ransac", "=", "False", ",", "viz_sample", "=", "False", ",", "viz_normal", "=", "False", ",", "verbose", "=", "False", ",", "use_jt_pts", "=", "False", ",", "use_ext_rot", "=", "False", ",", "eval_rts", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    joints: [position, axis, pts]\n            position: [1, 3]\n            axis : 3\n            pts  : [N, 3]\n    \"\"\"", "\n", "BestResidual0", "=", "1e10", "\n", "BestResidual1", "=", "1e10", "\n", "BestInlierRatio0", "=", "0", "\n", "BestInlierRatio1", "=", "0", "\n", "BestInlierIdx0", "=", "np", ".", "arange", "(", "SourceHom0", ".", "shape", "[", "1", "]", ")", "\n", "BestInlierIdx1", "=", "np", ".", "arange", "(", "SourceHom1", ".", "shape", "[", "1", "]", ")", "\n", "\n", "# if viz_ransac: # todo", "\n", "#     plot3d_pts([[SourceHom0[:3].transpose(), SourceHom1[:3].transpose(), TargetHom0[:3].transpose(), TargetHom1[:3].transpose()]], [['source0', 'source1', 'target0', 'target1']], s=5, title_name=['points to ransac'], color_channel=None, save_fig=False, sub_name='default')", "\n", "\n", "position", ",", "joint_axis", ",", "joint_pts", "=", "get_joint_features", "(", "joints", ")", "\n", "assert", "joint_pts", ".", "shape", "[", "0", "]", "==", "4", "\n", "ang_dis_list", "=", "[", "[", "]", ",", "[", "]", "]", "\n", "inliers_ratio", "=", "[", "[", "]", ",", "[", "]", "]", "\n", "select_index", "=", "[", "0", "]", "*", "2", "\n", "for", "i", "in", "range", "(", "0", ",", "MaxIterations", ")", ":", "\n", "        ", "if", "i", ">", "5", ":", "\n", "            ", "verbose", "=", "False", "\n", "", "RandIdx0", "=", "np", ".", "random", ".", "randint", "(", "SourceHom0", ".", "shape", "[", "1", "]", ",", "size", "=", "5", ")", "\n", "RandIdx1", "=", "np", ".", "random", ".", "randint", "(", "SourceHom1", ".", "shape", "[", "1", "]", ",", "size", "=", "5", ")", "\n", "\n", "scale", ",", "Rs", ",", "Ts", ",", "OutTrans", "=", "estimateSimilarityUmeyamaCoords", "(", "SourceHom0", "[", ":", ",", "RandIdx0", "]", ",", "TargetHom0", "[", ":", ",", "RandIdx0", "]", ",", "SourceHom1", "[", ":", ",", "RandIdx1", "]", ",", "TargetHom1", "[", ":", ",", "RandIdx1", "]", ",", "joint_axis", ",", "joint_pts", "=", "joint_pts", ",", "rt_ref", "=", "rt_ref", ",", "rt_pre", "=", "rt_pre", ",", "viz", "=", "viz", ",", "viz_ransac", "=", "viz_ransac", ",", "viz_sample", "=", "viz_sample", ",", "use_jt_pts", "=", "use_jt_pts", ",", "use_ext_rot", "=", "use_ext_rot", ",", "verbose", "=", "verbose", ",", "index", "=", "i", "+", "1", ")", "\n", "\n", "# evaluate per part pts", "\n", "if", "eval_rts", ":", "\n", "# print('evaluating inliers using rts for pair 0')", "\n", "            ", "Residual0", ",", "InlierRatio0", ",", "InlierIdx0", "=", "evaluateModel", "(", "OutTrans", "[", "0", "]", ",", "SourceHom0", ",", "TargetHom0", ",", "PassThreshold", "[", "0", "]", ")", "\n", "", "else", ":", "\n", "            ", "Residual0", ",", "InlierRatio0", ",", "InlierIdx0", "=", "evaluateModelRotation", "(", "Rs", "[", "0", "]", ".", "T", ",", "SourceHom0", ",", "TargetHom0", ",", "0.05", "*", "PassThreshold", "[", "0", "]", ",", "rt_ref", "=", "rt_ref", "[", "0", "]", ",", "viz_normal", "=", "viz_normal", ")", "\n", "\n", "# if Residual0 < BestResidual0: # todo", "\n", "# if InlierRatio0 > BestInlierRatio0 and Residual0 < BestResidual0:", "\n", "\n", "", "if", "eval_rts", ":", "\n", "# print('evaluating inliers using rts for pair 1')", "\n", "            ", "Residual1", ",", "InlierRatio1", ",", "InlierIdx1", "=", "evaluateModel", "(", "OutTrans", "[", "1", "]", ",", "SourceHom1", ",", "TargetHom1", ",", "PassThreshold", "[", "1", "]", ")", "\n", "", "else", ":", "\n", "            ", "Residual1", ",", "InlierRatio1", ",", "InlierIdx1", "=", "evaluateModelRotation", "(", "Rs", "[", "1", "]", ".", "T", ",", "SourceHom1", ",", "TargetHom1", ",", "0.05", "*", "PassThreshold", "[", "1", "]", ",", "rt_ref", "=", "rt_ref", "[", "1", "]", ",", "viz_normal", "=", "viz_normal", ")", "\n", "\n", "", "if", "viz_ransac", ":", "\n", "            ", "inliers_ratio", "[", "0", "]", ".", "append", "(", "InlierRatio0", ")", "\n", "inliers_ratio", "[", "1", "]", ".", "append", "(", "InlierRatio1", ")", "\n", "for", "j", "in", "range", "(", "2", ")", ":", "\n", "                ", "q_gt", "=", "quaternion_from_matrix", "(", "rt_ref", "[", "j", "]", "[", ":", "3", ",", ":", "3", "]", ")", "\n", "q_iter", "=", "quaternion_from_matrix", "(", "Rs", "[", "j", "]", ".", "T", ")", "\n", "ang_dis", "=", "2", "*", "np", ".", "arccos", "(", "sum", "(", "q_iter", "*", "q_gt", ")", ")", "*", "180", "/", "np", ".", "pi", "\n", "if", "ang_dis", ">", "180", ":", "\n", "                    ", "ang_dis", "=", "360", "-", "ang_dis", "\n", "", "ang_dis_list", "[", "j", "]", ".", "append", "(", "ang_dis", ")", "\n", "\n", "", "", "if", "InlierRatio0", ">", "BestInlierRatio0", ":", "\n", "            ", "select_index", "[", "0", "]", "=", "i", "\n", "BestResidual0", "=", "Residual0", "\n", "BestInlierRatio0", "=", "InlierRatio0", "\n", "BestInlierIdx0", "=", "InlierIdx0", "\n", "\n", "# if Residual1 < BestResidual1: # todo", "\n", "# if InlierRatio1 > BestInlierRatio1 and Residual1 < BestResidual1:", "\n", "", "if", "InlierRatio1", ">", "BestInlierRatio1", ":", "\n", "            ", "select_index", "[", "1", "]", "=", "i", "\n", "BestResidual1", "=", "Residual1", "\n", "BestInlierRatio1", "=", "InlierRatio1", "\n", "BestInlierIdx1", "=", "InlierIdx1", "\n", "# print('Iteration: ', i, '\\n Residual: ', [Residual0, Residual1], 'Inlier ratio: ', [InlierRatio0, InlierRatio1])", "\n", "\n", "", "if", "BestResidual0", "<", "StopThreshold", "[", "0", "]", "and", "BestResidual1", "<", "StopThreshold", "[", "1", "]", ":", "\n", "            ", "break", "\n", "\n", "# if viz_ransac:", "\n", "#     fig = plt.figure(dpi=200)", "\n", "#     for j in range(2):", "\n", "#         ax = plt.subplot(1, 2, j+1)", "\n", "#         plt.plot(range(len(ang_dis_list[j])), ang_dis_list[j], label='rotation err')", "\n", "#         plt.plot(range(len(inliers_ratio[j])), inliers_ratio[j], label='inliers ratio')", "\n", "#         plt.plot([select_index[j]], [ang_dis_list[j][select_index[j]]], 'bo')", "\n", "#         plt.plot([select_index[0]], [ang_dis_list[j][select_index[0]]], 'ro')", "\n", "#         plt.xlabel('Ransac sampling order')", "\n", "#         plt.ylabel('value')", "\n", "#         ax.text(0.55, 0.80, 'Select {0}th inliers with {1:0.4f} rotation error'.format(select_index[j], ang_dis_list[j][select_index[j]]), transform=ax.transAxes, color='blue', fontsize=6)", "\n", "#         plt.grid(True)", "\n", "#         plt.legend()", "\n", "#         plt.title('part {}'.format(j))", "\n", "#     plt.show()", "\n", "", "", "inliers", "=", "[", "SourceHom0", "[", ":", ",", "BestInlierIdx0", "]", ",", "TargetHom0", "[", ":", ",", "BestInlierIdx0", "]", ",", "BestInlierRatio0", ",", "SourceHom1", "[", ":", ",", "BestInlierIdx1", "]", ",", "TargetHom1", "[", ":", ",", "BestInlierIdx1", "]", ",", "BestInlierRatio1", "]", "\n", "\n", "return", "inliers", ",", "[", "ang_dis_list", ",", "inliers_ratio", ",", "select_index", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.aligning.estimateSimilarityUmeyamaCoords": [[214, 296], ["aligning.svd_pts", "aligning.svd_pts", "numpy.tile", "numpy.tile", "numpy.matmul", "numpy.matmul", "numpy.cos", "lib.vis_utils.plot3d_pts", "range", "range", "matplotlib.figure", "range", "matplotlib.show", "aligning.compute_scale_translation", "aligning.est_ST", "aligning.est_ST", "int", "int", "numpy.matmul", "aligning.svd_pts", "numpy.matmul", "aligning.svd_pts", "r_list[].append", "r_list[].append", "lib.transformations.quaternion_from_matrix", "matplotlib.subplot", "matplotlib.plot", "matplotlib.xlabel", "matplotlib.ylabel", "matplotlib.title", "lib.vis_utils.plot3d_pts", "print", "lib.vis_utils.plot3d_pts", "print", "numpy.matmul", "numpy.matmul", "numpy.trace", "numpy.trace", "lib.transformations.quaternion_from_matrix", "ang_dis_list[].append", "range", "SourceHom0[].transpose", "SourceHom1[].transpose", "TargetHom0[].transpose", "TargetHom1[].transpose", "joint_pts[].transpose", "numpy.matmul", "numpy.matmul", "len", "SourceHom0[].transpose", "SourceHom1[].transpose", "TargetHom0[].transpose", "TargetHom1[].transpose", "joint_pts[].transpose", "SourceHom0[].transpose", "SourceHom1[].transpose", "TargetHom0[].transpose", "TargetHom1[].transpose", "numpy.arccos", "sum"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.aligning.svd_pts", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.aligning.svd_pts", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.vis_utils.plot3d_pts", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.aligning.compute_scale_translation", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.aligning.est_ST", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.aligning.est_ST", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.aligning.svd_pts", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.aligning.svd_pts", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.quaternion_from_matrix", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.vis_utils.plot3d_pts", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.vis_utils.plot3d_pts", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.quaternion_from_matrix"], ["", "def", "estimateSimilarityUmeyamaCoords", "(", "SourceHom0", ",", "TargetHom0", ",", "SourceHom1", ",", "TargetHom1", ",", "joint_axis", ",", "joint_pts", "=", "None", ",", "rt_ref", "=", "[", "None", ",", "None", "]", ",", "rt_pre", "=", "[", "None", ",", "None", "]", ",", "viz", "=", "False", ",", "viz_ransac", "=", "False", ",", "viz_sample", "=", "False", ",", "use_jt_pts", "=", "False", ",", "use_ext_rot", "=", "False", ",", "verbose", "=", "False", ",", "index", "=", "0", ")", ":", "\n", "    ", "\"\"\"\n    SourceHom0: [4, 5]\n    joint_pts : [4, 5]\n    joint_axis: [4, 1]\n    \"\"\"", "\n", "U", ",", "D0", ",", "Vh", "=", "svd_pts", "(", "SourceHom0", ",", "TargetHom0", ")", "#", "\n", "R0", "=", "np", ".", "matmul", "(", "U", ",", "Vh", ")", ".", "T", "# Transpose is the one that works", "\n", "U", ",", "D1", ",", "Vh", "=", "svd_pts", "(", "SourceHom1", ",", "TargetHom1", ")", "#", "\n", "R1", "=", "np", ".", "matmul", "(", "U", ",", "Vh", ")", ".", "T", "#", "\n", "# begin EM", "\n", "max_iter", "=", "100", "\n", "# max_iter = 1 # todo", "\n", "StopThreshold", "=", "2", "*", "np", ".", "cos", "(", "0.5", "/", "180", "*", "np", ".", "pi", ")", "\n", "if", "viz_sample", ":", "\n", "        ", "plot3d_pts", "(", "[", "[", "SourceHom0", "[", ":", "3", "]", ".", "transpose", "(", ")", ",", "SourceHom1", "[", ":", "3", "]", ".", "transpose", "(", ")", ",", "TargetHom0", "[", ":", "3", "]", ".", "transpose", "(", ")", ",", "TargetHom1", "[", ":", "3", "]", ".", "transpose", "(", ")", ",", "joint_pts", "[", ":", "3", "]", ".", "transpose", "(", ")", "]", "]", ",", "[", "[", "'source0'", ",", "'source1'", ",", "'target0'", ",", "'target1'", ",", "'joint_points'", "]", "]", ",", "s", "=", "100", ",", "title_name", "=", "[", "'sampled points'", "]", ",", "color_channel", "=", "None", ",", "save_fig", "=", "False", ",", "sub_name", "=", "'default'", ")", "\n", "", "joint_axis_tiled0", "=", "np", ".", "tile", "(", "joint_axis", ",", "(", "1", ",", "int", "(", "SourceHom0", ".", "shape", "[", "1", "]", "/", "5", ")", ")", ")", "\n", "joint_axis_tiled1", "=", "np", ".", "tile", "(", "joint_axis", ",", "(", "1", ",", "int", "(", "SourceHom1", ".", "shape", "[", "1", "]", "/", "5", ")", ")", ")", "\n", "# joint_axis_tiled0 = np.tile(joint_axis, (1, int(SourceHom0.shape[1])))", "\n", "# joint_axis_tiled1 = np.tile(joint_axis, (1, int(SourceHom1.shape[1])))", "\n", "if", "use_ext_rot", "and", "rt_pre", "[", "0", "]", "is", "not", "None", ":", "\n", "# print('using external rotation')", "\n", "        ", "R0", "=", "rt_pre", "[", "0", "]", "[", ":", "3", ",", ":", "3", "]", ".", "T", "\n", "R1", "=", "rt_pre", "[", "1", "]", "[", ":", "3", ",", ":", "3", "]", ".", "T", "\n", "", "else", ":", "\n", "        ", "r_list", "=", "[", "[", "R0", "]", ",", "[", "R1", "]", "]", "\n", "for", "i", "in", "range", "(", "max_iter", ")", ":", "\n", "            ", "rotated_axis", "=", "np", ".", "matmul", "(", "R0", ".", "T", ",", "joint_axis_tiled1", "[", ":", "3", "]", ")", "# [3, 1]", "\n", "U", ",", "D1", ",", "Vh", "=", "svd_pts", "(", "SourceHom1", ",", "TargetHom1", ",", "joint_axis_tiled1", ",", "rotated_axis", ",", "viz_sample", "=", "viz_sample", ",", "index", "=", "2", "*", "i", ")", "\n", "R1_new", "=", "np", ".", "matmul", "(", "U", ",", "Vh", ")", ".", "T", "\n", "rotated_axis", "=", "np", ".", "matmul", "(", "R1_new", ".", "T", ",", "joint_axis_tiled0", "[", ":", "3", "]", ")", "\n", "U", ",", "D0", ",", "Vh", "=", "svd_pts", "(", "SourceHom0", ",", "TargetHom0", ",", "joint_axis_tiled0", ",", "rotated_axis", ",", "viz_sample", "=", "viz_sample", ",", "index", "=", "2", "*", "i", "+", "1", ")", "\n", "R0_new", "=", "np", ".", "matmul", "(", "U", ",", "Vh", ")", ".", "T", "\n", "eigen_sum0", "=", "np", ".", "trace", "(", "np", ".", "matmul", "(", "R0_new", ".", "T", ",", "R0", ")", ")", "-", "1", "\n", "eigen_sum1", "=", "np", ".", "trace", "(", "np", ".", "matmul", "(", "R1_new", ".", "T", ",", "R1", ")", ")", "-", "1", "\n", "R0", "=", "R0_new", "\n", "R1", "=", "R1_new", "\n", "r_list", "[", "0", "]", ".", "append", "(", "R0", ")", "\n", "r_list", "[", "1", "]", ".", "append", "(", "R1", ")", "\n", "if", "eigen_sum0", ">", "StopThreshold", "and", "eigen_sum1", ">", "StopThreshold", ":", "\n", "# if verbose:", "\n", "#     print('Algorithm converges at {}th iteration for Coordinate Descent'.format(i))", "\n", "                ", "break", "\n", "", "", "", "if", "viz_ransac", "and", "index", "<", "10", ":", "# and SourceHom0.shape[1]>5:", "\n", "        ", "ang_dis_list", "=", "[", "[", "]", ",", "[", "]", "]", "\n", "for", "j", "in", "range", "(", "2", ")", ":", "\n", "            ", "q_gt", "=", "quaternion_from_matrix", "(", "rt_ref", "[", "j", "]", "[", ":", "3", ",", ":", "3", "]", ")", "\n", "for", "rot_iter", "in", "r_list", "[", "j", "]", ":", "\n", "                ", "q_iter", "=", "quaternion_from_matrix", "(", "rot_iter", ".", "T", ")", "\n", "ang_dis", "=", "2", "*", "np", ".", "arccos", "(", "sum", "(", "q_iter", "*", "q_gt", ")", ")", "*", "180", "/", "np", ".", "pi", "\n", "if", "ang_dis", ">", "180", ":", "\n", "                    ", "ang_dis", "=", "360", "-", "ang_dis", "\n", "", "ang_dis_list", "[", "j", "]", ".", "append", "(", "ang_dis", ")", "\n", "", "", "fig", "=", "plt", ".", "figure", "(", "dpi", "=", "200", ")", "\n", "for", "j", "in", "range", "(", "2", ")", ":", "\n", "            ", "ax", "=", "plt", ".", "subplot", "(", "1", ",", "2", ",", "j", "+", "1", ")", "\n", "plt", ".", "plot", "(", "range", "(", "len", "(", "ang_dis_list", "[", "j", "]", ")", ")", ",", "ang_dis_list", "[", "j", "]", ")", "\n", "plt", ".", "xlabel", "(", "'iteration'", ")", "\n", "plt", ".", "ylabel", "(", "'rotation error'", ")", "\n", "plt", ".", "title", "(", "'{}th sampling part {}'", ".", "format", "(", "index", ",", "j", ")", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "", "Rs", "=", "[", "R0", ",", "R1", "]", "\n", "\n", "if", "use_jt_pts", ":", "\n", "        ", "if", "viz_sample", ":", "\n", "            ", "plot3d_pts", "(", "[", "[", "SourceHom0", "[", ":", "3", "]", ".", "transpose", "(", ")", ",", "SourceHom1", "[", ":", "3", "]", ".", "transpose", "(", ")", ",", "TargetHom0", "[", ":", "3", "]", ".", "transpose", "(", ")", ",", "TargetHom1", "[", ":", "3", "]", ".", "transpose", "(", ")", ",", "joint_pts", "[", ":", "3", "]", ".", "transpose", "(", ")", "]", "]", ",", "[", "[", "'source0'", ",", "'source1'", ",", "'target0'", ",", "'target1'", ",", "'joint_points'", "]", "]", ",", "s", "=", "100", ",", "title_name", "=", "[", "'sampled points'", "]", ",", "color_channel", "=", "None", ",", "save_fig", "=", "False", ",", "sub_name", "=", "'default'", ")", "\n", "", "final_scale", ",", "Ts", ",", "OutTrans", "=", "compute_scale_translation", "(", "[", "SourceHom0", ",", "SourceHom1", "]", ",", "[", "TargetHom0", ",", "TargetHom1", "]", ",", "Rs", ",", "joint_pts", ")", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"scale by adding joints are \\n: {}\"", ".", "format", "(", "final_scale", ")", ")", "\n", "", "", "else", ":", "\n", "        ", "if", "viz_sample", ":", "\n", "            ", "plot3d_pts", "(", "[", "[", "SourceHom0", "[", ":", "3", "]", ".", "transpose", "(", ")", ",", "SourceHom1", "[", ":", "3", "]", ".", "transpose", "(", ")", ",", "TargetHom0", "[", ":", "3", "]", ".", "transpose", "(", ")", ",", "TargetHom1", "[", ":", "3", "]", ".", "transpose", "(", ")", "]", "]", ",", "[", "[", "'source0'", ",", "'source1'", ",", "'target0'", ",", "'target1'", "]", "]", ",", "s", "=", "100", ",", "title_name", "=", "[", "'points after sampling'", "]", ",", "color_channel", "=", "None", ",", "save_fig", "=", "False", ",", "sub_name", "=", "'default'", ")", "\n", "", "final_scale0", ",", "T0", ",", "OutTrans0", "=", "est_ST", "(", "SourceHom0", ",", "TargetHom0", ",", "D0", ",", "Rs", "[", "0", "]", ")", "\n", "final_scale1", ",", "T1", ",", "OutTrans1", "=", "est_ST", "(", "SourceHom1", ",", "TargetHom1", ",", "D1", ",", "Rs", "[", "1", "]", ")", "\n", "final_scale", "=", "[", "final_scale0", ",", "final_scale1", "]", "\n", "Ts", "=", "[", "T0", ",", "T1", "]", "\n", "OutTrans", "=", "[", "OutTrans0", ",", "OutTrans1", "]", "\n", "if", "verbose", ":", "\n", "            ", "print", "(", "\"scale by direct solving per part are \\n: {}\"", ".", "format", "(", "final_scale", ")", ")", "\n", "\n", "", "", "return", "final_scale", ",", "Rs", ",", "Ts", ",", "OutTrans", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.aligning.svd_pts": [[297, 342], ["numpy.mean", "numpy.mean", "numpy.sqrt", "numpy.sqrt", "numpy.zeros", "numpy.isnan().any", "numpy.linalg.svd", "numpy.tile().transpose", "numpy.tile().transpose", "numpy.var().sum", "numpy.var().sum", "numpy.concatenate", "numpy.concatenate", "numpy.matmul", "print", "print", "print", "lib.vis_utils.plot3d_pts", "numpy.transpose", "numpy.isnan", "numpy.linalg.det", "numpy.linalg.det", "numpy.tile", "numpy.tile", "numpy.var", "numpy.var", "CenteredSource[].transpose", "CenteredTarget[].transpose", "raw_axis.transpose", "rotated_axis.transpose"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.vis_utils.plot3d_pts"], ["", "def", "svd_pts", "(", "SourceHom", ",", "TargetHom", ",", "raw_axis", "=", "None", ",", "rotated_axis", "=", "None", ",", "viz_sample", "=", "False", ",", "index", "=", "0", ")", ":", "\n", "# Copy of original paper is at: http://web.stanford.edu/class/cs273/refs/umeyama.pdf", "\n", "    ", "SourceCentroid", "=", "np", ".", "mean", "(", "SourceHom", "[", ":", "3", ",", ":", "]", ",", "axis", "=", "1", ")", "\n", "TargetCentroid", "=", "np", ".", "mean", "(", "TargetHom", "[", ":", "3", ",", ":", "]", ",", "axis", "=", "1", ")", "\n", "nPoints", "=", "SourceHom", ".", "shape", "[", "1", "]", "\n", "\n", "# pre-centering", "\n", "CenteredSource", "=", "SourceHom", "[", ":", "3", ",", ":", "]", "-", "np", ".", "tile", "(", "SourceCentroid", ",", "(", "nPoints", ",", "1", ")", ")", ".", "transpose", "(", ")", "\n", "CenteredTarget", "=", "TargetHom", "[", ":", "3", ",", ":", "]", "-", "np", ".", "tile", "(", "TargetCentroid", ",", "(", "nPoints", ",", "1", ")", ")", ".", "transpose", "(", ")", "\n", "\n", "# pre-scaling", "\n", "stdSource", "=", "np", ".", "sqrt", "(", "np", ".", "var", "(", "CenteredSource", "[", ":", "3", ",", ":", "]", ",", "axis", "=", "1", ")", ".", "sum", "(", ")", ")", "\n", "stdTarget", "=", "np", ".", "sqrt", "(", "np", ".", "var", "(", "CenteredTarget", "[", ":", "3", ",", ":", "]", ",", "axis", "=", "1", ")", ".", "sum", "(", ")", ")", "\n", "try", ":", "\n", "        ", "CenteredSource", "=", "CenteredSource", "/", "stdSource", "\n", "CenteredTarget", "=", "CenteredTarget", "/", "stdTarget", "\n", "", "except", ":", "\n", "        ", "CenteredSource", "=", "CenteredSource", "\n", "CenteredTarget", "=", "CenteredTarget", "\n", "", "origin", "=", "np", ".", "zeros", "(", "(", "1", ",", "3", ")", ")", "\n", "if", "viz_sample", ":", "\n", "        ", "if", "raw_axis", "is", "not", "None", ":", "\n", "# raw_axis[:3, 0:1].transpose(), rotated_axis[:3, 0:1].transpose(), 'axis', 'rotated axis',", "\n", "            ", "plot3d_pts", "(", "[", "[", "CenteredSource", "[", ":", "3", "]", ".", "transpose", "(", ")", ",", "CenteredTarget", "[", ":", "3", "]", ".", "transpose", "(", ")", ",", "raw_axis", ".", "transpose", "(", ")", ",", "rotated_axis", ".", "transpose", "(", ")", ",", "origin", "]", "]", ",", "[", "[", "'source'", ",", "'target'", ",", "'raw_axis_point'", ",", "'rotated_axis_point'", ",", "'origin'", "]", "]", ",", "s", "=", "100", ",", "title_name", "=", "[", "'{}th iteration points for coords descent'", ".", "format", "(", "index", ")", "]", ",", "color_channel", "=", "None", ",", "save_fig", "=", "False", ",", "sub_name", "=", "'default'", ")", "\n", "\n", "", "", "if", "raw_axis", "is", "not", "None", ":", "\n", "        ", "CenteredSource", "=", "np", ".", "concatenate", "(", "[", "CenteredSource", ",", "raw_axis", "[", ":", "3", "]", "]", ",", "axis", "=", "1", ")", "\n", "CenteredTarget", "=", "np", ".", "concatenate", "(", "[", "CenteredTarget", ",", "rotated_axis", "[", ":", "3", "]", "]", ",", "axis", "=", "1", ")", "\n", "nPoints", "=", "nPoints", "+", "raw_axis", ".", "shape", "[", "1", "]", "\n", "\n", "", "CovMatrix", "=", "np", ".", "matmul", "(", "CenteredTarget", ",", "np", ".", "transpose", "(", "CenteredSource", ")", ")", "/", "nPoints", "\n", "\n", "if", "np", ".", "isnan", "(", "CovMatrix", ")", ".", "any", "(", ")", ":", "\n", "        ", "print", "(", "'nPoints:'", ",", "nPoints", ")", "\n", "print", "(", "SourceHom", ".", "shape", ")", "\n", "print", "(", "TargetHom", ".", "shape", ")", "\n", "return", "None", ",", "None", ",", "None", "\n", "\n", "", "U", ",", "D", ",", "Vh", "=", "np", ".", "linalg", ".", "svd", "(", "CovMatrix", ",", "full_matrices", "=", "True", ")", "\n", "d", "=", "(", "np", ".", "linalg", ".", "det", "(", "U", ")", "*", "np", ".", "linalg", ".", "det", "(", "Vh", ")", ")", "<", "0.0", "\n", "if", "d", ":", "\n", "        ", "D", "[", "-", "1", "]", "=", "-", "D", "[", "-", "1", "]", "\n", "U", "[", ":", ",", "-", "1", "]", "=", "-", "U", "[", ":", ",", "-", "1", "]", "\n", "\n", "", "return", "U", ",", "D", ",", "Vh", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.aligning.compute_scale_translation": [[343, 433], ["len", "range", "numpy.concatenate", "numpy.concatenate", "numpy.var().sum", "numpy.var().sum", "numpy.sqrt", "numpy.array", "numpy.diag", "numpy.zeros", "range", "numpy.array().reshape", "range", "numpy.concatenate", "numpy.linalg.lstsq", "range", "numpy.mean", "numpy.mean", "numpy.matmul", "Translations[].reshape", "print", "numpy.identity", "numpy.tile().transpose", "numpy.tile().transpose", "numpy.var", "numpy.var", "numpy.array", "numpy.matmul", "numpy.matmul", "numpy.matmul", "numpy.tile", "numpy.tile"], "function", ["None"], ["", "def", "compute_scale_translation", "(", "SourceHoms", ",", "TargetHoms", ",", "Rotation", ",", "Z", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    for global nocs only\n    SourceHoms: [4, N] * n, n is the number of parts\n    TargetHoms: [4, N] * n, n is the number of parts\n    Rotations : [3, 3] * n\n    Z: [4, N] or [4, 1], points sitting on\n    \"\"\"", "\n", "num_parts", "=", "len", "(", "SourceHoms", ")", "\n", "num_joint_pt", "=", "5", "\n", "# # implement 1", "\n", "# offsetsTarget = TargetHoms[1][:3] - TargetHoms[0][:3]# [3,]", "\n", "# offsetsRotate = np.matmul(Rotation[0].T, Z[:3, 0:num_joint_pt]) + np.matmul(Rotation[1].T, SourceHoms[1][:3]) \\", "\n", "#      - np.matmul(Rotation[0].T, SourceHoms[0][:3]) - np.matmul(Rotation[1].T, Z[:3, 0:num_joint_pt])  # [3,]", "\n", "# if normalize together, we might be able to find better scale", "\n", "\n", "# scale = np.sqrt(offsetsTarget**2/offsetsRotate**2).mean()", "\n", "# scale = np.sqrt(np.abs(offsetsTarget).mean()/np.abs(offsetsRotate).mean())", "\n", "\n", "# # implement 2", "\n", "# varP = np.var(SourceHom[:3, :], axis=1).sum()", "\n", "# varT = np.var(TargetHom[:3, :], axis=1).sum()", "\n", "# ScaleFact = np.sqrt(varT/varP)", "\n", "# Scales = np.array([ScaleFact, ScaleFact, ScaleFact])", "\n", "# ScaleMatrix = np.diag(Scales)", "\n", "# final_scale = scale", "\n", "# Scales      = np.array([final_scale, final_scale, final_scale])", "\n", "# ScaleMatrix = np.diag(Scales)", "\n", "# for i in range(num_parts):", "\n", "#     Translation = TargetHoms[i][:3] - final_scale * np.matmul(Rotation[i].T,  SourceHoms[i][:3])", "\n", "#     Ts[i] = Translation.mean(axis=1)", "\n", "#     OutTransform = np.identity(4)", "\n", "#     OutTransform[:3, :3] = ScaleMatrix @ Rotation[i].T", "\n", "#     OutTransform[:3, 3] = Ts[i]", "\n", "#     OutTrans[i]  = OutTransform", "\n", "# implementation 3", "\n", "# sR x + T = y", "\n", "\n", "centered_Source", "=", "[", "None", "]", "*", "num_parts", "\n", "centered_Target", "=", "[", "None", "]", "*", "num_parts", "\n", "OutTrans", "=", "[", "None", "]", "*", "num_parts", "\n", "\n", "for", "i", "in", "range", "(", "num_parts", ")", ":", "\n", "        ", "SourceCentroid", "=", "np", ".", "mean", "(", "SourceHoms", "[", "i", "]", "[", ":", "3", ",", ":", "]", ",", "axis", "=", "1", ")", "\n", "TargetCentroid", "=", "np", ".", "mean", "(", "TargetHoms", "[", "i", "]", "[", ":", "3", ",", ":", "]", ",", "axis", "=", "1", ")", "\n", "nPoints", "=", "SourceHoms", "[", "i", "]", ".", "shape", "[", "1", "]", "\n", "\n", "# pre-centering", "\n", "CenteredSource", "=", "SourceHoms", "[", "i", "]", "[", ":", "3", ",", ":", "]", "-", "np", ".", "tile", "(", "SourceCentroid", ",", "(", "nPoints", ",", "1", ")", ")", ".", "transpose", "(", ")", "\n", "CenteredTarget", "=", "TargetHoms", "[", "i", "]", "[", ":", "3", ",", ":", "]", "-", "np", ".", "tile", "(", "TargetCentroid", ",", "(", "nPoints", ",", "1", ")", ")", ".", "transpose", "(", ")", "\n", "\n", "centered_Source", "[", "i", "]", "=", "np", ".", "matmul", "(", "Rotation", "[", "0", "]", ".", "T", ",", "CenteredSource", "[", "i", "]", "[", ":", "3", "]", ")", "# [4, N]", "\n", "centered_Target", "[", "i", "]", "=", "CenteredTarget", "\n", "\n", "", "SourceHoms_concat", "=", "np", ".", "concatenate", "(", "centered_Source", ",", "axis", "=", "1", ")", "\n", "TargetHoms_concat", "=", "np", ".", "concatenate", "(", "centered_Target", ",", "axis", "=", "1", ")", "\n", "\n", "varP", "=", "np", ".", "var", "(", "SourceHoms_concat", "[", ":", "3", ",", ":", "]", ",", "axis", "=", "1", ")", ".", "sum", "(", ")", "\n", "varT", "=", "np", ".", "var", "(", "TargetHoms_concat", "[", ":", "3", ",", ":", "]", ",", "axis", "=", "1", ")", ".", "sum", "(", ")", "\n", "ScaleFact", "=", "np", ".", "sqrt", "(", "varT", "/", "varP", ")", "# even it is aligned very well, we still believe only the normal is reliable", "\n", "Scales", "=", "np", ".", "array", "(", "[", "ScaleFact", ",", "ScaleFact", ",", "ScaleFact", "]", ")", "\n", "ScaleMatrix", "=", "np", ".", "diag", "(", "Scales", ")", "\n", "\n", "# assume we only have two parts and one joint", "\n", "A", "=", "np", ".", "zeros", "(", "(", "SourceHoms_concat", ".", "shape", "[", "1", "]", "+", "num_joint_pt", ",", "num_parts", ")", ")", "# [N, 3]", "\n", "Translations", "=", "[", "None", "]", "*", "num_parts", "\n", "Z_offsets", "=", "[", "None", "]", "*", "(", "num_parts", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "num_parts", ")", ":", "\n", "        ", "A", "[", "SourceHoms", "[", "i", "]", ".", "shape", "[", "1", "]", ",", "i", "]", "=", "1", "\n", "Translations", "[", "i", "]", "=", "TargetHoms", "[", "i", "]", "[", ":", "3", "]", "-", "final_scale", "*", "np", ".", "matmul", "(", "Rotation", "[", "i", "]", ".", "T", ",", "SourceHoms", "[", "i", "]", "[", ":", "3", "]", ")", "\n", "Translations", "[", "i", "]", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "", "A", "[", "-", "(", "num_joint_pt", ")", ":", ",", ":", "]", "=", "np", ".", "array", "(", "[", "-", "1", ",", "1", "]", ")", ".", "reshape", "(", "1", ",", "-", "1", ")", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "'A is : \\n'", ",", "A", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "num_parts", "-", "1", ")", ":", "\n", "        ", "Z_offsets", "[", "i", "]", "=", "ScaleFact", "*", "np", ".", "matmul", "(", "Rotation", "[", "i", "]", ".", "T", ",", "Z", "[", ":", "3", ",", ":", "num_joint_pt", "]", ")", "-", "ScaleFact", "*", "np", ".", "matmul", "(", "Rotation", "[", "i", "+", "1", "]", ".", "T", ",", "Z", "[", ":", "3", ",", ":", "num_joint_pt", "]", ")", "\n", "\n", "", "B", "=", "np", ".", "concatenate", "(", "Translations", "+", "Z_offsets", ",", "axis", "=", "0", ")", "# [N, 3]", "\n", "\n", "# solve T1, ..., Tn with least-square, Ax = B, A: [N*2], B[N, 3]", "\n", "Ts", "=", "np", ".", "linalg", ".", "lstsq", "(", "A", ",", "B", ")", "# return 2, 3", "\n", "for", "i", "in", "range", "(", "num_parts", ")", ":", "\n", "        ", "OutTransform", "=", "np", ".", "identity", "(", "4", ")", "\n", "OutTransform", "[", ":", "3", ",", ":", "3", "]", "=", "ScaleMatrix", "@", "Rotation", "[", "i", "]", ".", "T", "\n", "OutTransform", "[", ":", "3", ",", "3", "]", "=", "Ts", "[", "i", "]", "\n", "OutTrans", "[", "i", "]", "=", "OutTransform", "\n", "", "final_scale", "=", "[", "ScaleFact", ",", "ScaleFact", "]", "# for both parts", "\n", "\n", "return", "final_scale", ",", "Ts", ",", "OutTrans", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.aligning.estimateRestrictedAffineTransform": [[434, 484], ["numpy.transpose", "numpy.transpose", "cv2.estimateAffine3D", "numpy.linalg.svd", "list", "numpy.identity", "numpy.identity", "numpy.hstack", "numpy.hstack", "print", "itertools.permutations", "numpy.asarray", "numpy.identity", "aligning.evaluateModelNonHom", "print", "print", "print", "print", "print", "numpy.diag", "print", "print", "print", "numpy.ones", "numpy.ones", "aligning.evaluateModelNoThresh", "numpy.diag"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.aligning.evaluateModelNonHom", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.aligning.evaluateModelNoThresh"], ["", "def", "estimateRestrictedAffineTransform", "(", "source", ":", "np", ".", "array", ",", "target", ":", "np", ".", "array", ",", "verbose", "=", "False", ")", ":", "\n", "    ", "SourceHom", "=", "np", ".", "transpose", "(", "np", ".", "hstack", "(", "[", "source", ",", "np", ".", "ones", "(", "[", "source", ".", "shape", "[", "0", "]", ",", "1", "]", ")", "]", ")", ")", "\n", "TargetHom", "=", "np", ".", "transpose", "(", "np", ".", "hstack", "(", "[", "target", ",", "np", ".", "ones", "(", "[", "source", ".", "shape", "[", "0", "]", ",", "1", "]", ")", "]", ")", ")", "\n", "\n", "RetVal", ",", "AffineTrans", ",", "Inliers", "=", "cv2", ".", "estimateAffine3D", "(", "source", ",", "target", ")", "\n", "# We assume no shear in the affine matrix and decompose into rotation, non-uniform scales, and translation", "\n", "Translation", "=", "AffineTrans", "[", ":", "3", ",", "3", "]", "\n", "NUScaleRotMat", "=", "AffineTrans", "[", ":", "3", ",", ":", "3", "]", "\n", "# NUScaleRotMat should be the matrix SR, where S is a diagonal scale matrix and R is the rotation matrix (equivalently RS)", "\n", "# Let us do the SVD of NUScaleRotMat to obtain R1*S*R2 and then R = R1 * R2", "\n", "R1", ",", "ScalesSorted", ",", "R2", "=", "np", ".", "linalg", ".", "svd", "(", "NUScaleRotMat", ",", "full_matrices", "=", "True", ")", "\n", "\n", "if", "verbose", ":", "\n", "        ", "print", "(", "'-----------------------------------------------------------------------'", ")", "\n", "# Now, the scales are sort in ascending order which is painful because we don't know the x, y, z scales", "\n", "# Let's figure that out by evaluating all 6 possible permutations of the scales", "\n", "", "ScalePermutations", "=", "list", "(", "itertools", ".", "permutations", "(", "ScalesSorted", ")", ")", "\n", "MinResidual", "=", "1e8", "\n", "Scales", "=", "ScalePermutations", "[", "0", "]", "\n", "OutTransform", "=", "np", ".", "identity", "(", "4", ")", "\n", "Rotation", "=", "np", ".", "identity", "(", "3", ")", "\n", "for", "ScaleCand", "in", "ScalePermutations", ":", "\n", "        ", "CurrScale", "=", "np", ".", "asarray", "(", "ScaleCand", ")", "\n", "CurrTransform", "=", "np", ".", "identity", "(", "4", ")", "\n", "CurrRotation", "=", "(", "np", ".", "diag", "(", "1", "/", "CurrScale", ")", "@", "NUScaleRotMat", ")", ".", "transpose", "(", ")", "\n", "CurrTransform", "[", ":", "3", ",", ":", "3", "]", "=", "np", ".", "diag", "(", "CurrScale", ")", "@", "CurrRotation", "\n", "CurrTransform", "[", ":", "3", ",", "3", "]", "=", "Translation", "\n", "# Residual = evaluateModel(CurrTransform, SourceHom, TargetHom)", "\n", "Residual", "=", "evaluateModelNonHom", "(", "source", ",", "target", ",", "CurrScale", ",", "CurrRotation", ",", "Translation", ")", "\n", "if", "verbose", ":", "\n", "# print('CurrTransform:\\n', CurrTransform)", "\n", "            ", "print", "(", "'CurrScale:'", ",", "CurrScale", ")", "\n", "print", "(", "'Residual:'", ",", "Residual", ")", "\n", "print", "(", "'AltRes:'", ",", "evaluateModelNoThresh", "(", "CurrTransform", ",", "SourceHom", ",", "TargetHom", ")", ")", "\n", "", "if", "Residual", "<", "MinResidual", ":", "\n", "            ", "MinResidual", "=", "Residual", "\n", "Scales", "=", "CurrScale", "\n", "Rotation", "=", "CurrRotation", "\n", "OutTransform", "=", "CurrTransform", "\n", "\n", "", "", "if", "verbose", ":", "\n", "        ", "print", "(", "'Best Scale:'", ",", "Scales", ")", "\n", "\n", "", "if", "verbose", ":", "\n", "        ", "print", "(", "'Affine Scales:'", ",", "Scales", ")", "\n", "print", "(", "'Affine Translation:'", ",", "Translation", ")", "\n", "print", "(", "'Affine Rotation:\\n'", ",", "Rotation", ")", "\n", "print", "(", "'-----------------------------------------------------------------------'", ")", "\n", "\n", "", "return", "Scales", ",", "Rotation", ",", "Translation", ",", "OutTransform", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.aligning.getRANSACInliers": [[485, 508], ["numpy.arange", "range", "numpy.random.randint", "aligning.estimateSimilarityUmeyama", "aligning.evaluateModel"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.aligning.estimateSimilarityUmeyama", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.aligning.evaluateModel"], ["", "def", "getRANSACInliers", "(", "SourceHom", ",", "TargetHom", ",", "rt_pre", "=", "None", ",", "MaxIterations", "=", "100", ",", "PassThreshold", "=", "200", ",", "StopThreshold", "=", "1", ")", ":", "\n", "    ", "BestResidual", "=", "1e10", "\n", "BestInlierRatio", "=", "0", "\n", "BestInlierIdx", "=", "np", ".", "arange", "(", "SourceHom", ".", "shape", "[", "1", "]", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "MaxIterations", ")", ":", "\n", "        ", "RandIdx", "=", "np", ".", "random", ".", "randint", "(", "SourceHom", ".", "shape", "[", "1", "]", ",", "size", "=", "5", ")", "\n", "Scales", ",", "Rotation", ",", "Translation", ",", "OutTransform", "=", "estimateSimilarityUmeyama", "(", "SourceHom", "[", ":", ",", "RandIdx", "]", ",", "TargetHom", "[", ":", ",", "RandIdx", "]", ",", "rt_pre", "=", "rt_pre", ")", "\n", "Residual", ",", "InlierRatio", ",", "InlierIdx", "=", "evaluateModel", "(", "OutTransform", ",", "SourceHom", ",", "TargetHom", ",", "PassThreshold", ")", "\n", "# Residual, InlierRatio, InlierIdx = evaluateModelRotation(Rotation.T, SourceHom, TargetHom, 0.05 * PassThreshold)", "\n", "# if Residual < BestResidual:", "\n", "if", "InlierRatio", ">", "BestInlierRatio", ":", "\n", "            ", "BestResidual", "=", "Residual", "\n", "BestInlierRatio", "=", "InlierRatio", "\n", "BestInlierIdx", "=", "InlierIdx", "\n", "", "if", "BestResidual", "<", "StopThreshold", ":", "\n", "            ", "break", "\n", "# print('Iteration: ', i)", "\n", "# print('Residual: ', Residual)", "\n", "# print('Inlier ratio: ', InlierRatio)", "\n", "", "", "inliers", "=", "[", "SourceHom", "[", ":", ",", "BestInlierIdx", "]", ",", "TargetHom", "[", ":", ",", "BestInlierIdx", "]", ",", "BestInlierRatio", "]", "\n", "transform_results", "=", "[", "Scales", ",", "Rotation", ",", "Translation", ",", "OutTransform", "]", "\n", "\n", "return", "inliers", ",", "transform_results", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.aligning.evaluateModelRotation": [[509, 539], ["numpy.mean", "numpy.mean", "numpy.sqrt", "numpy.sqrt", "numpy.zeros", "numpy.matmul", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.where", "numpy.count_nonzero", "numpy.tile().transpose", "numpy.tile().transpose", "numpy.var().sum", "numpy.var().sum", "lib.vis_utils.plot3d_pts", "lib.vis_utils.plot3d_pts", "numpy.matmul", "lib.vis_utils.plot3d_pts", "numpy.tile", "numpy.tile", "numpy.var", "numpy.var", "CenteredSource[].transpose", "CenteredTarget[].transpose", "RotatedSource[].transpose", "CenteredTarget[].transpose", "RotatedSource[].transpose", "CenteredTarget[].transpose"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.vis_utils.plot3d_pts", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.vis_utils.plot3d_pts", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.vis_utils.plot3d_pts"], ["", "def", "evaluateModelRotation", "(", "Rotation", ",", "SourceHom", ",", "TargetHom", ",", "PassThreshold", ",", "rt_ref", "=", "None", ",", "viz_normal", "=", "False", ")", ":", "\n", "    ", "SourceCentroid", "=", "np", ".", "mean", "(", "SourceHom", "[", ":", "3", ",", ":", "]", ",", "axis", "=", "1", ")", "\n", "TargetCentroid", "=", "np", ".", "mean", "(", "TargetHom", "[", ":", "3", ",", ":", "]", ",", "axis", "=", "1", ")", "\n", "nPoints", "=", "SourceHom", ".", "shape", "[", "1", "]", "\n", "\n", "CenteredSource", "=", "SourceHom", "[", ":", "3", ",", ":", "]", "-", "np", ".", "tile", "(", "SourceCentroid", ",", "(", "nPoints", ",", "1", ")", ")", ".", "transpose", "(", ")", "\n", "CenteredTarget", "=", "TargetHom", "[", ":", "3", ",", ":", "]", "-", "np", ".", "tile", "(", "TargetCentroid", ",", "(", "nPoints", ",", "1", ")", ")", ".", "transpose", "(", ")", "\n", "\n", "stdSource", "=", "np", ".", "sqrt", "(", "np", ".", "var", "(", "CenteredSource", "[", ":", "3", ",", ":", "]", ",", "axis", "=", "1", ")", ".", "sum", "(", ")", ")", "\n", "stdTarget", "=", "np", ".", "sqrt", "(", "np", ".", "var", "(", "CenteredTarget", "[", ":", "3", ",", ":", "]", ",", "axis", "=", "1", ")", ".", "sum", "(", ")", ")", "\n", "\n", "CenteredSource", "=", "CenteredSource", "/", "stdSource", "\n", "CenteredTarget", "=", "CenteredTarget", "/", "stdTarget", "\n", "origin", "=", "np", ".", "zeros", "(", "(", "1", ",", "3", ")", ")", "\n", "if", "viz_normal", ":", "\n", "        ", "if", "rt_ref", "is", "not", "None", ":", "\n", "            ", "RotatedSource", "=", "np", ".", "matmul", "(", "rt_ref", "[", ":", "3", ",", ":", "3", "]", ",", "CenteredSource", ")", "\n", "plot3d_pts", "(", "[", "[", "RotatedSource", "[", ":", "3", "]", ".", "transpose", "(", ")", ",", "CenteredTarget", "[", ":", "3", "]", ".", "transpose", "(", ")", ",", "origin", "]", "]", ",", "[", "[", "'GT rotated source'", ",", "'target'", ",", "'origin'", "]", "]", ",", "s", "=", "100", ",", "title_name", "=", "[", "'normalized source and target pts'", "]", ",", "color_channel", "=", "None", ",", "save_fig", "=", "False", ",", "sub_name", "=", "'default'", ")", "\n", "", "plot3d_pts", "(", "[", "[", "CenteredSource", "[", ":", "3", "]", ".", "transpose", "(", ")", ",", "CenteredTarget", "[", ":", "3", "]", ".", "transpose", "(", ")", ",", "origin", "]", "]", ",", "[", "[", "'source'", ",", "'target'", ",", "'origin'", "]", "]", ",", "s", "=", "100", ",", "title_name", "=", "[", "'normalized source and target pts'", "]", ",", "color_channel", "=", "None", ",", "save_fig", "=", "False", ",", "sub_name", "=", "'default'", ")", "\n", "", "RotatedSource", "=", "np", ".", "matmul", "(", "Rotation", ",", "CenteredSource", ")", "\n", "if", "viz_normal", ":", "\n", "        ", "plot3d_pts", "(", "[", "[", "RotatedSource", "[", ":", "3", "]", ".", "transpose", "(", ")", ",", "CenteredTarget", "[", ":", "3", "]", ".", "transpose", "(", ")", ",", "origin", "]", "]", ",", "[", "[", "'Pred rotated source'", ",", "'target'", ",", "'origin'", "]", "]", ",", "s", "=", "100", ",", "title_name", "=", "[", "'normalized source and target pts'", "]", ",", "color_channel", "=", "None", ",", "save_fig", "=", "False", ",", "sub_name", "=", "'default'", ")", "\n", "", "Diff", "=", "CenteredTarget", "-", "RotatedSource", "\n", "ResidualVec", "=", "np", ".", "linalg", ".", "norm", "(", "Diff", "[", ":", "3", ",", ":", "]", ",", "axis", "=", "0", ")", "\n", "Residual", "=", "np", ".", "linalg", ".", "norm", "(", "ResidualVec", ")", "\n", "InlierIdx", "=", "np", ".", "where", "(", "ResidualVec", "<", "PassThreshold", ")", "\n", "nInliers", "=", "np", ".", "count_nonzero", "(", "InlierIdx", ")", "\n", "# Residual = np.linalg.norm(ResidualVec[InlierIdx[0]]) # todo", "\n", "InlierRatio", "=", "nInliers", "/", "SourceHom", ".", "shape", "[", "1", "]", "\n", "return", "Residual", ",", "InlierRatio", ",", "InlierIdx", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.aligning.evaluateModel": [[540, 548], ["numpy.linalg.norm", "numpy.linalg.norm", "numpy.where", "numpy.count_nonzero", "numpy.matmul"], "function", ["None"], ["", "def", "evaluateModel", "(", "OutTransform", ",", "SourceHom", ",", "TargetHom", ",", "PassThreshold", ")", ":", "\n", "    ", "Diff", "=", "TargetHom", "-", "np", ".", "matmul", "(", "OutTransform", ",", "SourceHom", ")", "\n", "ResidualVec", "=", "np", ".", "linalg", ".", "norm", "(", "Diff", "[", ":", "3", ",", ":", "]", ",", "axis", "=", "0", ")", "\n", "Residual", "=", "np", ".", "linalg", ".", "norm", "(", "ResidualVec", ")", "\n", "InlierIdx", "=", "np", ".", "where", "(", "ResidualVec", "<", "PassThreshold", ")", "\n", "nInliers", "=", "np", ".", "count_nonzero", "(", "InlierIdx", ")", "\n", "InlierRatio", "=", "nInliers", "/", "SourceHom", ".", "shape", "[", "1", "]", "\n", "return", "Residual", ",", "InlierRatio", ",", "InlierIdx", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.aligning.evaluateModelNoThresh": [[549, 554], ["numpy.linalg.norm", "numpy.linalg.norm", "numpy.matmul"], "function", ["None"], ["", "def", "evaluateModelNoThresh", "(", "OutTransform", ",", "SourceHom", ",", "TargetHom", ")", ":", "\n", "    ", "Diff", "=", "TargetHom", "-", "np", ".", "matmul", "(", "OutTransform", ",", "SourceHom", ")", "\n", "ResidualVec", "=", "np", ".", "linalg", ".", "norm", "(", "Diff", "[", ":", "3", ",", ":", "]", ",", "axis", "=", "0", ")", "\n", "Residual", "=", "np", ".", "linalg", ".", "norm", "(", "ResidualVec", ")", "\n", "return", "Residual", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.aligning.evaluateModelNonHom": [[555, 562], ["numpy.tile", "numpy.linalg.norm", "numpy.linalg.norm", "np.tile.transpose", "source.transpose", "numpy.diag"], "function", ["None"], ["", "def", "evaluateModelNonHom", "(", "source", ",", "target", ",", "Scales", ",", "Rotation", ",", "Translation", ")", ":", "\n", "    ", "RepTrans", "=", "np", ".", "tile", "(", "Translation", ",", "(", "source", ".", "shape", "[", "0", "]", ",", "1", ")", ")", "\n", "TransSource", "=", "(", "np", ".", "diag", "(", "Scales", ")", "@", "Rotation", "@", "source", ".", "transpose", "(", ")", "+", "RepTrans", ".", "transpose", "(", ")", ")", ".", "transpose", "(", ")", "\n", "Diff", "=", "target", "-", "TransSource", "\n", "ResidualVec", "=", "np", ".", "linalg", ".", "norm", "(", "Diff", ",", "axis", "=", "0", ")", "\n", "Residual", "=", "np", ".", "linalg", ".", "norm", "(", "ResidualVec", ")", "\n", "return", "Residual", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.aligning.testNonUniformScale": [[563, 578], ["numpy.matmul", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.linalg.norm", "numpy.vstack", "print", "numpy.array", "numpy.linalg.pinv", "numpy.linalg.norm"], "function", ["None"], ["", "def", "testNonUniformScale", "(", "SourceHom", ",", "TargetHom", ")", ":", "\n", "    ", "OutTransform", "=", "np", ".", "matmul", "(", "TargetHom", ",", "np", ".", "linalg", ".", "pinv", "(", "SourceHom", ")", ")", "\n", "ScaledRotation", "=", "OutTransform", "[", ":", "3", ",", ":", "3", "]", "\n", "Translation", "=", "OutTransform", "[", ":", "3", ",", "3", "]", "\n", "Sx", "=", "np", ".", "linalg", ".", "norm", "(", "ScaledRotation", "[", "0", ",", ":", "]", ")", "\n", "Sy", "=", "np", ".", "linalg", ".", "norm", "(", "ScaledRotation", "[", "1", ",", ":", "]", ")", "\n", "Sz", "=", "np", ".", "linalg", ".", "norm", "(", "ScaledRotation", "[", "2", ",", ":", "]", ")", "\n", "Rotation", "=", "np", ".", "vstack", "(", "[", "ScaledRotation", "[", "0", ",", ":", "]", "/", "Sx", ",", "ScaledRotation", "[", "1", ",", ":", "]", "/", "Sy", ",", "ScaledRotation", "[", "2", ",", ":", "]", "/", "Sz", "]", ")", "\n", "print", "(", "'Rotation matrix norm:'", ",", "np", ".", "linalg", ".", "norm", "(", "Rotation", ")", ")", "\n", "Scales", "=", "np", ".", "array", "(", "[", "Sx", ",", "Sy", ",", "Sz", "]", ")", "\n", "\n", "# # Check", "\n", "# Diff = TargetHom - np.matmul(OutTransform, SourceHom)", "\n", "# Residual = np.linalg.norm(Diff[:3, :], axis=0)", "\n", "return", "Scales", ",", "Rotation", ",", "Translation", ",", "OutTransform", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.aligning.estimateSimilarityUmeyama": [[580, 623], ["numpy.mean", "numpy.mean", "numpy.isnan().any", "numpy.linalg.svd", "numpy.var().sum", "numpy.array", "numpy.diag", "numpy.identity", "numpy.tile().transpose", "numpy.tile().transpose", "numpy.matmul", "print", "print", "print", "RuntimeError", "numpy.sum", "TargetHom[].mean", "SourceHom[].mean().dot", "numpy.transpose", "numpy.isnan", "numpy.linalg.det", "numpy.linalg.det", "numpy.matmul", "numpy.var", "numpy.tile", "numpy.tile", "SourceHom[].mean"], "function", ["None"], ["", "def", "estimateSimilarityUmeyama", "(", "SourceHom", ",", "TargetHom", ",", "rt_pre", "=", "None", ")", ":", "\n", "# Copy of original paper is at: http://web.stanford.edu/class/cs273/refs/umeyama.pdf", "\n", "    ", "SourceCentroid", "=", "np", ".", "mean", "(", "SourceHom", "[", ":", "3", ",", ":", "]", ",", "axis", "=", "1", ")", "\n", "TargetCentroid", "=", "np", ".", "mean", "(", "TargetHom", "[", ":", "3", ",", ":", "]", ",", "axis", "=", "1", ")", "\n", "nPoints", "=", "SourceHom", ".", "shape", "[", "1", "]", "\n", "\n", "CenteredSource", "=", "SourceHom", "[", ":", "3", ",", ":", "]", "-", "np", ".", "tile", "(", "SourceCentroid", ",", "(", "nPoints", ",", "1", ")", ")", ".", "transpose", "(", ")", "\n", "CenteredTarget", "=", "TargetHom", "[", ":", "3", ",", ":", "]", "-", "np", ".", "tile", "(", "TargetCentroid", ",", "(", "nPoints", ",", "1", ")", ")", ".", "transpose", "(", ")", "\n", "\n", "CovMatrix", "=", "np", ".", "matmul", "(", "CenteredTarget", ",", "np", ".", "transpose", "(", "CenteredSource", ")", ")", "/", "nPoints", "\n", "\n", "if", "np", ".", "isnan", "(", "CovMatrix", ")", ".", "any", "(", ")", ":", "\n", "        ", "print", "(", "'nPoints:'", ",", "nPoints", ")", "\n", "print", "(", "SourceHom", ".", "shape", ")", "\n", "print", "(", "TargetHom", ".", "shape", ")", "\n", "raise", "RuntimeError", "(", "'There are NANs in the input.'", ")", "\n", "\n", "", "U", ",", "D", ",", "Vh", "=", "np", ".", "linalg", ".", "svd", "(", "CovMatrix", ",", "full_matrices", "=", "True", ")", "\n", "d", "=", "(", "np", ".", "linalg", ".", "det", "(", "U", ")", "*", "np", ".", "linalg", ".", "det", "(", "Vh", ")", ")", "<", "0.0", "\n", "if", "d", ":", "\n", "        ", "D", "[", "-", "1", "]", "=", "-", "D", "[", "-", "1", "]", "\n", "U", "[", ":", ",", "-", "1", "]", "=", "-", "U", "[", ":", ",", "-", "1", "]", "\n", "", "if", "rt_pre", "is", "not", "None", ":", "\n", "# print('using external rotation')", "\n", "        ", "Rotation", "=", "rt_pre", "[", ":", "3", ",", ":", "3", "]", ".", "T", "\n", "", "else", ":", "\n", "        ", "Rotation", "=", "np", ".", "matmul", "(", "U", ",", "Vh", ")", ".", "T", "# Transpose is the one that works", "\n", "\n", "", "varP", "=", "np", ".", "var", "(", "SourceHom", "[", ":", "3", ",", ":", "]", ",", "axis", "=", "1", ")", ".", "sum", "(", ")", "\n", "ScaleFact", "=", "1", "/", "varP", "*", "np", ".", "sum", "(", "D", ")", "# scale factor", "\n", "Scales", "=", "np", ".", "array", "(", "[", "ScaleFact", ",", "ScaleFact", ",", "ScaleFact", "]", ")", "\n", "ScaleMatrix", "=", "np", ".", "diag", "(", "Scales", ")", "\n", "\n", "Translation", "=", "TargetHom", "[", ":", "3", ",", ":", "]", ".", "mean", "(", "axis", "=", "1", ")", "-", "SourceHom", "[", ":", "3", ",", ":", "]", ".", "mean", "(", "axis", "=", "1", ")", ".", "dot", "(", "ScaleFact", "*", "Rotation", ")", "\n", "\n", "OutTransform", "=", "np", ".", "identity", "(", "4", ")", "\n", "OutTransform", "[", ":", "3", ",", ":", "3", "]", "=", "ScaleMatrix", "@", "Rotation", ".", "T", "\n", "OutTransform", "[", ":", "3", ",", "3", "]", "=", "Translation", "\n", "\n", "# # Check", "\n", "# Diff = TargetHom - np.matmul(OutTransform, SourceHom)", "\n", "# Residual = np.linalg.norm(Diff[:3, :], axis=0)", "\n", "return", "Scales", ",", "Rotation", ",", "Translation", ",", "OutTransform", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.aligning.get_joint_features": [[624, 640], ["joints[].reshape", "joints[].reshape", "numpy.random.randint", "numpy.transpose", "numpy.array().reshape", "len", "numpy.hstack", "numpy.array", "numpy.linspace().reshape", "numpy.ones", "numpy.linspace"], "function", ["None"], ["", "def", "get_joint_features", "(", "joints", ")", ":", "\n", "# get joint pts & axis", "\n", "    ", "lower_bound", ",", "upper_bound", "=", "-", "0.5", ",", "0.5", "\n", "position", "=", "joints", "[", "0", "]", ".", "reshape", "(", "1", ",", "3", ")", "\n", "joint_axis", "=", "joints", "[", "1", "]", ".", "reshape", "(", "1", ",", "3", ")", "\n", "if", "len", "(", "joints", ")", ">", "2", ":", "\n", "        ", "joint_pts", "=", "joints", "[", "2", "]", "\n", "", "else", ":", "\n", "# joint_pts = position.reshape(1, 3)", "\n", "        ", "joint_pts", "=", "position", "+", "joint_axis", "*", "np", ".", "linspace", "(", "lower_bound", ",", "upper_bound", ",", "num", "=", "20", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n", "", "rand_idx", "=", "np", ".", "random", ".", "randint", "(", "joint_pts", ".", "shape", "[", "0", "]", ",", "size", "=", "5", ")", "\n", "joint_pts", "=", "np", ".", "transpose", "(", "np", ".", "hstack", "(", "[", "joint_pts", "[", "rand_idx", ",", ":", "3", "]", ",", "np", ".", "ones", "(", "[", "joint_pts", "[", "rand_idx", ",", ":", "3", "]", ".", "shape", "[", "0", "]", ",", "1", "]", ")", "]", ")", ")", "\n", "joint_axis", "=", "np", ".", "array", "(", "[", "joint_axis", "[", "0", ",", "0", "]", ",", "joint_axis", "[", "0", ",", "1", "]", ",", "joint_axis", "[", "0", ",", "2", "]", ",", "1", "]", ")", ".", "reshape", "(", "4", ",", "1", ")", "\n", "\n", "return", "position", ",", "joint_axis", ",", "joint_pts", "# [1, 3], [4, 1], [4, 20]", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.aligning.est_ST": [[641, 655], ["numpy.var().sum", "numpy.var().sum", "numpy.sqrt", "numpy.array", "numpy.diag", "numpy.identity", "TargetHom[].mean", "SourceHom[].mean().dot", "numpy.var", "numpy.var", "SourceHom[].mean"], "function", ["None"], ["", "def", "est_ST", "(", "SourceHom", ",", "TargetHom", ",", "D", ",", "Rotation", ")", ":", "\n", "    ", "varP", "=", "np", ".", "var", "(", "SourceHom", "[", ":", "3", ",", ":", "]", ",", "axis", "=", "1", ")", ".", "sum", "(", ")", "\n", "varT", "=", "np", ".", "var", "(", "TargetHom", "[", ":", "3", ",", ":", "]", ",", "axis", "=", "1", ")", ".", "sum", "(", ")", "\n", "ScaleFact", "=", "np", ".", "sqrt", "(", "varT", "/", "varP", ")", "\n", "Scales", "=", "np", ".", "array", "(", "[", "ScaleFact", ",", "ScaleFact", ",", "ScaleFact", "]", ")", "\n", "ScaleMatrix", "=", "np", ".", "diag", "(", "Scales", ")", "\n", "\n", "Translation", "=", "TargetHom", "[", ":", "3", ",", ":", "]", ".", "mean", "(", "axis", "=", "1", ")", "-", "SourceHom", "[", ":", "3", ",", ":", "]", ".", "mean", "(", "axis", "=", "1", ")", ".", "dot", "(", "ScaleFact", "*", "Rotation", ")", "\n", "\n", "OutTransform", "=", "np", ".", "identity", "(", "4", ")", "\n", "OutTransform", "[", ":", "3", ",", ":", "3", "]", "=", "ScaleMatrix", "@", "Rotation", ".", "T", "\n", "OutTransform", "[", ":", "3", ",", "3", "]", "=", "Translation", "\n", "\n", "return", "Scales", ",", "Translation", ",", "OutTransform", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.pointnet_plusplus.architectures.build_pointnet2_seg": [[10, 55], ["tensorflow.variable_scope", "tensorflow.slice", "tensorflow.slice", "pointnet_util.pointnet_sa_module", "pointnet_util.pointnet_sa_module", "pointnet_util.pointnet_sa_module", "pointnet_util.pointnet_fp_module", "pointnet_util.pointnet_fp_module", "pointnet_util.pointnet_fp_module", "tf_util.conv1d", "tf_util.dropout", "enumerate", "tensorflow.concat", "tf_util.conv1d", "results.append"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.pointnet_util.pointnet_sa_module", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.pointnet_util.pointnet_sa_module", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.pointnet_util.pointnet_sa_module", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.pointnet_util.pointnet_fp_module", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.pointnet_util.pointnet_fp_module", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.pointnet_util.pointnet_fp_module", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.conv1d", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.dropout", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.conv1d"], ["def", "build_pointnet2_seg", "(", "scope", ",", "X", ",", "out_dims", ",", "is_training", ",", "bn_decay", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "        ", "l0_xyz", "=", "tf", ".", "slice", "(", "X", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "3", "]", ")", "\n", "l0_points", "=", "tf", ".", "slice", "(", "X", ",", "[", "0", ",", "0", ",", "3", "]", ",", "[", "-", "1", ",", "-", "1", ",", "0", "]", ")", "\n", "\n", "# Set Abstraction layers", "\n", "l1_xyz", ",", "l1_points", ",", "l1_indices", "=", "pointnet_sa_module", "(", "l0_xyz", ",", "l0_points", ",", "\n", "npoint", "=", "512", ",", "radius", "=", "0.2", ",", "nsample", "=", "64", ",", "mlp", "=", "[", "64", ",", "64", ",", "128", "]", ",", "\n", "mlp2", "=", "None", ",", "group_all", "=", "False", ",", "is_training", "=", "is_training", ",", "\n", "bn_decay", "=", "bn_decay", ",", "scope", "=", "'layer1'", ")", "\n", "\n", "l2_xyz", ",", "l2_points", ",", "l2_indices", "=", "pointnet_sa_module", "(", "l1_xyz", ",", "l1_points", ",", "\n", "npoint", "=", "128", ",", "radius", "=", "0.4", ",", "nsample", "=", "64", ",", "mlp", "=", "[", "128", ",", "128", ",", "256", "]", ",", "\n", "mlp2", "=", "None", ",", "group_all", "=", "False", ",", "is_training", "=", "is_training", ",", "\n", "bn_decay", "=", "bn_decay", ",", "scope", "=", "'layer2'", ")", "\n", "\n", "l3_xyz", ",", "l3_points", ",", "l3_indices", "=", "pointnet_sa_module", "(", "l2_xyz", ",", "l2_points", ",", "\n", "npoint", "=", "None", ",", "radius", "=", "None", ",", "nsample", "=", "None", ",", "mlp", "=", "[", "256", ",", "512", ",", "1024", "]", ",", "\n", "mlp2", "=", "None", ",", "group_all", "=", "True", ",", "is_training", "=", "is_training", ",", "\n", "bn_decay", "=", "bn_decay", ",", "scope", "=", "'layer3'", ")", "\n", "\n", "# Feature Propagation layers", "\n", "l2_points", "=", "pointnet_fp_module", "(", "l2_xyz", ",", "l3_xyz", ",", "l2_points", ",", "l3_points", ",", "\n", "[", "256", ",", "256", "]", ",", "is_training", ",", "bn_decay", ",", "scope", "=", "'fa_layer1'", ")", "\n", "\n", "l1_points", "=", "pointnet_fp_module", "(", "l1_xyz", ",", "l2_xyz", ",", "l1_points", ",", "l2_points", ",", "\n", "[", "256", ",", "128", "]", ",", "is_training", ",", "bn_decay", ",", "scope", "=", "'fa_layer2'", ")", "\n", "\n", "l0_points", "=", "pointnet_fp_module", "(", "l0_xyz", ",", "l1_xyz", ",", "\n", "tf", ".", "concat", "(", "[", "l0_xyz", ",", "l0_points", "]", ",", "axis", "=", "-", "1", ")", ",", "l1_points", ",", "[", "128", ",", "128", ",", "128", "]", ",", "\n", "is_training", ",", "bn_decay", ",", "scope", "=", "'fa_layer3'", ")", "\n", "\n", "# FC layers", "\n", "net", "=", "tf_util", ".", "conv1d", "(", "l0_points", ",", "128", ",", "1", ",", "padding", "=", "'VALID'", ",", "bn", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "scope", "=", "'fc1'", ",", "bn_decay", "=", "bn_decay", ")", "\n", "\n", "net", "=", "tf_util", ".", "dropout", "(", "net", ",", "keep_prob", "=", "0.5", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'dp1'", ")", "\n", "\n", "results", "=", "[", "]", "\n", "for", "idx", ",", "out_dim", "in", "enumerate", "(", "out_dims", ")", ":", "\n", "            ", "current_result", "=", "tf_util", ".", "conv1d", "(", "net", ",", "out_dim", ",", "1", ",", "padding", "=", "'VALID'", ",", "activation_fn", "=", "None", ",", "scope", "=", "'fc2_{}'", ".", "format", "(", "idx", ")", ")", "\n", "results", ".", "append", "(", "current_result", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.pointnet_plusplus.architectures.build_pointnet2_shared": [[56, 96], ["tensorflow.variable_scope", "tensorflow.slice", "tensorflow.slice", "pointnet_util.pointnet_sa_module", "pointnet_util.pointnet_sa_module", "pointnet_util.pointnet_sa_module", "pointnet_util.pointnet_fp_module", "pointnet_util.pointnet_fp_module", "pointnet_util.pointnet_fp_module", "tf_util.conv1d", "tf_util.dropout", "tensorflow.concat"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.pointnet_util.pointnet_sa_module", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.pointnet_util.pointnet_sa_module", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.pointnet_util.pointnet_sa_module", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.pointnet_util.pointnet_fp_module", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.pointnet_util.pointnet_fp_module", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.pointnet_util.pointnet_fp_module", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.conv1d", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.dropout"], ["", "", "def", "build_pointnet2_shared", "(", "scope", ",", "X", ",", "out_dims", ",", "is_training", ",", "bn_decay", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "        ", "l0_xyz", "=", "tf", ".", "slice", "(", "X", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "3", "]", ")", "\n", "l0_points", "=", "tf", ".", "slice", "(", "X", ",", "[", "0", ",", "0", ",", "3", "]", ",", "[", "-", "1", ",", "-", "1", ",", "0", "]", ")", "\n", "\n", "# Set Abstraction layers", "\n", "l1_xyz", ",", "l1_points", ",", "l1_indices", "=", "pointnet_sa_module", "(", "l0_xyz", ",", "l0_points", ",", "\n", "npoint", "=", "512", ",", "radius", "=", "0.2", ",", "nsample", "=", "64", ",", "mlp", "=", "[", "64", ",", "64", ",", "128", "]", ",", "\n", "mlp2", "=", "None", ",", "group_all", "=", "False", ",", "is_training", "=", "is_training", ",", "\n", "bn_decay", "=", "bn_decay", ",", "scope", "=", "'layer1'", ")", "\n", "\n", "l2_xyz", ",", "l2_points", ",", "l2_indices", "=", "pointnet_sa_module", "(", "l1_xyz", ",", "l1_points", ",", "\n", "npoint", "=", "128", ",", "radius", "=", "0.4", ",", "nsample", "=", "64", ",", "mlp", "=", "[", "128", ",", "128", ",", "256", "]", ",", "\n", "mlp2", "=", "None", ",", "group_all", "=", "False", ",", "is_training", "=", "is_training", ",", "\n", "bn_decay", "=", "bn_decay", ",", "scope", "=", "'layer2'", ")", "\n", "\n", "l3_xyz", ",", "l3_points", ",", "l3_indices", "=", "pointnet_sa_module", "(", "l2_xyz", ",", "l2_points", ",", "\n", "npoint", "=", "None", ",", "radius", "=", "None", ",", "nsample", "=", "None", ",", "mlp", "=", "[", "256", ",", "512", ",", "1024", "]", ",", "\n", "mlp2", "=", "None", ",", "group_all", "=", "True", ",", "is_training", "=", "is_training", ",", "\n", "bn_decay", "=", "bn_decay", ",", "scope", "=", "'layer3'", ")", "\n", "\n", "# Feature Propagation layers", "\n", "l2_points", "=", "pointnet_fp_module", "(", "l2_xyz", ",", "l3_xyz", ",", "l2_points", ",", "l3_points", ",", "\n", "[", "256", ",", "256", "]", ",", "is_training", ",", "bn_decay", ",", "scope", "=", "'fa_layer1'", ")", "\n", "\n", "l1_points", "=", "pointnet_fp_module", "(", "l1_xyz", ",", "l2_xyz", ",", "l1_points", ",", "l2_points", ",", "\n", "[", "256", ",", "128", "]", ",", "is_training", ",", "bn_decay", ",", "scope", "=", "'fa_layer2'", ")", "\n", "\n", "l0_points", "=", "pointnet_fp_module", "(", "l0_xyz", ",", "l1_xyz", ",", "\n", "tf", ".", "concat", "(", "[", "l0_xyz", ",", "l0_points", "]", ",", "axis", "=", "-", "1", ")", ",", "l1_points", ",", "[", "128", ",", "128", ",", "128", "]", ",", "\n", "is_training", ",", "bn_decay", ",", "scope", "=", "'fa_layer3'", ")", "\n", "\n", "# FC layers", "\n", "net", "=", "tf_util", ".", "conv1d", "(", "l0_points", ",", "128", ",", "1", ",", "padding", "=", "'VALID'", ",", "bn", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "scope", "=", "'fc1'", ",", "bn_decay", "=", "bn_decay", ")", "\n", "# add one drpout layer ", "\n", "net", "=", "tf_util", ".", "dropout", "(", "net", ",", "keep_prob", "=", "0.5", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'dp1'", ")", "\n", "\n", "return", "net", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.pointnet_plusplus.architectures.build_pointnet2_cls": [[97, 123], ["tensorflow.variable_scope", "pointnet_util.pointnet_sa_module", "pointnet_util.pointnet_sa_module", "pointnet_util.pointnet_sa_module", "tensorflow.reshape", "tf_util.fully_connected", "tf_util.dropout", "tf_util.fully_connected", "tf_util.dropout", "enumerate", "tensorflow.shape", "tf_util.fully_connected", "results.append"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.pointnet_util.pointnet_sa_module", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.pointnet_util.pointnet_sa_module", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.pointnet_util.pointnet_sa_module", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.fully_connected", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.dropout", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.fully_connected", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.dropout", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.fully_connected"], ["", "", "def", "build_pointnet2_cls", "(", "scope", ",", "point_cloud", ",", "out_dims", ",", "is_training", ",", "bn_decay", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "scope", ")", ":", "\n", "        ", "batch_size", "=", "tf", ".", "shape", "(", "point_cloud", ")", "[", "0", "]", "\n", "l0_xyz", "=", "point_cloud", "\n", "l0_points", "=", "None", "\n", "\n", "# Set abstraction layers", "\n", "# Note: When using NCHW for layer 2, we see increased GPU memory usage (in TF1.4).", "\n", "# So we only use NCHW for layer 1 until this issue can be resolved.", "\n", "l1_xyz", ",", "l1_points", ",", "l1_indices", "=", "pointnet_sa_module", "(", "l0_xyz", ",", "l0_points", ",", "npoint", "=", "512", ",", "radius", "=", "0.2", ",", "nsample", "=", "32", ",", "mlp", "=", "[", "64", ",", "64", ",", "128", "]", ",", "mlp2", "=", "None", ",", "group_all", "=", "False", ",", "is_training", "=", "is_training", ",", "bn_decay", "=", "bn_decay", ",", "scope", "=", "'layer1'", ",", "use_nchw", "=", "True", ")", "\n", "l2_xyz", ",", "l2_points", ",", "l2_indices", "=", "pointnet_sa_module", "(", "l1_xyz", ",", "l1_points", ",", "npoint", "=", "128", ",", "radius", "=", "0.4", ",", "nsample", "=", "64", ",", "mlp", "=", "[", "128", ",", "128", ",", "256", "]", ",", "mlp2", "=", "None", ",", "group_all", "=", "False", ",", "is_training", "=", "is_training", ",", "bn_decay", "=", "bn_decay", ",", "scope", "=", "'layer2'", ")", "\n", "l3_xyz", ",", "l3_points", ",", "l3_indices", "=", "pointnet_sa_module", "(", "l2_xyz", ",", "l2_points", ",", "npoint", "=", "None", ",", "radius", "=", "None", ",", "nsample", "=", "None", ",", "mlp", "=", "[", "256", ",", "512", ",", "1024", "]", ",", "mlp2", "=", "None", ",", "group_all", "=", "True", ",", "is_training", "=", "is_training", ",", "bn_decay", "=", "bn_decay", ",", "scope", "=", "'layer3'", ")", "\n", "\n", "# Fully connected layers", "\n", "net", "=", "tf", ".", "reshape", "(", "l3_points", ",", "[", "batch_size", ",", "1024", "]", ")", "\n", "net", "=", "tf_util", ".", "fully_connected", "(", "net", ",", "512", ",", "bn", "=", "True", ",", "is_training", "=", "is_training", ",", "scope", "=", "'fc1'", ",", "bn_decay", "=", "bn_decay", ")", "\n", "net", "=", "tf_util", ".", "dropout", "(", "net", ",", "keep_prob", "=", "0.5", ",", "is_training", "=", "is_training", ",", "scope", "=", "'dp1'", ")", "\n", "net", "=", "tf_util", ".", "fully_connected", "(", "net", ",", "256", ",", "bn", "=", "True", ",", "is_training", "=", "is_training", ",", "scope", "=", "'fc2'", ",", "bn_decay", "=", "bn_decay", ")", "\n", "net", "=", "tf_util", ".", "dropout", "(", "net", ",", "keep_prob", "=", "0.5", ",", "is_training", "=", "is_training", ",", "scope", "=", "'dp2'", ")", "\n", "\n", "results", "=", "[", "]", "\n", "for", "idx", ",", "out_dim", "in", "enumerate", "(", "out_dims", ")", ":", "\n", "            ", "current_result", "=", "tf_util", ".", "fully_connected", "(", "net", ",", "out_dim", ",", "activation_fn", "=", "None", ",", "scope", "=", "'fc3_{}'", ".", "format", "(", "idx", ")", ")", "\n", "results", ".", "append", "(", "current_result", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.pointnet_plusplus.architectures.build_pointnet_cls": [[124, 161], ["tensorflow.variable_scope", "pointnet_util.pointnet_sa_module", "tensorflow.reshape", "tf_util.fully_connected", "tf_util.dropout", "enumerate", "tf_util.fully_connected", "results.append", "enumerate", "tensorflow.shape", "tf_util.fully_connected", "tf_util.dropout", "tf_util.fully_connected", "results.append"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.pointnet_util.pointnet_sa_module", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.fully_connected", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.dropout", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.fully_connected", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.fully_connected", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.dropout", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.fully_connected"], ["", "", "def", "build_pointnet_cls", "(", "scope", ",", "point_cloud", ",", "features", ",", "out_dims", ",", "is_training", ",", "bn_decay", ",", "reuse", "=", "False", ")", ":", "\n", "    ", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "        ", "batch_size", "=", "tf", ".", "shape", "(", "point_cloud", ")", "[", "0", "]", "\n", "l0_xyz", "=", "point_cloud", "\n", "l0_points", "=", "features", "\n", "# Set abstraction layers", "\n", "# Note: When using NCHW for layer 2, we see increased GPU memory usage (in TF1.4).", "\n", "# So we only use NCHW for layer 1 until this issue can be resolved.", "\n", "# l1_xyz, l1_points, l1_indices = pointnet_sa_module(l0_xyz, l0_points, npoint=None, radius=None, nsample=None, mlp=[64, 128, 256], mlp2=None,\\", "\n", "#          group_all=True, is_training=is_training, bn_decay=bn_decay, scope='layer1', use_xyz=False,  pooling='avg', reuse=tf.AUTO_REUSE)", "\n", "\n", "l1_xyz", ",", "l1_points", ",", "l1_indices", "=", "pointnet_sa_module", "(", "l0_xyz", ",", "l0_points", ",", "npoint", "=", "None", ",", "radius", "=", "None", ",", "nsample", "=", "None", ",", "mlp", "=", "[", "256", "]", ",", "mlp2", "=", "None", ",", "group_all", "=", "True", ",", "is_training", "=", "is_training", ",", "bn_decay", "=", "bn_decay", ",", "scope", "=", "'layer1'", ",", "use_xyz", "=", "False", ",", "pooling", "=", "'avg'", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", "\n", "# Fully connected layers", "\n", "net_shared", "=", "tf", ".", "reshape", "(", "l1_points", ",", "[", "batch_size", ",", "256", "]", ")", "\n", "\n", "net", "=", "net_shared", "\n", "net_shared", "=", "tf_util", ".", "fully_connected", "(", "net_shared", ",", "128", ",", "bn", "=", "True", ",", "is_training", "=", "is_training", ",", "scope", "=", "'fc1_0'", ",", "bn_decay", "=", "bn_decay", ")", "\n", "net_shared", "=", "tf_util", ".", "dropout", "(", "net", ",", "keep_prob", "=", "0.4", ",", "is_training", "=", "is_training", ",", "scope", "=", "'dp1'", ")", "\n", "\n", "# ", "\n", "fc2_dims", "=", "[", "128", "]", "\n", "for", "idx", ",", "fc2_dim", "in", "enumerate", "(", "fc2_dims", ")", ":", "\n", "            ", "net", "=", "tf_util", ".", "fully_connected", "(", "net", ",", "fc2_dim", ",", "bn", "=", "True", ",", "is_training", "=", "is_training", ",", "scope", "=", "'fc2_{}'", ".", "format", "(", "idx", ")", ",", "bn_decay", "=", "bn_decay", ")", "\n", "net", "=", "tf_util", ".", "dropout", "(", "net", ",", "keep_prob", "=", "0.4", ",", "is_training", "=", "is_training", ",", "scope", "=", "'dp2_{}'", ".", "format", "(", "idx", ")", ")", "\n", "\n", "", "results", "=", "[", "]", "\n", "# use net_shared branch", "\n", "current_result", "=", "tf_util", ".", "fully_connected", "(", "net_shared", ",", "out_dims", "[", "0", "]", ",", "activation_fn", "=", "None", ",", "scope", "=", "'fc3_{}'", ".", "format", "(", "0", ")", ")", "\n", "results", ".", "append", "(", "current_result", ")", "\n", "\n", "# use net branch", "\n", "for", "idx", ",", "out_dim", "in", "enumerate", "(", "out_dims", "[", "1", ":", "]", ")", ":", "\n", "            ", "current_result", "=", "tf_util", ".", "fully_connected", "(", "net", ",", "out_dim", ",", "activation_fn", "=", "None", ",", "scope", "=", "'fc3_{}'", ".", "format", "(", "idx", "+", "1", ")", ")", "\n", "results", ".", "append", "(", "current_result", ")", "\n", "\n", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.pointnet_plusplus.architectures.build_pointnet_cls_simple": [[162, 190], ["tensorflow.variable_scope", "tensorflow.layers.conv1d", "tensorflow.layers.conv1d", "tensorflow.layers.conv1d", "tensorflow.layers.conv1d", "tensorflow.layers.average_pooling1d", "tensorflow.reshape", "tf_util.fully_connected", "tf_util.dropout", "tf_util.fully_connected", "tf_util.dropout", "enumerate", "tf_util.fully_connected", "results.append"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.conv1d", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.conv1d", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.conv1d", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.conv1d", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.fully_connected", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.dropout", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.fully_connected", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.dropout", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.fully_connected"], ["", "", "def", "build_pointnet_cls_simple", "(", "scope", ",", "point_cloud", ",", "features", ",", "out_dims", ",", "is_training", ",", "bn_decay", ",", "reuse", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    x: geometric feature from depth image [bs, L1, 3];\n    \"\"\"", "\n", "# x: 3, 64, 128,", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ":", "\n", "        ", "num_point", "=", "512", "\n", "x", "=", "features", "\n", "conv1", "=", "tf", ".", "layers", ".", "conv1d", "(", "x", ",", "64", ",", "1", ",", "activation", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "conv2", "=", "tf", ".", "layers", ".", "conv1d", "(", "conv1", ",", "128", ",", "1", ",", "activation", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "#", "\n", "conv3", "=", "tf", ".", "layers", ".", "conv1d", "(", "conv2", ",", "512", ",", "1", ",", "activation", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "conv4", "=", "tf", ".", "layers", ".", "conv1d", "(", "conv3", ",", "1024", ",", "1", ",", "activation", "=", "tf", ".", "nn", ".", "relu", ")", "\n", "#", "\n", "ap1", "=", "tf", ".", "layers", ".", "average_pooling1d", "(", "conv4", ",", "pool_size", "=", "num_point", ",", "strides", "=", "num_point", ")", "# learn from global feature", "\n", "net", "=", "tf", ".", "reshape", "(", "ap1", ",", "[", "-", "1", ",", "1024", "]", ")", "\n", "# print('After average pooling: ', ap1)", "\n", "net", "=", "tf_util", ".", "fully_connected", "(", "net", ",", "512", ",", "bn", "=", "True", ",", "is_training", "=", "is_training", ",", "scope", "=", "'fc1'", ")", "\n", "net", "=", "tf_util", ".", "dropout", "(", "net", ",", "keep_prob", "=", "0.5", ",", "is_training", "=", "is_training", ",", "scope", "=", "'dp1'", ")", "\n", "net", "=", "tf_util", ".", "fully_connected", "(", "net", ",", "256", ",", "bn", "=", "True", ",", "is_training", "=", "is_training", ",", "scope", "=", "'fc2'", ")", "\n", "net", "=", "tf_util", ".", "dropout", "(", "net", ",", "keep_prob", "=", "0.5", ",", "is_training", "=", "is_training", ",", "scope", "=", "'dp2'", ")", "\n", "\n", "results", "=", "[", "]", "\n", "for", "idx", ",", "out_dim", "in", "enumerate", "(", "out_dims", ")", ":", "\n", "            ", "current_result", "=", "tf_util", ".", "fully_connected", "(", "net", ",", "out_dim", ",", "activation_fn", "=", "None", ",", "scope", "=", "'fc3_{}'", ".", "format", "(", "idx", ")", ")", "\n", "results", ".", "append", "(", "current_result", ")", "\n", "\n", "", "", "return", "results", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.provider.shuffle_data": [[8, 19], ["numpy.arange", "numpy.random.shuffle", "len"], "function", ["None"], ["def", "shuffle_data", "(", "data", ",", "labels", ")", ":", "\n", "    ", "\"\"\" Shuffle data and labels.\n        Input:\n          data: B,N,... numpy array\n          label: B,... numpy array\n        Return:\n          shuffled data, label and shuffle indices\n    \"\"\"", "\n", "idx", "=", "np", ".", "arange", "(", "len", "(", "labels", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "idx", ")", "\n", "return", "data", "[", "idx", ",", "...", "]", ",", "labels", "[", "idx", "]", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.provider.shuffle_points": [[20, 31], ["numpy.arange", "numpy.random.shuffle"], "function", ["None"], ["", "def", "shuffle_points", "(", "batch_data", ")", ":", "\n", "    ", "\"\"\" Shuffle orders of points in each point cloud -- changes FPS behavior.\n        Use the same shuffling idx for the entire batch.\n        Input:\n            BxNxC array\n        Output:\n            BxNxC array\n    \"\"\"", "\n", "idx", "=", "np", ".", "arange", "(", "batch_data", ".", "shape", "[", "1", "]", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "idx", ")", "\n", "return", "batch_data", "[", ":", ",", "idx", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.provider.rotate_point_cloud": [[32, 51], ["numpy.zeros", "xrange", "numpy.cos", "numpy.sin", "numpy.array", "numpy.dot", "shape_pc.reshape", "numpy.random.uniform"], "function", ["None"], ["", "def", "rotate_point_cloud", "(", "batch_data", ")", ":", "\n", "    ", "\"\"\" Randomly rotate the point clouds to augument the dataset\n        rotation is per shape based along up direction\n        Input:\n          BxNx3 array, original batch of point clouds\n        Return:\n          BxNx3 array, rotated batch of point clouds\n    \"\"\"", "\n", "rotated_data", "=", "np", ".", "zeros", "(", "batch_data", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", "in", "xrange", "(", "batch_data", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "rotation_angle", "=", "np", ".", "random", ".", "uniform", "(", ")", "*", "2", "*", "np", ".", "pi", "\n", "cosval", "=", "np", ".", "cos", "(", "rotation_angle", ")", "\n", "sinval", "=", "np", ".", "sin", "(", "rotation_angle", ")", "\n", "rotation_matrix", "=", "np", ".", "array", "(", "[", "[", "cosval", ",", "0", ",", "sinval", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "sinval", ",", "0", ",", "cosval", "]", "]", ")", "\n", "shape_pc", "=", "batch_data", "[", "k", ",", "...", "]", "\n", "rotated_data", "[", "k", ",", "...", "]", "=", "np", ".", "dot", "(", "shape_pc", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ",", "rotation_matrix", ")", "\n", "", "return", "rotated_data", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.provider.rotate_point_cloud_with_normal": [[53, 72], ["xrange", "numpy.cos", "numpy.sin", "numpy.array", "numpy.dot", "numpy.dot", "shape_pc.reshape", "shape_normal.reshape", "numpy.random.uniform"], "function", ["None"], ["", "def", "rotate_point_cloud_with_normal", "(", "batch_xyz_normal", ")", ":", "\n", "    ", "''' Randomly rotate XYZ, normal point cloud.\n        Input:\n            batch_xyz_normal: B,N,6, first three channels are XYZ, last 3 all normal\n        Output:\n            B,N,6, rotated XYZ, normal point cloud\n    '''", "\n", "for", "k", "in", "xrange", "(", "batch_xyz_normal", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "rotation_angle", "=", "np", ".", "random", ".", "uniform", "(", ")", "*", "2", "*", "np", ".", "pi", "\n", "cosval", "=", "np", ".", "cos", "(", "rotation_angle", ")", "\n", "sinval", "=", "np", ".", "sin", "(", "rotation_angle", ")", "\n", "rotation_matrix", "=", "np", ".", "array", "(", "[", "[", "cosval", ",", "0", ",", "sinval", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "sinval", ",", "0", ",", "cosval", "]", "]", ")", "\n", "shape_pc", "=", "batch_xyz_normal", "[", "k", ",", ":", ",", "0", ":", "3", "]", "\n", "shape_normal", "=", "batch_xyz_normal", "[", "k", ",", ":", ",", "3", ":", "6", "]", "\n", "batch_xyz_normal", "[", "k", ",", ":", ",", "0", ":", "3", "]", "=", "np", ".", "dot", "(", "shape_pc", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ",", "rotation_matrix", ")", "\n", "batch_xyz_normal", "[", "k", ",", ":", ",", "3", ":", "6", "]", "=", "np", ".", "dot", "(", "shape_normal", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ",", "rotation_matrix", ")", "\n", "", "return", "batch_xyz_normal", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.provider.rotate_perturbation_point_cloud_with_normal": [[73, 98], ["numpy.zeros", "xrange", "numpy.clip", "numpy.array", "numpy.array", "numpy.array", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "shape_pc.reshape", "shape_normal.reshape", "numpy.random.randn", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.sin", "numpy.sin"], "function", ["None"], ["", "def", "rotate_perturbation_point_cloud_with_normal", "(", "batch_data", ",", "angle_sigma", "=", "0.06", ",", "angle_clip", "=", "0.18", ")", ":", "\n", "    ", "\"\"\" Randomly perturb the point clouds by small rotations\n        Input:\n          BxNx6 array, original batch of point clouds and point normals\n        Return:\n          BxNx3 array, rotated batch of point clouds\n    \"\"\"", "\n", "rotated_data", "=", "np", ".", "zeros", "(", "batch_data", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", "in", "xrange", "(", "batch_data", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "angles", "=", "np", ".", "clip", "(", "angle_sigma", "*", "np", ".", "random", ".", "randn", "(", "3", ")", ",", "-", "angle_clip", ",", "angle_clip", ")", "\n", "Rx", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "np", ".", "cos", "(", "angles", "[", "0", "]", ")", ",", "-", "np", ".", "sin", "(", "angles", "[", "0", "]", ")", "]", ",", "\n", "[", "0", ",", "np", ".", "sin", "(", "angles", "[", "0", "]", ")", ",", "np", ".", "cos", "(", "angles", "[", "0", "]", ")", "]", "]", ")", "\n", "Ry", "=", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "angles", "[", "1", "]", ")", ",", "0", ",", "np", ".", "sin", "(", "angles", "[", "1", "]", ")", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "np", ".", "sin", "(", "angles", "[", "1", "]", ")", ",", "0", ",", "np", ".", "cos", "(", "angles", "[", "1", "]", ")", "]", "]", ")", "\n", "Rz", "=", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "angles", "[", "2", "]", ")", ",", "-", "np", ".", "sin", "(", "angles", "[", "2", "]", ")", ",", "0", "]", ",", "\n", "[", "np", ".", "sin", "(", "angles", "[", "2", "]", ")", ",", "np", ".", "cos", "(", "angles", "[", "2", "]", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "R", "=", "np", ".", "dot", "(", "Rz", ",", "np", ".", "dot", "(", "Ry", ",", "Rx", ")", ")", "\n", "shape_pc", "=", "batch_data", "[", "k", ",", ":", ",", "0", ":", "3", "]", "\n", "shape_normal", "=", "batch_data", "[", "k", ",", ":", ",", "3", ":", "6", "]", "\n", "rotated_data", "[", "k", ",", ":", ",", "0", ":", "3", "]", "=", "np", ".", "dot", "(", "shape_pc", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ",", "R", ")", "\n", "rotated_data", "[", "k", ",", ":", ",", "3", ":", "6", "]", "=", "np", ".", "dot", "(", "shape_normal", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ",", "R", ")", "\n", "", "return", "rotated_data", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.provider.rotate_point_cloud_by_angle": [[100, 118], ["numpy.zeros", "xrange", "numpy.cos", "numpy.sin", "numpy.array", "numpy.dot", "shape_pc.reshape"], "function", ["None"], ["", "def", "rotate_point_cloud_by_angle", "(", "batch_data", ",", "rotation_angle", ")", ":", "\n", "    ", "\"\"\" Rotate the point cloud along up direction with certain angle.\n        Input:\n          BxNx3 array, original batch of point clouds\n        Return:\n          BxNx3 array, rotated batch of point clouds\n    \"\"\"", "\n", "rotated_data", "=", "np", ".", "zeros", "(", "batch_data", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", "in", "xrange", "(", "batch_data", ".", "shape", "[", "0", "]", ")", ":", "\n", "#rotation_angle = np.random.uniform() * 2 * np.pi", "\n", "        ", "cosval", "=", "np", ".", "cos", "(", "rotation_angle", ")", "\n", "sinval", "=", "np", ".", "sin", "(", "rotation_angle", ")", "\n", "rotation_matrix", "=", "np", ".", "array", "(", "[", "[", "cosval", ",", "0", ",", "sinval", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "sinval", ",", "0", ",", "cosval", "]", "]", ")", "\n", "shape_pc", "=", "batch_data", "[", "k", ",", ":", ",", "0", ":", "3", "]", "\n", "rotated_data", "[", "k", ",", ":", ",", "0", ":", "3", "]", "=", "np", ".", "dot", "(", "shape_pc", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ",", "rotation_matrix", ")", "\n", "", "return", "rotated_data", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.provider.rotate_point_cloud_by_angle_with_normal": [[119, 139], ["numpy.zeros", "xrange", "numpy.cos", "numpy.sin", "numpy.array", "numpy.dot", "numpy.dot", "shape_pc.reshape", "shape_normal.reshape"], "function", ["None"], ["", "def", "rotate_point_cloud_by_angle_with_normal", "(", "batch_data", ",", "rotation_angle", ")", ":", "\n", "    ", "\"\"\" Rotate the point cloud along up direction with certain angle.\n        Input:\n          BxNx3 array, original batch of point clouds\n        Return:\n          BxNx3 array, rotated batch of point clouds\n    \"\"\"", "\n", "rotated_data", "=", "np", ".", "zeros", "(", "batch_data", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", "in", "xrange", "(", "batch_data", ".", "shape", "[", "0", "]", ")", ":", "\n", "#rotation_angle = np.random.uniform() * 2 * np.pi", "\n", "        ", "cosval", "=", "np", ".", "cos", "(", "rotation_angle", ")", "\n", "sinval", "=", "np", ".", "sin", "(", "rotation_angle", ")", "\n", "rotation_matrix", "=", "np", ".", "array", "(", "[", "[", "cosval", ",", "0", ",", "sinval", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "sinval", ",", "0", ",", "cosval", "]", "]", ")", "\n", "shape_pc", "=", "batch_data", "[", "k", ",", "...", "]", "\n", "shape_normal", "=", "batch_data", "[", "k", ",", ":", ",", "3", ":", "6", "]", "\n", "rotated_data", "[", "k", ",", "...", "]", "=", "np", ".", "dot", "(", "shape_pc", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ",", "rotation_matrix", ")", "\n", "rotated_data", "[", "k", ",", ":", ",", "3", ":", "6", "]", "=", "np", ".", "dot", "(", "shape_normal", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ",", "rotation_matrix", ")", "\n", "", "return", "rotated_data", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.provider.rotate_perturbation_point_cloud": [[142, 165], ["numpy.zeros", "xrange", "numpy.clip", "numpy.array", "numpy.array", "numpy.array", "numpy.dot", "numpy.dot", "numpy.dot", "shape_pc.reshape", "numpy.random.randn", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin", "numpy.sin", "numpy.sin"], "function", ["None"], ["", "def", "rotate_perturbation_point_cloud", "(", "batch_data", ",", "angle_sigma", "=", "0.06", ",", "angle_clip", "=", "0.18", ")", ":", "\n", "    ", "\"\"\" Randomly perturb the point clouds by small rotations\n        Input:\n          BxNx3 array, original batch of point clouds\n        Return:\n          BxNx3 array, rotated batch of point clouds\n    \"\"\"", "\n", "rotated_data", "=", "np", ".", "zeros", "(", "batch_data", ".", "shape", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "for", "k", "in", "xrange", "(", "batch_data", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "angles", "=", "np", ".", "clip", "(", "angle_sigma", "*", "np", ".", "random", ".", "randn", "(", "3", ")", ",", "-", "angle_clip", ",", "angle_clip", ")", "\n", "Rx", "=", "np", ".", "array", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "np", ".", "cos", "(", "angles", "[", "0", "]", ")", ",", "-", "np", ".", "sin", "(", "angles", "[", "0", "]", ")", "]", ",", "\n", "[", "0", ",", "np", ".", "sin", "(", "angles", "[", "0", "]", ")", ",", "np", ".", "cos", "(", "angles", "[", "0", "]", ")", "]", "]", ")", "\n", "Ry", "=", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "angles", "[", "1", "]", ")", ",", "0", ",", "np", ".", "sin", "(", "angles", "[", "1", "]", ")", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "np", ".", "sin", "(", "angles", "[", "1", "]", ")", ",", "0", ",", "np", ".", "cos", "(", "angles", "[", "1", "]", ")", "]", "]", ")", "\n", "Rz", "=", "np", ".", "array", "(", "[", "[", "np", ".", "cos", "(", "angles", "[", "2", "]", ")", ",", "-", "np", ".", "sin", "(", "angles", "[", "2", "]", ")", ",", "0", "]", ",", "\n", "[", "np", ".", "sin", "(", "angles", "[", "2", "]", ")", ",", "np", ".", "cos", "(", "angles", "[", "2", "]", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "R", "=", "np", ".", "dot", "(", "Rz", ",", "np", ".", "dot", "(", "Ry", ",", "Rx", ")", ")", "\n", "shape_pc", "=", "batch_data", "[", "k", ",", "...", "]", "\n", "rotated_data", "[", "k", ",", "...", "]", "=", "np", ".", "dot", "(", "shape_pc", ".", "reshape", "(", "(", "-", "1", ",", "3", ")", ")", ",", "R", ")", "\n", "", "return", "rotated_data", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.provider.jitter_point_cloud": [[167, 179], ["numpy.clip", "numpy.random.randn"], "function", ["None"], ["", "def", "jitter_point_cloud", "(", "batch_data", ",", "sigma", "=", "0.01", ",", "clip", "=", "0.05", ")", ":", "\n", "    ", "\"\"\" Randomly jitter points. jittering is per point.\n        Input:\n          BxNx3 array, original batch of point clouds\n        Return:\n          BxNx3 array, jittered batch of point clouds\n    \"\"\"", "\n", "B", ",", "N", ",", "C", "=", "batch_data", ".", "shape", "\n", "assert", "(", "clip", ">", "0", ")", "\n", "jittered_data", "=", "np", ".", "clip", "(", "sigma", "*", "np", ".", "random", ".", "randn", "(", "B", ",", "N", ",", "C", ")", ",", "-", "1", "*", "clip", ",", "clip", ")", "\n", "jittered_data", "+=", "batch_data", "\n", "return", "jittered_data", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.provider.shift_point_cloud": [[180, 192], ["numpy.random.uniform", "range"], "function", ["None"], ["", "def", "shift_point_cloud", "(", "batch_data", ",", "shift_range", "=", "0.1", ")", ":", "\n", "    ", "\"\"\" Randomly shift point cloud. Shift is per point cloud.\n        Input:\n          BxNx3 array, original batch of point clouds\n        Return:\n          BxNx3 array, shifted batch of point clouds\n    \"\"\"", "\n", "B", ",", "N", ",", "C", "=", "batch_data", ".", "shape", "\n", "shifts", "=", "np", ".", "random", ".", "uniform", "(", "-", "shift_range", ",", "shift_range", ",", "(", "B", ",", "3", ")", ")", "\n", "for", "batch_index", "in", "range", "(", "B", ")", ":", "\n", "        ", "batch_data", "[", "batch_index", ",", ":", ",", ":", "]", "+=", "shifts", "[", "batch_index", ",", ":", "]", "\n", "", "return", "batch_data", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.provider.random_scale_point_cloud": [[194, 206], ["numpy.random.uniform", "range"], "function", ["None"], ["", "def", "random_scale_point_cloud", "(", "batch_data", ",", "scale_low", "=", "0.8", ",", "scale_high", "=", "1.25", ")", ":", "\n", "    ", "\"\"\" Randomly scale the point cloud. Scale is per point cloud.\n        Input:\n            BxNx3 array, original batch of point clouds\n        Return:\n            BxNx3 array, scaled batch of point clouds\n    \"\"\"", "\n", "B", ",", "N", ",", "C", "=", "batch_data", ".", "shape", "\n", "scales", "=", "np", ".", "random", ".", "uniform", "(", "scale_low", ",", "scale_high", ",", "B", ")", "\n", "for", "batch_index", "in", "range", "(", "B", ")", ":", "\n", "        ", "batch_data", "[", "batch_index", ",", ":", ",", ":", "]", "*=", "scales", "[", "batch_index", "]", "\n", "", "return", "batch_data", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.provider.random_point_dropout": [[207, 215], ["range", "numpy.random.random", "numpy.where", "len", "numpy.random.random"], "function", ["None"], ["", "def", "random_point_dropout", "(", "batch_pc", ",", "max_dropout_ratio", "=", "0.875", ")", ":", "\n", "    ", "''' batch_pc: BxNx3 '''", "\n", "for", "b", "in", "range", "(", "batch_pc", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "dropout_ratio", "=", "np", ".", "random", ".", "random", "(", ")", "*", "max_dropout_ratio", "# 0~0.875", "\n", "drop_idx", "=", "np", ".", "where", "(", "np", ".", "random", ".", "random", "(", "(", "batch_pc", ".", "shape", "[", "1", "]", ")", ")", "<=", "dropout_ratio", ")", "[", "0", "]", "\n", "if", "len", "(", "drop_idx", ")", ">", "0", ":", "\n", "            ", "batch_pc", "[", "b", ",", "drop_idx", ",", ":", "]", "=", "batch_pc", "[", "b", ",", "0", ",", ":", "]", "# set to the first point", "\n", "", "", "return", "batch_pc", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.provider.getDataFiles": [[217, 219], ["line.rstrip", "open"], "function", ["None"], ["", "def", "getDataFiles", "(", "list_filename", ")", ":", "\n", "    ", "return", "[", "line", ".", "rstrip", "(", ")", "for", "line", "in", "open", "(", "list_filename", ")", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.provider.load_h5": [[220, 225], ["h5py.File"], "function", ["None"], ["", "def", "load_h5", "(", "h5_filename", ")", ":", "\n", "    ", "f", "=", "h5py", ".", "File", "(", "h5_filename", ")", "\n", "data", "=", "f", "[", "'data'", "]", "[", ":", "]", "\n", "label", "=", "f", "[", "'label'", "]", "[", ":", "]", "\n", "return", "(", "data", ",", "label", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.provider.loadDataFile": [[226, 228], ["provider.load_h5"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.provider.load_h5"], ["", "def", "loadDataFile", "(", "filename", ")", ":", "\n", "    ", "return", "load_h5", "(", "filename", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.pointnet_util.fps_sampling": [[23, 25], ["tf_sampling.farthest_point_sample"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.sampling.tf_sampling.farthest_point_sample"], ["def", "fps_sampling", "(", "npoint", ",", "xyz", ")", ":", "\n", "    ", "return", "farthest_point_sample", "(", "npoint", ",", "xyz", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.pointnet_util.gather_nd_point": [[26, 28], ["tf_sampling.gather_point"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.sampling.tf_sampling.gather_point"], ["", "def", "gather_nd_point", "(", "P", ",", "sample_index", ")", ":", "\n", "    ", "return", "gather_point", "(", "P", ",", "sample_index", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.pointnet_util.sample_and_group": [[29, 64], ["tf_sampling.gather_point", "tf_grouping.group_point", "tensorflow.tile", "tf_sampling.farthest_point_sample", "tf_grouping.knn_point", "tf_grouping.query_ball_point", "tensorflow.expand_dims", "tf_grouping.group_point", "tensorflow.concat"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.sampling.tf_sampling.gather_point", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.grouping.tf_grouping.group_point", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.sampling.tf_sampling.farthest_point_sample", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.grouping.tf_grouping.knn_point", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.grouping.tf_grouping.query_ball_point", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.grouping.tf_grouping.group_point"], ["", "def", "sample_and_group", "(", "npoint", ",", "radius", ",", "nsample", ",", "xyz", ",", "points", ",", "knn", "=", "False", ",", "use_xyz", "=", "True", ")", ":", "\n", "    ", "'''\n    Input:\n        npoint: int32\n        radius: float32\n        nsample: int32\n        xyz: (batch_size, ndataset, 3) TF tensor\n        points: (batch_size, ndataset, channel) TF tensor, if None will just use xyz as points\n        knn: bool, if True use kNN instead of radius search\n        use_xyz: bool, if True concat XYZ with local point features, otherwise just use point features\n    Output:\n        new_xyz: (batch_size, npoint, 3) TF tensor\n        new_points: (batch_size, npoint, nsample, 3+channel) TF tensor\n        idx: (batch_size, npoint, nsample) TF tensor, indices of local points as in ndataset points\n        grouped_xyz: (batch_size, npoint, nsample, 3) TF tensor, normalized point XYZs\n            (subtracted by seed point XYZ) in local regions\n    '''", "\n", "\n", "new_xyz", "=", "gather_point", "(", "xyz", ",", "farthest_point_sample", "(", "npoint", ",", "xyz", ")", ")", "# (batch_size, npoint, 3)", "\n", "if", "knn", ":", "\n", "        ", "_", ",", "idx", "=", "knn_point", "(", "nsample", ",", "xyz", ",", "new_xyz", ")", "\n", "", "else", ":", "\n", "        ", "idx", ",", "pts_cnt", "=", "query_ball_point", "(", "radius", ",", "nsample", ",", "xyz", ",", "new_xyz", ")", "\n", "", "grouped_xyz", "=", "group_point", "(", "xyz", ",", "idx", ")", "# (batch_size, npoint, nsample, 3)", "\n", "grouped_xyz", "-=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "new_xyz", ",", "2", ")", ",", "[", "1", ",", "1", ",", "nsample", ",", "1", "]", ")", "# translation normalization", "\n", "if", "points", "is", "not", "None", ":", "\n", "        ", "grouped_points", "=", "group_point", "(", "points", ",", "idx", ")", "# (batch_size, npoint, nsample, channel)", "\n", "if", "use_xyz", ":", "\n", "            ", "new_points", "=", "tf", ".", "concat", "(", "[", "grouped_xyz", ",", "grouped_points", "]", ",", "axis", "=", "-", "1", ")", "# (batch_size, npoint, nample, 3+channel)", "\n", "", "else", ":", "\n", "            ", "new_points", "=", "grouped_points", "\n", "", "", "else", ":", "\n", "        ", "new_points", "=", "grouped_xyz", "\n", "\n", "", "return", "new_xyz", ",", "new_points", ",", "idx", ",", "grouped_xyz", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.pointnet_util.sample_and_group_all": [[66, 92], ["tensorflow.tile", "tensorflow.tile", "tensorflow.reshape", "tensorflow.shape", "tensorflow.shape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.expand_dims", "tensorflow.constant", "tensorflow.range", "tensorflow.concat"], "function", ["None"], ["", "def", "sample_and_group_all", "(", "xyz", ",", "points", ",", "use_xyz", "=", "True", ")", ":", "\n", "    ", "'''\n    Inputs:\n        xyz: (batch_size, ndataset, 3) TF tensor\n        points: (batch_size, ndataset, channel) TF tensor, if None will just use xyz as points\n        use_xyz: bool, if True concat XYZ with local point features, otherwise just use point features\n    Outputs:\n        new_xyz: (batch_size, 1, 3) as (0,0,0)\n        new_points: (batch_size, 1, ndataset, 3+channel) TF tensor\n    Note:\n        Equivalent to sample_and_group with npoint=1, radius=inf, use (0,0,0) as the centroid\n    '''", "\n", "batch_size", "=", "tf", ".", "shape", "(", "xyz", ")", "[", "0", "]", "\n", "nsample", "=", "tf", ".", "shape", "(", "xyz", ")", "[", "1", "]", "\n", "new_xyz", "=", "tf", ".", "tile", "(", "tf", ".", "reshape", "(", "tf", ".", "constant", "(", "[", "0", ",", "0", ",", "0", "]", ",", "dtype", "=", "tf", ".", "float32", ")", ",", "(", "1", ",", "1", ",", "3", ")", ")", ",", "(", "batch_size", ",", "1", ",", "1", ")", ")", "# (batch_size, 1, 3)", "\n", "idx", "=", "tf", ".", "tile", "(", "tf", ".", "reshape", "(", "tf", ".", "range", "(", "nsample", ")", ",", "(", "1", ",", "1", ",", "nsample", ")", ")", ",", "(", "batch_size", ",", "1", ",", "1", ")", ")", "\n", "grouped_xyz", "=", "tf", ".", "reshape", "(", "xyz", ",", "(", "batch_size", ",", "1", ",", "nsample", ",", "3", ")", ")", "# (batch_size, npoint=1, nsample, 3)", "\n", "if", "points", "is", "not", "None", ":", "\n", "        ", "if", "use_xyz", ":", "\n", "            ", "new_points", "=", "tf", ".", "concat", "(", "[", "xyz", ",", "points", "]", ",", "axis", "=", "2", ")", "# (batch_size, 16, 259)", "\n", "", "else", ":", "\n", "            ", "new_points", "=", "points", "\n", "", "new_points", "=", "tf", ".", "expand_dims", "(", "new_points", ",", "1", ")", "# (batch_size, 1, 16, 259)", "\n", "", "else", ":", "\n", "        ", "new_points", "=", "grouped_xyz", "\n", "", "return", "new_xyz", ",", "new_points", ",", "idx", ",", "grouped_xyz", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.pointnet_util.pointnet_sa_module": [[94, 162], ["tensorflow.variable_scope", "enumerate", "tensorflow.squeeze", "pointnet_util.sample_and_group_all", "pointnet_util.sample_and_group", "tensorflow.transpose", "tf_util.conv2d", "tensorflow.transpose", "tensorflow.reduce_max", "enumerate", "tensorflow.reduce_mean", "tensorflow.transpose", "tf_util.conv2d", "tensorflow.transpose", "tensorflow.variable_scope", "tensorflow.norm", "tensorflow.exp", "tensorflow.reduce_sum", "tensorflow.reduce_max", "tensorflow.reduce_mean", "tensorflow.concat", "tensorflow.reduce_sum"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.pointnet_util.sample_and_group_all", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.pointnet_util.sample_and_group", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.conv2d", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.conv2d"], ["", "def", "pointnet_sa_module", "(", "xyz", ",", "points", ",", "npoint", ",", "radius", ",", "nsample", ",", "mlp", ",", "mlp2", ",", "group_all", ",", "is_training", ",", "bn_decay", ",", "scope", ",", "bn", "=", "True", ",", "pooling", "=", "'max'", ",", "knn", "=", "False", ",", "use_xyz", "=", "True", ",", "use_nchw", "=", "False", ",", "reuse", "=", "False", ")", ":", "\n", "    ", "''' PointNet Set Abstraction (SA) Module\n        Input:\n            xyz: (batch_size, ndataset, 3) TF tensor\n            points: (batch_size, ndataset, channel) TF tensor\n            npoint: int32 -- #points sampled in farthest point sampling\n            radius: float32 -- search radius in local region\n            nsample: int32 -- how many points in each local region\n            mlp: list of int32 -- output size for MLP on each point\n            mlp2: list of int32 -- output size for MLP on each region\n            group_all: bool -- group all points into one PC if set true, OVERRIDE\n                npoint, radius and nsample settings\n            use_xyz: bool, if True concat XYZ with local point features, otherwise just use point features\n            use_nchw: bool, if True, use NCHW data format for conv2d, which is usually faster than NHWC format\n        Return:\n            new_xyz: (batch_size, npoint, 3) TF tensor\n            new_points: (batch_size, npoint, mlp[-1] or mlp2[-1]) TF tensor\n            idx: (batch_size, npoint, nsample) int32 -- indices for local regions\n    '''", "\n", "data_format", "=", "'NCHW'", "if", "use_nchw", "else", "'NHWC'", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", "as", "sc", ":", "\n", "# Sample and Grouping", "\n", "        ", "if", "group_all", ":", "# todo", "\n", "            ", "new_xyz", ",", "new_points", ",", "idx", ",", "grouped_xyz", "=", "sample_and_group_all", "(", "xyz", ",", "points", ",", "use_xyz", ")", "\n", "# new_xyz, new_points, idx, grouped_xyz = xyz, points, None, None", "\n", "", "else", ":", "\n", "            ", "new_xyz", ",", "new_points", ",", "idx", ",", "grouped_xyz", "=", "sample_and_group", "(", "npoint", ",", "radius", ",", "nsample", ",", "xyz", ",", "points", ",", "knn", ",", "use_xyz", ")", "\n", "\n", "# Point Feature Embedding", "\n", "", "if", "use_nchw", ":", "new_points", "=", "tf", ".", "transpose", "(", "new_points", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "for", "i", ",", "num_out_channel", "in", "enumerate", "(", "mlp", ")", ":", "\n", "            ", "new_points", "=", "tf_util", ".", "conv2d", "(", "new_points", ",", "num_out_channel", ",", "[", "1", ",", "1", "]", ",", "\n", "padding", "=", "'VALID'", ",", "stride", "=", "[", "1", ",", "1", "]", ",", "\n", "bn", "=", "bn", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'conv%d'", "%", "(", "i", ")", ",", "bn_decay", "=", "bn_decay", ",", "\n", "data_format", "=", "data_format", ")", "\n", "", "if", "use_nchw", ":", "new_points", "=", "tf", ".", "transpose", "(", "new_points", ",", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "\n", "# Pooling in Local Regions", "\n", "if", "pooling", "==", "'max'", ":", "\n", "            ", "new_points", "=", "tf", ".", "reduce_max", "(", "new_points", ",", "axis", "=", "[", "2", "]", ",", "keepdims", "=", "True", ",", "name", "=", "'maxpool'", ")", "\n", "", "elif", "pooling", "==", "'avg'", ":", "\n", "            ", "new_points", "=", "tf", ".", "reduce_mean", "(", "new_points", ",", "axis", "=", "[", "2", "]", ",", "keepdims", "=", "True", ",", "name", "=", "'avgpool'", ")", "\n", "", "elif", "pooling", "==", "'weighted_avg'", ":", "\n", "            ", "with", "tf", ".", "variable_scope", "(", "'weighted_avg'", ")", ":", "\n", "                ", "dists", "=", "tf", ".", "norm", "(", "grouped_xyz", ",", "axis", "=", "-", "1", ",", "ord", "=", "2", ",", "keep_dims", "=", "True", ")", "\n", "exp_dists", "=", "tf", ".", "exp", "(", "-", "dists", "*", "5", ")", "\n", "weights", "=", "exp_dists", "/", "tf", ".", "reduce_sum", "(", "exp_dists", ",", "axis", "=", "2", ",", "keep_dims", "=", "True", ")", "# (batch_size, npoint, nsample, 1)", "\n", "new_points", "*=", "weights", "# (batch_size, npoint, nsample, mlp[-1])", "\n", "new_points", "=", "tf", ".", "reduce_sum", "(", "new_points", ",", "axis", "=", "2", ",", "keep_dims", "=", "True", ")", "\n", "", "", "elif", "pooling", "==", "'max_and_avg'", ":", "\n", "            ", "max_points", "=", "tf", ".", "reduce_max", "(", "new_points", ",", "axis", "=", "[", "2", "]", ",", "keep_dims", "=", "True", ",", "name", "=", "'maxpool'", ")", "\n", "avg_points", "=", "tf", ".", "reduce_mean", "(", "new_points", ",", "axis", "=", "[", "2", "]", ",", "keep_dims", "=", "True", ",", "name", "=", "'avgpool'", ")", "\n", "new_points", "=", "tf", ".", "concat", "(", "[", "avg_points", ",", "max_points", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "# [Optional] Further Processing ", "\n", "", "if", "mlp2", "is", "not", "None", ":", "\n", "            ", "if", "use_nchw", ":", "new_points", "=", "tf", ".", "transpose", "(", "new_points", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "for", "i", ",", "num_out_channel", "in", "enumerate", "(", "mlp2", ")", ":", "\n", "                ", "new_points", "=", "tf_util", ".", "conv2d", "(", "new_points", ",", "num_out_channel", ",", "[", "1", ",", "1", "]", ",", "\n", "padding", "=", "'VALID'", ",", "stride", "=", "[", "1", ",", "1", "]", ",", "\n", "bn", "=", "bn", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'conv_post_%d'", "%", "(", "i", ")", ",", "bn_decay", "=", "bn_decay", ",", "\n", "data_format", "=", "data_format", ")", "\n", "", "if", "use_nchw", ":", "new_points", "=", "tf", ".", "transpose", "(", "new_points", ",", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "\n", "", "new_points", "=", "tf", ".", "squeeze", "(", "new_points", ",", "[", "2", "]", ")", "# (batch_size, npoints, mlp2[-1])", "\n", "return", "new_xyz", ",", "new_points", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.pointnet_util.pointnet_sa_module_msg": [[163, 204], ["tensorflow.variable_scope", "tf_sampling.gather_point", "range", "tensorflow.concat", "tf_sampling.farthest_point_sample", "len", "tf_grouping.query_ball_point", "tf_grouping.group_point", "tensorflow.tile", "enumerate", "tensorflow.reduce_max", "new_points_list.append", "tensorflow.expand_dims", "tf_grouping.group_point", "tensorflow.transpose", "tf_util.conv2d", "tensorflow.transpose", "tensorflow.concat"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.sampling.tf_sampling.gather_point", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.sampling.tf_sampling.farthest_point_sample", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.grouping.tf_grouping.query_ball_point", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.grouping.tf_grouping.group_point", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.grouping.tf_grouping.group_point", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.conv2d"], ["", "", "def", "pointnet_sa_module_msg", "(", "xyz", ",", "points", ",", "npoint", ",", "radius_list", ",", "nsample_list", ",", "mlp_list", ",", "is_training", ",", "bn_decay", ",", "scope", ",", "bn", "=", "True", ",", "use_xyz", "=", "True", ",", "use_nchw", "=", "False", ")", ":", "\n", "    ", "''' PointNet Set Abstraction (SA) module with Multi-Scale Grouping (MSG)\n        Input:\n            xyz: (batch_size, ndataset, 3) TF tensor\n            points: (batch_size, ndataset, channel) TF tensor\n            npoint: int32 -- #points sampled in farthest point sampling\n            radius: list of float32 -- search radius in local region\n            nsample: list of int32 -- how many points in each local region\n            mlp: list of list of int32 -- output size for MLP on each point\n            use_xyz: bool, if True concat XYZ with local point features, otherwise just use point features\n            use_nchw: bool, if True, use NCHW data format for conv2d, which is usually faster than NHWC format\n        Return:\n            new_xyz: (batch_size, npoint, 3) TF tensor\n            new_points: (batch_size, npoint, sum_k{mlp[k][-1]}) TF tensor\n    '''", "\n", "data_format", "=", "'NCHW'", "if", "use_nchw", "else", "'NHWC'", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", "as", "sc", ":", "\n", "        ", "new_xyz", "=", "gather_point", "(", "xyz", ",", "farthest_point_sample", "(", "npoint", ",", "xyz", ")", ")", "\n", "new_points_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "radius_list", ")", ")", ":", "\n", "            ", "radius", "=", "radius_list", "[", "i", "]", "\n", "nsample", "=", "nsample_list", "[", "i", "]", "\n", "idx", ",", "pts_cnt", "=", "query_ball_point", "(", "radius", ",", "nsample", ",", "xyz", ",", "new_xyz", ")", "\n", "grouped_xyz", "=", "group_point", "(", "xyz", ",", "idx", ")", "\n", "grouped_xyz", "-=", "tf", ".", "tile", "(", "tf", ".", "expand_dims", "(", "new_xyz", ",", "2", ")", ",", "[", "1", ",", "1", ",", "nsample", ",", "1", "]", ")", "\n", "if", "points", "is", "not", "None", ":", "\n", "                ", "grouped_points", "=", "group_point", "(", "points", ",", "idx", ")", "\n", "if", "use_xyz", ":", "\n", "                    ", "grouped_points", "=", "tf", ".", "concat", "(", "[", "grouped_points", ",", "grouped_xyz", "]", ",", "axis", "=", "-", "1", ")", "\n", "", "", "else", ":", "\n", "                ", "grouped_points", "=", "grouped_xyz", "\n", "", "if", "use_nchw", ":", "grouped_points", "=", "tf", ".", "transpose", "(", "grouped_points", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "for", "j", ",", "num_out_channel", "in", "enumerate", "(", "mlp_list", "[", "i", "]", ")", ":", "\n", "                ", "grouped_points", "=", "tf_util", ".", "conv2d", "(", "grouped_points", ",", "num_out_channel", ",", "[", "1", ",", "1", "]", ",", "\n", "padding", "=", "'VALID'", ",", "stride", "=", "[", "1", ",", "1", "]", ",", "bn", "=", "bn", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'conv%d_%d'", "%", "(", "i", ",", "j", ")", ",", "bn_decay", "=", "bn_decay", ")", "\n", "", "if", "use_nchw", ":", "grouped_points", "=", "tf", ".", "transpose", "(", "grouped_points", ",", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "new_points", "=", "tf", ".", "reduce_max", "(", "grouped_points", ",", "axis", "=", "[", "2", "]", ")", "\n", "new_points_list", ".", "append", "(", "new_points", ")", "\n", "", "new_points_concat", "=", "tf", ".", "concat", "(", "new_points_list", ",", "axis", "=", "-", "1", ")", "\n", "return", "new_xyz", ",", "new_points_concat", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.pointnet_util.pointnet_fp_module": [[206, 237], ["tensorflow.variable_scope", "tf_interpolate.three_nn", "tensorflow.maximum", "tensorflow.reduce_sum", "tensorflow.tile", "tf_interpolate.three_interpolate", "tensorflow.expand_dims", "enumerate", "tensorflow.squeeze", "tensorflow.concat", "tf_util.conv2d"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.3d_interpolation.tf_interpolate.three_nn", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.3d_interpolation.tf_interpolate.three_interpolate", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.conv2d"], ["", "", "def", "pointnet_fp_module", "(", "xyz1", ",", "xyz2", ",", "points1", ",", "points2", ",", "mlp", ",", "is_training", ",", "bn_decay", ",", "scope", ",", "bn", "=", "True", ")", ":", "\n", "    ", "''' PointNet Feature Propogation (FP) Module\n        Input:                                                                                                      \n            xyz1: (batch_size, ndataset1, 3) TF tensor                                                              \n            xyz2: (batch_size, ndataset2, 3) TF tensor, sparser than xyz1                                           \n            points1: (batch_size, ndataset1, nchannel1) TF tensor                                                   \n            points2: (batch_size, ndataset2, nchannel2) TF tensor\n            mlp: list of int32 -- output size for MLP on each point                                                 \n        Return:\n            new_points: (batch_size, ndataset1, mlp[-1]) TF tensor\n    '''", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", "as", "sc", ":", "\n", "        ", "dist", ",", "idx", "=", "three_nn", "(", "xyz1", ",", "xyz2", ")", "\n", "dist", "=", "tf", ".", "maximum", "(", "dist", ",", "1e-10", ")", "\n", "norm", "=", "tf", ".", "reduce_sum", "(", "(", "1.0", "/", "dist", ")", ",", "axis", "=", "2", ",", "keepdims", "=", "True", ")", "\n", "norm", "=", "tf", ".", "tile", "(", "norm", ",", "[", "1", ",", "1", ",", "3", "]", ")", "\n", "weight", "=", "(", "1.0", "/", "dist", ")", "/", "norm", "\n", "interpolated_points", "=", "three_interpolate", "(", "points2", ",", "idx", ",", "weight", ")", "\n", "\n", "if", "points1", "is", "not", "None", ":", "\n", "            ", "new_points1", "=", "tf", ".", "concat", "(", "axis", "=", "2", ",", "values", "=", "[", "interpolated_points", ",", "points1", "]", ")", "# B,ndataset1,nchannel1+nchannel2", "\n", "", "else", ":", "\n", "            ", "new_points1", "=", "interpolated_points", "\n", "", "new_points1", "=", "tf", ".", "expand_dims", "(", "new_points1", ",", "2", ")", "\n", "for", "i", ",", "num_out_channel", "in", "enumerate", "(", "mlp", ")", ":", "\n", "            ", "new_points1", "=", "tf_util", ".", "conv2d", "(", "new_points1", ",", "num_out_channel", ",", "[", "1", ",", "1", "]", ",", "\n", "padding", "=", "'VALID'", ",", "stride", "=", "[", "1", ",", "1", "]", ",", "\n", "bn", "=", "bn", ",", "is_training", "=", "is_training", ",", "\n", "scope", "=", "'conv_%d'", "%", "(", "i", ")", ",", "bn_decay", "=", "bn_decay", ")", "\n", "", "new_points1", "=", "tf", ".", "squeeze", "(", "new_points1", ",", "[", "2", "]", ")", "# B,ndataset1,mlp[-1]", "\n", "return", "new_points1", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.pc_util.point_cloud_to_volume_batch": [[24, 39], ["range", "pc_util.point_cloud_to_volume", "numpy.vstack", "numpy.concatenate", "numpy.squeeze", "vol_list.append", "vol_list.append", "point_cloud_to_volume.flatten", "numpy.expand_dims", "numpy.expand_dims"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.pc_util.point_cloud_to_volume"], ["def", "point_cloud_to_volume_batch", "(", "point_clouds", ",", "vsize", "=", "12", ",", "radius", "=", "1.0", ",", "flatten", "=", "True", ")", ":", "\n", "    ", "\"\"\" Input is BxNx3 batch of point cloud\n        Output is Bx(vsize^3)\n    \"\"\"", "\n", "vol_list", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "point_clouds", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "vol", "=", "point_cloud_to_volume", "(", "np", ".", "squeeze", "(", "point_clouds", "[", "b", ",", ":", ",", ":", "]", ")", ",", "vsize", ",", "radius", ")", "\n", "if", "flatten", ":", "\n", "            ", "vol_list", ".", "append", "(", "vol", ".", "flatten", "(", ")", ")", "\n", "", "else", ":", "\n", "            ", "vol_list", ".", "append", "(", "np", ".", "expand_dims", "(", "np", ".", "expand_dims", "(", "vol", ",", "-", "1", ")", ",", "0", ")", ")", "\n", "", "", "if", "flatten", ":", "\n", "        ", "return", "np", ".", "vstack", "(", "vol_list", ")", "\n", "", "else", ":", "\n", "        ", "return", "np", ".", "concatenate", "(", "vol_list", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.pc_util.point_cloud_to_volume": [[41, 52], ["numpy.zeros", "locations.astype.astype", "float"], "function", ["None"], ["", "", "def", "point_cloud_to_volume", "(", "points", ",", "vsize", ",", "radius", "=", "1.0", ")", ":", "\n", "    ", "\"\"\" input is Nx3 points.\n        output is vsize*vsize*vsize\n        assumes points are in range [-radius, radius]\n    \"\"\"", "\n", "vol", "=", "np", ".", "zeros", "(", "(", "vsize", ",", "vsize", ",", "vsize", ")", ")", "\n", "voxel", "=", "2", "*", "radius", "/", "float", "(", "vsize", ")", "\n", "locations", "=", "(", "points", "+", "radius", ")", "/", "voxel", "\n", "locations", "=", "locations", ".", "astype", "(", "int", ")", "\n", "vol", "[", "locations", "[", ":", ",", "0", "]", ",", "locations", "[", ":", ",", "1", "]", ",", "locations", "[", ":", ",", "2", "]", "]", "=", "1.0", "\n", "return", "vol", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.pc_util.volume_to_point_cloud": [[56, 72], ["range", "numpy.vstack", "range", "len", "numpy.zeros", "range", "np.vstack.append", "numpy.array"], "function", ["None"], ["", "def", "volume_to_point_cloud", "(", "vol", ")", ":", "\n", "    ", "\"\"\" vol is occupancy grid (value = 0 or 1) of size vsize*vsize*vsize\n        return Nx3 numpy array.\n    \"\"\"", "\n", "vsize", "=", "vol", ".", "shape", "[", "0", "]", "\n", "assert", "(", "vol", ".", "shape", "[", "1", "]", "==", "vsize", "and", "vol", ".", "shape", "[", "1", "]", "==", "vsize", ")", "\n", "points", "=", "[", "]", "\n", "for", "a", "in", "range", "(", "vsize", ")", ":", "\n", "        ", "for", "b", "in", "range", "(", "vsize", ")", ":", "\n", "            ", "for", "c", "in", "range", "(", "vsize", ")", ":", "\n", "                ", "if", "vol", "[", "a", ",", "b", ",", "c", "]", "==", "1", ":", "\n", "                    ", "points", ".", "append", "(", "np", ".", "array", "(", "[", "a", ",", "b", ",", "c", "]", ")", ")", "\n", "", "", "", "", "if", "len", "(", "points", ")", "==", "0", ":", "\n", "        ", "return", "np", ".", "zeros", "(", "(", "0", ",", "3", ")", ")", "\n", "", "points", "=", "np", ".", "vstack", "(", "points", ")", "\n", "return", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.pc_util.point_cloud_to_volume_v2_batch": [[73, 83], ["range", "numpy.concatenate", "pc_util.point_cloud_to_volume_v2", "vol_list.append", "numpy.expand_dims"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.pc_util.point_cloud_to_volume_v2"], ["", "def", "point_cloud_to_volume_v2_batch", "(", "point_clouds", ",", "vsize", "=", "12", ",", "radius", "=", "1.0", ",", "num_sample", "=", "128", ")", ":", "\n", "    ", "\"\"\" Input is BxNx3 a batch of point cloud\n        Output is BxVxVxVxnum_samplex3\n        Added on Feb 19\n    \"\"\"", "\n", "vol_list", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "point_clouds", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "vol", "=", "point_cloud_to_volume_v2", "(", "point_clouds", "[", "b", ",", ":", ",", ":", "]", ",", "vsize", ",", "radius", ",", "num_sample", ")", "\n", "vol_list", ".", "append", "(", "np", ".", "expand_dims", "(", "vol", ",", "0", ")", ")", "\n", "", "return", "np", ".", "concatenate", "(", "vol_list", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.pc_util.point_cloud_to_volume_v2": [[84, 125], ["numpy.zeros", "locations.astype.astype", "range", "range", "float", "tuple", "loc2pc[].append", "range", "range", "numpy.zeros", "numpy.vstack", "numpy.random.choice", "numpy.lib.pad", "numpy.array"], "function", ["None"], ["", "def", "point_cloud_to_volume_v2", "(", "points", ",", "vsize", ",", "radius", "=", "1.0", ",", "num_sample", "=", "128", ")", ":", "\n", "    ", "\"\"\" input is Nx3 points\n        output is vsize*vsize*vsize*num_sample*3\n        assumes points are in range [-radius, radius]\n        samples num_sample points in each voxel, if there are less than\n        num_sample points, replicate the points\n        Added on Feb 19\n    \"\"\"", "\n", "vol", "=", "np", ".", "zeros", "(", "(", "vsize", ",", "vsize", ",", "vsize", ",", "num_sample", ",", "3", ")", ")", "\n", "voxel", "=", "2", "*", "radius", "/", "float", "(", "vsize", ")", "\n", "locations", "=", "(", "points", "+", "radius", ")", "/", "voxel", "\n", "locations", "=", "locations", ".", "astype", "(", "int", ")", "\n", "loc2pc", "=", "{", "}", "\n", "for", "n", "in", "range", "(", "points", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "loc", "=", "tuple", "(", "locations", "[", "n", ",", ":", "]", ")", "\n", "if", "loc", "not", "in", "loc2pc", ":", "\n", "            ", "loc2pc", "[", "loc", "]", "=", "[", "]", "\n", "", "loc2pc", "[", "loc", "]", ".", "append", "(", "points", "[", "n", ",", ":", "]", ")", "\n", "#print loc2pc", "\n", "\n", "", "for", "i", "in", "range", "(", "vsize", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "vsize", ")", ":", "\n", "            ", "for", "k", "in", "range", "(", "vsize", ")", ":", "\n", "                ", "if", "(", "i", ",", "j", ",", "k", ")", "not", "in", "loc2pc", ":", "\n", "                    ", "vol", "[", "i", ",", "j", ",", "k", ",", ":", ",", ":", "]", "=", "np", ".", "zeros", "(", "(", "num_sample", ",", "3", ")", ")", "\n", "", "else", ":", "\n", "                    ", "pc", "=", "loc2pc", "[", "(", "i", ",", "j", ",", "k", ")", "]", "# a list of (3,) arrays", "\n", "pc", "=", "np", ".", "vstack", "(", "pc", ")", "# kx3", "\n", "# Sample/pad to num_sample points", "\n", "if", "pc", ".", "shape", "[", "0", "]", ">", "num_sample", ":", "\n", "                        ", "choices", "=", "np", ".", "random", ".", "choice", "(", "pc", ".", "shape", "[", "0", "]", ",", "num_sample", ",", "replace", "=", "False", ")", "\n", "pc", "=", "pc", "[", "choices", ",", ":", "]", "\n", "", "elif", "pc", ".", "shape", "[", "0", "]", "<", "num_sample", ":", "\n", "                        ", "pc", "=", "np", ".", "lib", ".", "pad", "(", "pc", ",", "(", "(", "0", ",", "num_sample", "-", "pc", ".", "shape", "[", "0", "]", ")", ",", "(", "0", ",", "0", ")", ")", ",", "'edge'", ")", "\n", "# Normalize", "\n", "", "pc_center", "=", "(", "np", ".", "array", "(", "[", "i", ",", "j", ",", "k", "]", ")", "+", "0.5", ")", "*", "voxel", "-", "radius", "\n", "#print 'pc center: ', pc_center", "\n", "pc", "=", "(", "pc", "-", "pc_center", ")", "/", "voxel", "# shift and scale", "\n", "vol", "[", "i", ",", "j", ",", "k", ",", ":", ",", ":", "]", "=", "pc", "\n", "#print (i,j,k), vol[i,j,k,:,:]", "\n", "", "", "", "", "return", "vol", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.pc_util.point_cloud_to_image_batch": [[126, 136], ["range", "numpy.concatenate", "pc_util.point_cloud_to_image", "img_list.append", "numpy.expand_dims"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.pc_util.point_cloud_to_image"], ["", "def", "point_cloud_to_image_batch", "(", "point_clouds", ",", "imgsize", ",", "radius", "=", "1.0", ",", "num_sample", "=", "128", ")", ":", "\n", "    ", "\"\"\" Input is BxNx3 a batch of point cloud\n        Output is BxIxIxnum_samplex3\n        Added on Feb 19\n    \"\"\"", "\n", "img_list", "=", "[", "]", "\n", "for", "b", "in", "range", "(", "point_clouds", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "img", "=", "point_cloud_to_image", "(", "point_clouds", "[", "b", ",", ":", ",", ":", "]", ",", "imgsize", ",", "radius", ",", "num_sample", ")", "\n", "img_list", ".", "append", "(", "np", ".", "expand_dims", "(", "img", ",", "0", ")", ")", "\n", "", "return", "np", ".", "concatenate", "(", "img_list", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.pc_util.point_cloud_to_image": [[138, 172], ["numpy.zeros", "locations.astype.astype", "range", "range", "float", "tuple", "loc2pc[].append", "range", "numpy.zeros", "numpy.vstack", "numpy.random.choice", "numpy.lib.pad", "numpy.array"], "function", ["None"], ["", "def", "point_cloud_to_image", "(", "points", ",", "imgsize", ",", "radius", "=", "1.0", ",", "num_sample", "=", "128", ")", ":", "\n", "    ", "\"\"\" input is Nx3 points\n        output is imgsize*imgsize*num_sample*3\n        assumes points are in range [-radius, radius]\n        samples num_sample points in each pixel, if there are less than\n        num_sample points, replicate the points\n        Added on Feb 19\n    \"\"\"", "\n", "img", "=", "np", ".", "zeros", "(", "(", "imgsize", ",", "imgsize", ",", "num_sample", ",", "3", ")", ")", "\n", "pixel", "=", "2", "*", "radius", "/", "float", "(", "imgsize", ")", "\n", "locations", "=", "(", "points", "[", ":", ",", "0", ":", "2", "]", "+", "radius", ")", "/", "pixel", "# Nx2", "\n", "locations", "=", "locations", ".", "astype", "(", "int", ")", "\n", "loc2pc", "=", "{", "}", "\n", "for", "n", "in", "range", "(", "points", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "loc", "=", "tuple", "(", "locations", "[", "n", ",", ":", "]", ")", "\n", "if", "loc", "not", "in", "loc2pc", ":", "\n", "            ", "loc2pc", "[", "loc", "]", "=", "[", "]", "\n", "", "loc2pc", "[", "loc", "]", ".", "append", "(", "points", "[", "n", ",", ":", "]", ")", "\n", "", "for", "i", "in", "range", "(", "imgsize", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "imgsize", ")", ":", "\n", "            ", "if", "(", "i", ",", "j", ")", "not", "in", "loc2pc", ":", "\n", "                ", "img", "[", "i", ",", "j", ",", ":", ",", ":", "]", "=", "np", ".", "zeros", "(", "(", "num_sample", ",", "3", ")", ")", "\n", "", "else", ":", "\n", "                ", "pc", "=", "loc2pc", "[", "(", "i", ",", "j", ")", "]", "\n", "pc", "=", "np", ".", "vstack", "(", "pc", ")", "\n", "if", "pc", ".", "shape", "[", "0", "]", ">", "num_sample", ":", "\n", "                    ", "choices", "=", "np", ".", "random", ".", "choice", "(", "pc", ".", "shape", "[", "0", "]", ",", "num_sample", ",", "replace", "=", "False", ")", "\n", "pc", "=", "pc", "[", "choices", ",", ":", "]", "\n", "", "elif", "pc", ".", "shape", "[", "0", "]", "<", "num_sample", ":", "\n", "                    ", "pc", "=", "np", ".", "lib", ".", "pad", "(", "pc", ",", "(", "(", "0", ",", "num_sample", "-", "pc", ".", "shape", "[", "0", "]", ")", ",", "(", "0", ",", "0", ")", ")", ",", "'edge'", ")", "\n", "", "pc_center", "=", "(", "np", ".", "array", "(", "[", "i", ",", "j", "]", ")", "+", "0.5", ")", "*", "pixel", "-", "radius", "\n", "pc", "[", ":", ",", "0", ":", "2", "]", "=", "(", "pc", "[", ":", ",", "0", ":", "2", "]", "-", "pc_center", ")", "/", "pixel", "\n", "img", "[", "i", ",", "j", ",", ":", ",", ":", "]", "=", "pc", "\n", "", "", "", "return", "img", "\n", "# ----------------------------------------", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.pc_util.read_ply": [[176, 182], ["plyfile.PlyData.read", "numpy.array"], "function", ["None"], ["", "def", "read_ply", "(", "filename", ")", ":", "\n", "    ", "\"\"\" read XYZ point cloud from filename PLY file \"\"\"", "\n", "plydata", "=", "PlyData", ".", "read", "(", "filename", ")", "\n", "pc", "=", "plydata", "[", "'vertex'", "]", ".", "data", "\n", "pc_array", "=", "np", ".", "array", "(", "[", "[", "x", ",", "y", ",", "z", "]", "for", "x", ",", "y", ",", "z", "in", "pc", "]", ")", "\n", "return", "pc_array", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.pc_util.write_ply": [[184, 190], ["numpy.array", "plyfile.PlyElement.describe", "plyfile.PlyData().write", "range", "plyfile.PlyData"], "function", ["None"], ["", "def", "write_ply", "(", "points", ",", "filename", ",", "text", "=", "True", ")", ":", "\n", "    ", "\"\"\" input: Nx3, write points to filename as PLY format. \"\"\"", "\n", "points", "=", "[", "(", "points", "[", "i", ",", "0", "]", ",", "points", "[", "i", ",", "1", "]", ",", "points", "[", "i", ",", "2", "]", ")", "for", "i", "in", "range", "(", "points", ".", "shape", "[", "0", "]", ")", "]", "\n", "vertex", "=", "np", ".", "array", "(", "points", ",", "dtype", "=", "[", "(", "'x'", ",", "'f4'", ")", ",", "(", "'y'", ",", "'f4'", ")", ",", "(", "'z'", ",", "'f4'", ")", "]", ")", "\n", "el", "=", "PlyElement", ".", "describe", "(", "vertex", ",", "'vertex'", ",", "comments", "=", "[", "'vertices'", "]", ")", "\n", "PlyData", "(", "[", "el", "]", ",", "text", "=", "text", ")", ".", "write", "(", "filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.pc_util.draw_point_cloud": [[196, 254], ["numpy.zeros", "eulerangles.euler2mat", "numpy.dot().transpose", "numpy.zeros", "range", "numpy.argwhere", "numpy.argsort", "numpy.max", "range", "numpy.mean", "numpy.max", "range", "numpy.max", "int", "int", "numpy.max", "numpy.dot", "numpy.sqrt", "numpy.min", "numpy.round", "numpy.round", "np.dot().transpose.transpose", "numpy.sum", "numpy.exp", "numpy.min", "abs"], "function", ["None"], ["", "def", "draw_point_cloud", "(", "input_points", ",", "canvasSize", "=", "500", ",", "space", "=", "200", ",", "diameter", "=", "25", ",", "\n", "xrot", "=", "0", ",", "yrot", "=", "0", ",", "zrot", "=", "0", ",", "switch_xyz", "=", "[", "0", ",", "1", ",", "2", "]", ",", "normalize", "=", "True", ")", ":", "\n", "    ", "\"\"\" Render point cloud to image with alpha channel.\n        Input:\n            points: Nx3 numpy array (+y is up direction)\n        Output:\n            gray image as numpy array of size canvasSizexcanvasSize\n    \"\"\"", "\n", "image", "=", "np", ".", "zeros", "(", "(", "canvasSize", ",", "canvasSize", ")", ")", "\n", "if", "input_points", "is", "None", "or", "input_points", ".", "shape", "[", "0", "]", "==", "0", ":", "\n", "        ", "return", "image", "\n", "\n", "", "points", "=", "input_points", "[", ":", ",", "switch_xyz", "]", "\n", "M", "=", "euler2mat", "(", "zrot", ",", "yrot", ",", "xrot", ")", "\n", "points", "=", "(", "np", ".", "dot", "(", "M", ",", "points", ".", "transpose", "(", ")", ")", ")", ".", "transpose", "(", ")", "\n", "\n", "# Normalize the point cloud", "\n", "# We normalize scale to fit points in a unit sphere", "\n", "if", "normalize", ":", "\n", "        ", "centroid", "=", "np", ".", "mean", "(", "points", ",", "axis", "=", "0", ")", "\n", "points", "-=", "centroid", "\n", "furthest_distance", "=", "np", ".", "max", "(", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "abs", "(", "points", ")", "**", "2", ",", "axis", "=", "-", "1", ")", ")", ")", "\n", "points", "/=", "furthest_distance", "\n", "\n", "# Pre-compute the Gaussian disk", "\n", "", "radius", "=", "(", "diameter", "-", "1", ")", "/", "2.0", "\n", "disk", "=", "np", ".", "zeros", "(", "(", "diameter", ",", "diameter", ")", ")", "\n", "for", "i", "in", "range", "(", "diameter", ")", ":", "\n", "        ", "for", "j", "in", "range", "(", "diameter", ")", ":", "\n", "            ", "if", "(", "i", "-", "radius", ")", "*", "(", "i", "-", "radius", ")", "+", "(", "j", "-", "radius", ")", "*", "(", "j", "-", "radius", ")", "<=", "radius", "*", "radius", ":", "\n", "                ", "disk", "[", "i", ",", "j", "]", "=", "np", ".", "exp", "(", "(", "-", "(", "i", "-", "radius", ")", "**", "2", "-", "(", "j", "-", "radius", ")", "**", "2", ")", "/", "(", "radius", "**", "2", ")", ")", "\n", "", "", "", "mask", "=", "np", ".", "argwhere", "(", "disk", ">", "0", ")", "\n", "dx", "=", "mask", "[", ":", ",", "0", "]", "\n", "dy", "=", "mask", "[", ":", ",", "1", "]", "\n", "dv", "=", "disk", "[", "disk", ">", "0", "]", "\n", "\n", "# Order points by z-buffer", "\n", "zorder", "=", "np", ".", "argsort", "(", "points", "[", ":", ",", "2", "]", ")", "\n", "points", "=", "points", "[", "zorder", ",", ":", "]", "\n", "points", "[", ":", ",", "2", "]", "=", "(", "points", "[", ":", ",", "2", "]", "-", "np", ".", "min", "(", "points", "[", ":", ",", "2", "]", ")", ")", "/", "(", "np", ".", "max", "(", "points", "[", ":", ",", "2", "]", "-", "np", ".", "min", "(", "points", "[", ":", ",", "2", "]", ")", ")", ")", "\n", "max_depth", "=", "np", ".", "max", "(", "points", "[", ":", ",", "2", "]", ")", "\n", "\n", "for", "i", "in", "range", "(", "points", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "j", "=", "points", ".", "shape", "[", "0", "]", "-", "i", "-", "1", "\n", "x", "=", "points", "[", "j", ",", "0", "]", "\n", "y", "=", "points", "[", "j", ",", "1", "]", "\n", "xc", "=", "canvasSize", "/", "2", "+", "(", "x", "*", "space", ")", "\n", "yc", "=", "canvasSize", "/", "2", "+", "(", "y", "*", "space", ")", "\n", "xc", "=", "int", "(", "np", ".", "round", "(", "xc", ")", ")", "\n", "yc", "=", "int", "(", "np", ".", "round", "(", "yc", ")", ")", "\n", "\n", "px", "=", "dx", "+", "xc", "\n", "py", "=", "dy", "+", "yc", "\n", "\n", "image", "[", "px", ",", "py", "]", "=", "image", "[", "px", ",", "py", "]", "*", "0.7", "+", "dv", "*", "(", "max_depth", "-", "points", "[", "j", ",", "2", "]", ")", "*", "0.3", "\n", "\n", "", "image", "=", "image", "/", "np", ".", "max", "(", "image", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.pc_util.point_cloud_three_views": [[255, 267], ["pc_util.draw_point_cloud", "pc_util.draw_point_cloud", "pc_util.draw_point_cloud", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.pc_util.draw_point_cloud", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.pc_util.draw_point_cloud", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.pc_util.draw_point_cloud"], ["", "def", "point_cloud_three_views", "(", "points", ")", ":", "\n", "    ", "\"\"\" input points Nx3 numpy array (+y is up direction).\n        return an numpy array gray image of size 500x1500. \"\"\"", "\n", "# +y is up direction", "\n", "# xrot is azimuth", "\n", "# yrot is in-plane", "\n", "# zrot is elevation", "\n", "img1", "=", "draw_point_cloud", "(", "points", ",", "zrot", "=", "110", "/", "180.0", "*", "np", ".", "pi", ",", "xrot", "=", "45", "/", "180.0", "*", "np", ".", "pi", ",", "yrot", "=", "0", "/", "180.0", "*", "np", ".", "pi", ")", "\n", "img2", "=", "draw_point_cloud", "(", "points", ",", "zrot", "=", "70", "/", "180.0", "*", "np", ".", "pi", ",", "xrot", "=", "135", "/", "180.0", "*", "np", ".", "pi", ",", "yrot", "=", "0", "/", "180.0", "*", "np", ".", "pi", ")", "\n", "img3", "=", "draw_point_cloud", "(", "points", ",", "zrot", "=", "180.0", "/", "180.0", "*", "np", ".", "pi", ",", "xrot", "=", "90", "/", "180.0", "*", "np", ".", "pi", ",", "yrot", "=", "0", "/", "180.0", "*", "np", ".", "pi", ")", "\n", "image_large", "=", "np", ".", "concatenate", "(", "[", "img1", ",", "img2", ",", "img3", "]", ",", "1", ")", "\n", "return", "image_large", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.pc_util.point_cloud_three_views_demo": [[269, 276], ["pc_util.read_ply", "pc_util.point_cloud_three_views", "Image.fromarray", "Image.fromarray.save", "numpy.uint8"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.pc_util.read_ply", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.pc_util.point_cloud_three_views"], ["", "def", "point_cloud_three_views_demo", "(", ")", ":", "\n", "    ", "\"\"\" Demo for draw_point_cloud function \"\"\"", "\n", "from", "PIL", "import", "Image", "\n", "points", "=", "read_ply", "(", "'../third_party/mesh_sampling/piano.ply'", ")", "\n", "im_array", "=", "point_cloud_three_views", "(", "points", ")", "\n", "img", "=", "Image", ".", "fromarray", "(", "np", ".", "uint8", "(", "im_array", "*", "255.0", ")", ")", "\n", "img", ".", "save", "(", "'piano.jpg'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.pc_util.pyplot_draw_point_cloud": [[281, 290], ["plt.figure", "plt.figure.add_subplot", "fig.add_subplot.scatter", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "fig.add_subplot.set_zlabel"], "function", ["None"], ["", "def", "pyplot_draw_point_cloud", "(", "points", ",", "output_filename", ")", ":", "\n", "    ", "\"\"\" points is a Nx3 numpy array \"\"\"", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ",", "projection", "=", "'3d'", ")", "\n", "ax", ".", "scatter", "(", "points", "[", ":", ",", "0", "]", ",", "points", "[", ":", ",", "1", "]", ",", "points", "[", ":", ",", "2", "]", ")", "\n", "ax", ".", "set_xlabel", "(", "'x'", ")", "\n", "ax", ".", "set_ylabel", "(", "'y'", ")", "\n", "ax", ".", "set_zlabel", "(", "'z'", ")", "\n", "#savefig(output_filename)", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.pc_util.pyplot_draw_volume": [[292, 298], ["pc_util.volume_to_point_cloud", "pc_util.pyplot_draw_point_cloud"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.pc_util.volume_to_point_cloud", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.pc_util.pyplot_draw_point_cloud"], ["", "def", "pyplot_draw_volume", "(", "vol", ",", "output_filename", ")", ":", "\n", "    ", "\"\"\" vol is of size vsize*vsize*vsize\n        output an image to output_filename\n    \"\"\"", "\n", "points", "=", "volume_to_point_cloud", "(", "vol", ")", "\n", "pyplot_draw_point_cloud", "(", "points", ",", "output_filename", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.pc_util.write_ply_color": [[299, 316], ["labels.astype.astype", "open", "range", "open.close", "pyplot.cm.jet", "open.write", "numpy.max", "numpy.max", "range", "int", "float"], "function", ["None"], ["", "def", "write_ply_color", "(", "points", ",", "labels", ",", "out_filename", ",", "num_classes", "=", "None", ")", ":", "\n", "    ", "\"\"\" Color (N,3) points with labels (N) within range 0 ~ num_classes-1 as OBJ file \"\"\"", "\n", "import", "matplotlib", ".", "pyplot", "as", "pyplot", "\n", "labels", "=", "labels", ".", "astype", "(", "int", ")", "\n", "N", "=", "points", ".", "shape", "[", "0", "]", "\n", "if", "num_classes", "is", "None", ":", "\n", "        ", "num_classes", "=", "np", ".", "max", "(", "labels", ")", "+", "1", "\n", "", "else", ":", "\n", "        ", "assert", "(", "num_classes", ">", "np", ".", "max", "(", "labels", ")", ")", "\n", "", "fout", "=", "open", "(", "out_filename", ",", "'w'", ")", "\n", "#colors = [pyplot.cm.hsv(i/float(num_classes)) for i in range(num_classes)]", "\n", "colors", "=", "[", "pyplot", ".", "cm", ".", "jet", "(", "i", "/", "float", "(", "num_classes", ")", ")", "for", "i", "in", "range", "(", "num_classes", ")", "]", "\n", "for", "i", "in", "range", "(", "N", ")", ":", "\n", "        ", "c", "=", "colors", "[", "labels", "[", "i", "]", "]", "\n", "c", "=", "[", "int", "(", "x", "*", "255", ")", "for", "x", "in", "c", "]", "\n", "fout", ".", "write", "(", "'v %f %f %f %d %d %d\\n'", "%", "(", "points", "[", "i", ",", "0", "]", ",", "points", "[", "i", ",", "1", "]", ",", "points", "[", "i", ",", "2", "]", ",", "c", "[", "0", "]", ",", "c", "[", "1", "]", ",", "c", "[", "2", "]", ")", ")", "\n", "", "fout", ".", "close", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util._variable_on_gpu": [[10, 23], ["tensorflow.device", "tensorflow.get_variable"], "function", ["None"], ["def", "_variable_on_gpu", "(", "name", ",", "shape", ",", "initializer", ",", "use_fp16", "=", "False", ")", ":", "\n", "  ", "\"\"\"Helper to create a Variable stored on CPU memory.\n  Args:\n    name: name of the variable\n    shape: list of ints\n    initializer: initializer for Variable\n  Returns:\n    Variable Tensor\n  \"\"\"", "\n", "with", "tf", ".", "device", "(", "\"/gpu:0\"", ")", ":", "\n", "    ", "dtype", "=", "tf", ".", "float16", "if", "use_fp16", "else", "tf", ".", "float32", "\n", "var", "=", "tf", ".", "get_variable", "(", "name", ",", "shape", ",", "initializer", "=", "initializer", ",", "dtype", "=", "dtype", ")", "\n", "", "return", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util._variable_with_weight_decay": [[24, 50], ["tf_util._variable_on_gpu", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.truncated_normal_initializer", "tensorflow.multiply", "tensorflow.add_to_collection", "tensorflow.nn.l2_loss"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util._variable_on_gpu"], ["", "def", "_variable_with_weight_decay", "(", "name", ",", "shape", ",", "stddev", ",", "wd", ",", "use_xavier", "=", "True", ")", ":", "\n", "  ", "\"\"\"Helper to create an initialized Variable with weight decay.\n\n  Note that the Variable is initialized with a truncated normal distribution.\n  A weight decay is added only if one is specified.\n\n  Args:\n    name: name of the variable\n    shape: list of ints\n    stddev: standard deviation of a truncated Gaussian\n    wd: add L2Loss weight decay multiplied by this float. If None, weight\n        decay is not added for this Variable.\n    use_xavier: bool, whether to use xavier initializer\n\n  Returns:\n    Variable Tensor\n  \"\"\"", "\n", "if", "use_xavier", ":", "\n", "    ", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "", "else", ":", "\n", "    ", "initializer", "=", "tf", ".", "truncated_normal_initializer", "(", "stddev", "=", "stddev", ")", "\n", "", "var", "=", "_variable_on_gpu", "(", "name", ",", "shape", ",", "initializer", ")", "\n", "if", "wd", "is", "not", "None", ":", "\n", "    ", "weight_decay", "=", "tf", ".", "multiply", "(", "tf", ".", "nn", ".", "l2_loss", "(", "var", ")", ",", "wd", ",", "name", "=", "'weight_loss'", ")", "\n", "tf", ".", "add_to_collection", "(", "'losses'", ",", "weight_decay", ")", "\n", "", "return", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.conv1d": [[52, 116], ["tensorflow.variable_scope", "tf_util._variable_with_weight_decay", "tensorflow.nn.conv1d", "tf_util._variable_on_gpu", "tensorflow.nn.bias_add", "tensorflow.constant_initializer", "tf_util.batch_norm_for_conv1d", "activation_fn", "inputs.get_shape", "inputs.get_shape"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util._variable_with_weight_decay", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.conv1d", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util._variable_on_gpu", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.batch_norm_for_conv1d"], ["", "def", "conv1d", "(", "inputs", ",", "\n", "num_output_channels", ",", "\n", "kernel_size", ",", "\n", "scope", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "'SAME'", ",", "\n", "data_format", "=", "'NHWC'", ",", "\n", "use_xavier", "=", "True", ",", "\n", "stddev", "=", "1e-3", ",", "\n", "weight_decay", "=", "None", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "bn", "=", "False", ",", "\n", "bn_decay", "=", "None", ",", "\n", "is_training", "=", "None", ")", ":", "\n", "  ", "\"\"\" 1D convolution with non-linear operation.\n\n  Args:\n    inputs: 3-D tensor variable BxLxC\n    num_output_channels: int\n    kernel_size: int\n    scope: string\n    stride: int\n    padding: 'SAME' or 'VALID'\n    data_format: 'NHWC' or 'NCHW'\n    use_xavier: bool, use xavier_initializer if true\n    stddev: float, stddev for truncated_normal init\n    weight_decay: float\n    activation_fn: function\n    bn: bool, whether to use batch norm\n    bn_decay: float or float tensor variable in [0,1]\n    is_training: bool Tensor variable\n\n  Returns:\n    Variable tensor\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", "as", "sc", ":", "\n", "    ", "assert", "(", "data_format", "==", "'NHWC'", "or", "data_format", "==", "'NCHW'", ")", "\n", "if", "data_format", "==", "'NHWC'", ":", "\n", "      ", "num_in_channels", "=", "inputs", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "\n", "", "elif", "data_format", "==", "'NCHW'", ":", "\n", "      ", "num_in_channels", "=", "inputs", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "", "kernel_shape", "=", "[", "kernel_size", ",", "\n", "num_in_channels", ",", "num_output_channels", "]", "\n", "kernel", "=", "_variable_with_weight_decay", "(", "'weights'", ",", "\n", "shape", "=", "kernel_shape", ",", "\n", "use_xavier", "=", "use_xavier", ",", "\n", "stddev", "=", "stddev", ",", "\n", "wd", "=", "weight_decay", ")", "\n", "outputs", "=", "tf", ".", "nn", ".", "conv1d", "(", "inputs", ",", "kernel", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "padding", ",", "\n", "data_format", "=", "'NWC'", "if", "data_format", "==", "'NHWC'", "else", "'NCHW'", ")", "\n", "biases", "=", "_variable_on_gpu", "(", "'biases'", ",", "[", "num_output_channels", "]", ",", "\n", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "outputs", "=", "tf", ".", "nn", ".", "bias_add", "(", "outputs", ",", "biases", ",", "data_format", ")", "\n", "\n", "if", "bn", ":", "\n", "      ", "outputs", "=", "batch_norm_for_conv1d", "(", "outputs", ",", "is_training", ",", "\n", "bn_decay", "=", "bn_decay", ",", "scope", "=", "'bn'", ",", "\n", "data_format", "=", "data_format", ")", "\n", "\n", "", "if", "activation_fn", "is", "not", "None", ":", "\n", "      ", "outputs", "=", "activation_fn", "(", "outputs", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.conv2d": [[120, 186], ["tensorflow.variable_scope", "tf_util._variable_with_weight_decay", "tensorflow.nn.conv2d", "tf_util._variable_on_gpu", "tensorflow.nn.bias_add", "tensorflow.constant_initializer", "tf_util.batch_norm_for_conv2d", "activation_fn", "inputs.get_shape", "inputs.get_shape"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util._variable_with_weight_decay", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.conv2d", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util._variable_on_gpu", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.batch_norm_for_conv2d"], ["", "", "def", "conv2d", "(", "inputs", ",", "\n", "num_output_channels", ",", "\n", "kernel_size", ",", "\n", "scope", ",", "\n", "stride", "=", "[", "1", ",", "1", "]", ",", "\n", "padding", "=", "'SAME'", ",", "\n", "data_format", "=", "'NHWC'", ",", "\n", "use_xavier", "=", "True", ",", "\n", "stddev", "=", "1e-3", ",", "\n", "weight_decay", "=", "None", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "bn", "=", "False", ",", "\n", "bn_decay", "=", "None", ",", "\n", "is_training", "=", "None", ")", ":", "\n", "  ", "\"\"\" 2D convolution with non-linear operation.\n\n  Args:\n    inputs: 4-D tensor variable BxHxWxC\n    num_output_channels: int\n    kernel_size: a list of 2 ints\n    scope: string\n    stride: a list of 2 ints\n    padding: 'SAME' or 'VALID'\n    data_format: 'NHWC' or 'NCHW'\n    use_xavier: bool, use xavier_initializer if true\n    stddev: float, stddev for truncated_normal init\n    weight_decay: float\n    activation_fn: function\n    bn: bool, whether to use batch norm\n    bn_decay: float or float tensor variable in [0,1]\n    is_training: bool Tensor variable\n\n  Returns:\n    Variable tensor\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", "as", "sc", ":", "\n", "      ", "kernel_h", ",", "kernel_w", "=", "kernel_size", "\n", "assert", "(", "data_format", "==", "'NHWC'", "or", "data_format", "==", "'NCHW'", ")", "\n", "if", "data_format", "==", "'NHWC'", ":", "\n", "        ", "num_in_channels", "=", "inputs", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "\n", "", "elif", "data_format", "==", "'NCHW'", ":", "\n", "        ", "num_in_channels", "=", "inputs", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "", "kernel_shape", "=", "[", "kernel_h", ",", "kernel_w", ",", "\n", "num_in_channels", ",", "num_output_channels", "]", "\n", "kernel", "=", "_variable_with_weight_decay", "(", "'weights'", ",", "\n", "shape", "=", "kernel_shape", ",", "\n", "use_xavier", "=", "use_xavier", ",", "\n", "stddev", "=", "stddev", ",", "\n", "wd", "=", "weight_decay", ")", "\n", "stride_h", ",", "stride_w", "=", "stride", "\n", "outputs", "=", "tf", ".", "nn", ".", "conv2d", "(", "inputs", ",", "kernel", ",", "\n", "[", "1", ",", "stride_h", ",", "stride_w", ",", "1", "]", ",", "\n", "padding", "=", "padding", ",", "\n", "data_format", "=", "data_format", ")", "\n", "biases", "=", "_variable_on_gpu", "(", "'biases'", ",", "[", "num_output_channels", "]", ",", "\n", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "outputs", "=", "tf", ".", "nn", ".", "bias_add", "(", "outputs", ",", "biases", ",", "data_format", "=", "data_format", ")", "\n", "\n", "if", "bn", ":", "\n", "        ", "outputs", "=", "batch_norm_for_conv2d", "(", "outputs", ",", "is_training", ",", "\n", "bn_decay", "=", "bn_decay", ",", "scope", "=", "'bn'", ",", "\n", "data_format", "=", "data_format", ")", "\n", "\n", "", "if", "activation_fn", "is", "not", "None", ":", "\n", "        ", "outputs", "=", "activation_fn", "(", "outputs", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.conv2d_transpose": [[188, 265], ["tensorflow.variable_scope", "tf_util._variable_with_weight_decay", "tf_util.conv2d_transpose.get_deconv_dim"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util._variable_with_weight_decay"], ["", "", "def", "conv2d_transpose", "(", "inputs", ",", "\n", "num_output_channels", ",", "\n", "kernel_size", ",", "\n", "scope", ",", "\n", "stride", "=", "[", "1", ",", "1", "]", ",", "\n", "padding", "=", "'SAME'", ",", "\n", "use_xavier", "=", "True", ",", "\n", "stddev", "=", "1e-3", ",", "\n", "weight_decay", "=", "None", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "bn", "=", "False", ",", "\n", "bn_decay", "=", "None", ",", "\n", "is_training", "=", "None", ")", ":", "\n", "  ", "\"\"\" 2D convolution transpose with non-linear operation.\n\n  Args:\n    inputs: 4-D tensor variable BxHxWxC\n    num_output_channels: int\n    kernel_size: a list of 2 ints\n    scope: string\n    stride: a list of 2 ints\n    padding: 'SAME' or 'VALID'\n    use_xavier: bool, use xavier_initializer if true\n    stddev: float, stddev for truncated_normal init\n    weight_decay: float\n    activation_fn: function\n    bn: bool, whether to use batch norm\n    bn_decay: float or float tensor variable in [0,1]\n    is_training: bool Tensor variable\n\n  Returns:\n    Variable tensor\n\n  Note: conv2d(conv2d_transpose(a, num_out, ksize, stride), a.shape[-1], ksize, stride) == a\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", "as", "sc", ":", "\n", "      ", "kernel_h", ",", "kernel_w", "=", "kernel_size", "\n", "num_in_channels", "=", "inputs", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "\n", "kernel_shape", "=", "[", "kernel_h", ",", "kernel_w", ",", "\n", "num_output_channels", ",", "num_in_channels", "]", "# reversed to conv2d", "\n", "kernel", "=", "_variable_with_weight_decay", "(", "'weights'", ",", "\n", "shape", "=", "kernel_shape", ",", "\n", "use_xavier", "=", "use_xavier", ",", "\n", "stddev", "=", "stddev", ",", "\n", "wd", "=", "weight_decay", ")", "\n", "stride_h", ",", "stride_w", "=", "stride", "\n", "\n", "# from slim.convolution2d_transpose", "\n", "def", "get_deconv_dim", "(", "dim_size", ",", "stride_size", ",", "kernel_size", ",", "padding", ")", ":", "\n", "          ", "dim_size", "*=", "stride_size", "\n", "\n", "if", "padding", "==", "'VALID'", "and", "dim_size", "is", "not", "None", ":", "\n", "            ", "dim_size", "+=", "max", "(", "kernel_size", "-", "stride_size", ",", "0", ")", "\n", "", "return", "dim_size", "\n", "\n", "# caculate output shape", "\n", "", "batch_size", "=", "inputs", ".", "get_shape", "(", ")", "[", "0", "]", ".", "value", "\n", "height", "=", "inputs", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "width", "=", "inputs", ".", "get_shape", "(", ")", "[", "2", "]", ".", "value", "\n", "out_height", "=", "get_deconv_dim", "(", "height", ",", "stride_h", ",", "kernel_h", ",", "padding", ")", "\n", "out_width", "=", "get_deconv_dim", "(", "width", ",", "stride_w", ",", "kernel_w", ",", "padding", ")", "\n", "output_shape", "=", "[", "batch_size", ",", "out_height", ",", "out_width", ",", "num_output_channels", "]", "\n", "\n", "outputs", "=", "tf", ".", "nn", ".", "conv2d_transpose", "(", "inputs", ",", "kernel", ",", "output_shape", ",", "\n", "[", "1", ",", "stride_h", ",", "stride_w", ",", "1", "]", ",", "\n", "padding", "=", "padding", ")", "\n", "biases", "=", "_variable_on_gpu", "(", "'biases'", ",", "[", "num_output_channels", "]", ",", "\n", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "outputs", "=", "tf", ".", "nn", ".", "bias_add", "(", "outputs", ",", "biases", ")", "\n", "\n", "if", "bn", ":", "\n", "        ", "outputs", "=", "batch_norm_for_conv2d", "(", "outputs", ",", "is_training", ",", "\n", "bn_decay", "=", "bn_decay", ",", "scope", "=", "'bn'", ")", "\n", "\n", "", "if", "activation_fn", "is", "not", "None", ":", "\n", "        ", "outputs", "=", "activation_fn", "(", "outputs", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.conv3d": [[268, 326], ["tensorflow.variable_scope", "tf_util._variable_with_weight_decay", "tensorflow.nn.conv3d", "tf_util._variable_on_gpu", "tensorflow.nn.bias_add", "tensorflow.constant_initializer", "tf_util.batch_norm_for_conv3d", "activation_fn", "inputs.get_shape"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util._variable_with_weight_decay", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.conv3d", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util._variable_on_gpu", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.batch_norm_for_conv3d"], ["", "", "def", "conv3d", "(", "inputs", ",", "\n", "num_output_channels", ",", "\n", "kernel_size", ",", "\n", "scope", ",", "\n", "stride", "=", "[", "1", ",", "1", ",", "1", "]", ",", "\n", "padding", "=", "'SAME'", ",", "\n", "use_xavier", "=", "True", ",", "\n", "stddev", "=", "1e-3", ",", "\n", "weight_decay", "=", "None", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "bn", "=", "False", ",", "\n", "bn_decay", "=", "None", ",", "\n", "is_training", "=", "None", ")", ":", "\n", "  ", "\"\"\" 3D convolution with non-linear operation.\n\n  Args:\n    inputs: 5-D tensor variable BxDxHxWxC\n    num_output_channels: int\n    kernel_size: a list of 3 ints\n    scope: string\n    stride: a list of 3 ints\n    padding: 'SAME' or 'VALID'\n    use_xavier: bool, use xavier_initializer if true\n    stddev: float, stddev for truncated_normal init\n    weight_decay: float\n    activation_fn: function\n    bn: bool, whether to use batch norm\n    bn_decay: float or float tensor variable in [0,1]\n    is_training: bool Tensor variable\n\n  Returns:\n    Variable tensor\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", "as", "sc", ":", "\n", "    ", "kernel_d", ",", "kernel_h", ",", "kernel_w", "=", "kernel_size", "\n", "num_in_channels", "=", "inputs", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "\n", "kernel_shape", "=", "[", "kernel_d", ",", "kernel_h", ",", "kernel_w", ",", "\n", "num_in_channels", ",", "num_output_channels", "]", "\n", "kernel", "=", "_variable_with_weight_decay", "(", "'weights'", ",", "\n", "shape", "=", "kernel_shape", ",", "\n", "use_xavier", "=", "use_xavier", ",", "\n", "stddev", "=", "stddev", ",", "\n", "wd", "=", "weight_decay", ")", "\n", "stride_d", ",", "stride_h", ",", "stride_w", "=", "stride", "\n", "outputs", "=", "tf", ".", "nn", ".", "conv3d", "(", "inputs", ",", "kernel", ",", "\n", "[", "1", ",", "stride_d", ",", "stride_h", ",", "stride_w", ",", "1", "]", ",", "\n", "padding", "=", "padding", ")", "\n", "biases", "=", "_variable_on_gpu", "(", "'biases'", ",", "[", "num_output_channels", "]", ",", "\n", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "outputs", "=", "tf", ".", "nn", ".", "bias_add", "(", "outputs", ",", "biases", ")", "\n", "\n", "if", "bn", ":", "\n", "      ", "outputs", "=", "batch_norm_for_conv3d", "(", "outputs", ",", "is_training", ",", "\n", "bn_decay", "=", "bn_decay", ",", "scope", "=", "'bn'", ")", "\n", "\n", "", "if", "activation_fn", "is", "not", "None", ":", "\n", "      ", "outputs", "=", "activation_fn", "(", "outputs", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.fully_connected": [[327, 364], ["tensorflow.variable_scope", "tf_util._variable_with_weight_decay", "tensorflow.matmul", "tf_util._variable_on_gpu", "tensorflow.nn.bias_add", "tensorflow.constant_initializer", "tf_util.batch_norm_for_fc", "activation_fn", "inputs.get_shape"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util._variable_with_weight_decay", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util._variable_on_gpu", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.batch_norm_for_fc"], ["", "", "def", "fully_connected", "(", "inputs", ",", "\n", "num_outputs", ",", "\n", "scope", ",", "\n", "use_xavier", "=", "True", ",", "\n", "stddev", "=", "1e-3", ",", "\n", "weight_decay", "=", "None", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "relu", ",", "\n", "bn", "=", "False", ",", "\n", "bn_decay", "=", "None", ",", "\n", "is_training", "=", "None", ")", ":", "\n", "  ", "\"\"\" Fully connected layer with non-linear operation.\n  \n  Args:\n    inputs: 2-D tensor BxN\n    num_outputs: int\n  \n  Returns:\n    Variable tensor of size B x num_outputs.\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", "as", "sc", ":", "\n", "    ", "num_input_units", "=", "inputs", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "\n", "weights", "=", "_variable_with_weight_decay", "(", "'weights'", ",", "\n", "shape", "=", "[", "num_input_units", ",", "num_outputs", "]", ",", "\n", "use_xavier", "=", "use_xavier", ",", "\n", "stddev", "=", "stddev", ",", "\n", "wd", "=", "weight_decay", ")", "\n", "outputs", "=", "tf", ".", "matmul", "(", "inputs", ",", "weights", ")", "\n", "biases", "=", "_variable_on_gpu", "(", "'biases'", ",", "[", "num_outputs", "]", ",", "\n", "tf", ".", "constant_initializer", "(", "0.0", ")", ")", "\n", "outputs", "=", "tf", ".", "nn", ".", "bias_add", "(", "outputs", ",", "biases", ")", "\n", "\n", "if", "bn", ":", "\n", "      ", "outputs", "=", "batch_norm_for_fc", "(", "outputs", ",", "is_training", ",", "bn_decay", ",", "'bn'", ")", "\n", "\n", "", "if", "activation_fn", "is", "not", "None", ":", "\n", "      ", "outputs", "=", "activation_fn", "(", "outputs", ")", "\n", "", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.max_pool2d": [[366, 390], ["tensorflow.variable_scope", "tensorflow.nn.max_pool"], "function", ["None"], ["", "", "def", "max_pool2d", "(", "inputs", ",", "\n", "kernel_size", ",", "\n", "scope", ",", "\n", "stride", "=", "[", "2", ",", "2", "]", ",", "\n", "padding", "=", "'VALID'", ")", ":", "\n", "  ", "\"\"\" 2D max pooling.\n\n  Args:\n    inputs: 4-D tensor BxHxWxC\n    kernel_size: a list of 2 ints\n    stride: a list of 2 ints\n  \n  Returns:\n    Variable tensor\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", "as", "sc", ":", "\n", "    ", "kernel_h", ",", "kernel_w", "=", "kernel_size", "\n", "stride_h", ",", "stride_w", "=", "stride", "\n", "outputs", "=", "tf", ".", "nn", ".", "max_pool", "(", "inputs", ",", "\n", "ksize", "=", "[", "1", ",", "kernel_h", ",", "kernel_w", ",", "1", "]", ",", "\n", "strides", "=", "[", "1", ",", "stride_h", ",", "stride_w", ",", "1", "]", ",", "\n", "padding", "=", "padding", ",", "\n", "name", "=", "sc", ".", "name", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.avg_pool2d": [[391, 415], ["tensorflow.variable_scope", "tensorflow.nn.avg_pool"], "function", ["None"], ["", "", "def", "avg_pool2d", "(", "inputs", ",", "\n", "kernel_size", ",", "\n", "scope", ",", "\n", "stride", "=", "[", "2", ",", "2", "]", ",", "\n", "padding", "=", "'VALID'", ")", ":", "\n", "  ", "\"\"\" 2D avg pooling.\n\n  Args:\n    inputs: 4-D tensor BxHxWxC\n    kernel_size: a list of 2 ints\n    stride: a list of 2 ints\n  \n  Returns:\n    Variable tensor\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", "as", "sc", ":", "\n", "    ", "kernel_h", ",", "kernel_w", "=", "kernel_size", "\n", "stride_h", ",", "stride_w", "=", "stride", "\n", "outputs", "=", "tf", ".", "nn", ".", "avg_pool", "(", "inputs", ",", "\n", "ksize", "=", "[", "1", ",", "kernel_h", ",", "kernel_w", ",", "1", "]", ",", "\n", "strides", "=", "[", "1", ",", "stride_h", ",", "stride_w", ",", "1", "]", ",", "\n", "padding", "=", "padding", ",", "\n", "name", "=", "sc", ".", "name", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.max_pool3d": [[417, 441], ["tensorflow.variable_scope", "tensorflow.nn.max_pool3d"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.max_pool3d"], ["", "", "def", "max_pool3d", "(", "inputs", ",", "\n", "kernel_size", ",", "\n", "scope", ",", "\n", "stride", "=", "[", "2", ",", "2", ",", "2", "]", ",", "\n", "padding", "=", "'VALID'", ")", ":", "\n", "  ", "\"\"\" 3D max pooling.\n\n  Args:\n    inputs: 5-D tensor BxDxHxWxC\n    kernel_size: a list of 3 ints\n    stride: a list of 3 ints\n  \n  Returns:\n    Variable tensor\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", "as", "sc", ":", "\n", "    ", "kernel_d", ",", "kernel_h", ",", "kernel_w", "=", "kernel_size", "\n", "stride_d", ",", "stride_h", ",", "stride_w", "=", "stride", "\n", "outputs", "=", "tf", ".", "nn", ".", "max_pool3d", "(", "inputs", ",", "\n", "ksize", "=", "[", "1", ",", "kernel_d", ",", "kernel_h", ",", "kernel_w", ",", "1", "]", ",", "\n", "strides", "=", "[", "1", ",", "stride_d", ",", "stride_h", ",", "stride_w", ",", "1", "]", ",", "\n", "padding", "=", "padding", ",", "\n", "name", "=", "sc", ".", "name", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.avg_pool3d": [[442, 466], ["tensorflow.variable_scope", "tensorflow.nn.avg_pool3d"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.avg_pool3d"], ["", "", "def", "avg_pool3d", "(", "inputs", ",", "\n", "kernel_size", ",", "\n", "scope", ",", "\n", "stride", "=", "[", "2", ",", "2", ",", "2", "]", ",", "\n", "padding", "=", "'VALID'", ")", ":", "\n", "  ", "\"\"\" 3D avg pooling.\n\n  Args:\n    inputs: 5-D tensor BxDxHxWxC\n    kernel_size: a list of 3 ints\n    stride: a list of 3 ints\n  \n  Returns:\n    Variable tensor\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", "as", "sc", ":", "\n", "    ", "kernel_d", ",", "kernel_h", ",", "kernel_w", "=", "kernel_size", "\n", "stride_d", ",", "stride_h", ",", "stride_w", "=", "stride", "\n", "outputs", "=", "tf", ".", "nn", ".", "avg_pool3d", "(", "inputs", ",", "\n", "ksize", "=", "[", "1", ",", "kernel_d", ",", "kernel_h", ",", "kernel_w", ",", "1", "]", ",", "\n", "strides", "=", "[", "1", ",", "stride_d", ",", "stride_h", ",", "stride_w", ",", "1", "]", ",", "\n", "padding", "=", "padding", ",", "\n", "name", "=", "sc", ".", "name", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.batch_norm_template_unused": [[468, 510], ["tensorflow.variable_scope", "tf_util._variable_on_gpu", "tf_util._variable_on_gpu", "tensorflow.nn.moments", "tensorflow.train.ExponentialMovingAverage", "tensorflow.cond", "tensorflow.nn.batch_normalization", "tensorflow.variable_scope", "tensorflow.cond", "inputs.get_shape", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.get_variable_scope", "tensorflow.control_dependencies", "tf.train.ExponentialMovingAverage.apply", "tensorflow.no_op", "tensorflow.identity", "tensorflow.identity", "tf.train.ExponentialMovingAverage.average", "tf.train.ExponentialMovingAverage.average"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util._variable_on_gpu", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util._variable_on_gpu"], ["", "", "def", "batch_norm_template_unused", "(", "inputs", ",", "is_training", ",", "scope", ",", "moments_dims", ",", "bn_decay", ")", ":", "\n", "  ", "\"\"\" NOTE: this is older version of the util func. it is deprecated.\n  Batch normalization on convolutional maps and beyond...\n  Ref.: http://stackoverflow.com/questions/33949786/how-could-i-use-batch-normalization-in-tensorflow\n  \n  Args:\n      inputs:        Tensor, k-D input ... x C could be BC or BHWC or BDHWC\n      is_training:   boolean tf.Varialbe, true indicates training phase\n      scope:         string, variable scope\n      moments_dims:  a list of ints, indicating dimensions for moments calculation\n      bn_decay:      float or float tensor variable, controling moving average weight\n  Return:\n      normed:        batch-normalized maps\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", "as", "sc", ":", "\n", "    ", "num_channels", "=", "inputs", ".", "get_shape", "(", ")", "[", "-", "1", "]", ".", "value", "\n", "beta", "=", "_variable_on_gpu", "(", "name", "=", "'beta'", ",", "shape", "=", "[", "num_channels", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "0", ")", ")", "\n", "gamma", "=", "_variable_on_gpu", "(", "name", "=", "'gamma'", ",", "shape", "=", "[", "num_channels", "]", ",", "\n", "initializer", "=", "tf", ".", "constant_initializer", "(", "1.0", ")", ")", "\n", "batch_mean", ",", "batch_var", "=", "tf", ".", "nn", ".", "moments", "(", "inputs", ",", "moments_dims", ",", "name", "=", "'moments'", ")", "\n", "decay", "=", "bn_decay", "if", "bn_decay", "is", "not", "None", "else", "0.9", "\n", "ema", "=", "tf", ".", "train", ".", "ExponentialMovingAverage", "(", "decay", "=", "decay", ")", "\n", "# Operator that maintains moving averages of variables.", "\n", "# Need to set reuse=False, otherwise if reuse, will see moments_1/mean/ExponentialMovingAverage/ does not exist", "\n", "# https://github.com/shekkizh/WassersteinGAN.tensorflow/issues/3", "\n", "with", "tf", ".", "variable_scope", "(", "tf", ".", "get_variable_scope", "(", ")", ",", "reuse", "=", "False", ")", ":", "\n", "        ", "ema_apply_op", "=", "tf", ".", "cond", "(", "is_training", ",", "\n", "lambda", ":", "ema", ".", "apply", "(", "[", "batch_mean", ",", "batch_var", "]", ")", ",", "\n", "lambda", ":", "tf", ".", "no_op", "(", ")", ")", "\n", "\n", "# Update moving average and return current batch's avg and var.", "\n", "", "def", "mean_var_with_update", "(", ")", ":", "\n", "      ", "with", "tf", ".", "control_dependencies", "(", "[", "ema_apply_op", "]", ")", ":", "\n", "        ", "return", "tf", ".", "identity", "(", "batch_mean", ")", ",", "tf", ".", "identity", "(", "batch_var", ")", "\n", "\n", "# ema.average returns the Variable holding the average of var.", "\n", "", "", "mean", ",", "var", "=", "tf", ".", "cond", "(", "is_training", ",", "\n", "mean_var_with_update", ",", "\n", "lambda", ":", "(", "ema", ".", "average", "(", "batch_mean", ")", ",", "ema", ".", "average", "(", "batch_var", ")", ")", ")", "\n", "normed", "=", "tf", ".", "nn", ".", "batch_normalization", "(", "inputs", ",", "mean", ",", "var", ",", "beta", ",", "gamma", ",", "1e-3", ")", "\n", "", "return", "normed", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.batch_norm_template": [[512, 532], ["tensorflow.contrib.layers.batch_norm"], "function", ["None"], ["", "def", "batch_norm_template", "(", "inputs", ",", "is_training", ",", "scope", ",", "moments_dims_unused", ",", "bn_decay", ",", "data_format", "=", "'NHWC'", ")", ":", "\n", "  ", "\"\"\" Batch normalization on convolutional maps and beyond...\n  Ref.: http://stackoverflow.com/questions/33949786/how-could-i-use-batch-normalization-in-tensorflow\n  \n  Args:\n      inputs:        Tensor, k-D input ... x C could be BC or BHWC or BDHWC\n      is_training:   boolean tf.Varialbe, true indicates training phase\n      scope:         string, variable scope\n      moments_dims:  a list of ints, indicating dimensions for moments calculation\n      bn_decay:      float or float tensor variable, controling moving average weight\n      data_format:   'NHWC' or 'NCHW'\n  Return:\n      normed:        batch-normalized maps\n  \"\"\"", "\n", "bn_decay", "=", "bn_decay", "if", "bn_decay", "is", "not", "None", "else", "0.9", "\n", "return", "tf", ".", "contrib", ".", "layers", ".", "batch_norm", "(", "inputs", ",", "\n", "center", "=", "True", ",", "scale", "=", "True", ",", "\n", "is_training", "=", "is_training", ",", "decay", "=", "bn_decay", ",", "updates_collections", "=", "None", ",", "\n", "scope", "=", "scope", ",", "\n", "data_format", "=", "data_format", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.batch_norm_for_fc": [[534, 546], ["tf_util.batch_norm_template"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.batch_norm_template"], ["", "def", "batch_norm_for_fc", "(", "inputs", ",", "is_training", ",", "bn_decay", ",", "scope", ")", ":", "\n", "  ", "\"\"\" Batch normalization on FC data.\n  \n  Args:\n      inputs:      Tensor, 2D BxC input\n      is_training: boolean tf.Varialbe, true indicates training phase\n      bn_decay:    float or float tensor variable, controling moving average weight\n      scope:       string, variable scope\n  Return:\n      normed:      batch-normalized maps\n  \"\"\"", "\n", "return", "batch_norm_template", "(", "inputs", ",", "is_training", ",", "scope", ",", "[", "0", ",", "]", ",", "bn_decay", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.batch_norm_for_conv1d": [[548, 561], ["tf_util.batch_norm_template"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.batch_norm_template"], ["", "def", "batch_norm_for_conv1d", "(", "inputs", ",", "is_training", ",", "bn_decay", ",", "scope", ",", "data_format", ")", ":", "\n", "  ", "\"\"\" Batch normalization on 1D convolutional maps.\n  \n  Args:\n      inputs:      Tensor, 3D BLC input maps\n      is_training: boolean tf.Varialbe, true indicates training phase\n      bn_decay:    float or float tensor variable, controling moving average weight\n      scope:       string, variable scope\n      data_format: 'NHWC' or 'NCHW'\n  Return:\n      normed:      batch-normalized maps\n  \"\"\"", "\n", "return", "batch_norm_template", "(", "inputs", ",", "is_training", ",", "scope", ",", "[", "0", ",", "1", "]", ",", "bn_decay", ",", "data_format", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.batch_norm_for_conv2d": [[565, 578], ["tf_util.batch_norm_template"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.batch_norm_template"], ["", "def", "batch_norm_for_conv2d", "(", "inputs", ",", "is_training", ",", "bn_decay", ",", "scope", ",", "data_format", ")", ":", "\n", "  ", "\"\"\" Batch normalization on 2D convolutional maps.\n  \n  Args:\n      inputs:      Tensor, 4D BHWC input maps\n      is_training: boolean tf.Varialbe, true indicates training phase\n      bn_decay:    float or float tensor variable, controling moving average weight\n      scope:       string, variable scope\n      data_format: 'NHWC' or 'NCHW'\n  Return:\n      normed:      batch-normalized maps\n  \"\"\"", "\n", "return", "batch_norm_template", "(", "inputs", ",", "is_training", ",", "scope", ",", "[", "0", ",", "1", ",", "2", "]", ",", "bn_decay", ",", "data_format", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.batch_norm_for_conv3d": [[580, 592], ["tf_util.batch_norm_template"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.batch_norm_template"], ["", "def", "batch_norm_for_conv3d", "(", "inputs", ",", "is_training", ",", "bn_decay", ",", "scope", ")", ":", "\n", "  ", "\"\"\" Batch normalization on 3D convolutional maps.\n  \n  Args:\n      inputs:      Tensor, 5D BDHWC input maps\n      is_training: boolean tf.Varialbe, true indicates training phase\n      bn_decay:    float or float tensor variable, controling moving average weight\n      scope:       string, variable scope\n  Return:\n      normed:      batch-normalized maps\n  \"\"\"", "\n", "return", "batch_norm_template", "(", "inputs", ",", "is_training", ",", "scope", ",", "[", "0", ",", "1", ",", "2", ",", "3", "]", ",", "bn_decay", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.dropout": [[594, 616], ["tensorflow.variable_scope", "tensorflow.cond", "tensorflow.nn.dropout"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.tf_util.dropout"], ["", "def", "dropout", "(", "inputs", ",", "\n", "is_training", ",", "\n", "scope", ",", "\n", "keep_prob", "=", "0.5", ",", "\n", "noise_shape", "=", "None", ")", ":", "\n", "  ", "\"\"\" Dropout layer.\n\n  Args:\n    inputs: tensor\n    is_training: boolean tf.Variable\n    scope: string\n    keep_prob: float in [0,1]\n    noise_shape: list of ints\n\n  Returns:\n    tensor variable\n  \"\"\"", "\n", "with", "tf", ".", "variable_scope", "(", "scope", ")", "as", "sc", ":", "\n", "    ", "outputs", "=", "tf", ".", "cond", "(", "is_training", ",", "\n", "lambda", ":", "tf", ".", "nn", ".", "dropout", "(", "inputs", ",", "keep_prob", ",", "noise_shape", ")", ",", "\n", "lambda", ":", "inputs", ")", "\n", "return", "outputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.show3d_balls.onmouse": [[12, 19], ["float", "float"], "function", ["None"], ["def", "onmouse", "(", "*", "args", ")", ":", "\n", "    ", "global", "mousex", ",", "mousey", ",", "changed", "\n", "y", "=", "args", "[", "1", "]", "\n", "x", "=", "args", "[", "2", "]", "\n", "mousex", "=", "x", "/", "float", "(", "showsz", ")", "\n", "mousey", "=", "y", "/", "float", "(", "showsz", ")", "\n", "changed", "=", "True", "\n", "", "cv2", ".", "namedWindow", "(", "'show3d'", ")", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.utils.show3d_balls.showpoints": [[25, 158], ["numpy.require", "numpy.require", "numpy.require", "numpy.zeros", "xyz.mean", "numpy.eye", "rotmat.dot.dot", "rotmat.dot.dot", "nxyz.astype", "dll.render_ball", "cv2.imshow", "numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.array", "numpy.array", "xyz.dot", "ctypes.c_int", "ctypes.c_int", "np.zeros.ctypes.data_as", "ctypes.c_int", "nxyz.astype.ctypes.data_as", "np.require.ctypes.data_as", "np.require.ctypes.data_as", "np.require.ctypes.data_as", "ctypes.c_int", "numpy.maximum", "numpy.maximum", "cv2.putText", "cv2.putText", "cv2.putText", "show3d_balls.showpoints.render"], "function", ["None"], ["def", "showpoints", "(", "xyz", ",", "c_gt", "=", "None", ",", "c_pred", "=", "None", ",", "waittime", "=", "0", ",", "showrot", "=", "False", ",", "magnifyBlue", "=", "0", ",", "freezerot", "=", "False", ",", "background", "=", "(", "0", ",", "0", ",", "0", ")", ",", "normalizecolor", "=", "True", ",", "ballradius", "=", "10", ")", ":", "\n", "    ", "global", "showsz", ",", "mousex", ",", "mousey", ",", "zoom", ",", "changed", "\n", "xyz", "=", "xyz", "-", "xyz", ".", "mean", "(", "axis", "=", "0", ")", "\n", "radius", "=", "(", "(", "xyz", "**", "2", ")", ".", "sum", "(", "axis", "=", "-", "1", ")", "**", "0.5", ")", ".", "max", "(", ")", "\n", "xyz", "/=", "(", "radius", "*", "2.2", ")", "/", "showsz", "\n", "if", "c_gt", "is", "None", ":", "\n", "        ", "c0", "=", "np", ".", "zeros", "(", "(", "len", "(", "xyz", ")", ",", ")", ",", "dtype", "=", "'float32'", ")", "+", "255", "\n", "c1", "=", "np", ".", "zeros", "(", "(", "len", "(", "xyz", ")", ",", ")", ",", "dtype", "=", "'float32'", ")", "+", "255", "\n", "c2", "=", "np", ".", "zeros", "(", "(", "len", "(", "xyz", ")", ",", ")", ",", "dtype", "=", "'float32'", ")", "+", "255", "\n", "", "else", ":", "\n", "        ", "c0", "=", "c_gt", "[", ":", ",", "0", "]", "\n", "c1", "=", "c_gt", "[", ":", ",", "1", "]", "\n", "c2", "=", "c_gt", "[", ":", ",", "2", "]", "\n", "\n", "\n", "", "if", "normalizecolor", ":", "\n", "        ", "c0", "/=", "(", "c0", ".", "max", "(", ")", "+", "1e-14", ")", "/", "255.0", "\n", "c1", "/=", "(", "c1", ".", "max", "(", ")", "+", "1e-14", ")", "/", "255.0", "\n", "c2", "/=", "(", "c2", ".", "max", "(", ")", "+", "1e-14", ")", "/", "255.0", "\n", "\n", "\n", "", "c0", "=", "np", ".", "require", "(", "c0", ",", "'float32'", ",", "'C'", ")", "\n", "c1", "=", "np", ".", "require", "(", "c1", ",", "'float32'", ",", "'C'", ")", "\n", "c2", "=", "np", ".", "require", "(", "c2", ",", "'float32'", ",", "'C'", ")", "\n", "\n", "show", "=", "np", ".", "zeros", "(", "(", "showsz", ",", "showsz", ",", "3", ")", ",", "dtype", "=", "'uint8'", ")", "\n", "def", "render", "(", ")", ":", "\n", "        ", "rotmat", "=", "np", ".", "eye", "(", "3", ")", "\n", "if", "not", "freezerot", ":", "\n", "            ", "xangle", "=", "(", "mousey", "-", "0.5", ")", "*", "np", ".", "pi", "*", "1.2", "\n", "", "else", ":", "\n", "            ", "xangle", "=", "0", "\n", "", "rotmat", "=", "rotmat", ".", "dot", "(", "np", ".", "array", "(", "[", "\n", "[", "1.0", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "np", ".", "cos", "(", "xangle", ")", ",", "-", "np", ".", "sin", "(", "xangle", ")", "]", ",", "\n", "[", "0.0", ",", "np", ".", "sin", "(", "xangle", ")", ",", "np", ".", "cos", "(", "xangle", ")", "]", ",", "\n", "]", ")", ")", "\n", "if", "not", "freezerot", ":", "\n", "            ", "yangle", "=", "(", "mousex", "-", "0.5", ")", "*", "np", ".", "pi", "*", "1.2", "\n", "", "else", ":", "\n", "            ", "yangle", "=", "0", "\n", "", "rotmat", "=", "rotmat", ".", "dot", "(", "np", ".", "array", "(", "[", "\n", "[", "np", ".", "cos", "(", "yangle", ")", ",", "0.0", ",", "-", "np", ".", "sin", "(", "yangle", ")", "]", ",", "\n", "[", "0.0", ",", "1.0", ",", "0.0", "]", ",", "\n", "[", "np", ".", "sin", "(", "yangle", ")", ",", "0.0", ",", "np", ".", "cos", "(", "yangle", ")", "]", ",", "\n", "]", ")", ")", "\n", "rotmat", "*=", "zoom", "\n", "nxyz", "=", "xyz", ".", "dot", "(", "rotmat", ")", "+", "[", "showsz", "/", "2", ",", "showsz", "/", "2", ",", "0", "]", "\n", "\n", "ixyz", "=", "nxyz", ".", "astype", "(", "'int32'", ")", "\n", "show", "[", ":", "]", "=", "background", "\n", "dll", ".", "render_ball", "(", "\n", "ct", ".", "c_int", "(", "show", ".", "shape", "[", "0", "]", ")", ",", "\n", "ct", ".", "c_int", "(", "show", ".", "shape", "[", "1", "]", ")", ",", "\n", "show", ".", "ctypes", ".", "data_as", "(", "ct", ".", "c_void_p", ")", ",", "\n", "ct", ".", "c_int", "(", "ixyz", ".", "shape", "[", "0", "]", ")", ",", "\n", "ixyz", ".", "ctypes", ".", "data_as", "(", "ct", ".", "c_void_p", ")", ",", "\n", "c0", ".", "ctypes", ".", "data_as", "(", "ct", ".", "c_void_p", ")", ",", "\n", "c1", ".", "ctypes", ".", "data_as", "(", "ct", ".", "c_void_p", ")", ",", "\n", "c2", ".", "ctypes", ".", "data_as", "(", "ct", ".", "c_void_p", ")", ",", "\n", "ct", ".", "c_int", "(", "ballradius", ")", "\n", ")", "\n", "\n", "if", "magnifyBlue", ">", "0", ":", "\n", "            ", "show", "[", ":", ",", ":", ",", "0", "]", "=", "np", ".", "maximum", "(", "show", "[", ":", ",", ":", ",", "0", "]", ",", "np", ".", "roll", "(", "show", "[", ":", ",", ":", ",", "0", "]", ",", "1", ",", "axis", "=", "0", ")", ")", "\n", "if", "magnifyBlue", ">=", "2", ":", "\n", "                ", "show", "[", ":", ",", ":", ",", "0", "]", "=", "np", ".", "maximum", "(", "show", "[", ":", ",", ":", ",", "0", "]", ",", "np", ".", "roll", "(", "show", "[", ":", ",", ":", ",", "0", "]", ",", "-", "1", ",", "axis", "=", "0", ")", ")", "\n", "", "show", "[", ":", ",", ":", ",", "0", "]", "=", "np", ".", "maximum", "(", "show", "[", ":", ",", ":", ",", "0", "]", ",", "np", ".", "roll", "(", "show", "[", ":", ",", ":", ",", "0", "]", ",", "1", ",", "axis", "=", "1", ")", ")", "\n", "if", "magnifyBlue", ">=", "2", ":", "\n", "                ", "show", "[", ":", ",", ":", ",", "0", "]", "=", "np", ".", "maximum", "(", "show", "[", ":", ",", ":", ",", "0", "]", ",", "np", ".", "roll", "(", "show", "[", ":", ",", ":", ",", "0", "]", ",", "-", "1", ",", "axis", "=", "1", ")", ")", "\n", "", "", "if", "showrot", ":", "\n", "            ", "cv2", ".", "putText", "(", "show", ",", "'xangle %d'", "%", "(", "int", "(", "xangle", "/", "np", ".", "pi", "*", "180", ")", ")", ",", "(", "30", ",", "showsz", "-", "30", ")", ",", "0", ",", "0.5", ",", "cv2", ".", "cv", ".", "CV_RGB", "(", "255", ",", "0", ",", "0", ")", ")", "\n", "cv2", ".", "putText", "(", "show", ",", "'yangle %d'", "%", "(", "int", "(", "yangle", "/", "np", ".", "pi", "*", "180", ")", ")", ",", "(", "30", ",", "showsz", "-", "50", ")", ",", "0", ",", "0.5", ",", "cv2", ".", "cv", ".", "CV_RGB", "(", "255", ",", "0", ",", "0", ")", ")", "\n", "cv2", ".", "putText", "(", "show", ",", "'zoom %d%%'", "%", "(", "int", "(", "zoom", "*", "100", ")", ")", ",", "(", "30", ",", "showsz", "-", "70", ")", ",", "0", ",", "0.5", ",", "cv2", ".", "cv", ".", "CV_RGB", "(", "255", ",", "0", ",", "0", ")", ")", "\n", "", "", "changed", "=", "True", "\n", "while", "True", ":", "\n", "        ", "if", "changed", ":", "\n", "            ", "render", "(", ")", "\n", "changed", "=", "False", "\n", "", "cv2", ".", "imshow", "(", "'show3d'", ",", "show", ")", "\n", "if", "waittime", "==", "0", ":", "\n", "            ", "cmd", "=", "cv2", ".", "waitKey", "(", "10", ")", "%", "256", "\n", "", "else", ":", "\n", "            ", "cmd", "=", "cv2", ".", "waitKey", "(", "waittime", ")", "%", "256", "\n", "", "if", "cmd", "==", "ord", "(", "'q'", ")", ":", "\n", "            ", "break", "\n", "", "elif", "cmd", "==", "ord", "(", "'Q'", ")", ":", "\n", "            ", "sys", ".", "exit", "(", "0", ")", "\n", "\n", "", "if", "cmd", "==", "ord", "(", "'t'", ")", "or", "cmd", "==", "ord", "(", "'p'", ")", ":", "\n", "            ", "if", "cmd", "==", "ord", "(", "'t'", ")", ":", "\n", "                ", "if", "c_gt", "is", "None", ":", "\n", "                    ", "c0", "=", "np", ".", "zeros", "(", "(", "len", "(", "xyz", ")", ",", ")", ",", "dtype", "=", "'float32'", ")", "+", "255", "\n", "c1", "=", "np", ".", "zeros", "(", "(", "len", "(", "xyz", ")", ",", ")", ",", "dtype", "=", "'float32'", ")", "+", "255", "\n", "c2", "=", "np", ".", "zeros", "(", "(", "len", "(", "xyz", ")", ",", ")", ",", "dtype", "=", "'float32'", ")", "+", "255", "\n", "", "else", ":", "\n", "                    ", "c0", "=", "c_gt", "[", ":", ",", "0", "]", "\n", "c1", "=", "c_gt", "[", ":", ",", "1", "]", "\n", "c2", "=", "c_gt", "[", ":", ",", "2", "]", "\n", "", "", "else", ":", "\n", "                ", "if", "c_pred", "is", "None", ":", "\n", "                    ", "c0", "=", "np", ".", "zeros", "(", "(", "len", "(", "xyz", ")", ",", ")", ",", "dtype", "=", "'float32'", ")", "+", "255", "\n", "c1", "=", "np", ".", "zeros", "(", "(", "len", "(", "xyz", ")", ",", ")", ",", "dtype", "=", "'float32'", ")", "+", "255", "\n", "c2", "=", "np", ".", "zeros", "(", "(", "len", "(", "xyz", ")", ",", ")", ",", "dtype", "=", "'float32'", ")", "+", "255", "\n", "", "else", ":", "\n", "                    ", "c0", "=", "c_pred", "[", ":", ",", "0", "]", "\n", "c1", "=", "c_pred", "[", ":", ",", "1", "]", "\n", "c2", "=", "c_pred", "[", ":", ",", "2", "]", "\n", "", "", "if", "normalizecolor", ":", "\n", "                ", "c0", "/=", "(", "c0", ".", "max", "(", ")", "+", "1e-14", ")", "/", "255.0", "\n", "c1", "/=", "(", "c1", ".", "max", "(", ")", "+", "1e-14", ")", "/", "255.0", "\n", "c2", "/=", "(", "c2", ".", "max", "(", ")", "+", "1e-14", ")", "/", "255.0", "\n", "", "c0", "=", "np", ".", "require", "(", "c0", ",", "'float32'", ",", "'C'", ")", "\n", "c1", "=", "np", ".", "require", "(", "c1", ",", "'float32'", ",", "'C'", ")", "\n", "c2", "=", "np", ".", "require", "(", "c2", ",", "'float32'", ",", "'C'", ")", "\n", "changed", "=", "True", "\n", "\n", "\n", "\n", "", "if", "cmd", "==", "ord", "(", "'n'", ")", ":", "\n", "            ", "zoom", "*=", "1.1", "\n", "changed", "=", "True", "\n", "", "elif", "cmd", "==", "ord", "(", "'m'", ")", ":", "\n", "            ", "zoom", "/=", "1.1", "\n", "changed", "=", "True", "\n", "", "elif", "cmd", "==", "ord", "(", "'r'", ")", ":", "\n", "            ", "zoom", "=", "1.0", "\n", "changed", "=", "True", "\n", "", "elif", "cmd", "==", "ord", "(", "'s'", ")", ":", "\n", "            ", "cv2", ".", "imwrite", "(", "'show3d.png'", ",", "show", ")", "\n", "", "if", "waittime", "!=", "0", ":", "\n", "            ", "break", "\n", "", "", "return", "cmd", "\n", "", "if", "__name__", "==", "'__main__'", ":", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.sampling.tf_sampling.prob_sample": [[13, 22], ["sampling_module.prob_sample"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.sampling.tf_sampling.prob_sample"], ["def", "prob_sample", "(", "inp", ",", "inpr", ")", ":", "\n", "    ", "'''\ninput:\n    batch_size * ncategory float32\n    batch_size * npoints   float32\nreturns:\n    batch_size * npoints   int32\n    '''", "\n", "return", "sampling_module", ".", "prob_sample", "(", "inp", ",", "inpr", ")", "\n", "", "ops", ".", "NoGradient", "(", "'ProbSample'", ")", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.sampling.tf_sampling.gather_point": [[29, 38], ["sampling_module.gather_point"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.sampling.tf_sampling.gather_point"], ["def", "gather_point", "(", "inp", ",", "idx", ")", ":", "\n", "    ", "'''\ninput:\n    batch_size * ndataset * 3   float32\n    batch_size * npoints        int32\nreturns:\n    batch_size * npoints * 3    float32\n    '''", "\n", "return", "sampling_module", ".", "gather_point", "(", "inp", ",", "idx", ")", "\n", "#@tf.RegisterShape('GatherPoint')", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.sampling.tf_sampling._gather_point_grad": [[43, 48], ["tensorflow.RegisterGradient", "sampling_module.gather_point_grad"], "function", ["None"], ["", "@", "tf", ".", "RegisterGradient", "(", "'GatherPoint'", ")", "\n", "def", "_gather_point_grad", "(", "op", ",", "out_g", ")", ":", "\n", "    ", "inp", "=", "op", ".", "inputs", "[", "0", "]", "\n", "idx", "=", "op", ".", "inputs", "[", "1", "]", "\n", "return", "[", "sampling_module", ".", "gather_point_grad", "(", "inp", ",", "idx", ",", "out_g", ")", ",", "None", "]", "\n", "", "def", "farthest_point_sample", "(", "npoint", ",", "inp", ")", ":", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.sampling.tf_sampling.farthest_point_sample": [[48, 57], ["sampling_module.farthest_point_sample"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.sampling.tf_sampling.farthest_point_sample"], ["", "def", "farthest_point_sample", "(", "npoint", ",", "inp", ")", ":", "\n", "    ", "'''\ninput:\n    int32\n    batch_size * ndataset * 3   float32\nreturns:\n    batch_size * npoint         int32\n    '''", "\n", "return", "sampling_module", ".", "farthest_point_sample", "(", "inp", ",", "npoint", ")", "\n", "", "ops", ".", "NoGradient", "(", "'FarthestPointSample'", ")", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.3d_interpolation.tf_interpolate.three_nn": [[8, 18], ["interpolate_module.three_nn"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.3d_interpolation.tf_interpolate.three_nn"], ["def", "three_nn", "(", "xyz1", ",", "xyz2", ")", ":", "\n", "    ", "'''\n    Input:\n        xyz1: (b,n,3) float32 array, unknown points\n        xyz2: (b,m,3) float32 array, known points\n    Output:\n        dist: (b,n,3) float32 array, distances to known points\n        idx: (b,n,3) int32 array, indices to known points\n    '''", "\n", "return", "interpolate_module", ".", "three_nn", "(", "xyz1", ",", "xyz2", ")", "\n", "", "ops", ".", "NoGradient", "(", "'ThreeNN'", ")", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.3d_interpolation.tf_interpolate.three_interpolate": [[19, 29], ["interpolate_module.three_interpolate"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.3d_interpolation.tf_interpolate.three_interpolate"], ["def", "three_interpolate", "(", "points", ",", "idx", ",", "weight", ")", ":", "\n", "    ", "'''\n    Input:\n        points: (b,m,c) float32 array, known points\n        idx: (b,n,3) int32 array, indices to known points\n        weight: (b,n,3) float32 array, weights on known points\n    Output:\n        out: (b,n,c) float32 array, interpolated point values\n    '''", "\n", "return", "interpolate_module", ".", "three_interpolate", "(", "points", ",", "idx", ",", "weight", ")", "\n", "", "@", "tf", ".", "RegisterGradient", "(", "'ThreeInterpolate'", ")", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.3d_interpolation.tf_interpolate._three_interpolate_grad": [[29, 35], ["tensorflow.RegisterGradient", "interpolate_module.three_interpolate_grad"], "function", ["None"], ["", "@", "tf", ".", "RegisterGradient", "(", "'ThreeInterpolate'", ")", "\n", "def", "_three_interpolate_grad", "(", "op", ",", "grad_out", ")", ":", "\n", "    ", "points", "=", "op", ".", "inputs", "[", "0", "]", "\n", "idx", "=", "op", ".", "inputs", "[", "1", "]", "\n", "weight", "=", "op", ".", "inputs", "[", "2", "]", "\n", "return", "[", "interpolate_module", ".", "three_interpolate_grad", "(", "points", ",", "idx", ",", "weight", ",", "grad_out", ")", ",", "None", ",", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.grouping.tf_grouping.query_ball_point": [[8, 21], ["grouping_module.query_ball_point"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.grouping.tf_grouping.query_ball_point"], ["def", "query_ball_point", "(", "radius", ",", "nsample", ",", "xyz1", ",", "xyz2", ")", ":", "\n", "    ", "'''\n    Input:\n        radius: float32, ball search radius\n        nsample: int32, number of points selected in each ball region\n        xyz1: (batch_size, ndataset, 3) float32 array, input points\n        xyz2: (batch_size, npoint, 3) float32 array, query points\n    Output:\n        idx: (batch_size, npoint, nsample) int32 array, indices to input points\n        pts_cnt: (batch_size, npoint) int32 array, number of unique points in each local region\n    '''", "\n", "#return grouping_module.query_ball_point(radius, nsample, xyz1, xyz2)", "\n", "return", "grouping_module", ".", "query_ball_point", "(", "xyz1", ",", "xyz2", ",", "radius", ",", "nsample", ")", "\n", "", "ops", ".", "NoGradient", "(", "'QueryBallPoint'", ")", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.grouping.tf_grouping.select_top_k": [[22, 32], ["grouping_module.selection_sort"], "function", ["None"], ["def", "select_top_k", "(", "k", ",", "dist", ")", ":", "\n", "    ", "'''\n    Input:\n        k: int32, number of k SMALLEST elements selected\n        dist: (b,m,n) float32 array, distance matrix, m query points, n dataset points\n    Output:\n        idx: (b,m,n) int32 array, first k in n are indices to the top k\n        dist_out: (b,m,n) float32 array, first k in n are the top k\n    '''", "\n", "return", "grouping_module", ".", "selection_sort", "(", "dist", ",", "k", ")", "\n", "", "ops", ".", "NoGradient", "(", "'SelectionSort'", ")", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.grouping.tf_grouping.group_point": [[33, 42], ["grouping_module.group_point"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.grouping.tf_grouping.group_point"], ["def", "group_point", "(", "points", ",", "idx", ")", ":", "\n", "    ", "'''\n    Input:\n        points: (batch_size, ndataset, channel) float32 array, points to sample from\n        idx: (batch_size, npoint, nsample) int32 array, indices to points\n    Output:\n        out: (batch_size, npoint, nsample, channel) float32 array, values sampled from points\n    '''", "\n", "return", "grouping_module", ".", "group_point", "(", "points", ",", "idx", ")", "\n", "", "@", "tf", ".", "RegisterGradient", "(", "'GroupPoint'", ")", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.grouping.tf_grouping._group_point_grad": [[42, 47], ["tensorflow.RegisterGradient", "grouping_module.group_point_grad"], "function", ["None"], ["", "@", "tf", ".", "RegisterGradient", "(", "'GroupPoint'", ")", "\n", "def", "_group_point_grad", "(", "op", ",", "grad_out", ")", ":", "\n", "    ", "points", "=", "op", ".", "inputs", "[", "0", "]", "\n", "idx", "=", "op", ".", "inputs", "[", "1", "]", "\n", "return", "[", "grouping_module", ".", "group_point_grad", "(", "points", ",", "idx", ",", "grad_out", ")", ",", "None", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.grouping.tf_grouping.knn_point": [[48, 74], ["print", "print", "tensorflow.tile", "tensorflow.tile", "tensorflow.reduce_sum", "print", "tf_grouping.select_top_k", "tensorflow.slice", "tensorflow.slice", "print", "tensorflow.reshape", "tensorflow.reshape", "tf.tile.get_shape", "tf.tile.get_shape", "tf.tile.get_shape", "tf.tile.get_shape"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.grouping.tf_grouping.select_top_k"], ["", "def", "knn_point", "(", "k", ",", "xyz1", ",", "xyz2", ")", ":", "\n", "    ", "'''\n    Input:\n        k: int32, number of k in k-nn search\n        xyz1: (batch_size, ndataset, c) float32 array, input points\n        xyz2: (batch_size, npoint, c) float32 array, query points\n    Output:\n        val: (batch_size, npoint, k) float32 array, L2 distances\n        idx: (batch_size, npoint, k) int32 array, indices to input points\n    '''", "\n", "b", "=", "xyz1", ".", "get_shape", "(", ")", "[", "0", "]", ".", "value", "\n", "n", "=", "xyz1", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "c", "=", "xyz1", ".", "get_shape", "(", ")", "[", "2", "]", ".", "value", "\n", "m", "=", "xyz2", ".", "get_shape", "(", ")", "[", "1", "]", ".", "value", "\n", "print", "(", "b", ",", "n", ",", "c", ",", "m", ")", "\n", "print", "(", "xyz1", ",", "(", "b", ",", "1", ",", "n", ",", "c", ")", ")", "\n", "xyz1", "=", "tf", ".", "tile", "(", "tf", ".", "reshape", "(", "xyz1", ",", "(", "b", ",", "1", ",", "n", ",", "c", ")", ")", ",", "[", "1", ",", "m", ",", "1", ",", "1", "]", ")", "\n", "xyz2", "=", "tf", ".", "tile", "(", "tf", ".", "reshape", "(", "xyz2", ",", "(", "b", ",", "m", ",", "1", ",", "c", ")", ")", ",", "[", "1", ",", "1", ",", "n", ",", "1", "]", ")", "\n", "dist", "=", "tf", ".", "reduce_sum", "(", "(", "xyz1", "-", "xyz2", ")", "**", "2", ",", "-", "1", ")", "\n", "print", "(", "dist", ",", "k", ")", "\n", "outi", ",", "out", "=", "select_top_k", "(", "k", ",", "dist", ")", "\n", "idx", "=", "tf", ".", "slice", "(", "outi", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "k", "]", ")", "\n", "val", "=", "tf", ".", "slice", "(", "out", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "-", "1", ",", "-", "1", ",", "k", "]", ")", "\n", "print", "(", "idx", ",", "val", ")", "\n", "#val, idx = tf.nn.top_k(-dist, k=k) # ONLY SUPPORT CPU", "\n", "return", "val", ",", "idx", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.tools.xml_parser_patch_cylinder.urdf_obj.__init__": [[29, 32], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "link_num", ",", "dim_base", ")", ":", "\n", "        ", "self", ".", "link_num", "=", "link_num", "\n", "self", ".", "dim_base", "=", "dim_base", "\n", "#>>>>>>>>>>>>---------XML oject------------", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.tools.xml_parser_patch_cylinder.generate_urdf": [[35, 168], ["xml_parser_patch_cylinder.urdf_obj", "xml.etree.ElementTree.Element", "numpy.random.rand", "links_h_raw[].sort", "xml.etree.ElementTree.XML", "xml.etree.ElementTree.SubElement", "xml.etree.ElementTree.SubElement", "xml.etree.ElementTree.SubElement", "xml.etree.ElementTree.SubElement", "xml.etree.ElementTree.SubElement", "xml.etree.ElementTree.SubElement", "range", "random.shuffle", "range", "range", "xml.etree.ElementTree.Element.extend", "xml.etree.ElementTree.Element.extend", "xml.dom.minidom.parseString", "xml.dom.minidom.parseString", "xml.dom.minidom.parseString.toprettyxml", "xml.ElementTree", "range", "print", "print", "xml.etree.ElementTree.Element", "xml.etree.ElementTree.Element", "len", "xml.etree.ElementTree.SubElement", "xml.etree.ElementTree.SubElement", "material_lib.append", "xml.etree.ElementTree.SubElement", "xml.etree.ElementTree.XML", "xml.etree.ElementTree.SubElement.extend", "xml.etree.ElementTree.SubElement", "xml.etree.ElementTree.SubElement", "xml.etree.ElementTree.tostring", "os.path.exists", "os.makedirs", "open", "f.write", "copy.deepcopy", "copy.deepcopy.findall", "xml.dom.minidom.parseString", "xml.dom.minidom.parseString", "xml.dom.minidom.parseString.toprettyxml", "xml.ElementTree", "str", "sum", "range", "range", "range", "range", "range", "xml.etree.ElementTree.SubElement", "xml.etree.ElementTree.SubElement", "xml.etree.ElementTree.SubElement", "xml.etree.ElementTree.SubElement", "xml.etree.ElementTree.SubElement", "xml.etree.ElementTree.SubElement", "xml.etree.ElementTree.SubElement", "xml.etree.ElementTree.SubElement", "xml.etree.ElementTree.SubElement", "xml.etree.ElementTree.SubElement", "xml.etree.ElementTree.SubElement", "children[].extend", "xml.etree.ElementTree.SubElement.iter", "xml.etree.ElementTree.SubElement.iter", "xml.etree.ElementTree.SubElement", "xml.etree.ElementTree.SubElement", "xml.etree.ElementTree.tostring", "open", "f.write", "range", "random.randint", "random.randint", "xml.etree.ElementTree.SubElement", "xml.etree.ElementTree.Element", "xml.etree.ElementTree.SubElement", "mass.set", "inertia.set", "inertia.set", "inertia.set", "inertia.set", "inertia.set", "inertia.set", "xml.etree.ElementTree.SubElement", "xml.etree.ElementTree.SubElement", "link.findall", "xml.etree.ElementTree.SubElement", "range", "xml.etree.ElementTree.SubElement", "str", "xml.etree.ElementTree.SubElement", "xml.etree.ElementTree.SubElement", "link.remove", "str", "str", "str", "str"], "function", ["None"], ["", "", "def", "generate_urdf", "(", "parts_num", ",", "save_ind", ")", ":", "\n", "    ", "robot", "=", "urdf_obj", "(", "parts_num", ",", "[", "1", ",", "1", ",", "1", "]", ")", "\n", "num", "=", "robot", ".", "link_num", "\n", "root", "=", "Element", "(", "'robot'", ",", "name", "=", "\"block\"", ")", "\n", "\n", "links_name", "=", "[", "\"base_link\"", "]", "+", "[", "str", "(", "i", "+", "1", ")", "for", "i", "in", "range", "(", "num", ")", "]", "\n", "links_h_raw", "=", "np", ".", "random", ".", "rand", "(", "num", ")", "\n", "links_w", "=", "[", "2", ",", "1.5", "]", "\n", "links_h_raw", "=", "links_h_raw", "/", "sum", "(", "links_h_raw", ")", "*", "0.3", "\n", "links_h_raw", "[", ":", ":", "-", "1", "]", ".", "sort", "(", ")", "\n", "links_h", "=", "links_h_raw", "\n", "# links_h = np.flip(links_h_raw)", "\n", "all_kinds_shape", "=", "[", "\"box\"", ",", "\"cylinder\"", "]", "\n", "links_shape", "=", "[", "all_kinds_shape", "[", "randint", "(", "0", ",", "0", ")", "]", "for", "i", "in", "range", "(", "num", ")", "]", "\n", "joints_name", "=", "[", "\"{}_j_{}\"", ".", "format", "(", "i", ",", "i", "+", "1", ")", "for", "i", "in", "range", "(", "num", "-", "1", ")", "]", "\n", "all_kinds_joints", "=", "[", "\"revolute\"", ",", "\"fixed\"", ",", "\"prismatic\"", ",", "\"continuous\"", ",", "\"planar\"", "]", "\n", "joints_type", "=", "[", "all_kinds_joints", "[", "randint", "(", "0", ",", "0", ")", "]", "for", "i", "in", "range", "(", "num", "-", "1", ")", "]", "\n", "#", "\n", "children", "=", "[", "\n", "Element", "(", "'link'", ",", "name", "=", "links_name", "[", "i", "]", ")", "\n", "for", "i", "in", "range", "(", "num", ")", "\n", "]", "\n", "joints", "=", "[", "\n", "Element", "(", "'joint'", ",", "name", "=", "joints_name", "[", "i", "]", ",", "type", "=", "joints_type", "[", "i", "]", ")", "\n", "for", "i", "in", "range", "(", "num", "-", "1", ")", "\n", "]", "\n", "# add inertial component", "\n", "node_inertial", "=", "XML", "(", "'''<inertial><origin rpy=\"0 0 0\" xyz=\"0 0 0\"/><mass value=\"1.0\"/><inertia ixx=\"0.9\" ixy=\"0.9\" ixz=\"0.9\" iyy=\"0.9\" iyz=\"0\" izz=\"0.9\"/></inertial>'''", ")", "\n", "# add color components", "\n", "mat_blue", "=", "SubElement", "(", "root", ",", "'material'", ",", "name", "=", "\"blue\"", ")", "\n", "color_blue", "=", "SubElement", "(", "mat_blue", ",", "\"color\"", ",", "rgba", "=", "\"0 0 0.8 1\"", ")", "\n", "mat_black", "=", "SubElement", "(", "root", ",", "'material'", ",", "name", "=", "\"black\"", ")", "\n", "color_blue", "=", "SubElement", "(", "mat_black", ",", "\"color\"", ",", "rgba", "=", "\"0 0 0 1\"", ")", "\n", "mat_white", "=", "SubElement", "(", "root", ",", "'material'", ",", "name", "=", "\"white\"", ")", "\n", "color_white", "=", "SubElement", "(", "mat_white", ",", "\"color\"", ",", "rgba", "=", "\"1 1 1 1\"", ")", "\n", "material_lib", "=", "[", "'color_blue'", ",", "'color_white'", "]", "\n", "colors_val", "=", "[", "\"1 1 0\"", ",", "\"1 0 1\"", ",", "\"0 1 1\"", ",", "\"1 0 0\"", ",", "\"0 1 0\"", ",", "\"0 0 1\"", "]", "\n", "colors_name", "=", "[", "\"yellow\"", ",", "\"magenta\"", ",", "\"cyan\"", ",", "\"red\"", ",", "\"green\"", ",", "\"blue\"", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "colors_val", ")", ")", ":", "\n", "        ", "mat_any", "=", "SubElement", "(", "root", ",", "'material'", ",", "name", "=", "colors_name", "[", "i", "]", ")", "\n", "color_any", "=", "SubElement", "(", "mat_any", ",", "\"color\"", ",", "rgba", "=", "\"{} 1\"", ".", "format", "(", "colors_val", "[", "i", "]", ")", ")", "\n", "material_lib", ".", "append", "(", "colors_name", "[", "i", "]", ")", "\n", "", "random", ".", "shuffle", "(", "material_lib", ")", "\n", "#>>>>>>>>>>>>>>>>> links properties", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "        ", "if", "i", "==", "0", ":", "\n", "            ", "visual", "=", "SubElement", "(", "children", "[", "i", "]", ",", "'visual'", ")", "\n", "origin", "=", "SubElement", "(", "visual", ",", "'origin'", ",", "rpy", "=", "\"0.0 0 0\"", ",", "xyz", "=", "\"0 0 {}\"", ".", "format", "(", "0", ")", ")", "\n", "geometry", "=", "SubElement", "(", "visual", ",", "'geometry'", ")", "\n", "if", "links_shape", "[", "i", "]", "==", "\"cylinder\"", ":", "\n", "                ", "shape", "=", "SubElement", "(", "geometry", ",", "'cylinder'", ",", "length", "=", "str", "(", "links_h", "[", "i", "]", ")", ",", "radius", "=", "str", "(", "links_h", "[", "i", "]", "/", "4", ")", ")", "\n", "", "elif", "links_shape", "[", "i", "]", "==", "\"box\"", ":", "\n", "                ", "shape", "=", "SubElement", "(", "geometry", ",", "'box'", ",", "size", "=", "\"{} {} {}\"", ".", "format", "(", "links_w", "[", "0", "]", ",", "links_w", "[", "1", "]", ",", "links_h", "[", "i", "]", ")", ")", "\n", "", "material", "=", "SubElement", "(", "visual", ",", "'material'", ",", "name", "=", "material_lib", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "            ", "visual", "=", "[", "Element", "(", "'visual'", ")", "for", "j", "in", "range", "(", "2", ")", "]", "\n", "# visual for link ", "\n", "origin", "=", "SubElement", "(", "visual", "[", "0", "]", ",", "'origin'", ",", "rpy", "=", "\"0.0 0 0\"", ",", "xyz", "=", "\"0 {} {}\"", ".", "format", "(", "links_w", "[", "1", "]", "/", "2", ",", "0", ")", ")", "#links_h[i]/2", "\n", "geometry", "=", "SubElement", "(", "visual", "[", "0", "]", ",", "'geometry'", ")", "\n", "if", "links_shape", "[", "i", "]", "==", "\"cylinder\"", ":", "\n", "                ", "shape", "=", "SubElement", "(", "geometry", ",", "'cylinder'", ",", "length", "=", "str", "(", "links_h", "[", "i", "]", ")", ",", "radius", "=", "str", "(", "links_h", "[", "i", "]", "/", "4", ")", ")", "\n", "", "elif", "links_shape", "[", "i", "]", "==", "\"box\"", ":", "\n", "                ", "shape", "=", "SubElement", "(", "geometry", ",", "'box'", ",", "size", "=", "\"{} {} {}\"", ".", "format", "(", "links_w", "[", "0", "]", ",", "links_w", "[", "1", "]", ",", "links_h", "[", "i", "]", ")", ")", "\n", "", "material", "=", "SubElement", "(", "visual", "[", "0", "]", ",", "'material'", ",", "name", "=", "material_lib", "[", "i", "]", ")", "\n", "# visual for joint", "\n", "origin_joint", "=", "SubElement", "(", "visual", "[", "1", "]", ",", "'origin'", ",", "rpy", "=", "\"0.0 1.5707 0\"", ",", "xyz", "=", "\"0 0 0\"", ")", "\n", "geometry_joint", "=", "SubElement", "(", "visual", "[", "1", "]", ",", "'geometry'", ")", "\n", "shape_joint", "=", "SubElement", "(", "geometry_joint", ",", "'cylinder'", ",", "length", "=", "str", "(", "links_w", "[", "0", "]", ")", ",", "radius", "=", "\"{}\"", ".", "format", "(", "links_h", "[", "i", "]", "/", "4", ")", ")", "\n", "material_joint", "=", "SubElement", "(", "visual", "[", "1", "]", ",", "'material'", ",", "name", "=", "material_lib", "[", "i", "]", ")", "\n", "children", "[", "i", "]", ".", "extend", "(", "visual", ")", "\n", "\n", "", "inertial", "=", "SubElement", "(", "children", "[", "i", "]", ",", "'inertial'", ")", "\n", "node_inertial", "=", "XML", "(", "'''<inertial><origin rpy=\"0 0 0\" xyz=\"0 0 0\"/><mass value=\"1.0\"/><inertia ixx=\"0.9\" ixy=\"0.9\" ixz=\"0.9\" iyy=\"0.9\" iyz=\"0\" izz=\"0.9\"/></inertial>'''", ")", "\n", "inertial", ".", "extend", "(", "node_inertial", ")", "\n", "if", "i", "==", "0", ":", "\n", "            ", "for", "mass", "in", "inertial", ".", "iter", "(", "'mass'", ")", ":", "\n", "                ", "mass", ".", "set", "(", "'value'", ",", "\"0.0\"", ")", "\n", "", "for", "inertia", "in", "inertial", ".", "iter", "(", "'inertia'", ")", ":", "\n", "                ", "inertia", ".", "set", "(", "'ixx'", ",", "\"0.0\"", ")", "\n", "inertia", ".", "set", "(", "'ixy'", ",", "\"0.0\"", ")", "\n", "inertia", ".", "set", "(", "'ixz'", ",", "\"0.0\"", ")", "\n", "inertia", ".", "set", "(", "'iyy'", ",", "\"0.0\"", ")", "\n", "inertia", ".", "set", "(", "'iyz'", ",", "\"0.0\"", ")", "\n", "inertia", ".", "set", "(", "'izz'", ",", "\"0.0\"", ")", "\n", "#>>>>>>>>>>>>>> joint features", "\n", "", "", "", "for", "i", "in", "range", "(", "num", "-", "1", ")", ":", "\n", "        ", "parent", "=", "SubElement", "(", "joints", "[", "i", "]", ",", "\"parent\"", ",", "link", "=", "links_name", "[", "i", "]", ")", "\n", "child", "=", "SubElement", "(", "joints", "[", "i", "]", ",", "\"child\"", ",", "link", "=", "links_name", "[", "i", "+", "1", "]", ")", "\n", "if", "i", "==", "0", ":", "\n", "            ", "if", "links_shape", "[", "i", "]", "==", "\"box\"", ":", "\n", "                ", "origin", "=", "SubElement", "(", "joints", "[", "i", "]", ",", "\"origin\"", ",", "xyz", "=", "\"0 {} {}\"", ".", "format", "(", "links_w", "[", "1", "]", "/", "2", ",", "(", "links_h", "[", "i", "]", ")", "/", "2", ")", ",", "rpy", "=", "\"0 0 0\"", ")", "\n", "", "elif", "links_shape", "[", "i", "]", "==", "\"cylinder\"", ":", "\n", "                ", "origin", "=", "SubElement", "(", "joints", "[", "i", "]", ",", "\"origin\"", ",", "xyz", "=", "\"0 0 {}\"", ".", "format", "(", "(", "links_h", "[", "i", "]", ")", "/", "2", "-", "0.005", ")", ",", "rpy", "=", "\"0 0 0\"", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "links_shape", "[", "i", "]", "==", "\"box\"", ":", "\n", "                ", "origin", "=", "SubElement", "(", "joints", "[", "i", "]", ",", "\"origin\"", ",", "xyz", "=", "\"0 {} {}\"", ".", "format", "(", "links_w", "[", "1", "]", ",", "links_h", "[", "i", "]", ")", ",", "rpy", "=", "\"0 0 0\"", ")", "\n", "", "elif", "links_shape", "[", "i", "]", "==", "\"cylinder\"", ":", "\n", "                ", "origin", "=", "SubElement", "(", "joints", "[", "i", "]", ",", "\"origin\"", ",", "xyz", "=", "\"0 0 {}\"", ".", "format", "(", "(", "links_h", "[", "i", "]", ")", "/", "2", "-", "0.005", ")", ",", "rpy", "=", "\"0 0 0\"", ")", "\n", "", "", "if", "joints_type", "[", "i", "]", "==", "\"revolute\"", ":", "\n", "            ", "axis", "=", "SubElement", "(", "joints", "[", "i", "]", ",", "\"axis\"", ",", "xyz", "=", "\"1 0 0\"", ")", "\n", "limit", "=", "SubElement", "(", "joints", "[", "i", "]", ",", "\"limit\"", ",", "effort", "=", "\"1000.0\"", ",", "lower", "=", "\"-3.14\"", ",", "upper", "=", "\"3.14\"", ",", "velocity", "=", "\"0.5\"", ")", "\n", "# extend from list with different names", "\n", "", "", "root", ".", "extend", "(", "children", ")", "\n", "root", ".", "extend", "(", "joints", ")", "\n", "xml_string", "=", "xml", ".", "dom", ".", "minidom", ".", "parseString", "(", "tostring", "(", "root", ")", ")", "\n", "xml_pretty_str", "=", "xml_string", ".", "toprettyxml", "(", ")", "\n", "# print(xml_pretty_str)", "\n", "tree", "=", "ET", ".", "ElementTree", "(", "root", ")", "\n", "save_dir", "=", "'/Users/DragonX/Downloads/ARC/DATA/{:04d}'", ".", "format", "(", "save_ind", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "", "with", "open", "(", "save_dir", "+", "'/syn.urdf'", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "xml_pretty_str", ")", "\n", "# Create a copy", "\n", "", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "        ", "member_part", "=", "copy", ".", "deepcopy", "(", "root", ")", "\n", "# remove all visual nodes directly", "\n", "for", "link", "in", "member_part", ".", "findall", "(", "'link'", ")", ":", "\n", "            ", "if", "link", ".", "attrib", "[", "'name'", "]", "!=", "links_name", "[", "i", "]", ":", "\n", "                ", "for", "visual", "in", "link", ".", "findall", "(", "'visual'", ")", ":", "\n", "                    ", "link", ".", "remove", "(", "visual", ")", "\n", "\n", "", "", "", "xml_string", "=", "xml", ".", "dom", ".", "minidom", ".", "parseString", "(", "tostring", "(", "member_part", ")", ")", "\n", "xml_pretty_str", "=", "xml_string", ".", "toprettyxml", "(", ")", "\n", "tree", "=", "ET", ".", "ElementTree", "(", "member_part", ")", "\n", "with", "open", "(", "save_dir", "+", "'/syn_p{}.urdf'", ".", "format", "(", "i", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "xml_pretty_str", ")", "\n", "#>>>>>>>>>>> modify each components here to get multiple separate URDF files", "\n", "# we could keep all the joints, but every file should only keep one visual features", "\n", "# tree.write(open('./data/example.urdf', 'w'), encoding='unicode')", "\n", "# >>>>>>> only for debug use <<<<<<<<<< #", "\n", "", "", "print", "(", "\"links_h: \"", ",", "links_h", ")", "\n", "print", "(", "\"links_h_raw: \"", ",", "links_h_raw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.tools.urdf_modify.modify_urdf": [[30, 95], ["xml.dom.minidom.parse", "xml.dom.minidom.parse", "xml.dom.minidom.parseString.toprettyxml", "xml.parse", "ET.ElementTree.getroot", "print", "len", "range", "copy.deepcopy", "copy.deepcopy.findall", "xml.dom.minidom.parseString", "xml.dom.minidom.parseString", "xml.dom.minidom.parseString.toprettyxml", "xml.ElementTree", "tree.getroot.findall", "xml.etree.ElementTree.tostring", "open", "f.write", "link.findall", "link.findall", "link.findall", "link.findall", "xml.etree.ElementTree.SubElement", "xml.etree.ElementTree.XML", "xml.etree.ElementTree.SubElement.extend", "link.remove", "link.remove", "link.remove", "xml.etree.ElementTree.SubElement.iter", "xml.etree.ElementTree.SubElement.iter", "mass.set", "inertia.set", "inertia.set", "inertia.set", "inertia.set", "inertia.set", "inertia.set"], "function", ["None"], ["def", "modify_urdf", "(", "urdf_dir", ")", ":", "\n", "    ", "\"\"\"\n    urdf cleaning\n    \"\"\"", "\n", "urdf_file", "=", "urdf_dir", "+", "'/mobility.urdf'", "\n", "save_dir", "=", "urdf_dir", "\n", "xml_string", "=", "xml", ".", "dom", ".", "minidom", ".", "parse", "(", "urdf_file", ")", "\n", "xml_pretty_str", "=", "xml_string", ".", "toprettyxml", "(", ")", "\n", "\n", "tree", "=", "ET", ".", "parse", "(", "urdf_file", ")", "\n", "root", "=", "tree", ".", "getroot", "(", ")", "\n", "links_name", "=", "[", "link", ".", "attrib", "[", "'name'", "]", "for", "link", "in", "root", ".", "findall", "(", "'link'", ")", "]", "\n", "print", "(", "links_name", ")", "\n", "num", "=", "len", "(", "links_name", ")", "\n", "\n", "#>>>>>>>>>>>>>> joint features", "\n", "#", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "        ", "member_part", "=", "copy", ".", "deepcopy", "(", "root", ")", "\n", "for", "link", "in", "member_part", ".", "findall", "(", "'link'", ")", ":", "\n", "            ", "if", "link", ".", "attrib", "[", "'name'", "]", "!=", "links_name", "[", "i", "]", ":", "\n", "                ", "for", "visual", "in", "link", ".", "findall", "(", "'visual'", ")", ":", "\n", "                    ", "link", ".", "remove", "(", "visual", ")", "\n", "", "for", "collision", "in", "link", ".", "findall", "(", "'collision'", ")", ":", "\n", "                    ", "link", ".", "remove", "(", "collision", ")", "\n", "# for geometry in link.iter('geometry'):", "\n", "#     print(geometry[0].attrib['filename'])", "\n", "#     for mesh in geometry.iter('mesh'):", "\n", "#         son_package = mesh.attrib['filename'].split('//')[1].split('/')[0]", "\n", "#         print(mesh.attrib['filename'].split('//')[1].split('/')[0])", "\n", "#         for urdf_path in n_package:", "\n", "#             if son_package in os.listdir(urdf_path):", "\n", "#                 mesh.set('filename',  urdf_path + mesh.attrib['filename'].split('//')[1])", "\n", "", "", "else", ":", "\n", "# for geometry in link.iter('geometry'):", "\n", "#     if 'filename' in geometry[0].attrib:", "\n", "#         print(geometry[0].attrib['filename'])", "\n", "#         for mesh in geometry.iter('mesh'):", "\n", "#             son_package = mesh.attrib['filename'].split('//')[1].split('/')[0]", "\n", "#             # print(mesh.attrib['filename'].split('//')[1].split('/')[0])", "\n", "#             for urdf_path in n_package:", "\n", "#                 if son_package in os.listdir(urdf_path):", "\n", "#                     mesh.set('filename',  urdf_path + mesh.attrib['filename'].split('//')[1])", "\n", "                ", "for", "collision", "in", "link", ".", "findall", "(", "'collision'", ")", ":", "\n", "                    ", "link", ".", "remove", "(", "collision", ")", "\n", "", "", "if", "link", ".", "findall", "(", "'inertial'", ")", "==", "[", "]", ":", "\n", "                ", "inertial", "=", "SubElement", "(", "link", ",", "'inertial'", ")", "\n", "node_inertial", "=", "XML", "(", "'''<inertial><origin rpy=\"0 0 0\" xyz=\"0 0 0\"/><mass value=\"3.0\"/><inertia ixx=\"0.9\" ixy=\"0.9\" ixz=\"0.9\" iyy=\"0.9\" iyz=\"0\" izz=\"0.9\"/></inertial>'''", ")", "\n", "inertial", ".", "extend", "(", "node_inertial", ")", "\n", "if", "link", ".", "attrib", "[", "'name'", "]", "==", "'base'", ":", "\n", "                    ", "for", "mass", "in", "inertial", ".", "iter", "(", "'mass'", ")", ":", "\n", "                        ", "mass", ".", "set", "(", "'value'", ",", "\"0.0\"", ")", "\n", "", "for", "inertia", "in", "inertial", ".", "iter", "(", "'inertia'", ")", ":", "\n", "                        ", "inertia", ".", "set", "(", "'ixx'", ",", "\"0.0\"", ")", "\n", "inertia", ".", "set", "(", "'ixy'", ",", "\"0.0\"", ")", "\n", "inertia", ".", "set", "(", "'ixz'", ",", "\"0.0\"", ")", "\n", "inertia", ".", "set", "(", "'iyy'", ",", "\"0.0\"", ")", "\n", "inertia", ".", "set", "(", "'iyz'", ",", "\"0.0\"", ")", "\n", "inertia", ".", "set", "(", "'izz'", ",", "\"0.0\"", ")", "\n", "\n", "", "", "", "", "xml_string", "=", "xml", ".", "dom", ".", "minidom", ".", "parseString", "(", "tostring", "(", "member_part", ")", ")", "\n", "xml_pretty_str", "=", "xml_string", ".", "toprettyxml", "(", ")", "\n", "tree", "=", "ET", ".", "ElementTree", "(", "member_part", ")", "\n", "with", "open", "(", "save_dir", "+", "'/syn_p{}.urdf'", ".", "format", "(", "i", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "xml_pretty_str", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.tools.preprocess_data.PoseDataset.__init__": [[45, 172], ["os.listdir", "os.listdir", "os.listdir.sort", "len", "numpy.array", "numpy.array", "print", "os.listdir", "xml.parse", "xml.parse.getroot", "ET.parse.getroot.iter", "ET.parse.getroot.iter", "print", "open", "link.iter", "int", "joint.iter", "joint.iter", "open.readline", "preprocess_data.PoseDataset.list_rgb.append", "preprocess_data.PoseDataset.list_depth.append", "preprocess_data.PoseDataset.list_label.append", "preprocess_data.PoseDataset.list_obj.append", "preprocess_data.PoseDataset.list_instance.append", "preprocess_data.PoseDataset.list_status.append", "preprocess_data.PoseDataset.list_rank.append", "open", "yaml.load", "int", "visual.iter", "range", "range", "int", "float", "float", "float", "range", "range", "float", "float", "origin.attrib[].split", "origin.attrib[].split", "axis.attrib[].split", "origin.attrib[].split", "origin.attrib[].split"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "root_dir", ",", "item", ",", "num_points", "=", "1024", ",", "objs", "=", "[", "]", ",", "add_noise", "=", "False", ",", "noise_trans", "=", "0", ",", "mode", "=", "'train'", ",", "refine", "=", "False", ",", "selected_list", "=", "None", ",", "is_debug", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        num is the number of points chosen feeding into PointNet\n        \"\"\"", "\n", "self", ".", "is_debug", "=", "is_debug", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "max_lnk", "=", "10", "\n", "self", ".", "root_dir", "=", "root_dir", "\n", "self", ".", "dataset_render", "=", "root_dir", "+", "'/render'", "\n", "self", ".", "models_dir", "=", "root_dir", "+", "'/objects'", "\n", "self", ".", "objnamelist", "=", "os", ".", "listdir", "(", "self", ".", "dataset_render", ")", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "list_rgb", "=", "[", "]", "\n", "self", ".", "list_depth", "=", "[", "]", "\n", "self", ".", "list_label", "=", "[", "]", "\n", "self", ".", "list_obj", "=", "[", "]", "\n", "self", ".", "list_instance", "=", "[", "]", "\n", "# obj/instance/arti", "\n", "\n", "self", ".", "list_status", "=", "[", "]", "\n", "self", ".", "list_rank", "=", "[", "]", "\n", "self", ".", "meta_dict", "=", "{", "}", "\n", "self", ".", "urdf_dict", "=", "{", "}", "\n", "self", ".", "pt_dict", "=", "{", "}", "\n", "self", ".", "noise_trans", "=", "noise_trans", "\n", "self", ".", "refine", "=", "refine", "\n", "\n", "ins_count", "=", "0", "\n", "if", "self", ".", "is_debug", ":", "\n", "            ", "from", "mpl_toolkits", ".", "mplot3d", "import", "Axes3D", "\n", "", "obj_category", "=", "item", "\n", "instances_per_obj", "=", "os", ".", "listdir", "(", "self", ".", "dataset_render", "+", "'/'", "+", "obj_category", ")", "\n", "instances_per_obj", ".", "sort", "(", ")", "\n", "meta_dict_obj", "=", "{", "}", "\n", "urdf_dict_obj", "=", "{", "}", "\n", "for", "ins", "in", "instances_per_obj", ":", "\n", "            ", "if", "selected_list", "is", "not", "None", "and", "ins", "not", "in", "selected_list", ":", "\n", "                ", "continue", "\n", "", "base_path", "=", "self", ".", "dataset_render", "+", "'/'", "+", "obj_category", "+", "'/'", "+", "ins", "\n", "print", "(", "base_path", ")", "\n", "meta", "=", "{", "}", "\n", "urdf_ins", "=", "{", "}", "# link, joint", "\n", "# ********* add pts ************ #", "\n", "for", "art_index", "in", "os", ".", "listdir", "(", "base_path", ")", ":", "\n", "                ", "sub_dir0", "=", "base_path", "+", "'/'", "+", "art_index", "\n", "input_file", "=", "open", "(", "sub_dir0", "+", "'/all.txt'", ")", "\n", "while", "1", ":", "\n", "                    ", "ins_count", "+=", "1", "\n", "input_line", "=", "input_file", ".", "readline", "(", ")", "\n", "if", "not", "input_line", ":", "\n", "                        ", "break", "\n", "", "if", "input_line", "[", "-", "1", ":", "]", "==", "'\\n'", ":", "\n", "                        ", "input_line", "=", "input_line", "[", ":", "-", "1", "]", "\n", "", "self", ".", "list_rgb", ".", "append", "(", "sub_dir0", "+", "'/rgb/{}.png'", ".", "format", "(", "input_line", ")", ")", "\n", "self", ".", "list_depth", ".", "append", "(", "sub_dir0", "+", "'/depth/{}.h5'", ".", "format", "(", "input_line", ")", ")", "\n", "self", ".", "list_label", ".", "append", "(", "sub_dir0", "+", "'/mask/{}.png'", ".", "format", "(", "input_line", ")", ")", "\n", "self", ".", "list_obj", ".", "append", "(", "obj_category", ")", "\n", "self", ".", "list_instance", ".", "append", "(", "ins", ")", "\n", "self", ".", "list_status", ".", "append", "(", "art_index", ")", "\n", "self", ".", "list_rank", ".", "append", "(", "int", "(", "input_line", ")", ")", "\n", "", "try", ":", "\n", "                    ", "meta_file", "=", "open", "(", "sub_dir0", "+", "'/gt.yml'", ",", "'r'", ")", "\n", "meta_instance", "=", "yaml", ".", "load", "(", "meta_file", ")", "\n", "meta", "[", "art_index", "]", "=", "meta_instance", "\n", "", "except", ":", "\n", "                    ", "meta", "[", "art_index", "]", "=", "None", "\n", "\n", "", "", "tree_urdf", "=", "ET", ".", "parse", "(", "self", ".", "root_dir", "+", "\"/urdf/\"", "+", "obj_category", "+", "'/'", "+", "ins", "+", "\"/syn.urdf\"", ")", "# todo", "\n", "root_urdf", "=", "tree_urdf", ".", "getroot", "(", ")", "\n", "rpy_xyz", "=", "{", "}", "\n", "list_xyz", "=", "[", "None", "]", "*", "self", ".", "max_lnk", "\n", "list_rpy", "=", "[", "None", "]", "*", "self", ".", "max_lnk", "\n", "list_box", "=", "[", "None", "]", "*", "self", ".", "max_lnk", "\n", "# ['obj'] ['link/joint']['xyz/rpy'] [0, 1, 2, 3, 4]", "\n", "num_links", "=", "0", "\n", "for", "link", "in", "root_urdf", ".", "iter", "(", "'link'", ")", ":", "\n", "                ", "num_links", "+=", "1", "\n", "index_link", "=", "None", "\n", "if", "link", ".", "attrib", "[", "'name'", "]", "==", "'base_link'", ":", "\n", "                    ", "index_link", "=", "0", "\n", "", "else", ":", "\n", "                    ", "index_link", "=", "int", "(", "link", ".", "attrib", "[", "'name'", "]", ")", "\n", "", "for", "visual", "in", "link", ".", "iter", "(", "'visual'", ")", ":", "\n", "                    ", "for", "origin", "in", "visual", ".", "iter", "(", "'origin'", ")", ":", "\n", "                        ", "list_xyz", "[", "index_link", "]", "=", "[", "float", "(", "x", ")", "for", "x", "in", "origin", ".", "attrib", "[", "'xyz'", "]", ".", "split", "(", ")", "]", "\n", "list_rpy", "[", "index_link", "]", "=", "[", "float", "(", "x", ")", "for", "x", "in", "origin", ".", "attrib", "[", "'rpy'", "]", ".", "split", "(", ")", "]", "\n", "\n", "", "", "", "rpy_xyz", "[", "'xyz'", "]", "=", "list_xyz", "\n", "rpy_xyz", "[", "'rpy'", "]", "=", "list_rpy", "\n", "# rpy_xyz['box']   = list_box", "\n", "urdf_ins", "[", "'link'", "]", "=", "rpy_xyz", "\n", "\n", "rpy_xyz", "=", "{", "}", "\n", "list_xyz", "=", "[", "None", "]", "*", "self", ".", "max_lnk", "\n", "list_rpy", "=", "[", "None", "]", "*", "self", ".", "max_lnk", "\n", "list_axis", "=", "[", "None", "]", "*", "self", ".", "max_lnk", "\n", "# here we still have to read the URDF file", "\n", "for", "joint", "in", "root_urdf", ".", "iter", "(", "'joint'", ")", ":", "\n", "                ", "index_joint", "=", "int", "(", "joint", ".", "attrib", "[", "'name'", "]", "[", "0", "]", ")", "\n", "for", "origin", "in", "joint", ".", "iter", "(", "'origin'", ")", ":", "\n", "                    ", "list_xyz", "[", "index_joint", "]", "=", "[", "float", "(", "x", ")", "for", "x", "in", "origin", ".", "attrib", "[", "'xyz'", "]", ".", "split", "(", ")", "]", "\n", "list_rpy", "[", "index_joint", "]", "=", "[", "float", "(", "x", ")", "for", "x", "in", "origin", ".", "attrib", "[", "'rpy'", "]", ".", "split", "(", ")", "]", "\n", "", "for", "axis", "in", "joint", ".", "iter", "(", "'axis'", ")", ":", "\n", "                    ", "list_axis", "[", "index_joint", "]", "=", "[", "float", "(", "x", ")", "for", "x", "in", "axis", ".", "attrib", "[", "'xyz'", "]", ".", "split", "(", ")", "]", "\n", "", "", "rpy_xyz", "[", "'xyz'", "]", "=", "list_xyz", "\n", "rpy_xyz", "[", "'rpy'", "]", "=", "list_rpy", "\n", "rpy_xyz", "[", "'axis'", "]", "=", "list_axis", "\n", "\n", "urdf_ins", "[", "'joint'", "]", "=", "rpy_xyz", "\n", "urdf_ins", "[", "'num_links'", "]", "=", "num_links", "\n", "\n", "meta_dict_obj", "[", "ins", "]", "=", "meta", "\n", "urdf_dict_obj", "[", "ins", "]", "=", "urdf_ins", "\n", "\n", "print", "(", "\"Object {} instance {} buffer loaded\"", ".", "format", "(", "obj_category", ",", "ins", ")", ")", "\n", "\n", "self", ".", "meta_dict", "[", "obj_category", "]", "=", "meta_dict_obj", "\n", "self", ".", "urdf_dict", "[", "obj_category", "]", "=", "urdf_dict_obj", "\n", "\n", "", "self", ".", "length", "=", "len", "(", "self", ".", "list_rgb", ")", "\n", "self", ".", "height", "=", "512", "\n", "self", ".", "width", "=", "512", "\n", "self", ".", "xmap", "=", "np", ".", "array", "(", "[", "[", "j", "for", "i", "in", "range", "(", "512", ")", "]", "for", "j", "in", "range", "(", "512", ")", "]", ")", "\n", "self", ".", "ymap", "=", "np", ".", "array", "(", "[", "[", "i", "for", "i", "in", "range", "(", "512", ")", "]", "for", "j", "in", "range", "(", "512", ")", "]", ")", "\n", "\n", "self", ".", "num", "=", "num_points", "\n", "self", ".", "add_noise", "=", "add_noise", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.tools.preprocess_data.PoseDataset.__len__": [[173, 175], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.tools.preprocess_data.PoseDataset.__preprocess_and_save__": [[176, 366], ["preprocess_data.PoseDataset.objnamelist.index", "print", "PIL.Image.open", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "range", "range", "range", "numpy.array().astype", "numpy.copy", "range", "numpy.stack().transpose", "numpy.stack().transpose", "range", "range", "range", "numpy.concatenate", "numpy.concatenate", "print", "h5py.File", "h5py.File.create_dataset", "h5py.File.create_dataset", "h5py.File.create_group", "enumerate", "h5py.File.create_group", "enumerate", "h5py.File.close", "os.path.exists", "os.makedirs", "PIL.Image.open", "numpy.array().reshape", "numpy.array().reshape", "numpy.array", "numpy.array", "numpy.copy", "range", "numpy.dot", "numpy.array().astype", "numpy.where", "numpy.reshape", "numpy.dot", "numpy.reshape", "numpy.dot", "numpy.concatenate", "numpy.concatenate", "numpy.concatenate", "numpy.linalg.pinv", "numpy.dot", "numpy.dot", "range", "numpy.concatenate", "numpy.dot", "numpy.array().reshape", "numpy.array().reshape", "numpy.concatenate.create_dataset", "h5py.File.create_group.create_dataset", "matplotlib.figure", "matplotlib.figure", "matplotlib.subplot", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.imshow", "matplotlib.title", "matplotlib.title", "matplotlib.subplot", "matplotlib.subplot", "matplotlib.imshow", "matplotlib.imshow", "matplotlib.title", "matplotlib.title", "matplotlib.show", "matplotlib.show", "lib.vis_utils.plot3d_pts", "lib.vis_utils.plot3d_pts", "lib.vis_utils.plot3d_pts", "lib.vis_utils.plot3d_pts", "h5py.File", "numpy.array().astype", "numpy.array().astype", "numpy.array", "lib.transformations.quaternion_matrix", "numpy.array", "numpy.stack", "numpy.stack", "len", "print", "numpy.linalg.pinv", "numpy.linalg.pinv", "numpy.linalg.pinv", "lib.transformations.euler_matrix", "max", "min", "max", "min", "max", "min", "numpy.sqrt", "numpy.sqrt", "center_p.reshape", "str", "str", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "numpy.dot", "numpy.dot", "numpy.ones", "numpy.ones", "numpy.array", "numpy.array", "numpy.array().reshape", "numpy.array", "numpy.array", "[].astype", "[].astype", "[].astype", "[].astype", "min", "min", "min", "max", "max", "max", "numpy.array", "range", "range", "range", "range", "len", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.vis_utils.plot3d_pts", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.vis_utils.plot3d_pts", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.vis_utils.plot3d_pts", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.vis_utils.plot3d_pts", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.quaternion_matrix", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.transformations.euler_matrix"], ["", "def", "__preprocess_and_save__", "(", "self", ",", "index", ")", ":", "\n", "        ", "obj_category", "=", "self", ".", "list_obj", "[", "index", "]", "\n", "ins", "=", "self", ".", "list_instance", "[", "index", "]", "\n", "obj", "=", "self", ".", "objnamelist", ".", "index", "(", "obj_category", ")", "\n", "art_status", "=", "self", ".", "list_status", "[", "index", "]", "\n", "frame_order", "=", "self", ".", "list_rank", "[", "index", "]", "\n", "label", "=", "self", ".", "list_label", "[", "index", "]", "\n", "h5_save_path", "=", "self", ".", "root_dir", "+", "'/hdf5/'", "+", "obj_category", "+", "'/'", "+", "ins", "+", "'/'", "+", "art_status", "\n", "if", "(", "not", "os", ".", "path", ".", "exists", "(", "h5_save_path", ")", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "h5_save_path", ")", "\n", "", "h5_save_name", "=", "h5_save_path", "+", "'/{}.h5'", ".", "format", "(", "frame_order", ")", "\n", "num_parts", "=", "self", ".", "urdf_dict", "[", "obj_category", "]", "[", "ins", "]", "[", "'num_links'", "]", "\n", "\n", "model_offsets", "=", "self", ".", "urdf_dict", "[", "obj_category", "]", "[", "ins", "]", "[", "'link'", "]", "\n", "joint_offsets", "=", "self", ".", "urdf_dict", "[", "obj_category", "]", "[", "ins", "]", "[", "'joint'", "]", "\n", "\n", "parts_model_point", "=", "[", "None", "]", "*", "num_parts", "\n", "parts_world_point", "=", "[", "None", "]", "*", "num_parts", "\n", "parts_target_point", "=", "[", "None", "]", "*", "num_parts", "\n", "\n", "parts_cloud_cam", "=", "[", "None", "]", "*", "num_parts", "\n", "parts_cloud_world", "=", "[", "None", "]", "*", "num_parts", "\n", "parts_cloud_canon", "=", "[", "None", "]", "*", "num_parts", "\n", "parts_cloud_urdf", "=", "[", "None", "]", "*", "num_parts", "\n", "parts_cloud_norm", "=", "[", "None", "]", "*", "num_parts", "\n", "\n", "parts_world_pos", "=", "[", "None", "]", "*", "num_parts", "\n", "parts_world_orn", "=", "[", "None", "]", "*", "num_parts", "\n", "parts_urdf_pos", "=", "[", "None", "]", "*", "num_parts", "\n", "parts_urdf_orn", "=", "[", "None", "]", "*", "num_parts", "\n", "parts_urdf_box", "=", "[", "None", "]", "*", "num_parts", "\n", "\n", "parts_model2world", "=", "[", "None", "]", "*", "num_parts", "\n", "parts_canon2urdf", "=", "[", "None", "]", "*", "num_parts", "\n", "parts_target_r", "=", "[", "None", "]", "*", "num_parts", "\n", "parts_target_t", "=", "[", "None", "]", "*", "num_parts", "\n", "\n", "parts_mask", "=", "[", "None", "]", "*", "num_parts", "\n", "choose_x", "=", "[", "None", "]", "*", "num_parts", "\n", "choose_y", "=", "[", "None", "]", "*", "num_parts", "\n", "choose_to_whole", "=", "[", "None", "]", "*", "num_parts", "\n", "\n", "# rgb/depth/label", "\n", "print", "(", "'current image: '", ",", "self", ".", "list_rgb", "[", "index", "]", ")", "\n", "img", "=", "Image", ".", "open", "(", "self", ".", "list_rgb", "[", "index", "]", ")", "\n", "img", "=", "np", ".", "array", "(", "img", ")", "#.astype(np.uint8)", "\n", "depth", "=", "np", ".", "array", "(", "h5py", ".", "File", "(", "self", ".", "list_depth", "[", "index", "]", ",", "'r'", ")", "[", "'data'", "]", ")", "\n", "label", "=", "np", ".", "array", "(", "Image", ".", "open", "(", "self", ".", "list_label", "[", "index", "]", ")", ")", "\n", "\n", "# pose infos", "\n", "pose_dict", "=", "self", ".", "meta_dict", "[", "obj_category", "]", "[", "ins", "]", "[", "art_status", "]", "[", "'frame_{}'", ".", "format", "(", "frame_order", ")", "]", "\n", "urdf_dict", "=", "self", ".", "urdf_dict", "[", "obj_category", "]", "[", "ins", "]", "\n", "viewMat", "=", "np", ".", "array", "(", "pose_dict", "[", "'viewMat'", "]", ")", ".", "reshape", "(", "4", ",", "4", ")", ".", "T", "\n", "projMat", "=", "np", ".", "array", "(", "pose_dict", "[", "'projMat'", "]", ")", ".", "reshape", "(", "4", ",", "4", ")", ".", "T", "\n", "\n", "parts_world_pos", "[", "0", "]", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", "]", ")", "\n", "parts_world_orn", "[", "0", "]", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", ",", "1", "]", ")", "\n", "for", "link", "in", "range", "(", "0", ",", "num_parts", ")", ":", "\n", "            ", "if", "link", ">", "0", ":", "\n", "                ", "parts_world_pos", "[", "link", "]", "=", "np", ".", "array", "(", "pose_dict", "[", "'obj'", "]", "[", "link", "-", "1", "]", "[", "4", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "parts_world_orn", "[", "link", "]", "=", "np", ".", "array", "(", "pose_dict", "[", "'obj'", "]", "[", "link", "-", "1", "]", "[", "5", "]", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "", "", "for", "link", "in", "range", "(", "num_parts", ")", ":", "\n", "            ", "if", "link", "==", "1", "and", "num_parts", "==", "2", ":", "\n", "                ", "parts_urdf_pos", "[", "link", "]", "=", "np", ".", "array", "(", "urdf_dict", "[", "'joint'", "]", "[", "'xyz'", "]", "[", "link", "-", "1", "]", ")", "# todo, accumulate joints pffsets != link offsets", "\n", "", "else", ":", "\n", "                ", "parts_urdf_pos", "[", "link", "]", "=", "-", "np", ".", "array", "(", "urdf_dict", "[", "'link'", "]", "[", "'xyz'", "]", "[", "link", "]", ")", "\n", "", "parts_urdf_orn", "[", "link", "]", "=", "np", ".", "array", "(", "urdf_dict", "[", "'link'", "]", "[", "'rpy'", "]", "[", "link", "]", ")", "\n", "\n", "", "for", "k", "in", "range", "(", "num_parts", ")", ":", "\n", "            ", "center_world_orn", "=", "parts_world_orn", "[", "k", "]", "\n", "center_world_orn", "=", "np", ".", "array", "(", "[", "center_world_orn", "[", "3", "]", ",", "center_world_orn", "[", "0", "]", ",", "center_world_orn", "[", "1", "]", ",", "center_world_orn", "[", "2", "]", "]", ")", "\n", "my_model2world_r", "=", "quaternion_matrix", "(", "center_world_orn", ")", "[", ":", "4", ",", ":", "4", "]", "# [w, x, y, z]", "\n", "my_model2world_t", "=", "parts_world_pos", "[", "k", "]", "\n", "my_model2world_mat", "=", "np", ".", "copy", "(", "my_model2world_r", ")", "\n", "for", "m", "in", "range", "(", "3", ")", ":", "\n", "                ", "my_model2world_mat", "[", "m", ",", "3", "]", "=", "my_model2world_t", "[", "m", "]", "\n", "", "my_world2camera_mat", "=", "viewMat", "\n", "my_camera2clip_mat", "=", "projMat", "\n", "my_model2camera_mat", "=", "np", ".", "dot", "(", "my_world2camera_mat", ",", "my_model2world_mat", ")", "\n", "parts_model2world", "[", "k", "]", "=", "my_model2world_mat", "\n", "\n", "# depth to cloud data", "\n", "", "mask", "=", "np", ".", "array", "(", "(", "label", "[", ":", ",", ":", "]", "<", "num_parts", ")", "&", "(", "label", "[", ":", ",", ":", "]", ">", "-", "1", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "mask_whole", "=", "np", ".", "copy", "(", "mask", ")", "\n", "for", "n", "in", "range", "(", "num_parts", ")", ":", "\n", "            ", "parts_mask", "[", "n", "]", "=", "np", ".", "array", "(", "(", "label", "[", ":", ",", ":", "]", "==", "(", "n", ")", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "choose_to_whole", "[", "n", "]", "=", "np", ".", "where", "(", "parts_mask", "[", "n", "]", ">", "0", ")", "\n", "\n", "#>>>>>>>>>>------- rendering target pcloud from depth image --------<<<<<<<<<#", "\n", "# first get projected map", "\n", "", "ymap", "=", "self", ".", "ymap", "\n", "xmap", "=", "self", ".", "xmap", "\n", "h", "=", "self", ".", "height", "\n", "w", "=", "self", ".", "width", "\n", "u_map", "=", "ymap", "*", "2", "/", "w", "-", "1", "\n", "v_map", "=", "(", "512", "-", "xmap", ")", "*", "2", "/", "h", "-", "1", "\n", "v1_map", "=", "xmap", "*", "2", "/", "h", "-", "1", "\n", "w_channel", "=", "-", "depth", "\n", "projected_map", "=", "np", ".", "stack", "(", "[", "u_map", "*", "w_channel", ",", "v_map", "*", "w_channel", ",", "depth", ",", "w_channel", "]", ")", ".", "transpose", "(", "[", "1", ",", "2", ",", "0", "]", ")", "\n", "projected_map1", "=", "np", ".", "stack", "(", "[", "u_map", "*", "w_channel", ",", "v1_map", "*", "w_channel", ",", "depth", ",", "w_channel", "]", ")", ".", "transpose", "(", "[", "1", ",", "2", ",", "0", "]", ")", "\n", "for", "s", "in", "range", "(", "num_parts", ")", ":", "\n", "            ", "x_set", ",", "y_set", "=", "choose_to_whole", "[", "s", "]", "\n", "if", "len", "(", "x_set", ")", "<", "10", ":", "\n", "                ", "print", "(", "'data is empty, skipping!!!'", ")", "\n", "return", "None", "\n", "", "else", ":", "\n", "                ", "choose_x", "[", "s", "]", "=", "x_set", "\n", "choose_y", "[", "s", "]", "=", "y_set", "\n", "\n", "# ---------------> from projected map into target part_cloud", "\n", "# order: cam->world->canon)", "\n", "", "projected_points", "=", "projected_map", "[", "choose_x", "[", "s", "]", "[", ":", "]", ".", "astype", "(", "np", ".", "uint16", ")", ",", "choose_y", "[", "s", "]", "[", ":", "]", ".", "astype", "(", "np", ".", "uint16", ")", ",", ":", "]", "\n", "projected_points", "=", "np", ".", "reshape", "(", "projected_points", ",", "[", "-", "1", ",", "4", "]", ")", "\n", "depth_channel", "=", "-", "projected_points", "[", ":", ",", "3", ":", "4", "]", "\n", "cloud_cam", "=", "np", ".", "dot", "(", "projected_points", "[", ":", ",", "0", ":", "2", "]", "-", "np", ".", "dot", "(", "depth_channel", ",", "projMat", "[", "0", ":", "2", ",", "2", ":", "3", "]", ".", "T", ")", ",", "np", ".", "linalg", ".", "pinv", "(", "projMat", "[", ":", "2", ",", ":", "2", "]", ".", "T", ")", ")", "\n", "\n", "projected_points1", "=", "projected_map1", "[", "choose_x", "[", "s", "]", "[", ":", "]", ".", "astype", "(", "np", ".", "uint16", ")", ",", "choose_y", "[", "s", "]", "[", ":", "]", ".", "astype", "(", "np", ".", "uint16", ")", ",", ":", "]", "\n", "projected_points1", "=", "np", ".", "reshape", "(", "projected_points1", ",", "[", "-", "1", ",", "4", "]", ")", "\n", "cloud_cam_real", "=", "np", ".", "dot", "(", "projected_points1", "[", ":", ",", "0", ":", "2", "]", "-", "np", ".", "dot", "(", "depth_channel", ",", "projMat", "[", "0", ":", "2", ",", "2", ":", "3", "]", ".", "T", ")", ",", "np", ".", "linalg", ".", "pinv", "(", "projMat", "[", ":", "2", ",", ":", "2", "]", ".", "T", ")", ")", "\n", "cloud_cam_real", "=", "np", ".", "concatenate", "(", "(", "cloud_cam_real", ",", "depth_channel", ")", ",", "axis", "=", "1", ")", "\n", "\n", "cloud_cam", "=", "np", ".", "concatenate", "(", "(", "cloud_cam", ",", "depth_channel", ")", ",", "axis", "=", "1", ")", "\n", "cloud_cam_full", "=", "np", ".", "concatenate", "(", "(", "cloud_cam", ",", "np", ".", "ones", "(", "(", "cloud_cam", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ")", ",", "axis", "=", "1", ")", "\n", "\n", "# modify, todo", "\n", "camera_pose_mat", "=", "np", ".", "linalg", ".", "pinv", "(", "viewMat", ".", "T", ")", "\n", "camera_pose_mat", "[", ":", "3", ",", ":", "]", "=", "-", "camera_pose_mat", "[", ":", "3", ",", ":", "]", "\n", "cloud_world", "=", "np", ".", "dot", "(", "cloud_cam_full", ",", "camera_pose_mat", ")", "\n", "cloud_canon", "=", "np", ".", "dot", "(", "cloud_world", ",", "np", ".", "linalg", ".", "pinv", "(", "parts_model2world", "[", "s", "]", ".", "T", ")", ")", "\n", "\n", "# canon points should be points coordinates centered in the inertial frame", "\n", "parts_cloud_cam", "[", "s", "]", "=", "cloud_cam_real", "[", ":", ",", ":", "3", "]", "\n", "parts_cloud_world", "[", "s", "]", "=", "cloud_world", "[", ":", ",", ":", "3", "]", "\n", "parts_cloud_canon", "[", "s", "]", "=", "cloud_canon", "[", ":", ",", ":", "3", "]", "\n", "\n", "", "for", "k", "in", "range", "(", "num_parts", ")", ":", "\n", "            ", "center_joint_orn", "=", "parts_urdf_orn", "[", "k", "]", "\n", "my_canon2urdf_r", "=", "euler_matrix", "(", "center_joint_orn", "[", "0", "]", ",", "center_joint_orn", "[", "1", "]", ",", "center_joint_orn", "[", "2", "]", ")", "[", ":", "4", ",", ":", "4", "]", "# [w, x, y, z]", "\n", "my_canon2urdf_t", "=", "parts_urdf_pos", "[", "k", "]", "\n", "my_canon2urdf_mat", "=", "my_canon2urdf_r", "\n", "for", "m", "in", "range", "(", "3", ")", ":", "\n", "                ", "my_canon2urdf_mat", "[", "m", ",", "3", "]", "=", "my_canon2urdf_t", "[", "m", "]", "\n", "", "part_points_space", "=", "np", ".", "concatenate", "(", "(", "parts_cloud_canon", "[", "k", "]", ",", "np", ".", "ones", "(", "(", "parts_cloud_canon", "[", "k", "]", ".", "shape", "[", "0", "]", ",", "1", ")", ")", ")", ",", "axis", "=", "1", ")", "\n", "parts_cloud_urdf", "[", "k", "]", "=", "np", ".", "dot", "(", "part_points_space", ",", "my_canon2urdf_mat", ".", "T", ")", "\n", "\n", "#>>>>>>>>>>>>>>> go to PNCS space", "\n", "", "for", "link", "in", "range", "(", "num_parts", ")", ":", "\n", "            ", "tight_w", "=", "max", "(", "parts_cloud_urdf", "[", "link", "]", "[", ":", ",", "0", "]", ")", "-", "min", "(", "parts_cloud_urdf", "[", "link", "]", "[", ":", ",", "0", "]", ")", "\n", "tight_l", "=", "max", "(", "parts_cloud_urdf", "[", "link", "]", "[", ":", ",", "1", "]", ")", "-", "min", "(", "parts_cloud_urdf", "[", "link", "]", "[", ":", ",", "1", "]", ")", "\n", "tight_h", "=", "max", "(", "parts_cloud_urdf", "[", "link", "]", "[", ":", ",", "2", "]", ")", "-", "min", "(", "parts_cloud_urdf", "[", "link", "]", "[", ":", ",", "2", "]", ")", "\n", "norm_factor", "=", "np", ".", "sqrt", "(", "1", ")", "/", "np", ".", "sqrt", "(", "tight_w", "**", "2", "+", "tight_l", "**", "2", "+", "tight_h", "**", "2", ")", "\n", "base_p", "=", "np", ".", "array", "(", "[", "min", "(", "parts_cloud_urdf", "[", "link", "]", "[", ":", ",", "0", "]", ")", ",", "min", "(", "parts_cloud_urdf", "[", "link", "]", "[", ":", ",", "1", "]", ")", ",", "min", "(", "parts_cloud_urdf", "[", "link", "]", "[", ":", ",", "2", "]", ")", "]", ")", ".", "reshape", "(", "1", ",", "3", ")", "\n", "extre_p", "=", "np", ".", "array", "(", "[", "max", "(", "parts_cloud_urdf", "[", "link", "]", "[", ":", ",", "0", "]", ")", ",", "max", "(", "parts_cloud_urdf", "[", "link", "]", "[", ":", ",", "1", "]", ")", ",", "max", "(", "parts_cloud_urdf", "[", "link", "]", "[", ":", ",", "2", "]", ")", "]", ")", ".", "reshape", "(", "1", ",", "3", ")", "\n", "center_p", "=", "(", "extre_p", "-", "base_p", ")", "/", "2", "*", "norm_factor", "\n", "\n", "parts_cloud_norm", "[", "link", "]", "=", "(", "parts_cloud_urdf", "[", "link", "]", "[", ":", ",", ":", "3", "]", "-", "base_p", ")", "*", "norm_factor", "+", "np", ".", "array", "(", "[", "0.5", ",", "0.5", ",", "0.5", "]", ")", ".", "reshape", "(", "1", ",", "3", ")", "-", "center_p", ".", "reshape", "(", "1", ",", "3", ")", "\n", "\n", "", "x_set_pcloud", "=", "np", ".", "concatenate", "(", "choose_x", ",", "axis", "=", "0", ")", "\n", "y_set_pcloud", "=", "np", ".", "concatenate", "(", "choose_y", ",", "axis", "=", "0", ")", "\n", "\n", "# save into h5 for rgb_img, input_pts, mask, correpsonding urdf_points", "\n", "print", "(", "'Writing to '", ",", "h5_save_name", ")", "\n", "hf", "=", "h5py", ".", "File", "(", "h5_save_name", ",", "'w'", ")", "\n", "hf", ".", "create_dataset", "(", "'rgb'", ",", "data", "=", "img", ")", "\n", "hf", ".", "create_dataset", "(", "'mask'", ",", "data", "=", "mask", ")", "\n", "cloud_cam", "=", "hf", ".", "create_group", "(", "'gt_points'", ")", "\n", "for", "part_i", ",", "points", "in", "enumerate", "(", "parts_cloud_cam", ")", ":", "\n", "            ", "cloud_cam", ".", "create_dataset", "(", "str", "(", "part_i", ")", ",", "data", "=", "points", ")", "\n", "", "coord_gt", "=", "hf", ".", "create_group", "(", "'gt_coords'", ")", "\n", "for", "part_i", ",", "points", "in", "enumerate", "(", "parts_cloud_urdf", ")", ":", "\n", "            ", "coord_gt", ".", "create_dataset", "(", "str", "(", "part_i", ")", ",", "data", "=", "points", ")", "\n", "", "hf", ".", "close", "(", ")", "\n", "\n", "################# for debug only, let me know if you have questions #################", "\n", "if", "self", ".", "is_debug", ":", "\n", "            ", "figure", "=", "plt", ".", "figure", "(", "dpi", "=", "200", ")", "\n", "ax", "=", "plt", ".", "subplot", "(", "121", ")", "\n", "plt", ".", "imshow", "(", "img", ")", "\n", "plt", ".", "title", "(", "'RGB image'", ")", "\n", "ax1", "=", "plt", ".", "subplot", "(", "122", ")", "\n", "plt", ".", "imshow", "(", "depth", ")", "\n", "plt", ".", "title", "(", "'depth image'", ")", "\n", "plt", ".", "show", "(", ")", "\n", "plot3d_pts", "(", "[", "parts_cloud_cam", "]", ",", "[", "[", "'part {}'", ".", "format", "(", "i", ")", "for", "i", "in", "range", "(", "len", "(", "parts_cloud_cam", ")", ")", "]", "]", ",", "s", "=", "5", ",", "title_name", "=", "[", "'camera coords'", "]", ")", "\n", "plot3d_pts", "(", "[", "parts_cloud_world", "]", ",", "[", "[", "'part {}'", ".", "format", "(", "i", ")", "for", "i", "in", "range", "(", "len", "(", "parts_cloud_world", ")", ")", "]", "]", ",", "s", "=", "5", ",", "title_name", "=", "[", "'world coords'", "]", ")", "\n", "plot3d_pts", "(", "[", "parts_cloud_canon", "]", ",", "[", "[", "'part {}'", ".", "format", "(", "i", ")", "for", "i", "in", "range", "(", "len", "(", "parts_cloud_canon", ")", ")", "]", "]", ",", "s", "=", "5", ",", "title_name", "=", "[", "'canon coords'", "]", ")", "\n", "plot3d_pts", "(", "[", "parts_cloud_urdf", "]", ",", "[", "[", "'part {}'", ".", "format", "(", "i", ")", "for", "i", "in", "range", "(", "len", "(", "parts_cloud_urdf", ")", ")", "]", "]", ",", "s", "=", "5", ",", "title_name", "=", "[", "'urdf coords'", "]", ")", "\n", "\n", "", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.tools.preprocess_data.dict_representer": [[27, 29], ["dumper.represent_dict", "data.items"], "function", ["None"], ["def", "dict_representer", "(", "dumper", ",", "data", ")", ":", "\n", "    ", "return", "dumper", ".", "represent_dict", "(", "data", ".", "items", "(", ")", ")", "\n", "", "def", "dict_constructor", "(", "loader", ",", "node", ")", ":", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.tools.preprocess_data.dict_constructor": [[29, 31], ["collections.OrderedDict", "loader.construct_pairs"], "function", ["None"], ["", "def", "dict_constructor", "(", "loader", ",", "node", ")", ":", "\n", "    ", "return", "OrderedDict", "(", "loader", ".", "construct_pairs", "(", "node", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.tools._init_paths.add_path": [[5, 8], ["sys.path.insert"], "function", ["None"], ["def", "add_path", "(", "path", ")", ":", "\n", "    ", "if", "path", "not", "in", "sys", ".", "path", ":", "\n", "        ", "sys", ".", "path", ".", "insert", "(", "0", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.tools.render_synthetic.dict_representer": [[29, 31], ["dumper.represent_dict", "data.items"], "function", ["None"], ["def", "dict_representer", "(", "dumper", ",", "data", ")", ":", "\n", "    ", "return", "dumper", ".", "represent_dict", "(", "data", ".", "items", "(", ")", ")", "\n", "", "def", "dict_constructor", "(", "loader", ",", "node", ")", ":", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.tools.render_synthetic.dict_constructor": [[31, 33], ["collections.OrderedDict", "loader.construct_pairs"], "function", ["None"], ["", "def", "dict_constructor", "(", "loader", ",", "node", ")", ":", "\n", "    ", "return", "OrderedDict", "(", "loader", ".", "construct_pairs", "(", "node", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.tools.render_synthetic.step_simulation": [[44, 50], ["pybullet.stepSimulation", "time.sleep"], "function", ["None"], ["def", "step_simulation", "(", ")", ":", "\n", "# self._sim_time = 0", "\n", "    ", "while", "True", ":", "\n", "        ", "pybullet", ".", "stepSimulation", "(", ")", "\n", "# self._sim_time += self._sim_timestep", "\n", "time", ".", "sleep", "(", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.tools.render_synthetic.render_data": [[52, 245], ["print", "xml.parse", "ET.parse.getroot", "pybullet.setGravity", "range", "time.time", "lib.data_utils.get_urdf", "time.time", "print", "pybullet.resetSimulation", "int", "int", "pybullet.getDebugVisualizerCamera", "len", "print", "pybullet.loadURDF", "obj_parts.append", "len", "lib.data_utils.get_model_pts", "numpy.random.rand", "collections.OrderedDict", "print", "range", "pybullet.getLinkState", "range", "time.time", "range", "time.time", "numpy.sqrt", "args.pitch.split", "args.yaw.split", "args.max_angles.split", "args.min_angles.split", "os.listdir", "range", "numpy.tan", "numpy.random.rand", "numpy.array().reshape", "numpy.random.rand", "numpy.random.rand", "numpy.random.rand", "numpy.random.rand", "numpy.random.rand", "numpy.random.rand", "os.makedirs", "os.makedirs", "os.makedirs", "range", "time.sleep", "pybullet.getLinkState", "float", "float", "pybullet.getNumJoints", "print", "pybullet.setJointMotorControl2", "pybullet.getJointInfo", "numpy.linalg.norm", "numpy.array().reshape", "os.path.exists", "pybullet.setJointMotorControl2", "time.time", "numpy.random.rand", "numpy.random.rand", "time.time", "list", "pybullet.computeViewMatrixFromYawPitchRoll", "pybullet.computeProjectionMatrixFOV", "pybullet.getCameraImage", "img_arr[].astype", "numpy.reshape", "numpy.reshape().astype", "collections.OrderedDict", "open", "yaml.dump", "pybullet.getJointInfo", "numpy.array", "numpy.tile", "pybullet.getNumJoints", "numpy.reshape", "collections.OrderedDict", "range", "cv2.imwrite", "cv2.imwrite", "cv2.imwrite", "h5py.File", "h5py.File.create_dataset", "time.sleep", "numpy.linspace().reshape", "numpy.array().reshape", "numpy.array().reshape", "numpy.array", "pybullet.getNumJoints", "numpy.arccos", "numpy.reshape", "pybullet.getNumJoints", "pybullet.getLinkState", "collections.OrderedDict", "min", "numpy.random.rand", "list", "list", "numpy.linspace", "numpy.array", "numpy.array", "numpy.sum", "list", "list", "list", "list", "list", "list", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.data_utils.get_urdf", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.data_utils.get_model_pts"], ["", "", "def", "render_data", "(", "data_root", ",", "name_obj", ",", "cur_urdf", ",", "args", "=", "None", ",", "cam_dis", "=", "1", ",", "urdf_file", "=", "'NA'", ",", "_WRITE_FLAG", "=", "True", ",", "_RENDER_FLAG", "=", "True", ",", "_CREATE_FOLDER", "=", "True", ",", "RENDER_NUM", "=", "100", ",", "ARTIC_CNT", "=", "20", ",", "_RENDER_MODE", "=", "'random'", ",", "_USE_GUI", "=", "True", ",", "_IS_DUBUG", "=", "True", ")", ":", "\n", "#>>>>>>>>>>>>>>>>>>>>>>>>>> internal config >>>>>>>>>>>>>>>>>>>>>>#", "\n", "    ", "save_path", "=", "data_root", "+", "'/render/'", "+", "name_obj", "\n", "path_urdf", "=", "data_root", "+", "'/urdf/'", "+", "name_obj", "\n", "roll", "=", "0", "\n", "steeringAngle", "=", "0", "\n", "camPosX", "=", "0", "\n", "camPosY", "=", "0", "\n", "camPosZ", "=", "0", "\n", "\n", "upAxisIndex", "=", "2", "# align with z", "\n", "camDistance", "=", "0", "\n", "pixelWidth", "=", "512", "\n", "pixelHeight", "=", "512", "\n", "nearPlane", "=", "0.01", "\n", "farPlane", "=", "10", "\n", "fov", "=", "75", "\n", "cameraUp", "=", "[", "0", ",", "0.5", "*", "np", ".", "sqrt", "(", "3", ")", ",", "0.5", "]", "# z axis", "\n", "cameraPos", "=", "[", "-", "1.1", ",", "-", "1.1", ",", "1.1", "]", "\n", "#>>>>>>>>>>>>>>>>>>>>>>>>> internal config end >>>>>>>>>>>>>>>>>>>#", "\n", "pitch_low", ",", "pitch_high", "=", "[", "int", "(", "x", ")", "for", "x", "in", "args", ".", "pitch", ".", "split", "(", "','", ")", "]", "\n", "yaw_low", ",", "yaw_high", "=", "[", "int", "(", "x", ")", "for", "x", "in", "args", ".", "yaw", ".", "split", "(", "','", ")", "]", "\n", "max_angles", "=", "[", "float", "(", "x", ")", "/", "180", "*", "np", ".", "pi", "for", "x", "in", "args", ".", "max_angles", ".", "split", "(", "','", ")", "]", "\n", "min_angles", "=", "[", "float", "(", "x", ")", "/", "180", "*", "np", ".", "pi", "for", "x", "in", "args", ".", "min_angles", ".", "split", "(", "','", ")", "]", "\n", "print", "(", "'we are setting pitch and yaw to: '", ",", "pitch_low", ",", "pitch_high", ",", "yaw_low", ",", "yaw_high", ")", "\n", "if", "not", "_WRITE_FLAG", ":", "\n", "        ", "camInfo", "=", "pybullet", ".", "getDebugVisualizerCamera", "(", ")", "\n", "\n", "", "tree_urdf", "=", "ET", ".", "parse", "(", "\"{}/{}/syn.urdf\"", ".", "format", "(", "path_urdf", ",", "cur_urdf", ")", ")", "\n", "root", "=", "tree_urdf", ".", "getroot", "(", ")", "\n", "\n", "num_joints", "=", "0", "\n", "num_joints", "=", "len", "(", "os", ".", "listdir", "(", "\"{}/{}/\"", ".", "format", "(", "path_urdf", ",", "cur_urdf", ")", ")", ")", "-", "2", "\n", "\n", "obj_parts", "=", "[", "]", "\n", "pybullet", ".", "setGravity", "(", "0", ",", "0", ",", "-", "10", ")", "\n", "\n", "for", "i", "in", "range", "(", "num_joints", "+", "1", ")", ":", "#", "\n", "        ", "urdf_file", "=", "\"{}/{}/syn_p{}.urdf\"", ".", "format", "(", "path_urdf", ",", "cur_urdf", ",", "i", ")", "\n", "print", "(", "'loading '", ",", "urdf_file", ")", "\n", "obj_p", "=", "pybullet", ".", "loadURDF", "(", "urdf_file", ")", "\n", "obj_parts", ".", "append", "(", "obj_p", ")", "\n", "if", "i", "==", "0", ":", "\n", "            ", "for", "joint", "in", "range", "(", "pybullet", ".", "getNumJoints", "(", "obj_parts", "[", "i", "]", ")", ")", ":", "\n", "                ", "print", "(", "\"joint[\"", ",", "joint", ",", "\"]=\"", ",", "pybullet", ".", "getJointInfo", "(", "obj_parts", "[", "i", "]", ",", "joint", ")", ")", "\n", "pybullet", ".", "setJointMotorControl2", "(", "obj_parts", "[", "i", "]", ",", "joint", ",", "pybullet", ".", "VELOCITY_CONTROL", ",", "targetVelocity", "=", "0", ",", "force", "=", "0", ")", "\n", "pybullet", ".", "getJointInfo", "(", "obj_parts", "[", "i", "]", ",", "joint", ")", "\n", "\n", "", "", "", "simu_cnt", "=", "0", "\n", "main_start", "=", "time", ".", "time", "(", ")", "\n", "\n", "urdf_ins", "=", "get_urdf", "(", "\"{}/{}\"", ".", "format", "(", "path_urdf", ",", "cur_urdf", ")", ")", "\n", "num_joints", "=", "len", "(", "urdf_ins", "[", "'obj_name'", "]", ")", "-", "1", "\n", "\n", "# instance-wise offset for camera distance", "\n", "try", ":", "\n", "        ", "model_pts", ",", "norm_factors", ",", "corner_pts", "=", "get_model_pts", "(", "data_root", ",", "name_obj", ",", "cur_urdf", ",", "obj_file_list", "=", "urdf_ins", "[", "'obj_name'", "]", ")", "\n", "center_pts", "=", "[", "(", "x", "[", "0", "]", "+", "x", "[", "1", "]", ")", "/", "2", "for", "x", "in", "corner_pts", "]", "\n", "tight_bb", "=", "corner_pts", "[", "0", "]", "[", "1", "]", "-", "corner_pts", "[", "0", "]", "[", "0", "]", "# the size of this objects", "\n", "min_dis", "=", "np", ".", "linalg", ".", "norm", "(", "tight_bb", ")", "/", "2", "*", "np", ".", "tan", "(", "fov", "/", "180", "/", "2", "*", "np", ".", "pi", ")", "# todo", "\n", "offset", "=", "min_dis", "/", "2", "\n", "", "except", ":", "\n", "        ", "offset", "=", "0.5", "\n", "\n", "", "if", "_RENDER_MODE", "==", "'random'", ":", "\n", "        ", "steeringAngleArray", "=", "np", ".", "random", ".", "rand", "(", "ARTIC_CNT", ",", "num_joints", ")", "*", "np", ".", "array", "(", "[", "max_angles", "]", ")", ".", "reshape", "(", "-", "1", ",", "num_joints", ")", "\n", "", "elif", "_RENDER_MODE", "==", "'linear'", ":", "\n", "        ", "steeringAngleArray", "=", "np", ".", "tile", "(", "np", ".", "linspace", "(", "0", ",", "1", ",", "ARTIC_CNT", ")", ".", "reshape", "(", "-", "1", ",", "1", ")", ",", "(", "1", ",", "num_joints", ")", ")", "*", "(", "np", ".", "array", "(", "[", "max_angles", "]", ")", ".", "reshape", "(", "-", "1", ")", "-", "np", ".", "array", "(", "[", "min_angles", "]", ")", ".", "reshape", "(", "-", "1", ")", ")", "+", "np", ".", "array", "(", "[", "min_angles", "]", ")", ".", "reshape", "(", "-", "1", ")", "\n", "\n", "", "rdn_offset", "=", "2", "*", "offset", "*", "(", "np", ".", "random", ".", "rand", "(", "ARTIC_CNT", ",", "RENDER_NUM", ")", "-", "0.5", ")", "# -0.4, 0.4", "\n", "lightDirectionArray", "=", "10", "*", "np", ".", "random", ".", "rand", "(", "ARTIC_CNT", ",", "RENDER_NUM", ",", "3", ")", "# coming direction of light", "\n", "lightDistanceArray", "=", "0.9", "+", "0.2", "*", "np", ".", "random", ".", "rand", "(", "ARTIC_CNT", ",", "RENDER_NUM", ")", "\n", "lightColorArray", "=", "0.9", "+", "0.1", "*", "np", ".", "random", ".", "rand", "(", "ARTIC_CNT", ",", "RENDER_NUM", ",", "3", ")", "\n", "lightSpecularCoeffArray", "=", "0.85", "+", "0.1", "*", "np", ".", "random", ".", "rand", "(", "ARTIC_CNT", ",", "RENDER_NUM", ")", "\n", "lightAmbientCoeffArray", "=", "0.1", "+", "0.2", "*", "np", ".", "random", ".", "rand", "(", "ARTIC_CNT", ",", "RENDER_NUM", ")", "\n", "lightDiffuseCoeffArray", "=", "0.85", "+", "0.1", "*", "np", ".", "random", ".", "rand", "(", "ARTIC_CNT", ",", "RENDER_NUM", ")", "\n", "\n", "# get joint state", "\n", "while", "(", "simu_cnt", "<", "ARTIC_CNT", ")", ":", "\n", "        ", "if", "(", "not", "os", ".", "path", ".", "exists", "(", "save_path", "+", "'/{}/{}/depth/'", ".", "format", "(", "cur_urdf", ",", "simu_cnt", ")", ")", ")", "and", "_CREATE_FOLDER", ":", "\n", "            ", "os", ".", "makedirs", "(", "save_path", "+", "'/{}/{}/depth/'", ".", "format", "(", "cur_urdf", ",", "simu_cnt", ")", ")", "\n", "os", ".", "makedirs", "(", "save_path", "+", "'/{}/{}/rgb/'", ".", "format", "(", "cur_urdf", ",", "simu_cnt", ")", ")", "\n", "os", ".", "makedirs", "(", "save_path", "+", "'/{}/{}/mask/'", ".", "format", "(", "cur_urdf", ",", "simu_cnt", ")", ")", "\n", "", "yml_dict", "=", "OrderedDict", "(", ")", "\n", "yml_file", "=", "save_path", "+", "'/{}/{}/gt.yml'", ".", "format", "(", "cur_urdf", ",", "simu_cnt", ")", "\n", "\n", "# set articulation status", "\n", "print", "(", "'Rendering with joint angles {}'", ".", "format", "(", "steeringAngleArray", "[", "simu_cnt", ",", ":", "]", "*", "180", "/", "np", ".", "pi", ")", ")", "\n", "for", "steer", "in", "range", "(", "num_joints", ")", ":", "\n", "            ", "steeringAngle", "=", "steeringAngleArray", "[", "simu_cnt", ",", "steer", "]", "\n", "for", "j", "in", "range", "(", "num_joints", "+", "1", ")", ":", "#", "\n", "                ", "pybullet", ".", "setJointMotorControl2", "(", "obj_parts", "[", "j", "]", ",", "steer", ",", "pybullet", ".", "POSITION_CONTROL", ",", "targetVelocity", "=", "0", ",", "targetPosition", "=", "steeringAngle", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "# time.sleep(0.2)", "\n", "\n", "# make sure the angle matches with set value", "\n", "", "", "lstate0", "=", "pybullet", ".", "getLinkState", "(", "obj_parts", "[", "0", "]", ",", "linkIndex", "=", "pybullet", ".", "getNumJoints", "(", "obj_parts", "[", "0", "]", ")", "-", "1", ",", "computeForwardKinematics", "=", "True", ")", "\n", "for", "m", "in", "range", "(", "10", ")", ":", "\n", "            ", "time", ".", "sleep", "(", "0.1", ")", "\n", "lstate1", "=", "pybullet", ".", "getLinkState", "(", "obj_parts", "[", "0", "]", ",", "linkIndex", "=", "pybullet", ".", "getNumJoints", "(", "obj_parts", "[", "0", "]", ")", "-", "1", ",", "computeForwardKinematics", "=", "True", ")", "\n", "q0", "=", "lstate0", "[", "5", "]", "\n", "q1", "=", "lstate1", "[", "5", "]", "\n", "angle_diff", "=", "2", "*", "np", ".", "arccos", "(", "min", "(", "1", ",", "np", ".", "sum", "(", "np", ".", "array", "(", "q0", ")", "*", "np", ".", "array", "(", "q1", ")", ")", ")", ")", "/", "np", ".", "pi", "*", "180", "\n", "# print('angle difference is: ', angle_diff)", "\n", "if", "angle_diff", "<", "0.05", ":", "\n", "                ", "break", "\n", "", "lstate0", "=", "lstate1", "\n", "\n", "", "img_id", "=", "0", "\n", "lastTime", "=", "time", ".", "time", "(", ")", "\n", "view_num", "=", "100", "\n", "pitch_choices", "=", "pitch_low", "+", "(", "pitch_high", "-", "pitch_low", ")", "*", "np", ".", "random", ".", "rand", "(", "view_num", ")", "\n", "yaw_choices", "=", "yaw_low", "+", "(", "yaw_high", "-", "yaw_low", ")", "*", "np", ".", "random", ".", "rand", "(", "view_num", ")", "\n", "for", "i", "in", "range", "(", "view_num", ")", ":", "\n", "            ", "pitch", "=", "pitch_choices", "[", "i", "]", "\n", "yaw", "=", "yaw_choices", "[", "i", "]", "\n", "if", "(", "img_id", "<", "RENDER_NUM", "and", "_RENDER_FLAG", ")", ":", "\n", "                ", "camTargetPos", "=", "0.8", "*", "min_dis", "*", "(", "np", ".", "random", ".", "rand", "(", "3", ")", "-", "0.5", ")", "+", "center_pts", "[", "0", "]", "\n", "nowTime", "=", "time", ".", "time", "(", ")", "\n", "offset", "=", "rdn_offset", "[", "simu_cnt", ",", "img_id", "]", "\n", "lightDirection", "=", "lightDirectionArray", "[", "simu_cnt", ",", "img_id", ",", ":", "]", "\n", "lightDistance", "=", "lightDistanceArray", "[", "simu_cnt", ",", "img_id", "]", "\n", "lightColor", "=", "list", "(", "lightColorArray", "[", "simu_cnt", ",", "img_id", ",", ":", "]", ")", "\n", "lightAmbientCoeff", "=", "lightAmbientCoeffArray", "[", "simu_cnt", ",", "img_id", "]", "\n", "lightDiffuseCoeff", "=", "lightDiffuseCoeffArray", "[", "simu_cnt", ",", "img_id", "]", "\n", "lightSpecularCoeff", "=", "lightSpecularCoeffArray", "[", "simu_cnt", ",", "img_id", "]", "\n", "\n", "camDistance_final", "=", "min_dis", "*", "2.8", "+", "offset", "# [1.6, 2.6] * min_dis", "\n", "viewMatrix", "=", "pybullet", ".", "computeViewMatrixFromYawPitchRoll", "(", "camTargetPos", "[", "0", "]", ",", "camDistance_final", ",", "yaw", ",", "pitch", ",", "roll", ",", "upAxisIndex", ")", "\n", "aspect", "=", "pixelWidth", "/", "pixelHeight", "\n", "projectionMatrix", "=", "pybullet", ".", "computeProjectionMatrixFOV", "(", "fov", ",", "aspect", ",", "nearPlane", ",", "farPlane", ")", "\n", "img_arr", "=", "pybullet", ".", "getCameraImage", "(", "pixelWidth", ",", "pixelHeight", ",", "viewMatrix", ",", "projectionMatrix", ",", "lightDirection", "=", "lightDirection", ",", "renderer", "=", "pybullet", ".", "ER_BULLET_HARDWARE_OPENGL", ")", "\n", "\n", "w", "=", "img_arr", "[", "0", "]", "\n", "h", "=", "img_arr", "[", "1", "]", "\n", "rgb", "=", "img_arr", "[", "2", "]", "\n", "depth_raw", "=", "img_arr", "[", "3", "]", ".", "astype", "(", "np", ".", "float32", ")", "\n", "mask", "=", "img_arr", "[", "4", "]", "\n", "depth", "=", "255.0", "*", "nearPlane", "/", "(", "farPlane", "-", "(", "farPlane", "-", "nearPlane", ")", "*", "depth_raw", ")", "# *farPlane/255.0", "\n", "far", "=", "farPlane", "\n", "near", "=", "nearPlane", "\n", "depth_to_save", "=", "2.0", "*", "far", "*", "near", "/", "(", "far", "+", "near", "-", "(", "far", "-", "near", ")", "*", "(", "2", "*", "depth_raw", "-", "1.0", ")", ")", "\n", "\n", "np_rgb_arr", "=", "np", ".", "reshape", "(", "rgb", ",", "(", "h", ",", "w", ",", "4", ")", ")", "[", ":", ",", ":", ",", ":", "3", "]", "\n", "np_depth_arr", "=", "np", ".", "reshape", "(", "depth", ",", "(", "h", ",", "w", ",", "1", ")", ")", "\n", "np_mask_arr", "=", "(", "np", ".", "reshape", "(", "mask", ",", "(", "h", ",", "w", ",", "1", ")", ")", ")", ".", "astype", "(", "np", ".", "uint8", ")", "\n", "image_path", "=", "save_path", "+", "'/{}/{}'", ".", "format", "(", "cur_urdf", ",", "simu_cnt", ")", "\n", "\n", "rgb_name", "=", "image_path", "+", "'/rgb/{0:06d}.png'", ".", "format", "(", "img_id", ")", "\n", "depth_img_name", "=", "image_path", "+", "'/depth/{0:06d}.png'", ".", "format", "(", "img_id", ")", "\n", "depth_name", "=", "image_path", "+", "'/depth/{0:06d}.h5'", ".", "format", "(", "img_id", ")", "\n", "mask_name", "=", "image_path", "+", "'/mask/{0:06d}.png'", ".", "format", "(", "img_id", ")", "\n", "\n", "if", "i", "==", "0", ":", "\n", "                    ", "joint_pos", "=", "OrderedDict", "(", ")", "\n", "for", "joint", "in", "range", "(", "pybullet", ".", "getNumJoints", "(", "obj_parts", "[", "0", "]", ")", ")", ":", "\n", "                        ", "lstate", "=", "pybullet", ".", "getLinkState", "(", "obj_parts", "[", "0", "]", ",", "linkIndex", "=", "joint", ",", "computeForwardKinematics", "=", "True", ")", "\n", "joint_pos", "[", "joint", "]", "=", "OrderedDict", "(", "\n", "[", "(", "0", ",", "list", "(", "lstate", "[", "0", "]", ")", ")", ",", "\n", "(", "1", ",", "list", "(", "lstate", "[", "1", "]", ")", ")", ",", "\n", "(", "2", ",", "list", "(", "lstate", "[", "2", "]", ")", ")", ",", "\n", "(", "3", ",", "list", "(", "lstate", "[", "3", "]", ")", ")", ",", "\n", "(", "4", ",", "list", "(", "lstate", "[", "4", "]", ")", ")", ",", "\n", "(", "5", ",", "list", "(", "lstate", "[", "5", "]", ")", ")", "]", "\n", ")", "\n", "# print('Joint {} lstate under {} : \\n'.format(joint, steeringAngleArray[simu_cnt, :]), lstate[4:6])", "\n", "\n", "", "", "if", "_WRITE_FLAG", "is", "True", ":", "\n", "                    ", "cv2", ".", "imwrite", "(", "rgb_name", ",", "np_rgb_arr", ")", "\n", "cv2", ".", "imwrite", "(", "depth_img_name", ",", "np_depth_arr", ")", "\n", "cv2", ".", "imwrite", "(", "mask_name", ",", "np_mask_arr", ")", "\n", "hf", "=", "h5py", ".", "File", "(", "depth_name", ",", "'w'", ")", "\n", "hf", ".", "create_dataset", "(", "'data'", ",", "data", "=", "depth_to_save", ")", "\n", "", "yml_dict", "[", "'frame_{}'", ".", "format", "(", "img_id", ")", "]", "=", "OrderedDict", "(", "[", "(", "'obj'", ",", "joint_pos", ")", ",", "\n", "(", "'viewMat'", ",", "list", "(", "viewMatrix", ")", ")", ",", "\n", "(", "'projMat'", ",", "list", "(", "projectionMatrix", ")", ")", "\n", "]", ")", "\n", "if", "not", "_WRITE_FLAG", ":", "\n", "                    ", "time", ".", "sleep", "(", "1", ")", "\n", "", "img_id", "+=", "1", "\n", "lastTime", "=", "nowTime", "\n", "\n", "", "", "if", "_WRITE_FLAG", ":", "\n", "            ", "with", "open", "(", "yml_file", ",", "'w'", ")", "as", "f", ":", "\n", "                ", "yaml", ".", "dump", "(", "yml_dict", ",", "f", ",", "default_flow_style", "=", "False", ")", "\n", "\n", "", "", "simu_cnt", "+=", "1", "\n", "stop", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "main_stop", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"Total time %f\"", "%", "(", "main_stop", "-", "main_start", ")", ")", "\n", "pybullet", ".", "resetSimulation", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.tools.xml_parser_patch_stick.urdf_obj.__init__": [[29, 32], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "link_num", ",", "dim_base", ")", ":", "\n", "        ", "self", ".", "link_num", "=", "link_num", "\n", "self", ".", "dim_base", "=", "dim_base", "\n", "#>>>>>>>>>>>>---------XML oject------------", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.tools.xml_parser_patch_stick.generate_urdf": [[35, 168], ["xml_parser_patch_stick.urdf_obj", "xml.etree.ElementTree.Element", "numpy.random.rand", "links_h_raw[].sort", "xml.etree.ElementTree.XML", "xml.etree.ElementTree.SubElement", "xml.etree.ElementTree.SubElement", "xml.etree.ElementTree.SubElement", "xml.etree.ElementTree.SubElement", "xml.etree.ElementTree.SubElement", "xml.etree.ElementTree.SubElement", "range", "random.shuffle", "range", "range", "xml.etree.ElementTree.Element.extend", "xml.etree.ElementTree.Element.extend", "xml.dom.minidom.parseString", "xml.dom.minidom.parseString", "xml.dom.minidom.parseString.toprettyxml", "xml.ElementTree", "range", "print", "print", "xml.etree.ElementTree.Element", "xml.etree.ElementTree.Element", "len", "xml.etree.ElementTree.SubElement", "xml.etree.ElementTree.SubElement", "material_lib.append", "xml.etree.ElementTree.SubElement", "xml.etree.ElementTree.XML", "xml.etree.ElementTree.SubElement.extend", "xml.etree.ElementTree.SubElement", "xml.etree.ElementTree.SubElement", "xml.etree.ElementTree.tostring", "os.path.exists", "os.makedirs", "open", "f.write", "copy.deepcopy", "copy.deepcopy.findall", "xml.dom.minidom.parseString", "xml.dom.minidom.parseString", "xml.dom.minidom.parseString.toprettyxml", "xml.ElementTree", "str", "sum", "range", "range", "range", "range", "range", "xml.etree.ElementTree.SubElement", "xml.etree.ElementTree.SubElement", "xml.etree.ElementTree.SubElement", "xml.etree.ElementTree.SubElement", "xml.etree.ElementTree.SubElement", "xml.etree.ElementTree.SubElement", "xml.etree.ElementTree.SubElement", "xml.etree.ElementTree.SubElement", "xml.etree.ElementTree.SubElement", "xml.etree.ElementTree.SubElement", "xml.etree.ElementTree.SubElement", "children[].extend", "xml.etree.ElementTree.SubElement.iter", "xml.etree.ElementTree.SubElement.iter", "xml.etree.ElementTree.SubElement", "xml.etree.ElementTree.SubElement", "xml.etree.ElementTree.tostring", "open", "f.write", "range", "random.randint", "random.randint", "xml.etree.ElementTree.SubElement", "xml.etree.ElementTree.Element", "xml.etree.ElementTree.SubElement", "mass.set", "inertia.set", "inertia.set", "inertia.set", "inertia.set", "inertia.set", "inertia.set", "xml.etree.ElementTree.SubElement", "xml.etree.ElementTree.SubElement", "link.findall", "xml.etree.ElementTree.SubElement", "range", "xml.etree.ElementTree.SubElement", "str", "xml.etree.ElementTree.SubElement", "xml.etree.ElementTree.SubElement", "link.remove", "str", "str", "str", "str"], "function", ["None"], ["", "", "def", "generate_urdf", "(", "parts_num", ",", "save_ind", ")", ":", "\n", "    ", "robot", "=", "urdf_obj", "(", "parts_num", ",", "[", "1", ",", "1", ",", "1", "]", ")", "\n", "num", "=", "robot", ".", "link_num", "\n", "root", "=", "Element", "(", "'robot'", ",", "name", "=", "\"block\"", ")", "\n", "\n", "links_name", "=", "[", "\"base_link\"", "]", "+", "[", "str", "(", "i", "+", "1", ")", "for", "i", "in", "range", "(", "num", ")", "]", "\n", "links_h_raw", "=", "np", ".", "random", ".", "rand", "(", "num", ")", "\n", "links_w", "=", "[", "2", ",", "1.5", "]", "\n", "links_h_raw", "=", "links_h_raw", "/", "sum", "(", "links_h_raw", ")", "*", "0.3", "\n", "links_h_raw", "[", ":", ":", "-", "1", "]", ".", "sort", "(", ")", "\n", "links_h", "=", "links_h_raw", "\n", "# links_h = np.flip(links_h_raw)", "\n", "all_kinds_shape", "=", "[", "\"box\"", ",", "\"cylinder\"", "]", "\n", "links_shape", "=", "[", "all_kinds_shape", "[", "randint", "(", "0", ",", "0", ")", "]", "for", "i", "in", "range", "(", "num", ")", "]", "\n", "joints_name", "=", "[", "\"{}_j_{}\"", ".", "format", "(", "i", ",", "i", "+", "1", ")", "for", "i", "in", "range", "(", "num", "-", "1", ")", "]", "\n", "all_kinds_joints", "=", "[", "\"revolute\"", ",", "\"fixed\"", ",", "\"prismatic\"", ",", "\"continuous\"", ",", "\"planar\"", "]", "\n", "joints_type", "=", "[", "all_kinds_joints", "[", "randint", "(", "0", ",", "0", ")", "]", "for", "i", "in", "range", "(", "num", "-", "1", ")", "]", "\n", "#", "\n", "children", "=", "[", "\n", "Element", "(", "'link'", ",", "name", "=", "links_name", "[", "i", "]", ")", "\n", "for", "i", "in", "range", "(", "num", ")", "\n", "]", "\n", "joints", "=", "[", "\n", "Element", "(", "'joint'", ",", "name", "=", "joints_name", "[", "i", "]", ",", "type", "=", "joints_type", "[", "i", "]", ")", "\n", "for", "i", "in", "range", "(", "num", "-", "1", ")", "\n", "]", "\n", "# add inertial component", "\n", "node_inertial", "=", "XML", "(", "'''<inertial><origin rpy=\"0 0 0\" xyz=\"0 0 0\"/><mass value=\"1.0\"/><inertia ixx=\"0.9\" ixy=\"0.9\" ixz=\"0.9\" iyy=\"0.9\" iyz=\"0\" izz=\"0.9\"/></inertial>'''", ")", "\n", "# add color components", "\n", "mat_blue", "=", "SubElement", "(", "root", ",", "'material'", ",", "name", "=", "\"blue\"", ")", "\n", "color_blue", "=", "SubElement", "(", "mat_blue", ",", "\"color\"", ",", "rgba", "=", "\"0 0 0.8 1\"", ")", "\n", "mat_black", "=", "SubElement", "(", "root", ",", "'material'", ",", "name", "=", "\"black\"", ")", "\n", "color_blue", "=", "SubElement", "(", "mat_black", ",", "\"color\"", ",", "rgba", "=", "\"0 0 0 1\"", ")", "\n", "mat_white", "=", "SubElement", "(", "root", ",", "'material'", ",", "name", "=", "\"white\"", ")", "\n", "color_white", "=", "SubElement", "(", "mat_white", ",", "\"color\"", ",", "rgba", "=", "\"1 1 1 1\"", ")", "\n", "material_lib", "=", "[", "'color_blue'", ",", "'color_white'", "]", "\n", "colors_val", "=", "[", "\"1 1 0\"", ",", "\"1 0 1\"", ",", "\"0 1 1\"", ",", "\"1 0 0\"", ",", "\"0 1 0\"", ",", "\"0 0 1\"", "]", "\n", "colors_name", "=", "[", "\"yellow\"", ",", "\"magenta\"", ",", "\"cyan\"", ",", "\"red\"", ",", "\"green\"", ",", "\"blue\"", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "colors_val", ")", ")", ":", "\n", "        ", "mat_any", "=", "SubElement", "(", "root", ",", "'material'", ",", "name", "=", "colors_name", "[", "i", "]", ")", "\n", "color_any", "=", "SubElement", "(", "mat_any", ",", "\"color\"", ",", "rgba", "=", "\"{} 1\"", ".", "format", "(", "colors_val", "[", "i", "]", ")", ")", "\n", "material_lib", ".", "append", "(", "colors_name", "[", "i", "]", ")", "\n", "", "random", ".", "shuffle", "(", "material_lib", ")", "\n", "#>>>>>>>>>>>>>>>>> links properties", "\n", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "        ", "if", "i", "==", "0", ":", "\n", "            ", "visual", "=", "SubElement", "(", "children", "[", "i", "]", ",", "'visual'", ")", "\n", "origin", "=", "SubElement", "(", "visual", ",", "'origin'", ",", "rpy", "=", "\"0.0 0 0\"", ",", "xyz", "=", "\"0 0 {}\"", ".", "format", "(", "0", ")", ")", "\n", "geometry", "=", "SubElement", "(", "visual", ",", "'geometry'", ")", "\n", "if", "links_shape", "[", "i", "]", "==", "\"cylinder\"", ":", "\n", "                ", "shape", "=", "SubElement", "(", "geometry", ",", "'cylinder'", ",", "length", "=", "str", "(", "links_h", "[", "i", "]", ")", ",", "radius", "=", "str", "(", "links_h", "[", "i", "]", "/", "4", ")", ")", "\n", "", "elif", "links_shape", "[", "i", "]", "==", "\"box\"", ":", "\n", "                ", "shape", "=", "SubElement", "(", "geometry", ",", "'box'", ",", "size", "=", "\"{} {} {}\"", ".", "format", "(", "links_w", "[", "0", "]", ",", "links_w", "[", "1", "]", ",", "links_h", "[", "i", "]", ")", ")", "\n", "", "material", "=", "SubElement", "(", "visual", ",", "'material'", ",", "name", "=", "material_lib", "[", "i", "]", ")", "\n", "", "else", ":", "\n", "            ", "visual", "=", "[", "Element", "(", "'visual'", ")", "for", "j", "in", "range", "(", "2", ")", "]", "\n", "# visual for link ", "\n", "origin", "=", "SubElement", "(", "visual", "[", "0", "]", ",", "'origin'", ",", "rpy", "=", "\"0.0 0 0\"", ",", "xyz", "=", "\"0 {} {}\"", ".", "format", "(", "links_w", "[", "1", "]", "/", "2", ",", "0", ")", ")", "#links_h[i]/2", "\n", "geometry", "=", "SubElement", "(", "visual", "[", "0", "]", ",", "'geometry'", ")", "\n", "if", "links_shape", "[", "i", "]", "==", "\"cylinder\"", ":", "\n", "                ", "shape", "=", "SubElement", "(", "geometry", ",", "'cylinder'", ",", "length", "=", "str", "(", "links_h", "[", "i", "]", ")", ",", "radius", "=", "str", "(", "links_h", "[", "i", "]", "/", "4", ")", ")", "\n", "", "elif", "links_shape", "[", "i", "]", "==", "\"box\"", ":", "\n", "                ", "shape", "=", "SubElement", "(", "geometry", ",", "'box'", ",", "size", "=", "\"{} {} {}\"", ".", "format", "(", "links_w", "[", "0", "]", ",", "links_w", "[", "1", "]", ",", "links_h", "[", "i", "]", ")", ")", "\n", "", "material", "=", "SubElement", "(", "visual", "[", "0", "]", ",", "'material'", ",", "name", "=", "material_lib", "[", "i", "]", ")", "\n", "# visual for joint", "\n", "origin_joint", "=", "SubElement", "(", "visual", "[", "1", "]", ",", "'origin'", ",", "rpy", "=", "\"0.0 1.5707 0\"", ",", "xyz", "=", "\"0 0 0\"", ")", "\n", "geometry_joint", "=", "SubElement", "(", "visual", "[", "1", "]", ",", "'geometry'", ")", "\n", "shape_joint", "=", "SubElement", "(", "geometry_joint", ",", "'cylinder'", ",", "length", "=", "str", "(", "links_w", "[", "0", "]", ")", ",", "radius", "=", "\"{}\"", ".", "format", "(", "links_h", "[", "i", "]", "/", "4", ")", ")", "\n", "material_joint", "=", "SubElement", "(", "visual", "[", "1", "]", ",", "'material'", ",", "name", "=", "material_lib", "[", "i", "]", ")", "\n", "children", "[", "i", "]", ".", "extend", "(", "visual", ")", "\n", "\n", "", "inertial", "=", "SubElement", "(", "children", "[", "i", "]", ",", "'inertial'", ")", "\n", "node_inertial", "=", "XML", "(", "'''<inertial><origin rpy=\"0 0 0\" xyz=\"0 0 0\"/><mass value=\"1.0\"/><inertia ixx=\"0.9\" ixy=\"0.9\" ixz=\"0.9\" iyy=\"0.9\" iyz=\"0\" izz=\"0.9\"/></inertial>'''", ")", "\n", "inertial", ".", "extend", "(", "node_inertial", ")", "\n", "if", "i", "==", "0", ":", "\n", "            ", "for", "mass", "in", "inertial", ".", "iter", "(", "'mass'", ")", ":", "\n", "                ", "mass", ".", "set", "(", "'value'", ",", "\"0.0\"", ")", "\n", "", "for", "inertia", "in", "inertial", ".", "iter", "(", "'inertia'", ")", ":", "\n", "                ", "inertia", ".", "set", "(", "'ixx'", ",", "\"0.0\"", ")", "\n", "inertia", ".", "set", "(", "'ixy'", ",", "\"0.0\"", ")", "\n", "inertia", ".", "set", "(", "'ixz'", ",", "\"0.0\"", ")", "\n", "inertia", ".", "set", "(", "'iyy'", ",", "\"0.0\"", ")", "\n", "inertia", ".", "set", "(", "'iyz'", ",", "\"0.0\"", ")", "\n", "inertia", ".", "set", "(", "'izz'", ",", "\"0.0\"", ")", "\n", "#>>>>>>>>>>>>>> joint features", "\n", "", "", "", "for", "i", "in", "range", "(", "num", "-", "1", ")", ":", "\n", "        ", "parent", "=", "SubElement", "(", "joints", "[", "i", "]", ",", "\"parent\"", ",", "link", "=", "links_name", "[", "i", "]", ")", "\n", "child", "=", "SubElement", "(", "joints", "[", "i", "]", ",", "\"child\"", ",", "link", "=", "links_name", "[", "i", "+", "1", "]", ")", "\n", "if", "i", "==", "0", ":", "\n", "            ", "if", "links_shape", "[", "i", "]", "==", "\"box\"", ":", "\n", "                ", "origin", "=", "SubElement", "(", "joints", "[", "i", "]", ",", "\"origin\"", ",", "xyz", "=", "\"0 {} {}\"", ".", "format", "(", "links_w", "[", "1", "]", "/", "2", ",", "(", "links_h", "[", "i", "]", ")", "/", "2", ")", ",", "rpy", "=", "\"0 0 0\"", ")", "\n", "", "elif", "links_shape", "[", "i", "]", "==", "\"cylinder\"", ":", "\n", "                ", "origin", "=", "SubElement", "(", "joints", "[", "i", "]", ",", "\"origin\"", ",", "xyz", "=", "\"0 0 {}\"", ".", "format", "(", "(", "links_h", "[", "i", "]", ")", "/", "2", "-", "0.005", ")", ",", "rpy", "=", "\"0 0 0\"", ")", "\n", "", "", "else", ":", "\n", "            ", "if", "links_shape", "[", "i", "]", "==", "\"box\"", ":", "\n", "                ", "origin", "=", "SubElement", "(", "joints", "[", "i", "]", ",", "\"origin\"", ",", "xyz", "=", "\"0 {} {}\"", ".", "format", "(", "links_w", "[", "1", "]", ",", "links_h", "[", "i", "]", ")", ",", "rpy", "=", "\"0 0 0\"", ")", "\n", "", "elif", "links_shape", "[", "i", "]", "==", "\"cylinder\"", ":", "\n", "                ", "origin", "=", "SubElement", "(", "joints", "[", "i", "]", ",", "\"origin\"", ",", "xyz", "=", "\"0 0 {}\"", ".", "format", "(", "(", "links_h", "[", "i", "]", ")", "/", "2", "-", "0.005", ")", ",", "rpy", "=", "\"0 0 0\"", ")", "\n", "", "", "if", "joints_type", "[", "i", "]", "==", "\"revolute\"", ":", "\n", "            ", "axis", "=", "SubElement", "(", "joints", "[", "i", "]", ",", "\"axis\"", ",", "xyz", "=", "\"1 0 0\"", ")", "\n", "limit", "=", "SubElement", "(", "joints", "[", "i", "]", ",", "\"limit\"", ",", "effort", "=", "\"1000.0\"", ",", "lower", "=", "\"-3.14\"", ",", "upper", "=", "\"3.14\"", ",", "velocity", "=", "\"0.5\"", ")", "\n", "# extend from list with different names", "\n", "", "", "root", ".", "extend", "(", "children", ")", "\n", "root", ".", "extend", "(", "joints", ")", "\n", "xml_string", "=", "xml", ".", "dom", ".", "minidom", ".", "parseString", "(", "tostring", "(", "root", ")", ")", "\n", "xml_pretty_str", "=", "xml_string", ".", "toprettyxml", "(", ")", "\n", "# print(xml_pretty_str)", "\n", "tree", "=", "ET", ".", "ElementTree", "(", "root", ")", "\n", "save_dir", "=", "'/Users/DragonX/Downloads/ARC/DATA/{:04d}'", ".", "format", "(", "save_ind", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "save_dir", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "save_dir", ")", "\n", "", "with", "open", "(", "save_dir", "+", "'/syn.urdf'", ",", "\"w\"", ")", "as", "f", ":", "\n", "        ", "f", ".", "write", "(", "xml_pretty_str", ")", "\n", "# Create a copy", "\n", "", "for", "i", "in", "range", "(", "num", ")", ":", "\n", "        ", "member_part", "=", "copy", ".", "deepcopy", "(", "root", ")", "\n", "# remove all visual nodes directly", "\n", "for", "link", "in", "member_part", ".", "findall", "(", "'link'", ")", ":", "\n", "            ", "if", "link", ".", "attrib", "[", "'name'", "]", "!=", "links_name", "[", "i", "]", ":", "\n", "                ", "for", "visual", "in", "link", ".", "findall", "(", "'visual'", ")", ":", "\n", "                    ", "link", ".", "remove", "(", "visual", ")", "\n", "\n", "", "", "", "xml_string", "=", "xml", ".", "dom", ".", "minidom", ".", "parseString", "(", "tostring", "(", "member_part", ")", ")", "\n", "xml_pretty_str", "=", "xml_string", ".", "toprettyxml", "(", ")", "\n", "tree", "=", "ET", ".", "ElementTree", "(", "member_part", ")", "\n", "with", "open", "(", "save_dir", "+", "'/syn_p{}.urdf'", ".", "format", "(", "i", ")", ",", "\"w\"", ")", "as", "f", ":", "\n", "            ", "f", ".", "write", "(", "xml_pretty_str", ")", "\n", "#>>>>>>>>>>> modify each components here to get multiple separate URDF files", "\n", "# we could keep all the joints, but every file should only keep one visual features", "\n", "# tree.write(open('./data/example.urdf', 'w'), encoding='unicode')", "\n", "# >>>>>>> only for debug use <<<<<<<<<< #", "\n", "", "", "print", "(", "\"links_h: \"", ",", "links_h", ")", "\n", "print", "(", "\"links_h_raw: \"", ",", "links_h_raw", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.tools.json2urdf.iterdict": [[24, 32], ["d.items", "print", "json2urdf.iterdict"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.tools.json2urdf.iterdict"], ["def", "iterdict", "(", "d", ")", ":", "\n", "    ", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "==", "'children'", ":", "\n", "            ", "if", "v", "is", "not", "None", ":", "\n", "                ", "for", "child", "in", "v", ":", "\n", "                    ", "iterdict", "(", "child", ")", "\n", "", "", "", "else", ":", "\n", "            ", "print", "(", "k", ",", "\":\"", ",", "v", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.tools.json2urdf.traverse_dict": [[33, 51], ["d.items", "json2urdf.traverse_dict"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.tools.json2urdf.traverse_dict"], ["", "", "", "def", "traverse_dict", "(", "d", ",", "link_dict", ",", "joint_dict", ")", ":", "\n", "    ", "\"\"\"\n    link_dict  = {} # name - attributes;\n    joint_list = [] # [{parent-child}, {}, {}]\n    link: name + all attrs;\n    joints: parent + child;\n    \"\"\"", "\n", "link", "=", "{", "}", "\n", "joint", "=", "{", "}", "\n", "for", "k", ",", "v", "in", "d", ".", "items", "(", ")", ":", "\n", "        ", "if", "k", "!=", "'children'", ":", "\n", "            ", "link", "[", "k", "]", "=", "v", "\n", "", "else", ":", "\n", "            ", "if", "v", "is", "not", "None", ":", "\n", "                ", "for", "child", "in", "v", ":", "\n", "                    ", "traverse_dict", "(", "child", ",", "link_dict", ",", "joint_dict", ")", "\n", "joint_dict", "[", "child", "[", "'dof_name'", "]", "]", "=", "d", "[", "'dof_name'", "]", "\n", "", "", "", "", "link_dict", "[", "d", "[", "'dof_name'", "]", "]", "=", "link", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.evaluation.parallel_ancsh_pose.ransac": [[20, 34], ["print", "range", "parallel_ancsh_pose.single_transformation_estimator", "parallel_ancsh_pose.single_transformation_verifier", "parallel_ancsh_pose.joint_transformation_estimator", "parallel_ancsh_pose.joint_transformation_verifier"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.evaluation.baseline_naocs.single_transformation_estimator", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.evaluation.baseline_naocs.single_transformation_verifier", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.evaluation.baseline_naocs.joint_transformation_estimator", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.evaluation.baseline_naocs.joint_transformation_verifier"], ["\n", "def", "hungarian_matching", "(", "W_pred", ",", "I", ")", ":", "\n", "# This non-tf function does not backprob gradient, only output matching indices", "\n", "# W_pred - BxNxK", "\n", "# I - BxN, may contain -1's", "\n", "# Output: matching_indices - BxK, where (b,k)th ground truth primitive is matched with (b, matching_indices[b, k])", "\n", "#   where only n_labels entries on each row have meaning. The matching does not include gt background part", "\n", "    ", "batch_size", "=", "I", ".", "shape", "[", "0", "]", "\n", "n_points", "=", "I", ".", "shape", "[", "1", "]", "\n", "n_max_labels", "=", "W_pred", ".", "shape", "[", "2", "]", "\n", "\n", "matching_indices", "=", "np", ".", "zeros", "(", "[", "batch_size", ",", "n_max_labels", "]", ",", "dtype", "=", "np", ".", "int32", ")", "\n", "for", "b", "in", "range", "(", "batch_size", ")", ":", "\n", "# assuming I[b] does not have gap", "\n", "        ", "n_labels", "=", "np", ".", "max", "(", "I", "[", "b", "]", ")", "+", "1", "# this is K'", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.evaluation.parallel_ancsh_pose.single_transformation_estimator": [[35, 47], ["lib.d3_utils.transform_pts", "dict", "numpy.random.randint"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.transform_pts"], ["# print('Type: ', type(n_points), type(n_max_labels))", "\n", "W", "=", "np", ".", "zeros", "(", "[", "n_points", ",", "n_labels", "+", "1", "]", ")", "# HACK: add an extra column to contain -1's", "\n", "W", "[", "np", ".", "arange", "(", "n_points", ")", ",", "I", "[", "b", "]", "]", "=", "1.0", "# NxK'", "\n", "\n", "dot", "=", "np", ".", "sum", "(", "np", ".", "expand_dims", "(", "W", ",", "axis", "=", "2", ")", "*", "np", ".", "expand_dims", "(", "W_pred", "[", "b", "]", ",", "axis", "=", "1", ")", ",", "axis", "=", "0", ")", "# K'xK", "\n", "denominator", "=", "np", ".", "expand_dims", "(", "np", ".", "sum", "(", "W", ",", "axis", "=", "0", ")", ",", "axis", "=", "1", ")", "+", "np", ".", "expand_dims", "(", "np", ".", "sum", "(", "W_pred", "[", "b", "]", ",", "axis", "=", "0", ")", ",", "axis", "=", "0", ")", "-", "dot", "\n", "cost", "=", "dot", "/", "np", ".", "maximum", "(", "denominator", ",", "DIVISION_EPS", ")", "# K'xK", "\n", "cost", "=", "cost", "[", ":", "n_labels", ",", ":", "]", "# remove last row, corresponding to matching gt background part", "\n", "\n", "_", ",", "col_ind", "=", "linear_sum_assignment", "(", "-", "cost", ")", "# want max solution", "\n", "# print('finishing linear_sum_assignment')", "\n", "matching_indices", "[", "b", ",", ":", "n_labels", "]", "=", "col_ind", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.evaluation.parallel_ancsh_pose.single_transformation_verifier": [[48, 55], ["numpy.sum", "model[].reshape", "numpy.sqrt", "numpy.sum", "numpy.matmul"], "function", ["None"], ["", "return", "matching_indices", "\n", "\n", "", "def", "rotate_pts", "(", "source", ",", "target", ")", ":", "\n", "# compute rotation between source: [N x 3], target: [N x 3]", "\n", "# pre-centering", "\n", "    ", "source", "=", "source", "-", "np", ".", "mean", "(", "source", ",", "0", ",", "keepdims", "=", "True", ")", "\n", "target", "=", "target", "-", "np", ".", "mean", "(", "target", ",", "0", ",", "keepdims", "=", "True", ")", "\n", "M", "=", "np", ".", "matmul", "(", "target", ".", "T", ",", "source", ")", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.evaluation.parallel_ancsh_pose.objective_eval": [[56, 69], ["params[].reshape", "params[].reshape", "numpy.concatenate().ravel", "lib.d3_utils.rotate_points_with_rotvec", "lib.d3_utils.rotate_points_with_rotvec", "lib.d3_utils.rotate_points_with_rotvec", "lib.d3_utils.rotate_points_with_rotvec", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rotate_points_with_rotvec", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rotate_points_with_rotvec", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rotate_points_with_rotvec", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rotate_points_with_rotvec"], ["U", ",", "D", ",", "Vh", "=", "np", ".", "linalg", ".", "svd", "(", "M", ",", "full_matrices", "=", "True", ")", "\n", "d", "=", "(", "np", ".", "linalg", ".", "det", "(", "U", ")", "*", "np", ".", "linalg", ".", "det", "(", "Vh", ")", ")", "<", "0.0", "\n", "if", "d", ":", "\n", "        ", "D", "[", "-", "1", "]", "=", "-", "D", "[", "-", "1", "]", "\n", "U", "[", ":", ",", "-", "1", "]", "=", "-", "U", "[", ":", ",", "-", "1", "]", "\n", "", "R", "=", "np", ".", "matmul", "(", "U", ",", "Vh", ")", "\n", "return", "R", "\n", "\n", "", "def", "scale_pts", "(", "source", ",", "target", ")", ":", "\n", "# compute scaling factor between source: [N x 3], target: [N x 3]", "\n", "    ", "pdist_s", "=", "source", ".", "reshape", "(", "source", ".", "shape", "[", "0", "]", ",", "1", ",", "3", ")", "-", "source", ".", "reshape", "(", "1", ",", "source", ".", "shape", "[", "0", "]", ",", "3", ")", "\n", "A", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "pdist_s", "**", "2", ",", "2", ")", ")", ".", "reshape", "(", "-", "1", ")", "\n", "pdist_t", "=", "target", ".", "reshape", "(", "target", ".", "shape", "[", "0", "]", ",", "1", ",", "3", ")", "-", "target", ".", "reshape", "(", "1", ",", "target", ".", "shape", "[", "0", "]", ",", "3", ")", "\n", "b", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "pdist_t", "**", "2", ",", "2", ")", ")", ".", "reshape", "(", "-", "1", ")", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.evaluation.parallel_ancsh_pose.objective_eval_r": [[70, 82], ["params[].reshape", "params[].reshape", "numpy.concatenate().ravel", "lib.d3_utils.rotate_points_with_rotvec", "lib.d3_utils.rotate_points_with_rotvec", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rotate_points_with_rotvec", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rotate_points_with_rotvec"], ["scale", "=", "np", ".", "dot", "(", "A", ",", "b", ")", "/", "(", "np", ".", "dot", "(", "A", ",", "A", ")", "+", "1e-6", ")", "\n", "return", "scale", "\n", "\n", "", "def", "transform_pts", "(", "source", ",", "target", ")", ":", "\n", "# source: [N x 3], target: [N x 3]", "\n", "# pre-centering and compute rotation", "\n", "    ", "source_centered", "=", "source", "-", "np", ".", "mean", "(", "source", ",", "0", ",", "keepdims", "=", "True", ")", "\n", "target_centered", "=", "target", "-", "np", ".", "mean", "(", "target", ",", "0", ",", "keepdims", "=", "True", ")", "\n", "rotation", "=", "rotate_pts", "(", "source_centered", ",", "target_centered", ")", "\n", "\n", "# compute scale", "\n", "#     A = np.matmul(rotation, source_centered.T).reshape(-1)", "\n", "#     b = target_centered.T.reshape(-1)", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.evaluation.parallel_ancsh_pose.objective_eval_t": [[83, 105], ["params[].reshape", "params[].reshape", "numpy.array", "numpy.matmul().reshape", "numpy.concatenate().ravel", "numpy.matmul", "numpy.ones", "numpy.matmul", "numpy.concatenate", "numpy.matmul", "numpy.matmul", "numpy.min"], "function", ["None"], ["#     scale = np.dot(A, b) / (np.dot(A, A)+1e-6)", "\n", "scale", "=", "scale_pts", "(", "source_centered", ",", "target_centered", ")", "\n", "\n", "# compute translation", "\n", "translation", "=", "np", ".", "mean", "(", "target", ".", "T", "-", "scale", "*", "np", ".", "matmul", "(", "rotation", ",", "source", ".", "T", ")", ",", "1", ")", "\n", "return", "rotation", ",", "scale", ",", "translation", "\n", "\n", "", "def", "rot_diff_rad", "(", "rot1", ",", "rot2", ")", ":", "\n", "    ", "return", "np", ".", "arccos", "(", "(", "np", ".", "trace", "(", "np", ".", "matmul", "(", "rot1", ",", "rot2", ".", "T", ")", ")", "-", "1", ")", "/", "2", ")", "%", "(", "2", "*", "np", ".", "pi", ")", "\n", "\n", "", "def", "rot_diff_degree", "(", "rot1", ",", "rot2", ")", ":", "\n", "    ", "return", "rot_diff_rad", "(", "rot1", ",", "rot2", ")", "/", "np", ".", "pi", "*", "180", "\n", "\n", "", "def", "ransac", "(", "dataset", ",", "model_estimator", ",", "model_verifier", ",", "inlier_th", ",", "niter", "=", "10000", ")", ":", "\n", "    ", "best_model", "=", "None", "\n", "best_score", "=", "-", "np", ".", "inf", "\n", "best_inliers", "=", "None", "\n", "for", "i", "in", "range", "(", "niter", ")", ":", "\n", "        ", "cur_model", "=", "model_estimator", "(", "dataset", ")", "\n", "cur_score", ",", "cur_inliers", "=", "model_verifier", "(", "dataset", ",", "cur_model", ",", "inlier_th", ")", "\n", "if", "cur_score", ">", "best_score", ":", "\n", "            ", "best_model", "=", "cur_model", "\n", "best_inliers", "=", "cur_inliers", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.evaluation.parallel_ancsh_pose.joint_transformation_estimator": [[106, 185], ["lib.d3_utils.scale_pts", "lib.d3_utils.scale_pts", "lib.d3_utils.scale_pts", "lib.d3_utils.scale_pts", "numpy.mean", "numpy.mean", "dataset[].reshape", "lib.d3_utils.rotate_pts", "lib.d3_utils.rotate_pts", "numpy.mean", "numpy.mean", "dict", "numpy.random.randint", "numpy.random.randint", "numpy.mean", "numpy.mean", "numpy.ones_like", "dataset[].reshape", "numpy.ones_like", "dataset[].reshape", "scipy.spatial.transform.Rotation.from_dcm().as_rotvec", "scipy.spatial.transform.Rotation.from_dcm().as_rotvec", "scipy.spatial.transform.Rotation.from_rotvec().as_dcm", "scipy.spatial.transform.Rotation.from_rotvec().as_dcm", "range", "[].reshape", "[].reshape", "scipy.optimize.least_squares", "numpy.concatenate", "numpy.concatenate", "lib.d3_utils.rotate_pts", "lib.d3_utils.rot_diff_degree", "numpy.concatenate", "numpy.concatenate", "lib.d3_utils.rotate_pts", "lib.d3_utils.rot_diff_degree", "scipy.spatial.transform.Rotation.from_dcm", "scipy.spatial.transform.Rotation.from_dcm", "numpy.hstack", "scipy.optimize.least_squares", "scipy.spatial.transform.Rotation.from_rotvec", "scipy.spatial.transform.Rotation.from_rotvec", "numpy.matmul", "numpy.matmul", "numpy.hstack", "numpy.matmul", "numpy.matmul", "numpy.linspace", "numpy.linspace", "numpy.min", "numpy.min"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.scale_pts", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.scale_pts", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.scale_pts", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.scale_pts", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rotate_pts", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rotate_pts", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rotate_pts", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rot_diff_degree", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rotate_pts", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rot_diff_degree"], ["", "", "best_model", "=", "model_estimator", "(", "dataset", ",", "best_inliers", ")", "\n", "return", "best_model", ",", "best_inliers", "\n", "\n", "", "def", "single_transformation_estimator", "(", "dataset", ",", "best_inliers", "=", "None", ")", ":", "\n", "# dataset: dict, fields include source, target, nsource", "\n", "    ", "if", "best_inliers", "is", "None", ":", "\n", "        ", "sample_idx", "=", "np", ".", "random", ".", "randint", "(", "dataset", "[", "'nsource'", "]", ",", "size", "=", "3", ")", "\n", "", "else", ":", "\n", "        ", "sample_idx", "=", "best_inliers", "\n", "", "rotation", ",", "scale", ",", "translation", "=", "transform_pts", "(", "dataset", "[", "'source'", "]", "[", "sample_idx", ",", ":", "]", ",", "dataset", "[", "'target'", "]", "[", "sample_idx", ",", ":", "]", ")", "\n", "strans", "=", "dict", "(", ")", "\n", "strans", "[", "'rotation'", "]", "=", "rotation", "\n", "strans", "[", "'scale'", "]", "=", "scale", "\n", "strans", "[", "'translation'", "]", "=", "translation", "\n", "return", "strans", "\n", "\n", "", "def", "single_transformation_verifier", "(", "dataset", ",", "model", ",", "inlier_th", ")", ":", "\n", "# dataset: dict, fields include source, target, nsource, ntarget", "\n", "# model: dict, fields include rotation, scale, translation", "\n", "    ", "res", "=", "dataset", "[", "'target'", "]", ".", "T", "-", "model", "[", "'scale'", "]", "*", "np", ".", "matmul", "(", "model", "[", "'rotation'", "]", ",", "dataset", "[", "'source'", "]", ".", "T", ")", "-", "model", "[", "'translation'", "]", ".", "reshape", "(", "(", "3", ",", "1", ")", ")", "\n", "inliers", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "res", "**", "2", ",", "0", ")", ")", "<", "inlier_th", "\n", "score", "=", "np", ".", "sum", "(", "inliers", ")", "\n", "return", "score", ",", "inliers", "\n", "\n", "", "def", "rotate_points_with_rotvec", "(", "points", ",", "rot_vecs", ")", ":", "\n", "    ", "\"\"\"Rotate points by given rotation vectors.\n\n    Rodrigues' rotation formula is used.\n    \"\"\"", "\n", "theta", "=", "np", ".", "linalg", ".", "norm", "(", "rot_vecs", ",", "axis", "=", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "with", "np", ".", "errstate", "(", "invalid", "=", "'ignore'", ")", ":", "\n", "        ", "v", "=", "rot_vecs", "/", "theta", "\n", "v", "=", "np", ".", "nan_to_num", "(", "v", ")", "\n", "", "dot", "=", "np", ".", "sum", "(", "points", "*", "v", ",", "axis", "=", "1", ")", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "cos_theta", "=", "np", ".", "cos", "(", "theta", ")", "\n", "sin_theta", "=", "np", ".", "sin", "(", "theta", ")", "\n", "\n", "return", "cos_theta", "*", "points", "+", "sin_theta", "*", "np", ".", "cross", "(", "v", ",", "points", ")", "+", "dot", "*", "(", "1", "-", "cos_theta", ")", "*", "v", "\n", "\n", "", "def", "objective_eval", "(", "params", ",", "x0", ",", "y0", ",", "x1", ",", "y1", ",", "joints", ",", "isweight", "=", "True", ")", ":", "\n", "# params: [:3] R0, [3:] R1", "\n", "# x0: N x 3, y0: N x 3, x1: M x 3, y1: M x 3, R0: 1 x 3, R1: 1 x 3, joints: K x 3", "\n", "    ", "rotvec0", "=", "params", "[", ":", "3", "]", ".", "reshape", "(", "(", "1", ",", "3", ")", ")", "\n", "rotvec1", "=", "params", "[", "3", ":", "]", ".", "reshape", "(", "(", "1", ",", "3", ")", ")", "\n", "res0", "=", "y0", "-", "rotate_points_with_rotvec", "(", "x0", ",", "rotvec0", ")", "\n", "res1", "=", "y1", "-", "rotate_points_with_rotvec", "(", "x1", ",", "rotvec1", ")", "\n", "res_joint", "=", "rotate_points_with_rotvec", "(", "joints", ",", "rotvec0", ")", "-", "rotate_points_with_rotvec", "(", "joints", ",", "rotvec1", ")", "\n", "if", "isweight", ":", "\n", "        ", "res0", "/=", "x0", ".", "shape", "[", "0", "]", "\n", "res1", "/=", "x1", ".", "shape", "[", "0", "]", "\n", "res_joint", "/=", "joints", ".", "shape", "[", "0", "]", "\n", "", "return", "np", ".", "concatenate", "(", "(", "res0", ",", "res1", ",", "res_joint", ")", ",", "0", ")", ".", "ravel", "(", ")", "\n", "\n", "", "def", "objective_eval_r", "(", "params", ",", "x0", ",", "y0", ",", "x1", ",", "y1", ",", "joints", ",", "isweight", "=", "True", ",", "joint_type", "=", "'prismatic'", ")", ":", "\n", "# params: [:3] R0, [3:] R1", "\n", "# x0: N x 3, y0: N x 3, x1: M x 3, y1: M x 3, R0: 1 x 3, R1: 1 x 3, joints: K x 3", "\n", "    ", "rotvec0", "=", "params", "[", ":", "3", "]", ".", "reshape", "(", "(", "1", ",", "3", ")", ")", "\n", "rotvec1", "=", "params", "[", "3", ":", "]", ".", "reshape", "(", "(", "1", ",", "3", ")", ")", "\n", "res0", "=", "y0", "-", "rotate_points_with_rotvec", "(", "x0", ",", "rotvec0", ")", "\n", "res1", "=", "y1", "-", "rotate_points_with_rotvec", "(", "x1", ",", "rotvec1", ")", "\n", "res_R", "=", "rotvec0", "-", "rotvec1", "\n", "if", "isweight", ":", "\n", "        ", "res0", "/=", "x0", ".", "shape", "[", "0", "]", "\n", "res1", "/=", "x1", ".", "shape", "[", "0", "]", "\n", "", "return", "np", ".", "concatenate", "(", "(", "res0", ",", "res1", ",", "res_R", ")", ",", "0", ")", ".", "ravel", "(", ")", "\n", "\n", "", "def", "objective_eval_t", "(", "params", ",", "x0", ",", "y0", ",", "x1", ",", "y1", ",", "joints", ",", "R0", ",", "R1", ",", "scale0", ",", "scale1", ",", "isweight", "=", "True", ")", ":", "\n", "# params: [0:3] t0, [3:6] t1;", "\n", "# joints: K * 3", "\n", "# rotvec0, rotvec1, scale0, scale1 solved from previous steps", "\n", "    ", "R", "=", "R0", "\n", "transvec0", "=", "params", "[", "0", ":", "3", "]", ".", "reshape", "(", "(", "1", ",", "3", ")", ")", "\n", "transvec1", "=", "params", "[", "3", ":", "6", "]", ".", "reshape", "(", "(", "1", ",", "3", ")", ")", "\n", "res0", "=", "y0", "-", "scale0", "*", "np", ".", "matmul", "(", "x0", ",", "R0", ".", "T", ")", "-", "transvec0", "\n", "res1", "=", "y1", "-", "scale1", "*", "np", ".", "matmul", "(", "x1", ",", "R1", ".", "T", ")", "-", "transvec1", "\n", "rot_u", "=", "np", ".", "matmul", "(", "joints", ",", "R", ".", "T", ")", "[", "0", "]", "\n", "delta_trans", "=", "transvec0", "-", "transvec1", "\n", "cross_mat", "=", "np", ".", "array", "(", "[", "[", "0", ",", "-", "rot_u", "[", "2", "]", ",", "rot_u", "[", "1", "]", "]", ",", "\n", "[", "rot_u", "[", "2", "]", ",", "0", ",", "-", "rot_u", "[", "0", "]", "]", ",", "\n", "[", "-", "rot_u", "[", "1", "]", ",", "rot_u", "[", "0", "]", ",", "0", "]", "]", ")", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.evaluation.parallel_ancsh_pose.joint_transformation_verifier": [[186, 195], ["model[].reshape", "numpy.sqrt", "model[].reshape", "numpy.sqrt", "numpy.sum", "numpy.sum", "numpy.matmul", "numpy.matmul", "numpy.sum", "numpy.sum"], "function", ["None"], ["res2", "=", "np", ".", "matmul", "(", "delta_trans", ",", "cross_mat", ".", "T", ")", ".", "reshape", "(", "1", ",", "3", ")", "\n", "# np.linspace(0, 1, num = np.min((x0.shape[0], x1.shape[0]))+1 )[1:].reshape((-1, 1))", "\n", "res2", "=", "np", ".", "ones", "(", "(", "np", ".", "min", "(", "(", "x0", ".", "shape", "[", "0", "]", ",", "x1", ".", "shape", "[", "0", "]", ")", ")", ",", "1", ")", ")", "*", "res2", "\n", "if", "isweight", ":", "\n", "        ", "res0", "/=", "x0", ".", "shape", "[", "0", "]", "\n", "res1", "/=", "x1", ".", "shape", "[", "0", "]", "\n", "res2", "/=", "res2", ".", "shape", "[", "0", "]", "\n", "", "return", "np", ".", "concatenate", "(", "(", "res0", ",", "res1", ",", "res2", ")", ",", "0", ")", ".", "ravel", "(", ")", "\n", "\n", "", "def", "joint_transformation_estimator", "(", "dataset", ",", "best_inliers", "=", "None", ",", "joint_type", "=", "'revolute'", ")", ":", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.evaluation.parallel_ancsh_pose.solver_ransac_nonlinear": [[196, 371], ["print", "time.time", "range", "range", "time.time", "print", "print", "h5py.File", "h5py.File", "print", "numpy.argmax", "range", "range", "range", "range", "open", "pickle.dump", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "print", "print", "print", "test_group[].split", "print", "partidx.append", "joint_idx_list_gt.append", "dict", "parallel_ancsh_pose.ransac", "lib.d3_utils.rot_diff_degree", "numpy.linalg.norm", "numpy.linalg.norm", "print", "rpy_err[].append", "xyz_err[].append", "scale_err[].append", "[].append", "[].append", "[].append", "scale_dict[].append", "r_dict[].append", "t_dict[].append", "numpy.median", "dict", "parallel_ancsh_pose.ransac", "lib.d3_utils.rot_diff_degree", "numpy.linalg.norm", "numpy.linalg.norm", "lib.d3_utils.rot_diff_degree", "numpy.linalg.norm", "numpy.linalg.norm", "print", "rpy_err[].append", "xyz_err[].append", "scale_err[].append", "[].append", "[].append", "[].append", "scale_dict[].append", "scale_dict[].append", "r_dict[].append", "r_dict[].append", "t_dict[].append", "t_dict[].append", "len", "test_group[].split", "numpy.where", "best_model[].reshape", "print", "rpy_err[].append", "xyz_err[].append", "scale_err[].append", "[].append", "[].append", "[].append", "scale_dict[].append", "scale_dict[].append", "r_dict[].append", "r_dict[].append", "t_dict[].append", "t_dict[].append", "numpy.where", "numpy.where", "np.array.mean", "np.array.mean", "np.array.mean", "np.array.mean", "numpy.where", "numpy.matmul", "numpy.isnan", "numpy.isnan", "numpy.sum", "numpy.sum", "numpy.sum"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.evaluation.baseline_naocs.ransac", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rot_diff_degree", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.evaluation.baseline_naocs.ransac", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rot_diff_degree", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rot_diff_degree"], ["# dataset: dict, fields include source0, target0, nsource0,", "\n", "#     source1, target1, nsource1, joint_direction", "\n", "    ", "if", "best_inliers", "is", "None", ":", "\n", "        ", "sample_idx0", "=", "np", ".", "random", ".", "randint", "(", "dataset", "[", "'nsource0'", "]", ",", "size", "=", "3", ")", "\n", "sample_idx1", "=", "np", ".", "random", ".", "randint", "(", "dataset", "[", "'nsource1'", "]", ",", "size", "=", "3", ")", "\n", "", "else", ":", "\n", "        ", "sample_idx0", "=", "best_inliers", "[", "0", "]", "\n", "sample_idx1", "=", "best_inliers", "[", "1", "]", "\n", "\n", "", "source0", "=", "dataset", "[", "'source0'", "]", "[", "sample_idx0", ",", ":", "]", "\n", "target0", "=", "dataset", "[", "'target0'", "]", "[", "sample_idx0", ",", ":", "]", "\n", "source1", "=", "dataset", "[", "'source1'", "]", "[", "sample_idx1", ",", ":", "]", "\n", "target1", "=", "dataset", "[", "'target1'", "]", "[", "sample_idx1", ",", ":", "]", "\n", "# prescaling and centering", "\n", "scale0", "=", "scale_pts", "(", "source0", ",", "target0", ")", "\n", "scale1", "=", "scale_pts", "(", "source1", ",", "target1", ")", "\n", "scale0_inv", "=", "scale_pts", "(", "target0", ",", "source0", ")", "# check if could simply take reciprocal", "\n", "scale1_inv", "=", "scale_pts", "(", "target1", ",", "source1", ")", "\n", "\n", "target0_scaled_centered", "=", "scale0_inv", "*", "target0", "\n", "target0_scaled_centered", "-=", "np", ".", "mean", "(", "target0_scaled_centered", ",", "0", ",", "keepdims", "=", "True", ")", "\n", "source0_centered", "=", "source0", "-", "np", ".", "mean", "(", "source0", ",", "0", ",", "keepdims", "=", "True", ")", "\n", "\n", "target1_scaled_centered", "=", "scale1_inv", "*", "target1", "\n", "target1_scaled_centered", "-=", "np", ".", "mean", "(", "target1_scaled_centered", ",", "0", ",", "keepdims", "=", "True", ")", "\n", "source1_centered", "=", "source1", "-", "np", ".", "mean", "(", "source1", ",", "0", ",", "keepdims", "=", "True", ")", "\n", "\n", "# joint optimization", "\n", "#     joint_points0 = np.linspace(0, 1, num = np.min((source0.shape[0], source1.shape[0]))+1 )[1:].reshape((-1, 1))*dataset['joint_direction'].reshape((1, 3))", "\n", "#     joint_points1 = np.linspace(0, 1, num = np.min((source0.shape[0], source1.shape[0]))+1 )[1:].reshape((-1, 1))*dataset['joint_direction'].reshape((1, 3))", "\n", "joint_points0", "=", "np", ".", "ones_like", "(", "np", ".", "linspace", "(", "0", ",", "1", ",", "num", "=", "np", ".", "min", "(", "(", "source0", ".", "shape", "[", "0", "]", ",", "source1", ".", "shape", "[", "0", "]", ")", ")", "+", "1", ")", "[", "1", ":", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", ")", "*", "dataset", "[", "'joint_direction'", "]", ".", "reshape", "(", "(", "1", ",", "3", ")", ")", "\n", "joint_points1", "=", "np", ".", "ones_like", "(", "np", ".", "linspace", "(", "0", ",", "1", ",", "num", "=", "np", ".", "min", "(", "(", "source0", ".", "shape", "[", "0", "]", ",", "source1", ".", "shape", "[", "0", "]", ")", ")", "+", "1", ")", "[", "1", ":", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", ")", "*", "dataset", "[", "'joint_direction'", "]", ".", "reshape", "(", "(", "1", ",", "3", ")", ")", "\n", "joint_axis", "=", "dataset", "[", "'joint_direction'", "]", ".", "reshape", "(", "(", "1", ",", "3", ")", ")", "\n", "#     joint_points0 = np.linspace(0, 1, num = source1.shape[0]+1 )[1:].reshape((-1, 1))*dataset['joint_direction'].reshape((1, 3))", "\n", "#     joint_points1 = np.linspace(0, 1, num = source0.shape[0]+1 )[1:].reshape((-1, 1))*dataset['joint_direction'].reshape((1, 3))", "\n", "R0", "=", "rotate_pts", "(", "source0_centered", ",", "target0_scaled_centered", ")", "\n", "R1", "=", "rotate_pts", "(", "source1_centered", ",", "target1_scaled_centered", ")", "\n", "rdiff0", "=", "np", ".", "inf", "\n", "rdiff1", "=", "np", ".", "inf", "\n", "niter", "=", "100", "\n", "degree_th", "=", "0.1", "\n", "isalternate", "=", "False", "\n", "isdirect", "=", "False", "\n", "if", "not", "isalternate", ":", "\n", "        ", "rotvec0", "=", "srot", ".", "from_dcm", "(", "R0", ")", ".", "as_rotvec", "(", ")", "\n", "rotvec1", "=", "srot", ".", "from_dcm", "(", "R1", ")", ".", "as_rotvec", "(", ")", "\n", "# print('initialize rotvec0 vs rotvec1: \\n', rotvec0, rotvec1)", "\n", "if", "joint_type", "==", "'prismatic'", ":", "\n", "            ", "res", "=", "least_squares", "(", "objective_eval_r", ",", "np", ".", "hstack", "(", "(", "rotvec0", ",", "rotvec1", ")", ")", ",", "verbose", "=", "0", ",", "ftol", "=", "1e-4", ",", "method", "=", "'lm'", ",", "\n", "args", "=", "(", "source0_centered", ",", "target0_scaled_centered", ",", "source1_centered", ",", "target1_scaled_centered", ",", "joint_points0", ",", "False", ")", ")", "\n", "", "elif", "joint_type", "==", "'revolute'", ":", "\n", "            ", "res", "=", "least_squares", "(", "objective_eval", ",", "np", ".", "hstack", "(", "(", "rotvec0", ",", "rotvec1", ")", ")", ",", "verbose", "=", "0", ",", "ftol", "=", "1e-4", ",", "method", "=", "'lm'", ",", "\n", "args", "=", "(", "source0_centered", ",", "target0_scaled_centered", ",", "source1_centered", ",", "target1_scaled_centered", ",", "joint_points0", ",", "False", ")", ")", "\n", "", "R0", "=", "srot", ".", "from_rotvec", "(", "res", ".", "x", "[", ":", "3", "]", ")", ".", "as_dcm", "(", ")", "\n", "R1", "=", "srot", ".", "from_rotvec", "(", "res", ".", "x", "[", "3", ":", "]", ")", ".", "as_dcm", "(", ")", "\n", "", "else", ":", "\n", "        ", "for", "i", "in", "range", "(", "niter", ")", ":", "\n", "            ", "if", "rdiff0", "<=", "degree_th", "and", "rdiff1", "<=", "degree_th", ":", "\n", "                ", "break", "\n", "", "newsrc0", "=", "np", ".", "concatenate", "(", "(", "source0_centered", ",", "joint_points0", ")", ",", "0", ")", "\n", "newtgt0", "=", "np", ".", "concatenate", "(", "(", "target0_scaled_centered", ",", "np", ".", "matmul", "(", "joint_points0", ",", "R1", ".", "T", ")", ")", ",", "0", ")", "\n", "newR0", "=", "rotate_pts", "(", "newsrc0", ",", "newtgt0", ")", "\n", "rdiff0", "=", "rot_diff_degree", "(", "R0", ",", "newR0", ")", "\n", "R0", "=", "newR0", "\n", "\n", "newsrc1", "=", "np", ".", "concatenate", "(", "(", "source1_centered", ",", "joint_points1", ")", ",", "0", ")", "\n", "newtgt1", "=", "np", ".", "concatenate", "(", "(", "target1_scaled_centered", ",", "np", ".", "matmul", "(", "joint_points1", ",", "R0", ".", "T", ")", ")", ",", "0", ")", "\n", "newR1", "=", "rotate_pts", "(", "newsrc1", ",", "newtgt1", ")", "\n", "rdiff1", "=", "rot_diff_degree", "(", "R1", ",", "newR1", ")", "\n", "R1", "=", "newR1", "\n", "\n", "", "", "translation0", "=", "np", ".", "mean", "(", "target0", ".", "T", "-", "scale0", "*", "np", ".", "matmul", "(", "R0", ",", "source0", ".", "T", ")", ",", "1", ")", "\n", "translation1", "=", "np", ".", "mean", "(", "target1", ".", "T", "-", "scale1", "*", "np", ".", "matmul", "(", "R1", ",", "source1", ".", "T", ")", ",", "1", ")", "\n", "\n", "# if joint_type == 'prismatic': # todo best_inliers is not None and", "\n", "#     res = least_squares(objective_eval_t, np.hstack((translation0, translation1)), verbose=0, ftol=1e-4, method='lm',", "\n", "#                 args=(source0, target0, source1, target1, joint_axis, R0, R1, scale0, scale1, False))", "\n", "#     translation0 = res.x[:3]", "\n", "#     translation1 = res.x[3:]", "\n", "\n", "jtrans", "=", "dict", "(", ")", "\n", "jtrans", "[", "'rotation0'", "]", "=", "R0", "\n", "jtrans", "[", "'scale0'", "]", "=", "scale0", "\n", "jtrans", "[", "'translation0'", "]", "=", "translation0", "\n", "jtrans", "[", "'rotation1'", "]", "=", "R1", "\n", "jtrans", "[", "'scale1'", "]", "=", "scale1", "\n", "jtrans", "[", "'translation1'", "]", "=", "translation1", "\n", "return", "jtrans", "\n", "\n", "", "def", "joint_transformation_verifier", "(", "dataset", ",", "model", ",", "inlier_th", ")", ":", "\n", "# dataset: dict, fields include source, target, nsource, ntarget", "\n", "# model: dict, fields include rotation, scale, translation", "\n", "    ", "res0", "=", "dataset", "[", "'target0'", "]", ".", "T", "-", "model", "[", "'scale0'", "]", "*", "np", ".", "matmul", "(", "model", "[", "'rotation0'", "]", ",", "dataset", "[", "'source0'", "]", ".", "T", ")", "-", "model", "[", "'translation0'", "]", ".", "reshape", "(", "(", "3", ",", "1", ")", ")", "\n", "inliers0", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "res0", "**", "2", ",", "0", ")", ")", "<", "inlier_th", "\n", "res1", "=", "dataset", "[", "'target1'", "]", ".", "T", "-", "model", "[", "'scale1'", "]", "*", "np", ".", "matmul", "(", "model", "[", "'rotation1'", "]", ",", "dataset", "[", "'source1'", "]", ".", "T", ")", "-", "model", "[", "'translation1'", "]", ".", "reshape", "(", "(", "3", ",", "1", ")", ")", "\n", "inliers1", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "res1", "**", "2", ",", "0", ")", ")", "<", "inlier_th", "\n", "score", "=", "(", "np", ".", "sum", "(", "inliers0", ")", "/", "res0", ".", "shape", "[", "0", "]", "+", "np", ".", "sum", "(", "inliers1", ")", "/", "res1", ".", "shape", "[", "0", "]", ")", "/", "2", "\n", "return", "score", ",", "[", "inliers0", ",", "inliers1", "]", "\n", "\n", "", "def", "solver_ransac_nonlinear", "(", "s_ind", ",", "e_ind", ",", "test_exp", ",", "baseline_exp", ",", "choose_threshold", ",", "num_parts", ",", "test_group", ",", "problem_ins", ",", "rts_all", ",", "file_name", ")", ":", "\n", "    ", "all_rts", "=", "{", "}", "\n", "mean_err", "=", "{", "'baseline'", ":", "[", "]", ",", "'nonlinear'", ":", "[", "]", "}", "\n", "if", "num_parts", "==", "2", ":", "\n", "        ", "r_raw_err", "=", "{", "'baseline'", ":", "[", "[", "]", ",", "[", "]", "]", ",", "'nonlinear'", ":", "[", "[", "]", ",", "[", "]", "]", "}", "\n", "t_raw_err", "=", "{", "'baseline'", ":", "[", "[", "]", ",", "[", "]", "]", ",", "'nonlinear'", ":", "[", "[", "]", ",", "[", "]", "]", "}", "\n", "s_raw_err", "=", "{", "'baseline'", ":", "[", "[", "]", ",", "[", "]", "]", ",", "'nonlinear'", ":", "[", "[", "]", ",", "[", "]", "]", "}", "\n", "", "elif", "num_parts", "==", "3", ":", "\n", "        ", "r_raw_err", "=", "{", "'baseline'", ":", "[", "[", "]", ",", "[", "]", ",", "[", "]", "]", ",", "'nonlinear'", ":", "[", "[", "]", ",", "[", "]", ",", "[", "]", "]", "}", "\n", "t_raw_err", "=", "{", "'baseline'", ":", "[", "[", "]", ",", "[", "]", ",", "[", "]", "]", ",", "'nonlinear'", ":", "[", "[", "]", ",", "[", "]", ",", "[", "]", "]", "}", "\n", "s_raw_err", "=", "{", "'baseline'", ":", "[", "[", "]", ",", "[", "]", ",", "[", "]", "]", ",", "'nonlinear'", ":", "[", "[", "]", ",", "[", "]", ",", "[", "]", "]", "}", "\n", "", "elif", "num_parts", "==", "4", ":", "\n", "        ", "r_raw_err", "=", "{", "'baseline'", ":", "[", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "]", ",", "'nonlinear'", ":", "[", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "]", "}", "\n", "t_raw_err", "=", "{", "'baseline'", ":", "[", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "]", ",", "'nonlinear'", ":", "[", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "]", "}", "\n", "s_raw_err", "=", "{", "'baseline'", ":", "[", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "]", ",", "'nonlinear'", ":", "[", "[", "]", ",", "[", "]", ",", "[", "]", ",", "[", "]", "]", "}", "\n", "\n", "", "for", "i", "in", "range", "(", "s_ind", ",", "e_ind", ")", ":", "\n", "# try:", "\n", "        ", "print", "(", "'\\n Checking {}th data point: {}'", ".", "format", "(", "i", ",", "test_group", "[", "i", "]", ")", ")", "\n", "if", "test_group", "[", "i", "]", ".", "split", "(", "'_'", ")", "[", "0", "]", "in", "problem_ins", ":", "\n", "            ", "continue", "\n", "", "basename", "=", "test_group", "[", "i", "]", ".", "split", "(", "'.'", ")", "[", "0", "]", "\n", "rts_dict", "=", "rts_all", "[", "basename", "]", "\n", "scale_gt", "=", "rts_dict", "[", "'scale'", "]", "[", "'gt'", "]", "# list of 2, for part 0 and part 1", "\n", "rt_gt", "=", "rts_dict", "[", "'rt'", "]", "[", "'gt'", "]", "# list of 2, each is 4*4 Hom transformation mat, [:3, :3] is rotation", "\n", "nocs_err_pn", "=", "rts_dict", "[", "'nocs_err'", "]", "\n", "\n", "fb", "=", "h5py", ".", "File", "(", "global_info", ".", "base_path", "+", "'/results/test_pred/{}/{}.h5'", ".", "format", "(", "baseline_exp", ",", "basename", ")", ",", "'r'", ")", "\n", "# for name in list(f.keys()):", "\n", "#     print(name, f[name].shape)", "\n", "\n", "print", "(", "'using baseline part NOCS'", ")", "\n", "nocs_pred", "=", "fb", "[", "'nocs_per_point'", "]", "\n", "nocs_gt", "=", "fb", "[", "'nocs_gt'", "]", "\n", "mask_pred", "=", "fb", "[", "'instance_per_point'", "]", "[", "(", ")", "]", "\n", "mask_gt", "=", "fb", "[", "'cls_gt'", "]", "[", "(", ")", "]", "\n", "# matching_indices = hungarian_matching(mask_pred[np.newaxis, : ,:], mask_gt[np.newaxis, :].astype(np.int32))", "\n", "# mask_pred = mask_pred[:, matching_indices[0, :]]", "\n", "cls_per_pt_pred", "=", "np", ".", "argmax", "(", "mask_pred", ",", "axis", "=", "1", ")", "\n", "partidx", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_parts", ")", ":", "\n", "            ", "partidx", ".", "append", "(", "np", ".", "where", "(", "cls_per_pt_pred", "==", "j", ")", "[", "0", "]", ")", "\n", "\n", "", "f", "=", "h5py", ".", "File", "(", "global_info", ".", "base_path", "+", "'/results/test_pred/{}/{}.h5'", ".", "format", "(", "test_exp", ",", "basename", ")", ",", "'r'", ")", "\n", "joint_cls_pred", "=", "f", "[", "'index_per_point'", "]", "[", "(", ")", "]", "\n", "joint_cls_pred", "=", "np", ".", "argmax", "(", "joint_cls_pred", ",", "axis", "=", "1", ")", "\n", "joint_idx", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "1", ",", "num_parts", ")", ":", "\n", "            ", "joint_idx", ".", "append", "(", "np", ".", "where", "(", "joint_cls_pred", "==", "j", ")", "[", "0", "]", ")", "\n", "\n", "", "mask_pred", "=", "f", "[", "'instance_per_point'", "]", "[", "(", ")", "]", "\n", "cls_per_pt_pred_ours", "=", "np", ".", "argmax", "(", "mask_pred", ",", "axis", "=", "1", ")", "\n", "partidx_ours", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "num_parts", ")", ":", "\n", "            ", "partidx_ours", ".", "append", "(", "np", ".", "where", "(", "cls_per_pt_pred_ours", "==", "j", ")", "[", "0", "]", ")", "\n", "\n", "", "scale_dict", "=", "{", "'gt'", ":", "[", "]", ",", "'baseline'", ":", "[", "]", ",", "'nonlinear'", ":", "[", "]", "}", "\n", "r_dict", "=", "{", "'gt'", ":", "[", "]", ",", "'baseline'", ":", "[", "]", ",", "'nonlinear'", ":", "[", "]", "}", "\n", "t_dict", "=", "{", "'gt'", ":", "[", "]", ",", "'baseline'", ":", "[", "]", ",", "'nonlinear'", ":", "[", "]", "}", "\n", "xyz_err", "=", "{", "'baseline'", ":", "[", "]", ",", "'nonlinear'", ":", "[", "]", "}", "\n", "rpy_err", "=", "{", "'baseline'", ":", "[", "]", ",", "'nonlinear'", ":", "[", "]", "}", "\n", "scale_err", "=", "{", "'baseline'", ":", "[", "]", ",", "'nonlinear'", ":", "[", "]", "}", "\n", "jts_axis", "=", "[", "]", "\n", "for", "j", "in", "range", "(", "1", ",", "num_parts", ")", ":", "\n", "            ", "niter", "=", "200", "\n", "inlier_th", "=", "choose_threshold", "\n", "source0", "=", "nocs_pred", "[", "partidx", "[", "0", "]", ",", ":", "3", "]", "\n", "target0", "=", "fb", "[", "'P'", "]", "[", "partidx", "[", "0", "]", ",", ":", "3", "]", "\n", "source1", "=", "nocs_pred", "[", "partidx", "[", "j", "]", ",", "3", "*", "j", ":", "3", "*", "(", "j", "+", "1", ")", "]", "\n", "target1", "=", "fb", "[", "'P'", "]", "[", "partidx", "[", "j", "]", ",", ":", "3", "]", "\n", "\n", "jt_axis", "=", "np", ".", "median", "(", "f", "[", "'joint_axis_per_point'", "]", "[", "joint_idx", "[", "j", "-", "1", "]", ",", ":", "]", ",", "0", ")", "\n", "print", "(", "'jt_axis'", ",", "jt_axis", ")", "\n", "jts_axis", ".", "append", "(", "jts_axis", ")", "\n", "dataset", "=", "dict", "(", ")", "\n", "dataset", "[", "'source0'", "]", "=", "source0", "\n", "dataset", "[", "'target0'", "]", "=", "target0", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.evaluation.eval_pose_err.compose_rt": [[24, 30], ["numpy.zeros"], "function", ["None"], ["def", "compose_rt", "(", "rotation", ",", "translation", ")", ":", "\n", "    ", "aligned_RT", "=", "np", ".", "zeros", "(", "(", "4", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "aligned_RT", "[", ":", "3", ",", ":", "3", "]", "=", "rotation", "[", ":", "3", ",", ":", "3", "]", "\n", "aligned_RT", "[", ":", "3", ",", "3", "]", "=", "translation", "\n", "aligned_RT", "[", "3", ",", "3", "]", "=", "1", "\n", "return", "aligned_RT", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.evaluation.eval_pose_err.breakpoint": [[31, 33], ["pdb.set_trace"], "function", ["None"], ["", "def", "breakpoint", "(", ")", ":", "\n", "    ", "import", "pdb", ";", "pdb", ".", "set_trace", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.evaluation._init_paths.add_path": [[5, 8], ["sys.path.insert"], "function", ["None"], ["def", "add_path", "(", "path", ")", ":", "\n", "    ", "if", "path", "not", "in", "sys", ".", "path", ":", "\n", "        ", "sys", ".", "path", ".", "insert", "(", "0", ",", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.evaluation.baseline_npcs.ransac": [[14, 27], ["range", "model_estimator", "model_estimator", "model_verifier"], "function", ["None"], ["def", "ransac", "(", "dataset", ",", "model_estimator", ",", "model_verifier", ",", "inlier_th", ",", "niter", "=", "10000", ")", ":", "\n", "    ", "best_model", "=", "None", "\n", "best_score", "=", "-", "np", ".", "inf", "\n", "best_inliers", "=", "None", "\n", "for", "i", "in", "range", "(", "niter", ")", ":", "\n", "        ", "cur_model", "=", "model_estimator", "(", "dataset", ")", "\n", "cur_score", ",", "cur_inliers", "=", "model_verifier", "(", "dataset", ",", "cur_model", ",", "inlier_th", ")", "\n", "if", "cur_score", ">", "best_score", ":", "\n", "            ", "best_model", "=", "cur_model", "\n", "best_inliers", "=", "cur_inliers", "\n", "best_score", "=", "cur_score", "\n", "", "", "best_model", "=", "model_estimator", "(", "dataset", ",", "best_inliers", ")", "\n", "return", "best_model", ",", "best_inliers", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.evaluation.baseline_npcs.single_transformation_estimator": [[28, 40], ["lib.d3_utils.transform_pts", "dict", "numpy.random.randint"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.transform_pts"], ["", "def", "single_transformation_estimator", "(", "dataset", ",", "best_inliers", "=", "None", ")", ":", "\n", "# dataset: dict, fields include source, target, nsource", "\n", "    ", "if", "best_inliers", "is", "None", ":", "\n", "        ", "sample_idx", "=", "np", ".", "random", ".", "randint", "(", "dataset", "[", "'nsource'", "]", ",", "size", "=", "3", ")", "\n", "", "else", ":", "\n", "        ", "sample_idx", "=", "best_inliers", "\n", "", "rotation", ",", "scale", ",", "translation", "=", "transform_pts", "(", "dataset", "[", "'source'", "]", "[", "sample_idx", ",", ":", "]", ",", "dataset", "[", "'target'", "]", "[", "sample_idx", ",", ":", "]", ")", "\n", "strans", "=", "dict", "(", ")", "\n", "strans", "[", "'rotation'", "]", "=", "rotation", "\n", "strans", "[", "'scale'", "]", "=", "scale", "\n", "strans", "[", "'translation'", "]", "=", "translation", "\n", "return", "strans", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.evaluation.baseline_npcs.single_transformation_verifier": [[41, 48], ["numpy.sum", "model[].reshape", "numpy.sqrt", "numpy.sum", "numpy.matmul"], "function", ["None"], ["", "def", "single_transformation_verifier", "(", "dataset", ",", "model", ",", "inlier_th", ")", ":", "\n", "# dataset: dict, fields include source, target, nsource, ntarget", "\n", "# model: dict, fields include rotation, scale, translation", "\n", "    ", "res", "=", "dataset", "[", "'target'", "]", ".", "T", "-", "model", "[", "'scale'", "]", "*", "np", ".", "matmul", "(", "model", "[", "'rotation'", "]", ",", "dataset", "[", "'source'", "]", ".", "T", ")", "-", "model", "[", "'translation'", "]", ".", "reshape", "(", "(", "3", ",", "1", ")", ")", "\n", "inliers", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "res", "**", "2", ",", "0", ")", ")", "<", "inlier_th", "\n", "score", "=", "np", ".", "sum", "(", "inliers", ")", "\n", "return", "score", ",", "inliers", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.evaluation.baseline_npcs.objective_eval": [[49, 62], ["params[].reshape", "params[].reshape", "numpy.concatenate().ravel", "lib.d3_utils.rotate_points_with_rotvec", "lib.d3_utils.rotate_points_with_rotvec", "lib.d3_utils.rotate_points_with_rotvec", "lib.d3_utils.rotate_points_with_rotvec", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rotate_points_with_rotvec", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rotate_points_with_rotvec", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rotate_points_with_rotvec", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rotate_points_with_rotvec"], ["", "def", "objective_eval", "(", "params", ",", "x0", ",", "y0", ",", "x1", ",", "y1", ",", "joints", ",", "isweight", "=", "True", ")", ":", "\n", "# params: [:3] R0, [3:] R1", "\n", "# x0: N x 3, y0: N x 3, x1: M x 3, y1: M x 3, R0: 1 x 3, R1: 1 x 3, joints: K x 3", "\n", "    ", "rotvec0", "=", "params", "[", ":", "3", "]", ".", "reshape", "(", "(", "1", ",", "3", ")", ")", "\n", "rotvec1", "=", "params", "[", "3", ":", "]", ".", "reshape", "(", "(", "1", ",", "3", ")", ")", "\n", "res0", "=", "y0", "-", "rotate_points_with_rotvec", "(", "x0", ",", "rotvec0", ")", "\n", "res1", "=", "y1", "-", "rotate_points_with_rotvec", "(", "x1", ",", "rotvec1", ")", "\n", "res_joint", "=", "rotate_points_with_rotvec", "(", "joints", ",", "rotvec0", ")", "-", "rotate_points_with_rotvec", "(", "joints", ",", "rotvec1", ")", "\n", "if", "isweight", ":", "\n", "        ", "res0", "/=", "x0", ".", "shape", "[", "0", "]", "\n", "res1", "/=", "x1", ".", "shape", "[", "0", "]", "\n", "res_joint", "/=", "joints", ".", "shape", "[", "0", "]", "\n", "", "return", "np", ".", "concatenate", "(", "(", "res0", ",", "res1", ",", "res_joint", ")", ",", "0", ")", ".", "ravel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.evaluation.baseline_npcs.joint_transformation_estimator": [[64, 137], ["lib.d3_utils.scale_pts", "lib.d3_utils.scale_pts", "lib.d3_utils.scale_pts", "lib.d3_utils.scale_pts", "numpy.mean", "numpy.mean", "lib.d3_utils.rotate_pts", "lib.d3_utils.rotate_pts", "numpy.mean", "numpy.mean", "dict", "numpy.random.randint", "numpy.random.randint", "numpy.mean", "numpy.mean", "numpy.ones_like", "dataset[].reshape", "numpy.ones_like", "dataset[].reshape", "scipy.spatial.transform.Rotation.from_dcm().as_rotvec", "scipy.spatial.transform.Rotation.from_dcm().as_rotvec", "scipy.optimize.least_squares", "scipy.spatial.transform.Rotation.from_rotvec().as_dcm", "scipy.spatial.transform.Rotation.from_rotvec().as_dcm", "xrange", "[].reshape", "[].reshape", "numpy.hstack", "numpy.concatenate", "numpy.concatenate", "lib.d3_utils.rotate_pts", "lib.d3_utils.rot_diff_degree", "numpy.concatenate", "numpy.concatenate", "lib.d3_utils.rotate_pts", "lib.d3_utils.rot_diff_degree", "scipy.spatial.transform.Rotation.from_dcm", "scipy.spatial.transform.Rotation.from_dcm", "scipy.spatial.transform.Rotation.from_rotvec", "scipy.spatial.transform.Rotation.from_rotvec", "numpy.matmul", "numpy.matmul", "numpy.matmul", "numpy.matmul", "numpy.linspace", "numpy.linspace", "numpy.min", "numpy.min"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.scale_pts", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.scale_pts", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.scale_pts", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.scale_pts", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rotate_pts", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rotate_pts", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rotate_pts", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rot_diff_degree", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rotate_pts", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rot_diff_degree"], ["", "def", "joint_transformation_estimator", "(", "dataset", ",", "best_inliers", "=", "None", ")", ":", "\n", "# dataset: dict, fields include source0, target0, nsource0,", "\n", "#     source1, target1, nsource1, joint_direction", "\n", "    ", "if", "best_inliers", "is", "None", ":", "\n", "        ", "sample_idx0", "=", "np", ".", "random", ".", "randint", "(", "dataset", "[", "'nsource0'", "]", ",", "size", "=", "3", ")", "\n", "sample_idx1", "=", "np", ".", "random", ".", "randint", "(", "dataset", "[", "'nsource1'", "]", ",", "size", "=", "3", ")", "\n", "", "else", ":", "\n", "        ", "sample_idx0", "=", "best_inliers", "[", "0", "]", "\n", "sample_idx1", "=", "best_inliers", "[", "1", "]", "\n", "\n", "", "source0", "=", "dataset", "[", "'source0'", "]", "[", "sample_idx0", ",", ":", "]", "\n", "target0", "=", "dataset", "[", "'target0'", "]", "[", "sample_idx0", ",", ":", "]", "\n", "source1", "=", "dataset", "[", "'source1'", "]", "[", "sample_idx1", ",", ":", "]", "\n", "target1", "=", "dataset", "[", "'target1'", "]", "[", "sample_idx1", ",", ":", "]", "\n", "\n", "# prescaling and centering", "\n", "scale0", "=", "scale_pts", "(", "source0", ",", "target0", ")", "\n", "scale1", "=", "scale_pts", "(", "source1", ",", "target1", ")", "\n", "scale0_inv", "=", "scale_pts", "(", "target0", ",", "source0", ")", "# check if could simply take reciprocal", "\n", "scale1_inv", "=", "scale_pts", "(", "target1", ",", "source1", ")", "\n", "\n", "target0_scaled_centered", "=", "scale0_inv", "*", "target0", "\n", "target0_scaled_centered", "-=", "np", ".", "mean", "(", "target0_scaled_centered", ",", "0", ",", "keepdims", "=", "True", ")", "\n", "source0_centered", "=", "source0", "-", "np", ".", "mean", "(", "source0", ",", "0", ",", "keepdims", "=", "True", ")", "\n", "\n", "target1_scaled_centered", "=", "scale1_inv", "*", "target1", "\n", "target1_scaled_centered", "-=", "np", ".", "mean", "(", "target1_scaled_centered", ",", "0", ",", "keepdims", "=", "True", ")", "\n", "source1_centered", "=", "source1", "-", "np", ".", "mean", "(", "source1", ",", "0", ",", "keepdims", "=", "True", ")", "\n", "\n", "joint_points0", "=", "np", ".", "ones_like", "(", "np", ".", "linspace", "(", "0", ",", "1", ",", "num", "=", "np", ".", "min", "(", "(", "source0", ".", "shape", "[", "0", "]", ",", "source1", ".", "shape", "[", "0", "]", ")", ")", "+", "1", ")", "[", "1", ":", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", ")", "*", "dataset", "[", "'joint_direction'", "]", ".", "reshape", "(", "(", "1", ",", "3", ")", ")", "\n", "joint_points1", "=", "np", ".", "ones_like", "(", "np", ".", "linspace", "(", "0", ",", "1", ",", "num", "=", "np", ".", "min", "(", "(", "source0", ".", "shape", "[", "0", "]", ",", "source1", ".", "shape", "[", "0", "]", ")", ")", "+", "1", ")", "[", "1", ":", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", ")", "*", "dataset", "[", "'joint_direction'", "]", ".", "reshape", "(", "(", "1", ",", "3", ")", ")", "\n", "\n", "R0", "=", "rotate_pts", "(", "source0_centered", ",", "target0_scaled_centered", ")", "\n", "R1", "=", "rotate_pts", "(", "source1_centered", ",", "target1_scaled_centered", ")", "\n", "rdiff0", "=", "np", ".", "inf", "\n", "rdiff1", "=", "np", ".", "inf", "\n", "niter", "=", "10", "\n", "degree_th", "=", "0.05", "\n", "isalternate", "=", "False", "\n", "\n", "if", "not", "isalternate", ":", "\n", "        ", "rotvec0", "=", "srot", ".", "from_dcm", "(", "R0", ")", ".", "as_rotvec", "(", ")", "\n", "rotvec1", "=", "srot", ".", "from_dcm", "(", "R1", ")", ".", "as_rotvec", "(", ")", "\n", "res", "=", "least_squares", "(", "objective_eval", ",", "np", ".", "hstack", "(", "(", "rotvec0", ",", "rotvec1", ")", ")", ",", "verbose", "=", "0", ",", "ftol", "=", "1e-4", ",", "method", "=", "'lm'", ",", "\n", "args", "=", "(", "source0_centered", ",", "target0_scaled_centered", ",", "source1_centered", ",", "target1_scaled_centered", ",", "joint_points0", ",", "False", ")", ")", "\n", "R0", "=", "srot", ".", "from_rotvec", "(", "res", ".", "x", "[", ":", "3", "]", ")", ".", "as_dcm", "(", ")", "\n", "R1", "=", "srot", ".", "from_rotvec", "(", "res", ".", "x", "[", "3", ":", "]", ")", ".", "as_dcm", "(", ")", "\n", "", "else", ":", "\n", "        ", "for", "i", "in", "xrange", "(", "niter", ")", ":", "\n", "            ", "if", "rdiff0", "<=", "degree_th", "and", "rdiff1", "<=", "degree_th", ":", "\n", "                ", "break", "\n", "", "newsrc0", "=", "np", ".", "concatenate", "(", "(", "source0_centered", ",", "joint_points0", ")", ",", "0", ")", "\n", "newtgt0", "=", "np", ".", "concatenate", "(", "(", "target0_scaled_centered", ",", "np", ".", "matmul", "(", "joint_points0", ",", "R1", ".", "T", ")", ")", ",", "0", ")", "\n", "newR0", "=", "rotate_pts", "(", "newsrc0", ",", "newtgt0", ")", "\n", "rdiff0", "=", "rot_diff_degree", "(", "R0", ",", "newR0", ")", "\n", "R0", "=", "newR0", "\n", "\n", "newsrc1", "=", "np", ".", "concatenate", "(", "(", "source1_centered", ",", "joint_points1", ")", ",", "0", ")", "\n", "newtgt1", "=", "np", ".", "concatenate", "(", "(", "target1_scaled_centered", ",", "np", ".", "matmul", "(", "joint_points1", ",", "R0", ".", "T", ")", ")", ",", "0", ")", "\n", "newR1", "=", "rotate_pts", "(", "newsrc1", ",", "newtgt1", ")", "\n", "rdiff1", "=", "rot_diff_degree", "(", "R1", ",", "newR1", ")", "\n", "R1", "=", "newR1", "\n", "\n", "", "", "translation0", "=", "np", ".", "mean", "(", "target0", ".", "T", "-", "scale0", "*", "np", ".", "matmul", "(", "R0", ",", "source0", ".", "T", ")", ",", "1", ")", "\n", "translation1", "=", "np", ".", "mean", "(", "target1", ".", "T", "-", "scale1", "*", "np", ".", "matmul", "(", "R1", ",", "source1", ".", "T", ")", ",", "1", ")", "\n", "jtrans", "=", "dict", "(", ")", "\n", "jtrans", "[", "'rotation0'", "]", "=", "R0", "\n", "jtrans", "[", "'scale0'", "]", "=", "scale0", "\n", "jtrans", "[", "'translation0'", "]", "=", "translation0", "\n", "jtrans", "[", "'rotation1'", "]", "=", "R1", "\n", "jtrans", "[", "'scale1'", "]", "=", "scale1", "\n", "jtrans", "[", "'translation1'", "]", "=", "translation1", "\n", "return", "jtrans", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.evaluation.baseline_npcs.joint_transformation_verifier": [[138, 147], ["model[].reshape", "numpy.sqrt", "model[].reshape", "numpy.sqrt", "numpy.sum", "numpy.sum", "numpy.matmul", "numpy.matmul", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "joint_transformation_verifier", "(", "dataset", ",", "model", ",", "inlier_th", ")", ":", "\n", "# dataset: dict, fields include source, target, nsource, ntarget", "\n", "# model: dict, fields include rotation, scale, translation", "\n", "    ", "res0", "=", "dataset", "[", "'target0'", "]", ".", "T", "-", "model", "[", "'scale0'", "]", "*", "np", ".", "matmul", "(", "model", "[", "'rotation0'", "]", ",", "dataset", "[", "'source0'", "]", ".", "T", ")", "-", "model", "[", "'translation0'", "]", ".", "reshape", "(", "(", "3", ",", "1", ")", ")", "\n", "inliers0", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "res0", "**", "2", ",", "0", ")", ")", "<", "inlier_th", "\n", "res1", "=", "dataset", "[", "'target1'", "]", ".", "T", "-", "model", "[", "'scale1'", "]", "*", "np", ".", "matmul", "(", "model", "[", "'rotation1'", "]", ",", "dataset", "[", "'source1'", "]", ".", "T", ")", "-", "model", "[", "'translation1'", "]", ".", "reshape", "(", "(", "3", ",", "1", ")", ")", "\n", "inliers1", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "res1", "**", "2", ",", "0", ")", ")", "<", "inlier_th", "\n", "score", "=", "(", "np", ".", "sum", "(", "inliers0", ")", "/", "res0", ".", "shape", "[", "0", "]", "+", "np", ".", "sum", "(", "inliers1", ")", "/", "res1", ".", "shape", "[", "0", "]", ")", "/", "2", "\n", "return", "score", ",", "[", "inliers0", ",", "inliers1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.evaluation.compute_gt_pose.compose_rt": [[14, 20], ["numpy.zeros", "rotation.transpose"], "function", ["None"], ["def", "compose_rt", "(", "rotation", ",", "translation", ")", ":", "\n", "    ", "aligned_RT", "=", "np", ".", "zeros", "(", "(", "4", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "aligned_RT", "[", ":", "3", ",", ":", "3", "]", "=", "rotation", ".", "transpose", "(", ")", "\n", "aligned_RT", "[", ":", "3", ",", "3", "]", "=", "translation", "\n", "aligned_RT", "[", "3", ",", "3", "]", "=", "1", "\n", "return", "aligned_RT", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.evaluation.baseline_naocs.breakpoint": [[19, 21], ["pdb.set_trace"], "function", ["None"], ["def", "breakpoint", "(", ")", ":", "\n", "    ", "import", "pdb", ";", "pdb", ".", "set_trace", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.evaluation.baseline_naocs.ransac": [[22, 35], ["range", "model_estimator", "model_estimator", "model_verifier"], "function", ["None"], ["", "def", "ransac", "(", "dataset", ",", "model_estimator", ",", "model_verifier", ",", "inlier_th", ",", "niter", "=", "10000", ")", ":", "\n", "    ", "best_model", "=", "None", "\n", "best_score", "=", "-", "np", ".", "inf", "\n", "best_inliers", "=", "None", "\n", "for", "i", "in", "range", "(", "niter", ")", ":", "\n", "        ", "cur_model", "=", "model_estimator", "(", "dataset", ")", "\n", "cur_score", ",", "cur_inliers", "=", "model_verifier", "(", "dataset", ",", "cur_model", ",", "inlier_th", ")", "\n", "if", "cur_score", ">", "best_score", ":", "\n", "            ", "best_model", "=", "cur_model", "\n", "best_inliers", "=", "cur_inliers", "\n", "best_score", "=", "cur_score", "\n", "", "", "best_model", "=", "model_estimator", "(", "dataset", ",", "best_inliers", ")", "\n", "return", "best_model", ",", "best_inliers", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.evaluation.baseline_naocs.single_transformation_estimator": [[36, 48], ["lib.d3_utils.transform_pts", "dict", "numpy.random.randint"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.transform_pts"], ["", "def", "single_transformation_estimator", "(", "dataset", ",", "best_inliers", "=", "None", ")", ":", "\n", "# dataset: dict, fields include source, target, nsource", "\n", "    ", "if", "best_inliers", "is", "None", ":", "\n", "        ", "sample_idx", "=", "np", ".", "random", ".", "randint", "(", "dataset", "[", "'nsource'", "]", ",", "size", "=", "3", ")", "\n", "", "else", ":", "\n", "        ", "sample_idx", "=", "best_inliers", "\n", "", "rotation", ",", "scale", ",", "translation", "=", "transform_pts", "(", "dataset", "[", "'source'", "]", "[", "sample_idx", ",", ":", "]", ",", "dataset", "[", "'target'", "]", "[", "sample_idx", ",", ":", "]", ")", "\n", "strans", "=", "dict", "(", ")", "\n", "strans", "[", "'rotation'", "]", "=", "rotation", "\n", "strans", "[", "'scale'", "]", "=", "scale", "\n", "strans", "[", "'translation'", "]", "=", "translation", "\n", "return", "strans", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.evaluation.baseline_naocs.single_transformation_verifier": [[49, 56], ["numpy.sum", "model[].reshape", "numpy.sqrt", "numpy.sum", "numpy.matmul"], "function", ["None"], ["", "def", "single_transformation_verifier", "(", "dataset", ",", "model", ",", "inlier_th", ")", ":", "\n", "# dataset: dict, fields include source, target, nsource, ntarget", "\n", "# model: dict, fields include rotation, scale, translation", "\n", "    ", "res", "=", "dataset", "[", "'target'", "]", ".", "T", "-", "model", "[", "'scale'", "]", "*", "np", ".", "matmul", "(", "model", "[", "'rotation'", "]", ",", "dataset", "[", "'source'", "]", ".", "T", ")", "-", "model", "[", "'translation'", "]", ".", "reshape", "(", "(", "3", ",", "1", ")", ")", "\n", "inliers", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "res", "**", "2", ",", "0", ")", ")", "<", "inlier_th", "\n", "score", "=", "np", ".", "sum", "(", "inliers", ")", "\n", "return", "score", ",", "inliers", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.evaluation.baseline_naocs.objective_eval": [[58, 71], ["params[].reshape", "params[].reshape", "numpy.concatenate().ravel", "lib.d3_utils.rotate_points_with_rotvec", "lib.d3_utils.rotate_points_with_rotvec", "lib.d3_utils.rotate_points_with_rotvec", "lib.d3_utils.rotate_points_with_rotvec", "numpy.concatenate"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rotate_points_with_rotvec", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rotate_points_with_rotvec", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rotate_points_with_rotvec", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rotate_points_with_rotvec"], ["", "def", "objective_eval", "(", "params", ",", "x0", ",", "y0", ",", "x1", ",", "y1", ",", "joints", ",", "isweight", "=", "True", ")", ":", "\n", "# params: [:3] R0, [3:] R1", "\n", "# x0: N x 3, y0: N x 3, x1: M x 3, y1: M x 3, R0: 1 x 3, R1: 1 x 3, joints: K x 3", "\n", "    ", "rotvec0", "=", "params", "[", ":", "3", "]", ".", "reshape", "(", "(", "1", ",", "3", ")", ")", "\n", "rotvec1", "=", "params", "[", "3", ":", "]", ".", "reshape", "(", "(", "1", ",", "3", ")", ")", "\n", "res0", "=", "y0", "-", "rotate_points_with_rotvec", "(", "x0", ",", "rotvec0", ")", "\n", "res1", "=", "y1", "-", "rotate_points_with_rotvec", "(", "x1", ",", "rotvec1", ")", "\n", "res_joint", "=", "rotate_points_with_rotvec", "(", "joints", ",", "rotvec0", ")", "-", "rotate_points_with_rotvec", "(", "joints", ",", "rotvec1", ")", "\n", "if", "isweight", ":", "\n", "        ", "res0", "/=", "x0", ".", "shape", "[", "0", "]", "\n", "res1", "/=", "x1", ".", "shape", "[", "0", "]", "\n", "res_joint", "/=", "joints", ".", "shape", "[", "0", "]", "\n", "", "return", "np", ".", "concatenate", "(", "(", "res0", ",", "res1", ",", "res_joint", ")", ",", "0", ")", ".", "ravel", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.evaluation.baseline_naocs.joint_transformation_estimator": [[73, 146], ["lib.d3_utils.scale_pts", "lib.d3_utils.scale_pts", "lib.d3_utils.scale_pts", "lib.d3_utils.scale_pts", "numpy.mean", "numpy.mean", "lib.d3_utils.rotate_pts", "lib.d3_utils.rotate_pts", "numpy.mean", "numpy.mean", "dict", "numpy.random.randint", "numpy.random.randint", "numpy.mean", "numpy.mean", "numpy.ones_like", "dataset[].reshape", "numpy.ones_like", "dataset[].reshape", "scipy.spatial.transform.Rotation.from_dcm().as_rotvec", "scipy.spatial.transform.Rotation.from_dcm().as_rotvec", "scipy.optimize.least_squares", "scipy.spatial.transform.Rotation.from_rotvec().as_dcm", "scipy.spatial.transform.Rotation.from_rotvec().as_dcm", "xrange", "[].reshape", "[].reshape", "numpy.hstack", "numpy.concatenate", "numpy.concatenate", "lib.d3_utils.rotate_pts", "lib.d3_utils.rot_diff_degree", "numpy.concatenate", "numpy.concatenate", "lib.d3_utils.rotate_pts", "lib.d3_utils.rot_diff_degree", "scipy.spatial.transform.Rotation.from_dcm", "scipy.spatial.transform.Rotation.from_dcm", "scipy.spatial.transform.Rotation.from_rotvec", "scipy.spatial.transform.Rotation.from_rotvec", "numpy.matmul", "numpy.matmul", "numpy.matmul", "numpy.matmul", "numpy.linspace", "numpy.linspace", "numpy.min", "numpy.min"], "function", ["home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.scale_pts", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.scale_pts", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.scale_pts", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.scale_pts", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rotate_pts", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rotate_pts", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rotate_pts", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rot_diff_degree", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rotate_pts", "home.repos.pwc.inspect_result.dragonlong_articulated-pose.lib.d3_utils.rot_diff_degree"], ["", "def", "joint_transformation_estimator", "(", "dataset", ",", "best_inliers", "=", "None", ")", ":", "\n", "# dataset: dict, fields include source0, target0, nsource0,", "\n", "#     source1, target1, nsource1, joint_direction", "\n", "    ", "if", "best_inliers", "is", "None", ":", "\n", "        ", "sample_idx0", "=", "np", ".", "random", ".", "randint", "(", "dataset", "[", "'nsource0'", "]", ",", "size", "=", "3", ")", "\n", "sample_idx1", "=", "np", ".", "random", ".", "randint", "(", "dataset", "[", "'nsource1'", "]", ",", "size", "=", "3", ")", "\n", "", "else", ":", "\n", "        ", "sample_idx0", "=", "best_inliers", "[", "0", "]", "\n", "sample_idx1", "=", "best_inliers", "[", "1", "]", "\n", "\n", "", "source0", "=", "dataset", "[", "'source0'", "]", "[", "sample_idx0", ",", ":", "]", "\n", "target0", "=", "dataset", "[", "'target0'", "]", "[", "sample_idx0", ",", ":", "]", "\n", "source1", "=", "dataset", "[", "'source1'", "]", "[", "sample_idx1", ",", ":", "]", "\n", "target1", "=", "dataset", "[", "'target1'", "]", "[", "sample_idx1", ",", ":", "]", "\n", "\n", "# prescaling and centering", "\n", "scale0", "=", "scale_pts", "(", "source0", ",", "target0", ")", "\n", "scale1", "=", "scale_pts", "(", "source1", ",", "target1", ")", "\n", "scale0_inv", "=", "scale_pts", "(", "target0", ",", "source0", ")", "# check if could simply take reciprocal", "\n", "scale1_inv", "=", "scale_pts", "(", "target1", ",", "source1", ")", "\n", "\n", "target0_scaled_centered", "=", "scale0_inv", "*", "target0", "\n", "target0_scaled_centered", "-=", "np", ".", "mean", "(", "target0_scaled_centered", ",", "0", ",", "keepdims", "=", "True", ")", "\n", "source0_centered", "=", "source0", "-", "np", ".", "mean", "(", "source0", ",", "0", ",", "keepdims", "=", "True", ")", "\n", "\n", "target1_scaled_centered", "=", "scale1_inv", "*", "target1", "\n", "target1_scaled_centered", "-=", "np", ".", "mean", "(", "target1_scaled_centered", ",", "0", ",", "keepdims", "=", "True", ")", "\n", "source1_centered", "=", "source1", "-", "np", ".", "mean", "(", "source1", ",", "0", ",", "keepdims", "=", "True", ")", "\n", "\n", "joint_points0", "=", "np", ".", "ones_like", "(", "np", ".", "linspace", "(", "0", ",", "1", ",", "num", "=", "np", ".", "min", "(", "(", "source0", ".", "shape", "[", "0", "]", ",", "source1", ".", "shape", "[", "0", "]", ")", ")", "+", "1", ")", "[", "1", ":", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", ")", "*", "dataset", "[", "'joint_direction'", "]", ".", "reshape", "(", "(", "1", ",", "3", ")", ")", "\n", "joint_points1", "=", "np", ".", "ones_like", "(", "np", ".", "linspace", "(", "0", ",", "1", ",", "num", "=", "np", ".", "min", "(", "(", "source0", ".", "shape", "[", "0", "]", ",", "source1", ".", "shape", "[", "0", "]", ")", ")", "+", "1", ")", "[", "1", ":", "]", ".", "reshape", "(", "(", "-", "1", ",", "1", ")", ")", ")", "*", "dataset", "[", "'joint_direction'", "]", ".", "reshape", "(", "(", "1", ",", "3", ")", ")", "\n", "\n", "R0", "=", "rotate_pts", "(", "source0_centered", ",", "target0_scaled_centered", ")", "\n", "R1", "=", "rotate_pts", "(", "source1_centered", ",", "target1_scaled_centered", ")", "\n", "rdiff0", "=", "np", ".", "inf", "\n", "rdiff1", "=", "np", ".", "inf", "\n", "niter", "=", "10", "\n", "degree_th", "=", "0.05", "\n", "isalternate", "=", "False", "\n", "\n", "if", "not", "isalternate", ":", "\n", "        ", "rotvec0", "=", "srot", ".", "from_dcm", "(", "R0", ")", ".", "as_rotvec", "(", ")", "\n", "rotvec1", "=", "srot", ".", "from_dcm", "(", "R1", ")", ".", "as_rotvec", "(", ")", "\n", "res", "=", "least_squares", "(", "objective_eval", ",", "np", ".", "hstack", "(", "(", "rotvec0", ",", "rotvec1", ")", ")", ",", "verbose", "=", "0", ",", "ftol", "=", "1e-4", ",", "method", "=", "'lm'", ",", "\n", "args", "=", "(", "source0_centered", ",", "target0_scaled_centered", ",", "source1_centered", ",", "target1_scaled_centered", ",", "joint_points0", ",", "False", ")", ")", "\n", "R0", "=", "srot", ".", "from_rotvec", "(", "res", ".", "x", "[", ":", "3", "]", ")", ".", "as_dcm", "(", ")", "\n", "R1", "=", "srot", ".", "from_rotvec", "(", "res", ".", "x", "[", "3", ":", "]", ")", ".", "as_dcm", "(", ")", "\n", "", "else", ":", "\n", "        ", "for", "i", "in", "xrange", "(", "niter", ")", ":", "\n", "            ", "if", "rdiff0", "<=", "degree_th", "and", "rdiff1", "<=", "degree_th", ":", "\n", "                ", "break", "\n", "", "newsrc0", "=", "np", ".", "concatenate", "(", "(", "source0_centered", ",", "joint_points0", ")", ",", "0", ")", "\n", "newtgt0", "=", "np", ".", "concatenate", "(", "(", "target0_scaled_centered", ",", "np", ".", "matmul", "(", "joint_points0", ",", "R1", ".", "T", ")", ")", ",", "0", ")", "\n", "newR0", "=", "rotate_pts", "(", "newsrc0", ",", "newtgt0", ")", "\n", "rdiff0", "=", "rot_diff_degree", "(", "R0", ",", "newR0", ")", "\n", "R0", "=", "newR0", "\n", "\n", "newsrc1", "=", "np", ".", "concatenate", "(", "(", "source1_centered", ",", "joint_points1", ")", ",", "0", ")", "\n", "newtgt1", "=", "np", ".", "concatenate", "(", "(", "target1_scaled_centered", ",", "np", ".", "matmul", "(", "joint_points1", ",", "R0", ".", "T", ")", ")", ",", "0", ")", "\n", "newR1", "=", "rotate_pts", "(", "newsrc1", ",", "newtgt1", ")", "\n", "rdiff1", "=", "rot_diff_degree", "(", "R1", ",", "newR1", ")", "\n", "R1", "=", "newR1", "\n", "\n", "", "", "translation0", "=", "np", ".", "mean", "(", "target0", ".", "T", "-", "scale0", "*", "np", ".", "matmul", "(", "R0", ",", "source0", ".", "T", ")", ",", "1", ")", "\n", "translation1", "=", "np", ".", "mean", "(", "target1", ".", "T", "-", "scale1", "*", "np", ".", "matmul", "(", "R1", ",", "source1", ".", "T", ")", ",", "1", ")", "\n", "jtrans", "=", "dict", "(", ")", "\n", "jtrans", "[", "'rotation0'", "]", "=", "R0", "\n", "jtrans", "[", "'scale0'", "]", "=", "scale0", "\n", "jtrans", "[", "'translation0'", "]", "=", "translation0", "\n", "jtrans", "[", "'rotation1'", "]", "=", "R1", "\n", "jtrans", "[", "'scale1'", "]", "=", "scale1", "\n", "jtrans", "[", "'translation1'", "]", "=", "translation1", "\n", "return", "jtrans", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.evaluation.baseline_naocs.joint_transformation_verifier": [[147, 156], ["model[].reshape", "numpy.sqrt", "model[].reshape", "numpy.sqrt", "numpy.sum", "numpy.sum", "numpy.matmul", "numpy.matmul", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "joint_transformation_verifier", "(", "dataset", ",", "model", ",", "inlier_th", ")", ":", "\n", "# dataset: dict, fields include source, target, nsource, ntarget", "\n", "# model: dict, fields include rotation, scale, translation", "\n", "    ", "res0", "=", "dataset", "[", "'target0'", "]", ".", "T", "-", "model", "[", "'scale0'", "]", "*", "np", ".", "matmul", "(", "model", "[", "'rotation0'", "]", ",", "dataset", "[", "'source0'", "]", ".", "T", ")", "-", "model", "[", "'translation0'", "]", ".", "reshape", "(", "(", "3", ",", "1", ")", ")", "\n", "inliers0", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "res0", "**", "2", ",", "0", ")", ")", "<", "inlier_th", "\n", "res1", "=", "dataset", "[", "'target1'", "]", ".", "T", "-", "model", "[", "'scale1'", "]", "*", "np", ".", "matmul", "(", "model", "[", "'rotation1'", "]", ",", "dataset", "[", "'source1'", "]", ".", "T", ")", "-", "model", "[", "'translation1'", "]", ".", "reshape", "(", "(", "3", ",", "1", ")", ")", "\n", "inliers1", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "res1", "**", "2", ",", "0", ")", ")", "<", "inlier_th", "\n", "score", "=", "(", "np", ".", "sum", "(", "inliers0", ")", "/", "res0", ".", "shape", "[", "0", "]", "+", "np", ".", "sum", "(", "inliers1", ")", "/", "res1", ".", "shape", "[", "0", "]", ")", "/", "2", "\n", "return", "score", ",", "[", "inliers0", ",", "inliers1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.evaluation.compute_miou.compose_rt": [[19, 25], ["numpy.zeros"], "function", ["None"], ["def", "compose_rt", "(", "rotation", ",", "translation", ")", ":", "\n", "    ", "aligned_RT", "=", "np", ".", "zeros", "(", "(", "4", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "aligned_RT", "[", ":", "3", ",", ":", "3", "]", "=", "rotation", "[", ":", "3", ",", ":", "3", "]", "\n", "aligned_RT", "[", ":", "3", ",", "3", "]", "=", "translation", "\n", "aligned_RT", "[", "3", ",", "3", "]", "=", "1", "\n", "return", "aligned_RT", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.evaluation.eval_joint_params.breakpoint": [[24, 26], ["pdb.set_trace"], "function", ["None"], ["def", "breakpoint", "(", ")", ":", "\n", "    ", "import", "pdb", ";", "pdb", ".", "set_trace", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.dragonlong_articulated-pose.evaluation.eval_joint_params.compose_rt": [[27, 33], ["numpy.zeros"], "function", ["None"], ["", "def", "compose_rt", "(", "rotation", ",", "translation", ")", ":", "\n", "    ", "aligned_RT", "=", "np", ".", "zeros", "(", "(", "4", ",", "4", ")", ",", "dtype", "=", "np", ".", "float32", ")", "\n", "aligned_RT", "[", ":", "3", ",", ":", "3", "]", "=", "rotation", "[", ":", "3", ",", ":", "3", "]", "\n", "aligned_RT", "[", ":", "3", ",", "3", "]", "=", "translation", "\n", "aligned_RT", "[", "3", ",", "3", "]", "=", "1", "\n", "return", "aligned_RT", "\n", "\n"]]}