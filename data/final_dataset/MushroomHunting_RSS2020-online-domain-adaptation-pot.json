{"home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.hilbert_maps.lidar_hit_miss_masks": [[7, 18], ["None"], "function", ["None"], ["def", "lidar_hit_miss_masks", "(", "y", ",", "miss_value", "=", "0", ",", "hit_value", "=", "1", ")", ":", "\n", "    ", "\"\"\"\n\n    :param y:\n    :param miss_value:\n    :param hit_value:\n    :return:\n    \"\"\"", "\n", "hit_mask", "=", "(", "y", "==", "hit_value", ")", ".", "flatten", "(", ")", "\n", "miss_mask", "=", "(", "y", "==", "miss_value", ")", ".", "flatten", "(", ")", "\n", "return", "hit_mask", ",", "miss_mask", "\n", "\n"]], "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.hilbert_maps.lidar_time_mask": [[20, 28], ["None"], "function", ["None"], ["", "def", "lidar_time_mask", "(", "X", ",", "t", ")", ":", "\n", "    ", "\"\"\"\n\n    :param X:\n    :param t:\n    :return:\n    \"\"\"", "\n", "return", "X", "[", ":", ",", "0", "]", "==", "t", "\n", "\n"]], "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.hilbert_maps.lidar_pose": [[30, 38], ["None"], "function", ["None"], ["", "def", "lidar_pose", "(", "poses", ",", "t_idx", ")", ":", "\n", "    ", "\"\"\"\n    Utility function for returning the poses associated with a particular timestamp\n    :param poses:\n    :param t_idx:\n    :return:\n    \"\"\"", "\n", "return", "poses", "[", "t_idx", ",", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.hilbert_maps.calc_grid_v2": [[40, 80], ["numpy.arange", "numpy.arange", "numpy.meshgrid", "numpy.hstack", "numpy.int", "numpy.int", "numpy.random.uniform", "X[].min", "X[].max", "X[].min", "X[].max", "numpy.int", "numpy.int", "xx.ravel", "yy.ravel"], "function", ["None"], ["", "def", "calc_grid_v2", "(", "cell_resolution", ",", "max_min", ",", "method", "=", "'grid'", ",", "X", "=", "None", ",", "M", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    :param cell_resolution: resolution to hinge RBFs as (x_resolution, y_resolution)\n    :param max_min: realm of the RBF field as (x_min, x_max, y_min, y_max)\n    :param X: a sample of lidar locations\n    :return: numpy array of size (# of RNFs, 2) with grid locations\n    \"\"\"", "\n", "if", "max_min", "is", "None", ":", "\n", "# if 'max_min' is not given, make a boundarary based on X", "\n", "# assume 'X' contains samples from the entire area", "\n", "        ", "expansion_coef", "=", "1.2", "\n", "x_min", ",", "x_max", "=", "expansion_coef", "*", "X", "[", ":", ",", "0", "]", ".", "min", "(", ")", ",", "expansion_coef", "*", "X", "[", ":", ",", "\n", "0", "]", ".", "max", "(", ")", "\n", "y_min", ",", "y_max", "=", "expansion_coef", "*", "X", "[", ":", ",", "1", "]", ".", "min", "(", ")", ",", "expansion_coef", "*", "X", "[", ":", ",", "\n", "1", "]", ".", "max", "(", ")", "\n", "", "else", ":", "\n", "        ", "x_min", ",", "x_max", "=", "max_min", "[", "0", "]", ",", "max_min", "[", "1", "]", "\n", "y_min", ",", "y_max", "=", "max_min", "[", "2", "]", ",", "max_min", "[", "3", "]", "\n", "\n", "", "if", "method", "==", "'grid'", ":", "# on a regular grid", "\n", "        ", "xvals", "=", "np", ".", "arange", "(", "x_min", ",", "x_max", ",", "cell_resolution", "[", "0", "]", ")", "\n", "yvals", "=", "np", ".", "arange", "(", "y_min", ",", "y_max", ",", "cell_resolution", "[", "1", "]", ")", "\n", "xx", ",", "yy", "=", "np", ".", "meshgrid", "(", "xvals", ",", "yvals", ")", "\n", "grid", "=", "np", ".", "hstack", "(", "(", "xx", ".", "ravel", "(", ")", "[", ":", ",", "np", ".", "newaxis", "]", ",", "yy", ".", "ravel", "(", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", ")", "\n", "", "else", ":", "# sampling", "\n", "        ", "D", "=", "2", "\n", "if", "M", "is", "None", ":", "\n", "            ", "xsize", "=", "np", ".", "int", "(", "(", "x_max", "-", "x_min", ")", "/", "cell_resolution", "[", "0", "]", ")", "\n", "ysize", "=", "np", ".", "int", "(", "(", "y_max", "-", "y_min", ")", "/", "cell_resolution", "[", "1", "]", ")", "\n", "M", "=", "np", ".", "int", "(", "(", "x_max", "-", "x_min", ")", "/", "cell_resolution", "[", "0", "]", ")", "*", "np", ".", "int", "(", "\n", "(", "y_max", "-", "y_min", ")", "/", "cell_resolution", "[", "1", "]", ")", "\n", "", "if", "method", "==", "'mc'", ":", "\n", "            ", "grid", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ",", "(", "M", ",", "D", ")", ")", "\n", "", "else", ":", "\n", "            ", "grid", "=", "None", "\n", "\n", "", "grid", "[", ":", ",", "0", "]", "=", "x_min", "+", "(", "x_max", "-", "x_min", ")", "*", "grid", "[", ":", ",", "0", "]", "\n", "grid", "[", ":", ",", "1", "]", "=", "y_min", "+", "(", "y_max", "-", "y_min", ")", "*", "grid", "[", ":", ",", "1", "]", "\n", "\n", "", "return", "grid", ",", "xx", ",", "yy", "\n", "\n"]], "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.hilbert_maps.eval_probs_only": [[82, 103], ["kernels.rbf_kernel", "numpy.dot", "numpy.sum", "scipy.special.expit", "numpy.sqrt", "numpy.square", "numpy.transpose"], "function", ["home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.kernels.rbf_kernel"], ["", "def", "eval_probs_only", "(", "X_q", ",", "\n", "qhinge_grid_mean", ",", "\n", "qgamma_mean_forward", ",", "\n", "qw_mean", ",", "\n", "qw_var", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n\n    :param X_q:\n    :param qhinge_grid_mean:\n    :param qgamma_mean_forward:\n    :param qw_mean:\n    :param qw_var:\n    :return:\n    \"\"\"", "\n", "X_q_features", "=", "rbf_kernel", "(", "X_q", ",", "qhinge_grid_mean", ",", "qgamma_mean_forward", ")", "\n", "post_mu", "=", "np", ".", "dot", "(", "X_q_features", ",", "qw_mean", ")", "\n", "post_var", "=", "np", ".", "sum", "(", "np", ".", "square", "(", "X_q_features", ")", "*", "np", ".", "transpose", "(", "qw_var", ")", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "kappa_var", "=", "1", "/", "np", ".", "sqrt", "(", "1", "+", "np", ".", "pi", "*", "post_var", "/", "8", ")", "\n", "probs", "=", "expit", "(", "kappa_var", "*", "post_mu", ")", "\n", "return", "probs", "\n", "\n"]], "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.hilbert_maps.evaluate_model_probs": [[105, 129], ["hilbert_maps.calc_grid_v2", "kernels.rbf_kernel", "numpy.dot", "numpy.sum", "scipy.special.expit", "numpy.sqrt", "numpy.square", "numpy.transpose"], "function", ["home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.hilbert_maps.calc_grid_v2", "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.kernels.rbf_kernel"], ["", "def", "evaluate_model_probs", "(", "qhinge_grid_mean", ",", "\n", "qgamma_mean_forward", ",", "\n", "qw_mean", ",", "\n", "qw_var", ",", "\n", "qcellres", "=", "(", "4", ",", "4", ")", ",", "\n", "qminmax", "=", "(", "0", ",", "300", ",", "50", ",", "250", ")", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n\n    :param qhinge_grid_mean:\n    :param qgamma_mean_forward:\n    :param qw_mean:\n    :param qw_var:\n    :param qcellres:\n    :param qminmax:\n    :return:\n    \"\"\"", "\n", "X_q", ",", "qmesh_x1", ",", "qmesh_x2", "=", "calc_grid_v2", "(", "qcellres", ",", "qminmax", ",", "method", "=", "'grid'", ",", "X", "=", "None", ")", "\n", "X_q_features", "=", "rbf_kernel", "(", "X_q", ",", "qhinge_grid_mean", ",", "qgamma_mean_forward", ")", "\n", "post_mu", "=", "np", ".", "dot", "(", "X_q_features", ",", "qw_mean", ")", "\n", "post_var", "=", "np", ".", "sum", "(", "np", ".", "square", "(", "X_q_features", ")", "*", "np", ".", "transpose", "(", "qw_var", ")", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "kappa_var", "=", "1", "/", "np", ".", "sqrt", "(", "1", "+", "np", ".", "pi", "*", "post_var", "/", "8", ")", "\n", "probs", "=", "expit", "(", "kappa_var", "*", "post_mu", ")", "\n", "return", "probs", ",", "qmesh_x1", ",", "qmesh_x2", "\n", "\n"]], "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.hilbert_maps.evaluate_model_probs_batched": [[131, 175], ["hilbert_maps.calc_grid_v2", "numpy.divmod", "numpy.array", "tqdm.tqdm", "int", "range", "kernels.rbf_kernel", "numpy.dot", "numpy.sum", "numpy.concatenate", "numpy.sqrt", "numpy.square", "numpy.transpose", "scipy.special.expit().flatten", "scipy.special.expit"], "function", ["home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.hilbert_maps.calc_grid_v2", "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.kernels.rbf_kernel"], ["", "def", "evaluate_model_probs_batched", "(", "qhinge_grid_mean", ",", "\n", "qgamma_mean_forward", ",", "\n", "qw_mean", ",", "\n", "qw_var", ",", "\n", "# overflow_offset=10,", "\n", "batch_size", "=", "500", ",", "# batch size in x and y directios", "\n", "qcellres", "=", "(", "4", ",", "4", ")", ",", "\n", "qminmax", "=", "(", "0", ",", "300", ",", "50", ",", "250", ")", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n\n    :param qhinge_grid_mean:\n    :param qgamma_mean_forward:\n    :param qw_mean:\n    :param qw_var:\n    :param batch_size:\n    :param qcellres:\n    :param qminmax:\n    :return:\n    \"\"\"", "\n", "X_q", ",", "qmesh_x1", ",", "qmesh_x2", "=", "calc_grid_v2", "(", "qcellres", ",", "qminmax", ",", "method", "=", "'grid'", ",", "X", "=", "None", ")", "\n", "N_fullbatch", ",", "size_lastbatch", "=", "np", ".", "divmod", "(", "X_q", ".", "shape", "[", "0", "]", ",", "batch_size", ")", "\n", "probs", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "\n", "# Process the full query area chunk by chunk", "\n", "# This can be clearly be parallelized if you wanted", "\n", "total_iters", "=", "N_fullbatch", "+", "int", "(", "size_lastbatch", ">", "0", ")", "\n", "for", "i", "in", "tqdm", "(", "range", "(", "total_iters", ")", ")", ":", "\n", "        ", "if", "i", "<", "N_fullbatch", ":", "\n", "            ", "x_idx_start", "=", "i", "*", "batch_size", "\n", "x_idx_end", "=", "x_idx_start", "+", "batch_size", "\n", "X_q_batch", "=", "X_q", "[", "x_idx_start", ":", "x_idx_end", ",", ":", "]", "\n", "", "else", ":", "# The remainder batch", "\n", "            ", "x_idx_start", "=", "N_fullbatch", "*", "batch_size", "\n", "X_q_batch", "=", "X_q", "[", "x_idx_start", ":", ",", ":", "]", "\n", "\n", "# Now we're going to extract kernels relevant only in the vicinity of the query", "\n", "", "X_q_features", "=", "rbf_kernel", "(", "X_q_batch", ",", "qhinge_grid_mean", ",", "qgamma_mean_forward", ")", "\n", "post_mu", "=", "np", ".", "dot", "(", "X_q_features", ",", "qw_mean", ")", "\n", "post_var", "=", "np", ".", "sum", "(", "np", ".", "square", "(", "X_q_features", ")", "*", "np", ".", "transpose", "(", "qw_var", ")", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "kappa_var", "=", "1", "/", "np", ".", "sqrt", "(", "1", "+", "np", ".", "pi", "*", "post_var", "/", "8", ")", "\n", "probs", "=", "np", ".", "concatenate", "(", "[", "probs", ",", "expit", "(", "kappa_var", "*", "post_mu", ")", ".", "flatten", "(", ")", "]", ")", "\n", "\n", "", "return", "probs", ",", "qmesh_x1", ",", "qmesh_x2", "\n", "", ""]], "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.math.rot_matrix": [[5, 10], ["numpy.radians", "numpy.array", "numpy.cos", "numpy.sin"], "function", ["None"], ["def", "rot_matrix", "(", "ccw_deg", "=", "0.0", ")", ":", "\n", "    ", "theta", "=", "np", ".", "radians", "(", "ccw_deg", ")", "\n", "c", ",", "s", "=", "np", ".", "cos", "(", "theta", ")", ",", "np", ".", "sin", "(", "theta", ")", "\n", "R", "=", "np", ".", "array", "(", "(", "(", "c", ",", "-", "s", ")", ",", "(", "s", ",", "c", ")", ")", ")", "\n", "return", "R", ".", "T", "\n", "\n"]], "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.math.paired_squared_euclidean": [[12, 18], ["numpy.linalg.norm", "numpy.linalg.norm", "numpy.square", "numpy.square", "numpy.transpose", "numpy.dot"], "function", ["None"], ["", "def", "paired_squared_euclidean", "(", "A", ",", "B", ")", ":", "\n", "    ", "A_norm", "=", "np", ".", "linalg", ".", "norm", "(", "A", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "B_norm", "=", "np", ".", "linalg", ".", "norm", "(", "B", ",", "axis", "=", "1", ",", "keepdims", "=", "True", ")", "\n", "return", "np", ".", "square", "(", "A_norm", ")", "-", "2", "*", "np", ".", "dot", "(", "A", ",", "B", ".", "T", ")", "+", "np", ".", "square", "(", "np", ".", "transpose", "(", "B_norm", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.math.get_centroid": [[20, 28], ["numpy.mean"], "function", ["None"], ["", "def", "get_centroid", "(", "X", ")", ":", "\n", "    ", "\"\"\"\n    Find the centre of a set of coordinates\n    :param X:\n    :return:\n    \"\"\"", "\n", "centre", "=", "np", ".", "mean", "(", "X", ",", "axis", "=", "0", ")", "\n", "return", "centre", "[", "0", "]", ",", "centre", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.math.xyspan": [[30, 40], ["X[].min", "X[].max", "X[].min", "X[].max"], "function", ["None"], ["", "def", "xyspan", "(", "X", ")", ":", "\n", "    ", "min_x", "=", "X", "[", ":", ",", "0", "]", ".", "min", "(", ")", "\n", "max_x", "=", "X", "[", ":", ",", "0", "]", ".", "max", "(", ")", "\n", "min_y", "=", "X", "[", ":", ",", "1", "]", ".", "min", "(", ")", "\n", "max_y", "=", "X", "[", ":", ",", "1", "]", ".", "max", "(", ")", "\n", "\n", "x_range", "=", "max_x", "-", "min_x", "\n", "y_range", "=", "max_y", "-", "min_y", "\n", "\n", "return", "x_range", ",", "y_range", "\n", "\n"]], "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.math.multi_query_centroids": [[41, 52], ["ghalton.GeneralizedHalton", "numpy.array", "scipy.uniform.ppf", "gh.GeneralizedHalton.get", "int"], "function", ["None"], ["", "def", "multi_query_centroids", "(", "D", ",", "\n", "N_query", ",", "\n", "query_minmax", ")", ":", "\n", "    ", "sequencer", "=", "gh", ".", "GeneralizedHalton", "(", "gh", ".", "EA_PERMS", "[", ":", "D", "]", ")", "\n", "points", "=", "np", ".", "array", "(", "sequencer", ".", "get", "(", "int", "(", "N_query", ")", ")", ")", "\n", "query_xmin", ",", "query_xmax", ",", "query_ymin", ",", "query_ymax", "=", "query_minmax", "# (150, 200, 150, 300)", "\n", "query_centroids", "=", "sstats", ".", "uniform", ".", "ppf", "(", "points", ",", "\n", "loc", "=", "(", "query_xmin", ",", "query_ymin", ")", ",", "\n", "scale", "=", "(", "query_xmax", "-", "query_xmin", ",", "\n", "query_ymax", "-", "query_ymin", ")", ")", "\n", "return", "query_centroids", "\n", "", ""]], "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.chunking.Chunk.__init__": [[71, 161], ["numpy.identity", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "math.rot_matrix", "math.rot_matrix", "numpy.dot", "numpy.dot", "math.rot_matrix", "math.rot_matrix", "math.rot_matrix", "numpy.arange", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.math.rot_matrix", "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.math.rot_matrix", "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.math.rot_matrix", "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.math.rot_matrix", "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.math.rot_matrix"], ["    ", "def", "__init__", "(", "self", ",", "\n", "X_hit", ",", "\n", "X_miss", ",", "\n", "N_hit", ",", "\n", "N_miss", ",", "\n", "y_hit", ",", "\n", "y_miss", ",", "\n", "qw_mean", ",", "\n", "qw_var", ",", "\n", "qgamma_mean", ",", "\n", "qgamma_mean_forward", ",", "\n", "qgamma_var", ",", "\n", "qhinge_grid_mean", ",", "\n", "qhinge_grid_var", ",", "\n", "scale_factor", "=", "1", "/", "100", ",", "\n", "lidar_bearing_original", "=", "None", ",", "\n", "extraction_centroid_original", "=", "None", ",", "\n", "extraction_radius_original", "=", "None", ",", "\n", "hit_centroid_original", "=", "None", ",", "\n", "miss_centroid_original", "=", "None", "\n", ")", ":", "\n", "        ", "\"\"\"\n\n        :param X_hit:\n        :param X_miss:\n        :param N_hit:\n        :param N_miss:\n        :param y_hit:\n        :param y_miss:\n        :param qw_mean:\n        :param qw_var:\n        :param qgamma_mean:\n        :param qgamma_mean_forward:\n        :param qgamma_var:\n        :param qhinge_grid_mean:\n        :param qhinge_grid_var:\n        :param scale_factor:\n        :param lidar_bearing_original:\n        :param extraction_centroid_original:\n        :param extraction_radius_original:\n        :param hit_centroid_original:\n        :param miss_centroid_original:\n        \"\"\"", "\n", "self", ".", "scale_factor", "=", "scale_factor", "\n", "self", ".", "S", "=", "np", ".", "identity", "(", "n", "=", "2", ")", "*", "self", ".", "scale_factor", "\n", "\n", "self", ".", "R_variations", "=", "[", "rot_matrix", "(", "degree", ")", "for", "degree", "in", "\n", "45", "*", "np", ".", "arange", "(", "0", ",", "5", ")", "]", "+", "[", "rot_matrix", "(", "degree", ")", "for", "degree", "in", "\n", "-", "45", "*", "np", ".", "arange", "(", "1", ",", "5", ")", "]", "\n", "self", ".", "X_hit", "=", "X_hit", "# Use for transportation", "\n", "self", ".", "X_miss", "=", "X_miss", "# Use for transportation", "\n", "self", ".", "N_hit", "=", "N_hit", "\n", "self", ".", "N_miss", "=", "N_miss", "\n", "if", "self", ".", "N_hit", ">", "0", ":", "\n", "            ", "if", "lidar_bearing_original", "is", "not", "None", ":", "\n", "                ", "self", ".", "X_hit", "=", "np", ".", "dot", "(", "self", ".", "X_hit", ",", "\n", "rot_matrix", "(", "lidar_bearing_original", ")", ")", "\n", "# Use this normalized one for OT distance", "\n", "", "self", ".", "X_hit_scaled", "=", "np", ".", "dot", "(", "self", ".", "X_hit", ",", "self", ".", "S", ")", "\n", "", "if", "self", ".", "N_miss", ">", "0", ":", "\n", "            ", "if", "lidar_bearing_original", "is", "not", "None", ":", "\n", "                ", "self", ".", "X_miss", "=", "np", ".", "dot", "(", "self", ".", "X_miss", ",", "\n", "rot_matrix", "(", "lidar_bearing_original", ")", ")", "\n", "# Use this normalized one for OT distance", "\n", "", "self", ".", "X_miss_scaled", "=", "np", ".", "dot", "(", "self", ".", "X_miss", ",", "self", ".", "S", ")", "\n", "", "self", ".", "y_hit", "=", "y_hit", "\n", "self", ".", "y_miss", "=", "y_miss", "\n", "self", ".", "qw_mean", "=", "qw_mean", "\n", "self", ".", "qw_var", "=", "qw_var", "\n", "self", ".", "qgamma_mean", "=", "qgamma_mean", "\n", "self", ".", "qgamma_mean_forward", "=", "qgamma_mean_forward", "\n", "self", ".", "qgamma_var", "=", "qgamma_var", "\n", "self", ".", "qhinge_grid_mean", "=", "qhinge_grid_mean", "# Use for transportation", "\n", "if", "lidar_bearing_original", "is", "not", "None", ":", "\n", "            ", "self", ".", "qhinge_grid_mean", "=", "np", ".", "dot", "(", "self", ".", "qhinge_grid_mean", ",", "\n", "rot_matrix", "(", "lidar_bearing_original", ")", ")", "\n", "# Use this normalized one for OT distance", "\n", "", "if", "self", ".", "qhinge_grid_mean", "is", "not", "None", ":", "\n", "            ", "self", ".", "qhinge_grid_mean_scaled", "=", "np", ".", "dot", "(", "self", ".", "qhinge_grid_mean", ",", "self", ".", "S", ")", "\n", "", "self", ".", "qhinge_grid_var", "=", "qhinge_grid_var", "\n", "# Original centroid of the lidar chunks", "\n", "self", ".", "extraction_radius_original", "=", "extraction_radius_original", "\n", "self", ".", "extraction_centroid_original", "=", "extraction_centroid_original", "\n", "if", "self", ".", "extraction_centroid_original", "is", "not", "None", ":", "\n", "            ", "self", ".", "extraction_centroid_original_scaled", "=", "np", ".", "dot", "(", "\n", "self", ".", "extraction_centroid_original", ",", "self", ".", "S", ")", "\n", "", "self", ".", "hit_centroid_original", "=", "hit_centroid_original", "\n", "self", ".", "miss_centroid_original", "=", "miss_centroid_original", "\n", "self", ".", "lidar_bearing_original", "=", "lidar_bearing_original", "\n", "\n"]], "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.chunking.Chunk.get_extraction_bbox_scaled_centroid": [[162, 173], ["numpy.dot", "numpy.dot", "numpy.array", "numpy.array"], "methods", ["None"], ["", "def", "get_extraction_bbox_scaled_centroid", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Get the original coordinate in scaled space\n        :return:\n        \"\"\"", "\n", "if", "self", ".", "hit_centroid_original", "is", "not", "None", ":", "\n", "            ", "return", "self", ".", "extraction_centroid_original_scaled", "-", "np", ".", "dot", "(", "\n", "np", ".", "array", "(", "self", ".", "hit_centroid_original", ")", ",", "self", ".", "S", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "extraction_centroid_original_scaled", "-", "np", ".", "dot", "(", "\n", "np", ".", "array", "(", "self", ".", "miss_centroid_original", ")", ",", "self", ".", "S", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.chunking.Chunk.get_variation": [[174, 201], ["numpy.dot", "random.random_choice_idxs", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot", "numpy.dot"], "methods", ["home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.random.random_choice_idxs"], ["", "", "def", "get_variation", "(", "self", ",", "varname", "=", "\"X_hit_scaled\"", ",", "r_idx", "=", "1", ",", "N_subsample", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param varname:\n        :param r_idx:\n        :param N_subsample:\n        :return:\n        \"\"\"", "\n", "return_val", "=", "None", "\n", "if", "varname", "==", "\"X_hit\"", ":", "\n", "            ", "return_val", "=", "np", ".", "dot", "(", "self", ".", "X_hit", ",", "self", ".", "R_variations", "[", "r_idx", "]", ")", "\n", "", "elif", "varname", "==", "\"X_miss\"", ":", "\n", "            ", "return_val", "=", "np", ".", "dot", "(", "self", ".", "X_miss", ",", "self", ".", "R_variations", "[", "r_idx", "]", ")", "\n", "", "elif", "varname", "==", "\"X_hit_scaled\"", ":", "\n", "            ", "return_val", "=", "np", ".", "dot", "(", "self", ".", "X_hit_scaled", ",", "self", ".", "R_variations", "[", "r_idx", "]", ")", "\n", "", "elif", "varname", "==", "\"X_miss_scaled\"", ":", "\n", "            ", "return_val", "=", "np", ".", "dot", "(", "self", ".", "X_miss_scaled", ",", "self", ".", "R_variations", "[", "r_idx", "]", ")", "\n", "", "elif", "varname", "==", "\"qhinge_grid_mean\"", ":", "\n", "            ", "return_val", "=", "np", ".", "dot", "(", "self", ".", "qhinge_grid_mean", ",", "self", ".", "R_variations", "[", "r_idx", "]", ")", "\n", "", "elif", "varname", "==", "\"qhinge_grid_mean_scaled\"", ":", "\n", "            ", "return_val", "=", "np", ".", "dot", "(", "self", ".", "qhinge_grid_mean_scaled", ",", "\n", "self", ".", "R_variations", "[", "r_idx", "]", ")", "\n", "\n", "", "if", "N_subsample", "is", "not", "None", ":", "\n", "            ", "random_idxs", "=", "random_choice_idxs", "(", "return_val", ",", "N_subsample", ",", "axis", "=", "0", ")", "\n", "return", "return_val", "[", "random_idxs", ",", ":", "]", "\n", "", "else", ":", "\n", "            ", "return", "return_val", "\n", "\n"]], "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.chunking.multi_query_chunks": [[8, 42], ["math.multi_query_centroids", "range", "chunking.extract_chunk", "query_chunks.append"], "function", ["home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.math.multi_query_centroids", "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.chunking.extract_chunk"], ["def", "multi_query_chunks", "(", "X_hit", ",", "\n", "X_miss", ",", "\n", "N_query", ",", "\n", "query_minmax", ",", "\n", "query_radius", ",", "\n", "scale_factor", ",", "\n", "shape", "=", "\"circle\"", ")", ":", "\n", "    ", "\"\"\"\n\n    :param X_hit:\n    :param X_miss:\n    :param N_query:\n    :param query_minmax:\n    :param query_radius:\n    :param scale_factor:\n    :param shape:\n    :return:\n    \"\"\"", "\n", "D", "=", "X_hit", ".", "shape", "[", "1", "]", "\n", "query_centroids", "=", "multi_query_centroids", "(", "D", "=", "D", ",", "\n", "N_query", "=", "N_query", ",", "\n", "query_minmax", "=", "query_minmax", ")", "\n", "\n", "query_chunks", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "N_query", ")", ":", "\n", "        ", "query_centroid", "=", "query_centroids", "[", "i", ",", ":", "]", "\n", "query_chunk", "=", "extract_chunk", "(", "X_hit", "=", "X_hit", ",", "\n", "X_miss", "=", "X_miss", ",", "\n", "centroid", "=", "query_centroid", ",", "\n", "radius", "=", "query_radius", ",", "\n", "scale_factor", "=", "scale_factor", ",", "\n", "shape", "=", "\"circle\"", ")", "\n", "query_chunks", ".", "append", "(", "query_chunk", ")", "\n", "", "return", "query_chunks", "\n", "\n"]], "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.chunking.extract_chunk_subdivs": [[44, 68], ["chunking.extract_chunk"], "function", ["home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.chunking.extract_chunk"], ["", "def", "extract_chunk_subdivs", "(", "X", ",", "y", ",", "t", ",", "t_idx", ",", "lidar_poses", ",", "\n", "lidar_search_angle_range", ",", "search_angle_subdiv", ",", "\n", "radius", ",", "scale_factor", ",", "\n", "shape", "=", "\"sector\"", ")", ":", "\n", "    ", "\"\"\"\n\n    :param X:\n    :param y:\n    :param t:\n    :param t_idx:\n    :param lidar_poses:\n    :param lidar_search_angle_range:\n    :param search_angle_subdiv:\n    :param radius:\n    :param scale_factor:\n    :param shape:\n    :return:\n    \"\"\"", "\n", "return", "[", "\n", "extract_chunk", "(", "X", "=", "X", ",", "y", "=", "y", ",", "t", "=", "t", ",", "t_idx", "=", "t_idx", ",", "lidar_poses", "=", "lidar_poses", ",", "\n", "lidar_search_angle_range", "=", "lidar_search_angle_range", ",", "\n", "search_angle_subdiv", "=", "subdiv", ",", "radius", "=", "radius", ",", "\n", "scale_factor", "=", "scale_factor", ",", "shape", "=", "shape", ")", "for", "subdiv", "in", "\n", "search_angle_subdiv", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.chunking.extract_chunk": [[203, 298], ["numpy.array", "chunking.Chunk", "hilbert_maps.lidar_pose", "numpy.rad2deg", "numpy.array", "hilbert_maps.lidar_time_mask", "hilbert_maps.lidar_hit_miss_masks", "geometric_masks.sector", "geometric_masks.sector", "math.get_centroid", "numpy.array", "math.get_centroid", "numpy.array"], "function", ["home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.hilbert_maps.lidar_pose", "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.hilbert_maps.lidar_time_mask", "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.hilbert_maps.lidar_hit_miss_masks", "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.geometric_masks.sector", "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.geometric_masks.sector", "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.math.get_centroid", "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.math.get_centroid"], ["", "", "", "def", "extract_chunk", "(", "X", ",", "\n", "y", ",", "\n", "t", "=", "None", ",", "\n", "t_idx", "=", "None", ",", "\n", "lidar_poses", "=", "None", ",", "\n", "lidar_search_angle_range", "=", "180", ",", "\n", "search_angle_subdiv", "=", "np", ".", "array", "(", "[", "0.0", ",", "1.0", "]", ")", ",", "\n", "radius", "=", "40", ",", "\n", "scale_factor", "=", "1", "/", "100", ",", "\n", "shape", "=", "\"sector\"", ")", ":", "\n", "    ", "\"\"\"\n\n    :param X:\n    :param y:\n    :param t:\n    :param t_idx:\n    :param lidar_poses:\n    :param lidar_search_angle_range:\n    :param search_angle_subdiv:\n    :param radius:\n    :param scale_factor:\n    :param shape:\n    :return:\n    \"\"\"", "\n", "if", "shape", "==", "\"sector\"", ":", "\n", "        ", "pose_t", "=", "lidar_pose", "(", "lidar_poses", ",", "t_idx", "=", "t", "[", "t_idx", "]", ")", "\n", "bearing_t_deg", "=", "np", ".", "rad2deg", "(", "pose_t", "[", "2", "]", ")", "\n", "centroid", "=", "pose_t", "[", "0", ":", "2", "]", "\n", "min_angle_temp", "=", "bearing_t_deg", "-", "lidar_search_angle_range", "/", "2", "\n", "max_angle_temp", "=", "bearing_t_deg", "+", "lidar_search_angle_range", "/", "2", "\n", "angle_range", "=", "max_angle_temp", "-", "min_angle_temp", "\n", "min_angle", "=", "min_angle_temp", "+", "search_angle_subdiv", "[", "0", "]", "*", "angle_range", "\n", "max_angle", "=", "min_angle_temp", "+", "search_angle_subdiv", "[", "1", "]", "*", "angle_range", "\n", "angle_range", "=", "np", ".", "array", "(", "[", "min_angle", ",", "\n", "max_angle", "]", ")", "\n", "\n", "lidar_mask_t", "=", "lidar_time_mask", "(", "X", ",", "t", "=", "t", "[", "t_idx", "]", ")", "\n", "X_t", "=", "X", "[", "lidar_mask_t", ",", ":", "]", "\n", "y_t", "=", "y", "[", "lidar_mask_t", "]", "\n", "hit_mask_t", ",", "miss_mask_t", "=", "lidar_hit_miss_masks", "(", "y", "=", "y_t", ")", "\n", "X_hit_t", "=", "X_t", "[", "hit_mask_t", ",", "1", ":", "]", "# IMPORTANT TO REMOVE TIMESTAMP", "\n", "y_hit_t", "=", "y_t", "[", "hit_mask_t", "]", "\n", "X_miss_t", "=", "X_t", "[", "miss_mask_t", ",", "1", ":", "]", "\n", "y_miss_t", "=", "y_t", "[", "miss_mask_t", "]", "\n", "\n", "X_hit_t_mask", "=", "sector", "(", "X_hit_t", ",", "centroid", ",", "radius", ",", "angle_range", ")", "\n", "X_miss_t_mask", "=", "sector", "(", "X_miss_t", ",", "centroid", ",", "radius", ",", "angle_range", ")", "\n", "\n", "X_hit_t", "=", "X_hit_t", "[", "X_hit_t_mask", ",", ":", "]", "\n", "X_miss_t", "=", "X_miss_t", "[", "X_miss_t_mask", ",", ":", "]", "\n", "\n", "total_hits", "=", "X_hit_t", ".", "shape", "[", "0", "]", "\n", "total_misses", "=", "X_miss_t", ".", "shape", "[", "0", "]", "\n", "\n", "X_hit_chunk", "=", "None", "\n", "X_miss_chunk", "=", "None", "\n", "hit_centroid_original", "=", "None", "\n", "miss_centroid_original", "=", "None", "\n", "\n", "chunk_centroid_x", ",", "chunk_centroid_y", "=", "centroid", "\n", "if", "total_hits", ">", "0", ":", "\n", "            ", "hit_centroid_x", ",", "hit_centroid_y", "=", "hit_centroid_original", "=", "get_centroid", "(", "\n", "X_hit_t", ")", "\n", "hit_centroid", "=", "np", ".", "array", "(", "[", "[", "hit_centroid_x", ",", "hit_centroid_y", "]", "]", ")", "\n", "X_hit_chunk", "=", "X_hit_t", "-", "hit_centroid", "\n", "\n", "", "if", "total_misses", ">", "0", ":", "\n", "            ", "miss_centroid_x", ",", "miss_centroid_y", "=", "miss_centroid_original", "=", "get_centroid", "(", "\n", "X_miss_t", ")", "\n", "miss_centroid", "=", "np", ".", "array", "(", "[", "[", "miss_centroid_x", ",", "miss_centroid_y", "]", "]", ")", "\n", "if", "total_hits", ">", "0", ":", "\n", "                ", "X_miss_chunk", "=", "X_miss_t", "-", "hit_centroid", "\n", "", "else", ":", "\n", "                ", "X_miss_chunk", "=", "X_miss_t", "-", "miss_centroid", "\n", "\n", "", "", "", "chunk", "=", "Chunk", "(", "X_hit", "=", "X_hit_chunk", ",", "\n", "X_miss", "=", "X_miss_chunk", ",", "\n", "N_hit", "=", "total_hits", ",", "\n", "N_miss", "=", "total_misses", ",", "\n", "y_hit", "=", "y_hit_t", ",", "\n", "y_miss", "=", "y_miss_t", ",", "\n", "qw_mean", "=", "None", ",", "\n", "qw_var", "=", "None", ",", "\n", "qgamma_mean", "=", "None", ",", "\n", "qgamma_mean_forward", "=", "None", ",", "\n", "qgamma_var", "=", "None", ",", "\n", "qhinge_grid_mean", "=", "None", ",", "\n", "qhinge_grid_var", "=", "None", ",", "\n", "scale_factor", "=", "scale_factor", ",", "\n", "lidar_bearing_original", "=", "None", ",", "\n", "extraction_centroid_original", "=", "centroid", ",", "\n", "extraction_radius_original", "=", "radius", ",", "\n", "hit_centroid_original", "=", "hit_centroid_original", ",", "\n", "miss_centroid_original", "=", "miss_centroid_original", ")", "\n", "return", "chunk", "\n", "\n"]], "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.chunking.extract_training_chunk": [[300, 416], ["numpy.array", "chunking.Chunk", "hilbert_maps.lidar_pose", "numpy.rad2deg", "numpy.array", "hilbert_maps.lidar_time_mask", "hilbert_maps.lidar_hit_miss_masks", "geometric_masks.sector", "geometric_masks.sector", "geometric_masks.sector.sum", "geometric_masks.sector.sum", "geometric_masks.sector", "math.get_centroid", "numpy.array", "math.get_centroid", "numpy.array"], "function", ["home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.hilbert_maps.lidar_pose", "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.hilbert_maps.lidar_time_mask", "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.hilbert_maps.lidar_hit_miss_masks", "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.geometric_masks.sector", "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.geometric_masks.sector", "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.geometric_masks.sector", "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.math.get_centroid", "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.math.get_centroid"], ["", "def", "extract_training_chunk", "(", "dataset", ",", "\n", "y_hit", "=", "None", ",", "\n", "y_miss", "=", "None", ",", "\n", "t", "=", "None", ",", "\n", "t_idx", "=", "None", ",", "\n", "lidar_poses", "=", "None", ",", "\n", "lidar_search_angle_range", "=", "180", ",", "\n", "search_angle_subdiv", "=", "np", ".", "array", "(", "[", "0.0", ",", "1.0", "]", ")", ",", "\n", "radius", "=", "40", ",", "\n", "scale_factor", "=", "1", "/", "100", ",", "\n", "shape", "=", "\"sector\"", ")", ":", "\n", "    ", "\"\"\"\n\n    :param dataset:\n    :param y_hit:\n    :param y_miss:\n    :param t:\n    :param t_idx:\n    :param lidar_poses:\n    :param lidar_search_angle_range:\n    :param search_angle_subdiv:\n    :param radius:\n    :param scale_factor:\n    :param shape:\n    :return:\n    \"\"\"", "\n", "X", "=", "dataset", "[", "\"X\"", "]", "\n", "y", "=", "dataset", "[", "\"Y\"", "]", "\n", "qhinge_mean", "=", "dataset", "[", "\"qhinge_grid_mean\"", "]", "\n", "\n", "if", "shape", "==", "\"sector\"", ":", "\n", "        ", "pose_t", "=", "lidar_pose", "(", "lidar_poses", ",", "t_idx", "=", "t", "[", "t_idx", "]", ")", "\n", "bearing_t_deg", "=", "np", ".", "rad2deg", "(", "pose_t", "[", "2", "]", ")", "\n", "centroid", "=", "pose_t", "[", "0", ":", "2", "]", "\n", "min_angle_temp", "=", "bearing_t_deg", "-", "lidar_search_angle_range", "/", "2", "\n", "max_angle_temp", "=", "bearing_t_deg", "+", "lidar_search_angle_range", "/", "2", "\n", "angle_range", "=", "max_angle_temp", "-", "min_angle_temp", "\n", "min_angle", "=", "min_angle_temp", "+", "search_angle_subdiv", "[", "0", "]", "*", "angle_range", "\n", "max_angle", "=", "min_angle_temp", "+", "search_angle_subdiv", "[", "1", "]", "*", "angle_range", "\n", "angle_range", "=", "np", ".", "array", "(", "[", "min_angle", ",", "\n", "max_angle", "]", ")", "\n", "\n", "lidar_mask_t", "=", "lidar_time_mask", "(", "X", ",", "t", "=", "t", "[", "t_idx", "]", ")", "\n", "X_t", "=", "X", "[", "lidar_mask_t", ",", ":", "]", "\n", "y_t", "=", "y", "[", "lidar_mask_t", "]", "\n", "hit_mask_t", ",", "miss_mask_t", "=", "lidar_hit_miss_masks", "(", "y", "=", "y_t", ")", "\n", "X_hit_t", "=", "X_t", "[", "hit_mask_t", ",", "1", ":", "]", "\n", "y_hit_t", "=", "y_t", "[", "hit_mask_t", "]", "\n", "X_miss_t", "=", "X_t", "[", "miss_mask_t", ",", "1", ":", "]", "\n", "y_miss_t", "=", "y_t", "[", "miss_mask_t", "]", "\n", "\n", "X_hit_t_mask", "=", "sector", "(", "X_hit_t", ",", "centroid", ",", "radius", ",", "angle_range", ")", "\n", "X_miss_t_mask", "=", "sector", "(", "X_miss_t", ",", "centroid", ",", "radius", ",", "angle_range", ")", "\n", "\n", "X_hit_t", "=", "X_hit_t", "[", "X_hit_t_mask", ",", ":", "]", "\n", "X_miss_t", "=", "X_miss_t", "[", "X_miss_t_mask", ",", ":", "]", "\n", "\n", "total_hits", "=", "X_hit_t_mask", ".", "sum", "(", ")", "\n", "total_misses", "=", "X_miss_t_mask", ".", "sum", "(", ")", "\n", "\n", "qhinge_mean_mask", "=", "sector", "(", "qhinge_mean", ",", "centroid", ",", "radius", ",", "angle_range", ")", "\n", "qhinge_mean_t", "=", "qhinge_mean", "[", "qhinge_mean_mask", ",", ":", "]", "\n", "qgamma_mean_forward_t", "=", "dataset", "[", "\"qgamma_mean_forward\"", "]", "[", ":", ",", "\n", "qhinge_mean_mask", "]", "\n", "qw_mean_t", "=", "dataset", "[", "\"qw_mean\"", "]", "[", "qhinge_mean_mask", ",", ":", "]", "\n", "qw_var_t", "=", "dataset", "[", "\"qw_var\"", "]", "[", "qhinge_mean_mask", ",", ":", "]", "\n", "\n", "X_hit_chunk", "=", "None", "\n", "X_miss_chunk", "=", "None", "\n", "hit_centroid_original", "=", "None", "\n", "miss_centroid_original", "=", "None", "\n", "\n", "chunk_centroid_x", ",", "chunk_centroid_y", "=", "centroid", "\n", "if", "total_hits", ">", "0", ":", "\n", "            ", "hit_centroid_x", ",", "hit_centroid_y", "=", "hit_centroid_original", "=", "get_centroid", "(", "\n", "X_hit_t", ")", "\n", "\n", "hit_centroid", "=", "np", ".", "array", "(", "[", "[", "hit_centroid_x", ",", "hit_centroid_y", "]", "]", ")", "\n", "X_hit_chunk", "=", "X_hit_t", "-", "hit_centroid", "\n", "\n", "", "if", "total_misses", ">", "0", ":", "\n", "            ", "miss_centroid_x", ",", "miss_centroid_y", "=", "miss_centroid_original", "=", "get_centroid", "(", "\n", "X_miss_t", ")", "\n", "miss_centroid", "=", "np", ".", "array", "(", "[", "[", "miss_centroid_x", ",", "miss_centroid_y", "]", "]", ")", "\n", "if", "total_hits", ">", "0", ":", "\n", "# Prioritise the lidar hit centroid over the miss centroid", "\n", "                ", "X_miss_chunk", "=", "X_miss_t", "-", "hit_centroid", "\n", "", "else", ":", "\n", "# X_miss_chunk = X_miss[bbox_X_miss, :] - miss_centroid", "\n", "                ", "X_miss_chunk", "=", "X_miss_t", "-", "miss_centroid", "\n", "\n", "", "", "if", "total_hits", ">", "0", ":", "\n", "            ", "qhinge_grid_mean_chunk", "=", "qhinge_mean_t", "-", "hit_centroid", "\n", "", "else", ":", "\n", "            ", "qhinge_grid_mean_chunk", "=", "qhinge_mean_t", "-", "miss_centroid", "\n", "\n", "", "", "new_chunk", "=", "Chunk", "(", "X_hit", "=", "X_hit_chunk", ",", "\n", "X_miss", "=", "X_miss_chunk", ",", "\n", "N_hit", "=", "total_hits", ",", "\n", "N_miss", "=", "total_misses", ",", "\n", "y_hit", "=", "y_hit", ",", "\n", "y_miss", "=", "y_miss", ",", "\n", "qw_mean", "=", "qw_mean_t", ",", "\n", "qw_var", "=", "qw_var_t", ",", "\n", "qgamma_mean", "=", "None", ",", "\n", "qgamma_mean_forward", "=", "qgamma_mean_forward_t", ",", "\n", "qgamma_var", "=", "None", ",", "\n", "qhinge_grid_mean", "=", "qhinge_grid_mean_chunk", ",", "\n", "qhinge_grid_var", "=", "None", ",", "\n", "scale_factor", "=", "scale_factor", ",", "\n", "lidar_bearing_original", "=", "bearing_t_deg", ",", "\n", "extraction_centroid_original", "=", "centroid", ",", "\n", "extraction_radius_original", "=", "radius", ",", "\n", "hit_centroid_original", "=", "hit_centroid_original", ",", "\n", "miss_centroid_original", "=", "miss_centroid_original", ")", "\n", "return", "new_chunk", ",", "chunk_centroid_x", ",", "chunk_centroid_y", "\n", "", ""]], "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.kernels.rbf_kernel": [[6, 23], ["numpy.exp", "numpy.concatenate", "math.paired_squared_euclidean", "numpy.ones"], "function", ["home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.math.paired_squared_euclidean"], ["def", "rbf_kernel", "(", "X", ",", "Y", ",", "gamma", ",", "bias", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    rbf features (hinged rbf when Y are grid locations)\n    :param X:\n    :param Y:\n    :param gamma:\n    :param tfdt:\n    :return:\n    \"\"\"", "\n", "batch_size", "=", "X", ".", "shape", "[", "0", "]", "\n", "dist", "=", "np", ".", "exp", "(", "-", "gamma", "*", "paired_squared_euclidean", "(", "X", ",", "Y", ")", ")", "\n", "if", "bias", "is", "False", ":", "\n", "        ", "features", "=", "dist", "\n", "", "else", ":", "\n", "        ", "features", "=", "np", ".", "concatenate", "(", "\n", "[", "np", ".", "ones", "(", "shape", "=", "(", "batch_size", ",", "1", ")", ")", ",", "dist", "]", ",", "axis", "=", "1", ")", "\n", "", "return", "features", "\n", "", ""]], "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.bhm_torch_cpu.BHM2D_PYTORCH.__init__": [[10, 35], ["print", "bhm_torch_cpu.BHM2D_PYTORCH.__calc_grid_auto"], "methods", ["home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.bhm_torch_cpu.BHM2D_PYTORCH.__calc_grid_auto"], ["    ", "def", "__init__", "(", "self", ",", "\n", "gamma", "=", "0.05", ",", "\n", "mu", "=", "None", ",", "\n", "sig", "=", "None", ",", "\n", "grid", "=", "None", ",", "\n", "cell_resolution", "=", "(", "5", ",", "5", ")", ",", "\n", "cell_max_min", "=", "None", ",", "\n", "X", "=", "None", ",", "\n", "nIter", "=", "0", ")", ":", "\n", "        ", "\"\"\"\n        :param gamma: RBF bandwidth\n        :param grid: if there are prespecified locations to hinge the RBF\n        :param cell_resolution: if 'grid' is 'None', resolution to hinge RBFs\n        :param cell_max_min: if 'grid' is 'None', realm of the RBF field\n        :param X: a sample of lidar locations to use when both 'grid' and 'cell_max_min' are 'None'\n        \"\"\"", "\n", "self", ".", "gamma", "=", "gamma", "\n", "self", ".", "mu", "=", "mu", "\n", "self", ".", "sig", "=", "sig", "\n", "if", "grid", "is", "not", "None", ":", "\n", "            ", "self", ".", "grid", "=", "grid", "\n", "", "else", ":", "\n", "            ", "self", ".", "grid", "=", "self", ".", "__calc_grid_auto", "(", "cell_resolution", ",", "cell_max_min", ",", "X", ")", "\n", "", "self", ".", "nIter", "=", "nIter", "\n", "print", "(", "' Number of hinge points={}'", ".", "format", "(", "self", ".", "grid", ".", "shape", "[", "0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.bhm_torch_cpu.BHM2D_PYTORCH.__calc_grid_auto": [[36, 60], ["X.numpy.numpy.numpy", "numpy.meshgrid", "numpy.hstack", "torch.tensor", "numpy.arange", "numpy.arange", "X[].min", "X[].max", "X[].min", "X[].max", "xx.ravel", "yy.ravel"], "methods", ["None"], ["", "def", "__calc_grid_auto", "(", "self", ",", "cell_resolution", ",", "max_min", ",", "X", ")", ":", "\n", "        ", "\"\"\"\n        :param X: a sample of lidar locations\n        :param cell_resolution: resolution to hinge RBFs as (x_resolution, y_resolution)\n        :param max_min: realm of the RBF field as (x_min, x_max, y_min, y_max)\n        :return: numpy array of size (# of RNFs, 2) with grid locations\n        \"\"\"", "\n", "X", "=", "X", ".", "numpy", "(", ")", "\n", "\n", "if", "max_min", "is", "None", ":", "\n", "# if 'max_min' is not given, make a boundarary based on X", "\n", "# assume 'X' contains samples from the entire area", "\n", "            ", "expansion_coef", "=", "1.2", "\n", "x_min", ",", "x_max", "=", "expansion_coef", "*", "X", "[", ":", ",", "0", "]", ".", "min", "(", ")", ",", "expansion_coef", "*", "X", "[", ":", ",", "0", "]", ".", "max", "(", ")", "\n", "y_min", ",", "y_max", "=", "expansion_coef", "*", "X", "[", ":", ",", "1", "]", ".", "min", "(", ")", ",", "expansion_coef", "*", "X", "[", ":", ",", "1", "]", ".", "max", "(", ")", "\n", "", "else", ":", "\n", "            ", "x_min", ",", "x_max", "=", "max_min", "[", "0", "]", ",", "max_min", "[", "1", "]", "\n", "y_min", ",", "y_max", "=", "max_min", "[", "2", "]", ",", "max_min", "[", "3", "]", "\n", "\n", "", "xx", ",", "yy", "=", "np", ".", "meshgrid", "(", "np", ".", "arange", "(", "x_min", ",", "x_max", ",", "cell_resolution", "[", "0", "]", ")", ",", "np", ".", "arange", "(", "y_min", ",", "y_max", ",", "cell_resolution", "[", "1", "]", ")", ")", "\n", "grid", "=", "np", ".", "hstack", "(", "(", "xx", ".", "ravel", "(", ")", "[", ":", ",", "np", ".", "newaxis", "]", ",", "yy", ".", "ravel", "(", ")", "[", ":", ",", "np", ".", "newaxis", "]", ")", ")", "\n", "\n", "return", "pt", ".", "tensor", "(", "grid", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.bhm_torch_cpu.BHM2D_PYTORCH.__sparse_features": [[61, 69], ["sklearn.metrics.pairwise.rbf_kernel", "numpy.hstack", "torch.tensor", "numpy.ones"], "methods", ["home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.kernels.rbf_kernel"], ["", "def", "__sparse_features", "(", "self", ",", "X", ")", ":", "\n", "        ", "\"\"\"\n        :param X: inputs of size (N,2)\n        :return: hinged features with intercept of size (N, # of features + 1)\n        \"\"\"", "\n", "rbf_features", "=", "rbf_kernel", "(", "X", ",", "self", ".", "grid", ",", "gamma", "=", "self", ".", "gamma", ")", "\n", "rbf_features", "=", "np", ".", "hstack", "(", "(", "np", ".", "ones", "(", "X", ".", "shape", "[", "0", "]", ")", "[", ":", ",", "np", ".", "newaxis", "]", ",", "rbf_features", ")", ")", "\n", "return", "pt", ".", "tensor", "(", "rbf_features", ",", "dtype", "=", "pt", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.bhm_torch_cpu.BHM2D_PYTORCH.__calc_posterior": [[70, 85], ["torch.sigmoid", "torch.mm().squeeze", "torch.sum", "torch.mm", "X.t", "X.t"], "methods", ["None"], ["", "def", "__calc_posterior", "(", "self", ",", "X", ",", "y", ",", "epsilon", ",", "mu0", ",", "sig0", ")", ":", "\n", "        ", "\"\"\"\n        :param X: input features\n        :param y: labels\n        :param epsilon: per dimension local linear parameter\n        :param mu0: mean\n        :param sig0: variance\n        :return: new_mean, new_varaiance\n        \"\"\"", "\n", "\n", "logit_inv", "=", "pt", ".", "sigmoid", "(", "epsilon", ")", "\n", "lam", "=", "0.5", "/", "epsilon", "*", "(", "logit_inv", "-", "0.5", ")", "\n", "sig", "=", "1", "/", "(", "1", "/", "sig0", "+", "2", "*", "pt", ".", "sum", "(", "(", "X", ".", "t", "(", ")", "**", "2", ")", "*", "lam", ",", "dim", "=", "1", ")", ")", "\n", "mu", "=", "sig", "*", "(", "mu0", "/", "sig0", "+", "pt", ".", "mm", "(", "X", ".", "t", "(", ")", ",", "y", "-", "0.5", ")", ".", "squeeze", "(", ")", ")", "\n", "return", "mu", ",", "sig", "\n", "\n"]], "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.bhm_torch_cpu.BHM2D_PYTORCH.fit": [[86, 112], ["torch.ones", "range", "bhm_torch_cpu.BHM2D_PYTORCH.__sparse_features", "hasattr", "torch.zeros", "print", "bhm_torch_cpu.BHM2D_PYTORCH.__calc_posterior", "torch.sqrt", "torch.ones", "torch.sum", "bhm_torch_cpu.BHM2D_PYTORCH.mm", "bhm_torch_cpu.BHM2D_PYTORCH.mu.reshape"], "methods", ["home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.bhm_torch_cpu.BHM2D_PYTORCH.__sparse_features", "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.bhm_torch_cpu.BHM2D_PYTORCH.__calc_posterior"], ["", "def", "fit", "(", "self", ",", "X", ",", "y", ",", "X_is_feature_map", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        :param X: raw data\n        :param y: labels\n        :param X_is_feature_map:    Boolean\n                                    If True, then expect a pre-computed feature map\n                                    If False, then compute the features internally\n        \"\"\"", "\n", "if", "X_is_feature_map", "is", "False", ":", "\n", "            ", "X", "=", "self", ".", "__sparse_features", "(", "X", ")", "\n", "\n", "", "N", ",", "D", "=", "X", ".", "shape", "\n", "\n", "self", ".", "epsilon", "=", "pt", ".", "ones", "(", "N", ",", "dtype", "=", "pt", ".", "float32", ")", "\n", "if", "not", "hasattr", "(", "self", ",", "'mu'", ")", ":", "\n", "            ", "self", ".", "mu", "=", "pt", ".", "zeros", "(", "D", ",", "dtype", "=", "pt", ".", "float32", ")", "\n", "self", ".", "sig", "=", "10000", "*", "pt", ".", "ones", "(", "D", ",", "dtype", "=", "pt", ".", "float32", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "self", ".", "nIter", ")", ":", "\n", "            ", "print", "(", "\"  Parameter estimation: iter={}\"", ".", "format", "(", "i", ")", ")", "\n", "\n", "# E-step", "\n", "self", ".", "mu", ",", "self", ".", "sig", "=", "self", ".", "__calc_posterior", "(", "X", ",", "y", ",", "self", ".", "epsilon", ",", "self", ".", "mu", ",", "self", ".", "sig", ")", "\n", "\n", "# M-step", "\n", "self", ".", "epsilon", "=", "pt", ".", "sqrt", "(", "pt", ".", "sum", "(", "(", "X", "**", "2", ")", "*", "self", ".", "sig", ",", "dim", "=", "1", ")", "+", "(", "X", ".", "mm", "(", "self", ".", "mu", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", "**", "2", ")", ".", "squeeze", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.bhm_torch_cpu.BHM2D_PYTORCH.predict": [[113, 125], ["bhm_torch_cpu.BHM2D_PYTORCH.__sparse_features", "bhm_torch_cpu.BHM2D_PYTORCH.mm().squeeze", "torch.sum", "torch.sigmoid", "torch.sqrt", "bhm_torch_cpu.BHM2D_PYTORCH.mm", "bhm_torch_cpu.BHM2D_PYTORCH.mu.reshape"], "methods", ["home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.bhm_torch_cpu.BHM2D_PYTORCH.__sparse_features"], ["", "", "def", "predict", "(", "self", ",", "Xq", ")", ":", "\n", "        ", "\"\"\"\n        :param Xq: raw inquery points\n        :return: mean occupancy (Laplace approximation)\n        \"\"\"", "\n", "Xq", "=", "self", ".", "__sparse_features", "(", "Xq", ")", "\n", "\n", "mu_a", "=", "Xq", ".", "mm", "(", "self", ".", "mu", ".", "reshape", "(", "-", "1", ",", "1", ")", ")", ".", "squeeze", "(", ")", "\n", "sig2_inv_a", "=", "pt", ".", "sum", "(", "(", "Xq", "**", "2", ")", "*", "self", ".", "sig", ",", "dim", "=", "1", ")", "\n", "k", "=", "1.0", "/", "pt", ".", "sqrt", "(", "1", "+", "np", ".", "pi", "*", "sig2_inv_a", "/", "8", ")", "\n", "\n", "return", "pt", ".", "sigmoid", "(", "k", "*", "mu_a", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.bhm_torch_cpu.BHM2D_PYTORCH.predictSampling": [[126, 144], ["bhm_torch_cpu.BHM2D_PYTORCH.__sparse_features", "torch.distributions.MultivariateNormal", "torch.distributions.MultivariateNormal.sample().t", "bhm_torch_cpu.BHM2D_PYTORCH.mm().squeeze", "torch.sigmoid", "torch.std().squeeze", "torch.std().squeeze", "torch.diag", "torch.distributions.MultivariateNormal.sample", "bhm_torch_cpu.BHM2D_PYTORCH.mm", "torch.std", "torch.std"], "methods", ["home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.bhm_torch_cpu.BHM2D_PYTORCH.__sparse_features"], ["", "def", "predictSampling", "(", "self", ",", "Xq", ",", "nSamples", "=", "50", ")", ":", "\n", "        ", "\"\"\"\n        :param Xq: raw inquery points\n        :param nSamples: number of samples to take the average over\n        :return: sample mean and standard deviation of occupancy\n        \"\"\"", "\n", "Xq", "=", "self", ".", "__sparse_features", "(", "Xq", ")", "\n", "\n", "qw", "=", "pt", ".", "distributions", ".", "MultivariateNormal", "(", "self", ".", "mu", ",", "pt", ".", "diag", "(", "self", ".", "sig", ")", ")", "\n", "w", "=", "qw", ".", "sample", "(", "(", "nSamples", ",", ")", ")", ".", "t", "(", ")", "\n", "\n", "mu_a", "=", "Xq", ".", "mm", "(", "w", ")", ".", "squeeze", "(", ")", "\n", "probs", "=", "pt", ".", "sigmoid", "(", "mu_a", ")", "\n", "\n", "mean", "=", "pt", ".", "std", "(", "probs", ",", "dim", "=", "1", ")", ".", "squeeze", "(", ")", "\n", "std", "=", "pt", ".", "std", "(", "probs", ",", "dim", "=", "1", ")", ".", "squeeze", "(", ")", "\n", "\n", "return", "mean", ",", "std", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.transfer_datasets.load_learned_data": [[5, 60], ["os.path.dirname", "os.path.join", "numpy.load", "ValueError"], "function", ["None"], ["def", "load_learned_data", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"\n    -------------------- Keys --------------------\n\n    'X',                    -   Training lidar scan coordinates\n    'Y',                    -   Lidar hit value 0 or 1\n    'Y_q',                  -\n    'X_test',               -   Query locations\n    'Y_test',               -\n    'qw_mean',              -   (M, 1)\n                                Model weight means\n    'qw_var'                -   (M, 1)\n                                Model weight variances\n    'qgamma_mean'           -   (1, M)\n                                Model gamma means\n    'qgamma_mean_forward'   -   (1, M)\n                                Model gamma means with bijection forward pass\n    'qgamma_var'            -   (1, M)\n                                Model gamma variances\n    'qhinge_grid_mean'      -   (M, 2)\n                                Model kernel hinge position means (learned)\n    'qhinge_grid_var'       -   (M, 2)\n                                Model kernel hinge position variances (learned)\n    ----------------------------------------------\n    :param dataset:\n    :return:\n    \"\"\"", "\n", "\n", "if", "dataset", "==", "\"carla_2dtown\"", ":", "# This is the 3 part streaming dataset", "\n", "        ", "filename", "=", "\"carla_2d_town1.npz\"", "\n", "", "elif", "dataset", "==", "\"carla_2dtown_c\"", ":", "# This has the trained kernels (very dense)", "\n", "        ", "filename", "=", "\"carla2dtown_BBVI.npz\"", "\n", "", "elif", "dataset", "==", "\"carla_2dtown1_full\"", ":", "# This is the full 5 part", "\n", "        ", "filename", "=", "\"carla_2d_town1_full.npz\"", "\n", "# carla2d TOWN #1", "\n", "", "elif", "dataset", "==", "\"carla_2dtown1_full_auto\"", ":", "# This is the full 5 part", "\n", "        ", "filename", "=", "\"carla_2d_town1_full_auto.npz\"", "\n", "", "elif", "dataset", "==", "\"carla_2dtown1_full_pt1\"", ":", "# This has the trained kernels", "\n", "        ", "filename", "=", "\"carla2dtown1full_pt1_BBVI.npz\"", "\n", "# carla2d TOWN #2", "\n", "", "elif", "dataset", "==", "\"carla_2dtown2_full_auto\"", ":", "# This is the full 5 part", "\n", "        ", "filename", "=", "\"carla_2d_town2_full_auto.npz\"", "\n", "", "elif", "dataset", "==", "\"carla_2dtown2_full_pt1\"", ":", "# This has the trained kernels", "\n", "        ", "filename", "=", "\"carla2dtown2fullauto_pt1_BBVI.npz\"", "\n", "", "elif", "dataset", "==", "\"carla_2dtown2_full_pt2\"", ":", "# This has the trained kernels", "\n", "        ", "filename", "=", "\"carla2dtown2fullauto_pt2_BBVI.npz\"", "\n", "", "else", ":", "\n", "        ", "raise", "ValueError", "(", "\"Hey! Invalid dataset name :(\"", ")", "\n", "", "this_file_path", "=", "os", ".", "path", ".", "dirname", "(", "__file__", ")", "\n", "dataset_path", "=", "os", ".", "path", ".", "join", "(", "this_file_path", ",", "\n", "\"..\"", ",", "\n", "\"datasets\"", ",", "\n", "filename", ")", "\n", "data", "=", "np", ".", "load", "(", "dataset_path", ")", "\n", "return", "data", "\n", "", ""]], "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.geometric_masks.sector": [[5, 33], ["numpy.deg2rad", "numpy.arctan2"], "function", ["None"], ["def", "sector", "(", "points", ",", "centre", ",", "radius", ",", "angle_range", ")", ":", "\n", "    ", "\"\"\"\n    Return a boolean mask for a circular sector. The start/stop angles in\n    `angle_range` should be given in clockwise order.\n\n    adapted from ref: https://stackoverflow.com/a/18354475\n    :param points:\n    :param centre:\n    :param radius:\n    :param angle_range:  (start, stop)\n    :return:\n    \"\"\"", "\n", "x", ",", "y", "=", "points", "[", ":", ",", "0", "]", ",", "points", "[", ":", ",", "1", "]", "\n", "cx", ",", "cy", "=", "centre", "\n", "tmin", ",", "tmax", "=", "np", ".", "deg2rad", "(", "angle_range", ")", "\n", "# ensure stop angle > start angle", "\n", "if", "tmax", "<", "tmin", ":", "\n", "        ", "tmax", "+=", "2", "*", "np", ".", "pi", "\n", "# convert cartesian --> polar coordinates", "\n", "", "r2", "=", "(", "x", "-", "cx", ")", "*", "(", "x", "-", "cx", ")", "+", "(", "y", "-", "cy", ")", "*", "(", "y", "-", "cy", ")", "\n", "theta", "=", "np", ".", "arctan2", "(", "x", "-", "cx", ",", "y", "-", "cy", ")", "-", "tmin", "\n", "# wrap angles between 0 and 2*pi", "\n", "theta", "%=", "(", "2", "*", "np", ".", "pi", ")", "\n", "# circular mask", "\n", "circmask", "=", "r2", "<=", "radius", "*", "radius", "\n", "# angular mask", "\n", "anglemask", "=", "theta", "<=", "(", "tmax", "-", "tmin", ")", "\n", "return", "circmask", "*", "anglemask", "\n", "\n"]], "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.geometric_masks.uniform_in_rectangle": [[35, 42], ["numpy.array", "numpy.random.uniform", "math.rot_matrix", "numpy.dot", "numpy.random.choice"], "function", ["home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.math.rot_matrix"], ["", "def", "uniform_in_rectangle", "(", "origin", "=", "np", ".", "array", "(", "[", "[", "0.0", ",", "0.0", "]", "]", ")", ",", "length", "=", "10.0", ",", "\n", "height", "=", "10.0", ",", "\n", "cw_deg", "=", "0.0", ",", "N", "=", "100", ")", ":", "\n", "    ", "pts", "=", "np", ".", "random", ".", "uniform", "(", "(", "0.0", ",", "0.0", ")", ",", "(", "length", ",", "height", ")", ",", "size", "=", "(", "N", ",", "2", ")", ")", "\n", "R", "=", "rot_matrix", "(", "cw_deg", ")", "\n", "pts", "=", "pts", "[", "np", ".", "random", ".", "choice", "(", "pts", ".", "shape", "[", "0", "]", ",", "N", ",", "replace", "=", "False", ")", "]", "\n", "return", "origin", "+", "np", ".", "dot", "(", "pts", ",", "R", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.geometric_masks.uniform_on_rectangle": [[44, 55], ["numpy.array", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.random.uniform", "numpy.concatenate", "math.rot_matrix", "numpy.dot", "numpy.random.choice"], "function", ["home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.math.rot_matrix"], ["", "def", "uniform_on_rectangle", "(", "origin", "=", "np", ".", "array", "(", "[", "[", "0.0", ",", "0.0", "]", "]", ")", ",", "length", "=", "10.0", ",", "\n", "height", "=", "10.0", ",", "\n", "cw_deg", "=", "0.0", ",", "N", "=", "100", ")", ":", "\n", "    ", "pts_N", "=", "np", ".", "random", ".", "uniform", "(", "(", "0.0", ",", "height", ")", ",", "(", "length", ",", "height", ")", ",", "size", "=", "(", "N", ",", "2", ")", ")", "\n", "pts_S", "=", "np", ".", "random", ".", "uniform", "(", "(", "0.0", ",", "0.0", ")", ",", "(", "length", ",", "0.0", ")", ",", "size", "=", "(", "N", ",", "2", ")", ")", "\n", "pts_E", "=", "np", ".", "random", ".", "uniform", "(", "(", "length", ",", "0.0", ")", ",", "(", "length", ",", "height", ")", ",", "size", "=", "(", "N", ",", "2", ")", ")", "\n", "pts_W", "=", "np", ".", "random", ".", "uniform", "(", "(", "0.0", ",", "0.0", ")", ",", "(", "0.0", ",", "height", ")", ",", "size", "=", "(", "N", ",", "2", ")", ")", "\n", "pts", "=", "np", ".", "concatenate", "(", "[", "pts_N", ",", "pts_E", ",", "pts_S", ",", "pts_W", "]", ")", "\n", "R", "=", "rot_matrix", "(", "cw_deg", ")", "\n", "pts", "=", "pts", "[", "np", ".", "random", ".", "choice", "(", "pts", ".", "shape", "[", "0", "]", ",", "N", ",", "replace", "=", "False", ")", "]", "\n", "return", "origin", "+", "np", ".", "dot", "(", "pts", ",", "R", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.geometric_masks.bounding_box_2D": [[57, 87], ["numpy.logical_and", "numpy.logical_and", "numpy.logical_and"], "function", ["None"], ["", "def", "bounding_box_2D", "(", "points", ",", "\n", "min_x", "=", "-", "np", ".", "inf", ",", "max_x", "=", "np", ".", "inf", ",", "\n", "min_y", "=", "-", "np", ".", "inf", ",", "max_y", "=", "np", ".", "inf", ")", ":", "\n", "    ", "\"\"\" Compute a bounding_box filter on the given points\n\n    Parameters\n    ----------\n    points: (n,2) array\n        The array containing all the points's coordinates. Expected format:\n            array([\n                [x1,y1],\n                ...,\n                [xn,yn]])\n\n    min_i, max_i: float\n        The bounding box limits for each coordinate. If some limits are missing,\n        the default values are -infinite for the min_i and infinite for the max_i.\n\n    Returns\n    -------\n    bb_filter : boolean array\n        The boolean mask indicating wherever a point should be kept or not.\n        The size of the boolean mask will be the same as the number of given points.\n\n    Ref: https://github.com/daavoo/pyntcloud\n    \"\"\"", "\n", "bound_x", "=", "np", ".", "logical_and", "(", "points", "[", ":", ",", "0", "]", ">", "min_x", ",", "points", "[", ":", ",", "0", "]", "<", "max_x", ")", "\n", "bound_y", "=", "np", ".", "logical_and", "(", "points", "[", ":", ",", "1", "]", ">", "min_y", ",", "points", "[", ":", ",", "1", "]", "<", "max_y", ")", "\n", "bb_filter", "=", "np", ".", "logical_and", "(", "bound_x", ",", "bound_y", ")", "\n", "return", "bb_filter", "\n", "\n"]], "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.geometric_masks.bounding_circle_2D": [[89, 95], ["numpy.linalg.norm"], "function", ["None"], ["", "def", "bounding_circle_2D", "(", "points", ",", "\n", "radius", ",", "\n", "centre", ")", ":", "\n", "    ", "dists", "=", "np", ".", "linalg", ".", "norm", "(", "points", "-", "centre", ",", "axis", "=", "1", ")", "\n", "mask", "=", "(", "dists", "<=", "radius", ")", "\n", "return", "mask", "\n", "", ""]], "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.random.random_choice_idxs": [[3, 6], ["numpy.minimum", "numpy.random.choice"], "function", ["None"], ["def", "random_choice_idxs", "(", "input", ",", "N", ",", "axis", "=", "0", ")", ":", "\n", "    ", "N", "=", "np", ".", "minimum", "(", "input", ".", "shape", "[", "axis", "]", ",", "N", ")", "\n", "return", "np", ".", "random", ".", "choice", "(", "input", ".", "shape", "[", "axis", "]", ",", "N", ",", "replace", "=", "False", ")", "", "", ""]], "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.geometry.is_in_hull": [[3, 23], ["numpy.transpose", "numpy.all", "numpy.array", "numpy.tile", "numpy.transpose", "len"], "function", ["None"], ["def", "is_in_hull", "(", "P", ",", "hull", ")", ":", "\n", "    ", "\"\"\"\n    Determine if the list of points P lies inside the hull\n\n    Here we use the equations of the plan to determine if the point is outside the hull.\n    We never build the Delaunay object.\n    This function takes as input P, a (m,n) array of m points in n dimensions. The hull is constrcuted using\n\n    ref: https://stackoverflow.com/a/52405173\n    :param P:\n    :param hull:\n    :return: list\n             List of boolean where true means that the point is inside the convex hull\n    \"\"\"", "\n", "\n", "A", "=", "hull", ".", "equations", "[", ":", ",", "0", ":", "-", "1", "]", "\n", "b", "=", "np", ".", "transpose", "(", "np", ".", "array", "(", "[", "hull", ".", "equations", "[", ":", ",", "-", "1", "]", "]", ")", ")", "\n", "in_hull_mask", "=", "np", ".", "all", "(", "(", "A", "@", "np", ".", "transpose", "(", "P", ")", ")", "<=", "np", ".", "tile", "(", "-", "b", ",", "(", "1", ",", "len", "(", "P", ")", ")", ")", ",", "\n", "axis", "=", "0", ")", "\n", "return", "in_hull_mask", "", "", ""]], "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.util.read_txy_csv": [[7, 12], ["util.readCsvFile"], "function", ["home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.util.readCsvFile"], ["def", "read_txy_csv", "(", "fn", ")", ":", "\n", "   ", "data", "=", "readCsvFile", "(", "fn", ")", "\n", "Xtest", "=", "data", "[", ":", ",", ":", "3", "]", "\n", "Ytest", "=", "data", "[", ":", ",", "3", "]", "[", ":", ",", "np", ".", "newaxis", "]", "\n", "return", "Xtest", ",", "Ytest", "\n", "\n"]], "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.util.readCsvFile": [[14, 20], ["csv.reader", "numpy.array", "open", "dataList.append", "float"], "function", ["None"], ["", "def", "readCsvFile", "(", "fileName", ")", ":", "\n", "    ", "reader", "=", "csv", ".", "reader", "(", "open", "(", "fileName", ",", "'r'", ")", ")", "\n", "dataList", "=", "[", "]", "\n", "for", "row", "in", "reader", ":", "\n", "        ", "dataList", ".", "append", "(", "[", "float", "(", "elem", ")", "for", "elem", "in", "row", "]", ")", "\n", "", "return", "np", ".", "array", "(", "dataList", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.util.entropy": [[21, 24], ["numpy.sum", "numpy.log2"], "function", ["None"], ["", "def", "entropy", "(", "x", ")", ":", "\n", "    ", "x", "[", "x", "<", "sys", ".", "max_info", ".", "min", "]", "=", "sys", ".", "max_info", ".", "min", "\n", "return", "-", "1", "*", "np", ".", "sum", "(", "x", "*", "np", ".", "log2", "(", "x", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.util.cross_entropy": [[25, 32], ["scipy.maximum", "scipy.minimum", "scipy.log", "scipy.subtract", "scipy.log", "scipy.subtract"], "function", ["None"], ["", "def", "cross_entropy", "(", "act", ",", "pred", ")", ":", "\n", "#negative log-loss sklearn", "\n", "    ", "epsilon", "=", "1e-15", "\n", "pred", "=", "sp", ".", "maximum", "(", "epsilon", ",", "pred", ")", "\n", "pred", "=", "sp", ".", "minimum", "(", "1", "-", "epsilon", ",", "pred", ")", "\n", "ll", "=", "act", "*", "sp", ".", "log", "(", "pred", ")", "+", "sp", ".", "subtract", "(", "1", ",", "act", ")", "*", "sp", ".", "log", "(", "sp", ".", "subtract", "(", "1", ",", "pred", ")", ")", "\n", "return", "-", "ll", "\n", "\n"]], "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.util.neg_ms_log_loss": [[33, 43], ["numpy.finfo", "numpy.log"], "function", ["None"], ["", "def", "neg_ms_log_loss", "(", "true_labels", ",", "predicted_mean", ",", "predicted_var", ")", ":", "\n", "    ", "\"\"\"\n    :param true_labels:\n    :param predicted_mean:\n    :param predicted_var:\n    :return: Neg mean squared log loss (neg the better)\n    \"\"\"", "\n", "\n", "predicted_var", "+=", "np", ".", "finfo", "(", "float", ")", ".", "eps", "#to avoid /0 and log(0)", "\n", "smse", "=", "0.5", "*", "np", ".", "log", "(", "2", "*", "np", ".", "pi", "*", "predicted_var", ")", "+", "(", "(", "predicted_mean", "-", "predicted_var", ")", "**", "2", ")", "/", "(", "2", "*", "predicted_var", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.util.calc_scores": [[66, 89], ["numpy.int_", "numpy.round", "numpy.round", "numpy.round", "print", "sklearn.metrics.accuracy_score", "sklearn.metrics.roc_auc_score", "sklearn.metrics.log_loss", "numpy.round", "true.ravel", "np.int_.ravel", "true.ravel", "predicted.ravel", "true.ravel", "predicted.ravel", "util.neg_ms_log_loss", "open", "numpy.savetxt", "predicted[].ravel", "predicted_var.ravel", "numpy.array"], "function", ["home.repos.pwc.inspect_result.MushroomHunting_RSS2020-online-domain-adaptation-pot.hotpot.util.neg_ms_log_loss"], ["", "", "def", "calc_scores", "(", "mdl_name", ",", "true", ",", "predicted", ",", "predicted_var", "=", "None", ",", "time_taken", "=", "-", "11", ",", "N_points", "=", "0", ",", "do_return", "=", "False", ",", "save_report", "=", "True", ")", ":", "\n", "   ", "fn", "=", "'output/reports/'", "+", "mdl_name", "+", "'.csv'", "\n", "\n", "predicted_binarized", "=", "np", ".", "int_", "(", "predicted", ">=", "0.5", ")", "\n", "accuracy", "=", "np", ".", "round", "(", "metrics", ".", "accuracy_score", "(", "true", ".", "ravel", "(", ")", ",", "predicted_binarized", ".", "ravel", "(", ")", ")", ",", "3", ")", "\n", "\n", "auc", "=", "np", ".", "round", "(", "metrics", ".", "roc_auc_score", "(", "true", ".", "ravel", "(", ")", ",", "predicted", ".", "ravel", "(", ")", ")", ",", "3", ")", "\n", "\n", "nll", "=", "np", ".", "round", "(", "metrics", ".", "log_loss", "(", "true", ".", "ravel", "(", ")", ",", "predicted", ".", "ravel", "(", ")", ")", ",", "3", ")", "\n", "\n", "if", "predicted_var", "is", "not", "None", ":", "\n", "      ", "neg_smse", "=", "np", ".", "round", "(", "neg_ms_log_loss", "(", "true", ",", "predicted", "[", "0", "]", ".", "ravel", "(", ")", ",", "predicted_var", ".", "ravel", "(", ")", ")", ",", "3", ")", "\n", "", "else", ":", "\n", "      ", "neg_smse", "=", "-", "11", "\n", "\n", "", "print", "(", "mdl_name", "+", "': accuracy={}, auc={}, nll={}, smse={}, time_taken={}'", ".", "format", "(", "accuracy", ",", "auc", ",", "nll", ",", "neg_smse", ",", "time_taken", ")", ")", "\n", "#print(metrics.confusion_matrix(true.ravel(), predicted_binarized.ravel()))", "\n", "if", "save_report", "is", "True", ":", "\n", "       ", "with", "open", "(", "fn", ",", "'ab'", ")", "as", "f_handle", ":", "#try 'a'", "\n", "#np.savetxt(f_handle, np.array([[neg_smse]]), delimiter=',', fmt=\"%.3f\")", "\n", "          ", "np", ".", "savetxt", "(", "f_handle", ",", "np", ".", "array", "(", "[", "[", "accuracy", ",", "auc", ",", "nll", ",", "neg_smse", ",", "time_taken", ",", "N_points", "]", "]", ")", ",", "delimiter", "=", "','", ",", "fmt", "=", "\"%.3f\"", ")", "\n", "", "", "if", "do_return", ":", "\n", "       ", "return", "accuracy", ",", "auc", ",", "nll", "\n", "", "", ""]]}