{"home.repos.pwc.inspect_result.bird-tao_clcrn.None.train_clcrn.main": [[16, 30], ["open", "yaml.load", "path.mkdir", "os.path.join", "supervisor.Supervisor", "supervisor.Supervisor.train", "supervisor.Supervisor._test_final_n_epoch", "pathlib.Path", "open", "json.dump"], "function", ["home.repos.pwc.inspect_result.bird-tao_clcrn.None.supervisor.Supervisor.train", "home.repos.pwc.inspect_result.bird-tao_clcrn.None.supervisor.Supervisor._test_final_n_epoch"], ["def", "main", "(", "args", ")", ":", "\n", "\n", "    ", "with", "open", "(", "args", ".", "config_filename", ")", "as", "f", ":", "\n", "        ", "supervisor_config", "=", "yaml", ".", "load", "(", "f", ")", "\n", "path", "=", "Path", "(", "supervisor_config", "[", "'train'", "]", "[", "'log_dir'", "]", ")", "/", "supervisor_config", "[", "'train'", "]", "[", "'experiment_name'", "]", "\n", "path", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "\n", "sv_param", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'model_param.json'", ")", "\n", "with", "open", "(", "sv_param", ",", "'w'", ")", "as", "file_obj", ":", "\n", "            ", "json", ".", "dump", "(", "supervisor_config", ",", "file_obj", ")", "\n", "", "supervisor", "=", "Supervisor", "(", "**", "supervisor_config", ")", "\n", "\n", "supervisor", ".", "train", "(", ")", "\n", "supervisor", ".", "_test_final_n_epoch", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.None.train_clcrn.SetSeed": [[32, 41], ["torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "numpy.random.seed"], "function", ["None"], ["", "", "def", "SetSeed", "(", "seed", ")", ":", "\n", "    ", "\"\"\"function used to set a random seed\n    Arguments:\n        seed {int} -- seed number, will set to torch and numpy\n    \"\"\"", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.None.supervisor.Supervisor.__init__": [[21, 97], ["kwargs.get", "kwargs.get", "kwargs.get", "torch.device", "supervisor.Supervisor._train_kwargs.get", "supervisor.Supervisor._train_kwargs.get", "supervisor.Supervisor._get_log_dir", "supervisor.Supervisor._model_kwargs.get", "supervisor.Supervisor._kwargs.get", "lib.utils.get_logger", "experiments.dataloader.load_dataset", "torch.from_numpy().long().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "int", "int", "int", "int", "bool", "int", "model.baselines.attention.ATTModel.baselines.attention.ATTModel.to", "supervisor.Supervisor._logger.info", "supervisor.Supervisor._train_kwargs.get", "supervisor.Supervisor._model_kwargs.get", "supervisor.Supervisor._model_kwargs.get", "supervisor.Supervisor._model_kwargs.get", "supervisor.Supervisor._model_kwargs.get", "supervisor.Supervisor._model_kwargs.get", "supervisor.Supervisor._model_kwargs.get", "model.baselines.attention.ATTModel.clcnn.CLCRNModel", "supervisor.Supervisor.load_model", "torch.cuda.is_available", "torch.from_numpy().long", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "model.baselines.attention.ATTModel.clcnn.CLCSTNModel", "kwargs.get", "model.baselines.attention.ATTModel.baselines.recurrent.RNNModel", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "model.baselines.attention.ATTModel.baselines.attention.ATTModel", "print", "exit"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.None.supervisor.Supervisor._get_log_dir", "home.repos.pwc.inspect_result.bird-tao_clcrn.lib.utils.get_logger", "home.repos.pwc.inspect_result.bird-tao_clcrn.experiments.dataloader.load_dataset", "home.repos.pwc.inspect_result.bird-tao_clcrn.None.supervisor.Supervisor.load_model"], ["    ", "def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "self", ".", "_kwargs", "=", "kwargs", "\n", "self", ".", "_data_kwargs", "=", "kwargs", ".", "get", "(", "'data'", ")", "\n", "self", ".", "_model_kwargs", "=", "kwargs", ".", "get", "(", "'model'", ")", "\n", "self", ".", "_train_kwargs", "=", "kwargs", ".", "get", "(", "'train'", ")", "\n", "self", ".", "_device", "=", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "kwargs", ".", "get", "(", "'gpu'", ")", ")", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "\"cpu\"", ")", "\n", "\n", "self", ".", "max_grad_norm", "=", "self", ".", "_train_kwargs", ".", "get", "(", "'max_grad_norm'", ",", "1.", ")", "\n", "\n", "# logging.", "\n", "self", ".", "_experiment_name", "=", "self", ".", "_train_kwargs", ".", "get", "(", "'experiment_name'", ")", "\n", "self", ".", "_log_dir", "=", "self", ".", "_get_log_dir", "(", "self", ",", "kwargs", ")", "\n", "\n", "self", ".", "_model_name", "=", "self", ".", "_model_kwargs", ".", "get", "(", "'model_name'", ")", "\n", "\n", "log_level", "=", "self", ".", "_kwargs", ".", "get", "(", "'log_level'", ",", "'INFO'", ")", "\n", "self", ".", "_logger", "=", "utils", ".", "get_logger", "(", "self", ".", "_log_dir", ",", "__name__", ",", "'info.log'", ",", "level", "=", "log_level", ")", "\n", "\n", "self", ".", "_data", "=", "dataloader", ".", "load_dataset", "(", "**", "self", ".", "_data_kwargs", ")", "\n", "\n", "self", ".", "standard_scaler", "=", "self", ".", "_data", "[", "'scaler'", "]", "\n", "self", ".", "sparse_idx", "=", "torch", ".", "from_numpy", "(", "self", ".", "_data", "[", "'kernel_info'", "]", "[", "'sparse_idx'", "]", ")", ".", "long", "(", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "self", ".", "location_info", "=", "torch", ".", "from_numpy", "(", "self", ".", "_data", "[", "'kernel_info'", "]", "[", "'MLP_inputs'", "]", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "self", ".", "geodesic", "=", "torch", ".", "from_numpy", "(", "self", ".", "_data", "[", "'kernel_info'", "]", "[", "'geodesic'", "]", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "self", ".", "angle_ratio", "=", "torch", ".", "from_numpy", "(", "self", ".", "_data", "[", "'kernel_info'", "]", "[", "'angle_ratio'", "]", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "\n", "self", ".", "num_nodes", "=", "int", "(", "self", ".", "_model_kwargs", ".", "get", "(", "'num_nodes'", ",", "1", ")", ")", "\n", "self", ".", "input_dim", "=", "int", "(", "self", ".", "_model_kwargs", ".", "get", "(", "'input_dim'", ",", "1", ")", ")", "\n", "self", ".", "seq_len", "=", "int", "(", "self", ".", "_model_kwargs", ".", "get", "(", "'seq_len'", ")", ")", "# for the encoder", "\n", "self", ".", "output_dim", "=", "int", "(", "self", ".", "_model_kwargs", ".", "get", "(", "'output_dim'", ",", "1", ")", ")", "\n", "self", ".", "use_curriculum_learning", "=", "bool", "(", "\n", "self", ".", "_model_kwargs", ".", "get", "(", "'use_curriculum_learning'", ",", "False", ")", "\n", ")", "\n", "self", ".", "horizon", "=", "int", "(", "self", ".", "_model_kwargs", ".", "get", "(", "'horizon'", ",", "1", ")", ")", "# for the decoder", "\n", "# setup model", "\n", "if", "self", ".", "_model_name", "==", "'CLCRN'", ":", "\n", "            ", "model", "=", "CLCRNModel", "(", "\n", "self", ".", "location_info", ",", "\n", "self", ".", "sparse_idx", ",", "\n", "self", ".", "geodesic", ",", "\n", "self", ".", "angle_ratio", ",", "\n", "logger", "=", "self", ".", "_logger", ",", "\n", "**", "self", ".", "_model_kwargs", "\n", ")", "\n", "", "elif", "self", ".", "_model_name", "==", "'CLCSTN'", ":", "\n", "            ", "model", "=", "CLCSTNModel", "(", "\n", "self", ".", "location_info", ",", "\n", "self", ".", "sparse_idx", ",", "\n", "self", ".", "geodesic", ",", "\n", "self", ".", "angle_ratio", ",", "\n", "logger", "=", "self", ".", "_logger", ",", "\n", "**", "self", ".", "_model_kwargs", "\n", ")", "\n", "", "elif", "self", ".", "_model_name", "in", "[", "'DCRNN'", ",", "'GConvGRU'", ",", "'AGCRN'", ",", "'TGCN'", "]", ":", "\n", "            ", "model", "=", "RNNModel", "(", "\n", "sparse_idx", "=", "self", ".", "sparse_idx", ",", "\n", "conv_method", "=", "self", ".", "_model_name", ",", "\n", "logger", "=", "self", ".", "_logger", ",", "\n", "**", "self", ".", "_model_kwargs", "\n", ")", "\n", "", "elif", "self", ".", "_model_name", "in", "[", "'ASTGCN'", ",", "'MSTGCN'", ",", "'STGCN'", "]", ":", "\n", "            ", "model", "=", "ATTModel", "(", "\n", "sparse_idx", "=", "self", ".", "sparse_idx", ",", "\n", "attention_method", "=", "self", ".", "_model_name", ",", "\n", "logger", "=", "self", ".", "_logger", ",", "\n", "**", "self", ".", "_model_kwargs", "\n", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'The method is not provided.'", ")", "\n", "exit", "(", ")", "\n", "", "self", ".", "model", "=", "model", ".", "to", "(", "self", ".", "_device", ")", "\n", "self", ".", "_logger", ".", "info", "(", "\"Model created\"", ")", "\n", "\n", "self", ".", "_epoch_num", "=", "self", ".", "_train_kwargs", ".", "get", "(", "'epoch'", ",", "0", ")", "\n", "if", "self", ".", "_epoch_num", ">", "0", ":", "\n", "            ", "self", ".", "load_model", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.None.supervisor.Supervisor._get_log_dir": [[98, 104], ["pathlib.Path", "os.path.exists", "os.makedirs", "kwargs[].get"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.None.supervisor.exists"], ["", "", "@", "staticmethod", "\n", "def", "_get_log_dir", "(", "self", ",", "kwargs", ")", ":", "\n", "        ", "log_dir", "=", "Path", "(", "kwargs", "[", "'train'", "]", ".", "get", "(", "'log_dir'", ")", ")", "/", "self", ".", "_experiment_name", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "log_dir", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "log_dir", ")", "\n", "", "return", "log_dir", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.None.supervisor.Supervisor.save_model": [[105, 117], ["dict", "supervisor.Supervisor.model.state_dict", "torch.save", "supervisor.Supervisor._logger.info", "pathlib.Path", "os.path.exists", "os.makedirs"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.None.supervisor.exists"], ["", "def", "save_model", "(", "self", ",", "epoch", ")", ":", "\n", "\n", "        ", "model_path", "=", "Path", "(", "self", ".", "_log_dir", ")", "/", "'saved_model'", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "model_path", ")", ":", "\n", "            ", "os", ".", "makedirs", "(", "model_path", ")", "\n", "\n", "", "config", "=", "dict", "(", "self", ".", "_kwargs", ")", "\n", "config", "[", "'model_state_dict'", "]", "=", "self", ".", "model", ".", "state_dict", "(", ")", "\n", "config", "[", "'epoch'", "]", "=", "epoch", "\n", "torch", ".", "save", "(", "config", ",", "model_path", "/", "(", "'epo%d.tar'", "%", "epoch", ")", ")", "\n", "self", ".", "_logger", ".", "info", "(", "\"Saved model at {}\"", ".", "format", "(", "epoch", ")", ")", "\n", "return", "'models/epo%d.tar'", "%", "epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.None.supervisor.Supervisor.load_model": [[118, 126], ["supervisor.Supervisor._setup_graph", "os.path.exists", "torch.load", "supervisor.Supervisor.model.load_state_dict", "supervisor.Supervisor._logger.info", "pathlib.Path"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.None.supervisor.Supervisor._setup_graph", "home.repos.pwc.inspect_result.bird-tao_clcrn.None.supervisor.exists"], ["", "def", "load_model", "(", "self", ",", "epoch_num", ")", ":", "\n", "\n", "        ", "self", ".", "_setup_graph", "(", ")", "\n", "model_path", "=", "Path", "(", "self", ".", "_log_dir", ")", "/", "'saved_model'", "\n", "assert", "os", ".", "path", ".", "exists", "(", "model_path", "/", "(", "'epo%d.tar'", "%", "epoch_num", ")", ")", ",", "'Weights at epoch %d not found'", "%", "epoch_num", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_path", "/", "(", "'epo%d.tar'", "%", "epoch_num", ")", ",", "map_location", "=", "'cpu'", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "checkpoint", "[", "'model_state_dict'", "]", ")", "\n", "self", ".", "_logger", ".", "info", "(", "\"Loaded model at {}\"", ".", "format", "(", "epoch_num", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.None.supervisor.Supervisor._setup_graph": [[127, 137], ["torch.no_grad", "supervisor.Supervisor.model.eval", "enumerate", "supervisor.Supervisor._prepare_data", "supervisor.Supervisor.model"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.None.supervisor.Supervisor._prepare_data"], ["", "def", "_setup_graph", "(", "self", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "model", "=", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "val_iterator", "=", "self", ".", "_data", "[", "'val_loader'", "]", "\n", "\n", "for", "_", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "val_iterator", ")", ":", "\n", "                ", "x", ",", "y", "=", "self", ".", "_prepare_data", "(", "x", ",", "y", ")", "\n", "output", "=", "self", ".", "model", "(", "x", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.None.supervisor.Supervisor.train": [[138, 141], ["kwargs.update", "supervisor.Supervisor._train"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.None.supervisor.Supervisor._train"], ["", "", "", "def", "train", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "kwargs", ".", "update", "(", "self", ".", "_train_kwargs", ")", "\n", "return", "self", ".", "_train", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.None.supervisor.Supervisor.evaluate": [[142, 185], ["supervisor.Supervisor.load_model", "torch.no_grad", "supervisor.Supervisor.model.eval", "enumerate", "numpy.mean", "torch.cat", "torch.cat", "MAE_metric().item", "MSE_metric().item", "MAPE_metric().item", "supervisor.exists", "supervisor.Supervisor._prepare_data", "supervisor.Supervisor.model", "supervisor.Supervisor._compute_loss", "losses.append", "torch.cat.append", "torch.cat.append", "loss.item", "y_true.cpu", "y_pred.cpu", "MAE_metric", "MSE_metric", "MAPE_metric", "MAE_metric().item", "MSE_metric().sqrt().item", "MAPE_metric().item", "MAE_metric", "MSE_metric().sqrt", "MAPE_metric", "MSE_metric"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.None.supervisor.Supervisor.load_model", "home.repos.pwc.inspect_result.bird-tao_clcrn.None.supervisor.exists", "home.repos.pwc.inspect_result.bird-tao_clcrn.None.supervisor.Supervisor._prepare_data", "home.repos.pwc.inspect_result.bird-tao_clcrn.None.supervisor.Supervisor._compute_loss"], ["", "def", "evaluate", "(", "self", ",", "dataset", ",", "batches_seen", ",", "epoch_num", ",", "load_model", "=", "False", ",", "steps", "=", "None", ")", ":", "\n", "\n", "        ", "if", "load_model", "==", "True", ":", "\n", "            ", "self", ".", "load_model", "(", "epoch_num", ")", "\n", "\n", "", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "model", "=", "self", ".", "model", ".", "eval", "(", ")", "\n", "\n", "val_iterator", "=", "self", ".", "_data", "[", "'{}_loader'", ".", "format", "(", "dataset", ")", "]", "\n", "losses", "=", "[", "]", "\n", "y_truths", "=", "[", "]", "\n", "y_preds", "=", "[", "]", "\n", "\n", "MAE_metric", "=", "masked_mae_loss", "\n", "MSE_metric", "=", "masked_mse_loss", "\n", "MAPE_metric", "=", "masked_mape_loss", "\n", "for", "_", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "val_iterator", ")", ":", "\n", "                ", "x", ",", "y", "=", "self", ".", "_prepare_data", "(", "x", ",", "y", ")", "\n", "output", "=", "self", ".", "model", "(", "x", ")", "\n", "loss", ",", "y_true", ",", "y_pred", "=", "self", ".", "_compute_loss", "(", "y", ",", "output", ")", "\n", "losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "y_truths", ".", "append", "(", "y_true", ".", "cpu", "(", ")", ")", "\n", "y_preds", ".", "append", "(", "y_pred", ".", "cpu", "(", ")", ")", "\n", "\n", "", "mean_loss", "=", "np", ".", "mean", "(", "losses", ")", "\n", "y_preds", "=", "torch", ".", "cat", "(", "y_preds", ",", "dim", "=", "1", ")", "\n", "y_truths", "=", "torch", ".", "cat", "(", "y_truths", ",", "dim", "=", "1", ")", "\n", "\n", "loss_mae", "=", "MAE_metric", "(", "y_preds", ",", "y_truths", ")", ".", "item", "(", ")", "\n", "loss_mse", "=", "MSE_metric", "(", "y_preds", ",", "y_truths", ")", ".", "item", "(", ")", "\n", "loss_mape", "=", "MAPE_metric", "(", "y_preds", ",", "y_truths", ")", ".", "item", "(", ")", "\n", "dict_out", "=", "{", "'prediction'", ":", "y_preds", ",", "'truth'", ":", "y_truths", "}", "\n", "dict_metrics", "=", "{", "}", "\n", "if", "exists", "(", "steps", ")", ":", "\n", "                ", "for", "step", "in", "steps", ":", "\n", "                    ", "assert", "(", "step", "<=", "y_preds", ".", "shape", "[", "0", "]", ")", ",", "(", "'the largest step is should smaller than prediction horizon!!!'", ")", "\n", "y_p", "=", "y_preds", "[", ":", "step", ",", "...", "]", "\n", "y_t", "=", "y_truths", "[", ":", "step", ",", "...", "]", "\n", "dict_metrics", "[", "'mae_{}'", ".", "format", "(", "step", ")", "]", "=", "MAE_metric", "(", "y_p", ",", "y_t", ")", ".", "item", "(", ")", "\n", "dict_metrics", "[", "'rmse_{}'", ".", "format", "(", "step", ")", "]", "=", "MSE_metric", "(", "y_p", ",", "y_t", ")", ".", "sqrt", "(", ")", ".", "item", "(", ")", "\n", "dict_metrics", "[", "'mape_{}'", ".", "format", "(", "step", ")", "]", "=", "MAPE_metric", "(", "y_p", ",", "y_t", ")", ".", "item", "(", ")", "\n", "\n", "", "", "return", "loss_mae", ",", "loss_mse", ",", "loss_mape", ",", "dict_out", ",", "dict_metrics", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.None.supervisor.Supervisor._train": [[186, 281], ["float", "torch.optim.Adam", "torch.optim.lr_scheduler.MultiStepLR", "supervisor.Supervisor._logger.info", "len", "supervisor.Supervisor._logger.info", "range", "supervisor.Supervisor.model.parameters", "supervisor.Supervisor.model.train", "time.time", "tqdm.tqdm.tqdm", "enumerate", "supervisor.Supervisor._logger.info", "torch.optim.lr_scheduler.MultiStepLR.step", "supervisor.Supervisor._logger.info", "supervisor.Supervisor.evaluate", "time.time", "torch.optim.Adam.zero_grad", "supervisor.Supervisor._prepare_data", "supervisor.Supervisor.model", "supervisor.Supervisor._compute_loss", "tqdm.tqdm.tqdm.set_postfix", "supervisor.Supervisor._logger.debug", "losses.append", "loss.backward", "torch.nn.utils.clip_grad_norm_", "torch.optim.Adam.step", "supervisor.Supervisor._logger.info", "supervisor.Supervisor.evaluate", "supervisor.Supervisor._logger.info", "torch.optim.Adam", "loss.item", "loss.item", "supervisor.Supervisor.model.parameters", "numpy.mean", "numpy.mean", "supervisor.Supervisor.save_model", "supervisor.Supervisor._logger.info", "supervisor.Supervisor.model.parameters", "loss.item", "torch.optim.lr_scheduler.MultiStepLR.get_last_lr", "torch.optim.lr_scheduler.MultiStepLR.get_last_lr", "supervisor.Supervisor._logger.warning"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.None.supervisor.Supervisor.train", "home.repos.pwc.inspect_result.bird-tao_clcrn.None.supervisor.Supervisor.evaluate", "home.repos.pwc.inspect_result.bird-tao_clcrn.None.supervisor.Supervisor._prepare_data", "home.repos.pwc.inspect_result.bird-tao_clcrn.None.supervisor.Supervisor._compute_loss", "home.repos.pwc.inspect_result.bird-tao_clcrn.None.supervisor.Supervisor.evaluate", "home.repos.pwc.inspect_result.bird-tao_clcrn.None.supervisor.Supervisor.save_model"], ["", "", "def", "_train", "(", "self", ",", "base_lr", ",", "\n", "steps", ",", "patience", "=", "50", ",", "epochs", "=", "100", ",", "lr_decay_ratio", "=", "0.1", ",", "log_every", "=", "1", ",", "save_model", "=", "1", ",", "\n", "test_every_n_epochs", "=", "10", ",", "epsilon", "=", "1e-8", ",", "**", "kwargs", ")", ":", "\n", "# steps is used in learning rate - will see if need to use it?", "\n", "        ", "min_val_loss", "=", "float", "(", "'inf'", ")", "\n", "wait", "=", "0", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "base_lr", ",", "eps", "=", "epsilon", ")", "\n", "\n", "lr_scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "optimizer", ",", "milestones", "=", "steps", ",", "\n", "gamma", "=", "lr_decay_ratio", ")", "\n", "\n", "self", ".", "_logger", ".", "info", "(", "'Start training ...'", ")", "\n", "# this will fail if model is loaded with a changed batch_size", "\n", "num_batches", "=", "len", "(", "self", ".", "_data", "[", "'train_loader'", "]", ")", "\n", "self", ".", "_logger", ".", "info", "(", "\"num_batches:{}\"", ".", "format", "(", "num_batches", ")", ")", "\n", "\n", "best_epoch", "=", "0", "\n", "batches_seen", "=", "num_batches", "*", "self", ".", "_epoch_num", "\n", "# val_loss, val_loss_mse, val_loss_mape, _, __ = self.evaluate(dataset='val', batches_seen=batches_seen, epoch_num=0)", "\n", "for", "epo", "in", "range", "(", "self", ".", "_epoch_num", ",", "epochs", ")", ":", "\n", "\n", "            ", "epoch_num", "=", "epo", "+", "1", "\n", "self", ".", "model", "=", "self", ".", "model", ".", "train", "(", ")", "\n", "\n", "train_iterator", "=", "self", ".", "_data", "[", "'train_loader'", "]", "\n", "losses", "=", "[", "]", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "progress_bar", "=", "tqdm", "(", "train_iterator", ",", "unit", "=", "\"batch\"", ")", "\n", "\n", "for", "_", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "progress_bar", ")", ":", "\n", "\n", "                ", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "x", ",", "y", "=", "self", ".", "_prepare_data", "(", "x", ",", "y", ")", "\n", "output", "=", "self", ".", "model", "(", "x", ",", "y", ",", "batches_seen", "=", "batches_seen", ")", "\n", "if", "batches_seen", "==", "0", ":", "\n", "# this is a workaround to accommodate dynamically registered parameters in DCGRUCell", "\n", "                    ", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "base_lr", ",", "eps", "=", "epsilon", ")", "\n", "\n", "", "loss", ",", "y_true", ",", "y_pred", "=", "self", ".", "_compute_loss", "(", "y", ",", "output", ")", "\n", "\n", "progress_bar", ".", "set_postfix", "(", "training_loss", "=", "loss", ".", "item", "(", ")", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "losses", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "\n", "batches_seen", "+=", "1", "\n", "loss", ".", "backward", "(", ")", "\n", "\n", "# gradient clipping - this does it in place", "\n", "torch", ".", "nn", ".", "utils", ".", "clip_grad_norm_", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "self", ".", "max_grad_norm", ")", "\n", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "\n", "", "self", ".", "_logger", ".", "info", "(", "\"epoch complete\"", ")", "\n", "lr_scheduler", ".", "step", "(", ")", "\n", "self", ".", "_logger", ".", "info", "(", "\"evaluating now!\"", ")", "\n", "\n", "\n", "val_loss", ",", "val_loss_mse", ",", "val_loss_mape", ",", "_", ",", "__", "=", "self", ".", "evaluate", "(", "dataset", "=", "'val'", ",", "batches_seen", "=", "batches_seen", ",", "epoch_num", "=", "epoch_num", ")", "\n", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "(", "epoch_num", "%", "log_every", ")", "==", "0", ":", "\n", "                ", "message", "=", "'Epoch [{}/{}] ({}) train_mae: {:.4f}, val_mae: {:.4f}, lr: {:.6f}, '", "'{:.1f}s'", ".", "format", "(", "epoch_num", ",", "epochs", ",", "batches_seen", ",", "\n", "np", ".", "mean", "(", "losses", ")", ",", "val_loss", ",", "lr_scheduler", ".", "get_last_lr", "(", ")", "[", "0", "]", ",", "\n", "(", "end_time", "-", "start_time", ")", ")", "\n", "self", ".", "_logger", ".", "info", "(", "message", ")", "\n", "\n", "", "if", "(", "epoch_num", "%", "test_every_n_epochs", ")", "==", "0", ":", "\n", "                ", "test_loss", ",", "val_loss_mse", ",", "val_loss_mape", ",", "_", ",", "__", "=", "self", ".", "evaluate", "(", "dataset", "=", "'test'", ",", "batches_seen", "=", "batches_seen", ",", "epoch_num", "=", "epoch_num", ")", "\n", "message", "=", "'Epoch [{}/{}] ({}) train_mae: {:.4f}, test_mae: {:.4f},  lr: {:.6f}, '", "'{:.1f}s'", ".", "format", "(", "epoch_num", ",", "epochs", ",", "batches_seen", ",", "\n", "np", ".", "mean", "(", "losses", ")", ",", "test_loss", ",", "lr_scheduler", ".", "get_last_lr", "(", ")", "[", "0", "]", ",", "\n", "(", "end_time", "-", "start_time", ")", ")", "\n", "self", ".", "_logger", ".", "info", "(", "message", ")", "\n", "\n", "", "if", "val_loss", "<", "min_val_loss", ":", "\n", "                ", "wait", "=", "0", "\n", "if", "save_model", ":", "\n", "                    ", "best_epoch", "=", "epoch_num", "\n", "model_file_name", "=", "self", ".", "save_model", "(", "epoch_num", ")", "\n", "self", ".", "_logger", ".", "info", "(", "\n", "'Val loss decrease from {:.4f} to {:.4f}, '", "\n", "'saving to {}'", ".", "format", "(", "min_val_loss", ",", "val_loss", ",", "model_file_name", ")", ")", "\n", "", "min_val_loss", "=", "val_loss", "\n", "\n", "", "elif", "val_loss", ">=", "min_val_loss", ":", "\n", "                ", "wait", "+=", "1", "\n", "if", "wait", "==", "patience", ":", "\n", "                    ", "self", ".", "_logger", ".", "warning", "(", "'Early stopping at epoch: %d'", "%", "epoch_num", ")", "\n", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.None.supervisor.Supervisor._prepare_data": [[282, 285], ["supervisor.Supervisor._get_x_y", "x.to", "y.to"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.None.supervisor.Supervisor._get_x_y"], ["", "", "", "", "def", "_prepare_data", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "x", ",", "y", "=", "self", ".", "_get_x_y", "(", "x", ",", "y", ")", "\n", "return", "x", ".", "to", "(", "self", ".", "_device", ")", ",", "y", ".", "to", "(", "self", ".", "_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.None.supervisor.Supervisor._get_x_y": [[286, 298], ["supervisor.Supervisor._logger.debug", "supervisor.Supervisor._logger.debug", "x.permute().float.permute().float.permute().float", "y.permute().float.permute().float.permute().float", "x.permute().float.permute().float.size", "y.permute().float.permute().float.size", "x.permute().float.permute().float.permute", "y.permute().float.permute().float.permute"], "methods", ["None"], ["", "def", "_get_x_y", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "        ", "\"\"\"\n        :param x: shape (batch_size, seq_len, num_sensor, input_dim)\n        :param y: shape (batch_size, horizon, num_sensor, input_dim)\n        :returns x shape (seq_len, batch_size, num_sensor, input_dim)\n                 y shape (horizon, batch_size, num_sensor, input_dim)\n        \"\"\"", "\n", "self", ".", "_logger", ".", "debug", "(", "\"X: {}\"", ".", "format", "(", "x", ".", "size", "(", ")", ")", ")", "\n", "self", ".", "_logger", ".", "debug", "(", "\"y: {}\"", ".", "format", "(", "y", ".", "size", "(", ")", ")", ")", "\n", "x", "=", "x", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ".", "float", "(", ")", "\n", "y", "=", "y", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ".", "float", "(", ")", "\n", "return", "x", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.None.supervisor.Supervisor._compute_loss": [[300, 305], ["range", "supervisor.Supervisor.standard_scaler[].inverse_transform", "supervisor.Supervisor.standard_scaler[].inverse_transform", "model.loss.masked_mae_loss"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.lib.utils.StandardScaler.inverse_transform", "home.repos.pwc.inspect_result.bird-tao_clcrn.lib.utils.StandardScaler.inverse_transform", "home.repos.pwc.inspect_result.bird-tao_clcrn.model.loss.masked_mae_loss"], ["", "def", "_compute_loss", "(", "self", ",", "y_true", ",", "y_predicted", ")", ":", "\n", "        ", "for", "out_dim", "in", "range", "(", "self", ".", "output_dim", ")", ":", "\n", "            ", "y_true", "[", "...", ",", "out_dim", "]", "=", "self", ".", "standard_scaler", "[", "out_dim", "]", ".", "inverse_transform", "(", "y_true", "[", "...", ",", "out_dim", "]", ")", "\n", "y_predicted", "[", "...", ",", "out_dim", "]", "=", "self", ".", "standard_scaler", "[", "out_dim", "]", ".", "inverse_transform", "(", "y_predicted", "[", "...", ",", "out_dim", "]", ")", "\n", "", "return", "masked_mae_loss", "(", "y_predicted", ",", "y_true", ")", ",", "y_true", ",", "y_predicted", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.None.supervisor.Supervisor._convert_scale": [[306, 311], ["range", "supervisor.Supervisor.standard_scaler[].inverse_transform", "supervisor.Supervisor.standard_scaler[].inverse_transform"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.lib.utils.StandardScaler.inverse_transform", "home.repos.pwc.inspect_result.bird-tao_clcrn.lib.utils.StandardScaler.inverse_transform"], ["", "def", "_convert_scale", "(", "self", ",", "y_true", ",", "y_predicted", ")", ":", "\n", "        ", "for", "out_dim", "in", "range", "(", "self", ".", "output_dim", ")", ":", "\n", "            ", "y_true", "[", "...", ",", "out_dim", "]", "=", "self", ".", "standard_scaler", "[", "out_dim", "]", ".", "inverse_transform", "(", "y_true", "[", "...", ",", "out_dim", "]", ")", "\n", "y_predicted", "[", "...", ",", "out_dim", "]", "=", "self", ".", "standard_scaler", "[", "out_dim", "]", ".", "inverse_transform", "(", "y_predicted", "[", "...", ",", "out_dim", "]", ")", "\n", "", "return", "y_true", ",", "y_predicted", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.None.supervisor.Supervisor._prepare_x": [[312, 315], ["x.permute().float.permute().float.permute().float", "x.permute().float.permute().float.to", "x.permute().float.permute().float.permute"], "methods", ["None"], ["", "def", "_prepare_x", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "x", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ".", "float", "(", ")", "\n", "return", "x", ".", "to", "(", "self", ".", "_device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.None.supervisor.Supervisor._test_final_n_epoch": [[316, 335], ["os.listdir", "range", "pathlib.Path", "epoch_list.append", "numpy.sort", "supervisor.Supervisor.evaluate", "supervisor.Supervisor._logger.info", "supervisor.Supervisor._logger.info", "supervisor.Supervisor._logger.handlers.clear", "int", "re.search().group", "numpy.sqrt", "re.search"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.None.supervisor.Supervisor.evaluate"], ["", "def", "_test_final_n_epoch", "(", "self", ",", "n", "=", "5", ",", "steps", "=", "[", "3", ",", "6", ",", "12", "]", ")", ":", "\n", "        ", "model_path", "=", "Path", "(", "self", ".", "_log_dir", ")", "/", "'saved_model'", "\n", "model_list", "=", "os", ".", "listdir", "(", "model_path", ")", "\n", "import", "re", "\n", "\n", "epoch_list", "=", "[", "]", "\n", "for", "filename", "in", "model_list", ":", "\n", "            ", "epoch_list", ".", "append", "(", "int", "(", "re", ".", "search", "(", "r'\\d+'", ",", "filename", ")", ".", "group", "(", ")", ")", ")", "\n", "\n", "", "epoch_list", "=", "np", ".", "sort", "(", "epoch_list", ")", "[", "-", "n", ":", "]", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "            ", "epoch_num", "=", "epoch_list", "[", "i", "]", "\n", "mean_score", ",", "mean_loss_mse", ",", "mean_loss_mape", ",", "_", ",", "dict_metrics", "=", "self", ".", "evaluate", "(", "'test'", ",", "0", ",", "epoch_num", ",", "load_model", "=", "True", ",", "steps", "=", "steps", ")", "\n", "message", "=", "\"Loaded the {}-th epoch.\"", ".", "format", "(", "epoch_num", ")", "+", "\" MAE : {}\"", ".", "format", "(", "mean_score", ")", ",", "\"RMSE : {}\"", ".", "format", "(", "np", ".", "sqrt", "(", "mean_loss_mse", ")", ")", ",", "\"MAPE : {}\"", ".", "format", "(", "mean_loss_mape", ")", "\n", "self", ".", "_logger", ".", "info", "(", "message", ")", "\n", "message", "=", "\"Metrics in different steps: {}\"", ".", "format", "(", "dict_metrics", ")", "\n", "self", ".", "_logger", ".", "info", "(", "message", ")", "\n", "self", ".", "_logger", ".", "handlers", ".", "clear", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.None.supervisor.Supervisor._local_pattern": [[336, 351], ["torch.no_grad", "torch.from_numpy().float().to", "numpy.linspace", "numpy.linspace", "torch.from_numpy().float().to().flatten", "torch.from_numpy().float().to().flatten", "[].repeat", "supervisor.Supervisor.model.get_kernel", "supervisor.Supervisor.kernel_prattern", "torch.from_numpy().float", "torch.from_numpy().float().to", "torch.from_numpy().float().to", "torch.stack", "torch.from_numpy", "torch.from_numpy().float", "torch.from_numpy().float", "numpy.array", "torch.from_numpy", "torch.from_numpy", "numpy.cos", "numpy.sin"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.seq2seq_model.CLCRNModel.get_kernel", "home.repos.pwc.inspect_result.bird-tao_clcrn.clcnn.clconv.CLConv.kernel_prattern"], ["", "", "def", "_local_pattern", "(", "self", ",", "center_nodes", ",", "r", "=", "0.1", ",", "r_resolution", "=", "100", ",", "phi_resolution", "=", "360", ")", ":", "\n", "        ", "assert", "self", ".", "_model_name", "in", "[", "'CLCRN'", ",", "'CLCSTN'", "]", ",", "'the model does not provide the kernel visualization'", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "center_nodes", "=", "torch", ".", "from_numpy", "(", "np", ".", "array", "(", "center_nodes", ")", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "_device", ")", "\n", "N", "=", "center_nodes", ".", "shape", "[", "0", "]", "\n", "angle_ratio", "=", "1", "/", "phi_resolution", "\n", "rs", "=", "np", ".", "linspace", "(", "0", ",", "r", ",", "r_resolution", ")", "\n", "phis", "=", "np", ".", "linspace", "(", "-", "np", ".", "pi", ",", "np", ".", "pi", ",", "phi_resolution", ")", "\n", "xs", "=", "torch", ".", "from_numpy", "(", "rs", "[", ":", ",", "None", "]", "*", "np", ".", "cos", "(", "phis", ")", "[", "None", ",", ":", "]", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "_device", ")", ".", "flatten", "(", ")", "# r_res * phi_res", "\n", "ys", "=", "torch", ".", "from_numpy", "(", "rs", "[", ":", ",", "None", "]", "*", "np", ".", "sin", "(", "phis", ")", "[", "None", ",", ":", "]", ")", ".", "float", "(", ")", ".", "to", "(", "self", ".", "_device", ")", ".", "flatten", "(", ")", "# r_res * phi_res", "\n", "vs", "=", "torch", ".", "stack", "(", "[", "xs", ",", "ys", "]", ",", "dim", "=", "-", "1", ")", "[", "None", ",", ":", ",", ":", "]", ".", "repeat", "(", "N", ",", "1", ",", "1", ")", "\n", "\n", "kernel", "=", "self", ".", "model", ".", "get_kernel", "(", ")", "\n", "local_pattern", "=", "kernel", ".", "kernel_prattern", "(", "center_nodes", ",", "vs", ",", "angle_ratio", ")", "\n", "", "return", "local_pattern", ",", "center_nodes", ",", "rs", ",", "phis", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.None.supervisor.Supervisor._local_pattern_visual": [[352, 371], ["supervisor.Supervisor._local_pattern", "local_patterns.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "numpy.meshgrid", "range", "local_patterns[].reshape", "plt.subplots", "ax.pcolormesh", "plt.plot", "plt.grid", "plt.savefig", "local_patterns.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "numpy.exp", "local_patterns.detach().cpu().numpy.detach().cpu().numpy.detach", "numpy.sin", "numpy.sin"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.None.supervisor.Supervisor._local_pattern"], ["", "def", "_local_pattern_visual", "(", "self", ",", "center_nodes", ",", "r", "=", "0.1", ",", "r_resolution", "=", "180", ",", "phi_resolution", "=", "180", ")", ":", "\n", "        ", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "from", "mpl_toolkits", ".", "mplot3d", "import", "Axes3D", "\n", "\n", "local_patterns", ",", "center_nodes", ",", "rs", ",", "phis", "=", "self", ".", "_local_pattern", "(", "center_nodes", ",", "r", ",", "r_resolution", ",", "phi_resolution", ")", "\n", "local_patterns", "=", "local_patterns", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "rs_mesh", ",", "phis_mesh", "=", "np", ".", "meshgrid", "(", "rs", ",", "phis", ")", "\n", "vmin", ",", "vmax", "=", "0", ",", "0.02", "\n", "\n", "for", "i", "in", "range", "(", "center_nodes", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "local_pattern", "=", "local_patterns", "[", "i", "]", ".", "reshape", "(", "r_resolution", ",", "phi_resolution", ")", "\n", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", "subplot_kw", "=", "{", "'projection'", ":", "'polar'", "}", ")", "\n", "\n", "c", "=", "ax", ".", "pcolormesh", "(", "phis_mesh", "+", "0.1", "*", "np", ".", "sin", "(", "0.1", "*", "i", "*", "np", ".", "pi", ")", "*", "i", ",", "rs_mesh", ",", "local_pattern", ".", "T", "*", "np", ".", "exp", "(", "0.2", "*", "np", ".", "sin", "(", "0.03", "*", "i", ")", ")", ",", "cmap", "=", "'hot'", ",", "vmin", "=", "vmin", ",", "vmax", "=", "vmax", ")", "\n", "# fig.colorbar(c)", "\n", "plt", ".", "plot", "(", "phis", ",", "rs", ",", "color", "=", "'k'", ",", "ls", "=", "'none'", ")", "\n", "plt", ".", "grid", "(", ")", "\n", "path", "=", "self", ".", "_log_dir", "\n", "plt", ".", "savefig", "(", "path", "/", "'local_kernel_center{}.png'", ".", "format", "(", "i", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.None.supervisor.Supervisor._get_time_prediction": [[372, 395], ["copy.deepcopy", "experiments.dataloader.load_dataset", "torch.no_grad", "enumerate", "torch.cat().squeeze().cpu().numpy", "torch.cat().squeeze().cpu().numpy", "supervisor.Supervisor._prepare_data", "supervisor.Supervisor.model", "supervisor.Supervisor._compute_loss", "torch.cat().squeeze().cpu().numpy.append", "torch.cat().squeeze().cpu().numpy.append", "open", "pickle.dump", "torch.cat().squeeze().cpu", "torch.cat().squeeze().cpu", "torch.cat().squeeze", "torch.cat().squeeze", "torch.cat", "torch.cat"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.experiments.dataloader.load_dataset", "home.repos.pwc.inspect_result.bird-tao_clcrn.None.supervisor.Supervisor._prepare_data", "home.repos.pwc.inspect_result.bird-tao_clcrn.None.supervisor.Supervisor._compute_loss"], ["", "", "def", "_get_time_prediction", "(", "self", ")", ":", "\n", "        ", "import", "copy", "\n", "_data_kwargs", "=", "copy", ".", "deepcopy", "(", "self", ".", "_data_kwargs", ")", "\n", "_data_kwargs", "[", "'dataset_dir'", "]", "=", "_data_kwargs", "[", "'dataset_dir'", "]", "[", ":", "-", "1", "]", "+", "'_visual'", "\n", "_data_kwargs", "[", "'val_batch_size'", "]", "=", "1", "\n", "_data", "=", "dataloader", ".", "load_dataset", "(", "**", "_data_kwargs", ")", "\n", "test_loader", "=", "_data", "[", "'test_loader'", "]", "\n", "y_preds", "=", "[", "]", "\n", "y_trues", "=", "[", "]", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "for", "_", ",", "(", "x", ",", "y", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "                ", "x", ",", "y", "=", "self", ".", "_prepare_data", "(", "x", ",", "y", ")", "\n", "output", "=", "self", ".", "model", "(", "x", ")", "\n", "loss", ",", "y_true", ",", "y_pred", "=", "self", ".", "_compute_loss", "(", "y", ",", "output", ")", "\n", "y_preds", ".", "append", "(", "y_pred", ")", "\n", "y_trues", ".", "append", "(", "y_true", ")", "\n", "", "y_preds", "=", "torch", ".", "cat", "(", "y_preds", ",", "0", ")", ".", "squeeze", "(", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "y_trues", "=", "torch", ".", "cat", "(", "y_trues", ",", "0", ")", ".", "squeeze", "(", "dim", "=", "1", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "import", "pickle", "\n", "with", "open", "(", "'{}.pkl'", ".", "format", "(", "self", ".", "_model_name", "+", "self", ".", "_data_kwargs", "[", "'dataset_dir'", "]", "[", "5", ":", "-", "1", "]", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                ", "save_data", "=", "{", "'y_preds'", ":", "y_preds", ",", "\n", "'y_trues'", ":", "y_trues", "}", "\n", "pickle", ".", "dump", "(", "save_data", ",", "f", ",", "protocol", "=", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.None.supervisor.exists": [[17, 19], ["None"], "function", ["None"], ["def", "exists", "(", "val", ")", ":", "\n", "    ", "return", "val", "is", "not", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.None.train_clcstn.main": [[16, 30], ["open", "yaml.load", "path.mkdir", "os.path.join", "supervisor.Supervisor", "supervisor.Supervisor.train", "supervisor.Supervisor._test_final_n_epoch", "pathlib.Path", "open", "json.dump", "range"], "function", ["home.repos.pwc.inspect_result.bird-tao_clcrn.None.supervisor.Supervisor.train", "home.repos.pwc.inspect_result.bird-tao_clcrn.None.supervisor.Supervisor._test_final_n_epoch"], ["def", "main", "(", "args", ")", ":", "\n", "\n", "    ", "with", "open", "(", "args", ".", "config_filename", ")", "as", "f", ":", "\n", "        ", "supervisor_config", "=", "yaml", ".", "load", "(", "f", ")", "\n", "path", "=", "Path", "(", "supervisor_config", "[", "'train'", "]", "[", "'log_dir'", "]", ")", "/", "supervisor_config", "[", "'train'", "]", "[", "'experiment_name'", "]", "\n", "path", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "\n", "sv_param", "=", "os", ".", "path", ".", "join", "(", "path", ",", "'model_param.json'", ")", "\n", "with", "open", "(", "sv_param", ",", "'w'", ")", "as", "file_obj", ":", "\n", "            ", "json", ".", "dump", "(", "supervisor_config", ",", "file_obj", ")", "\n", "", "supervisor", "=", "Supervisor", "(", "**", "supervisor_config", ")", "\n", "\n", "supervisor", ".", "train", "(", ")", "\n", "supervisor", ".", "_test_final_n_epoch", "(", "1", ",", "steps", "=", "[", "i", "+", "1", "for", "i", "in", "range", "(", "12", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.None.train_clcstn.SetSeed": [[32, 41], ["torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed_all", "numpy.random.seed"], "function", ["None"], ["", "", "def", "SetSeed", "(", "seed", ")", ":", "\n", "    ", "\"\"\"function used to set a random seed\n    Arguments:\n        seed {int} -- seed number, will set to torch and numpy\n    \"\"\"", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.lib.transforms.ToTensor.__call__": [[10, 19], ["torch.tensor"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "item", ")", ":", "\n", "        ", "\"\"\"Function call operator to change type.\n\n        Args:\n            item (:obj:`numpy.array`): Numpy array that needs to be transformed.\n        Returns:\n            :obj:`torch.Tensor`: Sample of size (vertices, features).\n        \"\"\"", "\n", "return", "torch", ".", "tensor", "(", "item", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.lib.transforms.Permute.__call__": [[25, 35], ["item.permute"], "methods", ["None"], ["def", "__call__", "(", "self", ",", "item", ")", ":", "\n", "        ", "\"\"\"Permute first and second dimension.\n\n        Args:\n            item (:obj:`torch.Tensor`): Torch tensor that needs to be transformed.\n\n        Returns:\n            :obj:`torch.Tensor`: Permuted input tensor.\n        \"\"\"", "\n", "return", "item", ".", "permute", "(", "1", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.lib.transforms.Normalize.__init__": [[41, 50], ["torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "\"\"\"Initialization\n\n        Args:\n            mean (:obj:`numpy.array`): means of each feature\n            std (:obj:`numpy.array`): standard deviations of each feature\n        \"\"\"", "\n", "self", ".", "mean", "=", "torch", ".", "from_numpy", "(", "mean", ")", "\n", "self", ".", "std", "=", "torch", ".", "from_numpy", "(", "std", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.lib.transforms.Normalize.__call__": [[51, 60], ["None"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "item", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            item (:obj:`torch.Tensor`): Sample of size (vertices, features) to be normalized on its features.\n\n        Returns:\n            :obj:`torch.Tensor`: Normalized input tensor.\n        \"\"\"", "\n", "return", "(", "item", "-", "self", ".", "mean", ")", "/", "self", ".", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.lib.transforms.Stack.__init__": [[66, 73], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "dimension", "=", "0", ")", ":", "\n", "        ", "\"\"\"Initialization\n\n        Args:\n            dimension int: The dimension to be used for stacking.\n        \"\"\"", "\n", "self", ".", "dimension", "=", "dimension", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.lib.transforms.Stack.__call__": [[74, 84], ["torch.stack"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "item", ")", ":", "\n", "        ", "\"\"\"Stack images in torch tensor.\n\n        Args:\n            item (:obj:`torch.Tensor`): Torch tensor that needs to be transformed.\n\n        Returns:\n            :obj:`torch.Tensor`: Stacked input tensor.\n        \"\"\"", "\n", "return", "torch", ".", "stack", "(", "item", ",", "dim", "=", "self", ".", "dimension", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bird-tao_clcrn.lib.metrics.r2_np": [[5, 7], ["sklearn.metrics.r2_score"], "function", ["None"], ["def", "r2_np", "(", "preds", ",", "labels", ")", ":", "\n", "    ", "return", "r2_score", "(", "labels", ",", "preds", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.lib.metrics.masked_rmse_np": [[8, 10], ["numpy.sqrt", "metrics.masked_mse_np"], "function", ["home.repos.pwc.inspect_result.bird-tao_clcrn.lib.metrics.masked_mse_np"], ["", "def", "masked_rmse_np", "(", "preds", ",", "labels", ",", "null_val", "=", "np", ".", "nan", ")", ":", "\n", "    ", "return", "np", ".", "sqrt", "(", "masked_mse_np", "(", "preds", "=", "preds", ",", "labels", "=", "labels", ",", "null_val", "=", "null_val", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.lib.metrics.masked_mse_np": [[12, 26], ["numpy.where", "numpy.errstate", "numpy.isnan", "np.not_equal.astype", "numpy.mean", "numpy.square().astype", "numpy.nan_to_num", "numpy.mean", "numpy.not_equal", "numpy.isnan", "numpy.square", "numpy.subtract"], "function", ["None"], ["", "def", "masked_mse_np", "(", "preds", ",", "labels", ",", "null_val", "=", "np", ".", "nan", ")", ":", "\n", "    ", "idx", "=", "np", ".", "where", "(", "labels", ">", "1e-2", ")", "\n", "preds", "=", "preds", "[", "idx", "]", "\n", "labels", "=", "labels", "[", "idx", "]", "\n", "with", "np", ".", "errstate", "(", "divide", "=", "'ignore'", ",", "invalid", "=", "'ignore'", ")", ":", "\n", "        ", "if", "np", ".", "isnan", "(", "null_val", ")", ":", "\n", "            ", "mask", "=", "~", "np", ".", "isnan", "(", "labels", ")", "\n", "", "else", ":", "\n", "            ", "mask", "=", "np", ".", "not_equal", "(", "labels", ",", "null_val", ")", "\n", "", "mask", "=", "mask", ".", "astype", "(", "'float32'", ")", "\n", "mask", "/=", "np", ".", "mean", "(", "mask", ")", "\n", "rmse", "=", "np", ".", "square", "(", "np", ".", "subtract", "(", "preds", ",", "labels", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "rmse", "=", "np", ".", "nan_to_num", "(", "rmse", "*", "mask", ")", "\n", "return", "np", ".", "mean", "(", "rmse", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.lib.metrics.masked_mae_np": [[28, 42], ["numpy.where", "numpy.errstate", "numpy.isnan", "np.not_equal.astype", "numpy.mean", "numpy.abs().astype", "numpy.nan_to_num", "numpy.mean", "numpy.not_equal", "numpy.isnan", "numpy.abs", "numpy.subtract"], "function", ["None"], ["", "", "def", "masked_mae_np", "(", "preds", ",", "labels", ",", "null_val", "=", "np", ".", "nan", ")", ":", "\n", "    ", "idx", "=", "np", ".", "where", "(", "labels", ">", "1e-2", ")", "\n", "preds", "=", "preds", "[", "idx", "]", "\n", "labels", "=", "labels", "[", "idx", "]", "\n", "with", "np", ".", "errstate", "(", "divide", "=", "'ignore'", ",", "invalid", "=", "'ignore'", ")", ":", "\n", "        ", "if", "np", ".", "isnan", "(", "null_val", ")", ":", "\n", "            ", "mask", "=", "~", "np", ".", "isnan", "(", "labels", ")", "\n", "", "else", ":", "\n", "            ", "mask", "=", "np", ".", "not_equal", "(", "labels", ",", "null_val", ")", "\n", "", "mask", "=", "mask", ".", "astype", "(", "'float32'", ")", "\n", "mask", "/=", "np", ".", "mean", "(", "mask", ")", "\n", "mae", "=", "np", ".", "abs", "(", "np", ".", "subtract", "(", "preds", ",", "labels", ")", ")", ".", "astype", "(", "'float32'", ")", "\n", "mae", "=", "np", ".", "nan_to_num", "(", "mae", "*", "mask", ")", "\n", "return", "np", ".", "mean", "(", "mae", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.lib.metrics.masked_mape_np": [[44, 58], ["numpy.where", "numpy.errstate", "numpy.isnan", "np.not_equal.astype", "numpy.mean", "numpy.abs", "numpy.nan_to_num", "numpy.mean", "numpy.not_equal", "numpy.divide", "numpy.isnan", "numpy.subtract().astype", "numpy.subtract"], "function", ["None"], ["", "", "def", "masked_mape_np", "(", "preds", ",", "labels", ",", "null_val", "=", "np", ".", "nan", ")", ":", "\n", "    ", "idx", "=", "np", ".", "where", "(", "labels", ">", "1e-2", ")", "\n", "preds", "=", "preds", "[", "idx", "]", "\n", "labels", "=", "labels", "[", "idx", "]", "\n", "with", "np", ".", "errstate", "(", "divide", "=", "'ignore'", ",", "invalid", "=", "'ignore'", ")", ":", "\n", "        ", "if", "np", ".", "isnan", "(", "null_val", ")", ":", "\n", "            ", "mask", "=", "~", "np", ".", "isnan", "(", "labels", ")", "\n", "", "else", ":", "\n", "            ", "mask", "=", "np", ".", "not_equal", "(", "labels", ",", "null_val", ")", "\n", "", "mask", "=", "mask", ".", "astype", "(", "'float32'", ")", "\n", "mask", "/=", "np", ".", "mean", "(", "mask", ")", "\n", "mape", "=", "np", ".", "abs", "(", "np", ".", "divide", "(", "np", ".", "subtract", "(", "preds", ",", "labels", ")", ".", "astype", "(", "'float32'", ")", ",", "labels", ")", ")", "\n", "mape", "=", "np", ".", "nan_to_num", "(", "mask", "*", "mape", ")", "\n", "return", "np", ".", "mean", "(", "mape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.lib.metrics.calculate_metrics": [[61, 73], ["metrics.masked_mape_np", "metrics.masked_mae_np", "metrics.masked_rmse_np", "df_pred.as_matrix", "df_test.as_matrix", "df_pred.as_matrix", "df_test.as_matrix", "df_pred.as_matrix", "df_test.as_matrix"], "function", ["home.repos.pwc.inspect_result.bird-tao_clcrn.lib.metrics.masked_mape_np", "home.repos.pwc.inspect_result.bird-tao_clcrn.lib.metrics.masked_mae_np", "home.repos.pwc.inspect_result.bird-tao_clcrn.lib.metrics.masked_rmse_np"], ["", "", "def", "calculate_metrics", "(", "df_pred", ",", "df_test", ",", "null_val", ")", ":", "\n", "    ", "\"\"\"\n    Calculate the MAE, MAPE, RMSE\n    :param df_pred:\n    :param df_test:\n    :param null_val:\n    :return:\n    \"\"\"", "\n", "mape", "=", "masked_mape_np", "(", "preds", "=", "df_pred", ".", "as_matrix", "(", ")", ",", "labels", "=", "df_test", ".", "as_matrix", "(", ")", ",", "null_val", "=", "null_val", ")", "\n", "mae", "=", "masked_mae_np", "(", "preds", "=", "df_pred", ".", "as_matrix", "(", ")", ",", "labels", "=", "df_test", ".", "as_matrix", "(", ")", ",", "null_val", "=", "null_val", ")", "\n", "rmse", "=", "masked_rmse_np", "(", "preds", "=", "df_pred", ".", "as_matrix", "(", ")", ",", "labels", "=", "df_test", ".", "as_matrix", "(", ")", ",", "null_val", "=", "null_val", ")", "\n", "return", "mae", ",", "mape", ",", "rmse", "", "", ""]], "home.repos.pwc.inspect_result.bird-tao_clcrn.lib.utils.StandardScaler.__init__": [[16, 19], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "mean", ",", "std", ")", ":", "\n", "        ", "self", ".", "mean", "=", "mean", "\n", "self", ".", "std", "=", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.lib.utils.StandardScaler.transform": [[20, 22], ["None"], "methods", ["None"], ["", "def", "transform", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "(", "data", "-", "self", ".", "mean", ")", "/", "self", ".", "std", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.lib.utils.StandardScaler.inverse_transform": [[23, 25], ["None"], "methods", ["None"], ["", "def", "inverse_transform", "(", "self", ",", "data", ")", ":", "\n", "        ", "return", "(", "data", "*", "self", ".", "std", ")", "+", "self", ".", "mean", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.lib.utils.calculate_normalized_laplacian": [[27, 41], ["scipy.coo_matrix", "numpy.array", "numpy.power().flatten", "scipy.diags", "sp.coo_matrix.sum", "scipy.eye", "sp.coo_matrix.dot().transpose().dot().tocoo", "numpy.power", "numpy.isinf", "sp.coo_matrix.dot().transpose().dot", "sp.coo_matrix.dot().transpose", "sp.coo_matrix.dot"], "function", ["None"], ["", "", "def", "calculate_normalized_laplacian", "(", "adj", ")", ":", "\n", "    ", "\"\"\"\n    # L = D^-1/2 (D-A) D^-1/2 = I - D^-1/2 A D^-1/2\n    # D = diag(A 1)\n    :param adj:\n    :return:\n    \"\"\"", "\n", "adj", "=", "sp", ".", "coo_matrix", "(", "adj", ")", "\n", "d", "=", "np", ".", "array", "(", "adj", ".", "sum", "(", "1", ")", ")", "\n", "d_inv_sqrt", "=", "np", ".", "power", "(", "d", ",", "-", "0.5", ")", ".", "flatten", "(", ")", "\n", "d_inv_sqrt", "[", "np", ".", "isinf", "(", "d_inv_sqrt", ")", "]", "=", "0.", "\n", "d_mat_inv_sqrt", "=", "sp", ".", "diags", "(", "d_inv_sqrt", ")", "\n", "normalized_laplacian", "=", "sp", ".", "eye", "(", "adj", ".", "shape", "[", "0", "]", ")", "-", "adj", ".", "dot", "(", "d_mat_inv_sqrt", ")", ".", "transpose", "(", ")", ".", "dot", "(", "d_mat_inv_sqrt", ")", ".", "tocoo", "(", ")", "\n", "return", "normalized_laplacian", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.lib.utils.calculate_random_walk_matrix": [[43, 51], ["scipy.coo_matrix", "numpy.array", "numpy.power().flatten", "scipy.diags", "sp.diags.dot().tocoo", "sp.coo_matrix.sum", "numpy.power", "numpy.isinf", "sp.diags.dot"], "function", ["None"], ["", "def", "calculate_random_walk_matrix", "(", "adj_mx", ")", ":", "\n", "    ", "adj_mx", "=", "sp", ".", "coo_matrix", "(", "adj_mx", ")", "\n", "d", "=", "np", ".", "array", "(", "adj_mx", ".", "sum", "(", "1", ")", ")", "\n", "d_inv", "=", "np", ".", "power", "(", "d", ",", "-", "1", ")", ".", "flatten", "(", ")", "\n", "d_inv", "[", "np", ".", "isinf", "(", "d_inv", ")", "]", "=", "0.", "\n", "d_mat_inv", "=", "sp", ".", "diags", "(", "d_inv", ")", "\n", "random_walk_mx", "=", "d_mat_inv", ".", "dot", "(", "adj_mx", ")", ".", "tocoo", "(", ")", "\n", "return", "random_walk_mx", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.lib.utils.calculate_reverse_random_walk_matrix": [[53, 55], ["utils.calculate_random_walk_matrix", "numpy.transpose"], "function", ["home.repos.pwc.inspect_result.bird-tao_clcrn.lib.utils.calculate_random_walk_matrix"], ["", "def", "calculate_reverse_random_walk_matrix", "(", "adj_mx", ")", ":", "\n", "    ", "return", "calculate_random_walk_matrix", "(", "np", ".", "transpose", "(", "adj_mx", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.lib.utils.calculate_scaled_laplacian": [[57, 69], ["utils.calculate_normalized_laplacian", "scipy.csr_matrix", "scipy.identity", "sp.csr_matrix.astype", "numpy.maximum.reduce", "scipy.sparse.linalg.eigsh"], "function", ["home.repos.pwc.inspect_result.bird-tao_clcrn.lib.utils.calculate_normalized_laplacian"], ["", "def", "calculate_scaled_laplacian", "(", "adj_mx", ",", "lambda_max", "=", "2", ",", "undirected", "=", "True", ")", ":", "\n", "    ", "if", "undirected", ":", "\n", "        ", "adj_mx", "=", "np", ".", "maximum", ".", "reduce", "(", "[", "adj_mx", ",", "adj_mx", ".", "T", "]", ")", "\n", "", "L", "=", "calculate_normalized_laplacian", "(", "adj_mx", ")", "\n", "if", "lambda_max", "is", "None", ":", "\n", "        ", "lambda_max", ",", "_", "=", "linalg", ".", "eigsh", "(", "L", ",", "1", ",", "which", "=", "'LM'", ")", "\n", "lambda_max", "=", "lambda_max", "[", "0", "]", "\n", "", "L", "=", "sp", ".", "csr_matrix", "(", "L", ")", "\n", "M", ",", "_", "=", "L", ".", "shape", "\n", "I", "=", "sp", ".", "identity", "(", "M", ",", "format", "=", "'csr'", ",", "dtype", "=", "L", ".", "dtype", ")", "\n", "L", "=", "(", "2", "/", "lambda_max", "*", "L", ")", "-", "I", "\n", "return", "L", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.lib.utils.config_logging": [[71, 88], ["logging.Formatter", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.FileHandler.setLevel", "logging.Formatter", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.StreamHandler.setLevel", "logging.basicConfig", "os.makedirs", "os.path.join"], "function", ["None"], ["", "def", "config_logging", "(", "log_dir", ",", "log_filename", "=", "'info.log'", ",", "level", "=", "logging", ".", "INFO", ")", ":", "\n", "# Add file handler and stdout handler", "\n", "    ", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s - %(name)s - %(levelname)s - %(message)s'", ")", "\n", "# Create the log directory if necessary.", "\n", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "log_dir", ")", "\n", "", "except", "OSError", ":", "\n", "        ", "pass", "\n", "", "file_handler", "=", "logging", ".", "FileHandler", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "log_filename", ")", ")", "\n", "file_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "file_handler", ".", "setLevel", "(", "level", "=", "level", ")", "\n", "# Add console handler.", "\n", "console_formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s - %(levelname)s - %(message)s'", ")", "\n", "console_handler", "=", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", "\n", "console_handler", ".", "setFormatter", "(", "console_formatter", ")", "\n", "console_handler", ".", "setLevel", "(", "level", "=", "level", ")", "\n", "logging", ".", "basicConfig", "(", "handlers", "=", "[", "file_handler", ",", "console_handler", "]", ",", "level", "=", "level", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.lib.utils.get_logger": [[90, 106], ["logging.getLogger", "logging.getLogger.setLevel", "logging.Formatter", "logging.FileHandler", "logging.FileHandler.setFormatter", "logging.Formatter", "logging.StreamHandler", "logging.StreamHandler.setFormatter", "logging.getLogger.addHandler", "logging.getLogger.addHandler", "logging.getLogger.info", "os.path.join"], "function", ["None"], ["", "def", "get_logger", "(", "log_dir", ",", "name", ",", "log_filename", "=", "'info.log'", ",", "level", "=", "logging", ".", "INFO", ")", ":", "\n", "    ", "logger", "=", "logging", ".", "getLogger", "(", "name", ")", "\n", "logger", ".", "setLevel", "(", "level", ")", "\n", "# Add file handler and stdout handler", "\n", "formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s - %(name)s - %(levelname)s - %(message)s'", ")", "\n", "file_handler", "=", "logging", ".", "FileHandler", "(", "os", ".", "path", ".", "join", "(", "log_dir", ",", "log_filename", ")", ")", "\n", "file_handler", ".", "setFormatter", "(", "formatter", ")", "\n", "# Add console handler.", "\n", "console_formatter", "=", "logging", ".", "Formatter", "(", "'%(asctime)s - %(levelname)s - %(message)s'", ")", "\n", "console_handler", "=", "logging", ".", "StreamHandler", "(", "sys", ".", "stdout", ")", "\n", "console_handler", ".", "setFormatter", "(", "console_formatter", ")", "\n", "logger", ".", "addHandler", "(", "file_handler", ")", "\n", "logger", ".", "addHandler", "(", "console_handler", ")", "\n", "# Add google cloud log handler", "\n", "logger", ".", "info", "(", "'Log directory: %s'", ",", "log_dir", ")", "\n", "return", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.lib.utils.load_graph_data": [[108, 111], ["utils.load_pickle"], "function", ["home.repos.pwc.inspect_result.bird-tao_clcrn.lib.utils.load_pickle"], ["", "def", "load_graph_data", "(", "pkl_filename", ")", ":", "\n", "    ", "sensor_ids", ",", "sensor_id_to_ind", ",", "adj_mx", "=", "load_pickle", "(", "pkl_filename", ")", "\n", "return", "sensor_ids", ",", "sensor_id_to_ind", ",", "adj_mx", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.lib.utils.load_pickle": [[113, 124], ["open", "pickle.load", "print", "open", "pickle.load"], "function", ["None"], ["", "def", "load_pickle", "(", "pickle_file", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "with", "open", "(", "pickle_file", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "pickle_data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "", "except", "UnicodeDecodeError", "as", "e", ":", "\n", "        ", "with", "open", "(", "pickle_file", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "pickle_data", "=", "pickle", ".", "load", "(", "f", ",", "encoding", "=", "'latin1'", ")", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "        ", "print", "(", "'Unable to load data '", ",", "pickle_file", ",", "':'", ",", "e", ")", "\n", "raise", "\n", "", "return", "pickle_data", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.lib.utils.nbhd2SparseIdx": [[126, 143], ["numpy.array", "np.array.flatten", "numpy.array", "sparse_indices.reshape.reshape", "torch.LongTensor", "numpy.zeros", "sparse_indices.reshape.append"], "function", ["None"], ["", "def", "nbhd2SparseIdx", "(", "nbhds", ")", ":", "\n", "    ", "nbhds", "=", "np", ".", "array", "(", "nbhds", ")", "\n", "nbhds_flat", "=", "nbhds", ".", "flatten", "(", ")", "\n", "element_num", "=", "nbhds_flat", "[", "nbhds_flat", "!=", "-", "1", "]", ".", "shape", "[", "0", "]", "\n", "sparse_indices", "=", "[", "]", "\n", "\n", "for", "nbhd", "in", "nbhds", ":", "\n", "        ", "nbhd", "=", "nbhd", "[", "nbhd", "!=", "-", "1", "]", "\n", "pairs", "=", "np", ".", "zeros", "(", "(", "nbhd", ".", "shape", "[", "0", "]", ",", "2", ")", ")", "\n", "pairs", "[", ":", ",", "0", "]", "=", "nbhd", "[", "0", "]", "\n", "pairs", "[", ":", ",", "1", "]", "=", "nbhd", "\n", "sparse_indices", ".", "append", "(", "pairs", ")", "\n", "\n", "", "sparse_indices", "=", "np", ".", "array", "(", "sparse_indices", ")", "\n", "sparse_indices", "=", "sparse_indices", ".", "reshape", "(", "element_num", ",", "2", ")", "\n", "sparse_indices", "=", "sparse_indices", ".", "T", "\n", "return", "torch", ".", "LongTensor", "(", "sparse_indices", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.lib.utils.latlon2xyz": [[144, 149], ["numpy.sin", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.cos"], "function", ["None"], ["", "def", "latlon2xyz", "(", "lat", ",", "lon", ")", ":", "\n", "    ", "x", "=", "-", "np", ".", "cos", "(", "lat", ")", "*", "np", ".", "cos", "(", "lon", ")", "\n", "y", "=", "-", "np", ".", "cos", "(", "lat", ")", "*", "np", ".", "sin", "(", "lon", ")", "\n", "z", "=", "np", ".", "sin", "(", "lat", ")", "\n", "return", "x", ",", "y", ",", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.lib.utils.xyz2latlon": [[150, 154], ["numpy.arcsin", "numpy.arctan2"], "function", ["None"], ["", "def", "xyz2latlon", "(", "x", ",", "y", ",", "z", ")", ":", "\n", "    ", "lat", "=", "np", ".", "arcsin", "(", "z", ")", "\n", "lon", "=", "np", ".", "arctan2", "(", "-", "y", ",", "-", "x", ")", "\n", "return", "lat", ",", "lon", "", "", ""]], "home.repos.pwc.inspect_result.bird-tao_clcrn.lib.stats_extractor.stats_extractor": [[7, 37], ["torch.zeros", "torch.zeros", "torch.unsqueeze", "numpy.sqrt", "torch.Tensor", "torch.Tensor", "torch.sum", "torch.Tensor", "torch.sum", "torch.squeeze().numpy", "np.sqrt.numpy", "torch.squeeze"], "function", ["None"], ["def", "stats_extractor", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Iterates over a dataset object\n    It is iterated over so as to calculate the mean and standard deviation.\n\n    Args:\n        dataset (:obj:`torch.utils.data.dataloader`): dataset object to iterate over\n\n    Returns:\n        :obj:numpy.array, :obj:numpy.array : computed means and standard deviation\n    \"\"\"", "\n", "\n", "F", ",", "V", "=", "torch", ".", "Tensor", "(", "dataset", "[", "0", "]", "[", "0", "]", ")", ".", "shape", "\n", "summing", "=", "torch", ".", "zeros", "(", "F", ")", "\n", "square_summing", "=", "torch", ".", "zeros", "(", "F", ")", "\n", "total", "=", "0", "\n", "\n", "for", "item", "in", "dataset", ":", "\n", "        ", "item", "=", "torch", ".", "Tensor", "(", "item", "[", "0", "]", ")", "\n", "summing", "+=", "torch", ".", "sum", "(", "item", ",", "dim", "=", "1", ")", "\n", "total", "+=", "V", "\n", "\n", "", "means", "=", "torch", ".", "unsqueeze", "(", "summing", "/", "total", ",", "dim", "=", "1", ")", "\n", "\n", "for", "item", "in", "dataset", ":", "\n", "        ", "item", "=", "torch", ".", "Tensor", "(", "item", "[", "0", "]", ")", "\n", "square_summing", "+=", "torch", ".", "sum", "(", "(", "item", "-", "means", ")", "**", "2", ",", "dim", "=", "1", ")", "\n", "\n", "", "stds", "=", "np", ".", "sqrt", "(", "square_summing", "/", "(", "total", "-", "1", ")", ")", "\n", "\n", "return", "torch", ".", "squeeze", "(", "means", ",", "dim", "=", "1", ")", ".", "numpy", "(", ")", ",", "stds", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.lib.stats_extractor.stats_extractor2": [[38, 68], ["torch.zeros", "torch.zeros", "torch.unsqueeze", "numpy.sqrt", "torch.Tensor", "torch.Tensor", "torch.sum", "torch.Tensor", "torch.sum", "torch.squeeze().numpy", "np.sqrt.numpy", "torch.squeeze"], "function", ["None"], ["", "def", "stats_extractor2", "(", "dataset", ")", ":", "\n", "    ", "\"\"\"Iterates over a dataset object\n    It is iterated over so as to calculate the mean and standard deviation.\n\n    Args:\n        dataset (:obj:`torch.utils.data.dataloader`): dataset object to iterate over\n\n    Returns:\n        :obj:numpy.array, :obj:numpy.array : computed means and standard deviation\n    \"\"\"", "\n", "\n", "V", ",", "F", "=", "torch", ".", "Tensor", "(", "dataset", "[", "0", "]", "[", "0", "]", "[", "0", "]", ")", ".", "shape", "\n", "summing", "=", "torch", ".", "zeros", "(", "F", ")", "\n", "square_summing", "=", "torch", ".", "zeros", "(", "F", ")", "\n", "total", "=", "0", "\n", "\n", "for", "item", "in", "dataset", ":", "\n", "        ", "item", "=", "torch", ".", "Tensor", "(", "item", "[", "0", "]", ")", "\n", "summing", "+=", "torch", ".", "sum", "(", "item", ",", "dim", "=", "0", ")", "\n", "total", "+=", "V", "\n", "\n", "", "means", "=", "torch", ".", "unsqueeze", "(", "summing", "/", "total", ",", "dim", "=", "0", ")", "\n", "\n", "for", "item", "in", "dataset", ":", "\n", "        ", "item", "=", "torch", ".", "Tensor", "(", "item", "[", "0", "]", ")", "\n", "square_summing", "+=", "torch", ".", "sum", "(", "(", "item", "-", "means", ")", "**", "2", ",", "dim", "=", "0", ")", "\n", "\n", "", "stds", "=", "np", ".", "sqrt", "(", "square_summing", "/", "(", "total", "-", "1", ")", ")", "\n", "\n", "return", "torch", ".", "squeeze", "(", "means", ",", "dim", "=", "0", ")", ".", "numpy", "(", ")", ",", "stds", ".", "numpy", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.bird-tao_clcrn.lib.AMSGrad.AMSGrad.__init__": [[16, 30], ["tensorflow.python.training.optimizer.Optimizer.__init__"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "learning_rate", "=", "0.01", ",", "beta1", "=", "0.9", ",", "beta2", "=", "0.99", ",", "epsilon", "=", "1e-8", ",", "use_locking", "=", "False", ",", "name", "=", "\"AMSGrad\"", ")", ":", "\n", "        ", "super", "(", "AMSGrad", ",", "self", ")", ".", "__init__", "(", "use_locking", ",", "name", ")", "\n", "self", ".", "_lr", "=", "learning_rate", "\n", "self", ".", "_beta1", "=", "beta1", "\n", "self", ".", "_beta2", "=", "beta2", "\n", "self", ".", "_epsilon", "=", "epsilon", "\n", "\n", "self", ".", "_lr_t", "=", "None", "\n", "self", ".", "_beta1_t", "=", "None", "\n", "self", ".", "_beta2_t", "=", "None", "\n", "self", ".", "_epsilon_t", "=", "None", "\n", "\n", "self", ".", "_beta1_power", "=", "None", "\n", "self", ".", "_beta2_power", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.lib.AMSGrad.AMSGrad._create_slots": [[31, 47], ["min", "tensorflow.python.eager.context.in_graph_mode", "AMSGrad.AMSGrad._zeros_slot", "AMSGrad.AMSGrad._zeros_slot", "AMSGrad.AMSGrad._zeros_slot", "tensorflow.python.framework.ops.colocate_with", "tensorflow.python.ops.variable_scope.variable", "tensorflow.python.ops.variable_scope.variable"], "methods", ["None"], ["", "def", "_create_slots", "(", "self", ",", "var_list", ")", ":", "\n", "        ", "first_var", "=", "min", "(", "var_list", ",", "key", "=", "lambda", "x", ":", "x", ".", "name", ")", "\n", "\n", "create_new", "=", "self", ".", "_beta1_power", "is", "None", "\n", "if", "not", "create_new", "and", "context", ".", "in_graph_mode", "(", ")", ":", "\n", "            ", "create_new", "=", "(", "self", ".", "_beta1_power", ".", "graph", "is", "not", "first_var", ".", "graph", ")", "\n", "\n", "", "if", "create_new", ":", "\n", "            ", "with", "ops", ".", "colocate_with", "(", "first_var", ")", ":", "\n", "                ", "self", ".", "_beta1_power", "=", "variable_scope", ".", "variable", "(", "self", ".", "_beta1", ",", "name", "=", "\"beta1_power\"", ",", "trainable", "=", "False", ")", "\n", "self", ".", "_beta2_power", "=", "variable_scope", ".", "variable", "(", "self", ".", "_beta2", ",", "name", "=", "\"beta2_power\"", ",", "trainable", "=", "False", ")", "\n", "# Create slots for the first and second moments.", "\n", "", "", "for", "v", "in", "var_list", ":", "\n", "            ", "self", ".", "_zeros_slot", "(", "v", ",", "\"m\"", ",", "self", ".", "_name", ")", "\n", "self", ".", "_zeros_slot", "(", "v", ",", "\"v\"", ",", "self", ".", "_name", ")", "\n", "self", ".", "_zeros_slot", "(", "v", ",", "\"vhat\"", ",", "self", ".", "_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.lib.AMSGrad.AMSGrad._prepare": [[48, 53], ["tensorflow.python.framework.ops.convert_to_tensor", "tensorflow.python.framework.ops.convert_to_tensor", "tensorflow.python.framework.ops.convert_to_tensor", "tensorflow.python.framework.ops.convert_to_tensor"], "methods", ["None"], ["", "", "def", "_prepare", "(", "self", ")", ":", "\n", "        ", "self", ".", "_lr_t", "=", "ops", ".", "convert_to_tensor", "(", "self", ".", "_lr", ")", "\n", "self", ".", "_beta1_t", "=", "ops", ".", "convert_to_tensor", "(", "self", ".", "_beta1", ")", "\n", "self", ".", "_beta2_t", "=", "ops", ".", "convert_to_tensor", "(", "self", ".", "_beta2", ")", "\n", "self", ".", "_epsilon_t", "=", "ops", ".", "convert_to_tensor", "(", "self", ".", "_epsilon", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.lib.AMSGrad.AMSGrad._apply_dense": [[54, 81], ["tensorflow.python.ops.math_ops.cast", "tensorflow.python.ops.math_ops.cast", "tensorflow.python.ops.math_ops.cast", "tensorflow.python.ops.math_ops.cast", "tensorflow.python.ops.math_ops.cast", "tensorflow.python.ops.math_ops.cast", "AMSGrad.AMSGrad.get_slot", "tensorflow.python.ops.state_ops.assign", "AMSGrad.AMSGrad.get_slot", "tensorflow.python.ops.state_ops.assign", "AMSGrad.AMSGrad.get_slot", "tensorflow.python.ops.state_ops.assign", "tensorflow.python.ops.math_ops.sqrt", "tensorflow.python.ops.state_ops.assign_sub", "tensorflow.python.ops.control_flow_ops.group", "tensorflow.python.ops.math_ops.maximum", "tensorflow.python.ops.math_ops.sqrt"], "methods", ["None"], ["", "def", "_apply_dense", "(", "self", ",", "grad", ",", "var", ")", ":", "\n", "        ", "beta1_power", "=", "math_ops", ".", "cast", "(", "self", ".", "_beta1_power", ",", "var", ".", "dtype", ".", "base_dtype", ")", "\n", "beta2_power", "=", "math_ops", ".", "cast", "(", "self", ".", "_beta2_power", ",", "var", ".", "dtype", ".", "base_dtype", ")", "\n", "lr_t", "=", "math_ops", ".", "cast", "(", "self", ".", "_lr_t", ",", "var", ".", "dtype", ".", "base_dtype", ")", "\n", "beta1_t", "=", "math_ops", ".", "cast", "(", "self", ".", "_beta1_t", ",", "var", ".", "dtype", ".", "base_dtype", ")", "\n", "beta2_t", "=", "math_ops", ".", "cast", "(", "self", ".", "_beta2_t", ",", "var", ".", "dtype", ".", "base_dtype", ")", "\n", "epsilon_t", "=", "math_ops", ".", "cast", "(", "self", ".", "_epsilon_t", ",", "var", ".", "dtype", ".", "base_dtype", ")", "\n", "\n", "lr", "=", "(", "lr_t", "*", "math_ops", ".", "sqrt", "(", "1", "-", "beta2_power", ")", "/", "(", "1", "-", "beta1_power", ")", ")", "\n", "\n", "# m_t = beta1 * m + (1 - beta1) * g_t", "\n", "m", "=", "self", ".", "get_slot", "(", "var", ",", "\"m\"", ")", "\n", "m_scaled_g_values", "=", "grad", "*", "(", "1", "-", "beta1_t", ")", "\n", "m_t", "=", "state_ops", ".", "assign", "(", "m", ",", "beta1_t", "*", "m", "+", "m_scaled_g_values", ",", "use_locking", "=", "self", ".", "_use_locking", ")", "\n", "\n", "# v_t = beta2 * v + (1 - beta2) * (g_t * g_t)", "\n", "v", "=", "self", ".", "get_slot", "(", "var", ",", "\"v\"", ")", "\n", "v_scaled_g_values", "=", "(", "grad", "*", "grad", ")", "*", "(", "1", "-", "beta2_t", ")", "\n", "v_t", "=", "state_ops", ".", "assign", "(", "v", ",", "beta2_t", "*", "v", "+", "v_scaled_g_values", ",", "use_locking", "=", "self", ".", "_use_locking", ")", "\n", "\n", "# amsgrad", "\n", "vhat", "=", "self", ".", "get_slot", "(", "var", ",", "\"vhat\"", ")", "\n", "vhat_t", "=", "state_ops", ".", "assign", "(", "vhat", ",", "math_ops", ".", "maximum", "(", "v_t", ",", "vhat", ")", ")", "\n", "v_sqrt", "=", "math_ops", ".", "sqrt", "(", "vhat_t", ")", "\n", "\n", "var_update", "=", "state_ops", ".", "assign_sub", "(", "var", ",", "lr", "*", "m_t", "/", "(", "v_sqrt", "+", "epsilon_t", ")", ",", "use_locking", "=", "self", ".", "_use_locking", ")", "\n", "return", "control_flow_ops", ".", "group", "(", "*", "[", "var_update", ",", "m_t", ",", "v_t", ",", "vhat_t", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.lib.AMSGrad.AMSGrad._resource_apply_dense": [[82, 110], ["tensorflow.python.ops.math_ops.cast", "tensorflow.python.ops.math_ops.cast", "tensorflow.python.ops.math_ops.cast", "tensorflow.python.ops.math_ops.cast", "tensorflow.python.ops.math_ops.cast", "tensorflow.python.ops.math_ops.cast", "tensorflow.python.ops.state_ops.assign", "tensorflow.python.ops.state_ops.assign", "tensorflow.python.ops.state_ops.assign", "tensorflow.python.ops.math_ops.sqrt", "tensorflow.python.ops.state_ops.assign_sub", "tensorflow.python.ops.control_flow_ops.group", "AMSGrad.AMSGrad.get_slot", "AMSGrad.AMSGrad.get_slot", "AMSGrad.AMSGrad.get_slot", "tensorflow.python.ops.math_ops.maximum", "tensorflow.python.ops.math_ops.sqrt"], "methods", ["None"], ["", "def", "_resource_apply_dense", "(", "self", ",", "grad", ",", "var", ")", ":", "\n", "        ", "var", "=", "var", ".", "handle", "\n", "beta1_power", "=", "math_ops", ".", "cast", "(", "self", ".", "_beta1_power", ",", "grad", ".", "dtype", ".", "base_dtype", ")", "\n", "beta2_power", "=", "math_ops", ".", "cast", "(", "self", ".", "_beta2_power", ",", "grad", ".", "dtype", ".", "base_dtype", ")", "\n", "lr_t", "=", "math_ops", ".", "cast", "(", "self", ".", "_lr_t", ",", "grad", ".", "dtype", ".", "base_dtype", ")", "\n", "beta1_t", "=", "math_ops", ".", "cast", "(", "self", ".", "_beta1_t", ",", "grad", ".", "dtype", ".", "base_dtype", ")", "\n", "beta2_t", "=", "math_ops", ".", "cast", "(", "self", ".", "_beta2_t", ",", "grad", ".", "dtype", ".", "base_dtype", ")", "\n", "epsilon_t", "=", "math_ops", ".", "cast", "(", "self", ".", "_epsilon_t", ",", "grad", ".", "dtype", ".", "base_dtype", ")", "\n", "\n", "lr", "=", "(", "lr_t", "*", "math_ops", ".", "sqrt", "(", "1", "-", "beta2_power", ")", "/", "(", "1", "-", "beta1_power", ")", ")", "\n", "\n", "# m_t = beta1 * m + (1 - beta1) * g_t", "\n", "m", "=", "self", ".", "get_slot", "(", "var", ",", "\"m\"", ")", ".", "handle", "\n", "m_scaled_g_values", "=", "grad", "*", "(", "1", "-", "beta1_t", ")", "\n", "m_t", "=", "state_ops", ".", "assign", "(", "m", ",", "beta1_t", "*", "m", "+", "m_scaled_g_values", ",", "use_locking", "=", "self", ".", "_use_locking", ")", "\n", "\n", "# v_t = beta2 * v + (1 - beta2) * (g_t * g_t)", "\n", "v", "=", "self", ".", "get_slot", "(", "var", ",", "\"v\"", ")", ".", "handle", "\n", "v_scaled_g_values", "=", "(", "grad", "*", "grad", ")", "*", "(", "1", "-", "beta2_t", ")", "\n", "v_t", "=", "state_ops", ".", "assign", "(", "v", ",", "beta2_t", "*", "v", "+", "v_scaled_g_values", ",", "use_locking", "=", "self", ".", "_use_locking", ")", "\n", "\n", "# amsgrad", "\n", "vhat", "=", "self", ".", "get_slot", "(", "var", ",", "\"vhat\"", ")", ".", "handle", "\n", "vhat_t", "=", "state_ops", ".", "assign", "(", "vhat", ",", "math_ops", ".", "maximum", "(", "v_t", ",", "vhat", ")", ")", "\n", "v_sqrt", "=", "math_ops", ".", "sqrt", "(", "vhat_t", ")", "\n", "\n", "var_update", "=", "state_ops", ".", "assign_sub", "(", "var", ",", "lr", "*", "m_t", "/", "(", "v_sqrt", "+", "epsilon_t", ")", ",", "use_locking", "=", "self", ".", "_use_locking", ")", "\n", "return", "control_flow_ops", ".", "group", "(", "*", "[", "var_update", ",", "m_t", ",", "v_t", ",", "vhat_t", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.lib.AMSGrad.AMSGrad._apply_sparse_shared": [[111, 141], ["tensorflow.python.ops.math_ops.cast", "tensorflow.python.ops.math_ops.cast", "tensorflow.python.ops.math_ops.cast", "tensorflow.python.ops.math_ops.cast", "tensorflow.python.ops.math_ops.cast", "tensorflow.python.ops.math_ops.cast", "AMSGrad.AMSGrad.get_slot", "tensorflow.python.ops.state_ops.assign", "AMSGrad.AMSGrad.get_slot", "tensorflow.python.ops.state_ops.assign", "AMSGrad.AMSGrad.get_slot", "tensorflow.python.ops.state_ops.assign", "tensorflow.python.ops.math_ops.sqrt", "tensorflow.python.ops.state_ops.assign_sub", "tensorflow.python.ops.control_flow_ops.group", "tensorflow.python.framework.ops.control_dependencies", "scatter_add", "tensorflow.python.framework.ops.control_dependencies", "scatter_add", "tensorflow.python.ops.math_ops.maximum", "tensorflow.python.ops.math_ops.sqrt"], "methods", ["None"], ["", "def", "_apply_sparse_shared", "(", "self", ",", "grad", ",", "var", ",", "indices", ",", "scatter_add", ")", ":", "\n", "        ", "beta1_power", "=", "math_ops", ".", "cast", "(", "self", ".", "_beta1_power", ",", "var", ".", "dtype", ".", "base_dtype", ")", "\n", "beta2_power", "=", "math_ops", ".", "cast", "(", "self", ".", "_beta2_power", ",", "var", ".", "dtype", ".", "base_dtype", ")", "\n", "lr_t", "=", "math_ops", ".", "cast", "(", "self", ".", "_lr_t", ",", "var", ".", "dtype", ".", "base_dtype", ")", "\n", "beta1_t", "=", "math_ops", ".", "cast", "(", "self", ".", "_beta1_t", ",", "var", ".", "dtype", ".", "base_dtype", ")", "\n", "beta2_t", "=", "math_ops", ".", "cast", "(", "self", ".", "_beta2_t", ",", "var", ".", "dtype", ".", "base_dtype", ")", "\n", "epsilon_t", "=", "math_ops", ".", "cast", "(", "self", ".", "_epsilon_t", ",", "var", ".", "dtype", ".", "base_dtype", ")", "\n", "\n", "lr", "=", "(", "lr_t", "*", "math_ops", ".", "sqrt", "(", "1", "-", "beta2_power", ")", "/", "(", "1", "-", "beta1_power", ")", ")", "\n", "\n", "# m_t = beta1 * m + (1 - beta1) * g_t", "\n", "m", "=", "self", ".", "get_slot", "(", "var", ",", "\"m\"", ")", "\n", "m_scaled_g_values", "=", "grad", "*", "(", "1", "-", "beta1_t", ")", "\n", "m_t", "=", "state_ops", ".", "assign", "(", "m", ",", "m", "*", "beta1_t", ",", "use_locking", "=", "self", ".", "_use_locking", ")", "\n", "with", "ops", ".", "control_dependencies", "(", "[", "m_t", "]", ")", ":", "\n", "            ", "m_t", "=", "scatter_add", "(", "m", ",", "indices", ",", "m_scaled_g_values", ")", "\n", "\n", "# v_t = beta2 * v + (1 - beta2) * (g_t * g_t)", "\n", "", "v", "=", "self", ".", "get_slot", "(", "var", ",", "\"v\"", ")", "\n", "v_scaled_g_values", "=", "(", "grad", "*", "grad", ")", "*", "(", "1", "-", "beta2_t", ")", "\n", "v_t", "=", "state_ops", ".", "assign", "(", "v", ",", "v", "*", "beta2_t", ",", "use_locking", "=", "self", ".", "_use_locking", ")", "\n", "with", "ops", ".", "control_dependencies", "(", "[", "v_t", "]", ")", ":", "\n", "            ", "v_t", "=", "scatter_add", "(", "v", ",", "indices", ",", "v_scaled_g_values", ")", "\n", "\n", "# amsgrad", "\n", "", "vhat", "=", "self", ".", "get_slot", "(", "var", ",", "\"vhat\"", ")", "\n", "vhat_t", "=", "state_ops", ".", "assign", "(", "vhat", ",", "math_ops", ".", "maximum", "(", "v_t", ",", "vhat", ")", ")", "\n", "v_sqrt", "=", "math_ops", ".", "sqrt", "(", "vhat_t", ")", "\n", "var_update", "=", "state_ops", ".", "assign_sub", "(", "var", ",", "lr", "*", "m_t", "/", "(", "v_sqrt", "+", "epsilon_t", ")", ",", "use_locking", "=", "self", ".", "_use_locking", ")", "\n", "return", "control_flow_ops", ".", "group", "(", "*", "[", "var_update", ",", "m_t", ",", "v_t", ",", "vhat_t", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.lib.AMSGrad.AMSGrad._apply_sparse": [[142, 147], ["AMSGrad.AMSGrad._apply_sparse_shared", "tensorflow.python.ops.state_ops.scatter_add"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.lib.AMSGrad.AMSGrad._apply_sparse_shared"], ["", "def", "_apply_sparse", "(", "self", ",", "grad", ",", "var", ")", ":", "\n", "        ", "return", "self", ".", "_apply_sparse_shared", "(", "\n", "grad", ".", "values", ",", "var", ",", "grad", ".", "indices", ",", "\n", "lambda", "x", ",", "i", ",", "v", ":", "state_ops", ".", "scatter_add", "(", "# pylint: disable=g-long-lambda", "\n", "x", ",", "i", ",", "v", ",", "use_locking", "=", "self", ".", "_use_locking", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.lib.AMSGrad.AMSGrad._resource_scatter_add": [[148, 152], ["tensorflow.python.framework.ops.control_dependencies", "x.value", "tensorflow.python.ops.resource_variable_ops.resource_scatter_add"], "methods", ["None"], ["", "def", "_resource_scatter_add", "(", "self", ",", "x", ",", "i", ",", "v", ")", ":", "\n", "        ", "with", "ops", ".", "control_dependencies", "(", "\n", "[", "resource_variable_ops", ".", "resource_scatter_add", "(", "x", ".", "handle", ",", "i", ",", "v", ")", "]", ")", ":", "\n", "            ", "return", "x", ".", "value", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.lib.AMSGrad.AMSGrad._resource_apply_sparse": [[153, 156], ["AMSGrad.AMSGrad._apply_sparse_shared"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.lib.AMSGrad.AMSGrad._apply_sparse_shared"], ["", "", "def", "_resource_apply_sparse", "(", "self", ",", "grad", ",", "var", ",", "indices", ")", ":", "\n", "        ", "return", "self", ".", "_apply_sparse_shared", "(", "\n", "grad", ",", "var", ",", "indices", ",", "self", ".", "_resource_scatter_add", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.lib.AMSGrad.AMSGrad._finish": [[157, 169], ["tensorflow.python.ops.control_flow_ops.group", "tensorflow.python.framework.ops.control_dependencies", "tensorflow.python.framework.ops.colocate_with", "AMSGrad.AMSGrad._beta1_power.assign", "AMSGrad.AMSGrad._beta2_power.assign"], "methods", ["None"], ["", "def", "_finish", "(", "self", ",", "update_ops", ",", "name_scope", ")", ":", "\n", "# Update the power accumulators.", "\n", "        ", "with", "ops", ".", "control_dependencies", "(", "update_ops", ")", ":", "\n", "            ", "with", "ops", ".", "colocate_with", "(", "self", ".", "_beta1_power", ")", ":", "\n", "                ", "update_beta1", "=", "self", ".", "_beta1_power", ".", "assign", "(", "\n", "self", ".", "_beta1_power", "*", "self", ".", "_beta1_t", ",", "\n", "use_locking", "=", "self", ".", "_use_locking", ")", "\n", "update_beta2", "=", "self", ".", "_beta2_power", ".", "assign", "(", "\n", "self", ".", "_beta2_power", "*", "self", ".", "_beta2_t", ",", "\n", "use_locking", "=", "self", ".", "_use_locking", ")", "\n", "", "", "return", "control_flow_ops", ".", "group", "(", "*", "update_ops", "+", "[", "update_beta1", ",", "update_beta2", "]", ",", "\n", "name", "=", "name_scope", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bird-tao_clcrn.experiments.dataloader.KernelGenerator.__init__": [[67, 76], ["dataloader.KernelGenerator.get_geo_knn_graph", "numpy.array", "dataloader.KernelGenerator.X2KerInput", "dataloader.KernelGenerator.XY2Ratio"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.experiments.dataloader.KernelGenerator.get_geo_knn_graph", "home.repos.pwc.inspect_result.bird-tao_clcrn.experiments.dataloader.KernelGenerator.X2KerInput", "home.repos.pwc.inspect_result.bird-tao_clcrn.experiments.dataloader.KernelGenerator.XY2Ratio"], ["    ", "def", "__init__", "(", "self", ",", "lonlat", ",", "k_neighbors", "=", "25", ",", "local_map", "=", "'fast'", ")", "->", "None", ":", "\n", "        ", "self", ".", "lonlat", "=", "lonlat", "\n", "self", ".", "k_neighbors", "=", "k_neighbors", "\n", "self", ".", "local_map", "=", "local_map", "\n", "\n", "self", ".", "nbhd_idx", ",", "col", ",", "row", ",", "self", ".", "geodesic", "=", "self", ".", "get_geo_knn_graph", "(", "self", ".", "lonlat", ",", "self", ".", "k_neighbors", ")", "\n", "self", ".", "sparse_idx", "=", "np", ".", "array", "(", "[", "row", ",", "col", "]", ")", "\n", "self", ".", "MLP_inputs", ",", "self", ".", "centers", ",", "self", ".", "points", "=", "self", ".", "X2KerInput", "(", "self", ".", "lonlat", ",", "sparse_idx", "=", "self", ".", "sparse_idx", ",", "k_neighbors", "=", "self", ".", "k_neighbors", ",", "local_map", "=", "self", ".", "local_map", ")", "\n", "_", ",", "self", ".", "ratio_lists", "=", "self", ".", "XY2Ratio", "(", "self", ".", "MLP_inputs", "[", ":", ",", "-", "2", ":", "]", ",", "k_neighbors", "=", "self", ".", "k_neighbors", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.experiments.dataloader.KernelGenerator.get_geo_knn_graph": [[77, 89], ["dataloader.latlon2xyz", "numpy.stack", "numpy.matmul().clip", "numpy.arccos", "nbhd_idx.flatten", "numpy.expand_dims().repeat().flatten", "numpy.argsort", "numpy.matmul", "numpy.expand_dims().repeat", "numpy.sort", "numpy.expand_dims", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.scripts.generate_training_data.latlon2xyz"], ["", "def", "get_geo_knn_graph", "(", "self", ",", "X", ",", "k", "=", "25", ")", ":", "\n", "#X: num_node, dim", "\n", "        ", "lon", "=", "X", "[", ":", ",", "0", "]", "\n", "lat", "=", "X", "[", ":", ",", "1", "]", "\n", "x", ",", "y", ",", "z", "=", "latlon2xyz", "(", "lat", ",", "lon", ")", "\n", "coordinate", "=", "np", ".", "stack", "(", "[", "x", ",", "y", ",", "z", "]", ")", "\n", "product", "=", "np", ".", "matmul", "(", "coordinate", ".", "T", ",", "coordinate", ")", ".", "clip", "(", "min", "=", "-", "1.0", ",", "max", "=", "1.0", ")", "\n", "geodesic", "=", "np", ".", "arccos", "(", "product", ")", "\n", "nbhd_idx", "=", "np", ".", "argsort", "(", "geodesic", ",", "axis", "=", "-", "1", ")", "[", ":", ",", ":", "k", "]", "\n", "col", "=", "nbhd_idx", ".", "flatten", "(", ")", "\n", "row", "=", "np", ".", "expand_dims", "(", "np", ".", "arange", "(", "geodesic", ".", "shape", "[", "0", "]", ")", ",", "axis", "=", "-", "1", ")", ".", "repeat", "(", "k", ",", "axis", "=", "-", "1", ")", ".", "flatten", "(", ")", "\n", "return", "nbhd_idx", ",", "col", ",", "row", ",", "np", ".", "sort", "(", "geodesic", ",", "axis", "=", "-", "1", ")", "[", ":", ",", ":", "k", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.experiments.dataloader.KernelGenerator.X2KerInput": [[90, 135], ["numpy.concatenate().reshape", "torch.from_numpy", "torch.from_numpy", "model.manifold.sphere.Sphere", "torch.stack", "torch.stack", "model.manifold.sphere.Sphere.log_map", "model.manifold.sphere.Sphere.cart3d_to_tangent_local2d", "centers.reshape().numpy.reshape().numpy.reshape().numpy", "local_coor.reshape().numpy.reshape().numpy.reshape().numpy", "numpy.concatenate().reshape", "numpy.concatenate", "centers.reshape().numpy.reshape().numpy.reshape", "torch.stack.reshape", "model.manifold.sphere.Sphere.latlon2xyz", "model.manifold.sphere.Sphere.latlon2xyz", "torch.from_numpy", "torch.from_numpy", "model.manifold.sphere.Sphere", "torch.stack", "torch.stack", "model.manifold.sphere.Sphere.horizon_map", "model.manifold.sphere.Sphere.cart3d_to_ctangent_local2d", "centers.reshape().numpy.reshape().numpy.reshape().numpy", "local_coor.reshape().numpy.reshape().numpy.reshape().numpy", "numpy.concatenate().reshape", "NotImplementedError", "centers.reshape().numpy.reshape().numpy.reshape", "local_coor.reshape().numpy.reshape().numpy.reshape", "numpy.concatenate", "centers.reshape().numpy.reshape().numpy.reshape", "torch.stack.reshape", "model.manifold.sphere.Sphere.latlon2xyz", "model.manifold.sphere.Sphere.latlon2xyz", "centers.reshape().numpy.reshape().numpy.reshape", "local_coor.reshape().numpy.reshape().numpy.reshape", "numpy.concatenate"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.manifold.sphere.Sphere.log_map", "home.repos.pwc.inspect_result.bird-tao_clcrn.manifold.sphere.Sphere.cart3d_to_tangent_local2d", "home.repos.pwc.inspect_result.bird-tao_clcrn.scripts.generate_training_data.latlon2xyz", "home.repos.pwc.inspect_result.bird-tao_clcrn.scripts.generate_training_data.latlon2xyz", "home.repos.pwc.inspect_result.bird-tao_clcrn.manifold.sphere.Sphere.horizon_map", "home.repos.pwc.inspect_result.bird-tao_clcrn.manifold.sphere.Sphere.cart3d_to_ctangent_local2d", "home.repos.pwc.inspect_result.bird-tao_clcrn.scripts.generate_training_data.latlon2xyz", "home.repos.pwc.inspect_result.bird-tao_clcrn.scripts.generate_training_data.latlon2xyz"], ["", "def", "X2KerInput", "(", "self", ",", "x", ",", "sparse_idx", ",", "k_neighbors", ",", "local_map", "=", "'fast'", ")", ":", "\n", "        ", "'''\n        x: the location list of each point\n        sparse_idx: the sparsity matrix of 2*num_nonzero\n        '''", "\n", "sample_num", "=", "x", ".", "shape", "[", "0", "]", "\n", "loc_feature_num", "=", "x", ".", "shape", "[", "1", "]", "\n", "centers", "=", "x", "[", "sparse_idx", "[", "0", "]", "]", "\n", "points", "=", "x", "[", "sparse_idx", "[", "1", "]", "]", "\n", "if", "local_map", "==", "'fast'", ":", "\n", "            ", "delta_x", "=", "points", "-", "centers", "\n", "delta_x", "[", "delta_x", ">", "180", "]", "=", "delta_x", "[", "delta_x", ">", "180", "]", "-", "360", "\n", "delta_x", "[", "delta_x", "<", "-", "180", "]", "=", "delta_x", "[", "delta_x", "<", "-", "180", "]", "+", "360", "\n", "inputs", "=", "np", ".", "concatenate", "(", "(", "centers", ",", "delta_x", ")", ",", "axis", "=", "-", "1", ")", ".", "reshape", "(", "-", "1", ",", "loc_feature_num", "*", "2", ")", "\n", "inputs", "=", "inputs", "/", "180", "*", "np", ".", "pi", "\n", "\n", "", "elif", "local_map", "==", "'log'", ":", "\n", "            ", "centers", "=", "torch", ".", "from_numpy", "(", "centers", ".", "reshape", "(", "-", "1", ",", "k_neighbors", ",", "loc_feature_num", ")", ")", "\n", "points", "=", "torch", ".", "from_numpy", "(", "points", ".", "reshape", "(", "-", "1", ",", "k_neighbors", ",", "loc_feature_num", ")", ")", "\n", "sphere_2d", "=", "Sphere", "(", "2", ")", "\n", "centers_x", "=", "torch", ".", "stack", "(", "Sphere", ".", "latlon2xyz", "(", "centers", "[", ":", ",", "0", ",", "1", "]", ",", "centers", "[", ":", ",", "0", ",", "0", "]", ")", ",", "dim", "=", "-", "1", ")", "\n", "points", "=", "torch", ".", "stack", "(", "Sphere", ".", "latlon2xyz", "(", "points", "[", ":", ",", ":", ",", "1", "]", ",", "points", "[", ":", ",", ":", ",", "0", "]", ")", ",", "dim", "=", "-", "1", ")", "\n", "log_cp", "=", "sphere_2d", ".", "log_map", "(", "centers_x", ",", "points", ")", "\n", "local_coor", "=", "sphere_2d", ".", "cart3d_to_tangent_local2d", "(", "centers_x", ",", "log_cp", ")", "\n", "\n", "centers", "=", "centers", ".", "reshape", "(", "-", "1", ",", "loc_feature_num", ")", ".", "numpy", "(", ")", "\n", "local_coor", "=", "local_coor", ".", "reshape", "(", "-", "1", ",", "loc_feature_num", ")", ".", "numpy", "(", ")", "\n", "inputs", "=", "np", ".", "concatenate", "(", "(", "centers", "/", "180", "*", "np", ".", "pi", ",", "local_coor", ")", ",", "axis", "=", "-", "1", ")", ".", "reshape", "(", "-", "1", ",", "loc_feature_num", "*", "2", ")", "\n", "\n", "", "elif", "local_map", "==", "'horizon'", ":", "\n", "            ", "centers", "=", "torch", ".", "from_numpy", "(", "centers", ".", "reshape", "(", "-", "1", ",", "k_neighbors", ",", "loc_feature_num", ")", ")", "\n", "points", "=", "torch", ".", "from_numpy", "(", "points", ".", "reshape", "(", "-", "1", ",", "k_neighbors", ",", "loc_feature_num", ")", ")", "\n", "sphere_2d", "=", "Sphere", "(", "2", ")", "\n", "centers_x", "=", "torch", ".", "stack", "(", "Sphere", ".", "latlon2xyz", "(", "centers", "[", ":", ",", "0", ",", "1", "]", ",", "centers", "[", ":", ",", "0", ",", "0", "]", ")", ",", "dim", "=", "-", "1", ")", "\n", "points", "=", "torch", ".", "stack", "(", "Sphere", ".", "latlon2xyz", "(", "points", "[", ":", ",", ":", ",", "1", "]", ",", "points", "[", ":", ",", ":", ",", "0", "]", ")", ",", "dim", "=", "-", "1", ")", "\n", "h_cp", "=", "sphere_2d", ".", "horizon_map", "(", "centers_x", ",", "points", ")", "\n", "local_coor", "=", "sphere_2d", ".", "cart3d_to_ctangent_local2d", "(", "centers_x", ",", "h_cp", ")", "\n", "\n", "centers", "=", "centers", ".", "reshape", "(", "-", "1", ",", "loc_feature_num", ")", ".", "numpy", "(", ")", "\n", "local_coor", "=", "local_coor", ".", "reshape", "(", "-", "1", ",", "loc_feature_num", ")", ".", "numpy", "(", ")", "\n", "inputs", "=", "np", ".", "concatenate", "(", "(", "centers", "/", "180", "*", "np", ".", "pi", ",", "local_coor", ")", ",", "axis", "=", "-", "1", ")", ".", "reshape", "(", "-", "1", ",", "loc_feature_num", "*", "2", ")", "\n", "", "else", ":", "\n", "            ", "raise", "NotImplementedError", "(", "'The mapping is not provided.'", ")", "\n", "\n", "", "return", "inputs", ",", "centers", ",", "points", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.experiments.dataloader.KernelGenerator.XY2Ratio": [[136, 162], ["numpy.arctan2", "thetas.reshape.reshape.reshape", "numpy.unique", "numpy.argsort", "numpy.zeros_like", "range", "ratio_lists.append", "numpy.concatenate", "multiples.append", "numpy.array", "numpy.array", "ratios.append", "numpy.array", "numpy.abs", "numpy.abs", "numpy.abs", "numpy.abs"], "methods", ["None"], ["", "def", "XY2Ratio", "(", "self", ",", "X", ",", "k_neighbors", "=", "25", ")", ":", "\n", "        ", "x", "=", "X", "[", ":", ",", "0", "]", "\n", "y", "=", "X", "[", ":", ",", "1", "]", "\n", "thetas", "=", "np", ".", "arctan2", "(", "y", ",", "x", ")", "\n", "thetas", "=", "thetas", ".", "reshape", "(", "-", "1", ",", "k_neighbors", ")", "\n", "ratio_lists", "=", "[", "]", "\n", "multiples", "=", "[", "]", "\n", "for", "theta", "in", "thetas", ":", "\n", "            ", "theta_unique", ",", "counts", "=", "np", ".", "unique", "(", "theta", ",", "return_counts", "=", "True", ")", "\n", "multiple_list", "=", "np", ".", "array", "(", "[", "theta_unique", ",", "counts", "]", ")", ".", "T", "\n", "idx", "=", "np", ".", "argsort", "(", "theta_unique", ")", "\n", "multiple_list", "=", "multiple_list", "[", "idx", "]", "\n", "ratios", "=", "[", "]", "\n", "ratios_theta", "=", "np", ".", "zeros_like", "(", "theta", ")", "\n", "for", "i", "in", "range", "(", "multiple_list", ".", "shape", "[", "0", "]", ")", ":", "\n", "                ", "if", "i", "<", "multiple_list", ".", "shape", "[", "0", "]", "-", "1", ":", "\n", "                    ", "ratio", "=", "(", "np", ".", "abs", "(", "multiple_list", "[", "i", "+", "1", "]", "[", "0", "]", "-", "multiple_list", "[", "i", "]", "[", "0", "]", ")", "+", "np", ".", "abs", "(", "multiple_list", "[", "i", "-", "1", "]", "[", "0", "]", "-", "multiple_list", "[", "i", "]", "[", "0", "]", ")", ")", "/", "(", "2", "*", "2", "*", "np", ".", "pi", ")", "\n", "", "else", ":", "\n", "                    ", "ratio", "=", "(", "np", ".", "abs", "(", "multiple_list", "[", "0", "]", "[", "0", "]", "-", "multiple_list", "[", "i", "]", "[", "0", "]", ")", "+", "np", ".", "abs", "(", "multiple_list", "[", "i", "-", "1", "]", "[", "0", "]", "-", "multiple_list", "[", "i", "]", "[", "0", "]", ")", ")", "/", "(", "2", "*", "2", "*", "np", ".", "pi", ")", "\n", "", "ratio", "=", "ratio", "/", "multiple_list", "[", "i", "]", "[", "1", "]", "\n", "ratios", ".", "append", "(", "ratio", ")", "\n", "ratios_theta", "[", "theta", "==", "multiple_list", "[", "i", "]", "[", "0", "]", "]", "=", "ratio", "\n", "", "ratio_lists", ".", "append", "(", "ratios_theta", ")", "\n", "multiple_list", "=", "np", ".", "concatenate", "(", "[", "multiple_list", ",", "np", ".", "array", "(", "[", "ratios", "]", ")", ".", "T", "]", ",", "axis", "=", "-", "1", ")", "\n", "multiples", ".", "append", "(", "multiple_list", ")", "\n", "", "return", "thetas", ",", "np", ".", "array", "(", "ratio_lists", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.experiments.dataloader.Dataset.__init__": [[167, 186], ["print", "open", "pickle.load", "range", "scaler[].transform", "scaler[].transform"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.lib.utils.StandardScaler.transform", "home.repos.pwc.inspect_result.bird-tao_clcrn.lib.utils.StandardScaler.transform"], ["def", "__init__", "(", "self", ",", "dataset_dir", ",", "mode", ",", "batch_size", ",", "scaler", "=", "None", ",", "include_context", "=", "False", ")", ":", "\n", "        ", "self", ".", "file", "=", "dataset_dir", "\n", "print", "(", "'loading data of {} set...'", ".", "format", "(", "mode", ")", ")", "\n", "with", "open", "(", "dataset_dir", "+", "'/{}.pkl'", ".", "format", "(", "mode", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "self", ".", "x", "=", "data", "[", "'x'", "]", "\n", "self", ".", "y", "=", "data", "[", "'y'", "]", "\n", "self", ".", "include_context", "=", "include_context", "\n", "\n", "if", "include_context", "==", "True", ":", "\n", "            ", "self", ".", "context", "=", "data", "[", "'context'", "]", "\n", "\n", "", "feature_len", "=", "data", "[", "'x'", "]", ".", "shape", "[", "-", "1", "]", "\n", "\n", "if", "scaler", "!=", "None", ":", "\n", "            ", "self", ".", "scaler", "=", "scaler", "\n", "for", "i", "in", "range", "(", "feature_len", ")", ":", "\n", "                ", "self", ".", "x", "[", "...", ",", "i", "]", "=", "scaler", "[", "i", "]", ".", "transform", "(", "self", ".", "x", "[", "...", ",", "i", "]", ")", "\n", "self", ".", "y", "[", "...", ",", "i", "]", "=", "scaler", "[", "i", "]", ".", "transform", "(", "self", ".", "y", "[", "...", ",", "i", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.experiments.dataloader.Dataset.__len__": [[187, 189], ["None"], "methods", ["None"], ["", "", "", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "x", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.experiments.dataloader.Dataset.__getitem__": [[190, 199], ["numpy.concatenate"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "idx", ")", ":", "\n", "        ", "data", "=", "self", ".", "x", "[", "idx", "]", "\n", "labels", "=", "self", ".", "y", "[", "idx", "]", "\n", "\n", "if", "self", ".", "include_context", "==", "True", ":", "\n", "            ", "data_context", "=", "self", ".", "context", "[", "idx", "]", "\n", "data", "=", "np", ".", "concatenate", "(", "[", "data", ",", "data_context", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "", "return", "data", ",", "labels", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bird-tao_clcrn.experiments.dataloader.latlon2xyz": [[16, 23], ["numpy.sin", "numpy.cos", "numpy.cos", "numpy.cos", "numpy.sin"], "function", ["None"], ["def", "latlon2xyz", "(", "lat", ",", "lon", ")", ":", "\n", "    ", "lat", "=", "lat", "*", "np", ".", "pi", "/", "180", "\n", "lon", "=", "lon", "*", "np", ".", "pi", "/", "180", "\n", "x", "=", "np", ".", "cos", "(", "lat", ")", "*", "np", ".", "cos", "(", "lon", ")", "\n", "y", "=", "np", ".", "cos", "(", "lat", ")", "*", "np", ".", "sin", "(", "lon", ")", "\n", "z", "=", "np", ".", "sin", "(", "lat", ")", "\n", "return", "x", ",", "y", ",", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.experiments.dataloader.load_dataset": [[24, 65], ["dataloader.KernelGenerator", "dataloader.Dataset", "dataloader.Dataset", "dataloader.Dataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "open", "pickle.load", "open", "KernelGenerator.geodesic.flatten", "KernelGenerator.ratio_lists.flatten", "lib.utils.StandardScaler", "pickle.load", "range", "train_numpy[].mean", "train_numpy[].std"], "function", ["None"], ["", "def", "load_dataset", "(", "dataset_dir", ",", "batch_size", ",", "position_file", ",", "val_batch_size", "=", "None", ",", "include_context", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "\n", "    ", "if", "val_batch_size", "==", "None", ":", "\n", "        ", "val_batch_size", "=", "batch_size", "\n", "\n", "", "with", "open", "(", "dataset_dir", "+", "'/trn.pkl'", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "data", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "with", "open", "(", "position_file", ",", "'rb'", ")", "as", "f", ":", "\n", "        ", "lonlat", "=", "pickle", ".", "load", "(", "f", ")", "[", "'lonlat'", "]", "\n", "\n", "", "train_numpy", "=", "data", "[", "'x'", "]", "\n", "feature_len", "=", "data", "[", "'x'", "]", ".", "shape", "[", "-", "1", "]", "\n", "\n", "kernel_generator", "=", "KernelGenerator", "(", "lonlat", ")", "\n", "kernel_info", "=", "{", "'sparse_idx'", ":", "kernel_generator", ".", "sparse_idx", ",", "\n", "'MLP_inputs'", ":", "kernel_generator", ".", "MLP_inputs", ",", "\n", "'geodesic'", ":", "kernel_generator", ".", "geodesic", ".", "flatten", "(", ")", ",", "\n", "'angle_ratio'", ":", "kernel_generator", ".", "ratio_lists", ".", "flatten", "(", ")", "}", "\n", "\n", "scaler", "=", "[", "StandardScaler", "(", "mean", "=", "train_numpy", "[", "...", ",", "i", "]", ".", "mean", "(", ")", ",", "std", "=", "train_numpy", "[", "...", ",", "i", "]", ".", "std", "(", ")", ")", "for", "i", "in", "range", "(", "feature_len", ")", "]", "\n", "\n", "train_set", "=", "Dataset", "(", "\n", "dataset_dir", ",", "mode", "=", "'trn'", ",", "batch_size", "=", "batch_size", ",", "scaler", "=", "scaler", ",", "include_context", "=", "include_context", "\n", ")", "\n", "\n", "validation_set", "=", "Dataset", "(", "\n", "dataset_dir", ",", "mode", "=", "'val'", ",", "batch_size", "=", "val_batch_size", ",", "scaler", "=", "scaler", ",", "include_context", "=", "include_context", "\n", ")", "\n", "\n", "test_set", "=", "Dataset", "(", "\n", "dataset_dir", ",", "mode", "=", "'test'", ",", "batch_size", "=", "val_batch_size", ",", "scaler", "=", "scaler", ",", "include_context", "=", "include_context", "\n", ")", "\n", "\n", "data", "=", "{", "}", "\n", "data", "[", "'train_loader'", "]", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "train_set", ",", "batch_size", "=", "batch_size", ",", "shuffle", "=", "True", ",", "num_workers", "=", "4", ")", "\n", "data", "[", "'val_loader'", "]", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "validation_set", ",", "batch_size", "=", "val_batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "4", ")", "\n", "data", "[", "'test_loader'", "]", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "test_set", ",", "batch_size", "=", "val_batch_size", ",", "shuffle", "=", "False", ",", "num_workers", "=", "4", ")", "\n", "data", "[", "'scaler'", "]", "=", "scaler", "\n", "data", "[", "'kernel_info'", "]", "=", "kernel_info", "\n", "\n", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.model.loss.masked_mae_loss": [[3, 11], ["mask.mean", "torch.abs", "torch.abs.mean"], "function", ["None"], ["def", "masked_mae_loss", "(", "y_pred", ",", "y_true", ")", ":", "\n", "    ", "mask", "=", "(", "y_true", "!=", "0", ")", ".", "float", "(", ")", "\n", "mask", "/=", "mask", ".", "mean", "(", ")", "\n", "loss", "=", "torch", ".", "abs", "(", "y_pred", "-", "y_true", ")", "\n", "loss", "=", "loss", "*", "mask", "\n", "# trick for nans: https://discuss.pytorch.org/t/how-to-set-nan-in-tensor-to-0/3918/3", "\n", "loss", "[", "loss", "!=", "loss", "]", "=", "0", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.model.loss.masked_mse_loss": [[12, 20], ["mask.mean", "torch.square", "torch.square.mean"], "function", ["None"], ["", "def", "masked_mse_loss", "(", "y_pred", ",", "y_true", ")", ":", "\n", "    ", "mask", "=", "(", "y_true", "!=", "0", ")", ".", "float", "(", ")", "\n", "mask", "/=", "mask", ".", "mean", "(", ")", "\n", "loss", "=", "torch", ".", "square", "(", "y_pred", "-", "y_true", ")", "\n", "loss", "=", "loss", "*", "mask", "\n", "# trick for nans: https://discuss.pytorch.org/t/how-to-set-nan-in-tensor-to-0/3918/3", "\n", "loss", "[", "loss", "!=", "loss", "]", "=", "0", "\n", "return", "loss", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.model.loss.masked_mape_loss": [[21, 29], ["mask.mean", "loss.abs().mean", "torch.abs", "loss.abs"], "function", ["None"], ["", "def", "masked_mape_loss", "(", "y_pred", ",", "y_true", ")", ":", "\n", "    ", "mask", "=", "(", "y_true", "!=", "0", ")", ".", "float", "(", ")", "\n", "mask", "/=", "mask", ".", "mean", "(", ")", "\n", "loss", "=", "torch", ".", "abs", "(", "y_pred", "-", "y_true", ")", "/", "y_true", "\n", "loss", "=", "loss", "*", "mask", "\n", "# trick for nans: https://discuss.pytorch.org/t/how-to-set-nan-in-tensor-to-0/3918/3", "\n", "loss", "[", "loss", "!=", "loss", "]", "=", "0", "\n", "return", "loss", ".", "abs", "(", ")", ".", "mean", "(", ")", "", "", ""]], "home.repos.pwc.inspect_result.bird-tao_clcrn.manifold.sphere.Sphere.__init__": [[9, 11], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "dim", "=", "2", ")", ":", "\n", "        ", "self", ".", "dim", "=", "dim", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.manifold.sphere.Sphere._is_in_unit_sphere": [[12, 15], ["torch.norm", "torch.abs"], "methods", ["None"], ["", "def", "_is_in_unit_sphere", "(", "self", ",", "x", ")", ":", "\n", "        ", "norm_2", "=", "torch", ".", "norm", "(", "x", ",", "dim", "=", "-", "1", ")", "\n", "return", "~", "(", "torch", ".", "abs", "(", "norm_2", "-", "1", ")", ">", "1e-7", ")", ".", "prod", "(", ")", ".", "bool", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.manifold.sphere.Sphere._ensure_in_unit_sphere": [[16, 18], ["sphere.Sphere._is_in_unit_sphere"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.manifold.sphere.Sphere._is_in_unit_sphere"], ["", "def", "_ensure_in_unit_sphere", "(", "self", ",", "x", ")", ":", "\n", "        ", "assert", "self", ".", "_is_in_unit_sphere", "(", "x", ")", ",", "'One of the given vector is not on the unit sphere'", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.manifold.sphere.Sphere._is_in_tangent_space": [[19, 31], ["sphere.Sphere._ensure_in_unit_sphere", "torch.matmul", "torch.isnan", "torch.abs", "torch.matmul"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.manifold.sphere.Sphere._ensure_in_unit_sphere"], ["", "def", "_is_in_tangent_space", "(", "self", ",", "center", ",", "v", ")", ":", "\n", "        ", "'''\n        inputs:\n            center: (N, self.dim + 1)\n            v: (N, M, self.dim + 1)\n        outputs:\n            if_in_tangence: bool\n        '''", "\n", "self", ".", "_ensure_in_unit_sphere", "(", "center", ")", "\n", "product", "=", "torch", ".", "matmul", "(", "v", ",", "center", "[", ":", ",", ":", ",", "None", "]", ")", "\n", "product", "[", "torch", ".", "isnan", "(", "product", ")", "]", "=", "0.0", "\n", "return", "(", "torch", ".", "abs", "(", "torch", ".", "matmul", "(", "v", ",", "center", "[", ":", ",", ":", ",", "None", "]", ")", ")", "<=", "1e-7", ")", ".", "prod", "(", ")", ".", "bool", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.manifold.sphere.Sphere._ensure_in_tangent_space": [[32, 34], ["sphere.Sphere._is_in_tangent_space"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.manifold.sphere.Sphere._is_in_tangent_space"], ["", "def", "_ensure_in_tangent_space", "(", "self", ",", "center", ",", "v", ")", ":", "\n", "        ", "assert", "self", ".", "_is_in_tangent_space", "(", "center", ",", "v", ")", ",", "'One of the given vector is not on the tangent space'", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.manifold.sphere.Sphere._is_in_ctangent_space": [[35, 49], ["sphere.Sphere._ensure_in_unit_sphere", "torch.matmul", "torch.isnan", "torch.abs", "torch.matmul"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.manifold.sphere.Sphere._ensure_in_unit_sphere"], ["", "def", "_is_in_ctangent_space", "(", "self", ",", "center", ",", "v", ")", ":", "\n", "        ", "'''\n        inputs:\n            center: (N, self.dim + 1)\n            v: (N, M, self.dim + 1)\n        outputs:\n            if_in_tangence: bool\n        '''", "\n", "self", ".", "_ensure_in_unit_sphere", "(", "center", ")", "\n", "v_minus", "=", "v", "[", ":", ",", ":", ",", ":", "-", "1", "]", "\n", "center_minus", "=", "center", "[", ":", ",", ":", "-", "1", "]", "\n", "product", "=", "torch", ".", "matmul", "(", "v_minus", ",", "center_minus", "[", ":", ",", ":", ",", "None", "]", ")", "\n", "product", "[", "torch", ".", "isnan", "(", "product", ")", "]", "=", "0.0", "\n", "return", "(", "torch", ".", "abs", "(", "torch", ".", "matmul", "(", "v_minus", ",", "center_minus", "[", ":", ",", ":", ",", "None", "]", ")", ")", "<=", "1e-7", ")", ".", "prod", "(", ")", ".", "bool", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.manifold.sphere.Sphere._ensure_in_ctangent_space": [[50, 52], ["sphere.Sphere._is_in_ctangent_space"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.manifold.sphere.Sphere._is_in_ctangent_space"], ["", "def", "_ensure_in_ctangent_space", "(", "self", ",", "center", ",", "v", ")", ":", "\n", "        ", "assert", "self", ".", "_is_in_ctangent_space", "(", "center", ",", "v", ")", ",", "'One of the given vector is not on the cylindrical-tangent space'", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.manifold.sphere.Sphere.geo_distance": [[53, 65], ["sphere.Sphere._ensure_in_unit_sphere", "sphere.Sphere._ensure_in_unit_sphere", "torch.arccos", "torch.matmul"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.manifold.sphere.Sphere._ensure_in_unit_sphere", "home.repos.pwc.inspect_result.bird-tao_clcrn.manifold.sphere.Sphere._ensure_in_unit_sphere"], ["", "def", "geo_distance", "(", "self", ",", "u", ",", "v", ")", ":", "\n", "        ", "'''\n        inputs:\n            u: (N, self.dim + 1)\n            v: (N, M, self.dim + 1)\n        outputs:\n            induced_distance(u,v): (N, M)\n        '''", "\n", "assert", "u", ".", "shape", "[", "1", "]", "==", "v", ".", "shape", "[", "2", "]", "==", "self", ".", "dim", "+", "1", ",", "'Dimension is not identical.'", "\n", "self", ".", "_ensure_in_unit_sphere", "(", "u", ")", "\n", "self", ".", "_ensure_in_unit_sphere", "(", "v", ")", "\n", "return", "torch", ".", "arccos", "(", "torch", ".", "matmul", "(", "v", ",", "u", "[", ":", ",", ":", ",", "None", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.manifold.sphere.Sphere.tangent_space_projector": [[66, 82], ["torch.divide", "torch.divide", "torch.matmul", "torch.norm", "torch.norm"], "methods", ["None"], ["", "def", "tangent_space_projector", "(", "self", ",", "x", ",", "v", ")", ":", "\n", "        ", "'''\n        inputs:\n            x: (N, self.dim + 1)\n            v: (N, M, self.dim + 1)\n        outputs:\n            project_x(v): (N, M, self.dim + 1)\n        '''", "\n", "assert", "x", ".", "shape", "[", "1", "]", "==", "v", ".", "shape", "[", "2", "]", ",", "'Dimension is not identical.'", "\n", "\n", "x_normalized", "=", "torch", ".", "divide", "(", "x", ",", "torch", ".", "norm", "(", "x", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", ")", "\n", "v_normalized", "=", "torch", ".", "divide", "(", "v", ",", "torch", ".", "norm", "(", "v", ",", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", ")", "\n", "v_on_x_norm", "=", "torch", ".", "matmul", "(", "v_normalized", ",", "x_normalized", "[", ":", ",", ":", ",", "None", "]", ")", "#N, M, 1", "\n", "v_on_x", "=", "v_on_x_norm", "*", "x_normalized", "[", ":", ",", "None", ",", ":", "]", "#N,M,dim", "\n", "p_x", "=", "v_normalized", "-", "v_on_x", "#N,M,dim", "\n", "return", "p_x", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.manifold.sphere.Sphere.exp_map": [[83, 97], ["sphere.Sphere._ensure_in_unit_sphere", "sphere.Sphere._ensure_in_tangent_space", "torch.norm", "torch.cos", "torch.sin", "torch.divide"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.manifold.sphere.Sphere._ensure_in_unit_sphere", "home.repos.pwc.inspect_result.bird-tao_clcrn.manifold.sphere.Sphere._ensure_in_tangent_space"], ["", "def", "exp_map", "(", "self", ",", "x", ",", "v", ")", ":", "\n", "        ", "'''\n        inputs:\n            x: (N, self.dim + 1)\n            v: (N, M, self.dim + 1) which is on the tangent space of x\n        outputs:\n            exp_x(v): (N, M, self.dim + 1)\n        '''", "\n", "assert", "x", ".", "shape", "[", "1", "]", "==", "v", ".", "shape", "[", "2", "]", "==", "self", ".", "dim", "+", "1", ",", "'Dimension is not identical.'", "\n", "self", ".", "_ensure_in_unit_sphere", "(", "x", ")", "\n", "self", ".", "_ensure_in_tangent_space", "(", "x", ",", "v", ")", "\n", "\n", "v_norm", "=", "torch", ".", "norm", "(", "v", ",", "dim", "=", "-", "1", ")", "[", ":", ",", ":", ",", "None", "]", "# N,M, 1", "\n", "return", "torch", ".", "cos", "(", "v_norm", ")", "*", "x", "[", ":", ",", "None", ",", ":", "]", "+", "torch", ".", "sin", "(", "v_norm", ")", "*", "torch", ".", "divide", "(", "v", ",", "v_norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.manifold.sphere.Sphere.log_map": [[98, 117], ["sphere.Sphere._ensure_in_unit_sphere", "sphere.Sphere._ensure_in_unit_sphere", "sphere.Sphere.tangent_space_projector", "sphere.Sphere.geo_distance", "torch.divide", "torch.norm", "torch.isnan"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.manifold.sphere.Sphere._ensure_in_unit_sphere", "home.repos.pwc.inspect_result.bird-tao_clcrn.manifold.sphere.Sphere._ensure_in_unit_sphere", "home.repos.pwc.inspect_result.bird-tao_clcrn.manifold.sphere.Sphere.tangent_space_projector", "home.repos.pwc.inspect_result.bird-tao_clcrn.manifold.sphere.Sphere.geo_distance"], ["", "def", "log_map", "(", "self", ",", "x", ",", "v", ")", ":", "\n", "        ", "'''\n        inputs:\n            x: (N, self.dim + 1)\n            v: (N, M, self.dim + 1) # v is on the sphere\n        outputs:\n            log_x(v): (N, M, self.dim + 1)\n        '''", "\n", "assert", "x", ".", "shape", "[", "1", "]", "==", "v", ".", "shape", "[", "2", "]", "==", "self", ".", "dim", "+", "1", ",", "'Dimension is not identical.'", "\n", "self", ".", "_ensure_in_unit_sphere", "(", "x", ")", "\n", "self", ".", "_ensure_in_unit_sphere", "(", "v", ")", "\n", "\n", "p_x", "=", "self", ".", "tangent_space_projector", "(", "x", ",", "v", "-", "x", "[", ":", ",", "None", ",", ":", "]", ")", "#N,M,d", "\n", "p_x_norm", "=", "torch", ".", "norm", "(", "p_x", ",", "dim", "=", "-", "1", ")", "[", ":", ",", ":", ",", "None", "]", "#N,M,1", "\n", "distance", "=", "self", ".", "geo_distance", "(", "x", ",", "v", ")", "#N,M,1", "\n", "log_xv", "=", "torch", ".", "divide", "(", "distance", "*", "p_x", ",", "p_x_norm", ")", "\n", "log_xv", "[", "torch", ".", "isnan", "(", "log_xv", ")", "]", "=", "0.0", "# map itself to the origin", "\n", "\n", "return", "log_xv", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.manifold.sphere.Sphere.horizon_map": [[118, 140], ["sphere.Sphere._ensure_in_unit_sphere", "sphere.Sphere._ensure_in_unit_sphere", "sphere.Sphere.tangent_space_projector", "torch.cat", "sphere.Sphere.geo_distance", "torch.divide", "torch.norm", "torch.isnan"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.manifold.sphere.Sphere._ensure_in_unit_sphere", "home.repos.pwc.inspect_result.bird-tao_clcrn.manifold.sphere.Sphere._ensure_in_unit_sphere", "home.repos.pwc.inspect_result.bird-tao_clcrn.manifold.sphere.Sphere.tangent_space_projector", "home.repos.pwc.inspect_result.bird-tao_clcrn.manifold.sphere.Sphere.geo_distance"], ["", "def", "horizon_map", "(", "self", ",", "x", ",", "v", ")", ":", "\n", "        ", "'''\n        inputs:\n            x: (N, self.dim + 1)\n            v: (N, M, self.dim + 1) # v is on the sphere\n        outputs:\n            H_x(v): (N, M, self.dim + 1)\n        '''", "\n", "assert", "x", ".", "shape", "[", "1", "]", "==", "v", ".", "shape", "[", "2", "]", "==", "self", ".", "dim", "+", "1", ",", "'Dimension is not identical.'", "\n", "self", ".", "_ensure_in_unit_sphere", "(", "x", ")", "\n", "self", ".", "_ensure_in_unit_sphere", "(", "v", ")", "\n", "\n", "x_minus", "=", "x", "[", ":", ",", ":", "-", "1", "]", "\n", "v_minus", "=", "v", "[", ":", ",", ":", ",", ":", "-", "1", "]", "\n", "p_x_minus", "=", "self", ".", "tangent_space_projector", "(", "x_minus", ",", "v_minus", "-", "x_minus", "[", ":", ",", "None", ",", ":", "]", ")", "\n", "p_x", "=", "torch", ".", "cat", "(", "[", "p_x_minus", ",", "v", "[", ":", ",", ":", ",", "[", "-", "1", "]", "]", "-", "x", "[", ":", ",", "None", ",", "[", "-", "1", "]", "]", "]", ",", "dim", "=", "-", "1", ")", "\n", "p_x_norm", "=", "torch", ".", "norm", "(", "p_x", ",", "dim", "=", "-", "1", ")", "[", ":", ",", ":", ",", "None", "]", "\n", "distance", "=", "self", ".", "geo_distance", "(", "x", ",", "v", ")", "\n", "H_xv", "=", "torch", ".", "divide", "(", "distance", "*", "p_x", ",", "p_x_norm", ")", "\n", "H_xv", "[", "torch", ".", "isnan", "(", "H_xv", ")", "]", "=", "0.0", "# map itself to the origin", "\n", "\n", "return", "H_xv", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.manifold.sphere.Sphere.cart3d_to_ctangent_local2d": [[141, 165], ["sphere.Sphere._ensure_in_ctangent_space", "sphere.Sphere.xyz2latlon", "v.sum", "torch.stack", "torch.matmul", "torch.cat", "torch.cos", "torch.zeros_like", "torch.sin"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.manifold.sphere.Sphere._ensure_in_ctangent_space", "home.repos.pwc.inspect_result.bird-tao_clcrn.manifold.sphere.Sphere.xyz2latlon"], ["", "def", "cart3d_to_ctangent_local2d", "(", "self", ",", "x", ",", "v", ")", ":", "\n", "        ", "'''\n        inputs:\n            x: (N, 3)\n            v: (N, M, 3) # v is on the ctangent space of x\n        outputs:\n            \\Pi_x(v): (N, M, 2)\n        '''", "\n", "assert", "x", ".", "shape", "[", "1", "]", "==", "v", ".", "shape", "[", "2", "]", "==", "3", ",", "'the method can only used for 2d sphere, so the input should be in R^3.'", "\n", "self", ".", "_ensure_in_ctangent_space", "(", "x", ",", "v", ")", "\n", "x1", "=", "x", "[", ":", ",", "0", "]", "\n", "x2", "=", "x", "[", ":", ",", "1", "]", "\n", "x3", "=", "x", "[", ":", ",", "2", "]", "\n", "lat", ",", "lon", "=", "self", ".", "xyz2latlon", "(", "x1", ",", "x2", ",", "x3", ")", "\n", "\n", "v_temp", "=", "v", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "idx_zero", "=", "(", "v_temp", "==", "0", ")", "\n", "\n", "e_phi", "=", "torch", ".", "stack", "(", "[", "-", "torch", ".", "sin", "(", "lon", ")", ",", "torch", ".", "cos", "(", "lon", ")", ",", "torch", ".", "zeros_like", "(", "lon", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "v_phi", "=", "torch", ".", "matmul", "(", "v", ",", "e_phi", "[", ":", ",", ":", ",", "None", "]", ")", "\n", "v_phi", "[", "idx_zero", "]", "=", "0", "\n", "v_z", "=", "v", "[", ":", ",", ":", ",", "[", "-", "1", "]", "]", "\n", "v_z", "[", "idx_zero", "]", "=", "0", "\n", "return", "torch", ".", "cat", "(", "[", "v_phi", ",", "v_z", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.manifold.sphere.Sphere.cart3d_to_tangent_local2d": [[166, 192], ["sphere.Sphere._ensure_in_tangent_space", "sphere.Sphere.xyz2latlon", "torch.stack", "torch.stack", "v.sum", "torch.matmul", "torch.matmul", "torch.cat", "torch.cos", "torch.cos", "torch.zeros_like", "torch.sin", "torch.cos", "torch.sin", "torch.sin", "torch.sin"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.manifold.sphere.Sphere._ensure_in_tangent_space", "home.repos.pwc.inspect_result.bird-tao_clcrn.manifold.sphere.Sphere.xyz2latlon"], ["", "def", "cart3d_to_tangent_local2d", "(", "self", ",", "x", ",", "v", ")", ":", "\n", "        ", "'''\n        inputs:\n            x: (N, 3)\n            v: (N, M, 3) # v is on the tangent space of x\n        outputs:\n            \\Pi_x(v): (N, M, 2)\n        '''", "\n", "assert", "x", ".", "shape", "[", "1", "]", "==", "v", ".", "shape", "[", "2", "]", "==", "3", ",", "'the method can only used for 2d sphere, so the input should be in R^3.'", "\n", "self", ".", "_ensure_in_tangent_space", "(", "x", ",", "v", ")", "\n", "\n", "x1", "=", "x", "[", ":", ",", "0", "]", "\n", "x2", "=", "x", "[", ":", ",", "1", "]", "\n", "x3", "=", "x", "[", ":", ",", "2", "]", "\n", "lat", ",", "lon", "=", "self", ".", "xyz2latlon", "(", "x1", ",", "x2", ",", "x3", ")", "\n", "e_theta", "=", "torch", ".", "stack", "(", "[", "torch", ".", "sin", "(", "lat", ")", "*", "torch", ".", "cos", "(", "lon", ")", ",", "torch", ".", "sin", "(", "lat", ")", "*", "torch", ".", "sin", "(", "lon", ")", ",", "torch", ".", "cos", "(", "lat", ")", "]", ",", "dim", "=", "-", "1", ")", "#N,3", "\n", "e_phi", "=", "torch", ".", "stack", "(", "[", "-", "torch", ".", "sin", "(", "lon", ")", ",", "torch", ".", "cos", "(", "lon", ")", ",", "torch", ".", "zeros_like", "(", "lon", ")", "]", ",", "dim", "=", "-", "1", ")", "#N,3", "\n", "\n", "v_temp", "=", "v", ".", "sum", "(", "dim", "=", "-", "1", ",", "keepdim", "=", "True", ")", "\n", "idx_zero", "=", "(", "v_temp", "==", "0", ")", "\n", "\n", "v_theta", "=", "torch", ".", "matmul", "(", "v", "-", "x", "[", ":", ",", "None", ",", ":", "]", ",", "e_theta", "[", ":", ",", ":", ",", "None", "]", ")", "#N,M,1", "\n", "v_theta", "[", "idx_zero", "]", "=", "0", "\n", "v_phi", "=", "torch", ".", "matmul", "(", "v", "-", "x", "[", ":", ",", "None", ",", ":", "]", ",", "e_phi", "[", ":", ",", ":", ",", "None", "]", ")", "#N,M,1", "\n", "v_phi", "[", "idx_zero", "]", "=", "0", "\n", "return", "torch", ".", "cat", "(", "[", "v_theta", ",", "v_phi", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.manifold.sphere.Sphere.latlon2xyz": [[193, 202], ["torch.sin", "torch.cos", "torch.cos", "torch.cos", "torch.sin"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "latlon2xyz", "(", "self", ",", "lat", ",", "lon", ",", "is_input_degree", "=", "True", ")", ":", "\n", "        ", "if", "is_input_degree", "==", "True", ":", "\n", "            ", "lat", "=", "lat", "*", "math", ".", "pi", "/", "180", "\n", "lon", "=", "lon", "*", "math", ".", "pi", "/", "180", "\n", "", "x", "=", "torch", ".", "cos", "(", "lat", ")", "*", "torch", ".", "cos", "(", "lon", ")", "\n", "y", "=", "torch", ".", "cos", "(", "lat", ")", "*", "torch", ".", "sin", "(", "lon", ")", "\n", "z", "=", "torch", ".", "sin", "(", "lat", ")", "\n", "return", "x", ",", "y", ",", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.manifold.sphere.Sphere.xyz2latlon": [[203, 208], ["torch.atan2", "torch.atan2", "torch.norm", "torch.stack"], "methods", ["None"], ["", "@", "classmethod", "\n", "def", "xyz2latlon", "(", "self", ",", "x", ",", "y", ",", "z", ")", ":", "\n", "        ", "lat", "=", "torch", ".", "atan2", "(", "z", ",", "torch", ".", "norm", "(", "torch", ".", "stack", "(", "[", "x", ",", "y", "]", ",", "dim", "=", "-", "1", ")", ",", "dim", "=", "-", "1", ")", ")", "\n", "lon", "=", "torch", ".", "atan2", "(", "y", ",", "x", ")", "\n", "return", "lat", ",", "lon", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.clcnn.graphconv.GraphConv.__init__": [[4, 11], ["torch.Module.__init__", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "input_dim", ",", "output_dim", ",", "max_view", ",", "conv", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "conv", "=", "conv", "\n", "self", ".", "max_view", "=", "max_view", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "input_dim", "*", "max_view", ",", "output_dim", ")", "\n", "# self.norm = nn.LayerNorm(output_dim)#normalization at the channel", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.clcnn.graphconv.GraphConv.forward": [[13, 18], ["graphconv.GraphConv.conv", "graphconv.GraphConv.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "x", "=", "self", ".", "linear", "(", "x", ")", "\n", "# x = self.norm(x)", "\n", "return", "x", "", "", "", ""]], "home.repos.pwc.inspect_result.bird-tao_clcrn.clcnn.seq2seq.Seq2SeqAttrs.__init__": [[4, 30], ["int", "int", "int", "int", "int", "int", "int", "int", "model_kwargs.get", "int", "int", "int", "int", "int", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor().to_dense", "model_kwargs.get", "model_kwargs.get", "model_kwargs.get", "model_kwargs.get", "model_kwargs.get", "model_kwargs.get", "model_kwargs.get", "model_kwargs.get", "model_kwargs.get", "model_kwargs.get", "model_kwargs.get", "model_kwargs.get", "model_kwargs.get", "torch.eye().to", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.eye"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "sparse_idx", ",", "angle_ratio", ",", "geodesic", ",", "**", "model_kwargs", ")", ":", "\n", "        ", "self", ".", "sparse_idx", "=", "sparse_idx", "\n", "self", ".", "max_view", "=", "int", "(", "model_kwargs", ".", "get", "(", "'max_view'", ",", "2", ")", ")", "\n", "self", ".", "cl_decay_steps", "=", "int", "(", "model_kwargs", ".", "get", "(", "'cl_decay_steps'", ",", "1000", ")", ")", "\n", "self", ".", "node_num", "=", "int", "(", "model_kwargs", ".", "get", "(", "'node_num'", ",", "6", ")", ")", "\n", "self", ".", "layer_num", "=", "int", "(", "model_kwargs", ".", "get", "(", "'layer_num'", ",", "2", ")", ")", "\n", "self", ".", "rnn_units", "=", "int", "(", "model_kwargs", ".", "get", "(", "'rnn_units'", ",", "32", ")", ")", "\n", "self", ".", "input_dim", "=", "int", "(", "model_kwargs", ".", "get", "(", "'input_dim'", ",", "2", ")", ")", "\n", "self", ".", "output_dim", "=", "int", "(", "model_kwargs", ".", "get", "(", "'output_dim'", ",", "2", ")", ")", "\n", "self", ".", "seq_len", "=", "int", "(", "model_kwargs", ".", "get", "(", "'seq_len'", ",", "12", ")", ")", "\n", "self", ".", "lck_structure", "=", "model_kwargs", ".", "get", "(", "'lckstructure'", ",", "[", "4", ",", "8", "]", ")", "\n", "self", ".", "embed_dim", "=", "int", "(", "model_kwargs", ".", "get", "(", "'embed_dim'", ",", "16", ")", ")", "\n", "self", ".", "location_dim", "=", "int", "(", "model_kwargs", ".", "get", "(", "'location_dim'", ",", "16", ")", ")", "\n", "self", ".", "horizon", "=", "int", "(", "model_kwargs", ".", "get", "(", "'horizon'", ",", "16", ")", ")", "\n", "self", ".", "hidden_units", "=", "int", "(", "model_kwargs", ".", "get", "(", "'hidden_units'", ",", "16", ")", ")", "\n", "self", ".", "block_num", "=", "int", "(", "model_kwargs", ".", "get", "(", "'block_num'", ",", "2", ")", ")", "\n", "angle_ratio", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "\n", "self", ".", "sparse_idx", ",", "\n", "angle_ratio", ",", "\n", "(", "self", ".", "node_num", ",", "self", ".", "node_num", ")", "\n", ")", ".", "to_dense", "(", ")", "\n", "self", ".", "angle_ratio", "=", "angle_ratio", "+", "torch", ".", "eye", "(", "*", "angle_ratio", ".", "shape", ")", ".", "to", "(", "angle_ratio", ".", "device", ")", "\n", "self", ".", "geodesic", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "\n", "self", ".", "sparse_idx", ",", "\n", "geodesic", ",", "\n", "(", "self", ".", "node_num", ",", "self", ".", "node_num", ")", "\n", ")", ".", "to_dense", "(", ")", ""]], "home.repos.pwc.inspect_result.bird-tao_clcrn.clcnn.clccell.CLCRNCell.__init__": [[7, 41], ["super().__init__", "graphconv.GraphConv", "graphconv.GraphConv"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "num_units", ",", "\n", "sparse_idx", ",", "\n", "max_view", ",", "\n", "node_num", ",", "\n", "num_feature", ",", "\n", "conv_ker", ",", "\n", "num_embedding", ",", "\n", "nonlinearity", "=", "'tanh'", "\n", ")", ":", "\n", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_activation", "=", "torch", ".", "tanh", "if", "nonlinearity", "==", "'tanh'", "else", "torch", ".", "relu", "\n", "self", ".", "_node_num", "=", "node_num", "\n", "self", ".", "_num_feature", "=", "num_feature", "\n", "self", ".", "_num_units", "=", "num_units", "\n", "self", ".", "_max_view", "=", "max_view", "\n", "self", ".", "_sparse_idx", "=", "sparse_idx", "\n", "self", ".", "_num_embedding", "=", "num_embedding", "\n", "self", ".", "conv_ker", "=", "conv_ker", "\n", "\n", "self", ".", "ru_gconv", "=", "GraphConv", "(", "\n", "input_dim", "=", "self", ".", "_num_embedding", ",", "\n", "output_dim", "=", "self", ".", "_num_units", "*", "2", ",", "\n", "max_view", "=", "self", ".", "_max_view", ",", "\n", "conv", "=", "conv_ker", "\n", ")", "\n", "self", ".", "c_gconv", "=", "GraphConv", "(", "\n", "input_dim", "=", "self", ".", "_num_embedding", ",", "\n", "output_dim", "=", "self", ".", "_num_units", ",", "\n", "max_view", "=", "self", ".", "_max_view", ",", "\n", "conv", "=", "conv_ker", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.clcnn.clccell.CLCRNCell.forward": [[44, 66], ["clccell.CLCRNCell._concat", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "torch.reshape", "clccell.CLCRNCell._concat", "clccell.CLCRNCell.c_gconv", "clccell.CLCRNCell.ru_gconv", "clccell.CLCRNCell._activation"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.clcnn.clccell.CLCRNCell._concat", "home.repos.pwc.inspect_result.bird-tao_clcrn.clcnn.clccell.CLCRNCell._concat"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "hx", ")", ":", "\n", "        ", "\"\"\"Gated recurrent unit (GRU) with Graph Convolution.\n        :param inputs: (B, node_num, input_dim) \n        :param hx: (B, node_num, rnn_units)\n        :param t: (B, num_time_feature)\n        :return\n        - Output: A `3-D` tensor with shaconv=conv_kerconv=conv_kerconv=conv_kerconv=conv_kerconv=conv_kerconv=conv_kerconv=conv_kerconv=conv_kerpe `(B, node_num, rnn_units)`.\n        \"\"\"", "\n", "\n", "conv_in_ru", "=", "self", ".", "_concat", "(", "inputs", ",", "hx", ")", "\n", "value", "=", "torch", ".", "sigmoid", "(", "self", ".", "ru_gconv", "(", "conv_in_ru", ")", ")", "\n", "r", ",", "u", "=", "torch", ".", "split", "(", "tensor", "=", "value", ",", "split_size_or_sections", "=", "self", ".", "_num_units", ",", "dim", "=", "-", "1", ")", "\n", "r", "=", "torch", ".", "reshape", "(", "r", ",", "(", "-", "1", ",", "self", ".", "_node_num", ",", "self", ".", "_num_units", ")", ")", "\n", "u", "=", "torch", ".", "reshape", "(", "u", ",", "(", "-", "1", ",", "self", ".", "_node_num", ",", "self", ".", "_num_units", ")", ")", "\n", "conv_in_c", "=", "self", ".", "_concat", "(", "inputs", ",", "r", "*", "hx", ")", "\n", "c", "=", "self", ".", "c_gconv", "(", "conv_in_c", ")", "\n", "\n", "if", "self", ".", "_activation", "is", "not", "None", ":", "\n", "            ", "c", "=", "self", ".", "_activation", "(", "c", ")", "\n", "", "new_state", "=", "u", "*", "hx", "+", "(", "1.0", "-", "u", ")", "*", "c", "\n", "\n", "return", "new_state", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.clcnn.clccell.CLCRNCell._concat": [[67, 70], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_concat", "(", "x", ",", "x_", ")", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "[", "x", ",", "x_", "]", ",", "dim", "=", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.clcnn.clconv.ConvAttrs.__init__": [[6, 24], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "\n", "location_dim", ",", "\n", "sparse_idx", ",", "\n", "node_num", ",", "\n", "lck_structure", ",", "\n", "local_graph_coor", ",", "\n", "angle_ratio", ",", "\n", "geodesic", ",", "\n", "max_view", ")", ":", "\n", "\n", "        ", "self", ".", "location_dim", "=", "location_dim", "\n", "self", ".", "node_num", "=", "node_num", "\n", "self", ".", "sparse_idx", "=", "sparse_idx", "\n", "self", ".", "local_graph_coor", "=", "local_graph_coor", "\n", "self", ".", "angle_ratio", "=", "angle_ratio", "\n", "self", ".", "geodesic", "=", "geodesic", "\n", "self", ".", "max_view", "=", "max_view", "\n", "self", ".", "lck_structure", "=", "lck_structure", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.clcnn.clconv.Attention.__init__": [[26, 30], ["torch.Module.__init__", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "location_dim", ",", "embed_dim", "=", "8", ")", ":", "\n", "        ", "super", "(", "Attention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "query_linear", "=", "nn", ".", "Linear", "(", "location_dim", ",", "embed_dim", ")", "\n", "self", ".", "key_linear", "=", "nn", ".", "Linear", "(", "location_dim", ",", "embed_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.clcnn.clconv.Attention.forward": [[31, 40], ["clconv.Attention.query_linear", "clconv.Attention.key_linear", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul.squeeze", "torch.matmul.squeeze", "torch.matmul.squeeze", "clconv.Attention.transpose"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "q", ",", "k", ")", ":", "\n", "        ", "'''\n        q: b, l, n, f\n        k: b, l, n, f\n        '''", "\n", "q", "=", "self", ".", "query_linear", "(", "q", ")", "\n", "k", "=", "self", ".", "key_linear", "(", "k", ")", "\n", "att", "=", "torch", ".", "matmul", "(", "q", ",", "k", ".", "transpose", "(", "-", "2", ",", "-", "1", ")", ")", "\n", "return", "att", ".", "squeeze", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.clcnn.clconv.CLConv.__init__": [[42, 60], ["super().__init__", "clconv.ConvAttrs.__init__", "clconv.LocalConditionalKer", "clconv.Attention"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN.__init__", "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "location_dim", ",", "\n", "sparse_idx", ",", "\n", "node_num", ",", "\n", "lck_structure", ",", "\n", "local_graph_coor", ",", "\n", "angle_ratio", ",", "\n", "geodesic", ",", "\n", "max_view", "\n", ")", ":", "\n", "        ", "super", "(", "CLConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "ConvAttrs", ".", "__init__", "(", "self", ",", "location_dim", ",", "sparse_idx", ",", "node_num", ",", "lck_structure", ",", "\n", "local_graph_coor", ",", "angle_ratio", ",", "geodesic", ",", "max_view", ")", "\n", "assert", "(", "local_graph_coor", ".", "shape", "[", "-", "1", "]", "==", "location_dim", "*", "2", ")", "\n", "\n", "self", ".", "lcker", "=", "LocalConditionalKer", "(", "location_dim", ",", "lck_structure", ")", "\n", "self", ".", "weight_att", "=", "Attention", "(", "location_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.clcnn.clconv.CLConv.conv_kernel": [[61, 74], ["clconv.CLConv.lcker", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor().to_dense", "sphere_coor.reshape.reshape.reshape", "clconv.CLConv.weight_att().abs", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor().to_dense", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "clconv.CLConv.weight_att", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor", "torch.sparse.FloatTensor().to_dense.flatten", "torch.sparse.FloatTensor().to_dense.flatten", "torch.sparse.FloatTensor().to_dense.flatten", "torch.sparse.FloatTensor().to_dense.flatten", "torch.sparse.FloatTensor().to_dense.flatten", "torch.sparse.FloatTensor().to_dense.flatten"], "methods", ["None"], ["", "def", "conv_kernel", "(", "self", ",", "coor", ")", ":", "\n", "        ", "lcker", "=", "self", ".", "lcker", "(", "coor", ")", "\n", "lcker", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "self", ".", "sparse_idx", ",", "lcker", ".", "flatten", "(", ")", ",", "(", "self", ".", "node_num", ",", "self", ".", "node_num", ")", ")", ".", "to_dense", "(", ")", "\n", "sphere_coor", "=", "coor", "[", ":", ",", ":", "self", ".", "location_dim", "]", "+", "coor", "[", ":", ",", "self", ".", "location_dim", ":", "]", "\n", "sphere_coor", "=", "sphere_coor", ".", "reshape", "(", "self", ".", "node_num", ",", "-", "1", ",", "self", ".", "location_dim", ")", "\n", "center_points", "=", "sphere_coor", "[", ":", ",", "[", "0", "]", ",", ":", "]", "\n", "neighbor_points", "=", "sphere_coor", "\n", "alpha", "=", "self", ".", "weight_att", "(", "center_points", ",", "neighbor_points", ")", ".", "abs", "(", ")", "\n", "alpha", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "self", ".", "sparse_idx", ",", "alpha", ".", "flatten", "(", ")", ",", "(", "self", ".", "node_num", ",", "self", ".", "node_num", ")", ")", ".", "to_dense", "(", ")", "\n", "distance_decay", "=", "(", "-", "alpha", "*", "self", ".", "geodesic", ")", ".", "exp", "(", ")", "\n", "angle_ratio", "=", "self", ".", "angle_ratio", "\n", "\n", "return", "lcker", "*", "distance_decay", "*", "angle_ratio", "\n", "# return lcker * distance_decay", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.clcnn.clconv.CLConv.forward": [[81, 85], ["clconv.CLConv.conv_kernel", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "torch.pow", "range"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.clcnn.clconv.CLConv.conv_kernel"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "kernel", "=", "self", ".", "conv_kernel", "(", "self", ".", "local_graph_coor", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "torch", ".", "matmul", "(", "torch", ".", "pow", "(", "kernel", ",", "i", "+", "1", ")", ",", "x", ")", "for", "i", "in", "range", "(", "self", ".", "max_view", ")", "]", ",", "dim", "=", "-", "1", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.clcnn.clconv.CLConv.kernel_prattern": [[86, 102], ["centers[].repeat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "clconv.CLConv.lcker().flatten", "torch.square().sum().sqrt", "torch.square().sum().sqrt", "torch.square().sum().sqrt", "torch.square().sum().sqrt", "torch.square().sum().sqrt", "torch.square().sum().sqrt", "torch.square().sum().sqrt", "torch.square().sum().sqrt", "torch.square().sum().sqrt", "clconv.CLConv.weight_att().abs", "ker_patterns.append", "clconv.CLConv.lcker", "torch.square().sum", "torch.square().sum", "torch.square().sum", "torch.square().sum", "torch.square().sum", "torch.square().sum", "torch.square().sum", "torch.square().sum", "torch.square().sum", "clconv.CLConv.weight_att", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square", "torch.square"], "methods", ["None"], ["", "def", "kernel_prattern", "(", "self", ",", "centers", ",", "vs", ",", "angle_ratio", ")", ":", "\n", "        ", "'''\n        centers: (N, 2)\n        vs: (N, M, 2)\n        '''", "\n", "M", "=", "vs", ".", "shape", "[", "1", "]", "\n", "centers", "=", "centers", "[", ":", ",", "None", ",", ":", "]", ".", "repeat", "(", "1", ",", "M", ",", "1", ")", "\n", "coor", "=", "torch", ".", "cat", "(", "[", "centers", ",", "vs", "]", ",", "dim", "=", "-", "1", ")", "\n", "ker_patterns", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "coor", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "lcker", "=", "self", ".", "lcker", "(", "coor", "[", "i", "]", ")", ".", "flatten", "(", ")", "\n", "geodesics", "=", "torch", ".", "square", "(", "vs", "[", "i", "]", ")", ".", "sum", "(", "dim", "=", "-", "1", ")", ".", "sqrt", "(", ")", "\n", "alpha", "=", "self", ".", "weight_att", "(", "centers", "[", "i", "]", ",", "vs", "[", "i", "]", ")", ".", "abs", "(", ")", "\n", "distance_decay", "=", "(", "-", "alpha", "[", "0", "]", "*", "geodesics", ")", ".", "exp", "(", ")", "\n", "ker_patterns", ".", "append", "(", "lcker", "*", "distance_decay", "*", "angle_ratio", ")", "\n", "", "return", "torch", ".", "stack", "(", "ker_patterns", ",", "dim", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.clcnn.clconv.LocalConditionalKer.__init__": [[104, 123], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "clconv.LocalConditionalKer.network.append", "range", "clconv.LocalConditionalKer.network.append", "torch.Linear", "torch.Linear", "torch.Linear", "clconv.LocalConditionalKer.network.append", "clconv.LocalConditionalKer.network.append", "torch.Linear", "torch.Linear", "torch.Linear", "len", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "location_dim", ",", "structure", ",", "activation", "=", "'tanh'", ")", ":", "\n", "        ", "super", "(", "LocalConditionalKer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "'''Initialize the generator.\n        '''", "\n", "self", ".", "structure", "=", "structure", "\n", "self", ".", "network", "=", "nn", ".", "ModuleList", "(", ")", "\n", "self", ".", "network", ".", "append", "(", "nn", ".", "Linear", "(", "location_dim", "*", "2", ",", "self", ".", "structure", "[", "0", "]", ")", ")", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "structure", ")", "-", "1", ")", ":", "\n", "            ", "self", ".", "network", ".", "append", "(", "\n", "nn", ".", "Linear", "(", "self", ".", "structure", "[", "i", "]", ",", "self", ".", "structure", "[", "i", "+", "1", "]", ")", "\n", ")", "\n", "self", ".", "network", ".", "append", "(", "\n", "nn", ".", "BatchNorm1d", "(", "self", ".", "structure", "[", "i", "+", "1", "]", ")", "\n", ")", "\n", "", "self", ".", "network", ".", "append", "(", "nn", ".", "Linear", "(", "self", ".", "structure", "[", "-", "1", "]", ",", "1", ")", ")", "\n", "\n", "if", "activation", "==", "'tanh'", ":", "\n", "            ", "self", ".", "activation", "=", "torch", ".", "tanh", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.clcnn.clconv.LocalConditionalKer.forward": [[124, 130], ["enumerate", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "layer", "clconv.LocalConditionalKer.activation"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "for", "j", ",", "layer", "in", "enumerate", "(", "self", ".", "network", ")", ":", "\n", "            ", "if", "j", "!=", "1", ":", "\n", "                ", "x", "=", "self", ".", "activation", "(", "x", ")", "\n", "", "x", "=", "layer", "(", "x", ")", "\n", "", "return", "torch", ".", "relu", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bird-tao_clcrn.attention.clcstn.MSTGCNBlock.__init__": [[19, 40], ["torch.Module.__init__", "graphconv.GraphConv", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "clcstn.MSTGCNBlock._reset_parameters"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN.__init__", "home.repos.pwc.inspect_result.bird-tao_clcrn.attention.mstgcn.MSTGCN._reset_parameters"], ["def", "__init__", "(", "self", ",", "in_channels", ":", "int", ",", "conv_ker", ",", "max_view", ":", "int", ",", "nb_chev_filter", ":", "int", ",", "\n", "nb_time_filter", ":", "int", ",", "time_strides", ":", "int", ")", ":", "\n", "        ", "super", "(", "MSTGCNBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "conv_ker", "=", "conv_ker", "\n", "self", ".", "conv", "=", "GraphConv", "(", "\n", "input_dim", "=", "in_channels", ",", "\n", "output_dim", "=", "nb_chev_filter", ",", "\n", "max_view", "=", "max_view", ",", "\n", "conv", "=", "conv_ker", "\n", ")", "\n", "self", ".", "_time_conv", "=", "nn", ".", "Conv2d", "(", "nb_chev_filter", ",", "nb_time_filter", ",", "\n", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "time_strides", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ")", "\n", "\n", "self", ".", "_residual_conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "nb_time_filter", ",", "\n", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "time_strides", ")", ")", "\n", "\n", "self", ".", "_layer_norm", "=", "nn", ".", "LayerNorm", "(", "nb_time_filter", ")", "\n", "self", ".", "nb_time_filter", "=", "nb_time_filter", "\n", "\n", "self", ".", "_reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.attention.clcstn.MSTGCNBlock._reset_parameters": [[41, 47], ["clcstn.MSTGCNBlock.parameters", "p.dim", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_"], "methods", ["None"], ["", "def", "_reset_parameters", "(", "self", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "", "else", ":", "\n", "                ", "nn", ".", "init", ".", "uniform_", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.attention.clcstn.MSTGCNBlock.forward": [[48, 71], ["torch.relu", "torch.relu", "torch.relu", "clcstn.MSTGCNBlock.permute", "clcstn.MSTGCNBlock._time_conv", "clcstn.MSTGCNBlock._residual_conv", "clcstn.MSTGCNBlock._layer_norm", "X.permute.permute.permute", "clcstn.MSTGCNBlock.conv", "X.permute.permute.permute", "torch.relu().permute", "torch.relu().permute", "torch.relu().permute", "torch.relu", "torch.relu", "torch.relu"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ":", "torch", ".", "FloatTensor", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "\"\"\"\n        Making a forward pass with a single MSTGCN block.\n\n        Arg types:\n            * X (PyTorch FloatTensor) - Node features for T time periods, with shape (B, N_nodes, F_in, T_in). \n            * edge_index (PyTorch LongTensor): Edge indices, can be an array of a list of Tensor arrays, depending on whether edges change over time.\n\n        Return types:\n            * X (PyTorch FloatTensor) - Hidden state tensor for all nodes, with shape (B, N_nodes, nb_time_filter, T_out).\n        \"\"\"", "\n", "\n", "num_of_timesteps", ",", "batch_size", ",", "num_of_vertices", ",", "in_channels", "=", "X", ".", "shape", "\n", "\n", "X_tilde", "=", "X", "\n", "X_tilde", "=", "F", ".", "relu", "(", "self", ".", "conv", "(", "x", "=", "X_tilde", ")", ")", "# num_of_timesteps, batch_size, num_of_vertices, nb_time_filter", "\n", "X_tilde", "=", "X_tilde", ".", "permute", "(", "1", ",", "3", ",", "2", ",", "0", ")", "# batch_size, nb_time_filter, num_of_vertices, num_of_timesteps", "\n", "\n", "X_tilde", "=", "self", ".", "_time_conv", "(", "X_tilde", ")", "\n", "X", "=", "self", ".", "_residual_conv", "(", "X", ".", "permute", "(", "1", ",", "3", ",", "2", ",", "0", ")", ")", "\n", "X", "=", "self", ".", "_layer_norm", "(", "F", ".", "relu", "(", "X", "+", "X_tilde", ")", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", ")", "\n", "X", "=", "X", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.attention.clcstn.CLCSTN.__init__": [[89, 106], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "clcstn.CLCSTN._blocklist.extend", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "clcstn.CLCSTN._reset_parameters", "int", "clcstn.MSTGCNBlock", "clcstn.MSTGCNBlock", "range"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN.__init__", "home.repos.pwc.inspect_result.bird-tao_clcrn.attention.mstgcn.MSTGCN._reset_parameters"], ["def", "__init__", "(", "self", ",", "nb_block", ":", "int", ",", "input_dim", ":", "int", ",", "output_dim", ":", "int", ",", "max_view", ":", "int", ",", "nb_chev_filter", ":", "int", ",", "\n", "nb_time_filter", ":", "int", ",", "time_strides", ":", "int", ",", "seq_len", ":", "int", ",", "horizon", ":", "int", ",", "conv_ker", ",", "embed_dim", "=", "None", ",", "\n", "**", "model_kwargs", ")", ":", "\n", "        ", "super", "(", "CLCSTN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "horizon", "=", "horizon", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "conv_ker", "=", "conv_ker", "\n", "if", "embed_dim", "is", "not", "None", ":", "\n", "            ", "self", ".", "input_dim", "=", "input_dim", "+", "embed_dim", "*", "2", "\n", "", "self", ".", "_blocklist", "=", "nn", ".", "ModuleList", "(", "[", "MSTGCNBlock", "(", "self", ".", "input_dim", ",", "self", ".", "conv_ker", ",", "max_view", ",", "nb_chev_filter", ",", "nb_time_filter", ",", "time_strides", ")", "]", ")", "\n", "\n", "self", ".", "_blocklist", ".", "extend", "(", "[", "MSTGCNBlock", "(", "nb_time_filter", ",", "self", ".", "conv_ker", ",", "max_view", ",", "nb_chev_filter", ",", "nb_time_filter", ",", "1", ")", "for", "_", "in", "range", "(", "nb_block", "-", "1", ")", "]", ")", "\n", "\n", "self", ".", "_final_conv", "=", "nn", ".", "Conv2d", "(", "int", "(", "seq_len", "/", "time_strides", ")", ",", "seq_len", "*", "output_dim", ",", "kernel_size", "=", "(", "1", ",", "nb_time_filter", ")", ")", "\n", "\n", "self", ".", "_reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.attention.clcstn.CLCSTN._reset_parameters": [[107, 116], ["clcstn.CLCSTN.parameters", "p.dim", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_"], "methods", ["None"], ["", "def", "_reset_parameters", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Resetting the model parameters.\n        \"\"\"", "\n", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "", "else", ":", "\n", "                ", "nn", ".", "init", ".", "uniform_", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.attention.clcstn.CLCSTN.forward": [[117, 131], ["clcstn.CLCSTN._final_conv", "block.reshape", "block.permute", "block", "block.permute"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ":", "torch", ".", "FloatTensor", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "\n", "        ", "T_in", ",", "B", ",", "N_nodes", ",", "F_in", "=", "X", ".", "shape", "\n", "F_out", "=", "self", ".", "output_dim", "\n", "T_out", "=", "self", ".", "horizon", "\n", "\n", "for", "block", "in", "self", ".", "_blocklist", ":", "\n", "            ", "X", "=", "block", "(", "X", ")", "\n", "\n", "", "X", "=", "self", ".", "_final_conv", "(", "X", ".", "permute", "(", "1", ",", "0", ",", "2", ",", "3", ")", ")", "\n", "X", "=", "X", "[", ":", ",", ":", ",", ":", ",", "-", "1", "]", "\n", "X", "=", "X", ".", "reshape", "(", "B", ",", "T_out", ",", "F_out", ",", "N_nodes", ")", "\n", "X", "=", "X", ".", "permute", "(", "1", ",", "0", ",", "3", ",", "2", ")", "\n", "return", "X", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bird-tao_clcrn.attention.attention_model.CLCSTNModel.__init__": [[11, 43], ["super().__init__", "seq2seq.Seq2SeqAttrs.__init__", "attention_model.CLCSTNModel.register_buffer", "torch.Linear", "torch.Linear", "clconv.CLConv", "clcstn.CLCSTN", "torch.Parameter", "torch.Parameter", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "int"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN.__init__", "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "loc_info", ",", "sparse_idx", ",", "geodesic", ",", "angle_ratio", ",", "logger", "=", "None", ",", "**", "model_kwargs", ")", ":", "\n", "        ", "'''\n        Conditional Local Convolution Recurrent Network, implemented based on DCRNN,\n        Args:\n            loc_info (torch.Tensor): location infomation of each nodes, with the shape (node_num, location_dim). For sphercial signals, location_dim=2.\n            sparse_idx (torch.Tensor): sparse_idx with the shape (2, node_num * nbhd_num).\n            geodesic (torch.Tensor): geodesic distance between each point and its neighbors, with the shape (node_num * nbhd_num), corresponding to sparse_idx.\n            angle_ratio (torch.Tensor): the defined angle ratio contributing to orientation density, with the shape (node_num * nbhd_num), corresponding to sparse_idx.\n            model_kwargs (dict): Other model args see the config.yaml.\n        '''", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "Seq2SeqAttrs", ".", "__init__", "(", "self", ",", "sparse_idx", ",", "geodesic", ",", "angle_ratio", ",", "**", "model_kwargs", ")", "\n", "self", ".", "register_buffer", "(", "'node_embeddings'", ",", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "node_num", ",", "self", ".", "embed_dim", ")", ",", "requires_grad", "=", "True", ")", ")", "\n", "self", ".", "feature_embedding", "=", "nn", ".", "Linear", "(", "self", ".", "input_dim", ",", "self", ".", "embed_dim", ")", "\n", "self", ".", "_logger", "=", "logger", "\n", "self", ".", "conv_ker", "=", "CLConv", "(", "\n", "self", ".", "location_dim", ",", "\n", "self", ".", "sparse_idx", ",", "\n", "self", ".", "node_num", ",", "\n", "self", ".", "lck_structure", ",", "\n", "loc_info", ",", "\n", "self", ".", "angle_ratio", ",", "\n", "self", ".", "geodesic", ",", "\n", "self", ".", "max_view", "\n", ")", "\n", "self", ".", "network", "=", "CLCSTN", "(", "\n", "nb_block", "=", "self", ".", "block_num", ",", "\n", "nb_chev_filter", "=", "self", ".", "hidden_units", ",", "\n", "nb_time_filter", "=", "self", ".", "hidden_units", ",", "\n", "time_strides", "=", "int", "(", "self", ".", "seq_len", "/", "2", ")", ",", "\n", "conv_ker", "=", "self", ".", "conv_ker", ",", "\n", "**", "model_kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.attention.attention_model.CLCSTNModel.embedding": [[45, 52], ["attention_model.CLCSTNModel.feature_embedding", "attention_model.CLCSTNModel.node_embeddings[].expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "embedding", "(", "self", ",", "inputs", ")", ":", "\n", "# inputs: b, l, n, f", "\n", "# outputs: b, l, n, e*2", "\n", "        ", "batch_size", ",", "seq_len", ",", "node_num", ",", "feature_size", "=", "inputs", ".", "shape", "\n", "feature_emb", "=", "self", ".", "feature_embedding", "(", "inputs", ")", "\n", "node_emb", "=", "self", ".", "node_embeddings", "[", "None", ",", "None", ",", ":", ",", ":", "]", ".", "expand", "(", "batch_size", ",", "seq_len", ",", "node_num", ",", "self", ".", "embed_dim", ")", "\n", "return", "torch", ".", "cat", "(", "[", "feature_emb", ",", "node_emb", ",", "inputs", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.attention.attention_model.CLCSTNModel.forward": [[53, 68], ["attention_model.CLCSTNModel.embedding", "attention_model.CLCSTNModel.network", "attention_model.CLCSTNModel._logger.info", "attention_model.count_parameters"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.seq2seq_model.CLCRNModel.embedding", "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.seq2seq_model.count_parameters"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "labels", "=", "None", ",", "batches_seen", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        seq2seq forward pass\n        :param inputs: shape (seq_len, batch_size, num_sensor, input_dim)\n        :param labels: shape (horizon, batch_size, num_sensor, output_dim)\n        :param batches_seen: batches seen till now\n        :return: output: (self.horizon, batch_size, self.node_num * self.output_dim)\n        \"\"\"", "\n", "embedding", "=", "self", ".", "embedding", "(", "inputs", ")", "\n", "outputs", "=", "self", ".", "network", "(", "embedding", ")", "\n", "if", "batches_seen", "==", "0", ":", "\n", "            ", "self", ".", "_logger", ".", "info", "(", "\n", "\"Total trainable parameters {}\"", ".", "format", "(", "count_parameters", "(", "self", ")", ")", "\n", ")", "\n", "", "return", "outputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bird-tao_clcrn.attention.attention_model.count_parameters": [[6, 8], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["from", ".", ".", "clconv", "import", "CLConv", "\n", "def", "count_parameters", "(", "model", ")", ":", "\n", "    ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.attention.seq2seq.Seq2SeqAttrs.__init__": [[4, 20], ["int", "int", "int", "int", "int", "int", "int", "int", "model_kwargs.get", "int", "int", "int", "int", "int", "model_kwargs.get", "model_kwargs.get", "model_kwargs.get", "model_kwargs.get", "model_kwargs.get", "model_kwargs.get", "model_kwargs.get", "model_kwargs.get", "model_kwargs.get", "model_kwargs.get", "model_kwargs.get", "model_kwargs.get", "model_kwargs.get"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "sparse_idx", ",", "angle_ratio", ",", "geodesic", ",", "**", "model_kwargs", ")", ":", "\n", "        ", "self", ".", "sparse_idx", "=", "sparse_idx", "\n", "self", ".", "max_view", "=", "int", "(", "model_kwargs", ".", "get", "(", "'max_view'", ",", "2", ")", ")", "\n", "self", ".", "cl_decay_steps", "=", "int", "(", "model_kwargs", ".", "get", "(", "'cl_decay_steps'", ",", "1000", ")", ")", "\n", "self", ".", "node_num", "=", "int", "(", "model_kwargs", ".", "get", "(", "'node_num'", ",", "6", ")", ")", "\n", "self", ".", "layer_num", "=", "int", "(", "model_kwargs", ".", "get", "(", "'layer_num'", ",", "2", ")", ")", "\n", "self", ".", "rnn_units", "=", "int", "(", "model_kwargs", ".", "get", "(", "'rnn_units'", ",", "32", ")", ")", "\n", "self", ".", "input_dim", "=", "int", "(", "model_kwargs", ".", "get", "(", "'input_dim'", ",", "2", ")", ")", "\n", "self", ".", "output_dim", "=", "int", "(", "model_kwargs", ".", "get", "(", "'output_dim'", ",", "2", ")", ")", "\n", "self", ".", "seq_len", "=", "int", "(", "model_kwargs", ".", "get", "(", "'seq_len'", ",", "12", ")", ")", "\n", "self", ".", "lck_structure", "=", "model_kwargs", ".", "get", "(", "'lckstructure'", ",", "[", "4", ",", "8", "]", ")", "\n", "self", ".", "embed_dim", "=", "int", "(", "model_kwargs", ".", "get", "(", "'embed_dim'", ",", "16", ")", ")", "\n", "self", ".", "location_dim", "=", "int", "(", "model_kwargs", ".", "get", "(", "'location_dim'", ",", "16", ")", ")", "\n", "self", ".", "horizon", "=", "int", "(", "model_kwargs", ".", "get", "(", "'horizon'", ",", "16", ")", ")", "\n", "self", ".", "hidden_units", "=", "int", "(", "model_kwargs", ".", "get", "(", "'hidden_units'", ",", "16", ")", ")", "\n", "self", ".", "block_num", "=", "int", "(", "model_kwargs", ".", "get", "(", "'block_num'", ",", "2", ")", ")", "\n", "angle_ratio", "=", "torch", ".", "sparse", ".", "FloatTensor", "(", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.attention.astgcn.ChebConvAttention.__init__": [[48, 67], ["kwargs.setdefault", "torch_geometric.nn.conv.MessagePassing.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "astgcn.ChebConvAttention._reset_parameters", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "astgcn.ChebConvAttention.register_parameter", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN.__init__", "home.repos.pwc.inspect_result.bird-tao_clcrn.attention.mstgcn.MSTGCN._reset_parameters"], ["def", "__init__", "(", "self", ",", "in_channels", ":", "int", ",", "out_channels", ":", "int", ",", "K", ":", "int", ",", "normalization", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "bias", ":", "bool", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "        ", "kwargs", ".", "setdefault", "(", "'aggr'", ",", "'add'", ")", "\n", "super", "(", "ChebConvAttention", ",", "self", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "assert", "K", ">", "0", "\n", "assert", "normalization", "in", "[", "None", ",", "'sym'", ",", "'rw'", "]", ",", "'Invalid normalization'", "\n", "\n", "self", ".", "_in_channels", "=", "in_channels", "\n", "self", ".", "_out_channels", "=", "out_channels", "\n", "self", ".", "_normalization", "=", "normalization", "\n", "self", ".", "_weight", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "K", ",", "in_channels", ",", "out_channels", ")", ")", "\n", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "_bias", "=", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'_bias'", ",", "None", ")", "\n", "\n", "", "self", ".", "_reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.attention.astgcn.ChebConvAttention._reset_parameters": [[68, 72], ["torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_"], "methods", ["None"], ["", "def", "_reset_parameters", "(", "self", ")", ":", "\n", "        ", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "_weight", ")", "\n", "if", "self", ".", "_bias", "is", "not", "None", ":", "\n", "            ", "nn", ".", "init", ".", "uniform_", "(", "self", ".", "_bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.attention.astgcn.ChebConvAttention.__norm__": [[73, 96], ["astgcn.ChebConvAttention.", "torch_geometric.utils.get_laplacian", "edge_weight.masked_fill_", "astgcn.ChebConvAttention.", "lambda_max.numel", "float"], "methods", ["None"], ["", "", "def", "__norm__", "(", "self", ",", "edge_index", ",", "num_nodes", ":", "Optional", "[", "int", "]", ",", "\n", "edge_weight", ":", "OptTensor", ",", "normalization", ":", "Optional", "[", "str", "]", ",", "\n", "lambda_max", ",", "dtype", ":", "Optional", "[", "int", "]", "=", "None", ",", "\n", "batch", ":", "OptTensor", "=", "None", ")", ":", "\n", "\n", "        ", "edge_index", ",", "edge_weight", "=", "remove_self_loops", "(", "edge_index", ",", "edge_weight", ")", "\n", "\n", "edge_index", ",", "edge_weight", "=", "get_laplacian", "(", "edge_index", ",", "edge_weight", ",", "\n", "normalization", ",", "dtype", ",", "\n", "num_nodes", ")", "\n", "\n", "if", "batch", "is", "not", "None", "and", "lambda_max", ".", "numel", "(", ")", ">", "1", ":", "\n", "            ", "lambda_max", "=", "lambda_max", "[", "batch", "[", "edge_index", "[", "0", "]", "]", "]", "\n", "\n", "", "edge_weight", "=", "(", "2.0", "*", "edge_weight", ")", "/", "lambda_max", "\n", "edge_weight", ".", "masked_fill_", "(", "edge_weight", "==", "float", "(", "'inf'", ")", ",", "0", ")", "\n", "\n", "edge_index", ",", "edge_weight", "=", "add_self_loops", "(", "edge_index", ",", "edge_weight", ",", "\n", "fill_value", "=", "-", "1.", ",", "\n", "num_nodes", "=", "num_nodes", ")", "\n", "assert", "edge_weight", "is", "not", "None", "\n", "\n", "return", "edge_index", ",", "edge_weight", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.attention.astgcn.ChebConvAttention.forward": [[97, 149], ["astgcn.ChebConvAttention.__norm__", "x.size", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "range", "ValueError", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "isinstance", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "x.size", "astgcn.ChebConvAttention._weight.size", "astgcn.ChebConvAttention.propagate", "astgcn.ChebConvAttention._weight.size", "astgcn.ChebConvAttention.propagate", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.attention.astgcn.ChebConvAttention.__norm__"], ["", "def", "forward", "(", "self", ",", "x", ":", "torch", ".", "FloatTensor", ",", "edge_index", ":", "torch", ".", "LongTensor", ",", "\n", "spatial_attention", ":", "torch", ".", "FloatTensor", ",", "edge_weight", ":", "OptTensor", "=", "None", ",", "\n", "batch", ":", "OptTensor", "=", "None", ",", "lambda_max", ":", "OptTensor", "=", "None", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "\"\"\"\n        Making a forward pass of the ChebConv Attention layer.\n        \n        Arg types:\n            * x (PyTorch Float Tensor) - Node features for T time periods, with shape (B, N_nodes, F_in).\n            * edge_index (Tensor array) - Edge indices.\n            * spatial_attention (PyTorch Float Tensor) - Spatial attention weights, with shape (B, N_nodes, N_nodes).\n            * edge_weight (PyTorch Float Tensor, optional) - Edge weights corresponding to edge indices.\n            * batch (PyTorch Tensor, optional) - Batch labels for each edge.\n            * lambda_max (optional, but mandatory if normalization is None) - Largest eigenvalue of Laplacian.\n\n        Return types:\n            * out (PyTorch Float Tensor) - Hidden state tensor for all nodes, with shape (B, N_nodes, F_out).\n        \"\"\"", "\n", "if", "self", ".", "_normalization", "!=", "'sym'", "and", "lambda_max", "is", "None", ":", "\n", "            ", "raise", "ValueError", "(", "'You need to pass `lambda_max` to `forward() in`'", "\n", "'case the normalization is non-symmetric.'", ")", "\n", "\n", "", "if", "lambda_max", "is", "None", ":", "\n", "            ", "lambda_max", "=", "torch", ".", "tensor", "(", "2.0", ",", "dtype", "=", "x", ".", "dtype", ",", "device", "=", "x", ".", "device", ")", "\n", "", "if", "not", "isinstance", "(", "lambda_max", ",", "torch", ".", "Tensor", ")", ":", "\n", "            ", "lambda_max", "=", "torch", ".", "tensor", "(", "lambda_max", ",", "dtype", "=", "x", ".", "dtype", ",", "\n", "device", "=", "x", ".", "device", ")", "\n", "", "assert", "lambda_max", "is", "not", "None", "\n", "\n", "edge_index", ",", "norm", "=", "self", ".", "__norm__", "(", "edge_index", ",", "x", ".", "size", "(", "self", ".", "node_dim", ")", ",", "\n", "edge_weight", ",", "self", ".", "_normalization", ",", "\n", "lambda_max", ",", "dtype", "=", "x", ".", "dtype", ",", "\n", "batch", "=", "batch", ")", "\n", "row", ",", "col", "=", "edge_index", "\n", "Att_norm", "=", "norm", "*", "spatial_attention", "[", ":", ",", "row", ",", "col", "]", "\n", "num_nodes", "=", "x", ".", "size", "(", "self", ".", "node_dim", ")", "\n", "TAx_0", "=", "torch", ".", "matmul", "(", "(", "torch", ".", "eye", "(", "num_nodes", ")", ".", "to", "(", "edge_index", ".", "device", ")", "*", "spatial_attention", ")", ".", "permute", "(", "0", ",", "2", ",", "1", ")", ",", "x", ")", "\n", "out", "=", "torch", ".", "matmul", "(", "TAx_0", ",", "self", ".", "_weight", "[", "0", "]", ")", "\n", "edge_index_transpose", "=", "edge_index", "[", "[", "1", ",", "0", "]", "]", "\n", "if", "self", ".", "_weight", ".", "size", "(", "0", ")", ">", "1", ":", "\n", "            ", "TAx_1", "=", "self", ".", "propagate", "(", "edge_index_transpose", ",", "x", "=", "TAx_0", ",", "norm", "=", "Att_norm", ",", "size", "=", "None", ")", "\n", "out", "=", "out", "+", "torch", ".", "matmul", "(", "TAx_1", ",", "self", ".", "_weight", "[", "1", "]", ")", "\n", "\n", "", "for", "k", "in", "range", "(", "2", ",", "self", ".", "_weight", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "TAx_2", "=", "self", ".", "propagate", "(", "edge_index_transpose", ",", "x", "=", "TAx_1", ",", "norm", "=", "norm", ",", "size", "=", "None", ")", "\n", "TAx_2", "=", "2.", "*", "TAx_2", "-", "TAx_0", "\n", "out", "=", "out", "+", "torch", ".", "matmul", "(", "TAx_2", ",", "self", ".", "_weight", "[", "k", "]", ")", "\n", "TAx_0", ",", "TAx_1", "=", "TAx_1", ",", "TAx_2", "\n", "\n", "", "if", "self", ".", "_bias", "is", "not", "None", ":", "\n", "            ", "out", "+=", "self", ".", "_bias", "\n", "\n", "", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.attention.astgcn.ChebConvAttention.message": [[150, 156], ["norm.dim", "norm.view", "norm.view"], "methods", ["None"], ["", "def", "message", "(", "self", ",", "x_j", ",", "norm", ")", ":", "\n", "        ", "if", "norm", ".", "dim", "(", ")", "==", "1", ":", "\n", "            ", "return", "norm", ".", "view", "(", "-", "1", ",", "1", ")", "*", "x_j", "\n", "", "else", ":", "\n", "            ", "d1", ",", "d2", "=", "norm", ".", "shape", "\n", "return", "norm", ".", "view", "(", "d1", ",", "d2", ",", "1", ")", "*", "x_j", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.attention.astgcn.ChebConvAttention.__repr__": [[157, 161], ["astgcn.ChebConvAttention._weight.size"], "methods", ["None"], ["", "", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "'{}({}, {}, K={}, normalization={})'", ".", "format", "(", "\n", "self", ".", "__class__", ".", "__name__", ",", "self", ".", "_in_channels", ",", "self", ".", "_out_channels", ",", "\n", "self", ".", "_weight", ".", "size", "(", "0", ")", ",", "self", ".", "_normalization", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.attention.astgcn.SpatialAttention.__init__": [[173, 182], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "astgcn.SpatialAttention._reset_parameters", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN.__init__", "home.repos.pwc.inspect_result.bird-tao_clcrn.attention.mstgcn.MSTGCN._reset_parameters"], ["def", "__init__", "(", "self", ",", "in_channels", ":", "int", ",", "num_of_vertices", ":", "int", ",", "num_of_timesteps", ":", "int", ")", ":", "\n", "        ", "super", "(", "SpatialAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_W1", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "num_of_timesteps", ")", ")", "\n", "self", ".", "_W2", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "in_channels", ",", "num_of_timesteps", ")", ")", "\n", "self", ".", "_W3", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "in_channels", ")", ")", "\n", "self", ".", "_bs", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "1", ",", "num_of_vertices", ",", "num_of_vertices", ")", ")", "\n", "self", ".", "_Vs", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "num_of_vertices", ",", "num_of_vertices", ")", ")", "\n", "self", ".", "_reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.attention.astgcn.SpatialAttention._reset_parameters": [[183, 189], ["astgcn.SpatialAttention.parameters", "p.dim", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_"], "methods", ["None"], ["", "def", "_reset_parameters", "(", "self", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "", "else", ":", "\n", "                ", "nn", ".", "init", ".", "uniform_", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.attention.astgcn.SpatialAttention.forward": [[191, 207], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul().transpose", "torch.matmul().transpose", "torch.matmul().transpose", "torch.matmul().transpose", "torch.matmul().transpose", "torch.matmul().transpose", "torch.matmul().transpose", "torch.matmul().transpose", "torch.matmul().transpose", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.softmax", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ":", "torch", ".", "FloatTensor", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "\"\"\"\n        Making a forward pass of the spatial attention layer.\n        \n        Arg types:\n            * **X** (PyTorch FloatTensor) - Node features for T time periods, with shape (B, N_nodes, F_in, T_in).\n\n        Return types:\n            * **S** (PyTorch FloatTensor) - Spatial attention score matrices, with shape (B, N_nodes, N_nodes).\n        \"\"\"", "\n", "\n", "LHS", "=", "torch", ".", "matmul", "(", "torch", ".", "matmul", "(", "X", ",", "self", ".", "_W1", ")", ",", "self", ".", "_W2", ")", "\n", "RHS", "=", "torch", ".", "matmul", "(", "self", ".", "_W3", ",", "X", ")", ".", "transpose", "(", "-", "1", ",", "-", "2", ")", "\n", "S", "=", "torch", ".", "matmul", "(", "self", ".", "_Vs", ",", "torch", ".", "sigmoid", "(", "torch", ".", "matmul", "(", "LHS", ",", "RHS", ")", "+", "self", ".", "_bs", ")", ")", "\n", "S", "=", "F", ".", "softmax", "(", "S", ",", "dim", "=", "1", ")", "\n", "return", "S", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.attention.astgcn.TemporalAttention.__init__": [[220, 229], ["torch.Module.__init__", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.Parameter", "astgcn.TemporalAttention._reset_parameters", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor", "torch.FloatTensor"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN.__init__", "home.repos.pwc.inspect_result.bird-tao_clcrn.attention.mstgcn.MSTGCN._reset_parameters"], ["def", "__init__", "(", "self", ",", "in_channels", ":", "int", ",", "num_of_vertices", ":", "int", ",", "num_of_timesteps", ":", "int", ")", ":", "\n", "        ", "super", "(", "TemporalAttention", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_U1", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "num_of_vertices", ")", ")", "\n", "self", ".", "_U2", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "in_channels", ",", "num_of_vertices", ")", ")", "\n", "self", ".", "_U3", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "in_channels", ")", ")", "\n", "self", ".", "_be", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "1", ",", "num_of_timesteps", ",", "num_of_timesteps", ")", ")", "\n", "self", ".", "_Ve", "=", "nn", ".", "Parameter", "(", "torch", ".", "FloatTensor", "(", "num_of_timesteps", ",", "num_of_timesteps", ")", ")", "\n", "self", ".", "_reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.attention.astgcn.TemporalAttention._reset_parameters": [[230, 236], ["astgcn.TemporalAttention.parameters", "p.dim", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_"], "methods", ["None"], ["", "def", "_reset_parameters", "(", "self", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "", "else", ":", "\n", "                ", "nn", ".", "init", ".", "uniform_", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.attention.astgcn.TemporalAttention.forward": [[237, 252], ["torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.softmax", "torch.softmax", "torch.softmax", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "X.permute", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ":", "torch", ".", "FloatTensor", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "\"\"\"\n        Making a forward pass of the temporal attention layer.\n       \n        Arg types:\n            * **X** (PyTorch FloatTensor) - Node features for T time periods, with shape (B, N_nodes, F_in, T_in).\n\n        Return types:\n            * **E** (PyTorch FloatTensor) - Temporal attention score matrices, with shape (B, T_in, T_in).\n        \"\"\"", "\n", "LHS", "=", "torch", ".", "matmul", "(", "torch", ".", "matmul", "(", "X", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", ",", "self", ".", "_U1", ")", ",", "self", ".", "_U2", ")", "\n", "RHS", "=", "torch", ".", "matmul", "(", "self", ".", "_U3", ",", "X", ")", "\n", "E", "=", "torch", ".", "matmul", "(", "self", ".", "_Ve", ",", "torch", ".", "sigmoid", "(", "torch", ".", "matmul", "(", "LHS", ",", "RHS", ")", "+", "self", ".", "_be", ")", ")", "\n", "E", "=", "F", ".", "softmax", "(", "E", ",", "dim", "=", "1", ")", "\n", "return", "E", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.attention.astgcn.ASTGCNBlock.__init__": [[285, 299], ["torch.Module.__init__", "astgcn.TemporalAttention", "astgcn.SpatialAttention", "astgcn.ChebConvAttention", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "astgcn.ASTGCNBlock._reset_parameters"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN.__init__", "home.repos.pwc.inspect_result.bird-tao_clcrn.attention.mstgcn.MSTGCN._reset_parameters"], ["def", "__init__", "(", "self", ",", "in_channels", ":", "int", ",", "K", ":", "int", ",", "nb_chev_filter", ":", "int", ",", "nb_time_filter", ":", "int", ",", "\n", "time_strides", ":", "int", ",", "num_of_vertices", ":", "int", ",", "num_of_timesteps", ":", "int", ",", "\n", "normalization", ":", "Optional", "[", "str", "]", "=", "None", ",", "bias", ":", "bool", "=", "True", ")", ":", "\n", "        ", "super", "(", "ASTGCNBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_temporal_attention", "=", "TemporalAttention", "(", "in_channels", ",", "num_of_vertices", ",", "num_of_timesteps", ")", "\n", "self", ".", "_spatial_attention", "=", "SpatialAttention", "(", "in_channels", ",", "num_of_vertices", ",", "num_of_timesteps", ")", "\n", "self", ".", "_chebconv_attention", "=", "ChebConvAttention", "(", "in_channels", ",", "nb_chev_filter", ",", "K", ",", "normalization", ",", "bias", ")", "\n", "self", ".", "_time_convolution", "=", "nn", ".", "Conv2d", "(", "nb_chev_filter", ",", "nb_time_filter", ",", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "time_strides", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ")", "\n", "self", ".", "_residual_convolution", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "nb_time_filter", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "time_strides", ")", ")", "\n", "self", ".", "_layer_norm", "=", "nn", ".", "LayerNorm", "(", "nb_time_filter", ")", "\n", "self", ".", "_normalization", "=", "normalization", "\n", "\n", "self", ".", "_reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.attention.astgcn.ASTGCNBlock._reset_parameters": [[300, 306], ["astgcn.ASTGCNBlock.parameters", "p.dim", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_"], "methods", ["None"], ["", "def", "_reset_parameters", "(", "self", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "", "else", ":", "\n", "                ", "nn", ".", "init", ".", "uniform_", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.attention.astgcn.ASTGCNBlock.forward": [[307, 352], ["astgcn.ASTGCNBlock._temporal_attention", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "astgcn.ASTGCNBlock.reshape", "astgcn.ASTGCNBlock._spatial_attention", "astgcn.ASTGCNBlock._time_convolution", "astgcn.ASTGCNBlock._residual_convolution", "astgcn.ASTGCNBlock._layer_norm", "X.permute.permute.permute", "X.permute.permute.reshape", "isinstance", "torch_geometric.data.Data", "range", "torch.relu", "torch.relu", "torch.relu", "range", "torch.relu", "torch.relu", "torch.relu", "torch.relu.permute", "X.permute.permute.permute", "torch.relu().permute", "torch.relu().permute", "torch.relu().permute", "torch.relu.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch_geometric.data.Data", "torch.relu.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.relu", "torch.relu", "torch.relu", "torch_geometric.transforms.LaplacianLambdaMax", "astgcn.ASTGCNBlock._chebconv_attention", "astgcn.ASTGCNBlock._chebconv_attention", "torch_geometric.transforms.LaplacianLambdaMax"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ":", "torch", ".", "FloatTensor", ",", "edge_index", ":", "Union", "[", "torch", ".", "LongTensor", ",", "List", "[", "torch", ".", "LongTensor", "]", "]", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "\"\"\"\n        Making a forward pass with the ASTGCN block.\n \n        Arg types:\n            * **X** (PyTorch Float Tensor) - Node features for T time periods, with shape (B, N_nodes, F_in, T_in).\n            * **edge_index** (LongTensor): Edge indices, can be an array of a list of Tensor arrays, depending on whether edges change over time.\n\n        Return types:\n            * **X** (PyTorch Float Tensor) - Hidden state tensor for all nodes, with shape (B, N_nodes, nb_time_filter, T_out).\n        \"\"\"", "\n", "batch_size", ",", "num_of_vertices", ",", "num_of_features", ",", "num_of_timesteps", "=", "X", ".", "shape", "\n", "\n", "X_tilde", "=", "self", ".", "_temporal_attention", "(", "X", ")", "\n", "X_tilde", "=", "torch", ".", "matmul", "(", "X", ".", "reshape", "(", "batch_size", ",", "-", "1", ",", "num_of_timesteps", ")", ",", "X_tilde", ")", "\n", "X_tilde", "=", "X_tilde", ".", "reshape", "(", "batch_size", ",", "num_of_vertices", ",", "num_of_features", ",", "num_of_timesteps", ")", "\n", "X_tilde", "=", "self", ".", "_spatial_attention", "(", "X_tilde", ")", "\n", "\n", "if", "not", "isinstance", "(", "edge_index", ",", "list", ")", ":", "\n", "            ", "data", "=", "Data", "(", "edge_index", "=", "edge_index", ",", "edge_attr", "=", "None", ",", "num_nodes", "=", "num_of_vertices", ")", "\n", "if", "self", ".", "_normalization", "!=", "'sym'", ":", "\n", "                ", "lambda_max", "=", "LaplacianLambdaMax", "(", ")", "(", "data", ")", ".", "lambda_max", "\n", "", "else", ":", "\n", "                ", "lambda_max", "=", "None", "\n", "", "X_hat", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "num_of_timesteps", ")", ":", "\n", "                ", "X_hat", ".", "append", "(", "torch", ".", "unsqueeze", "(", "self", ".", "_chebconv_attention", "(", "X", "[", ":", ",", ":", ",", ":", ",", "t", "]", ",", "edge_index", ",", "X_tilde", ",", "lambda_max", "=", "lambda_max", ")", ",", "-", "1", ")", ")", "\n", "\n", "", "X_hat", "=", "F", ".", "relu", "(", "torch", ".", "cat", "(", "X_hat", ",", "dim", "=", "-", "1", ")", ")", "\n", "", "else", ":", "\n", "            ", "X_hat", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "num_of_timesteps", ")", ":", "\n", "                ", "data", "=", "Data", "(", "edge_index", "=", "edge_index", "[", "t", "]", ",", "edge_attr", "=", "None", ",", "num_nodes", "=", "num_of_vertices", ")", "\n", "if", "self", ".", "_normalization", "!=", "'sym'", ":", "\n", "                    ", "lambda_max", "=", "LaplacianLambdaMax", "(", ")", "(", "data", ")", ".", "lambda_max", "\n", "", "else", ":", "\n", "                    ", "lambda_max", "=", "None", "\n", "", "X_hat", ".", "append", "(", "torch", ".", "unsqueeze", "(", "self", ".", "_chebconv_attention", "(", "X", "[", ":", ",", ":", ",", ":", ",", "t", "]", ",", "edge_index", "[", "t", "]", ",", "X_tilde", ",", "lambda_max", "=", "lambda_max", ")", ",", "-", "1", ")", ")", "\n", "", "X_hat", "=", "F", ".", "relu", "(", "torch", ".", "cat", "(", "X_hat", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n", "", "X_hat", "=", "self", ".", "_time_convolution", "(", "X_hat", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ")", "\n", "X", "=", "self", ".", "_residual_convolution", "(", "X", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ")", "\n", "X", "=", "self", ".", "_layer_norm", "(", "F", ".", "relu", "(", "X", "+", "X_hat", ")", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", ")", "\n", "X", "=", "X", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.attention.astgcn.ASTGCN.__init__": [[389, 405], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "astgcn.ASTGCN._blocklist.extend", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "astgcn.ASTGCN._reset_parameters", "int", "astgcn.ASTGCNBlock", "astgcn.ASTGCNBlock", "range"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN.__init__", "home.repos.pwc.inspect_result.bird-tao_clcrn.attention.mstgcn.MSTGCN._reset_parameters"], ["def", "__init__", "(", "self", ",", "nb_block", ":", "int", ",", "input_dim", ":", "int", ",", "output_dim", ":", "int", ",", "max_view", ":", "int", ",", "nb_chev_filter", ":", "int", ",", "nb_time_filter", ":", "int", ",", "\n", "time_strides", ":", "int", ",", "horizon", ":", "int", ",", "seq_len", ":", "int", ",", "node_num", ":", "int", ",", "\n", "normalization", ":", "Optional", "[", "str", "]", "=", "None", ",", "bias", ":", "bool", "=", "True", ",", "**", "model_kwargs", ")", ":", "\n", "\n", "        ", "super", "(", "ASTGCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "horizon", "=", "horizon", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "self", ".", "_blocklist", "=", "nn", ".", "ModuleList", "(", "[", "ASTGCNBlock", "(", "input_dim", ",", "max_view", ",", "nb_chev_filter", ",", "nb_time_filter", ",", "\n", "time_strides", ",", "node_num", ",", "seq_len", ",", "normalization", ",", "bias", ")", "]", ")", "\n", "\n", "self", ".", "_blocklist", ".", "extend", "(", "[", "ASTGCNBlock", "(", "nb_time_filter", ",", "max_view", ",", "nb_chev_filter", ",", "nb_time_filter", ",", "1", ",", "\n", "node_num", ",", "seq_len", "//", "time_strides", ",", "normalization", ",", "bias", ")", "for", "_", "in", "range", "(", "nb_block", "-", "1", ")", "]", ")", "\n", "\n", "self", ".", "_final_conv", "=", "nn", ".", "Conv2d", "(", "int", "(", "seq_len", "/", "time_strides", ")", ",", "horizon", "*", "output_dim", ",", "kernel_size", "=", "(", "1", ",", "nb_time_filter", ")", ")", "\n", "\n", "self", ".", "_reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.attention.astgcn.ASTGCN._reset_parameters": [[406, 415], ["astgcn.ASTGCN.parameters", "p.dim", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_"], "methods", ["None"], ["", "def", "_reset_parameters", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Resetting the parameters.\n        \"\"\"", "\n", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "", "else", ":", "\n", "                ", "nn", ".", "init", ".", "uniform_", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.attention.astgcn.ASTGCN.forward": [[416, 439], ["astgcn.ASTGCN._final_conv", "block.reshape", "block.permute", "block", "block.permute"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ":", "torch", ".", "FloatTensor", ",", "edge_index", ":", "torch", ".", "LongTensor", ",", "*", "args", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "\"\"\"\n        Making a forward pass.\n        \n        Arg types:\n            * **X** (PyTorch FloatTensor) - Node features for T time periods, with shape (B, N_nodes, F_in, T_in).\n            * **edge_index** (PyTorch LongTensor): Edge indices, can be an array of a list of Tensor arrays, depending on whether edges change over time.\n\n        Return types:\n            * **X** (PyTorch FloatTensor)* - Hidden state tensor for all nodes, with shape (B, N_nodes, T_out).\n        \"\"\"", "\n", "B", ",", "N_nodes", ",", "F_in", ",", "T_in", "=", "X", ".", "shape", "\n", "F_out", "=", "self", ".", "output_dim", "\n", "T_out", "=", "self", ".", "horizon", "\n", "\n", "for", "block", "in", "self", ".", "_blocklist", ":", "\n", "            ", "X", "=", "block", "(", "X", ",", "edge_index", ")", "\n", "\n", "", "X", "=", "self", ".", "_final_conv", "(", "X", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", "X", "=", "X", "[", ":", ",", ":", ",", ":", ",", "-", "1", "]", "\n", "X", "=", "X", ".", "reshape", "(", "B", ",", "T_out", ",", "F_out", ",", "N_nodes", ")", "\n", "X", "=", "X", ".", "permute", "(", "1", ",", "0", ",", "3", ",", "2", ")", "\n", "return", "X", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bird-tao_clcrn.attention.stgcn.TemporalConv.__init__": [[19, 24], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ":", "int", ",", "out_channels", ":", "int", ",", "kernel_size", ":", "int", "=", "3", ")", ":", "\n", "        ", "super", "(", "TemporalConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv_1", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "(", "1", ",", "kernel_size", ")", ")", "\n", "self", ".", "conv_2", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "(", "1", ",", "kernel_size", ")", ")", "\n", "self", ".", "conv_3", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "(", "1", ",", "kernel_size", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.attention.stgcn.TemporalConv.forward": [[25, 43], ["X.permute.permute.permute", "stgcn.TemporalConv.conv_1", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.relu", "torch.relu", "torch.relu", "H.permute.permute.permute", "stgcn.TemporalConv.conv_2", "stgcn.TemporalConv.conv_3"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ":", "torch", ".", "FloatTensor", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "\"\"\"Forward pass through temporal convolution block.\n        \n        Arg types:\n            * **X** (torch.FloatTensor) -  Input data of shape \n                (batch_size, input_time_steps, num_nodes, in_channels).\n\n        Return types:\n            * **H** (torch.FloatTensor) - Output data of shape \n                (batch_size, in_channels, num_nodes, input_time_steps).\n        \"\"\"", "\n", "X", "=", "X", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", "\n", "P", "=", "self", ".", "conv_1", "(", "X", ")", "\n", "Q", "=", "torch", ".", "sigmoid", "(", "self", ".", "conv_2", "(", "X", ")", ")", "\n", "PQ", "=", "P", "*", "Q", "\n", "H", "=", "F", ".", "relu", "(", "PQ", "+", "self", ".", "conv_3", "(", "X", ")", ")", "\n", "H", "=", "H", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", "\n", "return", "H", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.attention.stgcn.STGCN.__init__": [[84, 112], ["torch.Module.__init__", "stgcn.TemporalConv", "torch_geometric.nn.ChebConv", "stgcn.TemporalConv", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN.__init__"], ["def", "__init__", "(", "self", ",", "node_num", ":", "int", ",", "input_dim", ":", "int", ",", "hidden_units", ":", "int", ",", "\n", "output_dim", ":", "int", ",", "kernel_size", ":", "int", ",", "max_view", ":", "int", ",", "horizon", ":", "int", ",", "\n", "normalization", ":", "str", "=", "\"sym\"", ",", "bias", ":", "bool", "=", "True", ",", "**", "model_kwargs", ")", ":", "\n", "        ", "super", "(", "STGCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "num_nodes", "=", "node_num", "\n", "self", ".", "input_dim", "=", "input_dim", "\n", "self", ".", "hidden_units", "=", "hidden_units", "\n", "self", ".", "out_channels", "=", "output_dim", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "K", "=", "max_view", "\n", "self", ".", "normalization", "=", "normalization", "\n", "self", ".", "bias", "=", "bias", "\n", "\n", "self", ".", "_temporal_conv1", "=", "TemporalConv", "(", "in_channels", "=", "input_dim", ",", "\n", "out_channels", "=", "hidden_units", ",", "\n", "kernel_size", "=", "kernel_size", ")", "\n", "\n", "self", ".", "_graph_conv", "=", "ChebConv", "(", "in_channels", "=", "hidden_units", ",", "\n", "out_channels", "=", "hidden_units", ",", "\n", "K", "=", "max_view", ",", "\n", "normalization", "=", "normalization", ",", "\n", "bias", "=", "bias", ")", "\n", "\n", "self", ".", "_temporal_conv2", "=", "TemporalConv", "(", "in_channels", "=", "hidden_units", ",", "\n", "out_channels", "=", "output_dim", "*", "horizon", ",", "\n", "kernel_size", "=", "kernel_size", ")", "\n", "\n", "self", ".", "_batch_norm", "=", "nn", ".", "BatchNorm2d", "(", "node_num", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.attention.stgcn.STGCN.forward": [[113, 141], ["X.permute.permute.permute", "stgcn.STGCN._temporal_conv1", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "torch.zeros_like().to", "range", "torch.relu", "torch.relu", "torch.relu", "stgcn.STGCN._temporal_conv2", "[].reshape.permute", "stgcn.STGCN._batch_norm", "[].reshape", "stgcn.STGCN.size", "range", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "torch.zeros_like", "stgcn.STGCN.size", "stgcn.STGCN._graph_conv", "[].reshape.permute"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ":", "torch", ".", "FloatTensor", ",", "edge_index", ":", "torch", ".", "LongTensor", ",", "\n", "edge_weight", ":", "torch", ".", "FloatTensor", "=", "None", ",", "**", "kwargs", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "\n", "        ", "r\"\"\"Forward pass. If edge weights are not present the forward pass\n        defaults to an unweighted graph. \n\n        Arg types:\n            * **X** (PyTorch FloatTensor) - Sequence of node features of shape (Batch size X Input time steps X Num nodes X In channels).\n            * **edge_index** (PyTorch LongTensor) - Graph edge indices.\n            * **edge_weight** (PyTorch LongTensor, optional)- Edge weight vector.\n        \n        Return types:\n            * **T** (PyTorch FloatTensor) - Sequence of node features.\n        \"\"\"", "\n", "X", "=", "X", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", "\n", "batch_size", ",", "seq_len", ",", "node_num", ",", "input_dim", "=", "X", ".", "shape", "\n", "T_0", "=", "self", ".", "_temporal_conv1", "(", "X", ")", "\n", "T", "=", "torch", ".", "zeros_like", "(", "T_0", ")", ".", "to", "(", "T_0", ".", "device", ")", "\n", "for", "b", "in", "range", "(", "T_0", ".", "size", "(", "0", ")", ")", ":", "\n", "            ", "for", "t", "in", "range", "(", "T_0", ".", "size", "(", "1", ")", ")", ":", "\n", "                ", "T", "[", "b", "]", "[", "t", "]", "=", "self", ".", "_graph_conv", "(", "T_0", "[", "b", "]", "[", "t", "]", ",", "edge_index", ",", "edge_weight", ")", "\n", "\n", "", "", "T", "=", "F", ".", "relu", "(", "T", ")", "\n", "T", "=", "self", ".", "_temporal_conv2", "(", "T", ")", "\n", "T", "=", "T", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "T", "=", "self", ".", "_batch_norm", "(", "T", ")", "\n", "T", "=", "T", ".", "permute", "(", "3", ",", "0", ",", "1", ",", "2", ")", "[", "...", ",", "-", "1", "]", ".", "reshape", "(", "seq_len", ",", "batch_size", ",", "node_num", ",", "-", "1", ")", "\n", "return", "T", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bird-tao_clcrn.attention.attention_model.ATTModel.__init__": [[10, 27], ["super().__init__", "seq2seq.Seq2SeqAttrs.__init__", "getattr", "int", "getattr", "int"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN.__init__", "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN.__init__"], ["", "class", "CLCSTNModel", "(", "nn", ".", "Module", ",", "Seq2SeqAttrs", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "loc_info", ",", "sparse_idx", ",", "geodesic", ",", "angle_ratio", ",", "logger", "=", "None", ",", "**", "model_kwargs", ")", ":", "\n", "        ", "'''\n        Conditional Local Convolution Recurrent Network, implemented based on DCRNN,\n        Args:\n            loc_info (torch.Tensor): location infomation of each nodes, with the shape (node_num, location_dim). For sphercial signals, location_dim=2.\n            sparse_idx (torch.Tensor): sparse_idx with the shape (2, node_num * nbhd_num).\n            geodesic (torch.Tensor): geodesic distance between each point and its neighbors, with the shape (node_num * nbhd_num), corresponding to sparse_idx.\n            angle_ratio (torch.Tensor): the defined angle ratio contributing to orientation density, with the shape (node_num * nbhd_num), corresponding to sparse_idx.\n            model_kwargs (dict): Other model args see the config.yaml.\n        '''", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "Seq2SeqAttrs", ".", "__init__", "(", "self", ",", "sparse_idx", ",", "geodesic", ",", "angle_ratio", ",", "**", "model_kwargs", ")", "\n", "self", ".", "register_buffer", "(", "'node_embeddings'", ",", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "node_num", ",", "self", ".", "embed_dim", ")", ",", "requires_grad", "=", "True", ")", ")", "\n", "self", ".", "feature_embedding", "=", "nn", ".", "Linear", "(", "self", ".", "input_dim", ",", "self", ".", "embed_dim", ")", "\n", "self", ".", "_logger", "=", "logger", "\n", "self", ".", "conv_ker", "=", "CLConv", "(", "\n", "self", ".", "location_dim", ",", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.attention.attention_model.ATTModel.forward": [[28, 36], ["inputs.permute.permute.permute", "attention_model.ATTModel.network", "attention_model.ATTModel._logger.info", "attention_model.count_parameters"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.seq2seq_model.count_parameters"], ["self", ".", "sparse_idx", ",", "\n", "self", ".", "node_num", ",", "\n", "self", ".", "lck_structure", ",", "\n", "loc_info", ",", "\n", "self", ".", "angle_ratio", ",", "\n", "self", ".", "geodesic", ",", "\n", "self", ".", "max_view", "\n", ")", "\n", "self", ".", "network", "=", "CLCSTN", "(", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.attention.mstgcn.MSTGCNBlock.__init__": [[22, 38], ["torch.Module.__init__", "torch_geometric.nn.ChebConv", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.LayerNorm", "torch.LayerNorm", "torch.LayerNorm", "mstgcn.MSTGCNBlock._reset_parameters"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN.__init__", "home.repos.pwc.inspect_result.bird-tao_clcrn.attention.mstgcn.MSTGCN._reset_parameters"], ["def", "__init__", "(", "self", ",", "in_channels", ":", "int", ",", "K", ":", "int", ",", "nb_chev_filter", ":", "int", ",", "\n", "nb_time_filter", ":", "int", ",", "time_strides", ":", "int", ")", ":", "\n", "        ", "super", "(", "MSTGCNBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "_cheb_conv", "=", "ChebConv", "(", "in_channels", ",", "nb_chev_filter", ",", "K", ",", "normalization", "=", "None", ")", "\n", "\n", "self", ".", "_time_conv", "=", "nn", ".", "Conv2d", "(", "nb_chev_filter", ",", "nb_time_filter", ",", "\n", "kernel_size", "=", "(", "1", ",", "3", ")", ",", "stride", "=", "(", "1", ",", "time_strides", ")", ",", "padding", "=", "(", "0", ",", "1", ")", ")", "\n", "\n", "self", ".", "_residual_conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "nb_time_filter", ",", "\n", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "stride", "=", "(", "1", ",", "time_strides", ")", ")", "\n", "\n", "self", ".", "_layer_norm", "=", "nn", ".", "LayerNorm", "(", "nb_time_filter", ")", "\n", "self", ".", "nb_time_filter", "=", "nb_time_filter", "\n", "\n", "self", ".", "_reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.attention.mstgcn.MSTGCNBlock._reset_parameters": [[39, 45], ["mstgcn.MSTGCNBlock.parameters", "p.dim", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_"], "methods", ["None"], ["", "def", "_reset_parameters", "(", "self", ")", ":", "\n", "        ", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "", "else", ":", "\n", "                ", "nn", ".", "init", ".", "uniform_", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.attention.mstgcn.MSTGCNBlock.forward": [[46, 84], ["mstgcn.MSTGCNBlock._time_conv", "mstgcn.MSTGCNBlock._residual_conv", "mstgcn.MSTGCNBlock._layer_norm", "X.permute.permute.permute", "isinstance", "X.permute.permute.permute", "torch.relu.reshape", "torch.relu.permute", "torch.relu", "torch.relu", "torch.relu", "torch.relu.permute", "torch.relu.reshape", "torch.relu.permute", "range", "torch.relu", "torch.relu", "torch.relu", "torch.relu.permute", "X.permute.permute.permute", "torch.relu().permute", "torch.relu().permute", "torch.relu().permute", "mstgcn.MSTGCNBlock._cheb_conv", "torch.relu.append", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch_geometric.transforms.LaplacianLambdaMax", "torch_geometric.data.Data", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.unsqueeze", "torch.relu", "torch.relu", "torch.relu", "torch_geometric.transforms.LaplacianLambdaMax", "torch_geometric.data.Data", "mstgcn.MSTGCNBlock._cheb_conv"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ":", "torch", ".", "FloatTensor", ",", "edge_index", ":", "torch", ".", "LongTensor", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "\"\"\"\n        Making a forward pass with a single MSTGCN block.\n\n        Arg types:\n            * X (PyTorch FloatTensor) - Node features for T time periods, with shape (B, N_nodes, F_in, T_in). \n            * edge_index (PyTorch LongTensor): Edge indices, can be an array of a list of Tensor arrays, depending on whether edges change over time.\n\n        Return types:\n            * X (PyTorch FloatTensor) - Hidden state tensor for all nodes, with shape (B, N_nodes, nb_time_filter, T_out).\n        \"\"\"", "\n", "\n", "batch_size", ",", "num_of_vertices", ",", "in_channels", ",", "num_of_timesteps", "=", "X", ".", "shape", "\n", "\n", "if", "not", "isinstance", "(", "edge_index", ",", "list", ")", ":", "\n", "\n", "            ", "lambda_max", "=", "LaplacianLambdaMax", "(", ")", "(", "Data", "(", "edge_index", "=", "edge_index", ",", "edge_attr", "=", "None", ",", "num_nodes", "=", "num_of_vertices", ")", ")", ".", "lambda_max", "\n", "\n", "X_tilde", "=", "X", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", "\n", "X_tilde", "=", "X_tilde", ".", "reshape", "(", "num_of_vertices", ",", "in_channels", ",", "num_of_timesteps", "*", "batch_size", ")", "\n", "X_tilde", "=", "X_tilde", ".", "permute", "(", "2", ",", "0", ",", "1", ")", "\n", "X_tilde", "=", "F", ".", "relu", "(", "self", ".", "_cheb_conv", "(", "x", "=", "X_tilde", ",", "edge_index", "=", "edge_index", ",", "lambda_max", "=", "lambda_max", ")", ")", "\n", "X_tilde", "=", "X_tilde", ".", "permute", "(", "1", ",", "2", ",", "0", ")", "\n", "X_tilde", "=", "X_tilde", ".", "reshape", "(", "num_of_vertices", ",", "self", ".", "nb_time_filter", ",", "batch_size", ",", "num_of_timesteps", ")", "\n", "X_tilde", "=", "X_tilde", ".", "permute", "(", "2", ",", "0", ",", "1", ",", "3", ")", "\n", "\n", "", "else", ":", "\n", "            ", "X_tilde", "=", "[", "]", "\n", "for", "t", "in", "range", "(", "num_of_timesteps", ")", ":", "\n", "                ", "lambda_max", "=", "LaplacianLambdaMax", "(", ")", "(", "Data", "(", "edge_index", "=", "edge_index", "[", "t", "]", ",", "edge_attr", "=", "None", ",", "num_nodes", "=", "num_of_vertices", ")", ")", ".", "lambda_max", "\n", "X_tilde", ".", "append", "(", "torch", ".", "unsqueeze", "(", "self", ".", "_cheb_conv", "(", "X", "[", ":", ",", ":", ",", ":", ",", "t", "]", ",", "edge_index", "[", "t", "]", ",", "lambda_max", "=", "lambda_max", ")", ",", "-", "1", ")", ")", "\n", "", "X_tilde", "=", "F", ".", "relu", "(", "torch", ".", "cat", "(", "X_tilde", ",", "dim", "=", "-", "1", ")", ")", "\n", "\n", "", "X_tilde", "=", "self", ".", "_time_conv", "(", "X_tilde", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ")", "\n", "X", "=", "self", ".", "_residual_conv", "(", "X", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", ")", "\n", "X", "=", "self", ".", "_layer_norm", "(", "F", ".", "relu", "(", "X", "+", "X_tilde", ")", ".", "permute", "(", "0", ",", "3", ",", "2", ",", "1", ")", ")", "\n", "X", "=", "X", ".", "permute", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "return", "X", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.attention.mstgcn.MSTGCN.__init__": [[102, 117], ["torch.Module.__init__", "torch.ModuleList", "torch.ModuleList", "torch.ModuleList", "mstgcn.MSTGCN._blocklist.extend", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "mstgcn.MSTGCN._reset_parameters", "int", "mstgcn.MSTGCNBlock", "mstgcn.MSTGCNBlock", "range"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN.__init__", "home.repos.pwc.inspect_result.bird-tao_clcrn.attention.mstgcn.MSTGCN._reset_parameters"], ["def", "__init__", "(", "self", ",", "nb_block", ":", "int", ",", "input_dim", ":", "int", ",", "output_dim", ":", "int", ",", "max_view", ":", "int", ",", "nb_chev_filter", ":", "int", ",", "\n", "nb_time_filter", ":", "int", ",", "time_strides", ":", "int", ",", "seq_len", ":", "int", ",", "horizon", ":", "int", ",", "\n", "**", "model_kwargs", ")", ":", "\n", "        ", "super", "(", "MSTGCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "horizon", "=", "horizon", "\n", "self", ".", "output_dim", "=", "output_dim", "\n", "\n", "self", ".", "_blocklist", "=", "nn", ".", "ModuleList", "(", "[", "MSTGCNBlock", "(", "input_dim", ",", "max_view", ",", "nb_chev_filter", ",", "nb_time_filter", ",", "time_strides", ")", "]", ")", "\n", "\n", "self", ".", "_blocklist", ".", "extend", "(", "[", "MSTGCNBlock", "(", "nb_time_filter", ",", "max_view", ",", "nb_chev_filter", ",", "nb_time_filter", ",", "1", ")", "for", "_", "in", "range", "(", "nb_block", "-", "1", ")", "]", ")", "\n", "\n", "self", ".", "_final_conv", "=", "nn", ".", "Conv2d", "(", "int", "(", "seq_len", "/", "time_strides", ")", ",", "seq_len", "*", "output_dim", ",", "kernel_size", "=", "(", "1", ",", "nb_time_filter", ")", ")", "\n", "\n", "self", ".", "_reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.attention.mstgcn.MSTGCN._reset_parameters": [[118, 127], ["mstgcn.MSTGCN.parameters", "p.dim", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.xavier_uniform_", "torch.init.uniform_", "torch.init.uniform_", "torch.init.uniform_"], "methods", ["None"], ["", "def", "_reset_parameters", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        Resetting the model parameters.\n        \"\"\"", "\n", "for", "p", "in", "self", ".", "parameters", "(", ")", ":", "\n", "            ", "if", "p", ".", "dim", "(", ")", ">", "1", ":", "\n", "                ", "nn", ".", "init", ".", "xavier_uniform_", "(", "p", ")", "\n", "", "else", ":", "\n", "                ", "nn", ".", "init", ".", "uniform_", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.attention.mstgcn.MSTGCN.forward": [[128, 152], ["mstgcn.MSTGCN._final_conv", "block.reshape", "block.permute", "block", "block.permute"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "X", ":", "torch", ".", "FloatTensor", ",", "edge_index", ":", "torch", ".", "LongTensor", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "r\"\"\" Making a forward pass. This module takes a likst of MSTGCN blocks and use a final convolution to serve as a multi-component fusion.\n        B is the batch size. N_nodes is the number of nodes in the graph. F_in is the dimension of input features. \n        T_in is the length of input sequence in time. T_out is the length of output sequence in time.\n        \n        Arg types:\n            * X (PyTorch FloatTensor) - Node features for T time periods, with shape (B, N_nodes, F_in, T_in).\n            * edge_index (PyTorch LongTensor): Edge indices, can be an array of a list of Tensor arrays, depending on whether edges change over time.\n\n        Return types:\n            * X (PyTorch FloatTensor) - Hidden state tensor for all nodes, with shape (B, N_nodes, T_out).\n        \"\"\"", "\n", "B", ",", "N_nodes", ",", "F_in", ",", "T_in", "=", "X", ".", "shape", "\n", "F_out", "=", "self", ".", "output_dim", "\n", "T_out", "=", "self", ".", "horizon", "\n", "\n", "for", "block", "in", "self", ".", "_blocklist", ":", "\n", "            ", "X", "=", "block", "(", "X", ",", "edge_index", ")", "\n", "\n", "", "X", "=", "self", ".", "_final_conv", "(", "X", ".", "permute", "(", "0", ",", "3", ",", "1", ",", "2", ")", ")", "\n", "X", "=", "X", "[", ":", ",", ":", ",", ":", ",", "-", "1", "]", "\n", "X", "=", "X", ".", "reshape", "(", "B", ",", "T_out", ",", "F_out", ",", "N_nodes", ")", "\n", "X", "=", "X", ".", "permute", "(", "1", ",", "0", ",", "3", ",", "2", ")", "\n", "return", "X", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.encoder.EncoderModel.__init__": [[6, 11], ["torch.Module.__init__", "torch.Module.__init__", "seq2seq.Seq2SeqAttrs.__init__", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN.__init__", "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN.__init__", "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN.__init__"], ["class", "EncoderModel", "(", "nn", ".", "Module", ",", "Seq2SeqAttrs", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "sparse_idx", ",", "angle_ratio", ",", "geodesic", ",", "conv_ker", ",", "**", "model_kwargs", ")", ":", "\n", "        ", "nn", ".", "Module", ".", "__init__", "(", "self", ")", "\n", "Seq2SeqAttrs", ".", "__init__", "(", "self", ",", "sparse_idx", ",", "angle_ratio", ",", "geodesic", ",", "**", "model_kwargs", ")", "\n", "self", ".", "conv", "=", "conv_ker", "\n", "self", ".", "clgru_layers", "=", "self", ".", "init_clgru_layers", "(", ")", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.encoder.EncoderModel.init_clgru_layers": [[14, 31], ["range", "torch.ModuleList", "torch.ModuleList", "module_list.append", "clccell.CLCRNCell"], "methods", ["None"], ["", "def", "init_clgru_layers", "(", "self", ")", ":", "\n", "        ", "module_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "layer_num", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "input_dim", "=", "self", ".", "input_dim", "\n", "", "else", ":", "\n", "                ", "input_dim", "=", "self", ".", "rnn_units", "\n", "", "module_list", ".", "append", "(", "CLCRNCell", "(", "\n", "self", ".", "rnn_units", ",", "\n", "self", ".", "sparse_idx", ",", "\n", "self", ".", "max_view", ",", "\n", "self", ".", "node_num", ",", "\n", "input_dim", ",", "\n", "self", ".", "conv", ",", "\n", "self", ".", "rnn_units", "*", "2", "\n", ")", ")", "\n", "", "return", "nn", ".", "ModuleList", "(", "module_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.encoder.EncoderModel.forward": [[12, 36], ["inputs.size", "enumerate", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "hidden_state.to.to.to", "layer", "hidden_states.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["self", ".", "projection_layer", "=", "nn", ".", "Linear", "(", "self", ".", "input_dim", "+", "2", "*", "self", ".", "embed_dim", ",", "self", ".", "rnn_units", ")", "\n", "\n", "", "def", "init_clgru_layers", "(", "self", ")", ":", "\n", "        ", "module_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "layer_num", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "input_dim", "=", "self", ".", "input_dim", "\n", "", "else", ":", "\n", "                ", "input_dim", "=", "self", ".", "rnn_units", "\n", "", "module_list", ".", "append", "(", "CLCRNCell", "(", "\n", "self", ".", "rnn_units", ",", "\n", "self", ".", "sparse_idx", ",", "\n", "self", ".", "max_view", ",", "\n", "self", ".", "node_num", ",", "\n", "input_dim", ",", "\n", "self", ".", "conv", ",", "\n", "self", ".", "rnn_units", "*", "2", "\n", ")", ")", "\n", "", "return", "nn", ".", "ModuleList", "(", "module_list", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "inputs", ",", "hidden_state", "=", "None", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.decoder.DecoderModel.__init__": [[6, 12], ["torch.Module.__init__", "torch.Module.__init__", "seq2seq.Seq2SeqAttrs.__init__", "torch.Linear", "torch.Linear", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like().float", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN.__init__", "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN.__init__", "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN.__init__"], ["class", "DecoderModel", "(", "nn", ".", "Module", ",", "Seq2SeqAttrs", ")", ":", "\n", "    ", "def", "__init__", "(", "self", ",", "sparse_idx", ",", "geodesic", ",", "angle_ratio", ",", "conv_ker", ",", "**", "model_kwargs", ")", ":", "\n", "        ", "nn", ".", "Module", ".", "__init__", "(", "self", ")", "\n", "Seq2SeqAttrs", ".", "__init__", "(", "self", ",", "sparse_idx", ",", "geodesic", ",", "angle_ratio", ",", "**", "model_kwargs", ")", "\n", "self", ".", "conv", "=", "conv_ker", "\n", "self", ".", "clgru_layers", "=", "self", ".", "init_clgru_layers", "(", ")", "\n", "self", ".", "projection_layer", "=", "nn", ".", "Linear", "(", "self", ".", "rnn_units", ",", "self", ".", "output_dim", ")", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.decoder.DecoderModel.init_clgru_layers": [[14, 31], ["range", "torch.ModuleList", "torch.ModuleList", "module_list.append", "clccell.CLCRNCell"], "methods", ["None"], ["", "def", "init_clgru_layers", "(", "self", ")", ":", "\n", "        ", "module_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "layer_num", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "input_dim", "=", "self", ".", "output_dim", "\n", "", "else", ":", "\n", "                ", "input_dim", "=", "self", ".", "rnn_units", "\n", "", "module_list", ".", "append", "(", "CLCRNCell", "(", "\n", "self", ".", "rnn_units", ",", "\n", "self", ".", "sparse_idx", ",", "\n", "self", ".", "max_view", ",", "\n", "self", ".", "node_num", ",", "\n", "input_dim", ",", "\n", "self", ".", "conv", ",", "\n", "input_dim", "+", "self", ".", "rnn_units", "\n", ")", ")", "\n", "", "return", "nn", ".", "ModuleList", "(", "module_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.decoder.DecoderModel.forward": [[13, 36], ["enumerate", "decoder.DecoderModel.projection_layer", "decoder.DecoderModel.reshape", "layer", "hidden_states.append", "torch.stack", "torch.stack", "torch.stack", "torch.stack"], "methods", ["None"], ["\n", "", "def", "init_clgru_layers", "(", "self", ")", ":", "\n", "        ", "module_list", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "self", ".", "layer_num", ")", ":", "\n", "            ", "if", "i", "==", "0", ":", "\n", "                ", "input_dim", "=", "self", ".", "output_dim", "\n", "", "else", ":", "\n", "                ", "input_dim", "=", "self", ".", "rnn_units", "\n", "", "module_list", ".", "append", "(", "CLCRNCell", "(", "\n", "self", ".", "rnn_units", ",", "\n", "self", ".", "sparse_idx", ",", "\n", "self", ".", "max_view", ",", "\n", "self", ".", "node_num", ",", "\n", "input_dim", ",", "\n", "self", ".", "conv", ",", "\n", "input_dim", "+", "self", ".", "rnn_units", "\n", ")", ")", "\n", "", "return", "nn", ".", "ModuleList", "(", "module_list", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "inputs", ",", "hidden_state", "=", "None", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.seq2seq_model.CLCRNModel.__init__": [[13, 43], ["super().__init__", "seq2seq.Seq2SeqAttrs.__init__", "seq2seq_model.CLCRNModel.register_buffer", "torch.Linear", "torch.Linear", "clconv.CLConv", "encoder.EncoderModel", "decoder.DecoderModel", "int", "bool", "torch.Parameter", "torch.Parameter", "model_kwargs.get", "model_kwargs.get", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN.__init__", "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "loc_info", ",", "sparse_idx", ",", "geodesic", ",", "angle_ratio", ",", "logger", "=", "None", ",", "**", "model_kwargs", ")", ":", "\n", "        ", "'''\n        Conditional Local Convolution Recurrent Network, implemented based on DCRNN,\n        Args:\n            loc_info (torch.Tensor): location infomation of each nodes, with the shape (node_num, location_dim). For sphercial signals, location_dim=2.\n            sparse_idx (torch.Tensor): sparse_idx with the shape (2, node_num * nbhd_num).\n            geodesic (torch.Tensor): geodesic distance between each point and its neighbors, with the shape (node_num * nbhd_num), corresponding to sparse_idx.\n            angle_ratio (torch.Tensor): the defined angle ratio contributing to orientation density, with the shape (node_num * nbhd_num), corresponding to sparse_idx.\n            model_kwargs (dict): Other model args see the config.yaml.\n        '''", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "Seq2SeqAttrs", ".", "__init__", "(", "self", ",", "sparse_idx", ",", "geodesic", ",", "angle_ratio", ",", "**", "model_kwargs", ")", "\n", "self", ".", "register_buffer", "(", "'node_embeddings'", ",", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "node_num", ",", "self", ".", "embed_dim", ")", ",", "requires_grad", "=", "True", ")", ")", "\n", "self", ".", "feature_embedding", "=", "nn", ".", "Linear", "(", "self", ".", "input_dim", ",", "self", ".", "embed_dim", ")", "\n", "\n", "self", ".", "conv_ker", "=", "CLConv", "(", "\n", "self", ".", "location_dim", ",", "\n", "self", ".", "sparse_idx", ",", "\n", "self", ".", "node_num", ",", "\n", "self", ".", "lck_structure", ",", "\n", "loc_info", ",", "\n", "self", ".", "angle_ratio", ",", "\n", "self", ".", "geodesic", ",", "\n", "self", ".", "max_view", "\n", ")", "\n", "self", ".", "encoder_model", "=", "EncoderModel", "(", "sparse_idx", ",", "geodesic", ",", "angle_ratio", ",", "self", ".", "conv_ker", ",", "**", "model_kwargs", ")", "\n", "self", ".", "decoder_model", "=", "DecoderModel", "(", "sparse_idx", ",", "geodesic", ",", "angle_ratio", ",", "self", ".", "conv_ker", ",", "**", "model_kwargs", ")", "\n", "self", ".", "cl_decay_steps", "=", "int", "(", "model_kwargs", ".", "get", "(", "'cl_decay_steps'", ",", "1000", ")", ")", "\n", "self", ".", "use_curriculum_learning", "=", "bool", "(", "model_kwargs", ".", "get", "(", "'use_curriculum_learning'", ",", "False", ")", ")", "\n", "self", ".", "_logger", "=", "logger", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.seq2seq_model.CLCRNModel._compute_sampling_threshold": [[44, 47], ["numpy.exp"], "methods", ["None"], ["", "def", "_compute_sampling_threshold", "(", "self", ",", "batches_seen", ")", ":", "\n", "        ", "return", "self", ".", "cl_decay_steps", "/", "(", "\n", "self", ".", "cl_decay_steps", "+", "np", ".", "exp", "(", "batches_seen", "/", "self", ".", "cl_decay_steps", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.seq2seq_model.CLCRNModel.get_kernel": [[48, 50], ["None"], "methods", ["None"], ["", "def", "get_kernel", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "conv_ker", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.seq2seq_model.CLCRNModel.encoder": [[51, 62], ["range", "seq2seq_model.CLCRNModel.encoder_model"], "methods", ["None"], ["", "def", "encoder", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"\n        encoder forward pass on t time steps\n        :param inputs: shape (seq_len, batch_size, num_sensor * input_dim)\n        :return: encoder_hidden_state: (num_layers, batch_size, self.hidden_state_size)\n        \"\"\"", "\n", "encoder_hidden_state", "=", "None", "\n", "for", "t", "in", "range", "(", "self", ".", "encoder_model", ".", "seq_len", ")", ":", "\n", "            ", "_", ",", "encoder_hidden_state", "=", "self", ".", "encoder_model", "(", "inputs", "[", "t", "]", ",", "encoder_hidden_state", ")", "\n", "\n", "", "return", "encoder_hidden_state", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.seq2seq_model.CLCRNModel.decoder": [[63, 84], ["encoder_hidden_state.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "go_symbol.to.to.to", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "seq2seq_model.CLCRNModel.decoder_model", "torch.stack.append", "torch.stack.append", "numpy.random.uniform", "seq2seq_model.CLCRNModel._compute_sampling_threshold"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.seq2seq_model.RNNModel._compute_sampling_threshold"], ["", "def", "decoder", "(", "self", ",", "encoder_hidden_state", ",", "labels", "=", "None", ",", "batches_seen", "=", "None", ")", ":", "\n", "\n", "        ", "batch_size", "=", "encoder_hidden_state", ".", "size", "(", "1", ")", "\n", "go_symbol", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "self", ".", "node_num", ",", "self", ".", "output_dim", ")", ")", "\n", "go_symbol", "=", "go_symbol", ".", "to", "(", "encoder_hidden_state", ".", "device", ")", "\n", "decoder_hidden_state", "=", "encoder_hidden_state", "\n", "decoder_input", "=", "go_symbol", "\n", "\n", "outputs", "=", "[", "]", "\n", "\n", "for", "t", "in", "range", "(", "self", ".", "horizon", ")", ":", "\n", "            ", "decoder_output", ",", "decoder_hidden_state", "=", "self", ".", "decoder_model", "(", "decoder_input", ",", "\n", "decoder_hidden_state", ")", "\n", "decoder_input", "=", "decoder_output", "\n", "outputs", ".", "append", "(", "decoder_output", ")", "\n", "if", "self", ".", "training", "and", "self", ".", "use_curriculum_learning", ":", "\n", "                ", "c", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ")", "\n", "if", "c", "<", "self", ".", "_compute_sampling_threshold", "(", "batches_seen", ")", ":", "\n", "                    ", "decoder_input", "=", "labels", "[", "t", "]", "\n", "", "", "", "outputs", "=", "torch", ".", "stack", "(", "outputs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.seq2seq_model.CLCRNModel.embedding": [[85, 92], ["seq2seq_model.CLCRNModel.feature_embedding", "seq2seq_model.CLCRNModel.node_embeddings[].expand", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "embedding", "(", "self", ",", "inputs", ")", ":", "\n", "# inputs: b, l, n, f", "\n", "# outputs: b, l, n, e*2", "\n", "        ", "batch_size", ",", "seq_len", ",", "node_num", ",", "feature_size", "=", "inputs", ".", "shape", "\n", "feature_emb", "=", "self", ".", "feature_embedding", "(", "inputs", ")", "\n", "node_emb", "=", "self", ".", "node_embeddings", "[", "None", ",", "None", ",", ":", ",", ":", "]", ".", "expand", "(", "batch_size", ",", "seq_len", ",", "node_num", ",", "self", ".", "embed_dim", ")", "\n", "return", "torch", ".", "cat", "(", "[", "feature_emb", ",", "node_emb", ",", "inputs", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.seq2seq_model.CLCRNModel.forward": [[93, 109], ["seq2seq_model.CLCRNModel.embedding", "seq2seq_model.CLCRNModel.encoder", "seq2seq_model.CLCRNModel.decoder", "seq2seq_model.CLCRNModel._logger.info", "seq2seq_model.count_parameters"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.seq2seq_model.CLCRNModel.embedding", "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.seq2seq_model.RNNModel.encoder", "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.seq2seq_model.RNNModel.decoder", "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.seq2seq_model.count_parameters"], ["", "def", "forward", "(", "self", ",", "inputs", ",", "labels", "=", "None", ",", "batches_seen", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        seq2seq forward pass\n        :param inputs: shape (seq_len, batch_size, num_sensor, input_dim)\n        :param labels: shape (horizon, batch_size, num_sensor, output_dim)\n        :param batches_seen: batches seen till now\n        :return: output: (self.horizon, batch_size, self.node_num * self.output_dim)\n        \"\"\"", "\n", "embedding", "=", "self", ".", "embedding", "(", "inputs", ")", "\n", "encoder_hidden_state", "=", "self", ".", "encoder", "(", "embedding", ")", "\n", "outputs", "=", "self", ".", "decoder", "(", "encoder_hidden_state", ",", "labels", ",", "batches_seen", "=", "batches_seen", ")", "\n", "if", "batches_seen", "==", "0", ":", "\n", "            ", "self", ".", "_logger", ".", "info", "(", "\n", "\"Total trainable parameters {}\"", ".", "format", "(", "count_parameters", "(", "self", ")", ")", "\n", ")", "\n", "", "return", "outputs", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.seq2seq_model.count_parameters": [[9, 11], ["sum", "p.numel", "model.parameters"], "function", ["None"], ["def", "count_parameters", "(", "model", ")", ":", "\n", "    ", "return", "sum", "(", "p", ".", "numel", "(", ")", "for", "p", "in", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.agcrn.AVWGCN.__init__": [[17, 24], ["torch.Module.__init__", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch_geometric.nn.inits.glorot", "torch_geometric.nn.inits.zeros", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ":", "int", ",", "out_channels", ":", "int", ",", "K", ":", "int", ",", "embedding_dimensions", ":", "int", ")", ":", "\n", "        ", "super", "(", "AVWGCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "K", "=", "K", "\n", "self", ".", "weights_pool", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "embedding_dimensions", ",", "K", ",", "in_channels", ",", "out_channels", ")", ")", "\n", "self", ".", "bias_pool", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "embedding_dimensions", ",", "out_channels", ")", ")", "\n", "glorot", "(", "self", ".", "weights_pool", ")", "\n", "zeros", "(", "self", ".", "bias_pool", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.agcrn.AVWGCN.forward": [[25, 47], ["torch.softmax", "torch.softmax", "torch.softmax", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "X_G.permute.permute.permute", "torch.relu", "torch.relu", "torch.relu", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "torch.eye().to", "support_set.append", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.einsum", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.mm", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "torch.matmul", "E.transpose", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye", "torch.eye"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ":", "torch", ".", "FloatTensor", ",", "E", ":", "torch", ".", "FloatTensor", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "r\"\"\"Making a forward pass.\n        Arg types:\n            * **X** (PyTorch Float Tensor) - Node features.\n            * **E** (PyTorch Float Tensor) - Node embeddings.\n        Return types:\n            * **X_G** (PyTorch Float Tensor) - Hidden state matrix for all nodes.\n        \"\"\"", "\n", "\n", "number_of_nodes", "=", "E", ".", "shape", "[", "0", "]", "\n", "supports", "=", "F", ".", "softmax", "(", "F", ".", "relu", "(", "torch", ".", "mm", "(", "E", ",", "E", ".", "transpose", "(", "0", ",", "1", ")", ")", ")", ",", "dim", "=", "1", ")", "\n", "support_set", "=", "[", "torch", ".", "eye", "(", "number_of_nodes", ")", ".", "to", "(", "supports", ".", "device", ")", ",", "supports", "]", "\n", "for", "_", "in", "range", "(", "2", ",", "self", ".", "K", ")", ":", "\n", "            ", "support", "=", "torch", ".", "matmul", "(", "2", "*", "supports", ",", "support_set", "[", "-", "1", "]", ")", "-", "support_set", "[", "-", "2", "]", "\n", "support_set", ".", "append", "(", "support", ")", "\n", "", "supports", "=", "torch", ".", "stack", "(", "support_set", ",", "dim", "=", "0", ")", "\n", "W", "=", "torch", ".", "einsum", "(", "'nd,dkio->nkio'", ",", "E", ",", "self", ".", "weights_pool", ")", "\n", "bias", "=", "torch", ".", "matmul", "(", "E", ",", "self", ".", "bias_pool", ")", "\n", "X_G", "=", "torch", ".", "einsum", "(", "\"knm,bmc->bknc\"", ",", "supports", ",", "X", ")", "\n", "X_G", "=", "X_G", ".", "permute", "(", "0", ",", "2", ",", "1", ",", "3", ")", "\n", "X_G", "=", "torch", ".", "einsum", "(", "'bnki,nkio->bno'", ",", "X_G", ",", "W", ")", "+", "bias", "\n", "return", "X_G", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.agcrn.AGCRN.__init__": [[60, 71], ["torch.Module.__init__", "agcrn.AGCRN._setup_layers", "torch.Parameter", "torch.Parameter", "torch.Parameter", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn", "torch.randn"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN.__init__", "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.agcrn.AGCRN._setup_layers"], ["def", "__init__", "(", "self", ",", "node_num", ":", "int", ",", "in_channels", ":", "int", ",", "\n", "out_channels", ":", "int", ",", "max_view", ":", "int", ",", "embed_dim", ":", "int", ",", "**", "model_kwargs", ")", ":", "\n", "        ", "super", "(", "AGCRN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "number_of_nodes", "=", "node_num", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "K", "=", "max_view", "\n", "self", ".", "embedding_dimensions", "=", "embed_dim", "\n", "self", ".", "_setup_layers", "(", ")", "\n", "self", ".", "node_embeddings", "=", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "node_num", ",", "embed_dim", ")", ",", "requires_grad", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.agcrn.AGCRN._setup_layers": [[72, 82], ["agcrn.AVWGCN", "agcrn.AVWGCN"], "methods", ["None"], ["", "def", "_setup_layers", "(", "self", ")", ":", "\n", "        ", "self", ".", "_gate", "=", "AVWGCN", "(", "in_channels", "=", "self", ".", "in_channels", "+", "self", ".", "out_channels", ",", "\n", "out_channels", "=", "2", "*", "self", ".", "out_channels", ",", "\n", "K", "=", "self", ".", "K", ",", "\n", "embedding_dimensions", "=", "self", ".", "embedding_dimensions", ")", "\n", "\n", "self", ".", "_update", "=", "AVWGCN", "(", "in_channels", "=", "self", ".", "in_channels", "+", "self", ".", "out_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "K", "=", "self", ".", "K", ",", "\n", "embedding_dimensions", "=", "self", ".", "embedding_dimensions", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.agcrn.AGCRN._set_hidden_state": [[83, 87], ["torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros().to", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros"], "methods", ["None"], ["", "def", "_set_hidden_state", "(", "self", ",", "X", ",", "H", ")", ":", "\n", "        ", "if", "H", "is", "None", ":", "\n", "            ", "H", "=", "torch", ".", "zeros", "(", "X", ".", "shape", "[", "0", "]", ",", "X", ".", "shape", "[", "1", "]", ",", "self", ".", "out_channels", ")", ".", "to", "(", "X", ".", "device", ")", "\n", "", "return", "H", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.agcrn.AGCRN.forward": [[88, 107], ["agcrn.AGCRN._set_hidden_state", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.split", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "torch.tanh", "agcrn.AGCRN._gate", "agcrn.AGCRN._update"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN._set_hidden_state"], ["", "def", "forward", "(", "self", ",", "X", ":", "torch", ".", "FloatTensor", ",", "H", ":", "torch", ".", "FloatTensor", "=", "None", ",", "E", ":", "torch", ".", "FloatTensor", "=", "None", ",", "**", "args", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "r\"\"\"Making a forward pass.\n        Arg types:\n            * **X** (PyTorch Float Tensor) - Node feature matrix.\n            * **H** (PyTorch Float Tensor) - Node hidden state matrix. Default is None.\n            * **E** (PyTorch Float Tensor) - Node embedding matrix.\n        Return types:\n            * **H** (PyTorch Float Tensor) - Hidden state matrix for all nodes.\n        \"\"\"", "\n", "if", "E", "is", "None", ":", "\n", "            ", "E", "=", "self", ".", "node_embeddings", "\n", "", "H", "=", "self", ".", "_set_hidden_state", "(", "X", ",", "H", ")", "\n", "X_H", "=", "torch", ".", "cat", "(", "(", "X", ",", "H", ")", ",", "dim", "=", "-", "1", ")", "\n", "Z_R", "=", "torch", ".", "sigmoid", "(", "self", ".", "_gate", "(", "X_H", ",", "E", ")", ")", "\n", "Z", ",", "R", "=", "torch", ".", "split", "(", "Z_R", ",", "self", ".", "out_channels", ",", "dim", "=", "-", "1", ")", "\n", "C", "=", "torch", ".", "cat", "(", "(", "X", ",", "Z", "*", "H", ")", ",", "dim", "=", "-", "1", ")", "\n", "HC", "=", "torch", ".", "tanh", "(", "self", ".", "_update", "(", "C", ",", "E", ")", ")", "\n", "H", "=", "R", "*", "H", "+", "(", "1", "-", "R", ")", "*", "HC", "\n", "return", "H", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.temporalgcn.TGCN.__init__": [[17, 28], ["super().__init__", "temporalgcn.TGCN._create_parameters_and_layers"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN.__init__", "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN._create_parameters_and_layers"], ["def", "__init__", "(", "self", ",", "in_channels", ":", "int", ",", "out_channels", ":", "int", ",", "improved", ":", "bool", "=", "False", ",", "\n", "cached", ":", "bool", "=", "False", ",", "add_self_loops", ":", "bool", "=", "True", ",", "**", "model_args", ")", ":", "\n", "        ", "super", "(", "TGCN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "improved", "=", "improved", "\n", "self", ".", "cached", "=", "cached", "\n", "self", ".", "add_self_loops", "=", "add_self_loops", "\n", "\n", "self", ".", "_create_parameters_and_layers", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.temporalgcn.TGCN._create_update_gate_parameters_and_layers": [[30, 40], ["torch_geometric.nn.GCNConv", "torch.nn.Linear"], "methods", ["None"], ["", "def", "_create_update_gate_parameters_and_layers", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "conv_z", "=", "GCNConv", "(", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "improved", "=", "self", ".", "improved", ",", "\n", "cached", "=", "self", ".", "cached", ",", "\n", "add_self_loops", "=", "self", ".", "add_self_loops", ")", "\n", "\n", "self", ".", "linear_z", "=", "torch", ".", "nn", ".", "Linear", "(", "2", "*", "self", ".", "out_channels", ",", "\n", "self", ".", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.temporalgcn.TGCN._create_reset_gate_parameters_and_layers": [[42, 52], ["torch_geometric.nn.GCNConv", "torch.nn.Linear"], "methods", ["None"], ["", "def", "_create_reset_gate_parameters_and_layers", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "conv_r", "=", "GCNConv", "(", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "improved", "=", "self", ".", "improved", ",", "\n", "cached", "=", "self", ".", "cached", ",", "\n", "add_self_loops", "=", "self", ".", "add_self_loops", ")", "\n", "\n", "self", ".", "linear_r", "=", "torch", ".", "nn", ".", "Linear", "(", "2", "*", "self", ".", "out_channels", ",", "\n", "self", ".", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.temporalgcn.TGCN._create_candidate_state_parameters_and_layers": [[53, 63], ["torch_geometric.nn.GCNConv", "torch.nn.Linear"], "methods", ["None"], ["", "def", "_create_candidate_state_parameters_and_layers", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "conv_h", "=", "GCNConv", "(", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "improved", "=", "self", ".", "improved", ",", "\n", "cached", "=", "self", ".", "cached", ",", "\n", "add_self_loops", "=", "self", ".", "add_self_loops", ")", "\n", "\n", "self", ".", "linear_h", "=", "torch", ".", "nn", ".", "Linear", "(", "2", "*", "self", ".", "out_channels", ",", "\n", "self", ".", "out_channels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.temporalgcn.TGCN._create_parameters_and_layers": [[65, 69], ["temporalgcn.TGCN._create_update_gate_parameters_and_layers", "temporalgcn.TGCN._create_reset_gate_parameters_and_layers", "temporalgcn.TGCN._create_candidate_state_parameters_and_layers"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN._create_update_gate_parameters_and_layers", "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN._create_reset_gate_parameters_and_layers", "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN._create_candidate_state_parameters_and_layers"], ["", "def", "_create_parameters_and_layers", "(", "self", ")", ":", "\n", "        ", "self", ".", "_create_update_gate_parameters_and_layers", "(", ")", "\n", "self", ".", "_create_reset_gate_parameters_and_layers", "(", ")", "\n", "self", ".", "_create_candidate_state_parameters_and_layers", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.temporalgcn.TGCN._set_hidden_state": [[71, 75], ["torch.zeros().to", "torch.zeros"], "methods", ["None"], ["", "def", "_set_hidden_state", "(", "self", ",", "X", ",", "H", ")", ":", "\n", "        ", "if", "H", "is", "None", ":", "\n", "            ", "H", "=", "torch", ".", "zeros", "(", "X", ".", "shape", "[", "0", "]", ",", "self", ".", "out_channels", ")", ".", "to", "(", "X", ".", "device", ")", "\n", "", "return", "H", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.temporalgcn.TGCN._calculate_update_gate": [[77, 82], ["torch.cat", "temporalgcn.TGCN.linear_z", "torch.sigmoid", "temporalgcn.TGCN.conv_z"], "methods", ["None"], ["", "def", "_calculate_update_gate", "(", "self", ",", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ")", ":", "\n", "        ", "Z", "=", "torch", ".", "cat", "(", "[", "self", ".", "conv_z", "(", "X", ",", "edge_index", ",", "edge_weight", ")", ",", "H", "]", ",", "dim", "=", "-", "1", ")", "\n", "Z", "=", "self", ".", "linear_z", "(", "Z", ")", "\n", "Z", "=", "torch", ".", "sigmoid", "(", "Z", ")", "\n", "return", "Z", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.temporalgcn.TGCN._calculate_reset_gate": [[84, 89], ["torch.cat", "temporalgcn.TGCN.linear_r", "torch.sigmoid", "temporalgcn.TGCN.conv_r"], "methods", ["None"], ["", "def", "_calculate_reset_gate", "(", "self", ",", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ")", ":", "\n", "        ", "R", "=", "torch", ".", "cat", "(", "[", "self", ".", "conv_r", "(", "X", ",", "edge_index", ",", "edge_weight", ")", ",", "H", "]", ",", "dim", "=", "-", "1", ")", "\n", "R", "=", "self", ".", "linear_r", "(", "R", ")", "\n", "R", "=", "torch", ".", "sigmoid", "(", "R", ")", "\n", "return", "R", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.temporalgcn.TGCN._calculate_candidate_state": [[91, 96], ["torch.cat", "temporalgcn.TGCN.linear_h", "torch.tanh", "temporalgcn.TGCN.conv_h"], "methods", ["None"], ["", "def", "_calculate_candidate_state", "(", "self", ",", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ",", "R", ")", ":", "\n", "        ", "H_tilde", "=", "torch", ".", "cat", "(", "[", "self", ".", "conv_h", "(", "X", ",", "edge_index", ",", "edge_weight", ")", ",", "H", "*", "R", "]", ",", "dim", "=", "-", "1", ")", "\n", "H_tilde", "=", "self", ".", "linear_h", "(", "H_tilde", ")", "\n", "H_tilde", "=", "torch", ".", "tanh", "(", "H_tilde", ")", "\n", "return", "H_tilde", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.temporalgcn.TGCN._calculate_hidden_state": [[98, 101], ["None"], "methods", ["None"], ["", "def", "_calculate_hidden_state", "(", "self", ",", "Z", ",", "H", ",", "H_tilde", ")", ":", "\n", "        ", "H", "=", "Z", "*", "H", "+", "(", "1", "-", "Z", ")", "*", "H_tilde", "\n", "return", "H", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.temporalgcn.TGCN.forward": [[103, 125], ["temporalgcn.TGCN._set_hidden_state", "temporalgcn.TGCN._calculate_update_gate", "temporalgcn.TGCN._calculate_reset_gate", "temporalgcn.TGCN._calculate_candidate_state", "temporalgcn.TGCN._calculate_hidden_state"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN._set_hidden_state", "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN._calculate_update_gate", "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN._calculate_reset_gate", "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN._calculate_candidate_state", "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN._calculate_hidden_state"], ["", "def", "forward", "(", "self", ",", "X", ":", "torch", ".", "FloatTensor", ",", "edge_index", ":", "torch", ".", "LongTensor", ",", "\n", "edge_weight", ":", "torch", ".", "FloatTensor", "=", "None", ",", "H", ":", "torch", ".", "FloatTensor", "=", "None", ",", "**", "args", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "\"\"\"\n        Making a forward pass. If edge weights are not present the forward pass\n        defaults to an unweighted graph. If the hidden state matrix is not present\n        when the forward pass is called it is initialized with zeros.\n\n        Arg types:\n            * **X** *(PyTorch Float Tensor)* - Node features.\n            * **edge_index** *(PyTorch Long Tensor)* - Graph edge indices.\n            * **edge_weight** *(PyTorch Long Tensor, optional)* - Edge weight vector.\n            * **H** *(PyTorch Float Tensor, optional)* - Hidden state matrix for all nodes.\n\n        Return types:\n            * **H** *(PyTorch Float Tensor)* - Hidden state matrix for all nodes.\n        \"\"\"", "\n", "H", "=", "self", ".", "_set_hidden_state", "(", "X", ",", "H", ")", "\n", "Z", "=", "self", ".", "_calculate_update_gate", "(", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ")", "\n", "R", "=", "self", ".", "_calculate_reset_gate", "(", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ")", "\n", "H_tilde", "=", "self", ".", "_calculate_candidate_state", "(", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ",", "R", ")", "\n", "H", "=", "self", ".", "_calculate_hidden_state", "(", "Z", ",", "H", ",", "H_tilde", ")", "\n", "return", "H", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.seq2seq.Seq2SeqAttrs.__init__": [[4, 16], ["int", "int", "int", "int", "int", "int", "int", "int", "int", "int", "model_kwargs.get", "model_kwargs.get", "model_kwargs.get", "model_kwargs.get", "model_kwargs.get", "model_kwargs.get", "model_kwargs.get", "model_kwargs.get", "model_kwargs.get", "model_kwargs.get"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "sparse_idx", ",", "angle_ratio", ",", "geodesic", ",", "**", "model_kwargs", ")", ":", "\n", "        ", "self", ".", "sparse_idx", "=", "sparse_idx", "\n", "self", ".", "max_view", "=", "int", "(", "model_kwargs", ".", "get", "(", "'max_view'", ",", "2", ")", ")", "\n", "self", ".", "cl_decay_steps", "=", "int", "(", "model_kwargs", ".", "get", "(", "'cl_decay_steps'", ",", "1000", ")", ")", "\n", "self", ".", "node_num", "=", "int", "(", "model_kwargs", ".", "get", "(", "'node_num'", ",", "6", ")", ")", "\n", "self", ".", "layer_num", "=", "int", "(", "model_kwargs", ".", "get", "(", "'layer_num'", ",", "2", ")", ")", "\n", "self", ".", "rnn_units", "=", "int", "(", "model_kwargs", ".", "get", "(", "'rnn_units'", ",", "32", ")", ")", "\n", "self", ".", "input_dim", "=", "int", "(", "model_kwargs", ".", "get", "(", "'input_dim'", ",", "2", ")", ")", "\n", "self", ".", "output_dim", "=", "int", "(", "model_kwargs", ".", "get", "(", "'output_dim'", ",", "2", ")", ")", "\n", "self", ".", "seq_len", "=", "int", "(", "model_kwargs", ".", "get", "(", "'seq_len'", ",", "12", ")", ")", "\n", "self", ".", "lck_structure", "=", "model_kwargs", ".", "get", "(", "'lckstructure'", ",", "[", "4", ",", "8", "]", ")", "\n", "self", ".", "embed_dim", "=", "int", "(", "model_kwargs", ".", "get", "(", "'embed_dim'", ",", "16", ")", ")", "\n", "self", ".", "location_dim", "=", "int", "(", "model_kwargs", ".", "get", "(", "'location_dim'", ",", "16", ")", ")", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.seq2seq_model.RNNModel.__init__": [[13, 42], ["super().__init__", "seq2seq.Seq2SeqAttrs.__init__", "range", "torch.ModuleList", "torch.ModuleList", "encoder.EncoderModel", "decoder.DecoderModel", "int", "bool", "model_kwargs.get", "model_kwargs.get", "conv.append", "conv.append", "getattr", "getattr"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN.__init__", "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN.__init__"], ["    ", "def", "__init__", "(", "self", ",", "loc_info", ",", "sparse_idx", ",", "geodesic", ",", "angle_ratio", ",", "logger", "=", "None", ",", "**", "model_kwargs", ")", ":", "\n", "        ", "'''\n        Conditional Local Convolution Recurrent Network, implemented based on DCRNN,\n        Args:\n            loc_info (torch.Tensor): location infomation of each nodes, with the shape (node_num, location_dim). For sphercial signals, location_dim=2.\n            sparse_idx (torch.Tensor): sparse_idx with the shape (2, node_num * nbhd_num).\n            geodesic (torch.Tensor): geodesic distance between each point and its neighbors, with the shape (node_num * nbhd_num), corresponding to sparse_idx.\n            angle_ratio (torch.Tensor): the defined angle ratio contributing to orientation density, with the shape (node_num * nbhd_num), corresponding to sparse_idx.\n            model_kwargs (dict): Other model args see the config.yaml.\n        '''", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "Seq2SeqAttrs", ".", "__init__", "(", "self", ",", "sparse_idx", ",", "geodesic", ",", "angle_ratio", ",", "**", "model_kwargs", ")", "\n", "self", ".", "register_buffer", "(", "'node_embeddings'", ",", "nn", ".", "Parameter", "(", "torch", ".", "randn", "(", "self", ".", "node_num", ",", "self", ".", "embed_dim", ")", ",", "requires_grad", "=", "True", ")", ")", "\n", "self", ".", "feature_embedding", "=", "nn", ".", "Linear", "(", "self", ".", "input_dim", ",", "self", ".", "embed_dim", ")", "\n", "\n", "self", ".", "conv_ker", "=", "CLConv", "(", "\n", "self", ".", "location_dim", ",", "\n", "self", ".", "sparse_idx", ",", "\n", "self", ".", "node_num", ",", "\n", "self", ".", "lck_structure", ",", "\n", "loc_info", ",", "\n", "self", ".", "angle_ratio", ",", "\n", "self", ".", "geodesic", ",", "\n", "self", ".", "max_view", "\n", ")", "\n", "self", ".", "encoder_model", "=", "EncoderModel", "(", "sparse_idx", ",", "geodesic", ",", "angle_ratio", ",", "self", ".", "conv_ker", ",", "**", "model_kwargs", ")", "\n", "self", ".", "decoder_model", "=", "DecoderModel", "(", "sparse_idx", ",", "geodesic", ",", "angle_ratio", ",", "self", ".", "conv_ker", ",", "**", "model_kwargs", ")", "\n", "self", ".", "cl_decay_steps", "=", "int", "(", "model_kwargs", ".", "get", "(", "'cl_decay_steps'", ",", "1000", ")", ")", "\n", "self", ".", "use_curriculum_learning", "=", "bool", "(", "model_kwargs", ".", "get", "(", "'use_curriculum_learning'", ",", "False", ")", ")", "\n", "self", ".", "_logger", "=", "logger", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.seq2seq_model.RNNModel._compute_sampling_threshold": [[43, 46], ["numpy.exp"], "methods", ["None"], ["\n", "", "def", "_compute_sampling_threshold", "(", "self", ",", "batches_seen", ")", ":", "\n", "        ", "return", "self", ".", "cl_decay_steps", "/", "(", "\n", "self", ".", "cl_decay_steps", "+", "np", ".", "exp", "(", "batches_seen", "/", "self", ".", "cl_decay_steps", ")", ")", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.seq2seq_model.RNNModel.encoder": [[47, 58], ["range", "seq2seq_model.RNNModel.encoder_model"], "methods", ["None"], ["\n", "", "def", "get_kernel", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "conv_ker", "\n", "\n", "", "def", "encoder", "(", "self", ",", "inputs", ")", ":", "\n", "        ", "\"\"\"\n        encoder forward pass on t time steps\n        :param inputs: shape (seq_len, batch_size, num_sensor * input_dim)\n        :return: encoder_hidden_state: (num_layers, batch_size, self.hidden_state_size)\n        \"\"\"", "\n", "encoder_hidden_state", "=", "None", "\n", "for", "t", "in", "range", "(", "self", ".", "encoder_model", ".", "seq_len", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.seq2seq_model.RNNModel.decoder": [[59, 80], ["encoder_hidden_state.size", "torch.zeros", "torch.zeros", "torch.zeros", "torch.zeros", "go_symbol.to.to.to", "range", "torch.stack", "torch.stack", "torch.stack", "torch.stack", "seq2seq_model.RNNModel.decoder_model", "torch.stack.append", "torch.stack.append", "numpy.random.uniform", "seq2seq_model.RNNModel._compute_sampling_threshold"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.seq2seq_model.RNNModel._compute_sampling_threshold"], ["            ", "_", ",", "encoder_hidden_state", "=", "self", ".", "encoder_model", "(", "inputs", "[", "t", "]", ",", "encoder_hidden_state", ")", "\n", "\n", "", "return", "encoder_hidden_state", "\n", "\n", "", "def", "decoder", "(", "self", ",", "encoder_hidden_state", ",", "labels", "=", "None", ",", "batches_seen", "=", "None", ")", ":", "\n", "\n", "        ", "batch_size", "=", "encoder_hidden_state", ".", "size", "(", "1", ")", "\n", "go_symbol", "=", "torch", ".", "zeros", "(", "(", "batch_size", ",", "self", ".", "node_num", ",", "self", ".", "output_dim", ")", ")", "\n", "go_symbol", "=", "go_symbol", ".", "to", "(", "encoder_hidden_state", ".", "device", ")", "\n", "decoder_hidden_state", "=", "encoder_hidden_state", "\n", "decoder_input", "=", "go_symbol", "\n", "\n", "outputs", "=", "[", "]", "\n", "\n", "for", "t", "in", "range", "(", "self", ".", "horizon", ")", ":", "\n", "            ", "decoder_output", ",", "decoder_hidden_state", "=", "self", ".", "decoder_model", "(", "decoder_input", ",", "\n", "decoder_hidden_state", ")", "\n", "decoder_input", "=", "decoder_output", "\n", "outputs", ".", "append", "(", "decoder_output", ")", "\n", "if", "self", ".", "training", "and", "self", ".", "use_curriculum_learning", ":", "\n", "                ", "c", "=", "np", ".", "random", ".", "uniform", "(", "0", ",", "1", ")", "\n", "if", "c", "<", "self", ".", "_compute_sampling_threshold", "(", "batches_seen", ")", ":", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.seq2seq_model.RNNModel.forward": [[82, 97], ["seq2seq_model.RNNModel.encoder", "seq2seq_model.RNNModel.decoder", "seq2seq_model.RNNModel._logger.info", "seq2seq_model.count_parameters"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.seq2seq_model.RNNModel.encoder", "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.seq2seq_model.RNNModel.decoder", "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.seq2seq_model.count_parameters"], ["", "", "", "outputs", "=", "torch", ".", "stack", "(", "outputs", ")", "\n", "return", "outputs", "\n", "\n", "", "def", "embedding", "(", "self", ",", "inputs", ")", ":", "\n", "# inputs: b, l, n, f", "\n", "# outputs: b, l, n, e*2", "\n", "        ", "batch_size", ",", "seq_len", ",", "node_num", ",", "feature_size", "=", "inputs", ".", "shape", "\n", "feature_emb", "=", "self", ".", "feature_embedding", "(", "inputs", ")", "\n", "node_emb", "=", "self", ".", "node_embeddings", "[", "None", ",", "None", ",", ":", ",", ":", "]", ".", "expand", "(", "batch_size", ",", "seq_len", ",", "node_num", ",", "self", ".", "embed_dim", ")", "\n", "return", "torch", ".", "cat", "(", "[", "feature_emb", ",", "node_emb", ",", "inputs", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "", "def", "forward", "(", "self", ",", "inputs", ",", "labels", "=", "None", ",", "batches_seen", "=", "None", ")", ":", "\n", "        "]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.gcgru.GConvGRU.__init__": [[37, 47], ["super().__init__", "gcgru.GConvGRU._create_parameters_and_layers"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN.__init__", "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN._create_parameters_and_layers"], ["def", "__init__", "(", "self", ",", "in_channels", ":", "int", ",", "out_channels", ":", "int", ",", "max_view", ":", "int", ",", "\n", "normalization", ":", "str", "=", "\"sym\"", ",", "bias", ":", "bool", "=", "True", ",", "**", "model_kwargs", ")", ":", "\n", "        ", "super", "(", "GConvGRU", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "K", "=", "max_view", "\n", "self", ".", "normalization", "=", "normalization", "\n", "self", ".", "bias", "=", "bias", "\n", "self", ".", "_create_parameters_and_layers", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.gcgru.GConvGRU._create_update_gate_parameters_and_layers": [[49, 62], ["torch_geometric.nn.ChebConv", "torch_geometric.nn.ChebConv"], "methods", ["None"], ["", "def", "_create_update_gate_parameters_and_layers", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "conv_x_z", "=", "ChebConv", "(", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "K", "=", "self", ".", "K", ",", "\n", "normalization", "=", "self", ".", "normalization", ",", "\n", "bias", "=", "self", ".", "bias", ")", "\n", "\n", "self", ".", "conv_h_z", "=", "ChebConv", "(", "in_channels", "=", "self", ".", "out_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "K", "=", "self", ".", "K", ",", "\n", "normalization", "=", "self", ".", "normalization", ",", "\n", "bias", "=", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.gcgru.GConvGRU._create_reset_gate_parameters_and_layers": [[64, 77], ["torch_geometric.nn.ChebConv", "torch_geometric.nn.ChebConv"], "methods", ["None"], ["", "def", "_create_reset_gate_parameters_and_layers", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "conv_x_r", "=", "ChebConv", "(", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "K", "=", "self", ".", "K", ",", "\n", "normalization", "=", "self", ".", "normalization", ",", "\n", "bias", "=", "self", ".", "bias", ")", "\n", "\n", "self", ".", "conv_h_r", "=", "ChebConv", "(", "in_channels", "=", "self", ".", "out_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "K", "=", "self", ".", "K", ",", "\n", "normalization", "=", "self", ".", "normalization", ",", "\n", "bias", "=", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.gcgru.GConvGRU._create_candidate_state_parameters_and_layers": [[79, 92], ["torch_geometric.nn.ChebConv", "torch_geometric.nn.ChebConv"], "methods", ["None"], ["", "def", "_create_candidate_state_parameters_and_layers", "(", "self", ")", ":", "\n", "\n", "        ", "self", ".", "conv_x_h", "=", "ChebConv", "(", "in_channels", "=", "self", ".", "in_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "K", "=", "self", ".", "K", ",", "\n", "normalization", "=", "self", ".", "normalization", ",", "\n", "bias", "=", "self", ".", "bias", ")", "\n", "\n", "self", ".", "conv_h_h", "=", "ChebConv", "(", "in_channels", "=", "self", ".", "out_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "K", "=", "self", ".", "K", ",", "\n", "normalization", "=", "self", ".", "normalization", ",", "\n", "bias", "=", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.gcgru.GConvGRU._create_parameters_and_layers": [[94, 98], ["gcgru.GConvGRU._create_update_gate_parameters_and_layers", "gcgru.GConvGRU._create_reset_gate_parameters_and_layers", "gcgru.GConvGRU._create_candidate_state_parameters_and_layers"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN._create_update_gate_parameters_and_layers", "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN._create_reset_gate_parameters_and_layers", "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN._create_candidate_state_parameters_and_layers"], ["", "def", "_create_parameters_and_layers", "(", "self", ")", ":", "\n", "        ", "self", ".", "_create_update_gate_parameters_and_layers", "(", ")", "\n", "self", ".", "_create_reset_gate_parameters_and_layers", "(", ")", "\n", "self", ".", "_create_candidate_state_parameters_and_layers", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.gcgru.GConvGRU._set_hidden_state": [[100, 104], ["torch.zeros().to", "torch.zeros"], "methods", ["None"], ["", "def", "_set_hidden_state", "(", "self", ",", "X", ",", "H", ")", ":", "\n", "        ", "if", "H", "is", "None", ":", "\n", "            ", "H", "=", "torch", ".", "zeros", "(", "X", ".", "shape", "[", "0", "]", ",", "self", ".", "out_channels", ")", ".", "to", "(", "X", ".", "device", ")", "\n", "", "return", "H", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.gcgru.GConvGRU._calculate_update_gate": [[106, 111], ["gcgru.GConvGRU.conv_x_z", "torch.sigmoid", "gcgru.GConvGRU.conv_h_z"], "methods", ["None"], ["", "def", "_calculate_update_gate", "(", "self", ",", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ")", ":", "\n", "        ", "Z", "=", "self", ".", "conv_x_z", "(", "X", ",", "edge_index", ",", "edge_weight", ")", "\n", "Z", "=", "Z", "+", "self", ".", "conv_h_z", "(", "H", ",", "edge_index", ",", "edge_weight", ")", "\n", "Z", "=", "torch", ".", "sigmoid", "(", "Z", ")", "\n", "return", "Z", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.gcgru.GConvGRU._calculate_reset_gate": [[113, 118], ["gcgru.GConvGRU.conv_x_r", "torch.sigmoid", "gcgru.GConvGRU.conv_h_r"], "methods", ["None"], ["", "def", "_calculate_reset_gate", "(", "self", ",", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ")", ":", "\n", "        ", "R", "=", "self", ".", "conv_x_r", "(", "X", ",", "edge_index", ",", "edge_weight", ")", "\n", "R", "=", "R", "+", "self", ".", "conv_h_r", "(", "H", ",", "edge_index", ",", "edge_weight", ")", "\n", "R", "=", "torch", ".", "sigmoid", "(", "R", ")", "\n", "return", "R", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.gcgru.GConvGRU._calculate_candidate_state": [[120, 125], ["gcgru.GConvGRU.conv_x_h", "torch.tanh", "gcgru.GConvGRU.conv_h_h"], "methods", ["None"], ["", "def", "_calculate_candidate_state", "(", "self", ",", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ",", "R", ")", ":", "\n", "        ", "H_tilde", "=", "self", ".", "conv_x_h", "(", "X", ",", "edge_index", ",", "edge_weight", ")", "\n", "H_tilde", "=", "H_tilde", "+", "self", ".", "conv_h_h", "(", "H", "*", "R", ",", "edge_index", ",", "edge_weight", ")", "\n", "H_tilde", "=", "torch", ".", "tanh", "(", "H_tilde", ")", "\n", "return", "H_tilde", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.gcgru.GConvGRU._calculate_hidden_state": [[127, 130], ["None"], "methods", ["None"], ["", "def", "_calculate_hidden_state", "(", "self", ",", "Z", ",", "H", ",", "H_tilde", ")", ":", "\n", "        ", "H", "=", "Z", "*", "H", "+", "(", "1", "-", "Z", ")", "*", "H_tilde", "\n", "return", "H", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.gcgru.GConvGRU.forward": [[132, 154], ["gcgru.GConvGRU._set_hidden_state", "gcgru.GConvGRU._calculate_update_gate", "gcgru.GConvGRU._calculate_reset_gate", "gcgru.GConvGRU._calculate_candidate_state", "gcgru.GConvGRU._calculate_hidden_state"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN._set_hidden_state", "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN._calculate_update_gate", "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN._calculate_reset_gate", "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN._calculate_candidate_state", "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN._calculate_hidden_state"], ["", "def", "forward", "(", "self", ",", "X", ":", "torch", ".", "FloatTensor", ",", "edge_index", ":", "torch", ".", "LongTensor", ",", "\n", "edge_weight", ":", "torch", ".", "FloatTensor", "=", "None", ",", "H", ":", "torch", ".", "FloatTensor", "=", "None", ",", "**", "args", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "\"\"\"\n        Making a forward pass. If edge weights are not present the forward pass\n        defaults to an unweighted graph. If the hidden state matrix is not present\n        when the forward pass is called it is initialized with zeros.\n\n        Arg types:\n            * **X** *(PyTorch Float Tensor)* - Node features.\n            * **edge_index** *(PyTorch Long Tensor)* - Graph edge indices.\n            * **edge_weight** *(PyTorch Long Tensor, optional)* - Edge weight vector.\n            * **H** *(PyTorch Float Tensor, optional)* - Hidden state matrix for all nodes.\n\n        Return types:\n            * **H** *(PyTorch Float Tensor)* - Hidden state matrix for all nodes.\n        \"\"\"", "\n", "H", "=", "self", ".", "_set_hidden_state", "(", "X", ",", "H", ")", "\n", "Z", "=", "self", ".", "_calculate_update_gate", "(", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ")", "\n", "R", "=", "self", ".", "_calculate_reset_gate", "(", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ")", "\n", "H_tilde", "=", "self", ".", "_calculate_candidate_state", "(", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ",", "R", ")", "\n", "H", "=", "self", ".", "_calculate_hidden_state", "(", "Z", ",", "H", ",", "H_tilde", ")", "\n", "return", "H", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DConv.__init__": [[20, 33], ["torch_geometric.nn.conv.MessagePassing.__init__", "torch.nn.Parameter", "dcrnn.DConv.__reset_parameters", "torch.Tensor", "torch.nn.Parameter", "dcrnn.DConv.register_parameter", "torch.Tensor"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN.__init__", "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DConv.__reset_parameters"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "K", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "DConv", ",", "self", ")", ".", "__init__", "(", "aggr", "=", "'add'", ",", "flow", "=", "\"source_to_target\"", ")", "\n", "assert", "K", ">", "0", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "weight", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "2", ",", "K", ",", "in_channels", ",", "out_channels", ")", ")", "\n", "\n", "if", "bias", ":", "\n", "            ", "self", ".", "bias", "=", "torch", ".", "nn", ".", "Parameter", "(", "torch", ".", "Tensor", "(", "out_channels", ")", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "register_parameter", "(", "'bias'", ",", "None", ")", "\n", "\n", "", "self", ".", "__reset_parameters", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DConv.__reset_parameters": [[34, 37], ["torch.nn.init.xavier_uniform_", "torch.nn.init.zeros_"], "methods", ["None"], ["", "def", "__reset_parameters", "(", "self", ")", ":", "\n", "        ", "torch", ".", "nn", ".", "init", ".", "xavier_uniform_", "(", "self", ".", "weight", ")", "\n", "torch", ".", "nn", ".", "init", ".", "zeros_", "(", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DConv.message": [[38, 40], ["norm.view"], "methods", ["None"], ["", "def", "message", "(", "self", ",", "x_j", ",", "norm", ")", ":", "\n", "        ", "return", "norm", ".", "view", "(", "-", "1", ",", "1", ")", "*", "x_j", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DConv.forward": [[41, 91], ["torch_geometric.utils.to_dense_adj", "adj_mat.reshape.reshape.reshape", "torch.matmul", "deg_out.flatten.flatten.flatten", "torch.matmul", "deg_in.flatten.flatten.flatten", "torch.reciprocal", "torch.reciprocal", "adj_mat.reshape.reshape.transpose", "torch_geometric.utils.dense_to_sparse", "range", "adj_mat.reshape.reshape.size", "adj_mat.reshape.reshape.size", "torch.ones().to", "torch.ones().to", "torch.matmul", "torch.matmul", "dcrnn.DConv.weight.size", "dcrnn.DConv.propagate", "dcrnn.DConv.propagate", "dcrnn.DConv.weight.size", "dcrnn.DConv.propagate", "dcrnn.DConv.propagate", "torch.matmul", "torch.matmul", "torch.ones", "torch.ones", "torch.matmul", "torch.matmul", "adj_mat.reshape.reshape.size", "adj_mat.reshape.reshape.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "X", ":", "torch", ".", "FloatTensor", ",", "edge_index", ":", "torch", ".", "LongTensor", ",", "\n", "edge_weight", ":", "torch", ".", "FloatTensor", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "r\"\"\"Making a forward pass. If edge weights are not present the forward pass\n        defaults to an unweighted graph.\n\n        Arg types:\n            * **X** (PyTorch Float Tensor) - Node features.\n            * **edge_index** (PyTorch Long Tensor) - Graph edge indices.\n            * **edge_weight** (PyTorch Long Tensor, optional) - Edge weight vector.\n\n        Return types:\n            * **H** (PyTorch Float Tensor) - Hidden state matrix for all nodes.\n        \"\"\"", "\n", "adj_mat", "=", "to_dense_adj", "(", "edge_index", ",", "edge_attr", "=", "edge_weight", ")", "\n", "adj_mat", "=", "adj_mat", ".", "reshape", "(", "adj_mat", ".", "size", "(", "1", ")", ",", "adj_mat", ".", "size", "(", "2", ")", ")", "\n", "deg_out", "=", "torch", ".", "matmul", "(", "adj_mat", ",", "torch", ".", "ones", "(", "size", "=", "(", "adj_mat", ".", "size", "(", "0", ")", ",", "1", ")", ")", ".", "to", "(", "X", ".", "device", ")", ")", "\n", "deg_out", "=", "deg_out", ".", "flatten", "(", ")", "\n", "deg_in", "=", "torch", ".", "matmul", "(", "torch", ".", "ones", "(", "size", "=", "(", "1", ",", "adj_mat", ".", "size", "(", "0", ")", ")", ")", ".", "to", "(", "X", ".", "device", ")", ",", "adj_mat", ")", "\n", "deg_in", "=", "deg_in", ".", "flatten", "(", ")", "\n", "\n", "deg_out_inv", "=", "torch", ".", "reciprocal", "(", "deg_out", ")", "\n", "deg_in_inv", "=", "torch", ".", "reciprocal", "(", "deg_in", ")", "\n", "row", ",", "col", "=", "edge_index", "\n", "norm_out", "=", "deg_out_inv", "[", "row", "]", "\n", "norm_in", "=", "deg_in_inv", "[", "row", "]", "\n", "\n", "reverse_edge_index", "=", "adj_mat", ".", "transpose", "(", "0", ",", "1", ")", "\n", "reverse_edge_index", ",", "vv", "=", "dense_to_sparse", "(", "reverse_edge_index", ")", "\n", "\n", "Tx_0", "=", "X", "\n", "Tx_1", "=", "X", "\n", "H", "=", "torch", ".", "matmul", "(", "Tx_0", ",", "(", "self", ".", "weight", "[", "0", "]", ")", "[", "0", "]", ")", "+", "torch", ".", "matmul", "(", "Tx_0", ",", "(", "self", ".", "weight", "[", "1", "]", ")", "[", "0", "]", ")", "\n", "\n", "if", "self", ".", "weight", ".", "size", "(", "1", ")", ">", "1", ":", "\n", "            ", "Tx_1_o", "=", "self", ".", "propagate", "(", "edge_index", ",", "x", "=", "X", ",", "norm", "=", "norm_out", ",", "size", "=", "None", ")", "\n", "Tx_1_i", "=", "self", ".", "propagate", "(", "reverse_edge_index", ",", "x", "=", "X", ",", "norm", "=", "norm_in", ",", "size", "=", "None", ")", "\n", "H", "=", "H", "+", "torch", ".", "matmul", "(", "Tx_1_o", ",", "(", "self", ".", "weight", "[", "0", "]", ")", "[", "1", "]", ")", "+", "torch", ".", "matmul", "(", "Tx_1_i", ",", "(", "self", ".", "weight", "[", "1", "]", ")", "[", "1", "]", ")", "\n", "\n", "", "for", "k", "in", "range", "(", "2", ",", "self", ".", "weight", ".", "size", "(", "1", ")", ")", ":", "\n", "            ", "Tx_2_o", "=", "self", ".", "propagate", "(", "edge_index", ",", "x", "=", "Tx_1_o", ",", "norm", "=", "norm_out", ",", "size", "=", "None", ")", "\n", "Tx_2_o", "=", "2.", "*", "Tx_2_o", "-", "Tx_0", "\n", "Tx_2_i", "=", "self", ".", "propagate", "(", "reverse_edge_index", ",", "x", "=", "Tx_1_i", ",", "norm", "=", "norm_in", ",", "size", "=", "None", ")", "\n", "Tx_2_i", "=", "2.", "*", "Tx_2_i", "-", "Tx_0", "\n", "H", "=", "H", "+", "torch", ".", "matmul", "(", "Tx_2_o", ",", "(", "self", ".", "weight", "[", "0", "]", ")", "[", "k", "]", ")", "+", "torch", ".", "matmul", "(", "Tx_2_i", ",", "(", "self", ".", "weight", "[", "1", "]", ")", "[", "k", "]", ")", "\n", "Tx_0", ",", "Tx_1_o", ",", "Tx_1_i", "=", "Tx_1", ",", "Tx_2_o", ",", "Tx_2_i", "\n", "\n", "", "if", "self", ".", "bias", "is", "not", "None", ":", "\n", "            ", "H", "+=", "self", ".", "bias", "\n", "\n", "", "return", "H", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN.__init__": [[106, 115], ["super().__init__", "dcrnn.DCRNN._create_parameters_and_layers"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN.__init__", "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN._create_parameters_and_layers"], ["def", "__init__", "(", "self", ",", "in_channels", ":", "int", ",", "out_channels", ":", "int", ",", "max_view", ":", "int", ",", "bias", ":", "bool", "=", "True", ",", "**", "model_kwargs", ")", ":", "\n", "        ", "super", "(", "DCRNN", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "in_channels", "=", "in_channels", "\n", "self", ".", "out_channels", "=", "out_channels", "\n", "self", ".", "K", "=", "max_view", "\n", "self", ".", "bias", "=", "bias", "\n", "\n", "self", ".", "_create_parameters_and_layers", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN._create_update_gate_parameters_and_layers": [[116, 121], ["dcrnn.DConv"], "methods", ["None"], ["", "def", "_create_update_gate_parameters_and_layers", "(", "self", ")", ":", "\n", "        ", "self", ".", "conv_x_z", "=", "DConv", "(", "in_channels", "=", "self", ".", "in_channels", "+", "self", ".", "out_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "K", "=", "self", ".", "K", ",", "\n", "bias", "=", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN._create_reset_gate_parameters_and_layers": [[123, 128], ["dcrnn.DConv"], "methods", ["None"], ["", "def", "_create_reset_gate_parameters_and_layers", "(", "self", ")", ":", "\n", "        ", "self", ".", "conv_x_r", "=", "DConv", "(", "in_channels", "=", "self", ".", "in_channels", "+", "self", ".", "out_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "K", "=", "self", ".", "K", ",", "\n", "bias", "=", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN._create_candidate_state_parameters_and_layers": [[130, 135], ["dcrnn.DConv"], "methods", ["None"], ["", "def", "_create_candidate_state_parameters_and_layers", "(", "self", ")", ":", "\n", "        ", "self", ".", "conv_x_h", "=", "DConv", "(", "in_channels", "=", "self", ".", "in_channels", "+", "self", ".", "out_channels", ",", "\n", "out_channels", "=", "self", ".", "out_channels", ",", "\n", "K", "=", "self", ".", "K", ",", "\n", "bias", "=", "self", ".", "bias", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN._create_parameters_and_layers": [[136, 140], ["dcrnn.DCRNN._create_update_gate_parameters_and_layers", "dcrnn.DCRNN._create_reset_gate_parameters_and_layers", "dcrnn.DCRNN._create_candidate_state_parameters_and_layers"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN._create_update_gate_parameters_and_layers", "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN._create_reset_gate_parameters_and_layers", "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN._create_candidate_state_parameters_and_layers"], ["", "def", "_create_parameters_and_layers", "(", "self", ")", ":", "\n", "        ", "self", ".", "_create_update_gate_parameters_and_layers", "(", ")", "\n", "self", ".", "_create_reset_gate_parameters_and_layers", "(", ")", "\n", "self", ".", "_create_candidate_state_parameters_and_layers", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN._set_hidden_state": [[141, 145], ["torch.zeros().to", "torch.zeros"], "methods", ["None"], ["", "def", "_set_hidden_state", "(", "self", ",", "X", ",", "H", ")", ":", "\n", "        ", "if", "H", "is", "None", ":", "\n", "            ", "H", "=", "torch", ".", "zeros", "(", "X", ".", "shape", "[", "0", "]", ",", "self", ".", "out_channels", ")", ".", "to", "(", "X", ".", "device", ")", "\n", "", "return", "H", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN._calculate_update_gate": [[146, 151], ["torch.cat", "dcrnn.DCRNN.conv_x_z", "torch.sigmoid"], "methods", ["None"], ["", "def", "_calculate_update_gate", "(", "self", ",", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ")", ":", "\n", "        ", "Z", "=", "torch", ".", "cat", "(", "[", "X", ",", "H", "]", ",", "dim", "=", "-", "1", ")", "\n", "Z", "=", "self", ".", "conv_x_z", "(", "Z", ",", "edge_index", ",", "edge_weight", ")", "\n", "Z", "=", "torch", ".", "sigmoid", "(", "Z", ")", "\n", "return", "Z", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN._calculate_reset_gate": [[152, 157], ["torch.cat", "dcrnn.DCRNN.conv_x_r", "torch.sigmoid"], "methods", ["None"], ["", "def", "_calculate_reset_gate", "(", "self", ",", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ")", ":", "\n", "        ", "R", "=", "torch", ".", "cat", "(", "[", "X", ",", "H", "]", ",", "dim", "=", "-", "1", ")", "\n", "R", "=", "self", ".", "conv_x_r", "(", "R", ",", "edge_index", ",", "edge_weight", ")", "\n", "R", "=", "torch", ".", "sigmoid", "(", "R", ")", "\n", "return", "R", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN._calculate_candidate_state": [[158, 163], ["torch.cat", "dcrnn.DCRNN.conv_x_h", "torch.tanh"], "methods", ["None"], ["", "def", "_calculate_candidate_state", "(", "self", ",", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ",", "R", ")", ":", "\n", "        ", "H_tilde", "=", "torch", ".", "cat", "(", "[", "X", ",", "H", "*", "R", "]", ",", "dim", "=", "-", "1", ")", "\n", "H_tilde", "=", "self", ".", "conv_x_h", "(", "H_tilde", ",", "edge_index", ",", "edge_weight", ")", "\n", "H_tilde", "=", "torch", ".", "tanh", "(", "H_tilde", ")", "\n", "return", "H_tilde", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN._calculate_hidden_state": [[164, 167], ["None"], "methods", ["None"], ["", "def", "_calculate_hidden_state", "(", "self", ",", "Z", ",", "H", ",", "H_tilde", ")", ":", "\n", "        ", "H", "=", "Z", "*", "H", "+", "(", "1", "-", "Z", ")", "*", "H_tilde", "\n", "return", "H", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN.forward": [[168, 189], ["dcrnn.DCRNN._set_hidden_state", "dcrnn.DCRNN._calculate_update_gate", "dcrnn.DCRNN._calculate_reset_gate", "dcrnn.DCRNN._calculate_candidate_state", "dcrnn.DCRNN._calculate_hidden_state"], "methods", ["home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN._set_hidden_state", "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN._calculate_update_gate", "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN._calculate_reset_gate", "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN._calculate_candidate_state", "home.repos.pwc.inspect_result.bird-tao_clcrn.recurrent.dcrnn.DCRNN._calculate_hidden_state"], ["", "def", "forward", "(", "self", ",", "X", ":", "torch", ".", "FloatTensor", ",", "edge_index", ":", "torch", ".", "LongTensor", ",", "\n", "edge_weight", ":", "torch", ".", "FloatTensor", "=", "None", ",", "H", ":", "torch", ".", "FloatTensor", "=", "None", ",", "**", "args", ")", "->", "torch", ".", "FloatTensor", ":", "\n", "        ", "r\"\"\"Making a forward pass. If edge weights are not present the forward pass\n        defaults to an unweighted graph. If the hidden state matrix is not present\n        when the forward pass is called it is initialized with zeros.\n\n        Arg types:\n            * **X** (PyTorch Float Tensor) - Node features.\n            * **edge_index** (PyTorch Long Tensor) - Graph edge indices.\n            * **edge_weight** (PyTorch Long Tensor, optional) - Edge weight vector.\n            * **H** (PyTorch Float Tensor, optional) - Hidden state matrix for all nodes.\n\n        Return types:\n            * **H** (PyTorch Float Tensor) - Hidden state matrix for all nodes.\n        \"\"\"", "\n", "H", "=", "self", ".", "_set_hidden_state", "(", "X", ",", "H", ")", "\n", "Z", "=", "self", ".", "_calculate_update_gate", "(", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ")", "\n", "R", "=", "self", ".", "_calculate_reset_gate", "(", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ")", "\n", "H_tilde", "=", "self", ".", "_calculate_candidate_state", "(", "X", ",", "edge_index", ",", "edge_weight", ",", "H", ",", "R", ")", "\n", "H", "=", "self", ".", "_calculate_hidden_state", "(", "Z", ",", "H", ",", "H_tilde", ")", "\n", "return", "H", "\n", "", "", ""]], "home.repos.pwc.inspect_result.bird-tao_clcrn.scripts.generate_training_data.latlon2xyz": [[16, 23], ["numpy.sin", "numpy.cos", "numpy.cos", "numpy.cos", "numpy.sin"], "function", ["None"], ["def", "latlon2xyz", "(", "lat", ",", "lon", ")", ":", "\n", "    ", "lat", "=", "lat", "*", "np", ".", "pi", "/", "180", "\n", "lon", "=", "lon", "*", "np", ".", "pi", "/", "180", "\n", "x", "=", "np", ".", "cos", "(", "lat", ")", "*", "np", ".", "cos", "(", "lon", ")", "\n", "y", "=", "np", ".", "cos", "(", "lat", ")", "*", "np", ".", "sin", "(", "lon", ")", "\n", "z", "=", "np", ".", "sin", "(", "lat", ")", "\n", "return", "x", ",", "y", ",", "z", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.scripts.generate_training_data.date_to_inputseq": [[25, 57], ["range", "numpy.stack", "numpy.stack", "numpy.stack", "numpy.stack", "numpy.stack", "np.stack.append", "np.stack.append", "np.stack.append", "np.stack.append", "range", "pandas.DatetimeIndex", "pandas.DatetimeIndex", "pandas.DatetimeIndex", "pandas.DatetimeIndex", "numpy.array", "numpy.array", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "date_to_inputseq", "(", "time_data", ",", "mask_dataset", ",", "args", ")", ":", "\n", "    ", "tmpdata", "=", "time_data", "[", "mask_dataset", "]", "\n", "horizon", "=", "args", ".", "output_horizon_len", "\n", "input_len", "=", "args", ".", "input_seq_len", "\n", "step_size", "=", "args", ".", "step_size", "\n", "L", "=", "tmpdata", ".", "shape", "[", "0", "]", "\n", "dataset_year", "=", "[", "]", "\n", "dataset_month", "=", "[", "]", "\n", "dataset_day", "=", "[", "]", "\n", "dataset_hour", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "input_len", ")", ":", "\n", "        ", "dataset_year", ".", "append", "(", "pd", ".", "DatetimeIndex", "(", "np", ".", "array", "(", "tmpdata", "[", "i", ":", "L", "-", "horizon", "-", "input_len", "+", "i", "]", ")", ")", ".", "year", ")", "\n", "dataset_month", ".", "append", "(", "pd", ".", "DatetimeIndex", "(", "np", ".", "array", "(", "tmpdata", "[", "i", ":", "L", "-", "horizon", "-", "input_len", "+", "i", "]", ")", ")", ".", "month", ")", "\n", "dataset_day", ".", "append", "(", "pd", ".", "DatetimeIndex", "(", "np", ".", "array", "(", "tmpdata", "[", "i", ":", "L", "-", "horizon", "-", "input_len", "+", "i", "]", ")", ")", ".", "day", ")", "\n", "dataset_hour", ".", "append", "(", "pd", ".", "DatetimeIndex", "(", "np", ".", "array", "(", "tmpdata", "[", "i", ":", "L", "-", "horizon", "-", "input_len", "+", "i", "]", ")", ")", ".", "hour", ")", "\n", "\n", "", "dataset_year", "=", "np", ".", "stack", "(", "dataset_year", ",", "axis", "=", "1", ")", "\n", "dataset_month", "=", "np", ".", "stack", "(", "dataset_month", ",", "axis", "=", "1", ")", "\n", "dataset_day", "=", "np", ".", "stack", "(", "dataset_day", ",", "axis", "=", "1", ")", "\n", "dataset_hour", "=", "np", ".", "stack", "(", "dataset_hour", ",", "axis", "=", "1", ")", "\n", "\n", "num_samples", ",", "input_len", "=", "dataset_year", ".", "shape", "[", "0", "]", ",", "dataset_year", ".", "shape", "[", "1", "]", "\n", "\n", "idx", "=", "[", "i", "*", "step_size", "for", "i", "in", "range", "(", "num_samples", "//", "step_size", ")", "]", "\n", "\n", "dataset_year", ",", "dataset_month", ",", "dataset_day", ",", "dataset_hour", "=", "dataset_year", "[", "idx", "]", ",", "dataset_month", "[", "idx", "]", ",", "dataset_day", "[", "idx", "]", ",", "dataset_hour", "[", "idx", "]", "\n", "\n", "\n", "dataset_time", "=", "np", ".", "stack", "(", "[", "dataset_year", ",", "dataset_month", ",", "dataset_day", ",", "dataset_hour", "]", ",", "axis", "=", "-", "1", ")", "\n", "# dataset_time = np.stack([dataset_month, dataset_hour], axis=-1)", "\n", "\n", "return", "dataset_time", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.scripts.generate_training_data.dataset_to_seq2seq": [[58, 80], ["print", "range", "range", "numpy.stack", "numpy.stack", "dataset_x.reshape.reshape", "dataset_y.reshape.reshape", "dataset_x.reshape.append", "dataset_y.reshape.append", "range", "tmpdata.mean", "tmpdata.max", "tmpdata.min", "tmpdata.std"], "function", ["None"], ["", "def", "dataset_to_seq2seq", "(", "raw_data", ",", "mask_dataset", ",", "args", ")", ":", "\n", "    ", "tmpdata", "=", "raw_data", "[", "mask_dataset", "]", "\n", "print", "(", "'Mean:{}, Max{}, Min{}, Std{}'", ".", "format", "(", "tmpdata", ".", "mean", "(", ")", ".", "values", ",", "tmpdata", ".", "max", "(", ")", ".", "values", ",", "tmpdata", ".", "min", "(", ")", ".", "values", ",", "tmpdata", ".", "std", "(", ")", ".", "values", ")", ")", "\n", "horizon", "=", "args", ".", "output_horizon_len", "\n", "input_len", "=", "args", ".", "input_seq_len", "\n", "step_size", "=", "args", ".", "step_size", "\n", "L", "=", "tmpdata", ".", "shape", "[", "0", "]", "\n", "dataset_x", "=", "[", "]", "\n", "dataset_y", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "input_len", ")", ":", "\n", "        ", "dataset_x", ".", "append", "(", "tmpdata", "[", "i", ":", "L", "-", "horizon", "-", "input_len", "+", "i", "]", ")", "\n", "", "for", "j", "in", "range", "(", "horizon", ")", ":", "\n", "        ", "dataset_y", ".", "append", "(", "tmpdata", "[", "j", "+", "input_len", ":", "L", "-", "horizon", "+", "j", "]", ")", "\n", "", "dataset_x", "=", "np", ".", "stack", "(", "dataset_x", ",", "axis", "=", "1", ")", "\n", "dataset_y", "=", "np", ".", "stack", "(", "dataset_y", ",", "axis", "=", "1", ")", "\n", "num_samples", ",", "input_len", "=", "dataset_x", ".", "shape", "[", "0", "]", ",", "dataset_x", ".", "shape", "[", "1", "]", "\n", "dataset_x", "=", "dataset_x", ".", "reshape", "(", "num_samples", ",", "input_len", ",", "-", "1", ")", "\n", "dataset_y", "=", "dataset_y", ".", "reshape", "(", "num_samples", ",", "horizon", ",", "-", "1", ")", "\n", "idx", "=", "[", "i", "*", "step_size", "for", "i", "in", "range", "(", "num_samples", "//", "step_size", ")", "]", "\n", "dataset_x", "=", "dataset_x", "[", "idx", "]", "\n", "dataset_y", "=", "dataset_y", "[", "idx", "]", "\n", "return", "dataset_x", ",", "dataset_y", "\n", "\n"]], "home.repos.pwc.inspect_result.bird-tao_clcrn.scripts.generate_training_data.main": [[81, 218], ["range", "len", "xarray.open_mfdataset", "numpy.array().flatten", "numpy.array().flatten", "numpy.array().flatten", "numpy.array().flatten", "numpy.stack", "xarray.open_mfdataset", "numpy.bitwise_and", "numpy.meshgrid", "numpy.array", "xr.open_mfdataset.__getattr__", "generate_training_data.dataset_to_seq2seq", "generate_training_data.date_to_inputseq", "numpy.repeat", "numpy.repeat().reshape", "numpy.concatenate", "round", "round", "print", "pathlib.Path", "pathlib.Path.mkdir", "enumerate", "xarray.open_mfdataset", "xarray.open_mfdataset", "numpy.bitwise_and", "numpy.meshgrid", "numpy.array", "generate_training_data.dataset_to_seq2seq", "generate_training_data.dataset_to_seq2seq", "generate_training_data.date_to_inputseq", "numpy.repeat", "numpy.repeat().reshape", "numpy.concatenate", "round", "round", "print", "numpy.stack", "numpy.stack", "numpy.stack", "numpy.stack", "numpy.stack", "numpy.stack", "pathlib.Path", "pathlib.Path.mkdir", "enumerate", "numpy.array", "numpy.array", "numpy.array", "numpy.array", "np.array.reshape", "len", "numpy.random.permutation", "open", "pickle.dump", "np.array.reshape", "numpy.random.permutation", "open", "pickle.dump", "numpy.datetime64", "numpy.datetime64", "numpy.repeat", "numpy.arange", "open", "pickle.dump", "numpy.datetime64", "numpy.datetime64", "numpy.repeat", "numpy.arange", "open", "pickle.dump"], "function", ["home.repos.pwc.inspect_result.bird-tao_clcrn.scripts.generate_training_data.dataset_to_seq2seq", "home.repos.pwc.inspect_result.bird-tao_clcrn.scripts.generate_training_data.date_to_inputseq", "home.repos.pwc.inspect_result.bird-tao_clcrn.scripts.generate_training_data.dataset_to_seq2seq", "home.repos.pwc.inspect_result.bird-tao_clcrn.scripts.generate_training_data.dataset_to_seq2seq", "home.repos.pwc.inspect_result.bird-tao_clcrn.scripts.generate_training_data.date_to_inputseq"], ["", "def", "main", "(", "args", ")", ":", "\n", "    ", "for", "ii", "in", "range", "(", "len", "(", "args", ".", "datasets", ")", ")", ":", "\n", "\n", "        ", "constants", "=", "xr", ".", "open_mfdataset", "(", "args", ".", "raw_dataset_dir", "+", "'/{}/*.nc'", ".", "format", "(", "'constants'", ")", ",", "combine", "=", "'by_coords'", ")", "\n", "lsm", "=", "np", ".", "array", "(", "constants", ".", "lsm", ")", ".", "flatten", "(", ")", "\n", "height", "=", "np", ".", "array", "(", "constants", ".", "orography", ")", ".", "flatten", "(", ")", "\n", "latitude", "=", "np", ".", "array", "(", "constants", ".", "lat2d", ")", ".", "flatten", "(", ")", "\n", "longitude", "=", "np", ".", "array", "(", "constants", ".", "lon2d", ")", ".", "flatten", "(", ")", "\n", "geo_context", "=", "np", ".", "stack", "(", "[", "lsm", ",", "height", ",", "latitude", ",", "longitude", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "if", "args", ".", "datasets", "[", "ii", "]", "!=", "'component_of_wind'", ":", "\n", "            ", "data", "=", "xr", ".", "open_mfdataset", "(", "args", ".", "raw_dataset_dir", "+", "'/{}/*.nc'", ".", "format", "(", "args", ".", "datasets", "[", "ii", "]", ")", ",", "combine", "=", "'by_coords'", ")", "\n", "time", "=", "data", ".", "time", ".", "values", "\n", "mask_dataset", "=", "np", ".", "bitwise_and", "(", "np", ".", "datetime64", "(", "args", ".", "start_date", ")", "<=", "time", ",", "time", "<=", "np", ".", "datetime64", "(", "args", ".", "end_date", ")", ")", "\n", "lon", ",", "lat", "=", "np", ".", "meshgrid", "(", "data", ".", "lon", "-", "180", ",", "data", ".", "lat", ")", "\n", "lonlat", "=", "np", ".", "array", "(", "[", "lon", ",", "lat", "]", ")", "\n", "lonlat", "=", "lonlat", ".", "reshape", "(", "2", ",", "32", "*", "64", ")", ".", "T", "\n", "raw_data", "=", "data", ".", "__getattr__", "(", "args", ".", "attri_names", "[", "ii", "]", ")", "\n", "\n", "if", "len", "(", "raw_data", ".", "shape", ")", "==", "4", ":", "# when there are different level, we choose the 13-th level which is sea level", "\n", "                ", "raw_data", "=", "raw_data", "[", ":", ",", "-", "1", ",", "...", "]", "\n", "", "seq2seq_data", ",", "seq2seq_label", "=", "dataset_to_seq2seq", "(", "raw_data", ",", "mask_dataset", ",", "args", ")", "\n", "\n", "time_data", "=", "data", ".", "time", "\n", "time_context", "=", "date_to_inputseq", "(", "time_data", ",", "mask_dataset", ",", "args", ")", "\n", "\n", "num_samples", "=", "seq2seq_data", ".", "shape", "[", "0", "]", "\n", "node_num", "=", "geo_context", ".", "shape", "[", "0", "]", "\n", "time_len", "=", "time_context", ".", "shape", "[", "1", "]", "\n", "\n", "time_context", "=", "np", ".", "repeat", "(", "time_context", "[", ":", ",", ":", ",", "None", ",", ":", "]", ",", "node_num", ",", "axis", "=", "2", ")", "\n", "geo_context", "=", "np", ".", "repeat", "(", "geo_context", "[", "None", ",", ":", ",", ":", "]", ",", "time_len", "*", "num_samples", ",", "axis", "=", "0", ")", ".", "reshape", "(", "num_samples", ",", "time_len", ",", "node_num", ",", "-", "1", ")", "\n", "context", "=", "np", ".", "concatenate", "(", "[", "time_context", ",", "geo_context", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "num_test", "=", "round", "(", "num_samples", "*", "0.2", ")", "\n", "num_train", "=", "round", "(", "num_samples", "*", "0.7", ")", "\n", "num_val", "=", "num_samples", "-", "num_test", "-", "num_train", "\n", "print", "(", "'Number of training samples: {}, validation samples:{}, test samples:{}'", ".", "format", "(", "num_train", ",", "num_val", ",", "num_test", ")", ")", "\n", "\n", "if", "args", ".", "shuffle", ":", "\n", "                ", "idx", "=", "np", ".", "random", ".", "permutation", "(", "np", ".", "arange", "(", "num_samples", ")", ")", "\n", "seq2seq_data", "=", "seq2seq_data", "[", "idx", "]", "\n", "context", "=", "context", "[", "idx", "]", "\n", "seq2seq_label", "=", "seq2seq_label", "[", "idx", "]", "\n", "\n", "", "train_x", "=", "seq2seq_data", "[", ":", "num_train", "]", "[", ":", ",", ":", ",", ":", ",", "None", "]", "\n", "train_context", "=", "context", "[", ":", "num_train", "]", "\n", "train_y", "=", "seq2seq_label", "[", ":", "num_train", "]", "[", ":", ",", ":", ",", ":", ",", "None", "]", "\n", "\n", "val_x", "=", "seq2seq_data", "[", "num_train", ":", "num_train", "+", "num_val", "]", "[", ":", ",", ":", ",", ":", ",", "None", "]", "\n", "val_context", "=", "context", "[", "num_train", ":", "num_train", "+", "num_val", "]", "\n", "val_y", "=", "seq2seq_label", "[", "num_train", ":", "num_train", "+", "num_val", "]", "[", ":", ",", ":", ",", ":", ",", "None", "]", "\n", "\n", "test_x", "=", "seq2seq_data", "[", "num_train", "+", "num_val", ":", "]", "[", ":", ",", ":", ",", ":", ",", "None", "]", "\n", "test_context", "=", "context", "[", "num_train", "+", "num_val", ":", "]", "\n", "test_y", "=", "seq2seq_label", "[", "num_train", "+", "num_val", ":", "]", "[", ":", ",", ":", ",", ":", ",", "None", "]", "\n", "datasets", "=", "[", "[", "train_x", ",", "train_y", ",", "train_context", "]", ",", "[", "val_x", ",", "val_y", ",", "val_context", "]", ",", "[", "test_x", ",", "test_y", ",", "test_context", "]", "]", "\n", "subsets", "=", "[", "'trn'", ",", "'val'", ",", "'test'", "]", "\n", "path", "=", "args", ".", "output_dirs", "[", "ii", "]", "\n", "path_", "=", "Path", "(", "path", ")", "\n", "path_", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "\n", "for", "i", ",", "subset", "in", "enumerate", "(", "subsets", ")", ":", "\n", "                ", "with", "open", "(", "path", "+", "'/{}.pkl'", ".", "format", "(", "subset", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                    ", "save_data", "=", "{", "'x'", ":", "datasets", "[", "i", "]", "[", "0", "]", ",", "\n", "'y'", ":", "datasets", "[", "i", "]", "[", "1", "]", ",", "\n", "'context'", ":", "datasets", "[", "i", "]", "[", "2", "]", "}", "\n", "pickle", ".", "dump", "(", "save_data", ",", "f", ",", "protocol", "=", "4", ")", "\n", "", "", "with", "open", "(", "path", "+", "'/{}.pkl'", ".", "format", "(", "'position_info'", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                ", "save_data", "=", "{", "'lonlat'", ":", "lonlat", "}", "\n", "pickle", ".", "dump", "(", "save_data", ",", "f", ",", "protocol", "=", "4", ")", "\n", "\n", "", "", "else", ":", "\n", "            ", "data_u", "=", "xr", ".", "open_mfdataset", "(", "args", ".", "raw_dataset_dir", "+", "'/10m_u_component_of_wind/*.nc'", ",", "combine", "=", "'by_coords'", ")", "\n", "data_v", "=", "xr", ".", "open_mfdataset", "(", "args", ".", "raw_dataset_dir", "+", "'/10m_v_component_of_wind/*.nc'", ",", "combine", "=", "'by_coords'", ")", "\n", "\n", "time", "=", "data_u", ".", "time", ".", "values", "\n", "mask_dataset", "=", "np", ".", "bitwise_and", "(", "np", ".", "datetime64", "(", "args", ".", "start_date", ")", "<=", "time", ",", "time", "<=", "np", ".", "datetime64", "(", "args", ".", "end_date", ")", ")", "\n", "lon", ",", "lat", "=", "np", ".", "meshgrid", "(", "data_u", ".", "lon", "-", "180", ",", "data_u", ".", "lat", ")", "\n", "lonlat", "=", "np", ".", "array", "(", "[", "lon", ",", "lat", "]", ")", "\n", "lonlat", "=", "lonlat", ".", "reshape", "(", "2", ",", "32", "*", "64", ")", ".", "T", "\n", "\n", "raw_data_u", "=", "data_u", ".", "u10", "\n", "raw_data_v", "=", "data_v", ".", "v10", "\n", "\n", "seq2seq_data_u", ",", "seq2seq_label_u", "=", "dataset_to_seq2seq", "(", "raw_data_u", ",", "mask_dataset", ",", "args", ")", "\n", "seq2seq_data_v", ",", "seq2seq_label_v", "=", "dataset_to_seq2seq", "(", "raw_data_v", ",", "mask_dataset", ",", "args", ")", "\n", "\n", "time_data", "=", "data", ".", "time", "\n", "time_context", "=", "date_to_inputseq", "(", "time_data", ",", "mask_dataset", ",", "args", ")", "\n", "\n", "num_samples", "=", "seq2seq_data_u", ".", "shape", "[", "0", "]", "\n", "node_num", "=", "geo_context", ".", "shape", "[", "0", "]", "\n", "time_len", "=", "time_context", ".", "shape", "[", "1", "]", "\n", "\n", "time_context", "=", "np", ".", "repeat", "(", "time_context", "[", ":", ",", ":", ",", "None", ",", ":", "]", ",", "node_num", ",", "axis", "=", "2", ")", "\n", "geo_context", "=", "np", ".", "repeat", "(", "geo_context", "[", "None", ",", ":", ",", ":", "]", ",", "time_len", "*", "num_samples", ",", "axis", "=", "0", ")", ".", "reshape", "(", "num_samples", ",", "time_len", ",", "node_num", ",", "-", "1", ")", "\n", "context", "=", "np", ".", "concatenate", "(", "[", "time_context", ",", "geo_context", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "num_test", "=", "round", "(", "num_samples", "*", "0.2", ")", "\n", "num_train", "=", "round", "(", "num_samples", "*", "0.7", ")", "\n", "num_val", "=", "num_samples", "-", "num_test", "-", "num_train", "\n", "print", "(", "'Number of training samples: {}, validation samples:{}, test samples:{}'", ".", "format", "(", "num_train", ",", "num_val", ",", "num_test", ")", ")", "\n", "\n", "if", "args", ".", "shuffle", ":", "\n", "                ", "idx", "=", "np", ".", "random", ".", "permutation", "(", "np", ".", "arange", "(", "num_samples", ")", ")", "\n", "seq2seq_data_u", "=", "seq2seq_data_u", "[", "idx", "]", "\n", "seq2seq_label_u", "=", "seq2seq_label_u", "[", "idx", "]", "\n", "seq2seq_data_v", "=", "seq2seq_data_v", "[", "idx", "]", "\n", "seq2seq_label_v", "=", "seq2seq_label_v", "[", "idx", "]", "\n", "context", "=", "context", "[", "idx", "]", "\n", "\n", "", "train_x", "=", "np", ".", "stack", "(", "[", "seq2seq_data_u", "[", ":", "num_train", "]", ",", "seq2seq_data_v", "[", ":", "num_train", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "train_y", "=", "np", ".", "stack", "(", "[", "seq2seq_label_u", "[", ":", "num_train", "]", ",", "seq2seq_label_v", "[", ":", "num_train", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "val_x", "=", "np", ".", "stack", "(", "[", "seq2seq_data_u", "[", "num_train", ":", "num_train", "+", "num_val", "]", ",", "seq2seq_data_v", "[", "num_train", ":", "num_train", "+", "num_val", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "val_y", "=", "np", ".", "stack", "(", "[", "seq2seq_label_u", "[", "num_train", ":", "num_train", "+", "num_val", "]", ",", "seq2seq_label_v", "[", "num_train", ":", "num_train", "+", "num_val", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "test_x", "=", "np", ".", "stack", "(", "[", "seq2seq_data_u", "[", "num_train", "+", "num_val", ":", "]", ",", "seq2seq_data_v", "[", "num_train", "+", "num_val", ":", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "test_y", "=", "np", ".", "stack", "(", "[", "seq2seq_label_u", "[", "num_train", "+", "num_val", ":", "]", ",", "seq2seq_label_v", "[", "num_train", "+", "num_val", ":", "]", "]", ",", "axis", "=", "-", "1", ")", "\n", "\n", "train_context", "=", "context", "[", ":", "num_train", "]", "\n", "val_context", "=", "context", "[", "num_train", ":", "num_train", "+", "num_val", "]", "\n", "test_context", "=", "context", "[", "num_train", "+", "num_val", ":", "]", "\n", "\n", "datasets", "=", "[", "[", "train_x", ",", "train_y", ",", "train_context", "]", ",", "[", "val_x", ",", "val_y", ",", "val_context", "]", ",", "[", "test_x", ",", "test_y", ",", "test_context", "]", "]", "\n", "subsets", "=", "[", "'trn'", ",", "'val'", ",", "'test'", "]", "\n", "path", "=", "args", ".", "output_dirs", "[", "ii", "]", "\n", "path_", "=", "Path", "(", "path", ")", "\n", "path_", ".", "mkdir", "(", "exist_ok", "=", "True", ",", "parents", "=", "True", ")", "\n", "for", "i", ",", "subset", "in", "enumerate", "(", "subsets", ")", ":", "\n", "                ", "with", "open", "(", "path", "+", "'/{}.pkl'", ".", "format", "(", "subset", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                    ", "save_data", "=", "{", "'x'", ":", "datasets", "[", "i", "]", "[", "0", "]", ",", "\n", "'y'", ":", "datasets", "[", "i", "]", "[", "1", "]", ",", "\n", "'context'", ":", "datasets", "[", "i", "]", "[", "2", "]", "}", "\n", "pickle", ".", "dump", "(", "save_data", ",", "f", ",", "protocol", "=", "4", ")", "\n", "", "", "with", "open", "(", "path", "+", "'/{}.pkl'", ".", "format", "(", "'position_info'", ")", ",", "\"wb\"", ")", "as", "f", ":", "\n", "                ", "save_data", "=", "{", "'lonlat'", ":", "lonlat", "}", "\n", "pickle", ".", "dump", "(", "save_data", ",", "f", ",", "protocol", "=", "4", ")", "\n", "\n"]]}