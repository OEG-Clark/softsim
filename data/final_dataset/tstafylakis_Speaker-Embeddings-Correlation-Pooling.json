{"home.repos.pwc.inspect_result.tstafylakis_Speaker-Embeddings-Correlation-Pooling.None.style_eff_FS_stopgrad_mvnorm_chanfreqGM_kernel_SE_resnet_models_noatt.resnet_embedding.__init__": [[22, 106], ["ValueError", "len", "len", "ValueError", "len", "len", "range", "range", "len", "len", "len"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "bottleneck", ",", "embd_dim", ",", "n_classes", ",", "num_filters", ",", "\n", "kernel_size", ",", "\n", "conv_stride", ",", "first_pool_size", ",", "first_pool_stride", ",", "\n", "block_sizes", ",", "block_strides", ",", "\n", "resnet_version", "=", "DEFAULT_VERSION", ",", "data_format", "=", "None", ",", "\n", "dtype", "=", "DEFAULT_DTYPE", ",", "conv_dilation_rate", "=", "1", ",", "\n", "block_kernel_sizes", "=", "[", "]", ",", "block_dilation_rate", "=", "[", "]", ",", "\n", "bn_in_emb", "=", "False", ",", "has_std_in_pooling", "=", "True", ",", "\n", "activation", "=", "tf", ".", "nn", ".", "relu", ",", "l2_norm_embd", "=", "False", ",", "\n", "reg", "=", "[", "]", ",", "use_bias", "=", "False", ",", "block_filters", "=", "[", "]", ",", "SE_type", "=", "'standard'", ",", "SE", "=", "False", ",", "SE_blocks", "=", "[", "]", ",", "SE_ratio", "=", "4", ",", "\n", "renorm", "=", "False", ",", "bn_in_emb_train", "=", "True", ",", "get_excitation_blocks", "=", "True", ",", "get_output_blocks", "=", "True", ",", "\n", "include_regular_stats", "=", "True", ",", "block_freqs", "=", "[", "80", ",", "40", ",", "20", ",", "10", "]", ",", "\n", "style_kernel", "=", "{", "'kernel_type'", ":", "None", ",", "'kernel_param'", ":", "None", ",", "'conv_new_chn_dims'", ":", "None", ",", "'norm_chan_style'", ":", "None", ",", "\n", "'style_in_stats_blocks'", ":", "[", "False", "]", "*", "4", ",", "'mask_type'", ":", "'full'", ",", "'apply_1D_bool'", ":", "False", ",", "'split_freq_bands'", ":", "[", "None", "]", "*", "4", "}", ",", "\n", "add_class_layer", "=", "True", ",", "stop_grad_softmax", "=", "False", ",", "scope_name", "=", "'resnet_model'", ")", ":", "\n", "\n", "    ", "self", ".", "n_classes", "=", "n_classes", "\n", "\n", "if", "not", "data_format", ":", "\n", "      ", "data_format", "=", "'channels_first'", "\n", "\n", "", "self", ".", "resnet_version", "=", "resnet_version", "\n", "if", "resnet_version", "not", "in", "(", "1", ",", "2", ")", ":", "\n", "      ", "raise", "ValueError", "(", "\n", "'Resnet version should be 1 or 2. See README for citations.'", ")", "\n", "\n", "", "self", ".", "bottleneck", "=", "bottleneck", "\n", "self", ".", "block_fn", "=", "_building_block_SE_v2", "\n", "\n", "if", "len", "(", "block_filters", ")", "==", "0", ":", "\n", "      ", "block_filters", "=", "[", "num_filters", "*", "(", "2", "**", "i", ")", "for", "i", "in", "range", "(", "len", "(", "block_sizes", ")", ")", "]", "\n", "\n", "", "if", "len", "(", "SE_blocks", ")", "==", "0", ":", "\n", "      ", "SE_blocks", "=", "[", "SE", "for", "i", "in", "range", "(", "len", "(", "block_sizes", ")", ")", "]", "\n", "", "if", "dtype", "not", "in", "ALLOWED_TYPES", ":", "\n", "      ", "raise", "ValueError", "(", "'dtype must be one of: {}'", ".", "format", "(", "ALLOWED_TYPES", ")", ")", "\n", "\n", "", "self", ".", "data_format", "=", "data_format", "\n", "self", ".", "embd_dim", "=", "embd_dim", "\n", "self", ".", "num_filters", "=", "num_filters", "\n", "self", ".", "block_filters", "=", "block_filters", "\n", "self", ".", "SE_blocks", "=", "SE_blocks", "\n", "self", ".", "kernel_size", "=", "kernel_size", "\n", "self", ".", "conv_stride", "=", "conv_stride", "\n", "self", ".", "conv_dilation_rate", "=", "conv_dilation_rate", "\n", "self", ".", "first_pool_size", "=", "first_pool_size", "\n", "self", ".", "first_pool_stride", "=", "first_pool_stride", "\n", "self", ".", "block_sizes", "=", "block_sizes", "\n", "self", ".", "block_strides", "=", "block_strides", "\n", "if", "block_kernel_sizes", "==", "[", "]", ":", "\n", "      ", "self", ".", "block_kernel_sizes", "=", "[", "3", "]", "*", "len", "(", "block_strides", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "block_kernel_sizes", "=", "block_kernel_sizes", "\n", "", "if", "block_dilation_rate", "==", "[", "]", ":", "\n", "      ", "self", ".", "block_dilation_rate", "=", "[", "1", "]", "*", "len", "(", "block_strides", ")", "\n", "", "else", ":", "\n", "      ", "self", ".", "block_dilation_rate", "=", "block_dilation_rate", "\n", "", "self", ".", "dtype", "=", "dtype", "\n", "self", ".", "pre_activation", "=", "resnet_version", "==", "2", "\n", "self", ".", "bn_in_emb", "=", "bn_in_emb", "\n", "if", "reg", "==", "[", "]", ":", "\n", "      ", "self", ".", "reg", "==", "[", "None", ",", "[", "None", "]", "**", "len", "(", "block_strides", ")", ",", "None", "]", "\n", "", "else", ":", "\n", "      ", "self", ".", "reg", "=", "reg", "\n", "", "self", ".", "use_bias", "=", "use_bias", "\n", "self", ".", "SE_ratio", "=", "SE_ratio", "\n", "self", ".", "SE_type", "=", "SE_type", "\n", "self", ".", "has_std_in_pooling", "=", "has_std_in_pooling", "\n", "self", ".", "add_class_layer", "=", "add_class_layer", "\n", "self", ".", "stop_grad_softmax", "=", "stop_grad_softmax", "\n", "self", ".", "scope_name", "=", "scope_name", "\n", "self", ".", "renorm", "=", "renorm", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "bn_in_emb_train", "=", "bn_in_emb_train", "\n", "self", ".", "l2_norm_embd", "=", "l2_norm_embd", "\n", "self", ".", "get_excitation_blocks", "=", "get_excitation_blocks", "\n", "self", ".", "get_output_blocks", "=", "get_output_blocks", "\n", "self", ".", "style_kernel", "=", "style_kernel", "\n", "self", ".", "include_regular_stats", "=", "include_regular_stats", "\n", "if", "not", "(", "'droprate_chn'", "in", "self", ".", "style_kernel", ")", ":", "\n", "        ", "self", ".", "style_kernel", "[", "'droprate_chn'", "]", "=", "0.0", "\n", "", "if", "not", "(", "'activation_on_cov_feat'", "in", "self", ".", "style_kernel", ")", ":", "\n", "        ", "self", ".", "style_kernel", "[", "'activation_on_cov_feat'", "]", "=", "tf", ".", "identity", "\n", "", "self", ".", "block_freqs", "=", "block_freqs", "\n", "\n"]], "home.repos.pwc.inspect_result.tstafylakis_Speaker-Embeddings-Correlation-Pooling.None.style_eff_FS_stopgrad_mvnorm_chanfreqGM_kernel_SE_resnet_models_noatt.resnet_embedding._custom_dtype_getter": [[107, 115], ["getter", "tensorflow.cast", "getter"], "methods", ["None"], ["", "def", "_custom_dtype_getter", "(", "self", ",", "getter", ",", "name", ",", "shape", "=", "None", ",", "dtype", "=", "DEFAULT_DTYPE", ",", "\n", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "\n", "    ", "if", "dtype", "in", "CASTABLE_TYPES", ":", "\n", "      ", "var", "=", "getter", "(", "name", ",", "shape", ",", "tf", ".", "float32", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "return", "tf", ".", "cast", "(", "var", ",", "dtype", "=", "dtype", ",", "name", "=", "name", "+", "'_cast'", ")", "\n", "", "else", ":", "\n", "      ", "return", "getter", "(", "name", ",", "shape", ",", "dtype", ",", "*", "args", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstafylakis_Speaker-Embeddings-Correlation-Pooling.None.style_eff_FS_stopgrad_mvnorm_chanfreqGM_kernel_SE_resnet_models_noatt.resnet_embedding._model_variable_scope": [[116, 120], ["tensorflow.compat.v1.variable_scope"], "methods", ["None"], ["", "", "def", "_model_variable_scope", "(", "self", ")", ":", "\n", "\n", "    ", "return", "tf", ".", "compat", ".", "v1", ".", "variable_scope", "(", "self", ".", "scope_name", ",", "\n", "custom_getter", "=", "self", ".", "_custom_dtype_getter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstafylakis_Speaker-Embeddings-Correlation-Pooling.None.style_eff_FS_stopgrad_mvnorm_chanfreqGM_kernel_SE_resnet_models_noatt.resnet_embedding._gram_matrix_resnet": [[122, 145], ["tensorflow.shape", "tensorflow.reshape", "tensorflow.transpose", "tensorflow.boolean_mask", "tensorflow.transpose", "tensorflow.cast", "tensorflow.math.reduce_mean", "tensorflow.linalg.einsum", "tensorflow.identity", "tensorflow.math.l2_normalize", "tensorflow.identity", "tensorflow.math.reduce_std", "tensorflow.reduce_sum", "tensorflow.keras.activations.exponential", "tensorflow.math.sign", "tensorflow.math.sqrt", "tensorflow.math.square", "tensorflow.transpose", "tensorflow.linalg.einsum", "tensorflow.math.abs"], "methods", ["None"], ["", "def", "_gram_matrix_resnet", "(", "self", ",", "input_tensor", ",", "triang_mask", ")", ":", "\n", "    ", "input_shape", "=", "tf", ".", "shape", "(", "input_tensor", ")", "\n", "input_tensor", "=", "tf", ".", "reshape", "(", "input_tensor", ",", "[", "-", "1", ",", "input_shape", "[", "1", "]", ",", "input_shape", "[", "2", "]", "*", "input_shape", "[", "3", "]", "]", ")", "#Reshaping according to freq. ranges", "\n", "if", "self", ".", "style_kernel", "[", "'subtract_mean'", "]", ":", "\n", "        ", "input_tensor", "-=", "tf", ".", "math", ".", "reduce_mean", "(", "input_tensor", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "", "if", "self", ".", "style_kernel", "[", "'divide_std'", "]", ":", "\n", "        ", "input_tensor", "/=", "tf", ".", "math", ".", "reduce_std", "(", "input_tensor", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "+", "1e-5", "\n", "", "if", "self", ".", "style_kernel", "[", "'kernel_type'", "]", "is", "None", ":", "# correlation pooling", "\n", "      ", "result", "=", "tf", ".", "linalg", ".", "einsum", "(", "'bci,bdi->bcd'", ",", "input_tensor", ",", "input_tensor", ")", "\n", "", "elif", "self", ".", "style_kernel", "[", "'kernel_type'", "]", "==", "'Gauss'", ":", "# correlation pooling with Gaussian kernel, not presented in the paper", "\n", "      ", "ssq", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "math", ".", "square", "(", "input_tensor", ")", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "True", ")", "\n", "result", "=", "ssq", "+", "tf", ".", "transpose", "(", "ssq", ",", "perm", "=", "[", "0", ",", "2", ",", "1", "]", ")", "\n", "result", "-=", "2", "*", "tf", ".", "linalg", ".", "einsum", "(", "'bci,bdi->bcd'", ",", "input_tensor", ",", "input_tensor", ")", "\n", "result", "=", "tf", ".", "keras", ".", "activations", ".", "exponential", "(", "-", "0.5", "*", "result", "/", "self", ".", "style_kernel", "[", "'kernel_param'", "]", "[", "0", "]", ")", "# self.style_kernel['kernel_param'][0] = sigma**2", "\n", "", "result", "=", "self", ".", "style_kernel", "[", "'activation_on_cov_feat'", "]", "(", "result", ")", "\n", "result", "=", "tf", ".", "transpose", "(", "result", ",", "perm", "=", "[", "1", ",", "2", ",", "0", "]", ")", "\n", "result", "=", "tf", ".", "boolean_mask", "(", "result", ",", "triang_mask", ")", "\n", "result", "=", "tf", ".", "transpose", "(", "result", ",", "perm", "=", "[", "1", ",", "0", "]", ")", "\n", "num_locations", "=", "tf", ".", "cast", "(", "input_shape", "[", "2", "]", "*", "input_shape", "[", "3", "]", ",", "tf", ".", "float32", ")", "\n", "result", "=", "result", "/", "num_locations", "\n", "result", "=", "tf", ".", "math", ".", "sign", "(", "result", ")", "*", "tf", ".", "math", ".", "sqrt", "(", "tf", ".", "math", ".", "abs", "(", "result", ")", ")", "if", "self", ".", "style_kernel", "[", "'pownorm_chn_style'", "]", "else", "tf", ".", "identity", "(", "result", ")", "\n", "result", "=", "tf", ".", "math", ".", "l2_normalize", "(", "result", ",", "axis", "=", "-", "1", ")", "if", "self", ".", "style_kernel", "[", "'l2norm_chn_style'", "]", "else", "tf", ".", "identity", "(", "result", ")", "\n", "return", "result", "\n", "\n"]], "home.repos.pwc.inspect_result.tstafylakis_Speaker-Embeddings-Correlation-Pooling.None.style_eff_FS_stopgrad_mvnorm_chanfreqGM_kernel_SE_resnet_models_noatt.resnet_embedding._create_triang_mask": [[147, 162], ["tensorflow.ones", "tensorflow.cast", "int", "tensorflow.linalg.band_part", "tensorflow.cast", "int", "tensorflow.cast", "int", "tensorflow.cast", "int", "tensorflow.linalg.band_part", "tensorflow.linalg.band_part", "tensorflow.linalg.band_part"], "methods", ["None"], ["", "def", "_create_triang_mask", "(", "self", ",", "nch", ")", ":", "\n", "    ", "ones", "=", "tf", ".", "ones", "(", "[", "nch", ",", "nch", "]", ")", "\n", "if", "self", ".", "style_kernel", "[", "'mask_type'", "]", "==", "\"uptriang\"", ":", "\n", "        ", "mask", "=", "tf", ".", "cast", "(", "tf", ".", "linalg", ".", "band_part", "(", "ones", ",", "0", ",", "-", "1", ")", ",", "dtype", "=", "tf", ".", "bool", ")", "# Make a bool mask                                                                 ", "\n", "triang_mask_len", "=", "int", "(", "nch", "*", "(", "nch", "+", "1", ")", "/", "2.0", ")", "\n", "", "elif", "self", ".", "style_kernel", "[", "'mask_type'", "]", "==", "\"uptriang_nodiag\"", ":", "\n", "        ", "mask", "=", "tf", ".", "cast", "(", "tf", ".", "linalg", ".", "band_part", "(", "ones", ",", "0", ",", "-", "1", ")", "-", "tf", ".", "linalg", ".", "band_part", "(", "ones", ",", "0", ",", "0", ")", ",", "dtype", "=", "tf", ".", "bool", ")", "# Make a bool mask                               ", "\n", "triang_mask_len", "=", "int", "(", "nch", "*", "(", "nch", "-", "1", ")", "/", "2.0", ")", "\n", "", "elif", "self", ".", "style_kernel", "[", "'mask_type'", "]", "==", "\"diag\"", ":", "\n", "        ", "mask", "=", "tf", ".", "cast", "(", "tf", ".", "linalg", ".", "band_part", "(", "ones", ",", "0", ",", "0", ")", ",", "dtype", "=", "tf", ".", "bool", ")", "# Make a bool mask                                                                  ", "\n", "triang_mask_len", "=", "int", "(", "nch", ")", "\n", "", "else", ":", "#full                                                                                                                                            ", "\n", "        ", "mask", "=", "tf", ".", "cast", "(", "ones", ",", "dtype", "=", "tf", ".", "bool", ")", "# Make a bool mask                                                                                             ", "\n", "triang_mask_len", "=", "int", "(", "nch", "**", "2", ")", "\n", "", "return", "mask", ",", "triang_mask_len", "\n", "\n"]], "home.repos.pwc.inspect_result.tstafylakis_Speaker-Embeddings-Correlation-Pooling.None.style_eff_FS_stopgrad_mvnorm_chanfreqGM_kernel_SE_resnet_models_noatt.resnet_embedding._create_1D_conv": [[164, 176], ["enumerate", "range", "conv_1D_style_lst.append", "len", "conv_1D_fb_lst.append", "tensorflow.keras.layers.Conv2D"], "methods", ["None"], ["", "def", "_create_1D_conv", "(", "self", ")", ":", "\n", "    ", "conv_1D_style_lst", "=", "[", "]", "\n", "if", "self", ".", "style_kernel", "[", "'apply_1D_bool'", "]", "==", "False", ":", "\n", "      ", "return", "conv_1D_style_lst", "\n", "", "for", "b_cnt", ",", "new_dim", "in", "enumerate", "(", "self", ".", "style_kernel", "[", "'conv_new_chn_dims'", "]", ")", ":", "\n", "      ", "conv_1D_fb_lst", "=", "[", "]", "\n", "fbn", "=", "len", "(", "self", ".", "style_kernel", "[", "'split_freq_bands'", "]", "[", "b_cnt", "]", ")", "if", "self", ".", "style_kernel", "[", "'split_freq_bands'", "]", "[", "b_cnt", "]", "is", "not", "None", "else", "1", "\n", "for", "f_cnt", "in", "range", "(", "fbn", ")", ":", "\n", "          ", "conv_1D", "=", "tf", ".", "keras", ".", "layers", ".", "Conv2D", "(", "filters", "=", "new_dim", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "data_format", "=", "\"channels_first\"", ")", "if", "new_dim", "is", "not", "None", "else", "None", "\n", "conv_1D_fb_lst", ".", "append", "(", "conv_1D", ")", "\n", "", "conv_1D_style_lst", ".", "append", "(", "conv_1D_fb_lst", ")", "\n", "", "return", "conv_1D_style_lst", "\n", "\n"]], "home.repos.pwc.inspect_result.tstafylakis_Speaker-Embeddings-Correlation-Pooling.None.style_eff_FS_stopgrad_mvnorm_chanfreqGM_kernel_SE_resnet_models_noatt.resnet_embedding._create_1D_conv_freq_independent": [[178, 186], ["enumerate", "conv_1D_style_lst.append", "tensorflow.keras.layers.Conv2D"], "methods", ["None"], ["", "def", "_create_1D_conv_freq_independent", "(", "self", ")", ":", "\n", "    ", "conv_1D_style_lst", "=", "[", "]", "\n", "if", "self", ".", "style_kernel", "[", "'apply_1D_bool'", "]", "==", "False", ":", "\n", "      ", "return", "conv_1D_style_lst", "\n", "", "for", "b_cnt", ",", "new_dim", "in", "enumerate", "(", "self", ".", "style_kernel", "[", "'conv_new_chn_dims'", "]", ")", ":", "\n", "      ", "conv_1D", "=", "tf", ".", "keras", ".", "layers", ".", "Conv2D", "(", "filters", "=", "new_dim", ",", "kernel_size", "=", "(", "1", ",", "1", ")", ",", "data_format", "=", "\"channels_first\"", ")", "if", "new_dim", "is", "not", "None", "else", "None", "\n", "conv_1D_style_lst", ".", "append", "(", "conv_1D", ")", "\n", "", "return", "conv_1D_style_lst", "\n", "\n"]], "home.repos.pwc.inspect_result.tstafylakis_Speaker-Embeddings-Correlation-Pooling.None.style_eff_FS_stopgrad_mvnorm_chanfreqGM_kernel_SE_resnet_models_noatt.resnet_embedding._apply_1D_conv": [[188, 191], ["conv_1D", "tensorflow.identity"], "methods", ["None"], ["", "def", "_apply_1D_conv", "(", "self", ",", "outputs", ",", "conv_1D", ")", ":", "\n", "    ", "outputs", "=", "conv_1D", "(", "outputs", ")", "if", "conv_1D", "is", "not", "None", "else", "tf", ".", "identity", "(", "outputs", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.tstafylakis_Speaker-Embeddings-Correlation-Pooling.None.style_eff_FS_stopgrad_mvnorm_chanfreqGM_kernel_SE_resnet_models_noatt.resnet_embedding._split_in_freq": [[193, 201], ["outputs_lst.append", "outputs_lst.append"], "methods", ["None"], ["", "def", "_split_in_freq", "(", "self", ",", "outputs", ",", "freq_bands", ")", ":", "\n", "    ", "outputs_lst", "=", "[", "]", "\n", "if", "freq_bands", "is", "None", ":", "\n", "      ", "outputs_lst", ".", "append", "(", "outputs", ")", "\n", "return", "outputs_lst", "\n", "", "for", "fb", "in", "freq_bands", ":", "\n", "      ", "outputs_lst", ".", "append", "(", "outputs", "[", ":", ",", ":", ",", ":", ",", "fb", "[", "0", "]", ":", "fb", "[", "1", "]", "]", ")", "\n", "", "return", "outputs_lst", "\n", "\n"]], "home.repos.pwc.inspect_result.tstafylakis_Speaker-Embeddings-Correlation-Pooling.None.style_eff_FS_stopgrad_mvnorm_chanfreqGM_kernel_SE_resnet_models_noatt.resnet_embedding.__call__": [[202, 344], ["style_eff_FS_stopgrad_mvnorm_chanfreqGM_kernel_SE_resnet_models_noatt.resnet_embedding._model_variable_scope", "conv2d_fixed_padding", "tensorflow.identity", "enumerate", "enumerate", "tensorflow.keras.layers.Dense", "copy.copy", "tensorflow.keras.layers.Dense.", "copy.copy", "tensorflow.transpose", "batch_norm", "style_eff_FS_stopgrad_mvnorm_chanfreqGM_kernel_SE_resnet_models_noatt.resnet_embedding.activation", "tensorflow.compat.v1.layers.max_pooling2d", "tensorflow.identity", "block_layer", "print", "output_blocks.append", "batch_norm", "style_eff_FS_stopgrad_mvnorm_chanfreqGM_kernel_SE_resnet_models_noatt.resnet_embedding.activation", "style_eff_FS_stopgrad_mvnorm_chanfreqGM_kernel_SE_resnet_models_noatt.resnet_embedding._create_1D_conv_freq_independent", "style_eff_FS_stopgrad_mvnorm_chanfreqGM_kernel_SE_resnet_models_noatt.resnet_embedding._create_1D_conv", "triang_mask_lst.append", "tensorflow.concat", "tensorflow.concat.set_shape", "tensorflow.keras.layers.Flatten", "tensorflow.keras.layers.Flatten.", "tensorflow.concat", "tensorflow.compat.v1.keras.layers.BatchNormalization", "tensorflow.compat.v1.get_collection", "tensorflow.keras.layers.Dense", "tensorflow.compat.v1.keras.layers.BatchNormalization.", "tensorflow.identity", "tensorflow.nn.l2_normalize", "tensorflow.identity", "tensorflow.compat.v1.get_collection", "tensorflow.identity", "tensorflow.assign", "tensorflow.compat.v1.add_to_collection", "tensorflow.cond", "excitation_blocks.append", "tensorflow.cond", "style_eff_FS_stopgrad_mvnorm_chanfreqGM_kernel_SE_resnet_models_noatt.resnet_embedding._create_triang_mask", "style_eff_FS_stopgrad_mvnorm_chanfreqGM_kernel_SE_resnet_models_noatt.resnet_embedding._split_in_freq", "enumerate", "tensorflow.concat", "tensorflow.reduce_mean", "tensorflow.compat.v1.keras.initializers.he_uniform", "tensorflow.compat.v1.keras.initializers.he_uniform", "tensorflow.keras.layers.Dense.", "tensorflow.keras.layers.Dense.", "tensorflow.keras.layers.Dense.kernel_constraint", "tensorflow.compat.v1.add_to_collection", "tensorflow.compat.v1.add_to_collection", "tensorflow.shape", "style_eff_FS_stopgrad_mvnorm_chanfreqGM_kernel_SE_resnet_models_noatt.resnet_embedding._apply_1D_conv", "tensorflow.identity", "stats_lst.append", "tensorflow.keras.constraints.UnitNorm", "tensorflow.compat.v1.keras.initializers.he_uniform", "tensorflow.stop_gradient", "style_eff_FS_stopgrad_mvnorm_chanfreqGM_kernel_SE_resnet_models_noatt.resnet_embedding.calculate_arcface_logits", "tensorflow.nn.dropout", "tensorflow.identity", "tensorflow.stop_gradient", "tensorflow.identity", "style_eff_FS_stopgrad_mvnorm_chanfreqGM_kernel_SE_resnet_models_noatt.resnet_embedding._apply_1D_conv", "tensorflow.identity", "style_eff_FS_stopgrad_mvnorm_chanfreqGM_kernel_SE_resnet_models_noatt.resnet_embedding._gram_matrix_resnet", "tensorflow.reduce_mean", "tensorflow.math.reduce_std"], "methods", ["home.repos.pwc.inspect_result.tstafylakis_Speaker-Embeddings-Correlation-Pooling.None.style_eff_FS_stopgrad_mvnorm_chanfreqGM_kernel_SE_resnet_models_noatt.resnet_embedding._model_variable_scope", "home.repos.pwc.inspect_result.tstafylakis_Speaker-Embeddings-Correlation-Pooling.None.resnet_tiedSE_model_uniform_init.conv2d_fixed_padding", "home.repos.pwc.inspect_result.tstafylakis_Speaker-Embeddings-Correlation-Pooling.None.resnet_tiedSE_model_uniform_init.batch_norm", "home.repos.pwc.inspect_result.tstafylakis_Speaker-Embeddings-Correlation-Pooling.None.resnet_tiedSE_model_uniform_init.block_layer", "home.repos.pwc.inspect_result.tstafylakis_Speaker-Embeddings-Correlation-Pooling.None.resnet_tiedSE_model_uniform_init.batch_norm", "home.repos.pwc.inspect_result.tstafylakis_Speaker-Embeddings-Correlation-Pooling.None.style_eff_FS_stopgrad_mvnorm_chanfreqGM_kernel_SE_resnet_models_noatt.resnet_embedding._create_1D_conv_freq_independent", "home.repos.pwc.inspect_result.tstafylakis_Speaker-Embeddings-Correlation-Pooling.None.style_eff_FS_stopgrad_mvnorm_chanfreqGM_kernel_SE_resnet_models_noatt.resnet_embedding._create_1D_conv", "home.repos.pwc.inspect_result.tstafylakis_Speaker-Embeddings-Correlation-Pooling.None.style_eff_FS_stopgrad_mvnorm_chanfreqGM_kernel_SE_resnet_models_noatt.resnet_embedding._create_triang_mask", "home.repos.pwc.inspect_result.tstafylakis_Speaker-Embeddings-Correlation-Pooling.None.style_eff_FS_stopgrad_mvnorm_chanfreqGM_kernel_SE_resnet_models_noatt.resnet_embedding._split_in_freq", "home.repos.pwc.inspect_result.tstafylakis_Speaker-Embeddings-Correlation-Pooling.None.style_eff_FS_stopgrad_mvnorm_chanfreqGM_kernel_SE_resnet_models_noatt.resnet_embedding._apply_1D_conv", "home.repos.pwc.inspect_result.tstafylakis_Speaker-Embeddings-Correlation-Pooling.None.style_eff_FS_stopgrad_mvnorm_chanfreqGM_kernel_SE_resnet_models_noatt.resnet_embedding.calculate_arcface_logits", "home.repos.pwc.inspect_result.tstafylakis_Speaker-Embeddings-Correlation-Pooling.None.style_eff_FS_stopgrad_mvnorm_chanfreqGM_kernel_SE_resnet_models_noatt.resnet_embedding._apply_1D_conv", "home.repos.pwc.inspect_result.tstafylakis_Speaker-Embeddings-Correlation-Pooling.None.style_eff_FS_stopgrad_mvnorm_chanfreqGM_kernel_SE_resnet_models_noatt.resnet_embedding._gram_matrix_resnet"], ["", "def", "__call__", "(", "self", ",", "inputs", ",", "training", ",", "scale", "=", "30.0", ",", "margin", "=", "0.2", ",", "spkr_labs", "=", "None", ")", ":", "\n", "\n", "    ", "reg_cnt", "=", "0", "\n", "with", "self", ".", "_model_variable_scope", "(", ")", ":", "\n", "      ", "if", "self", ".", "data_format", "==", "'channels_first'", ":", "\n", "# Convert the inputs from channels_last (NHWC) to channels_first (NCHW).", "\n", "# This provides a large performance boost on GPU. See", "\n", "# https://www.tensorflow.org/performance/performance_guide#data_formats", "\n", "        ", "inputs", "=", "tf", ".", "transpose", "(", "a", "=", "inputs", ",", "perm", "=", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "\n", "", "inputs", "=", "conv2d_fixed_padding", "(", "\n", "inputs", "=", "inputs", ",", "filters", "=", "self", ".", "num_filters", ",", "kernel_size", "=", "self", ".", "kernel_size", ",", "\n", "strides", "=", "self", ".", "conv_stride", ",", "data_format", "=", "self", ".", "data_format", ",", "dilation_rate", "=", "self", ".", "conv_dilation_rate", ",", "reg", "=", "self", ".", "reg", "[", "reg_cnt", "]", ",", "use_bias", "=", "self", ".", "use_bias", ")", "\n", "inputs", "=", "tf", ".", "identity", "(", "inputs", ",", "'initial_conv'", ")", "\n", "reg_cnt", "+=", "1", "\n", "# We do not include batch normalization or activation functions in V2", "\n", "# for the initial conv1 because the first ResNet unit will perform these", "\n", "# for both the shortcut and non-shortcut paths as part of the first", "\n", "# block's projection. Cf. Appendix of [2].", "\n", "if", "self", ".", "resnet_version", "==", "1", ":", "\n", "        ", "inputs", "=", "batch_norm", "(", "inputs", ",", "training", ",", "self", ".", "data_format", ",", "renorm", "=", "self", ".", "renorm", ")", "\n", "inputs", "=", "self", ".", "activation", "(", "inputs", ")", "\n", "\n", "", "if", "self", ".", "first_pool_size", ":", "\n", "        ", "inputs", "=", "tf", ".", "compat", ".", "v1", ".", "layers", ".", "max_pooling2d", "(", "\n", "inputs", "=", "inputs", ",", "pool_size", "=", "self", ".", "first_pool_size", ",", "\n", "strides", "=", "self", ".", "first_pool_stride", ",", "padding", "=", "'SAME'", ",", "\n", "data_format", "=", "self", ".", "data_format", ")", "\n", "inputs", "=", "tf", ".", "identity", "(", "inputs", ",", "'initial_max_pool'", ")", "\n", "\n", "", "block_reg", "=", "self", ".", "reg", "[", "reg_cnt", "]", "\n", "reg_cnt", "+=", "1", "\n", "excitation_blocks", "=", "[", "]", "\n", "output_blocks", "=", "[", "]", "\n", "\n", "for", "i", ",", "num_blocks", "in", "enumerate", "(", "self", ".", "block_sizes", ")", ":", "\n", "        ", "num_filters", "=", "self", ".", "block_filters", "[", "i", "]", "# updated", "\n", "SE_ratio", "=", "self", ".", "SE_ratio", "if", "self", ".", "SE_blocks", "[", "i", "]", "else", "0", "\n", "inputs", ",", "excitation_block", "=", "block_layer", "(", "\n", "inputs", "=", "inputs", ",", "filters", "=", "num_filters", ",", "bottleneck", "=", "self", ".", "bottleneck", ",", "\n", "block_fn", "=", "self", ".", "block_fn", ",", "blocks", "=", "num_blocks", ",", "\n", "strides", "=", "self", ".", "block_strides", "[", "i", "]", ",", "block_kernel_sizes", "=", "self", ".", "block_kernel_sizes", "[", "i", "]", ",", "\n", "block_dilation_rate", "=", "self", ".", "block_dilation_rate", "[", "i", "]", ",", "\n", "training", "=", "training", ",", "renorm", "=", "self", ".", "renorm", ",", "activation", "=", "self", ".", "activation", ",", "SE_type", "=", "self", ".", "SE_type", ",", "\n", "name", "=", "'block_layer{}'", ".", "format", "(", "i", "+", "1", ")", ",", "data_format", "=", "self", ".", "data_format", ",", "reg", "=", "block_reg", ",", "use_bias", "=", "self", ".", "use_bias", ",", "SE_ratio", "=", "SE_ratio", ")", "\n", "print", "(", "'Block cnt {}, output tensor shape: {}'", ".", "format", "(", "i", ",", "tf", ".", "shape", "(", "inputs", ")", ")", ")", "\n", "output_blocks", ".", "append", "(", "inputs", ")", "\n", "if", "self", ".", "get_excitation_blocks", ":", "\n", "            ", "excitation_blocks", ".", "append", "(", "excitation_block", ")", "\n", "\n", "# Only apply the BN and ReLU for model that does pre_activation in each", "\n", "# building/bottleneck block, eg resnet V2.", "\n", "\n", "# Note that these 2 layers are not used in correlation pooling.", "\n", "", "", "if", "self", ".", "pre_activation", ":", "\n", "        ", "inputs", "=", "batch_norm", "(", "inputs", ",", "training", ",", "self", ".", "data_format", ",", "renorm", "=", "self", ".", "renorm", ")", "\n", "inputs", "=", "self", ".", "activation", "(", "inputs", ")", "\n", "\n", "", "reg_att", "=", "self", ".", "reg", "[", "reg_cnt", "]", "\n", "reg_cnt", "+=", "1", "\n", "\n", "############ Create list of 1D convolutions for styles using conv_new_chn_dims field ", "\n", "######  This is the 2D or 3D projection tensor L which I describe in the paper (2D if 1D_conv_freq_ind==True)", "\n", "conv_1D_style_lst", "=", "self", ".", "_create_1D_conv_freq_independent", "(", ")", "if", "self", ".", "style_kernel", "[", "'1D_conv_freq_ind'", "]", "else", "self", ".", "_create_1D_conv", "(", ")", "\n", "\n", "############ Add correlations to stats  ", "\n", "\n", "stats_lst", "=", "[", "]", "# A list containing corr stats from each block and frequency range. In the paper I extract only from the last block (or stage).", "\n", "stats_len", "=", "0", "\n", "triang_mask_lst", "=", "[", "]", "\n", "\n", "for", "b_cnt", ",", "outputs_orig", "in", "enumerate", "(", "output_blocks", ")", ":", "\n", "          ", "triang_mask", "=", "[", "]", "\n", "r_DO", "=", "self", ".", "style_kernel", "[", "'droprate_chn'", "]", "\n", "if", "self", ".", "style_kernel", "[", "'style_in_stats_blocks'", "]", "[", "b_cnt", "]", ":", "# Do you want correlations from this block? ", "\n", "# noise_shape is set so that we sample only the channel dim (i.e. channelwise dropout)", "\n", "              ", "outputs", "=", "tf", ".", "cond", "(", "training", ",", "lambda", ":", "tf", ".", "nn", ".", "dropout", "(", "outputs_orig", ",", "rate", "=", "r_DO", ",", "noise_shape", "=", "[", "1", ",", "self", ".", "block_filters", "[", "b_cnt", "]", ",", "1", ",", "1", "]", ")", ",", "\n", "lambda", ":", "tf", ".", "identity", "(", "outputs_orig", ")", ")", "\n", "nch", "=", "self", ".", "style_kernel", "[", "'conv_new_chn_dims'", "]", "[", "b_cnt", "]", "if", "self", ".", "style_kernel", "[", "'apply_1D_bool'", "]", "else", "self", ".", "block_filters", "[", "b_cnt", "]", "\n", "outputs", "=", "self", ".", "_apply_1D_conv", "(", "outputs", ",", "conv_1D_style_lst", "[", "b_cnt", "]", ")", "if", "self", ".", "style_kernel", "[", "'1D_conv_freq_ind'", "]", "else", "tf", ".", "identity", "(", "outputs", ")", "\n", "triang_mask", ",", "triang_mask_len", "=", "self", ".", "_create_triang_mask", "(", "nch", ")", "#create the mask to keeponly unique and trainable variables", "\n", "outputs_f_lst", "=", "self", ".", "_split_in_freq", "(", "outputs", ",", "self", ".", "style_kernel", "[", "'split_freq_bands'", "]", "[", "b_cnt", "]", ")", "# split tensor according to freq ranges. ", "\n", "for", "f_cnt", ",", "outputs_f", "in", "enumerate", "(", "outputs_f_lst", ")", ":", "#for each freq range calculate correlation and append in to list", "\n", "                  ", "outputs_f", "=", "tf", ".", "stop_gradient", "(", "outputs_f", ")", "if", "self", ".", "style_kernel", "[", "'stop_grad'", "]", "else", "tf", ".", "identity", "(", "outputs_f", ")", "\n", "outputs_f", "=", "self", ".", "_apply_1D_conv", "(", "outputs_f", ",", "conv_1D_style_lst", "[", "b_cnt", "]", "[", "f_cnt", "]", ")", "if", "not", "self", ".", "style_kernel", "[", "'1D_conv_freq_ind'", "]", "else", "tf", ".", "identity", "(", "outputs_f", ")", "\n", "stats_lst", ".", "append", "(", "self", ".", "_gram_matrix_resnet", "(", "outputs_f", ",", "triang_mask", ")", ")", "# Append the trainable variables of the freq range to the list", "\n", "stats_len", "+=", "triang_mask_len", "\n", "\n", "", "", "triang_mask_lst", ".", "append", "(", "triang_mask", ")", "\n", "", "if", "(", "True", "in", "self", ".", "style_kernel", "[", "'style_in_stats_blocks'", "]", ")", ":", "\n", "          ", "stats_", "=", "tf", ".", "concat", "(", "stats_lst", ",", "axis", "=", "1", ")", "# Concatenate the list to a single vector", "\n", "stats_", ".", "set_shape", "(", "[", "None", ",", "stats_len", "]", ")", "\n", "############ Add regular to stats in case you want to ...  ", "\n", "", "if", "self", ".", "include_regular_stats", ":", "\n", "        ", "if", "self", ".", "has_std_in_pooling", ":", "\n", "          ", "inputs", "=", "tf", ".", "concat", "(", "[", "tf", ".", "reduce_mean", "(", "input_tensor", "=", "inputs", ",", "axis", "=", "2", ",", "keepdims", "=", "True", ")", ",", "tf", ".", "math", ".", "reduce_std", "(", "input_tensor", "=", "inputs", ",", "axis", "=", "2", ",", "keepdims", "=", "True", ")", "]", ",", "3", ")", "\n", "", "else", ":", "\n", "          ", "inputs", "=", "tf", ".", "reduce_mean", "(", "input_tensor", "=", "inputs", ",", "axis", "=", "2", ",", "keepdims", "=", "True", ")", "\n", "", "flatten_layer", "=", "tf", ".", "keras", ".", "layers", ".", "Flatten", "(", "trainable", "=", "False", ")", "\n", "stats_reg_", "=", "flatten_layer", "(", "inputs", ")", "\n", "", "if", "True", "in", "self", ".", "style_kernel", "[", "'style_in_stats_blocks'", "]", "and", "self", ".", "include_regular_stats", ":", "\n", "        ", "stats_", "=", "tf", ".", "concat", "(", "[", "stats_", ",", "stats_reg_", "]", ",", "axis", "=", "1", ")", "\n", "", "elif", "not", "(", "True", "in", "self", ".", "style_kernel", "[", "'style_in_stats_blocks'", "]", ")", "and", "self", ".", "include_regular_stats", ":", "#just use standard stats pooling", "\n", "        ", "stats_", "=", "stats_reg_", "\n", "\n", "", "d_reg", "=", "kernel_regularizer", "=", "self", ".", "reg", "[", "reg_cnt", "]", "\n", "reg_cnt", "+=", "1", "\n", "\n", "# stats to embedding layer", "\n", "dense_ap1", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "units", "=", "self", ".", "embd_dim", ",", "trainable", "=", "True", ",", "use_bias", "=", "self", ".", "use_bias", ",", "kernel_regularizer", "=", "d_reg", ",", "bias_regularizer", "=", "d_reg", ",", "kernel_initializer", "=", "tf", ".", "compat", ".", "v1", ".", "keras", ".", "initializers", ".", "he_uniform", "(", ")", ",", "bias_initializer", "=", "tf", ".", "compat", ".", "v1", ".", "keras", ".", "initializers", ".", "he_uniform", "(", ")", ")", "\n", "\n", "if", "self", ".", "bn_in_emb", ":", "\n", "        ", "bn_ap1", "=", "tf", ".", "compat", ".", "v1", ".", "keras", ".", "layers", ".", "BatchNormalization", "(", "axis", "=", "1", ",", "momentum", "=", "_BATCH_NORM_DECAY", ",", "epsilon", "=", "_BATCH_NORM_EPSILON", ",", "\n", "center", "=", "self", ".", "bn_in_emb_train", ",", "scale", "=", "self", ".", "bn_in_emb_train", ",", "\n", "trainable", "=", "True", ",", "name", "=", "\"bn_in_emb\"", ",", "renorm", "=", "self", ".", "renorm", ")", "\n", "\n", "", "self", ".", "params_up2stats", "=", "copy", ".", "copy", "(", "tf", ".", "compat", ".", "v1", ".", "get_collection", "(", "tf", ".", "compat", ".", "v1", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "scope", "=", "self", ".", "scope_name", ")", ")", "\n", "\n", "if", "self", ".", "add_class_layer", ":", "# classification head layer", "\n", "        ", "dense_ap2", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "units", "=", "self", ".", "n_classes", ",", "trainable", "=", "True", ",", "use_bias", "=", "False", ",", "kernel_regularizer", "=", "self", ".", "reg", "[", "reg_cnt", "]", ",", "kernel_constraint", "=", "tf", ".", "keras", ".", "constraints", ".", "UnitNorm", "(", "axis", "=", "0", ")", ",", "name", "=", "\"ClassHead\"", ",", "kernel_initializer", "=", "tf", ".", "compat", ".", "v1", ".", "keras", ".", "initializers", ".", "he_uniform", "(", ")", ")", "\n", "reg_cnt", "+=", "1", "\n", "", "X_", "=", "dense_ap1", "(", "stats_", ")", "\n", "X_", "=", "bn_ap1", "(", "X_", ")", "if", "self", ".", "bn_in_emb", "else", "tf", ".", "identity", "(", "X_", ")", "\n", "X_", "=", "tf", ".", "nn", ".", "l2_normalize", "(", "X_", ",", "-", "1", ",", "1e-7", ")", "if", "self", ".", "l2_norm_embd", "else", "tf", ".", "identity", "(", "X_", ")", "\n", "\n", "self", ".", "params_up2embd", "=", "copy", ".", "copy", "(", "tf", ".", "compat", ".", "v1", ".", "get_collection", "(", "tf", ".", "compat", ".", "v1", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "scope", "=", "self", ".", "scope_name", ")", ")", "\n", "\n", "if", "self", ".", "add_class_layer", ":", "\n", "        ", "embd_", "=", "tf", ".", "identity", "(", "X_", ",", "'embd_'", ")", "\n", "C_c_", "=", "dense_ap2", "(", "tf", ".", "stop_gradient", "(", "embd_", ")", ")", "if", "self", ".", "stop_grad_softmax", "else", "dense_ap2", "(", "embd_", ")", "\n", "ass_op_", "=", "tf", ".", "assign", "(", "dense_ap2", ".", "kernel", ",", "dense_ap2", ".", "kernel_constraint", "(", "dense_ap2", ".", "kernel", ")", ")", "\n", "tf", ".", "compat", ".", "v1", ".", "add_to_collection", "(", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", ",", "ass_op_", ")", "\n", "# Apply margin and scale of AAM loss:", "\n", "C_c_", "=", "tf", ".", "cond", "(", "training", ",", "lambda", ":", "self", ".", "calculate_arcface_logits", "(", "C_c_", ",", "spkr_labs", ",", "self", ".", "n_classes", ",", "scale", ",", "margin", ")", ",", "lambda", ":", "C_c_", "*", "scale", ")", "\n", "for", "l", "in", "dense_ap1", ".", "losses", ":", "\n", "          ", "tf", ".", "compat", ".", "v1", ".", "add_to_collection", "(", "tf", ".", "GraphKeys", ".", "REGULARIZATION_LOSSES", ",", "l", ")", "\n", "", "for", "l", "in", "dense_ap2", ".", "losses", ":", "\n", "          ", "tf", ".", "compat", ".", "v1", ".", "add_to_collection", "(", "tf", ".", "GraphKeys", ".", "REGULARIZATION_LOSSES", ",", "l", ")", "\n", "", "", "else", ":", "\n", "        ", "C_c_", "=", "None", "\n", "\n", "", "return", "X_", ",", "C_c_", ",", "excitation_blocks", ",", "output_blocks", "\n", "\n"]], "home.repos.pwc.inspect_result.tstafylakis_Speaker-Embeddings-Correlation-Pooling.None.style_eff_FS_stopgrad_mvnorm_chanfreqGM_kernel_SE_resnet_models_noatt.resnet_embedding.get_parameters": [[345, 348], ["tensorflow.compat.v1.get_collection"], "methods", ["None"], ["", "", "def", "get_parameters", "(", "self", ")", ":", "\n", "#return tf.get_collection(tf.GraphKeys.GLOBAL_VARIABLES, scope='resnet_model') orig", "\n", "      ", "return", "tf", ".", "compat", ".", "v1", ".", "get_collection", "(", "tf", ".", "compat", ".", "v1", ".", "GraphKeys", ".", "GLOBAL_VARIABLES", ",", "scope", "=", "self", ".", "scope_name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstafylakis_Speaker-Embeddings-Correlation-Pooling.None.style_eff_FS_stopgrad_mvnorm_chanfreqGM_kernel_SE_resnet_models_noatt.resnet_embedding.get_upd_parameters": [[349, 352], ["tensorflow.compat.v1.get_collection"], "methods", ["None"], ["", "def", "get_upd_parameters", "(", "self", ")", ":", "\n", "#return tf.get_collection(tf.GraphKeys.TRAINABLE_VARIABLES, scope='resnet_model') orig", "\n", "      ", "return", "tf", ".", "compat", ".", "v1", ".", "get_collection", "(", "tf", ".", "compat", ".", "v1", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "scope", "=", "self", ".", "scope_name", ")", "\n", "", "def", "get_params_up2embd", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.tstafylakis_Speaker-Embeddings-Correlation-Pooling.None.style_eff_FS_stopgrad_mvnorm_chanfreqGM_kernel_SE_resnet_models_noatt.resnet_embedding.get_params_up2embd": [[352, 354], ["None"], "methods", ["None"], ["", "def", "get_params_up2embd", "(", "self", ")", ":", "\n", "      ", "return", "self", ".", "params_up2embd", "\n", "\n"]], "home.repos.pwc.inspect_result.tstafylakis_Speaker-Embeddings-Correlation-Pooling.None.style_eff_FS_stopgrad_mvnorm_chanfreqGM_kernel_SE_resnet_models_noatt.resnet_embedding.get_params_up2stats": [[355, 357], ["None"], "methods", ["None"], ["", "def", "get_params_up2stats", "(", "self", ")", ":", "\n", "      ", "return", "self", ".", "params_up2stats", "\n", "\n"]], "home.repos.pwc.inspect_result.tstafylakis_Speaker-Embeddings-Correlation-Pooling.None.style_eff_FS_stopgrad_mvnorm_chanfreqGM_kernel_SE_resnet_models_noatt.resnet_embedding.get_params_stats2embd": [[358, 361], ["range", "len", "len"], "methods", ["None"], ["", "def", "get_params_stats2embd", "(", "self", ")", ":", "\n", "      ", "lst", "=", "[", "self", ".", "params_up2embd", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "self", ".", "params_up2stats", ")", ",", "len", "(", "self", ".", "params_up2embd", ")", ")", "]", "\n", "return", "lst", "\n", "\n"]], "home.repos.pwc.inspect_result.tstafylakis_Speaker-Embeddings-Correlation-Pooling.None.style_eff_FS_stopgrad_mvnorm_chanfreqGM_kernel_SE_resnet_models_noatt.resnet_embedding.calculate_arcface_logits": [[362, 382], ["tensorflow.math.cos", "tensorflow.math.sin", "tensorflow.math.cos", "tensorflow.square", "tensorflow.subtract", "tensorflow.sqrt", "tensorflow.cast", "tensorflow.where", "tensorflow.one_hot", "tensorflow.subtract", "tensorflow.multiply", "tensorflow.add", "tensorflow.subtract", "tensorflow.nn.relu", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply"], "methods", ["None"], ["", "def", "calculate_arcface_logits", "(", "self", ",", "cos_t", ",", "labels", ",", "class_num", ",", "s", ",", "m", ")", ":", "\n", "\n", "      ", "cos_m", "=", "tf", ".", "math", ".", "cos", "(", "m", ")", "\n", "sin_m", "=", "tf", ".", "math", ".", "sin", "(", "m", ")", "\n", "mm", "=", "sin_m", "*", "m", "\n", "threshold", "=", "tf", ".", "math", ".", "cos", "(", "np", ".", "pi", "-", "m", ")", "\n", "\n", "cos_t2", "=", "tf", ".", "square", "(", "cos_t", ",", "name", "=", "'cos_2'", ")", "\n", "sin_t2", "=", "tf", ".", "subtract", "(", "1.", ",", "cos_t2", ",", "name", "=", "'sin_2'", ")", "\n", "sin_t", "=", "tf", ".", "sqrt", "(", "sin_t2", ",", "name", "=", "'sin_t'", ")", "\n", "cos_mt", "=", "s", "*", "tf", ".", "subtract", "(", "tf", ".", "multiply", "(", "cos_t", ",", "cos_m", ")", ",", "tf", ".", "multiply", "(", "sin_t", ",", "sin_m", ")", ",", "name", "=", "'cos_mt'", ")", "\n", "cond_v", "=", "cos_t", "-", "threshold", "\n", "cond", "=", "tf", ".", "cast", "(", "tf", ".", "nn", ".", "relu", "(", "cond_v", ",", "name", "=", "'if_else'", ")", ",", "dtype", "=", "tf", ".", "bool", ")", "\n", "keep_val", "=", "s", "*", "(", "cos_t", "-", "mm", ")", "\n", "cos_mt_temp", "=", "tf", ".", "where", "(", "cond", ",", "cos_mt", ",", "keep_val", ")", "\n", "mask", "=", "tf", ".", "one_hot", "(", "labels", ",", "depth", "=", "class_num", ",", "name", "=", "'one_hot_mask'", ")", "\n", "inv_mask", "=", "tf", ".", "subtract", "(", "1.", ",", "mask", ",", "name", "=", "'inverse_mask'", ")", "\n", "s_cos_t", "=", "tf", ".", "multiply", "(", "s", ",", "cos_t", ",", "name", "=", "'scalar_cos_t'", ")", "\n", "output", "=", "tf", ".", "add", "(", "tf", ".", "multiply", "(", "s_cos_t", ",", "inv_mask", ")", ",", "tf", ".", "multiply", "(", "cos_mt_temp", ",", "mask", ")", ",", "name", "=", "'arcface_logits'", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.tstafylakis_Speaker-Embeddings-Correlation-Pooling.None.style_eff_FS_stopgrad_mvnorm_chanfreqGM_kernel_SE_resnet_models_noatt.resnet_embedding.get_regularization": [[383, 389], ["tensorflow.compat.v1.get_collection", "print", "sum", "print"], "methods", ["None"], ["", "def", "get_regularization", "(", "self", ")", ":", "\n", "      ", "r", "=", "tf", ".", "compat", ".", "v1", ".", "get_collection", "(", "tf", ".", "compat", ".", "v1", ".", "GraphKeys", ".", "REGULARIZATION_LOSSES", ",", "scope", "=", "self", ".", "scope_name", ")", "\n", "print", "(", "\"Regularized variables\"", ")", "\n", "for", "rr", "in", "r", ":", "\n", "        ", "print", "(", "rr", ")", "\n", "", "return", "sum", "(", "r", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.tstafylakis_Speaker-Embeddings-Correlation-Pooling.None.resnet_tiedSE_model_uniform_init.SE_standard": [[48, 59], ["tensorflow.keras.layers.Dense", "tensorflow.keras.layers.Dense", "tensorflow.math.reduce_mean", "tf.keras.layers.Dense.", "tensorflow.nn.relu", "tf.keras.layers.Dense.", "tensorflow.nn.sigmoid", "tensorflow.reshape", "int"], "function", ["None"], ["def", "SE_standard", "(", "input_x", ",", "out_dim", ",", "reg", ",", "ratio", ")", ":", "\n", "  ", "DS", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "units", "=", "int", "(", "out_dim", "/", "ratio", ")", ",", "kernel_regularizer", "=", "reg", ",", "bias_regularizer", "=", "reg", ")", "\n", "DE", "=", "tf", ".", "keras", ".", "layers", ".", "Dense", "(", "units", "=", "out_dim", ",", "kernel_regularizer", "=", "reg", ",", "bias_regularizer", "=", "reg", ")", "\n", "squeeze", "=", "tf", ".", "math", ".", "reduce_mean", "(", "input_x", ",", "axis", "=", "[", "2", ",", "3", "]", ")", "\n", "excitation", "=", "DS", "(", "squeeze", ")", "\n", "excitation", "=", "tf", ".", "nn", ".", "relu", "(", "excitation", ")", "\n", "excitation", "=", "DE", "(", "excitation", ")", "\n", "excitation", "=", "tf", ".", "nn", ".", "sigmoid", "(", "excitation", ")", "\n", "excitation", "=", "tf", ".", "reshape", "(", "excitation", ",", "[", "-", "1", ",", "out_dim", ",", "1", ",", "1", "]", ")", "\n", "scale", "=", "input_x", "*", "excitation", "\n", "return", "scale", ",", "[", "excitation", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.tstafylakis_Speaker-Embeddings-Correlation-Pooling.None.resnet_tiedSE_model_uniform_init.Squeeze_excitation_layer": [[60, 65], ["resnet_tiedSE_model_uniform_init.SE_standard"], "function", ["home.repos.pwc.inspect_result.tstafylakis_Speaker-Embeddings-Correlation-Pooling.None.resnet_tiedSE_model_uniform_init.SE_standard"], ["", "def", "Squeeze_excitation_layer", "(", "input_x", ",", "out_dim", ",", "reg", ",", "ratio", ",", "SE_type", ")", ":", "\n", "  ", "SE_type_lst", "=", "[", "'standard'", "]", "\n", "assert", "(", "SE_type", "in", "SE_type_lst", ")", "\n", "if", "SE_type", "==", "'standard'", ":", "\n", "    ", "return", "SE_standard", "(", "input_x", ",", "out_dim", ",", "reg", ",", "ratio", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.tstafylakis_Speaker-Embeddings-Correlation-Pooling.None.resnet_tiedSE_model_uniform_init.batch_norm": [[66, 91], ["tensorflow.compat.v1.keras.layers.BatchNormalization", "tf.compat.v1.keras.layers.BatchNormalization.", "tensorflow.compat.v1.add_to_collection", "tensorflow.zeros_initializer", "tensorflow.ones_initializer", "tensorflow.zeros_initializer", "tensorflow.ones_initializer"], "function", ["None"], ["", "", "def", "batch_norm", "(", "inputs", ",", "training", ",", "data_format", ",", "renorm", "=", "False", ")", ":", "\n", "  ", "\"\"\"Performs a batch normalization using a standard set of parameters.\"\"\"", "\n", "# We set fused=True for a significant performance boost. See", "\n", "# https://www.tensorflow.org/performance/performance_guide#common_fused_ops", "\n", "#return tf.compat.v1.layers.batch_normalization(", "\n", "#    inputs=inputs, axis=1 if data_format == 'channels_first' else 3,", "\n", "#    momentum=_BATCH_NORM_DECAY, epsilon=_BATCH_NORM_EPSILON, center=True,", "\n", "#    scale=True, training=training, fused=True)", "\n", "\n", "bn", "=", "tf", ".", "compat", ".", "v1", ".", "keras", ".", "layers", ".", "BatchNormalization", "(", "\n", "axis", "=", "1", "if", "data_format", "==", "'channels_first'", "else", "3", ",", "\n", "momentum", "=", "_BATCH_NORM_DECAY", ",", "epsilon", "=", "_BATCH_NORM_EPSILON", ",", "center", "=", "True", ",", "scale", "=", "True", ",", "\n", "beta_initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "gamma_initializer", "=", "tf", ".", "ones_initializer", "(", ")", ",", "\n", "moving_mean_initializer", "=", "tf", ".", "zeros_initializer", "(", ")", ",", "\n", "moving_variance_initializer", "=", "tf", ".", "ones_initializer", "(", ")", ",", "beta_regularizer", "=", "None", ",", "\n", "gamma_regularizer", "=", "None", ",", "beta_constraint", "=", "None", ",", "gamma_constraint", "=", "None", ",", "\n", "trainable", "=", "True", ",", "name", "=", "None", ",", "renorm", "=", "renorm", ",", "\n", "renorm_clipping", "=", "None", ",", "renorm_momentum", "=", "0.99", ",", "fused", "=", "None", ",", "virtual_batch_size", "=", "None", ",", "\n", "adjustment", "=", "None", "\n", ")", "\n", "output", "=", "bn", "(", "inputs", ",", "training", ")", "\n", "for", "u", "in", "bn", ".", "updates", ":", "\n", "    ", "tf", ".", "compat", ".", "v1", ".", "add_to_collection", "(", "tf", ".", "GraphKeys", ".", "UPDATE_OPS", ",", "u", ")", "\n", "", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.tstafylakis_Speaker-Embeddings-Correlation-Pooling.None.resnet_tiedSE_model_uniform_init.fixed_padding": [[92, 144], ["isinstance", "isinstance", "tensorflow.pad", "tensorflow.pad"], "function", ["None"], ["", "def", "fixed_padding", "(", "inputs", ",", "kernel_size", ",", "data_format", ",", "dilation", "=", "1", ")", ":", "\n", "  ", "\"\"\"Pads the input along the spatial dimensions independently of input size.\n\n  Args:\n    inputs: A tensor of size [batch, channels, height_in, width_in] or\n      [batch, height_in, width_in, channels] depending on data_format.\n    kernel_size: The kernel to be used in the conv2d or max_pool2d operation.\n                 Should be a positive integer.\n    data_format: The input format ('channels_last' or 'channels_first').\n\n  Returns:\n    A tensor with the same format as the input with the data either intact\n    (if kernel_size == 1) or padded (if kernel_size > 1).\n  \"\"\"", "\n", "\n", "\"\"\"\n  pad_total = kernel_size - 1\n  pad_beg = pad_total // 2\n  pad_end = pad_total - pad_beg\n\n  if data_format == 'channels_first':\n    padded_inputs = tf.pad(tensor=inputs,\n                           paddings=[[0, 0], [0, 0], [pad_beg, pad_end],\n                                     [pad_beg, pad_end]])\n  else:\n    padded_inputs = tf.pad(tensor=inputs,\n                           paddings=[[0, 0], [pad_beg, pad_end],\n                                     [pad_beg, pad_end], [0, 0]])\n  \"\"\"", "\n", "\n", "if", "isinstance", "(", "kernel_size", ",", "int", ")", ":", "\n", "    ", "kernel_size", "=", "(", "kernel_size", ",", "kernel_size", ")", "\n", "\n", "", "if", "isinstance", "(", "dilation", ",", "int", ")", ":", "\n", "    ", "dilation", "=", "(", "dilation", ",", "dilation", ")", "\n", "\n", "", "pad_total_H", "=", "(", "kernel_size", "[", "0", "]", "-", "1", ")", "*", "dilation", "[", "0", "]", "\n", "pad_beg_H", "=", "pad_total_H", "//", "2", "\n", "pad_end_H", "=", "pad_total_H", "-", "pad_beg_H", "\n", "pad_total_W", "=", "(", "kernel_size", "[", "1", "]", "-", "1", ")", "*", "dilation", "[", "1", "]", "\n", "pad_beg_W", "=", "pad_total_W", "//", "2", "\n", "pad_end_W", "=", "pad_total_W", "-", "pad_beg_W", "\n", "\n", "if", "data_format", "==", "'channels_first'", ":", "\n", "    ", "padded_inputs", "=", "tf", ".", "pad", "(", "tensor", "=", "inputs", ",", "\n", "paddings", "=", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "0", "]", ",", "[", "pad_beg_H", ",", "pad_end_H", "]", ",", "\n", "[", "pad_beg_W", ",", "pad_end_W", "]", "]", ")", "\n", "", "else", ":", "\n", "    ", "padded_inputs", "=", "tf", ".", "pad", "(", "tensor", "=", "inputs", ",", "\n", "paddings", "=", "[", "[", "0", ",", "0", "]", ",", "[", "pad_beg_H", ",", "pad_end_H", "]", ",", "\n", "[", "pad_beg_W", ",", "pad_end_W", "]", ",", "[", "0", ",", "0", "]", "]", ")", "\n", "", "return", "padded_inputs", "\n", "\n"]], "home.repos.pwc.inspect_result.tstafylakis_Speaker-Embeddings-Correlation-Pooling.None.resnet_tiedSE_model_uniform_init.conv2d_fixed_padding": [[146, 173], ["fixed_padding.get_shape", "isinstance", "tensorflow.keras.layers.Conv2D", "tf.keras.layers.Conv2D.", "conv.set_shape", "resnet_tiedSE_model_uniform_init.fixed_padding", "tensorflow.compat.v1.add_to_collection", "tensorflow.compat.v1.keras.initializers.he_uniform", "tensorflow.compat.v1.keras.initializers.he_uniform"], "function", ["home.repos.pwc.inspect_result.tstafylakis_Speaker-Embeddings-Correlation-Pooling.None.resnet_tiedSE_model_uniform_init.fixed_padding"], ["", "def", "conv2d_fixed_padding", "(", "inputs", ",", "filters", ",", "kernel_size", ",", "strides", ",", "data_format", ",", "dilation_rate", "=", "1", ",", "reg", "=", "None", ",", "use_bias", "=", "False", ")", ":", "\n", "  ", "\"\"\"Strided 2-D convolution with explicit padding.\"\"\"", "\n", "# The padding is consistent and is based only on `kernel_size`, not on the", "\n", "# dimensions of `inputs` (as opposed to using `tf.layers.conv2d` alone).", "\n", "in_s", "=", "inputs", ".", "get_shape", "(", ")", "\n", "\n", "if", "isinstance", "(", "strides", ",", "int", ")", ":", "\n", "    ", "strides", "=", "(", "strides", ",", "strides", ")", "\n", "\n", "", "if", "strides", ">", "(", "1", ",", "1", ")", ":", "\n", "    ", "inputs", "=", "fixed_padding", "(", "inputs", ",", "kernel_size", ",", "data_format", ")", "\n", "\n", "", "conv", "=", "tf", ".", "keras", ".", "layers", ".", "Conv2D", "(", "\n", "filters", "=", "filters", ",", "kernel_size", "=", "kernel_size", ",", "strides", "=", "strides", ",", "\n", "padding", "=", "(", "'SAME'", "if", "strides", "==", "(", "1", ",", "1", ")", "else", "'VALID'", ")", ",", "use_bias", "=", "use_bias", ",", "\n", "kernel_initializer", "=", "tf", ".", "compat", ".", "v1", ".", "keras", ".", "initializers", ".", "he_uniform", "(", ")", ",", "\n", "bias_initializer", "=", "tf", ".", "compat", ".", "v1", ".", "keras", ".", "initializers", ".", "he_uniform", "(", ")", ",", "\n", "data_format", "=", "data_format", ",", "dilation_rate", "=", "dilation_rate", ",", "kernel_regularizer", "=", "reg", ",", "bias_regularizer", "=", "reg", ")", "\n", "outputs", "=", "conv", "(", "inputs", ")", "\n", "\n", "for", "l", "in", "conv", ".", "losses", ":", "\n", "    ", "tf", ".", "compat", ".", "v1", ".", "add_to_collection", "(", "tf", ".", "GraphKeys", ".", "REGULARIZATION_LOSSES", ",", "l", ")", "\n", "\n", "# I think this is only needed when dilation rate > (1,1)", "\n", "", "outputs", ".", "set_shape", "(", "[", "None", ",", "filters", ",", "None", ",", "in_s", "[", "3", "]", "//", "strides", "[", "1", "]", "]", ")", "\n", "#print(outputs.get_shape)", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.tstafylakis_Speaker-Embeddings-Correlation-Pooling.None.resnet_tiedSE_model_uniform_init._building_block_SE_v2": [[179, 204], ["resnet_tiedSE_model_uniform_init.batch_norm", "activation", "resnet_tiedSE_model_uniform_init.conv2d_fixed_padding", "resnet_tiedSE_model_uniform_init.batch_norm", "activation", "resnet_tiedSE_model_uniform_init.conv2d_fixed_padding", "resnet_tiedSE_model_uniform_init.block_layer.projection_shortcut", "resnet_tiedSE_model_uniform_init.Squeeze_excitation_layer"], "function", ["home.repos.pwc.inspect_result.tstafylakis_Speaker-Embeddings-Correlation-Pooling.None.resnet_tiedSE_model_uniform_init.batch_norm", "home.repos.pwc.inspect_result.tstafylakis_Speaker-Embeddings-Correlation-Pooling.None.resnet_tiedSE_model_uniform_init.conv2d_fixed_padding", "home.repos.pwc.inspect_result.tstafylakis_Speaker-Embeddings-Correlation-Pooling.None.resnet_tiedSE_model_uniform_init.batch_norm", "home.repos.pwc.inspect_result.tstafylakis_Speaker-Embeddings-Correlation-Pooling.None.resnet_tiedSE_model_uniform_init.conv2d_fixed_padding", "home.repos.pwc.inspect_result.tstafylakis_Speaker-Embeddings-Correlation-Pooling.None.resnet_tiedSE_model_uniform_init.Squeeze_excitation_layer"], ["", "def", "_building_block_SE_v2", "(", "inputs", ",", "filters", ",", "training", ",", "projection_shortcut", ",", "strides", ",", "\n", "data_format", ",", "block_kernel_sizes", "=", "3", ",", "block_dilation_rate", "=", "1", ",", "\n", "reg", "=", "None", ",", "use_bias", "=", "False", ",", "SE_ratio", "=", "2", ",", "SE_type", "=", "\"standard\"", ",", "renorm", "=", "False", ",", "activation", "=", "tf", ".", "nn", ".", "relu", ")", ":", "\n", "  ", "shortcut", "=", "inputs", "\n", "inputs", "=", "batch_norm", "(", "inputs", ",", "training", ",", "data_format", ",", "renorm", "=", "renorm", ")", "\n", "inputs", "=", "activation", "(", "inputs", ")", "\n", "\n", "excitation", "=", "None", "\n", "if", "projection_shortcut", "is", "not", "None", ":", "\n", "    ", "shortcut", "=", "projection_shortcut", "(", "inputs", ")", "\n", "\n", "", "inputs", "=", "conv2d_fixed_padding", "(", "\n", "inputs", "=", "inputs", ",", "filters", "=", "filters", ",", "kernel_size", "=", "block_kernel_sizes", ",", "strides", "=", "strides", ",", "\n", "data_format", "=", "data_format", ",", "dilation_rate", "=", "block_dilation_rate", ",", "reg", "=", "reg", ",", "use_bias", "=", "use_bias", ")", "\n", "\n", "inputs", "=", "batch_norm", "(", "inputs", ",", "training", ",", "data_format", ",", "renorm", "=", "renorm", ")", "\n", "inputs", "=", "activation", "(", "inputs", ")", "\n", "inputs", "=", "conv2d_fixed_padding", "(", "\n", "inputs", "=", "inputs", ",", "filters", "=", "filters", ",", "kernel_size", "=", "block_kernel_sizes", ",", "strides", "=", "1", ",", "\n", "data_format", "=", "data_format", ",", "dilation_rate", "=", "block_dilation_rate", ",", "reg", "=", "reg", ",", "use_bias", "=", "use_bias", ")", "\n", "\n", "if", "SE_ratio", ">", "0", ":", "\n", "      ", "inputs", ",", "excitation", "=", "Squeeze_excitation_layer", "(", "inputs", ",", "filters", ",", "reg", ",", "SE_ratio", ",", "SE_type", ")", "\n", "\n", "", "return", "inputs", "+", "shortcut", ",", "excitation", "\n", "\n"]], "home.repos.pwc.inspect_result.tstafylakis_Speaker-Embeddings-Correlation-Pooling.None.resnet_tiedSE_model_uniform_init.block_layer": [[205, 229], ["block_fn", "excitation_block.append", "range", "resnet_tiedSE_model_uniform_init.conv2d_fixed_padding", "block_fn", "excitation_block.append", "tensorflow.identity", "tensorflow.identity", "tensorflow.zeros"], "function", ["home.repos.pwc.inspect_result.tstafylakis_Speaker-Embeddings-Correlation-Pooling.None.resnet_tiedSE_model_uniform_init.conv2d_fixed_padding"], ["", "def", "block_layer", "(", "inputs", ",", "filters", ",", "bottleneck", ",", "block_fn", ",", "blocks", ",", "strides", ",", "training", ",", "name", ",", "\n", "data_format", ",", "block_kernel_sizes", "=", "3", ",", "block_dilation_rate", "=", "1", ",", "reg", "=", "None", ",", "use_bias", "=", "False", ",", "SE_type", "=", "\"standard\"", ",", "SE_ratio", "=", "None", ",", "renorm", "=", "False", ",", "activation", "=", "tf", ".", "nn", ".", "relu", ")", ":", "\n", "\n", "  ", "filters_out", "=", "filters", "*", "4", "if", "bottleneck", "else", "filters", "\n", "\n", "def", "projection_shortcut", "(", "inputs", ")", ":", "\n", "    ", "return", "conv2d_fixed_padding", "(", "\n", "inputs", "=", "inputs", ",", "filters", "=", "filters_out", ",", "kernel_size", "=", "1", ",", "strides", "=", "strides", ",", "\n", "data_format", "=", "data_format", ",", "dilation_rate", "=", "block_dilation_rate", ",", "reg", "=", "reg", ",", "use_bias", "=", "use_bias", ")", "\n", "", "excitation_block", "=", "[", "]", "\n", "# Only the first block per block_layer uses projection_shortcut and strides", "\n", "inputs", ",", "excitation", "=", "block_fn", "(", "inputs", ",", "filters", ",", "training", ",", "projection_shortcut", ",", "strides", ",", "data_format", ",", "\n", "block_kernel_sizes", ",", "block_dilation_rate", ",", "reg", "=", "reg", ",", "use_bias", "=", "use_bias", ",", "SE_ratio", "=", "SE_ratio", ",", "SE_type", "=", "SE_type", ",", "\n", "activation", "=", "activation", ",", "renorm", "=", "renorm", ")", "\n", "excitation_block", ".", "append", "(", "excitation", ")", "\n", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "    ", "inputs", ",", "excitation", "=", "block_fn", "(", "inputs", ",", "filters", ",", "training", ",", "None", ",", "1", ",", "data_format", ",", "\n", "block_kernel_sizes", ",", "block_dilation_rate", ",", "reg", "=", "reg", ",", "use_bias", "=", "use_bias", ",", "SE_ratio", "=", "SE_ratio", ",", "SE_type", "=", "SE_type", ",", "\n", "activation", "=", "activation", ",", "renorm", "=", "renorm", ")", "\n", "excitation_block", ".", "append", "(", "excitation", ")", "\n", "\n", "#return (tf.identity(inputs, name), tf.identity(excitation_block, name + \"_excitation_block\")) if SE_ratio>0 else (tf.identity(inputs, name), [tf.zeros([1], tf.int32)])", "\n", "", "return", "(", "tf", ".", "identity", "(", "inputs", ",", "name", ")", ",", "excitation_block", ")", "if", "SE_ratio", ">", "0", "else", "(", "tf", ".", "identity", "(", "inputs", ",", "name", ")", ",", "[", "tf", ".", "zeros", "(", "[", "1", "]", ",", "tf", ".", "int32", ")", "]", ")", "\n", "\n"]]}