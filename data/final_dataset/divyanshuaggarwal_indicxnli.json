{"home.repos.pwc.inspect_result.divyanshuaggarwal_indicxnli.None.main.indic_train": [[13, 51], ["print", "os.listdir", "torch.cuda.empty_cache", "src.trainer.get_trainer", "print", "print", "src.model.XNLIModel", "src.datamodule.XNLIDataModule", "src.trainer.get_trainer.fit", "model_name.split", "open", "json.load", "json.load.keys", "print", "src.trainer.get_trainer.test"], "function", ["home.repos.pwc.inspect_result.divyanshuaggarwal_indicxnli.src.trainer.get_trainer"], ["def", "indic_train", "(", ")", ":", "\n", "    ", "for", "model_name", "in", "models", ":", "\n", "        ", "print", "(", "model_name", ")", "\n", "", "results", "=", "{", "}", "\n", "save_path", "=", "model_name", "\n", "\n", "if", "\"/\"", "in", "model_name", ":", "\n", "        ", "save_path", "=", "model_name", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "\n", "", "if", "f\"xnli_experiment_{save_path}_in.json\"", "in", "os", ".", "listdir", "(", "\"results/\"", ")", ":", "\n", "        ", "with", "open", "(", "f\"results/xnli_experiment_{save_path}_in.json\"", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "results", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "", "for", "lang", "in", "INDIC", ":", "\n", "        ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "if", "lang", "in", "results", ".", "keys", "(", ")", ":", "\n", "            ", "print", "(", "f\"skipping {model_name} for language {lang}\"", ")", "\n", "continue", "\n", "\n", "", "trainer", "=", "get_trainer", "(", ")", "\n", "\n", "BATCH_SIZE", "=", "128", "if", "model_name", "not", "in", "big_models", "else", "64", "\n", "# BATCH_SIZE = 128", "\n", "SUFFIX", "=", "\"in\"", "\n", "print", "(", "f\"using {model_name}\"", ")", "\n", "print", "(", "f\"training on {lang}\"", ")", "\n", "model", "=", "XNLIModel", "(", "\n", "model_name", "=", "model_name", ",", "lang", "=", "lang", ",", "batch_size", "=", "BATCH_SIZE", ",", "suffix", "=", "SUFFIX", "\n", ")", "\n", "dm", "=", "XNLIDataModule", "(", "\n", "model_name", "=", "model_name", ",", "lang", "=", "lang", ",", "batch_size", "=", "BATCH_SIZE", ",", "train_lang", "=", "lang", "\n", ")", "\n", "# trainer.tune(model,dm)", "\n", "trainer", ".", "fit", "(", "model", ",", "dm", ")", "\n", "try", ":", "\n", "            ", "trainer", ".", "test", "(", "model", ",", "dm", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.divyanshuaggarwal_indicxnli.None.main.english_train": [[53, 93], ["print", "os.listdir", "src.trainer.get_trainer", "print", "print", "src.model.XNLIModel", "src.datamodule.XNLIDataModule", "src.trainer.get_trainer.fit", "model_name.split", "open", "json.load", "json.load.keys", "print", "src.trainer.get_trainer.test"], "function", ["home.repos.pwc.inspect_result.divyanshuaggarwal_indicxnli.src.trainer.get_trainer"], ["", "", "", "def", "english_train", "(", ")", ":", "\n", "    ", "for", "model_name", "in", "models", ":", "\n", "        ", "print", "(", "model_name", ")", "\n", "", "results", "=", "{", "}", "\n", "save_path", "=", "model_name", "\n", "\n", "if", "\"/\"", "in", "model_name", ":", "\n", "        ", "save_path", "=", "model_name", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "\n", "", "if", "f\"xnli_experiment_{save_path}_en.json\"", "in", "os", ".", "listdir", "(", "\"results/\"", ")", ":", "\n", "        ", "with", "open", "(", "f\"results/xnli_experiment_{save_path}_en.json\"", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "results", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "", "for", "lang", "in", "INDIC", ":", "\n", "# torch.cuda.empty_cache()", "\n", "        ", "if", "lang", "in", "results", ".", "keys", "(", ")", ":", "\n", "            ", "print", "(", "f\"skipping {model_name} for language {lang}\"", ")", "\n", "continue", "\n", "\n", "", "trainer", "=", "get_trainer", "(", ")", "\n", "\n", "SUFFIX", "=", "\"en\"", "\n", "print", "(", "f\"using {model_name}\"", ")", "\n", "print", "(", "f\"training on {lang}\"", ")", "\n", "BATCH_SIZE", "=", "128", "if", "model_name", "not", "in", "big_models", "else", "64", "\n", "# BATCH_SIZE = 128", "\n", "model", "=", "XNLIModel", "(", "\n", "model_name", "=", "model_name", ",", "\n", "lang", "=", "lang", ",", "\n", "batch_size", "=", "BATCH_SIZE", ",", "\n", "suffix", "=", "SUFFIX", ",", "\n", "learning_rate", "=", "2e-5", ",", "\n", ")", "\n", "dm", "=", "XNLIDataModule", "(", "model_name", "=", "model_name", ",", "lang", "=", "lang", ",", "batch_size", "=", "BATCH_SIZE", ")", "\n", "\n", "trainer", ".", "fit", "(", "model", ",", "dm", ")", "\n", "try", ":", "\n", "            ", "trainer", ".", "test", "(", "model", ",", "dm", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.divyanshuaggarwal_indicxnli.None.main.english_indic_train": [[95, 141], ["print", "os.listdir", "src.trainer.get_trainer", "print", "print", "src.datamodule.XNLIDataModule", "src.datamodule.XNLIDataModule", "src.model.XNLIModel", "src.trainer.get_trainer.fit", "src.trainer.get_trainer", "src.trainer.get_trainer.fit", "model_name.split", "open", "json.load", "json.load.keys", "print", "src.trainer.get_trainer.test"], "function", ["home.repos.pwc.inspect_result.divyanshuaggarwal_indicxnli.src.trainer.get_trainer", "home.repos.pwc.inspect_result.divyanshuaggarwal_indicxnli.src.trainer.get_trainer"], ["", "", "", "def", "english_indic_train", "(", ")", ":", "\n", "    ", "for", "model_name", "in", "models", ":", "\n", "        ", "print", "(", "model_name", ")", "\n", "", "results", "=", "{", "}", "\n", "save_path", "=", "model_name", "\n", "\n", "if", "\"/\"", "in", "model_name", ":", "\n", "        ", "save_path", "=", "model_name", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "\n", "", "if", "f\"xnli_experiment_{save_path}_2_step.json\"", "in", "os", ".", "listdir", "(", "\"results/\"", ")", ":", "\n", "        ", "with", "open", "(", "f\"results/xnli_experiment_{save_path}_2_step.json\"", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "results", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "", "for", "lang", "in", "INDIC", ":", "\n", "\n", "        ", "if", "lang", "in", "results", ".", "keys", "(", ")", ":", "\n", "            ", "print", "(", "f\"skipping {model_name} for language {lang}\"", ")", "\n", "continue", "\n", "\n", "", "trainer", "=", "get_trainer", "(", ")", "\n", "\n", "BATCH_SIZE", "=", "128", "if", "model_name", "not", "in", "big_models", "else", "64", "\n", "SUFFIX", "=", "\"2_step\"", "\n", "print", "(", "f\"using {model_name}\"", ")", "\n", "print", "(", "f\"training on {lang}\"", ")", "\n", "dm", "=", "XNLIDataModule", "(", "\n", "model_name", "=", "model_name", ",", "\n", "lang", "=", "lang", ",", "\n", "batch_size", "=", "BATCH_SIZE", ",", "\n", ")", "\n", "dm_2", "=", "XNLIDataModule", "(", "\n", "model_name", "=", "model_name", ",", "lang", "=", "lang", ",", "batch_size", "=", "BATCH_SIZE", ",", "train_lang", "=", "lang", "\n", ")", "\n", "model", "=", "XNLIModel", "(", "\n", "model_name", "=", "model_name", ",", "lang", "=", "lang", ",", "batch_size", "=", "BATCH_SIZE", ",", "suffix", "=", "SUFFIX", "\n", ")", "\n", "trainer", ".", "fit", "(", "model", ",", "dm", ")", "\n", "del", "trainer", "\n", "trainer", "=", "get_trainer", "(", ")", "\n", "trainer", ".", "fit", "(", "model", ",", "dm_2", ")", "\n", "\n", "try", ":", "\n", "            ", "trainer", ".", "test", "(", "model", ",", "dm_2", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "", "del", "trainer", "\n", "\n"]], "home.repos.pwc.inspect_result.divyanshuaggarwal_indicxnli.None.main.english_eval": [[143, 187], ["print", "os.listdir", "torch.cuda.empty_cache", "src.trainer.get_trainer", "print", "print", "src.model.XNLIModel", "src.datamodule.XNLIDataModule", "src.trainer.get_trainer.fit", "model_name.split", "open", "json.load", "json.load.keys", "print", "src.trainer.get_trainer.test"], "function", ["home.repos.pwc.inspect_result.divyanshuaggarwal_indicxnli.src.trainer.get_trainer"], ["", "", "def", "english_eval", "(", ")", ":", "\n", "    ", "for", "model_name", "in", "models", ":", "\n", "        ", "print", "(", "model_name", ")", "\n", "", "results", "=", "{", "}", "\n", "save_path", "=", "model_name", "\n", "\n", "if", "\"/\"", "in", "model_name", ":", "\n", "        ", "save_path", "=", "model_name", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "\n", "", "if", "f\"xnli_experiment_{save_path}_back.json\"", "in", "os", ".", "listdir", "(", "\"results/\"", ")", ":", "\n", "        ", "with", "open", "(", "f\"results/xnli_experiment_{save_path}_back.json\"", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "results", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "", "for", "lang", "in", "INDIC", ":", "\n", "        ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "if", "lang", "in", "results", ".", "keys", "(", ")", ":", "\n", "            ", "print", "(", "f\"skipping {model_name} for language {lang}\"", ")", "\n", "continue", "\n", "\n", "", "trainer", "=", "get_trainer", "(", ")", "\n", "\n", "SUFFIX", "=", "\"back\"", "\n", "print", "(", "f\"using {model_name}\"", ")", "\n", "print", "(", "f\"training on {lang}\"", ")", "\n", "BATCH_SIZE", "=", "128", "if", "model_name", "not", "in", "big_models", "else", "64", "\n", "# BATCH_SIZE = 128", "\n", "model", "=", "XNLIModel", "(", "\n", "model_name", "=", "model_name", ",", "\n", "lang", "=", "lang", ",", "\n", "batch_size", "=", "BATCH_SIZE", ",", "\n", "suffix", "=", "SUFFIX", ",", "\n", ")", "\n", "dm", "=", "XNLIDataModule", "(", "\n", "model_name", "=", "model_name", ",", "\n", "lang", "=", "lang", ",", "\n", "batch_size", "=", "BATCH_SIZE", ",", "\n", "back_translated", "=", "True", ",", "\n", ")", "\n", "\n", "trainer", ".", "fit", "(", "model", ",", "dm", ")", "\n", "try", ":", "\n", "            ", "trainer", ".", "test", "(", "model", ",", "dm", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.divyanshuaggarwal_indicxnli.None.main.train_all": [[189, 243], ["print", "src.trainer.get_trainer", "src.model.XNLIModel", "list", "os.listdir", "torch.cuda.empty_cache", "src.datamodule.XNLIDataModule", "print", "print", "src.trainer.get_trainer.fit", "src.trainer.get_trainer", "src.datamodule.XNLIDataModule", "src.datamodule.XNLIDataModule.setup", "src.trainer.get_trainer.save_checkpoint", "model_name.split", "open", "json.load", "len", "len", "print", "src.trainer.get_trainer.test", "src.datamodule.XNLIDataModule.test_dataloader"], "function", ["home.repos.pwc.inspect_result.divyanshuaggarwal_indicxnli.src.trainer.get_trainer", "home.repos.pwc.inspect_result.divyanshuaggarwal_indicxnli.src.trainer.get_trainer", "home.repos.pwc.inspect_result.divyanshuaggarwal_indicxnli.src.datamodule.XNLIDataModule.setup", "home.repos.pwc.inspect_result.divyanshuaggarwal_indicxnli.src.datamodule.XNLIDataModule.test_dataloader"], ["", "", "", "def", "train_all", "(", ")", ":", "\n", "    ", "for", "model_name", "in", "models", ":", "\n", "        ", "print", "(", "model_name", ")", "\n", "SUFFIX", "=", "\"n_step\"", "\n", "BATCH_SIZE", "=", "128", "if", "model_name", "not", "in", "big_models", "else", "64", "\n", "\n", "save_path", "=", "model_name", "\n", "\n", "if", "\"/\"", "in", "model_name", ":", "\n", "            ", "save_path", "=", "model_name", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "\n", "", "if", "f\"xnli_experiment_{save_path}_n_step.json\"", "in", "os", ".", "listdir", "(", "\"results/\"", ")", ":", "\n", "            ", "with", "open", "(", "f\"results/xnli_experiment_{save_path}_n_step.json\"", ",", "\"r\"", ")", "as", "f", ":", "\n", "                ", "results", "=", "json", ".", "load", "(", "f", ")", "\n", "", "if", "len", "(", "results", ")", "==", "len", "(", "INDIC", ")", ":", "\n", "                ", "print", "(", "f\"skipping {model_name}\"", ")", "\n", "continue", "\n", "\n", "", "", "trainer", "=", "get_trainer", "(", ")", "\n", "\n", "model", "=", "XNLIModel", "(", "model_name", "=", "model_name", ",", "batch_size", "=", "BATCH_SIZE", ",", "suffix", "=", "SUFFIX", ")", "\n", "\n", "for", "lang", "in", "list", "(", "[", "\"en\"", "]", "+", "INDIC", "[", ":", "-", "1", "]", ")", ":", "\n", "\n", "            ", "torch", ".", "cuda", ".", "empty_cache", "(", ")", "\n", "\n", "dm", "=", "XNLIDataModule", "(", "\n", "model_name", "=", "model_name", ",", "lang", "=", "lang", ",", "batch_size", "=", "BATCH_SIZE", ",", "train_lang", "=", "lang", "\n", ")", "\n", "\n", "print", "(", "f\"using {model_name}\"", ")", "\n", "print", "(", "f\"training on {lang}\"", ")", "\n", "\n", "trainer", ".", "fit", "(", "model", ",", "dm", ")", "\n", "\n", "del", "trainer", "\n", "trainer", "=", "get_trainer", "(", ")", "\n", "\n", "", "for", "test_lang", "in", "INDIC", ":", "\n", "            ", "model", ".", "lang", "=", "test_lang", "\n", "test_dm", "=", "XNLIDataModule", "(", "\n", "model_name", "=", "model_name", ",", "lang", "=", "test_lang", ",", "batch_size", "=", "BATCH_SIZE", "\n", ")", "\n", "test_dm", ".", "setup", "(", "\"test\"", ")", "\n", "try", ":", "\n", "                ", "trainer", ".", "test", "(", "model", ",", "test_dm", ".", "test_dataloader", "(", ")", ")", "\n", "", "except", ":", "\n", "                ", "pass", "\n", "", "", "try", ":", "\n", "            ", "trainer", ".", "save_checkpoint", "(", "\n", "f\"results/pretrained_models/{save_path}_n_step.ckpt\"", "\n", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.divyanshuaggarwal_indicxnli.None.main.cross_lingual_transfer": [[245, 291], ["list", "print", "os.listdir", "src.trainer.get_trainer", "print", "print", "src.model.XNLIModel", "src.datamodule.XNLIDataModule", "src.trainer.get_trainer.fit", "model_name.split", "open", "json.load", "json.load.keys", "print", "src.datamodule.XNLIDataModule", "src.trainer.get_trainer.test"], "function", ["home.repos.pwc.inspect_result.divyanshuaggarwal_indicxnli.src.trainer.get_trainer"], ["", "", "", "def", "cross_lingual_transfer", "(", ")", ":", "\n", "    ", "for", "model_name", "in", "models", ":", "\n", "        ", "print", "(", "model_name", ")", "\n", "", "results", "=", "{", "}", "\n", "save_path", "=", "model_name", "\n", "\n", "if", "\"/\"", "in", "model_name", ":", "\n", "        ", "save_path", "=", "model_name", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "\n", "", "if", "f\"xnli_experiment_{save_path}_in.json\"", "in", "os", ".", "listdir", "(", "\"results/\"", ")", ":", "\n", "        ", "with", "open", "(", "f\"results/xnli_experiment_{save_path}_in.json\"", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "results", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "", "for", "lang", "in", "list", "(", "[", "\"en\"", "]", "+", "INDIC", ")", ":", "\n", "\n", "        ", "if", "lang", "in", "results", ".", "keys", "(", ")", ":", "\n", "            ", "print", "(", "f\"skipping {model_name} for language {lang}\"", ")", "\n", "continue", "\n", "\n", "", "trainer", "=", "get_trainer", "(", ")", "\n", "\n", "BATCH_SIZE", "=", "128", "if", "model_name", "not", "in", "big_models", "else", "64", "\n", "\n", "SUFFIX", "=", "f\"{lang}_in\"", "\n", "print", "(", "f\"using {model_name}\"", ")", "\n", "print", "(", "f\"training on {lang}\"", ")", "\n", "model", "=", "XNLIModel", "(", "\n", "model_name", "=", "model_name", ",", "lang", "=", "lang", ",", "batch_size", "=", "BATCH_SIZE", ",", "suffix", "=", "SUFFIX", "\n", ")", "\n", "dm", "=", "XNLIDataModule", "(", "\n", "model_name", "=", "model_name", ",", "lang", "=", "lang", ",", "batch_size", "=", "BATCH_SIZE", ",", "train_lang", "=", "lang", "\n", ")", "\n", "# trainer.tune(model,dm)", "\n", "trainer", ".", "fit", "(", "model", ",", "dm", ")", "\n", "for", "test_lang", "in", "INDIC", ":", "\n", "            ", "model", ".", "lang", "=", "test_lang", "\n", "dm_2", "=", "XNLIDataModule", "(", "\n", "model_name", "=", "model_name", ",", "\n", "lang", "=", "test_lang", ",", "\n", "batch_size", "=", "BATCH_SIZE", ",", "\n", "train_lang", "=", "test_lang", ",", "\n", ")", "\n", "try", ":", "\n", "                ", "trainer", ".", "test", "(", "model", ",", "dm_2", ")", "\n", "", "except", ":", "\n", "                ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.divyanshuaggarwal_indicxnli.None.main.enindic_english_indic_train": [[293, 345], ["print", "os.listdir", "src.trainer.get_trainer", "print", "print", "src.datamodule.XNLIDataModule", "src.datamodule.XNLIDataModule", "src.model.XNLIModel", "src.trainer.get_trainer.fit", "src.trainer.get_trainer", "src.trainer.get_trainer.fit", "model_name.split", "open", "json.load", "json.load.keys", "print", "src.trainer.get_trainer.test"], "function", ["home.repos.pwc.inspect_result.divyanshuaggarwal_indicxnli.src.trainer.get_trainer", "home.repos.pwc.inspect_result.divyanshuaggarwal_indicxnli.src.trainer.get_trainer"], ["", "", "", "", "def", "enindic_english_indic_train", "(", ")", ":", "\n", "    ", "for", "model_name", "in", "models", ":", "\n", "        ", "print", "(", "model_name", ")", "\n", "", "results", "=", "{", "}", "\n", "save_path", "=", "model_name", "\n", "\n", "if", "\"/\"", "in", "model_name", ":", "\n", "        ", "save_path", "=", "model_name", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "\n", "", "if", "f\"xnli_experiment_{save_path}_hypo_2_step.json\"", "in", "os", ".", "listdir", "(", "\"results/\"", ")", ":", "\n", "        ", "with", "open", "(", "f\"results/xnli_experiment_{save_path}_hypo_2_step.json\"", ",", "\"r\"", ")", "as", "f", ":", "\n", "            ", "results", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "", "for", "lang", "in", "INDIC", ":", "\n", "\n", "        ", "if", "lang", "in", "results", ".", "keys", "(", ")", ":", "\n", "            ", "print", "(", "f\"skipping {model_name} for language {lang}\"", ")", "\n", "continue", "\n", "\n", "", "trainer", "=", "get_trainer", "(", ")", "\n", "\n", "BATCH_SIZE", "=", "128", "if", "model_name", "not", "in", "big_models", "else", "64", "\n", "SUFFIX", "=", "\"hypo_2_step\"", "\n", "print", "(", "f\"using {model_name}\"", ")", "\n", "print", "(", "f\"training on {lang}\"", ")", "\n", "dm", "=", "XNLIDataModule", "(", "\n", "model_name", "=", "model_name", ",", "\n", "lang", "=", "lang", ",", "\n", "batch_size", "=", "BATCH_SIZE", ",", "\n", ")", "\n", "dm_2", "=", "XNLIDataModule", "(", "\n", "model_name", "=", "model_name", ",", "\n", "lang", "=", "lang", ",", "\n", "batch_size", "=", "BATCH_SIZE", ",", "\n", "train_lang", "=", "lang", ",", "\n", "hypothesis_lang", "=", "lang", ",", "\n", ")", "\n", "model", "=", "XNLIModel", "(", "\n", "model_name", "=", "model_name", ",", "lang", "=", "lang", ",", "batch_size", "=", "BATCH_SIZE", ",", "suffix", "=", "SUFFIX", "\n", ")", "\n", "\n", "trainer", ".", "fit", "(", "model", ",", "dm", ")", "\n", "\n", "trainer", "=", "get_trainer", "(", ")", "\n", "\n", "trainer", ".", "fit", "(", "model", ",", "dm_2", ")", "\n", "\n", "try", ":", "\n", "            ", "trainer", ".", "test", "(", "model", ",", "dm_2", ")", "\n", "", "except", ":", "\n", "            ", "pass", "\n", "", "del", "trainer", "\n", "\n"]], "home.repos.pwc.inspect_result.divyanshuaggarwal_indicxnli.None.main.enindic_train_all": [[347, 397], ["print", "src.trainer.get_trainer", "src.model.XNLIModel", "list", "os.listdir", "print", "src.datamodule.XNLIDataModule", "print", "print", "src.trainer.get_trainer.fit", "src.trainer.get_trainer", "src.datamodule.XNLIDataModule", "src.datamodule.XNLIDataModule.setup", "model_name.split", "src.trainer.get_trainer.test", "src.datamodule.XNLIDataModule.test_dataloader"], "function", ["home.repos.pwc.inspect_result.divyanshuaggarwal_indicxnli.src.trainer.get_trainer", "home.repos.pwc.inspect_result.divyanshuaggarwal_indicxnli.src.trainer.get_trainer", "home.repos.pwc.inspect_result.divyanshuaggarwal_indicxnli.src.datamodule.XNLIDataModule.setup", "home.repos.pwc.inspect_result.divyanshuaggarwal_indicxnli.src.datamodule.XNLIDataModule.test_dataloader"], ["", "", "def", "enindic_train_all", "(", ")", ":", "\n", "    ", "for", "model_name", "in", "models", ":", "\n", "        ", "print", "(", "model_name", ")", "\n", "SUFFIX", "=", "\"hypo_n_step\"", "\n", "BATCH_SIZE", "=", "128", "if", "model_name", "not", "in", "big_models", "else", "64", "\n", "\n", "save_path", "=", "model_name", "\n", "\n", "if", "\"/\"", "in", "model_name", ":", "\n", "            ", "save_path", "=", "model_name", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "\n", "", "if", "f\"xnli_experiment_{save_path}_hypo_n_step.json\"", "in", "os", ".", "listdir", "(", "\"results/\"", ")", ":", "\n", "            ", "print", "(", "f\"skipping {model_name}\"", ")", "\n", "continue", "\n", "\n", "", "trainer", "=", "get_trainer", "(", ")", "\n", "\n", "model", "=", "XNLIModel", "(", "model_name", "=", "model_name", ",", "batch_size", "=", "BATCH_SIZE", ",", "suffix", "=", "SUFFIX", ")", "\n", "\n", "for", "lang", "in", "list", "(", "[", "\"en\"", "]", "+", "INDIC", ")", ":", "\n", "\n", "            ", "dm", "=", "XNLIDataModule", "(", "\n", "model_name", "=", "model_name", ",", "\n", "lang", "=", "lang", ",", "\n", "batch_size", "=", "BATCH_SIZE", ",", "\n", "train_lang", "=", "\"en\"", ",", "\n", "hypothesis_lang", "=", "lang", ",", "\n", ")", "\n", "\n", "print", "(", "f\"using {model_name}\"", ")", "\n", "print", "(", "f\"training on {lang}\"", ")", "\n", "\n", "trainer", ".", "fit", "(", "model", ",", "dm", ")", "\n", "\n", "del", "trainer", "\n", "trainer", "=", "get_trainer", "(", ")", "\n", "\n", "", "for", "test_lang", "in", "INDIC", ":", "\n", "            ", "model", ".", "lang", "=", "test_lang", "\n", "test_dm", "=", "XNLIDataModule", "(", "\n", "model_name", "=", "model_name", ",", "\n", "lang", "=", "test_lang", ",", "\n", "batch_size", "=", "BATCH_SIZE", ",", "\n", "hypothesis_lang", "=", "test_lang", ",", "\n", ")", "\n", "test_dm", ".", "setup", "(", "\"test\"", ")", "\n", "try", ":", "\n", "                ", "trainer", ".", "test", "(", "model", ",", "test_dm", ".", "test_dataloader", "(", ")", ")", "\n", "", "except", ":", "\n", "                ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.divyanshuaggarwal_indicxnli.src.generate_automatic_scores.get_translations": [[13, 21], ["tqdm.tqdm", "googletrans.Translator", "res.append", "googletrans.Translator.translate"], "function", ["None"], ["def", "get_translations", "(", "sentences", ",", "src", ",", "dest", ")", ":", "\n", "    ", "res", "=", "[", "]", "\n", "\n", "for", "sentence", "in", "tqdm", "(", "sentences", ",", "desc", "=", "\"translating\"", ")", ":", "\n", "        ", "translator", "=", "Translator", "(", ")", "\n", "res", ".", "append", "(", "translator", ".", "translate", "(", "sentence", ",", "src", "=", "src", ",", "dest", "=", "dest", ")", ".", "text", ")", "\n", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.divyanshuaggarwal_indicxnli.src.generate_automatic_scores.open_file": [[23, 30], ["pandas.DataFrame.from_records", "open", "json.load"], "function", ["None"], ["", "def", "open_file", "(", "path", ",", "split", "=", "\"test\"", ")", ":", "\n", "    ", "with", "open", "(", "path", ",", "\"r\"", ")", "as", "f", ":", "\n", "        ", "dic", "=", "json", ".", "load", "(", "f", ")", "\n", "\n", "", "records", "=", "dic", "[", "split", "]", "\n", "\n", "return", "pd", ".", "DataFrame", ".", "from_records", "(", "records", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyanshuaggarwal_indicxnli.src.datamodule.XNLIDataModule.__init__": [[14, 33], ["pytorch_lightning.LightningDataModule.__init__", "transformers.AutoTokenizer.from_pretrained"], "methods", ["home.repos.pwc.inspect_result.divyanshuaggarwal_indicxnli.src.model.XNLIModel.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "model_name", ":", "str", ",", "\n", "lang", "=", "\"en\"", ",", "\n", "batch_size", "=", "32", ",", "\n", "train_lang", "=", "\"en\"", ",", "\n", "back_translated", "=", "False", ",", "\n", "hypothesis_lang", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_name", "=", "model_name", "\n", "self", ".", "tokenizer", "=", "AutoTokenizer", ".", "from_pretrained", "(", "\n", "self", ".", "model_name", ",", "keep_accents", "=", "True", ",", "use_fast", "=", "True", "\n", ")", "\n", "self", ".", "lang", "=", "lang", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "train_lang", "=", "train_lang", "\n", "self", ".", "back_translated", "=", "back_translated", "\n", "self", ".", "hypothesis_lang", "=", "hypothesis_lang", "\n", "# self.prepare_data()", "\n"]], "home.repos.pwc.inspect_result.divyanshuaggarwal_indicxnli.src.datamodule.XNLIDataModule.preprocess_function": [[35, 44], ["datamodule.XNLIDataModule.tokenizer"], "methods", ["None"], ["", "def", "preprocess_function", "(", "self", ",", "examples", ")", ":", "\n", "# Tokenize the texts", "\n", "\n", "        ", "return", "self", ".", "tokenizer", "(", "\n", "examples", "[", "\"premise\"", "]", ",", "\n", "examples", "[", "\"hypothesis\"", "]", ",", "\n", "max_length", "=", "128", ",", "\n", "pad_to_max_length", "=", "True", ",", "\n", "truncation", "=", "\"longest_first\"", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.divyanshuaggarwal_indicxnli.src.datamodule.XNLIDataModule.format_dataset": [[46, 52], ["dataset.set_format"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "format_dataset", "(", "dataset", ")", ":", "\n", "        ", "dataset", ".", "set_format", "(", "\n", "type", "=", "\"torch\"", ",", "columns", "=", "[", "\"input_ids\"", ",", "\"attention_mask\"", ",", "\"labels\"", "]", "\n", ")", "\n", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.divyanshuaggarwal_indicxnli.src.datamodule.XNLIDataModule.prepare_data": [[53, 55], ["transformers.AutoTokenizer.from_pretrained"], "methods", ["None"], ["", "def", "prepare_data", "(", "self", ")", ":", "\n", "        ", "AutoTokenizer", ".", "from_pretrained", "(", "self", ".", "model_name", ",", "keep_accents", "=", "True", ",", "use_fast", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyanshuaggarwal_indicxnli.src.datamodule.XNLIDataModule.setup": [[56, 225], ["datamodule.XNLIDataModule.train_dataset.map", "datamodule.XNLIDataModule.eval_dataset.map", "datamodule.XNLIDataModule.train_dataset.rename_column_", "datamodule.XNLIDataModule.eval_dataset.rename_column_", "datamodule.XNLIDataModule.format_dataset", "datamodule.XNLIDataModule.format_dataset", "datamodule.XNLIDataModule.test_dataset.map", "datamodule.XNLIDataModule.test_dataset.rename_column_", "datamodule.XNLIDataModule.format_dataset", "datasets.load_dataset", "datasets.Dataset.from_dict", "datasets.load_dataset", "datasets.Dataset.from_dict", "datasets.load_dataset", "datasets.Dataset.from_dict", "datamodule.XNLIDataModule.test_dataset.to_dict", "datasets.Dataset.from_dict", "xnli[].to_dict", "pandas.DataFrame.from_records().to_dict", "datasets.Dataset.from_dict", "pandas.DataFrame.from_records().to_dict", "datasets.Dataset.from_dict", "xnli[].to_dict", "pandas.DataFrame.from_records().to_dict", "datasets.Dataset.from_dict", "pandas.DataFrame.from_records().to_dict", "datasets.Dataset.from_dict", "datasets.load_dataset", "datamodule.XNLIDataModule.train_dataset.to_dict", "datasets.Dataset.from_dict", "datamodule.XNLIDataModule.eval_dataset.to_dict", "datasets.Dataset.from_dict", "xnli[].to_dict", "pandas.DataFrame.from_records().to_dict", "datasets.Dataset.from_dict", "pandas.DataFrame.from_records().to_dict", "datasets.Dataset.from_dict", "datasets.load_dataset", "pandas.DataFrame.from_records().to_dict", "open", "json.load", "open", "json.load", "open", "json.load", "open", "json.load", "pandas.DataFrame.from_records().to_dict", "pandas.DataFrame.from_records().to_dict", "datamodule.XNLIDataModule.train_dataset.to_dict", "datasets.Dataset.from_dict", "datamodule.XNLIDataModule.eval_dataset.to_dict", "datasets.Dataset.from_dict", "datamodule.XNLIDataModule.train_dataset.to_dict", "datasets.Dataset.from_dict", "datasets.load_dataset", "datamodule.XNLIDataModule.eval_dataset.to_dict", "datasets.Dataset.from_dict", "open", "json.load", "open", "json.load", "open", "json.load", "pandas.DataFrame.from_records", "pandas.DataFrame.from_records", "pandas.DataFrame.from_records", "pandas.DataFrame.from_records", "open", "json.load", "pandas.DataFrame.from_records().to_dict", "open", "json.load", "pandas.DataFrame.from_records().to_dict", "open", "json.load", "pandas.DataFrame.from_records().to_dict", "pandas.DataFrame.from_records().to_dict", "pandas.DataFrame.from_records", "pandas.DataFrame.from_records", "pandas.DataFrame.from_records", "pandas.DataFrame.from_records", "pandas.DataFrame.from_records", "pandas.DataFrame.from_records", "pandas.DataFrame.from_records", "pandas.DataFrame.from_records", "pandas.DataFrame.from_records"], "methods", ["home.repos.pwc.inspect_result.divyanshuaggarwal_indicxnli.src.datamodule.XNLIDataModule.format_dataset", "home.repos.pwc.inspect_result.divyanshuaggarwal_indicxnli.src.datamodule.XNLIDataModule.format_dataset", "home.repos.pwc.inspect_result.divyanshuaggarwal_indicxnli.src.datamodule.XNLIDataModule.format_dataset"], ["", "def", "setup", "(", "self", ",", "stage", ":", "Optional", "[", "str", "]", "=", "None", ")", ":", "\n", "\n", "        ", "if", "stage", "==", "\"fit\"", "or", "stage", "==", "\"train\"", "or", "stage", "==", "None", ":", "\n", "# load train dataset", "\n", "            ", "if", "self", ".", "train_lang", "==", "\"hi_orig\"", ":", "\n", "                ", "xnli", "=", "load_dataset", "(", "\"xnli\"", ",", "self", ".", "train_lang", "[", ":", "2", "]", ")", "\n", "self", ".", "train_dataset", "=", "Dataset", ".", "from_dict", "(", "xnli", "[", "\"train\"", "]", ".", "to_dict", "(", ")", ")", "\n", "\n", "", "elif", "self", ".", "train_lang", "==", "\"en\"", ":", "\n", "                ", "with", "open", "(", "f\"data/xnli_en_train.json\"", ")", "as", "json_file", ":", "\n", "                    ", "data", "=", "json", ".", "load", "(", "json_file", ")", "\n", "\n", "", "train", "=", "pd", ".", "DataFrame", ".", "from_records", "(", "data", "[", "\"train\"", "]", ")", ".", "to_dict", "(", "orient", "=", "\"list\"", ")", "\n", "self", ".", "train_dataset", "=", "Dataset", ".", "from_dict", "(", "train", ")", "\n", "", "else", ":", "\n", "                ", "with", "open", "(", "f\"data/forward/train/xnli_{self.lang}.json\"", ")", "as", "json_file", ":", "\n", "                    ", "data", "=", "json", ".", "load", "(", "json_file", ")", "\n", "\n", "", "train", "=", "pd", ".", "DataFrame", ".", "from_records", "(", "data", "[", "\"train\"", "]", ")", ".", "to_dict", "(", "orient", "=", "\"list\"", ")", "\n", "self", ".", "train_dataset", "=", "Dataset", ".", "from_dict", "(", "train", ")", "\n", "\n", "# load validation dataset", "\n", "", "if", "self", ".", "lang", "==", "\"en\"", "or", "self", ".", "lang", "==", "\"hi_orig\"", ":", "\n", "                ", "xnli", "=", "load_dataset", "(", "\"xnli\"", ",", "self", ".", "lang", "[", ":", "2", "]", ")", "\n", "self", ".", "eval_dataset", "=", "Dataset", ".", "from_dict", "(", "xnli", "[", "\"validation\"", "]", ".", "to_dict", "(", ")", ")", "\n", "\n", "", "else", ":", "\n", "                ", "if", "self", ".", "back_translated", ":", "\n", "                    ", "with", "open", "(", "f\"data/backward/dev/xnli_{self.lang}.json\"", ")", "as", "json_file", ":", "\n", "                        ", "data", "=", "json", ".", "load", "(", "json_file", ")", "\n", "", "val", "=", "pd", ".", "DataFrame", ".", "from_records", "(", "data", "[", "\"validation\"", "]", ")", ".", "to_dict", "(", "\n", "orient", "=", "\"list\"", "\n", ")", "\n", "self", ".", "eval_dataset", "=", "Dataset", ".", "from_dict", "(", "val", ")", "\n", "", "else", ":", "\n", "                    ", "with", "open", "(", "f\"data/forward/dev/xnli_{self.lang}.json\"", ")", "as", "json_file", ":", "\n", "                        ", "data", "=", "json", ".", "load", "(", "json_file", ")", "\n", "", "val", "=", "pd", ".", "DataFrame", ".", "from_records", "(", "data", "[", "\"validation\"", "]", ")", ".", "to_dict", "(", "\n", "orient", "=", "\"list\"", "\n", ")", "\n", "self", ".", "eval_dataset", "=", "Dataset", ".", "from_dict", "(", "val", ")", "\n", "\n", "", "", "if", "self", ".", "hypothesis_lang", ":", "\n", "                ", "if", "self", ".", "hypothesis_lang", "==", "\"hi_orig\"", ":", "\n", "                    ", "data", "=", "load_dataset", "(", "\"xnli\"", ",", "self", ".", "lang", "[", ":", "2", "]", ")", "\n", "\n", "hypothesis", "=", "pd", ".", "DataFrame", ".", "from_records", "(", "data", "[", "\"train\"", "]", ")", ".", "to_dict", "(", "\n", "orient", "=", "\"list\"", "\n", ")", "[", "\"hypothesis\"", "]", "\n", "self", ".", "train_dataset", "=", "self", ".", "train_dataset", ".", "to_dict", "(", ")", "\n", "self", ".", "train_dataset", "[", "\"hypothesis\"", "]", "=", "hypothesis", "\n", "self", ".", "train_dataset", "=", "Dataset", ".", "from_dict", "(", "self", ".", "train_dataset", ")", "\n", "\n", "hypothesis", "=", "pd", ".", "DataFrame", ".", "from_records", "(", "data", "[", "\"validation\"", "]", ")", ".", "to_dict", "(", "\n", "orient", "=", "\"list\"", "\n", ")", "[", "\"hypothesis\"", "]", "\n", "self", ".", "eval_dataset", "=", "self", ".", "eval_dataset", ".", "to_dict", "(", ")", "\n", "self", ".", "eval_dataset", "[", "\"hypothesis\"", "]", "=", "hypothesis", "\n", "self", ".", "eval_dataset", "=", "Dataset", ".", "from_dict", "(", "self", ".", "eval_dataset", ")", "\n", "", "elif", "self", ".", "hypothesis_lang", "!=", "\"en\"", ":", "\n", "                    ", "with", "open", "(", "\n", "f\"data/forward/train/xnli_{self.hypothesis_lang}.json\"", "\n", ")", "as", "json_file", ":", "\n", "                        ", "data", "=", "json", ".", "load", "(", "json_file", ")", "\n", "\n", "", "hypothesis", "=", "pd", ".", "DataFrame", ".", "from_records", "(", "data", "[", "\"train\"", "]", ")", ".", "to_dict", "(", "\n", "orient", "=", "\"list\"", "\n", ")", "[", "\"hypothesis\"", "]", "\n", "self", ".", "train_dataset", "=", "self", ".", "train_dataset", ".", "to_dict", "(", ")", "\n", "self", ".", "train_dataset", "[", "\"hypothesis\"", "]", "=", "hypothesis", "\n", "self", ".", "train_dataset", "=", "Dataset", ".", "from_dict", "(", "self", ".", "train_dataset", ")", "\n", "\n", "with", "open", "(", "\n", "f\"data/forward/dev/xnli_{self.hypothesis_lang}.json\"", "\n", ")", "as", "json_file", ":", "\n", "                        ", "data", "=", "json", ".", "load", "(", "json_file", ")", "\n", "\n", "", "hypothesis", "=", "pd", ".", "DataFrame", ".", "from_records", "(", "data", "[", "\"validation\"", "]", ")", ".", "to_dict", "(", "\n", "orient", "=", "\"list\"", "\n", ")", "[", "\"hypothesis\"", "]", "\n", "self", ".", "eval_dataset", "=", "self", ".", "eval_dataset", ".", "to_dict", "(", ")", "\n", "self", ".", "eval_dataset", "[", "\"hypothesis\"", "]", "=", "hypothesis", "\n", "self", ".", "eval_dataset", "=", "Dataset", ".", "from_dict", "(", "self", ".", "eval_dataset", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "with", "open", "(", "f\"data/xnli_en_train.json\"", ")", "as", "json_file", ":", "\n", "                        ", "data", "=", "json", ".", "load", "(", "json_file", ")", "\n", "\n", "", "hypothesis", "=", "pd", ".", "DataFrame", ".", "from_records", "(", "data", "[", "\"train\"", "]", ")", ".", "to_dict", "(", "\n", "orient", "=", "\"list\"", "\n", ")", "[", "\"hypothesis\"", "]", "\n", "self", ".", "train_dataset", "=", "self", ".", "train_dataset", ".", "to_dict", "(", ")", "\n", "self", ".", "train_dataset", "[", "\"hypothesis\"", "]", "=", "hypothesis", "\n", "self", ".", "train_dataset", "=", "Dataset", ".", "from_dict", "(", "self", ".", "train_dataset", ")", "\n", "\n", "data", "=", "load_dataset", "(", "\"xnli\"", ",", "\"en\"", ")", "\n", "\n", "hypothesis", "=", "pd", ".", "DataFrame", ".", "from_records", "(", "data", "[", "\"validation\"", "]", ")", ".", "to_dict", "(", "\n", "orient", "=", "\"list\"", "\n", ")", "[", "\"hypothesis\"", "]", "\n", "self", ".", "eval_dataset", "=", "self", ".", "eval_dataset", ".", "to_dict", "(", ")", "\n", "self", ".", "eval_dataset", "[", "\"hypothesis\"", "]", "=", "hypothesis", "\n", "self", ".", "eval_dataset", "=", "Dataset", ".", "from_dict", "(", "self", ".", "eval_dataset", ")", "\n", "\n", "", "", "self", ".", "train_dataset", "=", "self", ".", "train_dataset", ".", "map", "(", "\n", "self", ".", "preprocess_function", ",", "\n", "batched", "=", "True", ",", "\n", "# num_proc = 10,", "\n", "desc", "=", "\"Running tokenizer on train dataset\"", ",", "\n", ")", "\n", "\n", "self", ".", "eval_dataset", "=", "self", ".", "eval_dataset", ".", "map", "(", "\n", "self", ".", "preprocess_function", ",", "\n", "batched", "=", "True", ",", "\n", "# num_proc = 10,", "\n", "desc", "=", "\"Running tokenizer on val dataset\"", ",", "\n", ")", "\n", "\n", "self", ".", "train_dataset", ".", "rename_column_", "(", "\"label\"", ",", "\"labels\"", ")", "\n", "self", ".", "eval_dataset", ".", "rename_column_", "(", "\"label\"", ",", "\"labels\"", ")", "\n", "\n", "self", ".", "train_dataset", "=", "self", ".", "format_dataset", "(", "self", ".", "train_dataset", ")", "\n", "self", ".", "eval_dataset", "=", "self", ".", "format_dataset", "(", "self", ".", "eval_dataset", ")", "\n", "\n", "", "if", "stage", "==", "\"test\"", "or", "stage", "==", "None", ":", "\n", "            ", "if", "self", ".", "lang", "==", "\"en\"", "or", "self", ".", "lang", "==", "\"hi_orig\"", ":", "\n", "                ", "xnli", "=", "load_dataset", "(", "\"xnli\"", ",", "self", ".", "lang", "[", ":", "2", "]", ")", "\n", "self", ".", "test_dataset", "=", "Dataset", ".", "from_dict", "(", "xnli", "[", "\"test\"", "]", ".", "to_dict", "(", ")", ")", "\n", "", "else", ":", "\n", "                ", "if", "self", ".", "back_translated", ":", "\n", "                    ", "with", "open", "(", "f\"data/backward/test/xnli_{self.lang}.json\"", ")", "as", "json_file", ":", "\n", "                        ", "data", "=", "json", ".", "load", "(", "json_file", ")", "\n", "", "test", "=", "pd", ".", "DataFrame", ".", "from_records", "(", "data", "[", "\"test\"", "]", ")", ".", "to_dict", "(", "\n", "orient", "=", "\"list\"", "\n", ")", "\n", "self", ".", "test_dataset", "=", "Dataset", ".", "from_dict", "(", "test", ")", "\n", "", "else", ":", "\n", "                    ", "with", "open", "(", "f\"data/forward/test/xnli_{self.lang}.json\"", ")", "as", "json_file", ":", "\n", "                        ", "data", "=", "json", ".", "load", "(", "json_file", ")", "\n", "", "test", "=", "pd", ".", "DataFrame", ".", "from_records", "(", "data", "[", "\"test\"", "]", ")", ".", "to_dict", "(", "\n", "orient", "=", "\"list\"", "\n", ")", "\n", "self", ".", "test_dataset", "=", "Dataset", ".", "from_dict", "(", "test", ")", "\n", "\n", "", "", "if", "self", ".", "hypothesis_lang", ":", "\n", "                ", "data", "=", "{", "}", "\n", "if", "self", ".", "hypothesis_lang", "in", "(", "\"en\"", ",", "\"hi_orig\"", ")", ":", "\n", "                    ", "data", "=", "load_dataset", "(", "\"xnli\"", ",", "self", ".", "lang", "[", ":", "2", "]", ")", "\n", "", "else", ":", "\n", "                    ", "with", "open", "(", "\n", "f\"data/forward/test/xnli_{self.hypothesis_lang}.json\"", "\n", ")", "as", "json_file", ":", "\n", "                        ", "data", "=", "json", ".", "load", "(", "json_file", ")", "\n", "\n", "", "", "hypothesis", "=", "pd", ".", "DataFrame", ".", "from_records", "(", "data", "[", "\"test\"", "]", ")", ".", "to_dict", "(", "\n", "orient", "=", "\"list\"", "\n", ")", "[", "\"hypothesis\"", "]", "\n", "self", ".", "test_dataset", "=", "self", ".", "test_dataset", ".", "to_dict", "(", ")", "\n", "self", ".", "test_dataset", "[", "\"hypothesis\"", "]", "=", "hypothesis", "\n", "self", ".", "test_dataset", "=", "Dataset", ".", "from_dict", "(", "self", ".", "test_dataset", ")", "\n", "\n", "", "self", ".", "test_dataset", "=", "self", ".", "test_dataset", ".", "map", "(", "\n", "self", ".", "preprocess_function", ",", "\n", "batched", "=", "True", ",", "\n", "# num_proc = 10,", "\n", "desc", "=", "\"Running tokenizer on val dataset\"", ",", "\n", ")", "\n", "self", ".", "test_dataset", ".", "rename_column_", "(", "\"label\"", ",", "\"labels\"", ")", "\n", "self", ".", "test_dataset", "=", "self", ".", "format_dataset", "(", "self", ".", "test_dataset", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyanshuaggarwal_indicxnli.src.datamodule.XNLIDataModule.train_dataloader": [[227, 234], ["torch.utils.data.DataLoader"], "methods", ["None"], ["", "", "def", "train_dataloader", "(", "self", ")", ":", "\n", "        ", "train_dataloader", "=", "DataLoader", "(", "\n", "self", ".", "train_dataset", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "# sampler = sampler", "\n", ")", "\n", "return", "train_dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.divyanshuaggarwal_indicxnli.src.datamodule.XNLIDataModule.val_dataloader": [[235, 242], ["torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "val_dataloader", "(", "self", ")", ":", "\n", "        ", "val_dataloader", "=", "DataLoader", "(", "\n", "self", ".", "eval_dataset", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", "# sampler = sampler", "\n", ")", "\n", "return", "val_dataloader", "\n", "\n"]], "home.repos.pwc.inspect_result.divyanshuaggarwal_indicxnli.src.datamodule.XNLIDataModule.test_dataloader": [[243, 249], ["torch.utils.data.DataLoader"], "methods", ["None"], ["", "def", "test_dataloader", "(", "self", ")", ":", "\n", "        ", "test_dataloader", "=", "DataLoader", "(", "\n", "self", ".", "test_dataset", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "\n", ")", "\n", "return", "test_dataloader", "\n", "", "", ""]], "home.repos.pwc.inspect_result.divyanshuaggarwal_indicxnli.src.trainer.get_trainer": [[6, 22], ["pytorch_lightning.callbacks.EarlyStopping", "pytorch_lightning.Trainer", "torch.cuda.is_available"], "function", ["None"], ["def", "get_trainer", "(", "fast_dev", "=", "True", ")", ":", "\n", "    ", "early_stop_callback", "=", "EarlyStopping", "(", "\n", "monitor", "=", "\"val_loss\"", ",", "\n", "min_delta", "=", "0.001", ",", "\n", "patience", "=", "3", ",", "\n", "verbose", "=", "True", ",", "\n", "mode", "=", "\"min\"", ",", "\n", ")", "\n", "return", "Trainer", "(", "\n", "gpus", "=", "-", "1", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "None", ",", "\n", "precision", "=", "16", ",", "\n", "# tpu_cores = 8, #Uncoment this if using TPU.", "\n", "accelerator", "=", "\"auto\"", ",", "\n", "val_check_interval", "=", "0.5", ",", "\n", "callbacks", "=", "[", "early_stop_callback", "]", ",", "\n", "fast_dev_run", "=", "fast_dev", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.divyanshuaggarwal_indicxnli.src.make_dataset.translate_dataset": [[12, 109], ["range", "range", "range", "len", "train_data.append", "len", "test_data.append", "len", "val_data.append", "en2indic_model.translate_paragraph", "en2indic_model.translate_paragraph", "en2indic_model.translate_paragraph", "en2indic_model.translate_paragraph", "en2indic_model.translate_paragraph", "en2indic_model.translate_paragraph", "indic2en_model.translate_paragraph", "indic2en_model.translate_paragraph", "indic2en_model.translate_paragraph", "indic2en_model.translate_paragraph", "indic2en_model.translate_paragraph", "indic2en_model.translate_paragraph", "tqdm.tqdm", "tqdm.tqdm", "tqdm.tqdm", "tqdm.tqdm", "tqdm.tqdm", "tqdm.tqdm", "tqdm.tqdm", "tqdm.tqdm", "tqdm.tqdm", "tqdm.tqdm", "tqdm.tqdm", "tqdm.tqdm"], "function", ["None"], ["def", "translate_dataset", "(", "dataset", ",", "src", "=", "\"en\"", ",", "dest", "=", "\"hi\"", ")", ":", "\n", "    ", "train_premise", "=", "[", "item", "[", "\"premise\"", "]", "for", "item", "in", "dataset", "[", "\"train\"", "]", "]", "\n", "test_premise", "=", "[", "item", "[", "\"premise\"", "]", "for", "item", "in", "dataset", "[", "\"test\"", "]", "]", "\n", "val_premise", "=", "[", "item", "[", "\"premise\"", "]", "for", "item", "in", "dataset", "[", "\"validation\"", "]", "]", "\n", "\n", "train_hypothesis", "=", "[", "item", "[", "\"hypothesis\"", "]", "for", "item", "in", "dataset", "[", "\"train\"", "]", "]", "\n", "test_hypothesis", "=", "[", "item", "[", "\"hypothesis\"", "]", "for", "item", "in", "dataset", "[", "\"test\"", "]", "]", "\n", "val_hypothesis", "=", "[", "item", "[", "\"hypothesis\"", "]", "for", "item", "in", "dataset", "[", "\"validation\"", "]", "]", "\n", "\n", "if", "src", "==", "\"en\"", ":", "\n", "        ", "train_premise", "=", "[", "\n", "en2indic_model", ".", "translate_paragraph", "(", "item", ",", "\"en\"", ",", "dest", ")", "\n", "for", "item", "in", "tqdm", "(", "train_premise", ")", "\n", "]", "\n", "test_premise", "=", "[", "\n", "en2indic_model", ".", "translate_paragraph", "(", "item", ",", "\"en\"", ",", "dest", ")", "\n", "for", "item", "in", "tqdm", "(", "test_premise", ")", "\n", "]", "\n", "val_premise", "=", "[", "\n", "en2indic_model", ".", "translate_paragraph", "(", "item", ",", "\"en\"", ",", "dest", ")", "\n", "for", "item", "in", "tqdm", "(", "val_premise", ")", "\n", "]", "\n", "\n", "train_hypothesis", "=", "[", "\n", "en2indic_model", ".", "translate_paragraph", "(", "item", ",", "\"en\"", ",", "dest", ")", "\n", "for", "item", "in", "tqdm", "(", "train_hypothesis", ")", "\n", "]", "\n", "test_hypothesis", "=", "[", "\n", "en2indic_model", ".", "translate_paragraph", "(", "item", ",", "\"en\"", ",", "dest", ")", "\n", "for", "item", "in", "tqdm", "(", "test_hypothesis", ")", "\n", "]", "\n", "val_hypothesis", "=", "[", "\n", "en2indic_model", ".", "translate_paragraph", "(", "item", ",", "\"en\"", ",", "dest", ")", "\n", "for", "item", "in", "tqdm", "(", "val_hypothesis", ")", "\n", "]", "\n", "\n", "", "else", ":", "\n", "        ", "train_premise", "=", "[", "\n", "indic2en_model", ".", "translate_paragraph", "(", "item", ",", "dest", ",", "\"en\"", ")", "\n", "for", "item", "in", "tqdm", "(", "train_premise", ")", "\n", "]", "\n", "test_premise", "=", "[", "\n", "indic2en_model", ".", "translate_paragraph", "(", "item", ",", "dest", ",", "\"en\"", ")", "\n", "for", "item", "in", "tqdm", "(", "test_premise", ")", "\n", "]", "\n", "val_premise", "=", "[", "\n", "indic2en_model", ".", "translate_paragraph", "(", "item", ",", "dest", ",", "\"en\"", ")", "\n", "for", "item", "in", "tqdm", "(", "val_premise", ")", "\n", "]", "\n", "\n", "train_hypothesis", "=", "[", "\n", "indic2en_model", ".", "translate_paragraph", "(", "item", ",", "dest", ",", "\"en\"", ")", "\n", "for", "item", "in", "tqdm", "(", "train_hypothesis", ")", "\n", "]", "\n", "test_hypothesis", "=", "[", "\n", "indic2en_model", ".", "translate_paragraph", "(", "item", ",", "dest", ",", "\"en\"", ")", "\n", "for", "item", "in", "tqdm", "(", "test_hypothesis", ")", "\n", "]", "\n", "val_hypothesis", "=", "[", "\n", "indic2en_model", ".", "translate_paragraph", "(", "item", ",", "dest", ",", "\"en\"", ")", "\n", "for", "item", "in", "tqdm", "(", "val_hypothesis", ")", "\n", "]", "\n", "\n", "", "train_data", "=", "[", "]", "\n", "test_data", "=", "[", "]", "\n", "val_data", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "len", "(", "train_premise", ")", ")", ":", "\n", "        ", "new_item", "=", "{", "\n", "\"premise\"", ":", "train_premise", "[", "i", "]", ",", "\n", "\"hypothesis\"", ":", "train_hypothesis", "[", "i", "]", ",", "\n", "\"label\"", ":", "dataset", "[", "\"train\"", "]", "[", "i", "]", "[", "\"label\"", "]", ",", "\n", "}", "\n", "\n", "train_data", ".", "append", "(", "new_item", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "test_premise", ")", ")", ":", "\n", "        ", "new_item", "=", "{", "\n", "\"premise\"", ":", "test_premise", "[", "i", "]", ",", "\n", "\"hypothesis\"", ":", "test_hypothesis", "[", "i", "]", ",", "\n", "\"label\"", ":", "dataset", "[", "\"test\"", "]", "[", "i", "]", "[", "\"label\"", "]", ",", "\n", "}", "\n", "\n", "test_data", ".", "append", "(", "new_item", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "len", "(", "val_premise", ")", ")", ":", "\n", "        ", "new_item", "=", "{", "\n", "\"premise\"", ":", "val_premise", "[", "i", "]", ",", "\n", "\"hypothesis\"", ":", "val_hypothesis", "[", "i", "]", ",", "\n", "\"label\"", ":", "dataset", "[", "\"validation\"", "]", "[", "i", "]", "[", "\"label\"", "]", ",", "\n", "}", "\n", "\n", "val_data", ".", "append", "(", "new_item", ")", "\n", "\n", "", "new_dataset", "=", "{", "\"train\"", ":", "train_data", ",", "\"test\"", ":", "test_data", ",", "\"validation\"", ":", "val_data", "}", "\n", "\n", "return", "new_dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.divyanshuaggarwal_indicxnli.src.model.XNLIModel.__init__": [[14, 40], ["pytorch_lightning.LightningModule.__init__", "transformers.AutoModelForSequenceClassification.from_pretrained", "datasets.load_metric"], "methods", ["home.repos.pwc.inspect_result.divyanshuaggarwal_indicxnli.src.model.XNLIModel.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "model_name", ":", "str", ",", "\n", "#  config:Optional[str] = None,", "\n", "lang", ":", "Optional", "[", "str", "]", "=", "None", ",", "\n", "learning_rate", "=", "2e-5", ",", "\n", "batch_size", "=", "32", ",", "\n", "weight_decay", "=", "0.01", ",", "\n", "eps", "=", "1e-6", ",", "\n", "warmup_steps", "=", "150", ",", "\n", "suffix", "=", "\"en\"", ",", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "model_name", "=", "model_name", "\n", "self", ".", "model", "=", "AutoModelForSequenceClassification", ".", "from_pretrained", "(", "\n", "self", ".", "model_name", ",", "\n", "num_labels", "=", "3", ",", "\n", ")", "\n", "self", ".", "lang", "=", "lang", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "metric", "=", "load_metric", "(", "\"xnli\"", ")", "\n", "self", ".", "lr", "=", "learning_rate", "\n", "self", ".", "weight_decay", "=", "weight_decay", "\n", "self", ".", "eps", "=", "eps", "\n", "self", ".", "warmup_steps", "=", "warmup_steps", "\n", "self", ".", "suffix", "=", "suffix", "\n", "\n"]], "home.repos.pwc.inspect_result.divyanshuaggarwal_indicxnli.src.model.XNLIModel.forward": [[41, 44], ["model.XNLIModel.model"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "**", "x", ")", ":", "\n", "        ", "outputs", "=", "self", ".", "model", "(", "**", "x", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.divyanshuaggarwal_indicxnli.src.model.XNLIModel.training_step": [[45, 49], ["model.XNLIModel."], "methods", ["None"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "outputs", "=", "self", "(", "**", "batch", ")", "\n", "loss", "=", "outputs", "[", "0", "]", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.divyanshuaggarwal_indicxnli.src.model.XNLIModel.validation_step": [[50, 57], ["model.XNLIModel.", "torch.argmax"], "methods", ["None"], ["", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_idx", ",", "dataloader_idx", "=", "0", ")", ":", "\n", "        ", "outputs", "=", "self", "(", "**", "batch", ")", "\n", "val_loss", ",", "logits", "=", "outputs", "[", ":", "2", "]", "\n", "preds", "=", "torch", ".", "argmax", "(", "logits", ",", "axis", "=", "1", ")", "\n", "labels", "=", "batch", "[", "\"labels\"", "]", "\n", "# self.log(\"val_loss\",val_loss)", "\n", "return", "{", "\"val_loss\"", ":", "val_loss", ",", "\"preds\"", ":", "preds", ",", "\"labels\"", ":", "labels", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.divyanshuaggarwal_indicxnli.src.model.XNLIModel.test_step": [[58, 64], ["model.XNLIModel.", "torch.argmax"], "methods", ["None"], ["", "def", "test_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "        ", "outputs", "=", "self", "(", "**", "batch", ")", "\n", "test_loss", ",", "logits", "=", "outputs", "[", ":", "2", "]", "\n", "preds", "=", "torch", ".", "argmax", "(", "logits", ",", "axis", "=", "1", ")", "\n", "labels", "=", "batch", "[", "\"labels\"", "]", "\n", "return", "{", "\"test_loss\"", ":", "test_loss", ",", "\"preds\"", ":", "preds", ",", "\"labels\"", ":", "labels", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.divyanshuaggarwal_indicxnli.src.model.XNLIModel.validation_epoch_end": [[65, 78], ["torch.cat().detach().cpu().numpy", "torch.cat().detach().cpu().numpy", "torch.stack().mean", "model.XNLIModel.log", "model.XNLIModel.log", "model.XNLIModel.metric.compute", "torch.cat().detach().cpu", "torch.cat().detach().cpu", "torch.stack", "torch.cat().detach", "torch.cat().detach", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "validation_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n", "        ", "preds", "=", "torch", ".", "cat", "(", "[", "x", "[", "\"preds\"", "]", "for", "x", "in", "outputs", "]", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "labels", "=", "torch", ".", "cat", "(", "[", "x", "[", "\"labels\"", "]", "for", "x", "in", "outputs", "]", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "val_loss", "=", "torch", ".", "stack", "(", "[", "x", "[", "\"val_loss\"", "]", "for", "x", "in", "outputs", "]", ")", ".", "mean", "(", ")", "\n", "val_acc", "=", "self", ".", "metric", ".", "compute", "(", "predictions", "=", "preds", ",", "references", "=", "labels", ")", "[", "\"accuracy\"", "]", "\n", "# self.log_dict(self.metric.compute(predictions=preds, references=labels))", "\n", "self", ".", "log", "(", "\"val_loss\"", ",", "val_loss", ")", "\n", "tqdm_dict", "=", "{", "\n", "\"val_loss\"", ":", "val_loss", ",", "\n", "\"val_acc\"", ":", "val_acc", ",", "\n", "}", "\n", "self", ".", "log", "(", "\"val_acc\"", ",", "val_acc", ")", "\n", "return", "{", "\"progress_bar\"", ":", "tqdm_dict", ",", "\"log\"", ":", "tqdm_dict", ",", "\"val_loss\"", ":", "val_loss", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.divyanshuaggarwal_indicxnli.src.model.XNLIModel.test_epoch_end": [[79, 114], ["torch.cat().detach().cpu().numpy", "torch.cat().detach().cpu().numpy", "torch.stack().mean", "model.XNLIModel.log_dict", "model.XNLIModel.metric.compute", "model.XNLIModel.metric.compute", "os.listdir", "open", "json.dump", "torch.cat().detach().cpu", "torch.cat().detach().cpu", "torch.stack", "model.XNLIModel.model_name.split", "open", "json.load", "torch.cat().detach", "torch.cat().detach", "torch.cat", "torch.cat"], "methods", ["None"], ["", "def", "test_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n", "        ", "preds", "=", "torch", ".", "cat", "(", "[", "x", "[", "\"preds\"", "]", "for", "x", "in", "outputs", "]", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "labels", "=", "torch", ".", "cat", "(", "[", "x", "[", "\"labels\"", "]", "for", "x", "in", "outputs", "]", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "loss", "=", "torch", ".", "stack", "(", "[", "x", "[", "\"test_loss\"", "]", "for", "x", "in", "outputs", "]", ")", ".", "mean", "(", ")", "\n", "self", ".", "log_dict", "(", "self", ".", "metric", ".", "compute", "(", "predictions", "=", "preds", ",", "references", "=", "labels", ")", ")", "\n", "results", "=", "{", "}", "\n", "results", "[", "self", ".", "lang", "]", "=", "self", ".", "metric", ".", "compute", "(", "predictions", "=", "preds", ",", "references", "=", "labels", ")", "[", "\n", "\"accuracy\"", "\n", "]", "\n", "save_path", "=", "self", ".", "model_name", "\n", "\n", "if", "\"/\"", "in", "self", ".", "model_name", ":", "\n", "            ", "save_path", "=", "self", ".", "model_name", ".", "split", "(", "\"/\"", ")", "[", "-", "1", "]", "\n", "\n", "", "if", "f\"xnli_experiment_{save_path}_{self.suffix}.json\"", "in", "os", ".", "listdir", "(", "\"results/\"", ")", ":", "\n", "            ", "with", "open", "(", "\n", "f\"results/xnli_experiment_{save_path}_{self.suffix}.json\"", ",", "\n", "\"r\"", ",", "\n", ")", "as", "f", ":", "\n", "                ", "old_results", "=", "json", ".", "load", "(", "f", ")", "\n", "", "old_results", "[", "self", ".", "lang", "]", "=", "results", "[", "self", ".", "lang", "]", "\n", "results", "=", "old_results", "\n", "\n", "", "with", "open", "(", "\n", "f\"results/xnli_experiment_{save_path}_{self.suffix}.json\"", ",", "\n", "\"w\"", ",", "\n", ")", "as", "f", ":", "\n", "            ", "json", ".", "dump", "(", "results", ",", "f", ",", "indent", "=", "6", ")", "\n", "\n", "", "tqdm_dict", "=", "{", "\n", "\"test_loss\"", ":", "loss", ",", "\n", "\"test_acc\"", ":", "results", "[", "self", ".", "lang", "]", ",", "\n", "}", "\n", "\n", "return", "{", "\"progress_bar\"", ":", "tqdm_dict", ",", "\"log\"", ":", "tqdm_dict", ",", "\"test_loss\"", ":", "loss", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.divyanshuaggarwal_indicxnli.src.model.XNLIModel.prepare_data": [[115, 120], ["transformers.AutoModelForSequenceClassification.from_pretrained", "datasets.load_metric"], "methods", ["None"], ["", "def", "prepare_data", "(", "self", ")", ":", "\n", "        ", "AutoModelForSequenceClassification", ".", "from_pretrained", "(", "\n", "self", ".", "model_name", ",", "num_labels", "=", "3", "\n", ")", "\n", "load_metric", "(", "\"xnli\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.divyanshuaggarwal_indicxnli.src.model.XNLIModel.configure_optimizers": [[121, 140], ["list", "transformers.AdamW", "model.XNLIModel.model.named_parameters", "any", "any"], "methods", ["None"], ["", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "        ", "param_optimizer", "=", "list", "(", "self", ".", "model", ".", "named_parameters", "(", ")", ")", "\n", "no_decay", "=", "[", "\"bias\"", ",", "\"gamma\"", ",", "\"beta\"", "]", "\n", "optimizer_grouped_parameters", "=", "[", "\n", "{", "\n", "\"params\"", ":", "[", "\n", "p", "for", "n", ",", "p", "in", "param_optimizer", "if", "not", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "\n", "]", ",", "\n", "\"weight_decay_rate\"", ":", "self", ".", "weight_decay", ",", "\n", "}", ",", "\n", "{", "\n", "\"params\"", ":", "[", "\n", "p", "for", "n", ",", "p", "in", "param_optimizer", "if", "any", "(", "nd", "in", "n", "for", "nd", "in", "no_decay", ")", "\n", "]", ",", "\n", "\"weight_decay_rate\"", ":", "0.0", ",", "\n", "}", ",", "\n", "]", "\n", "optimizer", "=", "AdamW", "(", "optimizer_grouped_parameters", ",", "lr", "=", "self", ".", "lr", ",", "eps", "=", "self", ".", "eps", ")", "\n", "return", "optimizer", "\n", "", "", ""]]}