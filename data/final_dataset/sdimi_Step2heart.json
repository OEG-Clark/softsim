{"home.repos.pwc.inspect_result.sdimi_Step2heart.None.06_extract_features_for_xgb.feature_extraction": [[30, 44], ["print", "pandas.DataFrame", "pd.DataFrame.T.describe().T.add_suffix", "transp_array.apply", "array.T.describe().T.add_suffix.drop", "list", "array.T.describe().T.add_suffix.filter", "pd.DataFrame.T.describe", "numpy.polyfit"], "function", ["None"], ["def", "feature_extraction", "(", "array", ",", "feature_no", ")", ":", "#3D tensor -> 2D features extraction from every [:,:,d] dimension", "\n", "    ", "print", "(", "\"Extracting features for modality\"", ",", "feature_no", ")", "\n", "array", "=", "pd", ".", "DataFrame", "(", "array", ")", "\n", "\n", "#Pandas .describe() features (count, mean, std, min, 25%, 50%, 75%, max)", "\n", "array_features", "=", "array", ".", "T", ".", "describe", "(", ")", ".", "T", ".", "add_suffix", "(", "'_%s'", "%", "feature_no", ")", "\n", "\n", "#we use the slope of Linear Regression as a feature", "\n", "transp_array", "=", "array", ".", "T", "\n", "array_features", "[", "\"slope_%s\"", "%", "feature_no", "]", "=", "transp_array", ".", "apply", "(", "lambda", "x", ":", "np", ".", "polyfit", "(", "transp_array", ".", "index", ",", "x", ",", "1", ")", "[", "0", "]", ")", "\n", "\n", "#remove Count feature since it's repeated in every row", "\n", "array_features", ".", "drop", "(", "list", "(", "array_features", ".", "filter", "(", "regex", "=", "'count'", ")", ")", ",", "axis", "=", "1", ",", "inplace", "=", "True", ")", "#drop counts, only 1 value", "\n", "return", "array_features", "\n", "\n"]], "home.repos.pwc.inspect_result.sdimi_Step2heart.None.06_extract_features_for_xgb.concat_feature_modalities": [[45, 54], ["range", "print", "pandas.concat", "all_df.append", "06_extract_features_for_xgb.feature_extraction"], "function", ["home.repos.pwc.inspect_result.sdimi_Step2heart.None.06_extract_features_for_xgb.feature_extraction"], ["", "def", "concat_feature_modalities", "(", "array", ")", ":", "#extract statistical features for each timeseries and concatenate into one array", "\n", "    ", "all_df", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "X_test_timeseries", ".", "shape", "[", "2", "]", ")", ":", "#loop through all feature dimensions (10)", "\n", "        ", "assert", "X_test_timeseries", ".", "shape", "[", "2", "]", "==", "10", "\n", "all_df", ".", "append", "(", "feature_extraction", "(", "array", "[", ":", ",", ":", ",", "i", "]", ",", "i", ")", ")", "\n", "\n", "", "print", "(", "\"Concatenating all features in one array..\"", ")", "\n", "ts_features", "=", "pd", ".", "concat", "(", "all_df", ",", "axis", "=", "1", ")", "\n", "return", "ts_features", "\n", "\n"]], "home.repos.pwc.inspect_result.sdimi_Step2heart.None.05_transfer_learning.window2user": [[23, 34], ["print", "pandas.DataFrame().astype", "pd.DataFrame().astype.groupby().mean", "print", "numpy.load", "numpy.load", "numpy.unique", "pandas.DataFrame", "pd.DataFrame().astype.groupby"], "function", ["None"], ["def", "window2user", "(", "activations", ",", "trainset", "=", "True", ")", ":", "\n", "    ", "if", "trainset", ":", "\n", "        ", "userid", "=", "np", ".", "load", "(", "'data/X_train_userid.npy'", ",", "allow_pickle", "=", "True", ")", "\n", "", "else", ":", "\n", "        ", "userid", "=", "np", ".", "load", "(", "'data/X_test_userid.npy'", ",", "allow_pickle", "=", "True", ")", "\n", "", "print", "(", "np", ".", "unique", "(", "userid", ")", ".", "shape", ")", "\n", "df", "=", "pd", ".", "DataFrame", "(", "activations", ")", ".", "astype", "(", "float", ")", "#transform datapoints to floats ", "\n", "df", ".", "index", "=", "userid", "#use the userID as index (helps with groupbys)", "\n", "user_level_activations", "=", "df", ".", "groupby", "(", "df", ".", "index", ")", ".", "mean", "(", ")", "#can be max, min, mean, median", "\n", "print", "(", "user_level_activations", ".", "shape", ")", "\n", "return", "user_level_activations", "\n", "\n"]], "home.repos.pwc.inspect_result.sdimi_Step2heart.None.05_transfer_learning.extract_labels": [[39, 58], ["pandas.read_csv", "display", "pandas.DataFrame", "pd.DataFrame.groupby().first", "numpy.load", "numpy.load", "pd.DataFrame.groupby"], "function", ["None"], ["def", "extract_labels", "(", "trainset", "=", "True", ")", ":", "\n", "    ", "if", "trainset", ":", "\n", "        ", "X", "=", "np", ".", "load", "(", "'data/X_train.npy'", ",", "allow_pickle", "=", "True", ")", "[", ":", ",", ":", ",", ":", "]", "\n", "", "else", ":", "\n", "        ", "X", "=", "np", ".", "load", "(", "'data/X_test.npy'", ",", "allow_pickle", "=", "True", ")", "\n", "", "features_names", "=", "pd", ".", "read_csv", "(", "'/home/'", "+", "name", "+", "'/rds/rds-rjh234-deeplearning/_features_used_deep_learning.csv'", ")", "\n", "label_names", "=", "features_names", "[", "(", "features_names", ".", "features_used", "==", "'id'", ")", "\n", "|", "(", "features_names", ".", "features_used", "==", "'height'", ")", "\n", "|", "(", "features_names", ".", "features_used", "==", "'weight'", ")", "\n", "|", "(", "features_names", ".", "features_used", "==", "'bmi'", ")", "\n", "|", "(", "features_names", ".", "features_used", "==", "'sex'", ")", "\n", "|", "(", "features_names", ".", "features_used", "==", "'age'", ")", "\n", "|", "(", "features_names", ".", "features_used", "==", "'resting_HR'", ")", "]", "\n", "display", "(", "label_names", ")", "\n", "label_names_df", "=", "pd", ".", "DataFrame", "(", "X", "[", ":", ",", "0", ",", "label_names", ".", "index", ".", "values", "]", ")", "\n", "label_names_df", ".", "index", "=", "label_names_df", "[", "0", "]", "#move the user_id to index", "\n", "del", "label_names_df", "[", "0", "]", "#delete the user_id col", "\n", "label_names_df_user", "=", "label_names_df", ".", "groupby", "(", "label_names_df", ".", "index", ")", ".", "first", "(", ")", "\n", "return", "label_names_df_user", ",", "label_names", "\n", "\n"]], "home.repos.pwc.inspect_result.sdimi_Step2heart.None.utils.PlotLosses.__init__": [[158, 160], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "model_time", ")", ":", "\n", "        ", "self", ".", "model_time", "=", "model_time", "#do this function in order to pass the model folder for the saved png", "\n", "\n"]], "home.repos.pwc.inspect_result.sdimi_Step2heart.None.utils.PlotLosses.on_train_begin": [[161, 172], ["matplotlib.figure"], "methods", ["None"], ["", "def", "on_train_begin", "(", "self", ",", "logs", "=", "{", "}", ")", ":", "\n", "        ", "self", ".", "i", "=", "0", "\n", "self", ".", "x", "=", "[", "]", "\n", "self", ".", "losses", "=", "[", "]", "\n", "self", ".", "val_losses", "=", "[", "]", "\n", "self", ".", "acc", "=", "[", "]", "\n", "self", ".", "val_acc", "=", "[", "]", "\n", "\n", "self", ".", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "\n", "self", ".", "logs", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.sdimi_Step2heart.None.utils.PlotLosses.on_epoch_end": [[173, 192], ["utils.PlotLosses.logs.append", "utils.PlotLosses.x.append", "utils.PlotLosses.losses.append", "utils.PlotLosses.val_losses.append", "utils.PlotLosses.acc.append", "utils.PlotLosses.val_acc.append", "matplotlib.clf", "matplotlib.plot", "matplotlib.plot", "matplotlib.ylabel", "matplotlib.legend", "matplotlib.xlabel", "matplotlib.savefig", "logs.get", "logs.get", "logs.get", "logs.get"], "methods", ["None"], ["", "def", "on_epoch_end", "(", "self", ",", "epoch", ",", "logs", "=", "{", "}", ")", ":", "\n", "\n", "        ", "self", ".", "logs", ".", "append", "(", "logs", ")", "\n", "self", ".", "x", ".", "append", "(", "self", ".", "i", ")", "\n", "self", ".", "losses", ".", "append", "(", "logs", ".", "get", "(", "'loss'", ")", ")", "\n", "self", ".", "val_losses", ".", "append", "(", "logs", ".", "get", "(", "'val_loss'", ")", ")", "\n", "self", ".", "acc", ".", "append", "(", "logs", ".", "get", "(", "'acc'", ")", ")", "\n", "self", ".", "val_acc", ".", "append", "(", "logs", ".", "get", "(", "'val_acc'", ")", ")", "\n", "self", ".", "i", "+=", "1", "\n", "\n", "#clear_output(wait=True)", "\n", "plt", ".", "clf", "(", ")", "#new addition, important if not in jupyter, equivalent to clear_output(wait=True)", "\n", "\n", "plt", ".", "plot", "(", "self", ".", "x", ",", "self", ".", "losses", ",", "label", "=", "\"train\"", ")", "\n", "plt", ".", "plot", "(", "self", ".", "x", ",", "self", ".", "val_losses", ",", "label", "=", "\"val\"", ")", "\n", "plt", ".", "ylabel", "(", "'Loss'", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "xlabel", "(", "'Epoch'", ")", "\n", "plt", ".", "savefig", "(", "\"models/%s/training_curves.png\"", "%", "self", ".", "model_time", ",", "bbox_inches", "=", "\"tight\"", ")", "\n", "#plt.show();", ""]], "home.repos.pwc.inspect_result.sdimi_Step2heart.None.utils.modular_model": [[20, 121], ["keras.models.Model.summary", "keras.layers.Input", "keras.models.Model", "keras.layers.Input", "keras.layers.Input", "keras.layers.concatenate", "keras.layers.concatenate", "keras.models.Model", "keras.layers.Input", "keras.layers.Input", "keras.layers.concatenate", "keras.layers.concatenate", "keras.models.Model", "keras.layers.Input", "keras.layers.Input", "keras.layers.Input", "keras.layers.concatenate", "keras.layers.concatenate", "keras.models.Model", "keras.layers.Input", "keras.models.Model", "keras.models.Model.compile", "keras.models.Model.compile", "utils.multi_tilted_loss", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.Bidirectional", "keras.layers.Bidirectional", "keras.layers.GlobalAveragePooling1D", "keras.layers.Dense", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.Bidirectional", "keras.layers.Bidirectional", "keras.layers.GlobalAveragePooling1D", "keras.layers.normalization.BatchNormalization", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.Bidirectional", "keras.layers.Bidirectional", "keras.layers.GlobalMaxPooling1D", "keras.layers.normalization.BatchNormalization", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.Conv1D", "keras.layers.Conv1D", "keras.layers.Bidirectional", "keras.layers.Bidirectional", "keras.layers.GlobalAveragePooling1D", "keras.layers.normalization.BatchNormalization", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Dropout", "keras.layers.normalization.BatchNormalization", "keras.layers.Dense", "keras.layers.Dense", "keras.layers.Dropout", "keras.layers.Dense", "keras.layers.Conv1D", "keras.layers.MaxPooling1D", "keras.layers.Conv1D", "keras.layers.GlobalAveragePooling1D", "keras.layers.Dense", "keras.layers.Reshape", "keras.layers.Conv1D", "keras.layers.UpSampling1D", "keras.layers.Conv1D", "keras.layers.UpSampling1D", "keras.layers.Conv1D", "keras.layers.CuDNNGRU", "keras.layers.CuDNNGRU", "keras.layers.CuDNNGRU", "keras.layers.CuDNNGRU", "keras.layers.CuDNNGRU", "keras.layers.CuDNNGRU", "keras.layers.CuDNNGRU", "keras.layers.CuDNNGRU"], "function", ["home.repos.pwc.inspect_result.sdimi_Step2heart.None.utils.multi_tilted_loss"], ["def", "modular_model", "(", "dim_shape", ",", "modality", ",", "loss", ")", ":", "\n", "    ", "if", "loss", "==", "\"quantile\"", ":", "\n", "        ", "quantiles", "=", "[", "0.01", ",", "0.05", ",", "0.5", ",", "0.95", ",", "0.99", "]", "\n", "loss_avg_p", "=", "lambda", "y", ",", "f", ":", "multi_tilted_loss", "(", "quantiles", ",", "y", ",", "f", ")", "\n", "\n", "", "if", "modality", "==", "1", ":", "#acc", "\n", "        ", "tensors_input", "=", "Input", "(", "shape", "=", "(", "512", ",", "dim_shape", ")", ",", "name", "=", "'tensors'", ")", "\n", "x", "=", "Conv1D", "(", "filters", "=", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "'valid'", ",", "strides", "=", "1", ",", "activation", "=", "'relu'", ")", "(", "tensors_input", ")", "\n", "x", "=", "Conv1D", "(", "filters", "=", "64", ",", "kernel_size", "=", "3", ",", "padding", "=", "'valid'", ",", "strides", "=", "1", ",", "activation", "=", "'relu'", ")", "(", "x", ")", "\n", "x", "=", "Bidirectional", "(", "CuDNNGRU", "(", "64", ",", "return_sequences", "=", "True", ")", ")", "(", "x", ")", "\n", "x", "=", "Bidirectional", "(", "CuDNNGRU", "(", "64", ",", "return_sequences", "=", "True", ")", ")", "(", "x", ")", "\n", "output", "=", "GlobalAveragePooling1D", "(", ")", "(", "x", ")", "\n", "final", "=", "Dense", "(", "1", ",", "activation", "=", "'linear'", ")", "(", "output", ")", "\n", "model", "=", "Model", "(", "inputs", "=", "[", "tensors_input", "]", ",", "outputs", "=", "[", "final", "]", ")", "\n", "\n", "", "if", "modality", "==", "2", ":", "#acc+resting", "\n", "        ", "tensors_input", "=", "Input", "(", "shape", "=", "(", "512", ",", "dim_shape", ")", ",", "name", "=", "'tensors'", ")", "\n", "x", "=", "Conv1D", "(", "filters", "=", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "'valid'", ",", "strides", "=", "1", ",", "activation", "=", "'relu'", ")", "(", "tensors_input", ")", "\n", "x", "=", "Conv1D", "(", "filters", "=", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "'valid'", ",", "strides", "=", "1", ",", "activation", "=", "'relu'", ")", "(", "x", ")", "\n", "x", "=", "Bidirectional", "(", "CuDNNGRU", "(", "128", ",", "return_sequences", "=", "True", ")", ")", "(", "x", ")", "\n", "x", "=", "Bidirectional", "(", "CuDNNGRU", "(", "128", ",", "return_sequences", "=", "True", ")", ")", "(", "x", ")", "\n", "x", "=", "GlobalAveragePooling1D", "(", ")", "(", "x", ")", "\n", "\n", "resting_input", "=", "Input", "(", "shape", "=", "(", "1", ",", ")", ",", "name", "=", "'resting'", ")", "\n", "z", "=", "BatchNormalization", "(", ")", "(", "resting_input", ")", "\n", "z", "=", "Dense", "(", "128", ",", "activation", "=", "'relu'", ")", "(", "z", ")", "\n", "z", "=", "Dense", "(", "128", ",", "activation", "=", "'relu'", ")", "(", "z", ")", "\n", "z", "=", "Dropout", "(", "0.33", ")", "(", "z", ")", "\n", "\n", "output", "=", "keras", ".", "layers", ".", "concatenate", "(", "[", "x", ",", "z", "]", ")", "\n", "final", "=", "Dense", "(", "1", ",", "activation", "=", "'linear'", ")", "(", "output", ")", "\n", "model", "=", "Model", "(", "inputs", "=", "[", "tensors_input", ",", "resting_input", "]", ",", "outputs", "=", "[", "final", "]", ")", "\n", "\n", "", "if", "modality", "==", "3", ":", "#acc+time", "\n", "        ", "tensors_input", "=", "Input", "(", "shape", "=", "(", "512", ",", "dim_shape", ")", ",", "name", "=", "'tensors'", ")", "\n", "\n", "\n", "x", "=", "Conv1D", "(", "filters", "=", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "'valid'", ",", "strides", "=", "1", ",", "activation", "=", "'relu'", ")", "(", "tensors_input", ")", "\n", "x", "=", "Conv1D", "(", "filters", "=", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "'valid'", ",", "strides", "=", "1", ",", "activation", "=", "'relu'", ")", "(", "x", ")", "\n", "\n", "x", "=", "Bidirectional", "(", "CuDNNGRU", "(", "128", ",", "return_sequences", "=", "True", ")", ")", "(", "x", ")", "\n", "x", "=", "Bidirectional", "(", "CuDNNGRU", "(", "128", ",", "return_sequences", "=", "True", ")", ")", "(", "x", ")", "\n", "\n", "x", "=", "GlobalMaxPooling1D", "(", ")", "(", "x", ")", "\n", "\n", "temporal_input", "=", "Input", "(", "shape", "=", "(", "4", ",", ")", ",", "name", "=", "'temporal'", ")", "\n", "y", "=", "BatchNormalization", "(", ")", "(", "temporal_input", ")", "\n", "y", "=", "Dense", "(", "128", ",", "activation", "=", "'relu'", ")", "(", "y", ")", "\n", "y", "=", "Dense", "(", "128", ",", "activation", "=", "'relu'", ")", "(", "y", ")", "\n", "y", "=", "Dropout", "(", "0.33", ")", "(", "y", ")", "\n", "\n", "output", "=", "keras", ".", "layers", ".", "concatenate", "(", "[", "x", ",", "y", "]", ")", "\n", "final", "=", "Dense", "(", "1", ",", "activation", "=", "'linear'", ")", "(", "output", ")", "\n", "model", "=", "Model", "(", "inputs", "=", "[", "tensors_input", ",", "temporal_input", "]", ",", "outputs", "=", "[", "final", "]", ")", "\n", "\n", "", "if", "modality", "==", "4", ":", "#acc+time+resting", "\n", "        ", "tensors_input", "=", "Input", "(", "shape", "=", "(", "512", ",", "dim_shape", ")", ",", "name", "=", "'tensors'", ")", "\n", "x", "=", "Conv1D", "(", "filters", "=", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "'valid'", ",", "strides", "=", "1", ",", "activation", "=", "'relu'", ")", "(", "tensors_input", ")", "\n", "x", "=", "Conv1D", "(", "filters", "=", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "'valid'", ",", "strides", "=", "1", ",", "activation", "=", "'relu'", ")", "(", "x", ")", "\n", "x", "=", "Bidirectional", "(", "CuDNNGRU", "(", "128", ",", "return_sequences", "=", "True", ")", ")", "(", "x", ")", "\n", "x", "=", "Bidirectional", "(", "CuDNNGRU", "(", "128", ",", "return_sequences", "=", "True", ")", ")", "(", "x", ")", "\n", "x", "=", "GlobalAveragePooling1D", "(", ")", "(", "x", ")", "\n", "\n", "temporal_input", "=", "Input", "(", "shape", "=", "(", "4", ",", ")", ",", "name", "=", "'temporal'", ")", "\n", "y", "=", "BatchNormalization", "(", ")", "(", "temporal_input", ")", "\n", "y", "=", "Dense", "(", "128", ",", "activation", "=", "'relu'", ")", "(", "y", ")", "\n", "y", "=", "Dense", "(", "128", ",", "activation", "=", "'relu'", ")", "(", "y", ")", "\n", "y", "=", "Dropout", "(", "0.33", ")", "(", "y", ")", "\n", "\n", "resting_input", "=", "Input", "(", "shape", "=", "(", "1", ",", ")", ",", "name", "=", "'resting'", ")", "\n", "z", "=", "BatchNormalization", "(", ")", "(", "resting_input", ")", "\n", "z", "=", "Dense", "(", "128", ",", "activation", "=", "'relu'", ")", "(", "z", ")", "\n", "z", "=", "Dense", "(", "128", ",", "activation", "=", "'relu'", ")", "(", "z", ")", "\n", "z", "=", "Dropout", "(", "0.33", ")", "(", "z", ")", "\n", "\n", "output", "=", "keras", ".", "layers", ".", "concatenate", "(", "[", "x", ",", "y", ",", "z", "]", ")", "\n", "final", "=", "Dense", "(", "1", ",", "activation", "=", "'linear'", ")", "(", "output", ")", "\n", "model", "=", "Model", "(", "inputs", "=", "[", "tensors_input", ",", "temporal_input", ",", "resting_input", "]", ",", "outputs", "=", "[", "final", "]", ")", "\n", "\n", "", "if", "modality", "==", "5", ":", "#autoencoder", "\n", "        ", "tensors_input", "=", "Input", "(", "shape", "=", "(", "512", ",", "dim_shape", ")", ",", "name", "=", "'tensors'", ")", "\n", "x", "=", "Conv1D", "(", "filters", "=", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "'same'", ",", "strides", "=", "1", ",", "activation", "=", "'relu'", ")", "(", "tensors_input", ")", "\n", "x", "=", "MaxPooling1D", "(", ")", "(", "x", ")", "\n", "x", "=", "Conv1D", "(", "filters", "=", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "'same'", ",", "strides", "=", "1", ",", "activation", "=", "'relu'", ")", "(", "x", ")", "\n", "x", "=", "GlobalAveragePooling1D", "(", ")", "(", "x", ")", "\n", "encoded", "=", "Dense", "(", "128", ")", "(", "x", ")", "\n", "x", "=", "Reshape", "(", "(", "128", ",", "1", ")", ")", "(", "encoded", ")", "\n", "x", "=", "Conv1D", "(", "filters", "=", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "'same'", ",", "strides", "=", "1", ",", "activation", "=", "'relu'", ")", "(", "x", ")", "\n", "x", "=", "UpSampling1D", "(", "2", ")", "(", "x", ")", "\n", "x", "=", "Conv1D", "(", "filters", "=", "128", ",", "kernel_size", "=", "3", ",", "padding", "=", "'same'", ",", "strides", "=", "1", ",", "activation", "=", "'relu'", ")", "(", "x", ")", "\n", "x", "=", "UpSampling1D", "(", "2", ")", "(", "x", ")", "\n", "final", "=", "Conv1D", "(", "filters", "=", "10", ",", "kernel_size", "=", "3", ",", "padding", "=", "'same'", ",", "strides", "=", "1", ",", "activation", "=", "'sigmoid'", ")", "(", "x", ")", "\n", "model", "=", "Model", "(", "inputs", "=", "[", "tensors_input", "]", ",", "outputs", "=", "[", "final", "]", ")", "\n", "\n", "", "if", "loss", "==", "\"quantile\"", ":", "\n", "        ", "model", ".", "compile", "(", "loss", "=", "[", "loss_avg_p", "]", ",", "optimizer", "=", "\"adam\"", ")", "\n", "loss", "=", "loss_avg_p", "\n", "", "else", ":", "\n", "        ", "model", ".", "compile", "(", "loss", "=", "\"mse\"", ",", "optimizer", "=", "\"adam\"", ")", "\n", "", "model", ".", "summary", "(", ")", "\n", "return", "model", ",", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.sdimi_Step2heart.None.utils.tilted_loss": [[122, 125], ["keras.mean", "keras.maximum"], "function", ["None"], ["", "def", "tilted_loss", "(", "q", ",", "y", ",", "f", ")", ":", "#quantile loss function (q=quantile, y,f = ground-truth, predicted)", "\n", "    ", "e", "=", "(", "y", "-", "f", ")", "\n", "return", "K", ".", "mean", "(", "K", ".", "maximum", "(", "q", "*", "e", ",", "(", "q", "-", "1", ")", "*", "e", ")", ",", "axis", "=", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.sdimi_Step2heart.None.utils.tilted_loss_numpy": [[126, 135], ["range", "len", "numpy.mean", "numpy.maximum"], "function", ["None"], ["", "def", "tilted_loss_numpy", "(", "y", ",", "f", ")", ":", "#quantile loss function (q=quantile, y,f = ground-truth, predicted)", "\n", "    ", "quantiles", "=", "[", "0.01", ",", "0.05", ",", "0.5", ",", "0.95", ",", "0.99", "]", "\n", "sum_q", "=", "0", "\n", "e", "=", "(", "y", "-", "f", ")", "\n", "for", "k", "in", "range", "(", "0", ",", "len", "(", "quantiles", ")", ")", ":", "\n", "        ", "q", "=", "quantiles", "[", "k", "]", "\n", "q_individual", "=", "np", ".", "mean", "(", "np", ".", "maximum", "(", "q", "*", "e", ",", "(", "q", "-", "1", ")", "*", "e", ")", ",", "axis", "=", "-", "1", ")", "\n", "sum_q", "+=", "q_individual", "\n", "", "return", "sum_q", "\n", "\n"]], "home.repos.pwc.inspect_result.sdimi_Step2heart.None.utils.multi_tilted_loss": [[136, 149], ["keras.mean", "range", "keras.square", "len", "keras.mean", "keras.maximum"], "function", ["None"], ["", "def", "multi_tilted_loss", "(", "quantiles", ",", "y", ",", "f", ")", ":", "\n", "#a traditional MSE loss ", "\n", "    ", "loss", "=", "K", ".", "mean", "(", "K", ".", "square", "(", "y", "-", "f", ")", ",", "axis", "=", "-", "1", ")", "#*0 or 0.5 to evaluate impact", "\n", "#print (K.shape(loss))    ", "\n", "for", "k", "in", "range", "(", "0", ",", "len", "(", "quantiles", ")", ")", ":", "\n", "        ", "q", "=", "quantiles", "[", "k", "]", "\n", "#print (q)", "\n", "e", "=", "(", "y", "-", "f", ")", "\n", "q_individual", "=", "K", ".", "mean", "(", "K", ".", "maximum", "(", "q", "*", "e", ",", "(", "q", "-", "1", ")", "*", "e", ")", ",", "axis", "=", "-", "1", ")", "#calculate individual quantile", "\n", "loss", "+=", "q_individual", "#add it to global loss", "\n", "#print (K.get_value(q_individual))    ", "\n", "#print (K.shape(loss))        ", "\n", "", "return", "loss", "#final loss is [MSE + q1 + q2 + etc.]", "\n", "\n"]], "home.repos.pwc.inspect_result.sdimi_Step2heart.None.utils.error_metrics": [[150, 155], ["sklearn.metrics.mean_squared_error", "math.sqrt", "sklearn.metrics.mean_absolute_error", "sklearn.metrics.mean_squared_error"], "function", ["None"], ["", "def", "error_metrics", "(", "test", ",", "predicted", ")", ":", "\n", "    ", "mse", "=", "mean_squared_error", "(", "test", ",", "predicted", ")", "#MSE", "\n", "rmse", "=", "sqrt", "(", "mean_squared_error", "(", "test", ",", "predicted", ")", ")", "#RMSE", "\n", "mae", "=", "mean_absolute_error", "(", "test", ",", "predicted", ")", "#MAE", "\n", "return", "mse", ",", "rmse", ",", "mae", "\n", "\n"]], "home.repos.pwc.inspect_result.sdimi_Step2heart.None.02_data_normalization.min_max_scaling": [[27, 51], ["range", "numpy.dstack", "len", "all_arrays.append", "sklearn.preprocessing.minmax_scale"], "function", ["None"], ["def", "min_max_scaling", "(", "array", ",", "indices", ")", ":", "#transform every timeseries to [0,1]", "\n", "#min-max scaling row-wise (also split per feature)", "\n", "    ", "all_arrays", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "indices", ")", ")", ":", "\n", "        ", "all_arrays", ".", "append", "(", "preprocessing", ".", "minmax_scale", "(", "array", "[", ":", ",", ":", ",", "i", "]", ".", "T", ")", ".", "T", ")", "\n", "#hacky but it's the only way to append here", "\n", "", "features_tensors", "=", "np", ".", "dstack", "(", "[", "all_arrays", "[", "0", "]", ",", "\n", "all_arrays", "[", "1", "]", ",", "\n", "all_arrays", "[", "2", "]", ",", "\n", "all_arrays", "[", "3", "]", ",", "\n", "all_arrays", "[", "4", "]", ",", "\n", "all_arrays", "[", "5", "]", ",", "\n", "all_arrays", "[", "6", "]", ",", "\n", "all_arrays", "[", "7", "]", ",", "\n", "all_arrays", "[", "8", "]", ",", "\n", "all_arrays", "[", "9", "]", ",", "\n", "all_arrays", "[", "10", "]", ",", "\n", "all_arrays", "[", "11", "]", ",", "\n", "all_arrays", "[", "12", "]", ",", "\n", "all_arrays", "[", "13", "]", ",", "\n", "all_arrays", "[", "14", "]", ",", "\n", "all_arrays", "[", "15", "]", "\n", "]", ")", "#stack them again (2D to 3D)", "\n", "return", "features_tensors", "\n", "\n"]]}