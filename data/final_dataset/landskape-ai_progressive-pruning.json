{"home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_train.AverageMeter.__init__": [[567, 569], ["main_anytime_train.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_train.AverageMeter.reset": [[570, 575], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_train.AverageMeter.update": [[576, 581], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_train.main": [[157, 446], ["parser.parse_args", "print", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "os.makedirs", "utils.setup_model", "utils.setup_model.cuda", "torch.CrossEntropyLoss", "list", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "range", "main_anytime_train.validate", "print", "print", "wb.WandBLogger.log_metrics", "wb.WandBLogger.log_metrics", "print", "print", "print", "print", "print", "print", "print", "print", "int", "main_anytime_train.setup_seed", "dataset.setup__cifar10_dataset", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "utils.setup_model.load_state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "extract_mask", "print", "prune_model_custom", "map", "utils.setup_model.parameters", "wb.WandBLogger", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "utils.setup_model.load_state_dict", "torch.optim.SGD.load_state_dict", "torch.optim.lr_scheduler.MultiStepLR.load_state_dict", "print", "numpy.linspace", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "print", "time.time", "generate_mask.generate_mask_", "utils.setup_model.cpu", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "extract_mask", "print", "prune_model_custom", "utils.setup_model.cuda", "range", "numpy.argmax", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "print", "utils.setup_model.load_state_dict", "print", "time_list.append", "print", "print", "dataset.setup__cifar100_dataset", "utils.setup_model.state_dict", "os.path.join", "parser.parse_args.decreasing_lr.split", "print", "dataset.generate_anytime_cifar10_dataloader", "print", "main_anytime_train.train", "main_anytime_train.validate", "torch.optim.lr_scheduler.MultiStepLR.step", "max", "all_result[].append", "all_result[].append", "all_result[].append", "all_result[].append", "all_result[].append", "all_result[].append", "all_result[].append", "main_anytime_train.save_checkpoint", "wb.WandBLogger.log_metrics", "numpy.array", "os.path.join", "time.time", "CER.append", "CER.append", "CER_diff.append", "print", "sum", "sum", "dataset.Setup_RestrictedImageNet", "len", "vars", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "range", "print", "dataset.generate_anytime_cifar100_dataloader", "len", "utils.evaluate_cer", "utils.evaluate_cer", "print", "utils.setup_model.state_dict", "torch.optim.SGD.state_dict", "torch.optim.lr_scheduler.MultiStepLR.state_dict", "str", "dataset.generate_anytime_res_img_dataloader", "torch.optim.SGD.state_dict", "dataset.generate_anytime_res_img_dataloader_few", "torch.optim.SGD.state_dict", "torch.optim.SGD.state_dict"], "function", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.utils.setup_model", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.validate", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.wb.wandb_logger.WandBLogger.log_metrics", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.wb.wandb_logger.WandBLogger.log_metrics", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.setup_seed", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.dataset.setup__cifar10_dataset", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.tools.pruning_utils.extract_mask", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.pruner.pruner.prune_model_custom", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.generate_mask.generate_mask_", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.tools.pruning_utils.extract_mask", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.pruner.pruner.prune_model_custom", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.dataset.setup__cifar100_dataset", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.dataset.generate_anytime_cifar10_dataloader", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.train", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.validate", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.save_checkpoint", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.wb.wandb_logger.WandBLogger.log_metrics", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.dataset.Setup_RestrictedImageNet", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.dataset.generate_anytime_cifar100_dataloader", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.utils.evaluate_cer", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.utils.evaluate_cer", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.dataset.generate_anytime_res_img_dataloader", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.dataset.generate_anytime_res_img_dataloader_few"], ["", "def", "main", "(", ")", ":", "\n", "    ", "global", "args", ",", "best_sa", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "print", "(", "args", ")", "\n", "\n", "torch", ".", "cuda", ".", "set_device", "(", "int", "(", "args", ".", "gpu", ")", ")", "\n", "os", ".", "makedirs", "(", "args", ".", "save_dir", ",", "exist_ok", "=", "True", ")", "\n", "if", "args", ".", "seed", ":", "\n", "        ", "setup_seed", "(", "args", ".", "seed", ")", "\n", "\n", "", "model", "=", "setup_model", "(", "args", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "\"cifar10\"", ":", "\n", "        ", "whole_trainset", "=", "setup__cifar10_dataset", "(", "args", ")", "\n", "", "elif", "args", ".", "dataset", "==", "\"cifar100\"", ":", "\n", "        ", "whole_trainset", "=", "setup__cifar100_dataset", "(", "args", ")", "\n", "", "elif", "args", ".", "dataset", "==", "\"restricted_imagenet\"", ":", "\n", "        ", "whole_trainset", ",", "test_set", "=", "Setup_RestrictedImageNet", "(", "args", ",", "args", ".", "imagenet_path", ")", "\n", "\n", "", "if", "args", ".", "tickets_init", ":", "\n", "        ", "print", "(", "\"loading init from {}\"", ".", "format", "(", "args", ".", "tickets_init", ")", ")", "\n", "init_file", "=", "torch", ".", "load", "(", "args", ".", "tickets_init", ",", "map_location", "=", "\"cpu\"", ")", "\n", "if", "\"init_weight\"", "in", "init_file", ":", "\n", "            ", "init_file", "=", "init_file", "[", "\"init_weight\"", "]", "\n", "", "model", ".", "load_state_dict", "(", "init_file", ")", "\n", "", "else", ":", "\n", "        ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "\"randinit.pth.tar\"", ")", ")", "\n", "\n", "# setup initialization and mask", "\n", "", "if", "args", ".", "tickets_mask", ":", "\n", "        ", "print", "(", "\"loading mask from {}\"", ".", "format", "(", "args", ".", "tickets_mask", ")", ")", "\n", "mask_file", "=", "torch", ".", "load", "(", "args", ".", "tickets_mask", ",", "map_location", "=", "\"cpu\"", ")", "\n", "if", "\"state_dict\"", "in", "mask_file", ":", "\n", "            ", "mask_file", "=", "mask_file", "[", "\"state_dict\"", "]", "\n", "", "mask_file", "=", "extract_mask", "(", "mask_file", ")", "\n", "print", "(", "\"pruning with {} masks\"", ".", "format", "(", "len", "(", "mask_file", ")", ")", ")", "\n", "prune_model_custom", "(", "model", ",", "mask_file", ")", "\n", "\n", "", "model", ".", "cuda", "(", ")", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "decreasing_lr", "=", "list", "(", "map", "(", "int", ",", "args", ".", "decreasing_lr", ".", "split", "(", "\",\"", ")", ")", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "model", ".", "parameters", "(", ")", ",", "\n", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ",", "\n", ")", "\n", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "\n", "optimizer", ",", "milestones", "=", "decreasing_lr", ",", "gamma", "=", "0.1", "\n", ")", "\n", "if", "args", ".", "wb", ":", "\n", "        ", "wandb_logger", "=", "WandBLogger", "(", "\n", "project_name", "=", "args", ".", "project_name", ",", "\n", "run_name", "=", "args", ".", "run", ",", "\n", "dir", "=", "args", ".", "save_dir", ",", "\n", "config", "=", "vars", "(", "args", ")", ",", "\n", "model", "=", "model", ",", "\n", "params", "=", "{", "\"resume\"", ":", "args", ".", "resume", "}", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "wandb_logger", "=", "None", "\n", "\n", "", "if", "args", ".", "resume", ":", "\n", "        ", "print", "(", "\"resume from checkpoint {}\"", ".", "format", "(", "args", ".", "checkpoint", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "\n", "args", ".", "checkpoint", ",", "map_location", "=", "torch", ".", "device", "(", "\"cuda:\"", "+", "str", "(", "args", ".", "gpu", ")", ")", "\n", ")", "\n", "best_sa", "=", "checkpoint", "[", "\"best_sa\"", "]", "\n", "start_epoch", "=", "checkpoint", "[", "\"epoch\"", "]", "\n", "all_result", "=", "checkpoint", "[", "\"result\"", "]", "\n", "start_state", "=", "checkpoint", "[", "\"state\"", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "\"state_dict\"", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "\"optimizer\"", "]", ")", "\n", "scheduler", ".", "load_state_dict", "(", "checkpoint", "[", "\"scheduler\"", "]", ")", "\n", "print", "(", "\n", "\"loading from state: {} epoch: {}, best_sa = {}\"", ".", "format", "(", "\n", "start_state", ",", "start_epoch", ",", "best_sa", "\n", ")", "\n", ")", "\n", "\n", "", "else", ":", "\n", "        ", "all_result", "=", "{", "}", "\n", "all_result", "[", "\"gen_gap\"", "]", "=", "[", "]", "\n", "all_result", "[", "\"train_ta\"", "]", "=", "[", "]", "\n", "all_result", "[", "\"val_ta\"", "]", "=", "[", "]", "\n", "all_result", "[", "\"best_sa\"", "]", "=", "[", "]", "\n", "all_result", "[", "\"gen_gap\"", "]", "=", "[", "]", "\n", "all_result", "[", "\"train_loss\"", "]", "=", "[", "]", "\n", "all_result", "[", "\"lr\"", "]", "=", "[", "]", "\n", "all_result", "[", "\"val_loss\"", "]", "=", "[", "]", "\n", "start_epoch", "=", "0", "\n", "start_state", "=", "1", "\n", "\n", "# sparsity = [1, 1.5,1.75,2, 2.5,3,3.5,4,4.5,5]  # 32.768 remaining_weights=0.8**(sparsity)", "\n", "", "if", "args", ".", "scope", "==", "\"local\"", ":", "\n", "        ", "sparsity", "=", "[", "args", ".", "sparsity_level", "for", "x", "in", "range", "(", "args", ".", "meta_batch_number", ")", "]", "\n", "", "else", ":", "\n", "        ", "sparsity", "=", "np", ".", "linspace", "(", "1", ",", "args", ".", "sparsity_level", ",", "args", ".", "meta_batch_number", ")", "\n", "\n", "", "time_list", "=", "[", "]", "\n", "CER", "=", "[", "]", "\n", "CER_diff", "=", "[", "]", "\n", "for", "current_state", "in", "range", "(", "start_state", ",", "args", ".", "meta_batch_number", "+", "1", ")", ":", "\n", "        ", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "\n", "optimizer", ",", "milestones", "=", "decreasing_lr", ",", "gamma", "=", "0.1", "\n", ")", "\n", "print", "(", "\"Current state = {}\"", ".", "format", "(", "current_state", ")", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "if", "args", ".", "dataset", "==", "\"cifar10\"", ":", "\n", "            ", "print", "(", "\"Loading cifar10 dataset in anytime setting\"", ")", "\n", "(", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "test_loader", ",", "\n", "train_snip_set", ",", "\n", ")", "=", "generate_anytime_cifar10_dataloader", "(", "args", ",", "whole_trainset", ",", "current_state", ")", "\n", "", "elif", "args", ".", "dataset", "==", "\"cifar100\"", ":", "\n", "            ", "print", "(", "\"Loading cifar100 dataset in anytime setting\"", ")", "\n", "(", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "test_loader", ",", "\n", "train_snip_set", ",", "\n", ")", "=", "generate_anytime_cifar100_dataloader", "(", "\n", "args", ",", "whole_trainset", ",", "current_state", "\n", ")", "\n", "", "elif", "args", ".", "dataset", "==", "\"restricted_imagenet\"", ":", "\n", "            ", "print", "(", "\"Loading Restricted Imagenet dataset in anytime setting\"", ")", "\n", "if", "args", ".", "meta_batch_number", "==", "3", ":", "\n", "                ", "(", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "test_loader", ",", "\n", "train_snip_set", ",", "\n", ")", "=", "generate_anytime_res_img_dataloader", "(", "\n", "args", ",", "whole_trainset", ",", "test_set", ",", "80565", ",", "current_state", "\n", ")", "\n", "\n", "", "elif", "args", ".", "meta_batch_number", "==", "10", ":", "\n", "# Few Shot Dataloader Example", "\n", "                ", "(", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "test_loader", ",", "\n", "train_snip_set", ",", "\n", ")", "=", "generate_anytime_res_img_dataloader_few", "(", "\n", "args", ",", "whole_trainset", ",", "test_set", ",", "6800", ",", "current_state", "\n", ")", "\n", "\n", "# Generate Mask using SNIP", "\n", "", "", "sparsity_level", "=", "sparsity", "[", "current_state", "-", "1", "]", "\n", "save_mask", "=", "(", "\n", "args", ".", "save_dir", "\n", "+", "f\"/{current_state}mask_{args.pruner}_{sparsity_level}.pth.tar\"", "\n", ")", "\n", "\n", "if", "current_state", "==", "1", ":", "\n", "            ", "model_load_dir", "=", "(", "\n", "args", ".", "save_dir", "+", "\"/randinit.pth.tar\"", "\n", ")", "# 1st Meta Batch Randomly initialized model", "\n", "", "else", ":", "\n", "            ", "model_load_dir", "=", "args", ".", "save_dir", "+", "f\"/{current_state-1}model_SA_best.pth.tar\"", "\n", "\n", "", "generate_mask_", "(", "\n", "args", ",", "\n", "train_snip_set", ",", "\n", "args", ".", "pruner", ",", "\n", "model_load_dir", ",", "\n", "save", "=", "save_mask", ",", "\n", "state", "=", "sparsity_level", ",", "\n", ")", "\n", "\n", "model", ".", "cpu", "(", ")", "\n", "# Load the Model by applying above mask", "\n", "print", "(", "\"loading mask from {}\"", ".", "format", "(", "save_mask", ")", ")", "\n", "mask_file", "=", "torch", ".", "load", "(", "save_mask", ",", "map_location", "=", "\"cpu\"", ")", "\n", "if", "\"state_dict\"", "in", "mask_file", ":", "\n", "            ", "mask_file", "=", "mask_file", "[", "\"state_dict\"", "]", "\n", "", "mask_file", "=", "extract_mask", "(", "mask_file", ")", "\n", "\n", "print", "(", "\"pruning with {} masks\"", ".", "format", "(", "len", "(", "mask_file", ")", ")", ")", "\n", "prune_model_custom", "(", "model", ",", "mask_file", ")", "\n", "\n", "model", ".", "cuda", "(", ")", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "\n", "            ", "print", "(", "optimizer", ".", "state_dict", "(", ")", "[", "\"param_groups\"", "]", "[", "0", "]", "[", "\"lr\"", "]", ")", "\n", "acc", ",", "loss", "=", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ")", "\n", "# evaluate on validation set", "\n", "tacc", ",", "vloss", "=", "validate", "(", "val_loader", ",", "model", ",", "criterion", ")", "\n", "# evaluate on test set", "\n", "# test_tacc = validate(test_loader, model, criterion)", "\n", "\n", "scheduler", ".", "step", "(", ")", "\n", "\n", "# remember best prec@1 and save checkpoint", "\n", "is_best_sa", "=", "tacc", ">", "best_sa", "\n", "best_sa", "=", "max", "(", "tacc", ",", "best_sa", ")", "\n", "\n", "gen_gap", "=", "acc", "-", "tacc", "\n", "all_result", "[", "\"gen_gap\"", "]", ".", "append", "(", "gen_gap", ")", "\n", "all_result", "[", "\"train_ta\"", "]", ".", "append", "(", "acc", ")", "\n", "all_result", "[", "\"val_ta\"", "]", ".", "append", "(", "tacc", ")", "\n", "all_result", "[", "\"best_sa\"", "]", ".", "append", "(", "best_sa", ")", "\n", "all_result", "[", "\"train_loss\"", "]", ".", "append", "(", "loss", ")", "\n", "all_result", "[", "\"val_loss\"", "]", ".", "append", "(", "vloss", ")", "\n", "all_result", "[", "\"lr\"", "]", ".", "append", "(", "optimizer", ".", "state_dict", "(", ")", "[", "\"param_groups\"", "]", "[", "0", "]", "[", "\"lr\"", "]", ")", "\n", "\n", "save_checkpoint", "(", "\n", "{", "\n", "\"state\"", ":", "current_state", ",", "\n", "\"result\"", ":", "all_result", ",", "\n", "\"epoch\"", ":", "epoch", "+", "1", ",", "\n", "\"state_dict\"", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "\"best_sa\"", ":", "best_sa", ",", "\n", "\"optimizer\"", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "\"scheduler\"", ":", "scheduler", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "\n", "is_SA_best", "=", "is_best_sa", ",", "\n", "data_state", "=", "current_state", ",", "\n", "save_path", "=", "args", ".", "save_dir", ",", "\n", ")", "\n", "\n", "", "if", "wandb_logger", ":", "\n", "            ", "wandb_logger", ".", "log_metrics", "(", "all_result", ")", "\n", "# report result", "\n", "", "val_pick_best_epoch", "=", "np", ".", "argmax", "(", "np", ".", "array", "(", "all_result", "[", "\"val_ta\"", "]", ")", ")", "\n", "print", "(", "\n", "\"* State = {} best SA = {} Epoch = {}\"", ".", "format", "(", "\n", "current_state", ",", "\n", "all_result", "[", "\"val_ta\"", "]", "[", "val_pick_best_epoch", "]", ",", "\n", "val_pick_best_epoch", "+", "1", ",", "\n", ")", "\n", ")", "\n", "\n", "all_result", "=", "{", "}", "\n", "all_result", "[", "\"train_ta\"", "]", "=", "[", "]", "\n", "all_result", "[", "\"val_ta\"", "]", "=", "[", "]", "\n", "all_result", "[", "\"best_sa\"", "]", "=", "[", "]", "\n", "all_result", "[", "\"gen_gap\"", "]", "=", "[", "]", "\n", "all_result", "[", "\"train_loss\"", "]", "=", "[", "]", "\n", "all_result", "[", "\"val_loss\"", "]", "=", "[", "]", "\n", "all_result", "[", "\"lr\"", "]", "=", "[", "]", "\n", "best_sa", "=", "0", "\n", "start_epoch", "=", "0", "\n", "best_checkpoint", "=", "torch", ".", "load", "(", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "\"{}model_SA_best.pth.tar\"", ".", "format", "(", "current_state", ")", ")", "\n", ")", "\n", "print", "(", "\"Loading Best Weight\"", ")", "\n", "model", ".", "load_state_dict", "(", "best_checkpoint", "[", "\"state_dict\"", "]", ")", "\n", "\n", "end_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "print", "(", "\"Total time elapsed: {:.4f}s\"", ".", "format", "(", "end_time", ")", ")", "\n", "time_list", ".", "append", "(", "end_time", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "\"restricted_imagenet\"", ":", "\n", "            ", "CER", ".", "append", "(", "evaluate_cer", "(", "model", ",", "args", ",", "test_loader", ")", ")", "\n", "", "else", ":", "\n", "            ", "CER", ".", "append", "(", "evaluate_cer", "(", "model", ",", "args", ")", ")", "\n", "\n", "", "if", "current_state", "!=", "1", ":", "\n", "            ", "diff", "=", "(", "CER", "[", "current_state", "-", "1", "]", "-", "CER", "[", "current_state", "-", "2", "]", ")", "/", "10000", "\n", "CER_diff", ".", "append", "(", "diff", ")", "\n", "print", "(", "\"CER diff: {}\"", ".", "format", "(", "diff", ")", ")", "\n", "\n", "# Reset LR to 0.1 after each state", "\n", "", "for", "g", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "g", "[", "\"lr\"", "]", "=", "0.1", "\n", "", "print", "(", "\"LR reset to 0.1\"", ")", "\n", "print", "(", "optimizer", ".", "state_dict", "(", ")", "[", "\"param_groups\"", "]", "[", "0", "]", "[", "\"lr\"", "]", ")", "\n", "\n", "", "test_tacc", "=", "validate", "(", "test_loader", ",", "model", ",", "criterion", ")", "\n", "\n", "print", "(", "\"Test Acc = {}\"", ".", "format", "(", "test_tacc", ")", ")", "\n", "print", "(", "\"CER = {}\"", ".", "format", "(", "sum", "(", "CER", ")", ")", ")", "\n", "wandb_logger", ".", "log_metrics", "(", "{", "\"Test/test_acc\"", ":", "test_tacc", "}", ")", "\n", "wandb_logger", ".", "log_metrics", "(", "{", "\"Test/CER\"", ":", "sum", "(", "CER", ")", "}", ")", "\n", "\n", "print", "(", "\"Final Test Accuracy: \"", ")", "\n", "print", "(", "test_tacc", ")", "\n", "print", "(", "\"CER\"", ")", "\n", "print", "(", "CER", ")", "\n", "print", "(", "\"Anytime Relative Error\"", ")", "\n", "print", "(", "CER_diff", ")", "\n", "print", "(", "\"Total time\"", ")", "\n", "print", "(", "time_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_train.train": [[448, 496], ["main_anytime_train.AverageMeter", "main_anytime_train.AverageMeter", "model.train", "time.time", "enumerate", "print", "image.cuda.cuda", "target.cuda.cuda", "model", "criterion", "optimizer.zero_grad", "loss.float.backward", "optimizer.step", "model.float", "loss.float.float", "main_anytime_train.AverageMeter.update", "main_anytime_train.AverageMeter.update", "main_anytime_train.warmup_lr", "main_anytime_train.accuracy", "loss.float.item", "image.cuda.size", "prec1.item", "image.cuda.size", "time.time", "print", "time.time", "len", "len"], "function", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.train", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.AverageMeter.update", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.AverageMeter.update", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.warmup_lr", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.accuracy"], ["", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ")", ":", "\n", "\n", "    ", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "image", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "\n", "        ", "if", "epoch", "<", "args", ".", "warmup", ":", "\n", "            ", "warmup_lr", "(", "epoch", ",", "i", "+", "1", ",", "optimizer", ",", "one_epoch_step", "=", "len", "(", "train_loader", ")", ")", "\n", "\n", "", "image", "=", "image", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "\n", "# compute output", "\n", "output_clean", "=", "model", "(", "image", ")", "\n", "loss", "=", "criterion", "(", "output_clean", ",", "target", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "output", "=", "output_clean", ".", "float", "(", ")", "\n", "loss", "=", "loss", ".", "float", "(", ")", "\n", "# measure accuracy and record loss", "\n", "prec1", "=", "accuracy", "(", "output", ".", "data", ",", "target", ")", "[", "0", "]", "\n", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "image", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "image", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "end", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\n", "\"Epoch: [{0}][{1}/{2}]\\t\"", "\n", "\"Loss {loss.val:.4f} ({loss.avg:.4f})\\t\"", "\n", "\"Accuracy {top1.val:.3f} ({top1.avg:.3f})\\t\"", "\n", "\"Time {3:.2f}\"", ".", "format", "(", "\n", "epoch", ",", "i", ",", "len", "(", "train_loader", ")", ",", "end", "-", "start", ",", "loss", "=", "losses", ",", "top1", "=", "top1", "\n", ")", "\n", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "", "print", "(", "\"train_accuracy {top1.avg:.3f}\"", ".", "format", "(", "top1", "=", "top1", ")", ")", "\n", "\n", "return", "top1", ".", "avg", ",", "losses", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_train.validate": [[498, 538], ["main_anytime_train.AverageMeter", "main_anytime_train.AverageMeter", "model.eval", "enumerate", "print", "image.cuda.cuda", "target.cuda.cuda", "model.float", "criterion.float", "main_anytime_train.AverageMeter.update", "main_anytime_train.AverageMeter.update", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "criterion", "main_anytime_train.accuracy", "criterion.item", "image.cuda.size", "prec1.item", "image.cuda.size", "print", "len"], "function", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.AverageMeter.update", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.AverageMeter.update", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.accuracy"], ["", "def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ")", ":", "\n", "    ", "\"\"\"\n    Run evaluation\n    \"\"\"", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "for", "i", ",", "(", "image", ",", "target", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "\n", "        ", "image", "=", "image", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "cuda", "(", ")", "\n", "\n", "# compute output", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", "=", "model", "(", "image", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "", "output", "=", "output", ".", "float", "(", ")", "\n", "loss", "=", "loss", ".", "float", "(", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "prec1", "=", "accuracy", "(", "output", ".", "data", ",", "target", ")", "[", "0", "]", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "image", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "image", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "print", "(", "\n", "\"Test: [{0}/{1}]\\t\"", "\n", "\"Loss {loss.val:.4f} ({loss.avg:.4f})\\t\"", "\n", "\"Accuracy {top1.val:.3f} ({top1.avg:.3f})\"", ".", "format", "(", "\n", "i", ",", "len", "(", "val_loader", ")", ",", "loss", "=", "losses", ",", "top1", "=", "top1", "\n", ")", "\n", ")", "\n", "\n", "", "", "print", "(", "\"valid_accuracy {top1.avg:.3f}\"", ".", "format", "(", "top1", "=", "top1", ")", ")", "\n", "\n", "return", "top1", ".", "avg", ",", "losses", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_train.save_checkpoint": [[540, 549], ["os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "shutil.copyfile", "str", "os.path.join"], "function", ["None"], ["", "def", "save_checkpoint", "(", "\n", "state", ",", "is_SA_best", ",", "data_state", ",", "save_path", ",", "filename", "=", "\"checkpoint.pth.tar\"", "\n", ")", ":", "\n", "    ", "filepath", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "str", "(", "data_state", ")", "+", "filename", ")", "\n", "torch", ".", "save", "(", "state", ",", "filepath", ")", "\n", "if", "is_SA_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "\n", "filepath", ",", "\n", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"{}model_SA_best.pth.tar\"", ".", "format", "(", "data_state", ")", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_train.warmup_lr": [[552, 562], ["min"], "function", ["None"], ["", "", "def", "warmup_lr", "(", "epoch", ",", "step", ",", "optimizer", ",", "one_epoch_step", ")", ":", "\n", "\n", "    ", "overall_steps", "=", "args", ".", "warmup", "*", "one_epoch_step", "\n", "current_steps", "=", "epoch", "*", "one_epoch_step", "+", "step", "\n", "\n", "lr", "=", "args", ".", "lr", "*", "current_steps", "/", "overall_steps", "\n", "lr", "=", "min", "(", "lr", ",", "args", ".", "lr", ")", "\n", "\n", "for", "p", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "p", "[", "\"lr\"", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_train.accuracy": [[583, 597], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_train.setup_seed": [[599, 606], ["print", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed"], "function", ["None"], ["", "def", "setup_seed", "(", "seed", ")", ":", "\n", "    ", "print", "(", "\"setup random seed = {}\"", ".", "format", "(", "seed", ")", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.generate_mask.generate_mask_": [[18, 144], ["torch.cuda.set_device", "torch.cuda.set_device", "utils.setup_model", "tools.pruning_utils.prune_conv", "print", "torch.load", "torch.load", "utils.setup_model.load_state_dict", "utils.setup_model.cuda", "utils.setup_model.train", "range", "int", "torch.load.keys", "print", "tools.pruning_utils.Mag", "generate_mask.generate_mask_.prune_loop"], "function", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.utils.setup_model", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.tools.pruning_utils.prune_conv", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.train"], ["def", "generate_mask_", "(", "args", ",", "data", ",", "pruner", ",", "model_dir", ",", "save", ",", "state", ",", "gpu", "=", "0", ")", ":", "\n", "    ", "def", "prune_loop", "(", "\n", "model", ",", "\n", "loss", ",", "\n", "pruner", ",", "\n", "dataloader", ",", "\n", "device", ",", "\n", "sparsity", ",", "\n", "scope", ",", "\n", "epochs", ",", "\n", "train_mode", "=", "False", ",", "\n", ")", ":", "\n", "\n", "# Set model to train or eval mode", "\n", "        ", "model", ".", "train", "(", ")", "\n", "if", "not", "train_mode", ":", "\n", "            ", "model", ".", "eval", "(", ")", "\n", "\n", "# Prune model", "\n", "", "for", "epoch", "in", "range", "(", "epochs", ")", ":", "\n", "            ", "pruner", ".", "score", "(", "model", ",", "loss", ",", "dataloader", ",", "device", ")", "\n", "sparse", "=", "sparsity", "**", "(", "(", "epoch", "+", "1", ")", "/", "epochs", ")", "\n", "pruner", ".", "mask", "(", "sparse", ",", "scope", ")", "\n", "\n", "", "", "torch", ".", "cuda", ".", "set_device", "(", "int", "(", "gpu", ")", ")", "\n", "\n", "model", "=", "setup_model", "(", "args", ")", "\n", "prune_conv", "(", "model", ")", "\n", "\n", "print", "(", "\"loading model from {}\"", ".", "format", "(", "model_dir", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "model_dir", ",", "map_location", "=", "\"cpu\"", ")", "\n", "if", "\"state_dict\"", "in", "checkpoint", ".", "keys", "(", ")", ":", "\n", "        ", "checkpoint", "=", "checkpoint", "[", "\"state_dict\"", "]", "\n", "\n", "", "model", ".", "load_state_dict", "(", "checkpoint", ",", "strict", "=", "False", ")", "\n", "\n", "model", ".", "cuda", "(", ")", "\n", "\n", "remain_weight", "=", "0.8", "**", "state", "\n", "\n", "if", "pruner", "==", "\"mag\"", ":", "\n", "        ", "print", "(", "\"Pruning with Magnitude\"", ")", "\n", "pruner", "=", "Mag", "(", "masked_parameters", "(", "model", ")", ")", "\n", "prune_loop", "(", "\n", "model", ",", "\n", "None", ",", "\n", "pruner", ",", "\n", "None", ",", "\n", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "gpu", ")", ")", ",", "\n", "remain_weight", ",", "\n", "scope", "=", "args", ".", "scope", ",", "\n", "epochs", "=", "10", ",", "\n", "train_mode", "=", "True", ",", "\n", ")", "\n", "current_mask", "=", "extract_mask", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "check_sparsity_dict", "(", "current_mask", ")", "\n", "torch", ".", "save", "(", "current_mask", ",", "save", ")", "\n", "\n", "", "elif", "pruner", "==", "\"snip\"", ":", "\n", "        ", "print", "(", "\"Pruning with SNIP\"", ")", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "data_loader", "=", "DataLoader", "(", "\n", "data", ",", "batch_size", "=", "100", ",", "shuffle", "=", "False", ",", "num_workers", "=", "2", ",", "pin_memory", "=", "True", "\n", ")", "\n", "\n", "pruner", "=", "SNIP", "(", "masked_parameters", "(", "model", ")", ")", "\n", "prune_loop", "(", "\n", "model", ",", "\n", "criterion", ",", "\n", "pruner", ",", "\n", "data_loader", ",", "\n", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "gpu", ")", ")", ",", "\n", "remain_weight", ",", "\n", "scope", "=", "args", ".", "scope", ",", "\n", "epochs", "=", "1", ",", "\n", "train_mode", "=", "True", ",", "\n", ")", "\n", "current_mask", "=", "extract_mask", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "check_sparsity_dict", "(", "current_mask", ")", "\n", "torch", ".", "save", "(", "current_mask", ",", "save", ")", "\n", "\n", "", "elif", "pruner", "==", "\"random\"", ":", "\n", "        ", "print", "(", "\"Pruning with Magnitude\"", ")", "\n", "pruner", "=", "Rand", "(", "masked_parameters", "(", "model", ")", ")", "\n", "prune_loop", "(", "\n", "model", ",", "\n", "None", ",", "\n", "pruner", ",", "\n", "None", ",", "\n", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "gpu", ")", ")", ",", "\n", "remain_weight", ",", "\n", "scope", "=", "args", ".", "scope", ",", "\n", "epochs", "=", "1", ",", "\n", "train_mode", "=", "True", ",", "\n", ")", "\n", "current_mask", "=", "extract_mask", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "check_sparsity_dict", "(", "current_mask", ")", "\n", "torch", ".", "save", "(", "current_mask", ",", "save", ")", "\n", "\n", "", "elif", "pruner", "==", "\"GraSP\"", ":", "\n", "        ", "print", "(", "\"Pruning with GraSP\"", ")", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "\n", "trainset", "=", "torchvision", ".", "datasets", ".", "CIFAR10", "(", "\n", "args", ".", "data", ",", "train", "=", "True", ",", "download", "=", "True", ",", "transform", "=", "transforms", ".", "ToTensor", "(", ")", "\n", ")", "\n", "trainloader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "trainset", ",", "batch_size", "=", "128", ",", "shuffle", "=", "True", ",", "num_workers", "=", "2", "\n", ")", "\n", "\n", "pruner", "=", "GraSP", "(", "masked_parameters", "(", "model", ")", ")", "\n", "prune_loop", "(", "\n", "model", ",", "\n", "criterion", ",", "\n", "pruner", ",", "\n", "trainloader", ",", "\n", "torch", ".", "device", "(", "\"cuda:{}\"", ".", "format", "(", "gpu", ")", ")", ",", "\n", "remain_weight", ",", "\n", "scope", "=", "\"global\"", ",", "\n", "epochs", "=", "1", ",", "\n", "train_mode", "=", "True", ",", "\n", ")", "\n", "current_mask", "=", "extract_mask", "(", "model", ".", "state_dict", "(", ")", ")", "\n", "check_sparsity_dict", "(", "current_mask", ")", "\n", "torch", ".", "save", "(", "current_mask", ",", "save", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_baseline.AverageMeter.__init__": [[481, 483], ["main_anytime_baseline.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_baseline.AverageMeter.reset": [[484, 489], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_baseline.AverageMeter.update": [[490, 495], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_baseline.main": [[154, 360], ["parser.parse_args", "print", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "os.makedirs", "utils.setup_model", "utils.setup_model.cuda", "torch.CrossEntropyLoss", "list", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "range", "main_anytime_baseline.validate", "wb.WandBLogger.log_metrics", "wb.WandBLogger.log_metrics", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "int", "main_anytime_baseline.setup_seed", "dataset.setup__cifar10_dataset", "map", "utils.setup_model.parameters", "wb.WandBLogger", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "print", "time.time", "range", "numpy.argmax", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "print", "utils.setup_model.load_state_dict", "print", "time_list.append", "print", "print", "dataset.setup__cifar100_dataset", "parser.parse_args.decreasing_lr.split", "print", "dataset.generate_anytime_cifar10_dataloader", "print", "main_anytime_baseline.train", "main_anytime_baseline.validate", "torch.optim.lr_scheduler.MultiStepLR.step", "max", "all_result[].append", "all_result[].append", "all_result[].append", "all_result[].append", "all_result[].append", "all_result[].append", "all_result[].append", "main_anytime_baseline.save_checkpoint", "wb.WandBLogger.log_metrics", "numpy.array", "os.path.join", "time.time", "CER.append", "CER.append", "CER_diff.append", "print", "sum", "sum", "dataset.Setup_RestrictedImageNet", "vars", "print", "dataset.generate_anytime_cifar100_dataloader", "utils.evaluate_cer", "utils.evaluate_cer", "print", "utils.setup_model.state_dict", "torch.optim.SGD.state_dict", "torch.optim.lr_scheduler.MultiStepLR.state_dict", "dataset.generate_anytime_res_img_dataloader", "torch.optim.SGD.state_dict", "dataset.generate_anytime_res_img_dataloader_few", "torch.optim.SGD.state_dict", "torch.optim.SGD.state_dict"], "function", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.utils.setup_model", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.validate", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.wb.wandb_logger.WandBLogger.log_metrics", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.wb.wandb_logger.WandBLogger.log_metrics", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.setup_seed", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.dataset.setup__cifar10_dataset", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.dataset.setup__cifar100_dataset", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.dataset.generate_anytime_cifar10_dataloader", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.train", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.validate", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.save_checkpoint", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.wb.wandb_logger.WandBLogger.log_metrics", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.dataset.Setup_RestrictedImageNet", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.dataset.generate_anytime_cifar100_dataloader", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.utils.evaluate_cer", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.utils.evaluate_cer", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.dataset.generate_anytime_res_img_dataloader", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.dataset.generate_anytime_res_img_dataloader_few"], ["def", "main", "(", ")", ":", "\n", "    ", "global", "args", ",", "best_sa", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "print", "(", "args", ")", "\n", "\n", "torch", ".", "cuda", ".", "set_device", "(", "int", "(", "args", ".", "gpu", ")", ")", "\n", "os", ".", "makedirs", "(", "args", ".", "save_dir", ",", "exist_ok", "=", "True", ")", "\n", "if", "args", ".", "seed", ":", "\n", "        ", "setup_seed", "(", "args", ".", "seed", ")", "\n", "\n", "", "model", "=", "setup_model", "(", "args", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "\"cifar10\"", ":", "\n", "        ", "whole_trainset", "=", "setup__cifar10_dataset", "(", "args", ")", "\n", "", "elif", "args", ".", "dataset", "==", "\"cifar100\"", ":", "\n", "        ", "whole_trainset", "=", "setup__cifar100_dataset", "(", "args", ")", "\n", "", "elif", "args", ".", "dataset", "==", "\"restricted_imagenet\"", ":", "\n", "        ", "whole_trainset", ",", "test_set", "=", "Setup_RestrictedImageNet", "(", "args", ".", "imagenet_path", ")", "\n", "\n", "", "model", ".", "cuda", "(", ")", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "decreasing_lr", "=", "list", "(", "map", "(", "int", ",", "args", ".", "decreasing_lr", ".", "split", "(", "\",\"", ")", ")", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "model", ".", "parameters", "(", ")", ",", "\n", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ",", "\n", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "\n", "optimizer", ",", "milestones", "=", "decreasing_lr", ",", "gamma", "=", "0.1", "\n", ")", "\n", "if", "args", ".", "wb", ":", "\n", "        ", "wandb_logger", "=", "WandBLogger", "(", "\n", "project_name", "=", "args", ".", "project_name", ",", "\n", "run_name", "=", "args", ".", "run", ",", "\n", "dir", "=", "args", ".", "save_dir", ",", "\n", "config", "=", "vars", "(", "args", ")", ",", "\n", "model", "=", "model", ",", "\n", "params", "=", "{", "\"resume\"", ":", "args", ".", "resume", "}", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "wandb_logger", "=", "None", "\n", "\n", "", "all_result", "=", "{", "}", "\n", "all_result", "[", "\"gen_gap\"", "]", "=", "[", "]", "\n", "all_result", "[", "\"train_ta\"", "]", "=", "[", "]", "\n", "all_result", "[", "\"val_ta\"", "]", "=", "[", "]", "\n", "all_result", "[", "\"best_sa\"", "]", "=", "[", "]", "\n", "all_result", "[", "\"gen_gap\"", "]", "=", "[", "]", "\n", "all_result", "[", "\"train_loss\"", "]", "=", "[", "]", "\n", "all_result", "[", "\"val_loss\"", "]", "=", "[", "]", "\n", "all_result", "[", "\"lr\"", "]", "=", "[", "]", "\n", "start_epoch", "=", "0", "\n", "start_state", "=", "1", "\n", "\n", "time_list", "=", "[", "]", "\n", "CER", "=", "[", "]", "\n", "CER_diff", "=", "[", "]", "\n", "for", "current_state", "in", "range", "(", "start_state", ",", "args", ".", "meta_batch_number", "+", "1", ")", ":", "\n", "        ", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "\n", "optimizer", ",", "milestones", "=", "decreasing_lr", ",", "gamma", "=", "0.1", "\n", ")", "\n", "print", "(", "\"Current state = {}\"", ".", "format", "(", "current_state", ")", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "\"cifar10\"", ":", "\n", "            ", "print", "(", "\"Loading cifar10 dataset in anytime setting\"", ")", "\n", "(", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "test_loader", ",", "\n", "_", ",", "\n", ")", "=", "generate_anytime_cifar10_dataloader", "(", "args", ",", "whole_trainset", ",", "current_state", ")", "\n", "", "elif", "args", ".", "dataset", "==", "\"cifar100\"", ":", "\n", "            ", "print", "(", "\"Loading cifar100 dataset in anytime setting\"", ")", "\n", "(", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "test_loader", ",", "\n", "_", ",", "\n", ")", "=", "generate_anytime_cifar100_dataloader", "(", "\n", "args", ",", "whole_trainset", ",", "current_state", "\n", ")", "\n", "", "elif", "args", ".", "dataset", "==", "\"restricted_imagenet\"", ":", "\n", "            ", "print", "(", "\"Loading Restricted Imagenet dataset in anytime setting\"", ")", "\n", "if", "args", ".", "meta_batch_number", "==", "3", ":", "\n", "                ", "(", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "test_loader", ",", "\n", "_", ",", "\n", ")", "=", "generate_anytime_res_img_dataloader", "(", "\n", "args", ",", "whole_trainset", ",", "test_set", ",", "80565", ",", "current_state", "\n", ")", "\n", "\n", "", "elif", "args", ".", "meta_batch_number", "==", "10", "and", "args", ".", "few_shot", ":", "\n", "# Few Shot Dataloader Example", "\n", "                ", "(", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "test_loader", ",", "\n", "_", ",", "\n", ")", "=", "generate_anytime_res_img_dataloader_few", "(", "\n", "args", ",", "whole_trainset", ",", "test_set", ",", "6800", ",", "current_state", "\n", ")", "\n", "\n", "", "", "for", "epoch", "in", "range", "(", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "\n", "            ", "print", "(", "optimizer", ".", "state_dict", "(", ")", "[", "\"param_groups\"", "]", "[", "0", "]", "[", "\"lr\"", "]", ")", "\n", "acc", ",", "loss", "=", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ")", "\n", "# evaluate on validation set", "\n", "tacc", ",", "vloss", "=", "validate", "(", "val_loader", ",", "model", ",", "criterion", ")", "\n", "\n", "scheduler", ".", "step", "(", ")", "\n", "\n", "# remember best prec@1 and save checkpoint", "\n", "is_best_sa", "=", "tacc", ">", "best_sa", "\n", "best_sa", "=", "max", "(", "tacc", ",", "best_sa", ")", "\n", "\n", "gen_gap", "=", "acc", "-", "tacc", "\n", "all_result", "[", "\"gen_gap\"", "]", ".", "append", "(", "gen_gap", ")", "\n", "all_result", "[", "\"train_ta\"", "]", ".", "append", "(", "acc", ")", "\n", "all_result", "[", "\"val_ta\"", "]", ".", "append", "(", "tacc", ")", "\n", "all_result", "[", "\"best_sa\"", "]", ".", "append", "(", "best_sa", ")", "\n", "all_result", "[", "\"train_loss\"", "]", ".", "append", "(", "loss", ")", "\n", "all_result", "[", "\"val_loss\"", "]", ".", "append", "(", "vloss", ")", "\n", "all_result", "[", "\"lr\"", "]", ".", "append", "(", "optimizer", ".", "state_dict", "(", ")", "[", "\"param_groups\"", "]", "[", "0", "]", "[", "\"lr\"", "]", ")", "\n", "\n", "save_checkpoint", "(", "\n", "{", "\n", "\"state\"", ":", "current_state", ",", "\n", "\"result\"", ":", "all_result", ",", "\n", "\"epoch\"", ":", "epoch", "+", "1", ",", "\n", "\"state_dict\"", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "\"best_sa\"", ":", "best_sa", ",", "\n", "\"optimizer\"", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "\"scheduler\"", ":", "scheduler", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "\n", "is_SA_best", "=", "is_best_sa", ",", "\n", "data_state", "=", "current_state", ",", "\n", "save_path", "=", "args", ".", "save_dir", ",", "\n", ")", "\n", "\n", "", "if", "wandb_logger", ":", "\n", "            ", "wandb_logger", ".", "log_metrics", "(", "all_result", ")", "\n", "\n", "", "val_pick_best_epoch", "=", "np", ".", "argmax", "(", "np", ".", "array", "(", "all_result", "[", "\"val_ta\"", "]", ")", ")", "\n", "print", "(", "\n", "\"* State = {} best SA = {} Epoch = {}\"", ".", "format", "(", "\n", "current_state", ",", "\n", "all_result", "[", "\"val_ta\"", "]", "[", "val_pick_best_epoch", "]", ",", "\n", "val_pick_best_epoch", "+", "1", ",", "\n", ")", "\n", ")", "\n", "\n", "all_result", "=", "{", "}", "\n", "all_result", "[", "\"train_ta\"", "]", "=", "[", "]", "\n", "all_result", "[", "\"val_ta\"", "]", "=", "[", "]", "\n", "all_result", "[", "\"best_sa\"", "]", "=", "[", "]", "\n", "all_result", "[", "\"gen_gap\"", "]", "=", "[", "]", "\n", "all_result", "[", "\"train_loss\"", "]", "=", "[", "]", "\n", "all_result", "[", "\"val_loss\"", "]", "=", "[", "]", "\n", "all_result", "[", "\"lr\"", "]", "=", "[", "]", "\n", "best_sa", "=", "0", "\n", "start_epoch", "=", "0", "\n", "best_checkpoint", "=", "torch", ".", "load", "(", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "\"{}model_SA_best.pth.tar\"", ".", "format", "(", "current_state", ")", ")", "\n", ")", "\n", "print", "(", "\"Loading Best Weight\"", ")", "\n", "model", ".", "load_state_dict", "(", "best_checkpoint", "[", "\"state_dict\"", "]", ")", "\n", "\n", "end_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "print", "(", "\"Total time elapsed: {:.4f}s\"", ".", "format", "(", "end_time", ")", ")", "\n", "time_list", ".", "append", "(", "end_time", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "\"restricted_imagenet\"", ":", "\n", "            ", "CER", ".", "append", "(", "evaluate_cer", "(", "model", ",", "args", ",", "test_loader", ")", ")", "\n", "", "else", ":", "\n", "            ", "CER", ".", "append", "(", "evaluate_cer", "(", "model", ",", "args", ")", ")", "\n", "", "if", "current_state", "!=", "1", ":", "\n", "            ", "diff", "=", "(", "CER", "[", "current_state", "-", "1", "]", "-", "CER", "[", "current_state", "-", "2", "]", ")", "/", "10000", "\n", "CER_diff", ".", "append", "(", "diff", ")", "\n", "print", "(", "\"CER diff = {}\"", ".", "format", "(", "diff", ")", ")", "\n", "\n", "# Reset LR to 0.1 after each state", "\n", "", "for", "g", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "g", "[", "\"lr\"", "]", "=", "0.1", "\n", "", "print", "(", "\"LR reset to 0.1\"", ")", "\n", "print", "(", "optimizer", ".", "state_dict", "(", ")", "[", "\"param_groups\"", "]", "[", "0", "]", "[", "\"lr\"", "]", ")", "\n", "\n", "", "test_tacc", "=", "validate", "(", "test_loader", ",", "model", ",", "criterion", ")", "\n", "wandb_logger", ".", "log_metrics", "(", "{", "\"Test/test_acc\"", ":", "test_tacc", "}", ")", "\n", "wandb_logger", ".", "log_metrics", "(", "{", "\"Test/CER\"", ":", "sum", "(", "CER", ")", "}", ")", "\n", "\n", "print", "(", "\"Test Acc = {}\"", ".", "format", "(", "test_tacc", ")", ")", "\n", "print", "(", "\"CER = {}\"", ".", "format", "(", "sum", "(", "CER", ")", ")", ")", "\n", "print", "(", "\"CER\"", ")", "\n", "print", "(", "CER", ")", "\n", "print", "(", "\"Final Test Accuracy: \"", ")", "\n", "print", "(", "test_tacc", ")", "\n", "print", "(", "\"Anytime Relative Error\"", ")", "\n", "print", "(", "CER_diff", ")", "\n", "print", "(", "\"Total time\"", ")", "\n", "print", "(", "time_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_baseline.train": [[362, 410], ["main_anytime_baseline.AverageMeter", "main_anytime_baseline.AverageMeter", "model.train", "time.time", "enumerate", "print", "image.clone().cuda.clone().cuda", "target.clone().cuda.clone().cuda", "model", "criterion", "optimizer.zero_grad", "loss.float.backward", "optimizer.step", "model.float", "loss.float.float", "main_anytime_baseline.AverageMeter.update", "main_anytime_baseline.AverageMeter.update", "main_anytime_baseline.warmup_lr", "main_anytime_baseline.accuracy", "loss.float.item", "image.clone().cuda.size", "prec1.item", "image.clone().cuda.size", "time.time", "print", "time.time", "image.clone().cuda.clone", "target.clone().cuda.clone", "len", "len"], "function", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.train", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.AverageMeter.update", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.AverageMeter.update", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.warmup_lr", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.accuracy"], ["", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ")", ":", "\n", "\n", "    ", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "image", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "\n", "        ", "if", "epoch", "<", "args", ".", "warmup", ":", "\n", "            ", "warmup_lr", "(", "epoch", ",", "i", "+", "1", ",", "optimizer", ",", "one_epoch_step", "=", "len", "(", "train_loader", ")", ")", "\n", "\n", "", "image", "=", "image", ".", "clone", "(", ")", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "clone", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "# compute output", "\n", "output_clean", "=", "model", "(", "image", ")", "\n", "loss", "=", "criterion", "(", "output_clean", ",", "target", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "output", "=", "output_clean", ".", "float", "(", ")", "\n", "loss", "=", "loss", ".", "float", "(", ")", "\n", "# measure accuracy and record loss", "\n", "prec1", "=", "accuracy", "(", "output", ".", "data", ",", "target", ")", "[", "0", "]", "\n", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "image", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "image", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "end", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\n", "\"Epoch: [{0}][{1}/{2}]\\t\"", "\n", "\"Loss {loss.val:.4f} ({loss.avg:.4f})\\t\"", "\n", "\"Accuracy {top1.val:.3f} ({top1.avg:.3f})\\t\"", "\n", "\"Time {3:.2f}\"", ".", "format", "(", "\n", "epoch", ",", "i", ",", "len", "(", "train_loader", ")", ",", "end", "-", "start", ",", "loss", "=", "losses", ",", "top1", "=", "top1", "\n", ")", "\n", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "", "print", "(", "\"train_accuracy {top1.avg:.3f}\"", ".", "format", "(", "top1", "=", "top1", ")", ")", "\n", "\n", "return", "top1", ".", "avg", ",", "losses", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_baseline.validate": [[412, 452], ["main_anytime_baseline.AverageMeter", "main_anytime_baseline.AverageMeter", "model.eval", "enumerate", "print", "image.clone().cuda.clone().cuda", "target.clone().cuda.clone().cuda", "model.float", "criterion.float", "main_anytime_baseline.AverageMeter.update", "main_anytime_baseline.AverageMeter.update", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "criterion", "main_anytime_baseline.accuracy", "criterion.item", "image.clone().cuda.size", "prec1.item", "image.clone().cuda.size", "print", "image.clone().cuda.clone", "target.clone().cuda.clone", "len"], "function", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.AverageMeter.update", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.AverageMeter.update", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.accuracy"], ["", "def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ")", ":", "\n", "    ", "\"\"\"\n    Run evaluation\n    \"\"\"", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "for", "i", ",", "(", "image", ",", "target", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "\n", "        ", "image", "=", "image", ".", "clone", "(", ")", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "clone", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "# compute output", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", "=", "model", "(", "image", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "", "output", "=", "output", ".", "float", "(", ")", "\n", "loss", "=", "loss", ".", "float", "(", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "prec1", "=", "accuracy", "(", "output", ".", "data", ",", "target", ")", "[", "0", "]", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "image", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "image", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "print", "(", "\n", "\"Test: [{0}/{1}]\\t\"", "\n", "\"Loss {loss.val:.4f} ({loss.avg:.4f})\\t\"", "\n", "\"Accuracy {top1.val:.3f} ({top1.avg:.3f})\"", ".", "format", "(", "\n", "i", ",", "len", "(", "val_loader", ")", ",", "loss", "=", "losses", ",", "top1", "=", "top1", "\n", ")", "\n", ")", "\n", "\n", "", "", "print", "(", "\"valid_accuracy {top1.avg:.3f}\"", ".", "format", "(", "top1", "=", "top1", ")", ")", "\n", "\n", "return", "top1", ".", "avg", ",", "losses", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_baseline.save_checkpoint": [[454, 463], ["os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "shutil.copyfile", "str", "os.path.join"], "function", ["None"], ["", "def", "save_checkpoint", "(", "\n", "state", ",", "is_SA_best", ",", "data_state", ",", "save_path", ",", "filename", "=", "\"checkpoint.pth.tar\"", "\n", ")", ":", "\n", "    ", "filepath", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "str", "(", "data_state", ")", "+", "filename", ")", "\n", "torch", ".", "save", "(", "state", ",", "filepath", ")", "\n", "if", "is_SA_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "\n", "filepath", ",", "\n", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"{}model_SA_best.pth.tar\"", ".", "format", "(", "data_state", ")", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_baseline.warmup_lr": [[466, 476], ["min"], "function", ["None"], ["", "", "def", "warmup_lr", "(", "epoch", ",", "step", ",", "optimizer", ",", "one_epoch_step", ")", ":", "\n", "\n", "    ", "overall_steps", "=", "args", ".", "warmup", "*", "one_epoch_step", "\n", "current_steps", "=", "epoch", "*", "one_epoch_step", "+", "step", "\n", "\n", "lr", "=", "args", ".", "lr", "*", "current_steps", "/", "overall_steps", "\n", "lr", "=", "min", "(", "lr", ",", "args", ".", "lr", ")", "\n", "\n", "for", "p", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "p", "[", "\"lr\"", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_baseline.accuracy": [[497, 511], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_baseline.setup_seed": [[513, 520], ["print", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed"], "function", ["None"], ["", "def", "setup_seed", "(", "seed", ")", ":", "\n", "    ", "print", "(", "\"setup random seed = {}\"", ".", "format", "(", "seed", ")", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.dataset.to_few_shot": [[28, 70], ["enumerate", "sorted", "min", "min", "torch.cat", "isinstance", "len", "labels_dict[].append", "torch.tensor", "labels_dict.items"], "function", ["None"], ["def", "to_few_shot", "(", "dataset", ",", "n_shots", "=", "10", ")", ":", "\n", "    ", "\"\"\"\n    Transforms torchvision dataset to a few-shot dataset.\n    :param dataset: torchvision dataset\n    :param n_shots: number of samples per class\n    :return: few-shot torchvision dataset\n    \"\"\"", "\n", "try", ":", "\n", "        ", "targets", "=", "dataset", ".", "targets", "# targets or labels depending on the dataset", "\n", "is_targets", "=", "True", "\n", "", "except", ":", "\n", "        ", "targets", "=", "dataset", ".", "labels", "\n", "is_targets", "=", "False", "\n", "\n", "", "assert", "min", "(", "targets", ")", "==", "0", ",", "\"labels should start from 0, not from {}\"", ".", "format", "(", "\n", "min", "(", "targets", ")", "\n", ")", "\n", "\n", "# Find n_shots samples for each class", "\n", "labels_dict", "=", "{", "}", "\n", "imgs", "=", "dataset", ".", "imgs", "\n", "for", "i", ",", "lbl", "in", "enumerate", "(", "imgs", ")", ":", "\n", "        ", "if", "lbl", "[", "1", "]", "not", "in", "labels_dict", ":", "\n", "            ", "labels_dict", "[", "lbl", "[", "1", "]", "]", "=", "[", "]", "\n", "", "if", "len", "(", "labels_dict", "[", "lbl", "[", "1", "]", "]", ")", "<", "n_shots", ":", "\n", "            ", "labels_dict", "[", "lbl", "[", "1", "]", "]", ".", "append", "(", "i", ")", "\n", "\n", "", "", "idx", "=", "sorted", "(", "\n", "torch", ".", "cat", "(", "[", "torch", ".", "tensor", "(", "v", ")", "for", "k", ",", "v", "in", "labels_dict", ".", "items", "(", ")", "]", ")", "\n", ")", "# sort according to the original order in the full dataset", "\n", "dataset", ".", "imgs", "=", "(", "\n", "[", "dataset", ".", "imgs", "[", "i", "]", "for", "i", "in", "idx", "]", "\n", "if", "isinstance", "(", "dataset", ".", "imgs", ",", "list", ")", "\n", "else", "dataset", ".", "imgs", "[", "idx", "]", "\n", ")", "\n", "targets", "=", "[", "imgs", "[", "i", "]", "[", "1", "]", "for", "i", "in", "idx", "]", "\n", "if", "is_targets", ":", "\n", "        ", "dataset", ".", "targets", "=", "targets", "\n", "", "else", ":", "\n", "        ", "dataset", ".", "labels", "=", "targets", "\n", "\n", "", "return", "dataset", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.dataset.Setup_RestrictedImageNet": [[72, 82], ["robustness.datasets.RestrictedImageNetBalanced", "robustness.datasets.RestrictedImageNetBalanced.make_loaders", "print", "dataset.to_few_shot"], "function", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.dataset.to_few_shot"], ["", "def", "Setup_RestrictedImageNet", "(", "args", ",", "path", ")", ":", "\n", "    ", "ds", "=", "RestrictedImageNetBalanced", "(", "path", ")", "\n", "\n", "train_set", ",", "test_set", "=", "ds", ".", "make_loaders", "(", "batch_size", "=", "128", ",", "workers", "=", "8", ")", "\n", "\n", "if", "args", ".", "few_shot", ":", "\n", "        ", "print", "(", "\"Few Shot Regime Train Data Loading \"", ")", "\n", "train_set", "=", "to_few_shot", "(", "train_set", ",", "n_shots", "=", "args", ".", "n_shots", ")", "\n", "\n", "", "return", "train_set", ",", "test_set", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.dataset.generate_anytime_res_img_dataloader_few": [[84, 191], ["int", "print", "torch.utils.data.Subset", "torch.utils.data.Subset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "list", "list", "list", "torch.utils.data.Subset", "int", "torch.utils.data.Subset", "int", "torch.utils.data.Subset", "range", "range", "len", "len", "range", "list", "list", "list", "list", "list", "list", "list", "list", "list.extend", "list.extend", "random.sample", "random.sample", "buffer_train_set.extend", "buffer_val_set.extend", "list", "list", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range"], "function", ["None"], ["", "def", "generate_anytime_res_img_dataloader_few", "(", "\n", "args", ",", "whole_trainset", ",", "test_set", ",", "sample_len", ",", "state", "=", "1", "\n", ")", ":", "\n", "\n", "    ", "meta_train_size", "=", "int", "(", "args", ".", "meta_batch_size", "*", "0.9", ")", "# 29839#", "\n", "meta_val_size", "=", "args", ".", "meta_batch_size", "-", "meta_train_size", "# 500", "\n", "\n", "if", "args", ".", "no_replay", ":", "\n", "        ", "train_list", "=", "list", "(", "range", "(", "(", "state", "-", "1", ")", "*", "meta_train_size", ",", "state", "*", "meta_train_size", ")", ")", "\n", "val_list", "=", "list", "(", "\n", "range", "(", "\n", "sample_len", "+", "(", "state", "-", "1", ")", "*", "meta_val_size", ",", "\n", "sample_len", "+", "state", "*", "meta_val_size", ",", "\n", ")", "\n", ")", "\n", "", "elif", "args", ".", "one_replay", ":", "\n", "        ", "if", "state", "==", "1", ":", "\n", "            ", "train_list", "=", "list", "(", "\n", "range", "(", "(", "state", "-", "1", ")", "*", "meta_train_size", ",", "state", "*", "meta_train_size", ")", "\n", ")", "\n", "val_list", "=", "list", "(", "\n", "range", "(", "\n", "sample_len", "+", "(", "state", "-", "1", ")", "*", "meta_val_size", ",", "\n", "sample_len", "+", "state", "*", "meta_val_size", ",", "\n", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "train_list", "=", "list", "(", "\n", "range", "(", "(", "state", "-", "2", ")", "*", "meta_train_size", ",", "state", "*", "meta_train_size", ")", "\n", ")", "\n", "val_list", "=", "list", "(", "\n", "range", "(", "\n", "sample_len", "+", "(", "state", "-", "2", ")", "*", "meta_val_size", ",", "\n", "sample_len", "+", "state", "*", "meta_val_size", ",", "\n", ")", "\n", ")", "\n", "", "", "elif", "args", ".", "buffer_replay", ":", "\n", "        ", "k", "=", "args", ".", "buffer_size_train", "\n", "l", "=", "args", ".", "buffer_size_val", "\n", "\n", "train_list", "=", "list", "(", "range", "(", "(", "state", "-", "1", ")", "*", "meta_train_size", ",", "state", "*", "meta_train_size", ")", ")", "\n", "val_list", "=", "list", "(", "\n", "range", "(", "\n", "sample_len", "+", "(", "state", "-", "1", ")", "*", "meta_val_size", ",", "\n", "sample_len", "+", "state", "*", "meta_val_size", ",", "\n", ")", "\n", ")", "\n", "\n", "train_list", ".", "extend", "(", "buffer_train_set", ")", "\n", "val_list", ".", "extend", "(", "buffer_val_set", ")", "\n", "\n", "# Populating Buffer", "\n", "train_sampled_set", "=", "random", ".", "sample", "(", "train_list", ",", "k", ")", "\n", "valid_sampled_set", "=", "random", ".", "sample", "(", "val_list", ",", "l", ")", "\n", "\n", "buffer_train_set", ".", "extend", "(", "train_sampled_set", ")", "\n", "buffer_val_set", ".", "extend", "(", "valid_sampled_set", ")", "\n", "\n", "", "else", ":", "\n", "        ", "train_list", "=", "list", "(", "range", "(", "0", ",", "state", "*", "meta_train_size", ")", ")", "# 0 45000", "\n", "val_list", "=", "list", "(", "\n", "range", "(", "sample_len", ",", "sample_len", "+", "state", "*", "meta_val_size", ")", "\n", ")", "# 45000 500", "\n", "\n", "", "print", "(", "\n", "\"Current: Trainset size = {}, Valset size = {}\"", ".", "format", "(", "\n", "len", "(", "train_list", ")", ",", "len", "(", "val_list", ")", "\n", ")", "\n", ")", "\n", "\n", "train_set", "=", "Subset", "(", "whole_trainset", ",", "train_list", ")", "\n", "val_set", "=", "Subset", "(", "whole_trainset", ",", "val_list", ")", "\n", "\n", "if", "args", ".", "snip_no_replay", ":", "\n", "        ", "train_list_norep", "=", "list", "(", "\n", "range", "(", "(", "state", "-", "1", ")", "*", "meta_train_size", ",", "state", "*", "meta_train_size", ")", "\n", ")", "\n", "train_set_norep", "=", "Subset", "(", "whole_trainset", ",", "train_list_norep", ")", "\n", "snip_set", "=", "int", "(", "args", ".", "meta_batch_size", "*", "args", ".", "snip_size", ")", "\n", "train_snip_set", "=", "Subset", "(", "train_set_norep", ",", "list", "(", "range", "(", "snip_set", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "snip_set", "=", "int", "(", "args", ".", "meta_batch_size", "*", "args", ".", "snip_size", ")", "\n", "train_snip_set", "=", "Subset", "(", "train_set", ",", "list", "(", "range", "(", "snip_set", ")", ")", ")", "\n", "\n", "", "train_loader", "=", "DataLoader", "(", "\n", "train_set", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "val_loader", "=", "DataLoader", "(", "\n", "val_set", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "test_loader", "=", "DataLoader", "(", "\n", "test_set", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "\n", "return", "train_loader", ",", "val_loader", ",", "test_loader", ",", "train_snip_set", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.dataset.generate_anytime_res_img_dataloader": [[193, 300], ["int", "print", "torch.utils.data.Subset", "torch.utils.data.Subset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "list", "list", "list", "torch.utils.data.Subset", "int", "torch.utils.data.Subset", "int", "torch.utils.data.Subset", "range", "range", "len", "len", "range", "list", "list", "list", "list", "list", "list", "list", "list", "list.extend", "list.extend", "random.sample", "random.sample", "buffer_train_set.extend", "buffer_val_set.extend", "list", "list", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range"], "function", ["None"], ["", "def", "generate_anytime_res_img_dataloader", "(", "\n", "args", ",", "whole_trainset", ",", "test_set", ",", "sample_len", ",", "state", "=", "1", "\n", ")", ":", "\n", "\n", "    ", "meta_train_size", "=", "int", "(", "args", ".", "meta_batch_size", "*", "0.9", ")", "# 29839#", "\n", "meta_val_size", "=", "args", ".", "meta_batch_size", "-", "meta_train_size", "# 500", "\n", "\n", "if", "args", ".", "no_replay", ":", "\n", "        ", "train_list", "=", "list", "(", "range", "(", "(", "state", "-", "1", ")", "*", "meta_train_size", ",", "state", "*", "meta_train_size", ")", ")", "\n", "val_list", "=", "list", "(", "\n", "range", "(", "\n", "sample_len", "+", "(", "state", "-", "1", ")", "*", "meta_val_size", ",", "\n", "sample_len", "+", "state", "*", "meta_val_size", ",", "\n", ")", "\n", ")", "\n", "", "elif", "args", ".", "one_replay", ":", "\n", "        ", "if", "state", "==", "1", ":", "\n", "            ", "train_list", "=", "list", "(", "\n", "range", "(", "(", "state", "-", "1", ")", "*", "meta_train_size", ",", "state", "*", "meta_train_size", ")", "\n", ")", "\n", "val_list", "=", "list", "(", "\n", "range", "(", "\n", "sample_len", "+", "(", "state", "-", "1", ")", "*", "meta_val_size", ",", "\n", "sample_len", "+", "state", "*", "meta_val_size", ",", "\n", ")", "\n", ")", "\n", "", "else", ":", "# 0-1, 1-2,2-3,3-4,4-5", "\n", "            ", "train_list", "=", "list", "(", "\n", "range", "(", "(", "state", "-", "2", ")", "*", "meta_train_size", ",", "state", "*", "meta_train_size", ")", "\n", ")", "\n", "val_list", "=", "list", "(", "\n", "range", "(", "\n", "sample_len", "+", "(", "state", "-", "2", ")", "*", "meta_val_size", ",", "\n", "sample_len", "+", "state", "*", "meta_val_size", ",", "\n", ")", "\n", ")", "\n", "", "", "elif", "args", ".", "buffer_replay", ":", "\n", "        ", "k", "=", "args", ".", "buffer_size_train", "\n", "l", "=", "args", ".", "buffer_size_val", "\n", "\n", "train_list", "=", "list", "(", "range", "(", "(", "state", "-", "1", ")", "*", "meta_train_size", ",", "state", "*", "meta_train_size", ")", ")", "\n", "val_list", "=", "list", "(", "\n", "range", "(", "\n", "sample_len", "+", "(", "state", "-", "1", ")", "*", "meta_val_size", ",", "\n", "sample_len", "+", "state", "*", "meta_val_size", ",", "\n", ")", "\n", ")", "\n", "\n", "train_list", ".", "extend", "(", "buffer_train_set", ")", "\n", "val_list", ".", "extend", "(", "buffer_val_set", ")", "\n", "\n", "# Populating Buffer", "\n", "train_sampled_set", "=", "random", ".", "sample", "(", "train_list", ",", "k", ")", "\n", "valid_sampled_set", "=", "random", ".", "sample", "(", "val_list", ",", "l", ")", "\n", "\n", "buffer_train_set", ".", "extend", "(", "train_sampled_set", ")", "\n", "buffer_val_set", ".", "extend", "(", "valid_sampled_set", ")", "\n", "\n", "", "else", ":", "\n", "        ", "train_list", "=", "list", "(", "range", "(", "0", ",", "state", "*", "meta_train_size", ")", ")", "# 0 45000", "\n", "val_list", "=", "list", "(", "\n", "range", "(", "sample_len", ",", "sample_len", "+", "state", "*", "meta_val_size", ")", "\n", ")", "# 45000 500", "\n", "\n", "", "print", "(", "\n", "\"Current: Trainset size = {}, Valset size = {}\"", ".", "format", "(", "\n", "len", "(", "train_list", ")", ",", "len", "(", "val_list", ")", "\n", ")", "\n", ")", "\n", "\n", "train_set", "=", "Subset", "(", "whole_trainset", ",", "train_list", ")", "\n", "val_set", "=", "Subset", "(", "whole_trainset", ",", "val_list", ")", "\n", "\n", "if", "args", ".", "snip_no_replay", ":", "\n", "        ", "train_list_norep", "=", "list", "(", "\n", "range", "(", "(", "state", "-", "1", ")", "*", "meta_train_size", ",", "state", "*", "meta_train_size", ")", "\n", ")", "\n", "train_set_norep", "=", "Subset", "(", "whole_trainset", ",", "train_list_norep", ")", "\n", "snip_set", "=", "int", "(", "args", ".", "meta_batch_size", "*", "args", ".", "snip_size", ")", "\n", "train_snip_set", "=", "Subset", "(", "train_set_norep", ",", "list", "(", "range", "(", "snip_set", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "snip_set", "=", "int", "(", "args", ".", "meta_batch_size", "*", "args", ".", "snip_size", ")", "\n", "train_snip_set", "=", "Subset", "(", "train_set", ",", "list", "(", "range", "(", "snip_set", ")", ")", ")", "\n", "\n", "", "train_loader", "=", "DataLoader", "(", "\n", "train_set", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "val_loader", "=", "DataLoader", "(", "\n", "val_set", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "test_loader", "=", "DataLoader", "(", "\n", "test_set", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "\n", "return", "train_loader", ",", "val_loader", ",", "test_loader", ",", "train_snip_set", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.dataset.cifar10_dataloaders": [[302, 357], ["torchvision.transforms.Compose", "torchvision.transforms.Compose", "print", "print", "print", "torch.utils.data.Subset", "torch.utils.data.Subset", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.datasets.CIFAR10", "list", "torchvision.datasets.CIFAR10", "list", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "range", "range"], "function", ["None"], ["", "def", "cifar10_dataloaders", "(", "batch_size", "=", "128", ",", "data_dir", "=", "\"datasets/cifar10\"", ",", "num_workers", "=", "2", ")", ":", "\n", "\n", "    ", "train_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "print", "(", "\n", "\"Dataset information: CIFAR-10\\t 45000 images for training \\t 500 images for validation\\t\"", "\n", ")", "\n", "print", "(", "\"10000 images for testing\\t no normalize applied in data_transform\"", ")", "\n", "print", "(", "\"Data augmentation = randomcrop(32,4) + randomhorizontalflip\"", ")", "\n", "\n", "train_set", "=", "Subset", "(", "\n", "CIFAR10", "(", "data_dir", ",", "train", "=", "True", ",", "transform", "=", "train_transform", ",", "download", "=", "True", ")", ",", "\n", "list", "(", "range", "(", "45000", ")", ")", ",", "\n", ")", "\n", "val_set", "=", "Subset", "(", "\n", "CIFAR10", "(", "data_dir", ",", "train", "=", "True", ",", "transform", "=", "test_transform", ",", "download", "=", "True", ")", ",", "\n", "list", "(", "range", "(", "45000", ",", "50000", ")", ")", ",", "\n", ")", "\n", "test_set", "=", "CIFAR10", "(", "data_dir", ",", "train", "=", "False", ",", "transform", "=", "test_transform", ",", "download", "=", "True", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "\n", "train_set", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "val_loader", "=", "DataLoader", "(", "\n", "val_set", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "test_loader", "=", "DataLoader", "(", "\n", "test_set", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "\n", "return", "train_loader", ",", "val_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.dataset.cifar100_dataloaders": [[359, 414], ["torchvision.transforms.Compose", "torchvision.transforms.Compose", "print", "print", "print", "torch.utils.data.Subset", "torch.utils.data.Subset", "torchvision.datasets.CIFAR100", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torchvision.datasets.CIFAR100", "list", "torchvision.datasets.CIFAR100", "list", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "torchvision.transforms.ToTensor", "range", "range"], "function", ["None"], ["", "def", "cifar100_dataloaders", "(", "batch_size", "=", "128", ",", "data_dir", "=", "\"datasets/cifar100\"", ",", "num_workers", "=", "2", ")", ":", "\n", "\n", "    ", "train_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "print", "(", "\n", "\"Dataset information: CIFAR-100\\t 45000 images for training \\t 500 images for validation\\t\"", "\n", ")", "\n", "print", "(", "\"10000 images for testing\\t no normalize applied in data_transform\"", ")", "\n", "print", "(", "\"Data augmentation = randomcrop(32,4) + randomhorizontalflip\"", ")", "\n", "\n", "train_set", "=", "Subset", "(", "\n", "CIFAR100", "(", "data_dir", ",", "train", "=", "True", ",", "transform", "=", "train_transform", ",", "download", "=", "True", ")", ",", "\n", "list", "(", "range", "(", "45000", ")", ")", ",", "\n", ")", "\n", "val_set", "=", "Subset", "(", "\n", "CIFAR100", "(", "data_dir", ",", "train", "=", "True", ",", "transform", "=", "test_transform", ",", "download", "=", "True", ")", ",", "\n", "list", "(", "range", "(", "45000", ",", "50000", ")", ")", ",", "\n", ")", "\n", "test_set", "=", "CIFAR100", "(", "data_dir", ",", "train", "=", "False", ",", "transform", "=", "test_transform", ",", "download", "=", "True", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "\n", "train_set", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "val_loader", "=", "DataLoader", "(", "\n", "val_set", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "test_loader", "=", "DataLoader", "(", "\n", "test_set", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "\n", "return", "train_loader", ",", "val_loader", ",", "test_loader", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.dataset.setup__cifar10_dataset": [[416, 429], ["torchvision.transforms.Compose", "torchvision.datasets.CIFAR10", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "def", "setup__cifar10_dataset", "(", "args", ")", ":", "\n", "    ", "train_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "whole_trainset", "=", "CIFAR10", "(", "\n", "args", ".", "data", ",", "train", "=", "True", ",", "transform", "=", "train_transform", ",", "download", "=", "True", "\n", ")", "\n", "return", "whole_trainset", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.dataset.setup__cifar10_dataset_end": [[431, 449], ["torchvision.transforms.Compose", "torchvision.datasets.CIFAR10", "list", "torch.utils.data.Subset", "torch.utils.data.Subset", "range", "list", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor", "range"], "function", ["None"], ["", "def", "setup__cifar10_dataset_end", "(", "args", ")", ":", "\n", "    ", "train_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "whole_trainset", "=", "CIFAR10", "(", "\n", "args", ".", "data", ",", "train", "=", "True", ",", "transform", "=", "train_transform", ",", "download", "=", "True", "\n", ")", "\n", "# 50,000 -200 = 49800", "\n", "end_list", "=", "list", "(", "range", "(", "49800", ",", "50000", ")", ")", "\n", "sub_whole_trainset", "=", "Subset", "(", "whole_trainset", ",", "list", "(", "range", "(", "49800", ")", ")", ")", "\n", "end_trainset", "=", "Subset", "(", "whole_trainset", ",", "end_list", ")", "\n", "\n", "return", "sub_whole_trainset", ",", "end_trainset", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.dataset.generate_anytime_cifar10_dataloader_end": [[451, 515], ["torchvision.transforms.Compose", "int", "print", "torch.utils.data.Subset", "torch.utils.data.Subset", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "list", "list", "list", "list", "list", "torch.utils.data.Subset", "int", "torch.utils.data.Subset", "int", "torch.utils.data.Subset", "torchvision.transforms.ToTensor", "range", "range", "range", "range", "len", "len", "range", "list", "list", "range", "range"], "function", ["None"], ["", "def", "generate_anytime_cifar10_dataloader_end", "(", "args", ",", "whole_trainset", ",", "state", "=", "1", ")", ":", "\n", "\n", "    ", "test_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", "\n", ")", "\n", "# 45000-200 = 49800 , 49800-623", "\n", "meta_train_size", "=", "int", "(", "args", ".", "meta_batch_size", "*", "0.9", ")", "#  #5602", "\n", "meta_val_size", "=", "args", ".", "meta_batch_size", "-", "meta_train_size", "# 623", "\n", "\n", "if", "args", ".", "no_replay", ":", "\n", "        ", "train_list", "=", "list", "(", "range", "(", "(", "state", "-", "1", ")", "*", "meta_train_size", ",", "state", "*", "meta_train_size", ")", ")", "\n", "val_list", "=", "list", "(", "\n", "range", "(", "44816", "+", "(", "state", "-", "1", ")", "*", "meta_val_size", ",", "44816", "+", "state", "*", "meta_val_size", ")", "\n", ")", "\n", "", "else", ":", "\n", "        ", "train_list", "=", "list", "(", "range", "(", "0", ",", "state", "*", "meta_train_size", ")", ")", "# 0 44816", "\n", "val_list", "=", "list", "(", "range", "(", "44816", ",", "44816", "+", "state", "*", "meta_val_size", ")", ")", "# 45000 500", "\n", "\n", "", "print", "(", "\n", "\"Current: Trainset size = {}, Valset size = {}\"", ".", "format", "(", "\n", "len", "(", "train_list", ")", ",", "len", "(", "val_list", ")", "\n", ")", "\n", ")", "\n", "\n", "train_set", "=", "Subset", "(", "whole_trainset", ",", "train_list", ")", "\n", "val_set", "=", "Subset", "(", "whole_trainset", ",", "val_list", ")", "\n", "test_set", "=", "CIFAR10", "(", "args", ".", "data", ",", "train", "=", "False", ",", "transform", "=", "test_transform", ",", "download", "=", "True", ")", "\n", "\n", "if", "args", ".", "snip_no_replay", ":", "\n", "        ", "train_list_norep", "=", "list", "(", "\n", "range", "(", "(", "state", "-", "1", ")", "*", "meta_train_size", ",", "state", "*", "meta_train_size", ")", "\n", ")", "\n", "train_set_norep", "=", "Subset", "(", "whole_trainset", ",", "train_list_norep", ")", "\n", "snip_set", "=", "int", "(", "args", ".", "meta_batch_size", "*", "args", ".", "snip_size", ")", "\n", "train_snip_set", "=", "Subset", "(", "train_set_norep", ",", "list", "(", "range", "(", "snip_set", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "snip_set", "=", "int", "(", "args", ".", "meta_batch_size", "*", "args", ".", "snip_size", ")", "\n", "train_snip_set", "=", "Subset", "(", "train_set", ",", "list", "(", "range", "(", "snip_set", ")", ")", ")", "\n", "\n", "", "train_loader", "=", "DataLoader", "(", "\n", "train_set", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "val_loader", "=", "DataLoader", "(", "\n", "val_set", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "test_loader", "=", "DataLoader", "(", "\n", "test_set", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "\n", "return", "train_loader", ",", "val_loader", ",", "test_loader", ",", "train_snip_set", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.dataset.generate_anytime_cifar10_dataloader": [[521, 623], ["torchvision.transforms.Compose", "int", "print", "torch.utils.data.Subset", "torch.utils.data.Subset", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "list", "list", "list", "torch.utils.data.Subset", "int", "torch.utils.data.Subset", "int", "torch.utils.data.Subset", "torchvision.transforms.ToTensor", "range", "range", "len", "len", "range", "list", "list", "list", "list", "list", "list", "list", "list", "list.extend", "list.extend", "random.sample", "random.sample", "buffer_train_set.extend", "buffer_val_set.extend", "list", "list", "range", "range", "range", "range", "range", "range", "range", "range", "range", "range"], "function", ["None"], ["def", "generate_anytime_cifar10_dataloader", "(", "args", ",", "whole_trainset", ",", "state", "=", "1", ")", ":", "\n", "\n", "    ", "test_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "meta_train_size", "=", "int", "(", "args", ".", "meta_batch_size", "*", "0.9", ")", "# 4500 #", "\n", "meta_val_size", "=", "args", ".", "meta_batch_size", "-", "meta_train_size", "# 500", "\n", "\n", "if", "args", ".", "no_replay", ":", "\n", "        ", "train_list", "=", "list", "(", "range", "(", "(", "state", "-", "1", ")", "*", "meta_train_size", ",", "state", "*", "meta_train_size", ")", ")", "\n", "val_list", "=", "list", "(", "\n", "range", "(", "45000", "+", "(", "state", "-", "1", ")", "*", "meta_val_size", ",", "45000", "+", "state", "*", "meta_val_size", ")", "\n", ")", "\n", "", "elif", "args", ".", "one_replay", ":", "\n", "        ", "if", "state", "==", "1", ":", "\n", "            ", "train_list", "=", "list", "(", "\n", "range", "(", "(", "state", "-", "1", ")", "*", "meta_train_size", ",", "state", "*", "meta_train_size", ")", "\n", ")", "\n", "val_list", "=", "list", "(", "\n", "range", "(", "\n", "45000", "+", "(", "state", "-", "1", ")", "*", "meta_val_size", ",", "45000", "+", "state", "*", "meta_val_size", "\n", ")", "\n", ")", "\n", "", "else", ":", "# 0-1, 1-2,2-3,3-4,4-5", "\n", "            ", "train_list", "=", "list", "(", "\n", "range", "(", "(", "state", "-", "2", ")", "*", "meta_train_size", ",", "state", "*", "meta_train_size", ")", "\n", ")", "\n", "val_list", "=", "list", "(", "\n", "range", "(", "\n", "45000", "+", "(", "state", "-", "2", ")", "*", "meta_val_size", ",", "45000", "+", "state", "*", "meta_val_size", "\n", ")", "\n", ")", "\n", "", "", "elif", "args", ".", "buffer_replay", ":", "\n", "        ", "k", "=", "args", ".", "buffer_size_train", "\n", "l", "=", "args", ".", "buffer_size_val", "\n", "\n", "train_list", "=", "list", "(", "range", "(", "(", "state", "-", "1", ")", "*", "meta_train_size", ",", "state", "*", "meta_train_size", ")", ")", "\n", "val_list", "=", "list", "(", "\n", "range", "(", "45000", "+", "(", "state", "-", "1", ")", "*", "meta_val_size", ",", "45000", "+", "state", "*", "meta_val_size", ")", "\n", ")", "\n", "\n", "train_list", ".", "extend", "(", "buffer_train_set", ")", "\n", "val_list", ".", "extend", "(", "buffer_val_set", ")", "\n", "\n", "# Populating Buffer", "\n", "train_sampled_set", "=", "random", ".", "sample", "(", "train_list", ",", "k", ")", "\n", "valid_sampled_set", "=", "random", ".", "sample", "(", "val_list", ",", "l", ")", "\n", "\n", "buffer_train_set", ".", "extend", "(", "train_sampled_set", ")", "\n", "buffer_val_set", ".", "extend", "(", "valid_sampled_set", ")", "\n", "\n", "", "else", ":", "\n", "        ", "train_list", "=", "list", "(", "range", "(", "0", ",", "state", "*", "meta_train_size", ")", ")", "# 0 45000", "\n", "val_list", "=", "list", "(", "range", "(", "45000", ",", "45000", "+", "state", "*", "meta_val_size", ")", ")", "# 45000 500", "\n", "\n", "", "print", "(", "\n", "\"Current: Trainset size = {}, Valset size = {}\"", ".", "format", "(", "\n", "len", "(", "train_list", ")", ",", "len", "(", "val_list", ")", "\n", ")", "\n", ")", "\n", "\n", "train_set", "=", "Subset", "(", "whole_trainset", ",", "train_list", ")", "\n", "val_set", "=", "Subset", "(", "whole_trainset", ",", "val_list", ")", "\n", "test_set", "=", "CIFAR10", "(", "args", ".", "data", ",", "train", "=", "False", ",", "transform", "=", "test_transform", ",", "download", "=", "True", ")", "\n", "\n", "if", "args", ".", "snip_no_replay", ":", "\n", "        ", "train_list_norep", "=", "list", "(", "\n", "range", "(", "(", "state", "-", "1", ")", "*", "meta_train_size", ",", "state", "*", "meta_train_size", ")", "\n", ")", "\n", "train_set_norep", "=", "Subset", "(", "whole_trainset", ",", "train_list_norep", ")", "\n", "snip_set", "=", "int", "(", "args", ".", "meta_batch_size", "*", "args", ".", "snip_size", ")", "\n", "train_snip_set", "=", "Subset", "(", "train_set_norep", ",", "list", "(", "range", "(", "snip_set", ")", ")", ")", "\n", "", "else", ":", "\n", "        ", "snip_set", "=", "int", "(", "args", ".", "meta_batch_size", "*", "args", ".", "snip_size", ")", "\n", "train_snip_set", "=", "Subset", "(", "train_set", ",", "list", "(", "range", "(", "snip_set", ")", ")", ")", "\n", "\n", "", "train_loader", "=", "DataLoader", "(", "\n", "train_set", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "val_loader", "=", "DataLoader", "(", "\n", "val_set", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "test_loader", "=", "DataLoader", "(", "\n", "test_set", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "\n", "return", "train_loader", ",", "val_loader", ",", "test_loader", ",", "train_snip_set", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.dataset.setup__cifar100_dataset": [[625, 644], ["torchvision.transforms.Compose", "print", "print", "print", "torchvision.datasets.CIFAR100", "torchvision.transforms.RandomCrop", "torchvision.transforms.RandomHorizontalFlip", "torchvision.transforms.ToTensor"], "function", ["None"], ["", "def", "setup__cifar100_dataset", "(", "args", ")", ":", "\n", "    ", "train_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "RandomCrop", "(", "32", ",", "padding", "=", "4", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", "\n", ")", "\n", "print", "(", "\n", "\"Dataset information: CIFAR-100\\t 45000 images for training \\t 500 images for validation\\t\"", "\n", ")", "\n", "print", "(", "\"10000 images for testing\\t no normalize applied in data_transform\"", ")", "\n", "print", "(", "\"Data augmentation = randomcrop(32,4) + randomhorizontalflip\"", ")", "\n", "\n", "whole_trainset", "=", "CIFAR100", "(", "\n", "args", ".", "data", ",", "train", "=", "True", ",", "transform", "=", "train_transform", ",", "download", "=", "True", "\n", ")", "\n", "\n", "return", "whole_trainset", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.dataset.generate_anytime_cifar100_dataloader": [[646, 703], ["torchvision.transforms.Compose", "int", "print", "torch.utils.data.Subset", "torch.utils.data.Subset", "torchvision.datasets.CIFAR100", "int", "torch.utils.data.Subset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "list", "list", "list", "list", "list", "torchvision.transforms.ToTensor", "range", "range", "range", "range", "len", "len", "range"], "function", ["None"], ["", "def", "generate_anytime_cifar100_dataloader", "(", "args", ",", "whole_trainset", ",", "state", "=", "1", ")", ":", "\n", "\n", "    ", "test_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", "\n", ")", "\n", "\n", "meta_train_size", "=", "int", "(", "args", ".", "meta_batch_size", "*", "0.9", ")", "# 4500", "\n", "meta_val_size", "=", "args", ".", "meta_batch_size", "-", "meta_train_size", "# 500", "\n", "\n", "if", "args", ".", "no_replay", ":", "\n", "        ", "train_list", "=", "list", "(", "range", "(", "(", "state", "-", "1", ")", "*", "meta_train_size", ",", "state", "*", "meta_train_size", ")", ")", "\n", "val_list", "=", "list", "(", "\n", "range", "(", "45000", "+", "(", "state", "-", "1", ")", "*", "meta_val_size", ",", "45000", "+", "state", "*", "meta_val_size", ")", "\n", ")", "\n", "", "else", ":", "\n", "        ", "train_list", "=", "list", "(", "range", "(", "0", ",", "state", "*", "meta_train_size", ")", ")", "# 0 45000", "\n", "val_list", "=", "list", "(", "range", "(", "45000", ",", "45000", "+", "state", "*", "meta_val_size", ")", ")", "# 45000 500", "\n", "\n", "", "print", "(", "\n", "\"Current: Trainset size = {}, Valset size = {}\"", ".", "format", "(", "\n", "len", "(", "train_list", ")", ",", "len", "(", "val_list", ")", "\n", ")", "\n", ")", "\n", "\n", "train_set", "=", "Subset", "(", "whole_trainset", ",", "train_list", ")", "\n", "val_set", "=", "Subset", "(", "whole_trainset", ",", "val_list", ")", "\n", "\n", "test_set", "=", "CIFAR100", "(", "args", ".", "data", ",", "train", "=", "False", ",", "transform", "=", "test_transform", ",", "download", "=", "True", ")", "\n", "\n", "snip_set", "=", "int", "(", "args", ".", "meta_batch_size", "*", "args", ".", "snip_size", ")", "\n", "train_snip_set", "=", "Subset", "(", "train_set", ",", "list", "(", "range", "(", "snip_set", ")", ")", ")", "\n", "\n", "train_loader", "=", "DataLoader", "(", "\n", "train_set", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "val_loader", "=", "DataLoader", "(", "\n", "val_set", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "test_loader", "=", "DataLoader", "(", "\n", "test_set", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "args", ".", "workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "\n", "return", "train_loader", ",", "val_loader", ",", "test_loader", ",", "train_snip_set", "\n", "", ""]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.utils.evaluate_cer": [[20, 84], ["torch.CrossEntropyLoss", "torchvision.transforms.Compose", "len", "net.cuda", "net.eval", "print", "print", "print", "print", "print", "print", "torchvision.datasets.CIFAR10", "torch.utils.data.DataLoader", "torch.no_grad", "torch.no_grad", "isinstance", "torchvision.transforms.ToTensor", "torchvision.datasets.CIFAR100", "torch.utils.data.DataLoader", "enumerate", "torch.autograd.variable.Variable.size", "torch.autograd.variable.Variable", "torch.autograd.variable.Variable", "net", "nn.CrossEntropyLoss.", "torch.max", "torch.max", "predicted.eq().sum().item", "criterion.item", "torch.autograd.variable.Variable.cuda", "torch.autograd.variable.Variable.cuda", "predicted.eq().sum", "predicted.eq"], "function", ["None"], ["def", "evaluate_cer", "(", "net", ",", "args", ",", "loader_", "=", "None", ")", ":", "\n", "    ", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "test_transform", "=", "transforms", ".", "Compose", "(", "\n", "[", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "]", "\n", ")", "\n", "if", "args", ".", "dataset", "==", "\"cifar10\"", ":", "\n", "        ", "test_set", "=", "CIFAR10", "(", "\n", "\"../data\"", ",", "train", "=", "False", ",", "transform", "=", "test_transform", ",", "download", "=", "True", "\n", ")", "\n", "test_loader", "=", "DataLoader", "(", "\n", "test_set", ",", "\n", "batch_size", "=", "128", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "2", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "", "elif", "args", ".", "dataset", "==", "\"cifar100\"", ":", "\n", "        ", "test_set", "=", "CIFAR100", "(", "\n", "\"../data\"", ",", "train", "=", "False", ",", "transform", "=", "test_transform", ",", "download", "=", "True", "\n", ")", "\n", "test_loader", "=", "DataLoader", "(", "\n", "test_set", ",", "\n", "batch_size", "=", "128", ",", "\n", "shuffle", "=", "False", ",", "\n", "num_workers", "=", "2", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "", "elif", "args", ".", "dataset", "==", "\"restricted_imagenet\"", ":", "\n", "        ", "test_loader", "=", "loader_", "\n", "\n", "", "correct", "=", "0", "\n", "total_loss", "=", "0", "\n", "total", "=", "0", "# number of samples", "\n", "num_batch", "=", "len", "(", "test_loader", ")", "\n", "use_cuda", "=", "True", "\n", "net", ".", "cuda", "(", ")", "\n", "net", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "\n", "        ", "if", "isinstance", "(", "criterion", ",", "nn", ".", "CrossEntropyLoss", ")", ":", "\n", "            ", "for", "batch_idx", ",", "(", "inputs", ",", "targets", ")", "in", "enumerate", "(", "test_loader", ")", ":", "\n", "# print(inputs.size(0))", "\n", "                ", "batch_size", "=", "inputs", ".", "size", "(", "0", ")", "\n", "total", "+=", "batch_size", "\n", "inputs", "=", "Variable", "(", "inputs", ")", "\n", "targets", "=", "Variable", "(", "targets", ")", "\n", "if", "use_cuda", ":", "\n", "                    ", "inputs", ",", "targets", "=", "inputs", ".", "cuda", "(", ")", ",", "targets", ".", "cuda", "(", ")", "\n", "", "outputs", "=", "net", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "targets", ")", "\n", "total_loss", "+=", "loss", ".", "item", "(", ")", "*", "batch_size", "\n", "_", ",", "predicted", "=", "torch", ".", "max", "(", "outputs", ".", "data", ",", "1", ")", "\n", "correct", "+=", "predicted", ".", "eq", "(", "targets", ")", ".", "sum", "(", ")", ".", "item", "(", ")", "\n", "", "", "", "print", "(", "\"Correct %\"", ")", "\n", "print", "(", "100", "*", "correct", "/", "total", ")", "\n", "misclassified", "=", "total", "-", "correct", "\n", "print", "(", "\"Total Loss\"", ")", "\n", "print", "(", "total_loss", "*", "100", "/", "total", ")", "\n", "print", "(", "f\"misclassified samples from {total}\"", ")", "\n", "print", "(", "misclassified", ")", "\n", "\n", "return", "misclassified", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.utils.setup_model": [[86, 115], ["advertorch.utils.NormalizeByChannelMeanStd", "advertorch.utils.NormalizeByChannelMeanStd"], "function", ["None"], ["", "def", "setup_model", "(", "args", ")", ":", "\n", "\n", "    ", "if", "args", ".", "dataset", "==", "\"cifar10\"", ":", "\n", "        ", "classes", "=", "10", "\n", "normalization", "=", "NormalizeByChannelMeanStd", "(", "\n", "mean", "=", "[", "0.4914", ",", "0.4822", ",", "0.4465", "]", ",", "std", "=", "[", "0.2470", ",", "0.2435", ",", "0.2616", "]", "\n", ")", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "\"cifar100\"", ":", "\n", "        ", "classes", "=", "100", "\n", "normalization", "=", "NormalizeByChannelMeanStd", "(", "\n", "mean", "=", "[", "0.5071", ",", "0.4866", ",", "0.4409", "]", ",", "std", "=", "[", "0.2673", ",", "0.2564", ",", "0.2762", "]", "\n", ")", "\n", "\n", "", "elif", "args", ".", "dataset", "==", "\"restricted_imagenet\"", ":", "\n", "        ", "classes", "=", "14", "\n", "\n", "", "if", "args", ".", "imagenet_arch", ":", "\n", "        ", "if", "args", ".", "dataset", "==", "\"restricted_imagenet\"", ":", "\n", "            ", "classes", "=", "14", "\n", "", "model", "=", "model_dict", "[", "args", ".", "arch", "]", "(", "num_classes", "=", "classes", ",", "imagenet", "=", "True", ")", "\n", "\n", "", "else", ":", "\n", "        ", "model", "=", "model_dict", "[", "args", ".", "arch", "]", "(", "num_classes", "=", "classes", ")", "\n", "\n", "", "if", "args", ".", "dataset", "!=", "\"restricted_imagenet\"", ":", "\n", "        ", "model", ".", "normalize", "=", "normalization", "\n", "\n", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.AverageMeter.__init__": [[560, 562], ["main_anytime_one.AverageMeter.reset"], "methods", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.AverageMeter.reset"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "reset", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.AverageMeter.reset": [[563, 568], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "val", "=", "0", "\n", "self", ".", "avg", "=", "0", "\n", "self", ".", "sum", "=", "0", "\n", "self", ".", "count", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.AverageMeter.update": [[569, 574], ["None"], "methods", ["None"], ["", "def", "update", "(", "self", ",", "val", ",", "n", "=", "1", ")", ":", "\n", "        ", "self", ".", "val", "=", "val", "\n", "self", ".", "sum", "+=", "val", "*", "n", "\n", "self", ".", "count", "+=", "n", "\n", "self", ".", "avg", "=", "self", ".", "sum", "/", "self", ".", "count", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.main": [[154, 439], ["parser.parse_args", "print", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "torch.cuda.set_device", "os.makedirs", "utils.setup_model", "utils.setup_model.cpu", "utils.setup_model.cuda", "torch.CrossEntropyLoss", "list", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.SGD", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "range", "main_anytime_one.validate", "print", "wb.WandBLogger.log_metrics", "wb.WandBLogger.log_metrics", "print", "print", "print", "print", "print", "print", "print", "print", "print", "int", "main_anytime_one.setup_seed", "dataset.setup__cifar10_dataset", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "utils.setup_model.load_state_dict", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "extract_mask", "print", "prune_model_custom", "map", "utils.setup_model.parameters", "wb.WandBLogger", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "utils.setup_model.load_state_dict", "torch.optim.SGD.load_state_dict", "torch.optim.lr_scheduler.MultiStepLR.load_state_dict", "print", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "torch.optim.lr_scheduler.MultiStepLR", "time.time", "print", "utils.setup_model.cuda", "range", "numpy.argmax", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "print", "utils.setup_model.load_state_dict", "print", "time_list.append", "print", "print", "dataset.setup__cifar100_dataset", "utils.setup_model.state_dict", "os.path.join", "parser.parse_args.decreasing_lr.split", "print", "dataset.generate_anytime_cifar10_dataloader", "generate_mask.generate_mask_", "utils.setup_model.cpu", "print", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "extract_mask", "print", "prune_model_custom", "print", "main_anytime_one.train", "main_anytime_one.validate", "torch.optim.lr_scheduler.MultiStepLR.step", "max", "all_result[].append", "all_result[].append", "all_result[].append", "all_result[].append", "all_result[].append", "all_result[].append", "all_result[].append", "main_anytime_one.save_checkpoint", "wb.WandBLogger.log_metrics", "numpy.array", "os.path.join", "time.time", "CER.append", "CER.append", "CER_diff.append", "print", "sum", "sum", "dataset.Setup_RestrictedImageNet", "len", "vars", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "torch.device", "print", "dataset.generate_anytime_cifar100_dataloader", "utils.evaluate_cer", "utils.evaluate_cer", "print", "len", "utils.setup_model.state_dict", "torch.optim.SGD.state_dict", "torch.optim.lr_scheduler.MultiStepLR.state_dict", "str", "dataset.generate_anytime_res_img_dataloader", "torch.optim.SGD.state_dict", "dataset.generate_anytime_res_img_dataloader_few", "torch.optim.SGD.state_dict", "torch.optim.SGD.state_dict"], "function", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.utils.setup_model", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.validate", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.wb.wandb_logger.WandBLogger.log_metrics", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.wb.wandb_logger.WandBLogger.log_metrics", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.setup_seed", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.dataset.setup__cifar10_dataset", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.tools.pruning_utils.extract_mask", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.pruner.pruner.prune_model_custom", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.dataset.setup__cifar100_dataset", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.dataset.generate_anytime_cifar10_dataloader", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.generate_mask.generate_mask_", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.tools.pruning_utils.extract_mask", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.pruner.pruner.prune_model_custom", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.train", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.validate", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.save_checkpoint", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.wb.wandb_logger.WandBLogger.log_metrics", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.dataset.Setup_RestrictedImageNet", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.dataset.generate_anytime_cifar100_dataloader", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.utils.evaluate_cer", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.utils.evaluate_cer", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.dataset.generate_anytime_res_img_dataloader", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.dataset.generate_anytime_res_img_dataloader_few"], ["", "def", "main", "(", ")", ":", "\n", "    ", "global", "args", ",", "best_sa", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "print", "(", "args", ")", "\n", "\n", "torch", ".", "cuda", ".", "set_device", "(", "int", "(", "args", ".", "gpu", ")", ")", "\n", "os", ".", "makedirs", "(", "args", ".", "save_dir", ",", "exist_ok", "=", "True", ")", "\n", "if", "args", ".", "seed", ":", "\n", "        ", "setup_seed", "(", "args", ".", "seed", ")", "\n", "\n", "", "model", "=", "setup_model", "(", "args", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "\"cifar10\"", ":", "\n", "        ", "whole_trainset", "=", "setup__cifar10_dataset", "(", "args", ")", "\n", "", "elif", "args", ".", "dataset", "==", "\"cifar100\"", ":", "\n", "        ", "whole_trainset", "=", "setup__cifar100_dataset", "(", "args", ")", "\n", "", "elif", "args", ".", "dataset", "==", "\"restricted_imagenet\"", ":", "\n", "        ", "whole_trainset", ",", "test_set", "=", "Setup_RestrictedImageNet", "(", "args", ".", "imagenet_path", ")", "\n", "\n", "", "model", ".", "cpu", "(", ")", "\n", "# print(model)", "\n", "if", "args", ".", "tickets_init", ":", "\n", "        ", "print", "(", "\"loading init from {}\"", ".", "format", "(", "args", ".", "tickets_init", ")", ")", "\n", "init_file", "=", "torch", ".", "load", "(", "args", ".", "tickets_init", ",", "map_location", "=", "\"cpu\"", ")", "\n", "if", "\"init_weight\"", "in", "init_file", ":", "\n", "            ", "init_file", "=", "init_file", "[", "\"init_weight\"", "]", "\n", "", "model", ".", "load_state_dict", "(", "init_file", ")", "\n", "", "else", ":", "\n", "        ", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "\"randinit.pth.tar\"", ")", ")", "\n", "\n", "# setup initialization and mask", "\n", "", "if", "args", ".", "tickets_mask", ":", "\n", "        ", "print", "(", "\"loading mask from {}\"", ".", "format", "(", "args", ".", "tickets_mask", ")", ")", "\n", "mask_file", "=", "torch", ".", "load", "(", "args", ".", "tickets_mask", ",", "map_location", "=", "\"cpu\"", ")", "\n", "if", "\"state_dict\"", "in", "mask_file", ":", "\n", "            ", "mask_file", "=", "mask_file", "[", "\"state_dict\"", "]", "\n", "", "mask_file", "=", "extract_mask", "(", "mask_file", ")", "\n", "print", "(", "\"pruning with {} masks\"", ".", "format", "(", "len", "(", "mask_file", ")", ")", ")", "\n", "prune_model_custom", "(", "model", ",", "mask_file", ")", "\n", "\n", "", "model", ".", "cuda", "(", ")", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "\n", "decreasing_lr", "=", "list", "(", "map", "(", "int", ",", "args", ".", "decreasing_lr", ".", "split", "(", "\",\"", ")", ")", ")", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "SGD", "(", "\n", "model", ".", "parameters", "(", ")", ",", "\n", "args", ".", "lr", ",", "\n", "momentum", "=", "args", ".", "momentum", ",", "\n", "weight_decay", "=", "args", ".", "weight_decay", ",", "\n", ")", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "\n", "optimizer", ",", "milestones", "=", "decreasing_lr", ",", "gamma", "=", "0.1", "\n", ")", "\n", "\n", "if", "args", ".", "wb", ":", "\n", "        ", "wandb_logger", "=", "WandBLogger", "(", "\n", "project_name", "=", "args", ".", "project_name", ",", "\n", "run_name", "=", "args", ".", "run", ",", "\n", "dir", "=", "args", ".", "save_dir", ",", "\n", "config", "=", "vars", "(", "args", ")", ",", "\n", "model", "=", "model", ",", "\n", "params", "=", "{", "\"resume\"", ":", "args", ".", "resume", "}", ",", "\n", ")", "\n", "", "else", ":", "\n", "        ", "wandb_logger", "=", "None", "\n", "\n", "", "if", "args", ".", "resume", ":", "\n", "        ", "print", "(", "\"resume from checkpoint {}\"", ".", "format", "(", "args", ".", "checkpoint", ")", ")", "\n", "checkpoint", "=", "torch", ".", "load", "(", "\n", "args", ".", "checkpoint", ",", "map_location", "=", "torch", ".", "device", "(", "\"cuda:\"", "+", "str", "(", "args", ".", "gpu", ")", ")", "\n", ")", "\n", "best_sa", "=", "checkpoint", "[", "\"best_sa\"", "]", "\n", "start_epoch", "=", "checkpoint", "[", "\"epoch\"", "]", "\n", "all_result", "=", "checkpoint", "[", "\"result\"", "]", "\n", "start_state", "=", "checkpoint", "[", "\"state\"", "]", "\n", "model", ".", "load_state_dict", "(", "checkpoint", "[", "\"state_dict\"", "]", ")", "\n", "optimizer", ".", "load_state_dict", "(", "checkpoint", "[", "\"optimizer\"", "]", ")", "\n", "scheduler", ".", "load_state_dict", "(", "checkpoint", "[", "\"scheduler\"", "]", ")", "\n", "print", "(", "\n", "\"loading from state: {} epoch: {}, best_sa = {}\"", ".", "format", "(", "\n", "start_state", ",", "start_epoch", ",", "best_sa", "\n", ")", "\n", ")", "\n", "\n", "", "else", ":", "\n", "        ", "all_result", "=", "{", "}", "\n", "all_result", "[", "\"train_ta\"", "]", "=", "[", "]", "\n", "all_result", "[", "\"val_ta\"", "]", "=", "[", "]", "\n", "all_result", "[", "\"best_sa\"", "]", "=", "[", "]", "\n", "all_result", "[", "\"gen_gap\"", "]", "=", "[", "]", "\n", "all_result", "[", "\"train_loss\"", "]", "=", "[", "]", "\n", "all_result", "[", "\"val_loss\"", "]", "=", "[", "]", "\n", "all_result", "[", "\"lr\"", "]", "=", "[", "]", "\n", "start_epoch", "=", "0", "\n", "start_state", "=", "1", "\n", "\n", "", "time_list", "=", "[", "]", "\n", "CER", "=", "[", "]", "\n", "CER_diff", "=", "[", "]", "\n", "\n", "for", "current_state", "in", "range", "(", "start_state", ",", "args", ".", "meta_batch_number", "+", "1", ")", ":", "\n", "        ", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "MultiStepLR", "(", "\n", "optimizer", ",", "milestones", "=", "decreasing_lr", ",", "gamma", "=", "0.1", "\n", ")", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"Current state = {}\"", ".", "format", "(", "current_state", ")", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "\"cifar10\"", ":", "\n", "            ", "print", "(", "\"Loading cifar10 dataset in anytime setting\"", ")", "\n", "(", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "test_loader", ",", "\n", "train_snip_set", ",", "\n", ")", "=", "generate_anytime_cifar10_dataloader", "(", "args", ",", "whole_trainset", ",", "current_state", ")", "\n", "", "elif", "args", ".", "dataset", "==", "\"cifar100\"", ":", "\n", "            ", "print", "(", "\"Loading cifar100 dataset in anytime setting\"", ")", "\n", "(", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "test_loader", ",", "\n", "train_snip_set", ",", "\n", ")", "=", "generate_anytime_cifar100_dataloader", "(", "\n", "args", ",", "whole_trainset", ",", "current_state", "\n", ")", "\n", "", "elif", "args", ".", "dataset", "==", "\"restricted_imagenet\"", ":", "\n", "            ", "print", "(", "\"Loading Restricted Imagenet dataset in anytime setting\"", ")", "\n", "if", "args", ".", "meta_batch_number", "==", "3", ":", "\n", "                ", "(", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "test_loader", ",", "\n", "train_snip_set", ",", "\n", ")", "=", "generate_anytime_res_img_dataloader", "(", "\n", "args", ",", "whole_trainset", ",", "test_set", ",", "80565", ",", "current_state", "\n", ")", "\n", "\n", "", "elif", "args", ".", "meta_batch_number", "==", "10", "and", "args", ".", "few_shot", ":", "\n", "# Few Shot Dataloader Example", "\n", "                ", "(", "\n", "train_loader", ",", "\n", "val_loader", ",", "\n", "test_loader", ",", "\n", "train_snip_set", ",", "\n", ")", "=", "generate_anytime_res_img_dataloader_few", "(", "\n", "args", ",", "whole_trainset", ",", "test_set", ",", "6800", ",", "current_state", "\n", ")", "\n", "\n", "# Generate Mask using SNIP", "\n", "\n", "", "", "if", "current_state", "==", "1", ":", "\n", "            ", "sparsity_level", "=", "(", "\n", "args", ".", "sparsity_level", "\n", ")", "# 0.8**sparsity_level  80% Remaining Weights", "\n", "save_mask", "=", "(", "\n", "args", ".", "save_dir", "\n", "+", "f\"/{current_state}mask_{args.pruner}_{sparsity_level}.pth.tar\"", "\n", ")", "\n", "\n", "model_load_dir", "=", "(", "\n", "args", ".", "save_dir", "+", "\"/randinit.pth.tar\"", "\n", ")", "# 1st Meta Batch Randomly initialized model", "\n", "\n", "generate_mask_", "(", "\n", "args", ",", "\n", "train_snip_set", ",", "\n", "args", ".", "pruner", ",", "\n", "model_load_dir", ",", "\n", "save", "=", "save_mask", ",", "\n", "state", "=", "sparsity_level", ",", "\n", ")", "\n", "\n", "model", ".", "cpu", "(", ")", "\n", "# Load the Model by applying above mask", "\n", "print", "(", "\"loading mask from {}\"", ".", "format", "(", "save_mask", ")", ")", "\n", "mask_file", "=", "torch", ".", "load", "(", "save_mask", ",", "map_location", "=", "\"cpu\"", ")", "\n", "if", "\"state_dict\"", "in", "mask_file", ":", "\n", "                ", "mask_file", "=", "mask_file", "[", "\"state_dict\"", "]", "\n", "", "mask_file", "=", "extract_mask", "(", "mask_file", ")", "\n", "print", "(", "\"pruning with {} masks\"", ".", "format", "(", "len", "(", "mask_file", ")", ")", ")", "\n", "prune_model_custom", "(", "model", ",", "mask_file", ")", "\n", "\n", "", "model", ".", "cuda", "(", ")", "\n", "for", "epoch", "in", "range", "(", "start_epoch", ",", "args", ".", "epochs", ")", ":", "\n", "\n", "            ", "print", "(", "optimizer", ".", "state_dict", "(", ")", "[", "\"param_groups\"", "]", "[", "0", "]", "[", "\"lr\"", "]", ")", "\n", "acc", ",", "loss", "=", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ")", "\n", "# evaluate on validation set", "\n", "tacc", ",", "vloss", "=", "validate", "(", "val_loader", ",", "model", ",", "criterion", ")", "\n", "# evaluate on test set", "\n", "\n", "scheduler", ".", "step", "(", ")", "\n", "\n", "# remember best prec@1 and save checkpoint", "\n", "is_best_sa", "=", "tacc", ">", "best_sa", "\n", "best_sa", "=", "max", "(", "tacc", ",", "best_sa", ")", "\n", "\n", "gen_gap", "=", "acc", "-", "tacc", "\n", "\n", "all_result", "[", "\"gen_gap\"", "]", ".", "append", "(", "gen_gap", ")", "\n", "all_result", "[", "\"train_ta\"", "]", ".", "append", "(", "acc", ")", "\n", "all_result", "[", "\"val_ta\"", "]", ".", "append", "(", "tacc", ")", "\n", "all_result", "[", "\"best_sa\"", "]", ".", "append", "(", "best_sa", ")", "\n", "all_result", "[", "\"train_loss\"", "]", ".", "append", "(", "loss", ")", "\n", "all_result", "[", "\"val_loss\"", "]", ".", "append", "(", "vloss", ")", "\n", "all_result", "[", "\"lr\"", "]", ".", "append", "(", "optimizer", ".", "state_dict", "(", ")", "[", "\"param_groups\"", "]", "[", "0", "]", "[", "\"lr\"", "]", ")", "\n", "\n", "save_checkpoint", "(", "\n", "{", "\n", "\"state\"", ":", "current_state", ",", "\n", "\"result\"", ":", "all_result", ",", "\n", "\"epoch\"", ":", "epoch", "+", "1", ",", "\n", "\"state_dict\"", ":", "model", ".", "state_dict", "(", ")", ",", "\n", "\"best_sa\"", ":", "best_sa", ",", "\n", "\"optimizer\"", ":", "optimizer", ".", "state_dict", "(", ")", ",", "\n", "\"scheduler\"", ":", "scheduler", ".", "state_dict", "(", ")", ",", "\n", "}", ",", "\n", "is_SA_best", "=", "is_best_sa", ",", "\n", "data_state", "=", "current_state", ",", "\n", "save_path", "=", "args", ".", "save_dir", ",", "\n", ")", "\n", "\n", "", "if", "wandb_logger", ":", "\n", "            ", "wandb_logger", ".", "log_metrics", "(", "all_result", ")", "\n", "\n", "# report result", "\n", "", "val_pick_best_epoch", "=", "np", ".", "argmax", "(", "np", ".", "array", "(", "all_result", "[", "\"val_ta\"", "]", ")", ")", "\n", "print", "(", "\n", "\"* State = {} best SA = {} Epoch = {}\"", ".", "format", "(", "\n", "current_state", ",", "\n", "all_result", "[", "\"val_ta\"", "]", "[", "val_pick_best_epoch", "]", ",", "\n", "val_pick_best_epoch", "+", "1", ",", "\n", ")", "\n", ")", "\n", "\n", "all_result", "=", "{", "}", "\n", "all_result", "[", "\"train_ta\"", "]", "=", "[", "]", "\n", "all_result", "[", "\"val_ta\"", "]", "=", "[", "]", "\n", "all_result", "[", "\"best_sa\"", "]", "=", "[", "]", "\n", "all_result", "[", "\"gen_gap\"", "]", "=", "[", "]", "\n", "all_result", "[", "\"train_loss\"", "]", "=", "[", "]", "\n", "all_result", "[", "\"val_loss\"", "]", "=", "[", "]", "\n", "all_result", "[", "\"lr\"", "]", "=", "[", "]", "\n", "best_sa", "=", "0", "\n", "start_epoch", "=", "0", "\n", "best_checkpoint", "=", "torch", ".", "load", "(", "\n", "os", ".", "path", ".", "join", "(", "args", ".", "save_dir", ",", "\"{}model_SA_best.pth.tar\"", ".", "format", "(", "current_state", ")", ")", "\n", ")", "\n", "print", "(", "\"Loading Best Weight\"", ")", "\n", "model", ".", "load_state_dict", "(", "best_checkpoint", "[", "\"state_dict\"", "]", ")", "\n", "\n", "end_time", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "print", "(", "\"Total time elapsed: {:.4f}s\"", ".", "format", "(", "end_time", ")", ")", "\n", "time_list", ".", "append", "(", "end_time", ")", "\n", "\n", "if", "args", ".", "dataset", "==", "\"restricted_imagenet\"", ":", "\n", "            ", "CER", ".", "append", "(", "evaluate_cer", "(", "model", ",", "args", ",", "test_loader", ")", ")", "\n", "", "else", ":", "\n", "            ", "CER", ".", "append", "(", "evaluate_cer", "(", "model", ",", "args", ")", ")", "\n", "\n", "", "if", "current_state", "!=", "1", ":", "\n", "            ", "diff", "=", "(", "CER", "[", "current_state", "-", "1", "]", "-", "CER", "[", "current_state", "-", "2", "]", ")", "/", "10000", "\n", "CER_diff", ".", "append", "(", "diff", ")", "\n", "print", "(", "\"CER diff = {}\"", ".", "format", "(", "diff", ")", ")", "\n", "\n", "# Reset LR to 0.1 after each state", "\n", "", "for", "g", "in", "optimizer", ".", "param_groups", ":", "\n", "            ", "g", "[", "\"lr\"", "]", "=", "0.1", "\n", "", "print", "(", "\"LR reset to 0.1\"", ")", "\n", "print", "(", "optimizer", ".", "state_dict", "(", ")", "[", "\"param_groups\"", "]", "[", "0", "]", "[", "\"lr\"", "]", ")", "\n", "\n", "", "test_tacc", "=", "validate", "(", "test_loader", ",", "model", ",", "criterion", ")", "\n", "print", "(", "\"Test Acc = {}\"", ".", "format", "(", "test_tacc", ")", ")", "\n", "wandb_logger", ".", "log_metrics", "(", "{", "\"Test/test_acc\"", ":", "test_tacc", "}", ")", "\n", "wandb_logger", ".", "log_metrics", "(", "{", "\"Test/CER\"", ":", "sum", "(", "CER", ")", "}", ")", "\n", "print", "(", "\"CER = {}\"", ".", "format", "(", "sum", "(", "CER", ")", ")", ")", "\n", "print", "(", "\"CER\"", ")", "\n", "print", "(", "CER", ")", "\n", "print", "(", "\"Final Test Accuracy: \"", ")", "\n", "print", "(", "test_tacc", ")", "\n", "print", "(", "\"Anytime Relative Error\"", ")", "\n", "print", "(", "CER_diff", ")", "\n", "print", "(", "\"Time Elapsed\"", ")", "\n", "print", "(", "time_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.train": [[441, 489], ["main_anytime_one.AverageMeter", "main_anytime_one.AverageMeter", "model.train", "time.time", "enumerate", "print", "image.clone().cuda.clone().cuda", "target.clone().cuda.clone().cuda", "model", "criterion", "optimizer.zero_grad", "loss.float.backward", "optimizer.step", "model.float", "loss.float.float", "main_anytime_one.AverageMeter.update", "main_anytime_one.AverageMeter.update", "main_anytime_one.warmup_lr", "main_anytime_one.accuracy", "loss.float.item", "image.clone().cuda.size", "prec1.item", "image.clone().cuda.size", "time.time", "print", "time.time", "image.clone().cuda.clone", "target.clone().cuda.clone", "len", "len"], "function", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.train", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.AverageMeter.update", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.AverageMeter.update", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.warmup_lr", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.accuracy"], ["", "def", "train", "(", "train_loader", ",", "model", ",", "criterion", ",", "optimizer", ",", "epoch", ")", ":", "\n", "\n", "    ", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to train mode", "\n", "model", ".", "train", "(", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "for", "i", ",", "(", "image", ",", "target", ")", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "\n", "        ", "if", "epoch", "<", "args", ".", "warmup", ":", "\n", "            ", "warmup_lr", "(", "epoch", ",", "i", "+", "1", ",", "optimizer", ",", "one_epoch_step", "=", "len", "(", "train_loader", ")", ")", "\n", "\n", "", "image", "=", "image", ".", "clone", "(", ")", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "clone", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "# compute output", "\n", "output_clean", "=", "model", "(", "image", ")", "\n", "loss", "=", "criterion", "(", "output_clean", ",", "target", ")", "\n", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", ".", "backward", "(", ")", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "output", "=", "output_clean", ".", "float", "(", ")", "\n", "loss", "=", "loss", ".", "float", "(", ")", "\n", "# measure accuracy and record loss", "\n", "prec1", "=", "accuracy", "(", "output", ".", "data", ",", "target", ")", "[", "0", "]", "\n", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "image", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "image", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "end", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\n", "\"Epoch: [{0}][{1}/{2}]\\t\"", "\n", "\"Loss {loss.val:.4f} ({loss.avg:.4f})\\t\"", "\n", "\"Accuracy {top1.val:.3f} ({top1.avg:.3f})\\t\"", "\n", "\"Time {3:.2f}\"", ".", "format", "(", "\n", "epoch", ",", "i", ",", "len", "(", "train_loader", ")", ",", "end", "-", "start", ",", "loss", "=", "losses", ",", "top1", "=", "top1", "\n", ")", "\n", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "\n", "", "", "print", "(", "\"train_accuracy {top1.avg:.3f}\"", ".", "format", "(", "top1", "=", "top1", ")", ")", "\n", "\n", "return", "top1", ".", "avg", ",", "losses", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.validate": [[491, 531], ["main_anytime_one.AverageMeter", "main_anytime_one.AverageMeter", "model.eval", "enumerate", "print", "image.clone().cuda.clone().cuda", "target.clone().cuda.clone().cuda", "model.float", "criterion.float", "main_anytime_one.AverageMeter.update", "main_anytime_one.AverageMeter.update", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model", "criterion", "main_anytime_one.accuracy", "criterion.item", "image.clone().cuda.size", "prec1.item", "image.clone().cuda.size", "print", "image.clone().cuda.clone", "target.clone().cuda.clone", "len"], "function", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.AverageMeter.update", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.AverageMeter.update", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.accuracy"], ["", "def", "validate", "(", "val_loader", ",", "model", ",", "criterion", ")", ":", "\n", "    ", "\"\"\"\n    Run evaluation\n    \"\"\"", "\n", "losses", "=", "AverageMeter", "(", ")", "\n", "top1", "=", "AverageMeter", "(", ")", "\n", "\n", "# switch to evaluate mode", "\n", "model", ".", "eval", "(", ")", "\n", "\n", "for", "i", ",", "(", "image", ",", "target", ")", "in", "enumerate", "(", "val_loader", ")", ":", "\n", "\n", "        ", "image", "=", "image", ".", "clone", "(", ")", ".", "cuda", "(", ")", "\n", "target", "=", "target", ".", "clone", "(", ")", ".", "cuda", "(", ")", "\n", "\n", "# compute output", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "output", "=", "model", "(", "image", ")", "\n", "loss", "=", "criterion", "(", "output", ",", "target", ")", "\n", "\n", "", "output", "=", "output", ".", "float", "(", ")", "\n", "loss", "=", "loss", ".", "float", "(", ")", "\n", "\n", "# measure accuracy and record loss", "\n", "prec1", "=", "accuracy", "(", "output", ".", "data", ",", "target", ")", "[", "0", "]", "\n", "losses", ".", "update", "(", "loss", ".", "item", "(", ")", ",", "image", ".", "size", "(", "0", ")", ")", "\n", "top1", ".", "update", "(", "prec1", ".", "item", "(", ")", ",", "image", ".", "size", "(", "0", ")", ")", "\n", "\n", "if", "i", "%", "args", ".", "print_freq", "==", "0", ":", "\n", "            ", "print", "(", "\n", "\"Test: [{0}/{1}]\\t\"", "\n", "\"Loss {loss.val:.4f} ({loss.avg:.4f})\\t\"", "\n", "\"Accuracy {top1.val:.3f} ({top1.avg:.3f})\"", ".", "format", "(", "\n", "i", ",", "len", "(", "val_loader", ")", ",", "loss", "=", "losses", ",", "top1", "=", "top1", "\n", ")", "\n", ")", "\n", "\n", "", "", "print", "(", "\"valid_accuracy {top1.avg:.3f}\"", ".", "format", "(", "top1", "=", "top1", ")", ")", "\n", "\n", "return", "top1", ".", "avg", ",", "losses", ".", "avg", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.save_checkpoint": [[533, 542], ["os.path.join", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "shutil.copyfile", "str", "os.path.join"], "function", ["None"], ["", "def", "save_checkpoint", "(", "\n", "state", ",", "is_SA_best", ",", "data_state", ",", "save_path", ",", "filename", "=", "\"checkpoint.pth.tar\"", "\n", ")", ":", "\n", "    ", "filepath", "=", "os", ".", "path", ".", "join", "(", "save_path", ",", "str", "(", "data_state", ")", "+", "filename", ")", "\n", "torch", ".", "save", "(", "state", ",", "filepath", ")", "\n", "if", "is_SA_best", ":", "\n", "        ", "shutil", ".", "copyfile", "(", "\n", "filepath", ",", "\n", "os", ".", "path", ".", "join", "(", "save_path", ",", "\"{}model_SA_best.pth.tar\"", ".", "format", "(", "data_state", ")", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.warmup_lr": [[545, 555], ["min"], "function", ["None"], ["", "", "def", "warmup_lr", "(", "epoch", ",", "step", ",", "optimizer", ",", "one_epoch_step", ")", ":", "\n", "\n", "    ", "overall_steps", "=", "args", ".", "warmup", "*", "one_epoch_step", "\n", "current_steps", "=", "epoch", "*", "one_epoch_step", "+", "step", "\n", "\n", "lr", "=", "args", ".", "lr", "*", "current_steps", "/", "overall_steps", "\n", "lr", "=", "min", "(", "lr", ",", "args", ".", "lr", ")", "\n", "\n", "for", "p", "in", "optimizer", ".", "param_groups", ":", "\n", "        ", "p", "[", "\"lr\"", "]", "=", "lr", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.accuracy": [[576, 590], ["max", "target.size", "output.topk", "pred.t.t", "pred.t.eq", "target.view().expand_as", "correct[].view().float().sum", "res.append", "correct[].view().float().sum.mul_", "target.view", "correct[].view().float", "correct[].view"], "function", ["None"], ["", "", "def", "accuracy", "(", "output", ",", "target", ",", "topk", "=", "(", "1", ",", ")", ")", ":", "\n", "    ", "\"\"\"Computes the precision@k for the specified values of k\"\"\"", "\n", "maxk", "=", "max", "(", "topk", ")", "\n", "batch_size", "=", "target", ".", "size", "(", "0", ")", "\n", "\n", "_", ",", "pred", "=", "output", ".", "topk", "(", "maxk", ",", "1", ",", "True", ",", "True", ")", "\n", "pred", "=", "pred", ".", "t", "(", ")", "\n", "correct", "=", "pred", ".", "eq", "(", "target", ".", "view", "(", "1", ",", "-", "1", ")", ".", "expand_as", "(", "pred", ")", ")", "\n", "\n", "res", "=", "[", "]", "\n", "for", "k", "in", "topk", ":", "\n", "        ", "correct_k", "=", "correct", "[", ":", "k", "]", ".", "view", "(", "-", "1", ")", ".", "float", "(", ")", ".", "sum", "(", "0", ")", "\n", "res", ".", "append", "(", "correct_k", ".", "mul_", "(", "100.0", "/", "batch_size", ")", ")", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.setup_seed": [[592, 599], ["print", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "torch.cuda.manual_seed_all", "numpy.random.seed", "random.seed"], "function", ["None"], ["", "def", "setup_seed", "(", "seed", ")", ":", "\n", "    ", "print", "(", "\"setup random seed = {}\"", ".", "format", "(", "seed", ")", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed_all", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "backends", ".", "cudnn", ".", "deterministic", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.pruner.pruner.pruning_model": [[20, 33], ["print", "model.named_modules", "tuple", "torch.global_unstructured", "isinstance", "tuple.append"], "function", ["None"], ["def", "pruning_model", "(", "model", ",", "px", ")", ":", "\n", "\n", "    ", "print", "(", "\"Apply Unstructured L1 Pruning Globally (all conv layers)\"", ")", "\n", "parameters_to_prune", "=", "[", "]", "\n", "for", "name", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "parameters_to_prune", ".", "append", "(", "(", "m", ",", "\"weight\"", ")", ")", "\n", "\n", "", "", "parameters_to_prune", "=", "tuple", "(", "parameters_to_prune", ")", "\n", "prune", ".", "global_unstructured", "(", "\n", "parameters_to_prune", ",", "\n", "pruning_method", "=", "prune", ".", "L1Unstructured", ",", "\n", "amount", "=", "px", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.pruner.pruner.pruning_model_random": [[36, 49], ["print", "model.named_modules", "tuple", "torch.global_unstructured", "isinstance", "tuple.append"], "function", ["None"], ["", "def", "pruning_model_random", "(", "model", ",", "px", ")", ":", "\n", "\n", "    ", "print", "(", "\"Apply Unstructured Random Pruning Globally (all conv layers)\"", ")", "\n", "parameters_to_prune", "=", "[", "]", "\n", "for", "name", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "parameters_to_prune", ".", "append", "(", "(", "m", ",", "\"weight\"", ")", ")", "\n", "\n", "", "", "parameters_to_prune", "=", "tuple", "(", "parameters_to_prune", ")", "\n", "prune", ".", "global_unstructured", "(", "\n", "parameters_to_prune", ",", "\n", "pruning_method", "=", "prune", ".", "RandomUnstructured", ",", "\n", "amount", "=", "px", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.pruner.pruner.prune_model_custom": [[52, 64], ["print", "model.named_modules", "isinstance", "mask_dict.keys", "torch.CustomFromMask.apply", "print"], "function", ["None"], ["", "def", "prune_model_custom", "(", "model", ",", "mask_dict", ")", ":", "\n", "\n", "    ", "print", "(", "\"Pruning with custom mask (all conv layers)\"", ")", "\n", "for", "name", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "mask_name", "=", "name", "+", "\".weight_mask\"", "\n", "if", "mask_name", "in", "mask_dict", ".", "keys", "(", ")", ":", "\n", "                ", "prune", ".", "CustomFromMask", ".", "apply", "(", "\n", "m", ",", "\"weight\"", ",", "mask", "=", "mask_dict", "[", "name", "+", "\".weight_mask\"", "]", "\n", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "\"Can not fing [{}] in mask_dict\"", ".", "format", "(", "mask_name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.pruner.pruner.remove_prune": [[66, 72], ["print", "model.named_modules", "isinstance", "torch.remove"], "function", ["None"], ["", "", "", "", "def", "remove_prune", "(", "model", ")", ":", "\n", "\n", "    ", "print", "(", "\"Remove hooks for multiplying masks (all conv layers)\"", ")", "\n", "for", "name", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "prune", ".", "remove", "(", "m", ",", "\"weight\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.pruner.pruner.extract_mask": [[75, 83], ["model_dict.keys", "copy.deepcopy"], "function", ["None"], ["", "", "", "def", "extract_mask", "(", "model_dict", ")", ":", "\n", "\n", "    ", "new_dict", "=", "{", "}", "\n", "for", "key", "in", "model_dict", ".", "keys", "(", ")", ":", "\n", "        ", "if", "\"mask\"", "in", "key", ":", "\n", "            ", "new_dict", "[", "key", "]", "=", "copy", ".", "deepcopy", "(", "model_dict", "[", "key", "]", ")", "\n", "\n", "", "", "return", "new_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.pruner.pruner.reverse_mask": [[85, 93], ["mask_dict.keys"], "function", ["None"], ["", "def", "reverse_mask", "(", "mask_dict", ")", ":", "\n", "\n", "    ", "new_dict", "=", "{", "}", "\n", "for", "key", "in", "mask_dict", ".", "keys", "(", ")", ":", "\n", "\n", "        ", "new_dict", "[", "key", "]", "=", "1", "-", "mask_dict", "[", "key", "]", "\n", "\n", "", "return", "new_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.pruner.pruner.check_sparsity": [[96, 114], ["model.named_modules", "isinstance", "print", "print", "float", "float", "m.weight.nelement", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "check_sparsity", "(", "model", ")", ":", "\n", "\n", "    ", "sum_list", "=", "0", "\n", "zero_sum", "=", "0", "\n", "\n", "for", "name", ",", "m", "in", "model", ".", "named_modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "sum_list", "=", "sum_list", "+", "float", "(", "m", ".", "weight", ".", "nelement", "(", ")", ")", "\n", "zero_sum", "=", "zero_sum", "+", "float", "(", "torch", ".", "sum", "(", "m", ".", "weight", "==", "0", ")", ")", "\n", "\n", "", "", "if", "zero_sum", ":", "\n", "        ", "remain_weight_ratie", "=", "100", "*", "(", "1", "-", "zero_sum", "/", "sum_list", ")", "\n", "print", "(", "\"* remain weight ratio = \"", ",", "100", "*", "(", "1", "-", "zero_sum", "/", "sum_list", ")", ",", "\"%\"", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"no weight for calculating sparsity\"", ")", "\n", "remain_weight_ratie", "=", "None", "\n", "\n", "", "return", "remain_weight_ratie", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.pruner.pruner.check_sparsity_dict": [[116, 134], ["state_dict.keys", "print", "print", "float", "float", "state_dict[].nelement", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["", "def", "check_sparsity_dict", "(", "state_dict", ")", ":", "\n", "\n", "    ", "sum_list", "=", "0", "\n", "zero_sum", "=", "0", "\n", "\n", "for", "key", "in", "state_dict", ".", "keys", "(", ")", ":", "\n", "        ", "if", "\"mask\"", "in", "key", ":", "\n", "            ", "sum_list", "+=", "float", "(", "state_dict", "[", "key", "]", ".", "nelement", "(", ")", ")", "\n", "zero_sum", "+=", "float", "(", "torch", ".", "sum", "(", "state_dict", "[", "key", "]", "==", "0", ")", ")", "\n", "\n", "", "", "if", "zero_sum", ":", "\n", "        ", "remain_weight_ratie", "=", "100", "*", "(", "1", "-", "zero_sum", "/", "sum_list", ")", "\n", "print", "(", "\"* remain weight ratio = \"", ",", "100", "*", "(", "1", "-", "zero_sum", "/", "sum_list", ")", ",", "\"%\"", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "\"no weight for calculating sparsity\"", ")", "\n", "remain_weight_ratie", "=", "None", "\n", "\n", "", "return", "remain_weight_ratie", "\n", "", ""]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.tools.layers.Linear.__init__": [[12, 15], ["torch.Linear.__init__", "layers.Linear.register_buffer", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.wb.wandb_logger.WandBLogger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_features", ",", "out_features", ",", "bias", "=", "True", ")", ":", "\n", "        ", "super", "(", "Linear", ",", "self", ")", ".", "__init__", "(", "in_features", ",", "out_features", ",", "bias", ")", "\n", "self", ".", "register_buffer", "(", "\"weight_mask\"", ",", "torch", ".", "ones", "(", "self", ".", "weight", ".", "shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.tools.layers.Linear.forward": [[16, 20], ["torch.nn.functional.linear", "torch.nn.functional.linear"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "W", "=", "self", ".", "weight_mask", "*", "self", ".", "weight", "\n", "b", "=", "self", ".", "bias", "\n", "return", "F", ".", "linear", "(", "input", ",", "W", ",", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.tools.layers.Conv2d.__init__": [[23, 47], ["torch.Conv2d.__init__", "layers.Conv2d.register_buffer", "torch.ones", "torch.ones", "torch.ones", "torch.ones"], "methods", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.wb.wandb_logger.WandBLogger.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "dilation", "=", "1", ",", "\n", "groups", "=", "1", ",", "\n", "bias", "=", "True", ",", "\n", "padding_mode", "=", "\"zeros\"", ",", "\n", ")", ":", "\n", "        ", "super", "(", "Conv2d", ",", "self", ")", ".", "__init__", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", ",", "\n", "stride", ",", "\n", "padding", ",", "\n", "dilation", ",", "\n", "groups", ",", "\n", "bias", ",", "\n", "padding_mode", ",", "\n", ")", "\n", "self", ".", "register_buffer", "(", "\"weight_mask\"", ",", "torch", ".", "ones", "(", "self", ".", "weight", ".", "shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.tools.layers.Conv2d._conv_forward": [[48, 61], ["torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.conv2d", "torch.nn.functional.pad", "torch.nn.functional.pad", "torch.nn.modules.utils._pair", "torch.nn.modules.utils._pair"], "methods", ["None"], ["", "def", "_conv_forward", "(", "self", ",", "input", ",", "weight", ",", "bias", ")", ":", "\n", "        ", "if", "self", ".", "padding_mode", "!=", "\"zeros\"", ":", "\n", "            ", "return", "F", ".", "conv2d", "(", "\n", "F", ".", "pad", "(", "input", ",", "self", ".", "_padding_repeated_twice", ",", "mode", "=", "self", ".", "padding_mode", ")", ",", "\n", "weight", ",", "\n", "bias", ",", "\n", "self", ".", "stride", ",", "\n", "_pair", "(", "0", ")", ",", "\n", "self", ".", "dilation", ",", "\n", "self", ".", "groups", ",", "\n", ")", "\n", "", "return", "F", ".", "conv2d", "(", "\n", "input", ",", "weight", ",", "bias", ",", "self", ".", "stride", ",", "self", ".", "padding", ",", "self", ".", "dilation", ",", "self", ".", "groups", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.tools.layers.Conv2d.forward": [[63, 67], ["layers.Conv2d._conv_forward"], "methods", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.tools.layers.Conv2d._conv_forward"], ["", "def", "forward", "(", "self", ",", "input", ")", ":", "\n", "        ", "W", "=", "self", ".", "weight_mask", "*", "self", ".", "weight", "\n", "b", "=", "self", ".", "bias", "\n", "return", "self", ".", "_conv_forward", "(", "input", ",", "W", ",", "b", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.tools.pruning_utils.Pruner.__init__": [[43, 46], ["list"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "masked_parameters", ")", ":", "\n", "        ", "self", ".", "masked_parameters", "=", "list", "(", "masked_parameters", ")", "\n", "self", ".", "scores", "=", "{", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.tools.pruning_utils.Pruner.score": [[47, 49], ["None"], "methods", ["None"], ["", "def", "score", "(", "self", ",", "model", ",", "loss", ",", "dataloader", ",", "device", ")", ":", "\n", "        ", "raise", "NotImplementedError", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.tools.pruning_utils.Pruner._global_mask": [[50, 67], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "int", "torch.kthvalue", "torch.kthvalue", "torch.kthvalue", "torch.kthvalue", "torch.kthvalue", "torch.kthvalue", "torch.kthvalue", "torch.kthvalue", "torch.kthvalue", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.cat.numel", "torch.cat.numel", "torch.cat.numel", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "mask.copy_", "pruning_utils.Pruner.scores.values", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "id", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "def", "_global_mask", "(", "self", ",", "sparsity", ")", ":", "\n", "        ", "r\"\"\"Updates masks of model with scores by sparsity level globally.\"\"\"", "\n", "# # Set score for masked parameters to -inf", "\n", "# for mask, param in self.masked_parameters:", "\n", "#     score = self.scores[id(param)]", "\n", "#     score[mask == 0.0] = -np.inf", "\n", "\n", "# Threshold scores", "\n", "global_scores", "=", "torch", ".", "cat", "(", "[", "torch", ".", "flatten", "(", "v", ")", "for", "v", "in", "self", ".", "scores", ".", "values", "(", ")", "]", ")", "\n", "k", "=", "int", "(", "(", "1.0", "-", "sparsity", ")", "*", "global_scores", ".", "numel", "(", ")", ")", "\n", "if", "not", "k", "<", "1", ":", "\n", "            ", "threshold", ",", "_", "=", "torch", ".", "kthvalue", "(", "global_scores", ",", "k", ")", "\n", "for", "mask", ",", "param", "in", "self", ".", "masked_parameters", ":", "\n", "                ", "score", "=", "self", ".", "scores", "[", "id", "(", "param", ")", "]", "\n", "zero", "=", "torch", ".", "tensor", "(", "[", "0.0", "]", ")", ".", "to", "(", "mask", ".", "device", ")", "\n", "one", "=", "torch", ".", "tensor", "(", "[", "1.0", "]", ")", ".", "to", "(", "mask", ".", "device", ")", "\n", "mask", ".", "copy_", "(", "torch", ".", "where", "(", "score", "<=", "threshold", ",", "zero", ",", "one", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.tools.pruning_utils.Pruner._local_mask": [[68, 78], ["int", "torch.kthvalue", "torch.kthvalue", "torch.kthvalue", "torch.kthvalue", "torch.kthvalue", "torch.kthvalue", "torch.kthvalue", "torch.kthvalue", "torch.kthvalue", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "torch.tensor().to", "mask.copy_", "id", "score.numel", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.where", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["None"], ["", "", "", "def", "_local_mask", "(", "self", ",", "sparsity", ")", ":", "\n", "        ", "r\"\"\"Updates masks of model with scores by sparsity level parameter-wise.\"\"\"", "\n", "for", "mask", ",", "param", "in", "self", ".", "masked_parameters", ":", "\n", "            ", "score", "=", "self", ".", "scores", "[", "id", "(", "param", ")", "]", "\n", "k", "=", "int", "(", "(", "1.0", "-", "sparsity", ")", "*", "score", ".", "numel", "(", ")", ")", "\n", "if", "not", "k", "<", "1", ":", "\n", "                ", "threshold", ",", "_", "=", "torch", ".", "kthvalue", "(", "torch", ".", "flatten", "(", "score", ")", ",", "k", ")", "\n", "zero", "=", "torch", ".", "tensor", "(", "[", "0.0", "]", ")", ".", "to", "(", "mask", ".", "device", ")", "\n", "one", "=", "torch", ".", "tensor", "(", "[", "1.0", "]", ")", ".", "to", "(", "mask", ".", "device", ")", "\n", "mask", ".", "copy_", "(", "torch", ".", "where", "(", "score", "<=", "threshold", ",", "zero", ",", "one", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.tools.pruning_utils.Pruner.mask": [[79, 85], ["pruning_utils.Pruner._global_mask", "pruning_utils.Pruner._local_mask"], "methods", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.tools.pruning_utils.Pruner._global_mask", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.tools.pruning_utils.Pruner._local_mask"], ["", "", "", "def", "mask", "(", "self", ",", "sparsity", ",", "scope", ")", ":", "\n", "        ", "r\"\"\"Updates masks of model with scores by sparsity according to scope.\"\"\"", "\n", "if", "scope", "==", "\"global\"", ":", "\n", "            ", "self", ".", "_global_mask", "(", "sparsity", ")", "\n", "", "if", "scope", "==", "\"local\"", ":", "\n", "            ", "self", ".", "_local_mask", "(", "sparsity", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.tools.pruning_utils.Pruner.apply_mask": [[86, 91], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "param.mul_"], "methods", ["None"], ["", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "apply_mask", "(", "self", ")", ":", "\n", "        ", "r\"\"\"Applies mask to prunable parameters.\"\"\"", "\n", "for", "mask", ",", "param", "in", "self", ".", "masked_parameters", ":", "\n", "            ", "param", ".", "mul_", "(", "mask", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.tools.pruning_utils.Pruner.alpha_mask": [[92, 96], ["mask.fill_"], "methods", ["None"], ["", "", "def", "alpha_mask", "(", "self", ",", "alpha", ")", ":", "\n", "        ", "r\"\"\"Set all masks to alpha in model.\"\"\"", "\n", "for", "mask", ",", "_", "in", "self", ".", "masked_parameters", ":", "\n", "            ", "mask", ".", "fill_", "(", "alpha", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.tools.pruning_utils.Pruner.shuffle": [[98, 103], ["torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "torch.randperm", "[].reshape", "[].reshape.nelement", "[].reshape.reshape"], "methods", ["None"], ["", "", "def", "shuffle", "(", "self", ")", ":", "\n", "        ", "for", "mask", ",", "param", "in", "self", ".", "masked_parameters", ":", "\n", "            ", "shape", "=", "mask", ".", "shape", "\n", "perm", "=", "torch", ".", "randperm", "(", "mask", ".", "nelement", "(", ")", ")", "\n", "mask", "=", "mask", ".", "reshape", "(", "-", "1", ")", "[", "perm", "]", ".", "reshape", "(", "shape", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.tools.pruning_utils.Pruner.invert": [[104, 107], ["pruning_utils.Pruner.scores.values", "v.div_"], "methods", ["None"], ["", "", "def", "invert", "(", "self", ")", ":", "\n", "        ", "for", "v", "in", "self", ".", "scores", ".", "values", "(", ")", ":", "\n", "            ", "v", ".", "div_", "(", "v", "**", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.tools.pruning_utils.Pruner.stats": [[108, 115], ["mask.detach().cpu().numpy().sum", "mask.numel", "mask.detach().cpu().numpy", "mask.detach().cpu", "mask.detach"], "methods", ["None"], ["", "", "def", "stats", "(", "self", ")", ":", "\n", "        ", "r\"\"\"Returns remaining and total number of prunable parameters.\"\"\"", "\n", "remaining_params", ",", "total_params", "=", "0", ",", "0", "\n", "for", "mask", ",", "_", "in", "self", ".", "masked_parameters", ":", "\n", "            ", "remaining_params", "+=", "mask", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", ".", "sum", "(", ")", "\n", "total_params", "+=", "mask", ".", "numel", "(", ")", "\n", "", "return", "remaining_params", ",", "total_params", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.tools.pruning_utils.SynFlow.__init__": [[118, 120], ["pruning_utils.Pruner.__init__"], "methods", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.wb.wandb_logger.WandBLogger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "masked_parameters", ")", ":", "\n", "        ", "super", "(", "SynFlow", ",", "self", ")", ".", "__init__", "(", "masked_parameters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.tools.pruning_utils.SynFlow.score": [[121, 152], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "pruning_utils.SynFlow.score.linearize"], "methods", ["None"], ["", "def", "score", "(", "self", ",", "model", ",", "loss", ",", "dataloader", ",", "device", ")", ":", "\n", "        ", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "linearize", "(", "model", ")", ":", "\n", "# model.double()", "\n", "            ", "signs", "=", "{", "}", "\n", "for", "name", ",", "param", "in", "model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "                ", "signs", "[", "name", "]", "=", "torch", ".", "sign", "(", "param", ")", "\n", "param", ".", "abs_", "(", ")", "\n", "", "return", "signs", "\n", "\n", "", "@", "torch", ".", "no_grad", "(", ")", "\n", "def", "nonlinearize", "(", "model", ",", "signs", ")", ":", "\n", "# model.float()", "\n", "            ", "for", "name", ",", "param", "in", "model", ".", "state_dict", "(", ")", ".", "items", "(", ")", ":", "\n", "                ", "param", ".", "mul_", "(", "signs", "[", "name", "]", ")", "\n", "\n", "", "", "signs", "=", "linearize", "(", "model", ")", "\n", "\n", "(", "data", ",", "_", ")", "=", "next", "(", "iter", "(", "dataloader", ")", ")", "\n", "input_dim", "=", "list", "(", "data", "[", "0", ",", ":", "]", ".", "shape", ")", "\n", "input", "=", "torch", ".", "ones", "(", "[", "1", "]", "+", "input_dim", ")", ".", "to", "(", "\n", "device", "\n", ")", "# , dtype=torch.float64).to(device)", "\n", "output", "=", "model", "(", "input", ")", "\n", "torch", ".", "sum", "(", "output", ")", ".", "backward", "(", ")", "\n", "\n", "for", "_", ",", "p", "in", "self", ".", "masked_parameters", ":", "\n", "            ", "self", ".", "scores", "[", "id", "(", "p", ")", "]", "=", "torch", ".", "clone", "(", "p", ".", "grad", "*", "p", ")", ".", "detach", "(", ")", ".", "abs_", "(", ")", "\n", "p", ".", "grad", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "", "nonlinearize", "(", "model", ",", "signs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.tools.pruning_utils.Mag.__init__": [[155, 157], ["pruning_utils.Pruner.__init__"], "methods", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.wb.wandb_logger.WandBLogger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "masked_parameters", ")", ":", "\n", "        ", "super", "(", "Mag", ",", "self", ")", ".", "__init__", "(", "masked_parameters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.tools.pruning_utils.Mag.score": [[158, 161], ["torch.clone().detach().abs_", "torch.clone().detach().abs_", "torch.clone().detach().abs_", "torch.clone().detach().abs_", "torch.clone().detach().abs_", "torch.clone().detach().abs_", "torch.clone().detach().abs_", "torch.clone().detach().abs_", "torch.clone().detach().abs_", "id", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone"], "methods", ["None"], ["", "def", "score", "(", "self", ",", "model", ",", "loss", ",", "dataloader", ",", "device", ")", ":", "\n", "        ", "for", "_", ",", "p", "in", "self", ".", "masked_parameters", ":", "\n", "            ", "self", ".", "scores", "[", "id", "(", "p", ")", "]", "=", "torch", ".", "clone", "(", "p", ".", "data", ")", ".", "detach", "(", ")", ".", "abs_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.tools.pruning_utils.Rand.__init__": [[164, 166], ["pruning_utils.Pruner.__init__"], "methods", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.wb.wandb_logger.WandBLogger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "masked_parameters", ")", ":", "\n", "        ", "super", "(", "Rand", ",", "self", ")", ".", "__init__", "(", "masked_parameters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.tools.pruning_utils.Rand.score": [[167, 170], ["torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "torch.randn_like", "id"], "methods", ["None"], ["", "def", "score", "(", "self", ",", "model", ",", "loss", ",", "dataloader", ",", "device", ")", ":", "\n", "        ", "for", "_", ",", "p", "in", "self", ".", "masked_parameters", ":", "\n", "            ", "self", ".", "scores", "[", "id", "(", "p", ")", "]", "=", "torch", ".", "randn_like", "(", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.tools.pruning_utils.SNIP.__init__": [[174, 176], ["pruning_utils.Pruner.__init__"], "methods", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.wb.wandb_logger.WandBLogger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "masked_parameters", ")", ":", "\n", "        ", "super", "(", "SNIP", ",", "self", ")", ".", "__init__", "(", "masked_parameters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.tools.pruning_utils.SNIP.score": [[177, 201], ["enumerate", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "model", "loss().backward", "torch.clone().detach().abs_", "torch.clone().detach().abs_", "torch.clone().detach().abs_", "torch.clone().detach().abs_", "torch.clone().detach().abs_", "torch.clone().detach().abs_", "torch.clone().detach().abs_", "torch.clone().detach().abs_", "torch.clone().detach().abs_", "p.grad.data.zero_", "m.grad.data.zero_", "pruning_utils.SNIP.scores[].div_", "data.to", "target.to", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "loss", "id", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "pruning_utils.SNIP.scores.values", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "id"], "methods", ["None"], ["", "def", "score", "(", "self", ",", "model", ",", "loss", ",", "dataloader", ",", "device", ")", ":", "\n", "\n", "# allow masks to have gradient", "\n", "        ", "for", "m", ",", "_", "in", "self", ".", "masked_parameters", ":", "\n", "            ", "m", ".", "requires_grad", "=", "True", "\n", "\n", "# compute gradient", "\n", "", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "loss", "(", "output", ",", "target", ")", ".", "backward", "(", ")", "\n", "\n", "# calculate score |g * theta|", "\n", "", "for", "m", ",", "p", "in", "self", ".", "masked_parameters", ":", "\n", "            ", "self", ".", "scores", "[", "id", "(", "p", ")", "]", "=", "torch", ".", "clone", "(", "m", ".", "grad", ")", ".", "detach", "(", ")", ".", "abs_", "(", ")", "\n", "p", ".", "grad", ".", "data", ".", "zero_", "(", ")", "\n", "m", ".", "grad", ".", "data", ".", "zero_", "(", ")", "\n", "m", ".", "requires_grad", "=", "False", "\n", "\n", "# normalize score", "\n", "", "all_scores", "=", "torch", ".", "cat", "(", "[", "torch", ".", "flatten", "(", "v", ")", "for", "v", "in", "self", ".", "scores", ".", "values", "(", ")", "]", ")", "\n", "norm", "=", "torch", ".", "sum", "(", "all_scores", ")", "\n", "for", "_", ",", "p", "in", "self", ".", "masked_parameters", ":", "\n", "            ", "self", ".", "scores", "[", "id", "(", "p", ")", "]", ".", "div_", "(", "norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.tools.pruning_utils.GraSP.__init__": [[229, 233], ["pruning_utils.Pruner.__init__"], "methods", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.wb.wandb_logger.WandBLogger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "masked_parameters", ")", ":", "\n", "        ", "super", "(", "GraSP", ",", "self", ")", ".", "__init__", "(", "masked_parameters", ")", "\n", "self", ".", "temp", "=", "200", "\n", "self", ".", "eps", "=", "1e-10", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.tools.pruning_utils.GraSP.score": [[234, 275], ["pruning_utils.GraSP_fetch_data", "loss", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "pruning_utils.GraSP_fetch_data", "loss", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.autograd.grad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "gnorm.backward", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "data.to", "target.to", "model", "data.to", "target.to", "model", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "p.grad.data.zero_", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "torch.abs", "pruning_utils.GraSP.scores[].div_", "g.reshape", "g.reshape", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "torch.sum", "id", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "pruning_utils.GraSP.scores.values", "id"], "methods", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.tools.pruning_utils.GraSP_fetch_data", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.tools.pruning_utils.GraSP_fetch_data"], ["", "def", "score", "(", "self", ",", "model", ",", "loss", ",", "dataloader", ",", "device", ")", ":", "\n", "\n", "# first gradient vector without computational graph", "\n", "        ", "stopped_grads", "=", "0", "\n", "\n", "data", ",", "target", "=", "GraSP_fetch_data", "(", "dataloader", ",", "10", ",", "10", ")", "\n", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", "=", "model", "(", "data", ")", "/", "self", ".", "temp", "\n", "L", "=", "loss", "(", "output", ",", "target", ")", "\n", "\n", "grads", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "L", ",", "[", "p", "for", "(", "_", ",", "p", ")", "in", "self", ".", "masked_parameters", "]", ",", "create_graph", "=", "False", "\n", ")", "\n", "flatten_grads", "=", "torch", ".", "cat", "(", "[", "g", ".", "reshape", "(", "-", "1", ")", "for", "g", "in", "grads", "if", "g", "is", "not", "None", "]", ")", "\n", "stopped_grads", "+=", "flatten_grads", "\n", "\n", "# second gradient vector with computational graph", "\n", "\n", "data", ",", "target", "=", "GraSP_fetch_data", "(", "dataloader", ",", "10", ",", "10", ")", "\n", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", "=", "model", "(", "data", ")", "/", "self", ".", "temp", "\n", "L", "=", "loss", "(", "output", ",", "target", ")", "\n", "\n", "grads", "=", "torch", ".", "autograd", ".", "grad", "(", "\n", "L", ",", "[", "p", "for", "(", "_", ",", "p", ")", "in", "self", ".", "masked_parameters", "]", ",", "create_graph", "=", "True", "\n", ")", "\n", "flatten_grads", "=", "torch", ".", "cat", "(", "[", "g", ".", "reshape", "(", "-", "1", ")", "for", "g", "in", "grads", "if", "g", "is", "not", "None", "]", ")", "\n", "\n", "gnorm", "=", "(", "stopped_grads", "*", "flatten_grads", ")", ".", "sum", "(", ")", "\n", "gnorm", ".", "backward", "(", ")", "\n", "\n", "# calculate score Hg * theta (negate to remove top percent)", "\n", "for", "_", ",", "p", "in", "self", ".", "masked_parameters", ":", "\n", "            ", "self", ".", "scores", "[", "id", "(", "p", ")", "]", "=", "torch", ".", "clone", "(", "p", ".", "grad", "*", "p", ".", "data", ")", ".", "detach", "(", ")", "\n", "p", ".", "grad", ".", "data", ".", "zero_", "(", ")", "\n", "\n", "# normalize score", "\n", "", "all_scores", "=", "torch", ".", "cat", "(", "[", "torch", ".", "flatten", "(", "v", ")", "for", "v", "in", "self", ".", "scores", ".", "values", "(", ")", "]", ")", "\n", "norm", "=", "torch", ".", "abs", "(", "torch", ".", "sum", "(", "all_scores", ")", ")", "+", "self", ".", "eps", "\n", "for", "_", ",", "p", "in", "self", ".", "masked_parameters", ":", "\n", "            ", "self", ".", "scores", "[", "id", "(", "p", ")", "]", ".", "div_", "(", "norm", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.tools.pruning_utils.Taylor1ScorerAbs.__init__": [[278, 280], ["pruning_utils.Pruner.__init__"], "methods", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.wb.wandb_logger.WandBLogger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "masked_parameters", ")", ":", "\n", "        ", "super", "(", "Taylor1ScorerAbs", ",", "self", ")", ".", "__init__", "(", "masked_parameters", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.tools.pruning_utils.Taylor1ScorerAbs.score": [[281, 291], ["enumerate", "model", "loss().backward", "torch.clone().detach().abs_", "torch.clone().detach().abs_", "torch.clone().detach().abs_", "torch.clone().detach().abs_", "torch.clone().detach().abs_", "torch.clone().detach().abs_", "torch.clone().detach().abs_", "torch.clone().detach().abs_", "torch.clone().detach().abs_", "p.grad.data.zero_", "data.to", "target.to", "loss", "id", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone().detach", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone", "torch.clone"], "methods", ["None"], ["", "def", "score", "(", "self", ",", "model", ",", "loss", ",", "dataloader", ",", "device", ")", ":", "\n", "\n", "        ", "for", "batch_idx", ",", "(", "data", ",", "target", ")", "in", "enumerate", "(", "dataloader", ")", ":", "\n", "            ", "data", ",", "target", "=", "data", ".", "to", "(", "device", ")", ",", "target", ".", "to", "(", "device", ")", "\n", "output", "=", "model", "(", "data", ")", "\n", "loss", "(", "output", ",", "target", ")", ".", "backward", "(", ")", "\n", "\n", "", "for", "_", ",", "p", "in", "self", ".", "masked_parameters", ":", "\n", "            ", "self", ".", "scores", "[", "id", "(", "p", ")", "]", "=", "torch", ".", "clone", "(", "p", ".", "grad", "*", "p", ")", ".", "detach", "(", ")", ".", "abs_", "(", ")", "\n", "p", ".", "grad", ".", "data", ".", "zero_", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.tools.pruning_utils.masks": [[24, 29], ["module.named_buffers"], "function", ["None"], ["def", "masks", "(", "module", ")", ":", "\n", "    ", "r\"\"\"Returns an iterator over modules masks, yielding the mask.\"\"\"", "\n", "for", "name", ",", "buf", "in", "module", ".", "named_buffers", "(", ")", ":", "\n", "        ", "if", "\"mask\"", "in", "name", ":", "\n", "            ", "yield", "buf", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.tools.pruning_utils.masked_parameters": [[31, 40], ["model.modules", "isinstance", "isinstance", "zip", "pruning_utils.masks", "module.parameters"], "function", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.tools.pruning_utils.masks"], ["", "", "", "def", "masked_parameters", "(", "model", ")", ":", "\n", "    ", "r\"\"\"Returns an iterator over models prunable parameters, yielding both the\n    mask and parameter tensors.\n    \"\"\"", "\n", "for", "module", "in", "model", ".", "modules", "(", ")", ":", "\n", "        ", "if", "isinstance", "(", "module", ",", "nn", ".", "Conv2d", ")", "or", "isinstance", "(", "module", ",", "nn", ".", "Linear", ")", ":", "\n", "            ", "for", "mask", ",", "param", "in", "zip", "(", "masks", "(", "module", ")", ",", "module", ".", "parameters", "(", "recurse", "=", "False", ")", ")", ":", "\n", "                ", "if", "param", "is", "not", "module", ".", "bias", ":", "\n", "                    ", "yield", "mask", ",", "param", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.tools.pruning_utils.GraSP_fetch_data": [[203, 225], ["dict", "iter", "next", "range", "torch.cat", "torch.cat", "torch.cat", "torch.cat().view", "torch.cat().view", "torch.cat().view", "range", "range", "y.item", "datas[].append", "labels[].append", "len", "len", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat"], "function", ["None"], ["", "", "", "def", "GraSP_fetch_data", "(", "dataloader", ",", "num_classes", ",", "samples_per_class", ")", ":", "\n", "    ", "datas", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_classes", ")", "]", "\n", "labels", "=", "[", "[", "]", "for", "_", "in", "range", "(", "num_classes", ")", "]", "\n", "mark", "=", "dict", "(", ")", "\n", "dataloader_iter", "=", "iter", "(", "dataloader", ")", "\n", "while", "True", ":", "\n", "        ", "inputs", ",", "targets", "=", "next", "(", "dataloader_iter", ")", "\n", "for", "idx", "in", "range", "(", "inputs", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "x", ",", "y", "=", "inputs", "[", "idx", ":", "idx", "+", "1", "]", ",", "targets", "[", "idx", ":", "idx", "+", "1", "]", "\n", "category", "=", "y", ".", "item", "(", ")", "\n", "if", "len", "(", "datas", "[", "category", "]", ")", "==", "samples_per_class", ":", "\n", "                ", "mark", "[", "category", "]", "=", "True", "\n", "continue", "\n", "", "datas", "[", "category", "]", ".", "append", "(", "x", ")", "\n", "labels", "[", "category", "]", ".", "append", "(", "y", ")", "\n", "", "if", "len", "(", "mark", ")", "==", "num_classes", ":", "\n", "            ", "break", "\n", "\n", "", "", "X", ",", "y", "=", "torch", ".", "cat", "(", "[", "torch", ".", "cat", "(", "_", ",", "0", ")", "for", "_", "in", "datas", "]", ")", ",", "torch", ".", "cat", "(", "\n", "[", "torch", ".", "cat", "(", "_", ")", "for", "_", "in", "labels", "]", "\n", ")", ".", "view", "(", "-", "1", ")", "\n", "return", "X", ",", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.tools.pruning_utils.check_sparsity_dict": [[293, 306], ["model_dict.keys", "print", "float", "float", "model_dict[].nelement", "torch.sum", "torch.sum", "torch.sum"], "function", ["None"], ["", "", "", "def", "check_sparsity_dict", "(", "model_dict", ")", ":", "\n", "\n", "    ", "sum_list", "=", "0", "\n", "zero_sum", "=", "0", "\n", "\n", "for", "key", "in", "model_dict", ".", "keys", "(", ")", ":", "\n", "        ", "if", "\"mask\"", "in", "key", ":", "\n", "            ", "sum_list", "=", "sum_list", "+", "float", "(", "model_dict", "[", "key", "]", ".", "nelement", "(", ")", ")", "\n", "zero_sum", "=", "zero_sum", "+", "float", "(", "torch", ".", "sum", "(", "model_dict", "[", "key", "]", "==", "0", ")", ")", "\n", "\n", "", "", "print", "(", "\"* remain weight = \"", ",", "100", "*", "(", "1", "-", "zero_sum", "/", "sum_list", ")", ",", "\"%\"", ")", "\n", "\n", "return", "100", "*", "(", "1", "-", "zero_sum", "/", "sum_list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.tools.pruning_utils.extract_mask": [[308, 317], ["model_dict.keys", "copy.deepcopy"], "function", ["None"], ["", "def", "extract_mask", "(", "model_dict", ")", ":", "\n", "\n", "    ", "new_dict", "=", "{", "}", "\n", "\n", "for", "key", "in", "model_dict", ".", "keys", "(", ")", ":", "\n", "        ", "if", "\"mask\"", "in", "key", ":", "\n", "            ", "new_dict", "[", "key", "]", "=", "copy", ".", "deepcopy", "(", "model_dict", "[", "key", "]", ")", "\n", "\n", "", "", "return", "new_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.tools.pruning_utils.prune_conv": [[319, 343], ["reversed", "model._modules.items", "isinstance", "len", "pruning_utils.prune_conv", "tools.layers.Conv2d", "list", "module.children"], "function", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.tools.pruning_utils.prune_conv"], ["", "def", "prune_conv", "(", "model", ")", ":", "\n", "\n", "    ", "for", "name", ",", "module", "in", "reversed", "(", "model", ".", "_modules", ".", "items", "(", ")", ")", ":", "\n", "\n", "        ", "if", "len", "(", "list", "(", "module", ".", "children", "(", ")", ")", ")", ">", "0", ":", "\n", "            ", "model", ".", "_modules", "[", "name", "]", "=", "prune_conv", "(", "model", "=", "module", ")", "\n", "\n", "", "if", "isinstance", "(", "module", ",", "nn", ".", "Conv2d", ")", ":", "\n", "            ", "bias", "=", "True", "\n", "if", "module", ".", "bias", "==", "None", ":", "\n", "                ", "bias", "=", "False", "\n", "", "layer_new", "=", "Conv2d", "(", "\n", "module", ".", "in_channels", ",", "\n", "module", ".", "out_channels", ",", "\n", "module", ".", "kernel_size", ",", "\n", "module", ".", "stride", ",", "\n", "padding", "=", "module", ".", "padding", ",", "\n", "dilation", "=", "module", ".", "dilation", ",", "\n", "groups", "=", "module", ".", "groups", ",", "\n", "bias", "=", "bias", ",", "\n", ")", "\n", "model", ".", "_modules", "[", "name", "]", "=", "layer_new", "\n", "\n", "", "", "return", "model", "\n", "", ""]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNet.BasicBlock.__init__": [[56, 82], ["torch.Module.__init__", "ResNet.conv3x3", "norm_layer", "torch.ReLU", "torch.ReLU", "ResNet.conv3x3", "norm_layer", "ValueError", "NotImplementedError"], "methods", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.wb.wandb_logger.WandBLogger.__init__", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNet.conv3x3", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNet.conv3x3"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", "=", "1", ",", "\n", "downsample", "=", "None", ",", "\n", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "\n", "dilation", "=", "1", ",", "\n", "norm_layer", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "if", "groups", "!=", "1", "or", "base_width", "!=", "64", ":", "\n", "            ", "raise", "ValueError", "(", "\"BasicBlock only supports groups=1 and base_width=64\"", ")", "\n", "", "if", "dilation", ">", "1", ":", "\n", "            ", "raise", "NotImplementedError", "(", "\"Dilation > 1 not supported in BasicBlock\"", ")", "\n", "# Both self.conv1 and self.downsample layers downsample the input when stride != 1", "\n", "", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNet.BasicBlock.forward": [[83, 100], ["ResNet.BasicBlock.conv1", "ResNet.BasicBlock.bn1", "ResNet.BasicBlock.relu", "ResNet.BasicBlock.conv2", "ResNet.BasicBlock.bn2", "ResNet.BasicBlock.relu", "ResNet.BasicBlock.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNet.Bottleneck.__init__": [[106, 131], ["torch.Module.__init__", "ResNet.conv1x1", "norm_layer", "ResNet.conv3x3", "norm_layer", "ResNet.conv1x1", "norm_layer", "torch.ReLU", "torch.ReLU", "int"], "methods", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.wb.wandb_logger.WandBLogger.__init__", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNet.conv1x1", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNet.conv3x3", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNet.conv1x1"], ["def", "__init__", "(", "\n", "self", ",", "\n", "inplanes", ",", "\n", "planes", ",", "\n", "stride", "=", "1", ",", "\n", "downsample", "=", "None", ",", "\n", "groups", "=", "1", ",", "\n", "base_width", "=", "64", ",", "\n", "dilation", "=", "1", ",", "\n", "norm_layer", "=", "None", ",", "\n", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "width", "=", "int", "(", "planes", "*", "(", "base_width", "/", "64.0", ")", ")", "*", "groups", "\n", "# Both self.conv2 and self.downsample layers downsample the input when stride != 1", "\n", "self", ".", "conv1", "=", "conv1x1", "(", "inplanes", ",", "width", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "width", ",", "width", ",", "stride", ",", "groups", ",", "dilation", ")", "\n", "self", ".", "bn2", "=", "norm_layer", "(", "width", ")", "\n", "self", ".", "conv3", "=", "conv1x1", "(", "width", ",", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "bn3", "=", "norm_layer", "(", "planes", "*", "self", ".", "expansion", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNet.Bottleneck.forward": [[132, 153], ["ResNet.Bottleneck.conv1", "ResNet.Bottleneck.bn1", "ResNet.Bottleneck.relu", "ResNet.Bottleneck.conv2", "ResNet.Bottleneck.bn2", "ResNet.Bottleneck.relu", "ResNet.Bottleneck.conv3", "ResNet.Bottleneck.bn3", "ResNet.Bottleneck.relu", "ResNet.Bottleneck.downsample"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "identity", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "identity", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "out", "+=", "identity", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNet.ResNet.__init__": [[156, 236], ["torch.Module.__init__", "print", "advertorch.utils.NormalizeByChannelMeanStd", "ResNet.ResNet._make_layer", "ResNet.ResNet._make_layer", "ResNet.ResNet._make_layer", "ResNet.ResNet._make_layer", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "ResNet.ResNet.modules", "len", "ValueError", "torch.Conv2d", "torch.Conv2d", "norm_layer", "torch.ReLU", "torch.ReLU", "torch.Identity", "torch.Identity", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d", "isinstance", "ResNet.ResNet.modules", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.constant_", "torch.init.constant_"], "methods", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.wb.wandb_logger.WandBLogger.__init__", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNets.ResNets._make_layer", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNets.ResNets._make_layer", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNets.ResNets._make_layer", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNets.ResNets._make_layer"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "block", ",", "\n", "layers", ",", "\n", "num_classes", "=", "1000", ",", "\n", "zero_init_residual", "=", "False", ",", "\n", "groups", "=", "1", ",", "\n", "width_per_group", "=", "64", ",", "\n", "replace_stride_with_dilation", "=", "None", ",", "\n", "norm_layer", "=", "None", ",", "\n", "imagenet", "=", "False", ",", "\n", ")", ":", "\n", "        ", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "norm_layer", "is", "None", ":", "\n", "            ", "norm_layer", "=", "nn", ".", "BatchNorm2d", "\n", "", "self", ".", "_norm_layer", "=", "norm_layer", "\n", "\n", "self", ".", "inplanes", "=", "64", "\n", "self", ".", "dilation", "=", "1", "\n", "if", "replace_stride_with_dilation", "is", "None", ":", "\n", "# each element in the tuple indicates if we should replace", "\n", "# the 2x2 stride with a dilated convolution instead", "\n", "            ", "replace_stride_with_dilation", "=", "[", "False", ",", "False", ",", "False", "]", "\n", "", "if", "len", "(", "replace_stride_with_dilation", ")", "!=", "3", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "\"replace_stride_with_dilation should be None \"", "\n", "\"or a 3-element tuple, got {}\"", ".", "format", "(", "replace_stride_with_dilation", ")", "\n", ")", "\n", "", "self", ".", "groups", "=", "groups", "\n", "self", ".", "base_width", "=", "width_per_group", "\n", "\n", "print", "(", "\"The normalize layer is contained in the network\"", ")", "\n", "self", ".", "normalize", "=", "NormalizeByChannelMeanStd", "(", "\n", "mean", "=", "[", "0.4914", ",", "0.4822", ",", "0.4465", "]", ",", "std", "=", "[", "0.2470", ",", "0.2435", ",", "0.2616", "]", "\n", ")", "\n", "\n", "if", "not", "imagenet", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn1", "=", "norm_layer", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "Identity", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "3", ",", "self", ".", "inplanes", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "self", ".", "inplanes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "\n", "", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "dilate", "=", "replace_stride_with_dilation", "[", "0", "]", "\n", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "dilate", "=", "replace_stride_with_dilation", "[", "1", "]", "\n", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "\n", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "dilate", "=", "replace_stride_with_dilation", "[", "2", "]", "\n", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "(", "nn", ".", "BatchNorm2d", ",", "nn", ".", "GroupNorm", ")", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n", "# Zero-initialize the last BN in each residual branch,", "\n", "# so that the residual branch starts with zeros, and each residual block behaves like an identity.", "\n", "# This improves the model by 0.2~0.3% according to https://arxiv.org/abs/1706.02677", "\n", "", "", "if", "zero_init_residual", ":", "\n", "            ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "                ", "if", "isinstance", "(", "m", ",", "Bottleneck", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn3", ".", "weight", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "BasicBlock", ")", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bn2", ".", "weight", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNet.ResNet._make_layer": [[237, 277], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "ResNet.conv1x1", "norm_layer", "block"], "methods", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNet.conv1x1"], ["", "", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "dilate", "=", "False", ")", ":", "\n", "        ", "norm_layer", "=", "self", ".", "_norm_layer", "\n", "downsample", "=", "None", "\n", "previous_dilation", "=", "self", ".", "dilation", "\n", "if", "dilate", ":", "\n", "            ", "self", ".", "dilation", "*=", "stride", "\n", "stride", "=", "1", "\n", "", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "conv1x1", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "stride", ")", ",", "\n", "norm_layer", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "\n", "block", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", ",", "\n", "stride", ",", "\n", "downsample", ",", "\n", "self", ".", "groups", ",", "\n", "self", ".", "base_width", ",", "\n", "previous_dilation", ",", "\n", "norm_layer", ",", "\n", ")", "\n", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "_", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "\n", "block", "(", "\n", "self", ".", "inplanes", ",", "\n", "planes", ",", "\n", "groups", "=", "self", ".", "groups", ",", "\n", "base_width", "=", "self", ".", "base_width", ",", "\n", "dilation", "=", "self", ".", "dilation", ",", "\n", "norm_layer", "=", "norm_layer", ",", "\n", ")", "\n", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNet.ResNet._forward_impl": [[278, 298], ["ResNet.ResNet.normalize", "ResNet.ResNet.conv1", "ResNet.ResNet.bn1", "ResNet.ResNet.relu", "ResNet.ResNet.maxpool", "ResNet.ResNet.layer1", "ResNet.ResNet.layer2", "ResNet.ResNet.layer3", "ResNet.ResNet.layer4", "ResNet.ResNet.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "ResNet.ResNet.fc"], "methods", ["None"], ["", "def", "_forward_impl", "(", "self", ",", "x", ")", ":", "\n", "\n", "# See note [TorchScript super()]", "\n", "        ", "x", "=", "self", ".", "normalize", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNet.ResNet.forward": [[299, 301], ["ResNet.ResNet._forward_impl"], "methods", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNet.ResNet._forward_impl"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "_forward_impl", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNet.conv3x3": [[33, 44], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ",", "groups", "=", "1", ",", "dilation", "=", "1", ")", ":", "\n", "    ", "\"\"\"3x3 convolution with padding\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "out_planes", ",", "\n", "kernel_size", "=", "3", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "dilation", ",", "\n", "groups", "=", "groups", ",", "\n", "bias", "=", "False", ",", "\n", "dilation", "=", "dilation", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNet.conv1x1": [[47, 50], ["torch.Conv2d"], "function", ["None"], ["", "def", "conv1x1", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"\"\"1x1 convolution\"\"\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNet._resnet": [[303, 309], ["ResNet.ResNet", "torch.utils.model_zoo.load_url", "ResNet.load_state_dict"], "function", ["None"], ["", "", "def", "_resnet", "(", "arch", ",", "block", ",", "layers", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", ":", "\n", "    ", "model", "=", "ResNet", "(", "block", ",", "layers", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "arch", "]", ",", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNet.resnet18": [[311, 320], ["ResNet._resnet"], "function", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNet._resnet"], ["", "def", "resnet18", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-18 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "\"resnet18\"", ",", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNet.resnet34": [[322, 331], ["ResNet._resnet"], "function", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNet._resnet"], ["", "def", "resnet34", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-34 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "\"resnet34\"", ",", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNet.resnet50": [[333, 342], ["ResNet._resnet"], "function", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNet._resnet"], ["", "def", "resnet50", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-50 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "\"resnet50\"", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNet.resnet101": [[344, 354], ["ResNet._resnet"], "function", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNet._resnet"], ["", "def", "resnet101", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-101 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "\n", "\"resnet101\"", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNet.resnet152": [[357, 367], ["ResNet._resnet"], "function", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNet._resnet"], ["", "def", "resnet152", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNet-152 model from\n    `\"Deep Residual Learning for Image Recognition\" <https://arxiv.org/pdf/1512.03385.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_resnet", "(", "\n", "\"resnet152\"", ",", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNet.resnext50_32x4d": [[370, 382], ["ResNet._resnet"], "function", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNet._resnet"], ["", "def", "resnext50_32x4d", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNeXt-50 32x4d model from\n    `\"Aggregated Residual Transformation for Deep Neural Networks\" <https://arxiv.org/pdf/1611.05431.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "\"groups\"", "]", "=", "32", "\n", "kwargs", "[", "\"width_per_group\"", "]", "=", "4", "\n", "return", "_resnet", "(", "\n", "\"resnext50_32x4d\"", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNet.resnext101_32x8d": [[385, 397], ["ResNet._resnet"], "function", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNet._resnet"], ["", "def", "resnext101_32x8d", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"ResNeXt-101 32x8d model from\n    `\"Aggregated Residual Transformation for Deep Neural Networks\" <https://arxiv.org/pdf/1611.05431.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "\"groups\"", "]", "=", "32", "\n", "kwargs", "[", "\"width_per_group\"", "]", "=", "8", "\n", "return", "_resnet", "(", "\n", "\"resnext101_32x8d\"", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNet.wide_resnet50_2": [[400, 416], ["ResNet._resnet"], "function", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNet._resnet"], ["", "def", "wide_resnet50_2", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Wide ResNet-50-2 model from\n    `\"Wide Residual Networks\" <https://arxiv.org/pdf/1605.07146.pdf>`_\n\n    The model is the same as ResNet except for the bottleneck number of channels\n    which is twice larger in every block. The number of channels in outer 1x1\n    convolutions is the same, e.g. last block in ResNet-50 has 2048-512-2048\n    channels, and in Wide ResNet-50-2 has 2048-1024-2048.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "\"width_per_group\"", "]", "=", "64", "*", "2", "\n", "return", "_resnet", "(", "\n", "\"wide_resnet50_2\"", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNet.wide_resnet101_2": [[419, 435], ["ResNet._resnet"], "function", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNet._resnet"], ["", "def", "wide_resnet101_2", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"Wide ResNet-101-2 model from\n    `\"Wide Residual Networks\" <https://arxiv.org/pdf/1605.07146.pdf>`_\n\n    The model is the same as ResNet except for the bottleneck number of channels\n    which is twice larger in every block. The number of channels in outer 1x1\n    convolutions is the same, e.g. last block in ResNet-50 has 2048-512-2048\n    channels, and in Wide ResNet-50-2 has 2048-1024-2048.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "kwargs", "[", "\"width_per_group\"", "]", "=", "64", "*", "2", "\n", "return", "_resnet", "(", "\n", "\"wide_resnet101_2\"", ",", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "pretrained", ",", "progress", ",", "**", "kwargs", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNets.LambdaLayer.__init__": [[52, 55], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.wb.wandb_logger.WandBLogger.__init__"], ["    ", "def", "__init__", "(", "self", ",", "lambd", ")", ":", "\n", "        ", "super", "(", "LambdaLayer", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "lambd", "=", "lambd", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNets.LambdaLayer.forward": [[56, 58], ["ResNets.LambdaLayer.lambd"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "lambd", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNets.BasicBlock.__init__": [[63, 98], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "ResNets.LambdaLayer", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.pad", "torch.pad", "torch.pad", "torch.pad", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d"], "methods", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.wb.wandb_logger.WandBLogger.__init__"], ["def", "__init__", "(", "self", ",", "in_planes", ",", "planes", ",", "stride", "=", "1", ",", "option", "=", "\"A\"", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", "\n", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "\n", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", ")", "\n", "if", "stride", "!=", "1", "or", "in_planes", "!=", "planes", ":", "\n", "            ", "if", "option", "==", "\"A\"", ":", "\n", "                ", "\"\"\"\n                For CIFAR10 ResNet paper uses option A.\n                \"\"\"", "\n", "self", ".", "shortcut", "=", "LambdaLayer", "(", "\n", "lambda", "x", ":", "F", ".", "pad", "(", "\n", "x", "[", ":", ",", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", ",", "\n", "(", "0", ",", "0", ",", "0", ",", "0", ",", "planes", "//", "4", ",", "planes", "//", "4", ")", ",", "\n", "\"constant\"", ",", "\n", "0", ",", "\n", ")", "\n", ")", "\n", "", "elif", "option", "==", "\"B\"", ":", "\n", "                ", "self", ".", "shortcut", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "\n", "in_planes", ",", "\n", "self", ".", "expansion", "*", "planes", ",", "\n", "kernel_size", "=", "1", ",", "\n", "stride", "=", "stride", ",", "\n", "bias", "=", "False", ",", "\n", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "self", ".", "expansion", "*", "planes", ")", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNets.BasicBlock.forward": [[100, 106], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "ResNets.BasicBlock.bn2", "ResNets.BasicBlock.shortcut", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "ResNets.BasicBlock.bn1", "ResNets.BasicBlock.conv2", "ResNets.BasicBlock.conv1"], "methods", ["None"], ["", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "bn2", "(", "self", ".", "conv2", "(", "out", ")", ")", "\n", "out", "+=", "self", ".", "shortcut", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNets.ResNets.__init__": [[109, 126], ["torch.Module.__init__", "print", "advertorch.utils.NormalizeByChannelMeanStd", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "ResNets.ResNets._make_layer", "ResNets.ResNets._make_layer", "ResNets.ResNets._make_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "ResNets.ResNets.apply"], "methods", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.wb.wandb_logger.WandBLogger.__init__", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNets.ResNets._make_layer", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNets.ResNets._make_layer", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNets.ResNets._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "num_blocks", ",", "num_classes", "=", "10", ")", ":", "\n", "        ", "super", "(", "ResNets", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "in_planes", "=", "16", "\n", "\n", "print", "(", "\"The normalize layer is contained in the network\"", ")", "\n", "self", ".", "normalize", "=", "NormalizeByChannelMeanStd", "(", "\n", "mean", "=", "[", "0.4914", ",", "0.4822", ",", "0.4465", "]", ",", "std", "=", "[", "0.2470", ",", "0.2435", ",", "0.2616", "]", "\n", ")", "\n", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "16", ")", "\n", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "16", ",", "num_blocks", "[", "0", "]", ",", "stride", "=", "1", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "32", ",", "num_blocks", "[", "1", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "num_blocks", "[", "2", "]", ",", "stride", "=", "2", ")", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "64", ",", "num_classes", ")", "\n", "\n", "self", ".", "apply", "(", "_weights_init", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNets.ResNets._make_layer": [[127, 135], ["torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "layers.append", "block"], "methods", ["None"], ["", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "num_blocks", ",", "stride", ")", ":", "\n", "        ", "strides", "=", "[", "stride", "]", "+", "[", "1", "]", "*", "(", "num_blocks", "-", "1", ")", "\n", "layers", "=", "[", "]", "\n", "for", "stride", "in", "strides", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "in_planes", ",", "planes", ",", "stride", ")", ")", "\n", "self", ".", "in_planes", "=", "planes", "*", "block", ".", "expansion", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNets.ResNets.forward": [[136, 146], ["ResNets.ResNets.normalize", "torch.relu", "torch.relu", "torch.relu", "torch.relu", "ResNets.ResNets.layer1", "ResNets.ResNets.layer2", "ResNets.ResNets.layer3", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "ResNets.ResNets.view", "ResNets.ResNets.fc", "ResNets.ResNets.bn1", "ResNets.ResNets.size", "ResNets.ResNets.conv1", "ResNets.ResNets.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "normalize", "(", "x", ")", "\n", "out", "=", "F", ".", "relu", "(", "self", ".", "bn1", "(", "self", ".", "conv1", "(", "x", ")", ")", ")", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "F", ".", "avg_pool2d", "(", "out", ",", "out", ".", "size", "(", ")", "[", "3", "]", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "out", "=", "self", ".", "fc", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNets._weights_init": [[44, 49], ["isinstance", "isinstance", "torch.kaiming_normal_"], "function", ["None"], ["def", "_weights_init", "(", "m", ")", ":", "\n", "    ", "classname", "=", "m", ".", "__class__", ".", "__name__", "\n", "# print(classname)", "\n", "if", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", "or", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "        ", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNets.resnet20s": [[148, 150], ["ResNets.ResNets"], "function", ["None"], ["", "", "def", "resnet20s", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "ResNets", "(", "BasicBlock", ",", "[", "3", ",", "3", ",", "3", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNets.resnet32s": [[152, 154], ["ResNets.ResNets"], "function", ["None"], ["", "def", "resnet32s", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "ResNets", "(", "BasicBlock", ",", "[", "5", ",", "5", ",", "5", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNets.resnet44s": [[156, 158], ["ResNets.ResNets"], "function", ["None"], ["", "def", "resnet44s", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "ResNets", "(", "BasicBlock", ",", "[", "7", ",", "7", ",", "7", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNets.resnet56s": [[160, 162], ["ResNets.ResNets"], "function", ["None"], ["", "def", "resnet56s", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "ResNets", "(", "BasicBlock", ",", "[", "9", ",", "9", ",", "9", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNets.resnet110s": [[164, 166], ["ResNets.ResNets"], "function", ["None"], ["", "def", "resnet110s", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "ResNets", "(", "BasicBlock", ",", "[", "18", ",", "18", ",", "18", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.ResNets.resnet1202s": [[168, 170], ["ResNets.ResNets"], "function", ["None"], ["", "def", "resnet1202s", "(", "num_classes", "=", "10", ")", ":", "\n", "    ", "return", "ResNets", "(", "BasicBlock", ",", "[", "200", ",", "200", ",", "200", "]", ",", "num_classes", "=", "num_classes", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.VGG.VGG.__init__": [[32, 44], ["torch.Module.__init__", "torch.AdaptiveAvgPool2d", "torch.AdaptiveAvgPool2d", "torch.Linear", "torch.Linear", "print", "advertorch.utils.NormalizeByChannelMeanStd", "VGG.VGG._initialize_weights"], "methods", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.wb.wandb_logger.WandBLogger.__init__", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.VGG.VGG._initialize_weights"], ["    ", "def", "__init__", "(", "self", ",", "features", ",", "num_classes", "=", "10", ",", "init_weights", "=", "True", ")", ":", "\n", "        ", "super", "(", "VGG", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "features", "=", "features", "\n", "self", ".", "avgpool", "=", "nn", ".", "AdaptiveAvgPool2d", "(", "(", "1", ",", "1", ")", ")", "\n", "self", ".", "classifier", "=", "nn", ".", "Linear", "(", "512", ",", "num_classes", ")", "\n", "print", "(", "\"The normalize layer is contained in the network\"", ")", "\n", "self", ".", "normalize", "=", "NormalizeByChannelMeanStd", "(", "\n", "mean", "=", "[", "0.4914", ",", "0.4822", ",", "0.4465", "]", ",", "std", "=", "[", "0.2470", ",", "0.2435", ",", "0.2616", "]", "\n", ")", "\n", "\n", "if", "init_weights", ":", "\n", "            ", "self", ".", "_initialize_weights", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.VGG.VGG.forward": [[45, 52], ["VGG.VGG.normalize", "VGG.VGG.features", "VGG.VGG.avgpool", "torch.flatten", "torch.flatten", "torch.flatten", "torch.flatten", "VGG.VGG.classifier"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "normalize", "(", "x", ")", "\n", "x", "=", "self", ".", "features", "(", "x", ")", "\n", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "x", "=", "torch", ".", "flatten", "(", "x", ",", "1", ")", "\n", "x", "=", "self", ".", "classifier", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.VGG.VGG._initialize_weights": [[53, 65], ["VGG.VGG.modules", "isinstance", "torch.init.kaiming_normal_", "torch.init.kaiming_normal_", "isinstance", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "torch.init.constant_", "isinstance", "torch.init.normal_", "torch.init.normal_", "torch.init.constant_", "torch.init.constant_"], "methods", ["None"], ["", "def", "_initialize_weights", "(", "self", ")", ":", "\n", "        ", "for", "m", "in", "self", ".", "modules", "(", ")", ":", "\n", "            ", "if", "isinstance", "(", "m", ",", "nn", ".", "Conv2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "kaiming_normal_", "(", "m", ".", "weight", ",", "mode", "=", "\"fan_out\"", ",", "nonlinearity", "=", "\"relu\"", ")", "\n", "if", "m", ".", "bias", "is", "not", "None", ":", "\n", "                    ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "BatchNorm2d", ")", ":", "\n", "                ", "nn", ".", "init", ".", "constant_", "(", "m", ".", "weight", ",", "1", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "", "elif", "isinstance", "(", "m", ",", "nn", ".", "Linear", ")", ":", "\n", "                ", "nn", ".", "init", ".", "normal_", "(", "m", ".", "weight", ",", "0", ",", "0.01", ")", "\n", "nn", ".", "init", ".", "constant_", "(", "m", ".", "bias", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.VGG.make_layers": [[67, 81], ["torch.Sequential", "torch.Conv2d", "torch.MaxPool2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "function", ["None"], ["", "", "", "", "def", "make_layers", "(", "cfg", ",", "batch_norm", "=", "False", ")", ":", "\n", "    ", "layers", "=", "[", "]", "\n", "in_channels", "=", "3", "\n", "for", "v", "in", "cfg", ":", "\n", "        ", "if", "v", "==", "\"M\"", ":", "\n", "            ", "layers", "+=", "[", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "]", "\n", "", "else", ":", "\n", "            ", "conv2d", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "v", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", "\n", "if", "batch_norm", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "BatchNorm2d", "(", "v", ")", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "else", ":", "\n", "                ", "layers", "+=", "[", "conv2d", ",", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "]", "\n", "", "in_channels", "=", "v", "\n", "", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.VGG._vgg": [[130, 138], ["VGG.VGG", "VGG.make_layers", "torch.utils.model_zoo.load_url", "VGG.load_state_dict"], "function", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.VGG.make_layers"], ["def", "_vgg", "(", "arch", ",", "cfg", ",", "batch_norm", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", ":", "\n", "    ", "if", "pretrained", ":", "\n", "        ", "kwargs", "[", "\"init_weights\"", "]", "=", "False", "\n", "", "model", "=", "VGG", "(", "make_layers", "(", "cfgs", "[", "cfg", "]", ",", "batch_norm", "=", "batch_norm", ")", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "state_dict", "=", "load_state_dict_from_url", "(", "model_urls", "[", "arch", "]", ",", "progress", "=", "progress", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.VGG.vgg11": [[140, 149], ["VGG._vgg"], "function", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.VGG._vgg"], ["", "def", "vgg11", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"VGG 11-layer model (configuration \"A\") from\n    `\"Very Deep Convolutional Networks For Large-Scale Image Recognition\" <https://arxiv.org/pdf/1409.1556.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "\"vgg11\"", ",", "\"A\"", ",", "False", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.VGG.vgg11_bn": [[151, 160], ["VGG._vgg"], "function", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.VGG._vgg"], ["", "def", "vgg11_bn", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"VGG 11-layer model (configuration \"A\") with batch normalization\n    `\"Very Deep Convolutional Networks For Large-Scale Image Recognition\" <https://arxiv.org/pdf/1409.1556.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "\"vgg11_bn\"", ",", "\"A\"", ",", "True", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.VGG.vgg13": [[162, 171], ["VGG._vgg"], "function", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.VGG._vgg"], ["", "def", "vgg13", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"VGG 13-layer model (configuration \"B\")\n    `\"Very Deep Convolutional Networks For Large-Scale Image Recognition\" <https://arxiv.org/pdf/1409.1556.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "\"vgg13\"", ",", "\"B\"", ",", "False", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.VGG.vgg13_bn": [[173, 182], ["VGG._vgg"], "function", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.VGG._vgg"], ["", "def", "vgg13_bn", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"VGG 13-layer model (configuration \"B\") with batch normalization\n    `\"Very Deep Convolutional Networks For Large-Scale Image Recognition\" <https://arxiv.org/pdf/1409.1556.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "\"vgg13_bn\"", ",", "\"B\"", ",", "True", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.VGG.vgg16": [[184, 193], ["VGG._vgg"], "function", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.VGG._vgg"], ["", "def", "vgg16", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"VGG 16-layer model (configuration \"D\")\n    `\"Very Deep Convolutional Networks For Large-Scale Image Recognition\" <https://arxiv.org/pdf/1409.1556.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "\"vgg16\"", ",", "\"D\"", ",", "False", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.VGG.vgg16_bn": [[195, 204], ["VGG._vgg"], "function", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.VGG._vgg"], ["", "def", "vgg16_bn", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"VGG 16-layer model (configuration \"D\") with batch normalization\n    `\"Very Deep Convolutional Networks For Large-Scale Image Recognition\" <https://arxiv.org/pdf/1409.1556.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "\"vgg16_bn\"", ",", "\"D\"", ",", "True", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.VGG.vgg19": [[206, 215], ["VGG._vgg"], "function", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.VGG._vgg"], ["", "def", "vgg19", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"VGG 19-layer model (configuration \"E\")\n    `\"Very Deep Convolutional Networks For Large-Scale Image Recognition\" <https://arxiv.org/pdf/1409.1556.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "\"vgg19\"", ",", "\"E\"", ",", "False", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.VGG.vgg19_bn": [[217, 226], ["VGG._vgg"], "function", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.models.VGG._vgg"], ["", "def", "vgg19_bn", "(", "pretrained", "=", "False", ",", "progress", "=", "True", ",", "**", "kwargs", ")", ":", "\n", "    ", "r\"\"\"VGG 19-layer model (configuration 'E') with batch normalization\n    `\"Very Deep Convolutional Networks For Large-Scale Image Recognition\" <https://arxiv.org/pdf/1409.1556.pdf>`_\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n        progress (bool): If True, displays a progress bar of the download to stderr\n    \"\"\"", "\n", "return", "_vgg", "(", "\"vgg19_bn\"", ",", "\"E\"", ",", "True", ",", "pretrained", ",", "progress", ",", "**", "kwargs", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.wb.wandb_logger.WandBLogger.__init__": [[26, 59], ["wandb_logger.WandBLogger._import_wandb", "wandb_logger.WandBLogger._args_parse", "wandb_logger.WandBLogger._before_job"], "methods", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.wb.wandb_logger.WandBLogger._import_wandb", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.wb.wandb_logger.WandBLogger._args_parse", "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.wb.wandb_logger.WandBLogger._before_job"], ["def", "__init__", "(", "\n", "self", ",", "\n", "project_name", ":", "str", "=", "\"APP\"", ",", "\n", "run_name", ":", "str", "=", "\"Prune1\"", ",", "\n", "save_code", ":", "bool", "=", "True", ",", "\n", "config", ":", "object", "=", "None", ",", "\n", "dir", ":", "Union", "[", "str", ",", "Path", "]", "=", "None", ",", "\n", "model", ":", "object", "=", "None", ",", "\n", "params", ":", "dict", "=", "None", ",", "\n", ")", "->", "None", ":", "\n", "        ", "\"\"\"\n        Creates an instance of the `WandBLogger`.\n        :param project_name: Name of the W&B project.\n        :param run_name: Name of the W&B run.\n        :param save_code: Saves the main training script to W&B.\n        :param dir: Path to the local log directory for W&B logs to be saved at.\n        :param config: Syncs hyper-parameters and config values used to W&B.\n        :param params: All arguments for wandb.init() function call.\n        Visit https://docs.wandb.ai/ref/python/init to learn about all\n        wand.init() parameters.\n        \"\"\"", "\n", "\n", "self", ".", "project_name", "=", "project_name", "\n", "self", ".", "run_name", "=", "run_name", "\n", "self", ".", "save_code", "=", "save_code", "\n", "self", ".", "dir", "=", "dir", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "model", "=", "model", "\n", "self", ".", "params", "=", "params", "\n", "\n", "self", ".", "_import_wandb", "(", ")", "\n", "self", ".", "_args_parse", "(", ")", "\n", "self", ".", "_before_job", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.wb.wandb_logger.WandBLogger._import_wandb": [[60, 68], ["hasattr", "ImportError"], "methods", ["None"], ["", "def", "_import_wandb", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "import", "wandb", "\n", "\n", "assert", "hasattr", "(", "wandb", ",", "\"__version__\"", ")", "\n", "", "except", "(", "ImportError", ",", "AssertionError", ")", ":", "\n", "            ", "raise", "ImportError", "(", "'Please run \"pip install wandb\" to install wandb'", ")", "\n", "", "self", ".", "wandb", "=", "wandb", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.wb.wandb_logger.WandBLogger._args_parse": [[69, 79], ["wandb_logger.WandBLogger.init_kwargs.update"], "methods", ["home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.None.main_anytime_one.AverageMeter.update"], ["", "def", "_args_parse", "(", "self", ")", ":", "\n", "        ", "self", ".", "init_kwargs", "=", "{", "\n", "\"project\"", ":", "self", ".", "project_name", ",", "\n", "\"name\"", ":", "self", ".", "run_name", ",", "\n", "\"save_code\"", ":", "self", ".", "save_code", ",", "\n", "\"dir\"", ":", "self", ".", "dir", ",", "\n", "\"config\"", ":", "self", ".", "config", ",", "\n", "}", "\n", "if", "self", ".", "params", ":", "\n", "            ", "self", ".", "init_kwargs", ".", "update", "(", "self", ".", "params", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.wb.wandb_logger.WandBLogger._before_job": [[80, 89], ["wandb_logger.WandBLogger.import_wandb", "wandb_logger.WandBLogger.wandb.init", "wandb_logger.WandBLogger.wandb.init", "wandb_logger.WandBLogger.wandb.watch"], "methods", ["None"], ["", "", "def", "_before_job", "(", "self", ")", ":", "\n", "        ", "if", "self", ".", "wandb", "is", "None", ":", "\n", "            ", "self", ".", "import_wandb", "(", ")", "\n", "", "if", "self", ".", "init_kwargs", ":", "\n", "            ", "self", ".", "wandb", ".", "init", "(", "**", "self", ".", "init_kwargs", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "wandb", ".", "init", "(", ")", "\n", "", "if", "self", ".", "model", "is", "not", "None", ":", "\n", "            ", "self", ".", "wandb", ".", "watch", "(", "self", ".", "model", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.landskape-ai_progressive-pruning.wb.wandb_logger.WandBLogger.log_metrics": [[90, 132], ["log_dict.items", "isinstance", "wandb_logger.WandBLogger.wandb.log", "isinstance", "isinstance", "isinstance", "isinstance", "wandb_logger.WandBLogger.wandb.log", "wandb_logger.WandBLogger.wandb.log", "PIL.Image.open", "wandb_logger.WandBLogger.wandb.log", "wandb_logger.WandBLogger.wandb.log", "key.lower", "wandb_logger.WandBLogger.wandb.log", "key.lower", "wandb_logger.WandBLogger.wandb.log", "key.lower", "wandb_logger.WandBLogger.wandb.log", "wandb_logger.WandBLogger.wandb.Image", "wandb_logger.WandBLogger.wandb.Image"], "methods", ["None"], ["", "", "def", "log_metrics", "(", "\n", "self", ",", "\n", "log_dict", ":", "dict", "=", "None", ",", "\n", "img", ":", "Union", "[", "Image", ",", "Figure", ",", "str", ",", "Path", "]", "=", "None", ",", "\n", "curve", ":", "object", "=", "None", ",", "\n", ")", "->", "None", ":", "\n", "        ", "for", "key", ",", "value", "in", "log_dict", ".", "items", "(", ")", ":", "\n", "\n", "            ", "if", "isinstance", "(", "value", ",", "(", "int", ",", "float", ",", "Tensor", ")", ")", ":", "\n", "                ", "self", ".", "wandb", ".", "log", "(", "{", "key", ":", "value", "}", ")", "\n", "", "else", ":", "\n", "                ", "if", "\"ARE\"", "in", "key", ":", "\n", "                    ", "curr_val", "=", "value", "\n", "", "else", ":", "\n", "                    ", "curr_val", "=", "value", "[", "-", "1", "]", "\n", "\n", "", "if", "isinstance", "(", "curr_val", ",", "(", "int", ",", "float", ",", "Tensor", ")", ")", ":", "\n", "                    ", "if", "\"train\"", "in", "key", ".", "lower", "(", ")", ":", "\n", "                        ", "key", "=", "\"Train/\"", "+", "key", "\n", "self", ".", "wandb", ".", "log", "(", "{", "key", ":", "curr_val", "}", ")", "\n", "", "if", "\"val\"", "in", "key", ".", "lower", "(", ")", ":", "\n", "                        ", "key", "=", "\"Val/\"", "+", "key", "\n", "self", ".", "wandb", ".", "log", "(", "{", "key", ":", "curr_val", "}", ")", "\n", "", "if", "\"test\"", "in", "key", ".", "lower", "(", ")", ":", "\n", "                        ", "key", "=", "\"Test/\"", "+", "key", "\n", "self", ".", "wandb", ".", "log", "(", "{", "key", ":", "curr_val", "}", ")", "\n", "", "self", ".", "wandb", ".", "log", "(", "{", "key", ":", "curr_val", "}", ")", "\n", "\n", "", "else", ":", "\n", "                    ", "return", "\n", "\n", "", "", "if", "img", "is", "not", "None", ":", "\n", "                ", "if", "isinstance", "(", "img", ",", "(", "Image", ",", "Figure", ")", ")", ":", "\n", "                    ", "self", ".", "wandb", ".", "log", "(", "{", "\"Media/Training Curve\"", ":", "self", ".", "wandb", ".", "Image", "(", "img", ")", "}", ")", "\n", "\n", "", "if", "isinstance", "(", "img", ",", "(", "str", ",", "Path", ")", ")", ":", "\n", "                    ", "img_pil", "=", "PIL", ".", "Image", ".", "open", "(", "img", ")", "\n", "self", ".", "wandb", ".", "log", "(", "{", "\"Media/Training Curve\"", ":", "self", ".", "wandb", ".", "Image", "(", "img_pil", ")", "}", ")", "\n", "\n", "", "", "if", "curve", "is", "not", "None", ":", "\n", "                ", "if", "isinstance", "(", "curve", ",", "(", "object", ")", ")", ":", "\n", "                    ", "self", ".", "wandb", ".", "log", "(", "{", "\"Training Curves\"", ":", "curve", "}", ")", "\n", "", "", "", "", "", ""]]}