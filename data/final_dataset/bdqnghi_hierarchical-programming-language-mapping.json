{"home.repos.pwc.inspect_result.bdqnghi_hierarchical-programming-language-mapping.code.process_srcml_data.pre_process": [[20, 58], ["file_path.split", "xml_util.parse_tree", "xml_util.get_parent_map", "xml_util.parse_tree.getroot", "xml_util.iterate_recursive", "util.process_srcml_source_code", "os.path.join", "os.path.join", "os.path.exists", "os.makedirs", "codecs.open", "f2.write", "print"], "function", ["None"], ["def", "pre_process", "(", "file_path", ")", ":", "\n", "\n", "\n", "\n", "\t", "split", "=", "file_path", ".", "split", "(", "\"/\"", ")", "\n", "try", ":", "\n", "\t\t", "tree", "=", "parse_tree", "(", "file_path", ")", "\n", "file_type", "=", "0", "\n", "if", "split", "[", "7", "]", "==", "\"cs\"", ":", "\n", "\t\t\t", "file_type", "=", "1", "\n", "\n", "", "parent_map", "=", "get_parent_map", "(", "tree", ")", "\n", "tree_str", "=", "\"\"", "\n", "root", "=", "tree", ".", "getroot", "(", ")", "\n", "# C#", "\n", "# if file_type == 1:", "\n", "\n", "\n", "# \tnamespace = find_name_space(root)", "\n", "# \tbiggest_block = find_block(namespace)", "\n", "# \tprocessed_code =  iterate_recursive(biggest_block,tree_str,parent_map)", "\n", "\n", "# # Java", "\n", "# else:", "\n", "processed_code", "=", "iterate_recursive", "(", "root", ",", "tree_str", ",", "parent_map", ")", "\n", "processed_code", "=", "process_srcml_source_code", "(", "processed_code", ")", "\n", "# print(processed_code)", "\n", "srcml_data_path", "=", "os", ".", "path", ".", "join", "(", "CURRENT_DIR", ",", "\"SRCML_PROCESSED_DATA_SPLIT_CAMEL_ALL_V3\"", ",", "split", "[", "6", "]", ",", "split", "[", "7", "]", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "srcml_data_path", ")", ":", "\n", "\t\t\t", "os", ".", "makedirs", "(", "srcml_data_path", ")", "\n", "\n", "", "new_path", "=", "os", ".", "path", ".", "join", "(", "CURRENT_DIR", ",", "\"SRCML_PROCESSED_DATA_SPLIT_CAMEL_ALL_V3\"", ",", "split", "[", "6", "]", ",", "split", "[", "7", "]", ",", "split", "[", "8", "]", ")", "\n", "\n", "with", "codecs", ".", "open", "(", "new_path", ",", "\"a\"", ",", "encoding", "=", "\"utf-8\"", ",", "errors", "=", "\"ignore\"", ")", "as", "f2", ":", "\n", "\t\t\t", "f2", ".", "write", "(", "processed_code", ")", "\n", "\n", "", "", "except", "Exception", "as", "e", ":", "\n", "\t\t", "print", "(", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.bdqnghi_hierarchical-programming-language-mapping.code.pre_process.pre_process": [[13, 29], ["os.remove", "codecs.open", "f.read", "str", "util.process_source_code_with_remove_line_break", "codecs.open", "f2.write", "print", "str"], "function", ["None"], ["def", "pre_process", "(", "file_path", ")", ":", "\n", "\t", "with", "codecs", ".", "open", "(", "file_path", ",", "\"r\"", ",", "encoding", "=", "\"utf-8\"", ",", "errors", "=", "\"ignore\"", ")", "as", "f", ":", "\n", "\t\t", "data", "=", "f", ".", "read", "(", ")", "\n", "", "try", ":", "\n", "\t\t", "data", "=", "str", "(", "data", ")", "\n", "data", "=", "process_source_code_with_remove_line_break", "(", "data", ")", "\n", "\n", "", "except", "Exception", "as", "e", ":", "\n", "\t\t", "print", "(", "\"error : \"", "+", "str", "(", "e", ")", ")", "\n", "\n", "# print(data)", "\n", "\n", "\n", "", "os", ".", "remove", "(", "file_path", ")", "\n", "with", "codecs", ".", "open", "(", "file_path", ",", "\"a\"", ",", "encoding", "=", "\"utf-8\"", ",", "errors", "=", "\"ignore\"", ")", "as", "f2", ":", "\n", "\t\t", "f2", ".", "write", "(", "data", ")", "\n", "\n"]]}