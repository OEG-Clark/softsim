{"home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.it_ptcnn.PTCNNImageTranslator.__init__": [[28, 84], ["ssi.base.ImageTranslatorBase.__init__", "torch.device", "ssi.utils.log.log.lprint", "torch.cuda.device_count"], "methods", ["home.repos.pwc.inspect_result.royerlab_ssi-code.optimisers.esadam.ESAdam.__init__", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint"], ["def", "__init__", "(", "\n", "self", ",", "\n", "max_epochs", "=", "2048", ",", "\n", "patience", "=", "None", ",", "\n", "patience_epsilon", "=", "0.0", ",", "\n", "learning_rate", "=", "0.01", ",", "\n", "batch_size", "=", "8", ",", "\n", "model_class", "=", "UNet", ",", "\n", "masking", "=", "True", ",", "\n", "masking_density", "=", "0.01", ",", "\n", "loss", "=", "'l1'", ",", "\n", "normaliser_type", "=", "'percentile'", ",", "\n", "balance_training_data", "=", "None", ",", "\n", "keep_ratio", "=", "1", ",", "\n", "max_voxels_for_training", "=", "4e6", ",", "\n", "monitor", "=", "None", ",", "\n", "use_cuda", "=", "True", ",", "\n", "device_index", "=", "0", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Constructs an image translator using the pytorch deep learning library.\n\n        :param normaliser_type: normaliser type\n        :param balance_training_data: balance data ? (limits number training entries per target value histogram bin)\n        :param monitor: monitor to track progress of training externally (used by UI)\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "normaliser_type", ",", "monitor", "=", "monitor", ")", "\n", "\n", "use_cuda", "=", "use_cuda", "and", "(", "torch", ".", "cuda", ".", "device_count", "(", ")", ">", "0", ")", "\n", "self", ".", "device", "=", "torch", ".", "device", "(", "f\"cuda:{device_index}\"", "if", "use_cuda", "else", "\"cpu\"", ")", "\n", "lprint", "(", "f\"Using device: {self.device}\"", ")", "\n", "\n", "self", ".", "max_epochs", "=", "max_epochs", "\n", "self", ".", "patience", "=", "max_epochs", "if", "patience", "is", "None", "else", "patience", "\n", "self", ".", "patience_epsilon", "=", "patience_epsilon", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "loss", "=", "loss", "\n", "self", ".", "max_voxels_for_training", "=", "max_voxels_for_training", "\n", "self", ".", "keep_ratio", "=", "keep_ratio", "\n", "self", ".", "balance_training_data", "=", "balance_training_data", "\n", "\n", "self", ".", "model_class", "=", "model_class", "\n", "\n", "self", ".", "l1_weight_regularisation", "=", "1e-6", "\n", "self", ".", "l2_weight_regularisation", "=", "1e-6", "\n", "self", ".", "training_noise", "=", "0.1", "\n", "self", ".", "reload_best_model_period", "=", "max_epochs", "# //2", "\n", "self", ".", "reduce_lr_patience", "=", "patience", "//", "2", "\n", "self", ".", "reduce_lr_factor", "=", "0.9", "\n", "self", ".", "masking", "=", "masking", "\n", "self", ".", "masking_density", "=", "masking_density", "\n", "self", ".", "optimiser_class", "=", "ESAdam", "\n", "self", ".", "max_tile_size", "=", "1024", "# TODO: adjust based on available memory", "\n", "\n", "self", ".", "_stop_training_flag", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.it_ptcnn.PTCNNImageTranslator._train": [[85, 194], ["min", "int", "ssi.utils.log.log.lprint", "tuple", "ssi.utils.log.log.lprint", "ssi.utils.log.log.lprint", "it_ptcnn.PTCNNImageTranslator._get_dataset", "ssi.utils.log.log.lprint", "ssi.utils.log.log.lprint", "torch.utils.data.DataLoader", "it_ptcnn.PTCNNImageTranslator.model_class().to", "sum", "ssi.utils.log.log.lprint", "ssi.utils.log.log.lprint", "ssi.utils.log.log.lprint", "it_ptcnn.PTCNNImageTranslator.optimiser_class", "ssi.utils.log.log.lprint", "torch.nn.L1Loss", "it_ptcnn.PTCNNImageTranslator._train_loop", "min", "ssi.models.masking.Masking().to", "itertools.chain", "it_ptcnn.PTCNNImageTranslator.loss.lower", "ssi.utils.log.log.lprint", "numpy.random.randint", "it_ptcnn.PTCNNImageTranslator.model_class", "p.numel", "it_ptcnn.PTCNNImageTranslator.model.parameters", "it_ptcnn.PTCNNImageTranslator.loss.lower", "ssi.utils.log.log.lprint", "len", "it_ptcnn.PTCNNImageTranslator.model.parameters", "ssi.models.masking.Masking", "torch.abs", "torch.abs", "torch.abs"], "methods", ["home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.it_ptcnn.PTCNNImageTranslator._get_dataset", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.ssi_deconv.SSIDeconvolution._train_loop", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint"], ["", "def", "_train", "(", "\n", "self", ",", "\n", "input_image", ",", "\n", "target_image", ",", "\n", "train_valid_ratio", "=", "0.1", ",", "\n", "callback_period", "=", "3", ",", "\n", "jinv", "=", "False", ",", "\n", ")", ":", "\n", "        ", "self", ".", "_stop_training_flag", "=", "False", "\n", "\n", "if", "jinv", "is", "not", "None", "and", "not", "jinv", ":", "\n", "            ", "self", ".", "masking", "=", "False", "\n", "\n", "", "shape", "=", "input_image", ".", "shape", "\n", "num_batches", "=", "shape", "[", "0", "]", "\n", "num_input_channels", "=", "input_image", ".", "shape", "[", "1", "]", "\n", "num_output_channels", "=", "target_image", ".", "shape", "[", "1", "]", "\n", "num_spatiotemp_dim", "=", "input_image", ".", "ndim", "-", "2", "\n", "\n", "# tile size:", "\n", "tile_size", "=", "min", "(", "self", ".", "max_tile_size", ",", "min", "(", "shape", "[", "2", ":", "]", ")", ")", "\n", "\n", "# Decide on how many voxels to be used for validation:", "\n", "num_val_voxels", "=", "int", "(", "train_valid_ratio", "*", "input_image", ".", "size", ")", "\n", "lprint", "(", "\n", "f\"Number of voxels used for validation: {num_val_voxels} (train_valid_ratio={train_valid_ratio})\"", "\n", ")", "\n", "\n", "# Generate random coordinates for these voxels:", "\n", "val_voxels", "=", "tuple", "(", "numpy", ".", "random", ".", "randint", "(", "d", ",", "size", "=", "num_val_voxels", ")", "for", "d", "in", "shape", ")", "\n", "lprint", "(", "f\"Validation voxel coordinates: {val_voxels}\"", ")", "\n", "\n", "# Training Tile size:", "\n", "lprint", "(", "f\"Train Tile dimensions: {tile_size}\"", ")", "\n", "\n", "# Prepare Training Dataset:", "\n", "dataset", "=", "self", ".", "_get_dataset", "(", "\n", "input_image", ",", "\n", "target_image", ",", "\n", "self", ".", "self_supervised", ",", "\n", "tilesize", "=", "tile_size", ",", "\n", "mode", "=", "'grid'", ",", "\n", "validation_voxels", "=", "val_voxels", ",", "\n", "batch_size", "=", "self", ".", "batch_size", "\n", ")", "\n", "lprint", "(", "f\"Number tiles for training: {len(dataset)}\"", ")", "\n", "\n", "# Training Data Loader:", "\n", "# num_workers = max(3, os.cpu_count() // 2)", "\n", "num_workers", "=", "0", "# faster if data is already in memory...", "\n", "lprint", "(", "f\"Number of workers for loading training/validation data: {num_workers}\"", ")", "\n", "data_loader", "=", "torch", ".", "utils", ".", "data", ".", "DataLoader", "(", "\n", "dataset", ",", "\n", "batch_size", "=", "1", ",", "# self.batch_size,", "\n", "shuffle", "=", "True", ",", "\n", "num_workers", "=", "num_workers", ",", "\n", "pin_memory", "=", "True", ",", "\n", ")", "\n", "\n", "# Model", "\n", "self", ".", "model", "=", "self", ".", "model_class", "(", "num_input_channels", ",", "num_output_channels", ",", "ndim", "=", "num_spatiotemp_dim", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "number_of_parameters", "=", "sum", "(", "\n", "p", ".", "numel", "(", ")", "for", "p", "in", "self", ".", "model", ".", "parameters", "(", ")", "if", "p", ".", "requires_grad", "\n", ")", "\n", "lprint", "(", "\n", "f\"Number of trainable parameters in {self.model_class} model: {number_of_parameters}\"", "\n", ")", "\n", "\n", "if", "self", ".", "masking", ":", "\n", "            ", "self", ".", "masked_model", "=", "Masking", "(", "self", ".", "model", ",", "density", "=", "0.5", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "", "lprint", "(", "f\"Optimiser class: {self.optimiser_class}\"", ")", "\n", "lprint", "(", "f\"Learning rate : {self.learning_rate}\"", ")", "\n", "\n", "# Optimiser:", "\n", "optimizer", "=", "self", ".", "optimiser_class", "(", "\n", "chain", "(", "self", ".", "model", ".", "parameters", "(", ")", ")", ",", "\n", "lr", "=", "self", ".", "learning_rate", ",", "\n", "start_noise_level", "=", "self", ".", "training_noise", ",", "\n", "weight_decay", "=", "self", ".", "l2_weight_regularisation", ",", "\n", ")", "\n", "\n", "lprint", "(", "f\"Optimiser: {optimizer}\"", ")", "\n", "\n", "# Denoise loss functon:", "\n", "loss_function", "=", "nn", ".", "L1Loss", "(", ")", "\n", "if", "self", ".", "loss", ".", "lower", "(", ")", "==", "'l2'", ":", "\n", "            ", "lprint", "(", "f\"Training/Validation loss: L2\"", ")", "\n", "if", "self", ".", "masking", ":", "\n", "                ", "loss_function", "=", "(", "\n", "lambda", "u", ",", "v", ",", "m", ":", "(", "u", "-", "v", ")", "**", "2", "if", "m", "is", "None", "else", "(", "(", "u", "-", "v", ")", "*", "m", ")", "**", "2", "\n", ")", "\n", "", "else", ":", "\n", "                ", "loss_function", "=", "lambda", "u", ",", "v", ":", "(", "u", "-", "v", ")", "**", "2", "\n", "\n", "", "", "elif", "self", ".", "loss", ".", "lower", "(", ")", "==", "'l1'", ":", "\n", "            ", "if", "self", ".", "masking", ":", "\n", "                ", "loss_function", "=", "(", "\n", "lambda", "u", ",", "v", ",", "m", ":", "torch", ".", "abs", "(", "u", "-", "v", ")", "\n", "if", "m", "is", "None", "\n", "else", "torch", ".", "abs", "(", "(", "u", "-", "v", ")", "*", "m", ")", "\n", ")", "\n", "", "else", ":", "\n", "                ", "loss_function", "=", "lambda", "u", ",", "v", ":", "torch", ".", "abs", "(", "u", "-", "v", ")", "\n", "", "lprint", "(", "f\"Training/Validation loss: L1\"", ")", "\n", "\n", "# Start training:", "\n", "", "self", ".", "_train_loop", "(", "data_loader", ",", "optimizer", ",", "loss_function", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.it_ptcnn.PTCNNImageTranslator._get_dataset": [[195, 279], ["_Dataset", "numpy.concatenate.reshape", "numpy.concatenate", "numpy.concatenate.reshape", "numpy.zeros_like", "numpy.zeros_like.reshape", "numpy.concatenate", "numpy.concatenate.reshape", "numpy.concatenate", "numpy.concatenate", "ssi.utils.array.nd.extract_tiles", "numpy.concatenate.reshape", "numpy.concatenate", "numpy.concatenate.reshape", "len", "extract"], "methods", ["home.repos.pwc.inspect_result.royerlab_ssi-code.array.nd.extract_tiles"], ["", "def", "_get_dataset", "(", "\n", "self", ",", "\n", "input_image", ":", "numpy", ".", "ndarray", ",", "\n", "target_image", ":", "numpy", ".", "ndarray", ",", "\n", "self_supervised", ":", "bool", ",", "\n", "tilesize", ":", "int", ",", "\n", "mode", ":", "str", ",", "\n", "validation_voxels", ",", "\n", "batch_size", "=", "32", "\n", ")", ":", "\n", "        ", "class", "_Dataset", "(", "Dataset", ")", ":", "\n", "            ", "def", "__init__", "(", "self", ",", "input_image", ",", "target_image", ",", "tilesize", ")", ":", "\n", "                ", "\"\"\"\n                \"\"\"", "\n", "\n", "if", "batch_size", ">", "1", ":", "\n", "                    ", "input_image", "=", "numpy", ".", "concatenate", "(", "[", "input_image", "for", "_", "in", "range", "(", "16", ")", "]", ",", "axis", "=", "0", ")", "\n", "target_image", "=", "numpy", ".", "concatenate", "(", "[", "target_image", "for", "_", "in", "range", "(", "16", ")", "]", ",", "axis", "=", "0", ")", "\n", "\n", "", "num_channels_input", "=", "input_image", ".", "shape", "[", "1", "]", "\n", "num_channels_target", "=", "target_image", ".", "shape", "[", "1", "]", "\n", "\n", "def", "extract", "(", "image", ")", ":", "\n", "                    ", "return", "extract_tiles", "(", "\n", "image", ",", "\n", "tile_size", "=", "tilesize", ",", "\n", "extraction_step", "=", "tilesize", ",", "\n", "flatten", "=", "True", ",", "\n", ")", "\n", "\n", "", "bc_flat_input_image", "=", "input_image", ".", "reshape", "(", "-", "1", ",", "*", "input_image", ".", "shape", "[", "2", ":", "]", ")", "\n", "bc_flat_input_tiles", "=", "numpy", ".", "concatenate", "(", "\n", "[", "extract", "(", "x", ")", "for", "x", "in", "bc_flat_input_image", "]", "\n", ")", "\n", "self", ".", "input_tiles", "=", "bc_flat_input_tiles", ".", "reshape", "(", "\n", "-", "1", ",", "num_channels_input", ",", "*", "bc_flat_input_tiles", ".", "shape", "[", "1", ":", "]", "\n", ")", "\n", "\n", "if", "self_supervised", ":", "\n", "                    ", "self", ".", "target_tiles", "=", "self", ".", "input_tiles", "\n", "", "else", ":", "\n", "                    ", "bc_flat_target_image", "=", "target_image", ".", "reshape", "(", "\n", "-", "1", ",", "*", "target_image", ".", "shape", "[", "2", ":", "]", "\n", ")", "\n", "bc_flat_target_tiles", "=", "numpy", ".", "concatenate", "(", "\n", "[", "extract", "(", "x", ")", "for", "x", "in", "bc_flat_target_image", "]", "\n", ")", "\n", "self", ".", "target_tiles", "=", "bc_flat_target_tiles", ".", "reshape", "(", "\n", "-", "1", ",", "num_channels_target", ",", "*", "bc_flat_target_tiles", ".", "shape", "[", "1", ":", "]", "\n", ")", "\n", "\n", "", "mask_image", "=", "numpy", ".", "zeros_like", "(", "input_image", ")", "\n", "mask_image", "[", "validation_voxels", "]", "=", "1", "\n", "\n", "bc_flat_mask_image", "=", "mask_image", ".", "reshape", "(", "-", "1", ",", "*", "mask_image", ".", "shape", "[", "2", ":", "]", ")", "\n", "bc_flat_mask_tiles", "=", "numpy", ".", "concatenate", "(", "\n", "[", "extract", "(", "x", ")", "for", "x", "in", "bc_flat_mask_image", "]", "\n", ")", "\n", "self", ".", "mask_tiles", "=", "bc_flat_mask_tiles", ".", "reshape", "(", "\n", "-", "1", ",", "num_channels_input", ",", "*", "bc_flat_mask_tiles", ".", "shape", "[", "1", ":", "]", "\n", ")", "\n", "\n", "", "def", "__len__", "(", "self", ")", ":", "\n", "                ", "if", "batch_size", ">", "1", ":", "\n", "                    ", "return", "1", "\n", "", "else", ":", "\n", "                    ", "return", "len", "(", "self", ".", "input_tiles", ")", "\n", "\n", "", "", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "                ", "if", "batch_size", ">", "1", ":", "\n", "                    ", "input", "=", "self", ".", "input_tiles", "[", "0", ",", "...", "]", "\n", "target", "=", "self", ".", "target_tiles", "[", "0", ",", "...", "]", "\n", "mask", "=", "self", ".", "mask_tiles", "[", "0", ",", "...", "]", "\n", "", "else", ":", "\n", "                    ", "input", "=", "self", ".", "input_tiles", "[", "index", ",", "...", "]", "\n", "target", "=", "self", ".", "target_tiles", "[", "index", ",", "...", "]", "\n", "mask", "=", "self", ".", "mask_tiles", "[", "index", ",", "...", "]", "\n", "\n", "", "return", "(", "input", ",", "target", ",", "mask", ")", "\n", "\n", "", "", "if", "mode", "==", "'grid'", ":", "\n", "            ", "return", "_Dataset", "(", "input_image", ",", "target_image", ",", "tilesize", ")", "\n", "", "else", ":", "\n", "            ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.it_ptcnn.PTCNNImageTranslator._train_loop": [[280, 478], ["torch.optim.lr_scheduler.ReduceLROnPlateau", "ssi.utils.log.log.lprint", "it_ptcnn.PTCNNImageTranslator.model.load_state_dict", "ssi.utils.log.log.lsection", "ssi.utils.log.log.lprint", "ssi.utils.log.log.lprint", "range", "ssi.utils.log.log.lsection", "hasattr", "enumerate", "ssi.utils.log.log.lprint", "ssi.utils.log.log.lprint", "torch.optim.lr_scheduler.ReduceLROnPlateau.step", "ssi.utils.log.log.lprint", "ssi.utils.log.log.lprint", "ssi.utils.log.log.lprint", "input_images.to", "target_images.to", "val_mask_images.to", "optimizer.zero_grad", "it_ptcnn.PTCNNImageTranslator.model.train", "it_ptcnn.PTCNNImageTranslator._forward_model", "loss_function.mean", "it_ptcnn.PTCNNImageTranslator._additional_losses", "loss_function.mean().cpu().item.backward", "optimizer.step", "it_ptcnn.PTCNNImageTranslator.model.post_optimisation", "loss_function.mean().cpu().item.item", "ssi.utils.log.log.lprint", "collections.OrderedDict", "ssi.utils.log.log.lprint", "ssi.utils.log.log.lprint", "it_ptcnn.PTCNNImageTranslator.masked_model", "it_ptcnn.PTCNNImageTranslator.model", "it_ptcnn.PTCNNImageTranslator.masked_model.get_mask", "loss_function", "loss_function", "torch.no_grad", "it_ptcnn.PTCNNImageTranslator.model.eval", "it_ptcnn.PTCNNImageTranslator._forward_model", "loss_function.mean().cpu().item", "ssi.utils.log.log.lprint", "ssi.utils.log.log.lprint", "it_ptcnn.PTCNNImageTranslator.model.load_state_dict", "ssi.utils.log.log.lprint", "torch.no_grad", "ssi.utils.log.log.lprint", "training_noise.to", "it_ptcnn.PTCNNImageTranslator.masked_model", "it_ptcnn.PTCNNImageTranslator.model", "loss_function", "loss_function", "v.to", "torch.randn_like", "loss_function.mean().cpu", "it_ptcnn.PTCNNImageTranslator.model.state_dict().items", "max", "loss_function.mean", "it_ptcnn.PTCNNImageTranslator.model.state_dict"], "methods", ["home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lsection", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lsection", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.optimisers.esadam.ESAdam.step", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.base.ImageTranslatorBase.train", "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.ssi_deconv.SSIDeconvolution._forward_model", "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.ssi_deconv.SSIDeconvolution._additional_losses", "home.repos.pwc.inspect_result.royerlab_ssi-code.optimisers.esadam.ESAdam.step", "home.repos.pwc.inspect_result.royerlab_ssi-code.models.lucyrichardson.LucyRichardson.post_optimisation", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.models.masking.Masking.get_mask", "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.ssi_deconv.SSIDeconvolution._forward_model", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint"], ["", "", "def", "_train_loop", "(", "self", ",", "data_loader", ",", "optimizer", ",", "loss_function", ")", ":", "\n", "\n", "# Scheduler:", "\n", "        ", "scheduler", "=", "ReduceLROnPlateau", "(", "\n", "optimizer", ",", "\n", "'min'", ",", "\n", "factor", "=", "self", ".", "reduce_lr_factor", ",", "\n", "verbose", "=", "True", ",", "\n", "patience", "=", "self", ".", "reduce_lr_patience", ",", "\n", ")", "\n", "\n", "best_val_loss_value", "=", "math", ".", "inf", "\n", "best_model_state_dict", "=", "None", "\n", "patience_counter", "=", "0", "\n", "\n", "with", "lsection", "(", "f\"Training loop:\"", ")", ":", "\n", "            ", "lprint", "(", "f\"Maximum number of epochs: {self.max_epochs}\"", ")", "\n", "lprint", "(", "\n", "f\"Training type: {'self-supervised' if self.self_supervised else 'supervised'}\"", "\n", ")", "\n", "\n", "for", "epoch", "in", "range", "(", "self", ".", "max_epochs", ")", ":", "\n", "                ", "with", "lsection", "(", "f\"Epoch {epoch}:\"", ")", ":", "\n", "\n", "                    ", "if", "hasattr", "(", "self", ",", "'masked_model'", ")", ":", "\n", "                        ", "self", ".", "masked_model", ".", "density", "=", "0.005", "*", "self", ".", "masking_density", "+", "0.995", "*", "self", ".", "masked_model", ".", "density", "\n", "lprint", "(", "f\"masking density: {self.masked_model.density}\"", ")", "\n", "\n", "", "train_loss_value", "=", "0", "\n", "val_loss_value", "=", "0", "\n", "iteration", "=", "0", "\n", "for", "i", ",", "(", "input_images", ",", "target_images", ",", "val_mask_images", ")", "in", "enumerate", "(", "\n", "data_loader", "\n", ")", ":", "\n", "\n", "                        ", "lprint", "(", "f\"index: {i}, shape:{input_images.shape}\"", ")", "\n", "\n", "input_images_gpu", "=", "input_images", ".", "to", "(", "\n", "self", ".", "device", ",", "non_blocking", "=", "True", "\n", ")", "\n", "target_images_gpu", "=", "target_images", ".", "to", "(", "\n", "self", ".", "device", ",", "non_blocking", "=", "True", "\n", ")", "\n", "validation_mask_images_gpu", "=", "val_mask_images", ".", "to", "(", "\n", "self", ".", "device", ",", "non_blocking", "=", "True", "\n", ")", "\n", "\n", "# Adding training noise to input:", "\n", "if", "self", ".", "training_noise", ">", "0", ":", "\n", "                            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                                ", "alpha", "=", "self", ".", "training_noise", "/", "(", "\n", "1", "+", "(", "10000", "*", "epoch", "/", "self", ".", "max_epochs", ")", "\n", ")", "\n", "lprint", "(", "f\"Training noise level: {alpha}\"", ")", "\n", "training_noise", "=", "alpha", "*", "torch", ".", "randn_like", "(", "input_images", ")", "\n", "input_images_gpu", "+=", "training_noise", ".", "to", "(", "\n", "input_images_gpu", ".", "device", "\n", ")", "\n", "\n", "# Clear gradients w.r.t. parameters", "\n", "", "", "optimizer", ".", "zero_grad", "(", ")", "\n", "\n", "# Forward pass:", "\n", "self", ".", "model", ".", "train", "(", ")", "\n", "if", "self", ".", "masking", ":", "\n", "                            ", "translated_images_gpu", "=", "self", ".", "masked_model", "(", "input_images_gpu", ")", "\n", "", "else", ":", "\n", "                            ", "translated_images_gpu", "=", "self", ".", "model", "(", "input_images_gpu", ")", "\n", "\n", "# apply forward model:", "\n", "", "forward_model_images_gpu", "=", "self", ".", "_forward_model", "(", "\n", "translated_images_gpu", "\n", ")", "\n", "\n", "# validation masking:", "\n", "u", "=", "forward_model_images_gpu", "*", "(", "1", "-", "validation_mask_images_gpu", ")", "\n", "v", "=", "target_images_gpu", "*", "(", "1", "-", "validation_mask_images_gpu", ")", "\n", "\n", "# with napari.gui_qt():", "\n", "#     viewer = napari.Viewer()", "\n", "#     viewer.add_image(to_numpy(validation_mask_images_gpu), name='validation_mask_images_gpu')", "\n", "#     viewer.add_image(to_numpy(forward_model_images_gpu), name='forward_model_images_gpu')", "\n", "#     viewer.add_image(to_numpy(target_images_gpu), name='target_images_gpu')", "\n", "\n", "# translation loss (per voxel):", "\n", "if", "self", ".", "masking", ":", "\n", "                            ", "mask", "=", "self", ".", "masked_model", ".", "get_mask", "(", ")", "\n", "translation_loss", "=", "loss_function", "(", "u", ",", "v", ",", "mask", ")", "\n", "", "else", ":", "\n", "                            ", "translation_loss", "=", "loss_function", "(", "u", ",", "v", ")", "\n", "\n", "# loss value (for all voxels):", "\n", "", "translation_loss_value", "=", "translation_loss", ".", "mean", "(", ")", "\n", "\n", "# Additional losses:", "\n", "additional_loss_value", "=", "self", ".", "_additional_losses", "(", "\n", "translated_images_gpu", ",", "forward_model_images_gpu", "\n", ")", "\n", "if", "additional_loss_value", "is", "not", "None", ":", "\n", "                            ", "translation_loss_value", "+=", "additional_loss_value", "\n", "\n", "# backpropagation:", "\n", "", "translation_loss_value", ".", "backward", "(", ")", "\n", "\n", "# Updating parameters", "\n", "optimizer", ".", "step", "(", ")", "\n", "\n", "# post optimisation -- if needed:", "\n", "self", ".", "model", ".", "post_optimisation", "(", ")", "\n", "\n", "# update training loss_deconvolution for whole image:", "\n", "train_loss_value", "+=", "translation_loss_value", ".", "item", "(", ")", "\n", "iteration", "+=", "1", "\n", "\n", "# Validation:", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "# Forward pass:", "\n", "                            ", "self", ".", "model", ".", "eval", "(", ")", "\n", "if", "self", ".", "masking", ":", "\n", "                                ", "translated_images_gpu", "=", "self", ".", "masked_model", "(", "\n", "input_images_gpu", "\n", ")", "\n", "", "else", ":", "\n", "                                ", "translated_images_gpu", "=", "self", ".", "model", "(", "input_images_gpu", ")", "\n", "\n", "# apply forward model:", "\n", "", "forward_model_images_gpu", "=", "self", ".", "_forward_model", "(", "\n", "translated_images_gpu", "\n", ")", "\n", "\n", "# validation masking:", "\n", "u", "=", "forward_model_images_gpu", "*", "validation_mask_images_gpu", "\n", "v", "=", "target_images_gpu", "*", "validation_mask_images_gpu", "\n", "\n", "# translation loss (per voxel):", "\n", "if", "self", ".", "masking", ":", "\n", "                                ", "translation_loss", "=", "loss_function", "(", "u", ",", "v", ",", "None", ")", "\n", "", "else", ":", "\n", "                                ", "translation_loss", "=", "loss_function", "(", "u", ",", "v", ")", "\n", "\n", "# loss values:", "\n", "", "translation_loss_value", "=", "(", "\n", "translation_loss", ".", "mean", "(", ")", ".", "cpu", "(", ")", ".", "item", "(", ")", "\n", ")", "\n", "\n", "# update validation loss_deconvolution for whole image:", "\n", "val_loss_value", "+=", "translation_loss_value", "\n", "iteration", "+=", "1", "\n", "\n", "", "", "train_loss_value", "/=", "iteration", "\n", "lprint", "(", "f\"Training loss value: {train_loss_value}\"", ")", "\n", "\n", "val_loss_value", "/=", "iteration", "\n", "lprint", "(", "f\"Validation loss value: {val_loss_value}\"", ")", "\n", "\n", "# Learning rate schedule:", "\n", "scheduler", ".", "step", "(", "val_loss_value", ")", "\n", "\n", "if", "val_loss_value", "<", "best_val_loss_value", ":", "\n", "                        ", "lprint", "(", "f\"## New best val loss!\"", ")", "\n", "if", "val_loss_value", "<", "best_val_loss_value", "-", "self", ".", "patience_epsilon", ":", "\n", "                            ", "lprint", "(", "f\"## Good enough to reset patience!\"", ")", "\n", "patience_counter", "=", "0", "\n", "\n", "# Update best val loss value:", "\n", "", "best_val_loss_value", "=", "val_loss_value", "\n", "\n", "# Save model:", "\n", "best_model_state_dict", "=", "OrderedDict", "(", "\n", "{", "k", ":", "v", ".", "to", "(", "'cpu'", ")", "for", "k", ",", "v", "in", "self", ".", "model", ".", "state_dict", "(", ")", ".", "items", "(", ")", "}", "\n", ")", "\n", "\n", "", "else", ":", "\n", "                        ", "if", "(", "\n", "epoch", "%", "max", "(", "1", ",", "self", ".", "reload_best_model_period", ")", "==", "0", "\n", "and", "best_model_state_dict", "\n", ")", ":", "\n", "                            ", "lprint", "(", "f\"Reloading best models to date!\"", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "best_model_state_dict", ")", "\n", "\n", "", "if", "patience_counter", ">", "self", ".", "patience", ":", "\n", "                            ", "lprint", "(", "f\"Early stopping!\"", ")", "\n", "break", "\n", "\n", "# No improvement:", "\n", "", "lprint", "(", "\n", "f\"No improvement of validation losses, patience = {patience_counter}/{self.patience} \"", "\n", ")", "\n", "patience_counter", "+=", "1", "\n", "\n", "", "lprint", "(", "f\"## Best val loss: {best_val_loss_value}\"", ")", "\n", "\n", "if", "self", ".", "_stop_training_flag", ":", "\n", "                        ", "lprint", "(", "f\"Training interupted!\"", ")", "\n", "break", "\n", "\n", "", "", "", "", "lprint", "(", "f\"Reloading best models to date!\"", ")", "\n", "self", ".", "model", ".", "load_state_dict", "(", "best_model_state_dict", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.it_ptcnn.PTCNNImageTranslator._additional_losses": [[480, 482], ["None"], "methods", ["None"], ["", "def", "_additional_losses", "(", "self", ",", "translated_image", ",", "forward_model_image", ")", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.it_ptcnn.PTCNNImageTranslator._forward_model": [[483, 485], ["None"], "methods", ["None"], ["", "def", "_forward_model", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "input", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.it_ptcnn.PTCNNImageTranslator._translate": [[486, 500], ["torch.no_grad", "it_ptcnn.PTCNNImageTranslator.model.eval", "torch.Tensor", "input_image.to.to.to", "it_ptcnn.PTCNNImageTranslator.model", "inferred_image.detach().cpu().numpy.detach().cpu().numpy.detach().cpu().numpy", "inferred_image.detach().cpu().numpy.detach().cpu().numpy.detach().cpu", "inferred_image.detach().cpu().numpy.detach().cpu().numpy.detach"], "methods", ["None"], ["", "def", "_translate", "(", "self", ",", "input_image", ",", "image_slice", "=", "None", ",", "whole_image_shape", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n            Internal method that translates an input image on the basis of the trained model.\n        :param input_image: input image\n        :param batch_dims: batch dimensions\n        :return:\n        \"\"\"", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "model", ".", "eval", "(", ")", "\n", "input_image", "=", "torch", ".", "Tensor", "(", "input_image", ")", "\n", "input_image", "=", "input_image", ".", "to", "(", "self", ".", "device", ")", "\n", "inferred_image", ":", "torch", ".", "Tensor", "=", "self", ".", "model", "(", "input_image", ")", "\n", "inferred_image", "=", "inferred_image", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "return", "inferred_image", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.it_ptcnn.PTCNNImageTranslator.visualise_weights": [[501, 507], ["it_ptcnn.PTCNNImageTranslator.model.visualise_weights", "ssi.utils.log.log.lprint"], "methods", ["home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.it_ptcnn.PTCNNImageTranslator.visualise_weights", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint"], ["", "", "def", "visualise_weights", "(", "self", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "self", ".", "model", ".", "visualise_weights", "(", ")", "\n", "", "except", "AttributeError", ":", "\n", "            ", "lprint", "(", "\n", "f\"Method 'visualise_weights()' unavailable, cannot visualise weights. \"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.it_ptcnn.to_numpy": [[19, 21], ["tensor.clone().detach().cpu().numpy", "tensor.clone().detach().cpu", "tensor.clone().detach", "tensor.clone"], "function", ["None"], ["def", "to_numpy", "(", "tensor", ")", ":", "\n", "    ", "return", "tensor", ".", "clone", "(", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", ".", "numpy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.base.ImageTranslatorBase.__init__": [[17, 59], ["ValueError"], "methods", ["None"], ["def", "__init__", "(", "\n", "self", ",", "\n", "normaliser_type", "=", "'identity'", ",", "\n", "normaliser_transform", "=", "None", ",", "\n", "normaliser_clip", "=", "True", ",", "\n", "monitor", "=", "None", ",", "\n", "blind_spots", "=", "None", ",", "\n", "tile_min_margin", "=", "8", ",", "\n", "tile_max_margin", "=", "None", ",", "\n", "padding", "=", "0", ",", "\n", "padding_mode", "=", "None", ",", "\n", "max_memory_usage_ratio", "=", "0.9", ",", "\n", "max_tilling_overhead", "=", "0.1", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        :param normaliser_type: can have one of three values; 'identity','percentile' and 'minmax'\n        :param monitor: monitor object, has to be instance of it.monitor.Monitor class\n        \"\"\"", "\n", "# Instantiates normaliser(s):", "\n", "if", "normaliser_type", "==", "'identity'", ":", "\n", "            ", "self", ".", "normalizer_class", "=", "IdentityNormaliser", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown normalizer type passed!'", ")", "\n", "", "self", ".", "normaliser_transform", "=", "normaliser_transform", "\n", "self", ".", "normaliser_clip", "=", "normaliser_clip", "\n", "\n", "self", ".", "self_supervised", "=", "False", "\n", "self", ".", "monitor", "=", "monitor", "\n", "self", ".", "blind_spots", "=", "blind_spots", "\n", "self", ".", "tile_max_margin", "=", "tile_max_margin", "\n", "self", ".", "tile_min_margin", "=", "tile_min_margin", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "padding_mode", "=", "padding_mode", "\n", "\n", "self", ".", "max_memory_usage_ratio", "=", "max_memory_usage_ratio", "\n", "self", ".", "max_tilling_overhead", "=", "max_tilling_overhead", "\n", "self", ".", "max_voxels_per_tile", "=", "320", "**", "3", "\n", "\n", "self", ".", "callback_period", "=", "3", "\n", "self", ".", "last_callback_time_sec", "=", "-", "math", ".", "inf", "\n", "\n", "self", ".", "loss_history", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.base.ImageTranslatorBase._train": [[60, 72], ["NotImplementedError"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "_train", "(", "\n", "self", ",", "input_image", ",", "target_image", ",", "train_valid_ratio", ",", "callback_period", ",", "jinv", "\n", ")", ":", "\n", "        ", "\"\"\"This function supposed to take normalized input image only\n        :param input_image:\n        :param target_image:\n        :param train_valid_ratio:\n        :param callback_period:\n        :return:\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.base.ImageTranslatorBase._translate": [[73, 80], ["NotImplementedError"], "methods", ["None"], ["", "@", "abstractmethod", "\n", "def", "_translate", "(", "self", ",", "input_image", ",", "image_slice", "=", "None", ",", "whole_image_shape", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Translates an input image into an output image according to the learned function\n        :param input_image: input image\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.base.ImageTranslatorBase._estimate_memory_needed_and_available": [[81, 84], ["psutil.virtual_memory"], "methods", ["None"], ["", "def", "_estimate_memory_needed_and_available", "(", "self", ",", "image", ")", ":", "\n", "# By default there is no memory needed and infinite available memory which means no constraints", "\n", "        ", "return", "0", ",", "psutil", ".", "virtual_memory", "(", ")", ".", "total", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.base.ImageTranslatorBase.train": [[85, 160], ["ssi.utils.log.log.lsection", "ssi.utils.log.log.lprint", "gc.collect", "base.ImageTranslatorBase.normalizer_class", "base.ImageTranslatorBase.input_normaliser.calibrate", "base.ImageTranslatorBase.input_normaliser.normalise", "base.ImageTranslatorBase._pad_norm_image", "base.ImageTranslatorBase._pad_norm_image", "base.ImageTranslatorBase._train", "ssi.utils.log.log.lprint", "ssi.utils.log.log.lprint", "base.ImageTranslatorBase.normalizer_class", "base.ImageTranslatorBase.target_normaliser.calibrate", "base.ImageTranslatorBase.target_normaliser.normalise", "len", "str", "str"], "methods", ["home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lsection", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.figures.figure.collect", "home.repos.pwc.inspect_result.royerlab_ssi-code.normaliser.identity.IdentityNormaliser.calibrate", "home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.normalise", "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.base.ImageTranslatorBase._pad_norm_image", "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.base.ImageTranslatorBase._pad_norm_image", "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.lr_deconv.ImageTranslatorLRDeconv._train", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.normaliser.identity.IdentityNormaliser.calibrate", "home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.normalise"], ["", "def", "train", "(", "\n", "self", ",", "\n", "input_image", ",", "\n", "target_image", "=", "None", ",", "\n", "batch_dims", "=", "None", ",", "\n", "channel_dims", "=", "None", ",", "\n", "train_valid_ratio", "=", "0.1", ",", "\n", "callback_period", "=", "3", ",", "\n", "jinv", "=", "None", ",", "\n", ")", ":", "\n", "        ", "\"\"\"Train to translate a given input image to a given output image.\n        This has a lot of the machinery for batching and more...\n        \"\"\"", "\n", "\n", "if", "target_image", "is", "None", ":", "\n", "            ", "target_image", "=", "input_image", "\n", "\n", "", "with", "lsection", "(", "\n", "f\"Learning to translate from image of dimensions {str(input_image.shape)} to {str(target_image.shape)} .\"", "\n", ")", ":", "\n", "\n", "            ", "lprint", "(", "'Running garbage collector...'", ")", "\n", "gc", ".", "collect", "(", ")", "\n", "\n", "# If we use the same image for input and output then we are in a self-supervised setting:", "\n", "self", ".", "self_supervised", "=", "input_image", "is", "target_image", "\n", "\n", "if", "self", ".", "self_supervised", ":", "\n", "                ", "lprint", "(", "'Training is self-supervised.'", ")", "\n", "", "else", ":", "\n", "                ", "lprint", "(", "'Training is supervised.'", ")", "\n", "\n", "", "if", "batch_dims", "is", "None", ":", "# set default batch_dim value:", "\n", "                ", "batch_dims", "=", "(", "False", ",", ")", "*", "len", "(", "input_image", ".", "shape", ")", "\n", "\n", "", "self", ".", "input_normaliser", "=", "self", ".", "normalizer_class", "(", "\n", "transform", "=", "self", ".", "normaliser_transform", ",", "\n", "clip", "=", "self", ".", "normaliser_clip", "\n", ")", "\n", "self", ".", "target_normaliser", "=", "(", "\n", "self", ".", "input_normaliser", "\n", "if", "self", ".", "self_supervised", "\n", "else", "self", ".", "normalizer_class", "(", "transform", "=", "self", ".", "normaliser_transform", ",", "\n", "clip", "=", "self", ".", "normaliser_clip", ")", "\n", ")", "\n", "\n", "# Calibrates normaliser(s):", "\n", "self", ".", "input_normaliser", ".", "calibrate", "(", "input_image", ")", "\n", "if", "not", "self", ".", "self_supervised", ":", "\n", "                ", "self", ".", "target_normaliser", ".", "calibrate", "(", "target_image", ")", "\n", "\n", "# Intensity values normalisation:", "\n", "", "normalised_input_image", "=", "self", ".", "input_normaliser", ".", "normalise", "(", "\n", "input_image", ",", "batch_dims", "=", "batch_dims", ",", "channel_dims", "=", "channel_dims", "\n", ")", "\n", "normalised_target_image", "=", "(", "\n", "normalised_input_image", "\n", "if", "self", ".", "self_supervised", "\n", "else", "self", ".", "target_normaliser", ".", "normalise", "(", "\n", "target_image", ",", "batch_dims", "=", "batch_dims", ",", "channel_dims", "=", "channel_dims", "\n", ")", "\n", ")", "\n", "\n", "# Let's pad the images to avoid border effects:", "\n", "# If we do it for translation we also have to do it for training because of", "\n", "# location-aware features such as large-scale features or spatial-features.", "\n", "normalised_input_image", "=", "self", ".", "_pad_norm_image", "(", "normalised_input_image", ")", "\n", "normalised_target_image", "=", "self", ".", "_pad_norm_image", "(", "normalised_target_image", ")", "\n", "\n", "self", ".", "_train", "(", "\n", "normalised_input_image", ",", "\n", "normalised_target_image", ",", "\n", "train_valid_ratio", "=", "train_valid_ratio", ",", "\n", "callback_period", "=", "callback_period", ",", "\n", "jinv", "=", "jinv", ",", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.base.ImageTranslatorBase.translate": [[162, 331], ["ssi.utils.log.log.lsection", "sum", "base.ImageTranslatorBase.input_normaliser.normalise", "base.ImageTranslatorBase._pad_norm_image", "base.ImageTranslatorBase._crop_norm_image", "base.ImageTranslatorBase.target_normaliser.denormalise", "base.ImageTranslatorBase.target_normaliser.shape_normalize", "base.ImageTranslatorBase._translate", "base.ImageTranslatorBase._get_tilling_strategy_and_margins", "ssi.utils.log.log.lprint", "ssi.utils.log.log.lprint", "list", "list", "len", "ssi.utils.log.log.lprint", "zip", "len", "len", "ssi.utils.array.nd.nd_split_slices", "ssi.utils.array.nd.nd_split_slices", "zip", "ssi.utils.log.log.lsection", "normalised_input_image[].copy", "ssi.utils.log.log.lprint", "base.ImageTranslatorBase._translate", "ssi.utils.log.log.lprint", "ssi.utils.array.nd.remove_margin_slice", "ssi.utils.log.log.lprint", "ssi.utils.offcore.offcore.offcore_array"], "methods", ["home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lsection", "home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.normalise", "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.base.ImageTranslatorBase._pad_norm_image", "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.base.ImageTranslatorBase._crop_norm_image", "home.repos.pwc.inspect_result.royerlab_ssi-code.normaliser.base.NormaliserBase.denormalise", "home.repos.pwc.inspect_result.royerlab_ssi-code.normaliser.base.NormaliserBase.shape_normalize", "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.lr_deconv.ImageTranslatorLRDeconv._translate", "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.base.ImageTranslatorBase._get_tilling_strategy_and_margins", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.array.nd.nd_split_slices", "home.repos.pwc.inspect_result.royerlab_ssi-code.array.nd.nd_split_slices", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lsection", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.lr_deconv.ImageTranslatorLRDeconv._translate", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.array.nd.remove_margin_slice", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.offcore.offcore.offcore_array"], ["", "", "def", "translate", "(", "\n", "self", ",", "\n", "input_image", ",", "\n", "translated_image", "=", "None", ",", "\n", "batch_dims", "=", "None", ",", "\n", "channel_dims", "=", "None", ",", "\n", "tile_size", "=", "None", ",", "\n", "denormalise_values", "=", "True", ",", "\n", "leave_as_float", "=", "False", ",", "\n", "clip", "=", "True", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Translates an input image into an output image according to the learned function.\n        :param input_image:\n        :type input_image:\n        :param clip:\n        :type clip:\n        :return:\n        :rtype:\n        \"\"\"", "\n", "\n", "with", "lsection", "(", "\n", "f\"Predicting output image from input image of dimension {input_image.shape}\"", "\n", ")", ":", "\n", "\n", "# set default batch_dim and channel_dim values:", "\n", "            ", "if", "batch_dims", "is", "None", ":", "\n", "                ", "batch_dims", "=", "(", "False", ",", ")", "*", "len", "(", "input_image", ".", "shape", ")", "\n", "", "if", "channel_dims", "is", "None", ":", "\n", "                ", "channel_dims", "=", "(", "False", ",", ")", "*", "len", "(", "input_image", ".", "shape", ")", "\n", "\n", "# Number of spatio-temporal dimensions:", "\n", "", "num_spatiotemp_dim", "=", "sum", "(", "\n", "0", "if", "b", "or", "c", "else", "1", "for", "b", ",", "c", "in", "zip", "(", "batch_dims", ",", "channel_dims", ")", "\n", ")", "\n", "\n", "# First we normalise the input values:", "\n", "normalised_input_image", "=", "self", ".", "input_normaliser", ".", "normalise", "(", "\n", "input_image", ",", "batch_dims", "=", "batch_dims", ",", "channel_dims", "=", "channel_dims", "\n", ")", "\n", "\n", "# When we trained supervised we need to update permutated image shape of target_normaliser", "\n", "# This way we can accommodate different sizes of batch dimensions than batch dimensions used for training", "\n", "if", "not", "self", ".", "self_supervised", ":", "\n", "                ", "(", "\n", "_", ",", "\n", "_", ",", "\n", "self", ".", "target_normaliser", ".", "permutated_image_shape", ",", "\n", ")", "=", "self", ".", "target_normaliser", ".", "shape_normalize", "(", "\n", "input_image", ",", "batch_dims", "=", "batch_dims", ",", "channel_dims", "=", "channel_dims", "\n", ")", "\n", "\n", "# Let's pad the input array so we avoid annoying border-effects:", "\n", "", "normalised_input_image", "=", "self", ".", "_pad_norm_image", "(", "normalised_input_image", ")", "\n", "\n", "# Spatio-temporal shape:", "\n", "spatiotemp_shape", "=", "normalised_input_image", ".", "shape", "[", "-", "num_spatiotemp_dim", ":", "]", "\n", "\n", "normalised_translated_image", "=", "None", "\n", "\n", "if", "tile_size", "==", "0", ":", "\n", "# we _force_ no tilling, this is _not_ the default.", "\n", "\n", "# We translate:", "\n", "                ", "normalised_translated_image", "=", "self", ".", "_translate", "(", "\n", "normalised_input_image", ",", "\n", "whole_image_shape", "=", "normalised_input_image", ".", "shape", ",", "\n", ")", "\n", "\n", "", "else", ":", "\n", "\n", "# We do need to do tiled inference because of a lack of memory", "\n", "# or because a small batch size was requested:", "\n", "\n", "                ", "normalised_input_shape", "=", "normalised_input_image", ".", "shape", "\n", "\n", "# We get the tilling strategy:", "\n", "# tile_size, shape, min_margin, max_margin", "\n", "tilling_strategy", ",", "margins", "=", "self", ".", "_get_tilling_strategy_and_margins", "(", "\n", "normalised_input_image", ",", "\n", "self", ".", "max_voxels_per_tile", ",", "\n", "self", ".", "tile_min_margin", ",", "\n", "self", ".", "tile_max_margin", ",", "\n", "suggested_tile_size", "=", "tile_size", ",", "\n", ")", "\n", "lprint", "(", "f\"Tilling strategy: {tilling_strategy}\"", ")", "\n", "lprint", "(", "f\"Margins for tiles: {margins} .\"", ")", "\n", "\n", "# tile slice objects (with and without margins):", "\n", "tile_slices_margins", "=", "list", "(", "\n", "nd_split_slices", "(", "\n", "normalised_input_shape", ",", "tilling_strategy", ",", "margins", "=", "margins", "\n", ")", "\n", ")", "\n", "tile_slices", "=", "list", "(", "\n", "nd_split_slices", "(", "normalised_input_shape", ",", "tilling_strategy", ")", "\n", ")", "\n", "\n", "# Number of tiles:", "\n", "number_of_tiles", "=", "len", "(", "tile_slices", ")", "\n", "lprint", "(", "f\"Number of tiles (slices): {number_of_tiles}\"", ")", "\n", "\n", "# We create slice list:", "\n", "slicezip", "=", "zip", "(", "tile_slices_margins", ",", "tile_slices", ")", "\n", "\n", "counter", "=", "1", "\n", "for", "slice_margin_tuple", ",", "slice_tuple", "in", "slicezip", ":", "\n", "                    ", "with", "lsection", "(", "\n", "f\"Current tile: {counter}/{number_of_tiles}, slice: {slice_tuple} \"", "\n", ")", ":", "\n", "\n", "# We first extract the tile image:", "\n", "                        ", "input_image_tile", "=", "normalised_input_image", "[", "\n", "slice_margin_tuple", "\n", "]", ".", "copy", "(", ")", "\n", "\n", "# We do the actual translation:", "\n", "lprint", "(", "f\"Translating...\"", ")", "\n", "translated_image_tile", "=", "self", ".", "_translate", "(", "\n", "input_image_tile", ",", "\n", "image_slice", "=", "slice_margin_tuple", ",", "\n", "whole_image_shape", "=", "normalised_input_image", ".", "shape", ",", "\n", ")", "\n", "\n", "# We compute the slice needed to cut out the margins:", "\n", "lprint", "(", "f\"Removing margins...\"", ")", "\n", "remove_margin_slice_tuple", "=", "remove_margin_slice", "(", "\n", "normalised_input_shape", ",", "slice_margin_tuple", ",", "slice_tuple", "\n", ")", "\n", "\n", "# We allocate -just in time- the translated array if needed:", "\n", "# if the array is already provided, it must of course have the right dimensions...", "\n", "if", "normalised_translated_image", "is", "None", ":", "\n", "                            ", "translated_image_shape", "=", "(", "\n", "normalised_input_image", ".", "shape", "[", ":", "2", "]", "+", "spatiotemp_shape", "\n", ")", "\n", "normalised_translated_image", "=", "offcore_array", "(", "\n", "shape", "=", "translated_image_shape", ",", "\n", "dtype", "=", "translated_image_tile", ".", "dtype", ",", "\n", "max_memory_usage_ratio", "=", "self", ".", "max_memory_usage_ratio", ",", "\n", ")", "\n", "\n", "# We plug in the batch without margins into the destination image:", "\n", "", "lprint", "(", "f\"Inserting translated batch into result image...\"", ")", "\n", "normalised_translated_image", "[", "\n", "slice_tuple", "\n", "]", "=", "translated_image_tile", "[", "remove_margin_slice_tuple", "]", "\n", "\n", "counter", "+=", "1", "\n", "\n", "# Let's crop the padding:", "\n", "", "", "", "normalised_translated_image", "=", "self", ".", "_crop_norm_image", "(", "\n", "normalised_translated_image", "\n", ")", "\n", "\n", "# Then we denormalise:", "\n", "denormalised_translated_image", "=", "self", ".", "target_normaliser", ".", "denormalise", "(", "\n", "normalised_translated_image", ",", "\n", "# denormalise_values=denormalise_values,", "\n", "leave_as_float", "=", "leave_as_float", ",", "\n", "clip", "=", "clip", ",", "\n", ")", "\n", "\n", "if", "translated_image", "is", "None", ":", "\n", "                ", "translated_image", "=", "denormalised_translated_image", "\n", "", "else", ":", "\n", "                ", "translated_image", "[", "...", "]", "=", "denormalised_translated_image", "\n", "\n", "", "return", "translated_image", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.base.ImageTranslatorBase._pad_norm_image": [[332, 349], ["numpy.pad", "tuple"], "methods", ["None"], ["", "", "def", "_pad_norm_image", "(", "self", ",", "normalised_input_image", ")", ":", "\n", "        ", "if", "self", ".", "padding", ">", "0", ":", "\n", "# First we compute the amount of padding:", "\n", "            ", "num_spatiotemp_dim", "=", "normalised_input_image", ".", "ndim", "-", "2", "\n", "padding", "=", "(", "(", "0", ",", "0", ")", ",", "(", "0", ",", "0", ")", ")", "+", "(", "\n", "(", "self", ".", "padding", ",", "self", ".", "padding", ")", ",", "\n", ")", "*", "num_spatiotemp_dim", "\n", "# value = normalised_input_image.mean()", "\n", "padded_normalised_input_image", "=", "numpy", ".", "pad", "(", "\n", "normalised_input_image", ",", "\n", "pad_width", "=", "tuple", "(", "padding", ")", ",", "\n", "mode", "=", "'constant'", "if", "self", ".", "padding_mode", "is", "None", "else", "self", ".", "padding_mode", "\n", "# constant_values=value", "\n", ")", "\n", "return", "padded_normalised_input_image", "\n", "\n", "", "return", "normalised_input_image", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.base.ImageTranslatorBase._crop_norm_image": [[350, 363], ["slice", "slice", "slice"], "methods", ["None"], ["", "def", "_crop_norm_image", "(", "self", ",", "normalised_translated_image", ")", ":", "\n", "        ", "if", "self", ".", "padding", ">", "0", ":", "\n", "# Let's compute the slice for cropping:", "\n", "            ", "num_spatiotemp_dim", "=", "normalised_translated_image", ".", "ndim", "-", "2", "\n", "slice_object", "=", "(", "slice", "(", "None", ")", ",", "slice", "(", "None", ")", ")", "+", "(", "\n", "slice", "(", "self", ".", "padding", ",", "-", "self", ".", "padding", ")", ",", "\n", ")", "*", "num_spatiotemp_dim", "\n", "cropped_normalised_translated_image", "=", "normalised_translated_image", "[", "\n", "slice_object", "\n", "]", "\n", "return", "cropped_normalised_translated_image", "\n", "\n", "", "return", "normalised_translated_image", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.base.ImageTranslatorBase._get_tilling_strategy_and_margins": [[364, 516], ["ssi.utils.log.log.lsection", "ssi.utils.log.log.lprint", "ssi.utils.log.log.lprint", "base.ImageTranslatorBase._estimate_memory_needed_and_available", "ssi.utils.log.log.lprint", "ssi.utils.log.log.lprint", "ssi.utils.log.log.lprint", "ssi.utils.log.log.lprint", "ssi.utils.log.log.lprint", "max", "max", "ssi.utils.log.log.lprint", "ssi.utils.log.log.lprint", "tuple", "ssi.utils.log.log.lprint", "tuple", "tuple", "tuple", "tuple", "len", "int", "ssi.utils.log.log.lprint", "tuple", "ssi.utils.log.log.lprint", "enumerate", "tuple", "math.ceil", "tuple", "int", "int", "min", "max", "numpy.prod", "max", "corrected_tilling_strategy.append", "corrected_tilling_strategy.append", "round", "zip", "zip", "int", "math.ceil"], "methods", ["home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lsection", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.lr_deconv.ImageTranslatorLRDeconv._estimate_memory_needed_and_available", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint"], ["", "def", "_get_tilling_strategy_and_margins", "(", "\n", "self", ",", "\n", "image", ",", "\n", "max_voxels_per_tile", ",", "\n", "min_margin", ",", "\n", "max_margin", ",", "\n", "suggested_tile_size", "=", "None", ",", "\n", ")", ":", "\n", "\n", "# We will store the batch strategy as a list of integers representing the number of chunks per dimension:", "\n", "        ", "with", "lsection", "(", "f\"Determine tilling strategy:\"", ")", ":", "\n", "\n", "            ", "suggested_tile_size", "=", "(", "\n", "math", ".", "inf", "if", "suggested_tile_size", "is", "None", "else", "suggested_tile_size", "\n", ")", "\n", "\n", "# image shape:", "\n", "shape", "=", "image", ".", "shape", "\n", "num_spatio_temp_dim", "=", "num_spatiotemp_dim", "=", "len", "(", "shape", ")", "-", "2", "\n", "\n", "lprint", "(", "f\"image shape             = {shape}\"", ")", "\n", "lprint", "(", "f\"max_voxels_per_tile     = {max_voxels_per_tile}\"", ")", "\n", "\n", "# Estimated amount of memory needed for storing all features:", "\n", "(", "\n", "estimated_memory_needed", ",", "\n", "total_memory_available", ",", "\n", ")", "=", "self", ".", "_estimate_memory_needed_and_available", "(", "image", ")", "\n", "lprint", "(", "f\"Estimated amount of memory needed: {estimated_memory_needed}\"", ")", "\n", "\n", "# Available physical memory :", "\n", "total_memory_available", "*=", "self", ".", "max_memory_usage_ratio", "\n", "\n", "lprint", "(", "\n", "f\"Available memory (we reserve 10% for 'comfort'): {total_memory_available}\"", "\n", ")", "\n", "\n", "# How much do we need to tile because of memory, if at all?", "\n", "split_factor_mem", "=", "estimated_memory_needed", "/", "total_memory_available", "\n", "lprint", "(", "\n", "f\"How much do we need to tile because of memory? : {split_factor_mem} times.\"", "\n", ")", "\n", "\n", "# how much do we have to tile because of the limit on the number of voxels per tile?", "\n", "split_factor_max_voxels", "=", "image", ".", "size", "/", "max_voxels_per_tile", "\n", "lprint", "(", "\n", "f\"How much do we need to tile because of the limit on the number of voxels per tile? : {split_factor_max_voxels} times.\"", "\n", ")", "\n", "\n", "# how much do we have to tile because of the suggested tile size?", "\n", "split_factor_suggested_tile_size", "=", "image", ".", "size", "/", "(", "\n", "suggested_tile_size", "**", "num_spatio_temp_dim", "\n", ")", "\n", "lprint", "(", "\n", "f\"How much do we need to tile because of the suggested tile size? : {split_factor_suggested_tile_size} times.\"", "\n", ")", "\n", "\n", "# we keep the max:", "\n", "desired_split_factor", "=", "max", "(", "\n", "split_factor_mem", ",", "\n", "split_factor_max_voxels", ",", "\n", "split_factor_suggested_tile_size", ",", "\n", ")", "\n", "# We cannot split less than 1 time:", "\n", "desired_split_factor", "=", "max", "(", "1", ",", "int", "(", "math", ".", "ceil", "(", "desired_split_factor", ")", ")", ")", "\n", "lprint", "(", "f\"Desired split factor: {desired_split_factor}\"", ")", "\n", "\n", "# Number of batches:", "\n", "num_batches", "=", "shape", "[", "0", "]", "\n", "\n", "# Does the number of batches split the data enough?", "\n", "if", "num_batches", "<", "desired_split_factor", ":", "\n", "# Not enough splitting happening along the batch dimension, we need to split further:", "\n", "# how much?", "\n", "                ", "rest_split_factor", "=", "desired_split_factor", "/", "num_batches", "\n", "lprint", "(", "\n", "f\"Not enough splitting happening along the batch dimension, we need to split spatio-temp dims by: {rest_split_factor}\"", "\n", ")", "\n", "\n", "# let's split the dimensions in a way proportional to their lengths:", "\n", "split_per_dim", "=", "(", "rest_split_factor", "/", "numpy", ".", "prod", "(", "shape", "[", "2", ":", "]", ")", ")", "**", "(", "\n", "1", "/", "num_spatio_temp_dim", "\n", ")", "\n", "\n", "spatiotemp_tilling_strategy", "=", "tuple", "(", "\n", "max", "(", "1", ",", "int", "(", "math", ".", "ceil", "(", "split_per_dim", "*", "s", ")", ")", ")", "for", "s", "in", "shape", "[", "2", ":", "]", "\n", ")", "\n", "\n", "# correction_factor = numpy.prod(tuple(s for s in spatiotemp_tilling_strategy if s<1))", "\n", "\n", "tilling_strategy", "=", "(", "num_batches", ",", "1", ")", "+", "spatiotemp_tilling_strategy", "\n", "lprint", "(", "f\"Preliminary tilling strategy is: {tilling_strategy}\"", ")", "\n", "\n", "# We correct for eventual oversplitting by favouring splitting over the front dimensions:", "\n", "current_splitting_factor", "=", "1", "\n", "corrected_tilling_strategy", "=", "[", "]", "\n", "split_factor_reached", "=", "False", "\n", "for", "i", ",", "s", "in", "enumerate", "(", "tilling_strategy", ")", ":", "\n", "\n", "                    ", "if", "split_factor_reached", ":", "\n", "                        ", "corrected_tilling_strategy", ".", "append", "(", "1", ")", "\n", "", "else", ":", "\n", "                        ", "corrected_tilling_strategy", ".", "append", "(", "s", ")", "\n", "current_splitting_factor", "*=", "s", "\n", "\n", "", "if", "current_splitting_factor", ">=", "desired_split_factor", ":", "\n", "                        ", "split_factor_reached", "=", "True", "\n", "\n", "", "", "tilling_strategy", "=", "tuple", "(", "corrected_tilling_strategy", ")", "\n", "\n", "", "else", ":", "\n", "                ", "tilling_strategy", "=", "(", "desired_split_factor", ",", "1", ")", "+", "tuple", "(", "\n", "1", "for", "s", "in", "shape", "[", "2", ":", "]", "\n", ")", "\n", "\n", "", "lprint", "(", "f\"Tilling strategy is: {tilling_strategy}\"", ")", "\n", "\n", "# Handles defaults:", "\n", "if", "max_margin", "is", "None", ":", "\n", "                ", "max_margin", "=", "math", ".", "inf", "\n", "", "if", "min_margin", "is", "None", ":", "\n", "                ", "min_margin", "=", "0", "\n", "\n", "# First we estimate the shape of a tile:", "\n", "\n", "", "estimated_tile_shape", "=", "tuple", "(", "\n", "int", "(", "round", "(", "s", "/", "ts", ")", ")", "for", "s", ",", "ts", "in", "zip", "(", "shape", "[", "2", ":", "]", ",", "tilling_strategy", "[", "2", ":", "]", ")", "\n", ")", "\n", "lprint", "(", "f\"The estimated tile shape is: {estimated_tile_shape}\"", ")", "\n", "\n", "# Limit margins:", "\n", "# We automatically set the margin of the tile size:", "\n", "# the max-margin factor guarantees that tilling will incur no more than a given max tiling overhead:", "\n", "margin_factor", "=", "0.5", "*", "(", "\n", "(", "(", "1", "+", "self", ".", "max_tilling_overhead", ")", "**", "(", "1", "/", "num_spatiotemp_dim", ")", ")", "-", "1", "\n", ")", "\n", "margins", "=", "tuple", "(", "int", "(", "s", "*", "margin_factor", ")", "for", "s", "in", "estimated_tile_shape", ")", "\n", "\n", "# Limit the margin to something reasonable (provided or automatically computed):", "\n", "margins", "=", "tuple", "(", "min", "(", "max_margin", ",", "m", ")", "for", "m", "in", "margins", ")", "\n", "margins", "=", "tuple", "(", "max", "(", "min_margin", ",", "m", ")", "for", "m", "in", "margins", ")", "\n", "\n", "# We add the batch and channel dimensions:", "\n", "margins", "=", "(", "0", ",", "0", ")", "+", "margins", "\n", "\n", "# We only need margins if we split a dimension:", "\n", "margins", "=", "tuple", "(", "\n", "(", "0", "if", "split", "==", "1", "else", "margin", ")", "\n", "for", "margin", ",", "split", "in", "zip", "(", "margins", ",", "tilling_strategy", ")", "\n", ")", "\n", "\n", "return", "tilling_strategy", ",", "margins", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.ssi_deconv.SSIDeconvolution.__init__": [[16, 31], ["ssi.it_ptcnn.PTCNNImageTranslator.__init__"], "methods", ["home.repos.pwc.inspect_result.royerlab_ssi-code.optimisers.esadam.ESAdam.__init__"], ["def", "__init__", "(", "self", ",", "psf_kernel", "=", "None", ",", "broaden_psf", "=", "1", ",", "sharpening", "=", "0", ",", "bounds_loss", "=", "0.1", ",", "entropy", "=", "0", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Constructs a CNN image translator using the pytorch deep learning library.\n\n        :param normaliser_type: normaliser type\n        :param balance_training_data: balance data ? (limits number training entries per target value histogram bin)\n        :param monitor: monitor to track progress of training externally (used by UI)\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "provided_psf_kernel", "=", "psf_kernel", "\n", "self", ".", "broaden_psf", "=", "broaden_psf", "\n", "self", ".", "sharpening", "=", "sharpening", "\n", "self", ".", "bounds_loss", "=", "bounds_loss", "\n", "self", ".", "entropy", "=", "entropy", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.ssi_deconv.SSIDeconvolution._train": [[32, 72], ["range", "ssi_deconv.SSIDeconvolution.psf_kernel.sum", "ssi_deconv.SSIDeconvolution.psf_kernel.astype", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "super()._train", "numpy.pad", "scipy.ndimage.convolve", "ssi.models.psf_convolution.PSFConvolutionLayer2D().to", "numpy.array", "numpy.array.sum", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "ssi.models.psf_convolution.PSFConvolutionLayer3D().to", "numpy.array", "ssi.models.psf_convolution.PSFConvolutionLayer2D", "ssi.models.psf_convolution.PSFConvolutionLayer3D"], "methods", ["home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.lr_deconv.ImageTranslatorLRDeconv._train"], ["", "def", "_train", "(", "self", ",", "input_image", ",", "target_image", ",", "train_valid_ratio", "=", "0.1", ",", "callback_period", "=", "3", ",", "jinv", "=", "False", ")", ":", "\n", "\n", "        ", "ndim", "=", "input_image", ".", "ndim", "-", "2", "\n", "num_channels", "=", "input_image", ".", "shape", "[", "1", "]", "\n", "\n", "self", ".", "psf_kernel", "=", "self", ".", "provided_psf_kernel", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "broaden_psf", ")", ":", "\n", "\n", "            ", "self", ".", "psf_kernel", "=", "numpy", ".", "pad", "(", "self", ".", "psf_kernel", ",", "(", "1", ",", ")", ",", "mode", "=", "'constant'", ",", "constant_values", "=", "0", ")", "\n", "\n", "broadening_kernel", "=", "None", "\n", "if", "ndim", "==", "2", ":", "\n", "                ", "broadening_kernel", "=", "numpy", ".", "array", "(", "[", "[", "0.095", ",", "0.14", ",", "0.095", "]", ",", "[", "0.14", ",", "0.2", ",", "0.14", "]", ",", "[", "0.095", ",", "0.14", ",", "0.095", "]", "]", ")", "\n", "", "elif", "ndim", "==", "3", ":", "\n", "                ", "broadening_kernel", "=", "numpy", ".", "array", "(", "[", "[", "[", "0.095", ",", "0.095", ",", "0.095", "]", ",", "[", "0.095", ",", "0.14", ",", "0.095", "]", ",", "[", "0.095", ",", "0.095", ",", "0.095", "]", "]", ",", "\n", "[", "[", "0.095", ",", "0.14", ",", "0.095", "]", ",", "[", "0.14", ",", "0.2", ",", "0.14", "]", ",", "[", "0.095", ",", "0.14", ",", "0.095", "]", "]", ",", "\n", "[", "[", "0.095", ",", "0.095", ",", "0.095", "]", ",", "[", "0.095", ",", "0.14", ",", "0.095", "]", ",", "[", "0.095", ",", "0.095", ",", "0.095", "]", "]", "]", ")", "\n", "\n", "", "broaden_kernel", "=", "broadening_kernel", "/", "broadening_kernel", ".", "sum", "(", ")", "\n", "self", ".", "psf_kernel", "=", "convolve", "(", "\n", "self", ".", "psf_kernel", ",", "\n", "broaden_kernel", ",", "\n", "mode", "=", "'constant'", ",", "\n", ")", "\n", "\n", "", "self", ".", "psf_kernel", "/=", "self", ".", "psf_kernel", ".", "sum", "(", ")", "\n", "self", ".", "psf_kernel", "=", "self", ".", "psf_kernel", ".", "astype", "(", "numpy", ".", "float32", ")", "\n", "\n", "self", ".", "psf_kernel", "=", "self", ".", "psf_kernel", "\n", "self", ".", "psf_kernel_tensor", "=", "torch", ".", "from_numpy", "(", "\n", "self", ".", "psf_kernel", "[", "numpy", ".", "newaxis", ",", "numpy", ".", "newaxis", ",", "...", "]", "\n", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "if", "ndim", "==", "2", ":", "\n", "            ", "self", ".", "psfconv", "=", "PSFConvolutionLayer2D", "(", "self", ".", "psf_kernel", ",", "num_channels", "=", "num_channels", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "", "elif", "ndim", "==", "3", ":", "\n", "            ", "self", ".", "psfconv", "=", "PSFConvolutionLayer3D", "(", "self", ".", "psf_kernel", ",", "num_channels", "=", "num_channels", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "", "super", "(", ")", ".", "_train", "(", "input_image", ",", "target_image", ",", "train_valid_ratio", ",", "callback_period", ",", "jinv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.ssi_deconv.SSIDeconvolution._train_loop": [[74, 81], ["super()._train_loop", "ssi.utils.log.log.lprint"], "methods", ["home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.ssi_deconv.SSIDeconvolution._train_loop", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint"], ["", "def", "_train_loop", "(", "self", ",", "data_loader", ",", "optimizer", ",", "loss_function", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "self", ".", "model", ".", "kernel_continuity_regularisation", "=", "False", "\n", "", "except", "AttributeError", ":", "\n", "            ", "lprint", "(", "\"Cannot deactivate kernel continuity regularisation\"", ")", "\n", "\n", "", "super", "(", ")", ".", "_train_loop", "(", "data_loader", ",", "optimizer", ",", "loss_function", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.ssi_deconv.SSIDeconvolution._additional_losses": [[82, 110], ["torch.relu", "torch.relu", "torch.relu", "torch.relu", "torch.relu.mean", "ssi.utils.log.log.lprint", "image_for_loss[].nelement", "ssi.utils.log.log.lprint", "ssi_deconv.entropy", "ssi.utils.log.log.lprint", "sharpening_loss.mean", "torch.norm", "torch.norm", "torch.norm", "torch.norm"], "methods", ["home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.image_operators.entropy", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint"], ["", "def", "_additional_losses", "(", "self", ",", "translated_image", ",", "forward_model_image", ")", ":", "\n", "\n", "        ", "loss", "=", "0", "\n", "\n", "# Bounds loss:", "\n", "if", "self", ".", "bounds_loss", "and", "self", ".", "bounds_loss", "!=", "0", ":", "\n", "            ", "epsilon", "=", "0", "*", "1e-8", "\n", "bounds_loss", "=", "F", ".", "relu", "(", "-", "translated_image", "-", "epsilon", ")", "\n", "bounds_loss", "+=", "F", ".", "relu", "(", "translated_image", "-", "1", "-", "epsilon", ")", "\n", "bounds_loss_value", "=", "bounds_loss", ".", "mean", "(", ")", "\n", "lprint", "(", "f\"bounds_loss_value = {bounds_loss_value}\"", ")", "\n", "loss", "+=", "self", ".", "bounds_loss", "*", "bounds_loss_value", "**", "2", "\n", "\n", "# Sharpen loss_deconvolution:", "\n", "", "if", "self", ".", "sharpening", "and", "self", ".", "sharpening", "!=", "0", ":", "\n", "            ", "image_for_loss", "=", "translated_image", "\n", "num_elements", "=", "image_for_loss", "[", "0", ",", "0", "]", ".", "nelement", "(", ")", "\n", "sharpening_loss", "=", "-", "torch", ".", "norm", "(", "image_for_loss", ",", "dim", "=", "(", "2", ",", "3", ")", ",", "keepdim", "=", "True", ",", "p", "=", "2", ")", "/", "(", "num_elements", "**", "2", ")", "# /torch.norm(image_for_loss, dim=(2, 3), keepdim=True, p=1)", "\n", "lprint", "(", "f\"sharpening loss = {sharpening_loss}\"", ")", "\n", "loss", "+=", "self", ".", "sharpening", "*", "sharpening_loss", ".", "mean", "(", ")", "\n", "\n", "# Max entropy loss:", "\n", "", "if", "self", ".", "entropy", "and", "self", ".", "entropy", "!=", "0", ":", "\n", "            ", "entropy_value", "=", "entropy", "(", "translated_image", ")", "\n", "lprint", "(", "f\"entropy_value = {entropy_value}\"", ")", "\n", "loss", "+=", "-", "self", ".", "entropy", "*", "entropy_value", "\n", "\n", "", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.ssi_deconv.SSIDeconvolution._forward_model": [[111, 113], ["ssi_deconv.SSIDeconvolution.psfconv", "torch.clamp", "torch.clamp", "torch.clamp", "torch.clamp"], "methods", ["None"], ["", "def", "_forward_model", "(", "self", ",", "input", ")", ":", "\n", "        ", "return", "self", ".", "psfconv", "(", "torch", ".", "clamp", "(", "input", ",", "0", ",", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.ssi_deconv.entropy": [[115, 122], ["entropy.sum().mean", "torch.clamp", "torch.clamp", "torch.where", "torch.where", "torch.clamp.new", "entropy.sum", "torch.sum", "torch.sum"], "function", ["None"], ["", "", "def", "entropy", "(", "image", ",", "normalise", "=", "True", ",", "epsilon", "=", "1e-10", ",", "clip", "=", "True", ")", ":", "\n", "    ", "if", "clip", ":", "\n", "        ", "image", "=", "torch", ".", "clamp", "(", "image", ",", "0", ",", "1", ")", "\n", "", "image", "=", "image", "/", "(", "epsilon", "+", "torch", ".", "sum", "(", "image", ",", "dim", "=", "(", "2", ",", "3", ")", ",", "keepdim", "=", "True", ")", ")", "if", "normalise", "else", "image", "\n", "entropy", "=", "-", "torch", ".", "where", "(", "image", ">", "0", ",", "image", "*", "(", "image", "+", "epsilon", ")", ".", "log", "(", ")", ",", "image", ".", "new", "(", "[", "0.0", "]", ")", ")", "\n", "entropy_value", "=", "entropy", ".", "sum", "(", "dim", "=", "(", "2", ",", "3", ")", ",", "keepdim", "=", "True", ")", ".", "mean", "(", ")", "\n", "return", "entropy_value", "\n", "", ""]], "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.lr_deconv.ImageTranslatorLRDeconv.__init__": [[15, 35], ["ssi.base.ImageTranslatorBase.__init__"], "methods", ["home.repos.pwc.inspect_result.royerlab_ssi-code.optimisers.esadam.ESAdam.__init__"], ["def", "__init__", "(", "\n", "self", ",", "psf_kernel", ",", "max_num_iterations", "=", "50", ",", "clip", "=", "True", ",", "backend", "=", "'scipy'", ",", "**", "kwargs", "\n", ")", ":", "\n", "        ", "\"\"\"Constructs a Lucy Richardson deconvolution image translator.\n\n        :param psf_kernel: 2D or 3D kernel, dimensions should be odd numbers and numbers sum to 1\n        :param monitor: monitor to track progress of training externally (used by UI)\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n", "self", ".", "psf_kernel_numpy", "=", "psf_kernel", "\n", "self", ".", "clip", "=", "clip", "\n", "self", ".", "backend", "=", "backend", "\n", "self", ".", "max_num_iterations", "=", "max_num_iterations", "\n", "self", ".", "__debug_allocation", "=", "False", "\n", "\n", "if", "self", ".", "padding_mode", "is", "None", ":", "\n", "            ", "self", ".", "padding_mode", "=", "'reflect'", "\n", "\n", "", "self", ".", "max_voxels_per_tile", "=", "512", "**", "3", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.lr_deconv.ImageTranslatorLRDeconv._estimate_memory_needed_and_available": [[36, 52], ["super()._estimate_memory_needed_and_available", "Device"], "methods", ["home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.lr_deconv.ImageTranslatorLRDeconv._estimate_memory_needed_and_available"], ["", "def", "_estimate_memory_needed_and_available", "(", "self", ",", "image", ")", ":", "\n", "# By default there is no memory needed which means no constraints", "\n", "\n", "        ", "memory_needed", ",", "memory_available", "=", "super", "(", ")", ".", "_estimate_memory_needed_and_available", "(", "\n", "image", "\n", ")", "\n", "# TODO: this is a rough estimate, it is not cler how much is really needed...", "\n", "memory_needed", "=", "6", "*", "image", ".", "size", "*", "image", ".", "dtype", ".", "itemsize", "\n", "\n", "if", "self", ".", "backend", "==", "'cupy'", "or", "self", ".", "backend", "==", "'scipy-cupy'", ":", "\n", "            ", "from", "cupy", ".", "cuda", ".", "device", "import", "Device", "\n", "\n", "default_device", "=", "Device", "(", ")", "\n", "memory_available", "=", "default_device", ".", "mem_info", "[", "0", "]", "\n", "\n", "", "return", "memory_needed", ",", "memory_available", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.lr_deconv.ImageTranslatorLRDeconv._train": [[53, 57], ["None"], "methods", ["None"], ["", "def", "_train", "(", "\n", "self", ",", "input_image", ",", "target_image", ",", "train_valid_ratio", ",", "callback_period", ",", "jinv", "\n", ")", ":", "\n", "        ", "pass", "\n", "# we need to figure out what to do here...", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.lr_deconv.ImageTranslatorLRDeconv._translate": [[59, 160], ["lr_deconv.ImageTranslatorLRDeconv._get_convolution_method", "lr_deconv.ImageTranslatorLRDeconv._get_pad_method", "lr_deconv.ImageTranslatorLRDeconv._convert_array_format_in", "lr_deconv.ImageTranslatorLRDeconv._convert_array_format_in", "input_image.astype.astype.astype", "ssi.utils.offcore.offcore.offcore_array", "ssi.utils.log.log.lprint", "enumerate", "lr_deconv.ImageTranslatorLRDeconv.psf_kernel_numpy.astype", "enumerate", "lr_deconv.ImageTranslatorLRDeconv.clip", "lr_deconv.ImageTranslatorLRDeconv._convert_array_format_in", "numpy.full", "lr_deconv.ImageTranslatorLRDeconv._convert_array_format_in", "tuple", "range", "lr_deconv.ImageTranslatorLRDeconv._convert_array_format_out", "float", "lr_deconv.ImageTranslatorLRDeconv.", "lr_deconv.ImageTranslatorLRDeconv._debug_allocation", "lr_deconv.ImageTranslatorLRDeconv.", "lr_deconv.ImageTranslatorLRDeconv._debug_allocation", "numpy.mean", "lr_deconv.ImageTranslatorLRDeconv.", "numpy.pad", "max", "max"], "methods", ["home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.lr_deconv.ImageTranslatorLRDeconv._get_convolution_method", "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.lr_deconv.ImageTranslatorLRDeconv._get_pad_method", "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.lr_deconv.ImageTranslatorLRDeconv._convert_array_format_in", "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.lr_deconv.ImageTranslatorLRDeconv._convert_array_format_in", "home.repos.pwc.inspect_result.royerlab_ssi-code.offcore.offcore.offcore_array", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.lr_deconv.ImageTranslatorLRDeconv._convert_array_format_in", "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.lr_deconv.ImageTranslatorLRDeconv._convert_array_format_in", "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.lr_deconv.ImageTranslatorLRDeconv._convert_array_format_out", "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.lr_deconv.ImageTranslatorLRDeconv._debug_allocation", "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.lr_deconv.ImageTranslatorLRDeconv._debug_allocation"], ["", "def", "_translate", "(", "self", ",", "input_image", ",", "image_slice", "=", "None", ",", "whole_image_shape", "=", "None", ")", ":", "\n", "        ", "\"\"\"Internal method that translates an input image on the basis of the trained model.\n\n        :param input_image: input image\n        :param batch_dims: batch dimensions\n        :return:\n        \"\"\"", "\n", "import", "numpy", "\n", "\n", "convolve_method", "=", "self", ".", "_get_convolution_method", "(", "\n", "input_image", ",", "self", ".", "psf_kernel_numpy", "\n", ")", "\n", "pad_method", "=", "self", ".", "_get_pad_method", "(", "input_image", ")", "\n", "\n", "self", ".", "psf_kernel", "=", "self", ".", "_convert_array_format_in", "(", "\n", "self", ".", "psf_kernel_numpy", ".", "astype", "(", "numpy", ".", "float32", ")", "\n", ")", "\n", "self", ".", "psf_kernel_mirror", "=", "self", ".", "_convert_array_format_in", "(", "\n", "self", ".", "psf_kernel", "[", ":", ":", "-", "1", ",", ":", ":", "-", "1", "]", "\n", ")", "\n", "\n", "input_image", "=", "input_image", ".", "astype", "(", "numpy", ".", "float32", ",", "copy", "=", "False", ")", "\n", "\n", "deconvolved_image", "=", "offcore_array", "(", "\n", "shape", "=", "input_image", ".", "shape", ",", "dtype", "=", "input_image", ".", "dtype", "\n", ")", "\n", "\n", "lprint", "(", "f\"Number of Lucy-Richardson iterations: {self.max_num_iterations}\"", ")", "\n", "\n", "for", "batch_index", ",", "batch_image", "in", "enumerate", "(", "input_image", ")", ":", "\n", "\n", "            ", "for", "channel_index", ",", "channel_image", "in", "enumerate", "(", "batch_image", ")", ":", "\n", "\n", "                ", "channel_image", "=", "channel_image", ".", "clip", "(", "0", ",", "math", ".", "inf", ")", "\n", "channel_image", "=", "self", ".", "_convert_array_format_in", "(", "channel_image", ")", "\n", "\n", "candidate_deconvolved_image", "=", "numpy", ".", "full", "(", "\n", "channel_image", ".", "shape", ",", "float", "(", "numpy", ".", "mean", "(", "channel_image", ")", ")", "\n", ")", "\n", "\n", "candidate_deconvolved_image", "=", "self", ".", "_convert_array_format_in", "(", "\n", "candidate_deconvolved_image", "\n", ")", "\n", "\n", "kernel_shape", "=", "self", ".", "psf_kernel", ".", "shape", "\n", "pad_width", "=", "tuple", "(", "\n", "(", "max", "(", "self", ".", "padding", ",", "(", "s", "-", "1", ")", "//", "2", ")", ",", "max", "(", "self", ".", "padding", ",", "(", "s", "-", "1", ")", "//", "2", ")", ")", "\n", "for", "s", "in", "kernel_shape", "\n", ")", "\n", "\n", "for", "i", "in", "range", "(", "self", ".", "max_num_iterations", ")", ":", "\n", "\n", "                    ", "if", "self", ".", "padding", ">", "0", ":", "\n", "                        ", "padded_candidate_deconvolved_image", "=", "pad_method", "(", "\n", "candidate_deconvolved_image", ",", "\n", "pad_width", "=", "pad_width", ",", "\n", "mode", "=", "self", ".", "padding_mode", ",", "\n", ")", "\n", "", "else", ":", "\n", "                        ", "padded_candidate_deconvolved_image", "=", "candidate_deconvolved_image", "\n", "\n", "", "convolved", "=", "convolve_method", "(", "\n", "padded_candidate_deconvolved_image", ",", "\n", "self", ".", "psf_kernel", ",", "\n", "mode", "=", "'valid'", "if", "self", ".", "padding", "else", "'same'", ",", "\n", ")", "\n", "\n", "convolved", "[", "convolved", "==", "0", "]", "=", "1", "\n", "\n", "relative_blur", "=", "channel_image", "/", "convolved", "\n", "\n", "self", ".", "_debug_allocation", "(", "f\"after division\"", ")", "\n", "\n", "if", "self", ".", "padding", ":", "\n", "                        ", "relative_blur", "=", "numpy", ".", "pad", "(", "\n", "relative_blur", ",", "pad_width", "=", "pad_width", ",", "mode", "=", "self", ".", "padding_mode", "\n", ")", "\n", "\n", "", "multiplicative_correction", "=", "convolve_method", "(", "\n", "relative_blur", ",", "\n", "self", ".", "psf_kernel_mirror", ",", "\n", "mode", "=", "'valid'", "if", "self", ".", "padding", "else", "'same'", ",", "\n", ")", "\n", "\n", "self", ".", "_debug_allocation", "(", "f\"after second convolution\"", ")", "\n", "\n", "candidate_deconvolved_image", "*=", "multiplicative_correction", "\n", "\n", "", "if", "self", ".", "clip", ":", "\n", "                    ", "candidate_deconvolved_image", "[", "candidate_deconvolved_image", ">", "1", "]", "=", "1", "\n", "candidate_deconvolved_image", "[", "candidate_deconvolved_image", "<", "-", "1", "]", "=", "-", "1", "\n", "\n", "", "candidate_deconvolved_image", "=", "self", ".", "_convert_array_format_out", "(", "\n", "candidate_deconvolved_image", "\n", ")", "\n", "\n", "deconvolved_image", "[", "\n", "batch_index", ",", "channel_index", "\n", "]", "=", "candidate_deconvolved_image", "\n", "\n", "", "", "return", "deconvolved_image", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.lr_deconv.ImageTranslatorLRDeconv._convert_array_format_in": [[161, 172], ["cupy.asarray"], "methods", ["None"], ["", "def", "_convert_array_format_in", "(", "self", ",", "input_image", ")", ":", "\n", "        ", "if", "(", "\n", "self", ".", "backend", "==", "'scipy'", "\n", "or", "self", ".", "backend", "==", "'gputools'", "\n", "or", "self", ".", "backend", "==", "\"scipy-cupy\"", "\n", ")", ":", "\n", "            ", "return", "input_image", "\n", "", "elif", "self", ".", "backend", "==", "'cupy'", ":", "\n", "            ", "import", "cupy", "\n", "\n", "return", "cupy", ".", "asarray", "(", "input_image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.lr_deconv.ImageTranslatorLRDeconv._convert_array_format_out": [[173, 184], ["cupy.asnumpy"], "methods", ["None"], ["", "", "def", "_convert_array_format_out", "(", "self", ",", "output_image", ")", ":", "\n", "        ", "if", "(", "\n", "self", ".", "backend", "==", "'scipy'", "\n", "or", "self", ".", "backend", "==", "'gputools'", "\n", "or", "self", ".", "backend", "==", "\"scipy-cupy\"", "\n", ")", ":", "\n", "            ", "return", "output_image", "\n", "", "elif", "self", ".", "backend", "==", "'cupy'", ":", "\n", "            ", "import", "cupy", "\n", "\n", "return", "cupy", ".", "asnumpy", "(", "output_image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.lr_deconv.ImageTranslatorLRDeconv._get_convolution_method": [[185, 276], ["ssi.utils.log.log.lprint", "ssi.utils.log.log.lprint", "ssi.utils.log.log.lprint", "scipy.fft.set_backend", "ssi.utils.log.log.lprint", "lr_deconv.ImageTranslatorLRDeconv._get_convolution_method", "traceback.format_exc", "ssi.utils.log.log.lprint", "ssi.utils.log.log.lprint", "lr_deconv.ImageTranslatorLRDeconv._get_convolution_method", "ssi.utils.log.log.lprint", "numpy.ones", "numpy.ones", "gputools.convolve", "ssi.utils.log.log.lprint", "gputools.convolve", "traceback.format_exc", "ssi.utils.log.log.lprint", "ssi.utils.log.log.lprint", "ssi.utils.log.log.lprint", "cupy.ones", "cupy.ones", "cupyx.scipy.ndimage.convolve", "ssi.utils.log.log.lprint", "cupyx.scipy.ndimage.convolve", "traceback.format_exc", "ssi.utils.log.log.lprint", "ssi.utils.log.log.lprint", "lr_deconv.ImageTranslatorLRDeconv._get_convolution_method"], "methods", ["home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.lr_deconv.ImageTranslatorLRDeconv._get_convolution_method", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.lr_deconv.ImageTranslatorLRDeconv._get_convolution_method", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.lr_deconv.ImageTranslatorLRDeconv._get_convolution_method"], ["", "", "def", "_get_convolution_method", "(", "self", ",", "input_image", ",", "psf_kernel", ")", ":", "\n", "\n", "        ", "if", "self", ".", "backend", "==", "'scipy'", ":", "\n", "            ", "lprint", "(", "\"Using scipy backend.\"", ")", "\n", "from", "scipy", ".", "signal", "import", "convolve", "\n", "\n", "return", "convolve", "\n", "\n", "", "elif", "self", ".", "backend", "==", "\"scipy-cupy\"", ":", "\n", "            ", "try", ":", "\n", "                ", "lprint", "(", "\"Attempting to use scipy-cupy backend.\"", ")", "\n", "import", "scipy", "\n", "import", "cupy", "\n", "\n", "scipy", ".", "fft", ".", "set_backend", "(", "cupy", ".", "fft", ")", "\n", "self", ".", "backend", "=", "'scipy'", "\n", "lprint", "(", "\"Succeeded to use scipy-cupy backend.\"", ")", "\n", "return", "self", ".", "_get_convolution_method", "(", "input_image", ",", "psf_kernel", ")", "\n", "", "except", "Exception", ":", "\n", "                ", "track", "=", "traceback", ".", "format_exc", "(", ")", "\n", "lprint", "(", "track", ")", "\n", "lprint", "(", "\"Failed to use scipy-cupy backend.\"", ")", "\n", "self", ".", "backend", "=", "'cupy'", "\n", "return", "self", ".", "_get_convolution_method", "(", "input_image", ",", "psf_kernel", ")", "\n", "\n", "", "", "elif", "self", ".", "backend", "==", "'gputools'", ":", "\n", "            ", "try", ":", "\n", "                ", "lprint", "(", "\"Attempting to use gputools backend.\"", ")", "\n", "# testing if gputools works:", "\n", "import", "gputools", "\n", "import", "numpy", "\n", "\n", "# try something simple and see if it crashes...", "\n", "data", "=", "numpy", ".", "ones", "(", "(", "30", ",", "40", ",", "50", ")", ")", "\n", "h", "=", "numpy", ".", "ones", "(", "(", "10", ",", "11", ",", "12", ")", ")", "\n", "out", "=", "gputools", ".", "convolve", "(", "data", ",", "h", ")", "# noqa: F841", "\n", "\n", "def", "gputools_convolve", "(", "in1", ",", "in2", ",", "mode", "=", "None", ",", "method", "=", "None", ")", ":", "\n", "                    ", "return", "gputools", ".", "convolve", "(", "in1", ",", "in2", ")", "\n", "\n", "# gputools backend does not need extra padding:", "\n", "", "self", ".", "padding", "=", "False", "\n", "\n", "lprint", "(", "\"Succeeded to use cupy backend.\"", ")", "\n", "return", "gputools_convolve", "\n", "\n", "", "except", "Exception", ":", "\n", "                ", "track", "=", "traceback", ".", "format_exc", "(", ")", "\n", "lprint", "(", "track", ")", "\n", "lprint", "(", "\"Failed to use gputools backend.\"", ")", "\n", "pass", "\n", "\n", "", "", "elif", "self", ".", "backend", "==", "'cupy'", ":", "\n", "            ", "try", ":", "\n", "                ", "lprint", "(", "\"Attempting to use cupy backend.\"", ")", "\n", "# try:", "\n", "# testing if gputools works:", "\n", "import", "cupyx", ".", "scipy", ".", "ndimage", "\n", "\n", "# try something simple and see if it crashes...", "\n", "import", "cupy", "\n", "\n", "data", "=", "cupy", ".", "ones", "(", "(", "30", ",", "40", ",", "50", ")", ")", "\n", "h", "=", "cupy", ".", "ones", "(", "(", "10", ",", "11", ",", "12", ")", ")", "\n", "cupyx", ".", "scipy", ".", "ndimage", ".", "convolve", "(", "data", ",", "h", ")", "\n", "\n", "# gputools backend does not need extra padding:", "\n", "self", ".", "padding", "=", "False", "\n", "\n", "def", "cupy_convolve", "(", "in1", ",", "in2", ",", "mode", "=", "None", ",", "method", "=", "None", ")", ":", "\n", "                    ", "return", "cupyx", ".", "scipy", ".", "ndimage", ".", "convolve", "(", "in1", ",", "in2", ",", "mode", "=", "'reflect'", ")", "\n", "\n", "", "lprint", "(", "\"Succeeded to use cupy backend.\"", ")", "\n", "if", "psf_kernel", ".", "size", ">", "500", ":", "\n", "                    ", "return", "self", ".", "_cupy_convolve_fft", "\n", "", "else", ":", "\n", "                    ", "return", "cupy_convolve", "\n", "\n", "", "", "except", "Exception", ":", "\n", "                ", "track", "=", "traceback", ".", "format_exc", "(", ")", "\n", "lprint", "(", "track", ")", "\n", "lprint", "(", "\"Failed to use cupy backend, trying gputools\"", ")", "\n", "self", ".", "backend", "=", "'gputools'", "\n", "return", "self", ".", "_get_convolution_method", "(", "input_image", ",", "psf_kernel", ")", "\n", "\n", "", "", "lprint", "(", "\"Faling back to scipy backend.\"", ")", "\n", "\n", "# this is scipy's convolve:", "\n", "from", "scipy", ".", "signal", "import", "convolve", "\n", "\n", "return", "convolve", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.lr_deconv.ImageTranslatorLRDeconv._get_pad_method": [[277, 286], ["None"], "methods", ["None"], ["", "def", "_get_pad_method", "(", "self", ",", "input_image", ")", ":", "\n", "        ", "if", "self", ".", "backend", "==", "'scipy'", "or", "self", ".", "backend", "==", "'scipy-cupy'", ":", "\n", "            ", "import", "numpy", "\n", "\n", "return", "numpy", ".", "pad", "\n", "", "elif", "self", ".", "backend", "==", "'cupy'", ":", "\n", "            ", "import", "cupy", "\n", "\n", "return", "cupy", ".", "pad", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.lr_deconv.ImageTranslatorLRDeconv._cupy_convolve_fft": [[287, 341], ["cupy.cuda.set_allocator", "lr_deconv.ImageTranslatorLRDeconv._debug_allocation", "numpy.asarray", "numpy.asarray", "tuple", "cupy.fft.rfftn", "cupy.fft.rfftn", "cupy.fft.irfftn", "tuple", "cupy.asarray", "cupy.array", "cupy.get_default_memory_pool().free_all_blocks", "lr_deconv.ImageTranslatorLRDeconv._debug_allocation", "slice", "ValueError", "slice", "range", "tuple", "cupy.get_default_memory_pool", "cupy.array", "int", "len"], "methods", ["home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.lr_deconv.ImageTranslatorLRDeconv._debug_allocation", "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.lr_deconv.ImageTranslatorLRDeconv._debug_allocation"], ["", "", "def", "_cupy_convolve_fft", "(", "self", ",", "image1", ",", "image2", ",", "mode", "=", "None", ")", ":", "\n", "\n", "        ", "import", "cupy", "\n", "import", "numpy", "\n", "\n", "# TODO: review if this is needed", "\n", "cupy", ".", "cuda", ".", "set_allocator", "(", "None", ")", "\n", "\n", "self", ".", "_debug_allocation", "(", "f\"before FFT\"", ")", "\n", "\n", "is_planning_on", "=", "cupy", ".", "fft", ".", "config", ".", "enable_nd_planning", "\n", "cupy", ".", "fft", ".", "config", ".", "enable_nd_planning", "=", "False", "\n", "\n", "if", "image1", ".", "ndim", "==", "image2", ".", "ndim", "==", "0", ":", "# scalar inputs", "\n", "            ", "return", "image1", "*", "image2", "\n", "", "elif", "not", "image1", ".", "ndim", "==", "image2", ".", "ndim", ":", "\n", "            ", "raise", "ValueError", "(", "\"Dimensions do not match.\"", ")", "\n", "", "elif", "image1", ".", "size", "==", "0", "or", "image2", ".", "size", "==", "0", ":", "# empty arrays", "\n", "            ", "return", "cupy", ".", "array", "(", "[", "]", ")", "\n", "\n", "", "s1", "=", "numpy", ".", "asarray", "(", "image1", ".", "shape", ")", "\n", "s2", "=", "numpy", ".", "asarray", "(", "image2", ".", "shape", ")", "\n", "\n", "shape", "=", "tuple", "(", "s1", "+", "s2", "-", "1", ")", "\n", "\n", "fsize", "=", "shape", "# tuple(int(2 ** math.ceil(math.log2(x))) for x in tuple(shape))", "\n", "\n", "image1_fft", "=", "cupy", ".", "fft", ".", "rfftn", "(", "image1", ",", "fsize", ")", "\n", "image2_fft", "=", "cupy", ".", "fft", ".", "rfftn", "(", "image2", ",", "fsize", ")", "\n", "ret", "=", "cupy", ".", "fft", ".", "irfftn", "(", "image1_fft", "*", "image2_fft", ")", "\n", "# ret = ret.astype(cupy.float32) #cupy.real(ret)", "\n", "\n", "fslice", "=", "tuple", "(", "[", "slice", "(", "0", ",", "int", "(", "sz", ")", ")", "for", "sz", "in", "shape", "]", ")", "\n", "ret", "=", "ret", "[", "fslice", "]", "\n", "\n", "# if mode=='same':", "\n", "newshape", "=", "cupy", ".", "asarray", "(", "image1", ".", "shape", ")", "\n", "currshape", "=", "cupy", ".", "array", "(", "ret", ".", "shape", ")", "\n", "startind", "=", "(", "currshape", "-", "newshape", ")", "//", "2", "\n", "endind", "=", "startind", "+", "newshape", "\n", "myslice", "=", "[", "slice", "(", "startind", "[", "k", "]", ",", "endind", "[", "k", "]", ")", "for", "k", "in", "range", "(", "len", "(", "endind", ")", ")", "]", "\n", "\n", "ret", "=", "ret", "[", "tuple", "(", "myslice", ")", "]", "\n", "\n", "cupy", ".", "fft", ".", "config", ".", "enable_nd_planning", "=", "is_planning_on", "\n", "\n", "del", "image1_fft", "\n", "del", "image2_fft", "\n", "\n", "cupy", ".", "get_default_memory_pool", "(", ")", ".", "free_all_blocks", "(", ")", "\n", "\n", "self", ".", "_debug_allocation", "(", "f\"after fft\"", ")", "\n", "\n", "return", "ret", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.lr_deconv.ImageTranslatorLRDeconv._debug_allocation": [[342, 349], ["ssi.utils.log.log.lprint", "cupy.get_default_memory_pool().used_bytes", "cupy.get_default_memory_pool"], "methods", ["home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint"], ["", "def", "_debug_allocation", "(", "self", ",", "info", ")", ":", "\n", "        ", "if", "self", ".", "__debug_allocation", ":", "\n", "            ", "if", "self", ".", "backend", "==", "'cupy'", ":", "\n", "                ", "import", "cupy", "\n", "\n", "lprint", "(", "\n", "f\"CUDA memory usage {info}: {cupy.get_default_memory_pool().used_bytes() / 1e6} MB\"", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.Log.__init__": [[34, 36], ["None"], "methods", ["None"], ["", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "return", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.Log.native_print": [[37, 41], ["print"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "native_print", "(", "*", "args", ",", "sep", "=", "' '", ",", "end", "=", "'\\n'", ",", "file", "=", "sys", ".", "__stdout__", ")", ":", "\n", "        ", "if", "Log", ".", "enable_output", ":", "\n", "            ", "print", "(", "*", "args", ",", "sep", "=", "sep", ",", "end", "=", "end", ",", "file", "=", "file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.Log.set_log_elapsed_time": [[42, 44], ["None"], "methods", ["None"], ["", "", "def", "set_log_elapsed_time", "(", "log_elapsed_time", ":", "bool", ")", ":", "\n", "        ", "Log", ".", "log_elapsed_time", "=", "log_elapsed_time", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.Log.set_log_max_depth": [[45, 47], ["max"], "methods", ["None"], ["", "def", "set_log_max_depth", "(", "max_depth", ":", "int", ")", ":", "\n", "        ", "Log", ".", "max_depth", "=", "max", "(", "0", ",", "max_depth", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint": [[49, 59], ["min", "log.Log.native_print", "log.Log.native_print", "int"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.Log.native_print", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.Log.native_print"], ["", "", "def", "lprint", "(", "*", "args", ",", "sep", "=", "' '", ",", "end", "=", "'\\n'", ")", ":", "\n", "    ", "if", "not", "Log", ".", "override_test_exclusion", ":", "\n", "        ", "for", "arg", "in", "sys", ".", "argv", ":", "\n", "            ", "if", "\"test\"", "in", "arg", ":", "\n", "                ", "return", "\n", "\n", "", "", "", "if", "Log", ".", "depth", "<=", "Log", ".", "max_depth", ":", "\n", "        ", "level", "=", "min", "(", "Log", ".", "max_depth", ",", "Log", ".", "depth", ")", "\n", "Log", ".", "native_print", "(", "Log", ".", "__vl__", "*", "int", "(", "level", ")", "+", "Log", ".", "__br__", "+", "' '", ",", "end", "=", "''", ")", "\n", "Log", ".", "native_print", "(", "*", "args", ",", "sep", "=", "sep", ",", "end", "=", "end", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lsection": [[61, 137], ["time.time", "time.time", "log.Log.native_print", "log.Log.native_print", "log.Log.native_print", "log.Log.native_print", "log.Log.native_print", "log.Log.native_print", "log.Log.native_print", "log.Log.native_print"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.Log.native_print", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.Log.native_print", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.Log.native_print", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.Log.native_print", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.Log.native_print", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.Log.native_print", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.Log.native_print", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.Log.native_print"], ["", "", "@", "contextmanager", "\n", "def", "lsection", "(", "section_header", ":", "str", ")", ":", "\n", "    ", "if", "not", "Log", ".", "override_test_exclusion", ":", "\n", "        ", "for", "arg", "in", "sys", ".", "argv", ":", "\n", "            ", "if", "\"test\"", "in", "arg", ":", "\n", "                ", "yield", "\n", "return", "\n", "\n", "", "", "", "if", "Log", ".", "depth", "+", "1", "<=", "Log", ".", "max_depth", ":", "\n", "        ", "Log", ".", "native_print", "(", "\n", "Log", ".", "__vl__", "*", "Log", ".", "depth", "+", "Log", ".", "__bd__", "+", "' '", "+", "section_header", "\n", ")", "# \u2261", "\n", "", "elif", "Log", ".", "depth", "+", "1", "==", "Log", ".", "max_depth", "+", "1", ":", "\n", "        ", "Log", ".", "native_print", "(", "\n", "Log", ".", "__vl__", "*", "Log", ".", "depth", "\n", "+", "Log", ".", "__br__", "\n", "+", "f'= {section_header} (log tree truncated here)'", "\n", ")", "\n", "\n", "", "Log", ".", "depth", "+=", "1", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "exception", "=", "None", "\n", "try", ":", "\n", "        ", "yield", "\n", "", "except", "Exception", "as", "e", ":", "\n", "        ", "exception", "=", "e", "\n", "\n", "", "stop", "=", "time", ".", "time", "(", ")", "\n", "\n", "Log", ".", "depth", "-=", "1", "\n", "if", "Log", ".", "depth", "+", "1", "<=", "Log", ".", "max_depth", ":", "\n", "\n", "        ", "if", "Log", ".", "log_elapsed_time", ":", "\n", "            ", "elapsed", "=", "stop", "-", "start", "\n", "\n", "if", "elapsed", "<", "0.001", ":", "\n", "                ", "Log", ".", "native_print", "(", "\n", "Log", ".", "__vl__", "*", "(", "Log", ".", "depth", "+", "1", ")", "\n", "+", "Log", ".", "__tb__", "\n", "+", "Log", ".", "__la__", "\n", "+", "f' {elapsed * 1000 * 1000:.2f} microseconds'", "\n", ")", "\n", "", "elif", "elapsed", "<", "1", ":", "\n", "                ", "Log", ".", "native_print", "(", "\n", "Log", ".", "__vl__", "*", "(", "Log", ".", "depth", "+", "1", ")", "\n", "+", "Log", ".", "__tb__", "\n", "+", "Log", ".", "__la__", "\n", "+", "f' {elapsed * 1000:.2f} milliseconds'", "\n", ")", "\n", "", "elif", "elapsed", "<", "60", ":", "\n", "                ", "Log", ".", "native_print", "(", "\n", "Log", ".", "__vl__", "*", "(", "Log", ".", "depth", "+", "1", ")", "\n", "+", "Log", ".", "__tb__", "\n", "+", "Log", ".", "__la__", "\n", "+", "f' {elapsed:.2f} seconds'", "\n", ")", "\n", "", "elif", "elapsed", "<", "60", "*", "60", ":", "\n", "                ", "Log", ".", "native_print", "(", "\n", "Log", ".", "__vl__", "*", "(", "Log", ".", "depth", "+", "1", ")", "\n", "+", "Log", ".", "__tb__", "\n", "+", "Log", ".", "__la__", "\n", "+", "f' {elapsed / 60:.2f} minutes'", "\n", ")", "\n", "", "elif", "elapsed", "<", "24", "*", "60", "*", "60", ":", "\n", "                ", "Log", ".", "native_print", "(", "\n", "Log", ".", "__vl__", "*", "(", "Log", ".", "depth", "+", "1", ")", "\n", "+", "Log", ".", "__tb__", "\n", "+", "Log", ".", "__la__", "\n", "+", "f' {elapsed / (60 * 60):.2f} hours'", "\n", ")", "\n", "\n", "", "", "Log", ".", "native_print", "(", "Log", ".", "__vl__", "*", "(", "Log", ".", "depth", "+", "1", ")", ")", "\n", "\n", "if", "exception", "is", "not", "None", ":", "\n", "            ", "raise", "exception", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.royerlab_ssi-code.test.test_log.test_log": [[6, 63], ["ssi.utils.log.log.lprint", "ssi.utils.log.log.lprint", "ssi.utils.log.log.lsection", "ssi.utils.log.log.lprint", "ssi.utils.log.log.lprint", "ssi.utils.log.log.lprint", "ssi.utils.log.log.lsection", "ssi.utils.log.log.lprint", "ssi.utils.log.log.lprint", "ssi.utils.log.log.lsection", "ssi.utils.log.log.lprint", "ssi.utils.log.log.lprint", "ssi.utils.log.log.lsection", "ssi.utils.log.log.lprint", "ssi.utils.log.log.lprint", "ssi.utils.log.log.lsection", "ssi.utils.log.log.lprint", "ssi.utils.log.log.lprint", "ssi.utils.log.log.lsection", "ssi.utils.log.log.lprint", "ssi.utils.log.log.lprint", "ssi.utils.log.log.lsection", "ssi.utils.log.log.lprint", "ssi.utils.log.log.lprint", "ssi.utils.log.log.lsection", "ssi.utils.log.log.lprint", "ssi.utils.log.log.lprint", "ssi.utils.log.log.lsection", "ssi.utils.log.log.lprint", "ssi.utils.log.log.lprint", "ssi.utils.log.log.lsection", "ssi.utils.log.log.lprint", "ssi.utils.log.log.lprint"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lsection", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lsection", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lsection", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lsection", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lsection", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lsection", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lsection", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lsection", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lsection", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lsection", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint"], ["@", "pytest", ".", "mark", ".", "heavy", "\n", "def", "test_log", "(", ")", ":", "\n", "# This is required for this test to pass!", "\n", "    ", "Log", ".", "override_test_exclusion", "=", "True", "\n", "\n", "lprint", "(", "'Test'", ")", "\n", "\n", "with", "lsection", "(", "'a section'", ")", ":", "\n", "        ", "lprint", "(", "'a line'", ")", "\n", "lprint", "(", "'another line'", ")", "\n", "lprint", "(", "'we are done'", ")", "\n", "\n", "with", "lsection", "(", "'a subsection'", ")", ":", "\n", "            ", "lprint", "(", "'another line'", ")", "\n", "lprint", "(", "'we are done'", ")", "\n", "\n", "with", "lsection", "(", "'a subsection'", ")", ":", "\n", "                ", "lprint", "(", "'another line'", ")", "\n", "lprint", "(", "'we are done'", ")", "\n", "\n", "assert", "Log", ".", "depth", "==", "3", "\n", "\n", "with", "lsection", "(", "'a subsection'", ")", ":", "\n", "                    ", "lprint", "(", "'another line'", ")", "\n", "lprint", "(", "'we are done'", ")", "\n", "\n", "with", "lsection", "(", "'a subsection'", ")", ":", "\n", "                        ", "lprint", "(", "'another line'", ")", "\n", "lprint", "(", "'we are done'", ")", "\n", "\n", "assert", "Log", ".", "depth", "==", "5", "\n", "\n", "with", "lsection", "(", "'a subsection'", ")", ":", "\n", "                            ", "lprint", "(", "'another line'", ")", "\n", "lprint", "(", "'we are done'", ")", "\n", "\n", "with", "lsection", "(", "'a subsection'", ")", ":", "\n", "                                ", "lprint", "(", "'another line'", ")", "\n", "lprint", "(", "'we are done'", ")", "\n", "\n", "assert", "Log", ".", "depth", "==", "7", "\n", "\n", "", "", "with", "lsection", "(", "'a subsection'", ")", ":", "\n", "                            ", "lprint", "(", "'another line'", ")", "\n", "lprint", "(", "'we are done'", ")", "\n", "\n", "", "", "with", "lsection", "(", "'a subsection'", ")", ":", "\n", "                        ", "lprint", "(", "'another line'", ")", "\n", "lprint", "(", "'we are done'", ")", "\n", "\n", "", "", "with", "lsection", "(", "'a subsection'", ")", ":", "\n", "                    ", "lprint", "(", "'another line'", ")", "\n", "lprint", "(", "'we are done'", ")", "\n", "\n", "", "", "", "", "lprint", "(", "'test is finished...'", ")", "\n", "\n", "assert", "Log", ".", "depth", "==", "0", "\n", "", ""]], "home.repos.pwc.inspect_result.royerlab_ssi-code.test.test.test_01": [[10, 22], ["utils.psf.MicroscopePSF", "numpy.arange", "numpy.arange", "utils.psf.MicroscopePSF.gLZRFocalScan", "utils.psf.MicroscopePSF.gLZRFocalScanSlow", "numpy.allclose"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.psf.microscope_psf.MicroscopePSF.gLZRFocalScan", "home.repos.pwc.inspect_result.royerlab_ssi-code.psf.microscope_psf.MicroscopePSF.gLZRFocalScanSlow"], ["def", "test_01", "(", ")", ":", "\n", "    ", "\"\"\"\n    Particle on surface.\n    \"\"\"", "\n", "psf", "=", "MicroscopePSF", "(", ")", "\n", "rv", "=", "numpy", ".", "arange", "(", "0.0", ",", "1.01", ",", "0.1", ")", "\n", "zv", "=", "numpy", ".", "arange", "(", "-", "1.0", ",", "1.01", ",", "0.2", ")", "\n", "\n", "fast_rz", "=", "psf", ".", "gLZRFocalScan", "(", "rv", ",", "zv", ")", "\n", "slow_rz", "=", "psf", ".", "gLZRFocalScanSlow", "(", "rv", ",", "zv", ")", "\n", "\n", "assert", "numpy", ".", "allclose", "(", "fast_rz", ",", "slow_rz", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.test.test.test_02": [[24, 36], ["utils.psf.MicroscopePSF", "numpy.arange", "numpy.arange", "utils.psf.MicroscopePSF.gLZRFocalScan", "utils.psf.MicroscopePSF.gLZRFocalScanSlow", "numpy.allclose"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.psf.microscope_psf.MicroscopePSF.gLZRFocalScan", "home.repos.pwc.inspect_result.royerlab_ssi-code.psf.microscope_psf.MicroscopePSF.gLZRFocalScanSlow"], ["", "def", "test_02", "(", ")", ":", "\n", "    ", "\"\"\"\n    Particle above surface.\n    \"\"\"", "\n", "psf", "=", "MicroscopePSF", "(", ")", "\n", "rv", "=", "numpy", ".", "arange", "(", "0.0", ",", "1.01", ",", "0.1", ")", "\n", "zv", "=", "numpy", ".", "arange", "(", "-", "1.0", ",", "1.01", ",", "0.2", ")", "\n", "\n", "fast_rz", "=", "psf", ".", "gLZRFocalScan", "(", "rv", ",", "zv", ",", "pz", "=", "0.5", ")", "\n", "slow_rz", "=", "psf", ".", "gLZRFocalScanSlow", "(", "rv", ",", "zv", ",", "pz", "=", "0.5", ")", "\n", "\n", "assert", "numpy", ".", "allclose", "(", "fast_rz", ",", "slow_rz", ",", "atol", "=", "1.0e-4", ",", "rtol", "=", "1.0e-4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.test.test.test_03": [[38, 51], ["utils.psf.MicroscopePSF", "numpy.arange", "numpy.arange", "utils.psf.MicroscopePSF.gLZRFocalScan", "utils.psf.MicroscopePSF.gLZRFocalScanSlow", "numpy.allclose"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.psf.microscope_psf.MicroscopePSF.gLZRFocalScan", "home.repos.pwc.inspect_result.royerlab_ssi-code.psf.microscope_psf.MicroscopePSF.gLZRFocalScanSlow"], ["", "def", "test_03", "(", ")", ":", "\n", "    ", "\"\"\"\n    Detector offset.\n    \"\"\"", "\n", "psf", "=", "MicroscopePSF", "(", ")", "\n", "rv", "=", "numpy", ".", "arange", "(", "0.0", ",", "1.01", ",", "0.1", ")", "\n", "zv", "=", "numpy", ".", "arange", "(", "-", "1.0", ",", "1.01", ",", "0.2", ")", "\n", "\n", "zd", "=", "psf", ".", "parameters", "[", "\"zd0\"", "]", "+", "1000", "\n", "fast_rz", "=", "psf", ".", "gLZRFocalScan", "(", "rv", ",", "zv", ",", "zd", "=", "zd", ")", "\n", "slow_rz", "=", "psf", ".", "gLZRFocalScanSlow", "(", "rv", ",", "zv", ",", "zd", "=", "zd", ")", "\n", "\n", "assert", "numpy", ".", "allclose", "(", "fast_rz", ",", "slow_rz", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.test.test.test_04": [[53, 65], ["utils.psf.MicroscopePSF", "numpy.arange", "numpy.arange", "utils.psf.MicroscopePSF.gLZRParticleScan", "utils.psf.MicroscopePSF.gLZRParticleScanSlow", "numpy.allclose"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.psf.microscope_psf.MicroscopePSF.gLZRParticleScan", "home.repos.pwc.inspect_result.royerlab_ssi-code.psf.microscope_psf.MicroscopePSF.gLZRParticleScanSlow"], ["", "def", "test_04", "(", ")", ":", "\n", "    ", "\"\"\"\n    Particle scan.\n    \"\"\"", "\n", "psf", "=", "MicroscopePSF", "(", ")", "\n", "rv", "=", "numpy", ".", "arange", "(", "0.0", ",", "1.01", ",", "0.1", ")", "\n", "pv", "=", "numpy", ".", "arange", "(", "0.0", ",", "2.01", ",", "0.1", ")", "\n", "\n", "fast_rz", "=", "psf", ".", "gLZRParticleScan", "(", "rv", ",", "pv", ")", "\n", "slow_rz", "=", "psf", ".", "gLZRParticleScanSlow", "(", "rv", ",", "pv", ")", "\n", "\n", "assert", "numpy", ".", "allclose", "(", "fast_rz", ",", "slow_rz", ",", "rtol", "=", "1.0e-4", ",", "atol", "=", "1.0e-4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.test.test.test_05": [[67, 79], ["utils.psf.MicroscopePSF", "numpy.arange", "numpy.arange", "utils.psf.MicroscopePSF.gLZRParticleScan", "utils.psf.MicroscopePSF.gLZRParticleScanSlow", "numpy.allclose"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.psf.microscope_psf.MicroscopePSF.gLZRParticleScan", "home.repos.pwc.inspect_result.royerlab_ssi-code.psf.microscope_psf.MicroscopePSF.gLZRParticleScanSlow"], ["", "def", "test_05", "(", ")", ":", "\n", "    ", "\"\"\"\n    Particle scan, focus offset.\n    \"\"\"", "\n", "psf", "=", "MicroscopePSF", "(", ")", "\n", "rv", "=", "numpy", ".", "arange", "(", "0.0", ",", "1.01", ",", "0.1", ")", "\n", "pv", "=", "numpy", ".", "arange", "(", "1.0", ",", "3.01", ",", "0.2", ")", "\n", "\n", "fast_rz", "=", "psf", ".", "gLZRParticleScan", "(", "rv", ",", "pv", ",", "zv", "=", "-", "2.0", ")", "\n", "slow_rz", "=", "psf", ".", "gLZRParticleScanSlow", "(", "rv", ",", "pv", ",", "zv", "=", "-", "2.0", ")", "\n", "\n", "assert", "numpy", ".", "allclose", "(", "fast_rz", ",", "slow_rz", ",", "rtol", "=", "1.0e-3", ",", "atol", "=", "1.0e-3", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.royerlab_ssi-code.test.test_offcore.test_offcore_array": [[6, 18], ["ssi.utils.offcore.offcore.offcore_array", "numpy.random.rand().astype", "range", "print", "numpy.random.rand", "array[].sum", "numpy.random.rand().astype.sum"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.offcore.offcore.offcore_array"], ["def", "test_offcore_array", "(", ")", ":", "\n", "    ", "array", "=", "offcore_array", "(", "shape", "=", "(", "1000", ",", "1000", ")", ",", "dtype", "=", "numpy", ".", "float32", ")", "\n", "\n", "vector", "=", "numpy", ".", "random", ".", "rand", "(", "1000", ")", ".", "astype", "(", "numpy", ".", "float32", ")", "\n", "\n", "for", "i", "in", "range", "(", "1000", ")", ":", "\n", "        ", "print", "(", "i", ")", "\n", "array", "[", ":", ",", "i", "]", "=", "vector", "\n", "\n", "assert", "array", "[", ":", ",", "i", "]", ".", "sum", "(", ")", "==", "vector", ".", "sum", "(", ")", "\n", "\n", "", "del", "array", "\n", "", ""]], "home.repos.pwc.inspect_result.royerlab_ssi-code.test.test_nd.test_nd_split_slices": [[11, 27], ["list", "print", "numpy.random.choice", "numpy.random.choice", "numpy.all", "ssi.utils.array.nd.nd_split_slices", "str"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.array.nd.nd_split_slices"], ["def", "test_nd_split_slices", "(", ")", ":", "\n", "    ", "array_shape", "=", "(", "96", ",", "17", ",", "117", ",", "45", ")", "\n", "nb_slices", "=", "(", "5", ",", "3", ",", "7", ",", "5", ")", "\n", "\n", "slice_tuple_list", "=", "list", "(", "nd_split_slices", "(", "array_shape", ",", "nb_slices", ",", "do_shuffle", "=", "True", ")", ")", "\n", "\n", "print", "(", "str", "(", "slice_tuple_list", ")", ")", "\n", "\n", "array_source", "=", "numpy", ".", "random", ".", "choice", "(", "a", "=", "[", "False", ",", "True", "]", ",", "size", "=", "array_shape", ")", "\n", "array_target", "=", "numpy", ".", "random", ".", "choice", "(", "a", "=", "[", "False", ",", "True", "]", ",", "size", "=", "array_shape", ")", "\n", "\n", "for", "slice_tuple", "in", "slice_tuple_list", ":", "\n", "        ", "array_target", "[", "slice_tuple", "]", "=", "array_source", "[", "slice_tuple", "]", "\n", "pass", "\n", "\n", "", "assert", "numpy", ".", "all", "(", "array_source", "==", "array_target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.test.test_nd.test_nd_split_slices_with_margins": [[29, 59], ["list", "list", "numpy.random.choice", "numpy.zeros", "zip", "numpy.all", "ssi.utils.array.nd.nd_split_slices", "ssi.utils.array.nd.nd_split_slices", "ssi.utils.array.nd.remove_margin_slice"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.array.nd.nd_split_slices", "home.repos.pwc.inspect_result.royerlab_ssi-code.array.nd.nd_split_slices", "home.repos.pwc.inspect_result.royerlab_ssi-code.array.nd.remove_margin_slice"], ["", "def", "test_nd_split_slices_with_margins", "(", ")", ":", "\n", "    ", "array_shape", "=", "(", "96", ",", "17", ",", "117", ",", "45", ")", "\n", "nb_slices", "=", "(", "5", ",", "3", ",", "7", ",", "5", ")", "\n", "margins", "=", "(", "4", ",", "5", ",", "6", ",", "7", ")", "\n", "\n", "slice_tuple_list", "=", "list", "(", "nd_split_slices", "(", "array_shape", ",", "nb_slices", ",", "do_shuffle", "=", "False", ")", ")", "\n", "slice_margin_tuple_list", "=", "list", "(", "\n", "nd_split_slices", "(", "array_shape", ",", "nb_slices", ",", "do_shuffle", "=", "False", ",", "margins", "=", "margins", ")", "\n", ")", "\n", "\n", "# print(str(slice_tuple_list))", "\n", "\n", "array_source", "=", "numpy", ".", "random", ".", "choice", "(", "a", "=", "[", "0", ",", "1", "]", ",", "size", "=", "array_shape", ")", "\n", "array_target", "=", "numpy", ".", "zeros", "(", "array_shape", ",", "dtype", "=", "numpy", ".", "int64", ")", "\n", "\n", "for", "slice_tuple", ",", "slice_margin_tuple", "in", "zip", "(", "\n", "slice_tuple_list", ",", "slice_margin_tuple_list", "\n", ")", ":", "\n", "        ", "sliced_array_with_margin", "=", "array_source", "[", "slice_margin_tuple", "]", "\n", "remove_margin_slice_tuple", "=", "remove_margin_slice", "(", "\n", "array_shape", ",", "slice_margin_tuple", ",", "slice_tuple", "\n", ")", "\n", "sliced_array_removed_margin", "=", "sliced_array_with_margin", "[", "\n", "remove_margin_slice_tuple", "\n", "]", "\n", "# print(array_target[slice_tuple].shape)", "\n", "# print(sliced_array_removed_margin.shape)", "\n", "array_target", "[", "slice_tuple", "]", "+=", "sliced_array_removed_margin", "\n", "\n", "", "assert", "numpy", ".", "all", "(", "array_source", "==", "array_target", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.test.test_nd.test_extract_tiles": [[61, 68], ["skimage.data.binary_blobs", "ssi.utils.array.nd.extract_tiles", "print", "print", "len"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.array.nd.extract_tiles"], ["", "def", "test_extract_tiles", "(", ")", ":", "\n", "    ", "blob_image", "=", "binary_blobs", "(", "length", "=", "512", ",", "seed", "=", "1", ",", "n_dim", "=", "2", ")", "\n", "\n", "tiles", "=", "extract_tiles", "(", "blob_image", ",", "tile_size", "=", "64", ",", "extraction_step", "=", "64", ",", "flatten", "=", "True", ")", "\n", "\n", "print", "(", "tiles", ".", "shape", ")", "\n", "print", "(", "len", "(", "tiles", ")", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.royerlab_ssi-code.psf.microscope_psf.MicroscopePSF.__init__": [[40, 65], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n\n        \"\"\"", "\n", "\n", "# Internal constants.", "\n", "self", ".", "num_basis", "=", "(", "\n", "100", "# Number of rescaled Bessels that approximate the phase function.", "\n", ")", "\n", "self", ".", "rho_samples", "=", "1000", "# Number of pupil sample along the radial direction.", "\n", "\n", "# Microscope parameters.", "\n", "# IMPORTANT: DO NOT CHANGE THESE DEFAULTS, IMPORTANT FOR TESTS", "\n", "self", ".", "parameters", "=", "{", "\n", "\"M\"", ":", "100.0", ",", "# magnification", "\n", "\"NA\"", ":", "1.4", ",", "# numerical aperture", "\n", "\"ng0\"", ":", "1.515", ",", "# coverslip RI design value", "\n", "\"ng\"", ":", "1.515", ",", "# coverslip RI experimental value", "\n", "\"ni0\"", ":", "1.515", ",", "# immersion medium RI design value", "\n", "\"ni\"", ":", "1.515", ",", "# immersion medium RI experimental value", "\n", "\"ns\"", ":", "1.33", ",", "# specimen refractive index (RI)", "\n", "\"ti0\"", ":", "150", ",", "# microns, working distance (immersion medium thickness) design value", "\n", "\"tg\"", ":", "170", ",", "# microns, coverslip thickness experimental value", "\n", "\"tg0\"", ":", "170", ",", "# microns, coverslip thickness design value", "\n", "\"zd0\"", ":", "200.0", "*", "1.0e3", ",", "\n", "}", "# microscope tube length (in microns).", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.psf.microscope_psf.MicroscopePSF._calcRv": [[67, 73], ["numpy.arange", "math.sqrt"], "methods", ["None"], ["", "def", "_calcRv", "(", "self", ",", "dxy", ",", "xy_size", ",", "sampling", "=", "2", ")", ":", "\n", "        ", "\"\"\"\n        Calculate rv vector, this is 2x up-sampled.\n        \"\"\"", "\n", "rv_max", "=", "math", ".", "sqrt", "(", "0.5", "*", "xy_size", "*", "xy_size", ")", "+", "1", "\n", "return", "numpy", ".", "arange", "(", "0", ",", "rv_max", "*", "dxy", ",", "dxy", "/", "sampling", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.psf.microscope_psf.MicroscopePSF._configure": [[74, 96], ["min", "numpy.arange"], "methods", ["None"], ["", "def", "_configure", "(", "self", ",", "wvl", ")", ":", "\n", "\n", "        ", "mp", "=", "self", ".", "parameters", "\n", "\n", "# Scaling factors for the Fourier-Bessel series expansion", "\n", "min_wavelength", "=", "0.436", "# microns", "\n", "scaling_factor", "=", "(", "\n", "mp", "[", "\"NA\"", "]", "\n", "*", "(", "3", "*", "numpy", ".", "arange", "(", "1", ",", "self", ".", "num_basis", "+", "1", ")", "-", "2", ")", "\n", "*", "min_wavelength", "\n", "/", "wvl", "\n", ")", "\n", "\n", "# Not sure this is completely correct for the case where the axial", "\n", "# location of the flourophore is 0.0.", "\n", "#", "\n", "max_rho", "=", "(", "\n", "min", "(", "[", "mp", "[", "\"NA\"", "]", ",", "mp", "[", "\"ng0\"", "]", ",", "mp", "[", "\"ng\"", "]", ",", "mp", "[", "\"ni0\"", "]", ",", "mp", "[", "\"ni\"", "]", ",", "mp", "[", "\"ns\"", "]", "]", ")", "\n", "/", "mp", "[", "\"NA\"", "]", "\n", ")", "\n", "\n", "return", "[", "scaling_factor", ",", "max_rho", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.psf.microscope_psf.MicroscopePSF.deltaFocus": [[97, 108], ["None"], "methods", ["None"], ["", "def", "deltaFocus", "(", "self", ",", "zd", ")", ":", "\n", "        ", "\"\"\"\n        Return focal offset needed to compensate for the camera being at zd.\n\n        mp - The microscope parameters dictionary.\n        zd - Actual camera position in microns.\n        \"\"\"", "\n", "mp", "=", "self", ".", "parameters", "\n", "\n", "a", "=", "mp", "[", "\"NA\"", "]", "*", "mp", "[", "\"zd0\"", "]", "/", "mp", "[", "\"M\"", "]", "# Aperture radius at the back focal plane.", "\n", "return", "a", "*", "a", "*", "(", "mp", "[", "\"zd0\"", "]", "-", "zd", ")", "/", "(", "2.0", "*", "mp", "[", "\"zd0\"", "]", "*", "zd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.psf.microscope_psf.MicroscopePSF.gLXYZCameraScan": [[109, 138], ["microscope_psf.MicroscopePSF._calcRv", "microscope_psf.MicroscopePSF.gLZRCameraScan", "microscope_psf.MicroscopePSF.psfRZToPSFXYZ"], "methods", ["home.repos.pwc.inspect_result.royerlab_ssi-code.psf.microscope_psf.MicroscopePSF._calcRv", "home.repos.pwc.inspect_result.royerlab_ssi-code.psf.microscope_psf.MicroscopePSF.gLZRCameraScan", "home.repos.pwc.inspect_result.royerlab_ssi-code.psf.microscope_psf.MicroscopePSF.psfRZToPSFXYZ"], ["", "def", "gLXYZCameraScan", "(", "\n", "self", ",", "dxy", ",", "xy_size", ",", "zd", ",", "normalize", "=", "True", ",", "pz", "=", "0.0", ",", "wvl", "=", "0.6", ",", "zv", "=", "0.0", "\n", ")", ":", "\n", "        ", "\"\"\"\n        NOTE: Does not work!\n\n        Calculate 3D G-L PSF. This is models the PSF you would measure by scanning the\n        camera position (changing the microscope tube length).\n\n        This will return a numpy array with of size (zv.size, xy_size, xy_size). Note that z\n        is the zeroth dimension of the PSF.\n\n        dxy - Step size in the XY plane.\n        xy_size - Number of pixels in X/Y.\n        zd - A numpy array containing the camera positions in microns.\n\n        normalize - Normalize the PSF to unit height.\n        pz - Particle z position above the coverslip (positive values only).\n        wvl - Light wavelength in microns.\n        zv - The (relative) z offset value of the coverslip (negative is closer to the objective).\n        \"\"\"", "\n", "# Calculate rv vector, this is 2x up-sampled.", "\n", "rv", "=", "self", ".", "_calcRv", "(", "dxy", ",", "xy_size", ")", "\n", "\n", "# Calculate radial/Z PSF.", "\n", "PSF_rz", "=", "self", ".", "gLZRCameraScan", "(", "rv", ",", "zd", ",", "normalize", "=", "normalize", ",", "pz", "=", "pz", ",", "wvl", "=", "wvl", ",", "zv", "=", "zv", ")", "\n", "\n", "# Create XYZ PSF by interpolation.", "\n", "return", "self", ".", "psfRZToPSFXYZ", "(", "dxy", ",", "xy_size", ",", "rv", ",", "PSF_rz", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.psf.microscope_psf.MicroscopePSF.gLXYZFocalScan": [[139, 166], ["microscope_psf.MicroscopePSF._calcRv", "microscope_psf.MicroscopePSF.gLZRFocalScan", "microscope_psf.MicroscopePSF.psfRZToPSFXYZ"], "methods", ["home.repos.pwc.inspect_result.royerlab_ssi-code.psf.microscope_psf.MicroscopePSF._calcRv", "home.repos.pwc.inspect_result.royerlab_ssi-code.psf.microscope_psf.MicroscopePSF.gLZRFocalScan", "home.repos.pwc.inspect_result.royerlab_ssi-code.psf.microscope_psf.MicroscopePSF.psfRZToPSFXYZ"], ["", "def", "gLXYZFocalScan", "(", "\n", "self", ",", "dxy", ",", "xy_size", ",", "zv", ",", "normalize", "=", "True", ",", "pz", "=", "0.0", ",", "wvl", "=", "0.6", ",", "zd", "=", "None", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Calculate 3D G-L PSF. This is models the PSF you would measure by scanning the microscopes\n        focus.\n\n        This will return a numpy array with of size (zv.size, xy_size, xy_size). Note that z\n        is the zeroth dimension of the PSF.\n\n        dxy - Step size in the XY plane.\n        xy_size - Number of pixels in X/Y.\n        zv - A numpy array containing the (relative) z offset values of the coverslip (negative is closer to the objective).\n\n        normalize - Normalize the PSF to unit height.\n        pz - Particle z position above the coverslip (positive values only).\n        wvl - Light wavelength in microns.\n        zd - Actual camera position in microns. If not specified the microscope tube length is used.\n        \"\"\"", "\n", "# Calculate rv vector, this is 2x up-sampled.", "\n", "rv", "=", "self", ".", "_calcRv", "(", "dxy", ",", "xy_size", ")", "\n", "\n", "# Calculate radial/Z PSF.", "\n", "PSF_rz", "=", "self", ".", "gLZRFocalScan", "(", "rv", ",", "zv", ",", "normalize", "=", "normalize", ",", "pz", "=", "pz", ",", "wvl", "=", "wvl", ",", "zd", "=", "zd", ")", "\n", "\n", "# Create XYZ PSF by interpolation.", "\n", "return", "self", ".", "psfRZToPSFXYZ", "(", "dxy", ",", "xy_size", ",", "rv", ",", "PSF_rz", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.psf.microscope_psf.MicroscopePSF.gLXYZParticleScan": [[167, 197], ["microscope_psf.MicroscopePSF._calcRv", "microscope_psf.MicroscopePSF.gLZRParticleScan", "microscope_psf.MicroscopePSF.psfRZToPSFXYZ"], "methods", ["home.repos.pwc.inspect_result.royerlab_ssi-code.psf.microscope_psf.MicroscopePSF._calcRv", "home.repos.pwc.inspect_result.royerlab_ssi-code.psf.microscope_psf.MicroscopePSF.gLZRParticleScan", "home.repos.pwc.inspect_result.royerlab_ssi-code.psf.microscope_psf.MicroscopePSF.psfRZToPSFXYZ"], ["", "def", "gLXYZParticleScan", "(", "\n", "self", ",", "dxy", ",", "xy_size", ",", "pz", ",", "normalize", "=", "True", ",", "wvl", "=", "0.6", ",", "zd", "=", "None", ",", "zv", "=", "0.0", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Calculate 3D G-L PSF. This is models the PSF you would measure by scanning a particle\n        through the microscopes focus.\n\n        This will return a numpy array with of size (zv.size, xy_size, xy_size). Note that z\n        is the zeroth dimension of the PSF.\n\n        dxy - Step size in the XY plane.\n        xy_size - Number of pixels in X/Y.\n        pz - A numpy array containing the particle z position above the coverslip (positive values only)\n             in microns.\n\n        normalize - Normalize the PSF to unit height.\n        wvl - Light wavelength in microns.\n        zd - Actual camera position in microns. If not specified the microscope tube length is used.\n        zv - The (relative) z offset value of the coverslip (negative is closer to the objective).\n        \"\"\"", "\n", "# Calculate rv vector, this is 2x up-sampled.", "\n", "rv", "=", "self", ".", "_calcRv", "(", "dxy", ",", "xy_size", ")", "\n", "\n", "# Calculate radial/Z PSF.", "\n", "PSF_rz", "=", "self", ".", "gLZRParticleScan", "(", "\n", "rv", ",", "pz", ",", "normalize", "=", "normalize", ",", "wvl", "=", "wvl", ",", "zd", "=", "zd", ",", "zv", "=", "zv", "\n", ")", "\n", "\n", "# Create XYZ PSF by interpolation.", "\n", "return", "self", ".", "psfRZToPSFXYZ", "(", "dxy", ",", "xy_size", ",", "rv", ",", "PSF_rz", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.psf.microscope_psf.MicroscopePSF.gLZRScan": [[198, 269], ["microscope_psf.MicroscopePSF._configure", "numpy.linspace", "pz.reshape.reshape.reshape", "zd.reshape.reshape.reshape", "microscope_psf.MicroscopePSF.OPD", "numpy.exp", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "numpy.linalg.lstsq", "math.sqrt", "zv.reshape", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "numpy.max", "scaling_factor.reshape", "rv.reshape", "numpy.abs", "J0", "J1", "R.dot", "J1", "J0"], "methods", ["home.repos.pwc.inspect_result.royerlab_ssi-code.psf.microscope_psf.MicroscopePSF._configure", "home.repos.pwc.inspect_result.royerlab_ssi-code.psf.microscope_psf.MicroscopePSF.OPD"], ["", "def", "gLZRScan", "(", "self", ",", "pz", ",", "rv", ",", "zd", ",", "zv", ",", "normalize", "=", "True", ",", "wvl", "=", "0.6", ")", ":", "\n", "        ", "\"\"\"\n        Calculate radial G-L at specified radius. This function is primarily designed\n        for internal use. Note that only one pz, zd and zv should be a numpy array\n        with more than one element. You can simulate scanning the focus, the particle\n        or the camera but not 2 or 3 of these values at the same time.\n\n        mp - The microscope parameters dictionary.\n        pz - A numpy array containing the particle z position above the coverslip (positive values only).\n        rv - A numpy array containing the radius values.\n        zd - A numpy array containing the actual camera position in microns.\n        zv - A numpy array containing the relative z offset value of the coverslip (negative is closer to the objective).\n\n        normalize - Normalize the PSF to unit height.\n        wvl - Light wavelength in microns.\n        \"\"\"", "\n", "\n", "mp", "=", "self", ".", "parameters", "\n", "\n", "[", "scaling_factor", ",", "max_rho", "]", "=", "self", ".", "_configure", "(", "wvl", ")", "\n", "rho", "=", "numpy", ".", "linspace", "(", "0.0", ",", "max_rho", ",", "self", ".", "rho_samples", ")", "\n", "\n", "a", "=", "(", "\n", "mp", "[", "\"NA\"", "]", "*", "mp", "[", "\"zd0\"", "]", "/", "math", ".", "sqrt", "(", "mp", "[", "\"M\"", "]", "*", "mp", "[", "\"M\"", "]", "+", "mp", "[", "\"NA\"", "]", "*", "mp", "[", "\"NA\"", "]", ")", "\n", ")", "# Aperture radius at the back focal plane.", "\n", "k", "=", "2.0", "*", "numpy", ".", "pi", "/", "wvl", "\n", "\n", "ti", "=", "zv", ".", "reshape", "(", "-", "1", ",", "1", ")", "+", "mp", "[", "\"ti0\"", "]", "\n", "pz", "=", "pz", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "zd", "=", "zd", ".", "reshape", "(", "-", "1", ",", "1", ")", "\n", "\n", "opdt", "=", "self", ".", "OPD", "(", "rho", ",", "ti", ",", "pz", ",", "wvl", ",", "zd", ")", "\n", "\n", "# Sample the phase", "\n", "# phase = numpy.cos(opdt) + 1j * numpy.sin(opdt)", "\n", "phase", "=", "numpy", ".", "exp", "(", "1j", "*", "opdt", ")", "\n", "\n", "# Define the basis of Bessel functions", "\n", "# Shape is (number of basis functions by number of rho samples)", "\n", "J", "=", "scipy", ".", "special", ".", "jv", "(", "0", ",", "scaling_factor", ".", "reshape", "(", "-", "1", ",", "1", ")", "*", "rho", ")", "\n", "\n", "# Compute the approximation to the sampled pupil phase by finding the least squares", "\n", "# solution to the complex coefficients of the Fourier-Bessel expansion.", "\n", "# Shape of C is (number of basis functions by number of z samples).", "\n", "# Note the matrix transposes to get the dimensions correct.", "\n", "C", ",", "residuals", ",", "_", ",", "_", "=", "numpy", ".", "linalg", ".", "lstsq", "(", "J", ".", "T", ",", "phase", ".", "T", ",", "rcond", "=", "None", ")", "\n", "\n", "rv", "=", "rv", "*", "mp", "[", "\"M\"", "]", "\n", "b", "=", "k", "*", "a", "*", "rv", ".", "reshape", "(", "-", "1", ",", "1", ")", "/", "zd", "\n", "\n", "# Convenience functions for J0 and J1 Bessel functions", "\n", "J0", "=", "lambda", "x", ":", "scipy", ".", "special", ".", "jv", "(", "0", ",", "x", ")", "# noqa: E731", "\n", "J1", "=", "lambda", "x", ":", "scipy", ".", "special", ".", "jv", "(", "1", ",", "x", ")", "# noqa: E731", "\n", "\n", "# See equation 5 in Li, Xue, and Blu", "\n", "denom", "=", "scaling_factor", "*", "scaling_factor", "-", "b", "*", "b", "\n", "R", "=", "(", "\n", "scaling_factor", "*", "J1", "(", "scaling_factor", "*", "max_rho", ")", "*", "J0", "(", "b", "*", "max_rho", ")", "*", "max_rho", "\n", "-", "b", "*", "J0", "(", "scaling_factor", "*", "max_rho", ")", "*", "J1", "(", "b", "*", "max_rho", ")", "*", "max_rho", "\n", ")", "\n", "R", "/=", "denom", "\n", "\n", "# The transpose places the axial direction along the first dimension of the array, i.e. rows", "\n", "# This is only for convenience.", "\n", "PSF_rz", "=", "(", "numpy", ".", "abs", "(", "R", ".", "dot", "(", "C", ")", ")", "**", "2", ")", ".", "T", "\n", "\n", "# Normalize to the maximum value", "\n", "if", "normalize", ":", "\n", "            ", "PSF_rz", "/=", "numpy", ".", "max", "(", "PSF_rz", ")", "\n", "\n", "", "return", "PSF_rz", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.psf.microscope_psf.MicroscopePSF.gLZRCameraScan": [[270, 290], ["numpy.array", "numpy.array", "microscope_psf.MicroscopePSF.gLZRScan"], "methods", ["home.repos.pwc.inspect_result.royerlab_ssi-code.psf.microscope_psf.MicroscopePSF.gLZRScan"], ["", "def", "gLZRCameraScan", "(", "self", ",", "rv", ",", "zd", ",", "normalize", "=", "True", ",", "pz", "=", "0.0", ",", "wvl", "=", "0.6", ",", "zv", "=", "0.0", ")", ":", "\n", "        ", "\"\"\"\n        NOTE: Does not work!\n\n        Calculate radial G-L at specified radius and z values. This is models the PSF\n        you would measure by scanning the camera position (changing the microscope\n        tube length).\n\n        rv - A numpy array containing the radius values.\n        zd - A numpy array containing the camera positions in microns.\n\n        normalize - Normalize the PSF to unit height.\n        pz - Particle z position above the coverslip (positive values only).\n        wvl - Light wavelength in microns.\n        zv - The (relative) z offset value of the coverslip (negative is closer to the objective).\n        \"\"\"", "\n", "pz", "=", "numpy", ".", "array", "(", "[", "pz", "]", ")", "\n", "zv", "=", "numpy", ".", "array", "(", "[", "zv", "]", ")", "\n", "\n", "return", "self", ".", "gLZRScan", "(", "pz", ",", "rv", ",", "zd", ",", "zv", ",", "normalize", "=", "normalize", ",", "wvl", "=", "wvl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.psf.microscope_psf.MicroscopePSF.gLZRFocalScan": [[291, 316], ["numpy.array", "numpy.array", "microscope_psf.MicroscopePSF.gLZRScan"], "methods", ["home.repos.pwc.inspect_result.royerlab_ssi-code.psf.microscope_psf.MicroscopePSF.gLZRScan"], ["", "def", "gLZRFocalScan", "(", "self", ",", "rv", ",", "zv", ",", "normalize", "=", "True", ",", "pz", "=", "0.0", ",", "wvl", "=", "0.6", ",", "zd", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Calculate radial G-L at specified radius and z values. This is models the PSF\n        you would measure by scanning the microscopes focus.\n\n        mp - The microscope parameters dictionary.\n        rv - A numpy array containing the radius values.\n        zv - A numpy array containing the (relative) z offset values of the coverslip (negative is\n             closer to the objective) in microns.\n\n        normalize - Normalize the PSF to unit height.\n        pz - Particle z position above the coverslip (positive values only).\n        wvl - Light wavelength in microns.\n        zd - Actual camera position in microns. If not specified the microscope tube length is used.\n        \"\"\"", "\n", "\n", "mp", "=", "self", ".", "parameters", "\n", "\n", "if", "zd", "is", "None", ":", "\n", "            ", "zd", "=", "mp", "[", "\"zd0\"", "]", "\n", "\n", "", "pz", "=", "numpy", ".", "array", "(", "[", "pz", "]", ")", "\n", "zd", "=", "numpy", ".", "array", "(", "[", "zd", "]", ")", "\n", "\n", "return", "self", ".", "gLZRScan", "(", "pz", ",", "rv", ",", "zd", ",", "zv", ",", "normalize", "=", "normalize", ",", "wvl", "=", "wvl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.psf.microscope_psf.MicroscopePSF.gLZRParticleScan": [[317, 342], ["numpy.array", "numpy.array", "microscope_psf.MicroscopePSF.gLZRScan"], "methods", ["home.repos.pwc.inspect_result.royerlab_ssi-code.psf.microscope_psf.MicroscopePSF.gLZRScan"], ["", "def", "gLZRParticleScan", "(", "self", ",", "rv", ",", "pz", ",", "normalize", "=", "True", ",", "wvl", "=", "0.6", ",", "zd", "=", "None", ",", "zv", "=", "0.0", ")", ":", "\n", "        ", "\"\"\"\n        Calculate radial G-L at specified radius and z values. This is models the PSF\n        you would measure by scanning the particle relative to the microscopes focus.\n\n        mp - The microscope parameters dictionary.\n        rv - A numpy array containing the radius values.\n        pz - A numpy array containing the particle z position above the coverslip (positive values only)\n             in microns.\n\n        normalize - Normalize the PSF to unit height.\n        wvl - Light wavelength in microns.\n        zd - Actual camera position in microns. If not specified the microscope tube length is used.\n        zv - The (relative) z offset value of the coverslip (negative is closer to the objective).\n        \"\"\"", "\n", "\n", "mp", "=", "self", ".", "parameters", "\n", "\n", "if", "zd", "is", "None", ":", "\n", "            ", "zd", "=", "mp", "[", "\"zd0\"", "]", "\n", "\n", "", "zd", "=", "numpy", ".", "array", "(", "[", "zd", "]", ")", "\n", "zv", "=", "numpy", ".", "array", "(", "[", "zv", "]", ")", "\n", "\n", "return", "self", ".", "gLZRScan", "(", "pz", ",", "rv", ",", "zd", ",", "zv", ",", "normalize", "=", "normalize", ",", "wvl", "=", "wvl", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.psf.microscope_psf.MicroscopePSF.OPD": [[343, 383], ["numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt", "numpy.sqrt"], "methods", ["None"], ["", "def", "OPD", "(", "self", ",", "rho", ",", "ti", ",", "pz", ",", "wvl", ",", "zd", ")", ":", "\n", "        ", "\"\"\"\n        Calculate phase aberration term.\n\n        mp - The microscope parameters dictionary.\n        rho - Rho term.\n        ti - Coverslip z offset in microns.\n        pz - Particle z position above the coverslip in microns.\n        wvl - Light wavelength in microns.\n        zd - Actual camera position in microns.\n        \"\"\"", "\n", "\n", "mp", "=", "self", ".", "parameters", "\n", "\n", "NA", "=", "mp", "[", "\"NA\"", "]", "\n", "ns", "=", "mp", "[", "\"ns\"", "]", "\n", "ng0", "=", "mp", "[", "\"ng0\"", "]", "\n", "ng", "=", "mp", "[", "\"ng\"", "]", "\n", "ni0", "=", "mp", "[", "\"ni0\"", "]", "\n", "ni", "=", "mp", "[", "\"ni\"", "]", "\n", "ti0", "=", "mp", "[", "\"ti0\"", "]", "\n", "tg", "=", "mp", "[", "\"tg\"", "]", "\n", "tg0", "=", "mp", "[", "\"tg0\"", "]", "\n", "zd0", "=", "mp", "[", "\"zd0\"", "]", "\n", "\n", "a", "=", "NA", "*", "zd0", "/", "mp", "[", "\"M\"", "]", "# Aperture radius at the back focal plane.", "\n", "k", "=", "2.0", "*", "numpy", ".", "pi", "/", "wvl", "# Wave number of emitted light.", "\n", "\n", "OPDs", "=", "pz", "*", "numpy", ".", "sqrt", "(", "ns", "*", "ns", "-", "NA", "*", "NA", "*", "rho", "*", "rho", ")", "# OPD in the sample.", "\n", "OPDi", "=", "ti", "*", "numpy", ".", "sqrt", "(", "ni", "*", "ni", "-", "NA", "*", "NA", "*", "rho", "*", "rho", ")", "-", "ti0", "*", "numpy", ".", "sqrt", "(", "\n", "ni0", "*", "ni0", "-", "NA", "*", "NA", "*", "rho", "*", "rho", "\n", ")", "# OPD in the immersion medium.", "\n", "OPDg", "=", "tg", "*", "numpy", ".", "sqrt", "(", "ng", "*", "ng", "-", "NA", "*", "NA", "*", "rho", "*", "rho", ")", "-", "tg0", "*", "numpy", ".", "sqrt", "(", "\n", "ng0", "*", "ng0", "-", "NA", "*", "NA", "*", "rho", "*", "rho", "\n", ")", "# OPD in the coverslip.", "\n", "OPDt", "=", "(", "\n", "a", "*", "a", "*", "(", "zd0", "-", "zd", ")", "*", "rho", "*", "rho", "/", "(", "2.0", "*", "zd0", "*", "zd", ")", "\n", ")", "# OPD in camera position.", "\n", "\n", "return", "k", "*", "(", "OPDs", "+", "OPDi", "+", "OPDg", "+", "OPDt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.psf.microscope_psf.MicroscopePSF.psfRZToPSFXYZ": [[384, 402], ["numpy.zeros", "range", "float", "numpy.sqrt", "scipy.interpolate.interp1d", "scipy.interpolate.interp1d", "scipy.interpolate.interp1d", "scipy.interpolate.interp1d", "scipy.interpolate.interp1d", "scipy.interpolate.interp1d", "scipy.interpolate.interp1d", "scipy.interpolate.interp1d", "scipy.interpolate.interp1d", "scipy.interpolate.interp1d", "scipy.interpolate.interp1d", "scipy.interpolate.interp1d", "scipy.interpolate.interp1d", "scipy.interpolate.interp1d", "scipy.interpolate.interp1d", "scipy.interpolate.interp1d", "scipy.interpolate.interp1d.reshape", "scipy.interpolate.interp1d.reshape", "scipy.interpolate.interp1d.reshape", "scipy.interpolate.interp1d.reshape", "scipy.interpolate.interp1d.", "scipy.interpolate.interp1d.", "scipy.interpolate.interp1d.", "scipy.interpolate.interp1d.", "r_pixel.ravel"], "methods", ["None"], ["", "def", "psfRZToPSFXYZ", "(", "self", ",", "dxy", ",", "xy_size", ",", "rv", ",", "PSF_rz", ")", ":", "\n", "        ", "\"\"\"\n        Use interpolation to create a 3D XYZ PSF from a 2D ZR PSF.\n        \"\"\"", "\n", "# Create XY grid of radius values.", "\n", "c_xy", "=", "float", "(", "xy_size", ")", "*", "0.5", "\n", "xy", "=", "numpy", ".", "mgrid", "[", "0", ":", "xy_size", ",", "0", ":", "xy_size", "]", "+", "0.5", "\n", "r_pixel", "=", "dxy", "*", "numpy", ".", "sqrt", "(", "\n", "(", "xy", "[", "1", "]", "-", "c_xy", ")", "*", "(", "xy", "[", "1", "]", "-", "c_xy", ")", "+", "(", "xy", "[", "0", "]", "-", "c_xy", ")", "*", "(", "xy", "[", "0", "]", "-", "c_xy", ")", "\n", ")", "\n", "\n", "# Create XYZ PSF by interpolation.", "\n", "PSF_xyz", "=", "numpy", ".", "zeros", "(", "(", "PSF_rz", ".", "shape", "[", "0", "]", ",", "xy_size", ",", "xy_size", ")", ")", "\n", "for", "i", "in", "range", "(", "PSF_rz", ".", "shape", "[", "0", "]", ")", ":", "\n", "            ", "psf_rz_interp", "=", "scipy", ".", "interpolate", ".", "interp1d", "(", "rv", ",", "PSF_rz", "[", "i", ",", ":", "]", ")", "\n", "PSF_xyz", "[", "i", ",", ":", ",", ":", "]", "=", "psf_rz_interp", "(", "r_pixel", ".", "ravel", "(", ")", ")", ".", "reshape", "(", "xy_size", ",", "xy_size", ")", "\n", "\n", "", "return", "PSF_xyz", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.psf.microscope_psf.MicroscopePSF.slowGL": [[403, 445], ["math.sqrt", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.special.jv", "scipy.integrate.quad", "scipy.integrate.quad", "scipy.integrate.quad", "scipy.integrate.quad", "scipy.integrate.quad", "scipy.integrate.quad", "scipy.integrate.quad", "scipy.integrate.quad", "scipy.integrate.quad", "scipy.integrate.quad", "scipy.integrate.quad", "scipy.integrate.quad", "scipy.integrate.quad", "scipy.integrate.quad", "scipy.integrate.quad", "scipy.integrate.quad", "scipy.integrate.quad", "scipy.integrate.quad", "scipy.integrate.quad", "scipy.integrate.quad", "scipy.integrate.quad", "scipy.integrate.quad", "scipy.integrate.quad", "scipy.integrate.quad", "scipy.integrate.quad", "scipy.integrate.quad", "scipy.integrate.quad", "scipy.integrate.quad", "scipy.integrate.quad", "scipy.integrate.quad", "scipy.integrate.quad", "scipy.integrate.quad", "cmath.exp", "cmath.exp", "microscope_psf.MicroscopePSF.slowGL.integral_fn_imag"], "methods", ["None"], ["", "def", "slowGL", "(", "self", ",", "max_rho", ",", "rv", ",", "zv", ",", "pz", ",", "wvl", ",", "zd", ")", ":", "\n", "        ", "\"\"\"\n        Calculate a single point in the G-L PSF using integration. This\n        is primarily provided for testing / reference purposes. As the\n        function name implies, this is going to be slow.\n\n        mp - The microscope parameters dictionary.\n        max_rho - The maximum rho value.\n        rv - A radius value in microns.\n        zv - A z offset value (of the coverslip) in microns.\n        pz - Particle z position above the coverslip in microns.\n        wvl - Light wavelength in microns.\n        zd - Actual camera position in microns.\n        \"\"\"", "\n", "\n", "mp", "=", "self", ".", "parameters", "\n", "\n", "a", "=", "(", "\n", "mp", "[", "\"NA\"", "]", "*", "mp", "[", "\"zd0\"", "]", "/", "math", ".", "sqrt", "(", "mp", "[", "\"M\"", "]", "*", "mp", "[", "\"M\"", "]", "+", "mp", "[", "\"NA\"", "]", "*", "mp", "[", "\"NA\"", "]", ")", "\n", ")", "# Aperture radius at the back focal plane.", "\n", "k", "=", "2.0", "*", "numpy", ".", "pi", "/", "wvl", "\n", "ti", "=", "zv", "+", "mp", "[", "\"ti0\"", "]", "\n", "\n", "rv", "=", "rv", "*", "mp", "[", "\"M\"", "]", "\n", "\n", "def", "integral_fn_imag", "(", "rho", ")", ":", "\n", "            ", "t1", "=", "k", "*", "a", "*", "rho", "*", "rv", "/", "zd", "\n", "t2", "=", "scipy", ".", "special", ".", "jv", "(", "0", ",", "t1", ")", "\n", "t3", "=", "t2", "*", "cmath", ".", "exp", "(", "1j", "*", "self", ".", "OPD", "(", "rho", ",", "ti", ",", "pz", ",", "wvl", ",", "zd", ")", ")", "*", "rho", "\n", "return", "t3", ".", "imag", "\n", "\n", "", "def", "integral_fn_real", "(", "rho", ")", ":", "\n", "            ", "t1", "=", "k", "*", "a", "*", "rho", "*", "rv", "/", "zd", "\n", "t2", "=", "scipy", ".", "special", ".", "jv", "(", "0", ",", "t1", ")", "\n", "t3", "=", "t2", "*", "cmath", ".", "exp", "(", "1j", "*", "self", ".", "OPD", "(", "rho", ",", "ti", ",", "pz", ",", "wvl", ",", "zd", ")", ")", "*", "rho", "\n", "return", "t3", ".", "real", "\n", "\n", "", "int_i", "=", "scipy", ".", "integrate", ".", "quad", "(", "lambda", "x", ":", "integral_fn_imag", "(", "x", ")", ",", "0.0", ",", "max_rho", ")", "[", "0", "]", "\n", "int_r", "=", "scipy", ".", "integrate", ".", "quad", "(", "lambda", "x", ":", "integral_fn_real", "(", "x", ")", ",", "0.0", ",", "max_rho", ")", "[", "0", "]", "\n", "\n", "t1", "=", "k", "*", "a", "*", "a", "/", "(", "zd", "*", "zd", ")", "\n", "return", "t1", "*", "(", "int_r", "*", "int_r", "+", "int_i", "*", "int_i", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.psf.microscope_psf.MicroscopePSF.gLZRFocalScanSlow": [[446, 476], ["microscope_psf.MicroscopePSF._configure", "numpy.zeros", "range", "range", "microscope_psf.MicroscopePSF.slowGL", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.royerlab_ssi-code.psf.microscope_psf.MicroscopePSF._configure", "home.repos.pwc.inspect_result.royerlab_ssi-code.psf.microscope_psf.MicroscopePSF.slowGL"], ["", "def", "gLZRFocalScanSlow", "(", "self", ",", "rv", ",", "zv", ",", "normalize", "=", "True", ",", "pz", "=", "0.0", ",", "wvl", "=", "0.6", ",", "zd", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        This is the integration version of gLZRFocalScan.\n\n        mp - The microscope parameters dictionary.\n        rv - A numpy array containing the radius values.\n        zv - A numpy array containing the (relative) z offset values of the coverslip (negative is closer to the objective).\n\n        normalize - Normalize the PSF to unit height.\n        pz - Particle z position above the coverslip (positive values only).\n        wvl - Light wavelength in microns.\n        zd - Actual camera position in microns. If not specified the microscope tube length is used.\n        \"\"\"", "\n", "\n", "mp", "=", "self", ".", "parameters", "\n", "\n", "if", "zd", "is", "None", ":", "\n", "            ", "zd", "=", "mp", "[", "\"zd0\"", "]", "\n", "\n", "", "[", "scaling_factor", ",", "max_rho", "]", "=", "self", ".", "_configure", "(", "wvl", ")", "\n", "\n", "psf_rz", "=", "numpy", ".", "zeros", "(", "(", "zv", ".", "size", ",", "rv", ".", "size", ")", ")", "\n", "for", "i", "in", "range", "(", "zv", ".", "size", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "rv", ".", "size", ")", ":", "\n", "                ", "psf_rz", "[", "i", ",", "j", "]", "=", "self", ".", "slowGL", "(", "max_rho", ",", "rv", "[", "j", "]", ",", "zv", "[", "i", "]", ",", "pz", ",", "wvl", ",", "zd", ")", "\n", "\n", "", "", "if", "normalize", ":", "\n", "            ", "psf_rz", "=", "psf_rz", "/", "numpy", ".", "max", "(", "psf_rz", ")", "\n", "\n", "", "return", "psf_rz", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.psf.microscope_psf.MicroscopePSF.gLZRParticleScanSlow": [[477, 508], ["microscope_psf.MicroscopePSF._configure", "numpy.zeros", "range", "range", "microscope_psf.MicroscopePSF.slowGL", "numpy.max"], "methods", ["home.repos.pwc.inspect_result.royerlab_ssi-code.psf.microscope_psf.MicroscopePSF._configure", "home.repos.pwc.inspect_result.royerlab_ssi-code.psf.microscope_psf.MicroscopePSF.slowGL"], ["", "def", "gLZRParticleScanSlow", "(", "self", ",", "rv", ",", "pz", ",", "normalize", "=", "True", ",", "wvl", "=", "0.6", ",", "zd", "=", "None", ",", "zv", "=", "0.0", ")", ":", "\n", "        ", "\"\"\"\n        This is the integration version of gLZRParticleScan.\n\n        mp - The microscope parameters dictionary.\n        rv - A numpy array containing the radius values.\n        pz - A numpy array containing the particle z position above the coverslip (positive values only)\n             in microns.\n\n        normalize - Normalize the PSF to unit height.\n        wvl - Light wavelength in microns.\n        zd - Actual camera position in microns. If not specified the microscope tube length is used.\n        zv - The (relative) z offset value of the coverslip (negative is closer to the objective).\n        \"\"\"", "\n", "\n", "mp", "=", "self", ".", "parameters", "\n", "\n", "if", "zd", "is", "None", ":", "\n", "            ", "zd", "=", "mp", "[", "\"zd0\"", "]", "\n", "\n", "", "[", "scaling_factor", ",", "max_rho", "]", "=", "self", ".", "_configure", "(", "wvl", ")", "\n", "\n", "psf_rz", "=", "numpy", ".", "zeros", "(", "(", "pz", ".", "size", ",", "rv", ".", "size", ")", ")", "\n", "for", "i", "in", "range", "(", "pz", ".", "size", ")", ":", "\n", "            ", "for", "j", "in", "range", "(", "rv", ".", "size", ")", ":", "\n", "                ", "psf_rz", "[", "i", ",", "j", "]", "=", "self", ".", "slowGL", "(", "max_rho", ",", "rv", "[", "j", "]", ",", "zv", ",", "pz", "[", "i", "]", ",", "wvl", ",", "zd", ")", "\n", "\n", "", "", "if", "normalize", ":", "\n", "            ", "psf_rz", "=", "psf_rz", "/", "numpy", ".", "max", "(", "psf_rz", ")", "\n", "\n", "", "return", "psf_rz", "\n", "", "", ""]], "home.repos.pwc.inspect_result.royerlab_ssi-code.psf.simple_microscope_psf.SimpleMicroscopePSF.__init__": [[11, 24], ["ssi.utils.psf.microscope_psf.MicroscopePSF.__init__"], "methods", ["home.repos.pwc.inspect_result.royerlab_ssi-code.optimisers.esadam.ESAdam.__init__"], ["def", "__init__", "(", "self", ",", "M", "=", "16", ",", "NA", "=", "0.8", ",", "n", "=", "1.33", ",", "wd", "=", "3000", ")", ":", "\n", "        ", "\"\"\"\n\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# Microscope parameters.", "\n", "self", ".", "parameters", "[", "\"M\"", "]", "=", "M", "# magnification", "\n", "self", ".", "parameters", "[", "\"NA\"", "]", "=", "NA", "# numerical aperture", "\n", "self", ".", "parameters", "[", "\"ni0\"", "]", "=", "n", "\n", "self", ".", "parameters", "[", "\"ni\"", "]", "=", "n", "\n", "self", ".", "parameters", "[", "\"ns\"", "]", "=", "n", "\n", "self", ".", "parameters", "[", "\"ti0\"", "]", "=", "wd", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.psf.simple_microscope_psf.SimpleMicroscopePSF.generate_xyz_psf": [[25, 46], ["numpy.arange", "simple_microscope_psf.SimpleMicroscopePSF.gLXYZParticleScan", "print"], "methods", ["home.repos.pwc.inspect_result.royerlab_ssi-code.psf.microscope_psf.MicroscopePSF.gLXYZParticleScan"], ["", "def", "generate_xyz_psf", "(", "self", ",", "dxy", ",", "dz", ",", "xy_size", ",", "z_size", ")", ":", "\n", "        ", "\"\"\"\n        Generates a 3D PSF array.\n\n        :param dxy: voxel dimension along xy (microns)\n        :param dz: voxel dimension along z (microns)\n        :param xy_size: size of PSF kernel along x and y (odd integer)\n        :param z_size: size of PSF kernel along z (odd integer)\n\n        \"\"\"", "\n", "lz", "=", "(", "z_size", ")", "*", "dz", "\n", "z_offset", "=", "-", "(", "lz", "-", "2", "*", "dz", ")", "/", "2", "\n", "pz", "=", "numpy", ".", "arange", "(", "0", ",", "lz", ",", "dz", ")", "\n", "\n", "# gLXYZParticleScan(self, dxy, xy_size, pz, normalize = True, wvl = 0.6, zd = None, zv = 0.0):", "\n", "psf_xyz_array", "=", "self", ".", "gLXYZParticleScan", "(", "\n", "dxy", "=", "dxy", ",", "xy_size", "=", "xy_size", ",", "pz", "=", "pz", ",", "zv", "=", "z_offset", "\n", ")", "\n", "print", "(", "psf_xyz_array", ".", "shape", ")", "\n", "\n", "return", "psf_xyz_array", "\n", "", "", ""]], "home.repos.pwc.inspect_result.royerlab_ssi-code.demo.demo.demo_xyz": [[10, 26], ["ssi.util.psf.simple_microscope_psf.SimpleMicroscopePSF", "pprint.pprint", "ssi.util.psf.simple_microscope_psf.SimpleMicroscopePSF.generate_xyz_psf", "print", "napari.gui_qt", "napari.Viewer", "napari.Viewer.add_image"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.psf.simple_microscope_psf.SimpleMicroscopePSF.generate_xyz_psf"], ["def", "demo_xyz", "(", ")", ":", "\n", "    ", "\"\"\"\n    Particle scan, focus offset.\n    \"\"\"", "\n", "psf", "=", "SimpleMicroscopePSF", "(", ")", "\n", "pprint", "(", "psf", ".", "parameters", ")", "\n", "\n", "psf_xyz_array", "=", "psf", ".", "generate_xyz_psf", "(", "dxy", "=", "0.406", ",", "dz", "=", "0.406", ",", "xy_size", "=", "17", ",", "z_size", "=", "17", ")", "\n", "\n", "print", "(", "psf_xyz_array", ".", "shape", ")", "\n", "\n", "import", "napari", "\n", "\n", "with", "napari", ".", "gui_qt", "(", ")", ":", "\n", "        ", "viewer", "=", "napari", ".", "Viewer", "(", ")", "\n", "viewer", ".", "add_image", "(", "psf_xyz_array", ",", "name", "=", "'fast_rz'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.demo.demo3D.get_benchmark_image": [[18, 25], ["imageio.imread", "folder.iterdir", "f.is_file"], "function", ["None"], ["def", "get_benchmark_image", "(", "type", ",", "name", ")", ":", "\n", "    ", "folder", "=", "generic_2d_mono_raw_folder", "/", "type", "\n", "files", "=", "[", "f", "for", "f", "in", "folder", ".", "iterdir", "(", ")", "if", "f", ".", "is_file", "(", ")", "]", "\n", "filename", "=", "[", "f", ".", "name", "for", "f", "in", "files", "if", "name", "in", "f", ".", "name", "]", "[", "0", "]", "\n", "filepath", "=", "folder", "/", "filename", "\n", "array", "=", "imread", "(", "filepath", ")", "\n", "return", "array", ",", "filename", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.demo.demo3D.printscore": [[28, 30], ["print"], "function", ["None"], ["", "def", "printscore", "(", "header", ",", "val1", ",", "val2", ",", "val3", ",", "val4", ")", ":", "\n", "    ", "print", "(", "f\"{header}: \\t {val1:.4f} \\t {val2:.4f} \\t {val3:.4f} \\t {val4:.4f}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.demo.demo3D.demo": [[32, 151], ["ssi.utils.io.datasets.normalise", "ssi.utils.io.datasets.add_microscope_blur_3d", "ssi.utils.io.datasets.add_poisson_gaussian_noise", "ssi.lr_deconv.ImageTranslatorLRDeconv", "ssi.lr_deconv.ImageTranslatorLRDeconv.train", "ssi.lr_deconv.ImageTranslatorLRDeconv.translate", "ssi.ssi_deconv.SSIDeconvolution", "time.time", "ssi.ssi_deconv.SSIDeconvolution.train", "time.time", "print", "time.time", "ssi.ssi_deconv.SSIDeconvolution.translate", "time.time", "print", "numpy.clip", "numpy.clip", "numpy.clip", "print", "demo3D.printscore", "demo3D.printscore", "demo3D.printscore", "demo3D.printscore", "print", "print", "print", "numpy.clip.astype", "ssi.utils.metrics.image_metrics.psnr", "ssi.utils.metrics.image_metrics.spectral_mutual_information", "ssi.utils.metrics.image_metrics.mutual_information", "ssi.utils.metrics.image_metrics.ssim", "ssi.utils.metrics.image_metrics.psnr", "ssi.utils.metrics.image_metrics.spectral_mutual_information", "ssi.utils.metrics.image_metrics.mutual_information", "ssi.utils.metrics.image_metrics.ssim", "ssi.utils.metrics.image_metrics.psnr", "ssi.utils.metrics.image_metrics.spectral_mutual_information", "ssi.utils.metrics.image_metrics.mutual_information", "ssi.utils.metrics.image_metrics.ssim", "ssi.utils.metrics.image_metrics.psnr", "ssi.utils.metrics.image_metrics.spectral_mutual_information", "ssi.utils.metrics.image_metrics.mutual_information", "ssi.utils.metrics.image_metrics.ssim", "napari.gui_qt", "napari.Viewer", "napari.Viewer.add_image", "napari.Viewer.add_image", "napari.Viewer.add_image", "napari.Viewer.add_image", "napari.Viewer.add_image"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.normalise", "home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.add_microscope_blur_3d", "home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.add_poisson_gaussian_noise", "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.base.ImageTranslatorBase.train", "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.base.ImageTranslatorBase.translate", "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.base.ImageTranslatorBase.train", "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.base.ImageTranslatorBase.translate", "home.repos.pwc.inspect_result.royerlab_ssi-code.demo.demo2D.printscore", "home.repos.pwc.inspect_result.royerlab_ssi-code.demo.demo2D.printscore", "home.repos.pwc.inspect_result.royerlab_ssi-code.demo.demo2D.printscore", "home.repos.pwc.inspect_result.royerlab_ssi-code.demo.demo2D.printscore", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.psnr", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.spectral_mutual_information", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.mutual_information", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.ssim", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.psnr", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.spectral_mutual_information", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.mutual_information", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.ssim", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.psnr", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.spectral_mutual_information", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.mutual_information", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.ssim", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.psnr", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.spectral_mutual_information", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.mutual_information", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.ssim"], ["", "def", "demo", "(", "image_clipped", ")", ":", "\n", "    ", "image_clipped", "=", "normalise", "(", "image_clipped", ".", "astype", "(", "numpy", ".", "float32", ")", ")", "\n", "blurred_image", ",", "psf_kernel", "=", "add_microscope_blur_3d", "(", "image_clipped", ")", "\n", "noisy_blurred_image", "=", "add_poisson_gaussian_noise", "(", "blurred_image", ",", "alpha", "=", "0.001", ",", "sigma", "=", "0.1", ",", "sap", "=", "0.01", ",", "quant_bits", "=", "10", ")", "\n", "\n", "lr", "=", "ImageTranslatorLRDeconv", "(", "\n", "psf_kernel", "=", "psf_kernel", ",", "backend", "=", "\"cupy\"", "\n", ")", "\n", "lr", ".", "train", "(", "noisy_blurred_image", ")", "\n", "# lr.max_num_iterations=2", "\n", "# lr_deconvolved_image_2 = lr.translate(noisy_blurred_image)", "\n", "lr", ".", "max_num_iterations", "=", "5", "\n", "lr_deconvolved_image_5", "=", "lr", ".", "translate", "(", "noisy_blurred_image", ")", "\n", "# lr.max_num_iterations=10", "\n", "# lr_deconvolved_image_10 = lr.translate(noisy_blurred_image)", "\n", "# lr.max_num_iterations=20", "\n", "# lr_deconvolved_image_20 = lr.translate(noisy_blurred_image)", "\n", "\n", "it_deconv", "=", "SSIDeconvolution", "(", "\n", "max_epochs", "=", "3000", ",", "\n", "patience", "=", "300", ",", "\n", "batch_size", "=", "8", ",", "\n", "learning_rate", "=", "0.01", ",", "\n", "normaliser_type", "=", "'identity'", ",", "\n", "psf_kernel", "=", "psf_kernel", ",", "\n", "model_class", "=", "UNet", ",", "\n", "masking", "=", "True", ",", "\n", "masking_density", "=", "0.01", ",", "\n", "loss", "=", "'l2'", ",", "\n", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "it_deconv", ".", "train", "(", "noisy_blurred_image", ")", "\n", "stop", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "f\"Training: elapsed time:  {stop - start} \"", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "deconvolved_image", "=", "it_deconv", ".", "translate", "(", "noisy_blurred_image", ")", "\n", "stop", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "f\"inference: elapsed time:  {stop - start} \"", ")", "\n", "\n", "image_clipped", "=", "numpy", ".", "clip", "(", "image_clipped", ",", "0", ",", "1", ")", "\n", "# lr_deconvolved_image_2_clipped = numpy.clip(lr_deconvolved_image_2, 0, 1)", "\n", "lr_deconvolved_image_5_clipped", "=", "numpy", ".", "clip", "(", "lr_deconvolved_image_5", ",", "0", ",", "1", ")", "\n", "# lr_deconvolved_image_10_clipped = numpy.clip(lr_deconvolved_image_10, 0, 1)", "\n", "# lr_deconvolved_image_20_clipped = numpy.clip(lr_deconvolved_image_20, 0, 1)", "\n", "deconvolved_image_clipped", "=", "numpy", ".", "clip", "(", "deconvolved_image", ",", "0", ",", "1", ")", "\n", "\n", "print", "(", "\"Below in order: PSNR, norm spectral mutual info, norm mutual info, SSIM: \"", ")", "\n", "printscore", "(", "\n", "\"blurry image          :   \"", ",", "\n", "psnr", "(", "image_clipped", ",", "blurred_image", ")", ",", "\n", "spectral_mutual_information", "(", "image_clipped", ",", "blurred_image", ")", ",", "\n", "mutual_information", "(", "image_clipped", ",", "blurred_image", ")", ",", "\n", "ssim", "(", "image_clipped", ",", "blurred_image", ")", ",", "\n", ")", "\n", "\n", "printscore", "(", "\n", "\"noisy and blurry image:   \"", ",", "\n", "psnr", "(", "image_clipped", ",", "noisy_blurred_image", ")", ",", "\n", "spectral_mutual_information", "(", "image_clipped", ",", "noisy_blurred_image", ")", ",", "\n", "mutual_information", "(", "image_clipped", ",", "noisy_blurred_image", ")", ",", "\n", "ssim", "(", "image_clipped", ",", "noisy_blurred_image", ")", ",", "\n", ")", "\n", "\n", "# printscore(", "\n", "#     \"lr deconv (n=2)       :    \",", "\n", "#     psnr(image_clipped, lr_deconvolved_image_2_clipped),", "\n", "#     spectral_mutual_information(image_clipped, lr_deconvolved_image_2_clipped),", "\n", "#     mutual_information(image_clipped, lr_deconvolved_image_2_clipped),", "\n", "#     ssim(image_clipped, lr_deconvolved_image_2_clipped),", "\n", "# )", "\n", "\n", "printscore", "(", "\n", "\"lr deconv (n=5)       :    \"", ",", "\n", "psnr", "(", "image_clipped", ",", "lr_deconvolved_image_5_clipped", ")", ",", "\n", "spectral_mutual_information", "(", "image_clipped", ",", "lr_deconvolved_image_5_clipped", ")", ",", "\n", "mutual_information", "(", "image_clipped", ",", "lr_deconvolved_image_5_clipped", ")", ",", "\n", "ssim", "(", "image_clipped", ",", "lr_deconvolved_image_5_clipped", ")", ",", "\n", ")", "\n", "\n", "# printscore(", "\n", "#     \"lr deconv (n=10)      :    \",", "\n", "#     psnr(image_clipped, lr_deconvolved_image_10_clipped),", "\n", "#     spectral_mutual_information(image_clipped, lr_deconvolved_image_10_clipped),", "\n", "#     mutual_information(image_clipped, lr_deconvolved_image_10_clipped),", "\n", "#     ssim(image_clipped, lr_deconvolved_image_10_clipped),", "\n", "# )", "\n", "#", "\n", "# printscore(", "\n", "#     \"lr deconv (n=20)      :    \",", "\n", "#     psnr(image_clipped, lr_deconvolved_image_20_clipped),", "\n", "#     spectral_mutual_information(image_clipped, lr_deconvolved_image_20_clipped),", "\n", "#     mutual_information(image_clipped, lr_deconvolved_image_20_clipped),", "\n", "#     ssim(image_clipped, lr_deconvolved_image_20_clipped),", "\n", "# )", "\n", "\n", "printscore", "(", "\n", "\"ssi deconv            : \"", ",", "\n", "psnr", "(", "image_clipped", ",", "deconvolved_image_clipped", ")", ",", "\n", "spectral_mutual_information", "(", "image_clipped", ",", "deconvolved_image_clipped", ")", ",", "\n", "mutual_information", "(", "image_clipped", ",", "deconvolved_image_clipped", ")", ",", "\n", "ssim", "(", "image_clipped", ",", "deconvolved_image_clipped", ")", ",", "\n", ")", "\n", "\n", "print", "(", "\"NOTE: if you get a bad results for ssi, blame stochastic optimisation and retry...\"", ")", "\n", "print", "(", "\"      The training is done on the same exact image that we infer on, very few pixels...\"", ")", "\n", "print", "(", "\"      Training should be more stable given more data...\"", ")", "\n", "\n", "with", "napari", ".", "gui_qt", "(", ")", ":", "\n", "        ", "viewer", "=", "napari", ".", "Viewer", "(", ")", "\n", "viewer", ".", "add_image", "(", "image", ",", "name", "=", "'image'", ")", "\n", "viewer", ".", "add_image", "(", "blurred_image", ",", "name", "=", "'blurred'", ")", "\n", "viewer", ".", "add_image", "(", "noisy_blurred_image", ",", "name", "=", "'noisy_blurred_image'", ")", "\n", "#viewer.add_image(lr_deconvolved_image_2_clipped, name='lr_deconvolved_image_2')", "\n", "viewer", ".", "add_image", "(", "lr_deconvolved_image_5_clipped", ",", "name", "=", "'lr_deconvolved_image_5'", ")", "\n", "#viewer.add_image(lr_deconvolved_image_10_clipped, name='lr_deconvolved_image_10')", "\n", "#viewer.add_image(lr_deconvolved_image_20_clipped, name='lr_deconvolved_image_20')", "\n", "viewer", ".", "add_image", "(", "deconvolved_image_clipped", ",", "name", "=", "'ssi_deconvolved_image'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.demo.demo2D.get_benchmark_image": [[18, 25], ["imageio.imread", "folder.iterdir", "f.is_file"], "function", ["None"], ["def", "get_benchmark_image", "(", "type", ",", "name", ")", ":", "\n", "    ", "folder", "=", "generic_2d_mono_raw_folder", "/", "type", "\n", "files", "=", "[", "f", "for", "f", "in", "folder", ".", "iterdir", "(", ")", "if", "f", ".", "is_file", "(", ")", "]", "\n", "filename", "=", "[", "f", ".", "name", "for", "f", "in", "files", "if", "name", "in", "f", ".", "name", "]", "[", "0", "]", "\n", "filepath", "=", "folder", "/", "filename", "\n", "array", "=", "imread", "(", "filepath", ")", "\n", "return", "array", ",", "filename", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.demo.demo2D.printscore": [[28, 30], ["print"], "function", ["None"], ["", "def", "printscore", "(", "header", ",", "val1", ",", "val2", ",", "val3", ",", "val4", ")", ":", "\n", "    ", "print", "(", "f\"{header}: \\t {val1:.4f} \\t {val2:.4f} \\t {val3:.4f} \\t {val4:.4f}\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.demo.demo2D.demo": [[32, 152], ["ssi.utils.io.datasets.normalise", "ssi.utils.io.datasets.add_microscope_blur_2d", "ssi.utils.io.datasets.add_poisson_gaussian_noise", "ssi.lr_deconv.ImageTranslatorLRDeconv", "ssi.lr_deconv.ImageTranslatorLRDeconv.train", "ssi.lr_deconv.ImageTranslatorLRDeconv.translate", "ssi.lr_deconv.ImageTranslatorLRDeconv.translate", "ssi.lr_deconv.ImageTranslatorLRDeconv.translate", "ssi.lr_deconv.ImageTranslatorLRDeconv.translate", "ssi.ssi_deconv.SSIDeconvolution", "time.time", "ssi.ssi_deconv.SSIDeconvolution.train", "time.time", "print", "time.time", "ssi.ssi_deconv.SSIDeconvolution.translate", "time.time", "print", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip", "print", "demo2D.printscore", "demo2D.printscore", "demo2D.printscore", "demo2D.printscore", "demo2D.printscore", "demo2D.printscore", "demo2D.printscore", "print", "print", "print", "numpy.clip.astype", "ssi.utils.metrics.image_metrics.psnr", "ssi.utils.metrics.image_metrics.spectral_mutual_information", "ssi.utils.metrics.image_metrics.mutual_information", "ssi.utils.metrics.image_metrics.ssim", "ssi.utils.metrics.image_metrics.psnr", "ssi.utils.metrics.image_metrics.spectral_mutual_information", "ssi.utils.metrics.image_metrics.mutual_information", "ssi.utils.metrics.image_metrics.ssim", "ssi.utils.metrics.image_metrics.psnr", "ssi.utils.metrics.image_metrics.spectral_mutual_information", "ssi.utils.metrics.image_metrics.mutual_information", "ssi.utils.metrics.image_metrics.ssim", "ssi.utils.metrics.image_metrics.psnr", "ssi.utils.metrics.image_metrics.spectral_mutual_information", "ssi.utils.metrics.image_metrics.mutual_information", "ssi.utils.metrics.image_metrics.ssim", "ssi.utils.metrics.image_metrics.psnr", "ssi.utils.metrics.image_metrics.spectral_mutual_information", "ssi.utils.metrics.image_metrics.mutual_information", "ssi.utils.metrics.image_metrics.ssim", "ssi.utils.metrics.image_metrics.psnr", "ssi.utils.metrics.image_metrics.spectral_mutual_information", "ssi.utils.metrics.image_metrics.mutual_information", "ssi.utils.metrics.image_metrics.ssim", "ssi.utils.metrics.image_metrics.psnr", "ssi.utils.metrics.image_metrics.spectral_mutual_information", "ssi.utils.metrics.image_metrics.mutual_information", "ssi.utils.metrics.image_metrics.ssim", "napari.gui_qt", "napari.Viewer", "napari.Viewer.add_image", "napari.Viewer.add_image", "napari.Viewer.add_image", "napari.Viewer.add_image", "napari.Viewer.add_image", "napari.Viewer.add_image", "napari.Viewer.add_image", "napari.Viewer.add_image"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.normalise", "home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.add_microscope_blur_2d", "home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.add_poisson_gaussian_noise", "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.base.ImageTranslatorBase.train", "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.base.ImageTranslatorBase.translate", "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.base.ImageTranslatorBase.translate", "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.base.ImageTranslatorBase.translate", "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.base.ImageTranslatorBase.translate", "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.base.ImageTranslatorBase.train", "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.base.ImageTranslatorBase.translate", "home.repos.pwc.inspect_result.royerlab_ssi-code.demo.demo2D.printscore", "home.repos.pwc.inspect_result.royerlab_ssi-code.demo.demo2D.printscore", "home.repos.pwc.inspect_result.royerlab_ssi-code.demo.demo2D.printscore", "home.repos.pwc.inspect_result.royerlab_ssi-code.demo.demo2D.printscore", "home.repos.pwc.inspect_result.royerlab_ssi-code.demo.demo2D.printscore", "home.repos.pwc.inspect_result.royerlab_ssi-code.demo.demo2D.printscore", "home.repos.pwc.inspect_result.royerlab_ssi-code.demo.demo2D.printscore", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.psnr", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.spectral_mutual_information", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.mutual_information", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.ssim", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.psnr", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.spectral_mutual_information", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.mutual_information", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.ssim", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.psnr", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.spectral_mutual_information", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.mutual_information", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.ssim", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.psnr", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.spectral_mutual_information", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.mutual_information", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.ssim", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.psnr", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.spectral_mutual_information", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.mutual_information", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.ssim", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.psnr", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.spectral_mutual_information", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.mutual_information", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.ssim", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.psnr", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.spectral_mutual_information", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.mutual_information", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.ssim"], ["", "def", "demo", "(", "image_clipped", ")", ":", "\n", "    ", "image_clipped", "=", "normalise", "(", "image_clipped", ".", "astype", "(", "numpy", ".", "float32", ")", ")", "\n", "blurred_image", ",", "psf_kernel", "=", "add_microscope_blur_2d", "(", "image_clipped", ")", "\n", "# noisy_blurred_image = add_noise(blurred_image, intensity=None, variance=0.01, sap=0.01, clip=True)", "\n", "noisy_blurred_image", "=", "add_poisson_gaussian_noise", "(", "blurred_image", ",", "alpha", "=", "0.001", ",", "sigma", "=", "0.1", ",", "sap", "=", "0.01", ",", "quant_bits", "=", "10", ")", "\n", "\n", "lr", "=", "ImageTranslatorLRDeconv", "(", "\n", "psf_kernel", "=", "psf_kernel", ",", "backend", "=", "\"cupy\"", "\n", ")", "\n", "lr", ".", "train", "(", "noisy_blurred_image", ")", "\n", "lr", ".", "max_num_iterations", "=", "2", "\n", "lr_deconvolved_image_2", "=", "lr", ".", "translate", "(", "noisy_blurred_image", ")", "\n", "lr", ".", "max_num_iterations", "=", "5", "\n", "lr_deconvolved_image_5", "=", "lr", ".", "translate", "(", "noisy_blurred_image", ")", "\n", "lr", ".", "max_num_iterations", "=", "10", "\n", "lr_deconvolved_image_10", "=", "lr", ".", "translate", "(", "noisy_blurred_image", ")", "\n", "lr", ".", "max_num_iterations", "=", "20", "\n", "lr_deconvolved_image_20", "=", "lr", ".", "translate", "(", "noisy_blurred_image", ")", "\n", "\n", "it_deconv", "=", "SSIDeconvolution", "(", "\n", "max_epochs", "=", "3000", ",", "\n", "patience", "=", "300", ",", "\n", "batch_size", "=", "8", ",", "\n", "learning_rate", "=", "0.01", ",", "\n", "normaliser_type", "=", "'identity'", ",", "\n", "psf_kernel", "=", "psf_kernel", ",", "\n", "model_class", "=", "UNet", ",", "\n", "masking", "=", "True", ",", "\n", "masking_density", "=", "0.01", ",", "\n", "loss", "=", "'l2'", ",", "\n", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "it_deconv", ".", "train", "(", "noisy_blurred_image", ")", "\n", "stop", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "f\"Training: elapsed time:  {stop - start} \"", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "deconvolved_image", "=", "it_deconv", ".", "translate", "(", "noisy_blurred_image", ")", "\n", "stop", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "f\"inference: elapsed time:  {stop - start} \"", ")", "\n", "\n", "image_clipped", "=", "numpy", ".", "clip", "(", "image_clipped", ",", "0", ",", "1", ")", "\n", "lr_deconvolved_image_2_clipped", "=", "numpy", ".", "clip", "(", "lr_deconvolved_image_2", ",", "0", ",", "1", ")", "\n", "lr_deconvolved_image_5_clipped", "=", "numpy", ".", "clip", "(", "lr_deconvolved_image_5", ",", "0", ",", "1", ")", "\n", "lr_deconvolved_image_10_clipped", "=", "numpy", ".", "clip", "(", "lr_deconvolved_image_10", ",", "0", ",", "1", ")", "\n", "lr_deconvolved_image_20_clipped", "=", "numpy", ".", "clip", "(", "lr_deconvolved_image_20", ",", "0", ",", "1", ")", "\n", "deconvolved_image_clipped", "=", "numpy", ".", "clip", "(", "deconvolved_image", ",", "0", ",", "1", ")", "\n", "\n", "print", "(", "\"Below in order: PSNR, norm spectral mutual info, norm mutual info, SSIM: \"", ")", "\n", "printscore", "(", "\n", "\"blurry image          :   \"", ",", "\n", "psnr", "(", "image_clipped", ",", "blurred_image", ")", ",", "\n", "spectral_mutual_information", "(", "image_clipped", ",", "blurred_image", ")", ",", "\n", "mutual_information", "(", "image_clipped", ",", "blurred_image", ")", ",", "\n", "ssim", "(", "image_clipped", ",", "blurred_image", ")", ",", "\n", ")", "\n", "\n", "printscore", "(", "\n", "\"noisy and blurry image:   \"", ",", "\n", "psnr", "(", "image_clipped", ",", "noisy_blurred_image", ")", ",", "\n", "spectral_mutual_information", "(", "image_clipped", ",", "noisy_blurred_image", ")", ",", "\n", "mutual_information", "(", "image_clipped", ",", "noisy_blurred_image", ")", ",", "\n", "ssim", "(", "image_clipped", ",", "noisy_blurred_image", ")", ",", "\n", ")", "\n", "\n", "printscore", "(", "\n", "\"lr deconv (n=2)       :    \"", ",", "\n", "psnr", "(", "image_clipped", ",", "lr_deconvolved_image_2_clipped", ")", ",", "\n", "spectral_mutual_information", "(", "image_clipped", ",", "lr_deconvolved_image_2_clipped", ")", ",", "\n", "mutual_information", "(", "image_clipped", ",", "lr_deconvolved_image_2_clipped", ")", ",", "\n", "ssim", "(", "image_clipped", ",", "lr_deconvolved_image_2_clipped", ")", ",", "\n", ")", "\n", "\n", "printscore", "(", "\n", "\"lr deconv (n=5)       :    \"", ",", "\n", "psnr", "(", "image_clipped", ",", "lr_deconvolved_image_5_clipped", ")", ",", "\n", "spectral_mutual_information", "(", "image_clipped", ",", "lr_deconvolved_image_5_clipped", ")", ",", "\n", "mutual_information", "(", "image_clipped", ",", "lr_deconvolved_image_5_clipped", ")", ",", "\n", "ssim", "(", "image_clipped", ",", "lr_deconvolved_image_5_clipped", ")", ",", "\n", ")", "\n", "\n", "printscore", "(", "\n", "\"lr deconv (n=10)      :    \"", ",", "\n", "psnr", "(", "image_clipped", ",", "lr_deconvolved_image_10_clipped", ")", ",", "\n", "spectral_mutual_information", "(", "image_clipped", ",", "lr_deconvolved_image_10_clipped", ")", ",", "\n", "mutual_information", "(", "image_clipped", ",", "lr_deconvolved_image_10_clipped", ")", ",", "\n", "ssim", "(", "image_clipped", ",", "lr_deconvolved_image_10_clipped", ")", ",", "\n", ")", "\n", "\n", "printscore", "(", "\n", "\"lr deconv (n=20)      :    \"", ",", "\n", "psnr", "(", "image_clipped", ",", "lr_deconvolved_image_20_clipped", ")", ",", "\n", "spectral_mutual_information", "(", "image_clipped", ",", "lr_deconvolved_image_20_clipped", ")", ",", "\n", "mutual_information", "(", "image_clipped", ",", "lr_deconvolved_image_20_clipped", ")", ",", "\n", "ssim", "(", "image_clipped", ",", "lr_deconvolved_image_20_clipped", ")", ",", "\n", ")", "\n", "\n", "printscore", "(", "\n", "\"ssi deconv            : \"", ",", "\n", "psnr", "(", "image_clipped", ",", "deconvolved_image_clipped", ")", ",", "\n", "spectral_mutual_information", "(", "image_clipped", ",", "deconvolved_image_clipped", ")", ",", "\n", "mutual_information", "(", "image_clipped", ",", "deconvolved_image_clipped", ")", ",", "\n", "ssim", "(", "image_clipped", ",", "deconvolved_image_clipped", ")", ",", "\n", ")", "\n", "\n", "print", "(", "\"NOTE: if you get a bad results for ssi, blame stochastic optimisation and retry...\"", ")", "\n", "print", "(", "\"      The training is done on the same exact image that we infer on, very few pixels...\"", ")", "\n", "print", "(", "\"      Training should be more stable given more data...\"", ")", "\n", "\n", "with", "napari", ".", "gui_qt", "(", ")", ":", "\n", "        ", "viewer", "=", "napari", ".", "Viewer", "(", ")", "\n", "viewer", ".", "add_image", "(", "image", ",", "name", "=", "'image'", ")", "\n", "viewer", ".", "add_image", "(", "blurred_image", ",", "name", "=", "'blurred'", ")", "\n", "viewer", ".", "add_image", "(", "noisy_blurred_image", ",", "name", "=", "'noisy_blurred_image'", ")", "\n", "viewer", ".", "add_image", "(", "lr_deconvolved_image_2_clipped", ",", "name", "=", "'lr_deconvolved_image_2'", ")", "\n", "viewer", ".", "add_image", "(", "lr_deconvolved_image_5_clipped", ",", "name", "=", "'lr_deconvolved_image_5'", ")", "\n", "viewer", ".", "add_image", "(", "lr_deconvolved_image_10_clipped", ",", "name", "=", "'lr_deconvolved_image_10'", ")", "\n", "viewer", ".", "add_image", "(", "lr_deconvolved_image_20_clipped", ",", "name", "=", "'lr_deconvolved_image_20'", ")", "\n", "viewer", ".", "add_image", "(", "deconvolved_image_clipped", ",", "name", "=", "'ssi_deconvolved_image'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.demo.cp_demo.demo": [[5, 24], ["utils.io.datasets.normalise", "utils.io.datasets.add_microscope_blur_2d", "utils.io.datasets.add_poisson_gaussian_noise", "tv_restoration.chambole_pock.cp_restoration", "deconvolved_image.clip.clip", "utils.io.datasets.camera().astype", "napari.gui_qt", "napari.Viewer", "napari.Viewer.add_image", "napari.Viewer.add_image", "napari.Viewer.add_image", "napari.Viewer.add_image", "utils.io.datasets.camera"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.normalise", "home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.add_microscope_blur_2d", "home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.add_poisson_gaussian_noise", "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.chambole_pock.cp_restoration", "home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.camera"], ["def", "demo", "(", ")", ":", "\n", "    ", "image", "=", "normalise", "(", "camera", "(", ")", ".", "astype", "(", "'f'", ")", ")", "\n", "blurred_image", ",", "psf_kernel", "=", "add_microscope_blur_2d", "(", "image", ")", "\n", "noisy_blurred_image", "=", "add_poisson_gaussian_noise", "(", "blurred_image", ",", "alpha", "=", "0.001", ",", "sigma", "=", "0.1", ",", "sap", "=", "0.01", ",", "quant_bits", "=", "10", ")", "\n", "\n", "deconvolved_image", "=", "cp_restoration", "(", "noisy_blurred_image", ",", "\n", "kernel", "=", "psf_kernel", ",", "\n", "num_iterations", "=", "200", ",", "\n", "beta", "=", "2e-3", ")", "\n", "\n", "deconvolved_image", "=", "deconvolved_image", ".", "clip", "(", "0", ",", "1", ")", "\n", "\n", "import", "napari", "\n", "with", "napari", ".", "gui_qt", "(", ")", ":", "\n", "        ", "viewer", "=", "napari", ".", "Viewer", "(", ")", "\n", "viewer", ".", "add_image", "(", "image", ",", "name", "=", "'image'", ")", "\n", "viewer", ".", "add_image", "(", "blurred_image", ",", "name", "=", "'blurred'", ")", "\n", "viewer", ".", "add_image", "(", "noisy_blurred_image", ",", "name", "=", "'noisy_blurred_image'", ")", "\n", "viewer", ".", "add_image", "(", "deconvolved_image", ",", "name", "=", "'deconvolved_image'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.demo.original_cp_demo.original_demo": [[6, 37], ["utils.io.datasets.normalise", "tv_restoration.convo_operators.gaussian1D", "tv_restoration.convo_operators.ConvolutionOperator", "utils.io.datasets.add_noise", "tv_restoration.chambole_pock.power_method", "print", "tv_restoration.chambole_pock.chambolle_pock", "plt.figure", "plt.plot", "plt.show", "utils.io.datasets.camera().astype", "P", "napari.gui_qt", "napari.Viewer", "napari.Viewer.add_image", "napari.Viewer.add_image", "napari.Viewer.add_image", "tv_restoration.convo_operators.ConvolutionOperator.T", "utils.io.datasets.camera"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.normalise", "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.convo_operators.gaussian1D", "home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.add_noise", "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.chambole_pock.power_method", "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.chambole_pock.chambolle_pock", "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.convo_operators.ConvolutionOperator.T", "home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.camera"], ["def", "original_demo", "(", ")", ":", "\n", "    ", "beta", "=", "1e-7", "# weight of TV regularization", "\n", "n_it", "=", "500", "# number of iterations", "\n", "\n", "# Init.", "\n", "# ------", "\n", "image", "=", "normalise", "(", "camera", "(", ")", ".", "astype", "(", "'f'", ")", ")", "\n", "\n", "kern", "=", "gaussian1D", "(", "2.6", ")", "\n", "K", "=", "ConvolutionOperator", "(", "kern", ")", "\n", "P", "=", "lambda", "x", ":", "K", "*", "x", "\n", "PT", "=", "lambda", "x", ":", "K", ".", "T", "(", ")", "*", "x", "\n", "\n", "# Run", "\n", "blurred_image", "=", "add_noise", "(", "P", "(", "image", ")", ",", "intensity", "=", "None", ",", "variance", "=", "0.00", ")", "\n", "L", "=", "power_method", "(", "P", ",", "PT", ",", "blurred_image", ",", "n_it", "=", "200", ")", "\n", "print", "(", "\"||K|| = %f\"", "%", "L", ")", "\n", "en", ",", "deconvolved_image", "=", "chambolle_pock", "(", "P", ",", "PT", ",", "blurred_image", ",", "beta", ",", "L", ",", "n_it", ")", "\n", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "plot", "(", "en", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "import", "napari", "\n", "\n", "with", "napari", ".", "gui_qt", "(", ")", ":", "\n", "        ", "viewer", "=", "napari", ".", "Viewer", "(", ")", "\n", "viewer", ".", "add_image", "(", "image", ",", "name", "=", "'image'", ")", "\n", "viewer", ".", "add_image", "(", "blurred_image", ",", "name", "=", "'blurred'", ")", "\n", "viewer", ".", "add_image", "(", "deconvolved_image", ",", "name", "=", "'deconvolved_image'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.demo.cg_demo.demo": [[5, 25], ["utils.io.datasets.normalise", "utils.io.datasets.add_microscope_blur_2d", "utils.io.datasets.add_poisson_gaussian_noise", "tv_restoration.conjugate_gradient.cg_restoration", "deconvolved_image.clip.clip", "utils.io.datasets.camera().astype", "napari.gui_qt", "napari.Viewer", "napari.Viewer.add_image", "napari.Viewer.add_image", "napari.Viewer.add_image", "napari.Viewer.add_image", "utils.io.datasets.camera"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.normalise", "home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.add_microscope_blur_2d", "home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.add_poisson_gaussian_noise", "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.conjugate_gradient.cg_restoration", "home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.camera"], ["def", "demo", "(", ")", ":", "\n", "    ", "image", "=", "normalise", "(", "camera", "(", ")", ".", "astype", "(", "'f'", ")", ")", "\n", "blurred_image", ",", "psf_kernel", "=", "add_microscope_blur_2d", "(", "image", ")", "\n", "noisy_blurred_image", "=", "add_poisson_gaussian_noise", "(", "blurred_image", ",", "alpha", "=", "0.001", ",", "sigma", "=", "0.1", ",", "sap", "=", "0.01", ",", "quant_bits", "=", "10", ")", "\n", "\n", "deconvolved_image", "=", "cg_restoration", "(", "noisy_blurred_image", ",", "\n", "kernel", "=", "psf_kernel", ",", "\n", "num_iterations", "=", "200", ",", "\n", "lmbda", "=", "4.5e-3", ",", "\n", "mu", "=", "1e-10", ")", "\n", "\n", "deconvolved_image", "=", "deconvolved_image", ".", "clip", "(", "0", ",", "1", ")", "\n", "\n", "import", "napari", "\n", "with", "napari", ".", "gui_qt", "(", ")", ":", "\n", "        ", "viewer", "=", "napari", ".", "Viewer", "(", ")", "\n", "viewer", ".", "add_image", "(", "image", ",", "name", "=", "'image'", ")", "\n", "viewer", ".", "add_image", "(", "blurred_image", ",", "name", "=", "'blurred'", ")", "\n", "viewer", ".", "add_image", "(", "noisy_blurred_image", ",", "name", "=", "'noisy_blurred_image'", ")", "\n", "viewer", ".", "add_image", "(", "deconvolved_image", ",", "name", "=", "'deconvolved_image'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.demo.original_cg_demo.original_demo": [[6, 34], ["utils.io.datasets.normalise", "tv_restoration.convo_operators.gaussian1D", "tv_restoration.convo_operators.ConvolutionOperator", "utils.io.datasets.add_noise", "tv_restoration.conjugate_gradient.conjugate_gradient_TV", "plt.figure", "plt.plot", "plt.show", "utils.io.datasets.camera().astype", "P", "napari.gui_qt", "napari.Viewer", "napari.Viewer.add_image", "napari.Viewer.add_image", "napari.Viewer.add_image", "tv_restoration.convo_operators.ConvolutionOperator.T", "utils.io.datasets.camera"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.normalise", "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.convo_operators.gaussian1D", "home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.add_noise", "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.conjugate_gradient.conjugate_gradient_TV", "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.convo_operators.ConvolutionOperator.T", "home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.camera"], ["def", "original_demo", "(", ")", ":", "\n", "    ", "Lambda", "=", "1e-7", "# weight of TV regularization", "\n", "mu", "=", "1e-10", "# parameter of TV smoothing", "\n", "n_it", "=", "500", "# number of iterations", "\n", "\n", "image", "=", "normalise", "(", "camera", "(", ")", ".", "astype", "(", "'f'", ")", ")", "\n", "\n", "kern", "=", "gaussian1D", "(", "2.6", ")", "\n", "K", "=", "ConvolutionOperator", "(", "kern", ")", "\n", "P", "=", "lambda", "x", ":", "K", "*", "x", "\n", "PT", "=", "lambda", "x", ":", "K", ".", "T", "(", ")", "*", "x", "\n", "\n", "blurred_image", "=", "add_noise", "(", "P", "(", "image", ")", ",", "intensity", "=", "None", ",", "variance", "=", "0.00", ")", "\n", "\n", "en", ",", "deconvolved_image", "=", "conjugate_gradient_TV", "(", "P", ",", "PT", ",", "blurred_image", ",", "Lambda", ",", "mu", ",", "n_it", ")", "\n", "\n", "import", "matplotlib", ".", "pyplot", "as", "plt", "\n", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "plot", "(", "en", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "import", "napari", "\n", "\n", "with", "napari", ".", "gui_qt", "(", ")", ":", "\n", "        ", "viewer", "=", "napari", ".", "Viewer", "(", ")", "\n", "viewer", ".", "add_image", "(", "image", ",", "name", "=", "'image'", ")", "\n", "viewer", ".", "add_image", "(", "blurred_image", ",", "name", "=", "'blurred'", ")", "\n", "viewer", ".", "add_image", "(", "deconvolved_image", ",", "name", "=", "'deconvolved_image'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.offcore.offcore.offcore_array": [[13, 87], ["ssi.utils.log.log.lsection", "ssi.utils.log.log.lprint", "ssi.utils.log.log.lprint", "ssi.utils.log.log.lprint", "ssi.utils.log.log.lprint", "numpy.prod", "psutil.virtual_memory", "psutil.swap_memory", "ssi.utils.log.log.lprint", "numpy.zeros", "numpy.dtype", "ssi.utils.log.log.lprint", "tempfile.NamedTemporaryFile", "ssi.utils.log.log.lprint", "numpy.memmap", "int", "int", "int", "ssi.utils.log.log.lprint", "zarr.create", "zarr.TempStore", "psutil.virtual_memory", "psutil.swap_memory"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lsection", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint"], ["", "def", "offcore_array", "(", "\n", "shape", ":", "Union", "[", "Tuple", "[", "int", ",", "...", "]", ",", "Generator", "[", "int", ",", "None", ",", "None", "]", "]", ",", "\n", "dtype", ":", "numpy", ".", "dtype", ",", "\n", "force_memmap", ":", "bool", "=", "False", ",", "\n", "zarr_allowed", ":", "bool", "=", "False", ",", "\n", "no_memmap_limit", ":", "bool", "=", "True", ",", "\n", "max_memory_usage_ratio", ":", "float", "=", "0.9", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n    Instanciates an array of given shape and dtype in  'off-core' fashion i.e. not in main memory.\n    Right now it simply uses memory mapping on temp file that is deleted after the file is closed\n\n    Parameters\n    ----------\n    shape\n    dtype\n    force_memmap\n    zarr_allowed\n    no_memmap_limit\n    max_memory_usage_ratio\n    \"\"\"", "\n", "\n", "with", "lsection", "(", "f\"Array of shape: {shape} and dtype: {dtype} requested\"", ")", ":", "\n", "        ", "size_in_bytes", "=", "numpy", ".", "prod", "(", "shape", ")", "*", "numpy", ".", "dtype", "(", "dtype", ")", ".", "itemsize", "\n", "lprint", "(", "f'Array requested will be {(size_in_bytes / 1E6)} MB.'", ")", "\n", "\n", "total_physical_memory_in_bytes", "=", "psutil", ".", "virtual_memory", "(", ")", ".", "total", "\n", "total_swap_memory_in_bytes", "=", "psutil", ".", "swap_memory", "(", ")", ".", "total", "\n", "\n", "total_mem_in_bytes", "=", "total_physical_memory_in_bytes", "+", "total_swap_memory_in_bytes", "\n", "lprint", "(", "\n", "f'There is {int(psutil.virtual_memory().total / 1E6)} MB of physical memory'", "\n", ")", "\n", "lprint", "(", "f'There is {int(psutil.swap_memory().total / 1E6)} MB of swap memory'", ")", "\n", "lprint", "(", "f'There is {int(total_mem_in_bytes / 1E6)} MB of total memory'", ")", "\n", "\n", "is_enough_physical_memory", "=", "(", "\n", "size_in_bytes", "<", "max_memory_usage_ratio", "*", "total_physical_memory_in_bytes", "\n", ")", "\n", "\n", "is_enough_total_memory", "=", "(", "\n", "size_in_bytes", "<", "max_memory_usage_ratio", "*", "total_mem_in_bytes", "\n", ")", "\n", "\n", "if", "not", "force_memmap", "and", "is_enough_total_memory", ":", "\n", "            ", "lprint", "(", "\n", "f'There is enough physical+swap memory -- we do not need to use a mem mapped array or zarr-backed array.'", "\n", ")", "\n", "array", "=", "numpy", ".", "zeros", "(", "shape", ",", "dtype", "=", "dtype", ")", "\n", "\n", "", "elif", "no_memmap_limit", ":", "\n", "            ", "lprint", "(", "\n", "f'There is not enough physical+swap memory -- we will use a mem mapped array.'", "\n", ")", "\n", "temp_file", "=", "tempfile", ".", "NamedTemporaryFile", "(", "dir", "=", "OffCore", ".", "memmap_directory", ")", "\n", "lprint", "(", "\n", "f'The temporary memory mapped file is at: {temp_file.name} (but you might not be able to see it!)'", "\n", ")", "\n", "array", "=", "numpy", ".", "memmap", "(", "temp_file", ",", "dtype", "=", "dtype", ",", "mode", "=", "'w+'", ",", "shape", "=", "shape", ")", "\n", "\n", "", "elif", "zarr_allowed", ":", "\n", "            ", "lprint", "(", "\n", "f'There is not enough physical+swap memory -- we will use a zarr-backed array.'", "\n", ")", "\n", "import", "zarr", "\n", "\n", "array", "=", "zarr", ".", "create", "(", "\n", "shape", "=", "shape", ",", "dtype", "=", "dtype", ",", "store", "=", "zarr", ".", "TempStore", "(", "\"output.zarr\"", ")", "\n", ")", "\n", "# from numcodecs import Blosc", "\n", "# compressor = Blosc(cname = 'zstd', clevel = 3, shuffle = Blosc.BITSHUFFLE)", "\n", "# array = zarr.zeros((102_0, 200, 210), chunks = (100, 200, 210), compressor = compressor", "\n", "\n", "", "return", "array", "\n", "", "", ""]], "home.repos.pwc.inspect_result.royerlab_ssi-code.normaliser.base.NormaliserBase.__init__": [[18, 35], ["None"], "methods", ["None"], ["self", ",", "\n", "normaliser_type", "=", "'identity'", ",", "\n", "normaliser_transform", "=", "None", ",", "\n", "normaliser_clip", "=", "True", ",", "\n", "monitor", "=", "None", ",", "\n", "blind_spots", "=", "None", ",", "\n", "tile_min_margin", "=", "8", ",", "\n", "tile_max_margin", "=", "None", ",", "\n", "padding", "=", "0", ",", "\n", "padding_mode", "=", "None", ",", "\n", "max_memory_usage_ratio", "=", "0.9", ",", "\n", "max_tilling_overhead", "=", "0.1", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        :param normaliser_type: can have one of three values; 'identity','percentile' and 'minmax'\n        :param monitor: monitor object, has to be instance of it.monitor.Monitor class\n        \"\"\"", "\n", "# Instantiates normaliser(s):", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.normaliser.base.NormaliserBase.calibrate": [[36, 45], ["NotImplementedError"], "methods", ["None"], ["if", "normaliser_type", "==", "'identity'", ":", "\n", "            ", "self", ".", "normalizer_class", "=", "IdentityNormaliser", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'Unknown normalizer type passed!'", ")", "\n", "", "self", ".", "normaliser_transform", "=", "normaliser_transform", "\n", "self", ".", "normaliser_clip", "=", "normaliser_clip", "\n", "\n", "self", ".", "self_supervised", "=", "False", "\n", "self", ".", "monitor", "=", "monitor", "\n", "self", ".", "blind_spots", "=", "blind_spots", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.normaliser.base.NormaliserBase.normalise": [[46, 93], ["base.NormaliserBase.shape_normalize", "numpy.sqrt.astype", "numpy.copy", "numpy.float32", "numpy.float32", "numpy.float32", "numexpr.evaluate", "numexpr.evaluate", "numpy.clip", "numpy.sqrt"], "methods", ["home.repos.pwc.inspect_result.royerlab_ssi-code.normaliser.base.NormaliserBase.shape_normalize"], ["self", ".", "tile_max_margin", "=", "tile_max_margin", "\n", "self", ".", "tile_min_margin", "=", "tile_min_margin", "\n", "self", ".", "padding", "=", "padding", "\n", "self", ".", "padding_mode", "=", "padding_mode", "\n", "\n", "self", ".", "max_memory_usage_ratio", "=", "max_memory_usage_ratio", "\n", "self", ".", "max_tilling_overhead", "=", "max_tilling_overhead", "\n", "self", ".", "max_voxels_per_tile", "=", "320", "**", "3", "\n", "\n", "self", ".", "callback_period", "=", "3", "\n", "self", ".", "last_callback_time_sec", "=", "-", "math", ".", "inf", "\n", "\n", "self", ".", "loss_history", "=", "None", "\n", "\n", "", "@", "abstractmethod", "\n", "def", "_train", "(", "\n", "self", ",", "input_image", ",", "target_image", ",", "train_valid_ratio", ",", "callback_period", ",", "jinv", "\n", ")", ":", "\n", "        ", "\"\"\"This function supposed to take normalized input image only\n        :param input_image:\n        :param target_image:\n        :param train_valid_ratio:\n        :param callback_period:\n        :return:\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "@", "abstractmethod", "\n", "def", "_translate", "(", "self", ",", "input_image", ",", "image_slice", "=", "None", ",", "whole_image_shape", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Translates an input image into an output image according to the learned function\n        :param input_image: input image\n        \"\"\"", "\n", "raise", "NotImplementedError", "(", ")", "\n", "\n", "", "def", "_estimate_memory_needed_and_available", "(", "self", ",", "image", ")", ":", "\n", "# By default there is no memory needed and infinite available memory which means no constraints", "\n", "        ", "return", "0", ",", "psutil", ".", "virtual_memory", "(", ")", ".", "total", "\n", "\n", "", "def", "train", "(", "\n", "self", ",", "\n", "input_image", ",", "\n", "target_image", "=", "None", ",", "\n", "batch_dims", "=", "None", ",", "\n", "channel_dims", "=", "None", ",", "\n", "train_valid_ratio", "=", "0.1", ",", "\n", "callback_period", "=", "3", ",", "\n", "jinv", "=", "None", ",", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.normaliser.base.NormaliserBase.denormalise": [[94, 164], ["numpy.copy", "base.NormaliserBase.shape_denormalize", "numpy.float32", "numpy.float32", "numpy.float32", "numpy.issubdtype", "numpy.clip.astype", "numexpr.evaluate", "numpy.iinfo", "numpy.clip.clip", "numexpr.evaluate", "numpy.clip", "numpy.clip.max", "numpy.clip.min"], "methods", ["home.repos.pwc.inspect_result.royerlab_ssi-code.normaliser.base.NormaliserBase.shape_denormalize"], [")", ":", "\n", "        ", "\"\"\"Train to translate a given input image to a given output image.\n        This has a lot of the machinery for batching and more...\n        \"\"\"", "\n", "\n", "if", "target_image", "is", "None", ":", "\n", "            ", "target_image", "=", "input_image", "\n", "\n", "", "with", "lsection", "(", "\n", "f\"Learning to translate from image of dimensions {str(input_image.shape)} to {str(target_image.shape)} .\"", "\n", ")", ":", "\n", "\n", "            ", "lprint", "(", "'Running garbage collector...'", ")", "\n", "gc", ".", "collect", "(", ")", "\n", "\n", "# If we use the same image for input and output then we are in a self-supervised setting:", "\n", "self", ".", "self_supervised", "=", "input_image", "is", "target_image", "\n", "\n", "if", "self", ".", "self_supervised", ":", "\n", "                ", "lprint", "(", "'Training is self-supervised.'", ")", "\n", "", "else", ":", "\n", "                ", "lprint", "(", "'Training is supervised.'", ")", "\n", "\n", "", "if", "batch_dims", "is", "None", ":", "# set default batch_dim value:", "\n", "                ", "batch_dims", "=", "(", "False", ",", ")", "*", "len", "(", "input_image", ".", "shape", ")", "\n", "\n", "", "self", ".", "input_normaliser", "=", "self", ".", "normalizer_class", "(", "\n", "transform", "=", "self", ".", "normaliser_transform", ",", "\n", "clip", "=", "self", ".", "normaliser_clip", "\n", ")", "\n", "self", ".", "target_normaliser", "=", "(", "\n", "self", ".", "input_normaliser", "\n", "if", "self", ".", "self_supervised", "\n", "else", "self", ".", "normalizer_class", "(", "transform", "=", "self", ".", "normaliser_transform", ",", "\n", "clip", "=", "self", ".", "normaliser_clip", ")", "\n", ")", "\n", "\n", "# Calibrates normaliser(s):", "\n", "self", ".", "input_normaliser", ".", "calibrate", "(", "input_image", ")", "\n", "if", "not", "self", ".", "self_supervised", ":", "\n", "                ", "self", ".", "target_normaliser", ".", "calibrate", "(", "target_image", ")", "\n", "\n", "# Intensity values normalisation:", "\n", "", "normalised_input_image", "=", "self", ".", "input_normaliser", ".", "normalise", "(", "\n", "input_image", ",", "batch_dims", "=", "batch_dims", ",", "channel_dims", "=", "channel_dims", "\n", ")", "\n", "normalised_target_image", "=", "(", "\n", "normalised_input_image", "\n", "if", "self", ".", "self_supervised", "\n", "else", "self", ".", "target_normaliser", ".", "normalise", "(", "\n", "target_image", ",", "batch_dims", "=", "batch_dims", ",", "channel_dims", "=", "channel_dims", "\n", ")", "\n", ")", "\n", "\n", "# Let's pad the images to avoid border effects:", "\n", "# If we do it for translation we also have to do it for training because of", "\n", "# location-aware features such as large-scale features or spatial-features.", "\n", "normalised_input_image", "=", "self", ".", "_pad_norm_image", "(", "normalised_input_image", ")", "\n", "normalised_target_image", "=", "self", ".", "_pad_norm_image", "(", "normalised_target_image", ")", "\n", "\n", "self", ".", "_train", "(", "\n", "normalised_input_image", ",", "\n", "normalised_target_image", ",", "\n", "train_valid_ratio", "=", "train_valid_ratio", ",", "\n", "callback_period", "=", "callback_period", ",", "\n", "jinv", "=", "jinv", ",", "\n", ")", "\n", "\n", "", "", "def", "translate", "(", "\n", "self", ",", "\n", "input_image", ",", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.normaliser.base.NormaliserBase.shape_normalize": [[165, 219], ["tuple", "int", "int", "numpy.transpose", "tuple", "tuple", "numpy.transpose.reshape", "numpy.prod", "numpy.prod", "len", "len", "enumerate", "range", "zip", "enumerate", "len", "enumerate"], "methods", ["None"], ["translated_image", "=", "None", ",", "\n", "batch_dims", "=", "None", ",", "\n", "channel_dims", "=", "None", ",", "\n", "tile_size", "=", "None", ",", "\n", "denormalise_values", "=", "True", ",", "\n", "leave_as_float", "=", "False", ",", "\n", "clip", "=", "True", ",", "\n", ")", ":", "\n", "        ", "\"\"\"\n        Translates an input image into an output image according to the learned function.\n        :param input_image:\n        :type input_image:\n        :param clip:\n        :type clip:\n        :return:\n        :rtype:\n        \"\"\"", "\n", "\n", "with", "lsection", "(", "\n", "f\"Predicting output image from input image of dimension {input_image.shape}\"", "\n", ")", ":", "\n", "\n", "# set default batch_dim and channel_dim values:", "\n", "            ", "if", "batch_dims", "is", "None", ":", "\n", "                ", "batch_dims", "=", "(", "False", ",", ")", "*", "len", "(", "input_image", ".", "shape", ")", "\n", "", "if", "channel_dims", "is", "None", ":", "\n", "                ", "channel_dims", "=", "(", "False", ",", ")", "*", "len", "(", "input_image", ".", "shape", ")", "\n", "\n", "# Number of spatio-temporal dimensions:", "\n", "", "num_spatiotemp_dim", "=", "sum", "(", "\n", "0", "if", "b", "or", "c", "else", "1", "for", "b", ",", "c", "in", "zip", "(", "batch_dims", ",", "channel_dims", ")", "\n", ")", "\n", "\n", "# First we normalise the input values:", "\n", "normalised_input_image", "=", "self", ".", "input_normaliser", ".", "normalise", "(", "\n", "input_image", ",", "batch_dims", "=", "batch_dims", ",", "channel_dims", "=", "channel_dims", "\n", ")", "\n", "\n", "# When we trained supervised we need to update permutated image shape of target_normaliser", "\n", "# This way we can accommodate different sizes of batch dimensions than batch dimensions used for training", "\n", "if", "not", "self", ".", "self_supervised", ":", "\n", "                ", "(", "\n", "_", ",", "\n", "_", ",", "\n", "self", ".", "target_normaliser", ".", "permutated_image_shape", ",", "\n", ")", "=", "self", ".", "target_normaliser", ".", "shape_normalize", "(", "\n", "input_image", ",", "batch_dims", "=", "batch_dims", ",", "channel_dims", "=", "channel_dims", "\n", ")", "\n", "\n", "# Let's pad the input array so we avoid annoying border-effects:", "\n", "", "normalised_input_image", "=", "self", ".", "_pad_norm_image", "(", "normalised_input_image", ")", "\n", "\n", "# Spatio-temporal shape:", "\n", "spatiotemp_shape", "=", "normalised_input_image", ".", "shape", "[", "-", "num_spatiotemp_dim", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.normaliser.base.NormaliserBase.shape_denormalize": [[220, 243], ["len", "list", "tuple", "image.reshape", "numpy.transpose", "numpy.argsort"], "methods", ["None"], ["normalised_translated_image", "=", "None", "\n", "\n", "if", "tile_size", "==", "0", ":", "\n", "# we _force_ no tilling, this is _not_ the default.", "\n", "\n", "# We translate:", "\n", "                ", "normalised_translated_image", "=", "self", ".", "_translate", "(", "\n", "normalised_input_image", ",", "\n", "whole_image_shape", "=", "normalised_input_image", ".", "shape", ",", "\n", ")", "\n", "\n", "", "else", ":", "\n", "\n", "# We do need to do tiled inference because of a lack of memory", "\n", "# or because a small batch size was requested:", "\n", "\n", "                ", "normalised_input_shape", "=", "normalised_input_image", ".", "shape", "\n", "\n", "# We get the tilling strategy:", "\n", "# tile_size, shape, min_margin, max_margin", "\n", "tilling_strategy", ",", "margins", "=", "self", ".", "_get_tilling_strategy_and_margins", "(", "\n", "normalised_input_image", ",", "\n", "self", ".", "max_voxels_per_tile", ",", "\n", "self", ".", "tile_min_margin", ",", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.normaliser.identity.IdentityNormaliser.__init__": [[9, 14], ["ssi.utils.normaliser.base.NormaliserBase.__init__"], "methods", ["home.repos.pwc.inspect_result.royerlab_ssi-code.optimisers.esadam.ESAdam.__init__"], ["def", "__init__", "(", "self", ",", "**", "kwargs", ")", ":", "\n", "        ", "\"\"\"\n        Constructs a normaliser\n        \"\"\"", "\n", "super", "(", ")", ".", "__init__", "(", "**", "kwargs", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.normaliser.identity.IdentityNormaliser.calibrate": [[15, 17], ["None"], "methods", ["None"], ["", "def", "calibrate", "(", "self", ",", "array", ")", ":", "\n", "        ", "self", ".", "original_dtype", "=", "array", ".", "dtype", "\n", "", "", ""]], "home.repos.pwc.inspect_result.royerlab_ssi-code.array.nd.nd_split_slices": [[9, 36], ["nd.nd_split_slices", "int", "list", "len", "math.ceil", "range", "random.shuffle", "max", "min", "slice"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.array.nd.nd_split_slices"], ["def", "nd_split_slices", "(", "array_shape", ",", "nb_slices", ",", "do_shuffle", "=", "False", ",", "margins", "=", "None", ")", ":", "\n", "    ", "if", "not", "array_shape", ":", "\n", "        ", "yield", "(", ")", "\n", "return", "\n", "\n", "", "if", "margins", "is", "None", ":", "\n", "        ", "margins", "=", "(", "0", ",", ")", "*", "len", "(", "array_shape", ")", "\n", "\n", "", "dim_width", "=", "array_shape", "[", "-", "1", "]", "\n", "\n", "for", "outer", "in", "nd_split_slices", "(", "\n", "array_shape", "[", ":", "-", "1", "]", ",", "nb_slices", "[", ":", "-", "1", "]", ",", "do_shuffle", "=", "do_shuffle", ",", "margins", "=", "margins", "[", ":", "-", "1", "]", "\n", ")", ":", "\n", "\n", "        ", "n", "=", "nb_slices", "[", "-", "1", "]", "\n", "slice_width", "=", "int", "(", "ceil", "(", "dim_width", "/", "n", ")", ")", "\n", "slice_margin", "=", "margins", "[", "-", "1", "]", "\n", "\n", "slice_start_range", "=", "list", "(", "range", "(", "0", ",", "dim_width", ",", "slice_width", ")", ")", "\n", "\n", "if", "do_shuffle", ":", "\n", "            ", "shuffle", "(", "slice_start_range", ")", "\n", "\n", "", "for", "slice_start", "in", "slice_start_range", ":", "\n", "            ", "start", "=", "max", "(", "0", ",", "slice_start", "-", "slice_margin", ")", "\n", "stop", "=", "min", "(", "slice_start", "+", "slice_width", "+", "slice_margin", ",", "dim_width", ")", "\n", "yield", "outer", "+", "(", "slice", "(", "start", ",", "stop", ",", "1", ")", ",", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.array.nd.remove_margin_slice": [[38, 44], ["tuple", "slice", "max", "min", "zip"], "function", ["None"], ["", "", "", "def", "remove_margin_slice", "(", "array_shape", ",", "slice_with_margin", ",", "slice_without_margin", ")", ":", "\n", "    ", "slice_tuple", "=", "tuple", "(", "\n", "slice", "(", "max", "(", "0", ",", "v", ".", "start", "-", "u", ".", "start", ")", ",", "min", "(", "v", ".", "stop", "-", "u", ".", "start", ",", "l", ")", ",", "1", ")", "\n", "for", "l", ",", "u", ",", "v", "in", "zip", "(", "array_shape", ",", "slice_with_margin", ",", "slice_without_margin", ")", "\n", ")", "\n", "return", "slice_tuple", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.array.nd.extract_tiles": [[46, 103], ["isinstance", "isinstance", "tuple", "tuple", "tuple", "numpy.lib.stride_tricks.as_strided", "tuple", "tuple", "patches.reshape.reshape", "slice", "numpy.array", "list", "list", "list", "list", "numpy.array", "numpy.array"], "function", ["None"], ["", "def", "extract_tiles", "(", "arr", ",", "tile_size", "=", "8", ",", "extraction_step", "=", "1", ",", "flatten", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Extracts patches of any n-dimensional array in place using strides.\n    Given an n-dimensional array it will return a 2n-dimensional array with\n    the first n dimensions indexing patch position and the last n indexing\n    the patch content. This operation is immediate (O(1)). A reshape\n    performed on the first n dimensions will cause numpy to copy data, leading\n    to a list of extracted patches.\n    Read more in the :ref:`User Guide <image_feature_extraction>`.\n\n    Parameters\n    ----------\n    arr : ndarray\n        n-dimensional array of which patches are to be extracted\n    tile_size : integer or tuple of length arr.ndim\n        Indicates the shape of the patches to be extracted. If an\n        integer is given, the shape will be a hypercube of\n        sidelength given by its value.\n    extraction_step : integer or tuple of length arr.ndim\n        Indicates step size at which extraction shall be performed.\n        If integer is given, then the step is uniform in all dimensions.\n    Returns\n    -------\n    patches : strided ndarray\n        2n-dimensional array indexing patches on first n dimensions and\n        containing patches on the last n dimensions. These dimensions\n        are fake, but this way no data is copied. A simple reshape invokes\n        a copying operation to obtain a list of patches:\n        result.reshape([-1] + list(patch_shape))\n    \"\"\"", "\n", "\n", "arr_ndim", "=", "arr", ".", "ndim", "\n", "\n", "if", "isinstance", "(", "tile_size", ",", "numbers", ".", "Number", ")", ":", "\n", "        ", "tile_size", "=", "tuple", "(", "[", "tile_size", "]", "*", "arr_ndim", ")", "\n", "", "if", "isinstance", "(", "extraction_step", ",", "numbers", ".", "Number", ")", ":", "\n", "        ", "extraction_step", "=", "tuple", "(", "[", "extraction_step", "]", "*", "arr_ndim", ")", "\n", "\n", "", "patch_strides", "=", "arr", ".", "strides", "\n", "\n", "slices", "=", "tuple", "(", "slice", "(", "None", ",", "None", ",", "st", ")", "for", "st", "in", "extraction_step", ")", "\n", "indexing_strides", "=", "arr", "[", "slices", "]", ".", "strides", "\n", "\n", "patch_indices_shape", "=", "(", "\n", "(", "numpy", ".", "array", "(", "arr", ".", "shape", ")", "-", "numpy", ".", "array", "(", "tile_size", ")", ")", "\n", "//", "numpy", ".", "array", "(", "extraction_step", ")", "\n", ")", "+", "1", "\n", "\n", "shape", "=", "tuple", "(", "list", "(", "patch_indices_shape", ")", "+", "list", "(", "tile_size", ")", ")", "\n", "strides", "=", "tuple", "(", "list", "(", "indexing_strides", ")", "+", "list", "(", "patch_strides", ")", ")", "\n", "\n", "patches", "=", "as_strided", "(", "arr", ",", "shape", "=", "shape", ",", "strides", "=", "strides", ")", "\n", "\n", "if", "flatten", ":", "\n", "        ", "patches", "=", "patches", ".", "reshape", "(", "(", "-", "1", ",", ")", "+", "patches", ".", "shape", "[", "-", "arr", ".", "ndim", ":", "]", ")", "\n", "\n", "", "return", "patches", "\n", "", ""]], "home.repos.pwc.inspect_result.royerlab_ssi-code.io.folders.get_home_folder": [[8, 13], ["str", "Path.home"], "function", ["None"], ["def", "get_home_folder", "(", ")", ":", "\n", "    ", "from", "pathlib", "import", "Path", "\n", "\n", "home_folder", "=", "str", "(", "Path", ".", "home", "(", ")", ")", "\n", "return", "home_folder", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.io.folders.get_temp_folder": [[15, 36], ["os.path.exists", "tempfile.gettempdir", "os.makedirs", "tempfile.gettempdir", "tempfile.gettempdir"], "function", ["None"], ["", "def", "get_temp_folder", "(", ")", ":", "\n", "    ", "temp_folder", "=", "None", "\n", "\n", "if", "platform", "==", "\"linux\"", "or", "platform", "==", "\"linux2\"", ":", "\n", "        ", "temp_folder", "=", "tempfile", ".", "gettempdir", "(", ")", "\n", "\n", "", "elif", "platform", "==", "\"darwin\"", ":", "\n", "        ", "temp_folder", "=", "tempfile", ".", "gettempdir", "(", ")", "\n", "\n", "", "elif", "platform", "==", "\"win32\"", ":", "\n", "        ", "temp_folder", "=", "tempfile", ".", "gettempdir", "(", ")", "\n", "\n", "", "try", ":", "\n", "        ", "makedirs", "(", "temp_folder", ")", "\n", "", "except", "Exception", ":", "\n", "        ", "pass", "\n", "\n", "", "if", "exists", "(", "temp_folder", ")", ":", "\n", "        ", "return", "temp_folder", "\n", "", "else", ":", "\n", "        ", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.io.folders.get_cache_folder": [[38, 59], ["os.path.exists", "os.path.join", "os.makedirs", "folders.get_home_folder", "os.path.join", "folders.get_home_folder", "os.path.join", "folders.get_home_folder", "os.getenv"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.io.folders.get_home_folder", "home.repos.pwc.inspect_result.royerlab_ssi-code.io.folders.get_home_folder", "home.repos.pwc.inspect_result.royerlab_ssi-code.io.folders.get_home_folder"], ["", "", "def", "get_cache_folder", "(", ")", ":", "\n", "    ", "cache_folder", "=", "None", "\n", "\n", "if", "platform", "==", "\"linux\"", "or", "platform", "==", "\"linux2\"", ":", "\n", "        ", "cache_folder", "=", "join", "(", "get_home_folder", "(", ")", ",", "'.cache'", ")", "\n", "\n", "", "elif", "platform", "==", "\"darwin\"", ":", "\n", "        ", "cache_folder", "=", "join", "(", "get_home_folder", "(", ")", ",", "'/Library/Caches'", ")", "\n", "\n", "", "elif", "platform", "==", "\"win32\"", ":", "\n", "        ", "cache_folder", "=", "join", "(", "get_home_folder", "(", ")", ",", "os", ".", "getenv", "(", "'LOCALAPPDATA'", ")", ")", "\n", "\n", "", "try", ":", "\n", "        ", "makedirs", "(", "cache_folder", ")", "\n", "", "except", "Exception", ":", "\n", "        ", "pass", "\n", "\n", "", "if", "exists", "(", "cache_folder", ")", ":", "\n", "        ", "return", "cache_folder", "\n", "", "else", ":", "\n", "        ", "return", "None", "\n", "", "", ""]], "home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.examples_single.get_path": [[152, 155], ["datasets.download_from_gdrive", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.download_from_gdrive"], ["    ", "def", "get_path", "(", "self", ")", ":", "\n", "        ", "download_from_gdrive", "(", "*", "self", ".", "value", ",", "datasets_folder", ")", "\n", "return", "join", "(", "datasets_folder", ",", "self", ".", "value", "[", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.examples_single.get_array": [[156, 159], ["imageio.imread", "datasets.examples_single.get_path"], "methods", ["home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.examples_single.get_path"], ["", "def", "get_array", "(", "self", ")", ":", "\n", "        ", "array", "=", "imread", "(", "self", ".", "get_path", "(", ")", ")", "\n", "return", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.normalise": [[31, 34], ["skimage.exposure.rescale_intensity", "image.astype"], "function", ["None"], ["", "def", "normalise", "(", "image", ")", ":", "\n", "    ", "return", "rescale_intensity", "(", "\n", "image", ".", "astype", "(", "numpy", ".", "float32", ")", ",", "in_range", "=", "'image'", ",", "out_range", "=", "(", "0", ",", "1", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.add_poisson_gaussian_noise": [[37, 50], ["numpy.random.mtrand.normal", "noisy.astype.astype", "numpy.random.seed", "numpy.random.mtrand.uniform", "numpy.around", "numpy.clip", "numpy.sqrt", "numpy.random.mtrand.uniform"], "function", ["None"], ["", "def", "add_poisson_gaussian_noise", "(", "image", ",", "alpha", "=", "5", ",", "sigma", "=", "0.01", ",", "sap", "=", "0.0", ",", "quant_bits", "=", "8", ",", "dtype", "=", "numpy", ".", "float32", ",", "clip", "=", "True", ",", "fix_seed", "=", "True", "\n", ")", ":", "\n", "    ", "if", "fix_seed", ":", "\n", "        ", "numpy", ".", "random", ".", "seed", "(", "0", ")", "\n", "", "rnd", "=", "normal", "(", "size", "=", "image", ".", "shape", ")", "\n", "rnd_bool", "=", "uniform", "(", "size", "=", "image", ".", "shape", ")", "<", "sap", "\n", "\n", "noisy", "=", "image", "+", "numpy", ".", "sqrt", "(", "alpha", "*", "image", "+", "sigma", "**", "2", ")", "*", "rnd", "\n", "noisy", "=", "noisy", "*", "(", "1", "-", "rnd_bool", ")", "+", "rnd_bool", "*", "uniform", "(", "size", "=", "image", ".", "shape", ")", "\n", "noisy", "=", "numpy", ".", "around", "(", "(", "2", "**", "quant_bits", ")", "*", "noisy", ")", "/", "2", "**", "quant_bits", "\n", "noisy", "=", "numpy", ".", "clip", "(", "noisy", ",", "0", ",", "1", ")", "if", "clip", "else", "noisy", "\n", "noisy", "=", "noisy", ".", "astype", "(", "dtype", ")", "\n", "return", "noisy", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.add_noise": [[52, 63], ["numpy.random.seed", "skimage.util.random_noise", "skimage.util.random_noise", "noisy.astype.astype", "numpy.random.poisson"], "function", ["None"], ["", "def", "add_noise", "(", "\n", "image", ",", "intensity", "=", "5", ",", "variance", "=", "0.01", ",", "sap", "=", "0.0", ",", "dtype", "=", "numpy", ".", "float32", ",", "clip", "=", "True", "\n", ")", ":", "\n", "    ", "numpy", ".", "random", ".", "seed", "(", "0", ")", "\n", "noisy", "=", "image", "\n", "if", "intensity", "is", "not", "None", ":", "\n", "        ", "noisy", "=", "numpy", ".", "random", ".", "poisson", "(", "image", "*", "intensity", ")", "/", "intensity", "\n", "", "noisy", "=", "random_noise", "(", "noisy", ",", "mode", "=", "\"gaussian\"", ",", "var", "=", "variance", ",", "seed", "=", "0", ",", "clip", "=", "clip", ")", "\n", "noisy", "=", "random_noise", "(", "noisy", ",", "mode", "=", "\"s&p\"", ",", "amount", "=", "sap", ",", "seed", "=", "0", ",", "clip", "=", "clip", ")", "\n", "noisy", "=", "noisy", ".", "astype", "(", "dtype", ")", "\n", "return", "noisy", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.add_blur_2d": [[65, 79], ["numpy.outer", "scipy.signal.convolve2d().astype", "numpy.moveaxis", "exp", "sqrt", "range", "numpy.moveaxis.copy", "numpy.moveaxis", "datasets.add_blur_2d.conv"], "function", ["None"], ["", "def", "add_blur_2d", "(", "image", ",", "k", "=", "17", ",", "sigma", "=", "5", ",", "multi_channel", "=", "False", ")", ":", "\n", "    ", "from", "numpy", "import", "pi", ",", "exp", ",", "sqrt", "\n", "#  generate a (2k+1)x(2k+1) gaussian kernel with mean=0 and sigma = s", "\n", "probs", "=", "[", "exp", "(", "-", "z", "*", "z", "/", "(", "2", "*", "sigma", "*", "sigma", ")", ")", "/", "sqrt", "(", "2", "*", "pi", "*", "sigma", "*", "sigma", ")", "for", "z", "in", "range", "(", "-", "k", ",", "k", "+", "1", ")", "]", "\n", "psf_kernel", "=", "numpy", ".", "outer", "(", "probs", ",", "probs", ")", "\n", "\n", "def", "conv", "(", "_image", ")", ":", "\n", "        ", "return", "convolve2d", "(", "_image", ",", "psf_kernel", ",", "mode", "=", "'same'", ")", ".", "astype", "(", "numpy", ".", "float32", ")", "\n", "\n", "", "if", "multi_channel", ":", "\n", "        ", "image", "=", "numpy", ".", "moveaxis", "(", "image", ".", "copy", "(", ")", ",", "-", "1", ",", "0", ")", "\n", "return", "numpy", ".", "moveaxis", "(", "numpy", ".", "stack", "(", "[", "conv", "(", "channel", ")", "for", "channel", "in", "image", "]", ")", ",", "0", ",", "-", "1", ")", ",", "psf_kernel", "\n", "", "else", ":", "\n", "        ", "return", "conv", "(", "image", ")", ",", "psf_kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.add_microscope_blur_2d": [[81, 95], ["ssi.utils.psf.simple_microscope_psf.SimpleMicroscopePSF", "ssi.utils.psf.simple_microscope_psf.SimpleMicroscopePSF.generate_xyz_psf", "psf_kernel.sum", "scipy.signal.convolve2d().astype", "numpy.moveaxis", "numpy.moveaxis.copy", "numpy.moveaxis", "datasets.add_blur_2d.conv"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.psf.simple_microscope_psf.SimpleMicroscopePSF.generate_xyz_psf"], ["", "", "def", "add_microscope_blur_2d", "(", "image", ",", "dz", "=", "0", ",", "multi_channel", "=", "False", ")", ":", "\n", "    ", "psf", "=", "SimpleMicroscopePSF", "(", ")", "\n", "psf_xyz_array", "=", "psf", ".", "generate_xyz_psf", "(", "dxy", "=", "0.406", ",", "dz", "=", "0.406", ",", "xy_size", "=", "17", ",", "z_size", "=", "17", ")", "\n", "psf_kernel", "=", "psf_xyz_array", "[", "dz", "]", "\n", "psf_kernel", "/=", "psf_kernel", ".", "sum", "(", ")", "\n", "\n", "def", "conv", "(", "_image", ")", ":", "\n", "        ", "return", "convolve2d", "(", "_image", ",", "psf_kernel", ",", "mode", "=", "'same'", ")", ".", "astype", "(", "numpy", ".", "float32", ")", "\n", "\n", "", "if", "multi_channel", ":", "\n", "        ", "image", "=", "numpy", ".", "moveaxis", "(", "image", ".", "copy", "(", ")", ",", "-", "1", ",", "0", ")", "\n", "return", "numpy", ".", "moveaxis", "(", "numpy", ".", "stack", "(", "[", "conv", "(", "channel", ")", "for", "channel", "in", "image", "]", ")", ",", "0", ",", "-", "1", ")", ",", "psf_kernel", "\n", "", "else", ":", "\n", "        ", "return", "conv", "(", "image", ")", ",", "psf_kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.add_microscope_blur_3d": [[97, 103], ["ssi.utils.psf.simple_microscope_psf.SimpleMicroscopePSF", "ssi.utils.psf.simple_microscope_psf.SimpleMicroscopePSF.generate_xyz_psf", "psf_kernel.sum", "scipy.signal.convolve"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.psf.simple_microscope_psf.SimpleMicroscopePSF.generate_xyz_psf"], ["", "", "def", "add_microscope_blur_3d", "(", "image", ")", ":", "\n", "    ", "psf", "=", "SimpleMicroscopePSF", "(", ")", "\n", "psf_xyz_array", "=", "psf", ".", "generate_xyz_psf", "(", "dxy", "=", "0.406", ",", "dz", "=", "0.406", ",", "xy_size", "=", "17", ",", "z_size", "=", "17", ")", "\n", "psf_kernel", "=", "psf_xyz_array", "\n", "psf_kernel", "/=", "psf_kernel", ".", "sum", "(", ")", "\n", "return", "convolve", "(", "image", ",", "psf_kernel", ",", "mode", "=", "'same'", ")", ",", "psf_kernel", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.lizard": [[108, 110], ["examples_single.generic_lizard.get_array"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.examples_single.get_array"], ["", "def", "lizard", "(", ")", ":", "\n", "    ", "return", "examples_single", ".", "generic_lizard", ".", "get_array", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.camera": [[112, 114], ["skimage.data.camera().astype", "skimage.data.camera"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.camera"], ["", "def", "camera", "(", ")", ":", "\n", "    ", "return", "skimage", ".", "data", ".", "camera", "(", ")", ".", "astype", "(", "numpy", ".", "float32", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.newyork": [[116, 118], ["examples_single.generic_newyork.get_array"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.examples_single.get_array"], ["", "def", "newyork", "(", ")", ":", "\n", "    ", "return", "examples_single", ".", "generic_newyork", ".", "get_array", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.pollen": [[120, 122], ["examples_single.generic_pollen.get_array"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.examples_single.get_array"], ["", "def", "pollen", "(", ")", ":", "\n", "    ", "return", "examples_single", ".", "generic_pollen", ".", "get_array", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.scafoldings": [[124, 126], ["examples_single.generic_scafoldings.get_array"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.examples_single.get_array"], ["", "def", "scafoldings", "(", ")", ":", "\n", "    ", "return", "examples_single", ".", "generic_scafoldings", ".", "get_array", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.characters": [[128, 130], ["examples_single.generic_characters.get_array"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.examples_single.get_array"], ["", "def", "characters", "(", ")", ":", "\n", "    ", "return", "1", "-", "examples_single", ".", "generic_characters", ".", "get_array", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.andromeda": [[132, 134], ["examples_single.generic_andromeda.get_array"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.examples_single.get_array"], ["", "def", "andromeda", "(", ")", ":", "\n", "    ", "return", "examples_single", ".", "generic_andromeda", ".", "get_array", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.fibsem": [[136, 141], ["examples_single.scheffer_fibsem.get_array"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.examples_single.get_array"], ["", "def", "fibsem", "(", "full", "=", "False", ")", ":", "\n", "    ", "array", "=", "examples_single", ".", "scheffer_fibsem", ".", "get_array", "(", ")", "\n", "if", "not", "full", ":", "\n", "        ", "array", "=", "array", "[", "0", ":", "1024", ",", "0", ":", "1024", "]", "\n", "", "return", "array", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.dots": [[143, 149], ["image.clip", "numpy.random.rand", "scipy.ndimage.binary_dilation().astype", "scipy.ndimage.binary_dilation"], "function", ["None"], ["", "def", "dots", "(", ")", ":", "\n", "    ", "image", "=", "numpy", ".", "random", ".", "rand", "(", "512", ",", "512", ")", "<", "0.005", "# andromeda()#[256:-256, 256:-256]", "\n", "image", "=", "0.8", "*", "binary_dilation", "(", "image", ")", ".", "astype", "(", "numpy", ".", "float32", ")", "\n", "image", "[", "0", ":", "256", ",", "0", ":", "256", "]", "+=", "0.1", "\n", "image", ".", "clip", "(", "0", ",", "1", ")", "\n", "return", "image", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.download_from_gdrive": [[173, 198], ["os.path.join", "os.makedirs", "ssi.utils.log.log.lprint", "gdown.download", "ssi.utils.log.log.lprint", "os.path.exists", "ssi.utils.log.log.lprint", "zipfile.ZipFile", "zipfile.ZipFile.extractall", "zipfile.ZipFile.close"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint", "home.repos.pwc.inspect_result.royerlab_ssi-code.log.log.lprint"], ["", "def", "download_from_gdrive", "(", "\n", "id", ",", "name", ",", "dest_folder", "=", "datasets_folder", ",", "overwrite", "=", "False", ",", "unzip", "=", "False", "\n", ")", ":", "\n", "    ", "try", ":", "\n", "        ", "os", ".", "makedirs", "(", "dest_folder", ")", "\n", "", "except", "Exception", ":", "\n", "        ", "pass", "\n", "\n", "", "url", "=", "f'https://drive.google.com/uc?id={id}'", "\n", "output_path", "=", "join", "(", "dest_folder", ",", "name", ")", "\n", "if", "overwrite", "or", "not", "exists", "(", "output_path", ")", ":", "\n", "        ", "lprint", "(", "f\"Downloading file {output_path} as it does not exist yet.\"", ")", "\n", "gdown", ".", "download", "(", "url", ",", "output_path", ",", "quiet", "=", "False", ")", "\n", "\n", "if", "unzip", ":", "\n", "            ", "lprint", "(", "f\"Unzipping file {output_path}...\"", ")", "\n", "zip_ref", "=", "zipfile", ".", "ZipFile", "(", "output_path", ",", "'r'", ")", "\n", "zip_ref", ".", "extractall", "(", "dest_folder", ")", "\n", "zip_ref", ".", "close", "(", ")", "\n", "# os.remove(output_path)", "\n", "\n", "", "return", "output_path", "\n", "", "else", ":", "\n", "        ", "lprint", "(", "f\"Not downloading file {output_path} as it already exists.\"", ")", "\n", "return", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.downloaded_example": [[200, 204], ["examples_single.get_list", "print", "datasets.download_from_gdrive"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.download_from_gdrive"], ["", "", "def", "downloaded_example", "(", "substring", ")", ":", "\n", "    ", "for", "example", "in", "examples_single", ".", "get_list", "(", ")", ":", "\n", "        ", "if", "substring", "in", "example", ".", "value", "[", "1", "]", ":", "\n", "            ", "print", "(", "download_from_gdrive", "(", "*", "example", ".", "value", ")", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.test_image_metrics.test_spectral_psnr": [[13, 24], ["ssi.utils.io.datasets.normalise().astype", "ssi.utils.io.datasets.add_noise", "ssi.utils.io.datasets.add_noise", "ssi.utils.metrics.image_metrics.spectral_psnr", "ssi.utils.metrics.image_metrics.spectral_psnr", "ssi.utils.io.datasets.camera", "ssi.utils.io.datasets.camera", "ssi.utils.io.datasets.normalise", "ssi.utils.io.datasets.camera"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.add_noise", "home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.add_noise", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.spectral_psnr", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.spectral_psnr", "home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.camera", "home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.camera", "home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.normalise", "home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.camera"], ["def", "test_spectral_psnr", "(", ")", ":", "\n", "    ", "camera_image", "=", "normalise", "(", "camera", "(", ")", ")", ".", "astype", "(", "numpy", ".", "float", ")", "\n", "camera_image_with_noise_high", "=", "add_noise", "(", "camera", "(", ")", ")", "\n", "camera_image_with_noise_low", "=", "add_noise", "(", "\n", "camera", "(", ")", ",", "intensity", "=", "1000", ",", "variance", "=", "0.0001", ",", "sap", "=", "0.000001", "\n", ")", "\n", "\n", "ji_high", "=", "spectral_psnr", "(", "camera_image", ",", "camera_image_with_noise_high", ")", "\n", "ji_low", "=", "spectral_psnr", "(", "camera_image", ",", "camera_image_with_noise_low", ")", "\n", "\n", "assert", "ji_high", ">", "ji_low", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.test_image_metrics.test_mutual_information": [[26, 34], ["ssi.utils.io.datasets.camera", "ssi.utils.io.datasets.add_noise", "ssi.utils.metrics.image_metrics.mutual_information", "ssi.utils.metrics.image_metrics.mutual_information", "ssi.utils.io.datasets.camera"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.camera", "home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.add_noise", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.mutual_information", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.mutual_information", "home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.camera"], ["", "def", "test_mutual_information", "(", ")", ":", "\n", "    ", "camera_image", "=", "camera", "(", ")", "\n", "camera_image_with_noise", "=", "add_noise", "(", "camera", "(", ")", ")", "\n", "\n", "mi", "=", "mutual_information", "(", "camera_image", ",", "camera_image", ",", "normalised", "=", "False", ")", "\n", "mi_n", "=", "mutual_information", "(", "camera_image", ",", "camera_image_with_noise", ",", "normalised", "=", "False", ")", "\n", "\n", "assert", "mi", ">", "mi_n", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.test_image_metrics.test_normalised_mutual_information": [[36, 52], ["ssi.utils.io.datasets.camera", "ssi.utils.io.datasets.add_noise", "pytest.approx", "pytest.approx", "ssi.utils.io.datasets.camera", "ssi.utils.metrics.image_metrics.mutual_information", "ssi.utils.metrics.image_metrics.mutual_information", "ssi.utils.metrics.image_metrics.mutual_information"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.camera", "home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.add_noise", "home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.camera", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.mutual_information", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.mutual_information", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.mutual_information"], ["", "def", "test_normalised_mutual_information", "(", ")", ":", "\n", "    ", "camera_image", "=", "camera", "(", ")", "\n", "camera_image_with_noise", "=", "add_noise", "(", "camera", "(", ")", ")", "\n", "\n", "assert", "pytest", ".", "approx", "(", "\n", "mutual_information", "(", "camera_image", ",", "camera_image", ",", "normalised", "=", "True", ")", ",", "1", "\n", ")", "\n", "assert", "pytest", ".", "approx", "(", "\n", "mutual_information", "(", "\n", "camera_image_with_noise", ",", "camera_image_with_noise", ",", "normalised", "=", "True", "\n", ")", ",", "\n", "1", ",", "\n", ")", "\n", "\n", "assert", "(", "\n", "mutual_information", "(", "camera_image", ",", "camera_image_with_noise", ",", "normalised", "=", "True", ")", "<", "1", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.test_image_metrics.test_spectral_mutual_information": [[55, 63], ["ssi.utils.io.datasets.camera", "ssi.utils.io.datasets.add_noise", "ssi.utils.metrics.image_metrics.spectral_mutual_information", "ssi.utils.metrics.image_metrics.spectral_mutual_information", "ssi.utils.io.datasets.camera"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.camera", "home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.add_noise", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.spectral_mutual_information", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.spectral_mutual_information", "home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.camera"], ["", "def", "test_spectral_mutual_information", "(", ")", ":", "\n", "    ", "camera_image", "=", "camera", "(", ")", "\n", "camera_image_with_noise", "=", "add_noise", "(", "camera", "(", ")", ")", "\n", "\n", "smi", "=", "spectral_mutual_information", "(", "camera_image", ",", "camera_image", ")", "\n", "smi_n", "=", "spectral_mutual_information", "(", "camera_image", ",", "camera_image_with_noise", ")", "\n", "\n", "assert", "smi_n", "<", "smi", "\n", "", ""]], "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.ssim": [[10, 12], ["skimage.metrics.structural_similarity"], "function", ["None"], ["def", "ssim", "(", "image_a", ",", "image_b", ")", ":", "\n", "    ", "return", "structural_similarity", "(", "image_a", ",", "image_b", ",", "multichannel", "=", "image_a", ".", "ndim", "==", "3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.psnr": [[14, 16], ["skimage.metrics.peak_signal_noise_ratio"], "function", ["None"], ["", "def", "psnr", "(", "image_true", ",", "image_test", ")", ":", "\n", "    ", "return", "peak_signal_noise_ratio", "(", "image_true", ",", "image_test", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.spectral_psnr": [[18, 37], ["scipy.fft.dct", "scipy.fft.dct", "math.log1p", "math.log1p", "skimage.metrics.peak_signal_noise_ratio", "numpy.linalg.norm", "numpy.linalg.norm", "scipy.fft.dct", "scipy.fft.dct", "numpy.linalg.norm", "numpy.linalg.norm", "abs", "abs", "image_true.flatten", "image_test.flatten", "scipy.fft.dct.flatten", "scipy.fft.dct.flatten"], "function", ["None"], ["", "def", "spectral_psnr", "(", "image_true", ",", "image_test", ")", ":", "\n", "    ", "norm_true_image", "=", "image_true", "/", "norm", "(", "image_true", ".", "flatten", "(", ")", ",", "2", ")", "\n", "norm_test_image", "=", "image_test", "/", "norm", "(", "image_test", ".", "flatten", "(", ")", ",", "2", ")", "\n", "\n", "dct_norm_true_image", "=", "dct", "(", "dct", "(", "norm_true_image", ",", "axis", "=", "0", ")", ",", "axis", "=", "1", ")", "\n", "dct_norm_test_image", "=", "dct", "(", "dct", "(", "norm_test_image", ",", "axis", "=", "0", ")", ",", "axis", "=", "1", ")", "\n", "\n", "norm_dct_norm_true_image", "=", "dct_norm_true_image", "/", "norm", "(", "\n", "dct_norm_true_image", ".", "flatten", "(", ")", ",", "2", "\n", ")", "\n", "norm_dct_norm_test_image", "=", "dct_norm_test_image", "/", "norm", "(", "\n", "dct_norm_test_image", ".", "flatten", "(", ")", ",", "2", "\n", ")", "\n", "\n", "norm_true_image", "=", "math", ".", "log1p", "(", "abs", "(", "norm_dct_norm_true_image", ")", ")", "\n", "norm_test_image", "=", "math", ".", "log1p", "(", "abs", "(", "norm_dct_norm_test_image", ")", ")", "\n", "\n", "psnr", "=", "peak_signal_noise_ratio", "(", "norm_true_image", ",", "norm_test_image", ")", "\n", "return", "psnr", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.spectral_mutual_information": [[39, 48], ["scipy.fft.dct", "scipy.fft.dct", "image_metrics.mutual_information", "numpy.linalg.norm", "numpy.linalg.norm", "scipy.fft.dct", "scipy.fft.dct", "image_a.flatten", "image_b.flatten"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.mutual_information"], ["", "def", "spectral_mutual_information", "(", "image_a", ",", "image_b", ",", "normalised", "=", "True", ")", ":", "\n", "    ", "norm_image_a", "=", "image_a", "/", "norm", "(", "image_a", ".", "flatten", "(", ")", ",", "2", ")", "\n", "norm_image_b", "=", "image_b", "/", "norm", "(", "image_b", ".", "flatten", "(", ")", ",", "2", ")", "\n", "\n", "dct_norm_true_image", "=", "dct", "(", "dct", "(", "norm_image_a", ",", "axis", "=", "0", ")", ",", "axis", "=", "1", ")", "\n", "dct_norm_test_image", "=", "dct", "(", "dct", "(", "norm_image_b", ",", "axis", "=", "0", ")", ",", "axis", "=", "1", ")", "\n", "\n", "return", "mutual_information", "(", "\n", "dct_norm_true_image", ",", "dct_norm_test_image", ",", "normalised", "=", "normalised", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.mutual_information": [[51, 59], ["image_a.flatten.flatten", "image_b.flatten.flatten", "image_metrics.mutual_info_from_contingency", "numpy.histogram2d", "image_metrics.joint_entropy_from_contingency"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.mutual_info_from_contingency", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.joint_entropy_from_contingency"], ["", "def", "mutual_information", "(", "image_a", ",", "image_b", ",", "bins", "=", "256", ",", "normalised", "=", "True", ")", ":", "\n", "    ", "image_a", "=", "image_a", ".", "flatten", "(", ")", "\n", "image_b", "=", "image_b", ".", "flatten", "(", ")", "\n", "\n", "c_xy", "=", "numpy", ".", "histogram2d", "(", "image_a", ",", "image_b", ",", "bins", ")", "[", "0", "]", "\n", "mi", "=", "mutual_info_from_contingency", "(", "c_xy", ")", "\n", "mi", "=", "mi", "/", "joint_entropy_from_contingency", "(", "c_xy", ")", "if", "normalised", "else", "mi", "\n", "return", "mi", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.joint_entropy_from_contingency": [[61, 81], ["numpy.nonzero", "contingency.sum", "numpy.log2", "joint_entropy.sum"], "function", ["None"], ["", "def", "joint_entropy_from_contingency", "(", "contingency", ")", ":", "\n", "# cordinates of non-zero entries in contingency table:", "\n", "    ", "nzx", ",", "nzy", "=", "numpy", ".", "nonzero", "(", "contingency", ")", "\n", "\n", "# non zero values:", "\n", "nz_val", "=", "contingency", "[", "nzx", ",", "nzy", "]", "\n", "\n", "# sum of all values in contingnecy table:", "\n", "contingency_sum", "=", "contingency", ".", "sum", "(", ")", "\n", "\n", "# normalised contingency, i.e. probability:", "\n", "p", "=", "nz_val", "/", "contingency_sum", "\n", "\n", "# log contingency:", "\n", "log_p", "=", "numpy", ".", "log2", "(", "p", ")", "\n", "\n", "# Joint entropy:", "\n", "joint_entropy", "=", "-", "p", "*", "log_p", "\n", "\n", "return", "joint_entropy", ".", "sum", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.mutual_info_from_contingency": [[83, 110], ["numpy.nonzero", "contingency.sum", "numpy.ravel", "numpy.ravel", "numpy.log2", "mi.sum", "contingency.sum", "contingency.sum", "numpy.ravel.take().astype", "numpy.ravel.take().astype", "numpy.log2", "numpy.log2", "numpy.ravel.sum", "numpy.ravel.take", "numpy.ravel.take", "numpy.log2", "numpy.ravel.sum", "numpy.log2"], "function", ["None"], ["", "def", "mutual_info_from_contingency", "(", "contingency", ")", ":", "\n", "# cordinates of non-zero entries in contingency table:", "\n", "    ", "nzx", ",", "nzy", "=", "numpy", ".", "nonzero", "(", "contingency", ")", "\n", "\n", "# non zero values:", "\n", "nz_val", "=", "contingency", "[", "nzx", ",", "nzy", "]", "\n", "\n", "# sum of all values in contingnecy table:", "\n", "contingency_sum", "=", "contingency", ".", "sum", "(", ")", "\n", "\n", "# marginals:", "\n", "pi", "=", "numpy", ".", "ravel", "(", "contingency", ".", "sum", "(", "axis", "=", "1", ")", ")", "\n", "pj", "=", "numpy", ".", "ravel", "(", "contingency", ".", "sum", "(", "axis", "=", "0", ")", ")", "\n", "\n", "#", "\n", "log_contingency_nm", "=", "numpy", ".", "log2", "(", "nz_val", ")", "\n", "contingency_nm", "=", "nz_val", "/", "contingency_sum", "\n", "# Don't need to calculate the full outer product, just for non-zeroes", "\n", "outer", "=", "pi", ".", "take", "(", "nzx", ")", ".", "astype", "(", "numpy", ".", "int64", ",", "copy", "=", "False", ")", "*", "pj", ".", "take", "(", "nzy", ")", ".", "astype", "(", "\n", "numpy", ".", "int64", ",", "copy", "=", "False", "\n", ")", "\n", "log_outer", "=", "-", "numpy", ".", "log2", "(", "outer", ")", "+", "numpy", ".", "log2", "(", "pi", ".", "sum", "(", ")", ")", "+", "numpy", ".", "log2", "(", "pj", ".", "sum", "(", ")", ")", "\n", "mi", "=", "(", "\n", "contingency_nm", "*", "(", "log_contingency_nm", "-", "numpy", ".", "log2", "(", "contingency_sum", ")", ")", "\n", "+", "contingency_nm", "*", "log_outer", "\n", ")", "\n", "return", "mi", ".", "sum", "(", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.image_operators.gradient": [[34, 47], ["numpy.zeros", "range", "list", "slice", "numpy.diff", "slice_all.insert", "slice", "tuple"], "function", ["None"], ["def", "gradient", "(", "img", ")", ":", "\n", "    ", "'''\n    Compute the gradient of an image as a numpy array\n    Courtesy : E. Gouillart - https://github.com/emmanuelle/tomo-tv/\n    '''", "\n", "shape", "=", "[", "img", ".", "ndim", ",", "]", "+", "list", "(", "img", ".", "shape", ")", "\n", "gradient", "=", "np", ".", "zeros", "(", "shape", ",", "dtype", "=", "img", ".", "dtype", ")", "\n", "slice_all", "=", "[", "0", ",", "slice", "(", "None", ",", "-", "1", ")", ",", "]", "\n", "for", "d", "in", "range", "(", "img", ".", "ndim", ")", ":", "\n", "        ", "gradient", "[", "tuple", "(", "slice_all", ")", "]", "=", "np", ".", "diff", "(", "img", ",", "axis", "=", "d", ")", "\n", "slice_all", "[", "0", "]", "=", "d", "+", "1", "\n", "slice_all", ".", "insert", "(", "1", ",", "slice", "(", "None", ")", ")", "\n", "", "return", "gradient", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.image_operators.div": [[49, 62], ["numpy.zeros", "range", "numpy.rollaxis", "numpy.rollaxis"], "function", ["None"], ["", "def", "div", "(", "grad", ")", ":", "\n", "    ", "'''\n    Compute the divergence of a gradient\n    Courtesy : E. Gouillart - https://github.com/emmanuelle/tomo-tv/\n    '''", "\n", "res", "=", "np", ".", "zeros", "(", "grad", ".", "shape", "[", "1", ":", "]", ")", "\n", "for", "d", "in", "range", "(", "grad", ".", "shape", "[", "0", "]", ")", ":", "\n", "        ", "this_grad", "=", "np", ".", "rollaxis", "(", "grad", "[", "d", "]", ",", "d", ")", "\n", "this_res", "=", "np", ".", "rollaxis", "(", "res", ",", "d", ")", "\n", "this_res", "[", ":", "-", "1", "]", "+=", "this_grad", "[", ":", "-", "1", "]", "\n", "this_res", "[", "1", ":", "-", "1", "]", "-=", "this_grad", "[", ":", "-", "2", "]", "\n", "this_res", "[", "-", "1", "]", "-=", "this_grad", "[", "-", "2", "]", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.image_operators.psi": [[64, 72], ["numpy.abs"], "function", ["None"], ["", "def", "psi", "(", "x", ",", "mu", ")", ":", "\n", "    ", "'''\n    Huber function needed to compute tv_smoothed\n    '''", "\n", "res", "=", "np", ".", "abs", "(", "x", ")", "\n", "m", "=", "res", "<", "mu", "\n", "res", "[", "m", "]", "=", "x", "[", "m", "]", "**", "2", "/", "(", "2", "*", "mu", ")", "+", "mu", "/", "2", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.image_operators.tv_smoothed": [[74, 82], ["image_operators.gradient", "numpy.sqrt", "numpy.sum", "image_operators.psi"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.image_operators.gradient", "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.image_operators.psi"], ["", "def", "tv_smoothed", "(", "x", ",", "mu", ")", ":", "\n", "    ", "'''\n    Moreau-Yosida approximation of Total Variation\n    see Weiss, Blanc-F\u00e9raud, Aubert, \"Efficient schemes for total variation minimization under constraints in image processing\"\n    '''", "\n", "g", "=", "gradient", "(", "x", ")", "\n", "g", "=", "np", ".", "sqrt", "(", "g", "[", "0", "]", "**", "2", "+", "g", "[", "1", "]", "**", "2", ")", "\n", "return", "np", ".", "sum", "(", "psi", "(", "g", ",", "mu", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.image_operators.grad_tv_smoothed": [[84, 97], ["image_operators.gradient", "numpy.sqrt", "image_operators.div"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.image_operators.gradient", "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.image_operators.div"], ["", "def", "grad_tv_smoothed", "(", "x", ",", "mu", ")", ":", "\n", "    ", "'''\n    Gradient of Moreau-Yosida approximation of Total Variation\n    '''", "\n", "g", "=", "gradient", "(", "x", ")", "\n", "g_mag", "=", "np", ".", "sqrt", "(", "g", "[", "0", "]", "**", "2", "+", "g", "[", "1", "]", "**", "2", ")", "\n", "m", "=", "g_mag", ">=", "mu", "\n", "m2", "=", "(", "m", "==", "False", ")", "# bool(1-m)", "\n", "g", "[", "0", "]", "[", "m", "]", "/=", "g_mag", "[", "m", "]", "\n", "g", "[", "1", "]", "[", "m", "]", "/=", "g_mag", "[", "m", "]", "\n", "g", "[", "0", "]", "[", "m2", "]", "/=", "mu", "\n", "g", "[", "1", "]", "[", "m2", "]", "/=", "mu", "\n", "return", "-", "div", "(", "g", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.image_operators.proj_l2": [[99, 113], ["numpy.copy", "numpy.maximum", "numpy.sqrt", "numpy.sum"], "function", ["None"], ["", "def", "proj_l2", "(", "g", ",", "Lambda", "=", "1.0", ")", ":", "\n", "    ", "'''\n    Proximal operator of the L2,1 norm :\n        L2,1(u) = sum_i ||u_i||_2\n    i.e pointwise projection onto the L2 unit ball\n\n    g : gradient-like numpy array\n    Lambda : magnitude of the unit ball\n    '''", "\n", "res", "=", "np", ".", "copy", "(", "g", ")", "\n", "n", "=", "np", ".", "maximum", "(", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "g", "**", "2", ",", "0", ")", ")", "/", "Lambda", ",", "1.0", ")", "\n", "res", "[", "0", "]", "/=", "n", "\n", "res", "[", "1", "]", "/=", "n", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.image_operators.norm2sq": [[115, 117], ["numpy.dot", "mat.ravel", "mat.ravel"], "function", ["None"], ["", "def", "norm2sq", "(", "mat", ")", ":", "\n", "    ", "return", "np", ".", "dot", "(", "mat", ".", "ravel", "(", ")", ",", "mat", ".", "ravel", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.image_operators.norm1": [[119, 121], ["numpy.sum", "numpy.abs"], "function", ["None"], ["", "def", "norm1", "(", "mat", ")", ":", "\n", "    ", "return", "np", ".", "sum", "(", "np", ".", "abs", "(", "mat", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.image_operators.mydot": [[123, 125], ["numpy.dot", "mat1.ravel", "mat2.ravel"], "function", ["None"], ["", "def", "mydot", "(", "mat1", ",", "mat2", ")", ":", "\n", "    ", "return", "np", ".", "dot", "(", "mat1", ".", "ravel", "(", ")", ",", "mat2", ".", "ravel", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.image_operators.generate_coords": [[127, 133], ["None"], "function", ["None"], ["", "def", "generate_coords", "(", "img", ",", "center", "=", "None", ")", ":", "\n", "    ", "if", "center", "is", "None", ":", "center", "=", "img", ".", "shape", "[", "0", "]", "//", "2", ",", "img", ".", "shape", "[", "1", "]", "//", "2", "\n", "R", ",", "C", "=", "np", ".", "mgrid", "[", "0", ":", "img", ".", "shape", "[", "0", "]", ",", "0", ":", "img", ".", "shape", "[", "1", "]", "]", "\n", "R", "-=", "center", "[", "0", "]", "\n", "C", "-=", "center", "[", "1", "]", "\n", "return", "R", ",", "C", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.image_operators.phantom_mask": [[135, 142], ["image_operators.generate_coords", "numpy.zeros_like"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.image_operators.generate_coords"], ["", "def", "phantom_mask", "(", "img", ",", "radius", "=", "None", ")", ":", "\n", "    ", "if", "radius", "is", "None", ":", "radius", "=", "img", ".", "shape", "[", "0", "]", "//", "2", "-", "10", "\n", "R", ",", "C", "=", "generate_coords", "(", "img", ")", "\n", "M", "=", "R", "**", "2", "+", "C", "**", "2", "\n", "res", "=", "np", ".", "zeros_like", "(", "img", ")", "\n", "res", "[", "M", "<", "radius", "**", "2", "]", "=", "img", "[", "M", "<", "radius", "**", "2", "]", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.image_operators.entropy": [[144, 153], ["numpy.histogram", "h.astype.astype", "numpy.sum", "numpy.log"], "function", ["None"], ["", "def", "entropy", "(", "img", ")", ":", "\n", "    ", "'''\n    Computes the entropy of an image (similar to Matlab function)\n    '''", "\n", "h", ",", "_", "=", "np", ".", "histogram", "(", "img", ",", "256", ")", "\n", "h", "=", "h", ".", "astype", "(", "'f'", ")", "\n", "h", "/=", "1.0", "*", "img", ".", "size", "\n", "h", "[", "h", "==", "0", "]", "=", "1.0", "\n", "return", "-", "np", ".", "sum", "(", "h", "*", "np", ".", "log", "(", "h", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.image_operators.KL": [[155, 168], ["numpy.histogram", "numpy.histogram", "numpy.sum", "x.sum", "y.sum", "numpy.log"], "function", ["None"], ["", "def", "KL", "(", "img1", ",", "img2", ")", ":", "\n", "    ", "'''\n    Computes the Kullback-Leibler divergence between two images\n    Mind that this function is not symmetric. The second argument should be the \"reference\" image.\n    '''", "\n", "x", ",", "_", "=", "np", ".", "histogram", "(", "img1", ",", "256", ")", "\n", "y", ",", "_", "=", "np", ".", "histogram", "(", "img2", ",", "256", ")", "\n", "m", "=", "(", "y", "!=", "0", ")", "# integers", "\n", "x_n", ",", "y_n", "=", "x", "[", "m", "]", ",", "y", "[", "m", "]", "\n", "m", "=", "(", "x_n", "!=", "0", ")", "\n", "x_n", ",", "y_n", "=", "1.0", "*", "x_n", "[", "m", "]", ",", "1.0", "*", "y_n", "[", "m", "]", "\n", "Sx", ",", "Sy", "=", "x", ".", "sum", "(", ")", "*", "1.0", ",", "y", ".", "sum", "(", ")", "*", "1.0", "\n", "return", "(", "1.0", "/", "Sx", ")", "*", "np", ".", "sum", "(", "x_n", "*", "np", ".", "log", "(", "x_n", "/", "y_n", "*", "Sy", "/", "Sx", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.image_operators.mse": [[170, 181], ["numpy.dtype", "img1.astype.astype", "numpy.dtype", "img2.astype.astype", "print", "numpy.sum", "numpy.sum"], "function", ["None"], ["", "def", "mse", "(", "img1", ",", "img2", ")", ":", "\n", "    ", "'''\n    Computes the Mean Square Error between two images\n    '''", "\n", "if", "img1", ".", "dtype", "!=", "np", ".", "dtype", "(", "'float64'", ")", ":", "img1", "=", "img1", ".", "astype", "(", "'float64'", ")", "\n", "if", "img2", ".", "dtype", "!=", "np", ".", "dtype", "(", "'float64'", ")", ":", "img2", "=", "img2", ".", "astype", "(", "'float64'", ")", "\n", "(", "n", ",", "m", ")", "=", "img1", ".", "shape", "\n", "if", "(", "n", ",", "m", ")", "!=", "img2", ".", "shape", ":", "\n", "        ", "print", "(", "'The images do not have the same size'", ")", "\n", "return", "-", "1", "\n", "", "return", "np", ".", "sum", "(", "np", ".", "sum", "(", "(", "img1", "[", ":", ",", ":", "]", "-", "img2", "[", ":", ",", ":", "]", ")", "**", "2", ")", ")", "/", "(", "m", "*", "n", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration._utils.my_imshow": [[35, 61], ["isinstance", "matplotlib.figure", "matplotlib.imshow", "matplotlib.show", "matplotlib.colorbar", "numpy.prod", "matplotlib.figure", "range", "matplotlib.show", "len", "Exception", "str", "curr[].replace().replace", "matplotlib.imshow", "matplotlib.subplot", "matplotlib.subplot", "matplotlib.colorbar", "curr[].replace", "len"], "function", ["None"], ["def", "my_imshow", "(", "img_list", ",", "shape", "=", "None", ",", "cmap", "=", "None", ",", "nocbar", "=", "False", ")", ":", "\n", "    ", "if", "isinstance", "(", "img_list", ",", "np", ".", "ndarray", ")", ":", "\n", "        ", "is_array", "=", "True", "\n", "plt", ".", "figure", "(", ")", "\n", "plt", ".", "imshow", "(", "img_list", ",", "interpolation", "=", "\"nearest\"", ",", "cmap", "=", "cmap", ")", "\n", "if", "nocbar", "is", "False", ":", "plt", ".", "colorbar", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n", "", "elif", "shape", ":", "\n", "        ", "num", "=", "np", ".", "prod", "(", "shape", ")", "\n", "# ~ if num > 1 and is_array:", "\n", "# ~ print('Warning (my_imshow): requestred to show %d images but only one image was provided' %(num))", "\n", "if", "num", "!=", "len", "(", "img_list", ")", ":", "\n", "            ", "raise", "Exception", "(", "'ERROR (my_imshow): requestred to show %d images but %d images were actually provided'", "%", "(", "num", ",", "len", "(", "img_list", ")", ")", ")", "\n", "\n", "", "plt", ".", "figure", "(", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "num", ")", ":", "\n", "            ", "curr", "=", "str", "(", "shape", "+", "(", "i", "+", "1", ",", ")", ")", "\n", "curr", "=", "curr", "[", "1", ":", "-", "1", "]", ".", "replace", "(", "','", ",", "''", ")", ".", "replace", "(", "' '", ",", "''", ")", "\n", "if", "i", "==", "0", ":", "\n", "                ", "ax0", "=", "plt", ".", "subplot", "(", "curr", ")", "\n", "", "else", ":", "\n", "                ", "plt", ".", "subplot", "(", "curr", ",", "sharex", "=", "ax0", ",", "sharey", "=", "ax0", ")", "\n", "", "plt", ".", "imshow", "(", "img_list", "[", "i", "]", ",", "interpolation", "=", "\"nearest\"", ",", "cmap", "=", "cmap", ")", "\n", "if", "nocbar", "is", "False", ":", "plt", ".", "colorbar", "(", ")", "\n", "", "plt", ".", "show", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.chambole_pock.power_method": [[40, 56], ["PT", "range", "math.sqrt", "math.sqrt", "PT", "tv_restoration.image_operators.div", "tv_restoration.image_operators.norm2sq", "P", "tv_restoration.image_operators.gradient"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.image_operators.div", "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.image_operators.norm2sq", "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.image_operators.gradient"], ["def", "power_method", "(", "P", ",", "PT", ",", "data", ",", "n_it", "=", "10", ")", ":", "\n", "    ", "'''\n    Calculates the norm of operator K = [grad, P],\n    i.e the sqrt of the largest eigenvalue of K^T*K = -div(grad) + P^T*P :\n        ||K|| = sqrt(lambda_max(K^T*K))\n\n    P : forward projection\n    PT : back projection\n    data : acquired sinogram\n    '''", "\n", "x", "=", "PT", "(", "data", ")", "\n", "for", "k", "in", "range", "(", "0", ",", "n_it", ")", ":", "\n", "        ", "x", "=", "PT", "(", "P", "(", "x", ")", ")", "-", "div", "(", "gradient", "(", "x", ")", ")", "\n", "s", "=", "sqrt", "(", "norm2sq", "(", "x", ")", ")", "\n", "x", "/=", "s", "\n", "", "return", "sqrt", "(", "s", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.chambole_pock.chambolle_pock": [[58, 101], ["range", "PT", "tv_restoration.image_operators.gradient", "numpy.zeros", "tv_restoration.image_operators.proj_l2", "tv_restoration.image_operators.norm1", "PT", "tv_restoration.image_operators.norm2sq", "tv_restoration.image_operators.gradient", "print", "tv_restoration.image_operators.gradient", "tv_restoration.image_operators.div", "P", "P"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.image_operators.gradient", "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.image_operators.proj_l2", "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.image_operators.norm1", "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.image_operators.norm2sq", "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.image_operators.gradient", "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.image_operators.gradient", "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.image_operators.div"], ["", "def", "chambolle_pock", "(", "P", ",", "PT", ",", "data", ",", "Lambda", ",", "L", ",", "n_it", ",", "return_energy", "=", "True", ")", ":", "\n", "    ", "'''\n    Chambolle-Pock algorithm for the minimization of the objective function\n        ||P*x - d||_2^2 + Lambda*TV(x)\n\n    P : projection operator\n    PT : backprojection operator\n    Lambda : weight of the TV penalization (the higher Lambda, the more sparse is the solution)\n    L : norm of the operator [P, Lambda*grad] (see power_method)\n    n_it : number of iterations\n    return_energy: if True, an array containing the values of the objective function will be returned\n    '''", "\n", "\n", "sigma", "=", "1.0", "/", "L", "\n", "tau", "=", "1.0", "/", "L", "\n", "\n", "x", "=", "0", "*", "PT", "(", "data", ")", "\n", "p", "=", "0", "*", "gradient", "(", "x", ")", "\n", "q", "=", "0", "*", "data", "\n", "x_tilde", "=", "0", "*", "x", "\n", "theta", "=", "1.0", "\n", "\n", "if", "return_energy", ":", "en", "=", "np", ".", "zeros", "(", "n_it", ")", "\n", "for", "k", "in", "range", "(", "0", ",", "n_it", ")", ":", "\n", "# Update dual variables", "\n", "        ", "p", "=", "proj_l2", "(", "p", "+", "sigma", "*", "gradient", "(", "x_tilde", ")", ",", "Lambda", ")", "\n", "q", "=", "(", "q", "+", "sigma", "*", "P", "(", "x_tilde", ")", "-", "sigma", "*", "data", ")", "/", "(", "1.0", "+", "sigma", ")", "\n", "# Update primal variables", "\n", "x_old", "=", "x", "\n", "x", "=", "x", "+", "tau", "*", "div", "(", "p", ")", "-", "tau", "*", "PT", "(", "q", ")", "\n", "x_tilde", "=", "x", "+", "theta", "*", "(", "x", "-", "x_old", ")", "\n", "# Calculate norms", "\n", "if", "return_energy", ":", "\n", "            ", "fidelity", "=", "0.5", "*", "norm2sq", "(", "P", "(", "x", ")", "-", "data", ")", "\n", "tv", "=", "norm1", "(", "gradient", "(", "x", ")", ")", "\n", "energy", "=", "1.0", "*", "fidelity", "+", "Lambda", "*", "tv", "\n", "en", "[", "k", "]", "=", "energy", "\n", "if", "(", "VERBOSE", "and", "k", "%", "10", "==", "0", ")", ":", "\n", "                ", "print", "(", "\"[%d] : energy %e \\t fidelity %e \\t TV %e\"", "%", "(", "k", ",", "energy", ",", "fidelity", ",", "tv", ")", ")", "\n", "", "", "", "if", "return_energy", ":", "\n", "        ", "return", "en", ",", "x", "\n", "", "else", ":", "\n", "        ", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.chambole_pock.cp_restoration": [[103, 115], ["tv_restoration.convo_operators.ConvolutionOperator", "chambole_pock.power_method", "print", "chambole_pock.chambolle_pock", "tv_restoration.convo_operators.ConvolutionOperator.T"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.chambole_pock.power_method", "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.chambole_pock.chambolle_pock", "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.convo_operators.ConvolutionOperator.T"], ["", "", "def", "cp_restoration", "(", "image", ",", "kernel", ",", "num_iterations", "=", "2500", ",", "beta", "=", "1e-3", ")", ":", "\n", "# Preparation:", "\n", "    ", "K", "=", "ConvolutionOperator", "(", "kernel", ")", "\n", "P", "=", "lambda", "x", ":", "K", "*", "x", "\n", "PT", "=", "lambda", "x", ":", "K", ".", "T", "(", ")", "*", "x", "\n", "\n", "# Optimisation:", "\n", "L", "=", "power_method", "(", "P", ",", "PT", ",", "image", ",", "n_it", "=", "200", ")", "\n", "print", "(", "\"||K|| = %f\"", "%", "L", ")", "\n", "en", ",", "restored_image", "=", "chambolle_pock", "(", "P", ",", "PT", ",", "image", ",", "beta", ",", "L", ",", "num_iterations", ")", "\n", "\n", "return", "restored_image", "\n", "", ""]], "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.conjugate_gradient.conjugate_gradient_TV": [[39, 83], ["numpy.zeros", "range", "PT", "PT", "numpy.copy", "PT", "tv_restoration.image_operators.norm2sq", "tv_restoration.image_operators.tv_smoothed", "tv_restoration.image_operators.grad_tv_smoothed", "P", "tv_restoration.image_operators.mydot", "tv_restoration.image_operators.mydot", "tv_restoration.image_operators.mydot", "tv_restoration.image_operators.norm2sq", "print", "numpy.abs", "print", "tv_restoration.image_operators.grad_tv_smoothed", "P"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.image_operators.norm2sq", "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.image_operators.tv_smoothed", "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.image_operators.grad_tv_smoothed", "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.image_operators.mydot", "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.image_operators.mydot", "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.image_operators.mydot", "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.image_operators.norm2sq", "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.image_operators.grad_tv_smoothed"], ["def", "conjugate_gradient_TV", "(", "P", ",", "PT", ",", "sino", ",", "Lambda", ",", "mu", "=", "1e-4", ",", "n_it", "=", "300", ")", ":", "\n", "    ", "'''\n    Conjugate Gradient algorithm to minimize the objective function\n        0.5*||P*x - d||_2^2 + Lambda*TV_mu (x)\n\n    P : projection operator\n    PT : backprojection operator\n    sino: acquired data as a sinogram\n    Lambda : parameter weighting the TV regularization\n    mu : parameter of Moreau-Yosida approximation of TV (small positive value)\n    n_it : number of iterations\n    '''", "\n", "\n", "x", "=", "0", "*", "PT", "(", "sino", ")", "# start from 0", "\n", "grad_f", "=", "-", "PT", "(", "sino", ")", "\n", "grad_F", "=", "grad_f", "+", "Lambda", "*", "grad_tv_smoothed", "(", "x", ",", "mu", ")", "\n", "d", "=", "-", "np", ".", "copy", "(", "grad_F", ")", "\n", "en", "=", "np", ".", "zeros", "(", "n_it", ")", "\n", "for", "k", "in", "range", "(", "0", ",", "n_it", ")", ":", "\n", "        ", "grad_f_old", "=", "grad_f", "\n", "grad_F_old", "=", "grad_F", "\n", "ATAd", "=", "PT", "(", "P", "(", "d", ")", ")", "\n", "# Calculate step size", "\n", "alpha", "=", "mydot", "(", "d", ",", "-", "grad_F_old", ")", "/", "mydot", "(", "d", ",", "ATAd", ")", "\n", "# Update variables", "\n", "x", "=", "x", "+", "alpha", "*", "d", "\n", "grad_f", "=", "grad_f_old", "+", "alpha", "*", "ATAd", "\n", "grad_F", "=", "grad_f", "+", "Lambda", "*", "grad_tv_smoothed", "(", "x", ",", "mu", ")", "\n", "beta", "=", "mydot", "(", "grad_F", ",", "grad_F", "-", "grad_F_old", ")", "/", "norm2sq", "(", "grad_F_old", ")", "# Polak-Ribiere", "\n", "if", "beta", "<", "0", ":", "\n", "            ", "beta", "=", "0", "\n", "", "d", "=", "-", "grad_F", "+", "beta", "*", "d", "\n", "# Energy", "\n", "fid", "=", "norm2sq", "(", "P", "(", "x", ")", "-", "sino", ")", "\n", "tv", "=", "tv_smoothed", "(", "x", ",", "mu", ")", "\n", "eng", "=", "fid", "+", "Lambda", "*", "tv", "\n", "en", "[", "k", "]", "=", "eng", "\n", "if", "VERBOSE", "and", "(", "k", "%", "10", "==", "0", ")", ":", "\n", "            ", "print", "(", "\"%d : Energy = %e \\t Fid = %e\\t TV = %e\"", "%", "(", "k", ",", "eng", ",", "fid", ",", "tv", ")", ")", "\n", "# Stoping criterion", "\n", "", "if", "np", ".", "abs", "(", "alpha", ")", "<", "1e-34", ":", "# TODO : try other bounds", "\n", "            ", "print", "(", "\"Warning : minimum step reached, interrupting at iteration %d\"", "%", "k", ")", "\n", "break", ";", "\n", "", "", "return", "en", ",", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.conjugate_gradient.cg_restoration": [[85, 95], ["tv_restoration.convo_operators.ConvolutionOperator", "conjugate_gradient.conjugate_gradient_TV", "tv_restoration.convo_operators.ConvolutionOperator.T"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.conjugate_gradient.conjugate_gradient_TV", "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.convo_operators.ConvolutionOperator.T"], ["", "def", "cg_restoration", "(", "image", ",", "kernel", ",", "num_iterations", "=", "2500", ",", "lmbda", "=", "1e-7", ",", "mu", "=", "1e-4", ")", ":", "\n", "# Preparation:", "\n", "    ", "K", "=", "ConvolutionOperator", "(", "kernel", ")", "\n", "P", "=", "lambda", "x", ":", "K", "*", "x", "\n", "PT", "=", "lambda", "x", ":", "K", ".", "T", "(", ")", "*", "x", "\n", "\n", "# Optimisation:", "\n", "en", ",", "restored_image", "=", "conjugate_gradient_TV", "(", "P", ",", "PT", ",", "image", ",", "lmbda", ",", "mu", ",", "num_iterations", ")", "\n", "\n", "return", "restored_image", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.convo_operators.ConvolutionOperator.__init__": [[44, 53], ["numpy.copy", "len"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "kernel", ",", "initfrom", "=", "None", ")", ":", "\n", "        ", "if", "initfrom", "is", "None", ":", "\n", "            ", "self", ".", "kernel", "=", "kernel", "\n", "self", ".", "is2D", "=", "True", "if", "len", "(", "kernel", ".", "shape", ")", ">", "1", "else", "False", "\n", "self", ".", "mode", "=", "'constant'", "# {'reflect', 'constant', 'nearest', 'mirror', 'wrap'}", "\n", "", "else", ":", "\n", "            ", "self", ".", "kernel", "=", "np", ".", "copy", "(", "initfrom", ".", "kernel", ")", "\n", "self", ".", "is2D", "=", "initfrom", ".", "is2D", "\n", "self", ".", "mode", "=", "initfrom", ".", "mode", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.convo_operators.ConvolutionOperator.__mul__": [[54, 64], ["scipy.ndimage.filters.convolve", "scipy.ndimage.filters.convolve1d", "scipy.ndimage.filters.convolve1d"], "methods", ["None"], ["", "", "def", "__mul__", "(", "self", ",", "img", ")", ":", "\n", "        ", "'''\n        do the actual convolution.\n        If the kernel is 1D, a separable convolution is done.\n        '''", "\n", "if", "self", ".", "is2D", ":", "\n", "            ", "return", "filters", ".", "convolve", "(", "img", ",", "self", ".", "kernel", ",", "mode", "=", "self", ".", "mode", ")", "\n", "", "else", ":", "\n", "            ", "res", "=", "filters", ".", "convolve1d", "(", "img", ",", "self", ".", "kernel", ",", "axis", "=", "-", "1", ",", "mode", "=", "self", ".", "mode", ")", "\n", "return", "filters", ".", "convolve1d", "(", "res", ",", "self", ".", "kernel", ",", "axis", "=", "0", ",", "mode", "=", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.convo_operators.ConvolutionOperator.T": [[65, 69], ["convo_operators.ConvolutionOperator"], "methods", ["None"], ["", "", "def", "T", "(", "self", ")", ":", "\n", "        ", "res", "=", "ConvolutionOperator", "(", "self", ",", "initfrom", "=", "self", ")", "\n", "res", ".", "kern", "=", "res", ".", "kernel", ".", "T", "\n", "return", "res", "\n", "", "", ""]], "home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.convo_operators.gaussian1D": [[34, 41], ["int", "numpy.exp().astype", "np.exp().astype.sum", "math.ceil", "numpy.arange", "numpy.exp"], "function", ["None"], ["def", "gaussian1D", "(", "sigma", ")", ":", "\n", "    ", "ksize", "=", "int", "(", "ceil", "(", "8", "*", "sigma", "+", "1", ")", ")", "\n", "if", "(", "ksize", "%", "2", "==", "0", ")", ":", "ksize", "+=", "1", "\n", "t", "=", "np", ".", "arange", "(", "ksize", ")", "-", "(", "ksize", "-", "1.0", ")", "/", "2.0", "\n", "g", "=", "np", ".", "exp", "(", "-", "(", "t", "/", "sigma", ")", "**", "2", "/", "2.0", ")", ".", "astype", "(", "'f'", ")", "\n", "g", "/=", "g", ".", "sum", "(", "dtype", "=", "'f'", ")", "\n", "return", "g", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.models.convblock.ConvBlock.__init__": [[5, 82], ["torch.Module.__init__", "torch.Dropout2d", "torch.Dropout2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.Conv2d", "torch.Conv2d", "torch.ReLU", "torch.ReLU", "torch.ReflectionPad2d", "torch.ReflectionPad2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.LeakyReLU", "torch.LeakyReLU", "torch.InstanceNorm2d", "torch.InstanceNorm2d", "torch.ELU", "torch.ELU", "torch.SELU", "torch.SELU"], "methods", ["home.repos.pwc.inspect_result.royerlab_ssi-code.optimisers.esadam.ESAdam.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "dropout", "=", "False", ",", "\n", "norm", "=", "None", ",", "\n", "residual", "=", "True", ",", "\n", "activation", "=", "'leakyrelu'", ",", "\n", "in_place_activation", "=", "True", ",", "\n", "transpose", "=", "False", ",", "\n", "reflectpad", "=", "True", ",", "\n", ")", ":", "\n", "\n", "        ", "super", "(", "ConvBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "residual", "=", "residual", "\n", "self", ".", "activation", "=", "activation", "\n", "self", ".", "transpose", "=", "transpose", "\n", "self", ".", "reflectpad", "=", "reflectpad", "\n", "\n", "if", "self", ".", "dropout", ":", "\n", "            ", "self", ".", "dropout1", "=", "nn", ".", "Dropout2d", "(", "p", "=", "0.05", ")", "\n", "self", ".", "dropout2", "=", "nn", ".", "Dropout2d", "(", "p", "=", "0.05", ")", "\n", "\n", "", "self", ".", "norm1", "=", "None", "\n", "self", ".", "norm2", "=", "None", "\n", "if", "norm", "is", "not", "None", ":", "\n", "            ", "if", "norm", "==", "'batch'", ":", "\n", "                ", "self", ".", "norm1", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", "\n", "", "elif", "norm", "==", "'instance'", ":", "\n", "                ", "self", ".", "norm1", "=", "nn", ".", "InstanceNorm2d", "(", "out_channels", ",", "affine", "=", "True", ")", "\n", "self", ".", "norm2", "=", "nn", ".", "InstanceNorm2d", "(", "out_channels", ",", "affine", "=", "True", ")", "\n", "\n", "", "", "if", "self", ".", "transpose", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "padding", "=", "0", "if", "self", ".", "reflectpad", "else", "1", ",", "\n", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "ConvTranspose2d", "(", "\n", "out_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "padding", "=", "0", "if", "self", ".", "reflectpad", "else", "1", ",", "\n", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "padding", "=", "0", "if", "self", ".", "reflectpad", "else", "1", ",", "\n", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "\n", "out_channels", ",", "\n", "out_channels", ",", "\n", "kernel_size", "=", "3", ",", "\n", "padding", "=", "0", "if", "self", ".", "reflectpad", "else", "1", ",", "\n", ")", "\n", "\n", "", "if", "self", ".", "activation", "==", "'relu'", ":", "\n", "            ", "self", ".", "actfun1", "=", "nn", ".", "ReLU", "(", "inplace", "=", "in_place_activation", ")", "\n", "self", ".", "actfun2", "=", "nn", ".", "ReLU", "(", "inplace", "=", "in_place_activation", ")", "\n", "", "elif", "self", ".", "activation", "==", "'leakyrelu'", ":", "\n", "            ", "self", ".", "actfun1", "=", "nn", ".", "LeakyReLU", "(", "inplace", "=", "in_place_activation", ")", "\n", "self", ".", "actfun2", "=", "nn", ".", "LeakyReLU", "(", "inplace", "=", "in_place_activation", ")", "\n", "", "elif", "self", ".", "activation", "==", "'elu'", ":", "\n", "            ", "self", ".", "actfun1", "=", "nn", ".", "ELU", "(", "inplace", "=", "in_place_activation", ")", "\n", "self", ".", "actfun2", "=", "nn", ".", "ELU", "(", "inplace", "=", "in_place_activation", ")", "\n", "", "elif", "self", ".", "activation", "==", "'selu'", ":", "\n", "            ", "self", ".", "actfun1", "=", "nn", ".", "SELU", "(", "inplace", "=", "in_place_activation", ")", "\n", "self", ".", "actfun2", "=", "nn", ".", "SELU", "(", "inplace", "=", "in_place_activation", ")", "\n", "\n", "", "if", "self", ".", "reflectpad", ":", "\n", "            ", "self", ".", "rpad1", "=", "nn", ".", "ReflectionPad2d", "(", "1", ")", "\n", "self", ".", "rpad2", "=", "nn", ".", "ReflectionPad2d", "(", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.models.convblock.ConvBlock.forward": [[83, 121], ["convblock.ConvBlock.conv1", "convblock.ConvBlock.actfun1", "convblock.ConvBlock.conv2", "convblock.ConvBlock.actfun2", "convblock.ConvBlock.rpad1", "convblock.ConvBlock.dropout1", "convblock.ConvBlock.norm1", "convblock.ConvBlock.rpad2", "convblock.ConvBlock.dropout2", "convblock.ConvBlock.norm2", "min", "min"], "methods", ["home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.image_operators.norm1"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "ox", "=", "x", "\n", "\n", "if", "self", ".", "reflectpad", ":", "\n", "            ", "x", "=", "self", ".", "rpad1", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "\n", "if", "self", ".", "dropout", ":", "\n", "            ", "x", "=", "self", ".", "dropout1", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "norm1", ":", "\n", "            ", "x", "=", "self", ".", "norm1", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "actfun1", "(", "x", ")", "\n", "\n", "if", "self", ".", "reflectpad", ":", "\n", "            ", "x", "=", "self", ".", "rpad2", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "\n", "if", "self", ".", "dropout", ":", "\n", "            ", "x", "=", "self", ".", "dropout2", "(", "x", ")", "\n", "\n", "", "if", "self", ".", "residual", ":", "\n", "            ", "x", "[", ":", ",", "0", ":", "min", "(", "ox", ".", "shape", "[", "1", "]", ",", "x", ".", "shape", "[", "1", "]", ")", ",", ":", ",", ":", "]", "+=", "ox", "[", "\n", ":", ",", "0", ":", "min", "(", "ox", ".", "shape", "[", "1", "]", ",", "x", ".", "shape", "[", "1", "]", ")", ",", ":", ",", ":", "\n", "]", "\n", "\n", "", "if", "self", ".", "norm2", ":", "\n", "            ", "x", "=", "self", ".", "norm2", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "actfun2", "(", "x", ")", "\n", "\n", "# print(\"shapes: x:%s ox:%s \" % (x.shape,ox.shape))", "\n", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.royerlab_ssi-code.models.unet.UNet.__init__": [[8, 29], ["torch.Module.__init__", "unet.DoubleConv", "unet.Down", "unet.Down", "unet.Down", "unet.Down", "unet.Up", "unet.Up", "unet.Up", "unet.Up", "unet.OutConv"], "methods", ["home.repos.pwc.inspect_result.royerlab_ssi-code.optimisers.esadam.ESAdam.__init__"], ["    ", "def", "__init__", "(", "self", ",", "n_input_channels", ",", "n_output_channels", ",", "mode", "=", "'nearest'", ",", "residual", "=", "False", ",", "kernel_regularisation", "=", "False", ",", "num_internal_channels", "=", "8", ",", "ndim", "=", "2", ")", ":", "\n", "        ", "super", "(", "UNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "n_channels", "=", "n_input_channels", "\n", "self", ".", "n_classes", "=", "n_output_channels", "\n", "self", ".", "residual", "=", "residual", "\n", "self", ".", "kernel_regularisation", "=", "kernel_regularisation", "\n", "self", ".", "kernel", "=", "None", "\n", "\n", "n", "=", "num_internal_channels", "\n", "\n", "self", ".", "inc", "=", "DoubleConv", "(", "n_input_channels", ",", "n", ",", "ndim", "=", "ndim", ")", "\n", "self", ".", "down1", "=", "Down", "(", "n", ",", "n", "*", "2", ",", "ndim", "=", "ndim", ")", "\n", "self", ".", "down2", "=", "Down", "(", "n", "*", "2", ",", "n", "*", "4", ",", "ndim", "=", "ndim", ")", "\n", "self", ".", "down3", "=", "Down", "(", "n", "*", "4", ",", "n", "*", "8", ",", "ndim", "=", "ndim", ")", "\n", "factor", "=", "2", "if", "mode", "==", "'bilinear'", "or", "mode", "==", "'nearest'", "else", "1", "\n", "self", ".", "down4", "=", "Down", "(", "n", "*", "8", ",", "n", "*", "16", "//", "factor", ",", "ndim", "=", "ndim", ")", "\n", "self", ".", "up1", "=", "Up", "(", "n", "*", "16", ",", "n", "*", "8", "//", "factor", ",", "mode", ",", "ndim", "=", "ndim", ")", "\n", "self", ".", "up2", "=", "Up", "(", "n", "*", "8", ",", "n", "*", "4", "//", "factor", ",", "mode", ",", "ndim", "=", "ndim", ")", "\n", "self", ".", "up3", "=", "Up", "(", "n", "*", "4", ",", "n", "*", "2", "//", "factor", ",", "mode", ",", "ndim", "=", "ndim", ")", "\n", "self", ".", "up4", "=", "Up", "(", "n", "*", "2", ",", "n", ",", "mode", ",", "ndim", "=", "ndim", ")", "\n", "self", ".", "outc", "=", "OutConv", "(", "n", ",", "n_output_channels", ",", "ndim", "=", "ndim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.models.unet.UNet.forward": [[30, 44], ["unet.UNet.inc", "unet.UNet.down1", "unet.UNet.down2", "unet.UNet.down3", "unet.UNet.down4", "unet.UNet.up1", "unet.UNet.up2", "unet.UNet.up3", "unet.UNet.up4", "unet.UNet.outc"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x0", ")", ":", "\n", "\n", "        ", "x1", "=", "self", ".", "inc", "(", "x0", ")", "\n", "x2", "=", "self", ".", "down1", "(", "x1", ")", "\n", "x3", "=", "self", ".", "down2", "(", "x2", ")", "\n", "x4", "=", "self", ".", "down3", "(", "x3", ")", "\n", "x5", "=", "self", ".", "down4", "(", "x4", ")", "\n", "x", "=", "self", ".", "up1", "(", "x5", ",", "x4", ")", "\n", "x", "=", "self", ".", "up2", "(", "x", ",", "x3", ")", "\n", "x", "=", "self", ".", "up3", "(", "x", ",", "x2", ")", "\n", "x", "=", "self", ".", "up4", "(", "x", ",", "x1", ")", "\n", "x", "=", "self", ".", "outc", "(", "x", ")", "\n", "\n", "return", "x", "+", "x0", "if", "self", ".", "residual", "else", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.models.unet.UNet.post_optimisation": [[45, 62], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.conv2d", "torch.conv2d", "torch.conv2d", "numpy.array", "kernel[].astype", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "torch.from_numpy().to", "unet.UNet.kernel.sum", "unet.UNet.kernel.expand", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["None"], ["", "def", "post_optimisation", "(", "self", ")", ":", "\n", "        ", "b", "=", "1e-5", "\n", "if", "self", ".", "kernel_regularisation", ":", "\n", "            ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "weights", "=", "self", ".", "outc", ".", "conv", ".", "_parameters", "[", "'weight'", "]", "\n", "num_channels", "=", "weights", ".", "shape", "[", "1", "]", "\n", "if", "self", ".", "kernel", "is", "None", ":", "\n", "                    ", "kernel", "=", "numpy", ".", "array", "(", "[", "[", "b", ",", "b", ",", "b", "]", ",", "[", "b", ",", "1", ",", "b", "]", ",", "[", "b", ",", "b", ",", "b", "]", "]", ")", "\n", "kernel", "=", "kernel", "[", "numpy", ".", "newaxis", ",", "numpy", ".", "newaxis", ",", "...", "]", ".", "astype", "(", "\n", "numpy", ".", "float32", "\n", ")", "\n", "self", ".", "kernel", "=", "torch", ".", "from_numpy", "(", "kernel", ")", ".", "to", "(", "weights", ".", "device", ")", "\n", "self", ".", "kernel", "/=", "self", ".", "kernel", ".", "sum", "(", ")", "\n", "self", ".", "kernel", "=", "self", ".", "kernel", ".", "expand", "(", "num_channels", ",", "1", ",", "-", "1", ",", "-", "1", ")", "\n", "\n", "", "weights", "=", "F", ".", "conv2d", "(", "weights", ",", "self", ".", "kernel", ",", "groups", "=", "num_channels", ",", "padding", "=", "1", ")", "\n", "self", ".", "outc", ".", "conv", ".", "_parameters", "[", "'weight'", "]", "=", "weights", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.models.unet.DoubleConv.__init__": [[68, 90], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.BatchNorm3d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.royerlab_ssi-code.optimisers.esadam.ESAdam.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "mid_channels", "=", "None", ",", "ndim", "=", "2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "if", "not", "mid_channels", ":", "\n", "            ", "mid_channels", "=", "out_channels", "\n", "\n", "", "if", "ndim", "==", "2", ":", "\n", "            ", "self", ".", "double_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "in_channels", ",", "mid_channels", ",", "kernel_size", "=", "5", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "mid_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv2d", "(", "mid_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n", "", "elif", "ndim", "==", "3", ":", "\n", "            ", "self", ".", "double_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv3d", "(", "in_channels", ",", "mid_channels", ",", "kernel_size", "=", "5", ",", "padding", "=", "2", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "mid_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Conv3d", "(", "mid_channels", ",", "out_channels", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ")", ",", "\n", "nn", ".", "BatchNorm3d", "(", "out_channels", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.models.unet.DoubleConv.forward": [[92, 94], ["unet.DoubleConv.double_conv"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "double_conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.models.unet.Down.__init__": [[99, 104], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "unet.DoubleConv", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool3d", "torch.MaxPool3d", "torch.MaxPool3d"], "methods", ["home.repos.pwc.inspect_result.royerlab_ssi-code.optimisers.esadam.ESAdam.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "ndim", "=", "2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "maxpool_conv", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "MaxPool2d", "(", "2", ")", "if", "ndim", "==", "2", "else", "(", "nn", ".", "MaxPool3d", "(", "2", ")", "if", "ndim", "==", "3", "else", "None", ")", ",", "\n", "DoubleConv", "(", "in_channels", ",", "out_channels", ",", "ndim", "=", "ndim", ")", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.models.unet.Down.forward": [[106, 108], ["unet.Down.maxpool_conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "maxpool_conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.models.unet.Up.__init__": [[113, 123], ["torch.Module.__init__", "torch.Upsample", "torch.Upsample", "torch.Upsample", "unet.DoubleConv", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "torch.ConvTranspose2d", "unet.DoubleConv"], "methods", ["home.repos.pwc.inspect_result.royerlab_ssi-code.optimisers.esadam.ESAdam.__init__"], ["def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "mode", "=", "'bilinear'", ",", "ndim", "=", "2", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "# if bilinear, use the normal convolutions to reduce the number of channels", "\n", "if", "mode", "==", "'bilinear'", "or", "mode", "==", "'nearest'", ":", "\n", "            ", "self", ".", "up", "=", "nn", ".", "Upsample", "(", "scale_factor", "=", "2", ",", "mode", "=", "mode", ",", "align_corners", "=", "True", "if", "mode", "==", "'bilinear'", "else", "None", ")", "\n", "self", ".", "conv", "=", "DoubleConv", "(", "in_channels", ",", "out_channels", ",", "in_channels", "//", "2", ",", "ndim", "=", "ndim", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "up", "=", "nn", ".", "ConvTranspose2d", "(", "in_channels", ",", "in_channels", "//", "2", ",", "kernel_size", "=", "2", ",", "stride", "=", "2", ")", "\n", "self", ".", "conv", "=", "DoubleConv", "(", "in_channels", ",", "out_channels", ",", "ndim", "=", "ndim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.models.unet.Up.forward": [[124, 134], ["unet.Up.up", "torch.pad", "torch.pad", "torch.pad", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "unet.Up.conv", "x2.size", "torch.pad.size", "x2.size", "torch.pad.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x1", ",", "x2", ")", ":", "\n", "        ", "x1", "=", "self", ".", "up", "(", "x1", ")", "\n", "# input is CHW", "\n", "diffY", "=", "x2", ".", "size", "(", ")", "[", "2", "]", "-", "x1", ".", "size", "(", ")", "[", "2", "]", "\n", "diffX", "=", "x2", ".", "size", "(", ")", "[", "3", "]", "-", "x1", ".", "size", "(", ")", "[", "3", "]", "\n", "\n", "x1", "=", "F", ".", "pad", "(", "x1", ",", "[", "diffX", "//", "2", ",", "diffX", "-", "diffX", "//", "2", ",", "\n", "diffY", "//", "2", ",", "diffY", "-", "diffY", "//", "2", "]", ")", "\n", "x", "=", "torch", ".", "cat", "(", "[", "x2", ",", "x1", "]", ",", "dim", "=", "1", ")", "\n", "return", "self", ".", "conv", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.models.unet.OutConv.__init__": [[137, 143], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv3d", "torch.Conv3d", "torch.Conv3d"], "methods", ["home.repos.pwc.inspect_result.royerlab_ssi-code.optimisers.esadam.ESAdam.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_channels", ",", "out_channels", ",", "ndim", "=", "2", ")", ":", "\n", "        ", "super", "(", "OutConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "if", "ndim", "==", "2", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "", "elif", "ndim", "==", "3", ":", "\n", "            ", "self", ".", "conv", "=", "nn", ".", "Conv3d", "(", "in_channels", ",", "out_channels", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ",", "bias", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.models.unet.OutConv.forward": [[144, 146], ["unet.OutConv.conv"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "conv", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.royerlab_ssi-code.models.psf_convolution.PSFConvolutionLayer2D.__init__": [[6, 23], ["torch.nn.Module.__init__", "torch.nn.Sequential", "psf_convolution.PSFConvolutionLayer2D.weights_init", "torch.nn.ReflectionPad2d", "torch.nn.Conv2d"], "methods", ["home.repos.pwc.inspect_result.royerlab_ssi-code.optimisers.esadam.ESAdam.__init__", "home.repos.pwc.inspect_result.royerlab_ssi-code.models.psf_convolution.PSFConvolutionLayer3D.weights_init"], ["    ", "def", "__init__", "(", "self", ",", "kernel_psf", ",", "num_channels", "=", "1", ")", ":", "\n", "        ", "kernel_size", "=", "kernel_psf", ".", "shape", "[", "0", "]", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "seq", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReflectionPad2d", "(", "(", "kernel_size", "-", "1", ")", "//", "2", ")", ",", "\n", "nn", ".", "Conv2d", "(", "\n", "num_channels", ",", "\n", "num_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ",", "\n", "groups", "=", "num_channels", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "self", ".", "weights_init", "(", "kernel_psf", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.models.psf_convolution.PSFConvolutionLayer2D.weights_init": [[24, 27], ["psf_convolution.PSFConvolutionLayer2D.named_parameters", "f.data.copy_", "torch.from_numpy"], "methods", ["None"], ["", "def", "weights_init", "(", "self", ",", "kernel_psf", ")", ":", "\n", "        ", "for", "name", ",", "f", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "            ", "f", ".", "data", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "kernel_psf", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.models.psf_convolution.PSFConvolutionLayer2D.forward": [[28, 30], ["psf_convolution.PSFConvolutionLayer2D.seq"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "seq", "(", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.models.psf_convolution.PSFConvolutionLayer3D.__init__": [[33, 50], ["torch.nn.Module.__init__", "torch.nn.Sequential", "psf_convolution.PSFConvolutionLayer3D.weights_init", "torch.nn.ReplicationPad3d", "torch.nn.Conv3d"], "methods", ["home.repos.pwc.inspect_result.royerlab_ssi-code.optimisers.esadam.ESAdam.__init__", "home.repos.pwc.inspect_result.royerlab_ssi-code.models.psf_convolution.PSFConvolutionLayer3D.weights_init"], ["    ", "def", "__init__", "(", "self", ",", "kernel_psf", ",", "num_channels", "=", "1", ")", ":", "\n", "        ", "kernel_size", "=", "kernel_psf", ".", "shape", "[", "0", "]", "\n", "super", "(", ")", ".", "__init__", "(", ")", "\n", "self", ".", "seq", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "ReplicationPad3d", "(", "(", "kernel_size", "-", "1", ")", "//", "2", ")", ",", "\n", "nn", ".", "Conv3d", "(", "\n", "num_channels", ",", "\n", "num_channels", ",", "\n", "kernel_size", ",", "\n", "stride", "=", "1", ",", "\n", "padding", "=", "0", ",", "\n", "bias", "=", "False", ",", "\n", "groups", "=", "num_channels", ",", "\n", ")", ",", "\n", ")", "\n", "\n", "self", ".", "weights_init", "(", "kernel_psf", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.models.psf_convolution.PSFConvolutionLayer3D.weights_init": [[51, 54], ["psf_convolution.PSFConvolutionLayer3D.named_parameters", "f.data.copy_", "torch.from_numpy"], "methods", ["None"], ["", "def", "weights_init", "(", "self", ",", "kernel_psf", ")", ":", "\n", "        ", "for", "name", ",", "f", "in", "self", ".", "named_parameters", "(", ")", ":", "\n", "            ", "f", ".", "data", ".", "copy_", "(", "torch", ".", "from_numpy", "(", "kernel_psf", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.models.psf_convolution.PSFConvolutionLayer3D.forward": [[55, 57], ["psf_convolution.PSFConvolutionLayer3D.seq"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "self", ".", "seq", "(", "x", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.royerlab_ssi-code.models.feedforward.FeedForward.__init__": [[6, 25], ["torch.Module.__init__", "range", "torch.ModuleList", "torch.ModuleList", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "feedforward.FeedForward.convs.append"], "methods", ["home.repos.pwc.inspect_result.royerlab_ssi-code.optimisers.esadam.ESAdam.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "n_input_channel", "=", "1", ",", "n_output_channel", "=", "1", ",", "depth", "=", "16", ",", "nic", "=", "16", ",", "kernel_size", "=", "5", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "convs", "=", "[", "]", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "depth", "-", "1", ")", ":", "\n", "            ", "in_channels", "=", "n_input_channel", "if", "i", "==", "0", "else", "nic", "\n", "conv", "=", "nn", ".", "Conv2d", "(", "\n", "in_channels", ",", "\n", "nic", ",", "\n", "kernel_size", "=", "kernel_size", ",", "\n", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "\n", ")", "\n", "self", ".", "convs", ".", "append", "(", "conv", ")", "\n", "\n", "", "self", ".", "convs", "=", "nn", ".", "ModuleList", "(", "self", ".", "convs", ")", "\n", "self", ".", "final_conv", "=", "nn", ".", "Conv2d", "(", "nic", ",", "n_output_channel", ",", "kernel_size", "=", "1", ",", "padding", "=", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.models.feedforward.FeedForward.forward": [[26, 46], ["feedforward.FeedForward.final_conv", "conv", "torch.leaky_relu", "torch.leaky_relu", "xn.append", "torch.max_pool2d", "torch.max_pool2d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x0", ")", ":", "\n", "\n", "        ", "x", "=", "x0", "\n", "\n", "xn", "=", "[", "]", "\n", "for", "conv", "in", "self", ".", "convs", ":", "\n", "            ", "x", "=", "conv", "(", "x", ")", "\n", "x", "=", "F", ".", "leaky_relu", "(", "x", ",", "negative_slope", "=", "0.01", ")", "\n", "xn", ".", "append", "(", "x", ")", "\n", "x", "=", "F", ".", "max_pool2d", "(", "x", ",", "kernel_size", "=", "3", ",", "padding", "=", "1", ",", "stride", "=", "1", ")", "\n", "\n", "", "y", "=", "xn", "[", "0", "]", "\n", "s", "=", "1", "\n", "for", "x", "in", "xn", "[", "1", ":", "]", ":", "\n", "            ", "y", "=", "y", "+", "s", "*", "x", "\n", "s", "*=", "0.5", "\n", "\n", "", "y", "=", "self", ".", "final_conv", "(", "y", ")", "\n", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.models.feedforward.FeedForward.enforce_blind_spot": [[47, 49], ["None"], "methods", ["None"], ["", "def", "enforce_blind_spot", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.models.feedforward.FeedForward.post_optimisation": [[50, 52], ["None"], "methods", ["None"], ["", "def", "post_optimisation", "(", "self", ")", ":", "\n", "        ", "pass", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.models.lucyrichardson.LucyRichardson.__init__": [[24, 49], ["torch.nn.Module.__init__", "psf_kernel.astype.astype.astype", "psf_kernel[].copy", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.from_numpy().float", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.nn.Parameter", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.royerlab_ssi-code.optimisers.esadam.ESAdam.__init__"], ["    ", "def", "__init__", "(", "\n", "self", ",", "psf_kernel", ",", "num_channels_in", "=", "1", ",", "num_channels_out", "=", "1", ",", "iterations", "=", "4", ",", "clip", "=", "True", "\n", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "clip", "=", "clip", "\n", "self", ".", "num_channels_out", "=", "num_channels_out", "\n", "self", ".", "num_channels_in", "=", "num_channels_in", "\n", "self", ".", "iterations", "=", "iterations", "\n", "\n", "self", ".", "psf_size", "=", "psf_kernel", ".", "shape", "[", "0", "]", "\n", "\n", "psf_kernel", "=", "psf_kernel", ".", "astype", "(", "numpy", ".", "float", ")", "\n", "kernel_psf_mirror", "=", "psf_kernel", "[", ":", ":", "-", "1", ",", ":", ":", "-", "1", "]", ".", "copy", "(", ")", "\n", "\n", "self", ".", "kernel_psf_tensor", "=", "torch", ".", "from_numpy", "(", "\n", "psf_kernel", "[", "numpy", ".", "newaxis", ",", "numpy", ".", "newaxis", ",", "...", "]", "\n", ")", ".", "float", "(", ")", "\n", "self", ".", "kernel_psf_mirror_tensor", "=", "torch", ".", "from_numpy", "(", "\n", "kernel_psf_mirror", "[", "numpy", ".", "newaxis", ",", "numpy", ".", "newaxis", ",", "...", "]", "\n", ")", ".", "float", "(", ")", "\n", "\n", "self", ".", "kernel_psf_tensor", "=", "torch", ".", "nn", ".", "Parameter", "(", "self", ".", "kernel_psf_tensor", ")", "\n", "self", ".", "kernel_psf_mirror_tensor", "=", "torch", ".", "nn", ".", "Parameter", "(", "\n", "self", ".", "kernel_psf_mirror_tensor", "\n", ")", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.models.lucyrichardson.LucyRichardson.forward": [[51, 70], ["range", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.ones_like", "torch.conv2d", "torch.conv2d", "im_deconv.clamp_", "torch.conv2d", "torch.conv2d"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\n", "        ", "im_deconv", "=", "0.5", "*", "torch", ".", "ones_like", "(", "x", ")", "\n", "\n", "for", "_", "in", "range", "(", "self", ".", "iterations", ")", ":", "\n", "            ", "convolved", "=", "F", ".", "conv2d", "(", "\n", "im_deconv", ",", "self", ".", "kernel_psf_tensor", ",", "padding", "=", "(", "self", ".", "psf_size", "-", "1", ")", "//", "2", "\n", ")", "\n", "relative_blur", "=", "x", "/", "convolved", "\n", "im_deconv", "=", "im_deconv", "*", "F", ".", "conv2d", "(", "\n", "relative_blur", ",", "\n", "self", ".", "kernel_psf_mirror_tensor", ",", "\n", "padding", "=", "(", "self", ".", "psf_size", "-", "1", ")", "//", "2", ",", "\n", ")", "\n", "\n", "", "if", "self", ".", "clip", ":", "\n", "            ", "im_deconv", ".", "clamp_", "(", "-", "1", ",", "1", ")", "\n", "\n", "", "return", "im_deconv", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.models.lucyrichardson.LucyRichardson.post_optimisation": [[71, 75], ["torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.min", "torch.min", "torch.min", "torch.min", "torch.sum", "torch.sum", "torch.sum", "torch.sum"], "methods", ["None"], ["", "def", "post_optimisation", "(", "self", ")", ":", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "self", ".", "kernel_psf_tensor", "+=", "torch", ".", "min", "(", "self", ".", "kernel_psf_tensor", ")", "\n", "self", ".", "kernel_psf_tensor", "/=", "torch", ".", "sum", "(", "self", ".", "kernel_psf_tensor", ")", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.royerlab_ssi-code.models.lucyrichardson.lucy_richardson_loss": [[7, 21], ["torch.conv2d", "torch.flip", "torch.flip", "list", "loss.abs", "torch.conv2d"], "function", ["None"], ["def", "lucy_richardson_loss", "(", "observed_image", ",", "candidate_image", ",", "psf_kernel", ",", "mask", "=", "None", ")", ":", "\n", "    ", "if", "mask", "is", "not", "None", ":", "\n", "        ", "candidate_image", "=", "candidate_image", "*", "mask", "\n", "\n", "", "padding", "=", "list", "(", "(", "x", "-", "1", ")", "//", "2", "for", "x", "in", "psf_kernel", ".", "shape", ")", "[", "-", "2", ":", "]", "\n", "convolved", "=", "F", ".", "conv2d", "(", "candidate_image", ",", "psf_kernel", ",", "padding", "=", "padding", ")", "\n", "kernel_psf_mirror", "=", "torch", ".", "flip", "(", "psf_kernel", ",", "(", "1", ",", "2", ")", ")", "\n", "loss", "=", "candidate_image", "*", "(", "\n", "F", ".", "conv2d", "(", "observed_image", "/", "convolved", ",", "kernel_psf_mirror", ",", "padding", "=", "padding", ")", "-", "1", "\n", ")", "\n", "\n", "loss", "=", "loss", ".", "abs", "(", ")", "*", "mask", "\n", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.models.masking.Masking.__init__": [[6, 12], ["torch.Module.__init__"], "methods", ["home.repos.pwc.inspect_result.royerlab_ssi-code.optimisers.esadam.ESAdam.__init__"], ["    ", "def", "__init__", "(", "self", ",", "module", ",", "density", "=", "0.1", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "module", ":", "nn", ".", "Module", "=", "module", "\n", "self", ".", "density", "=", "density", "\n", "self", ".", "mask", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.models.masking.Masking.forward": [[13, 18], ["masking.Masking.module", "torch.rand_like", "torch.rand_like", "torch.rand_like", "torch.rand_like"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "self", ".", "mask", "=", "torch", ".", "rand_like", "(", "x", ")", "<", "self", ".", "density", "\n", "x", "=", "(", "~", "self", ".", "mask", ")", "*", "x", "\n", "x", "=", "self", ".", "module", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.models.masking.Masking.get_mask": [[19, 21], ["None"], "methods", ["None"], ["", "def", "get_mask", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "mask", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.models.masking.Masking.trainable_parameters": [[22, 24], ["masking.Masking.module.trainable_parameters"], "methods", ["home.repos.pwc.inspect_result.royerlab_ssi-code.models.masking.Masking.trainable_parameters"], ["", "def", "trainable_parameters", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "module", ".", "trainable_parameters", "(", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.royerlab_ssi-code.optimisers.esadam.ESAdam.__init__": [[11, 16], ["torch.optim.Adam.__init__"], "methods", ["home.repos.pwc.inspect_result.royerlab_ssi-code.optimisers.esadam.ESAdam.__init__"], ["def", "__init__", "(", "self", ",", "params", ",", "start_noise_level", "=", "0.001", ",", "**", "kwargs", ")", ":", "\n", "        ", "super", "(", ")", ".", "__init__", "(", "params", ",", "**", "kwargs", ")", "\n", "\n", "self", ".", "start_noise_level", "=", "start_noise_level", "\n", "self", ".", "step_counter", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.optimisers.esadam.ESAdam.step": [[17, 45], ["super().step", "torch.randn_like"], "methods", ["home.repos.pwc.inspect_result.royerlab_ssi-code.optimisers.esadam.ESAdam.step"], ["", "def", "step", "(", "self", ",", "closure", "=", "None", ")", ":", "\n", "        ", "\"\"\"Performs a single optimization step.\n\n        Arguments:\n            closure (callable, optional): A closure that reevaluates the model\n                and returns the loss.\n        \"\"\"", "\n", "loss", "=", "super", "(", ")", ".", "step", "(", "closure", ")", "\n", "\n", "for", "group", "in", "self", ".", "param_groups", ":", "\n", "            ", "for", "p", "in", "group", "[", "'params'", "]", ":", "\n", "                ", "if", "p", ".", "grad", "is", "None", ":", "\n", "                    ", "continue", "\n", "", "grad", ":", "torch", ".", "Tensor", "=", "p", ".", "grad", ".", "data", "\n", "if", "grad", ".", "is_sparse", ":", "\n", "                    ", "continue", "\n", "\n", "", "step_size", "=", "group", "[", "'lr'", "]", "\n", "\n", "p", ".", "data", "+=", "(", "\n", "step_size", "\n", "*", "(", "self", ".", "start_noise_level", "/", "(", "1", "+", "self", ".", "step_counter", ")", ")", "\n", "*", "(", "torch", ".", "randn_like", "(", "p", ".", "data", ")", ")", "\n", ")", "\n", "\n", "", "", "self", ".", "step_counter", "+=", "1", "\n", "\n", "return", "loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.royerlab_ssi-code.benchmark.spectral.fft_mirror": [[6, 20], ["numpy.flip", "numpy.flip", "numpy.flip", "numpy.block", "scipy.signal.tukey", "scipy.signal.tukey", "scipy.signal.tukey", "scipy.signal.tukey", "numpy.sqrt", "numpy.outer"], "function", ["None"], ["def", "fft_mirror", "(", "image", ")", ":", "\n", "    ", "flipx", "=", "numpy", ".", "flip", "(", "image", ",", "axis", "=", "1", ")", "\n", "flipy", "=", "numpy", ".", "flip", "(", "image", ",", "axis", "=", "0", ")", "\n", "flipxy", "=", "numpy", ".", "flip", "(", "flipx", ",", "axis", "=", "0", ")", "\n", "\n", "image_mirrored", "=", "numpy", ".", "block", "(", "[", "[", "flipxy", ",", "flipy", ",", "flipxy", "]", ",", "[", "flipx", ",", "image", ",", "flipx", "]", ",", "[", "flipxy", ",", "flipy", ",", "flipxy", "]", "]", ")", "\n", "\n", "h0", "=", "scipy", ".", "signal", ".", "tukey", "(", "image_mirrored", ".", "shape", "[", "0", "]", ",", "alpha", "=", "0.3", ")", "\n", "h1", "=", "scipy", ".", "signal", ".", "tukey", "(", "image_mirrored", ".", "shape", "[", "1", "]", ",", "alpha", "=", "0.3", ")", "\n", "window", "=", "numpy", ".", "sqrt", "(", "numpy", ".", "outer", "(", "h0", ",", "h1", ")", ")", "\n", "\n", "image_mirrored_apodised", "=", "window", "*", "image_mirrored", "\n", "\n", "return", "image_mirrored_apodised", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.benchmark.spectral.spectrum": [[22, 32], ["spectral.fft_mirror", "numpy.fft.fftshift", "numpy.absolute", "numpy.fft.fft2", "numpy.log1p"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.benchmark.spectral.fft_mirror"], ["", "def", "spectrum", "(", "image", ",", "log", "=", "True", ")", ":", "\n", "    ", "image_mirror", "=", "fft_mirror", "(", "image", ")", "\n", "dft", "=", "numpy", ".", "fft", ".", "fftshift", "(", "numpy", ".", "fft", ".", "fft2", "(", "image_mirror", ")", ")", "\n", "dft_mod", "=", "numpy", ".", "absolute", "(", "dft", ")", "\n", "dft_mod", "=", "dft_mod", "*", "dft_mod", "\n", "if", "log", ":", "\n", "        ", "dft_mod_log", "=", "numpy", ".", "log1p", "(", "dft_mod", ")", "\n", "return", "dft_mod_log", ",", "image_mirror", "\n", "", "else", ":", "\n", "        ", "return", "dft_mod", ",", "image_mirror", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.benchmark.spectral.radial_profile": [[34, 44], ["numpy.indices", "numpy.sqrt", "numpy.rint", "r.astype.astype", "numpy.bincount", "numpy.bincount", "r.astype.ravel", "data.ravel", "r.astype.ravel"], "function", ["None"], ["", "", "def", "radial_profile", "(", "data", ",", "center", ")", ":", "\n", "    ", "y", ",", "x", "=", "numpy", ".", "indices", "(", "(", "data", ".", "shape", ")", ")", "\n", "r", "=", "numpy", ".", "sqrt", "(", "(", "x", "-", "center", "[", "0", "]", ")", "**", "2", "+", "(", "y", "-", "center", "[", "1", "]", ")", "**", "2", ")", "\n", "r", "=", "numpy", ".", "rint", "(", "r", ")", "\n", "r", "=", "r", ".", "astype", "(", "numpy", ".", "int", ")", "\n", "\n", "tbin", "=", "numpy", ".", "bincount", "(", "r", ".", "ravel", "(", ")", ",", "data", ".", "ravel", "(", ")", ")", "\n", "nr", "=", "numpy", ".", "bincount", "(", "r", ".", "ravel", "(", ")", ")", "\n", "radialprofile", "=", "tbin", "/", "nr", "\n", "return", "radialprofile", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.benchmark.spectral.smooth": [[46, 100], ["numpy.convolve", "ValueError", "ValueError", "ValueError", "numpy.ones", "eval", "eval.sum"], "function", ["None"], ["", "def", "smooth", "(", "x", ",", "window_len", "=", "11", ",", "window", "=", "'hanning'", ",", "mode", "=", "'valid'", ")", ":", "\n", "    ", "\"\"\"smooth the data using a window with requested size.\n\n    This method is based on the convolution of a scaled window with the signal.\n    The signal is prepared by introducing reflected copies of the signal\n    (with the window size) in both ends so that transient parts are minimized\n    in the begining and end part of the output signal.\n\n    input:\n        x: the input signal\n        window_len: the dimension of the smoothing window; should be an odd integer\n        window: the type of window from 'flat', 'hanning', 'hamming', 'bartlett', 'blackman'\n            flat window will produce a moving average smoothing.\n\n    output:\n        the smoothed signal\n\n    example:\n\n    t=linspace(-2,2,0.1)\n    x=sin(t)+randn(len(t))*0.1\n    y=smooth(x)\n\n    see also:\n\n    numpy.hanning, numpy.hamming, numpy.bartlett, numpy.blackman, numpy.convolve\n    scipy.signal.lfilter\n\n    TODO: the window parameter could be the window itself if an array instead of a string\n    NOTE: length(output) != length(input), to correct this: return y[(window_len/2-1):-(window_len/2)] instead of just y.\n    \"\"\"", "\n", "\n", "if", "x", ".", "ndim", "!=", "1", ":", "\n", "        ", "raise", "ValueError", "(", "\"smooth only accepts 1 dimension arrays.\"", ")", "\n", "\n", "", "if", "x", ".", "size", "<", "window_len", ":", "\n", "        ", "raise", "ValueError", "(", "\"Input vector needs to be bigger than window size.\"", ")", "\n", "\n", "", "if", "window_len", "<", "3", ":", "\n", "        ", "return", "x", "\n", "\n", "", "if", "not", "window", "in", "[", "'flat'", ",", "'hanning'", ",", "'hamming'", ",", "'bartlett'", ",", "'blackman'", "]", ":", "\n", "        ", "raise", "ValueError", "(", "\"Window is on of 'flat', 'hanning', 'hamming', 'bartlett', 'blackman'\"", ")", "\n", "\n", "", "s", "=", "numpy", ".", "r_", "[", "x", "[", "window_len", "-", "1", ":", "0", ":", "-", "1", "]", ",", "x", ",", "x", "[", "-", "2", ":", "-", "window_len", "-", "1", ":", "-", "1", "]", "]", "\n", "# print(len(s))", "\n", "if", "window", "==", "'flat'", ":", "# moving average", "\n", "        ", "w", "=", "numpy", ".", "ones", "(", "window_len", ",", "'d'", ")", "\n", "", "else", ":", "\n", "        ", "w", "=", "eval", "(", "'numpy.'", "+", "window", "+", "'(window_len)'", ")", "\n", "\n", "", "y", "=", "numpy", ".", "convolve", "(", "w", "/", "w", ".", "sum", "(", ")", ",", "s", ",", "mode", "=", "mode", ")", "\n", "y", "=", "y", "[", "(", "window_len", "//", "2", ")", ":", "-", "(", "window_len", "//", "2", ")", "]", "\n", "return", "y", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.benchmark.spectral.resolution_estimate": [[102, 135], ["spectral.spectrum", "spectral.radial_profile", "int", "int", "spectral.smooth", "numpy.maximum", "numpy.max", "range", "TheilSenRegressor().fit", "float", "numpy.median", "numpy.median", "numpy.abs", "numpy.linspace", "TheilSenRegressor"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.benchmark.spectral.spectrum", "home.repos.pwc.inspect_result.royerlab_ssi-code.benchmark.spectral.radial_profile", "home.repos.pwc.inspect_result.royerlab_ssi-code.benchmark.spectral.smooth"], ["", "def", "resolution_estimate", "(", "image", ",", "dc_cutoff", "=", "0.05", ",", "otf_cutoff", "=", "0.5", ",", "smooth_window_length", "=", "5", ")", ":", "\n", "    ", "spectrum_image", ",", "_", "=", "spectrum", "(", "image", ")", "\n", "length", "=", "spectrum_image", ".", "shape", "[", "0", "]", "\n", "spectrum_image_profile", "=", "radial_profile", "(", "spectrum_image", ",", "(", "length", "/", "2", ",", "length", "/", "2", ")", ")", "\n", "\n", "dc_cut_off_index", "=", "int", "(", "dc_cutoff", "*", "length", "/", "2", ")", "\n", "otf_cut_off_index", "=", "int", "(", "otf_cutoff", "*", "length", "/", "2", ")", "\n", "noise_floor", "=", "0.5", "*", "numpy", ".", "median", "(", "spectrum_image", "[", "0", ":", "(", "length", "-", "otf_cut_off_index", ")", ",", ":", "]", ")", "\n", "noise_floor", "+=", "0.5", "*", "numpy", ".", "median", "(", "spectrum_image", "[", ":", ",", "0", ":", "(", "length", "-", "otf_cut_off_index", ")", "]", ")", "\n", "\n", "corrected_profile", "=", "smooth", "(", "spectrum_image_profile", ",", "smooth_window_length", ")", "\n", "corrected_profile", "=", "numpy", ".", "maximum", "(", "corrected_profile", "-", "noise_floor", ",", "0", ")", "\n", "\n", "noise_robust_std", "=", "numpy", ".", "max", "(", "numpy", ".", "abs", "(", "corrected_profile", "[", "otf_cut_off_index", ":", "]", ")", ",", "axis", "=", "0", ")", "\n", "\n", "noise_cut_off_index", "=", "otf_cut_off_index", "\n", "for", "i", "in", "range", "(", "otf_cut_off_index", ",", "0", ",", "-", "1", ")", ":", "\n", "        ", "value", "=", "corrected_profile", "[", "i", "]", "\n", "if", "value", ">", "2", "*", "noise_robust_std", ":", "\n", "            ", "noise_cut_off_index", "=", "i", "\n", "break", "\n", "\n", "", "", "X", "=", "numpy", ".", "linspace", "(", "dc_cut_off_index", ",", "noise_cut_off_index", ",", "1", "+", "noise_cut_off_index", "-", "dc_cut_off_index", ")", "[", "...", ",", "numpy", ".", "newaxis", "]", "\n", "y", "=", "corrected_profile", "[", "dc_cut_off_index", ":", "noise_cut_off_index", "+", "1", "]", "\n", "from", "sklearn", ".", "linear_model", "import", "TheilSenRegressor", "\n", "reg", "=", "TheilSenRegressor", "(", "random_state", "=", "0", ")", ".", "fit", "(", "X", ",", "y", ")", "\n", "# print(reg.coef_)", "\n", "# print(reg.intercept_)", "\n", "# print(reg.score(X, y))", "\n", "\n", "resolution_limit", "=", "float", "(", "-", "reg", ".", "intercept_", "/", "reg", ".", "coef_", ")", "\n", "\n", "return", "spectrum_image", ",", "spectrum_image_profile", ",", "corrected_profile", ",", "resolution_limit", ",", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.benchmark.run_benchmark.save_png": [[21, 27], ["image.astype.copy", "image.astype.astype", "PIL.Image.fromarray", "PIL.Image.fromarray.save"], "function", ["None"], ["def", "save_png", "(", "filepath", ",", "image", ")", ":", "\n", "    ", "image", "=", "image", ".", "copy", "(", ")", "\n", "image", "*=", "255", "\n", "image", "=", "image", ".", "astype", "(", "numpy", ".", "uint8", ")", "\n", "img", "=", "fromarray", "(", "image", ")", "\n", "img", ".", "save", "(", "filepath", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.benchmark.run_benchmark.restore_ssi": [[29, 65], ["ssi.ssi_deconv.SSIDeconvolution", "time.time", "ssi.ssi_deconv.SSIDeconvolution.train", "time.time", "print", "time.time", "ssi.ssi_deconv.SSIDeconvolution.translate", "time.time", "print", "numpy.clip"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.base.ImageTranslatorBase.train", "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.base.ImageTranslatorBase.translate"], ["", "def", "restore_ssi", "(", "image", ",", "psf_kernel", ",", "masking", "=", "True", ")", ":", "\n", "    ", "it_deconv", "=", "SSIDeconvolution", "(", "\n", "max_epochs", "=", "3000", ",", "\n", "patience", "=", "300", ",", "\n", "batch_size", "=", "8", ",", "\n", "learning_rate", "=", "0.01", ",", "\n", "normaliser_type", "=", "'identity'", ",", "\n", "psf_kernel", "=", "psf_kernel", ",", "\n", "model_class", "=", "UNet", ",", "\n", "masking", "=", "True", ",", "\n", "masking_density", "=", "0.05", ",", "\n", "loss", "=", "'l2'", ",", "\n", "bounds_loss", "=", "0.1", ",", "\n", "sharpening", "=", "0", ",", "\n", "entropy", "=", "0", ",", "\n", "broaden_psf", "=", "1", ",", "\n", "num_channels", "=", "3", "if", "image", ".", "ndim", "==", "3", "else", "1", "\n", ")", "\n", "\n", "channel_dims", "=", "(", "False", ",", "False", ",", "True", ")", "if", "image", ".", "ndim", "==", "3", "else", "None", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "it_deconv", ".", "train", "(", "image", ",", "channel_dims", "=", "channel_dims", ",", "jinv", "=", "masking", ")", "\n", "stop", "=", "time", ".", "time", "(", ")", "\n", "train_time", "=", "stop", "-", "start", "\n", "print", "(", "f\"Training: elapsed time:  {train_time} \"", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "restored_image", "=", "it_deconv", ".", "translate", "(", "image", ",", "channel_dims", "=", "channel_dims", ")", "\n", "stop", "=", "time", ".", "time", "(", ")", "\n", "inf_time", "=", "stop", "-", "start", "\n", "print", "(", "f\"inference: elapsed time:  {inf_time} \"", ")", "\n", "\n", "restored_image", "=", "numpy", ".", "clip", "(", "restored_image", ",", "0", ",", "1", ")", "\n", "\n", "return", "restored_image", ",", "train_time", ",", "inf_time", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.benchmark.run_benchmark.restore_dl": [[67, 69], ["run_benchmark.restore_ssi"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.benchmark.run_benchmark.restore_ssi"], ["", "def", "restore_dl", "(", "image", ",", "psf_kernel", ")", ":", "\n", "    ", "return", "restore_ssi", "(", "image", ",", "psf_kernel", ",", "masking", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.benchmark.run_benchmark.restore_lr_low": [[71, 73], ["run_benchmark.restore_lr_"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.benchmark.run_benchmark.restore_lr_"], ["", "def", "restore_lr_low", "(", "image", ",", "psf_kernel", ")", ":", "\n", "    ", "return", "restore_lr_", "(", "image", ",", "psf_kernel", ",", "5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.benchmark.run_benchmark.restore_lr_mid": [[75, 77], ["run_benchmark.restore_lr_"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.benchmark.run_benchmark.restore_lr_"], ["", "def", "restore_lr_mid", "(", "image", ",", "psf_kernel", ")", ":", "\n", "    ", "return", "restore_lr_", "(", "image", ",", "psf_kernel", ",", "10", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.benchmark.run_benchmark.restore_lr_high": [[79, 81], ["run_benchmark.restore_lr_"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.benchmark.run_benchmark.restore_lr_"], ["", "def", "restore_lr_high", "(", "image", ",", "psf_kernel", ")", ":", "\n", "    ", "return", "restore_lr_", "(", "image", ",", "psf_kernel", ",", "20", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.benchmark.run_benchmark.restore_lr_": [[83, 100], ["ssi.lr_deconv.ImageTranslatorLRDeconv", "ssi.lr_deconv.ImageTranslatorLRDeconv.train", "time.time", "ssi.lr_deconv.ImageTranslatorLRDeconv.translate", "time.time", "print"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.base.ImageTranslatorBase.train", "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.base.ImageTranslatorBase.translate"], ["", "def", "restore_lr_", "(", "image", ",", "psf_kernel", ",", "num_iterations", ")", ":", "\n", "    ", "lr", "=", "ImageTranslatorLRDeconv", "(", "\n", "psf_kernel", "=", "psf_kernel", ",", "max_num_iterations", "=", "num_iterations", ",", "backend", "=", "\"cupy\"", "\n", ")", "\n", "\n", "channel_dims", "=", "(", "False", ",", "False", ",", "True", ")", "if", "image", ".", "ndim", "==", "3", "else", "None", "\n", "\n", "lr", ".", "train", "(", "image", ",", "channel_dims", "=", "channel_dims", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "restored_image", "=", "lr", ".", "translate", "(", "image", ",", "channel_dims", "=", "channel_dims", ")", "\n", "stop", "=", "time", ".", "time", "(", ")", "\n", "\n", "inference_time", "=", "stop", "-", "start", "\n", "print", "(", "f\"Inference: elapsed time:  {inference_time} \"", ")", "\n", "\n", "return", "restored_image", ",", "0", ",", "inference_time", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.benchmark.run_benchmark.restore_tv_cg": [[102, 118], ["time.time", "ssi.tv_restoration.conjugate_gradient.cg_restoration", "time.time", "print", "restored_image.astype.clip", "restored_image.astype.astype"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.conjugate_gradient.cg_restoration"], ["", "def", "restore_tv_cg", "(", "image", ",", "psf_kernel", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "restored_image", "=", "cg_restoration", "(", "image", ",", "\n", "kernel", "=", "psf_kernel", ",", "\n", "num_iterations", "=", "100", ",", "\n", "lmbda", "=", "4.5e-3", ",", "\n", "mu", "=", "1e-10", ")", "\n", "stop", "=", "time", ".", "time", "(", ")", "\n", "\n", "inference_time", "=", "stop", "-", "start", "\n", "print", "(", "f\"Inference: elapsed time:  {inference_time} \"", ")", "\n", "\n", "restored_image", "=", "restored_image", ".", "clip", "(", "0", ",", "1", ")", "\n", "restored_image", "=", "restored_image", ".", "astype", "(", "numpy", ".", "float32", ")", "\n", "\n", "return", "restored_image", ",", "0", ",", "inference_time", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.benchmark.run_benchmark.restore_tv_cp": [[120, 135], ["time.time", "ssi.tv_restoration.chambole_pock.cp_restoration", "time.time", "print", "restored_image.astype.clip", "restored_image.astype.astype"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.tv_restoration.chambole_pock.cp_restoration"], ["", "def", "restore_tv_cp", "(", "image", ",", "psf_kernel", ")", ":", "\n", "    ", "start", "=", "time", ".", "time", "(", ")", "\n", "restored_image", "=", "cp_restoration", "(", "image", ",", "\n", "kernel", "=", "psf_kernel", ",", "\n", "num_iterations", "=", "200", ",", "\n", "beta", "=", "2.5e-3", ")", "\n", "stop", "=", "time", ".", "time", "(", ")", "\n", "\n", "inference_time", "=", "stop", "-", "start", "\n", "print", "(", "f\"Inference: elapsed time:  {inference_time} \"", ")", "\n", "\n", "restored_image", "=", "restored_image", ".", "clip", "(", "0", ",", "1", ")", "\n", "restored_image", "=", "restored_image", ".", "astype", "(", "numpy", ".", "float32", ")", "\n", "\n", "return", "restored_image", ",", "0", ",", "inference_time", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.benchmark.run_benchmark.benchmark_on_image": [[137, 233], ["ssi.utils.io.datasets.normalise", "os.path.join", "numpy.save", "ssi.utils.io.datasets.add_microscope_blur_2d", "ssi.utils.io.datasets.add_poisson_gaussian_noise", "os.path.join", "numpy.save", "os.path.join", "run_benchmark.save_png", "os.path.join", "run_benchmark.save_png", "print", "ssi.utils.io.datasets.normalise.astype", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "open", "open", "ssi.utils.metrics.image_metrics.psnr", "ssi.utils.metrics.image_metrics.ssim", "ssi.utils.metrics.image_metrics.mutual_information", "ssi.utils.metrics.image_metrics.spectral_mutual_information", "ssi.utils.metrics.image_metrics.psnr", "ssi.utils.metrics.image_metrics.ssim", "ssi.utils.metrics.image_metrics.mutual_information", "ssi.utils.metrics.image_metrics.spectral_mutual_information", "scores_file.write", "scores_file.write", "print", "run_benchmark.benchmark_on_image.printscore"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.normalise", "home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.add_microscope_blur_2d", "home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.add_poisson_gaussian_noise", "home.repos.pwc.inspect_result.royerlab_ssi-code.benchmark.run_benchmark.save_png", "home.repos.pwc.inspect_result.royerlab_ssi-code.benchmark.run_benchmark.save_png", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.psnr", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.ssim", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.mutual_information", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.spectral_mutual_information", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.psnr", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.ssim", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.mutual_information", "home.repos.pwc.inspect_result.royerlab_ssi-code.metrics.image_metrics.spectral_mutual_information", "home.repos.pwc.inspect_result.royerlab_ssi-code.demo.demo2D.printscore"], ["", "def", "benchmark_on_image", "(", "run_name", ",", "folder", ",", "image_name", ",", "image", ",", "methods", ")", ":", "\n", "    ", "def", "printscore", "(", "header", ",", "val1", ",", "val2", ",", "val3", ",", "val4", ")", ":", "\n", "        ", "print", "(", "f\"{header}: \\t {val1:.4f} \\t {val2:.4f} \\t {val3:.4f} \\t {val4:.4f}\"", ")", "\n", "\n", "", "image", "=", "normalise", "(", "image", ".", "astype", "(", "numpy", ".", "float32", ")", ")", "\n", "\n", "gt_numpy_filepath", "=", "join", "(", "join", "(", "folder", ",", "'gt_numpy'", ")", ",", "f'{image_name}'", "+", "'.npy'", ")", "\n", "numpy", ".", "save", "(", "gt_numpy_filepath", ",", "image", ")", "\n", "\n", "blurred_image", ",", "psf_kernel", "=", "add_microscope_blur_2d", "(", "image", ",", "multi_channel", "=", "image", ".", "ndim", "==", "3", ")", "\n", "\n", "noisy_blurred_image", "=", "add_poisson_gaussian_noise", "(", "blurred_image", ",", "alpha", "=", "0.001", ",", "sigma", "=", "0.1", ",", "sap", "=", "0.01", ",", "quant_bits", "=", "10", ")", "\n", "\n", "blurrynoisy_numpy_filepath", "=", "join", "(", "join", "(", "folder", ",", "'blurrynoisy_numpy'", ")", ",", "f'{image_name}'", "+", "'.npy'", ")", "\n", "numpy", ".", "save", "(", "blurrynoisy_numpy_filepath", ",", "noisy_blurred_image", ")", "\n", "\n", "blurry_filepath", "=", "join", "(", "join", "(", "folder", ",", "'blurry'", ")", ",", "image_name", ")", "\n", "save_png", "(", "blurry_filepath", ",", "blurred_image", ")", "\n", "\n", "blurrynoisy_filepath", "=", "join", "(", "join", "(", "folder", ",", "'blurrynoisy'", ")", ",", "image_name", ")", "\n", "save_png", "(", "blurrynoisy_filepath", ",", "noisy_blurred_image", ")", "\n", "\n", "method_names", "=", "[", "method", ".", "__name__", "for", "method", "in", "methods", "]", "\n", "\n", "# We restore the images with all methods:", "\n", "\n", "restored_image_list", "=", "[", "]", "\n", "\n", "with", "open", "(", "join", "(", "folder", ",", "f\"timming_{run_name}.tsv\"", ")", ",", "\"a\"", ")", "as", "timming_file", ":", "\n", "\n", "        ", "for", "restore", "in", "methods", ":", "\n", "\n", "            ", "restored_cached_filepath", "=", "join", "(", "join", "(", "folder", ",", "'restored_cache_numpy'", ")", ",", "f'{run_name}_{restore.__name__}_'", "+", "image_name", "+", "'.npy'", ")", "\n", "\n", "if", "exists", "(", "restored_cached_filepath", ")", ":", "\n", "                ", "print", "(", "f\"File: {restored_cached_filepath} does exists: skipping restoration.\"", ")", "\n", "restored_image", "=", "numpy", ".", "load", "(", "restored_cached_filepath", ")", "\n", "", "else", ":", "\n", "                ", "print", "(", "f\"File: {restored_cached_filepath} does not exists, restoration started.\"", ")", "\n", "restored_image", ",", "train_time", ",", "inf_time", "=", "restore", "(", "noisy_blurred_image", ",", "psf_kernel", ")", "\n", "numpy", ".", "save", "(", "restored_cached_filepath", ",", "restored_image", ")", "\n", "timming_file", ".", "write", "(", "f\"{image_name}\\t{restore.__name__}\\t{train_time}\\t{inf_time}\\n\"", ")", "\n", "\n", "", "restored_image_list", ".", "append", "(", "restored_image", ")", "\n", "\n", "restored_filepath", "=", "join", "(", "join", "(", "folder", ",", "'restored'", ")", ",", "f'{run_name}_{restore.__name__}_'", "+", "image_name", ")", "\n", "save_png", "(", "restored_filepath", ",", "restored_image", ")", "\n", "\n", "# We compute scores:", "\n", "", "", "with", "open", "(", "join", "(", "folder", ",", "f\"scores_{run_name}.tsv\"", ")", ",", "\"a\"", ")", "as", "scores_file", ":", "\n", "\n", "        ", "blurred_psnr_value", "=", "psnr", "(", "image", ",", "blurred_image", ")", "\n", "blurred_ssim_value", "=", "ssim", "(", "image", ",", "blurred_image", ")", "\n", "blurred_mi_value", "=", "mutual_information", "(", "image", ",", "blurred_image", ")", "\n", "blurred_smi_value", "=", "spectral_mutual_information", "(", "image", ",", "blurred_image", ")", "\n", "\n", "noisy_blurred_psnr_value", "=", "psnr", "(", "image", ",", "noisy_blurred_image", ")", "\n", "noisy_blurred_ssim_value", "=", "ssim", "(", "image", ",", "noisy_blurred_image", ")", "\n", "noisy_blurred_mi_value", "=", "mutual_information", "(", "image", ",", "noisy_blurred_image", ")", "\n", "noisy_blurred_smi_value", "=", "spectral_mutual_information", "(", "image", ",", "noisy_blurred_image", ")", "\n", "\n", "scores_file", ".", "write", "(", "f\"{image_name}\\tblurry\\t{blurred_psnr_value}\\t{blurred_ssim_value}\\t{blurred_mi_value}\\t{blurred_smi_value}\\n\"", ")", "\n", "scores_file", ".", "write", "(", "f\"{image_name}\\tnoisy&blurred\\t{noisy_blurred_psnr_value}\\t{noisy_blurred_ssim_value}\\t{noisy_blurred_mi_value}\\t{noisy_blurred_smi_value}\\n\"", ")", "\n", "\n", "print", "(", "\"Below in order: PSNR, norm spectral mutual info, norm mutual info, SSIM: \"", ")", "\n", "printscore", "(", "\n", "\"blurry image                       \\t\\t: \"", ",", "\n", "blurred_psnr_value", ",", "\n", "blurred_ssim_value", ",", "\n", "blurred_mi_value", ",", "\n", "blurred_smi_value", ",", "\n", ")", "\n", "\n", "printscore", "(", "\n", "\"noisy and blurry image             \\t\\t: \"", ",", "\n", "noisy_blurred_psnr_value", ",", "\n", "noisy_blurred_ssim_value", ",", "\n", "noisy_blurred_mi_value", ",", "\n", "noisy_blurred_smi_value", ",", "\n", ")", "\n", "\n", "for", "restore", "in", "methods", ":", "\n", "            ", "restored_filepath", "=", "join", "(", "join", "(", "folder", ",", "'restored_cache_numpy'", ")", ",", "f'{run_name}_{restore.__name__}_'", "+", "image_name", "+", "'.npy'", ")", "\n", "restored_image", "=", "numpy", ".", "load", "(", "restored_filepath", ")", "\n", "\n", "psnr_value", "=", "psnr", "(", "image", ",", "restored_image", ")", "\n", "ssim_value", "=", "ssim", "(", "image", ",", "restored_image", ")", "\n", "mi_value", "=", "mutual_information", "(", "image", ",", "restored_image", ")", "\n", "smi_value", "=", "spectral_mutual_information", "(", "image", ",", "restored_image", ")", "\n", "\n", "printscore", "(", "\n", "f\"restored with {restore.__name__}  \\t\\t: \"", ",", "\n", "psnr_value", ",", "ssim_value", ",", "mi_value", ",", "smi_value", "\n", ")", "\n", "\n", "scores_file", ".", "write", "(", "f\"{image_name}\\t{restore.__name__}\\t{psnr_value}\\t{ssim_value}\\t{mi_value}\\t{smi_value}\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.benchmark.run_benchmark.compute_averages": [[235, 363], ["list", "os.path.join", "os.path.exists", "list.insert", "list.insert", "os.path.join", "os.path.exists", "open", "csv.reader", "open", "timming_file.write", "open", "csv.reader", "open", "scores_file.write", "print", "method2train[].append", "method2inf[].append", "os.path.join", "numpy.mean", "numpy.mean", "timming_file.write", "print", "method2psnr[].append", "method2ssim[].append", "method2mi[].append", "method2smi[].append", "os.path.join", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "scores_file.write", "float", "float", "float", "float", "float", "float", "max", "max", "max", "max"], "function", ["None"], ["", "", "", "def", "compute_averages", "(", "run_name", ",", "folder", ",", "methods", ")", ":", "\n", "    ", "method_names", "=", "list", "(", "[", "method", ".", "__name__", "for", "method", "in", "methods", "]", ")", "\n", "\n", "desc", "=", "{", "'blurry'", ":", "'blurry'", ",", "\n", "'noisy&blurred'", ":", "'blurry\\&noisy (input)'", ",", "\n", "'restore_tv_cg'", ":", "'Conjugate Gradient TV'", ",", "\n", "'restore_tv_cp'", ":", "'Chambole Pock TV '", ",", "\n", "'restore_lr_low'", ":", "'Lucy Richardson $n=5$'", ",", "\n", "'restore_lr_mid'", ":", "'Lucy Richardson $n=10$'", ",", "\n", "'restore_lr_high'", ":", "'Lucy Richardson $n=20$'", ",", "\n", "'restore_dl'", ":", "'SSI UNet \\emph{no masking}'", ",", "\n", "'restore_ssi'", ":", "'SSI UNet'", ",", "\n", "}", "\n", "\n", "# We now compute average timings:", "\n", "method2train", "=", "{", "}", "\n", "method2inf", "=", "{", "}", "\n", "timming_tsv_filepath", "=", "join", "(", "folder", ",", "f\"timming_{run_name}.tsv\"", ")", "\n", "if", "exists", "(", "timming_tsv_filepath", ")", ":", "\n", "        ", "timming_tsv_file", "=", "open", "(", "timming_tsv_filepath", ")", "\n", "timming_tsv", "=", "csv", ".", "reader", "(", "timming_tsv_file", ",", "delimiter", "=", "\"\\t\"", ")", "\n", "\n", "for", "row", "in", "timming_tsv", ":", "\n", "            ", "print", "(", "row", ")", "\n", "method", "=", "row", "[", "1", "]", "\n", "train_time", "=", "row", "[", "2", "]", "\n", "inf_time", "=", "row", "[", "3", "]", "\n", "\n", "if", "method", "not", "in", "method2train", ":", "\n", "                ", "method2train", "[", "method", "]", "=", "[", "]", "\n", "\n", "", "if", "method", "not", "in", "method2inf", ":", "\n", "                ", "method2inf", "[", "method", "]", "=", "[", "]", "\n", "\n", "", "method2train", "[", "method", "]", ".", "append", "(", "float", "(", "train_time", ")", ")", "\n", "method2inf", "[", "method", "]", ".", "append", "(", "float", "(", "inf_time", ")", ")", "\n", "\n", "", "", "with", "open", "(", "join", "(", "folder", ",", "f\"timming_summary_{run_name}.csv\"", ")", ",", "\"w\"", ")", "as", "timming_file", ":", "\n", "        ", "timming_file", ".", "write", "(", "f\"method, training time, inference time\\n\"", ")", "\n", "for", "method_name", "in", "method_names", ":", "\n", "            ", "average_train_time", "=", "numpy", ".", "mean", "(", "method2train", "[", "method_name", "]", ")", "\n", "average_inf_time", "=", "numpy", ".", "mean", "(", "method2inf", "[", "method_name", "]", ")", "\n", "timming_file", ".", "write", "(", "f\"{desc[method_name]}, {average_train_time:.2f}, {average_inf_time:.2f}\\n\"", ")", "\n", "\n", "# We now compute average scores:", "\n", "\n", "", "", "method_names", ".", "insert", "(", "0", ",", "'noisy&blurred'", ")", "\n", "method_names", ".", "insert", "(", "0", ",", "'blurry'", ")", "\n", "\n", "method2psnr", "=", "{", "}", "\n", "method2ssim", "=", "{", "}", "\n", "method2mi", "=", "{", "}", "\n", "method2smi", "=", "{", "}", "\n", "scores_tsv_filepath", "=", "join", "(", "folder", ",", "f\"scores_{run_name}.tsv\"", ")", "\n", "if", "exists", "(", "scores_tsv_filepath", ")", ":", "\n", "        ", "scores_tsv_file", "=", "open", "(", "scores_tsv_filepath", ")", "\n", "scores_tsv", "=", "csv", ".", "reader", "(", "scores_tsv_file", ",", "delimiter", "=", "\"\\t\"", ")", "\n", "\n", "# psnr_value}\\t{ssim_value}\\t{mi_value}\\t{smi_value}", "\n", "\n", "for", "row", "in", "scores_tsv", ":", "\n", "            ", "print", "(", "row", ")", "\n", "method", "=", "row", "[", "1", "]", "\n", "psnr_value", "=", "row", "[", "2", "]", "\n", "ssim_value", "=", "row", "[", "3", "]", "\n", "mi_value", "=", "row", "[", "4", "]", "\n", "smi_value", "=", "row", "[", "5", "]", "\n", "\n", "if", "method", "not", "in", "method2psnr", ":", "\n", "                ", "method2psnr", "[", "method", "]", "=", "[", "]", "\n", "method2ssim", "[", "method", "]", "=", "[", "]", "\n", "method2mi", "[", "method", "]", "=", "[", "]", "\n", "method2smi", "[", "method", "]", "=", "[", "]", "\n", "\n", "", "method2psnr", "[", "method", "]", ".", "append", "(", "float", "(", "psnr_value", ")", ")", "\n", "method2ssim", "[", "method", "]", ".", "append", "(", "float", "(", "ssim_value", ")", ")", "\n", "method2mi", "[", "method", "]", ".", "append", "(", "float", "(", "mi_value", ")", ")", "\n", "method2smi", "[", "method", "]", ".", "append", "(", "float", "(", "smi_value", ")", ")", "\n", "\n", "", "", "with", "open", "(", "join", "(", "folder", ",", "f\"scores_summary_{run_name}.csv\"", ")", ",", "\"w\"", ")", "as", "scores_file", ":", "\n", "        ", "scores_file", ".", "write", "(", "f\"method, PSNR, SSIM, MI, SMI\\n\"", ")", "\n", "\n", "average_psnrs", "=", "{", "}", "\n", "average_ssims", "=", "{", "}", "\n", "average_mis", "=", "{", "}", "\n", "average_smis", "=", "{", "}", "\n", "\n", "max_psnr", "=", "-", "1", "\n", "max_ssim", "=", "-", "1", "\n", "max_mi", "=", "-", "1", "\n", "max_smi", "=", "-", "1", "\n", "\n", "for", "method_name", "in", "method_names", ":", "\n", "\n", "            ", "average_psnr", "=", "numpy", ".", "mean", "(", "method2psnr", "[", "method_name", "]", ")", "\n", "average_ssim", "=", "numpy", ".", "mean", "(", "method2ssim", "[", "method_name", "]", ")", "\n", "average_mi", "=", "numpy", ".", "mean", "(", "method2mi", "[", "method_name", "]", ")", "\n", "average_smi", "=", "numpy", ".", "mean", "(", "method2smi", "[", "method_name", "]", ")", "\n", "\n", "if", "method_name", "!=", "'blurry'", "and", "method_name", "!=", "'noisy&blurred'", ":", "\n", "                ", "max_psnr", "=", "max", "(", "max_psnr", ",", "average_psnr", ")", "\n", "max_ssim", "=", "max", "(", "max_ssim", ",", "average_ssim", ")", "\n", "max_mi", "=", "max", "(", "max_mi", ",", "average_mi", ")", "\n", "max_smi", "=", "max", "(", "max_smi", ",", "average_smi", ")", "\n", "\n", "", "average_psnrs", "[", "method_name", "]", "=", "average_psnr", "\n", "average_ssims", "[", "method_name", "]", "=", "average_ssim", "\n", "average_mis", "[", "method_name", "]", "=", "average_mi", "\n", "average_smis", "[", "method_name", "]", "=", "average_smi", "\n", "\n", "", "for", "method_name", "in", "method_names", ":", "\n", "            ", "average_psnr", "=", "average_psnrs", "[", "method_name", "]", "\n", "average_ssim", "=", "average_ssims", "[", "method_name", "]", "\n", "average_mi", "=", "average_mis", "[", "method_name", "]", "\n", "average_smi", "=", "average_smis", "[", "method_name", "]", "\n", "\n", "psnr", "=", "f'{average_psnr:.1f}'", "\n", "ssim", "=", "f'{average_ssim:.2f}'", "\n", "mi", "=", "f'{average_mi:.2f}'", "\n", "smi", "=", "f'{average_smi:.2f}'", "\n", "\n", "psnr", "=", "'\\\\textbf{'", "+", "psnr", "+", "'}'", "if", "average_psnr", "==", "max_psnr", "else", "psnr", "\n", "ssim", "=", "'\\\\textbf{'", "+", "ssim", "+", "'}'", "if", "average_ssim", "==", "max_ssim", "else", "ssim", "\n", "mi", "=", "'\\\\textbf{'", "+", "mi", "+", "'}'", "if", "average_mi", "==", "max_mi", "else", "mi", "\n", "smi", "=", "'\\\\textbf{'", "+", "smi", "+", "'}'", "if", "average_smi", "==", "max_smi", "else", "smi", "\n", "\n", "scores_file", ".", "write", "(", "f\"{desc[method_name]}, {psnr}, {ssim}, {mi}, {smi}\\n\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.benchmark.run_benchmark.compute_spectra": [[365, 396], ["os.path.join", "print", "os.path.join", "os.path.join", "numpy.load", "os.path.join", "os.path.join", "skimage.transform.resize", "matplotlib.image.imsave", "print", "run_benchmark.compute_spectra.compute_spectra_one_image"], "function", ["None"], ["", "", "", "def", "compute_spectra", "(", "folder", ",", "source_sub_folder", ",", "target_sub_folder", ",", "add_prefix", "=", "''", ")", ":", "\n", "    ", "images_folder", "=", "join", "(", "folder", ",", "source_sub_folder", ")", "\n", "files", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "images_folder", ")", "if", "isfile", "(", "join", "(", "images_folder", ",", "f", ")", ")", "]", "\n", "\n", "def", "compute_spectra_one_image", "(", "folder", ",", "source_sub_folder", ",", "image_name", ",", "target_sub_folder", ")", ":", "\n", "        ", "print", "(", "f\"Begin processsing file {image_name}\"", ")", "\n", "images_folder", "=", "join", "(", "folder", ",", "source_sub_folder", ")", "\n", "filepath", "=", "join", "(", "images_folder", ",", "image_name", ")", "\n", "image", "=", "numpy", ".", "load", "(", "filepath", ")", "\n", "\n", "spectrum_image_name_numpy", "=", "'spectrum_'", "+", "image_name", "\n", "spectrum_image_path_numpy", "=", "join", "(", "join", "(", "folder", ",", "target_sub_folder", "+", "'_numpy'", ")", ",", "spectrum_image_name_numpy", ")", "\n", "\n", "if", "not", "exists", "(", "spectrum_image_path_numpy", ")", ":", "\n", "            ", "spectrum_image", "=", "spectrum", "(", "image", ")", "[", "0", "]", "\n", "numpy", ".", "save", "(", "spectrum_image_path_numpy", ",", "spectrum_image", ")", "\n", "", "else", ":", "\n", "            ", "spectrum_image", "=", "numpy", ".", "load", "(", "spectrum_image_path_numpy", ")", "\n", "\n", "", "spectrum_image_name", "=", "'spectrum_'", "+", "add_prefix", "+", "image_name", ".", "replace", "(", "'.npy'", ",", "''", ")", "\n", "spectrum_image_path", "=", "join", "(", "join", "(", "folder", ",", "target_sub_folder", ")", ",", "spectrum_image_name", ")", "\n", "\n", "spectrum_image_resize", "=", "resize", "(", "spectrum_image", ",", "(", "512", ",", "512", ")", ",", "anti_aliasing", "=", "True", ")", "\n", "\n", "matplotlib", ".", "image", ".", "imsave", "(", "spectrum_image_path", ",", "spectrum_image_resize", ",", "cmap", "=", "'magma'", ",", "vmin", "=", "0", ",", "vmax", "=", "20", ")", "\n", "print", "(", "f\"End processsing file {image_name}\"", ")", "\n", "\n", "# Parallel(n_jobs=12) (delayed(compute_spectra_one_image)(folder, source_sub_folder, image_name, target_sub_folder) for image_name in files)", "\n", "# , prefer=\"threads\"", "\n", "", "for", "image_name", "in", "files", ":", "\n", "        ", "compute_spectra_one_image", "(", "folder", ",", "source_sub_folder", ",", "image_name", ",", "target_sub_folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.benchmark.run_benchmark.run_benchmark_on_folder": [[398, 407], ["os.path.join", "print", "os.path.join", "imageio.imread", "run_benchmark.benchmark_on_image", "os.listdir", "os.path.isfile", "os.path.join"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.benchmark.run_benchmark.benchmark_on_image"], ["", "", "def", "run_benchmark_on_folder", "(", "run_name", ",", "folder", ",", "methods", "=", "None", ")", ":", "\n", "    ", "gt_folder", "=", "join", "(", "folder", ",", "'gt'", ")", "\n", "files", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "gt_folder", ")", "if", "isfile", "(", "join", "(", "gt_folder", ",", "f", ")", ")", "and", "'.png'", "in", "f", "]", "\n", "\n", "for", "image_name", "in", "files", ":", "\n", "        ", "print", "(", "f\"Reading gt image: {image_name}\"", ")", "\n", "gt_filepath", "=", "join", "(", "gt_folder", ",", "image_name", ")", "\n", "image", "=", "imread", "(", "gt_filepath", ")", "\n", "benchmark_on_image", "(", "run_name", ",", "folder", ",", "image_name", ",", "image", ",", "methods", "=", "methods", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.benchmark.train_div2k.demo": [[12, 74], ["ssi.utils.io.datasets.add_microscope_blur_2d", "ssi.ssi_deconv.SSIDeconvolution", "time.time", "ssi.ssi_deconv.SSIDeconvolution.train", "time.time", "print", "time.time", "ssi.ssi_deconv.SSIDeconvolution.translate", "time.time", "print", "numpy.clip", "numpy.clip", "torch.save", "ssi.utils.io.datasets.add_poisson_gaussian_noise", "os.path.exists", "numpy.stack", "tifffile.imwrite", "tifffile.imread", "napari.gui_qt", "napari.Viewer", "napari.Viewer.add_image", "napari.Viewer.add_image", "napari.Viewer.add_image", "ssi.ssi_deconv.SSIDeconvolution.model.state_dict", "napari.gui_qt", "napari.Viewer", "napari.Viewer.add_image", "napari.Viewer.add_image", "napari.Viewer.add_image", "ssi.utils.io.datasets.add_microscope_blur_2d", "train_div2k.demo.degrade"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.add_microscope_blur_2d", "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.base.ImageTranslatorBase.train", "home.repos.pwc.inspect_result.royerlab_ssi-code.ssi.base.ImageTranslatorBase.translate", "home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.add_poisson_gaussian_noise", "home.repos.pwc.inspect_result.royerlab_ssi-code.io.datasets.add_microscope_blur_2d"], ["def", "demo", "(", "image", ")", ":", "\n", "    ", "image", "=", "image", "[", "0", ":", "512", "]", "\n", "\n", "_", ",", "psf_kernel", "=", "add_microscope_blur_2d", "(", "image", "[", "0", "]", ")", "\n", "\n", "def", "degrade", "(", "image", ")", ":", "\n", "        ", "blurred_image", "=", "add_microscope_blur_2d", "(", "image", ")", "[", "0", "]", "\n", "noisy_blurred_image", "=", "add_poisson_gaussian_noise", "(", "blurred_image", ",", "alpha", "=", "0.001", ",", "sigma", "=", "0.1", ",", "sap", "=", "0.0001", ",", "quant_bits", "=", "10", ",", "fix_seed", "=", "False", ")", "\n", "return", "noisy_blurred_image", "\n", "\n", "", "degraded_stack_filepath", "=", "\"/media/royer/data1/aydin_datasets/__benchmark_datasets/_DIV2K_train_HR/div2k_degraded.tiff\"", "\n", "if", "not", "exists", "(", "degraded_stack_filepath", ")", ":", "\n", "        ", "noisy_blurred_image", "=", "numpy", ".", "stack", "(", "[", "degrade", "(", "plane", ")", "for", "plane", "in", "image", "]", ")", "\n", "imwrite", "(", "degraded_stack_filepath", ",", "noisy_blurred_image", ")", "\n", "", "else", ":", "\n", "        ", "noisy_blurred_image", "=", "imread", "(", "degraded_stack_filepath", ")", "\n", "\n", "", "import", "napari", "\n", "\n", "with", "napari", ".", "gui_qt", "(", ")", ":", "\n", "        ", "viewer", "=", "napari", ".", "Viewer", "(", ")", "\n", "viewer", ".", "add_image", "(", "image", ",", "name", "=", "'image'", ")", "\n", "viewer", ".", "add_image", "(", "noisy_blurred_image", ",", "name", "=", "'noisy_blurred_image'", ")", "\n", "viewer", ".", "add_image", "(", "psf_kernel", ",", "name", "=", "'psf_kernel'", ")", "\n", "\n", "", "it_deconv", "=", "SSIDeconvolution", "(", "\n", "max_epochs", "=", "2000", ",", "\n", "patience", "=", "64", ",", "\n", "batch_size", "=", "1", ",", "\n", "learning_rate", "=", "0.01", ",", "\n", "normaliser_type", "=", "'identity'", ",", "\n", "psf_kernel", "=", "psf_kernel", ",", "\n", "model_class", "=", "UNet", ",", "\n", "masking", "=", "True", ",", "\n", "masking_density", "=", "0.05", ",", "\n", "loss", "=", "'l1'", "\n", ")", "\n", "\n", "batch_dim", "=", "(", "True", ",", "False", ",", "False", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "it_deconv", ".", "train", "(", "noisy_blurred_image", ",", "batch_dims", "=", "batch_dim", ")", "\n", "stop", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "f\"Training: elapsed time:  {stop - start} \"", ")", "\n", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "deconvolved_image", "=", "it_deconv", ".", "translate", "(", "noisy_blurred_image", ",", "batch_dims", "=", "batch_dim", ")", "\n", "stop", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "f\"inference: elapsed time:  {stop - start} \"", ")", "\n", "\n", "image", "=", "numpy", ".", "clip", "(", "image", ",", "0", ",", "1", ")", "\n", "deconvolved_image", "=", "numpy", ".", "clip", "(", "deconvolved_image", ",", "0", ",", "1", ")", "\n", "\n", "torch", ".", "save", "(", "it_deconv", ".", "model", ".", "state_dict", "(", ")", ",", "\"/media/royer/data1/aydin_datasets/__benchmark_datasets/_DIV2K_train_HR/div2k.unet.ptm\"", ")", "\n", "\n", "import", "napari", "\n", "\n", "with", "napari", ".", "gui_qt", "(", ")", ":", "\n", "        ", "viewer", "=", "napari", ".", "Viewer", "(", ")", "\n", "viewer", ".", "add_image", "(", "image", ",", "name", "=", "'image'", ")", "\n", "viewer", ".", "add_image", "(", "noisy_blurred_image", ",", "name", "=", "'noisy_blurred_image'", ")", "\n", "viewer", ".", "add_image", "(", "deconvolved_image", ",", "name", "=", "'ssi_deconvolved_image'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.figures.figure.find_files_in_folder": [[9, 15], ["list", "os.path.join", "os.listdir", "os.path.isfile", "os.path.join"], "function", ["None"], ["def", "find_files_in_folder", "(", "folder", ",", "name", ",", "exclude", "=", "None", ")", ":", "\n", "    ", "files", "=", "[", "f", "for", "f", "in", "listdir", "(", "folder", ")", "if", "isfile", "(", "join", "(", "folder", ",", "f", ")", ")", "]", "\n", "selected_files", "=", "[", "join", "(", "folder", ",", "f", ")", "for", "f", "in", "files", "if", "name", "in", "f", "]", "\n", "if", "exclude", "is", "not", "None", ":", "\n", "        ", "selected_files", "=", "[", "f", "for", "f", "in", "selected_files", "if", "exclude", "not", "in", "f", "]", "\n", "", "return", "list", "(", "selected_files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.figures.figure.collect": [[17, 21], ["os.path.basename", "shutil.copy", "os.path.join"], "function", ["None"], ["", "def", "collect", "(", "folder", ",", "filepaths", ",", "prepend", "=", "''", ")", ":", "\n", "    ", "for", "filepath", "in", "filepaths", ":", "\n", "        ", "filename", "=", "basename", "(", "filepath", ")", "\n", "copy", "(", "filepath", ",", "join", "(", "folder", ",", "prepend", "+", "filename", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.figures.figure.get_images": [[23, 32], ["figure.collect", "figure.collect", "figure.collect", "figure.collect", "figure.collect", "figure.collect", "figure.collect", "figure.find_files_in_folder", "figure.find_files_in_folder", "figure.find_files_in_folder", "figure.find_files_in_folder", "figure.find_files_in_folder", "figure.find_files_in_folder", "figure.find_files_in_folder", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "os.path.join"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.figures.figure.collect", "home.repos.pwc.inspect_result.royerlab_ssi-code.figures.figure.collect", "home.repos.pwc.inspect_result.royerlab_ssi-code.figures.figure.collect", "home.repos.pwc.inspect_result.royerlab_ssi-code.figures.figure.collect", "home.repos.pwc.inspect_result.royerlab_ssi-code.figures.figure.collect", "home.repos.pwc.inspect_result.royerlab_ssi-code.figures.figure.collect", "home.repos.pwc.inspect_result.royerlab_ssi-code.figures.figure.collect", "home.repos.pwc.inspect_result.royerlab_ssi-code.figures.figure.find_files_in_folder", "home.repos.pwc.inspect_result.royerlab_ssi-code.figures.figure.find_files_in_folder", "home.repos.pwc.inspect_result.royerlab_ssi-code.figures.figure.find_files_in_folder", "home.repos.pwc.inspect_result.royerlab_ssi-code.figures.figure.find_files_in_folder", "home.repos.pwc.inspect_result.royerlab_ssi-code.figures.figure.find_files_in_folder", "home.repos.pwc.inspect_result.royerlab_ssi-code.figures.figure.find_files_in_folder", "home.repos.pwc.inspect_result.royerlab_ssi-code.figures.figure.find_files_in_folder"], ["", "", "def", "get_images", "(", "folder", ",", "target_folder", ",", "name", ")", ":", "\n", "    ", "collect", "(", "target_folder", ",", "find_files_in_folder", "(", "join", "(", "folder", ",", "'gt'", ")", ",", "name", ")", ",", "prepend", "=", "'gt_'", ")", "\n", "collect", "(", "target_folder", ",", "find_files_in_folder", "(", "join", "(", "folder", ",", "'blurry'", ")", ",", "name", ")", ",", "prepend", "=", "'b_'", ")", "\n", "collect", "(", "target_folder", ",", "find_files_in_folder", "(", "join", "(", "folder", ",", "'blurrynoisy'", ")", ",", "name", ")", ",", "prepend", "=", "'bn_'", ")", "\n", "collect", "(", "target_folder", ",", "find_files_in_folder", "(", "join", "(", "folder", ",", "'restored'", ")", ",", "name", ")", ")", "\n", "\n", "collect", "(", "target_folder", ",", "find_files_in_folder", "(", "join", "(", "folder", ",", "'restored_spectra'", ")", ",", "name", ")", ")", "\n", "collect", "(", "target_folder", ",", "find_files_in_folder", "(", "join", "(", "folder", ",", "'gt_spectra'", ")", ",", "name", ")", ")", "\n", "collect", "(", "target_folder", ",", "find_files_in_folder", "(", "join", "(", "folder", ",", "'blurrynoisy_spectra'", ")", ",", "name", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.royerlab_ssi-code.figures.figure.crop_images": [[34, 51], ["figure.find_files_in_folder", "list", "zip", "os.path.basename", "print", "os.path.join", "imageio.imwrite", "imageio.imread"], "function", ["home.repos.pwc.inspect_result.royerlab_ssi-code.figures.figure.find_files_in_folder"], ["", "def", "crop_images", "(", "folder", ",", "name", ",", "crop_prefix", ",", "center", ",", "extent", ",", "exclude", "=", "None", ")", ":", "\n", "    ", "y", ",", "x", "=", "center", "\n", "h", ",", "w", "=", "extent", "\n", "slice", "=", "numpy", ".", "s_", "[", "y", "-", "h", ":", "y", "+", "h", ",", "x", "-", "w", ":", "x", "+", "w", "]", "\n", "\n", "files", "=", "find_files_in_folder", "(", "folder", ",", "name", ",", "exclude", "=", "crop_prefix", ")", "\n", "files_base_names", "=", "[", "basename", "(", "f", ")", "for", "f", "in", "files", "]", "\n", "\n", "images", "=", "list", "(", "[", "imread", "(", "f", ")", "for", "f", "in", "files", "]", ")", "\n", "\n", "for", "image", ",", "filename", "in", "zip", "(", "images", ",", "files_base_names", ")", ":", "\n", "        ", "print", "(", "f\"Cropping image: {filename} of size:{image.shape} with slice:{slice}\"", ")", "\n", "if", "exclude", "is", "not", "None", "and", "exclude", "in", "filename", ":", "\n", "            ", "continue", "\n", "", "image", "=", "image", "[", "slice", "]", "\n", "filepath", "=", "join", "(", "folder", ",", "crop_prefix", "+", "'_'", "+", "filename", ")", "\n", "imwrite", "(", "filepath", ",", "image", ")", "\n", "\n"]]}