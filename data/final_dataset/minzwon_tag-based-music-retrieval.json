{"home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.main.main": [[9, 31], ["solver.Solver", "pytorch_lightning.loggers.neptune.NeptuneLogger", "pytorch_lightning.callbacks.ModelCheckpoint", "pytorch_lightning.Trainer", "pytorch_lightning.Trainer.fit", "pytorch_lightning.Trainer.save_checkpoint", "os.path.join", "solver.Solver.model.load_state_dict", "pytorch_lightning.Trainer.test", "torch.load", "S.keys"], "function", ["None"], ["def", "main", "(", "config", ")", ":", "\n", "\t", "solver", "=", "Solver", "(", "config", ")", "\n", "logger", "=", "NeptuneLogger", "(", "project_name", "=", "config", ".", "neptune_project", ",", "api_key", "=", "config", ".", "neptune_api_key", ")", "\n", "checkpoint_callback", "=", "ModelCheckpoint", "(", "filepath", "=", "config", ".", "model_save_path", ",", "\n", "save_top_k", "=", "1", ",", "\n", "verbose", "=", "True", ",", "\n", "monitor", "=", "\"map\"", ",", "\n", "mode", "=", "\"max\"", ",", "\n", "prefix", "=", "\"\"", ")", "\n", "trainer", "=", "Trainer", "(", "default_root_dir", "=", "config", ".", "model_save_path", ",", "\n", "gpus", "=", "config", ".", "gpu_id", ",", "\n", "logger", "=", "logger", ",", "\n", "checkpoint_callback", "=", "checkpoint_callback", ",", "\n", "max_epochs", "=", "config", ".", "n_epochs", ")", "\n", "if", "config", ".", "mode", "==", "'TRAIN'", ":", "\n", "\t\t", "trainer", ".", "fit", "(", "solver", ")", "\n", "trainer", ".", "save_checkpoint", "(", "os", ".", "path", ".", "join", "(", "config", ".", "model_save_path", ",", "'last.ckpt'", ")", ")", "\n", "", "elif", "config", ".", "mode", "==", "'TEST'", ":", "\n", "\t\t", "S", "=", "torch", ".", "load", "(", "config", ".", "model_load_path", ")", "[", "'state_dict'", "]", "\n", "SS", "=", "{", "key", "[", "6", ":", "]", ":", "S", "[", "key", "]", "for", "key", "in", "S", ".", "keys", "(", ")", "}", "\n", "solver", ".", "model", ".", "load_state_dict", "(", "SS", ")", "\n", "trainer", ".", "test", "(", "solver", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.data_loader.MyDataset.__init__": [[12, 47], ["numpy.load", "data_loader.MyDataset.load_tag_emb", "pickle.load", "numpy.load", "data_loader.MyDataset.get_tag_binaries", "os.path.join", "numpy.load", "open", "os.path.join", "numpy.load", "os.path.join", "os.path.join", "os.path.join", "numpy.load", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.data_loader.MyDataset.load_tag_emb", "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.data_loader.MyDataset.get_tag_binaries"], ["\t", "def", "__init__", "(", "self", ",", "data_path", ",", "split", "=", "'TRAIN'", ",", "input_type", "=", "'spec'", ",", "input_length", "=", "None", ",", "num_chunk", "=", "16", ",", "w2v_type", "=", "'google'", ",", "is_balanced", "=", "True", ",", "is_subset", "=", "False", ")", ":", "\n", "\t\t", "self", ".", "data_path", "=", "data_path", "\n", "self", ".", "split", "=", "split", "\n", "self", ".", "input_type", "=", "input_type", "\n", "self", ".", "input_length", "=", "input_length", "\n", "self", ".", "num_chunk", "=", "num_chunk", "\n", "self", ".", "is_balanced", "=", "is_balanced", "\n", "self", ".", "w2v_type", "=", "w2v_type", "\n", "\n", "if", "is_subset", ":", "\n", "\t\t\t", "prefix", "=", "'sub_'", "\n", "", "else", ":", "\n", "\t\t\t", "prefix", "=", "''", "\n", "", "self", ".", "prefix", "=", "prefix", "\n", "\n", "\n", "# load ids", "\n", "if", "split", "==", "'TRAIN'", ":", "\n", "\t\t\t", "self", ".", "tag_to_ix", "=", "pickle", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "prefix", "+", "'train_tag_to_ix.pkl'", ")", ",", "'rb'", ")", ")", "\n", "self", ".", "train_ids", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "prefix", "+", "'train_ids.npy'", ")", ")", "\n", "self", ".", "get_tag_binaries", "(", ")", "\n", "", "elif", "split", "==", "'VALID'", ":", "\n", "\t\t\t", "self", ".", "eval_ids", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "prefix", "+", "'valid_ids.npy'", ")", ")", "\n", "", "elif", "split", "==", "'TEST'", ":", "\n", "\t\t\t", "self", ".", "eval_ids", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "prefix", "+", "'test_ids.npy'", ")", ")", "\n", "\n", "# load binaries", "\n", "", "self", ".", "ix_to_binary", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "prefix", "+", "'binaries.npy'", ")", ")", "\n", "\n", "# load tag embedding", "\n", "self", ".", "load_tag_emb", "(", ")", "\n", "\n", "# load collaborative filtering embedding", "\n", "if", "input_type", "!=", "'spec'", ":", "\n", "\t\t\t", "self", ".", "cf", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "prefix", "+", "'ix_to_cf.npy'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.data_loader.MyDataset.get_tag_binaries": [[48, 53], ["numpy.eye", "enumerate", "len", "data_loader.MyDataset.tag_to_ix.keys"], "methods", ["None"], ["", "", "def", "get_tag_binaries", "(", "self", ")", ":", "\n", "\t\t", "eye", "=", "np", ".", "eye", "(", "len", "(", "self", ".", "tag_to_ix", ")", ")", "\n", "self", ".", "tag_binaries", "=", "{", "}", "\n", "for", "i", ",", "tag", "in", "enumerate", "(", "self", ".", "tag_to_ix", ".", "keys", "(", ")", ")", ":", "\n", "\t\t\t", "self", ".", "tag_binaries", "[", "tag", "]", "=", "eye", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.data_loader.MyDataset.load_tag_emb": [[54, 57], ["numpy.load", "pickle.load", "os.path.join", "open", "os.path.join"], "methods", ["None"], ["", "", "def", "load_tag_emb", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "tags", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "self", ".", "prefix", "+", "'tags.npy'", ")", ")", "\n", "self", ".", "w2v", "=", "pickle", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "'%s_emb.pkl'", "%", "self", ".", "w2v_type", ")", ",", "'rb'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.data_loader.MyDataset.load_cf": [[58, 60], ["None"], "methods", ["None"], ["", "def", "load_cf", "(", "self", ",", "song_ix", ")", ":", "\n", "\t\t", "return", "self", ".", "cf", "[", "song_ix", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.data_loader.MyDataset.load_spec": [[61, 80], ["os.path.join", "numpy.load", "numpy.zeros", "int", "numpy.floor", "numpy.array", "numpy.random.random", "range"], "methods", ["None"], ["", "def", "load_spec", "(", "self", ",", "song_id", ")", ":", "\n", "\t\t", "fn", "=", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "'spec'", ",", "song_id", "[", "2", "]", ",", "song_id", "[", "3", "]", ",", "song_id", "[", "4", "]", ",", "song_id", "+", "'.npy'", ")", "\n", "length", "=", "self", ".", "input_length", "\n", "spec", "=", "np", ".", "load", "(", "fn", ")", "\n", "\n", "# for short spectrograms", "\n", "if", "spec", ".", "shape", "[", "1", "]", "<", "self", ".", "input_length", ":", "\n", "\t\t\t", "nspec", "=", "np", ".", "zeros", "(", "(", "128", ",", "self", ".", "input_length", ")", ")", "\n", "nspec", "[", ":", ",", ":", "spec", ".", "shape", "[", "1", "]", "]", "=", "spec", "\n", "spec", "=", "nspec", "\n", "\n", "# multiple chunks for validation loader", "\n", "", "if", "self", ".", "split", "==", "'TRAIN'", ":", "\n", "\t\t\t", "time_ix", "=", "int", "(", "np", ".", "floor", "(", "np", ".", "random", ".", "random", "(", "1", ")", "*", "(", "spec", ".", "shape", "[", "1", "]", "-", "length", ")", ")", ")", "\n", "spec", "=", "spec", "[", ":", ",", "time_ix", ":", "time_ix", "+", "length", "]", "\n", "", "elif", "(", "self", ".", "split", "==", "'VALID'", ")", "or", "(", "self", ".", "split", "==", "'TEST'", ")", ":", "\n", "\t\t\t", "hop", "=", "(", "spec", ".", "shape", "[", "1", "]", "-", "self", ".", "input_length", ")", "//", "self", ".", "num_chunk", "\n", "spec", "=", "np", ".", "array", "(", "[", "spec", "[", ":", ",", "i", "*", "hop", ":", "i", "*", "hop", "+", "self", ".", "input_length", "]", "for", "i", "in", "range", "(", "self", ".", "num_chunk", ")", "]", ")", "\n", "", "return", "spec", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.data_loader.MyDataset.load_hybrid": [[81, 85], ["data_loader.MyDataset.load_spec", "data_loader.MyDataset.load_cf"], "methods", ["home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.data_loader.MyDataset.load_spec", "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.data_loader.MyDataset.load_cf"], ["", "def", "load_hybrid", "(", "self", ",", "song_ix", ",", "song_id", ")", ":", "\n", "\t\t", "spec", "=", "self", ".", "load_spec", "(", "song_id", ")", "\n", "cf", "=", "self", ".", "load_cf", "(", "song_ix", ")", "\n", "return", "spec", ",", "cf", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.data_loader.MyDataset.get_train_item": [[86, 112], ["random.choice().split", "int", "random.choice().split", "int", "data_loader.MyDataset.load_spec", "numpy.array", "random.choices", "numpy.array", "data_loader.MyDataset.load_cf", "random.choice", "random.choice", "data_loader.MyDataset.load_hybrid", "len"], "methods", ["home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.preprocess.step1_data_split.Processor.split", "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.preprocess.step1_data_split.Processor.split", "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.data_loader.MyDataset.load_spec", "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.data_loader.MyDataset.load_cf", "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.data_loader.MyDataset.load_hybrid"], ["", "def", "get_train_item", "(", "self", ",", "index", ")", ":", "\n", "# song embedding", "\n", "\t\t", "if", "self", ".", "is_balanced", ":", "\n", "\t\t\t", "tag", "=", "self", ".", "tags", "[", "index", "%", "len", "(", "self", ".", "tags", ")", "]", "\n", "song_ix", ",", "song_id", "=", "random", ".", "choice", "(", "self", ".", "tag_to_ix", "[", "tag", "]", ")", ".", "split", "(", "'//'", ")", "\n", "song_ix", "=", "int", "(", "song_ix", ")", "\n", "song_binary", "=", "self", ".", "ix_to_binary", "[", "song_ix", "]", "\n", "", "else", ":", "\n", "\t\t\t", "song_ix", ",", "song_id", "=", "random", ".", "choice", "(", "self", ".", "train_ids", ")", ".", "split", "(", "'//'", ")", "\n", "song_ix", "=", "int", "(", "song_ix", ")", "\n", "song_binary", "=", "self", ".", "ix_to_binary", "[", "song_ix", "]", "\n", "tag", "=", "random", ".", "choices", "(", "self", ".", "tags", ",", "weights", "=", "song_binary", ",", "k", "=", "1", ")", "[", "0", "]", "\n", "\n", "# tag embedding", "\n", "", "tag_binary", "=", "self", ".", "tag_binaries", "[", "tag", "]", "\n", "tag_emb", "=", "self", ".", "w2v", "[", "tag", "]", "\n", "\n", "if", "self", ".", "input_type", "==", "'spec'", ":", "\n", "\t\t\t", "spec", "=", "self", ".", "load_spec", "(", "song_id", ")", "\n", "cf", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "", "elif", "self", ".", "input_type", "==", "'cf'", ":", "\n", "\t\t\t", "spec", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "cf", "=", "self", ".", "load_cf", "(", "song_ix", ")", "\n", "", "elif", "self", ".", "input_type", "==", "'hybrid'", ":", "\n", "\t\t\t", "spec", ",", "cf", "=", "self", ".", "load_hybrid", "(", "song_ix", ",", "song_id", ")", "\n", "", "return", "tag_emb", ",", "spec", ",", "cf", ",", "tag_binary", ",", "song_binary", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.data_loader.MyDataset.get_eval_item": [[113, 128], ["data_loader.MyDataset.eval_ids[].split", "int", "numpy.array", "numpy.array", "numpy.array", "data_loader.MyDataset.load_spec", "numpy.array", "numpy.array", "data_loader.MyDataset.load_cf", "data_loader.MyDataset.load_hybrid"], "methods", ["home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.preprocess.step1_data_split.Processor.split", "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.data_loader.MyDataset.load_spec", "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.data_loader.MyDataset.load_cf", "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.data_loader.MyDataset.load_hybrid"], ["", "def", "get_eval_item", "(", "self", ",", "index", ")", ":", "\n", "\t\t", "song_ix", ",", "song_id", "=", "self", ".", "eval_ids", "[", "index", "]", ".", "split", "(", "'//'", ")", "\n", "song_ix", "=", "int", "(", "song_ix", ")", "\n", "tag_emb", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "if", "self", ".", "input_type", "==", "'spec'", ":", "\n", "\t\t\t", "spec", "=", "self", ".", "load_spec", "(", "song_id", ")", "\n", "cf", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "", "elif", "self", ".", "input_type", "==", "'cf'", ":", "\n", "\t\t\t", "spec", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "cf", "=", "self", ".", "load_cf", "(", "song_ix", ")", "\n", "", "elif", "self", ".", "input_type", "==", "'hybrid'", ":", "\n", "\t\t\t", "spec", ",", "cf", "=", "self", ".", "load_hybrid", "(", "song_ix", ",", "song_id", ")", "\n", "", "song_binary", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "tag_binary", "=", "np", ".", "array", "(", "[", "]", ")", "\n", "return", "tag_emb", ",", "spec", ",", "cf", ",", "tag_binary", ",", "song_binary", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.data_loader.MyDataset.__getitem__": [[129, 135], ["data_loader.MyDataset.get_train_item", "tag_emb.astype", "spec.astype", "cf.astype", "data_loader.MyDataset.get_eval_item"], "methods", ["home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.data_loader.MyDataset.get_train_item", "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.data_loader.MyDataset.get_eval_item"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\t\t", "if", "self", ".", "split", "==", "'TRAIN'", ":", "\n", "\t\t\t", "tag_emb", ",", "spec", ",", "cf", ",", "tag_binary", ",", "song_binary", "=", "self", ".", "get_train_item", "(", "index", ")", "\n", "", "elif", "(", "self", ".", "split", "==", "'VALID'", ")", "or", "(", "self", ".", "split", "==", "'TEST'", ")", ":", "\n", "\t\t\t", "tag_emb", ",", "spec", ",", "cf", ",", "tag_binary", ",", "song_binary", "=", "self", ".", "get_eval_item", "(", "index", ")", "\n", "", "return", "tag_emb", ".", "astype", "(", "'float32'", ")", ",", "spec", ".", "astype", "(", "'float32'", ")", ",", "cf", ".", "astype", "(", "'float32'", ")", ",", "tag_binary", ",", "song_binary", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.data_loader.MyDataset.__len__": [[136, 141], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "\t\t", "if", "self", ".", "split", "==", "'TRAIN'", ":", "\n", "\t\t\t", "return", "10000", "\n", "", "elif", "(", "self", ".", "split", "==", "'VALID'", ")", "or", "(", "self", ".", "split", "==", "'TEST'", ")", ":", "\n", "\t\t\t", "return", "len", "(", "self", ".", "eval_ids", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.modules.Conv_2d.__init__": [[7, 13], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.MaxPool2d", "torch.MaxPool2d"], "methods", ["home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.preprocess.step3_taste_profile.Processor.__init__"], ["\t", "def", "__init__", "(", "self", ",", "input_channels", ",", "output_channels", ",", "shape", "=", "3", ",", "pooling", "=", "2", ")", ":", "\n", "\t\t", "super", "(", "Conv_2d", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "input_channels", ",", "output_channels", ",", "shape", ",", "padding", "=", "shape", "//", "2", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "output_channels", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "mp", "=", "nn", ".", "MaxPool2d", "(", "pooling", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.modules.Conv_2d.forward": [[14, 17], ["modules.Conv_2d.mp", "modules.Conv_2d.relu", "modules.Conv_2d.bn", "modules.Conv_2d.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "out", "=", "self", ".", "mp", "(", "self", ".", "relu", "(", "self", ".", "bn", "(", "self", ".", "conv", "(", "x", ")", ")", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.modules.Conv_emb.__init__": [[20, 25], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.preprocess.step3_taste_profile.Processor.__init__"], ["\t", "def", "__init__", "(", "self", ",", "input_channels", ",", "output_channels", ")", ":", "\n", "\t\t", "super", "(", "Conv_emb", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "input_channels", ",", "output_channels", ",", "1", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "output_channels", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.modules.Conv_emb.forward": [[26, 29], ["modules.Conv_emb.relu", "modules.Conv_emb.bn", "modules.Conv_emb.conv"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "out", "=", "self", ".", "relu", "(", "self", ".", "bn", "(", "self", ".", "conv", "(", "x", ")", ")", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.eval.Solver.__init__": [[16, 28], ["eval.Solver.load_model", "eval.Solver.load_test_files", "eval.Solver.model.cuda"], "methods", ["home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.eval.Solver.load_model", "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.eval.Solver.load_test_files"], ["\t", "def", "__init__", "(", "self", ",", "data_path", ",", "model_path", ",", "model_type", ",", "batch_size", ",", "w2v_type", "=", "'music'", ",", "is_cuda", "=", "True", ")", ":", "\n", "\t\t", "self", ".", "data_path", "=", "data_path", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "model_type", "=", "model_type", "\n", "self", ".", "w2v_type", "=", "w2v_type", "\n", "self", ".", "is_cuda", "=", "is_cuda", "\n", "# load model", "\n", "self", ".", "model", "=", "self", ".", "load_model", "(", "model_path", ",", "model_type", ")", "\n", "if", "self", ".", "is_cuda", ":", "\n", "\t\t\t", "self", ".", "model", "=", "self", ".", "model", ".", "cuda", "(", ")", "\n", "# load testset files", "\n", "", "self", ".", "load_test_files", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.eval.Solver.load_model": [[29, 40], ["model.HybridModel.HybridModel.load_state_dict", "torch.load", "model.HybridModel.AudioModel", "S.keys", "model.HybridModel.CFModel", "model.HybridModel.HybridModel"], "methods", ["None"], ["", "def", "load_model", "(", "self", ",", "model_path", ",", "model_type", ")", ":", "\n", "\t\t", "S", "=", "torch", ".", "load", "(", "model_path", ")", "[", "'state_dict'", "]", "\n", "SS", "=", "{", "key", "[", "6", ":", "]", ":", "S", "[", "key", "]", "for", "key", "in", "S", ".", "keys", "(", ")", "}", "\n", "if", "model_type", "==", "'spec'", ":", "\n", "\t\t\t", "model", "=", "AudioModel", "(", ")", "\n", "", "elif", "model_type", "==", "'cf'", ":", "\n", "\t\t\t", "model", "=", "CFModel", "(", ")", "\n", "", "elif", "model_type", "==", "'hybrid'", ":", "\n", "\t\t\t", "model", "=", "HybridModel", "(", ")", "\n", "", "model", ".", "load_state_dict", "(", "SS", ")", "\n", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.eval.Solver.load_test_files": [[41, 53], ["numpy.load", "numpy.load", "numpy.load", "numpy.load", "pickle.load", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "open", "int", "os.path.join", "line.split"], "methods", ["home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.preprocess.step1_data_split.Processor.split"], ["", "def", "load_test_files", "(", "self", ")", ":", "\n", "# load files", "\n", "\t\t", "self", ".", "test_ids", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "'test_ids.npy'", ")", ")", "\n", "ix_to_cf", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "'ix_to_cf.npy'", ")", ")", "\n", "self", ".", "tags", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "'tags.npy'", ")", ")", "\n", "binaries", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "'binaries.npy'", ")", ")", "\n", "self", ".", "word_emb", "=", "pickle", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "self", ".", "data_path", ",", "'%s_emb.pkl'", "%", "self", ".", "w2v_type", ")", ",", "'rb'", ")", ")", "\n", "\n", "# preprocess", "\n", "indice", "=", "[", "int", "(", "line", ".", "split", "(", "'//'", ")", "[", "0", "]", ")", "for", "line", "in", "self", ".", "test_ids", "]", "\n", "self", ".", "ground_truth", "=", "binaries", "[", "indice", "]", "\n", "self", ".", "ix_to_cf", "=", "ix_to_cf", "[", "indice", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.eval.Solver.to_var": [[54, 58], ["x.cuda.cuda.cuda"], "methods", ["None"], ["", "def", "to_var", "(", "self", ",", "x", ")", ":", "\n", "\t\t", "if", "self", ".", "is_cuda", ":", "\n", "\t\t\t", "x", "=", "x", ".", "cuda", "(", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.eval.Solver.evaluation": [[59, 84], ["eval.Solver.model.eval", "eval.Solver.song_to_emb", "eval.Solver.tags_to_emb", "eval.Solver.get_similarity", "eval.Solver.get_precision", "eval.Solver.get_roc_auc", "eval.Solver.get_ap", "print", "print", "print", "enumerate", "print", "numpy.mean", "numpy.mean", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.solver.Solver.song_to_emb", "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.solver.Solver.tags_to_emb", "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.solver.Solver.get_similarity", "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.solver.Solver.get_precision", "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.solver.Solver.get_roc_auc", "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.solver.Solver.get_ap"], ["", "def", "evaluation", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "model", ".", "eval", "(", ")", "\n", "# song to embedding", "\n", "song_embs", "=", "self", ".", "song_to_emb", "(", ")", "\n", "\n", "# tag to embedding", "\n", "tag_embs", "=", "self", ".", "tags_to_emb", "(", ")", "\n", "\n", "# get similarity score", "\n", "sim_scores", "=", "self", ".", "get_similarity", "(", "tag_embs", ",", "song_embs", ")", "\n", "\n", "# get evaluation metrics", "\n", "k", "=", "10", "\n", "p_ks", "=", "self", ".", "get_precision", "(", "sim_scores", ",", "k", "=", "k", ")", "\n", "roc_aucs", "=", "self", ".", "get_roc_auc", "(", "sim_scores", ")", "\n", "aps", "=", "self", ".", "get_ap", "(", "sim_scores", ")", "\n", "\n", "print", "(", "'precision @%d: %.4f'", "%", "(", "k", ",", "np", ".", "mean", "(", "p_ks", ")", ")", ")", "\n", "print", "(", "'roc_auc: %.4f'", "%", "np", ".", "mean", "(", "roc_aucs", ")", ")", "\n", "print", "(", "'map: %.4f'", "%", "np", ".", "mean", "(", "aps", ")", ")", "\n", "\n", "for", "i", ",", "tag", "in", "enumerate", "(", "self", ".", "tags", ")", ":", "\n", "\t\t\t", "print", "(", "'%s: %.4f, %.4f, %.4f'", "%", "(", "tag", ",", "p_ks", "[", "i", "]", ",", "roc_aucs", "[", "i", "]", ",", "aps", "[", "i", "]", ")", ")", "\n", "\n", "", "return", "p_ks", ",", "roc_aucs", ",", "aps", ",", "sim_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.eval.Solver.song_to_emb": [[85, 108], ["tqdm.tqdm", "eval.Solver.to_var", "eval.Solver.model.cf_to_embedding().detach().cpu", "embs.append", "torch.cat", "range", "eval.Solver.to_var", "eval.Solver.model.cf_to_embedding().detach().cpu", "embs.append", "torch.tensor", "torch.tensor", "eval.Solver.model.cf_to_embedding().detach", "len", "eval.Solver.model.cf_to_embedding().detach", "eval.Solver.model.cf_to_embedding", "eval.Solver.model.cf_to_embedding", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.eval.Solver.to_var", "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.eval.Solver.to_var", "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.model.HybridModel.cf_to_embedding", "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.model.HybridModel.cf_to_embedding"], ["", "def", "song_to_emb", "(", "self", ")", ":", "\n", "\t\t", "\"\"\"\n\t\t\tNeed to be updated\n\t\t\"\"\"", "\n", "if", "self", ".", "model_type", "==", "'spec'", ":", "\n", "\t\t\t", "return", "0", "\n", "\n", "", "elif", "self", ".", "model_type", "==", "'cf'", ":", "\n", "\t\t\t", "embs", "=", "[", "]", "\n", "for", "i", "in", "tqdm", ".", "tqdm", "(", "range", "(", "len", "(", "self", ".", "ix_to_cf", ")", "//", "self", ".", "batch_size", ")", ")", ":", "\n", "\t\t\t\t", "inp", "=", "self", ".", "to_var", "(", "torch", ".", "tensor", "(", "self", ".", "ix_to_cf", "[", "i", "*", "self", ".", "batch_size", ":", "(", "i", "+", "1", ")", "*", "self", ".", "batch_size", "]", ")", ")", "\n", "out", "=", "self", ".", "model", ".", "cf_to_embedding", "(", "torch", ".", "tensor", "(", "inp", ")", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "embs", ".", "append", "(", "out", ")", "\n", "", "inp", "=", "self", ".", "to_var", "(", "torch", ".", "tensor", "(", "self", ".", "ix_to_cf", "[", "(", "i", "+", "1", ")", "*", "self", ".", "batch_size", ":", "]", ")", ")", "\n", "out", "=", "self", ".", "model", ".", "cf_to_embedding", "(", "torch", ".", "tensor", "(", "inp", ")", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "embs", ".", "append", "(", "out", ")", "\n", "song_embs", "=", "torch", ".", "cat", "(", "embs", ",", "dim", "=", "0", ")", "\n", "return", "song_embs", "\n", "\n", "", "elif", "self", ".", "model_type", "==", "'hybrid'", ":", "\n", "\t\t\t", "return", "0", "\n", "\n", "", "return", "song_embs", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.eval.Solver.tags_to_emb": [[109, 113], ["torch.tensor", "eval.Solver.model.word_to_embedding().cpu().detach", "eval.Solver.model.word_to_embedding().cpu", "eval.Solver.word_emb.keys", "eval.Solver.model.word_to_embedding", "eval.Solver.to_var"], "methods", ["home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.model.HybridModel.word_to_embedding", "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.eval.Solver.to_var"], ["", "def", "tags_to_emb", "(", "self", ")", ":", "\n", "\t\t", "word_emb", "=", "torch", ".", "tensor", "(", "[", "self", ".", "word_emb", "[", "key", "]", "for", "key", "in", "self", ".", "word_emb", ".", "keys", "(", ")", "]", ")", "\n", "tag_emb", "=", "self", ".", "model", ".", "word_to_embedding", "(", "self", ".", "to_var", "(", "word_emb", ")", ")", ".", "cpu", "(", ")", ".", "detach", "(", ")", "\n", "return", "tag_emb", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.eval.Solver.get_similarity": [[114, 119], ["numpy.zeros", "range", "numpy.array", "len", "len", "torch.nn.CosineSimilarity"], "methods", ["None"], ["", "def", "get_similarity", "(", "self", ",", "tag_embs", ",", "song_embs", ")", ":", "\n", "\t\t", "sim_scores", "=", "np", ".", "zeros", "(", "(", "len", "(", "tag_embs", ")", ",", "len", "(", "song_embs", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "50", ")", ":", "\n", "\t\t\t", "sim_scores", "[", "i", "]", "=", "np", ".", "array", "(", "nn", ".", "CosineSimilarity", "(", "dim", "=", "-", "1", ")", "(", "tag_embs", "[", "i", "]", ",", "song_embs", ")", ")", "\n", "", "return", "sim_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.eval.Solver.get_precision": [[120, 128], ["range", "sklearn.metrics.precision_score", "p_ks.append", "numpy.ones", "numpy.argsort"], "methods", ["None"], ["", "def", "get_precision", "(", "self", ",", "sim_scores", ",", "k", "=", "10", ")", ":", "\n", "\t\t", "p_ks", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "50", ")", ":", "\n", "\t\t\t", "sorted_ix", "=", "np", ".", "argsort", "(", "sim_scores", "[", "i", "]", ")", "[", ":", ":", "-", "1", "]", "[", ":", "k", "]", "\n", "gt", "=", "self", ".", "ground_truth", ".", "T", "[", "i", "]", "[", "sorted_ix", "]", "\n", "p_k", "=", "metrics", ".", "precision_score", "(", "gt", ",", "np", ".", "ones", "(", "k", ")", ")", "\n", "p_ks", ".", "append", "(", "p_k", ")", "\n", "", "return", "p_ks", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.eval.Solver.get_roc_auc": [[129, 132], ["sklearn.metrics.roc_auc_score"], "methods", ["None"], ["", "def", "get_roc_auc", "(", "self", ",", "sim_scores", ")", ":", "\n", "\t\t", "roc_aucs", "=", "metrics", ".", "roc_auc_score", "(", "self", ".", "ground_truth", ",", "sim_scores", ".", "T", ",", "average", "=", "None", ")", "\n", "return", "roc_aucs", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.eval.Solver.get_ap": [[133, 136], ["sklearn.metrics.average_precision_score"], "methods", ["None"], ["", "def", "get_ap", "(", "self", ",", "sim_scores", ")", ":", "\n", "\t\t", "ap", "=", "metrics", ".", "average_precision_score", "(", "self", ".", "ground_truth", ",", "sim_scores", ".", "T", ",", "average", "=", "None", ")", "\n", "return", "ap", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.solver.TripletLoss.__init__": [[19, 23], ["torch.nn.Module.__init__", "torch.nn.ReLU"], "methods", ["home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.preprocess.step3_taste_profile.Processor.__init__"], ["\t", "def", "__init__", "(", "self", ",", "margin", ")", ":", "\n", "\t\t", "super", "(", "TripletLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "margin", "=", "margin", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.solver.TripletLoss.forward": [[24, 29], ["solver.TripletLoss.relu", "solver.TripletLoss.mean", "torch.nn.CosineSimilarity", "torch.nn.CosineSimilarity"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "anchor", ",", "positive", ",", "negative", ",", "size_average", "=", "True", ")", ":", "\n", "\t\t", "cosine_positive", "=", "nn", ".", "CosineSimilarity", "(", "dim", "=", "-", "1", ")", "(", "anchor", ",", "positive", ")", "\n", "cosine_negative", "=", "nn", ".", "CosineSimilarity", "(", "dim", "=", "-", "1", ")", "(", "anchor", ",", "negative", ")", "\n", "losses", "=", "self", ".", "relu", "(", "self", ".", "margin", "-", "cosine_positive", "+", "cosine_negative", ")", "\n", "return", "losses", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.solver.Solver.__init__": [[32, 66], ["pytorch_lightning.core.lightning.LightningModule.__init__", "solver.Solver.load_eval_data", "solver.TripletLoss", "model.AudioModel", "model.CFModel", "model.HybridModel"], "methods", ["home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.preprocess.step3_taste_profile.Processor.__init__", "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.solver.Solver.load_eval_data"], ["\t", "def", "__init__", "(", "self", ",", "config", ")", ":", "\n", "\t\t", "super", "(", ")", ".", "__init__", "(", ")", "\n", "# configuration", "\n", "self", ".", "lr", "=", "config", ".", "lr", "\n", "self", ".", "data_path", "=", "config", ".", "data_path", "\n", "self", ".", "batch_size", "=", "config", ".", "batch_size", "\n", "self", ".", "num_chunk", "=", "config", ".", "num_chunk", "\n", "self", ".", "input_length", "=", "config", ".", "input_length", "\n", "self", ".", "num_workers", "=", "config", ".", "num_workers", "\n", "self", ".", "input_type", "=", "config", ".", "input_type", "\n", "self", ".", "w2v_type", "=", "config", ".", "w2v_type", "\n", "self", ".", "is_balanced", "=", "config", ".", "is_balanced", "\n", "self", ".", "is_weighted", "=", "config", ".", "is_weighted", "\n", "self", ".", "is_subset", "=", "config", ".", "is_subset", "\n", "if", "config", ".", "is_subset", ":", "\n", "\t\t\t", "self", ".", "prefix", "=", "'sub_'", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "prefix", "=", "''", "\n", "\n", "# load validation data", "\n", "", "self", ".", "load_eval_data", "(", "config", ".", "data_path", ",", "config", ".", "w2v_type", ",", "config", ".", "mode", ")", "\n", "\n", "# triplet loss", "\n", "self", ".", "triplet_loss", "=", "TripletLoss", "(", "config", ".", "margin", ")", "\n", "\n", "# model", "\n", "if", "config", ".", "input_type", "==", "'spec'", ":", "\n", "\t\t\t", "self", ".", "model", "=", "AudioModel", "(", ")", "\n", "", "elif", "config", ".", "input_type", "==", "'cf'", ":", "\n", "\t\t\t", "self", ".", "model", "=", "CFModel", "(", ")", "\n", "", "elif", "config", ".", "input_type", "==", "'hybrid'", ":", "\n", "\t\t\t", "self", ".", "model", "=", "HybridModel", "(", ")", "\n", "\n", "", "self", ".", "song_embs", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.solver.Solver.load_eval_data": [[67, 85], ["pickle.load", "torch.tensor().cuda", "numpy.load", "numpy.load", "open", "numpy.load", "os.path.join", "os.path.join", "int", "numpy.load", "os.path.join", "torch.tensor", "os.path.join", "numpy.load", "os.path.join", "os.path.join", "line.split", "pickle.load.keys"], "methods", ["home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.preprocess.step1_data_split.Processor.split"], ["", "def", "load_eval_data", "(", "self", ",", "data_path", ",", "w2v_type", ",", "mode", ")", ":", "\n", "# get w2v word embedding", "\n", "\t\t", "emb_dict", "=", "pickle", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "self", ".", "prefix", "+", "'%s_emb.pkl'", "%", "w2v_type", ")", ",", "'rb'", ")", ")", "\n", "self", ".", "word_emb", "=", "torch", ".", "tensor", "(", "[", "emb_dict", "[", "key", "]", "for", "key", "in", "emb_dict", ".", "keys", "(", ")", "]", ")", ".", "cuda", "(", ")", "\n", "# get valid data", "\n", "if", "mode", "==", "'TRAIN'", ":", "\n", "\t\t\t", "self", ".", "eval_ids", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "self", ".", "prefix", "+", "'valid_ids.npy'", ")", ")", "\n", "", "elif", "mode", "==", "'TEST'", ":", "\n", "\t\t\t", "self", ".", "eval_ids", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "self", ".", "prefix", "+", "'test_ids.npy'", ")", ")", "\n", "", "self", ".", "tags", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "self", ".", "prefix", "+", "'tags.npy'", ")", ")", "\n", "\n", "# preprocess", "\n", "binaries", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "self", ".", "prefix", "+", "'binaries.npy'", ")", ")", "\n", "indice", "=", "[", "int", "(", "line", ".", "split", "(", "'//'", ")", "[", "0", "]", ")", "for", "line", "in", "self", ".", "eval_ids", "]", "\n", "self", ".", "ground_truth", "=", "binaries", "[", "indice", "]", "\n", "if", "self", ".", "input_type", "!=", "'spec'", ":", "\n", "\t\t\t", "ix_to_cf", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "data_path", ",", "self", ".", "prefix", "+", "'ix_to_cf.npy'", ")", ")", "\n", "self", ".", "ix_to_cf", "=", "ix_to_cf", "[", "indice", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.solver.Solver.configure_optimizers": [[86, 89], ["torch.optim.Adam", "solver.Solver.model.parameters"], "methods", ["None"], ["", "", "def", "configure_optimizers", "(", "self", ")", ":", "\n", "\t\t", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "self", ".", "model", ".", "parameters", "(", ")", ",", "lr", "=", "self", ".", "lr", ",", "weight_decay", "=", "1e-4", ")", "\n", "return", "optimizer", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.solver.Solver.train_loss": [[90, 92], ["solver.Solver.triplet_loss"], "methods", ["None"], ["", "def", "train_loss", "(", "self", ",", "anchor", ",", "positive", ",", "negative", ")", ":", "\n", "\t\t", "return", "self", ".", "triplet_loss", "(", "anchor", ",", "positive", ",", "negative", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.solver.Solver.valid_loss": [[93, 96], ["torch.nn.CosineSimilarity", "sims.mean"], "methods", ["None"], ["", "def", "valid_loss", "(", "self", ",", "tag_emb", ",", "song_emb", ")", ":", "\n", "\t\t", "sims", "=", "nn", ".", "CosineSimilarity", "(", "dim", "=", "-", "1", ")", "(", "tag_emb", ",", "song_emb", ")", "\n", "return", "1", "-", "sims", ".", "mean", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.solver.Solver.train_dataloader": [[97, 102], ["torch.utils.data.DataLoader", "data_loader.MyDataset"], "methods", ["None"], ["", "def", "train_dataloader", "(", "self", ")", ":", "\n", "\t\t", "return", "DataLoader", "(", "dataset", "=", "MyDataset", "(", "self", ".", "data_path", ",", "split", "=", "'TRAIN'", ",", "input_type", "=", "self", ".", "input_type", ",", "\n", "input_length", "=", "self", ".", "input_length", ",", "w2v_type", "=", "self", ".", "w2v_type", ",", "\n", "is_balanced", "=", "self", ".", "is_balanced", ",", "is_subset", "=", "self", ".", "is_subset", ")", ",", "\n", "batch_size", "=", "self", ".", "batch_size", ",", "shuffle", "=", "True", ",", "drop_last", "=", "False", ",", "num_workers", "=", "self", ".", "num_workers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.solver.Solver.val_dataloader": [[103, 108], ["torch.utils.data.DataLoader", "data_loader.MyDataset"], "methods", ["None"], ["", "def", "val_dataloader", "(", "self", ")", ":", "\n", "\t\t", "return", "DataLoader", "(", "dataset", "=", "MyDataset", "(", "self", ".", "data_path", ",", "split", "=", "'VALID'", ",", "input_type", "=", "self", ".", "input_type", ",", "\n", "input_length", "=", "self", ".", "input_length", ",", "num_chunk", "=", "self", ".", "num_chunk", ",", "\n", "w2v_type", "=", "self", ".", "w2v_type", ",", "is_balanced", "=", "self", ".", "is_balanced", ",", "is_subset", "=", "self", ".", "is_subset", ")", ",", "\n", "batch_size", "=", "self", ".", "batch_size", "//", "self", ".", "num_chunk", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ",", "num_workers", "=", "self", ".", "num_workers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.solver.Solver.test_dataloader": [[109, 114], ["torch.utils.data.DataLoader", "data_loader.MyDataset"], "methods", ["None"], ["", "def", "test_dataloader", "(", "self", ")", ":", "\n", "\t\t", "return", "DataLoader", "(", "dataset", "=", "MyDataset", "(", "self", ".", "data_path", ",", "split", "=", "'TEST'", ",", "input_type", "=", "self", ".", "input_type", ",", "\n", "input_length", "=", "self", ".", "input_length", ",", "num_chunk", "=", "self", ".", "num_chunk", ",", "\n", "w2v_type", "=", "self", ".", "w2v_type", ",", "is_balanced", "=", "self", ".", "is_balanced", ",", "is_subset", "=", "self", ".", "is_subset", ")", ",", "\n", "batch_size", "=", "self", ".", "batch_size", "//", "self", ".", "num_chunk", ",", "shuffle", "=", "False", ",", "drop_last", "=", "False", ",", "num_workers", "=", "self", ".", "num_workers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.solver.Solver.training_step": [[115, 122], ["solver.Solver.model.forward", "solver.Solver.triplet_sampling", "solver.Solver.train_loss"], "methods", ["home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.model.HybridModel.forward", "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.solver.Solver.triplet_sampling", "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.solver.Solver.train_loss"], ["", "def", "training_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "\t\t", "tag", ",", "spec", ",", "cf", ",", "tag_binary", ",", "song_binary", "=", "batch", "\n", "tag_emb", ",", "song_emb", "=", "self", ".", "model", ".", "forward", "(", "tag", ",", "spec", ",", "cf", ")", "\n", "anchor", ",", "positive", ",", "negative", "=", "self", ".", "triplet_sampling", "(", "tag_emb", ",", "song_emb", ",", "tag_binary", ",", "song_binary", ")", "\n", "loss", "=", "self", ".", "train_loss", "(", "anchor", ",", "positive", ",", "negative", ")", "\n", "logs", "=", "{", "\"loss\"", ":", "loss", "}", "\n", "return", "{", "\"loss\"", ":", "loss", ",", "\"log\"", ":", "logs", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.solver.Solver.training_epoch_end": [[123, 126], ["torch.stack().mean", "torch.stack"], "methods", ["None"], ["", "def", "training_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n", "\t\t", "avg_loss", "=", "torch", ".", "stack", "(", "[", "x", "[", "\"loss\"", "]", "for", "x", "in", "outputs", "]", ")", ".", "mean", "(", ")", "\n", "return", "{", "\"loss\"", ":", "avg_loss", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.solver.Solver.validation_step": [[127, 131], ["solver.Solver.song_to_emb", "solver.Solver.song_embs.append"], "methods", ["home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.solver.Solver.song_to_emb"], ["", "def", "validation_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "\t\t", "_", ",", "spec", ",", "cf", ",", "_", ",", "_", "=", "batch", "\n", "song_emb", "=", "self", ".", "song_to_emb", "(", "spec", ",", "cf", ")", "\n", "self", ".", "song_embs", ".", "append", "(", "song_emb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.solver.Solver.validation_epoch_end": [[132, 149], ["solver.Solver.tags_to_emb", "torch.cat", "torch.cat.size", "solver.Solver.get_scores", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.solver.Solver.tags_to_emb", "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.solver.Solver.get_scores"], ["", "def", "validation_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n", "\t\t", "tag_embs", "=", "self", ".", "tags_to_emb", "(", ")", "\n", "song_embs", "=", "torch", ".", "cat", "(", "self", ".", "song_embs", ",", "dim", "=", "0", ")", "\n", "\n", "# ignore unit test", "\n", "if", "song_embs", ".", "size", "(", "0", ")", "<", "self", ".", "batch_size", ":", "\n", "\t\t\t", "p_10", ",", "roc_auc", ",", "ap", "=", "torch", ".", "tensor", "(", "0", ")", ",", "torch", ".", "tensor", "(", "0", ")", ",", "torch", ".", "tensor", "(", "0", ")", "\n", "", "else", ":", "\n", "\t\t\t", "p_10", ",", "roc_auc", ",", "ap", "=", "self", ".", "get_scores", "(", "tag_embs", ",", "song_embs", ")", "\n", "", "tensorboard_logs", "=", "{", "\"p@10\"", ":", "p_10", ",", "\n", "\"roc_auc\"", ":", "roc_auc", ",", "\n", "\"map\"", ":", "ap", "}", "\n", "self", ".", "song_embs", "=", "[", "]", "\n", "return", "{", "\"p@10\"", ":", "p_10", ",", "\n", "\"roc_auc\"", ":", "roc_auc", ",", "\n", "\"map\"", ":", "ap", ",", "\n", "\"log\"", ":", "tensorboard_logs", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.solver.Solver.test_step": [[150, 154], ["solver.Solver.song_to_emb", "solver.Solver.song_embs.append"], "methods", ["home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.solver.Solver.song_to_emb"], ["", "def", "test_step", "(", "self", ",", "batch", ",", "batch_idx", ")", ":", "\n", "\t\t", "_", ",", "spec", ",", "cf", ",", "_", ",", "_", "=", "batch", "\n", "song_emb", "=", "self", ".", "song_to_emb", "(", "spec", ",", "cf", ")", "\n", "self", ".", "song_embs", ".", "append", "(", "song_emb", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.solver.Solver.test_epoch_end": [[155, 172], ["solver.Solver.tags_to_emb", "torch.cat", "torch.cat.size", "solver.Solver.get_scores", "torch.tensor", "torch.tensor", "torch.tensor"], "methods", ["home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.solver.Solver.tags_to_emb", "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.solver.Solver.get_scores"], ["", "def", "test_epoch_end", "(", "self", ",", "outputs", ")", ":", "\n", "\t\t", "tag_embs", "=", "self", ".", "tags_to_emb", "(", ")", "\n", "song_embs", "=", "torch", ".", "cat", "(", "self", ".", "song_embs", ",", "dim", "=", "0", ")", "\n", "\n", "# ignore unit test", "\n", "if", "song_embs", ".", "size", "(", "0", ")", "<", "self", ".", "batch_size", ":", "\n", "\t\t\t", "p_10", ",", "roc_auc", ",", "ap", "=", "torch", ".", "tensor", "(", "0", ")", ",", "torch", ".", "tensor", "(", "0", ")", ",", "torch", ".", "tensor", "(", "0", ")", "\n", "", "else", ":", "\n", "\t\t\t", "p_10", ",", "roc_auc", ",", "ap", "=", "self", ".", "get_scores", "(", "tag_embs", ",", "song_embs", ")", "\n", "", "tensorboard_logs", "=", "{", "\"p@10\"", ":", "p_10", ",", "\n", "\"roc_auc\"", ":", "roc_auc", ",", "\n", "\"map\"", ":", "ap", "}", "\n", "self", ".", "song_embs", "=", "[", "]", "\n", "return", "{", "\"p@10\"", ":", "p_10", ",", "\n", "\"roc_auc\"", ":", "roc_auc", ",", "\n", "\"map\"", ":", "ap", ",", "\n", "\"log\"", ":", "tensorboard_logs", "}", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.solver.Solver.tags_to_emb": [[173, 176], ["solver.Solver.model.word_to_embedding().detach().cpu", "solver.Solver.model.word_to_embedding().detach", "solver.Solver.model.word_to_embedding"], "methods", ["home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.model.HybridModel.word_to_embedding"], ["", "def", "tags_to_emb", "(", "self", ")", ":", "\n", "\t\t", "tag_emb", "=", "self", ".", "model", ".", "word_to_embedding", "(", "self", ".", "word_emb", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "return", "tag_emb", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.solver.Solver.song_to_emb": [[177, 194], ["spec.size", "solver.Solver.model.spec_to_embedding", "out.view.view.view", "out.view.view.mean().detach().cpu", "spec.view", "solver.Solver.model.cf_to_embedding().detach().cpu", "out.view.view.mean().detach", "spec.size", "solver.Solver.model.spec_to_embedding", "out.view.view.view", "out.view.view.mean", "torch.cat", "solver.Solver.model.cat_to_embedding().detach().cpu", "solver.Solver.model.cf_to_embedding().detach", "spec.view", "out.view.view.mean", "solver.Solver.model.cat_to_embedding().detach", "solver.Solver.model.cf_to_embedding", "solver.Solver.model.cat_to_embedding"], "methods", ["home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.model.HybridModel.spec_to_embedding", "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.model.HybridModel.spec_to_embedding", "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.model.HybridModel.cf_to_embedding", "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.model.HybridModel.cat_to_embedding"], ["", "def", "song_to_emb", "(", "self", ",", "spec", ",", "cf", ")", ":", "\n", "\t\t", "if", "self", ".", "input_type", "==", "'spec'", ":", "\n", "\t\t\t", "b", ",", "c", ",", "f", ",", "t", "=", "spec", ".", "size", "(", ")", "\n", "out", "=", "self", ".", "model", ".", "spec_to_embedding", "(", "spec", ".", "view", "(", "-", "1", ",", "f", ",", "t", ")", ")", "\n", "out", "=", "out", ".", "view", "(", "b", ",", "c", ",", "-", "1", ")", "\n", "song_emb", "=", "out", ".", "mean", "(", "dim", "=", "1", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "", "elif", "self", ".", "input_type", "==", "'cf'", ":", "\n", "\t\t\t", "song_emb", "=", "self", ".", "model", ".", "cf_to_embedding", "(", "cf", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "", "elif", "self", ".", "input_type", "==", "'hybrid'", ":", "\n", "\t\t\t", "b", ",", "c", ",", "f", ",", "t", "=", "spec", ".", "size", "(", ")", "\n", "out", "=", "self", ".", "model", ".", "spec_to_embedding", "(", "spec", ".", "view", "(", "-", "1", ",", "f", ",", "t", ")", ")", "\n", "out", "=", "out", ".", "view", "(", "b", ",", "c", ",", "-", "1", ")", "\n", "spec_emb", "=", "out", ".", "mean", "(", "dim", "=", "1", ")", "\n", "#\t\t\tcf_emb = self.model.cf_to_embedding(cf)", "\n", "cat_emb", "=", "torch", ".", "cat", "(", "[", "spec_emb", ",", "cf", "]", ",", "dim", "=", "-", "1", ")", "\n", "song_emb", "=", "self", ".", "model", ".", "cat_to_embedding", "(", "cat_emb", ")", ".", "detach", "(", ")", ".", "cpu", "(", ")", "\n", "", "return", "song_emb", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.solver.Solver.get_scores": [[196, 213], ["solver.Solver.get_similarity", "solver.Solver.get_precision", "solver.Solver.get_roc_auc", "solver.Solver.get_ap", "print", "print", "print", "enumerate", "print", "torch.tensor", "torch.tensor", "torch.tensor", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.solver.Solver.get_similarity", "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.solver.Solver.get_precision", "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.solver.Solver.get_roc_auc", "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.solver.Solver.get_ap"], ["", "def", "get_scores", "(", "self", ",", "tag_embs", ",", "song_embs", ")", ":", "\n", "# get similarity score (tag x song)", "\n", "\t\t", "sim_scores", "=", "self", ".", "get_similarity", "(", "tag_embs", ",", "song_embs", ")", "\n", "\n", "# get metrics", "\n", "k", "=", "10", "\n", "p_ks", "=", "self", ".", "get_precision", "(", "sim_scores", ",", "k", "=", "k", ")", "\n", "roc_aucs", "=", "self", ".", "get_roc_auc", "(", "sim_scores", ")", "\n", "aps", "=", "self", ".", "get_ap", "(", "sim_scores", ")", "\n", "\n", "# print", "\n", "print", "(", "'precision @%d: %.4f'", "%", "(", "k", ",", "np", ".", "mean", "(", "p_ks", ")", ")", ")", "\n", "print", "(", "'roc_auc: %.4f'", "%", "np", ".", "mean", "(", "roc_aucs", ")", ")", "\n", "print", "(", "'map: %.4f'", "%", "np", ".", "mean", "(", "aps", ")", ")", "\n", "for", "i", ",", "tag", "in", "enumerate", "(", "self", ".", "tags", ")", ":", "\n", "\t\t\t", "print", "(", "'%s: %.1f, %.4f, %.4f'", "%", "(", "tag", ",", "p_ks", "[", "i", "]", ",", "roc_aucs", "[", "i", "]", ",", "aps", "[", "i", "]", ")", ")", "\n", "", "return", "torch", ".", "tensor", "(", "np", ".", "mean", "(", "p_ks", ")", ")", ",", "torch", ".", "tensor", "(", "np", ".", "mean", "(", "roc_aucs", ")", ")", ",", "torch", ".", "tensor", "(", "np", ".", "mean", "(", "aps", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.solver.Solver.get_similarity": [[214, 219], ["numpy.zeros", "range", "len", "numpy.array", "len", "len", "torch.nn.CosineSimilarity"], "methods", ["None"], ["", "def", "get_similarity", "(", "self", ",", "tag_embs", ",", "song_embs", ")", ":", "\n", "\t\t", "sim_scores", "=", "np", ".", "zeros", "(", "(", "len", "(", "tag_embs", ")", ",", "len", "(", "song_embs", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "tag_embs", ")", ")", ":", "\n", "\t\t\t", "sim_scores", "[", "i", "]", "=", "np", ".", "array", "(", "nn", ".", "CosineSimilarity", "(", "dim", "=", "-", "1", ")", "(", "tag_embs", "[", "i", "]", ",", "song_embs", ")", ")", "\n", "", "return", "sim_scores", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.solver.Solver.get_precision": [[220, 228], ["range", "len", "sklearn.metrics.precision_score", "p_ks.append", "numpy.ones", "numpy.argsort"], "methods", ["None"], ["", "def", "get_precision", "(", "self", ",", "sim_scores", ",", "k", "=", "10", ")", ":", "\n", "\t\t", "p_ks", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "sim_scores", ")", ")", ":", "\n", "\t\t\t", "sorted_ix", "=", "np", ".", "argsort", "(", "sim_scores", "[", "i", "]", ")", "[", ":", ":", "-", "1", "]", "[", ":", "k", "]", "\n", "gt", "=", "self", ".", "ground_truth", ".", "T", "[", "i", "]", "[", "sorted_ix", "]", "\n", "p_k", "=", "metrics", ".", "precision_score", "(", "gt", ",", "np", ".", "ones", "(", "k", ")", ")", "\n", "p_ks", ".", "append", "(", "p_k", ")", "\n", "", "return", "p_ks", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.solver.Solver.get_roc_auc": [[229, 231], ["sklearn.metrics.roc_auc_score"], "methods", ["None"], ["", "def", "get_roc_auc", "(", "self", ",", "sim_scores", ")", ":", "\n", "\t\t", "return", "metrics", ".", "roc_auc_score", "(", "self", ".", "ground_truth", ",", "sim_scores", ".", "T", ",", "average", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.solver.Solver.get_ap": [[232, 234], ["sklearn.metrics.average_precision_score"], "methods", ["None"], ["", "def", "get_ap", "(", "self", ",", "sim_scores", ")", ":", "\n", "\t\t", "return", "metrics", ".", "average_precision_score", "(", "self", ".", "ground_truth", ",", "sim_scores", ".", "T", ",", "average", "=", "None", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.solver.Solver.triplet_sampling": [[235, 260], ["len", "torch.matmul", "torch.arange", "torch.arange", "torch.matmul", "[].item", "torch.matmul", "[].item", "tag_emb.norm", "song_emb.norm", "range", "range", "random.choices", "random.choices"], "methods", ["None"], ["", "def", "triplet_sampling", "(", "self", ",", "tag_emb", ",", "song_emb", ",", "tag_binary", ",", "song_binary", ")", ":", "\n", "\t\t", "num_batch", "=", "len", "(", "tag_emb", ")", "\n", "if", "self", ".", "is_weighted", ":", "\n", "# get distance weights", "\n", "\t\t\t", "tag_norm", "=", "tag_emb", "/", "tag_emb", ".", "norm", "(", "dim", "=", "1", ")", "[", ":", ",", "None", "]", "\n", "song_norm", "=", "song_emb", "/", "song_emb", ".", "norm", "(", "dim", "=", "1", ")", "[", ":", ",", "None", "]", "\n", "dot_sim", "=", "torch", ".", "matmul", "(", "tag_norm", ",", "song_norm", ".", "T", ")", "\n", "weights", "=", "(", "dot_sim", "+", "1", ")", "/", "2", "\n", "\n", "# masking", "\n", "mask", "=", "1", "-", "torch", ".", "matmul", "(", "tag_binary", ",", "song_binary", ".", "T", ")", "\n", "masked_weights", "=", "weights", "*", "mask", "\n", "\n", "# sampling", "\n", "index_array", "=", "torch", ".", "arange", "(", "num_batch", ")", "\n", "negative_ix", "=", "[", "random", ".", "choices", "(", "index_array", ",", "weights", "=", "masked_weights", "[", "i", "]", ",", "k", "=", "1", ")", "[", "0", "]", ".", "item", "(", ")", "for", "i", "in", "range", "(", "num_batch", ")", "]", "\n", "", "else", ":", "\n", "# masking", "\n", "\t\t\t", "mask", "=", "1", "-", "torch", ".", "matmul", "(", "tag_binary", ",", "song_binary", ".", "T", ")", "\n", "\n", "# sampling", "\n", "index_array", "=", "torch", ".", "arange", "(", "num_batch", ")", "\n", "negative_ix", "=", "[", "random", ".", "choices", "(", "index_array", ",", "weights", "=", "mask", "[", "i", "]", ",", "k", "=", "1", ")", "[", "0", "]", ".", "item", "(", ")", "for", "i", "in", "range", "(", "num_batch", ")", "]", "\n", "", "negative_emb", "=", "song_emb", "[", "negative_ix", "]", "\n", "return", "tag_emb", ",", "song_emb", ",", "negative_emb", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.model.AudioModel.__init__": [[7, 28], ["torch.nn.Module.__init__", "torch.nn.BatchNorm2d", "modules.Conv_2d", "modules.Conv_2d", "modules.Conv_2d", "modules.Conv_2d", "modules.Conv_2d", "modules.Conv_2d", "modules.Conv_2d", "modules.Conv_emb", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.preprocess.step3_taste_profile.Processor.__init__"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "super", "(", "AudioModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# CNN module for spectrograms", "\n", "self", ".", "spec_bn", "=", "nn", ".", "BatchNorm2d", "(", "1", ")", "\n", "self", ".", "layer1", "=", "Conv_2d", "(", "1", ",", "128", ",", "pooling", "=", "2", ")", "\n", "self", ".", "layer2", "=", "Conv_2d", "(", "128", ",", "128", ",", "pooling", "=", "2", ")", "\n", "self", ".", "layer3", "=", "Conv_2d", "(", "128", ",", "256", ",", "pooling", "=", "2", ")", "\n", "self", ".", "layer4", "=", "Conv_2d", "(", "256", ",", "256", ",", "pooling", "=", "2", ")", "\n", "self", ".", "layer5", "=", "Conv_2d", "(", "256", ",", "256", ",", "pooling", "=", "2", ")", "\n", "self", ".", "layer6", "=", "Conv_2d", "(", "256", ",", "256", ",", "pooling", "=", "2", ")", "\n", "self", ".", "layer7", "=", "Conv_2d", "(", "256", ",", "512", ",", "pooling", "=", "2", ")", "\n", "self", ".", "layer8", "=", "Conv_emb", "(", "512", ",", "256", ")", "\n", "\n", "# FC module for word embedding", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "300", ",", "512", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "512", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "512", ",", "256", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.model.AudioModel.spec_to_embedding": [[29, 46], ["spec.unsqueeze", "model.AudioModel.spec_bn", "model.AudioModel.layer1", "model.AudioModel.layer2", "model.AudioModel.layer3", "model.AudioModel.layer4", "model.AudioModel.layer5", "model.AudioModel.layer6", "model.AudioModel.layer7", "model.AudioModel.layer8", "out.view.view.squeeze", "out.view.view.view", "torch.nn.MaxPool1d", "out.view.view.size", "out.view.view.size"], "methods", ["None"], ["", "def", "spec_to_embedding", "(", "self", ",", "spec", ")", ":", "\n", "\t\t", "out", "=", "spec", ".", "unsqueeze", "(", "1", ")", "\n", "out", "=", "self", ".", "spec_bn", "(", "out", ")", "\n", "\n", "# CNN", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "self", ".", "layer5", "(", "out", ")", "\n", "out", "=", "self", ".", "layer6", "(", "out", ")", "\n", "out", "=", "self", ".", "layer7", "(", "out", ")", "\n", "out", "=", "self", ".", "layer8", "(", "out", ")", "\n", "out", "=", "out", ".", "squeeze", "(", "2", ")", "\n", "out", "=", "nn", ".", "MaxPool1d", "(", "out", ".", "size", "(", "-", "1", ")", ")", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.model.AudioModel.word_to_embedding": [[47, 54], ["model.AudioModel.fc1", "model.AudioModel.bn1", "model.AudioModel.relu", "model.AudioModel.dropout", "model.AudioModel.fc2"], "methods", ["None"], ["", "def", "word_to_embedding", "(", "self", ",", "emb", ")", ":", "\n", "\t\t", "out", "=", "self", ".", "fc1", "(", "emb", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "dropout", "(", "out", ")", "\n", "out", "=", "self", ".", "fc2", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.model.AudioModel.forward": [[55, 59], ["model.AudioModel.word_to_embedding", "model.AudioModel.spec_to_embedding"], "methods", ["home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.model.HybridModel.word_to_embedding", "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.model.HybridModel.spec_to_embedding"], ["", "def", "forward", "(", "self", ",", "tag", ",", "spec", ",", "cf", ")", ":", "\n", "\t\t", "tag_emb", "=", "self", ".", "word_to_embedding", "(", "tag", ")", "\n", "song_emb", "=", "self", ".", "spec_to_embedding", "(", "spec", ")", "\n", "return", "tag_emb", ",", "song_emb", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.model.CFModel.__init__": [[62, 77], ["torch.nn.Module.__init__", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.preprocess.step3_taste_profile.Processor.__init__"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "super", "(", "CFModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# FC module for collaborative filtering embedding", "\n", "self", ".", "cf_fc1", "=", "nn", ".", "Linear", "(", "200", ",", "512", ")", "\n", "self", ".", "cf_bn1", "=", "nn", ".", "BatchNorm1d", "(", "512", ")", "\n", "self", ".", "cf_fc2", "=", "nn", ".", "Linear", "(", "512", ",", "256", ")", "\n", "\n", "# FC module for word embedding", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "300", ",", "512", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "512", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "512", ",", "256", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.model.CFModel.cf_to_embedding": [[78, 85], ["model.CFModel.cf_fc1", "model.CFModel.cf_bn1", "model.CFModel.relu", "model.CFModel.dropout", "model.CFModel.cf_fc2"], "methods", ["None"], ["", "def", "cf_to_embedding", "(", "self", ",", "cf", ")", ":", "\n", "\t\t", "out", "=", "self", ".", "cf_fc1", "(", "cf", ")", "\n", "out", "=", "self", ".", "cf_bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "dropout", "(", "out", ")", "\n", "out", "=", "self", ".", "cf_fc2", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.model.CFModel.word_to_embedding": [[86, 93], ["model.CFModel.fc1", "model.CFModel.bn1", "model.CFModel.relu", "model.CFModel.dropout", "model.CFModel.fc2"], "methods", ["None"], ["", "def", "word_to_embedding", "(", "self", ",", "emb", ")", ":", "\n", "\t\t", "out", "=", "self", ".", "fc1", "(", "emb", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "dropout", "(", "out", ")", "\n", "out", "=", "self", ".", "fc2", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.model.CFModel.forward": [[94, 98], ["model.CFModel.word_to_embedding", "model.CFModel.cf_to_embedding"], "methods", ["home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.model.HybridModel.word_to_embedding", "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.model.HybridModel.cf_to_embedding"], ["", "def", "forward", "(", "self", ",", "tag", ",", "spec", ",", "cf", ")", ":", "\n", "\t\t", "tag_emb", "=", "self", ".", "word_to_embedding", "(", "tag", ")", "\n", "song_emb", "=", "self", ".", "cf_to_embedding", "(", "cf", ")", "\n", "return", "tag_emb", ",", "song_emb", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.model.HybridModel.__init__": [[101, 132], ["torch.nn.Module.__init__", "torch.nn.BatchNorm2d", "modules.Conv_2d", "modules.Conv_2d", "modules.Conv_2d", "modules.Conv_2d", "modules.Conv_2d", "modules.Conv_2d", "modules.Conv_2d", "modules.Conv_emb", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.Linear", "torch.nn.Linear", "torch.nn.BatchNorm1d", "torch.nn.Linear", "torch.nn.ReLU", "torch.nn.Dropout"], "methods", ["home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.preprocess.step3_taste_profile.Processor.__init__"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "super", "(", "HybridModel", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "# CNN module for spectrograms", "\n", "self", ".", "spec_bn", "=", "nn", ".", "BatchNorm2d", "(", "1", ")", "\n", "self", ".", "layer1", "=", "Conv_2d", "(", "1", ",", "128", ",", "pooling", "=", "2", ")", "\n", "self", ".", "layer2", "=", "Conv_2d", "(", "128", ",", "128", ",", "pooling", "=", "2", ")", "\n", "self", ".", "layer3", "=", "Conv_2d", "(", "128", ",", "256", ",", "pooling", "=", "2", ")", "\n", "self", ".", "layer4", "=", "Conv_2d", "(", "256", ",", "256", ",", "pooling", "=", "2", ")", "\n", "self", ".", "layer5", "=", "Conv_2d", "(", "256", ",", "256", ",", "pooling", "=", "2", ")", "\n", "self", ".", "layer6", "=", "Conv_2d", "(", "256", ",", "256", ",", "pooling", "=", "2", ")", "\n", "self", ".", "layer7", "=", "Conv_2d", "(", "256", ",", "512", ",", "pooling", "=", "2", ")", "\n", "self", ".", "layer8", "=", "Conv_emb", "(", "512", ",", "200", ")", "\n", "\n", "# FC module for collaborative filtering embedding", "\n", "#\t\tself.cf_fc1 = nn.Linear(200, 512)", "\n", "#\t\tself.cf_bn1 = nn.BatchNorm1d(512)", "\n", "#\t\tself.cf_fc2 = nn.Linear(512, 256)", "\n", "\n", "# FC module for concatenated embedding", "\n", "self", ".", "cat_fc1", "=", "nn", ".", "Linear", "(", "400", ",", "512", ")", "\n", "self", ".", "cat_bn1", "=", "nn", ".", "BatchNorm1d", "(", "512", ")", "\n", "self", ".", "cat_fc2", "=", "nn", ".", "Linear", "(", "512", ",", "256", ")", "\n", "\n", "# FC module for word embedding", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "300", ",", "512", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm1d", "(", "512", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "512", ",", "256", ")", "\n", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "\n", "self", ".", "dropout", "=", "nn", ".", "Dropout", "(", "0.5", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.model.HybridModel.spec_to_embedding": [[133, 150], ["spec.unsqueeze", "model.HybridModel.spec_bn", "model.HybridModel.layer1", "model.HybridModel.layer2", "model.HybridModel.layer3", "model.HybridModel.layer4", "model.HybridModel.layer5", "model.HybridModel.layer6", "model.HybridModel.layer7", "model.HybridModel.layer8", "out.view.view.squeeze", "out.view.view.view", "torch.nn.MaxPool1d", "out.view.view.size", "out.view.view.size"], "methods", ["None"], ["", "def", "spec_to_embedding", "(", "self", ",", "spec", ")", ":", "\n", "\t\t", "out", "=", "spec", ".", "unsqueeze", "(", "1", ")", "\n", "out", "=", "self", ".", "spec_bn", "(", "out", ")", "\n", "\n", "# CNN", "\n", "out", "=", "self", ".", "layer1", "(", "out", ")", "\n", "out", "=", "self", ".", "layer2", "(", "out", ")", "\n", "out", "=", "self", ".", "layer3", "(", "out", ")", "\n", "out", "=", "self", ".", "layer4", "(", "out", ")", "\n", "out", "=", "self", ".", "layer5", "(", "out", ")", "\n", "out", "=", "self", ".", "layer6", "(", "out", ")", "\n", "out", "=", "self", ".", "layer7", "(", "out", ")", "\n", "out", "=", "self", ".", "layer8", "(", "out", ")", "\n", "out", "=", "out", ".", "squeeze", "(", "2", ")", "\n", "out", "=", "nn", ".", "MaxPool1d", "(", "out", ".", "size", "(", "-", "1", ")", ")", "(", "out", ")", "\n", "out", "=", "out", ".", "view", "(", "out", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.model.HybridModel.cf_to_embedding": [[151, 158], ["model.HybridModel.cf_fc1", "model.HybridModel.cf_bn1", "model.HybridModel.relu", "model.HybridModel.dropout", "model.HybridModel.cf_fc2"], "methods", ["None"], ["", "def", "cf_to_embedding", "(", "self", ",", "cf", ")", ":", "\n", "\t\t", "out", "=", "self", ".", "cf_fc1", "(", "cf", ")", "\n", "out", "=", "self", ".", "cf_bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "dropout", "(", "out", ")", "\n", "out", "=", "self", ".", "cf_fc2", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.model.HybridModel.cat_to_embedding": [[159, 166], ["model.HybridModel.cat_fc1", "model.HybridModel.cat_bn1", "model.HybridModel.relu", "model.HybridModel.dropout", "model.HybridModel.cat_fc2"], "methods", ["None"], ["", "def", "cat_to_embedding", "(", "self", ",", "cat", ")", ":", "\n", "\t\t", "out", "=", "self", ".", "cat_fc1", "(", "cat", ")", "\n", "out", "=", "self", ".", "cat_bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "dropout", "(", "out", ")", "\n", "out", "=", "self", ".", "cat_fc2", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.model.HybridModel.song_to_embedding": [[167, 180], ["model.HybridModel.spec_to_embedding", "torch.cat", "model.HybridModel.cat_to_embedding"], "methods", ["home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.model.HybridModel.spec_to_embedding", "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.model.HybridModel.cat_to_embedding"], ["", "def", "song_to_embedding", "(", "self", ",", "spec", ",", "cf", ")", ":", "\n", "# spec to embedding", "\n", "\t\t", "out_spec", "=", "self", ".", "spec_to_embedding", "(", "spec", ")", "\n", "\n", "# cf to embedding", "\n", "#\t\tout_cf = self.cf_to_embedding(cf)", "\n", "\n", "# concatenate", "\n", "out", "=", "torch", ".", "cat", "(", "[", "out_spec", ",", "cf", "]", ",", "dim", "=", "-", "1", ")", "\n", "\n", "# fully connected", "\n", "out", "=", "self", ".", "cat_to_embedding", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.model.HybridModel.word_to_embedding": [[181, 188], ["model.HybridModel.fc1", "model.HybridModel.bn1", "model.HybridModel.relu", "model.HybridModel.dropout", "model.HybridModel.fc2"], "methods", ["None"], ["", "def", "word_to_embedding", "(", "self", ",", "emb", ")", ":", "\n", "\t\t", "out", "=", "self", ".", "fc1", "(", "emb", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "out", "=", "self", ".", "dropout", "(", "out", ")", "\n", "out", "=", "self", ".", "fc2", "(", "out", ")", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.model.HybridModel.forward": [[189, 193], ["model.HybridModel.word_to_embedding", "model.HybridModel.song_to_embedding"], "methods", ["home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.model.HybridModel.word_to_embedding", "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.train.model.HybridModel.song_to_embedding"], ["", "def", "forward", "(", "self", ",", "tag", ",", "spec", ",", "cf", ")", ":", "\n", "\t\t", "tag_emb", "=", "self", ".", "word_to_embedding", "(", "tag", ")", "\n", "song_emb", "=", "self", ".", "song_to_embedding", "(", "spec", ",", "cf", ")", "\n", "return", "tag_emb", ",", "song_emb", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.preprocess.step1_data_split.Processor.__init__": [[14, 16], ["random.seed"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "random", ".", "seed", "(", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.preprocess.step1_data_split.Processor.run": [[17, 22], ["step1_data_split.Processor.get_dataframe", "step1_data_split.Processor.get_existing", "step1_data_split.Processor.split", "step1_data_split.Processor.save"], "methods", ["home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.preprocess.step1_data_split.Processor.get_dataframe", "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.preprocess.step1_data_split.Processor.get_existing", "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.preprocess.step1_data_split.Processor.split", "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.preprocess.step1_data_split.Processor.save"], ["", "def", "run", "(", "self", ",", "root", "=", "'YOUR_DATA_PATH'", ",", "top_n", "=", "100", ",", "threshold", "=", "100", ")", ":", "\n", "        ", "df", "=", "self", ".", "get_dataframe", "(", "root", ")", "\n", "df", ",", "ids", ",", "binaries", ",", "tags", "=", "self", ".", "get_existing", "(", "root", ",", "df", ",", "top_n", ")", "\n", "train_ix", ",", "valid_ix", ",", "test_ix", "=", "self", ".", "split", "(", "df", ",", "ids", ",", "binaries", ",", "tags", ",", "threshold", ")", "\n", "self", ".", "save", "(", "root", ",", "ids", ",", "binaries", ",", "tags", ",", "train_ix", ",", "valid_ix", ",", "test_ix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.preprocess.step1_data_split.Processor.get_dataframe": [[23, 61], ["os.path.exists", "print", "os.path.join", "pandas.read_csv", "gensim.load", "print", "list", "print", "pickle.load", "pandas.read_csv.insert", "tqdm.tqdm", "pandas.read_csv.to_csv", "print", "pandas.read_csv", "os.path.join", "set", "open", "set", "os.path.join", "os.path.join", "gensim.load.get_vector", "available_tags.append", "pandas.read_csv.merged.isin", "os.path.join", "range", "pandas.read_csv.artist.isin", "len"], "methods", ["None"], ["", "def", "get_dataframe", "(", "self", ",", "root", ")", ":", "\n", "        ", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'processed_df.tsv'", ")", ")", ":", "\n", "# load data", "\n", "            ", "print", "(", "'load data...'", ")", "\n", "filename", "=", "os", ".", "path", ".", "join", "(", "root", ",", "'msd500'", ",", "'track_tags.tsv'", ")", "\n", "df", "=", "pd", ".", "read_csv", "(", "filename", ",", "sep", "=", "'\\t'", ",", "names", "=", "[", "'id'", ",", "'tag'", ",", "'merged'", ",", "'type'", ",", "'score'", "]", ")", "\n", "w2v", "=", "api", ".", "load", "(", "'word2vec-google-news-300'", ")", "\n", "\n", "# score threshold", "\n", "df", "=", "df", "[", "df", ".", "score", ">=", "50", "]", "\n", "\n", "# get available tags with w2v embedding", "\n", "print", "(", "'get available tags...'", ")", "\n", "tags", "=", "list", "(", "set", "(", "df", ".", "merged", ")", ")", "\n", "available_tags", "=", "[", "]", "\n", "for", "tag", "in", "tags", ":", "\n", "                ", "try", ":", "\n", "                    ", "v", "=", "w2v", ".", "get_vector", "(", "tag", ")", "\n", "available_tags", ".", "append", "(", "tag", ")", "\n", "", "except", "KeyError", ":", "\n", "                    ", "continue", "\n", "", "", "df", "=", "df", "[", "df", ".", "merged", ".", "isin", "(", "available_tags", ")", "]", "\n", "\n", "# add artist information to the table", "\n", "print", "(", "'add artist information...'", ")", "\n", "song_to_artist", "=", "pickle", ".", "load", "(", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'song_to_artist.pkl'", ")", ",", "'rb'", ")", ")", "\n", "df", ".", "insert", "(", "1", ",", "'artist'", ",", "[", "'unknown'", "for", "_", "in", "range", "(", "len", "(", "df", ")", ")", "]", ",", "True", ")", "\n", "for", "song_id", "in", "tqdm", ".", "tqdm", "(", "set", "(", "df", ".", "id", ")", ")", ":", "\n", "                    ", "artist_id", "=", "song_to_artist", "[", "song_id", "]", "\n", "df", ".", "loc", "[", "df", ".", "id", "==", "song_id", ",", "'artist'", "]", "=", "artist_id", "\n", "", "df", "=", "df", "[", "~", "df", ".", "artist", ".", "isin", "(", "[", "'unknown'", "]", ")", "]", "\n", "\n", "# save dataframe", "\n", "df", ".", "to_csv", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'processed_df.tsv'", ")", ",", "sep", "=", "'\\t'", ",", "header", "=", "None", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'load data...'", ")", "\n", "df", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'processed_df.tsv'", ")", ",", "sep", "=", "'\\t'", ",", "names", "=", "[", "'id'", ",", "'artist'", ",", "'tag'", ",", "'merged'", ",", "'type'", ",", "'score'", "]", ")", "\n", "", "return", "df", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.preprocess.step1_data_split.Processor.get_existing": [[62, 102], ["print", "glob.glob", "collections.Counter().most_common", "print", "os.path.join", "print", "os.path.exists", "numpy.load.sort", "numpy.load.sort", "numpy.array", "numpy.save", "numpy.zeros", "tqdm.tqdm", "numpy.save", "numpy.save", "numpy.load", "numpy.load", "numpy.load", "df.id.isin", "collections.Counter", "df.merged.isin", "os.path.join", "tag.lower", "open", "list", "open", "open", "os.path.join", "os.path.join", "os.path.join", "line.split", "range", "set", "os.path.join", "len", "len", "os.path.join", "os.path.join", "len", "tag.lower"], "methods", ["home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.preprocess.step1_data_split.Processor.save", "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.preprocess.step1_data_split.Processor.save", "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.preprocess.step1_data_split.Processor.save", "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.preprocess.step1_data_split.Processor.split"], ["", "def", "get_existing", "(", "self", ",", "root", ",", "df", ",", "top_n", ")", ":", "\n", "# get only exsisting item", "\n", "        ", "print", "(", "'get available song ids...'", ")", "\n", "existing_path", "=", "glob", ".", "glob", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'spec/*/*/*/*.npy'", ")", ")", "\n", "existing_ids", "=", "[", "line", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "[", ":", "-", "4", "]", "for", "line", "in", "existing_path", "]", "\n", "df", "=", "df", "[", "df", ".", "id", ".", "isin", "(", "existing_ids", ")", "]", "\n", "\n", "# get top 100 tags", "\n", "top100", "=", "Counter", "(", "df", ".", "merged", ")", ".", "most_common", "(", "top_n", ")", "\n", "tags", "=", "[", "line", "[", "0", "]", "for", "line", "in", "top100", "]", "\n", "for", "tag", "in", "tags", ":", "\n", "                ", "print", "(", "tag", ")", "\n", "", "df", "=", "df", "[", "df", ".", "merged", ".", "isin", "(", "tags", ")", "]", "\n", "\n", "# id to binary", "\n", "print", "(", "'get binaries...'", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'binaries.npy'", ")", ")", ":", "\n", "            ", "tags", "=", "[", "tag", ".", "lower", "(", ")", "for", "tag", "in", "tags", "]", "\n", "tags", ".", "sort", "(", ")", "\n", "tag_to_index", "=", "{", "tags", "[", "i", "]", ":", "i", "for", "i", "in", "range", "(", "len", "(", "tags", ")", ")", "}", "\n", "\n", "ids", "=", "[", "msd_id", "for", "msd_id", "in", "set", "(", "df", ".", "id", ")", "]", "\n", "ids", ".", "sort", "(", ")", "\n", "ids", "=", "np", ".", "array", "(", "ids", ")", "\n", "np", ".", "save", "(", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'existing_ids.npy'", ")", ",", "'wb'", ")", ",", "ids", ")", "\n", "\n", "binaries", "=", "np", ".", "zeros", "(", "(", "len", "(", "ids", ")", ",", "len", "(", "tags", ")", ")", ")", "\n", "i", "=", "0", "\n", "for", "msd_id", "in", "tqdm", ".", "tqdm", "(", "ids", ")", ":", "\n", "                    ", "annotations", "=", "list", "(", "df", "[", "df", ".", "id", "==", "msd_id", "]", ".", "merged", ")", "\n", "for", "tag", "in", "annotations", ":", "\n", "                            ", "binaries", "[", "i", ",", "tag_to_index", "[", "tag", ".", "lower", "(", ")", "]", "]", "=", "1", "\n", "", "i", "+=", "1", "\n", "", "np", ".", "save", "(", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'binaries.npy'", ")", ",", "'wb'", ")", ",", "binaries", ")", "\n", "np", ".", "save", "(", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'tags.npy'", ")", ",", "'wb'", ")", ",", "tags", ")", "\n", "", "else", ":", "\n", "            ", "ids", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'existing_ids.npy'", ")", ")", "\n", "binaries", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'binaries.npy'", ")", ")", "\n", "tags", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'tags.npy'", ")", ")", "\n", "", "return", "df", ",", "ids", ",", "binaries", ",", "tags", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.preprocess.step1_data_split.Processor.split": [[103, 131], ["list", "numpy.random.shuffle", "list", "list", "list", "binaries[].sum", "binaries[].sum", "binaries[].sum", "print", "print", "print", "range", "set", "set", "set", "set", "binaries[].sum.min", "binaries[].sum.min", "binaries[].sum.min", "numpy.min", "len", "int", "int", "int", "int", "binaries[].sum.argmin", "binaries[].sum.argmin", "binaries[].sum.argmin", "binaries[].sum.min", "binaries[].sum.min", "binaries[].sum.min", "len", "len", "len", "len", "df.artist.isin", "df.artist.isin", "df.artist.isin"], "methods", ["None"], ["", "def", "split", "(", "self", ",", "df", ",", "ids", ",", "binaries", ",", "tags", ",", "threshold", ")", ":", "\n", "        ", "id_to_index", "=", "{", "ids", "[", "i", "]", ":", "i", "for", "i", "in", "range", "(", "len", "(", "ids", ")", ")", "}", "\n", "is_run", "=", "True", "\n", "while", "is_run", ":", "\n", "            ", "artists", "=", "list", "(", "set", "(", "df", ".", "artist", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "artists", ")", "\n", "train_artist", "=", "artists", "[", ":", "int", "(", "len", "(", "artists", ")", "*", "0.7", ")", "]", "\n", "valid_artist", "=", "artists", "[", "int", "(", "len", "(", "artists", ")", "*", "0.7", ")", ":", "int", "(", "len", "(", "artists", ")", "*", "0.85", ")", "]", "\n", "test_artist", "=", "artists", "[", "int", "(", "len", "(", "artists", ")", "*", "0.85", ")", ":", "]", "\n", "\n", "# validate", "\n", "train_songs", "=", "list", "(", "set", "(", "df", "[", "df", ".", "artist", ".", "isin", "(", "train_artist", ")", "]", ".", "id", ")", ")", "\n", "valid_songs", "=", "list", "(", "set", "(", "df", "[", "df", ".", "artist", ".", "isin", "(", "valid_artist", ")", "]", ".", "id", ")", ")", "\n", "test_songs", "=", "list", "(", "set", "(", "df", "[", "df", ".", "artist", ".", "isin", "(", "test_artist", ")", "]", ".", "id", ")", ")", "\n", "train_ix", "=", "[", "id_to_index", "[", "song", "]", "for", "song", "in", "train_songs", "]", "\n", "valid_ix", "=", "[", "id_to_index", "[", "song", "]", "for", "song", "in", "valid_songs", "]", "\n", "test_ix", "=", "[", "id_to_index", "[", "song", "]", "for", "song", "in", "test_songs", "]", "\n", "train_count", "=", "binaries", "[", "train_ix", "]", ".", "sum", "(", "axis", "=", "0", ")", "\n", "valid_count", "=", "binaries", "[", "valid_ix", "]", ".", "sum", "(", "axis", "=", "0", ")", "\n", "test_count", "=", "binaries", "[", "test_ix", "]", ".", "sum", "(", "axis", "=", "0", ")", "\n", "print", "(", "tags", "[", "train_count", ".", "argmin", "(", ")", "]", ",", "train_count", ".", "min", "(", ")", ")", "\n", "print", "(", "tags", "[", "valid_count", ".", "argmin", "(", ")", "]", ",", "valid_count", ".", "min", "(", ")", ")", "\n", "print", "(", "tags", "[", "test_count", ".", "argmin", "(", ")", "]", ",", "test_count", ".", "min", "(", ")", ")", "\n", "if", "np", ".", "min", "(", "[", "train_count", ".", "min", "(", ")", ",", "valid_count", ".", "min", "(", ")", ",", "test_count", ".", "min", "(", ")", "]", ")", "<", "threshold", ":", "\n", "                ", "is_run", "=", "True", "\n", "", "else", ":", "\n", "                ", "is_run", "=", "False", "\n", "", "", "return", "train_ix", ",", "valid_ix", ",", "test_ix", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.preprocess.step1_data_split.Processor.save": [[132, 151], ["print", "numpy.save", "numpy.save", "numpy.save", "pickle.dump", "print", "open", "open", "open", "enumerate", "open", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "train_tag_to_ix[].append"], "methods", ["home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.preprocess.step1_data_split.Processor.save", "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.preprocess.step1_data_split.Processor.save", "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.preprocess.step1_data_split.Processor.save"], ["", "def", "save", "(", "self", ",", "root", ",", "ids", ",", "binaries", ",", "tags", ",", "train_ix", ",", "valid_ix", ",", "test_ix", ")", ":", "\n", "        ", "train_ids", "=", "[", "'%s//%s'", "%", "(", "ix", ",", "ids", "[", "ix", "]", ")", "for", "ix", "in", "train_ix", "]", "\n", "valid_ids", "=", "[", "'%s//%s'", "%", "(", "ix", ",", "ids", "[", "ix", "]", ")", "for", "ix", "in", "valid_ix", "]", "\n", "test_ids", "=", "[", "'%s//%s'", "%", "(", "ix", ",", "ids", "[", "ix", "]", ")", "for", "ix", "in", "test_ix", "]", "\n", "\n", "print", "(", "'save items...'", ")", "\n", "np", ".", "save", "(", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'train_ids.npy'", ")", ",", "'wb'", ")", ",", "train_ids", ")", "\n", "np", ".", "save", "(", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'valid_ids.npy'", ")", ",", "'wb'", ")", ",", "valid_ids", ")", "\n", "np", ".", "save", "(", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'test_ids.npy'", ")", ",", "'wb'", ")", ",", "test_ids", ")", "\n", "\n", "# get tag-to-item dictionary (train set only)", "\n", "train_tag_to_ix", "=", "{", "tag", ":", "[", "]", "for", "tag", "in", "tags", "}", "\n", "for", "ix", "in", "train_ix", ":", "\n", "            ", "binary", "=", "binaries", "[", "ix", "]", "\n", "for", "ti", ",", "is_tag", "in", "enumerate", "(", "binary", ")", ":", "\n", "                ", "if", "is_tag", ":", "\n", "                    ", "train_tag_to_ix", "[", "tags", "[", "ti", "]", "]", ".", "append", "(", "'%s//%s'", "%", "(", "ix", ",", "ids", "[", "ix", "]", ")", ")", "\n", "", "", "", "pickle", ".", "dump", "(", "train_tag_to_ix", ",", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'train_tag_to_ix.pkl'", ")", ",", "'wb'", ")", ")", "\n", "print", "(", "'done!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.preprocess.step2_word_embedding.Processor.__init__": [[11, 13], ["print"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "print", "(", "'get word embeddings..'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.preprocess.step2_word_embedding.Processor.run": [[14, 31], ["numpy.load", "gensim.load", "tqdm.tqdm", "pickle.dump", "gensim.models.Word2Vec.load", "tqdm.tqdm", "pickle.dump", "print", "os.path.join", "gensim.load.get_vector", "open", "os.path.join", "gensim.models.Word2Vec.load.wv.get_vector", "open", "os.path.join", "os.path.join"], "methods", ["None"], ["", "def", "run", "(", "self", ",", "root", "=", "'YOUR_DATA_PATH'", ")", ":", "\n", "        ", "tags", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'tags.npy'", ")", ")", "\n", "\n", "tag_to_google_emb", "=", "{", "}", "\n", "google_wv", "=", "api", ".", "load", "(", "'word2vec-google-news-300'", ")", "\n", "for", "tag", "in", "tqdm", ".", "tqdm", "(", "tags", ")", ":", "\n", "            ", "emb", "=", "google_wv", ".", "get_vector", "(", "tag", ")", "\n", "tag_to_google_emb", "[", "tag", "]", "=", "emb", "\n", "", "pickle", ".", "dump", "(", "tag_to_google_emb", ",", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'google_emb.pkl'", ")", ",", "'wb'", ")", ")", "\n", "\n", "tag_to_music_emb", "=", "{", "}", "\n", "music_wv", "=", "Word2Vec", ".", "load", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'music_w2v'", ",", "'model_semeval_trigrams_300.model'", ")", ")", "\n", "for", "tag", "in", "tqdm", ".", "tqdm", "(", "tags", ")", ":", "\n", "            ", "emb", "=", "music_wv", ".", "wv", ".", "get_vector", "(", "tag", ")", "\n", "tag_to_music_emb", "[", "tag", "]", "=", "emb", "\n", "", "pickle", ".", "dump", "(", "tag_to_music_emb", ",", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'music_emb.pkl'", ")", ",", "'wb'", ")", ")", "\n", "print", "(", "'done!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.preprocess.step3_taste_profile.Processor.__init__": [[9, 11], ["print"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "print", "(", "'get collaborative filtering embeddings..'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.preprocess.step3_taste_profile.Processor.run": [[12, 22], ["numpy.load", "pandas.read_csv", "numpy.load", "tqdm.tqdm", "numpy.save", "os.path.join", "os.path.join", "os.path.join", "sorted_emb.append", "open", "os.path.join"], "methods", ["home.repos.pwc.inspect_result.minzwon_tag-based-music-retrieval.preprocess.step1_data_split.Processor.save"], ["", "def", "run", "(", "self", ",", "root", "=", "'YOUR_DATA_PATH'", ")", ":", "\n", "        ", "user_item_emb", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'item_factors_MSD.npy'", ")", ")", "\n", "user_item_ix", "=", "pd", ".", "read_csv", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'items_index_MSD.tsv'", ")", ",", "sep", "=", "'\\t'", ",", "names", "=", "[", "'msd_id'", "]", ")", "\n", "sorted_ix", "=", "np", ".", "load", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'existing_ids.npy'", ")", ")", "\n", "\n", "sorted_emb", "=", "[", "]", "\n", "for", "msd_id", "in", "tqdm", ".", "tqdm", "(", "sorted_ix", ")", ":", "\n", "            ", "ix", "=", "user_item_ix", ".", "loc", "[", "user_item_ix", ".", "msd_id", "==", "msd_id", "]", ".", "index", "[", "0", "]", "\n", "sorted_emb", ".", "append", "(", "user_item_emb", "[", "ix", "]", ")", "\n", "", "np", ".", "save", "(", "open", "(", "os", ".", "path", ".", "join", "(", "root", ",", "'ix_to_cf.npy'", ")", ",", "'wb'", ")", ",", "sorted_emb", ")", "\n", "\n"]]}