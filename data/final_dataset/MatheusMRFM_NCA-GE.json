{"home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Batch.Batch.__init__": [[6, 12], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "self", ".", "degree", "=", "[", "]", "\n", "self", ".", "eigen", "=", "[", "]", "\n", "self", ".", "centrality", "=", "[", "]", "\n", "self", ".", "id", "=", "[", "]", "\n", "self", ".", "size", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Batch.Batch.add_data": [[13, 25], ["numpy.isnan", "numpy.isnan", "numpy.isnan", "Batch.Batch.degree.append", "Batch.Batch.eigen.append", "Batch.Batch.centrality.append", "Batch.Batch.id.append", "print", "print", "print"], "methods", ["None"], ["", "def", "add_data", "(", "self", ",", "d", ",", "e", ",", "c", ",", "id", ")", ":", "\n", "        ", "if", "np", ".", "isnan", "(", "d", ")", ":", "\n", "            ", "print", "(", "\"DEGREE IS NAN!!!\"", ")", "\n", "", "if", "np", ".", "isnan", "(", "e", ")", ":", "\n", "            ", "print", "(", "\"EIGEN IS NAN!!!\"", ")", "\n", "", "if", "np", ".", "isnan", "(", "c", ")", ":", "\n", "            ", "print", "(", "\"CENTRALITY IS NAN!!!\"", ")", "\n", "", "self", ".", "degree", ".", "append", "(", "[", "d", "]", ")", "\n", "self", ".", "eigen", ".", "append", "(", "[", "e", "]", ")", "\n", "self", ".", "centrality", ".", "append", "(", "[", "c", "]", ")", "\n", "self", ".", "id", ".", "append", "(", "id", ")", "\n", "self", ".", "size", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Batch.Batch.reset": [[26, 32], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "degree", "=", "[", "]", "\n", "self", ".", "eigen", "=", "[", "]", "\n", "self", ".", "centrality", "=", "[", "]", "\n", "self", ".", "id", "=", "[", "]", "\n", "self", ".", "size", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Batch.Batch.shuffle": [[33, 49], ["numpy.arange", "random.shuffle", "range", "d_temp.append", "e_temp.append", "c_temp.append", "i_temp.append"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Batch.Batch.shuffle"], ["", "def", "shuffle", "(", "self", ")", ":", "\n", "        ", "index", "=", "np", ".", "arange", "(", "self", ".", "size", ")", "\n", "random", ".", "shuffle", "(", "index", ")", "\n", "d_temp", "=", "[", "]", "\n", "e_temp", "=", "[", "]", "\n", "c_temp", "=", "[", "]", "\n", "i_temp", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "size", ")", ":", "\n", "            ", "d_temp", ".", "append", "(", "self", ".", "degree", "[", "index", "[", "i", "]", "]", ")", "\n", "e_temp", ".", "append", "(", "self", ".", "eigen", "[", "index", "[", "i", "]", "]", ")", "\n", "c_temp", ".", "append", "(", "self", ".", "centrality", "[", "index", "[", "i", "]", "]", ")", "\n", "i_temp", ".", "append", "(", "self", ".", "id", "[", "index", "[", "i", "]", "]", ")", "\n", "", "self", ".", "degree", "=", "d_temp", "\n", "self", ".", "eigen", "=", "e_temp", "\n", "self", ".", "centrality", "=", "c_temp", "\n", "self", ".", "id", "=", "i_temp", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Graph.Graph.__init__": [[7, 9], ["networkx.Graph"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "graph", "=", "nx", ".", "Graph", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Graph.Graph.define_node_sample": [[11, 37], ["Graph.Graph.get_num_nodes", "Graph.Graph.sample.append", "Graph.Graph.get_num_nodes"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes"], ["", "def", "define_node_sample", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "sample", "=", "[", "]", "\n", "count", "=", "0", "\n", "ratio", "=", "2", "\n", "current_ratio", "=", "0", "\n", "count_reverse", "=", "self", ".", "get_num_nodes", "(", ")", "-", "1", "\n", "low_idx_reverse", "=", "count_reverse", "\n", "turn_reverse", "=", "True", "\n", "while", "count", "<", "low_idx_reverse", "and", "count", "<", "count_reverse", ":", "\n", "\t\t\t", "if", "turn_reverse", ":", "\n", "\t\t\t\t", "node", "=", "self", ".", "cent_rank", "[", "count_reverse", "]", "\n", "if", "self", ".", "norm_cent", "[", "node", "]", "<", "Constants", ".", "TH_CENT", ":", "\n", "\t\t\t\t\t", "low_idx_reverse", "=", "count_reverse", "\n", "count_reverse", "=", "self", ".", "get_num_nodes", "(", ")", "-", "1", "\n", "node", "=", "self", ".", "cent_rank", "[", "count_reverse", "]", "\n", "", "count_reverse", "-=", "1", "\n", "current_ratio", "+=", "1", "\n", "if", "current_ratio", ">", "ratio", ":", "\n", "\t\t\t\t\t", "current_ratio", "=", "0", "\n", "turn_reverse", "=", "not", "turn_reverse", "\n", "", "", "else", ":", "\n", "\t\t\t\t", "node", "=", "self", ".", "cent_rank", "[", "count", "]", "\n", "count", "+=", "1", "\n", "turn_reverse", "=", "not", "turn_reverse", "\n", "", "self", ".", "sample", ".", "append", "(", "node", ")", "\n", "", "self", ".", "current_id_sample", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Graph.Graph.get_num_nodes": [[39, 41], ["Graph.Graph.graph.number_of_nodes"], "methods", ["None"], ["", "def", "get_num_nodes", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "graph", ".", "number_of_nodes", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Graph.Graph.get_num_samples": [[43, 45], ["len"], "methods", ["None"], ["", "def", "get_num_samples", "(", "self", ")", ":", "\n", "\t\t", "return", "len", "(", "self", ".", "sample", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Graph.Graph.get_degree": [[47, 49], ["None"], "methods", ["None"], ["", "def", "get_degree", "(", "self", ",", "i", ")", ":", "\n", "\t\t", "return", "self", ".", "norm_degree", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Graph.Graph.get_centrality": [[51, 53], ["None"], "methods", ["None"], ["", "def", "get_centrality", "(", "self", ",", "i", ")", ":", "\n", "\t\t", "return", "self", ".", "norm_cent", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Graph.Graph.get_eigenvector_centrality": [[55, 57], ["None"], "methods", ["None"], ["", "def", "get_eigenvector_centrality", "(", "self", ",", "i", ")", ":", "\n", "\t\t", "return", "self", ".", "norm_eigen", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Graph.Graph.get_data_next_node": [[59, 69], ["Graph.Graph.get_degree", "Graph.Graph.get_eigenvector_centrality", "Graph.Graph.get_centrality", "Graph.Graph.get_num_samples"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_degree", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_eigenvector_centrality", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_centrality", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_samples"], ["", "def", "get_data_next_node", "(", "self", ")", ":", "\n", "\t\t", "node", "=", "self", ".", "sample", "[", "self", ".", "current_id_sample", "]", "\n", "d", "=", "self", ".", "get_degree", "(", "node", ")", "\n", "e", "=", "self", ".", "get_eigenvector_centrality", "(", "node", ")", "\n", "c", "=", "self", ".", "get_centrality", "(", "node", ")", "\n", "self", ".", "current_id_sample", "+=", "1", "\n", "graph_finished", "=", "False", "\n", "if", "self", ".", "current_id_sample", ">=", "self", ".", "get_num_samples", "(", ")", ":", "\n", "\t\t\t", "graph_finished", "=", "True", "\n", "", "return", "d", ",", "e", ",", "c", ",", "node", ",", "graph_finished", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Graph.Graph.predicted_values": [[71, 74], ["range"], "methods", ["None"], ["", "def", "predicted_values", "(", "self", ",", "batch", ",", "cent", ")", ":", "\n", "\t\t", "for", "i", "in", "range", "(", "0", ",", "batch", ".", "size", ")", ":", "\n", "\t\t\t", "self", ".", "predictions", "[", "batch", ".", "id", "[", "i", "]", "]", "=", "cent", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Graph.Graph._normalize_array": [[76, 88], ["numpy.argsort", "numpy.amax", "numpy.amin", "numpy.empty", "range", "print", "Graph.Graph.get_num_nodes", "Graph.Graph.get_num_nodes", "float", "float"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes"], ["", "", "def", "_normalize_array", "(", "self", ",", "true_value", ")", ":", "\n", "\t\t", "rank", "=", "np", ".", "argsort", "(", "true_value", ",", "kind", "=", "'mergesort'", ",", "axis", "=", "None", ")", "\n", "max", "=", "np", ".", "amax", "(", "true_value", ")", "\n", "min", "=", "np", ".", "amin", "(", "true_value", ")", "\n", "norm", "=", "np", ".", "empty", "(", "[", "self", ".", "get_num_nodes", "(", ")", "]", ")", "\n", "if", "max", ">", "0.0", "and", "max", ">", "min", ":", "\n", "\t\t\t", "for", "i", "in", "range", "(", "0", ",", "self", ".", "get_num_nodes", "(", ")", ")", ":", "\n", "\t\t\t\t", "norm", "[", "i", "]", "=", "2.0", "*", "(", "float", "(", "true_value", "[", "i", "]", "-", "min", ")", "/", "float", "(", "max", "-", "min", ")", ")", "-", "1.0", "\n", "", "", "else", ":", "\n", "\t\t\t", "print", "(", "\"Max, Min = (\"", ",", "max", ",", "\", \"", ",", "min", ",", "\")\"", ")", "\n", "\n", "", "return", "norm", ",", "rank", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Graph.Graph._normalize_array_by_rank": [[90, 104], ["numpy.argsort", "numpy.empty", "range", "numpy.amax", "numpy.amin", "Graph.Graph.get_num_nodes", "range", "print", "Graph.Graph.get_num_nodes", "float", "float", "Graph.Graph.get_num_nodes", "Graph.Graph.get_num_nodes", "float", "float"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes"], ["", "def", "_normalize_array_by_rank", "(", "self", ",", "true_value", ")", ":", "\n", "\t\t", "rank", "=", "np", ".", "argsort", "(", "true_value", ",", "kind", "=", "'mergesort'", ",", "axis", "=", "None", ")", "\n", "norm", "=", "np", ".", "empty", "(", "[", "self", ".", "get_num_nodes", "(", ")", "]", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "get_num_nodes", "(", ")", ")", ":", "\n", "\t\t\t", "norm", "[", "rank", "[", "i", "]", "]", "=", "float", "(", "i", "+", "1", ")", "/", "float", "(", "self", ".", "get_num_nodes", "(", ")", ")", "\n", "", "max", "=", "np", ".", "amax", "(", "norm", ")", "\n", "min", "=", "np", ".", "amin", "(", "norm", ")", "\n", "if", "max", ">", "0.0", "and", "max", ">", "min", ":", "\n", "\t\t\t", "for", "i", "in", "range", "(", "0", ",", "self", ".", "get_num_nodes", "(", ")", ")", ":", "\n", "\t\t\t\t", "norm", "[", "i", "]", "=", "2.0", "*", "(", "float", "(", "norm", "[", "i", "]", "-", "min", ")", "/", "float", "(", "max", "-", "min", ")", ")", "-", "1.0", "\n", "", "", "else", ":", "\n", "\t\t\t", "print", "(", "\"Max value = 0\"", ")", "\n", "\n", "", "return", "norm", ",", "rank", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Graph.Graph.normalized_degree_rank": [[106, 109], ["Graph.Graph._normalize_array_by_rank", "Graph.Graph.graph.degree"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph._normalize_array_by_rank"], ["", "def", "normalized_degree_rank", "(", "self", ")", ":", "\n", "\t\t", "degree", "=", "[", "val", "for", "(", "node", ",", "val", ")", "in", "self", ".", "graph", ".", "degree", "(", ")", "]", "\n", "self", ".", "norm_degree", ",", "_", "=", "self", ".", "_normalize_array_by_rank", "(", "degree", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Graph.Graph.normalized_betweenness_rank": [[111, 114], ["Graph.Graph._normalize_array_by_rank", "networkx.betweenness_centrality().values", "networkx.betweenness_centrality"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph._normalize_array_by_rank"], ["", "def", "normalized_betweenness_rank", "(", "self", ")", ":", "\n", "\t\t", "b", "=", "[", "v", "for", "v", "in", "nx", ".", "betweenness_centrality", "(", "self", ".", "graph", ")", ".", "values", "(", ")", "]", "\n", "self", ".", "norm_cent", ",", "self", ".", "cent_rank", "=", "self", ".", "_normalize_array_by_rank", "(", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Graph.Graph.normalized_closeness_rank": [[116, 119], ["Graph.Graph._normalize_array_by_rank", "networkx.closeness_centrality().values", "networkx.closeness_centrality"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph._normalize_array_by_rank"], ["", "def", "normalized_closeness_rank", "(", "self", ")", ":", "\n", "\t\t", "c", "=", "[", "v", "for", "v", "in", "nx", ".", "closeness_centrality", "(", "self", ".", "graph", ",", "wf_improved", "=", "False", ")", ".", "values", "(", ")", "]", "\n", "self", ".", "norm_cent", ",", "self", ".", "cent_rank", "=", "self", ".", "_normalize_array_by_rank", "(", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Graph.Graph.normalized_eigenvector_rank": [[121, 124], ["Graph.Graph._normalize_array_by_rank", "networkx.eigenvector_centrality_numpy().values", "networkx.eigenvector_centrality_numpy"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph._normalize_array_by_rank"], ["", "def", "normalized_eigenvector_rank", "(", "self", ")", ":", "\n", "\t\t", "e", "=", "[", "v", "for", "v", "in", "nx", ".", "eigenvector_centrality_numpy", "(", "self", ".", "graph", ")", ".", "values", "(", ")", "]", "\n", "self", ".", "norm_eigen", ",", "self", ".", "eigen_rank", "=", "self", ".", "_normalize_array_by_rank", "(", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Graph.Graph.normalized_clustering_coef_rank": [[126, 129], ["Graph.Graph._normalize_array_by_rank", "networkx.clustering().values", "networkx.clustering"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph._normalize_array_by_rank"], ["", "def", "normalized_clustering_coef_rank", "(", "self", ")", ":", "\n", "\t\t", "c", "=", "[", "v", "for", "v", "in", "nx", ".", "clustering", "(", "self", ".", "graph", ")", ".", "values", "(", ")", "]", "\n", "self", ".", "norm_cent", ",", "self", ".", "cent_rank", "=", "self", ".", "_normalize_array_by_rank", "(", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Graph.Graph.normalized_flow_rank": [[131, 134], ["Graph.Graph._normalize_array_by_rank", "networkx.current_flow_betweenness_centrality().values", "networkx.current_flow_betweenness_centrality"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph._normalize_array_by_rank"], ["", "def", "normalized_flow_rank", "(", "self", ")", ":", "\n", "\t\t", "c", "=", "[", "v", "for", "v", "in", "nx", ".", "current_flow_betweenness_centrality", "(", "self", ".", "graph", ")", ".", "values", "(", ")", "]", "\n", "self", ".", "norm_cent", ",", "self", ".", "cent_rank", "=", "self", ".", "_normalize_array_by_rank", "(", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Graph.Graph.normalized_second_order_rank": [[136, 139], ["Graph.Graph._normalize_array_by_rank", "networkx.second_order_centrality().values", "networkx.second_order_centrality"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph._normalize_array_by_rank"], ["", "def", "normalized_second_order_rank", "(", "self", ")", ":", "\n", "\t\t", "c", "=", "[", "v", "for", "v", "in", "nx", ".", "second_order_centrality", "(", "self", ".", "graph", ")", ".", "values", "(", ")", "]", "\n", "self", ".", "norm_cent", ",", "self", ".", "cent_rank", "=", "self", ".", "_normalize_array_by_rank", "(", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Graph.Graph.normalized_harmonic_rank": [[141, 144], ["Graph.Graph._normalize_array_by_rank", "networkx.harmonic_centrality().values", "networkx.harmonic_centrality"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph._normalize_array_by_rank"], ["", "def", "normalized_harmonic_rank", "(", "self", ")", ":", "\n", "\t\t", "c", "=", "[", "v", "for", "v", "in", "nx", ".", "harmonic_centrality", "(", "self", ".", "graph", ")", ".", "values", "(", ")", "]", "\n", "self", ".", "norm_cent", ",", "self", ".", "cent_rank", "=", "self", ".", "_normalize_array_by_rank", "(", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Graph.Graph.normalized_load_cent_rank": [[146, 149], ["Graph.Graph._normalize_array_by_rank", "networkx.load_centrality().values", "networkx.load_centrality"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph._normalize_array_by_rank"], ["", "def", "normalized_load_cent_rank", "(", "self", ")", ":", "\n", "\t\t", "c", "=", "[", "v", "for", "v", "in", "nx", ".", "load_centrality", "(", "self", ".", "graph", ")", ".", "values", "(", ")", "]", "\n", "self", ".", "norm_cent", ",", "self", ".", "cent_rank", "=", "self", ".", "_normalize_array_by_rank", "(", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Graph.Graph.normalized_degree": [[151, 154], ["Graph.Graph._normalize_array", "Graph.Graph.graph.degree"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph._normalize_array"], ["", "def", "normalized_degree", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "degree", "=", "[", "val", "for", "(", "node", ",", "val", ")", "in", "self", ".", "graph", ".", "degree", "(", ")", "]", "\n", "self", ".", "norm_degree", ",", "_", "=", "self", ".", "_normalize_array", "(", "self", ".", "degree", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Graph.Graph.normalized_betweenness": [[156, 159], ["Graph.Graph._normalize_array", "networkx.betweenness_centrality().values", "networkx.betweenness_centrality"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph._normalize_array"], ["", "def", "normalized_betweenness", "(", "self", ")", ":", "\n", "\t\t", "b", "=", "[", "v", "for", "v", "in", "nx", ".", "betweenness_centrality", "(", "self", ".", "graph", ")", ".", "values", "(", ")", "]", "\n", "self", ".", "norm_cent", ",", "self", ".", "cent_rank", "=", "self", ".", "_normalize_array", "(", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Graph.Graph.normalized_closeness": [[161, 164], ["Graph.Graph._normalize_array", "networkx.closeness_centrality().values", "networkx.closeness_centrality"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph._normalize_array"], ["", "def", "normalized_closeness", "(", "self", ")", ":", "\n", "\t\t", "c", "=", "[", "v", "for", "v", "in", "nx", ".", "closeness_centrality", "(", "self", ".", "graph", ",", "wf_improved", "=", "False", ")", ".", "values", "(", ")", "]", "\n", "self", ".", "norm_cent", ",", "self", ".", "cent_rank", "=", "self", ".", "_normalize_array", "(", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Graph.Graph.normalized_eigenvector": [[166, 169], ["Graph.Graph._normalize_array", "networkx.eigenvector_centrality_numpy().values", "networkx.eigenvector_centrality_numpy"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph._normalize_array"], ["", "def", "normalized_eigenvector", "(", "self", ")", ":", "\n", "\t\t", "e", "=", "[", "v", "for", "v", "in", "nx", ".", "eigenvector_centrality_numpy", "(", "self", ".", "graph", ")", ".", "values", "(", ")", "]", "\n", "self", ".", "norm_eigen", ",", "_", "=", "self", ".", "_normalize_array", "(", "e", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Graph.Graph.normalized_clustering_coef": [[171, 174], ["Graph.Graph._normalize_array", "networkx.clustering().values", "networkx.clustering"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph._normalize_array"], ["", "def", "normalized_clustering_coef", "(", "self", ")", ":", "\n", "\t\t", "c", "=", "[", "v", "for", "v", "in", "nx", ".", "clustering", "(", "self", ".", "graph", ")", ".", "values", "(", ")", "]", "\n", "self", ".", "norm_cent", ",", "self", ".", "cent_rank", "=", "self", ".", "_normalize_array", "(", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Graph.Graph.normalized_flow": [[176, 179], ["Graph.Graph._normalize_array", "networkx.current_flow_betweenness_centrality().values", "networkx.current_flow_betweenness_centrality"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph._normalize_array"], ["", "def", "normalized_flow", "(", "self", ")", ":", "\n", "\t\t", "c", "=", "[", "v", "for", "v", "in", "nx", ".", "current_flow_betweenness_centrality", "(", "self", ".", "graph", ")", ".", "values", "(", ")", "]", "\n", "self", ".", "norm_cent", ",", "self", ".", "cent_rank", "=", "self", ".", "_normalize_array", "(", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Graph.Graph.normalized_second_order": [[181, 184], ["Graph.Graph._normalize_array", "networkx.second_order_centrality().values", "networkx.second_order_centrality"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph._normalize_array"], ["", "def", "normalized_second_order", "(", "self", ")", ":", "\n", "\t\t", "c", "=", "[", "v", "for", "v", "in", "nx", ".", "second_order_centrality", "(", "self", ".", "graph", ")", ".", "values", "(", ")", "]", "\n", "self", ".", "norm_cent", ",", "self", ".", "cent_rank", "=", "self", ".", "_normalize_array", "(", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Graph.Graph.normalized_harmonic": [[186, 189], ["Graph.Graph._normalize_array", "networkx.harmonic_centrality().values", "networkx.harmonic_centrality"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph._normalize_array"], ["", "def", "normalized_harmonic", "(", "self", ")", ":", "\n", "\t\t", "c", "=", "[", "v", "for", "v", "in", "nx", ".", "harmonic_centrality", "(", "self", ".", "graph", ")", ".", "values", "(", ")", "]", "\n", "self", ".", "norm_cent", ",", "self", ".", "cent_rank", "=", "self", ".", "_normalize_array", "(", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Graph.Graph.normalized_load_cent": [[191, 194], ["Graph.Graph._normalize_array", "networkx.load_centrality().values", "networkx.load_centrality"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph._normalize_array"], ["", "def", "normalized_load_cent", "(", "self", ")", ":", "\n", "\t\t", "c", "=", "[", "v", "for", "v", "in", "nx", ".", "load_centrality", "(", "self", ".", "graph", ")", ".", "values", "(", ")", "]", "\n", "self", ".", "norm_cent", ",", "self", ".", "cent_rank", "=", "self", ".", "_normalize_array", "(", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Graph.Graph.normalized_centralities_rank": [[196, 216], ["Graph.Graph.normalized_degree_rank", "Graph.Graph.normalized_eigenvector_rank", "Graph.Graph.normalized_betweenness_rank", "Graph.Graph.normalized_closeness_rank", "Graph.Graph.normalized_clustering_coef_rank", "Graph.Graph.normalized_flow_rank", "Graph.Graph.normalized_second_order_rank", "Graph.Graph.normalized_harmonic_rank", "Graph.Graph.normalized_load_cent_rank"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_degree_rank", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_eigenvector_rank", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_betweenness_rank", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_closeness_rank", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_clustering_coef_rank", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_flow_rank", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_second_order_rank", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_harmonic_rank", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_load_cent_rank"], ["", "def", "normalized_centralities_rank", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "normalized_degree_rank", "(", ")", "\n", "self", ".", "normalized_eigenvector_rank", "(", ")", "\n", "if", "Constants", ".", "CENTRALITY", "==", "Constants", ".", "BETWEEN", ":", "\n", "\t\t\t", "self", ".", "normalized_betweenness_rank", "(", ")", "\n", "", "elif", "Constants", ".", "CENTRALITY", "==", "Constants", ".", "CLOSE", ":", "\n", "\t\t\t", "self", ".", "normalized_closeness_rank", "(", ")", "\n", "", "elif", "Constants", ".", "CENTRALITY", "==", "Constants", ".", "EIGEN", ":", "\n", "\t\t\t", "self", ".", "norm_cent", "=", "self", ".", "norm_eigen", "\n", "self", ".", "cent_rank", "=", "self", ".", "eigen_rank", "\n", "", "elif", "Constants", ".", "CENTRALITY", "==", "Constants", ".", "CLUSTER_COEF", ":", "\n", "\t\t\t", "self", ".", "normalized_clustering_coef_rank", "(", ")", "\n", "", "elif", "Constants", ".", "CENTRALITY", "==", "Constants", ".", "FLOW", ":", "\n", "\t\t\t", "self", ".", "normalized_flow_rank", "(", ")", "\n", "", "elif", "Constants", ".", "CENTRALITY", "==", "Constants", ".", "SECOND_ORDER", ":", "\n", "\t\t\t", "self", ".", "normalized_second_order_rank", "(", ")", "\n", "", "elif", "Constants", ".", "CENTRALITY", "==", "Constants", ".", "HARMONIC", ":", "\n", "\t\t\t", "self", ".", "normalized_harmonic_rank", "(", ")", "\n", "", "elif", "Constants", ".", "CENTRALITY", "==", "Constants", ".", "LOAD_CENT", ":", "\n", "\t\t\t", "self", ".", "normalized_load_cent_rank", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Graph.Graph.normalized_centralities": [[218, 237], ["Graph.Graph.normalized_degree", "Graph.Graph.normalized_eigenvector", "Graph.Graph.normalized_betweenness", "Graph.Graph.normalized_closeness", "Graph.Graph.normalized_clustering_coef", "Graph.Graph.normalized_flow", "Graph.Graph.normalized_second_order", "Graph.Graph.normalized_harmonic", "Graph.Graph.normalized_load_cent"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_degree", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_eigenvector", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_betweenness", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_closeness", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_clustering_coef", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_flow", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_second_order", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_harmonic", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_load_cent"], ["", "", "def", "normalized_centralities", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "normalized_degree", "(", ")", "\n", "self", ".", "normalized_eigenvector", "(", ")", "\n", "if", "Constants", ".", "CENTRALITY", "==", "Constants", ".", "BETWEEN", ":", "\n", "\t\t\t", "self", ".", "normalized_betweenness", "(", ")", "\n", "", "elif", "Constants", ".", "CENTRALITY", "==", "Constants", ".", "CLOSE", ":", "\n", "\t\t\t", "self", ".", "normalized_closeness", "(", ")", "\n", "", "elif", "Constants", ".", "CENTRALITY", "==", "Constants", ".", "EIGEN", ":", "\n", "\t\t\t", "self", ".", "norm_cent", "=", "self", ".", "norm_eigen", "\n", "", "elif", "Constants", ".", "CENTRALITY", "==", "Constants", ".", "CLUSTER_COEF", ":", "\n", "\t\t\t", "self", ".", "normalized_clustering_coef", "(", ")", "\n", "", "elif", "Constants", ".", "CENTRALITY", "==", "Constants", ".", "FLOW", ":", "\n", "\t\t\t", "self", ".", "normalized_flow", "(", ")", "\n", "", "elif", "Constants", ".", "CENTRALITY", "==", "Constants", ".", "SECOND_ORDER", ":", "\n", "\t\t\t", "self", ".", "normalized_second_order", "(", ")", "\n", "", "elif", "Constants", ".", "CENTRALITY", "==", "Constants", ".", "HARMONIC", ":", "\n", "\t\t\t", "self", ".", "normalized_harmonic", "(", ")", "\n", "", "elif", "Constants", ".", "CENTRALITY", "==", "Constants", ".", "LOAD_CENT", ":", "\n", "\t\t\t", "self", ".", "normalized_load_cent", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Graph.Graph.write_predictions": [[239, 250], ["open", "range", "open.close", "range", "Graph.Graph.get_num_nodes", "open.write", "len", "str", "str"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Summary.Summary.write"], ["", "", "def", "write_predictions", "(", "self", ",", "folder", ",", "sub_folder", ",", "file_name", ")", ":", "\n", "\t\t", "if", "folder", "is", "not", "None", ":", "\n", "\t\t\t", "id", "=", "'0'", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "file_name", ")", ")", ":", "\n", "\t\t\t\t", "if", "file_name", "[", "i", "]", "==", "\".\"", ":", "\n", "\t\t\t\t\t", "id", "=", "file_name", "[", ":", "i", "]", "\n", "", "", "", "name", "=", "folder", "+", "\"Metadata/\"", "+", "sub_folder", "+", "str", "(", "id", ")", "+", "\"_predictions.dat\"", "\n", "f", "=", "open", "(", "name", ",", "\"w\"", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "get_num_nodes", "(", ")", ")", ":", "\n", "\t\t\t", "f", ".", "write", "(", "str", "(", "self", ".", "predictions", "[", "i", "]", ")", "+", "\"\\n\"", ")", "\n", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Graph.Graph.calculate_centralities": [[252, 281], ["range", "os.path.exists", "Graph.Graph.read_meta_data", "len", "print", "Graph.Graph.write_meta_data"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.read_meta_data", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.write_meta_data"], ["", "def", "calculate_centralities", "(", "self", ",", "folder", ",", "sub_folder", ",", "file_name", ")", ":", "\n", "\t\t", "file_exist", "=", "False", "\n", "id", "=", "'0'", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "file_name", ")", ")", ":", "\n", "\t\t\t", "if", "file_name", "[", "i", "]", "==", "\".\"", ":", "\n", "\t\t\t\t", "id", "=", "file_name", "[", ":", "i", "]", "\n", "", "", "metadata_file", "=", "id", "+", "\"_metadata.dat\"", "\n", "if", "Constants", ".", "CENTRALITY", "==", "Constants", ".", "BETWEEN", "or", "Constants", ".", "CENTRALITY", "==", "Constants", ".", "EIGEN", ":", "\n", "\t\t\t", "centrality_folder", "=", "'Betweenness/'", "\n", "", "elif", "Constants", ".", "CENTRALITY", "==", "Constants", ".", "CLOSE", ":", "\n", "\t\t\t", "centrality_folder", "=", "'Closeness/'", "\n", "", "elif", "Constants", ".", "CENTRALITY", "==", "Constants", ".", "CLUSTER_COEF", ":", "\n", "\t\t\t", "centrality_folder", "=", "'Cluster/'", "\n", "", "elif", "Constants", ".", "CENTRALITY", "==", "Constants", ".", "FLOW", ":", "\n", "\t\t\t", "centrality_folder", "=", "'Flow/'", "\n", "", "elif", "Constants", ".", "CENTRALITY", "==", "Constants", ".", "SECOND_ORDER", ":", "\n", "\t\t\t", "centrality_folder", "=", "'Second_Order/'", "\n", "", "elif", "Constants", ".", "CENTRALITY", "==", "Constants", ".", "HARMONIC", ":", "\n", "\t\t\t", "centrality_folder", "=", "'Harmonic/'", "\n", "", "elif", "Constants", ".", "CENTRALITY", "==", "Constants", ".", "LOAD_CENT", ":", "\n", "\t\t\t", "centrality_folder", "=", "'Load_Centrality/'", "\n", "", "else", ":", "\n", "\t\t\t", "centrality_folder", "=", "'Katz/'", "\n", "", "sub_folder", "=", "sub_folder", "+", "centrality_folder", "\n", "file_exist", "=", "os", ".", "path", ".", "exists", "(", "folder", "+", "\"Metadata/\"", "+", "sub_folder", "+", "metadata_file", ")", "\n", "if", "not", "file_exist", ":", "\n", "\t\t\t", "print", "(", "\"No metadata found...\"", ")", "\n", "self", ".", "write_meta_data", "(", "id", ",", "folder", ",", "sub_folder", ")", "\n", "", "self", ".", "read_meta_data", "(", "folder", "+", "\"Metadata/\"", "+", "sub_folder", "+", "metadata_file", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Graph.Graph.write_meta_data": [[283, 316], ["open", "Graph.Graph.normalized_centralities", "open.write", "range", "open.write", "range", "open.write", "range", "Graph.Graph.normalized_centralities_rank", "open.write", "range", "open.write", "range", "open.write", "range", "open.write", "range", "open.close", "os.path.exists", "os.makedirs", "Graph.Graph.get_num_nodes", "open.write", "Graph.Graph.get_num_nodes", "open.write", "Graph.Graph.get_num_nodes", "open.write", "Graph.Graph.get_num_nodes", "open.write", "Graph.Graph.get_num_nodes", "open.write", "Graph.Graph.get_num_nodes", "open.write", "Graph.Graph.get_num_nodes", "open.write", "str", "str", "str", "str", "str", "str", "str", "str", "Graph.Graph.get_degree", "Graph.Graph.get_eigenvector_centrality", "Graph.Graph.get_centrality", "Graph.Graph.get_degree", "Graph.Graph.get_eigenvector_centrality", "Graph.Graph.get_centrality"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_centralities", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Summary.Summary.write", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Summary.Summary.write", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Summary.Summary.write", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_centralities_rank", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Summary.Summary.write", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Summary.Summary.write", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Summary.Summary.write", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Summary.Summary.write", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Summary.Summary.write", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Summary.Summary.write", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Summary.Summary.write", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Summary.Summary.write", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Summary.Summary.write", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Summary.Summary.write", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Summary.Summary.write", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_degree", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_eigenvector_centrality", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_centrality", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_degree", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_eigenvector_centrality", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_centrality"], ["", "def", "write_meta_data", "(", "self", ",", "id", ",", "folder", ",", "sub_folder", ")", ":", "\n", "\t\t", "if", "not", "os", ".", "path", ".", "exists", "(", "folder", "+", "\"Metadata/\"", "+", "sub_folder", ")", ":", "\n", "\t\t\t", "os", ".", "makedirs", "(", "folder", "+", "\"Metadata/\"", "+", "sub_folder", ")", "\n", "\n", "", "name", "=", "folder", "+", "\"Metadata/\"", "+", "sub_folder", "+", "str", "(", "id", ")", "+", "\"_metadata.dat\"", "\n", "f", "=", "open", "(", "name", ",", "\"w\"", ")", "\n", "\n", "self", ".", "normalized_centralities", "(", ")", "\n", "f", ".", "write", "(", "\"DEGREE\\n\"", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "get_num_nodes", "(", ")", ")", ":", "\n", "\t\t\t", "f", ".", "write", "(", "str", "(", "self", ".", "get_degree", "(", "i", ")", ")", "+", "\"\\n\"", ")", "\n", "", "f", ".", "write", "(", "\"EIGENVECTOR\\n\"", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "get_num_nodes", "(", ")", ")", ":", "\n", "\t\t\t", "f", ".", "write", "(", "str", "(", "self", ".", "get_eigenvector_centrality", "(", "i", ")", ")", "+", "\"\\n\"", ")", "\n", "", "f", ".", "write", "(", "\"CENT\\n\"", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "get_num_nodes", "(", ")", ")", ":", "\n", "\t\t\t", "f", ".", "write", "(", "str", "(", "self", ".", "get_centrality", "(", "i", ")", ")", "+", "\"\\n\"", ")", "\n", "\n", "", "self", ".", "normalized_centralities_rank", "(", ")", "\n", "f", ".", "write", "(", "\"DEGREE_RANK\\n\"", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "get_num_nodes", "(", ")", ")", ":", "\n", "\t\t\t", "f", ".", "write", "(", "str", "(", "self", ".", "get_degree", "(", "i", ")", ")", "+", "\"\\n\"", ")", "\n", "", "f", ".", "write", "(", "\"EIGENVECTOR_RANK\\n\"", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "get_num_nodes", "(", ")", ")", ":", "\n", "\t\t\t", "f", ".", "write", "(", "str", "(", "self", ".", "get_eigenvector_centrality", "(", "i", ")", ")", "+", "\"\\n\"", ")", "\n", "", "f", ".", "write", "(", "\"CENT_RANK\\n\"", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "get_num_nodes", "(", ")", ")", ":", "\n", "\t\t\t", "f", ".", "write", "(", "str", "(", "self", ".", "get_centrality", "(", "i", ")", ")", "+", "\"\\n\"", ")", "\n", "", "f", ".", "write", "(", "\"RANK\\n\"", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "get_num_nodes", "(", ")", ")", ":", "\n", "\t\t\t", "f", ".", "write", "(", "str", "(", "self", ".", "cent_rank", "[", "i", "]", ")", "+", "\"\\n\"", ")", "\n", "\n", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Graph.Graph.read_meta_data": [[318, 364], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "numpy.zeros", "open", "open.close", "Graph.Graph.get_num_nodes", "Graph.Graph.get_num_nodes", "Graph.Graph.get_num_nodes", "Graph.Graph.get_num_nodes", "int", "float", "Graph.Graph.get_num_nodes"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes"], ["", "def", "read_meta_data", "(", "self", ",", "path", ")", ":", "\n", "\t\t", "self", ".", "norm_degree", "=", "np", ".", "zeros", "(", "self", ".", "get_num_nodes", "(", ")", ")", "\n", "self", ".", "norm_eigen", "=", "np", ".", "zeros", "(", "self", ".", "get_num_nodes", "(", ")", ")", "\n", "self", ".", "norm_cent", "=", "np", ".", "zeros", "(", "self", ".", "get_num_nodes", "(", ")", ")", "\n", "self", ".", "cent_rank", "=", "np", ".", "zeros", "(", "self", ".", "get_num_nodes", "(", ")", ",", "dtype", "=", "int", ")", "\n", "\n", "f", "=", "open", "(", "path", ",", "\"r\"", ")", "\n", "current_vec", "=", "None", "\n", "is_int", "=", "False", "\n", "i", "=", "0", "\n", "extra", "=", "\"\"", "\n", "extra_input", "=", "\"\"", "\n", "if", "Constants", ".", "TARGET", "==", "Constants", ".", "RANK", ":", "\n", "\t\t\t", "extra", "=", "\"_RANK\"", "\n", "", "if", "Constants", ".", "INPUT", "==", "Constants", ".", "RANK", ":", "\n", "\t\t\t", "extra_input", "=", "\"_RANK\"", "\n", "", "for", "line", "in", "f", ":", "\n", "\t\t\t", "if", "line", "==", "\"DEGREE\"", "+", "extra_input", "+", "\"\\n\"", ":", "\n", "\t\t\t\t", "current_vec", "=", "self", ".", "norm_degree", "\n", "is_int", "=", "False", "\n", "i", "=", "0", "\n", "", "elif", "line", "==", "\"EIGENVECTOR\"", "+", "extra_input", "+", "\"\\n\"", ":", "\n", "\t\t\t\t", "current_vec", "=", "self", ".", "norm_eigen", "\n", "is_int", "=", "False", "\n", "i", "=", "0", "\n", "", "elif", "line", "==", "\"CENT\"", "+", "extra", "+", "\"\\n\"", ":", "\n", "\t\t\t\t", "current_vec", "=", "self", ".", "norm_cent", "\n", "is_int", "=", "False", "\n", "i", "=", "0", "\n", "", "elif", "line", "==", "\"RANK\"", "+", "\"\\n\"", ":", "\n", "\t\t\t\t", "current_vec", "=", "self", ".", "cent_rank", "\n", "is_int", "=", "True", "\n", "i", "=", "0", "\n", "", "elif", "current_vec", "is", "not", "None", "and", "line", "!=", "'-'", ":", "\n", "\t\t\t\t", "if", "is_int", ":", "\n", "\t\t\t\t\t", "current_vec", "[", "i", "]", "=", "int", "(", "line", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "current_vec", "[", "i", "]", "=", "float", "(", "line", ")", "\n", "", "i", "+=", "1", "\n", "if", "i", "==", "self", ".", "get_num_nodes", "(", ")", ":", "\n", "\t\t\t\t\t", "current_vec", "=", "None", "\n", "\n", "", "", "", "if", "Constants", ".", "CENTRALITY", "==", "Constants", ".", "EIGEN", ":", "\n", "\t\t\t", "self", ".", "norm_cent", "=", "self", ".", "norm_eigen", "\n", "\n", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Graph.Graph.generate_random_graph": [[366, 368], ["networkx.erdos_renyi_graph"], "methods", ["None"], ["", "def", "generate_random_graph", "(", "self", ",", "n", ",", "p", ")", ":", "\n", "\t\t", "self", ".", "graph", "=", "nx", ".", "erdos_renyi_graph", "(", "n", ",", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Graph.Graph.generate_smallworld_graph": [[370, 372], ["networkx.newman_watts_strogatz_graph"], "methods", ["None"], ["", "def", "generate_smallworld_graph", "(", "self", ",", "n", ",", "p", ",", "k", ")", ":", "\n", "\t\t", "self", ".", "graph", "=", "nx", ".", "newman_watts_strogatz_graph", "(", "n", ",", "k", ",", "p", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Graph.Graph.generate_scalefree_graph": [[374, 376], ["networkx.barabasi_albert_graph"], "methods", ["None"], ["", "def", "generate_scalefree_graph", "(", "self", ",", "n", ",", "m", ")", ":", "\n", "\t\t", "self", ".", "graph", "=", "nx", ".", "barabasi_albert_graph", "(", "n", ",", "m", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Graph.Graph.read_file_type": [[378, 398], ["len", "networkx.read_gexf", "Graph.Graph.get_num_nodes", "print", "print", "sys.exit", "networkx.read_edgelist", "print", "sys.exit", "networkx.Graph"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes"], ["", "def", "read_file_type", "(", "self", ",", "path", ",", "delimiter", ")", ":", "\n", "\t\t", "dot_pos", "=", "len", "(", "path", ")", "-", "1", "\n", "while", "path", "[", "dot_pos", "]", "!=", "'.'", ":", "\n", "\t\t\t", "dot_pos", "-=", "1", "\n", "if", "dot_pos", "<", "0", ":", "\n", "\t\t\t\t", "print", "(", "\"ERROR: unkonw graph file '\"", ",", "path", ",", "\"'\"", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "", "", "file_ext", "=", "path", "[", "dot_pos", ":", "]", "\n", "if", "file_ext", "==", "\".gexf\"", ":", "\n", "\t\t\t", "self", ".", "graph", "=", "nx", ".", "read_gexf", "(", "path", ",", "node_type", "=", "int", ")", "\n", "", "elif", "file_ext", "==", "\".csv\"", "or", "file_ext", "==", "\".txt\"", ":", "\n", "\t\t\t", "self", ".", "graph", "=", "nx", ".", "read_edgelist", "(", "path", ",", "create_using", "=", "nx", ".", "Graph", "(", ")", ",", "nodetype", "=", "int", ",", "delimiter", "=", "delimiter", ")", "\n", "", "else", ":", "\n", "\t\t\t", "print", "(", "\"ERROR: unkonw graph file '\"", ",", "path", ",", "\"'\"", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "", "if", "Constants", ".", "MODE", "!=", "Constants", ".", "TRAIN", ":", "\n", "\t\t\t", "Constants", ".", "BATCH_SIZE", "=", "self", ".", "get_num_nodes", "(", ")", "\n", "print", "(", "\"NEW BATCH SIZE = \"", ",", "Constants", ".", "BATCH_SIZE", ")", "\n", "#print(\"\\n\", nx.info(self.graph))", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Graph.Graph.get_delimiter": [[401, 421], ["open", "line.split", "print", "sys.exit", "print", "sys.exit"], "methods", ["None"], ["", "", "def", "get_delimiter", "(", "self", ",", "folder", ",", "file", ")", ":", "\n", "\t\t", "f", "=", "open", "(", "folder", "+", "\"delimiter_info/delimiter.txt\"", ",", "\"r\"", ")", "\n", "delimiter", "=", "'!'", "\n", "for", "line", "in", "f", ":", "\n", "\t\t\t", "words", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "if", "words", "[", "0", "]", "==", "file", ":", "\n", "\t\t\t\t", "if", "words", "[", "1", "]", "==", "\"space\\n\"", ":", "\n", "\t\t\t\t\t", "delimiter", "=", "' '", "\n", "", "elif", "words", "[", "1", "]", "==", "\"tab\\n\"", ":", "\n", "\t\t\t\t\t", "delimiter", "=", "'\\t'", "\n", "", "elif", "words", "[", "1", "]", "==", "\",\\n\"", ":", "\n", "\t\t\t\t\t", "delimiter", "=", "','", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "print", "(", "\"Unknown delimiter '\"", "+", "words", "[", "1", "]", "+", "\"' in 'delimiter.txt' file.\"", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "", "", "", "if", "delimiter", "==", "'!'", ":", "\n", "\t\t\t", "print", "(", "\"No delimiter information found about graph '\"", "+", "file", "+", "\"' in the 'delimiter.txt' file.\"", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "", "return", "delimiter", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Graph.Graph.save_file": [[423, 427], ["networkx.write_gexf", "Graph.Graph.write_meta_data", "str"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.write_meta_data"], ["", "def", "save_file", "(", "self", ",", "id", ",", "folder", ",", "sub_folder", ")", ":", "\n", "\t\t", "name", "=", "folder", "+", "sub_folder", "+", "str", "(", "id", ")", "+", "\".gexf\"", "\n", "nx", ".", "write_gexf", "(", "self", ".", "graph", ",", "name", ")", "\n", "self", ".", "write_meta_data", "(", "id", ",", "folder", ",", "sub_folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Graph.Graph.read_file": [[429, 437], ["Graph.Graph.read_file_type", "Graph.Graph.calculate_centralities", "Graph.Graph.define_node_sample", "numpy.zeros", "Graph.Graph.get_delimiter", "Graph.Graph.get_num_nodes"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.read_file_type", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.calculate_centralities", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.define_node_sample", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_delimiter", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes"], ["", "def", "read_file", "(", "self", ",", "folder", ",", "sub_folder", ",", "file_name", ")", ":", "\n", "\t\t", "delimiter", "=", "' '", "\n", "if", "Constants", ".", "MODE", "==", "Constants", ".", "REAL_NET", ":", "\n", "\t\t\t", "delimiter", "=", "self", ".", "get_delimiter", "(", "folder", "+", "sub_folder", ",", "file_name", ")", "\n", "", "self", ".", "read_file_type", "(", "folder", "+", "sub_folder", "+", "file_name", ",", "delimiter", ")", "\n", "self", ".", "calculate_centralities", "(", "folder", ",", "sub_folder", ",", "file_name", ")", "\n", "self", ".", "define_node_sample", "(", ")", "\n", "self", ".", "predictions", "=", "np", ".", "zeros", "(", "self", ".", "get_num_nodes", "(", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Neural_Net.Neural_Net.__init__": [[26, 38], ["Neural_Net.Neural_Net._build_network", "Neural_Net.Neural_Net._prepare_loss_function"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Neural_Net.Neural_Net._build_network", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Neural_Net.Neural_Net._prepare_loss_function"], ["\t", "def", "__init__", "(", "self", ",", "scope", ",", "session", ",", "learning_rate", ")", ":", "\n", "\t\t", "self", ".", "session", "=", "session", "\n", "self", ".", "scope", "=", "scope", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "\n", "if", "Constants", ".", "USE_GPU", ":", "\n", "\t\t\t", "self", ".", "device", "=", "'/gpu:0'", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "device", "=", "'/cpu:0'", "\n", "\n", "", "self", ".", "_build_network", "(", ")", "\n", "self", ".", "_prepare_loss_function", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Neural_Net.Neural_Net._build_network": [[40, 42], ["Neural_Net.Neural_Net._node_embed"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Neural_Net.Neural_Net._node_embed"], ["", "def", "_build_network", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "_node_embed", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Neural_Net.Neural_Net._node_embed": [[44, 77], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.device", "tensorflow.device", "tensorflow.device", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.concat", "tensorflow.concat", "tensorflow.concat", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer", "tensorflow.constant_initializer"], "methods", ["None"], ["", "def", "_node_embed", "(", "self", ")", ":", "\n", "\t\t", "with", "tf", ".", "variable_scope", "(", "self", ".", "scope", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ",", "tf", ".", "device", "(", "self", ".", "device", ")", ":", "\n", "#with tf.variable_scope(self.scope), tf.device(self.device):", "\n", "\t\t\t", "self", ".", "node_degree", "=", "tf", ".", "placeholder", "(", "\"float\"", ",", "[", "None", ",", "1", "]", ",", "name", "=", "\"degree\"", ")", "\n", "self", ".", "node_eigen", "=", "tf", ".", "placeholder", "(", "\"float\"", ",", "[", "None", ",", "1", "]", ",", "name", "=", "\"eigen\"", ")", "\n", "#weight_init = normalized_columns_initializer(Constants.INIT_WEIGHT)", "\n", "weight_init", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", "uniform", "=", "True", ")", "\n", "input", "=", "tf", ".", "concat", "(", "values", "=", "[", "self", ".", "node_degree", ",", "self", ".", "node_eigen", "]", ",", "axis", "=", "1", ")", "\n", "\n", "h", "=", "layer", ".", "fully_connected", "(", "input", ",", "\n", "Constants", ".", "UNITS_H1", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "tanh", ",", "#tf.nn.relu,", "\n", "weights_initializer", "=", "weight_init", ",", "\n", "biases_initializer", "=", "tf", ".", "constant_initializer", "(", "Constants", ".", "INIT_WEIGHT", ")", ",", "\n", "scope", "=", "'FC_1'", ")", "\n", "h", "=", "layer", ".", "fully_connected", "(", "h", ",", "\n", "Constants", ".", "UNITS_H2", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "tanh", ",", "#tf.nn.relu,", "\n", "weights_initializer", "=", "weight_init", ",", "\n", "biases_initializer", "=", "tf", ".", "constant_initializer", "(", "Constants", ".", "INIT_WEIGHT", ")", ",", "\n", "scope", "=", "'FC_2'", ")", "\n", "h", "=", "layer", ".", "fully_connected", "(", "h", ",", "\n", "Constants", ".", "UNITS_H3", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "tanh", ",", "#tf.nn.relu,", "\n", "weights_initializer", "=", "weight_init", ",", "\n", "biases_initializer", "=", "tf", ".", "constant_initializer", "(", "Constants", ".", "INIT_WEIGHT", ")", ",", "\n", "scope", "=", "'FC_3'", ")", "\n", "self", ".", "centrality", "=", "layer", ".", "fully_connected", "(", "h", ",", "\n", "1", ",", "\n", "activation_fn", "=", "None", ",", "\n", "weights_initializer", "=", "weight_init", ",", "\n", "biases_initializer", "=", "tf", ".", "constant_initializer", "(", "Constants", ".", "INIT_WEIGHT", ")", ",", "\n", "scope", "=", "'FC_4'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Neural_Net.Neural_Net._prepare_loss_function": [[79, 110], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.device", "tensorflow.device", "tensorflow.device", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.losses.mean_squared_error", "tensorflow.losses.mean_squared_error", "tensorflow.losses.mean_squared_error", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "Neural_Net.Neural_Net.optimizer.compute_gradients", "Neural_Net.Neural_Net.optimizer.apply_gradients", "tensorflow.stack", "tensorflow.stack", "tensorflow.stack", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss"], "methods", ["None"], ["", "", "def", "_prepare_loss_function", "(", "self", ")", ":", "\n", "\t\t", "with", "tf", ".", "variable_scope", "(", "self", ".", "scope", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ",", "tf", ".", "device", "(", "self", ".", "device", ")", ":", "\n", "#with tf.variable_scope(self.scope), tf.device(self.device):", "\n", "\t\t\t", "\"\"\"\n\t\t\tThis region builds the operations for updating the trainable\n\t\t\tvariables (weights) of the Neural Network.\n\t\t\t\"\"\"", "\n", "self", ".", "true_centrality", "=", "tf", ".", "placeholder", "(", "\"float\"", ",", "[", "None", ",", "1", "]", ",", "name", "=", "\"true_state\"", ")", "\n", "params", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "self", ".", "scope", ")", "\n", "\n", "#self.main_loss\t\t= tf.nn.l2_loss(self.centrality - self.true_centrality, name='l2')", "\n", "#self.main_loss \t\t= tf.reduce_mean(tf.squared_difference(self.centrality, self.true_centrality))", "\n", "self", ".", "main_loss", "=", "tf", ".", "losses", ".", "mean_squared_error", "(", "self", ".", "true_centrality", ",", "self", ".", "centrality", ")", "\n", "self", ".", "regularization", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "stack", "(", "[", "tf", ".", "nn", ".", "l2_loss", "(", "var", ")", "for", "var", "in", "params", "]", ")", ",", "name", "=", "'regularization'", ")", "\n", "\n", "self", ".", "total_loss", "=", "self", ".", "main_loss", "+", "Constants", ".", "LAMBDA_REGUL", "*", "self", ".", "regularization", "\n", "\n", "#self.learning_rate = tf.placeholder(tf.float32,shape=(),name=\"learing_rate\")", "\n", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "learning_rate", ",", "use_locking", "=", "True", ")", "\n", "#self.optimizer = tf.train.RMSPropOptimizer(learning_rate=self.learning_rate, decay=0.9)", "\n", "#self.optimizer = tf.train.MomentumOptimizer(LEARNING_RATE, 0.9, use_locking=True)", "\n", "\n", "\"\"\"\n\t\t\tCompute gradients of the loss function with respect to the\n\t\t\tvariables of the network. Then, apply gradients to update the weights\n\t\t\tof the network\n\t\t\t\"\"\"", "\n", "gvs", "=", "self", ".", "optimizer", ".", "compute_gradients", "(", "self", ".", "total_loss", ")", "\n", "capped_gvs", "=", "[", "(", "tf", ".", "clip_by_value", "(", "grad", ",", "-", "1.", ",", "1.", ")", ",", "var", ")", "for", "grad", ",", "var", "in", "gvs", "]", "\n", "self", ".", "gradients", "=", "capped_gvs", "\n", "self", ".", "minimize", "=", "self", ".", "optimizer", ".", "apply_gradients", "(", "capped_gvs", ")", "\n", "#self.minimize = self.optimizer.minimize(self.total_loss)", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Neural_Net.Neural_Net.get_node_embed": [[113, 119], ["session.run"], "methods", ["None"], ["", "", "def", "get_node_embed", "(", "self", ",", "session", ",", "batch", ")", ":", "\n", "\t\t", "e", "=", "session", ".", "run", "(", "[", "self", ".", "node_embed", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "node_degree", ":", "batch", ".", "degree", ",", "\n", "self", ".", "node_eigen", ":", "batch", ".", "eigen", "}", ")", "\n", "\n", "return", "e", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Neural_Net.Neural_Net.train_network": [[121, 134], ["session.run"], "methods", ["None"], ["", "def", "train_network", "(", "self", ",", "session", ",", "batch", ")", ":", "\n", "\t\t", "_", ",", "tl", ",", "ml", ",", "rl", ",", "c", "=", "session", ".", "run", "(", "[", "self", ".", "minimize", ",", "\n", "self", ".", "total_loss", ",", "\n", "self", ".", "main_loss", ",", "\n", "self", ".", "regularization", ",", "\n", "self", ".", "centrality", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "node_degree", ":", "batch", ".", "degree", ",", "\n", "self", ".", "node_eigen", ":", "batch", ".", "eigen", ",", "\n", "self", ".", "true_centrality", ":", "batch", ".", "centrality", "}", ")", "\n", "\n", "#print c", "\n", "\n", "return", "tl", ",", "ml", ",", "rl", ",", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Neural_Net.Neural_Net.test_network": [[136, 152], ["session.run"], "methods", ["None"], ["", "def", "test_network", "(", "self", ",", "session", ",", "batch", ")", ":", "\n", "\t\t", "tl", ",", "ml", ",", "rl", ",", "c", "=", "session", ".", "run", "(", "[", "self", ".", "total_loss", ",", "\n", "self", ".", "main_loss", ",", "\n", "self", ".", "regularization", ",", "\n", "self", ".", "centrality", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "node_degree", ":", "batch", ".", "degree", ",", "\n", "self", ".", "node_eigen", ":", "batch", ".", "eigen", ",", "\n", "self", ".", "true_centrality", ":", "batch", ".", "centrality", "}", ")", "\n", "\n", "\"\"\"for c_t, c_p in zip(batch.centrality, c):\n\t\t\tif c_t > c_p:\n\t\t\t\tprint \"(\", c_t, \",\", c_p, \") --> \", c_t-c_p\n\t\t\telse:\n\t\t\t\tprint \"(\", c_t, \",\", c_p, \") --> \", c_p-c_t\"\"\"", "\n", "\n", "return", "tl", ",", "ml", ",", "rl", ",", "c", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Neural_Net.normalized_columns_initializer": [[14, 20], ["numpy.random.randn().astype", "tensorflow.constant", "numpy.sqrt", "numpy.random.randn", "numpy.square().sum", "numpy.square"], "function", ["None"], ["def", "normalized_columns_initializer", "(", "std", "=", "1.0", ")", ":", "\n", "\t", "def", "_initializer", "(", "shape", ",", "dtype", "=", "None", ",", "partition_info", "=", "None", ")", ":", "\n", "\t\t", "out", "=", "np", ".", "random", ".", "randn", "(", "*", "shape", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "out", "*=", "std", "/", "np", ".", "sqrt", "(", "np", ".", "square", "(", "out", ")", ".", "sum", "(", "axis", "=", "0", ",", "keepdims", "=", "True", ")", ")", "\n", "return", "tf", ".", "constant", "(", "out", ")", "\n", "", "return", "_initializer", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Worker.Worker.__init__": [[27, 63], ["epochs.assign_add", "epochs_test.assign_add", "total_graphs.assign_add", "train_nodes.assign_add", "test_nodes.assign_add", "Graph.Graph.Graph", "Worker.Worker.load_graph_set_data", "Neural_Net.Neural_Net.Neural_Net", "range", "batch.append", "str", "Batch"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Worker.Worker.load_graph_set_data"], ["\t", "def", "__init__", "(", "self", ",", "id", ",", "session", ",", "learning_rate", ",", "epochs", ",", "epochs_test", ",", "total_graphs", ",", "train_nodes", ",", "test_nodes", ",", "summary", ")", ":", "\n", "\t\t", "self", ".", "tid", "=", "id", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "session", "=", "session", "\n", "self", ".", "increase_epoch", "=", "epochs", ".", "assign_add", "(", "1", ")", "\n", "self", ".", "increase_epoch_test", "=", "epochs_test", ".", "assign_add", "(", "1", ")", "\n", "self", ".", "increase_graph", "=", "total_graphs", ".", "assign_add", "(", "1", ")", "\n", "self", ".", "increase_node", "=", "train_nodes", ".", "assign_add", "(", "1", ")", "\n", "self", ".", "increase_node_test", "=", "test_nodes", ".", "assign_add", "(", "1", ")", "\n", "self", ".", "total_graphs", "=", "total_graphs", "\n", "self", ".", "summary", "=", "summary", "\n", "\n", "self", ".", "graph", "=", "Graph", "(", ")", "\n", "self", ".", "folder_name", "=", "Constants", ".", "FLD_GRAPH", "\n", "self", ".", "train_subfolder", "=", "Constants", ".", "TRAIN_SUB_FLD", "\n", "self", ".", "test_subfolder", "=", "Constants", ".", "TEST_SUB_FLD", "\n", "if", "Constants", ".", "TEST_NUM", ">", "0", ":", "\n", "\t\t\t", "self", ".", "test_subfolder", "=", "\"Test_\"", "+", "str", "(", "Constants", ".", "TEST_NUM", ")", "+", "\"/\"", "\n", "", "self", ".", "real_net_subfolder", "=", "\"Real_Networks/\"", "\n", "self", ".", "test_number", "=", "-", "1", "\n", "self", ".", "mode", "=", "Constants", ".", "MODE", "\n", "self", ".", "load_graph_set_data", "(", ")", "\n", "self", ".", "local_batch", "=", "[", "]", "\n", "self", ".", "last_batch", "=", "-", "1", "\n", "\n", "if", "self", ".", "tid", "==", "'global'", ":", "\n", "\t\t\t", "global", "neural_net", ",", "current_mode", "\n", "global", "batch", ",", "full_batch", ",", "epoch", "\n", "neural_net", "=", "Neural_Net", "(", "self", ".", "tid", ",", "session", ",", "learning_rate", ")", "\n", "batch", "=", "[", "]", "\n", "full_batch", "=", "[", "]", "\n", "epoch", "=", "0", "\n", "epoch_test", "=", "0", "\n", "current_mode", "=", "Constants", ".", "MODE", "\n", "for", "i", "in", "range", "(", "0", ",", "Constants", ".", "N_PARALLEL_BATCH", ")", ":", "\n", "\t\t\t\t", "batch", ".", "append", "(", "Batch", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Worker.Worker.load_graph_set_data": [[65, 72], ["len", "len", "len", "os.listdir", "os.path.isfile", "os.listdir", "os.path.isfile", "os.listdir", "os.path.isfile"], "methods", ["None"], ["", "", "", "def", "load_graph_set_data", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "train_files", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "self", ".", "folder_name", "+", "self", ".", "train_subfolder", ")", "if", "os", ".", "path", ".", "isfile", "(", "self", ".", "folder_name", "+", "self", ".", "train_subfolder", "+", "f", ")", "]", "\n", "self", ".", "train_size", "=", "len", "(", "self", ".", "train_files", ")", "\n", "self", ".", "test_files", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "self", ".", "folder_name", "+", "self", ".", "test_subfolder", ")", "if", "os", ".", "path", ".", "isfile", "(", "self", ".", "folder_name", "+", "self", ".", "test_subfolder", "+", "f", ")", "]", "\n", "self", ".", "test_size", "=", "len", "(", "self", ".", "test_files", ")", "\n", "self", ".", "real_net_files", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "self", ".", "folder_name", "+", "self", ".", "real_net_subfolder", ")", "if", "os", ".", "path", ".", "isfile", "(", "self", ".", "folder_name", "+", "self", ".", "real_net_subfolder", "+", "f", ")", "]", "\n", "self", ".", "real_net_size", "=", "len", "(", "self", ".", "real_net_files", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Worker.Worker.work": [[74, 88], ["coordinator.should_stop", "Worker.Worker.load_next_graph", "Worker.Worker.train_over_graph", "Worker.Worker.write_mean_kendall_b_tau", "Worker.Worker.write_mean_kendall_b_tau"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Worker.Worker.load_next_graph", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Worker.Worker.train_over_graph", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Worker.Worker.write_mean_kendall_b_tau", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Worker.Worker.write_mean_kendall_b_tau"], ["", "def", "work", "(", "self", ",", "coordinator", ",", "saver", ")", ":", "\n", "\t\t", "global", "kendall_b_tau", "\n", "while", "not", "coordinator", ".", "should_stop", "(", ")", ":", "\n", "\t\t\t", "sub_folder", ",", "file_name", ",", "epoch_end", "=", "self", ".", "load_next_graph", "(", ")", "\n", "node_count", "=", "self", ".", "train_over_graph", "(", "saver", ",", "sub_folder", ",", "file_name", ")", "\n", "if", "self", ".", "mode", "==", "Constants", ".", "REAL_NET", ":", "\n", "\t\t\t\t", "self", ".", "write_mean_kendall_b_tau", "(", "file_name", ")", "\n", "kendall_b_tau", "=", "[", "]", "\n", "", "if", "self", ".", "mode", "==", "Constants", ".", "TRAIN", "and", "node_count", ">", "Constants", ".", "MAX_STEPS", ":", "\n", "\t\t\t\t", "break", "\n", "", "elif", "self", ".", "mode", "!=", "Constants", ".", "TRAIN", "and", "epoch_end", ":", "\n", "\t\t\t\t", "if", "self", ".", "mode", "==", "Constants", ".", "TEST", ":", "\n", "\t\t\t\t\t", "self", ".", "write_mean_kendall_b_tau", "(", "None", ")", "\n", "", "break", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Worker.Worker.load_next_graph": [[90, 150], ["lock.acquire", "lock.release", "Worker.Worker.graph.read_file", "print", "numpy.arange", "numpy.random.shuffle", "Worker.Worker.session.run", "Worker.Worker.session.run", "numpy.arange", "numpy.random.shuffle", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.read_file", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Batch.Batch.shuffle", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Batch.Batch.shuffle"], ["", "", "", "def", "load_next_graph", "(", "self", ")", ":", "\n", "\t\t", "global", "graph_train_number", ",", "graph_train", "\n", "global", "graph_test_number", ",", "graph_test", "\n", "global", "epoch", ",", "epoch_test", ",", "current_mode", "\n", "\n", "lock", ".", "acquire", "(", ")", "\n", "epoch_end", "=", "False", "\n", "if", "current_mode", "==", "Constants", ".", "TRAIN", ":", "\n", "\t\t\t", "if", "graph_train", "is", "None", ":", "\n", "\t\t\t\t", "graph_train", "=", "np", ".", "arange", "(", "self", ".", "train_size", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "graph_train", ")", "\n", "graph_train_number", "=", "0", "\n", "", "number", "=", "graph_train_number", "\n", "g_number", "=", "graph_train", "[", "graph_train_number", "]", "\n", "sub_folder", "=", "self", ".", "train_subfolder", "\n", "file_name", "=", "self", ".", "train_files", "[", "g_number", "]", "\n", "graph_train_number", "+=", "1", "\n", "if", "graph_train_number", ">=", "self", ".", "train_size", ":", "\n", "\t\t\t\t", "epoch", "=", "self", ".", "session", ".", "run", "(", "self", ".", "increase_epoch", ")", "\n", "#self.mode = TEST", "\n", "#current_mode = TEST", "\n", "graph_train", "=", "None", "\n", "", "", "else", ":", "\n", "\t\t\t", "if", "graph_test", "is", "None", ":", "\n", "\t\t\t\t", "if", "current_mode", "==", "Constants", ".", "TEST", ":", "\n", "\t\t\t\t\t", "graph_test", "=", "np", ".", "arange", "(", "self", ".", "test_size", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "graph_test", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "graph_test", "=", "np", ".", "arange", "(", "self", ".", "real_net_size", ")", "\n", "", "graph_test_number", "=", "0", "\n", "", "number", "=", "graph_test_number", "\n", "g_number", "=", "graph_test", "[", "graph_test_number", "]", "\n", "if", "current_mode", "==", "Constants", ".", "TEST", ":", "\n", "\t\t\t\t", "file_list", "=", "self", ".", "test_files", "\n", "sub_folder", "=", "self", ".", "test_subfolder", "\n", "", "else", ":", "\n", "\t\t\t\t", "file_list", "=", "self", ".", "real_net_files", "\n", "sub_folder", "=", "self", ".", "real_net_subfolder", "\n", "", "file_name", "=", "file_list", "[", "g_number", "]", "\n", "graph_test_number", "+=", "1", "\n", "if", "current_mode", "==", "Constants", ".", "TEST", ":", "\n", "\t\t\t\t", "set_size", "=", "self", ".", "test_size", "\n", "", "else", ":", "\n", "\t\t\t\t", "set_size", "=", "self", ".", "real_net_size", "\n", "", "if", "graph_test_number", ">=", "set_size", ":", "\n", "\t\t\t\t", "if", "Constants", ".", "MODE", "!=", "Constants", ".", "TRAIN", ":", "\n", "\t\t\t\t\t", "epoch_end", "=", "True", "\n", "", "epoch_test", "=", "self", ".", "session", ".", "run", "(", "self", ".", "increase_epoch_test", ")", "\n", "#if MODE == TRAIN:", "\n", "#\tself.mode = TRAIN", "\n", "#\tcurrent_mode = TRAIN", "\n", "graph_test", "=", "None", "\n", "", "", "lock", ".", "release", "(", ")", "\n", "\n", "path", "=", "self", ".", "folder_name", "+", "sub_folder", "+", "file_name", "\n", "self", ".", "graph", ".", "read_file", "(", "self", ".", "folder_name", ",", "sub_folder", ",", "file_name", ")", "\n", "if", "Constants", ".", "MODE", "==", "Constants", ".", "REAL_NET", ":", "\n", "\t\t\t", "print", "(", "\"Graph \"", ",", "path", ",", "\" opened successefully (TOTAL = \"", ",", "number", ",", "\")\"", ")", "\n", "\n", "", "return", "sub_folder", ",", "file_name", ",", "epoch_end", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Worker.Worker.train_over_graph": [[152, 174], ["Worker.Worker.session.run", "Worker.Worker.save_model", "Worker.Worker.fill_batch", "time.time", "nx.eigenvector_centrality_numpy().values", "Worker.Worker.process_full_batch", "time.time", "print", "Worker.Worker.session.run", "Worker.Worker.graph.get_num_nodes", "Worker.Worker.calculate_kendall_tau", "Worker.Worker.graph.write_predictions", "nx.eigenvector_centrality_numpy", "len", "Worker.Worker.process_full_batch"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Worker.Worker.save_model", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Worker.Worker.fill_batch", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Worker.Worker.process_full_batch", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Worker.Worker.calculate_kendall_tau", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.write_predictions", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Worker.Worker.process_full_batch"], ["", "def", "train_over_graph", "(", "self", ",", "saver", ",", "sub_folder", ",", "file_name", ")", ":", "\n", "\t\t", "graph_finished", "=", "False", "\n", "while", "not", "graph_finished", ":", "\n", "\t\t\t", "graph_finished", ",", "node_count", "=", "self", ".", "fill_batch", "(", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "eigen", "=", "nx", ".", "eigenvector_centrality_numpy", "(", "self", ".", "graph", ".", "graph", ")", ".", "values", "(", ")", "\n", "self", ".", "process_full_batch", "(", "node_count", ",", "False", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "elapsed", "=", "end", "-", "start", "\n", "print", "(", "'\\n'", ",", "self", ".", "graph", ".", "get_num_nodes", "(", ")", ",", "\", \"", ",", "elapsed", ",", "'\\n'", ")", "\n", "\n", "", "graph_count", "=", "self", ".", "session", ".", "run", "(", "self", ".", "total_graphs", ")", "\n", "if", "self", ".", "mode", "==", "Constants", ".", "TRAIN", ":", "\n", "\t\t\t", "graph_count", "=", "self", ".", "session", ".", "run", "(", "self", ".", "increase_graph", ")", "\n", "", "elif", "Constants", ".", "MODE", "!=", "Constants", ".", "TRAIN", ":", "\n", "\t\t\t", "while", "len", "(", "self", ".", "local_batch", ")", ">", "0", ":", "\n", "\t\t\t\t", "self", ".", "process_full_batch", "(", "node_count", ",", "True", ")", "\n", "", "self", ".", "calculate_kendall_tau", "(", ")", "\n", "self", ".", "graph", ".", "write_predictions", "(", "self", ".", "folder_name", ",", "sub_folder", ",", "file_name", ")", "\n", "", "self", ".", "save_model", "(", "saver", ",", "graph_count", ")", "\n", "\n", "return", "node_count", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Worker.Worker.fill_batch": [[176, 191], ["range", "Worker.Worker.graph.get_data_next_node", "Worker.Worker.add_to_global_batch", "Worker.Worker.add_to_local_batch", "Worker.Worker.session.run", "Worker.Worker.session.run"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_data_next_node", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Worker.Worker.add_to_global_batch", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Worker.Worker.add_to_local_batch"], ["", "def", "fill_batch", "(", "self", ")", ":", "\n", "\t\t", "for", "_", "in", "range", "(", "0", ",", "Constants", ".", "BATCH_SIZE", ")", ":", "\n", "\t\t\t", "d", ",", "e", ",", "c", ",", "id", ",", "graph_finished", "=", "self", ".", "graph", ".", "get_data_next_node", "(", ")", "\n", "if", "self", ".", "mode", "==", "Constants", ".", "TRAIN", ":", "\n", "\t\t\t\t", "self", ".", "add_to_global_batch", "(", "d", ",", "e", ",", "c", ",", "id", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "self", ".", "add_to_local_batch", "(", "d", ",", "e", ",", "c", ",", "id", ")", "\n", "", "if", "self", ".", "mode", "==", "Constants", ".", "TRAIN", ":", "\n", "\t\t\t\t", "total_count", "=", "self", ".", "session", ".", "run", "(", "self", ".", "increase_node", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "total_count", "=", "self", ".", "session", ".", "run", "(", "self", ".", "increase_node_test", ")", "\n", "", "if", "graph_finished", ":", "\n", "\t\t\t\t", "break", "\n", "\n", "", "", "return", "graph_finished", ",", "total_count", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Worker.Worker.process_full_batch": [[193, 216], ["lock.acquire", "lock.release", "Worker.Worker.summary.add_info", "Worker.Worker.summary.write", "full_batch.pop", "Worker.Worker.shuffle", "Worker.Worker.local_batch.pop", "neural_net.train_network", "neural_net.test_network", "Worker.Worker.graph.predicted_values"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Summary.Summary.add_info", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Summary.Summary.write", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Batch.Batch.shuffle", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Neural_Net.Neural_Net.train_network", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Neural_Net.Neural_Net.test_network", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.predicted_values"], ["", "def", "process_full_batch", "(", "self", ",", "node_count", ",", "overide", ")", ":", "\n", "\t\t", "selected_batch", "=", "None", "\n", "if", "self", ".", "mode", "==", "Constants", ".", "TRAIN", ":", "\n", "\t\t\t", "lock", ".", "acquire", "(", ")", "\n", "if", "full_batch", ":", "\n", "\t\t\t\t", "selected_batch", "=", "full_batch", ".", "pop", "(", "0", ")", "\n", "selected_batch", ".", "shuffle", "(", ")", "\n", "", "lock", ".", "release", "(", ")", "\n", "", "else", ":", "\n", "\t\t\t", "if", "self", ".", "last_batch", ">=", "1", "or", "(", "self", ".", "last_batch", ">=", "0", "and", "overide", ")", ":", "\n", "\t\t\t\t", "selected_batch", "=", "self", ".", "local_batch", ".", "pop", "(", "0", ")", "\n", "self", ".", "last_batch", "-=", "1", "\n", "\n", "", "", "if", "selected_batch", "is", "not", "None", ":", "\n", "\t\t\t", "if", "self", ".", "mode", "==", "Constants", ".", "TRAIN", ":", "\n", "\t\t\t\t", "total_loss", ",", "main_loss", ",", "reg_loss", ",", "c", "=", "neural_net", ".", "train_network", "(", "self", ".", "session", ",", "selected_batch", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "total_loss", ",", "main_loss", ",", "reg_loss", ",", "c", "=", "neural_net", ".", "test_network", "(", "self", ".", "session", ",", "selected_batch", ")", "\n", "if", "Constants", ".", "MODE", "!=", "Constants", ".", "TRAIN", ":", "\n", "\t\t\t\t\t", "self", ".", "graph", ".", "predicted_values", "(", "selected_batch", ",", "c", ")", "\n", "#print(\"Main Loss = \",main_loss/selected_batch.size, \" --- Reg Loss = \", reg_loss/selected_batch.size, \"\\t(TID = \", self.tid, \")\")", "\n", "", "", "self", ".", "summary", ".", "add_info", "(", "main_loss", ",", "reg_loss", ")", "\n", "self", ".", "summary", ".", "write", "(", "node_count", ",", "self", ".", "mode", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Worker.Worker.add_to_global_batch": [[218, 230], ["lock.acquire", "numpy.random.randint", "batch[].add_data", "lock.release", "len", "len", "batch.pop", "full_batch.append", "len", "batch.append", "Batch"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Batch.Batch.add_data"], ["", "", "def", "add_to_global_batch", "(", "self", ",", "d", ",", "n", ",", "c", ",", "id", ")", ":", "\n", "\t\t", "global", "batch", "\n", "lock", ".", "acquire", "(", ")", "\n", "if", "len", "(", "batch", ")", "<", "Constants", ".", "N_PARALLEL_BATCH", ":", "\n", "\t\t\t", "while", "len", "(", "batch", ")", "<", "Constants", ".", "N_PARALLEL_BATCH", ":", "\n", "\t\t\t\t", "batch", ".", "append", "(", "Batch", "(", ")", ")", "\n", "", "", "batch_index", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "batch", ")", ")", "\n", "batch", "[", "batch_index", "]", ".", "add_data", "(", "d", ",", "n", ",", "c", ",", "id", ")", "\n", "if", "batch", "[", "batch_index", "]", ".", "size", ">=", "Constants", ".", "BATCH_SIZE", ":", "\n", "\t\t\t", "full_b", "=", "batch", ".", "pop", "(", "batch_index", ")", "\n", "full_batch", ".", "append", "(", "full_b", ")", "\n", "", "lock", ".", "release", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Worker.Worker.add_to_local_batch": [[232, 237], ["Worker.Worker.local_batch[].add_data", "Worker.Worker.local_batch.append", "Batch"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Batch.Batch.add_data"], ["", "def", "add_to_local_batch", "(", "self", ",", "d", ",", "n", ",", "c", ",", "id", ")", ":", "\n", "\t\t", "if", "self", ".", "last_batch", "==", "-", "1", "or", "self", ".", "local_batch", "[", "self", ".", "last_batch", "]", ".", "size", ">=", "Constants", ".", "BATCH_SIZE", ":", "\n", "\t\t\t", "self", ".", "local_batch", ".", "append", "(", "Batch", "(", ")", ")", "\n", "self", ".", "last_batch", "+=", "1", "\n", "", "self", ".", "local_batch", "[", "self", ".", "last_batch", "]", ".", "add_data", "(", "d", ",", "n", ",", "c", ",", "id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Worker.Worker.calculate_kendall_tau": [[239, 249], ["scipy.kendalltau", "lock.acquire", "kendall_b_tau.append", "lock.release", "print"], "methods", ["None"], ["", "def", "calculate_kendall_tau", "(", "self", ")", ":", "\n", "\t\t", "global", "kendall_b_tau", "\n", "rank_x", "=", "self", ".", "graph", ".", "norm_cent", "\n", "rank_y", "=", "self", ".", "graph", ".", "predictions", "\n", "tau", ",", "p_value", "=", "stats", ".", "kendalltau", "(", "rank_x", ",", "rank_y", ")", "\n", "lock", ".", "acquire", "(", ")", "\n", "if", "self", ".", "mode", "==", "Constants", ".", "REAL_NET", ":", "\n", "\t\t\t", "print", "(", "\"TAU = \"", ",", "tau", ")", "\n", "", "kendall_b_tau", ".", "append", "(", "tau", ")", "\n", "lock", ".", "release", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Worker.Worker.write_mean_kendall_b_tau": [[251, 265], ["open", "open.write", "open.close", "os.path.exists", "os.makedirs", "str", "str", "numpy.std", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Summary.Summary.write"], ["", "def", "write_mean_kendall_b_tau", "(", "self", ",", "file_name", ")", ":", "\n", "\t\t", "global", "kendall_b_tau", "\n", "if", "self", ".", "mode", "==", "Constants", ".", "TEST", ":", "\n", "\t\t\t", "sub_folder", "=", "self", ".", "test_subfolder", "\n", "name", "=", "self", ".", "folder_name", "+", "\"Metadata/\"", "+", "sub_folder", "+", "\"Kendall_\"", "+", "Constants", ".", "SUMMARY_NAME", "+", "\".dat\"", "\n", "", "else", ":", "\n", "\t\t\t", "sub_folder", "=", "self", ".", "real_net_subfolder", "\n", "folder", "=", "self", ".", "folder_name", "+", "\"Metadata/\"", "+", "sub_folder", "+", "Constants", ".", "SUMMARY_NAME", "+", "\"/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "folder", ")", ":", "\n", "\t\t\t\t", "os", ".", "makedirs", "(", "folder", ")", "\n", "", "name", "=", "folder", "+", "\"Kendall_\"", "+", "file_name", "+", "\".dat\"", "\n", "", "f", "=", "open", "(", "name", ",", "\"w\"", ")", "\n", "f", ".", "write", "(", "str", "(", "np", ".", "mean", "(", "kendall_b_tau", ")", ")", "+", "\"\\t\"", "+", "str", "(", "np", ".", "std", "(", "kendall_b_tau", ")", ")", "+", "\"\\n\"", ")", "\n", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Worker.Worker.save_model": [[267, 273], ["saver.save", "str"], "methods", ["None"], ["", "def", "save_model", "(", "self", ",", "saver", ",", "graph_count", ")", ":", "\n", "\t\t", "if", "self", ".", "mode", "==", "Constants", ".", "TRAIN", ":", "\n", "\t\t\t", "if", "graph_count", "%", "Constants", ".", "SAVER_INTERVAL", "==", "0", ":", "\n", "#print (\"Saving model..............\")", "\n", "\t\t\t\t", "if", "Constants", ".", "SAVE_NETWORK", "==", "True", "and", "Constants", ".", "MODE", "==", "Constants", ".", "TRAIN", ":", "\n", "\t\t\t\t\t", "saver", ".", "save", "(", "self", ".", "session", ",", "Constants", ".", "MODEL_PATH", "+", "'/model-'", "+", "str", "(", "graph_count", ")", "+", "'.cptk'", ")", "\n", "#print (\"Model saved!\")", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Summary.Summary.__init__": [[6, 12], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "writer", ",", "mode", ")", ":", "\n", "        ", "self", ".", "mean_loss", "=", "[", "]", "\n", "self", ".", "reg_loss", "=", "[", "]", "\n", "self", ".", "last_write", "=", "0", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "writer", "=", "writer", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Summary.Summary.add_info": [[13, 16], ["Summary.Summary.mean_loss.append", "Summary.Summary.reg_loss.append"], "methods", ["None"], ["", "def", "add_info", "(", "self", ",", "mean_loss", ",", "reg_loss", ")", ":", "\n", "        ", "self", ".", "mean_loss", ".", "append", "(", "mean_loss", ")", "\n", "self", ".", "reg_loss", ".", "append", "(", "reg_loss", ")", "\n", "#self,write(count, mode)", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Summary.Summary.reset": [[18, 21], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "mean_loss", "=", "[", "]", "\n", "self", ".", "reg_loss", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.Baseline.Summary.Summary.write": [[22, 40], ["numpy.mean", "numpy.mean", "tensorflow.Summary", "tensorflow.Summary.value.add", "tensorflow.Summary.value.add", "Summary.Summary.writer.add_summary", "Summary.Summary.writer.flush", "Summary.Summary.reset", "float", "float"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Summary.Summary.reset"], ["", "def", "write", "(", "self", ",", "count", ",", "mode", ")", ":", "\n", "        ", "if", "count", "-", "self", ".", "last_write", ">=", "Constants", ".", "SUMMARY_INTERVAL", "or", "self", ".", "mode", "!=", "mode", ":", "\n", "            ", "self", ".", "last_write", "=", "count", "\n", "mean_loss", "=", "np", ".", "mean", "(", "self", ".", "mean_loss", ")", "\n", "reg_loss", "=", "np", ".", "mean", "(", "self", ".", "reg_loss", ")", "\n", "#print(\"Main Loss = \",mean_loss, \" --- Reg Loss = \", reg_loss)", "\n", "summary", "=", "tf", ".", "Summary", "(", ")", "\n", "if", "self", ".", "mode", "==", "Constants", ".", "TRAIN", ":", "\n", "                ", "name", "=", "Constants", ".", "SUMMARY_NAME", "+", "'/Train_'", "\n", "", "else", ":", "\n", "                ", "name", "=", "Constants", ".", "SUMMARY_NAME", "+", "'/Test_'", "\n", "", "summary", ".", "value", ".", "add", "(", "tag", "=", "name", "+", "'Mean_Loss'", ",", "simple_value", "=", "float", "(", "mean_loss", ")", ")", "\n", "summary", ".", "value", ".", "add", "(", "tag", "=", "name", "+", "'Reg_Loss'", ",", "simple_value", "=", "float", "(", "reg_loss", ")", ")", "\n", "#count = float(frame_count) / float(FRAMES_IN_EPOCH)", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "count", ")", "\n", "self", ".", "writer", ".", "flush", "(", ")", "\n", "self", ".", "reset", "(", ")", "\n", "self", ".", "mode", "=", "mode", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Batch.Batch.__init__": [[7, 15], ["None"], "methods", ["None"], ["        ", "self", ".", "degree", "=", "[", "]", "\n", "self", ".", "eigen", "=", "[", "]", "\n", "self", ".", "centrality", "=", "[", "]", "\n", "self", ".", "id", "=", "[", "]", "\n", "self", ".", "size", "=", "0", "\n", "\n", "", "def", "add_data", "(", "self", ",", "d", ",", "e", ",", "c", ",", "id", ")", ":", "\n", "        ", "if", "np", ".", "isnan", "(", "d", ")", ":", "\n", "            ", "print", "(", "\"DEGREE IS NAN!!!\"", ")", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Batch.Batch.add_data": [[16, 26], ["Batch.Batch.centrality.append", "Batch.Batch.id.append", "len"], "methods", ["None"], ["", "if", "np", ".", "isnan", "(", "e", ")", ":", "\n", "            ", "print", "(", "\"EIGEN IS NAN!!!\"", ")", "\n", "", "if", "np", ".", "isnan", "(", "c", ")", ":", "\n", "            ", "print", "(", "\"CENTRALITY IS NAN!!!\"", ")", "\n", "", "self", ".", "degree", ".", "append", "(", "[", "d", "]", ")", "\n", "self", ".", "eigen", ".", "append", "(", "[", "e", "]", ")", "\n", "self", ".", "centrality", ".", "append", "(", "[", "c", "]", ")", "\n", "self", ".", "id", ".", "append", "(", "id", ")", "\n", "self", ".", "size", "+=", "1", "\n", "\n", "", "def", "reset", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Batch.Batch.reset": [[27, 34], ["None"], "methods", ["None"], ["        ", "self", ".", "degree", "=", "[", "]", "\n", "self", ".", "eigen", "=", "[", "]", "\n", "self", ".", "centrality", "=", "[", "]", "\n", "self", ".", "id", "=", "[", "]", "\n", "self", ".", "size", "=", "0", "\n", "\n", "", "def", "shuffle", "(", "self", ")", ":", "\n", "        ", "index", "=", "np", ".", "arange", "(", "self", ".", "size", ")", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Batch.Batch.shuffle": [[35, 45], ["numpy.arange", "random.shuffle", "range", "c_temp.append", "i_temp.append"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Batch.Batch.shuffle"], ["random", ".", "shuffle", "(", "index", ")", "\n", "d_temp", "=", "[", "]", "\n", "e_temp", "=", "[", "]", "\n", "c_temp", "=", "[", "]", "\n", "i_temp", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "size", ")", ":", "\n", "            ", "d_temp", ".", "append", "(", "self", ".", "degree", "[", "index", "[", "i", "]", "]", ")", "\n", "e_temp", ".", "append", "(", "self", ".", "eigen", "[", "index", "[", "i", "]", "]", ")", "\n", "c_temp", ".", "append", "(", "self", ".", "centrality", "[", "index", "[", "i", "]", "]", ")", "\n", "i_temp", ".", "append", "(", "self", ".", "id", "[", "index", "[", "i", "]", "]", ")", "\n", "", "self", ".", "degree", "=", "d_temp", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.__init__": [[9, 12], ["networkx.Graph"], "methods", ["None"], ["\n", "#---------------------------------------------------------------------------", "\n", "", "def", "define_node_sample", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "sample", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.initialize_embedding": [[14, 18], ["range", "Graph.Graph.get_num_nodes", "Graph.Graph.embed.append", "numpy.zeros"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes"], ["ratio", "=", "2", "\n", "current_ratio", "=", "0", "\n", "count_reverse", "=", "self", ".", "get_num_nodes", "(", ")", "-", "1", "\n", "low_idx_reverse", "=", "count_reverse", "\n", "turn_reverse", "=", "True", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.neighborhood_embedding": [[20, 26], ["numpy.zeros", "Graph.Graph.graph.neighbors", "int"], "methods", ["None"], ["\t\t\t", "if", "turn_reverse", ":", "\n", "\t\t\t\t", "node", "=", "self", ".", "cent_rank", "[", "count_reverse", "]", "\n", "if", "self", ".", "norm_cent", "[", "node", "]", "<", "Constants", ".", "TH_CENT", ":", "\n", "\t\t\t\t\t", "low_idx_reverse", "=", "count_reverse", "\n", "count_reverse", "=", "self", ".", "get_num_nodes", "(", ")", "-", "1", "\n", "node", "=", "self", ".", "cent_rank", "[", "count_reverse", "]", "\n", "", "count_reverse", "-=", "1", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.define_node_sample": [[28, 54], ["Graph.Graph.get_num_nodes", "Graph.Graph.sample.append", "Graph.Graph.get_num_nodes"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes"], ["if", "current_ratio", ">", "ratio", ":", "\n", "\t\t\t\t\t", "current_ratio", "=", "0", "\n", "turn_reverse", "=", "not", "turn_reverse", "\n", "", "", "else", ":", "\n", "\t\t\t\t", "node", "=", "self", ".", "cent_rank", "[", "count", "]", "\n", "count", "+=", "1", "\n", "turn_reverse", "=", "not", "turn_reverse", "\n", "", "self", ".", "sample", ".", "append", "(", "node", ")", "\n", "", "self", ".", "current_id_sample", "=", "0", "\n", "\n", "#---------------------------------------------------------------------------", "\n", "", "def", "get_num_nodes", "(", "self", ")", ":", "\n", "\t\t", "return", "self", ".", "graph", ".", "number_of_nodes", "(", ")", "\n", "\n", "#---------------------------------------------------------------------------", "\n", "", "def", "get_num_samples", "(", "self", ")", ":", "\n", "\t\t", "return", "len", "(", "self", ".", "sample", ")", "\n", "\n", "#---------------------------------------------------------------------------", "\n", "", "def", "get_degree", "(", "self", ",", "i", ")", ":", "\n", "\t\t", "return", "self", ".", "norm_degree", "[", "i", "]", "\n", "\n", "#---------------------------------------------------------------------------", "\n", "", "def", "get_centrality", "(", "self", ",", "i", ")", ":", "\n", "\t\t", "return", "self", ".", "norm_cent", "[", "i", "]", "\n", "\n", "#---------------------------------------------------------------------------", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes": [[56, 58], ["Graph.Graph.graph.number_of_nodes"], "methods", ["None"], ["\t\t", "return", "self", ".", "norm_eigen", "[", "i", "]", "\n", "\n", "#---------------------------------------------------------------------------", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_samples": [[60, 62], ["len"], "methods", ["None"], ["\t\t", "node", "=", "self", ".", "sample", "[", "self", ".", "current_id_sample", "]", "\n", "d", "=", "self", ".", "get_degree", "(", "node", ")", "\n", "e", "=", "self", ".", "get_eigenvector_centrality", "(", "node", ")", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_degree": [[64, 66], ["None"], "methods", ["None"], ["self", ".", "current_id_sample", "+=", "1", "\n", "graph_finished", "=", "False", "\n", "if", "self", ".", "current_id_sample", ">=", "self", ".", "get_num_samples", "(", ")", ":", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_centrality": [[68, 70], ["None"], "methods", ["None"], ["", "return", "d", ",", "e", ",", "c", ",", "node", ",", "graph_finished", "\n", "\n", "#---------------------------------------------------------------------------", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_eigenvector_centrality": [[72, 74], ["None"], "methods", ["None"], ["\t\t", "for", "i", "in", "range", "(", "0", ",", "batch", ".", "size", ")", ":", "\n", "\t\t\t", "self", ".", "predictions", "[", "batch", ".", "id", "[", "i", "]", "]", "=", "cent", "[", "i", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_adj_mtx": [[76, 78], ["None"], "methods", ["None"], ["", "", "def", "_normalize_array", "(", "self", ",", "true_value", ")", ":", "\n", "\t\t", "rank", "=", "np", ".", "argsort", "(", "true_value", ",", "kind", "=", "'mergesort'", ",", "axis", "=", "None", ")", "\n", "max", "=", "np", ".", "amax", "(", "true_value", ")", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_mean_max_degree_neighbor": [[80, 92], ["Graph.Graph.graph.neighbors", "Graph.Graph.get_degree", "int"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_degree"], ["norm", "=", "np", ".", "empty", "(", "[", "self", ".", "get_num_nodes", "(", ")", "]", ")", "\n", "if", "max", ">", "0.0", "and", "max", ">", "min", ":", "\n", "\t\t\t", "for", "i", "in", "range", "(", "0", ",", "self", ".", "get_num_nodes", "(", ")", ")", ":", "\n", "\t\t\t\t", "norm", "[", "i", "]", "=", "2.0", "*", "(", "float", "(", "true_value", "[", "i", "]", "-", "min", ")", "/", "float", "(", "max", "-", "min", ")", ")", "-", "1.0", "\n", "", "", "else", ":", "\n", "\t\t\t", "print", "(", "\"Max, Min = (\"", ",", "max", ",", "\", \"", ",", "min", ",", "\")\"", ")", "\n", "\n", "", "return", "norm", ",", "rank", "\n", "\n", "#---------------------------------------------------------------------------", "\n", "", "def", "_normalize_array_by_rank", "(", "self", ",", "true_value", ")", ":", "\n", "\t\t", "rank", "=", "np", ".", "argsort", "(", "true_value", ",", "kind", "=", "'mergesort'", ",", "axis", "=", "None", ")", "\n", "norm", "=", "np", ".", "empty", "(", "[", "self", ".", "get_num_nodes", "(", ")", "]", ")", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.build_feature_matrix": [[94, 108], ["Graph.Graph.get_num_nodes", "range", "Graph.Graph.get_num_nodes", "Graph.Graph.feature_matrix.append", "Graph.Graph.feature_matrix.append", "Graph.Graph.get_degree", "Graph.Graph.get_mean_max_degree_neighbor", "Graph.Graph.feature_matrix.append", "Graph.Graph.get_mean_max_degree_neighbor", "Graph.Graph.feature_matrix.append", "Graph.Graph.get_degree", "Graph.Graph.get_eigenvector_centrality", "Graph.Graph.get_degree", "Graph.Graph.get_eigenvector_centrality", "Graph.Graph.get_degree", "Graph.Graph.get_eigenvector_centrality"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_degree", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_mean_max_degree_neighbor", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_mean_max_degree_neighbor", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_degree", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_eigenvector_centrality", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_degree", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_eigenvector_centrality", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_degree", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_eigenvector_centrality"], ["\t\t\t", "norm", "[", "rank", "[", "i", "]", "]", "=", "float", "(", "i", "+", "1", ")", "/", "float", "(", "self", ".", "get_num_nodes", "(", ")", ")", "\n", "", "max", "=", "np", ".", "amax", "(", "norm", ")", "\n", "min", "=", "np", ".", "amin", "(", "norm", ")", "\n", "if", "max", ">", "0.0", "and", "max", ">", "min", ":", "\n", "\t\t\t", "for", "i", "in", "range", "(", "0", ",", "self", ".", "get_num_nodes", "(", ")", ")", ":", "\n", "\t\t\t\t", "norm", "[", "i", "]", "=", "2.0", "*", "(", "float", "(", "norm", "[", "i", "]", "-", "min", ")", "/", "float", "(", "max", "-", "min", ")", ")", "-", "1.0", "\n", "", "", "else", ":", "\n", "\t\t\t", "print", "(", "\"Max value = 0\"", ")", "\n", "\n", "", "return", "norm", ",", "rank", "\n", "\n", "#---------------------------------------------------------------------------", "\n", "", "def", "normalized_degree_rank", "(", "self", ")", ":", "\n", "\t\t", "degree", "=", "[", "val", "for", "(", "node", ",", "val", ")", "in", "self", ".", "graph", ".", "degree", "(", ")", "]", "\n", "self", ".", "norm_degree", ",", "_", "=", "self", ".", "_normalize_array_by_rank", "(", "degree", ")", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_data_next_node": [[115, 125], ["Graph.Graph.get_centrality", "Graph.Graph.get_num_samples"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_centrality", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_samples"], ["#---------------------------------------------------------------------------", "\n", "", "def", "normalized_closeness_rank", "(", "self", ")", ":", "\n", "\t\t", "c", "=", "[", "v", "for", "v", "in", "nx", ".", "closeness_centrality", "(", "self", ".", "graph", ",", "wf_improved", "=", "False", ")", ".", "values", "(", ")", "]", "\n", "self", ".", "norm_cent", ",", "self", ".", "cent_rank", "=", "self", ".", "_normalize_array_by_rank", "(", "c", ")", "\n", "\n", "#---------------------------------------------------------------------------", "\n", "", "def", "normalized_eigenvector_rank", "(", "self", ")", ":", "\n", "\t\t", "e", "=", "[", "v", "for", "v", "in", "nx", ".", "eigenvector_centrality_numpy", "(", "self", ".", "graph", ")", ".", "values", "(", ")", "]", "\n", "self", ".", "norm_eigen", ",", "self", ".", "eigen_rank", "=", "self", ".", "_normalize_array_by_rank", "(", "e", ")", "\n", "\n", "#---------------------------------------------------------------------------", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.predicted_values": [[127, 130], ["range"], "methods", ["None"], ["\t\t", "c", "=", "[", "v", "for", "v", "in", "nx", ".", "clustering", "(", "self", ".", "graph", ")", ".", "values", "(", ")", "]", "\n", "self", ".", "norm_cent", ",", "self", ".", "cent_rank", "=", "self", ".", "_normalize_array_by_rank", "(", "c", ")", "\n", "\n", "#---------------------------------------------------------------------------", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph._change_rank_range": [[132, 145], ["numpy.empty", "range", "numpy.amax", "numpy.amin", "Graph.Graph.get_num_nodes", "range", "print", "Graph.Graph.get_num_nodes", "float", "float", "Graph.Graph.get_num_nodes", "Graph.Graph.get_num_nodes", "float", "float"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes"], ["\t\t", "c", "=", "[", "v", "for", "v", "in", "nx", ".", "current_flow_betweenness_centrality", "(", "self", ".", "graph", ")", ".", "values", "(", ")", "]", "\n", "self", ".", "norm_cent", ",", "self", ".", "cent_rank", "=", "self", ".", "_normalize_array_by_rank", "(", "c", ")", "\n", "\n", "#---------------------------------------------------------------------------", "\n", "", "def", "normalized_second_order_rank", "(", "self", ")", ":", "\n", "\t\t", "c", "=", "[", "v", "for", "v", "in", "nx", ".", "second_order_centrality", "(", "self", ".", "graph", ")", ".", "values", "(", ")", "]", "\n", "self", ".", "norm_cent", ",", "self", ".", "cent_rank", "=", "self", ".", "_normalize_array_by_rank", "(", "c", ")", "\n", "\n", "#---------------------------------------------------------------------------", "\n", "", "def", "normalized_harmonic_rank", "(", "self", ")", ":", "\n", "\t\t", "c", "=", "[", "v", "for", "v", "in", "nx", ".", "harmonic_centrality", "(", "self", ".", "graph", ")", ".", "values", "(", ")", "]", "\n", "self", ".", "norm_cent", ",", "self", ".", "cent_rank", "=", "self", ".", "_normalize_array_by_rank", "(", "c", ")", "\n", "\n", "#---------------------------------------------------------------------------", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph._normalize_array": [[147, 162], ["numpy.argsort", "numpy.amax", "numpy.amin", "numpy.empty", "range", "print", "Graph.Graph.get_num_nodes", "Graph.Graph.get_num_nodes", "float", "float", "float", "float"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes"], ["\t\t", "c", "=", "[", "v", "for", "v", "in", "nx", ".", "load_centrality", "(", "self", ".", "graph", ")", ".", "values", "(", ")", "]", "\n", "self", ".", "norm_cent", ",", "self", ".", "cent_rank", "=", "self", ".", "_normalize_array_by_rank", "(", "c", ")", "\n", "\n", "#---------------------------------------------------------------------------", "\n", "", "def", "normalized_degree", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "degree", "=", "[", "val", "for", "(", "node", ",", "val", ")", "in", "self", ".", "graph", ".", "degree", "(", ")", "]", "\n", "self", ".", "norm_degree", ",", "_", "=", "self", ".", "_normalize_array", "(", "self", ".", "degree", ")", "\n", "\n", "#---------------------------------------------------------------------------", "\n", "", "def", "normalized_betweenness", "(", "self", ")", ":", "\n", "\t\t", "b", "=", "[", "v", "for", "v", "in", "nx", ".", "betweenness_centrality", "(", "self", ".", "graph", ")", ".", "values", "(", ")", "]", "\n", "self", ".", "norm_cent", ",", "self", ".", "cent_rank", "=", "self", ".", "_normalize_array", "(", "b", ")", "\n", "\n", "#---------------------------------------------------------------------------", "\n", "", "def", "normalized_closeness", "(", "self", ")", ":", "\n", "\t\t", "c", "=", "[", "v", "for", "v", "in", "nx", ".", "closeness_centrality", "(", "self", ".", "graph", ",", "wf_improved", "=", "False", ")", ".", "values", "(", ")", "]", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph._normalize_array_by_rank": [[164, 179], ["numpy.argsort", "numpy.empty", "range", "numpy.amax", "numpy.amin", "Graph.Graph.get_num_nodes", "range", "print", "Graph.Graph.get_num_nodes", "float", "float", "Graph.Graph.get_num_nodes", "Graph.Graph.get_num_nodes", "float", "float"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes"], ["\n", "#---------------------------------------------------------------------------", "\n", "", "def", "normalized_eigenvector", "(", "self", ")", ":", "\n", "\t\t", "e", "=", "[", "v", "for", "v", "in", "nx", ".", "eigenvector_centrality_numpy", "(", "self", ".", "graph", ")", ".", "values", "(", ")", "]", "\n", "self", ".", "norm_eigen", ",", "_", "=", "self", ".", "_normalize_array", "(", "e", ")", "\n", "\n", "#---------------------------------------------------------------------------", "\n", "", "def", "normalized_clustering_coef", "(", "self", ")", ":", "\n", "\t\t", "c", "=", "[", "v", "for", "v", "in", "nx", ".", "clustering", "(", "self", ".", "graph", ")", ".", "values", "(", ")", "]", "\n", "self", ".", "norm_cent", ",", "self", ".", "cent_rank", "=", "self", ".", "_normalize_array", "(", "c", ")", "\n", "\n", "#---------------------------------------------------------------------------", "\n", "", "def", "normalized_flow", "(", "self", ")", ":", "\n", "\t\t", "c", "=", "[", "v", "for", "v", "in", "nx", ".", "current_flow_betweenness_centrality", "(", "self", ".", "graph", ")", ".", "values", "(", ")", "]", "\n", "self", ".", "norm_cent", ",", "self", ".", "cent_rank", "=", "self", ".", "_normalize_array", "(", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph._norm_rank": [[181, 194], ["numpy.empty", "range", "numpy.amax", "numpy.amin", "Graph.Graph.get_num_nodes", "range", "print", "Graph.Graph.get_num_nodes", "float", "float", "Graph.Graph.get_num_nodes", "Graph.Graph.get_num_nodes", "float", "float"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes"], ["", "def", "normalized_second_order", "(", "self", ")", ":", "\n", "\t\t", "c", "=", "[", "v", "for", "v", "in", "nx", ".", "second_order_centrality", "(", "self", ".", "graph", ")", ".", "values", "(", ")", "]", "\n", "self", ".", "norm_cent", ",", "self", ".", "cent_rank", "=", "self", ".", "_normalize_array", "(", "c", ")", "\n", "\n", "#---------------------------------------------------------------------------", "\n", "", "def", "normalized_harmonic", "(", "self", ")", ":", "\n", "\t\t", "c", "=", "[", "v", "for", "v", "in", "nx", ".", "harmonic_centrality", "(", "self", ".", "graph", ")", ".", "values", "(", ")", "]", "\n", "self", ".", "norm_cent", ",", "self", ".", "cent_rank", "=", "self", ".", "_normalize_array", "(", "c", ")", "\n", "\n", "#---------------------------------------------------------------------------", "\n", "", "def", "normalized_load_cent", "(", "self", ")", ":", "\n", "\t\t", "c", "=", "[", "v", "for", "v", "in", "nx", ".", "load_centrality", "(", "self", ".", "graph", ")", ".", "values", "(", ")", "]", "\n", "self", ".", "norm_cent", ",", "self", ".", "cent_rank", "=", "self", ".", "_normalize_array", "(", "c", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_degree_rank": [[196, 198], ["Graph.Graph._normalize_array_by_rank"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph._normalize_array_by_rank"], ["", "def", "normalized_centralities_rank", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "normalized_degree_rank", "(", ")", "\n", "self", ".", "normalized_eigenvector_rank", "(", ")", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_betweenness_rank": [[200, 203], ["Graph.Graph._normalize_array_by_rank", "networkx.betweenness_centrality().values", "networkx.betweenness_centrality"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph._normalize_array_by_rank"], ["\t\t\t", "self", ".", "normalized_betweenness_rank", "(", ")", "\n", "", "elif", "Constants", ".", "CENTRALITY", "==", "Constants", ".", "CLOSE", ":", "\n", "\t\t\t", "self", ".", "normalized_closeness_rank", "(", ")", "\n", "", "elif", "Constants", ".", "CENTRALITY", "==", "Constants", ".", "EIGEN", ":", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_closeness_rank": [[205, 208], ["Graph.Graph._normalize_array_by_rank", "networkx.closeness_centrality().values", "networkx.closeness_centrality"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph._normalize_array_by_rank"], ["self", ".", "cent_rank", "=", "self", ".", "eigen_rank", "\n", "", "elif", "Constants", ".", "CENTRALITY", "==", "Constants", ".", "CLUSTER_COEF", ":", "\n", "\t\t\t", "self", ".", "normalized_clustering_coef_rank", "(", ")", "\n", "", "elif", "Constants", ".", "CENTRALITY", "==", "Constants", ".", "FLOW", ":", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_eigenvector_rank": [[210, 213], ["Graph.Graph._normalize_array_by_rank", "networkx.eigenvector_centrality_numpy().values", "networkx.eigenvector_centrality_numpy"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph._normalize_array_by_rank"], ["", "elif", "Constants", ".", "CENTRALITY", "==", "Constants", ".", "SECOND_ORDER", ":", "\n", "\t\t\t", "self", ".", "normalized_second_order_rank", "(", ")", "\n", "", "elif", "Constants", ".", "CENTRALITY", "==", "Constants", ".", "HARMONIC", ":", "\n", "\t\t\t", "self", ".", "normalized_harmonic_rank", "(", ")", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_clustering_coef_rank": [[215, 218], ["Graph.Graph._normalize_array_by_rank", "networkx.clustering().values", "networkx.clustering"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph._normalize_array_by_rank"], ["\t\t\t", "self", ".", "normalized_load_cent_rank", "(", ")", "\n", "\n", "#---------------------------------------------------------------------------", "\n", "", "", "def", "normalized_centralities", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_flow_rank": [[220, 223], ["Graph.Graph._normalize_array_by_rank", "networkx.current_flow_betweenness_centrality().values", "networkx.current_flow_betweenness_centrality"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph._normalize_array_by_rank"], ["self", ".", "normalized_eigenvector", "(", ")", "\n", "if", "Constants", ".", "CENTRALITY", "==", "Constants", ".", "BETWEEN", ":", "\n", "\t\t\t", "self", ".", "normalized_betweenness", "(", ")", "\n", "", "elif", "Constants", ".", "CENTRALITY", "==", "Constants", ".", "CLOSE", ":", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_second_order_rank": [[225, 228], ["Graph.Graph._normalize_array_by_rank", "networkx.second_order_centrality().values", "networkx.second_order_centrality"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph._normalize_array_by_rank"], ["", "elif", "Constants", ".", "CENTRALITY", "==", "Constants", ".", "EIGEN", ":", "\n", "\t\t\t", "self", ".", "norm_cent", "=", "self", ".", "norm_eigen", "\n", "", "elif", "Constants", ".", "CENTRALITY", "==", "Constants", ".", "CLUSTER_COEF", ":", "\n", "\t\t\t", "self", ".", "normalized_clustering_coef", "(", ")", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_harmonic_rank": [[230, 233], ["Graph.Graph._normalize_array_by_rank", "networkx.harmonic_centrality().values", "networkx.harmonic_centrality"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph._normalize_array_by_rank"], ["\t\t\t", "self", ".", "normalized_flow", "(", ")", "\n", "", "elif", "Constants", ".", "CENTRALITY", "==", "Constants", ".", "SECOND_ORDER", ":", "\n", "\t\t\t", "self", ".", "normalized_second_order", "(", ")", "\n", "", "elif", "Constants", ".", "CENTRALITY", "==", "Constants", ".", "HARMONIC", ":", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_load_cent_rank": [[235, 238], ["Graph.Graph._normalize_array_by_rank", "networkx.load_centrality().values", "networkx.load_centrality"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph._normalize_array_by_rank"], ["", "elif", "Constants", ".", "CENTRALITY", "==", "Constants", ".", "LOAD_CENT", ":", "\n", "\t\t\t", "self", ".", "normalized_load_cent", "(", ")", "\n", "\n", "#---------------------------------------------------------------------------", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_katz_rank": [[240, 243], ["Graph.Graph._normalize_array_by_rank", "networkx.katz_centrality().values", "networkx.katz_centrality"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph._normalize_array_by_rank"], ["\t\t", "if", "folder", "is", "not", "None", ":", "\n", "\t\t\t", "id", "=", "'0'", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "file_name", ")", ")", ":", "\n", "\t\t\t\t", "if", "file_name", "[", "i", "]", "==", "\".\"", ":", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_degree": [[245, 247], ["Graph.Graph._normalize_array"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph._normalize_array"], ["", "", "", "name", "=", "folder", "+", "\"Metadata/\"", "+", "sub_folder", "+", "str", "(", "id", ")", "+", "\"_predictions.dat\"", "\n", "f", "=", "open", "(", "name", ",", "\"w\"", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "get_num_nodes", "(", ")", ")", ":", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_betweenness": [[249, 252], ["Graph.Graph._normalize_array", "networkx.betweenness_centrality().values", "networkx.betweenness_centrality"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph._normalize_array"], ["", "f", ".", "close", "(", ")", "\n", "\n", "#---------------------------------------------------------------------------", "\n", "", "def", "calculate_centralities", "(", "self", ",", "folder", ",", "sub_folder", ",", "file_name", ")", ":", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_closeness": [[254, 257], ["Graph.Graph._normalize_array", "networkx.closeness_centrality().values", "networkx.closeness_centrality"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph._normalize_array"], ["id", "=", "'0'", "\n", "for", "i", "in", "range", "(", "0", ",", "len", "(", "file_name", ")", ")", ":", "\n", "\t\t\t", "if", "file_name", "[", "i", "]", "==", "\".\"", ":", "\n", "\t\t\t\t", "id", "=", "file_name", "[", ":", "i", "]", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_eigenvector": [[259, 262], ["Graph.Graph._normalize_array", "networkx.eigenvector_centrality_numpy().values", "networkx.eigenvector_centrality_numpy"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph._normalize_array"], ["if", "Constants", ".", "CENTRALITY", "==", "Constants", ".", "BETWEEN", "or", "Constants", ".", "CENTRALITY", "==", "Constants", ".", "EIGEN", ":", "\n", "\t\t\t", "centrality_folder", "=", "'Betweenness/'", "\n", "", "elif", "Constants", ".", "CENTRALITY", "==", "Constants", ".", "CLOSE", ":", "\n", "\t\t\t", "centrality_folder", "=", "'Closeness/'", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_clustering_coef": [[264, 267], ["Graph.Graph._normalize_array", "networkx.clustering().values", "networkx.clustering"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph._normalize_array"], ["\t\t\t", "centrality_folder", "=", "'Cluster/'", "\n", "", "elif", "Constants", ".", "CENTRALITY", "==", "Constants", ".", "FLOW", ":", "\n", "\t\t\t", "centrality_folder", "=", "'Flow/'", "\n", "", "elif", "Constants", ".", "CENTRALITY", "==", "Constants", ".", "SECOND_ORDER", ":", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_flow": [[269, 272], ["Graph.Graph._normalize_array", "networkx.current_flow_betweenness_centrality().values", "networkx.current_flow_betweenness_centrality"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph._normalize_array"], ["", "elif", "Constants", ".", "CENTRALITY", "==", "Constants", ".", "HARMONIC", ":", "\n", "\t\t\t", "centrality_folder", "=", "'Harmonic/'", "\n", "", "elif", "Constants", ".", "CENTRALITY", "==", "Constants", ".", "LOAD_CENT", ":", "\n", "\t\t\t", "centrality_folder", "=", "'Load_Centrality/'", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_second_order": [[274, 277], ["Graph.Graph._normalize_array", "networkx.second_order_centrality().values", "networkx.second_order_centrality"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph._normalize_array"], ["\t\t\t", "centrality_folder", "=", "'Katz/'", "\n", "", "sub_folder", "=", "sub_folder", "+", "centrality_folder", "\n", "file_exist", "=", "os", ".", "path", ".", "exists", "(", "folder", "+", "\"Metadata/\"", "+", "sub_folder", "+", "metadata_file", ")", "\n", "if", "not", "file_exist", ":", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_harmonic": [[279, 282], ["Graph.Graph._normalize_array", "networkx.harmonic_centrality().values", "networkx.harmonic_centrality"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph._normalize_array"], ["self", ".", "write_meta_data", "(", "id", ",", "folder", ",", "sub_folder", ")", "\n", "", "self", ".", "read_meta_data", "(", "folder", "+", "\"Metadata/\"", "+", "sub_folder", "+", "metadata_file", ")", "\n", "\n", "#---------------------------------------------------------------------------", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_load_cent": [[284, 287], ["Graph.Graph._normalize_array", "networkx.load_centrality().values", "networkx.load_centrality"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph._normalize_array"], ["\t\t", "if", "not", "os", ".", "path", ".", "exists", "(", "folder", "+", "\"Metadata/\"", "+", "sub_folder", ")", ":", "\n", "\t\t\t", "os", ".", "makedirs", "(", "folder", "+", "\"Metadata/\"", "+", "sub_folder", ")", "\n", "\n", "", "name", "=", "folder", "+", "\"Metadata/\"", "+", "sub_folder", "+", "str", "(", "id", ")", "+", "\"_metadata.dat\"", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_katz": [[289, 292], ["Graph.Graph._normalize_array", "networkx.katz_centrality().values", "networkx.katz_centrality"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph._normalize_array"], ["\n", "self", ".", "normalized_centralities", "(", ")", "\n", "f", ".", "write", "(", "\"DEGREE\\n\"", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "get_num_nodes", "(", ")", ")", ":", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_centralities_rank": [[294, 316], ["Graph.Graph.normalized_degree_rank", "Graph.Graph.normalized_eigenvector_rank", "Graph.Graph.normalized_betweenness_rank", "Graph.Graph.normalized_closeness_rank", "Graph.Graph.normalized_clustering_coef_rank", "Graph.Graph.normalized_flow_rank", "Graph.Graph.normalized_second_order_rank", "Graph.Graph.normalized_harmonic_rank", "Graph.Graph.normalized_load_cent_rank", "Graph.Graph.normalized_katz_rank"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_degree_rank", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_eigenvector_rank", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_betweenness_rank", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_closeness_rank", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_clustering_coef_rank", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_flow_rank", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_second_order_rank", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_harmonic_rank", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_load_cent_rank", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_katz_rank"], ["", "f", ".", "write", "(", "\"EIGENVECTOR\\n\"", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "get_num_nodes", "(", ")", ")", ":", "\n", "\t\t\t", "f", ".", "write", "(", "str", "(", "self", ".", "get_eigenvector_centrality", "(", "i", ")", ")", "+", "\"\\n\"", ")", "\n", "", "f", ".", "write", "(", "\"CENT\\n\"", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "get_num_nodes", "(", ")", ")", ":", "\n", "\t\t\t", "f", ".", "write", "(", "str", "(", "self", ".", "get_centrality", "(", "i", ")", ")", "+", "\"\\n\"", ")", "\n", "\n", "", "self", ".", "normalized_centralities_rank", "(", ")", "\n", "f", ".", "write", "(", "\"DEGREE_RANK\\n\"", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "get_num_nodes", "(", ")", ")", ":", "\n", "\t\t\t", "f", ".", "write", "(", "str", "(", "self", ".", "get_degree", "(", "i", ")", ")", "+", "\"\\n\"", ")", "\n", "", "f", ".", "write", "(", "\"EIGENVECTOR_RANK\\n\"", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "get_num_nodes", "(", ")", ")", ":", "\n", "\t\t\t", "f", ".", "write", "(", "str", "(", "self", ".", "get_eigenvector_centrality", "(", "i", ")", ")", "+", "\"\\n\"", ")", "\n", "", "f", ".", "write", "(", "\"CENT_RANK\\n\"", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "get_num_nodes", "(", ")", ")", ":", "\n", "\t\t\t", "f", ".", "write", "(", "str", "(", "self", ".", "get_centrality", "(", "i", ")", ")", "+", "\"\\n\"", ")", "\n", "", "f", ".", "write", "(", "\"RANK\\n\"", ")", "\n", "for", "i", "in", "range", "(", "0", ",", "self", ".", "get_num_nodes", "(", ")", ")", ":", "\n", "\t\t\t", "f", ".", "write", "(", "str", "(", "self", ".", "cent_rank", "[", "i", "]", ")", "+", "\"\\n\"", ")", "\n", "\n", "", "f", ".", "close", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_centralities": [[318, 339], ["Graph.Graph.normalized_degree", "Graph.Graph.normalized_eigenvector", "Graph.Graph.normalized_betweenness", "Graph.Graph.normalized_closeness", "Graph.Graph.normalized_clustering_coef", "Graph.Graph.normalized_flow", "Graph.Graph.normalized_second_order", "Graph.Graph.normalized_harmonic", "Graph.Graph.normalized_load_cent", "Graph.Graph.normalized_katz"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_degree", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_eigenvector", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_betweenness", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_closeness", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_clustering_coef", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_flow", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_second_order", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_harmonic", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_load_cent", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_katz"], ["", "def", "read_meta_data", "(", "self", ",", "path", ")", ":", "\n", "\t\t", "self", ".", "norm_degree", "=", "np", ".", "zeros", "(", "self", ".", "get_num_nodes", "(", ")", ")", "\n", "self", ".", "norm_eigen", "=", "np", ".", "zeros", "(", "self", ".", "get_num_nodes", "(", ")", ")", "\n", "self", ".", "norm_cent", "=", "np", ".", "zeros", "(", "self", ".", "get_num_nodes", "(", ")", ")", "\n", "self", ".", "cent_rank", "=", "np", ".", "zeros", "(", "self", ".", "get_num_nodes", "(", ")", ",", "dtype", "=", "int", ")", "\n", "\n", "f", "=", "open", "(", "path", ",", "\"r\"", ")", "\n", "current_vec", "=", "None", "\n", "is_int", "=", "False", "\n", "i", "=", "0", "\n", "extra", "=", "\"\"", "\n", "extra_input", "=", "\"\"", "\n", "if", "Constants", ".", "TARGET", "==", "Constants", ".", "RANK", ":", "\n", "\t\t\t", "extra", "=", "\"_RANK\"", "\n", "", "if", "Constants", ".", "INPUT", "==", "Constants", ".", "RANK", ":", "\n", "\t\t\t", "extra_input", "=", "\"_RANK\"", "\n", "", "for", "line", "in", "f", ":", "\n", "\t\t\t", "if", "line", "==", "\"DEGREE\"", "+", "extra_input", "+", "\"\\n\"", ":", "\n", "\t\t\t\t", "current_vec", "=", "self", ".", "norm_degree", "\n", "is_int", "=", "False", "\n", "i", "=", "0", "\n", "", "elif", "line", "==", "\"EIGENVECTOR\"", "+", "extra_input", "+", "\"\\n\"", ":", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.neighborhood_overlap": [[341, 346], ["Graph.Graph.graph.edges", "len", "set", "networkx.common_neighbors", "Graph.Graph.graph.degree", "Graph.Graph.graph.degree"], "methods", ["None"], ["is_int", "=", "False", "\n", "i", "=", "0", "\n", "", "elif", "line", "==", "\"CENT\"", "+", "extra", "+", "\"\\n\"", ":", "\n", "\t\t\t\t", "current_vec", "=", "self", ".", "norm_cent", "\n", "is_int", "=", "False", "\n", "i", "=", "0", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.write_predictions": [[348, 359], ["open", "range", "open.close", "range", "Graph.Graph.get_num_nodes", "open.write", "len", "str", "str"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Summary.Summary.write"], ["\t\t\t\t", "current_vec", "=", "self", ".", "cent_rank", "\n", "is_int", "=", "True", "\n", "i", "=", "0", "\n", "", "elif", "current_vec", "is", "not", "None", "and", "line", "!=", "'-'", ":", "\n", "\t\t\t\t", "if", "is_int", ":", "\n", "\t\t\t\t\t", "current_vec", "[", "i", "]", "=", "int", "(", "line", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "current_vec", "[", "i", "]", "=", "float", "(", "line", ")", "\n", "", "i", "+=", "1", "\n", "if", "i", "==", "self", ".", "get_num_nodes", "(", ")", ":", "\n", "\t\t\t\t\t", "current_vec", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.calculate_centralities": [[361, 391], ["range", "os.path.exists", "Graph.Graph.read_meta_data", "len", "print", "Graph.Graph.write_meta_data"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.read_meta_data", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.write_meta_data"], ["\t\t\t", "self", ".", "norm_cent", "=", "self", ".", "norm_eigen", "\n", "\n", "", "f", ".", "close", "(", ")", "\n", "\n", "#---------------------------------------------------------------------------", "\n", "", "def", "generate_random_graph", "(", "self", ",", "n", ",", "p", ")", ":", "\n", "\t\t", "self", ".", "graph", "=", "nx", ".", "erdos_renyi_graph", "(", "n", ",", "p", ")", "\n", "\n", "#---------------------------------------------------------------------------", "\n", "", "def", "generate_smallworld_graph", "(", "self", ",", "n", ",", "p", ",", "k", ")", ":", "\n", "\t\t", "self", ".", "graph", "=", "nx", ".", "newman_watts_strogatz_graph", "(", "n", ",", "k", ",", "p", ")", "\n", "\n", "#---------------------------------------------------------------------------", "\n", "", "def", "generate_scalefree_graph", "(", "self", ",", "n", ",", "m", ")", ":", "\n", "\t\t", "self", ".", "graph", "=", "nx", ".", "barabasi_albert_graph", "(", "n", ",", "m", ")", "\n", "\n", "#---------------------------------------------------------------------------", "\n", "", "def", "read_file_type", "(", "self", ",", "path", ",", "delimiter", ")", ":", "\n", "\t\t", "dot_pos", "=", "len", "(", "path", ")", "-", "1", "\n", "while", "path", "[", "dot_pos", "]", "!=", "'.'", ":", "\n", "\t\t\t", "dot_pos", "-=", "1", "\n", "if", "dot_pos", "<", "0", ":", "\n", "\t\t\t\t", "print", "(", "\"ERROR: unkonw graph file '\"", ",", "path", ",", "\"'\"", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "", "", "file_ext", "=", "path", "[", "dot_pos", ":", "]", "\n", "if", "file_ext", "==", "\".gexf\"", ":", "\n", "\t\t\t", "self", ".", "graph", "=", "nx", ".", "read_gexf", "(", "path", ",", "node_type", "=", "int", ")", "\n", "", "elif", "file_ext", "==", "\".csv\"", "or", "file_ext", "==", "\".txt\"", ":", "\n", "\t\t\t", "self", ".", "graph", "=", "nx", ".", "read_edgelist", "(", "path", ",", "create_using", "=", "nx", ".", "Graph", "(", ")", ",", "nodetype", "=", "int", ",", "delimiter", "=", "delimiter", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.write_meta_data": [[393, 444], ["open", "print", "Graph.Graph.normalized_centralities", "open.write", "range", "open.write", "range", "open.write", "range", "Graph.Graph.normalized_centralities_rank", "open.write", "range", "open.write", "range", "open.write", "range", "open.write", "range", "open.close", "os.path.exists", "os.makedirs", "Graph.Graph.get_num_nodes", "open.write", "Graph.Graph.get_num_nodes", "open.write", "Graph.Graph.get_num_nodes", "open.write", "Graph.Graph.get_num_nodes", "open.write", "Graph.Graph.get_num_nodes", "open.write", "Graph.Graph.get_num_nodes", "open.write", "Graph.Graph.get_num_nodes", "open.write", "print", "Graph.Graph.graph.degree", "str", "Graph.Graph.get_num_nodes", "str", "str", "str", "str", "str", "str", "str", "Graph.Graph.get_degree", "Graph.Graph.get_eigenvector_centrality", "Graph.Graph.get_centrality", "Graph.Graph.get_degree", "Graph.Graph.get_eigenvector_centrality", "Graph.Graph.get_centrality"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_centralities", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Summary.Summary.write", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Summary.Summary.write", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Summary.Summary.write", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_centralities_rank", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Summary.Summary.write", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Summary.Summary.write", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Summary.Summary.write", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Summary.Summary.write", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Summary.Summary.write", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Summary.Summary.write", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Summary.Summary.write", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Summary.Summary.write", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Summary.Summary.write", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Summary.Summary.write", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Summary.Summary.write", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_degree", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_eigenvector_centrality", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_centrality", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_degree", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_eigenvector_centrality", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_centrality"], ["sys", ".", "exit", "(", ")", "\n", "\n", "", "if", "Constants", ".", "MODE", "!=", "Constants", ".", "TRAIN", ":", "\n", "\t\t\t", "Constants", ".", "BATCH_SIZE", "=", "self", ".", "get_num_nodes", "(", ")", "\n", "print", "(", "\"NEW BATCH SIZE = \"", ",", "Constants", ".", "BATCH_SIZE", ")", "\n", "#print(\"\\n\", nx.info(self.graph))", "\n", "\n", "#---------------------------------------------------------------------------", "\n", "", "", "def", "get_delimiter", "(", "self", ",", "folder", ",", "file", ")", ":", "\n", "\t\t", "f", "=", "open", "(", "folder", "+", "\"delimiter_info/delimiter.txt\"", ",", "\"r\"", ")", "\n", "delimiter", "=", "'!'", "\n", "for", "line", "in", "f", ":", "\n", "\t\t\t", "words", "=", "line", ".", "split", "(", "'\\t'", ")", "\n", "if", "words", "[", "0", "]", "==", "file", ":", "\n", "\t\t\t\t", "if", "words", "[", "1", "]", "==", "\"space\\n\"", ":", "\n", "\t\t\t\t\t", "delimiter", "=", "' '", "\n", "", "elif", "words", "[", "1", "]", "==", "\"tab\\n\"", ":", "\n", "\t\t\t\t\t", "delimiter", "=", "'\\t'", "\n", "", "elif", "words", "[", "1", "]", "==", "\",\\n\"", ":", "\n", "\t\t\t\t\t", "delimiter", "=", "','", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "print", "(", "\"Unknown delimiter '\"", "+", "words", "[", "1", "]", "+", "\"' in 'delimiter.txt' file.\"", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "", "", "", "if", "delimiter", "==", "'!'", ":", "\n", "\t\t\t", "print", "(", "\"No delimiter information found about graph '\"", "+", "file", "+", "\"' in the 'delimiter.txt' file.\"", ")", "\n", "sys", ".", "exit", "(", ")", "\n", "\n", "", "return", "delimiter", "\n", "\n", "#---------------------------------------------------------------------------", "\n", "", "def", "save_file", "(", "self", ",", "id", ",", "folder", ",", "sub_folder", ")", ":", "\n", "\t\t", "name", "=", "folder", "+", "sub_folder", "+", "str", "(", "id", ")", "+", "\".gexf\"", "\n", "nx", ".", "write_gexf", "(", "self", ".", "graph", ",", "name", ")", "\n", "self", ".", "write_meta_data", "(", "id", ",", "folder", ",", "sub_folder", ")", "\n", "\n", "#---------------------------------------------------------------------------", "\n", "", "def", "read_file", "(", "self", ",", "folder", ",", "sub_folder", ",", "file_name", ")", ":", "\n", "\t\t", "delimiter", "=", "' '", "\n", "if", "Constants", ".", "MODE", "==", "Constants", ".", "REAL_NET", ":", "\n", "\t\t\t", "delimiter", "=", "self", ".", "get_delimiter", "(", "folder", "+", "sub_folder", ",", "file_name", ")", "\n", "", "self", ".", "read_file_type", "(", "folder", "+", "sub_folder", "+", "file_name", ",", "delimiter", ")", "\n", "self", ".", "calculate_centralities", "(", "folder", ",", "sub_folder", ",", "file_name", ")", "\n", "self", ".", "define_node_sample", "(", ")", "\n", "self", ".", "predictions", "=", "np", ".", "zeros", "(", "self", ".", "get_num_nodes", "(", ")", ")", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.read_meta_data": [[446, 495], ["numpy.zeros", "numpy.zeros", "numpy.zeros", "open", "range", "open.close", "Graph.Graph.get_num_nodes", "Graph.Graph.get_num_nodes", "Graph.Graph.get_num_nodes", "len", "int", "float", "Graph.Graph.get_num_nodes"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes"], []], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.generate_random_graph": [[497, 499], ["networkx.erdos_renyi_graph"], "methods", ["None"], []], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.generate_smallworld_graph": [[501, 503], ["networkx.newman_watts_strogatz_graph"], "methods", ["None"], []], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.generate_scalefree_graph": [[505, 507], ["networkx.barabasi_albert_graph"], "methods", ["None"], []], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.read_file_type": [[509, 528], ["len", "networkx.read_gexf", "Graph.Graph.get_num_nodes", "print", "sys.exit", "networkx.read_edgelist", "print", "sys.exit", "networkx.Graph"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes"], []], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_delimiter": [[533, 553], ["open", "line.split", "print", "sys.exit", "print", "sys.exit"], "methods", ["None"], []], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.save_file": [[555, 560], ["os.makedirs", "networkx.write_gexf", "Graph.Graph.write_meta_data", "str"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.write_meta_data"], []], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_DAD_matrix": [[562, 570], ["networkx.to_scipy_sparse_matrix", "numpy.array", "scipy.diags", "networkx.to_scipy_sparse_matrix.dot().transpose().dot().tocoo", "scipy.eye", "networkx.to_scipy_sparse_matrix.sum", "numpy.power().flatten", "networkx.to_scipy_sparse_matrix.dot().transpose().dot", "numpy.power", "networkx.to_scipy_sparse_matrix.dot().transpose", "networkx.to_scipy_sparse_matrix.dot"], "methods", ["None"], []], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.read_file": [[572, 608], ["Graph.Graph.read_file_type", "Graph.Graph.calculate_centralities", "Graph.Graph.get_delimiter", "Graph.Graph._normalize_array", "Graph.Graph._normalize_array", "Graph.Graph._normalize_array", "Graph.Graph.define_node_sample", "numpy.zeros", "Graph.Graph.build_feature_matrix", "numpy.array().mean", "Graph.Graph.graph.degree", "Graph.Graph.normalized_degree_rank", "Graph.Graph.normalized_degree", "Graph.Graph.get_DAD_matrix", "networkx.to_scipy_sparse_matrix", "Graph.Graph.get_num_nodes", "Graph.Graph.graph.degree", "numpy.array"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.read_file_type", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.calculate_centralities", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_delimiter", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph._normalize_array", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph._normalize_array", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph._normalize_array", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.define_node_sample", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.build_feature_matrix", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_degree_rank", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.normalized_degree", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_DAD_matrix", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_num_nodes"], []], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Neural_Net.Neural_Net.__init__": [[27, 41], ["Neural_Net.Neural_Net._build_network", "Neural_Net.Neural_Net._prepare_loss_function"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Neural_Net.Neural_Net._build_network", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Neural_Net.Neural_Net._prepare_loss_function"], ["\t\t", "self", ".", "session", "=", "session", "\n", "self", ".", "scope", "=", "scope", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "\n", "if", "Constants", ".", "USE_GPU", ":", "\n", "\t\t\t", "self", ".", "device", "=", "'/gpu:0'", "\n", "", "else", ":", "\n", "\t\t\t", "self", ".", "device", "=", "'/cpu:0'", "\n", "\n", "", "self", ".", "_build_network", "(", ")", "\n", "self", ".", "_prepare_loss_function", "(", ")", "\n", "\n", "#-------------------------------------------------------------------", "\n", "", "def", "_build_network", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "_node_embed", "(", ")", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Neural_Net.Neural_Net._build_network": [[43, 49], ["Neural_Net.Neural_Net._centrality_decoder", "Neural_Net.Neural_Net._node_embed_GCN", "Neural_Net.Neural_Net._node_embed_struc2vec"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Neural_Net.Neural_Net._centrality_decoder", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Neural_Net.Neural_Net._node_embed_GCN", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Neural_Net.Neural_Net._node_embed_struc2vec"], ["#-------------------------------------------------------------------", "\n", "", "def", "_node_embed", "(", "self", ")", ":", "\n", "\t\t", "with", "tf", ".", "variable_scope", "(", "self", ".", "scope", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ",", "tf", ".", "device", "(", "self", ".", "device", ")", ":", "\n", "#with tf.variable_scope(self.scope), tf.device(self.device):", "\n", "\t\t\t", "self", ".", "node_degree", "=", "tf", ".", "placeholder", "(", "\"float\"", ",", "[", "None", ",", "1", "]", ",", "name", "=", "\"degree\"", ")", "\n", "self", ".", "node_eigen", "=", "tf", ".", "placeholder", "(", "\"float\"", ",", "[", "None", ",", "1", "]", ",", "name", "=", "\"eigen\"", ")", "\n", "#weight_init = normalized_columns_initializer(Constants.INIT_WEIGHT)", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Neural_Net.Neural_Net._node_embed_GCN": [[51, 93], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.device", "tensorflow.device", "tensorflow.device", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.sparse_placeholder", "tensorflow.sparse_placeholder", "tensorflow.sparse_placeholder", "tensorflow.sparse_placeholder", "tensorflow.sparse_placeholder", "tensorflow.sparse_placeholder", "Neural_Net.Neural_Net.w.append", "Neural_Net.Neural_Net.b.append", "tensorflow.dtypes.cast", "tensorflow.dtypes.cast", "tensorflow.dtypes.cast", "range", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "Neural_Net.Neural_Net.w.append", "Neural_Net.Neural_Net.b.append", "Neural_Net.Neural_Net.w.append", "Neural_Net.Neural_Net.b.append", "Neural_Net.Neural_Net.w.append", "Neural_Net.Neural_Net.b.append", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.add", "tensorflow.add", "tensorflow.add", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.get_variable", "tensorflow.math.l2_normalize", "tensorflow.math.l2_normalize", "tensorflow.math.l2_normalize", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer."], "methods", ["None"], ["input", "=", "tf", ".", "concat", "(", "values", "=", "[", "self", ".", "node_degree", ",", "self", ".", "node_eigen", "]", ",", "axis", "=", "1", ")", "\n", "\n", "h", "=", "layer", ".", "fully_connected", "(", "input", ",", "\n", "Constants", ".", "UNITS_H1", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "tanh", ",", "#tf.nn.relu,", "\n", "weights_initializer", "=", "weight_init", ",", "\n", "biases_initializer", "=", "tf", ".", "constant_initializer", "(", "Constants", ".", "INIT_WEIGHT", ")", ",", "\n", "scope", "=", "'FC_1'", ")", "\n", "h", "=", "layer", ".", "fully_connected", "(", "h", ",", "\n", "Constants", ".", "UNITS_H2", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "tanh", ",", "#tf.nn.relu,", "\n", "weights_initializer", "=", "weight_init", ",", "\n", "biases_initializer", "=", "tf", ".", "constant_initializer", "(", "Constants", ".", "INIT_WEIGHT", ")", ",", "\n", "scope", "=", "'FC_2'", ")", "\n", "h", "=", "layer", ".", "fully_connected", "(", "h", ",", "\n", "Constants", ".", "UNITS_H3", ",", "\n", "activation_fn", "=", "tf", ".", "nn", ".", "tanh", ",", "#tf.nn.relu,", "\n", "weights_initializer", "=", "weight_init", ",", "\n", "biases_initializer", "=", "tf", ".", "constant_initializer", "(", "Constants", ".", "INIT_WEIGHT", ")", ",", "\n", "scope", "=", "'FC_3'", ")", "\n", "self", ".", "centrality", "=", "layer", ".", "fully_connected", "(", "h", ",", "\n", "1", ",", "\n", "activation_fn", "=", "None", ",", "\n", "weights_initializer", "=", "weight_init", ",", "\n", "biases_initializer", "=", "tf", ".", "constant_initializer", "(", "Constants", ".", "INIT_WEIGHT", ")", ",", "\n", "scope", "=", "'FC_4'", ")", "\n", "\n", "#-------------------------------------------------------------------", "\n", "", "", "def", "_prepare_loss_function", "(", "self", ")", ":", "\n", "\t\t", "with", "tf", ".", "variable_scope", "(", "self", ".", "scope", ",", "reuse", "=", "tf", ".", "AUTO_REUSE", ")", ",", "tf", ".", "device", "(", "self", ".", "device", ")", ":", "\n", "#with tf.variable_scope(self.scope), tf.device(self.device):", "\n", "\t\t\t", "\"\"\"\n\t\t\tThis region builds the operations for updating the trainable\n\t\t\tvariables (weights) of the Neural Network.\n\t\t\t\"\"\"", "\n", "self", ".", "true_centrality", "=", "tf", ".", "placeholder", "(", "\"float\"", ",", "[", "None", ",", "1", "]", ",", "name", "=", "\"true_state\"", ")", "\n", "params", "=", "tf", ".", "get_collection", "(", "tf", ".", "GraphKeys", ".", "TRAINABLE_VARIABLES", ",", "self", ".", "scope", ")", "\n", "\n", "#self.main_loss\t\t= tf.nn.l2_loss(self.centrality - self.true_centrality, name='l2')", "\n", "#self.main_loss \t\t= tf.reduce_mean(tf.squared_difference(self.centrality, self.true_centrality))", "\n", "self", ".", "main_loss", "=", "tf", ".", "losses", ".", "mean_squared_error", "(", "self", ".", "true_centrality", ",", "self", ".", "centrality", ")", "\n", "self", ".", "regularization", "=", "tf", ".", "reduce_sum", "(", "tf", ".", "stack", "(", "[", "tf", ".", "nn", ".", "l2_loss", "(", "var", ")", "for", "var", "in", "params", "]", ")", ",", "name", "=", "'regularization'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Neural_Net.Neural_Net._node_embed_struc2vec": [[95, 132], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.device", "tensorflow.device", "tensorflow.device", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.sparse_placeholder", "tensorflow.sparse_placeholder", "tensorflow.sparse_placeholder", "tensorflow.sparse_placeholder", "tensorflow.sparse_placeholder", "tensorflow.sparse_placeholder", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.Variable", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.sparse_reduce_sum", "tensorflow.sparse_reduce_sum", "tensorflow.sparse_reduce_sum", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.multiply", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.add", "tensorflow.add", "tensorflow.add", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.nn.relu", "range", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.contrib.layers.xavier_initializer.", "tensorflow.shape", "tensorflow.shape", "tensorflow.shape", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.sparse_tensor_dense_matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.nn.relu", "tensorflow.add", "tensorflow.add", "tensorflow.add"], "methods", ["None"], ["\n", "#self.learning_rate = tf.placeholder(tf.float32,shape=(),name=\"learing_rate\")", "\n", "self", ".", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "self", ".", "learning_rate", ",", "use_locking", "=", "True", ")", "\n", "#self.optimizer = tf.train.RMSPropOptimizer(learning_rate=self.learning_rate, decay=0.9)", "\n", "#self.optimizer = tf.train.MomentumOptimizer(LEARNING_RATE, 0.9, use_locking=True)", "\n", "\n", "\"\"\"\n\t\t\tCompute gradients of the loss function with respect to the\n\t\t\tvariables of the network. Then, apply gradients to update the weights\n\t\t\tof the network\n\t\t\t\"\"\"", "\n", "gvs", "=", "self", ".", "optimizer", ".", "compute_gradients", "(", "self", ".", "total_loss", ")", "\n", "capped_gvs", "=", "[", "(", "tf", ".", "clip_by_value", "(", "grad", ",", "-", "1.", ",", "1.", ")", ",", "var", ")", "for", "grad", ",", "var", "in", "gvs", "]", "\n", "self", ".", "gradients", "=", "capped_gvs", "\n", "self", ".", "minimize", "=", "self", ".", "optimizer", ".", "apply_gradients", "(", "capped_gvs", ")", "\n", "#self.minimize = self.optimizer.minimize(self.total_loss)", "\n", "\n", "#-------------------------------------------------------------------", "\n", "", "", "def", "get_node_embed", "(", "self", ",", "session", ",", "batch", ")", ":", "\n", "\t\t", "e", "=", "session", ".", "run", "(", "[", "self", ".", "node_embed", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "node_degree", ":", "batch", ".", "degree", ",", "\n", "self", ".", "node_eigen", ":", "batch", ".", "eigen", "}", ")", "\n", "\n", "return", "e", "[", "0", "]", "\n", "\n", "#-------------------------------------------------------------------", "\n", "", "def", "train_network", "(", "self", ",", "session", ",", "batch", ")", ":", "\n", "\t\t", "_", ",", "tl", ",", "ml", ",", "rl", ",", "c", "=", "session", ".", "run", "(", "[", "self", ".", "minimize", ",", "\n", "self", ".", "total_loss", ",", "\n", "self", ".", "main_loss", ",", "\n", "self", ".", "regularization", ",", "\n", "self", ".", "centrality", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "node_degree", ":", "batch", ".", "degree", ",", "\n", "self", ".", "node_eigen", ":", "batch", ".", "eigen", ",", "\n", "self", ".", "true_centrality", ":", "batch", ".", "centrality", "}", ")", "\n", "\n", "#print c", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Neural_Net.Neural_Net._centrality_decoder": [[135, 179], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.device", "tensorflow.device", "tensorflow.device", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.fully_connected", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.sigmoid", "tensorflow.nn.tanh", "tensorflow.nn.tanh", "tensorflow.nn.tanh"], "methods", ["None"], ["#-------------------------------------------------------------------", "\n", "", "def", "test_network", "(", "self", ",", "session", ",", "batch", ")", ":", "\n", "\t\t", "tl", ",", "ml", ",", "rl", ",", "c", "=", "session", ".", "run", "(", "[", "self", ".", "total_loss", ",", "\n", "self", ".", "main_loss", ",", "\n", "self", ".", "regularization", ",", "\n", "self", ".", "centrality", "]", ",", "\n", "feed_dict", "=", "{", "self", ".", "node_degree", ":", "batch", ".", "degree", ",", "\n", "self", ".", "node_eigen", ":", "batch", ".", "eigen", ",", "\n", "self", ".", "true_centrality", ":", "batch", ".", "centrality", "}", ")", "\n", "\n", "\"\"\"for c_t, c_p in zip(batch.centrality, c):\n\t\t\tif c_t > c_p:\n\t\t\t\tprint \"(\", c_t, \",\", c_p, \") --> \", c_t-c_p\n\t\t\telse:\n\t\t\t\tprint \"(\", c_t, \",\", c_p, \") --> \", c_p-c_t\"\"\"", "\n", "\n", "return", "tl", ",", "ml", ",", "rl", ",", "c", "\n", "", "", ""]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Neural_Net.Neural_Net._prepare_loss_function": [[181, 210], ["tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.variable_scope", "tensorflow.device", "tensorflow.device", "tensorflow.device", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.get_collection", "tensorflow.losses.mean_squared_error", "tensorflow.losses.mean_squared_error", "tensorflow.losses.mean_squared_error", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "tensorflow.train.AdamOptimizer", "Neural_Net.Neural_Net.optimizer.compute_gradients", "Neural_Net.Neural_Net.optimizer.apply_gradients", "tensorflow.stack", "tensorflow.stack", "tensorflow.stack", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.clip_by_value", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss", "tensorflow.nn.l2_loss"], "methods", ["None"], []], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Neural_Net.Neural_Net._learning_rate_decay": [[213, 217], ["None"], "methods", ["None"], []], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Neural_Net.Neural_Net.get_sparse_tensor": [[220, 247], ["range", "tensorflow.SparseTensorValue", "tensorflow.SparseTensorValue", "tensorflow.SparseTensorValue", "range", "numpy.array", "numpy.ones", "tensorflow.SparseTensorValue", "tensorflow.SparseTensorValue", "tensorflow.SparseTensorValue", "print", "exit", "len", "ind_A.append", "data_A.append", "numpy.array.append", "len", "len", "len", "len"], "methods", ["None"], []], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Neural_Net.Neural_Net.run_network": [[249, 257], ["Neural_Net.Neural_Net.get_sparse_tensor", "session.run"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Neural_Net.Neural_Net.get_sparse_tensor"], []], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Neural_Net.Neural_Net.train_network": [[259, 283], ["Neural_Net.Neural_Net.get_sparse_tensor", "session.run", "Neural_Net.Neural_Net._learning_rate_decay"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Neural_Net.Neural_Net.get_sparse_tensor", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Neural_Net.Neural_Net._learning_rate_decay"], []], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Neural_Net.Neural_Net.test_network": [[285, 299], ["Neural_Net.Neural_Net.get_sparse_tensor", "session.run"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Neural_Net.Neural_Net.get_sparse_tensor"], []], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Neural_Net.normalized_columns_initializer": [[15, 21], ["numpy.random.randn().astype", "tensorflow.constant", "numpy.sqrt", "numpy.random.randn", "numpy.square().sum", "numpy.square"], "function", ["None"], ["\t", "def", "_initializer", "(", "shape", ",", "dtype", "=", "None", ",", "partition_info", "=", "None", ")", ":", "\n", "\t\t", "out", "=", "np", ".", "random", ".", "randn", "(", "*", "shape", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "out", "*=", "std", "/", "np", ".", "sqrt", "(", "np", ".", "square", "(", "out", ")", ".", "sum", "(", "axis", "=", "0", ",", "keepdims", "=", "True", ")", ")", "\n", "return", "tf", ".", "constant", "(", "out", ")", "\n", "", "return", "_initializer", "\n", "\n", "#*******************************************************************************", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Worker.Worker.__init__": [[25, 57], ["epochs.assign_add", "epochs_test.assign_add", "total_graphs.assign_add", "train_nodes.assign_add", "test_nodes.assign_add", "Graph.Graph.Graph", "Worker.Worker.load_graph_set_data", "Neural_Net.Neural_Net.Neural_Net"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Worker.Worker.load_graph_set_data"], ["\n", "class", "Worker", "(", ")", ":", "\n", "\t", "def", "__init__", "(", "self", ",", "id", ",", "session", ",", "learning_rate", ",", "epochs", ",", "epochs_test", ",", "total_graphs", ",", "train_nodes", ",", "test_nodes", ",", "summary", ")", ":", "\n", "\t\t", "self", ".", "tid", "=", "id", "\n", "self", ".", "learning_rate", "=", "learning_rate", "\n", "self", ".", "session", "=", "session", "\n", "self", ".", "increase_epoch", "=", "epochs", ".", "assign_add", "(", "1", ")", "\n", "self", ".", "increase_epoch_test", "=", "epochs_test", ".", "assign_add", "(", "1", ")", "\n", "self", ".", "increase_graph", "=", "total_graphs", ".", "assign_add", "(", "1", ")", "\n", "self", ".", "increase_node", "=", "train_nodes", ".", "assign_add", "(", "1", ")", "\n", "self", ".", "increase_node_test", "=", "test_nodes", ".", "assign_add", "(", "1", ")", "\n", "self", ".", "total_graphs", "=", "total_graphs", "\n", "self", ".", "summary", "=", "summary", "\n", "\n", "self", ".", "graph", "=", "Graph", "(", ")", "\n", "self", ".", "folder_name", "=", "Constants", ".", "FLD_GRAPH", "\n", "self", ".", "train_subfolder", "=", "Constants", ".", "TRAIN_SUB_FLD", "\n", "self", ".", "test_subfolder", "=", "Constants", ".", "TEST_SUB_FLD", "\n", "if", "Constants", ".", "TEST_NUM", ">", "0", ":", "\n", "\t\t\t", "self", ".", "test_subfolder", "=", "\"Test_\"", "+", "str", "(", "Constants", ".", "TEST_NUM", ")", "+", "\"/\"", "\n", "", "self", ".", "real_net_subfolder", "=", "\"Real_Networks/\"", "\n", "self", ".", "test_number", "=", "-", "1", "\n", "self", ".", "mode", "=", "Constants", ".", "MODE", "\n", "self", ".", "load_graph_set_data", "(", ")", "\n", "self", ".", "local_batch", "=", "[", "]", "\n", "self", ".", "last_batch", "=", "-", "1", "\n", "\n", "if", "self", ".", "tid", "==", "'global'", ":", "\n", "\t\t\t", "global", "neural_net", ",", "current_mode", "\n", "global", "batch", ",", "full_batch", ",", "epoch", "\n", "neural_net", "=", "Neural_Net", "(", "self", ".", "tid", ",", "session", ",", "learning_rate", ")", "\n", "batch", "=", "[", "]", "\n", "full_batch", "=", "[", "]", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Worker.Worker.load_graph_set_data": [[59, 66], ["len", "len", "len", "os.listdir", "os.path.isfile", "os.listdir", "os.path.isfile", "os.listdir", "os.path.isfile"], "methods", ["None"], ["epoch_test", "=", "0", "\n", "current_mode", "=", "Constants", ".", "MODE", "\n", "for", "i", "in", "range", "(", "0", ",", "Constants", ".", "N_PARALLEL_BATCH", ")", ":", "\n", "\t\t\t\t", "batch", ".", "append", "(", "Batch", "(", ")", ")", "\n", "\n", "#---------------------------------------------------------------------------", "\n", "", "", "", "def", "load_graph_set_data", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "train_files", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "self", ".", "folder_name", "+", "self", ".", "train_subfolder", ")", "if", "os", ".", "path", ".", "isfile", "(", "self", ".", "folder_name", "+", "self", ".", "train_subfolder", "+", "f", ")", "]", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Worker.Worker.work": [[68, 83], ["coordinator.should_stop", "Worker.Worker.load_next_graph", "Worker.Worker.train_over_graph", "Worker.Worker.write_mean_kendall_b_tau", "Worker.Worker.write_mean_kendall_b_tau"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Worker.Worker.load_next_graph", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Worker.Worker.train_over_graph", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Worker.Worker.write_mean_kendall_b_tau", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Worker.Worker.write_mean_kendall_b_tau"], ["self", ".", "test_files", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "self", ".", "folder_name", "+", "self", ".", "test_subfolder", ")", "if", "os", ".", "path", ".", "isfile", "(", "self", ".", "folder_name", "+", "self", ".", "test_subfolder", "+", "f", ")", "]", "\n", "self", ".", "test_size", "=", "len", "(", "self", ".", "test_files", ")", "\n", "self", ".", "real_net_files", "=", "[", "f", "for", "f", "in", "os", ".", "listdir", "(", "self", ".", "folder_name", "+", "self", ".", "real_net_subfolder", ")", "if", "os", ".", "path", ".", "isfile", "(", "self", ".", "folder_name", "+", "self", ".", "real_net_subfolder", "+", "f", ")", "]", "\n", "self", ".", "real_net_size", "=", "len", "(", "self", ".", "real_net_files", ")", "\n", "\n", "#---------------------------------------------------------------------------", "\n", "", "def", "work", "(", "self", ",", "coordinator", ",", "saver", ")", ":", "\n", "\t\t", "global", "kendall_b_tau", "\n", "while", "not", "coordinator", ".", "should_stop", "(", ")", ":", "\n", "\t\t\t", "sub_folder", ",", "file_name", ",", "epoch_end", "=", "self", ".", "load_next_graph", "(", ")", "\n", "node_count", "=", "self", ".", "train_over_graph", "(", "saver", ",", "sub_folder", ",", "file_name", ")", "\n", "if", "self", ".", "mode", "==", "Constants", ".", "REAL_NET", ":", "\n", "\t\t\t\t", "self", ".", "write_mean_kendall_b_tau", "(", "file_name", ")", "\n", "kendall_b_tau", "=", "[", "]", "\n", "", "if", "self", ".", "mode", "==", "Constants", ".", "TRAIN", "and", "node_count", ">", "Constants", ".", "MAX_STEPS", ":", "\n", "\t\t\t\t", "break", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Worker.Worker.load_next_graph": [[85, 142], ["lock.acquire", "lock.release", "Worker.Worker.graph.read_file", "print", "numpy.arange", "numpy.random.shuffle", "Worker.Worker.session.run", "Worker.Worker.session.run", "numpy.arange", "numpy.random.shuffle", "numpy.arange"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.read_file", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Batch.Batch.shuffle", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Batch.Batch.shuffle"], ["\t\t\t\t", "if", "self", ".", "mode", "==", "Constants", ".", "TEST", ":", "\n", "\t\t\t\t\t", "self", ".", "write_mean_kendall_b_tau", "(", "None", ")", "\n", "", "break", "\n", "\n", "#---------------------------------------------------------------------------", "\n", "", "", "", "def", "load_next_graph", "(", "self", ")", ":", "\n", "\t\t", "global", "graph_train_number", ",", "graph_train", "\n", "global", "graph_test_number", ",", "graph_test", "\n", "global", "epoch", ",", "epoch_test", ",", "current_mode", "\n", "\n", "lock", ".", "acquire", "(", ")", "\n", "epoch_end", "=", "False", "\n", "if", "current_mode", "==", "Constants", ".", "TRAIN", ":", "\n", "\t\t\t", "if", "graph_train", "is", "None", ":", "\n", "\t\t\t\t", "graph_train", "=", "np", ".", "arange", "(", "self", ".", "train_size", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "graph_train", ")", "\n", "graph_train_number", "=", "0", "\n", "", "number", "=", "graph_train_number", "\n", "g_number", "=", "graph_train", "[", "graph_train_number", "]", "\n", "sub_folder", "=", "self", ".", "train_subfolder", "\n", "file_name", "=", "self", ".", "train_files", "[", "g_number", "]", "\n", "graph_train_number", "+=", "1", "\n", "if", "graph_train_number", ">=", "self", ".", "train_size", ":", "\n", "\t\t\t\t", "epoch", "=", "self", ".", "session", ".", "run", "(", "self", ".", "increase_epoch", ")", "\n", "#self.mode = TEST", "\n", "#current_mode = TEST", "\n", "graph_train", "=", "None", "\n", "", "", "else", ":", "\n", "\t\t\t", "if", "graph_test", "is", "None", ":", "\n", "\t\t\t\t", "if", "current_mode", "==", "Constants", ".", "TEST", ":", "\n", "\t\t\t\t\t", "graph_test", "=", "np", ".", "arange", "(", "self", ".", "test_size", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "graph_test", ")", "\n", "", "else", ":", "\n", "\t\t\t\t\t", "graph_test", "=", "np", ".", "arange", "(", "self", ".", "real_net_size", ")", "\n", "", "graph_test_number", "=", "0", "\n", "", "number", "=", "graph_test_number", "\n", "g_number", "=", "graph_test", "[", "graph_test_number", "]", "\n", "if", "current_mode", "==", "Constants", ".", "TEST", ":", "\n", "\t\t\t\t", "file_list", "=", "self", ".", "test_files", "\n", "sub_folder", "=", "self", ".", "test_subfolder", "\n", "", "else", ":", "\n", "\t\t\t\t", "file_list", "=", "self", ".", "real_net_files", "\n", "sub_folder", "=", "self", ".", "real_net_subfolder", "\n", "", "file_name", "=", "file_list", "[", "g_number", "]", "\n", "graph_test_number", "+=", "1", "\n", "if", "current_mode", "==", "Constants", ".", "TEST", ":", "\n", "\t\t\t\t", "set_size", "=", "self", ".", "test_size", "\n", "", "else", ":", "\n", "\t\t\t\t", "set_size", "=", "self", ".", "real_net_size", "\n", "", "if", "graph_test_number", ">=", "set_size", ":", "\n", "\t\t\t\t", "if", "Constants", ".", "MODE", "!=", "Constants", ".", "TRAIN", ":", "\n", "\t\t\t\t\t", "epoch_end", "=", "True", "\n", "", "epoch_test", "=", "self", ".", "session", ".", "run", "(", "self", ".", "increase_epoch_test", ")", "\n", "#if MODE == TRAIN:", "\n", "#\tself.mode = TRAIN", "\n", "#\tcurrent_mode = TRAIN", "\n", "graph_test", "=", "None", "\n", "", "", "lock", ".", "release", "(", ")", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Worker.Worker.train_over_graph": [[144, 168], ["Worker.Worker.session.run", "Worker.Worker.save_model", "Worker.Worker.fill_batch", "Worker.Worker.process_full_batch", "len", "Worker.Worker.process_full_batch", "Worker.Worker.session.run", "Worker.Worker.calculate_kendall_tau", "Worker.Worker.graph.write_predictions"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Worker.Worker.save_model", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Worker.Worker.fill_batch", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Worker.Worker.process_full_batch", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Worker.Worker.process_full_batch", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Worker.Worker.calculate_kendall_tau", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.write_predictions"], ["path", "=", "self", ".", "folder_name", "+", "sub_folder", "+", "file_name", "\n", "self", ".", "graph", ".", "read_file", "(", "self", ".", "folder_name", ",", "sub_folder", ",", "file_name", ")", "\n", "if", "Constants", ".", "MODE", "==", "Constants", ".", "REAL_NET", ":", "\n", "\t\t\t", "print", "(", "\"Graph \"", ",", "path", ",", "\" opened successefully (TOTAL = \"", ",", "number", ",", "\")\"", ")", "\n", "\n", "", "return", "sub_folder", ",", "file_name", ",", "epoch_end", "\n", "\n", "#---------------------------------------------------------------------------", "\n", "", "def", "train_over_graph", "(", "self", ",", "saver", ",", "sub_folder", ",", "file_name", ")", ":", "\n", "\t\t", "graph_finished", "=", "False", "\n", "while", "not", "graph_finished", ":", "\n", "\t\t\t", "graph_finished", ",", "node_count", "=", "self", ".", "fill_batch", "(", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "eigen", "=", "nx", ".", "eigenvector_centrality_numpy", "(", "self", ".", "graph", ".", "graph", ")", ".", "values", "(", ")", "\n", "self", ".", "process_full_batch", "(", "node_count", ",", "False", ")", "\n", "end", "=", "time", ".", "time", "(", ")", "\n", "elapsed", "=", "end", "-", "start", "\n", "print", "(", "'\\n'", ",", "self", ".", "graph", ".", "get_num_nodes", "(", ")", ",", "\", \"", ",", "elapsed", ",", "'\\n'", ")", "\n", "\n", "", "graph_count", "=", "self", ".", "session", ".", "run", "(", "self", ".", "total_graphs", ")", "\n", "if", "self", ".", "mode", "==", "Constants", ".", "TRAIN", ":", "\n", "\t\t\t", "graph_count", "=", "self", ".", "session", ".", "run", "(", "self", ".", "increase_graph", ")", "\n", "", "elif", "Constants", ".", "MODE", "!=", "Constants", ".", "TRAIN", ":", "\n", "\t\t\t", "while", "len", "(", "self", ".", "local_batch", ")", ">", "0", ":", "\n", "\t\t\t\t", "self", ".", "process_full_batch", "(", "node_count", ",", "True", ")", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Worker.Worker.fill_batch": [[170, 182], ["range", "Worker.Worker.graph.get_data_next_node", "Worker.Worker.add_to_local_batch", "Worker.Worker.session.run", "Worker.Worker.session.run"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_data_next_node", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Worker.Worker.add_to_local_batch"], ["self", ".", "graph", ".", "write_predictions", "(", "self", ".", "folder_name", ",", "sub_folder", ",", "file_name", ")", "\n", "", "self", ".", "save_model", "(", "saver", ",", "graph_count", ")", "\n", "\n", "return", "node_count", "\n", "\n", "#---------------------------------------------------------------------------", "\n", "", "def", "fill_batch", "(", "self", ")", ":", "\n", "\t\t", "for", "_", "in", "range", "(", "0", ",", "Constants", ".", "BATCH_SIZE", ")", ":", "\n", "\t\t\t", "d", ",", "e", ",", "c", ",", "id", ",", "graph_finished", "=", "self", ".", "graph", ".", "get_data_next_node", "(", ")", "\n", "if", "self", ".", "mode", "==", "Constants", ".", "TRAIN", ":", "\n", "\t\t\t\t", "self", ".", "add_to_global_batch", "(", "d", ",", "e", ",", "c", ",", "id", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "self", ".", "add_to_local_batch", "(", "d", ",", "e", ",", "c", ",", "id", ")", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Worker.Worker.process_full_batch": [[184, 201], ["Worker.Worker.local_batch.pop", "Worker.Worker.shuffle", "Worker.Worker.summary.add_info", "Worker.Worker.summary.write", "neural_net.train_network", "neural_net.test_network", "Worker.Worker.graph.predicted_values"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Batch.Batch.shuffle", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Summary.Summary.add_info", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Summary.Summary.write", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Neural_Net.Neural_Net.train_network", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Neural_Net.Neural_Net.test_network", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.predicted_values"], ["\t\t\t\t", "total_count", "=", "self", ".", "session", ".", "run", "(", "self", ".", "increase_node", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "total_count", "=", "self", ".", "session", ".", "run", "(", "self", ".", "increase_node_test", ")", "\n", "", "if", "graph_finished", ":", "\n", "\t\t\t\t", "break", "\n", "\n", "", "", "return", "graph_finished", ",", "total_count", "\n", "\n", "#---------------------------------------------------------------------------", "\n", "", "def", "process_full_batch", "(", "self", ",", "node_count", ",", "overide", ")", ":", "\n", "\t\t", "selected_batch", "=", "None", "\n", "if", "self", ".", "mode", "==", "Constants", ".", "TRAIN", ":", "\n", "\t\t\t", "lock", ".", "acquire", "(", ")", "\n", "if", "full_batch", ":", "\n", "\t\t\t\t", "selected_batch", "=", "full_batch", ".", "pop", "(", "0", ")", "\n", "selected_batch", ".", "shuffle", "(", ")", "\n", "", "lock", ".", "release", "(", ")", "\n", "", "else", ":", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Worker.Worker.add_to_local_batch": [[203, 208], ["Worker.Worker.local_batch[].add_data", "Worker.Worker.local_batch.append", "Batch", "Worker.Worker.graph.get_adj_mtx"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Batch.Batch.add_data", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.get_adj_mtx"], ["\t\t\t\t", "selected_batch", "=", "self", ".", "local_batch", ".", "pop", "(", "0", ")", "\n", "self", ".", "last_batch", "-=", "1", "\n", "\n", "", "", "if", "selected_batch", "is", "not", "None", ":", "\n", "\t\t\t", "if", "self", ".", "mode", "==", "Constants", ".", "TRAIN", ":", "\n", "\t\t\t\t", "total_loss", ",", "main_loss", ",", "reg_loss", ",", "c", "=", "neural_net", ".", "train_network", "(", "self", ".", "session", ",", "selected_batch", ")", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Worker.Worker.calculate_kendall_tau": [[210, 237], ["scipy.kendalltau", "lock.acquire", "kendall_b_tau.append", "lock.release", "print"], "methods", ["None"], ["\t\t\t\t", "total_loss", ",", "main_loss", ",", "reg_loss", ",", "c", "=", "neural_net", ".", "test_network", "(", "self", ".", "session", ",", "selected_batch", ")", "\n", "if", "Constants", ".", "MODE", "!=", "Constants", ".", "TRAIN", ":", "\n", "\t\t\t\t\t", "self", ".", "graph", ".", "predicted_values", "(", "selected_batch", ",", "c", ")", "\n", "#print(\"Main Loss = \",main_loss/selected_batch.size, \" --- Reg Loss = \", reg_loss/selected_batch.size, \"\\t(TID = \", self.tid, \")\")", "\n", "", "", "self", ".", "summary", ".", "add_info", "(", "main_loss", ",", "reg_loss", ")", "\n", "self", ".", "summary", ".", "write", "(", "node_count", ",", "self", ".", "mode", ")", "\n", "\n", "#---------------------------------------------------------------------------", "\n", "", "", "def", "add_to_global_batch", "(", "self", ",", "d", ",", "n", ",", "c", ",", "id", ")", ":", "\n", "\t\t", "global", "batch", "\n", "lock", ".", "acquire", "(", ")", "\n", "if", "len", "(", "batch", ")", "<", "Constants", ".", "N_PARALLEL_BATCH", ":", "\n", "\t\t\t", "while", "len", "(", "batch", ")", "<", "Constants", ".", "N_PARALLEL_BATCH", ":", "\n", "\t\t\t\t", "batch", ".", "append", "(", "Batch", "(", ")", ")", "\n", "", "", "batch_index", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "len", "(", "batch", ")", ")", "\n", "batch", "[", "batch_index", "]", ".", "add_data", "(", "d", ",", "n", ",", "c", ",", "id", ")", "\n", "if", "batch", "[", "batch_index", "]", ".", "size", ">=", "Constants", ".", "BATCH_SIZE", ":", "\n", "\t\t\t", "full_b", "=", "batch", ".", "pop", "(", "batch_index", ")", "\n", "full_batch", ".", "append", "(", "full_b", ")", "\n", "", "lock", ".", "release", "(", ")", "\n", "\n", "#---------------------------------------------------------------------------", "\n", "", "def", "add_to_local_batch", "(", "self", ",", "d", ",", "n", ",", "c", ",", "id", ")", ":", "\n", "\t\t", "if", "self", ".", "last_batch", "==", "-", "1", "or", "self", ".", "local_batch", "[", "self", ".", "last_batch", "]", ".", "size", ">=", "Constants", ".", "BATCH_SIZE", ":", "\n", "\t\t\t", "self", ".", "local_batch", ".", "append", "(", "Batch", "(", ")", ")", "\n", "self", ".", "last_batch", "+=", "1", "\n", "", "self", ".", "local_batch", "[", "self", ".", "last_batch", "]", ".", "add_data", "(", "d", ",", "n", ",", "c", ",", "id", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Worker.Worker.write_mean_kendall_b_tau": [[239, 253], ["open", "open.write", "open.close", "os.path.exists", "os.makedirs", "str", "str", "numpy.std", "numpy.mean"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Summary.Summary.write"], ["", "def", "calculate_kendall_tau", "(", "self", ")", ":", "\n", "\t\t", "global", "kendall_b_tau", "\n", "rank_x", "=", "self", ".", "graph", ".", "norm_cent", "\n", "rank_y", "=", "self", ".", "graph", ".", "predictions", "\n", "tau", ",", "p_value", "=", "stats", ".", "kendalltau", "(", "rank_x", ",", "rank_y", ")", "\n", "lock", ".", "acquire", "(", ")", "\n", "if", "self", ".", "mode", "==", "Constants", ".", "REAL_NET", ":", "\n", "\t\t\t", "print", "(", "\"TAU = \"", ",", "tau", ")", "\n", "", "kendall_b_tau", ".", "append", "(", "tau", ")", "\n", "lock", ".", "release", "(", ")", "\n", "\n", "#---------------------------------------------------------------------------", "\n", "", "def", "write_mean_kendall_b_tau", "(", "self", ",", "file_name", ")", ":", "\n", "\t\t", "global", "kendall_b_tau", "\n", "if", "self", ".", "mode", "==", "Constants", ".", "TEST", ":", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Worker.Worker.save_model": [[255, 260], ["saver.save"], "methods", ["None"], ["name", "=", "self", ".", "folder_name", "+", "\"Metadata/\"", "+", "sub_folder", "+", "\"Kendall_\"", "+", "Constants", ".", "SUMMARY_NAME", "+", "\".dat\"", "\n", "", "else", ":", "\n", "\t\t\t", "sub_folder", "=", "self", ".", "real_net_subfolder", "\n", "folder", "=", "self", ".", "folder_name", "+", "\"Metadata/\"", "+", "sub_folder", "+", "Constants", ".", "SUMMARY_NAME", "+", "\"/\"", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "folder", ")", ":", "\n", "\t\t\t\t", "os", ".", "makedirs", "(", "folder", ")", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Summary.Summary.__init__": [[6, 12], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "writer", ",", "mode", ")", ":", "\n", "        ", "self", ".", "mean_loss", "=", "[", "]", "\n", "self", ".", "reg_loss", "=", "[", "]", "\n", "self", ".", "last_write", "=", "0", "\n", "self", ".", "mode", "=", "mode", "\n", "self", ".", "writer", "=", "writer", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Summary.Summary.add_info": [[13, 16], ["Summary.Summary.mean_loss.append", "Summary.Summary.reg_loss.append"], "methods", ["None"], ["", "def", "add_info", "(", "self", ",", "mean_loss", ",", "reg_loss", ")", ":", "\n", "        ", "self", ".", "mean_loss", ".", "append", "(", "mean_loss", ")", "\n", "self", ".", "reg_loss", ".", "append", "(", "reg_loss", ")", "\n", "#self,write(count, mode)", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Summary.Summary.reset": [[18, 21], ["None"], "methods", ["None"], ["", "def", "reset", "(", "self", ")", ":", "\n", "        ", "self", ".", "mean_loss", "=", "[", "]", "\n", "self", ".", "reg_loss", "=", "[", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Summary.Summary.write": [[22, 42], ["numpy.mean", "numpy.mean", "tensorflow.Summary", "tensorflow.Summary.value.add", "tensorflow.Summary.value.add", "Summary.Summary.writer.add_summary", "Summary.Summary.writer.flush", "Summary.Summary.reset", "float", "float"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Summary.Summary.reset"], ["", "def", "write", "(", "self", ",", "count", ",", "mode", ")", ":", "\n", "        ", "if", "count", "-", "self", ".", "last_write", ">=", "Constants", ".", "SUMMARY_INTERVAL", "or", "self", ".", "mode", "!=", "mode", ":", "\n", "            ", "self", ".", "last_write", "=", "count", "\n", "mean_loss", "=", "np", ".", "mean", "(", "self", ".", "mean_loss", ")", "\n", "reg_loss", "=", "np", ".", "mean", "(", "self", ".", "reg_loss", ")", "\n", "#print(\"Main Loss = \",mean_loss, \" --- Reg Loss = \", reg_loss)", "\n", "summary", "=", "tf", ".", "Summary", "(", ")", "\n", "if", "self", ".", "mode", "==", "Constants", ".", "TRAIN", ":", "\n", "                ", "name", "=", "Constants", ".", "SUMMARY_NAME", "+", "'/Train_'", "\n", "", "else", ":", "\n", "                ", "name", "=", "Constants", ".", "SUMMARY_NAME", "+", "'/Test_'", "\n", "", "summary", ".", "value", ".", "add", "(", "tag", "=", "name", "+", "'Mean_Loss'", ",", "simple_value", "=", "float", "(", "mean_loss", ")", ")", "\n", "summary", ".", "value", ".", "add", "(", "tag", "=", "name", "+", "'Reg_Loss'", ",", "simple_value", "=", "float", "(", "reg_loss", ")", ")", "\n", "#count = float(frame_count) / float(FRAMES_IN_EPOCH)", "\n", "self", ".", "writer", ".", "add_summary", "(", "summary", ",", "count", ")", "\n", "self", ".", "writer", ".", "flush", "(", ")", "\n", "self", ".", "reset", "(", ")", "\n", "self", ".", "mode", "=", "mode", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph_Generator.Graph_Generator.__init__": [[46, 50], ["None"], "methods", ["None"], ["\t", "def", "__init__", "(", "self", ",", "id", ",", "num_worker", ")", ":", "\n", "\t\t", "self", ".", "num_worker", "=", "num_worker", "\n", "self", ".", "tid", "=", "id", "\n", "self", ".", "folder_name", "=", "\"../Graphs/\"", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph_Generator.Graph_Generator.generate_set": [[52, 87], ["Graph.Graph.Graph", "range", "int", "int", "lock.acquire", "lock.release", "Graph_Generator.Graph_Generator.fetch_variables", "Graph.Graph.Graph.save_file", "Graph.Graph.Graph.generate_random_graph", "Graph.Graph.Graph.generate_smallworld_graph", "Graph.Graph.Graph.generate_scalefree_graph", "print"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph_Generator.Graph_Generator.fetch_variables", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.save_file", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.generate_random_graph", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.generate_smallworld_graph", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph.Graph.generate_scalefree_graph"], ["", "def", "generate_set", "(", "self", ",", "mode", ")", ":", "\n", "\t\t", "global", "graph_train_number", "\n", "global", "graph_test_number", "\n", "\n", "if", "mode", "==", "TRAIN", ":", "\n", "\t\t\t", "NUM_IT", "=", "int", "(", "NUM_TRAIN_GRAPH", "/", "self", ".", "num_worker", ")", "\n", "sub_folder", "=", "\"Train/\"", "\n", "", "else", ":", "\n", "\t\t\t", "NUM_IT", "=", "int", "(", "NUM_TEST_GRAPH", "/", "self", ".", "num_worker", ")", "\n", "sub_folder", "=", "\"Test/\"", "\n", "\n", "", "graph", "=", "Graph", "(", ")", "\n", "\n", "for", "i", "in", "range", "(", "0", ",", "NUM_IT", ")", ":", "\n", "\t\t\t", "lock", ".", "acquire", "(", ")", "\n", "if", "mode", "==", "TRAIN", ":", "\n", "\t\t\t\t", "graph_train_number", "+=", "1", "\n", "g_number", "=", "graph_train_number", "\n", "", "else", ":", "\n", "\t\t\t\t", "graph_test_number", "+=", "1", "\n", "g_number", "=", "graph_test_number", "\n", "", "lock", ".", "release", "(", ")", "\n", "\n", "n", ",", "p", ",", "k", ",", "m", ",", "type", "=", "self", ".", "fetch_variables", "(", ")", "\n", "\n", "if", "type", "==", "RANDOM", ":", "\n", "\t\t\t\t", "graph", ".", "generate_random_graph", "(", "n", ",", "p", ")", "\n", "", "elif", "type", "==", "SMALLWORLD", ":", "\n", "\t\t\t\t", "graph", ".", "generate_smallworld_graph", "(", "n", ",", "p", ",", "k", ")", "\n", "", "elif", "type", "==", "SCALEFREE", ":", "\n", "\t\t\t\t", "graph", ".", "generate_scalefree_graph", "(", "n", ",", "m", ")", "\n", "", "else", ":", "\n", "\t\t\t\t", "print", "(", "\"Unexpected GRAPH_TYPE value.\"", ")", "\n", "\n", "", "graph", ".", "save_file", "(", "g_number", ",", "self", ".", "folder_name", ",", "sub_folder", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph_Generator.Graph_Generator.fetch_variables": [[89, 102], ["numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "float", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "numpy.random.randint", "int", "int"], "methods", ["None"], ["", "", "def", "fetch_variables", "(", "self", ")", ":", "\n", "\t\t", "n", "=", "np", ".", "random", ".", "randint", "(", "MIN_NODES", ",", "MAX_NODES", "+", "1", ")", "\n", "p", "=", "float", "(", "np", ".", "random", ".", "randint", "(", "int", "(", "1000", "*", "MIN_P", ")", ",", "int", "(", "1000", "*", "(", "MAX_P", ")", ")", ")", ")", "/", "1000.0", "\n", "k", "=", "np", ".", "random", ".", "randint", "(", "MIN_K", ",", "MAX_K", "+", "1", ")", "\n", "m", "=", "np", ".", "random", ".", "randint", "(", "MIN_M", ",", "MAX_M", "+", "1", ")", "\n", "\n", "type", "=", "GRAPH_TYPE", "\n", "if", "GRAPH_TYPE", "==", "MIX", ":", "\n", "\t\t\t", "type", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "RANDOM", "+", "1", ")", "\n", "", "elif", "GRAPH_TYPE", "==", "SCALE_SMALL", ":", "\n", "\t\t\t", "type", "=", "np", ".", "random", ".", "randint", "(", "0", ",", "SCALEFREE", "+", "1", ")", "\n", "\n", "", "return", "n", ",", "p", ",", "k", ",", "m", ",", "type", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph_Generator.Graph_Generator.run_graph_generator": [[104, 107], ["Graph_Generator.Graph_Generator.generate_set", "Graph_Generator.Graph_Generator.generate_set"], "methods", ["home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph_Generator.Graph_Generator.generate_set", "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.Graph_Generator.Graph_Generator.generate_set"], ["", "def", "run_graph_generator", "(", "self", ")", ":", "\n", "\t\t", "self", ".", "generate_set", "(", "TRAIN", ")", "\n", "self", ".", "generate_set", "(", "TEST", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.loss_fn.bpr_loss": [[18, 20], ["tensorflow.reduce_mean", "tensorflow.log", "tensorflow.sigmoid"], "function", ["None"], ["def", "bpr_loss", "(", "x_pos", ",", "x_neg", ")", ":", "\n", "\t", "return", "-", "tf", ".", "reduce_mean", "(", "tf", ".", "log", "(", "tf", ".", "sigmoid", "(", "x_pos", "-", "x_neg", ")", "+", "EPSILON", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.MatheusMRFM_NCA-GE.NCA-GE.loss_fn.top1_loss": [[21, 23], ["tensorflow.reduce_mean", "tensorflow.sigmoid", "tensorflow.sigmoid"], "function", ["None"], ["", "def", "top1_loss", "(", "x_pos", ",", "x_neg", ")", ":", "\n", "\t", "return", "tf", ".", "reduce_mean", "(", "tf", ".", "sigmoid", "(", "x_neg", "-", "x_pos", ")", "+", "tf", ".", "sigmoid", "(", "x_neg", ")", ")", "\n", "", ""]]}