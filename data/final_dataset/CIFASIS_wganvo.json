{"home.repos.pwc.inspect_result.CIFASIS_wganvo.None.triangulate.matcher": [[29, 80], ["cv2.xfeatures2d.SIFT_create", "cv2.xfeatures2d.SIFT_create.detectAndCompute", "cv2.xfeatures2d.SIFT_create.detectAndCompute", "cv2.BFMatcher", "cv2.BFMatcher.knnMatch", "numpy.int32", "numpy.int32", "cv2.findFundamentalMat", "pts1.transpose().astype.transpose().astype", "pts2.transpose().astype.transpose().astype", "good.append", "pts2.transpose().astype.append", "pts1.transpose().astype.append", "pts1.transpose().astype.transpose", "pts2.transpose().astype.transpose", "mask.ravel", "mask.ravel"], "function", ["None"], ["def", "matcher", "(", "img1", ",", "img2", ")", ":", "\n", "    ", "sift", "=", "cv2", ".", "xfeatures2d", ".", "SIFT_create", "(", ")", "\n", "# find the keypoints and descriptors with SIFT", "\n", "kp1", ",", "des1", "=", "sift", ".", "detectAndCompute", "(", "img1", ",", "None", ")", "\n", "kp2", ",", "des2", "=", "sift", ".", "detectAndCompute", "(", "img2", ",", "None", ")", "\n", "# Brute Force Matcher parameters", "\n", "bf", "=", "cv2", ".", "BFMatcher", "(", "crossCheck", "=", "True", ")", "\n", "matches", "=", "bf", ".", "knnMatch", "(", "des1", ",", "des2", ",", "k", "=", "1", ")", "\n", "# FLANN parameters", "\n", "# FLANN_INDEX_KDTREE = 0", "\n", "# index_params = dict(algorithm = FLANN_INDEX_KDTREE, trees = 5)", "\n", "# search_params = dict(checks=50)", "\n", "# flann = cv2.FlannBasedMatcher(index_params,search_params)", "\n", "# matches = flann.knnMatch(des1,des2,k=2)", "\n", "good", "=", "[", "]", "\n", "pts1", "=", "[", "]", "\n", "pts2", "=", "[", "]", "\n", "\n", "for", "match", "in", "matches", ":", "\n", "        ", "if", "match", ":", "\n", "# print('%d -> %d: %f' % (match[0].queryIdx, match[0].trainIdx, match[0].distance))", "\n", "            ", "m", "=", "match", "[", "0", "]", "\n", "good", ".", "append", "(", "m", ")", "\n", "pts2", ".", "append", "(", "kp2", "[", "m", ".", "trainIdx", "]", ".", "pt", ")", "\n", "pts1", ".", "append", "(", "kp1", "[", "m", ".", "queryIdx", "]", ".", "pt", ")", "\n", "\n", "", "", "pts1", "=", "np", ".", "int32", "(", "pts1", ")", "\n", "pts2", "=", "np", ".", "int32", "(", "pts2", ")", "\n", "F", ",", "mask", "=", "cv2", ".", "findFundamentalMat", "(", "pts1", ",", "pts2", ",", "cv2", ".", "FM_LMEDS", ")", "\n", "\n", "# We select only inlier points", "\n", "pts1", "=", "pts1", "[", "mask", ".", "ravel", "(", ")", "==", "1", "]", "\n", "pts2", "=", "pts2", "[", "mask", ".", "ravel", "(", ")", "==", "1", "]", "\n", "# draw_params = dict(matchColor=(0, 255, 0),", "\n", "#                    singlePointColor=(255, 0, 0),", "\n", "#                    matchesMask=mask.ravel().tolist(),", "\n", "#                    flags=0)", "\n", "# img3 = cv2.drawMatches(img1, kp1, img2, kp2, good, None, **draw_params)", "\n", "# plt.imshow(img3), plt.show()", "\n", "\n", "pts1", "=", "pts1", ".", "transpose", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "pts2", "=", "pts2", ".", "transpose", "(", ")", ".", "astype", "(", "np", ".", "float32", ")", "\n", "\n", "same_line_mask", "=", "pts1", "[", "1", ",", ":", "]", "==", "pts2", "[", "1", ",", ":", "]", "\n", "# threshold =  (pts1[1, :] + 1) == pts2[1, :]", "\n", "# threshold |= (pts2[1, :] + 1) == pts1[1, :]", "\n", "# same_line_mask |= threshold", "\n", "pts1", "=", "pts1", "[", ":", ",", "same_line_mask", "]", "\n", "pts2", "=", "pts2", "[", ":", ",", "same_line_mask", "]", "\n", "\n", "return", "pts1", ",", "pts2", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.triangulate.triangulatePoints": [[87, 90], ["cv2.triangulatePoints"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.triangulate.triangulatePoints"], ["", "def", "triangulatePoints", "(", "P1", ",", "P2", ",", "x1", ",", "x2", ")", ":", "\n", "    ", "X", "=", "cv2", ".", "triangulatePoints", "(", "P1", ",", "P2", ",", "x1", ",", "x2", ")", "\n", "return", "X", "/", "X", "[", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.trajectory.PosePath3D.__init__": [[62, 79], ["trajectory.TrajectoryException", "numpy.array", "numpy.array"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "positions_xyz", "=", "None", ",", "orientations_quat_wxyz", "=", "None", ",", "poses_se3", "=", "None", ",", "meta", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param positions_xyz: nx3 list of x,y,z positions\n        :param orientations_quat_wxyz: nx4 list of quaternions (w,x,y,z format)\n        :param poses_se3: list of SE(3) poses\n        :param meta: optional metadata\n        \"\"\"", "\n", "if", "(", "positions_xyz", "is", "None", "or", "orientations_quat_wxyz", "is", "None", ")", "and", "poses_se3", "is", "None", ":", "\n", "            ", "raise", "TrajectoryException", "(", "\"must provide at least positions_xyz \"", "\n", "\"& orientations_quat_wxyz or poses_se3\"", ")", "\n", "", "if", "positions_xyz", "is", "not", "None", ":", "\n", "            ", "self", ".", "_positions_xyz", "=", "np", ".", "array", "(", "positions_xyz", ")", "\n", "", "if", "orientations_quat_wxyz", "is", "not", "None", ":", "\n", "            ", "self", ".", "_orientations_quat_wxyz", "=", "np", ".", "array", "(", "orientations_quat_wxyz", ")", "\n", "", "if", "poses_se3", "is", "not", "None", ":", "\n", "            ", "self", ".", "_poses_se3", "=", "poses_se3", "\n", "", "self", ".", "meta", "=", "{", "}", "if", "meta", "is", "None", "else", "meta", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.trajectory.PosePath3D.__str__": [[80, 82], ["trajectory.PosePath3D.path_length"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.trajectory.PosePath3D.path_length"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "return", "\"{} poses, {:.3f}m path length\"", ".", "format", "(", "self", ".", "num_poses", ",", "self", ".", "path_length", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.trajectory.PosePath3D.__eq__": [[83, 91], ["all", "numpy.array_equal", "numpy.array_equal", "type", "type", "numpy.array_equal", "zip"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "type", "(", "other", ")", "!=", "type", "(", "self", ")", ":", "\n", "            ", "return", "False", "\n", "", "equal", "=", "True", "\n", "equal", "&=", "all", "(", "[", "np", ".", "array_equal", "(", "p1", ",", "p2", ")", "for", "p1", ",", "p2", "in", "zip", "(", "self", ".", "poses_se3", ",", "other", ".", "poses_se3", ")", "]", ")", "\n", "equal", "&=", "np", ".", "array_equal", "(", "self", ".", "orientations_quat_wxyz", ",", "other", ".", "orientations_quat_wxyz", ")", "\n", "equal", "&=", "np", ".", "array_equal", "(", "self", ".", "positions_xyz", ",", "other", ".", "positions_xyz", ")", "\n", "return", "equal", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.trajectory.PosePath3D.__ne__": [[92, 94], ["None"], "methods", ["None"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "not", "self", "==", "other", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.trajectory.PosePath3D.positions_xyz": [[95, 101], ["hasattr", "hasattr", "numpy.array"], "methods", ["None"], ["", "@", "property", "\n", "def", "positions_xyz", "(", "self", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "\"_positions_xyz\"", ")", ":", "\n", "            ", "assert", "hasattr", "(", "self", ",", "\"_poses_se3\"", ")", "\n", "self", ".", "_positions_xyz", "=", "np", ".", "array", "(", "[", "p", "[", ":", "3", ",", "3", "]", "for", "p", "in", "self", ".", "_poses_se3", "]", ")", "\n", "", "return", "self", ".", "_positions_xyz", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.trajectory.PosePath3D.orientations_quat_wxyz": [[102, 109], ["hasattr", "hasattr", "numpy.array", "transformations.quaternion_from_matrix"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.quaternion_from_matrix"], ["", "@", "property", "\n", "def", "orientations_quat_wxyz", "(", "self", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "\"_orientations_quat_wxyz\"", ")", ":", "\n", "            ", "assert", "hasattr", "(", "self", ",", "\"_poses_se3\"", ")", "\n", "self", ".", "_orientations_quat_wxyz", "=", "np", ".", "array", "(", "[", "tr", ".", "quaternion_from_matrix", "(", "p", ")", "for", "p", "in", "self", ".", "_poses_se3", "]", ")", "\n", "", "return", "self", ".", "_orientations_quat_wxyz", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.trajectory.PosePath3D.orientations_euler": [[110, 121], ["hasattr", "hasattr", "numpy.array", "hasattr", "numpy.array", "transformations.euler_from_matrix", "transformations.euler_from_quaternion"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.euler_from_matrix", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.euler_from_quaternion"], ["", "@", "property", "\n", "def", "orientations_euler", "(", "self", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "\"_orientations_euler\"", ")", ":", "\n", "            ", "if", "hasattr", "(", "self", ",", "\"_poses_se3\"", ")", ":", "\n", "                ", "self", ".", "_orientations_euler", "=", "np", ".", "array", "(", "[", "tr", ".", "euler_from_matrix", "(", "p", ",", "axes", "=", "\"sxyz\"", ")", "for", "p", "in", "self", ".", "_poses_se3", "]", ")", "\n", "", "elif", "hasattr", "(", "self", ",", "\"_orientations_quat_wxyz\"", ")", ":", "\n", "                ", "self", ".", "_orientations_euler", "=", "np", ".", "array", "(", "[", "tr", ".", "euler_from_quaternion", "(", "q", ",", "axes", "=", "\"sxyz\"", ")", "\n", "for", "q", "in", "self", ".", "_orientations_quat_wxyz", "]", ")", "\n", "", "", "return", "self", ".", "_orientations_euler", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.trajectory.PosePath3D.poses_se3": [[122, 130], ["hasattr", "hasattr", "hasattr", "trajectory.xyz_quat_wxyz_to_se3_poses"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.trajectory.xyz_quat_wxyz_to_se3_poses"], ["", "@", "property", "\n", "def", "poses_se3", "(", "self", ")", ":", "\n", "        ", "if", "not", "hasattr", "(", "self", ",", "\"_poses_se3\"", ")", ":", "\n", "            ", "assert", "hasattr", "(", "self", ",", "\"_positions_xyz\"", ")", "\n", "assert", "hasattr", "(", "self", ",", "\"_orientations_quat_wxyz\"", ")", "\n", "self", ".", "_poses_se3", "=", "xyz_quat_wxyz_to_se3_poses", "(", "self", ".", "positions_xyz", ",", "self", ".", "orientations_quat_wxyz", ")", "\n", "", "return", "self", ".", "_poses_se3", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.trajectory.PosePath3D.num_poses": [[131, 137], ["hasattr", "len"], "methods", ["None"], ["", "@", "property", "\n", "def", "num_poses", "(", "self", ")", ":", "\n", "        ", "if", "hasattr", "(", "self", ",", "\"_poses_se3\"", ")", ":", "\n", "            ", "return", "len", "(", "self", ".", "_poses_se3", ")", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "positions_xyz", ".", "shape", "[", "0", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.trajectory.PosePath3D.path_length": [[138, 150], ["float", "float", "trajectory.TrajectoryException", "geometry.arc_len", "geometry.arc_len", "len", "all", "type"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.geometry.arc_len", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.geometry.arc_len"], ["", "", "def", "path_length", "(", "self", ",", "ids", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        calculates the path length (arc-length)\n        :param ids: optional start and end index as tuple (start, end)\n        :return: path length in meters\n        \"\"\"", "\n", "if", "ids", "is", "not", "None", ":", "\n", "            ", "if", "len", "(", "ids", ")", "!=", "2", "or", "not", "all", "(", "type", "(", "i", ")", "is", "int", "for", "i", "in", "ids", ")", ":", "\n", "                ", "raise", "TrajectoryException", "(", "\"ids must be a tuple of positive integers\"", ")", "\n", "", "return", "float", "(", "geometry", ".", "arc_len", "(", "self", ".", "positions_xyz", "[", "ids", "[", "0", "]", ":", "ids", "[", "1", "]", "]", ")", ")", "\n", "", "else", ":", "\n", "            ", "return", "float", "(", "geometry", ".", "arc_len", "(", "self", ".", "positions_xyz", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.trajectory.PosePath3D.transform": [[151, 165], ["trajectory.se3_poses_to_xyz_quat_wxyz", "lie_algebra.is_se3", "trajectory.TrajectoryException", "numpy.dot", "numpy.dot"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.trajectory.se3_poses_to_xyz_quat_wxyz", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.lie_algebra.is_se3"], ["", "", "def", "transform", "(", "self", ",", "t", ",", "right_mul", "=", "False", ")", ":", "\n", "        ", "\"\"\"\n        apply a left or right multiplicative SE(3) transformation to the whole path\n        :param t: a valid SE(3) matrix\n        :param right_mul: whether to apply it right-multiplicative or not\n        \"\"\"", "\n", "if", "not", "lie", ".", "is_se3", "(", "t", ")", ":", "\n", "            ", "raise", "TrajectoryException", "(", "\"transformation is not a valid SE(3) matrix\"", ")", "\n", "", "if", "right_mul", ":", "\n", "            ", "self", ".", "_poses_se3", "=", "[", "np", ".", "dot", "(", "p", ",", "t", ")", "for", "p", "in", "self", ".", "poses_se3", "]", "\n", "", "else", ":", "\n", "            ", "self", ".", "_poses_se3", "=", "[", "np", ".", "dot", "(", "t", ",", "p", ")", "for", "p", "in", "self", ".", "poses_se3", "]", "\n", "", "self", ".", "_positions_xyz", ",", "self", ".", "_orientations_quat_wxyz", "=", "se3_poses_to_xyz_quat_wxyz", "(", "self", ".", "poses_se3", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.trajectory.PosePath3D.scale": [[166, 175], ["hasattr", "hasattr", "lie_algebra.se3"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.lie_algebra.se3"], ["", "def", "scale", "(", "self", ",", "s", ")", ":", "\n", "        ", "\"\"\"\n        apply a scaling to the whole path\n        :param s: scale factor\n        \"\"\"", "\n", "if", "hasattr", "(", "self", ",", "\"_poses_se3\"", ")", ":", "\n", "            ", "self", ".", "_poses_se3", "=", "[", "lie", ".", "se3", "(", "p", "[", ":", "3", ",", ":", "3", "]", ",", "s", "*", "p", "[", ":", "3", ",", "3", "]", ")", "for", "p", "in", "self", ".", "_poses_se3", "]", "\n", "", "if", "hasattr", "(", "self", ",", "\"_positions_xyz\"", ")", ":", "\n", "            ", "self", ".", "_positions_xyz", "=", "s", "*", "self", ".", "_positions_xyz", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.trajectory.PosePath3D.reduce_to_ids": [[176, 187], ["hasattr", "hasattr", "hasattr"], "methods", ["None"], ["", "", "def", "reduce_to_ids", "(", "self", ",", "ids", ")", ":", "\n", "        ", "\"\"\"\n        reduce the elements to the ones specified in ids\n        :param ids: list of integer indices\n        \"\"\"", "\n", "if", "hasattr", "(", "self", ",", "\"_positions_xyz\"", ")", ":", "\n", "            ", "self", ".", "_positions_xyz", "=", "self", ".", "_positions_xyz", "[", "ids", "]", "\n", "", "if", "hasattr", "(", "self", ",", "\"_orientations_quat_wxyz\"", ")", ":", "\n", "            ", "self", ".", "_orientations_quat_wxyz", "=", "self", ".", "_orientations_quat_wxyz", "[", "ids", "]", "\n", "", "if", "hasattr", "(", "self", ",", "\"_poses_se3\"", ")", ":", "\n", "            ", "self", ".", "_poses_se3", "=", "[", "self", ".", "_poses_se3", "[", "idx", "]", "for", "idx", "in", "ids", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.trajectory.PosePath3D.check": [[188, 206], ["all", "numpy.linalg.norm", "numpy.allclose", "len", "numpy.ones", "lie_algebra.is_se3"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.norm", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.lie_algebra.is_se3"], ["", "", "def", "check", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        checks if the data is valid\n        :return: True/False, dictionary with some detailed infos\n        \"\"\"", "\n", "same_len", "=", "self", ".", "positions_xyz", ".", "shape", "[", "0", "]", "==", "self", ".", "orientations_quat_wxyz", ".", "shape", "[", "0", "]", "==", "len", "(", "self", ".", "poses_se3", ")", "\n", "se3_valid", "=", "all", "(", "[", "lie", ".", "is_se3", "(", "p", ")", "for", "p", "in", "self", ".", "poses_se3", "]", ")", "\n", "norms", "=", "np", ".", "linalg", ".", "norm", "(", "self", ".", "orientations_quat_wxyz", ",", "axis", "=", "1", ")", "\n", "quat_normed", "=", "np", ".", "allclose", "(", "norms", ",", "np", ".", "ones", "(", "norms", ".", "shape", ")", ")", "\n", "valid", "=", "same_len", "and", "se3_valid", "and", "quat_normed", "\n", "details", "=", "{", "\n", "\"array shapes\"", ":", "\"ok\"", "if", "same_len", "else", "\"invalid (lists must have same length)\"", ",", "\n", "\"SE(3) conform\"", ":", "\"yes\"", "if", "se3_valid", "else", "\"no (poses are not valid SE(3) matrices)\"", ",", "\n", "\"quaternions\"", ":", "\"ok\"", "if", "quat_normed", "else", "\"invalid (must be unit quaternions)\"", "\n", "}", "\n", "return", "valid", ",", "details", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.trajectory.PosePath3D.get_infos": [[207, 216], ["trajectory.PosePath3D.path_length"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.trajectory.PosePath3D.path_length"], ["", "def", "get_infos", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return: dictionary with some infos about the path\n        \"\"\"", "\n", "return", "{", "\n", "\"nr. of poses\"", ":", "self", ".", "num_poses", ",", "\n", "\"path length (m)\"", ":", "self", ".", "path_length", "(", ")", ",", "\n", "\"pos_start (m)\"", ":", "self", ".", "positions_xyz", "[", "0", "]", ",", "\n", "\"pos_end (m)\"", ":", "self", ".", "positions_xyz", "[", "-", "1", "]", "\n", "}", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.trajectory.PosePath3D.get_statistics": [[218, 220], ["None"], "methods", ["None"], ["", "def", "get_statistics", "(", "self", ")", ":", "\n", "        ", "return", "{", "}", "# no idea yet", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.trajectory.PoseTrajectory3D.__init__": [[227, 238], ["trajectory.PosePath3D.__init__", "numpy.array", "trajectory.TrajectoryException"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.__init__"], ["def", "__init__", "(", "self", ",", "positions_xyz", "=", "None", ",", "orientations_quat_wxyz", "=", "None", ",", "\n", "timestamps", "=", "None", ",", "poses_se3", "=", "None", ",", "meta", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        :param timestamps: optional nx1 list of timestamps\n        \"\"\"", "\n", "super", "(", "PoseTrajectory3D", ",", "self", ")", ".", "__init__", "(", "positions_xyz", ",", "orientations_quat_wxyz", ",", "\n", "poses_se3", ",", "meta", ")", "\n", "# this is a bit ugly...", "\n", "if", "timestamps", "is", "None", ":", "\n", "            ", "raise", "TrajectoryException", "(", "\"no timestamps provided\"", ")", "\n", "", "self", ".", "timestamps", "=", "np", ".", "array", "(", "timestamps", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.trajectory.PoseTrajectory3D.__str__": [[239, 242], ["trajectory.PosePath3D.__str__"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.trajectory.PoseTrajectory3D.__str__"], ["", "def", "__str__", "(", "self", ")", ":", "\n", "        ", "s", "=", "super", "(", "PoseTrajectory3D", ",", "self", ")", ".", "__str__", "(", ")", "\n", "return", "s", "+", "\", {:.3f}s duration\"", ".", "format", "(", "self", ".", "timestamps", "[", "-", "1", "]", "-", "self", ".", "timestamps", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.trajectory.PoseTrajectory3D.__eq__": [[243, 249], ["trajectory.PosePath3D.__eq__", "numpy.array_equal", "type", "type"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.__eq__"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "type", "(", "other", ")", "!=", "type", "(", "self", ")", ":", "\n", "            ", "return", "False", "\n", "", "equal", "=", "super", "(", "PoseTrajectory3D", ",", "self", ")", ".", "__eq__", "(", "other", ")", "\n", "equal", "&=", "np", ".", "array_equal", "(", "self", ".", "timestamps", ",", "other", ".", "timestamps", ")", "\n", "return", "equal", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.trajectory.PoseTrajectory3D.__ne__": [[250, 252], ["None"], "methods", ["None"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "not", "self", "==", "other", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.trajectory.PoseTrajectory3D.reduce_to_ids": [[253, 256], ["trajectory.PosePath3D.reduce_to_ids"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.trajectory.PoseTrajectory3D.reduce_to_ids"], ["", "def", "reduce_to_ids", "(", "self", ",", "ids", ")", ":", "\n", "        ", "super", "(", "PoseTrajectory3D", ",", "self", ")", ".", "reduce_to_ids", "(", "ids", ")", "\n", "self", ".", "timestamps", "=", "self", ".", "timestamps", "[", "ids", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.trajectory.PoseTrajectory3D.check": [[257, 267], ["trajectory.PosePath3D.check", "numpy.alltrue", "len", "len", "len", "numpy.sort", "numpy.unique"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.trajectory.PoseTrajectory3D.check"], ["", "def", "check", "(", "self", ")", ":", "\n", "        ", "valid", ",", "details", "=", "super", "(", "PoseTrajectory3D", ",", "self", ")", ".", "check", "(", ")", "\n", "len_stamps_valid", "=", "(", "len", "(", "self", ".", "timestamps", ")", "==", "len", "(", "self", ".", "positions_xyz", ")", ")", "\n", "valid", "&=", "len_stamps_valid", "\n", "details", "[", "\"nr. of stamps\"", "]", "=", "\"ok\"", "if", "len_stamps_valid", "else", "\"wrong\"", "\n", "stamps_ascending", "=", "np", ".", "alltrue", "(", "np", ".", "sort", "(", "self", ".", "timestamps", ")", "==", "self", ".", "timestamps", ")", "\n", "stamps_ascending", "&=", "np", ".", "unique", "(", "self", ".", "timestamps", ")", ".", "size", "==", "len", "(", "self", ".", "timestamps", ")", "\n", "valid", "&=", "stamps_ascending", "\n", "details", "[", "\"timestamps\"", "]", "=", "\"ok\"", "if", "stamps_ascending", "else", "\"wrong, not ascending or duplicates\"", "\n", "return", "valid", ",", "details", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.trajectory.PoseTrajectory3D.get_infos": [[268, 277], ["trajectory.PosePath3D.get_infos"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.trajectory.PoseTrajectory3D.get_infos"], ["", "def", "get_infos", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return: dictionary with some infos about the trajectory\n        \"\"\"", "\n", "infos", "=", "super", "(", "PoseTrajectory3D", ",", "self", ")", ".", "get_infos", "(", ")", "\n", "infos", "[", "\"duration (s)\"", "]", "=", "self", ".", "timestamps", "[", "-", "1", "]", "-", "self", ".", "timestamps", "[", "0", "]", "\n", "infos", "[", "\"t_start (s)\"", "]", "=", "self", ".", "timestamps", "[", "0", "]", "\n", "infos", "[", "\"t_end (s)\"", "]", "=", "self", ".", "timestamps", "[", "-", "1", "]", "\n", "return", "infos", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.trajectory.PoseTrajectory3D.get_statistics": [[278, 298], ["trajectory.PosePath3D.get_statistics", "max", "min", "numpy.mean", "super().get_statistics.update", "trajectory.calc_speed", "range", "len"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.trajectory.PoseTrajectory3D.get_statistics", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.trajectory.calc_speed"], ["", "def", "get_statistics", "(", "self", ")", ":", "\n", "        ", "\"\"\"\n        :return: dictionary with some statistics of the trajectory\n        \"\"\"", "\n", "stats", "=", "super", "(", "PoseTrajectory3D", ",", "self", ")", ".", "get_statistics", "(", ")", "\n", "speeds", "=", "[", "calc_speed", "(", "self", ".", "positions_xyz", "[", "i", "]", ",", "self", ".", "positions_xyz", "[", "i", "+", "1", "]", ",", "\n", "self", ".", "timestamps", "[", "i", "]", ",", "self", ".", "timestamps", "[", "i", "+", "1", "]", ")", "\n", "for", "i", "in", "range", "(", "len", "(", "self", ".", "positions_xyz", ")", "-", "1", ")", "]", "\n", "vmax", "=", "max", "(", "speeds", ")", "\n", "vmin", "=", "min", "(", "speeds", ")", "\n", "vmean", "=", "np", ".", "mean", "(", "speeds", ")", "\n", "stats", ".", "update", "(", "{", "\n", "\"v_max (m/s)\"", ":", "vmax", ",", "\n", "\"v_min (m/s)\"", ":", "vmin", ",", "\n", "\"v_avg (m/s)\"", ":", "vmean", ",", "\n", "\"v_max (km/h)\"", ":", "vmax", "*", "3.6", ",", "\n", "\"v_min (km/h)\"", ":", "vmin", "*", "3.6", ",", "\n", "\"v_avg (km/h)\"", ":", "vmean", "*", "3.6", "\n", "}", ")", "\n", "return", "stats", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.trajectory.calc_speed": [[304, 315], ["trajectory.TrajectoryException", "numpy.linalg.norm", "str", "str"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.norm"], ["", "def", "calc_speed", "(", "xyz_1", ",", "xyz_2", ",", "t_1", ",", "t_2", ")", ":", "\n", "    ", "\"\"\"\n    :param xyz_1: position at timestamp 1\n    :param xyz_2: position at timestamp 2\n    :param t_1: timestamp 1\n    :param t_2: timestamp 2\n    :return: speed in m/s\n    \"\"\"", "\n", "if", "(", "t_2", "-", "t_1", ")", "<=", "0", ":", "\n", "        ", "raise", "TrajectoryException", "(", "\"bad timestamps: \"", "+", "str", "(", "t_1", ")", "+", "\" & \"", "+", "str", "(", "t_2", ")", ")", "\n", "", "return", "np", ".", "linalg", ".", "norm", "(", "xyz_2", "-", "xyz_1", ")", "/", "(", "t_2", "-", "t_1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.trajectory.calc_angular_speed": [[317, 335], ["trajectory.TrajectoryException", "lie_algebra.so3_log", "lie_algebra.so3_log", "str", "lie_algebra.so3_log", "lie_algebra.so3_log", "str"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.lie_algebra.so3_log", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.lie_algebra.so3_log", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.lie_algebra.so3_log", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.lie_algebra.so3_log"], ["", "def", "calc_angular_speed", "(", "p_1", ",", "p_2", ",", "t_1", ",", "t_2", ",", "degrees", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    :param p_1: pose at timestamp 1\n    :param p_2: pose at timestamp 2\n    :param t_1: timestamp 1\n    :param t_2: timestamp 2\n    :param degrees: set to True to return deg/s\n    :return: speed in rad/s\n    \"\"\"", "\n", "if", "(", "t_2", "-", "t_1", ")", "<=", "0", ":", "\n", "        ", "raise", "TrajectoryException", "(", "\"bad timestamps: \"", "+", "str", "(", "t_1", ")", "+", "\" & \"", "+", "str", "(", "t_2", ")", ")", "\n", "", "if", "degrees", ":", "\n", "        ", "angle_1", "=", "lie", ".", "so3_log", "(", "p_1", "[", ":", "3", ",", ":", "3", "]", ")", "*", "180", "/", "np", ".", "pi", "\n", "angle_2", "=", "lie", ".", "so3_log", "(", "p_2", "[", ":", "3", ",", ":", "3", "]", ")", "*", "180", "/", "np", ".", "pi", "\n", "", "else", ":", "\n", "        ", "angle_1", "=", "lie", ".", "so3_log", "(", "p_1", "[", ":", "3", ",", ":", "3", "]", ")", "\n", "angle_2", "=", "lie", ".", "so3_log", "(", "p_2", "[", ":", "3", ",", ":", "3", "]", ")", "\n", "", "return", "(", "angle_2", "-", "angle_1", ")", "/", "(", "t_2", "-", "t_1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.trajectory.xyz_quat_wxyz_to_se3_poses": [[337, 341], ["lie_algebra.se3", "lie_algebra.so3_from_se3", "zip", "transformations.quaternion_matrix"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.lie_algebra.se3", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.lie_algebra.so3_from_se3", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.quaternion_matrix"], ["", "def", "xyz_quat_wxyz_to_se3_poses", "(", "xyz", ",", "quat", ")", ":", "\n", "    ", "poses", "=", "[", "lie", ".", "se3", "(", "lie", ".", "so3_from_se3", "(", "tr", ".", "quaternion_matrix", "(", "quat", ")", ")", ",", "xyz", ")", "\n", "for", "quat", ",", "xyz", "in", "zip", "(", "quat", ",", "xyz", ")", "]", "\n", "return", "poses", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.trajectory.se3_poses_to_xyz_quat_wxyz": [[343, 347], ["numpy.array", "numpy.array", "transformations.quaternion_from_matrix"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.quaternion_from_matrix"], ["", "def", "se3_poses_to_xyz_quat_wxyz", "(", "poses", ")", ":", "\n", "    ", "xyz", "=", "np", ".", "array", "(", "[", "pose", "[", ":", "3", ",", "3", "]", "for", "pose", "in", "poses", "]", ")", "\n", "quat_wxyz", "=", "np", ".", "array", "(", "[", "tr", ".", "quaternion_from_matrix", "(", "pose", ")", "for", "pose", "in", "poses", "]", ")", "\n", "return", "xyz", ",", "quat_wxyz", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.trajectory.align_trajectory": [[349, 386], ["copy.deepcopy", "logger.debug", "logger.debug", "logger.debug", "geometry.umeyama_alignment", "geometry.umeyama_alignment", "logger.debug", "copy.deepcopy.scale", "copy.deepcopy.scale", "copy.deepcopy.transform", "copy.deepcopy.transform", "lie_algebra.se3", "lie_algebra.se3"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.geometry.umeyama_alignment", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.geometry.umeyama_alignment", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.trajectory.PosePath3D.scale", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.trajectory.PosePath3D.scale", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.trajectory.PosePath3D.transform", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.trajectory.PosePath3D.transform", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.lie_algebra.se3", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.lie_algebra.se3"], ["", "def", "align_trajectory", "(", "traj", ",", "traj_ref", ",", "correct_scale", "=", "False", ",", "correct_only_scale", "=", "False", ",", "n", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\"\n    align a trajectory to a reference using Umeyama alignment\n    :param traj: the trajectory to align\n    :param traj_ref: reference trajectory\n    :param correct_scale: set to True to adjust also the scale\n    :param correct_only_scale: set to True to correct the scale, but not the pose\n    :param n: the number of poses to use, counted from the start (default: all)\n    :return: the aligned trajectory\n    \"\"\"", "\n", "traj_aligned", "=", "copy", ".", "deepcopy", "(", "traj", ")", "# otherwise np arrays will be references and mess up stuff", "\n", "with_scale", "=", "correct_scale", "or", "correct_only_scale", "\n", "if", "correct_only_scale", ":", "\n", "        ", "logger", ".", "debug", "(", "\"Correcting scale...\"", ")", "\n", "", "else", ":", "\n", "        ", "logger", ".", "debug", "(", "\"Aligning using Umeyama's method...\"", "\n", "+", "(", "\" (with scale correction)\"", "if", "with_scale", "else", "\"\"", ")", ")", "\n", "", "if", "n", "==", "-", "1", ":", "\n", "        ", "r_a", ",", "t_a", ",", "s", "=", "geometry", ".", "umeyama_alignment", "(", "traj_aligned", ".", "positions_xyz", ".", "T", ",", "\n", "traj_ref", ".", "positions_xyz", ".", "T", ",", "with_scale", ")", "\n", "", "else", ":", "\n", "        ", "r_a", ",", "t_a", ",", "s", "=", "geometry", ".", "umeyama_alignment", "(", "traj_aligned", ".", "positions_xyz", "[", ":", "n", ",", ":", "]", ".", "T", ",", "\n", "traj_ref", ".", "positions_xyz", "[", ":", "n", ",", ":", "]", ".", "T", ",", "with_scale", ")", "\n", "", "if", "not", "correct_only_scale", ":", "\n", "        ", "logger", ".", "debug", "(", "\"Rotation of alignment:\\n{}\"", "\n", "\"\\nTranslation of alignment:\\n{}\"", ".", "format", "(", "r_a", ",", "t_a", ")", ")", "\n", "", "logger", ".", "debug", "(", "\"Scale correction: {}\"", ".", "format", "(", "s", ")", ")", "\n", "\n", "if", "correct_only_scale", ":", "\n", "        ", "traj_aligned", ".", "scale", "(", "s", ")", "\n", "", "elif", "correct_scale", ":", "\n", "        ", "traj_aligned", ".", "scale", "(", "s", ")", "\n", "traj_aligned", ".", "transform", "(", "lie", ".", "se3", "(", "r_a", ",", "t_a", ")", ")", "\n", "", "else", ":", "\n", "        ", "traj_aligned", ".", "transform", "(", "lie", ".", "se3", "(", "r_a", ",", "t_a", ")", ")", "\n", "\n", "", "return", "traj_aligned", "", "", ""]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.camera_model.CameraModel.__init__": [[51, 68], ["camera_model.CameraModel.__load_intrinsics", "camera_model.CameraModel.__load_lut"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.camera_model.CameraModel.__load_intrinsics", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.camera_model.CameraModel.__load_lut"], ["def", "__init__", "(", "self", ",", "models_dir", ",", "images_dir", ")", ":", "\n", "        ", "\"\"\"Loads a camera model from disk.\n\n        Args:\n            models_dir (str): directory containing camera model files.\n            images_dir (str): directory containing images for which to read camera model.\n\n        \"\"\"", "\n", "self", ".", "camera", "=", "None", "\n", "self", ".", "camera_sensor", "=", "None", "\n", "self", ".", "focal_length", "=", "None", "\n", "self", ".", "principal_point", "=", "None", "\n", "self", ".", "G_camera_image", "=", "None", "\n", "self", ".", "bilinear_lut", "=", "None", "\n", "\n", "self", ".", "__load_intrinsics", "(", "models_dir", ",", "images_dir", ")", "\n", "self", ".", "__load_lut", "(", "models_dir", ",", "images_dir", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.camera_model.CameraModel.project": [[69, 100], ["numpy.linalg.solve", "numpy.vstack", "numpy.stack", "numpy.ravel", "range", "range", "numpy.ones"], "methods", ["None"], ["", "def", "project", "(", "self", ",", "xyz", ",", "image_size", ")", ":", "\n", "        ", "\"\"\"Projects a pointcloud into the camera using a pinhole camera model.\n\n        Args:\n            xyz (:obj: `numpy.ndarray`): 3xn array, where each column is (x, y, z) point relative to camera frame.\n            image_size (tuple[int]): dimensions of image in pixels\n\n        Returns:\n            numpy.ndarray: 2xm array of points, where each column is the (u, v) pixel coordinates of a point in pixels.\n            numpy.array: array of depth values for points in image.\n\n        Note:\n            Number of output points m will be less than or equal to number of input points n, as points that do not\n            project into the image are discarded.\n\n        \"\"\"", "\n", "if", "xyz", ".", "shape", "[", "0", "]", "==", "3", ":", "\n", "            ", "xyz", "=", "np", ".", "stack", "(", "(", "xyz", ",", "np", ".", "ones", "(", "(", "1", ",", "xyz", ".", "shape", "[", "1", "]", ")", ")", ")", ")", "\n", "", "xyzw", "=", "np", ".", "linalg", ".", "solve", "(", "self", ".", "G_camera_image", ",", "xyz", ")", "\n", "\n", "# Find which points lie in front of the camera", "\n", "in_front", "=", "[", "i", "for", "i", "in", "range", "(", "0", ",", "xyzw", ".", "shape", "[", "1", "]", ")", "if", "xyzw", "[", "2", ",", "i", "]", ">=", "0", "]", "\n", "xyzw", "=", "xyzw", "[", ":", ",", "in_front", "]", "\n", "\n", "uv", "=", "np", ".", "vstack", "(", "(", "self", ".", "focal_length", "[", "0", "]", "*", "xyzw", "[", "0", ",", ":", "]", "/", "xyzw", "[", "2", ",", ":", "]", "+", "self", ".", "principal_point", "[", "0", "]", ",", "\n", "self", ".", "focal_length", "[", "1", "]", "*", "xyzw", "[", "1", ",", ":", "]", "/", "xyzw", "[", "2", ",", ":", "]", "+", "self", ".", "principal_point", "[", "1", "]", ")", ")", "\n", "\n", "in_img", "=", "[", "i", "for", "i", "in", "range", "(", "0", ",", "uv", ".", "shape", "[", "1", "]", ")", "\n", "if", "0.5", "<=", "uv", "[", "0", ",", "i", "]", "<=", "image_size", "[", "1", "]", "and", "0.5", "<=", "uv", "[", "1", ",", "i", "]", "<=", "image_size", "[", "0", "]", "]", "\n", "\n", "return", "uv", "[", ":", ",", "in_img", "]", ",", "np", ".", "ravel", "(", "xyzw", "[", "2", ",", "in_img", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.camera_model.CameraModel.undistort": [[101, 127], ["camera_model.CameraModel.bilinear_lut[].T.reshape", "numpy.rollaxis", "numpy.rollaxis.astype", "ValueError", "len", "ValueError", "numpy.array", "scipy.ndimage.map_coordinates", "range"], "methods", ["None"], ["", "def", "undistort", "(", "self", ",", "image", ")", ":", "\n", "        ", "\"\"\"Undistorts an image.\n\n        Args:\n            image (:obj: `numpy.ndarray`): A distorted image. Must be demosaiced - ie. must be a 3-channel RGB image.\n\n        Returns:\n            numpy.ndarray: Undistorted version of image.\n\n        Raises:\n            ValueError: if image size does not match camera model.\n            ValueError: if image only has a single channel.\n\n        \"\"\"", "\n", "if", "image", ".", "shape", "[", "0", "]", "*", "image", ".", "shape", "[", "1", "]", "!=", "self", ".", "bilinear_lut", ".", "shape", "[", "0", "]", ":", "\n", "            ", "raise", "ValueError", "(", "'Incorrect image size for camera model'", ")", "\n", "\n", "", "lut", "=", "self", ".", "bilinear_lut", "[", ":", ",", "1", ":", ":", "-", "1", "]", ".", "T", ".", "reshape", "(", "(", "2", ",", "image", ".", "shape", "[", "0", "]", ",", "image", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n", "if", "len", "(", "image", ".", "shape", ")", "==", "1", ":", "\n", "            ", "raise", "ValueError", "(", "'Undistortion function only works with multi-channel images'", ")", "\n", "\n", "", "undistorted", "=", "np", ".", "rollaxis", "(", "np", ".", "array", "(", "[", "map_coordinates", "(", "image", "[", ":", ",", ":", ",", "channel", "]", ",", "lut", ",", "order", "=", "1", ")", "\n", "for", "channel", "in", "range", "(", "0", ",", "image", ".", "shape", "[", "2", "]", ")", "]", ")", ",", "0", ",", "3", ")", "\n", "\n", "return", "undistorted", ".", "astype", "(", "image", ".", "dtype", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.camera_model.CameraModel.__get_model_name": [[128, 142], ["re.search().group", "re.search().group", "re.search", "re.search", "RuntimeError"], "methods", ["None"], ["", "def", "__get_model_name", "(", "self", ",", "images_dir", ")", ":", "\n", "        ", "self", ".", "camera", "=", "re", ".", "search", "(", "'(stereo|mono_(left|right|rear))'", ",", "images_dir", ")", ".", "group", "(", "0", ")", "\n", "if", "self", ".", "camera", "==", "'stereo'", ":", "\n", "            ", "self", ".", "camera_sensor", "=", "re", ".", "search", "(", "'(left|centre|right)'", ",", "images_dir", ")", ".", "group", "(", "0", ")", "\n", "if", "self", ".", "camera_sensor", "==", "'left'", ":", "\n", "                ", "return", "'stereo_wide_left'", "\n", "", "elif", "self", ".", "camera_sensor", "==", "'right'", ":", "\n", "                ", "return", "'stereo_wide_right'", "\n", "", "elif", "self", ".", "camera_sensor", "==", "'centre'", ":", "\n", "                ", "return", "'stereo_narrow_left'", "\n", "", "else", ":", "\n", "                ", "raise", "RuntimeError", "(", "'Unknown camera model for given directory: '", "+", "images_dir", ")", "\n", "", "", "else", ":", "\n", "            ", "return", "self", ".", "camera", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.camera_model.CameraModel.__load_intrinsics": [[143, 156], ["camera_model.CameraModel.__get_model_name", "os.path.join", "open", "numpy.array", "float", "G_camera_image.append", "next().split", "float", "next", "line.split"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.camera_model.CameraModel.__get_model_name", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.Arcball.next"], ["", "", "def", "__load_intrinsics", "(", "self", ",", "models_dir", ",", "images_dir", ")", ":", "\n", "        ", "model_name", "=", "self", ".", "__get_model_name", "(", "images_dir", ")", "\n", "intrinsics_path", "=", "os", ".", "path", ".", "join", "(", "models_dir", ",", "model_name", "+", "'.txt'", ")", "\n", "\n", "with", "open", "(", "intrinsics_path", ")", "as", "intrinsics_file", ":", "\n", "            ", "vals", "=", "[", "float", "(", "x", ")", "for", "x", "in", "next", "(", "intrinsics_file", ")", ".", "split", "(", ")", "]", "\n", "self", ".", "focal_length", "=", "(", "vals", "[", "0", "]", ",", "vals", "[", "1", "]", ")", "\n", "self", ".", "principal_point", "=", "(", "vals", "[", "2", "]", ",", "vals", "[", "3", "]", ")", "\n", "\n", "G_camera_image", "=", "[", "]", "\n", "for", "line", "in", "intrinsics_file", ":", "\n", "                ", "G_camera_image", ".", "append", "(", "[", "float", "(", "x", ")", "for", "x", "in", "line", ".", "split", "(", ")", "]", ")", "\n", "", "self", ".", "G_camera_image", "=", "np", ".", "array", "(", "G_camera_image", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.camera_model.CameraModel.__load_lut": [[157, 164], ["camera_model.CameraModel.__get_model_name", "os.path.join", "numpy.fromfile", "lut.reshape.reshape.reshape", "lut.reshape.reshape.transpose"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.camera_model.CameraModel.__get_model_name"], ["", "", "def", "__load_lut", "(", "self", ",", "models_dir", ",", "images_dir", ")", ":", "\n", "        ", "model_name", "=", "self", ".", "__get_model_name", "(", "images_dir", ")", "\n", "lut_path", "=", "os", ".", "path", ".", "join", "(", "models_dir", ",", "model_name", "+", "'_distortion_lut.bin'", ")", "\n", "\n", "lut", "=", "np", ".", "fromfile", "(", "lut_path", ",", "np", ".", "double", ")", "\n", "lut", "=", "lut", ".", "reshape", "(", "[", "2", ",", "lut", ".", "size", "//", "2", "]", ")", "\n", "self", ".", "bilinear_lut", "=", "lut", ".", "transpose", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.camera_model.CameraModel.get_focal_length": [[165, 167], ["None"], "methods", ["None"], ["", "def", "get_focal_length", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "focal_length", "\n", "", "def", "get_principal_point", "(", "self", ")", ":", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.camera_model.CameraModel.get_principal_point": [[167, 169], ["None"], "methods", ["None"], ["", "def", "get_principal_point", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "principal_point", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.Arcball.__init__": [[1558, 1582], ["numpy.array", "numpy.array", "numpy.array", "transformations.quaternion_from_matrix", "transformations.vector_norm", "ValueError"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.quaternion_from_matrix", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.vector_norm"], ["def", "__init__", "(", "self", ",", "initial", "=", "None", ")", ":", "\n", "        ", "\"\"\"Initialize virtual trackball control.\n\n        initial : quaternion or rotation matrix\n\n        \"\"\"", "\n", "self", ".", "_axis", "=", "None", "\n", "self", ".", "_axes", "=", "None", "\n", "self", ".", "_radius", "=", "1.0", "\n", "self", ".", "_center", "=", "[", "0.0", ",", "0.0", "]", "\n", "self", ".", "_vdown", "=", "numpy", ".", "array", "(", "[", "0.0", ",", "0.0", ",", "1.0", "]", ")", "\n", "self", ".", "_constrain", "=", "False", "\n", "if", "initial", "is", "None", ":", "\n", "            ", "self", ".", "_qdown", "=", "numpy", ".", "array", "(", "[", "1.0", ",", "0.0", ",", "0.0", ",", "0.0", "]", ")", "\n", "", "else", ":", "\n", "            ", "initial", "=", "numpy", ".", "array", "(", "initial", ",", "dtype", "=", "numpy", ".", "float64", ")", "\n", "if", "initial", ".", "shape", "==", "(", "4", ",", "4", ")", ":", "\n", "                ", "self", ".", "_qdown", "=", "quaternion_from_matrix", "(", "initial", ")", "\n", "", "elif", "initial", ".", "shape", "==", "(", "4", ",", ")", ":", "\n", "                ", "initial", "/=", "vector_norm", "(", "initial", ")", "\n", "self", ".", "_qdown", "=", "initial", "\n", "", "else", ":", "\n", "                ", "raise", "ValueError", "(", "\"initial not a quaternion or matrix\"", ")", "\n", "", "", "self", ".", "_qnow", "=", "self", ".", "_qpre", "=", "self", ".", "_qdown", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.Arcball.place": [[1583, 1595], ["float"], "methods", ["None"], ["", "def", "place", "(", "self", ",", "center", ",", "radius", ")", ":", "\n", "        ", "\"\"\"Place Arcball, e.g. when window size changes.\n\n        center : sequence[2]\n            Window coordinates of trackball center.\n        radius : float\n            Radius of trackball in window coordinates.\n\n        \"\"\"", "\n", "self", ".", "_radius", "=", "float", "(", "radius", ")", "\n", "self", ".", "_center", "[", "0", "]", "=", "center", "[", "0", "]", "\n", "self", ".", "_center", "[", "1", "]", "=", "center", "[", "1", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.Arcball.setaxes": [[1596, 1602], ["transformations.unit_vector"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.unit_vector"], ["", "def", "setaxes", "(", "self", ",", "*", "axes", ")", ":", "\n", "        ", "\"\"\"Set axes to constrain rotations.\"\"\"", "\n", "if", "axes", "is", "None", ":", "\n", "            ", "self", ".", "_axes", "=", "None", "\n", "", "else", ":", "\n", "            ", "self", ".", "_axes", "=", "[", "unit_vector", "(", "axis", ")", "for", "axis", "in", "axes", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.Arcball.constrain": [[1608, 1612], ["bool"], "methods", ["None"], ["", "@", "constrain", ".", "setter", "\n", "def", "constrain", "(", "self", ",", "value", ")", ":", "\n", "        ", "\"\"\"Set state of constrain to axis mode.\"\"\"", "\n", "self", ".", "_constrain", "=", "bool", "(", "value", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.Arcball.down": [[1613, 1622], ["transformations.arcball_map_to_sphere", "transformations.arcball_nearest_axis", "transformations.arcball_constrain_to_axis"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.arcball_map_to_sphere", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.arcball_nearest_axis", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.arcball_constrain_to_axis"], ["", "def", "down", "(", "self", ",", "point", ")", ":", "\n", "        ", "\"\"\"Set initial cursor window coordinates and pick constrain-axis.\"\"\"", "\n", "self", ".", "_vdown", "=", "arcball_map_to_sphere", "(", "point", ",", "self", ".", "_center", ",", "self", ".", "_radius", ")", "\n", "self", ".", "_qdown", "=", "self", ".", "_qpre", "=", "self", ".", "_qnow", "\n", "if", "self", ".", "_constrain", "and", "self", ".", "_axes", "is", "not", "None", ":", "\n", "            ", "self", ".", "_axis", "=", "arcball_nearest_axis", "(", "self", ".", "_vdown", ",", "self", ".", "_axes", ")", "\n", "self", ".", "_vdown", "=", "arcball_constrain_to_axis", "(", "self", ".", "_vdown", ",", "self", ".", "_axis", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "_axis", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.Arcball.drag": [[1623, 1635], ["transformations.arcball_map_to_sphere", "numpy.cross", "transformations.arcball_constrain_to_axis", "numpy.dot", "transformations.quaternion_multiply", "numpy.dot"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.arcball_map_to_sphere", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.arcball_constrain_to_axis", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.quaternion_multiply"], ["", "", "def", "drag", "(", "self", ",", "point", ")", ":", "\n", "        ", "\"\"\"Update current cursor window coordinates.\"\"\"", "\n", "vnow", "=", "arcball_map_to_sphere", "(", "point", ",", "self", ".", "_center", ",", "self", ".", "_radius", ")", "\n", "if", "self", ".", "_axis", "is", "not", "None", ":", "\n", "            ", "vnow", "=", "arcball_constrain_to_axis", "(", "vnow", ",", "self", ".", "_axis", ")", "\n", "", "self", ".", "_qpre", "=", "self", ".", "_qnow", "\n", "t", "=", "numpy", ".", "cross", "(", "self", ".", "_vdown", ",", "vnow", ")", "\n", "if", "numpy", ".", "dot", "(", "t", ",", "t", ")", "<", "_EPS", ":", "\n", "            ", "self", ".", "_qnow", "=", "self", ".", "_qdown", "\n", "", "else", ":", "\n", "            ", "q", "=", "[", "numpy", ".", "dot", "(", "self", ".", "_vdown", ",", "vnow", ")", ",", "t", "[", "0", "]", ",", "t", "[", "1", "]", ",", "t", "[", "2", "]", "]", "\n", "self", ".", "_qnow", "=", "quaternion_multiply", "(", "q", ",", "self", ".", "_qdown", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.Arcball.next": [[1636, 1640], ["transformations.quaternion_slerp"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.quaternion_slerp"], ["", "", "def", "next", "(", "self", ",", "acceleration", "=", "0.0", ")", ":", "\n", "        ", "\"\"\"Continue rotation in direction of last drag.\"\"\"", "\n", "q", "=", "quaternion_slerp", "(", "self", ".", "_qpre", ",", "self", ".", "_qnow", ",", "2.0", "+", "acceleration", ",", "False", ")", "\n", "self", ".", "_qpre", ",", "self", ".", "_qnow", "=", "self", ".", "_qnow", ",", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.Arcball.matrix": [[1641, 1644], ["transformations.quaternion_matrix"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.quaternion_matrix"], ["", "def", "matrix", "(", "self", ")", ":", "\n", "        ", "\"\"\"Return homogeneous rotation matrix.\"\"\"", "\n", "return", "quaternion_matrix", "(", "self", ".", "_qnow", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.identity_matrix": [[227, 240], ["numpy.identity"], "function", ["None"], ["def", "identity_matrix", "(", ")", ":", "\n", "    ", "\"\"\"Return 4x4 identity/unit matrix.\n\n    >>> I = identity_matrix()\n    >>> numpy.allclose(I, numpy.dot(I, I))\n    True\n    >>> numpy.sum(I), numpy.trace(I)\n    (4.0, 4.0)\n    >>> numpy.allclose(I, numpy.identity(4))\n    True\n\n    \"\"\"", "\n", "return", "numpy", ".", "identity", "(", "4", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.translation_matrix": [[242, 253], ["numpy.identity"], "function", ["None"], ["", "def", "translation_matrix", "(", "direction", ")", ":", "\n", "    ", "\"\"\"Return matrix to translate by direction vector.\n\n    >>> v = numpy.random.random(3) - 0.5\n    >>> numpy.allclose(v, translation_matrix(v)[:3, 3])\n    True\n\n    \"\"\"", "\n", "M", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "M", "[", ":", "3", ",", "3", "]", "=", "direction", "[", ":", "3", "]", "\n", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.translation_from_matrix": [[255, 265], ["[].copy", "numpy.array"], "function", ["None"], ["", "def", "translation_from_matrix", "(", "matrix", ")", ":", "\n", "    ", "\"\"\"Return translation vector from translation matrix.\n\n    >>> v0 = numpy.random.random(3) - 0.5\n    >>> v1 = translation_from_matrix(translation_matrix(v0))\n    >>> numpy.allclose(v0, v1)\n    True\n\n    \"\"\"", "\n", "return", "numpy", ".", "array", "(", "matrix", ",", "copy", "=", "False", ")", "[", ":", "3", ",", "3", "]", ".", "copy", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.reflection_matrix": [[267, 291], ["transformations.unit_vector", "numpy.identity", "numpy.outer", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.unit_vector"], ["", "def", "reflection_matrix", "(", "point", ",", "normal", ")", ":", "\n", "    ", "\"\"\"Return matrix to mirror at plane defined by point and normal vector.\n\n    >>> v0 = numpy.random.random(4) - 0.5\n    >>> v0[3] = 1.\n    >>> v1 = numpy.random.random(3) - 0.5\n    >>> R = reflection_matrix(v0, v1)\n    >>> numpy.allclose(2, numpy.trace(R))\n    True\n    >>> numpy.allclose(v0, numpy.dot(R, v0))\n    True\n    >>> v2 = v0.copy()\n    >>> v2[:3] += v1\n    >>> v3 = v0.copy()\n    >>> v2[:3] -= v1\n    >>> numpy.allclose(v2, numpy.dot(R, v3))\n    True\n\n    \"\"\"", "\n", "normal", "=", "unit_vector", "(", "normal", "[", ":", "3", "]", ")", "\n", "M", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "M", "[", ":", "3", ",", ":", "3", "]", "-=", "2.0", "*", "numpy", ".", "outer", "(", "normal", ",", "normal", ")", "\n", "M", "[", ":", "3", ",", "3", "]", "=", "(", "2.0", "*", "numpy", ".", "dot", "(", "point", "[", ":", "3", "]", ",", "normal", ")", ")", "*", "normal", "\n", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.reflection_from_matrix": [[293, 320], ["numpy.array", "numpy.linalg.eig", "numpy.real().squeeze", "numpy.linalg.eig", "numpy.real().squeeze", "numpy.where", "len", "ValueError", "numpy.where", "len", "ValueError", "numpy.real", "numpy.real", "abs", "abs", "numpy.real", "numpy.real"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.abs", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.abs"], ["", "def", "reflection_from_matrix", "(", "matrix", ")", ":", "\n", "    ", "\"\"\"Return mirror plane point and normal vector from reflection matrix.\n\n    >>> v0 = numpy.random.random(3) - 0.5\n    >>> v1 = numpy.random.random(3) - 0.5\n    >>> M0 = reflection_matrix(v0, v1)\n    >>> point, normal = reflection_from_matrix(M0)\n    >>> M1 = reflection_matrix(point, normal)\n    >>> is_same_transform(M0, M1)\n    True\n\n    \"\"\"", "\n", "M", "=", "numpy", ".", "array", "(", "matrix", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "# normal: unit eigenvector corresponding to eigenvalue -1", "\n", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eig", "(", "M", "[", ":", "3", ",", ":", "3", "]", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", "+", "1.0", ")", "<", "1e-8", ")", "[", "0", "]", "\n", "if", "not", "len", "(", "i", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'no unit eigenvector corresponding to eigenvalue -1'", ")", "\n", "", "normal", "=", "numpy", ".", "real", "(", "V", "[", ":", ",", "i", "[", "0", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "# point: any unit eigenvector corresponding to eigenvalue 1", "\n", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eig", "(", "M", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", "-", "1.0", ")", "<", "1e-8", ")", "[", "0", "]", "\n", "if", "not", "len", "(", "i", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'no unit eigenvector corresponding to eigenvalue 1'", ")", "\n", "", "point", "=", "numpy", ".", "real", "(", "V", "[", ":", ",", "i", "[", "-", "1", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "point", "/=", "point", "[", "3", "]", "\n", "return", "point", ",", "normal", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.rotation_matrix": [[322, 364], ["math.sin", "math.cos", "transformations.unit_vector", "numpy.diag", "numpy.array", "numpy.identity", "numpy.outer", "numpy.array", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.unit_vector"], ["", "def", "rotation_matrix", "(", "angle", ",", "direction", ",", "point", "=", "None", ")", ":", "\n", "    ", "\"\"\"Return matrix to rotate about axis defined by point and direction.\n\n    >>> R = rotation_matrix(math.pi/2, [0, 0, 1], [1, 0, 0])\n    >>> numpy.allclose(numpy.dot(R, [0, 0, 0, 1]), [1, -1, 0, 1])\n    True\n    >>> angle = (random.random() - 0.5) * (2*math.pi)\n    >>> direc = numpy.random.random(3) - 0.5\n    >>> point = numpy.random.random(3) - 0.5\n    >>> R0 = rotation_matrix(angle, direc, point)\n    >>> R1 = rotation_matrix(angle-2*math.pi, direc, point)\n    >>> is_same_transform(R0, R1)\n    True\n    >>> R0 = rotation_matrix(angle, direc, point)\n    >>> R1 = rotation_matrix(-angle, -direc, point)\n    >>> is_same_transform(R0, R1)\n    True\n    >>> I = numpy.identity(4, numpy.float64)\n    >>> numpy.allclose(I, rotation_matrix(math.pi*2, direc))\n    True\n    >>> numpy.allclose(2, numpy.trace(rotation_matrix(math.pi/2,\n    ...                                               direc, point)))\n    True\n\n    \"\"\"", "\n", "sina", "=", "math", ".", "sin", "(", "angle", ")", "\n", "cosa", "=", "math", ".", "cos", "(", "angle", ")", "\n", "direction", "=", "unit_vector", "(", "direction", "[", ":", "3", "]", ")", "\n", "# rotation matrix around unit vector", "\n", "R", "=", "numpy", ".", "diag", "(", "[", "cosa", ",", "cosa", ",", "cosa", "]", ")", "\n", "R", "+=", "numpy", ".", "outer", "(", "direction", ",", "direction", ")", "*", "(", "1.0", "-", "cosa", ")", "\n", "direction", "*=", "sina", "\n", "R", "+=", "numpy", ".", "array", "(", "[", "[", "0.0", ",", "-", "direction", "[", "2", "]", ",", "direction", "[", "1", "]", "]", ",", "\n", "[", "direction", "[", "2", "]", ",", "0.0", ",", "-", "direction", "[", "0", "]", "]", ",", "\n", "[", "-", "direction", "[", "1", "]", ",", "direction", "[", "0", "]", ",", "0.0", "]", "]", ")", "\n", "M", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "M", "[", ":", "3", ",", ":", "3", "]", "=", "R", "\n", "if", "point", "is", "not", "None", ":", "\n", "# rotation not around origin", "\n", "        ", "point", "=", "numpy", ".", "array", "(", "point", "[", ":", "3", "]", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "M", "[", ":", "3", ",", "3", "]", "=", "point", "-", "numpy", ".", "dot", "(", "R", ",", "point", ")", "\n", "", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.rotation_from_matrix": [[366, 404], ["numpy.array", "numpy.linalg.eig", "numpy.real().squeeze", "numpy.linalg.eig", "numpy.real().squeeze", "math.atan2", "numpy.where", "len", "ValueError", "numpy.where", "len", "ValueError", "abs", "numpy.real", "numpy.real", "numpy.trace", "abs", "abs", "abs", "numpy.real", "numpy.real"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.abs", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.abs", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.abs", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.abs"], ["", "def", "rotation_from_matrix", "(", "matrix", ")", ":", "\n", "    ", "\"\"\"Return rotation angle and axis from rotation matrix.\n\n    >>> angle = (random.random() - 0.5) * (2*math.pi)\n    >>> direc = numpy.random.random(3) - 0.5\n    >>> point = numpy.random.random(3) - 0.5\n    >>> R0 = rotation_matrix(angle, direc, point)\n    >>> angle, direc, point = rotation_from_matrix(R0)\n    >>> R1 = rotation_matrix(angle, direc, point)\n    >>> is_same_transform(R0, R1)\n    True\n\n    \"\"\"", "\n", "R", "=", "numpy", ".", "array", "(", "matrix", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "R33", "=", "R", "[", ":", "3", ",", ":", "3", "]", "\n", "# direction: unit eigenvector of R33 corresponding to eigenvalue of 1", "\n", "w", ",", "W", "=", "numpy", ".", "linalg", ".", "eig", "(", "R33", ".", "T", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", "-", "1.0", ")", "<", "1e-8", ")", "[", "0", "]", "\n", "if", "not", "len", "(", "i", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'no unit eigenvector corresponding to eigenvalue 1'", ")", "\n", "", "direction", "=", "numpy", ".", "real", "(", "W", "[", ":", ",", "i", "[", "-", "1", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "# point: unit eigenvector of R33 corresponding to eigenvalue of 1", "\n", "w", ",", "Q", "=", "numpy", ".", "linalg", ".", "eig", "(", "R", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", "-", "1.0", ")", "<", "1e-8", ")", "[", "0", "]", "\n", "if", "not", "len", "(", "i", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'no unit eigenvector corresponding to eigenvalue 1'", ")", "\n", "", "point", "=", "numpy", ".", "real", "(", "Q", "[", ":", ",", "i", "[", "-", "1", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "point", "/=", "point", "[", "3", "]", "\n", "# rotation angle depending on direction", "\n", "cosa", "=", "(", "numpy", ".", "trace", "(", "R33", ")", "-", "1.0", ")", "/", "2.0", "\n", "if", "abs", "(", "direction", "[", "2", "]", ")", ">", "1e-8", ":", "\n", "        ", "sina", "=", "(", "R", "[", "1", ",", "0", "]", "+", "(", "cosa", "-", "1.0", ")", "*", "direction", "[", "0", "]", "*", "direction", "[", "1", "]", ")", "/", "direction", "[", "2", "]", "\n", "", "elif", "abs", "(", "direction", "[", "1", "]", ")", ">", "1e-8", ":", "\n", "        ", "sina", "=", "(", "R", "[", "0", ",", "2", "]", "+", "(", "cosa", "-", "1.0", ")", "*", "direction", "[", "0", "]", "*", "direction", "[", "2", "]", ")", "/", "direction", "[", "1", "]", "\n", "", "else", ":", "\n", "        ", "sina", "=", "(", "R", "[", "2", ",", "1", "]", "+", "(", "cosa", "-", "1.0", ")", "*", "direction", "[", "1", "]", "*", "direction", "[", "2", "]", ")", "/", "direction", "[", "0", "]", "\n", "", "angle", "=", "math", ".", "atan2", "(", "sina", ",", "cosa", ")", "\n", "return", "angle", ",", "direction", ",", "point", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.scale_matrix": [[406, 438], ["numpy.diag", "transformations.unit_vector", "numpy.identity", "numpy.outer", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.unit_vector"], ["", "def", "scale_matrix", "(", "factor", ",", "origin", "=", "None", ",", "direction", "=", "None", ")", ":", "\n", "    ", "\"\"\"Return matrix to scale by factor around origin in direction.\n\n    Use factor -1 for point symmetry.\n\n    >>> v = (numpy.random.rand(4, 5) - 0.5) * 20\n    >>> v[3] = 1\n    >>> S = scale_matrix(-1.234)\n    >>> numpy.allclose(numpy.dot(S, v)[:3], -1.234*v[:3])\n    True\n    >>> factor = random.random() * 10 - 5\n    >>> origin = numpy.random.random(3) - 0.5\n    >>> direct = numpy.random.random(3) - 0.5\n    >>> S = scale_matrix(factor, origin)\n    >>> S = scale_matrix(factor, origin, direct)\n\n    \"\"\"", "\n", "if", "direction", "is", "None", ":", "\n", "# uniform scaling", "\n", "        ", "M", "=", "numpy", ".", "diag", "(", "[", "factor", ",", "factor", ",", "factor", ",", "1.0", "]", ")", "\n", "if", "origin", "is", "not", "None", ":", "\n", "            ", "M", "[", ":", "3", ",", "3", "]", "=", "origin", "[", ":", "3", "]", "\n", "M", "[", ":", "3", ",", "3", "]", "*=", "1.0", "-", "factor", "\n", "", "", "else", ":", "\n", "# nonuniform scaling", "\n", "        ", "direction", "=", "unit_vector", "(", "direction", "[", ":", "3", "]", ")", "\n", "factor", "=", "1.0", "-", "factor", "\n", "M", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "M", "[", ":", "3", ",", ":", "3", "]", "-=", "factor", "*", "numpy", ".", "outer", "(", "direction", ",", "direction", ")", "\n", "if", "origin", "is", "not", "None", ":", "\n", "            ", "M", "[", ":", "3", ",", "3", "]", "=", "(", "factor", "*", "numpy", ".", "dot", "(", "origin", "[", ":", "3", "]", ",", "direction", ")", ")", "*", "direction", "\n", "", "", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.scale_from_matrix": [[440, 479], ["numpy.array", "numpy.linalg.eig", "numpy.real().squeeze", "numpy.trace", "numpy.linalg.eig", "numpy.real().squeeze", "transformations.vector_norm", "numpy.where", "len", "ValueError", "numpy.real", "numpy.where", "numpy.real", "abs", "abs", "numpy.real", "numpy.real"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.vector_norm", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.abs", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.abs"], ["", "def", "scale_from_matrix", "(", "matrix", ")", ":", "\n", "    ", "\"\"\"Return scaling factor, origin and direction from scaling matrix.\n\n    >>> factor = random.random() * 10 - 5\n    >>> origin = numpy.random.random(3) - 0.5\n    >>> direct = numpy.random.random(3) - 0.5\n    >>> S0 = scale_matrix(factor, origin)\n    >>> factor, origin, direction = scale_from_matrix(S0)\n    >>> S1 = scale_matrix(factor, origin, direction)\n    >>> is_same_transform(S0, S1)\n    True\n    >>> S0 = scale_matrix(factor, origin, direct)\n    >>> factor, origin, direction = scale_from_matrix(S0)\n    >>> S1 = scale_matrix(factor, origin, direction)\n    >>> is_same_transform(S0, S1)\n    True\n\n    \"\"\"", "\n", "M", "=", "numpy", ".", "array", "(", "matrix", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "M33", "=", "M", "[", ":", "3", ",", ":", "3", "]", "\n", "factor", "=", "numpy", ".", "trace", "(", "M33", ")", "-", "2.0", "\n", "try", ":", "\n", "# direction: unit eigenvector corresponding to eigenvalue factor", "\n", "        ", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eig", "(", "M33", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", "-", "factor", ")", "<", "1e-8", ")", "[", "0", "]", "[", "0", "]", "\n", "direction", "=", "numpy", ".", "real", "(", "V", "[", ":", ",", "i", "]", ")", ".", "squeeze", "(", ")", "\n", "direction", "/=", "vector_norm", "(", "direction", ")", "\n", "", "except", "IndexError", ":", "\n", "# uniform scaling", "\n", "        ", "factor", "=", "(", "factor", "+", "2.0", ")", "/", "3.0", "\n", "direction", "=", "None", "\n", "# origin: any eigenvector corresponding to eigenvalue 1", "\n", "", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eig", "(", "M", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", "-", "1.0", ")", "<", "1e-8", ")", "[", "0", "]", "\n", "if", "not", "len", "(", "i", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'no eigenvector corresponding to eigenvalue 1'", ")", "\n", "", "origin", "=", "numpy", ".", "real", "(", "V", "[", ":", ",", "i", "[", "-", "1", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "origin", "/=", "origin", "[", "3", "]", "\n", "return", "factor", ",", "origin", ",", "direction", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.projection_matrix": [[481, 541], ["numpy.identity", "numpy.array", "transformations.unit_vector", "numpy.array", "numpy.dot", "numpy.outer", "numpy.dot", "numpy.outer", "numpy.array", "numpy.dot", "numpy.outer", "numpy.dot", "numpy.dot", "numpy.outer", "numpy.dot", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.unit_vector"], ["", "def", "projection_matrix", "(", "point", ",", "normal", ",", "direction", "=", "None", ",", "\n", "perspective", "=", "None", ",", "pseudo", "=", "False", ")", ":", "\n", "    ", "\"\"\"Return matrix to project onto plane defined by point and normal.\n\n    Using either perspective point, projection direction, or none of both.\n\n    If pseudo is True, perspective projections will preserve relative depth\n    such that Perspective = dot(Orthogonal, PseudoPerspective).\n\n    >>> P = projection_matrix([0, 0, 0], [1, 0, 0])\n    >>> numpy.allclose(P[1:, 1:], numpy.identity(4)[1:, 1:])\n    True\n    >>> point = numpy.random.random(3) - 0.5\n    >>> normal = numpy.random.random(3) - 0.5\n    >>> direct = numpy.random.random(3) - 0.5\n    >>> persp = numpy.random.random(3) - 0.5\n    >>> P0 = projection_matrix(point, normal)\n    >>> P1 = projection_matrix(point, normal, direction=direct)\n    >>> P2 = projection_matrix(point, normal, perspective=persp)\n    >>> P3 = projection_matrix(point, normal, perspective=persp, pseudo=True)\n    >>> is_same_transform(P2, numpy.dot(P0, P3))\n    True\n    >>> P = projection_matrix([3, 0, 0], [1, 1, 0], [1, 0, 0])\n    >>> v0 = (numpy.random.rand(4, 5) - 0.5) * 20\n    >>> v0[3] = 1\n    >>> v1 = numpy.dot(P, v0)\n    >>> numpy.allclose(v1[1], v0[1])\n    True\n    >>> numpy.allclose(v1[0], 3-v1[1])\n    True\n\n    \"\"\"", "\n", "M", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "point", "=", "numpy", ".", "array", "(", "point", "[", ":", "3", "]", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "normal", "=", "unit_vector", "(", "normal", "[", ":", "3", "]", ")", "\n", "if", "perspective", "is", "not", "None", ":", "\n", "# perspective projection", "\n", "        ", "perspective", "=", "numpy", ".", "array", "(", "perspective", "[", ":", "3", "]", ",", "dtype", "=", "numpy", ".", "float64", ",", "\n", "copy", "=", "False", ")", "\n", "M", "[", "0", ",", "0", "]", "=", "M", "[", "1", ",", "1", "]", "=", "M", "[", "2", ",", "2", "]", "=", "numpy", ".", "dot", "(", "perspective", "-", "point", ",", "normal", ")", "\n", "M", "[", ":", "3", ",", ":", "3", "]", "-=", "numpy", ".", "outer", "(", "perspective", ",", "normal", ")", "\n", "if", "pseudo", ":", "\n", "# preserve relative depth", "\n", "            ", "M", "[", ":", "3", ",", ":", "3", "]", "-=", "numpy", ".", "outer", "(", "normal", ",", "normal", ")", "\n", "M", "[", ":", "3", ",", "3", "]", "=", "numpy", ".", "dot", "(", "point", ",", "normal", ")", "*", "(", "perspective", "+", "normal", ")", "\n", "", "else", ":", "\n", "            ", "M", "[", ":", "3", ",", "3", "]", "=", "numpy", ".", "dot", "(", "point", ",", "normal", ")", "*", "perspective", "\n", "", "M", "[", "3", ",", ":", "3", "]", "=", "-", "normal", "\n", "M", "[", "3", ",", "3", "]", "=", "numpy", ".", "dot", "(", "perspective", ",", "normal", ")", "\n", "", "elif", "direction", "is", "not", "None", ":", "\n", "# parallel projection", "\n", "        ", "direction", "=", "numpy", ".", "array", "(", "direction", "[", ":", "3", "]", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "scale", "=", "numpy", ".", "dot", "(", "direction", ",", "normal", ")", "\n", "M", "[", ":", "3", ",", ":", "3", "]", "-=", "numpy", ".", "outer", "(", "direction", ",", "normal", ")", "/", "scale", "\n", "M", "[", ":", "3", ",", "3", "]", "=", "direction", "*", "(", "numpy", ".", "dot", "(", "point", ",", "normal", ")", "/", "scale", ")", "\n", "", "else", ":", "\n", "# orthogonal projection", "\n", "        ", "M", "[", ":", "3", ",", ":", "3", "]", "-=", "numpy", ".", "outer", "(", "normal", ",", "normal", ")", "\n", "M", "[", ":", "3", ",", "3", "]", "=", "numpy", ".", "dot", "(", "point", ",", "normal", ")", "*", "normal", "\n", "", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.projection_from_matrix": [[543, 614], ["numpy.array", "numpy.linalg.eig", "numpy.where", "len", "numpy.real().squeeze", "numpy.linalg.eig", "numpy.real().squeeze", "transformations.vector_norm", "numpy.linalg.eig", "len", "numpy.real().squeeze", "numpy.where", "len", "ValueError", "numpy.where", "numpy.real().squeeze", "transformations.vector_norm", "numpy.where", "len", "ValueError", "numpy.dot", "abs", "numpy.real", "numpy.real", "numpy.real", "abs", "abs", "numpy.real", "abs", "numpy.real", "numpy.real", "numpy.real", "numpy.real"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.vector_norm", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.vector_norm", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.abs", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.abs", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.abs", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.abs"], ["", "def", "projection_from_matrix", "(", "matrix", ",", "pseudo", "=", "False", ")", ":", "\n", "    ", "\"\"\"Return projection plane and perspective point from projection matrix.\n\n    Return values are same as arguments for projection_matrix function:\n    point, normal, direction, perspective, and pseudo.\n\n    >>> point = numpy.random.random(3) - 0.5\n    >>> normal = numpy.random.random(3) - 0.5\n    >>> direct = numpy.random.random(3) - 0.5\n    >>> persp = numpy.random.random(3) - 0.5\n    >>> P0 = projection_matrix(point, normal)\n    >>> result = projection_from_matrix(P0)\n    >>> P1 = projection_matrix(*result)\n    >>> is_same_transform(P0, P1)\n    True\n    >>> P0 = projection_matrix(point, normal, direct)\n    >>> result = projection_from_matrix(P0)\n    >>> P1 = projection_matrix(*result)\n    >>> is_same_transform(P0, P1)\n    True\n    >>> P0 = projection_matrix(point, normal, perspective=persp, pseudo=False)\n    >>> result = projection_from_matrix(P0, pseudo=False)\n    >>> P1 = projection_matrix(*result)\n    >>> is_same_transform(P0, P1)\n    True\n    >>> P0 = projection_matrix(point, normal, perspective=persp, pseudo=True)\n    >>> result = projection_from_matrix(P0, pseudo=True)\n    >>> P1 = projection_matrix(*result)\n    >>> is_same_transform(P0, P1)\n    True\n\n    \"\"\"", "\n", "M", "=", "numpy", ".", "array", "(", "matrix", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "M33", "=", "M", "[", ":", "3", ",", ":", "3", "]", "\n", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eig", "(", "M", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", "-", "1.0", ")", "<", "1e-8", ")", "[", "0", "]", "\n", "if", "not", "pseudo", "and", "len", "(", "i", ")", ":", "\n", "# point: any eigenvector corresponding to eigenvalue 1", "\n", "        ", "point", "=", "numpy", ".", "real", "(", "V", "[", ":", ",", "i", "[", "-", "1", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "point", "/=", "point", "[", "3", "]", "\n", "# direction: unit eigenvector corresponding to eigenvalue 0", "\n", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eig", "(", "M33", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", ")", "<", "1e-8", ")", "[", "0", "]", "\n", "if", "not", "len", "(", "i", ")", ":", "\n", "            ", "raise", "ValueError", "(", "'no eigenvector corresponding to eigenvalue 0'", ")", "\n", "", "direction", "=", "numpy", ".", "real", "(", "V", "[", ":", ",", "i", "[", "0", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "direction", "/=", "vector_norm", "(", "direction", ")", "\n", "# normal: unit eigenvector of M33.T corresponding to eigenvalue 0", "\n", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eig", "(", "M33", ".", "T", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", ")", "<", "1e-8", ")", "[", "0", "]", "\n", "if", "len", "(", "i", ")", ":", "\n", "# parallel projection", "\n", "            ", "normal", "=", "numpy", ".", "real", "(", "V", "[", ":", ",", "i", "[", "0", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "normal", "/=", "vector_norm", "(", "normal", ")", "\n", "return", "point", ",", "normal", ",", "direction", ",", "None", ",", "False", "\n", "", "else", ":", "\n", "# orthogonal projection, where normal equals direction vector", "\n", "            ", "return", "point", ",", "direction", ",", "None", ",", "None", ",", "False", "\n", "", "", "else", ":", "\n", "# perspective projection", "\n", "        ", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", ")", ">", "1e-8", ")", "[", "0", "]", "\n", "if", "not", "len", "(", "i", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\n", "'no eigenvector not corresponding to eigenvalue 0'", ")", "\n", "", "point", "=", "numpy", ".", "real", "(", "V", "[", ":", ",", "i", "[", "-", "1", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "point", "/=", "point", "[", "3", "]", "\n", "normal", "=", "-", "M", "[", "3", ",", ":", "3", "]", "\n", "perspective", "=", "M", "[", ":", "3", ",", "3", "]", "/", "numpy", ".", "dot", "(", "point", "[", ":", "3", "]", ",", "normal", ")", "\n", "if", "pseudo", ":", "\n", "            ", "perspective", "-=", "normal", "\n", "", "return", "point", ",", "normal", ",", "None", ",", "perspective", ",", "pseudo", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.clip_matrix": [[616, 666], ["numpy.array", "ValueError", "ValueError"], "function", ["None"], ["", "", "def", "clip_matrix", "(", "left", ",", "right", ",", "bottom", ",", "top", ",", "near", ",", "far", ",", "perspective", "=", "False", ")", ":", "\n", "    ", "\"\"\"Return matrix to obtain normalized device coordinates from frustum.\n\n    The frustum bounds are axis-aligned along x (left, right),\n    y (bottom, top) and z (near, far).\n\n    Normalized device coordinates are in range [-1, 1] if coordinates are\n    inside the frustum.\n\n    If perspective is True the frustum is a truncated pyramid with the\n    perspective point at origin and direction along z axis, otherwise an\n    orthographic canonical view volume (a box).\n\n    Homogeneous coordinates transformed by the perspective clip matrix\n    need to be dehomogenized (divided by w coordinate).\n\n    >>> frustum = numpy.random.rand(6)\n    >>> frustum[1] += frustum[0]\n    >>> frustum[3] += frustum[2]\n    >>> frustum[5] += frustum[4]\n    >>> M = clip_matrix(perspective=False, *frustum)\n    >>> numpy.dot(M, [frustum[0], frustum[2], frustum[4], 1])\n    array([-1., -1., -1.,  1.])\n    >>> numpy.dot(M, [frustum[1], frustum[3], frustum[5], 1])\n    array([ 1.,  1.,  1.,  1.])\n    >>> M = clip_matrix(perspective=True, *frustum)\n    >>> v = numpy.dot(M, [frustum[0], frustum[2], frustum[4], 1])\n    >>> v / v[3]\n    array([-1., -1., -1.,  1.])\n    >>> v = numpy.dot(M, [frustum[1], frustum[3], frustum[4], 1])\n    >>> v / v[3]\n    array([ 1.,  1., -1.,  1.])\n\n    \"\"\"", "\n", "if", "left", ">=", "right", "or", "bottom", ">=", "top", "or", "near", ">=", "far", ":", "\n", "        ", "raise", "ValueError", "(", "'invalid frustum'", ")", "\n", "", "if", "perspective", ":", "\n", "        ", "if", "near", "<=", "_EPS", ":", "\n", "            ", "raise", "ValueError", "(", "'invalid frustum: near <= 0'", ")", "\n", "", "t", "=", "2.0", "*", "near", "\n", "M", "=", "[", "[", "t", "/", "(", "left", "-", "right", ")", ",", "0.0", ",", "(", "right", "+", "left", ")", "/", "(", "right", "-", "left", ")", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "t", "/", "(", "bottom", "-", "top", ")", ",", "(", "top", "+", "bottom", ")", "/", "(", "top", "-", "bottom", ")", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "(", "far", "+", "near", ")", "/", "(", "near", "-", "far", ")", ",", "t", "*", "far", "/", "(", "far", "-", "near", ")", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "-", "1.0", ",", "0.0", "]", "]", "\n", "", "else", ":", "\n", "        ", "M", "=", "[", "[", "2.0", "/", "(", "right", "-", "left", ")", ",", "0.0", ",", "0.0", ",", "(", "right", "+", "left", ")", "/", "(", "left", "-", "right", ")", "]", ",", "\n", "[", "0.0", ",", "2.0", "/", "(", "top", "-", "bottom", ")", ",", "0.0", ",", "(", "top", "+", "bottom", ")", "/", "(", "bottom", "-", "top", ")", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "2.0", "/", "(", "far", "-", "near", ")", ",", "(", "far", "+", "near", ")", "/", "(", "near", "-", "far", ")", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", "]", "\n", "", "return", "numpy", ".", "array", "(", "M", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.shear_matrix": [[668, 697], ["transformations.unit_vector", "transformations.unit_vector", "math.tan", "numpy.identity", "abs", "ValueError", "numpy.outer", "numpy.dot", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.unit_vector", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.unit_vector", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.abs"], ["", "def", "shear_matrix", "(", "angle", ",", "direction", ",", "point", ",", "normal", ")", ":", "\n", "    ", "\"\"\"Return matrix to shear by angle along direction vector on shear plane.\n\n    The shear plane is defined by a point and normal vector. The direction\n    vector must be orthogonal to the plane's normal vector.\n\n    A point P is transformed by the shear matrix into P\" such that\n    the vector P-P\" is parallel to the direction vector and its extent is\n    given by the angle of P-P'-P\", where P' is the orthogonal projection\n    of P onto the shear plane.\n\n    >>> angle = (random.random() - 0.5) * 4*math.pi\n    >>> direct = numpy.random.random(3) - 0.5\n    >>> point = numpy.random.random(3) - 0.5\n    >>> normal = numpy.cross(direct, numpy.random.random(3))\n    >>> S = shear_matrix(angle, direct, point, normal)\n    >>> numpy.allclose(1, numpy.linalg.det(S))\n    True\n\n    \"\"\"", "\n", "normal", "=", "unit_vector", "(", "normal", "[", ":", "3", "]", ")", "\n", "direction", "=", "unit_vector", "(", "direction", "[", ":", "3", "]", ")", "\n", "if", "abs", "(", "numpy", ".", "dot", "(", "normal", ",", "direction", ")", ")", ">", "1e-6", ":", "\n", "        ", "raise", "ValueError", "(", "'direction and normal vectors are not orthogonal'", ")", "\n", "", "angle", "=", "math", ".", "tan", "(", "angle", ")", "\n", "M", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "M", "[", ":", "3", ",", ":", "3", "]", "+=", "angle", "*", "numpy", ".", "outer", "(", "direction", ",", "normal", ")", "\n", "M", "[", ":", "3", ",", "3", "]", "=", "-", "angle", "*", "numpy", ".", "dot", "(", "point", "[", ":", "3", "]", ",", "normal", ")", "*", "direction", "\n", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.shear_from_matrix": [[699, 742], ["numpy.array", "numpy.linalg.eig", "numpy.dot", "transformations.vector_norm", "math.atan", "numpy.linalg.eig", "numpy.real().squeeze", "numpy.where", "len", "ValueError", "numpy.real().squeeze", "numpy.cross", "transformations.vector_norm", "numpy.where", "len", "ValueError", "numpy.identity", "numpy.real", "abs", "numpy.real", "abs", "numpy.real", "numpy.real"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.vector_norm", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.vector_norm", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.abs", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.abs"], ["", "def", "shear_from_matrix", "(", "matrix", ")", ":", "\n", "    ", "\"\"\"Return shear angle, direction and plane from shear matrix.\n\n    >>> angle = (random.random() - 0.5) * 4*math.pi\n    >>> direct = numpy.random.random(3) - 0.5\n    >>> point = numpy.random.random(3) - 0.5\n    >>> normal = numpy.cross(direct, numpy.random.random(3))\n    >>> S0 = shear_matrix(angle, direct, point, normal)\n    >>> angle, direct, point, normal = shear_from_matrix(S0)\n    >>> S1 = shear_matrix(angle, direct, point, normal)\n    >>> is_same_transform(S0, S1)\n    True\n\n    \"\"\"", "\n", "M", "=", "numpy", ".", "array", "(", "matrix", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "M33", "=", "M", "[", ":", "3", ",", ":", "3", "]", "\n", "# normal: cross independent eigenvectors corresponding to the eigenvalue 1", "\n", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eig", "(", "M33", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", "-", "1.0", ")", "<", "1e-4", ")", "[", "0", "]", "\n", "if", "len", "(", "i", ")", "<", "2", ":", "\n", "        ", "raise", "ValueError", "(", "'no two linear independent eigenvectors found %s'", "%", "w", ")", "\n", "", "V", "=", "numpy", ".", "real", "(", "V", "[", ":", ",", "i", "]", ")", ".", "squeeze", "(", ")", ".", "T", "\n", "lenorm", "=", "-", "1.0", "\n", "for", "i0", ",", "i1", "in", "(", "(", "0", ",", "1", ")", ",", "(", "0", ",", "2", ")", ",", "(", "1", ",", "2", ")", ")", ":", "\n", "        ", "n", "=", "numpy", ".", "cross", "(", "V", "[", "i0", "]", ",", "V", "[", "i1", "]", ")", "\n", "w", "=", "vector_norm", "(", "n", ")", "\n", "if", "w", ">", "lenorm", ":", "\n", "            ", "lenorm", "=", "w", "\n", "normal", "=", "n", "\n", "", "", "normal", "/=", "lenorm", "\n", "# direction and angle", "\n", "direction", "=", "numpy", ".", "dot", "(", "M33", "-", "numpy", ".", "identity", "(", "3", ")", ",", "normal", ")", "\n", "angle", "=", "vector_norm", "(", "direction", ")", "\n", "direction", "/=", "angle", "\n", "angle", "=", "math", ".", "atan", "(", "angle", ")", "\n", "# point: eigenvector corresponding to eigenvalue 1", "\n", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eig", "(", "M", ")", "\n", "i", "=", "numpy", ".", "where", "(", "abs", "(", "numpy", ".", "real", "(", "w", ")", "-", "1.0", ")", "<", "1e-8", ")", "[", "0", "]", "\n", "if", "not", "len", "(", "i", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'no eigenvector corresponding to eigenvalue 1'", ")", "\n", "", "point", "=", "numpy", ".", "real", "(", "V", "[", ":", ",", "i", "[", "-", "1", "]", "]", ")", ".", "squeeze", "(", ")", "\n", "point", "/=", "point", "[", "3", "]", "\n", "return", "angle", ",", "direction", ",", "point", ",", "normal", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.decompose_matrix": [[744, 827], ["M.copy", "numpy.zeros", "any", "M[].copy", "M[].copy", "transformations.vector_norm", "numpy.dot", "transformations.vector_norm", "numpy.dot", "numpy.dot", "transformations.vector_norm", "math.asin", "math.cos", "numpy.array", "abs", "ValueError", "numpy.linalg.det", "ValueError", "numpy.dot", "numpy.array", "numpy.dot", "numpy.negative", "numpy.negative", "math.atan2", "math.atan2", "math.atan2", "abs", "numpy.linalg.inv", "numpy.cross"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.vector_norm", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.vector_norm", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.vector_norm", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.abs", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.abs"], ["", "def", "decompose_matrix", "(", "matrix", ")", ":", "\n", "    ", "\"\"\"Return sequence of transformations from transformation matrix.\n\n    matrix : array_like\n        Non-degenerative homogeneous transformation matrix\n\n    Return tuple of:\n        scale : vector of 3 scaling factors\n        shear : list of shear factors for x-y, x-z, y-z axes\n        angles : list of Euler angles about static x, y, z axes\n        translate : translation vector along x, y, z axes\n        perspective : perspective partition of matrix\n\n    Raise ValueError if matrix is of wrong type or degenerative.\n\n    >>> T0 = translation_matrix([1, 2, 3])\n    >>> scale, shear, angles, trans, persp = decompose_matrix(T0)\n    >>> T1 = translation_matrix(trans)\n    >>> numpy.allclose(T0, T1)\n    True\n    >>> S = scale_matrix(0.123)\n    >>> scale, shear, angles, trans, persp = decompose_matrix(S)\n    >>> scale[0]\n    0.123\n    >>> R0 = euler_matrix(1, 2, 3)\n    >>> scale, shear, angles, trans, persp = decompose_matrix(R0)\n    >>> R1 = euler_matrix(*angles)\n    >>> numpy.allclose(R0, R1)\n    True\n\n    \"\"\"", "\n", "M", "=", "numpy", ".", "array", "(", "matrix", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", ".", "T", "\n", "if", "abs", "(", "M", "[", "3", ",", "3", "]", ")", "<", "_EPS", ":", "\n", "        ", "raise", "ValueError", "(", "'M[3, 3] is zero'", ")", "\n", "", "M", "/=", "M", "[", "3", ",", "3", "]", "\n", "P", "=", "M", ".", "copy", "(", ")", "\n", "P", "[", ":", ",", "3", "]", "=", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "\n", "if", "not", "numpy", ".", "linalg", ".", "det", "(", "P", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'matrix is singular'", ")", "\n", "\n", "", "scale", "=", "numpy", ".", "zeros", "(", "(", "3", ",", ")", ")", "\n", "shear", "=", "[", "0.0", ",", "0.0", ",", "0.0", "]", "\n", "angles", "=", "[", "0.0", ",", "0.0", ",", "0.0", "]", "\n", "\n", "if", "any", "(", "abs", "(", "M", "[", ":", "3", ",", "3", "]", ")", ">", "_EPS", ")", ":", "\n", "        ", "perspective", "=", "numpy", ".", "dot", "(", "M", "[", ":", ",", "3", "]", ",", "numpy", ".", "linalg", ".", "inv", "(", "P", ".", "T", ")", ")", "\n", "M", "[", ":", ",", "3", "]", "=", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "\n", "", "else", ":", "\n", "        ", "perspective", "=", "numpy", ".", "array", "(", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", ")", "\n", "\n", "", "translate", "=", "M", "[", "3", ",", ":", "3", "]", ".", "copy", "(", ")", "\n", "M", "[", "3", ",", ":", "3", "]", "=", "0.0", "\n", "\n", "row", "=", "M", "[", ":", "3", ",", ":", "3", "]", ".", "copy", "(", ")", "\n", "scale", "[", "0", "]", "=", "vector_norm", "(", "row", "[", "0", "]", ")", "\n", "row", "[", "0", "]", "/=", "scale", "[", "0", "]", "\n", "shear", "[", "0", "]", "=", "numpy", ".", "dot", "(", "row", "[", "0", "]", ",", "row", "[", "1", "]", ")", "\n", "row", "[", "1", "]", "-=", "row", "[", "0", "]", "*", "shear", "[", "0", "]", "\n", "scale", "[", "1", "]", "=", "vector_norm", "(", "row", "[", "1", "]", ")", "\n", "row", "[", "1", "]", "/=", "scale", "[", "1", "]", "\n", "shear", "[", "0", "]", "/=", "scale", "[", "1", "]", "\n", "shear", "[", "1", "]", "=", "numpy", ".", "dot", "(", "row", "[", "0", "]", ",", "row", "[", "2", "]", ")", "\n", "row", "[", "2", "]", "-=", "row", "[", "0", "]", "*", "shear", "[", "1", "]", "\n", "shear", "[", "2", "]", "=", "numpy", ".", "dot", "(", "row", "[", "1", "]", ",", "row", "[", "2", "]", ")", "\n", "row", "[", "2", "]", "-=", "row", "[", "1", "]", "*", "shear", "[", "2", "]", "\n", "scale", "[", "2", "]", "=", "vector_norm", "(", "row", "[", "2", "]", ")", "\n", "row", "[", "2", "]", "/=", "scale", "[", "2", "]", "\n", "shear", "[", "1", ":", "]", "/=", "scale", "[", "2", "]", "\n", "\n", "if", "numpy", ".", "dot", "(", "row", "[", "0", "]", ",", "numpy", ".", "cross", "(", "row", "[", "1", "]", ",", "row", "[", "2", "]", ")", ")", "<", "0", ":", "\n", "        ", "numpy", ".", "negative", "(", "scale", ",", "scale", ")", "\n", "numpy", ".", "negative", "(", "row", ",", "row", ")", "\n", "\n", "", "angles", "[", "1", "]", "=", "math", ".", "asin", "(", "-", "row", "[", "0", ",", "2", "]", ")", "\n", "if", "math", ".", "cos", "(", "angles", "[", "1", "]", ")", ":", "\n", "        ", "angles", "[", "0", "]", "=", "math", ".", "atan2", "(", "row", "[", "1", ",", "2", "]", ",", "row", "[", "2", ",", "2", "]", ")", "\n", "angles", "[", "2", "]", "=", "math", ".", "atan2", "(", "row", "[", "0", ",", "1", "]", ",", "row", "[", "0", ",", "0", "]", ")", "\n", "", "else", ":", "\n", "# angles[0] = math.atan2(row[1, 0], row[1, 1])", "\n", "        ", "angles", "[", "0", "]", "=", "math", ".", "atan2", "(", "-", "row", "[", "2", ",", "1", "]", ",", "row", "[", "1", ",", "1", "]", ")", "\n", "angles", "[", "2", "]", "=", "0.0", "\n", "\n", "", "return", "scale", ",", "shear", ",", "angles", ",", "translate", ",", "perspective", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.compose_matrix": [[829, 880], ["numpy.identity", "numpy.identity", "numpy.dot", "numpy.identity", "numpy.dot", "transformations.euler_matrix", "numpy.dot", "numpy.identity", "numpy.dot", "numpy.identity", "numpy.dot"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.euler_matrix"], ["", "def", "compose_matrix", "(", "scale", "=", "None", ",", "shear", "=", "None", ",", "angles", "=", "None", ",", "translate", "=", "None", ",", "\n", "perspective", "=", "None", ")", ":", "\n", "    ", "\"\"\"Return transformation matrix from sequence of transformations.\n\n    This is the inverse of the decompose_matrix function.\n\n    Sequence of transformations:\n        scale : vector of 3 scaling factors\n        shear : list of shear factors for x-y, x-z, y-z axes\n        angles : list of Euler angles about static x, y, z axes\n        translate : translation vector along x, y, z axes\n        perspective : perspective partition of matrix\n\n    >>> scale = numpy.random.random(3) - 0.5\n    >>> shear = numpy.random.random(3) - 0.5\n    >>> angles = (numpy.random.random(3) - 0.5) * (2*math.pi)\n    >>> trans = numpy.random.random(3) - 0.5\n    >>> persp = numpy.random.random(4) - 0.5\n    >>> M0 = compose_matrix(scale, shear, angles, trans, persp)\n    >>> result = decompose_matrix(M0)\n    >>> M1 = compose_matrix(*result)\n    >>> is_same_transform(M0, M1)\n    True\n\n    \"\"\"", "\n", "M", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "if", "perspective", "is", "not", "None", ":", "\n", "        ", "P", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "P", "[", "3", ",", ":", "]", "=", "perspective", "[", ":", "4", "]", "\n", "M", "=", "numpy", ".", "dot", "(", "M", ",", "P", ")", "\n", "", "if", "translate", "is", "not", "None", ":", "\n", "        ", "T", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "T", "[", ":", "3", ",", "3", "]", "=", "translate", "[", ":", "3", "]", "\n", "M", "=", "numpy", ".", "dot", "(", "M", ",", "T", ")", "\n", "", "if", "angles", "is", "not", "None", ":", "\n", "        ", "R", "=", "euler_matrix", "(", "angles", "[", "0", "]", ",", "angles", "[", "1", "]", ",", "angles", "[", "2", "]", ",", "'sxyz'", ")", "\n", "M", "=", "numpy", ".", "dot", "(", "M", ",", "R", ")", "\n", "", "if", "shear", "is", "not", "None", ":", "\n", "        ", "Z", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "Z", "[", "1", ",", "2", "]", "=", "shear", "[", "2", "]", "\n", "Z", "[", "0", ",", "2", "]", "=", "shear", "[", "1", "]", "\n", "Z", "[", "0", ",", "1", "]", "=", "shear", "[", "0", "]", "\n", "M", "=", "numpy", ".", "dot", "(", "M", ",", "Z", ")", "\n", "", "if", "scale", "is", "not", "None", ":", "\n", "        ", "S", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "S", "[", "0", ",", "0", "]", "=", "scale", "[", "0", "]", "\n", "S", "[", "1", ",", "1", "]", "=", "scale", "[", "1", "]", "\n", "S", "[", "2", ",", "2", "]", "=", "scale", "[", "2", "]", "\n", "M", "=", "numpy", ".", "dot", "(", "M", ",", "S", ")", "\n", "", "M", "/=", "M", "[", "3", ",", "3", "]", "\n", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.orthogonalization_matrix": [[882, 907], ["numpy.radians", "numpy.sin", "numpy.cos", "numpy.array", "math.sqrt"], "function", ["None"], ["", "def", "orthogonalization_matrix", "(", "lengths", ",", "angles", ")", ":", "\n", "    ", "\"\"\"Return orthogonalization matrix for crystallographic cell coordinates.\n\n    Angles are expected in degrees.\n\n    The de-orthogonalization matrix is the inverse.\n\n    >>> O = orthogonalization_matrix([10, 10, 10], [90, 90, 90])\n    >>> numpy.allclose(O[:3, :3], numpy.identity(3, float) * 10)\n    True\n    >>> O = orthogonalization_matrix([9.8, 12.0, 15.5], [87.2, 80.7, 69.7])\n    >>> numpy.allclose(numpy.sum(O), 43.063229)\n    True\n\n    \"\"\"", "\n", "a", ",", "b", ",", "c", "=", "lengths", "\n", "angles", "=", "numpy", ".", "radians", "(", "angles", ")", "\n", "sina", ",", "sinb", ",", "_", "=", "numpy", ".", "sin", "(", "angles", ")", "\n", "cosa", ",", "cosb", ",", "cosg", "=", "numpy", ".", "cos", "(", "angles", ")", "\n", "co", "=", "(", "cosa", "*", "cosb", "-", "cosg", ")", "/", "(", "sina", "*", "sinb", ")", "\n", "return", "numpy", ".", "array", "(", "[", "\n", "[", "a", "*", "sinb", "*", "math", ".", "sqrt", "(", "1.0", "-", "co", "*", "co", ")", ",", "0.0", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "-", "a", "*", "sinb", "*", "co", ",", "b", "*", "sina", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "a", "*", "cosb", ",", "b", "*", "cosa", ",", "c", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.affine_matrix_from_points": [[909, 1016], ["numpy.array", "numpy.array", "numpy.identity", "t0.reshape", "numpy.identity", "t1.reshape", "numpy.dot", "ValueError", "numpy.mean", "numpy.mean", "numpy.concatenate", "numpy.linalg.svd", "numpy.dot", "numpy.concatenate", "numpy.vstack", "math.sqrt", "numpy.linalg.inv", "numpy.dot", "numpy.linalg.pinv", "numpy.linalg.svd", "numpy.dot", "numpy.identity", "numpy.sum", "numpy.sum", "numpy.sum", "numpy.linalg.eigh", "transformations.vector_norm", "transformations.quaternion_matrix", "numpy.zeros", "numpy.dot", "numpy.linalg.det", "numpy.outer", "numpy.sum", "numpy.sum", "numpy.roll", "numpy.roll", "numpy.argmax"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.vector_norm", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.quaternion_matrix"], ["", "def", "affine_matrix_from_points", "(", "v0", ",", "v1", ",", "shear", "=", "True", ",", "scale", "=", "True", ",", "usesvd", "=", "True", ")", ":", "\n", "    ", "\"\"\"Return affine transform matrix to register two point sets.\n\n    v0 and v1 are shape (ndims, \\*) arrays of at least ndims non-homogeneous\n    coordinates, where ndims is the dimensionality of the coordinate space.\n\n    If shear is False, a similarity transformation matrix is returned.\n    If also scale is False, a rigid/Euclidean transformation matrix\n    is returned.\n\n    By default the algorithm by Hartley and Zissermann [15] is used.\n    If usesvd is True, similarity and Euclidean transformation matrices\n    are calculated by minimizing the weighted sum of squared deviations\n    (RMSD) according to the algorithm by Kabsch [8].\n    Otherwise, and if ndims is 3, the quaternion based algorithm by Horn [9]\n    is used, which is slower when using this Python implementation.\n\n    The returned matrix performs rotation, translation and uniform scaling\n    (if specified).\n\n    >>> v0 = [[0, 1031, 1031, 0], [0, 0, 1600, 1600]]\n    >>> v1 = [[675, 826, 826, 677], [55, 52, 281, 277]]\n    >>> affine_matrix_from_points(v0, v1)\n    array([[   0.14549,    0.00062,  675.50008],\n           [   0.00048,    0.14094,   53.24971],\n           [   0.     ,    0.     ,    1.     ]])\n    >>> T = translation_matrix(numpy.random.random(3)-0.5)\n    >>> R = random_rotation_matrix(numpy.random.random(3))\n    >>> S = scale_matrix(random.random())\n    >>> M = concatenate_matrices(T, R, S)\n    >>> v0 = (numpy.random.rand(4, 100) - 0.5) * 20\n    >>> v0[3] = 1\n    >>> v1 = numpy.dot(M, v0)\n    >>> v0[:3] += numpy.random.normal(0, 1e-8, 300).reshape(3, -1)\n    >>> M = affine_matrix_from_points(v0[:3], v1[:3])\n    >>> numpy.allclose(v1, numpy.dot(M, v0))\n    True\n\n    More examples in superimposition_matrix()\n\n    \"\"\"", "\n", "v0", "=", "numpy", ".", "array", "(", "v0", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "v1", "=", "numpy", ".", "array", "(", "v1", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "\n", "ndims", "=", "v0", ".", "shape", "[", "0", "]", "\n", "if", "ndims", "<", "2", "or", "v0", ".", "shape", "[", "1", "]", "<", "ndims", "or", "v0", ".", "shape", "!=", "v1", ".", "shape", ":", "\n", "        ", "raise", "ValueError", "(", "'input arrays are of wrong shape or type'", ")", "\n", "\n", "# move centroids to origin", "\n", "", "t0", "=", "-", "numpy", ".", "mean", "(", "v0", ",", "axis", "=", "1", ")", "\n", "M0", "=", "numpy", ".", "identity", "(", "ndims", "+", "1", ")", "\n", "M0", "[", ":", "ndims", ",", "ndims", "]", "=", "t0", "\n", "v0", "+=", "t0", ".", "reshape", "(", "ndims", ",", "1", ")", "\n", "t1", "=", "-", "numpy", ".", "mean", "(", "v1", ",", "axis", "=", "1", ")", "\n", "M1", "=", "numpy", ".", "identity", "(", "ndims", "+", "1", ")", "\n", "M1", "[", ":", "ndims", ",", "ndims", "]", "=", "t1", "\n", "v1", "+=", "t1", ".", "reshape", "(", "ndims", ",", "1", ")", "\n", "\n", "if", "shear", ":", "\n", "# Affine transformation", "\n", "        ", "A", "=", "numpy", ".", "concatenate", "(", "(", "v0", ",", "v1", ")", ",", "axis", "=", "0", ")", "\n", "u", ",", "s", ",", "vh", "=", "numpy", ".", "linalg", ".", "svd", "(", "A", ".", "T", ")", "\n", "vh", "=", "vh", "[", ":", "ndims", "]", ".", "T", "\n", "B", "=", "vh", "[", ":", "ndims", "]", "\n", "C", "=", "vh", "[", "ndims", ":", "2", "*", "ndims", "]", "\n", "t", "=", "numpy", ".", "dot", "(", "C", ",", "numpy", ".", "linalg", ".", "pinv", "(", "B", ")", ")", "\n", "t", "=", "numpy", ".", "concatenate", "(", "(", "t", ",", "numpy", ".", "zeros", "(", "(", "ndims", ",", "1", ")", ")", ")", ",", "axis", "=", "1", ")", "\n", "M", "=", "numpy", ".", "vstack", "(", "(", "t", ",", "(", "(", "0.0", ",", ")", "*", "ndims", ")", "+", "(", "1.0", ",", ")", ")", ")", "\n", "", "elif", "usesvd", "or", "ndims", "!=", "3", ":", "\n", "# Rigid transformation via SVD of covariance matrix", "\n", "        ", "u", ",", "s", ",", "vh", "=", "numpy", ".", "linalg", ".", "svd", "(", "numpy", ".", "dot", "(", "v1", ",", "v0", ".", "T", ")", ")", "\n", "# rotation matrix from SVD orthonormal bases", "\n", "R", "=", "numpy", ".", "dot", "(", "u", ",", "vh", ")", "\n", "if", "numpy", ".", "linalg", ".", "det", "(", "R", ")", "<", "0.0", ":", "\n", "# R does not constitute right handed system", "\n", "            ", "R", "-=", "numpy", ".", "outer", "(", "u", "[", ":", ",", "ndims", "-", "1", "]", ",", "vh", "[", "ndims", "-", "1", ",", ":", "]", "*", "2.0", ")", "\n", "s", "[", "-", "1", "]", "*=", "-", "1.0", "\n", "# homogeneous transformation matrix", "\n", "", "M", "=", "numpy", ".", "identity", "(", "ndims", "+", "1", ")", "\n", "M", "[", ":", "ndims", ",", ":", "ndims", "]", "=", "R", "\n", "", "else", ":", "\n", "# Rigid transformation matrix via quaternion", "\n", "# compute symmetric matrix N", "\n", "        ", "xx", ",", "yy", ",", "zz", "=", "numpy", ".", "sum", "(", "v0", "*", "v1", ",", "axis", "=", "1", ")", "\n", "xy", ",", "yz", ",", "zx", "=", "numpy", ".", "sum", "(", "v0", "*", "numpy", ".", "roll", "(", "v1", ",", "-", "1", ",", "axis", "=", "0", ")", ",", "axis", "=", "1", ")", "\n", "xz", ",", "yx", ",", "zy", "=", "numpy", ".", "sum", "(", "v0", "*", "numpy", ".", "roll", "(", "v1", ",", "-", "2", ",", "axis", "=", "0", ")", ",", "axis", "=", "1", ")", "\n", "N", "=", "[", "[", "xx", "+", "yy", "+", "zz", ",", "0.0", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "yz", "-", "zy", ",", "xx", "-", "yy", "-", "zz", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "zx", "-", "xz", ",", "xy", "+", "yx", ",", "yy", "-", "xx", "-", "zz", ",", "0.0", "]", ",", "\n", "[", "xy", "-", "yx", ",", "zx", "+", "xz", ",", "yz", "+", "zy", ",", "zz", "-", "xx", "-", "yy", "]", "]", "\n", "# quaternion: eigenvector corresponding to most positive eigenvalue", "\n", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eigh", "(", "N", ")", "\n", "q", "=", "V", "[", ":", ",", "numpy", ".", "argmax", "(", "w", ")", "]", "\n", "q", "/=", "vector_norm", "(", "q", ")", "# unit quaternion", "\n", "# homogeneous transformation matrix", "\n", "M", "=", "quaternion_matrix", "(", "q", ")", "\n", "\n", "", "if", "scale", "and", "not", "shear", ":", "\n", "# Affine transformation; scale is ratio of RMS deviations from centroid", "\n", "        ", "v0", "*=", "v0", "\n", "v1", "*=", "v1", "\n", "M", "[", ":", "ndims", ",", ":", "ndims", "]", "*=", "math", ".", "sqrt", "(", "numpy", ".", "sum", "(", "v1", ")", "/", "numpy", ".", "sum", "(", "v0", ")", ")", "\n", "\n", "# move centroids back", "\n", "", "M", "=", "numpy", ".", "dot", "(", "numpy", ".", "linalg", ".", "inv", "(", "M1", ")", ",", "numpy", ".", "dot", "(", "M", ",", "M0", ")", ")", "\n", "M", "/=", "M", "[", "ndims", ",", "ndims", "]", "\n", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.superimposition_matrix": [[1018, 1067], ["transformations.affine_matrix_from_points", "numpy.array", "numpy.array"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.affine_matrix_from_points"], ["", "def", "superimposition_matrix", "(", "v0", ",", "v1", ",", "scale", "=", "False", ",", "usesvd", "=", "True", ")", ":", "\n", "    ", "\"\"\"Return matrix to transform given 3D point set into second point set.\n\n    v0 and v1 are shape (3, \\*) or (4, \\*) arrays of at least 3 points.\n\n    The parameters scale and usesvd are explained in the more general\n    affine_matrix_from_points function.\n\n    The returned matrix is a similarity or Euclidean transformation matrix.\n    This function has a fast C implementation in transformations.c.\n\n    >>> v0 = numpy.random.rand(3, 10)\n    >>> M = superimposition_matrix(v0, v0)\n    >>> numpy.allclose(M, numpy.identity(4))\n    True\n    >>> R = random_rotation_matrix(numpy.random.random(3))\n    >>> v0 = [[1,0,0], [0,1,0], [0,0,1], [1,1,1]]\n    >>> v1 = numpy.dot(R, v0)\n    >>> M = superimposition_matrix(v0, v1)\n    >>> numpy.allclose(v1, numpy.dot(M, v0))\n    True\n    >>> v0 = (numpy.random.rand(4, 100) - 0.5) * 20\n    >>> v0[3] = 1\n    >>> v1 = numpy.dot(R, v0)\n    >>> M = superimposition_matrix(v0, v1)\n    >>> numpy.allclose(v1, numpy.dot(M, v0))\n    True\n    >>> S = scale_matrix(random.random())\n    >>> T = translation_matrix(numpy.random.random(3)-0.5)\n    >>> M = concatenate_matrices(T, R, S)\n    >>> v1 = numpy.dot(M, v0)\n    >>> v0[:3] += numpy.random.normal(0, 1e-9, 300).reshape(3, -1)\n    >>> M = superimposition_matrix(v0, v1, scale=True)\n    >>> numpy.allclose(v1, numpy.dot(M, v0))\n    True\n    >>> M = superimposition_matrix(v0, v1, scale=True, usesvd=False)\n    >>> numpy.allclose(v1, numpy.dot(M, v0))\n    True\n    >>> v = numpy.empty((4, 100, 3))\n    >>> v[:, :, 0] = v0\n    >>> M = superimposition_matrix(v0, v1, scale=True, usesvd=False)\n    >>> numpy.allclose(v1, numpy.dot(M, v[:, :, 0]))\n    True\n\n    \"\"\"", "\n", "v0", "=", "numpy", ".", "array", "(", "v0", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "[", ":", "3", "]", "\n", "v1", "=", "numpy", ".", "array", "(", "v1", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "[", ":", "3", "]", "\n", "return", "affine_matrix_from_points", "(", "v0", ",", "v1", ",", "shear", "=", "False", ",", "\n", "scale", "=", "scale", ",", "usesvd", "=", "usesvd", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.euler_matrix": [[1069, 1130], ["numpy.identity", "math.sin", "math.sin", "math.sin", "math.cos", "math.cos", "math.cos"], "function", ["None"], ["", "def", "euler_matrix", "(", "ai", ",", "aj", ",", "ak", ",", "axes", "=", "'sxyz'", ")", ":", "\n", "    ", "\"\"\"Return homogeneous rotation matrix from Euler angles and axis sequence.\n\n    ai, aj, ak : Euler's roll, pitch and yaw angles\n    axes : One of 24 axis sequences as string or encoded tuple\n\n    >>> R = euler_matrix(1, 2, 3, 'syxz')\n    >>> numpy.allclose(numpy.sum(R[0]), -1.34786452)\n    True\n    >>> R = euler_matrix(1, 2, 3, (0, 1, 0, 1))\n    >>> numpy.allclose(numpy.sum(R[0]), -0.383436184)\n    True\n    >>> ai, aj, ak = (4*math.pi) * (numpy.random.random(3) - 0.5)\n    >>> for axes in _AXES2TUPLE.keys():\n    ...    R = euler_matrix(ai, aj, ak, axes)\n    >>> for axes in _TUPLE2AXES.keys():\n    ...    R = euler_matrix(ai, aj, ak, axes)\n\n    \"\"\"", "\n", "try", ":", "\n", "        ", "firstaxis", ",", "parity", ",", "repetition", ",", "frame", "=", "_AXES2TUPLE", "[", "axes", "]", "\n", "", "except", "(", "AttributeError", ",", "KeyError", ")", ":", "\n", "        ", "_TUPLE2AXES", "[", "axes", "]", "# validation", "\n", "firstaxis", ",", "parity", ",", "repetition", ",", "frame", "=", "axes", "\n", "\n", "", "i", "=", "firstaxis", "\n", "j", "=", "_NEXT_AXIS", "[", "i", "+", "parity", "]", "\n", "k", "=", "_NEXT_AXIS", "[", "i", "-", "parity", "+", "1", "]", "\n", "\n", "if", "frame", ":", "\n", "        ", "ai", ",", "ak", "=", "ak", ",", "ai", "\n", "", "if", "parity", ":", "\n", "        ", "ai", ",", "aj", ",", "ak", "=", "-", "ai", ",", "-", "aj", ",", "-", "ak", "\n", "\n", "", "si", ",", "sj", ",", "sk", "=", "math", ".", "sin", "(", "ai", ")", ",", "math", ".", "sin", "(", "aj", ")", ",", "math", ".", "sin", "(", "ak", ")", "\n", "ci", ",", "cj", ",", "ck", "=", "math", ".", "cos", "(", "ai", ")", ",", "math", ".", "cos", "(", "aj", ")", ",", "math", ".", "cos", "(", "ak", ")", "\n", "cc", ",", "cs", "=", "ci", "*", "ck", ",", "ci", "*", "sk", "\n", "sc", ",", "ss", "=", "si", "*", "ck", ",", "si", "*", "sk", "\n", "\n", "M", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "if", "repetition", ":", "\n", "        ", "M", "[", "i", ",", "i", "]", "=", "cj", "\n", "M", "[", "i", ",", "j", "]", "=", "sj", "*", "si", "\n", "M", "[", "i", ",", "k", "]", "=", "sj", "*", "ci", "\n", "M", "[", "j", ",", "i", "]", "=", "sj", "*", "sk", "\n", "M", "[", "j", ",", "j", "]", "=", "-", "cj", "*", "ss", "+", "cc", "\n", "M", "[", "j", ",", "k", "]", "=", "-", "cj", "*", "cs", "-", "sc", "\n", "M", "[", "k", ",", "i", "]", "=", "-", "sj", "*", "ck", "\n", "M", "[", "k", ",", "j", "]", "=", "cj", "*", "sc", "+", "cs", "\n", "M", "[", "k", ",", "k", "]", "=", "cj", "*", "cc", "-", "ss", "\n", "", "else", ":", "\n", "        ", "M", "[", "i", ",", "i", "]", "=", "cj", "*", "ck", "\n", "M", "[", "i", ",", "j", "]", "=", "sj", "*", "sc", "-", "cs", "\n", "M", "[", "i", ",", "k", "]", "=", "sj", "*", "cc", "+", "ss", "\n", "M", "[", "j", ",", "i", "]", "=", "cj", "*", "sk", "\n", "M", "[", "j", ",", "j", "]", "=", "sj", "*", "ss", "+", "cc", "\n", "M", "[", "j", ",", "k", "]", "=", "sj", "*", "cs", "-", "sc", "\n", "M", "[", "k", ",", "i", "]", "=", "-", "sj", "\n", "M", "[", "k", ",", "j", "]", "=", "cj", "*", "si", "\n", "M", "[", "k", ",", "k", "]", "=", "cj", "*", "ci", "\n", "", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.euler_from_matrix": [[1132, 1188], ["numpy.array", "math.sqrt", "math.sqrt", "math.atan2", "math.atan2", "math.atan2", "math.atan2", "math.atan2", "math.atan2", "math.atan2", "math.atan2", "math.atan2", "math.atan2", "axes.lower"], "function", ["None"], ["", "def", "euler_from_matrix", "(", "matrix", ",", "axes", "=", "'sxyz'", ")", ":", "\n", "    ", "\"\"\"Return Euler angles from rotation matrix for specified axis sequence.\n\n    axes : One of 24 axis sequences as string or encoded tuple\n\n    Note that many Euler angle triplets can describe one matrix.\n\n    >>> R0 = euler_matrix(1, 2, 3, 'syxz')\n    >>> al, be, ga = euler_from_matrix(R0, 'syxz')\n    >>> R1 = euler_matrix(al, be, ga, 'syxz')\n    >>> numpy.allclose(R0, R1)\n    True\n    >>> angles = (4*math.pi) * (numpy.random.random(3) - 0.5)\n    >>> for axes in _AXES2TUPLE.keys():\n    ...    R0 = euler_matrix(axes=axes, *angles)\n    ...    R1 = euler_matrix(axes=axes, *euler_from_matrix(R0, axes))\n    ...    if not numpy.allclose(R0, R1): print(axes, \"failed\")\n\n    \"\"\"", "\n", "try", ":", "\n", "        ", "firstaxis", ",", "parity", ",", "repetition", ",", "frame", "=", "_AXES2TUPLE", "[", "axes", ".", "lower", "(", ")", "]", "\n", "", "except", "(", "AttributeError", ",", "KeyError", ")", ":", "\n", "        ", "_TUPLE2AXES", "[", "axes", "]", "# validation", "\n", "firstaxis", ",", "parity", ",", "repetition", ",", "frame", "=", "axes", "\n", "\n", "", "i", "=", "firstaxis", "\n", "j", "=", "_NEXT_AXIS", "[", "i", "+", "parity", "]", "\n", "k", "=", "_NEXT_AXIS", "[", "i", "-", "parity", "+", "1", "]", "\n", "\n", "M", "=", "numpy", ".", "array", "(", "matrix", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "[", ":", "3", ",", ":", "3", "]", "\n", "if", "repetition", ":", "\n", "        ", "sy", "=", "math", ".", "sqrt", "(", "M", "[", "i", ",", "j", "]", "*", "M", "[", "i", ",", "j", "]", "+", "M", "[", "i", ",", "k", "]", "*", "M", "[", "i", ",", "k", "]", ")", "\n", "if", "sy", ">", "_EPS", ":", "\n", "            ", "ax", "=", "math", ".", "atan2", "(", "M", "[", "i", ",", "j", "]", ",", "M", "[", "i", ",", "k", "]", ")", "\n", "ay", "=", "math", ".", "atan2", "(", "sy", ",", "M", "[", "i", ",", "i", "]", ")", "\n", "az", "=", "math", ".", "atan2", "(", "M", "[", "j", ",", "i", "]", ",", "-", "M", "[", "k", ",", "i", "]", ")", "\n", "", "else", ":", "\n", "            ", "ax", "=", "math", ".", "atan2", "(", "-", "M", "[", "j", ",", "k", "]", ",", "M", "[", "j", ",", "j", "]", ")", "\n", "ay", "=", "math", ".", "atan2", "(", "sy", ",", "M", "[", "i", ",", "i", "]", ")", "\n", "az", "=", "0.0", "\n", "", "", "else", ":", "\n", "        ", "cy", "=", "math", ".", "sqrt", "(", "M", "[", "i", ",", "i", "]", "*", "M", "[", "i", ",", "i", "]", "+", "M", "[", "j", ",", "i", "]", "*", "M", "[", "j", ",", "i", "]", ")", "\n", "if", "cy", ">", "_EPS", ":", "\n", "            ", "ax", "=", "math", ".", "atan2", "(", "M", "[", "k", ",", "j", "]", ",", "M", "[", "k", ",", "k", "]", ")", "\n", "ay", "=", "math", ".", "atan2", "(", "-", "M", "[", "k", ",", "i", "]", ",", "cy", ")", "\n", "az", "=", "math", ".", "atan2", "(", "M", "[", "j", ",", "i", "]", ",", "M", "[", "i", ",", "i", "]", ")", "\n", "", "else", ":", "\n", "            ", "ax", "=", "math", ".", "atan2", "(", "-", "M", "[", "j", ",", "k", "]", ",", "M", "[", "j", ",", "j", "]", ")", "\n", "ay", "=", "math", ".", "atan2", "(", "-", "M", "[", "k", ",", "i", "]", ",", "cy", ")", "\n", "az", "=", "0.0", "\n", "\n", "", "", "if", "parity", ":", "\n", "        ", "ax", ",", "ay", ",", "az", "=", "-", "ax", ",", "-", "ay", ",", "-", "az", "\n", "", "if", "frame", ":", "\n", "        ", "ax", ",", "az", "=", "az", ",", "ax", "\n", "", "return", "ax", ",", "ay", ",", "az", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.euler_from_quaternion": [[1190, 1199], ["transformations.euler_from_matrix", "transformations.quaternion_matrix"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.euler_from_matrix", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.quaternion_matrix"], ["", "def", "euler_from_quaternion", "(", "quaternion", ",", "axes", "=", "'sxyz'", ")", ":", "\n", "    ", "\"\"\"Return Euler angles from quaternion for specified axis sequence.\n\n    >>> angles = euler_from_quaternion([0.99810947, 0.06146124, 0, 0])\n    >>> numpy.allclose(angles, [0.123, 0, 0])\n    True\n\n    \"\"\"", "\n", "return", "euler_from_matrix", "(", "quaternion_matrix", "(", "quaternion", ")", ",", "axes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.quaternion_from_euler": [[1201, 1256], ["math.cos", "math.sin", "math.cos", "math.sin", "math.cos", "math.sin", "numpy.empty", "axes.lower"], "function", ["None"], ["", "def", "quaternion_from_euler", "(", "ai", ",", "aj", ",", "ak", ",", "axes", "=", "'sxyz'", ")", ":", "\n", "    ", "\"\"\"Return quaternion from Euler angles and axis sequence.\n\n    ai, aj, ak : Euler's roll, pitch and yaw angles\n    axes : One of 24 axis sequences as string or encoded tuple\n\n    >>> q = quaternion_from_euler(1, 2, 3, 'ryxz')\n    >>> numpy.allclose(q, [0.435953, 0.310622, -0.718287, 0.444435])\n    True\n\n    \"\"\"", "\n", "try", ":", "\n", "        ", "firstaxis", ",", "parity", ",", "repetition", ",", "frame", "=", "_AXES2TUPLE", "[", "axes", ".", "lower", "(", ")", "]", "\n", "", "except", "(", "AttributeError", ",", "KeyError", ")", ":", "\n", "        ", "_TUPLE2AXES", "[", "axes", "]", "# validation", "\n", "firstaxis", ",", "parity", ",", "repetition", ",", "frame", "=", "axes", "\n", "\n", "", "i", "=", "firstaxis", "+", "1", "\n", "j", "=", "_NEXT_AXIS", "[", "i", "+", "parity", "-", "1", "]", "+", "1", "\n", "k", "=", "_NEXT_AXIS", "[", "i", "-", "parity", "]", "+", "1", "\n", "\n", "if", "frame", ":", "\n", "        ", "ai", ",", "ak", "=", "ak", ",", "ai", "\n", "", "if", "parity", ":", "\n", "        ", "aj", "=", "-", "aj", "\n", "\n", "", "ai", "/=", "2.0", "\n", "aj", "/=", "2.0", "\n", "ak", "/=", "2.0", "\n", "ci", "=", "math", ".", "cos", "(", "ai", ")", "\n", "si", "=", "math", ".", "sin", "(", "ai", ")", "\n", "cj", "=", "math", ".", "cos", "(", "aj", ")", "\n", "sj", "=", "math", ".", "sin", "(", "aj", ")", "\n", "ck", "=", "math", ".", "cos", "(", "ak", ")", "\n", "sk", "=", "math", ".", "sin", "(", "ak", ")", "\n", "cc", "=", "ci", "*", "ck", "\n", "cs", "=", "ci", "*", "sk", "\n", "sc", "=", "si", "*", "ck", "\n", "ss", "=", "si", "*", "sk", "\n", "\n", "q", "=", "numpy", ".", "empty", "(", "(", "4", ",", ")", ")", "\n", "if", "repetition", ":", "\n", "        ", "q", "[", "0", "]", "=", "cj", "*", "(", "cc", "-", "ss", ")", "\n", "q", "[", "i", "]", "=", "cj", "*", "(", "cs", "+", "sc", ")", "\n", "q", "[", "j", "]", "=", "sj", "*", "(", "cc", "+", "ss", ")", "\n", "q", "[", "k", "]", "=", "sj", "*", "(", "cs", "-", "sc", ")", "\n", "", "else", ":", "\n", "        ", "q", "[", "0", "]", "=", "cj", "*", "cc", "+", "sj", "*", "ss", "\n", "q", "[", "i", "]", "=", "cj", "*", "sc", "-", "sj", "*", "cs", "\n", "q", "[", "j", "]", "=", "cj", "*", "ss", "+", "sj", "*", "cc", "\n", "q", "[", "k", "]", "=", "cj", "*", "cs", "-", "sj", "*", "sc", "\n", "", "if", "parity", ":", "\n", "        ", "q", "[", "j", "]", "*=", "-", "1.0", "\n", "\n", "", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.quaternion_about_axis": [[1258, 1272], ["numpy.array", "transformations.vector_norm", "math.cos", "math.sin"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.vector_norm"], ["", "def", "quaternion_about_axis", "(", "angle", ",", "axis", ")", ":", "\n", "    ", "\"\"\"Return quaternion for rotation about axis.\n\n    >>> q = quaternion_about_axis(0.123, [1, 0, 0])\n    >>> numpy.allclose(q, [0.99810947, 0.06146124, 0, 0])\n    True\n\n    \"\"\"", "\n", "q", "=", "numpy", ".", "array", "(", "[", "0.0", ",", "axis", "[", "0", "]", ",", "axis", "[", "1", "]", ",", "axis", "[", "2", "]", "]", ")", "\n", "qlen", "=", "vector_norm", "(", "q", ")", "\n", "if", "qlen", ">", "_EPS", ":", "\n", "        ", "q", "*=", "math", ".", "sin", "(", "angle", "/", "2.0", ")", "/", "qlen", "\n", "", "q", "[", "0", "]", "=", "math", ".", "cos", "(", "angle", "/", "2.0", ")", "\n", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.quaternion_matrix": [[1274, 1299], ["numpy.array", "numpy.dot", "math.sqrt", "numpy.outer", "numpy.array", "numpy.identity"], "function", ["None"], ["", "def", "quaternion_matrix", "(", "quaternion", ")", ":", "\n", "    ", "\"\"\"Return homogeneous rotation matrix from quaternion.\n\n    >>> M = quaternion_matrix([0.99810947, 0.06146124, 0, 0])\n    >>> numpy.allclose(M, rotation_matrix(0.123, [1, 0, 0]))\n    True\n    >>> M = quaternion_matrix([1, 0, 0, 0])\n    >>> numpy.allclose(M, numpy.identity(4))\n    True\n    >>> M = quaternion_matrix([0, 1, 0, 0])\n    >>> numpy.allclose(M, numpy.diag([1, -1, -1, 1]))\n    True\n\n    \"\"\"", "\n", "q", "=", "numpy", ".", "array", "(", "quaternion", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "n", "=", "numpy", ".", "dot", "(", "q", ",", "q", ")", "\n", "if", "n", "<", "_EPS", ":", "\n", "        ", "return", "numpy", ".", "identity", "(", "4", ")", "\n", "", "q", "*=", "math", ".", "sqrt", "(", "2.0", "/", "n", ")", "\n", "q", "=", "numpy", ".", "outer", "(", "q", ",", "q", ")", "\n", "return", "numpy", ".", "array", "(", "[", "\n", "[", "1.0", "-", "q", "[", "2", ",", "2", "]", "-", "q", "[", "3", ",", "3", "]", ",", "q", "[", "1", ",", "2", "]", "-", "q", "[", "3", ",", "0", "]", ",", "q", "[", "1", ",", "3", "]", "+", "q", "[", "2", ",", "0", "]", ",", "0.0", "]", ",", "\n", "[", "q", "[", "1", ",", "2", "]", "+", "q", "[", "3", ",", "0", "]", ",", "1.0", "-", "q", "[", "1", ",", "1", "]", "-", "q", "[", "3", ",", "3", "]", ",", "q", "[", "2", ",", "3", "]", "-", "q", "[", "1", ",", "0", "]", ",", "0.0", "]", ",", "\n", "[", "q", "[", "1", ",", "3", "]", "-", "q", "[", "2", ",", "0", "]", ",", "q", "[", "2", ",", "3", "]", "+", "q", "[", "1", ",", "0", "]", ",", "1.0", "-", "q", "[", "1", ",", "1", "]", "-", "q", "[", "2", ",", "2", "]", ",", "0.0", "]", ",", "\n", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.quaternion_from_matrix": [[1301, 1384], ["numpy.array", "numpy.empty", "numpy.trace", "numpy.array", "numpy.linalg.eigh", "numpy.negative", "math.sqrt", "numpy.argmax"], "function", ["None"], ["", "def", "quaternion_from_matrix", "(", "matrix", ",", "isprecise", "=", "False", ")", ":", "\n", "    ", "\"\"\"Return quaternion from rotation matrix.\n\n    If isprecise is True, the input matrix is assumed to be a precise rotation\n    matrix and a faster algorithm is used.\n\n    >>> q = quaternion_from_matrix(numpy.identity(4), True)\n    >>> numpy.allclose(q, [1, 0, 0, 0])\n    True\n    >>> q = quaternion_from_matrix(numpy.diag([1, -1, -1, 1]))\n    >>> numpy.allclose(q, [0, 1, 0, 0]) or numpy.allclose(q, [0, -1, 0, 0])\n    True\n    >>> R = rotation_matrix(0.123, (1, 2, 3))\n    >>> q = quaternion_from_matrix(R, True)\n    >>> numpy.allclose(q, [0.9981095, 0.0164262, 0.0328524, 0.0492786])\n    True\n    >>> R = [[-0.545, 0.797, 0.260, 0], [0.733, 0.603, -0.313, 0],\n    ...      [-0.407, 0.021, -0.913, 0], [0, 0, 0, 1]]\n    >>> q = quaternion_from_matrix(R)\n    >>> numpy.allclose(q, [0.19069, 0.43736, 0.87485, -0.083611])\n    True\n    >>> R = [[0.395, 0.362, 0.843, 0], [-0.626, 0.796, -0.056, 0],\n    ...      [-0.677, -0.498, 0.529, 0], [0, 0, 0, 1]]\n    >>> q = quaternion_from_matrix(R)\n    >>> numpy.allclose(q, [0.82336615, -0.13610694, 0.46344705, -0.29792603])\n    True\n    >>> R = random_rotation_matrix()\n    >>> q = quaternion_from_matrix(R)\n    >>> is_same_transform(R, quaternion_matrix(q))\n    True\n    >>> is_same_quaternion(quaternion_from_matrix(R, isprecise=False),\n    ...                    quaternion_from_matrix(R, isprecise=True))\n    True\n    >>> R = euler_matrix(0.0, 0.0, numpy.pi/2.0)\n    >>> is_same_quaternion(quaternion_from_matrix(R, isprecise=False),\n    ...                    quaternion_from_matrix(R, isprecise=True))\n    True\n\n    \"\"\"", "\n", "M", "=", "numpy", ".", "array", "(", "matrix", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "[", ":", "4", ",", ":", "4", "]", "\n", "if", "isprecise", ":", "\n", "        ", "q", "=", "numpy", ".", "empty", "(", "(", "4", ",", ")", ")", "\n", "t", "=", "numpy", ".", "trace", "(", "M", ")", "\n", "if", "t", ">", "M", "[", "3", ",", "3", "]", ":", "\n", "            ", "q", "[", "0", "]", "=", "t", "\n", "q", "[", "3", "]", "=", "M", "[", "1", ",", "0", "]", "-", "M", "[", "0", ",", "1", "]", "\n", "q", "[", "2", "]", "=", "M", "[", "0", ",", "2", "]", "-", "M", "[", "2", ",", "0", "]", "\n", "q", "[", "1", "]", "=", "M", "[", "2", ",", "1", "]", "-", "M", "[", "1", ",", "2", "]", "\n", "", "else", ":", "\n", "            ", "i", ",", "j", ",", "k", "=", "0", ",", "1", ",", "2", "\n", "if", "M", "[", "1", ",", "1", "]", ">", "M", "[", "0", ",", "0", "]", ":", "\n", "                ", "i", ",", "j", ",", "k", "=", "1", ",", "2", ",", "0", "\n", "", "if", "M", "[", "2", ",", "2", "]", ">", "M", "[", "i", ",", "i", "]", ":", "\n", "                ", "i", ",", "j", ",", "k", "=", "2", ",", "0", ",", "1", "\n", "", "t", "=", "M", "[", "i", ",", "i", "]", "-", "(", "M", "[", "j", ",", "j", "]", "+", "M", "[", "k", ",", "k", "]", ")", "+", "M", "[", "3", ",", "3", "]", "\n", "q", "[", "i", "]", "=", "t", "\n", "q", "[", "j", "]", "=", "M", "[", "i", ",", "j", "]", "+", "M", "[", "j", ",", "i", "]", "\n", "q", "[", "k", "]", "=", "M", "[", "k", ",", "i", "]", "+", "M", "[", "i", ",", "k", "]", "\n", "q", "[", "3", "]", "=", "M", "[", "k", ",", "j", "]", "-", "M", "[", "j", ",", "k", "]", "\n", "q", "=", "q", "[", "[", "3", ",", "0", ",", "1", ",", "2", "]", "]", "\n", "", "q", "*=", "0.5", "/", "math", ".", "sqrt", "(", "t", "*", "M", "[", "3", ",", "3", "]", ")", "\n", "", "else", ":", "\n", "        ", "m00", "=", "M", "[", "0", ",", "0", "]", "\n", "m01", "=", "M", "[", "0", ",", "1", "]", "\n", "m02", "=", "M", "[", "0", ",", "2", "]", "\n", "m10", "=", "M", "[", "1", ",", "0", "]", "\n", "m11", "=", "M", "[", "1", ",", "1", "]", "\n", "m12", "=", "M", "[", "1", ",", "2", "]", "\n", "m20", "=", "M", "[", "2", ",", "0", "]", "\n", "m21", "=", "M", "[", "2", ",", "1", "]", "\n", "m22", "=", "M", "[", "2", ",", "2", "]", "\n", "# symmetric matrix K", "\n", "K", "=", "numpy", ".", "array", "(", "[", "[", "m00", "-", "m11", "-", "m22", ",", "0.0", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "m01", "+", "m10", ",", "m11", "-", "m00", "-", "m22", ",", "0.0", ",", "0.0", "]", ",", "\n", "[", "m02", "+", "m20", ",", "m12", "+", "m21", ",", "m22", "-", "m00", "-", "m11", ",", "0.0", "]", ",", "\n", "[", "m21", "-", "m12", ",", "m02", "-", "m20", ",", "m10", "-", "m01", ",", "m00", "+", "m11", "+", "m22", "]", "]", ")", "\n", "K", "/=", "3.0", "\n", "# quaternion is eigenvector of K that corresponds to largest eigenvalue", "\n", "w", ",", "V", "=", "numpy", ".", "linalg", ".", "eigh", "(", "K", ")", "\n", "q", "=", "V", "[", "[", "3", ",", "0", ",", "1", ",", "2", "]", ",", "numpy", ".", "argmax", "(", "w", ")", "]", "\n", "", "if", "q", "[", "0", "]", "<", "0.0", ":", "\n", "        ", "numpy", ".", "negative", "(", "q", ",", "q", ")", "\n", "", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.quaternion_multiply": [[1386, 1401], ["numpy.array"], "function", ["None"], ["", "def", "quaternion_multiply", "(", "quaternion1", ",", "quaternion0", ")", ":", "\n", "    ", "\"\"\"Return multiplication of two quaternions.\n\n    >>> q = quaternion_multiply([4, 1, -2, 3], [8, -5, 6, 7])\n    >>> numpy.allclose(q, [28, -44, -14, 48])\n    True\n\n    \"\"\"", "\n", "w0", ",", "x0", ",", "y0", ",", "z0", "=", "quaternion0", "\n", "w1", ",", "x1", ",", "y1", ",", "z1", "=", "quaternion1", "\n", "return", "numpy", ".", "array", "(", "[", "\n", "-", "x1", "*", "x0", "-", "y1", "*", "y0", "-", "z1", "*", "z0", "+", "w1", "*", "w0", ",", "\n", "x1", "*", "w0", "+", "y1", "*", "z0", "-", "z1", "*", "y0", "+", "w1", "*", "x0", ",", "\n", "-", "x1", "*", "z0", "+", "y1", "*", "w0", "+", "z1", "*", "x0", "+", "w1", "*", "y0", ",", "\n", "x1", "*", "y0", "-", "y1", "*", "x0", "+", "z1", "*", "w0", "+", "w1", "*", "z0", "]", ",", "dtype", "=", "numpy", ".", "float64", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.quaternion_conjugate": [[1403, 1415], ["numpy.array", "numpy.negative"], "function", ["None"], ["", "def", "quaternion_conjugate", "(", "quaternion", ")", ":", "\n", "    ", "\"\"\"Return conjugate of quaternion.\n\n    >>> q0 = random_quaternion()\n    >>> q1 = quaternion_conjugate(q0)\n    >>> q1[0] == q0[0] and all(q1[1:] == -q0[1:])\n    True\n\n    \"\"\"", "\n", "q", "=", "numpy", ".", "array", "(", "quaternion", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "numpy", ".", "negative", "(", "q", "[", "1", ":", "]", ",", "q", "[", "1", ":", "]", ")", "\n", "return", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.quaternion_inverse": [[1417, 1429], ["numpy.array", "numpy.negative", "numpy.dot"], "function", ["None"], ["", "def", "quaternion_inverse", "(", "quaternion", ")", ":", "\n", "    ", "\"\"\"Return inverse of quaternion.\n\n    >>> q0 = random_quaternion()\n    >>> q1 = quaternion_inverse(q0)\n    >>> numpy.allclose(quaternion_multiply(q0, q1), [1, 0, 0, 0])\n    True\n\n    \"\"\"", "\n", "q", "=", "numpy", ".", "array", "(", "quaternion", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "numpy", ".", "negative", "(", "q", "[", "1", ":", "]", ",", "q", "[", "1", ":", "]", ")", "\n", "return", "q", "/", "numpy", ".", "dot", "(", "q", ",", "q", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.quaternion_real": [[1431, 1439], ["float"], "function", ["None"], ["", "def", "quaternion_real", "(", "quaternion", ")", ":", "\n", "    ", "\"\"\"Return real part of quaternion.\n\n    >>> quaternion_real([3, 0, 1, 2])\n    3.0\n\n    \"\"\"", "\n", "return", "float", "(", "quaternion", "[", "0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.quaternion_imag": [[1441, 1449], ["numpy.array"], "function", ["None"], ["", "def", "quaternion_imag", "(", "quaternion", ")", ":", "\n", "    ", "\"\"\"Return imaginary part of quaternion.\n\n    >>> quaternion_imag([3, 0, 1, 2])\n    array([ 0.,  1.,  2.])\n\n    \"\"\"", "\n", "return", "numpy", ".", "array", "(", "quaternion", "[", "1", ":", "4", "]", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.quaternion_slerp": [[1451, 1490], ["transformations.unit_vector", "transformations.unit_vector", "numpy.dot", "abs", "numpy.negative", "math.acos", "abs", "math.sin", "math.sin", "math.sin", "abs"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.unit_vector", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.unit_vector", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.abs", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.model.acos", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.abs", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.abs"], ["", "def", "quaternion_slerp", "(", "quat0", ",", "quat1", ",", "fraction", ",", "spin", "=", "0", ",", "shortestpath", "=", "True", ")", ":", "\n", "    ", "\"\"\"Return spherical linear interpolation between two quaternions.\n\n    >>> q0 = random_quaternion()\n    >>> q1 = random_quaternion()\n    >>> q = quaternion_slerp(q0, q1, 0)\n    >>> numpy.allclose(q, q0)\n    True\n    >>> q = quaternion_slerp(q0, q1, 1, 1)\n    >>> numpy.allclose(q, q1)\n    True\n    >>> q = quaternion_slerp(q0, q1, 0.5)\n    >>> angle = math.acos(numpy.dot(q0, q))\n    >>> numpy.allclose(2, math.acos(numpy.dot(q0, q1)) / angle) or \\\n        numpy.allclose(2, math.acos(-numpy.dot(q0, q1)) / angle)\n    True\n\n    \"\"\"", "\n", "q0", "=", "unit_vector", "(", "quat0", "[", ":", "4", "]", ")", "\n", "q1", "=", "unit_vector", "(", "quat1", "[", ":", "4", "]", ")", "\n", "if", "fraction", "==", "0.0", ":", "\n", "        ", "return", "q0", "\n", "", "elif", "fraction", "==", "1.0", ":", "\n", "        ", "return", "q1", "\n", "", "d", "=", "numpy", ".", "dot", "(", "q0", ",", "q1", ")", "\n", "if", "abs", "(", "abs", "(", "d", ")", "-", "1.0", ")", "<", "_EPS", ":", "\n", "        ", "return", "q0", "\n", "", "if", "shortestpath", "and", "d", "<", "0.0", ":", "\n", "# invert rotation", "\n", "        ", "d", "=", "-", "d", "\n", "numpy", ".", "negative", "(", "q1", ",", "q1", ")", "\n", "", "angle", "=", "math", ".", "acos", "(", "d", ")", "+", "spin", "*", "math", ".", "pi", "\n", "if", "abs", "(", "angle", ")", "<", "_EPS", ":", "\n", "        ", "return", "q0", "\n", "", "isin", "=", "1.0", "/", "math", ".", "sin", "(", "angle", ")", "\n", "q0", "*=", "math", ".", "sin", "(", "(", "1.0", "-", "fraction", ")", "*", "angle", ")", "*", "isin", "\n", "q1", "*=", "math", ".", "sin", "(", "fraction", "*", "angle", ")", "*", "isin", "\n", "q0", "+=", "q1", "\n", "return", "q0", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.random_quaternion": [[1492, 1518], ["numpy.sqrt", "numpy.sqrt", "numpy.array", "numpy.random.rand", "len", "numpy.cos", "numpy.sin", "numpy.cos", "numpy.sin"], "function", ["None"], ["", "def", "random_quaternion", "(", "rand", "=", "None", ")", ":", "\n", "    ", "\"\"\"Return uniform random unit quaternion.\n\n    rand: array like or None\n        Three independent random variables that are uniformly distributed\n        between 0 and 1.\n\n    >>> q = random_quaternion()\n    >>> numpy.allclose(1, vector_norm(q))\n    True\n    >>> q = random_quaternion(numpy.random.random(3))\n    >>> len(q.shape), q.shape[0]==4\n    (1, True)\n\n    \"\"\"", "\n", "if", "rand", "is", "None", ":", "\n", "        ", "rand", "=", "numpy", ".", "random", ".", "rand", "(", "3", ")", "\n", "", "else", ":", "\n", "        ", "assert", "len", "(", "rand", ")", "==", "3", "\n", "", "r1", "=", "numpy", ".", "sqrt", "(", "1.0", "-", "rand", "[", "0", "]", ")", "\n", "r2", "=", "numpy", ".", "sqrt", "(", "rand", "[", "0", "]", ")", "\n", "pi2", "=", "math", ".", "pi", "*", "2.0", "\n", "t1", "=", "pi2", "*", "rand", "[", "1", "]", "\n", "t2", "=", "pi2", "*", "rand", "[", "2", "]", "\n", "return", "numpy", ".", "array", "(", "[", "numpy", ".", "cos", "(", "t2", ")", "*", "r2", ",", "numpy", ".", "sin", "(", "t1", ")", "*", "r1", ",", "\n", "numpy", ".", "cos", "(", "t1", ")", "*", "r1", ",", "numpy", ".", "sin", "(", "t2", ")", "*", "r2", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.random_rotation_matrix": [[1520, 1533], ["transformations.quaternion_matrix", "transformations.random_quaternion"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.quaternion_matrix", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.random_quaternion"], ["", "def", "random_rotation_matrix", "(", "rand", "=", "None", ")", ":", "\n", "    ", "\"\"\"Return uniform random rotation matrix.\n\n    rand: array like\n        Three independent random variables that are uniformly distributed\n        between 0 and 1 for each returned quaternion.\n\n    >>> R = random_rotation_matrix()\n    >>> numpy.allclose(numpy.dot(R.T, R), numpy.identity(4))\n    True\n\n    \"\"\"", "\n", "return", "quaternion_matrix", "(", "random_quaternion", "(", "rand", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.arcball_map_to_sphere": [[1646, 1657], ["math.sqrt", "numpy.array", "numpy.array", "math.sqrt"], "function", ["None"], ["", "", "def", "arcball_map_to_sphere", "(", "point", ",", "center", ",", "radius", ")", ":", "\n", "    ", "\"\"\"Return unit sphere coordinates from window coordinates.\"\"\"", "\n", "v0", "=", "(", "point", "[", "0", "]", "-", "center", "[", "0", "]", ")", "/", "radius", "\n", "v1", "=", "(", "center", "[", "1", "]", "-", "point", "[", "1", "]", ")", "/", "radius", "\n", "n", "=", "v0", "*", "v0", "+", "v1", "*", "v1", "\n", "if", "n", ">", "1.0", ":", "\n", "# position outside of sphere", "\n", "        ", "n", "=", "math", ".", "sqrt", "(", "n", ")", "\n", "return", "numpy", ".", "array", "(", "[", "v0", "/", "n", ",", "v1", "/", "n", ",", "0.0", "]", ")", "\n", "", "else", ":", "\n", "        ", "return", "numpy", ".", "array", "(", "[", "v0", ",", "v1", ",", "math", ".", "sqrt", "(", "1.0", "-", "n", ")", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.arcball_constrain_to_axis": [[1659, 1673], ["numpy.array", "numpy.array", "transformations.vector_norm", "transformations.unit_vector", "numpy.dot", "numpy.array", "numpy.negative"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.vector_norm", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.unit_vector"], ["", "", "def", "arcball_constrain_to_axis", "(", "point", ",", "axis", ")", ":", "\n", "    ", "\"\"\"Return sphere point perpendicular to axis.\"\"\"", "\n", "v", "=", "numpy", ".", "array", "(", "point", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "a", "=", "numpy", ".", "array", "(", "axis", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "v", "-=", "a", "*", "numpy", ".", "dot", "(", "a", ",", "v", ")", "# on plane", "\n", "n", "=", "vector_norm", "(", "v", ")", "\n", "if", "n", ">", "_EPS", ":", "\n", "        ", "if", "v", "[", "2", "]", "<", "0.0", ":", "\n", "            ", "numpy", ".", "negative", "(", "v", ",", "v", ")", "\n", "", "v", "/=", "n", "\n", "return", "v", "\n", "", "if", "a", "[", "2", "]", "==", "1.0", ":", "\n", "        ", "return", "numpy", ".", "array", "(", "[", "1.0", ",", "0.0", ",", "0.0", "]", ")", "\n", "", "return", "unit_vector", "(", "[", "-", "a", "[", "1", "]", ",", "a", "[", "0", "]", ",", "0.0", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.arcball_nearest_axis": [[1675, 1686], ["numpy.array", "numpy.dot", "transformations.arcball_constrain_to_axis"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.arcball_constrain_to_axis"], ["", "def", "arcball_nearest_axis", "(", "point", ",", "axes", ")", ":", "\n", "    ", "\"\"\"Return axis, which arc is nearest to point.\"\"\"", "\n", "point", "=", "numpy", ".", "array", "(", "point", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "nearest", "=", "None", "\n", "mx", "=", "-", "1.0", "\n", "for", "axis", "in", "axes", ":", "\n", "        ", "t", "=", "numpy", ".", "dot", "(", "arcball_constrain_to_axis", "(", "point", ",", "axis", ")", ",", "point", ")", "\n", "if", "t", ">", "mx", ":", "\n", "            ", "nearest", "=", "axis", "\n", "mx", "=", "t", "\n", "", "", "return", "nearest", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.vector_norm": [[1708, 1745], ["numpy.array", "numpy.atleast_1d", "numpy.sqrt", "numpy.sum", "numpy.sqrt", "math.sqrt", "numpy.sum", "numpy.dot"], "function", ["None"], ["def", "vector_norm", "(", "data", ",", "axis", "=", "None", ",", "out", "=", "None", ")", ":", "\n", "    ", "\"\"\"Return length, i.e. Euclidean norm, of ndarray along axis.\n\n    >>> v = numpy.random.random(3)\n    >>> n = vector_norm(v)\n    >>> numpy.allclose(n, numpy.linalg.norm(v))\n    True\n    >>> v = numpy.random.rand(6, 5, 3)\n    >>> n = vector_norm(v, axis=-1)\n    >>> numpy.allclose(n, numpy.sqrt(numpy.sum(v*v, axis=2)))\n    True\n    >>> n = vector_norm(v, axis=1)\n    >>> numpy.allclose(n, numpy.sqrt(numpy.sum(v*v, axis=1)))\n    True\n    >>> v = numpy.random.rand(5, 4, 3)\n    >>> n = numpy.empty((5, 3))\n    >>> vector_norm(v, axis=1, out=n)\n    >>> numpy.allclose(n, numpy.sqrt(numpy.sum(v*v, axis=1)))\n    True\n    >>> vector_norm([])\n    0.0\n    >>> vector_norm([1])\n    1.0\n\n    \"\"\"", "\n", "data", "=", "numpy", ".", "array", "(", "data", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "if", "out", "is", "None", ":", "\n", "        ", "if", "data", ".", "ndim", "==", "1", ":", "\n", "            ", "return", "math", ".", "sqrt", "(", "numpy", ".", "dot", "(", "data", ",", "data", ")", ")", "\n", "", "data", "*=", "data", "\n", "out", "=", "numpy", ".", "atleast_1d", "(", "numpy", ".", "sum", "(", "data", ",", "axis", "=", "axis", ")", ")", "\n", "numpy", ".", "sqrt", "(", "out", ",", "out", ")", "\n", "return", "out", "\n", "", "else", ":", "\n", "        ", "data", "*=", "data", "\n", "numpy", ".", "sum", "(", "data", ",", "axis", "=", "axis", ",", "out", "=", "out", ")", "\n", "numpy", ".", "sqrt", "(", "out", ",", "out", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.unit_vector": [[1747, 1789], ["numpy.atleast_1d", "numpy.sqrt", "numpy.array", "numpy.sum", "numpy.expand_dims", "math.sqrt", "numpy.array", "numpy.dot"], "function", ["None"], ["", "", "def", "unit_vector", "(", "data", ",", "axis", "=", "None", ",", "out", "=", "None", ")", ":", "\n", "    ", "\"\"\"Return ndarray normalized by length, i.e. Euclidean norm, along axis.\n\n    >>> v0 = numpy.random.random(3)\n    >>> v1 = unit_vector(v0)\n    >>> numpy.allclose(v1, v0 / numpy.linalg.norm(v0))\n    True\n    >>> v0 = numpy.random.rand(5, 4, 3)\n    >>> v1 = unit_vector(v0, axis=-1)\n    >>> v2 = v0 / numpy.expand_dims(numpy.sqrt(numpy.sum(v0*v0, axis=2)), 2)\n    >>> numpy.allclose(v1, v2)\n    True\n    >>> v1 = unit_vector(v0, axis=1)\n    >>> v2 = v0 / numpy.expand_dims(numpy.sqrt(numpy.sum(v0*v0, axis=1)), 1)\n    >>> numpy.allclose(v1, v2)\n    True\n    >>> v1 = numpy.empty((5, 4, 3))\n    >>> unit_vector(v0, axis=1, out=v1)\n    >>> numpy.allclose(v1, v2)\n    True\n    >>> list(unit_vector([]))\n    []\n    >>> list(unit_vector([1]))\n    [1.0]\n\n    \"\"\"", "\n", "if", "out", "is", "None", ":", "\n", "        ", "data", "=", "numpy", ".", "array", "(", "data", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "if", "data", ".", "ndim", "==", "1", ":", "\n", "            ", "data", "/=", "math", ".", "sqrt", "(", "numpy", ".", "dot", "(", "data", ",", "data", ")", ")", "\n", "return", "data", "\n", "", "", "else", ":", "\n", "        ", "if", "out", "is", "not", "data", ":", "\n", "            ", "out", "[", ":", "]", "=", "numpy", ".", "array", "(", "data", ",", "copy", "=", "False", ")", "\n", "", "data", "=", "out", "\n", "", "length", "=", "numpy", ".", "atleast_1d", "(", "numpy", ".", "sum", "(", "data", "*", "data", ",", "axis", ")", ")", "\n", "numpy", ".", "sqrt", "(", "length", ",", "length", ")", "\n", "if", "axis", "is", "not", "None", ":", "\n", "        ", "length", "=", "numpy", ".", "expand_dims", "(", "length", ",", "axis", ")", "\n", "", "data", "/=", "length", "\n", "if", "out", "is", "None", ":", "\n", "        ", "return", "data", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.random_vector": [[1791, 1804], ["numpy.random.random"], "function", ["None"], ["", "", "def", "random_vector", "(", "size", ")", ":", "\n", "    ", "\"\"\"Return array of random doubles in the half-open interval [0.0, 1.0).\n\n    >>> v = random_vector(10000)\n    >>> numpy.all(v >= 0) and numpy.all(v < 1)\n    True\n    >>> v0 = random_vector(10)\n    >>> v1 = random_vector(10)\n    >>> numpy.any(v0 == v1)\n    False\n\n    \"\"\"", "\n", "return", "numpy", ".", "random", ".", "random", "(", "size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.vector_product": [[1806, 1825], ["numpy.cross"], "function", ["None"], ["", "def", "vector_product", "(", "v0", ",", "v1", ",", "axis", "=", "0", ")", ":", "\n", "    ", "\"\"\"Return vector perpendicular to vectors.\n\n    >>> v = vector_product([2, 0, 0], [0, 3, 0])\n    >>> numpy.allclose(v, [0, 0, 6])\n    True\n    >>> v0 = [[2, 0, 0, 2], [0, 2, 0, 2], [0, 0, 2, 2]]\n    >>> v1 = [[3], [0], [0]]\n    >>> v = vector_product(v0, v1)\n    >>> numpy.allclose(v, [[0, 0, 0, 0], [0, 0, 6, 6], [0, -6, 0, -6]])\n    True\n    >>> v0 = [[2, 0, 0], [2, 0, 0], [0, 2, 0], [2, 0, 0]]\n    >>> v1 = [[0, 3, 0], [0, 0, 3], [0, 0, 3], [3, 3, 3]]\n    >>> v = vector_product(v0, v1, axis=1)\n    >>> numpy.allclose(v, [[0, 0, 6], [0, -6, 0], [6, 0, 0], [0, -6, 6]])\n    True\n\n    \"\"\"", "\n", "return", "numpy", ".", "cross", "(", "v0", ",", "v1", ",", "axis", "=", "axis", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.angle_between_vectors": [[1827, 1857], ["numpy.array", "numpy.array", "numpy.sum", "numpy.clip", "numpy.arccos", "transformations.vector_norm", "transformations.vector_norm", "numpy.fabs"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.vector_norm", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.vector_norm"], ["", "def", "angle_between_vectors", "(", "v0", ",", "v1", ",", "directed", "=", "True", ",", "axis", "=", "0", ")", ":", "\n", "    ", "\"\"\"Return angle between vectors.\n\n    If directed is False, the input vectors are interpreted as undirected axes,\n    i.e. the maximum angle is pi/2.\n\n    >>> a = angle_between_vectors([1, -2, 3], [-1, 2, -3])\n    >>> numpy.allclose(a, math.pi)\n    True\n    >>> a = angle_between_vectors([1, -2, 3], [-1, 2, -3], directed=False)\n    >>> numpy.allclose(a, 0)\n    True\n    >>> v0 = [[2, 0, 0, 2], [0, 2, 0, 2], [0, 0, 2, 2]]\n    >>> v1 = [[3], [0], [0]]\n    >>> a = angle_between_vectors(v0, v1)\n    >>> numpy.allclose(a, [0, 1.5708, 1.5708, 0.95532])\n    True\n    >>> v0 = [[2, 0, 0], [2, 0, 0], [0, 2, 0], [2, 0, 0]]\n    >>> v1 = [[0, 3, 0], [0, 0, 3], [0, 0, 3], [3, 3, 3]]\n    >>> a = angle_between_vectors(v0, v1, axis=1)\n    >>> numpy.allclose(a, [1.5708, 1.5708, 1.5708, 0.95532])\n    True\n\n    \"\"\"", "\n", "v0", "=", "numpy", ".", "array", "(", "v0", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "v1", "=", "numpy", ".", "array", "(", "v1", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "False", ")", "\n", "dot", "=", "numpy", ".", "sum", "(", "v0", "*", "v1", ",", "axis", "=", "axis", ")", "\n", "dot", "/=", "vector_norm", "(", "v0", ",", "axis", "=", "axis", ")", "*", "vector_norm", "(", "v1", ",", "axis", "=", "axis", ")", "\n", "dot", "=", "numpy", ".", "clip", "(", "dot", ",", "-", "1.0", ",", "1.0", ")", "\n", "return", "numpy", ".", "arccos", "(", "dot", "if", "directed", "else", "numpy", ".", "fabs", "(", "dot", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.inverse_matrix": [[1859, 1873], ["numpy.linalg.inv"], "function", ["None"], ["", "def", "inverse_matrix", "(", "matrix", ")", ":", "\n", "    ", "\"\"\"Return inverse of square transformation matrix.\n\n    >>> M0 = random_rotation_matrix()\n    >>> M1 = inverse_matrix(M0.T)\n    >>> numpy.allclose(M1, numpy.linalg.inv(M0.T))\n    True\n    >>> for size in range(1, 7):\n    ...     M0 = numpy.random.rand(size, size)\n    ...     M1 = inverse_matrix(M0)\n    ...     if not numpy.allclose(M1, numpy.linalg.inv(M0)): print(size)\n\n    \"\"\"", "\n", "return", "numpy", ".", "linalg", ".", "inv", "(", "matrix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.concatenate_matrices": [[1875, 1889], ["numpy.identity", "numpy.dot"], "function", ["None"], ["", "def", "concatenate_matrices", "(", "*", "matrices", ")", ":", "\n", "    ", "\"\"\"Return concatenation of series of transformation matrices.\n\n    >>> M = numpy.random.rand(16).reshape((4, 4)) - 0.5\n    >>> numpy.allclose(M, concatenate_matrices(M))\n    True\n    >>> numpy.allclose(numpy.dot(M, M.T), concatenate_matrices(M, M.T))\n    True\n\n    \"\"\"", "\n", "M", "=", "numpy", ".", "identity", "(", "4", ")", "\n", "for", "i", "in", "matrices", ":", "\n", "        ", "M", "=", "numpy", ".", "dot", "(", "M", ",", "i", ")", "\n", "", "return", "M", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.is_same_transform": [[1891, 1905], ["numpy.array", "numpy.array", "numpy.allclose"], "function", ["None"], ["", "def", "is_same_transform", "(", "matrix0", ",", "matrix1", ")", ":", "\n", "    ", "\"\"\"Return True if two matrices perform same transformation.\n\n    >>> is_same_transform(numpy.identity(4), numpy.identity(4))\n    True\n    >>> is_same_transform(numpy.identity(4), random_rotation_matrix())\n    False\n\n    \"\"\"", "\n", "matrix0", "=", "numpy", ".", "array", "(", "matrix0", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "matrix0", "/=", "matrix0", "[", "3", ",", "3", "]", "\n", "matrix1", "=", "numpy", ".", "array", "(", "matrix1", ",", "dtype", "=", "numpy", ".", "float64", ",", "copy", "=", "True", ")", "\n", "matrix1", "/=", "matrix1", "[", "3", ",", "3", "]", "\n", "return", "numpy", ".", "allclose", "(", "matrix0", ",", "matrix1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.is_same_quaternion": [[1907, 1912], ["numpy.array", "numpy.array", "numpy.allclose", "numpy.allclose"], "function", ["None"], ["", "def", "is_same_quaternion", "(", "q0", ",", "q1", ")", ":", "\n", "    ", "\"\"\"Return True if two quaternions are equal.\"\"\"", "\n", "q0", "=", "numpy", ".", "array", "(", "q0", ")", "\n", "q1", "=", "numpy", ".", "array", "(", "q1", ")", "\n", "return", "numpy", ".", "allclose", "(", "q0", ",", "q1", ")", "or", "numpy", ".", "allclose", "(", "q0", ",", "-", "q1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations._import_module": [[1914, 1944], ["dir", "import_module", "import_module", "getattr", "warnings.warn", "attr.startswith", "globals", "globals", "globals", "globals", "warnings.warn"], "function", ["None"], ["", "def", "_import_module", "(", "name", ",", "package", "=", "None", ",", "warn", "=", "True", ",", "prefix", "=", "'_py_'", ",", "ignore", "=", "'_'", ")", ":", "\n", "    ", "\"\"\"Try import all public attributes from module into global namespace.\n\n    Existing attributes with name clashes are renamed with prefix.\n    Attributes starting with underscore are ignored by default.\n\n    Return True on successful import.\n\n    \"\"\"", "\n", "import", "warnings", "\n", "from", "importlib", "import", "import_module", "\n", "try", ":", "\n", "        ", "if", "not", "package", ":", "\n", "            ", "module", "=", "import_module", "(", "name", ")", "\n", "", "else", ":", "\n", "            ", "module", "=", "import_module", "(", "'.'", "+", "name", ",", "package", "=", "package", ")", "\n", "", "", "except", "ImportError", ":", "\n", "        ", "if", "warn", ":", "\n", "            ", "warnings", ".", "warn", "(", "'failed to import module %s'", "%", "name", ")", "\n", "", "", "else", ":", "\n", "        ", "for", "attr", "in", "dir", "(", "module", ")", ":", "\n", "            ", "if", "ignore", "and", "attr", ".", "startswith", "(", "ignore", ")", ":", "\n", "                ", "continue", "\n", "", "if", "prefix", ":", "\n", "                ", "if", "attr", "in", "globals", "(", ")", ":", "\n", "                    ", "globals", "(", ")", "[", "prefix", "+", "attr", "]", "=", "globals", "(", ")", "[", "attr", "]", "\n", "", "elif", "warn", ":", "\n", "                    ", "warnings", ".", "warn", "(", "'no Python implementation of '", "+", "attr", ")", "\n", "", "", "globals", "(", ")", "[", "attr", "]", "=", "getattr", "(", "module", ",", "attr", ")", "\n", "", "return", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.outliers.reject_outliers": [[24, 27], ["outliers.mask_outliers"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.outliers.mask_outliers"], ["def", "reject_outliers", "(", "data", ",", "m", "=", "2.", ")", ":", "\n", "    ", "mask", "=", "mask_outliers", "(", "data", ",", "m", ")", "\n", "return", "data", "[", "mask", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.outliers.mask_outliers": [[29, 34], ["numpy.abs", "numpy.median", "numpy.median"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.abs"], ["", "def", "mask_outliers", "(", "data", ",", "m", ")", ":", "\n", "    ", "d", "=", "np", ".", "abs", "(", "data", "-", "np", ".", "median", "(", "data", ")", ")", "\n", "mdev", "=", "np", ".", "median", "(", "d", ")", "\n", "s", "=", "d", "/", "mdev", "if", "mdev", "else", "0.", "\n", "return", "s", "<", "m", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.outliers.print_points": [[37, 45], ["matplotlib.subplot", "matplotlib.plot", "matplotlib.subplot", "matplotlib.plot", "matplotlib.subplot", "matplotlib.plot", "matplotlib.show"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.test.plot_traj.plot", "home.repos.pwc.inspect_result.CIFASIS_wganvo.test.plot_traj.plot", "home.repos.pwc.inspect_result.CIFASIS_wganvo.test.plot_traj.plot", "home.repos.pwc.inspect_result.CIFASIS_wganvo.test.show_clip.show"], ["", "def", "print_points", "(", "data", ")", ":", "\n", "    ", "plt", ".", "subplot", "(", "131", ")", "\n", "plt", ".", "plot", "(", "data", "[", ":", ",", "0", ",", ":", "]", ")", "\n", "plt", ".", "subplot", "(", "132", ")", "\n", "plt", ".", "plot", "(", "data", "[", ":", ",", "1", ",", ":", "]", ")", "\n", "plt", ".", "subplot", "(", "133", ")", "\n", "plt", ".", "plot", "(", "data", "[", ":", ",", "2", ",", ":", "]", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.outliers.load": [[47, 49], ["numpy.load"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.tflib.cifar10.load"], ["", "def", "load", "(", "path", ")", ":", "\n", "    ", "return", "np", ".", "load", "(", "path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.lie_algebra.hat": [[50, 58], ["numpy.array"], "function", ["None"], ["", "def", "hat", "(", "v", ")", ":", "\n", "    ", "\"\"\"\n    :param v: 3x1 vector\n    :return: 3x3 skew symmetric matrix\n    \"\"\"", "\n", "return", "np", ".", "array", "(", "[", "[", "0.0", ",", "-", "v", "[", "2", "]", ",", "v", "[", "1", "]", "]", ",", "\n", "[", "v", "[", "2", "]", ",", "0.0", ",", "-", "v", "[", "0", "]", "]", ",", "\n", "[", "-", "v", "[", "1", "]", ",", "v", "[", "0", "]", ",", "0.0", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.lie_algebra.vee": [[60, 66], ["numpy.array"], "function", ["None"], ["", "def", "vee", "(", "m", ")", ":", "\n", "    ", "\"\"\"\n    :param m: 3x3 skew symmetric matrix\n    :return: 3x1 vector\n    \"\"\"", "\n", "return", "np", ".", "array", "(", "[", "-", "m", "[", "1", ",", "2", "]", ",", "m", "[", "0", ",", "2", "]", ",", "-", "m", "[", "0", ",", "1", "]", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.lie_algebra.so3_exp": [[68, 77], ["scipy.expm", "numpy.cross", "numpy.eye", "numpy.linalg.norm"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.norm"], ["", "def", "so3_exp", "(", "axis", ",", "angle", ")", ":", "\n", "    ", "\"\"\"\n    Computes an SO(3) matrix from an axis/angle representation.\n    Code source: http://stackoverflow.com/a/25709323\n    :param axis: 3x1 rotation axis (unit vector!)\n    :param angle: radians\n    :return: SO(3) rotation matrix (matrix exponential of so(3))\n    \"\"\"", "\n", "return", "sl", ".", "expm", "(", "np", ".", "cross", "(", "np", ".", "eye", "(", "3", ")", ",", "axis", "/", "np", ".", "linalg", ".", "norm", "(", "axis", ")", "*", "angle", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.lie_algebra.so3_log": [[79, 97], ["transformations.rotation_from_matrix", "lie_algebra.is_so3", "lie_algebra.LieAlgebraException", "numpy.arccos", "lie_algebra.se3", "lie_algebra.hat", "min", "max", "numpy.trace"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.rotation_from_matrix", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.lie_algebra.is_so3", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.lie_algebra.se3", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.lie_algebra.hat"], ["", "def", "so3_log", "(", "r", ",", "return_angle_only", "=", "True", ",", "return_skew", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    :param r: SO(3) rotation matrix\n    :param return_angle_only: return only the angle (default)\n    :param return_skew: return skew symmetric Lie algebra element\n    :return: axis/angle\n        or if skew:\n             3x3 skew symmetric logarithmic map in so(3) (Ma, Soatto eq. 2.8)\n    \"\"\"", "\n", "if", "not", "is_so3", "(", "r", ")", ":", "\n", "        ", "raise", "LieAlgebraException", "(", "\"matrix is not a valid SO(3) group element\"", ")", "\n", "", "if", "return_angle_only", "and", "not", "return_skew", ":", "\n", "        ", "return", "np", ".", "arccos", "(", "min", "(", "1", ",", "max", "(", "-", "1", ",", "(", "np", ".", "trace", "(", "r", ")", "-", "1", ")", "/", "2", ")", ")", ")", "\n", "", "angle", ",", "axis", ",", "_", "=", "tr", ".", "rotation_from_matrix", "(", "se3", "(", "r", ",", "[", "0", ",", "0", ",", "0", "]", ")", ")", "\n", "if", "return_skew", ":", "\n", "        ", "return", "hat", "(", "axis", "*", "angle", ")", "\n", "", "else", ":", "\n", "        ", "return", "axis", ",", "angle", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.lie_algebra.se3": [[99, 109], ["numpy.eye", "numpy.array", "numpy.eye"], "function", ["None"], ["", "", "def", "se3", "(", "r", "=", "np", ".", "eye", "(", "3", ")", ",", "t", "=", "np", ".", "array", "(", "[", "0", ",", "0", ",", "0", "]", ")", ")", ":", "\n", "    ", "\"\"\"\n    :param r: SO(3) rotation matrix\n    :param t: 3x1 translation vector\n    :return: SE(3) transformation matrix\n    \"\"\"", "\n", "se3", "=", "np", ".", "eye", "(", "4", ")", "\n", "se3", "[", ":", "3", ",", ":", "3", "]", "=", "r", "\n", "se3", "[", ":", "3", ",", "3", "]", "=", "t", "\n", "return", "se3", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.lie_algebra.sim3": [[111, 122], ["numpy.eye"], "function", ["None"], ["", "def", "sim3", "(", "r", ",", "t", ",", "s", ")", ":", "\n", "    ", "\"\"\"\n    :param r: SO(3) rotation matrix\n    :param t: 3x1 translation vector\n    :param s: positive, non-zero scale factor\n    :return: Sim(3) similarity transformation matrix\n    \"\"\"", "\n", "sim3", "=", "np", ".", "eye", "(", "4", ")", "\n", "sim3", "[", ":", "3", ",", ":", "3", "]", "=", "s", "*", "r", "\n", "sim3", "[", ":", "3", ",", "3", "]", "=", "t", "\n", "return", "sim3", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.lie_algebra.so3_from_se3": [[124, 130], ["None"], "function", ["None"], ["", "def", "so3_from_se3", "(", "p", ")", ":", "\n", "    ", "\"\"\"\n    :param p: absolute SE(3) pose\n    :return: the SO(3) rotation matrix in p\n    \"\"\"", "\n", "return", "p", "[", ":", "3", ",", ":", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.lie_algebra.se3_inverse": [[132, 140], ["p[].transpose", "lie_algebra.se3", "p[].transpose.dot"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.lie_algebra.se3"], ["", "def", "se3_inverse", "(", "p", ")", ":", "\n", "    ", "\"\"\"\n    :param p: absolute SE(3) pose\n    :return: the inverted pose\n    \"\"\"", "\n", "r_inv", "=", "p", "[", ":", "3", ",", ":", "3", "]", ".", "transpose", "(", ")", "\n", "t_inv", "=", "-", "r_inv", ".", "dot", "(", "p", "[", ":", "3", ",", "3", "]", ")", "\n", "return", "se3", "(", "r_inv", ",", "t_inv", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.lie_algebra.is_so3": [[142, 152], ["numpy.isclose", "numpy.allclose", "numpy.linalg.det", "r.transpose().dot", "numpy.eye", "r.transpose"], "function", ["None"], ["", "def", "is_so3", "(", "r", ")", ":", "\n", "    ", "\"\"\"\n    :param r: a 3x3 matrix\n    :return: True if r is in the SO(3) group\n    \"\"\"", "\n", "# Check the determinant.", "\n", "det_valid", "=", "np", ".", "isclose", "(", "np", ".", "linalg", ".", "det", "(", "r", ")", ",", "[", "1.0", "]", ",", "atol", "=", "1e-6", ")", "\n", "# Check if the transpose is the inverse.", "\n", "inv_valid", "=", "np", ".", "allclose", "(", "r", ".", "transpose", "(", ")", ".", "dot", "(", "r", ")", ",", "np", ".", "eye", "(", "3", ")", ",", "atol", "=", "1e-6", ")", "\n", "return", "det_valid", "and", "inv_valid", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.lie_algebra.is_se3": [[154, 162], ["lie_algebra.is_so3", "numpy.equal().all", "numpy.equal", "numpy.array"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.lie_algebra.is_so3"], ["", "def", "is_se3", "(", "p", ")", ":", "\n", "    ", "\"\"\"\n    :param p: a 4x4 matrix\n    :return: True if p is in the SE(3) group\n    \"\"\"", "\n", "rot_valid", "=", "is_so3", "(", "p", "[", ":", "3", ",", ":", "3", "]", ")", "\n", "lower_valid", "=", "np", ".", "equal", "(", "p", "[", "3", ",", ":", "]", ",", "np", ".", "array", "(", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", ")", ")", ".", "all", "(", ")", "\n", "return", "rot_valid", "and", "lower_valid", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.lie_algebra.is_sim3": [[164, 175], ["numpy.multiply", "lie_algebra.is_so3", "numpy.equal().all", "numpy.equal", "numpy.array"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.lie_algebra.is_so3"], ["", "def", "is_sim3", "(", "p", ",", "s", ")", ":", "\n", "    ", "\"\"\"\n    :param p: a 4x4 matrix\n    :param s: expected scale factor\n    :return: True if p is in the Sim(3) group with scale s\n    \"\"\"", "\n", "rot", "=", "p", "[", ":", "3", ",", ":", "3", "]", "\n", "rot_unscaled", "=", "np", ".", "multiply", "(", "rot", ",", "1.0", "/", "s", ")", "\n", "rot_valid", "=", "is_so3", "(", "rot_unscaled", ")", "\n", "lower_valid", "=", "np", ".", "equal", "(", "p", "[", "3", ",", ":", "]", ",", "np", ".", "array", "(", "[", "0.0", ",", "0.0", ",", "0.0", ",", "1.0", "]", ")", ")", ".", "all", "(", ")", "\n", "return", "rot_valid", "and", "lower_valid", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.lie_algebra.relative_so3": [[177, 183], ["numpy.dot", "r1.transpose"], "function", ["None"], ["", "def", "relative_so3", "(", "r1", ",", "r2", ")", ":", "\n", "    ", "\"\"\"\n    :param r1, r2: SO(3) matrices\n    :return: the relative rotation r1^{\u207b1} * r2\n    \"\"\"", "\n", "return", "np", ".", "dot", "(", "r1", ".", "transpose", "(", ")", ",", "r2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.lie_algebra.relative_se3": [[185, 191], ["numpy.dot", "lie_algebra.se3_inverse"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.lie_algebra.se3_inverse"], ["", "def", "relative_se3", "(", "p1", ",", "p2", ")", ":", "\n", "    ", "\"\"\"\n    :param p1, p2: SE(3) matrices\n    :return: the relative transformation p1^{\u207b1} * p2\n    \"\"\"", "\n", "return", "np", ".", "dot", "(", "se3_inverse", "(", "p1", ")", ",", "p2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.lie_algebra.random_so3": [[193, 198], ["transformations.random_rotation_matrix"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.random_rotation_matrix"], ["", "def", "random_so3", "(", ")", ":", "\n", "    ", "\"\"\"\n    :return: a random SO(3) matrix (for debugging)\n    \"\"\"", "\n", "return", "tr", ".", "random_rotation_matrix", "(", ")", "[", ":", "3", ",", ":", "3", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.lie_algebra.random_se3": [[200, 207], ["lie_algebra.random_so3", "transformations.random_vector", "lie_algebra.se3"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.lie_algebra.random_so3", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.random_vector", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.lie_algebra.se3"], ["", "def", "random_se3", "(", ")", ":", "\n", "    ", "\"\"\"\n    :return: a random SE(3) matrix (for debugging)\n    \"\"\"", "\n", "r", "=", "random_so3", "(", ")", "\n", "t", "=", "tr", ".", "random_vector", "(", "3", ")", "\n", "return", "se3", "(", "r", ",", "t", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.interpolate_poses.interpolate_vo_poses": [[37, 76], ["interpolate_poses.interpolate_poses", "open", "csv.reader", "next", "min", "max", "numpy.identity", "min", "max", "int", "vo_timestamps.append", "transform.build_se3_transform", "abs_poses.append", "float"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.interpolate_poses.interpolate_poses", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.Arcball.next", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transform.build_se3_transform"], ["def", "interpolate_vo_poses", "(", "vo_path", ",", "pose_timestamps", ",", "origin_timestamp", ")", ":", "\n", "    ", "\"\"\"Interpolate poses from visual odometry.\n\n    Args:\n        vo_path (str): path to file containing relative poses from visual odometry.\n        pose_timestamps (list[int]): UNIX timestamps at which interpolated poses are required.\n        origin_timestamp (int): UNIX timestamp of origin frame. Poses will be reported relative to this frame.\n\n    Returns:\n        list[numpy.matrixlib.defmatrix.matrix]: SE3 matrix representing interpolated pose for each requested timestamp.\n\n    \"\"\"", "\n", "with", "open", "(", "vo_path", ")", "as", "vo_file", ":", "\n", "        ", "vo_reader", "=", "csv", ".", "reader", "(", "vo_file", ")", "\n", "headers", "=", "next", "(", "vo_file", ")", "\n", "\n", "vo_timestamps", "=", "[", "0", "]", "\n", "abs_poses", "=", "[", "ml", ".", "identity", "(", "4", ")", "]", "\n", "\n", "lower_timestamp", "=", "min", "(", "min", "(", "pose_timestamps", ")", ",", "origin_timestamp", ")", "\n", "upper_timestamp", "=", "max", "(", "max", "(", "pose_timestamps", ")", ",", "origin_timestamp", ")", "\n", "\n", "for", "row", "in", "vo_reader", ":", "\n", "            ", "timestamp", "=", "int", "(", "row", "[", "0", "]", ")", "\n", "if", "timestamp", "<", "lower_timestamp", ":", "\n", "                ", "vo_timestamps", "[", "0", "]", "=", "timestamp", "\n", "continue", "\n", "\n", "", "vo_timestamps", ".", "append", "(", "timestamp", ")", "\n", "\n", "xyzrpy", "=", "[", "float", "(", "v", ")", "for", "v", "in", "row", "[", "2", ":", "8", "]", "]", "\n", "rel_pose", "=", "build_se3_transform", "(", "xyzrpy", ")", "\n", "abs_pose", "=", "abs_poses", "[", "-", "1", "]", "*", "rel_pose", "\n", "abs_poses", ".", "append", "(", "abs_pose", ")", "\n", "\n", "if", "timestamp", ">=", "upper_timestamp", ":", "\n", "                ", "break", "\n", "\n", "", "", "", "return", "interpolate_poses", "(", "vo_timestamps", ",", "abs_poses", ",", "pose_timestamps", ",", "origin_timestamp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.interpolate_poses.interpolate_ins_poses": [[78, 114], ["interpolate_poses.interpolate_poses", "open", "csv.reader", "next", "max", "numpy.identity", "max", "int", "ins_timestamps.append", "transform.build_se3_transform", "abs_poses.append", "float"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.interpolate_poses.interpolate_poses", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.Arcball.next", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transform.build_se3_transform"], ["", "def", "interpolate_ins_poses", "(", "ins_path", ",", "pose_timestamps", ",", "origin_timestamp", ")", ":", "\n", "    ", "\"\"\"Interpolate poses from INS.\n\n    Args:\n        ins_path (str): path to file containing poses from INS.\n        pose_timestamps (list[int]): UNIX timestamps at which interpolated poses are required.\n        origin_timestamp (int): UNIX timestamp of origin frame. Poses will be reported relative to this frame.\n\n    Returns:\n        list[numpy.matrixlib.defmatrix.matrix]: SE3 matrix representing interpolated pose for each requested timestamp.\n\n    \"\"\"", "\n", "with", "open", "(", "ins_path", ")", "as", "ins_file", ":", "\n", "        ", "ins_reader", "=", "csv", ".", "reader", "(", "ins_file", ")", "\n", "headers", "=", "next", "(", "ins_file", ")", "\n", "\n", "ins_timestamps", "=", "[", "0", "]", "\n", "abs_poses", "=", "[", "ml", ".", "identity", "(", "4", ")", "]", "\n", "\n", "upper_timestamp", "=", "max", "(", "max", "(", "pose_timestamps", ")", ",", "origin_timestamp", ")", "\n", "\n", "for", "row", "in", "ins_reader", ":", "\n", "            ", "timestamp", "=", "int", "(", "row", "[", "0", "]", ")", "\n", "ins_timestamps", ".", "append", "(", "timestamp", ")", "\n", "\n", "xyzrpy", "=", "[", "float", "(", "v", ")", "for", "v", "in", "row", "[", "2", ":", "8", "]", "]", "\n", "abs_pose", "=", "build_se3_transform", "(", "xyzrpy", ")", "\n", "abs_poses", ".", "append", "(", "abs_pose", ")", "\n", "\n", "if", "timestamp", ">=", "upper_timestamp", ":", "\n", "                ", "break", "\n", "\n", "", "", "", "ins_timestamps", "=", "ins_timestamps", "[", "1", ":", "]", "\n", "abs_poses", "=", "abs_poses", "[", "1", ":", "]", "\n", "\n", "return", "interpolate_poses", "(", "ins_timestamps", ",", "abs_poses", ",", "pose_timestamps", ",", "origin_timestamp", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.interpolate_poses.interpolate_poses": [[116, 224], ["np.array.insert", "numpy.array", "numpy.array", "numpy.zeros", "numpy.zeros", "enumerate", "numpy.nonzero", "numpy.nonzero", "numpy.zeros", "numpy.zeros", "numpy.arccos", "numpy.nonzero", "numpy.zeros", "numpy.linalg.solve", "range", "len", "len", "ValueError", "transform.so3_to_quaternion", "numpy.ravel", "bisect.bisect", "max", "len", "numpy.abs", "numpy.sin", "numpy.sin", "numpy.sin", "numpy.sin", "numpy.multiply", "numpy.multiply", "len", "len", "len", "ValueError", "min", "numpy.tile", "numpy.tile", "numpy.tile", "numpy.tile", "numpy.square", "numpy.multiply", "numpy.multiply", "numpy.multiply", "numpy.multiply", "numpy.multiply", "numpy.multiply", "numpy.square", "numpy.multiply", "numpy.multiply", "numpy.multiply", "numpy.multiply", "numpy.multiply", "numpy.multiply", "numpy.square", "len", "len", "numpy.square", "numpy.square", "numpy.square", "len"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transform.so3_to_quaternion", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.abs"], ["", "def", "interpolate_poses", "(", "pose_timestamps", ",", "abs_poses", ",", "requested_timestamps", ",", "origin_timestamp", ")", ":", "\n", "    ", "\"\"\"Interpolate between absolute poses.\n\n    Args:\n        pose_timestamps (list[int]): Timestamps of supplied poses. Must be in ascending order.\n        abs_poses (list[numpy.matrixlib.defmatrix.matrix]): SE3 matrices representing poses at the timestamps specified.\n        requested_timestamps (list[int]): Timestamps for which interpolated timestamps are required.\n        origin_timestamp (int): UNIX timestamp of origin frame. Poses will be reported relative to this frame.\n\n    Returns:\n        list[numpy.matrixlib.defmatrix.matrix]: SE3 matrix representing interpolated pose for each requested timestamp.\n\n    Raises:\n        ValueError: if pose_timestamps and abs_poses are not the same length\n        ValueError: if pose_timestamps is not in ascending order\n\n    \"\"\"", "\n", "requested_timestamps", ".", "insert", "(", "0", ",", "origin_timestamp", ")", "\n", "requested_timestamps", "=", "np", ".", "array", "(", "requested_timestamps", ")", "\n", "pose_timestamps", "=", "np", ".", "array", "(", "pose_timestamps", ")", "\n", "\n", "if", "len", "(", "pose_timestamps", ")", "!=", "len", "(", "abs_poses", ")", ":", "\n", "        ", "raise", "ValueError", "(", "'Must supply same number of timestamps as poses'", ")", "\n", "\n", "", "abs_quaternions", "=", "np", ".", "zeros", "(", "(", "4", ",", "len", "(", "abs_poses", ")", ")", ")", "\n", "abs_positions", "=", "np", ".", "zeros", "(", "(", "3", ",", "len", "(", "abs_poses", ")", ")", ")", "\n", "for", "i", ",", "pose", "in", "enumerate", "(", "abs_poses", ")", ":", "\n", "        ", "if", "i", ">", "0", "and", "pose_timestamps", "[", "i", "-", "1", "]", ">=", "pose_timestamps", "[", "i", "]", ":", "\n", "            ", "raise", "ValueError", "(", "'Pose timestamps must be in ascending order'", ")", "\n", "\n", "", "abs_quaternions", "[", ":", ",", "i", "]", "=", "so3_to_quaternion", "(", "pose", "[", "0", ":", "3", ",", "0", ":", "3", "]", ")", "\n", "abs_positions", "[", ":", ",", "i", "]", "=", "np", ".", "ravel", "(", "pose", "[", "0", ":", "3", ",", "3", "]", ")", "\n", "\n", "", "upper_indices", "=", "[", "bisect", ".", "bisect", "(", "pose_timestamps", ",", "pt", ")", "for", "pt", "in", "requested_timestamps", "]", "\n", "lower_indices", "=", "[", "u", "-", "1", "for", "u", "in", "upper_indices", "]", "\n", "\n", "if", "max", "(", "upper_indices", ")", ">=", "len", "(", "pose_timestamps", ")", ":", "\n", "        ", "upper_indices", "=", "[", "min", "(", "i", ",", "len", "(", "pose_timestamps", ")", "-", "1", ")", "for", "i", "in", "upper_indices", "]", "\n", "\n", "", "fractions", "=", "(", "requested_timestamps", "-", "pose_timestamps", "[", "lower_indices", "]", ")", "/", "(", "pose_timestamps", "[", "upper_indices", "]", "-", "pose_timestamps", "[", "lower_indices", "]", ")", "\n", "\n", "quaternions_lower", "=", "abs_quaternions", "[", ":", ",", "lower_indices", "]", "\n", "quaternions_upper", "=", "abs_quaternions", "[", ":", ",", "upper_indices", "]", "\n", "\n", "d_array", "=", "(", "quaternions_lower", "*", "quaternions_upper", ")", ".", "sum", "(", "0", ")", "\n", "\n", "linear_interp_indices", "=", "np", ".", "nonzero", "(", "d_array", ">=", "1", ")", "\n", "sin_interp_indices", "=", "np", ".", "nonzero", "(", "d_array", "<", "1", ")", "\n", "\n", "scale0_array", "=", "np", ".", "zeros", "(", "d_array", ".", "shape", ")", "\n", "scale1_array", "=", "np", ".", "zeros", "(", "d_array", ".", "shape", ")", "\n", "\n", "scale0_array", "[", "linear_interp_indices", "]", "=", "1", "-", "fractions", "[", "linear_interp_indices", "]", "\n", "scale1_array", "[", "linear_interp_indices", "]", "=", "fractions", "[", "linear_interp_indices", "]", "\n", "\n", "theta_array", "=", "np", ".", "arccos", "(", "np", ".", "abs", "(", "d_array", "[", "sin_interp_indices", "]", ")", ")", "\n", "\n", "scale0_array", "[", "sin_interp_indices", "]", "=", "np", ".", "sin", "(", "(", "1", "-", "fractions", "[", "sin_interp_indices", "]", ")", "*", "theta_array", ")", "/", "np", ".", "sin", "(", "theta_array", ")", "\n", "scale1_array", "[", "sin_interp_indices", "]", "=", "np", ".", "sin", "(", "fractions", "[", "sin_interp_indices", "]", "*", "theta_array", ")", "/", "np", ".", "sin", "(", "theta_array", ")", "\n", "\n", "negative_d_indices", "=", "np", ".", "nonzero", "(", "d_array", "<", "0", ")", "\n", "scale1_array", "[", "negative_d_indices", "]", "=", "-", "scale1_array", "[", "negative_d_indices", "]", "\n", "\n", "quaternions_interp", "=", "np", ".", "tile", "(", "scale0_array", ",", "(", "4", ",", "1", ")", ")", "*", "quaternions_lower", "+", "np", ".", "tile", "(", "scale1_array", ",", "(", "4", ",", "1", ")", ")", "*", "quaternions_upper", "\n", "\n", "positions_lower", "=", "abs_positions", "[", ":", ",", "lower_indices", "]", "\n", "positions_upper", "=", "abs_positions", "[", ":", ",", "upper_indices", "]", "\n", "\n", "positions_interp", "=", "np", ".", "multiply", "(", "np", ".", "tile", "(", "(", "1", "-", "fractions", ")", ",", "(", "3", ",", "1", ")", ")", ",", "positions_lower", ")", "+", "np", ".", "multiply", "(", "np", ".", "tile", "(", "fractions", ",", "(", "3", ",", "1", ")", ")", ",", "positions_upper", ")", "\n", "\n", "poses_mat", "=", "ml", ".", "zeros", "(", "(", "4", ",", "4", "*", "len", "(", "requested_timestamps", ")", ")", ")", "\n", "\n", "poses_mat", "[", "0", ",", "0", ":", ":", "4", "]", "=", "1", "-", "2", "*", "np", ".", "square", "(", "quaternions_interp", "[", "2", ",", ":", "]", ")", "-", "2", "*", "np", ".", "square", "(", "quaternions_interp", "[", "3", ",", ":", "]", ")", "\n", "poses_mat", "[", "0", ",", "1", ":", ":", "4", "]", "=", "2", "*", "np", ".", "multiply", "(", "quaternions_interp", "[", "1", ",", ":", "]", ",", "quaternions_interp", "[", "2", ",", ":", "]", ")", "-", "2", "*", "np", ".", "multiply", "(", "quaternions_interp", "[", "3", ",", ":", "]", ",", "quaternions_interp", "[", "0", ",", ":", "]", ")", "\n", "poses_mat", "[", "0", ",", "2", ":", ":", "4", "]", "=", "2", "*", "np", ".", "multiply", "(", "quaternions_interp", "[", "1", ",", ":", "]", ",", "quaternions_interp", "[", "3", ",", ":", "]", ")", "+", "2", "*", "np", ".", "multiply", "(", "quaternions_interp", "[", "2", ",", ":", "]", ",", "quaternions_interp", "[", "0", ",", ":", "]", ")", "\n", "\n", "poses_mat", "[", "1", ",", "0", ":", ":", "4", "]", "=", "2", "*", "np", ".", "multiply", "(", "quaternions_interp", "[", "1", ",", ":", "]", ",", "quaternions_interp", "[", "2", ",", ":", "]", ")", "+", "2", "*", "np", ".", "multiply", "(", "quaternions_interp", "[", "3", ",", ":", "]", ",", "quaternions_interp", "[", "0", ",", ":", "]", ")", "\n", "poses_mat", "[", "1", ",", "1", ":", ":", "4", "]", "=", "1", "-", "2", "*", "np", ".", "square", "(", "quaternions_interp", "[", "1", ",", ":", "]", ")", "-", "2", "*", "np", ".", "square", "(", "quaternions_interp", "[", "3", ",", ":", "]", ")", "\n", "poses_mat", "[", "1", ",", "2", ":", ":", "4", "]", "=", "2", "*", "np", ".", "multiply", "(", "quaternions_interp", "[", "2", ",", ":", "]", ",", "quaternions_interp", "[", "3", ",", ":", "]", ")", "-", "2", "*", "np", ".", "multiply", "(", "quaternions_interp", "[", "1", ",", ":", "]", ",", "quaternions_interp", "[", "0", ",", ":", "]", ")", "\n", "\n", "poses_mat", "[", "2", ",", "0", ":", ":", "4", "]", "=", "2", "*", "np", ".", "multiply", "(", "quaternions_interp", "[", "1", ",", ":", "]", ",", "quaternions_interp", "[", "3", ",", ":", "]", ")", "-", "2", "*", "np", ".", "multiply", "(", "quaternions_interp", "[", "2", ",", ":", "]", ",", "quaternions_interp", "[", "0", ",", ":", "]", ")", "\n", "poses_mat", "[", "2", ",", "1", ":", ":", "4", "]", "=", "2", "*", "np", ".", "multiply", "(", "quaternions_interp", "[", "2", ",", ":", "]", ",", "quaternions_interp", "[", "3", ",", ":", "]", ")", "+", "2", "*", "np", ".", "multiply", "(", "quaternions_interp", "[", "1", ",", ":", "]", ",", "quaternions_interp", "[", "0", ",", ":", "]", ")", "\n", "poses_mat", "[", "2", ",", "2", ":", ":", "4", "]", "=", "1", "-", "2", "*", "np", ".", "square", "(", "quaternions_interp", "[", "1", ",", ":", "]", ")", "-", "2", "*", "np", ".", "square", "(", "quaternions_interp", "[", "2", ",", ":", "]", ")", "\n", "\n", "poses_mat", "[", "0", ":", "3", ",", "3", ":", ":", "4", "]", "=", "positions_interp", "\n", "poses_mat", "[", "3", ",", "3", ":", ":", "4", "]", "=", "1", "\n", "\n", "poses_mat", "=", "np", ".", "linalg", ".", "solve", "(", "poses_mat", "[", "0", ":", "4", ",", "0", ":", "4", "]", ",", "poses_mat", ")", "\n", "\n", "poses_out", "=", "[", "0", "]", "*", "(", "len", "(", "requested_timestamps", ")", "-", "1", ")", "\n", "for", "i", "in", "range", "(", "1", ",", "len", "(", "requested_timestamps", ")", ")", ":", "\n", "        ", "poses_out", "[", "i", "-", "1", "]", "=", "poses_mat", "[", "0", ":", "4", ",", "i", "*", "4", ":", "(", "i", "+", "1", ")", "*", "4", "]", "\n", "\n", "", "return", "poses_out", "\n", "", ""]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.__init__": [[204, 228], ["tensorflow.convert_to_tensor", "tfquaternions.Quaternion.validate_type", "tfquaternions.Quaternion.validate_shape"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.validate_type", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.validate_shape"], ["def", "__init__", "(", "self", ",", "wxyz", "=", "(", "1", ",", "0", ",", "0", ",", "0", ")", ",", "dtype", "=", "tf", ".", "float32", ",", "name", "=", "None", ")", ":", "\n", "        ", "\"\"\"The quaternion constructor.\n\n        Args:\n            wxyz: The values for w, x, y, z, a `tf.Tensor` with shape (..., 4).\n                Note that quaternions only support floating point numbers.\n                Defaults to (1.0, 0.0, 0.0, 0.0)\n            dtype: The type used for the quaternion, must be a floating point\n                number, i.e. one of tf.float16, tf.float32, tf.float64.\n            name: An optional name for the tensor.\n\n        Returns:\n            A Quaternion.\n\n        Raises:\n            ValueError, if wxyz is a `tf.Tensor` and the tensors dtype differs\n                from the given dtype.\n            ValueError, if the last dimension of wxyz is not 4.\n            TypeError, if dtype is not a float.\n        \"\"\"", "\n", "self", ".", "_q", "=", "tf", ".", "convert_to_tensor", "(", "wxyz", ",", "dtype", "=", "dtype", ",", "name", "=", "name", ")", "\n", "self", ".", "name", "=", "name", "if", "name", "else", "\"\"", "\n", "self", ".", "validate_type", "(", "self", ".", "_q", ")", "\n", "self", ".", "validate_shape", "(", "self", ".", "_q", ")", "# check that shape is (..., 4)", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.value": [[229, 236], ["None"], "methods", ["None"], ["", "def", "value", "(", "self", ")", ":", "\n", "        ", "\"\"\"The `Tensor` which holds the value of the quaternion.\n\n        Note that this does not return a reference, so you can not alter the\n        quaternion through this.\n        \"\"\"", "\n", "return", "self", ".", "_q", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.eval": [[237, 240], ["tfquaternions.Quaternion._q.eval"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.eval"], ["", "def", "eval", "(", "self", ",", "session", "=", "None", ")", ":", "\n", "        ", "\"\"\"In a session, computes and returns the value of this quaternion.\"\"\"", "\n", "return", "self", ".", "_q", ".", "eval", "(", "session", "=", "session", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion._ref": [[241, 243], ["tfquaternions.Quaternion._q._ref"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion._ref"], ["", "def", "_ref", "(", "self", ")", ":", "\n", "        ", "return", "self", ".", "_q", ".", "_ref", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.dtype": [[244, 248], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "dtype", "(", "self", ")", ":", "\n", "        ", "\"\"\"The `DType` of this quaternion.\"\"\"", "\n", "return", "self", ".", "_q", ".", "dtype", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.op": [[249, 253], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "op", "(", "self", ")", ":", "\n", "        ", "\"\"\"The `Operation` of this quaternion.\"\"\"", "\n", "return", "self", ".", "_q", ".", "op", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.graph": [[254, 258], ["None"], "methods", ["None"], ["", "@", "property", "\n", "def", "graph", "(", "self", ")", ":", "\n", "        ", "\"\"\"The `Graph` of this quaternion.\"\"\"", "\n", "return", "self", ".", "_q", ".", "graph", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.shape": [[259, 267], ["tfquaternions.Quaternion._q.get_shape"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.get_shape"], ["", "@", "property", "\n", "def", "shape", "(", "self", ")", ":", "\n", "        ", "\"\"\"The `TensorShape` of the variable. Is always [..., 4].\n\n        Returns:\n          A `TensorShape`.\n        \"\"\"", "\n", "return", "self", ".", "_q", ".", "get_shape", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.get_shape": [[268, 271], ["None"], "methods", ["None"], ["", "def", "get_shape", "(", "self", ")", ":", "\n", "        ", "\"\"\"An Alias of Quaternion.shape.\"\"\"", "\n", "return", "self", ".", "shape", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion._as_graph_element": [[272, 275], ["None"], "methods", ["None"], ["", "def", "_as_graph_element", "(", "self", ")", ":", "\n", "        ", "\"\"\"Conversion function for Graph.as_graph_element().\"\"\"", "\n", "return", "self", ".", "_q", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.__add__": [[276, 278], ["tfquaternions.Quaternion", "tensorflow.add", "tensorflow.convert_to_tensor"], "methods", ["None"], ["", "def", "__add__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "Quaternion", "(", "tf", ".", "add", "(", "self", ".", "_q", ",", "tf", ".", "convert_to_tensor", "(", "other", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.__radd__": [[279, 281], ["tfquaternions.Quaternion", "tensorflow.add", "tensorflow.convert_to_tensor"], "methods", ["None"], ["", "def", "__radd__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "Quaternion", "(", "tf", ".", "add", "(", "tf", ".", "convert_to_tensor", "(", "other", ")", ",", "self", ".", "_q", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.__sub__": [[282, 284], ["tfquaternions.Quaternion", "tensorflow.subtract", "tensorflow.convert_to_tensor"], "methods", ["None"], ["", "def", "__sub__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "Quaternion", "(", "tf", ".", "subtract", "(", "self", ".", "_q", ",", "tf", ".", "convert_to_tensor", "(", "other", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.__rsub__": [[285, 287], ["tfquaternions.Quaternion", "tensorflow.subtract", "tensorflow.convert_to_tensor"], "methods", ["None"], ["", "def", "__rsub__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "Quaternion", "(", "tf", ".", "subtract", "(", "tf", ".", "convert_to_tensor", "(", "other", ")", ",", "self", ".", "_q", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.__mul__": [[288, 292], ["isinstance", "tfquaternions.Quaternion", "tfquaternions.quaternion_multiply", "tensorflow.multiply", "tensorflow.convert_to_tensor"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.quaternion_multiply"], ["", "def", "__mul__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "isinstance", "(", "other", ",", "Quaternion", ")", ":", "\n", "            ", "return", "quaternion_multiply", "(", "self", ",", "other", ")", "\n", "", "return", "Quaternion", "(", "tf", ".", "multiply", "(", "self", ".", "_q", ",", "tf", ".", "convert_to_tensor", "(", "other", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.__rmul__": [[293, 297], ["tfquaternions.Quaternion", "tensorflow.multiply", "tensorflow.convert_to_tensor"], "methods", ["None"], ["", "def", "__rmul__", "(", "self", ",", "other", ")", ":", "\n", "# This is only called when __mul__ fails, so 'other' can not", "\n", "# be a Quaternion.", "\n", "        ", "return", "Quaternion", "(", "tf", ".", "multiply", "(", "self", ".", "_q", ",", "tf", ".", "convert_to_tensor", "(", "other", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.__div__": [[298, 302], ["isinstance", "tensorflow.divide", "tfquaternions.quaternion_divide", "tensorflow.convert_to_tensor"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.quaternion_divide"], ["", "def", "__div__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "isinstance", "(", "other", ",", "Quaternion", ")", ":", "\n", "            ", "return", "quaternion_divide", "(", "self", ",", "other", ")", "\n", "", "return", "tf", ".", "divide", "(", "self", ".", "_q", ",", "tf", ".", "convert_to_tensor", "(", "other", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.__rdiv__": [[303, 309], ["tensorflow.divide", "isinstance", "tfquaternions.quaternion_divide", "tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor", "tensorflow.convert_to_tensor"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.quaternion_divide"], ["", "def", "__rdiv__", "(", "self", ",", "other", ")", ":", "\n", "        ", "if", "(", "isinstance", "(", "other", ",", "Quaternion", ")", "or", "\n", "tf", ".", "convert_to_tensor", "(", "other", ")", ".", "shape", "==", "(", ")", "or", "\n", "tf", ".", "convert_to_tensor", "(", "other", ")", ".", "shape", "[", "-", "1", "]", "==", "1", ")", ":", "# scalar", "\n", "            ", "return", "quaternion_divide", "(", "other", ",", "self", ")", "\n", "", "return", "tf", ".", "divide", "(", "tf", ".", "convert_to_tensor", "(", "other", ")", ",", "self", ".", "_q", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.__truediv__": [[310, 312], ["tfquaternions.Quaternion.__div__"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.__div__"], ["", "def", "__truediv__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "__div__", "(", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.__rtruediv__": [[313, 315], ["tfquaternions.Quaternion.__rdiv__"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.__rdiv__"], ["", "def", "__rtruediv__", "(", "self", ",", "other", ")", ":", "\n", "        ", "return", "self", ".", "__rdiv__", "(", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.__neg__": [[316, 318], ["tfquaternions.Quaternion"], "methods", ["None"], ["", "def", "__neg__", "(", "self", ")", ":", "\n", "        ", "return", "Quaternion", "(", "-", "1", "*", "self", ".", "_q", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.__lt__": [[320, 322], ["tensorflow.less"], "methods", ["None"], ["", "def", "__lt__", "(", "self", ",", "other", ")", ":", "# <", "\n", "        ", "return", "tf", ".", "less", "(", "self", ".", "_q", ",", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.__le__": [[323, 325], ["tensorflow.less_equal"], "methods", ["None"], ["", "def", "__le__", "(", "self", ",", "other", ")", ":", "# <=", "\n", "        ", "return", "tf", ".", "less_equal", "(", "self", ".", "_q", ",", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.__eq__": [[326, 328], ["tensorflow.equal"], "methods", ["None"], ["", "def", "__eq__", "(", "self", ",", "other", ")", ":", "# ==", "\n", "        ", "return", "tf", ".", "equal", "(", "self", ".", "_q", ",", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.__ne__": [[329, 331], ["tensorflow.not_equal"], "methods", ["None"], ["", "def", "__ne__", "(", "self", ",", "other", ")", ":", "# !=", "\n", "        ", "return", "tf", ".", "not_equal", "(", "self", ".", "_q", ",", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.__gt__": [[332, 334], ["tensorflow.greater"], "methods", ["None"], ["", "def", "__gt__", "(", "self", ",", "other", ")", ":", "# >", "\n", "        ", "return", "tf", ".", "greater", "(", "self", ".", "_q", ",", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.__ge__": [[335, 337], ["tensorflow.greater_equal"], "methods", ["None"], ["", "def", "__ge__", "(", "self", ",", "other", ")", ":", "# >=", "\n", "        ", "return", "tf", ".", "greater_equal", "(", "self", ".", "_q", ",", "other", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.__repr__": [[338, 341], ["tfquaternions.Quaternion._q.__repr__"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.__repr__"], ["", "def", "__repr__", "(", "self", ")", ":", "\n", "        ", "return", "\"<tfq.Quaternion '{}' ({})>\"", ".", "format", "(", "self", ".", "name", ",", "\n", "self", ".", "_q", ".", "__repr__", "(", ")", "[", "1", ":", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.conjugate": [[342, 346], ["tfquaternions.quaternion_conjugate"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.quaternion_conjugate"], ["", "@", "scope_wrapper", "\n", "def", "conjugate", "(", "self", ")", ":", "\n", "        ", "\"\"\"Compute the conjugate of self.q, i.e. [w, -x, -y, -z].\"\"\"", "\n", "return", "quaternion_conjugate", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.conj": [[347, 353], ["tfquaternions.quaternion_conjugate"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.quaternion_conjugate"], ["", "def", "conj", "(", "self", ")", ":", "\n", "        ", "\"\"\"Compute the conjugate of self.q, i.e. [w, -x, -y, -z].\n\n        Alias for Quaternion.conjugate().\n        \"\"\"", "\n", "return", "quaternion_conjugate", "(", "self", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.inverse": [[354, 358], ["tfquaternions.Quaternion", "tensorflow.convert_to_tensor", "tfquaternions.Quaternion.norm", "tfquaternions.Quaternion.conjugate"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.norm", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.conjugate"], ["", "@", "scope_wrapper", "\n", "def", "inverse", "(", "self", ")", ":", "\n", "        ", "\"\"\"Compute the inverse of the quaternion, i.e. q.conjugate / q.norm.\"\"\"", "\n", "return", "Quaternion", "(", "tf", ".", "convert_to_tensor", "(", "self", ".", "conjugate", "(", ")", ")", "/", "self", ".", "norm", "(", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.normalized": [[359, 363], ["tfquaternions.Quaternion", "tensorflow.divide", "tfquaternions.Quaternion.abs"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.abs"], ["", "@", "scope_wrapper", "\n", "def", "normalized", "(", "self", ")", ":", "\n", "        ", "\"\"\"Compute the normalized quaternion.\"\"\"", "\n", "return", "Quaternion", "(", "tf", ".", "divide", "(", "self", ".", "_q", ",", "self", ".", "abs", "(", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.as_rotation_matrix": [[364, 390], ["tensorflow.unstack", "tensorflow.stack", "tfquaternions.Quaternion.normalized().value", "tfquaternions.Quaternion.as_rotation_matrix.diag"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.value"], ["", "@", "scope_wrapper", "\n", "def", "as_rotation_matrix", "(", "self", ")", ":", "\n", "        ", "\"\"\"Calculate the corresponding rotation matrix.\n\n        See\n        http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToMatrix/\n\n        Returns:\n            A `tf.Tensor` with R+1 dimensions and\n            shape [d_1, ..., d_(R-1), 3, 3], the rotation matrix\n        \"\"\"", "\n", "# helper functions", "\n", "def", "diag", "(", "a", ",", "b", ")", ":", "# computes the diagonal entries,  1 - 2*a**2 - 2*b**2", "\n", "            ", "return", "1", "-", "2", "*", "tf", ".", "pow", "(", "a", ",", "2", ")", "-", "2", "*", "tf", ".", "pow", "(", "b", ",", "2", ")", "\n", "\n", "", "def", "tr_add", "(", "a", ",", "b", ",", "c", ",", "d", ")", ":", "# computes triangle entries with addition", "\n", "            ", "return", "2", "*", "a", "*", "b", "+", "2", "*", "c", "*", "d", "\n", "\n", "", "def", "tr_sub", "(", "a", ",", "b", ",", "c", ",", "d", ")", ":", "# computes triangle entries with subtraction", "\n", "            ", "return", "2", "*", "a", "*", "b", "-", "2", "*", "c", "*", "d", "\n", "\n", "", "w", ",", "x", ",", "y", ",", "z", "=", "tf", ".", "unstack", "(", "self", ".", "normalized", "(", ")", ".", "value", "(", ")", ",", "axis", "=", "-", "1", ")", "\n", "m", "=", "[", "[", "diag", "(", "y", ",", "z", ")", ",", "tr_sub", "(", "x", ",", "y", ",", "z", ",", "w", ")", ",", "tr_add", "(", "x", ",", "z", ",", "y", ",", "w", ")", "]", ",", "\n", "[", "tr_add", "(", "x", ",", "y", ",", "z", ",", "w", ")", ",", "diag", "(", "x", ",", "z", ")", ",", "tr_sub", "(", "y", ",", "z", ",", "x", ",", "w", ")", "]", ",", "\n", "[", "tr_sub", "(", "x", ",", "z", ",", "y", ",", "w", ")", ",", "tr_add", "(", "y", ",", "z", ",", "x", ",", "w", ")", ",", "diag", "(", "x", ",", "y", ")", "]", "]", "\n", "return", "tf", ".", "stack", "(", "[", "tf", ".", "stack", "(", "m", "[", "i", "]", ",", "axis", "=", "-", "1", ")", "for", "i", "in", "range", "(", "3", ")", "]", ",", "axis", "=", "-", "2", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.validate_shape": [[391, 400], ["ValueError", "error_msg.format"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "validate_shape", "(", "x", ")", ":", "\n", "        ", "\"\"\"Raise a value error if x.shape ist not (..., 4).\"\"\"", "\n", "error_msg", "=", "(", "\"Can't create a quaternion from a tensor with shape {}.\"", "\n", "\"The last dimension must be 4.\"", ")", "\n", "# Check is performed during graph construction. If your dimension", "\n", "# is unknown, tf.reshape(x, (-1, 4)) might work.", "\n", "if", "x", ".", "shape", "[", "-", "1", "]", "!=", "4", ":", "\n", "            ", "raise", "ValueError", "(", "error_msg", ".", "format", "(", "x", ".", "shape", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.validate_type": [[401, 406], ["TypeError"], "methods", ["None"], ["", "", "@", "staticmethod", "\n", "def", "validate_type", "(", "x", ")", ":", "\n", "        ", "\"\"\"Raise a type error if the dtype of x is not float.\"\"\"", "\n", "if", "not", "x", ".", "dtype", ".", "is_floating", ":", "\n", "            ", "raise", "TypeError", "(", "\"Quaternion: dtype must be one of float16/32/64.\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.norm": [[407, 411], ["tensorflow.reduce_sum", "tensorflow.square"], "methods", ["None"], ["", "", "@", "scope_wrapper", "\n", "def", "norm", "(", "self", ",", "keepdims", "=", "True", ")", ":", "\n", "        ", "\"\"\"Return the norm of the quaternion.\"\"\"", "\n", "return", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "self", ".", "_q", ")", ",", "axis", "=", "-", "1", ",", "keepdims", "=", "keepdims", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.abs": [[412, 416], ["tensorflow.sqrt", "tfquaternions.Quaternion.norm"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.norm"], ["", "@", "scope_wrapper", "\n", "def", "abs", "(", "self", ",", "keepdims", "=", "True", ")", ":", "\n", "        ", "\"\"\"Return the square root of the norm of the quaternion.\"\"\"", "\n", "return", "tf", ".", "sqrt", "(", "self", ".", "norm", "(", "keepdims", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.scope_wrapper": [[47, 53], ["tensorflow.name_scope", "func"], "function", ["None"], ["def", "scope_wrapper", "(", "func", ",", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Create a tf name scope around the function with its name.\"\"\"", "\n", "def", "scoped_func", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "        ", "with", "tf", ".", "name_scope", "(", "\"quaternion_{}\"", ".", "format", "(", "func", ".", "__name__", ")", ")", ":", "\n", "            ", "return", "func", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "", "", "return", "scoped_func", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.vector3d_to_quaternion": [[55, 75], ["tensorflow.convert_to_tensor", "tfquaternions.Quaternion.validate_type", "tfquaternions.Quaternion", "ValueError", "tensorflow.pad", "len"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.validate_type"], ["", "@", "scope_wrapper", "\n", "def", "vector3d_to_quaternion", "(", "x", ")", ":", "\n", "    ", "\"\"\"Convert a tensor of 3D vectors to a quaternion.\n\n    Prepends a 0 to the last dimension, i.e. [[1,2,3]] -> [[0,1,2,3]].\n\n    Args:\n        x: A `tf.Tensor` of rank R, the last dimension must be 3.\n\n    Returns:\n        A `Quaternion` of Rank R with the last dimension being 4.\n\n    Raises:\n        ValueError, if the last dimension of x is not 3.\n    \"\"\"", "\n", "x", "=", "tf", ".", "convert_to_tensor", "(", "x", ")", "\n", "if", "x", ".", "shape", "[", "-", "1", "]", "!=", "3", ":", "\n", "        ", "raise", "ValueError", "(", "\"The last dimension of x must be 3.\"", ")", "\n", "", "Quaternion", ".", "validate_type", "(", "x", ")", "\n", "return", "Quaternion", "(", "tf", ".", "pad", "(", "x", ",", "(", "len", "(", "x", ".", "shape", ")", "-", "1", ")", "*", "[", "[", "0", ",", "0", "]", "]", "+", "[", "[", "1", ",", "0", "]", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.quaternion_to_vector3d": [[77, 81], ["q.value"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.value"], ["", "@", "scope_wrapper", "\n", "def", "quaternion_to_vector3d", "(", "q", ")", ":", "\n", "    ", "\"\"\"Remove the w component(s) of quaternion(s) q.\"\"\"", "\n", "return", "q", ".", "value", "(", ")", "[", "...", ",", "1", ":", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions._prepare_tensor_for_div_mul": [[83, 98], ["tensorflow.convert_to_tensor", "tfquaternions.Quaternion.validate_shape", "tfquaternions.Quaternion.validate_type", "tfquaternions.vector3d_to_quaternion"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.validate_shape", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.validate_type", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.vector3d_to_quaternion"], ["", "@", "scope_wrapper", "\n", "def", "_prepare_tensor_for_div_mul", "(", "x", ")", ":", "\n", "    ", "\"\"\"Prepare the tensor x for division/multiplication.\n\n    This function\n    a) converts x to a tensor if necessary,\n    b) prepends a 0 in the last dimension if the last dimension is 3,\n    c) validates the type and shape.\n    \"\"\"", "\n", "x", "=", "tf", ".", "convert_to_tensor", "(", "x", ")", "\n", "if", "x", ".", "shape", "[", "-", "1", "]", "==", "3", ":", "\n", "        ", "x", "=", "vector3d_to_quaternion", "(", "x", ")", "\n", "", "Quaternion", ".", "validate_shape", "(", "x", ")", "\n", "Quaternion", ".", "validate_type", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.quaternion_multiply": [[100, 121], ["tfquaternions._prepare_tensor_for_div_mul", "tfquaternions._prepare_tensor_for_div_mul", "tensorflow.unstack", "tensorflow.unstack", "tfquaternions.Quaternion", "tensorflow.squeeze", "tensorflow.stack"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions._prepare_tensor_for_div_mul", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions._prepare_tensor_for_div_mul"], ["", "@", "scope_wrapper", "\n", "def", "quaternion_multiply", "(", "a", ",", "b", ")", ":", "\n", "    ", "\"\"\"Multiply two quaternion tensors.\n\n    Note that this differs from tf.multiply and is not commutative.\n\n    Args:\n        a, b: A `tf.Tensor` with shape (..., 4).\n\n    Returns:\n        A `Quaternion`.\n    \"\"\"", "\n", "a", "=", "_prepare_tensor_for_div_mul", "(", "a", ")", "\n", "b", "=", "_prepare_tensor_for_div_mul", "(", "b", ")", "\n", "w1", ",", "x1", ",", "y1", ",", "z1", "=", "tf", ".", "unstack", "(", "a", ",", "axis", "=", "-", "1", ",", "num", "=", "4", ")", "\n", "w2", ",", "x2", ",", "y2", ",", "z2", "=", "tf", ".", "unstack", "(", "b", ",", "axis", "=", "-", "1", ",", "num", "=", "4", ")", "\n", "w", "=", "w1", "*", "w2", "-", "x1", "*", "x2", "-", "y1", "*", "y2", "-", "z1", "*", "z2", "\n", "x", "=", "w1", "*", "x2", "+", "x1", "*", "w2", "+", "y1", "*", "z2", "-", "z1", "*", "y2", "\n", "y", "=", "w1", "*", "y2", "+", "y1", "*", "w2", "+", "z1", "*", "x2", "-", "x1", "*", "z2", "\n", "z", "=", "w1", "*", "z2", "+", "z1", "*", "w2", "+", "x1", "*", "y2", "-", "y1", "*", "x2", "\n", "return", "Quaternion", "(", "tf", ".", "squeeze", "(", "tf", ".", "stack", "(", "(", "w", ",", "x", ",", "y", ",", "z", ")", ",", "axis", "=", "-", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.quaternion_divide": [[123, 145], ["tensorflow.convert_to_tensor", "tensorflow.squeeze", "tensorflow.unstack", "tensorflow.unstack", "tfquaternions.Quaternion", "tfquaternions.Quaternion", "tfquaternions.Quaternion.norm", "tensorflow.squeeze", "tensorflow.stack", "tensorflow.multiply", "tfquaternions.Quaternion.norm", "tfquaternions.Quaternion", "b.conj", "tfquaternions.Quaternion"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.norm", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.norm", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.conj"], ["", "@", "scope_wrapper", "\n", "def", "quaternion_divide", "(", "a", ",", "b", ")", ":", "\n", "    ", "\"\"\"Divide tensor `a` by quaternion tensor `b`. `a` may be a scalar value.\n\n    Args:\n        a: A scalar or `tf.Tensor` with shape (..., 4).\n        b: A `tf.Tensor` with shape (..., 4).\n\n    Returns:\n        A `Quaternion`.\n    \"\"\"", "\n", "a", "=", "tf", ".", "convert_to_tensor", "(", "a", ")", "\n", "if", "a", ".", "shape", "==", "(", ")", "or", "a", ".", "shape", "[", "-", "1", "]", "==", "1", ":", "# scalar", "\n", "        ", "return", "Quaternion", "(", "tf", ".", "multiply", "(", "a", ",", "b", ".", "conj", "(", ")", ")", "/", "Quaternion", "(", "b", ")", ".", "norm", "(", ")", ")", "\n", "", "bnorm", "=", "tf", ".", "squeeze", "(", "Quaternion", "(", "b", ")", ".", "norm", "(", ")", ")", "\n", "w1", ",", "x1", ",", "y1", ",", "z1", "=", "tf", ".", "unstack", "(", "a", ",", "axis", "=", "-", "1", ",", "num", "=", "4", ")", "\n", "w2", ",", "x2", ",", "y2", ",", "z2", "=", "tf", ".", "unstack", "(", "b", ",", "axis", "=", "-", "1", ",", "num", "=", "4", ")", "\n", "w", "=", "(", "w1", "*", "w2", "+", "x1", "*", "x2", "+", "y1", "*", "y2", "+", "z1", "*", "z2", ")", "/", "bnorm", "\n", "x", "=", "(", "-", "w1", "*", "x2", "+", "x1", "*", "w2", "-", "y1", "*", "z2", "+", "z1", "*", "y2", ")", "/", "bnorm", "\n", "y", "=", "(", "-", "w1", "*", "y2", "+", "x1", "*", "z2", "+", "y1", "*", "w2", "-", "z1", "*", "x2", ")", "/", "bnorm", "\n", "z", "=", "(", "-", "w1", "*", "z2", "-", "x1", "*", "y2", "+", "y1", "*", "x2", "+", "z1", "*", "w2", ")", "/", "bnorm", "\n", "return", "Quaternion", "(", "tf", ".", "squeeze", "(", "tf", ".", "stack", "(", "(", "w", ",", "x", ",", "y", ",", "z", ")", ",", "axis", "=", "-", "1", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.quaternion_conjugate": [[147, 151], ["tfquaternions.Quaternion", "tensorflow.multiply"], "function", ["None"], ["", "@", "scope_wrapper", "\n", "def", "quaternion_conjugate", "(", "q", ")", ":", "\n", "    ", "\"\"\"Compute the conjugate of q, i.e. [q.w, -q.x, -q.y, -q.z].\"\"\"", "\n", "return", "Quaternion", "(", "tf", ".", "multiply", "(", "q", ",", "[", "1.0", ",", "-", "1.0", ",", "-", "1.0", ",", "-", "1.0", "]", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.rotate_vector_by_quaternion": [[153, 189], ["tensorflow.convert_to_tensor", "q.normalized.normalized", "range", "range", "tensorflow.zeros_like", "tensorflow.zeros_like", "q.normalized.value", "q.normalized.value", "tensorflow.expand_dims", "tensorflow.cross", "tensorflow.cross", "tensorflow.expand_dims", "tensorflow.zeros_like", "tensorflow.expand_dims"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.normalized", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.value", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.value"], ["", "@", "scope_wrapper", "\n", "def", "rotate_vector_by_quaternion", "(", "q", ",", "v", ",", "q_ndims", "=", "None", ",", "v_ndims", "=", "None", ")", ":", "\n", "    ", "\"\"\"Rotate a vector (or tensor with last dimension of 3) by q.\n\n    This function computes v' = q * v * conjugate(q) but faster.\n    Fast version can be found here:\n    https://blog.molecular-matters.com/2013/05/24/a-faster-quaternion-vector-multiplication/\n\n    Args:\n        q: A `Quaternion` or `tf.Tensor` with shape (..., 4)\n        v: A `tf.Tensor` with shape (..., 3)\n        q_ndims: The number of dimensions of q. Only necessary to specify if\n            the shape of q is unknown.\n        v_ndims: The number of dimensions of v. Only necessary to specify if\n            the shape of v is unknown.\n\n    Returns: A `tf.Tensor` with the broadcasted shape of v and q.\n    \"\"\"", "\n", "v", "=", "tf", ".", "convert_to_tensor", "(", "v", ")", "\n", "q", "=", "q", ".", "normalized", "(", ")", "\n", "w", "=", "q", ".", "value", "(", ")", "[", "...", ",", "0", "]", "\n", "q_xyz", "=", "q", ".", "value", "(", ")", "[", "...", ",", "1", ":", "]", "\n", "# Broadcast shapes. Todo(phil): Prepare a pull request which adds", "\n", "# broadcasting support to tf.cross", "\n", "if", "q_xyz", ".", "shape", ".", "ndims", "is", "not", "None", ":", "\n", "        ", "q_ndims", "=", "q_xyz", ".", "shape", ".", "ndims", "\n", "", "if", "v", ".", "shape", ".", "ndims", "is", "not", "None", ":", "\n", "        ", "v_ndims", "=", "v", ".", "shape", ".", "ndims", "\n", "", "for", "_", "in", "range", "(", "v_ndims", "-", "q_ndims", ")", ":", "\n", "        ", "q_xyz", "=", "tf", ".", "expand_dims", "(", "q_xyz", ",", "axis", "=", "0", ")", "\n", "", "for", "_", "in", "range", "(", "q_ndims", "-", "v_ndims", ")", ":", "\n", "        ", "v", "=", "tf", ".", "expand_dims", "(", "v", ",", "axis", "=", "0", ")", "+", "tf", ".", "zeros_like", "(", "q_xyz", ")", "\n", "", "q_xyz", "+=", "tf", ".", "zeros_like", "(", "v", ")", "\n", "v", "+=", "tf", ".", "zeros_like", "(", "q_xyz", ")", "\n", "t", "=", "2", "*", "tf", ".", "cross", "(", "q_xyz", ",", "v", ")", "\n", "return", "v", "+", "tf", ".", "expand_dims", "(", "w", ",", "axis", "=", "-", "1", ")", "*", "t", "+", "tf", ".", "cross", "(", "q_xyz", ",", "t", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.quaternion_to_tensor": [[420, 424], ["tensorflow.convert_to_tensor", "x.value"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.value"], ["", "", "def", "quaternion_to_tensor", "(", "x", ",", "dtype", "=", "None", ",", "name", "=", "None", ",", "as_ref", "=", "None", ")", ":", "\n", "    ", "\"\"\"Convert a Quaternion to a `tf.Tensor`.\"\"\"", "\n", "# Todo(phil): handle as_ref correctly", "\n", "return", "tf", ".", "convert_to_tensor", "(", "x", ".", "value", "(", ")", ",", "dtype", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.geometry.umeyama_alignment": [[46, 94], ["x.mean", "y.mean", "numpy.zeros", "range", "numpy.multiply", "numpy.linalg.svd", "numpy.eye", "u.dot().dot", "geometry.GeometryException", "numpy.outer", "numpy.multiply", "numpy.linalg.norm", "numpy.linalg.det", "numpy.linalg.det", "u.dot", "numpy.trace", "u.dot().dot.dot", "numpy.diag().dot", "numpy.diag"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.norm"], ["", "def", "umeyama_alignment", "(", "x", ",", "y", ",", "with_scale", "=", "False", ")", ":", "\n", "    ", "\"\"\"\n    Computes the least squares solution parameters of an Sim(m) matrix\n    that minimizes the distance between a set of registered points.\n    Umeyama, Shinji: Least-squares estimation of transformation parameters\n                     between two point patterns. IEEE PAMI, 1991\n    :param x: mxn matrix of points, m = dimension, n = nr. of data points\n    :param y: mxn matrix of points, m = dimension, n = nr. of data points\n    :param with_scale: set to True to align also the scale (default: 1.0 scale)\n    :return: r, t, c - rotation matrix, translation vector and scale factor\n    \"\"\"", "\n", "if", "x", ".", "shape", "!=", "y", ".", "shape", ":", "\n", "        ", "raise", "GeometryException", "(", "\"data matrices must have the same shape\"", ")", "\n", "\n", "# m = dimension, n = nr. of data points", "\n", "", "m", ",", "n", "=", "x", ".", "shape", "\n", "\n", "# means, eq. 34 and 35", "\n", "mean_x", "=", "x", ".", "mean", "(", "axis", "=", "1", ")", "\n", "mean_y", "=", "y", ".", "mean", "(", "axis", "=", "1", ")", "\n", "\n", "# variance, eq. 36", "\n", "# \"transpose\" for column subtraction", "\n", "sigma_x", "=", "1.0", "/", "n", "*", "(", "np", ".", "linalg", ".", "norm", "(", "x", "-", "mean_x", "[", ":", ",", "np", ".", "newaxis", "]", ")", "**", "2", ")", "\n", "\n", "# covariance matrix, eq. 38", "\n", "outer_sum", "=", "np", ".", "zeros", "(", "(", "m", ",", "m", ")", ")", "\n", "for", "i", "in", "range", "(", "n", ")", ":", "\n", "        ", "outer_sum", "+=", "np", ".", "outer", "(", "(", "y", "[", ":", ",", "i", "]", "-", "mean_y", ")", ",", "(", "x", "[", ":", ",", "i", "]", "-", "mean_x", ")", ")", "\n", "", "cov_xy", "=", "np", ".", "multiply", "(", "1.0", "/", "n", ",", "outer_sum", ")", "\n", "\n", "# SVD (text betw. eq. 38 and 39)", "\n", "u", ",", "d", ",", "v", "=", "np", ".", "linalg", ".", "svd", "(", "cov_xy", ")", "\n", "\n", "# S matrix, eq. 43", "\n", "s", "=", "np", ".", "eye", "(", "m", ")", "\n", "if", "np", ".", "linalg", ".", "det", "(", "u", ")", "*", "np", ".", "linalg", ".", "det", "(", "v", ")", "<", "0.0", ":", "\n", "# Ensure a RHS coordinate system (Kabsch algorithm).", "\n", "        ", "s", "[", "m", "-", "1", ",", "m", "-", "1", "]", "=", "-", "1", "\n", "\n", "# rotation, eq. 40", "\n", "", "r", "=", "u", ".", "dot", "(", "s", ")", ".", "dot", "(", "v", ")", "\n", "\n", "# scale & translation, eq. 42 and 41", "\n", "c", "=", "1", "/", "sigma_x", "*", "np", ".", "trace", "(", "np", ".", "diag", "(", "d", ")", ".", "dot", "(", "s", ")", ")", "if", "with_scale", "else", "1.0", "\n", "t", "=", "mean_y", "-", "np", ".", "multiply", "(", "c", ",", "r", ".", "dot", "(", "mean_x", ")", ")", "\n", "\n", "return", "r", ",", "t", ",", "c", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.geometry.arc_len": [[96, 102], ["numpy.sum", "numpy.linalg.norm"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.norm"], ["", "def", "arc_len", "(", "x", ")", ":", "\n", "    ", "\"\"\"\n    :param x: nxm array of points, m=dimension\n    :return: the (discrete approximated) arc-length of the point sequence\n    \"\"\"", "\n", "return", "np", ".", "sum", "(", "np", ".", "linalg", ".", "norm", "(", "x", "[", ":", "-", "1", "]", "-", "x", "[", "1", ":", "]", ",", "axis", "=", "1", ")", ")", "", "", ""]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transform.build_intrinsic_matrix": [[36, 42], ["numpy.identity", "numpy.matrix().transpose", "numpy.matrix"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.Arcball.matrix"], ["def", "build_intrinsic_matrix", "(", "focal_length", ",", "principal_point", ")", ":", "\n", "    ", "intrinsic_matrix", "=", "matlib", ".", "identity", "(", "3", ")", "\n", "intrinsic_matrix", "[", "0", ":", "2", ",", "2", "]", "=", "np", ".", "matrix", "(", "principal_point", ")", ".", "transpose", "(", ")", "\n", "intrinsic_matrix", "[", "0", ",", "0", "]", "=", "focal_length", "[", "0", "]", "\n", "intrinsic_matrix", "[", "1", ",", "1", "]", "=", "focal_length", "[", "1", "]", "\n", "return", "intrinsic_matrix", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transform.build_se3_transform": [[44, 64], ["numpy.identity", "transform.euler_to_so3", "numpy.matrix().transpose", "len", "ValueError", "numpy.matrix"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.model.euler_to_so3", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.Arcball.matrix"], ["", "def", "build_se3_transform", "(", "xyzrpy", ")", ":", "\n", "    ", "\"\"\"Creates an SE3 transform from translation and Euler angles.\n\n    Args:\n        xyzrpy (list[float]): translation and Euler angles for transform. Must have six components.\n\n    Returns:\n        numpy.matrixlib.defmatrix.matrix: SE3 homogeneous transformation matrix\n\n    Raises:\n        ValueError: if `len(xyzrpy) != 6`\n\n    \"\"\"", "\n", "if", "len", "(", "xyzrpy", ")", "!=", "6", ":", "\n", "        ", "raise", "ValueError", "(", "\"Must supply 6 values to build transform\"", ")", "\n", "\n", "", "se3", "=", "matlib", ".", "identity", "(", "4", ")", "\n", "se3", "[", "0", ":", "3", ",", "0", ":", "3", "]", "=", "euler_to_so3", "(", "xyzrpy", "[", "3", ":", "6", "]", ")", "\n", "se3", "[", "0", ":", "3", ",", "3", "]", "=", "np", ".", "matrix", "(", "xyzrpy", "[", "0", ":", "3", "]", ")", ".", "transpose", "(", ")", "\n", "return", "se3", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transform.euler_to_so3": [[66, 93], ["numpy.matrix", "numpy.matrix", "numpy.matrix", "len", "ValueError", "math.cos", "math.sin", "math.cos", "math.cos", "math.sin", "math.cos", "math.cos", "math.sin", "math.cos", "math.sin", "math.sin", "math.sin"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.Arcball.matrix", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.Arcball.matrix", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.Arcball.matrix"], ["", "def", "euler_to_so3", "(", "rpy", ")", ":", "\n", "    ", "\"\"\"Converts Euler angles to an SO3 rotation matrix.\n\n    Args:\n        rpy (list[float]): Euler angles (in radians). Must have three components.\n\n    Returns:\n        numpy.matrixlib.defmatrix.matrix: 3x3 SO3 rotation matrix\n\n    Raises:\n        ValueError: if `len(rpy) != 3`.\n\n    \"\"\"", "\n", "if", "len", "(", "rpy", ")", "!=", "3", ":", "\n", "        ", "raise", "ValueError", "(", "\"Euler angles must have three components\"", ")", "\n", "\n", "", "R_x", "=", "np", ".", "matrix", "(", "[", "[", "1", ",", "0", ",", "0", "]", ",", "\n", "[", "0", ",", "cos", "(", "rpy", "[", "0", "]", ")", ",", "-", "sin", "(", "rpy", "[", "0", "]", ")", "]", ",", "\n", "[", "0", ",", "sin", "(", "rpy", "[", "0", "]", ")", ",", "cos", "(", "rpy", "[", "0", "]", ")", "]", "]", ")", "\n", "R_y", "=", "np", ".", "matrix", "(", "[", "[", "cos", "(", "rpy", "[", "1", "]", ")", ",", "0", ",", "sin", "(", "rpy", "[", "1", "]", ")", "]", ",", "\n", "[", "0", ",", "1", ",", "0", "]", ",", "\n", "[", "-", "sin", "(", "rpy", "[", "1", "]", ")", ",", "0", ",", "cos", "(", "rpy", "[", "1", "]", ")", "]", "]", ")", "\n", "R_z", "=", "np", ".", "matrix", "(", "[", "[", "cos", "(", "rpy", "[", "2", "]", ")", ",", "-", "sin", "(", "rpy", "[", "2", "]", ")", ",", "0", "]", ",", "\n", "[", "sin", "(", "rpy", "[", "2", "]", ")", ",", "cos", "(", "rpy", "[", "2", "]", ")", ",", "0", "]", ",", "\n", "[", "0", ",", "0", ",", "1", "]", "]", ")", "\n", "R_zyx", "=", "R_z", "*", "R_y", "*", "R_x", "\n", "return", "R_zyx", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transform.so3_to_euler": [[95, 125], ["math.atan2", "math.atan2", "math.sqrt", "transform.euler_to_so3", "ValueError", "math.atan2", "math.atan2", "numpy.matrix", "transform.euler_to_so3", "numpy.matrix", "ValueError"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.model.euler_to_so3", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.Arcball.matrix", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.model.euler_to_so3", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.Arcball.matrix"], ["", "def", "so3_to_euler", "(", "so3", ")", ":", "\n", "    ", "\"\"\"Converts an SO3 rotation matrix to Euler angles\n\n    Args:\n        so3: 3x3 rotation matrix\n\n    Returns:\n        numpy.matrixlib.defmatrix.matrix: list of Euler angles (size 3)\n\n    Raises:\n        ValueError: if so3 is not 3x3\n        ValueError: if a valid Euler parametrisation cannot be found\n\n    \"\"\"", "\n", "if", "so3", ".", "shape", "!=", "(", "3", ",", "3", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"SO3 matrix must be 3x3\"", ")", "\n", "", "roll", "=", "atan2", "(", "so3", "[", "2", ",", "1", "]", ",", "so3", "[", "2", ",", "2", "]", ")", "\n", "yaw", "=", "atan2", "(", "so3", "[", "1", ",", "0", "]", ",", "so3", "[", "0", ",", "0", "]", ")", "\n", "denom", "=", "sqrt", "(", "so3", "[", "0", ",", "0", "]", "**", "2", "+", "so3", "[", "1", ",", "0", "]", "**", "2", ")", "\n", "pitch_poss", "=", "[", "atan2", "(", "-", "so3", "[", "2", ",", "0", "]", ",", "denom", ")", ",", "atan2", "(", "-", "so3", "[", "2", ",", "0", "]", ",", "-", "denom", ")", "]", "\n", "\n", "R", "=", "euler_to_so3", "(", "(", "roll", ",", "pitch_poss", "[", "0", "]", ",", "yaw", ")", ")", "\n", "\n", "if", "(", "so3", "-", "R", ")", ".", "sum", "(", ")", "<", "MATRIX_MATCH_TOLERANCE", ":", "\n", "        ", "return", "np", ".", "matrix", "(", "[", "roll", ",", "pitch_poss", "[", "0", "]", ",", "yaw", "]", ")", "\n", "", "else", ":", "\n", "        ", "R", "=", "euler_to_so3", "(", "(", "roll", ",", "pitch_poss", "[", "1", "]", ",", "yaw", ")", ")", "\n", "if", "(", "so3", "-", "R", ")", ".", "sum", "(", ")", ">", "MATRIX_MATCH_TOLERANCE", ":", "\n", "            ", "raise", "ValueError", "(", "\"Could not find valid pitch angle\"", ")", "\n", "", "return", "np", ".", "matrix", "(", "[", "roll", ",", "pitch_poss", "[", "1", "]", ",", "yaw", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transform.so3_to_quaternion": [[127, 182], ["max", "numpy.array", "ValueError", "math.sqrt", "math.sqrt", "math.sqrt", "range", "math.sqrt", "so3.trace"], "function", ["None"], ["", "", "def", "so3_to_quaternion", "(", "so3", ")", ":", "\n", "    ", "\"\"\"Converts an SO3 rotation matrix to a quaternion\n\n    Args:\n        so3: 3x3 rotation matrix\n\n    Returns:\n        numpy.ndarray: quaternion [w, x, y, z]\n\n    Raises:\n        ValueError: if so3 is not 3x3\n    \"\"\"", "\n", "if", "so3", ".", "shape", "!=", "(", "3", ",", "3", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"SO3 matrix must be 3x3\"", ")", "\n", "\n", "", "R_xx", "=", "so3", "[", "0", ",", "0", "]", "\n", "R_xy", "=", "so3", "[", "0", ",", "1", "]", "\n", "R_xz", "=", "so3", "[", "0", ",", "2", "]", "\n", "R_yx", "=", "so3", "[", "1", ",", "0", "]", "\n", "R_yy", "=", "so3", "[", "1", ",", "1", "]", "\n", "R_yz", "=", "so3", "[", "1", ",", "2", "]", "\n", "R_zx", "=", "so3", "[", "2", ",", "0", "]", "\n", "R_zy", "=", "so3", "[", "2", ",", "1", "]", "\n", "R_zz", "=", "so3", "[", "2", ",", "2", "]", "\n", "\n", "try", ":", "\n", "        ", "w", "=", "sqrt", "(", "so3", ".", "trace", "(", ")", "+", "1", ")", "/", "2", "\n", "", "except", "(", "ValueError", ")", ":", "\n", "# w is non-real", "\n", "        ", "w", "=", "0", "\n", "\n", "", "x", "=", "sqrt", "(", "1", "+", "R_xx", "-", "R_yy", "-", "R_zz", ")", "/", "2", "\n", "y", "=", "sqrt", "(", "1", "+", "R_yy", "-", "R_xx", "-", "R_zz", ")", "/", "2", "\n", "z", "=", "sqrt", "(", "1", "+", "R_zz", "-", "R_yy", "-", "R_xx", ")", "/", "2", "\n", "\n", "max_index", "=", "max", "(", "range", "(", "4", ")", ",", "key", "=", "[", "w", ",", "x", ",", "y", ",", "z", "]", ".", "__getitem__", ")", "\n", "\n", "if", "max_index", "==", "0", ":", "\n", "        ", "x", "=", "(", "R_zy", "-", "R_yz", ")", "/", "(", "4", "*", "w", ")", "\n", "y", "=", "(", "R_xz", "-", "R_zx", ")", "/", "(", "4", "*", "w", ")", "\n", "z", "=", "(", "R_yx", "-", "R_xy", ")", "/", "(", "4", "*", "w", ")", "\n", "", "elif", "max_index", "==", "1", ":", "\n", "        ", "w", "=", "(", "R_zy", "-", "R_yz", ")", "/", "(", "4", "*", "x", ")", "\n", "y", "=", "(", "R_xy", "+", "R_yx", ")", "/", "(", "4", "*", "x", ")", "\n", "z", "=", "(", "R_zx", "+", "R_xz", ")", "/", "(", "4", "*", "x", ")", "\n", "", "elif", "max_index", "==", "2", ":", "\n", "        ", "w", "=", "(", "R_xz", "-", "R_zx", ")", "/", "(", "4", "*", "y", ")", "\n", "x", "=", "(", "R_xy", "+", "R_yx", ")", "/", "(", "4", "*", "y", ")", "\n", "z", "=", "(", "R_yz", "+", "R_zy", ")", "/", "(", "4", "*", "y", ")", "\n", "", "elif", "max_index", "==", "3", ":", "\n", "        ", "w", "=", "(", "R_yx", "-", "R_xy", ")", "/", "(", "4", "*", "z", ")", "\n", "x", "=", "(", "R_zx", "+", "R_xz", ")", "/", "(", "4", "*", "z", ")", "\n", "y", "=", "(", "R_yz", "+", "R_zy", ")", "/", "(", "4", "*", "z", ")", "\n", "\n", "", "return", "np", ".", "array", "(", "[", "w", ",", "x", ",", "y", ",", "z", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transform.se3_to_components": [[184, 204], ["numpy.empty", "se3[].transpose", "transform.so3_to_euler", "ValueError"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.model.so3_to_euler"], ["", "def", "se3_to_components", "(", "se3", ")", ":", "\n", "    ", "\"\"\"Converts an SE3 rotation matrix to linear translation and Euler angles\n\n    Args:\n        se3: 4x4 transformation matrix\n\n    Returns:\n        numpy.matrixlib.defmatrix.matrix: list of [x, y, z, roll, pitch, yaw]\n\n    Raises:\n        ValueError: if se3 is not 4x4\n        ValueError: if a valid Euler parametrisation cannot be found\n\n    \"\"\"", "\n", "if", "se3", ".", "shape", "!=", "(", "4", ",", "4", ")", ":", "\n", "        ", "raise", "ValueError", "(", "\"SE3 transform must be a 4x4 matrix\"", ")", "\n", "", "xyzrpy", "=", "np", ".", "empty", "(", "6", ")", "\n", "xyzrpy", "[", "0", ":", "3", "]", "=", "se3", "[", "0", ":", "3", ",", "3", "]", ".", "transpose", "(", ")", "\n", "xyzrpy", "[", "3", ":", "6", "]", "=", "so3_to_euler", "(", "se3", "[", "0", ":", "3", ",", "0", ":", "3", "]", ")", "\n", "return", "xyzrpy", "\n", "", ""]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.eval_utils.infer_relative_poses": [[32, 59], ["numpy.empty", "numpy.empty", "xrange", "eval_utils.fill_feed_dict", "sess.run", "eval_utils.get_transformation_matrices", "eval_utils.get_transformation_matrices", "print", "str", "sess.run"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.main.fill_feed_dict", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.run", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.eval_utils.get_transformation_matrices", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.eval_utils.get_transformation_matrices", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.run"], ["def", "infer_relative_poses", "(", "sess", ",", "dataset", ",", "batch_size", ",", "images_placeholder", ",", "outputs", ",", "\n", "targets_placeholder", ",", "train_mode", "=", "None", ")", ":", "\n", "    ", "steps_per_epoch", "=", "dataset", ".", "num_examples", "//", "batch_size", "\n", "num_examples", "=", "steps_per_epoch", "*", "batch_size", "\n", "relative_poses_prediction", "=", "np", ".", "empty", "(", "(", "num_examples", ",", "3", ",", "4", ")", ")", "\n", "relative_poses_target", "=", "np", ".", "empty", "(", "(", "num_examples", ",", "3", ",", "4", ")", ")", "\n", "standardize_targets", "=", "False", "\n", "#        rmse, mse, norm_mse = do_evaluation(sess,outputs,images_placeholder, targets_placeholder, dataset, batch_size, True)", "\n", "for", "step", "in", "xrange", "(", "steps_per_epoch", ")", ":", "\n", "        ", "feed_dict", "=", "fill_feed_dict", "(", "dataset", ",", "images_placeholder", ",", "targets_placeholder", ",", "feed_with_batch", "=", "True", ",", "\n", "batch_size", "=", "batch_size", ",", "shuffle", "=", "False", ",", "standardize_targets", "=", "standardize_targets", ")", "\n", "if", "train_mode", "is", "not", "None", ":", "\n", "            ", "feed_dict", "[", "train_mode", "]", "=", "False", "\n", "", "prediction_batch", ",", "target_batch", "=", "sess", ".", "run", "(", "[", "outputs", ",", "targets_placeholder", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "batch_relative_poses_pred", "=", "get_transformation_matrices", "(", "dataset", ",", "batch_size", ",", "\n", "prediction_batch", ",", "\n", "standardize_targets", ")", "\n", "batch_relative_poses_target", "=", "get_transformation_matrices", "(", "dataset", ",", "batch_size", ",", "\n", "target_batch", ",", "\n", "standardize_targets", ")", "\n", "init", "=", "batch_size", "*", "step", "\n", "end", "=", "batch_size", "*", "(", "step", "+", "1", ")", "\n", "relative_poses_prediction", "[", "init", ":", "end", "]", "=", "batch_relative_poses_pred", "\n", "relative_poses_target", "[", "init", ":", "end", "]", "=", "batch_relative_poses_target", "\n", "", "if", "train_mode", "is", "not", "None", ":", "\n", "        ", "print", "(", "\"Train Mode: \"", "+", "str", "(", "sess", ".", "run", "(", "train_mode", ",", "feed_dict", ")", ")", ")", "\n", "", "return", "relative_poses_prediction", ",", "relative_poses_target", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.eval_utils.get_absolute_poses": [[61, 73], ["numpy.matrix", "numpy.empty", "xrange", "numpy.identity", "numpy.matrix", "numpy.identity", "numpy.linalg.inv"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.Arcball.matrix", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.Arcball.matrix"], ["", "def", "get_absolute_poses", "(", "relative_poses", ",", "inv", "=", "False", ")", ":", "\n", "    ", "current", "=", "np", ".", "matrix", "(", "np", ".", "identity", "(", "4", ")", ")", "\n", "num_examples", "=", "relative_poses", ".", "shape", "[", "0", "]", "\n", "absolute_poses", "=", "np", ".", "empty", "(", "shape", "=", "relative_poses", ".", "shape", ")", "\n", "for", "i", "in", "xrange", "(", "num_examples", ")", ":", "\n", "        ", "T", "=", "np", ".", "matrix", "(", "np", ".", "identity", "(", "4", ")", ")", "\n", "T", "[", "0", ":", "3", ",", ":", "]", "=", "relative_poses", "[", "i", "]", "\n", "if", "inv", ":", "\n", "            ", "T", "=", "np", ".", "linalg", ".", "inv", "(", "T", ")", "\n", "", "current", "=", "current", "*", "T", "\n", "absolute_poses", "[", "i", "]", "=", "current", "[", "0", ":", "3", ",", ":", "]", "\n", "", "return", "absolute_poses", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.eval_utils.get_transformation_matrices": [[75, 104], ["numpy.empty", "xrange", "eval_utils.vector_to_transformation_mtx"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.eval_utils.vector_to_transformation_mtx"], ["", "def", "get_transformation_matrices", "(", "dataset", ",", "batch_size", ",", "batch", ",", "\n", "standardize_targets", ")", ":", "\n", "    ", "transformation_matrices", "=", "np", ".", "empty", "(", "(", "batch_size", ",", "3", ",", "4", ")", ")", "\n", "# poses_target = np.empty((batch_size, 3, 4))", "\n", "for", "i", "in", "xrange", "(", "batch_size", ")", ":", "\n", "        ", "transformation", "=", "batch", "[", "i", "]", "\n", "# Original scale", "\n", "if", "standardize_targets", ":", "\n", "            ", "transformation", "=", "transformation", "*", "dataset", ".", "targets_std", "+", "dataset", ".", "targets_mean", "\n", "\n", "# prediction = prediction.reshape(3,4)", "\n", "# pred_transformation = inverse_intrinsic_matrix * prediction", "\n", "# u,_ = linalg.polar(pred_transformation[0:3,0:3])", "\n", "# pred_transf_correction = np.empty((3,4))", "\n", "# pred_transf_correction[0:3, 0:3] = u", "\n", "# pred_transf_correction[0:3, 3] = pred_transformation[0:3,3].transpose()", "\n", "\n", "# target = target_batch[i]", "\n", "# if standardize_targets:", "\n", "#    target = target * dataset.targets_std + dataset.targets_mean", "\n", "# target = target.reshape(3,4)", "\n", "# target_transformation = inverse_intrinsic_matrix * target", "\n", "# poses_prediction[i] = pred_transf_correction.reshape(12)", "\n", "# poses_target[i] = target_transformation.reshape(12)", "\n", "\n", "", "transformation_matrices", "[", "i", "]", "=", "vector_to_transformation_mtx", "(", "transformation", ")", "\n", "# poses_target[i] = x_q_to_mtx(target)", "\n", "\n", "", "return", "transformation_matrices", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.eval_utils.vector_to_transformation_mtx": [[106, 111], ["transformations.quaternion_matrix"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.quaternion_matrix"], ["", "def", "vector_to_transformation_mtx", "(", "xq", ")", ":", "\n", "    ", "mtx", "=", "transformations", ".", "quaternion_matrix", "(", "xq", "[", "3", ":", "]", ")", "\n", "mtx", "[", "0", ":", "3", ",", "3", "]", "=", "xq", "[", "0", ":", "3", "]", "\n", "out", "=", "mtx", "[", "0", ":", "3", ",", ":", "]", "\n", "return", "out", "# .reshape(12)", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.eval_utils.fill_feed_dict": [[113, 151], ["data_set.next_batch", "ValueError"], "function", ["None"], ["", "def", "fill_feed_dict", "(", "data_set", ",", "images_pl", ",", "labels_pl", ",", "points_pl", "=", "None", ",", "feed_with_batch", "=", "False", ",", "batch_size", "=", "None", ",", "shuffle", "=", "True", ",", "\n", "standardize_targets", "=", "False", ",", "fake_data", "=", "False", ")", ":", "\n", "    ", "\"\"\"Fills the feed_dict for training the given step or for evaluating the entire dataset.\n    A feed_dict takes the form of:\n    feed_dict = {\n        <placeholder>: <tensor of values to be passed for placeholder>,\n        ....\n    }\n    Args:\n      data_set: The set of images and labels, from input_data.read_data_sets()\n      images_pl: The images placeholder, from placeholder_inputs().\n      labels_pl: The labels placeholder, from placeholder_inputs().\n    Returns:\n      feed_dict: The feed dictionary mapping from placeholders to values.\n    \"\"\"", "\n", "# Create the feed_dict for the placeholders filled with the next", "\n", "# `batch size` examples.", "\n", "if", "(", "feed_with_batch", ")", ":", "\n", "        ", "if", "(", "batch_size", "is", "None", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"batch_size not specified\"", ")", "\n", "", "images_feed", ",", "labels_feed", ",", "points", "=", "data_set", ".", "next_batch", "(", "batch_size", ",", "\n", "fake_data", ",", "\n", "shuffle", "=", "shuffle", ",", "\n", "standardize_targets", "=", "standardize_targets", ")", "\n", "# Create the feed_dict for the placeholders filled with the entire dataset", "\n", "", "else", ":", "\n", "        ", "images_feed", "=", "data_set", ".", "images", "\n", "labels_feed", "=", "data_set", ".", "labels", "\n", "points", "=", "data_set", ".", "points", "\n", "\n", "", "feed_dict", "=", "{", "\n", "images_pl", ":", "images_feed", ",", "\n", "labels_pl", ":", "labels_feed", ",", "\n", "#points_pl: points,", "\n", "}", "\n", "if", "points_pl", "is", "not", "None", ":", "\n", "        ", "feed_dict", "[", "points_pl", "]", "=", "points", "\n", "", "return", "feed_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.eval_utils.plot_frames_vs_abs_distance": [[153, 207], ["enumerate", "datasets_idxs.iteritems", "str", "len", "xrange", "matplotlib.subplots", "ax.plot", "fig.savefig", "datasets_idxs[].append", "len", "random.randint", "random.randint", "eval_utils.get_traslation_error", "X_axis.append", "Y_axis.append", "os.path.join", "len", "numpy.savetxt", "numpy.savetxt", "os.path.join", "get_absolute_poses().reshape", "os.path.join", "get_absolute_poses().reshape", "eval_utils.get_absolute_poses", "eval_utils.get_absolute_poses"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.test.plot_traj.plot", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.eval_utils.get_traslation_error", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.eval_utils.get_absolute_poses", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.eval_utils.get_absolute_poses"], ["", "def", "plot_frames_vs_abs_distance", "(", "relative_poses_prediction", ",", "relative_poses_target", ",", "dataset", ",", "output_dir", ",", "save_txt", "=", "False", ",", "\n", "plot", "=", "False", ",", "samples", "=", "30", ")", ":", "\n", "    ", "groups", "=", "dataset", ".", "groups", "\n", "datasets_idxs", "=", "{", "}", "\n", "for", "i", ",", "_", "in", "enumerate", "(", "relative_poses_prediction", ")", ":", "\n", "        ", "group", "=", "str", "(", "groups", "[", "i", "]", ")", "\n", "if", "group", "in", "datasets_idxs", ":", "\n", "            ", "datasets_idxs", "[", "group", "]", ".", "append", "(", "i", ")", "\n", "", "else", ":", "\n", "            ", "datasets_idxs", "[", "group", "]", "=", "[", "i", "]", "\n", "# acc_rmse_tr = 0.", "\n", "# acc_rmse_rot = 0.", "\n", "", "", "X_axis", "=", "[", "]", "\n", "Y_axis", "=", "[", "]", "\n", "for", "grp", ",", "idxs", "in", "datasets_idxs", ".", "iteritems", "(", ")", ":", "\n", "        ", "relative_prediction", "=", "relative_poses_prediction", "[", "idxs", "]", "\n", "relative_target", "=", "relative_poses_target", "[", "idxs", "]", "\n", "max_num_of_frames", "=", "len", "(", "relative_prediction", ")", "\n", "assert", "max_num_of_frames", "==", "len", "(", "relative_target", ")", "\n", "# Get SAMPLES sub-trajectories from sequence", "\n", "for", "i", "in", "xrange", "(", "samples", ")", ":", "\n", "# Random sub-trajectory", "\n", "            ", "N", "=", "random", ".", "randint", "(", "1", ",", "max_num_of_frames", ")", "\n", "start", "=", "random", ".", "randint", "(", "0", ",", "max_num_of_frames", "-", "N", ")", "\n", "traslation_error", "=", "get_traslation_error", "(", "relative_prediction", "[", "start", ":", "start", "+", "N", "]", ",", "\n", "relative_target", "[", "start", ":", "start", "+", "N", "]", ")", "\n", "assert", "len", "(", "traslation_error", ")", "==", "N", "\n", "d", "=", "traslation_error", "[", "-", "1", "]", "\n", "X_axis", ".", "append", "(", "N", ")", "\n", "Y_axis", ".", "append", "(", "d", ")", "\n", "if", "save_txt", ":", "\n", "                ", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'abs_poses_target_{}.txt'", ".", "format", "(", "grp", ")", ")", ",", "\n", "get_absolute_poses", "(", "relative_target", ")", ".", "reshape", "(", "-", "1", ",", "12", ")", ")", "\n", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'abs_poses_prediction_{}.txt'", ".", "format", "(", "grp", ")", ")", ",", "\n", "get_absolute_poses", "(", "relative_prediction", ")", ".", "reshape", "(", "-", "1", ",", "12", ")", ")", "\n", "# print(\"Num of frames\")", "\n", "# print(N)", "\n", "# print(\"d\")", "\n", "# print(d)", "\n", "\n", "# if save_txt:", "\n", "#    np.savetxt(os.path.join(output_dir, 'orig_relative_target.txt'), relative_poses_target.reshape(-1, 12))", "\n", "#    np.savetxt(os.path.join(output_dir, 'orig_relative_prediction.txt'), relative_poses_prediction.reshape(-1, 12))", "\n", "# rmse_tr, rmse_rot = calc_trajectory_rmse(relative_poses_prediction[idxs], relative_poses_target[idxs])", "\n", "# print('*' * 50)", "\n", "# print(grp, len(idxs))", "\n", "# print(rmse_tr, rmse_rot)", "\n", "# acc_rmse_tr += rmse_tr", "\n", "# acc_rmse_rot += rmse_rot", "\n", "", "", "", "if", "plot", ":", "\n", "        ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "ax", ".", "plot", "(", "X_axis", ",", "Y_axis", ",", "'r.'", ")", "\n", "fig", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'f_vs_d.png'", ")", ")", "\n", "", "return", "X_axis", ",", "Y_axis", "\n", "# return acc_rmse_tr / len(datasets_idxs), acc_rmse_rot / len(datasets_idxs)", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.eval_utils.get_traslation_error": [[210, 220], ["get_absolute_poses().reshape", "get_absolute_poses().reshape", "eval_utils.se3_pose_list", "eval_utils.se3_pose_list", "trajectory.PosePath3D", "trajectory.PosePath3D", "numpy.linalg.norm", "eval_utils.get_absolute_poses", "eval_utils.get_absolute_poses"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.eval_utils.se3_pose_list", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.eval_utils.se3_pose_list", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.norm", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.eval_utils.get_absolute_poses", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.eval_utils.get_absolute_poses"], ["", "def", "get_traslation_error", "(", "relative_poses_prediction", ",", "relative_poses_target", ")", ":", "\n", "    ", "absolute_poses_prediction", "=", "get_absolute_poses", "(", "relative_poses_prediction", ")", ".", "reshape", "(", "-", "1", ",", "12", ")", "\n", "absolute_poses_target", "=", "get_absolute_poses", "(", "relative_poses_target", ")", ".", "reshape", "(", "-", "1", ",", "12", ")", "\n", "poses_prediction", "=", "se3_pose_list", "(", "absolute_poses_prediction", ")", "\n", "poses_target", "=", "se3_pose_list", "(", "absolute_poses_target", ")", "\n", "poses_prediction", "=", "trajectory", ".", "PosePath3D", "(", "poses_se3", "=", "poses_prediction", ")", "\n", "poses_target", "=", "trajectory", ".", "PosePath3D", "(", "poses_se3", "=", "poses_target", ")", "\n", "E_tr", "=", "poses_prediction", ".", "positions_xyz", "-", "poses_target", ".", "positions_xyz", "\n", "traslation_error", "=", "[", "np", ".", "linalg", ".", "norm", "(", "E_i", ")", "for", "E_i", "in", "E_tr", "]", "\n", "return", "traslation_error", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.eval_utils.se3_pose_list": [[222, 227], ["numpy.array"], "function", ["None"], ["", "def", "se3_pose_list", "(", "kitti_format", ")", ":", "\n", "    ", "return", "[", "np", ".", "array", "(", "[", "[", "r", "[", "0", "]", ",", "r", "[", "1", "]", ",", "r", "[", "2", "]", ",", "r", "[", "3", "]", "]", ",", "\n", "[", "r", "[", "4", "]", ",", "r", "[", "5", "]", ",", "r", "[", "6", "]", ",", "r", "[", "7", "]", "]", ",", "\n", "[", "r", "[", "8", "]", ",", "r", "[", "9", "]", ",", "r", "[", "10", "]", ",", "r", "[", "11", "]", "]", ",", "\n", "[", "0", ",", "0", ",", "0", ",", "1", "]", "]", ")", "for", "r", "in", "kitti_format", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.eval_utils.our_metric_evaluation": [[229, 237], ["eval_utils.plot_frames_vs_abs_distance", "numpy.array", "numpy.array", "numpy.mean", "numpy.square", "numpy.log", "numpy.log"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.eval_utils.plot_frames_vs_abs_distance"], ["", "def", "our_metric_evaluation", "(", "relative_prediction", ",", "relative_target", ",", "test_dataset", ",", "curr_fold_log_path", ",", "\n", "save_txt", ")", ":", "\n", "    ", "frames", ",", "abs_distance", "=", "plot_frames_vs_abs_distance", "(", "relative_prediction", ",", "relative_target", ",", "test_dataset", ",", "\n", "curr_fold_log_path", ",", "save_txt", "=", "save_txt", ")", "\n", "frames", "=", "np", ".", "array", "(", "frames", ")", "\n", "abs_distance", "=", "np", ".", "array", "(", "abs_distance", ")", "\n", "te_eval", "=", "np", ".", "mean", "(", "np", ".", "square", "(", "np", ".", "log", "(", "abs_distance", ")", "/", "np", ".", "log", "(", "frames", "+", "1", ")", ")", ")", "\n", "return", "te_eval", "\n", "", ""]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.adapt_images.process_image": [[26, 28], ["adapt_images.resize_image"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.adapt_images.resize_image"], ["def", "process_image", "(", "img", ",", "crop", "=", "None", ",", "scale", "=", "None", ")", ":", "\n", "    ", "return", "resize_image", "(", "img", ",", "crop", ",", "scale", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.adapt_images.resize_image": [[30, 37], ["adapt_images.get_resolution", "image.crop_image", "image.scale_image"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.adapt_images.get_resolution", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.image.crop_image", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.image.scale_image"], ["", "def", "resize_image", "(", "img", ",", "crop", "=", "None", ",", "scale", "=", "None", ")", ":", "\n", "    ", "resolution", "=", "get_resolution", "(", "img", ")", "\n", "if", "crop", ":", "\n", "        ", "img", "=", "crop_image", "(", "img", ",", "crop", "[", "0", "]", ",", "crop", "[", "1", "]", ")", "\n", "", "if", "scale", ":", "\n", "        ", "img", "=", "scale_image", "(", "img", ",", "scale", "[", "0", "]", ",", "scale", "[", "1", "]", ")", "\n", "", "return", "img", ",", "resolution", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.adapt_images.get_resolution": [[39, 42], ["None"], "function", ["None"], ["", "def", "get_resolution", "(", "img", ")", ":", "\n", "    ", "resolution", "=", "[", "img", ".", "shape", "[", "1", "]", ",", "img", ".", "shape", "[", "0", "]", "]", "\n", "return", "resolution", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.adapt_images.get_intrinsics_parameters": [[44, 52], ["range", "float", "len"], "function", ["None"], ["", "def", "get_intrinsics_parameters", "(", "focal_length", ",", "principal_point", ",", "resolution", ",", "crop", "=", "None", ",", "scale", "=", "None", ")", ":", "\n", "    ", "if", "crop", ":", "\n", "        ", "resolution", "=", "crop", "\n", "principal_point", "=", "[", "x", "/", "2.", "for", "x", "in", "crop", "]", "## FIXME ver este mismo metodo en adapt_images_kitti", "\n", "", "if", "scale", ":", "\n", "        ", "focal_length", "=", "[", "float", "(", "scale", "[", "i", "]", ")", "/", "resolution", "[", "i", "]", "*", "focal_length", "[", "i", "]", "for", "i", "in", "range", "(", "len", "(", "focal_length", ")", ")", "]", "\n", "principal_point", "=", "[", "x", "/", "2.", "for", "x", "in", "scale", "]", "\n", "", "return", "focal_length", ",", "principal_point", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.adapt_images.main": [[54, 134], ["adapt_images.get_arguments", "re.search().group", "os.path.join", "numpy.array", "numpy.array", "numpy.array", "array_utils.list_to_array", "array_utils.save_txt", "print", "os.path.join", "image.savez_compressed", "image.savez_compressed", "image.savez_compressed", "image.savez_compressed", "os.path.join", "os.path.isfile", "os.path.join", "camera_model.CameraModel", "os.path.isdir", "IOError", "open", "csv.reader", "next", "array_utils.save_txt", "array_utils.save_txt", "os.path.join", "os.path.join", "os.path.join", "os.path.join", "re.search", "os.path.isfile", "IOError", "os.path.join", "os.path.join", "adapt_images.get_intrinsics_parameters", "transform.build_se3_transform", "transform.build_intrinsic_matrix", "t_records.append", "p_records.append", "angles_records.append", "os.path.join", "os.path.join", "adapt_images.process_image", "result_list.append", "adapt_images.process_image", "result_list.append", "camera_model.CameraModel.get_focal_length", "camera_model.CameraModel.get_principal_point", "float", "os.path.isfile", "os.path.isfile", "image.load_image", "list", "image.load_image", "list"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.adapt_images.get_arguments", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.array_utils.list_to_array", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.array_utils.save_txt", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.image.savez_compressed", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.image.savez_compressed", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.image.savez_compressed", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.image.savez_compressed", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.Arcball.next", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.array_utils.save_txt", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.array_utils.save_txt", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.adapt_images.get_intrinsics_parameters", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transform.build_se3_transform", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transform.build_intrinsic_matrix", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.adapt_images.process_image", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.adapt_images.process_image", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.camera_model.CameraModel.get_focal_length", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.camera_model.CameraModel.get_principal_point", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.image.load_image", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.image.load_image"], ["", "def", "main", "(", ")", ":", "\n", "    ", "args", "=", "get_arguments", "(", ")", "\n", "\n", "camera", "=", "re", ".", "search", "(", "'(stereo|mono_(left|right|rear))'", ",", "args", ".", "dir", ")", ".", "group", "(", "0", ")", "\n", "\n", "timestamps_path", "=", "os", ".", "path", ".", "join", "(", "os", ".", "path", ".", "join", "(", "args", ".", "dir", ",", "os", ".", "pardir", ",", "camera", "+", "'.timestamps'", ")", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "timestamps_path", ")", ":", "\n", "      ", "timestamps_path", "=", "os", ".", "path", ".", "join", "(", "args", ".", "dir", ",", "os", ".", "pardir", ",", "os", ".", "pardir", ",", "camera", "+", "'.timestamps'", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "timestamps_path", ")", ":", "\n", "          ", "raise", "IOError", "(", "\"Could not find timestamps file\"", ")", "\n", "\n", "", "", "model", "=", "None", "\n", "if", "args", ".", "models_dir", ":", "\n", "        ", "model", "=", "CameraModel", "(", "args", ".", "models_dir", ",", "args", ".", "dir", ")", "\n", "\n", "", "output_dir", "=", "os", ".", "curdir", "\n", "if", "args", ".", "output_dir", ":", "\n", "            ", "output_dir", "=", "args", ".", "output_dir", "\n", "", "if", "not", "os", ".", "path", ".", "isdir", "(", "output_dir", ")", ":", "\n", "        ", "raise", "IOError", "(", "output_dir", "+", "\"is not an existing folder\"", ")", "\n", "\n", "", "result_list", "=", "[", "]", "\n", "count", "=", "0", "\n", "dictionary", "=", "{", "}", "\n", "t_records", "=", "[", "]", "\n", "p_records", "=", "[", "]", "\n", "angles_records", "=", "[", "]", "\n", "intrinsic_matrix", "=", "None", "\n", "\n", "with", "open", "(", "args", ".", "poses_file", ")", "as", "vo_file", ":", "\n", "            ", "vo_reader", "=", "csv", ".", "reader", "(", "vo_file", ")", "\n", "headers", "=", "next", "(", "vo_file", ")", "\n", "for", "row", "in", "vo_reader", ":", "\n", "                ", "src_image_name", "=", "row", "[", "0", "]", "\n", "dst_image_name", "=", "row", "[", "1", "]", "\n", "src_image_filename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "dir", ",", "src_image_name", "+", "'.png'", ")", "\n", "dst_image_filename", "=", "os", ".", "path", ".", "join", "(", "args", ".", "dir", ",", "dst_image_name", "+", "'.png'", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "src_image_filename", ")", "or", "not", "os", ".", "path", ".", "isfile", "(", "dst_image_filename", ")", ":", "\n", "                    ", "continue", "\n", "", "if", "dst_image_name", "not", "in", "dictionary", ":", "\n", "                    ", "img", ",", "orig_resolution", "=", "process_image", "(", "load_image", "(", "dst_image_filename", ",", "model", ")", ",", "args", ".", "crop", ",", "args", ".", "scale", ")", "\n", "dictionary", "[", "dst_image_name", "]", "=", "count", "\n", "count", "=", "count", "+", "1", "\n", "result_list", ".", "append", "(", "list", "(", "img", ")", ")", "\n", "", "if", "src_image_name", "not", "in", "dictionary", ":", "\n", "                    ", "img", ",", "orig_resolution", "=", "process_image", "(", "load_image", "(", "src_image_filename", ",", "model", ")", ",", "args", ".", "crop", ",", "args", ".", "scale", ")", "\n", "dictionary", "[", "src_image_name", "]", "=", "count", "\n", "count", "=", "count", "+", "1", "\n", "result_list", ".", "append", "(", "list", "(", "img", ")", ")", "\n", "\n", "", "focal_length", ",", "principal_point", "=", "get_intrinsics_parameters", "(", "model", ".", "get_focal_length", "(", ")", ",", "model", ".", "get_principal_point", "(", ")", ",", "orig_resolution", ",", "args", ".", "crop", ",", "args", ".", "scale", ")", "\n", "src_image_idx", "=", "dictionary", "[", "src_image_name", "]", "\n", "dst_image_idx", "=", "dictionary", "[", "dst_image_name", "]", "\n", "xyzrpy", "=", "[", "float", "(", "v", ")", "for", "v", "in", "row", "[", "2", ":", "8", "]", "]", "\n", "rel_pose", "=", "build_se3_transform", "(", "xyzrpy", ")", "\n", "t_matrix", "=", "rel_pose", "[", "0", ":", "3", "]", "# 3x4 matrix", "\n", "intrinsic_matrix", "=", "build_intrinsic_matrix", "(", "focal_length", ",", "principal_point", ")", "\n", "p_matrix", "=", "intrinsic_matrix", "*", "t_matrix", "\n", "t_records", ".", "append", "(", "(", "t_matrix", ",", "src_image_idx", ",", "dst_image_idx", ")", ")", "\n", "p_records", ".", "append", "(", "(", "p_matrix", ",", "src_image_idx", ",", "dst_image_idx", ")", ")", "\n", "angles_records", ".", "append", "(", "(", "xyzrpy", ",", "src_image_idx", ",", "dst_image_idx", ")", ")", "\n", "\n", "", "", "transf", "=", "np", ".", "array", "(", "t_records", ",", "dtype", "=", "[", "(", "'T'", ",", "(", "'float64'", ",", "(", "3", ",", "4", ")", ")", ")", ",", "(", "'src_idx'", ",", "'int32'", ")", ",", "(", "'dst_idx'", ",", "'int32'", ")", "]", ")", "\n", "proy", "=", "np", ".", "array", "(", "p_records", ",", "dtype", "=", "[", "(", "'P'", ",", "(", "'float64'", ",", "(", "3", ",", "4", ")", ")", ")", ",", "(", "'src_idx'", ",", "'int32'", ")", ",", "(", "'dst_idx'", ",", "'int32'", ")", "]", ")", "\n", "angles", "=", "np", ".", "array", "(", "angles_records", ",", "dtype", "=", "[", "(", "'ang'", ",", "(", "'float64'", ",", "6", ")", ")", ",", "(", "'src_idx'", ",", "'int32'", ")", ",", "(", "'dst_idx'", ",", "'int32'", ")", "]", ")", "\n", "# Solo lo guardo una vez porque es constante para todo el dataset (o deberia serlo)", "\n", "if", "intrinsic_matrix", "is", "not", "None", ":", "\n", "        ", "save_txt", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"intrinsic_matrix\"", ")", ",", "intrinsic_matrix", ")", "\n", "save_txt", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"intrinsic_parameters\"", ")", ",", "[", "focal_length", ",", "principal_point", "]", ")", "\n", "#path = os.path.normpath(args.dir)", "\n", "#folders = path.split(os.sep)", "\n", "#compressed_file_path = os.path.join(output_dir, folders[-3])", "\n", "", "result", "=", "list_to_array", "(", "result_list", ")", "\n", "save_txt", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'images_shape'", ")", ",", "result", ".", "shape", ",", "fmt", "=", "'%i'", ")", "\n", "print", "(", "result", ".", "shape", ")", "\n", "compressed_file_path", "=", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'images'", ")", "\n", "savez_compressed", "(", "compressed_file_path", ",", "result", ")", "\n", "savez_compressed", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'t'", ")", ",", "transf", ")", "\n", "savez_compressed", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'p'", ")", ",", "proy", ")", "\n", "savez_compressed", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "'angles'", ")", ",", "angles", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.adapt_images.get_arguments": [[136, 150], ["argparse.ArgumentParser", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.add_argument", "argparse.ArgumentParser.parse_args"], "function", ["None"], ["", "def", "get_arguments", "(", ")", ":", "\n", "    ", "parser", "=", "argparse", ".", "ArgumentParser", "(", "description", "=", "'Play back images from a given directory'", ")", "\n", "parser", ".", "add_argument", "(", "'dir'", ",", "type", "=", "str", ",", "help", "=", "'Directory containing images.'", ")", "\n", "parser", ".", "add_argument", "(", "'poses_file'", ",", "type", "=", "str", ",", "help", "=", "'File containing VO poses'", ")", "\n", "parser", ".", "add_argument", "(", "'--models_dir'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "\n", "help", "=", "'(optional) Directory containing camera model. If supplied, images will be undistorted before display'", ")", "\n", "parser", ".", "add_argument", "(", "'--crop'", ",", "nargs", "=", "2", ",", "default", "=", "None", ",", "type", "=", "int", ",", "metavar", "=", "(", "'WIDTH'", ",", "'HEIGHT'", ")", ",", "\n", "help", "=", "'(optional) If supplied, images will be cropped to WIDTH x HEIGHT'", ")", "\n", "parser", ".", "add_argument", "(", "'--scale'", ",", "nargs", "=", "2", ",", "default", "=", "None", ",", "type", "=", "int", ",", "metavar", "=", "(", "'WIDTH'", ",", "'HEIGHT'", ")", ",", "\n", "help", "=", "'(optional) If supplied, images will be scaled to WIDTH x HEIGHT'", ")", "\n", "parser", ".", "add_argument", "(", "'--output_dir'", ",", "type", "=", "str", ",", "default", "=", "None", ",", "help", "=", "'(optional) Output directory'", ")", "\n", "# parser.add_argument('image_name', type=str, help='Image name.')", "\n", "args", "=", "parser", ".", "parse_args", "(", ")", "\n", "return", "args", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.build_pointcloud.build_pointcloud": [[38, 121], ["re.search().group", "os.path.join", "transform.build_se3_transform", "re.search().group", "numpy.array", "range", "open", "len", "ValueError", "open", "next", "interpolate_poses.interpolate_ins_poses", "interpolate_poses.interpolate_vo_poses", "numpy.empty", "len", "os.path.join", "open", "numpy.fromfile", "open.close", "np.dot.reshape().transpose", "numpy.dot", "numpy.hstack", "IOError", "re.search", "int", "os.path.join", "float", "re.search", "open", "next", "numpy.linalg.solve", "os.path.isfile", "numpy.concatenate", "numpy.zeros", "numpy.dot", "numpy.vstack", "timestamps.append", "next.split", "os.path.join", "transform.build_se3_transform", "str", "np.dot.reshape", "line.split", "numpy.ravel", "numpy.ones", "float", "next.split", "len"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transform.build_se3_transform", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.Arcball.next", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.interpolate_poses.interpolate_ins_poses", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.interpolate_poses.interpolate_vo_poses", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.Arcball.next", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transform.build_se3_transform"], ["def", "build_pointcloud", "(", "lidar_dir", ",", "poses_file", ",", "extrinsics_dir", ",", "start_time", ",", "end_time", ",", "origin_time", "=", "-", "1", ")", ":", "\n", "    ", "\"\"\"Builds a pointcloud by combining multiple LIDAR scans with odometry information.\n\n    Args:\n        lidar_dir (str): Directory containing LIDAR scans.\n        poses_file (str): Path to a file containing pose information. Can be VO or INS data.\n        extrinsics_dir (str): Directory containing extrinsic calibrations.\n        start_time (int): UNIX timestamp of the start of the window over which to build the pointcloud.\n        end_time (int): UNIX timestamp of the end of the window over which to build the pointcloud.\n        origin_time (int): UNIX timestamp of origin frame. Pointcloud coordinates are relative to this frame.\n\n    Returns:\n        numpy.ndarray: 3xn array of (x, y, z) coordinates of pointcloud\n        numpy.array: array of n reflectance values or None if no reflectance values are recorded (LDMRS)\n\n    Raises:\n        ValueError: if specified window doesn't contain any laser scans.\n        IOError: if scan files are not found.\n\n    \"\"\"", "\n", "if", "origin_time", "<", "0", ":", "\n", "        ", "origin_time", "=", "start_time", "\n", "\n", "", "lidar", "=", "re", ".", "search", "(", "'(lms_front|lms_rear|ldmrs)'", ",", "lidar_dir", ")", ".", "group", "(", "0", ")", "\n", "timestamps_path", "=", "os", ".", "path", ".", "join", "(", "lidar_dir", ",", "os", ".", "pardir", ",", "lidar", "+", "'.timestamps'", ")", "\n", "\n", "timestamps", "=", "[", "]", "\n", "with", "open", "(", "timestamps_path", ")", "as", "timestamps_file", ":", "\n", "        ", "for", "line", "in", "timestamps_file", ":", "\n", "            ", "timestamp", "=", "int", "(", "line", ".", "split", "(", "' '", ")", "[", "0", "]", ")", "\n", "if", "start_time", "<=", "timestamp", "<=", "end_time", ":", "\n", "                ", "timestamps", ".", "append", "(", "timestamp", ")", "\n", "\n", "", "", "", "if", "len", "(", "timestamps", ")", "==", "0", ":", "\n", "        ", "raise", "ValueError", "(", "\"No LIDAR data in the given time bracket.\"", ")", "\n", "\n", "", "with", "open", "(", "os", ".", "path", ".", "join", "(", "extrinsics_dir", ",", "lidar", "+", "'.txt'", ")", ")", "as", "extrinsics_file", ":", "\n", "        ", "extrinsics", "=", "next", "(", "extrinsics_file", ")", "\n", "", "G_posesource_laser", "=", "build_se3_transform", "(", "[", "float", "(", "x", ")", "for", "x", "in", "extrinsics", ".", "split", "(", "' '", ")", "]", ")", "\n", "\n", "poses_type", "=", "re", ".", "search", "(", "'(vo|ins)\\.csv'", ",", "poses_file", ")", ".", "group", "(", "1", ")", "\n", "\n", "if", "poses_type", "==", "'ins'", ":", "\n", "        ", "with", "open", "(", "os", ".", "path", ".", "join", "(", "extrinsics_dir", ",", "'ins.txt'", ")", ")", "as", "extrinsics_file", ":", "\n", "            ", "extrinsics", "=", "next", "(", "extrinsics_file", ")", "\n", "G_posesource_laser", "=", "np", ".", "linalg", ".", "solve", "(", "build_se3_transform", "(", "[", "float", "(", "x", ")", "for", "x", "in", "extrinsics", ".", "split", "(", "' '", ")", "]", ")", ",", "\n", "G_posesource_laser", ")", "\n", "\n", "", "poses", "=", "interpolate_ins_poses", "(", "poses_file", ",", "timestamps", ",", "origin_time", ")", "\n", "", "else", ":", "\n", "# sensor is VO, which is located at the main vehicle frame", "\n", "        ", "poses", "=", "interpolate_vo_poses", "(", "poses_file", ",", "timestamps", ",", "origin_time", ")", "\n", "\n", "", "pointcloud", "=", "np", ".", "array", "(", "[", "[", "0", "]", ",", "[", "0", "]", ",", "[", "0", "]", ",", "[", "0", "]", "]", ")", "\n", "if", "lidar", "==", "'ldmrs'", ":", "\n", "        ", "reflectance", "=", "None", "\n", "", "else", ":", "\n", "        ", "reflectance", "=", "np", ".", "empty", "(", "(", "0", ")", ")", "\n", "\n", "", "for", "i", "in", "range", "(", "0", ",", "len", "(", "poses", ")", ")", ":", "\n", "        ", "scan_path", "=", "os", ".", "path", ".", "join", "(", "lidar_dir", ",", "str", "(", "timestamps", "[", "i", "]", ")", "+", "'.bin'", ")", "\n", "if", "not", "os", ".", "path", ".", "isfile", "(", "scan_path", ")", ":", "\n", "            ", "continue", "\n", "\n", "", "scan_file", "=", "open", "(", "scan_path", ")", "\n", "scan", "=", "np", ".", "fromfile", "(", "scan_file", ",", "np", ".", "double", ")", "\n", "scan_file", ".", "close", "(", ")", "\n", "\n", "scan", "=", "scan", ".", "reshape", "(", "(", "len", "(", "scan", ")", "//", "3", ",", "3", ")", ")", ".", "transpose", "(", ")", "\n", "\n", "if", "lidar", "!=", "'ldmrs'", ":", "\n", "# LMS scans are tuples of (x, y, reflectance)", "\n", "            ", "reflectance", "=", "np", ".", "concatenate", "(", "(", "reflectance", ",", "np", ".", "ravel", "(", "scan", "[", "2", ",", ":", "]", ")", ")", ")", "\n", "scan", "[", "2", ",", ":", "]", "=", "np", ".", "zeros", "(", "(", "1", ",", "scan", ".", "shape", "[", "1", "]", ")", ")", "\n", "\n", "", "scan", "=", "np", ".", "dot", "(", "np", ".", "dot", "(", "poses", "[", "i", "]", ",", "G_posesource_laser", ")", ",", "np", ".", "vstack", "(", "[", "scan", ",", "np", ".", "ones", "(", "(", "1", ",", "scan", ".", "shape", "[", "1", "]", ")", ")", "]", ")", ")", "\n", "pointcloud", "=", "np", ".", "hstack", "(", "[", "pointcloud", ",", "scan", "]", ")", "\n", "\n", "", "pointcloud", "=", "pointcloud", "[", ":", ",", "1", ":", "]", "\n", "if", "pointcloud", ".", "shape", "[", "1", "]", "==", "0", ":", "\n", "        ", "raise", "IOError", "(", "\"Could not find scan files for given time range in directory \"", "+", "lidar_dir", ")", "\n", "\n", "", "return", "pointcloud", ",", "reflectance", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.array_utils.save_txt": [[22, 24], ["numpy.savetxt"], "function", ["None"], ["def", "save_txt", "(", "name", ",", "array", ",", "fmt", "=", "'%1.6f'", ")", ":", "\n", "    ", "np", ".", "savetxt", "(", "name", "+", "'.txt'", ",", "array", ",", "delimiter", "=", "' '", ",", "fmt", "=", "fmt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.array_utils.load": [[25, 27], ["numpy.loadtxt"], "function", ["None"], ["", "def", "load", "(", "name", ")", ":", "\n", "    ", "return", "np", ".", "loadtxt", "(", "name", ",", "delimiter", "=", "' '", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.array_utils.save_as_list": [[28, 30], ["numpy.savetxt", "array.ravel"], "function", ["None"], ["", "def", "save_as_list", "(", "name", ",", "array", ",", "fmt", "=", "'%1.6f'", ")", ":", "\n", "    ", "np", ".", "savetxt", "(", "name", "+", "'.txt'", ",", "array", ".", "ravel", "(", ")", ",", "delimiter", "=", "' '", ",", "fmt", "=", "fmt", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.array_utils.list_to_array": [[31, 33], ["numpy.array"], "function", ["None"], ["", "def", "list_to_array", "(", "list", ")", ":", "\n", "    ", "return", "np", ".", "array", "(", "list", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.array_utils.save_npy": [[34, 36], ["numpy.save"], "function", ["None"], ["", "def", "save_npy", "(", "name", ",", "arr", ")", ":", "\n", "    ", "np", ".", "save", "(", "name", ",", "arr", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.array_utils.load_npy": [[37, 39], ["numpy.load"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.tflib.cifar10.load"], ["", "def", "load_npy", "(", "name", ")", ":", "\n", "    ", "return", "np", ".", "load", "(", "name", ")", "", "", ""]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.image.load_image": [[40, 68], ["re.search().group", "colour_demosaicing.demosaicing_CFA_Bayer_bilinear", "model.undistort", "image.rgb_2_grey", "image.non_demosaic_load", "isinstance", "PIL.Image.open", "re.search"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.camera_model.CameraModel.undistort", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.image.rgb_2_grey", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.image.non_demosaic_load"], ["def", "load_image", "(", "image_path", ",", "model", "=", "None", ")", ":", "\n", "    ", "\"\"\"Loads and rectifies an image from file.\n\n    Args:\n        image_path (str): path to an image from the dataset.\n        model (camera_model.CameraModel): if supplied, model will be used to undistort image.\n\n    Returns:\n        numpy.ndarray: demosaiced and optionally undistorted image\n\n    \"\"\"", "\n", "if", "model", ":", "\n", "        ", "camera", "=", "model", ".", "camera", "\n", "", "else", ":", "\n", "        ", "camera", "=", "re", ".", "search", "(", "'(stereo|mono_(left|right|rear))'", ",", "image_path", ")", ".", "group", "(", "0", ")", "\n", "", "if", "camera", "==", "'stereo'", ":", "\n", "        ", "pattern", "=", "BAYER_STEREO", "\n", "", "else", ":", "\n", "        ", "pattern", "=", "BAYER_MONO", "\n", "\n", "", "if", "model", ":", "\n", "        ", "img", "=", "demosaic", "(", "Image", ".", "open", "(", "image_path", ")", ",", "pattern", ")", "\n", "img", "=", "model", ".", "undistort", "(", "img", ")", "\n", "img", "=", "rgb_2_grey", "(", "img", ")", "\n", "", "else", ":", "\n", "        ", "img", "=", "non_demosaic_load", "(", "image_path", ")", "\n", "", "assert", "isinstance", "(", "img", ",", "np", ".", "ndarray", ")", "and", "img", ".", "dtype", "==", "np", ".", "uint8", "and", "img", ".", "flags", ".", "contiguous", "\n", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.image.non_demosaic_load": [[69, 71], ["scipy.misc.imread"], "function", ["None"], ["", "def", "non_demosaic_load", "(", "image_path", ")", ":", "\n", "    ", "return", "imread", "(", "image_path", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.image.crop_image": [[73, 79], ["None"], "function", ["None"], ["", "def", "crop_image", "(", "num_array", ",", "cropx", ",", "cropy", ")", ":", "\n", "    ", "y", "=", "num_array", ".", "shape", "[", "0", "]", "\n", "x", "=", "num_array", ".", "shape", "[", "1", "]", "\n", "startx", "=", "x", "//", "2", "-", "(", "cropx", "//", "2", ")", "\n", "starty", "=", "y", "//", "2", "-", "(", "cropy", "//", "2", ")", "\n", "return", "num_array", "[", "starty", ":", "starty", "+", "cropy", ",", "startx", ":", "startx", "+", "cropx", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.image.scale_image": [[80, 82], ["scipy.misc.imresize"], "function", ["None"], ["", "def", "scale_image", "(", "num_array", ",", "sizex", ",", "sizey", ")", ":", "\n", "    ", "return", "imresize", "(", "num_array", ",", "(", "sizey", ",", "sizex", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.image.save_image": [[83, 85], ["scipy.misc.imsave"], "function", ["None"], ["", "def", "save_image", "(", "num_array", ",", "path", ")", ":", "\n", "    ", "imsave", "(", "path", ",", "num_array", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.image.savez_compressed": [[86, 88], ["numpy.savez_compressed"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.image.savez_compressed"], ["", "def", "savez_compressed", "(", "path", ",", "array", ")", ":", "\n", "    ", "np", ".", "savez_compressed", "(", "path", ",", "array", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.image.rgb_2_grey": [[89, 91], ["numpy.dot().astype", "numpy.dot"], "function", ["None"], ["", "def", "rgb_2_grey", "(", "img", ")", ":", "\n", "    ", "return", "np", ".", "dot", "(", "img", "[", "...", ",", ":", "3", "]", ",", "[", "0.299", ",", "0.587", ",", "0.114", "]", ")", ".", "astype", "(", "img", ".", "dtype", ")", "", "", ""]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.GeneratorAndDiscriminator": [[94, 134], ["Exception", "print", "print", "print"], "function", ["None"], ["def", "GeneratorAndDiscriminator", "(", "type", ")", ":", "\n", "    ", "\"\"\"\n    Choose which generator and discriminator architecture to use by\n    uncommenting one of these lines.\n    \"\"\"", "\n", "if", "type", "==", "\"Good\"", ":", "\n", "        ", "print", "(", "\"Using good Generator and good Discriminator\"", ")", "\n", "return", "GoodGenerator", ",", "GoodDiscriminator", "\n", "", "elif", "type", "==", "\"DCGAN\"", ":", "\n", "        ", "print", "(", "\"Using DCGANGenerator and DCGANDiscriminator\"", ")", "\n", "return", "DCGANGenerator", ",", "DCGANDiscriminator", "\n", "", "elif", "type", "==", "\"VGG\"", ":", "\n", "        ", "print", "(", "\"Using DCGANGenerator and VGGDiscriminator\"", ")", "\n", "return", "DCGANGenerator", ",", "VGGDiscriminator", "\n", "# For actually generating decent samples, use this one", "\n", "# return GoodGenerator, GoodDiscriminator", "\n", "\n", "# Baseline (G: DCGAN, D: DCGAN)", "\n", "# return DCGANGenerator, DCGANDiscriminator", "\n", "\n", "# No BN and constant number of filts in G", "\n", "# return WGANPaper_CrippledDCGANGenerator, DCGANDiscriminator", "\n", "\n", "# 512-dim 4-layer ReLU MLP G", "\n", "# return FCGenerator, DCGANDiscriminator", "\n", "\n", "# No normalization anywhere", "\n", "# return functools.partial(DCGANGenerator, bn=False), functools.partial(DCGANDiscriminator, bn=False)", "\n", "\n", "# Gated multiplicative nonlinearities everywhere", "\n", "# return MultiplicativeDCGANGenerator, MultiplicativeDCGANDiscriminator", "\n", "\n", "# tanh nonlinearities everywhere", "\n", "# return functools.partial(DCGANGenerator, bn=True, nonlinearity=tf.tanh), \\", "\n", "#        functools.partial(DCGANDiscriminator, bn=True, nonlinearity=tf.tanh)", "\n", "\n", "# 101-layer ResNet G and D", "\n", "# return ResnetGenerator, ResnetDiscriminator", "\n", "\n", "", "raise", "Exception", "(", "'You must choose an architecture!'", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.LeakyReLU": [[139, 141], ["tensorflow.maximum"], "function", ["None"], ["def", "LeakyReLU", "(", "x", ",", "alpha", "=", "0.2", ")", ":", "\n", "    ", "return", "tf", ".", "maximum", "(", "alpha", "*", "x", ",", "x", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.ReLULayer": [[143, 146], ["tflib.ops.linear.Linear", "tensorflow.nn.relu"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.linear.Linear"], ["", "def", "ReLULayer", "(", "name", ",", "n_in", ",", "n_out", ",", "inputs", ")", ":", "\n", "    ", "output", "=", "lib", ".", "ops", ".", "linear", ".", "Linear", "(", "name", "+", "'.Linear'", ",", "n_in", ",", "n_out", ",", "inputs", ",", "initialization", "=", "'he'", ")", "\n", "return", "tf", ".", "nn", ".", "relu", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.LeakyReLULayer": [[148, 151], ["tflib.ops.linear.Linear", "wgan_improved.LeakyReLU"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.linear.Linear", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.LeakyReLU"], ["", "def", "LeakyReLULayer", "(", "name", ",", "n_in", ",", "n_out", ",", "inputs", ")", ":", "\n", "    ", "output", "=", "lib", ".", "ops", ".", "linear", ".", "Linear", "(", "name", "+", "'.Linear'", ",", "n_in", ",", "n_out", ",", "inputs", ",", "initialization", "=", "'he'", ")", "\n", "return", "LeakyReLU", "(", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.Normalize": [[153, 160], ["tflib.ops.layernorm.Layernorm", "tflib.ops.batchnorm.Batchnorm", "Exception"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.layernorm.Layernorm", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.cond_batchnorm.Batchnorm"], ["", "def", "Normalize", "(", "name", ",", "axes", ",", "inputs", ")", ":", "\n", "    ", "if", "(", "'Discriminator'", "in", "name", ")", "and", "(", "MODE", "==", "'wgan-gp'", ")", ":", "\n", "        ", "if", "axes", "!=", "[", "0", ",", "2", ",", "3", "]", ":", "\n", "            ", "raise", "Exception", "(", "'Layernorm over non-standard axes is unsupported'", ")", "\n", "", "return", "lib", ".", "ops", ".", "layernorm", ".", "Layernorm", "(", "name", ",", "[", "1", ",", "2", ",", "3", "]", ",", "inputs", ")", "\n", "", "else", ":", "\n", "        ", "return", "lib", ".", "ops", ".", "batchnorm", ".", "Batchnorm", "(", "name", ",", "axes", ",", "inputs", ",", "fused", "=", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.pixcnn_gated_nonlinearity": [[162, 164], ["tensorflow.sigmoid", "tensorflow.tanh"], "function", ["None"], ["", "", "def", "pixcnn_gated_nonlinearity", "(", "a", ",", "b", ")", ":", "\n", "    ", "return", "tf", ".", "sigmoid", "(", "a", ")", "*", "tf", ".", "tanh", "(", "b", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.SubpixelConv2D": [[166, 173], ["tflib.ops.conv2d.Conv2D", "tensorflow.transpose", "tensorflow.depth_to_space", "tensorflow.transpose"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.conv2d.Conv2D"], ["", "def", "SubpixelConv2D", "(", "*", "args", ",", "**", "kwargs", ")", ":", "\n", "    ", "kwargs", "[", "'output_dim'", "]", "=", "4", "*", "kwargs", "[", "'output_dim'", "]", "\n", "output", "=", "lib", ".", "ops", ".", "conv2d", ".", "Conv2D", "(", "*", "args", ",", "**", "kwargs", ")", "\n", "output", "=", "tf", ".", "transpose", "(", "output", ",", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "output", "=", "tf", ".", "depth_to_space", "(", "output", ",", "2", ")", "\n", "output", "=", "tf", ".", "transpose", "(", "output", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.ConvMeanPool": [[175, 180], ["tflib.ops.conv2d.Conv2D", "tensorflow.add_n"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.conv2d.Conv2D"], ["", "def", "ConvMeanPool", "(", "name", ",", "input_dim", ",", "output_dim", ",", "filter_size", ",", "inputs", ",", "he_init", "=", "True", ",", "biases", "=", "True", ")", ":", "\n", "    ", "output", "=", "lib", ".", "ops", ".", "conv2d", ".", "Conv2D", "(", "name", ",", "input_dim", ",", "output_dim", ",", "filter_size", ",", "inputs", ",", "he_init", "=", "he_init", ",", "biases", "=", "biases", ")", "\n", "output", "=", "tf", ".", "add_n", "(", "\n", "[", "output", "[", ":", ",", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", ",", "output", "[", ":", ",", ":", ",", "1", ":", ":", "2", ",", ":", ":", "2", "]", ",", "output", "[", ":", ",", ":", ",", ":", ":", "2", ",", "1", ":", ":", "2", "]", ",", "output", "[", ":", ",", ":", ",", "1", ":", ":", "2", ",", "1", ":", ":", "2", "]", "]", ")", "/", "4.", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.MeanPoolConv": [[182, 188], ["tflib.ops.conv2d.Conv2D", "tensorflow.add_n"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.conv2d.Conv2D"], ["", "def", "MeanPoolConv", "(", "name", ",", "input_dim", ",", "output_dim", ",", "filter_size", ",", "inputs", ",", "he_init", "=", "True", ",", "biases", "=", "True", ")", ":", "\n", "    ", "output", "=", "inputs", "\n", "output", "=", "tf", ".", "add_n", "(", "\n", "[", "output", "[", ":", ",", ":", ",", ":", ":", "2", ",", ":", ":", "2", "]", ",", "output", "[", ":", ",", ":", ",", "1", ":", ":", "2", ",", ":", ":", "2", "]", ",", "output", "[", ":", ",", ":", ",", ":", ":", "2", ",", "1", ":", ":", "2", "]", ",", "output", "[", ":", ",", ":", ",", "1", ":", ":", "2", ",", "1", ":", ":", "2", "]", "]", ")", "/", "4.", "\n", "output", "=", "lib", ".", "ops", ".", "conv2d", ".", "Conv2D", "(", "name", ",", "input_dim", ",", "output_dim", ",", "filter_size", ",", "output", ",", "he_init", "=", "he_init", ",", "biases", "=", "biases", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.UpsampleConv": [[190, 198], ["tensorflow.concat", "tensorflow.transpose", "tensorflow.depth_to_space", "tensorflow.transpose", "tflib.ops.conv2d.Conv2D"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.conv2d.Conv2D"], ["", "def", "UpsampleConv", "(", "name", ",", "input_dim", ",", "output_dim", ",", "filter_size", ",", "inputs", ",", "he_init", "=", "True", ",", "biases", "=", "True", ")", ":", "\n", "    ", "output", "=", "inputs", "\n", "output", "=", "tf", ".", "concat", "(", "[", "output", ",", "output", ",", "output", ",", "output", "]", ",", "axis", "=", "1", ")", "\n", "output", "=", "tf", ".", "transpose", "(", "output", ",", "[", "0", ",", "2", ",", "3", ",", "1", "]", ")", "\n", "output", "=", "tf", ".", "depth_to_space", "(", "output", ",", "2", ")", "\n", "output", "=", "tf", ".", "transpose", "(", "output", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "output", "=", "lib", ".", "ops", ".", "conv2d", ".", "Conv2D", "(", "name", ",", "input_dim", ",", "output_dim", ",", "filter_size", ",", "output", ",", "he_init", "=", "he_init", ",", "biases", "=", "biases", ")", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.BottleneckResidualBlock": [[200, 239], ["tensorflow.nn.relu", "functools.partial.", "tensorflow.nn.relu", "functools.partial.", "tensorflow.nn.relu", "functools.partial.", "wgan_improved.Normalize", "functools.partial", "functools.partial", "functools.partial", "functools.partial", "functools.partial.", "functools.partial", "functools.partial", "functools.partial", "functools.partial", "functools.partial", "functools.partial", "Exception"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.Normalize"], ["", "def", "BottleneckResidualBlock", "(", "name", ",", "input_dim", ",", "output_dim", ",", "filter_size", ",", "inputs", ",", "resample", "=", "None", ",", "he_init", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    resample: None, 'down', or 'up'\n    \"\"\"", "\n", "if", "resample", "==", "'down'", ":", "\n", "        ", "conv_shortcut", "=", "functools", ".", "partial", "(", "lib", ".", "ops", ".", "conv2d", ".", "Conv2D", ",", "stride", "=", "2", ")", "\n", "conv_1", "=", "functools", ".", "partial", "(", "lib", ".", "ops", ".", "conv2d", ".", "Conv2D", ",", "input_dim", "=", "input_dim", ",", "output_dim", "=", "input_dim", "/", "2", ")", "\n", "conv_1b", "=", "functools", ".", "partial", "(", "lib", ".", "ops", ".", "conv2d", ".", "Conv2D", ",", "input_dim", "=", "input_dim", "/", "2", ",", "output_dim", "=", "output_dim", "/", "2", ",", "stride", "=", "2", ")", "\n", "conv_2", "=", "functools", ".", "partial", "(", "lib", ".", "ops", ".", "conv2d", ".", "Conv2D", ",", "input_dim", "=", "output_dim", "/", "2", ",", "output_dim", "=", "output_dim", ")", "\n", "", "elif", "resample", "==", "'up'", ":", "\n", "        ", "conv_shortcut", "=", "SubpixelConv2D", "\n", "conv_1", "=", "functools", ".", "partial", "(", "lib", ".", "ops", ".", "conv2d", ".", "Conv2D", ",", "input_dim", "=", "input_dim", ",", "output_dim", "=", "input_dim", "/", "2", ")", "\n", "conv_1b", "=", "functools", ".", "partial", "(", "lib", ".", "ops", ".", "deconv2d", ".", "Deconv2D", ",", "input_dim", "=", "input_dim", "/", "2", ",", "output_dim", "=", "output_dim", "/", "2", ")", "\n", "conv_2", "=", "functools", ".", "partial", "(", "lib", ".", "ops", ".", "conv2d", ".", "Conv2D", ",", "input_dim", "=", "output_dim", "/", "2", ",", "output_dim", "=", "output_dim", ")", "\n", "", "elif", "resample", "==", "None", ":", "\n", "        ", "conv_shortcut", "=", "lib", ".", "ops", ".", "conv2d", ".", "Conv2D", "\n", "conv_1", "=", "functools", ".", "partial", "(", "lib", ".", "ops", ".", "conv2d", ".", "Conv2D", ",", "input_dim", "=", "input_dim", ",", "output_dim", "=", "input_dim", "/", "2", ")", "\n", "conv_1b", "=", "functools", ".", "partial", "(", "lib", ".", "ops", ".", "conv2d", ".", "Conv2D", ",", "input_dim", "=", "input_dim", "/", "2", ",", "output_dim", "=", "output_dim", "/", "2", ")", "\n", "conv_2", "=", "functools", ".", "partial", "(", "lib", ".", "ops", ".", "conv2d", ".", "Conv2D", ",", "input_dim", "=", "input_dim", "/", "2", ",", "output_dim", "=", "output_dim", ")", "\n", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'invalid resample value'", ")", "\n", "\n", "", "if", "output_dim", "==", "input_dim", "and", "resample", "==", "None", ":", "\n", "        ", "shortcut", "=", "inputs", "# Identity skip-connection", "\n", "", "else", ":", "\n", "        ", "shortcut", "=", "conv_shortcut", "(", "name", "+", "'.Shortcut'", ",", "input_dim", "=", "input_dim", ",", "output_dim", "=", "output_dim", ",", "filter_size", "=", "1", ",", "\n", "he_init", "=", "False", ",", "biases", "=", "True", ",", "inputs", "=", "inputs", ")", "\n", "\n", "", "output", "=", "inputs", "\n", "output", "=", "tf", ".", "nn", ".", "relu", "(", "output", ")", "\n", "output", "=", "conv_1", "(", "name", "+", "'.Conv1'", ",", "filter_size", "=", "1", ",", "inputs", "=", "output", ",", "he_init", "=", "he_init", ")", "\n", "output", "=", "tf", ".", "nn", ".", "relu", "(", "output", ")", "\n", "output", "=", "conv_1b", "(", "name", "+", "'.Conv1B'", ",", "filter_size", "=", "filter_size", ",", "inputs", "=", "output", ",", "he_init", "=", "he_init", ")", "\n", "output", "=", "tf", ".", "nn", ".", "relu", "(", "output", ")", "\n", "output", "=", "conv_2", "(", "name", "+", "'.Conv2'", ",", "filter_size", "=", "1", ",", "inputs", "=", "output", ",", "he_init", "=", "he_init", ",", "biases", "=", "False", ")", "\n", "output", "=", "Normalize", "(", "name", "+", "'.BN'", ",", "[", "0", ",", "2", ",", "3", "]", ",", "output", ")", "\n", "\n", "return", "shortcut", "+", "(", "0.3", "*", "output", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.ResidualBlock": [[241, 275], ["wgan_improved.Normalize", "tensorflow.nn.relu", "functools.partial.", "wgan_improved.Normalize", "tensorflow.nn.relu", "functools.partial.", "functools.partial", "functools.partial", "conv_shortcut", "functools.partial", "functools.partial", "functools.partial", "functools.partial", "Exception"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.Normalize", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.Normalize"], ["", "def", "ResidualBlock", "(", "name", ",", "input_dim", ",", "output_dim", ",", "filter_size", ",", "inputs", ",", "resample", "=", "None", ",", "he_init", "=", "True", ")", ":", "\n", "    ", "\"\"\"\n    resample: None, 'down', or 'up'\n    \"\"\"", "\n", "if", "resample", "==", "'down'", ":", "\n", "        ", "conv_shortcut", "=", "MeanPoolConv", "\n", "conv_1", "=", "functools", ".", "partial", "(", "lib", ".", "ops", ".", "conv2d", ".", "Conv2D", ",", "input_dim", "=", "input_dim", ",", "output_dim", "=", "input_dim", ")", "\n", "conv_2", "=", "functools", ".", "partial", "(", "ConvMeanPool", ",", "input_dim", "=", "input_dim", ",", "output_dim", "=", "output_dim", ")", "\n", "", "elif", "resample", "==", "'up'", ":", "\n", "        ", "conv_shortcut", "=", "UpsampleConv", "\n", "conv_1", "=", "functools", ".", "partial", "(", "UpsampleConv", ",", "input_dim", "=", "input_dim", ",", "output_dim", "=", "output_dim", ")", "\n", "conv_2", "=", "functools", ".", "partial", "(", "lib", ".", "ops", ".", "conv2d", ".", "Conv2D", ",", "input_dim", "=", "output_dim", ",", "output_dim", "=", "output_dim", ")", "\n", "", "elif", "resample", "==", "None", ":", "\n", "        ", "conv_shortcut", "=", "lib", ".", "ops", ".", "conv2d", ".", "Conv2D", "\n", "conv_1", "=", "functools", ".", "partial", "(", "lib", ".", "ops", ".", "conv2d", ".", "Conv2D", ",", "input_dim", "=", "input_dim", ",", "output_dim", "=", "input_dim", ")", "\n", "conv_2", "=", "functools", ".", "partial", "(", "lib", ".", "ops", ".", "conv2d", ".", "Conv2D", ",", "input_dim", "=", "input_dim", ",", "output_dim", "=", "output_dim", ")", "\n", "", "else", ":", "\n", "        ", "raise", "Exception", "(", "'invalid resample value'", ")", "\n", "\n", "", "if", "output_dim", "==", "input_dim", "and", "resample", "==", "None", ":", "\n", "        ", "shortcut", "=", "inputs", "# Identity skip-connection", "\n", "", "else", ":", "\n", "        ", "shortcut", "=", "conv_shortcut", "(", "name", "+", "'.Shortcut'", ",", "input_dim", "=", "input_dim", ",", "output_dim", "=", "output_dim", ",", "filter_size", "=", "1", ",", "\n", "he_init", "=", "False", ",", "biases", "=", "True", ",", "inputs", "=", "inputs", ")", "\n", "\n", "", "output", "=", "inputs", "\n", "output", "=", "Normalize", "(", "name", "+", "'.BN1'", ",", "[", "0", ",", "2", ",", "3", "]", ",", "output", ")", "\n", "output", "=", "tf", ".", "nn", ".", "relu", "(", "output", ")", "\n", "output", "=", "conv_1", "(", "name", "+", "'.Conv1'", ",", "filter_size", "=", "filter_size", ",", "inputs", "=", "output", ",", "he_init", "=", "he_init", ",", "biases", "=", "False", ")", "\n", "output", "=", "Normalize", "(", "name", "+", "'.BN2'", ",", "[", "0", ",", "2", ",", "3", "]", ",", "output", ")", "\n", "output", "=", "tf", ".", "nn", ".", "relu", "(", "output", ")", "\n", "output", "=", "conv_2", "(", "name", "+", "'.Conv2'", ",", "filter_size", "=", "filter_size", ",", "inputs", "=", "output", ",", "he_init", "=", "he_init", ")", "\n", "\n", "return", "shortcut", "+", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.GoodGenerator": [[279, 299], ["tflib.ops.linear.Linear", "tensorflow.reshape", "wgan_improved.ResidualBlock", "wgan_improved.ResidualBlock", "wgan_improved.ResidualBlock", "wgan_improved.ResidualBlock", "wgan_improved.Normalize", "tensorflow.nn.relu", "tflib.ops.conv2d.Conv2D", "tensorflow.tanh", "tensorflow.reshape", "tensorflow.random_normal"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.linear.Linear", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.ResidualBlock", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.ResidualBlock", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.ResidualBlock", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.ResidualBlock", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.Normalize", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.conv2d.Conv2D"], ["", "def", "GoodGenerator", "(", "n_samples", ",", "noise", "=", "None", ",", "dim", "=", "DIM", ",", "nonlinearity", "=", "tf", ".", "nn", ".", "relu", ")", ":", "\n", "    ", "width", "=", "IMAGE_WIDTH", "/", "16", "# width inicial = 4 en DCGAN original, resulta en una imagen generada con width = 64", "\n", "height", "=", "IMAGE_HEIGHT", "/", "16", "\n", "if", "noise", "is", "None", ":", "\n", "        ", "noise", "=", "tf", ".", "random_normal", "(", "[", "n_samples", ",", "128", "]", ")", "\n", "\n", "", "output", "=", "lib", ".", "ops", ".", "linear", ".", "Linear", "(", "'Generator.Input'", ",", "128", ",", "width", "*", "height", "*", "8", "*", "dim", ",", "noise", ")", "\n", "output", "=", "tf", ".", "reshape", "(", "output", ",", "[", "-", "1", ",", "8", "*", "dim", ",", "height", ",", "width", "]", ")", "\n", "\n", "output", "=", "ResidualBlock", "(", "'Generator.Res1'", ",", "8", "*", "dim", ",", "8", "*", "dim", ",", "3", ",", "output", ",", "resample", "=", "'up'", ")", "\n", "output", "=", "ResidualBlock", "(", "'Generator.Res2'", ",", "8", "*", "dim", ",", "4", "*", "dim", ",", "3", ",", "output", ",", "resample", "=", "'up'", ")", "\n", "output", "=", "ResidualBlock", "(", "'Generator.Res3'", ",", "4", "*", "dim", ",", "2", "*", "dim", ",", "3", ",", "output", ",", "resample", "=", "'up'", ")", "\n", "output", "=", "ResidualBlock", "(", "'Generator.Res4'", ",", "2", "*", "dim", ",", "1", "*", "dim", ",", "3", ",", "output", ",", "resample", "=", "'up'", ")", "\n", "\n", "output", "=", "Normalize", "(", "'Generator.OutputN'", ",", "[", "0", ",", "2", ",", "3", "]", ",", "output", ")", "\n", "output", "=", "tf", ".", "nn", ".", "relu", "(", "output", ")", "\n", "output", "=", "lib", ".", "ops", ".", "conv2d", ".", "Conv2D", "(", "'Generator.Output'", ",", "1", "*", "dim", ",", "IMAGE_CHANNELS", ",", "3", ",", "output", ")", "\n", "output", "=", "tf", ".", "tanh", "(", "output", ")", "\n", "\n", "return", "tf", ".", "reshape", "(", "output", ",", "[", "-", "1", ",", "IMAGE_CHANNELS", "*", "IMAGE_WIDTH", "*", "IMAGE_HEIGHT", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.FCGenerator": [[301, 314], ["wgan_improved.ReLULayer", "wgan_improved.ReLULayer", "wgan_improved.ReLULayer", "wgan_improved.ReLULayer", "tflib.ops.linear.Linear", "tensorflow.tanh", "tensorflow.random_normal"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.ReLULayer", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.ReLULayer", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.ReLULayer", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.ReLULayer", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.linear.Linear"], ["", "def", "FCGenerator", "(", "n_samples", ",", "noise", "=", "None", ",", "FC_DIM", "=", "512", ")", ":", "\n", "    ", "if", "noise", "is", "None", ":", "\n", "        ", "noise", "=", "tf", ".", "random_normal", "(", "[", "n_samples", ",", "128", "]", ")", "\n", "\n", "", "output", "=", "ReLULayer", "(", "'Generator.1'", ",", "128", ",", "FC_DIM", ",", "noise", ")", "\n", "output", "=", "ReLULayer", "(", "'Generator.2'", ",", "FC_DIM", ",", "FC_DIM", ",", "output", ")", "\n", "output", "=", "ReLULayer", "(", "'Generator.3'", ",", "FC_DIM", ",", "FC_DIM", ",", "output", ")", "\n", "output", "=", "ReLULayer", "(", "'Generator.4'", ",", "FC_DIM", ",", "FC_DIM", ",", "output", ")", "\n", "output", "=", "lib", ".", "ops", ".", "linear", ".", "Linear", "(", "'Generator.Out'", ",", "FC_DIM", ",", "OUTPUT_DIM", ",", "output", ")", "\n", "\n", "output", "=", "tf", ".", "tanh", "(", "output", ")", "\n", "\n", "return", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.DCGANGenerator": [[316, 354], ["tflib.ops.conv2d.set_weights_stdev", "tflib.ops.deconv2d.set_weights_stdev", "tflib.ops.linear.set_weights_stdev", "tflib.ops.linear.Linear", "tensorflow.reshape", "nonlinearity", "tflib.ops.deconv2d.Deconv2D", "nonlinearity", "tflib.ops.deconv2d.Deconv2D", "nonlinearity", "tflib.ops.deconv2d.Deconv2D", "nonlinearity", "tflib.ops.deconv2d.Deconv2D", "tensorflow.tanh", "tflib.ops.conv2d.unset_weights_stdev", "tflib.ops.deconv2d.unset_weights_stdev", "tflib.ops.linear.unset_weights_stdev", "tensorflow.reshape", "tensorflow.random_normal", "wgan_improved.Normalize", "wgan_improved.Normalize", "wgan_improved.Normalize", "wgan_improved.Normalize"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.linear.set_weights_stdev", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.linear.set_weights_stdev", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.linear.set_weights_stdev", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.linear.Linear", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.deconv2d.Deconv2D", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.deconv2d.Deconv2D", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.deconv2d.Deconv2D", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.deconv2d.Deconv2D", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.linear.unset_weights_stdev", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.linear.unset_weights_stdev", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.linear.unset_weights_stdev", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.Normalize", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.Normalize", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.Normalize", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.Normalize"], ["", "def", "DCGANGenerator", "(", "n_samples", ",", "noise", "=", "None", ",", "dim", "=", "DIM", ",", "bn", "=", "True", ",", "nonlinearity", "=", "tf", ".", "nn", ".", "relu", ")", ":", "\n", "    ", "lib", ".", "ops", ".", "conv2d", ".", "set_weights_stdev", "(", "0.02", ")", "\n", "lib", ".", "ops", ".", "deconv2d", ".", "set_weights_stdev", "(", "0.02", ")", "\n", "lib", ".", "ops", ".", "linear", ".", "set_weights_stdev", "(", "0.02", ")", "\n", "width", "=", "IMAGE_WIDTH", "/", "16", "# width inicial = 4 en DCGAN original, resulta en una imagen generada con width = 64", "\n", "height", "=", "IMAGE_HEIGHT", "/", "16", "\n", "if", "noise", "is", "None", ":", "\n", "        ", "noise", "=", "tf", ".", "random_normal", "(", "[", "n_samples", ",", "128", "]", ")", "\n", "\n", "", "output", "=", "lib", ".", "ops", ".", "linear", ".", "Linear", "(", "'Generator.Input'", ",", "128", ",", "width", "*", "height", "*", "8", "*", "dim", ",", "noise", ")", "\n", "output", "=", "tf", ".", "reshape", "(", "output", ",", "[", "-", "1", ",", "8", "*", "dim", ",", "height", ",", "width", "]", ")", "\n", "if", "bn", ":", "\n", "        ", "output", "=", "Normalize", "(", "'Generator.BN1'", ",", "[", "0", ",", "2", ",", "3", "]", ",", "output", ")", "\n", "", "output", "=", "nonlinearity", "(", "output", ")", "\n", "\n", "output", "=", "lib", ".", "ops", ".", "deconv2d", ".", "Deconv2D", "(", "'Generator.2'", ",", "8", "*", "dim", ",", "4", "*", "dim", ",", "5", ",", "output", ")", "\n", "if", "bn", ":", "\n", "        ", "output", "=", "Normalize", "(", "'Generator.BN2'", ",", "[", "0", ",", "2", ",", "3", "]", ",", "output", ")", "\n", "", "output", "=", "nonlinearity", "(", "output", ")", "\n", "\n", "output", "=", "lib", ".", "ops", ".", "deconv2d", ".", "Deconv2D", "(", "'Generator.3'", ",", "4", "*", "dim", ",", "2", "*", "dim", ",", "5", ",", "output", ")", "\n", "if", "bn", ":", "\n", "        ", "output", "=", "Normalize", "(", "'Generator.BN3'", ",", "[", "0", ",", "2", ",", "3", "]", ",", "output", ")", "\n", "", "output", "=", "nonlinearity", "(", "output", ")", "\n", "\n", "output", "=", "lib", ".", "ops", ".", "deconv2d", ".", "Deconv2D", "(", "'Generator.4'", ",", "2", "*", "dim", ",", "dim", ",", "5", ",", "output", ")", "\n", "if", "bn", ":", "\n", "        ", "output", "=", "Normalize", "(", "'Generator.BN4'", ",", "[", "0", ",", "2", ",", "3", "]", ",", "output", ")", "\n", "", "output", "=", "nonlinearity", "(", "output", ")", "\n", "\n", "output", "=", "lib", ".", "ops", ".", "deconv2d", ".", "Deconv2D", "(", "'Generator.5'", ",", "dim", ",", "IMAGE_CHANNELS", ",", "5", ",", "output", ")", "\n", "output", "=", "tf", ".", "tanh", "(", "output", ")", "\n", "\n", "lib", ".", "ops", ".", "conv2d", ".", "unset_weights_stdev", "(", ")", "\n", "lib", ".", "ops", ".", "deconv2d", ".", "unset_weights_stdev", "(", ")", "\n", "lib", ".", "ops", ".", "linear", ".", "unset_weights_stdev", "(", ")", "\n", "\n", "return", "tf", ".", "reshape", "(", "output", ",", "[", "-", "1", ",", "IMAGE_CHANNELS", "*", "IMAGE_WIDTH", "*", "IMAGE_HEIGHT", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.WGANPaper_CrippledDCGANGenerator": [[356, 377], ["tflib.ops.linear.Linear", "tensorflow.nn.relu", "tensorflow.reshape", "tflib.ops.deconv2d.Deconv2D", "tensorflow.nn.relu", "tflib.ops.deconv2d.Deconv2D", "tensorflow.nn.relu", "tflib.ops.deconv2d.Deconv2D", "tensorflow.nn.relu", "tflib.ops.deconv2d.Deconv2D", "tensorflow.tanh", "tensorflow.reshape", "tensorflow.random_normal"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.linear.Linear", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.deconv2d.Deconv2D", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.deconv2d.Deconv2D", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.deconv2d.Deconv2D", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.deconv2d.Deconv2D"], ["", "def", "WGANPaper_CrippledDCGANGenerator", "(", "n_samples", ",", "noise", "=", "None", ",", "dim", "=", "DIM", ")", ":", "\n", "    ", "if", "noise", "is", "None", ":", "\n", "        ", "noise", "=", "tf", ".", "random_normal", "(", "[", "n_samples", ",", "128", "]", ")", "\n", "\n", "", "output", "=", "lib", ".", "ops", ".", "linear", ".", "Linear", "(", "'Generator.Input'", ",", "128", ",", "4", "*", "4", "*", "dim", ",", "noise", ")", "\n", "output", "=", "tf", ".", "nn", ".", "relu", "(", "output", ")", "\n", "output", "=", "tf", ".", "reshape", "(", "output", ",", "[", "-", "1", ",", "dim", ",", "4", ",", "4", "]", ")", "\n", "\n", "output", "=", "lib", ".", "ops", ".", "deconv2d", ".", "Deconv2D", "(", "'Generator.2'", ",", "dim", ",", "dim", ",", "5", ",", "output", ")", "\n", "output", "=", "tf", ".", "nn", ".", "relu", "(", "output", ")", "\n", "\n", "output", "=", "lib", ".", "ops", ".", "deconv2d", ".", "Deconv2D", "(", "'Generator.3'", ",", "dim", ",", "dim", ",", "5", ",", "output", ")", "\n", "output", "=", "tf", ".", "nn", ".", "relu", "(", "output", ")", "\n", "\n", "output", "=", "lib", ".", "ops", ".", "deconv2d", ".", "Deconv2D", "(", "'Generator.4'", ",", "dim", ",", "dim", ",", "5", ",", "output", ")", "\n", "output", "=", "tf", ".", "nn", ".", "relu", "(", "output", ")", "\n", "\n", "output", "=", "lib", ".", "ops", ".", "deconv2d", ".", "Deconv2D", "(", "'Generator.5'", ",", "dim", ",", "3", ",", "5", ",", "output", ")", "\n", "output", "=", "tf", ".", "tanh", "(", "output", ")", "\n", "\n", "return", "tf", ".", "reshape", "(", "output", ",", "[", "-", "1", ",", "OUTPUT_DIM", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.ResnetGenerator": [[379, 405], ["tflib.ops.linear.Linear", "tensorflow.reshape", "xrange", "wgan_improved.BottleneckResidualBlock", "xrange", "wgan_improved.BottleneckResidualBlock", "xrange", "wgan_improved.BottleneckResidualBlock", "xrange", "wgan_improved.BottleneckResidualBlock", "xrange", "tflib.ops.conv2d.Conv2D", "tensorflow.tanh", "tensorflow.reshape", "tensorflow.random_normal", "wgan_improved.BottleneckResidualBlock", "wgan_improved.BottleneckResidualBlock", "wgan_improved.BottleneckResidualBlock", "wgan_improved.BottleneckResidualBlock", "wgan_improved.BottleneckResidualBlock"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.linear.Linear", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.BottleneckResidualBlock", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.BottleneckResidualBlock", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.BottleneckResidualBlock", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.BottleneckResidualBlock", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.conv2d.Conv2D", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.BottleneckResidualBlock", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.BottleneckResidualBlock", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.BottleneckResidualBlock", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.BottleneckResidualBlock", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.BottleneckResidualBlock"], ["", "def", "ResnetGenerator", "(", "n_samples", ",", "noise", "=", "None", ",", "dim", "=", "DIM", ")", ":", "\n", "    ", "if", "noise", "is", "None", ":", "\n", "        ", "noise", "=", "tf", ".", "random_normal", "(", "[", "n_samples", ",", "128", "]", ")", "\n", "\n", "", "output", "=", "lib", ".", "ops", ".", "linear", ".", "Linear", "(", "'Generator.Input'", ",", "128", ",", "4", "*", "4", "*", "8", "*", "dim", ",", "noise", ")", "\n", "output", "=", "tf", ".", "reshape", "(", "output", ",", "[", "-", "1", ",", "8", "*", "dim", ",", "4", ",", "4", "]", ")", "\n", "\n", "for", "i", "in", "xrange", "(", "6", ")", ":", "\n", "        ", "output", "=", "BottleneckResidualBlock", "(", "'Generator.4x4_{}'", ".", "format", "(", "i", ")", ",", "8", "*", "dim", ",", "8", "*", "dim", ",", "3", ",", "output", ",", "resample", "=", "None", ")", "\n", "", "output", "=", "BottleneckResidualBlock", "(", "'Generator.Up1'", ",", "8", "*", "dim", ",", "4", "*", "dim", ",", "3", ",", "output", ",", "resample", "=", "'up'", ")", "\n", "for", "i", "in", "xrange", "(", "6", ")", ":", "\n", "        ", "output", "=", "BottleneckResidualBlock", "(", "'Generator.8x8_{}'", ".", "format", "(", "i", ")", ",", "4", "*", "dim", ",", "4", "*", "dim", ",", "3", ",", "output", ",", "resample", "=", "None", ")", "\n", "", "output", "=", "BottleneckResidualBlock", "(", "'Generator.Up2'", ",", "4", "*", "dim", ",", "2", "*", "dim", ",", "3", ",", "output", ",", "resample", "=", "'up'", ")", "\n", "for", "i", "in", "xrange", "(", "6", ")", ":", "\n", "        ", "output", "=", "BottleneckResidualBlock", "(", "'Generator.16x16_{}'", ".", "format", "(", "i", ")", ",", "2", "*", "dim", ",", "2", "*", "dim", ",", "3", ",", "output", ",", "resample", "=", "None", ")", "\n", "", "output", "=", "BottleneckResidualBlock", "(", "'Generator.Up3'", ",", "2", "*", "dim", ",", "1", "*", "dim", ",", "3", ",", "output", ",", "resample", "=", "'up'", ")", "\n", "for", "i", "in", "xrange", "(", "6", ")", ":", "\n", "        ", "output", "=", "BottleneckResidualBlock", "(", "'Generator.32x32_{}'", ".", "format", "(", "i", ")", ",", "1", "*", "dim", ",", "1", "*", "dim", ",", "3", ",", "output", ",", "resample", "=", "None", ")", "\n", "", "output", "=", "BottleneckResidualBlock", "(", "'Generator.Up4'", ",", "1", "*", "dim", ",", "dim", "/", "2", ",", "3", ",", "output", ",", "resample", "=", "'up'", ")", "\n", "for", "i", "in", "xrange", "(", "5", ")", ":", "\n", "        ", "output", "=", "BottleneckResidualBlock", "(", "'Generator.64x64_{}'", ".", "format", "(", "i", ")", ",", "dim", "/", "2", ",", "dim", "/", "2", ",", "3", ",", "output", ",", "resample", "=", "None", ")", "\n", "\n", "", "output", "=", "lib", ".", "ops", ".", "conv2d", ".", "Conv2D", "(", "'Generator.Out'", ",", "dim", "/", "2", ",", "3", ",", "1", ",", "output", ",", "he_init", "=", "False", ")", "\n", "output", "=", "tf", ".", "tanh", "(", "output", "/", "5.", ")", "\n", "\n", "return", "tf", ".", "reshape", "(", "output", ",", "[", "-", "1", ",", "OUTPUT_DIM", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.MultiplicativeDCGANGenerator": [[407, 436], ["tflib.ops.linear.Linear", "tensorflow.reshape", "wgan_improved.pixcnn_gated_nonlinearity", "tflib.ops.deconv2d.Deconv2D", "wgan_improved.pixcnn_gated_nonlinearity", "tflib.ops.deconv2d.Deconv2D", "wgan_improved.pixcnn_gated_nonlinearity", "tflib.ops.deconv2d.Deconv2D", "wgan_improved.pixcnn_gated_nonlinearity", "tflib.ops.deconv2d.Deconv2D", "tensorflow.tanh", "tensorflow.reshape", "tensorflow.random_normal", "wgan_improved.Normalize", "wgan_improved.Normalize", "wgan_improved.Normalize", "wgan_improved.Normalize"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.linear.Linear", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.pixcnn_gated_nonlinearity", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.deconv2d.Deconv2D", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.pixcnn_gated_nonlinearity", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.deconv2d.Deconv2D", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.pixcnn_gated_nonlinearity", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.deconv2d.Deconv2D", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.pixcnn_gated_nonlinearity", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.deconv2d.Deconv2D", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.Normalize", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.Normalize", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.Normalize", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.Normalize"], ["", "def", "MultiplicativeDCGANGenerator", "(", "n_samples", ",", "noise", "=", "None", ",", "dim", "=", "DIM", ",", "bn", "=", "True", ")", ":", "\n", "    ", "if", "noise", "is", "None", ":", "\n", "        ", "noise", "=", "tf", ".", "random_normal", "(", "[", "n_samples", ",", "128", "]", ")", "\n", "\n", "", "output", "=", "lib", ".", "ops", ".", "linear", ".", "Linear", "(", "'Generator.Input'", ",", "128", ",", "4", "*", "4", "*", "8", "*", "dim", "*", "2", ",", "noise", ")", "\n", "output", "=", "tf", ".", "reshape", "(", "output", ",", "[", "-", "1", ",", "8", "*", "dim", "*", "2", ",", "4", ",", "4", "]", ")", "\n", "if", "bn", ":", "\n", "        ", "output", "=", "Normalize", "(", "'Generator.BN1'", ",", "[", "0", ",", "2", ",", "3", "]", ",", "output", ")", "\n", "", "output", "=", "pixcnn_gated_nonlinearity", "(", "output", "[", ":", ",", ":", ":", "2", "]", ",", "output", "[", ":", ",", "1", ":", ":", "2", "]", ")", "\n", "\n", "output", "=", "lib", ".", "ops", ".", "deconv2d", ".", "Deconv2D", "(", "'Generator.2'", ",", "8", "*", "dim", ",", "4", "*", "dim", "*", "2", ",", "5", ",", "output", ")", "\n", "if", "bn", ":", "\n", "        ", "output", "=", "Normalize", "(", "'Generator.BN2'", ",", "[", "0", ",", "2", ",", "3", "]", ",", "output", ")", "\n", "", "output", "=", "pixcnn_gated_nonlinearity", "(", "output", "[", ":", ",", ":", ":", "2", "]", ",", "output", "[", ":", ",", "1", ":", ":", "2", "]", ")", "\n", "\n", "output", "=", "lib", ".", "ops", ".", "deconv2d", ".", "Deconv2D", "(", "'Generator.3'", ",", "4", "*", "dim", ",", "2", "*", "dim", "*", "2", ",", "5", ",", "output", ")", "\n", "if", "bn", ":", "\n", "        ", "output", "=", "Normalize", "(", "'Generator.BN3'", ",", "[", "0", ",", "2", ",", "3", "]", ",", "output", ")", "\n", "", "output", "=", "pixcnn_gated_nonlinearity", "(", "output", "[", ":", ",", ":", ":", "2", "]", ",", "output", "[", ":", ",", "1", ":", ":", "2", "]", ")", "\n", "\n", "output", "=", "lib", ".", "ops", ".", "deconv2d", ".", "Deconv2D", "(", "'Generator.4'", ",", "2", "*", "dim", ",", "dim", "*", "2", ",", "5", ",", "output", ")", "\n", "if", "bn", ":", "\n", "        ", "output", "=", "Normalize", "(", "'Generator.BN4'", ",", "[", "0", ",", "2", ",", "3", "]", ",", "output", ")", "\n", "", "output", "=", "pixcnn_gated_nonlinearity", "(", "output", "[", ":", ",", ":", ":", "2", "]", ",", "output", "[", ":", ",", "1", ":", ":", "2", "]", ")", "\n", "\n", "output", "=", "lib", ".", "ops", ".", "deconv2d", ".", "Deconv2D", "(", "'Generator.5'", ",", "dim", ",", "3", ",", "5", ",", "output", ")", "\n", "output", "=", "tf", ".", "tanh", "(", "output", ")", "\n", "\n", "return", "tf", ".", "reshape", "(", "output", ",", "[", "-", "1", ",", "OUTPUT_DIM", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.GoodDiscriminator": [[440, 476], ["tensorflow.reshape", "tflib.ops.conv2d.Conv2D", "wgan_improved.ResidualBlock", "wgan_improved.ResidualBlock", "wgan_improved.ResidualBlock", "tensorflow.reshape", "tflib.ops.linear.Linear", "tflib.ops.linear.Linear", "tensorflow.nn.relu", "tensorflow.cond", "tflib.ops.linear.Linear", "tensorflow.nn.relu", "tensorflow.cond", "tflib.ops.linear.Linear", "tensorflow.norm", "tensorflow.concat", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.dropout", "tensorflow.nn.dropout"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.conv2d.Conv2D", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.ResidualBlock", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.ResidualBlock", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.ResidualBlock", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.linear.Linear", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.linear.Linear", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.linear.Linear", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.linear.Linear", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.norm"], ["", "def", "GoodDiscriminator", "(", "inputs", ",", "train_mode", ",", "dim", "=", "DIM", ")", ":", "\n", "    ", "output", "=", "tf", ".", "reshape", "(", "inputs", ",", "[", "-", "1", ",", "IMAGE_CHANNELS", ",", "IMAGE_HEIGHT", ",", "IMAGE_WIDTH", "]", ")", "\n", "# output = tf.reshape(inputs, [-1, 3, 64, 64])", "\n", "width", "=", "IMAGE_WIDTH", "/", "8", "# 16  # width inicial = 4 en DCGAN original, resulta en una imagen generada con width = 64, ver DCGANGenerator", "\n", "height", "=", "IMAGE_HEIGHT", "/", "8", "# 16", "\n", "\n", "output", "=", "lib", ".", "ops", ".", "conv2d", ".", "Conv2D", "(", "'Discriminator.Input'", ",", "IMAGE_CHANNELS", ",", "dim", ",", "3", ",", "output", ",", "he_init", "=", "False", ")", "\n", "\n", "output", "=", "ResidualBlock", "(", "'Discriminator.Res1'", ",", "dim", ",", "2", "*", "dim", ",", "3", ",", "output", ",", "resample", "=", "'down'", ")", "\n", "output", "=", "ResidualBlock", "(", "'Discriminator.Res2'", ",", "2", "*", "dim", ",", "4", "*", "dim", ",", "3", ",", "output", ",", "resample", "=", "'down'", ")", "\n", "output", "=", "ResidualBlock", "(", "'Discriminator.Res3'", ",", "4", "*", "dim", ",", "8", "*", "dim", ",", "3", ",", "output", ",", "resample", "=", "'down'", ")", "\n", "#output = ResidualBlock('Discriminator.Res4', 8 * dim, 8 * dim, 3, output, resample='down')", "\n", "\n", "output", "=", "tf", ".", "reshape", "(", "output", ",", "[", "-", "1", ",", "height", "*", "width", "*", "8", "*", "dim", "]", ")", "\n", "output_disc", "=", "lib", ".", "ops", ".", "linear", ".", "Linear", "(", "'Discriminator.Output'", ",", "height", "*", "width", "*", "8", "*", "dim", ",", "1", ",", "output", ")", "\n", "\n", "dropout", "=", "0.5", "\n", "fc1", "=", "lib", ".", "ops", ".", "linear", ".", "Linear", "(", "'Discriminator.VO.1'", ",", "height", "*", "width", "*", "8", "*", "dim", ",", "4096", ",", "output", ")", "\n", "relu1", "=", "tf", ".", "nn", ".", "relu", "(", "fc1", ")", "\n", "drop1", "=", "tf", ".", "cond", "(", "train_mode", ",", "lambda", ":", "tf", ".", "nn", ".", "dropout", "(", "relu1", ",", "dropout", ")", ",", "lambda", ":", "relu1", ")", "\n", "\n", "fc2", "=", "lib", ".", "ops", ".", "linear", ".", "Linear", "(", "'Discriminator.VO.2'", ",", "4096", ",", "4096", ",", "drop1", ")", "\n", "relu2", "=", "tf", ".", "nn", ".", "relu", "(", "fc2", ")", "\n", "drop2", "=", "tf", ".", "cond", "(", "train_mode", ",", "lambda", ":", "tf", ".", "nn", ".", "dropout", "(", "relu2", ",", "dropout", ")", ",", "lambda", ":", "relu2", ")", "\n", "output_vo", "=", "lib", ".", "ops", ".", "linear", ".", "Linear", "(", "'Discriminator.VO.3'", ",", "4096", ",", "LABELS_SIZE", ",", "drop2", ")", "\n", "\n", "quaternions", "=", "output_vo", "[", ":", ",", "3", ":", "LABELS_SIZE", "]", "\n", "quaternions_norm", "=", "tf", ".", "norm", "(", "quaternions", ",", "axis", "=", "1", ")", "\n", "unit_quaternions", "=", "quaternions", "/", "tf", ".", "reshape", "(", "quaternions_norm", ",", "(", "-", "1", ",", "1", ")", ")", "\n", "output_vo", "=", "tf", ".", "concat", "(", "[", "output_vo", "[", ":", ",", ":", "3", "]", ",", "unit_quaternions", "]", ",", "1", ")", "\n", "\n", "\n", "# output = tf.reshape(output, [-1, 4 * 4 * 8 * dim])", "\n", "# output = lib.ops.linear.Linear('Discriminator.Output', 4 * 4 * 8 * dim, 1, output)", "\n", "\n", "return", "tf", ".", "reshape", "(", "output_disc", ",", "[", "-", "1", "]", ")", ",", "output_vo", "#tf.reshape(output, [-1])", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.MultiplicativeDCGANDiscriminator": [[478, 503], ["tensorflow.reshape", "tflib.ops.conv2d.Conv2D", "wgan_improved.pixcnn_gated_nonlinearity", "tflib.ops.conv2d.Conv2D", "wgan_improved.pixcnn_gated_nonlinearity", "tflib.ops.conv2d.Conv2D", "wgan_improved.pixcnn_gated_nonlinearity", "tflib.ops.conv2d.Conv2D", "wgan_improved.pixcnn_gated_nonlinearity", "tensorflow.reshape", "tflib.ops.linear.Linear", "tensorflow.reshape", "wgan_improved.Normalize", "wgan_improved.Normalize", "wgan_improved.Normalize"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.conv2d.Conv2D", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.pixcnn_gated_nonlinearity", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.conv2d.Conv2D", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.pixcnn_gated_nonlinearity", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.conv2d.Conv2D", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.pixcnn_gated_nonlinearity", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.conv2d.Conv2D", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.pixcnn_gated_nonlinearity", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.linear.Linear", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.Normalize", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.Normalize", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.Normalize"], ["", "def", "MultiplicativeDCGANDiscriminator", "(", "inputs", ",", "dim", "=", "DIM", ",", "bn", "=", "True", ")", ":", "\n", "    ", "output", "=", "tf", ".", "reshape", "(", "inputs", ",", "[", "-", "1", ",", "3", ",", "64", ",", "64", "]", ")", "\n", "\n", "output", "=", "lib", ".", "ops", ".", "conv2d", ".", "Conv2D", "(", "'Discriminator.1'", ",", "3", ",", "dim", "*", "2", ",", "5", ",", "output", ",", "stride", "=", "2", ")", "\n", "output", "=", "pixcnn_gated_nonlinearity", "(", "output", "[", ":", ",", ":", ":", "2", "]", ",", "output", "[", ":", ",", "1", ":", ":", "2", "]", ")", "\n", "\n", "output", "=", "lib", ".", "ops", ".", "conv2d", ".", "Conv2D", "(", "'Discriminator.2'", ",", "dim", ",", "2", "*", "dim", "*", "2", ",", "5", ",", "output", ",", "stride", "=", "2", ")", "\n", "if", "bn", ":", "\n", "        ", "output", "=", "Normalize", "(", "'Discriminator.BN2'", ",", "[", "0", ",", "2", ",", "3", "]", ",", "output", ")", "\n", "", "output", "=", "pixcnn_gated_nonlinearity", "(", "output", "[", ":", ",", ":", ":", "2", "]", ",", "output", "[", ":", ",", "1", ":", ":", "2", "]", ")", "\n", "\n", "output", "=", "lib", ".", "ops", ".", "conv2d", ".", "Conv2D", "(", "'Discriminator.3'", ",", "2", "*", "dim", ",", "4", "*", "dim", "*", "2", ",", "5", ",", "output", ",", "stride", "=", "2", ")", "\n", "if", "bn", ":", "\n", "        ", "output", "=", "Normalize", "(", "'Discriminator.BN3'", ",", "[", "0", ",", "2", ",", "3", "]", ",", "output", ")", "\n", "", "output", "=", "pixcnn_gated_nonlinearity", "(", "output", "[", ":", ",", ":", ":", "2", "]", ",", "output", "[", ":", ",", "1", ":", ":", "2", "]", ")", "\n", "\n", "output", "=", "lib", ".", "ops", ".", "conv2d", ".", "Conv2D", "(", "'Discriminator.4'", ",", "4", "*", "dim", ",", "8", "*", "dim", "*", "2", ",", "5", ",", "output", ",", "stride", "=", "2", ")", "\n", "if", "bn", ":", "\n", "        ", "output", "=", "Normalize", "(", "'Discriminator.BN4'", ",", "[", "0", ",", "2", ",", "3", "]", ",", "output", ")", "\n", "", "output", "=", "pixcnn_gated_nonlinearity", "(", "output", "[", ":", ",", ":", ":", "2", "]", ",", "output", "[", ":", ",", "1", ":", ":", "2", "]", ")", "\n", "\n", "output", "=", "tf", ".", "reshape", "(", "output", ",", "[", "-", "1", ",", "4", "*", "4", "*", "8", "*", "dim", "]", ")", "\n", "output", "=", "lib", ".", "ops", ".", "linear", ".", "Linear", "(", "'Discriminator.Output'", ",", "4", "*", "4", "*", "8", "*", "dim", ",", "1", ",", "output", ")", "\n", "\n", "return", "tf", ".", "reshape", "(", "output", ",", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.ResnetDiscriminator": [[505, 528], ["tensorflow.reshape", "tflib.ops.conv2d.Conv2D", "xrange", "wgan_improved.BottleneckResidualBlock", "xrange", "wgan_improved.BottleneckResidualBlock", "xrange", "wgan_improved.BottleneckResidualBlock", "xrange", "wgan_improved.BottleneckResidualBlock", "xrange", "tensorflow.reshape", "tflib.ops.linear.Linear", "tensorflow.reshape", "wgan_improved.BottleneckResidualBlock", "wgan_improved.BottleneckResidualBlock", "wgan_improved.BottleneckResidualBlock", "wgan_improved.BottleneckResidualBlock", "wgan_improved.BottleneckResidualBlock"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.conv2d.Conv2D", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.BottleneckResidualBlock", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.BottleneckResidualBlock", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.BottleneckResidualBlock", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.BottleneckResidualBlock", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.linear.Linear", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.BottleneckResidualBlock", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.BottleneckResidualBlock", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.BottleneckResidualBlock", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.BottleneckResidualBlock", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.BottleneckResidualBlock"], ["", "def", "ResnetDiscriminator", "(", "inputs", ",", "dim", "=", "DIM", ")", ":", "\n", "    ", "output", "=", "tf", ".", "reshape", "(", "inputs", ",", "[", "-", "1", ",", "3", ",", "64", ",", "64", "]", ")", "\n", "output", "=", "lib", ".", "ops", ".", "conv2d", ".", "Conv2D", "(", "'Discriminator.In'", ",", "3", ",", "dim", "/", "2", ",", "1", ",", "output", ",", "he_init", "=", "False", ")", "\n", "\n", "for", "i", "in", "xrange", "(", "5", ")", ":", "\n", "        ", "output", "=", "BottleneckResidualBlock", "(", "'Discriminator.64x64_{}'", ".", "format", "(", "i", ")", ",", "dim", "/", "2", ",", "dim", "/", "2", ",", "3", ",", "output", ",", "resample", "=", "None", ")", "\n", "", "output", "=", "BottleneckResidualBlock", "(", "'Discriminator.Down1'", ",", "dim", "/", "2", ",", "dim", "*", "1", ",", "3", ",", "output", ",", "resample", "=", "'down'", ")", "\n", "for", "i", "in", "xrange", "(", "6", ")", ":", "\n", "        ", "output", "=", "BottleneckResidualBlock", "(", "'Discriminator.32x32_{}'", ".", "format", "(", "i", ")", ",", "dim", "*", "1", ",", "dim", "*", "1", ",", "3", ",", "output", ",", "resample", "=", "None", ")", "\n", "", "output", "=", "BottleneckResidualBlock", "(", "'Discriminator.Down2'", ",", "dim", "*", "1", ",", "dim", "*", "2", ",", "3", ",", "output", ",", "resample", "=", "'down'", ")", "\n", "for", "i", "in", "xrange", "(", "6", ")", ":", "\n", "        ", "output", "=", "BottleneckResidualBlock", "(", "'Discriminator.16x16_{}'", ".", "format", "(", "i", ")", ",", "dim", "*", "2", ",", "dim", "*", "2", ",", "3", ",", "output", ",", "resample", "=", "None", ")", "\n", "", "output", "=", "BottleneckResidualBlock", "(", "'Discriminator.Down3'", ",", "dim", "*", "2", ",", "dim", "*", "4", ",", "3", ",", "output", ",", "resample", "=", "'down'", ")", "\n", "for", "i", "in", "xrange", "(", "6", ")", ":", "\n", "        ", "output", "=", "BottleneckResidualBlock", "(", "'Discriminator.8x8_{}'", ".", "format", "(", "i", ")", ",", "dim", "*", "4", ",", "dim", "*", "4", ",", "3", ",", "output", ",", "resample", "=", "None", ")", "\n", "", "output", "=", "BottleneckResidualBlock", "(", "'Discriminator.Down4'", ",", "dim", "*", "4", ",", "dim", "*", "8", ",", "3", ",", "output", ",", "resample", "=", "'down'", ")", "\n", "for", "i", "in", "xrange", "(", "6", ")", ":", "\n", "        ", "output", "=", "BottleneckResidualBlock", "(", "'Discriminator.4x4_{}'", ".", "format", "(", "i", ")", ",", "dim", "*", "8", ",", "dim", "*", "8", ",", "3", ",", "output", ",", "resample", "=", "None", ")", "\n", "\n", "", "output", "=", "tf", ".", "reshape", "(", "output", ",", "[", "-", "1", ",", "4", "*", "4", "*", "8", "*", "dim", "]", ")", "\n", "output", "=", "lib", ".", "ops", ".", "linear", ".", "Linear", "(", "'Discriminator.Output'", ",", "4", "*", "4", "*", "8", "*", "dim", ",", "1", ",", "output", ")", "\n", "\n", "return", "tf", ".", "reshape", "(", "output", "/", "5.", ",", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.FCDiscriminator": [[530, 537], ["wgan_improved.LeakyReLULayer", "xrange", "tflib.ops.linear.Linear", "tensorflow.reshape", "wgan_improved.LeakyReLULayer"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.LeakyReLULayer", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.linear.Linear", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.LeakyReLULayer"], ["", "def", "FCDiscriminator", "(", "inputs", ",", "FC_DIM", "=", "512", ",", "n_layers", "=", "3", ")", ":", "\n", "    ", "output", "=", "LeakyReLULayer", "(", "'Discriminator.Input'", ",", "OUTPUT_DIM", ",", "FC_DIM", ",", "inputs", ")", "\n", "for", "i", "in", "xrange", "(", "n_layers", ")", ":", "\n", "        ", "output", "=", "LeakyReLULayer", "(", "'Discriminator.{}'", ".", "format", "(", "i", ")", ",", "FC_DIM", ",", "FC_DIM", ",", "output", ")", "\n", "", "output", "=", "lib", ".", "ops", ".", "linear", ".", "Linear", "(", "'Discriminator.Out'", ",", "FC_DIM", ",", "1", ",", "output", ")", "\n", "\n", "return", "tf", ".", "reshape", "(", "output", ",", "[", "-", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.DCGANDiscriminator": [[539, 598], ["tensorflow.reshape", "tflib.ops.conv2d.set_weights_stdev", "tflib.ops.deconv2d.set_weights_stdev", "tflib.ops.linear.set_weights_stdev", "tflib.ops.conv2d.Conv2D", "nonlinearity", "tflib.ops.conv2d.Conv2D", "nonlinearity", "tflib.ops.conv2d.Conv2D", "nonlinearity", "tflib.ops.conv2d.Conv2D", "nonlinearity", "tflib.ops.conv2d.Conv2D", "nonlinearity", "tensorflow.reshape", "tflib.ops.linear.Linear", "print", "tflib.ops.linear.Linear", "tensorflow.nn.relu", "tensorflow.cond", "tflib.ops.linear.Linear", "tensorflow.nn.relu", "tensorflow.cond", "tflib.ops.linear.Linear", "tensorflow.norm", "tensorflow.concat", "tflib.ops.conv2d.unset_weights_stdev", "tflib.ops.deconv2d.unset_weights_stdev", "tflib.ops.linear.unset_weights_stdev", "wgan_improved.Normalize", "wgan_improved.Normalize", "wgan_improved.Normalize", "wgan_improved.Normalize", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.dropout", "tensorflow.nn.dropout"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.linear.set_weights_stdev", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.linear.set_weights_stdev", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.linear.set_weights_stdev", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.conv2d.Conv2D", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.conv2d.Conv2D", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.conv2d.Conv2D", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.conv2d.Conv2D", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.conv2d.Conv2D", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.linear.Linear", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.linear.Linear", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.linear.Linear", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.linear.Linear", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.norm", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.linear.unset_weights_stdev", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.linear.unset_weights_stdev", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.linear.unset_weights_stdev", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.Normalize", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.Normalize", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.Normalize", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.Normalize"], ["", "def", "DCGANDiscriminator", "(", "inputs", ",", "train_mode", ",", "dim", "=", "DIM", ",", "bn", "=", "True", ",", "nonlinearity", "=", "LeakyReLU", ")", ":", "\n", "    ", "output", "=", "tf", ".", "reshape", "(", "inputs", ",", "[", "-", "1", ",", "IMAGE_CHANNELS", ",", "IMAGE_HEIGHT", ",", "IMAGE_WIDTH", "]", ")", "\n", "lib", ".", "ops", ".", "conv2d", ".", "set_weights_stdev", "(", "0.02", ")", "\n", "lib", ".", "ops", ".", "deconv2d", ".", "set_weights_stdev", "(", "0.02", ")", "\n", "lib", ".", "ops", ".", "linear", ".", "set_weights_stdev", "(", "0.02", ")", "\n", "width", "=", "IMAGE_WIDTH", "/", "32", "# width inicial = 4 en DCGAN original, resulta en una imagen generada con width = 64, ver DCGANGenerator", "\n", "height", "=", "IMAGE_HEIGHT", "/", "32", "\n", "output", "=", "lib", ".", "ops", ".", "conv2d", ".", "Conv2D", "(", "'Discriminator.1'", ",", "IMAGE_CHANNELS", ",", "dim", ",", "5", ",", "output", ",", "stride", "=", "2", ")", "\n", "output", "=", "nonlinearity", "(", "output", ")", "\n", "\n", "output", "=", "lib", ".", "ops", ".", "conv2d", ".", "Conv2D", "(", "'Discriminator.2.ConvPart'", ",", "dim", ",", "2", "*", "dim", ",", "5", ",", "output", ",", "stride", "=", "2", ")", "\n", "if", "bn", ":", "\n", "        ", "output", "=", "Normalize", "(", "'Discriminator.BN2'", ",", "[", "0", ",", "2", ",", "3", "]", ",", "output", ")", "\n", "", "output", "=", "nonlinearity", "(", "output", ")", "\n", "\n", "output", "=", "lib", ".", "ops", ".", "conv2d", ".", "Conv2D", "(", "'Discriminator.3.ConvPart'", ",", "2", "*", "dim", ",", "4", "*", "dim", ",", "5", ",", "output", ",", "stride", "=", "2", ")", "\n", "if", "bn", ":", "\n", "        ", "output", "=", "Normalize", "(", "'Discriminator.BN3'", ",", "[", "0", ",", "2", ",", "3", "]", ",", "output", ")", "\n", "", "output", "=", "nonlinearity", "(", "output", ")", "\n", "\n", "output", "=", "lib", ".", "ops", ".", "conv2d", ".", "Conv2D", "(", "'Discriminator.4.ConvPart'", ",", "4", "*", "dim", ",", "8", "*", "dim", ",", "5", ",", "output", ",", "stride", "=", "2", ")", "\n", "if", "bn", ":", "\n", "        ", "output", "=", "Normalize", "(", "'Discriminator.BN4'", ",", "[", "0", ",", "2", ",", "3", "]", ",", "output", ")", "\n", "", "output", "=", "nonlinearity", "(", "output", ")", "\n", "\n", "output", "=", "lib", ".", "ops", ".", "conv2d", ".", "Conv2D", "(", "'Discriminator.5.ConvPart'", ",", "8", "*", "dim", ",", "8", "*", "dim", ",", "5", ",", "output", ",", "stride", "=", "2", ")", "\n", "if", "bn", ":", "\n", "        ", "output", "=", "Normalize", "(", "'Discriminator.BN5'", ",", "[", "0", ",", "2", ",", "3", "]", ",", "output", ")", "\n", "", "output", "=", "nonlinearity", "(", "output", ")", "\n", "\n", "#output = lib.ops.conv2d.Conv2D('Discriminator.6.ConvPart', 8 * dim, 8 * dim, 5, output, stride=2)", "\n", "#if bn:", "\n", "#    output = Normalize('Discriminator.BN6', [0, 2, 3], output)", "\n", "#output = nonlinearity(output)", "\n", "\n", "output", "=", "tf", ".", "reshape", "(", "output", ",", "[", "-", "1", ",", "height", "*", "width", "*", "8", "*", "dim", "]", ")", "\n", "output_disc", "=", "lib", ".", "ops", ".", "linear", ".", "Linear", "(", "'Discriminator.Output'", ",", "height", "*", "width", "*", "8", "*", "dim", ",", "1", ",", "output", ")", "\n", "print", "(", "\"5th Conv Layer\"", ")", "\n", "# This first FC Layer has many parameters. We have to keep it as small as possible.", "\n", "dropout", "=", "0.5", "\n", "fc1", "=", "lib", ".", "ops", ".", "linear", ".", "Linear", "(", "'Discriminator.VO.1'", ",", "height", "*", "width", "*", "8", "*", "dim", ",", "512", ",", "output", ")", "\n", "relu1", "=", "tf", ".", "nn", ".", "relu", "(", "fc1", ")", "\n", "drop1", "=", "tf", ".", "cond", "(", "train_mode", ",", "lambda", ":", "tf", ".", "nn", ".", "dropout", "(", "relu1", ",", "dropout", ")", ",", "lambda", ":", "relu1", ")", "\n", "\n", "fc2", "=", "lib", ".", "ops", ".", "linear", ".", "Linear", "(", "'Discriminator.VO.2'", ",", "512", ",", "512", ",", "drop1", ")", "\n", "relu2", "=", "tf", ".", "nn", ".", "relu", "(", "fc2", ")", "\n", "drop2", "=", "tf", ".", "cond", "(", "train_mode", ",", "lambda", ":", "tf", ".", "nn", ".", "dropout", "(", "relu2", ",", "dropout", ")", ",", "lambda", ":", "relu2", ")", "\n", "output_vo", "=", "lib", ".", "ops", ".", "linear", ".", "Linear", "(", "'Discriminator.VO.3'", ",", "512", ",", "LABELS_SIZE", ",", "drop2", ")", "\n", "\n", "quaternions", "=", "output_vo", "[", ":", ",", "3", ":", "LABELS_SIZE", "]", "\n", "quaternions_norm", "=", "tf", ".", "norm", "(", "quaternions", ",", "axis", "=", "1", ")", "\n", "unit_quaternions", "=", "quaternions", "/", "tf", ".", "reshape", "(", "quaternions_norm", ",", "(", "-", "1", ",", "1", ")", ")", "\n", "output_vo", "=", "tf", ".", "concat", "(", "[", "output_vo", "[", ":", ",", ":", "3", "]", ",", "unit_quaternions", "]", ",", "1", ")", "\n", "\n", "lib", ".", "ops", ".", "conv2d", ".", "unset_weights_stdev", "(", ")", "\n", "lib", ".", "ops", ".", "deconv2d", ".", "unset_weights_stdev", "(", ")", "\n", "lib", ".", "ops", ".", "linear", ".", "unset_weights_stdev", "(", ")", "\n", "\n", "return", "tf", ".", "reshape", "(", "output_disc", ",", "[", "-", "1", "]", ")", ",", "output_vo", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.VGGDiscriminator": [[599, 660], ["tensorflow.reshape", "tflib.ops.conv2d.set_weights_stdev", "tflib.ops.deconv2d.set_weights_stdev", "tflib.ops.linear.set_weights_stdev", "tflib.ops.conv2d.Conv2D", "nonlinearity", "tflib.ops.conv2d.Conv2D", "nonlinearity", "tensorflow.nn.max_pool", "tflib.ops.conv2d.Conv2D", "nonlinearity", "tflib.ops.conv2d.Conv2D", "nonlinearity", "tensorflow.nn.max_pool", "tflib.ops.conv2d.Conv2D", "nonlinearity", "tflib.ops.conv2d.Conv2D", "nonlinearity", "tensorflow.nn.max_pool", "tflib.ops.conv2d.Conv2D", "nonlinearity", "tflib.ops.conv2d.Conv2D", "nonlinearity", "tensorflow.nn.max_pool", "tflib.ops.conv2d.Conv2D", "nonlinearity", "tflib.ops.conv2d.Conv2D", "nonlinearity", "tensorflow.nn.max_pool", "tensorflow.reshape", "tflib.ops.linear.Linear", "tflib.ops.linear.Linear", "tensorflow.nn.relu", "tensorflow.cond", "tflib.ops.linear.Linear", "tensorflow.nn.relu", "tensorflow.cond", "tflib.ops.linear.Linear", "tensorflow.norm", "tensorflow.concat", "tflib.ops.conv2d.unset_weights_stdev", "tflib.ops.deconv2d.unset_weights_stdev", "tflib.ops.linear.unset_weights_stdev", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.dropout", "tensorflow.nn.dropout"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.linear.set_weights_stdev", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.linear.set_weights_stdev", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.linear.set_weights_stdev", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.conv2d.Conv2D", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.conv2d.Conv2D", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.max_pool", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.conv2d.Conv2D", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.conv2d.Conv2D", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.max_pool", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.conv2d.Conv2D", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.conv2d.Conv2D", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.max_pool", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.conv2d.Conv2D", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.conv2d.Conv2D", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.max_pool", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.conv2d.Conv2D", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.conv2d.Conv2D", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.max_pool", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.linear.Linear", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.linear.Linear", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.linear.Linear", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.linear.Linear", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.norm", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.linear.unset_weights_stdev", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.linear.unset_weights_stdev", "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.linear.unset_weights_stdev"], ["", "def", "VGGDiscriminator", "(", "inputs", ",", "train_mode", ",", "dim", "=", "DIM", ",", "nonlinearity", "=", "LeakyReLU", ")", ":", "\n", "    ", "output", "=", "tf", ".", "reshape", "(", "inputs", ",", "[", "-", "1", ",", "IMAGE_CHANNELS", ",", "IMAGE_HEIGHT", ",", "IMAGE_WIDTH", "]", ")", "\n", "lib", ".", "ops", ".", "conv2d", ".", "set_weights_stdev", "(", "0.02", ")", "\n", "lib", ".", "ops", ".", "deconv2d", ".", "set_weights_stdev", "(", "0.02", ")", "\n", "lib", ".", "ops", ".", "linear", ".", "set_weights_stdev", "(", "0.02", ")", "\n", "width", "=", "IMAGE_WIDTH", "/", "32", "# width inicial = 4 en DCGAN original, resulta en una imagen generada con width = 64, ver DCGANGenerator", "\n", "height", "=", "IMAGE_HEIGHT", "/", "32", "\n", "\n", "output", "=", "lib", ".", "ops", ".", "conv2d", ".", "Conv2D", "(", "'Discriminator.1_1'", ",", "IMAGE_CHANNELS", ",", "dim", ",", "3", ",", "output", ")", "\n", "output", "=", "nonlinearity", "(", "output", ")", "\n", "output", "=", "lib", ".", "ops", ".", "conv2d", ".", "Conv2D", "(", "'Discriminator.1_2.ConvPart'", ",", "dim", ",", "dim", ",", "3", ",", "output", ")", "\n", "output", "=", "nonlinearity", "(", "output", ")", "\n", "output", "=", "tf", ".", "nn", ".", "max_pool", "(", "output", ",", "ksize", "=", "[", "1", ",", "1", ",", "2", ",", "2", "]", ",", "strides", "=", "[", "1", ",", "1", ",", "2", ",", "2", "]", ",", "padding", "=", "'SAME'", ",", "data_format", "=", "\"NCHW\"", ")", "\n", "\n", "output", "=", "lib", ".", "ops", ".", "conv2d", ".", "Conv2D", "(", "'Discriminator.2_1.ConvPart'", ",", "dim", ",", "2", "*", "dim", ",", "3", ",", "output", ")", "\n", "output", "=", "nonlinearity", "(", "output", ")", "\n", "output", "=", "lib", ".", "ops", ".", "conv2d", ".", "Conv2D", "(", "'Discriminator.2_2.ConvPart'", ",", "2", "*", "dim", ",", "2", "*", "dim", ",", "3", ",", "output", ")", "\n", "output", "=", "nonlinearity", "(", "output", ")", "\n", "output", "=", "tf", ".", "nn", ".", "max_pool", "(", "output", ",", "ksize", "=", "[", "1", ",", "1", ",", "2", ",", "2", "]", ",", "strides", "=", "[", "1", ",", "1", ",", "2", ",", "2", "]", ",", "padding", "=", "'SAME'", ",", "data_format", "=", "\"NCHW\"", ")", "\n", "\n", "output", "=", "lib", ".", "ops", ".", "conv2d", ".", "Conv2D", "(", "'Discriminator.3_1.ConvPart'", ",", "2", "*", "dim", ",", "4", "*", "dim", ",", "3", ",", "output", ")", "\n", "output", "=", "nonlinearity", "(", "output", ")", "\n", "output", "=", "lib", ".", "ops", ".", "conv2d", ".", "Conv2D", "(", "'Discriminator.3_2.ConvPart'", ",", "4", "*", "dim", ",", "4", "*", "dim", ",", "3", ",", "output", ")", "\n", "output", "=", "nonlinearity", "(", "output", ")", "\n", "output", "=", "tf", ".", "nn", ".", "max_pool", "(", "output", ",", "ksize", "=", "[", "1", ",", "1", ",", "2", ",", "2", "]", ",", "strides", "=", "[", "1", ",", "1", ",", "2", ",", "2", "]", ",", "padding", "=", "'SAME'", ",", "data_format", "=", "\"NCHW\"", ")", "\n", "\n", "output", "=", "lib", ".", "ops", ".", "conv2d", ".", "Conv2D", "(", "'Discriminator.4_1.ConvPart'", ",", "4", "*", "dim", ",", "8", "*", "dim", ",", "3", ",", "output", ")", "\n", "output", "=", "nonlinearity", "(", "output", ")", "\n", "output", "=", "lib", ".", "ops", ".", "conv2d", ".", "Conv2D", "(", "'Discriminator.4_2.ConvPart'", ",", "8", "*", "dim", ",", "8", "*", "dim", ",", "3", ",", "output", ")", "\n", "output", "=", "nonlinearity", "(", "output", ")", "\n", "output", "=", "tf", ".", "nn", ".", "max_pool", "(", "output", ",", "ksize", "=", "[", "1", ",", "1", ",", "2", ",", "2", "]", ",", "strides", "=", "[", "1", ",", "1", ",", "2", ",", "2", "]", ",", "padding", "=", "'SAME'", ",", "data_format", "=", "\"NCHW\"", ")", "\n", "\n", "output", "=", "lib", ".", "ops", ".", "conv2d", ".", "Conv2D", "(", "'Discriminator.5_1.ConvPart'", ",", "8", "*", "dim", ",", "8", "*", "dim", ",", "3", ",", "output", ")", "\n", "output", "=", "nonlinearity", "(", "output", ")", "\n", "output", "=", "lib", ".", "ops", ".", "conv2d", ".", "Conv2D", "(", "'Discriminator.5_2.ConvPart'", ",", "8", "*", "dim", ",", "8", "*", "dim", ",", "3", ",", "output", ")", "\n", "output", "=", "nonlinearity", "(", "output", ")", "\n", "output", "=", "tf", ".", "nn", ".", "max_pool", "(", "output", ",", "ksize", "=", "[", "1", ",", "1", ",", "2", ",", "2", "]", ",", "strides", "=", "[", "1", ",", "1", ",", "2", ",", "2", "]", ",", "padding", "=", "'SAME'", ",", "data_format", "=", "\"NCHW\"", ")", "\n", "\n", "output", "=", "tf", ".", "reshape", "(", "output", ",", "[", "-", "1", ",", "height", "*", "width", "*", "2", "*", "dim", "]", ")", "\n", "output_disc", "=", "lib", ".", "ops", ".", "linear", ".", "Linear", "(", "'Discriminator.Output'", ",", "height", "*", "width", "*", "2", "*", "dim", ",", "1", ",", "output", ")", "\n", "\n", "dropout", "=", "0.5", "\n", "fc1", "=", "lib", ".", "ops", ".", "linear", ".", "Linear", "(", "'Discriminator.VO.1'", ",", "height", "*", "width", "*", "2", "*", "dim", ",", "512", ",", "output", ")", "\n", "relu1", "=", "tf", ".", "nn", ".", "relu", "(", "fc1", ")", "\n", "drop1", "=", "tf", ".", "cond", "(", "train_mode", ",", "lambda", ":", "tf", ".", "nn", ".", "dropout", "(", "relu1", ",", "dropout", ")", ",", "lambda", ":", "relu1", ")", "\n", "\n", "fc2", "=", "lib", ".", "ops", ".", "linear", ".", "Linear", "(", "'Discriminator.VO.2'", ",", "512", ",", "512", ",", "drop1", ")", "\n", "relu2", "=", "tf", ".", "nn", ".", "relu", "(", "fc2", ")", "\n", "drop2", "=", "tf", ".", "cond", "(", "train_mode", ",", "lambda", ":", "tf", ".", "nn", ".", "dropout", "(", "relu2", ",", "dropout", ")", ",", "lambda", ":", "relu2", ")", "\n", "output_vo", "=", "lib", ".", "ops", ".", "linear", ".", "Linear", "(", "'Discriminator.VO.3'", ",", "512", ",", "LABELS_SIZE", ",", "drop2", ")", "\n", "\n", "quaternions", "=", "output_vo", "[", ":", ",", "3", ":", "LABELS_SIZE", "]", "\n", "quaternions_norm", "=", "tf", ".", "norm", "(", "quaternions", ",", "axis", "=", "1", ")", "\n", "unit_quaternions", "=", "quaternions", "/", "tf", ".", "reshape", "(", "quaternions_norm", ",", "(", "-", "1", ",", "1", ")", ")", "\n", "output_vo", "=", "tf", ".", "concat", "(", "[", "output_vo", "[", ":", ",", ":", "3", "]", ",", "unit_quaternions", "]", ",", "1", ")", "\n", "\n", "lib", ".", "ops", ".", "conv2d", ".", "unset_weights_stdev", "(", ")", "\n", "lib", ".", "ops", ".", "deconv2d", ".", "unset_weights_stdev", "(", ")", "\n", "lib", ".", "ops", ".", "linear", ".", "unset_weights_stdev", "(", ")", "\n", "\n", "return", "tf", ".", "reshape", "(", "output_disc", ",", "[", "-", "1", "]", ")", ",", "output_vo", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.vo_cost_function": [[661, 663], ["tensorflow.reduce_mean", "tensorflow.abs", "tensorflow.subtract"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.abs"], ["", "def", "vo_cost_function", "(", "outputs", ",", "targets", ")", ":", "\n", "    ", "return", "tf", ".", "reduce_mean", "(", "tf", ".", "abs", "(", "tf", ".", "subtract", "(", "outputs", ",", "targets", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.load_model": [[664, 669], ["tensorflow.train.Saver", "tf.train.Saver.restore"], "function", ["None"], ["", "def", "load_model", "(", "sess", ",", "model_name", ",", "var_list", ")", ":", "\n", "    ", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "var_list", ")", "#import_meta_graph(model_name+'.meta')", "\n", "# print(model_name)", "\n", "# inverse_intrinsic_matrix = np.linalg.inv(intrinsic_matrix)", "\n", "saver", ".", "restore", "(", "sess", ",", "model_name", ")", "# tf.train.latest_checkpoint('./'))", "\n", "# graph = tf.get_default_graph()", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.run": [[672, 1094], ["tensorflow.Session", "wgan_improved.GeneratorAndDiscriminator", "tensorflow.placeholder", "tensorflow.placeholder", "tensorflow.transpose", "tensorflow.reshape", "Generator", "tensorflow.placeholder", "tensorflow.placeholder", "Discriminator", "Discriminator", "tensorflow.identity", "tensorflow.constant", "Generator", "vgg_trainable.input_data.read_data_sets", "vgg_trainable.input_data.read_data_sets", "vgg_trainable.input_data.read_data_sets", "vgg_trainable.input_data.DataSet", "tensorflow.summary.merge_all", "tensorflow.global_variables_initializer", "tensorflow.placeholder", "tensorflow.train.RMSPropOptimizer().minimize", "tensorflow.train.RMSPropOptimizer().minimize", "tflib.params_with_name", "tensorflow.group", "numpy.random.normal().astype", "session.run", "wgan_improved.run.rescale_img"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.GeneratorAndDiscriminator", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.run"], ["", "def", "run", "(", "args", ")", ":", "\n", "    ", "with", "tf", ".", "Session", "(", "config", "=", "tf", ".", "ConfigProto", "(", "allow_soft_placement", "=", "True", ")", ")", "as", "session", ":", "\n", "        ", "Generator", ",", "Discriminator", "=", "GeneratorAndDiscriminator", "(", "args", ".", "arch", ")", "\n", "# data format = NHWC porque para vgg se hizo asi (usan los mismos metodos para la carga de datos)", "\n", "# Las imagenes se cargan como arrays en [0, 1]", "\n", "load_points", "=", "False", "\n", "all_real_data_conv", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "\n", "shape", "=", "[", "args", ".", "batch_size", ",", "IMAGE_HEIGHT", ",", "IMAGE_WIDTH", ",", "IMAGE_CHANNELS", "]", ",", "\n", "name", "=", "\"images_placeholder\"", ")", "\n", "points", "=", "None", "\n", "if", "load_points", ":", "\n", "            ", "points", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "\n", "shape", "=", "[", "args", ".", "batch_size", ",", "3", ",", "IMAGE_POINTS", "]", ",", "\n", "name", "=", "\"train_points_placeholder\"", ")", "\n", "", "vo_targets", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "shape", "=", "[", "args", ".", "batch_size", ",", "LABELS_SIZE", "]", ",", "name", "=", "\"targets_placeholder\"", ")", "\n", "\n", "# Mediante tf.transpose se pasa a NCHW", "\n", "transposed_all_real_data_conv", "=", "tf", ".", "transpose", "(", "all_real_data_conv", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ")", "\n", "\n", "# Rescale from [0, 1] to [-1, 1]", "\n", "# Esto es porque la salida del Generator devuelve valores en [-1, 1] (la ultima capa es una tanh)", "\n", "real_norm_data", "=", "2", "*", "(", "tf", ".", "cast", "(", "transposed_all_real_data_conv", ",", "tf", ".", "float32", ")", "-", ".5", ")", "\n", "real_data", "=", "tf", ".", "reshape", "(", "real_norm_data", ",", "\n", "[", "args", ".", "batch_size", ",", "IMAGE_HEIGHT", "*", "IMAGE_WIDTH", "*", "IMAGE_CHANNELS", "]", ")", "\n", "fake_data", "=", "Generator", "(", "args", ".", "batch_size", ")", "\n", "\n", "train_mode", "=", "tf", ".", "placeholder", "(", "tf", ".", "bool", ",", "name", "=", "\"train_mode\"", ")", "\n", "global_iter", "=", "tf", ".", "placeholder", "(", "tf", ".", "int32", ",", "name", "=", "\"global_iter\"", ")", "\n", "\n", "disc_real", ",", "disc_real_vo", "=", "Discriminator", "(", "real_data", ",", "train_mode", ")", "\n", "disc_fake", ",", "_", "=", "Discriminator", "(", "fake_data", ",", "train_mode", ")", "\n", "disc_real_vo", "=", "tf", ".", "identity", "(", "disc_real_vo", ",", "name", "=", "\"outputs\"", ")", "\n", "\n", "if", "MODE", "==", "'wgan'", ":", "\n", "            ", "gen_cost", "=", "-", "tf", ".", "reduce_mean", "(", "disc_fake", ")", "\n", "disc_cost", "=", "tf", ".", "reduce_mean", "(", "disc_fake", ")", "-", "tf", ".", "reduce_mean", "(", "disc_real", ")", "\n", "\n", "", "elif", "MODE", "==", "'wgan-gp'", ":", "\n", "            ", "gen_cost", "=", "-", "tf", ".", "reduce_mean", "(", "disc_fake", ")", "\n", "disc_cost", "=", "tf", ".", "reduce_mean", "(", "disc_fake", ")", "-", "tf", ".", "reduce_mean", "(", "disc_real", ")", "\n", "# sx = lib.param(\"Discriminator.sx\", 0.)", "\n", "# sq = lib.param(\"Discriminator.sq\", -3.)", "\n", "print", "(", "args", ".", "repr_loss_since", ")", "\n", "sx", "=", "lib", ".", "param", "(", "\"Loss.sx\"", ",", "0.", ")", "\n", "sq", "=", "lib", ".", "param", "(", "\"Loss.sq\"", ",", "-", "3.", ")", "\n", "#disc_vo_cost = kendall_loss_uncertainty(disc_real_vo, vo_targets, sx, sq)", "\n", "disc_vo_cost", "=", "kendall_loss_naive", "(", "disc_real_vo", ",", "vo_targets", ")", "# tf.cond(global_iter < args.repr_loss_since,", "\n", "# true_fn=lambda: kendall_loss_naive(disc_real_vo, vo_targets),", "\n", "# false_fn=lambda: kendall_reprojection_loss(disc_real_vo,", "\n", "#                                            vo_targets,", "\n", "#                                            points))  # kendall_loss_uncertainty(disc_real_vo, vo_targets, sx, sq)", "\n", "alpha", "=", "tf", ".", "random_uniform", "(", "\n", "shape", "=", "[", "args", ".", "batch_size", ",", "1", "]", ",", "\n", "minval", "=", "0.", ",", "\n", "maxval", "=", "1.", "\n", ")", "\n", "differences", "=", "fake_data", "-", "real_data", "\n", "interpolates", "=", "real_data", "+", "(", "alpha", "*", "differences", ")", "\n", "disc_interp", ",", "_", "=", "Discriminator", "(", "interpolates", ",", "train_mode", ")", "\n", "gradients", "=", "tf", ".", "gradients", "(", "disc_interp", ",", "[", "interpolates", "]", ")", "[", "0", "]", "\n", "slopes", "=", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "gradients", ")", ",", "reduction_indices", "=", "[", "1", "]", ")", ")", "\n", "gradient_penalty", "=", "tf", ".", "reduce_mean", "(", "(", "slopes", "-", "1.", ")", "**", "2", ")", "\n", "disc_cost", "+=", "LAMBDA", "*", "gradient_penalty", "\n", "tf", ".", "summary", ".", "scalar", "(", "'gen_cost'", ",", "gen_cost", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'disc_cost'", ",", "disc_cost", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'vo_cost'", ",", "disc_vo_cost", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "'global_iterr'", ",", "global_iter", ")", "\n", "\n", "", "elif", "MODE", "==", "'dcgan'", ":", "\n", "            ", "try", ":", "# tf pre-1.0 (bottom) vs 1.0 (top)", "\n", "                ", "gen_cost", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "logits", "=", "disc_fake", ",", "\n", "labels", "=", "tf", ".", "ones_like", "(", "\n", "disc_fake", ")", ")", ")", "\n", "disc_cost", "=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "logits", "=", "disc_fake", ",", "\n", "labels", "=", "tf", ".", "zeros_like", "(", "\n", "disc_fake", ")", ")", ")", "\n", "disc_cost", "+=", "tf", ".", "reduce_mean", "(", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "logits", "=", "disc_real", ",", "\n", "labels", "=", "tf", ".", "ones_like", "(", "\n", "disc_real", ")", ")", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "                ", "gen_cost", "=", "tf", ".", "reduce_mean", "(", "\n", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "disc_fake", ",", "tf", ".", "ones_like", "(", "disc_fake", ")", ")", ")", "\n", "disc_cost", "=", "tf", ".", "reduce_mean", "(", "\n", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "disc_fake", ",", "tf", ".", "zeros_like", "(", "disc_fake", ")", ")", ")", "\n", "disc_cost", "+=", "tf", ".", "reduce_mean", "(", "\n", "tf", ".", "nn", ".", "sigmoid_cross_entropy_with_logits", "(", "disc_real", ",", "tf", ".", "ones_like", "(", "disc_real", ")", ")", ")", "\n", "", "disc_cost", "/=", "2.", "\n", "\n", "", "elif", "MODE", "==", "'lsgan'", ":", "\n", "            ", "gen_cost", "=", "tf", ".", "reduce_mean", "(", "(", "disc_fake", "-", "1", ")", "**", "2", ")", "\n", "disc_cost", "=", "(", "tf", ".", "reduce_mean", "(", "(", "disc_real", "-", "1", ")", "**", "2", ")", "+", "tf", ".", "reduce_mean", "(", "(", "disc_fake", "-", "0", ")", "**", "2", ")", ")", "/", "2.", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", ")", "\n", "\n", "", "if", "MODE", "==", "'wgan'", ":", "\n", "            ", "gen_train_op", "=", "tf", ".", "train", ".", "RMSPropOptimizer", "(", "learning_rate", "=", "5e-5", ")", ".", "minimize", "(", "gen_cost", ",", "\n", "var_list", "=", "lib", ".", "params_with_name", "(", "\n", "'Generator'", ")", ",", "\n", "colocate_gradients_with_ops", "=", "True", ")", "\n", "disc_train_op", "=", "tf", ".", "train", ".", "RMSPropOptimizer", "(", "learning_rate", "=", "5e-5", ")", ".", "minimize", "(", "disc_cost", ",", "\n", "var_list", "=", "lib", ".", "params_with_name", "(", "\n", "'Discriminator.'", ")", ",", "\n", "colocate_gradients_with_ops", "=", "True", ")", "\n", "\n", "clip_ops", "=", "[", "]", "\n", "for", "var", "in", "lib", ".", "params_with_name", "(", "'Discriminator'", ")", ":", "\n", "                ", "clip_bounds", "=", "[", "-", ".01", ",", ".01", "]", "\n", "clip_ops", ".", "append", "(", "tf", ".", "assign", "(", "var", ",", "tf", ".", "clip_by_value", "(", "var", ",", "clip_bounds", "[", "0", "]", ",", "clip_bounds", "[", "1", "]", ")", ")", ")", "\n", "", "clip_disc_weights", "=", "tf", ".", "group", "(", "*", "clip_ops", ")", "\n", "\n", "", "elif", "MODE", "==", "'wgan-gp'", ":", "\n", "# con var_list le indicamos los parametros (pesos) que queremos actualizar, en el primer caso los del Generator, en el segundo caso los del Disc", "\n", "            ", "gen_train_op", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "1e-4", ",", "beta1", "=", "0.", ",", "beta2", "=", "0.9", ")", ".", "minimize", "(", "gen_cost", ",", "\n", "var_list", "=", "lib", ".", "params_with_name", "(", "\n", "'Generator'", ")", ",", "\n", "colocate_gradients_with_ops", "=", "True", ")", "\n", "disc_train_op", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "1e-4", ",", "beta1", "=", "0.", ",", "beta2", "=", "0.9", ")", ".", "minimize", "(", "disc_cost", ",", "\n", "var_list", "=", "lib", ".", "params_with_name", "(", "\n", "'Discriminator.'", ")", ",", "\n", "colocate_gradients_with_ops", "=", "True", ")", "\n", "disc_vo_train_op", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "1e-4", ",", "beta1", "=", "0.", ",", "beta2", "=", "0.9", ")", ".", "minimize", "(", "disc_vo_cost", ",", "\n", "var_list", "=", "lib", ".", "params_with_name", "(", "\n", "'Discriminator.'", ")", "+", "[", "sx", ",", "sq", "]", ",", "\n", "colocate_gradients_with_ops", "=", "True", ")", "\n", "\n", "", "elif", "MODE", "==", "'dcgan'", ":", "\n", "            ", "gen_train_op", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "2e-4", ",", "beta1", "=", "0.5", ")", ".", "minimize", "(", "gen_cost", ",", "\n", "var_list", "=", "lib", ".", "params_with_name", "(", "\n", "'Generator'", ")", ",", "\n", "colocate_gradients_with_ops", "=", "True", ")", "\n", "disc_train_op", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", "=", "2e-4", ",", "beta1", "=", "0.5", ")", ".", "minimize", "(", "disc_cost", ",", "\n", "var_list", "=", "lib", ".", "params_with_name", "(", "\n", "'Discriminator.'", ")", ",", "\n", "colocate_gradients_with_ops", "=", "True", ")", "\n", "\n", "", "elif", "MODE", "==", "'lsgan'", ":", "\n", "            ", "gen_train_op", "=", "tf", ".", "train", ".", "RMSPropOptimizer", "(", "learning_rate", "=", "1e-4", ")", ".", "minimize", "(", "gen_cost", ",", "\n", "var_list", "=", "lib", ".", "params_with_name", "(", "\n", "'Generator'", ")", ",", "\n", "colocate_gradients_with_ops", "=", "True", ")", "\n", "disc_train_op", "=", "tf", ".", "train", ".", "RMSPropOptimizer", "(", "learning_rate", "=", "1e-4", ")", ".", "minimize", "(", "disc_cost", ",", "\n", "var_list", "=", "lib", ".", "params_with_name", "(", "\n", "'Discriminator.'", ")", ",", "\n", "colocate_gradients_with_ops", "=", "True", ")", "\n", "\n", "", "else", ":", "\n", "            ", "raise", "Exception", "(", ")", "\n", "\n", "# For generating samples", "\n", "", "fixed_noise", "=", "tf", ".", "constant", "(", "np", ".", "random", ".", "normal", "(", "size", "=", "(", "args", ".", "batch_size", ",", "128", ")", ")", ".", "astype", "(", "'float32'", ")", ")", "\n", "all_fixed_noise_samples", "=", "Generator", "(", "args", ".", "batch_size", ",", "noise", "=", "fixed_noise", ")", "\n", "\n", "def", "generate_image", "(", "path", ",", "iteration", ")", ":", "\n", "            ", "samples", "=", "session", ".", "run", "(", "all_fixed_noise_samples", ")", "\n", "samples", "=", "rescale_img", "(", "samples", ")", "\n", "samples", "=", "samples", ".", "reshape", "(", "(", "args", ".", "batch_size", ",", "IMAGE_CHANNELS", ",", "IMAGE_HEIGHT", ",", "IMAGE_WIDTH", ")", ")", "\n", "# lib.save_images.save_pair_images(samples, path, iteration)", "\n", "lib", ".", "save_images", ".", "save_pair_images_grid", "(", "samples", ",", "path", ",", "iteration", ")", "\n", "\n", "", "def", "rescale_img", "(", "samples", ")", ":", "\n", "            ", "return", "(", "(", "samples", "+", "1.", ")", "*", "(", "255.99", "/", "2", ")", ")", ".", "astype", "(", "'int32'", ")", "\n", "\n", "# Dataset iterator", "\n", "# train_gen, dev_gen = lib.small_imagenet.load(args.batch_size, data_dir=DATA_DIR)", "\n", "\n", "# def inf_train_gen():", "\n", "#    while True:", "\n", "#        for (images,) in train_gen():", "\n", "#            yield images", "\n", "\n", "", "def", "save_gt_image", "(", "batch", ",", "path", ",", "iteration", ")", ":", "\n", "# Save a batch of ground-truth samples", "\n", "# imgs = session.run(transposed_all_real_data_conv, feed_dict={all_real_data_conv: batch})", "\n", "# lib.save_images.save_pair_images(imgs, path, 777)", "\n", "            ", "_x_r", "=", "session", ".", "run", "(", "real_data", ",", "feed_dict", "=", "{", "all_real_data_conv", ":", "batch", "}", ")", "\n", "_x_r", "=", "rescale_img", "(", "_x_r", ")", "\n", "lib", ".", "save_images", ".", "save_pair_images", "(", "_x_r", ".", "reshape", "(", "(", "args", ".", "batch_size", ",", "IMAGE_CHANNELS", ",", "IMAGE_HEIGHT", ",", "IMAGE_WIDTH", ")", ")", ",", "\n", "path", ",", "iteration", ",", "prefix", "=", "'ground_truth'", ")", "\n", "\n", "", "kfold", "=", "args", ".", "kfold", "\n", "train_images", ",", "train_targets", ",", "splits", ",", "_", ",", "train_points", "=", "read_data_sets", "(", "args", ".", "train_data_dir", ",", "kfold", ",", "\n", "load_points", "=", "load_points", ")", "\n", "test_images", ",", "test_targets", ",", "_", ",", "test_groups", ",", "_", "=", "read_data_sets", "(", "args", ".", "test_data_dir", ")", "\n", "train_gan_images", ",", "train_gan_targets", ",", "_", ",", "_", ",", "_", "=", "read_data_sets", "(", "args", ".", "train_gan_dir", ")", "\n", "\n", "# intrinsic_matrix = np.matrix(load(args.intrinsics_file))", "\n", "# if args.test_intrinsics_file:", "\n", "#     test_intrinsic_matrix = np.matrix(load(args.test_intrinsics_file))", "\n", "# else:", "\n", "#     test_intrinsic_matrix = intrinsic_matrix", "\n", "\n", "test_dataset", "=", "DataSet", "(", "test_images", ",", "test_targets", ",", "groups", "=", "test_groups", ")", "\n", "summary", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "# Add the variable initializer Op.", "\n", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "standardize_targets", "=", "False", "\n", "current_fold", "=", "0", "\n", "require_improvement", "=", "12000", "\n", "run_gan_ops", "=", "not", "args", ".", "disable_gan", "\n", "# Train loop", "\n", "for", "train_indexs", ",", "validation_indexs", "in", "splits", ":", "\n", "\n", "            ", "print", "(", "\"**************** NEW FOLD *******************\"", ")", "\n", "print", "(", "\"Train size: \"", "+", "str", "(", "len", "(", "train_indexs", ")", ")", ")", "\n", "print", "(", "\"Validation size: \"", "+", "str", "(", "len", "(", "validation_indexs", ")", ")", ")", "\n", "train_dataset", "=", "DataSet", "(", "train_images", "[", "train_indexs", "]", ",", "train_targets", "[", "train_indexs", "]", ",", "points", "=", "train_points", ")", "\n", "train_gan_dataset", "=", "DataSet", "(", "train_gan_images", ",", "train_gan_targets", ")", "\n", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "max_to_keep", "=", "1", ")", "\n", "our_metric_saver", "=", "tf", ".", "train", ".", "Saver", "(", "max_to_keep", "=", "1", ")", "\n", "current_fold", "+=", "1", "\n", "fwriter_str", "=", "\"fold_\"", "+", "str", "(", "current_fold", ")", "\n", "curr_fold_log_dir", "=", "os", ".", "path", ".", "join", "(", "args", ".", "log_dir", ",", "fwriter_str", ")", "\n", "# Instantiate a SummaryWriter to output summaries and the Graph.", "\n", "summary_writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "curr_fold_log_dir", ",", "session", ".", "graph", ")", "\n", "best_validation_performance", "=", "1000000.", "\n", "our_metric_test_performance", "=", "1000000.", "\n", "last_improvement", "=", "0", "\n", "our_metric_last_improvement", "=", "0", "\n", "session", ".", "run", "(", "init", ")", "\n", "if", "args", ".", "load_model", ":", "\n", "                ", "pp", "=", "lib", ".", "params_with_name", "(", "'ConvPart'", ")", "\n", "print", "(", "pp", ")", "\n", "load_model", "(", "session", ",", "args", ".", "load_model", ",", "pp", ")", "\n", "# gen = inf_train_gen()", "\n", "", "for", "iteration", "in", "xrange", "(", "args", ".", "max_steps", ")", ":", "\n", "\n", "                ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "\n", "# Train generator", "\n", "if", "iteration", ">", "0", "and", "run_gan_ops", ":", "\n", "                    ", "_", "=", "session", ".", "run", "(", "gen_train_op", ")", "\n", "\n", "# Train critic and VO", "\n", "", "if", "(", "not", "run_gan_ops", ")", "or", "(", "MODE", "==", "'dcgan'", ")", "or", "(", "MODE", "==", "'lsgan'", ")", ":", "\n", "                    ", "disc_iters", "=", "1", "\n", "", "else", ":", "\n", "                    ", "disc_iters", "=", "CRITIC_ITERS", "\n", "", "feed_dict", "=", "None", "\n", "for", "i", "in", "xrange", "(", "disc_iters", ")", ":", "\n", "                    ", "feed_dict", "=", "eval_utils", ".", "fill_feed_dict", "(", "train_gan_dataset", ",", "\n", "all_real_data_conv", ",", "\n", "vo_targets", ",", "\n", "points_pl", "=", "points", ",", "\n", "feed_with_batch", "=", "True", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "standardize_targets", "=", "standardize_targets", ")", "\n", "feed_dict", "[", "train_mode", "]", "=", "True", "\n", "feed_dict", "[", "global_iter", "]", "=", "lib", ".", "plot", ".", "get_global_iter", "(", ")", "\n", "# _data = gen.next()", "\n", "\n", "run_tensors", "=", "[", "]", "\n", "if", "run_gan_ops", ":", "\n", "                        ", "run_tensors", ".", "append", "(", "disc_cost", ")", "\n", "run_tensors", ".", "append", "(", "disc_train_op", ")", "\n", "", "run_results", "=", "session", ".", "run", "(", "run_tensors", ",", "feed_dict", "=", "feed_dict", ")", "\n", "#_disc_vo_cost = run_results[0]", "\n", "#_disc_cost = run_results[0]", "\n", "\n", "if", "MODE", "==", "'wgan'", ":", "\n", "                        ", "_", "=", "session", ".", "run", "(", "[", "clip_disc_weights", "]", ")", "\n", "\n", "", "", "if", "iteration", "%", "100", "==", "0", ":", "\n", "                    ", "duration", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "# Print status to stdout.", "\n", "print", "(", "'Step %d: (%.3f sec)'", "%", "(", "iteration", ",", "duration", ")", ")", "\n", "\n", "", "if", "(", "iteration", "+", "1", ")", "%", "1000", "==", "0", "or", "(", "iteration", "+", "1", ")", "==", "args", ".", "max_steps", ":", "\n", "# t = time.time()", "\n", "# dev_disc_costs = []", "\n", "# for (images,) in dev_gen():", "\n", "#    _dev_disc_cost = session.run(disc_cost, feed_dict={all_real_data_conv: images})", "\n", "#    dev_disc_costs.append(_dev_disc_cost)", "\n", "# lib.plot.plot('dev disc cost', np.mean(dev_disc_costs))", "\n", "\n", "                    ", "if", "run_gan_ops", ":", "\n", "                        ", "generate_image", "(", "curr_fold_log_dir", ",", "iteration", ")", "\n", "save_gt_image", "(", "feed_dict", "[", "all_real_data_conv", "]", ",", "curr_fold_log_dir", ",", "iteration", ")", "\n", "\n", "\n", "", "", "", "for", "iteration", "in", "xrange", "(", "args", ".", "max_vo_steps", ")", ":", "\n", "                ", "feed_dict", "=", "eval_utils", ".", "fill_feed_dict", "(", "train_dataset", ",", "\n", "all_real_data_conv", ",", "\n", "vo_targets", ",", "\n", "points_pl", "=", "points", ",", "\n", "feed_with_batch", "=", "True", ",", "\n", "batch_size", "=", "args", ".", "batch_size", ",", "\n", "standardize_targets", "=", "standardize_targets", ")", "\n", "feed_dict", "[", "train_mode", "]", "=", "True", "\n", "feed_dict", "[", "global_iter", "]", "=", "iteration", "#lib.plot.get_global_iter()", "\n", "# _data = gen.next()", "\n", "\n", "run_tensors", "=", "[", "disc_vo_cost", ",", "disc_vo_train_op", "]", "\n", "#if run_gan_ops:", "\n", "#    run_tensors.append(disc_cost)", "\n", "#    run_tensors.append(disc_train_op)", "\n", "run_results", "=", "session", ".", "run", "(", "run_tensors", ",", "feed_dict", "=", "feed_dict", ")", "\n", "_disc_vo_cost", "=", "run_results", "[", "0", "]", "\n", "\n", "# lib.plot.plot('train disc cost', _disc_cost)", "\n", "lib", ".", "plot", ".", "plot", "(", "'train vo cost'", ",", "_disc_vo_cost", ")", "\n", "lib", ".", "plot", ".", "plot", "(", "'time'", ",", "time", ".", "time", "(", ")", "-", "start_time", ")", "\n", "\n", "# if iteration % 200 == 199:", "\n", "# t = time.time()", "\n", "# dev_disc_costs = []", "\n", "# for (images,) in dev_gen():", "\n", "#    _dev_disc_cost = session.run(disc_cost, feed_dict={all_real_data_conv: images})", "\n", "#    dev_disc_costs.append(_dev_disc_cost)", "\n", "# lib.plot.plot('dev disc cost', np.mean(dev_disc_costs))", "\n", "\n", "# generate_image(iteration)", "\n", "\n", "if", "iteration", "%", "100", "==", "0", ":", "\n", "                    ", "duration", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "# Print status to stdout.", "\n", "print", "(", "'Step %d: loss = %.2f (%.3f sec)'", "%", "(", "iteration", ",", "_disc_vo_cost", ",", "duration", ")", ")", "\n", "# Update the events file.", "\n", "summary_str", "=", "session", ".", "run", "(", "summary", ",", "feed_dict", "=", "feed_dict", ")", "\n", "summary_writer", ".", "add_summary", "(", "summary_str", ",", "iteration", ")", "\n", "summary_writer", ".", "flush", "(", ")", "\n", "", "if", "(", "iteration", "<", "5", ")", "or", "(", "iteration", "%", "200", "==", "199", ")", ":", "\n", "                    ", "lib", ".", "plot", ".", "flush", "(", "curr_fold_log_dir", ")", "\n", "# Save a checkpoint and evaluate the model periodically.", "\n", "", "if", "(", "iteration", "+", "1", ")", "%", "1000", "==", "0", "or", "(", "iteration", "+", "1", ")", "==", "args", ".", "max_vo_steps", ":", "\n", "# t = time.time()", "\n", "# dev_disc_costs = []", "\n", "# for (images,) in dev_gen():", "\n", "#    _dev_disc_cost = session.run(disc_cost, feed_dict={all_real_data_conv: images})", "\n", "#    dev_disc_costs.append(_dev_disc_cost)", "\n", "# lib.plot.plot('dev disc cost', np.mean(dev_disc_costs))", "\n", "\n", "#if run_gan_ops:", "\n", "#    generate_image(curr_fold_log_dir, iteration)", "\n", "#    save_gt_image(feed_dict[all_real_data_conv], curr_fold_log_dir, iteration)", "\n", "# Evaluate against the training set.", "\n", "                    ", "print", "(", "'Training Data Eval:'", ")", "\n", "train_rmse_x", ",", "train_rmse_ang", ",", "train_dist_q", ",", "train_mse", ",", "train_norm_mse", "=", "do_evaluation", "(", "session", ",", "\n", "disc_real_vo", ",", "\n", "all_real_data_conv", ",", "\n", "vo_targets", ",", "\n", "train_dataset", ",", "\n", "args", ".", "batch_size", ",", "\n", "# intrinsic_matrix,", "\n", "standardize_targets", ",", "\n", "train_mode", ")", "\n", "add_scalar_to_tensorboard", "(", "train_rmse_x", ",", "\"tr_rmse_xyz\"", ",", "summary_writer", ",", "iteration", ")", "\n", "add_scalar_to_tensorboard", "(", "train_rmse_ang", ",", "\"tr_rmse_ang\"", ",", "summary_writer", ",", "iteration", ")", "\n", "add_scalar_to_tensorboard", "(", "train_dist_q", ",", "\"tr_gdist_q\"", ",", "summary_writer", ",", "iteration", ")", "\n", "# add_array_to_tensorboard(train_mse, \"tr_mse_\", summary_writer, iteration)", "\n", "# add_array_to_tensorboard(train_norm_mse, \"tr_norm_mse_\", summary_writer, iteration)", "\n", "# Evaluate against the validation set.", "\n", "print", "(", "'Validation Data Eval:'", ")", "\n", "validation_rmse_x", ",", "validation_rmse_ang", ",", "validation_dist_q", ",", "validation_mse", ",", "validation_norm_mse", "=", "do_evaluation", "(", "\n", "session", ",", "\n", "disc_real_vo", ",", "\n", "all_real_data_conv", ",", "\n", "vo_targets", ",", "\n", "DataSet", "(", "\n", "train_images", "[", "\n", "validation_indexs", "]", ",", "\n", "train_targets", "[", "\n", "validation_indexs", "]", ")", ",", "\n", "args", ".", "batch_size", ",", "\n", "# intrinsic_matrix,", "\n", "standardize_targets", ",", "\n", "train_mode", ")", "\n", "add_scalar_to_tensorboard", "(", "validation_rmse_x", ",", "\"v_rmse_xyz\"", ",", "summary_writer", ",", "iteration", ")", "\n", "add_scalar_to_tensorboard", "(", "validation_rmse_ang", ",", "\"v_rmse_ang\"", ",", "summary_writer", ",", "iteration", ")", "\n", "add_scalar_to_tensorboard", "(", "validation_dist_q", ",", "\"v_gdist_q\"", ",", "summary_writer", ",", "iteration", ")", "\n", "# add_array_to_tensorboard(validation_mse, \"v_mse_\", summary_writer, iteration)", "\n", "# add_array_to_tensorboard(validation_norm_mse, \"v_norm_mse_\", summary_writer, iteration)", "\n", "# Evaluate against the test set.", "\n", "print", "(", "'Test Data Eval:'", ")", "\n", "test_rmse_x", ",", "test_rmse_ang", ",", "test_dist_q", ",", "test_mse", ",", "test_norm_mse", "=", "do_evaluation", "(", "session", ",", "\n", "disc_real_vo", ",", "\n", "all_real_data_conv", ",", "\n", "vo_targets", ",", "\n", "test_dataset", ",", "\n", "args", ".", "batch_size", ",", "\n", "# test_intrinsic_matrix,", "\n", "standardize_targets", ",", "\n", "train_mode", ")", "\n", "add_scalar_to_tensorboard", "(", "test_rmse_x", ",", "\"te_rmse_xyz\"", ",", "summary_writer", ",", "iteration", ")", "\n", "add_scalar_to_tensorboard", "(", "test_rmse_ang", ",", "\"te_rmse_ang\"", ",", "summary_writer", ",", "iteration", ")", "\n", "add_scalar_to_tensorboard", "(", "test_dist_q", ",", "\"te_gdist_q\"", ",", "summary_writer", ",", "iteration", ")", "\n", "# add_array_to_tensorboard(test_mse, \"te_mse_\", summary_writer, iteration)", "\n", "# add_array_to_tensorboard(test_norm_mse, \"te_norm_mse_\", summary_writer, iteration)", "\n", "\n", "test_dataset", ".", "reset_epoch", "(", ")", "\n", "\n", "print", "(", "\"Test Eval:\"", ")", "\n", "relative_prediction", ",", "relative_target", "=", "eval_utils", ".", "infer_relative_poses", "(", "session", ",", "test_dataset", ",", "\n", "FLAGS", ".", "batch_size", ",", "\n", "all_real_data_conv", ",", "\n", "disc_real_vo", ",", "\n", "vo_targets", ",", "\n", "train_mode", ")", "\n", "save_txt", "=", "iteration", "==", "999", "or", "iteration", "==", "19999", "or", "iteration", "==", "39999", "\n", "te_eval", "=", "eval_utils", ".", "our_metric_evaluation", "(", "relative_prediction", ",", "relative_target", ",", "test_dataset", ",", "\n", "curr_fold_log_dir", ",", "save_txt", ")", "\n", "print", "(", "te_eval", ")", "\n", "add_scalar_to_tensorboard", "(", "te_eval", ",", "\"mean(square(log(d)/log(f)))\"", ",", "summary_writer", ",", "iteration", ")", "\n", "\n", "if", "te_eval", "<", "our_metric_test_performance", ":", "\n", "                        ", "our_metric_test_performance", "=", "te_eval", "\n", "our_metric_last_improvement", "=", "iteration", "\n", "checkpoint_file", "=", "os", ".", "path", ".", "join", "(", "curr_fold_log_dir", ",", "'our-metric-wgan-model'", ")", "\n", "our_metric_saver", ".", "save", "(", "session", ",", "checkpoint_file", ",", "global_step", "=", "iteration", ")", "\n", "\n", "# Keep the best model", "\n", "", "if", "validation_rmse_x", "<", "best_validation_performance", ":", "\n", "                        ", "best_validation_performance", "=", "validation_rmse_x", "\n", "last_improvement", "=", "iteration", "\n", "checkpoint_file", "=", "os", ".", "path", ".", "join", "(", "curr_fold_log_dir", ",", "'wgan-model'", ")", "\n", "saver", ".", "save", "(", "session", ",", "checkpoint_file", ",", "global_step", "=", "iteration", ")", "\n", "", "if", "iteration", "-", "last_improvement", ">", "require_improvement", "and", "args", ".", "early_stopping", ":", "\n", "                        ", "print", "(", "\n", "\"No improvement found in a while, stopping optimization. Last improvement = step %d\"", "%", "(", "\n", "last_improvement", ")", ")", "\n", "break", "\n", "", "", "lib", ".", "plot", ".", "tick", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.main": [[1096, 1098], ["wgan_improved.run"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.run"], ["", "", "", "", "def", "main", "(", "_", ")", ":", "\n", "    ", "run", "(", "FLAGS", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.tflib.inception_score.get_inception_score": [[67, 96], ["type", "type", "len", "numpy.max", "numpy.min", "img.astype.astype", "inps.append", "tensorflow.Session", "int", "range", "numpy.concatenate", "range", "numpy.expand_dims", "math.ceil", "numpy.concatenate", "sess.run", "np.concatenate.append", "numpy.mean", "scores.append", "numpy.mean", "numpy.std", "numpy.sum", "numpy.exp", "float", "float", "min", "numpy.log", "numpy.log", "len", "len", "numpy.expand_dims", "numpy.mean"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.run"], ["def", "get_inception_score", "(", "images", ",", "splits", "=", "10", ")", ":", "\n", "  ", "assert", "(", "type", "(", "images", ")", "==", "list", ")", "\n", "assert", "(", "type", "(", "images", "[", "0", "]", ")", "==", "np", ".", "ndarray", ")", "\n", "assert", "(", "len", "(", "images", "[", "0", "]", ".", "shape", ")", "==", "3", ")", "\n", "assert", "(", "np", ".", "max", "(", "images", "[", "0", "]", ")", ">", "10", ")", "\n", "assert", "(", "np", ".", "min", "(", "images", "[", "0", "]", ")", ">=", "0.0", ")", "\n", "inps", "=", "[", "]", "\n", "for", "img", "in", "images", ":", "\n", "    ", "img", "=", "img", ".", "astype", "(", "np", ".", "float32", ")", "\n", "inps", ".", "append", "(", "np", ".", "expand_dims", "(", "img", ",", "0", ")", ")", "\n", "", "bs", "=", "100", "\n", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "    ", "preds", "=", "[", "]", "\n", "n_batches", "=", "int", "(", "math", ".", "ceil", "(", "float", "(", "len", "(", "inps", ")", ")", "/", "float", "(", "bs", ")", ")", ")", "\n", "for", "i", "in", "range", "(", "n_batches", ")", ":", "\n", "# sys.stdout.write(\".\")", "\n", "# sys.stdout.flush()", "\n", "        ", "inp", "=", "inps", "[", "(", "i", "*", "bs", ")", ":", "min", "(", "(", "i", "+", "1", ")", "*", "bs", ",", "len", "(", "inps", ")", ")", "]", "\n", "inp", "=", "np", ".", "concatenate", "(", "inp", ",", "0", ")", "\n", "pred", "=", "sess", ".", "run", "(", "softmax", ",", "{", "'ExpandDims:0'", ":", "inp", "}", ")", "\n", "preds", ".", "append", "(", "pred", ")", "\n", "", "preds", "=", "np", ".", "concatenate", "(", "preds", ",", "0", ")", "\n", "scores", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "splits", ")", ":", "\n", "      ", "part", "=", "preds", "[", "(", "i", "*", "preds", ".", "shape", "[", "0", "]", "//", "splits", ")", ":", "(", "(", "i", "+", "1", ")", "*", "preds", ".", "shape", "[", "0", "]", "//", "splits", ")", ",", ":", "]", "\n", "kl", "=", "part", "*", "(", "np", ".", "log", "(", "part", ")", "-", "np", ".", "log", "(", "np", ".", "expand_dims", "(", "np", ".", "mean", "(", "part", ",", "0", ")", ",", "0", ")", ")", ")", "\n", "kl", "=", "np", ".", "mean", "(", "np", ".", "sum", "(", "kl", ",", "1", ")", ")", "\n", "scores", ".", "append", "(", "np", ".", "exp", "(", "kl", ")", ")", "\n", "", "return", "np", ".", "mean", "(", "scores", ")", ",", "np", ".", "std", "(", "scores", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.tflib.inception_score._init_inception": [[98, 137], ["os.path.join", "tarfile.open().extractall", "os.path.exists", "os.makedirs", "DATA_URL.split", "os.path.exists", "six.moves.urllib.request.urlretrieve", "print", "os.stat", "print", "tensorflow.gfile.FastGFile", "tensorflow.GraphDef", "tf.GraphDef.ParseFromString", "tensorflow.import_graph_def", "tensorflow.Session", "sess.graph.get_tensor_by_name", "sess.graph.get_tensor_by_name.graph.get_operations", "enumerate", "tensorflow.matmul", "tensorflow.nn.softmax", "sys.stdout.write", "sys.stdout.write", "sys.stdout.flush", "sys.stdout.flush", "tarfile.open", "os.path.join", "f.read", "tensorflow.squeeze", "o.get_shape", "enumerate", "tensorflow.TensorShape", "sess.graph.get_operation_by_name", "new_shape.append", "new_shape.append", "float", "float"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.test.plot_traj.read", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.get_shape"], ["", "", "def", "_init_inception", "(", ")", ":", "\n", "  ", "global", "softmax", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "MODEL_DIR", ")", ":", "\n", "    ", "os", ".", "makedirs", "(", "MODEL_DIR", ")", "\n", "", "filename", "=", "DATA_URL", ".", "split", "(", "'/'", ")", "[", "-", "1", "]", "\n", "filepath", "=", "os", ".", "path", ".", "join", "(", "MODEL_DIR", ",", "filename", ")", "\n", "if", "not", "os", ".", "path", ".", "exists", "(", "filepath", ")", ":", "\n", "    ", "def", "_progress", "(", "count", ",", "block_size", ",", "total_size", ")", ":", "\n", "      ", "sys", ".", "stdout", ".", "write", "(", "'\\r>> Downloading %s %.1f%%'", "%", "(", "\n", "filename", ",", "float", "(", "count", "*", "block_size", ")", "/", "float", "(", "total_size", ")", "*", "100.0", ")", ")", "\n", "sys", ".", "stdout", ".", "flush", "(", ")", "\n", "", "filepath", ",", "_", "=", "urllib", ".", "request", ".", "urlretrieve", "(", "DATA_URL", ",", "filepath", ",", "_progress", ")", "\n", "print", "(", ")", "\n", "statinfo", "=", "os", ".", "stat", "(", "filepath", ")", "\n", "print", "(", "'Succesfully downloaded'", ",", "filename", ",", "statinfo", ".", "st_size", ",", "'bytes.'", ")", "\n", "", "tarfile", ".", "open", "(", "filepath", ",", "'r:gz'", ")", ".", "extractall", "(", "MODEL_DIR", ")", "\n", "with", "tf", ".", "gfile", ".", "FastGFile", "(", "os", ".", "path", ".", "join", "(", "\n", "MODEL_DIR", ",", "'classify_image_graph_def.pb'", ")", ",", "'rb'", ")", "as", "f", ":", "\n", "    ", "graph_def", "=", "tf", ".", "GraphDef", "(", ")", "\n", "graph_def", ".", "ParseFromString", "(", "f", ".", "read", "(", ")", ")", "\n", "_", "=", "tf", ".", "import_graph_def", "(", "graph_def", ",", "name", "=", "''", ")", "\n", "# Works with an arbitrary minibatch size.", "\n", "", "with", "tf", ".", "Session", "(", ")", "as", "sess", ":", "\n", "    ", "pool3", "=", "sess", ".", "graph", ".", "get_tensor_by_name", "(", "'pool_3:0'", ")", "\n", "ops", "=", "pool3", ".", "graph", ".", "get_operations", "(", ")", "\n", "for", "op_idx", ",", "op", "in", "enumerate", "(", "ops", ")", ":", "\n", "        ", "for", "o", "in", "op", ".", "outputs", ":", "\n", "            ", "shape", "=", "o", ".", "get_shape", "(", ")", "\n", "shape", "=", "[", "s", ".", "value", "for", "s", "in", "shape", "]", "\n", "new_shape", "=", "[", "]", "\n", "for", "j", ",", "s", "in", "enumerate", "(", "shape", ")", ":", "\n", "                ", "if", "s", "==", "1", "and", "j", "==", "0", ":", "\n", "                    ", "new_shape", ".", "append", "(", "None", ")", "\n", "", "else", ":", "\n", "                    ", "new_shape", ".", "append", "(", "s", ")", "\n", "", "", "o", ".", "_shape", "=", "tf", ".", "TensorShape", "(", "new_shape", ")", "\n", "", "", "w", "=", "sess", ".", "graph", ".", "get_operation_by_name", "(", "\"softmax/logits/MatMul\"", ")", ".", "inputs", "[", "1", "]", "\n", "logits", "=", "tf", ".", "matmul", "(", "tf", ".", "squeeze", "(", "pool3", ")", ",", "w", ")", "\n", "softmax", "=", "tf", ".", "nn", ".", "softmax", "(", "logits", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.tflib.cifar10.unpickle": [[51, 56], ["open", "cPickle.load", "open.close"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.tflib.cifar10.load"], ["def", "unpickle", "(", "file", ")", ":", "\n", "    ", "fo", "=", "open", "(", "file", ",", "'rb'", ")", "\n", "dict", "=", "pickle", ".", "load", "(", "fo", ")", "\n", "fo", ".", "close", "(", ")", "\n", "return", "dict", "[", "'data'", "]", ",", "dict", "[", "'labels'", "]", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.tflib.cifar10.cifar_generator": [[57, 78], ["numpy.concatenate", "numpy.concatenate", "cifar10.unpickle", "all_data.append", "all_labels.append", "numpy.random.get_state", "numpy.random.shuffle", "numpy.random.set_state", "numpy.random.shuffle", "xrange", "len"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.tflib.cifar10.unpickle"], ["", "def", "cifar_generator", "(", "filenames", ",", "batch_size", ",", "data_dir", ")", ":", "\n", "    ", "all_data", "=", "[", "]", "\n", "all_labels", "=", "[", "]", "\n", "for", "filename", "in", "filenames", ":", "\n", "        ", "data", ",", "labels", "=", "unpickle", "(", "data_dir", "+", "'/'", "+", "filename", ")", "\n", "all_data", ".", "append", "(", "data", ")", "\n", "all_labels", ".", "append", "(", "labels", ")", "\n", "\n", "", "images", "=", "np", ".", "concatenate", "(", "all_data", ",", "axis", "=", "0", ")", "\n", "labels", "=", "np", ".", "concatenate", "(", "all_labels", ",", "axis", "=", "0", ")", "\n", "\n", "def", "get_epoch", "(", ")", ":", "\n", "        ", "rng_state", "=", "np", ".", "random", ".", "get_state", "(", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "images", ")", "\n", "np", ".", "random", ".", "set_state", "(", "rng_state", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "labels", ")", "\n", "\n", "for", "i", "in", "xrange", "(", "len", "(", "images", ")", "/", "batch_size", ")", ":", "\n", "            ", "yield", "(", "images", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", ",", "labels", "[", "i", "*", "batch_size", ":", "(", "i", "+", "1", ")", "*", "batch_size", "]", ")", "\n", "\n", "", "", "return", "get_epoch", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.tflib.cifar10.load": [[80, 84], ["cifar10.cifar_generator", "cifar10.cifar_generator"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.tflib.cifar10.cifar_generator", "home.repos.pwc.inspect_result.CIFASIS_wganvo.tflib.cifar10.cifar_generator"], ["", "def", "load", "(", "batch_size", ",", "data_dir", ")", ":", "\n", "    ", "return", "(", "\n", "cifar_generator", "(", "[", "'data_batch_1'", ",", "'data_batch_2'", ",", "'data_batch_3'", ",", "'data_batch_4'", ",", "'data_batch_5'", "]", ",", "batch_size", ",", "data_dir", ")", ",", "\n", "cifar_generator", "(", "[", "'test_batch'", "]", ",", "batch_size", ",", "data_dir", ")", "\n", ")", ""]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.tflib.save_images.save_images": [[53, 56], ["save_images.build_grid", "scipy.misc.imsave"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.tflib.save_images.build_grid"], ["def", "save_images", "(", "X", ",", "save_path", ")", ":", "\n", "    ", "img", "=", "build_grid", "(", "X", ")", "\n", "imsave", "(", "save_path", ",", "img", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.tflib.save_images.build_grid": [[58, 82], ["isinstance", "int", "enumerate", "numpy.sqrt", "numpy.reshape", "X.transpose.transpose", "numpy.zeros", "X.transpose.flatten", "numpy.zeros", "int", "int", "numpy.sqrt", "numpy.sqrt"], "function", ["None"], ["", "def", "build_grid", "(", "X", ")", ":", "\n", "# [0, 1] -> [0,255]", "\n", "    ", "if", "isinstance", "(", "X", ".", "flatten", "(", ")", "[", "0", "]", ",", "np", ".", "floating", ")", ":", "\n", "        ", "X", "=", "(", "255.99", "*", "X", ")", ".", "astype", "(", "'uint8'", ")", "\n", "", "n_samples", "=", "X", ".", "shape", "[", "0", "]", "\n", "rows", "=", "int", "(", "np", ".", "sqrt", "(", "n_samples", ")", ")", "\n", "while", "n_samples", "%", "rows", "!=", "0", ":", "\n", "        ", "rows", "-=", "1", "\n", "", "nh", ",", "nw", "=", "rows", ",", "n_samples", "/", "rows", "\n", "if", "X", ".", "ndim", "==", "2", ":", "\n", "        ", "X", "=", "np", ".", "reshape", "(", "X", ",", "(", "X", ".", "shape", "[", "0", "]", ",", "int", "(", "np", ".", "sqrt", "(", "X", ".", "shape", "[", "1", "]", ")", ")", ",", "int", "(", "np", ".", "sqrt", "(", "X", ".", "shape", "[", "1", "]", ")", ")", ")", ")", "\n", "", "if", "X", ".", "ndim", "==", "4", ":", "\n", "# BCHW -> BHWC", "\n", "        ", "X", "=", "X", ".", "transpose", "(", "0", ",", "2", ",", "3", ",", "1", ")", "\n", "h", ",", "w", "=", "X", "[", "0", "]", ".", "shape", "[", ":", "2", "]", "\n", "img", "=", "np", ".", "zeros", "(", "(", "h", "*", "nh", ",", "w", "*", "nw", ",", "X", ".", "shape", "[", "3", "]", ")", ")", "\n", "", "elif", "X", ".", "ndim", "==", "3", ":", "\n", "        ", "h", ",", "w", "=", "X", "[", "0", "]", ".", "shape", "[", ":", "2", "]", "\n", "img", "=", "np", ".", "zeros", "(", "(", "h", "*", "nh", ",", "w", "*", "nw", ")", ")", "\n", "", "for", "n", ",", "x", "in", "enumerate", "(", "X", ")", ":", "\n", "        ", "j", "=", "n", "/", "nw", "\n", "i", "=", "n", "%", "nw", "\n", "img", "[", "j", "*", "h", ":", "j", "*", "h", "+", "h", ",", "i", "*", "w", ":", "i", "*", "w", "+", "w", "]", "=", "x", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.tflib.save_images.save_pair_images_grid": [[85, 91], ["save_images.build_grid", "grid.transpose.transpose", "save_images.imsave_pair"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.tflib.save_images.build_grid", "home.repos.pwc.inspect_result.CIFASIS_wganvo.tflib.save_images.imsave_pair"], ["", "def", "save_pair_images_grid", "(", "X", ",", "save_path", ",", "iteration", ",", "prefix", "=", "'samples'", ")", ":", "\n", "    ", "grid", "=", "build_grid", "(", "X", ")", "\n", "assert", "grid", ".", "ndim", "==", "3", "and", "grid", ".", "shape", "[", "2", "]", "==", "2", "\n", "\n", "grid", "=", "grid", ".", "transpose", "(", "2", ",", "0", ",", "1", ")", "\n", "imsave_pair", "(", "grid", ",", "save_path", ",", "iteration", ",", "prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.tflib.save_images.save_pair_images": [[94, 101], ["save_images.imsave_pair"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.tflib.save_images.imsave_pair"], ["", "def", "save_pair_images", "(", "X", ",", "save_path", ",", "iteration", ",", "prefix", "=", "'samples'", ")", ":", "\n", "# BCHW", "\n", "    ", "assert", "X", ".", "ndim", "==", "4", "and", "X", ".", "shape", "[", "1", "]", "==", "2", "\n", "\n", "idx", "=", "0", "#randrange(X.shape[0])", "\n", "pair", "=", "X", "[", "idx", "]", "\n", "imsave_pair", "(", "pair", ",", "save_path", ",", "iteration", ",", "prefix", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.tflib.save_images.imsave_pair": [[103, 107], ["scipy.misc.imsave", "scipy.misc.imsave", "os.path.join", "os.path.join", "img_name.format", "img_name.format"], "function", ["None"], ["", "def", "imsave_pair", "(", "pair", ",", "save_path", ",", "iteration", ",", "prefix", ")", ":", "\n", "    ", "img_name", "=", "prefix", "+", "'_{}_{}.png'", "\n", "imsave", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "img_name", ".", "format", "(", "iteration", ",", "0", ")", ")", ",", "pair", "[", "0", ",", "...", "]", ")", "\n", "imsave", "(", "os", ".", "path", ".", "join", "(", "save_path", ",", "img_name", ".", "format", "(", "iteration", ",", "1", ")", ")", ",", "pair", "[", "1", ",", "...", "]", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.conv1d.enable_default_weightnorm": [[50, 53], ["None"], "function", ["None"], ["def", "enable_default_weightnorm", "(", ")", ":", "\n", "    ", "global", "_default_weightnorm", "\n", "_default_weightnorm", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.conv1d.Conv1D": [[54, 152], ["tensorflow.name_scope", "conv1d.Conv1D.uniform"], "function", ["None"], ["", "def", "Conv1D", "(", "name", ",", "input_dim", ",", "output_dim", ",", "filter_size", ",", "inputs", ",", "he_init", "=", "True", ",", "mask_type", "=", "None", ",", "stride", "=", "1", ",", "weightnorm", "=", "None", ",", "biases", "=", "True", ",", "gain", "=", "1.", ")", ":", "\n", "    ", "\"\"\"\n    inputs: tensor of shape (batch size, num channels, width)\n    mask_type: one of None, 'a', 'b'\n\n    returns: tensor of shape (batch size, num channels, width)\n    \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "name", ")", "as", "scope", ":", "\n", "\n", "        ", "if", "mask_type", "is", "not", "None", ":", "\n", "            ", "mask_type", ",", "mask_n_channels", "=", "mask_type", "\n", "\n", "mask", "=", "np", ".", "ones", "(", "\n", "(", "filter_size", ",", "input_dim", ",", "output_dim", ")", ",", "\n", "dtype", "=", "'float32'", "\n", ")", "\n", "center", "=", "filter_size", "//", "2", "\n", "\n", "# Mask out future locations", "\n", "# filter shape is (width, input channels, output channels)", "\n", "mask", "[", "center", "+", "1", ":", ",", ":", ",", ":", "]", "=", "0.", "\n", "\n", "# Mask out future channels", "\n", "for", "i", "in", "xrange", "(", "mask_n_channels", ")", ":", "\n", "                ", "for", "j", "in", "xrange", "(", "mask_n_channels", ")", ":", "\n", "                    ", "if", "(", "mask_type", "==", "'a'", "and", "i", ">=", "j", ")", "or", "(", "mask_type", "==", "'b'", "and", "i", ">", "j", ")", ":", "\n", "                        ", "mask", "[", "\n", "center", ",", "\n", "i", ":", ":", "mask_n_channels", ",", "\n", "j", ":", ":", "mask_n_channels", "\n", "]", "=", "0.", "\n", "\n", "\n", "", "", "", "", "def", "uniform", "(", "stdev", ",", "size", ")", ":", "\n", "            ", "return", "np", ".", "random", ".", "uniform", "(", "\n", "low", "=", "-", "stdev", "*", "np", ".", "sqrt", "(", "3", ")", ",", "\n", "high", "=", "stdev", "*", "np", ".", "sqrt", "(", "3", ")", ",", "\n", "size", "=", "size", "\n", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "", "fan_in", "=", "input_dim", "*", "filter_size", "\n", "fan_out", "=", "output_dim", "*", "filter_size", "/", "stride", "\n", "\n", "if", "mask_type", "is", "not", "None", ":", "# only approximately correct", "\n", "            ", "fan_in", "/=", "2.", "\n", "fan_out", "/=", "2.", "\n", "\n", "", "if", "he_init", ":", "\n", "            ", "filters_stdev", "=", "np", ".", "sqrt", "(", "4.", "/", "(", "fan_in", "+", "fan_out", ")", ")", "\n", "", "else", ":", "# Normalized init (Glorot & Bengio)", "\n", "            ", "filters_stdev", "=", "np", ".", "sqrt", "(", "2.", "/", "(", "fan_in", "+", "fan_out", ")", ")", "\n", "\n", "", "filter_values", "=", "uniform", "(", "\n", "filters_stdev", ",", "\n", "(", "filter_size", ",", "input_dim", ",", "output_dim", ")", "\n", ")", "\n", "# print \"WARNING IGNORING GAIN\"", "\n", "filter_values", "*=", "gain", "\n", "\n", "filters", "=", "lib", ".", "param", "(", "name", "+", "'.Filters'", ",", "filter_values", ")", "\n", "\n", "if", "weightnorm", "==", "None", ":", "\n", "            ", "weightnorm", "=", "_default_weightnorm", "\n", "", "if", "weightnorm", ":", "\n", "            ", "norm_values", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "square", "(", "filter_values", ")", ",", "axis", "=", "(", "0", ",", "1", ")", ")", ")", "\n", "target_norms", "=", "lib", ".", "param", "(", "\n", "name", "+", "'.g'", ",", "\n", "norm_values", "\n", ")", "\n", "with", "tf", ".", "name_scope", "(", "'weightnorm'", ")", "as", "scope", ":", "\n", "                ", "norms", "=", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "filters", ")", ",", "reduction_indices", "=", "[", "0", ",", "1", "]", ")", ")", "\n", "filters", "=", "filters", "*", "(", "target_norms", "/", "norms", ")", "\n", "\n", "", "", "if", "mask_type", "is", "not", "None", ":", "\n", "            ", "with", "tf", ".", "name_scope", "(", "'filter_mask'", ")", ":", "\n", "                ", "filters", "=", "filters", "*", "mask", "\n", "\n", "", "", "result", "=", "tf", ".", "nn", ".", "conv1d", "(", "\n", "value", "=", "inputs", ",", "\n", "filters", "=", "filters", ",", "\n", "stride", "=", "stride", ",", "\n", "padding", "=", "'SAME'", ",", "\n", "data_format", "=", "'NCHW'", "\n", ")", "\n", "\n", "if", "biases", ":", "\n", "            ", "_biases", "=", "lib", ".", "param", "(", "\n", "name", "+", "'.Biases'", ",", "\n", "np", ".", "zeros", "(", "[", "output_dim", "]", ",", "dtype", "=", "'float32'", ")", "\n", ")", "\n", "\n", "# result = result + _biases", "\n", "\n", "result", "=", "tf", ".", "expand_dims", "(", "result", ",", "3", ")", "\n", "result", "=", "tf", ".", "nn", ".", "bias_add", "(", "result", ",", "_biases", ",", "data_format", "=", "'NCHW'", ")", "\n", "result", "=", "tf", ".", "squeeze", "(", "result", ")", "\n", "\n", "", "return", "result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.layernorm.Layernorm": [[49, 65], ["tensorflow.nn.moments", "tflib.param", "tflib.param", "tensorflow.reshape", "tensorflow.reshape", "tensorflow.nn.batch_normalization", "inputs.get_shape().as_list", "numpy.zeros", "numpy.ones", "inputs.get_shape", "xrange", "xrange", "len", "len"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.get_shape"], ["def", "Layernorm", "(", "name", ",", "norm_axes", ",", "inputs", ")", ":", "\n", "    ", "mean", ",", "var", "=", "tf", ".", "nn", ".", "moments", "(", "inputs", ",", "norm_axes", ",", "keep_dims", "=", "True", ")", "\n", "\n", "# Assume the 'neurons' axis is the first of norm_axes. This is the case for fully-connected and BCHW conv layers.", "\n", "n_neurons", "=", "inputs", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "[", "norm_axes", "[", "0", "]", "]", "\n", "\n", "offset", "=", "lib", ".", "param", "(", "name", "+", "'.offset'", ",", "np", ".", "zeros", "(", "n_neurons", ",", "dtype", "=", "'float32'", ")", ")", "\n", "scale", "=", "lib", ".", "param", "(", "name", "+", "'.scale'", ",", "np", ".", "ones", "(", "n_neurons", ",", "dtype", "=", "'float32'", ")", ")", "\n", "\n", "# Add broadcasting dims to offset and scale (e.g. BCHW conv data)", "\n", "offset", "=", "tf", ".", "reshape", "(", "offset", ",", "[", "-", "1", "]", "+", "[", "1", "for", "i", "in", "xrange", "(", "len", "(", "norm_axes", ")", "-", "1", ")", "]", ")", "\n", "scale", "=", "tf", ".", "reshape", "(", "scale", ",", "[", "-", "1", "]", "+", "[", "1", "for", "i", "in", "xrange", "(", "len", "(", "norm_axes", ")", "-", "1", ")", "]", ")", "\n", "\n", "result", "=", "tf", ".", "nn", ".", "batch_normalization", "(", "inputs", ",", "mean", ",", "var", ",", "offset", ",", "scale", ",", "1e-5", ")", "\n", "\n", "return", "result", "", "", ""]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.conv2d.enable_default_weightnorm": [[50, 53], ["None"], "function", ["None"], ["def", "enable_default_weightnorm", "(", ")", ":", "\n", "    ", "global", "_default_weightnorm", "\n", "_default_weightnorm", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.conv2d.set_weights_stdev": [[55, 58], ["None"], "function", ["None"], ["def", "set_weights_stdev", "(", "weights_stdev", ")", ":", "\n", "    ", "global", "_weights_stdev", "\n", "_weights_stdev", "=", "weights_stdev", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.conv2d.unset_weights_stdev": [[59, 62], ["None"], "function", ["None"], ["", "def", "unset_weights_stdev", "(", ")", ":", "\n", "    ", "global", "_weights_stdev", "\n", "_weights_stdev", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.conv2d.Conv2D": [[63, 167], ["tensorflow.name_scope", "tflib.param", "tensorflow.nn.conv2d", "numpy.ones", "xrange", "numpy.random.uniform().astype", "numpy.sqrt", "numpy.sqrt", "conv2d.Conv2D.uniform"], "function", ["None"], ["", "def", "Conv2D", "(", "name", ",", "input_dim", ",", "output_dim", ",", "filter_size", ",", "inputs", ",", "he_init", "=", "True", ",", "mask_type", "=", "None", ",", "stride", "=", "1", ",", "weightnorm", "=", "None", ",", "biases", "=", "True", ",", "gain", "=", "1.", ")", ":", "\n", "    ", "\"\"\"\n    inputs: tensor of shape (batch size, num channels, height, width)\n    mask_type: one of None, 'a', 'b'\n\n    returns: tensor of shape (batch size, num channels, height, width)\n    \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "name", ")", "as", "scope", ":", "\n", "\n", "        ", "if", "mask_type", "is", "not", "None", ":", "\n", "            ", "mask_type", ",", "mask_n_channels", "=", "mask_type", "\n", "\n", "mask", "=", "np", ".", "ones", "(", "\n", "(", "filter_size", ",", "filter_size", ",", "input_dim", ",", "output_dim", ")", ",", "\n", "dtype", "=", "'float32'", "\n", ")", "\n", "center", "=", "filter_size", "//", "2", "\n", "\n", "# Mask out future locations", "\n", "# filter shape is (height, width, input channels, output channels)", "\n", "mask", "[", "center", "+", "1", ":", ",", ":", ",", ":", ",", ":", "]", "=", "0.", "\n", "mask", "[", "center", ",", "center", "+", "1", ":", ",", ":", ",", ":", "]", "=", "0.", "\n", "\n", "# Mask out future channels", "\n", "for", "i", "in", "xrange", "(", "mask_n_channels", ")", ":", "\n", "                ", "for", "j", "in", "xrange", "(", "mask_n_channels", ")", ":", "\n", "                    ", "if", "(", "mask_type", "==", "'a'", "and", "i", ">=", "j", ")", "or", "(", "mask_type", "==", "'b'", "and", "i", ">", "j", ")", ":", "\n", "                        ", "mask", "[", "\n", "center", ",", "\n", "center", ",", "\n", "i", ":", ":", "mask_n_channels", ",", "\n", "j", ":", ":", "mask_n_channels", "\n", "]", "=", "0.", "\n", "\n", "\n", "", "", "", "", "def", "uniform", "(", "stdev", ",", "size", ")", ":", "\n", "            ", "return", "np", ".", "random", ".", "uniform", "(", "\n", "low", "=", "-", "stdev", "*", "np", ".", "sqrt", "(", "3", ")", ",", "\n", "high", "=", "stdev", "*", "np", ".", "sqrt", "(", "3", ")", ",", "\n", "size", "=", "size", "\n", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "", "fan_in", "=", "input_dim", "*", "filter_size", "**", "2", "\n", "fan_out", "=", "output_dim", "*", "filter_size", "**", "2", "/", "(", "stride", "**", "2", ")", "\n", "\n", "if", "mask_type", "is", "not", "None", ":", "# only approximately correct", "\n", "            ", "fan_in", "/=", "2.", "\n", "fan_out", "/=", "2.", "\n", "\n", "", "if", "he_init", ":", "\n", "            ", "filters_stdev", "=", "np", ".", "sqrt", "(", "4.", "/", "(", "fan_in", "+", "fan_out", ")", ")", "\n", "", "else", ":", "# Normalized init (Glorot & Bengio)", "\n", "            ", "filters_stdev", "=", "np", ".", "sqrt", "(", "2.", "/", "(", "fan_in", "+", "fan_out", ")", ")", "\n", "\n", "", "if", "_weights_stdev", "is", "not", "None", ":", "\n", "            ", "filter_values", "=", "uniform", "(", "\n", "_weights_stdev", ",", "\n", "(", "filter_size", ",", "filter_size", ",", "input_dim", ",", "output_dim", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "filter_values", "=", "uniform", "(", "\n", "filters_stdev", ",", "\n", "(", "filter_size", ",", "filter_size", ",", "input_dim", ",", "output_dim", ")", "\n", ")", "\n", "\n", "# print \"WARNING IGNORING GAIN\"", "\n", "", "filter_values", "*=", "gain", "\n", "\n", "filters", "=", "lib", ".", "param", "(", "name", "+", "'.Filters'", ",", "filter_values", ")", "\n", "\n", "if", "weightnorm", "==", "None", ":", "\n", "            ", "weightnorm", "=", "_default_weightnorm", "\n", "", "if", "weightnorm", ":", "\n", "            ", "norm_values", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "square", "(", "filter_values", ")", ",", "axis", "=", "(", "0", ",", "1", ",", "2", ")", ")", ")", "\n", "target_norms", "=", "lib", ".", "param", "(", "\n", "name", "+", "'.g'", ",", "\n", "norm_values", "\n", ")", "\n", "with", "tf", ".", "name_scope", "(", "'weightnorm'", ")", "as", "scope", ":", "\n", "                ", "norms", "=", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "filters", ")", ",", "reduction_indices", "=", "[", "0", ",", "1", ",", "2", "]", ")", ")", "\n", "filters", "=", "filters", "*", "(", "target_norms", "/", "norms", ")", "\n", "\n", "", "", "if", "mask_type", "is", "not", "None", ":", "\n", "            ", "with", "tf", ".", "name_scope", "(", "'filter_mask'", ")", ":", "\n", "                ", "filters", "=", "filters", "*", "mask", "\n", "\n", "", "", "result", "=", "tf", ".", "nn", ".", "conv2d", "(", "\n", "input", "=", "inputs", ",", "\n", "filter", "=", "filters", ",", "\n", "strides", "=", "[", "1", ",", "1", ",", "stride", ",", "stride", "]", ",", "\n", "padding", "=", "'SAME'", ",", "\n", "data_format", "=", "'NCHW'", "\n", ")", "\n", "\n", "if", "biases", ":", "\n", "            ", "_biases", "=", "lib", ".", "param", "(", "\n", "name", "+", "'.Biases'", ",", "\n", "np", ".", "zeros", "(", "output_dim", ",", "dtype", "=", "'float32'", ")", "\n", ")", "\n", "\n", "result", "=", "tf", ".", "nn", ".", "bias_add", "(", "result", ",", "_biases", ",", "data_format", "=", "'NCHW'", ")", "\n", "\n", "\n", "", "return", "result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.cond_batchnorm.Batchnorm": [[49, 61], ["tensorflow.nn.moments", "mean.get_shape().as_list", "tflib.param", "tflib.param", "tensorflow.nn.embedding_lookup", "tensorflow.nn.embedding_lookup", "tensorflow.nn.batch_normalization", "Exception", "numpy.zeros", "numpy.ones", "mean.get_shape"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.get_shape"], ["def", "Batchnorm", "(", "name", ",", "axes", ",", "inputs", ",", "is_training", "=", "None", ",", "stats_iter", "=", "None", ",", "update_moving_stats", "=", "True", ",", "fused", "=", "True", ",", "labels", "=", "None", ",", "n_labels", "=", "None", ")", ":", "\n", "    ", "\"\"\"conditional batchnorm (dumoulin et al 2016) for BCHW conv filtermaps\"\"\"", "\n", "if", "axes", "!=", "[", "0", ",", "2", ",", "3", "]", ":", "\n", "        ", "raise", "Exception", "(", "'unsupported'", ")", "\n", "", "mean", ",", "var", "=", "tf", ".", "nn", ".", "moments", "(", "inputs", ",", "axes", ",", "keep_dims", "=", "True", ")", "\n", "shape", "=", "mean", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", "# shape is [1,n,1,1]", "\n", "offset_m", "=", "lib", ".", "param", "(", "name", "+", "'.offset'", ",", "np", ".", "zeros", "(", "[", "n_labels", ",", "shape", "[", "1", "]", "]", ",", "dtype", "=", "'float32'", ")", ")", "\n", "scale_m", "=", "lib", ".", "param", "(", "name", "+", "'.scale'", ",", "np", ".", "ones", "(", "[", "n_labels", ",", "shape", "[", "1", "]", "]", ",", "dtype", "=", "'float32'", ")", ")", "\n", "offset", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "offset_m", ",", "labels", ")", "\n", "scale", "=", "tf", ".", "nn", ".", "embedding_lookup", "(", "scale_m", ",", "labels", ")", "\n", "result", "=", "tf", ".", "nn", ".", "batch_normalization", "(", "inputs", ",", "mean", ",", "var", ",", "offset", "[", ":", ",", ":", ",", "None", ",", "None", "]", ",", "scale", "[", ":", ",", ":", ",", "None", ",", "None", "]", ",", "1e-5", ")", "\n", "return", "result", "", "", ""]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.deconv2d.enable_default_weightnorm": [[50, 53], ["None"], "function", ["None"], ["def", "enable_default_weightnorm", "(", ")", ":", "\n", "    ", "global", "_default_weightnorm", "\n", "_default_weightnorm", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.deconv2d.set_weights_stdev": [[55, 58], ["None"], "function", ["None"], ["def", "set_weights_stdev", "(", "weights_stdev", ")", ":", "\n", "    ", "global", "_weights_stdev", "\n", "_weights_stdev", "=", "weights_stdev", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.deconv2d.unset_weights_stdev": [[59, 62], ["None"], "function", ["None"], ["", "def", "unset_weights_stdev", "(", ")", ":", "\n", "    ", "global", "_weights_stdev", "\n", "_weights_stdev", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.deconv2d.Deconv2D": [[63, 159], ["tensorflow.name_scope", "tflib.param", "tensorflow.transpose", "tensorflow.shape", "tensorflow.nn.conv2d_transpose", "tensorflow.transpose", "Exception", "numpy.random.uniform().astype", "numpy.sqrt", "numpy.sqrt", "deconv2d.Deconv2D.uniform"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.shape"], ["", "def", "Deconv2D", "(", "\n", "name", ",", "\n", "input_dim", ",", "\n", "output_dim", ",", "\n", "filter_size", ",", "\n", "inputs", ",", "\n", "he_init", "=", "True", ",", "\n", "weightnorm", "=", "None", ",", "\n", "biases", "=", "True", ",", "\n", "gain", "=", "1.", ",", "\n", "mask_type", "=", "None", ",", "\n", ")", ":", "\n", "    ", "\"\"\"\n    inputs: tensor of shape (batch size, height, width, input_dim)\n    returns: tensor of shape (batch size, 2*height, 2*width, output_dim)\n    \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "name", ")", "as", "scope", ":", "\n", "\n", "        ", "if", "mask_type", "!=", "None", ":", "\n", "            ", "raise", "Exception", "(", "'Unsupported configuration'", ")", "\n", "\n", "", "def", "uniform", "(", "stdev", ",", "size", ")", ":", "\n", "            ", "return", "np", ".", "random", ".", "uniform", "(", "\n", "low", "=", "-", "stdev", "*", "np", ".", "sqrt", "(", "3", ")", ",", "\n", "high", "=", "stdev", "*", "np", ".", "sqrt", "(", "3", ")", ",", "\n", "size", "=", "size", "\n", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "", "stride", "=", "2", "\n", "fan_in", "=", "input_dim", "*", "filter_size", "**", "2", "/", "(", "stride", "**", "2", ")", "\n", "fan_out", "=", "output_dim", "*", "filter_size", "**", "2", "\n", "\n", "if", "he_init", ":", "\n", "            ", "filters_stdev", "=", "np", ".", "sqrt", "(", "4.", "/", "(", "fan_in", "+", "fan_out", ")", ")", "\n", "", "else", ":", "# Normalized init (Glorot & Bengio)", "\n", "            ", "filters_stdev", "=", "np", ".", "sqrt", "(", "2.", "/", "(", "fan_in", "+", "fan_out", ")", ")", "\n", "\n", "\n", "", "if", "_weights_stdev", "is", "not", "None", ":", "\n", "            ", "filter_values", "=", "uniform", "(", "\n", "_weights_stdev", ",", "\n", "(", "filter_size", ",", "filter_size", ",", "output_dim", ",", "input_dim", ")", "\n", ")", "\n", "", "else", ":", "\n", "            ", "filter_values", "=", "uniform", "(", "\n", "filters_stdev", ",", "\n", "(", "filter_size", ",", "filter_size", ",", "output_dim", ",", "input_dim", ")", "\n", ")", "\n", "\n", "", "filter_values", "*=", "gain", "\n", "\n", "filters", "=", "lib", ".", "param", "(", "\n", "name", "+", "'.Filters'", ",", "\n", "filter_values", "\n", ")", "\n", "\n", "if", "weightnorm", "==", "None", ":", "\n", "            ", "weightnorm", "=", "_default_weightnorm", "\n", "", "if", "weightnorm", ":", "\n", "            ", "norm_values", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "square", "(", "filter_values", ")", ",", "axis", "=", "(", "0", ",", "1", ",", "3", ")", ")", ")", "\n", "target_norms", "=", "lib", ".", "param", "(", "\n", "name", "+", "'.g'", ",", "\n", "norm_values", "\n", ")", "\n", "with", "tf", ".", "name_scope", "(", "'weightnorm'", ")", "as", "scope", ":", "\n", "                ", "norms", "=", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "filters", ")", ",", "reduction_indices", "=", "[", "0", ",", "1", ",", "3", "]", ")", ")", "\n", "filters", "=", "filters", "*", "tf", ".", "expand_dims", "(", "target_norms", "/", "norms", ",", "1", ")", "\n", "\n", "\n", "", "", "inputs", "=", "tf", ".", "transpose", "(", "inputs", ",", "[", "0", ",", "2", ",", "3", ",", "1", "]", ",", "name", "=", "'NCHW_to_NHWC'", ")", "\n", "\n", "input_shape", "=", "tf", ".", "shape", "(", "inputs", ")", "\n", "try", ":", "# tf pre-1.0 (top) vs 1.0 (bottom)", "\n", "            ", "output_shape", "=", "tf", ".", "pack", "(", "[", "input_shape", "[", "0", "]", ",", "2", "*", "input_shape", "[", "1", "]", ",", "2", "*", "input_shape", "[", "2", "]", ",", "output_dim", "]", ")", "\n", "", "except", "Exception", "as", "e", ":", "\n", "            ", "output_shape", "=", "tf", ".", "stack", "(", "[", "input_shape", "[", "0", "]", ",", "2", "*", "input_shape", "[", "1", "]", ",", "2", "*", "input_shape", "[", "2", "]", ",", "output_dim", "]", ")", "\n", "\n", "", "result", "=", "tf", ".", "nn", ".", "conv2d_transpose", "(", "\n", "value", "=", "inputs", ",", "\n", "filter", "=", "filters", ",", "\n", "output_shape", "=", "output_shape", ",", "\n", "strides", "=", "[", "1", ",", "2", ",", "2", ",", "1", "]", ",", "\n", "padding", "=", "'SAME'", "\n", ")", "\n", "\n", "if", "biases", ":", "\n", "            ", "_biases", "=", "lib", ".", "param", "(", "\n", "name", "+", "'.Biases'", ",", "\n", "np", ".", "zeros", "(", "output_dim", ",", "dtype", "=", "'float32'", ")", "\n", ")", "\n", "result", "=", "tf", ".", "nn", ".", "bias_add", "(", "result", ",", "_biases", ")", "\n", "\n", "", "result", "=", "tf", ".", "transpose", "(", "result", ",", "[", "0", ",", "3", ",", "1", ",", "2", "]", ",", "name", "=", "'NHWC_to_NCHW'", ")", "\n", "\n", "\n", "return", "result", "\n", "", "", ""]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.linear.enable_default_weightnorm": [[50, 53], ["None"], "function", ["None"], ["def", "enable_default_weightnorm", "(", ")", ":", "\n", "    ", "global", "_default_weightnorm", "\n", "_default_weightnorm", "=", "True", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.linear.disable_default_weightnorm": [[54, 57], ["None"], "function", ["None"], ["", "def", "disable_default_weightnorm", "(", ")", ":", "\n", "    ", "global", "_default_weightnorm", "\n", "_default_weightnorm", "=", "False", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.linear.set_weights_stdev": [[59, 62], ["None"], "function", ["None"], ["def", "set_weights_stdev", "(", "weights_stdev", ")", ":", "\n", "    ", "global", "_weights_stdev", "\n", "_weights_stdev", "=", "weights_stdev", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.linear.unset_weights_stdev": [[63, 66], ["None"], "function", ["None"], ["", "def", "unset_weights_stdev", "(", ")", ":", "\n", "    ", "global", "_weights_stdev", "\n", "_weights_stdev", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.ops.linear.Linear": [[67, 192], ["tensorflow.name_scope", "tflib.param", "numpy.random.uniform().astype", "linear.Linear.uniform"], "function", ["None"], ["", "def", "Linear", "(", "\n", "name", ",", "\n", "input_dim", ",", "\n", "output_dim", ",", "\n", "inputs", ",", "\n", "biases", "=", "True", ",", "\n", "initialization", "=", "None", ",", "\n", "weightnorm", "=", "None", ",", "\n", "gain", "=", "1.", "\n", ")", ":", "\n", "    ", "\"\"\"\n    initialization: None, `lecun`, 'glorot', `he`, 'glorot_he', `orthogonal`, `(\"uniform\", range)`\n    \"\"\"", "\n", "with", "tf", ".", "name_scope", "(", "name", ")", "as", "scope", ":", "\n", "\n", "        ", "def", "uniform", "(", "stdev", ",", "size", ")", ":", "\n", "            ", "if", "_weights_stdev", "is", "not", "None", ":", "\n", "                ", "stdev", "=", "_weights_stdev", "\n", "", "return", "np", ".", "random", ".", "uniform", "(", "\n", "low", "=", "-", "stdev", "*", "np", ".", "sqrt", "(", "3", ")", ",", "\n", "high", "=", "stdev", "*", "np", ".", "sqrt", "(", "3", ")", ",", "\n", "size", "=", "size", "\n", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "", "if", "initialization", "==", "'lecun'", ":", "# and input_dim != output_dim):", "\n", "# disabling orth. init for now because it's too slow", "\n", "            ", "weight_values", "=", "uniform", "(", "\n", "np", ".", "sqrt", "(", "1.", "/", "input_dim", ")", ",", "\n", "(", "input_dim", ",", "output_dim", ")", "\n", ")", "\n", "\n", "", "elif", "initialization", "==", "'glorot'", "or", "(", "initialization", "==", "None", ")", ":", "\n", "\n", "            ", "weight_values", "=", "uniform", "(", "\n", "np", ".", "sqrt", "(", "2.", "/", "(", "input_dim", "+", "output_dim", ")", ")", ",", "\n", "(", "input_dim", ",", "output_dim", ")", "\n", ")", "\n", "\n", "", "elif", "initialization", "==", "'he'", ":", "\n", "\n", "            ", "weight_values", "=", "uniform", "(", "\n", "np", ".", "sqrt", "(", "2.", "/", "input_dim", ")", ",", "\n", "(", "input_dim", ",", "output_dim", ")", "\n", ")", "\n", "\n", "", "elif", "initialization", "==", "'glorot_he'", ":", "\n", "\n", "            ", "weight_values", "=", "uniform", "(", "\n", "np", ".", "sqrt", "(", "4.", "/", "(", "input_dim", "+", "output_dim", ")", ")", ",", "\n", "(", "input_dim", ",", "output_dim", ")", "\n", ")", "\n", "\n", "", "elif", "initialization", "==", "'orthogonal'", "or", "(", "initialization", "==", "None", "and", "input_dim", "==", "output_dim", ")", ":", "\n", "\n", "# From lasagne", "\n", "            ", "def", "sample", "(", "shape", ")", ":", "\n", "                ", "if", "len", "(", "shape", ")", "<", "2", ":", "\n", "                    ", "raise", "RuntimeError", "(", "\"Only shapes of length 2 or more are \"", "\n", "\"supported.\"", ")", "\n", "", "flat_shape", "=", "(", "shape", "[", "0", "]", ",", "np", ".", "prod", "(", "shape", "[", "1", ":", "]", ")", ")", "\n", "# TODO: why normal and not uniform?", "\n", "a", "=", "np", ".", "random", ".", "normal", "(", "0.0", ",", "1.0", ",", "flat_shape", ")", "\n", "u", ",", "_", ",", "v", "=", "np", ".", "linalg", ".", "svd", "(", "a", ",", "full_matrices", "=", "False", ")", "\n", "# pick the one with the correct shape", "\n", "q", "=", "u", "if", "u", ".", "shape", "==", "flat_shape", "else", "v", "\n", "q", "=", "q", ".", "reshape", "(", "shape", ")", "\n", "return", "q", ".", "astype", "(", "'float32'", ")", "\n", "", "weight_values", "=", "sample", "(", "(", "input_dim", ",", "output_dim", ")", ")", "\n", "\n", "", "elif", "initialization", "[", "0", "]", "==", "'uniform'", ":", "\n", "\n", "            ", "weight_values", "=", "np", ".", "random", ".", "uniform", "(", "\n", "low", "=", "-", "initialization", "[", "1", "]", ",", "\n", "high", "=", "initialization", "[", "1", "]", ",", "\n", "size", "=", "(", "input_dim", ",", "output_dim", ")", "\n", ")", ".", "astype", "(", "'float32'", ")", "\n", "\n", "", "else", ":", "\n", "\n", "            ", "raise", "Exception", "(", "'Invalid initialization!'", ")", "\n", "\n", "", "weight_values", "*=", "gain", "\n", "\n", "weight", "=", "lib", ".", "param", "(", "\n", "name", "+", "'.W'", ",", "\n", "weight_values", "\n", ")", "\n", "\n", "if", "weightnorm", "==", "None", ":", "\n", "            ", "weightnorm", "=", "_default_weightnorm", "\n", "", "if", "weightnorm", ":", "\n", "            ", "norm_values", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "np", ".", "square", "(", "weight_values", ")", ",", "axis", "=", "0", ")", ")", "\n", "# norm_values = np.linalg.norm(weight_values, axis=0)", "\n", "\n", "target_norms", "=", "lib", ".", "param", "(", "\n", "name", "+", "'.g'", ",", "\n", "norm_values", "\n", ")", "\n", "\n", "with", "tf", ".", "name_scope", "(", "'weightnorm'", ")", "as", "scope", ":", "\n", "                ", "norms", "=", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "square", "(", "weight", ")", ",", "reduction_indices", "=", "[", "0", "]", ")", ")", "\n", "weight", "=", "weight", "*", "(", "target_norms", "/", "norms", ")", "\n", "\n", "# if 'Discriminator' in name:", "\n", "#     print \"WARNING weight constraint on {}\".format(name)", "\n", "#     weight = tf.nn.softsign(10.*weight)*.1", "\n", "\n", "", "", "if", "inputs", ".", "get_shape", "(", ")", ".", "ndims", "==", "2", ":", "\n", "            ", "result", "=", "tf", ".", "matmul", "(", "inputs", ",", "weight", ")", "\n", "", "else", ":", "\n", "            ", "reshaped_inputs", "=", "tf", ".", "reshape", "(", "inputs", ",", "[", "-", "1", ",", "input_dim", "]", ")", "\n", "result", "=", "tf", ".", "matmul", "(", "reshaped_inputs", ",", "weight", ")", "\n", "result", "=", "tf", ".", "reshape", "(", "result", ",", "tf", ".", "stack", "(", "tf", ".", "unstack", "(", "tf", ".", "shape", "(", "inputs", ")", ")", "[", ":", "-", "1", "]", "+", "[", "output_dim", "]", ")", ")", "\n", "\n", "", "if", "biases", ":", "\n", "            ", "result", "=", "tf", ".", "nn", ".", "bias_add", "(", "\n", "result", ",", "\n", "lib", ".", "param", "(", "\n", "name", "+", "'.b'", ",", "\n", "np", ".", "zeros", "(", "(", "output_dim", ",", ")", ",", "dtype", "=", "'float32'", ")", "\n", ")", "\n", ")", "\n", "\n", "", "return", "result", "", "", "", ""]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.__init__": [[35, 47], ["numpy.load().item", "numpy.load"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.tflib.cifar10.load"], ["def", "__init__", "(", "self", ",", "width", ",", "height", ",", "vgg19_npy_path", "=", "None", ",", "trainable", "=", "True", ",", "dropout", "=", "0.5", ",", "activation_function", "=", "\"relu\"", ")", ":", "\n", "        ", "if", "vgg19_npy_path", "is", "not", "None", ":", "\n", "            ", "self", ".", "data_dict", "=", "np", ".", "load", "(", "vgg19_npy_path", ",", "encoding", "=", "'latin1'", ")", ".", "item", "(", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "data_dict", "=", "None", "\n", "\n", "", "self", ".", "var_dict", "=", "{", "}", "\n", "self", ".", "trainable", "=", "trainable", "\n", "self", ".", "dropout", "=", "dropout", "\n", "self", ".", "activation_function", "=", "activation_function", "\n", "self", ".", "width", "=", "width", "\n", "self", ".", "height", "=", "height", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.build": [[48, 107], ["vgg.Vgg19.conv_layer", "vgg.Vgg19.conv_layer", "vgg.Vgg19.pooling", "vgg.Vgg19.conv_layer", "vgg.Vgg19.conv_layer", "vgg.Vgg19.pooling", "vgg.Vgg19.conv_layer", "vgg.Vgg19.conv_layer", "vgg.Vgg19.conv_layer", "vgg.Vgg19.conv_layer", "vgg.Vgg19.pooling", "vgg.Vgg19.conv_layer", "vgg.Vgg19.conv_layer", "vgg.Vgg19.conv_layer", "vgg.Vgg19.conv_layer", "vgg.Vgg19.pooling", "vgg.Vgg19.conv_layer", "vgg.Vgg19.conv_layer", "vgg.Vgg19.conv_layer", "vgg.Vgg19.conv_layer", "vgg.Vgg19.pooling", "vgg.Vgg19.fc_layer", "vgg.Vgg19.activation_function_tensor", "vgg.Vgg19.fc_layer", "vgg.Vgg19.activation_function_tensor", "vgg.Vgg19.fc_layer", "tensorflow.norm", "tensorflow.concat", "print", "tensorflow.cond", "tensorflow.cond", "tensorflow.reshape", "print", "tensorflow.nn.dropout", "tensorflow.nn.dropout", "tensorflow.nn.dropout", "tensorflow.nn.dropout"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.conv_layer", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.conv_layer", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.pooling", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.conv_layer", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.conv_layer", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.pooling", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.conv_layer", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.conv_layer", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.conv_layer", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.conv_layer", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.pooling", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.conv_layer", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.conv_layer", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.conv_layer", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.conv_layer", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.pooling", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.conv_layer", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.conv_layer", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.conv_layer", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.conv_layer", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.pooling", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.fc_layer", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.activation_function_tensor", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.fc_layer", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.activation_function_tensor", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.fc_layer", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.norm"], ["", "def", "build", "(", "self", ",", "images", ",", "train_mode", "=", "None", ",", "pooling_type", "=", "\"max\"", ")", ":", "\n", "        ", "\"\"\"\n        load variable from npy to build the VGG\n        :param images: [batch, height, width, 1] (usually a placeholder)\n        :param train_mode: a bool tensor, usually a placeholder: if True, dropout will be turned on\n        \"\"\"", "\n", "\n", "self", ".", "conv1_1", "=", "self", ".", "conv_layer", "(", "images", ",", "2", ",", "64", ",", "\"conv1_1\"", ")", "\n", "self", ".", "conv1_2", "=", "self", ".", "conv_layer", "(", "self", ".", "conv1_1", ",", "64", ",", "64", ",", "\"conv1_2\"", ")", "\n", "self", ".", "pool1", "=", "self", ".", "pooling", "(", "self", ".", "conv1_2", ",", "'pool1'", ",", "pooling_type", "=", "pooling_type", ")", "\n", "\n", "self", ".", "conv2_1", "=", "self", ".", "conv_layer", "(", "self", ".", "pool1", ",", "64", ",", "128", ",", "\"conv2_1\"", ")", "\n", "self", ".", "conv2_2", "=", "self", ".", "conv_layer", "(", "self", ".", "conv2_1", ",", "128", ",", "128", ",", "\"conv2_2\"", ")", "\n", "self", ".", "pool2", "=", "self", ".", "pooling", "(", "self", ".", "conv2_2", ",", "'pool2'", ",", "pooling_type", "=", "pooling_type", ")", "\n", "\n", "self", ".", "conv3_1", "=", "self", ".", "conv_layer", "(", "self", ".", "pool2", ",", "128", ",", "256", ",", "\"conv3_1\"", ")", "\n", "self", ".", "conv3_2", "=", "self", ".", "conv_layer", "(", "self", ".", "conv3_1", ",", "256", ",", "256", ",", "\"conv3_2\"", ")", "\n", "self", ".", "conv3_3", "=", "self", ".", "conv_layer", "(", "self", ".", "conv3_2", ",", "256", ",", "256", ",", "\"conv3_3\"", ")", "\n", "self", ".", "conv3_4", "=", "self", ".", "conv_layer", "(", "self", ".", "conv3_3", ",", "256", ",", "256", ",", "\"conv3_4\"", ")", "\n", "self", ".", "pool3", "=", "self", ".", "pooling", "(", "self", ".", "conv3_4", ",", "'pool3'", ",", "pooling_type", "=", "pooling_type", ")", "\n", "\n", "self", ".", "conv4_1", "=", "self", ".", "conv_layer", "(", "self", ".", "pool3", ",", "256", ",", "512", ",", "\"conv4_1\"", ")", "\n", "self", ".", "conv4_2", "=", "self", ".", "conv_layer", "(", "self", ".", "conv4_1", ",", "512", ",", "512", ",", "\"conv4_2\"", ")", "\n", "self", ".", "conv4_3", "=", "self", ".", "conv_layer", "(", "self", ".", "conv4_2", ",", "512", ",", "512", ",", "\"conv4_3\"", ")", "\n", "self", ".", "conv4_4", "=", "self", ".", "conv_layer", "(", "self", ".", "conv4_3", ",", "512", ",", "512", ",", "\"conv4_4\"", ")", "\n", "self", ".", "pool4", "=", "self", ".", "pooling", "(", "self", ".", "conv4_4", ",", "'pool4'", ",", "pooling_type", "=", "pooling_type", ")", "\n", "\n", "self", ".", "conv5_1", "=", "self", ".", "conv_layer", "(", "self", ".", "pool4", ",", "512", ",", "512", ",", "\"conv5_1\"", ")", "\n", "self", ".", "conv5_2", "=", "self", ".", "conv_layer", "(", "self", ".", "conv5_1", ",", "512", ",", "512", ",", "\"conv5_2\"", ")", "\n", "self", ".", "conv5_3", "=", "self", ".", "conv_layer", "(", "self", ".", "conv5_2", ",", "512", ",", "512", ",", "\"conv5_3\"", ")", "\n", "self", ".", "conv5_4", "=", "self", ".", "conv_layer", "(", "self", ".", "conv5_3", ",", "512", ",", "512", ",", "\"conv5_4\"", ")", "\n", "self", ".", "pool5", "=", "self", ".", "pooling", "(", "self", ".", "conv5_4", ",", "'pool5'", ",", "pooling_type", "=", "pooling_type", ")", "\n", "\n", "fc_in_size", "=", "(", "(", "self", ".", "width", "//", "(", "2", "**", "5", ")", ")", "*", "(", "self", ".", "height", "//", "(", "2", "**", "5", ")", ")", ")", "*", "512", "# (las conv_layer mantienen el ancho y alto, y los max_pool lo reducen a la mitad. Hay 5 max pool)", "\n", "self", ".", "fc6", "=", "self", ".", "fc_layer", "(", "self", ".", "pool5", ",", "fc_in_size", ",", "4096", ",", "\"fc6\"", ")", "\n", "self", ".", "relu6", "=", "self", ".", "activation_function_tensor", "(", "self", ".", "fc6", ",", "act_function", "=", "self", ".", "activation_function", ")", "#tf.nn.relu(self.fc6)", "\n", "if", "train_mode", "is", "not", "None", ":", "\n", "            ", "print", "(", "\"Train Mode placeholder\"", ")", "\n", "self", ".", "relu6", "=", "tf", ".", "cond", "(", "train_mode", ",", "lambda", ":", "tf", ".", "nn", ".", "dropout", "(", "self", ".", "relu6", ",", "self", ".", "dropout", ")", ",", "lambda", ":", "self", ".", "relu6", ")", "\n", "", "elif", "self", ".", "trainable", ":", "\n", "            ", "print", "(", "\"Not Train Mode placeholder\"", ")", "\n", "self", ".", "relu6", "=", "tf", ".", "nn", ".", "dropout", "(", "self", ".", "relu6", ",", "self", ".", "dropout", ")", "\n", "\n", "", "self", ".", "fc7", "=", "self", ".", "fc_layer", "(", "self", ".", "relu6", ",", "4096", ",", "4096", ",", "\"fc7\"", ")", "\n", "self", ".", "relu7", "=", "self", ".", "activation_function_tensor", "(", "self", ".", "fc7", ",", "act_function", "=", "self", ".", "activation_function", ")", "#tf.nn.relu(self.fc7)", "\n", "if", "train_mode", "is", "not", "None", ":", "\n", "            ", "self", ".", "relu7", "=", "tf", ".", "cond", "(", "train_mode", ",", "lambda", ":", "tf", ".", "nn", ".", "dropout", "(", "self", ".", "relu7", ",", "self", ".", "dropout", ")", ",", "lambda", ":", "self", ".", "relu7", ")", "\n", "", "elif", "self", ".", "trainable", ":", "\n", "            ", "self", ".", "relu7", "=", "tf", ".", "nn", ".", "dropout", "(", "self", ".", "relu7", ",", "self", ".", "dropout", ")", "\n", "\n", "", "self", ".", "fc8", "=", "self", ".", "fc_layer", "(", "self", ".", "relu7", ",", "4096", ",", "7", ",", "\"fc8\"", ")", "\n", "quaternions", "=", "self", ".", "fc8", "[", ":", ",", "3", ":", "7", "]", "\n", "quaternions_norm", "=", "tf", ".", "norm", "(", "quaternions", ",", "axis", "=", "1", ")", "\n", "unit_quaternions", "=", "quaternions", "/", "tf", ".", "reshape", "(", "quaternions_norm", ",", "(", "-", "1", ",", "1", ")", ")", "\n", "self", ".", "fc8", "=", "tf", ".", "concat", "(", "[", "self", ".", "fc8", "[", ":", ",", ":", "3", "]", ",", "unit_quaternions", "]", ",", "1", ")", "\n", "#self.prob = tf.nn.softmax(self.fc8, name=\"prob\")", "\n", "\n", "self", ".", "data_dict", "=", "None", "\n", "return", "self", ".", "fc8", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.build_pruned_vgg": [[108, 145], ["vgg.Vgg19.conv_layer", "vgg.Vgg19.conv_layer", "vgg.Vgg19.pooling", "vgg.Vgg19.conv_layer", "vgg.Vgg19.conv_layer", "vgg.Vgg19.pooling", "vgg.Vgg19.conv_layer", "vgg.Vgg19.conv_layer", "vgg.Vgg19.pooling", "vgg.Vgg19.conv_layer", "vgg.Vgg19.conv_layer", "vgg.Vgg19.pooling", "vgg.Vgg19.conv_layer", "vgg.Vgg19.conv_layer", "vgg.Vgg19.pooling", "tensorflow.reshape", "vgg.Vgg19.fc_layer", "tensorflow.cond", "tensorflow.nn.dropout", "tensorflow.nn.dropout"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.conv_layer", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.conv_layer", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.pooling", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.conv_layer", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.conv_layer", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.pooling", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.conv_layer", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.conv_layer", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.pooling", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.conv_layer", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.conv_layer", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.pooling", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.conv_layer", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.conv_layer", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.pooling", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.fc_layer"], ["", "def", "build_pruned_vgg", "(", "self", ",", "images", ",", "train_mode", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        load variable from npy to build the VGG\n        :param images: [batch, height, width, 1] (usually a placeholder)\n        :param train_mode: a bool tensor, usually a placeholder: if True, dropout will be turned on\n        \"\"\"", "\n", "\n", "self", ".", "conv1_1", "=", "self", ".", "conv_layer", "(", "images", ",", "2", ",", "64", ",", "\"conv1_1\"", ")", "\n", "self", ".", "conv1_2", "=", "self", ".", "conv_layer", "(", "self", ".", "conv1_1", ",", "64", ",", "64", ",", "\"conv1_2\"", ")", "\n", "self", ".", "pool1", "=", "self", ".", "pooling", "(", "self", ".", "conv1_2", ",", "'pool1'", ")", "\n", "\n", "self", ".", "conv2_1", "=", "self", ".", "conv_layer", "(", "self", ".", "pool1", ",", "64", ",", "128", ",", "\"conv2_1\"", ")", "\n", "self", ".", "conv2_2", "=", "self", ".", "conv_layer", "(", "self", ".", "conv2_1", ",", "128", ",", "128", ",", "\"conv2_2\"", ")", "\n", "self", ".", "pool2", "=", "self", ".", "pooling", "(", "self", ".", "conv2_2", ",", "'pool2'", ")", "\n", "\n", "self", ".", "conv3_1", "=", "self", ".", "conv_layer", "(", "self", ".", "pool2", ",", "128", ",", "256", ",", "\"conv3_1\"", ")", "\n", "self", ".", "conv3_2", "=", "self", ".", "conv_layer", "(", "self", ".", "conv3_1", ",", "256", ",", "256", ",", "\"conv3_2\"", ")", "\n", "self", ".", "pool3", "=", "self", ".", "pooling", "(", "self", ".", "conv3_2", ",", "'pool3'", ")", "\n", "\n", "self", ".", "conv4_1", "=", "self", ".", "conv_layer", "(", "self", ".", "pool3", ",", "256", ",", "512", ",", "\"conv4_1\"", ")", "\n", "self", ".", "conv4_2", "=", "self", ".", "conv_layer", "(", "self", ".", "conv4_1", ",", "512", ",", "512", ",", "\"conv4_2\"", ")", "\n", "self", ".", "pool4", "=", "self", ".", "pooling", "(", "self", ".", "conv4_2", ",", "'pool4'", ")", "\n", "\n", "self", ".", "conv5_1", "=", "self", ".", "conv_layer", "(", "self", ".", "pool4", ",", "512", ",", "512", ",", "\"conv5_1\"", ")", "\n", "self", ".", "conv5_2", "=", "self", ".", "conv_layer", "(", "self", ".", "conv5_1", ",", "512", ",", "512", ",", "\"conv5_2\"", ")", "\n", "self", ".", "pool5", "=", "self", ".", "pooling", "(", "self", ".", "conv5_2", ",", "'pool5'", ")", "\n", "\n", "fc_in_size", "=", "(", "(", "self", ".", "width", "//", "(", "2", "**", "5", ")", ")", "*", "(", "self", ".", "height", "//", "(", "2", "**", "5", ")", ")", ")", "*", "512", "# (las conv_layer mantienen el ancho y alto, y los max_pool lo reducen a la mitad. Hay 5 max pool)", "\n", "self", ".", "fc_in", "=", "tf", ".", "reshape", "(", "self", ".", "pool5", ",", "[", "-", "1", ",", "fc_in_size", "]", ")", "\n", "if", "train_mode", "is", "not", "None", ":", "\n", "            ", "self", ".", "fc_in", "=", "tf", ".", "cond", "(", "train_mode", ",", "lambda", ":", "tf", ".", "nn", ".", "dropout", "(", "self", ".", "fc_in", ",", "self", ".", "dropout", ")", ",", "lambda", ":", "self", ".", "fc_in", ")", "\n", "", "elif", "self", ".", "trainable", ":", "\n", "            ", "self", ".", "fc_in", "=", "tf", ".", "nn", ".", "dropout", "(", "self", ".", "fc_in", ",", "self", ".", "dropout", ")", "\n", "\n", "", "self", ".", "output", "=", "self", ".", "fc_layer", "(", "self", ".", "fc_in", ",", "fc_in_size", ",", "12", ",", "\"fc8\"", ")", "\n", "self", ".", "data_dict", "=", "None", "\n", "return", "self", ".", "output", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.build_non_deep_nn": [[146, 155], ["vgg.Vgg19.conv_layer", "vgg.Vgg19.conv_layer", "vgg.Vgg19.max_pool", "print", "vgg.Vgg19.fc_layer"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.conv_layer", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.conv_layer", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.max_pool", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.fc_layer"], ["", "def", "build_non_deep_nn", "(", "self", ",", "images", ")", ":", "\n", "        ", "self", ".", "conv1_1", "=", "self", ".", "conv_layer", "(", "images", ",", "2", ",", "32", ",", "\"conv1_1\"", ")", "\n", "self", ".", "conv1_2", "=", "self", ".", "conv_layer", "(", "self", ".", "conv1_1", ",", "32", ",", "32", ",", "\"conv1_2\"", ")", "\n", "self", ".", "pool1", "=", "self", ".", "max_pool", "(", "self", ".", "conv1_2", ",", "'pool1'", ")", "\n", "fc_in_size", "=", "(", "(", "self", ".", "width", "//", "2", ")", "*", "(", "self", ".", "height", "//", "2", ")", ")", "*", "32", "\n", "print", "(", "fc_in_size", ")", "\n", "self", ".", "fc", "=", "self", ".", "fc_layer", "(", "self", ".", "pool1", ",", "fc_in_size", ",", "12", ",", "\"fc\"", ")", "\n", "self", ".", "data_dict", "=", "None", "\n", "return", "self", ".", "fc", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.pooling": [[156, 160], ["vgg.Vgg19.max_pool", "vgg.Vgg19.avg_pool"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.max_pool", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.avg_pool"], ["", "def", "pooling", "(", "self", ",", "bottom", ",", "name", ",", "pooling_type", "=", "\"max\"", ")", ":", "\n", "        ", "if", "pooling_type", "==", "\"avg\"", ":", "\n", "            ", "return", "self", ".", "avg_pool", "(", "bottom", ",", "name", ")", "\n", "", "return", "self", ".", "max_pool", "(", "bottom", ",", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.avg_pool": [[161, 164], ["print", "tensorflow.nn.avg_pool"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.avg_pool"], ["", "def", "avg_pool", "(", "self", ",", "bottom", ",", "name", ")", ":", "\n", "        ", "print", "(", "\"Using avg pool\"", ")", "\n", "return", "tf", ".", "nn", ".", "avg_pool", "(", "bottom", ",", "ksize", "=", "[", "1", ",", "2", ",", "2", ",", "1", "]", ",", "strides", "=", "[", "1", ",", "2", ",", "2", ",", "1", "]", ",", "padding", "=", "'SAME'", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.max_pool": [[165, 168], ["print", "tensorflow.nn.max_pool"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.max_pool"], ["", "def", "max_pool", "(", "self", ",", "bottom", ",", "name", ")", ":", "\n", "        ", "print", "(", "\"Using max pool\"", ")", "\n", "return", "tf", ".", "nn", ".", "max_pool", "(", "bottom", ",", "ksize", "=", "[", "1", ",", "2", ",", "2", ",", "1", "]", ",", "strides", "=", "[", "1", ",", "2", ",", "2", ",", "1", "]", ",", "padding", "=", "'SAME'", ",", "name", "=", "name", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.activation_function_tensor": [[169, 175], ["print", "tensorflow.nn.relu", "print", "tensorflow.nn.leaky_relu"], "methods", ["None"], ["", "def", "activation_function_tensor", "(", "self", ",", "features", ",", "act_function", "=", "\"relu\"", ")", ":", "\n", "        ", "if", "act_function", "==", "\"leaky_relu\"", ":", "\n", "            ", "print", "(", "\"Using leaky relu\"", ")", "\n", "return", "tf", ".", "nn", ".", "leaky_relu", "(", "features", ")", "\n", "", "print", "(", "\"Using relu\"", ")", "\n", "return", "tf", ".", "nn", ".", "relu", "(", "features", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.conv_layer": [[176, 185], ["tensorflow.variable_scope", "vgg.Vgg19.get_conv_var", "tensorflow.nn.conv2d", "tensorflow.nn.bias_add", "vgg.Vgg19.activation_function_tensor"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.get_conv_var", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.activation_function_tensor"], ["", "def", "conv_layer", "(", "self", ",", "bottom", ",", "in_channels", ",", "out_channels", ",", "name", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "filt", ",", "conv_biases", "=", "self", ".", "get_conv_var", "(", "3", ",", "in_channels", ",", "out_channels", ",", "name", ")", "\n", "\n", "conv", "=", "tf", ".", "nn", ".", "conv2d", "(", "bottom", ",", "filt", ",", "[", "1", ",", "1", ",", "1", ",", "1", "]", ",", "padding", "=", "'SAME'", ")", "\n", "bias", "=", "tf", ".", "nn", ".", "bias_add", "(", "conv", ",", "conv_biases", ")", "\n", "act_funct", "=", "self", ".", "activation_function_tensor", "(", "bias", ",", "act_function", "=", "self", ".", "activation_function", ")", "\n", "\n", "return", "act_funct", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.fc_layer": [[186, 194], ["tensorflow.variable_scope", "vgg.Vgg19.get_fc_var", "tensorflow.reshape", "tensorflow.nn.bias_add", "tensorflow.matmul"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.get_fc_var"], ["", "", "def", "fc_layer", "(", "self", ",", "bottom", ",", "in_size", ",", "out_size", ",", "name", ")", ":", "\n", "        ", "with", "tf", ".", "variable_scope", "(", "name", ")", ":", "\n", "            ", "weights", ",", "biases", "=", "self", ".", "get_fc_var", "(", "in_size", ",", "out_size", ",", "name", ")", "\n", "\n", "x", "=", "tf", ".", "reshape", "(", "bottom", ",", "[", "-", "1", ",", "in_size", "]", ")", "\n", "fc", "=", "tf", ".", "nn", ".", "bias_add", "(", "tf", ".", "matmul", "(", "x", ",", "weights", ")", ",", "biases", ")", "\n", "\n", "return", "fc", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.get_conv_var": [[195, 206], ["tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer.", "vgg.Vgg19.get_var", "tensorflow.contrib.layers.xavier_initializer.", "vgg.Vgg19.get_var"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.get_var", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.get_var"], ["", "", "def", "get_conv_var", "(", "self", ",", "filter_size", ",", "in_channels", ",", "out_channels", ",", "name", ")", ":", "\n", "        ", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "initial_value", "=", "initializer", "(", "[", "filter_size", ",", "filter_size", ",", "in_channels", ",", "out_channels", "]", ")", "\n", "# initial_value = tf.truncated_normal([filter_size, filter_size, in_channels, out_channels], 0.0, 0.001)", "\n", "filters", "=", "self", ".", "get_var", "(", "initial_value", ",", "name", ",", "0", ",", "name", "+", "\"_filters\"", ")", "\n", "\n", "initial_value", "=", "initializer", "(", "[", "out_channels", "]", ")", "\n", "# initial_value = tf.truncated_normal([out_channels], .0, .001)", "\n", "biases", "=", "self", ".", "get_var", "(", "initial_value", ",", "name", ",", "1", ",", "name", "+", "\"_biases\"", ")", "\n", "\n", "return", "filters", ",", "biases", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.get_fc_var": [[207, 218], ["tensorflow.contrib.layers.xavier_initializer", "tensorflow.contrib.layers.xavier_initializer.", "vgg.Vgg19.get_var", "tensorflow.contrib.layers.xavier_initializer.", "vgg.Vgg19.get_var"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.get_var", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.get_var"], ["", "def", "get_fc_var", "(", "self", ",", "in_size", ",", "out_size", ",", "name", ")", ":", "\n", "        ", "initializer", "=", "tf", ".", "contrib", ".", "layers", ".", "xavier_initializer", "(", ")", "\n", "# initial_value = tf.truncated_normal([in_size, out_size], 0.0, 0.001)", "\n", "initial_value", "=", "initializer", "(", "[", "in_size", ",", "out_size", "]", ")", "\n", "weights", "=", "self", ".", "get_var", "(", "initial_value", ",", "name", ",", "0", ",", "name", "+", "\"_weights\"", ")", "\n", "\n", "# initial_value = tf.truncated_normal([out_size], .0, .001)", "\n", "initial_value", "=", "initializer", "(", "[", "out_size", "]", ")", "\n", "biases", "=", "self", ".", "get_var", "(", "initial_value", ",", "name", ",", "1", ",", "name", "+", "\"_biases\"", ")", "\n", "\n", "return", "weights", ",", "biases", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.get_var": [[219, 236], ["tensorflow.Variable", "tensorflow.constant", "tensorflow.constant.get_shape", "initial_value.get_shape"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.get_shape", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.get_shape"], ["", "def", "get_var", "(", "self", ",", "initial_value", ",", "name", ",", "idx", ",", "var_name", ")", ":", "\n", "        ", "if", "self", ".", "data_dict", "is", "not", "None", "and", "name", "in", "self", ".", "data_dict", ":", "\n", "            ", "value", "=", "self", ".", "data_dict", "[", "name", "]", "[", "idx", "]", "\n", "", "else", ":", "\n", "            ", "value", "=", "initial_value", "\n", "\n", "", "if", "self", ".", "trainable", ":", "\n", "            ", "var", "=", "tf", ".", "Variable", "(", "value", ",", "name", "=", "var_name", ")", "\n", "", "else", ":", "\n", "            ", "var", "=", "tf", ".", "constant", "(", "value", ",", "dtype", "=", "tf", ".", "float32", ",", "name", "=", "var_name", ")", "\n", "\n", "", "self", ".", "var_dict", "[", "(", "name", ",", "idx", ")", "]", "=", "var", "\n", "\n", "# print var_name, var.get_shape().as_list()", "\n", "assert", "var", ".", "get_shape", "(", ")", "==", "initial_value", ".", "get_shape", "(", ")", "\n", "\n", "return", "var", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.save_npy": [[237, 251], ["isinstance", "list", "numpy.save", "print", "vgg.Vgg19.var_dict.items", "sess.run"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.run"], ["", "def", "save_npy", "(", "self", ",", "sess", ",", "npy_path", "=", "\"./vgg19-save.npy\"", ")", ":", "\n", "        ", "assert", "isinstance", "(", "sess", ",", "tf", ".", "Session", ")", "\n", "\n", "data_dict", "=", "{", "}", "\n", "\n", "for", "(", "name", ",", "idx", ")", ",", "var", "in", "list", "(", "self", ".", "var_dict", ".", "items", "(", ")", ")", ":", "\n", "            ", "var_out", "=", "sess", ".", "run", "(", "var", ")", "\n", "if", "name", "not", "in", "data_dict", ":", "\n", "                ", "data_dict", "[", "name", "]", "=", "{", "}", "\n", "", "data_dict", "[", "name", "]", "[", "idx", "]", "=", "var_out", "\n", "\n", "", "np", ".", "save", "(", "npy_path", ",", "data_dict", ")", "\n", "print", "(", "(", "\"file saved\"", ",", "npy_path", ")", ")", "\n", "return", "npy_path", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.get_var_count": [[252, 257], ["list", "vgg.Vgg19.var_dict.values", "functools.reduce", "v.get_shape().as_list", "v.get_shape"], "methods", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.get_shape"], ["", "def", "get_var_count", "(", "self", ")", ":", "\n", "        ", "count", "=", "0", "\n", "for", "v", "in", "list", "(", "self", ".", "var_dict", ".", "values", "(", ")", ")", ":", "\n", "            ", "count", "+=", "reduce", "(", "lambda", "x", ",", "y", ":", "x", "*", "y", ",", "v", ".", "get_shape", "(", ")", ".", "as_list", "(", ")", ")", "\n", "", "return", "count", "\n", "", "", ""]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.main.placeholder_inputs": [[75, 94], ["tensorflow.placeholder", "tensorflow.placeholder"], "function", ["None"], ["def", "placeholder_inputs", "(", "batch_size", ",", "images_placeholder_name", "=", "None", ",", "targets_placeholder_name", "=", "None", ")", ":", "\n", "    ", "\"\"\"Generate placeholder variables to represent the input tensors.\n    These placeholders are used as inputs by the rest of the model building\n    code and will be fed from the downloaded data in the .run() loop, below.\n    Args:\n            batch_size: The batch size will be baked into both placeholders.\n    Returns:\n            images_placeholder: Images placeholder.\n            labels_placeholder: Labels placeholder.\n    \"\"\"", "\n", "# Note that the shapes of the placeholders match the shapes of the full", "\n", "# image and label tensors, except the first dimension is now batch_size", "\n", "# rather than the full size of the train or test data sets.", "\n", "images_placeholder", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "images_placeholder_name", ",", "shape", "=", "(", "batch_size", ",", "\n", "input_data", ".", "IMAGE_HEIGHT", ",", "\n", "input_data", ".", "IMAGE_WIDTH", ",", "2", ")", ")", "\n", "labels_placeholder", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "name", "=", "targets_placeholder_name", ",", "\n", "shape", "=", "(", "batch_size", ",", "input_data", ".", "LABELS_SIZE", ")", ")", "\n", "return", "images_placeholder", ",", "labels_placeholder", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.main.fill_feed_dict": [[96, 131], ["data_set.next_batch", "ValueError"], "function", ["None"], ["", "def", "fill_feed_dict", "(", "data_set", ",", "images_pl", ",", "labels_pl", ",", "feed_with_batch", "=", "False", ",", "batch_size", "=", "None", ",", "shuffle", "=", "True", ",", "\n", "standardize_targets", "=", "False", ",", "fake_data", "=", "False", ")", ":", "\n", "    ", "\"\"\"Fills the feed_dict for training the given step or for evaluating the entire dataset.\n    A feed_dict takes the form of:\n    feed_dict = {\n        <placeholder>: <tensor of values to be passed for placeholder>,\n        ....\n    }\n    Args:\n      data_set: The set of images and labels, from input_data.read_data_sets()\n      images_pl: The images placeholder, from placeholder_inputs().\n      labels_pl: The labels placeholder, from placeholder_inputs().\n    Returns:\n      feed_dict: The feed dictionary mapping from placeholders to values.\n    \"\"\"", "\n", "# Create the feed_dict for the placeholders filled with the next", "\n", "# `batch size` examples.", "\n", "assert", "False", "# Deprecated Usar el de eval_utils", "\n", "if", "(", "feed_with_batch", ")", ":", "\n", "        ", "if", "(", "batch_size", "is", "None", ")", ":", "\n", "            ", "raise", "ValueError", "(", "\"batch_size not specified\"", ")", "\n", "", "images_feed", ",", "labels_feed", "=", "data_set", ".", "next_batch", "(", "batch_size", ",", "\n", "fake_data", ",", "\n", "shuffle", "=", "shuffle", ",", "\n", "standardize_targets", "=", "standardize_targets", ")", "\n", "# Create the feed_dict for the placeholders filled with the entire dataset", "\n", "", "else", ":", "\n", "        ", "images_feed", "=", "data_set", ".", "images", "\n", "labels_feed", "=", "data_set", ".", "labels", "\n", "\n", "", "feed_dict", "=", "{", "\n", "images_pl", ":", "images_feed", ",", "\n", "labels_pl", ":", "labels_feed", ",", "\n", "}", "\n", "return", "feed_dict", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.main.do_evaluation": [[133, 236], ["tensorflow.square", "numpy.empty", "numpy.zeros", "xrange", "print", "print", "print", "print", "print", "numpy.sqrt", "numpy.sqrt", "numpy.var", "tensorflow.subtract", "eval_utils.fill_feed_dict", "sess.run", "xrange", "transformations.euler_from_quaternion", "numpy.hstack", "transformations.euler_from_quaternion", "numpy.hstack", "numpy.dot", "numpy.square", "numpy.sum", "numpy.sum", "main.acos", "numpy.abs"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.main.fill_feed_dict", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.run", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.euler_from_quaternion", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.euler_from_quaternion", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.model.acos", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.abs"], ["", "def", "do_evaluation", "(", "sess", ",", "\n", "outputs", ",", "\n", "images_placeholder", ",", "\n", "labels_placeholder", ",", "\n", "data_set", ",", "\n", "batch_size", ",", "\n", "# k_matrix,", "\n", "standardize_targets", ",", "\n", "train_mode", "=", "None", ")", ":", "\n", "# target_variance_vector):", "\n", "    ", "\"\"\"Runs one evaluation against the full epoch of data.\n    Args:\n        sess: The session in which the model has been trained.\n        evaluation: .\n        images_placeholder: The images placeholder.\n        labels_placeholder: The labels placeholder.\n        data_set: The set of images and labels to evaluate, from\n        input_data.read_data_sets().\n    \"\"\"", "\n", "import", "transformations", "\n", "import", "eval_utils", "\n", "rows_reshape", "=", "3", "\n", "columns_reshape", "=", "4", "\n", "components_vector_size", "=", "6", "\n", "evaluation", "=", "tf", ".", "square", "(", "tf", ".", "subtract", "(", "outputs", ",", "labels_placeholder", ")", ")", "\n", "# batch_size = FLAGS.batch_size", "\n", "steps_per_epoch", "=", "data_set", ".", "num_examples", "//", "batch_size", "\n", "num_examples", "=", "steps_per_epoch", "*", "batch_size", "\n", "# prediction_matrix = np.empty((num_examples, components_vector_size), dtype=\"float32\")", "\n", "target_matrix", "=", "np", ".", "empty", "(", "(", "num_examples", ",", "components_vector_size", ")", ",", "dtype", "=", "\"float32\"", ")", "\n", "# accum_squared_errors = np.zeros((batch_size, input_data.LABELS_SIZE), dtype=\"float32\")", "\n", "squared_errors", "=", "np", ".", "zeros", "(", "components_vector_size", ",", "dtype", "=", "\"float32\"", ")", "\n", "accum_geod_distance", "=", "0.", "\n", "for", "step", "in", "xrange", "(", "steps_per_epoch", ")", ":", "\n", "        ", "feed_dict", "=", "eval_utils", ".", "fill_feed_dict", "(", "data_set", ",", "\n", "images_placeholder", ",", "\n", "labels_placeholder", ",", "\n", "feed_with_batch", "=", "True", ",", "\n", "shuffle", "=", "False", ",", "\n", "batch_size", "=", "batch_size", ",", "\n", "standardize_targets", "=", "standardize_targets", ")", "\n", "if", "train_mode", "is", "not", "None", ":", "\n", "            ", "feed_dict", "[", "train_mode", "]", "=", "False", "\n", "", "prediction", ",", "target", "=", "sess", ".", "run", "(", "[", "outputs", ",", "labels_placeholder", "]", ",", "feed_dict", "=", "feed_dict", ")", "\n", "if", "standardize_targets", ":", "# if true, convert back to original scale", "\n", "            ", "prediction", "=", "prediction", "*", "data_set", ".", "targets_std", "+", "data_set", ".", "targets_mean", "\n", "target", "=", "target", "*", "data_set", ".", "targets_std", "+", "data_set", ".", "targets_mean", "\n", "# accum_squared_errors += batch_squared_errors", "\n", "", "init", "=", "step", "*", "batch_size", "\n", "end", "=", "(", "step", "+", "1", ")", "*", "batch_size", "\n", "# prediction_matrix[init:end] = prediction", "\n", "# target_matrix[init:end] = target", "\n", "for", "i", "in", "xrange", "(", "batch_size", ")", ":", "\n", "            ", "assert", "init", "+", "i", "<", "end", "\n", "index", "=", "init", "+", "i", "\n", "# current_prediction = prediction[i].reshape(rows_reshape, columns_reshape)", "\n", "# P = K * [R|t] => [R|t] = K^(-1) * P", "\n", "# curr_pred_transform_matrix = inv_k_matrix * current_prediction", "\n", "# current_target = target[i].reshape(rows_reshape, columns_reshape)", "\n", "# curr_target_transform_matrix = inv_k_matrix * current_target", "\n", "# Get the closest rotation matrix", "\n", "# u, _ = linalg.polar(curr_pred_transform_matrix[0:3, 0:3])", "\n", "# Replace the non-orthogonal R matrix obtained from the prediction with the closest rotation matrix", "\n", "# closest_curr_pred_s3_matrix = matlib.identity(4)", "\n", "# closest_curr_pred_s3_matrix[0:3, 0:3] = u", "\n", "# closest_curr_pred_s3_matrix[0:3, 3] = curr_pred_transform_matrix[0:3, 3]", "\n", "# curr_target_s3_matrix = np.concatenate([curr_target_transform_matrix, [[0, 0, 0, 1]]], axis=0)", "\n", "# From [R|t] matrix to components", "\n", "# components = [x,y,z, roll, pitch, yaw]", "\n", "# curr_pred_components = se3_to_components(closest_curr_pred_s3_matrix)", "\n", "# curr_target_components = se3_to_components(curr_target_s3_matrix)", "\n", "\n", "current_prediction", "=", "prediction", "[", "i", "]", "\n", "prediction_quaternion", "=", "current_prediction", "[", "3", ":", "7", "]", "\n", "euler", "=", "transformations", ".", "euler_from_quaternion", "(", "prediction_quaternion", ")", "\n", "curr_pred_components", "=", "np", ".", "hstack", "(", "(", "current_prediction", "[", "0", ":", "3", "]", ",", "euler", ")", ")", "\n", "current_target", "=", "target", "[", "i", "]", "\n", "target_quaternion", "=", "current_target", "[", "3", ":", "7", "]", "\n", "euler", "=", "transformations", ".", "euler_from_quaternion", "(", "target_quaternion", ")", "\n", "curr_target_components", "=", "np", ".", "hstack", "(", "(", "current_target", "[", "0", ":", "3", "]", ",", "euler", ")", ")", "\n", "\n", "dot", "=", "np", ".", "dot", "(", "target_quaternion", ",", "prediction_quaternion", ")", "\n", "geod_distance", "=", "2", "*", "acos", "(", "np", ".", "abs", "(", "dot", ")", ")", "\n", "accum_geod_distance", "+=", "geod_distance", "\n", "curr_squared_error", "=", "np", ".", "square", "(", "curr_pred_components", "-", "curr_target_components", ")", "\n", "squared_errors", "+=", "curr_squared_error", "\n", "# prediction_matrix[index] = curr_pred_components", "\n", "target_matrix", "[", "index", "]", "=", "curr_target_components", "\n", "\n", "", "", "print", "(", "\"---------------------------------------------------------\"", ")", "\n", "print", "(", "\"Prediction\"", ")", "\n", "print", "(", "current_prediction", ")", "\n", "# print(\"Prediction (closest [R|t])\")", "\n", "# print(closest_curr_pred_s3_matrix)", "\n", "print", "(", "\"Target\"", ")", "\n", "print", "(", "current_target", ")", "\n", "mean_squared_errors", "=", "squared_errors", "/", "num_examples", "\n", "rmse_x", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "squared_errors", "[", "0", ":", "3", "]", ")", "/", "num_examples", ")", "\n", "rmse_ang", "=", "np", ".", "sqrt", "(", "np", ".", "sum", "(", "squared_errors", "[", "3", ":", "6", "]", ")", "/", "num_examples", ")", "\n", "mean_geod_dist_q", "=", "accum_geod_distance", "/", "num_examples", "\n", "target_variance", "=", "np", ".", "var", "(", "target_matrix", ",", "axis", "=", "0", ")", "# variance = std ** 2", "\n", "norm_mse", "=", "mean_squared_errors", "/", "target_variance", "\n", "return", "rmse_x", ",", "rmse_ang", ",", "mean_geod_dist_q", ",", "mean_squared_errors", ",", "norm_mse", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.main.rmse": [[265, 268], ["numpy.power", "math.sqrt", "numpy.mean"], "function", ["None"], ["", "def", "rmse", "(", "error", ")", ":", "\n", "    ", "squared_errors", "=", "np", ".", "power", "(", "error", ",", "2", ")", "\n", "return", "math", ".", "sqrt", "(", "np", ".", "mean", "(", "squared_errors", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.main.ape_base": [[270, 279], ["lie_algebra.relative_se3"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.lie_algebra.relative_se3"], ["", "def", "ape_base", "(", "x_t", ",", "x_t_star", ")", ":", "\n", "    ", "\"\"\"\n    Computes the absolute error pose for a single SE(3) pose pair\n    following the notation of the Kummerle paper.\n    :param x_t: estimated absolute pose at t\n    :param x_t_star: reference absolute pose at t\n    .:return: the delta pose\n    \"\"\"", "\n", "return", "lie_algebra", ".", "relative_se3", "(", "x_t", ",", "x_t_star", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.main.acos": [[281, 286], ["numpy.arccos", "math.isnan"], "function", ["None"], ["", "def", "acos", "(", "x", ")", ":", "\n", "    ", "res", "=", "np", ".", "arccos", "(", "x", ")", "\n", "if", "math", ".", "isnan", "(", "res", ")", ":", "\n", "        ", "return", "(", "-", "0.69813170079773212", "*", "x", "*", "x", "-", "0.87266462599716477", ")", "*", "x", "+", "1.5707963267948966", "\n", "", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.main.add_array_to_tensorboard": [[288, 297], ["tensorflow.Summary", "summary_writer.add_summary", "summary_writer.flush", "tf.Summary.value.add", "str"], "function", ["None"], ["", "def", "add_array_to_tensorboard", "(", "arr", ",", "prefix_tagname", ",", "summary_writer", ",", "step", ")", ":", "\n", "    ", "ind", "=", "1", "\n", "summary", "=", "tf", ".", "Summary", "(", ")", "\n", "for", "std", "in", "arr", ":", "\n", "        ", "tagname", "=", "prefix_tagname", "+", "str", "(", "ind", ")", "\n", "summary", ".", "value", ".", "add", "(", "tag", "=", "tagname", ",", "simple_value", "=", "std", ")", "\n", "ind", "+=", "1", "\n", "", "summary_writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "summary_writer", ".", "flush", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.main.add_scalar_to_tensorboard": [[299, 303], ["tensorflow.Summary", "tf.Summary.value.add", "summary_writer.add_summary"], "function", ["None"], ["", "def", "add_scalar_to_tensorboard", "(", "value", ",", "tagname", ",", "summary_writer", ",", "step", ")", ":", "\n", "    ", "summary", "=", "tf", ".", "Summary", "(", ")", "\n", "summary", ".", "value", ".", "add", "(", "tag", "=", "tagname", ",", "simple_value", "=", "value", ")", "\n", "summary_writer", ".", "add_summary", "(", "summary", ",", "step", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.main.run_training": [[305, 523], ["print", "input_data.read_data_sets", "input_data.read_data_sets", "print", "print", "print", "print", "tensorflow.Graph().as_default", "main.placeholder_inputs", "tensorflow.placeholder", "tensorflow.placeholder", "model.inference", "tensorflow.identity", "model.kendall_loss_naive", "model.training", "tensorflow.summary.merge_all", "tensorflow.global_variables_initializer", "tensorflow.Session", "input_data.DataSet", "time.time", "print", "str", "str", "str", "tensorflow.train.Saver", "tensorflow.train.Saver", "print", "print", "print", "input_data.DataSet", "os.path.join", "tensorflow.summary.FileWriter", "tf.Session.run", "xrange", "time.time", "tensorflow.Graph", "str", "time.time", "eval_utils.fill_feed_dict", "tf.Session.run", "str", "str", "print", "tf.Session.run", "tf.summary.FileWriter.add_summary", "tf.summary.FileWriter.flush", "print", "main.do_evaluation", "main.add_scalar_to_tensorboard", "main.add_scalar_to_tensorboard", "main.add_scalar_to_tensorboard", "main.add_array_to_tensorboard", "main.add_array_to_tensorboard", "print", "main.do_evaluation", "main.add_scalar_to_tensorboard", "main.add_scalar_to_tensorboard", "main.add_scalar_to_tensorboard", "main.add_array_to_tensorboard", "main.add_array_to_tensorboard", "input_data.DataSet.reset_epoch", "print", "eval_utils.infer_relative_poses", "eval_utils.our_metric_evaluation", "print", "main.add_scalar_to_tensorboard", "main.add_scalar_to_tensorboard", "len", "len", "time.time", "input_data.DataSet", "os.path.join", "tf.train.Saver.save", "os.path.join", "tf.train.Saver.save", "print"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.main.placeholder_inputs", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.model.inference", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.model.kendall_loss_naive", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.model.training", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.run", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.main.fill_feed_dict", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.run", "home.repos.pwc.inspect_result.CIFASIS_wganvo.wgan.wgan_improved.run", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.main.do_evaluation", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.main.add_scalar_to_tensorboard", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.main.add_scalar_to_tensorboard", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.main.add_scalar_to_tensorboard", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.main.add_array_to_tensorboard", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.main.add_array_to_tensorboard", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.main.do_evaluation", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.main.add_scalar_to_tensorboard", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.main.add_scalar_to_tensorboard", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.main.add_scalar_to_tensorboard", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.main.add_array_to_tensorboard", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.main.add_array_to_tensorboard", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.eval_utils.infer_relative_poses", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.eval_utils.our_metric_evaluation", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.main.add_scalar_to_tensorboard", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.main.add_scalar_to_tensorboard"], ["", "def", "run_training", "(", ")", ":", "\n", "    ", "print", "(", "\"START\"", ")", "\n", "# se3_to_components(np.array([1,2,3]))", "\n", "\"\"\"Train MNIST for a number of steps.\"\"\"", "\n", "# Get the sets of images and labels for training, validation, and", "\n", "# test on MNIST.", "\n", "kfold", "=", "5", "\n", "train_images", ",", "train_targets", ",", "splits", ",", "train_groups", ",", "train_points", "=", "input_data", ".", "read_data_sets", "(", "FLAGS", ".", "train_data_dir", ",", "\n", "kfold", ")", "\n", "test_images", ",", "test_targets", ",", "_", ",", "test_groups", ",", "_", "=", "input_data", ".", "read_data_sets", "(", "FLAGS", ".", "test_data_dir", ")", "\n", "\n", "# intrinsic_matrix = np.matrix(load(FLAGS.intrinsics_dir))", "\n", "# if FLAGS.test_intrinsics_dir:", "\n", "#     test_intrinsic_matrix = np.matrix(load(FLAGS.test_intrinsics_dir))", "\n", "# else:", "\n", "#     test_intrinsic_matrix = intrinsic_matrix", "\n", "# Tell TensorFlow that the model will be built into the default Graph.", "\n", "print", "(", "\"Learning rate: \"", "+", "str", "(", "FLAGS", ".", "learning_rate", ")", ")", "\n", "print", "(", "\"Steps: \"", "+", "str", "(", "FLAGS", ".", "max_steps", ")", ")", "\n", "print", "(", "\"Batch size: \"", "+", "str", "(", "FLAGS", ".", "batch_size", ")", ")", "\n", "print", "(", "FLAGS", ")", "\n", "with", "tf", ".", "Graph", "(", ")", ".", "as_default", "(", ")", ":", "\n", "# Generate placeholders for the images and labels.", "\n", "        ", "images_placeholder", ",", "labels_placeholder", "=", "placeholder_inputs", "(", "\n", "FLAGS", ".", "batch_size", ",", "images_placeholder_name", "=", "\"images_placeholder\"", ",", "\n", "targets_placeholder_name", "=", "\"targets_placeholder\"", ")", "\n", "points", "=", "tf", ".", "placeholder", "(", "tf", ".", "float32", ",", "\n", "shape", "=", "[", "FLAGS", ".", "batch_size", ",", "3", ",", "input_data", ".", "IMAGE_POINTS", "]", ",", "\n", "name", "=", "\"train_points_placeholder\"", ")", "\n", "# train_dataset_images_placeholder, train_dataset_labels_placeholder = placeholder_inputs(", "\n", "#    data_sets.train.num_examples)", "\n", "train_mode", "=", "tf", ".", "placeholder", "(", "tf", ".", "bool", ",", "name", "=", "\"train_mode\"", ")", "\n", "\n", "# Build a Graph that computes predictions from the inference model.", "\n", "outputs", "=", "model", ".", "inference", "(", "images_placeholder", ",", "train_mode", ",", "FLAGS", ".", "pruned_vgg", ",", "FLAGS", ".", "pooling", ",", "FLAGS", ".", "act_function", ")", "\n", "\n", "# Rename", "\n", "outputs", "=", "tf", ".", "identity", "(", "outputs", ",", "name", "=", "\"outputs\"", ")", "\n", "# train_targets_variance = np.var(data_sets.train.labels, axis=0)", "\n", "# (X- np.mean(X, axis=0)) / np.std(X,axis=0) #Guardar la media y el std para volver a los valores originales", "\n", "\n", "standardize_targets", "=", "False", "\n", "# Add to the Graph the Ops for loss calculation.", "\n", "# sx = tf.Variable(0., name=\"regression_sx\")", "\n", "# sq = tf.Variable(-3., name=\"regression_sq\")", "\n", "loss", "=", "model", ".", "kendall_loss_naive", "(", "outputs", ",", "labels_placeholder", ")", "# model.loss(outputs, labels_placeholder)", "\n", "\n", "# Add to the Graph the Ops that calculate and apply gradients.", "\n", "train_op", "=", "model", ".", "training", "(", "loss", ",", "FLAGS", ".", "learning_rate", ")", "\n", "\n", "# Add the Op to compare the logits to the labels during evaluation.", "\n", "# evaluation = model.evaluation(outputs, labels_placeholder)", "\n", "\n", "# Build the summary Tensor based on the TF collection of Summaries.", "\n", "summary", "=", "tf", ".", "summary", ".", "merge_all", "(", ")", "\n", "\n", "# Add the variable initializer Op.", "\n", "init", "=", "tf", ".", "global_variables_initializer", "(", ")", "\n", "\n", "# Create a session for running Ops on the Graph.", "\n", "sess", "=", "tf", ".", "Session", "(", ")", "\n", "\n", "# Instantiate a SummaryWriter to output summaries and the Graph.", "\n", "# summary_writer = tf.summary.FileWriter(FLAGS.log_dir, sess.graph)", "\n", "\n", "test_dataset", "=", "input_data", ".", "DataSet", "(", "test_images", ",", "test_targets", ",", "test_groups", ",", "fake_data", "=", "FLAGS", ".", "fake_data", ")", "\n", "# And then after everything is built:", "\n", "\n", "current_fold", "=", "0", "\n", "# FIXME ver como loguear", "\n", "require_improvement", "=", "12000", "\n", "total_start_time", "=", "time", ".", "time", "(", ")", "\n", "for", "train_indexs", ",", "validation_indexs", "in", "splits", ":", "\n", "# Create a saver for writing training checkpoints.", "\n", "            ", "saver", "=", "tf", ".", "train", ".", "Saver", "(", "max_to_keep", "=", "1", ")", "\n", "our_metric_saver", "=", "tf", ".", "train", ".", "Saver", "(", "max_to_keep", "=", "1", ")", "\n", "current_fold", "+=", "1", "\n", "best_validation_performance", "=", "1000000.", "\n", "our_metric_test_performance", "=", "1000000.", "\n", "print", "(", "\"**************** NEW FOLD *******************\"", ")", "\n", "print", "(", "\"Train size: \"", "+", "str", "(", "len", "(", "train_indexs", ")", ")", ")", "\n", "print", "(", "\"Validation size: \"", "+", "str", "(", "len", "(", "validation_indexs", ")", ")", ")", "\n", "train_dataset", "=", "input_data", ".", "DataSet", "(", "train_images", "[", "train_indexs", "]", ",", "train_targets", "[", "train_indexs", "]", ",", "\n", "fake_data", "=", "FLAGS", ".", "fake_data", ",", "points", "=", "train_points", ")", "\n", "fwriter_str", "=", "\"fold_\"", "+", "str", "(", "current_fold", ")", "\n", "curr_fold_log_path", "=", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "log_dir", ",", "fwriter_str", ")", "\n", "# Instantiate a SummaryWriter to output summaries and the Graph.", "\n", "summary_writer", "=", "tf", ".", "summary", ".", "FileWriter", "(", "curr_fold_log_path", ",", "sess", ".", "graph", ")", "\n", "last_improvement", "=", "0", "\n", "our_metric_last_improvement", "=", "0", "\n", "# Run the Op to initialize the variables.", "\n", "sess", ".", "run", "(", "init", ")", "\n", "# Start the training loop.", "\n", "for", "step", "in", "xrange", "(", "FLAGS", ".", "max_steps", ")", ":", "\n", "                ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "# Fill a feed dictionary with the actual set of images and labels", "\n", "# for this particular training step.", "\n", "feed_dict", "=", "eval_utils", ".", "fill_feed_dict", "(", "train_dataset", ",", "\n", "images_placeholder", ",", "\n", "labels_placeholder", ",", "\n", "points_pl", "=", "points", ",", "\n", "feed_with_batch", "=", "True", ",", "\n", "batch_size", "=", "FLAGS", ".", "batch_size", ",", "\n", "standardize_targets", "=", "standardize_targets", ")", "\n", "feed_dict", "[", "train_mode", "]", "=", "True", "\n", "\n", "# Run one step of the model.  The return values are the activations", "\n", "# from the `train_op` (which is discarded) and the `loss` Op.  To", "\n", "# inspect the values of your Ops or variables, you may include them", "\n", "# in the list passed to sess.run() and the value tensors will be", "\n", "# returned in the tuple from the call.", "\n", "_", ",", "loss_value", "=", "sess", ".", "run", "(", "[", "train_op", ",", "loss", "]", ",", "\n", "feed_dict", "=", "feed_dict", ")", "\n", "\n", "# Write the summaries and print an overview fairly often.", "\n", "if", "step", "%", "100", "==", "0", ":", "\n", "                    ", "duration", "=", "time", ".", "time", "(", ")", "-", "start_time", "\n", "# Print status to stdout.", "\n", "print", "(", "'Step %d: loss = %.2f (%.3f sec)'", "%", "(", "step", ",", "loss_value", ",", "duration", ")", ")", "\n", "# Update the events file.", "\n", "summary_str", "=", "sess", ".", "run", "(", "summary", ",", "feed_dict", "=", "feed_dict", ")", "\n", "summary_writer", ".", "add_summary", "(", "summary_str", ",", "step", ")", "\n", "summary_writer", ".", "flush", "(", ")", "\n", "# Save a checkpoint and evaluate the model periodically.", "\n", "", "if", "(", "step", "+", "1", ")", "%", "1000", "==", "0", "or", "(", "step", "+", "1", ")", "==", "FLAGS", ".", "max_steps", ":", "\n", "# Evaluate against the training set.", "\n", "\n", "# print('Training Data Eval:')", "\n", "# train_rmse_x, train_rmse_ang, train_dist_q, train_mse, train_norm_mse = do_evaluation(sess,", "\n", "#                                                                      outputs,", "\n", "#                                                                      images_placeholder,", "\n", "#                                                                      labels_placeholder,", "\n", "#                                                                      train_dataset,", "\n", "#                                                                      FLAGS.batch_size,", "\n", "#                                                                      standardize_targets)", "\n", "# add_scalar_to_tensorboard(train_rmse_x, \"tr_rmse_x\", summary_writer, step)", "\n", "# add_scalar_to_tensorboard(train_rmse_ang, \"tr_rmse_ang\", summary_writer, step)", "\n", "# add_scalar_to_tensorboard(train_dist_q, \"tr_gdist_q\", summary_writer, step)", "\n", "# add_array_to_tensorboard(train_mse, \"tr_mse_\", summary_writer, step)", "\n", "# add_array_to_tensorboard(train_norm_mse, \"tr_norm_mse_\", summary_writer, step)", "\n", "# Evaluate against the validation set.", "\n", "                    ", "print", "(", "'Validation Data Eval:'", ")", "\n", "validation_rmse_x", ",", "validation_rmse_ang", ",", "validation_dist_q", ",", "validation_mse", ",", "validation_norm_mse", "=", "do_evaluation", "(", "\n", "sess", ",", "\n", "outputs", ",", "\n", "images_placeholder", ",", "\n", "labels_placeholder", ",", "\n", "input_data", ".", "DataSet", "(", "\n", "train_images", "[", "\n", "validation_indexs", "]", ",", "\n", "train_targets", "[", "\n", "validation_indexs", "]", ",", "\n", "train_groups", "[", "\n", "validation_indexs", "]", ",", "\n", "fake_data", "=", "FLAGS", ".", "fake_data", ")", ",", "\n", "FLAGS", ".", "batch_size", ",", "\n", "# intrinsic_matrix,", "\n", "standardize_targets", ",", "\n", "train_mode", ")", "\n", "add_scalar_to_tensorboard", "(", "validation_rmse_x", ",", "\"v_rmse_x\"", ",", "summary_writer", ",", "step", ")", "\n", "add_scalar_to_tensorboard", "(", "validation_rmse_ang", ",", "\"v_rmse_ang\"", ",", "summary_writer", ",", "step", ")", "\n", "add_scalar_to_tensorboard", "(", "validation_dist_q", ",", "\"v_gdist_q\"", ",", "summary_writer", ",", "step", ")", "\n", "add_array_to_tensorboard", "(", "validation_mse", ",", "\"v_mse_\"", ",", "summary_writer", ",", "step", ")", "\n", "add_array_to_tensorboard", "(", "validation_norm_mse", ",", "\"v_norm_mse_\"", ",", "summary_writer", ",", "step", ")", "\n", "# Evaluate against the test set.", "\n", "print", "(", "'Test Data Eval:'", ")", "\n", "test_rmse_x", ",", "test_rmse_ang", ",", "test_dist_q", ",", "test_mse", ",", "test_norm_mse", "=", "do_evaluation", "(", "sess", ",", "\n", "outputs", ",", "\n", "images_placeholder", ",", "\n", "labels_placeholder", ",", "\n", "test_dataset", ",", "\n", "FLAGS", ".", "batch_size", ",", "\n", "# test_intrinsic_matrix,", "\n", "standardize_targets", ",", "\n", "train_mode", ")", "\n", "add_scalar_to_tensorboard", "(", "test_rmse_x", ",", "\"te_rmse_x\"", ",", "summary_writer", ",", "step", ")", "\n", "add_scalar_to_tensorboard", "(", "test_rmse_ang", ",", "\"te_rmse_ang\"", ",", "summary_writer", ",", "step", ")", "\n", "add_scalar_to_tensorboard", "(", "test_dist_q", ",", "\"te_gdist_q\"", ",", "summary_writer", ",", "step", ")", "\n", "add_array_to_tensorboard", "(", "test_mse", ",", "\"te_mse_\"", ",", "summary_writer", ",", "step", ")", "\n", "add_array_to_tensorboard", "(", "test_norm_mse", ",", "\"te_norm_mse_\"", ",", "summary_writer", ",", "step", ")", "\n", "\n", "test_dataset", ".", "reset_epoch", "(", ")", "\n", "\n", "print", "(", "\"Test Eval:\"", ")", "\n", "relative_prediction", ",", "relative_target", "=", "eval_utils", ".", "infer_relative_poses", "(", "sess", ",", "test_dataset", ",", "\n", "FLAGS", ".", "batch_size", ",", "\n", "images_placeholder", ",", "outputs", ",", "\n", "labels_placeholder", ",", "\n", "train_mode", ")", "\n", "save_txt", "=", "step", "==", "999", "or", "step", "==", "19999", "or", "step", "==", "39999", "\n", "te_eval", "=", "eval_utils", ".", "our_metric_evaluation", "(", "relative_prediction", ",", "relative_target", ",", "test_dataset", ",", "\n", "curr_fold_log_path", ",", "save_txt", ")", "\n", "print", "(", "te_eval", ")", "\n", "add_scalar_to_tensorboard", "(", "te_eval", ",", "\"mean(square(log(d)/log(f)))\"", ",", "summary_writer", ",", "step", ")", "\n", "# add_scalar_to_tensorboard(mean_ape_rmse_tr, \"test_mean_ape_rmse_tr\", summary_writer, step)", "\n", "# add_scalar_to_tensorboard(mean_ape_rmse_rot, \"test_mean_ape_rmse_rot\", summary_writer, step)", "\n", "\n", "# Keep the best model", "\n", "v_eval", "=", "(", "validation_rmse_x", "+", "100", "*", "validation_dist_q", ")", "/", "2", "\n", "add_scalar_to_tensorboard", "(", "v_eval", ",", "\"v_eval\"", ",", "summary_writer", ",", "step", ")", "\n", "\n", "if", "te_eval", "<", "our_metric_test_performance", ":", "\n", "                        ", "our_metric_test_performance", "=", "te_eval", "\n", "our_metric_last_improvement", "=", "step", "\n", "checkpoint_file", "=", "os", ".", "path", ".", "join", "(", "curr_fold_log_path", ",", "'our-metric-vgg-model'", ")", "\n", "our_metric_saver", ".", "save", "(", "sess", ",", "checkpoint_file", ",", "global_step", "=", "step", ")", "\n", "\n", "", "if", "v_eval", "<", "best_validation_performance", ":", "\n", "                        ", "best_validation_performance", "=", "v_eval", "\n", "last_improvement", "=", "step", "\n", "checkpoint_file", "=", "os", ".", "path", ".", "join", "(", "curr_fold_log_path", ",", "'vgg-model'", ")", "\n", "saver", ".", "save", "(", "sess", ",", "checkpoint_file", ",", "global_step", "=", "step", ")", "\n", "", "if", "step", "-", "last_improvement", ">", "require_improvement", ":", "\n", "                        ", "print", "(", "\"No improvement found in a while, stopping optimization. Last improvement = step %d\"", "%", "(", "\n", "last_improvement", ")", ")", "\n", "break", "\n", "", "", "", "", "total_duration", "=", "time", ".", "time", "(", ")", "-", "total_start_time", "\n", "print", "(", "'Total: %.3f sec'", "%", "(", "total_duration", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.main.main": [[525, 531], ["main.run_training"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.main.run_training"], ["", "", "def", "main", "(", "_", ")", ":", "\n", "# if tf.gfile.Exists(FLAGS.log_dir):", "\n", "\n", "# tf.gfile.DeleteRecursively(FLAGS.log_dir)", "\n", "# tf.gfile.MakeDirs(FLAGS.log_dir)", "\n", "    ", "run_training", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.model.inference": [[57, 69], ["vgg.Vgg19", "vgg.Vgg19.build", "int", "int", "vgg.Vgg19.build_pruned_vgg"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.build", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.vgg.Vgg19.build_pruned_vgg"], ["def", "inference", "(", "images", ",", "train_mode", ",", "pruned_vgg", "=", "False", ",", "pooling_type", "=", "\"max\"", ",", "activation_function", "=", "\"relu\"", ")", ":", "\n", "    ", "\"\"\"Build the model up to where it may be used for inference.\n    Args:\n      images: Images placeholder, from inputs().\n    Returns:\n      softmax_linear: Output tensor with the computed logits.\n    \"\"\"", "\n", "import", "vgg", "\n", "v", "=", "vgg", ".", "Vgg19", "(", "int", "(", "images", ".", "shape", "[", "2", "]", ")", ",", "int", "(", "images", ".", "shape", "[", "1", "]", ")", ",", "activation_function", "=", "activation_function", ")", "\n", "if", "pruned_vgg", ":", "\n", "        ", "return", "v", ".", "build_pruned_vgg", "(", "images", ")", "\n", "", "return", "v", ".", "build", "(", "images", ",", "train_mode", ",", "pooling_type", "=", "pooling_type", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.model.rmse": [[72, 74], ["tensorflow.sqrt", "tensorflow.reduce_mean", "model.squared_error"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.model.squared_error"], ["", "def", "rmse", "(", "outputs", ",", "targets", ")", ":", "\n", "    ", "return", "tf", ".", "sqrt", "(", "tf", ".", "reduce_mean", "(", "squared_error", "(", "outputs", ",", "targets", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.model.loss": [[76, 85], ["model.kendall_loss_naive"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.model.kendall_loss_naive"], ["", "def", "loss", "(", "outputs", ",", "targets", ")", ":", "\n", "    ", "\"\"\"Calculates the loss from the logits and the labels.\n    Args:\n      output:\n      target:\n    Returns:\n      loss: Loss tensor of type float.\n    \"\"\"", "\n", "return", "kendall_loss_naive", "(", "outputs", ",", "targets", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.model.kendall_loss_uncertainty": [[87, 105], ["model.split_x_q", "model.split_x_q", "tensorflow.norm", "tensorflow.norm", "print", "print", "tensorflow.exp", "tensorflow.exp", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.summary.scalar", "tensorflow.reduce_mean"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.model.split_x_q", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.model.split_x_q", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.norm", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.norm"], ["", "def", "kendall_loss_uncertainty", "(", "outputs", ",", "targets", ",", "sx", ",", "sq", ")", ":", "\n", "    ", "outputs_x", ",", "outputs_q", "=", "split_x_q", "(", "outputs", ")", "\n", "targets_x", ",", "targets_q", "=", "split_x_q", "(", "targets", ")", "\n", "loss_x", "=", "tf", ".", "norm", "(", "outputs_x", "-", "targets_x", ",", "axis", "=", "1", ")", "\n", "#q_norm = tf.norm(outputs_q, axis=1)", "\n", "#loss_q = tf.norm(targets_q - outputs_q / tf.reshape(q_norm, (-1, 1)), axis=1)", "\n", "loss_q", "=", "tf", ".", "norm", "(", "targets_q", "-", "outputs_q", ",", "axis", "=", "1", ")", "\n", "#dot = tf.reduce_sum(tf.multiply(targets_q, outputs_q), 1, keepdims=True)", "\n", "#loss_q = 2 * tf.acos(tf.abs(dot))", "\n", "print", "(", "loss_x", ".", "shape", ")", "\n", "print", "(", "loss_q", ".", "shape", ")", "\n", "noise_x", "=", "tf", ".", "exp", "(", "-", "sx", ")", "\n", "noise_q", "=", "tf", ".", "exp", "(", "-", "sq", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"sx\"", ",", "sx", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"sq\"", ",", "sq", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"noise_x\"", ",", "noise_x", ")", "\n", "tf", ".", "summary", ".", "scalar", "(", "\"noise_q\"", ",", "noise_q", ")", "\n", "return", "tf", ".", "reduce_mean", "(", "loss_x", "*", "noise_x", "+", "sx", "+", "loss_q", "*", "noise_q", "+", "sq", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.model.acos": [[107, 109], ["None"], "function", ["None"], ["", "def", "acos", "(", "x", ")", ":", "\n", "    ", "return", "(", "-", "0.69813170079773212", "*", "x", "*", "x", "-", "0.87266462599716477", ")", "*", "x", "+", "1.5707963267948966", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.model.kendall_loss_naive": [[111, 126], ["model.split_x_q", "model.split_x_q", "tensorflow.norm", "tensorflow.norm", "tensorflow.reduce_mean"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.model.split_x_q", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.model.split_x_q", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.norm", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.norm"], ["", "def", "kendall_loss_naive", "(", "outputs", ",", "targets", ")", ":", "\n", "    ", "outputs_x", ",", "outputs_q", "=", "split_x_q", "(", "outputs", ")", "\n", "targets_x", ",", "targets_q", "=", "split_x_q", "(", "targets", ")", "\n", "loss_x", "=", "tf", ".", "norm", "(", "outputs_x", "-", "targets_x", ",", "axis", "=", "1", ")", "\n", "# absolute_x = tf.reduce_mean(tf.abs(tf.subtract(outputs_x, targets_x)))", "\n", "# q_norm = tf.norm(outputs_q, axis=1)", "\n", "# loss_q = tf.norm(targets_q - outputs_q / tf.reshape(q_norm, (-1, 1)), axis=1)", "\n", "# dot = tf.reduce_sum(tf.multiply(targets_q, outputs_q), 1, keepdims=True)", "\n", "# loss_q = 2 * acos(tf.abs(dot))", "\n", "loss_q", "=", "tf", ".", "norm", "(", "targets_q", "-", "outputs_q", ",", "axis", "=", "1", ")", "\n", "beta", "=", "100", "\n", "# tf.summary.scalar(\"x_cost\", loss_x)", "\n", "# tf.summary.scalar(\"abs_x_cost\", absolute_x)", "\n", "# tf.summary.scalar(\"q_scaled_cost\", beta * loss_q)", "\n", "return", "tf", ".", "reduce_mean", "(", "loss_x", "+", "beta", "*", "loss_q", ")", "# tf.reduce_mean(tf.abs(tf.subtract(outputs, targets)))", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.model.kendall_reprojection_loss": [[129, 145], ["model.split_x_q", "model.split_x_q", "tfquaternions.Quaternion().as_rotation_matrix", "tfquaternions.Quaternion().as_rotation_matrix", "tensorflow.reshape", "tensorflow.reshape", "model.repr", "model.repr", "tensorflow.reduce_mean", "tensorflow.norm", "tfquaternions.Quaternion", "tfquaternions.Quaternion"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.model.split_x_q", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.model.split_x_q", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.as_rotation_matrix", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.as_rotation_matrix", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.model.repr", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.model.repr", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.norm"], ["", "def", "kendall_reprojection_loss", "(", "outputs", ",", "targets", ",", "pts_3D", ")", ":", "\n", "    ", "outputs_x", ",", "outputs_q", "=", "split_x_q", "(", "outputs", ")", "\n", "targets_x", ",", "targets_q", "=", "split_x_q", "(", "targets", ")", "\n", "outputs_q", "=", "tfquaternions", ".", "Quaternion", "(", "outputs_q", ")", ".", "as_rotation_matrix", "(", ")", "\n", "targets_q", "=", "tfquaternions", ".", "Quaternion", "(", "targets_q", ")", ".", "as_rotation_matrix", "(", ")", "# shape=(B,3,3)", "\n", "# inv_outputs_q = tf.linalg.inv(outputs_q)", "\n", "# inv_targets_q = tf.linalg.inv(targets_q)  # shape=(B,3,3)", "\n", "# pts = get_pts(N) # shape=(N,3,1)", "\n", "# repr(outputs_x,inv_outputs_q,pts)", "\n", "targets_x", "=", "tf", ".", "reshape", "(", "targets_x", ",", "(", "targets_x", ".", "shape", "[", "0", "]", ",", "targets_x", ".", "shape", "[", "1", "]", ",", "1", ")", ")", "\n", "outputs_x", "=", "tf", ".", "reshape", "(", "outputs_x", ",", "(", "outputs_x", ".", "shape", "[", "0", "]", ",", "outputs_x", ".", "shape", "[", "1", "]", ",", "1", ")", ")", "\n", "#pts_3D = tf.reshape(pts_3D, (pts_3D.shape[0], pts_3D.shape[1], 1))", "\n", "# pts_3d = get_pts_3d(targets_x, inv_targets_q, pts)", "\n", "loss_t", "=", "repr", "(", "targets_x", ",", "targets_q", ",", "pts_3D", ")", "# shape=(B,3,N)", "\n", "loss_q", "=", "repr", "(", "outputs_x", ",", "outputs_q", ",", "pts_3D", ")", "\n", "return", "tf", ".", "reduce_mean", "(", "tf", ".", "norm", "(", "loss_t", "-", "loss_q", ",", "axis", "=", "1", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.model.repr": [[150, 161], ["tensorflow.matmul"], "function", ["None"], ["", "def", "repr", "(", "x", ",", "q", ",", "g", ")", ":", "\n", "# N = g.shape[0]", "\n", "# B = q.shape[0]", "\n", "# q = tf.tile(q, [N, 1, 1])", "\n", "# x = tf.tile(x, [N, 1, 1])", "\n", "# g = tf.tile(g, [B, 1, 1])", "\n", "\n", "    ", "res", "=", "tf", ".", "matmul", "(", "q", ",", "g", ")", "+", "x", "\n", "# res = res[:, 0:2, :] / res[:, 2:3, :]", "\n", "#res = tf.reshape(res, ([res.shape[0], res.shape[1]]))", "\n", "return", "res", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.model.split_x_q": [[185, 190], ["print"], "function", ["None"], ["", "def", "split_x_q", "(", "batch", ")", ":", "\n", "    ", "print", "(", "batch", ".", "shape", ")", "\n", "x", "=", "batch", "[", ":", ",", "0", ":", "3", "]", "\n", "q", "=", "batch", "[", ":", ",", "3", ":", "7", "]", "\n", "return", "x", ",", "q", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.model.loss_": [[192, 207], ["tensorflow.Variable", "tensorflow.constant", "tensorflow.while_loop", "model.rmse", "tensorflow.less", "tensorflow.reshape", "model.get_cost", "tensorflow.concat", "tensorflow.convert_to_tensor", "model.se3_to_components", "tf.constant.get_shape", "tensorflow.TensorShape"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.model.rmse", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.model.get_cost", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.model.se3_to_components", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.get_shape"], ["", "def", "loss_", "(", "logits", ",", "labels", ")", ":", "\n", "    ", "components", "=", "tf", ".", "Variable", "(", "[", "]", ")", "\n", "i", "=", "tf", ".", "constant", "(", "0", ")", "\n", "while_condition", "=", "lambda", "i", ",", "p", ":", "tf", ".", "less", "(", "i", ",", "logits", ".", "shape", "[", "0", "]", ")", "\n", "\n", "def", "body", "(", "i", ",", "pred_components", ")", ":", "\n", "        ", "p_matrix", "=", "tf", ".", "reshape", "(", "logits", "[", "i", "]", ",", "[", "3", ",", "4", "]", ")", "\n", "cost", "=", "get_cost", "(", "p_matrix", ")", "\n", "res", "=", "tf", ".", "concat", "(", "[", "pred_components", ",", "se3_to_components", "(", "p_matrix", ")", "]", ",", "0", ")", "\n", "return", "i", "+", "1", ",", "res", "\n", "\n", "", "r", ",", "pred_components", "=", "tf", ".", "while_loop", "(", "while_condition", ",", "body", ",", "[", "i", ",", "components", "]", ",", "shape_invariants", "=", "[", "i", ".", "get_shape", "(", ")", ",", "\n", "tf", ".", "TensorShape", "(", "\n", "[", "None", "]", ")", "]", ")", "\n", "return", "rmse", "(", "labels", ",", "tf", ".", "convert_to_tensor", "(", "pred_components", ")", ")", "# + cost", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.model.get_cost": [[209, 215], ["tensorflow.matmul", "tensorflow.eye", "model.euclidean_distance"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.model.euclidean_distance"], ["", "def", "get_cost", "(", "pred", ")", ":", "\n", "    ", "r_matrix", "=", "pred", "[", ":", "3", ",", ":", "3", "]", "\n", "n_id", "=", "tf", ".", "matmul", "(", "r_matrix", ",", "r_matrix", ",", "transpose_b", "=", "True", ")", "\n", "identity", "=", "tf", ".", "eye", "(", "3", ")", "\n", "alpha", "=", "1", "\n", "return", "euclidean_distance", "(", "n_id", ",", "identity", ")", "*", "alpha", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.model.se3_to_components": [[217, 224], ["tensorflow.transpose", "model.so3_to_euler", "tensorflow.concat"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.model.so3_to_euler"], ["", "def", "se3_to_components", "(", "se3", ")", ":", "\n", "# xyzrpy[0:3]", "\n", "    ", "xyz", "=", "tf", ".", "transpose", "(", "se3", "[", "0", ":", "3", ",", "3", "]", ")", "# .transpose()", "\n", "# xyzrpy[3:6] \\", "\n", "rpy", "=", "so3_to_euler", "(", "se3", "[", "0", ":", "3", ",", "0", ":", "3", "]", ")", "\n", "\n", "return", "tf", ".", "concat", "(", "[", "xyz", ",", "rpy", "]", ",", "0", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.model.euler_to_so3": [[226, 251], ["tensorflow.stack", "tensorflow.stack", "tensorflow.stack", "tensorflow.matmul", "tensorflow.matmul", "tensorflow.stack", "tensorflow.stack", "tensorflow.stack", "tensorflow.stack", "tensorflow.stack", "tensorflow.stack", "tensorflow.stack", "tensorflow.stack", "tensorflow.stack", "tensorflow.cos", "tensorflow.negative", "tensorflow.sin", "tensorflow.cos", "tensorflow.cos", "tensorflow.sin", "tensorflow.negative", "tensorflow.cos", "tensorflow.cos", "tensorflow.negative", "tensorflow.sin", "tensorflow.cos", "tensorflow.sin", "tensorflow.sin", "tensorflow.sin"], "function", ["None"], ["", "def", "euler_to_so3", "(", "rpy", ")", ":", "\n", "    ", "\"\"\"Converts Euler angles to an SO3 rotation matrix.\n\n    Args:\n        rpy (list[float]): Euler angles (in radians). Must have three components.\n\n    Returns:\n        numpy.matrixlib.defmatrix.matrix: 3x3 SO3 rotation matrix\n\n    Raises:\n        ValueError: if `len(rpy) != 3`.\n\n    \"\"\"", "\n", "\n", "R_x", "=", "tf", ".", "stack", "(", "[", "tf", ".", "stack", "(", "[", "1.", ",", "0.", ",", "0.", "]", ")", ",", "\n", "tf", ".", "stack", "(", "[", "0.", ",", "tf", ".", "cos", "(", "rpy", "[", "0", "]", ")", ",", "tf", ".", "negative", "(", "tf", ".", "sin", "(", "rpy", "[", "0", "]", ")", ")", "]", ")", ",", "\n", "tf", ".", "stack", "(", "[", "0.", ",", "tf", ".", "sin", "(", "rpy", "[", "0", "]", ")", ",", "tf", ".", "cos", "(", "rpy", "[", "0", "]", ")", "]", ")", "]", ")", "\n", "R_y", "=", "tf", ".", "stack", "(", "[", "tf", ".", "stack", "(", "[", "tf", ".", "cos", "(", "rpy", "[", "1", "]", ")", ",", "0.", ",", "tf", ".", "sin", "(", "rpy", "[", "1", "]", ")", "]", ")", ",", "\n", "tf", ".", "stack", "(", "[", "0.", ",", "1.", ",", "0.", "]", ")", ",", "\n", "tf", ".", "stack", "(", "[", "tf", ".", "negative", "(", "tf", ".", "sin", "(", "rpy", "[", "1", "]", ")", ")", ",", "0.", ",", "tf", ".", "cos", "(", "rpy", "[", "1", "]", ")", "]", ")", "]", ")", "\n", "R_z", "=", "tf", ".", "stack", "(", "[", "tf", ".", "stack", "(", "[", "tf", ".", "cos", "(", "rpy", "[", "2", "]", ")", ",", "tf", ".", "negative", "(", "tf", ".", "sin", "(", "rpy", "[", "2", "]", ")", ")", ",", "0.", "]", ")", ",", "\n", "tf", ".", "stack", "(", "[", "tf", ".", "sin", "(", "rpy", "[", "2", "]", ")", ",", "tf", ".", "cos", "(", "rpy", "[", "2", "]", ")", ",", "0.", "]", ")", ",", "\n", "tf", ".", "stack", "(", "[", "0.", ",", "0.", ",", "1.", "]", ")", "]", ")", "\n", "R_zyx", "=", "tf", ".", "matmul", "(", "tf", ".", "matmul", "(", "R_z", ",", "R_y", ")", ",", "R_x", ")", "\n", "return", "R_zyx", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.model.so3_to_euler": [[253, 274], ["tensorflow.atan2", "tensorflow.atan2", "tensorflow.sqrt", "model.euler_to_so3", "tensorflow.cond", "tensorflow.add", "tensorflow.atan2", "tensorflow.atan2", "print", "tensorflow.stack", "model.euler_to_so3", "tensorflow.cond", "tensorflow.pow", "tensorflow.pow", "tensorflow.reduce_sum", "tensorflow.reduce_sum", "tensorflow.constant", "tensorflow.stack", "tensorflow.subtract", "tensorflow.subtract"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.model.euler_to_so3", "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.model.euler_to_so3"], ["", "def", "so3_to_euler", "(", "so3", ")", ":", "\n", "# if so3.shape != (3, 3):", "\n", "#    raise ValueError(\"SO3 matrix must be 3x3\")", "\n", "    ", "roll", "=", "tf", ".", "atan2", "(", "so3", "[", "2", ",", "1", "]", ",", "so3", "[", "2", ",", "2", "]", ")", "\n", "yaw", "=", "tf", ".", "atan2", "(", "so3", "[", "1", ",", "0", "]", ",", "so3", "[", "0", ",", "0", "]", ")", "\n", "denom", "=", "tf", ".", "sqrt", "(", "tf", ".", "add", "(", "tf", ".", "pow", "(", "so3", "[", "0", ",", "0", "]", ",", "2", ")", ",", "tf", ".", "pow", "(", "so3", "[", "1", ",", "0", "]", ",", "2", ")", ")", ")", "\n", "pitch_poss", "=", "[", "tf", ".", "atan2", "(", "-", "so3", "[", "2", ",", "0", "]", ",", "denom", ")", ",", "tf", ".", "atan2", "(", "-", "so3", "[", "2", ",", "0", "]", ",", "-", "denom", ")", "]", "\n", "\n", "R", "=", "euler_to_so3", "(", "(", "roll", ",", "pitch_poss", "[", "0", "]", ",", "yaw", ")", ")", "\n", "\n", "def", "throw_exc", "(", ")", ":", "print", "(", "\"Error\"", ")", "\n", "\n", "# raise ValueError(\"Could not find valid pitch angle\")", "\n", "def", "true_fn", "(", ")", ":", "return", "tf", ".", "stack", "(", "[", "roll", ",", "pitch_poss", "[", "0", "]", ",", "yaw", "]", ")", "\n", "\n", "def", "false_fn", "(", ")", ":", "\n", "        ", "R", "=", "euler_to_so3", "(", "(", "roll", ",", "pitch_poss", "[", "1", "]", ",", "yaw", ")", ")", "\n", "return", "tf", ".", "cond", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "subtract", "(", "so3", ",", "R", ")", ")", ">", "MATRIX_MATCH_TOLERANCE", ",", "lambda", ":", "tf", ".", "constant", "(", "[", "1.", "]", ")", ",", "\n", "lambda", ":", "tf", ".", "stack", "(", "[", "roll", ",", "pitch_poss", "[", "1", "]", ",", "yaw", "]", ")", ")", "\n", "\n", "", "return", "tf", ".", "cond", "(", "tf", ".", "reduce_sum", "(", "tf", ".", "subtract", "(", "so3", ",", "R", ")", ")", "<", "MATRIX_MATCH_TOLERANCE", ",", "true_fn", ",", "false_fn", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.model.euclidean_distance": [[276, 278], ["tensorflow.sqrt", "tensorflow.reduce_sum", "model.squared_error"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.model.squared_error"], ["", "def", "euclidean_distance", "(", "a", ",", "b", ")", ":", "\n", "    ", "return", "tf", ".", "sqrt", "(", "tf", ".", "reduce_sum", "(", "squared_error", "(", "a", ",", "b", ")", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.model.mse_norm": [[280, 282], ["tensorflow.reduce_mean", "tensorflow.reduce_mean", "model.squared_error"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.model.squared_error"], ["", "def", "mse_norm", "(", "outputs", ",", "targets", ",", "variance", ")", ":", "\n", "    ", "return", "tf", ".", "reduce_mean", "(", "tf", ".", "reduce_mean", "(", "squared_error", "(", "outputs", ",", "targets", ")", ",", "axis", "=", "0", ")", "/", "variance", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.model.squared_error": [[284, 286], ["tensorflow.square", "tensorflow.subtract"], "function", ["None"], ["", "def", "squared_error", "(", "a", ",", "b", ")", ":", "\n", "    ", "return", "tf", ".", "square", "(", "tf", ".", "subtract", "(", "a", ",", "b", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.model.training": [[288, 311], ["tensorflow.summary.scalar", "tensorflow.train.AdamOptimizer", "tensorflow.Variable", "tensorflow.summary.scalar", "tf.train.AdamOptimizer.minimize"], "function", ["None"], ["", "def", "training", "(", "loss", ",", "learning_rate", ")", ":", "\n", "    ", "\"\"\"Sets up the training Ops.\n    Creates a summarizer to track the loss over time in TensorBoard.\n    Creates an optimizer and applies the gradients to all trainable variables.\n    The Op returned by this function is what must be passed to the\n    `sess.run()` call to cause the model to train.\n    Args:\n      loss: Loss tensor, from loss().\n      learning_rate: The learning rate to use for gradient descent.\n    Returns:\n      train_op: The Op for training.\n    \"\"\"", "\n", "# Add a scalar summary for the snapshot loss.", "\n", "tf", ".", "summary", ".", "scalar", "(", "'loss'", ",", "loss", ")", "\n", "\n", "optimizer", "=", "tf", ".", "train", ".", "AdamOptimizer", "(", "learning_rate", ")", "\n", "# Create a variable to track the global step.", "\n", "global_step", "=", "tf", ".", "Variable", "(", "0", ",", "name", "=", "'global_step'", ",", "trainable", "=", "False", ")", "\n", "# Use the optimizer to apply the gradients that minimize the loss", "\n", "# (and also increment the global step counter) as a single training step.", "\n", "tf", ".", "summary", ".", "scalar", "(", "'learning_rate'", ",", "learning_rate", ")", "\n", "train_op", "=", "optimizer", ".", "minimize", "(", "loss", ",", "global_step", "=", "global_step", ")", "\n", "return", "train_op", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.model.evaluation": [[314, 323], ["model.squared_error"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.vgg_trainable.model.squared_error"], ["", "def", "evaluation", "(", "outputs", ",", "targets", ")", ":", "\n", "    ", "\"\"\"Evaluate the quality of the logits at predicting the label.\n    Args:\n    outputs: [batch_size, NUM_CLASSES].\n    targets: [batch_size]\n    Returns:\n\n    \"\"\"", "\n", "return", "squared_error", "(", "outputs", ",", "targets", ")", "\n", "", ""]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.test.show_traj_kitti.get_cmap": [[39, 43], ["matplotlib.cm.get_cmap"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.test.show_traj_kitti.get_cmap"], ["def", "get_cmap", "(", "n", ",", "name", "=", "'hsv'", ")", ":", "\n", "    ", "'''Returns a function that maps each index in 0, 1, ..., n-1 to a distinct \n    RGB color; the keyword argument name must be a standard mpl colormap name.'''", "\n", "return", "plt", ".", "cm", ".", "get_cmap", "(", "name", ",", "n", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.test.show_traj_kitti.show": [[44, 97], ["matplotlib.figure", "matplotlib.gridspec.GridSpec", "plt.figure.add_subplot", "fig.add_subplot.imshow", "fig.add_subplot.axis", "plt.figure.add_subplot", "zip", "fig.add_subplot.scatter", "fig.add_subplot.legend", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "fig.add_subplot.set_zlabel", "poses[].mean", "poses[].mean", "poses[].mean", "fig.add_subplot.set_xlim", "fig.add_subplot.set_ylim", "fig.add_subplot.set_zlim", "matplotlib.FuncAnimation", "matplotlib.show", "fig.add_subplot.plot", "data_.append", "lines_.append", "numpy.array().max", "ax1.imshow.set_data", "zip", "fig.add_subplot.plot", "lin.set_xdata", "lin.set_ydata", "lin.set_3d_properties", "len", "numpy.array", "poses[].max", "poses[].min", "poses[].max", "poses[].min", "poses[].max", "poses[].min"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.test.show_clip.show", "home.repos.pwc.inspect_result.CIFASIS_wganvo.test.plot_traj.plot", "home.repos.pwc.inspect_result.CIFASIS_wganvo.test.plot_traj.plot"], ["", "def", "show", "(", "images", ",", "poses", ",", "pred_poses", ",", "labels", ",", "points", "=", "None", ")", ":", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "gs", "=", "gridspec", ".", "GridSpec", "(", "2", ",", "1", ",", "height_ratios", "=", "[", "1", ",", "2", "]", ")", "\n", "ax1", "=", "fig", ".", "add_subplot", "(", "gs", "[", "0", "]", ")", "\n", "artist", "=", "ax1", ".", "imshow", "(", "images", "[", "0", "]", ",", "cmap", "=", "'gray'", ")", "\n", "ax1", ".", "axis", "(", "'off'", ")", "\n", "ax2", "=", "fig", ".", "add_subplot", "(", "gs", "[", "1", "]", ",", "projection", "=", "'3d'", ")", "\n", "\n", "x", "=", "[", "]", "\n", "y", "=", "[", "]", "\n", "z", "=", "[", "]", "\n", "lin", "=", "ax2", ".", "plot", "(", "x", ",", "y", ",", "z", ",", "label", "=", "'Ground Truth'", ",", "linewidth", "=", "1.1", ")", "[", "0", "]", "\n", "data_", "=", "[", "poses", "]", "\n", "lines_", "=", "[", "lin", "]", "\n", "for", "i", ",", "label", "in", "zip", "(", "pred_poses", ",", "labels", ")", ":", "\n", "        ", "lin_pred", "=", "ax2", ".", "plot", "(", "x", ",", "y", ",", "z", ",", "label", "=", "label", ",", "linewidth", "=", "1.1", ")", "[", "0", "]", "\n", "data_", ".", "append", "(", "i", ")", "\n", "lines_", ".", "append", "(", "lin_pred", ")", "\n", "\n", "\n", "", "cloud", "=", "ax2", ".", "scatter", "(", "x", ",", "y", ",", "z", ",", "c", "=", "\"red\"", ",", "s", "=", "0.1", ")", "\n", "# data_.append(points)", "\n", "# lines_.append(cloud)", "\n", "ax2", ".", "legend", "(", ")", "\n", "ax2", ".", "set_xlabel", "(", "'X (m)'", ")", "\n", "ax2", ".", "set_ylabel", "(", "'Y (m)'", ")", "\n", "ax2", ".", "set_zlabel", "(", "'Z (m)'", ")", "\n", "\n", "max_range", "=", "np", ".", "array", "(", "[", "poses", "[", ":", ",", "0", "]", ".", "max", "(", ")", "-", "poses", "[", ":", ",", "0", "]", ".", "min", "(", ")", ",", "poses", "[", ":", ",", "1", "]", ".", "max", "(", ")", "-", "poses", "[", ":", ",", "1", "]", ".", "min", "(", ")", ",", "\n", "poses", "[", ":", ",", "2", "]", ".", "max", "(", ")", "-", "poses", "[", ":", ",", "2", "]", ".", "min", "(", ")", "]", ")", ".", "max", "(", ")", "/", "2.0", "\n", "mean_x", "=", "poses", "[", ":", ",", "0", "]", ".", "mean", "(", ")", "\n", "mean_y", "=", "poses", "[", ":", ",", "1", "]", ".", "mean", "(", ")", "\n", "mean_z", "=", "poses", "[", ":", ",", "2", "]", ".", "mean", "(", ")", "\n", "\n", "ax2", ".", "set_xlim", "(", "mean_x", "-", "max_range", ",", "mean_x", "+", "max_range", ")", "\n", "ax2", ".", "set_ylim", "(", "mean_y", "-", "max_range", ",", "mean_y", "+", "max_range", ")", "\n", "ax2", ".", "set_zlim", "(", "mean_z", "-", "max_range", ",", "mean_z", "+", "max_range", ")", "\n", "\n", "def", "update", "(", "num", ",", "img", ",", "datalines", ",", "lines", ",", "scatter", ",", "points", ")", ":", "\n", "        ", "artist", ".", "set_data", "(", "img", "[", "num", "]", ")", "\n", "idx", "=", "num", "+", "1", "\n", "for", "lin", ",", "data", "in", "zip", "(", "lines", ",", "datalines", ")", ":", "\n", "            ", "lin", ".", "set_xdata", "(", "data", "[", ":", "idx", ",", "0", "]", ")", "\n", "lin", ".", "set_ydata", "(", "data", "[", ":", "idx", ",", "1", "]", ")", "\n", "lin", ".", "set_3d_properties", "(", "data", "[", ":", "idx", ",", "2", "]", ")", "\n", "#scatter._offsets3d = (points[num,0], points[num,1], points[num,2])", "\n", "", "return", "lines", "\n", "\n", "#assert len(images) == len(poses)", "\n", "# FIXME originalmente era frames = len(pred_poses)", "\n", "", "ani", "=", "animation", ".", "FuncAnimation", "(", "fig", ",", "update", ",", "frames", "=", "len", "(", "poses", ")", ",", "fargs", "=", "(", "images", ",", "data_", ",", "lines_", ",", "cloud", ",", "points", ")", ",", "\n", "interval", "=", "10", ",", "blit", "=", "False", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.test.show_traj_kitti.main": [[98, 126], ["input_data.read_data_sets", "numpy.loadtxt", "last.reshape.reshape", "numpy.append", "print", "print", "poses.reshape.reshape", "show_traj_kitti.show", "len", "len", "numpy.loadtxt", "pose_pred.reshape.reshape", "poses_pred.append", "len", "len"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.test.show_clip.show"], ["", "def", "main", "(", ")", ":", "\n", "    ", "images", ",", "_", ",", "_", ",", "_", ",", "points", "=", "read_data_sets", "(", "FLAGS", ".", "img_file", ")", "\n", "poses", "=", "np", ".", "loadtxt", "(", "FLAGS", ".", "poses", ",", "delimiter", "=", "\" \"", ")", "\n", "assert", "len", "(", "FLAGS", ".", "poses_pred", ")", "==", "len", "(", "FLAGS", ".", "labels", ")", ",", "\"Num. of pose files and num. of labels must be the same\"", "\n", "poses_pred", "=", "[", "]", "\n", "for", "pose_file", "in", "FLAGS", ".", "poses_pred", ":", "\n", "        ", "pose_pred", "=", "np", ".", "loadtxt", "(", "pose_file", ",", "delimiter", "=", "\" \"", ")", "\n", "pose_pred", "=", "pose_pred", ".", "reshape", "(", "(", "-", "1", ",", "3", ",", "4", ")", ")", "\n", "pose_pred", "=", "pose_pred", "[", ":", ",", "0", ":", "3", ",", "3", "]", "\n", "poses_pred", ".", "append", "(", "pose_pred", ")", "\n", "\n", "# points = None", "\n", "# if FLAGS.points != None:", "\n", "#     points = np.load(FLAGS.points)", "\n", "\n", "", "last", "=", "images", "[", "-", "1", "]", "[", "...", ",", "1", "]", "\n", "last", "=", "last", ".", "reshape", "(", "(", "-", "1", ",", "last", ".", "shape", "[", "0", "]", ",", "last", ".", "shape", "[", "1", "]", ")", ")", "\n", "im", "=", "np", ".", "append", "(", "images", "[", "...", ",", "0", "]", ",", "last", ",", "axis", "=", "0", ")", "\n", "print", "(", "len", "(", "im", ")", ")", "\n", "print", "(", "len", "(", "poses", ")", ")", "\n", "#assert len(im) == len(poses)", "\n", "\n", "poses", "=", "poses", ".", "reshape", "(", "(", "-", "1", ",", "3", ",", "4", ")", ")", "\n", "poses", "=", "poses", "[", ":", ",", "0", ":", "3", ",", "3", "]", "\n", "# print(poses.shape)", "\n", "#print(poses_pred.shape)", "\n", "# print(points.shape)", "\n", "show", "(", "im", ",", "poses", ",", "poses_pred", ",", "FLAGS", ".", "labels", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.test.test_model.test_model": [[38, 75], ["tensorflow.Session", "tensorflow.train.import_meta_graph", "tf.train.import_meta_graph.restore", "tensorflow.get_default_graph", "tf.get_default_graph.get_tensor_by_name", "tf.get_default_graph.get_tensor_by_name", "tf.get_default_graph.get_tensor_by_name", "tf.get_default_graph.get_tensor_by_name", "time.time", "input_data.read_data_sets", "time.time", "input_data.DataSet", "eval_utils.infer_relative_poses", "time.time", "print", "print", "print", "eval_utils.plot_frames_vs_abs_distance", "numpy.array", "numpy.savetxt", "numpy.savetxt", "numpy.savetxt", "eval_utils.get_absolute_poses", "eval_utils.get_absolute_poses", "numpy.savetxt", "numpy.savetxt", "zip", "os.path.join", "os.path.join", "relative_poses_prediction.reshape", "os.path.join", "relative_poses_target.reshape", "os.path.join", "eval_utils.get_absolute_poses.reshape", "os.path.join", "eval_utils.get_absolute_poses.reshape"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.None.eval_utils.infer_relative_poses", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.eval_utils.plot_frames_vs_abs_distance", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.eval_utils.get_absolute_poses", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.eval_utils.get_absolute_poses"], ["def", "test_model", "(", "model_name", ",", "data_dir", ",", "output_dir", ",", "batch_size", ")", ":", "\n", "    ", "sess", "=", "tf", ".", "Session", "(", ")", "\n", "saver", "=", "tf", ".", "train", ".", "import_meta_graph", "(", "model_name", "+", "\".meta\"", ")", "\n", "# print(model_name)", "\n", "# inverse_intrinsic_matrix = np.linalg.inv(intrinsic_matrix)", "\n", "saver", ".", "restore", "(", "sess", ",", "model_name", ")", "# tf.train.latest_checkpoint('./'))", "\n", "graph", "=", "tf", ".", "get_default_graph", "(", ")", "\n", "outputs", "=", "graph", ".", "get_tensor_by_name", "(", "\"outputs:0\"", ")", "\n", "targets_placeholder", "=", "graph", ".", "get_tensor_by_name", "(", "\"targets_placeholder:0\"", ")", "\n", "images_placeholder", "=", "graph", ".", "get_tensor_by_name", "(", "\"images_placeholder:0\"", ")", "\n", "train_mode", "=", "graph", ".", "get_tensor_by_name", "(", "\"train_mode:0\"", ")", "# FIXME Podria arrojar exception", "\n", "start_loading_time", "=", "time", ".", "time", "(", ")", "\n", "images", ",", "targets", ",", "_", ",", "groups", ",", "_", "=", "read_data_sets", "(", "data_dir", ")", "\n", "start_infer_time", "=", "time", ".", "time", "(", ")", "\n", "dataset", "=", "DataSet", "(", "images", ",", "targets", ",", "groups", ",", "fake_data", "=", "False", ")", "\n", "relative_poses_prediction", ",", "relative_poses_target", "=", "infer_relative_poses", "(", "sess", ",", "dataset", ",", "batch_size", ",", "\n", "images_placeholder", ",", "\n", "outputs", ",", "\n", "targets_placeholder", ",", "train_mode", ")", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "print", "(", "\"Inference time: {}\"", ".", "format", "(", "end_time", "-", "start_infer_time", ")", ")", "\n", "print", "(", "\"Load Images + Inference Time: {}\"", ".", "format", "(", "end_time", "-", "start_loading_time", ")", ")", "\n", "print", "(", "\"Images in the seq: {}\"", ".", "format", "(", "relative_poses_prediction", ".", "shape", "[", "0", "]", ")", ")", "\n", "frames", ",", "abs_distance", "=", "plot_frames_vs_abs_distance", "(", "relative_poses_prediction", ",", "relative_poses_target", ",", "dataset", ",", "\n", "output_dir", ",", "save_txt", "=", "True", ",", "plot", "=", "True", ")", "\n", "points", "=", "np", ".", "array", "(", "zip", "(", "frames", ",", "abs_distance", ")", ")", "\n", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"frames_vs_abs_distance.txt\"", ")", ",", "points", ")", "\n", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"relative_poses_prediction.txt\"", ")", ",", "relative_poses_prediction", ".", "reshape", "(", "-", "1", ",", "12", ")", ",", "\n", "delimiter", "=", "' '", ")", "\n", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"relative_poses_target.txt\"", ")", ",", "relative_poses_target", ".", "reshape", "(", "-", "1", ",", "12", ")", ",", "\n", "delimiter", "=", "' '", ")", "\n", "absolute_poses_prediction", "=", "get_absolute_poses", "(", "relative_poses_prediction", ")", "\n", "absolute_poses_target", "=", "get_absolute_poses", "(", "relative_poses_target", ")", "\n", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"absolute_poses_prediction.txt\"", ")", ",", "\n", "absolute_poses_prediction", ".", "reshape", "(", "-", "1", ",", "12", ")", ",", "delimiter", "=", "' '", ")", "\n", "np", ".", "savetxt", "(", "os", ".", "path", ".", "join", "(", "output_dir", ",", "\"absolute_poses_target.txt\"", ")", ",", "absolute_poses_target", ".", "reshape", "(", "-", "1", ",", "12", ")", ",", "\n", "delimiter", "=", "' '", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.test.test_model.main": [[77, 80], ["test_model.test_model"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.test.test_model.test_model"], ["", "def", "main", "(", "_", ")", ":", "\n", "# intrinsic_matrix = np.matrix(np.loadtxt(FLAGS.intrinsics_path, delimiter=' '))", "\n", "    ", "test_model", "(", "FLAGS", ".", "model_name", ",", "FLAGS", ".", "data_dir", ",", "FLAGS", ".", "output_dir", ",", "FLAGS", ".", "batch_size", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.test.plot_points.plot": [[27, 34], ["matplotlib.subplots", "ax.plot", "ax.set_xlabel", "ax.set_ylabel"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.test.plot_traj.plot"], ["def", "plot", "(", "X_axis", ",", "Y_axis", ",", "xlabel", ",", "ylabel", ")", ":", "\n", "    ", "fig", ",", "ax", "=", "plt", ".", "subplots", "(", ")", "\n", "ax", ".", "plot", "(", "X_axis", ",", "Y_axis", ",", "'r.'", ")", "\n", "ax", ".", "set_xlabel", "(", "xlabel", ")", "\n", "ax", ".", "set_ylabel", "(", "ylabel", ")", "\n", "#plt.show()", "\n", "return", "fig", ",", "ax", "\n", "#", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.test.plot_points.main": [[36, 42], ["numpy.loadtxt", "plot_points.plot", "fig.savefig", "os.path.join"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.test.plot_traj.plot"], ["", "def", "main", "(", "_", ")", ":", "\n", "    ", "points", "=", "np", ".", "loadtxt", "(", "FLAGS", ".", "file", ",", "delimiter", "=", "' '", ")", "\n", "X_axis", "=", "points", "[", ":", ",", "0", "]", "\n", "Y_axis", "=", "points", "[", ":", ",", "1", "]", "\n", "fig", ",", "ax", "=", "plot", "(", "X_axis", ",", "Y_axis", ",", "\"frames\"", ",", "\"distance(m)\"", ")", "\n", "fig", ".", "savefig", "(", "os", ".", "path", ".", "join", "(", "FLAGS", ".", "output_dir", ",", "'frames_vs_dist.png'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.test.plot_traj.read": [[26, 28], ["numpy.genfromtxt"], "function", ["None"], ["def", "read", "(", "filename", ",", "delimiter", "=", "','", ")", ":", "\n", "    ", "return", "np", ".", "genfromtxt", "(", "filename", ",", "delimiter", "=", "delimiter", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.test.plot_traj.plot": [[30, 39], ["matplotlib.figure", "plt.figure.add_subplot", "fig.add_subplot.plot", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "fig.add_subplot.set_zlabel", "matplotlib.legend", "matplotlib.show"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.test.plot_traj.plot", "home.repos.pwc.inspect_result.CIFASIS_wganvo.test.show_clip.show"], ["", "def", "plot", "(", "array", ")", ":", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ",", "projection", "=", "'3d'", ")", "# 111 means \"1x1 grid, first subplot\"", "\n", "p", "=", "ax", ".", "plot", "(", "array", "[", ":", ",", "0", "]", ",", "array", "[", ":", ",", "1", "]", ",", "array", "[", ":", ",", "2", "]", ",", "label", "=", "'target'", ")", "\n", "ax", ".", "set_xlabel", "(", "'x'", ")", "\n", "ax", ".", "set_ylabel", "(", "'y'", ")", "\n", "ax", ".", "set_zlabel", "(", "'z'", ")", "\n", "plt", ".", "legend", "(", ")", "\n", "plt", ".", "show", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.test.plot_traj.main": [[41, 64], ["plot_traj.read", "numpy.array", "len", "numpy.empty", "numpy.empty", "numpy.savetxt", "plot_traj.plot", "transformations.euler_matrix", "len"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.test.plot_traj.read", "home.repos.pwc.inspect_result.CIFASIS_wganvo.test.plot_traj.plot", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.transformations.euler_matrix"], ["", "def", "main", "(", ")", ":", "\n", "    ", "import", "transformations", "\n", "data", "=", "read", "(", "'vo.csv'", ")", "\n", "data", "=", "data", "[", "1", ":", "len", "(", "data", ")", ",", "2", ":", "8", "]", "\n", "\n", "current", "=", "np", ".", "array", "(", "[", "0.", ",", "0.", ",", "0.", "]", ")", "# .transpose()", "\n", "# current = np.matrix(np.identity(4))", "\n", "num_examples", "=", "len", "(", "data", ")", "\n", "ts", "=", "np", ".", "empty", "(", "(", "num_examples", ",", "3", ")", ")", "\n", "poses", "=", "np", ".", "empty", "(", "(", "num_examples", ",", "12", ")", ")", "\n", "i", "=", "0", "\n", "for", "t", "in", "data", ":", "\n", "# Devuelve una matriz 4x4", "\n", "# t[3] = roll, t[4] = pitch, t[5] = yaw", "\n", "        ", "T", "=", "transformations", ".", "euler_matrix", "(", "t", "[", "3", "]", ",", "t", "[", "4", "]", ",", "t", "[", "5", "]", ",", "'sxyz'", ")", "\n", "T", "[", "0", ":", "3", ",", "3", "]", "=", "t", "[", "0", ":", "3", "]", "\n", "current", "=", "t", "[", "0", ":", "3", "]", "+", "current", "# np.linalg.inv(T) *current   #np.linalg.inv(T) * current", "\n", "ts", "[", "i", "]", "=", "current", "# [0:3,3].transpose()", "\n", "# poses[i] = current[0:3,:].reshape(12)", "\n", "i", "+=", "1", "\n", "\n", "", "np", ".", "savetxt", "(", "\"poses.txt\"", ",", "poses", ",", "delimiter", "=", "\" \"", ")", "\n", "plot", "(", "ts", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.test.show_clip.show": [[31, 38], ["matplotlib.imshow", "plt.imshow.set_data", "matplotlib.xticks", "matplotlib.yticks", "matplotlib.pause"], "function", ["None"], ["def", "show", "(", "images", ")", ":", "\n", "    ", "artist", "=", "plt", ".", "imshow", "(", "images", "[", "0", "]", ",", "cmap", "=", "'gray'", ")", "\n", "for", "img", "in", "images", ":", "\n", "        ", "artist", ".", "set_data", "(", "img", ")", "\n", "plt", ".", "xticks", "(", "[", "]", ")", "\n", "plt", ".", "yticks", "(", "[", "]", ")", "\n", "plt", ".", "pause", "(", "0.01", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.test.show_clip.main": [[39, 42], ["input_data.read_data_sets", "show_clip.show"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.test.show_clip.show"], ["", "", "def", "main", "(", ")", ":", "\n", "    ", "images", ",", "_", ",", "_", ",", "_", ",", "_", "=", "read_data_sets", "(", "FLAGS", ".", "img_file", ")", "\n", "show", "(", "images", "[", "...", ",", "1", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.test.plotHelpers.plotVsTime1": [[31, 43], ["matplotlib.figure", "plt.figure.add_subplot", "fig.add_subplot.plot", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "matplotlib.grid", "plt.figure.suptitle"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.test.plot_traj.plot"], ["def", "plotVsTime1", "(", "time", ",", "xs", ",", "title", "=", "\"\"", ",", "xlabel", "=", "None", ",", "ylabel", "=", "None", ")", ":", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ")", "\n", "\n", "p", ",", "=", "ax", ".", "plot", "(", "time", ",", "xs", ")", "\n", "\n", "ax", ".", "set_xlabel", "(", "xlabel", ")", "\n", "ax", ".", "set_ylabel", "(", "ylabel", ")", "\n", "\n", "plt", ".", "grid", "(", ")", "\n", "\n", "fig", ".", "suptitle", "(", "title", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.test.plotHelpers.plotVsTime3": [[45, 64], ["matplotlib.subplots", "ax_x.plot", "ax_y.plot", "ax_z.plot", "matplotlib.setp", "ax_z.set_xlabel", "ax_x.grid", "ax_y.grid", "ax_z.grid", "fig.suptitle", "a.get_xticklabels"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.test.plot_traj.plot", "home.repos.pwc.inspect_result.CIFASIS_wganvo.test.plot_traj.plot", "home.repos.pwc.inspect_result.CIFASIS_wganvo.test.plot_traj.plot"], ["", "def", "plotVsTime3", "(", "time", ",", "xs", ",", "ys", ",", "zs", ",", "title", "=", "\"\"", ")", ":", "\n", "    ", "fig", ",", "(", "ax_x", ",", "ax_y", ",", "ax_z", ")", "=", "plt", ".", "subplots", "(", "3", ",", "sharex", "=", "True", ",", "sharey", "=", "True", ")", "\n", "\n", "px", ",", "=", "ax_x", ".", "plot", "(", "time", ",", "xs", ")", "\n", "py", ",", "=", "ax_y", ".", "plot", "(", "time", ",", "ys", ")", "\n", "pz", ",", "=", "ax_z", ".", "plot", "(", "time", ",", "zs", ")", "\n", "\n", "# Fine-tune figure; make subplots close to each other and hide x ticks for", "\n", "# all but bottom plot.", "\n", "# fig.subplots_adjust(hspace=0)", "\n", "plt", ".", "setp", "(", "[", "a", ".", "get_xticklabels", "(", ")", "for", "a", "in", "fig", ".", "axes", "[", ":", "-", "1", "]", "]", ",", "visible", "=", "False", ")", "\n", "\n", "ax_z", ".", "set_xlabel", "(", "\"time (s)\"", ")", "\n", "\n", "ax_x", ".", "grid", "(", "True", ")", "\n", "ax_y", ".", "grid", "(", "True", ")", "\n", "ax_z", ".", "grid", "(", "True", ")", "\n", "\n", "fig", ".", "suptitle", "(", "title", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.test.plotHelpers.plotVsTime4": [[66, 86], ["matplotlib.subplots", "ax_x.plot", "ax_y.plot", "ax_z.plot", "ax_avg.plot", "fig.subplots_adjust", "matplotlib.setp", "ax_avg.set_xlabel", "matplotlib.grid", "fig.suptitle", "fig.tight_layout", "numpy.linalg.norm", "numpy.array", "a.get_xticklabels"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.test.plot_traj.plot", "home.repos.pwc.inspect_result.CIFASIS_wganvo.test.plot_traj.plot", "home.repos.pwc.inspect_result.CIFASIS_wganvo.test.plot_traj.plot", "home.repos.pwc.inspect_result.CIFASIS_wganvo.test.plot_traj.plot", "home.repos.pwc.inspect_result.CIFASIS_wganvo.None.tfquaternions.Quaternion.norm"], ["", "def", "plotVsTime4", "(", "time", ",", "xs", ",", "ys", ",", "zs", ",", "title", "=", "\"\"", ")", ":", "\n", "    ", "fig", ",", "(", "ax_x", ",", "ax_y", ",", "ax_z", ",", "ax_avg", ")", "=", "plt", ".", "subplots", "(", "4", ",", "sharex", "=", "True", ",", "sharey", "=", "True", ")", "\n", "\n", "px", ",", "=", "ax_x", ".", "plot", "(", "time", ",", "xs", ")", "\n", "py", ",", "=", "ax_y", ".", "plot", "(", "time", ",", "ys", ")", "\n", "pz", ",", "=", "ax_z", ".", "plot", "(", "time", ",", "zs", ")", "\n", "p_avg", ",", "=", "ax_avg", ".", "plot", "(", "time", ",", "np", ".", "linalg", ".", "norm", "(", "np", ".", "array", "(", "[", "xs", ",", "ys", ",", "zs", "]", ")", ",", "axis", "=", "0", ")", ")", "\n", "\n", "# Fine-tune figure; make subplots close to each other and hide x ticks for", "\n", "# all but bottom plot.", "\n", "fig", ".", "subplots_adjust", "(", "hspace", "=", "0", ")", "\n", "plt", ".", "setp", "(", "[", "a", ".", "get_xticklabels", "(", ")", "for", "a", "in", "fig", ".", "axes", "[", ":", "-", "1", "]", "]", ",", "visible", "=", "False", ")", "\n", "\n", "ax_avg", ".", "set_xlabel", "(", "\"time (s)\"", ")", "\n", "\n", "plt", ".", "grid", "(", ")", "\n", "\n", "fig", ".", "suptitle", "(", "title", ")", "\n", "\n", "fig", ".", "tight_layout", "(", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.test.plotHelpers.plotPath3D": [[88, 121], ["matplotlib.figure", "plt.figure.add_subplot", "fig.add_subplot.plot", "X.mean", "Y.mean", "Z.mean", "fig.add_subplot.set_xlim", "fig.add_subplot.set_ylim", "fig.add_subplot.set_zlim", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "fig.add_subplot.set_zlabel", "fig.add_subplot.set_title", "numpy.array().max", "numpy.array", "X.max", "X.min", "Y.max", "Y.min", "Z.max", "Z.min"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.test.plot_traj.plot"], ["", "def", "plotPath3D", "(", "X", ",", "Y", ",", "Z", ",", "title", ")", ":", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ",", "projection", "=", "'3d'", ")", "\n", "\n", "ax", ".", "plot", "(", "X", ",", "Y", ",", "Z", ")", "\n", "\n", "# draw a point", "\n", "# ~ ax.scatter([0],[0],[0],color=\"black\",s=1)", "\n", "\n", "# draw cube", "\n", "# ~ r = [-1, 1]", "\n", "# ~ for s, e in combinations(np.array(list(product(r,r,r))), 2):", "\n", "# ~ if np.sum(np.abs(s-e)) == r[1]-r[0]:", "\n", "# ~ ax.plot3D(*zip(s,e), color=\"black\")", "\n", "\n", "# simulate equal aspect ratio", "\n", "# ~ \"\"\"", "\n", "max_range", "=", "np", ".", "array", "(", "[", "X", ".", "max", "(", ")", "-", "X", ".", "min", "(", ")", ",", "Y", ".", "max", "(", ")", "-", "Y", ".", "min", "(", ")", ",", "Z", ".", "max", "(", ")", "-", "Z", ".", "min", "(", ")", "]", ")", ".", "max", "(", ")", "/", "2.0", "\n", "mean_x", "=", "X", ".", "mean", "(", ")", "\n", "mean_y", "=", "Y", ".", "mean", "(", ")", "\n", "mean_z", "=", "Z", ".", "mean", "(", ")", "\n", "ax", ".", "set_xlim", "(", "mean_x", "-", "max_range", ",", "mean_x", "+", "max_range", ")", "\n", "ax", ".", "set_ylim", "(", "mean_y", "-", "max_range", ",", "mean_y", "+", "max_range", ")", "\n", "ax", ".", "set_zlim", "(", "mean_z", "-", "max_range", ",", "mean_z", "+", "max_range", ")", "\n", "# ~ \"\"\"", "\n", "# Set axis labels", "\n", "\n", "xLabel", "=", "ax", ".", "set_xlabel", "(", "'x'", ")", "\n", "yLabel", "=", "ax", ".", "set_ylabel", "(", "'y'", ")", "\n", "zLabel", "=", "ax", ".", "set_zlabel", "(", "'z'", ")", "\n", "\n", "ax", ".", "set_title", "(", "title", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.test.plotHelpers.plotPaths3D": [[123, 169], ["matplotlib.figure", "plt.figure.add_subplot", "zip", "[].mean", "[].mean", "[].mean", "fig.add_subplot.set_xlim", "fig.add_subplot.set_ylim", "fig.add_subplot.set_zlim", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "fig.add_subplot.set_zlabel", "fig.add_subplot.get_legend_handles_labels", "fig.add_subplot.legend", "len", "len", "len", "len", "fig.add_subplot.plot", "numpy.array().max", "fig.add_subplot.set_title", "numpy.array", "[].max", "[].min", "[].max", "[].min", "[].max", "[].min"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.test.plot_traj.plot"], ["", "def", "plotPaths3D", "(", "paths", ",", "labels", ",", "colors", ",", "title", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    \"\"\"", "\n", "\n", "assert", "(", "len", "(", "paths", ")", "==", "len", "(", "labels", ")", ")", "\n", "assert", "(", "len", "(", "paths", ")", "<=", "len", "(", "colors", ")", ")", "\n", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ",", "projection", "=", "'3d'", ")", "\n", "\n", "for", "(", "X", ",", "Y", ",", "Z", ")", ",", "label", ",", "color", "in", "zip", "(", "paths", ",", "labels", ",", "colors", ")", ":", "\n", "        ", "ax", ".", "plot", "(", "X", ",", "Y", ",", "Z", ",", "label", "=", "label", ",", "color", "=", "color", ")", "\n", "\n", "# draw a point", "\n", "# ~ ax.scatter([0],[0],[0],color=\"black\",s=1)", "\n", "\n", "# draw cube", "\n", "# ~ r = [-1, 1]", "\n", "# ~ for s, e in combinations(np.array(list(product(r,r,r))), 2):", "\n", "# ~ if np.sum(np.abs(s-e)) == r[1]-r[0]:", "\n", "# ~ ax.plot3D(*zip(s,e), color=\"black\")", "\n", "\n", "# simulate equal aspect ratio", "\n", "# assume first path is ground truth", "\n", "# \"\"\"", "\n", "", "max_range", "=", "np", ".", "array", "(", "[", "paths", "[", "0", "]", "[", "0", "]", ".", "max", "(", ")", "-", "paths", "[", "0", "]", "[", "0", "]", ".", "min", "(", ")", ",", "paths", "[", "0", "]", "[", "1", "]", ".", "max", "(", ")", "-", "paths", "[", "0", "]", "[", "1", "]", ".", "min", "(", ")", ",", "\n", "paths", "[", "0", "]", "[", "2", "]", ".", "max", "(", ")", "-", "paths", "[", "0", "]", "[", "2", "]", ".", "min", "(", ")", "]", ")", ".", "max", "(", ")", "/", "2.0", "\n", "mean_x", "=", "paths", "[", "0", "]", "[", "0", "]", ".", "mean", "(", ")", "\n", "mean_y", "=", "paths", "[", "0", "]", "[", "1", "]", ".", "mean", "(", ")", "\n", "mean_z", "=", "paths", "[", "0", "]", "[", "2", "]", ".", "mean", "(", ")", "\n", "ax", ".", "set_xlim", "(", "mean_x", "-", "max_range", ",", "mean_x", "+", "max_range", ")", "\n", "ax", ".", "set_ylim", "(", "mean_y", "-", "max_range", ",", "mean_y", "+", "max_range", ")", "\n", "ax", ".", "set_zlim", "(", "mean_z", "-", "max_range", ",", "mean_z", "+", "max_range", ")", "\n", "# \"\"\"", "\n", "# Set axis labels", "\n", "\n", "xLabel", "=", "ax", ".", "set_xlabel", "(", "'x (m)'", ")", "\n", "yLabel", "=", "ax", ".", "set_ylabel", "(", "'y (m)'", ")", "\n", "zLabel", "=", "ax", ".", "set_zlabel", "(", "'z (m)'", ")", "\n", "\n", "handles", ",", "labels", "=", "ax", ".", "get_legend_handles_labels", "(", ")", "\n", "ax", ".", "legend", "(", "handles", ",", "labels", ")", "\n", "\n", "if", "title", ":", "\n", "        ", "ax", ".", "set_title", "(", "title", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.test.plotHelpers.plotPaths2D": [[171, 207], ["matplotlib.figure", "plt.figure.add_subplot", "zip", "matplotlib.gca().set_aspect", "fig.add_subplot.get_legend_handles_labels", "fig.add_subplot.legend", "len", "len", "len", "len", "numpy.loadtxt", "fig.add_subplot.scatter", "fig.add_subplot.plot", "fig.add_subplot.plot", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "fig.add_subplot.grid", "matplotlib.gca"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.test.plot_traj.plot", "home.repos.pwc.inspect_result.CIFASIS_wganvo.test.plot_traj.plot"], ["", "", "def", "plotPaths2D", "(", "paths", ",", "labels", ",", "colors", ",", "xlabel", "=", "None", ",", "ylabel", "=", "None", ",", "cloud_file", "=", "None", ",", "grid", "=", "None", ",", "save_filename", "=", "None", ")", ":", "\n", "    ", "\"\"\"\n    \"\"\"", "\n", "\n", "assert", "(", "len", "(", "paths", ")", "==", "len", "(", "labels", ")", ")", "\n", "assert", "(", "len", "(", "paths", ")", "<=", "len", "(", "colors", ")", ")", "\n", "\n", "# Plot the 2D trajectory (coordinate z = 0)", "\n", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ")", "\n", "\n", "if", "(", "cloud_file", ")", ":", "\n", "        ", "cloud", "=", "np", ".", "loadtxt", "(", "cloud_file", ")", "\n", "ax", ".", "scatter", "(", "cloud", "[", ":", ",", "0", "]", ",", "cloud", "[", ":", ",", "1", "]", ",", "s", "=", "1", ",", "color", "=", "'0.1'", ")", "\n", "\n", "", "for", "(", "X", ",", "Y", ")", ",", "label", ",", "color", "in", "zip", "(", "paths", ",", "labels", ",", "colors", ")", ":", "\n", "        ", "ax", ".", "plot", "(", "X", ",", "Y", ",", "label", "=", "label", ",", "color", "=", "color", ",", "linewidth", "=", "1.5", ")", "\n", "ax", ".", "plot", "(", "X", "[", "0", "]", ",", "Y", "[", "0", "]", ",", "marker", "=", "'v'", ",", "alpha", "=", "1", ",", "markersize", "=", "8", ",", "color", "=", "color", ")", "\n", "\n", "# enable for KITTI 00 dataset", "\n", "# ~ plt.xlim(-10, 50)", "\n", "# ~ plt.ylim(0, 30)", "\n", "\n", "", "plt", ".", "gca", "(", ")", ".", "set_aspect", "(", "'equal'", ",", "adjustable", "=", "'box'", ")", "\n", "\n", "if", "xlabel", ":", "\n", "        ", "ax", ".", "set_xlabel", "(", "xlabel", ")", "\n", "\n", "", "if", "ylabel", ":", "\n", "        ", "ax", ".", "set_ylabel", "(", "ylabel", ")", "\n", "\n", "", "handles", ",", "labels", "=", "ax", ".", "get_legend_handles_labels", "(", ")", "\n", "ax", ".", "legend", "(", "handles", ",", "labels", ",", "ncol", "=", "2", ",", "loc", "=", "'center'", ",", "bbox_to_anchor", "=", "(", "0.5", ",", "1.2", ")", ")", "\n", "\n", "if", "grid", ":", "\n", "        ", "ax", ".", "grid", "(", "True", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.CIFASIS_wganvo.test.plotHelpers.plotLoops3D": [[209, 240], ["matplotlib.figure", "plt.figure.add_subplot", "[].mean", "[].mean", "[].mean", "fig.add_subplot.set_xlim", "fig.add_subplot.set_ylim", "fig.add_subplot.set_zlim", "fig.add_subplot.set_xlabel", "fig.add_subplot.set_ylabel", "fig.add_subplot.plot", "fig.add_subplot.plot", "numpy.array().max", "fig.add_subplot.set_zlabel", "fig.add_subplot.set_zlabel", "numpy.array", "[].max", "[].min", "[].max", "[].min", "[].max", "[].min"], "function", ["home.repos.pwc.inspect_result.CIFASIS_wganvo.test.plot_traj.plot", "home.repos.pwc.inspect_result.CIFASIS_wganvo.test.plot_traj.plot"], ["", "", "def", "plotLoops3D", "(", "paths", ",", "loops", ",", "title", "=", "None", ",", "time_unit", "=", "None", ")", ":", "\n", "    ", "fig", "=", "plt", ".", "figure", "(", ")", "\n", "\n", "ax", "=", "fig", ".", "add_subplot", "(", "111", ",", "projection", "=", "'3d'", ")", "\n", "\n", "for", "X", ",", "Y", ",", "Z", ",", "color", "in", "paths", ":", "\n", "        ", "ax", ".", "plot", "(", "X", ",", "Y", ",", "Z", ",", "color", "=", "color", ")", "\n", "\n", "", "for", "X", ",", "Y", ",", "Z", ",", "color", "in", "loops", ":", "\n", "        ", "ax", ".", "plot", "(", "X", ",", "Y", ",", "Z", ",", "color", "=", "color", ")", "\n", "\n", "# simulate equal aspect ratio", "\n", "# assume first path is ground truth", "\n", "# \"\"\"", "\n", "", "max_range", "=", "np", ".", "array", "(", "[", "paths", "[", "0", "]", "[", "0", "]", ".", "max", "(", ")", "-", "paths", "[", "0", "]", "[", "0", "]", ".", "min", "(", ")", ",", "paths", "[", "0", "]", "[", "1", "]", ".", "max", "(", ")", "-", "paths", "[", "0", "]", "[", "1", "]", ".", "min", "(", ")", ",", "\n", "paths", "[", "0", "]", "[", "2", "]", ".", "max", "(", ")", "-", "paths", "[", "0", "]", "[", "2", "]", ".", "min", "(", ")", "]", ")", ".", "max", "(", ")", "/", "2.0", "\n", "mean_x", "=", "paths", "[", "0", "]", "[", "0", "]", ".", "mean", "(", ")", "\n", "mean_y", "=", "paths", "[", "0", "]", "[", "1", "]", ".", "mean", "(", ")", "\n", "mean_z", "=", "paths", "[", "0", "]", "[", "2", "]", ".", "mean", "(", ")", "\n", "ax", ".", "set_xlim", "(", "mean_x", "-", "max_range", ",", "mean_x", "+", "max_range", ")", "\n", "ax", ".", "set_ylim", "(", "mean_y", "-", "max_range", ",", "mean_y", "+", "max_range", ")", "\n", "ax", ".", "set_zlim", "(", "mean_z", "-", "max_range", ",", "mean_z", "+", "max_range", ")", "\n", "# \"\"\"", "\n", "# Set axis labels", "\n", "\n", "xLabel", "=", "ax", ".", "set_xlabel", "(", "'x (m)'", ")", "\n", "yLabel", "=", "ax", ".", "set_ylabel", "(", "'y (m)'", ")", "\n", "if", "time_unit", ":", "\n", "        ", "zLabel", "=", "ax", ".", "set_zlabel", "(", "'time ('", "+", "time_unit", "+", "')'", ")", "\n", "", "else", ":", "\n", "        ", "zLabel", "=", "ax", ".", "set_zlabel", "(", "'time (seconds)'", ")", "\n", "", "", ""]]}