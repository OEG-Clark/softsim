{"home.repos.pwc.inspect_result.983632847_USCL.eval_pretrained_model.eval_pretrained_model.set_seed": [[35, 40], ["random.seed", "numpy.random.seed", "torch.manual_seed", "torch.manual_seed", "torch.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed", "torch.cuda.manual_seed"], "function", ["None"], ["", "def", "set_seed", "(", "seed", "=", "1", ")", ":", "\n", "    ", "random", ".", "seed", "(", "seed", ")", "\n", "np", ".", "random", ".", "seed", "(", "seed", ")", "\n", "torch", ".", "manual_seed", "(", "seed", ")", "\n", "torch", ".", "cuda", ".", "manual_seed", "(", "seed", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.eval_pretrained_model.eval_pretrained_model.main": [[41, 241], ["torchvision.Compose", "torchvision.Compose", "tools.my_dataset.COVIDDataset", "tools.my_dataset.COVIDDataset", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "resnet_uscl.ResNetUSCL", "resnet_uscl.ResNetUSCL.named_parameters", "torch.Linear", "torch.Linear", "resnet_uscl.ResNetUSCL.named_parameters", "resnet_uscl.ResNetUSCL.to", "torch.CrossEntropyLoss", "torch.Adam", "torch.lr_scheduler.CosineAnnealingLR", "print", "time.time", "list", "list", "range", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "print", "torch.load", "torch.load", "torch.load", "resnet_uscl.ResNetUSCL.state_dict", "net.state_dict.update", "resnet_uscl.ResNetUSCL.load_state_dict", "print", "print", "print", "resnet_uscl.ResNetUSCL.parameters", "amp.initialize", "resnet_uscl.ResNetUSCL.train", "enumerate", "print", "optim.lr_scheduler.CosineAnnealingLR.step", "sum", "sum", "sum", "sum", "sum", "sum", "torchvision.Resize", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize", "torchvision.Resize", "torchvision.ToTensor", "torchvision.Normalize", "name.startswith", "inputs.to.to", "labels.to.to", "resnet_uscl.ResNetUSCL.", "optim.Adam.zero_grad", "nn.CrossEntropyLoss.", "optim.Adam.step", "torch.max", "torch.max", "torch.max", "labels.to.size", "criterion.item", "list.append", "resnet_uscl.ResNetUSCL.eval", "round", "list", "criterion.backward", "criterion.item", "print", "optim.lr_scheduler.CosineAnnealingLR.get_last_lr", "torch.no_grad", "torch.no_grad", "torch.no_grad", "enumerate", "list.append", "print", "torch.load.keys", "amp.scale_loss", "scaled_loss.backward", "inputs.to.to", "labels.to.to", "resnet_uscl.ResNetUSCL.", "nn.CrossEntropyLoss.", "torch.max", "torch.max", "torch.max", "labels.to.size", "range", "criterion.item", "time.time", "range", "range", "range", "k.startswith", "k.startswith", "len", "len", "torch.utils.data.DataLoader.__len__", "len"], "function", ["home.repos.pwc.inspect_result.983632847_USCL.train_USCL.simclr.SimCLR.train", "home.repos.pwc.inspect_result.983632847_USCL.data_aug.dataset_wrapper_Ultrasound_Video_Mixup.DataSetWrapper.__len__"], ["", "def", "main", "(", ")", ":", "\n", "# ============================ step 1/5 data ============================", "\n", "# transforms", "\n", "    ", "train_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "224", ",", "224", ")", ")", ",", "\n", "transforms", ".", "RandomResizedCrop", "(", "size", "=", "224", ",", "scale", "=", "(", "0.8", ",", "1.0", ")", ",", "ratio", "=", "(", "0.8", ",", "1.25", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "std", "=", "[", "0.25", ",", "0.25", ",", "0.25", "]", ")", "\n", "]", ")", "\n", "\n", "valid_transform", "=", "transforms", ".", "Compose", "(", "[", "\n", "transforms", ".", "Resize", "(", "(", "224", ",", "224", ")", ")", ",", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "std", "=", "[", "0.25", ",", "0.25", ",", "0.25", "]", ")", "\n", "]", ")", "\n", "\n", "# MyDataset", "\n", "train_data", "=", "COVIDDataset", "(", "data_dir", "=", "data_dir", ",", "train", "=", "True", ",", "transform", "=", "train_transform", ")", "\n", "valid_data", "=", "COVIDDataset", "(", "data_dir", "=", "data_dir", ",", "train", "=", "False", ",", "transform", "=", "valid_transform", ")", "\n", "\n", "# DataLoder", "\n", "train_loader", "=", "DataLoader", "(", "dataset", "=", "train_data", ",", "batch_size", "=", "BATCH_SIZE", ",", "shuffle", "=", "True", ")", "\n", "valid_loader", "=", "DataLoader", "(", "dataset", "=", "valid_data", ",", "batch_size", "=", "BATCH_SIZE", ")", "\n", "\n", "# ============================ step 2/5 model ============================", "\n", "\n", "net", "=", "ResNetUSCL", "(", "base_model", "=", "'resnet18'", ",", "out_dim", "=", "256", ",", "pretrained", "=", "pretrained", ")", "\n", "if", "pretrained", ":", "\n", "        ", "print", "(", "'\\nThe ImageNet pretrained parameters are loaded.'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'\\nThe ImageNet pretrained parameters are not loaded.'", ")", "\n", "\n", "", "if", "selfsup", ":", "# import pretrained model weights", "\n", "        ", "state_dict", "=", "torch", ".", "load", "(", "state_dict_path", ")", "\n", "new_dict", "=", "{", "k", ":", "state_dict", "[", "k", "]", "for", "k", "in", "list", "(", "state_dict", ".", "keys", "(", ")", ")", "\n", "if", "not", "(", "k", ".", "startswith", "(", "'l'", ")", "\n", "|", "k", ".", "startswith", "(", "'fc'", ")", ")", "}", "# # discard MLP and fc", "\n", "model_dict", "=", "net", ".", "state_dict", "(", ")", "\n", "\n", "model_dict", ".", "update", "(", "new_dict", ")", "\n", "net", ".", "load_state_dict", "(", "model_dict", ")", "\n", "print", "(", "'\\nThe self-supervised trained parameters are loaded.\\n'", ")", "\n", "", "else", ":", "\n", "        ", "print", "(", "'\\nThe self-supervised trained parameters are not loaded.\\n'", ")", "\n", "\n", "# frozen all convolutional layers", "\n", "# for param in net.parameters():", "\n", "#     param.requires_grad = False", "\n", "\n", "# fine-tune last 3 layers", "\n", "", "for", "name", ",", "param", "in", "net", ".", "named_parameters", "(", ")", ":", "\n", "        ", "if", "not", "name", ".", "startswith", "(", "'features.7.1'", ")", ":", "\n", "            ", "param", ".", "requires_grad", "=", "False", "\n", "\n", "# add a classifier for linear evaluation", "\n", "", "", "num_ftrs", "=", "net", ".", "linear", ".", "in_features", "\n", "net", ".", "linear", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "3", ")", "\n", "net", ".", "fc", "=", "nn", ".", "Linear", "(", "3", ",", "3", ")", "\n", "\n", "for", "name", ",", "param", "in", "net", ".", "named_parameters", "(", ")", ":", "\n", "        ", "print", "(", "name", ",", "'\\t'", ",", "'requires_grad='", ",", "param", ".", "requires_grad", ")", "\n", "\n", "", "net", ".", "to", "(", "device", ")", "\n", "\n", "# ============================ step 3/5 loss function ============================", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "# choose loss function", "\n", "\n", "# ============================ step 4/5 optimizer ============================", "\n", "optimizer", "=", "optim", ".", "Adam", "(", "net", ".", "parameters", "(", ")", ",", "lr", "=", "LR", ",", "weight_decay", "=", "weight_decay", ")", "# choose optimizer", "\n", "scheduler", "=", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer", ",", "\n", "T_max", "=", "MAX_EPOCH", ",", "\n", "eta_min", "=", "0", ",", "\n", "last_epoch", "=", "-", "1", ")", "# set learning rate decay strategy", "\n", "\n", "# ============================ step 5/5 training ============================", "\n", "print", "(", "'\\nTraining start!\\n'", ")", "\n", "start", "=", "time", ".", "time", "(", ")", "\n", "train_curve", "=", "list", "(", ")", "\n", "valid_curve", "=", "list", "(", ")", "\n", "max_acc", "=", "0.", "\n", "reached", "=", "0", "# which epoch reached the max accuracy", "\n", "\n", "# the statistics of classification result: classification_results[true][pred]", "\n", "classification_results", "=", "[", "[", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "0", "]", "]", "\n", "best_classification_results", "=", "None", "\n", "\n", "if", "apex_support", "and", "fp16_precision", ":", "\n", "        ", "net", ",", "optimizer", "=", "amp", ".", "initialize", "(", "net", ",", "optimizer", ",", "\n", "opt_level", "=", "'O2'", ",", "\n", "keep_batchnorm_fp32", "=", "True", ")", "\n", "", "for", "epoch", "in", "range", "(", "MAX_EPOCH", ")", ":", "\n", "\n", "        ", "loss_mean", "=", "0.", "\n", "correct", "=", "0.", "\n", "total", "=", "0.", "\n", "\n", "net", ".", "train", "(", ")", "\n", "for", "i", ",", "data", "in", "enumerate", "(", "train_loader", ")", ":", "\n", "\n", "# forward", "\n", "            ", "inputs", ",", "labels", "=", "data", "\n", "inputs", "=", "inputs", ".", "to", "(", "device", ")", "\n", "labels", "=", "labels", ".", "to", "(", "device", ")", "\n", "outputs", "=", "net", "(", "inputs", ")", "\n", "\n", "# backward", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "labels", ")", "\n", "if", "apex_support", "and", "fp16_precision", ":", "\n", "                ", "with", "amp", ".", "scale_loss", "(", "loss", ",", "optimizer", ")", "as", "scaled_loss", ":", "\n", "                    ", "scaled_loss", ".", "backward", "(", ")", "\n", "", "", "else", ":", "\n", "                ", "loss", ".", "backward", "(", ")", "\n", "\n", "# update weights", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "_", ",", "predicted", "=", "torch", ".", "max", "(", "outputs", ".", "data", ",", "1", ")", "\n", "total", "+=", "labels", ".", "size", "(", "0", ")", "\n", "correct", "+=", "(", "predicted", "==", "labels", ")", ".", "cpu", "(", ")", ".", "squeeze", "(", ")", ".", "sum", "(", ")", ".", "numpy", "(", ")", "\n", "\n", "# print training information", "\n", "loss_mean", "+=", "loss", ".", "item", "(", ")", "\n", "train_curve", ".", "append", "(", "loss", ".", "item", "(", ")", ")", "\n", "if", "(", "i", "+", "1", ")", "%", "log_interval", "==", "0", ":", "\n", "                ", "loss_mean", "=", "loss_mean", "/", "log_interval", "\n", "print", "(", "\"\\nTraining:Epoch[{:0>3}/{:0>3}] Iteration[{:0>3}/{:0>3}] Loss: {:.4f} Acc:{:.2%}\"", ".", "format", "(", "\n", "epoch", ",", "MAX_EPOCH", ",", "i", "+", "1", ",", "len", "(", "train_loader", ")", ",", "loss_mean", ",", "correct", "/", "total", ")", ")", "\n", "loss_mean", "=", "0.", "\n", "\n", "", "", "print", "(", "'Learning rate this epoch:'", ",", "scheduler", ".", "get_last_lr", "(", ")", "[", "0", "]", ")", "\n", "scheduler", ".", "step", "(", ")", "# updata learning rate", "\n", "\n", "# validate the model", "\n", "if", "(", "epoch", "+", "1", ")", "%", "val_interval", "==", "0", ":", "\n", "\n", "            ", "correct_val", "=", "0.", "\n", "total_val", "=", "0.", "\n", "loss_val", "=", "0.", "\n", "net", ".", "eval", "(", ")", "\n", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "                ", "for", "j", ",", "data", "in", "enumerate", "(", "valid_loader", ")", ":", "\n", "                    ", "inputs", ",", "labels", "=", "data", "\n", "inputs", "=", "inputs", ".", "to", "(", "device", ")", "\n", "labels", "=", "labels", ".", "to", "(", "device", ")", "\n", "outputs", "=", "net", "(", "inputs", ")", "\n", "loss", "=", "criterion", "(", "outputs", ",", "labels", ")", "\n", "\n", "_", ",", "predicted", "=", "torch", ".", "max", "(", "outputs", ".", "data", ",", "1", ")", "\n", "total_val", "+=", "labels", ".", "size", "(", "0", ")", "\n", "correct_val", "+=", "(", "predicted", "==", "labels", ")", ".", "cpu", "(", ")", ".", "squeeze", "(", ")", ".", "sum", "(", ")", ".", "numpy", "(", ")", "\n", "for", "k", "in", "range", "(", "len", "(", "predicted", ")", ")", ":", "\n", "                        ", "classification_results", "[", "labels", "[", "k", "]", "]", "[", "predicted", "[", "k", "]", "]", "+=", "1", "# \"label\" is regarded as \"predicted\"", "\n", "\n", "", "loss_val", "+=", "loss", ".", "item", "(", ")", "\n", "\n", "", "acc", "=", "correct_val", "/", "total_val", "\n", "if", "acc", ">", "max_acc", ":", "# record best accuracy", "\n", "                    ", "max_acc", "=", "acc", "\n", "reached", "=", "epoch", "\n", "best_classification_results", "=", "classification_results", "\n", "", "classification_results", "=", "[", "[", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "0", "]", ",", "[", "0", ",", "0", ",", "0", "]", "]", "\n", "valid_curve", ".", "append", "(", "loss_val", "/", "valid_loader", ".", "__len__", "(", ")", ")", "\n", "print", "(", "\"Valid:\\t Epoch[{:0>3}/{:0>3}] Iteration[{:0>3}/{:0>3}] Loss: {:.4f} Acc:{:.2%}\"", ".", "format", "(", "\n", "epoch", ",", "MAX_EPOCH", ",", "j", "+", "1", ",", "len", "(", "valid_loader", ")", ",", "loss_val", ",", "acc", ")", ")", "\n", "\n", "", "", "", "print", "(", "'\\nTraining finish, the time consumption of {} epochs is {}s\\n'", ".", "format", "(", "MAX_EPOCH", ",", "round", "(", "time", ".", "time", "(", ")", "-", "start", ")", ")", ")", "\n", "print", "(", "'The max validation accuracy is: {:.2%}, reached at epoch {}.\\n'", ".", "format", "(", "max_acc", ",", "reached", ")", ")", "\n", "\n", "print", "(", "'\\nThe best prediction results of the dataset:'", ")", "\n", "print", "(", "'Class 0 predicted as class 0:'", ",", "best_classification_results", "[", "0", "]", "[", "0", "]", ")", "\n", "print", "(", "'Class 0 predicted as class 1:'", ",", "best_classification_results", "[", "0", "]", "[", "1", "]", ")", "\n", "print", "(", "'Class 0 predicted as class 2:'", ",", "best_classification_results", "[", "0", "]", "[", "2", "]", ")", "\n", "print", "(", "'Class 1 predicted as class 0:'", ",", "best_classification_results", "[", "1", "]", "[", "0", "]", ")", "\n", "print", "(", "'Class 1 predicted as class 1:'", ",", "best_classification_results", "[", "1", "]", "[", "1", "]", ")", "\n", "print", "(", "'Class 1 predicted as class 2:'", ",", "best_classification_results", "[", "1", "]", "[", "2", "]", ")", "\n", "print", "(", "'Class 2 predicted as class 0:'", ",", "best_classification_results", "[", "2", "]", "[", "0", "]", ")", "\n", "print", "(", "'Class 2 predicted as class 1:'", ",", "best_classification_results", "[", "2", "]", "[", "1", "]", ")", "\n", "print", "(", "'Class 2 predicted as class 2:'", ",", "best_classification_results", "[", "2", "]", "[", "2", "]", ")", "\n", "\n", "acc0", "=", "best_classification_results", "[", "0", "]", "[", "0", "]", "/", "sum", "(", "best_classification_results", "[", "i", "]", "[", "0", "]", "for", "i", "in", "range", "(", "3", ")", ")", "\n", "recall0", "=", "best_classification_results", "[", "0", "]", "[", "0", "]", "/", "sum", "(", "best_classification_results", "[", "0", "]", ")", "\n", "print", "(", "'\\nClass 0 accuracy:'", ",", "acc0", ")", "\n", "print", "(", "'Class 0 recall:'", ",", "recall0", ")", "\n", "print", "(", "'Class 0 F1:'", ",", "2", "*", "acc0", "*", "recall0", "/", "(", "acc0", "+", "recall0", ")", ")", "\n", "\n", "acc1", "=", "best_classification_results", "[", "1", "]", "[", "1", "]", "/", "sum", "(", "best_classification_results", "[", "i", "]", "[", "1", "]", "for", "i", "in", "range", "(", "3", ")", ")", "\n", "recall1", "=", "best_classification_results", "[", "1", "]", "[", "1", "]", "/", "sum", "(", "best_classification_results", "[", "1", "]", ")", "\n", "print", "(", "'\\nClass 1 accuracy:'", ",", "acc1", ")", "\n", "print", "(", "'Class 1 recall:'", ",", "recall1", ")", "\n", "print", "(", "'Class 1 F1:'", ",", "2", "*", "acc1", "*", "recall1", "/", "(", "acc1", "+", "recall1", ")", ")", "\n", "\n", "acc2", "=", "best_classification_results", "[", "2", "]", "[", "2", "]", "/", "sum", "(", "best_classification_results", "[", "i", "]", "[", "2", "]", "for", "i", "in", "range", "(", "3", ")", ")", "\n", "recall2", "=", "best_classification_results", "[", "2", "]", "[", "2", "]", "/", "sum", "(", "best_classification_results", "[", "2", "]", ")", "\n", "print", "(", "'\\nClass 2 accuracy:'", ",", "acc2", ")", "\n", "print", "(", "'Class 2 recall:'", ",", "recall2", ")", "\n", "print", "(", "'Class 2 F1:'", ",", "2", "*", "acc2", "*", "recall2", "/", "(", "acc2", "+", "recall2", ")", ")", "\n", "\n", "return", "best_classification_results", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.eval_pretrained_model.resnet_uscl.ResNetUSCL.__init__": [[7, 28], ["torch.Module.__init__", "resnet_uscl.ResNetUSCL._get_basemodel", "torch.Sequential", "torch.Linear", "torch.Linear", "torchvision.resnet18", "torchvision.resnet50", "print", "print", "list", "resnet_uscl.ResNetUSCL.children"], "methods", ["home.repos.pwc.inspect_result.983632847_USCL.loss.nt_xent.NTXentLoss.__init__", "home.repos.pwc.inspect_result.983632847_USCL.models.resnet_simclr.ResNetSimCLR._get_basemodel"], ["def", "__init__", "(", "self", ",", "base_model", ",", "out_dim", ",", "pretrained", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResNetUSCL", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "self", ".", "resnet_dict", "=", "{", "\"resnet18\"", ":", "models", ".", "resnet18", "(", "pretrained", "=", "pretrained", ")", ",", "\n", "\"resnet50\"", ":", "models", ".", "resnet50", "(", "pretrained", "=", "pretrained", ")", "}", "\n", "if", "pretrained", ":", "\n", "            ", "print", "(", "'\\nModel parameters loaded.\\n'", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'\\nRandom initialize model parameters.\\n'", ")", "\n", "\n", "", "resnet", "=", "self", ".", "_get_basemodel", "(", "base_model", ")", "\n", "num_ftrs", "=", "resnet", ".", "fc", ".", "in_features", "\n", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ")", "# discard the last fc layer", "\n", "\n", "# projection MLP", "\n", "self", ".", "linear", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "out_dim", ")", "\n", "\n", "# classifier", "\n", "num_classes", "=", "12", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "out_dim", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.eval_pretrained_model.resnet_uscl.ResNetUSCL._get_basemodel": [[29, 36], ["print"], "methods", ["None"], ["", "def", "_get_basemodel", "(", "self", ",", "model_name", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "model", "=", "self", ".", "resnet_dict", "[", "model_name", "]", "\n", "print", "(", "\"Feature extractor:\"", ",", "model_name", ")", "\n", "return", "model", "\n", "", "except", ":", "\n", "            ", "raise", "(", "\"Invalid model name. Check the config file and pass one of: resnet18 or resnet50\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.eval_pretrained_model.resnet_uscl.ResNetUSCL.forward": [[37, 44], ["resnet_uscl.ResNetUSCL.features", "h.squeeze.squeeze.squeeze", "resnet_uscl.ResNetUSCL.linear"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "self", ".", "features", "(", "x", ")", "\n", "h", "=", "h", ".", "squeeze", "(", ")", "\n", "\n", "x", "=", "self", ".", "linear", "(", "h", ")", "\n", "\n", "return", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.983632847_USCL.tools.my_dataset.COVIDDataset.__init__": [[10, 24], ["open", "pickle.load"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "train", "=", "True", ",", "transform", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        POCUS Dataset\n            param data_dir: str\n            param transform: torch.transform\n        \"\"\"", "\n", "self", ".", "label_name", "=", "{", "\"covid19\"", ":", "0", ",", "\"pneumonia\"", ":", "1", ",", "\"regular\"", ":", "2", "}", "\n", "with", "open", "(", "data_dir", ",", "'rb'", ")", "as", "f", ":", "\n", "            ", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", "=", "pickle", ".", "load", "(", "f", ")", "\n", "", "if", "train", ":", "\n", "            ", "self", ".", "X", ",", "self", ".", "y", "=", "X_train", ",", "y_train", "# [N, C, H, W], [N]", "\n", "", "else", ":", "\n", "            ", "self", ".", "X", ",", "self", ".", "y", "=", "X_test", ",", "y_test", "# [N, C, H, W], [N]", "\n", "", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.tools.my_dataset.COVIDDataset.__getitem__": [[25, 34], ["my_dataset.COVIDDataset.X[].transpose", "PIL.Image.fromarray().convert", "my_dataset.COVIDDataset.transform", "PIL.Image.fromarray", "my_dataset.COVIDDataset.astype"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "img_arr", "=", "self", ".", "X", "[", "index", "]", ".", "transpose", "(", "1", ",", "2", ",", "0", ")", "# CHW => HWC", "\n", "img", "=", "Image", ".", "fromarray", "(", "img_arr", ".", "astype", "(", "'uint8'", ")", ")", ".", "convert", "(", "'RGB'", ")", "# 0~255", "\n", "label", "=", "self", ".", "y", "[", "index", "]", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img", "=", "self", ".", "transform", "(", "img", ")", "\n", "\n", "", "return", "img", ",", "label", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.tools.my_dataset.COVIDDataset.__len__": [[35, 37], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "\n", "        ", "return", "len", "(", "self", ".", "y", ")", "", "", "", ""]], "home.repos.pwc.inspect_result.983632847_USCL.train_USCL.simclr.SimCLR.__init__": [[43, 53], ["print", "simclr.SimCLR._get_device", "loss.nt_xent.NTXentLoss"], "methods", ["home.repos.pwc.inspect_result.983632847_USCL.train_USCL.simclr.SimCLR._get_device"], ["    ", "def", "__init__", "(", "self", ",", "dataset", ",", "config", ",", "lumbda", ",", "Checkpoint_Num", ")", ":", "\n", "        ", "self", ".", "lumbda1", "=", "lumbda", "\n", "self", ".", "lumbda2", "=", "lumbda", "\n", "self", ".", "config", "=", "config", "\n", "self", ".", "Checkpoint_Num", "=", "Checkpoint_Num", "\n", "print", "(", "'\\nThe configurations of this model are in the following:\\n'", ",", "config", ")", "\n", "self", ".", "device", "=", "self", ".", "_get_device", "(", ")", "\n", "# self.writer = SummaryWriter()", "\n", "self", ".", "dataset", "=", "dataset", "\n", "self", ".", "nt_xent_criterion", "=", "NTXentLoss", "(", "self", ".", "device", ",", "config", "[", "'batch_size'", "]", ",", "**", "config", "[", "'loss'", "]", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.train_USCL.simclr.SimCLR._get_device": [[54, 65], ["print", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.is_available", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "torch.cuda.get_device_name", "print", "torch.cuda.get_device_capability", "torch.cuda.get_device_capability", "torch.cuda.get_device_capability", "torch.cuda.get_device_capability", "torch.cuda.get_device_capability", "torch.cuda.get_device_capability", "torch.cuda.get_device_capability", "torch.cuda.get_device_capability", "torch.cuda.get_device_capability", "print"], "methods", ["None"], ["", "def", "_get_device", "(", "self", ")", ":", "\n", "        ", "device", "=", "'cuda'", "if", "torch", ".", "cuda", ".", "is_available", "(", ")", "else", "'cpu'", "\n", "print", "(", "\"\\nRunning on:\"", ",", "device", ")", "\n", "\n", "if", "device", "==", "'cuda'", ":", "\n", "            ", "device_name", "=", "torch", ".", "cuda", ".", "get_device_name", "(", ")", "\n", "print", "(", "\"The device name is:\"", ",", "device_name", ")", "\n", "cap", "=", "torch", ".", "cuda", ".", "get_device_capability", "(", "device", "=", "None", ")", "\n", "print", "(", "\"The capability of this device is:\"", ",", "cap", ",", "'\\n'", ")", "\n", "\n", "", "return", "device", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.train_USCL.simclr.SimCLR._step": [[66, 80], ["model", "model", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "torch.normalize", "simclr.SimCLR.nt_xent_criterion"], "methods", ["None"], ["", "def", "_step", "(", "self", ",", "model", ",", "xis", ",", "xjs", ")", ":", "\n", "\n", "# get the representations and the projections", "\n", "        ", "ris", ",", "zis", ",", "labelis", "=", "model", "(", "xis", ")", "# [N,C]", "\n", "\n", "# get the representations and the projections", "\n", "rjs", ",", "zjs", ",", "labeljs", "=", "model", "(", "xjs", ")", "# [N,C]", "\n", "\n", "# normalize projection feature vectors", "\n", "zis", "=", "F", ".", "normalize", "(", "zis", ",", "dim", "=", "1", ")", "\n", "zjs", "=", "F", ".", "normalize", "(", "zjs", ",", "dim", "=", "1", ")", "\n", "\n", "loss", "=", "self", ".", "nt_xent_criterion", "(", "zis", ",", "zjs", ")", "\n", "return", "loss", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.train_USCL.simclr.SimCLR.train": [[81, 179], ["simclr.SimCLR.dataset.get_data_loaders", "models.resnet_simclr.ResNetSimCLR().to", "simclr.SimCLR._load_pre_trained_weights", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.CrossEntropyLoss", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.Adam", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "torch.optim.lr_scheduler.CosineAnnealingLR", "os.path.join", "simclr._save_config_file", "time.time", "time.time", "range", "simclr.SimCLR.parameters", "amp.initialize", "enumerate", "print", "models.resnet_simclr.ResNetSimCLR", "eval", "str", "xis.to.to.to", "xjs.to.to.to", "simclr.SimCLR.", "simclr.SimCLR.", "torch.CrossEntropyLoss.", "torch.CrossEntropyLoss.", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.optim.Adam.zero_grad", "torch.optim.Adam.step", "torch.optim.Adam.step", "torch.optim.Adam.step", "time.time", "simclr.SimCLR._validate", "time.time", "print", "torch.optim.lr_scheduler.CosineAnnealingLR.step", "torch.optim.lr_scheduler.CosineAnnealingLR.step", "torch.optim.lr_scheduler.CosineAnnealingLR.step", "simclr.FindNotX", "simclr.FindNotX", "loss.backward", "print", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.save", "torch.optim.lr_scheduler.CosineAnnealingLR.get_last_lr", "torch.optim.lr_scheduler.CosineAnnealingLR.get_last_lr", "torch.optim.lr_scheduler.CosineAnnealingLR.get_last_lr", "labelis.tolist", "labeljs.tolist", "labelis.to", "labeljs.to", "simclr.SimCLR._step", "amp.scale_loss", "scaled_loss.backward", "time.time", "simclr.SimCLR.state_dict", "os.path.join", "len", "len", "len"], "methods", ["home.repos.pwc.inspect_result.983632847_USCL.data_aug.dataset_wrapper_Ultrasound_Video_Mixup.DataSetWrapper.get_data_loaders", "home.repos.pwc.inspect_result.983632847_USCL.train_USCL.simclr.SimCLR._load_pre_trained_weights", "home.repos.pwc.inspect_result.983632847_USCL.train_USCL.simclr._save_config_file", "home.repos.pwc.inspect_result.983632847_USCL.train_USCL.simclr.SimCLR._validate", "home.repos.pwc.inspect_result.983632847_USCL.train_USCL.simclr.FindNotX", "home.repos.pwc.inspect_result.983632847_USCL.train_USCL.simclr.FindNotX", "home.repos.pwc.inspect_result.983632847_USCL.train_USCL.simclr.SimCLR._step"], ["", "def", "train", "(", "self", ")", ":", "\n", "\n", "        ", "train_loader", ",", "valid_loader", "=", "self", ".", "dataset", ".", "get_data_loaders", "(", ")", "\n", "\n", "model", "=", "ResNetSimCLR", "(", "**", "self", ".", "config", "[", "\"model\"", "]", ")", ".", "to", "(", "self", ".", "device", ")", "\n", "model", "=", "self", ".", "_load_pre_trained_weights", "(", "model", ")", "\n", "\n", "criterion", "=", "nn", ".", "CrossEntropyLoss", "(", ")", "# loss function", "\n", "\n", "optimizer", "=", "torch", ".", "optim", ".", "Adam", "(", "model", ".", "parameters", "(", ")", ",", "3e-4", ",", "weight_decay", "=", "eval", "(", "self", ".", "config", "[", "'weight_decay'", "]", ")", ")", "\n", "\n", "scheduler", "=", "torch", ".", "optim", ".", "lr_scheduler", ".", "CosineAnnealingLR", "(", "optimizer", ",", "T_max", "=", "self", ".", "config", "[", "'epochs'", "]", ",", "eta_min", "=", "0", ",", "\n", "last_epoch", "=", "-", "1", ")", "\n", "\n", "if", "apex_support", "and", "self", ".", "config", "[", "'fp16_precision'", "]", ":", "\n", "            ", "model", ",", "optimizer", "=", "amp", ".", "initialize", "(", "model", ",", "optimizer", ",", "\n", "opt_level", "=", "'O2'", ",", "\n", "keep_batchnorm_fp32", "=", "True", ")", "\n", "\n", "", "model_checkpoints_folder", "=", "os", ".", "path", ".", "join", "(", "\n", "'/home/zhangchunhui/MedicalAI/USCL/checkpoints_multi_aug'", ",", "\n", "'checkpoint_'", "+", "str", "(", "self", ".", "Checkpoint_Num", ")", ")", "\n", "\n", "# save config file", "\n", "_save_config_file", "(", "model_checkpoints_folder", ")", "\n", "\n", "start_time", "=", "time", ".", "time", "(", ")", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "valid_n_iter", "=", "0", "\n", "best_valid_loss", "=", "np", ".", "inf", "\n", "\n", "for", "epoch", "in", "range", "(", "self", ".", "config", "[", "'epochs'", "]", ")", ":", "\n", "            ", "for", "i", ",", "data", "in", "enumerate", "(", "train_loader", ",", "1", ")", ":", "\n", "# forward", "\n", "# mixupimg1, label1, mixupimg2, label2, original img1, original img2", "\n", "                ", "xis", ",", "labelis", ",", "xjs", ",", "labeljs", ",", "imgis", ",", "imgjs", "=", "data", "# N samples of left branch, N samples of right branch", "\n", "\n", "xis", "=", "xis", ".", "to", "(", "self", ".", "device", ")", "\n", "xjs", "=", "xjs", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "\n", "####### 1-Semi-supervised", "\n", "hi", ",", "xi", ",", "outputis", "=", "model", "(", "xis", ")", "\n", "hj", ",", "xj", ",", "outputjs", "=", "model", "(", "xjs", ")", "\n", "labelindexi", ",", "labelindexj", "=", "FindNotX", "(", "labelis", ".", "tolist", "(", ")", ",", "9999", ")", ",", "FindNotX", "(", "labeljs", ".", "tolist", "(", ")", ",", "9999", ")", "# X=9999=no label", "\n", "\n", "lossi", "=", "criterion", "(", "outputis", "[", "labelindexi", "]", ",", "labelis", ".", "to", "(", "self", ".", "device", ")", "[", "labelindexi", "]", ")", "\n", "lossj", "=", "criterion", "(", "outputjs", "[", "labelindexj", "]", ",", "labeljs", ".", "to", "(", "self", ".", "device", ")", "[", "labelindexj", "]", ")", "\n", "\n", "# lumbda1=lumbda2   # small value is better", "\n", "lumbda1", ",", "lumbda2", "=", "self", ".", "lumbda1", ",", "self", ".", "lumbda2", "# small value is better", "\n", "loss", "=", "self", ".", "_step", "(", "model", ",", "xis", ",", "xjs", ")", "+", "lumbda1", "*", "lossi", "+", "lumbda2", "*", "lossj", "\n", "########################################################################################################", "\n", "\n", "\n", "####### 2-Self-supervised", "\n", "# loss = self._step(model, xis, xjs)", "\n", "########################################################################################################", "\n", "\n", "# backward", "\n", "optimizer", ".", "zero_grad", "(", ")", "\n", "if", "apex_support", "and", "self", ".", "config", "[", "'fp16_precision'", "]", ":", "\n", "                    ", "with", "amp", ".", "scale_loss", "(", "loss", ",", "optimizer", ")", "as", "scaled_loss", ":", "\n", "                        ", "scaled_loss", ".", "backward", "(", ")", "\n", "", "", "else", ":", "\n", "                    ", "loss", ".", "backward", "(", ")", "\n", "\n", "# update weights", "\n", "", "optimizer", ".", "step", "(", ")", "\n", "\n", "if", "i", "%", "self", ".", "config", "[", "'log_every_n_steps'", "]", "==", "0", ":", "\n", "# self.writer.add_scalar('train_loss', loss, global_step=i)", "\n", "                    ", "start_time", ",", "end_time", "=", "end_time", ",", "time", ".", "time", "(", ")", "\n", "print", "(", "\"\\nTraining:Epoch[{:0>3}/{:0>3}] Iteration[{:0>3}/{:0>3}] Loss: {:.4f} Time: {:.2f}s\"", ".", "format", "(", "\n", "epoch", "+", "1", ",", "self", ".", "config", "[", "'epochs'", "]", ",", "i", ",", "len", "(", "train_loader", ")", ",", "loss", ",", "end_time", "-", "start_time", ")", ")", "\n", "\n", "# validate the model if requested", "\n", "", "", "if", "epoch", "%", "self", ".", "config", "[", "'eval_every_n_epochs'", "]", "==", "0", ":", "\n", "                ", "start_time", "=", "time", ".", "time", "(", ")", "\n", "valid_loss", "=", "self", ".", "_validate", "(", "model", ",", "valid_loader", ")", "\n", "end_time", "=", "time", ".", "time", "(", ")", "\n", "if", "valid_loss", "<", "best_valid_loss", ":", "\n", "# save the model weights", "\n", "                    ", "best_valid_loss", "=", "valid_loss", "\n", "torch", ".", "save", "(", "model", ".", "state_dict", "(", ")", ",", "os", ".", "path", ".", "join", "(", "model_checkpoints_folder", ",", "'best_model.pth'", ")", ")", "\n", "\n", "", "print", "(", "\"Valid:\\t Epoch[{:0>3}/{:0>3}] Iteration[{:0>3}/{:0>3}] Loss: {:.4f} Time: {:.2f}s\"", ".", "format", "(", "\n", "epoch", "+", "1", ",", "self", ".", "config", "[", "'epochs'", "]", ",", "len", "(", "valid_loader", ")", ",", "len", "(", "valid_loader", ")", ",", "valid_loss", ",", "\n", "end_time", "-", "start_time", ")", ")", "\n", "# self.writer.add_scalar('validation_loss', valid_loss, global_step=valid_n_iter)", "\n", "valid_n_iter", "+=", "1", "\n", "\n", "", "print", "(", "'Learning rate this epoch:'", ",", "scheduler", ".", "get_last_lr", "(", ")", "[", "0", "]", ")", "# python >=3.7", "\n", "# print('Learning rate this epoch:', scheduler.base_lrs[0])   # python 3.6", "\n", "\n", "# warmup for the first 10 epochs", "\n", "if", "epoch", ">=", "10", ":", "\n", "                ", "scheduler", ".", "step", "(", ")", "\n", "# self.writer.add_scalar('cosine_lr_decay', scheduler.get_lr()[0], global_step=i)", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.train_USCL.simclr.SimCLR._load_pre_trained_weights": [[181, 191], ["os.path.join", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "torch.load", "model.load_state_dict", "print", "os.path.join", "print"], "methods", ["None"], ["", "", "", "def", "_load_pre_trained_weights", "(", "self", ",", "model", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "checkpoints_folder", "=", "os", ".", "path", ".", "join", "(", "'./runs'", ",", "self", ".", "config", "[", "'fine_tune_from'", "]", ",", "'checkpoints'", ")", "\n", "state_dict", "=", "torch", ".", "load", "(", "os", ".", "path", ".", "join", "(", "checkpoints_folder", ",", "'best_model.pth'", ")", ")", "\n", "model", ".", "load_state_dict", "(", "state_dict", ")", "\n", "print", "(", "\"Loaded pre-trained model with success.\"", ")", "\n", "", "except", "FileNotFoundError", ":", "\n", "            ", "print", "(", "\"Pre-trained weights not found. Training from scratch.\"", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.train_USCL.simclr.SimCLR._validate": [[192, 219], ["model.train", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "torch.no_grad", "model.eval", "imgis.to", "imgjs.to", "simclr.SimCLR._step", "simclr.SimCLR.item"], "methods", ["home.repos.pwc.inspect_result.983632847_USCL.train_USCL.simclr.SimCLR.train", "home.repos.pwc.inspect_result.983632847_USCL.train_USCL.simclr.SimCLR._step"], ["", "def", "_validate", "(", "self", ",", "model", ",", "valid_loader", ")", ":", "\n", "\n", "# validation steps", "\n", "        ", "with", "torch", ".", "no_grad", "(", ")", ":", "\n", "            ", "model", ".", "eval", "(", ")", "\n", "\n", "valid_loss", "=", "0.0", "\n", "counter", "=", "0", "\n", "for", "xis", ",", "labelis", ",", "xjs", ",", "labeljs", ",", "imgis", ",", "imgjs", "in", "valid_loader", ":", "\n", "## 1. original images", "\n", "                ", "xis", "=", "imgis", ".", "to", "(", "self", ".", "device", ")", "\n", "xjs", "=", "imgjs", ".", "to", "(", "self", ".", "device", ")", "\n", "\n", "loss", "=", "self", ".", "_step", "(", "model", ",", "xis", ",", "xjs", ")", "\n", "valid_loss", "+=", "loss", ".", "item", "(", ")", "\n", "counter", "+=", "1", "\n", "\n", "## 2. augmented images", "\n", "# xis = xis.to(self.device)", "\n", "# xjs = xjs.to(self.device)", "\n", "#", "\n", "# loss = self._step(model, xis, xjs)", "\n", "# valid_loss += loss.item()", "\n", "# counter += 1", "\n", "", "valid_loss", "/=", "(", "counter", "+", "1e-6", ")", "# in case 0", "\n", "", "model", ".", "train", "(", ")", "\n", "return", "valid_loss", "\n", "", "", ""]], "home.repos.pwc.inspect_result.983632847_USCL.train_USCL.simclr._save_config_file": [[29, 33], ["os.path.exists", "os.makedirs", "shutil.copy", "os.path.join"], "function", ["None"], ["def", "_save_config_file", "(", "model_checkpoints_folder", ")", ":", "\n", "    ", "if", "not", "os", ".", "path", ".", "exists", "(", "model_checkpoints_folder", ")", ":", "\n", "        ", "os", ".", "makedirs", "(", "model_checkpoints_folder", ")", "\n", "shutil", ".", "copy", "(", "'./config.yaml'", ",", "os", ".", "path", ".", "join", "(", "model_checkpoints_folder", ",", "'config.yaml'", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.train_USCL.simclr.FindNotX": [[34, 40], ["enumerate", "index.append"], "function", ["None"], ["", "", "def", "FindNotX", "(", "list", ",", "x", ")", ":", "\n", "    ", "index", "=", "[", "]", "\n", "for", "i", ",", "item", "in", "enumerate", "(", "list", ")", ":", "\n", "        ", "if", "item", "!=", "x", ":", "\n", "            ", "index", ".", "append", "(", "i", ")", "\n", "", "", "return", "index", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.train_USCL.linear_eval.linear_model_eval": [[33, 47], ["sklearn.linear_model.LogisticRegression", "sklearn.linear_model.LogisticRegression.fit", "print", "print", "print", "print", "sklearn.neighbors.KNeighborsClassifier", "sklearn.neighbors.KNeighborsClassifier.fit", "print", "print", "print", "sklearn.linear_model.LogisticRegression.score", "sklearn.linear_model.LogisticRegression.score", "sklearn.neighbors.KNeighborsClassifier.score", "sklearn.neighbors.KNeighborsClassifier.score"], "function", ["None"], ["", "def", "linear_model_eval", "(", "X_train", ",", "y_train", ",", "X_test", ",", "y_test", ")", ":", "\n", "\n", "    ", "clf", "=", "LogisticRegression", "(", "random_state", "=", "0", ",", "max_iter", "=", "1200", ",", "solver", "=", "'lbfgs'", ",", "C", "=", "1.0", ")", "\n", "clf", ".", "fit", "(", "X_train", ",", "y_train", ")", "\n", "print", "(", "\"\\nLogistic Regression feature eval\"", ")", "\n", "print", "(", "\"Train score:\"", ",", "clf", ".", "score", "(", "X_train", ",", "y_train", ")", ")", "\n", "print", "(", "\"Test score:\"", ",", "clf", ".", "score", "(", "X_test", ",", "y_test", ")", ")", "\n", "\n", "print", "(", "\"-------------------------------\"", ")", "\n", "neigh", "=", "KNeighborsClassifier", "(", "n_neighbors", "=", "10", ")", "\n", "neigh", ".", "fit", "(", "X_train", ",", "y_train", ")", "\n", "print", "(", "\"KNN feature eval\"", ")", "\n", "print", "(", "\"Train score:\"", ",", "neigh", ".", "score", "(", "X_train", ",", "y_train", ")", ")", "\n", "print", "(", "\"Test score:\"", ",", "neigh", ".", "score", "(", "X_test", ",", "y_test", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.train_USCL.linear_eval.next_batch": [[48, 54], ["range", "torch.tensor", "torch.tensor", "X_batch.to", "torch.tensor.to"], "function", ["None"], ["", "def", "next_batch", "(", "X", ",", "y", ",", "batch_size", ",", "dtype", ")", ":", "\n", "    ", "for", "i", "in", "range", "(", "0", ",", "X", ".", "shape", "[", "0", "]", ",", "batch_size", ")", ":", "\n", "# must convert data type to type of weights", "\n", "        ", "X_batch", "=", "torch", ".", "tensor", "(", "X", "[", "i", ":", "i", "+", "batch_size", "]", ",", "dtype", "=", "dtype", ")", "/", "255.", "\n", "y_batch", "=", "torch", ".", "tensor", "(", "y", "[", "i", ":", "i", "+", "batch_size", "]", ")", "\n", "yield", "X_batch", ".", "to", "(", "device", ")", ",", "y_batch", ".", "to", "(", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.train_USCL.linear_eval.cal_total_acc": [[110, 113], ["None"], "function", ["None"], ["def", "cal_total_acc", "(", "acc_list", ")", ":", "\n", "    ", "acc", "=", "(", "acc_list", "[", "0", "]", "*", "476", "+", "acc_list", "[", "1", "]", "*", "369", "+", "acc_list", "[", "2", "]", "*", "487", "+", "acc_list", "[", "3", "]", "*", "360", "+", "acc_list", "[", "4", "]", "*", "424", ")", "/", "2116", "\n", "return", "acc", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.train_USCL.NMI_loss.MILoss": [[16, 44], ["numpy.mean", "numpy.mean", "range", "torch.from_numpy", "numpy.array", "numpy.array", "numpy.mean", "numpy.mean", "sklearn.metrics.normalized_mutual_info_score", "numpy.asarray"], "function", ["None"], ["def", "MILoss", "(", "TensorA", "=", "None", ",", "TensorB", "=", "None", ")", ":", "\n", "# TensorA, TensorB = range(112*512*7*7), range(112*512*7*7)", "\n", "#", "\n", "# TensorA, TensorB = np.array(TensorA), np.array(TensorB)", "\n", "# TensorA, TensorB= np.reshape(TensorA, [112, 512, 7, 7]), np.reshape(TensorB, [112, 512, 7, 7])", "\n", "# A1 = np.mean(np.mean(np.mean(TensorA, axis=2), axis=2), axis=1)", "\n", "# B1 = np.mean(np.mean(np.mean(TensorB, axis=2), axis=2), axis=1)", "\n", "# device = 'cpu'", "\n", "# TensorA, TensorB = TensorA.to('cpu'), TensorB.to('cpu')", "\n", "    ", "TensorA", ",", "TensorB", "=", "np", ".", "array", "(", "TensorA", ")", ",", "np", ".", "array", "(", "TensorB", ")", "\n", "A1", "=", "np", ".", "mean", "(", "np", ".", "mean", "(", "TensorA", ",", "axis", "=", "2", ")", ",", "axis", "=", "2", ")", "\n", "B1", "=", "np", ".", "mean", "(", "np", ".", "mean", "(", "TensorB", ",", "axis", "=", "2", ")", ",", "axis", "=", "2", ")", "\n", "MI_loss", "=", "0", "\n", "# start = time.time()", "\n", "for", "i", "in", "range", "(", "A1", ".", "shape", "[", "1", "]", ")", ":", "\n", "        ", "TempA", "=", "A1", "[", ":", ",", "i", "]", "\n", "TempB", "=", "B1", "[", ":", ",", "i", "]", "\n", "MI_loss", "+=", "metrics", ".", "normalized_mutual_info_score", "(", "TempA", ",", "TempB", ")", "\n", "", "out", "=", "MI_loss", "/", "A1", ".", "shape", "[", "1", "]", "\n", "# print(time.time() - start)", "\n", "\n", "# start = time.time()", "\n", "# out = NMI(A1, B1)", "\n", "# print(time.time()-start)", "\n", "# start = time.time()", "\n", "# metrics.normalized_mutual_info_score(A1, B1)", "\n", "# print(time.time()-start)", "\n", "return", "torch", ".", "from_numpy", "(", "np", ".", "asarray", "(", "out", ")", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.train_USCL.NMI_loss.NMI": [[46, 74], ["len", "set", "set", "numpy.where", "numpy.where", "numpy.intersect1d", "len", "len", "math.log", "math.log", "len", "len", "len", "math.log", "numpy.where", "numpy.where"], "function", ["None"], ["", "def", "NMI", "(", "A", ",", "B", ")", ":", "\n", "#\u6837\u672c\u70b9\u6570", "\n", "    ", "total", "=", "len", "(", "A", ")", "\n", "A_ids", "=", "set", "(", "A", ")", "\n", "B_ids", "=", "set", "(", "B", ")", "\n", "#\u4e92\u4fe1\u606f\u8ba1\u7b97", "\n", "MI", "=", "0", "\n", "eps", "=", "1.4e-45", "\n", "for", "idA", "in", "A_ids", ":", "\n", "        ", "for", "idB", "in", "B_ids", ":", "\n", "            ", "idAOccur", "=", "np", ".", "where", "(", "A", "==", "idA", ")", "\n", "idBOccur", "=", "np", ".", "where", "(", "B", "==", "idB", ")", "\n", "idABOccur", "=", "np", ".", "intersect1d", "(", "idAOccur", ",", "idBOccur", ")", "\n", "px", "=", "1.0", "*", "len", "(", "idAOccur", "[", "0", "]", ")", "/", "total", "\n", "py", "=", "1.0", "*", "len", "(", "idBOccur", "[", "0", "]", ")", "/", "total", "\n", "pxy", "=", "1.0", "*", "len", "(", "idABOccur", ")", "/", "total", "\n", "MI", "=", "MI", "+", "pxy", "*", "math", ".", "log", "(", "pxy", "/", "(", "px", "*", "py", ")", "+", "eps", ",", "2", ")", "\n", "# \u6807\u51c6\u5316\u4e92\u4fe1\u606f", "\n", "", "", "Hx", "=", "0", "\n", "for", "idA", "in", "A_ids", ":", "\n", "        ", "idAOccurCount", "=", "1.0", "*", "len", "(", "np", ".", "where", "(", "A", "==", "idA", ")", "[", "0", "]", ")", "\n", "Hx", "=", "Hx", "-", "(", "idAOccurCount", "/", "total", ")", "*", "math", ".", "log", "(", "idAOccurCount", "/", "total", "+", "eps", ",", "2", ")", "\n", "", "Hy", "=", "0", "\n", "for", "idB", "in", "B_ids", ":", "\n", "        ", "idBOccurCount", "=", "1.0", "*", "len", "(", "np", ".", "where", "(", "B", "==", "idB", ")", "[", "0", "]", ")", "\n", "Hy", "=", "Hy", "-", "(", "idBOccurCount", "/", "total", ")", "*", "math", ".", "log", "(", "idBOccurCount", "/", "total", "+", "eps", ",", "2", ")", "\n", "", "MIhat", "=", "2.0", "*", "MI", "/", "(", "Hx", "+", "Hy", ")", "\n", "return", "MIhat", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.train_USCL.run.main": [[10, 36], ["range", "len", "range", "len", "random.sample", "random.sample", "yaml.load", "data_aug.dataset_wrapper_Ultrasound_Video_Mixup.DataSetWrapper", "range", "range", "math.ceil", "range", "math.ceil", "open", "len", "simclr.SimCLR", "simclr.SimCLR.train"], "function", ["home.repos.pwc.inspect_result.983632847_USCL.train_USCL.simclr.SimCLR.train"], ["def", "main", "(", ")", ":", "\n", "# Totalcases = 1051    # US-4", "\n", "# Totalcases = 63      # CLUST", "\n", "# Totalcases = 296     # Liver", "\n", "    ", "Totalcases", "=", "22", "# Butterfly", "\n", "# Totalcases = 670     # COVID19", "\n", "\n", "\n", "# LabelRate = [0.01, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1]", "\n", "LabelRate", "=", "[", "1", "]", "\n", "\n", "# DataRate = [0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 0.7, 0.8, 0.9, 1.0]", "\n", "DataRate", "=", "[", "1", "]", "\n", "\n", "Checkpoint_Num", "=", "1", "\n", "for", "LL", "in", "range", "(", "len", "(", "LabelRate", ")", ")", ":", "\n", "        ", "for", "DD", "in", "range", "(", "len", "(", "DataRate", ")", ")", ":", "\n", "            ", "LabelList", "=", "random", ".", "sample", "(", "range", "(", "0", ",", "Totalcases", ")", ",", "math", ".", "ceil", "(", "Totalcases", "*", "LabelRate", "[", "LL", "]", ")", ")", "\n", "DataList", "=", "random", ".", "sample", "(", "range", "(", "0", ",", "Totalcases", ")", ",", "math", ".", "ceil", "(", "Totalcases", "*", "DataRate", "[", "DD", "]", ")", ")", "\n", "config", "=", "yaml", ".", "load", "(", "open", "(", "\"config.yaml\"", ",", "\"r\"", ")", ",", "Loader", "=", "yaml", ".", "FullLoader", ")", "\n", "dataset", "=", "DataSetWrapper", "(", "config", "[", "'batch_size'", "]", ",", "LabelList", ",", "DataList", ",", "Checkpoint_Num", ",", "**", "config", "[", "'dataset'", "]", ")", "\n", "lumbda", "=", "[", "0.1", ",", "0.2", ",", "0.3", ",", "0.4", ",", "0.5", "]", "# Semi-supervised CL, default=0.2", "\n", "for", "i", "in", "range", "(", "len", "(", "lumbda", ")", ")", ":", "\n", "                ", "simclr", "=", "SimCLR", "(", "dataset", ",", "config", ",", "lumbda", "[", "i", "]", ",", "Checkpoint_Num", ")", "\n", "simclr", ".", "train", "(", ")", "\n", "Checkpoint_Num", "+=", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.models.bam.Flatten.forward": [[7, 9], ["x.view", "x.size"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "", "", "class", "ChannelGate", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.models.bam.ChannelGate.__init__": [[10, 23], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "bam.ChannelGate.gate_c.add_module", "range", "bam.ChannelGate.gate_c.add_module", "bam.Flatten", "bam.ChannelGate.gate_c.add_module", "bam.ChannelGate.gate_c.add_module", "bam.ChannelGate.gate_c.add_module", "torch.Linear", "torch.Linear", "torch.Linear", "len", "torch.Linear", "torch.Linear", "torch.Linear", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.BatchNorm1d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.983632847_USCL.loss.nt_xent.NTXentLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gate_channel", ",", "reduction_ratio", "=", "16", ",", "num_layers", "=", "1", ")", ":", "\n", "        ", "super", "(", "ChannelGate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gate_activation", "=", "gate_activation", "\n", "self", ".", "gate_c", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "gate_c", ".", "add_module", "(", "'flatten'", ",", "Flatten", "(", ")", ")", "\n", "gate_channels", "=", "[", "gate_channel", "]", "\n", "gate_channels", "+=", "[", "gate_channel", "//", "reduction_ratio", "]", "*", "num_layers", "\n", "gate_channels", "+=", "[", "gate_channel", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "gate_channels", ")", "-", "2", ")", ":", "\n", "            ", "self", ".", "gate_c", ".", "add_module", "(", "'gate_c_fc_%d'", "%", "i", ",", "nn", ".", "Linear", "(", "gate_channels", "[", "i", "]", ",", "gate_channels", "[", "i", "+", "1", "]", ")", ")", "\n", "self", ".", "gate_c", ".", "add_module", "(", "'gate_c_bn_%d'", "%", "(", "i", "+", "1", ")", ",", "nn", ".", "BatchNorm1d", "(", "gate_channels", "[", "i", "+", "1", "]", ")", ")", "\n", "self", ".", "gate_c", ".", "add_module", "(", "'gate_c_relu_%d'", "%", "(", "i", "+", "1", ")", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "self", ".", "gate_c", ".", "add_module", "(", "'gate_c_fc_final'", ",", "nn", ".", "Linear", "(", "gate_channels", "[", "-", "2", "]", ",", "gate_channels", "[", "-", "1", "]", ")", ")", "\n", "", "def", "forward", "(", "self", ",", "in_tensor", ")", ":", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.models.bam.ChannelGate.forward": [[23, 26], ["torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "bam.ChannelGate.gate_c().unsqueeze().unsqueeze().expand_as", "in_tensor.size", "in_tensor.size", "bam.ChannelGate.gate_c().unsqueeze().unsqueeze", "bam.ChannelGate.gate_c().unsqueeze", "bam.ChannelGate.gate_c"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "in_tensor", ")", ":", "\n", "        ", "avg_pool", "=", "F", ".", "avg_pool2d", "(", "in_tensor", ",", "in_tensor", ".", "size", "(", "2", ")", ",", "stride", "=", "in_tensor", ".", "size", "(", "2", ")", ")", "\n", "return", "self", ".", "gate_c", "(", "avg_pool", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", ".", "expand_as", "(", "in_tensor", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.models.bam.SpatialGate.__init__": [[28, 40], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "bam.SpatialGate.gate_s.add_module", "bam.SpatialGate.gate_s.add_module", "bam.SpatialGate.gate_s.add_module", "range", "bam.SpatialGate.gate_s.add_module", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "bam.SpatialGate.gate_s.add_module", "bam.SpatialGate.gate_s.add_module", "bam.SpatialGate.gate_s.add_module", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.983632847_USCL.loss.nt_xent.NTXentLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gate_channel", ",", "reduction_ratio", "=", "16", ",", "dilation_conv_num", "=", "2", ",", "dilation_val", "=", "4", ")", ":", "\n", "        ", "super", "(", "SpatialGate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gate_s", "=", "nn", ".", "Sequential", "(", ")", "\n", "self", ".", "gate_s", ".", "add_module", "(", "'gate_s_conv_reduce0'", ",", "nn", ".", "Conv2d", "(", "gate_channel", ",", "gate_channel", "//", "reduction_ratio", ",", "kernel_size", "=", "1", ")", ")", "\n", "self", ".", "gate_s", ".", "add_module", "(", "'gate_s_bn_reduce0'", ",", "nn", ".", "BatchNorm2d", "(", "gate_channel", "//", "reduction_ratio", ")", ")", "\n", "self", ".", "gate_s", ".", "add_module", "(", "'gate_s_relu_reduce0'", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "for", "i", "in", "range", "(", "dilation_conv_num", ")", ":", "\n", "            ", "self", ".", "gate_s", ".", "add_module", "(", "'gate_s_conv_di_%d'", "%", "i", ",", "nn", ".", "Conv2d", "(", "gate_channel", "//", "reduction_ratio", ",", "gate_channel", "//", "reduction_ratio", ",", "kernel_size", "=", "3", ",", "padding", "=", "dilation_val", ",", "dilation", "=", "dilation_val", ")", ")", "\n", "self", ".", "gate_s", ".", "add_module", "(", "'gate_s_bn_di_%d'", "%", "i", ",", "nn", ".", "BatchNorm2d", "(", "gate_channel", "//", "reduction_ratio", ")", ")", "\n", "self", ".", "gate_s", ".", "add_module", "(", "'gate_s_relu_di_%d'", "%", "i", ",", "nn", ".", "ReLU", "(", ")", ")", "\n", "", "self", ".", "gate_s", ".", "add_module", "(", "'gate_s_conv_final'", ",", "nn", ".", "Conv2d", "(", "gate_channel", "//", "reduction_ratio", ",", "1", ",", "kernel_size", "=", "1", ")", ")", "\n", "", "def", "forward", "(", "self", ",", "in_tensor", ")", ":", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.models.bam.SpatialGate.forward": [[40, 42], ["bam.SpatialGate.gate_s().expand_as", "bam.SpatialGate.gate_s"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "in_tensor", ")", ":", "\n", "        ", "return", "self", ".", "gate_s", "(", "in_tensor", ")", ".", "expand_as", "(", "in_tensor", ")", "\n", "", "", "class", "BAM", "(", "nn", ".", "Module", ")", ":", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.models.bam.BAM.__init__": [[43, 47], ["torch.Module.__init__", "bam.ChannelGate", "bam.SpatialGate"], "methods", ["home.repos.pwc.inspect_result.983632847_USCL.loss.nt_xent.NTXentLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gate_channel", ")", ":", "\n", "        ", "super", "(", "BAM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "channel_att", "=", "ChannelGate", "(", "gate_channel", ")", "\n", "self", ".", "spatial_att", "=", "SpatialGate", "(", "gate_channel", ")", "\n", "", "def", "forward", "(", "self", ",", "in_tensor", ")", ":", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.models.bam.BAM.forward": [[47, 50], ["torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "bam.BAM.channel_att", "bam.BAM.spatial_att"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "in_tensor", ")", ":", "\n", "        ", "att", "=", "1", "+", "torch", ".", "sigmoid", "(", "self", ".", "channel_att", "(", "in_tensor", ")", "*", "self", ".", "spatial_att", "(", "in_tensor", ")", ")", "\n", "return", "att", "*", "in_tensor", "\n", "", "", ""]], "home.repos.pwc.inspect_result.983632847_USCL.models.cbam.BasicConv.__init__": [[7, 13], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU"], "methods", ["home.repos.pwc.inspect_result.983632847_USCL.loss.nt_xent.NTXentLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "in_planes", ",", "out_planes", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "0", ",", "dilation", "=", "1", ",", "groups", "=", "1", ",", "relu", "=", "True", ",", "bn", "=", "True", ",", "bias", "=", "False", ")", ":", "\n", "        ", "super", "(", "BasicConv", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "out_channels", "=", "out_planes", "\n", "self", ".", "conv", "=", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "kernel_size", ",", "stride", "=", "stride", ",", "padding", "=", "padding", ",", "dilation", "=", "dilation", ",", "groups", "=", "groups", ",", "bias", "=", "bias", ")", "\n", "self", ".", "bn", "=", "nn", ".", "BatchNorm2d", "(", "out_planes", ",", "eps", "=", "1e-5", ",", "momentum", "=", "0.01", ",", "affine", "=", "True", ")", "if", "bn", "else", "None", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", ")", "if", "relu", "else", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.models.cbam.BasicConv.forward": [[14, 21], ["cbam.BasicConv.conv", "cbam.BasicConv.bn", "cbam.BasicConv.relu"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv", "(", "x", ")", "\n", "if", "self", ".", "bn", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "bn", "(", "x", ")", "\n", "", "if", "self", ".", "relu", "is", "not", "None", ":", "\n", "            ", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.models.cbam.Flatten.forward": [[23, 25], ["x.view", "x.size"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.models.cbam.ChannelGate.__init__": [[27, 37], ["torch.Module.__init__", "torch.Sequential", "torch.Sequential", "torch.Sequential", "cbam.Flatten", "torch.Linear", "torch.Linear", "torch.Linear", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.983632847_USCL.loss.nt_xent.NTXentLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gate_channels", ",", "reduction_ratio", "=", "16", ",", "pool_types", "=", "[", "'avg'", ",", "'max'", "]", ")", ":", "\n", "        ", "super", "(", "ChannelGate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "gate_channels", "=", "gate_channels", "\n", "self", ".", "mlp", "=", "nn", ".", "Sequential", "(", "\n", "Flatten", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "gate_channels", ",", "gate_channels", "//", "reduction_ratio", ")", ",", "\n", "nn", ".", "ReLU", "(", ")", ",", "\n", "nn", ".", "Linear", "(", "gate_channels", "//", "reduction_ratio", ",", "gate_channels", ")", "\n", ")", "\n", "self", ".", "pool_types", "=", "pool_types", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.models.cbam.ChannelGate.forward": [[37, 61], ["torch.sigmoid().unsqueeze().unsqueeze().expand_as", "torch.sigmoid().unsqueeze().unsqueeze().expand_as", "torch.sigmoid().unsqueeze().unsqueeze().expand_as", "torch.sigmoid().unsqueeze().unsqueeze().expand_as", "torch.sigmoid().unsqueeze().unsqueeze().expand_as", "torch.sigmoid().unsqueeze().unsqueeze().expand_as", "torch.sigmoid().unsqueeze().unsqueeze().expand_as", "torch.sigmoid().unsqueeze().unsqueeze().expand_as", "torch.sigmoid().unsqueeze().unsqueeze().expand_as", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "cbam.ChannelGate.mlp", "torch.sigmoid().unsqueeze().unsqueeze", "torch.sigmoid().unsqueeze().unsqueeze", "torch.sigmoid().unsqueeze().unsqueeze", "torch.sigmoid().unsqueeze().unsqueeze", "torch.sigmoid().unsqueeze().unsqueeze", "torch.sigmoid().unsqueeze().unsqueeze", "torch.sigmoid().unsqueeze().unsqueeze", "torch.sigmoid().unsqueeze().unsqueeze", "torch.sigmoid().unsqueeze().unsqueeze", "torch.max_pool2d", "torch.max_pool2d", "torch.max_pool2d", "cbam.ChannelGate.mlp", "x.size", "x.size", "torch.lp_pool2d", "torch.lp_pool2d", "torch.lp_pool2d", "cbam.ChannelGate.mlp", "torch.sigmoid().unsqueeze", "torch.sigmoid().unsqueeze", "torch.sigmoid().unsqueeze", "torch.sigmoid().unsqueeze", "torch.sigmoid().unsqueeze", "torch.sigmoid().unsqueeze", "torch.sigmoid().unsqueeze", "torch.sigmoid().unsqueeze", "torch.sigmoid().unsqueeze", "x.size", "x.size", "x.size", "x.size", "cbam.logsumexp_2d", "cbam.ChannelGate.mlp", "x.size", "x.size", "x.size", "x.size", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "x.size", "x.size"], "methods", ["home.repos.pwc.inspect_result.983632847_USCL.models.cbam.logsumexp_2d"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "channel_att_sum", "=", "None", "\n", "for", "pool_type", "in", "self", ".", "pool_types", ":", "\n", "            ", "if", "pool_type", "==", "'avg'", ":", "\n", "                ", "avg_pool", "=", "F", ".", "avg_pool2d", "(", "x", ",", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ",", "stride", "=", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ")", "\n", "channel_att_raw", "=", "self", ".", "mlp", "(", "avg_pool", ")", "\n", "", "elif", "pool_type", "==", "'max'", ":", "\n", "                ", "max_pool", "=", "F", ".", "max_pool2d", "(", "x", ",", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ",", "stride", "=", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ")", "\n", "channel_att_raw", "=", "self", ".", "mlp", "(", "max_pool", ")", "\n", "", "elif", "pool_type", "==", "'lp'", ":", "\n", "                ", "lp_pool", "=", "F", ".", "lp_pool2d", "(", "x", ",", "2", ",", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ",", "stride", "=", "(", "x", ".", "size", "(", "2", ")", ",", "x", ".", "size", "(", "3", ")", ")", ")", "\n", "channel_att_raw", "=", "self", ".", "mlp", "(", "lp_pool", ")", "\n", "", "elif", "pool_type", "==", "'lse'", ":", "\n", "# LSE pool only", "\n", "                ", "lse_pool", "=", "logsumexp_2d", "(", "x", ")", "\n", "channel_att_raw", "=", "self", ".", "mlp", "(", "lse_pool", ")", "\n", "\n", "", "if", "channel_att_sum", "is", "None", ":", "\n", "                ", "channel_att_sum", "=", "channel_att_raw", "\n", "", "else", ":", "\n", "                ", "channel_att_sum", "=", "channel_att_sum", "+", "channel_att_raw", "\n", "\n", "", "", "scale", "=", "torch", ".", "sigmoid", "(", "channel_att_sum", ")", ".", "unsqueeze", "(", "2", ")", ".", "unsqueeze", "(", "3", ")", ".", "expand_as", "(", "x", ")", "\n", "return", "x", "*", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.models.cbam.ChannelPool.forward": [[69, 71], ["torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "torch.cat", "[].unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean().unsqueeze", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max", "torch.max"], "methods", ["None"], ["    ", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "return", "torch", ".", "cat", "(", "(", "torch", ".", "max", "(", "x", ",", "1", ")", "[", "0", "]", ".", "unsqueeze", "(", "1", ")", ",", "torch", ".", "mean", "(", "x", ",", "1", ")", ".", "unsqueeze", "(", "1", ")", ")", ",", "dim", "=", "1", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.models.cbam.SpatialGate.__init__": [[73, 78], ["torch.Module.__init__", "cbam.ChannelPool", "cbam.BasicConv"], "methods", ["home.repos.pwc.inspect_result.983632847_USCL.loss.nt_xent.NTXentLoss.__init__"], ["    ", "def", "__init__", "(", "self", ")", ":", "\n", "        ", "super", "(", "SpatialGate", ",", "self", ")", ".", "__init__", "(", ")", "\n", "kernel_size", "=", "7", "\n", "self", ".", "compress", "=", "ChannelPool", "(", ")", "\n", "self", ".", "spatial", "=", "BasicConv", "(", "2", ",", "1", ",", "kernel_size", ",", "stride", "=", "1", ",", "padding", "=", "(", "kernel_size", "-", "1", ")", "//", "2", ",", "relu", "=", "False", ")", "\n", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.models.cbam.SpatialGate.forward": [[78, 83], ["cbam.SpatialGate.compress", "cbam.SpatialGate.spatial", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid", "torch.sigmoid"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x_compress", "=", "self", ".", "compress", "(", "x", ")", "\n", "x_out", "=", "self", ".", "spatial", "(", "x_compress", ")", "\n", "scale", "=", "torch", ".", "sigmoid", "(", "x_out", ")", "# broadcasting", "\n", "return", "x", "*", "scale", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.models.cbam.CBAM.__init__": [[85, 91], ["torch.Module.__init__", "cbam.ChannelGate", "cbam.SpatialGate"], "methods", ["home.repos.pwc.inspect_result.983632847_USCL.loss.nt_xent.NTXentLoss.__init__"], ["    ", "def", "__init__", "(", "self", ",", "gate_channels", ",", "reduction_ratio", "=", "16", ",", "pool_types", "=", "[", "'avg'", ",", "'max'", "]", ",", "no_spatial", "=", "False", ")", ":", "\n", "        ", "super", "(", "CBAM", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "ChannelGate", "=", "ChannelGate", "(", "gate_channels", ",", "reduction_ratio", ",", "pool_types", ")", "\n", "self", ".", "no_spatial", "=", "no_spatial", "\n", "if", "not", "no_spatial", ":", "\n", "            ", "self", ".", "SpatialGate", "=", "SpatialGate", "(", ")", "\n", "", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.models.cbam.CBAM.forward": [[91, 104], ["cbam.CBAM.ChannelGate", "cbam.CBAM.SpatialGate"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "## CBAM", "\n", "        ", "x_out", "=", "self", ".", "ChannelGate", "(", "x", ")", "\n", "if", "not", "self", ".", "no_spatial", ":", "\n", "            ", "x_out", "=", "self", ".", "SpatialGate", "(", "x_out", ")", "\n", "\n", "## Spatial", "\n", "# if not self.no_spatial:", "\n", "#     x_out = self.SpatialGate(x)", "\n", "\n", "## Channel", "\n", "# x_out = self.ChannelGate(x)", "\n", "", "return", "x_out", "\n", "", "", ""]], "home.repos.pwc.inspect_result.983632847_USCL.models.cbam.logsumexp_2d": [[62, 67], ["tensor.view", "torch.max", "torch.max", "torch.max", "tensor.size", "tensor.size"], "function", ["None"], ["", "", "def", "logsumexp_2d", "(", "tensor", ")", ":", "\n", "    ", "tensor_flatten", "=", "tensor", ".", "view", "(", "tensor", ".", "size", "(", "0", ")", ",", "tensor", ".", "size", "(", "1", ")", ",", "-", "1", ")", "\n", "s", ",", "_", "=", "torch", ".", "max", "(", "tensor_flatten", ",", "dim", "=", "2", ",", "keepdim", "=", "True", ")", "\n", "outputs", "=", "s", "+", "(", "tensor_flatten", "-", "s", ")", ".", "exp", "(", ")", ".", "sum", "(", "dim", "=", "2", ",", "keepdim", "=", "True", ")", ".", "log", "(", ")", "\n", "return", "outputs", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.models.model_resnet.BasicBlock.__init__": [[31, 46], ["torch.Module.__init__", "model_resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "model_resnet.conv3x3", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "cbam.CBAM"], "methods", ["home.repos.pwc.inspect_result.983632847_USCL.loss.nt_xent.NTXentLoss.__init__", "home.repos.pwc.inspect_result.983632847_USCL.models.model_resnet.conv3x3", "home.repos.pwc.inspect_result.983632847_USCL.models.model_resnet.conv3x3"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "use_cbam", "=", "False", ")", ":", "\n", "        ", "super", "(", "BasicBlock", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "conv3x3", "(", "inplanes", ",", "planes", ",", "stride", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "conv2", "=", "conv3x3", "(", "planes", ",", "planes", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "# use_cbam = True   # default = False", "\n", "if", "use_cbam", ":", "\n", "            ", "self", ".", "cbam", "=", "CBAM", "(", "planes", ",", "16", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "cbam", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.models.model_resnet.BasicBlock.forward": [[47, 67], ["model_resnet.BasicBlock.conv1", "model_resnet.BasicBlock.bn1", "model_resnet.BasicBlock.relu", "model_resnet.BasicBlock.conv2", "model_resnet.BasicBlock.bn2", "model_resnet.BasicBlock.relu", "model_resnet.BasicBlock.downsample", "model_resnet.BasicBlock.cbam"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "if", "not", "self", ".", "cbam", "is", "None", ":", "\n", "            ", "out", "=", "self", ".", "cbam", "(", "out", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.models.model_resnet.Bottleneck.__init__": [[71, 89], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "cbam.CBAM"], "methods", ["home.repos.pwc.inspect_result.983632847_USCL.loss.nt_xent.NTXentLoss.__init__"], ["def", "__init__", "(", "self", ",", "inplanes", ",", "planes", ",", "stride", "=", "1", ",", "downsample", "=", "None", ",", "use_cbam", "=", "False", ")", ":", "\n", "        ", "super", "(", "Bottleneck", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "inplanes", ",", "planes", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn2", "=", "nn", ".", "BatchNorm2d", "(", "planes", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "planes", ",", "planes", "*", "4", ",", "kernel_size", "=", "1", ",", "bias", "=", "False", ")", "\n", "self", ".", "bn3", "=", "nn", ".", "BatchNorm2d", "(", "planes", "*", "4", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "self", ".", "downsample", "=", "downsample", "\n", "self", ".", "stride", "=", "stride", "\n", "\n", "# use_cbam = True  # default = False", "\n", "if", "use_cbam", ":", "\n", "            ", "self", ".", "cbam", "=", "CBAM", "(", "planes", "*", "4", ",", "16", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "cbam", "=", "None", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.models.model_resnet.Bottleneck.forward": [[90, 114], ["model_resnet.Bottleneck.conv1", "model_resnet.Bottleneck.bn1", "model_resnet.Bottleneck.relu", "model_resnet.Bottleneck.conv2", "model_resnet.Bottleneck.bn2", "model_resnet.Bottleneck.relu", "model_resnet.Bottleneck.conv3", "model_resnet.Bottleneck.bn3", "model_resnet.Bottleneck.relu", "model_resnet.Bottleneck.downsample", "model_resnet.Bottleneck.cbam"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "residual", "=", "x", "\n", "\n", "out", "=", "self", ".", "conv1", "(", "x", ")", "\n", "out", "=", "self", ".", "bn1", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv2", "(", "out", ")", "\n", "out", "=", "self", ".", "bn2", "(", "out", ")", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "out", "=", "self", ".", "conv3", "(", "out", ")", "\n", "out", "=", "self", ".", "bn3", "(", "out", ")", "\n", "\n", "if", "self", ".", "downsample", "is", "not", "None", ":", "\n", "            ", "residual", "=", "self", ".", "downsample", "(", "x", ")", "\n", "\n", "", "if", "not", "self", ".", "cbam", "is", "None", ":", "\n", "            ", "out", "=", "self", ".", "cbam", "(", "out", ")", "\n", "\n", "", "out", "+=", "residual", "\n", "out", "=", "self", ".", "relu", "(", "out", ")", "\n", "\n", "return", "out", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.models.model_resnet.ResNet.__init__": [[118, 159], ["torch.Module.__init__", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.ReLU", "torch.ReLU", "torch.ReLU", "torch.ReLU", "model_resnet.ResNet._make_layer", "model_resnet.ResNet._make_layer", "model_resnet.ResNet._make_layer", "model_resnet.ResNet._make_layer", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "model_resnet.ResNet.state_dict", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.AvgPool2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "bam.BAM", "bam.BAM", "bam.BAM", "key.split", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "torch.nn.init.kaiming_normal_", "key.split", "model_resnet.ResNet.state_dict", "model_resnet.ResNet.state_dict", "model_resnet.ResNet.state_dict", "model_resnet.ResNet.state_dict"], "methods", ["home.repos.pwc.inspect_result.983632847_USCL.loss.nt_xent.NTXentLoss.__init__", "home.repos.pwc.inspect_result.983632847_USCL.models.model_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.983632847_USCL.models.model_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.983632847_USCL.models.model_resnet.ResNet._make_layer", "home.repos.pwc.inspect_result.983632847_USCL.models.model_resnet.ResNet._make_layer"], ["    ", "def", "__init__", "(", "self", ",", "block", ",", "layers", ",", "network_type", "=", "\"ImageNet\"", ",", "num_classes", "=", "2", ",", "att_type", "=", "\"CBAM\"", ")", ":", "\n", "        ", "self", ".", "inplanes", "=", "64", "\n", "super", "(", "ResNet", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "network_type", "=", "network_type", "\n", "# different model config between ImageNet and CIFAR ", "\n", "if", "network_type", "==", "\"ImageNet\"", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "7", ",", "stride", "=", "2", ",", "padding", "=", "3", ",", "bias", "=", "False", ")", "\n", "self", ".", "maxpool", "=", "nn", ".", "MaxPool2d", "(", "kernel_size", "=", "3", ",", "stride", "=", "2", ",", "padding", "=", "1", ")", "\n", "self", ".", "avgpool", "=", "nn", ".", "AvgPool2d", "(", "7", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n", "", "self", ".", "bn1", "=", "nn", ".", "BatchNorm2d", "(", "64", ")", "\n", "self", ".", "relu", "=", "nn", ".", "ReLU", "(", "inplace", "=", "True", ")", "\n", "\n", "if", "att_type", "==", "'BAM'", ":", "\n", "            ", "self", ".", "bam1", "=", "BAM", "(", "64", "*", "block", ".", "expansion", ")", "\n", "self", ".", "bam2", "=", "BAM", "(", "128", "*", "block", ".", "expansion", ")", "\n", "self", ".", "bam3", "=", "BAM", "(", "256", "*", "block", ".", "expansion", ")", "\n", "", "else", ":", "\n", "            ", "self", ".", "bam1", ",", "self", ".", "bam2", ",", "self", ".", "bam3", "=", "None", ",", "None", ",", "None", "\n", "\n", "", "self", ".", "layer1", "=", "self", ".", "_make_layer", "(", "block", ",", "64", ",", "layers", "[", "0", "]", ",", "att_type", "=", "att_type", ")", "\n", "self", ".", "layer2", "=", "self", ".", "_make_layer", "(", "block", ",", "128", ",", "layers", "[", "1", "]", ",", "stride", "=", "2", ",", "att_type", "=", "att_type", ")", "\n", "self", ".", "layer3", "=", "self", ".", "_make_layer", "(", "block", ",", "256", ",", "layers", "[", "2", "]", ",", "stride", "=", "2", ",", "att_type", "=", "att_type", ")", "\n", "self", ".", "layer4", "=", "self", ".", "_make_layer", "(", "block", ",", "512", ",", "layers", "[", "3", "]", ",", "stride", "=", "2", ",", "att_type", "=", "att_type", ")", "\n", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "512", "*", "block", ".", "expansion", ",", "num_classes", ")", "\n", "\n", "init", ".", "kaiming_normal_", "(", "self", ".", "fc", ".", "weight", ")", "\n", "for", "key", "in", "self", ".", "state_dict", "(", ")", ":", "\n", "            ", "if", "key", ".", "split", "(", "'.'", ")", "[", "-", "1", "]", "==", "\"weight\"", ":", "\n", "                ", "if", "\"conv\"", "in", "key", ":", "\n", "                    ", "init", ".", "kaiming_normal_", "(", "self", ".", "state_dict", "(", ")", "[", "key", "]", ",", "mode", "=", "'fan_out'", ")", "\n", "", "if", "\"bn\"", "in", "key", ":", "\n", "                    ", "if", "\"SpatialGate\"", "in", "key", ":", "\n", "                        ", "self", ".", "state_dict", "(", ")", "[", "key", "]", "[", "...", "]", "=", "0", "\n", "", "else", ":", "\n", "                        ", "self", ".", "state_dict", "(", ")", "[", "key", "]", "[", "...", "]", "=", "1", "\n", "", "", "", "elif", "key", ".", "split", "(", "\".\"", ")", "[", "-", "1", "]", "==", "'bias'", ":", "\n", "                ", "self", ".", "state_dict", "(", ")", "[", "key", "]", "[", "...", "]", "=", "0", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.models.model_resnet.ResNet._make_layer": [[160, 176], ["layers.append", "range", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "torch.Sequential", "block", "layers.append", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "torch.BatchNorm2d", "block"], "methods", ["None"], ["", "", "", "def", "_make_layer", "(", "self", ",", "block", ",", "planes", ",", "blocks", ",", "stride", "=", "1", ",", "att_type", "=", "None", ")", ":", "\n", "        ", "downsample", "=", "None", "\n", "if", "stride", "!=", "1", "or", "self", ".", "inplanes", "!=", "planes", "*", "block", ".", "expansion", ":", "\n", "            ", "downsample", "=", "nn", ".", "Sequential", "(", "\n", "nn", ".", "Conv2d", "(", "self", ".", "inplanes", ",", "planes", "*", "block", ".", "expansion", ",", "\n", "kernel_size", "=", "1", ",", "stride", "=", "stride", ",", "bias", "=", "False", ")", ",", "\n", "nn", ".", "BatchNorm2d", "(", "planes", "*", "block", ".", "expansion", ")", ",", "\n", ")", "\n", "\n", "", "layers", "=", "[", "]", "\n", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "stride", ",", "downsample", ",", "use_cbam", "=", "att_type", "==", "'CBAM'", ")", ")", "\n", "self", ".", "inplanes", "=", "planes", "*", "block", ".", "expansion", "\n", "for", "i", "in", "range", "(", "1", ",", "blocks", ")", ":", "\n", "            ", "layers", ".", "append", "(", "block", "(", "self", ".", "inplanes", ",", "planes", ",", "use_cbam", "=", "att_type", "==", "'CBAM'", ")", ")", "\n", "\n", "", "return", "nn", ".", "Sequential", "(", "*", "layers", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.models.model_resnet.ResNet.forward": [[177, 205], ["model_resnet.ResNet.conv1", "model_resnet.ResNet.bn1", "model_resnet.ResNet.relu", "model_resnet.ResNet.layer1", "model_resnet.ResNet.layer2", "model_resnet.ResNet.layer3", "model_resnet.ResNet.layer4", "torch.avg_pool2d.view", "model_resnet.ResNet.fc", "model_resnet.ResNet.maxpool", "model_resnet.ResNet.bam1", "model_resnet.ResNet.bam2", "model_resnet.ResNet.bam3", "model_resnet.ResNet.avgpool", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d", "torch.avg_pool2d.size"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "self", ".", "bn1", "(", "x", ")", "\n", "x", "=", "self", ".", "relu", "(", "x", ")", "\n", "if", "self", ".", "network_type", "==", "\"ImageNet\"", ":", "\n", "            ", "x", "=", "self", ".", "maxpool", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "layer1", "(", "x", ")", "\n", "if", "not", "self", ".", "bam1", "is", "None", ":", "\n", "            ", "x", "=", "self", ".", "bam1", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "layer2", "(", "x", ")", "\n", "if", "not", "self", ".", "bam2", "is", "None", ":", "\n", "            ", "x", "=", "self", ".", "bam2", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "layer3", "(", "x", ")", "\n", "if", "not", "self", ".", "bam3", "is", "None", ":", "\n", "            ", "x", "=", "self", ".", "bam3", "(", "x", ")", "\n", "\n", "", "x", "=", "self", ".", "layer4", "(", "x", ")", "\n", "\n", "if", "self", ".", "network_type", "==", "\"ImageNet\"", ":", "\n", "            ", "x", "=", "self", ".", "avgpool", "(", "x", ")", "\n", "", "else", ":", "\n", "            ", "x", "=", "F", ".", "avg_pool2d", "(", "x", ",", "4", ")", "\n", "", "x", "=", "x", ".", "view", "(", "x", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "x", "=", "self", ".", "fc", "(", "x", ")", "\n", "return", "x", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.models.model_resnet.conv3x3": [[23, 27], ["torch.Conv2d"], "function", ["None"], ["def", "conv3x3", "(", "in_planes", ",", "out_planes", ",", "stride", "=", "1", ")", ":", "\n", "    ", "\"3x3 convolution with padding\"", "\n", "return", "nn", ".", "Conv2d", "(", "in_planes", ",", "out_planes", ",", "kernel_size", "=", "3", ",", "stride", "=", "stride", ",", "\n", "padding", "=", "1", ",", "bias", "=", "False", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.models.model_resnet.ResidualNet": [[206, 224], ["model_resnet.ResNet", "model_resnet.ResNet", "model_resnet.ResNet", "model_resnet.ResNet"], "function", ["None"], ["", "", "def", "ResidualNet", "(", "network_type", ",", "depth", ",", "num_classes", ",", "att_type", ")", ":", "\n", "\n", "    ", "assert", "network_type", "in", "[", "\"ImageNet\"", ",", "\"CIFAR10\"", ",", "\"CIFAR100\"", "]", ",", "\"network type should be ImageNet or CIFAR10 / CIFAR100\"", "\n", "assert", "depth", "in", "[", "18", ",", "34", ",", "50", ",", "101", "]", ",", "'network depth should be 18, 34, 50 or 101'", "\n", "\n", "if", "depth", "==", "18", ":", "\n", "        ", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "network_type", ",", "num_classes", ",", "att_type", ")", "\n", "\n", "", "elif", "depth", "==", "34", ":", "\n", "        ", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "network_type", ",", "num_classes", ",", "att_type", ")", "\n", "\n", "", "elif", "depth", "==", "50", ":", "\n", "        ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "network_type", ",", "num_classes", ",", "att_type", ")", "\n", "\n", "", "elif", "depth", "==", "101", ":", "\n", "        ", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "network_type", ",", "num_classes", ",", "att_type", ")", "\n", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.models.model_resnet.resnet18_cbam": [[227, 240], ["model_resnet.ResNet", "torch.load_url", "ResNet.state_dict", "model.state_dict.update", "ResNet.load_state_dict"], "function", ["None"], ["", "def", "resnet18_cbam", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-18 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "2", ",", "2", ",", "2", ",", "2", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "pretrained_state_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet18'", "]", ")", "\n", "now_state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "now_state_dict", ".", "update", "(", "pretrained_state_dict", ")", "\n", "model", ".", "load_state_dict", "(", "now_state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.models.model_resnet.resnet34_cbam": [[242, 255], ["model_resnet.ResNet", "torch.load_url", "ResNet.state_dict", "model.state_dict.update", "ResNet.load_state_dict"], "function", ["None"], ["", "def", "resnet34_cbam", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-34 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "BasicBlock", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "pretrained_state_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet34'", "]", ")", "\n", "now_state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "now_state_dict", ".", "update", "(", "pretrained_state_dict", ")", "\n", "model", ".", "load_state_dict", "(", "now_state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.models.model_resnet.resnet50_cbam": [[257, 270], ["model_resnet.ResNet", "torch.load_url", "ResNet.state_dict", "model.state_dict.update", "ResNet.load_state_dict"], "function", ["None"], ["", "def", "resnet50_cbam", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-50 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "6", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "pretrained_state_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet50'", "]", ")", "\n", "now_state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "now_state_dict", ".", "update", "(", "pretrained_state_dict", ")", "\n", "model", ".", "load_state_dict", "(", "now_state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.models.model_resnet.resnet101_cbam": [[272, 285], ["model_resnet.ResNet", "torch.load_url", "ResNet.state_dict", "model.state_dict.update", "ResNet.load_state_dict"], "function", ["None"], ["", "def", "resnet101_cbam", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-101 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "4", ",", "23", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "pretrained_state_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet101'", "]", ")", "\n", "now_state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "now_state_dict", ".", "update", "(", "pretrained_state_dict", ")", "\n", "model", ".", "load_state_dict", "(", "now_state_dict", ")", "\n", "", "return", "model", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.models.model_resnet.resnet152_cbam": [[287, 300], ["model_resnet.ResNet", "torch.load_url", "ResNet.state_dict", "model.state_dict.update", "ResNet.load_state_dict"], "function", ["None"], ["", "def", "resnet152_cbam", "(", "pretrained", "=", "False", ",", "**", "kwargs", ")", ":", "\n", "    ", "\"\"\"Constructs a ResNet-152 model.\n\n    Args:\n        pretrained (bool): If True, returns a model pre-trained on ImageNet\n    \"\"\"", "\n", "model", "=", "ResNet", "(", "Bottleneck", ",", "[", "3", ",", "8", ",", "36", ",", "3", "]", ",", "**", "kwargs", ")", "\n", "if", "pretrained", ":", "\n", "        ", "pretrained_state_dict", "=", "model_zoo", ".", "load_url", "(", "model_urls", "[", "'resnet152'", "]", ")", "\n", "now_state_dict", "=", "model", ".", "state_dict", "(", ")", "\n", "now_state_dict", ".", "update", "(", "pretrained_state_dict", ")", "\n", "model", ".", "load_state_dict", "(", "now_state_dict", ")", "\n", "", "return", "model", "", "", ""]], "home.repos.pwc.inspect_result.983632847_USCL.models.baseline_encoder.Encoder.__init__": [[10, 21], ["torch.Module.__init__", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.Conv2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.MaxPool2d", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear"], "methods", ["home.repos.pwc.inspect_result.983632847_USCL.loss.nt_xent.NTXentLoss.__init__"], ["def", "__init__", "(", "self", ",", "out_dim", "=", "64", ")", ":", "\n", "        ", "super", "(", "Encoder", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "conv1", "=", "nn", ".", "Conv2d", "(", "3", ",", "16", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv2", "=", "nn", ".", "Conv2d", "(", "16", ",", "32", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv3", "=", "nn", ".", "Conv2d", "(", "32", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "conv4", "=", "nn", ".", "Conv2d", "(", "64", ",", "64", ",", "kernel_size", "=", "3", ",", "stride", "=", "1", ",", "padding", "=", "1", ")", "\n", "self", ".", "pool", "=", "nn", ".", "MaxPool2d", "(", "2", ",", "2", ")", "\n", "\n", "# projection MLP", "\n", "self", ".", "l1", "=", "nn", ".", "Linear", "(", "64", ",", "64", ")", "\n", "self", ".", "l2", "=", "nn", ".", "Linear", "(", "64", ",", "out_dim", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.models.baseline_encoder.Encoder.forward": [[22, 46], ["baseline_encoder.Encoder.conv1", "torch.relu", "torch.relu", "torch.relu", "baseline_encoder.Encoder.pool", "baseline_encoder.Encoder.conv2", "torch.relu", "torch.relu", "torch.relu", "baseline_encoder.Encoder.pool", "baseline_encoder.Encoder.conv3", "torch.relu", "torch.relu", "torch.relu", "baseline_encoder.Encoder.pool", "baseline_encoder.Encoder.conv4", "torch.relu", "torch.relu", "torch.relu", "baseline_encoder.Encoder.pool", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "torch.mean", "baseline_encoder.Encoder.l1", "torch.relu", "torch.relu", "torch.relu", "baseline_encoder.Encoder.l2"], "methods", ["None"], ["", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "x", "=", "self", ".", "conv1", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "pool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv2", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "pool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv3", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "pool", "(", "x", ")", "\n", "\n", "x", "=", "self", ".", "conv4", "(", "x", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "pool", "(", "x", ")", "\n", "\n", "h", "=", "torch", ".", "mean", "(", "x", ",", "dim", "=", "[", "2", ",", "3", "]", ")", "\n", "\n", "x", "=", "self", ".", "l1", "(", "h", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "l2", "(", "x", ")", "\n", "\n", "return", "h", ",", "x", "\n", "", "", ""]], "home.repos.pwc.inspect_result.983632847_USCL.models.resnet_simclr.ResNetSimCLR.__init__": [[10, 43], ["torch.Module.__init__", "resnet_simclr.ResNetSimCLR._get_basemodel", "torch.Sequential", "torch.Sequential", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "torch.Linear", "print", "print", "model_resnet.resnet18_cbam", "model_resnet.resnet50_cbam", "torchvision.resnet18", "torchvision.resnet50", "list", "resnet_simclr.ResNetSimCLR.children"], "methods", ["home.repos.pwc.inspect_result.983632847_USCL.loss.nt_xent.NTXentLoss.__init__", "home.repos.pwc.inspect_result.983632847_USCL.models.resnet_simclr.ResNetSimCLR._get_basemodel", "home.repos.pwc.inspect_result.983632847_USCL.models.model_resnet.resnet18_cbam", "home.repos.pwc.inspect_result.983632847_USCL.models.model_resnet.resnet50_cbam"], ["def", "__init__", "(", "self", ",", "base_model", ",", "out_dim", ",", "pretrained", "=", "False", ")", ":", "\n", "        ", "super", "(", "ResNetSimCLR", ",", "self", ")", ".", "__init__", "(", ")", "\n", "\n", "use_CBAM", "=", "False", "# # use CBAM or not, att_type=\"CBAM\" or None", "\n", "if", "use_CBAM", ":", "\n", "            ", "self", ".", "resnet_dict", "=", "{", "\"resnet18\"", ":", "resnet18_cbam", "(", "pretrained", "=", "pretrained", ")", ",", "\n", "\"resnet50\"", ":", "resnet50_cbam", "(", "pretrained", "=", "pretrained", ")", "}", "\n", "", "else", ":", "\n", "            ", "self", ".", "resnet_dict", "=", "{", "\"resnet18\"", ":", "models", ".", "resnet18", "(", "pretrained", "=", "pretrained", ")", ",", "\n", "\"resnet50\"", ":", "models", ".", "resnet50", "(", "pretrained", "=", "pretrained", ")", "}", "\n", "\n", "\n", "", "if", "pretrained", ":", "\n", "            ", "print", "(", "'\\nImageNet pretrained parameters loaded.\\n'", ")", "\n", "", "else", ":", "\n", "            ", "print", "(", "'\\nRandom initialize model parameters.\\n'", ")", "\n", "\n", "", "resnet", "=", "self", ".", "_get_basemodel", "(", "base_model", ")", "\n", "num_ftrs", "=", "resnet", ".", "fc", ".", "in_features", "\n", "\n", "self", ".", "features", "=", "nn", ".", "Sequential", "(", "*", "list", "(", "resnet", ".", "children", "(", ")", ")", "[", ":", "-", "1", "]", ")", "# discard the last fc layer", "\n", "\n", "# projection MLP", "\n", "self", ".", "l1", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "num_ftrs", ")", "\n", "self", ".", "l2", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "out_dim", ")", "\n", "\n", "#########################################################", "\n", "num_classes", "=", "2", "\n", "self", ".", "fc", "=", "nn", ".", "Linear", "(", "out_dim", ",", "num_classes", ")", "\n", "\n", "## Mixup", "\n", "self", ".", "fc1", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "num_ftrs", ")", "\n", "self", ".", "fc2", "=", "nn", ".", "Linear", "(", "num_ftrs", ",", "num_classes", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.models.resnet_simclr.ResNetSimCLR._get_basemodel": [[44, 51], ["print"], "methods", ["None"], ["", "def", "_get_basemodel", "(", "self", ",", "model_name", ")", ":", "\n", "        ", "try", ":", "\n", "            ", "model", "=", "self", ".", "resnet_dict", "[", "model_name", "]", "\n", "print", "(", "\"Feature extractor:\"", ",", "model_name", ")", "\n", "return", "model", "\n", "", "except", ":", "\n", "            ", "raise", "(", "\"Invalid model name. Check the config file and pass one of: resnet18 or resnet50\"", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.models.resnet_simclr.ResNetSimCLR.forward": [[62, 83], ["resnet_simclr.ResNetSimCLR.features", "resnet_simclr.ResNetSimCLR.squeeze", "resnet_simclr.ResNetSimCLR.l1", "torch.relu", "torch.relu", "resnet_simclr.ResNetSimCLR.l2", "resnet_simclr.ResNetSimCLR.view", "resnet_simclr.ResNetSimCLR.fc", "resnet_simclr.ResNetSimCLR.size"], "methods", ["None"], ["", "", "def", "forward", "(", "self", ",", "x", ")", ":", "\n", "        ", "h", "=", "self", ".", "features", "(", "x", ")", "\n", "h1", "=", "h", ".", "squeeze", "(", ")", "# feature before project g()=h1", "\n", "\n", "x", "=", "self", ".", "l1", "(", "h1", ")", "\n", "x", "=", "F", ".", "relu", "(", "x", ")", "\n", "x", "=", "self", ".", "l2", "(", "x", ")", "\n", "\n", "# 1.classification: feature is before project g()", "\n", "# c = h1", "\n", "# # c = self.avgpool(c)", "\n", "# c = c.view(c.size(0), -1)", "\n", "# c = self.fc1(c)", "\n", "# c = F.relu(c)", "\n", "# c = self.fc2(c)", "\n", "\n", "## 2.classification: feature is the output of project g()", "\n", "c", "=", "x", "\n", "c", "=", "c", ".", "view", "(", "c", ".", "size", "(", "0", ")", ",", "-", "1", ")", "\n", "c", "=", "self", ".", "fc", "(", "c", ")", "\n", "return", "h1", ",", "x", ",", "c", "# the feature vector, the output", "\n", "", "", ""]], "home.repos.pwc.inspect_result.983632847_USCL.data_aug.nonlin_trans.NonlinearTrans.__init__": [[66, 68], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "prob", "=", "0.9", ")", ":", "\n", "        ", "self", ".", "prob", "=", "prob", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.data_aug.nonlin_trans.NonlinearTrans.__call__": [[69, 88], ["nonlin_trans.nonlinear_transformation", "torch.from_numpy.type", "torch.from_numpy"], "methods", ["home.repos.pwc.inspect_result.983632847_USCL.data_aug.nonlin_trans.nonlinear_transformation"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (Tensor): Tensor image of size (C, H, W), values are between 0 and 1\n        Returns:\n            img (Tensor): Tensor image of size (C, H, W) after transformation\n        \"\"\"", "\n", "out_img", "=", "nonlinear_transformation", "(", "img", ",", "prob", "=", "self", ".", "prob", ")", "\n", "try", ":", "\n", "# if transform, the dtype would change from Tensor to ndarray", "\n", "            ", "out_img", "=", "torch", ".", "from_numpy", "(", "out_img", ")", "\n", "", "except", ":", "\n", "# but the img may also remain the origin, still Tensor", "\n", "            ", "pass", "\n", "# out_img = out_img.double()", "\n", "\n", "", "out_img", "=", "out_img", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "\n", "return", "out_img", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.data_aug.nonlin_trans.bernstein_poly": [[11, 17], ["comb"], "function", ["None"], ["", "def", "bernstein_poly", "(", "i", ",", "n", ",", "t", ")", ":", "\n", "    ", "\"\"\"\n     The Bernstein polynomial of n, i as a function of t\n    \"\"\"", "\n", "\n", "return", "comb", "(", "n", ",", "i", ")", "*", "(", "t", "**", "(", "n", "-", "i", ")", ")", "*", "(", "1", "-", "t", ")", "**", "i", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.data_aug.nonlin_trans.bezier_curve": [[19, 45], ["len", "numpy.array", "numpy.array", "numpy.linspace", "numpy.array", "numpy.dot", "numpy.dot", "nonlin_trans.bernstein_poly", "range"], "function", ["home.repos.pwc.inspect_result.983632847_USCL.data_aug.nonlin_trans.bernstein_poly"], ["", "def", "bezier_curve", "(", "points", ",", "nTimes", "=", "1000", ")", ":", "\n", "    ", "\"\"\"\n       Given a set of control points, return the\n       bezier curve defined by the control points.\n\n       Control points should be a list of lists, or list of tuples\n       such as [ [1,1], \n                 [2,3], \n                 [4,5], ..[Xn, Yn] ]\n        nTimes is the number of time steps, defaults to 1000\n\n        See http://processingjs.nihongoresources.com/bezierinfo/\n    \"\"\"", "\n", "\n", "nPoints", "=", "len", "(", "points", ")", "\n", "xPoints", "=", "np", ".", "array", "(", "[", "p", "[", "0", "]", "for", "p", "in", "points", "]", ")", "\n", "yPoints", "=", "np", ".", "array", "(", "[", "p", "[", "1", "]", "for", "p", "in", "points", "]", ")", "\n", "\n", "t", "=", "np", ".", "linspace", "(", "0.0", ",", "1.0", ",", "nTimes", ")", "\n", "\n", "polynomial_array", "=", "np", ".", "array", "(", "[", "bernstein_poly", "(", "i", ",", "nPoints", "-", "1", ",", "t", ")", "for", "i", "in", "range", "(", "0", ",", "nPoints", ")", "]", ")", "\n", "\n", "xvals", "=", "np", ".", "dot", "(", "xPoints", ",", "polynomial_array", ")", "\n", "yvals", "=", "np", ".", "dot", "(", "yPoints", ",", "polynomial_array", ")", "\n", "\n", "return", "xvals", ",", "yvals", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.data_aug.nonlin_trans.nonlinear_transformation": [[47, 59], ["nonlin_trans.bezier_curve", "numpy.interp", "random.random", "random.random", "numpy.sort", "random.random", "random.random", "random.random", "random.random", "numpy.sort", "numpy.sort"], "function", ["home.repos.pwc.inspect_result.983632847_USCL.data_aug.nonlin_trans.bezier_curve"], ["", "def", "nonlinear_transformation", "(", "x", ",", "prob", "=", "0.5", ")", ":", "\n", "    ", "if", "random", ".", "random", "(", ")", ">=", "prob", ":", "\n", "        ", "return", "x", "\n", "", "points", "=", "[", "[", "0", ",", "0", "]", ",", "[", "random", ".", "random", "(", ")", ",", "random", ".", "random", "(", ")", "]", ",", "[", "random", ".", "random", "(", ")", ",", "random", ".", "random", "(", ")", "]", ",", "[", "1", ",", "1", "]", "]", "\n", "xvals", ",", "yvals", "=", "bezier_curve", "(", "points", ",", "nTimes", "=", "1000", ")", "\n", "if", "random", ".", "random", "(", ")", "<", "0.5", ":", "\n", "# Half chance to get flip", "\n", "        ", "xvals", "=", "np", ".", "sort", "(", "xvals", ")", "\n", "", "else", ":", "\n", "        ", "xvals", ",", "yvals", "=", "np", ".", "sort", "(", "xvals", ")", ",", "np", ".", "sort", "(", "yvals", ")", "\n", "", "nonlinear_x", "=", "np", ".", "interp", "(", "x", ",", "xvals", ",", "yvals", ")", "# x => nonlinear_x, interpolate to curve [xvals, yvals]", "\n", "return", "nonlinear_x", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.data_aug.sharpen.Sharpen.__init__": [[12, 14], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "degree", "=", "0", ")", ":", "\n", "        ", "self", ".", "degree", "=", "degree", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.data_aug.sharpen.Sharpen.__call__": [[15, 52], ["img.filter.filter.filter", "PIL.ImageFilter.Kernel", "img.filter.filter.filter", "PIL.ImageFilter.Kernel", "img.filter.filter.filter", "PIL.ImageFilter.Kernel", "img.filter.filter.filter", "PIL.ImageFilter.Kernel", "img.filter.filter.filter", "PIL.ImageFilter.Kernel", "img.filter.filter.filter", "ValueError", "PIL.ImageFilter.Kernel"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (PIL image): input image\n        Returns:\n            img (PIL image): sharpened output image\n        \"\"\"", "\n", "if", "self", ".", "degree", "==", "-", "1", ":", "\n", "            ", "img", "=", "img", ".", "filter", "(", "ImageFilter", ".", "Kernel", "(", "(", "3", ",", "3", ")", ",", "(", "-", "1", ",", "-", "1", "/", "2", ",", "-", "1", ",", "\n", "-", "1", "/", "2", ",", "3", ",", "-", "1", "/", "2", ",", "\n", "-", "1", ",", "-", "1", "/", "2", ",", "-", "1", ")", ")", ")", "# \u6bd4\u539f\u56fe\u8fd8\u6a21\u7cca", "\n", "", "elif", "self", ".", "degree", "==", "0", ":", "# \u539f\u56fe", "\n", "            ", "pass", "\n", "", "elif", "self", ".", "degree", "==", "1", ":", "\n", "            ", "img", "=", "img", ".", "filter", "(", "ImageFilter", ".", "Kernel", "(", "(", "3", ",", "3", ")", ",", "(", "1", ",", "-", "2", ",", "1", ",", "\n", "-", "2", ",", "5", ",", "-", "2", ",", "\n", "1", ",", "-", "2", ",", "1", ")", ")", ")", "# \u5f88\u5f31\uff0c\u51e0\u4e4e\u6ca1\u6709\u4ec0\u4e48\u9510\u5316", "\n", "", "elif", "self", ".", "degree", "==", "2", ":", "\n", "            ", "img", "=", "img", ".", "filter", "(", "ImageFilter", ".", "Kernel", "(", "(", "3", ",", "3", ")", ",", "(", "0", ",", "-", "2", "/", "7", ",", "0", ",", "\n", "-", "2", "/", "7", ",", "19", "/", "7", ",", "-", "2", "/", "7", ",", "\n", "0", ",", "-", "2", "/", "7", ",", "0", ")", ")", ")", "# \u80fd\u770b\u51fa\u4e00\u4e01\u70b9\u9510\u5316", "\n", "", "elif", "self", ".", "degree", "==", "3", ":", "\n", "            ", "img", "=", "img", ".", "filter", "(", "ImageFilter", ".", "Kernel", "(", "(", "3", ",", "3", ")", ",", "(", "0", ",", "-", "1", ",", "0", ",", "\n", "-", "1", ",", "5", ",", "-", "1", ",", "\n", "0", ",", "-", "1", ",", "0", ")", ")", ")", "# \u9510\u5316\u8f83\u660e\u663e", "\n", "", "elif", "self", ".", "degree", "==", "4", ":", "\n", "            ", "img", "=", "img", ".", "filter", "(", "ImageFilter", ".", "Kernel", "(", "(", "3", ",", "3", ")", ",", "(", "-", "1", ",", "-", "1", ",", "-", "1", ",", "\n", "-", "1", ",", "9", ",", "-", "1", ",", "\n", "-", "1", ",", "-", "1", ",", "-", "1", ")", ")", ")", "# \u9510\u5316\u5f88\u660e\u663e", "\n", "", "elif", "self", ".", "degree", "==", "5", ":", "\n", "            ", "img", "=", "img", ".", "filter", "(", "ImageFilter", ".", "Kernel", "(", "(", "3", ",", "3", ")", ",", "(", "-", "1", ",", "-", "4", ",", "-", "1", ",", "\n", "-", "4", ",", "21", ",", "-", "4", ",", "\n", "-", "1", ",", "-", "4", ",", "-", "1", ")", ")", ")", "# \u6700\u5f3a", "\n", "", "else", ":", "\n", "            ", "raise", "ValueError", "(", "'The degree must be integer between -1 and 5'", ")", "\n", "\n", "", "return", "img", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.data_aug.outpainting.Outpainting.__init__": [[11, 13], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "n_holes", "=", "5", ")", ":", "\n", "        ", "self", ".", "n_holes", "=", "n_holes", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.data_aug.outpainting.Outpainting.__call__": [[14, 42], ["range", "numpy.random.rand", "random.randint", "random.randint", "torch.tensor", "new_img.type.type.type", "random.randint", "random.randint"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (Tensor): Tensor image of size (C, H, W).\n        Returns:\n            Tensor: Image with n_holes outpainting of it.\n        \"\"\"", "\n", "c", ",", "h", ",", "w", "=", "img", ".", "shape", "\n", "\n", "new_img", "=", "np", ".", "random", ".", "rand", "(", "c", ",", "h", ",", "w", ")", "*", "1.0", "\n", "\n", "for", "n", "in", "range", "(", "self", ".", "n_holes", ")", ":", "\n", "# length of edges", "\n", "            ", "block_noise_size_x", "=", "w", "-", "random", ".", "randint", "(", "3", "*", "w", "//", "7", ",", "4", "*", "w", "//", "7", ")", "\n", "block_noise_size_y", "=", "h", "-", "random", ".", "randint", "(", "3", "*", "h", "//", "7", ",", "4", "*", "h", "//", "7", ")", "\n", "\n", "# lower left corner", "\n", "noise_x", "=", "random", ".", "randint", "(", "3", ",", "w", "-", "block_noise_size_x", "-", "3", ")", "\n", "noise_y", "=", "random", ".", "randint", "(", "3", ",", "h", "-", "block_noise_size_y", "-", "3", ")", "\n", "\n", "# copy the original image", "\n", "new_img", "[", ":", ",", "noise_y", ":", "noise_y", "+", "block_noise_size_y", ",", "\n", "noise_x", ":", "noise_x", "+", "block_noise_size_x", "]", "=", "img", "[", ":", ",", "noise_y", ":", "noise_y", "+", "block_noise_size_y", ",", "\n", "noise_x", ":", "noise_x", "+", "block_noise_size_x", "]", "\n", "new_img", "=", "torch", ".", "tensor", "(", "new_img", ")", "\n", "new_img", "=", "new_img", ".", "type", "(", "torch", ".", "FloatTensor", ")", "\n", "\n", "", "return", "new_img", "\n", "# return torch.tensor(new_img)", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.data_aug.cutout.Cutout.__init__": [[11, 14], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "n_holes", ",", "length", ")", ":", "\n", "        ", "self", ".", "n_holes", "=", "n_holes", "\n", "self", ".", "length", "=", "length", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.data_aug.cutout.Cutout.__call__": [[15, 45], ["img.size", "img.size", "numpy.ones", "range", "torch.from_numpy", "mask.expand_as.expand_as.expand_as", "numpy.random.randint", "numpy.random.randint", "numpy.clip", "numpy.clip", "numpy.clip", "numpy.clip"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "img", ")", ":", "\n", "        ", "\"\"\"\n        Args:\n            img (Tensor): Tensor image of size (C, H, W).\n        Returns:\n            Tensor: Image with n_holes of dimension (length x length) cut out of it.\n        \"\"\"", "\n", "h", "=", "img", ".", "size", "(", "1", ")", "\n", "w", "=", "img", ".", "size", "(", "2", ")", "\n", "\n", "mask", "=", "np", ".", "ones", "(", "(", "h", ",", "w", ")", ",", "np", ".", "float32", ")", "\n", "\n", "for", "n", "in", "range", "(", "self", ".", "n_holes", ")", ":", "\n", "# center", "\n", "            ", "y", "=", "np", ".", "random", ".", "randint", "(", "h", ")", "\n", "x", "=", "np", ".", "random", ".", "randint", "(", "w", ")", "\n", "\n", "# edges", "\n", "y1", "=", "np", ".", "clip", "(", "y", "-", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "y2", "=", "np", ".", "clip", "(", "y", "+", "self", ".", "length", "//", "2", ",", "0", ",", "h", ")", "\n", "x1", "=", "np", ".", "clip", "(", "x", "-", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "x2", "=", "np", ".", "clip", "(", "x", "+", "self", ".", "length", "//", "2", ",", "0", ",", "w", ")", "\n", "\n", "mask", "[", "y1", ":", "y2", ",", "x1", ":", "x2", "]", "=", "0.", "\n", "\n", "", "mask", "=", "torch", ".", "from_numpy", "(", "mask", ")", "\n", "mask", "=", "mask", ".", "expand_as", "(", "img", ")", "\n", "img", "=", "img", "*", "mask", "\n", "\n", "return", "img", "", "", "", ""]], "home.repos.pwc.inspect_result.983632847_USCL.data_aug.dataset_wrapper_Ultrasound_Video_Mixup.USDataset_video.__init__": [[21, 40], ["dataset_wrapper_Ultrasound_Video_Mixup.USDataset_video.get_img_info"], "methods", ["home.repos.pwc.inspect_result.983632847_USCL.data_aug.dataset_wrapper_Ultrasound_Video_Mixup.USDataset_image.get_img_info"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "transform", "=", "None", ",", "LabelList", "=", "None", ",", "DataList", "=", "None", ",", "Checkpoint_Num", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Ultrasound self-supervised training Dataset, choose 2 different images from a video\n        :param data_dir: str\n        :param transform: torch.transform\n        \"\"\"", "\n", "\n", "# self.label_name = {\"Rb1\": 0, \"Rb2\": 1, \"Rb3\": 2, \"Rb4\": 3, \"Rb5\": 4, \"F0_\": 5, \"F1_\": 6, \"F2_\": 7, \"F3_\": 8, \"F4_\": 9,", "\n", "#                    \"Reg\": 10, \"Cov\": 11, \"Ali\": 10, \"Bli\": 11, \"Ple\": 11, \"Oth\": 11}   # US-4", "\n", "# self.label_name = {\"Rb1\": 0, \"Rb2\": 1, \"Rb3\": 2, \"Rb4\": 3, \"Rb5\": 4}    # CLUST", "\n", "# self.label_name = {\"F0_\": 0, \"F1_\": 1, \"F2_\": 2, \"F3_\": 3, \"F4_\": 4}    # Liver Forbrosis", "\n", "self", ".", "label_name", "=", "{", "\"Reg\"", ":", "0", ",", "\"Cov\"", ":", "1", "}", "# Butterfly", "\n", "# self.label_name = {\"Ali\": 0, \"Bli\": 1, \"Ple\": 2, \"Oth\": 3}              # COVID19-LUSMS", "\n", "\n", "self", ".", "data_info", "=", "self", ".", "get_img_info", "(", "data_dir", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "LabelList", "=", "LabelList", "\n", "self", ".", "DataList", "=", "DataList", "\n", "self", ".", "Checkpoint_Num", "=", "Checkpoint_Num", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.data_aug.dataset_wrapper_Ultrasound_Video_Mixup.USDataset_video.__getitem__": [[41, 107], ["len", "random.sample", "PIL.Image.open().convert", "PIL.Image.open().convert", "PIL.Image.open().convert", "numpy.random.beta", "random.sample", "dataset_wrapper_Ultrasound_Video_Mixup.USDataset_video.transform", "len", "random.sample", "PIL.Image.open().convert", "PIL.Image.open().convert", "PIL.Image.open().convert", "PIL.Image.open().convert", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open", "dataset_wrapper_Ultrasound_Video_Mixup.USDataset_video.transform", "dataset_wrapper_Ultrasound_Video_Mixup.USDataset_video.transform", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open", "PIL.Image.open"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "\n", "# ## Different data rate", "\n", "        ", "if", "index", "not", "in", "self", ".", "DataList", ":", "\n", "            ", "index", "=", "random", ".", "sample", "(", "self", ".", "DataList", ",", "1", ")", "[", "0", "]", "# index in data set", "\n", "\n", "", "path_imgs", "=", "self", ".", "data_info", "[", "index", "]", "\n", "if", "len", "(", "path_imgs", ")", ">=", "3", ":", "# more than 3 images in one video", "\n", "            ", "path_img", "=", "random", ".", "sample", "(", "path_imgs", ",", "3", ")", "# random choose 3 images", "\n", "img1", "=", "Image", ".", "open", "(", "path_img", "[", "0", "]", ")", ".", "convert", "(", "'RGB'", ")", "# 0~255", "\n", "img2", "=", "Image", ".", "open", "(", "path_img", "[", "1", "]", ")", ".", "convert", "(", "'RGB'", ")", "# 0~255", "\n", "img3", "=", "Image", ".", "open", "(", "path_img", "[", "2", "]", ")", ".", "convert", "(", "'RGB'", ")", "# 0~255", "\n", "\n", "if", "index", "in", "self", ".", "LabelList", ":", "\n", "# path_imgs[0]: '/home/zhangchunhui/MedicalAI/Butte/Cov-Cardiomyopathy_mp4/Cov-Cardiomyopathy_mp4_frame0.jpg'", "\n", "# path_imgs[0][35:38]: 'Cov'", "\n", "                ", "label1", "=", "self", ".", "label_name", "[", "path_imgs", "[", "0", "]", "[", "35", ":", "38", "]", "]", "\n", "label2", "=", "self", ".", "label_name", "[", "path_imgs", "[", "1", "]", "[", "35", ":", "38", "]", "]", "\n", "label3", "=", "self", ".", "label_name", "[", "path_imgs", "[", "2", "]", "[", "35", ":", "38", "]", "]", "\n", "\n", "", "else", ":", "\n", "                ", "label1", ",", "label2", ",", "label3", "=", "9999", ",", "9999", ",", "9999", "# unlabel data = 9999", "\n", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                ", "img1", ",", "img2", ",", "img3", "=", "self", ".", "transform", "(", "(", "img1", ",", "img2", ",", "img3", ")", ")", "# transform", "\n", "\n", "##########################################################################", "\n", "###  frame mixup", "\n", "# alpha, beta = 2, 5", "\n", "", "alpha", ",", "beta", "=", "0.5", ",", "0.5", "\n", "\n", "lam", "=", "np", ".", "random", ".", "beta", "(", "alpha", ",", "beta", ")", "\n", "# img2 as anchor", "\n", "mixupimg1", "=", "lam", "*", "img1", "+", "(", "1.0", "-", "lam", ")", "*", "img2", "\n", "mixupimg2", "=", "lam", "*", "img3", "+", "(", "1.0", "-", "lam", ")", "*", "img2", "\n", "\n", "return", "mixupimg1", ",", "label1", ",", "mixupimg2", ",", "label2", ",", "img1", ",", "img2", "\n", "\n", "", "elif", "len", "(", "path_imgs", ")", "==", "2", ":", "\n", "            ", "path_img", "=", "random", ".", "sample", "(", "path_imgs", ",", "2", ")", "# random choose 3 images", "\n", "img1", "=", "Image", ".", "open", "(", "path_img", "[", "0", "]", ")", ".", "convert", "(", "'RGB'", ")", "# 0~255", "\n", "img2", "=", "Image", ".", "open", "(", "path_img", "[", "1", "]", ")", ".", "convert", "(", "'RGB'", ")", "# 0~255", "\n", "if", "index", "in", "self", ".", "LabelList", ":", "\n", "                ", "label1", "=", "self", ".", "label_name", "[", "path_imgs", "[", "0", "]", "[", "35", ":", "38", "]", "]", "\n", "label2", "=", "self", ".", "label_name", "[", "path_imgs", "[", "1", "]", "[", "35", ":", "38", "]", "]", "\n", "", "else", ":", "\n", "                ", "label1", ",", "label2", "=", "9999", ",", "9999", "# unlabel data = 9999", "\n", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                ", "img1", ",", "img2", "=", "self", ".", "transform", "(", "(", "img1", ",", "img2", ")", ")", "# transform", "\n", "\n", "", "return", "img1", ",", "label1", ",", "img2", ",", "label2", ",", "img1", ",", "img2", "\n", "\n", "", "else", ":", "# one image in the video, using augmentation to obtain two positive samples", "\n", "            ", "img1", "=", "Image", ".", "open", "(", "path_imgs", "[", "0", "]", ")", ".", "convert", "(", "'RGB'", ")", "# 0~255", "\n", "img2", "=", "Image", ".", "open", "(", "path_imgs", "[", "0", "]", ")", ".", "convert", "(", "'RGB'", ")", "# 0~255", "\n", "if", "index", "in", "self", ".", "LabelList", ":", "\n", "                ", "label1", "=", "self", ".", "label_name", "[", "path_imgs", "[", "0", "]", "[", "35", ":", "38", "]", "]", "\n", "label2", "=", "self", ".", "label_name", "[", "path_imgs", "[", "0", "]", "[", "35", ":", "38", "]", "]", "\n", "", "else", ":", "\n", "                ", "label1", ",", "label2", "=", "9999", ",", "9999", "# unlabel data = 9999", "\n", "\n", "", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "                ", "img1", ",", "img2", "=", "self", ".", "transform", "(", "(", "img1", ",", "img2", ")", ")", "# transform", "\n", "\n", "", "return", "img1", ",", "label1", ",", "img2", ",", "label2", ",", "img1", ",", "img2", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.data_aug.dataset_wrapper_Ultrasound_Video_Mixup.USDataset_video.__len__": [[112, 114], ["len"], "methods", ["None"], ["", "", "def", "__len__", "(", "self", ")", ":", "# len", "\n", "        ", "return", "len", "(", "self", ".", "data_info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.data_aug.dataset_wrapper_Ultrasound_Video_Mixup.USDataset_video.get_img_info": [[115, 131], ["list", "os.walk", "os.listdir", "list", "range", "list.append", "os.path.join", "filter", "len", "os.path.join", "path_imgs.append", "x.endswith", "x.endswith"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_img_info", "(", "data_dir", ")", ":", "\n", "        ", "data_info", "=", "list", "(", ")", "\n", "for", "root", ",", "dirs", ",", "_", "in", "os", ".", "walk", "(", "data_dir", ")", ":", "\n", "            ", "for", "sub_dir", "in", "dirs", ":", "# one video as one class", "\n", "                ", "img_names", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "root", ",", "sub_dir", ")", ")", "\n", "img_names", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", ".", "endswith", "(", "'.jpg'", ")", "or", "x", ".", "endswith", "(", "'.png'", ")", ",", "img_names", ")", ")", "\n", "\n", "path_imgs", "=", "[", "]", "# list", "\n", "for", "i", "in", "range", "(", "len", "(", "img_names", ")", ")", ":", "\n", "                    ", "img_name", "=", "img_names", "[", "i", "]", "\n", "path_img", "=", "os", ".", "path", ".", "join", "(", "root", ",", "sub_dir", ",", "img_name", ")", "\n", "path_imgs", ".", "append", "(", "path_img", ")", "\n", "", "data_info", ".", "append", "(", "path_imgs", ")", "\n", "\n", "", "", "return", "data_info", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.data_aug.dataset_wrapper_Ultrasound_Video_Mixup.USDataset_image.__init__": [[135, 145], ["dataset_wrapper_Ultrasound_Video_Mixup.USDataset_image.get_img_info"], "methods", ["home.repos.pwc.inspect_result.983632847_USCL.data_aug.dataset_wrapper_Ultrasound_Video_Mixup.USDataset_image.get_img_info"], ["    ", "def", "__init__", "(", "self", ",", "data_dir", ",", "transform", "=", "None", ",", "LabelList", "=", "None", ",", "DataList", "=", "None", ")", ":", "\n", "        ", "\"\"\"\n        Ultrasound self-supervised training Dataset, only choose one image from a video\n        :param data_dir: str\n        :param transform: torch.transform\n        \"\"\"", "\n", "self", ".", "data_info", "=", "self", ".", "get_img_info", "(", "data_dir", ")", "\n", "self", ".", "transform", "=", "transform", "\n", "self", ".", "LabelList", "=", "LabelList", "\n", "self", ".", "DataList", "=", "DataList", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.data_aug.dataset_wrapper_Ultrasound_Video_Mixup.USDataset_image.__getitem__": [[146, 157], ["random.sample", "PIL.Image.open().convert", "PIL.Image.open().convert", "dataset_wrapper_Ultrasound_Video_Mixup.USDataset_image.transform", "PIL.Image.open", "PIL.Image.open", "[].find", "[].find", "path_img[].lower", "path_img[].lower"], "methods", ["None"], ["", "def", "__getitem__", "(", "self", ",", "index", ")", ":", "\n", "        ", "path_imgs", "=", "self", ".", "data_info", "[", "index", "]", "# list", "\n", "path_img", "=", "random", ".", "sample", "(", "path_imgs", ",", "1", ")", "# random choose one image", "\n", "img1", "=", "Image", ".", "open", "(", "path_img", "[", "0", "]", ")", ".", "convert", "(", "'RGB'", ")", "# 0~255", "\n", "img2", "=", "Image", ".", "open", "(", "path_img", "[", "0", "]", ")", ".", "convert", "(", "'RGB'", ")", "# 0~255", "\n", "label1", "=", "0", "if", "path_img", "[", "0", "]", ".", "lower", "(", ")", "[", "64", ":", "]", ".", "find", "(", "\"cov\"", ")", ">", "-", "1", "else", "(", "1", "if", "path_img", "[", "0", "]", ".", "lower", "(", ")", "[", "64", ":", "]", ".", "find", "(", "\"pneu\"", ")", ">", "-", "1", "else", "2", ")", "\n", "\n", "if", "self", ".", "transform", "is", "not", "None", ":", "\n", "            ", "img1", ",", "img2", "=", "self", ".", "transform", "(", "(", "img1", ",", "img2", ")", ")", "# transform", "\n", "\n", "", "return", "img1", ",", "label1", ",", "img2", ",", "label1", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.data_aug.dataset_wrapper_Ultrasound_Video_Mixup.USDataset_image.__len__": [[158, 160], ["len"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "# len", "\n", "        ", "return", "len", "(", "self", ".", "data_info", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.data_aug.dataset_wrapper_Ultrasound_Video_Mixup.USDataset_image.get_img_info": [[161, 176], ["list", "os.walk", "os.listdir", "list", "range", "list.append", "os.path.join", "filter", "len", "os.path.join", "path_imgs.append", "x.endswith", "x.endswith"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "get_img_info", "(", "data_dir", ")", ":", "\n", "        ", "data_info", "=", "list", "(", ")", "\n", "for", "root", ",", "dirs", ",", "_", "in", "os", ".", "walk", "(", "data_dir", ")", ":", "\n", "            ", "for", "sub_dir", "in", "dirs", ":", "# one video as one class", "\n", "                ", "img_names", "=", "os", ".", "listdir", "(", "os", ".", "path", ".", "join", "(", "root", ",", "sub_dir", ")", ")", "\n", "img_names", "=", "list", "(", "filter", "(", "lambda", "x", ":", "x", ".", "endswith", "(", "'.jpg'", ")", "or", "x", ".", "endswith", "(", "'.png'", ")", ",", "img_names", ")", ")", "\n", "path_imgs", "=", "[", "]", "\n", "for", "i", "in", "range", "(", "len", "(", "img_names", ")", ")", ":", "\n", "                    ", "img_name", "=", "img_names", "[", "i", "]", "\n", "path_img", "=", "os", ".", "path", ".", "join", "(", "root", ",", "sub_dir", ",", "img_name", ")", "\n", "path_imgs", ".", "append", "(", "path_img", ")", "\n", "", "data_info", ".", "append", "(", "path_imgs", ")", "\n", "\n", "", "", "return", "data_info", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.data_aug.dataset_wrapper_Ultrasound_Video_Mixup.DataSetWrapper.__init__": [[180, 189], ["eval"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "batch_size", ",", "LabelList", ",", "DataList", ",", "Checkpoint_Num", ",", "num_workers", ",", "valid_size", ",", "input_shape", ",", "s", ")", ":", "\n", "        ", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "num_workers", "=", "num_workers", "\n", "self", ".", "valid_size", "=", "valid_size", "# leave out ratio, e.g. 0.20", "\n", "self", ".", "s", "=", "s", "\n", "self", ".", "input_shape", "=", "eval", "(", "input_shape", ")", "# (H, W, C) shape of input image", "\n", "self", ".", "LabelList", "=", "LabelList", "\n", "self", ".", "DataList", "=", "DataList", "\n", "self", ".", "Checkpoint_Num", "=", "Checkpoint_Num", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.data_aug.dataset_wrapper_Ultrasound_Video_Mixup.DataSetWrapper.get_data_loaders": [[190, 225], ["dataset_wrapper_Ultrasound_Video_Mixup.DataSetWrapper._get_simclr_pipeline_transform", "print", "print", "dataset_wrapper_Ultrasound_Video_Mixup.DataSetWrapper.get_train_validation_data_loaders", "print", "dataset_wrapper_Ultrasound_Video_Mixup.USDataset_video", "print", "dataset_wrapper_Ultrasound_Video_Mixup.USDataset_image", "dataset_wrapper_Ultrasound_Video_Mixup.SimCLRDataTransform", "dataset_wrapper_Ultrasound_Video_Mixup.SimCLRDataTransform"], "methods", ["home.repos.pwc.inspect_result.983632847_USCL.data_aug.dataset_wrapper_Ultrasound_Video_Mixup.DataSetWrapper._get_simclr_pipeline_transform", "home.repos.pwc.inspect_result.983632847_USCL.data_aug.dataset_wrapper_Ultrasound_Video_Mixup.DataSetWrapper.get_train_validation_data_loaders"], ["", "def", "get_data_loaders", "(", "self", ")", ":", "\n", "        ", "''' Get dataloader for target dataset, this function will be called before the training process '''", "\n", "\n", "data_augment", "=", "self", ".", "_get_simclr_pipeline_transform", "(", ")", "\n", "print", "(", "'\\nData augmentation:'", ")", "\n", "print", "(", "data_augment", ")", "\n", "\n", "use_video", "=", "True", "\n", "if", "use_video", ":", "\n", "            ", "print", "(", "'\\nUse video augmentation!'", ")", "\n", "# US-4", "\n", "# train_dataset = USDataset_video(\"/home/zhangchunhui/WorkSpace/SSL/Ultrasound_Datasets_train/Video/\",", "\n", "#                                 transform=SimCLRDataTransform(data_augment), LabelList=self.LabelList, DataList=self.DataList)  # augmented from 2 images", "\n", "\n", "# 1 video-CLUST", "\n", "# train_dataset = USDataset_video(\"/home/zhangchunhui/MedicalAI/Ultrasound_Datasets_train/CLUST/\",", "\n", "#                                 transform=SimCLRDataTransform(data_augment), LabelList=self.LabelList, DataList=self.DataList)  # augmented from 2 images", "\n", "# 1 video-Liver", "\n", "# train_dataset = USDataset_video(\"/home/zhangchunhui/MedicalAI/Ultrasound_Datasets_train/Liver/\",", "\n", "#                                 transform=SimCLRDataTransform(data_augment), LabelList=self.LabelList, DataList=self.DataList)  # augmented from 2 images", "\n", "# 1 video-COVID", "\n", "# train_dataset = USDataset_video(\"/home/zhangchunhui/MedicalAI/Ultrasound_Datasets_train/COVID/\",", "\n", "#                                 transform=SimCLRDataTransform(data_augment), LabelList=self.LabelList, DataList=self.DataList)  # augmented from 2 images", "\n", "# 1 video-Butte", "\n", "train_dataset", "=", "USDataset_video", "(", "\"/home/zhangchunhui/MedicalAI/Butte/\"", ",", "\n", "transform", "=", "SimCLRDataTransform", "(", "data_augment", ")", ",", "LabelList", "=", "self", ".", "LabelList", ",", "DataList", "=", "self", ".", "DataList", ")", "# augmented from 2 images", "\n", "", "else", ":", "\n", "            ", "print", "(", "'\\nDo not use video augmentation!'", ")", "\n", "# Images", "\n", "train_dataset", "=", "USDataset_image", "(", "\"/home/zhangchunhui/MedicalAI/Butte/\"", ",", "\n", "transform", "=", "SimCLRDataTransform", "(", "data_augment", ")", ",", "LabelList", "=", "self", ".", "LabelList", ",", "DataList", "=", "self", ".", "DataList", ")", "# augmented from 1 image", "\n", "\n", "", "train_loader", ",", "valid_loader", "=", "self", ".", "get_train_validation_data_loaders", "(", "train_dataset", ")", "\n", "# train_loader = self.get_train_validation_data_loaders(train_dataset)", "\n", "return", "train_loader", ",", "valid_loader", "\n", "# return train_loader", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.data_aug.dataset_wrapper_Ultrasound_Video_Mixup.DataSetWrapper.__len__": [[227, 229], ["None"], "methods", ["None"], ["", "def", "__len__", "(", "self", ")", ":", "#", "\n", "        ", "return", "self", ".", "batch_size", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.data_aug.dataset_wrapper_Ultrasound_Video_Mixup.DataSetWrapper._get_simclr_pipeline_transform": [[230, 254], ["torchvision.ColorJitter", "torchvision.Compose", "data_aug.sharpen.Sharpen", "torchvision.Resize", "torchvision.RandomResizedCrop", "torchvision.RandomHorizontalFlip", "torchvision.ToTensor", "torchvision.Normalize"], "methods", ["None"], ["", "def", "_get_simclr_pipeline_transform", "(", "self", ")", ":", "\n", "        ", "'''\n        Get a set of data augmentation transformations as described in the SimCLR paper.\n        Random Crop (resize to original size) + Random color distortion + Gaussian Blur\n        '''", "\n", "\n", "color_jitter", "=", "transforms", ".", "ColorJitter", "(", "0.8", "*", "self", ".", "s", ",", "0.8", "*", "self", ".", "s", ",", "0.8", "*", "self", ".", "s", ",", "0.2", "*", "self", ".", "s", ")", "\n", "data_transforms", "=", "transforms", ".", "Compose", "(", "[", "Sharpen", "(", "degree", "=", "0", ")", ",", "\n", "transforms", ".", "Resize", "(", "(", "self", ".", "input_shape", "[", "0", "]", ",", "self", ".", "input_shape", "[", "1", "]", ")", ")", ",", "\n", "transforms", ".", "RandomResizedCrop", "(", "size", "=", "self", ".", "input_shape", "[", "0", "]", ",", "scale", "=", "(", "0.8", ",", "1.0", ")", ",", "ratio", "=", "(", "0.8", ",", "1.25", ")", ")", ",", "\n", "transforms", ".", "RandomHorizontalFlip", "(", ")", ",", "\n", "# transforms.RandomRotation(10),", "\n", "color_jitter", ",", "\n", "# transforms.RandomAffine(degrees=0, translate=(0.1, 0.1)),", "\n", "# GaussianBlur(kernel_size=int(0.05 * self.input_shape[0])),", "\n", "transforms", ".", "ToTensor", "(", ")", ",", "\n", "# NonlinearTrans(prob=0.9),   # 0-1", "\n", "# transforms.Normalize(mean=[0.5,0.5,0.5], std=[0.25,0.25,0.25]),", "\n", "# Cutout(n_holes=3, length=32),", "\n", "# Outpainting(n_holes=5),", "\n", "transforms", ".", "Normalize", "(", "mean", "=", "[", "0.5", ",", "0.5", ",", "0.5", "]", ",", "std", "=", "[", "0.25", ",", "0.25", ",", "0.25", "]", ")", ",", "\n", "]", ")", "\n", "\n", "return", "data_transforms", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.data_aug.dataset_wrapper_Ultrasound_Video_Mixup.DataSetWrapper.get_train_validation_data_loaders": [[255, 276], ["len", "list", "numpy.random.shuffle", "int", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.sampler.SubsetRandomSampler", "torch.utils.data.DataLoader", "torch.utils.data.DataLoader", "range", "numpy.floor"], "methods", ["None"], ["", "def", "get_train_validation_data_loaders", "(", "self", ",", "train_dataset", ")", ":", "\n", "# obtain indices that will be used for training / validation", "\n", "        ", "num_train", "=", "len", "(", "train_dataset", ")", "\n", "indices", "=", "list", "(", "range", "(", "num_train", ")", ")", "\n", "np", ".", "random", ".", "shuffle", "(", "indices", ")", "\n", "\n", "split", "=", "int", "(", "np", ".", "floor", "(", "self", ".", "valid_size", "*", "num_train", ")", ")", "\n", "train_idx", ",", "valid_idx", "=", "indices", "[", "split", ":", "]", ",", "indices", "[", ":", "split", "]", "\n", "train_idx", "=", "indices", "[", "split", ":", "]", "\n", "\n", "# define samplers for obtaining training and validation batches", "\n", "train_sampler", "=", "SubsetRandomSampler", "(", "train_idx", ")", "\n", "valid_sampler", "=", "SubsetRandomSampler", "(", "valid_idx", ")", "\n", "\n", "# data loaders for training and validation, drop_last should be False to avoid data shortage of valid_loader", "\n", "train_loader", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "self", ".", "batch_size", ",", "sampler", "=", "train_sampler", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ",", "drop_last", "=", "False", ",", "shuffle", "=", "False", ")", "\n", "valid_loader", "=", "DataLoader", "(", "train_dataset", ",", "batch_size", "=", "self", ".", "batch_size", ",", "sampler", "=", "valid_sampler", ",", "\n", "num_workers", "=", "self", ".", "num_workers", ",", "drop_last", "=", "False", ")", "\n", "\n", "return", "train_loader", ",", "valid_loader", "\n", "# return train_loader", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.data_aug.dataset_wrapper_Ultrasound_Video_Mixup.SimCLRDataTransform.__init__": [[283, 285], ["None"], "methods", ["None"], ["def", "__init__", "(", "self", ",", "transform", ")", ":", "\n", "        ", "self", ".", "transform", "=", "transform", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.data_aug.dataset_wrapper_Ultrasound_Video_Mixup.SimCLRDataTransform.__call__": [[286, 296], ["len", "dataset_wrapper_Ultrasound_Video_Mixup.SimCLRDataTransform.transform", "dataset_wrapper_Ultrasound_Video_Mixup.SimCLRDataTransform.transform", "dataset_wrapper_Ultrasound_Video_Mixup.SimCLRDataTransform.transform", "dataset_wrapper_Ultrasound_Video_Mixup.SimCLRDataTransform.transform", "dataset_wrapper_Ultrasound_Video_Mixup.SimCLRDataTransform.transform"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "if", "len", "(", "sample", ")", ">", "2", ":", "\n", "            ", "xi", "=", "self", ".", "transform", "(", "sample", "[", "0", "]", ")", "# sample -> xi, xj in original implementation", "\n", "xj", "=", "self", ".", "transform", "(", "sample", "[", "1", "]", ")", "\n", "xk", "=", "self", ".", "transform", "(", "sample", "[", "2", "]", ")", "\n", "return", "xi", ",", "xj", ",", "xk", "\n", "", "else", ":", "\n", "            ", "xi", "=", "self", ".", "transform", "(", "sample", "[", "0", "]", ")", "# sample -> xi, xj in original implementation", "\n", "xj", "=", "self", ".", "transform", "(", "sample", "[", "1", "]", ")", "\n", "return", "xi", ",", "xj", "\n", "", "", "", ""]], "home.repos.pwc.inspect_result.983632847_USCL.data_aug.gaussian_blur.GaussianBlur.__init__": [[9, 14], ["None"], "methods", ["None"], ["    ", "def", "__init__", "(", "self", ",", "kernel_size", ",", "min", "=", "0.1", ",", "max", "=", "2.0", ")", ":", "\n", "        ", "self", ".", "min", "=", "min", "\n", "self", ".", "max", "=", "max", "\n", "# kernel size is set to be 5% of the image height/width", "\n", "self", ".", "kernel_size", "=", "kernel_size", "if", "kernel_size", "%", "2", "==", "1", "else", "kernel_size", "-", "1", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.data_aug.gaussian_blur.GaussianBlur.__call__": [[15, 27], ["numpy.array", "numpy.random.random_sample", "cv2.GaussianBlur", "numpy.random.random_sample"], "methods", ["None"], ["", "def", "__call__", "(", "self", ",", "sample", ")", ":", "\n", "        ", "sample", "=", "np", ".", "array", "(", "sample", ")", "\n", "\n", "# blur the image with a 50% chance", "\n", "prob", "=", "np", ".", "random", ".", "random_sample", "(", ")", "\n", "\n", "if", "prob", "<", "0.5", ":", "\n", "            ", "sigma", "=", "(", "self", ".", "max", "-", "self", ".", "min", ")", "*", "np", ".", "random", ".", "random_sample", "(", ")", "+", "self", ".", "min", "\n", "# kernel size must has its width and height odd numbers", "\n", "sample", "=", "cv2", ".", "GaussianBlur", "(", "sample", ",", "(", "self", ".", "kernel_size", ",", "self", ".", "kernel_size", ")", ",", "sigma", ")", "\n", "\n", "", "return", "sample", "\n", "", "", ""]], "home.repos.pwc.inspect_result.983632847_USCL.loss.nt_xent.NTXentLoss.__init__": [[7, 15], ["super().__init__", "torch.nn.Softmax", "nt_xent.NTXentLoss._get_similarity_function", "torch.nn.CrossEntropyLoss"], "methods", ["home.repos.pwc.inspect_result.983632847_USCL.loss.nt_xent.NTXentLoss.__init__", "home.repos.pwc.inspect_result.983632847_USCL.loss.nt_xent.NTXentLoss._get_similarity_function"], ["    ", "def", "__init__", "(", "self", ",", "device", ",", "batch_size", ",", "temperature", ",", "use_cosine_similarity", ")", ":", "\n", "        ", "super", "(", "NTXentLoss", ",", "self", ")", ".", "__init__", "(", ")", "\n", "self", ".", "batch_size", "=", "batch_size", "\n", "self", ".", "temperature", "=", "temperature", "\n", "self", ".", "device", "=", "device", "\n", "self", ".", "softmax", "=", "torch", ".", "nn", ".", "Softmax", "(", "dim", "=", "-", "1", ")", "\n", "self", ".", "similarity_function", "=", "self", ".", "_get_similarity_function", "(", "use_cosine_similarity", ")", "\n", "self", ".", "criterion", "=", "torch", ".", "nn", ".", "CrossEntropyLoss", "(", "reduction", "=", "\"sum\"", ")", "# sum all 2N terms of loss instead of getting mean val", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.loss.nt_xent.NTXentLoss._get_similarity_function": [[16, 23], ["torch.nn.CosineSimilarity"], "methods", ["None"], ["", "def", "_get_similarity_function", "(", "self", ",", "use_cosine_similarity", ")", ":", "\n", "        ", "''' Cosine similarity or dot similarity for computing loss '''", "\n", "if", "use_cosine_similarity", ":", "\n", "            ", "self", ".", "_cosine_similarity", "=", "torch", ".", "nn", ".", "CosineSimilarity", "(", "dim", "=", "-", "1", ")", "\n", "return", "self", ".", "_cosine_simililarity", "\n", "", "else", ":", "\n", "            ", "return", "self", ".", "_dot_simililarity", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.loss.nt_xent.NTXentLoss._get_correlated_mask": [[24, 31], ["numpy.eye", "numpy.eye", "numpy.eye", "torch.from_numpy", "torch.from_numpy.to"], "methods", ["None"], ["", "", "def", "_get_correlated_mask", "(", "self", ")", ":", "\n", "        ", "diag", "=", "np", ".", "eye", "(", "2", "*", "self", ".", "batch_size", ")", "# I(2Nx2N), identity matrix", "\n", "l1", "=", "np", ".", "eye", "(", "(", "2", "*", "self", ".", "batch_size", ")", ",", "2", "*", "self", ".", "batch_size", ",", "k", "=", "-", "self", ".", "batch_size", ")", "# lower diagonal matrix, N non-zero elements", "\n", "l2", "=", "np", ".", "eye", "(", "(", "2", "*", "self", ".", "batch_size", ")", ",", "2", "*", "self", ".", "batch_size", ",", "k", "=", "self", ".", "batch_size", ")", "# upper diagonal matrix, N non-zero elements", "\n", "mask", "=", "torch", ".", "from_numpy", "(", "(", "diag", "+", "l1", "+", "l2", ")", ")", "# [2N, 2N], with 4N elements are non-zero", "\n", "mask", "=", "(", "1", "-", "mask", ")", ".", "type", "(", "torch", ".", "bool", ")", "# [2N, 2N], with 4(N^2 - N) elements are \"True\"", "\n", "return", "mask", ".", "to", "(", "self", ".", "device", ")", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.loss.nt_xent.NTXentLoss._dot_simililarity": [[32, 39], ["torch.tensordot", "x.unsqueeze", "y.T.unsqueeze"], "methods", ["None"], ["", "@", "staticmethod", "\n", "def", "_dot_simililarity", "(", "x", ",", "y", ")", ":", "\n", "        ", "v", "=", "torch", ".", "tensordot", "(", "x", ".", "unsqueeze", "(", "1", ")", ",", "y", ".", "T", ".", "unsqueeze", "(", "0", ")", ",", "dims", "=", "2", ")", "# extend the dimensions before calculating similarity ", "\n", "# x shape: (N, 1, C)", "\n", "# y shape: (1, C, 2N)", "\n", "# v shape: (N, 2N)", "\n", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.loss.nt_xent.NTXentLoss._cosine_simililarity": [[40, 46], ["nt_xent.NTXentLoss._cosine_similarity", "x.unsqueeze", "y.unsqueeze"], "methods", ["None"], ["", "def", "_cosine_simililarity", "(", "self", ",", "x", ",", "y", ")", ":", "\n", "# x shape: (N, 1, C), N input samples", "\n", "# y shape: (1, 2N, C), 2N output representations", "\n", "# v shape: (N, 2N)", "\n", "        ", "v", "=", "self", ".", "_cosine_similarity", "(", "x", ".", "unsqueeze", "(", "1", ")", ",", "y", ".", "unsqueeze", "(", "0", ")", ")", "# extend the dimensions before calculating similarity ", "\n", "return", "v", "\n", "\n"]], "home.repos.pwc.inspect_result.983632847_USCL.loss.nt_xent.NTXentLoss.forward": [[47, 72], ["nt_xent.NTXentLoss._get_correlated_mask().type", "torch.cat", "nt_xent.NTXentLoss.similarity_function", "torch.diag", "torch.diag", "torch.cat().view", "similarity_matrix[].view", "torch.cat", "torch.zeros().to().long", "nt_xent.NTXentLoss.criterion", "nt_xent.NTXentLoss._get_correlated_mask", "torch.cat", "torch.zeros().to", "torch.zeros"], "methods", ["home.repos.pwc.inspect_result.983632847_USCL.loss.nt_xent.NTXentLoss._get_correlated_mask"], ["", "def", "forward", "(", "self", ",", "zis", ",", "zjs", ")", ":", "\n", "        ", "if", "self", ".", "batch_size", "!=", "zis", ".", "shape", "[", "0", "]", ":", "\n", "            ", "self", ".", "batch_size", "=", "zis", ".", "shape", "[", "0", "]", "# the last batch may not have the same batch size", "\n", "\n", "", "self", ".", "mask_samples_from_same_repr", "=", "self", ".", "_get_correlated_mask", "(", ")", ".", "type", "(", "torch", ".", "bool", ")", "\n", "representations", "=", "torch", ".", "cat", "(", "[", "zjs", ",", "zis", "]", ",", "dim", "=", "0", ")", "# [N, C] => [2N, C]", "\n", "\n", "similarity_matrix", "=", "self", ".", "similarity_function", "(", "representations", ",", "representations", ")", "# [2N, 2N]", "\n", "\n", "# filter out the scores from the positive samples", "\n", "l_pos", "=", "torch", ".", "diag", "(", "similarity_matrix", ",", "self", ".", "batch_size", ")", "# upper diagonal, N x [left, right] positive sample pairs", "\n", "r_pos", "=", "torch", ".", "diag", "(", "similarity_matrix", ",", "-", "self", ".", "batch_size", ")", "# lower diagonal, N x [right, left] positive sample pairs", "\n", "positives", "=", "torch", ".", "cat", "(", "[", "l_pos", ",", "r_pos", "]", ")", ".", "view", "(", "2", "*", "self", ".", "batch_size", ",", "1", ")", "# similarity of positive pairs, [2N, 1]", "\n", "\n", "negatives", "=", "similarity_matrix", "[", "self", ".", "mask_samples_from_same_repr", "]", ".", "view", "(", "2", "*", "self", ".", "batch_size", ",", "-", "1", ")", "# [2N, 2N]", "\n", "\n", "logits", "=", "torch", ".", "cat", "(", "(", "positives", ",", "negatives", ")", ",", "dim", "=", "1", ")", "# [2N, 2N+1], the 2N+1 elements of one column are used for one loss term", "\n", "logits", "/=", "self", ".", "temperature", "\n", "\n", "# labels are all 0, meaning the first value of each vector is the nominator term of CELoss", "\n", "# each denominator contains 2N+1-2 = 2N-1 terms, corresponding to all similarities between the sample and other samples.", "\n", "labels", "=", "torch", ".", "zeros", "(", "2", "*", "self", ".", "batch_size", ")", ".", "to", "(", "self", ".", "device", ")", ".", "long", "(", ")", "\n", "loss", "=", "self", ".", "criterion", "(", "logits", ",", "labels", ")", "\n", "\n", "return", "loss", "/", "(", "2", "*", "self", ".", "batch_size", ")", "# Don't know why it is divided by 2N, the CELoss can set directly to reduction='mean'", "\n", "\n"]]}